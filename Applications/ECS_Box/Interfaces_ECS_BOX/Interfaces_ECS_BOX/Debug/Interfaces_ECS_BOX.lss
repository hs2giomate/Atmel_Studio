
Interfaces_ECS_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f134  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f134  0000f134  0001f134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000056c  20000000  0000f13c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002056c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002056c  2**0
                  CONTENTS
  5 .bss          00000b60  2000056c  0000f6a8  0002056c  2**2
                  ALLOC
  6 .stack        00010004  200010cc  00010208  0002056c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002059a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00069c0d  00000000  00000000  000205f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009159  00000000  00000000  0008a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001bcd2  00000000  00000000  00093359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000031b0  00000000  00000000  000af02b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002e88  00000000  00000000  000b21db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004cff6  00000000  00000000  000b5063  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00037b8f  00000000  00000000  00102059  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c1a3  00000000  00000000  00139be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cee0  00000000  00000000  00275d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 10 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	89 5c 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .\..............
      7c:	d1 02 00 00 f5 4a 00 00 05 4b 00 00 15 4b 00 00     .....J...K...K..
      8c:	25 4b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     %K..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 c5 70 00 00 e1 70 00 00 fd 70 00 00     .....p...p...p..
     144:	19 71 00 00 35 71 00 00 51 71 00 00 6d 71 00 00     .q..5q..Qq..mq..
     154:	89 71 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .q..............
     164:	d1 02 00 00 a5 71 00 00 c1 71 00 00 dd 71 00 00     .....q...q...q..
     174:	f9 71 00 00 d1 02 00 00 79 40 00 00 c1 ab 00 00     .q......y@......
     184:	d1 ab 00 00 e1 ab 00 00 f1 ab 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 8d 82 00 00 a9 82 00 00     ................
     1f4:	c5 82 00 00 e1 82 00 00 fd 82 00 00 19 83 00 00     ................
     204:	d1 02 00 00 35 83 00 00 d1 02 00 00 d1 02 00 00     ....5...........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000056c 	.word	0x2000056c
     280:	00000000 	.word	0x00000000
     284:	0000f13c 	.word	0x0000f13c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f13c 	.word	0x0000f13c
     2c4:	20000570 	.word	0x20000570
     2c8:	0000f13c 	.word	0x0000f13c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f13c 	.word	0x0000f13c
     33c:	2000056c 	.word	0x2000056c
     340:	200010cc 	.word	0x200010cc
     344:	2000056c 	.word	0x2000056c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e7d9 	.word	0x0000e7d9
     354:	000003d5 	.word	0x000003d5

00000358 <_Z14StartLivePulsev>:
 */ 


#include "main.h"

uint8_t	StartLivePulse(void){
     358:	b508      	push	{r3, lr}
	//usb<<"**** Life Pulse Activated  ****"<<NEWLINE;
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     35a:	4802      	ldr	r0, [pc, #8]	; (364 <_Z14StartLivePulsev+0xc>)
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <_Z14StartLivePulsev+0x10>)
     35e:	4798      	blx	r3
	return p;
}
     360:	b2c0      	uxtb	r0, r0
     362:	bd08      	pop	{r3, pc}
     364:	20000ed4 	.word	0x20000ed4
     368:	00002431 	.word	0x00002431

0000036c <_Z25WriteUserParametersEEPROMv>:
	else
	{
		return false;
	}
}
bool	WriteUserParametersEEPROM(void){
     36c:	b570      	push	{r4, r5, r6, lr}
     36e:	b082      	sub	sp, #8

	userParameters	p=defaultParameters;
     370:	4b12      	ldr	r3, [pc, #72]	; (3bc <_Z25WriteUserParametersEEPROMv+0x50>)
     372:	781b      	ldrb	r3, [r3, #0]
     374:	a902      	add	r1, sp, #8
     376:	f801 3d04 	strb.w	r3, [r1, #-4]!
	//flash.eraseFlash((uint32_t)&flashMap->parameters,sizeof(userParameters));
	uint32_t add32= (uint32_t)&eepromLayout->parameters;
     37a:	4b11      	ldr	r3, [pc, #68]	; (3c0 <_Z25WriteUserParametersEEPROMv+0x54>)
     37c:	681c      	ldr	r4, [r3, #0]
     37e:	3440      	adds	r4, #64	; 0x40
	uint8_t  add8=(uint8_t)(0xff&add32);
     380:	b2e4      	uxtb	r4, r4
	eeprom.WriteAddress((uint8_t*)&p,add8,sizeof(userParameters));
     382:	4d10      	ldr	r5, [pc, #64]	; (3c4 <_Z25WriteUserParametersEEPROMv+0x58>)
     384:	2301      	movs	r3, #1
     386:	4622      	mov	r2, r4
     388:	4628      	mov	r0, r5
     38a:	4e0f      	ldr	r6, [pc, #60]	; (3c8 <_Z25WriteUserParametersEEPROMv+0x5c>)
     38c:	47b0      	blx	r6
	delay_ms(WRITE_DELAY);
     38e:	2064      	movs	r0, #100	; 0x64
     390:	4b0e      	ldr	r3, [pc, #56]	; (3cc <_Z25WriteUserParametersEEPROMv+0x60>)
     392:	4798      	blx	r3
	userParameters	q;
	eeprom.ReadAddress((uint8_t*)&q,add8,sizeof(userParameters));
     394:	2301      	movs	r3, #1
     396:	4622      	mov	r2, r4
     398:	4669      	mov	r1, sp
     39a:	4628      	mov	r0, r5
     39c:	4c0c      	ldr	r4, [pc, #48]	; (3d0 <_Z25WriteUserParametersEEPROMv+0x64>)
     39e:	47a0      	blx	r4
	if (p.flapperValveOffset==q.flapperValveOffset)
     3a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
     3a4:	f89d 3000 	ldrb.w	r3, [sp]
     3a8:	429a      	cmp	r2, r3
     3aa:	d004      	beq.n	3b6 <_Z25WriteUserParametersEEPROMv+0x4a>
	{
		return true;
	}
	else
	{
		WriteUserParametersEEPROM();
     3ac:	f7ff ffde 	bl	36c <_Z25WriteUserParametersEEPROMv>
	}
	return false;
     3b0:	2000      	movs	r0, #0
}
     3b2:	b002      	add	sp, #8
     3b4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
     3b6:	2001      	movs	r0, #1
     3b8:	e7fb      	b.n	3b2 <_Z25WriteUserParametersEEPROMv+0x46>
     3ba:	bf00      	nop
     3bc:	0000f054 	.word	0x0000f054
     3c0:	20000bac 	.word	0x20000bac
     3c4:	20000bb0 	.word	0x20000bb0
     3c8:	0000d2bd 	.word	0x0000d2bd
     3cc:	00001fd5 	.word	0x00001fd5
     3d0:	0000d3b1 	.word	0x0000d3b1

000003d4 <main>:


int main(void)		
{
     3d4:	b500      	push	{lr}
     3d6:	b0c9      	sub	sp, #292	; 0x124
	atmel_start_init();
     3d8:	4b1a      	ldr	r3, [pc, #104]	; (444 <main+0x70>)
     3da:	4798      	blx	r3
	usb.Init();
     3dc:	481a      	ldr	r0, [pc, #104]	; (448 <main+0x74>)
     3de:	4b1b      	ldr	r3, [pc, #108]	; (44c <main+0x78>)
     3e0:	4798      	blx	r3
	StartLivePulse();
     3e2:	4b1b      	ldr	r3, [pc, #108]	; (450 <main+0x7c>)
     3e4:	4798      	blx	r3
	delay_ms(500);
     3e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     3ea:	4b1a      	ldr	r3, [pc, #104]	; (454 <main+0x80>)
     3ec:	4798      	blx	r3
	eeprom.Init();
     3ee:	481a      	ldr	r0, [pc, #104]	; (458 <main+0x84>)
     3f0:	4b1a      	ldr	r3, [pc, #104]	; (45c <main+0x88>)
     3f2:	4798      	blx	r3
	WriteUserParametersEEPROM();
     3f4:	4b1a      	ldr	r3, [pc, #104]	; (460 <main+0x8c>)
     3f6:	4798      	blx	r3
	Maintenance_Tool	toolApp;
     3f8:	4668      	mov	r0, sp
     3fa:	4b1a      	ldr	r3, [pc, #104]	; (464 <main+0x90>)
     3fc:	4798      	blx	r3
	toolApp.Init();
     3fe:	4668      	mov	r0, sp
     400:	4b19      	ldr	r3, [pc, #100]	; (468 <main+0x94>)
     402:	4798      	blx	r3
	while (1)
	{
		if (toolApp.IsAppConnected())
     404:	4c19      	ldr	r4, [pc, #100]	; (46c <main+0x98>)
			
			
		}
		else
		{
			toolApp.setConnected(false);
     406:	4e1a      	ldr	r6, [pc, #104]	; (470 <main+0x9c>)
			delay_ms(100);
     408:	4d12      	ldr	r5, [pc, #72]	; (454 <main+0x80>)
     40a:	e009      	b.n	420 <main+0x4c>
				toolApp.NotifyConnectionAcknowledge();
     40c:	4668      	mov	r0, sp
     40e:	4b19      	ldr	r3, [pc, #100]	; (474 <main+0xa0>)
     410:	4798      	blx	r3
				toolApp.ClearLocalBuffer();
     412:	4668      	mov	r0, sp
     414:	4b18      	ldr	r3, [pc, #96]	; (478 <main+0xa4>)
     416:	4798      	blx	r3
				while (!usb.txReady);
     418:	4a0b      	ldr	r2, [pc, #44]	; (448 <main+0x74>)
     41a:	7d13      	ldrb	r3, [r2, #20]
     41c:	2b00      	cmp	r3, #0
     41e:	d0fc      	beq.n	41a <main+0x46>
		if (toolApp.IsAppConnected())
     420:	4668      	mov	r0, sp
     422:	47a0      	blx	r4
     424:	b138      	cbz	r0, 436 <main+0x62>
			if (toolApp.localBuffer[sizeof(GAINMessageHeader)]==(uint8_t)'f')
     426:	f89d 3009 	ldrb.w	r3, [sp, #9]
     42a:	2b66      	cmp	r3, #102	; 0x66
     42c:	d0ee      	beq.n	40c <main+0x38>
				toolApp.handleCommunication();
     42e:	4668      	mov	r0, sp
     430:	4b12      	ldr	r3, [pc, #72]	; (47c <main+0xa8>)
     432:	4798      	blx	r3
     434:	e7f4      	b.n	420 <main+0x4c>
			toolApp.setConnected(false);
     436:	2100      	movs	r1, #0
     438:	4668      	mov	r0, sp
     43a:	47b0      	blx	r6
			delay_ms(100);
     43c:	2064      	movs	r0, #100	; 0x64
     43e:	47a8      	blx	r5
     440:	e7ee      	b.n	420 <main+0x4c>
     442:	bf00      	nop
     444:	00000991 	.word	0x00000991
     448:	20000cb4 	.word	0x20000cb4
     44c:	0000d961 	.word	0x0000d961
     450:	00000359 	.word	0x00000359
     454:	00001fd5 	.word	0x00001fd5
     458:	20000bb0 	.word	0x20000bb0
     45c:	0000d1ed 	.word	0x0000d1ed
     460:	0000036d 	.word	0x0000036d
     464:	000004a1 	.word	0x000004a1
     468:	000006dd 	.word	0x000006dd
     46c:	000004e9 	.word	0x000004e9
     470:	000004b9 	.word	0x000004b9
     474:	00000589 	.word	0x00000589
     478:	00000569 	.word	0x00000569
     47c:	000008c9 	.word	0x000008c9

00000480 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     480:	4b02      	ldr	r3, [pc, #8]	; (48c <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     482:	681a      	ldr	r2, [r3, #0]
     484:	6813      	ldr	r3, [r2, #0]
     486:	3301      	adds	r3, #1
     488:	6013      	str	r3, [r2, #0]
     48a:	4770      	bx	lr
     48c:	20000588 	.word	0x20000588

00000490 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     490:	4b02      	ldr	r3, [pc, #8]	; (49c <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     492:	681b      	ldr	r3, [r3, #0]
     494:	2200      	movs	r2, #0
     496:	711a      	strb	r2, [r3, #4]
     498:	4770      	bx	lr
     49a:	bf00      	nop
     49c:	20000588 	.word	0x20000588

000004a0 <_ZN16Maintenance_ToolC1Ev>:


// default constructor
Maintenance_Tool::Maintenance_Tool()
{
	ptrMaintenanceTool=this;
     4a0:	4a04      	ldr	r2, [pc, #16]	; (4b4 <_ZN16Maintenance_ToolC1Ev+0x14>)
     4a2:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
     4a4:	2200      	movs	r2, #0
     4a6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
     4aa:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
     4ac:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
     4ae:	6002      	str	r2, [r0, #0]
	
} //Maintenance_Tool
     4b0:	4770      	bx	lr
     4b2:	bf00      	nop
     4b4:	20000588 	.word	0x20000588

000004b8 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     4b8:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     4ba:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
     4be:	b919      	cbnz	r1, 4c8 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     4c0:	4805      	ldr	r0, [pc, #20]	; (4d8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     4c2:	4b06      	ldr	r3, [pc, #24]	; (4dc <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     4c4:	4798      	blx	r3
     4c6:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     4c8:	f64e 2260 	movw	r2, #60000	; 0xea60
     4cc:	4904      	ldr	r1, [pc, #16]	; (4e0 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     4ce:	4802      	ldr	r0, [pc, #8]	; (4d8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     4d0:	4b04      	ldr	r3, [pc, #16]	; (4e4 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     4d2:	4798      	blx	r3
     4d4:	bd08      	pop	{r3, pc}
     4d6:	bf00      	nop
     4d8:	20000ddc 	.word	0x20000ddc
     4dc:	0000e1b1 	.word	0x0000e1b1
     4e0:	00000491 	.word	0x00000491
     4e4:	0000e291 	.word	0x0000e291

000004e8 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     4e8:	b510      	push	{r4, lr}
     4ea:	4604      	mov	r4, r0
	result=false;
     4ec:	2300      	movs	r3, #0
     4ee:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
     4f2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
     4f6:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
     4fa:	b12b      	cbz	r3, 508 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     4fc:	2301      	movs	r3, #1
     4fe:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
     502:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
     506:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     508:	4b13      	ldr	r3, [pc, #76]	; (558 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     50a:	7d5b      	ldrb	r3, [r3, #21]
     50c:	b18b      	cbz	r3, 532 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     50e:	1d43      	adds	r3, r0, #5
     510:	3009      	adds	r0, #9
     512:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     514:	f813 1b01 	ldrb.w	r1, [r3], #1
     518:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     51c:	4283      	cmp	r3, r0
     51e:	d1f9      	bne.n	514 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     520:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     524:	4b0d      	ldr	r3, [pc, #52]	; (55c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     526:	ea82 0103 	eor.w	r1, r2, r3
     52a:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
			if (xorResult==0)
     52e:	429a      	cmp	r2, r3
     530:	d005      	beq.n	53e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     532:	2240      	movs	r2, #64	; 0x40
     534:	1d61      	adds	r1, r4, #5
     536:	4808      	ldr	r0, [pc, #32]	; (558 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     53a:	4798      	blx	r3
     53c:	e7e1      	b.n	502 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     53e:	2101      	movs	r1, #1
     540:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
				result=true;
     544:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
				is_MTPC_Beaming=true;
     548:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     54a:	4620      	mov	r0, r4
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     54e:	4798      	blx	r3
				return	result;
     550:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     554:	bd10      	pop	{r4, pc}
     556:	bf00      	nop
     558:	20000cb4 	.word	0x20000cb4
     55c:	61626364 	.word	0x61626364
     560:	0000da49 	.word	0x0000da49
     564:	000004b9 	.word	0x000004b9

00000568 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     568:	b410      	push	{r4}
     56a:	1d02      	adds	r2, r0, #4
     56c:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     56e:	2400      	movs	r4, #0
     570:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     574:	b2d9      	uxtb	r1, r3
     576:	3301      	adds	r3, #1
     578:	2b41      	cmp	r3, #65	; 0x41
     57a:	d1f9      	bne.n	570 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     57c:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
	}
	return	i;
}
     580:	4608      	mov	r0, r1
     582:	bc10      	pop	{r4}
     584:	4770      	bx	lr
	...

00000588 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv>:
// 	io.writeData(&checksum, sizeof(checksum));

	return result;
	}
	
bool	Maintenance_Tool::NotifyConnectionAcknowledge(void){
     588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     58a:	4604      	mov	r4, r0
	memcpy(&deviceID.cpuSerialNumber,cpuSerial,sizeof(cpuSerial));
     58c:	f8d0 5102 	ldr.w	r5, [r0, #258]	; 0x102
     590:	f8d0 0106 	ldr.w	r0, [r0, #262]	; 0x106
     594:	f8d4 110a 	ldr.w	r1, [r4, #266]	; 0x10a
     598:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
     59c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
     5a0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
     5a4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
     5a8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	//deviceID.cpuSerialNumber=cpuSerial;
	delay_us(100);
     5ac:	2064      	movs	r0, #100	; 0x64
     5ae:	4b12      	ldr	r3, [pc, #72]	; (5f8 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x70>)
     5b0:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     5b2:	4912      	ldr	r1, [pc, #72]	; (5fc <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x74>)
     5b4:	4812      	ldr	r0, [pc, #72]	; (600 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5b6:	4b13      	ldr	r3, [pc, #76]	; (604 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x7c>)
     5b8:	4798      	blx	r3
	usb<<"CPU Serial: ";
	for (i = 0; i < sizeof(cpuSerial); i++)
     5ba:	2300      	movs	r3, #0
     5bc:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	{
		usb.print(cpuSerial[i],HEX);
     5c0:	4f0f      	ldr	r7, [pc, #60]	; (600 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5c2:	2610      	movs	r6, #16
     5c4:	4d10      	ldr	r5, [pc, #64]	; (608 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x80>)
     5c6:	4423      	add	r3, r4
     5c8:	4632      	mov	r2, r6
     5ca:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
     5ce:	4638      	mov	r0, r7
     5d0:	47a8      	blx	r5
	for (i = 0; i < sizeof(cpuSerial); i++)
     5d2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
     5d6:	3301      	adds	r3, #1
     5d8:	b2db      	uxtb	r3, r3
     5da:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
     5de:	2b0f      	cmp	r3, #15
     5e0:	d9f1      	bls.n	5c6 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x3e>
	}

	usb.println();
     5e2:	4807      	ldr	r0, [pc, #28]	; (600 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x84>)
     5e6:	4798      	blx	r3
	result=(bool)(i>0);
     5e8:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
     5ec:	3000      	adds	r0, #0
     5ee:	bf18      	it	ne
     5f0:	2001      	movne	r0, #1
     5f2:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
	return result;
}
     5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5f8:	00001fa1 	.word	0x00001fa1
     5fc:	0000ec3c 	.word	0x0000ec3c
     600:	20000cb4 	.word	0x20000cb4
     604:	0000dd3d 	.word	0x0000dd3d
     608:	0000dd5d 	.word	0x0000dd5d
     60c:	0000ddc9 	.word	0x0000ddc9

00000610 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( GAINMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     610:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
     614:	b92b      	cbnz	r3, 622 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     616:	6483      	str	r3, [r0, #72]	; 0x48
		maintenanceIsConnected = true;
     618:	2301      	movs	r3, #1
     61a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
		bSendNotifications = true;
     61e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     622:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
     626:	4770      	bx	lr

00000628 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader>:
bool Maintenance_Tool::WriteParameters(GAINMessageHeader& header)	{

	uint32_t	w,r;
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     628:	780b      	ldrb	r3, [r1, #0]
     62a:	2b47      	cmp	r3, #71	; 0x47
     62c:	d001      	beq.n	632 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     62e:	2000      	movs	r0, #0
     630:	4770      	bx	lr
bool Maintenance_Tool::WriteParameters(GAINMessageHeader& header)	{
     632:	b510      	push	{r4, lr}
		int n=sizeof(GAINMessageHeader)+1;
		//flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(userParameters));
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(userParameters));
     634:	7ac3      	ldrb	r3, [r0, #11]
     636:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		//uint32_t add=(uint32_t)&framMemory->parameters;
		//	uint32_t add=(uint32_t)&flashLayout->parameters;
		//	delay_ms(WRITE_DELAY);
		uint32_t add32= (uint32_t)&eepromLayout->parameters;
     63a:	4b07      	ldr	r3, [pc, #28]	; (658 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x30>)
     63c:	681a      	ldr	r2, [r3, #0]
     63e:	3240      	adds	r2, #64	; 0x40
		uint8_t  add8=(uint8_t)(0xff&add32);
		r=eeprom.WriteAddress((uint8_t*)&parameters,add8,sizeof(userParameters));
     640:	2301      	movs	r3, #1
     642:	b2d2      	uxtb	r2, r2
     644:	f500 7180 	add.w	r1, r0, #256	; 0x100
     648:	4804      	ldr	r0, [pc, #16]	; (65c <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x34>)
     64a:	4c05      	ldr	r4, [pc, #20]	; (660 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x38>)
     64c:	47a0      	blx	r4
		//r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
			result=(bool)(r==0);
     64e:	fab0 f080 	clz	r0, r0
     652:	0940      	lsrs	r0, r0, #5
     654:	bd10      	pop	{r4, pc}
     656:	bf00      	nop
     658:	20000bac 	.word	0x20000bac
     65c:	20000bb0 	.word	0x20000bb0
     660:	0000d2bd 	.word	0x0000d2bd

00000664 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     664:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     666:	0855      	lsrs	r5, r2, #1
     668:	d007      	beq.n	67a <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     66a:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     66c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     670:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     672:	3401      	adds	r4, #1
     674:	b2a4      	uxth	r4, r4
     676:	42ac      	cmp	r4, r5
     678:	dbf8      	blt.n	66c <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     67a:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     67e:	bf1d      	ittte	ne
     680:	189b      	addne	r3, r3, r2
     682:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     686:	4048      	eorne	r0, r1
     688:	4608      	moveq	r0, r1

	return checksum;
	}
     68a:	bc30      	pop	{r4, r5}
     68c:	4770      	bx	lr
	...

00000690 <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader>:
	{
     690:	b538      	push	{r3, r4, r5, lr}
     692:	4604      	mov	r4, r0
	checksum=0;
     694:	2500      	movs	r5, #0
     696:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
	checksum = calculateChecksum(0, sizeof(header), &header);
     69a:	460b      	mov	r3, r1
     69c:	2204      	movs	r2, #4
     69e:	4629      	mov	r1, r5
     6a0:	4d02      	ldr	r5, [pc, #8]	; (6ac <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader+0x1c>)
     6a2:	47a8      	blx	r5
     6a4:	f8a4 00fc 	strh.w	r0, [r4, #252]	; 0xfc
	}
     6a8:	bd38      	pop	{r3, r4, r5, pc}
     6aa:	bf00      	nop
     6ac:	00000665 	.word	0x00000665

000006b0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     6b0:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     6b2:	2200      	movs	r2, #0
     6b4:	f880 211c 	strb.w	r2, [r0, #284]	; 0x11c
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     6b8:	4c07      	ldr	r4, [pc, #28]	; (6d8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     6ba:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     6be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     6c2:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
     6c6:	3301      	adds	r3, #1
     6c8:	b2db      	uxtb	r3, r3
     6ca:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
     6ce:	461a      	mov	r2, r3
     6d0:	2b03      	cmp	r3, #3
     6d2:	ddf2      	ble.n	6ba <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

     6d4:	bc10      	pop	{r4}
     6d6:	4770      	bx	lr
     6d8:	41002018 	.word	0x41002018

000006dc <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6de:	4604      	mov	r4, r0
	ticks=0;
     6e0:	2600      	movs	r6, #0
     6e2:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     6e4:	4d12      	ldr	r5, [pc, #72]	; (730 <_ZN16Maintenance_Tool4InitEv+0x54>)
     6e6:	4628      	mov	r0, r5
     6e8:	4b12      	ldr	r3, [pc, #72]	; (734 <_ZN16Maintenance_Tool4InitEv+0x58>)
     6ea:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     6ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     6f0:	4911      	ldr	r1, [pc, #68]	; (738 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     6f2:	4628      	mov	r0, r5
     6f4:	4b11      	ldr	r3, [pc, #68]	; (73c <_ZN16Maintenance_Tool4InitEv+0x60>)
     6f6:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     6f8:	f504 7581 	add.w	r5, r4, #258	; 0x102
     6fc:	4629      	mov	r1, r5
     6fe:	4620      	mov	r0, r4
     700:	4b0f      	ldr	r3, [pc, #60]	; (740 <_ZN16Maintenance_Tool4InitEv+0x64>)
     702:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     704:	f8d4 7102 	ldr.w	r7, [r4, #258]	; 0x102
     708:	f8d4 0106 	ldr.w	r0, [r4, #262]	; 0x106
     70c:	f8d4 110a 	ldr.w	r1, [r4, #266]	; 0x10a
     710:	f8d4 210e 	ldr.w	r2, [r4, #270]	; 0x10e
     714:	f8c4 7005 	str.w	r7, [r4, #5]
     718:	f8c4 0009 	str.w	r0, [r4, #9]
     71c:	f8c4 100d 	str.w	r1, [r4, #13]
     720:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     724:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
}
     728:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     72e:	bf00      	nop
     730:	20000ddc 	.word	0x20000ddc
     734:	0000e173 	.word	0x0000e173
     738:	00000481 	.word	0x00000481
     73c:	0000e241 	.word	0x0000e241
     740:	000006b1 	.word	0x000006b1

00000744 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb>:
	{
     744:	b538      	push	{r3, r4, r5, lr}
     746:	4605      	mov	r5, r0
     748:	460c      	mov	r4, r1
	header.selector = header.command;
     74a:	780b      	ldrb	r3, [r1, #0]
     74c:	704b      	strb	r3, [r1, #1]
	header.command = kGAINNotifyCommandReceived;
     74e:	2165      	movs	r1, #101	; 0x65
     750:	7021      	strb	r1, [r4, #0]
	header.dataSize = 0;
     752:	2100      	movs	r1, #0
     754:	8061      	strh	r1, [r4, #2]
	if (!result)
     756:	b912      	cbnz	r2, 75e <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x1a>
		header.selector |= 0x80;
     758:	f063 037f 	orn	r3, r3, #127	; 0x7f
     75c:	7063      	strb	r3, [r4, #1]
	checksum = calculateChecksum(header);
     75e:	4621      	mov	r1, r4
     760:	4628      	mov	r0, r5
     762:	4b05      	ldr	r3, [pc, #20]	; (778 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x34>)
     764:	4798      	blx	r3
     766:	f8a5 00fc 	strh.w	r0, [r5, #252]	; 0xfc
	usb.writeData(&header, sizeof(header));
     76a:	2204      	movs	r2, #4
     76c:	4621      	mov	r1, r4
     76e:	4803      	ldr	r0, [pc, #12]	; (77c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x38>)
     770:	4b03      	ldr	r3, [pc, #12]	; (780 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x3c>)
     772:	4798      	blx	r3
     774:	bd38      	pop	{r3, r4, r5, pc}
     776:	bf00      	nop
     778:	00000691 	.word	0x00000691
     77c:	20000cb4 	.word	0x20000cb4
     780:	0000db25 	.word	0x0000db25

00000784 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader>:
bool Maintenance_Tool::ReadParameters(GAINMessageHeader& header){
     784:	b538      	push	{r3, r4, r5, lr}
		if (result){
     786:	780b      	ldrb	r3, [r1, #0]
     788:	2b48      	cmp	r3, #72	; 0x48
     78a:	d001      	beq.n	790 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     78c:	2000      	movs	r0, #0
     78e:	bd38      	pop	{r3, r4, r5, pc}
     790:	4604      	mov	r4, r0
			uint32_t add32= (uint32_t)&eepromLayout->parameters;
     792:	4b0b      	ldr	r3, [pc, #44]	; (7c0 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x3c>)
     794:	681a      	ldr	r2, [r3, #0]
     796:	3240      	adds	r2, #64	; 0x40
			r=eeprom.ReadAddress((uint8_t*)&parameters,add8,sizeof(userParameters));
     798:	2301      	movs	r3, #1
     79a:	b2d2      	uxtb	r2, r2
     79c:	f500 7180 	add.w	r1, r0, #256	; 0x100
     7a0:	4808      	ldr	r0, [pc, #32]	; (7c4 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x40>)
     7a2:	4d09      	ldr	r5, [pc, #36]	; (7c8 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x44>)
     7a4:	47a8      	blx	r5
			 if (r>0)
     7a6:	b908      	cbnz	r0, 7ac <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     7a8:	2001      	movs	r0, #1
}
     7aa:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(userParameters));
     7ac:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     7b0:	72e3      	strb	r3, [r4, #11]
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     7b2:	2240      	movs	r2, #64	; 0x40
     7b4:	1d61      	adds	r1, r4, #5
     7b6:	4805      	ldr	r0, [pc, #20]	; (7cc <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x48>)
     7b8:	4b05      	ldr	r3, [pc, #20]	; (7d0 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x4c>)
     7ba:	4798      	blx	r3
				 result=r>0;
     7bc:	2001      	movs	r0, #1
     7be:	bd38      	pop	{r3, r4, r5, pc}
     7c0:	20000bac 	.word	0x20000bac
     7c4:	20000bb0 	.word	0x20000bb0
     7c8:	0000d3b1 	.word	0x0000d3b1
     7cc:	20000cb4 	.word	0x20000cb4
     7d0:	0000dba1 	.word	0x0000dba1

000007d4 <_ZN16Maintenance_Tool17handleGAINCommandEv>:
bool Maintenance_Tool::handleGAINCommand(void){
     7d4:	b538      	push	{r3, r4, r5, lr}
     7d6:	4604      	mov	r4, r0
	if ((localBuffer[n]>=kGAINCommandConnect)
     7d8:	7a82      	ldrb	r2, [r0, #10]
	&& (localBuffer[n]<kGAINNumberOfCommands))
     7da:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
	if ((localBuffer[n]>=kGAINCommandConnect)
     7de:	b2db      	uxtb	r3, r3
     7e0:	2b0d      	cmp	r3, #13
     7e2:	d814      	bhi.n	80e <_ZN16Maintenance_Tool17handleGAINCommandEv+0x3a>
		gotTask=true;
     7e4:	2301      	movs	r3, #1
     7e6:	f880 30fb 	strb.w	r3, [r0, #251]	; 0xfb
		result=gotTask;
     7ea:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		header.command=localBuffer[n];
     7ee:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
		switch (header.command)
     7f2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     7f6:	3b41      	subs	r3, #65	; 0x41
     7f8:	2b0d      	cmp	r3, #13
     7fa:	d854      	bhi.n	8a6 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd2>
     7fc:	e8df f003 	tbb	[pc, r3]
     800:	30272119 	.word	0x30272119
     804:	4b431616 	.word	0x4b431616
     808:	533a1616 	.word	0x533a1616
     80c:	1653      	.short	0x1653
		gotTask=false;
     80e:	2300      	movs	r3, #0
     810:	f880 30fb 	strb.w	r3, [r0, #251]	; 0xfb
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     814:	4d26      	ldr	r5, [pc, #152]	; (8b0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xdc>)
     816:	2240      	movs	r2, #64	; 0x40
     818:	1d41      	adds	r1, r0, #5
     81a:	4628      	mov	r0, r5
     81c:	4b25      	ldr	r3, [pc, #148]	; (8b4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe0>)
     81e:	4798      	blx	r3
		result=usb.rxReady;
     820:	7d6b      	ldrb	r3, [r5, #21]
     822:	b2db      	uxtb	r3, r3
     824:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	if (result)
     828:	2b00      	cmp	r3, #0
     82a:	d1e2      	bne.n	7f2 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x1e>
	}
     82c:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     830:	bd38      	pop	{r3, r4, r5, pc}
				result = handleGAINCommandConnect( header);
     832:	f104 0198 	add.w	r1, r4, #152	; 0x98
     836:	4620      	mov	r0, r4
     838:	4b1f      	ldr	r3, [pc, #124]	; (8b8 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe4>)
     83a:	4798      	blx	r3
     83c:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
				break;
     840:	e7f4      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	maintenanceIsConnected = false;
     842:	2300      	movs	r3, #0
     844:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	bSendNotifications = false;
     848:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
				break;
     84c:	e7ee      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	bSendNotifications = (header.selector == 1);
     84e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
     852:	2b01      	cmp	r3, #1
     854:	bf14      	ite	ne
     856:	2300      	movne	r3, #0
     858:	2301      	moveq	r3, #1
     85a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
				break;
     85e:	e7e5      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				notifyGAINCommandReceived( header, result);
     860:	2201      	movs	r2, #1
     862:	f104 0198 	add.w	r1, r4, #152	; 0x98
     866:	4620      	mov	r0, r4
     868:	4b14      	ldr	r3, [pc, #80]	; (8bc <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe8>)
     86a:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     86c:	2301      	movs	r3, #1
     86e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     872:	e7db      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	bool	result(header.dataSize == sizeof(GAINControllerPortState));
     874:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
     878:	2b1a      	cmp	r3, #26
     87a:	bf14      	ite	ne
     87c:	2300      	movne	r3, #0
     87e:	2301      	moveq	r3, #1
     880:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     884:	e7d2      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = WriteParameters( header);
     886:	f104 0198 	add.w	r1, r4, #152	; 0x98
     88a:	4620      	mov	r0, r4
     88c:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xec>)
     88e:	4798      	blx	r3
     890:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			break;
     894:	e7ca      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = ReadParameters( header);
     896:	f104 0198 	add.w	r1, r4, #152	; 0x98
     89a:	4620      	mov	r0, r4
     89c:	4b09      	ldr	r3, [pc, #36]	; (8c4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xf0>)
     89e:	4798      	blx	r3
     8a0:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			break;
     8a4:	e7c2      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = false;
     8a6:	2300      	movs	r3, #0
     8a8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     8ac:	e7be      	b.n	82c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
     8ae:	bf00      	nop
     8b0:	20000cb4 	.word	0x20000cb4
     8b4:	0000da49 	.word	0x0000da49
     8b8:	00000611 	.word	0x00000611
     8bc:	00000745 	.word	0x00000745
     8c0:	00000629 	.word	0x00000629
     8c4:	00000785 	.word	0x00000785

000008c8 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ca:	4604      	mov	r4, r0
	result=false;
     8cc:	2300      	movs	r3, #0
     8ce:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	if (gotAccess)
     8d2:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
     8d6:	2b00      	cmp	r3, #0
     8d8:	d044      	beq.n	964 <_ZN16Maintenance_Tool19handleCommunicationEv+0x9c>
		if (usb.rxReady)
     8da:	4b24      	ldr	r3, [pc, #144]	; (96c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     8dc:	7d5b      	ldrb	r3, [r3, #21]
     8de:	2b00      	cmp	r3, #0
     8e0:	d03c      	beq.n	95c <_ZN16Maintenance_Tool19handleCommunicationEv+0x94>
			switch (input){
     8e2:	7a43      	ldrb	r3, [r0, #9]
     8e4:	2b3d      	cmp	r3, #61	; 0x3d
     8e6:	d01e      	beq.n	926 <_ZN16Maintenance_Tool19handleCommunicationEv+0x5e>
     8e8:	2b3e      	cmp	r3, #62	; 0x3e
     8ea:	d017      	beq.n	91c <_ZN16Maintenance_Tool19handleCommunicationEv+0x54>
     8ec:	2b3c      	cmp	r3, #60	; 0x3c
     8ee:	d003      	beq.n	8f8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
					gotCommand=false;
     8f0:	2300      	movs	r3, #0
     8f2:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
				break;
     8f6:	e006      	b.n	906 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					gotCommand=true;
     8f8:	2301      	movs	r3, #1
     8fa:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
					result = handleGAINCommand();
     8fe:	4b1c      	ldr	r3, [pc, #112]	; (970 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     900:	4798      	blx	r3
     902:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			ClearLocalBuffer();
     906:	4620      	mov	r0, r4
     908:	4b1a      	ldr	r3, [pc, #104]	; (974 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>)
     90a:	4798      	blx	r3
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     90c:	2240      	movs	r2, #64	; 0x40
     90e:	1d61      	adds	r1, r4, #5
     910:	4816      	ldr	r0, [pc, #88]	; (96c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     912:	4b19      	ldr	r3, [pc, #100]	; (978 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb0>)
     914:	4798      	blx	r3
	}
     916:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					result = handleGAINCommand();
     91c:	4b14      	ldr	r3, [pc, #80]	; (970 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     91e:	4798      	blx	r3
     920:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
				break;
     924:	e7ef      	b.n	906 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					is_MTPC_Beaming=true;
     926:	2501      	movs	r5, #1
     928:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     92a:	4e14      	ldr	r6, [pc, #80]	; (97c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     92c:	4630      	mov	r0, r6
     92e:	4b14      	ldr	r3, [pc, #80]	; (980 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     930:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     932:	4f14      	ldr	r7, [pc, #80]	; (984 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     934:	4639      	mov	r1, r7
     936:	4630      	mov	r0, r6
     938:	4b13      	ldr	r3, [pc, #76]	; (988 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     93a:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     93c:	f242 7210 	movw	r2, #10000	; 0x2710
     940:	4639      	mov	r1, r7
     942:	4630      	mov	r0, r6
     944:	4b11      	ldr	r3, [pc, #68]	; (98c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     946:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     948:	2300      	movs	r3, #0
     94a:	64a3      	str	r3, [r4, #72]	; 0x48
					maintenanceIsConnected = true;
     94c:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
					bSendNotifications = true;
     950:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
					result=is_MTPC_Beaming;
     954:	7923      	ldrb	r3, [r4, #4]
     956:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     95a:	e7d4      	b.n	906 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
			gotCommand=false;
     95c:	2300      	movs	r3, #0
     95e:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
     962:	e7d3      	b.n	90c <_ZN16Maintenance_Tool19handleCommunicationEv+0x44>
		gotCommand=false;
     964:	2300      	movs	r3, #0
     966:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
     96a:	e7d4      	b.n	916 <_ZN16Maintenance_Tool19handleCommunicationEv+0x4e>
     96c:	20000cb4 	.word	0x20000cb4
     970:	000007d5 	.word	0x000007d5
     974:	00000569 	.word	0x00000569
     978:	0000da49 	.word	0x0000da49
     97c:	20000ddc 	.word	0x20000ddc
     980:	0000e1b1 	.word	0x0000e1b1
     984:	00000491 	.word	0x00000491
     988:	0000e2c9 	.word	0x0000e2c9
     98c:	0000e291 	.word	0x0000e291

00000990 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     990:	b580      	push	{r7, lr}
     992:	af00      	add	r7, sp, #0
	system_init();
     994:	4b03      	ldr	r3, [pc, #12]	; (9a4 <atmel_start_init+0x14>)
     996:	4798      	blx	r3
	usb_init();
     998:	4b03      	ldr	r3, [pc, #12]	; (9a8 <atmel_start_init+0x18>)
     99a:	4798      	blx	r3
	spi_nor_flash_init();
     99c:	4b03      	ldr	r3, [pc, #12]	; (9ac <atmel_start_init+0x1c>)
     99e:	4798      	blx	r3
}
     9a0:	bf00      	nop
     9a2:	bd80      	pop	{r7, pc}
     9a4:	00001c35 	.word	0x00001c35
     9a8:	0000b2c5 	.word	0x0000b2c5
     9ac:	0000b259 	.word	0x0000b259

000009b0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     9b0:	b480      	push	{r7}
     9b2:	b085      	sub	sp, #20
     9b4:	af00      	add	r7, sp, #0
     9b6:	60f8      	str	r0, [r7, #12]
     9b8:	460b      	mov	r3, r1
     9ba:	607a      	str	r2, [r7, #4]
     9bc:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9be:	7afa      	ldrb	r2, [r7, #11]
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	3220      	adds	r2, #32
     9c4:	6879      	ldr	r1, [r7, #4]
     9c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     9ca:	bf00      	nop
     9cc:	3714      	adds	r7, #20
     9ce:	46bd      	mov	sp, r7
     9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d4:	4770      	bx	lr

000009d6 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     9d6:	b480      	push	{r7}
     9d8:	b083      	sub	sp, #12
     9da:	af00      	add	r7, sp, #0
     9dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	691b      	ldr	r3, [r3, #16]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ea:	bf00      	nop
     9ec:	370c      	adds	r7, #12
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr

000009f6 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     9f6:	b480      	push	{r7}
     9f8:	b083      	sub	sp, #12
     9fa:	af00      	add	r7, sp, #0
     9fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	691b      	ldr	r3, [r3, #16]
     a02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a0a:	bf00      	nop
     a0c:	370c      	adds	r7, #12
     a0e:	46bd      	mov	sp, r7
     a10:	f85d 7b04 	ldr.w	r7, [sp], #4
     a14:	4770      	bx	lr

00000a16 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     a16:	b480      	push	{r7}
     a18:	b083      	sub	sp, #12
     a1a:	af00      	add	r7, sp, #0
     a1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	691b      	ldr	r3, [r3, #16]
     a22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a2a:	bf00      	nop
     a2c:	370c      	adds	r7, #12
     a2e:	46bd      	mov	sp, r7
     a30:	f85d 7b04 	ldr.w	r7, [sp], #4
     a34:	4770      	bx	lr

00000a36 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     a36:	b480      	push	{r7}
     a38:	b083      	sub	sp, #12
     a3a:	af00      	add	r7, sp, #0
     a3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	691b      	ldr	r3, [r3, #16]
     a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a4a:	bf00      	nop
     a4c:	370c      	adds	r7, #12
     a4e:	46bd      	mov	sp, r7
     a50:	f85d 7b04 	ldr.w	r7, [sp], #4
     a54:	4770      	bx	lr

00000a56 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     a56:	b480      	push	{r7}
     a58:	b083      	sub	sp, #12
     a5a:	af00      	add	r7, sp, #0
     a5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	695b      	ldr	r3, [r3, #20]
     a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a6a:	bf00      	nop
     a6c:	370c      	adds	r7, #12
     a6e:	46bd      	mov	sp, r7
     a70:	f85d 7b04 	ldr.w	r7, [sp], #4
     a74:	4770      	bx	lr

00000a76 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     a76:	b480      	push	{r7}
     a78:	b083      	sub	sp, #12
     a7a:	af00      	add	r7, sp, #0
     a7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	695b      	ldr	r3, [r3, #20]
     a82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a8a:	bf00      	nop
     a8c:	370c      	adds	r7, #12
     a8e:	46bd      	mov	sp, r7
     a90:	f85d 7b04 	ldr.w	r7, [sp], #4
     a94:	4770      	bx	lr

00000a96 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     a96:	b480      	push	{r7}
     a98:	b083      	sub	sp, #12
     a9a:	af00      	add	r7, sp, #0
     a9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	695b      	ldr	r3, [r3, #20]
     aa2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aaa:	bf00      	nop
     aac:	370c      	adds	r7, #12
     aae:	46bd      	mov	sp, r7
     ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab4:	4770      	bx	lr

00000ab6 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     ab6:	b480      	push	{r7}
     ab8:	b083      	sub	sp, #12
     aba:	af00      	add	r7, sp, #0
     abc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	695b      	ldr	r3, [r3, #20]
     ac2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aca:	bf00      	nop
     acc:	370c      	adds	r7, #12
     ace:	46bd      	mov	sp, r7
     ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad4:	4770      	bx	lr

00000ad6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     ad6:	b480      	push	{r7}
     ad8:	b083      	sub	sp, #12
     ada:	af00      	add	r7, sp, #0
     adc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	695b      	ldr	r3, [r3, #20]
     ae2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aea:	bf00      	nop
     aec:	370c      	adds	r7, #12
     aee:	46bd      	mov	sp, r7
     af0:	f85d 7b04 	ldr.w	r7, [sp], #4
     af4:	4770      	bx	lr

00000af6 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     af6:	b480      	push	{r7}
     af8:	b083      	sub	sp, #12
     afa:	af00      	add	r7, sp, #0
     afc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	695b      	ldr	r3, [r3, #20]
     b02:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b0a:	bf00      	nop
     b0c:	370c      	adds	r7, #12
     b0e:	46bd      	mov	sp, r7
     b10:	f85d 7b04 	ldr.w	r7, [sp], #4
     b14:	4770      	bx	lr

00000b16 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     b16:	b480      	push	{r7}
     b18:	b083      	sub	sp, #12
     b1a:	af00      	add	r7, sp, #0
     b1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	695b      	ldr	r3, [r3, #20]
     b22:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b2a:	bf00      	nop
     b2c:	370c      	adds	r7, #12
     b2e:	46bd      	mov	sp, r7
     b30:	f85d 7b04 	ldr.w	r7, [sp], #4
     b34:	4770      	bx	lr

00000b36 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     b36:	b480      	push	{r7}
     b38:	b083      	sub	sp, #12
     b3a:	af00      	add	r7, sp, #0
     b3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	699b      	ldr	r3, [r3, #24]
     b42:	f043 0201 	orr.w	r2, r3, #1
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b4a:	bf00      	nop
     b4c:	370c      	adds	r7, #12
     b4e:	46bd      	mov	sp, r7
     b50:	f85d 7b04 	ldr.w	r7, [sp], #4
     b54:	4770      	bx	lr

00000b56 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     b56:	b480      	push	{r7}
     b58:	b083      	sub	sp, #12
     b5a:	af00      	add	r7, sp, #0
     b5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	699b      	ldr	r3, [r3, #24]
     b62:	f043 0202 	orr.w	r2, r3, #2
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b6a:	bf00      	nop
     b6c:	370c      	adds	r7, #12
     b6e:	46bd      	mov	sp, r7
     b70:	f85d 7b04 	ldr.w	r7, [sp], #4
     b74:	4770      	bx	lr

00000b76 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     b76:	b480      	push	{r7}
     b78:	b083      	sub	sp, #12
     b7a:	af00      	add	r7, sp, #0
     b7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	699b      	ldr	r3, [r3, #24]
     b82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b8a:	bf00      	nop
     b8c:	370c      	adds	r7, #12
     b8e:	46bd      	mov	sp, r7
     b90:	f85d 7b04 	ldr.w	r7, [sp], #4
     b94:	4770      	bx	lr

00000b96 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     b96:	b480      	push	{r7}
     b98:	b083      	sub	sp, #12
     b9a:	af00      	add	r7, sp, #0
     b9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	699b      	ldr	r3, [r3, #24]
     ba2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     baa:	bf00      	nop
     bac:	370c      	adds	r7, #12
     bae:	46bd      	mov	sp, r7
     bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb4:	4770      	bx	lr

00000bb6 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     bb6:	b480      	push	{r7}
     bb8:	b083      	sub	sp, #12
     bba:	af00      	add	r7, sp, #0
     bbc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	699b      	ldr	r3, [r3, #24]
     bc2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bca:	bf00      	nop
     bcc:	370c      	adds	r7, #12
     bce:	46bd      	mov	sp, r7
     bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd4:	4770      	bx	lr

00000bd6 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     bd6:	b480      	push	{r7}
     bd8:	b083      	sub	sp, #12
     bda:	af00      	add	r7, sp, #0
     bdc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	69db      	ldr	r3, [r3, #28]
     be2:	f043 0220 	orr.w	r2, r3, #32
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bea:	bf00      	nop
     bec:	370c      	adds	r7, #12
     bee:	46bd      	mov	sp, r7
     bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf4:	4770      	bx	lr

00000bf6 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     bf6:	b480      	push	{r7}
     bf8:	b083      	sub	sp, #12
     bfa:	af00      	add	r7, sp, #0
     bfc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	69db      	ldr	r3, [r3, #28]
     c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	f85d 7b04 	ldr.w	r7, [sp], #4
     c14:	4770      	bx	lr

00000c16 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     c16:	b480      	push	{r7}
     c18:	b083      	sub	sp, #12
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	69db      	ldr	r3, [r3, #28]
     c22:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c2a:	bf00      	nop
     c2c:	370c      	adds	r7, #12
     c2e:	46bd      	mov	sp, r7
     c30:	f85d 7b04 	ldr.w	r7, [sp], #4
     c34:	4770      	bx	lr

00000c36 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     c36:	b480      	push	{r7}
     c38:	b083      	sub	sp, #12
     c3a:	af00      	add	r7, sp, #0
     c3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	6a1b      	ldr	r3, [r3, #32]
     c42:	f043 0201 	orr.w	r2, r3, #1
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c4a:	bf00      	nop
     c4c:	370c      	adds	r7, #12
     c4e:	46bd      	mov	sp, r7
     c50:	f85d 7b04 	ldr.w	r7, [sp], #4
     c54:	4770      	bx	lr

00000c56 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     c56:	b480      	push	{r7}
     c58:	b083      	sub	sp, #12
     c5a:	af00      	add	r7, sp, #0
     c5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	6a1b      	ldr	r3, [r3, #32]
     c62:	f043 0202 	orr.w	r2, r3, #2
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c6a:	bf00      	nop
     c6c:	370c      	adds	r7, #12
     c6e:	46bd      	mov	sp, r7
     c70:	f85d 7b04 	ldr.w	r7, [sp], #4
     c74:	4770      	bx	lr

00000c76 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     c76:	b480      	push	{r7}
     c78:	b083      	sub	sp, #12
     c7a:	af00      	add	r7, sp, #0
     c7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	6a1b      	ldr	r3, [r3, #32]
     c82:	f043 0208 	orr.w	r2, r3, #8
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c8a:	bf00      	nop
     c8c:	370c      	adds	r7, #12
     c8e:	46bd      	mov	sp, r7
     c90:	f85d 7b04 	ldr.w	r7, [sp], #4
     c94:	4770      	bx	lr

00000c96 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     c96:	b480      	push	{r7}
     c98:	b083      	sub	sp, #12
     c9a:	af00      	add	r7, sp, #0
     c9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	6a1b      	ldr	r3, [r3, #32]
     ca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     caa:	bf00      	nop
     cac:	370c      	adds	r7, #12
     cae:	46bd      	mov	sp, r7
     cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cb4:	4770      	bx	lr

00000cb6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     cb6:	b480      	push	{r7}
     cb8:	b085      	sub	sp, #20
     cba:	af00      	add	r7, sp, #0
     cbc:	60f8      	str	r0, [r7, #12]
     cbe:	460b      	mov	r3, r1
     cc0:	607a      	str	r2, [r7, #4]
     cc2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cc4:	7afb      	ldrb	r3, [r7, #11]
     cc6:	68fa      	ldr	r2, [r7, #12]
     cc8:	01db      	lsls	r3, r3, #7
     cca:	4413      	add	r3, r2
     ccc:	3308      	adds	r3, #8
     cce:	687a      	ldr	r2, [r7, #4]
     cd0:	601a      	str	r2, [r3, #0]
}
     cd2:	bf00      	nop
     cd4:	3714      	adds	r7, #20
     cd6:	46bd      	mov	sp, r7
     cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cdc:	4770      	bx	lr

00000cde <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     cde:	b480      	push	{r7}
     ce0:	b085      	sub	sp, #20
     ce2:	af00      	add	r7, sp, #0
     ce4:	60f8      	str	r0, [r7, #12]
     ce6:	460b      	mov	r3, r1
     ce8:	607a      	str	r2, [r7, #4]
     cea:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cec:	7afb      	ldrb	r3, [r7, #11]
     cee:	68fa      	ldr	r2, [r7, #12]
     cf0:	01db      	lsls	r3, r3, #7
     cf2:	4413      	add	r3, r2
     cf4:	3304      	adds	r3, #4
     cf6:	687a      	ldr	r2, [r7, #4]
     cf8:	601a      	str	r2, [r3, #0]
}
     cfa:	bf00      	nop
     cfc:	3714      	adds	r7, #20
     cfe:	46bd      	mov	sp, r7
     d00:	f85d 7b04 	ldr.w	r7, [sp], #4
     d04:	4770      	bx	lr

00000d06 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d06:	b480      	push	{r7}
     d08:	b085      	sub	sp, #20
     d0a:	af00      	add	r7, sp, #0
     d0c:	60f8      	str	r0, [r7, #12]
     d0e:	460b      	mov	r3, r1
     d10:	607a      	str	r2, [r7, #4]
     d12:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d14:	7afb      	ldrb	r3, [r7, #11]
     d16:	68fa      	ldr	r2, [r7, #12]
     d18:	01db      	lsls	r3, r3, #7
     d1a:	4413      	add	r3, r2
     d1c:	3318      	adds	r3, #24
     d1e:	687a      	ldr	r2, [r7, #4]
     d20:	601a      	str	r2, [r3, #0]
}
     d22:	bf00      	nop
     d24:	3714      	adds	r7, #20
     d26:	46bd      	mov	sp, r7
     d28:	f85d 7b04 	ldr.w	r7, [sp], #4
     d2c:	4770      	bx	lr

00000d2e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d2e:	b480      	push	{r7}
     d30:	b085      	sub	sp, #20
     d32:	af00      	add	r7, sp, #0
     d34:	60f8      	str	r0, [r7, #12]
     d36:	460b      	mov	r3, r1
     d38:	607a      	str	r2, [r7, #4]
     d3a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d3c:	7afb      	ldrb	r3, [r7, #11]
     d3e:	68fa      	ldr	r2, [r7, #12]
     d40:	01db      	lsls	r3, r3, #7
     d42:	4413      	add	r3, r2
     d44:	3314      	adds	r3, #20
     d46:	687a      	ldr	r2, [r7, #4]
     d48:	601a      	str	r2, [r3, #0]
}
     d4a:	bf00      	nop
     d4c:	3714      	adds	r7, #20
     d4e:	46bd      	mov	sp, r7
     d50:	f85d 7b04 	ldr.w	r7, [sp], #4
     d54:	4770      	bx	lr

00000d56 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     d56:	b480      	push	{r7}
     d58:	b085      	sub	sp, #20
     d5a:	af00      	add	r7, sp, #0
     d5c:	6078      	str	r0, [r7, #4]
     d5e:	4608      	mov	r0, r1
     d60:	4611      	mov	r1, r2
     d62:	461a      	mov	r2, r3
     d64:	4603      	mov	r3, r0
     d66:	70fb      	strb	r3, [r7, #3]
     d68:	460b      	mov	r3, r1
     d6a:	70bb      	strb	r3, [r7, #2]
     d6c:	4613      	mov	r3, r2
     d6e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d70:	78fa      	ldrb	r2, [r7, #3]
     d72:	78bb      	ldrb	r3, [r7, #2]
     d74:	6879      	ldr	r1, [r7, #4]
     d76:	01d2      	lsls	r2, r2, #7
     d78:	440a      	add	r2, r1
     d7a:	4413      	add	r3, r2
     d7c:	3330      	adds	r3, #48	; 0x30
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d82:	7bfb      	ldrb	r3, [r7, #15]
     d84:	f023 030f 	bic.w	r3, r3, #15
     d88:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     d8a:	787b      	ldrb	r3, [r7, #1]
     d8c:	f003 030f 	and.w	r3, r3, #15
     d90:	b2da      	uxtb	r2, r3
     d92:	7bfb      	ldrb	r3, [r7, #15]
     d94:	4313      	orrs	r3, r2
     d96:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d98:	78fa      	ldrb	r2, [r7, #3]
     d9a:	78bb      	ldrb	r3, [r7, #2]
     d9c:	6879      	ldr	r1, [r7, #4]
     d9e:	01d2      	lsls	r2, r2, #7
     da0:	440a      	add	r2, r1
     da2:	4413      	add	r3, r2
     da4:	3330      	adds	r3, #48	; 0x30
     da6:	7bfa      	ldrb	r2, [r7, #15]
     da8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     daa:	bf00      	nop
     dac:	3714      	adds	r7, #20
     dae:	46bd      	mov	sp, r7
     db0:	f85d 7b04 	ldr.w	r7, [sp], #4
     db4:	4770      	bx	lr

00000db6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     db6:	b480      	push	{r7}
     db8:	b085      	sub	sp, #20
     dba:	af00      	add	r7, sp, #0
     dbc:	6078      	str	r0, [r7, #4]
     dbe:	4608      	mov	r0, r1
     dc0:	4611      	mov	r1, r2
     dc2:	461a      	mov	r2, r3
     dc4:	4603      	mov	r3, r0
     dc6:	70fb      	strb	r3, [r7, #3]
     dc8:	460b      	mov	r3, r1
     dca:	70bb      	strb	r3, [r7, #2]
     dcc:	4613      	mov	r3, r2
     dce:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dd0:	78fa      	ldrb	r2, [r7, #3]
     dd2:	78bb      	ldrb	r3, [r7, #2]
     dd4:	6879      	ldr	r1, [r7, #4]
     dd6:	01d2      	lsls	r2, r2, #7
     dd8:	440a      	add	r2, r1
     dda:	4413      	add	r3, r2
     ddc:	3330      	adds	r3, #48	; 0x30
     dde:	781b      	ldrb	r3, [r3, #0]
     de0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     de2:	7bfb      	ldrb	r3, [r7, #15]
     de4:	f003 030f 	and.w	r3, r3, #15
     de8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     dea:	787b      	ldrb	r3, [r7, #1]
     dec:	011b      	lsls	r3, r3, #4
     dee:	b2da      	uxtb	r2, r3
     df0:	7bfb      	ldrb	r3, [r7, #15]
     df2:	4313      	orrs	r3, r2
     df4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     df6:	78fa      	ldrb	r2, [r7, #3]
     df8:	78bb      	ldrb	r3, [r7, #2]
     dfa:	6879      	ldr	r1, [r7, #4]
     dfc:	01d2      	lsls	r2, r2, #7
     dfe:	440a      	add	r2, r1
     e00:	4413      	add	r3, r2
     e02:	3330      	adds	r3, #48	; 0x30
     e04:	7bfa      	ldrb	r2, [r7, #15]
     e06:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e08:	bf00      	nop
     e0a:	3714      	adds	r7, #20
     e0c:	46bd      	mov	sp, r7
     e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e12:	4770      	bx	lr

00000e14 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     e14:	b480      	push	{r7}
     e16:	b085      	sub	sp, #20
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	4608      	mov	r0, r1
     e1e:	4611      	mov	r1, r2
     e20:	461a      	mov	r2, r3
     e22:	4603      	mov	r3, r0
     e24:	70fb      	strb	r3, [r7, #3]
     e26:	460b      	mov	r3, r1
     e28:	70bb      	strb	r3, [r7, #2]
     e2a:	4613      	mov	r3, r2
     e2c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2e:	78fa      	ldrb	r2, [r7, #3]
     e30:	78bb      	ldrb	r3, [r7, #2]
     e32:	6879      	ldr	r1, [r7, #4]
     e34:	01d2      	lsls	r2, r2, #7
     e36:	440a      	add	r2, r1
     e38:	4413      	add	r3, r2
     e3a:	3340      	adds	r3, #64	; 0x40
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e40:	7bfb      	ldrb	r3, [r7, #15]
     e42:	f023 0301 	bic.w	r3, r3, #1
     e46:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e48:	787a      	ldrb	r2, [r7, #1]
     e4a:	7bfb      	ldrb	r3, [r7, #15]
     e4c:	4313      	orrs	r3, r2
     e4e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e50:	78fa      	ldrb	r2, [r7, #3]
     e52:	78bb      	ldrb	r3, [r7, #2]
     e54:	6879      	ldr	r1, [r7, #4]
     e56:	01d2      	lsls	r2, r2, #7
     e58:	440a      	add	r2, r1
     e5a:	4413      	add	r3, r2
     e5c:	3340      	adds	r3, #64	; 0x40
     e5e:	7bfa      	ldrb	r2, [r7, #15]
     e60:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e62:	bf00      	nop
     e64:	3714      	adds	r7, #20
     e66:	46bd      	mov	sp, r7
     e68:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6c:	4770      	bx	lr

00000e6e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     e6e:	b490      	push	{r4, r7}
     e70:	b082      	sub	sp, #8
     e72:	af00      	add	r7, sp, #0
     e74:	6078      	str	r0, [r7, #4]
     e76:	460b      	mov	r3, r1
     e78:	70fb      	strb	r3, [r7, #3]
     e7a:	4613      	mov	r3, r2
     e7c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e7e:	78fa      	ldrb	r2, [r7, #3]
     e80:	78bb      	ldrb	r3, [r7, #2]
     e82:	78f8      	ldrb	r0, [r7, #3]
     e84:	78b9      	ldrb	r1, [r7, #2]
     e86:	687c      	ldr	r4, [r7, #4]
     e88:	01c0      	lsls	r0, r0, #7
     e8a:	4420      	add	r0, r4
     e8c:	4401      	add	r1, r0
     e8e:	3140      	adds	r1, #64	; 0x40
     e90:	7809      	ldrb	r1, [r1, #0]
     e92:	b2c9      	uxtb	r1, r1
     e94:	f041 0104 	orr.w	r1, r1, #4
     e98:	b2c8      	uxtb	r0, r1
     e9a:	6879      	ldr	r1, [r7, #4]
     e9c:	01d2      	lsls	r2, r2, #7
     e9e:	440a      	add	r2, r1
     ea0:	4413      	add	r3, r2
     ea2:	3340      	adds	r3, #64	; 0x40
     ea4:	4602      	mov	r2, r0
     ea6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ea8:	bf00      	nop
     eaa:	3708      	adds	r7, #8
     eac:	46bd      	mov	sp, r7
     eae:	bc90      	pop	{r4, r7}
     eb0:	4770      	bx	lr

00000eb2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     eb2:	b490      	push	{r4, r7}
     eb4:	b082      	sub	sp, #8
     eb6:	af00      	add	r7, sp, #0
     eb8:	6078      	str	r0, [r7, #4]
     eba:	460b      	mov	r3, r1
     ebc:	70fb      	strb	r3, [r7, #3]
     ebe:	4613      	mov	r3, r2
     ec0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ec2:	78fa      	ldrb	r2, [r7, #3]
     ec4:	78bb      	ldrb	r3, [r7, #2]
     ec6:	78f8      	ldrb	r0, [r7, #3]
     ec8:	78b9      	ldrb	r1, [r7, #2]
     eca:	687c      	ldr	r4, [r7, #4]
     ecc:	01c0      	lsls	r0, r0, #7
     ece:	4420      	add	r0, r4
     ed0:	4401      	add	r1, r0
     ed2:	3140      	adds	r1, #64	; 0x40
     ed4:	7809      	ldrb	r1, [r1, #0]
     ed6:	b2c9      	uxtb	r1, r1
     ed8:	f021 0104 	bic.w	r1, r1, #4
     edc:	b2c8      	uxtb	r0, r1
     ede:	6879      	ldr	r1, [r7, #4]
     ee0:	01d2      	lsls	r2, r2, #7
     ee2:	440a      	add	r2, r1
     ee4:	4413      	add	r3, r2
     ee6:	3340      	adds	r3, #64	; 0x40
     ee8:	4602      	mov	r2, r0
     eea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     eec:	bf00      	nop
     eee:	3708      	adds	r7, #8
     ef0:	46bd      	mov	sp, r7
     ef2:	bc90      	pop	{r4, r7}
     ef4:	4770      	bx	lr

00000ef6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     ef6:	b480      	push	{r7}
     ef8:	b085      	sub	sp, #20
     efa:	af00      	add	r7, sp, #0
     efc:	60f8      	str	r0, [r7, #12]
     efe:	460b      	mov	r3, r1
     f00:	607a      	str	r2, [r7, #4]
     f02:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f04:	7afb      	ldrb	r3, [r7, #11]
     f06:	68fa      	ldr	r2, [r7, #12]
     f08:	01db      	lsls	r3, r3, #7
     f0a:	4413      	add	r3, r2
     f0c:	3328      	adds	r3, #40	; 0x28
     f0e:	687a      	ldr	r2, [r7, #4]
     f10:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f12:	bf00      	nop
     f14:	3714      	adds	r7, #20
     f16:	46bd      	mov	sp, r7
     f18:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1c:	4770      	bx	lr
	...

00000f20 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     f20:	b580      	push	{r7, lr}
     f22:	b082      	sub	sp, #8
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	6039      	str	r1, [r7, #0]
     f2a:	71fb      	strb	r3, [r7, #7]
     f2c:	4613      	mov	r3, r2
     f2e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     f30:	79bb      	ldrb	r3, [r7, #6]
     f32:	2b01      	cmp	r3, #1
     f34:	d01c      	beq.n	f70 <_gpio_set_direction+0x50>
     f36:	2b02      	cmp	r3, #2
     f38:	d037      	beq.n	faa <_gpio_set_direction+0x8a>
     f3a:	2b00      	cmp	r3, #0
     f3c:	d14e      	bne.n	fdc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f3e:	79fb      	ldrb	r3, [r7, #7]
     f40:	683a      	ldr	r2, [r7, #0]
     f42:	4619      	mov	r1, r3
     f44:	482a      	ldr	r0, [pc, #168]	; (ff0 <_gpio_set_direction+0xd0>)
     f46:	4b2b      	ldr	r3, [pc, #172]	; (ff4 <_gpio_set_direction+0xd4>)
     f48:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f4a:	683b      	ldr	r3, [r7, #0]
     f4c:	b29b      	uxth	r3, r3
     f4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f52:	79fb      	ldrb	r3, [r7, #7]
     f54:	4619      	mov	r1, r3
     f56:	4826      	ldr	r0, [pc, #152]	; (ff0 <_gpio_set_direction+0xd0>)
     f58:	4b27      	ldr	r3, [pc, #156]	; (ff8 <_gpio_set_direction+0xd8>)
     f5a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f60:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f64:	79fb      	ldrb	r3, [r7, #7]
     f66:	4619      	mov	r1, r3
     f68:	4821      	ldr	r0, [pc, #132]	; (ff0 <_gpio_set_direction+0xd0>)
     f6a:	4b23      	ldr	r3, [pc, #140]	; (ff8 <_gpio_set_direction+0xd8>)
     f6c:	4798      	blx	r3
		break;
     f6e:	e03a      	b.n	fe6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f70:	79fb      	ldrb	r3, [r7, #7]
     f72:	683a      	ldr	r2, [r7, #0]
     f74:	4619      	mov	r1, r3
     f76:	481e      	ldr	r0, [pc, #120]	; (ff0 <_gpio_set_direction+0xd0>)
     f78:	4b1e      	ldr	r3, [pc, #120]	; (ff4 <_gpio_set_direction+0xd4>)
     f7a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     f7c:	683b      	ldr	r3, [r7, #0]
     f7e:	b29b      	uxth	r3, r3
     f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f88:	79f9      	ldrb	r1, [r7, #7]
     f8a:	461a      	mov	r2, r3
     f8c:	4818      	ldr	r0, [pc, #96]	; (ff0 <_gpio_set_direction+0xd0>)
     f8e:	4b1a      	ldr	r3, [pc, #104]	; (ff8 <_gpio_set_direction+0xd8>)
     f90:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     f92:	683b      	ldr	r3, [r7, #0]
     f94:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f9e:	79f9      	ldrb	r1, [r7, #7]
     fa0:	461a      	mov	r2, r3
     fa2:	4813      	ldr	r0, [pc, #76]	; (ff0 <_gpio_set_direction+0xd0>)
     fa4:	4b14      	ldr	r3, [pc, #80]	; (ff8 <_gpio_set_direction+0xd8>)
     fa6:	4798      	blx	r3
		break;
     fa8:	e01d      	b.n	fe6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     faa:	79fb      	ldrb	r3, [r7, #7]
     fac:	683a      	ldr	r2, [r7, #0]
     fae:	4619      	mov	r1, r3
     fb0:	480f      	ldr	r0, [pc, #60]	; (ff0 <_gpio_set_direction+0xd0>)
     fb2:	4b12      	ldr	r3, [pc, #72]	; (ffc <_gpio_set_direction+0xdc>)
     fb4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     fb6:	683b      	ldr	r3, [r7, #0]
     fb8:	b29b      	uxth	r3, r3
     fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     fbe:	79fb      	ldrb	r3, [r7, #7]
     fc0:	4619      	mov	r1, r3
     fc2:	480b      	ldr	r0, [pc, #44]	; (ff0 <_gpio_set_direction+0xd0>)
     fc4:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <_gpio_set_direction+0xd8>)
     fc6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     fcc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     fd0:	79fb      	ldrb	r3, [r7, #7]
     fd2:	4619      	mov	r1, r3
     fd4:	4806      	ldr	r0, [pc, #24]	; (ff0 <_gpio_set_direction+0xd0>)
     fd6:	4b08      	ldr	r3, [pc, #32]	; (ff8 <_gpio_set_direction+0xd8>)
     fd8:	4798      	blx	r3
		break;
     fda:	e004      	b.n	fe6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     fdc:	2246      	movs	r2, #70	; 0x46
     fde:	4908      	ldr	r1, [pc, #32]	; (1000 <_gpio_set_direction+0xe0>)
     fe0:	2000      	movs	r0, #0
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <_gpio_set_direction+0xe4>)
     fe4:	4798      	blx	r3
	}
}
     fe6:	bf00      	nop
     fe8:	3708      	adds	r7, #8
     fea:	46bd      	mov	sp, r7
     fec:	bd80      	pop	{r7, pc}
     fee:	bf00      	nop
     ff0:	41008000 	.word	0x41008000
     ff4:	00000cdf 	.word	0x00000cdf
     ff8:	00000ef7 	.word	0x00000ef7
     ffc:	00000cb7 	.word	0x00000cb7
    1000:	0000ec4c 	.word	0x0000ec4c
    1004:	00003931 	.word	0x00003931

00001008 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1008:	b580      	push	{r7, lr}
    100a:	b082      	sub	sp, #8
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	6039      	str	r1, [r7, #0]
    1012:	71fb      	strb	r3, [r7, #7]
    1014:	4613      	mov	r3, r2
    1016:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1018:	79bb      	ldrb	r3, [r7, #6]
    101a:	2b00      	cmp	r3, #0
    101c:	d006      	beq.n	102c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    101e:	79fb      	ldrb	r3, [r7, #7]
    1020:	683a      	ldr	r2, [r7, #0]
    1022:	4619      	mov	r1, r3
    1024:	4806      	ldr	r0, [pc, #24]	; (1040 <_gpio_set_level+0x38>)
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <_gpio_set_level+0x3c>)
    1028:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    102a:	e005      	b.n	1038 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    102c:	79fb      	ldrb	r3, [r7, #7]
    102e:	683a      	ldr	r2, [r7, #0]
    1030:	4619      	mov	r1, r3
    1032:	4803      	ldr	r0, [pc, #12]	; (1040 <_gpio_set_level+0x38>)
    1034:	4b04      	ldr	r3, [pc, #16]	; (1048 <_gpio_set_level+0x40>)
    1036:	4798      	blx	r3
}
    1038:	bf00      	nop
    103a:	3708      	adds	r7, #8
    103c:	46bd      	mov	sp, r7
    103e:	bd80      	pop	{r7, pc}
    1040:	41008000 	.word	0x41008000
    1044:	00000d07 	.word	0x00000d07
    1048:	00000d2f 	.word	0x00000d2f

0000104c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    104c:	b580      	push	{r7, lr}
    104e:	b082      	sub	sp, #8
    1050:	af00      	add	r7, sp, #0
    1052:	4603      	mov	r3, r0
    1054:	71fb      	strb	r3, [r7, #7]
    1056:	460b      	mov	r3, r1
    1058:	71bb      	strb	r3, [r7, #6]
    105a:	4613      	mov	r3, r2
    105c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    105e:	797b      	ldrb	r3, [r7, #5]
    1060:	2b01      	cmp	r3, #1
    1062:	d00a      	beq.n	107a <_gpio_set_pin_pull_mode+0x2e>
    1064:	2b02      	cmp	r3, #2
    1066:	d01f      	beq.n	10a8 <_gpio_set_pin_pull_mode+0x5c>
    1068:	2b00      	cmp	r3, #0
    106a:	d134      	bne.n	10d6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    106c:	79ba      	ldrb	r2, [r7, #6]
    106e:	79fb      	ldrb	r3, [r7, #7]
    1070:	4619      	mov	r1, r3
    1072:	481e      	ldr	r0, [pc, #120]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    1074:	4b1e      	ldr	r3, [pc, #120]	; (10f0 <_gpio_set_pin_pull_mode+0xa4>)
    1076:	4798      	blx	r3
		break;
    1078:	e033      	b.n	10e2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    107a:	79bb      	ldrb	r3, [r7, #6]
    107c:	2201      	movs	r2, #1
    107e:	409a      	lsls	r2, r3
    1080:	79fb      	ldrb	r3, [r7, #7]
    1082:	4619      	mov	r1, r3
    1084:	4819      	ldr	r0, [pc, #100]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    1086:	4b1b      	ldr	r3, [pc, #108]	; (10f4 <_gpio_set_pin_pull_mode+0xa8>)
    1088:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    108a:	79ba      	ldrb	r2, [r7, #6]
    108c:	79fb      	ldrb	r3, [r7, #7]
    108e:	4619      	mov	r1, r3
    1090:	4816      	ldr	r0, [pc, #88]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    1092:	4b19      	ldr	r3, [pc, #100]	; (10f8 <_gpio_set_pin_pull_mode+0xac>)
    1094:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1096:	79bb      	ldrb	r3, [r7, #6]
    1098:	2201      	movs	r2, #1
    109a:	409a      	lsls	r2, r3
    109c:	79fb      	ldrb	r3, [r7, #7]
    109e:	4619      	mov	r1, r3
    10a0:	4812      	ldr	r0, [pc, #72]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10a2:	4b16      	ldr	r3, [pc, #88]	; (10fc <_gpio_set_pin_pull_mode+0xb0>)
    10a4:	4798      	blx	r3
		break;
    10a6:	e01c      	b.n	10e2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10a8:	79bb      	ldrb	r3, [r7, #6]
    10aa:	2201      	movs	r2, #1
    10ac:	409a      	lsls	r2, r3
    10ae:	79fb      	ldrb	r3, [r7, #7]
    10b0:	4619      	mov	r1, r3
    10b2:	480e      	ldr	r0, [pc, #56]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10b4:	4b0f      	ldr	r3, [pc, #60]	; (10f4 <_gpio_set_pin_pull_mode+0xa8>)
    10b6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10b8:	79ba      	ldrb	r2, [r7, #6]
    10ba:	79fb      	ldrb	r3, [r7, #7]
    10bc:	4619      	mov	r1, r3
    10be:	480b      	ldr	r0, [pc, #44]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <_gpio_set_pin_pull_mode+0xac>)
    10c2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    10c4:	79bb      	ldrb	r3, [r7, #6]
    10c6:	2201      	movs	r2, #1
    10c8:	409a      	lsls	r2, r3
    10ca:	79fb      	ldrb	r3, [r7, #7]
    10cc:	4619      	mov	r1, r3
    10ce:	4807      	ldr	r0, [pc, #28]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10d0:	4b0b      	ldr	r3, [pc, #44]	; (1100 <_gpio_set_pin_pull_mode+0xb4>)
    10d2:	4798      	blx	r3
		break;
    10d4:	e005      	b.n	10e2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    10d6:	2289      	movs	r2, #137	; 0x89
    10d8:	490a      	ldr	r1, [pc, #40]	; (1104 <_gpio_set_pin_pull_mode+0xb8>)
    10da:	2000      	movs	r0, #0
    10dc:	4b0a      	ldr	r3, [pc, #40]	; (1108 <_gpio_set_pin_pull_mode+0xbc>)
    10de:	4798      	blx	r3
		break;
    10e0:	bf00      	nop
	}
}
    10e2:	bf00      	nop
    10e4:	3708      	adds	r7, #8
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop
    10ec:	41008000 	.word	0x41008000
    10f0:	00000eb3 	.word	0x00000eb3
    10f4:	00000cdf 	.word	0x00000cdf
    10f8:	00000e6f 	.word	0x00000e6f
    10fc:	00000d07 	.word	0x00000d07
    1100:	00000d2f 	.word	0x00000d2f
    1104:	0000ec4c 	.word	0x0000ec4c
    1108:	00003931 	.word	0x00003931

0000110c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    110c:	b590      	push	{r4, r7, lr}
    110e:	b085      	sub	sp, #20
    1110:	af00      	add	r7, sp, #0
    1112:	6078      	str	r0, [r7, #4]
    1114:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	095b      	lsrs	r3, r3, #5
    111a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	b2db      	uxtb	r3, r3
    1120:	f003 031f 	and.w	r3, r3, #31
    1124:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	f1b3 3fff 	cmp.w	r3, #4294967295
    112c:	d106      	bne.n	113c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    112e:	7bba      	ldrb	r2, [r7, #14]
    1130:	7bf9      	ldrb	r1, [r7, #15]
    1132:	2300      	movs	r3, #0
    1134:	4812      	ldr	r0, [pc, #72]	; (1180 <_gpio_set_pin_function+0x74>)
    1136:	4c13      	ldr	r4, [pc, #76]	; (1184 <_gpio_set_pin_function+0x78>)
    1138:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    113a:	e01d      	b.n	1178 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    113c:	7bba      	ldrb	r2, [r7, #14]
    113e:	7bf9      	ldrb	r1, [r7, #15]
    1140:	2301      	movs	r3, #1
    1142:	480f      	ldr	r0, [pc, #60]	; (1180 <_gpio_set_pin_function+0x74>)
    1144:	4c0f      	ldr	r4, [pc, #60]	; (1184 <_gpio_set_pin_function+0x78>)
    1146:	47a0      	blx	r4
		if (pin & 1) {
    1148:	7bbb      	ldrb	r3, [r7, #14]
    114a:	f003 0301 	and.w	r3, r3, #1
    114e:	2b00      	cmp	r3, #0
    1150:	d009      	beq.n	1166 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1152:	7bbb      	ldrb	r3, [r7, #14]
    1154:	085b      	lsrs	r3, r3, #1
    1156:	b2da      	uxtb	r2, r3
    1158:	683b      	ldr	r3, [r7, #0]
    115a:	b2db      	uxtb	r3, r3
    115c:	7bf9      	ldrb	r1, [r7, #15]
    115e:	4808      	ldr	r0, [pc, #32]	; (1180 <_gpio_set_pin_function+0x74>)
    1160:	4c09      	ldr	r4, [pc, #36]	; (1188 <_gpio_set_pin_function+0x7c>)
    1162:	47a0      	blx	r4
}
    1164:	e008      	b.n	1178 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1166:	7bbb      	ldrb	r3, [r7, #14]
    1168:	085b      	lsrs	r3, r3, #1
    116a:	b2da      	uxtb	r2, r3
    116c:	683b      	ldr	r3, [r7, #0]
    116e:	b2db      	uxtb	r3, r3
    1170:	7bf9      	ldrb	r1, [r7, #15]
    1172:	4803      	ldr	r0, [pc, #12]	; (1180 <_gpio_set_pin_function+0x74>)
    1174:	4c05      	ldr	r4, [pc, #20]	; (118c <_gpio_set_pin_function+0x80>)
    1176:	47a0      	blx	r4
}
    1178:	bf00      	nop
    117a:	3714      	adds	r7, #20
    117c:	46bd      	mov	sp, r7
    117e:	bd90      	pop	{r4, r7, pc}
    1180:	41008000 	.word	0x41008000
    1184:	00000e15 	.word	0x00000e15
    1188:	00000db7 	.word	0x00000db7
    118c:	00000d57 	.word	0x00000d57

00001190 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1190:	b580      	push	{r7, lr}
    1192:	b082      	sub	sp, #8
    1194:	af00      	add	r7, sp, #0
    1196:	4603      	mov	r3, r0
    1198:	460a      	mov	r2, r1
    119a:	71fb      	strb	r3, [r7, #7]
    119c:	4613      	mov	r3, r2
    119e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    11a0:	79fb      	ldrb	r3, [r7, #7]
    11a2:	095b      	lsrs	r3, r3, #5
    11a4:	b2d8      	uxtb	r0, r3
    11a6:	79fb      	ldrb	r3, [r7, #7]
    11a8:	f003 031f 	and.w	r3, r3, #31
    11ac:	b2db      	uxtb	r3, r3
    11ae:	79ba      	ldrb	r2, [r7, #6]
    11b0:	4619      	mov	r1, r3
    11b2:	4b03      	ldr	r3, [pc, #12]	; (11c0 <gpio_set_pin_pull_mode+0x30>)
    11b4:	4798      	blx	r3
}
    11b6:	bf00      	nop
    11b8:	3708      	adds	r7, #8
    11ba:	46bd      	mov	sp, r7
    11bc:	bd80      	pop	{r7, pc}
    11be:	bf00      	nop
    11c0:	0000104d 	.word	0x0000104d

000011c4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
    11cc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    11ce:	6839      	ldr	r1, [r7, #0]
    11d0:	6878      	ldr	r0, [r7, #4]
    11d2:	4b03      	ldr	r3, [pc, #12]	; (11e0 <gpio_set_pin_function+0x1c>)
    11d4:	4798      	blx	r3
}
    11d6:	bf00      	nop
    11d8:	3708      	adds	r7, #8
    11da:	46bd      	mov	sp, r7
    11dc:	bd80      	pop	{r7, pc}
    11de:	bf00      	nop
    11e0:	0000110d 	.word	0x0000110d

000011e4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	af00      	add	r7, sp, #0
    11ea:	4603      	mov	r3, r0
    11ec:	460a      	mov	r2, r1
    11ee:	71fb      	strb	r3, [r7, #7]
    11f0:	4613      	mov	r3, r2
    11f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    11f4:	79fb      	ldrb	r3, [r7, #7]
    11f6:	095b      	lsrs	r3, r3, #5
    11f8:	b2d8      	uxtb	r0, r3
    11fa:	79fb      	ldrb	r3, [r7, #7]
    11fc:	f003 031f 	and.w	r3, r3, #31
    1200:	2201      	movs	r2, #1
    1202:	fa02 f303 	lsl.w	r3, r2, r3
    1206:	79ba      	ldrb	r2, [r7, #6]
    1208:	4619      	mov	r1, r3
    120a:	4b03      	ldr	r3, [pc, #12]	; (1218 <gpio_set_pin_direction+0x34>)
    120c:	4798      	blx	r3
}
    120e:	bf00      	nop
    1210:	3708      	adds	r7, #8
    1212:	46bd      	mov	sp, r7
    1214:	bd80      	pop	{r7, pc}
    1216:	bf00      	nop
    1218:	00000f21 	.word	0x00000f21

0000121c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    121c:	b580      	push	{r7, lr}
    121e:	b082      	sub	sp, #8
    1220:	af00      	add	r7, sp, #0
    1222:	4603      	mov	r3, r0
    1224:	460a      	mov	r2, r1
    1226:	71fb      	strb	r3, [r7, #7]
    1228:	4613      	mov	r3, r2
    122a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    122c:	79fb      	ldrb	r3, [r7, #7]
    122e:	095b      	lsrs	r3, r3, #5
    1230:	b2d8      	uxtb	r0, r3
    1232:	79fb      	ldrb	r3, [r7, #7]
    1234:	f003 031f 	and.w	r3, r3, #31
    1238:	2201      	movs	r2, #1
    123a:	fa02 f303 	lsl.w	r3, r2, r3
    123e:	79ba      	ldrb	r2, [r7, #6]
    1240:	4619      	mov	r1, r3
    1242:	4b03      	ldr	r3, [pc, #12]	; (1250 <gpio_set_pin_level+0x34>)
    1244:	4798      	blx	r3
}
    1246:	bf00      	nop
    1248:	3708      	adds	r7, #8
    124a:	46bd      	mov	sp, r7
    124c:	bd80      	pop	{r7, pc}
    124e:	bf00      	nop
    1250:	00001009 	.word	0x00001009

00001254 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
	_init_chip();
    1258:	4b01      	ldr	r3, [pc, #4]	; (1260 <init_mcu+0xc>)
    125a:	4798      	blx	r3
}
    125c:	bf00      	nop
    125e:	bd80      	pop	{r7, pc}
    1260:	00004539 	.word	0x00004539

00001264 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1264:	b580      	push	{r7, lr}
    1266:	b082      	sub	sp, #8
    1268:	af00      	add	r7, sp, #0
    126a:	6078      	str	r0, [r7, #4]
    126c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	2b00      	cmp	r3, #0
    1272:	d004      	beq.n	127e <wdt_init+0x1a>
    1274:	683b      	ldr	r3, [r7, #0]
    1276:	2b00      	cmp	r3, #0
    1278:	d001      	beq.n	127e <wdt_init+0x1a>
    127a:	2301      	movs	r3, #1
    127c:	e000      	b.n	1280 <wdt_init+0x1c>
    127e:	2300      	movs	r3, #0
    1280:	f003 0301 	and.w	r3, r3, #1
    1284:	b2db      	uxtb	r3, r3
    1286:	2248      	movs	r2, #72	; 0x48
    1288:	4907      	ldr	r1, [pc, #28]	; (12a8 <wdt_init+0x44>)
    128a:	4618      	mov	r0, r3
    128c:	4b07      	ldr	r3, [pc, #28]	; (12ac <wdt_init+0x48>)
    128e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	683a      	ldr	r2, [r7, #0]
    1294:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	4618      	mov	r0, r3
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <wdt_init+0x4c>)
    129c:	4798      	blx	r3
    129e:	4603      	mov	r3, r0
}
    12a0:	4618      	mov	r0, r3
    12a2:	3708      	adds	r7, #8
    12a4:	46bd      	mov	sp, r7
    12a6:	bd80      	pop	{r7, pc}
    12a8:	0000ec68 	.word	0x0000ec68
    12ac:	00003931 	.word	0x00003931
    12b0:	0000acfd 	.word	0x0000acfd

000012b4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    12b8:	4804      	ldr	r0, [pc, #16]	; (12cc <CRC_CALC_init+0x18>)
    12ba:	4b05      	ldr	r3, [pc, #20]	; (12d0 <CRC_CALC_init+0x1c>)
    12bc:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    12be:	4905      	ldr	r1, [pc, #20]	; (12d4 <CRC_CALC_init+0x20>)
    12c0:	4805      	ldr	r0, [pc, #20]	; (12d8 <CRC_CALC_init+0x24>)
    12c2:	4b06      	ldr	r3, [pc, #24]	; (12dc <CRC_CALC_init+0x28>)
    12c4:	4798      	blx	r3
}
    12c6:	bf00      	nop
    12c8:	bd80      	pop	{r7, pc}
    12ca:	bf00      	nop
    12cc:	40000800 	.word	0x40000800
    12d0:	00000b57 	.word	0x00000b57
    12d4:	41002000 	.word	0x41002000
    12d8:	20001010 	.word	0x20001010
    12dc:	00001f55 	.word	0x00001f55

000012e0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    12e0:	b580      	push	{r7, lr}
    12e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12e4:	2244      	movs	r2, #68	; 0x44
    12e6:	2104      	movs	r1, #4
    12e8:	481e      	ldr	r0, [pc, #120]	; (1364 <EXTERNAL_IRQ_0_init+0x84>)
    12ea:	4b1f      	ldr	r3, [pc, #124]	; (1368 <EXTERNAL_IRQ_0_init+0x88>)
    12ec:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    12ee:	481f      	ldr	r0, [pc, #124]	; (136c <EXTERNAL_IRQ_0_init+0x8c>)
    12f0:	4b1f      	ldr	r3, [pc, #124]	; (1370 <EXTERNAL_IRQ_0_init+0x90>)
    12f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    12f4:	2101      	movs	r1, #1
    12f6:	2004      	movs	r0, #4
    12f8:	4b1e      	ldr	r3, [pc, #120]	; (1374 <EXTERNAL_IRQ_0_init+0x94>)
    12fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    12fc:	2102      	movs	r1, #2
    12fe:	2004      	movs	r0, #4
    1300:	4b1d      	ldr	r3, [pc, #116]	; (1378 <EXTERNAL_IRQ_0_init+0x98>)
    1302:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    1304:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1308:	2004      	movs	r0, #4
    130a:	4b1c      	ldr	r3, [pc, #112]	; (137c <EXTERNAL_IRQ_0_init+0x9c>)
    130c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    130e:	2101      	movs	r1, #1
    1310:	2005      	movs	r0, #5
    1312:	4b18      	ldr	r3, [pc, #96]	; (1374 <EXTERNAL_IRQ_0_init+0x94>)
    1314:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    1316:	2102      	movs	r1, #2
    1318:	2005      	movs	r0, #5
    131a:	4b17      	ldr	r3, [pc, #92]	; (1378 <EXTERNAL_IRQ_0_init+0x98>)
    131c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    131e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1322:	2005      	movs	r0, #5
    1324:	4b15      	ldr	r3, [pc, #84]	; (137c <EXTERNAL_IRQ_0_init+0x9c>)
    1326:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    1328:	2101      	movs	r1, #1
    132a:	2056      	movs	r0, #86	; 0x56
    132c:	4b11      	ldr	r3, [pc, #68]	; (1374 <EXTERNAL_IRQ_0_init+0x94>)
    132e:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    1330:	2102      	movs	r1, #2
    1332:	2056      	movs	r0, #86	; 0x56
    1334:	4b10      	ldr	r3, [pc, #64]	; (1378 <EXTERNAL_IRQ_0_init+0x98>)
    1336:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    1338:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    133c:	2056      	movs	r0, #86	; 0x56
    133e:	4b0f      	ldr	r3, [pc, #60]	; (137c <EXTERNAL_IRQ_0_init+0x9c>)
    1340:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    1342:	2101      	movs	r1, #1
    1344:	2057      	movs	r0, #87	; 0x57
    1346:	4b0b      	ldr	r3, [pc, #44]	; (1374 <EXTERNAL_IRQ_0_init+0x94>)
    1348:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    134a:	2102      	movs	r1, #2
    134c:	2057      	movs	r0, #87	; 0x57
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <EXTERNAL_IRQ_0_init+0x98>)
    1350:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    1352:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1356:	2057      	movs	r0, #87	; 0x57
    1358:	4b08      	ldr	r3, [pc, #32]	; (137c <EXTERNAL_IRQ_0_init+0x9c>)
    135a:	4798      	blx	r3

	ext_irq_init();
    135c:	4b08      	ldr	r3, [pc, #32]	; (1380 <EXTERNAL_IRQ_0_init+0xa0>)
    135e:	4798      	blx	r3
}
    1360:	bf00      	nop
    1362:	bd80      	pop	{r7, pc}
    1364:	40001c00 	.word	0x40001c00
    1368:	000009b1 	.word	0x000009b1
    136c:	40000800 	.word	0x40000800
    1370:	00000a97 	.word	0x00000a97
    1374:	000011e5 	.word	0x000011e5
    1378:	00001191 	.word	0x00001191
    137c:	000011c5 	.word	0x000011c5
    1380:	0000201d 	.word	0x0000201d

00001384 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1384:	b580      	push	{r7, lr}
    1386:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1388:	2244      	movs	r2, #68	; 0x44
    138a:	210b      	movs	r1, #11
    138c:	4804      	ldr	r0, [pc, #16]	; (13a0 <EVENT_SYSTEM_0_init+0x1c>)
    138e:	4b05      	ldr	r3, [pc, #20]	; (13a4 <EVENT_SYSTEM_0_init+0x20>)
    1390:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1392:	4805      	ldr	r0, [pc, #20]	; (13a8 <EVENT_SYSTEM_0_init+0x24>)
    1394:	4b05      	ldr	r3, [pc, #20]	; (13ac <EVENT_SYSTEM_0_init+0x28>)
    1396:	4798      	blx	r3

	event_system_init();
    1398:	4b05      	ldr	r3, [pc, #20]	; (13b0 <EVENT_SYSTEM_0_init+0x2c>)
    139a:	4798      	blx	r3
}
    139c:	bf00      	nop
    139e:	bd80      	pop	{r7, pc}
    13a0:	40001c00 	.word	0x40001c00
    13a4:	000009b1 	.word	0x000009b1
    13a8:	40000800 	.word	0x40000800
    13ac:	00000b77 	.word	0x00000b77
    13b0:	00002009 	.word	0x00002009

000013b4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    13b8:	2101      	movs	r1, #1
    13ba:	202b      	movs	r0, #43	; 0x2b
    13bc:	4b2b      	ldr	r3, [pc, #172]	; (146c <QSPI_N25Q256_PORT_init+0xb8>)
    13be:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    13c0:	2100      	movs	r1, #0
    13c2:	202b      	movs	r0, #43	; 0x2b
    13c4:	4b2a      	ldr	r3, [pc, #168]	; (1470 <QSPI_N25Q256_PORT_init+0xbc>)
    13c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    13c8:	492a      	ldr	r1, [pc, #168]	; (1474 <QSPI_N25Q256_PORT_init+0xc0>)
    13ca:	202b      	movs	r0, #43	; 0x2b
    13cc:	4b2a      	ldr	r3, [pc, #168]	; (1478 <QSPI_N25Q256_PORT_init+0xc4>)
    13ce:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    13d0:	2102      	movs	r1, #2
    13d2:	2008      	movs	r0, #8
    13d4:	4b25      	ldr	r3, [pc, #148]	; (146c <QSPI_N25Q256_PORT_init+0xb8>)
    13d6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    13d8:	2100      	movs	r1, #0
    13da:	2008      	movs	r0, #8
    13dc:	4b27      	ldr	r3, [pc, #156]	; (147c <QSPI_N25Q256_PORT_init+0xc8>)
    13de:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    13e0:	2100      	movs	r1, #0
    13e2:	2008      	movs	r0, #8
    13e4:	4b22      	ldr	r3, [pc, #136]	; (1470 <QSPI_N25Q256_PORT_init+0xbc>)
    13e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    13e8:	4925      	ldr	r1, [pc, #148]	; (1480 <QSPI_N25Q256_PORT_init+0xcc>)
    13ea:	2008      	movs	r0, #8
    13ec:	4b22      	ldr	r3, [pc, #136]	; (1478 <QSPI_N25Q256_PORT_init+0xc4>)
    13ee:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    13f0:	2102      	movs	r1, #2
    13f2:	2009      	movs	r0, #9
    13f4:	4b1d      	ldr	r3, [pc, #116]	; (146c <QSPI_N25Q256_PORT_init+0xb8>)
    13f6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    13f8:	2100      	movs	r1, #0
    13fa:	2009      	movs	r0, #9
    13fc:	4b1f      	ldr	r3, [pc, #124]	; (147c <QSPI_N25Q256_PORT_init+0xc8>)
    13fe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1400:	2100      	movs	r1, #0
    1402:	2009      	movs	r0, #9
    1404:	4b1a      	ldr	r3, [pc, #104]	; (1470 <QSPI_N25Q256_PORT_init+0xbc>)
    1406:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1408:	491e      	ldr	r1, [pc, #120]	; (1484 <QSPI_N25Q256_PORT_init+0xd0>)
    140a:	2009      	movs	r0, #9
    140c:	4b1a      	ldr	r3, [pc, #104]	; (1478 <QSPI_N25Q256_PORT_init+0xc4>)
    140e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1410:	2102      	movs	r1, #2
    1412:	200a      	movs	r0, #10
    1414:	4b15      	ldr	r3, [pc, #84]	; (146c <QSPI_N25Q256_PORT_init+0xb8>)
    1416:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1418:	2100      	movs	r1, #0
    141a:	200a      	movs	r0, #10
    141c:	4b17      	ldr	r3, [pc, #92]	; (147c <QSPI_N25Q256_PORT_init+0xc8>)
    141e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1420:	2100      	movs	r1, #0
    1422:	200a      	movs	r0, #10
    1424:	4b12      	ldr	r3, [pc, #72]	; (1470 <QSPI_N25Q256_PORT_init+0xbc>)
    1426:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1428:	4917      	ldr	r1, [pc, #92]	; (1488 <QSPI_N25Q256_PORT_init+0xd4>)
    142a:	200a      	movs	r0, #10
    142c:	4b12      	ldr	r3, [pc, #72]	; (1478 <QSPI_N25Q256_PORT_init+0xc4>)
    142e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1430:	2102      	movs	r1, #2
    1432:	200b      	movs	r0, #11
    1434:	4b0d      	ldr	r3, [pc, #52]	; (146c <QSPI_N25Q256_PORT_init+0xb8>)
    1436:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1438:	2100      	movs	r1, #0
    143a:	200b      	movs	r0, #11
    143c:	4b0f      	ldr	r3, [pc, #60]	; (147c <QSPI_N25Q256_PORT_init+0xc8>)
    143e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1440:	2100      	movs	r1, #0
    1442:	200b      	movs	r0, #11
    1444:	4b0a      	ldr	r3, [pc, #40]	; (1470 <QSPI_N25Q256_PORT_init+0xbc>)
    1446:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1448:	4910      	ldr	r1, [pc, #64]	; (148c <QSPI_N25Q256_PORT_init+0xd8>)
    144a:	200b      	movs	r0, #11
    144c:	4b0a      	ldr	r3, [pc, #40]	; (1478 <QSPI_N25Q256_PORT_init+0xc4>)
    144e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1450:	2101      	movs	r1, #1
    1452:	202a      	movs	r0, #42	; 0x2a
    1454:	4b05      	ldr	r3, [pc, #20]	; (146c <QSPI_N25Q256_PORT_init+0xb8>)
    1456:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1458:	2100      	movs	r1, #0
    145a:	202a      	movs	r0, #42	; 0x2a
    145c:	4b04      	ldr	r3, [pc, #16]	; (1470 <QSPI_N25Q256_PORT_init+0xbc>)
    145e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1460:	490b      	ldr	r1, [pc, #44]	; (1490 <QSPI_N25Q256_PORT_init+0xdc>)
    1462:	202a      	movs	r0, #42	; 0x2a
    1464:	4b04      	ldr	r3, [pc, #16]	; (1478 <QSPI_N25Q256_PORT_init+0xc4>)
    1466:	4798      	blx	r3
}
    1468:	bf00      	nop
    146a:	bd80      	pop	{r7, pc}
    146c:	000011e5 	.word	0x000011e5
    1470:	00001191 	.word	0x00001191
    1474:	002b0007 	.word	0x002b0007
    1478:	000011c5 	.word	0x000011c5
    147c:	0000121d 	.word	0x0000121d
    1480:	00080007 	.word	0x00080007
    1484:	00090007 	.word	0x00090007
    1488:	000a0007 	.word	0x000a0007
    148c:	000b0007 	.word	0x000b0007
    1490:	002a0007 	.word	0x002a0007

00001494 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1494:	b580      	push	{r7, lr}
    1496:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1498:	4805      	ldr	r0, [pc, #20]	; (14b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    149a:	4b06      	ldr	r3, [pc, #24]	; (14b4 <QSPI_N25Q256_CLOCK_init+0x20>)
    149c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    149e:	4804      	ldr	r0, [pc, #16]	; (14b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <QSPI_N25Q256_CLOCK_init+0x24>)
    14a2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    14a4:	4802      	ldr	r0, [pc, #8]	; (14b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14a6:	4b05      	ldr	r3, [pc, #20]	; (14bc <QSPI_N25Q256_CLOCK_init+0x28>)
    14a8:	4798      	blx	r3
}
    14aa:	bf00      	nop
    14ac:	bd80      	pop	{r7, pc}
    14ae:	bf00      	nop
    14b0:	40000800 	.word	0x40000800
    14b4:	000009f7 	.word	0x000009f7
    14b8:	00000a37 	.word	0x00000a37
    14bc:	00000c17 	.word	0x00000c17

000014c0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    14c4:	4b04      	ldr	r3, [pc, #16]	; (14d8 <QSPI_N25Q256_init+0x18>)
    14c6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    14c8:	4904      	ldr	r1, [pc, #16]	; (14dc <QSPI_N25Q256_init+0x1c>)
    14ca:	4805      	ldr	r0, [pc, #20]	; (14e0 <QSPI_N25Q256_init+0x20>)
    14cc:	4b05      	ldr	r3, [pc, #20]	; (14e4 <QSPI_N25Q256_init+0x24>)
    14ce:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    14d0:	4b05      	ldr	r3, [pc, #20]	; (14e8 <QSPI_N25Q256_init+0x28>)
    14d2:	4798      	blx	r3
}
    14d4:	bf00      	nop
    14d6:	bd80      	pop	{r7, pc}
    14d8:	00001495 	.word	0x00001495
    14dc:	42003400 	.word	0x42003400
    14e0:	20000e98 	.word	0x20000e98
    14e4:	000024cd 	.word	0x000024cd
    14e8:	000013b5 	.word	0x000013b5

000014ec <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    14ec:	b580      	push	{r7, lr}
    14ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    14f0:	4802      	ldr	r0, [pc, #8]	; (14fc <DATETIME_CLOCK_CLOCK_init+0x10>)
    14f2:	4b03      	ldr	r3, [pc, #12]	; (1500 <DATETIME_CLOCK_CLOCK_init+0x14>)
    14f4:	4798      	blx	r3
}
    14f6:	bf00      	nop
    14f8:	bd80      	pop	{r7, pc}
    14fa:	bf00      	nop
    14fc:	40000800 	.word	0x40000800
    1500:	00000a77 	.word	0x00000a77

00001504 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1504:	b580      	push	{r7, lr}
    1506:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1508:	4b03      	ldr	r3, [pc, #12]	; (1518 <DATETIME_CLOCK_init+0x14>)
    150a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    150c:	4903      	ldr	r1, [pc, #12]	; (151c <DATETIME_CLOCK_init+0x18>)
    150e:	4804      	ldr	r0, [pc, #16]	; (1520 <DATETIME_CLOCK_init+0x1c>)
    1510:	4b04      	ldr	r3, [pc, #16]	; (1524 <DATETIME_CLOCK_init+0x20>)
    1512:	4798      	blx	r3
}
    1514:	bf00      	nop
    1516:	bd80      	pop	{r7, pc}
    1518:	000014ed 	.word	0x000014ed
    151c:	40002400 	.word	0x40002400
    1520:	20000fec 	.word	0x20000fec
    1524:	00001df9 	.word	0x00001df9

00001528 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1528:	b580      	push	{r7, lr}
    152a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    152c:	2100      	movs	r1, #0
    152e:	2051      	movs	r0, #81	; 0x51
    1530:	4b11      	ldr	r3, [pc, #68]	; (1578 <SPI_HI3593_PORT_init+0x50>)
    1532:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    1534:	2102      	movs	r1, #2
    1536:	2051      	movs	r0, #81	; 0x51
    1538:	4b10      	ldr	r3, [pc, #64]	; (157c <SPI_HI3593_PORT_init+0x54>)
    153a:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    153c:	4910      	ldr	r1, [pc, #64]	; (1580 <SPI_HI3593_PORT_init+0x58>)
    153e:	2051      	movs	r0, #81	; 0x51
    1540:	4b10      	ldr	r3, [pc, #64]	; (1584 <SPI_HI3593_PORT_init+0x5c>)
    1542:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    1544:	2100      	movs	r1, #0
    1546:	2050      	movs	r0, #80	; 0x50
    1548:	4b0b      	ldr	r3, [pc, #44]	; (1578 <SPI_HI3593_PORT_init+0x50>)
    154a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    154c:	2102      	movs	r1, #2
    154e:	2050      	movs	r0, #80	; 0x50
    1550:	4b0a      	ldr	r3, [pc, #40]	; (157c <SPI_HI3593_PORT_init+0x54>)
    1552:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    1554:	490c      	ldr	r1, [pc, #48]	; (1588 <SPI_HI3593_PORT_init+0x60>)
    1556:	2050      	movs	r0, #80	; 0x50
    1558:	4b0a      	ldr	r3, [pc, #40]	; (1584 <SPI_HI3593_PORT_init+0x5c>)
    155a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    155c:	2101      	movs	r1, #1
    155e:	2006      	movs	r0, #6
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <SPI_HI3593_PORT_init+0x54>)
    1562:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    1564:	2100      	movs	r1, #0
    1566:	2006      	movs	r0, #6
    1568:	4b08      	ldr	r3, [pc, #32]	; (158c <SPI_HI3593_PORT_init+0x64>)
    156a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    156c:	4908      	ldr	r1, [pc, #32]	; (1590 <SPI_HI3593_PORT_init+0x68>)
    156e:	2006      	movs	r0, #6
    1570:	4b04      	ldr	r3, [pc, #16]	; (1584 <SPI_HI3593_PORT_init+0x5c>)
    1572:	4798      	blx	r3
}
    1574:	bf00      	nop
    1576:	bd80      	pop	{r7, pc}
    1578:	0000121d 	.word	0x0000121d
    157c:	000011e5 	.word	0x000011e5
    1580:	00510003 	.word	0x00510003
    1584:	000011c5 	.word	0x000011c5
    1588:	00500003 	.word	0x00500003
    158c:	00001191 	.word	0x00001191
    1590:	00060003 	.word	0x00060003

00001594 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1594:	b580      	push	{r7, lr}
    1596:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1598:	2240      	movs	r2, #64	; 0x40
    159a:	2107      	movs	r1, #7
    159c:	4806      	ldr	r0, [pc, #24]	; (15b8 <SPI_HI3593_CLOCK_init+0x24>)
    159e:	4b07      	ldr	r3, [pc, #28]	; (15bc <SPI_HI3593_CLOCK_init+0x28>)
    15a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15a2:	2243      	movs	r2, #67	; 0x43
    15a4:	2103      	movs	r1, #3
    15a6:	4804      	ldr	r0, [pc, #16]	; (15b8 <SPI_HI3593_CLOCK_init+0x24>)
    15a8:	4b04      	ldr	r3, [pc, #16]	; (15bc <SPI_HI3593_CLOCK_init+0x28>)
    15aa:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    15ac:	4804      	ldr	r0, [pc, #16]	; (15c0 <SPI_HI3593_CLOCK_init+0x2c>)
    15ae:	4b05      	ldr	r3, [pc, #20]	; (15c4 <SPI_HI3593_CLOCK_init+0x30>)
    15b0:	4798      	blx	r3
}
    15b2:	bf00      	nop
    15b4:	bd80      	pop	{r7, pc}
    15b6:	bf00      	nop
    15b8:	40001c00 	.word	0x40001c00
    15bc:	000009b1 	.word	0x000009b1
    15c0:	40000800 	.word	0x40000800
    15c4:	00000ab7 	.word	0x00000ab7

000015c8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <SPI_HI3593_init+0x18>)
    15ce:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    15d0:	4904      	ldr	r1, [pc, #16]	; (15e4 <SPI_HI3593_init+0x1c>)
    15d2:	4805      	ldr	r0, [pc, #20]	; (15e8 <SPI_HI3593_init+0x20>)
    15d4:	4b05      	ldr	r3, [pc, #20]	; (15ec <SPI_HI3593_init+0x24>)
    15d6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    15d8:	4b05      	ldr	r3, [pc, #20]	; (15f0 <SPI_HI3593_init+0x28>)
    15da:	4798      	blx	r3
}
    15dc:	bf00      	nop
    15de:	bd80      	pop	{r7, pc}
    15e0:	00001595 	.word	0x00001595
    15e4:	40003000 	.word	0x40003000
    15e8:	20000e1c 	.word	0x20000e1c
    15ec:	000029a9 	.word	0x000029a9
    15f0:	00001529 	.word	0x00001529

000015f4 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    15f8:	2100      	movs	r1, #0
    15fa:	2010      	movs	r0, #16
    15fc:	4b11      	ldr	r3, [pc, #68]	; (1644 <SPI_MEMORIES_PORT_init+0x50>)
    15fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    1600:	2102      	movs	r1, #2
    1602:	2010      	movs	r0, #16
    1604:	4b10      	ldr	r3, [pc, #64]	; (1648 <SPI_MEMORIES_PORT_init+0x54>)
    1606:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1608:	4910      	ldr	r1, [pc, #64]	; (164c <SPI_MEMORIES_PORT_init+0x58>)
    160a:	2010      	movs	r0, #16
    160c:	4b10      	ldr	r3, [pc, #64]	; (1650 <SPI_MEMORIES_PORT_init+0x5c>)
    160e:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    1610:	2100      	movs	r1, #0
    1612:	2011      	movs	r0, #17
    1614:	4b0b      	ldr	r3, [pc, #44]	; (1644 <SPI_MEMORIES_PORT_init+0x50>)
    1616:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    1618:	2102      	movs	r1, #2
    161a:	2011      	movs	r0, #17
    161c:	4b0a      	ldr	r3, [pc, #40]	; (1648 <SPI_MEMORIES_PORT_init+0x54>)
    161e:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1620:	490c      	ldr	r1, [pc, #48]	; (1654 <SPI_MEMORIES_PORT_init+0x60>)
    1622:	2011      	movs	r0, #17
    1624:	4b0a      	ldr	r3, [pc, #40]	; (1650 <SPI_MEMORIES_PORT_init+0x5c>)
    1626:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1628:	2101      	movs	r1, #1
    162a:	2012      	movs	r0, #18
    162c:	4b06      	ldr	r3, [pc, #24]	; (1648 <SPI_MEMORIES_PORT_init+0x54>)
    162e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    1630:	2100      	movs	r1, #0
    1632:	2012      	movs	r0, #18
    1634:	4b08      	ldr	r3, [pc, #32]	; (1658 <SPI_MEMORIES_PORT_init+0x64>)
    1636:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    1638:	4908      	ldr	r1, [pc, #32]	; (165c <SPI_MEMORIES_PORT_init+0x68>)
    163a:	2012      	movs	r0, #18
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <SPI_MEMORIES_PORT_init+0x5c>)
    163e:	4798      	blx	r3
}
    1640:	bf00      	nop
    1642:	bd80      	pop	{r7, pc}
    1644:	0000121d 	.word	0x0000121d
    1648:	000011e5 	.word	0x000011e5
    164c:	00100002 	.word	0x00100002
    1650:	000011c5 	.word	0x000011c5
    1654:	00110002 	.word	0x00110002
    1658:	00001191 	.word	0x00001191
    165c:	00120002 	.word	0x00120002

00001660 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    1660:	b580      	push	{r7, lr}
    1662:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1664:	2245      	movs	r2, #69	; 0x45
    1666:	2108      	movs	r1, #8
    1668:	4806      	ldr	r0, [pc, #24]	; (1684 <SPI_MEMORIES_CLOCK_init+0x24>)
    166a:	4b07      	ldr	r3, [pc, #28]	; (1688 <SPI_MEMORIES_CLOCK_init+0x28>)
    166c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    166e:	224a      	movs	r2, #74	; 0x4a
    1670:	2103      	movs	r1, #3
    1672:	4804      	ldr	r0, [pc, #16]	; (1684 <SPI_MEMORIES_CLOCK_init+0x24>)
    1674:	4b04      	ldr	r3, [pc, #16]	; (1688 <SPI_MEMORIES_CLOCK_init+0x28>)
    1676:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1678:	4804      	ldr	r0, [pc, #16]	; (168c <SPI_MEMORIES_CLOCK_init+0x2c>)
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <SPI_MEMORIES_CLOCK_init+0x30>)
    167c:	4798      	blx	r3
}
    167e:	bf00      	nop
    1680:	bd80      	pop	{r7, pc}
    1682:	bf00      	nop
    1684:	40001c00 	.word	0x40001c00
    1688:	000009b1 	.word	0x000009b1
    168c:	40000800 	.word	0x40000800
    1690:	00000ad7 	.word	0x00000ad7

00001694 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    1694:	b580      	push	{r7, lr}
    1696:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    1698:	4b04      	ldr	r3, [pc, #16]	; (16ac <SPI_MEMORIES_init+0x18>)
    169a:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    169c:	4904      	ldr	r1, [pc, #16]	; (16b0 <SPI_MEMORIES_init+0x1c>)
    169e:	4805      	ldr	r0, [pc, #20]	; (16b4 <SPI_MEMORIES_init+0x20>)
    16a0:	4b05      	ldr	r3, [pc, #20]	; (16b8 <SPI_MEMORIES_init+0x24>)
    16a2:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    16a4:	4b05      	ldr	r3, [pc, #20]	; (16bc <SPI_MEMORIES_init+0x28>)
    16a6:	4798      	blx	r3
}
    16a8:	bf00      	nop
    16aa:	bd80      	pop	{r7, pc}
    16ac:	00001661 	.word	0x00001661
    16b0:	40003400 	.word	0x40003400
    16b4:	20000e04 	.word	0x20000e04
    16b8:	000029a9 	.word	0x000029a9
    16bc:	000015f5 	.word	0x000015f5

000016c0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    16c4:	2100      	movs	r1, #0
    16c6:	203b      	movs	r0, #59	; 0x3b
    16c8:	4b11      	ldr	r3, [pc, #68]	; (1710 <SPI_TEMP_PORT_init+0x50>)
    16ca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    16cc:	2102      	movs	r1, #2
    16ce:	203b      	movs	r0, #59	; 0x3b
    16d0:	4b10      	ldr	r3, [pc, #64]	; (1714 <SPI_TEMP_PORT_init+0x54>)
    16d2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    16d4:	4910      	ldr	r1, [pc, #64]	; (1718 <SPI_TEMP_PORT_init+0x58>)
    16d6:	203b      	movs	r0, #59	; 0x3b
    16d8:	4b10      	ldr	r3, [pc, #64]	; (171c <SPI_TEMP_PORT_init+0x5c>)
    16da:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    16dc:	2100      	movs	r1, #0
    16de:	203a      	movs	r0, #58	; 0x3a
    16e0:	4b0b      	ldr	r3, [pc, #44]	; (1710 <SPI_TEMP_PORT_init+0x50>)
    16e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    16e4:	2102      	movs	r1, #2
    16e6:	203a      	movs	r0, #58	; 0x3a
    16e8:	4b0a      	ldr	r3, [pc, #40]	; (1714 <SPI_TEMP_PORT_init+0x54>)
    16ea:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    16ec:	490c      	ldr	r1, [pc, #48]	; (1720 <SPI_TEMP_PORT_init+0x60>)
    16ee:	203a      	movs	r0, #58	; 0x3a
    16f0:	4b0a      	ldr	r3, [pc, #40]	; (171c <SPI_TEMP_PORT_init+0x5c>)
    16f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    16f4:	2101      	movs	r1, #1
    16f6:	203c      	movs	r0, #60	; 0x3c
    16f8:	4b06      	ldr	r3, [pc, #24]	; (1714 <SPI_TEMP_PORT_init+0x54>)
    16fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    16fc:	2100      	movs	r1, #0
    16fe:	203c      	movs	r0, #60	; 0x3c
    1700:	4b08      	ldr	r3, [pc, #32]	; (1724 <SPI_TEMP_PORT_init+0x64>)
    1702:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1704:	4908      	ldr	r1, [pc, #32]	; (1728 <SPI_TEMP_PORT_init+0x68>)
    1706:	203c      	movs	r0, #60	; 0x3c
    1708:	4b04      	ldr	r3, [pc, #16]	; (171c <SPI_TEMP_PORT_init+0x5c>)
    170a:	4798      	blx	r3
}
    170c:	bf00      	nop
    170e:	bd80      	pop	{r7, pc}
    1710:	0000121d 	.word	0x0000121d
    1714:	000011e5 	.word	0x000011e5
    1718:	003b0003 	.word	0x003b0003
    171c:	000011c5 	.word	0x000011c5
    1720:	003a0003 	.word	0x003a0003
    1724:	00001191 	.word	0x00001191
    1728:	003c0003 	.word	0x003c0003

0000172c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    172c:	b580      	push	{r7, lr}
    172e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1730:	2240      	movs	r2, #64	; 0x40
    1732:	2122      	movs	r1, #34	; 0x22
    1734:	4806      	ldr	r0, [pc, #24]	; (1750 <SPI_TEMP_CLOCK_init+0x24>)
    1736:	4b07      	ldr	r3, [pc, #28]	; (1754 <SPI_TEMP_CLOCK_init+0x28>)
    1738:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    173a:	2243      	movs	r2, #67	; 0x43
    173c:	2103      	movs	r1, #3
    173e:	4804      	ldr	r0, [pc, #16]	; (1750 <SPI_TEMP_CLOCK_init+0x24>)
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <SPI_TEMP_CLOCK_init+0x28>)
    1742:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1744:	4804      	ldr	r0, [pc, #16]	; (1758 <SPI_TEMP_CLOCK_init+0x2c>)
    1746:	4b05      	ldr	r3, [pc, #20]	; (175c <SPI_TEMP_CLOCK_init+0x30>)
    1748:	4798      	blx	r3
}
    174a:	bf00      	nop
    174c:	bd80      	pop	{r7, pc}
    174e:	bf00      	nop
    1750:	40001c00 	.word	0x40001c00
    1754:	000009b1 	.word	0x000009b1
    1758:	40000800 	.word	0x40000800
    175c:	00000c37 	.word	0x00000c37

00001760 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1760:	b580      	push	{r7, lr}
    1762:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1764:	4b05      	ldr	r3, [pc, #20]	; (177c <SPI_TEMP_init+0x1c>)
    1766:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    1768:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    176c:	4804      	ldr	r0, [pc, #16]	; (1780 <SPI_TEMP_init+0x20>)
    176e:	4b05      	ldr	r3, [pc, #20]	; (1784 <SPI_TEMP_init+0x24>)
    1770:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1772:	4b05      	ldr	r3, [pc, #20]	; (1788 <SPI_TEMP_init+0x28>)
    1774:	4798      	blx	r3
}
    1776:	bf00      	nop
    1778:	bd80      	pop	{r7, pc}
    177a:	bf00      	nop
    177c:	0000172d 	.word	0x0000172d
    1780:	20000e34 	.word	0x20000e34
    1784:	000027f5 	.word	0x000027f5
    1788:	000016c1 	.word	0x000016c1

0000178c <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    178c:	b580      	push	{r7, lr}
    178e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1790:	2100      	movs	r1, #0
    1792:	2017      	movs	r0, #23
    1794:	4b07      	ldr	r3, [pc, #28]	; (17b4 <I2C_EXPANDER_PORT_init+0x28>)
    1796:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1798:	4907      	ldr	r1, [pc, #28]	; (17b8 <I2C_EXPANDER_PORT_init+0x2c>)
    179a:	2017      	movs	r0, #23
    179c:	4b07      	ldr	r3, [pc, #28]	; (17bc <I2C_EXPANDER_PORT_init+0x30>)
    179e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    17a0:	2100      	movs	r1, #0
    17a2:	2016      	movs	r0, #22
    17a4:	4b03      	ldr	r3, [pc, #12]	; (17b4 <I2C_EXPANDER_PORT_init+0x28>)
    17a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    17a8:	4905      	ldr	r1, [pc, #20]	; (17c0 <I2C_EXPANDER_PORT_init+0x34>)
    17aa:	2016      	movs	r0, #22
    17ac:	4b03      	ldr	r3, [pc, #12]	; (17bc <I2C_EXPANDER_PORT_init+0x30>)
    17ae:	4798      	blx	r3
}
    17b0:	bf00      	nop
    17b2:	bd80      	pop	{r7, pc}
    17b4:	00001191 	.word	0x00001191
    17b8:	00170003 	.word	0x00170003
    17bc:	000011c5 	.word	0x000011c5
    17c0:	00160003 	.word	0x00160003

000017c4 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17c8:	2242      	movs	r2, #66	; 0x42
    17ca:	2123      	movs	r1, #35	; 0x23
    17cc:	4806      	ldr	r0, [pc, #24]	; (17e8 <I2C_EXPANDER_CLOCK_init+0x24>)
    17ce:	4b07      	ldr	r3, [pc, #28]	; (17ec <I2C_EXPANDER_CLOCK_init+0x28>)
    17d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17d2:	2246      	movs	r2, #70	; 0x46
    17d4:	2103      	movs	r1, #3
    17d6:	4804      	ldr	r0, [pc, #16]	; (17e8 <I2C_EXPANDER_CLOCK_init+0x24>)
    17d8:	4b04      	ldr	r3, [pc, #16]	; (17ec <I2C_EXPANDER_CLOCK_init+0x28>)
    17da:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    17dc:	4804      	ldr	r0, [pc, #16]	; (17f0 <I2C_EXPANDER_CLOCK_init+0x2c>)
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <I2C_EXPANDER_CLOCK_init+0x30>)
    17e0:	4798      	blx	r3
}
    17e2:	bf00      	nop
    17e4:	bd80      	pop	{r7, pc}
    17e6:	bf00      	nop
    17e8:	40001c00 	.word	0x40001c00
    17ec:	000009b1 	.word	0x000009b1
    17f0:	40000800 	.word	0x40000800
    17f4:	00000c57 	.word	0x00000c57

000017f8 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    17fc:	4b04      	ldr	r3, [pc, #16]	; (1810 <I2C_EXPANDER_init+0x18>)
    17fe:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    1800:	4904      	ldr	r1, [pc, #16]	; (1814 <I2C_EXPANDER_init+0x1c>)
    1802:	4805      	ldr	r0, [pc, #20]	; (1818 <I2C_EXPANDER_init+0x20>)
    1804:	4b05      	ldr	r3, [pc, #20]	; (181c <I2C_EXPANDER_init+0x24>)
    1806:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1808:	4b05      	ldr	r3, [pc, #20]	; (1820 <I2C_EXPANDER_init+0x28>)
    180a:	4798      	blx	r3
}
    180c:	bf00      	nop
    180e:	bd80      	pop	{r7, pc}
    1810:	000017c5 	.word	0x000017c5
    1814:	43000400 	.word	0x43000400
    1818:	20000f50 	.word	0x20000f50
    181c:	00002229 	.word	0x00002229
    1820:	0000178d 	.word	0x0000178d

00001824 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1824:	b580      	push	{r7, lr}
    1826:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1828:	2100      	movs	r1, #0
    182a:	2068      	movs	r0, #104	; 0x68
    182c:	4b07      	ldr	r3, [pc, #28]	; (184c <I2C_EEPROM_PORT_init+0x28>)
    182e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1830:	4907      	ldr	r1, [pc, #28]	; (1850 <I2C_EEPROM_PORT_init+0x2c>)
    1832:	2068      	movs	r0, #104	; 0x68
    1834:	4b07      	ldr	r3, [pc, #28]	; (1854 <I2C_EEPROM_PORT_init+0x30>)
    1836:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1838:	2100      	movs	r1, #0
    183a:	2069      	movs	r0, #105	; 0x69
    183c:	4b03      	ldr	r3, [pc, #12]	; (184c <I2C_EEPROM_PORT_init+0x28>)
    183e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1840:	4905      	ldr	r1, [pc, #20]	; (1858 <I2C_EEPROM_PORT_init+0x34>)
    1842:	2069      	movs	r0, #105	; 0x69
    1844:	4b03      	ldr	r3, [pc, #12]	; (1854 <I2C_EEPROM_PORT_init+0x30>)
    1846:	4798      	blx	r3
}
    1848:	bf00      	nop
    184a:	bd80      	pop	{r7, pc}
    184c:	00001191 	.word	0x00001191
    1850:	00680002 	.word	0x00680002
    1854:	000011c5 	.word	0x000011c5
    1858:	00690002 	.word	0x00690002

0000185c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1860:	2242      	movs	r2, #66	; 0x42
    1862:	2125      	movs	r1, #37	; 0x25
    1864:	4806      	ldr	r0, [pc, #24]	; (1880 <I2C_EEPROM_CLOCK_init+0x24>)
    1866:	4b07      	ldr	r3, [pc, #28]	; (1884 <I2C_EEPROM_CLOCK_init+0x28>)
    1868:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    186a:	2243      	movs	r2, #67	; 0x43
    186c:	2103      	movs	r1, #3
    186e:	4804      	ldr	r0, [pc, #16]	; (1880 <I2C_EEPROM_CLOCK_init+0x24>)
    1870:	4b04      	ldr	r3, [pc, #16]	; (1884 <I2C_EEPROM_CLOCK_init+0x28>)
    1872:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1874:	4804      	ldr	r0, [pc, #16]	; (1888 <I2C_EEPROM_CLOCK_init+0x2c>)
    1876:	4b05      	ldr	r3, [pc, #20]	; (188c <I2C_EEPROM_CLOCK_init+0x30>)
    1878:	4798      	blx	r3
}
    187a:	bf00      	nop
    187c:	bd80      	pop	{r7, pc}
    187e:	bf00      	nop
    1880:	40001c00 	.word	0x40001c00
    1884:	000009b1 	.word	0x000009b1
    1888:	40000800 	.word	0x40000800
    188c:	00000c77 	.word	0x00000c77

00001890 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1890:	b580      	push	{r7, lr}
    1892:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <I2C_EEPROM_init+0x18>)
    1896:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1898:	4904      	ldr	r1, [pc, #16]	; (18ac <I2C_EEPROM_init+0x1c>)
    189a:	4805      	ldr	r0, [pc, #20]	; (18b0 <I2C_EEPROM_init+0x20>)
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <I2C_EEPROM_init+0x24>)
    189e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <I2C_EEPROM_init+0x28>)
    18a2:	4798      	blx	r3
}
    18a4:	bf00      	nop
    18a6:	bd80      	pop	{r7, pc}
    18a8:	0000185d 	.word	0x0000185d
    18ac:	43000c00 	.word	0x43000c00
    18b0:	20000fac 	.word	0x20000fac
    18b4:	00002229 	.word	0x00002229
    18b8:	00001825 	.word	0x00001825

000018bc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    18bc:	b580      	push	{r7, lr}
    18be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    18c0:	4808      	ldr	r0, [pc, #32]	; (18e4 <TIMER_USB_init+0x28>)
    18c2:	4b09      	ldr	r3, [pc, #36]	; (18e8 <TIMER_USB_init+0x2c>)
    18c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18c6:	2243      	movs	r2, #67	; 0x43
    18c8:	2109      	movs	r1, #9
    18ca:	4808      	ldr	r0, [pc, #32]	; (18ec <TIMER_USB_init+0x30>)
    18cc:	4b08      	ldr	r3, [pc, #32]	; (18f0 <TIMER_USB_init+0x34>)
    18ce:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    18d0:	4b08      	ldr	r3, [pc, #32]	; (18f4 <TIMER_USB_init+0x38>)
    18d2:	4798      	blx	r3
    18d4:	4603      	mov	r3, r0
    18d6:	461a      	mov	r2, r3
    18d8:	4907      	ldr	r1, [pc, #28]	; (18f8 <TIMER_USB_init+0x3c>)
    18da:	4808      	ldr	r0, [pc, #32]	; (18fc <TIMER_USB_init+0x40>)
    18dc:	4b08      	ldr	r3, [pc, #32]	; (1900 <TIMER_USB_init+0x44>)
    18de:	4798      	blx	r3
}
    18e0:	bf00      	nop
    18e2:	bd80      	pop	{r7, pc}
    18e4:	40000800 	.word	0x40000800
    18e8:	00000af7 	.word	0x00000af7
    18ec:	40001c00 	.word	0x40001c00
    18f0:	000009b1 	.word	0x000009b1
    18f4:	00008169 	.word	0x00008169
    18f8:	40003800 	.word	0x40003800
    18fc:	20000f34 	.word	0x20000f34
    1900:	00002b79 	.word	0x00002b79

00001904 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1904:	b580      	push	{r7, lr}
    1906:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1908:	4808      	ldr	r0, [pc, #32]	; (192c <TIMER_EVENT_init+0x28>)
    190a:	4b09      	ldr	r3, [pc, #36]	; (1930 <TIMER_EVENT_init+0x2c>)
    190c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    190e:	2245      	movs	r2, #69	; 0x45
    1910:	2109      	movs	r1, #9
    1912:	4808      	ldr	r0, [pc, #32]	; (1934 <TIMER_EVENT_init+0x30>)
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <TIMER_EVENT_init+0x34>)
    1916:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1918:	4b08      	ldr	r3, [pc, #32]	; (193c <TIMER_EVENT_init+0x38>)
    191a:	4798      	blx	r3
    191c:	4603      	mov	r3, r0
    191e:	461a      	mov	r2, r3
    1920:	4907      	ldr	r1, [pc, #28]	; (1940 <TIMER_EVENT_init+0x3c>)
    1922:	4808      	ldr	r0, [pc, #32]	; (1944 <TIMER_EVENT_init+0x40>)
    1924:	4b08      	ldr	r3, [pc, #32]	; (1948 <TIMER_EVENT_init+0x44>)
    1926:	4798      	blx	r3
}
    1928:	bf00      	nop
    192a:	bd80      	pop	{r7, pc}
    192c:	40000800 	.word	0x40000800
    1930:	00000b17 	.word	0x00000b17
    1934:	40001c00 	.word	0x40001c00
    1938:	000009b1 	.word	0x000009b1
    193c:	00008169 	.word	0x00008169
    1940:	40003c00 	.word	0x40003c00
    1944:	20000e9c 	.word	0x20000e9c
    1948:	00002b79 	.word	0x00002b79

0000194c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    194c:	b580      	push	{r7, lr}
    194e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1950:	4808      	ldr	r0, [pc, #32]	; (1974 <TIMER_ARINC_init+0x28>)
    1952:	4b09      	ldr	r3, [pc, #36]	; (1978 <TIMER_ARINC_init+0x2c>)
    1954:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1956:	2244      	movs	r2, #68	; 0x44
    1958:	211a      	movs	r1, #26
    195a:	4808      	ldr	r0, [pc, #32]	; (197c <TIMER_ARINC_init+0x30>)
    195c:	4b08      	ldr	r3, [pc, #32]	; (1980 <TIMER_ARINC_init+0x34>)
    195e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <TIMER_ARINC_init+0x38>)
    1962:	4798      	blx	r3
    1964:	4603      	mov	r3, r0
    1966:	461a      	mov	r2, r3
    1968:	4907      	ldr	r1, [pc, #28]	; (1988 <TIMER_ARINC_init+0x3c>)
    196a:	4808      	ldr	r0, [pc, #32]	; (198c <TIMER_ARINC_init+0x40>)
    196c:	4b08      	ldr	r3, [pc, #32]	; (1990 <TIMER_ARINC_init+0x44>)
    196e:	4798      	blx	r3
}
    1970:	bf00      	nop
    1972:	bd80      	pop	{r7, pc}
    1974:	40000800 	.word	0x40000800
    1978:	00000b97 	.word	0x00000b97
    197c:	40001c00 	.word	0x40001c00
    1980:	000009b1 	.word	0x000009b1
    1984:	00008169 	.word	0x00008169
    1988:	4101a000 	.word	0x4101a000
    198c:	20000f18 	.word	0x20000f18
    1990:	00002b79 	.word	0x00002b79

00001994 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    1994:	b580      	push	{r7, lr}
    1996:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    1998:	4808      	ldr	r0, [pc, #32]	; (19bc <TIMER_HVAC_init+0x28>)
    199a:	4b09      	ldr	r3, [pc, #36]	; (19c0 <TIMER_HVAC_init+0x2c>)
    199c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    199e:	2245      	movs	r2, #69	; 0x45
    19a0:	211a      	movs	r1, #26
    19a2:	4808      	ldr	r0, [pc, #32]	; (19c4 <TIMER_HVAC_init+0x30>)
    19a4:	4b08      	ldr	r3, [pc, #32]	; (19c8 <TIMER_HVAC_init+0x34>)
    19a6:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <TIMER_HVAC_init+0x38>)
    19aa:	4798      	blx	r3
    19ac:	4603      	mov	r3, r0
    19ae:	461a      	mov	r2, r3
    19b0:	4907      	ldr	r1, [pc, #28]	; (19d0 <TIMER_HVAC_init+0x3c>)
    19b2:	4808      	ldr	r0, [pc, #32]	; (19d4 <TIMER_HVAC_init+0x40>)
    19b4:	4b08      	ldr	r3, [pc, #32]	; (19d8 <TIMER_HVAC_init+0x44>)
    19b6:	4798      	blx	r3
}
    19b8:	bf00      	nop
    19ba:	bd80      	pop	{r7, pc}
    19bc:	40000800 	.word	0x40000800
    19c0:	00000bb7 	.word	0x00000bb7
    19c4:	40001c00 	.word	0x40001c00
    19c8:	000009b1 	.word	0x000009b1
    19cc:	00008169 	.word	0x00008169
    19d0:	4101c000 	.word	0x4101c000
    19d4:	20000f90 	.word	0x20000f90
    19d8:	00002b79 	.word	0x00002b79

000019dc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    19dc:	b580      	push	{r7, lr}
    19de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    19e0:	4808      	ldr	r0, [pc, #32]	; (1a04 <TIMER_MAINTENANCE_init+0x28>)
    19e2:	4b09      	ldr	r3, [pc, #36]	; (1a08 <TIMER_MAINTENANCE_init+0x2c>)
    19e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19e6:	2246      	movs	r2, #70	; 0x46
    19e8:	211e      	movs	r1, #30
    19ea:	4808      	ldr	r0, [pc, #32]	; (1a0c <TIMER_MAINTENANCE_init+0x30>)
    19ec:	4b08      	ldr	r3, [pc, #32]	; (1a10 <TIMER_MAINTENANCE_init+0x34>)
    19ee:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    19f0:	4b08      	ldr	r3, [pc, #32]	; (1a14 <TIMER_MAINTENANCE_init+0x38>)
    19f2:	4798      	blx	r3
    19f4:	4603      	mov	r3, r0
    19f6:	461a      	mov	r2, r3
    19f8:	4907      	ldr	r1, [pc, #28]	; (1a18 <TIMER_MAINTENANCE_init+0x3c>)
    19fa:	4808      	ldr	r0, [pc, #32]	; (1a1c <TIMER_MAINTENANCE_init+0x40>)
    19fc:	4b08      	ldr	r3, [pc, #32]	; (1a20 <TIMER_MAINTENANCE_init+0x44>)
    19fe:	4798      	blx	r3
}
    1a00:	bf00      	nop
    1a02:	bd80      	pop	{r7, pc}
    1a04:	40000800 	.word	0x40000800
    1a08:	00000bd7 	.word	0x00000bd7
    1a0c:	40001c00 	.word	0x40001c00
    1a10:	000009b1 	.word	0x000009b1
    1a14:	00008169 	.word	0x00008169
    1a18:	42001400 	.word	0x42001400
    1a1c:	20000e7c 	.word	0x20000e7c
    1a20:	00002b79 	.word	0x00002b79

00001a24 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1a28:	4808      	ldr	r0, [pc, #32]	; (1a4c <TIMER_INTERFACE_init+0x28>)
    1a2a:	4b09      	ldr	r3, [pc, #36]	; (1a50 <TIMER_INTERFACE_init+0x2c>)
    1a2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a2e:	2246      	movs	r2, #70	; 0x46
    1a30:	211e      	movs	r1, #30
    1a32:	4808      	ldr	r0, [pc, #32]	; (1a54 <TIMER_INTERFACE_init+0x30>)
    1a34:	4b08      	ldr	r3, [pc, #32]	; (1a58 <TIMER_INTERFACE_init+0x34>)
    1a36:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <TIMER_INTERFACE_init+0x38>)
    1a3a:	4798      	blx	r3
    1a3c:	4603      	mov	r3, r0
    1a3e:	461a      	mov	r2, r3
    1a40:	4907      	ldr	r1, [pc, #28]	; (1a60 <TIMER_INTERFACE_init+0x3c>)
    1a42:	4808      	ldr	r0, [pc, #32]	; (1a64 <TIMER_INTERFACE_init+0x40>)
    1a44:	4b08      	ldr	r3, [pc, #32]	; (1a68 <TIMER_INTERFACE_init+0x44>)
    1a46:	4798      	blx	r3
}
    1a48:	bf00      	nop
    1a4a:	bd80      	pop	{r7, pc}
    1a4c:	40000800 	.word	0x40000800
    1a50:	00000bf7 	.word	0x00000bf7
    1a54:	40001c00 	.word	0x40001c00
    1a58:	000009b1 	.word	0x000009b1
    1a5c:	00008169 	.word	0x00008169
    1a60:	42001800 	.word	0x42001800
    1a64:	20000eb8 	.word	0x20000eb8
    1a68:	00002b79 	.word	0x00002b79

00001a6c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1a6c:	b480      	push	{r7}
    1a6e:	af00      	add	r7, sp, #0
}
    1a70:	bf00      	nop
    1a72:	46bd      	mov	sp, r7
    1a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a78:	4770      	bx	lr
	...

00001a7c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1a7c:	b580      	push	{r7, lr}
    1a7e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1a80:	4804      	ldr	r0, [pc, #16]	; (1a94 <LIVE_PULSE_CLOCK_init+0x18>)
    1a82:	4b05      	ldr	r3, [pc, #20]	; (1a98 <LIVE_PULSE_CLOCK_init+0x1c>)
    1a84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a86:	224b      	movs	r2, #75	; 0x4b
    1a88:	2127      	movs	r1, #39	; 0x27
    1a8a:	4804      	ldr	r0, [pc, #16]	; (1a9c <LIVE_PULSE_CLOCK_init+0x20>)
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <LIVE_PULSE_CLOCK_init+0x24>)
    1a8e:	4798      	blx	r3
}
    1a90:	bf00      	nop
    1a92:	bd80      	pop	{r7, pc}
    1a94:	40000800 	.word	0x40000800
    1a98:	00000c97 	.word	0x00000c97
    1a9c:	40001c00 	.word	0x40001c00
    1aa0:	000009b1 	.word	0x000009b1

00001aa4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1aa4:	b580      	push	{r7, lr}
    1aa6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1aa8:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <LIVE_PULSE_init+0x20>)
    1aaa:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1aac:	4b06      	ldr	r3, [pc, #24]	; (1ac8 <LIVE_PULSE_init+0x24>)
    1aae:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1ab0:	4b06      	ldr	r3, [pc, #24]	; (1acc <LIVE_PULSE_init+0x28>)
    1ab2:	4798      	blx	r3
    1ab4:	4603      	mov	r3, r0
    1ab6:	461a      	mov	r2, r3
    1ab8:	4905      	ldr	r1, [pc, #20]	; (1ad0 <LIVE_PULSE_init+0x2c>)
    1aba:	4806      	ldr	r0, [pc, #24]	; (1ad4 <LIVE_PULSE_init+0x30>)
    1abc:	4b06      	ldr	r3, [pc, #24]	; (1ad8 <LIVE_PULSE_init+0x34>)
    1abe:	4798      	blx	r3
}
    1ac0:	bf00      	nop
    1ac2:	bd80      	pop	{r7, pc}
    1ac4:	00001a7d 	.word	0x00001a7d
    1ac8:	00001a6d 	.word	0x00001a6d
    1acc:	00008179 	.word	0x00008179
    1ad0:	43001800 	.word	0x43001800
    1ad4:	20000ed4 	.word	0x20000ed4
    1ad8:	000023cd 	.word	0x000023cd

00001adc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1adc:	b580      	push	{r7, lr}
    1ade:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1ae0:	2102      	movs	r1, #2
    1ae2:	2018      	movs	r0, #24
    1ae4:	4b0f      	ldr	r3, [pc, #60]	; (1b24 <CDCUSB_PORT_init+0x48>)
    1ae6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1ae8:	2100      	movs	r1, #0
    1aea:	2018      	movs	r0, #24
    1aec:	4b0e      	ldr	r3, [pc, #56]	; (1b28 <CDCUSB_PORT_init+0x4c>)
    1aee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1af0:	2100      	movs	r1, #0
    1af2:	2018      	movs	r0, #24
    1af4:	4b0d      	ldr	r3, [pc, #52]	; (1b2c <CDCUSB_PORT_init+0x50>)
    1af6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1af8:	490d      	ldr	r1, [pc, #52]	; (1b30 <CDCUSB_PORT_init+0x54>)
    1afa:	2018      	movs	r0, #24
    1afc:	4b0d      	ldr	r3, [pc, #52]	; (1b34 <CDCUSB_PORT_init+0x58>)
    1afe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1b00:	2102      	movs	r1, #2
    1b02:	2019      	movs	r0, #25
    1b04:	4b07      	ldr	r3, [pc, #28]	; (1b24 <CDCUSB_PORT_init+0x48>)
    1b06:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1b08:	2100      	movs	r1, #0
    1b0a:	2019      	movs	r0, #25
    1b0c:	4b06      	ldr	r3, [pc, #24]	; (1b28 <CDCUSB_PORT_init+0x4c>)
    1b0e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1b10:	2100      	movs	r1, #0
    1b12:	2019      	movs	r0, #25
    1b14:	4b05      	ldr	r3, [pc, #20]	; (1b2c <CDCUSB_PORT_init+0x50>)
    1b16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1b18:	4907      	ldr	r1, [pc, #28]	; (1b38 <CDCUSB_PORT_init+0x5c>)
    1b1a:	2019      	movs	r0, #25
    1b1c:	4b05      	ldr	r3, [pc, #20]	; (1b34 <CDCUSB_PORT_init+0x58>)
    1b1e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1b20:	bf00      	nop
    1b22:	bd80      	pop	{r7, pc}
    1b24:	000011e5 	.word	0x000011e5
    1b28:	0000121d 	.word	0x0000121d
    1b2c:	00001191 	.word	0x00001191
    1b30:	00180007 	.word	0x00180007
    1b34:	000011c5 	.word	0x000011c5
    1b38:	00190007 	.word	0x00190007

00001b3c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1b40:	2242      	movs	r2, #66	; 0x42
    1b42:	210a      	movs	r1, #10
    1b44:	4805      	ldr	r0, [pc, #20]	; (1b5c <CDCUSB_CLOCK_init+0x20>)
    1b46:	4b06      	ldr	r3, [pc, #24]	; (1b60 <CDCUSB_CLOCK_init+0x24>)
    1b48:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1b4a:	4806      	ldr	r0, [pc, #24]	; (1b64 <CDCUSB_CLOCK_init+0x28>)
    1b4c:	4b06      	ldr	r3, [pc, #24]	; (1b68 <CDCUSB_CLOCK_init+0x2c>)
    1b4e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1b50:	4804      	ldr	r0, [pc, #16]	; (1b64 <CDCUSB_CLOCK_init+0x28>)
    1b52:	4b06      	ldr	r3, [pc, #24]	; (1b6c <CDCUSB_CLOCK_init+0x30>)
    1b54:	4798      	blx	r3
}
    1b56:	bf00      	nop
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	bf00      	nop
    1b5c:	40001c00 	.word	0x40001c00
    1b60:	000009b1 	.word	0x000009b1
    1b64:	40000800 	.word	0x40000800
    1b68:	000009d7 	.word	0x000009d7
    1b6c:	00000b37 	.word	0x00000b37

00001b70 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1b70:	b580      	push	{r7, lr}
    1b72:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1b74:	4b03      	ldr	r3, [pc, #12]	; (1b84 <CDCUSB_init+0x14>)
    1b76:	4798      	blx	r3
	usb_d_init();
    1b78:	4b03      	ldr	r3, [pc, #12]	; (1b88 <CDCUSB_init+0x18>)
    1b7a:	4798      	blx	r3
	CDCUSB_PORT_init();
    1b7c:	4b03      	ldr	r3, [pc, #12]	; (1b8c <CDCUSB_init+0x1c>)
    1b7e:	4798      	blx	r3
}
    1b80:	bf00      	nop
    1b82:	bd80      	pop	{r7, pc}
    1b84:	00001b3d 	.word	0x00001b3d
    1b88:	00003389 	.word	0x00003389
    1b8c:	00001add 	.word	0x00001add

00001b90 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1b90:	b580      	push	{r7, lr}
    1b92:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1b94:	4802      	ldr	r0, [pc, #8]	; (1ba0 <WATCHDOG_CLOCK_init+0x10>)
    1b96:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <WATCHDOG_CLOCK_init+0x14>)
    1b98:	4798      	blx	r3
}
    1b9a:	bf00      	nop
    1b9c:	bd80      	pop	{r7, pc}
    1b9e:	bf00      	nop
    1ba0:	40000800 	.word	0x40000800
    1ba4:	00000a57 	.word	0x00000a57

00001ba8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1ba8:	b580      	push	{r7, lr}
    1baa:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1bac:	4b03      	ldr	r3, [pc, #12]	; (1bbc <WATCHDOG_init+0x14>)
    1bae:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1bb0:	4903      	ldr	r1, [pc, #12]	; (1bc0 <WATCHDOG_init+0x18>)
    1bb2:	4804      	ldr	r0, [pc, #16]	; (1bc4 <WATCHDOG_init+0x1c>)
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <WATCHDOG_init+0x20>)
    1bb6:	4798      	blx	r3
}
    1bb8:	bf00      	nop
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	00001b91 	.word	0x00001b91
    1bc0:	40002000 	.word	0x40002000
    1bc4:	2000100c 	.word	0x2000100c
    1bc8:	00001265 	.word	0x00001265

00001bcc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1bd0:	4904      	ldr	r1, [pc, #16]	; (1be4 <CAN_CCU_PORT_init+0x18>)
    1bd2:	202d      	movs	r0, #45	; 0x2d
    1bd4:	4b04      	ldr	r3, [pc, #16]	; (1be8 <CAN_CCU_PORT_init+0x1c>)
    1bd6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1bd8:	4904      	ldr	r1, [pc, #16]	; (1bec <CAN_CCU_PORT_init+0x20>)
    1bda:	202c      	movs	r0, #44	; 0x2c
    1bdc:	4b02      	ldr	r3, [pc, #8]	; (1be8 <CAN_CCU_PORT_init+0x1c>)
    1bde:	4798      	blx	r3
}
    1be0:	bf00      	nop
    1be2:	bd80      	pop	{r7, pc}
    1be4:	002d0007 	.word	0x002d0007
    1be8:	000011c5 	.word	0x000011c5
    1bec:	002c0007 	.word	0x002c0007

00001bf0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1bf4:	4807      	ldr	r0, [pc, #28]	; (1c14 <CAN_CCU_init+0x24>)
    1bf6:	4b08      	ldr	r3, [pc, #32]	; (1c18 <CAN_CCU_init+0x28>)
    1bf8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bfa:	2243      	movs	r2, #67	; 0x43
    1bfc:	211c      	movs	r1, #28
    1bfe:	4807      	ldr	r0, [pc, #28]	; (1c1c <CAN_CCU_init+0x2c>)
    1c00:	4b07      	ldr	r3, [pc, #28]	; (1c20 <CAN_CCU_init+0x30>)
    1c02:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1c04:	4907      	ldr	r1, [pc, #28]	; (1c24 <CAN_CCU_init+0x34>)
    1c06:	4808      	ldr	r0, [pc, #32]	; (1c28 <CAN_CCU_init+0x38>)
    1c08:	4b08      	ldr	r3, [pc, #32]	; (1c2c <CAN_CCU_init+0x3c>)
    1c0a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1c0c:	4b08      	ldr	r3, [pc, #32]	; (1c30 <CAN_CCU_init+0x40>)
    1c0e:	4798      	blx	r3
}
    1c10:	bf00      	nop
    1c12:	bd80      	pop	{r7, pc}
    1c14:	40000800 	.word	0x40000800
    1c18:	00000a17 	.word	0x00000a17
    1c1c:	40001c00 	.word	0x40001c00
    1c20:	000009b1 	.word	0x000009b1
    1c24:	42000400 	.word	0x42000400
    1c28:	20000ef0 	.word	0x20000ef0
    1c2c:	00001e69 	.word	0x00001e69
    1c30:	00001bcd 	.word	0x00001bcd

00001c34 <system_init>:

void system_init(void)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	af00      	add	r7, sp, #0
	init_mcu();
    1c38:	4b56      	ldr	r3, [pc, #344]	; (1d94 <system_init+0x160>)
    1c3a:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1c3c:	2101      	movs	r1, #1
    1c3e:	200f      	movs	r0, #15
    1c40:	4b55      	ldr	r3, [pc, #340]	; (1d98 <system_init+0x164>)
    1c42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1c44:	2102      	movs	r1, #2
    1c46:	200f      	movs	r0, #15
    1c48:	4b54      	ldr	r3, [pc, #336]	; (1d9c <system_init+0x168>)
    1c4a:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1c4c:	f04f 31ff 	mov.w	r1, #4294967295
    1c50:	200f      	movs	r0, #15
    1c52:	4b53      	ldr	r3, [pc, #332]	; (1da0 <system_init+0x16c>)
    1c54:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1c56:	2101      	movs	r1, #1
    1c58:	2013      	movs	r0, #19
    1c5a:	4b4f      	ldr	r3, [pc, #316]	; (1d98 <system_init+0x164>)
    1c5c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1c5e:	2102      	movs	r1, #2
    1c60:	2013      	movs	r0, #19
    1c62:	4b4e      	ldr	r3, [pc, #312]	; (1d9c <system_init+0x168>)
    1c64:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1c66:	f04f 31ff 	mov.w	r1, #4294967295
    1c6a:	2013      	movs	r0, #19
    1c6c:	4b4c      	ldr	r3, [pc, #304]	; (1da0 <system_init+0x16c>)
    1c6e:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1c70:	2101      	movs	r1, #1
    1c72:	2027      	movs	r0, #39	; 0x27
    1c74:	4b49      	ldr	r3, [pc, #292]	; (1d9c <system_init+0x168>)
    1c76:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1c78:	2102      	movs	r1, #2
    1c7a:	2027      	movs	r0, #39	; 0x27
    1c7c:	4b49      	ldr	r3, [pc, #292]	; (1da4 <system_init+0x170>)
    1c7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1c80:	f04f 31ff 	mov.w	r1, #4294967295
    1c84:	2027      	movs	r0, #39	; 0x27
    1c86:	4b46      	ldr	r3, [pc, #280]	; (1da0 <system_init+0x16c>)
    1c88:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1c8a:	2101      	movs	r1, #1
    1c8c:	203d      	movs	r0, #61	; 0x3d
    1c8e:	4b42      	ldr	r3, [pc, #264]	; (1d98 <system_init+0x164>)
    1c90:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    1c92:	2102      	movs	r1, #2
    1c94:	203d      	movs	r0, #61	; 0x3d
    1c96:	4b41      	ldr	r3, [pc, #260]	; (1d9c <system_init+0x168>)
    1c98:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1c9a:	f04f 31ff 	mov.w	r1, #4294967295
    1c9e:	203d      	movs	r0, #61	; 0x3d
    1ca0:	4b3f      	ldr	r3, [pc, #252]	; (1da0 <system_init+0x16c>)
    1ca2:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1ca4:	2101      	movs	r1, #1
    1ca6:	203f      	movs	r0, #63	; 0x3f
    1ca8:	4b3c      	ldr	r3, [pc, #240]	; (1d9c <system_init+0x168>)
    1caa:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1cac:	2101      	movs	r1, #1
    1cae:	203f      	movs	r0, #63	; 0x3f
    1cb0:	4b3c      	ldr	r3, [pc, #240]	; (1da4 <system_init+0x170>)
    1cb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1cb4:	f04f 31ff 	mov.w	r1, #4294967295
    1cb8:	203f      	movs	r0, #63	; 0x3f
    1cba:	4b39      	ldr	r3, [pc, #228]	; (1da0 <system_init+0x16c>)
    1cbc:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1cbe:	2101      	movs	r1, #1
    1cc0:	2040      	movs	r0, #64	; 0x40
    1cc2:	4b36      	ldr	r3, [pc, #216]	; (1d9c <system_init+0x168>)
    1cc4:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1cc6:	2102      	movs	r1, #2
    1cc8:	2040      	movs	r0, #64	; 0x40
    1cca:	4b36      	ldr	r3, [pc, #216]	; (1da4 <system_init+0x170>)
    1ccc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1cce:	f04f 31ff 	mov.w	r1, #4294967295
    1cd2:	2040      	movs	r0, #64	; 0x40
    1cd4:	4b32      	ldr	r3, [pc, #200]	; (1da0 <system_init+0x16c>)
    1cd6:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1cd8:	2100      	movs	r1, #0
    1cda:	204d      	movs	r0, #77	; 0x4d
    1cdc:	4b2e      	ldr	r3, [pc, #184]	; (1d98 <system_init+0x164>)
    1cde:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1ce0:	2102      	movs	r1, #2
    1ce2:	204d      	movs	r0, #77	; 0x4d
    1ce4:	4b2d      	ldr	r3, [pc, #180]	; (1d9c <system_init+0x168>)
    1ce6:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1ce8:	f04f 31ff 	mov.w	r1, #4294967295
    1cec:	204d      	movs	r0, #77	; 0x4d
    1cee:	4b2c      	ldr	r3, [pc, #176]	; (1da0 <system_init+0x16c>)
    1cf0:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1cf2:	2101      	movs	r1, #1
    1cf4:	204e      	movs	r0, #78	; 0x4e
    1cf6:	4b28      	ldr	r3, [pc, #160]	; (1d98 <system_init+0x164>)
    1cf8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1cfa:	2102      	movs	r1, #2
    1cfc:	204e      	movs	r0, #78	; 0x4e
    1cfe:	4b27      	ldr	r3, [pc, #156]	; (1d9c <system_init+0x168>)
    1d00:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1d02:	f04f 31ff 	mov.w	r1, #4294967295
    1d06:	204e      	movs	r0, #78	; 0x4e
    1d08:	4b25      	ldr	r3, [pc, #148]	; (1da0 <system_init+0x16c>)
    1d0a:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1d0c:	2100      	movs	r1, #0
    1d0e:	204f      	movs	r0, #79	; 0x4f
    1d10:	4b21      	ldr	r3, [pc, #132]	; (1d98 <system_init+0x164>)
    1d12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1d14:	2102      	movs	r1, #2
    1d16:	204f      	movs	r0, #79	; 0x4f
    1d18:	4b20      	ldr	r3, [pc, #128]	; (1d9c <system_init+0x168>)
    1d1a:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1d1c:	f04f 31ff 	mov.w	r1, #4294967295
    1d20:	204f      	movs	r0, #79	; 0x4f
    1d22:	4b1f      	ldr	r3, [pc, #124]	; (1da0 <system_init+0x16c>)
    1d24:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1d26:	2100      	movs	r1, #0
    1d28:	2052      	movs	r0, #82	; 0x52
    1d2a:	4b1b      	ldr	r3, [pc, #108]	; (1d98 <system_init+0x164>)
    1d2c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1d2e:	2102      	movs	r1, #2
    1d30:	2052      	movs	r0, #82	; 0x52
    1d32:	4b1a      	ldr	r3, [pc, #104]	; (1d9c <system_init+0x168>)
    1d34:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1d36:	f04f 31ff 	mov.w	r1, #4294967295
    1d3a:	2052      	movs	r0, #82	; 0x52
    1d3c:	4b18      	ldr	r3, [pc, #96]	; (1da0 <system_init+0x16c>)
    1d3e:	4798      	blx	r3

	CRC_CALC_init();
    1d40:	4b19      	ldr	r3, [pc, #100]	; (1da8 <system_init+0x174>)
    1d42:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1d44:	4b19      	ldr	r3, [pc, #100]	; (1dac <system_init+0x178>)
    1d46:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1d48:	4b19      	ldr	r3, [pc, #100]	; (1db0 <system_init+0x17c>)
    1d4a:	4798      	blx	r3

	QSPI_N25Q256_init();
    1d4c:	4b19      	ldr	r3, [pc, #100]	; (1db4 <system_init+0x180>)
    1d4e:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1d50:	4b19      	ldr	r3, [pc, #100]	; (1db8 <system_init+0x184>)
    1d52:	4798      	blx	r3

	SPI_HI3593_init();
    1d54:	4b19      	ldr	r3, [pc, #100]	; (1dbc <system_init+0x188>)
    1d56:	4798      	blx	r3

	SPI_MEMORIES_init();
    1d58:	4b19      	ldr	r3, [pc, #100]	; (1dc0 <system_init+0x18c>)
    1d5a:	4798      	blx	r3

	SPI_TEMP_init();
    1d5c:	4b19      	ldr	r3, [pc, #100]	; (1dc4 <system_init+0x190>)
    1d5e:	4798      	blx	r3

	I2C_EXPANDER_init();
    1d60:	4b19      	ldr	r3, [pc, #100]	; (1dc8 <system_init+0x194>)
    1d62:	4798      	blx	r3

	I2C_EEPROM_init();
    1d64:	4b19      	ldr	r3, [pc, #100]	; (1dcc <system_init+0x198>)
    1d66:	4798      	blx	r3

	TIMER_USB_init();
    1d68:	4b19      	ldr	r3, [pc, #100]	; (1dd0 <system_init+0x19c>)
    1d6a:	4798      	blx	r3
	TIMER_EVENT_init();
    1d6c:	4b19      	ldr	r3, [pc, #100]	; (1dd4 <system_init+0x1a0>)
    1d6e:	4798      	blx	r3
	TIMER_ARINC_init();
    1d70:	4b19      	ldr	r3, [pc, #100]	; (1dd8 <system_init+0x1a4>)
    1d72:	4798      	blx	r3
	TIMER_HVAC_init();
    1d74:	4b19      	ldr	r3, [pc, #100]	; (1ddc <system_init+0x1a8>)
    1d76:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1d78:	4b19      	ldr	r3, [pc, #100]	; (1de0 <system_init+0x1ac>)
    1d7a:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1d7c:	4b19      	ldr	r3, [pc, #100]	; (1de4 <system_init+0x1b0>)
    1d7e:	4798      	blx	r3
	LIVE_PULSE_init();
    1d80:	4b19      	ldr	r3, [pc, #100]	; (1de8 <system_init+0x1b4>)
    1d82:	4798      	blx	r3

	CDCUSB_init();
    1d84:	4b19      	ldr	r3, [pc, #100]	; (1dec <system_init+0x1b8>)
    1d86:	4798      	blx	r3

	WATCHDOG_init();
    1d88:	4b19      	ldr	r3, [pc, #100]	; (1df0 <system_init+0x1bc>)
    1d8a:	4798      	blx	r3
	CAN_CCU_init();
    1d8c:	4b19      	ldr	r3, [pc, #100]	; (1df4 <system_init+0x1c0>)
    1d8e:	4798      	blx	r3
}
    1d90:	bf00      	nop
    1d92:	bd80      	pop	{r7, pc}
    1d94:	00001255 	.word	0x00001255
    1d98:	0000121d 	.word	0x0000121d
    1d9c:	000011e5 	.word	0x000011e5
    1da0:	000011c5 	.word	0x000011c5
    1da4:	00001191 	.word	0x00001191
    1da8:	000012b5 	.word	0x000012b5
    1dac:	000012e1 	.word	0x000012e1
    1db0:	00001385 	.word	0x00001385
    1db4:	000014c1 	.word	0x000014c1
    1db8:	00001505 	.word	0x00001505
    1dbc:	000015c9 	.word	0x000015c9
    1dc0:	00001695 	.word	0x00001695
    1dc4:	00001761 	.word	0x00001761
    1dc8:	000017f9 	.word	0x000017f9
    1dcc:	00001891 	.word	0x00001891
    1dd0:	000018bd 	.word	0x000018bd
    1dd4:	00001905 	.word	0x00001905
    1dd8:	0000194d 	.word	0x0000194d
    1ddc:	00001995 	.word	0x00001995
    1de0:	000019dd 	.word	0x000019dd
    1de4:	00001a25 	.word	0x00001a25
    1de8:	00001aa5 	.word	0x00001aa5
    1dec:	00001b71 	.word	0x00001b71
    1df0:	00001ba9 	.word	0x00001ba9
    1df4:	00001bf1 	.word	0x00001bf1

00001df8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1df8:	b580      	push	{r7, lr}
    1dfa:	b084      	sub	sp, #16
    1dfc:	af00      	add	r7, sp, #0
    1dfe:	6078      	str	r0, [r7, #4]
    1e00:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1e02:	2300      	movs	r3, #0
    1e04:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	bf14      	ite	ne
    1e0c:	2301      	movne	r3, #1
    1e0e:	2300      	moveq	r3, #0
    1e10:	b2db      	uxtb	r3, r3
    1e12:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1e16:	4911      	ldr	r1, [pc, #68]	; (1e5c <calendar_init+0x64>)
    1e18:	4618      	mov	r0, r3
    1e1a:	4b11      	ldr	r3, [pc, #68]	; (1e60 <calendar_init+0x68>)
    1e1c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	681a      	ldr	r2, [r3, #0]
    1e22:	683b      	ldr	r3, [r7, #0]
    1e24:	429a      	cmp	r2, r3
    1e26:	d101      	bne.n	1e2c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1e28:	2300      	movs	r3, #0
    1e2a:	e013      	b.n	1e54 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d002      	beq.n	1e3a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1e34:	f06f 0311 	mvn.w	r3, #17
    1e38:	e00c      	b.n	1e54 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	683a      	ldr	r2, [r7, #0]
    1e3e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	4618      	mov	r0, r3
    1e44:	4b07      	ldr	r3, [pc, #28]	; (1e64 <calendar_init+0x6c>)
    1e46:	4798      	blx	r3
    1e48:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1e50:	619a      	str	r2, [r3, #24]

	return ret;
    1e52:	68fb      	ldr	r3, [r7, #12]
}
    1e54:	4618      	mov	r0, r3
    1e56:	3710      	adds	r7, #16
    1e58:	46bd      	mov	sp, r7
    1e5a:	bd80      	pop	{r7, pc}
    1e5c:	0000ec84 	.word	0x0000ec84
    1e60:	00003931 	.word	0x00003931
    1e64:	00005b4d 	.word	0x00005b4d

00001e68 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b084      	sub	sp, #16
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	6078      	str	r0, [r7, #4]
    1e70:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	2b00      	cmp	r3, #0
    1e76:	d004      	beq.n	1e82 <can_async_init+0x1a>
    1e78:	683b      	ldr	r3, [r7, #0]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d001      	beq.n	1e82 <can_async_init+0x1a>
    1e7e:	2301      	movs	r3, #1
    1e80:	e000      	b.n	1e84 <can_async_init+0x1c>
    1e82:	2300      	movs	r3, #0
    1e84:	f003 0301 	and.w	r3, r3, #1
    1e88:	b2db      	uxtb	r3, r3
    1e8a:	2241      	movs	r2, #65	; 0x41
    1e8c:	490e      	ldr	r1, [pc, #56]	; (1ec8 <can_async_init+0x60>)
    1e8e:	4618      	mov	r0, r3
    1e90:	4b0e      	ldr	r3, [pc, #56]	; (1ecc <can_async_init+0x64>)
    1e92:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	6839      	ldr	r1, [r7, #0]
    1e98:	4618      	mov	r0, r3
    1e9a:	4b0d      	ldr	r3, [pc, #52]	; (1ed0 <can_async_init+0x68>)
    1e9c:	4798      	blx	r3
    1e9e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1ea0:	68fb      	ldr	r3, [r7, #12]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d001      	beq.n	1eaa <can_async_init+0x42>
		return rc;
    1ea6:	68fb      	ldr	r3, [r7, #12]
    1ea8:	e009      	b.n	1ebe <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1eaa:	687b      	ldr	r3, [r7, #4]
    1eac:	4a09      	ldr	r2, [pc, #36]	; (1ed4 <can_async_init+0x6c>)
    1eae:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	4a09      	ldr	r2, [pc, #36]	; (1ed8 <can_async_init+0x70>)
    1eb4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	4a08      	ldr	r2, [pc, #32]	; (1edc <can_async_init+0x74>)
    1eba:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1ebc:	2300      	movs	r3, #0
}
    1ebe:	4618      	mov	r0, r3
    1ec0:	3710      	adds	r7, #16
    1ec2:	46bd      	mov	sp, r7
    1ec4:	bd80      	pop	{r7, pc}
    1ec6:	bf00      	nop
    1ec8:	0000eca0 	.word	0x0000eca0
    1ecc:	00003931 	.word	0x00003931
    1ed0:	00003e8d 	.word	0x00003e8d
    1ed4:	00001ee1 	.word	0x00001ee1
    1ed8:	00001f05 	.word	0x00001f05
    1edc:	00001f29 	.word	0x00001f29

00001ee0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b084      	sub	sp, #16
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1eec:	68fb      	ldr	r3, [r7, #12]
    1eee:	69db      	ldr	r3, [r3, #28]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d003      	beq.n	1efc <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1ef4:	68fb      	ldr	r3, [r7, #12]
    1ef6:	69db      	ldr	r3, [r3, #28]
    1ef8:	68f8      	ldr	r0, [r7, #12]
    1efa:	4798      	blx	r3
	}
}
    1efc:	bf00      	nop
    1efe:	3710      	adds	r7, #16
    1f00:	46bd      	mov	sp, r7
    1f02:	bd80      	pop	{r7, pc}

00001f04 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1f04:	b580      	push	{r7, lr}
    1f06:	b084      	sub	sp, #16
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1f10:	68fb      	ldr	r3, [r7, #12]
    1f12:	6a1b      	ldr	r3, [r3, #32]
    1f14:	2b00      	cmp	r3, #0
    1f16:	d003      	beq.n	1f20 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	6a1b      	ldr	r3, [r3, #32]
    1f1c:	68f8      	ldr	r0, [r7, #12]
    1f1e:	4798      	blx	r3
	}
}
    1f20:	bf00      	nop
    1f22:	3710      	adds	r7, #16
    1f24:	46bd      	mov	sp, r7
    1f26:	bd80      	pop	{r7, pc}

00001f28 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b084      	sub	sp, #16
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	6078      	str	r0, [r7, #4]
    1f30:	460b      	mov	r3, r1
    1f32:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1f38:	68fb      	ldr	r3, [r7, #12]
    1f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d005      	beq.n	1f4c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1f40:	68fb      	ldr	r3, [r7, #12]
    1f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f44:	78fa      	ldrb	r2, [r7, #3]
    1f46:	4611      	mov	r1, r2
    1f48:	68f8      	ldr	r0, [r7, #12]
    1f4a:	4798      	blx	r3
	}
}
    1f4c:	bf00      	nop
    1f4e:	3710      	adds	r7, #16
    1f50:	46bd      	mov	sp, r7
    1f52:	bd80      	pop	{r7, pc}

00001f54 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	b082      	sub	sp, #8
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d004      	beq.n	1f6e <crc_sync_init+0x1a>
    1f64:	683b      	ldr	r3, [r7, #0]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d001      	beq.n	1f6e <crc_sync_init+0x1a>
    1f6a:	2301      	movs	r3, #1
    1f6c:	e000      	b.n	1f70 <crc_sync_init+0x1c>
    1f6e:	2300      	movs	r3, #0
    1f70:	f003 0301 	and.w	r3, r3, #1
    1f74:	b2db      	uxtb	r3, r3
    1f76:	222b      	movs	r2, #43	; 0x2b
    1f78:	4906      	ldr	r1, [pc, #24]	; (1f94 <crc_sync_init+0x40>)
    1f7a:	4618      	mov	r0, r3
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <crc_sync_init+0x44>)
    1f7e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	6839      	ldr	r1, [r7, #0]
    1f84:	4618      	mov	r0, r3
    1f86:	4b05      	ldr	r3, [pc, #20]	; (1f9c <crc_sync_init+0x48>)
    1f88:	4798      	blx	r3
    1f8a:	4603      	mov	r3, r0
}
    1f8c:	4618      	mov	r0, r3
    1f8e:	3708      	adds	r7, #8
    1f90:	46bd      	mov	sp, r7
    1f92:	bd80      	pop	{r7, pc}
    1f94:	0000ecbc 	.word	0x0000ecbc
    1f98:	00003931 	.word	0x00003931
    1f9c:	0000458d 	.word	0x0000458d

00001fa0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1fa0:	b590      	push	{r4, r7, lr}
    1fa2:	b083      	sub	sp, #12
    1fa4:	af00      	add	r7, sp, #0
    1fa6:	4603      	mov	r3, r0
    1fa8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1faa:	4b07      	ldr	r3, [pc, #28]	; (1fc8 <delay_us+0x28>)
    1fac:	681c      	ldr	r4, [r3, #0]
    1fae:	88fb      	ldrh	r3, [r7, #6]
    1fb0:	4618      	mov	r0, r3
    1fb2:	4b06      	ldr	r3, [pc, #24]	; (1fcc <delay_us+0x2c>)
    1fb4:	4798      	blx	r3
    1fb6:	4603      	mov	r3, r0
    1fb8:	4619      	mov	r1, r3
    1fba:	4620      	mov	r0, r4
    1fbc:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <delay_us+0x30>)
    1fbe:	4798      	blx	r3
}
    1fc0:	bf00      	nop
    1fc2:	370c      	adds	r7, #12
    1fc4:	46bd      	mov	sp, r7
    1fc6:	bd90      	pop	{r4, r7, pc}
    1fc8:	2000058c 	.word	0x2000058c
    1fcc:	000042e5 	.word	0x000042e5
    1fd0:	00004479 	.word	0x00004479

00001fd4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1fd4:	b590      	push	{r4, r7, lr}
    1fd6:	b083      	sub	sp, #12
    1fd8:	af00      	add	r7, sp, #0
    1fda:	4603      	mov	r3, r0
    1fdc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1fde:	4b07      	ldr	r3, [pc, #28]	; (1ffc <delay_ms+0x28>)
    1fe0:	681c      	ldr	r4, [r3, #0]
    1fe2:	88fb      	ldrh	r3, [r7, #6]
    1fe4:	4618      	mov	r0, r3
    1fe6:	4b06      	ldr	r3, [pc, #24]	; (2000 <delay_ms+0x2c>)
    1fe8:	4798      	blx	r3
    1fea:	4603      	mov	r3, r0
    1fec:	4619      	mov	r1, r3
    1fee:	4620      	mov	r0, r4
    1ff0:	4b04      	ldr	r3, [pc, #16]	; (2004 <delay_ms+0x30>)
    1ff2:	4798      	blx	r3
}
    1ff4:	bf00      	nop
    1ff6:	370c      	adds	r7, #12
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bd90      	pop	{r4, r7, pc}
    1ffc:	2000058c 	.word	0x2000058c
    2000:	00004451 	.word	0x00004451
    2004:	00004479 	.word	0x00004479

00002008 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2008:	b580      	push	{r7, lr}
    200a:	af00      	add	r7, sp, #0
	return _event_system_init();
    200c:	4b02      	ldr	r3, [pc, #8]	; (2018 <event_system_init+0x10>)
    200e:	4798      	blx	r3
    2010:	4603      	mov	r3, r0
}
    2012:	4618      	mov	r0, r3
    2014:	bd80      	pop	{r7, pc}
    2016:	bf00      	nop
    2018:	00004bc1 	.word	0x00004bc1

0000201c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    201c:	b580      	push	{r7, lr}
    201e:	b082      	sub	sp, #8
    2020:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2022:	2300      	movs	r3, #0
    2024:	80fb      	strh	r3, [r7, #6]
    2026:	e00e      	b.n	2046 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2028:	88fb      	ldrh	r3, [r7, #6]
    202a:	4a0c      	ldr	r2, [pc, #48]	; (205c <ext_irq_init+0x40>)
    202c:	00db      	lsls	r3, r3, #3
    202e:	4413      	add	r3, r2
    2030:	f04f 32ff 	mov.w	r2, #4294967295
    2034:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2036:	88fb      	ldrh	r3, [r7, #6]
    2038:	4a08      	ldr	r2, [pc, #32]	; (205c <ext_irq_init+0x40>)
    203a:	2100      	movs	r1, #0
    203c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2040:	88fb      	ldrh	r3, [r7, #6]
    2042:	3301      	adds	r3, #1
    2044:	80fb      	strh	r3, [r7, #6]
    2046:	88fb      	ldrh	r3, [r7, #6]
    2048:	2b03      	cmp	r3, #3
    204a:	d9ed      	bls.n	2028 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    204c:	4804      	ldr	r0, [pc, #16]	; (2060 <ext_irq_init+0x44>)
    204e:	4b05      	ldr	r3, [pc, #20]	; (2064 <ext_irq_init+0x48>)
    2050:	4798      	blx	r3
    2052:	4603      	mov	r3, r0
}
    2054:	4618      	mov	r0, r3
    2056:	3708      	adds	r7, #8
    2058:	46bd      	mov	sp, r7
    205a:	bd80      	pop	{r7, pc}
    205c:	20000590 	.word	0x20000590
    2060:	00002069 	.word	0x00002069
    2064:	00004895 	.word	0x00004895

00002068 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2070:	2300      	movs	r3, #0
    2072:	73fb      	strb	r3, [r7, #15]
    2074:	2304      	movs	r3, #4
    2076:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2078:	e02a      	b.n	20d0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    207a:	7bba      	ldrb	r2, [r7, #14]
    207c:	7bfb      	ldrb	r3, [r7, #15]
    207e:	4413      	add	r3, r2
    2080:	105b      	asrs	r3, r3, #1
    2082:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2084:	7b7b      	ldrb	r3, [r7, #13]
    2086:	2b03      	cmp	r3, #3
    2088:	d827      	bhi.n	20da <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    208a:	7b7b      	ldrb	r3, [r7, #13]
    208c:	4a16      	ldr	r2, [pc, #88]	; (20e8 <process_ext_irq+0x80>)
    208e:	00db      	lsls	r3, r3, #3
    2090:	4413      	add	r3, r2
    2092:	685a      	ldr	r2, [r3, #4]
    2094:	687b      	ldr	r3, [r7, #4]
    2096:	429a      	cmp	r2, r3
    2098:	d10b      	bne.n	20b2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    209a:	7b7b      	ldrb	r3, [r7, #13]
    209c:	4a12      	ldr	r2, [pc, #72]	; (20e8 <process_ext_irq+0x80>)
    209e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20a2:	2b00      	cmp	r3, #0
    20a4:	d01b      	beq.n	20de <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    20a6:	7b7b      	ldrb	r3, [r7, #13]
    20a8:	4a0f      	ldr	r2, [pc, #60]	; (20e8 <process_ext_irq+0x80>)
    20aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20ae:	4798      	blx	r3
			}
			return;
    20b0:	e015      	b.n	20de <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    20b2:	7b7b      	ldrb	r3, [r7, #13]
    20b4:	4a0c      	ldr	r2, [pc, #48]	; (20e8 <process_ext_irq+0x80>)
    20b6:	00db      	lsls	r3, r3, #3
    20b8:	4413      	add	r3, r2
    20ba:	685a      	ldr	r2, [r3, #4]
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	429a      	cmp	r2, r3
    20c0:	d203      	bcs.n	20ca <process_ext_irq+0x62>
			lower = middle + 1;
    20c2:	7b7b      	ldrb	r3, [r7, #13]
    20c4:	3301      	adds	r3, #1
    20c6:	73fb      	strb	r3, [r7, #15]
    20c8:	e002      	b.n	20d0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    20ca:	7b7b      	ldrb	r3, [r7, #13]
    20cc:	3b01      	subs	r3, #1
    20ce:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    20d0:	7bba      	ldrb	r2, [r7, #14]
    20d2:	7bfb      	ldrb	r3, [r7, #15]
    20d4:	429a      	cmp	r2, r3
    20d6:	d2d0      	bcs.n	207a <process_ext_irq+0x12>
    20d8:	e002      	b.n	20e0 <process_ext_irq+0x78>
			return;
    20da:	bf00      	nop
    20dc:	e000      	b.n	20e0 <process_ext_irq+0x78>
			return;
    20de:	bf00      	nop
		}
	}
}
    20e0:	3710      	adds	r7, #16
    20e2:	46bd      	mov	sp, r7
    20e4:	bd80      	pop	{r7, pc}
    20e6:	bf00      	nop
    20e8:	20000590 	.word	0x20000590

000020ec <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	b084      	sub	sp, #16
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	885b      	ldrh	r3, [r3, #2]
    20fc:	b29b      	uxth	r3, r3
    20fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2102:	2b00      	cmp	r3, #0
    2104:	d107      	bne.n	2116 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    2106:	68fb      	ldr	r3, [r7, #12]
    2108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    210a:	2b00      	cmp	r3, #0
    210c:	d003      	beq.n	2116 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    210e:	68fb      	ldr	r3, [r7, #12]
    2110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2112:	68f8      	ldr	r0, [r7, #12]
    2114:	4798      	blx	r3
		}
	}
}
    2116:	bf00      	nop
    2118:	3710      	adds	r7, #16
    211a:	46bd      	mov	sp, r7
    211c:	bd80      	pop	{r7, pc}

0000211e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    211e:	b580      	push	{r7, lr}
    2120:	b084      	sub	sp, #16
    2122:	af00      	add	r7, sp, #0
    2124:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	885b      	ldrh	r3, [r3, #2]
    212e:	b29b      	uxth	r3, r3
    2130:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2134:	2b00      	cmp	r3, #0
    2136:	d107      	bne.n	2148 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    2138:	68fb      	ldr	r3, [r7, #12]
    213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    213c:	2b00      	cmp	r3, #0
    213e:	d003      	beq.n	2148 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2140:	68fb      	ldr	r3, [r7, #12]
    2142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2144:	68f8      	ldr	r0, [r7, #12]
    2146:	4798      	blx	r3
		}
	}
}
    2148:	bf00      	nop
    214a:	3710      	adds	r7, #16
    214c:	46bd      	mov	sp, r7
    214e:	bd80      	pop	{r7, pc}

00002150 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2150:	b580      	push	{r7, lr}
    2152:	b084      	sub	sp, #16
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
    2158:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    215e:	687b      	ldr	r3, [r7, #4]
    2160:	885b      	ldrh	r3, [r3, #2]
    2162:	b29b      	uxth	r3, r3
    2164:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2168:	2b00      	cmp	r3, #0
    216a:	d108      	bne.n	217e <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    216c:	68fb      	ldr	r3, [r7, #12]
    216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2170:	2b00      	cmp	r3, #0
    2172:	d004      	beq.n	217e <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2174:	68fb      	ldr	r3, [r7, #12]
    2176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2178:	6839      	ldr	r1, [r7, #0]
    217a:	68f8      	ldr	r0, [r7, #12]
    217c:	4798      	blx	r3
		}
	}
}
    217e:	bf00      	nop
    2180:	3710      	adds	r7, #16
    2182:	46bd      	mov	sp, r7
    2184:	bd80      	pop	{r7, pc}
	...

00002188 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2188:	b580      	push	{r7, lr}
    218a:	b08a      	sub	sp, #40	; 0x28
    218c:	af00      	add	r7, sp, #0
    218e:	60f8      	str	r0, [r7, #12]
    2190:	60b9      	str	r1, [r7, #8]
    2192:	4613      	mov	r3, r2
    2194:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2196:	68fb      	ldr	r3, [r7, #12]
    2198:	3b28      	subs	r3, #40	; 0x28
    219a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    219e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    21a0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    21a2:	88fb      	ldrh	r3, [r7, #6]
    21a4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    21a6:	f248 0301 	movw	r3, #32769	; 0x8001
    21aa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    21ac:	68bb      	ldr	r3, [r7, #8]
    21ae:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    21b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21b2:	f107 0214 	add.w	r2, r7, #20
    21b6:	4611      	mov	r1, r2
    21b8:	4618      	mov	r0, r3
    21ba:	4b06      	ldr	r3, [pc, #24]	; (21d4 <i2c_m_async_read+0x4c>)
    21bc:	4798      	blx	r3
    21be:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    21c0:	6a3b      	ldr	r3, [r7, #32]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d001      	beq.n	21ca <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    21c6:	6a3b      	ldr	r3, [r7, #32]
    21c8:	e000      	b.n	21cc <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    21ca:	88fb      	ldrh	r3, [r7, #6]
}
    21cc:	4618      	mov	r0, r3
    21ce:	3728      	adds	r7, #40	; 0x28
    21d0:	46bd      	mov	sp, r7
    21d2:	bd80      	pop	{r7, pc}
    21d4:	00006b39 	.word	0x00006b39

000021d8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    21d8:	b580      	push	{r7, lr}
    21da:	b08a      	sub	sp, #40	; 0x28
    21dc:	af00      	add	r7, sp, #0
    21de:	60f8      	str	r0, [r7, #12]
    21e0:	60b9      	str	r1, [r7, #8]
    21e2:	4613      	mov	r3, r2
    21e4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	3b28      	subs	r3, #40	; 0x28
    21ea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    21ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    21f0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    21f2:	88fb      	ldrh	r3, [r7, #6]
    21f4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    21f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21fa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    21fc:	68bb      	ldr	r3, [r7, #8]
    21fe:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2202:	f107 0214 	add.w	r2, r7, #20
    2206:	4611      	mov	r1, r2
    2208:	4618      	mov	r0, r3
    220a:	4b06      	ldr	r3, [pc, #24]	; (2224 <i2c_m_async_write+0x4c>)
    220c:	4798      	blx	r3
    220e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2210:	6a3b      	ldr	r3, [r7, #32]
    2212:	2b00      	cmp	r3, #0
    2214:	d001      	beq.n	221a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2216:	6a3b      	ldr	r3, [r7, #32]
    2218:	e000      	b.n	221c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    221a:	88fb      	ldrh	r3, [r7, #6]
}
    221c:	4618      	mov	r0, r3
    221e:	3728      	adds	r7, #40	; 0x28
    2220:	46bd      	mov	sp, r7
    2222:	bd80      	pop	{r7, pc}
    2224:	00006b39 	.word	0x00006b39

00002228 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    2228:	b580      	push	{r7, lr}
    222a:	b084      	sub	sp, #16
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
    2230:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2b00      	cmp	r3, #0
    2236:	bf14      	ite	ne
    2238:	2301      	movne	r3, #1
    223a:	2300      	moveq	r3, #0
    223c:	b2db      	uxtb	r3, r3
    223e:	2289      	movs	r2, #137	; 0x89
    2240:	4915      	ldr	r1, [pc, #84]	; (2298 <i2c_m_async_init+0x70>)
    2242:	4618      	mov	r0, r3
    2244:	4b15      	ldr	r3, [pc, #84]	; (229c <i2c_m_async_init+0x74>)
    2246:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	6839      	ldr	r1, [r7, #0]
    224c:	4618      	mov	r0, r3
    224e:	4b14      	ldr	r3, [pc, #80]	; (22a0 <i2c_m_async_init+0x78>)
    2250:	4798      	blx	r3
    2252:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2254:	68fb      	ldr	r3, [r7, #12]
    2256:	2b00      	cmp	r3, #0
    2258:	d001      	beq.n	225e <i2c_m_async_init+0x36>
		return init_status;
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	e018      	b.n	2290 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	4a10      	ldr	r2, [pc, #64]	; (22a4 <i2c_m_async_init+0x7c>)
    2262:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	4a10      	ldr	r2, [pc, #64]	; (22a8 <i2c_m_async_init+0x80>)
    2268:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	4a0f      	ldr	r2, [pc, #60]	; (22ac <i2c_m_async_init+0x84>)
    226e:	2101      	movs	r1, #1
    2270:	4618      	mov	r0, r3
    2272:	4b0f      	ldr	r3, [pc, #60]	; (22b0 <i2c_m_async_init+0x88>)
    2274:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	4a0e      	ldr	r2, [pc, #56]	; (22b4 <i2c_m_async_init+0x8c>)
    227a:	2102      	movs	r1, #2
    227c:	4618      	mov	r0, r3
    227e:	4b0c      	ldr	r3, [pc, #48]	; (22b0 <i2c_m_async_init+0x88>)
    2280:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	4a0c      	ldr	r2, [pc, #48]	; (22b8 <i2c_m_async_init+0x90>)
    2286:	2100      	movs	r1, #0
    2288:	4618      	mov	r0, r3
    228a:	4b09      	ldr	r3, [pc, #36]	; (22b0 <i2c_m_async_init+0x88>)
    228c:	4798      	blx	r3

	return ERR_NONE;
    228e:	2300      	movs	r3, #0
}
    2290:	4618      	mov	r0, r3
    2292:	3710      	adds	r7, #16
    2294:	46bd      	mov	sp, r7
    2296:	bd80      	pop	{r7, pc}
    2298:	0000ecd8 	.word	0x0000ecd8
    229c:	00003931 	.word	0x00003931
    22a0:	00006989 	.word	0x00006989
    22a4:	00002189 	.word	0x00002189
    22a8:	000021d9 	.word	0x000021d9
    22ac:	000020ed 	.word	0x000020ed
    22b0:	00006c0d 	.word	0x00006c0d
    22b4:	0000211f 	.word	0x0000211f
    22b8:	00002151 	.word	0x00002151

000022bc <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b084      	sub	sp, #16
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	2b00      	cmp	r3, #0
    22c8:	bf14      	ite	ne
    22ca:	2301      	movne	r3, #1
    22cc:	2300      	moveq	r3, #0
    22ce:	b2db      	uxtb	r3, r3
    22d0:	22b9      	movs	r2, #185	; 0xb9
    22d2:	4911      	ldr	r1, [pc, #68]	; (2318 <i2c_m_async_enable+0x5c>)
    22d4:	4618      	mov	r0, r3
    22d6:	4b11      	ldr	r3, [pc, #68]	; (231c <i2c_m_async_enable+0x60>)
    22d8:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	4618      	mov	r0, r3
    22de:	4b10      	ldr	r3, [pc, #64]	; (2320 <i2c_m_async_enable+0x64>)
    22e0:	4798      	blx	r3
    22e2:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d111      	bne.n	230e <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	2201      	movs	r2, #1
    22ee:	2101      	movs	r1, #1
    22f0:	4618      	mov	r0, r3
    22f2:	4b0c      	ldr	r3, [pc, #48]	; (2324 <i2c_m_async_enable+0x68>)
    22f4:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	2201      	movs	r2, #1
    22fa:	2102      	movs	r1, #2
    22fc:	4618      	mov	r0, r3
    22fe:	4b09      	ldr	r3, [pc, #36]	; (2324 <i2c_m_async_enable+0x68>)
    2300:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    2302:	687b      	ldr	r3, [r7, #4]
    2304:	2201      	movs	r2, #1
    2306:	2100      	movs	r1, #0
    2308:	4618      	mov	r0, r3
    230a:	4b06      	ldr	r3, [pc, #24]	; (2324 <i2c_m_async_enable+0x68>)
    230c:	4798      	blx	r3
	}
	return rc;
    230e:	68fb      	ldr	r3, [r7, #12]
}
    2310:	4618      	mov	r0, r3
    2312:	3710      	adds	r7, #16
    2314:	46bd      	mov	sp, r7
    2316:	bd80      	pop	{r7, pc}
    2318:	0000ecd8 	.word	0x0000ecd8
    231c:	00003931 	.word	0x00003931
    2320:	00006925 	.word	0x00006925
    2324:	00006c51 	.word	0x00006c51

00002328 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    2328:	b480      	push	{r7}
    232a:	b085      	sub	sp, #20
    232c:	af00      	add	r7, sp, #0
    232e:	60f8      	str	r0, [r7, #12]
    2330:	460b      	mov	r3, r1
    2332:	607a      	str	r2, [r7, #4]
    2334:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2336:	897b      	ldrh	r3, [r7, #10]
    2338:	f3c3 0309 	ubfx	r3, r3, #0, #10
    233c:	b21a      	sxth	r2, r3
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	b21b      	sxth	r3, r3
    2342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2346:	b21b      	sxth	r3, r3
    2348:	4313      	orrs	r3, r2
    234a:	b21b      	sxth	r3, r3
    234c:	b29a      	uxth	r2, r3
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	879a      	strh	r2, [r3, #60]	; 0x3c
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    2356:	4618      	mov	r0, r3
    2358:	3714      	adds	r7, #20
    235a:	46bd      	mov	sp, r7
    235c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2360:	4770      	bx	lr

00002362 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    2362:	b480      	push	{r7}
    2364:	b085      	sub	sp, #20
    2366:	af00      	add	r7, sp, #0
    2368:	60f8      	str	r0, [r7, #12]
    236a:	460b      	mov	r3, r1
    236c:	607a      	str	r2, [r7, #4]
    236e:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    2370:	7afb      	ldrb	r3, [r7, #11]
    2372:	2b01      	cmp	r3, #1
    2374:	d007      	beq.n	2386 <i2c_m_async_register_callback+0x24>
    2376:	2b02      	cmp	r3, #2
    2378:	d009      	beq.n	238e <i2c_m_async_register_callback+0x2c>
    237a:	2b00      	cmp	r3, #0
    237c:	d10b      	bne.n	2396 <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	687a      	ldr	r2, [r7, #4]
    2382:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    2384:	e00a      	b.n	239c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    2386:	68fb      	ldr	r3, [r7, #12]
    2388:	687a      	ldr	r2, [r7, #4]
    238a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    238c:	e006      	b.n	239c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	687a      	ldr	r2, [r7, #4]
    2392:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    2394:	e002      	b.n	239c <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    2396:	f06f 030c 	mvn.w	r3, #12
    239a:	e000      	b.n	239e <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    239c:	2300      	movs	r3, #0
}
    239e:	4618      	mov	r0, r3
    23a0:	3714      	adds	r7, #20
    23a2:	46bd      	mov	sp, r7
    23a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23a8:	4770      	bx	lr

000023aa <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    23aa:	b480      	push	{r7}
    23ac:	b083      	sub	sp, #12
    23ae:	af00      	add	r7, sp, #0
    23b0:	6078      	str	r0, [r7, #4]
    23b2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    23ba:	683b      	ldr	r3, [r7, #0]
    23bc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    23be:	2300      	movs	r3, #0
}
    23c0:	4618      	mov	r0, r3
    23c2:	370c      	adds	r7, #12
    23c4:	46bd      	mov	sp, r7
    23c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ca:	4770      	bx	lr

000023cc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    23cc:	b580      	push	{r7, lr}
    23ce:	b084      	sub	sp, #16
    23d0:	af00      	add	r7, sp, #0
    23d2:	60f8      	str	r0, [r7, #12]
    23d4:	60b9      	str	r1, [r7, #8]
    23d6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	2b00      	cmp	r3, #0
    23dc:	d004      	beq.n	23e8 <pwm_init+0x1c>
    23de:	68bb      	ldr	r3, [r7, #8]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d001      	beq.n	23e8 <pwm_init+0x1c>
    23e4:	2301      	movs	r3, #1
    23e6:	e000      	b.n	23ea <pwm_init+0x1e>
    23e8:	2300      	movs	r3, #0
    23ea:	f003 0301 	and.w	r3, r3, #1
    23ee:	b2db      	uxtb	r3, r3
    23f0:	2233      	movs	r2, #51	; 0x33
    23f2:	490a      	ldr	r1, [pc, #40]	; (241c <pwm_init+0x50>)
    23f4:	4618      	mov	r0, r3
    23f6:	4b0a      	ldr	r3, [pc, #40]	; (2420 <pwm_init+0x54>)
    23f8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	68b9      	ldr	r1, [r7, #8]
    23fe:	4618      	mov	r0, r3
    2400:	4b08      	ldr	r3, [pc, #32]	; (2424 <pwm_init+0x58>)
    2402:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2404:	68fb      	ldr	r3, [r7, #12]
    2406:	4a08      	ldr	r2, [pc, #32]	; (2428 <pwm_init+0x5c>)
    2408:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	4a07      	ldr	r2, [pc, #28]	; (242c <pwm_init+0x60>)
    240e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2410:	2300      	movs	r3, #0
}
    2412:	4618      	mov	r0, r3
    2414:	3710      	adds	r7, #16
    2416:	46bd      	mov	sp, r7
    2418:	bd80      	pop	{r7, pc}
    241a:	bf00      	nop
    241c:	0000ecf8 	.word	0x0000ecf8
    2420:	00003931 	.word	0x00003931
    2424:	00007ead 	.word	0x00007ead
    2428:	00002485 	.word	0x00002485
    242c:	000024a9 	.word	0x000024a9

00002430 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2430:	b580      	push	{r7, lr}
    2432:	b082      	sub	sp, #8
    2434:	af00      	add	r7, sp, #0
    2436:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2438:	687b      	ldr	r3, [r7, #4]
    243a:	2b00      	cmp	r3, #0
    243c:	bf14      	ite	ne
    243e:	2301      	movne	r3, #1
    2440:	2300      	moveq	r3, #0
    2442:	b2db      	uxtb	r3, r3
    2444:	224a      	movs	r2, #74	; 0x4a
    2446:	490b      	ldr	r1, [pc, #44]	; (2474 <pwm_enable+0x44>)
    2448:	4618      	mov	r0, r3
    244a:	4b0b      	ldr	r3, [pc, #44]	; (2478 <pwm_enable+0x48>)
    244c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	4618      	mov	r0, r3
    2452:	4b0a      	ldr	r3, [pc, #40]	; (247c <pwm_enable+0x4c>)
    2454:	4798      	blx	r3
    2456:	4603      	mov	r3, r0
    2458:	2b00      	cmp	r3, #0
    245a:	d002      	beq.n	2462 <pwm_enable+0x32>
		return ERR_DENIED;
    245c:	f06f 0310 	mvn.w	r3, #16
    2460:	e004      	b.n	246c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2462:	687b      	ldr	r3, [r7, #4]
    2464:	4618      	mov	r0, r3
    2466:	4b06      	ldr	r3, [pc, #24]	; (2480 <pwm_enable+0x50>)
    2468:	4798      	blx	r3

	return ERR_NONE;
    246a:	2300      	movs	r3, #0
}
    246c:	4618      	mov	r0, r3
    246e:	3708      	adds	r7, #8
    2470:	46bd      	mov	sp, r7
    2472:	bd80      	pop	{r7, pc}
    2474:	0000ecf8 	.word	0x0000ecf8
    2478:	00003931 	.word	0x00003931
    247c:	00008149 	.word	0x00008149
    2480:	000080e9 	.word	0x000080e9

00002484 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2484:	b580      	push	{r7, lr}
    2486:	b084      	sub	sp, #16
    2488:	af00      	add	r7, sp, #0
    248a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    248c:	687b      	ldr	r3, [r7, #4]
    248e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2490:	68fb      	ldr	r3, [r7, #12]
    2492:	695b      	ldr	r3, [r3, #20]
    2494:	2b00      	cmp	r3, #0
    2496:	d003      	beq.n	24a0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2498:	68fb      	ldr	r3, [r7, #12]
    249a:	695b      	ldr	r3, [r3, #20]
    249c:	68f8      	ldr	r0, [r7, #12]
    249e:	4798      	blx	r3
	}
}
    24a0:	bf00      	nop
    24a2:	3710      	adds	r7, #16
    24a4:	46bd      	mov	sp, r7
    24a6:	bd80      	pop	{r7, pc}

000024a8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	b084      	sub	sp, #16
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    24b4:	68fb      	ldr	r3, [r7, #12]
    24b6:	699b      	ldr	r3, [r3, #24]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d003      	beq.n	24c4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    24bc:	68fb      	ldr	r3, [r7, #12]
    24be:	699b      	ldr	r3, [r3, #24]
    24c0:	68f8      	ldr	r0, [r7, #12]
    24c2:	4798      	blx	r3
	}
}
    24c4:	bf00      	nop
    24c6:	3710      	adds	r7, #16
    24c8:	46bd      	mov	sp, r7
    24ca:	bd80      	pop	{r7, pc}

000024cc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b082      	sub	sp, #8
    24d0:	af00      	add	r7, sp, #0
    24d2:	6078      	str	r0, [r7, #4]
    24d4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	2b00      	cmp	r3, #0
    24da:	d004      	beq.n	24e6 <qspi_sync_init+0x1a>
    24dc:	683b      	ldr	r3, [r7, #0]
    24de:	2b00      	cmp	r3, #0
    24e0:	d001      	beq.n	24e6 <qspi_sync_init+0x1a>
    24e2:	2301      	movs	r3, #1
    24e4:	e000      	b.n	24e8 <qspi_sync_init+0x1c>
    24e6:	2300      	movs	r3, #0
    24e8:	f003 0301 	and.w	r3, r3, #1
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2231      	movs	r2, #49	; 0x31
    24f0:	4906      	ldr	r1, [pc, #24]	; (250c <qspi_sync_init+0x40>)
    24f2:	4618      	mov	r0, r3
    24f4:	4b06      	ldr	r3, [pc, #24]	; (2510 <qspi_sync_init+0x44>)
    24f6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	6839      	ldr	r1, [r7, #0]
    24fc:	4618      	mov	r0, r3
    24fe:	4b05      	ldr	r3, [pc, #20]	; (2514 <qspi_sync_init+0x48>)
    2500:	4798      	blx	r3
    2502:	4603      	mov	r3, r0
}
    2504:	4618      	mov	r0, r3
    2506:	3708      	adds	r7, #8
    2508:	46bd      	mov	sp, r7
    250a:	bd80      	pop	{r7, pc}
    250c:	0000ed10 	.word	0x0000ed10
    2510:	00003931 	.word	0x00003931
    2514:	00005789 	.word	0x00005789

00002518 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2518:	b580      	push	{r7, lr}
    251a:	b082      	sub	sp, #8
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	2b00      	cmp	r3, #0
    2524:	bf14      	ite	ne
    2526:	2301      	movne	r3, #1
    2528:	2300      	moveq	r3, #0
    252a:	b2db      	uxtb	r3, r3
    252c:	223f      	movs	r2, #63	; 0x3f
    252e:	4906      	ldr	r1, [pc, #24]	; (2548 <qspi_sync_enable+0x30>)
    2530:	4618      	mov	r0, r3
    2532:	4b06      	ldr	r3, [pc, #24]	; (254c <qspi_sync_enable+0x34>)
    2534:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	4618      	mov	r0, r3
    253a:	4b05      	ldr	r3, [pc, #20]	; (2550 <qspi_sync_enable+0x38>)
    253c:	4798      	blx	r3
    253e:	4603      	mov	r3, r0
}
    2540:	4618      	mov	r0, r3
    2542:	3708      	adds	r7, #8
    2544:	46bd      	mov	sp, r7
    2546:	bd80      	pop	{r7, pc}
    2548:	0000ed10 	.word	0x0000ed10
    254c:	00003931 	.word	0x00003931
    2550:	000057fd 	.word	0x000057fd

00002554 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2554:	b580      	push	{r7, lr}
    2556:	b082      	sub	sp, #8
    2558:	af00      	add	r7, sp, #0
    255a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	2b00      	cmp	r3, #0
    2560:	bf14      	ite	ne
    2562:	2301      	movne	r3, #1
    2564:	2300      	moveq	r3, #0
    2566:	b2db      	uxtb	r3, r3
    2568:	2246      	movs	r2, #70	; 0x46
    256a:	4906      	ldr	r1, [pc, #24]	; (2584 <qspi_sync_disable+0x30>)
    256c:	4618      	mov	r0, r3
    256e:	4b06      	ldr	r3, [pc, #24]	; (2588 <qspi_sync_disable+0x34>)
    2570:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	4618      	mov	r0, r3
    2576:	4b05      	ldr	r3, [pc, #20]	; (258c <qspi_sync_disable+0x38>)
    2578:	4798      	blx	r3
    257a:	4603      	mov	r3, r0
}
    257c:	4618      	mov	r0, r3
    257e:	3708      	adds	r7, #8
    2580:	46bd      	mov	sp, r7
    2582:	bd80      	pop	{r7, pc}
    2584:	0000ed10 	.word	0x0000ed10
    2588:	00003931 	.word	0x00003931
    258c:	00005821 	.word	0x00005821

00002590 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2590:	b580      	push	{r7, lr}
    2592:	b082      	sub	sp, #8
    2594:	af00      	add	r7, sp, #0
    2596:	6078      	str	r0, [r7, #4]
    2598:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    259a:	687b      	ldr	r3, [r7, #4]
    259c:	2b00      	cmp	r3, #0
    259e:	d004      	beq.n	25aa <qspi_sync_serial_run_command+0x1a>
    25a0:	683b      	ldr	r3, [r7, #0]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d001      	beq.n	25aa <qspi_sync_serial_run_command+0x1a>
    25a6:	2301      	movs	r3, #1
    25a8:	e000      	b.n	25ac <qspi_sync_serial_run_command+0x1c>
    25aa:	2300      	movs	r3, #0
    25ac:	f003 0301 	and.w	r3, r3, #1
    25b0:	b2db      	uxtb	r3, r3
    25b2:	224d      	movs	r2, #77	; 0x4d
    25b4:	4906      	ldr	r1, [pc, #24]	; (25d0 <qspi_sync_serial_run_command+0x40>)
    25b6:	4618      	mov	r0, r3
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <qspi_sync_serial_run_command+0x44>)
    25ba:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6839      	ldr	r1, [r7, #0]
    25c0:	4618      	mov	r0, r3
    25c2:	4b05      	ldr	r3, [pc, #20]	; (25d8 <qspi_sync_serial_run_command+0x48>)
    25c4:	4798      	blx	r3
    25c6:	4603      	mov	r3, r0
}
    25c8:	4618      	mov	r0, r3
    25ca:	3708      	adds	r7, #8
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}
    25d0:	0000ed10 	.word	0x0000ed10
    25d4:	00003931 	.word	0x00003931
    25d8:	0000596d 	.word	0x0000596d

000025dc <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    25dc:	b580      	push	{r7, lr}
    25de:	b084      	sub	sp, #16
    25e0:	af00      	add	r7, sp, #0
    25e2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	3b04      	subs	r3, #4
    25e8:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	791b      	ldrb	r3, [r3, #4]
    25ee:	2b01      	cmp	r3, #1
    25f0:	d80e      	bhi.n	2610 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    25f2:	68fb      	ldr	r3, [r7, #12]
    25f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    25f6:	68fb      	ldr	r3, [r7, #12]
    25f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25fa:	1c58      	adds	r0, r3, #1
    25fc:	68f9      	ldr	r1, [r7, #12]
    25fe:	6448      	str	r0, [r1, #68]	; 0x44
    2600:	4413      	add	r3, r2
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	b29b      	uxth	r3, r3
    2606:	4619      	mov	r1, r3
    2608:	6878      	ldr	r0, [r7, #4]
    260a:	4b11      	ldr	r3, [pc, #68]	; (2650 <_spi_dev_tx+0x74>)
    260c:	4798      	blx	r3
    260e:	e00d      	b.n	262c <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    2610:	68fb      	ldr	r3, [r7, #12]
    2612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2614:	68fb      	ldr	r3, [r7, #12]
    2616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2618:	1c58      	adds	r0, r3, #1
    261a:	68f9      	ldr	r1, [r7, #12]
    261c:	6448      	str	r0, [r1, #68]	; 0x44
    261e:	005b      	lsls	r3, r3, #1
    2620:	4413      	add	r3, r2
    2622:	881b      	ldrh	r3, [r3, #0]
    2624:	4619      	mov	r1, r3
    2626:	6878      	ldr	r0, [r7, #4]
    2628:	4b09      	ldr	r3, [pc, #36]	; (2650 <_spi_dev_tx+0x74>)
    262a:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    262c:	68fb      	ldr	r3, [r7, #12]
    262e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2634:	429a      	cmp	r2, r3
    2636:	d107      	bne.n	2648 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    2638:	2100      	movs	r1, #0
    263a:	6878      	ldr	r0, [r7, #4]
    263c:	4b05      	ldr	r3, [pc, #20]	; (2654 <_spi_dev_tx+0x78>)
    263e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    2640:	2101      	movs	r1, #1
    2642:	6878      	ldr	r0, [r7, #4]
    2644:	4b04      	ldr	r3, [pc, #16]	; (2658 <_spi_dev_tx+0x7c>)
    2646:	4798      	blx	r3
	}
}
    2648:	bf00      	nop
    264a:	3710      	adds	r7, #16
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}
    2650:	0000775d 	.word	0x0000775d
    2654:	00007621 	.word	0x00007621
    2658:	000076f5 	.word	0x000076f5

0000265c <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    265c:	b590      	push	{r4, r7, lr}
    265e:	b085      	sub	sp, #20
    2660:	af00      	add	r7, sp, #0
    2662:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	3b04      	subs	r3, #4
    2668:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    266a:	68fb      	ldr	r3, [r7, #12]
    266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    266e:	2b00      	cmp	r3, #0
    2670:	d021      	beq.n	26b6 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	791b      	ldrb	r3, [r3, #4]
    2676:	2b01      	cmp	r3, #1
    2678:	d80e      	bhi.n	2698 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    267a:	68fb      	ldr	r3, [r7, #12]
    267c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    267e:	68fb      	ldr	r3, [r7, #12]
    2680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2682:	1c58      	adds	r0, r3, #1
    2684:	68f9      	ldr	r1, [r7, #12]
    2686:	6448      	str	r0, [r1, #68]	; 0x44
    2688:	18d4      	adds	r4, r2, r3
    268a:	6878      	ldr	r0, [r7, #4]
    268c:	4b2e      	ldr	r3, [pc, #184]	; (2748 <_spi_dev_rx+0xec>)
    268e:	4798      	blx	r3
    2690:	4603      	mov	r3, r0
    2692:	b2db      	uxtb	r3, r3
    2694:	7023      	strb	r3, [r4, #0]
    2696:	e016      	b.n	26c6 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    2698:	68fb      	ldr	r3, [r7, #12]
    269a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26a0:	1c58      	adds	r0, r3, #1
    26a2:	68f9      	ldr	r1, [r7, #12]
    26a4:	6448      	str	r0, [r1, #68]	; 0x44
    26a6:	005b      	lsls	r3, r3, #1
    26a8:	18d4      	adds	r4, r2, r3
    26aa:	6878      	ldr	r0, [r7, #4]
    26ac:	4b26      	ldr	r3, [pc, #152]	; (2748 <_spi_dev_rx+0xec>)
    26ae:	4798      	blx	r3
    26b0:	4603      	mov	r3, r0
    26b2:	8023      	strh	r3, [r4, #0]
    26b4:	e007      	b.n	26c6 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    26b6:	6878      	ldr	r0, [r7, #4]
    26b8:	4b23      	ldr	r3, [pc, #140]	; (2748 <_spi_dev_rx+0xec>)
    26ba:	4798      	blx	r3
		spi->xfercnt++;
    26bc:	68fb      	ldr	r3, [r7, #12]
    26be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26c0:	1c5a      	adds	r2, r3, #1
    26c2:	68fb      	ldr	r3, [r7, #12]
    26c4:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    26ca:	68fb      	ldr	r3, [r7, #12]
    26cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26ce:	429a      	cmp	r2, r3
    26d0:	d226      	bcs.n	2720 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    26d2:	68fb      	ldr	r3, [r7, #12]
    26d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    26d6:	2b00      	cmp	r3, #0
    26d8:	d01b      	beq.n	2712 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	791b      	ldrb	r3, [r3, #4]
    26de:	2b01      	cmp	r3, #1
    26e0:	d80b      	bhi.n	26fa <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    26e2:	68fb      	ldr	r3, [r7, #12]
    26e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    26e6:	68fb      	ldr	r3, [r7, #12]
    26e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26ea:	4413      	add	r3, r2
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	b29b      	uxth	r3, r3
    26f0:	4619      	mov	r1, r3
    26f2:	6878      	ldr	r0, [r7, #4]
    26f4:	4b15      	ldr	r3, [pc, #84]	; (274c <_spi_dev_rx+0xf0>)
    26f6:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    26f8:	e022      	b.n	2740 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    26fa:	68fb      	ldr	r3, [r7, #12]
    26fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    26fe:	68fb      	ldr	r3, [r7, #12]
    2700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2702:	005b      	lsls	r3, r3, #1
    2704:	4413      	add	r3, r2
    2706:	881b      	ldrh	r3, [r3, #0]
    2708:	4619      	mov	r1, r3
    270a:	6878      	ldr	r0, [r7, #4]
    270c:	4b0f      	ldr	r3, [pc, #60]	; (274c <_spi_dev_rx+0xf0>)
    270e:	4798      	blx	r3
}
    2710:	e016      	b.n	2740 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	88db      	ldrh	r3, [r3, #6]
    2716:	4619      	mov	r1, r3
    2718:	6878      	ldr	r0, [r7, #4]
    271a:	4b0c      	ldr	r3, [pc, #48]	; (274c <_spi_dev_rx+0xf0>)
    271c:	4798      	blx	r3
}
    271e:	e00f      	b.n	2740 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    2720:	2100      	movs	r1, #0
    2722:	6878      	ldr	r0, [r7, #4]
    2724:	4b0a      	ldr	r3, [pc, #40]	; (2750 <_spi_dev_rx+0xf4>)
    2726:	4798      	blx	r3
		spi->stat = 0;
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	2200      	movs	r2, #0
    272c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    2730:	68fb      	ldr	r3, [r7, #12]
    2732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2734:	2b00      	cmp	r3, #0
    2736:	d003      	beq.n	2740 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    2738:	68fb      	ldr	r3, [r7, #12]
    273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    273c:	68f8      	ldr	r0, [r7, #12]
    273e:	4798      	blx	r3
}
    2740:	bf00      	nop
    2742:	3714      	adds	r7, #20
    2744:	46bd      	mov	sp, r7
    2746:	bd90      	pop	{r4, r7, pc}
    2748:	000077b5 	.word	0x000077b5
    274c:	0000775d 	.word	0x0000775d
    2750:	00007685 	.word	0x00007685

00002754 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2754:	b580      	push	{r7, lr}
    2756:	b084      	sub	sp, #16
    2758:	af00      	add	r7, sp, #0
    275a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	3b04      	subs	r3, #4
    2760:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2766:	68fb      	ldr	r3, [r7, #12]
    2768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    276a:	429a      	cmp	r2, r3
    276c:	d30f      	bcc.n	278e <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    276e:	2100      	movs	r1, #0
    2770:	6878      	ldr	r0, [r7, #4]
    2772:	4b09      	ldr	r3, [pc, #36]	; (2798 <_spi_dev_complete+0x44>)
    2774:	4798      	blx	r3
		spi->stat = 0;
    2776:	68fb      	ldr	r3, [r7, #12]
    2778:	2200      	movs	r2, #0
    277a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    277e:	68fb      	ldr	r3, [r7, #12]
    2780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2782:	2b00      	cmp	r3, #0
    2784:	d003      	beq.n	278e <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    2786:	68fb      	ldr	r3, [r7, #12]
    2788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    278a:	68f8      	ldr	r0, [r7, #12]
    278c:	4798      	blx	r3
		}
	}
}
    278e:	bf00      	nop
    2790:	3710      	adds	r7, #16
    2792:	46bd      	mov	sp, r7
    2794:	bd80      	pop	{r7, pc}
    2796:	bf00      	nop
    2798:	000076f5 	.word	0x000076f5

0000279c <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    279c:	b580      	push	{r7, lr}
    279e:	b084      	sub	sp, #16
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
    27a4:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	3b04      	subs	r3, #4
    27aa:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    27ac:	2100      	movs	r1, #0
    27ae:	6878      	ldr	r0, [r7, #4]
    27b0:	4b0d      	ldr	r3, [pc, #52]	; (27e8 <_spi_dev_error+0x4c>)
    27b2:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    27b4:	2100      	movs	r1, #0
    27b6:	6878      	ldr	r0, [r7, #4]
    27b8:	4b0c      	ldr	r3, [pc, #48]	; (27ec <_spi_dev_error+0x50>)
    27ba:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    27bc:	2100      	movs	r1, #0
    27be:	6878      	ldr	r0, [r7, #4]
    27c0:	4b0b      	ldr	r3, [pc, #44]	; (27f0 <_spi_dev_error+0x54>)
    27c2:	4798      	blx	r3
	spi->stat = 0;
    27c4:	68fb      	ldr	r3, [r7, #12]
    27c6:	2200      	movs	r2, #0
    27c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    27cc:	68fb      	ldr	r3, [r7, #12]
    27ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    27d0:	2b00      	cmp	r3, #0
    27d2:	d004      	beq.n	27de <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    27d4:	68fb      	ldr	r3, [r7, #12]
    27d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    27d8:	6839      	ldr	r1, [r7, #0]
    27da:	68f8      	ldr	r0, [r7, #12]
    27dc:	4798      	blx	r3
	}
}
    27de:	bf00      	nop
    27e0:	3710      	adds	r7, #16
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	bf00      	nop
    27e8:	00007621 	.word	0x00007621
    27ec:	00007685 	.word	0x00007685
    27f0:	000076f5 	.word	0x000076f5

000027f4 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b084      	sub	sp, #16
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
    27fc:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    27fe:	2300      	movs	r3, #0
    2800:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	2b00      	cmp	r3, #0
    2806:	d004      	beq.n	2812 <spi_m_async_init+0x1e>
    2808:	683b      	ldr	r3, [r7, #0]
    280a:	2b00      	cmp	r3, #0
    280c:	d001      	beq.n	2812 <spi_m_async_init+0x1e>
    280e:	2301      	movs	r3, #1
    2810:	e000      	b.n	2814 <spi_m_async_init+0x20>
    2812:	2300      	movs	r3, #0
    2814:	f003 0301 	and.w	r3, r3, #1
    2818:	b2db      	uxtb	r3, r3
    281a:	22a5      	movs	r2, #165	; 0xa5
    281c:	491c      	ldr	r1, [pc, #112]	; (2890 <spi_m_async_init+0x9c>)
    281e:	4618      	mov	r0, r3
    2820:	4b1c      	ldr	r3, [pc, #112]	; (2894 <spi_m_async_init+0xa0>)
    2822:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	683a      	ldr	r2, [r7, #0]
    2828:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	3304      	adds	r3, #4
    282e:	6839      	ldr	r1, [r7, #0]
    2830:	4618      	mov	r0, r3
    2832:	4b19      	ldr	r3, [pc, #100]	; (2898 <spi_m_async_init+0xa4>)
    2834:	4798      	blx	r3
    2836:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    2838:	68fb      	ldr	r3, [r7, #12]
    283a:	2b00      	cmp	r3, #0
    283c:	db23      	blt.n	2886 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	3304      	adds	r3, #4
    2842:	4a16      	ldr	r2, [pc, #88]	; (289c <spi_m_async_init+0xa8>)
    2844:	2100      	movs	r1, #0
    2846:	4618      	mov	r0, r3
    2848:	4b15      	ldr	r3, [pc, #84]	; (28a0 <spi_m_async_init+0xac>)
    284a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	3304      	adds	r3, #4
    2850:	4a14      	ldr	r2, [pc, #80]	; (28a4 <spi_m_async_init+0xb0>)
    2852:	2101      	movs	r1, #1
    2854:	4618      	mov	r0, r3
    2856:	4b12      	ldr	r3, [pc, #72]	; (28a0 <spi_m_async_init+0xac>)
    2858:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3304      	adds	r3, #4
    285e:	4a12      	ldr	r2, [pc, #72]	; (28a8 <spi_m_async_init+0xb4>)
    2860:	2102      	movs	r1, #2
    2862:	4618      	mov	r0, r3
    2864:	4b0e      	ldr	r3, [pc, #56]	; (28a0 <spi_m_async_init+0xac>)
    2866:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	3304      	adds	r3, #4
    286c:	4a0f      	ldr	r2, [pc, #60]	; (28ac <spi_m_async_init+0xb8>)
    286e:	2103      	movs	r1, #3
    2870:	4618      	mov	r0, r3
    2872:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <spi_m_async_init+0xac>)
    2874:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	4a0d      	ldr	r2, [pc, #52]	; (28b0 <spi_m_async_init+0xbc>)
    287a:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	4a0d      	ldr	r2, [pc, #52]	; (28b4 <spi_m_async_init+0xc0>)
    2880:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    2882:	2300      	movs	r3, #0
    2884:	e000      	b.n	2888 <spi_m_async_init+0x94>
		return rc;
    2886:	68fb      	ldr	r3, [r7, #12]
}
    2888:	4618      	mov	r0, r3
    288a:	3710      	adds	r7, #16
    288c:	46bd      	mov	sp, r7
    288e:	bd80      	pop	{r7, pc}
    2890:	0000ed2c 	.word	0x0000ed2c
    2894:	00003931 	.word	0x00003931
    2898:	00007321 	.word	0x00007321
    289c:	000025dd 	.word	0x000025dd
    28a0:	00007805 	.word	0x00007805
    28a4:	0000265d 	.word	0x0000265d
    28a8:	00002755 	.word	0x00002755
    28ac:	0000279d 	.word	0x0000279d
    28b0:	000028b9 	.word	0x000028b9
    28b4:	00002939 	.word	0x00002939

000028b8 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    28b8:	b580      	push	{r7, lr}
    28ba:	b086      	sub	sp, #24
    28bc:	af00      	add	r7, sp, #0
    28be:	60f8      	str	r0, [r7, #12]
    28c0:	60b9      	str	r1, [r7, #8]
    28c2:	4613      	mov	r3, r2
    28c4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	2b00      	cmp	r3, #0
    28ca:	bf14      	ite	ne
    28cc:	2301      	movne	r3, #1
    28ce:	2300      	moveq	r3, #0
    28d0:	b2db      	uxtb	r3, r3
    28d2:	f240 1205 	movw	r2, #261	; 0x105
    28d6:	4914      	ldr	r1, [pc, #80]	; (2928 <_spi_m_async_io_read+0x70>)
    28d8:	4618      	mov	r0, r3
    28da:	4b14      	ldr	r3, [pc, #80]	; (292c <_spi_m_async_io_read+0x74>)
    28dc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    28de:	68fb      	ldr	r3, [r7, #12]
    28e0:	3b24      	subs	r3, #36	; 0x24
    28e2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    28e4:	697b      	ldr	r3, [r7, #20]
    28e6:	68ba      	ldr	r2, [r7, #8]
    28e8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    28ea:	697b      	ldr	r3, [r7, #20]
    28ec:	2200      	movs	r2, #0
    28ee:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    28f0:	88fa      	ldrh	r2, [r7, #6]
    28f2:	697b      	ldr	r3, [r7, #20]
    28f4:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    28f6:	697b      	ldr	r3, [r7, #20]
    28f8:	2200      	movs	r2, #0
    28fa:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    28fc:	697b      	ldr	r3, [r7, #20]
    28fe:	2210      	movs	r2, #16
    2900:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2904:	697b      	ldr	r3, [r7, #20]
    2906:	3304      	adds	r3, #4
    2908:	2101      	movs	r1, #1
    290a:	4618      	mov	r0, r3
    290c:	4b08      	ldr	r3, [pc, #32]	; (2930 <_spi_m_async_io_read+0x78>)
    290e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    2910:	697b      	ldr	r3, [r7, #20]
    2912:	3304      	adds	r3, #4
    2914:	f240 11ff 	movw	r1, #511	; 0x1ff
    2918:	4618      	mov	r0, r3
    291a:	4b06      	ldr	r3, [pc, #24]	; (2934 <_spi_m_async_io_read+0x7c>)
    291c:	4798      	blx	r3

	return ERR_NONE;
    291e:	2300      	movs	r3, #0
}
    2920:	4618      	mov	r0, r3
    2922:	3718      	adds	r7, #24
    2924:	46bd      	mov	sp, r7
    2926:	bd80      	pop	{r7, pc}
    2928:	0000ed2c 	.word	0x0000ed2c
    292c:	00003931 	.word	0x00003931
    2930:	00007685 	.word	0x00007685
    2934:	0000775d 	.word	0x0000775d

00002938 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2938:	b580      	push	{r7, lr}
    293a:	b086      	sub	sp, #24
    293c:	af00      	add	r7, sp, #0
    293e:	60f8      	str	r0, [r7, #12]
    2940:	60b9      	str	r1, [r7, #8]
    2942:	4613      	mov	r3, r2
    2944:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2946:	68fb      	ldr	r3, [r7, #12]
    2948:	2b00      	cmp	r3, #0
    294a:	bf14      	ite	ne
    294c:	2301      	movne	r3, #1
    294e:	2300      	moveq	r3, #0
    2950:	b2db      	uxtb	r3, r3
    2952:	f240 1227 	movw	r2, #295	; 0x127
    2956:	4911      	ldr	r1, [pc, #68]	; (299c <_spi_m_async_io_write+0x64>)
    2958:	4618      	mov	r0, r3
    295a:	4b11      	ldr	r3, [pc, #68]	; (29a0 <_spi_m_async_io_write+0x68>)
    295c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	3b24      	subs	r3, #36	; 0x24
    2962:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2964:	697b      	ldr	r3, [r7, #20]
    2966:	2200      	movs	r2, #0
    2968:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    296a:	697b      	ldr	r3, [r7, #20]
    296c:	68ba      	ldr	r2, [r7, #8]
    296e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2970:	88fa      	ldrh	r2, [r7, #6]
    2972:	697b      	ldr	r3, [r7, #20]
    2974:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2976:	697b      	ldr	r3, [r7, #20]
    2978:	2200      	movs	r2, #0
    297a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    297c:	697b      	ldr	r3, [r7, #20]
    297e:	2210      	movs	r2, #16
    2980:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2984:	697b      	ldr	r3, [r7, #20]
    2986:	3304      	adds	r3, #4
    2988:	2101      	movs	r1, #1
    298a:	4618      	mov	r0, r3
    298c:	4b05      	ldr	r3, [pc, #20]	; (29a4 <_spi_m_async_io_write+0x6c>)
    298e:	4798      	blx	r3

	return ERR_NONE;
    2990:	2300      	movs	r3, #0
}
    2992:	4618      	mov	r0, r3
    2994:	3718      	adds	r7, #24
    2996:	46bd      	mov	sp, r7
    2998:	bd80      	pop	{r7, pc}
    299a:	bf00      	nop
    299c:	0000ed2c 	.word	0x0000ed2c
    29a0:	00003931 	.word	0x00003931
    29a4:	00007621 	.word	0x00007621

000029a8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b084      	sub	sp, #16
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
    29b0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    29b2:	2300      	movs	r3, #0
    29b4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    29b6:	687b      	ldr	r3, [r7, #4]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d004      	beq.n	29c6 <spi_m_sync_init+0x1e>
    29bc:	683b      	ldr	r3, [r7, #0]
    29be:	2b00      	cmp	r3, #0
    29c0:	d001      	beq.n	29c6 <spi_m_sync_init+0x1e>
    29c2:	2301      	movs	r3, #1
    29c4:	e000      	b.n	29c8 <spi_m_sync_init+0x20>
    29c6:	2300      	movs	r3, #0
    29c8:	f003 0301 	and.w	r3, r3, #1
    29cc:	b2db      	uxtb	r3, r3
    29ce:	2240      	movs	r2, #64	; 0x40
    29d0:	4910      	ldr	r1, [pc, #64]	; (2a14 <spi_m_sync_init+0x6c>)
    29d2:	4618      	mov	r0, r3
    29d4:	4b10      	ldr	r3, [pc, #64]	; (2a18 <spi_m_sync_init+0x70>)
    29d6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	683a      	ldr	r2, [r7, #0]
    29dc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	3304      	adds	r3, #4
    29e2:	6839      	ldr	r1, [r7, #0]
    29e4:	4618      	mov	r0, r3
    29e6:	4b0d      	ldr	r3, [pc, #52]	; (2a1c <spi_m_sync_init+0x74>)
    29e8:	4798      	blx	r3
    29ea:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	2b00      	cmp	r3, #0
    29f0:	da01      	bge.n	29f6 <spi_m_sync_init+0x4e>
		return rc;
    29f2:	68fb      	ldr	r3, [r7, #12]
    29f4:	e00a      	b.n	2a0c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    29fc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	4a07      	ldr	r2, [pc, #28]	; (2a20 <spi_m_sync_init+0x78>)
    2a02:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	4a07      	ldr	r2, [pc, #28]	; (2a24 <spi_m_sync_init+0x7c>)
    2a08:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2a0a:	2300      	movs	r3, #0
}
    2a0c:	4618      	mov	r0, r3
    2a0e:	3710      	adds	r7, #16
    2a10:	46bd      	mov	sp, r7
    2a12:	bd80      	pop	{r7, pc}
    2a14:	0000ed4c 	.word	0x0000ed4c
    2a18:	00003931 	.word	0x00003931
    2a1c:	00007215 	.word	0x00007215
    2a20:	00002a29 	.word	0x00002a29
    2a24:	00002a81 	.word	0x00002a81

00002a28 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2a28:	b580      	push	{r7, lr}
    2a2a:	b088      	sub	sp, #32
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	60f8      	str	r0, [r7, #12]
    2a30:	60b9      	str	r1, [r7, #8]
    2a32:	4613      	mov	r3, r2
    2a34:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a36:	68fb      	ldr	r3, [r7, #12]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	bf14      	ite	ne
    2a3c:	2301      	movne	r3, #1
    2a3e:	2300      	moveq	r3, #0
    2a40:	b2db      	uxtb	r3, r3
    2a42:	2287      	movs	r2, #135	; 0x87
    2a44:	490b      	ldr	r1, [pc, #44]	; (2a74 <_spi_m_sync_io_read+0x4c>)
    2a46:	4618      	mov	r0, r3
    2a48:	4b0b      	ldr	r3, [pc, #44]	; (2a78 <_spi_m_sync_io_read+0x50>)
    2a4a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2a4c:	68fb      	ldr	r3, [r7, #12]
    2a4e:	3b0c      	subs	r3, #12
    2a50:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2a52:	68bb      	ldr	r3, [r7, #8]
    2a54:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2a56:	2300      	movs	r3, #0
    2a58:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2a5a:	88fb      	ldrh	r3, [r7, #6]
    2a5c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2a5e:	f107 0310 	add.w	r3, r7, #16
    2a62:	4619      	mov	r1, r3
    2a64:	69f8      	ldr	r0, [r7, #28]
    2a66:	4b05      	ldr	r3, [pc, #20]	; (2a7c <_spi_m_sync_io_read+0x54>)
    2a68:	4798      	blx	r3
    2a6a:	4603      	mov	r3, r0
}
    2a6c:	4618      	mov	r0, r3
    2a6e:	3720      	adds	r7, #32
    2a70:	46bd      	mov	sp, r7
    2a72:	bd80      	pop	{r7, pc}
    2a74:	0000ed4c 	.word	0x0000ed4c
    2a78:	00003931 	.word	0x00003931
    2a7c:	00002ad9 	.word	0x00002ad9

00002a80 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b088      	sub	sp, #32
    2a84:	af00      	add	r7, sp, #0
    2a86:	60f8      	str	r0, [r7, #12]
    2a88:	60b9      	str	r1, [r7, #8]
    2a8a:	4613      	mov	r3, r2
    2a8c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a8e:	68fb      	ldr	r3, [r7, #12]
    2a90:	2b00      	cmp	r3, #0
    2a92:	bf14      	ite	ne
    2a94:	2301      	movne	r3, #1
    2a96:	2300      	moveq	r3, #0
    2a98:	b2db      	uxtb	r3, r3
    2a9a:	22a3      	movs	r2, #163	; 0xa3
    2a9c:	490b      	ldr	r1, [pc, #44]	; (2acc <_spi_m_sync_io_write+0x4c>)
    2a9e:	4618      	mov	r0, r3
    2aa0:	4b0b      	ldr	r3, [pc, #44]	; (2ad0 <_spi_m_sync_io_write+0x50>)
    2aa2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	3b0c      	subs	r3, #12
    2aa8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2aaa:	2300      	movs	r3, #0
    2aac:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2aae:	68bb      	ldr	r3, [r7, #8]
    2ab0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2ab2:	88fb      	ldrh	r3, [r7, #6]
    2ab4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2ab6:	f107 0310 	add.w	r3, r7, #16
    2aba:	4619      	mov	r1, r3
    2abc:	69f8      	ldr	r0, [r7, #28]
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <_spi_m_sync_io_write+0x54>)
    2ac0:	4798      	blx	r3
    2ac2:	4603      	mov	r3, r0
}
    2ac4:	4618      	mov	r0, r3
    2ac6:	3720      	adds	r7, #32
    2ac8:	46bd      	mov	sp, r7
    2aca:	bd80      	pop	{r7, pc}
    2acc:	0000ed4c 	.word	0x0000ed4c
    2ad0:	00003931 	.word	0x00003931
    2ad4:	00002ad9 	.word	0x00002ad9

00002ad8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b086      	sub	sp, #24
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
    2ae0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d004      	beq.n	2af2 <spi_m_sync_transfer+0x1a>
    2ae8:	683b      	ldr	r3, [r7, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d001      	beq.n	2af2 <spi_m_sync_transfer+0x1a>
    2aee:	2301      	movs	r3, #1
    2af0:	e000      	b.n	2af4 <spi_m_sync_transfer+0x1c>
    2af2:	2300      	movs	r3, #0
    2af4:	f003 0301 	and.w	r3, r3, #1
    2af8:	b2db      	uxtb	r3, r3
    2afa:	22b3      	movs	r2, #179	; 0xb3
    2afc:	490c      	ldr	r1, [pc, #48]	; (2b30 <spi_m_sync_transfer+0x58>)
    2afe:	4618      	mov	r0, r3
    2b00:	4b0c      	ldr	r3, [pc, #48]	; (2b34 <spi_m_sync_transfer+0x5c>)
    2b02:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2b04:	683b      	ldr	r3, [r7, #0]
    2b06:	681b      	ldr	r3, [r3, #0]
    2b08:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2b0a:	683b      	ldr	r3, [r7, #0]
    2b0c:	685b      	ldr	r3, [r3, #4]
    2b0e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2b10:	683b      	ldr	r3, [r7, #0]
    2b12:	689b      	ldr	r3, [r3, #8]
    2b14:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	3304      	adds	r3, #4
    2b1a:	f107 020c 	add.w	r2, r7, #12
    2b1e:	4611      	mov	r1, r2
    2b20:	4618      	mov	r0, r3
    2b22:	4b05      	ldr	r3, [pc, #20]	; (2b38 <spi_m_sync_transfer+0x60>)
    2b24:	4798      	blx	r3
    2b26:	4603      	mov	r3, r0
}
    2b28:	4618      	mov	r0, r3
    2b2a:	3718      	adds	r7, #24
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd80      	pop	{r7, pc}
    2b30:	0000ed4c 	.word	0x0000ed4c
    2b34:	00003931 	.word	0x00003931
    2b38:	00007505 	.word	0x00007505

00002b3c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2b3c:	b480      	push	{r7}
    2b3e:	b083      	sub	sp, #12
    2b40:	af00      	add	r7, sp, #0
    2b42:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	681b      	ldr	r3, [r3, #0]
}
    2b48:	4618      	mov	r0, r3
    2b4a:	370c      	adds	r7, #12
    2b4c:	46bd      	mov	sp, r7
    2b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b52:	4770      	bx	lr

00002b54 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2b54:	b480      	push	{r7}
    2b56:	b083      	sub	sp, #12
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d002      	beq.n	2b68 <list_get_next_element+0x14>
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	e000      	b.n	2b6a <list_get_next_element+0x16>
    2b68:	2300      	movs	r3, #0
}
    2b6a:	4618      	mov	r0, r3
    2b6c:	370c      	adds	r7, #12
    2b6e:	46bd      	mov	sp, r7
    2b70:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b74:	4770      	bx	lr
	...

00002b78 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	b084      	sub	sp, #16
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	60f8      	str	r0, [r7, #12]
    2b80:	60b9      	str	r1, [r7, #8]
    2b82:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2b84:	68fb      	ldr	r3, [r7, #12]
    2b86:	2b00      	cmp	r3, #0
    2b88:	d004      	beq.n	2b94 <timer_init+0x1c>
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d001      	beq.n	2b94 <timer_init+0x1c>
    2b90:	2301      	movs	r3, #1
    2b92:	e000      	b.n	2b96 <timer_init+0x1e>
    2b94:	2300      	movs	r3, #0
    2b96:	f003 0301 	and.w	r3, r3, #1
    2b9a:	b2db      	uxtb	r3, r3
    2b9c:	223b      	movs	r2, #59	; 0x3b
    2b9e:	490a      	ldr	r1, [pc, #40]	; (2bc8 <timer_init+0x50>)
    2ba0:	4618      	mov	r0, r3
    2ba2:	4b0a      	ldr	r3, [pc, #40]	; (2bcc <timer_init+0x54>)
    2ba4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2ba6:	68fb      	ldr	r3, [r7, #12]
    2ba8:	68b9      	ldr	r1, [r7, #8]
    2baa:	4618      	mov	r0, r3
    2bac:	4b08      	ldr	r3, [pc, #32]	; (2bd0 <timer_init+0x58>)
    2bae:	4798      	blx	r3
	descr->time                           = 0;
    2bb0:	68fb      	ldr	r3, [r7, #12]
    2bb2:	2200      	movs	r2, #0
    2bb4:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2bb6:	68fb      	ldr	r3, [r7, #12]
    2bb8:	4a06      	ldr	r2, [pc, #24]	; (2bd4 <timer_init+0x5c>)
    2bba:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2bbc:	2300      	movs	r3, #0
}
    2bbe:	4618      	mov	r0, r3
    2bc0:	3710      	adds	r7, #16
    2bc2:	46bd      	mov	sp, r7
    2bc4:	bd80      	pop	{r7, pc}
    2bc6:	bf00      	nop
    2bc8:	0000ed68 	.word	0x0000ed68
    2bcc:	00003931 	.word	0x00003931
    2bd0:	00007bfd 	.word	0x00007bfd
    2bd4:	00002f21 	.word	0x00002f21

00002bd8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	b082      	sub	sp, #8
    2bdc:	af00      	add	r7, sp, #0
    2bde:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	2b00      	cmp	r3, #0
    2be4:	bf14      	ite	ne
    2be6:	2301      	movne	r3, #1
    2be8:	2300      	moveq	r3, #0
    2bea:	b2db      	uxtb	r3, r3
    2bec:	2253      	movs	r2, #83	; 0x53
    2bee:	490b      	ldr	r1, [pc, #44]	; (2c1c <timer_start+0x44>)
    2bf0:	4618      	mov	r0, r3
    2bf2:	4b0b      	ldr	r3, [pc, #44]	; (2c20 <timer_start+0x48>)
    2bf4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	4618      	mov	r0, r3
    2bfa:	4b0a      	ldr	r3, [pc, #40]	; (2c24 <timer_start+0x4c>)
    2bfc:	4798      	blx	r3
    2bfe:	4603      	mov	r3, r0
    2c00:	2b00      	cmp	r3, #0
    2c02:	d002      	beq.n	2c0a <timer_start+0x32>
		return ERR_DENIED;
    2c04:	f06f 0310 	mvn.w	r3, #16
    2c08:	e004      	b.n	2c14 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	4618      	mov	r0, r3
    2c0e:	4b06      	ldr	r3, [pc, #24]	; (2c28 <timer_start+0x50>)
    2c10:	4798      	blx	r3

	return ERR_NONE;
    2c12:	2300      	movs	r3, #0
}
    2c14:	4618      	mov	r0, r3
    2c16:	3708      	adds	r7, #8
    2c18:	46bd      	mov	sp, r7
    2c1a:	bd80      	pop	{r7, pc}
    2c1c:	0000ed68 	.word	0x0000ed68
    2c20:	00003931 	.word	0x00003931
    2c24:	00008129 	.word	0x00008129
    2c28:	000080c9 	.word	0x000080c9

00002c2c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b082      	sub	sp, #8
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	2b00      	cmp	r3, #0
    2c38:	bf14      	ite	ne
    2c3a:	2301      	movne	r3, #1
    2c3c:	2300      	moveq	r3, #0
    2c3e:	b2db      	uxtb	r3, r3
    2c40:	2261      	movs	r2, #97	; 0x61
    2c42:	490d      	ldr	r1, [pc, #52]	; (2c78 <timer_stop+0x4c>)
    2c44:	4618      	mov	r0, r3
    2c46:	4b0d      	ldr	r3, [pc, #52]	; (2c7c <timer_stop+0x50>)
    2c48:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	4618      	mov	r0, r3
    2c4e:	4b0c      	ldr	r3, [pc, #48]	; (2c80 <timer_stop+0x54>)
    2c50:	4798      	blx	r3
    2c52:	4603      	mov	r3, r0
    2c54:	f083 0301 	eor.w	r3, r3, #1
    2c58:	b2db      	uxtb	r3, r3
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d002      	beq.n	2c64 <timer_stop+0x38>
		return ERR_DENIED;
    2c5e:	f06f 0310 	mvn.w	r3, #16
    2c62:	e004      	b.n	2c6e <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	4618      	mov	r0, r3
    2c68:	4b06      	ldr	r3, [pc, #24]	; (2c84 <timer_stop+0x58>)
    2c6a:	4798      	blx	r3

	return ERR_NONE;
    2c6c:	2300      	movs	r3, #0
}
    2c6e:	4618      	mov	r0, r3
    2c70:	3708      	adds	r7, #8
    2c72:	46bd      	mov	sp, r7
    2c74:	bd80      	pop	{r7, pc}
    2c76:	bf00      	nop
    2c78:	0000ed68 	.word	0x0000ed68
    2c7c:	00003931 	.word	0x00003931
    2c80:	00008129 	.word	0x00008129
    2c84:	00008109 	.word	0x00008109

00002c88 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b084      	sub	sp, #16
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	2b00      	cmp	r3, #0
    2c96:	d004      	beq.n	2ca2 <timer_add_task+0x1a>
    2c98:	683b      	ldr	r3, [r7, #0]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d001      	beq.n	2ca2 <timer_add_task+0x1a>
    2c9e:	2301      	movs	r3, #1
    2ca0:	e000      	b.n	2ca4 <timer_add_task+0x1c>
    2ca2:	2300      	movs	r3, #0
    2ca4:	f003 0301 	and.w	r3, r3, #1
    2ca8:	b2db      	uxtb	r3, r3
    2caa:	227a      	movs	r2, #122	; 0x7a
    2cac:	492d      	ldr	r1, [pc, #180]	; (2d64 <timer_add_task+0xdc>)
    2cae:	4618      	mov	r0, r3
    2cb0:	4b2d      	ldr	r3, [pc, #180]	; (2d68 <timer_add_task+0xe0>)
    2cb2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	7e1b      	ldrb	r3, [r3, #24]
    2cb8:	b2db      	uxtb	r3, r3
    2cba:	f043 0301 	orr.w	r3, r3, #1
    2cbe:	b2da      	uxtb	r2, r3
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	3314      	adds	r3, #20
    2cc8:	6839      	ldr	r1, [r7, #0]
    2cca:	4618      	mov	r0, r3
    2ccc:	4b27      	ldr	r3, [pc, #156]	; (2d6c <timer_add_task+0xe4>)
    2cce:	4798      	blx	r3
    2cd0:	4603      	mov	r3, r0
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d00f      	beq.n	2cf6 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	7e1b      	ldrb	r3, [r3, #24]
    2cda:	b2db      	uxtb	r3, r3
    2cdc:	f023 0301 	bic.w	r3, r3, #1
    2ce0:	b2da      	uxtb	r2, r3
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    2ce6:	227f      	movs	r2, #127	; 0x7f
    2ce8:	491e      	ldr	r1, [pc, #120]	; (2d64 <timer_add_task+0xdc>)
    2cea:	2000      	movs	r0, #0
    2cec:	4b1e      	ldr	r3, [pc, #120]	; (2d68 <timer_add_task+0xe0>)
    2cee:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2cf0:	f06f 0311 	mvn.w	r3, #17
    2cf4:	e032      	b.n	2d5c <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	691a      	ldr	r2, [r3, #16]
    2cfa:	683b      	ldr	r3, [r7, #0]
    2cfc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	f103 0014 	add.w	r0, r3, #20
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	691b      	ldr	r3, [r3, #16]
    2d08:	461a      	mov	r2, r3
    2d0a:	6839      	ldr	r1, [r7, #0]
    2d0c:	4b18      	ldr	r3, [pc, #96]	; (2d70 <timer_add_task+0xe8>)
    2d0e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	7e1b      	ldrb	r3, [r3, #24]
    2d14:	b2db      	uxtb	r3, r3
    2d16:	f023 0301 	bic.w	r3, r3, #1
    2d1a:	b2da      	uxtb	r2, r3
    2d1c:	687b      	ldr	r3, [r7, #4]
    2d1e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	7e1b      	ldrb	r3, [r3, #24]
    2d24:	b2db      	uxtb	r3, r3
    2d26:	f003 0302 	and.w	r3, r3, #2
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d015      	beq.n	2d5a <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    2d2e:	f107 030c 	add.w	r3, r7, #12
    2d32:	4618      	mov	r0, r3
    2d34:	4b0f      	ldr	r3, [pc, #60]	; (2d74 <timer_add_task+0xec>)
    2d36:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	7e1b      	ldrb	r3, [r3, #24]
    2d3c:	b2db      	uxtb	r3, r3
    2d3e:	f023 0302 	bic.w	r3, r3, #2
    2d42:	b2da      	uxtb	r2, r3
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	4618      	mov	r0, r3
    2d4c:	4b0a      	ldr	r3, [pc, #40]	; (2d78 <timer_add_task+0xf0>)
    2d4e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d50:	f107 030c 	add.w	r3, r7, #12
    2d54:	4618      	mov	r0, r3
    2d56:	4b09      	ldr	r3, [pc, #36]	; (2d7c <timer_add_task+0xf4>)
    2d58:	4798      	blx	r3
	}

	return ERR_NONE;
    2d5a:	2300      	movs	r3, #0
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	3710      	adds	r7, #16
    2d60:	46bd      	mov	sp, r7
    2d62:	bd80      	pop	{r7, pc}
    2d64:	0000ed68 	.word	0x0000ed68
    2d68:	00003931 	.word	0x00003931
    2d6c:	00003959 	.word	0x00003959
    2d70:	00002e71 	.word	0x00002e71
    2d74:	0000b2d5 	.word	0x0000b2d5
    2d78:	00008189 	.word	0x00008189
    2d7c:	0000b2fb 	.word	0x0000b2fb

00002d80 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b084      	sub	sp, #16
    2d84:	af00      	add	r7, sp, #0
    2d86:	6078      	str	r0, [r7, #4]
    2d88:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d004      	beq.n	2d9a <timer_remove_task+0x1a>
    2d90:	683b      	ldr	r3, [r7, #0]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d001      	beq.n	2d9a <timer_remove_task+0x1a>
    2d96:	2301      	movs	r3, #1
    2d98:	e000      	b.n	2d9c <timer_remove_task+0x1c>
    2d9a:	2300      	movs	r3, #0
    2d9c:	f003 0301 	and.w	r3, r3, #1
    2da0:	b2db      	uxtb	r3, r3
    2da2:	2295      	movs	r2, #149	; 0x95
    2da4:	492b      	ldr	r1, [pc, #172]	; (2e54 <timer_remove_task+0xd4>)
    2da6:	4618      	mov	r0, r3
    2da8:	4b2b      	ldr	r3, [pc, #172]	; (2e58 <timer_remove_task+0xd8>)
    2daa:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	7e1b      	ldrb	r3, [r3, #24]
    2db0:	b2db      	uxtb	r3, r3
    2db2:	f043 0301 	orr.w	r3, r3, #1
    2db6:	b2da      	uxtb	r2, r3
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	3314      	adds	r3, #20
    2dc0:	6839      	ldr	r1, [r7, #0]
    2dc2:	4618      	mov	r0, r3
    2dc4:	4b25      	ldr	r3, [pc, #148]	; (2e5c <timer_remove_task+0xdc>)
    2dc6:	4798      	blx	r3
    2dc8:	4603      	mov	r3, r0
    2dca:	f083 0301 	eor.w	r3, r3, #1
    2dce:	b2db      	uxtb	r3, r3
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d00f      	beq.n	2df4 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	7e1b      	ldrb	r3, [r3, #24]
    2dd8:	b2db      	uxtb	r3, r3
    2dda:	f023 0301 	bic.w	r3, r3, #1
    2dde:	b2da      	uxtb	r2, r3
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    2de4:	229a      	movs	r2, #154	; 0x9a
    2de6:	491b      	ldr	r1, [pc, #108]	; (2e54 <timer_remove_task+0xd4>)
    2de8:	2000      	movs	r0, #0
    2dea:	4b1b      	ldr	r3, [pc, #108]	; (2e58 <timer_remove_task+0xd8>)
    2dec:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2dee:	f06f 0309 	mvn.w	r3, #9
    2df2:	e02b      	b.n	2e4c <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	3314      	adds	r3, #20
    2df8:	6839      	ldr	r1, [r7, #0]
    2dfa:	4618      	mov	r0, r3
    2dfc:	4b18      	ldr	r3, [pc, #96]	; (2e60 <timer_remove_task+0xe0>)
    2dfe:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	7e1b      	ldrb	r3, [r3, #24]
    2e04:	b2db      	uxtb	r3, r3
    2e06:	f023 0301 	bic.w	r3, r3, #1
    2e0a:	b2da      	uxtb	r2, r3
    2e0c:	687b      	ldr	r3, [r7, #4]
    2e0e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	7e1b      	ldrb	r3, [r3, #24]
    2e14:	b2db      	uxtb	r3, r3
    2e16:	f003 0302 	and.w	r3, r3, #2
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d015      	beq.n	2e4a <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    2e1e:	f107 030c 	add.w	r3, r7, #12
    2e22:	4618      	mov	r0, r3
    2e24:	4b0f      	ldr	r3, [pc, #60]	; (2e64 <timer_remove_task+0xe4>)
    2e26:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	7e1b      	ldrb	r3, [r3, #24]
    2e2c:	b2db      	uxtb	r3, r3
    2e2e:	f023 0302 	bic.w	r3, r3, #2
    2e32:	b2da      	uxtb	r2, r3
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	4618      	mov	r0, r3
    2e3c:	4b0a      	ldr	r3, [pc, #40]	; (2e68 <timer_remove_task+0xe8>)
    2e3e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2e40:	f107 030c 	add.w	r3, r7, #12
    2e44:	4618      	mov	r0, r3
    2e46:	4b09      	ldr	r3, [pc, #36]	; (2e6c <timer_remove_task+0xec>)
    2e48:	4798      	blx	r3
	}

	return ERR_NONE;
    2e4a:	2300      	movs	r3, #0
}
    2e4c:	4618      	mov	r0, r3
    2e4e:	3710      	adds	r7, #16
    2e50:	46bd      	mov	sp, r7
    2e52:	bd80      	pop	{r7, pc}
    2e54:	0000ed68 	.word	0x0000ed68
    2e58:	00003931 	.word	0x00003931
    2e5c:	00003959 	.word	0x00003959
    2e60:	00003abb 	.word	0x00003abb
    2e64:	0000b2d5 	.word	0x0000b2d5
    2e68:	00008189 	.word	0x00008189
    2e6c:	0000b2fb 	.word	0x0000b2fb

00002e70 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2e70:	b580      	push	{r7, lr}
    2e72:	b088      	sub	sp, #32
    2e74:	af00      	add	r7, sp, #0
    2e76:	60f8      	str	r0, [r7, #12]
    2e78:	60b9      	str	r1, [r7, #8]
    2e7a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2e7c:	2300      	movs	r3, #0
    2e7e:	61bb      	str	r3, [r7, #24]
    2e80:	68f8      	ldr	r0, [r7, #12]
    2e82:	4b23      	ldr	r3, [pc, #140]	; (2f10 <timer_add_timer_task+0xa0>)
    2e84:	4798      	blx	r3
    2e86:	6138      	str	r0, [r7, #16]

	if (!head) {
    2e88:	693b      	ldr	r3, [r7, #16]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d104      	bne.n	2e98 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2e8e:	68b9      	ldr	r1, [r7, #8]
    2e90:	68f8      	ldr	r0, [r7, #12]
    2e92:	4b20      	ldr	r3, [pc, #128]	; (2f14 <timer_add_timer_task+0xa4>)
    2e94:	4798      	blx	r3
		return;
    2e96:	e037      	b.n	2f08 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e98:	693b      	ldr	r3, [r7, #16]
    2e9a:	61fb      	str	r3, [r7, #28]
    2e9c:	e022      	b.n	2ee4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2e9e:	69fb      	ldr	r3, [r7, #28]
    2ea0:	685a      	ldr	r2, [r3, #4]
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	429a      	cmp	r2, r3
    2ea6:	d808      	bhi.n	2eba <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2ea8:	69fb      	ldr	r3, [r7, #28]
    2eaa:	689a      	ldr	r2, [r3, #8]
    2eac:	69fb      	ldr	r3, [r7, #28]
    2eae:	6859      	ldr	r1, [r3, #4]
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	1acb      	subs	r3, r1, r3
    2eb4:	4413      	add	r3, r2
    2eb6:	617b      	str	r3, [r7, #20]
    2eb8:	e009      	b.n	2ece <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2eba:	69fb      	ldr	r3, [r7, #28]
    2ebc:	689a      	ldr	r2, [r3, #8]
    2ebe:	69fb      	ldr	r3, [r7, #28]
    2ec0:	685b      	ldr	r3, [r3, #4]
    2ec2:	441a      	add	r2, r3
    2ec4:	687b      	ldr	r3, [r7, #4]
    2ec6:	425b      	negs	r3, r3
    2ec8:	4413      	add	r3, r2
    2eca:	3301      	adds	r3, #1
    2ecc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2ece:	68bb      	ldr	r3, [r7, #8]
    2ed0:	689a      	ldr	r2, [r3, #8]
    2ed2:	697b      	ldr	r3, [r7, #20]
    2ed4:	429a      	cmp	r2, r3
    2ed6:	d909      	bls.n	2eec <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2ed8:	69fb      	ldr	r3, [r7, #28]
    2eda:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2edc:	69f8      	ldr	r0, [r7, #28]
    2ede:	4b0e      	ldr	r3, [pc, #56]	; (2f18 <timer_add_timer_task+0xa8>)
    2ee0:	4798      	blx	r3
    2ee2:	61f8      	str	r0, [r7, #28]
    2ee4:	69fb      	ldr	r3, [r7, #28]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d1d9      	bne.n	2e9e <timer_add_timer_task+0x2e>
    2eea:	e000      	b.n	2eee <timer_add_timer_task+0x7e>
			break;
    2eec:	bf00      	nop
	}

	if (it == head) {
    2eee:	69fa      	ldr	r2, [r7, #28]
    2ef0:	693b      	ldr	r3, [r7, #16]
    2ef2:	429a      	cmp	r2, r3
    2ef4:	d104      	bne.n	2f00 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ef6:	68b9      	ldr	r1, [r7, #8]
    2ef8:	68f8      	ldr	r0, [r7, #12]
    2efa:	4b06      	ldr	r3, [pc, #24]	; (2f14 <timer_add_timer_task+0xa4>)
    2efc:	4798      	blx	r3
    2efe:	e003      	b.n	2f08 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2f00:	68b9      	ldr	r1, [r7, #8]
    2f02:	69b8      	ldr	r0, [r7, #24]
    2f04:	4b05      	ldr	r3, [pc, #20]	; (2f1c <timer_add_timer_task+0xac>)
    2f06:	4798      	blx	r3
	}
}
    2f08:	3720      	adds	r7, #32
    2f0a:	46bd      	mov	sp, r7
    2f0c:	bd80      	pop	{r7, pc}
    2f0e:	bf00      	nop
    2f10:	00002b3d 	.word	0x00002b3d
    2f14:	00003991 	.word	0x00003991
    2f18:	00002b55 	.word	0x00002b55
    2f1c:	000039e9 	.word	0x000039e9

00002f20 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b086      	sub	sp, #24
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2f2c:	693b      	ldr	r3, [r7, #16]
    2f2e:	3314      	adds	r3, #20
    2f30:	4618      	mov	r0, r3
    2f32:	4b27      	ldr	r3, [pc, #156]	; (2fd0 <timer_process_counted+0xb0>)
    2f34:	4798      	blx	r3
    2f36:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2f38:	693b      	ldr	r3, [r7, #16]
    2f3a:	691b      	ldr	r3, [r3, #16]
    2f3c:	1c5a      	adds	r2, r3, #1
    2f3e:	693b      	ldr	r3, [r7, #16]
    2f40:	611a      	str	r2, [r3, #16]
    2f42:	693b      	ldr	r3, [r7, #16]
    2f44:	691b      	ldr	r3, [r3, #16]
    2f46:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2f48:	693b      	ldr	r3, [r7, #16]
    2f4a:	7e1b      	ldrb	r3, [r3, #24]
    2f4c:	b2db      	uxtb	r3, r3
    2f4e:	f003 0301 	and.w	r3, r3, #1
    2f52:	2b00      	cmp	r3, #0
    2f54:	d106      	bne.n	2f64 <timer_process_counted+0x44>
    2f56:	693b      	ldr	r3, [r7, #16]
    2f58:	7e1b      	ldrb	r3, [r3, #24]
    2f5a:	b2db      	uxtb	r3, r3
    2f5c:	f003 0302 	and.w	r3, r3, #2
    2f60:	2b00      	cmp	r3, #0
    2f62:	d027      	beq.n	2fb4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f64:	693b      	ldr	r3, [r7, #16]
    2f66:	7e1b      	ldrb	r3, [r3, #24]
    2f68:	b2db      	uxtb	r3, r3
    2f6a:	f043 0302 	orr.w	r3, r3, #2
    2f6e:	b2da      	uxtb	r2, r3
    2f70:	693b      	ldr	r3, [r7, #16]
    2f72:	761a      	strb	r2, [r3, #24]
		return;
    2f74:	e029      	b.n	2fca <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2f76:	697b      	ldr	r3, [r7, #20]
    2f78:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2f7a:	693b      	ldr	r3, [r7, #16]
    2f7c:	3314      	adds	r3, #20
    2f7e:	4618      	mov	r0, r3
    2f80:	4b14      	ldr	r3, [pc, #80]	; (2fd4 <timer_process_counted+0xb4>)
    2f82:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2f84:	68bb      	ldr	r3, [r7, #8]
    2f86:	7c1b      	ldrb	r3, [r3, #16]
    2f88:	2b01      	cmp	r3, #1
    2f8a:	d109      	bne.n	2fa0 <timer_process_counted+0x80>
			tmp->time_label = time;
    2f8c:	68bb      	ldr	r3, [r7, #8]
    2f8e:	68fa      	ldr	r2, [r7, #12]
    2f90:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2f92:	693b      	ldr	r3, [r7, #16]
    2f94:	3314      	adds	r3, #20
    2f96:	68fa      	ldr	r2, [r7, #12]
    2f98:	68b9      	ldr	r1, [r7, #8]
    2f9a:	4618      	mov	r0, r3
    2f9c:	4b0e      	ldr	r3, [pc, #56]	; (2fd8 <timer_process_counted+0xb8>)
    2f9e:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2fa0:	693b      	ldr	r3, [r7, #16]
    2fa2:	3314      	adds	r3, #20
    2fa4:	4618      	mov	r0, r3
    2fa6:	4b0a      	ldr	r3, [pc, #40]	; (2fd0 <timer_process_counted+0xb0>)
    2fa8:	4798      	blx	r3
    2faa:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2fac:	68bb      	ldr	r3, [r7, #8]
    2fae:	68db      	ldr	r3, [r3, #12]
    2fb0:	68b8      	ldr	r0, [r7, #8]
    2fb2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d007      	beq.n	2fca <timer_process_counted+0xaa>
    2fba:	697b      	ldr	r3, [r7, #20]
    2fbc:	685b      	ldr	r3, [r3, #4]
    2fbe:	68fa      	ldr	r2, [r7, #12]
    2fc0:	1ad2      	subs	r2, r2, r3
    2fc2:	697b      	ldr	r3, [r7, #20]
    2fc4:	689b      	ldr	r3, [r3, #8]
    2fc6:	429a      	cmp	r2, r3
    2fc8:	d2d5      	bcs.n	2f76 <timer_process_counted+0x56>
	}
}
    2fca:	3718      	adds	r7, #24
    2fcc:	46bd      	mov	sp, r7
    2fce:	bd80      	pop	{r7, pc}
    2fd0:	00002b3d 	.word	0x00002b3d
    2fd4:	00003a89 	.word	0x00003a89
    2fd8:	00002e71 	.word	0x00002e71

00002fdc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2fdc:	b480      	push	{r7}
    2fde:	b085      	sub	sp, #20
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	4603      	mov	r3, r0
    2fe4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fe6:	2300      	movs	r3, #0
    2fe8:	73fb      	strb	r3, [r7, #15]
    2fea:	e029      	b.n	3040 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ff0:	4a19      	ldr	r2, [pc, #100]	; (3058 <_usb_d_find_ep+0x7c>)
    2ff2:	015b      	lsls	r3, r3, #5
    2ff4:	4413      	add	r3, r2
    2ff6:	3301      	adds	r3, #1
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	79fa      	ldrb	r2, [r7, #7]
    2ffc:	429a      	cmp	r2, r3
    2ffe:	d102      	bne.n	3006 <_usb_d_find_ep+0x2a>
			return i;
    3000:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3004:	e022      	b.n	304c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3006:	f997 300f 	ldrsb.w	r3, [r7, #15]
    300a:	4a13      	ldr	r2, [pc, #76]	; (3058 <_usb_d_find_ep+0x7c>)
    300c:	015b      	lsls	r3, r3, #5
    300e:	4413      	add	r3, r2
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	2b00      	cmp	r3, #0
    3014:	d10e      	bne.n	3034 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3016:	79fb      	ldrb	r3, [r7, #7]
    3018:	f003 030f 	and.w	r3, r3, #15
    301c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3020:	490d      	ldr	r1, [pc, #52]	; (3058 <_usb_d_find_ep+0x7c>)
    3022:	0152      	lsls	r2, r2, #5
    3024:	440a      	add	r2, r1
    3026:	3201      	adds	r2, #1
    3028:	7812      	ldrb	r2, [r2, #0]
    302a:	4293      	cmp	r3, r2
    302c:	d102      	bne.n	3034 <_usb_d_find_ep+0x58>
			return i;
    302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3032:	e00b      	b.n	304c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3034:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3038:	b2db      	uxtb	r3, r3
    303a:	3301      	adds	r3, #1
    303c:	b2db      	uxtb	r3, r3
    303e:	73fb      	strb	r3, [r7, #15]
    3040:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3044:	2b03      	cmp	r3, #3
    3046:	ddd1      	ble.n	2fec <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3048:	f04f 33ff 	mov.w	r3, #4294967295
}
    304c:	4618      	mov	r0, r3
    304e:	3714      	adds	r7, #20
    3050:	46bd      	mov	sp, r7
    3052:	f85d 7b04 	ldr.w	r7, [sp], #4
    3056:	4770      	bx	lr
    3058:	200005b0 	.word	0x200005b0

0000305c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    305c:	b580      	push	{r7, lr}
    305e:	b088      	sub	sp, #32
    3060:	af00      	add	r7, sp, #0
    3062:	60ba      	str	r2, [r7, #8]
    3064:	607b      	str	r3, [r7, #4]
    3066:	4603      	mov	r3, r0
    3068:	73fb      	strb	r3, [r7, #15]
    306a:	460b      	mov	r3, r1
    306c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    306e:	68bb      	ldr	r3, [r7, #8]
    3070:	617b      	str	r3, [r7, #20]
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	61bb      	str	r3, [r7, #24]
    3076:	7bbb      	ldrb	r3, [r7, #14]
    3078:	2b00      	cmp	r3, #0
    307a:	d004      	beq.n	3086 <_usb_d_trans+0x2a>
    307c:	7bfb      	ldrb	r3, [r7, #15]
    307e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3082:	b2db      	uxtb	r3, r3
    3084:	e003      	b.n	308e <_usb_d_trans+0x32>
    3086:	7bfb      	ldrb	r3, [r7, #15]
    3088:	f003 030f 	and.w	r3, r3, #15
    308c:	b2db      	uxtb	r3, r3
    308e:	773b      	strb	r3, [r7, #28]
    3090:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3094:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3096:	f107 0314 	add.w	r3, r7, #20
    309a:	4618      	mov	r0, r3
    309c:	4b03      	ldr	r3, [pc, #12]	; (30ac <_usb_d_trans+0x50>)
    309e:	4798      	blx	r3
    30a0:	4603      	mov	r3, r0
}
    30a2:	4618      	mov	r0, r3
    30a4:	3720      	adds	r7, #32
    30a6:	46bd      	mov	sp, r7
    30a8:	bd80      	pop	{r7, pc}
    30aa:	bf00      	nop
    30ac:	0000a909 	.word	0x0000a909

000030b0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    30b0:	b480      	push	{r7}
    30b2:	b085      	sub	sp, #20
    30b4:	af00      	add	r7, sp, #0
    30b6:	60f8      	str	r0, [r7, #12]
    30b8:	60b9      	str	r1, [r7, #8]
    30ba:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    30bc:	2300      	movs	r3, #0
}
    30be:	4618      	mov	r0, r3
    30c0:	3714      	adds	r7, #20
    30c2:	46bd      	mov	sp, r7
    30c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c8:	4770      	bx	lr
	...

000030cc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b086      	sub	sp, #24
    30d0:	af00      	add	r7, sp, #0
    30d2:	4603      	mov	r3, r0
    30d4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30d6:	79fb      	ldrb	r3, [r7, #7]
    30d8:	4618      	mov	r0, r3
    30da:	4b2a      	ldr	r3, [pc, #168]	; (3184 <usb_d_cb_trans_setup+0xb8>)
    30dc:	4798      	blx	r3
    30de:	4603      	mov	r3, r0
    30e0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30e6:	015b      	lsls	r3, r3, #5
    30e8:	4a27      	ldr	r2, [pc, #156]	; (3188 <usb_d_cb_trans_setup+0xbc>)
    30ea:	4413      	add	r3, r2
    30ec:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    30ee:	693b      	ldr	r3, [r7, #16]
    30f0:	330c      	adds	r3, #12
    30f2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    30f4:	79fb      	ldrb	r3, [r7, #7]
    30f6:	68f9      	ldr	r1, [r7, #12]
    30f8:	4618      	mov	r0, r3
    30fa:	4b24      	ldr	r3, [pc, #144]	; (318c <usb_d_cb_trans_setup+0xc0>)
    30fc:	4798      	blx	r3
    30fe:	4603      	mov	r3, r0
    3100:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3102:	7afb      	ldrb	r3, [r7, #11]
    3104:	2b08      	cmp	r3, #8
    3106:	d00d      	beq.n	3124 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3108:	79fb      	ldrb	r3, [r7, #7]
    310a:	2101      	movs	r1, #1
    310c:	4618      	mov	r0, r3
    310e:	4b20      	ldr	r3, [pc, #128]	; (3190 <usb_d_cb_trans_setup+0xc4>)
    3110:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3112:	79fb      	ldrb	r3, [r7, #7]
    3114:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3118:	b2db      	uxtb	r3, r3
    311a:	2101      	movs	r1, #1
    311c:	4618      	mov	r0, r3
    311e:	4b1c      	ldr	r3, [pc, #112]	; (3190 <usb_d_cb_trans_setup+0xc4>)
    3120:	4798      	blx	r3
		return;
    3122:	e02b      	b.n	317c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3124:	79fb      	ldrb	r3, [r7, #7]
    3126:	2100      	movs	r1, #0
    3128:	4618      	mov	r0, r3
    312a:	4b19      	ldr	r3, [pc, #100]	; (3190 <usb_d_cb_trans_setup+0xc4>)
    312c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    312e:	79fb      	ldrb	r3, [r7, #7]
    3130:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3134:	b2db      	uxtb	r3, r3
    3136:	2100      	movs	r1, #0
    3138:	4618      	mov	r0, r3
    313a:	4b15      	ldr	r3, [pc, #84]	; (3190 <usb_d_cb_trans_setup+0xc4>)
    313c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    313e:	693b      	ldr	r3, [r7, #16]
    3140:	2201      	movs	r2, #1
    3142:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3144:	693b      	ldr	r3, [r7, #16]
    3146:	695b      	ldr	r3, [r3, #20]
    3148:	79fa      	ldrb	r2, [r7, #7]
    314a:	68f9      	ldr	r1, [r7, #12]
    314c:	4610      	mov	r0, r2
    314e:	4798      	blx	r3
    3150:	4603      	mov	r3, r0
    3152:	f083 0301 	eor.w	r3, r3, #1
    3156:	b2db      	uxtb	r3, r3
    3158:	2b00      	cmp	r3, #0
    315a:	d00f      	beq.n	317c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    315c:	693b      	ldr	r3, [r7, #16]
    315e:	2205      	movs	r2, #5
    3160:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3162:	79fb      	ldrb	r3, [r7, #7]
    3164:	2101      	movs	r1, #1
    3166:	4618      	mov	r0, r3
    3168:	4b09      	ldr	r3, [pc, #36]	; (3190 <usb_d_cb_trans_setup+0xc4>)
    316a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    316c:	79fb      	ldrb	r3, [r7, #7]
    316e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3172:	b2db      	uxtb	r3, r3
    3174:	2101      	movs	r1, #1
    3176:	4618      	mov	r0, r3
    3178:	4b05      	ldr	r3, [pc, #20]	; (3190 <usb_d_cb_trans_setup+0xc4>)
    317a:	4798      	blx	r3
	}
}
    317c:	3718      	adds	r7, #24
    317e:	46bd      	mov	sp, r7
    3180:	bd80      	pop	{r7, pc}
    3182:	bf00      	nop
    3184:	00002fdd 	.word	0x00002fdd
    3188:	200005b0 	.word	0x200005b0
    318c:	0000a861 	.word	0x0000a861
    3190:	0000a6d9 	.word	0x0000a6d9

00003194 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3194:	b580      	push	{r7, lr}
    3196:	b084      	sub	sp, #16
    3198:	af00      	add	r7, sp, #0
    319a:	4603      	mov	r3, r0
    319c:	6039      	str	r1, [r7, #0]
    319e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    31a0:	79fb      	ldrb	r3, [r7, #7]
    31a2:	4618      	mov	r0, r3
    31a4:	4b0d      	ldr	r3, [pc, #52]	; (31dc <usb_d_cb_trans_more+0x48>)
    31a6:	4798      	blx	r3
    31a8:	4603      	mov	r3, r0
    31aa:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31b0:	015b      	lsls	r3, r3, #5
    31b2:	4a0b      	ldr	r2, [pc, #44]	; (31e0 <usb_d_cb_trans_more+0x4c>)
    31b4:	4413      	add	r3, r2
    31b6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    31b8:	68bb      	ldr	r3, [r7, #8]
    31ba:	789b      	ldrb	r3, [r3, #2]
    31bc:	2b03      	cmp	r3, #3
    31be:	d107      	bne.n	31d0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    31c0:	68bb      	ldr	r3, [r7, #8]
    31c2:	699b      	ldr	r3, [r3, #24]
    31c4:	79fa      	ldrb	r2, [r7, #7]
    31c6:	6839      	ldr	r1, [r7, #0]
    31c8:	4610      	mov	r0, r2
    31ca:	4798      	blx	r3
    31cc:	4603      	mov	r3, r0
    31ce:	e000      	b.n	31d2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    31d0:	2300      	movs	r3, #0
}
    31d2:	4618      	mov	r0, r3
    31d4:	3710      	adds	r7, #16
    31d6:	46bd      	mov	sp, r7
    31d8:	bd80      	pop	{r7, pc}
    31da:	bf00      	nop
    31dc:	00002fdd 	.word	0x00002fdd
    31e0:	200005b0 	.word	0x200005b0

000031e4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    31e4:	b590      	push	{r4, r7, lr}
    31e6:	b087      	sub	sp, #28
    31e8:	af02      	add	r7, sp, #8
    31ea:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	789b      	ldrb	r3, [r3, #2]
    31f0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	7b1b      	ldrb	r3, [r3, #12]
    31f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    31fa:	2b00      	cmp	r3, #0
    31fc:	bf14      	ite	ne
    31fe:	2301      	movne	r3, #1
    3200:	2300      	moveq	r3, #0
    3202:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3204:	7bfb      	ldrb	r3, [r7, #15]
    3206:	2b03      	cmp	r3, #3
    3208:	d13a      	bne.n	3280 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	69db      	ldr	r3, [r3, #28]
    320e:	687a      	ldr	r2, [r7, #4]
    3210:	7850      	ldrb	r0, [r2, #1]
    3212:	687a      	ldr	r2, [r7, #4]
    3214:	320c      	adds	r2, #12
    3216:	2101      	movs	r1, #1
    3218:	4798      	blx	r3
    321a:	4603      	mov	r3, r0
    321c:	737b      	strb	r3, [r7, #13]
		if (err) {
    321e:	7b7b      	ldrb	r3, [r7, #13]
    3220:	2b00      	cmp	r3, #0
    3222:	d015      	beq.n	3250 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3224:	687b      	ldr	r3, [r7, #4]
    3226:	2205      	movs	r2, #5
    3228:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	2202      	movs	r2, #2
    322e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3230:	7bbb      	ldrb	r3, [r7, #14]
    3232:	2b00      	cmp	r3, #0
    3234:	d002      	beq.n	323c <usb_d_ctrl_trans_done+0x58>
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	785b      	ldrb	r3, [r3, #1]
    323a:	e004      	b.n	3246 <usb_d_ctrl_trans_done+0x62>
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	785b      	ldrb	r3, [r3, #1]
    3240:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3244:	b2db      	uxtb	r3, r3
    3246:	2101      	movs	r1, #1
    3248:	4618      	mov	r0, r3
    324a:	4b15      	ldr	r3, [pc, #84]	; (32a0 <usb_d_ctrl_trans_done+0xbc>)
    324c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    324e:	e022      	b.n	3296 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	2204      	movs	r2, #4
    3254:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	7858      	ldrb	r0, [r3, #1]
    325a:	7bbb      	ldrb	r3, [r7, #14]
    325c:	2b00      	cmp	r3, #0
    325e:	bf14      	ite	ne
    3260:	2301      	movne	r3, #1
    3262:	2300      	moveq	r3, #0
    3264:	b2db      	uxtb	r3, r3
    3266:	f083 0301 	eor.w	r3, r3, #1
    326a:	b2db      	uxtb	r3, r3
    326c:	f003 0301 	and.w	r3, r3, #1
    3270:	b2d9      	uxtb	r1, r3
    3272:	2301      	movs	r3, #1
    3274:	9300      	str	r3, [sp, #0]
    3276:	2300      	movs	r3, #0
    3278:	2200      	movs	r2, #0
    327a:	4c0a      	ldr	r4, [pc, #40]	; (32a4 <usb_d_ctrl_trans_done+0xc0>)
    327c:	47a0      	blx	r4
}
    327e:	e00a      	b.n	3296 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	69db      	ldr	r3, [r3, #28]
    3284:	687a      	ldr	r2, [r7, #4]
    3286:	7850      	ldrb	r0, [r2, #1]
    3288:	687a      	ldr	r2, [r7, #4]
    328a:	320c      	adds	r2, #12
    328c:	2100      	movs	r1, #0
    328e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2202      	movs	r2, #2
    3294:	709a      	strb	r2, [r3, #2]
}
    3296:	bf00      	nop
    3298:	3714      	adds	r7, #20
    329a:	46bd      	mov	sp, r7
    329c:	bd90      	pop	{r4, r7, pc}
    329e:	bf00      	nop
    32a0:	0000a6d9 	.word	0x0000a6d9
    32a4:	0000305d 	.word	0x0000305d

000032a8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b086      	sub	sp, #24
    32ac:	af00      	add	r7, sp, #0
    32ae:	4603      	mov	r3, r0
    32b0:	60b9      	str	r1, [r7, #8]
    32b2:	607a      	str	r2, [r7, #4]
    32b4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    32b6:	7bfb      	ldrb	r3, [r7, #15]
    32b8:	4618      	mov	r0, r3
    32ba:	4b2f      	ldr	r3, [pc, #188]	; (3378 <_usb_d_cb_trans_done+0xd0>)
    32bc:	4798      	blx	r3
    32be:	4603      	mov	r3, r0
    32c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32c6:	015b      	lsls	r3, r3, #5
    32c8:	4a2c      	ldr	r2, [pc, #176]	; (337c <_usb_d_cb_trans_done+0xd4>)
    32ca:	4413      	add	r3, r2
    32cc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    32ce:	68bb      	ldr	r3, [r7, #8]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d10e      	bne.n	32f2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    32d4:	693b      	ldr	r3, [r7, #16]
    32d6:	2200      	movs	r2, #0
    32d8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32da:	693b      	ldr	r3, [r7, #16]
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	2b00      	cmp	r3, #0
    32e0:	d103      	bne.n	32ea <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    32e2:	6938      	ldr	r0, [r7, #16]
    32e4:	4b26      	ldr	r3, [pc, #152]	; (3380 <_usb_d_cb_trans_done+0xd8>)
    32e6:	4798      	blx	r3
			return;
    32e8:	e043      	b.n	3372 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    32ea:	693b      	ldr	r3, [r7, #16]
    32ec:	2201      	movs	r2, #1
    32ee:	709a      	strb	r2, [r3, #2]
    32f0:	e038      	b.n	3364 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    32f2:	68bb      	ldr	r3, [r7, #8]
    32f4:	2b01      	cmp	r3, #1
    32f6:	d113      	bne.n	3320 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    32f8:	693b      	ldr	r3, [r7, #16]
    32fa:	2202      	movs	r2, #2
    32fc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32fe:	693b      	ldr	r3, [r7, #16]
    3300:	781b      	ldrb	r3, [r3, #0]
    3302:	2b00      	cmp	r3, #0
    3304:	d108      	bne.n	3318 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	2202      	movs	r2, #2
    330a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    330c:	7bfb      	ldrb	r3, [r7, #15]
    330e:	2100      	movs	r1, #0
    3310:	4618      	mov	r0, r3
    3312:	4b1c      	ldr	r3, [pc, #112]	; (3384 <_usb_d_cb_trans_done+0xdc>)
    3314:	4798      	blx	r3
    3316:	e025      	b.n	3364 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3318:	693b      	ldr	r3, [r7, #16]
    331a:	2205      	movs	r2, #5
    331c:	709a      	strb	r2, [r3, #2]
    331e:	e021      	b.n	3364 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3320:	68bb      	ldr	r3, [r7, #8]
    3322:	2b02      	cmp	r3, #2
    3324:	d10e      	bne.n	3344 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3326:	693b      	ldr	r3, [r7, #16]
    3328:	2204      	movs	r2, #4
    332a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    332c:	693b      	ldr	r3, [r7, #16]
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	2b00      	cmp	r3, #0
    3332:	d103      	bne.n	333c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3334:	693b      	ldr	r3, [r7, #16]
    3336:	2202      	movs	r2, #2
    3338:	709a      	strb	r2, [r3, #2]
			return;
    333a:	e01a      	b.n	3372 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    333c:	693b      	ldr	r3, [r7, #16]
    333e:	2201      	movs	r2, #1
    3340:	709a      	strb	r2, [r3, #2]
    3342:	e00f      	b.n	3364 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3344:	68bb      	ldr	r3, [r7, #8]
    3346:	2b03      	cmp	r3, #3
    3348:	d106      	bne.n	3358 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    334a:	693b      	ldr	r3, [r7, #16]
    334c:	2200      	movs	r2, #0
    334e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3350:	693b      	ldr	r3, [r7, #16]
    3352:	2205      	movs	r2, #5
    3354:	70da      	strb	r2, [r3, #3]
    3356:	e005      	b.n	3364 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3358:	693b      	ldr	r3, [r7, #16]
    335a:	2206      	movs	r2, #6
    335c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    335e:	693b      	ldr	r3, [r7, #16]
    3360:	2206      	movs	r2, #6
    3362:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3364:	693b      	ldr	r3, [r7, #16]
    3366:	69db      	ldr	r3, [r3, #28]
    3368:	693a      	ldr	r2, [r7, #16]
    336a:	78d1      	ldrb	r1, [r2, #3]
    336c:	687a      	ldr	r2, [r7, #4]
    336e:	7bf8      	ldrb	r0, [r7, #15]
    3370:	4798      	blx	r3
}
    3372:	3718      	adds	r7, #24
    3374:	46bd      	mov	sp, r7
    3376:	bd80      	pop	{r7, pc}
    3378:	00002fdd 	.word	0x00002fdd
    337c:	200005b0 	.word	0x200005b0
    3380:	000031e5 	.word	0x000031e5
    3384:	0000a6d9 	.word	0x0000a6d9

00003388 <usb_d_init>:

int32_t usb_d_init(void)
{
    3388:	b580      	push	{r7, lr}
    338a:	b082      	sub	sp, #8
    338c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    338e:	4b21      	ldr	r3, [pc, #132]	; (3414 <usb_d_init+0x8c>)
    3390:	4798      	blx	r3
    3392:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3394:	683b      	ldr	r3, [r7, #0]
    3396:	2b00      	cmp	r3, #0
    3398:	da01      	bge.n	339e <usb_d_init+0x16>
		return rc;
    339a:	683b      	ldr	r3, [r7, #0]
    339c:	e036      	b.n	340c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    339e:	2280      	movs	r2, #128	; 0x80
    33a0:	2100      	movs	r1, #0
    33a2:	481d      	ldr	r0, [pc, #116]	; (3418 <usb_d_init+0x90>)
    33a4:	4b1d      	ldr	r3, [pc, #116]	; (341c <usb_d_init+0x94>)
    33a6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33a8:	2300      	movs	r3, #0
    33aa:	71fb      	strb	r3, [r7, #7]
    33ac:	e01e      	b.n	33ec <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    33ae:	79fb      	ldrb	r3, [r7, #7]
    33b0:	4a19      	ldr	r2, [pc, #100]	; (3418 <usb_d_init+0x90>)
    33b2:	015b      	lsls	r3, r3, #5
    33b4:	4413      	add	r3, r2
    33b6:	3301      	adds	r3, #1
    33b8:	22ff      	movs	r2, #255	; 0xff
    33ba:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    33bc:	79fb      	ldrb	r3, [r7, #7]
    33be:	4a16      	ldr	r2, [pc, #88]	; (3418 <usb_d_init+0x90>)
    33c0:	015b      	lsls	r3, r3, #5
    33c2:	4413      	add	r3, r2
    33c4:	3314      	adds	r3, #20
    33c6:	4a16      	ldr	r2, [pc, #88]	; (3420 <usb_d_init+0x98>)
    33c8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    33ca:	79fb      	ldrb	r3, [r7, #7]
    33cc:	4a12      	ldr	r2, [pc, #72]	; (3418 <usb_d_init+0x90>)
    33ce:	015b      	lsls	r3, r3, #5
    33d0:	4413      	add	r3, r2
    33d2:	3318      	adds	r3, #24
    33d4:	4a12      	ldr	r2, [pc, #72]	; (3420 <usb_d_init+0x98>)
    33d6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    33d8:	79fb      	ldrb	r3, [r7, #7]
    33da:	4a0f      	ldr	r2, [pc, #60]	; (3418 <usb_d_init+0x90>)
    33dc:	015b      	lsls	r3, r3, #5
    33de:	4413      	add	r3, r2
    33e0:	331c      	adds	r3, #28
    33e2:	4a0f      	ldr	r2, [pc, #60]	; (3420 <usb_d_init+0x98>)
    33e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33e6:	79fb      	ldrb	r3, [r7, #7]
    33e8:	3301      	adds	r3, #1
    33ea:	71fb      	strb	r3, [r7, #7]
    33ec:	79fb      	ldrb	r3, [r7, #7]
    33ee:	2b03      	cmp	r3, #3
    33f0:	d9dd      	bls.n	33ae <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    33f2:	490c      	ldr	r1, [pc, #48]	; (3424 <usb_d_init+0x9c>)
    33f4:	2000      	movs	r0, #0
    33f6:	4b0c      	ldr	r3, [pc, #48]	; (3428 <usb_d_init+0xa0>)
    33f8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    33fa:	490c      	ldr	r1, [pc, #48]	; (342c <usb_d_init+0xa4>)
    33fc:	2001      	movs	r0, #1
    33fe:	4b0a      	ldr	r3, [pc, #40]	; (3428 <usb_d_init+0xa0>)
    3400:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3402:	490b      	ldr	r1, [pc, #44]	; (3430 <usb_d_init+0xa8>)
    3404:	2002      	movs	r0, #2
    3406:	4b08      	ldr	r3, [pc, #32]	; (3428 <usb_d_init+0xa0>)
    3408:	4798      	blx	r3
	return ERR_NONE;
    340a:	2300      	movs	r3, #0
}
    340c:	4618      	mov	r0, r3
    340e:	3708      	adds	r7, #8
    3410:	46bd      	mov	sp, r7
    3412:	bd80      	pop	{r7, pc}
    3414:	00009f21 	.word	0x00009f21
    3418:	200005b0 	.word	0x200005b0
    341c:	0000e95d 	.word	0x0000e95d
    3420:	000030b1 	.word	0x000030b1
    3424:	000030cd 	.word	0x000030cd
    3428:	0000ab69 	.word	0x0000ab69
    342c:	00003195 	.word	0x00003195
    3430:	000032a9 	.word	0x000032a9

00003434 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3434:	b580      	push	{r7, lr}
    3436:	b082      	sub	sp, #8
    3438:	af00      	add	r7, sp, #0
    343a:	4603      	mov	r3, r0
    343c:	6039      	str	r1, [r7, #0]
    343e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3440:	79fb      	ldrb	r3, [r7, #7]
    3442:	6839      	ldr	r1, [r7, #0]
    3444:	4618      	mov	r0, r3
    3446:	4b03      	ldr	r3, [pc, #12]	; (3454 <usb_d_register_callback+0x20>)
    3448:	4798      	blx	r3
}
    344a:	bf00      	nop
    344c:	3708      	adds	r7, #8
    344e:	46bd      	mov	sp, r7
    3450:	bd80      	pop	{r7, pc}
    3452:	bf00      	nop
    3454:	0000ab21 	.word	0x0000ab21

00003458 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3458:	b580      	push	{r7, lr}
    345a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    345c:	4b02      	ldr	r3, [pc, #8]	; (3468 <usb_d_enable+0x10>)
    345e:	4798      	blx	r3
    3460:	4603      	mov	r3, r0
}
    3462:	4618      	mov	r0, r3
    3464:	bd80      	pop	{r7, pc}
    3466:	bf00      	nop
    3468:	0000a011 	.word	0x0000a011

0000346c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    346c:	b580      	push	{r7, lr}
    346e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3470:	4b01      	ldr	r3, [pc, #4]	; (3478 <usb_d_attach+0xc>)
    3472:	4798      	blx	r3
}
    3474:	bf00      	nop
    3476:	bd80      	pop	{r7, pc}
    3478:	0000a095 	.word	0x0000a095

0000347c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af00      	add	r7, sp, #0
    3482:	4603      	mov	r3, r0
    3484:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3486:	79fb      	ldrb	r3, [r7, #7]
    3488:	4618      	mov	r0, r3
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <usb_d_set_address+0x1c>)
    348c:	4798      	blx	r3
}
    348e:	bf00      	nop
    3490:	3708      	adds	r7, #8
    3492:	46bd      	mov	sp, r7
    3494:	bd80      	pop	{r7, pc}
    3496:	bf00      	nop
    3498:	0000a0a9 	.word	0x0000a0a9

0000349c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    349c:	b580      	push	{r7, lr}
    349e:	b082      	sub	sp, #8
    34a0:	af00      	add	r7, sp, #0
    34a2:	4603      	mov	r3, r0
    34a4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    34a6:	79fb      	ldrb	r3, [r7, #7]
    34a8:	b29b      	uxth	r3, r3
    34aa:	461a      	mov	r2, r3
    34ac:	2100      	movs	r1, #0
    34ae:	2000      	movs	r0, #0
    34b0:	4b03      	ldr	r3, [pc, #12]	; (34c0 <usb_d_ep0_init+0x24>)
    34b2:	4798      	blx	r3
    34b4:	4603      	mov	r3, r0
}
    34b6:	4618      	mov	r0, r3
    34b8:	3708      	adds	r7, #8
    34ba:	46bd      	mov	sp, r7
    34bc:	bd80      	pop	{r7, pc}
    34be:	bf00      	nop
    34c0:	000034c5 	.word	0x000034c5

000034c4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b086      	sub	sp, #24
    34c8:	af00      	add	r7, sp, #0
    34ca:	4603      	mov	r3, r0
    34cc:	71fb      	strb	r3, [r7, #7]
    34ce:	460b      	mov	r3, r1
    34d0:	71bb      	strb	r3, [r7, #6]
    34d2:	4613      	mov	r3, r2
    34d4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    34d6:	79fb      	ldrb	r3, [r7, #7]
    34d8:	4618      	mov	r0, r3
    34da:	4b1e      	ldr	r3, [pc, #120]	; (3554 <usb_d_ep_init+0x90>)
    34dc:	4798      	blx	r3
    34de:	4603      	mov	r3, r0
    34e0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34e6:	015b      	lsls	r3, r3, #5
    34e8:	4a1b      	ldr	r2, [pc, #108]	; (3558 <usb_d_ep_init+0x94>)
    34ea:	4413      	add	r3, r2
    34ec:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    34ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34f2:	2b00      	cmp	r3, #0
    34f4:	db02      	blt.n	34fc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    34f6:	f06f 0313 	mvn.w	r3, #19
    34fa:	e027      	b.n	354c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    34fc:	20ff      	movs	r0, #255	; 0xff
    34fe:	4b15      	ldr	r3, [pc, #84]	; (3554 <usb_d_ep_init+0x90>)
    3500:	4798      	blx	r3
    3502:	4603      	mov	r3, r0
    3504:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3506:	f997 3017 	ldrsb.w	r3, [r7, #23]
    350a:	2b00      	cmp	r3, #0
    350c:	da02      	bge.n	3514 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    350e:	f06f 0314 	mvn.w	r3, #20
    3512:	e01b      	b.n	354c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3514:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3518:	015b      	lsls	r3, r3, #5
    351a:	4a0f      	ldr	r2, [pc, #60]	; (3558 <usb_d_ep_init+0x94>)
    351c:	4413      	add	r3, r2
    351e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3520:	88ba      	ldrh	r2, [r7, #4]
    3522:	79b9      	ldrb	r1, [r7, #6]
    3524:	79fb      	ldrb	r3, [r7, #7]
    3526:	4618      	mov	r0, r3
    3528:	4b0c      	ldr	r3, [pc, #48]	; (355c <usb_d_ep_init+0x98>)
    352a:	4798      	blx	r3
    352c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    352e:	68fb      	ldr	r3, [r7, #12]
    3530:	2b00      	cmp	r3, #0
    3532:	da01      	bge.n	3538 <usb_d_ep_init+0x74>
		return rc;
    3534:	68fb      	ldr	r3, [r7, #12]
    3536:	e009      	b.n	354c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3538:	693b      	ldr	r3, [r7, #16]
    353a:	79fa      	ldrb	r2, [r7, #7]
    353c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    353e:	79bb      	ldrb	r3, [r7, #6]
    3540:	f003 0303 	and.w	r3, r3, #3
    3544:	b2da      	uxtb	r2, r3
    3546:	693b      	ldr	r3, [r7, #16]
    3548:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    354a:	2300      	movs	r3, #0
}
    354c:	4618      	mov	r0, r3
    354e:	3718      	adds	r7, #24
    3550:	46bd      	mov	sp, r7
    3552:	bd80      	pop	{r7, pc}
    3554:	00002fdd 	.word	0x00002fdd
    3558:	200005b0 	.word	0x200005b0
    355c:	0000a149 	.word	0x0000a149

00003560 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3560:	b580      	push	{r7, lr}
    3562:	b084      	sub	sp, #16
    3564:	af00      	add	r7, sp, #0
    3566:	4603      	mov	r3, r0
    3568:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    356a:	79fb      	ldrb	r3, [r7, #7]
    356c:	4618      	mov	r0, r3
    356e:	4b0d      	ldr	r3, [pc, #52]	; (35a4 <usb_d_ep_deinit+0x44>)
    3570:	4798      	blx	r3
    3572:	4603      	mov	r3, r0
    3574:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3576:	f997 300f 	ldrsb.w	r3, [r7, #15]
    357a:	015b      	lsls	r3, r3, #5
    357c:	4a0a      	ldr	r2, [pc, #40]	; (35a8 <usb_d_ep_deinit+0x48>)
    357e:	4413      	add	r3, r2
    3580:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3582:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3586:	2b00      	cmp	r3, #0
    3588:	db07      	blt.n	359a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    358a:	79fb      	ldrb	r3, [r7, #7]
    358c:	4618      	mov	r0, r3
    358e:	4b07      	ldr	r3, [pc, #28]	; (35ac <usb_d_ep_deinit+0x4c>)
    3590:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3592:	68bb      	ldr	r3, [r7, #8]
    3594:	22ff      	movs	r2, #255	; 0xff
    3596:	705a      	strb	r2, [r3, #1]
    3598:	e000      	b.n	359c <usb_d_ep_deinit+0x3c>
		return;
    359a:	bf00      	nop
}
    359c:	3710      	adds	r7, #16
    359e:	46bd      	mov	sp, r7
    35a0:	bd80      	pop	{r7, pc}
    35a2:	bf00      	nop
    35a4:	00002fdd 	.word	0x00002fdd
    35a8:	200005b0 	.word	0x200005b0
    35ac:	0000a27d 	.word	0x0000a27d

000035b0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b086      	sub	sp, #24
    35b4:	af00      	add	r7, sp, #0
    35b6:	4603      	mov	r3, r0
    35b8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35ba:	79fb      	ldrb	r3, [r7, #7]
    35bc:	4618      	mov	r0, r3
    35be:	4b15      	ldr	r3, [pc, #84]	; (3614 <usb_d_ep_enable+0x64>)
    35c0:	4798      	blx	r3
    35c2:	4603      	mov	r3, r0
    35c4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35ca:	015b      	lsls	r3, r3, #5
    35cc:	4a12      	ldr	r2, [pc, #72]	; (3618 <usb_d_ep_enable+0x68>)
    35ce:	4413      	add	r3, r2
    35d0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    35d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35d6:	2b00      	cmp	r3, #0
    35d8:	da02      	bge.n	35e0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    35da:	f06f 0311 	mvn.w	r3, #17
    35de:	e014      	b.n	360a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    35e0:	693b      	ldr	r3, [r7, #16]
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	2b00      	cmp	r3, #0
    35e6:	d101      	bne.n	35ec <usb_d_ep_enable+0x3c>
    35e8:	2202      	movs	r2, #2
    35ea:	e000      	b.n	35ee <usb_d_ep_enable+0x3e>
    35ec:	2201      	movs	r2, #1
    35ee:	693b      	ldr	r3, [r7, #16]
    35f0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    35f2:	79fb      	ldrb	r3, [r7, #7]
    35f4:	4618      	mov	r0, r3
    35f6:	4b09      	ldr	r3, [pc, #36]	; (361c <usb_d_ep_enable+0x6c>)
    35f8:	4798      	blx	r3
    35fa:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    35fc:	68fb      	ldr	r3, [r7, #12]
    35fe:	2b00      	cmp	r3, #0
    3600:	da02      	bge.n	3608 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3602:	693b      	ldr	r3, [r7, #16]
    3604:	2200      	movs	r2, #0
    3606:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3608:	68fb      	ldr	r3, [r7, #12]
}
    360a:	4618      	mov	r0, r3
    360c:	3718      	adds	r7, #24
    360e:	46bd      	mov	sp, r7
    3610:	bd80      	pop	{r7, pc}
    3612:	bf00      	nop
    3614:	00002fdd 	.word	0x00002fdd
    3618:	200005b0 	.word	0x200005b0
    361c:	0000a361 	.word	0x0000a361

00003620 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3620:	b590      	push	{r4, r7, lr}
    3622:	b08d      	sub	sp, #52	; 0x34
    3624:	af02      	add	r7, sp, #8
    3626:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	7a1b      	ldrb	r3, [r3, #8]
    362c:	4618      	mov	r0, r3
    362e:	4b51      	ldr	r3, [pc, #324]	; (3774 <usb_d_ep_transfer+0x154>)
    3630:	4798      	blx	r3
    3632:	4603      	mov	r3, r0
    3634:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3636:	f997 301f 	ldrsb.w	r3, [r7, #31]
    363a:	015b      	lsls	r3, r3, #5
    363c:	4a4e      	ldr	r2, [pc, #312]	; (3778 <usb_d_ep_transfer+0x158>)
    363e:	4413      	add	r3, r2
    3640:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3642:	687b      	ldr	r3, [r7, #4]
    3644:	7a1b      	ldrb	r3, [r3, #8]
    3646:	f003 0380 	and.w	r3, r3, #128	; 0x80
    364a:	2b00      	cmp	r3, #0
    364c:	bf14      	ite	ne
    364e:	2301      	movne	r3, #1
    3650:	2300      	moveq	r3, #0
    3652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	7a5b      	ldrb	r3, [r3, #9]
    365a:	2b00      	cmp	r3, #0
    365c:	bf14      	ite	ne
    365e:	2301      	movne	r3, #1
    3660:	2300      	moveq	r3, #0
    3662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	685b      	ldr	r3, [r3, #4]
    366a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    366c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3670:	2b00      	cmp	r3, #0
    3672:	da02      	bge.n	367a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3674:	f06f 0311 	mvn.w	r3, #17
    3678:	e077      	b.n	376a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    367a:	f107 0308 	add.w	r3, r7, #8
    367e:	4618      	mov	r0, r3
    3680:	4b3e      	ldr	r3, [pc, #248]	; (377c <usb_d_ep_transfer+0x15c>)
    3682:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3684:	69bb      	ldr	r3, [r7, #24]
    3686:	789b      	ldrb	r3, [r3, #2]
    3688:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    368a:	7bfb      	ldrb	r3, [r7, #15]
    368c:	b2db      	uxtb	r3, r3
    368e:	2b01      	cmp	r3, #1
    3690:	d10c      	bne.n	36ac <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3692:	69bb      	ldr	r3, [r7, #24]
    3694:	2203      	movs	r2, #3
    3696:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3698:	f107 0308 	add.w	r3, r7, #8
    369c:	4618      	mov	r0, r3
    369e:	4b38      	ldr	r3, [pc, #224]	; (3780 <usb_d_ep_transfer+0x160>)
    36a0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    36a2:	69bb      	ldr	r3, [r7, #24]
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d151      	bne.n	374e <usb_d_ep_transfer+0x12e>
    36aa:	e017      	b.n	36dc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    36ac:	f107 0308 	add.w	r3, r7, #8
    36b0:	4618      	mov	r0, r3
    36b2:	4b33      	ldr	r3, [pc, #204]	; (3780 <usb_d_ep_transfer+0x160>)
    36b4:	4798      	blx	r3
		switch (state) {
    36b6:	7bfb      	ldrb	r3, [r7, #15]
    36b8:	b2db      	uxtb	r3, r3
    36ba:	2b05      	cmp	r3, #5
    36bc:	d004      	beq.n	36c8 <usb_d_ep_transfer+0xa8>
    36be:	2b06      	cmp	r3, #6
    36c0:	d004      	beq.n	36cc <usb_d_ep_transfer+0xac>
    36c2:	2b00      	cmp	r3, #0
    36c4:	d005      	beq.n	36d2 <usb_d_ep_transfer+0xb2>
    36c6:	e007      	b.n	36d8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    36c8:	2302      	movs	r3, #2
    36ca:	e04e      	b.n	376a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    36cc:	f06f 030f 	mvn.w	r3, #15
    36d0:	e04b      	b.n	376a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    36d2:	f06f 0312 	mvn.w	r3, #18
    36d6:	e048      	b.n	376a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    36d8:	2301      	movs	r3, #1
    36da:	e046      	b.n	376a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    36dc:	69bb      	ldr	r3, [r7, #24]
    36de:	7c9b      	ldrb	r3, [r3, #18]
    36e0:	b29a      	uxth	r2, r3
    36e2:	69bb      	ldr	r3, [r7, #24]
    36e4:	7cdb      	ldrb	r3, [r3, #19]
    36e6:	b29b      	uxth	r3, r3
    36e8:	021b      	lsls	r3, r3, #8
    36ea:	b29b      	uxth	r3, r3
    36ec:	4413      	add	r3, r2
    36ee:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    36f0:	8afb      	ldrh	r3, [r7, #22]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d10b      	bne.n	370e <usb_d_ep_transfer+0xee>
			dir                 = true;
    36f6:	2301      	movs	r3, #1
    36f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    36fc:	2300      	movs	r3, #0
    36fe:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3700:	2301      	movs	r3, #1
    3702:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3706:	69bb      	ldr	r3, [r7, #24]
    3708:	2204      	movs	r2, #4
    370a:	709a      	strb	r2, [r3, #2]
    370c:	e01f      	b.n	374e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    370e:	69bb      	ldr	r3, [r7, #24]
    3710:	7b1b      	ldrb	r3, [r3, #12]
    3712:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3716:	2b00      	cmp	r3, #0
    3718:	bf14      	ite	ne
    371a:	2301      	movne	r3, #1
    371c:	2300      	moveq	r3, #0
    371e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3722:	8afa      	ldrh	r2, [r7, #22]
    3724:	6a3b      	ldr	r3, [r7, #32]
    3726:	429a      	cmp	r2, r3
    3728:	d201      	bcs.n	372e <usb_d_ep_transfer+0x10e>
				len = req_len;
    372a:	8afb      	ldrh	r3, [r7, #22]
    372c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    372e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3732:	2b00      	cmp	r3, #0
    3734:	d008      	beq.n	3748 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3736:	8afa      	ldrh	r2, [r7, #22]
    3738:	6a3b      	ldr	r3, [r7, #32]
    373a:	429a      	cmp	r2, r3
    373c:	bf8c      	ite	hi
    373e:	2301      	movhi	r3, #1
    3740:	2300      	movls	r3, #0
    3742:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3746:	e002      	b.n	374e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3748:	2300      	movs	r3, #0
    374a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	7a18      	ldrb	r0, [r3, #8]
    3752:	687b      	ldr	r3, [r7, #4]
    3754:	681a      	ldr	r2, [r3, #0]
    3756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    375a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    375e:	9300      	str	r3, [sp, #0]
    3760:	6a3b      	ldr	r3, [r7, #32]
    3762:	4c08      	ldr	r4, [pc, #32]	; (3784 <usb_d_ep_transfer+0x164>)
    3764:	47a0      	blx	r4
    3766:	6138      	str	r0, [r7, #16]
	return rc;
    3768:	693b      	ldr	r3, [r7, #16]
}
    376a:	4618      	mov	r0, r3
    376c:	372c      	adds	r7, #44	; 0x2c
    376e:	46bd      	mov	sp, r7
    3770:	bd90      	pop	{r4, r7, pc}
    3772:	bf00      	nop
    3774:	00002fdd 	.word	0x00002fdd
    3778:	200005b0 	.word	0x200005b0
    377c:	0000b2d5 	.word	0x0000b2d5
    3780:	0000b2fb 	.word	0x0000b2fb
    3784:	0000305d 	.word	0x0000305d

00003788 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3788:	b580      	push	{r7, lr}
    378a:	b084      	sub	sp, #16
    378c:	af00      	add	r7, sp, #0
    378e:	4603      	mov	r3, r0
    3790:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3792:	79fb      	ldrb	r3, [r7, #7]
    3794:	4618      	mov	r0, r3
    3796:	4b0e      	ldr	r3, [pc, #56]	; (37d0 <usb_d_ep_abort+0x48>)
    3798:	4798      	blx	r3
    379a:	4603      	mov	r3, r0
    379c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37a2:	015b      	lsls	r3, r3, #5
    37a4:	4a0b      	ldr	r2, [pc, #44]	; (37d4 <usb_d_ep_abort+0x4c>)
    37a6:	4413      	add	r3, r2
    37a8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    37aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37ae:	2b00      	cmp	r3, #0
    37b0:	db0a      	blt.n	37c8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    37b2:	79fb      	ldrb	r3, [r7, #7]
    37b4:	4618      	mov	r0, r3
    37b6:	4b08      	ldr	r3, [pc, #32]	; (37d8 <usb_d_ep_abort+0x50>)
    37b8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    37ba:	68bb      	ldr	r3, [r7, #8]
    37bc:	2201      	movs	r2, #1
    37be:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    37c0:	68bb      	ldr	r3, [r7, #8]
    37c2:	2204      	movs	r2, #4
    37c4:	70da      	strb	r2, [r3, #3]
    37c6:	e000      	b.n	37ca <usb_d_ep_abort+0x42>
		return;
    37c8:	bf00      	nop
}
    37ca:	3710      	adds	r7, #16
    37cc:	46bd      	mov	sp, r7
    37ce:	bd80      	pop	{r7, pc}
    37d0:	00002fdd 	.word	0x00002fdd
    37d4:	200005b0 	.word	0x200005b0
    37d8:	0000aacd 	.word	0x0000aacd

000037dc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    37dc:	b580      	push	{r7, lr}
    37de:	b086      	sub	sp, #24
    37e0:	af00      	add	r7, sp, #0
    37e2:	4603      	mov	r3, r0
    37e4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37e6:	79fb      	ldrb	r3, [r7, #7]
    37e8:	4618      	mov	r0, r3
    37ea:	4b1a      	ldr	r3, [pc, #104]	; (3854 <_usb_d_ep_halt_clr+0x78>)
    37ec:	4798      	blx	r3
    37ee:	4603      	mov	r3, r0
    37f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37f6:	015b      	lsls	r3, r3, #5
    37f8:	4a17      	ldr	r2, [pc, #92]	; (3858 <_usb_d_ep_halt_clr+0x7c>)
    37fa:	4413      	add	r3, r2
    37fc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    37fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3802:	2b00      	cmp	r3, #0
    3804:	da02      	bge.n	380c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3806:	f06f 0311 	mvn.w	r3, #17
    380a:	e01f      	b.n	384c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    380c:	79fb      	ldrb	r3, [r7, #7]
    380e:	2102      	movs	r1, #2
    3810:	4618      	mov	r0, r3
    3812:	4b12      	ldr	r3, [pc, #72]	; (385c <_usb_d_ep_halt_clr+0x80>)
    3814:	4798      	blx	r3
    3816:	4603      	mov	r3, r0
    3818:	2b00      	cmp	r3, #0
    381a:	d016      	beq.n	384a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    381c:	79fb      	ldrb	r3, [r7, #7]
    381e:	2100      	movs	r1, #0
    3820:	4618      	mov	r0, r3
    3822:	4b0e      	ldr	r3, [pc, #56]	; (385c <_usb_d_ep_halt_clr+0x80>)
    3824:	4798      	blx	r3
    3826:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	2b00      	cmp	r3, #0
    382c:	da01      	bge.n	3832 <_usb_d_ep_halt_clr+0x56>
			return rc;
    382e:	68fb      	ldr	r3, [r7, #12]
    3830:	e00c      	b.n	384c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3832:	693b      	ldr	r3, [r7, #16]
    3834:	2201      	movs	r2, #1
    3836:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3838:	693b      	ldr	r3, [r7, #16]
    383a:	2203      	movs	r2, #3
    383c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    383e:	693b      	ldr	r3, [r7, #16]
    3840:	69db      	ldr	r3, [r3, #28]
    3842:	79f8      	ldrb	r0, [r7, #7]
    3844:	2200      	movs	r2, #0
    3846:	2103      	movs	r1, #3
    3848:	4798      	blx	r3
	}
	return ERR_NONE;
    384a:	2300      	movs	r3, #0
}
    384c:	4618      	mov	r0, r3
    384e:	3718      	adds	r7, #24
    3850:	46bd      	mov	sp, r7
    3852:	bd80      	pop	{r7, pc}
    3854:	00002fdd 	.word	0x00002fdd
    3858:	200005b0 	.word	0x200005b0
    385c:	0000a6d9 	.word	0x0000a6d9

00003860 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3860:	b580      	push	{r7, lr}
    3862:	b082      	sub	sp, #8
    3864:	af00      	add	r7, sp, #0
    3866:	4603      	mov	r3, r0
    3868:	460a      	mov	r2, r1
    386a:	71fb      	strb	r3, [r7, #7]
    386c:	4613      	mov	r3, r2
    386e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3870:	79bb      	ldrb	r3, [r7, #6]
    3872:	2b00      	cmp	r3, #0
    3874:	d105      	bne.n	3882 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3876:	79fb      	ldrb	r3, [r7, #7]
    3878:	4618      	mov	r0, r3
    387a:	4b0c      	ldr	r3, [pc, #48]	; (38ac <usb_d_ep_halt+0x4c>)
    387c:	4798      	blx	r3
    387e:	4603      	mov	r3, r0
    3880:	e00f      	b.n	38a2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3882:	79bb      	ldrb	r3, [r7, #6]
    3884:	2b01      	cmp	r3, #1
    3886:	d106      	bne.n	3896 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3888:	79fb      	ldrb	r3, [r7, #7]
    388a:	2101      	movs	r1, #1
    388c:	4618      	mov	r0, r3
    388e:	4b08      	ldr	r3, [pc, #32]	; (38b0 <usb_d_ep_halt+0x50>)
    3890:	4798      	blx	r3
    3892:	4603      	mov	r3, r0
    3894:	e005      	b.n	38a2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3896:	79fb      	ldrb	r3, [r7, #7]
    3898:	2102      	movs	r1, #2
    389a:	4618      	mov	r0, r3
    389c:	4b04      	ldr	r3, [pc, #16]	; (38b0 <usb_d_ep_halt+0x50>)
    389e:	4798      	blx	r3
    38a0:	4603      	mov	r3, r0
	}
}
    38a2:	4618      	mov	r0, r3
    38a4:	3708      	adds	r7, #8
    38a6:	46bd      	mov	sp, r7
    38a8:	bd80      	pop	{r7, pc}
    38aa:	bf00      	nop
    38ac:	000037dd 	.word	0x000037dd
    38b0:	0000a6d9 	.word	0x0000a6d9

000038b4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    38b4:	b580      	push	{r7, lr}
    38b6:	b086      	sub	sp, #24
    38b8:	af00      	add	r7, sp, #0
    38ba:	4603      	mov	r3, r0
    38bc:	603a      	str	r2, [r7, #0]
    38be:	71fb      	strb	r3, [r7, #7]
    38c0:	460b      	mov	r3, r1
    38c2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    38c4:	79fb      	ldrb	r3, [r7, #7]
    38c6:	4618      	mov	r0, r3
    38c8:	4b16      	ldr	r3, [pc, #88]	; (3924 <usb_d_ep_register_callback+0x70>)
    38ca:	4798      	blx	r3
    38cc:	4603      	mov	r3, r0
    38ce:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38d4:	015b      	lsls	r3, r3, #5
    38d6:	4a14      	ldr	r2, [pc, #80]	; (3928 <usb_d_ep_register_callback+0x74>)
    38d8:	4413      	add	r3, r2
    38da:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    38dc:	683b      	ldr	r3, [r7, #0]
    38de:	2b00      	cmp	r3, #0
    38e0:	d001      	beq.n	38e6 <usb_d_ep_register_callback+0x32>
    38e2:	683b      	ldr	r3, [r7, #0]
    38e4:	e000      	b.n	38e8 <usb_d_ep_register_callback+0x34>
    38e6:	4b11      	ldr	r3, [pc, #68]	; (392c <usb_d_ep_register_callback+0x78>)
    38e8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    38ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38ee:	2b00      	cmp	r3, #0
    38f0:	db13      	blt.n	391a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    38f2:	79bb      	ldrb	r3, [r7, #6]
    38f4:	2b01      	cmp	r3, #1
    38f6:	d008      	beq.n	390a <usb_d_ep_register_callback+0x56>
    38f8:	2b02      	cmp	r3, #2
    38fa:	d00a      	beq.n	3912 <usb_d_ep_register_callback+0x5e>
    38fc:	2b00      	cmp	r3, #0
    38fe:	d000      	beq.n	3902 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3900:	e00c      	b.n	391c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3902:	693b      	ldr	r3, [r7, #16]
    3904:	68fa      	ldr	r2, [r7, #12]
    3906:	615a      	str	r2, [r3, #20]
		break;
    3908:	e008      	b.n	391c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    390a:	693b      	ldr	r3, [r7, #16]
    390c:	68fa      	ldr	r2, [r7, #12]
    390e:	619a      	str	r2, [r3, #24]
		break;
    3910:	e004      	b.n	391c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3912:	693b      	ldr	r3, [r7, #16]
    3914:	68fa      	ldr	r2, [r7, #12]
    3916:	61da      	str	r2, [r3, #28]
		break;
    3918:	e000      	b.n	391c <usb_d_ep_register_callback+0x68>
		return;
    391a:	bf00      	nop
	}
}
    391c:	3718      	adds	r7, #24
    391e:	46bd      	mov	sp, r7
    3920:	bd80      	pop	{r7, pc}
    3922:	bf00      	nop
    3924:	00002fdd 	.word	0x00002fdd
    3928:	200005b0 	.word	0x200005b0
    392c:	000030b1 	.word	0x000030b1

00003930 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3930:	b480      	push	{r7}
    3932:	b085      	sub	sp, #20
    3934:	af00      	add	r7, sp, #0
    3936:	4603      	mov	r3, r0
    3938:	60b9      	str	r1, [r7, #8]
    393a:	607a      	str	r2, [r7, #4]
    393c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    393e:	7bfb      	ldrb	r3, [r7, #15]
    3940:	f083 0301 	eor.w	r3, r3, #1
    3944:	b2db      	uxtb	r3, r3
    3946:	2b00      	cmp	r3, #0
    3948:	d000      	beq.n	394c <assert+0x1c>
		__asm("BKPT #0");
    394a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    394c:	bf00      	nop
    394e:	3714      	adds	r7, #20
    3950:	46bd      	mov	sp, r7
    3952:	f85d 7b04 	ldr.w	r7, [sp], #4
    3956:	4770      	bx	lr

00003958 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3958:	b480      	push	{r7}
    395a:	b085      	sub	sp, #20
    395c:	af00      	add	r7, sp, #0
    395e:	6078      	str	r0, [r7, #4]
    3960:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	681b      	ldr	r3, [r3, #0]
    3966:	60fb      	str	r3, [r7, #12]
    3968:	e008      	b.n	397c <is_list_element+0x24>
		if (it == element) {
    396a:	68fa      	ldr	r2, [r7, #12]
    396c:	683b      	ldr	r3, [r7, #0]
    396e:	429a      	cmp	r2, r3
    3970:	d101      	bne.n	3976 <is_list_element+0x1e>
			return true;
    3972:	2301      	movs	r3, #1
    3974:	e006      	b.n	3984 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3976:	68fb      	ldr	r3, [r7, #12]
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	60fb      	str	r3, [r7, #12]
    397c:	68fb      	ldr	r3, [r7, #12]
    397e:	2b00      	cmp	r3, #0
    3980:	d1f3      	bne.n	396a <is_list_element+0x12>
		}
	}

	return false;
    3982:	2300      	movs	r3, #0
}
    3984:	4618      	mov	r0, r3
    3986:	3714      	adds	r7, #20
    3988:	46bd      	mov	sp, r7
    398a:	f85d 7b04 	ldr.w	r7, [sp], #4
    398e:	4770      	bx	lr

00003990 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3990:	b580      	push	{r7, lr}
    3992:	b082      	sub	sp, #8
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    399a:	6839      	ldr	r1, [r7, #0]
    399c:	6878      	ldr	r0, [r7, #4]
    399e:	4b0f      	ldr	r3, [pc, #60]	; (39dc <list_insert_as_head+0x4c>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	2b00      	cmp	r3, #0
    39a6:	bf14      	ite	ne
    39a8:	2301      	movne	r3, #1
    39aa:	2300      	moveq	r3, #0
    39ac:	b2db      	uxtb	r3, r3
    39ae:	f083 0301 	eor.w	r3, r3, #1
    39b2:	b2db      	uxtb	r3, r3
    39b4:	f003 0301 	and.w	r3, r3, #1
    39b8:	b2db      	uxtb	r3, r3
    39ba:	2239      	movs	r2, #57	; 0x39
    39bc:	4908      	ldr	r1, [pc, #32]	; (39e0 <list_insert_as_head+0x50>)
    39be:	4618      	mov	r0, r3
    39c0:	4b08      	ldr	r3, [pc, #32]	; (39e4 <list_insert_as_head+0x54>)
    39c2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	681a      	ldr	r2, [r3, #0]
    39c8:	683b      	ldr	r3, [r7, #0]
    39ca:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    39cc:	687b      	ldr	r3, [r7, #4]
    39ce:	683a      	ldr	r2, [r7, #0]
    39d0:	601a      	str	r2, [r3, #0]
}
    39d2:	bf00      	nop
    39d4:	3708      	adds	r7, #8
    39d6:	46bd      	mov	sp, r7
    39d8:	bd80      	pop	{r7, pc}
    39da:	bf00      	nop
    39dc:	00003959 	.word	0x00003959
    39e0:	0000ed80 	.word	0x0000ed80
    39e4:	00003931 	.word	0x00003931

000039e8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    39e8:	b480      	push	{r7}
    39ea:	b083      	sub	sp, #12
    39ec:	af00      	add	r7, sp, #0
    39ee:	6078      	str	r0, [r7, #4]
    39f0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	681a      	ldr	r2, [r3, #0]
    39f6:	683b      	ldr	r3, [r7, #0]
    39f8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	683a      	ldr	r2, [r7, #0]
    39fe:	601a      	str	r2, [r3, #0]
}
    3a00:	bf00      	nop
    3a02:	370c      	adds	r7, #12
    3a04:	46bd      	mov	sp, r7
    3a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a0a:	4770      	bx	lr

00003a0c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b084      	sub	sp, #16
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
    3a14:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3a1c:	6839      	ldr	r1, [r7, #0]
    3a1e:	6878      	ldr	r0, [r7, #4]
    3a20:	4b16      	ldr	r3, [pc, #88]	; (3a7c <list_insert_at_end+0x70>)
    3a22:	4798      	blx	r3
    3a24:	4603      	mov	r3, r0
    3a26:	2b00      	cmp	r3, #0
    3a28:	bf14      	ite	ne
    3a2a:	2301      	movne	r3, #1
    3a2c:	2300      	moveq	r3, #0
    3a2e:	b2db      	uxtb	r3, r3
    3a30:	f083 0301 	eor.w	r3, r3, #1
    3a34:	b2db      	uxtb	r3, r3
    3a36:	f003 0301 	and.w	r3, r3, #1
    3a3a:	b2db      	uxtb	r3, r3
    3a3c:	224f      	movs	r2, #79	; 0x4f
    3a3e:	4910      	ldr	r1, [pc, #64]	; (3a80 <list_insert_at_end+0x74>)
    3a40:	4618      	mov	r0, r3
    3a42:	4b10      	ldr	r3, [pc, #64]	; (3a84 <list_insert_at_end+0x78>)
    3a44:	4798      	blx	r3

	if (!list->head) {
    3a46:	687b      	ldr	r3, [r7, #4]
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d109      	bne.n	3a62 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3a4e:	687b      	ldr	r3, [r7, #4]
    3a50:	683a      	ldr	r2, [r7, #0]
    3a52:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3a54:	683b      	ldr	r3, [r7, #0]
    3a56:	2200      	movs	r2, #0
    3a58:	601a      	str	r2, [r3, #0]
		return;
    3a5a:	e00c      	b.n	3a76 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3a5c:	68fb      	ldr	r3, [r7, #12]
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3a62:	68fb      	ldr	r3, [r7, #12]
    3a64:	681b      	ldr	r3, [r3, #0]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d1f8      	bne.n	3a5c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	683a      	ldr	r2, [r7, #0]
    3a6e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3a70:	683b      	ldr	r3, [r7, #0]
    3a72:	2200      	movs	r2, #0
    3a74:	601a      	str	r2, [r3, #0]
}
    3a76:	3710      	adds	r7, #16
    3a78:	46bd      	mov	sp, r7
    3a7a:	bd80      	pop	{r7, pc}
    3a7c:	00003959 	.word	0x00003959
    3a80:	0000ed80 	.word	0x0000ed80
    3a84:	00003931 	.word	0x00003931

00003a88 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3a88:	b480      	push	{r7}
    3a8a:	b085      	sub	sp, #20
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d009      	beq.n	3aac <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3a98:	687b      	ldr	r3, [r7, #4]
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	681a      	ldr	r2, [r3, #0]
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3aa8:	68fb      	ldr	r3, [r7, #12]
    3aaa:	e000      	b.n	3aae <list_remove_head+0x26>
	}

	return NULL;
    3aac:	2300      	movs	r3, #0
}
    3aae:	4618      	mov	r0, r3
    3ab0:	3714      	adds	r7, #20
    3ab2:	46bd      	mov	sp, r7
    3ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ab8:	4770      	bx	lr

00003aba <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3aba:	b480      	push	{r7}
    3abc:	b085      	sub	sp, #20
    3abe:	af00      	add	r7, sp, #0
    3ac0:	6078      	str	r0, [r7, #4]
    3ac2:	6039      	str	r1, [r7, #0]
	if (!element) {
    3ac4:	683b      	ldr	r3, [r7, #0]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d101      	bne.n	3ace <list_delete_element+0x14>
		return false;
    3aca:	2300      	movs	r3, #0
    3acc:	e024      	b.n	3b18 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	681a      	ldr	r2, [r3, #0]
    3ad2:	683b      	ldr	r3, [r7, #0]
    3ad4:	429a      	cmp	r2, r3
    3ad6:	d106      	bne.n	3ae6 <list_delete_element+0x2c>
		list->head = list->head->next;
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	681b      	ldr	r3, [r3, #0]
    3adc:	681a      	ldr	r2, [r3, #0]
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	601a      	str	r2, [r3, #0]
		return true;
    3ae2:	2301      	movs	r3, #1
    3ae4:	e018      	b.n	3b18 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3ae6:	687b      	ldr	r3, [r7, #4]
    3ae8:	681b      	ldr	r3, [r3, #0]
    3aea:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3aec:	e002      	b.n	3af4 <list_delete_element+0x3a>
			it = it->next;
    3aee:	68fb      	ldr	r3, [r7, #12]
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3af4:	68fb      	ldr	r3, [r7, #12]
    3af6:	2b00      	cmp	r3, #0
    3af8:	d004      	beq.n	3b04 <list_delete_element+0x4a>
    3afa:	68fb      	ldr	r3, [r7, #12]
    3afc:	681a      	ldr	r2, [r3, #0]
    3afe:	683b      	ldr	r3, [r7, #0]
    3b00:	429a      	cmp	r2, r3
    3b02:	d1f4      	bne.n	3aee <list_delete_element+0x34>
		}
		if (it) {
    3b04:	68fb      	ldr	r3, [r7, #12]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d005      	beq.n	3b16 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	681a      	ldr	r2, [r3, #0]
    3b0e:	68fb      	ldr	r3, [r7, #12]
    3b10:	601a      	str	r2, [r3, #0]
			return true;
    3b12:	2301      	movs	r3, #1
    3b14:	e000      	b.n	3b18 <list_delete_element+0x5e>
		}
	}

	return false;
    3b16:	2300      	movs	r3, #0
}
    3b18:	4618      	mov	r0, r3
    3b1a:	3714      	adds	r7, #20
    3b1c:	46bd      	mov	sp, r7
    3b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b22:	4770      	bx	lr

00003b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3b24:	b480      	push	{r7}
    3b26:	b083      	sub	sp, #12
    3b28:	af00      	add	r7, sp, #0
    3b2a:	4603      	mov	r3, r0
    3b2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b32:	2b00      	cmp	r3, #0
    3b34:	db0b      	blt.n	3b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b36:	4909      	ldr	r1, [pc, #36]	; (3b5c <__NVIC_EnableIRQ+0x38>)
    3b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b3c:	095b      	lsrs	r3, r3, #5
    3b3e:	88fa      	ldrh	r2, [r7, #6]
    3b40:	f002 021f 	and.w	r2, r2, #31
    3b44:	2001      	movs	r0, #1
    3b46:	fa00 f202 	lsl.w	r2, r0, r2
    3b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b4e:	bf00      	nop
    3b50:	370c      	adds	r7, #12
    3b52:	46bd      	mov	sp, r7
    3b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b58:	4770      	bx	lr
    3b5a:	bf00      	nop
    3b5c:	e000e100 	.word	0xe000e100

00003b60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3b60:	b480      	push	{r7}
    3b62:	b083      	sub	sp, #12
    3b64:	af00      	add	r7, sp, #0
    3b66:	4603      	mov	r3, r0
    3b68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	db10      	blt.n	3b94 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b72:	490b      	ldr	r1, [pc, #44]	; (3ba0 <__NVIC_DisableIRQ+0x40>)
    3b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b78:	095b      	lsrs	r3, r3, #5
    3b7a:	88fa      	ldrh	r2, [r7, #6]
    3b7c:	f002 021f 	and.w	r2, r2, #31
    3b80:	2001      	movs	r0, #1
    3b82:	fa00 f202 	lsl.w	r2, r0, r2
    3b86:	3320      	adds	r3, #32
    3b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3b94:	bf00      	nop
    3b96:	370c      	adds	r7, #12
    3b98:	46bd      	mov	sp, r7
    3b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b9e:	4770      	bx	lr
    3ba0:	e000e100 	.word	0xe000e100

00003ba4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3ba4:	b480      	push	{r7}
    3ba6:	b083      	sub	sp, #12
    3ba8:	af00      	add	r7, sp, #0
    3baa:	4603      	mov	r3, r0
    3bac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	db0c      	blt.n	3bd0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bb6:	4909      	ldr	r1, [pc, #36]	; (3bdc <__NVIC_ClearPendingIRQ+0x38>)
    3bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bbc:	095b      	lsrs	r3, r3, #5
    3bbe:	88fa      	ldrh	r2, [r7, #6]
    3bc0:	f002 021f 	and.w	r2, r2, #31
    3bc4:	2001      	movs	r0, #1
    3bc6:	fa00 f202 	lsl.w	r2, r0, r2
    3bca:	3360      	adds	r3, #96	; 0x60
    3bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3bd0:	bf00      	nop
    3bd2:	370c      	adds	r7, #12
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr
    3bdc:	e000e100 	.word	0xe000e100

00003be0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3be0:	b480      	push	{r7}
    3be2:	b083      	sub	sp, #12
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3bec:	095b      	lsrs	r3, r3, #5
    3bee:	f003 0301 	and.w	r3, r3, #1
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	bf14      	ite	ne
    3bf6:	2301      	movne	r3, #1
    3bf8:	2300      	moveq	r3, #0
    3bfa:	b2db      	uxtb	r3, r3
}
    3bfc:	4618      	mov	r0, r3
    3bfe:	370c      	adds	r7, #12
    3c00:	46bd      	mov	sp, r7
    3c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c06:	4770      	bx	lr

00003c08 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3c08:	b480      	push	{r7}
    3c0a:	b083      	sub	sp, #12
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
    3c10:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	683a      	ldr	r2, [r7, #0]
    3c16:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c18:	bf00      	nop
    3c1a:	370c      	adds	r7, #12
    3c1c:	46bd      	mov	sp, r7
    3c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c22:	4770      	bx	lr

00003c24 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3c24:	b480      	push	{r7}
    3c26:	b083      	sub	sp, #12
    3c28:	af00      	add	r7, sp, #0
    3c2a:	6078      	str	r0, [r7, #4]
    3c2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	683a      	ldr	r2, [r7, #0]
    3c32:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c34:	bf00      	nop
    3c36:	370c      	adds	r7, #12
    3c38:	46bd      	mov	sp, r7
    3c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c3e:	4770      	bx	lr

00003c40 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3c40:	b480      	push	{r7}
    3c42:	b083      	sub	sp, #12
    3c44:	af00      	add	r7, sp, #0
    3c46:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	699b      	ldr	r3, [r3, #24]
    3c4c:	f043 0201 	orr.w	r2, r3, #1
    3c50:	687b      	ldr	r3, [r7, #4]
    3c52:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c54:	bf00      	nop
    3c56:	370c      	adds	r7, #12
    3c58:	46bd      	mov	sp, r7
    3c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5e:	4770      	bx	lr

00003c60 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3c60:	b480      	push	{r7}
    3c62:	b085      	sub	sp, #20
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	699b      	ldr	r3, [r3, #24]
    3c6c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3c6e:	68fb      	ldr	r3, [r7, #12]
    3c70:	f003 0301 	and.w	r3, r3, #1
    3c74:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	bf14      	ite	ne
    3c7c:	2301      	movne	r3, #1
    3c7e:	2300      	moveq	r3, #0
    3c80:	b2db      	uxtb	r3, r3
}
    3c82:	4618      	mov	r0, r3
    3c84:	3714      	adds	r7, #20
    3c86:	46bd      	mov	sp, r7
    3c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8c:	4770      	bx	lr

00003c8e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3c8e:	b480      	push	{r7}
    3c90:	b083      	sub	sp, #12
    3c92:	af00      	add	r7, sp, #0
    3c94:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	699b      	ldr	r3, [r3, #24]
    3c9a:	f023 0201 	bic.w	r2, r3, #1
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ca2:	bf00      	nop
    3ca4:	370c      	adds	r7, #12
    3ca6:	46bd      	mov	sp, r7
    3ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cac:	4770      	bx	lr

00003cae <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3cae:	b480      	push	{r7}
    3cb0:	b083      	sub	sp, #12
    3cb2:	af00      	add	r7, sp, #0
    3cb4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	699b      	ldr	r3, [r3, #24]
    3cba:	f043 0202 	orr.w	r2, r3, #2
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cc2:	bf00      	nop
    3cc4:	370c      	adds	r7, #12
    3cc6:	46bd      	mov	sp, r7
    3cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ccc:	4770      	bx	lr

00003cce <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3cce:	b480      	push	{r7}
    3cd0:	b083      	sub	sp, #12
    3cd2:	af00      	add	r7, sp, #0
    3cd4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	699b      	ldr	r3, [r3, #24]
    3cda:	f023 0202 	bic.w	r2, r3, #2
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ce2:	bf00      	nop
    3ce4:	370c      	adds	r7, #12
    3ce6:	46bd      	mov	sp, r7
    3ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cec:	4770      	bx	lr

00003cee <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3cee:	b480      	push	{r7}
    3cf0:	b083      	sub	sp, #12
    3cf2:	af00      	add	r7, sp, #0
    3cf4:	6078      	str	r0, [r7, #4]
    3cf6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3cf8:	687b      	ldr	r3, [r7, #4]
    3cfa:	699a      	ldr	r2, [r3, #24]
    3cfc:	683b      	ldr	r3, [r7, #0]
    3cfe:	431a      	orrs	r2, r3
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d04:	bf00      	nop
    3d06:	370c      	adds	r7, #12
    3d08:	46bd      	mov	sp, r7
    3d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d0e:	4770      	bx	lr

00003d10 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    3d18:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	683a      	ldr	r2, [r7, #0]
    3d1e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d20:	bf00      	nop
    3d22:	370c      	adds	r7, #12
    3d24:	46bd      	mov	sp, r7
    3d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2a:	4770      	bx	lr

00003d2c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3d2c:	b480      	push	{r7}
    3d2e:	b083      	sub	sp, #12
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	683a      	ldr	r2, [r7, #0]
    3d3a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d3c:	bf00      	nop
    3d3e:	370c      	adds	r7, #12
    3d40:	46bd      	mov	sp, r7
    3d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d46:	4770      	bx	lr

00003d48 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3d48:	b480      	push	{r7}
    3d4a:	b083      	sub	sp, #12
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3d54:	4618      	mov	r0, r3
    3d56:	370c      	adds	r7, #12
    3d58:	46bd      	mov	sp, r7
    3d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5e:	4770      	bx	lr

00003d60 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	683a      	ldr	r2, [r7, #0]
    3d6e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d70:	bf00      	nop
    3d72:	370c      	adds	r7, #12
    3d74:	46bd      	mov	sp, r7
    3d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7a:	4770      	bx	lr

00003d7c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3d7c:	b480      	push	{r7}
    3d7e:	b083      	sub	sp, #12
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
    3d84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	683a      	ldr	r2, [r7, #0]
    3d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d8e:	bf00      	nop
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr

00003d9a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3d9a:	b480      	push	{r7}
    3d9c:	b083      	sub	sp, #12
    3d9e:	af00      	add	r7, sp, #0
    3da0:	6078      	str	r0, [r7, #4]
    3da2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	683a      	ldr	r2, [r7, #0]
    3da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dac:	bf00      	nop
    3dae:	370c      	adds	r7, #12
    3db0:	46bd      	mov	sp, r7
    3db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db6:	4770      	bx	lr

00003db8 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3db8:	b480      	push	{r7}
    3dba:	b083      	sub	sp, #12
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
    3dc0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	683a      	ldr	r2, [r7, #0]
    3dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dca:	bf00      	nop
    3dcc:	370c      	adds	r7, #12
    3dce:	46bd      	mov	sp, r7
    3dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd4:	4770      	bx	lr

00003dd6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3dd6:	b480      	push	{r7}
    3dd8:	b083      	sub	sp, #12
    3dda:	af00      	add	r7, sp, #0
    3ddc:	6078      	str	r0, [r7, #4]
    3dde:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	683a      	ldr	r2, [r7, #0]
    3de4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3de8:	bf00      	nop
    3dea:	370c      	adds	r7, #12
    3dec:	46bd      	mov	sp, r7
    3dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df2:	4770      	bx	lr

00003df4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3dfe:	687b      	ldr	r3, [r7, #4]
    3e00:	683a      	ldr	r2, [r7, #0]
    3e02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e06:	bf00      	nop
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr

00003e12 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3e12:	b480      	push	{r7}
    3e14:	b083      	sub	sp, #12
    3e16:	af00      	add	r7, sp, #0
    3e18:	6078      	str	r0, [r7, #4]
    3e1a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	683a      	ldr	r2, [r7, #0]
    3e20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e24:	bf00      	nop
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr

00003e30 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3e30:	b480      	push	{r7}
    3e32:	b083      	sub	sp, #12
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
    3e38:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	683a      	ldr	r2, [r7, #0]
    3e3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e42:	bf00      	nop
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr

00003e4e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3e4e:	b480      	push	{r7}
    3e50:	b083      	sub	sp, #12
    3e52:	af00      	add	r7, sp, #0
    3e54:	6078      	str	r0, [r7, #4]
    3e56:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	683a      	ldr	r2, [r7, #0]
    3e5c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e60:	bf00      	nop
    3e62:	370c      	adds	r7, #12
    3e64:	46bd      	mov	sp, r7
    3e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6a:	4770      	bx	lr

00003e6c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3e6c:	b480      	push	{r7}
    3e6e:	b083      	sub	sp, #12
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
    3e74:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	683a      	ldr	r2, [r7, #0]
    3e7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e7e:	bf00      	nop
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
	...

00003e8c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
    3e94:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	683a      	ldr	r2, [r7, #0]
    3e9a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	681b      	ldr	r3, [r3, #0]
    3ea0:	4618      	mov	r0, r3
    3ea2:	4b55      	ldr	r3, [pc, #340]	; (3ff8 <_can_async_init+0x16c>)
    3ea4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3ea6:	bf00      	nop
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	4618      	mov	r0, r3
    3eae:	4b53      	ldr	r3, [pc, #332]	; (3ffc <_can_async_init+0x170>)
    3eb0:	4798      	blx	r3
    3eb2:	4603      	mov	r3, r0
    3eb4:	f083 0301 	eor.w	r3, r3, #1
    3eb8:	b2db      	uxtb	r3, r3
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d1f4      	bne.n	3ea8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3ebe:	687b      	ldr	r3, [r7, #4]
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	4618      	mov	r0, r3
    3ec4:	4b4e      	ldr	r3, [pc, #312]	; (4000 <_can_async_init+0x174>)
    3ec6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3ec8:	683b      	ldr	r3, [r7, #0]
    3eca:	4a4e      	ldr	r2, [pc, #312]	; (4004 <_can_async_init+0x178>)
    3ecc:	4293      	cmp	r3, r2
    3ece:	d17a      	bne.n	3fc6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3ed0:	4a4d      	ldr	r2, [pc, #308]	; (4008 <_can_async_init+0x17c>)
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	4a4c      	ldr	r2, [pc, #304]	; (400c <_can_async_init+0x180>)
    3eda:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	f44f 7140 	mov.w	r1, #768	; 0x300
    3ee4:	4618      	mov	r0, r3
    3ee6:	4b4a      	ldr	r3, [pc, #296]	; (4010 <_can_async_init+0x184>)
    3ee8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	2102      	movs	r1, #2
    3ef0:	4618      	mov	r0, r3
    3ef2:	4b48      	ldr	r3, [pc, #288]	; (4014 <_can_async_init+0x188>)
    3ef4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	4947      	ldr	r1, [pc, #284]	; (4018 <_can_async_init+0x18c>)
    3efc:	4618      	mov	r0, r3
    3efe:	4b47      	ldr	r3, [pc, #284]	; (401c <_can_async_init+0x190>)
    3f00:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	681b      	ldr	r3, [r3, #0]
    3f06:	4946      	ldr	r1, [pc, #280]	; (4020 <_can_async_init+0x194>)
    3f08:	4618      	mov	r0, r3
    3f0a:	4b46      	ldr	r3, [pc, #280]	; (4024 <_can_async_init+0x198>)
    3f0c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	681a      	ldr	r2, [r3, #0]
    3f12:	4b45      	ldr	r3, [pc, #276]	; (4028 <_can_async_init+0x19c>)
    3f14:	b29b      	uxth	r3, r3
    3f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f1e:	4619      	mov	r1, r3
    3f20:	4610      	mov	r0, r2
    3f22:	4b42      	ldr	r3, [pc, #264]	; (402c <_can_async_init+0x1a0>)
    3f24:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	2107      	movs	r1, #7
    3f2c:	4618      	mov	r0, r3
    3f2e:	4b40      	ldr	r3, [pc, #256]	; (4030 <_can_async_init+0x1a4>)
    3f30:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	2107      	movs	r1, #7
    3f38:	4618      	mov	r0, r3
    3f3a:	4b3e      	ldr	r3, [pc, #248]	; (4034 <_can_async_init+0x1a8>)
    3f3c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	681a      	ldr	r2, [r3, #0]
    3f42:	4b3d      	ldr	r3, [pc, #244]	; (4038 <_can_async_init+0x1ac>)
    3f44:	b29b      	uxth	r3, r3
    3f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f4a:	4619      	mov	r1, r3
    3f4c:	4610      	mov	r0, r2
    3f4e:	4b3b      	ldr	r3, [pc, #236]	; (403c <_can_async_init+0x1b0>)
    3f50:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	681a      	ldr	r2, [r3, #0]
    3f56:	4b3a      	ldr	r3, [pc, #232]	; (4040 <_can_async_init+0x1b4>)
    3f58:	b29b      	uxth	r3, r3
    3f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f5e:	4619      	mov	r1, r3
    3f60:	4610      	mov	r0, r2
    3f62:	4b38      	ldr	r3, [pc, #224]	; (4044 <_can_async_init+0x1b8>)
    3f64:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	2108      	movs	r1, #8
    3f6c:	4618      	mov	r0, r3
    3f6e:	4b36      	ldr	r3, [pc, #216]	; (4048 <_can_async_init+0x1bc>)
    3f70:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681a      	ldr	r2, [r3, #0]
    3f76:	4b35      	ldr	r3, [pc, #212]	; (404c <_can_async_init+0x1c0>)
    3f78:	b29b      	uxth	r3, r3
    3f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3f7e:	4619      	mov	r1, r3
    3f80:	4610      	mov	r0, r2
    3f82:	4b33      	ldr	r3, [pc, #204]	; (4050 <_can_async_init+0x1c4>)
    3f84:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	681a      	ldr	r2, [r3, #0]
    3f8a:	4b32      	ldr	r3, [pc, #200]	; (4054 <_can_async_init+0x1c8>)
    3f8c:	b29b      	uxth	r3, r3
    3f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f92:	4619      	mov	r1, r3
    3f94:	4610      	mov	r0, r2
    3f96:	4b30      	ldr	r3, [pc, #192]	; (4058 <_can_async_init+0x1cc>)
    3f98:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3fa2:	4618      	mov	r0, r3
    3fa4:	4b2d      	ldr	r3, [pc, #180]	; (405c <_can_async_init+0x1d0>)
    3fa6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3fa8:	204f      	movs	r0, #79	; 0x4f
    3faa:	4b2d      	ldr	r3, [pc, #180]	; (4060 <_can_async_init+0x1d4>)
    3fac:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3fae:	204f      	movs	r0, #79	; 0x4f
    3fb0:	4b2c      	ldr	r3, [pc, #176]	; (4064 <_can_async_init+0x1d8>)
    3fb2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3fb4:	204f      	movs	r0, #79	; 0x4f
    3fb6:	4b2c      	ldr	r3, [pc, #176]	; (4068 <_can_async_init+0x1dc>)
    3fb8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	2101      	movs	r1, #1
    3fc0:	4618      	mov	r0, r3
    3fc2:	4b2a      	ldr	r3, [pc, #168]	; (406c <_can_async_init+0x1e0>)
    3fc4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	681b      	ldr	r3, [r3, #0]
    3fca:	4618      	mov	r0, r3
    3fcc:	4b28      	ldr	r3, [pc, #160]	; (4070 <_can_async_init+0x1e4>)
    3fce:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	681b      	ldr	r3, [r3, #0]
    3fd4:	4618      	mov	r0, r3
    3fd6:	4b27      	ldr	r3, [pc, #156]	; (4074 <_can_async_init+0x1e8>)
    3fd8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3fda:	bf00      	nop
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	681b      	ldr	r3, [r3, #0]
    3fe0:	4618      	mov	r0, r3
    3fe2:	4b06      	ldr	r3, [pc, #24]	; (3ffc <_can_async_init+0x170>)
    3fe4:	4798      	blx	r3
    3fe6:	4603      	mov	r3, r0
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d1f7      	bne.n	3fdc <_can_async_init+0x150>
	};

	return ERR_NONE;
    3fec:	2300      	movs	r3, #0
}
    3fee:	4618      	mov	r0, r3
    3ff0:	3708      	adds	r7, #8
    3ff2:	46bd      	mov	sp, r7
    3ff4:	bd80      	pop	{r7, pc}
    3ff6:	bf00      	nop
    3ff8:	00003c41 	.word	0x00003c41
    3ffc:	00003c61 	.word	0x00003c61
    4000:	00003caf 	.word	0x00003caf
    4004:	42000400 	.word	0x42000400
    4008:	200006d0 	.word	0x200006d0
    400c:	20000004 	.word	0x20000004
    4010:	00003cef 	.word	0x00003cef
    4014:	00003c09 	.word	0x00003c09
    4018:	00010c01 	.word	0x00010c01
    401c:	00003d11 	.word	0x00003d11
    4020:	00010c10 	.word	0x00010c10
    4024:	00003c25 	.word	0x00003c25
    4028:	2000105c 	.word	0x2000105c
    402c:	00003df5 	.word	0x00003df5
    4030:	00003e13 	.word	0x00003e13
    4034:	00003e4f 	.word	0x00003e4f
    4038:	20001014 	.word	0x20001014
    403c:	00003e31 	.word	0x00003e31
    4040:	20000630 	.word	0x20000630
    4044:	00003e6d 	.word	0x00003e6d
    4048:	00003d7d 	.word	0x00003d7d
    404c:	20000640 	.word	0x20000640
    4050:	00003d9b 	.word	0x00003d9b
    4054:	200006c0 	.word	0x200006c0
    4058:	00003db9 	.word	0x00003db9
    405c:	00003dd7 	.word	0x00003dd7
    4060:	00003b61 	.word	0x00003b61
    4064:	00003ba5 	.word	0x00003ba5
    4068:	00003b25 	.word	0x00003b25
    406c:	00003d61 	.word	0x00003d61
    4070:	00003ccf 	.word	0x00003ccf
    4074:	00003c8f 	.word	0x00003c8f

00004078 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4078:	b590      	push	{r4, r7, lr}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    407e:	4b2c      	ldr	r3, [pc, #176]	; (4130 <CAN1_Handler+0xb8>)
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	4618      	mov	r0, r3
    408a:	4b2a      	ldr	r3, [pc, #168]	; (4134 <CAN1_Handler+0xbc>)
    408c:	4798      	blx	r3
    408e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4090:	683b      	ldr	r3, [r7, #0]
    4092:	f003 0301 	and.w	r3, r3, #1
    4096:	2b00      	cmp	r3, #0
    4098:	d003      	beq.n	40a2 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	689b      	ldr	r3, [r3, #8]
    409e:	6878      	ldr	r0, [r7, #4]
    40a0:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    40a8:	2b00      	cmp	r3, #0
    40aa:	d003      	beq.n	40b4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	685b      	ldr	r3, [r3, #4]
    40b0:	6878      	ldr	r0, [r7, #4]
    40b2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    40b4:	683b      	ldr	r3, [r7, #0]
    40b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    40ba:	2b00      	cmp	r3, #0
    40bc:	d004      	beq.n	40c8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	68db      	ldr	r3, [r3, #12]
    40c2:	2103      	movs	r1, #3
    40c4:	6878      	ldr	r0, [r7, #4]
    40c6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    40c8:	683b      	ldr	r3, [r7, #0]
    40ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    40ce:	2b00      	cmp	r3, #0
    40d0:	d004      	beq.n	40dc <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	68db      	ldr	r3, [r3, #12]
    40d6:	2100      	movs	r1, #0
    40d8:	6878      	ldr	r0, [r7, #4]
    40da:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    40dc:	683b      	ldr	r3, [r7, #0]
    40de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    40e2:	2b00      	cmp	r3, #0
    40e4:	d00f      	beq.n	4106 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	68dc      	ldr	r4, [r3, #12]
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	4618      	mov	r0, r3
    40f0:	4b11      	ldr	r3, [pc, #68]	; (4138 <CAN1_Handler+0xc0>)
    40f2:	4798      	blx	r3
    40f4:	4603      	mov	r3, r0
    40f6:	2b00      	cmp	r3, #0
    40f8:	d001      	beq.n	40fe <CAN1_Handler+0x86>
    40fa:	2302      	movs	r3, #2
    40fc:	e000      	b.n	4100 <CAN1_Handler+0x88>
    40fe:	2301      	movs	r3, #1
    4100:	4619      	mov	r1, r3
    4102:	6878      	ldr	r0, [r7, #4]
    4104:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4106:	683b      	ldr	r3, [r7, #0]
    4108:	f003 0308 	and.w	r3, r3, #8
    410c:	2b00      	cmp	r3, #0
    410e:	d004      	beq.n	411a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	68db      	ldr	r3, [r3, #12]
    4114:	2104      	movs	r1, #4
    4116:	6878      	ldr	r0, [r7, #4]
    4118:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	6839      	ldr	r1, [r7, #0]
    4120:	4618      	mov	r0, r3
    4122:	4b06      	ldr	r3, [pc, #24]	; (413c <CAN1_Handler+0xc4>)
    4124:	4798      	blx	r3
}
    4126:	bf00      	nop
    4128:	370c      	adds	r7, #12
    412a:	46bd      	mov	sp, r7
    412c:	bd90      	pop	{r4, r7, pc}
    412e:	bf00      	nop
    4130:	200006d0 	.word	0x200006d0
    4134:	00003d49 	.word	0x00003d49
    4138:	00003be1 	.word	0x00003be1
    413c:	00003d2d 	.word	0x00003d2d

00004140 <__NVIC_SetPendingIRQ>:
{
    4140:	b480      	push	{r7}
    4142:	b083      	sub	sp, #12
    4144:	af00      	add	r7, sp, #0
    4146:	4603      	mov	r3, r0
    4148:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    414e:	2b00      	cmp	r3, #0
    4150:	db0c      	blt.n	416c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4152:	4909      	ldr	r1, [pc, #36]	; (4178 <__NVIC_SetPendingIRQ+0x38>)
    4154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4158:	095b      	lsrs	r3, r3, #5
    415a:	88fa      	ldrh	r2, [r7, #6]
    415c:	f002 021f 	and.w	r2, r2, #31
    4160:	2001      	movs	r0, #1
    4162:	fa00 f202 	lsl.w	r2, r0, r2
    4166:	3340      	adds	r3, #64	; 0x40
    4168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr
    4178:	e000e100 	.word	0xe000e100

0000417c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    417c:	b580      	push	{r7, lr}
    417e:	b082      	sub	sp, #8
    4180:	af00      	add	r7, sp, #0
    4182:	4603      	mov	r3, r0
    4184:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4186:	79fb      	ldrb	r3, [r7, #7]
    4188:	b21b      	sxth	r3, r3
    418a:	4618      	mov	r0, r3
    418c:	4b02      	ldr	r3, [pc, #8]	; (4198 <_irq_set+0x1c>)
    418e:	4798      	blx	r3
}
    4190:	bf00      	nop
    4192:	3708      	adds	r7, #8
    4194:	46bd      	mov	sp, r7
    4196:	bd80      	pop	{r7, pc}
    4198:	00004141 	.word	0x00004141

0000419c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	4603      	mov	r3, r0
    41a4:	6039      	str	r1, [r7, #0]
    41a6:	80fb      	strh	r3, [r7, #6]
    41a8:	4613      	mov	r3, r2
    41aa:	717b      	strb	r3, [r7, #5]
	switch (power) {
    41ac:	797b      	ldrb	r3, [r7, #5]
    41ae:	3b04      	subs	r3, #4
    41b0:	2b05      	cmp	r3, #5
    41b2:	d86b      	bhi.n	428c <_get_cycles_for_us_internal+0xf0>
    41b4:	a201      	add	r2, pc, #4	; (adr r2, 41bc <_get_cycles_for_us_internal+0x20>)
    41b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41ba:	bf00      	nop
    41bc:	0000426b 	.word	0x0000426b
    41c0:	0000424b 	.word	0x0000424b
    41c4:	0000422d 	.word	0x0000422d
    41c8:	0000420f 	.word	0x0000420f
    41cc:	000041f1 	.word	0x000041f1
    41d0:	000041d5 	.word	0x000041d5
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    41d4:	88fb      	ldrh	r3, [r7, #6]
    41d6:	683a      	ldr	r2, [r7, #0]
    41d8:	4935      	ldr	r1, [pc, #212]	; (42b0 <_get_cycles_for_us_internal+0x114>)
    41da:	fba1 1202 	umull	r1, r2, r1, r2
    41de:	0c92      	lsrs	r2, r2, #18
    41e0:	fb02 f303 	mul.w	r3, r2, r3
    41e4:	3302      	adds	r3, #2
    41e6:	4a33      	ldr	r2, [pc, #204]	; (42b4 <_get_cycles_for_us_internal+0x118>)
    41e8:	fba2 2303 	umull	r2, r3, r2, r3
    41ec:	085b      	lsrs	r3, r3, #1
    41ee:	e059      	b.n	42a4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    41f0:	88fb      	ldrh	r3, [r7, #6]
    41f2:	683a      	ldr	r2, [r7, #0]
    41f4:	0952      	lsrs	r2, r2, #5
    41f6:	4930      	ldr	r1, [pc, #192]	; (42b8 <_get_cycles_for_us_internal+0x11c>)
    41f8:	fba1 1202 	umull	r1, r2, r1, r2
    41fc:	09d2      	lsrs	r2, r2, #7
    41fe:	fb02 f303 	mul.w	r3, r2, r3
    4202:	331d      	adds	r3, #29
    4204:	4a2d      	ldr	r2, [pc, #180]	; (42bc <_get_cycles_for_us_internal+0x120>)
    4206:	fba2 2303 	umull	r2, r3, r2, r3
    420a:	091b      	lsrs	r3, r3, #4
    420c:	e04a      	b.n	42a4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    420e:	88fb      	ldrh	r3, [r7, #6]
    4210:	683a      	ldr	r2, [r7, #0]
    4212:	492b      	ldr	r1, [pc, #172]	; (42c0 <_get_cycles_for_us_internal+0x124>)
    4214:	fba1 1202 	umull	r1, r2, r1, r2
    4218:	0b52      	lsrs	r2, r2, #13
    421a:	fb02 f303 	mul.w	r3, r2, r3
    421e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4222:	4a28      	ldr	r2, [pc, #160]	; (42c4 <_get_cycles_for_us_internal+0x128>)
    4224:	fba2 2303 	umull	r2, r3, r2, r3
    4228:	095b      	lsrs	r3, r3, #5
    422a:	e03b      	b.n	42a4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    422c:	88fb      	ldrh	r3, [r7, #6]
    422e:	683a      	ldr	r2, [r7, #0]
    4230:	4925      	ldr	r1, [pc, #148]	; (42c8 <_get_cycles_for_us_internal+0x12c>)
    4232:	fba1 1202 	umull	r1, r2, r1, r2
    4236:	0992      	lsrs	r2, r2, #6
    4238:	fb02 f303 	mul.w	r3, r2, r3
    423c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4240:	4a22      	ldr	r2, [pc, #136]	; (42cc <_get_cycles_for_us_internal+0x130>)
    4242:	fba2 2303 	umull	r2, r3, r2, r3
    4246:	099b      	lsrs	r3, r3, #6
    4248:	e02c      	b.n	42a4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    424a:	88fb      	ldrh	r3, [r7, #6]
    424c:	683a      	ldr	r2, [r7, #0]
    424e:	4920      	ldr	r1, [pc, #128]	; (42d0 <_get_cycles_for_us_internal+0x134>)
    4250:	fba1 1202 	umull	r1, r2, r1, r2
    4254:	0952      	lsrs	r2, r2, #5
    4256:	fb02 f303 	mul.w	r3, r2, r3
    425a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    425e:	332f      	adds	r3, #47	; 0x2f
    4260:	4a1c      	ldr	r2, [pc, #112]	; (42d4 <_get_cycles_for_us_internal+0x138>)
    4262:	fba2 2303 	umull	r2, r3, r2, r3
    4266:	0b5b      	lsrs	r3, r3, #13
    4268:	e01c      	b.n	42a4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    426a:	88fb      	ldrh	r3, [r7, #6]
    426c:	683a      	ldr	r2, [r7, #0]
    426e:	491a      	ldr	r1, [pc, #104]	; (42d8 <_get_cycles_for_us_internal+0x13c>)
    4270:	fba1 1202 	umull	r1, r2, r1, r2
    4274:	08d2      	lsrs	r2, r2, #3
    4276:	fb02 f303 	mul.w	r3, r2, r3
    427a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    427e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4282:	4a16      	ldr	r2, [pc, #88]	; (42dc <_get_cycles_for_us_internal+0x140>)
    4284:	fba2 2303 	umull	r2, r3, r2, r3
    4288:	0c5b      	lsrs	r3, r3, #17
    428a:	e00b      	b.n	42a4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    428c:	88fb      	ldrh	r3, [r7, #6]
    428e:	683a      	ldr	r2, [r7, #0]
    4290:	fb02 f303 	mul.w	r3, r2, r3
    4294:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4298:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    429c:	4a10      	ldr	r2, [pc, #64]	; (42e0 <_get_cycles_for_us_internal+0x144>)
    429e:	fba2 2303 	umull	r2, r3, r2, r3
    42a2:	0c9b      	lsrs	r3, r3, #18
	}
}
    42a4:	4618      	mov	r0, r3
    42a6:	370c      	adds	r7, #12
    42a8:	46bd      	mov	sp, r7
    42aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ae:	4770      	bx	lr
    42b0:	431bde83 	.word	0x431bde83
    42b4:	aaaaaaab 	.word	0xaaaaaaab
    42b8:	0a7c5ac5 	.word	0x0a7c5ac5
    42bc:	88888889 	.word	0x88888889
    42c0:	d1b71759 	.word	0xd1b71759
    42c4:	1b4e81b5 	.word	0x1b4e81b5
    42c8:	10624dd3 	.word	0x10624dd3
    42cc:	057619f1 	.word	0x057619f1
    42d0:	51eb851f 	.word	0x51eb851f
    42d4:	45e7b273 	.word	0x45e7b273
    42d8:	cccccccd 	.word	0xcccccccd
    42dc:	6fd91d85 	.word	0x6fd91d85
    42e0:	165e9f81 	.word	0x165e9f81

000042e4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b082      	sub	sp, #8
    42e8:	af00      	add	r7, sp, #0
    42ea:	4603      	mov	r3, r0
    42ec:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    42ee:	88fb      	ldrh	r3, [r7, #6]
    42f0:	2209      	movs	r2, #9
    42f2:	4904      	ldr	r1, [pc, #16]	; (4304 <_get_cycles_for_us+0x20>)
    42f4:	4618      	mov	r0, r3
    42f6:	4b04      	ldr	r3, [pc, #16]	; (4308 <_get_cycles_for_us+0x24>)
    42f8:	4798      	blx	r3
    42fa:	4603      	mov	r3, r0
}
    42fc:	4618      	mov	r0, r3
    42fe:	3708      	adds	r7, #8
    4300:	46bd      	mov	sp, r7
    4302:	bd80      	pop	{r7, pc}
    4304:	07270e00 	.word	0x07270e00
    4308:	0000419d 	.word	0x0000419d

0000430c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    430c:	b480      	push	{r7}
    430e:	b083      	sub	sp, #12
    4310:	af00      	add	r7, sp, #0
    4312:	4603      	mov	r3, r0
    4314:	6039      	str	r1, [r7, #0]
    4316:	80fb      	strh	r3, [r7, #6]
    4318:	4613      	mov	r3, r2
    431a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    431c:	797b      	ldrb	r3, [r7, #5]
    431e:	3b04      	subs	r3, #4
    4320:	2b05      	cmp	r3, #5
    4322:	d870      	bhi.n	4406 <_get_cycles_for_ms_internal+0xfa>
    4324:	a201      	add	r2, pc, #4	; (adr r2, 432c <_get_cycles_for_ms_internal+0x20>)
    4326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    432a:	bf00      	nop
    432c:	000043e9 	.word	0x000043e9
    4330:	000043cd 	.word	0x000043cd
    4334:	000043b1 	.word	0x000043b1
    4338:	0000438d 	.word	0x0000438d
    433c:	00004369 	.word	0x00004369
    4340:	00004345 	.word	0x00004345
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4344:	88fb      	ldrh	r3, [r7, #6]
    4346:	683a      	ldr	r2, [r7, #0]
    4348:	4937      	ldr	r1, [pc, #220]	; (4428 <_get_cycles_for_ms_internal+0x11c>)
    434a:	fba1 1202 	umull	r1, r2, r1, r2
    434e:	0c92      	lsrs	r2, r2, #18
    4350:	fb02 f303 	mul.w	r3, r2, r3
    4354:	3302      	adds	r3, #2
    4356:	4a35      	ldr	r2, [pc, #212]	; (442c <_get_cycles_for_ms_internal+0x120>)
    4358:	fba2 2303 	umull	r2, r3, r2, r3
    435c:	085b      	lsrs	r3, r3, #1
    435e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4362:	fb02 f303 	mul.w	r3, r2, r3
    4366:	e058      	b.n	441a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4368:	88fb      	ldrh	r3, [r7, #6]
    436a:	683a      	ldr	r2, [r7, #0]
    436c:	0952      	lsrs	r2, r2, #5
    436e:	4930      	ldr	r1, [pc, #192]	; (4430 <_get_cycles_for_ms_internal+0x124>)
    4370:	fba1 1202 	umull	r1, r2, r1, r2
    4374:	09d2      	lsrs	r2, r2, #7
    4376:	fb02 f303 	mul.w	r3, r2, r3
    437a:	3302      	adds	r3, #2
    437c:	4a2b      	ldr	r2, [pc, #172]	; (442c <_get_cycles_for_ms_internal+0x120>)
    437e:	fba2 2303 	umull	r2, r3, r2, r3
    4382:	085b      	lsrs	r3, r3, #1
    4384:	2264      	movs	r2, #100	; 0x64
    4386:	fb02 f303 	mul.w	r3, r2, r3
    438a:	e046      	b.n	441a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    438c:	88fb      	ldrh	r3, [r7, #6]
    438e:	683a      	ldr	r2, [r7, #0]
    4390:	4928      	ldr	r1, [pc, #160]	; (4434 <_get_cycles_for_ms_internal+0x128>)
    4392:	fba1 1202 	umull	r1, r2, r1, r2
    4396:	0b52      	lsrs	r2, r2, #13
    4398:	fb02 f303 	mul.w	r3, r2, r3
    439c:	3302      	adds	r3, #2
    439e:	4a23      	ldr	r2, [pc, #140]	; (442c <_get_cycles_for_ms_internal+0x120>)
    43a0:	fba2 2303 	umull	r2, r3, r2, r3
    43a4:	085a      	lsrs	r2, r3, #1
    43a6:	4613      	mov	r3, r2
    43a8:	009b      	lsls	r3, r3, #2
    43aa:	4413      	add	r3, r2
    43ac:	005b      	lsls	r3, r3, #1
    43ae:	e034      	b.n	441a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    43b0:	88fb      	ldrh	r3, [r7, #6]
    43b2:	683a      	ldr	r2, [r7, #0]
    43b4:	4920      	ldr	r1, [pc, #128]	; (4438 <_get_cycles_for_ms_internal+0x12c>)
    43b6:	fba1 1202 	umull	r1, r2, r1, r2
    43ba:	0992      	lsrs	r2, r2, #6
    43bc:	fb02 f303 	mul.w	r3, r2, r3
    43c0:	3302      	adds	r3, #2
    43c2:	4a1a      	ldr	r2, [pc, #104]	; (442c <_get_cycles_for_ms_internal+0x120>)
    43c4:	fba2 2303 	umull	r2, r3, r2, r3
    43c8:	085b      	lsrs	r3, r3, #1
    43ca:	e026      	b.n	441a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    43cc:	88fb      	ldrh	r3, [r7, #6]
    43ce:	683a      	ldr	r2, [r7, #0]
    43d0:	491a      	ldr	r1, [pc, #104]	; (443c <_get_cycles_for_ms_internal+0x130>)
    43d2:	fba1 1202 	umull	r1, r2, r1, r2
    43d6:	0952      	lsrs	r2, r2, #5
    43d8:	fb02 f303 	mul.w	r3, r2, r3
    43dc:	331d      	adds	r3, #29
    43de:	4a18      	ldr	r2, [pc, #96]	; (4440 <_get_cycles_for_ms_internal+0x134>)
    43e0:	fba2 2303 	umull	r2, r3, r2, r3
    43e4:	091b      	lsrs	r3, r3, #4
    43e6:	e018      	b.n	441a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    43e8:	88fb      	ldrh	r3, [r7, #6]
    43ea:	683a      	ldr	r2, [r7, #0]
    43ec:	4915      	ldr	r1, [pc, #84]	; (4444 <_get_cycles_for_ms_internal+0x138>)
    43ee:	fba1 1202 	umull	r1, r2, r1, r2
    43f2:	08d2      	lsrs	r2, r2, #3
    43f4:	fb02 f303 	mul.w	r3, r2, r3
    43f8:	f203 132b 	addw	r3, r3, #299	; 0x12b
    43fc:	4a12      	ldr	r2, [pc, #72]	; (4448 <_get_cycles_for_ms_internal+0x13c>)
    43fe:	fba2 2303 	umull	r2, r3, r2, r3
    4402:	095b      	lsrs	r3, r3, #5
    4404:	e009      	b.n	441a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4406:	88fb      	ldrh	r3, [r7, #6]
    4408:	683a      	ldr	r2, [r7, #0]
    440a:	fb02 f303 	mul.w	r3, r2, r3
    440e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4412:	4a0e      	ldr	r2, [pc, #56]	; (444c <_get_cycles_for_ms_internal+0x140>)
    4414:	fba2 2303 	umull	r2, r3, r2, r3
    4418:	099b      	lsrs	r3, r3, #6
	}
}
    441a:	4618      	mov	r0, r3
    441c:	370c      	adds	r7, #12
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	431bde83 	.word	0x431bde83
    442c:	aaaaaaab 	.word	0xaaaaaaab
    4430:	0a7c5ac5 	.word	0x0a7c5ac5
    4434:	d1b71759 	.word	0xd1b71759
    4438:	10624dd3 	.word	0x10624dd3
    443c:	51eb851f 	.word	0x51eb851f
    4440:	88888889 	.word	0x88888889
    4444:	cccccccd 	.word	0xcccccccd
    4448:	1b4e81b5 	.word	0x1b4e81b5
    444c:	057619f1 	.word	0x057619f1

00004450 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4450:	b580      	push	{r7, lr}
    4452:	b082      	sub	sp, #8
    4454:	af00      	add	r7, sp, #0
    4456:	4603      	mov	r3, r0
    4458:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    445a:	88fb      	ldrh	r3, [r7, #6]
    445c:	2209      	movs	r2, #9
    445e:	4904      	ldr	r1, [pc, #16]	; (4470 <_get_cycles_for_ms+0x20>)
    4460:	4618      	mov	r0, r3
    4462:	4b04      	ldr	r3, [pc, #16]	; (4474 <_get_cycles_for_ms+0x24>)
    4464:	4798      	blx	r3
    4466:	4603      	mov	r3, r0
}
    4468:	4618      	mov	r0, r3
    446a:	3708      	adds	r7, #8
    446c:	46bd      	mov	sp, r7
    446e:	bd80      	pop	{r7, pc}
    4470:	07270e00 	.word	0x07270e00
    4474:	0000430d 	.word	0x0000430d

00004478 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4478:	b480      	push	{r7}
    447a:	b083      	sub	sp, #12
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
    4480:	6039      	str	r1, [r7, #0]
    4482:	bf00      	nop
    4484:	f3af 8000 	nop.w

00004488 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4488:	3901      	subs	r1, #1
    448a:	d8fd      	bhi.n	4488 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    448c:	bf00      	nop
    448e:	370c      	adds	r7, #12
    4490:	46bd      	mov	sp, r7
    4492:	f85d 7b04 	ldr.w	r7, [sp], #4
    4496:	4770      	bx	lr

00004498 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4498:	b480      	push	{r7}
    449a:	b083      	sub	sp, #12
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
    44a0:	460b      	mov	r3, r1
    44a2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	881b      	ldrh	r3, [r3, #0]
    44a8:	b29a      	uxth	r2, r3
    44aa:	887b      	ldrh	r3, [r7, #2]
    44ac:	021b      	lsls	r3, r3, #8
    44ae:	b29b      	uxth	r3, r3
    44b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    44b4:	b29b      	uxth	r3, r3
    44b6:	4313      	orrs	r3, r2
    44b8:	b29a      	uxth	r2, r3
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    44be:	bf00      	nop
    44c0:	370c      	adds	r7, #12
    44c2:	46bd      	mov	sp, r7
    44c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c8:	4770      	bx	lr

000044ca <hri_port_set_EVCTRL_reg>:
{
    44ca:	b480      	push	{r7}
    44cc:	b085      	sub	sp, #20
    44ce:	af00      	add	r7, sp, #0
    44d0:	60f8      	str	r0, [r7, #12]
    44d2:	460b      	mov	r3, r1
    44d4:	607a      	str	r2, [r7, #4]
    44d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    44d8:	7afb      	ldrb	r3, [r7, #11]
    44da:	7afa      	ldrb	r2, [r7, #11]
    44dc:	68f9      	ldr	r1, [r7, #12]
    44de:	01d2      	lsls	r2, r2, #7
    44e0:	440a      	add	r2, r1
    44e2:	322c      	adds	r2, #44	; 0x2c
    44e4:	6811      	ldr	r1, [r2, #0]
    44e6:	687a      	ldr	r2, [r7, #4]
    44e8:	430a      	orrs	r2, r1
    44ea:	68f9      	ldr	r1, [r7, #12]
    44ec:	01db      	lsls	r3, r3, #7
    44ee:	440b      	add	r3, r1
    44f0:	332c      	adds	r3, #44	; 0x2c
    44f2:	601a      	str	r2, [r3, #0]
}
    44f4:	bf00      	nop
    44f6:	3714      	adds	r7, #20
    44f8:	46bd      	mov	sp, r7
    44fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    44fe:	4770      	bx	lr

00004500 <_port_event_init>:

static inline void _port_event_init()
{
    4500:	b580      	push	{r7, lr}
    4502:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4504:	2200      	movs	r2, #0
    4506:	2100      	movs	r1, #0
    4508:	4809      	ldr	r0, [pc, #36]	; (4530 <_port_event_init+0x30>)
    450a:	4b0a      	ldr	r3, [pc, #40]	; (4534 <_port_event_init+0x34>)
    450c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    450e:	2200      	movs	r2, #0
    4510:	2101      	movs	r1, #1
    4512:	4807      	ldr	r0, [pc, #28]	; (4530 <_port_event_init+0x30>)
    4514:	4b07      	ldr	r3, [pc, #28]	; (4534 <_port_event_init+0x34>)
    4516:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4518:	22ef      	movs	r2, #239	; 0xef
    451a:	2102      	movs	r1, #2
    451c:	4804      	ldr	r0, [pc, #16]	; (4530 <_port_event_init+0x30>)
    451e:	4b05      	ldr	r3, [pc, #20]	; (4534 <_port_event_init+0x34>)
    4520:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4522:	2200      	movs	r2, #0
    4524:	2103      	movs	r1, #3
    4526:	4802      	ldr	r0, [pc, #8]	; (4530 <_port_event_init+0x30>)
    4528:	4b02      	ldr	r3, [pc, #8]	; (4534 <_port_event_init+0x34>)
    452a:	4798      	blx	r3
}
    452c:	bf00      	nop
    452e:	bd80      	pop	{r7, pc}
    4530:	41008000 	.word	0x41008000
    4534:	000044cb 	.word	0x000044cb

00004538 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4538:	b580      	push	{r7, lr}
    453a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    453c:	2104      	movs	r1, #4
    453e:	480b      	ldr	r0, [pc, #44]	; (456c <_init_chip+0x34>)
    4540:	4b0b      	ldr	r3, [pc, #44]	; (4570 <_init_chip+0x38>)
    4542:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4544:	4b0b      	ldr	r3, [pc, #44]	; (4574 <_init_chip+0x3c>)
    4546:	4798      	blx	r3
	_oscctrl_init_sources();
    4548:	4b0b      	ldr	r3, [pc, #44]	; (4578 <_init_chip+0x40>)
    454a:	4798      	blx	r3
	_mclk_init();
    454c:	4b0b      	ldr	r3, [pc, #44]	; (457c <_init_chip+0x44>)
    454e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4550:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4554:	4b0a      	ldr	r3, [pc, #40]	; (4580 <_init_chip+0x48>)
    4556:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4558:	4b0a      	ldr	r3, [pc, #40]	; (4584 <_init_chip+0x4c>)
    455a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    455c:	f640 30df 	movw	r0, #3039	; 0xbdf
    4560:	4b07      	ldr	r3, [pc, #28]	; (4580 <_init_chip+0x48>)
    4562:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4564:	4b08      	ldr	r3, [pc, #32]	; (4588 <_init_chip+0x50>)
    4566:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4568:	bf00      	nop
    456a:	bd80      	pop	{r7, pc}
    456c:	41004000 	.word	0x41004000
    4570:	00004499 	.word	0x00004499
    4574:	00004ec1 	.word	0x00004ec1
    4578:	00005389 	.word	0x00005389
    457c:	00004de1 	.word	0x00004de1
    4580:	00004ca1 	.word	0x00004ca1
    4584:	000053c9 	.word	0x000053c9
    4588:	00004501 	.word	0x00004501

0000458c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    458c:	b480      	push	{r7}
    458e:	b083      	sub	sp, #12
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
    4594:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	683a      	ldr	r2, [r7, #0]
    459a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    459c:	2300      	movs	r3, #0
}
    459e:	4618      	mov	r0, r3
    45a0:	370c      	adds	r7, #12
    45a2:	46bd      	mov	sp, r7
    45a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a8:	4770      	bx	lr
	...

000045ac <__NVIC_EnableIRQ>:
{
    45ac:	b480      	push	{r7}
    45ae:	b083      	sub	sp, #12
    45b0:	af00      	add	r7, sp, #0
    45b2:	4603      	mov	r3, r0
    45b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45ba:	2b00      	cmp	r3, #0
    45bc:	db0b      	blt.n	45d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45be:	4909      	ldr	r1, [pc, #36]	; (45e4 <__NVIC_EnableIRQ+0x38>)
    45c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45c4:	095b      	lsrs	r3, r3, #5
    45c6:	88fa      	ldrh	r2, [r7, #6]
    45c8:	f002 021f 	and.w	r2, r2, #31
    45cc:	2001      	movs	r0, #1
    45ce:	fa00 f202 	lsl.w	r2, r0, r2
    45d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    45d6:	bf00      	nop
    45d8:	370c      	adds	r7, #12
    45da:	46bd      	mov	sp, r7
    45dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e0:	4770      	bx	lr
    45e2:	bf00      	nop
    45e4:	e000e100 	.word	0xe000e100

000045e8 <__NVIC_DisableIRQ>:
{
    45e8:	b480      	push	{r7}
    45ea:	b083      	sub	sp, #12
    45ec:	af00      	add	r7, sp, #0
    45ee:	4603      	mov	r3, r0
    45f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45f6:	2b00      	cmp	r3, #0
    45f8:	db10      	blt.n	461c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45fa:	490b      	ldr	r1, [pc, #44]	; (4628 <__NVIC_DisableIRQ+0x40>)
    45fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4600:	095b      	lsrs	r3, r3, #5
    4602:	88fa      	ldrh	r2, [r7, #6]
    4604:	f002 021f 	and.w	r2, r2, #31
    4608:	2001      	movs	r0, #1
    460a:	fa00 f202 	lsl.w	r2, r0, r2
    460e:	3320      	adds	r3, #32
    4610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4618:	f3bf 8f6f 	isb	sy
}
    461c:	bf00      	nop
    461e:	370c      	adds	r7, #12
    4620:	46bd      	mov	sp, r7
    4622:	f85d 7b04 	ldr.w	r7, [sp], #4
    4626:	4770      	bx	lr
    4628:	e000e100 	.word	0xe000e100

0000462c <__NVIC_ClearPendingIRQ>:
{
    462c:	b480      	push	{r7}
    462e:	b083      	sub	sp, #12
    4630:	af00      	add	r7, sp, #0
    4632:	4603      	mov	r3, r0
    4634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    463a:	2b00      	cmp	r3, #0
    463c:	db0c      	blt.n	4658 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    463e:	4909      	ldr	r1, [pc, #36]	; (4664 <__NVIC_ClearPendingIRQ+0x38>)
    4640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4644:	095b      	lsrs	r3, r3, #5
    4646:	88fa      	ldrh	r2, [r7, #6]
    4648:	f002 021f 	and.w	r2, r2, #31
    464c:	2001      	movs	r0, #1
    464e:	fa00 f202 	lsl.w	r2, r0, r2
    4652:	3360      	adds	r3, #96	; 0x60
    4654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4658:	bf00      	nop
    465a:	370c      	adds	r7, #12
    465c:	46bd      	mov	sp, r7
    465e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4662:	4770      	bx	lr
    4664:	e000e100 	.word	0xe000e100

00004668 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4668:	b480      	push	{r7}
    466a:	b083      	sub	sp, #12
    466c:	af00      	add	r7, sp, #0
    466e:	6078      	str	r0, [r7, #4]
    4670:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4672:	bf00      	nop
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	685a      	ldr	r2, [r3, #4]
    4678:	683b      	ldr	r3, [r7, #0]
    467a:	4013      	ands	r3, r2
    467c:	2b00      	cmp	r3, #0
    467e:	d1f9      	bne.n	4674 <hri_eic_wait_for_sync+0xc>
	};
}
    4680:	bf00      	nop
    4682:	370c      	adds	r7, #12
    4684:	46bd      	mov	sp, r7
    4686:	f85d 7b04 	ldr.w	r7, [sp], #4
    468a:	4770      	bx	lr

0000468c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    468c:	b480      	push	{r7}
    468e:	b083      	sub	sp, #12
    4690:	af00      	add	r7, sp, #0
    4692:	6078      	str	r0, [r7, #4]
    4694:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	685a      	ldr	r2, [r3, #4]
    469a:	683b      	ldr	r3, [r7, #0]
    469c:	4013      	ands	r3, r2
    469e:	2b00      	cmp	r3, #0
    46a0:	bf14      	ite	ne
    46a2:	2301      	movne	r3, #1
    46a4:	2300      	moveq	r3, #0
    46a6:	b2db      	uxtb	r3, r3
}
    46a8:	4618      	mov	r0, r3
    46aa:	370c      	adds	r7, #12
    46ac:	46bd      	mov	sp, r7
    46ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b2:	4770      	bx	lr

000046b4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    46b4:	b480      	push	{r7}
    46b6:	b083      	sub	sp, #12
    46b8:	af00      	add	r7, sp, #0
    46ba:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	695b      	ldr	r3, [r3, #20]
}
    46c0:	4618      	mov	r0, r3
    46c2:	370c      	adds	r7, #12
    46c4:	46bd      	mov	sp, r7
    46c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ca:	4770      	bx	lr

000046cc <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    46cc:	b480      	push	{r7}
    46ce:	b083      	sub	sp, #12
    46d0:	af00      	add	r7, sp, #0
    46d2:	6078      	str	r0, [r7, #4]
    46d4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	683a      	ldr	r2, [r7, #0]
    46da:	615a      	str	r2, [r3, #20]
}
    46dc:	bf00      	nop
    46de:	370c      	adds	r7, #12
    46e0:	46bd      	mov	sp, r7
    46e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46e6:	4770      	bx	lr

000046e8 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    46e8:	b580      	push	{r7, lr}
    46ea:	b082      	sub	sp, #8
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	781b      	ldrb	r3, [r3, #0]
    46f4:	b2db      	uxtb	r3, r3
    46f6:	f043 0302 	orr.w	r3, r3, #2
    46fa:	b2da      	uxtb	r2, r3
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4700:	2103      	movs	r1, #3
    4702:	6878      	ldr	r0, [r7, #4]
    4704:	4b02      	ldr	r3, [pc, #8]	; (4710 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4706:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4708:	bf00      	nop
    470a:	3708      	adds	r7, #8
    470c:	46bd      	mov	sp, r7
    470e:	bd80      	pop	{r7, pc}
    4710:	00004669 	.word	0x00004669

00004714 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4714:	b580      	push	{r7, lr}
    4716:	b082      	sub	sp, #8
    4718:	af00      	add	r7, sp, #0
    471a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	781b      	ldrb	r3, [r3, #0]
    4720:	b2db      	uxtb	r3, r3
    4722:	f023 0302 	bic.w	r3, r3, #2
    4726:	b2da      	uxtb	r2, r3
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    472c:	2103      	movs	r1, #3
    472e:	6878      	ldr	r0, [r7, #4]
    4730:	4b02      	ldr	r3, [pc, #8]	; (473c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4732:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4734:	bf00      	nop
    4736:	3708      	adds	r7, #8
    4738:	46bd      	mov	sp, r7
    473a:	bd80      	pop	{r7, pc}
    473c:	00004669 	.word	0x00004669

00004740 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4740:	b580      	push	{r7, lr}
    4742:	b084      	sub	sp, #16
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
    4748:	460b      	mov	r3, r1
    474a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	781b      	ldrb	r3, [r3, #0]
    4750:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4752:	7bfb      	ldrb	r3, [r7, #15]
    4754:	f023 0310 	bic.w	r3, r3, #16
    4758:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    475a:	78fb      	ldrb	r3, [r7, #3]
    475c:	011b      	lsls	r3, r3, #4
    475e:	b25a      	sxtb	r2, r3
    4760:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4764:	4313      	orrs	r3, r2
    4766:	b25b      	sxtb	r3, r3
    4768:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	7bfa      	ldrb	r2, [r7, #15]
    476e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4770:	2103      	movs	r1, #3
    4772:	6878      	ldr	r0, [r7, #4]
    4774:	4b02      	ldr	r3, [pc, #8]	; (4780 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4776:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4778:	bf00      	nop
    477a:	3710      	adds	r7, #16
    477c:	46bd      	mov	sp, r7
    477e:	bd80      	pop	{r7, pc}
    4780:	00004669 	.word	0x00004669

00004784 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4784:	b580      	push	{r7, lr}
    4786:	b084      	sub	sp, #16
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
    478c:	460b      	mov	r3, r1
    478e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4790:	2103      	movs	r1, #3
    4792:	6878      	ldr	r0, [r7, #4]
    4794:	4b06      	ldr	r3, [pc, #24]	; (47b0 <hri_eic_get_CTRLA_reg+0x2c>)
    4796:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	781b      	ldrb	r3, [r3, #0]
    479c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    479e:	7bfa      	ldrb	r2, [r7, #15]
    47a0:	78fb      	ldrb	r3, [r7, #3]
    47a2:	4013      	ands	r3, r2
    47a4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    47a6:	7bfb      	ldrb	r3, [r7, #15]
}
    47a8:	4618      	mov	r0, r3
    47aa:	3710      	adds	r7, #16
    47ac:	46bd      	mov	sp, r7
    47ae:	bd80      	pop	{r7, pc}
    47b0:	00004669 	.word	0x00004669

000047b4 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b082      	sub	sp, #8
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]
    47bc:	460b      	mov	r3, r1
    47be:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	78fa      	ldrb	r2, [r7, #3]
    47c4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47c6:	2103      	movs	r1, #3
    47c8:	6878      	ldr	r0, [r7, #4]
    47ca:	4b03      	ldr	r3, [pc, #12]	; (47d8 <hri_eic_write_CTRLA_reg+0x24>)
    47cc:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    47ce:	bf00      	nop
    47d0:	3708      	adds	r7, #8
    47d2:	46bd      	mov	sp, r7
    47d4:	bd80      	pop	{r7, pc}
    47d6:	bf00      	nop
    47d8:	00004669 	.word	0x00004669

000047dc <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    47dc:	b480      	push	{r7}
    47de:	b083      	sub	sp, #12
    47e0:	af00      	add	r7, sp, #0
    47e2:	6078      	str	r0, [r7, #4]
    47e4:	460b      	mov	r3, r1
    47e6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	78fa      	ldrb	r2, [r7, #3]
    47ec:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47ee:	bf00      	nop
    47f0:	370c      	adds	r7, #12
    47f2:	46bd      	mov	sp, r7
    47f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f8:	4770      	bx	lr

000047fa <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    47fa:	b480      	push	{r7}
    47fc:	b083      	sub	sp, #12
    47fe:	af00      	add	r7, sp, #0
    4800:	6078      	str	r0, [r7, #4]
    4802:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	683a      	ldr	r2, [r7, #0]
    4808:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    480a:	bf00      	nop
    480c:	370c      	adds	r7, #12
    480e:	46bd      	mov	sp, r7
    4810:	f85d 7b04 	ldr.w	r7, [sp], #4
    4814:	4770      	bx	lr

00004816 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4816:	b480      	push	{r7}
    4818:	b083      	sub	sp, #12
    481a:	af00      	add	r7, sp, #0
    481c:	6078      	str	r0, [r7, #4]
    481e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4820:	687b      	ldr	r3, [r7, #4]
    4822:	683a      	ldr	r2, [r7, #0]
    4824:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4826:	bf00      	nop
    4828:	370c      	adds	r7, #12
    482a:	46bd      	mov	sp, r7
    482c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4830:	4770      	bx	lr

00004832 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4832:	b480      	push	{r7}
    4834:	b085      	sub	sp, #20
    4836:	af00      	add	r7, sp, #0
    4838:	60f8      	str	r0, [r7, #12]
    483a:	460b      	mov	r3, r1
    483c:	607a      	str	r2, [r7, #4]
    483e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4840:	7afb      	ldrb	r3, [r7, #11]
    4842:	68fa      	ldr	r2, [r7, #12]
    4844:	3306      	adds	r3, #6
    4846:	009b      	lsls	r3, r3, #2
    4848:	4413      	add	r3, r2
    484a:	687a      	ldr	r2, [r7, #4]
    484c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    484e:	bf00      	nop
    4850:	3714      	adds	r7, #20
    4852:	46bd      	mov	sp, r7
    4854:	f85d 7b04 	ldr.w	r7, [sp], #4
    4858:	4770      	bx	lr

0000485a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    485a:	b480      	push	{r7}
    485c:	b083      	sub	sp, #12
    485e:	af00      	add	r7, sp, #0
    4860:	6078      	str	r0, [r7, #4]
    4862:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	683a      	ldr	r2, [r7, #0]
    4868:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    486a:	bf00      	nop
    486c:	370c      	adds	r7, #12
    486e:	46bd      	mov	sp, r7
    4870:	f85d 7b04 	ldr.w	r7, [sp], #4
    4874:	4770      	bx	lr

00004876 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4876:	b480      	push	{r7}
    4878:	b083      	sub	sp, #12
    487a:	af00      	add	r7, sp, #0
    487c:	6078      	str	r0, [r7, #4]
    487e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	683a      	ldr	r2, [r7, #0]
    4884:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4886:	bf00      	nop
    4888:	370c      	adds	r7, #12
    488a:	46bd      	mov	sp, r7
    488c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4890:	4770      	bx	lr
	...

00004894 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4894:	b580      	push	{r7, lr}
    4896:	b082      	sub	sp, #8
    4898:	af00      	add	r7, sp, #0
    489a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    489c:	2101      	movs	r1, #1
    489e:	4838      	ldr	r0, [pc, #224]	; (4980 <_ext_irq_init+0xec>)
    48a0:	4b38      	ldr	r3, [pc, #224]	; (4984 <_ext_irq_init+0xf0>)
    48a2:	4798      	blx	r3
    48a4:	4603      	mov	r3, r0
    48a6:	f083 0301 	eor.w	r3, r3, #1
    48aa:	b2db      	uxtb	r3, r3
    48ac:	2b00      	cmp	r3, #0
    48ae:	d011      	beq.n	48d4 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    48b0:	2102      	movs	r1, #2
    48b2:	4833      	ldr	r0, [pc, #204]	; (4980 <_ext_irq_init+0xec>)
    48b4:	4b34      	ldr	r3, [pc, #208]	; (4988 <_ext_irq_init+0xf4>)
    48b6:	4798      	blx	r3
    48b8:	4603      	mov	r3, r0
    48ba:	2b00      	cmp	r3, #0
    48bc:	d006      	beq.n	48cc <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    48be:	4830      	ldr	r0, [pc, #192]	; (4980 <_ext_irq_init+0xec>)
    48c0:	4b32      	ldr	r3, [pc, #200]	; (498c <_ext_irq_init+0xf8>)
    48c2:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    48c4:	2102      	movs	r1, #2
    48c6:	482e      	ldr	r0, [pc, #184]	; (4980 <_ext_irq_init+0xec>)
    48c8:	4b31      	ldr	r3, [pc, #196]	; (4990 <_ext_irq_init+0xfc>)
    48ca:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    48cc:	2101      	movs	r1, #1
    48ce:	482c      	ldr	r0, [pc, #176]	; (4980 <_ext_irq_init+0xec>)
    48d0:	4b30      	ldr	r3, [pc, #192]	; (4994 <_ext_irq_init+0x100>)
    48d2:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    48d4:	2101      	movs	r1, #1
    48d6:	482a      	ldr	r0, [pc, #168]	; (4980 <_ext_irq_init+0xec>)
    48d8:	4b2d      	ldr	r3, [pc, #180]	; (4990 <_ext_irq_init+0xfc>)
    48da:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    48dc:	2100      	movs	r1, #0
    48de:	4828      	ldr	r0, [pc, #160]	; (4980 <_ext_irq_init+0xec>)
    48e0:	4b2d      	ldr	r3, [pc, #180]	; (4998 <_ext_irq_init+0x104>)
    48e2:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    48e4:	2100      	movs	r1, #0
    48e6:	4826      	ldr	r0, [pc, #152]	; (4980 <_ext_irq_init+0xec>)
    48e8:	4b2c      	ldr	r3, [pc, #176]	; (499c <_ext_irq_init+0x108>)
    48ea:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    48ec:	2100      	movs	r1, #0
    48ee:	4824      	ldr	r0, [pc, #144]	; (4980 <_ext_irq_init+0xec>)
    48f0:	4b2b      	ldr	r3, [pc, #172]	; (49a0 <_ext_irq_init+0x10c>)
    48f2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    48f4:	2130      	movs	r1, #48	; 0x30
    48f6:	4822      	ldr	r0, [pc, #136]	; (4980 <_ext_irq_init+0xec>)
    48f8:	4b2a      	ldr	r3, [pc, #168]	; (49a4 <_ext_irq_init+0x110>)
    48fa:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    48fc:	2130      	movs	r1, #48	; 0x30
    48fe:	4820      	ldr	r0, [pc, #128]	; (4980 <_ext_irq_init+0xec>)
    4900:	4b29      	ldr	r3, [pc, #164]	; (49a8 <_ext_irq_init+0x114>)
    4902:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4904:	2100      	movs	r1, #0
    4906:	481e      	ldr	r0, [pc, #120]	; (4980 <_ext_irq_init+0xec>)
    4908:	4b28      	ldr	r3, [pc, #160]	; (49ac <_ext_irq_init+0x118>)
    490a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    490c:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    4910:	2100      	movs	r1, #0
    4912:	481b      	ldr	r0, [pc, #108]	; (4980 <_ext_irq_init+0xec>)
    4914:	4b26      	ldr	r3, [pc, #152]	; (49b0 <_ext_irq_init+0x11c>)
    4916:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4918:	2200      	movs	r2, #0
    491a:	2101      	movs	r1, #1
    491c:	4818      	ldr	r0, [pc, #96]	; (4980 <_ext_irq_init+0xec>)
    491e:	4b24      	ldr	r3, [pc, #144]	; (49b0 <_ext_irq_init+0x11c>)
    4920:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4922:	4817      	ldr	r0, [pc, #92]	; (4980 <_ext_irq_init+0xec>)
    4924:	4b23      	ldr	r3, [pc, #140]	; (49b4 <_ext_irq_init+0x120>)
    4926:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4928:	2010      	movs	r0, #16
    492a:	4b23      	ldr	r3, [pc, #140]	; (49b8 <_ext_irq_init+0x124>)
    492c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    492e:	2010      	movs	r0, #16
    4930:	4b22      	ldr	r3, [pc, #136]	; (49bc <_ext_irq_init+0x128>)
    4932:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4934:	2010      	movs	r0, #16
    4936:	4b22      	ldr	r3, [pc, #136]	; (49c0 <_ext_irq_init+0x12c>)
    4938:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    493a:	2011      	movs	r0, #17
    493c:	4b1e      	ldr	r3, [pc, #120]	; (49b8 <_ext_irq_init+0x124>)
    493e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4940:	2011      	movs	r0, #17
    4942:	4b1e      	ldr	r3, [pc, #120]	; (49bc <_ext_irq_init+0x128>)
    4944:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4946:	2011      	movs	r0, #17
    4948:	4b1d      	ldr	r3, [pc, #116]	; (49c0 <_ext_irq_init+0x12c>)
    494a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    494c:	2012      	movs	r0, #18
    494e:	4b1a      	ldr	r3, [pc, #104]	; (49b8 <_ext_irq_init+0x124>)
    4950:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4952:	2012      	movs	r0, #18
    4954:	4b19      	ldr	r3, [pc, #100]	; (49bc <_ext_irq_init+0x128>)
    4956:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4958:	2012      	movs	r0, #18
    495a:	4b19      	ldr	r3, [pc, #100]	; (49c0 <_ext_irq_init+0x12c>)
    495c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    495e:	2013      	movs	r0, #19
    4960:	4b15      	ldr	r3, [pc, #84]	; (49b8 <_ext_irq_init+0x124>)
    4962:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4964:	2013      	movs	r0, #19
    4966:	4b15      	ldr	r3, [pc, #84]	; (49bc <_ext_irq_init+0x128>)
    4968:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    496a:	2013      	movs	r0, #19
    496c:	4b14      	ldr	r3, [pc, #80]	; (49c0 <_ext_irq_init+0x12c>)
    496e:	4798      	blx	r3

	callback = cb;
    4970:	4a14      	ldr	r2, [pc, #80]	; (49c4 <_ext_irq_init+0x130>)
    4972:	687b      	ldr	r3, [r7, #4]
    4974:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4976:	2300      	movs	r3, #0
}
    4978:	4618      	mov	r0, r3
    497a:	3708      	adds	r7, #8
    497c:	46bd      	mov	sp, r7
    497e:	bd80      	pop	{r7, pc}
    4980:	40002800 	.word	0x40002800
    4984:	0000468d 	.word	0x0000468d
    4988:	00004785 	.word	0x00004785
    498c:	00004715 	.word	0x00004715
    4990:	00004669 	.word	0x00004669
    4994:	000047b5 	.word	0x000047b5
    4998:	00004741 	.word	0x00004741
    499c:	000047dd 	.word	0x000047dd
    49a0:	000047fb 	.word	0x000047fb
    49a4:	00004817 	.word	0x00004817
    49a8:	0000485b 	.word	0x0000485b
    49ac:	00004877 	.word	0x00004877
    49b0:	00004833 	.word	0x00004833
    49b4:	000046e9 	.word	0x000046e9
    49b8:	000045e9 	.word	0x000045e9
    49bc:	0000462d 	.word	0x0000462d
    49c0:	000045ad 	.word	0x000045ad
    49c4:	200006d4 	.word	0x200006d4

000049c8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	b084      	sub	sp, #16
    49cc:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    49ce:	4841      	ldr	r0, [pc, #260]	; (4ad4 <_ext_irq_handler+0x10c>)
    49d0:	4b41      	ldr	r3, [pc, #260]	; (4ad8 <_ext_irq_handler+0x110>)
    49d2:	4798      	blx	r3
    49d4:	4603      	mov	r3, r0
    49d6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    49d8:	f04f 33ff 	mov.w	r3, #4294967295
    49dc:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    49de:	683b      	ldr	r3, [r7, #0]
    49e0:	4619      	mov	r1, r3
    49e2:	483c      	ldr	r0, [pc, #240]	; (4ad4 <_ext_irq_handler+0x10c>)
    49e4:	4b3d      	ldr	r3, [pc, #244]	; (4adc <_ext_irq_handler+0x114>)
    49e6:	4798      	blx	r3

	ASSERT(callback);
    49e8:	4b3d      	ldr	r3, [pc, #244]	; (4ae0 <_ext_irq_handler+0x118>)
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	2b00      	cmp	r3, #0
    49ee:	bf14      	ite	ne
    49f0:	2301      	movne	r3, #1
    49f2:	2300      	moveq	r3, #0
    49f4:	b2db      	uxtb	r3, r3
    49f6:	22f4      	movs	r2, #244	; 0xf4
    49f8:	493a      	ldr	r1, [pc, #232]	; (4ae4 <_ext_irq_handler+0x11c>)
    49fa:	4618      	mov	r0, r3
    49fc:	4b3a      	ldr	r3, [pc, #232]	; (4ae8 <_ext_irq_handler+0x120>)
    49fe:	4798      	blx	r3

	while (flags) {
    4a00:	e060      	b.n	4ac4 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    4a02:	683b      	ldr	r3, [r7, #0]
    4a04:	4618      	mov	r0, r3
    4a06:	4b39      	ldr	r3, [pc, #228]	; (4aec <_ext_irq_handler+0x124>)
    4a08:	4798      	blx	r3
    4a0a:	4603      	mov	r3, r0
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	3b01      	subs	r3, #1
    4a10:	b2db      	uxtb	r3, r3
    4a12:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4a14:	e047      	b.n	4aa6 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4a16:	2300      	movs	r3, #0
    4a18:	71fb      	strb	r3, [r7, #7]
    4a1a:	2304      	movs	r3, #4
    4a1c:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4a1e:	e024      	b.n	4a6a <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    4a20:	79ba      	ldrb	r2, [r7, #6]
    4a22:	79fb      	ldrb	r3, [r7, #7]
    4a24:	4413      	add	r3, r2
    4a26:	105b      	asrs	r3, r3, #1
    4a28:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4a2a:	797b      	ldrb	r3, [r7, #5]
    4a2c:	4a30      	ldr	r2, [pc, #192]	; (4af0 <_ext_irq_handler+0x128>)
    4a2e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a32:	461a      	mov	r2, r3
    4a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a38:	429a      	cmp	r2, r3
    4a3a:	d106      	bne.n	4a4a <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    4a3c:	797b      	ldrb	r3, [r7, #5]
    4a3e:	4a2c      	ldr	r2, [pc, #176]	; (4af0 <_ext_irq_handler+0x128>)
    4a40:	00db      	lsls	r3, r3, #3
    4a42:	4413      	add	r3, r2
    4a44:	685b      	ldr	r3, [r3, #4]
    4a46:	60bb      	str	r3, [r7, #8]
					break;
    4a48:	e013      	b.n	4a72 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    4a4a:	797b      	ldrb	r3, [r7, #5]
    4a4c:	4a28      	ldr	r2, [pc, #160]	; (4af0 <_ext_irq_handler+0x128>)
    4a4e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a52:	461a      	mov	r2, r3
    4a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a58:	429a      	cmp	r2, r3
    4a5a:	da03      	bge.n	4a64 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    4a5c:	797b      	ldrb	r3, [r7, #5]
    4a5e:	3301      	adds	r3, #1
    4a60:	71fb      	strb	r3, [r7, #7]
    4a62:	e002      	b.n	4a6a <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    4a64:	797b      	ldrb	r3, [r7, #5]
    4a66:	3b01      	subs	r3, #1
    4a68:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4a6a:	79ba      	ldrb	r2, [r7, #6]
    4a6c:	79fb      	ldrb	r3, [r7, #7]
    4a6e:	429a      	cmp	r2, r3
    4a70:	d2d6      	bcs.n	4a20 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4a72:	68bb      	ldr	r3, [r7, #8]
    4a74:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a78:	d003      	beq.n	4a82 <_ext_irq_handler+0xba>
				callback(pin);
    4a7a:	4b19      	ldr	r3, [pc, #100]	; (4ae0 <_ext_irq_handler+0x118>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	68b8      	ldr	r0, [r7, #8]
    4a80:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a86:	2201      	movs	r2, #1
    4a88:	fa02 f303 	lsl.w	r3, r2, r3
    4a8c:	43da      	mvns	r2, r3
    4a8e:	683b      	ldr	r3, [r7, #0]
    4a90:	4013      	ands	r3, r2
    4a92:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4a94:	683b      	ldr	r3, [r7, #0]
    4a96:	4618      	mov	r0, r3
    4a98:	4b14      	ldr	r3, [pc, #80]	; (4aec <_ext_irq_handler+0x124>)
    4a9a:	4798      	blx	r3
    4a9c:	4603      	mov	r3, r0
    4a9e:	b2db      	uxtb	r3, r3
    4aa0:	3b01      	subs	r3, #1
    4aa2:	b2db      	uxtb	r3, r3
    4aa4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
    4aae:	d1b2      	bne.n	4a16 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4ab0:	4808      	ldr	r0, [pc, #32]	; (4ad4 <_ext_irq_handler+0x10c>)
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <_ext_irq_handler+0x110>)
    4ab4:	4798      	blx	r3
    4ab6:	4603      	mov	r3, r0
    4ab8:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4aba:	683b      	ldr	r3, [r7, #0]
    4abc:	4619      	mov	r1, r3
    4abe:	4805      	ldr	r0, [pc, #20]	; (4ad4 <_ext_irq_handler+0x10c>)
    4ac0:	4b06      	ldr	r3, [pc, #24]	; (4adc <_ext_irq_handler+0x114>)
    4ac2:	4798      	blx	r3
	while (flags) {
    4ac4:	683b      	ldr	r3, [r7, #0]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d19b      	bne.n	4a02 <_ext_irq_handler+0x3a>
	}
}
    4aca:	bf00      	nop
    4acc:	3710      	adds	r7, #16
    4ace:	46bd      	mov	sp, r7
    4ad0:	bd80      	pop	{r7, pc}
    4ad2:	bf00      	nop
    4ad4:	40002800 	.word	0x40002800
    4ad8:	000046b5 	.word	0x000046b5
    4adc:	000046cd 	.word	0x000046cd
    4ae0:	200006d4 	.word	0x200006d4
    4ae4:	0000edc0 	.word	0x0000edc0
    4ae8:	00003931 	.word	0x00003931
    4aec:	0000e7bd 	.word	0x0000e7bd
    4af0:	0000eda0 	.word	0x0000eda0

00004af4 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4af8:	4b01      	ldr	r3, [pc, #4]	; (4b00 <EIC_4_Handler+0xc>)
    4afa:	4798      	blx	r3
} /**
    4afc:	bf00      	nop
    4afe:	bd80      	pop	{r7, pc}
    4b00:	000049c9 	.word	0x000049c9

00004b04 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4b04:	b580      	push	{r7, lr}
    4b06:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b08:	4b01      	ldr	r3, [pc, #4]	; (4b10 <EIC_5_Handler+0xc>)
    4b0a:	4798      	blx	r3
} /**
    4b0c:	bf00      	nop
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	000049c9 	.word	0x000049c9

00004b14 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4b14:	b580      	push	{r7, lr}
    4b16:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b18:	4b01      	ldr	r3, [pc, #4]	; (4b20 <EIC_6_Handler+0xc>)
    4b1a:	4798      	blx	r3
} /**
    4b1c:	bf00      	nop
    4b1e:	bd80      	pop	{r7, pc}
    4b20:	000049c9 	.word	0x000049c9

00004b24 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4b24:	b580      	push	{r7, lr}
    4b26:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b28:	4b01      	ldr	r3, [pc, #4]	; (4b30 <EIC_7_Handler+0xc>)
    4b2a:	4798      	blx	r3
}
    4b2c:	bf00      	nop
    4b2e:	bd80      	pop	{r7, pc}
    4b30:	000049c9 	.word	0x000049c9

00004b34 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4b34:	b480      	push	{r7}
    4b36:	b085      	sub	sp, #20
    4b38:	af00      	add	r7, sp, #0
    4b3a:	60f8      	str	r0, [r7, #12]
    4b3c:	460b      	mov	r3, r1
    4b3e:	607a      	str	r2, [r7, #4]
    4b40:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4b42:	7afa      	ldrb	r2, [r7, #11]
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	3248      	adds	r2, #72	; 0x48
    4b48:	6879      	ldr	r1, [r7, #4]
    4b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b4e:	bf00      	nop
    4b50:	3714      	adds	r7, #20
    4b52:	46bd      	mov	sp, r7
    4b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b58:	4770      	bx	lr

00004b5a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4b5a:	b480      	push	{r7}
    4b5c:	b083      	sub	sp, #12
    4b5e:	af00      	add	r7, sp, #0
    4b60:	6078      	str	r0, [r7, #4]
    4b62:	460b      	mov	r3, r1
    4b64:	70fb      	strb	r3, [r7, #3]
    4b66:	4613      	mov	r3, r2
    4b68:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4b6a:	78fb      	ldrb	r3, [r7, #3]
    4b6c:	687a      	ldr	r2, [r7, #4]
    4b6e:	3304      	adds	r3, #4
    4b70:	00db      	lsls	r3, r3, #3
    4b72:	4413      	add	r3, r2
    4b74:	78ba      	ldrb	r2, [r7, #2]
    4b76:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4b78:	78fb      	ldrb	r3, [r7, #3]
    4b7a:	78ba      	ldrb	r2, [r7, #2]
    4b7c:	43d2      	mvns	r2, r2
    4b7e:	b2d1      	uxtb	r1, r2
    4b80:	687a      	ldr	r2, [r7, #4]
    4b82:	3304      	adds	r3, #4
    4b84:	00db      	lsls	r3, r3, #3
    4b86:	4413      	add	r3, r2
    4b88:	460a      	mov	r2, r1
    4b8a:	711a      	strb	r2, [r3, #4]
}
    4b8c:	bf00      	nop
    4b8e:	370c      	adds	r7, #12
    4b90:	46bd      	mov	sp, r7
    4b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b96:	4770      	bx	lr

00004b98 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4b98:	b480      	push	{r7}
    4b9a:	b085      	sub	sp, #20
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	60f8      	str	r0, [r7, #12]
    4ba0:	460b      	mov	r3, r1
    4ba2:	607a      	str	r2, [r7, #4]
    4ba4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4ba6:	7afa      	ldrb	r2, [r7, #11]
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	3204      	adds	r2, #4
    4bac:	6879      	ldr	r1, [r7, #4]
    4bae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4bb2:	bf00      	nop
    4bb4:	3714      	adds	r7, #20
    4bb6:	46bd      	mov	sp, r7
    4bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bbc:	4770      	bx	lr
	...

00004bc0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b082      	sub	sp, #8
    4bc4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4bc6:	2300      	movs	r3, #0
    4bc8:	71fb      	strb	r3, [r7, #7]
    4bca:	e00b      	b.n	4be4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4bcc:	79fb      	ldrb	r3, [r7, #7]
    4bce:	4a18      	ldr	r2, [pc, #96]	; (4c30 <_event_system_init+0x70>)
    4bd0:	5cd3      	ldrb	r3, [r2, r3]
    4bd2:	461a      	mov	r2, r3
    4bd4:	79fb      	ldrb	r3, [r7, #7]
    4bd6:	4619      	mov	r1, r3
    4bd8:	4816      	ldr	r0, [pc, #88]	; (4c34 <_event_system_init+0x74>)
    4bda:	4b17      	ldr	r3, [pc, #92]	; (4c38 <_event_system_init+0x78>)
    4bdc:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4bde:	79fb      	ldrb	r3, [r7, #7]
    4be0:	3301      	adds	r3, #1
    4be2:	71fb      	strb	r3, [r7, #7]
    4be4:	79fb      	ldrb	r3, [r7, #7]
    4be6:	2b42      	cmp	r3, #66	; 0x42
    4be8:	d9f0      	bls.n	4bcc <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4bea:	2300      	movs	r3, #0
    4bec:	71fb      	strb	r3, [r7, #7]
    4bee:	e016      	b.n	4c1e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4bf0:	79fb      	ldrb	r3, [r7, #7]
    4bf2:	4a12      	ldr	r2, [pc, #72]	; (4c3c <_event_system_init+0x7c>)
    4bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4bf8:	461a      	mov	r2, r3
    4bfa:	79fb      	ldrb	r3, [r7, #7]
    4bfc:	4619      	mov	r1, r3
    4bfe:	480d      	ldr	r0, [pc, #52]	; (4c34 <_event_system_init+0x74>)
    4c00:	4b0f      	ldr	r3, [pc, #60]	; (4c40 <_event_system_init+0x80>)
    4c02:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4c04:	79fb      	ldrb	r3, [r7, #7]
    4c06:	4a0f      	ldr	r2, [pc, #60]	; (4c44 <_event_system_init+0x84>)
    4c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4c0c:	b2da      	uxtb	r2, r3
    4c0e:	79fb      	ldrb	r3, [r7, #7]
    4c10:	4619      	mov	r1, r3
    4c12:	4808      	ldr	r0, [pc, #32]	; (4c34 <_event_system_init+0x74>)
    4c14:	4b0c      	ldr	r3, [pc, #48]	; (4c48 <_event_system_init+0x88>)
    4c16:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4c18:	79fb      	ldrb	r3, [r7, #7]
    4c1a:	3301      	adds	r3, #1
    4c1c:	71fb      	strb	r3, [r7, #7]
    4c1e:	79fb      	ldrb	r3, [r7, #7]
    4c20:	2b1f      	cmp	r3, #31
    4c22:	d9e5      	bls.n	4bf0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4c24:	2300      	movs	r3, #0
}
    4c26:	4618      	mov	r0, r3
    4c28:	3708      	adds	r7, #8
    4c2a:	46bd      	mov	sp, r7
    4c2c:	bd80      	pop	{r7, pc}
    4c2e:	bf00      	nop
    4c30:	0000edd8 	.word	0x0000edd8
    4c34:	4100e000 	.word	0x4100e000
    4c38:	00004b35 	.word	0x00004b35
    4c3c:	0000ee1c 	.word	0x0000ee1c
    4c40:	00004b99 	.word	0x00004b99
    4c44:	0000ee5c 	.word	0x0000ee5c
    4c48:	00004b5b 	.word	0x00004b5b

00004c4c <hri_gclk_wait_for_sync>:
{
    4c4c:	b480      	push	{r7}
    4c4e:	b083      	sub	sp, #12
    4c50:	af00      	add	r7, sp, #0
    4c52:	6078      	str	r0, [r7, #4]
    4c54:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4c56:	bf00      	nop
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	685a      	ldr	r2, [r3, #4]
    4c5c:	683b      	ldr	r3, [r7, #0]
    4c5e:	4013      	ands	r3, r2
    4c60:	2b00      	cmp	r3, #0
    4c62:	d1f9      	bne.n	4c58 <hri_gclk_wait_for_sync+0xc>
}
    4c64:	bf00      	nop
    4c66:	370c      	adds	r7, #12
    4c68:	46bd      	mov	sp, r7
    4c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6e:	4770      	bx	lr

00004c70 <hri_gclk_write_GENCTRL_reg>:
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b084      	sub	sp, #16
    4c74:	af00      	add	r7, sp, #0
    4c76:	60f8      	str	r0, [r7, #12]
    4c78:	460b      	mov	r3, r1
    4c7a:	607a      	str	r2, [r7, #4]
    4c7c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4c7e:	7afa      	ldrb	r2, [r7, #11]
    4c80:	68fb      	ldr	r3, [r7, #12]
    4c82:	3208      	adds	r2, #8
    4c84:	6879      	ldr	r1, [r7, #4]
    4c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4c8a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4c8e:	68f8      	ldr	r0, [r7, #12]
    4c90:	4b02      	ldr	r3, [pc, #8]	; (4c9c <hri_gclk_write_GENCTRL_reg+0x2c>)
    4c92:	4798      	blx	r3
}
    4c94:	bf00      	nop
    4c96:	3710      	adds	r7, #16
    4c98:	46bd      	mov	sp, r7
    4c9a:	bd80      	pop	{r7, pc}
    4c9c:	00004c4d 	.word	0x00004c4d

00004ca0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b082      	sub	sp, #8
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	f003 0301 	and.w	r3, r3, #1
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d004      	beq.n	4cbc <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4cb2:	4a36      	ldr	r2, [pc, #216]	; (4d8c <_gclk_init_generators_by_fref+0xec>)
    4cb4:	2100      	movs	r1, #0
    4cb6:	4836      	ldr	r0, [pc, #216]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4cb8:	4b36      	ldr	r3, [pc, #216]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4cba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	f003 0302 	and.w	r3, r3, #2
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d004      	beq.n	4cd0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4cc6:	4a34      	ldr	r2, [pc, #208]	; (4d98 <_gclk_init_generators_by_fref+0xf8>)
    4cc8:	2101      	movs	r1, #1
    4cca:	4831      	ldr	r0, [pc, #196]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4ccc:	4b31      	ldr	r3, [pc, #196]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4cce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	f003 0304 	and.w	r3, r3, #4
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d004      	beq.n	4ce4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4cda:	4a30      	ldr	r2, [pc, #192]	; (4d9c <_gclk_init_generators_by_fref+0xfc>)
    4cdc:	2102      	movs	r1, #2
    4cde:	482c      	ldr	r0, [pc, #176]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4ce0:	4b2c      	ldr	r3, [pc, #176]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4ce2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	f003 0308 	and.w	r3, r3, #8
    4cea:	2b00      	cmp	r3, #0
    4cec:	d004      	beq.n	4cf8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4cee:	4a2c      	ldr	r2, [pc, #176]	; (4da0 <_gclk_init_generators_by_fref+0x100>)
    4cf0:	2103      	movs	r1, #3
    4cf2:	4827      	ldr	r0, [pc, #156]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4cf4:	4b27      	ldr	r3, [pc, #156]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4cf6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	f003 0310 	and.w	r3, r3, #16
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d004      	beq.n	4d0c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4d02:	4a28      	ldr	r2, [pc, #160]	; (4da4 <_gclk_init_generators_by_fref+0x104>)
    4d04:	2104      	movs	r1, #4
    4d06:	4822      	ldr	r0, [pc, #136]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d08:	4b22      	ldr	r3, [pc, #136]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d0a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	f003 0320 	and.w	r3, r3, #32
    4d12:	2b00      	cmp	r3, #0
    4d14:	d004      	beq.n	4d20 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4d16:	4a24      	ldr	r2, [pc, #144]	; (4da8 <_gclk_init_generators_by_fref+0x108>)
    4d18:	2105      	movs	r1, #5
    4d1a:	481d      	ldr	r0, [pc, #116]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d1c:	4b1d      	ldr	r3, [pc, #116]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d1e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4d26:	2b00      	cmp	r3, #0
    4d28:	d004      	beq.n	4d34 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4d2a:	4a20      	ldr	r2, [pc, #128]	; (4dac <_gclk_init_generators_by_fref+0x10c>)
    4d2c:	2106      	movs	r1, #6
    4d2e:	4818      	ldr	r0, [pc, #96]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d30:	4b18      	ldr	r3, [pc, #96]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d32:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d004      	beq.n	4d48 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4d3e:	4a1c      	ldr	r2, [pc, #112]	; (4db0 <_gclk_init_generators_by_fref+0x110>)
    4d40:	2107      	movs	r1, #7
    4d42:	4813      	ldr	r0, [pc, #76]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d44:	4b13      	ldr	r3, [pc, #76]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d46:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d004      	beq.n	4d5c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4d52:	4a18      	ldr	r2, [pc, #96]	; (4db4 <_gclk_init_generators_by_fref+0x114>)
    4d54:	2108      	movs	r1, #8
    4d56:	480e      	ldr	r0, [pc, #56]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d58:	4b0e      	ldr	r3, [pc, #56]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d5a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4d5c:	687b      	ldr	r3, [r7, #4]
    4d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4d62:	2b00      	cmp	r3, #0
    4d64:	d004      	beq.n	4d70 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4d66:	4a14      	ldr	r2, [pc, #80]	; (4db8 <_gclk_init_generators_by_fref+0x118>)
    4d68:	210a      	movs	r1, #10
    4d6a:	4809      	ldr	r0, [pc, #36]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d6c:	4b09      	ldr	r3, [pc, #36]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d6e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4d76:	2b00      	cmp	r3, #0
    4d78:	d004      	beq.n	4d84 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4d7a:	4a10      	ldr	r2, [pc, #64]	; (4dbc <_gclk_init_generators_by_fref+0x11c>)
    4d7c:	210b      	movs	r1, #11
    4d7e:	4804      	ldr	r0, [pc, #16]	; (4d90 <_gclk_init_generators_by_fref+0xf0>)
    4d80:	4b04      	ldr	r3, [pc, #16]	; (4d94 <_gclk_init_generators_by_fref+0xf4>)
    4d82:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4d84:	bf00      	nop
    4d86:	3708      	adds	r7, #8
    4d88:	46bd      	mov	sp, r7
    4d8a:	bd80      	pop	{r7, pc}
    4d8c:	00010107 	.word	0x00010107
    4d90:	40001c00 	.word	0x40001c00
    4d94:	00004c71 	.word	0x00004c71
    4d98:	00010907 	.word	0x00010907
    4d9c:	00010906 	.word	0x00010906
    4da0:	00020908 	.word	0x00020908
    4da4:	00010901 	.word	0x00010901
    4da8:	00062901 	.word	0x00062901
    4dac:	000c2901 	.word	0x000c2901
    4db0:	00082908 	.word	0x00082908
    4db4:	00032901 	.word	0x00032901
    4db8:	00010905 	.word	0x00010905
    4dbc:	00041905 	.word	0x00041905

00004dc0 <hri_mclk_write_CPUDIV_reg>:
{
    4dc0:	b480      	push	{r7}
    4dc2:	b083      	sub	sp, #12
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	6078      	str	r0, [r7, #4]
    4dc8:	460b      	mov	r3, r1
    4dca:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	78fa      	ldrb	r2, [r7, #3]
    4dd0:	715a      	strb	r2, [r3, #5]
}
    4dd2:	bf00      	nop
    4dd4:	370c      	adds	r7, #12
    4dd6:	46bd      	mov	sp, r7
    4dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ddc:	4770      	bx	lr
	...

00004de0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4de0:	b580      	push	{r7, lr}
    4de2:	b082      	sub	sp, #8
    4de4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4de6:	4b05      	ldr	r3, [pc, #20]	; (4dfc <_mclk_init+0x1c>)
    4de8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4dea:	2101      	movs	r1, #1
    4dec:	6878      	ldr	r0, [r7, #4]
    4dee:	4b04      	ldr	r3, [pc, #16]	; (4e00 <_mclk_init+0x20>)
    4df0:	4798      	blx	r3
}
    4df2:	bf00      	nop
    4df4:	3708      	adds	r7, #8
    4df6:	46bd      	mov	sp, r7
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	bf00      	nop
    4dfc:	40000800 	.word	0x40000800
    4e00:	00004dc1 	.word	0x00004dc1

00004e04 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4e04:	b480      	push	{r7}
    4e06:	b083      	sub	sp, #12
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
    4e0c:	460b      	mov	r3, r1
    4e0e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	78fa      	ldrb	r2, [r7, #3]
    4e14:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e16:	bf00      	nop
    4e18:	370c      	adds	r7, #12
    4e1a:	46bd      	mov	sp, r7
    4e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e20:	4770      	bx	lr

00004e22 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4e22:	b480      	push	{r7}
    4e24:	b083      	sub	sp, #12
    4e26:	af00      	add	r7, sp, #0
    4e28:	6078      	str	r0, [r7, #4]
    4e2a:	460b      	mov	r3, r1
    4e2c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	887a      	ldrh	r2, [r7, #2]
    4e32:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e34:	bf00      	nop
    4e36:	370c      	adds	r7, #12
    4e38:	46bd      	mov	sp, r7
    4e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e3e:	4770      	bx	lr

00004e40 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4e40:	b480      	push	{r7}
    4e42:	b083      	sub	sp, #12
    4e44:	af00      	add	r7, sp, #0
    4e46:	6078      	str	r0, [r7, #4]
    4e48:	460b      	mov	r3, r1
    4e4a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	78fa      	ldrb	r2, [r7, #3]
    4e50:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e52:	bf00      	nop
    4e54:	370c      	adds	r7, #12
    4e56:	46bd      	mov	sp, r7
    4e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5c:	4770      	bx	lr

00004e5e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4e5e:	b480      	push	{r7}
    4e60:	b083      	sub	sp, #12
    4e62:	af00      	add	r7, sp, #0
    4e64:	6078      	str	r0, [r7, #4]
    4e66:	460b      	mov	r3, r1
    4e68:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	78fa      	ldrb	r2, [r7, #3]
    4e6e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e70:	bf00      	nop
    4e72:	370c      	adds	r7, #12
    4e74:	46bd      	mov	sp, r7
    4e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e7a:	4770      	bx	lr

00004e7c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4e7c:	b480      	push	{r7}
    4e7e:	b085      	sub	sp, #20
    4e80:	af00      	add	r7, sp, #0
    4e82:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	69db      	ldr	r3, [r3, #28]
    4e88:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4e8a:	68fb      	ldr	r3, [r7, #12]
    4e8c:	0a1b      	lsrs	r3, r3, #8
    4e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e92:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e94:	68fb      	ldr	r3, [r7, #12]
}
    4e96:	4618      	mov	r0, r3
    4e98:	3714      	adds	r7, #20
    4e9a:	46bd      	mov	sp, r7
    4e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea0:	4770      	bx	lr

00004ea2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4ea2:	b480      	push	{r7}
    4ea4:	b083      	sub	sp, #12
    4ea6:	af00      	add	r7, sp, #0
    4ea8:	6078      	str	r0, [r7, #4]
    4eaa:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	683a      	ldr	r2, [r7, #0]
    4eb0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4eb2:	bf00      	nop
    4eb4:	370c      	adds	r7, #12
    4eb6:	46bd      	mov	sp, r7
    4eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ebc:	4770      	bx	lr
	...

00004ec0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b082      	sub	sp, #8
    4ec4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4ec6:	4b13      	ldr	r3, [pc, #76]	; (4f14 <_osc32kctrl_init_sources+0x54>)
    4ec8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4eca:	2300      	movs	r3, #0
    4ecc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4ece:	f242 018e 	movw	r1, #8334	; 0x208e
    4ed2:	6878      	ldr	r0, [r7, #4]
    4ed4:	4b10      	ldr	r3, [pc, #64]	; (4f18 <_osc32kctrl_init_sources+0x58>)
    4ed6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4ed8:	2100      	movs	r1, #0
    4eda:	6878      	ldr	r0, [r7, #4]
    4edc:	4b0f      	ldr	r3, [pc, #60]	; (4f1c <_osc32kctrl_init_sources+0x5c>)
    4ede:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4ee0:	2100      	movs	r1, #0
    4ee2:	6878      	ldr	r0, [r7, #4]
    4ee4:	4b0e      	ldr	r3, [pc, #56]	; (4f20 <_osc32kctrl_init_sources+0x60>)
    4ee6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4ee8:	6878      	ldr	r0, [r7, #4]
    4eea:	4b0e      	ldr	r3, [pc, #56]	; (4f24 <_osc32kctrl_init_sources+0x64>)
    4eec:	4798      	blx	r3
    4eee:	4603      	mov	r3, r0
    4ef0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4ef2:	887b      	ldrh	r3, [r7, #2]
    4ef4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4ef6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4efa:	4619      	mov	r1, r3
    4efc:	6878      	ldr	r0, [r7, #4]
    4efe:	4b0a      	ldr	r3, [pc, #40]	; (4f28 <_osc32kctrl_init_sources+0x68>)
    4f00:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4f02:	2100      	movs	r1, #0
    4f04:	6878      	ldr	r0, [r7, #4]
    4f06:	4b09      	ldr	r3, [pc, #36]	; (4f2c <_osc32kctrl_init_sources+0x6c>)
    4f08:	4798      	blx	r3
	(void)calib;
}
    4f0a:	bf00      	nop
    4f0c:	3708      	adds	r7, #8
    4f0e:	46bd      	mov	sp, r7
    4f10:	bd80      	pop	{r7, pc}
    4f12:	bf00      	nop
    4f14:	40001400 	.word	0x40001400
    4f18:	00004e23 	.word	0x00004e23
    4f1c:	00004e41 	.word	0x00004e41
    4f20:	00004e5f 	.word	0x00004e5f
    4f24:	00004e7d 	.word	0x00004e7d
    4f28:	00004ea3 	.word	0x00004ea3
    4f2c:	00004e05 	.word	0x00004e05

00004f30 <hri_gclk_wait_for_sync>:
{
    4f30:	b480      	push	{r7}
    4f32:	b083      	sub	sp, #12
    4f34:	af00      	add	r7, sp, #0
    4f36:	6078      	str	r0, [r7, #4]
    4f38:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4f3a:	bf00      	nop
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	685a      	ldr	r2, [r3, #4]
    4f40:	683b      	ldr	r3, [r7, #0]
    4f42:	4013      	ands	r3, r2
    4f44:	2b00      	cmp	r3, #0
    4f46:	d1f9      	bne.n	4f3c <hri_gclk_wait_for_sync+0xc>
}
    4f48:	bf00      	nop
    4f4a:	370c      	adds	r7, #12
    4f4c:	46bd      	mov	sp, r7
    4f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f52:	4770      	bx	lr

00004f54 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4f54:	b480      	push	{r7}
    4f56:	b083      	sub	sp, #12
    4f58:	af00      	add	r7, sp, #0
    4f5a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	685b      	ldr	r3, [r3, #4]
    4f60:	089b      	lsrs	r3, r3, #2
    4f62:	f003 0301 	and.w	r3, r3, #1
    4f66:	2b00      	cmp	r3, #0
    4f68:	bf14      	ite	ne
    4f6a:	2301      	movne	r3, #1
    4f6c:	2300      	moveq	r3, #0
    4f6e:	b2db      	uxtb	r3, r3
}
    4f70:	4618      	mov	r0, r3
    4f72:	370c      	adds	r7, #12
    4f74:	46bd      	mov	sp, r7
    4f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f7a:	4770      	bx	lr

00004f7c <hri_gclk_read_SYNCBUSY_reg>:
{
    4f7c:	b480      	push	{r7}
    4f7e:	b083      	sub	sp, #12
    4f80:	af00      	add	r7, sp, #0
    4f82:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	685b      	ldr	r3, [r3, #4]
}
    4f88:	4618      	mov	r0, r3
    4f8a:	370c      	adds	r7, #12
    4f8c:	46bd      	mov	sp, r7
    4f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f92:	4770      	bx	lr

00004f94 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4f94:	b580      	push	{r7, lr}
    4f96:	b086      	sub	sp, #24
    4f98:	af00      	add	r7, sp, #0
    4f9a:	60f8      	str	r0, [r7, #12]
    4f9c:	460b      	mov	r3, r1
    4f9e:	607a      	str	r2, [r7, #4]
    4fa0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4fa2:	7afa      	ldrb	r2, [r7, #11]
    4fa4:	68fb      	ldr	r3, [r7, #12]
    4fa6:	3208      	adds	r2, #8
    4fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4fac:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4fae:	697b      	ldr	r3, [r7, #20]
    4fb0:	f023 030f 	bic.w	r3, r3, #15
    4fb4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4fb6:	687b      	ldr	r3, [r7, #4]
    4fb8:	f003 030f 	and.w	r3, r3, #15
    4fbc:	697a      	ldr	r2, [r7, #20]
    4fbe:	4313      	orrs	r3, r2
    4fc0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4fc2:	7afa      	ldrb	r2, [r7, #11]
    4fc4:	68fb      	ldr	r3, [r7, #12]
    4fc6:	3208      	adds	r2, #8
    4fc8:	6979      	ldr	r1, [r7, #20]
    4fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4fce:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4fd2:	68f8      	ldr	r0, [r7, #12]
    4fd4:	4b02      	ldr	r3, [pc, #8]	; (4fe0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4fd6:	4798      	blx	r3
}
    4fd8:	bf00      	nop
    4fda:	3718      	adds	r7, #24
    4fdc:	46bd      	mov	sp, r7
    4fde:	bd80      	pop	{r7, pc}
    4fe0:	00004f31 	.word	0x00004f31

00004fe4 <hri_gclk_write_PCHCTRL_reg>:
{
    4fe4:	b480      	push	{r7}
    4fe6:	b085      	sub	sp, #20
    4fe8:	af00      	add	r7, sp, #0
    4fea:	60f8      	str	r0, [r7, #12]
    4fec:	460b      	mov	r3, r1
    4fee:	607a      	str	r2, [r7, #4]
    4ff0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4ff2:	7afa      	ldrb	r2, [r7, #11]
    4ff4:	68fb      	ldr	r3, [r7, #12]
    4ff6:	3220      	adds	r2, #32
    4ff8:	6879      	ldr	r1, [r7, #4]
    4ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4ffe:	bf00      	nop
    5000:	3714      	adds	r7, #20
    5002:	46bd      	mov	sp, r7
    5004:	f85d 7b04 	ldr.w	r7, [sp], #4
    5008:	4770      	bx	lr

0000500a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    500a:	b480      	push	{r7}
    500c:	b085      	sub	sp, #20
    500e:	af00      	add	r7, sp, #0
    5010:	60f8      	str	r0, [r7, #12]
    5012:	460b      	mov	r3, r1
    5014:	607a      	str	r2, [r7, #4]
    5016:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5018:	bf00      	nop
    501a:	7afa      	ldrb	r2, [r7, #11]
    501c:	68f9      	ldr	r1, [r7, #12]
    501e:	4613      	mov	r3, r2
    5020:	009b      	lsls	r3, r3, #2
    5022:	4413      	add	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	440b      	add	r3, r1
    5028:	333c      	adds	r3, #60	; 0x3c
    502a:	681a      	ldr	r2, [r3, #0]
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	4013      	ands	r3, r2
    5030:	2b00      	cmp	r3, #0
    5032:	d1f2      	bne.n	501a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5034:	bf00      	nop
    5036:	3714      	adds	r7, #20
    5038:	46bd      	mov	sp, r7
    503a:	f85d 7b04 	ldr.w	r7, [sp], #4
    503e:	4770      	bx	lr

00005040 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5040:	b480      	push	{r7}
    5042:	b083      	sub	sp, #12
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
    5048:	460b      	mov	r3, r1
    504a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    504c:	78fa      	ldrb	r2, [r7, #3]
    504e:	6879      	ldr	r1, [r7, #4]
    5050:	4613      	mov	r3, r2
    5052:	009b      	lsls	r3, r3, #2
    5054:	4413      	add	r3, r2
    5056:	009b      	lsls	r3, r3, #2
    5058:	440b      	add	r3, r1
    505a:	3340      	adds	r3, #64	; 0x40
    505c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    505e:	f003 0301 	and.w	r3, r3, #1
    5062:	2b00      	cmp	r3, #0
    5064:	bf14      	ite	ne
    5066:	2301      	movne	r3, #1
    5068:	2300      	moveq	r3, #0
    506a:	b2db      	uxtb	r3, r3
}
    506c:	4618      	mov	r0, r3
    506e:	370c      	adds	r7, #12
    5070:	46bd      	mov	sp, r7
    5072:	f85d 7b04 	ldr.w	r7, [sp], #4
    5076:	4770      	bx	lr

00005078 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5078:	b480      	push	{r7}
    507a:	b083      	sub	sp, #12
    507c:	af00      	add	r7, sp, #0
    507e:	6078      	str	r0, [r7, #4]
    5080:	460b      	mov	r3, r1
    5082:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5084:	78fa      	ldrb	r2, [r7, #3]
    5086:	6879      	ldr	r1, [r7, #4]
    5088:	4613      	mov	r3, r2
    508a:	009b      	lsls	r3, r3, #2
    508c:	4413      	add	r3, r2
    508e:	009b      	lsls	r3, r3, #2
    5090:	440b      	add	r3, r1
    5092:	3340      	adds	r3, #64	; 0x40
    5094:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5096:	085b      	lsrs	r3, r3, #1
    5098:	f003 0301 	and.w	r3, r3, #1
    509c:	2b00      	cmp	r3, #0
    509e:	bf14      	ite	ne
    50a0:	2301      	movne	r3, #1
    50a2:	2300      	moveq	r3, #0
    50a4:	b2db      	uxtb	r3, r3
}
    50a6:	4618      	mov	r0, r3
    50a8:	370c      	adds	r7, #12
    50aa:	46bd      	mov	sp, r7
    50ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    50b0:	4770      	bx	lr
	...

000050b4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    50b4:	b580      	push	{r7, lr}
    50b6:	b082      	sub	sp, #8
    50b8:	af00      	add	r7, sp, #0
    50ba:	6078      	str	r0, [r7, #4]
    50bc:	460b      	mov	r3, r1
    50be:	70fb      	strb	r3, [r7, #3]
    50c0:	4613      	mov	r3, r2
    50c2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    50c4:	78fa      	ldrb	r2, [r7, #3]
    50c6:	6879      	ldr	r1, [r7, #4]
    50c8:	4613      	mov	r3, r2
    50ca:	009b      	lsls	r3, r3, #2
    50cc:	4413      	add	r3, r2
    50ce:	009b      	lsls	r3, r3, #2
    50d0:	440b      	add	r3, r1
    50d2:	3330      	adds	r3, #48	; 0x30
    50d4:	78ba      	ldrb	r2, [r7, #2]
    50d6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    50d8:	78fb      	ldrb	r3, [r7, #3]
    50da:	2202      	movs	r2, #2
    50dc:	4619      	mov	r1, r3
    50de:	6878      	ldr	r0, [r7, #4]
    50e0:	4b02      	ldr	r3, [pc, #8]	; (50ec <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    50e2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50e4:	bf00      	nop
    50e6:	3708      	adds	r7, #8
    50e8:	46bd      	mov	sp, r7
    50ea:	bd80      	pop	{r7, pc}
    50ec:	0000500b 	.word	0x0000500b

000050f0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    50f0:	b580      	push	{r7, lr}
    50f2:	b084      	sub	sp, #16
    50f4:	af00      	add	r7, sp, #0
    50f6:	60f8      	str	r0, [r7, #12]
    50f8:	460b      	mov	r3, r1
    50fa:	607a      	str	r2, [r7, #4]
    50fc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    50fe:	7afa      	ldrb	r2, [r7, #11]
    5100:	68f9      	ldr	r1, [r7, #12]
    5102:	4613      	mov	r3, r2
    5104:	009b      	lsls	r3, r3, #2
    5106:	4413      	add	r3, r2
    5108:	009b      	lsls	r3, r3, #2
    510a:	440b      	add	r3, r1
    510c:	3334      	adds	r3, #52	; 0x34
    510e:	687a      	ldr	r2, [r7, #4]
    5110:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5112:	7afb      	ldrb	r3, [r7, #11]
    5114:	2206      	movs	r2, #6
    5116:	4619      	mov	r1, r3
    5118:	68f8      	ldr	r0, [r7, #12]
    511a:	4b03      	ldr	r3, [pc, #12]	; (5128 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    511c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    511e:	bf00      	nop
    5120:	3710      	adds	r7, #16
    5122:	46bd      	mov	sp, r7
    5124:	bd80      	pop	{r7, pc}
    5126:	bf00      	nop
    5128:	0000500b 	.word	0x0000500b

0000512c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    512c:	b480      	push	{r7}
    512e:	b085      	sub	sp, #20
    5130:	af00      	add	r7, sp, #0
    5132:	60f8      	str	r0, [r7, #12]
    5134:	460b      	mov	r3, r1
    5136:	607a      	str	r2, [r7, #4]
    5138:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    513a:	7afa      	ldrb	r2, [r7, #11]
    513c:	68f9      	ldr	r1, [r7, #12]
    513e:	4613      	mov	r3, r2
    5140:	009b      	lsls	r3, r3, #2
    5142:	4413      	add	r3, r2
    5144:	009b      	lsls	r3, r3, #2
    5146:	440b      	add	r3, r1
    5148:	3338      	adds	r3, #56	; 0x38
    514a:	687a      	ldr	r2, [r7, #4]
    514c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    514e:	bf00      	nop
    5150:	3714      	adds	r7, #20
    5152:	46bd      	mov	sp, r7
    5154:	f85d 7b04 	ldr.w	r7, [sp], #4
    5158:	4770      	bx	lr

0000515a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    515a:	b480      	push	{r7}
    515c:	b083      	sub	sp, #12
    515e:	af00      	add	r7, sp, #0
    5160:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5162:	687b      	ldr	r3, [r7, #4]
    5164:	691b      	ldr	r3, [r3, #16]
    5166:	085b      	lsrs	r3, r3, #1
    5168:	f003 0301 	and.w	r3, r3, #1
    516c:	2b00      	cmp	r3, #0
    516e:	bf14      	ite	ne
    5170:	2301      	movne	r3, #1
    5172:	2300      	moveq	r3, #0
    5174:	b2db      	uxtb	r3, r3
}
    5176:	4618      	mov	r0, r3
    5178:	370c      	adds	r7, #12
    517a:	46bd      	mov	sp, r7
    517c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5180:	4770      	bx	lr

00005182 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5182:	b480      	push	{r7}
    5184:	b083      	sub	sp, #12
    5186:	af00      	add	r7, sp, #0
    5188:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    518a:	687b      	ldr	r3, [r7, #4]
    518c:	691b      	ldr	r3, [r3, #16]
    518e:	0a1b      	lsrs	r3, r3, #8
    5190:	f003 0301 	and.w	r3, r3, #1
    5194:	2b00      	cmp	r3, #0
    5196:	bf14      	ite	ne
    5198:	2301      	movne	r3, #1
    519a:	2300      	moveq	r3, #0
    519c:	b2db      	uxtb	r3, r3
}
    519e:	4618      	mov	r0, r3
    51a0:	370c      	adds	r7, #12
    51a2:	46bd      	mov	sp, r7
    51a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a8:	4770      	bx	lr

000051aa <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    51aa:	b480      	push	{r7}
    51ac:	b085      	sub	sp, #20
    51ae:	af00      	add	r7, sp, #0
    51b0:	6078      	str	r0, [r7, #4]
    51b2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	691b      	ldr	r3, [r3, #16]
    51b8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    51ba:	68fa      	ldr	r2, [r7, #12]
    51bc:	683b      	ldr	r3, [r7, #0]
    51be:	4013      	ands	r3, r2
    51c0:	60fb      	str	r3, [r7, #12]
	return tmp;
    51c2:	68fb      	ldr	r3, [r7, #12]
}
    51c4:	4618      	mov	r0, r3
    51c6:	3714      	adds	r7, #20
    51c8:	46bd      	mov	sp, r7
    51ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ce:	4770      	bx	lr

000051d0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    51d0:	b480      	push	{r7}
    51d2:	b085      	sub	sp, #20
    51d4:	af00      	add	r7, sp, #0
    51d6:	60f8      	str	r0, [r7, #12]
    51d8:	460b      	mov	r3, r1
    51da:	607a      	str	r2, [r7, #4]
    51dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    51de:	7afb      	ldrb	r3, [r7, #11]
    51e0:	68fa      	ldr	r2, [r7, #12]
    51e2:	3304      	adds	r3, #4
    51e4:	009b      	lsls	r3, r3, #2
    51e6:	4413      	add	r3, r2
    51e8:	687a      	ldr	r2, [r7, #4]
    51ea:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51ec:	bf00      	nop
    51ee:	3714      	adds	r7, #20
    51f0:	46bd      	mov	sp, r7
    51f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f6:	4770      	bx	lr

000051f8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    51f8:	b480      	push	{r7}
    51fa:	b083      	sub	sp, #12
    51fc:	af00      	add	r7, sp, #0
    51fe:	6078      	str	r0, [r7, #4]
    5200:	460b      	mov	r3, r1
    5202:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	78fa      	ldrb	r2, [r7, #3]
    5208:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    520a:	bf00      	nop
    520c:	370c      	adds	r7, #12
    520e:	46bd      	mov	sp, r7
    5210:	f85d 7b04 	ldr.w	r7, [sp], #4
    5214:	4770      	bx	lr

00005216 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5216:	b480      	push	{r7}
    5218:	b085      	sub	sp, #20
    521a:	af00      	add	r7, sp, #0
    521c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    521e:	687b      	ldr	r3, [r7, #4]
    5220:	f893 3020 	ldrb.w	r3, [r3, #32]
    5224:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5226:	7bfb      	ldrb	r3, [r7, #15]
    5228:	f003 0301 	and.w	r3, r3, #1
    522c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    522e:	7bfb      	ldrb	r3, [r7, #15]
    5230:	2b00      	cmp	r3, #0
    5232:	bf14      	ite	ne
    5234:	2301      	movne	r3, #1
    5236:	2300      	moveq	r3, #0
    5238:	b2db      	uxtb	r3, r3
}
    523a:	4618      	mov	r0, r3
    523c:	3714      	adds	r7, #20
    523e:	46bd      	mov	sp, r7
    5240:	f85d 7b04 	ldr.w	r7, [sp], #4
    5244:	4770      	bx	lr

00005246 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5246:	b480      	push	{r7}
    5248:	b083      	sub	sp, #12
    524a:	af00      	add	r7, sp, #0
    524c:	6078      	str	r0, [r7, #4]
    524e:	460b      	mov	r3, r1
    5250:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5252:	687b      	ldr	r3, [r7, #4]
    5254:	78fa      	ldrb	r2, [r7, #3]
    5256:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    525a:	bf00      	nop
    525c:	370c      	adds	r7, #12
    525e:	46bd      	mov	sp, r7
    5260:	f85d 7b04 	ldr.w	r7, [sp], #4
    5264:	4770      	bx	lr

00005266 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5266:	b480      	push	{r7}
    5268:	b083      	sub	sp, #12
    526a:	af00      	add	r7, sp, #0
    526c:	6078      	str	r0, [r7, #4]
    526e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	683a      	ldr	r2, [r7, #0]
    5274:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5276:	bf00      	nop
    5278:	370c      	adds	r7, #12
    527a:	46bd      	mov	sp, r7
    527c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5280:	4770      	bx	lr

00005282 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5282:	b480      	push	{r7}
    5284:	b083      	sub	sp, #12
    5286:	af00      	add	r7, sp, #0
    5288:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    528e:	4618      	mov	r0, r3
    5290:	370c      	adds	r7, #12
    5292:	46bd      	mov	sp, r7
    5294:	f85d 7b04 	ldr.w	r7, [sp], #4
    5298:	4770      	bx	lr

0000529a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    529a:	b480      	push	{r7}
    529c:	b083      	sub	sp, #12
    529e:	af00      	add	r7, sp, #0
    52a0:	6078      	str	r0, [r7, #4]
    52a2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	683a      	ldr	r2, [r7, #0]
    52a8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52aa:	bf00      	nop
    52ac:	370c      	adds	r7, #12
    52ae:	46bd      	mov	sp, r7
    52b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52b4:	4770      	bx	lr

000052b6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    52b6:	b480      	push	{r7}
    52b8:	b085      	sub	sp, #20
    52ba:	af00      	add	r7, sp, #0
    52bc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52be:	687b      	ldr	r3, [r7, #4]
    52c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    52c6:	7bfb      	ldrb	r3, [r7, #15]
    52c8:	085b      	lsrs	r3, r3, #1
    52ca:	b2db      	uxtb	r3, r3
    52cc:	f003 0301 	and.w	r3, r3, #1
    52d0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52d2:	7bfb      	ldrb	r3, [r7, #15]
    52d4:	2b00      	cmp	r3, #0
    52d6:	bf14      	ite	ne
    52d8:	2301      	movne	r3, #1
    52da:	2300      	moveq	r3, #0
    52dc:	b2db      	uxtb	r3, r3
}
    52de:	4618      	mov	r0, r3
    52e0:	3714      	adds	r7, #20
    52e2:	46bd      	mov	sp, r7
    52e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e8:	4770      	bx	lr

000052ea <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    52ea:	b480      	push	{r7}
    52ec:	b085      	sub	sp, #20
    52ee:	af00      	add	r7, sp, #0
    52f0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52f8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    52fa:	7bfb      	ldrb	r3, [r7, #15]
    52fc:	089b      	lsrs	r3, r3, #2
    52fe:	b2db      	uxtb	r3, r3
    5300:	f003 0301 	and.w	r3, r3, #1
    5304:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5306:	7bfb      	ldrb	r3, [r7, #15]
    5308:	2b00      	cmp	r3, #0
    530a:	bf14      	ite	ne
    530c:	2301      	movne	r3, #1
    530e:	2300      	moveq	r3, #0
    5310:	b2db      	uxtb	r3, r3
}
    5312:	4618      	mov	r0, r3
    5314:	3714      	adds	r7, #20
    5316:	46bd      	mov	sp, r7
    5318:	f85d 7b04 	ldr.w	r7, [sp], #4
    531c:	4770      	bx	lr

0000531e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    531e:	b480      	push	{r7}
    5320:	b085      	sub	sp, #20
    5322:	af00      	add	r7, sp, #0
    5324:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    532c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    532e:	7bfb      	ldrb	r3, [r7, #15]
    5330:	08db      	lsrs	r3, r3, #3
    5332:	b2db      	uxtb	r3, r3
    5334:	f003 0301 	and.w	r3, r3, #1
    5338:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    533a:	7bfb      	ldrb	r3, [r7, #15]
    533c:	2b00      	cmp	r3, #0
    533e:	bf14      	ite	ne
    5340:	2301      	movne	r3, #1
    5342:	2300      	moveq	r3, #0
    5344:	b2db      	uxtb	r3, r3
}
    5346:	4618      	mov	r0, r3
    5348:	3714      	adds	r7, #20
    534a:	46bd      	mov	sp, r7
    534c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5350:	4770      	bx	lr

00005352 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5352:	b480      	push	{r7}
    5354:	b085      	sub	sp, #20
    5356:	af00      	add	r7, sp, #0
    5358:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5360:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5362:	7bfb      	ldrb	r3, [r7, #15]
    5364:	091b      	lsrs	r3, r3, #4
    5366:	b2db      	uxtb	r3, r3
    5368:	f003 0301 	and.w	r3, r3, #1
    536c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    536e:	7bfb      	ldrb	r3, [r7, #15]
    5370:	2b00      	cmp	r3, #0
    5372:	bf14      	ite	ne
    5374:	2301      	movne	r3, #1
    5376:	2300      	moveq	r3, #0
    5378:	b2db      	uxtb	r3, r3
}
    537a:	4618      	mov	r0, r3
    537c:	3714      	adds	r7, #20
    537e:	46bd      	mov	sp, r7
    5380:	f85d 7b04 	ldr.w	r7, [sp], #4
    5384:	4770      	bx	lr
	...

00005388 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5388:	b580      	push	{r7, lr}
    538a:	b082      	sub	sp, #8
    538c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    538e:	4b0a      	ldr	r3, [pc, #40]	; (53b8 <_oscctrl_init_sources+0x30>)
    5390:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5392:	4a0a      	ldr	r2, [pc, #40]	; (53bc <_oscctrl_init_sources+0x34>)
    5394:	2101      	movs	r1, #1
    5396:	6878      	ldr	r0, [r7, #4]
    5398:	4b09      	ldr	r3, [pc, #36]	; (53c0 <_oscctrl_init_sources+0x38>)
    539a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    539c:	bf00      	nop
    539e:	6878      	ldr	r0, [r7, #4]
    53a0:	4b08      	ldr	r3, [pc, #32]	; (53c4 <_oscctrl_init_sources+0x3c>)
    53a2:	4798      	blx	r3
    53a4:	4603      	mov	r3, r0
    53a6:	f083 0301 	eor.w	r3, r3, #1
    53aa:	b2db      	uxtb	r3, r3
    53ac:	2b00      	cmp	r3, #0
    53ae:	d1f6      	bne.n	539e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    53b0:	bf00      	nop
    53b2:	3708      	adds	r7, #8
    53b4:	46bd      	mov	sp, r7
    53b6:	bd80      	pop	{r7, pc}
    53b8:	40001000 	.word	0x40001000
    53bc:	03002646 	.word	0x03002646
    53c0:	000051d1 	.word	0x000051d1
    53c4:	0000515b 	.word	0x0000515b

000053c8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    53c8:	b580      	push	{r7, lr}
    53ca:	b084      	sub	sp, #16
    53cc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    53ce:	4b6b      	ldr	r3, [pc, #428]	; (557c <_oscctrl_init_referenced_generators+0x1b4>)
    53d0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    53d2:	2204      	movs	r2, #4
    53d4:	2100      	movs	r1, #0
    53d6:	486a      	ldr	r0, [pc, #424]	; (5580 <_oscctrl_init_referenced_generators+0x1b8>)
    53d8:	4b6a      	ldr	r3, [pc, #424]	; (5584 <_oscctrl_init_referenced_generators+0x1bc>)
    53da:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    53dc:	bf00      	nop
    53de:	4868      	ldr	r0, [pc, #416]	; (5580 <_oscctrl_init_referenced_generators+0x1b8>)
    53e0:	4b69      	ldr	r3, [pc, #420]	; (5588 <_oscctrl_init_referenced_generators+0x1c0>)
    53e2:	4798      	blx	r3
    53e4:	4603      	mov	r3, r0
    53e6:	2b00      	cmp	r3, #0
    53e8:	d1f9      	bne.n	53de <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    53ea:	2100      	movs	r1, #0
    53ec:	68f8      	ldr	r0, [r7, #12]
    53ee:	4b67      	ldr	r3, [pc, #412]	; (558c <_oscctrl_init_referenced_generators+0x1c4>)
    53f0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    53f2:	4967      	ldr	r1, [pc, #412]	; (5590 <_oscctrl_init_referenced_generators+0x1c8>)
    53f4:	68f8      	ldr	r0, [r7, #12]
    53f6:	4b67      	ldr	r3, [pc, #412]	; (5594 <_oscctrl_init_referenced_generators+0x1cc>)
    53f8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    53fa:	bf00      	nop
    53fc:	68f8      	ldr	r0, [r7, #12]
    53fe:	4b66      	ldr	r3, [pc, #408]	; (5598 <_oscctrl_init_referenced_generators+0x1d0>)
    5400:	4798      	blx	r3
    5402:	4603      	mov	r3, r0
    5404:	2b00      	cmp	r3, #0
    5406:	d1f9      	bne.n	53fc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5408:	2100      	movs	r1, #0
    540a:	68f8      	ldr	r0, [r7, #12]
    540c:	4b63      	ldr	r3, [pc, #396]	; (559c <_oscctrl_init_referenced_generators+0x1d4>)
    540e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5410:	bf00      	nop
    5412:	68f8      	ldr	r0, [r7, #12]
    5414:	4b62      	ldr	r3, [pc, #392]	; (55a0 <_oscctrl_init_referenced_generators+0x1d8>)
    5416:	4798      	blx	r3
    5418:	4603      	mov	r3, r0
    541a:	2b00      	cmp	r3, #0
    541c:	d1f9      	bne.n	5412 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    541e:	2302      	movs	r3, #2
    5420:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5422:	7afb      	ldrb	r3, [r7, #11]
    5424:	4619      	mov	r1, r3
    5426:	68f8      	ldr	r0, [r7, #12]
    5428:	4b58      	ldr	r3, [pc, #352]	; (558c <_oscctrl_init_referenced_generators+0x1c4>)
    542a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    542c:	bf00      	nop
    542e:	68f8      	ldr	r0, [r7, #12]
    5430:	4b5c      	ldr	r3, [pc, #368]	; (55a4 <_oscctrl_init_referenced_generators+0x1dc>)
    5432:	4798      	blx	r3
    5434:	4603      	mov	r3, r0
    5436:	2b00      	cmp	r3, #0
    5438:	d1f9      	bne.n	542e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    543a:	68f8      	ldr	r0, [r7, #12]
    543c:	4b5a      	ldr	r3, [pc, #360]	; (55a8 <_oscctrl_init_referenced_generators+0x1e0>)
    543e:	4798      	blx	r3
    5440:	4603      	mov	r3, r0
    5442:	4619      	mov	r1, r3
    5444:	68f8      	ldr	r0, [r7, #12]
    5446:	4b59      	ldr	r3, [pc, #356]	; (55ac <_oscctrl_init_referenced_generators+0x1e4>)
    5448:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    544a:	bf00      	nop
    544c:	68f8      	ldr	r0, [r7, #12]
    544e:	4b58      	ldr	r3, [pc, #352]	; (55b0 <_oscctrl_init_referenced_generators+0x1e8>)
    5450:	4798      	blx	r3
    5452:	4603      	mov	r3, r0
    5454:	2b00      	cmp	r3, #0
    5456:	d1f9      	bne.n	544c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5458:	2319      	movs	r3, #25
    545a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    545c:	7afb      	ldrb	r3, [r7, #11]
    545e:	4619      	mov	r1, r3
    5460:	68f8      	ldr	r0, [r7, #12]
    5462:	4b4e      	ldr	r3, [pc, #312]	; (559c <_oscctrl_init_referenced_generators+0x1d4>)
    5464:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5466:	bf00      	nop
    5468:	68f8      	ldr	r0, [r7, #12]
    546a:	4b4d      	ldr	r3, [pc, #308]	; (55a0 <_oscctrl_init_referenced_generators+0x1d8>)
    546c:	4798      	blx	r3
    546e:	4603      	mov	r3, r0
    5470:	2b00      	cmp	r3, #0
    5472:	d1f9      	bne.n	5468 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5474:	2245      	movs	r2, #69	; 0x45
    5476:	2101      	movs	r1, #1
    5478:	4841      	ldr	r0, [pc, #260]	; (5580 <_oscctrl_init_referenced_generators+0x1b8>)
    547a:	4b4e      	ldr	r3, [pc, #312]	; (55b4 <_oscctrl_init_referenced_generators+0x1ec>)
    547c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    547e:	223b      	movs	r2, #59	; 0x3b
    5480:	2100      	movs	r1, #0
    5482:	68f8      	ldr	r0, [r7, #12]
    5484:	4b4c      	ldr	r3, [pc, #304]	; (55b8 <_oscctrl_init_referenced_generators+0x1f0>)
    5486:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5488:	f44f 6201 	mov.w	r2, #2064	; 0x810
    548c:	2100      	movs	r1, #0
    548e:	68f8      	ldr	r0, [r7, #12]
    5490:	4b4a      	ldr	r3, [pc, #296]	; (55bc <_oscctrl_init_referenced_generators+0x1f4>)
    5492:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5494:	2242      	movs	r2, #66	; 0x42
    5496:	2100      	movs	r1, #0
    5498:	68f8      	ldr	r0, [r7, #12]
    549a:	4b49      	ldr	r3, [pc, #292]	; (55c0 <_oscctrl_init_referenced_generators+0x1f8>)
    549c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    549e:	4a49      	ldr	r2, [pc, #292]	; (55c4 <_oscctrl_init_referenced_generators+0x1fc>)
    54a0:	2101      	movs	r1, #1
    54a2:	68f8      	ldr	r0, [r7, #12]
    54a4:	4b44      	ldr	r3, [pc, #272]	; (55b8 <_oscctrl_init_referenced_generators+0x1f0>)
    54a6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    54a8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    54ac:	2101      	movs	r1, #1
    54ae:	68f8      	ldr	r0, [r7, #12]
    54b0:	4b42      	ldr	r3, [pc, #264]	; (55bc <_oscctrl_init_referenced_generators+0x1f4>)
    54b2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    54b4:	2202      	movs	r2, #2
    54b6:	2101      	movs	r1, #1
    54b8:	68f8      	ldr	r0, [r7, #12]
    54ba:	4b41      	ldr	r3, [pc, #260]	; (55c0 <_oscctrl_init_referenced_generators+0x1f8>)
    54bc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    54be:	68f8      	ldr	r0, [r7, #12]
    54c0:	4b41      	ldr	r3, [pc, #260]	; (55c8 <_oscctrl_init_referenced_generators+0x200>)
    54c2:	4798      	blx	r3
    54c4:	4603      	mov	r3, r0
    54c6:	2b00      	cmp	r3, #0
    54c8:	d00c      	beq.n	54e4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    54ca:	f44f 6310 	mov.w	r3, #2304	; 0x900
    54ce:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    54d0:	bf00      	nop
    54d2:	6879      	ldr	r1, [r7, #4]
    54d4:	68f8      	ldr	r0, [r7, #12]
    54d6:	4b3d      	ldr	r3, [pc, #244]	; (55cc <_oscctrl_init_referenced_generators+0x204>)
    54d8:	4798      	blx	r3
    54da:	4602      	mov	r2, r0
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	429a      	cmp	r2, r3
    54e0:	d1f7      	bne.n	54d2 <_oscctrl_init_referenced_generators+0x10a>
    54e2:	e009      	b.n	54f8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    54e4:	bf00      	nop
    54e6:	68f8      	ldr	r0, [r7, #12]
    54e8:	4b39      	ldr	r3, [pc, #228]	; (55d0 <_oscctrl_init_referenced_generators+0x208>)
    54ea:	4798      	blx	r3
    54ec:	4603      	mov	r3, r0
    54ee:	f083 0301 	eor.w	r3, r3, #1
    54f2:	b2db      	uxtb	r3, r3
    54f4:	2b00      	cmp	r3, #0
    54f6:	d1f6      	bne.n	54e6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    54f8:	bf00      	nop
    54fa:	2100      	movs	r1, #0
    54fc:	68f8      	ldr	r0, [r7, #12]
    54fe:	4b35      	ldr	r3, [pc, #212]	; (55d4 <_oscctrl_init_referenced_generators+0x20c>)
    5500:	4798      	blx	r3
    5502:	4603      	mov	r3, r0
    5504:	f083 0301 	eor.w	r3, r3, #1
    5508:	b2db      	uxtb	r3, r3
    550a:	2b00      	cmp	r3, #0
    550c:	d009      	beq.n	5522 <_oscctrl_init_referenced_generators+0x15a>
    550e:	2100      	movs	r1, #0
    5510:	68f8      	ldr	r0, [r7, #12]
    5512:	4b31      	ldr	r3, [pc, #196]	; (55d8 <_oscctrl_init_referenced_generators+0x210>)
    5514:	4798      	blx	r3
    5516:	4603      	mov	r3, r0
    5518:	f083 0301 	eor.w	r3, r3, #1
    551c:	b2db      	uxtb	r3, r3
    551e:	2b00      	cmp	r3, #0
    5520:	d1eb      	bne.n	54fa <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5522:	bf00      	nop
    5524:	2101      	movs	r1, #1
    5526:	68f8      	ldr	r0, [r7, #12]
    5528:	4b2a      	ldr	r3, [pc, #168]	; (55d4 <_oscctrl_init_referenced_generators+0x20c>)
    552a:	4798      	blx	r3
    552c:	4603      	mov	r3, r0
    552e:	f083 0301 	eor.w	r3, r3, #1
    5532:	b2db      	uxtb	r3, r3
    5534:	2b00      	cmp	r3, #0
    5536:	d009      	beq.n	554c <_oscctrl_init_referenced_generators+0x184>
    5538:	2101      	movs	r1, #1
    553a:	68f8      	ldr	r0, [r7, #12]
    553c:	4b26      	ldr	r3, [pc, #152]	; (55d8 <_oscctrl_init_referenced_generators+0x210>)
    553e:	4798      	blx	r3
    5540:	4603      	mov	r3, r0
    5542:	f083 0301 	eor.w	r3, r3, #1
    5546:	b2db      	uxtb	r3, r3
    5548:	2b00      	cmp	r3, #0
    554a:	d1eb      	bne.n	5524 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    554c:	bf00      	nop
    554e:	480c      	ldr	r0, [pc, #48]	; (5580 <_oscctrl_init_referenced_generators+0x1b8>)
    5550:	4b22      	ldr	r3, [pc, #136]	; (55dc <_oscctrl_init_referenced_generators+0x214>)
    5552:	4798      	blx	r3
    5554:	4603      	mov	r3, r0
    5556:	2b00      	cmp	r3, #0
    5558:	d1f9      	bne.n	554e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    555a:	2207      	movs	r2, #7
    555c:	2100      	movs	r1, #0
    555e:	4808      	ldr	r0, [pc, #32]	; (5580 <_oscctrl_init_referenced_generators+0x1b8>)
    5560:	4b08      	ldr	r3, [pc, #32]	; (5584 <_oscctrl_init_referenced_generators+0x1bc>)
    5562:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5564:	bf00      	nop
    5566:	4806      	ldr	r0, [pc, #24]	; (5580 <_oscctrl_init_referenced_generators+0x1b8>)
    5568:	4b07      	ldr	r3, [pc, #28]	; (5588 <_oscctrl_init_referenced_generators+0x1c0>)
    556a:	4798      	blx	r3
    556c:	4603      	mov	r3, r0
    556e:	2b00      	cmp	r3, #0
    5570:	d1f9      	bne.n	5566 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5572:	bf00      	nop
    5574:	3710      	adds	r7, #16
    5576:	46bd      	mov	sp, r7
    5578:	bd80      	pop	{r7, pc}
    557a:	bf00      	nop
    557c:	40001000 	.word	0x40001000
    5580:	40001c00 	.word	0x40001c00
    5584:	00004f95 	.word	0x00004f95
    5588:	00004f55 	.word	0x00004f55
    558c:	000051f9 	.word	0x000051f9
    5590:	0401bb80 	.word	0x0401bb80
    5594:	0000529b 	.word	0x0000529b
    5598:	00005353 	.word	0x00005353
    559c:	00005247 	.word	0x00005247
    55a0:	000052eb 	.word	0x000052eb
    55a4:	000052b7 	.word	0x000052b7
    55a8:	00005283 	.word	0x00005283
    55ac:	00005267 	.word	0x00005267
    55b0:	0000531f 	.word	0x0000531f
    55b4:	00004fe5 	.word	0x00004fe5
    55b8:	000050f1 	.word	0x000050f1
    55bc:	0000512d 	.word	0x0000512d
    55c0:	000050b5 	.word	0x000050b5
    55c4:	000407a0 	.word	0x000407a0
    55c8:	00005217 	.word	0x00005217
    55cc:	000051ab 	.word	0x000051ab
    55d0:	00005183 	.word	0x00005183
    55d4:	00005041 	.word	0x00005041
    55d8:	00005079 	.word	0x00005079
    55dc:	00004f7d 	.word	0x00004f7d

000055e0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	69db      	ldr	r3, [r3, #28]
    55ec:	0a9b      	lsrs	r3, r3, #10
    55ee:	f003 0301 	and.w	r3, r3, #1
    55f2:	2b00      	cmp	r3, #0
    55f4:	bf14      	ite	ne
    55f6:	2301      	movne	r3, #1
    55f8:	2300      	moveq	r3, #0
    55fa:	b2db      	uxtb	r3, r3
}
    55fc:	4618      	mov	r0, r3
    55fe:	370c      	adds	r7, #12
    5600:	46bd      	mov	sp, r7
    5602:	f85d 7b04 	ldr.w	r7, [sp], #4
    5606:	4770      	bx	lr

00005608 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5608:	b480      	push	{r7}
    560a:	b083      	sub	sp, #12
    560c:	af00      	add	r7, sp, #0
    560e:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5616:	61da      	str	r2, [r3, #28]
}
    5618:	bf00      	nop
    561a:	370c      	adds	r7, #12
    561c:	46bd      	mov	sp, r7
    561e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5622:	4770      	bx	lr

00005624 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5624:	b480      	push	{r7}
    5626:	b083      	sub	sp, #12
    5628:	af00      	add	r7, sp, #0
    562a:	6078      	str	r0, [r7, #4]
    562c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	683a      	ldr	r2, [r7, #0]
    5632:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5634:	bf00      	nop
    5636:	370c      	adds	r7, #12
    5638:	46bd      	mov	sp, r7
    563a:	f85d 7b04 	ldr.w	r7, [sp], #4
    563e:	4770      	bx	lr

00005640 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5640:	b480      	push	{r7}
    5642:	b083      	sub	sp, #12
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
    5648:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	683a      	ldr	r2, [r7, #0]
    564e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5650:	bf00      	nop
    5652:	370c      	adds	r7, #12
    5654:	46bd      	mov	sp, r7
    5656:	f85d 7b04 	ldr.w	r7, [sp], #4
    565a:	4770      	bx	lr

0000565c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    565c:	b480      	push	{r7}
    565e:	b083      	sub	sp, #12
    5660:	af00      	add	r7, sp, #0
    5662:	6078      	str	r0, [r7, #4]
    5664:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	683a      	ldr	r2, [r7, #0]
    566a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    566c:	bf00      	nop
    566e:	370c      	adds	r7, #12
    5670:	46bd      	mov	sp, r7
    5672:	f85d 7b04 	ldr.w	r7, [sp], #4
    5676:	4770      	bx	lr

00005678 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5678:	b480      	push	{r7}
    567a:	b083      	sub	sp, #12
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
    5680:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	683a      	ldr	r2, [r7, #0]
    5686:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5688:	bf00      	nop
    568a:	370c      	adds	r7, #12
    568c:	46bd      	mov	sp, r7
    568e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5692:	4770      	bx	lr

00005694 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5694:	b480      	push	{r7}
    5696:	b085      	sub	sp, #20
    5698:	af00      	add	r7, sp, #0
    569a:	6078      	str	r0, [r7, #4]
    569c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    56a2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    56a4:	68fb      	ldr	r3, [r7, #12]
    56a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    56aa:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    56ac:	683b      	ldr	r3, [r7, #0]
    56ae:	b2db      	uxtb	r3, r3
    56b0:	68fa      	ldr	r2, [r7, #12]
    56b2:	4313      	orrs	r3, r2
    56b4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	68fa      	ldr	r2, [r7, #12]
    56ba:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56bc:	bf00      	nop
    56be:	3714      	adds	r7, #20
    56c0:	46bd      	mov	sp, r7
    56c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c6:	4770      	bx	lr

000056c8 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    56c8:	b480      	push	{r7}
    56ca:	b085      	sub	sp, #20
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
    56d0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    56d6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    56d8:	68fb      	ldr	r3, [r7, #12]
    56da:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    56de:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    56e0:	683b      	ldr	r3, [r7, #0]
    56e2:	041b      	lsls	r3, r3, #16
    56e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    56e8:	68fa      	ldr	r2, [r7, #12]
    56ea:	4313      	orrs	r3, r2
    56ec:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	68fa      	ldr	r2, [r7, #12]
    56f2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56f4:	bf00      	nop
    56f6:	3714      	adds	r7, #20
    56f8:	46bd      	mov	sp, r7
    56fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fe:	4770      	bx	lr

00005700 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5700:	b480      	push	{r7}
    5702:	b083      	sub	sp, #12
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
    5708:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    570a:	687b      	ldr	r3, [r7, #4]
    570c:	683a      	ldr	r2, [r7, #0]
    570e:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5710:	bf00      	nop
    5712:	370c      	adds	r7, #12
    5714:	46bd      	mov	sp, r7
    5716:	f85d 7b04 	ldr.w	r7, [sp], #4
    571a:	4770      	bx	lr

0000571c <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    571c:	b480      	push	{r7}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5728:	4618      	mov	r0, r3
    572a:	370c      	adds	r7, #12
    572c:	46bd      	mov	sp, r7
    572e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5732:	4770      	bx	lr

00005734 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5734:	b480      	push	{r7}
    5736:	b085      	sub	sp, #20
    5738:	af00      	add	r7, sp, #0
    573a:	60f8      	str	r0, [r7, #12]
    573c:	60b9      	str	r1, [r7, #8]
    573e:	607a      	str	r2, [r7, #4]
	while (count--) {
    5740:	e007      	b.n	5752 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	1c5a      	adds	r2, r3, #1
    5746:	60fa      	str	r2, [r7, #12]
    5748:	68ba      	ldr	r2, [r7, #8]
    574a:	1c51      	adds	r1, r2, #1
    574c:	60b9      	str	r1, [r7, #8]
    574e:	7812      	ldrb	r2, [r2, #0]
    5750:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	1e5a      	subs	r2, r3, #1
    5756:	607a      	str	r2, [r7, #4]
    5758:	2b00      	cmp	r3, #0
    575a:	d1f2      	bne.n	5742 <_qspi_memcpy+0xe>
	}
}
    575c:	bf00      	nop
    575e:	3714      	adds	r7, #20
    5760:	46bd      	mov	sp, r7
    5762:	f85d 7b04 	ldr.w	r7, [sp], #4
    5766:	4770      	bx	lr

00005768 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5768:	b580      	push	{r7, lr}
    576a:	b082      	sub	sp, #8
    576c:	af00      	add	r7, sp, #0
    576e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5770:	4903      	ldr	r1, [pc, #12]	; (5780 <_qspi_end_transfer+0x18>)
    5772:	6878      	ldr	r0, [r7, #4]
    5774:	4b03      	ldr	r3, [pc, #12]	; (5784 <_qspi_end_transfer+0x1c>)
    5776:	4798      	blx	r3
}
    5778:	bf00      	nop
    577a:	3708      	adds	r7, #8
    577c:	46bd      	mov	sp, r7
    577e:	bd80      	pop	{r7, pc}
    5780:	01000002 	.word	0x01000002
    5784:	00005625 	.word	0x00005625

00005788 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5788:	b580      	push	{r7, lr}
    578a:	b082      	sub	sp, #8
    578c:	af00      	add	r7, sp, #0
    578e:	6078      	str	r0, [r7, #4]
    5790:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5792:	687b      	ldr	r3, [r7, #4]
    5794:	2b00      	cmp	r3, #0
    5796:	d004      	beq.n	57a2 <_qspi_sync_init+0x1a>
    5798:	683b      	ldr	r3, [r7, #0]
    579a:	2b00      	cmp	r3, #0
    579c:	d001      	beq.n	57a2 <_qspi_sync_init+0x1a>
    579e:	2301      	movs	r3, #1
    57a0:	e000      	b.n	57a4 <_qspi_sync_init+0x1c>
    57a2:	2300      	movs	r3, #0
    57a4:	f003 0301 	and.w	r3, r3, #1
    57a8:	b2db      	uxtb	r3, r3
    57aa:	2240      	movs	r2, #64	; 0x40
    57ac:	490c      	ldr	r1, [pc, #48]	; (57e0 <_qspi_sync_init+0x58>)
    57ae:	4618      	mov	r0, r3
    57b0:	4b0c      	ldr	r3, [pc, #48]	; (57e4 <_qspi_sync_init+0x5c>)
    57b2:	4798      	blx	r3
	dev->prvt = hw;
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	683a      	ldr	r2, [r7, #0]
    57b8:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    57ba:	687b      	ldr	r3, [r7, #4]
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	2101      	movs	r1, #1
    57c0:	4618      	mov	r0, r3
    57c2:	4b09      	ldr	r3, [pc, #36]	; (57e8 <_qspi_sync_init+0x60>)
    57c4:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    57c6:	4909      	ldr	r1, [pc, #36]	; (57ec <_qspi_sync_init+0x64>)
    57c8:	6838      	ldr	r0, [r7, #0]
    57ca:	4b09      	ldr	r3, [pc, #36]	; (57f0 <_qspi_sync_init+0x68>)
    57cc:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    57ce:	4909      	ldr	r1, [pc, #36]	; (57f4 <_qspi_sync_init+0x6c>)
    57d0:	6838      	ldr	r0, [r7, #0]
    57d2:	4b09      	ldr	r3, [pc, #36]	; (57f8 <_qspi_sync_init+0x70>)
    57d4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    57d6:	2300      	movs	r3, #0
}
    57d8:	4618      	mov	r0, r3
    57da:	3708      	adds	r7, #8
    57dc:	46bd      	mov	sp, r7
    57de:	bd80      	pop	{r7, pc}
    57e0:	0000eedc 	.word	0x0000eedc
    57e4:	00003931 	.word	0x00003931
    57e8:	00005625 	.word	0x00005625
    57ec:	06000011 	.word	0x06000011
    57f0:	00005641 	.word	0x00005641
    57f4:	00241300 	.word	0x00241300
    57f8:	0000565d 	.word	0x0000565d

000057fc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b082      	sub	sp, #8
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	2102      	movs	r1, #2
    580a:	4618      	mov	r0, r3
    580c:	4b03      	ldr	r3, [pc, #12]	; (581c <_qspi_sync_enable+0x20>)
    580e:	4798      	blx	r3
	return ERR_NONE;
    5810:	2300      	movs	r3, #0
}
    5812:	4618      	mov	r0, r3
    5814:	3708      	adds	r7, #8
    5816:	46bd      	mov	sp, r7
    5818:	bd80      	pop	{r7, pc}
    581a:	bf00      	nop
    581c:	00005625 	.word	0x00005625

00005820 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5820:	b580      	push	{r7, lr}
    5822:	b082      	sub	sp, #8
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5828:	687b      	ldr	r3, [r7, #4]
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	2100      	movs	r1, #0
    582e:	4618      	mov	r0, r3
    5830:	4b03      	ldr	r3, [pc, #12]	; (5840 <_qspi_sync_disable+0x20>)
    5832:	4798      	blx	r3
	return ERR_NONE;
    5834:	2300      	movs	r3, #0
}
    5836:	4618      	mov	r0, r3
    5838:	3708      	adds	r7, #8
    583a:	46bd      	mov	sp, r7
    583c:	bd80      	pop	{r7, pc}
    583e:	bf00      	nop
    5840:	00005625 	.word	0x00005625

00005844 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5844:	b580      	push	{r7, lr}
    5846:	b084      	sub	sp, #16
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
    584c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    584e:	687b      	ldr	r3, [r7, #4]
    5850:	681b      	ldr	r3, [r3, #0]
    5852:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5854:	683b      	ldr	r3, [r7, #0]
    5856:	781b      	ldrb	r3, [r3, #0]
    5858:	f003 0320 	and.w	r3, r3, #32
    585c:	b2db      	uxtb	r3, r3
    585e:	2b00      	cmp	r3, #0
    5860:	d005      	beq.n	586e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5862:	683b      	ldr	r3, [r7, #0]
    5864:	689b      	ldr	r3, [r3, #8]
    5866:	4619      	mov	r1, r3
    5868:	68f8      	ldr	r0, [r7, #12]
    586a:	4b13      	ldr	r3, [pc, #76]	; (58b8 <_qspi_sync_command_set_ifr+0x74>)
    586c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    586e:	683b      	ldr	r3, [r7, #0]
    5870:	781b      	ldrb	r3, [r3, #0]
    5872:	f003 0310 	and.w	r3, r3, #16
    5876:	b2db      	uxtb	r3, r3
    5878:	2b00      	cmp	r3, #0
    587a:	d005      	beq.n	5888 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    587c:	683b      	ldr	r3, [r7, #0]
    587e:	791b      	ldrb	r3, [r3, #4]
    5880:	4619      	mov	r1, r3
    5882:	68f8      	ldr	r0, [r7, #12]
    5884:	4b0d      	ldr	r3, [pc, #52]	; (58bc <_qspi_sync_command_set_ifr+0x78>)
    5886:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5888:	683b      	ldr	r3, [r7, #0]
    588a:	781b      	ldrb	r3, [r3, #0]
    588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5890:	b2db      	uxtb	r3, r3
    5892:	2b00      	cmp	r3, #0
    5894:	d005      	beq.n	58a2 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5896:	683b      	ldr	r3, [r7, #0]
    5898:	795b      	ldrb	r3, [r3, #5]
    589a:	4619      	mov	r1, r3
    589c:	68f8      	ldr	r0, [r7, #12]
    589e:	4b08      	ldr	r3, [pc, #32]	; (58c0 <_qspi_sync_command_set_ifr+0x7c>)
    58a0:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    58a2:	683b      	ldr	r3, [r7, #0]
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	4619      	mov	r1, r3
    58a8:	68f8      	ldr	r0, [r7, #12]
    58aa:	4b06      	ldr	r3, [pc, #24]	; (58c4 <_qspi_sync_command_set_ifr+0x80>)
    58ac:	4798      	blx	r3
}
    58ae:	bf00      	nop
    58b0:	3710      	adds	r7, #16
    58b2:	46bd      	mov	sp, r7
    58b4:	bd80      	pop	{r7, pc}
    58b6:	bf00      	nop
    58b8:	00005679 	.word	0x00005679
    58bc:	00005695 	.word	0x00005695
    58c0:	000056c9 	.word	0x000056c9
    58c4:	00005701 	.word	0x00005701

000058c8 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    58c8:	b580      	push	{r7, lr}
    58ca:	b084      	sub	sp, #16
    58cc:	af00      	add	r7, sp, #0
    58ce:	6078      	str	r0, [r7, #4]
    58d0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    58d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    58dc:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    58de:	683b      	ldr	r3, [r7, #0]
    58e0:	781b      	ldrb	r3, [r3, #0]
    58e2:	f003 0320 	and.w	r3, r3, #32
    58e6:	b2db      	uxtb	r3, r3
    58e8:	2b00      	cmp	r3, #0
    58ea:	d004      	beq.n	58f6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    58ec:	683b      	ldr	r3, [r7, #0]
    58ee:	689b      	ldr	r3, [r3, #8]
    58f0:	68fa      	ldr	r2, [r7, #12]
    58f2:	4413      	add	r3, r2
    58f4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    58f6:	68b8      	ldr	r0, [r7, #8]
    58f8:	4b18      	ldr	r3, [pc, #96]	; (595c <_qspi_sync_run_transfer+0x94>)
    58fa:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    58fc:	683b      	ldr	r3, [r7, #0]
    58fe:	691b      	ldr	r3, [r3, #16]
    5900:	2b00      	cmp	r3, #0
    5902:	d103      	bne.n	590c <_qspi_sync_run_transfer+0x44>
    5904:	683b      	ldr	r3, [r7, #0]
    5906:	695b      	ldr	r3, [r3, #20]
    5908:	2b00      	cmp	r3, #0
    590a:	d001      	beq.n	5910 <_qspi_sync_run_transfer+0x48>
    590c:	2301      	movs	r3, #1
    590e:	e000      	b.n	5912 <_qspi_sync_run_transfer+0x4a>
    5910:	2300      	movs	r3, #0
    5912:	f003 0301 	and.w	r3, r3, #1
    5916:	b2db      	uxtb	r3, r3
    5918:	2282      	movs	r2, #130	; 0x82
    591a:	4911      	ldr	r1, [pc, #68]	; (5960 <_qspi_sync_run_transfer+0x98>)
    591c:	4618      	mov	r0, r3
    591e:	4b11      	ldr	r3, [pc, #68]	; (5964 <_qspi_sync_run_transfer+0x9c>)
    5920:	4798      	blx	r3

	if (cmd->tx_buf) {
    5922:	683b      	ldr	r3, [r7, #0]
    5924:	691b      	ldr	r3, [r3, #16]
    5926:	2b00      	cmp	r3, #0
    5928:	d008      	beq.n	593c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    592a:	683b      	ldr	r3, [r7, #0]
    592c:	6919      	ldr	r1, [r3, #16]
    592e:	683b      	ldr	r3, [r7, #0]
    5930:	68db      	ldr	r3, [r3, #12]
    5932:	461a      	mov	r2, r3
    5934:	68f8      	ldr	r0, [r7, #12]
    5936:	4b0c      	ldr	r3, [pc, #48]	; (5968 <_qspi_sync_run_transfer+0xa0>)
    5938:	4798      	blx	r3
    593a:	e007      	b.n	594c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    593c:	683b      	ldr	r3, [r7, #0]
    593e:	6958      	ldr	r0, [r3, #20]
    5940:	683b      	ldr	r3, [r7, #0]
    5942:	68db      	ldr	r3, [r3, #12]
    5944:	461a      	mov	r2, r3
    5946:	68f9      	ldr	r1, [r7, #12]
    5948:	4b07      	ldr	r3, [pc, #28]	; (5968 <_qspi_sync_run_transfer+0xa0>)
    594a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    594c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5950:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5954:	bf00      	nop
    5956:	3710      	adds	r7, #16
    5958:	46bd      	mov	sp, r7
    595a:	bd80      	pop	{r7, pc}
    595c:	0000571d 	.word	0x0000571d
    5960:	0000eedc 	.word	0x0000eedc
    5964:	00003931 	.word	0x00003931
    5968:	00005735 	.word	0x00005735

0000596c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    596c:	b580      	push	{r7, lr}
    596e:	b082      	sub	sp, #8
    5970:	af00      	add	r7, sp, #0
    5972:	6078      	str	r0, [r7, #4]
    5974:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5976:	6839      	ldr	r1, [r7, #0]
    5978:	6878      	ldr	r0, [r7, #4]
    597a:	4b14      	ldr	r3, [pc, #80]	; (59cc <_qspi_sync_serial_run_command+0x60>)
    597c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	781b      	ldrb	r3, [r3, #0]
    5982:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5986:	b2db      	uxtb	r3, r3
    5988:	2b00      	cmp	r3, #0
    598a:	d003      	beq.n	5994 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    598c:	6839      	ldr	r1, [r7, #0]
    598e:	6878      	ldr	r0, [r7, #4]
    5990:	4b0f      	ldr	r3, [pc, #60]	; (59d0 <_qspi_sync_serial_run_command+0x64>)
    5992:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	4618      	mov	r0, r3
    599a:	4b0e      	ldr	r3, [pc, #56]	; (59d4 <_qspi_sync_serial_run_command+0x68>)
    599c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    599e:	bf00      	nop
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	681b      	ldr	r3, [r3, #0]
    59a4:	4618      	mov	r0, r3
    59a6:	4b0c      	ldr	r3, [pc, #48]	; (59d8 <_qspi_sync_serial_run_command+0x6c>)
    59a8:	4798      	blx	r3
    59aa:	4603      	mov	r3, r0
    59ac:	f083 0301 	eor.w	r3, r3, #1
    59b0:	b2db      	uxtb	r3, r3
    59b2:	2b00      	cmp	r3, #0
    59b4:	d1f4      	bne.n	59a0 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    59b6:	687b      	ldr	r3, [r7, #4]
    59b8:	681b      	ldr	r3, [r3, #0]
    59ba:	4618      	mov	r0, r3
    59bc:	4b07      	ldr	r3, [pc, #28]	; (59dc <_qspi_sync_serial_run_command+0x70>)
    59be:	4798      	blx	r3
	return ERR_NONE;
    59c0:	2300      	movs	r3, #0
}
    59c2:	4618      	mov	r0, r3
    59c4:	3708      	adds	r7, #8
    59c6:	46bd      	mov	sp, r7
    59c8:	bd80      	pop	{r7, pc}
    59ca:	bf00      	nop
    59cc:	00005845 	.word	0x00005845
    59d0:	000058c9 	.word	0x000058c9
    59d4:	00005769 	.word	0x00005769
    59d8:	000055e1 	.word	0x000055e1
    59dc:	00005609 	.word	0x00005609

000059e0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    59e0:	b480      	push	{r7}
    59e2:	b083      	sub	sp, #12
    59e4:	af00      	add	r7, sp, #0
    59e6:	6078      	str	r0, [r7, #4]
    59e8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    59ea:	bf00      	nop
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	691a      	ldr	r2, [r3, #16]
    59f0:	683b      	ldr	r3, [r7, #0]
    59f2:	4013      	ands	r3, r2
    59f4:	2b00      	cmp	r3, #0
    59f6:	d1f9      	bne.n	59ec <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    59f8:	bf00      	nop
    59fa:	370c      	adds	r7, #12
    59fc:	46bd      	mov	sp, r7
    59fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a02:	4770      	bx	lr

00005a04 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5a04:	b480      	push	{r7}
    5a06:	b083      	sub	sp, #12
    5a08:	af00      	add	r7, sp, #0
    5a0a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5a0c:	687b      	ldr	r3, [r7, #4]
    5a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a12:	819a      	strh	r2, [r3, #12]
}
    5a14:	bf00      	nop
    5a16:	370c      	adds	r7, #12
    5a18:	46bd      	mov	sp, r7
    5a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a1e:	4770      	bx	lr

00005a20 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5a20:	b480      	push	{r7}
    5a22:	b083      	sub	sp, #12
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5a2e:	819a      	strh	r2, [r3, #12]
}
    5a30:	bf00      	nop
    5a32:	370c      	adds	r7, #12
    5a34:	46bd      	mov	sp, r7
    5a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3a:	4770      	bx	lr

00005a3c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5a3c:	b480      	push	{r7}
    5a3e:	b083      	sub	sp, #12
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	899b      	ldrh	r3, [r3, #12]
    5a48:	b29b      	uxth	r3, r3
}
    5a4a:	4618      	mov	r0, r3
    5a4c:	370c      	adds	r7, #12
    5a4e:	46bd      	mov	sp, r7
    5a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a54:	4770      	bx	lr

00005a56 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5a56:	b480      	push	{r7}
    5a58:	b083      	sub	sp, #12
    5a5a:	af00      	add	r7, sp, #0
    5a5c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	895b      	ldrh	r3, [r3, #10]
    5a62:	b29b      	uxth	r3, r3
}
    5a64:	4618      	mov	r0, r3
    5a66:	370c      	adds	r7, #12
    5a68:	46bd      	mov	sp, r7
    5a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6e:	4770      	bx	lr

00005a70 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5a70:	b580      	push	{r7, lr}
    5a72:	b082      	sub	sp, #8
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	881b      	ldrh	r3, [r3, #0]
    5a7c:	b29b      	uxth	r3, r3
    5a7e:	f043 0301 	orr.w	r3, r3, #1
    5a82:	b29a      	uxth	r2, r3
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5a88:	2101      	movs	r1, #1
    5a8a:	6878      	ldr	r0, [r7, #4]
    5a8c:	4b02      	ldr	r3, [pc, #8]	; (5a98 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5a8e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a90:	bf00      	nop
    5a92:	3708      	adds	r7, #8
    5a94:	46bd      	mov	sp, r7
    5a96:	bd80      	pop	{r7, pc}
    5a98:	000059e1 	.word	0x000059e1

00005a9c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5a9c:	b580      	push	{r7, lr}
    5a9e:	b084      	sub	sp, #16
    5aa0:	af00      	add	r7, sp, #0
    5aa2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5aa4:	f248 0103 	movw	r1, #32771	; 0x8003
    5aa8:	6878      	ldr	r0, [r7, #4]
    5aaa:	4b0a      	ldr	r3, [pc, #40]	; (5ad4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5aac:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	881b      	ldrh	r3, [r3, #0]
    5ab2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5ab4:	89fb      	ldrh	r3, [r7, #14]
    5ab6:	085b      	lsrs	r3, r3, #1
    5ab8:	b29b      	uxth	r3, r3
    5aba:	f003 0301 	and.w	r3, r3, #1
    5abe:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5ac0:	89fb      	ldrh	r3, [r7, #14]
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	bf14      	ite	ne
    5ac6:	2301      	movne	r3, #1
    5ac8:	2300      	moveq	r3, #0
    5aca:	b2db      	uxtb	r3, r3
}
    5acc:	4618      	mov	r0, r3
    5ace:	3710      	adds	r7, #16
    5ad0:	46bd      	mov	sp, r7
    5ad2:	bd80      	pop	{r7, pc}
    5ad4:	000059e1 	.word	0x000059e1

00005ad8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	b082      	sub	sp, #8
    5adc:	af00      	add	r7, sp, #0
    5ade:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5ae0:	687b      	ldr	r3, [r7, #4]
    5ae2:	881b      	ldrh	r3, [r3, #0]
    5ae4:	b29b      	uxth	r3, r3
    5ae6:	f023 0302 	bic.w	r3, r3, #2
    5aea:	b29a      	uxth	r2, r3
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5af0:	f248 0103 	movw	r1, #32771	; 0x8003
    5af4:	6878      	ldr	r0, [r7, #4]
    5af6:	4b03      	ldr	r3, [pc, #12]	; (5b04 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5af8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5afa:	bf00      	nop
    5afc:	3708      	adds	r7, #8
    5afe:	46bd      	mov	sp, r7
    5b00:	bd80      	pop	{r7, pc}
    5b02:	bf00      	nop
    5b04:	000059e1 	.word	0x000059e1

00005b08 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5b08:	b580      	push	{r7, lr}
    5b0a:	b082      	sub	sp, #8
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	6078      	str	r0, [r7, #4]
    5b10:	460b      	mov	r3, r1
    5b12:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	887a      	ldrh	r2, [r7, #2]
    5b18:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5b1a:	f248 0103 	movw	r1, #32771	; 0x8003
    5b1e:	6878      	ldr	r0, [r7, #4]
    5b20:	4b02      	ldr	r3, [pc, #8]	; (5b2c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5b22:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b24:	bf00      	nop
    5b26:	3708      	adds	r7, #8
    5b28:	46bd      	mov	sp, r7
    5b2a:	bd80      	pop	{r7, pc}
    5b2c:	000059e1 	.word	0x000059e1

00005b30 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5b30:	b480      	push	{r7}
    5b32:	b083      	sub	sp, #12
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
    5b38:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	683a      	ldr	r2, [r7, #0]
    5b3e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b40:	bf00      	nop
    5b42:	370c      	adds	r7, #12
    5b44:	46bd      	mov	sp, r7
    5b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b4a:	4770      	bx	lr

00005b4c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b082      	sub	sp, #8
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5b54:	687b      	ldr	r3, [r7, #4]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d005      	beq.n	5b66 <_calendar_init+0x1a>
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d001      	beq.n	5b66 <_calendar_init+0x1a>
    5b62:	2301      	movs	r3, #1
    5b64:	e000      	b.n	5b68 <_calendar_init+0x1c>
    5b66:	2300      	movs	r3, #0
    5b68:	f003 0301 	and.w	r3, r3, #1
    5b6c:	b2db      	uxtb	r3, r3
    5b6e:	222f      	movs	r2, #47	; 0x2f
    5b70:	491b      	ldr	r1, [pc, #108]	; (5be0 <_calendar_init+0x94>)
    5b72:	4618      	mov	r0, r3
    5b74:	4b1b      	ldr	r3, [pc, #108]	; (5be4 <_calendar_init+0x98>)
    5b76:	4798      	blx	r3

	_rtc_dev = dev;
    5b78:	4a1b      	ldr	r2, [pc, #108]	; (5be8 <_calendar_init+0x9c>)
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	681b      	ldr	r3, [r3, #0]
    5b82:	4618      	mov	r0, r3
    5b84:	4b19      	ldr	r3, [pc, #100]	; (5bec <_calendar_init+0xa0>)
    5b86:	4798      	blx	r3
    5b88:	4603      	mov	r3, r0
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d00a      	beq.n	5ba4 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	4618      	mov	r0, r3
    5b94:	4b16      	ldr	r3, [pc, #88]	; (5bf0 <_calendar_init+0xa4>)
    5b96:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	2102      	movs	r1, #2
    5b9e:	4618      	mov	r0, r3
    5ba0:	4b14      	ldr	r3, [pc, #80]	; (5bf4 <_calendar_init+0xa8>)
    5ba2:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	681b      	ldr	r3, [r3, #0]
    5ba8:	4618      	mov	r0, r3
    5baa:	4b13      	ldr	r3, [pc, #76]	; (5bf8 <_calendar_init+0xac>)
    5bac:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	2101      	movs	r1, #1
    5bb4:	4618      	mov	r0, r3
    5bb6:	4b0f      	ldr	r3, [pc, #60]	; (5bf4 <_calendar_init+0xa8>)
    5bb8:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	681b      	ldr	r3, [r3, #0]
    5bbe:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5bc2:	4618      	mov	r0, r3
    5bc4:	4b0d      	ldr	r3, [pc, #52]	; (5bfc <_calendar_init+0xb0>)
    5bc6:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5bcc:	2100      	movs	r1, #0
    5bce:	4618      	mov	r0, r3
    5bd0:	4b0b      	ldr	r3, [pc, #44]	; (5c00 <_calendar_init+0xb4>)
    5bd2:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5bd4:	2300      	movs	r3, #0
}
    5bd6:	4618      	mov	r0, r3
    5bd8:	3708      	adds	r7, #8
    5bda:	46bd      	mov	sp, r7
    5bdc:	bd80      	pop	{r7, pc}
    5bde:	bf00      	nop
    5be0:	0000eef4 	.word	0x0000eef4
    5be4:	00003931 	.word	0x00003931
    5be8:	200006d8 	.word	0x200006d8
    5bec:	00005a9d 	.word	0x00005a9d
    5bf0:	00005ad9 	.word	0x00005ad9
    5bf4:	000059e1 	.word	0x000059e1
    5bf8:	00005a71 	.word	0x00005a71
    5bfc:	00005b09 	.word	0x00005b09
    5c00:	00005b31 	.word	0x00005b31

00005c04 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5c04:	b580      	push	{r7, lr}
    5c06:	b084      	sub	sp, #16
    5c08:	af00      	add	r7, sp, #0
    5c0a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	681b      	ldr	r3, [r3, #0]
    5c10:	4618      	mov	r0, r3
    5c12:	4b19      	ldr	r3, [pc, #100]	; (5c78 <_rtc_interrupt_handler+0x74>)
    5c14:	4798      	blx	r3
    5c16:	4603      	mov	r3, r0
    5c18:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	4618      	mov	r0, r3
    5c20:	4b16      	ldr	r3, [pc, #88]	; (5c7c <_rtc_interrupt_handler+0x78>)
    5c22:	4798      	blx	r3
    5c24:	4603      	mov	r3, r0
    5c26:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5c28:	89fa      	ldrh	r2, [r7, #14]
    5c2a:	89bb      	ldrh	r3, [r7, #12]
    5c2c:	4013      	ands	r3, r2
    5c2e:	b29b      	uxth	r3, r3
    5c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5c34:	2b00      	cmp	r3, #0
    5c36:	d009      	beq.n	5c4c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	685b      	ldr	r3, [r3, #4]
    5c3c:	6878      	ldr	r0, [r7, #4]
    5c3e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5c40:	687b      	ldr	r3, [r7, #4]
    5c42:	681b      	ldr	r3, [r3, #0]
    5c44:	4618      	mov	r0, r3
    5c46:	4b0e      	ldr	r3, [pc, #56]	; (5c80 <_rtc_interrupt_handler+0x7c>)
    5c48:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5c4a:	e010      	b.n	5c6e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5c4c:	89fa      	ldrh	r2, [r7, #14]
    5c4e:	89bb      	ldrh	r3, [r7, #12]
    5c50:	4013      	ands	r3, r2
    5c52:	b29b      	uxth	r3, r3
    5c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d008      	beq.n	5c6e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	689b      	ldr	r3, [r3, #8]
    5c60:	6878      	ldr	r0, [r7, #4]
    5c62:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5c64:	687b      	ldr	r3, [r7, #4]
    5c66:	681b      	ldr	r3, [r3, #0]
    5c68:	4618      	mov	r0, r3
    5c6a:	4b06      	ldr	r3, [pc, #24]	; (5c84 <_rtc_interrupt_handler+0x80>)
    5c6c:	4798      	blx	r3
}
    5c6e:	bf00      	nop
    5c70:	3710      	adds	r7, #16
    5c72:	46bd      	mov	sp, r7
    5c74:	bd80      	pop	{r7, pc}
    5c76:	bf00      	nop
    5c78:	00005a3d 	.word	0x00005a3d
    5c7c:	00005a57 	.word	0x00005a57
    5c80:	00005a05 	.word	0x00005a05
    5c84:	00005a21 	.word	0x00005a21

00005c88 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5c8c:	4b03      	ldr	r3, [pc, #12]	; (5c9c <RTC_Handler+0x14>)
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	4618      	mov	r0, r3
    5c92:	4b03      	ldr	r3, [pc, #12]	; (5ca0 <RTC_Handler+0x18>)
    5c94:	4798      	blx	r3
}
    5c96:	bf00      	nop
    5c98:	bd80      	pop	{r7, pc}
    5c9a:	bf00      	nop
    5c9c:	200006d8 	.word	0x200006d8
    5ca0:	00005c05 	.word	0x00005c05

00005ca4 <__NVIC_EnableIRQ>:
{
    5ca4:	b480      	push	{r7}
    5ca6:	b083      	sub	sp, #12
    5ca8:	af00      	add	r7, sp, #0
    5caa:	4603      	mov	r3, r0
    5cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	db0b      	blt.n	5cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cb6:	4909      	ldr	r1, [pc, #36]	; (5cdc <__NVIC_EnableIRQ+0x38>)
    5cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cbc:	095b      	lsrs	r3, r3, #5
    5cbe:	88fa      	ldrh	r2, [r7, #6]
    5cc0:	f002 021f 	and.w	r2, r2, #31
    5cc4:	2001      	movs	r0, #1
    5cc6:	fa00 f202 	lsl.w	r2, r0, r2
    5cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5cce:	bf00      	nop
    5cd0:	370c      	adds	r7, #12
    5cd2:	46bd      	mov	sp, r7
    5cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cd8:	4770      	bx	lr
    5cda:	bf00      	nop
    5cdc:	e000e100 	.word	0xe000e100

00005ce0 <__NVIC_DisableIRQ>:
{
    5ce0:	b480      	push	{r7}
    5ce2:	b083      	sub	sp, #12
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	4603      	mov	r3, r0
    5ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	db10      	blt.n	5d14 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cf2:	490b      	ldr	r1, [pc, #44]	; (5d20 <__NVIC_DisableIRQ+0x40>)
    5cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cf8:	095b      	lsrs	r3, r3, #5
    5cfa:	88fa      	ldrh	r2, [r7, #6]
    5cfc:	f002 021f 	and.w	r2, r2, #31
    5d00:	2001      	movs	r0, #1
    5d02:	fa00 f202 	lsl.w	r2, r0, r2
    5d06:	3320      	adds	r3, #32
    5d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d10:	f3bf 8f6f 	isb	sy
}
    5d14:	bf00      	nop
    5d16:	370c      	adds	r7, #12
    5d18:	46bd      	mov	sp, r7
    5d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1e:	4770      	bx	lr
    5d20:	e000e100 	.word	0xe000e100

00005d24 <__NVIC_ClearPendingIRQ>:
{
    5d24:	b480      	push	{r7}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
    5d2a:	4603      	mov	r3, r0
    5d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d32:	2b00      	cmp	r3, #0
    5d34:	db0c      	blt.n	5d50 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d36:	4909      	ldr	r1, [pc, #36]	; (5d5c <__NVIC_ClearPendingIRQ+0x38>)
    5d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d3c:	095b      	lsrs	r3, r3, #5
    5d3e:	88fa      	ldrh	r2, [r7, #6]
    5d40:	f002 021f 	and.w	r2, r2, #31
    5d44:	2001      	movs	r0, #1
    5d46:	fa00 f202 	lsl.w	r2, r0, r2
    5d4a:	3360      	adds	r3, #96	; 0x60
    5d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d50:	bf00      	nop
    5d52:	370c      	adds	r7, #12
    5d54:	46bd      	mov	sp, r7
    5d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d5a:	4770      	bx	lr
    5d5c:	e000e100 	.word	0xe000e100

00005d60 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d60:	b480      	push	{r7}
    5d62:	b083      	sub	sp, #12
    5d64:	af00      	add	r7, sp, #0
    5d66:	6078      	str	r0, [r7, #4]
    5d68:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5d6a:	bf00      	nop
    5d6c:	687b      	ldr	r3, [r7, #4]
    5d6e:	69da      	ldr	r2, [r3, #28]
    5d70:	683b      	ldr	r3, [r7, #0]
    5d72:	4013      	ands	r3, r2
    5d74:	2b00      	cmp	r3, #0
    5d76:	d1f9      	bne.n	5d6c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5d78:	bf00      	nop
    5d7a:	370c      	adds	r7, #12
    5d7c:	46bd      	mov	sp, r7
    5d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d82:	4770      	bx	lr

00005d84 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d84:	b480      	push	{r7}
    5d86:	b083      	sub	sp, #12
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5d8e:	687b      	ldr	r3, [r7, #4]
    5d90:	69da      	ldr	r2, [r3, #28]
    5d92:	683b      	ldr	r3, [r7, #0]
    5d94:	4013      	ands	r3, r2
    5d96:	2b00      	cmp	r3, #0
    5d98:	bf14      	ite	ne
    5d9a:	2301      	movne	r3, #1
    5d9c:	2300      	moveq	r3, #0
    5d9e:	b2db      	uxtb	r3, r3
}
    5da0:	4618      	mov	r0, r3
    5da2:	370c      	adds	r7, #12
    5da4:	46bd      	mov	sp, r7
    5da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5daa:	4770      	bx	lr

00005dac <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5dac:	b480      	push	{r7}
    5dae:	b083      	sub	sp, #12
    5db0:	af00      	add	r7, sp, #0
    5db2:	6078      	str	r0, [r7, #4]
    5db4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5db6:	bf00      	nop
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	69da      	ldr	r2, [r3, #28]
    5dbc:	683b      	ldr	r3, [r7, #0]
    5dbe:	4013      	ands	r3, r2
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d1f9      	bne.n	5db8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5dc4:	bf00      	nop
    5dc6:	370c      	adds	r7, #12
    5dc8:	46bd      	mov	sp, r7
    5dca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dce:	4770      	bx	lr

00005dd0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5dd0:	b480      	push	{r7}
    5dd2:	b083      	sub	sp, #12
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
    5dd8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	69da      	ldr	r2, [r3, #28]
    5dde:	683b      	ldr	r3, [r7, #0]
    5de0:	4013      	ands	r3, r2
    5de2:	2b00      	cmp	r3, #0
    5de4:	bf14      	ite	ne
    5de6:	2301      	movne	r3, #1
    5de8:	2300      	moveq	r3, #0
    5dea:	b2db      	uxtb	r3, r3
}
    5dec:	4618      	mov	r0, r3
    5dee:	370c      	adds	r7, #12
    5df0:	46bd      	mov	sp, r7
    5df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df6:	4770      	bx	lr

00005df8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5df8:	b480      	push	{r7}
    5dfa:	b083      	sub	sp, #12
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	2201      	movs	r2, #1
    5e04:	761a      	strb	r2, [r3, #24]
}
    5e06:	bf00      	nop
    5e08:	370c      	adds	r7, #12
    5e0a:	46bd      	mov	sp, r7
    5e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e10:	4770      	bx	lr

00005e12 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5e12:	b480      	push	{r7}
    5e14:	b083      	sub	sp, #12
    5e16:	af00      	add	r7, sp, #0
    5e18:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5e1a:	687b      	ldr	r3, [r7, #4]
    5e1c:	2202      	movs	r2, #2
    5e1e:	761a      	strb	r2, [r3, #24]
}
    5e20:	bf00      	nop
    5e22:	370c      	adds	r7, #12
    5e24:	46bd      	mov	sp, r7
    5e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e2a:	4770      	bx	lr

00005e2c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5e2c:	b480      	push	{r7}
    5e2e:	b083      	sub	sp, #12
    5e30:	af00      	add	r7, sp, #0
    5e32:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	7e1b      	ldrb	r3, [r3, #24]
    5e38:	b2db      	uxtb	r3, r3
}
    5e3a:	4618      	mov	r0, r3
    5e3c:	370c      	adds	r7, #12
    5e3e:	46bd      	mov	sp, r7
    5e40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e44:	4770      	bx	lr

00005e46 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5e46:	b480      	push	{r7}
    5e48:	b083      	sub	sp, #12
    5e4a:	af00      	add	r7, sp, #0
    5e4c:	6078      	str	r0, [r7, #4]
    5e4e:	460b      	mov	r3, r1
    5e50:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	78fa      	ldrb	r2, [r7, #3]
    5e56:	761a      	strb	r2, [r3, #24]
}
    5e58:	bf00      	nop
    5e5a:	370c      	adds	r7, #12
    5e5c:	46bd      	mov	sp, r7
    5e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e62:	4770      	bx	lr

00005e64 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5e64:	b480      	push	{r7}
    5e66:	b085      	sub	sp, #20
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
    5e6c:	460b      	mov	r3, r1
    5e6e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	7e1b      	ldrb	r3, [r3, #24]
    5e74:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5e76:	7bfa      	ldrb	r2, [r7, #15]
    5e78:	78fb      	ldrb	r3, [r7, #3]
    5e7a:	4013      	ands	r3, r2
    5e7c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5e7e:	7bfb      	ldrb	r3, [r7, #15]
}
    5e80:	4618      	mov	r0, r3
    5e82:	3714      	adds	r7, #20
    5e84:	46bd      	mov	sp, r7
    5e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e8a:	4770      	bx	lr

00005e8c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5e8c:	b480      	push	{r7}
    5e8e:	b083      	sub	sp, #12
    5e90:	af00      	add	r7, sp, #0
    5e92:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	7e1b      	ldrb	r3, [r3, #24]
    5e98:	b2db      	uxtb	r3, r3
}
    5e9a:	4618      	mov	r0, r3
    5e9c:	370c      	adds	r7, #12
    5e9e:	46bd      	mov	sp, r7
    5ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ea4:	4770      	bx	lr

00005ea6 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5ea6:	b480      	push	{r7}
    5ea8:	b083      	sub	sp, #12
    5eaa:	af00      	add	r7, sp, #0
    5eac:	6078      	str	r0, [r7, #4]
    5eae:	460b      	mov	r3, r1
    5eb0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	78fa      	ldrb	r2, [r7, #3]
    5eb6:	761a      	strb	r2, [r3, #24]
}
    5eb8:	bf00      	nop
    5eba:	370c      	adds	r7, #12
    5ebc:	46bd      	mov	sp, r7
    5ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ec2:	4770      	bx	lr

00005ec4 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    5ec4:	b480      	push	{r7}
    5ec6:	b083      	sub	sp, #12
    5ec8:	af00      	add	r7, sp, #0
    5eca:	6078      	str	r0, [r7, #4]
    5ecc:	460b      	mov	r3, r1
    5ece:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    5ed0:	78fb      	ldrb	r3, [r7, #3]
    5ed2:	f083 0301 	eor.w	r3, r3, #1
    5ed6:	b2db      	uxtb	r3, r3
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d003      	beq.n	5ee4 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	2201      	movs	r2, #1
    5ee0:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    5ee2:	e002      	b.n	5eea <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	2201      	movs	r2, #1
    5ee8:	759a      	strb	r2, [r3, #22]
}
    5eea:	bf00      	nop
    5eec:	370c      	adds	r7, #12
    5eee:	46bd      	mov	sp, r7
    5ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ef4:	4770      	bx	lr

00005ef6 <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    5ef6:	b480      	push	{r7}
    5ef8:	b083      	sub	sp, #12
    5efa:	af00      	add	r7, sp, #0
    5efc:	6078      	str	r0, [r7, #4]
    5efe:	460b      	mov	r3, r1
    5f00:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    5f02:	78fb      	ldrb	r3, [r7, #3]
    5f04:	f083 0301 	eor.w	r3, r3, #1
    5f08:	b2db      	uxtb	r3, r3
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d003      	beq.n	5f16 <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	2202      	movs	r2, #2
    5f12:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    5f14:	e002      	b.n	5f1c <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	2202      	movs	r2, #2
    5f1a:	759a      	strb	r2, [r3, #22]
}
    5f1c:	bf00      	nop
    5f1e:	370c      	adds	r7, #12
    5f20:	46bd      	mov	sp, r7
    5f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f26:	4770      	bx	lr

00005f28 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    5f28:	b480      	push	{r7}
    5f2a:	b083      	sub	sp, #12
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
    5f30:	460b      	mov	r3, r1
    5f32:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    5f34:	78fb      	ldrb	r3, [r7, #3]
    5f36:	f083 0301 	eor.w	r3, r3, #1
    5f3a:	b2db      	uxtb	r3, r3
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d003      	beq.n	5f48 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	2280      	movs	r2, #128	; 0x80
    5f44:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    5f46:	e002      	b.n	5f4e <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	2280      	movs	r2, #128	; 0x80
    5f4c:	759a      	strb	r2, [r3, #22]
}
    5f4e:	bf00      	nop
    5f50:	370c      	adds	r7, #12
    5f52:	46bd      	mov	sp, r7
    5f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f58:	4770      	bx	lr

00005f5a <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    5f5a:	b480      	push	{r7}
    5f5c:	b083      	sub	sp, #12
    5f5e:	af00      	add	r7, sp, #0
    5f60:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5f62:	687b      	ldr	r3, [r7, #4]
    5f64:	2201      	movs	r2, #1
    5f66:	759a      	strb	r2, [r3, #22]
}
    5f68:	bf00      	nop
    5f6a:	370c      	adds	r7, #12
    5f6c:	46bd      	mov	sp, r7
    5f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f72:	4770      	bx	lr

00005f74 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    5f74:	b480      	push	{r7}
    5f76:	b083      	sub	sp, #12
    5f78:	af00      	add	r7, sp, #0
    5f7a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    5f7c:	687b      	ldr	r3, [r7, #4]
    5f7e:	2201      	movs	r2, #1
    5f80:	751a      	strb	r2, [r3, #20]
}
    5f82:	bf00      	nop
    5f84:	370c      	adds	r7, #12
    5f86:	46bd      	mov	sp, r7
    5f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8c:	4770      	bx	lr

00005f8e <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    5f8e:	b480      	push	{r7}
    5f90:	b083      	sub	sp, #12
    5f92:	af00      	add	r7, sp, #0
    5f94:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	2202      	movs	r2, #2
    5f9a:	759a      	strb	r2, [r3, #22]
}
    5f9c:	bf00      	nop
    5f9e:	370c      	adds	r7, #12
    5fa0:	46bd      	mov	sp, r7
    5fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa6:	4770      	bx	lr

00005fa8 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5fa8:	b480      	push	{r7}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	2202      	movs	r2, #2
    5fb4:	751a      	strb	r2, [r3, #20]
}
    5fb6:	bf00      	nop
    5fb8:	370c      	adds	r7, #12
    5fba:	46bd      	mov	sp, r7
    5fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc0:	4770      	bx	lr

00005fc2 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5fc2:	b480      	push	{r7}
    5fc4:	b083      	sub	sp, #12
    5fc6:	af00      	add	r7, sp, #0
    5fc8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	2204      	movs	r2, #4
    5fce:	759a      	strb	r2, [r3, #22]
}
    5fd0:	bf00      	nop
    5fd2:	370c      	adds	r7, #12
    5fd4:	46bd      	mov	sp, r7
    5fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fda:	4770      	bx	lr

00005fdc <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5fdc:	b480      	push	{r7}
    5fde:	b083      	sub	sp, #12
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	2204      	movs	r2, #4
    5fe8:	751a      	strb	r2, [r3, #20]
}
    5fea:	bf00      	nop
    5fec:	370c      	adds	r7, #12
    5fee:	46bd      	mov	sp, r7
    5ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff4:	4770      	bx	lr

00005ff6 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5ff6:	b480      	push	{r7}
    5ff8:	b083      	sub	sp, #12
    5ffa:	af00      	add	r7, sp, #0
    5ffc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5ffe:	687b      	ldr	r3, [r7, #4]
    6000:	7d9b      	ldrb	r3, [r3, #22]
    6002:	b2db      	uxtb	r3, r3
}
    6004:	4618      	mov	r0, r3
    6006:	370c      	adds	r7, #12
    6008:	46bd      	mov	sp, r7
    600a:	f85d 7b04 	ldr.w	r7, [sp], #4
    600e:	4770      	bx	lr

00006010 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6010:	b580      	push	{r7, lr}
    6012:	b082      	sub	sp, #8
    6014:	af00      	add	r7, sp, #0
    6016:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	f043 0202 	orr.w	r2, r3, #2
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6024:	2103      	movs	r1, #3
    6026:	6878      	ldr	r0, [r7, #4]
    6028:	4b02      	ldr	r3, [pc, #8]	; (6034 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    602a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    602c:	bf00      	nop
    602e:	3708      	adds	r7, #8
    6030:	46bd      	mov	sp, r7
    6032:	bd80      	pop	{r7, pc}
    6034:	00005d61 	.word	0x00005d61

00006038 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6038:	b580      	push	{r7, lr}
    603a:	b082      	sub	sp, #8
    603c:	af00      	add	r7, sp, #0
    603e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	681b      	ldr	r3, [r3, #0]
    6044:	f023 0202 	bic.w	r2, r3, #2
    6048:	687b      	ldr	r3, [r7, #4]
    604a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    604c:	2103      	movs	r1, #3
    604e:	6878      	ldr	r0, [r7, #4]
    6050:	4b02      	ldr	r3, [pc, #8]	; (605c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6052:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6054:	bf00      	nop
    6056:	3708      	adds	r7, #8
    6058:	46bd      	mov	sp, r7
    605a:	bd80      	pop	{r7, pc}
    605c:	00005d61 	.word	0x00005d61

00006060 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6060:	b480      	push	{r7}
    6062:	b085      	sub	sp, #20
    6064:	af00      	add	r7, sp, #0
    6066:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	681b      	ldr	r3, [r3, #0]
    606c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    606e:	68fb      	ldr	r3, [r7, #12]
    6070:	0edb      	lsrs	r3, r3, #27
    6072:	f003 0301 	and.w	r3, r3, #1
    6076:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6078:	68fb      	ldr	r3, [r7, #12]
    607a:	2b00      	cmp	r3, #0
    607c:	bf14      	ite	ne
    607e:	2301      	movne	r3, #1
    6080:	2300      	moveq	r3, #0
    6082:	b2db      	uxtb	r3, r3
}
    6084:	4618      	mov	r0, r3
    6086:	3714      	adds	r7, #20
    6088:	46bd      	mov	sp, r7
    608a:	f85d 7b04 	ldr.w	r7, [sp], #4
    608e:	4770      	bx	lr

00006090 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6090:	b580      	push	{r7, lr}
    6092:	b084      	sub	sp, #16
    6094:	af00      	add	r7, sp, #0
    6096:	6078      	str	r0, [r7, #4]
    6098:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    609a:	2103      	movs	r1, #3
    609c:	6878      	ldr	r0, [r7, #4]
    609e:	4b07      	ldr	r3, [pc, #28]	; (60bc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    60a0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    60a8:	68fa      	ldr	r2, [r7, #12]
    60aa:	683b      	ldr	r3, [r7, #0]
    60ac:	4013      	ands	r3, r2
    60ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    60b0:	68fb      	ldr	r3, [r7, #12]
}
    60b2:	4618      	mov	r0, r3
    60b4:	3710      	adds	r7, #16
    60b6:	46bd      	mov	sp, r7
    60b8:	bd80      	pop	{r7, pc}
    60ba:	bf00      	nop
    60bc:	00005d61 	.word	0x00005d61

000060c0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	683a      	ldr	r2, [r7, #0]
    60ce:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    60d0:	2103      	movs	r1, #3
    60d2:	6878      	ldr	r0, [r7, #4]
    60d4:	4b02      	ldr	r3, [pc, #8]	; (60e0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    60d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60d8:	bf00      	nop
    60da:	3708      	adds	r7, #8
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	00005d61 	.word	0x00005d61

000060e4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b084      	sub	sp, #16
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60ec:	2103      	movs	r1, #3
    60ee:	6878      	ldr	r0, [r7, #4]
    60f0:	4b09      	ldr	r3, [pc, #36]	; (6118 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    60f2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    60fa:	68fb      	ldr	r3, [r7, #12]
    60fc:	085b      	lsrs	r3, r3, #1
    60fe:	f003 0301 	and.w	r3, r3, #1
    6102:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	2b00      	cmp	r3, #0
    6108:	bf14      	ite	ne
    610a:	2301      	movne	r3, #1
    610c:	2300      	moveq	r3, #0
    610e:	b2db      	uxtb	r3, r3
}
    6110:	4618      	mov	r0, r3
    6112:	3710      	adds	r7, #16
    6114:	46bd      	mov	sp, r7
    6116:	bd80      	pop	{r7, pc}
    6118:	00005dad 	.word	0x00005dad

0000611c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    611c:	b580      	push	{r7, lr}
    611e:	b082      	sub	sp, #8
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	f023 0202 	bic.w	r2, r3, #2
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6130:	2103      	movs	r1, #3
    6132:	6878      	ldr	r0, [r7, #4]
    6134:	4b02      	ldr	r3, [pc, #8]	; (6140 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6136:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6138:	bf00      	nop
    613a:	3708      	adds	r7, #8
    613c:	46bd      	mov	sp, r7
    613e:	bd80      	pop	{r7, pc}
    6140:	00005dad 	.word	0x00005dad

00006144 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6144:	b580      	push	{r7, lr}
    6146:	b084      	sub	sp, #16
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
    614c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    614e:	2103      	movs	r1, #3
    6150:	6878      	ldr	r0, [r7, #4]
    6152:	4b07      	ldr	r3, [pc, #28]	; (6170 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6154:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	681b      	ldr	r3, [r3, #0]
    615a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    615c:	68fa      	ldr	r2, [r7, #12]
    615e:	683b      	ldr	r3, [r7, #0]
    6160:	4013      	ands	r3, r2
    6162:	60fb      	str	r3, [r7, #12]
	return tmp;
    6164:	68fb      	ldr	r3, [r7, #12]
}
    6166:	4618      	mov	r0, r3
    6168:	3710      	adds	r7, #16
    616a:	46bd      	mov	sp, r7
    616c:	bd80      	pop	{r7, pc}
    616e:	bf00      	nop
    6170:	00005dad 	.word	0x00005dad

00006174 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6174:	b580      	push	{r7, lr}
    6176:	b082      	sub	sp, #8
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
    617c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	683a      	ldr	r2, [r7, #0]
    6182:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6184:	2103      	movs	r1, #3
    6186:	6878      	ldr	r0, [r7, #4]
    6188:	4b02      	ldr	r3, [pc, #8]	; (6194 <hri_sercomspi_write_CTRLA_reg+0x20>)
    618a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    618c:	bf00      	nop
    618e:	3708      	adds	r7, #8
    6190:	46bd      	mov	sp, r7
    6192:	bd80      	pop	{r7, pc}
    6194:	00005dad 	.word	0x00005dad

00006198 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6198:	b580      	push	{r7, lr}
    619a:	b082      	sub	sp, #8
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	685b      	ldr	r3, [r3, #4]
    61a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61ac:	2104      	movs	r1, #4
    61ae:	6878      	ldr	r0, [r7, #4]
    61b0:	4b02      	ldr	r3, [pc, #8]	; (61bc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    61b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61b4:	bf00      	nop
    61b6:	3708      	adds	r7, #8
    61b8:	46bd      	mov	sp, r7
    61ba:	bd80      	pop	{r7, pc}
    61bc:	00005d61 	.word	0x00005d61

000061c0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    61c0:	b580      	push	{r7, lr}
    61c2:	b082      	sub	sp, #8
    61c4:	af00      	add	r7, sp, #0
    61c6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	685b      	ldr	r3, [r3, #4]
    61cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61d4:	2104      	movs	r1, #4
    61d6:	6878      	ldr	r0, [r7, #4]
    61d8:	4b02      	ldr	r3, [pc, #8]	; (61e4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    61da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61dc:	bf00      	nop
    61de:	3708      	adds	r7, #8
    61e0:	46bd      	mov	sp, r7
    61e2:	bd80      	pop	{r7, pc}
    61e4:	00005d61 	.word	0x00005d61

000061e8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    61e8:	b580      	push	{r7, lr}
    61ea:	b082      	sub	sp, #8
    61ec:	af00      	add	r7, sp, #0
    61ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	685b      	ldr	r3, [r3, #4]
    61f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61fc:	2104      	movs	r1, #4
    61fe:	6878      	ldr	r0, [r7, #4]
    6200:	4b02      	ldr	r3, [pc, #8]	; (620c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6202:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6204:	bf00      	nop
    6206:	3708      	adds	r7, #8
    6208:	46bd      	mov	sp, r7
    620a:	bd80      	pop	{r7, pc}
    620c:	00005d61 	.word	0x00005d61

00006210 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6210:	b580      	push	{r7, lr}
    6212:	b082      	sub	sp, #8
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	685b      	ldr	r3, [r3, #4]
    621c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6224:	2104      	movs	r1, #4
    6226:	6878      	ldr	r0, [r7, #4]
    6228:	4b02      	ldr	r3, [pc, #8]	; (6234 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    622a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    622c:	bf00      	nop
    622e:	3708      	adds	r7, #8
    6230:	46bd      	mov	sp, r7
    6232:	bd80      	pop	{r7, pc}
    6234:	00005d61 	.word	0x00005d61

00006238 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6238:	b580      	push	{r7, lr}
    623a:	b082      	sub	sp, #8
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	685a      	ldr	r2, [r3, #4]
    6246:	683b      	ldr	r3, [r7, #0]
    6248:	041b      	lsls	r3, r3, #16
    624a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    624e:	431a      	orrs	r2, r3
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6254:	2104      	movs	r1, #4
    6256:	6878      	ldr	r0, [r7, #4]
    6258:	4b02      	ldr	r3, [pc, #8]	; (6264 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    625a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    625c:	bf00      	nop
    625e:	3708      	adds	r7, #8
    6260:	46bd      	mov	sp, r7
    6262:	bd80      	pop	{r7, pc}
    6264:	00005d61 	.word	0x00005d61

00006268 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6268:	b580      	push	{r7, lr}
    626a:	b082      	sub	sp, #8
    626c:	af00      	add	r7, sp, #0
    626e:	6078      	str	r0, [r7, #4]
    6270:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	683a      	ldr	r2, [r7, #0]
    6276:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6278:	2104      	movs	r1, #4
    627a:	6878      	ldr	r0, [r7, #4]
    627c:	4b02      	ldr	r3, [pc, #8]	; (6288 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    627e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6280:	bf00      	nop
    6282:	3708      	adds	r7, #8
    6284:	46bd      	mov	sp, r7
    6286:	bd80      	pop	{r7, pc}
    6288:	00005d61 	.word	0x00005d61

0000628c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    628c:	b580      	push	{r7, lr}
    628e:	b082      	sub	sp, #8
    6290:	af00      	add	r7, sp, #0
    6292:	6078      	str	r0, [r7, #4]
    6294:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	683a      	ldr	r2, [r7, #0]
    629a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    629c:	2117      	movs	r1, #23
    629e:	6878      	ldr	r0, [r7, #4]
    62a0:	4b02      	ldr	r3, [pc, #8]	; (62ac <hri_sercomspi_write_CTRLB_reg+0x20>)
    62a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62a4:	bf00      	nop
    62a6:	3708      	adds	r7, #8
    62a8:	46bd      	mov	sp, r7
    62aa:	bd80      	pop	{r7, pc}
    62ac:	00005dad 	.word	0x00005dad

000062b0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    62b0:	b480      	push	{r7}
    62b2:	b083      	sub	sp, #12
    62b4:	af00      	add	r7, sp, #0
    62b6:	6078      	str	r0, [r7, #4]
    62b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    62ba:	687b      	ldr	r3, [r7, #4]
    62bc:	683a      	ldr	r2, [r7, #0]
    62be:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62c0:	bf00      	nop
    62c2:	370c      	adds	r7, #12
    62c4:	46bd      	mov	sp, r7
    62c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ca:	4770      	bx	lr

000062cc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    62cc:	b480      	push	{r7}
    62ce:	b083      	sub	sp, #12
    62d0:	af00      	add	r7, sp, #0
    62d2:	6078      	str	r0, [r7, #4]
    62d4:	460b      	mov	r3, r1
    62d6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	78fa      	ldrb	r2, [r7, #3]
    62dc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62de:	bf00      	nop
    62e0:	370c      	adds	r7, #12
    62e2:	46bd      	mov	sp, r7
    62e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    62e8:	4770      	bx	lr
	...

000062ec <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    62ec:	b580      	push	{r7, lr}
    62ee:	b084      	sub	sp, #16
    62f0:	af00      	add	r7, sp, #0
    62f2:	6078      	str	r0, [r7, #4]
    62f4:	460b      	mov	r3, r1
    62f6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    62f8:	687b      	ldr	r3, [r7, #4]
    62fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    62fc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    62fe:	68fb      	ldr	r3, [r7, #12]
    6300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6304:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6306:	78fb      	ldrb	r3, [r7, #3]
    6308:	039b      	lsls	r3, r3, #14
    630a:	461a      	mov	r2, r3
    630c:	68fb      	ldr	r3, [r7, #12]
    630e:	4313      	orrs	r3, r2
    6310:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	68fa      	ldr	r2, [r7, #12]
    6316:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6318:	2104      	movs	r1, #4
    631a:	6878      	ldr	r0, [r7, #4]
    631c:	4b02      	ldr	r3, [pc, #8]	; (6328 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    631e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6320:	bf00      	nop
    6322:	3710      	adds	r7, #16
    6324:	46bd      	mov	sp, r7
    6326:	bd80      	pop	{r7, pc}
    6328:	00005d61 	.word	0x00005d61

0000632c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    632c:	b580      	push	{r7, lr}
    632e:	b082      	sub	sp, #8
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
    6334:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	683a      	ldr	r2, [r7, #0]
    633a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    633c:	2104      	movs	r1, #4
    633e:	6878      	ldr	r0, [r7, #4]
    6340:	4b02      	ldr	r3, [pc, #8]	; (634c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6342:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6344:	bf00      	nop
    6346:	3708      	adds	r7, #8
    6348:	46bd      	mov	sp, r7
    634a:	bd80      	pop	{r7, pc}
    634c:	00005d61 	.word	0x00005d61

00006350 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6350:	b580      	push	{r7, lr}
    6352:	b082      	sub	sp, #8
    6354:	af00      	add	r7, sp, #0
    6356:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6358:	2104      	movs	r1, #4
    635a:	6878      	ldr	r0, [r7, #4]
    635c:	4b03      	ldr	r3, [pc, #12]	; (636c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    635e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6364:	4618      	mov	r0, r3
    6366:	3708      	adds	r7, #8
    6368:	46bd      	mov	sp, r7
    636a:	bd80      	pop	{r7, pc}
    636c:	00005d61 	.word	0x00005d61

00006370 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6370:	b480      	push	{r7}
    6372:	b083      	sub	sp, #12
    6374:	af00      	add	r7, sp, #0
    6376:	6078      	str	r0, [r7, #4]
    6378:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	683a      	ldr	r2, [r7, #0]
    637e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6380:	bf00      	nop
    6382:	370c      	adds	r7, #12
    6384:	46bd      	mov	sp, r7
    6386:	f85d 7b04 	ldr.w	r7, [sp], #4
    638a:	4770      	bx	lr

0000638c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    638c:	b580      	push	{r7, lr}
    638e:	b082      	sub	sp, #8
    6390:	af00      	add	r7, sp, #0
    6392:	6078      	str	r0, [r7, #4]
    6394:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	683a      	ldr	r2, [r7, #0]
    639a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    639c:	2104      	movs	r1, #4
    639e:	6878      	ldr	r0, [r7, #4]
    63a0:	4b02      	ldr	r3, [pc, #8]	; (63ac <hri_sercomi2cm_write_DATA_reg+0x20>)
    63a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63a4:	bf00      	nop
    63a6:	3708      	adds	r7, #8
    63a8:	46bd      	mov	sp, r7
    63aa:	bd80      	pop	{r7, pc}
    63ac:	00005d61 	.word	0x00005d61

000063b0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    63b0:	b580      	push	{r7, lr}
    63b2:	b082      	sub	sp, #8
    63b4:	af00      	add	r7, sp, #0
    63b6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    63b8:	2104      	movs	r1, #4
    63ba:	6878      	ldr	r0, [r7, #4]
    63bc:	4b03      	ldr	r3, [pc, #12]	; (63cc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    63be:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    63c4:	4618      	mov	r0, r3
    63c6:	3708      	adds	r7, #8
    63c8:	46bd      	mov	sp, r7
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00005d61 	.word	0x00005d61

000063d0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    63d0:	b480      	push	{r7}
    63d2:	b083      	sub	sp, #12
    63d4:	af00      	add	r7, sp, #0
    63d6:	6078      	str	r0, [r7, #4]
    63d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	683a      	ldr	r2, [r7, #0]
    63de:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63e0:	bf00      	nop
    63e2:	370c      	adds	r7, #12
    63e4:	46bd      	mov	sp, r7
    63e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ea:	4770      	bx	lr

000063ec <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    63ec:	b480      	push	{r7}
    63ee:	b083      	sub	sp, #12
    63f0:	af00      	add	r7, sp, #0
    63f2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    63f4:	687b      	ldr	r3, [r7, #4]
    63f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    63f8:	4618      	mov	r0, r3
    63fa:	370c      	adds	r7, #12
    63fc:	46bd      	mov	sp, r7
    63fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6402:	4770      	bx	lr

00006404 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6404:	b480      	push	{r7}
    6406:	b083      	sub	sp, #12
    6408:	af00      	add	r7, sp, #0
    640a:	6078      	str	r0, [r7, #4]
    640c:	460b      	mov	r3, r1
    640e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	78fa      	ldrb	r2, [r7, #3]
    6414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6418:	bf00      	nop
    641a:	370c      	adds	r7, #12
    641c:	46bd      	mov	sp, r7
    641e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6422:	4770      	bx	lr

00006424 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6424:	b480      	push	{r7}
    6426:	b083      	sub	sp, #12
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
    642c:	460b      	mov	r3, r1
    642e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	887a      	ldrh	r2, [r7, #2]
    6434:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6436:	bf00      	nop
    6438:	370c      	adds	r7, #12
    643a:	46bd      	mov	sp, r7
    643c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6440:	4770      	bx	lr
	...

00006444 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6444:	b580      	push	{r7, lr}
    6446:	b082      	sub	sp, #8
    6448:	af00      	add	r7, sp, #0
    644a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    644c:	2104      	movs	r1, #4
    644e:	6878      	ldr	r0, [r7, #4]
    6450:	4b06      	ldr	r3, [pc, #24]	; (646c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6452:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	8b5b      	ldrh	r3, [r3, #26]
    6458:	b29b      	uxth	r3, r3
    645a:	091b      	lsrs	r3, r3, #4
    645c:	b29b      	uxth	r3, r3
    645e:	f003 0303 	and.w	r3, r3, #3
    6462:	b29b      	uxth	r3, r3
}
    6464:	4618      	mov	r0, r3
    6466:	3708      	adds	r7, #8
    6468:	46bd      	mov	sp, r7
    646a:	bd80      	pop	{r7, pc}
    646c:	00005d61 	.word	0x00005d61

00006470 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6470:	b580      	push	{r7, lr}
    6472:	b082      	sub	sp, #8
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6478:	2104      	movs	r1, #4
    647a:	6878      	ldr	r0, [r7, #4]
    647c:	4b04      	ldr	r3, [pc, #16]	; (6490 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    647e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	8b5b      	ldrh	r3, [r3, #26]
    6484:	b29b      	uxth	r3, r3
}
    6486:	4618      	mov	r0, r3
    6488:	3708      	adds	r7, #8
    648a:	46bd      	mov	sp, r7
    648c:	bd80      	pop	{r7, pc}
    648e:	bf00      	nop
    6490:	00005d61 	.word	0x00005d61

00006494 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6494:	b580      	push	{r7, lr}
    6496:	b082      	sub	sp, #8
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	460b      	mov	r3, r1
    649e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	887a      	ldrh	r2, [r7, #2]
    64a4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64a6:	2104      	movs	r1, #4
    64a8:	6878      	ldr	r0, [r7, #4]
    64aa:	4b03      	ldr	r3, [pc, #12]	; (64b8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    64ac:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64ae:	bf00      	nop
    64b0:	3708      	adds	r7, #8
    64b2:	46bd      	mov	sp, r7
    64b4:	bd80      	pop	{r7, pc}
    64b6:	bf00      	nop
    64b8:	00005d61 	.word	0x00005d61

000064bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    64bc:	b4b0      	push	{r4, r5, r7}
    64be:	b08d      	sub	sp, #52	; 0x34
    64c0:	af00      	add	r7, sp, #0
    64c2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    64c4:	4b13      	ldr	r3, [pc, #76]	; (6514 <_sercom_get_hardware_index+0x58>)
    64c6:	f107 040c 	add.w	r4, r7, #12
    64ca:	461d      	mov	r5, r3
    64cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    64ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    64d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    64d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    64d8:	2300      	movs	r3, #0
    64da:	62fb      	str	r3, [r7, #44]	; 0x2c
    64dc:	e010      	b.n	6500 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    64de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64e0:	009b      	lsls	r3, r3, #2
    64e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    64e6:	4413      	add	r3, r2
    64e8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    64ec:	461a      	mov	r2, r3
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	429a      	cmp	r2, r3
    64f2:	d102      	bne.n	64fa <_sercom_get_hardware_index+0x3e>
			return i;
    64f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64f6:	b2db      	uxtb	r3, r3
    64f8:	e006      	b.n	6508 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    64fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64fc:	3301      	adds	r3, #1
    64fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    6500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6502:	2b07      	cmp	r3, #7
    6504:	d9eb      	bls.n	64de <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6506:	2300      	movs	r3, #0
}
    6508:	4618      	mov	r0, r3
    650a:	3734      	adds	r7, #52	; 0x34
    650c:	46bd      	mov	sp, r7
    650e:	bcb0      	pop	{r4, r5, r7}
    6510:	4770      	bx	lr
    6512:	bf00      	nop
    6514:	0000ef28 	.word	0x0000ef28

00006518 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6518:	b480      	push	{r7}
    651a:	b083      	sub	sp, #12
    651c:	af00      	add	r7, sp, #0
    651e:	6078      	str	r0, [r7, #4]
    6520:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    6528:	d102      	bne.n	6530 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    652a:	4a0b      	ldr	r2, [pc, #44]	; (6558 <_sercom_init_irq_param+0x40>)
    652c:	683b      	ldr	r3, [r7, #0]
    652e:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	4a0a      	ldr	r2, [pc, #40]	; (655c <_sercom_init_irq_param+0x44>)
    6534:	4293      	cmp	r3, r2
    6536:	d102      	bne.n	653e <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6538:	4a09      	ldr	r2, [pc, #36]	; (6560 <_sercom_init_irq_param+0x48>)
    653a:	683b      	ldr	r3, [r7, #0]
    653c:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	4a08      	ldr	r2, [pc, #32]	; (6564 <_sercom_init_irq_param+0x4c>)
    6542:	4293      	cmp	r3, r2
    6544:	d102      	bne.n	654c <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    6546:	4a08      	ldr	r2, [pc, #32]	; (6568 <_sercom_init_irq_param+0x50>)
    6548:	683b      	ldr	r3, [r7, #0]
    654a:	6013      	str	r3, [r2, #0]
	}
}
    654c:	bf00      	nop
    654e:	370c      	adds	r7, #12
    6550:	46bd      	mov	sp, r7
    6552:	f85d 7b04 	ldr.w	r7, [sp], #4
    6556:	4770      	bx	lr
    6558:	200006f4 	.word	0x200006f4
    655c:	43000400 	.word	0x43000400
    6560:	200006f8 	.word	0x200006f8
    6564:	43000c00 	.word	0x43000c00
    6568:	200006fc 	.word	0x200006fc

0000656c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    656c:	b580      	push	{r7, lr}
    656e:	b084      	sub	sp, #16
    6570:	af00      	add	r7, sp, #0
    6572:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6574:	6878      	ldr	r0, [r7, #4]
    6576:	4b13      	ldr	r3, [pc, #76]	; (65c4 <_get_i2cm_index+0x58>)
    6578:	4798      	blx	r3
    657a:	4603      	mov	r3, r0
    657c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    657e:	2300      	movs	r3, #0
    6580:	73fb      	strb	r3, [r7, #15]
    6582:	e010      	b.n	65a6 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6584:	7bfa      	ldrb	r2, [r7, #15]
    6586:	4910      	ldr	r1, [pc, #64]	; (65c8 <_get_i2cm_index+0x5c>)
    6588:	4613      	mov	r3, r2
    658a:	005b      	lsls	r3, r3, #1
    658c:	4413      	add	r3, r2
    658e:	00db      	lsls	r3, r3, #3
    6590:	440b      	add	r3, r1
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	7bba      	ldrb	r2, [r7, #14]
    6596:	429a      	cmp	r2, r3
    6598:	d102      	bne.n	65a0 <_get_i2cm_index+0x34>
			return i;
    659a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    659e:	e00d      	b.n	65bc <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    65a0:	7bfb      	ldrb	r3, [r7, #15]
    65a2:	3301      	adds	r3, #1
    65a4:	73fb      	strb	r3, [r7, #15]
    65a6:	7bfb      	ldrb	r3, [r7, #15]
    65a8:	2b01      	cmp	r3, #1
    65aa:	d9eb      	bls.n	6584 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    65ac:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    65b0:	4906      	ldr	r1, [pc, #24]	; (65cc <_get_i2cm_index+0x60>)
    65b2:	2000      	movs	r0, #0
    65b4:	4b06      	ldr	r3, [pc, #24]	; (65d0 <_get_i2cm_index+0x64>)
    65b6:	4798      	blx	r3
	return -1;
    65b8:	f04f 33ff 	mov.w	r3, #4294967295
}
    65bc:	4618      	mov	r0, r3
    65be:	3710      	adds	r7, #16
    65c0:	46bd      	mov	sp, r7
    65c2:	bd80      	pop	{r7, pc}
    65c4:	000064bd 	.word	0x000064bd
    65c8:	20000018 	.word	0x20000018
    65cc:	0000ef0c 	.word	0x0000ef0c
    65d0:	00003931 	.word	0x00003931

000065d4 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    65d4:	b580      	push	{r7, lr}
    65d6:	b082      	sub	sp, #8
    65d8:	af00      	add	r7, sp, #0
    65da:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    65dc:	2103      	movs	r1, #3
    65de:	6878      	ldr	r0, [r7, #4]
    65e0:	4b02      	ldr	r3, [pc, #8]	; (65ec <_sercom_i2c_send_stop+0x18>)
    65e2:	4798      	blx	r3
}
    65e4:	bf00      	nop
    65e6:	3708      	adds	r7, #8
    65e8:	46bd      	mov	sp, r7
    65ea:	bd80      	pop	{r7, pc}
    65ec:	00006239 	.word	0x00006239

000065f0 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    65f0:	b590      	push	{r4, r7, lr}
    65f2:	b087      	sub	sp, #28
    65f4:	af00      	add	r7, sp, #0
    65f6:	60f8      	str	r0, [r7, #12]
    65f8:	60b9      	str	r1, [r7, #8]
    65fa:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    65fc:	68f8      	ldr	r0, [r7, #12]
    65fe:	4b7d      	ldr	r3, [pc, #500]	; (67f4 <_sercom_i2c_sync_analyse_flags+0x204>)
    6600:	4798      	blx	r3
    6602:	4603      	mov	r3, r0
    6604:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6606:	68f8      	ldr	r0, [r7, #12]
    6608:	4b7b      	ldr	r3, [pc, #492]	; (67f8 <_sercom_i2c_sync_analyse_flags+0x208>)
    660a:	4798      	blx	r3
    660c:	4603      	mov	r3, r0
    660e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6610:	68bb      	ldr	r3, [r7, #8]
    6612:	f003 0301 	and.w	r3, r3, #1
    6616:	2b00      	cmp	r3, #0
    6618:	f000 8095 	beq.w	6746 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    661c:	8a7b      	ldrh	r3, [r7, #18]
    661e:	f003 0302 	and.w	r3, r3, #2
    6622:	2b00      	cmp	r3, #0
    6624:	d01d      	beq.n	6662 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6626:	68f8      	ldr	r0, [r7, #12]
    6628:	4b74      	ldr	r3, [pc, #464]	; (67fc <_sercom_i2c_sync_analyse_flags+0x20c>)
    662a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	885b      	ldrh	r3, [r3, #2]
    6630:	b29b      	uxth	r3, r3
    6632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6636:	b29a      	uxth	r2, r3
    6638:	687b      	ldr	r3, [r7, #4]
    663a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    663c:	687b      	ldr	r3, [r7, #4]
    663e:	885b      	ldrh	r3, [r3, #2]
    6640:	b29b      	uxth	r3, r3
    6642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6646:	b29a      	uxth	r2, r3
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    664c:	8a7b      	ldrh	r3, [r7, #18]
    664e:	f003 0301 	and.w	r3, r3, #1
    6652:	2b00      	cmp	r3, #0
    6654:	d002      	beq.n	665c <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6656:	f06f 0304 	mvn.w	r3, #4
    665a:	e0c6      	b.n	67ea <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    665c:	f06f 0303 	mvn.w	r3, #3
    6660:	e0c3      	b.n	67ea <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6662:	8a7b      	ldrh	r3, [r7, #18]
    6664:	f003 0304 	and.w	r3, r3, #4
    6668:	2b00      	cmp	r3, #0
    666a:	d01f      	beq.n	66ac <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	685b      	ldr	r3, [r3, #4]
    6670:	2b00      	cmp	r3, #0
    6672:	dd07      	ble.n	6684 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6674:	687b      	ldr	r3, [r7, #4]
    6676:	885b      	ldrh	r3, [r3, #2]
    6678:	b29b      	uxth	r3, r3
    667a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    667e:	b29a      	uxth	r2, r3
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6684:	687b      	ldr	r3, [r7, #4]
    6686:	885b      	ldrh	r3, [r3, #2]
    6688:	b29b      	uxth	r3, r3
    668a:	b21b      	sxth	r3, r3
    668c:	2b00      	cmp	r3, #0
    668e:	da02      	bge.n	6696 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6690:	68f8      	ldr	r0, [r7, #12]
    6692:	4b5b      	ldr	r3, [pc, #364]	; (6800 <_sercom_i2c_sync_analyse_flags+0x210>)
    6694:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	885b      	ldrh	r3, [r3, #2]
    669a:	b29b      	uxth	r3, r3
    669c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    66a0:	b29a      	uxth	r2, r3
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    66a6:	f06f 0301 	mvn.w	r3, #1
    66aa:	e09e      	b.n	67ea <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	885b      	ldrh	r3, [r3, #2]
    66b0:	b29b      	uxth	r3, r3
    66b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    66b6:	2b00      	cmp	r3, #0
    66b8:	d01c      	beq.n	66f4 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	881b      	ldrh	r3, [r3, #0]
    66be:	121b      	asrs	r3, r3, #8
    66c0:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    66c2:	f003 0406 	and.w	r4, r3, #6
    66c6:	68f8      	ldr	r0, [r7, #12]
    66c8:	4b4e      	ldr	r3, [pc, #312]	; (6804 <_sercom_i2c_sync_analyse_flags+0x214>)
    66ca:	4798      	blx	r3
    66cc:	4603      	mov	r3, r0
    66ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    66d2:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    66d4:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    66d8:	4619      	mov	r1, r3
    66da:	68f8      	ldr	r0, [r7, #12]
    66dc:	4b4a      	ldr	r3, [pc, #296]	; (6808 <_sercom_i2c_sync_analyse_flags+0x218>)
    66de:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	885b      	ldrh	r3, [r3, #2]
    66e4:	b29b      	uxth	r3, r3
    66e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    66ea:	b29a      	uxth	r2, r3
    66ec:	687b      	ldr	r3, [r7, #4]
    66ee:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    66f0:	2300      	movs	r3, #0
    66f2:	e07a      	b.n	67ea <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	685b      	ldr	r3, [r3, #4]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d111      	bne.n	6720 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	885b      	ldrh	r3, [r3, #2]
    6700:	b29b      	uxth	r3, r3
    6702:	b21b      	sxth	r3, r3
    6704:	2b00      	cmp	r3, #0
    6706:	da02      	bge.n	670e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6708:	68f8      	ldr	r0, [r7, #12]
    670a:	4b3d      	ldr	r3, [pc, #244]	; (6800 <_sercom_i2c_sync_analyse_flags+0x210>)
    670c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    670e:	687b      	ldr	r3, [r7, #4]
    6710:	885b      	ldrh	r3, [r3, #2]
    6712:	b29b      	uxth	r3, r3
    6714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6718:	b29a      	uxth	r2, r3
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	805a      	strh	r2, [r3, #2]
    671e:	e010      	b.n	6742 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	689b      	ldr	r3, [r3, #8]
    6724:	781b      	ldrb	r3, [r3, #0]
    6726:	4619      	mov	r1, r3
    6728:	68f8      	ldr	r0, [r7, #12]
    672a:	4b38      	ldr	r3, [pc, #224]	; (680c <_sercom_i2c_sync_analyse_flags+0x21c>)
    672c:	4798      	blx	r3
				msg->buffer++;
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	689b      	ldr	r3, [r3, #8]
    6732:	1c5a      	adds	r2, r3, #1
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	609a      	str	r2, [r3, #8]
				msg->len--;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	685b      	ldr	r3, [r3, #4]
    673c:	1e5a      	subs	r2, r3, #1
    673e:	687b      	ldr	r3, [r7, #4]
    6740:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6742:	2300      	movs	r3, #0
    6744:	e051      	b.n	67ea <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6746:	68bb      	ldr	r3, [r7, #8]
    6748:	f003 0302 	and.w	r3, r3, #2
    674c:	2b00      	cmp	r3, #0
    674e:	d04b      	beq.n	67e8 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	685b      	ldr	r3, [r3, #4]
    6754:	2b00      	cmp	r3, #0
    6756:	d041      	beq.n	67dc <_sercom_i2c_sync_analyse_flags+0x1ec>
    6758:	8a7b      	ldrh	r3, [r7, #18]
    675a:	f003 0304 	and.w	r3, r3, #4
    675e:	2b00      	cmp	r3, #0
    6760:	d13c      	bne.n	67dc <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	685b      	ldr	r3, [r3, #4]
    6766:	1e5a      	subs	r2, r3, #1
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	685b      	ldr	r3, [r3, #4]
    6770:	2b00      	cmp	r3, #0
    6772:	d102      	bne.n	677a <_sercom_i2c_sync_analyse_flags+0x18a>
    6774:	697b      	ldr	r3, [r7, #20]
    6776:	2b00      	cmp	r3, #0
    6778:	d006      	beq.n	6788 <_sercom_i2c_sync_analyse_flags+0x198>
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	685b      	ldr	r3, [r3, #4]
    677e:	2b01      	cmp	r3, #1
    6780:	d105      	bne.n	678e <_sercom_i2c_sync_analyse_flags+0x19e>
    6782:	697b      	ldr	r3, [r7, #20]
    6784:	2b00      	cmp	r3, #0
    6786:	d002      	beq.n	678e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6788:	68f8      	ldr	r0, [r7, #12]
    678a:	4b21      	ldr	r3, [pc, #132]	; (6810 <_sercom_i2c_sync_analyse_flags+0x220>)
    678c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	685b      	ldr	r3, [r3, #4]
    6792:	2b00      	cmp	r3, #0
    6794:	d113      	bne.n	67be <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	885b      	ldrh	r3, [r3, #2]
    679a:	b29b      	uxth	r3, r3
    679c:	b21b      	sxth	r3, r3
    679e:	2b00      	cmp	r3, #0
    67a0:	da05      	bge.n	67ae <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    67a2:	68f8      	ldr	r0, [r7, #12]
    67a4:	4b1b      	ldr	r3, [pc, #108]	; (6814 <_sercom_i2c_sync_analyse_flags+0x224>)
    67a6:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    67a8:	68f8      	ldr	r0, [r7, #12]
    67aa:	4b15      	ldr	r3, [pc, #84]	; (6800 <_sercom_i2c_sync_analyse_flags+0x210>)
    67ac:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	885b      	ldrh	r3, [r3, #2]
    67b2:	b29b      	uxth	r3, r3
    67b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    67b8:	b29a      	uxth	r2, r3
    67ba:	687b      	ldr	r3, [r7, #4]
    67bc:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	689c      	ldr	r4, [r3, #8]
    67c2:	1c62      	adds	r2, r4, #1
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	609a      	str	r2, [r3, #8]
    67c8:	68f8      	ldr	r0, [r7, #12]
    67ca:	4b13      	ldr	r3, [pc, #76]	; (6818 <_sercom_i2c_sync_analyse_flags+0x228>)
    67cc:	4798      	blx	r3
    67ce:	4603      	mov	r3, r0
    67d0:	b2db      	uxtb	r3, r3
    67d2:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    67d4:	68f8      	ldr	r0, [r7, #12]
    67d6:	4b11      	ldr	r3, [pc, #68]	; (681c <_sercom_i2c_sync_analyse_flags+0x22c>)
    67d8:	4798      	blx	r3
    67da:	e005      	b.n	67e8 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    67dc:	68f8      	ldr	r0, [r7, #12]
    67de:	4b0f      	ldr	r3, [pc, #60]	; (681c <_sercom_i2c_sync_analyse_flags+0x22c>)
    67e0:	4798      	blx	r3
			return I2C_NACK;
    67e2:	f06f 0301 	mvn.w	r3, #1
    67e6:	e000      	b.n	67ea <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    67e8:	2300      	movs	r3, #0
}
    67ea:	4618      	mov	r0, r3
    67ec:	371c      	adds	r7, #28
    67ee:	46bd      	mov	sp, r7
    67f0:	bd90      	pop	{r4, r7, pc}
    67f2:	bf00      	nop
    67f4:	00006061 	.word	0x00006061
    67f8:	00006471 	.word	0x00006471
    67fc:	00005df9 	.word	0x00005df9
    6800:	000065d5 	.word	0x000065d5
    6804:	00006351 	.word	0x00006351
    6808:	0000632d 	.word	0x0000632d
    680c:	0000638d 	.word	0x0000638d
    6810:	000061e9 	.word	0x000061e9
    6814:	000061c1 	.word	0x000061c1
    6818:	000063b1 	.word	0x000063b1
    681c:	00005e13 	.word	0x00005e13

00006820 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6820:	b580      	push	{r7, lr}
    6822:	b086      	sub	sp, #24
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	691b      	ldr	r3, [r3, #16]
    682c:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    682e:	6938      	ldr	r0, [r7, #16]
    6830:	4b37      	ldr	r3, [pc, #220]	; (6910 <_sercom_i2c_m_irq_handler+0xf0>)
    6832:	4798      	blx	r3
    6834:	4603      	mov	r3, r0
    6836:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6838:	2300      	movs	r3, #0
    683a:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	2b00      	cmp	r3, #0
    6840:	bf14      	ite	ne
    6842:	2301      	movne	r3, #1
    6844:	2300      	moveq	r3, #0
    6846:	b2db      	uxtb	r3, r3
    6848:	f240 422a 	movw	r2, #1066	; 0x42a
    684c:	4931      	ldr	r1, [pc, #196]	; (6914 <_sercom_i2c_m_irq_handler+0xf4>)
    684e:	4618      	mov	r0, r3
    6850:	4b31      	ldr	r3, [pc, #196]	; (6918 <_sercom_i2c_m_irq_handler+0xf8>)
    6852:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	691b      	ldr	r3, [r3, #16]
    6858:	2b00      	cmp	r3, #0
    685a:	bf14      	ite	ne
    685c:	2301      	movne	r3, #1
    685e:	2300      	moveq	r3, #0
    6860:	b2db      	uxtb	r3, r3
    6862:	f240 422b 	movw	r2, #1067	; 0x42b
    6866:	492b      	ldr	r1, [pc, #172]	; (6914 <_sercom_i2c_m_irq_handler+0xf4>)
    6868:	4618      	mov	r0, r3
    686a:	4b2b      	ldr	r3, [pc, #172]	; (6918 <_sercom_i2c_m_irq_handler+0xf8>)
    686c:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    686e:	bf00      	nop
    6870:	68fb      	ldr	r3, [r7, #12]
    6872:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6876:	2b00      	cmp	r3, #0
    6878:	d126      	bne.n	68c8 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    687a:	687b      	ldr	r3, [r7, #4]
    687c:	461a      	mov	r2, r3
    687e:	68f9      	ldr	r1, [r7, #12]
    6880:	6938      	ldr	r0, [r7, #16]
    6882:	4b26      	ldr	r3, [pc, #152]	; (691c <_sercom_i2c_m_irq_handler+0xfc>)
    6884:	4798      	blx	r3
    6886:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6888:	697b      	ldr	r3, [r7, #20]
    688a:	2b00      	cmp	r3, #0
    688c:	d11b      	bne.n	68c6 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    688e:	68fb      	ldr	r3, [r7, #12]
    6890:	f003 0301 	and.w	r3, r3, #1
    6894:	2b00      	cmp	r3, #0
    6896:	d008      	beq.n	68aa <_sercom_i2c_m_irq_handler+0x8a>
    6898:	687b      	ldr	r3, [r7, #4]
    689a:	699b      	ldr	r3, [r3, #24]
    689c:	2b00      	cmp	r3, #0
    689e:	d004      	beq.n	68aa <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	699b      	ldr	r3, [r3, #24]
    68a4:	6878      	ldr	r0, [r7, #4]
    68a6:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    68a8:	e02e      	b.n	6908 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    68aa:	68fb      	ldr	r3, [r7, #12]
    68ac:	f003 0302 	and.w	r3, r3, #2
    68b0:	2b00      	cmp	r3, #0
    68b2:	d029      	beq.n	6908 <_sercom_i2c_m_irq_handler+0xe8>
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	69db      	ldr	r3, [r3, #28]
    68b8:	2b00      	cmp	r3, #0
    68ba:	d025      	beq.n	6908 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	69db      	ldr	r3, [r3, #28]
    68c0:	6878      	ldr	r0, [r7, #4]
    68c2:	4798      	blx	r3
		return;
    68c4:	e020      	b.n	6908 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    68c6:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	885b      	ldrh	r3, [r3, #2]
    68cc:	b29b      	uxth	r3, r3
    68ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    68d2:	b29a      	uxth	r2, r3
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	695b      	ldr	r3, [r3, #20]
    68dc:	2b00      	cmp	r3, #0
    68de:	d014      	beq.n	690a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    68e0:	697b      	ldr	r3, [r7, #20]
    68e2:	2b00      	cmp	r3, #0
    68e4:	d005      	beq.n	68f2 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	695b      	ldr	r3, [r3, #20]
    68ea:	6979      	ldr	r1, [r7, #20]
    68ec:	6878      	ldr	r0, [r7, #4]
    68ee:	4798      	blx	r3
    68f0:	e005      	b.n	68fe <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    68f2:	687b      	ldr	r3, [r7, #4]
    68f4:	695b      	ldr	r3, [r3, #20]
    68f6:	f06f 0104 	mvn.w	r1, #4
    68fa:	6878      	ldr	r0, [r7, #4]
    68fc:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    68fe:	2180      	movs	r1, #128	; 0x80
    6900:	6938      	ldr	r0, [r7, #16]
    6902:	4b07      	ldr	r3, [pc, #28]	; (6920 <_sercom_i2c_m_irq_handler+0x100>)
    6904:	4798      	blx	r3
    6906:	e000      	b.n	690a <_sercom_i2c_m_irq_handler+0xea>
		return;
    6908:	bf00      	nop
	}
}
    690a:	3718      	adds	r7, #24
    690c:	46bd      	mov	sp, r7
    690e:	bd80      	pop	{r7, pc}
    6910:	00005e2d 	.word	0x00005e2d
    6914:	0000ef0c 	.word	0x0000ef0c
    6918:	00003931 	.word	0x00003931
    691c:	000065f1 	.word	0x000065f1
    6920:	00005e47 	.word	0x00005e47

00006924 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    6924:	b580      	push	{r7, lr}
    6926:	b082      	sub	sp, #8
    6928:	af00      	add	r7, sp, #0
    692a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    692c:	687b      	ldr	r3, [r7, #4]
    692e:	2b00      	cmp	r3, #0
    6930:	bf14      	ite	ne
    6932:	2301      	movne	r3, #1
    6934:	2300      	moveq	r3, #0
    6936:	b2db      	uxtb	r3, r3
    6938:	f44f 628a 	mov.w	r2, #1104	; 0x450
    693c:	4906      	ldr	r1, [pc, #24]	; (6958 <_i2c_m_async_enable+0x34>)
    693e:	4618      	mov	r0, r3
    6940:	4b06      	ldr	r3, [pc, #24]	; (695c <_i2c_m_async_enable+0x38>)
    6942:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	691b      	ldr	r3, [r3, #16]
    6948:	4618      	mov	r0, r3
    694a:	4b05      	ldr	r3, [pc, #20]	; (6960 <_i2c_m_async_enable+0x3c>)
    694c:	4798      	blx	r3
    694e:	4603      	mov	r3, r0
}
    6950:	4618      	mov	r0, r3
    6952:	3708      	adds	r7, #8
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	0000ef0c 	.word	0x0000ef0c
    695c:	00003931 	.word	0x00003931
    6960:	00006cb5 	.word	0x00006cb5

00006964 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6964:	b580      	push	{r7, lr}
    6966:	b082      	sub	sp, #8
    6968:	af00      	add	r7, sp, #0
    696a:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    696c:	6878      	ldr	r0, [r7, #4]
    696e:	4b05      	ldr	r3, [pc, #20]	; (6984 <_sercom_get_irq_num+0x20>)
    6970:	4798      	blx	r3
    6972:	4603      	mov	r3, r0
    6974:	009b      	lsls	r3, r3, #2
    6976:	b2db      	uxtb	r3, r3
    6978:	332e      	adds	r3, #46	; 0x2e
    697a:	b2db      	uxtb	r3, r3
}
    697c:	4618      	mov	r0, r3
    697e:	3708      	adds	r7, #8
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	000064bd 	.word	0x000064bd

00006988 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6988:	b580      	push	{r7, lr}
    698a:	b086      	sub	sp, #24
    698c:	af00      	add	r7, sp, #0
    698e:	6078      	str	r0, [r7, #4]
    6990:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	2b00      	cmp	r3, #0
    6996:	bf14      	ite	ne
    6998:	2301      	movne	r3, #1
    699a:	2300      	moveq	r3, #0
    699c:	b2db      	uxtb	r3, r3
    699e:	f240 429e 	movw	r2, #1182	; 0x49e
    69a2:	491d      	ldr	r1, [pc, #116]	; (6a18 <_i2c_m_async_init+0x90>)
    69a4:	4618      	mov	r0, r3
    69a6:	4b1d      	ldr	r3, [pc, #116]	; (6a1c <_i2c_m_async_init+0x94>)
    69a8:	4798      	blx	r3

	i2c_dev->hw = hw;
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	683a      	ldr	r2, [r7, #0]
    69ae:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    69b0:	687b      	ldr	r3, [r7, #4]
    69b2:	6839      	ldr	r1, [r7, #0]
    69b4:	4618      	mov	r0, r3
    69b6:	4b1a      	ldr	r3, [pc, #104]	; (6a20 <_i2c_m_async_init+0x98>)
    69b8:	4798      	blx	r3
    69ba:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    69bc:	68fb      	ldr	r3, [r7, #12]
    69be:	2b00      	cmp	r3, #0
    69c0:	d001      	beq.n	69c6 <_i2c_m_async_init+0x3e>
		return init_status;
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	e024      	b.n	6a10 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    69c6:	6879      	ldr	r1, [r7, #4]
    69c8:	6838      	ldr	r0, [r7, #0]
    69ca:	4b16      	ldr	r3, [pc, #88]	; (6a24 <_i2c_m_async_init+0x9c>)
    69cc:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    69ce:	6838      	ldr	r0, [r7, #0]
    69d0:	4b15      	ldr	r3, [pc, #84]	; (6a28 <_i2c_m_async_init+0xa0>)
    69d2:	4798      	blx	r3
    69d4:	4603      	mov	r3, r0
    69d6:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    69d8:	2300      	movs	r3, #0
    69da:	613b      	str	r3, [r7, #16]
    69dc:	e014      	b.n	6a08 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    69de:	7dfb      	ldrb	r3, [r7, #23]
    69e0:	b21b      	sxth	r3, r3
    69e2:	4618      	mov	r0, r3
    69e4:	4b11      	ldr	r3, [pc, #68]	; (6a2c <_i2c_m_async_init+0xa4>)
    69e6:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    69e8:	7dfb      	ldrb	r3, [r7, #23]
    69ea:	b21b      	sxth	r3, r3
    69ec:	4618      	mov	r0, r3
    69ee:	4b10      	ldr	r3, [pc, #64]	; (6a30 <_i2c_m_async_init+0xa8>)
    69f0:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    69f2:	7dfb      	ldrb	r3, [r7, #23]
    69f4:	b21b      	sxth	r3, r3
    69f6:	4618      	mov	r0, r3
    69f8:	4b0e      	ldr	r3, [pc, #56]	; (6a34 <_i2c_m_async_init+0xac>)
    69fa:	4798      	blx	r3
		irq++;
    69fc:	7dfb      	ldrb	r3, [r7, #23]
    69fe:	3301      	adds	r3, #1
    6a00:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6a02:	693b      	ldr	r3, [r7, #16]
    6a04:	3301      	adds	r3, #1
    6a06:	613b      	str	r3, [r7, #16]
    6a08:	693b      	ldr	r3, [r7, #16]
    6a0a:	2b03      	cmp	r3, #3
    6a0c:	d9e7      	bls.n	69de <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6a0e:	2300      	movs	r3, #0
}
    6a10:	4618      	mov	r0, r3
    6a12:	3718      	adds	r7, #24
    6a14:	46bd      	mov	sp, r7
    6a16:	bd80      	pop	{r7, pc}
    6a18:	0000ef0c 	.word	0x0000ef0c
    6a1c:	00003931 	.word	0x00003931
    6a20:	00006d41 	.word	0x00006d41
    6a24:	00006519 	.word	0x00006519
    6a28:	00006965 	.word	0x00006965
    6a2c:	00005ce1 	.word	0x00005ce1
    6a30:	00005d25 	.word	0x00005d25
    6a34:	00005ca5 	.word	0x00005ca5

00006a38 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6a38:	b590      	push	{r4, r7, lr}
    6a3a:	b087      	sub	sp, #28
    6a3c:	af00      	add	r7, sp, #0
    6a3e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	691b      	ldr	r3, [r3, #16]
    6a44:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6a4a:	6978      	ldr	r0, [r7, #20]
    6a4c:	4b33      	ldr	r3, [pc, #204]	; (6b1c <_sercom_i2c_send_address+0xe4>)
    6a4e:	4798      	blx	r3
    6a50:	4603      	mov	r3, r0
    6a52:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	2b00      	cmp	r3, #0
    6a58:	bf14      	ite	ne
    6a5a:	2301      	movne	r3, #1
    6a5c:	2300      	moveq	r3, #0
    6a5e:	b2db      	uxtb	r3, r3
    6a60:	f240 42cc 	movw	r2, #1228	; 0x4cc
    6a64:	492e      	ldr	r1, [pc, #184]	; (6b20 <_sercom_i2c_send_address+0xe8>)
    6a66:	4618      	mov	r0, r3
    6a68:	4b2e      	ldr	r3, [pc, #184]	; (6b24 <_sercom_i2c_send_address+0xec>)
    6a6a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6a6c:	693b      	ldr	r3, [r7, #16]
    6a6e:	685b      	ldr	r3, [r3, #4]
    6a70:	2b01      	cmp	r3, #1
    6a72:	d106      	bne.n	6a82 <_sercom_i2c_send_address+0x4a>
    6a74:	68fb      	ldr	r3, [r7, #12]
    6a76:	2b00      	cmp	r3, #0
    6a78:	d003      	beq.n	6a82 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6a7a:	6978      	ldr	r0, [r7, #20]
    6a7c:	4b2a      	ldr	r3, [pc, #168]	; (6b28 <_sercom_i2c_send_address+0xf0>)
    6a7e:	4798      	blx	r3
    6a80:	e002      	b.n	6a88 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6a82:	6978      	ldr	r0, [r7, #20]
    6a84:	4b29      	ldr	r3, [pc, #164]	; (6b2c <_sercom_i2c_send_address+0xf4>)
    6a86:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6a88:	693b      	ldr	r3, [r7, #16]
    6a8a:	881b      	ldrh	r3, [r3, #0]
    6a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6a90:	2b00      	cmp	r3, #0
    6a92:	d022      	beq.n	6ada <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6a94:	693b      	ldr	r3, [r7, #16]
    6a96:	885b      	ldrh	r3, [r3, #2]
    6a98:	b29b      	uxth	r3, r3
    6a9a:	f003 0301 	and.w	r3, r3, #1
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d007      	beq.n	6ab2 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6aa2:	693b      	ldr	r3, [r7, #16]
    6aa4:	885b      	ldrh	r3, [r3, #2]
    6aa6:	b29b      	uxth	r3, r3
    6aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6aac:	b29a      	uxth	r2, r3
    6aae:	693b      	ldr	r3, [r7, #16]
    6ab0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6ab2:	693b      	ldr	r3, [r7, #16]
    6ab4:	881b      	ldrh	r3, [r3, #0]
    6ab6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6ab8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6abc:	401c      	ands	r4, r3
    6abe:	6978      	ldr	r0, [r7, #20]
    6ac0:	4b1b      	ldr	r3, [pc, #108]	; (6b30 <_sercom_i2c_send_address+0xf8>)
    6ac2:	4798      	blx	r3
    6ac4:	4603      	mov	r3, r0
    6ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6aca:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6ad0:	4619      	mov	r1, r3
    6ad2:	6978      	ldr	r0, [r7, #20]
    6ad4:	4b17      	ldr	r3, [pc, #92]	; (6b34 <_sercom_i2c_send_address+0xfc>)
    6ad6:	4798      	blx	r3
    6ad8:	e01a      	b.n	6b10 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6ada:	693b      	ldr	r3, [r7, #16]
    6adc:	881b      	ldrh	r3, [r3, #0]
    6ade:	005b      	lsls	r3, r3, #1
    6ae0:	b2db      	uxtb	r3, r3
    6ae2:	693a      	ldr	r2, [r7, #16]
    6ae4:	8852      	ldrh	r2, [r2, #2]
    6ae6:	b292      	uxth	r2, r2
    6ae8:	f002 0201 	and.w	r2, r2, #1
    6aec:	2a00      	cmp	r2, #0
    6aee:	bf14      	ite	ne
    6af0:	2201      	movne	r2, #1
    6af2:	2200      	moveq	r2, #0
    6af4:	b2d2      	uxtb	r2, r2
    6af6:	4313      	orrs	r3, r2
    6af8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6afa:	6978      	ldr	r0, [r7, #20]
    6afc:	4b0c      	ldr	r3, [pc, #48]	; (6b30 <_sercom_i2c_send_address+0xf8>)
    6afe:	4798      	blx	r3
    6b00:	4603      	mov	r3, r0
    6b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6b06:	4323      	orrs	r3, r4
    6b08:	4619      	mov	r1, r3
    6b0a:	6978      	ldr	r0, [r7, #20]
    6b0c:	4b09      	ldr	r3, [pc, #36]	; (6b34 <_sercom_i2c_send_address+0xfc>)
    6b0e:	4798      	blx	r3
	}

	return ERR_NONE;
    6b10:	2300      	movs	r3, #0
}
    6b12:	4618      	mov	r0, r3
    6b14:	371c      	adds	r7, #28
    6b16:	46bd      	mov	sp, r7
    6b18:	bd90      	pop	{r4, r7, pc}
    6b1a:	bf00      	nop
    6b1c:	00006061 	.word	0x00006061
    6b20:	0000ef0c 	.word	0x0000ef0c
    6b24:	00003931 	.word	0x00003931
    6b28:	000061e9 	.word	0x000061e9
    6b2c:	00006211 	.word	0x00006211
    6b30:	00006351 	.word	0x00006351
    6b34:	0000632d 	.word	0x0000632d

00006b38 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b084      	sub	sp, #16
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
    6b40:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	2b00      	cmp	r3, #0
    6b46:	bf14      	ite	ne
    6b48:	2301      	movne	r3, #1
    6b4a:	2300      	moveq	r3, #0
    6b4c:	b2db      	uxtb	r3, r3
    6b4e:	f240 42f4 	movw	r2, #1268	; 0x4f4
    6b52:	492a      	ldr	r1, [pc, #168]	; (6bfc <_i2c_m_async_transfer+0xc4>)
    6b54:	4618      	mov	r0, r3
    6b56:	4b2a      	ldr	r3, [pc, #168]	; (6c00 <_i2c_m_async_transfer+0xc8>)
    6b58:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	691b      	ldr	r3, [r3, #16]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	bf14      	ite	ne
    6b62:	2301      	movne	r3, #1
    6b64:	2300      	moveq	r3, #0
    6b66:	b2db      	uxtb	r3, r3
    6b68:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6b6c:	4923      	ldr	r1, [pc, #140]	; (6bfc <_i2c_m_async_transfer+0xc4>)
    6b6e:	4618      	mov	r0, r3
    6b70:	4b23      	ldr	r3, [pc, #140]	; (6c00 <_i2c_m_async_transfer+0xc8>)
    6b72:	4798      	blx	r3
	ASSERT(msg);
    6b74:	683b      	ldr	r3, [r7, #0]
    6b76:	2b00      	cmp	r3, #0
    6b78:	bf14      	ite	ne
    6b7a:	2301      	movne	r3, #1
    6b7c:	2300      	moveq	r3, #0
    6b7e:	b2db      	uxtb	r3, r3
    6b80:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6b84:	491d      	ldr	r1, [pc, #116]	; (6bfc <_i2c_m_async_transfer+0xc4>)
    6b86:	4618      	mov	r0, r3
    6b88:	4b1d      	ldr	r3, [pc, #116]	; (6c00 <_i2c_m_async_transfer+0xc8>)
    6b8a:	4798      	blx	r3

	if (msg->len == 0) {
    6b8c:	683b      	ldr	r3, [r7, #0]
    6b8e:	685b      	ldr	r3, [r3, #4]
    6b90:	2b00      	cmp	r3, #0
    6b92:	d101      	bne.n	6b98 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6b94:	2300      	movs	r3, #0
    6b96:	e02d      	b.n	6bf4 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6b98:	687b      	ldr	r3, [r7, #4]
    6b9a:	885b      	ldrh	r3, [r3, #2]
    6b9c:	b29b      	uxth	r3, r3
    6b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d002      	beq.n	6bac <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6ba6:	f06f 0303 	mvn.w	r3, #3
    6baa:	e023      	b.n	6bf4 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6bac:	683b      	ldr	r3, [r7, #0]
    6bae:	885b      	ldrh	r3, [r3, #2]
    6bb0:	b29b      	uxth	r3, r3
    6bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6bb6:	b29a      	uxth	r2, r3
    6bb8:	683b      	ldr	r3, [r7, #0]
    6bba:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	683a      	ldr	r2, [r7, #0]
    6bc0:	ca07      	ldmia	r2, {r0, r1, r2}
    6bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	691b      	ldr	r3, [r3, #16]
    6bca:	4618      	mov	r0, r3
    6bcc:	4b0d      	ldr	r3, [pc, #52]	; (6c04 <_i2c_m_async_transfer+0xcc>)
    6bce:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6bd0:	6878      	ldr	r0, [r7, #4]
    6bd2:	4b0d      	ldr	r3, [pc, #52]	; (6c08 <_i2c_m_async_transfer+0xd0>)
    6bd4:	4798      	blx	r3
    6bd6:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6bd8:	68fb      	ldr	r3, [r7, #12]
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d009      	beq.n	6bf2 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	885b      	ldrh	r3, [r3, #2]
    6be2:	b29b      	uxth	r3, r3
    6be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6be8:	b29a      	uxth	r2, r3
    6bea:	687b      	ldr	r3, [r7, #4]
    6bec:	805a      	strh	r2, [r3, #2]

		return ret;
    6bee:	68fb      	ldr	r3, [r7, #12]
    6bf0:	e000      	b.n	6bf4 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6bf2:	2300      	movs	r3, #0
}
    6bf4:	4618      	mov	r0, r3
    6bf6:	3710      	adds	r7, #16
    6bf8:	46bd      	mov	sp, r7
    6bfa:	bd80      	pop	{r7, pc}
    6bfc:	0000ef0c 	.word	0x0000ef0c
    6c00:	00003931 	.word	0x00003931
    6c04:	00006199 	.word	0x00006199
    6c08:	00006a39 	.word	0x00006a39

00006c0c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6c0c:	b480      	push	{r7}
    6c0e:	b085      	sub	sp, #20
    6c10:	af00      	add	r7, sp, #0
    6c12:	60f8      	str	r0, [r7, #12]
    6c14:	460b      	mov	r3, r1
    6c16:	607a      	str	r2, [r7, #4]
    6c18:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6c1a:	7afb      	ldrb	r3, [r7, #11]
    6c1c:	2b01      	cmp	r3, #1
    6c1e:	d008      	beq.n	6c32 <_i2c_m_async_register_callback+0x26>
    6c20:	2b02      	cmp	r3, #2
    6c22:	d00a      	beq.n	6c3a <_i2c_m_async_register_callback+0x2e>
    6c24:	2b00      	cmp	r3, #0
    6c26:	d000      	beq.n	6c2a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6c28:	e00b      	b.n	6c42 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6c2a:	68fb      	ldr	r3, [r7, #12]
    6c2c:	687a      	ldr	r2, [r7, #4]
    6c2e:	615a      	str	r2, [r3, #20]
		break;
    6c30:	e007      	b.n	6c42 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6c32:	68fb      	ldr	r3, [r7, #12]
    6c34:	687a      	ldr	r2, [r7, #4]
    6c36:	619a      	str	r2, [r3, #24]
		break;
    6c38:	e003      	b.n	6c42 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6c3a:	68fb      	ldr	r3, [r7, #12]
    6c3c:	687a      	ldr	r2, [r7, #4]
    6c3e:	61da      	str	r2, [r3, #28]
		break;
    6c40:	bf00      	nop
	}

	return ERR_NONE;
    6c42:	2300      	movs	r3, #0
}
    6c44:	4618      	mov	r0, r3
    6c46:	3714      	adds	r7, #20
    6c48:	46bd      	mov	sp, r7
    6c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c4e:	4770      	bx	lr

00006c50 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    6c50:	b580      	push	{r7, lr}
    6c52:	b082      	sub	sp, #8
    6c54:	af00      	add	r7, sp, #0
    6c56:	6078      	str	r0, [r7, #4]
    6c58:	460b      	mov	r3, r1
    6c5a:	70fb      	strb	r3, [r7, #3]
    6c5c:	4613      	mov	r3, r2
    6c5e:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    6c60:	78fb      	ldrb	r3, [r7, #3]
    6c62:	2b01      	cmp	r3, #1
    6c64:	d002      	beq.n	6c6c <_i2c_m_async_set_irq_state+0x1c>
    6c66:	78fb      	ldrb	r3, [r7, #3]
    6c68:	2b02      	cmp	r3, #2
    6c6a:	d10e      	bne.n	6c8a <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	691b      	ldr	r3, [r3, #16]
    6c70:	78ba      	ldrb	r2, [r7, #2]
    6c72:	4611      	mov	r1, r2
    6c74:	4618      	mov	r0, r3
    6c76:	4b0c      	ldr	r3, [pc, #48]	; (6ca8 <_i2c_m_async_set_irq_state+0x58>)
    6c78:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	691b      	ldr	r3, [r3, #16]
    6c7e:	78ba      	ldrb	r2, [r7, #2]
    6c80:	4611      	mov	r1, r2
    6c82:	4618      	mov	r0, r3
    6c84:	4b09      	ldr	r3, [pc, #36]	; (6cac <_i2c_m_async_set_irq_state+0x5c>)
    6c86:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    6c88:	e009      	b.n	6c9e <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    6c8a:	78fb      	ldrb	r3, [r7, #3]
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d106      	bne.n	6c9e <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	691b      	ldr	r3, [r3, #16]
    6c94:	78ba      	ldrb	r2, [r7, #2]
    6c96:	4611      	mov	r1, r2
    6c98:	4618      	mov	r0, r3
    6c9a:	4b05      	ldr	r3, [pc, #20]	; (6cb0 <_i2c_m_async_set_irq_state+0x60>)
    6c9c:	4798      	blx	r3
}
    6c9e:	bf00      	nop
    6ca0:	3708      	adds	r7, #8
    6ca2:	46bd      	mov	sp, r7
    6ca4:	bd80      	pop	{r7, pc}
    6ca6:	bf00      	nop
    6ca8:	00005ef7 	.word	0x00005ef7
    6cac:	00005ec5 	.word	0x00005ec5
    6cb0:	00005f29 	.word	0x00005f29

00006cb4 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b084      	sub	sp, #16
    6cb8:	af00      	add	r7, sp, #0
    6cba:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6cc0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6cc2:	2304      	movs	r3, #4
    6cc4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	2b00      	cmp	r3, #0
    6cca:	bf14      	ite	ne
    6ccc:	2301      	movne	r3, #1
    6cce:	2300      	moveq	r3, #0
    6cd0:	b2db      	uxtb	r3, r3
    6cd2:	f240 6241 	movw	r2, #1601	; 0x641
    6cd6:	4915      	ldr	r1, [pc, #84]	; (6d2c <_i2c_m_enable_implementation+0x78>)
    6cd8:	4618      	mov	r0, r3
    6cda:	4b15      	ldr	r3, [pc, #84]	; (6d30 <_i2c_m_enable_implementation+0x7c>)
    6cdc:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6cde:	6878      	ldr	r0, [r7, #4]
    6ce0:	4b14      	ldr	r3, [pc, #80]	; (6d34 <_i2c_m_enable_implementation+0x80>)
    6ce2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6ce4:	e016      	b.n	6d14 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6ce6:	68fb      	ldr	r3, [r7, #12]
    6ce8:	3b01      	subs	r3, #1
    6cea:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6cec:	68fb      	ldr	r3, [r7, #12]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	dc10      	bgt.n	6d14 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6cf2:	68bb      	ldr	r3, [r7, #8]
    6cf4:	3b01      	subs	r3, #1
    6cf6:	60bb      	str	r3, [r7, #8]
    6cf8:	68bb      	ldr	r3, [r7, #8]
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	d007      	beq.n	6d0e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6d02:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6d04:	2110      	movs	r1, #16
    6d06:	6878      	ldr	r0, [r7, #4]
    6d08:	4b0b      	ldr	r3, [pc, #44]	; (6d38 <_i2c_m_enable_implementation+0x84>)
    6d0a:	4798      	blx	r3
    6d0c:	e002      	b.n	6d14 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6d0e:	f06f 0305 	mvn.w	r3, #5
    6d12:	e006      	b.n	6d22 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6d14:	6878      	ldr	r0, [r7, #4]
    6d16:	4b09      	ldr	r3, [pc, #36]	; (6d3c <_i2c_m_enable_implementation+0x88>)
    6d18:	4798      	blx	r3
    6d1a:	4603      	mov	r3, r0
    6d1c:	2b01      	cmp	r3, #1
    6d1e:	d1e2      	bne.n	6ce6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6d20:	2300      	movs	r3, #0
}
    6d22:	4618      	mov	r0, r3
    6d24:	3710      	adds	r7, #16
    6d26:	46bd      	mov	sp, r7
    6d28:	bd80      	pop	{r7, pc}
    6d2a:	bf00      	nop
    6d2c:	0000ef0c 	.word	0x0000ef0c
    6d30:	00003931 	.word	0x00003931
    6d34:	00006011 	.word	0x00006011
    6d38:	00006495 	.word	0x00006495
    6d3c:	00006445 	.word	0x00006445

00006d40 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6d40:	b580      	push	{r7, lr}
    6d42:	b084      	sub	sp, #16
    6d44:	af00      	add	r7, sp, #0
    6d46:	6078      	str	r0, [r7, #4]
    6d48:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6d4a:	6838      	ldr	r0, [r7, #0]
    6d4c:	4b42      	ldr	r3, [pc, #264]	; (6e58 <_i2c_m_sync_init_impl+0x118>)
    6d4e:	4798      	blx	r3
    6d50:	4603      	mov	r3, r0
    6d52:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6d54:	2101      	movs	r1, #1
    6d56:	6838      	ldr	r0, [r7, #0]
    6d58:	4b40      	ldr	r3, [pc, #256]	; (6e5c <_i2c_m_sync_init_impl+0x11c>)
    6d5a:	4798      	blx	r3
    6d5c:	4603      	mov	r3, r0
    6d5e:	f083 0301 	eor.w	r3, r3, #1
    6d62:	b2db      	uxtb	r3, r3
    6d64:	2b00      	cmp	r3, #0
    6d66:	d020      	beq.n	6daa <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6d68:	7bfa      	ldrb	r2, [r7, #15]
    6d6a:	493d      	ldr	r1, [pc, #244]	; (6e60 <_i2c_m_sync_init_impl+0x120>)
    6d6c:	4613      	mov	r3, r2
    6d6e:	005b      	lsls	r3, r3, #1
    6d70:	4413      	add	r3, r2
    6d72:	00db      	lsls	r3, r3, #3
    6d74:	440b      	add	r3, r1
    6d76:	3304      	adds	r3, #4
    6d78:	681b      	ldr	r3, [r3, #0]
    6d7a:	f003 031c 	and.w	r3, r3, #28
    6d7e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6d80:	2102      	movs	r1, #2
    6d82:	6838      	ldr	r0, [r7, #0]
    6d84:	4b37      	ldr	r3, [pc, #220]	; (6e64 <_i2c_m_sync_init_impl+0x124>)
    6d86:	4798      	blx	r3
    6d88:	4603      	mov	r3, r0
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d006      	beq.n	6d9c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6d8e:	6838      	ldr	r0, [r7, #0]
    6d90:	4b35      	ldr	r3, [pc, #212]	; (6e68 <_i2c_m_sync_init_impl+0x128>)
    6d92:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6d94:	2102      	movs	r1, #2
    6d96:	6838      	ldr	r0, [r7, #0]
    6d98:	4b34      	ldr	r3, [pc, #208]	; (6e6c <_i2c_m_sync_init_impl+0x12c>)
    6d9a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6d9c:	68bb      	ldr	r3, [r7, #8]
    6d9e:	f043 0301 	orr.w	r3, r3, #1
    6da2:	4619      	mov	r1, r3
    6da4:	6838      	ldr	r0, [r7, #0]
    6da6:	4b32      	ldr	r3, [pc, #200]	; (6e70 <_i2c_m_sync_init_impl+0x130>)
    6da8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6daa:	2101      	movs	r1, #1
    6dac:	6838      	ldr	r0, [r7, #0]
    6dae:	4b2f      	ldr	r3, [pc, #188]	; (6e6c <_i2c_m_sync_init_impl+0x12c>)
    6db0:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6db2:	7bfa      	ldrb	r2, [r7, #15]
    6db4:	492a      	ldr	r1, [pc, #168]	; (6e60 <_i2c_m_sync_init_impl+0x120>)
    6db6:	4613      	mov	r3, r2
    6db8:	005b      	lsls	r3, r3, #1
    6dba:	4413      	add	r3, r2
    6dbc:	00db      	lsls	r3, r3, #3
    6dbe:	440b      	add	r3, r1
    6dc0:	3304      	adds	r3, #4
    6dc2:	681b      	ldr	r3, [r3, #0]
    6dc4:	4619      	mov	r1, r3
    6dc6:	6838      	ldr	r0, [r7, #0]
    6dc8:	4b29      	ldr	r3, [pc, #164]	; (6e70 <_i2c_m_sync_init_impl+0x130>)
    6dca:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6dcc:	7bfa      	ldrb	r2, [r7, #15]
    6dce:	4924      	ldr	r1, [pc, #144]	; (6e60 <_i2c_m_sync_init_impl+0x120>)
    6dd0:	4613      	mov	r3, r2
    6dd2:	005b      	lsls	r3, r3, #1
    6dd4:	4413      	add	r3, r2
    6dd6:	00db      	lsls	r3, r3, #3
    6dd8:	440b      	add	r3, r1
    6dda:	3308      	adds	r3, #8
    6ddc:	681b      	ldr	r3, [r3, #0]
    6dde:	4619      	mov	r1, r3
    6de0:	6838      	ldr	r0, [r7, #0]
    6de2:	4b24      	ldr	r3, [pc, #144]	; (6e74 <_i2c_m_sync_init_impl+0x134>)
    6de4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6de6:	7bfa      	ldrb	r2, [r7, #15]
    6de8:	491d      	ldr	r1, [pc, #116]	; (6e60 <_i2c_m_sync_init_impl+0x120>)
    6dea:	4613      	mov	r3, r2
    6dec:	005b      	lsls	r3, r3, #1
    6dee:	4413      	add	r3, r2
    6df0:	00db      	lsls	r3, r3, #3
    6df2:	440b      	add	r3, r1
    6df4:	330c      	adds	r3, #12
    6df6:	681b      	ldr	r3, [r3, #0]
    6df8:	4619      	mov	r1, r3
    6dfa:	6838      	ldr	r0, [r7, #0]
    6dfc:	4b1e      	ldr	r3, [pc, #120]	; (6e78 <_i2c_m_sync_init_impl+0x138>)
    6dfe:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6e00:	7bfa      	ldrb	r2, [r7, #15]
    6e02:	4917      	ldr	r1, [pc, #92]	; (6e60 <_i2c_m_sync_init_impl+0x120>)
    6e04:	4613      	mov	r3, r2
    6e06:	005b      	lsls	r3, r3, #1
    6e08:	4413      	add	r3, r2
    6e0a:	00db      	lsls	r3, r3, #3
    6e0c:	440b      	add	r3, r1
    6e0e:	3304      	adds	r3, #4
    6e10:	681b      	ldr	r3, [r3, #0]
    6e12:	0e1b      	lsrs	r3, r3, #24
    6e14:	b29b      	uxth	r3, r3
    6e16:	f003 0303 	and.w	r3, r3, #3
    6e1a:	b29a      	uxth	r2, r3
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	899b      	ldrh	r3, [r3, #12]
    6e24:	2b01      	cmp	r3, #1
    6e26:	bf8c      	ite	hi
    6e28:	2301      	movhi	r3, #1
    6e2a:	2300      	movls	r3, #0
    6e2c:	b2db      	uxtb	r3, r3
    6e2e:	4619      	mov	r1, r3
    6e30:	6838      	ldr	r0, [r7, #0]
    6e32:	4b12      	ldr	r3, [pc, #72]	; (6e7c <_i2c_m_sync_init_impl+0x13c>)
    6e34:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6e36:	7bfa      	ldrb	r2, [r7, #15]
    6e38:	4909      	ldr	r1, [pc, #36]	; (6e60 <_i2c_m_sync_init_impl+0x120>)
    6e3a:	4613      	mov	r3, r2
    6e3c:	005b      	lsls	r3, r3, #1
    6e3e:	4413      	add	r3, r2
    6e40:	00db      	lsls	r3, r3, #3
    6e42:	440b      	add	r3, r1
    6e44:	3312      	adds	r3, #18
    6e46:	881a      	ldrh	r2, [r3, #0]
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6e4c:	2300      	movs	r3, #0
}
    6e4e:	4618      	mov	r0, r3
    6e50:	3710      	adds	r7, #16
    6e52:	46bd      	mov	sp, r7
    6e54:	bd80      	pop	{r7, pc}
    6e56:	bf00      	nop
    6e58:	0000656d 	.word	0x0000656d
    6e5c:	00005d85 	.word	0x00005d85
    6e60:	20000018 	.word	0x20000018
    6e64:	00006091 	.word	0x00006091
    6e68:	00006039 	.word	0x00006039
    6e6c:	00005d61 	.word	0x00005d61
    6e70:	000060c1 	.word	0x000060c1
    6e74:	00006269 	.word	0x00006269
    6e78:	000062b1 	.word	0x000062b1
    6e7c:	000062ed 	.word	0x000062ed

00006e80 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b082      	sub	sp, #8
    6e84:	af00      	add	r7, sp, #0
    6e86:	6078      	str	r0, [r7, #4]
    6e88:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d004      	beq.n	6e9a <_spi_load_regs_master+0x1a>
    6e90:	683b      	ldr	r3, [r7, #0]
    6e92:	2b00      	cmp	r3, #0
    6e94:	d001      	beq.n	6e9a <_spi_load_regs_master+0x1a>
    6e96:	2301      	movs	r3, #1
    6e98:	e000      	b.n	6e9c <_spi_load_regs_master+0x1c>
    6e9a:	2300      	movs	r3, #0
    6e9c:	f003 0301 	and.w	r3, r3, #1
    6ea0:	b2db      	uxtb	r3, r3
    6ea2:	f640 1245 	movw	r2, #2373	; 0x945
    6ea6:	4915      	ldr	r1, [pc, #84]	; (6efc <_spi_load_regs_master+0x7c>)
    6ea8:	4618      	mov	r0, r3
    6eaa:	4b15      	ldr	r3, [pc, #84]	; (6f00 <_spi_load_regs_master+0x80>)
    6eac:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6eae:	683b      	ldr	r3, [r7, #0]
    6eb0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6eb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6eb6:	f023 0301 	bic.w	r3, r3, #1
    6eba:	4619      	mov	r1, r3
    6ebc:	6878      	ldr	r0, [r7, #4]
    6ebe:	4b11      	ldr	r3, [pc, #68]	; (6f04 <_spi_load_regs_master+0x84>)
    6ec0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6ec2:	683b      	ldr	r3, [r7, #0]
    6ec4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6ec6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6eca:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6ed2:	4619      	mov	r1, r3
    6ed4:	6878      	ldr	r0, [r7, #4]
    6ed6:	4b0c      	ldr	r3, [pc, #48]	; (6f08 <_spi_load_regs_master+0x88>)
    6ed8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6eda:	683b      	ldr	r3, [r7, #0]
    6edc:	7b1b      	ldrb	r3, [r3, #12]
    6ede:	4619      	mov	r1, r3
    6ee0:	6878      	ldr	r0, [r7, #4]
    6ee2:	4b0a      	ldr	r3, [pc, #40]	; (6f0c <_spi_load_regs_master+0x8c>)
    6ee4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6ee6:	683b      	ldr	r3, [r7, #0]
    6ee8:	7b5b      	ldrb	r3, [r3, #13]
    6eea:	4619      	mov	r1, r3
    6eec:	6878      	ldr	r0, [r7, #4]
    6eee:	4b08      	ldr	r3, [pc, #32]	; (6f10 <_spi_load_regs_master+0x90>)
    6ef0:	4798      	blx	r3
}
    6ef2:	bf00      	nop
    6ef4:	3708      	adds	r7, #8
    6ef6:	46bd      	mov	sp, r7
    6ef8:	bd80      	pop	{r7, pc}
    6efa:	bf00      	nop
    6efc:	0000ef0c 	.word	0x0000ef0c
    6f00:	00003931 	.word	0x00003931
    6f04:	00006175 	.word	0x00006175
    6f08:	0000628d 	.word	0x0000628d
    6f0c:	000062cd 	.word	0x000062cd
    6f10:	00006405 	.word	0x00006405

00006f14 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6f14:	b580      	push	{r7, lr}
    6f16:	b082      	sub	sp, #8
    6f18:	af00      	add	r7, sp, #0
    6f1a:	6078      	str	r0, [r7, #4]
    6f1c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	2b00      	cmp	r3, #0
    6f22:	d004      	beq.n	6f2e <_spi_load_regs_slave+0x1a>
    6f24:	683b      	ldr	r3, [r7, #0]
    6f26:	2b00      	cmp	r3, #0
    6f28:	d001      	beq.n	6f2e <_spi_load_regs_slave+0x1a>
    6f2a:	2301      	movs	r3, #1
    6f2c:	e000      	b.n	6f30 <_spi_load_regs_slave+0x1c>
    6f2e:	2300      	movs	r3, #0
    6f30:	f003 0301 	and.w	r3, r3, #1
    6f34:	b2db      	uxtb	r3, r3
    6f36:	f640 1259 	movw	r2, #2393	; 0x959
    6f3a:	491a      	ldr	r1, [pc, #104]	; (6fa4 <_spi_load_regs_slave+0x90>)
    6f3c:	4618      	mov	r0, r3
    6f3e:	4b1a      	ldr	r3, [pc, #104]	; (6fa8 <_spi_load_regs_slave+0x94>)
    6f40:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6f42:	683b      	ldr	r3, [r7, #0]
    6f44:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6f46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6f4a:	f023 0301 	bic.w	r3, r3, #1
    6f4e:	4619      	mov	r1, r3
    6f50:	6878      	ldr	r0, [r7, #4]
    6f52:	4b16      	ldr	r3, [pc, #88]	; (6fac <_spi_load_regs_slave+0x98>)
    6f54:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6f56:	683b      	ldr	r3, [r7, #0]
    6f58:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6f5a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6f5e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6f66:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6f6a:	4619      	mov	r1, r3
    6f6c:	6878      	ldr	r0, [r7, #4]
    6f6e:	4b10      	ldr	r3, [pc, #64]	; (6fb0 <_spi_load_regs_slave+0x9c>)
    6f70:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6f72:	683b      	ldr	r3, [r7, #0]
    6f74:	689b      	ldr	r3, [r3, #8]
    6f76:	4619      	mov	r1, r3
    6f78:	6878      	ldr	r0, [r7, #4]
    6f7a:	4b0e      	ldr	r3, [pc, #56]	; (6fb4 <_spi_load_regs_slave+0xa0>)
    6f7c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6f7e:	683b      	ldr	r3, [r7, #0]
    6f80:	7b5b      	ldrb	r3, [r3, #13]
    6f82:	4619      	mov	r1, r3
    6f84:	6878      	ldr	r0, [r7, #4]
    6f86:	4b0c      	ldr	r3, [pc, #48]	; (6fb8 <_spi_load_regs_slave+0xa4>)
    6f88:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6f8a:	bf00      	nop
    6f8c:	f04f 31ff 	mov.w	r1, #4294967295
    6f90:	6878      	ldr	r0, [r7, #4]
    6f92:	4b0a      	ldr	r3, [pc, #40]	; (6fbc <_spi_load_regs_slave+0xa8>)
    6f94:	4798      	blx	r3
    6f96:	4603      	mov	r3, r0
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d1f7      	bne.n	6f8c <_spi_load_regs_slave+0x78>
		;
}
    6f9c:	bf00      	nop
    6f9e:	3708      	adds	r7, #8
    6fa0:	46bd      	mov	sp, r7
    6fa2:	bd80      	pop	{r7, pc}
    6fa4:	0000ef0c 	.word	0x0000ef0c
    6fa8:	00003931 	.word	0x00003931
    6fac:	00006175 	.word	0x00006175
    6fb0:	0000628d 	.word	0x0000628d
    6fb4:	00006371 	.word	0x00006371
    6fb8:	00006405 	.word	0x00006405
    6fbc:	00005dd1 	.word	0x00005dd1

00006fc0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6fc0:	b580      	push	{r7, lr}
    6fc2:	b084      	sub	sp, #16
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6fc8:	687b      	ldr	r3, [r7, #4]
    6fca:	4618      	mov	r0, r3
    6fcc:	4b11      	ldr	r3, [pc, #68]	; (7014 <_spi_get_regs+0x54>)
    6fce:	4798      	blx	r3
    6fd0:	4603      	mov	r3, r0
    6fd2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6fd4:	2300      	movs	r3, #0
    6fd6:	73fb      	strb	r3, [r7, #15]
    6fd8:	e014      	b.n	7004 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6fda:	7bfa      	ldrb	r2, [r7, #15]
    6fdc:	490e      	ldr	r1, [pc, #56]	; (7018 <_spi_get_regs+0x58>)
    6fde:	4613      	mov	r3, r2
    6fe0:	011b      	lsls	r3, r3, #4
    6fe2:	4413      	add	r3, r2
    6fe4:	440b      	add	r3, r1
    6fe6:	3310      	adds	r3, #16
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	7bba      	ldrb	r2, [r7, #14]
    6fec:	429a      	cmp	r2, r3
    6fee:	d106      	bne.n	6ffe <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6ff0:	7bfa      	ldrb	r2, [r7, #15]
    6ff2:	4613      	mov	r3, r2
    6ff4:	011b      	lsls	r3, r3, #4
    6ff6:	4413      	add	r3, r2
    6ff8:	4a07      	ldr	r2, [pc, #28]	; (7018 <_spi_get_regs+0x58>)
    6ffa:	4413      	add	r3, r2
    6ffc:	e006      	b.n	700c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6ffe:	7bfb      	ldrb	r3, [r7, #15]
    7000:	3301      	adds	r3, #1
    7002:	73fb      	strb	r3, [r7, #15]
    7004:	7bfb      	ldrb	r3, [r7, #15]
    7006:	2b02      	cmp	r3, #2
    7008:	d9e7      	bls.n	6fda <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    700a:	2300      	movs	r3, #0
}
    700c:	4618      	mov	r0, r3
    700e:	3710      	adds	r7, #16
    7010:	46bd      	mov	sp, r7
    7012:	bd80      	pop	{r7, pc}
    7014:	000064bd 	.word	0x000064bd
    7018:	0000ef48 	.word	0x0000ef48

0000701c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    701c:	b580      	push	{r7, lr}
    701e:	b084      	sub	sp, #16
    7020:	af00      	add	r7, sp, #0
    7022:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	681b      	ldr	r3, [r3, #0]
    7028:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    702a:	68f8      	ldr	r0, [r7, #12]
    702c:	4b21      	ldr	r3, [pc, #132]	; (70b4 <_spi_handler+0x98>)
    702e:	4798      	blx	r3
    7030:	4603      	mov	r3, r0
    7032:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    7034:	68f8      	ldr	r0, [r7, #12]
    7036:	4b20      	ldr	r3, [pc, #128]	; (70b8 <_spi_handler+0x9c>)
    7038:	4798      	blx	r3
    703a:	4603      	mov	r3, r0
    703c:	461a      	mov	r2, r3
    703e:	7afb      	ldrb	r3, [r7, #11]
    7040:	4013      	ands	r3, r2
    7042:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    7044:	7afb      	ldrb	r3, [r7, #11]
    7046:	f003 0301 	and.w	r3, r3, #1
    704a:	2b00      	cmp	r3, #0
    704c:	d004      	beq.n	7058 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	689b      	ldr	r3, [r3, #8]
    7052:	6878      	ldr	r0, [r7, #4]
    7054:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    7056:	e029      	b.n	70ac <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    7058:	7afb      	ldrb	r3, [r7, #11]
    705a:	f003 0304 	and.w	r3, r3, #4
    705e:	2b00      	cmp	r3, #0
    7060:	d004      	beq.n	706c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	68db      	ldr	r3, [r3, #12]
    7066:	6878      	ldr	r0, [r7, #4]
    7068:	4798      	blx	r3
}
    706a:	e01f      	b.n	70ac <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    706c:	7afb      	ldrb	r3, [r7, #11]
    706e:	f003 0302 	and.w	r3, r3, #2
    7072:	2b00      	cmp	r3, #0
    7074:	d008      	beq.n	7088 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    7076:	2102      	movs	r1, #2
    7078:	68f8      	ldr	r0, [r7, #12]
    707a:	4b10      	ldr	r3, [pc, #64]	; (70bc <_spi_handler+0xa0>)
    707c:	4798      	blx	r3
		dev->callbacks.complete(dev);
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	691b      	ldr	r3, [r3, #16]
    7082:	6878      	ldr	r0, [r7, #4]
    7084:	4798      	blx	r3
}
    7086:	e011      	b.n	70ac <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    7088:	f997 300b 	ldrsb.w	r3, [r7, #11]
    708c:	2b00      	cmp	r3, #0
    708e:	da0d      	bge.n	70ac <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    7090:	2104      	movs	r1, #4
    7092:	68f8      	ldr	r0, [r7, #12]
    7094:	4b0a      	ldr	r3, [pc, #40]	; (70c0 <_spi_handler+0xa4>)
    7096:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7098:	2180      	movs	r1, #128	; 0x80
    709a:	68f8      	ldr	r0, [r7, #12]
    709c:	4b07      	ldr	r3, [pc, #28]	; (70bc <_spi_handler+0xa0>)
    709e:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	695b      	ldr	r3, [r3, #20]
    70a4:	f06f 0112 	mvn.w	r1, #18
    70a8:	6878      	ldr	r0, [r7, #4]
    70aa:	4798      	blx	r3
}
    70ac:	bf00      	nop
    70ae:	3710      	adds	r7, #16
    70b0:	46bd      	mov	sp, r7
    70b2:	bd80      	pop	{r7, pc}
    70b4:	00005e8d 	.word	0x00005e8d
    70b8:	00005ff7 	.word	0x00005ff7
    70bc:	00005ea7 	.word	0x00005ea7
    70c0:	00006425 	.word	0x00006425

000070c4 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    70c4:	b580      	push	{r7, lr}
    70c6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    70c8:	4b03      	ldr	r3, [pc, #12]	; (70d8 <SERCOM4_0_Handler+0x14>)
    70ca:	681b      	ldr	r3, [r3, #0]
    70cc:	4618      	mov	r0, r3
    70ce:	4b03      	ldr	r3, [pc, #12]	; (70dc <SERCOM4_0_Handler+0x18>)
    70d0:	4798      	blx	r3
}
    70d2:	bf00      	nop
    70d4:	bd80      	pop	{r7, pc}
    70d6:	bf00      	nop
    70d8:	200006f4 	.word	0x200006f4
    70dc:	0000701d 	.word	0x0000701d

000070e0 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    70e0:	b580      	push	{r7, lr}
    70e2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    70e4:	4b03      	ldr	r3, [pc, #12]	; (70f4 <SERCOM4_1_Handler+0x14>)
    70e6:	681b      	ldr	r3, [r3, #0]
    70e8:	4618      	mov	r0, r3
    70ea:	4b03      	ldr	r3, [pc, #12]	; (70f8 <SERCOM4_1_Handler+0x18>)
    70ec:	4798      	blx	r3
}
    70ee:	bf00      	nop
    70f0:	bd80      	pop	{r7, pc}
    70f2:	bf00      	nop
    70f4:	200006f4 	.word	0x200006f4
    70f8:	0000701d 	.word	0x0000701d

000070fc <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    70fc:	b580      	push	{r7, lr}
    70fe:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    7100:	4b03      	ldr	r3, [pc, #12]	; (7110 <SERCOM4_2_Handler+0x14>)
    7102:	681b      	ldr	r3, [r3, #0]
    7104:	4618      	mov	r0, r3
    7106:	4b03      	ldr	r3, [pc, #12]	; (7114 <SERCOM4_2_Handler+0x18>)
    7108:	4798      	blx	r3
}
    710a:	bf00      	nop
    710c:	bd80      	pop	{r7, pc}
    710e:	bf00      	nop
    7110:	200006f4 	.word	0x200006f4
    7114:	0000701d 	.word	0x0000701d

00007118 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    7118:	b580      	push	{r7, lr}
    711a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    711c:	4b03      	ldr	r3, [pc, #12]	; (712c <SERCOM4_3_Handler+0x14>)
    711e:	681b      	ldr	r3, [r3, #0]
    7120:	4618      	mov	r0, r3
    7122:	4b03      	ldr	r3, [pc, #12]	; (7130 <SERCOM4_3_Handler+0x18>)
    7124:	4798      	blx	r3
}
    7126:	bf00      	nop
    7128:	bd80      	pop	{r7, pc}
    712a:	bf00      	nop
    712c:	200006f4 	.word	0x200006f4
    7130:	0000701d 	.word	0x0000701d

00007134 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    7134:	b580      	push	{r7, lr}
    7136:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7138:	4b03      	ldr	r3, [pc, #12]	; (7148 <SERCOM5_0_Handler+0x14>)
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	4618      	mov	r0, r3
    713e:	4b03      	ldr	r3, [pc, #12]	; (714c <SERCOM5_0_Handler+0x18>)
    7140:	4798      	blx	r3
}
    7142:	bf00      	nop
    7144:	bd80      	pop	{r7, pc}
    7146:	bf00      	nop
    7148:	200006f8 	.word	0x200006f8
    714c:	00006821 	.word	0x00006821

00007150 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    7150:	b580      	push	{r7, lr}
    7152:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7154:	4b03      	ldr	r3, [pc, #12]	; (7164 <SERCOM5_1_Handler+0x14>)
    7156:	681b      	ldr	r3, [r3, #0]
    7158:	4618      	mov	r0, r3
    715a:	4b03      	ldr	r3, [pc, #12]	; (7168 <SERCOM5_1_Handler+0x18>)
    715c:	4798      	blx	r3
}
    715e:	bf00      	nop
    7160:	bd80      	pop	{r7, pc}
    7162:	bf00      	nop
    7164:	200006f8 	.word	0x200006f8
    7168:	00006821 	.word	0x00006821

0000716c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    716c:	b580      	push	{r7, lr}
    716e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7170:	4b03      	ldr	r3, [pc, #12]	; (7180 <SERCOM5_2_Handler+0x14>)
    7172:	681b      	ldr	r3, [r3, #0]
    7174:	4618      	mov	r0, r3
    7176:	4b03      	ldr	r3, [pc, #12]	; (7184 <SERCOM5_2_Handler+0x18>)
    7178:	4798      	blx	r3
}
    717a:	bf00      	nop
    717c:	bd80      	pop	{r7, pc}
    717e:	bf00      	nop
    7180:	200006f8 	.word	0x200006f8
    7184:	00006821 	.word	0x00006821

00007188 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    7188:	b580      	push	{r7, lr}
    718a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    718c:	4b03      	ldr	r3, [pc, #12]	; (719c <SERCOM5_3_Handler+0x14>)
    718e:	681b      	ldr	r3, [r3, #0]
    7190:	4618      	mov	r0, r3
    7192:	4b03      	ldr	r3, [pc, #12]	; (71a0 <SERCOM5_3_Handler+0x18>)
    7194:	4798      	blx	r3
}
    7196:	bf00      	nop
    7198:	bd80      	pop	{r7, pc}
    719a:	bf00      	nop
    719c:	200006f8 	.word	0x200006f8
    71a0:	00006821 	.word	0x00006821

000071a4 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    71a4:	b580      	push	{r7, lr}
    71a6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    71a8:	4b03      	ldr	r3, [pc, #12]	; (71b8 <SERCOM7_0_Handler+0x14>)
    71aa:	681b      	ldr	r3, [r3, #0]
    71ac:	4618      	mov	r0, r3
    71ae:	4b03      	ldr	r3, [pc, #12]	; (71bc <SERCOM7_0_Handler+0x18>)
    71b0:	4798      	blx	r3
}
    71b2:	bf00      	nop
    71b4:	bd80      	pop	{r7, pc}
    71b6:	bf00      	nop
    71b8:	200006fc 	.word	0x200006fc
    71bc:	00006821 	.word	0x00006821

000071c0 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    71c0:	b580      	push	{r7, lr}
    71c2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    71c4:	4b03      	ldr	r3, [pc, #12]	; (71d4 <SERCOM7_1_Handler+0x14>)
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	4618      	mov	r0, r3
    71ca:	4b03      	ldr	r3, [pc, #12]	; (71d8 <SERCOM7_1_Handler+0x18>)
    71cc:	4798      	blx	r3
}
    71ce:	bf00      	nop
    71d0:	bd80      	pop	{r7, pc}
    71d2:	bf00      	nop
    71d4:	200006fc 	.word	0x200006fc
    71d8:	00006821 	.word	0x00006821

000071dc <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    71dc:	b580      	push	{r7, lr}
    71de:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    71e0:	4b03      	ldr	r3, [pc, #12]	; (71f0 <SERCOM7_2_Handler+0x14>)
    71e2:	681b      	ldr	r3, [r3, #0]
    71e4:	4618      	mov	r0, r3
    71e6:	4b03      	ldr	r3, [pc, #12]	; (71f4 <SERCOM7_2_Handler+0x18>)
    71e8:	4798      	blx	r3
}
    71ea:	bf00      	nop
    71ec:	bd80      	pop	{r7, pc}
    71ee:	bf00      	nop
    71f0:	200006fc 	.word	0x200006fc
    71f4:	00006821 	.word	0x00006821

000071f8 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    71f8:	b580      	push	{r7, lr}
    71fa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    71fc:	4b03      	ldr	r3, [pc, #12]	; (720c <SERCOM7_3_Handler+0x14>)
    71fe:	681b      	ldr	r3, [r3, #0]
    7200:	4618      	mov	r0, r3
    7202:	4b03      	ldr	r3, [pc, #12]	; (7210 <SERCOM7_3_Handler+0x18>)
    7204:	4798      	blx	r3
}
    7206:	bf00      	nop
    7208:	bd80      	pop	{r7, pc}
    720a:	bf00      	nop
    720c:	200006fc 	.word	0x200006fc
    7210:	00006821 	.word	0x00006821

00007214 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7214:	b580      	push	{r7, lr}
    7216:	b084      	sub	sp, #16
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
    721c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    721e:	683b      	ldr	r3, [r7, #0]
    7220:	4618      	mov	r0, r3
    7222:	4b35      	ldr	r3, [pc, #212]	; (72f8 <_spi_m_sync_init+0xe4>)
    7224:	4798      	blx	r3
    7226:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7228:	687b      	ldr	r3, [r7, #4]
    722a:	2b00      	cmp	r3, #0
    722c:	d004      	beq.n	7238 <_spi_m_sync_init+0x24>
    722e:	683b      	ldr	r3, [r7, #0]
    7230:	2b00      	cmp	r3, #0
    7232:	d001      	beq.n	7238 <_spi_m_sync_init+0x24>
    7234:	2301      	movs	r3, #1
    7236:	e000      	b.n	723a <_spi_m_sync_init+0x26>
    7238:	2300      	movs	r3, #0
    723a:	f003 0301 	and.w	r3, r3, #1
    723e:	b2db      	uxtb	r3, r3
    7240:	f640 12ec 	movw	r2, #2540	; 0x9ec
    7244:	492d      	ldr	r1, [pc, #180]	; (72fc <_spi_m_sync_init+0xe8>)
    7246:	4618      	mov	r0, r3
    7248:	4b2d      	ldr	r3, [pc, #180]	; (7300 <_spi_m_sync_init+0xec>)
    724a:	4798      	blx	r3

	if (regs == NULL) {
    724c:	68fb      	ldr	r3, [r7, #12]
    724e:	2b00      	cmp	r3, #0
    7250:	d102      	bne.n	7258 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7252:	f06f 030c 	mvn.w	r3, #12
    7256:	e04a      	b.n	72ee <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7258:	2101      	movs	r1, #1
    725a:	6838      	ldr	r0, [r7, #0]
    725c:	4b29      	ldr	r3, [pc, #164]	; (7304 <_spi_m_sync_init+0xf0>)
    725e:	4798      	blx	r3
    7260:	4603      	mov	r3, r0
    7262:	f083 0301 	eor.w	r3, r3, #1
    7266:	b2db      	uxtb	r3, r3
    7268:	2b00      	cmp	r3, #0
    726a:	d019      	beq.n	72a0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    726c:	68fb      	ldr	r3, [r7, #12]
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	f003 031c 	and.w	r3, r3, #28
    7274:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7276:	2102      	movs	r1, #2
    7278:	6838      	ldr	r0, [r7, #0]
    727a:	4b23      	ldr	r3, [pc, #140]	; (7308 <_spi_m_sync_init+0xf4>)
    727c:	4798      	blx	r3
    727e:	4603      	mov	r3, r0
    7280:	2b00      	cmp	r3, #0
    7282:	d006      	beq.n	7292 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7284:	6838      	ldr	r0, [r7, #0]
    7286:	4b21      	ldr	r3, [pc, #132]	; (730c <_spi_m_sync_init+0xf8>)
    7288:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    728a:	2102      	movs	r1, #2
    728c:	6838      	ldr	r0, [r7, #0]
    728e:	4b20      	ldr	r3, [pc, #128]	; (7310 <_spi_m_sync_init+0xfc>)
    7290:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7292:	68bb      	ldr	r3, [r7, #8]
    7294:	f043 0301 	orr.w	r3, r3, #1
    7298:	4619      	mov	r1, r3
    729a:	6838      	ldr	r0, [r7, #0]
    729c:	4b1d      	ldr	r3, [pc, #116]	; (7314 <_spi_m_sync_init+0x100>)
    729e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    72a0:	2101      	movs	r1, #1
    72a2:	6838      	ldr	r0, [r7, #0]
    72a4:	4b1a      	ldr	r3, [pc, #104]	; (7310 <_spi_m_sync_init+0xfc>)
    72a6:	4798      	blx	r3

	dev->prvt = hw;
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	683a      	ldr	r2, [r7, #0]
    72ac:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    72ae:	68fb      	ldr	r3, [r7, #12]
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	f003 031c 	and.w	r3, r3, #28
    72b6:	2b08      	cmp	r3, #8
    72b8:	d104      	bne.n	72c4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    72ba:	68f9      	ldr	r1, [r7, #12]
    72bc:	6838      	ldr	r0, [r7, #0]
    72be:	4b16      	ldr	r3, [pc, #88]	; (7318 <_spi_m_sync_init+0x104>)
    72c0:	4798      	blx	r3
    72c2:	e003      	b.n	72cc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    72c4:	68f9      	ldr	r1, [r7, #12]
    72c6:	6838      	ldr	r0, [r7, #0]
    72c8:	4b14      	ldr	r3, [pc, #80]	; (731c <_spi_m_sync_init+0x108>)
    72ca:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    72cc:	68fb      	ldr	r3, [r7, #12]
    72ce:	685b      	ldr	r3, [r3, #4]
    72d0:	f003 0307 	and.w	r3, r3, #7
    72d4:	2b00      	cmp	r3, #0
    72d6:	d101      	bne.n	72dc <_spi_m_sync_init+0xc8>
    72d8:	2201      	movs	r2, #1
    72da:	e000      	b.n	72de <_spi_m_sync_init+0xca>
    72dc:	2202      	movs	r2, #2
    72de:	687b      	ldr	r3, [r7, #4]
    72e0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    72e2:	68fb      	ldr	r3, [r7, #12]
    72e4:	89db      	ldrh	r3, [r3, #14]
    72e6:	b29a      	uxth	r2, r3
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    72ec:	2300      	movs	r3, #0
}
    72ee:	4618      	mov	r0, r3
    72f0:	3710      	adds	r7, #16
    72f2:	46bd      	mov	sp, r7
    72f4:	bd80      	pop	{r7, pc}
    72f6:	bf00      	nop
    72f8:	00006fc1 	.word	0x00006fc1
    72fc:	0000ef0c 	.word	0x0000ef0c
    7300:	00003931 	.word	0x00003931
    7304:	00005dd1 	.word	0x00005dd1
    7308:	00006145 	.word	0x00006145
    730c:	0000611d 	.word	0x0000611d
    7310:	00005dad 	.word	0x00005dad
    7314:	00006175 	.word	0x00006175
    7318:	00006f15 	.word	0x00006f15
    731c:	00006e81 	.word	0x00006e81

00007320 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    7320:	b580      	push	{r7, lr}
    7322:	b086      	sub	sp, #24
    7324:	af00      	add	r7, sp, #0
    7326:	6078      	str	r0, [r7, #4]
    7328:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    732a:	687b      	ldr	r3, [r7, #4]
    732c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    732e:	6839      	ldr	r1, [r7, #0]
    7330:	6878      	ldr	r0, [r7, #4]
    7332:	4b1a      	ldr	r3, [pc, #104]	; (739c <_spi_m_async_init+0x7c>)
    7334:	4798      	blx	r3
    7336:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    7338:	68bb      	ldr	r3, [r7, #8]
    733a:	2b00      	cmp	r3, #0
    733c:	da01      	bge.n	7342 <_spi_m_async_init+0x22>
		return rc;
    733e:	68bb      	ldr	r3, [r7, #8]
    7340:	e028      	b.n	7394 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    7342:	6879      	ldr	r1, [r7, #4]
    7344:	6838      	ldr	r0, [r7, #0]
    7346:	4b16      	ldr	r3, [pc, #88]	; (73a0 <_spi_m_async_init+0x80>)
    7348:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    734a:	68fb      	ldr	r3, [r7, #12]
    734c:	2200      	movs	r2, #0
    734e:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    7350:	68fb      	ldr	r3, [r7, #12]
    7352:	2200      	movs	r2, #0
    7354:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    7356:	68fb      	ldr	r3, [r7, #12]
    7358:	2200      	movs	r2, #0
    735a:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    735c:	6838      	ldr	r0, [r7, #0]
    735e:	4b11      	ldr	r3, [pc, #68]	; (73a4 <_spi_m_async_init+0x84>)
    7360:	4798      	blx	r3
    7362:	4603      	mov	r3, r0
    7364:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7366:	2300      	movs	r3, #0
    7368:	613b      	str	r3, [r7, #16]
    736a:	e00f      	b.n	738c <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    736c:	7dfb      	ldrb	r3, [r7, #23]
    736e:	b21b      	sxth	r3, r3
    7370:	4618      	mov	r0, r3
    7372:	4b0d      	ldr	r3, [pc, #52]	; (73a8 <_spi_m_async_init+0x88>)
    7374:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    7376:	7dfb      	ldrb	r3, [r7, #23]
    7378:	b21b      	sxth	r3, r3
    737a:	4618      	mov	r0, r3
    737c:	4b0b      	ldr	r3, [pc, #44]	; (73ac <_spi_m_async_init+0x8c>)
    737e:	4798      	blx	r3
		irq++;
    7380:	7dfb      	ldrb	r3, [r7, #23]
    7382:	3301      	adds	r3, #1
    7384:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7386:	693b      	ldr	r3, [r7, #16]
    7388:	3301      	adds	r3, #1
    738a:	613b      	str	r3, [r7, #16]
    738c:	693b      	ldr	r3, [r7, #16]
    738e:	2b03      	cmp	r3, #3
    7390:	d9ec      	bls.n	736c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    7392:	2300      	movs	r3, #0
}
    7394:	4618      	mov	r0, r3
    7396:	3718      	adds	r7, #24
    7398:	46bd      	mov	sp, r7
    739a:	bd80      	pop	{r7, pc}
    739c:	00007215 	.word	0x00007215
    73a0:	00006519 	.word	0x00006519
    73a4:	00006965 	.word	0x00006965
    73a8:	00005ce1 	.word	0x00005ce1
    73ac:	00005d25 	.word	0x00005d25

000073b0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    73b0:	b580      	push	{r7, lr}
    73b2:	b082      	sub	sp, #8
    73b4:	af00      	add	r7, sp, #0
    73b6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    73b8:	bf00      	nop
    73ba:	2103      	movs	r1, #3
    73bc:	6878      	ldr	r0, [r7, #4]
    73be:	4b06      	ldr	r3, [pc, #24]	; (73d8 <_spi_wait_bus_idle+0x28>)
    73c0:	4798      	blx	r3
    73c2:	4603      	mov	r3, r0
    73c4:	2b00      	cmp	r3, #0
    73c6:	d0f8      	beq.n	73ba <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    73c8:	2103      	movs	r1, #3
    73ca:	6878      	ldr	r0, [r7, #4]
    73cc:	4b03      	ldr	r3, [pc, #12]	; (73dc <_spi_wait_bus_idle+0x2c>)
    73ce:	4798      	blx	r3
}
    73d0:	bf00      	nop
    73d2:	3708      	adds	r7, #8
    73d4:	46bd      	mov	sp, r7
    73d6:	bd80      	pop	{r7, pc}
    73d8:	00005e65 	.word	0x00005e65
    73dc:	00005ea7 	.word	0x00005ea7

000073e0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b086      	sub	sp, #24
    73e4:	af00      	add	r7, sp, #0
    73e6:	60f8      	str	r0, [r7, #12]
    73e8:	60b9      	str	r1, [r7, #8]
    73ea:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    73ec:	68bb      	ldr	r3, [r7, #8]
    73ee:	f003 0304 	and.w	r3, r3, #4
    73f2:	2b00      	cmp	r3, #0
    73f4:	d101      	bne.n	73fa <_spi_rx_check_and_receive+0x1a>
		return false;
    73f6:	2300      	movs	r3, #0
    73f8:	e022      	b.n	7440 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    73fa:	68f8      	ldr	r0, [r7, #12]
    73fc:	4b12      	ldr	r3, [pc, #72]	; (7448 <_spi_rx_check_and_receive+0x68>)
    73fe:	4798      	blx	r3
    7400:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7402:	687b      	ldr	r3, [r7, #4]
    7404:	685b      	ldr	r3, [r3, #4]
    7406:	2b00      	cmp	r3, #0
    7408:	d014      	beq.n	7434 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	685b      	ldr	r3, [r3, #4]
    740e:	1c59      	adds	r1, r3, #1
    7410:	687a      	ldr	r2, [r7, #4]
    7412:	6051      	str	r1, [r2, #4]
    7414:	697a      	ldr	r2, [r7, #20]
    7416:	b2d2      	uxtb	r2, r2
    7418:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    741a:	687b      	ldr	r3, [r7, #4]
    741c:	7c1b      	ldrb	r3, [r3, #16]
    741e:	2b01      	cmp	r3, #1
    7420:	d908      	bls.n	7434 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	685b      	ldr	r3, [r3, #4]
    7426:	1c59      	adds	r1, r3, #1
    7428:	687a      	ldr	r2, [r7, #4]
    742a:	6051      	str	r1, [r2, #4]
    742c:	697a      	ldr	r2, [r7, #20]
    742e:	0a12      	lsrs	r2, r2, #8
    7430:	b2d2      	uxtb	r2, r2
    7432:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	68db      	ldr	r3, [r3, #12]
    7438:	1c5a      	adds	r2, r3, #1
    743a:	687b      	ldr	r3, [r7, #4]
    743c:	60da      	str	r2, [r3, #12]

	return true;
    743e:	2301      	movs	r3, #1
}
    7440:	4618      	mov	r0, r3
    7442:	3718      	adds	r7, #24
    7444:	46bd      	mov	sp, r7
    7446:	bd80      	pop	{r7, pc}
    7448:	000063ed 	.word	0x000063ed

0000744c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    744c:	b580      	push	{r7, lr}
    744e:	b086      	sub	sp, #24
    7450:	af00      	add	r7, sp, #0
    7452:	60f8      	str	r0, [r7, #12]
    7454:	60b9      	str	r1, [r7, #8]
    7456:	607a      	str	r2, [r7, #4]
    7458:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    745a:	68bb      	ldr	r3, [r7, #8]
    745c:	f003 0301 	and.w	r3, r3, #1
    7460:	2b00      	cmp	r3, #0
    7462:	d028      	beq.n	74b6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7464:	687b      	ldr	r3, [r7, #4]
    7466:	681b      	ldr	r3, [r3, #0]
    7468:	2b00      	cmp	r3, #0
    746a:	d018      	beq.n	749e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	681b      	ldr	r3, [r3, #0]
    7470:	1c59      	adds	r1, r3, #1
    7472:	687a      	ldr	r2, [r7, #4]
    7474:	6011      	str	r1, [r2, #0]
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	7c1b      	ldrb	r3, [r3, #16]
    747e:	2b01      	cmp	r3, #1
    7480:	d90f      	bls.n	74a2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	681b      	ldr	r3, [r3, #0]
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	021b      	lsls	r3, r3, #8
    748a:	461a      	mov	r2, r3
    748c:	697b      	ldr	r3, [r7, #20]
    748e:	4313      	orrs	r3, r2
    7490:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	1c5a      	adds	r2, r3, #1
    7498:	687b      	ldr	r3, [r7, #4]
    749a:	601a      	str	r2, [r3, #0]
    749c:	e001      	b.n	74a2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    749e:	887b      	ldrh	r3, [r7, #2]
    74a0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	689b      	ldr	r3, [r3, #8]
    74a6:	1c5a      	adds	r2, r3, #1
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    74ac:	6979      	ldr	r1, [r7, #20]
    74ae:	68f8      	ldr	r0, [r7, #12]
    74b0:	4b03      	ldr	r3, [pc, #12]	; (74c0 <_spi_tx_check_and_send+0x74>)
    74b2:	4798      	blx	r3
    74b4:	e000      	b.n	74b8 <_spi_tx_check_and_send+0x6c>
		return;
    74b6:	bf00      	nop
}
    74b8:	3718      	adds	r7, #24
    74ba:	46bd      	mov	sp, r7
    74bc:	bd80      	pop	{r7, pc}
    74be:	bf00      	nop
    74c0:	000063d1 	.word	0x000063d1

000074c4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    74c4:	b580      	push	{r7, lr}
    74c6:	b082      	sub	sp, #8
    74c8:	af00      	add	r7, sp, #0
    74ca:	6078      	str	r0, [r7, #4]
    74cc:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    74d4:	2b00      	cmp	r3, #0
    74d6:	d00b      	beq.n	74f0 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    74d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    74dc:	6838      	ldr	r0, [r7, #0]
    74de:	4b07      	ldr	r3, [pc, #28]	; (74fc <_spi_err_check+0x38>)
    74e0:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    74e2:	2180      	movs	r1, #128	; 0x80
    74e4:	6838      	ldr	r0, [r7, #0]
    74e6:	4b06      	ldr	r3, [pc, #24]	; (7500 <_spi_err_check+0x3c>)
    74e8:	4798      	blx	r3
		return ERR_OVERFLOW;
    74ea:	f06f 0312 	mvn.w	r3, #18
    74ee:	e000      	b.n	74f2 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    74f0:	2300      	movs	r3, #0
}
    74f2:	4618      	mov	r0, r3
    74f4:	3708      	adds	r7, #8
    74f6:	46bd      	mov	sp, r7
    74f8:	bd80      	pop	{r7, pc}
    74fa:	bf00      	nop
    74fc:	00006425 	.word	0x00006425
    7500:	00005ea7 	.word	0x00005ea7

00007504 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7504:	b590      	push	{r4, r7, lr}
    7506:	b08b      	sub	sp, #44	; 0x2c
    7508:	af00      	add	r7, sp, #0
    750a:	6078      	str	r0, [r7, #4]
    750c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    750e:	687b      	ldr	r3, [r7, #4]
    7510:	681b      	ldr	r3, [r3, #0]
    7512:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7514:	2300      	movs	r3, #0
    7516:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7518:	683b      	ldr	r3, [r7, #0]
    751a:	681b      	ldr	r3, [r3, #0]
    751c:	60bb      	str	r3, [r7, #8]
    751e:	683b      	ldr	r3, [r7, #0]
    7520:	685b      	ldr	r3, [r3, #4]
    7522:	60fb      	str	r3, [r7, #12]
    7524:	2300      	movs	r3, #0
    7526:	613b      	str	r3, [r7, #16]
    7528:	2300      	movs	r3, #0
    752a:	617b      	str	r3, [r7, #20]
    752c:	687b      	ldr	r3, [r7, #4]
    752e:	791b      	ldrb	r3, [r3, #4]
    7530:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	2b00      	cmp	r3, #0
    7536:	d004      	beq.n	7542 <_spi_m_sync_trans+0x3e>
    7538:	6a3b      	ldr	r3, [r7, #32]
    753a:	2b00      	cmp	r3, #0
    753c:	d001      	beq.n	7542 <_spi_m_sync_trans+0x3e>
    753e:	2301      	movs	r3, #1
    7540:	e000      	b.n	7544 <_spi_m_sync_trans+0x40>
    7542:	2300      	movs	r3, #0
    7544:	f003 0301 	and.w	r3, r3, #1
    7548:	b2db      	uxtb	r3, r3
    754a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    754e:	492b      	ldr	r1, [pc, #172]	; (75fc <_spi_m_sync_trans+0xf8>)
    7550:	4618      	mov	r0, r3
    7552:	4b2b      	ldr	r3, [pc, #172]	; (7600 <_spi_m_sync_trans+0xfc>)
    7554:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7556:	2107      	movs	r1, #7
    7558:	6a38      	ldr	r0, [r7, #32]
    755a:	4b2a      	ldr	r3, [pc, #168]	; (7604 <_spi_m_sync_trans+0x100>)
    755c:	4798      	blx	r3
    755e:	4603      	mov	r3, r0
    7560:	2b00      	cmp	r3, #0
    7562:	d002      	beq.n	756a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7564:	f06f 0303 	mvn.w	r3, #3
    7568:	e043      	b.n	75f2 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    756a:	6a38      	ldr	r0, [r7, #32]
    756c:	4b26      	ldr	r3, [pc, #152]	; (7608 <_spi_m_sync_trans+0x104>)
    756e:	4798      	blx	r3
    7570:	4603      	mov	r3, r0
    7572:	f083 0301 	eor.w	r3, r3, #1
    7576:	b2db      	uxtb	r3, r3
    7578:	2b00      	cmp	r3, #0
    757a:	d002      	beq.n	7582 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    757c:	f06f 0313 	mvn.w	r3, #19
    7580:	e037      	b.n	75f2 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7582:	6a38      	ldr	r0, [r7, #32]
    7584:	4b21      	ldr	r3, [pc, #132]	; (760c <_spi_m_sync_trans+0x108>)
    7586:	4798      	blx	r3
    7588:	4603      	mov	r3, r0
    758a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    758c:	f107 0308 	add.w	r3, r7, #8
    7590:	461a      	mov	r2, r3
    7592:	69f9      	ldr	r1, [r7, #28]
    7594:	6a38      	ldr	r0, [r7, #32]
    7596:	4b1e      	ldr	r3, [pc, #120]	; (7610 <_spi_m_sync_trans+0x10c>)
    7598:	4798      	blx	r3
    759a:	4603      	mov	r3, r0
    759c:	f083 0301 	eor.w	r3, r3, #1
    75a0:	b2db      	uxtb	r3, r3
    75a2:	2b00      	cmp	r3, #0
    75a4:	d00b      	beq.n	75be <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    75a6:	697a      	ldr	r2, [r7, #20]
    75a8:	693b      	ldr	r3, [r7, #16]
    75aa:	429a      	cmp	r2, r3
    75ac:	d307      	bcc.n	75be <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	88db      	ldrh	r3, [r3, #6]
    75b2:	f107 0208 	add.w	r2, r7, #8
    75b6:	69f9      	ldr	r1, [r7, #28]
    75b8:	6a38      	ldr	r0, [r7, #32]
    75ba:	4c16      	ldr	r4, [pc, #88]	; (7614 <_spi_m_sync_trans+0x110>)
    75bc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    75be:	6a39      	ldr	r1, [r7, #32]
    75c0:	69f8      	ldr	r0, [r7, #28]
    75c2:	4b15      	ldr	r3, [pc, #84]	; (7618 <_spi_m_sync_trans+0x114>)
    75c4:	4798      	blx	r3
    75c6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    75c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75ca:	2b00      	cmp	r3, #0
    75cc:	db0c      	blt.n	75e8 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    75ce:	693a      	ldr	r2, [r7, #16]
    75d0:	683b      	ldr	r3, [r7, #0]
    75d2:	689b      	ldr	r3, [r3, #8]
    75d4:	429a      	cmp	r2, r3
    75d6:	d3d4      	bcc.n	7582 <_spi_m_sync_trans+0x7e>
    75d8:	697a      	ldr	r2, [r7, #20]
    75da:	683b      	ldr	r3, [r7, #0]
    75dc:	689b      	ldr	r3, [r3, #8]
    75de:	429a      	cmp	r2, r3
    75e0:	d3cf      	bcc.n	7582 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    75e2:	693b      	ldr	r3, [r7, #16]
    75e4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    75e6:	e000      	b.n	75ea <_spi_m_sync_trans+0xe6>
			break;
    75e8:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    75ea:	6a38      	ldr	r0, [r7, #32]
    75ec:	4b0b      	ldr	r3, [pc, #44]	; (761c <_spi_m_sync_trans+0x118>)
    75ee:	4798      	blx	r3

	return rc;
    75f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    75f2:	4618      	mov	r0, r3
    75f4:	372c      	adds	r7, #44	; 0x2c
    75f6:	46bd      	mov	sp, r7
    75f8:	bd90      	pop	{r4, r7, pc}
    75fa:	bf00      	nop
    75fc:	0000ef0c 	.word	0x0000ef0c
    7600:	00003931 	.word	0x00003931
    7604:	00005dd1 	.word	0x00005dd1
    7608:	000060e5 	.word	0x000060e5
    760c:	00005e8d 	.word	0x00005e8d
    7610:	000073e1 	.word	0x000073e1
    7614:	0000744d 	.word	0x0000744d
    7618:	000074c5 	.word	0x000074c5
    761c:	000073b1 	.word	0x000073b1

00007620 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    7620:	b580      	push	{r7, lr}
    7622:	b084      	sub	sp, #16
    7624:	af00      	add	r7, sp, #0
    7626:	6078      	str	r0, [r7, #4]
    7628:	460b      	mov	r3, r1
    762a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	681b      	ldr	r3, [r3, #0]
    7630:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    7632:	687b      	ldr	r3, [r7, #4]
    7634:	2b00      	cmp	r3, #0
    7636:	d004      	beq.n	7642 <_spi_m_async_enable_tx+0x22>
    7638:	68fb      	ldr	r3, [r7, #12]
    763a:	2b00      	cmp	r3, #0
    763c:	d001      	beq.n	7642 <_spi_m_async_enable_tx+0x22>
    763e:	2301      	movs	r3, #1
    7640:	e000      	b.n	7644 <_spi_m_async_enable_tx+0x24>
    7642:	2300      	movs	r3, #0
    7644:	f003 0301 	and.w	r3, r3, #1
    7648:	b2db      	uxtb	r3, r3
    764a:	f640 327c 	movw	r2, #2940	; 0xb7c
    764e:	4909      	ldr	r1, [pc, #36]	; (7674 <_spi_m_async_enable_tx+0x54>)
    7650:	4618      	mov	r0, r3
    7652:	4b09      	ldr	r3, [pc, #36]	; (7678 <_spi_m_async_enable_tx+0x58>)
    7654:	4798      	blx	r3

	if (state) {
    7656:	78fb      	ldrb	r3, [r7, #3]
    7658:	2b00      	cmp	r3, #0
    765a:	d003      	beq.n	7664 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    765c:	68f8      	ldr	r0, [r7, #12]
    765e:	4b07      	ldr	r3, [pc, #28]	; (767c <_spi_m_async_enable_tx+0x5c>)
    7660:	4798      	blx	r3
    7662:	e002      	b.n	766a <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    7664:	68f8      	ldr	r0, [r7, #12]
    7666:	4b06      	ldr	r3, [pc, #24]	; (7680 <_spi_m_async_enable_tx+0x60>)
    7668:	4798      	blx	r3
	}

	return ERR_NONE;
    766a:	2300      	movs	r3, #0
}
    766c:	4618      	mov	r0, r3
    766e:	3710      	adds	r7, #16
    7670:	46bd      	mov	sp, r7
    7672:	bd80      	pop	{r7, pc}
    7674:	0000ef0c 	.word	0x0000ef0c
    7678:	00003931 	.word	0x00003931
    767c:	00005f5b 	.word	0x00005f5b
    7680:	00005f75 	.word	0x00005f75

00007684 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    7684:	b580      	push	{r7, lr}
    7686:	b084      	sub	sp, #16
    7688:	af00      	add	r7, sp, #0
    768a:	6078      	str	r0, [r7, #4]
    768c:	460b      	mov	r3, r1
    768e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    7690:	687b      	ldr	r3, [r7, #4]
    7692:	681b      	ldr	r3, [r3, #0]
    7694:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    7696:	687b      	ldr	r3, [r7, #4]
    7698:	2b00      	cmp	r3, #0
    769a:	bf14      	ite	ne
    769c:	2301      	movne	r3, #1
    769e:	2300      	moveq	r3, #0
    76a0:	b2db      	uxtb	r3, r3
    76a2:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    76a6:	490f      	ldr	r1, [pc, #60]	; (76e4 <_spi_m_async_enable_rx+0x60>)
    76a8:	4618      	mov	r0, r3
    76aa:	4b0f      	ldr	r3, [pc, #60]	; (76e8 <_spi_m_async_enable_rx+0x64>)
    76ac:	4798      	blx	r3
	ASSERT(hw);
    76ae:	68fb      	ldr	r3, [r7, #12]
    76b0:	2b00      	cmp	r3, #0
    76b2:	bf14      	ite	ne
    76b4:	2301      	movne	r3, #1
    76b6:	2300      	moveq	r3, #0
    76b8:	b2db      	uxtb	r3, r3
    76ba:	f640 3291 	movw	r2, #2961	; 0xb91
    76be:	4909      	ldr	r1, [pc, #36]	; (76e4 <_spi_m_async_enable_rx+0x60>)
    76c0:	4618      	mov	r0, r3
    76c2:	4b09      	ldr	r3, [pc, #36]	; (76e8 <_spi_m_async_enable_rx+0x64>)
    76c4:	4798      	blx	r3

	if (state) {
    76c6:	78fb      	ldrb	r3, [r7, #3]
    76c8:	2b00      	cmp	r3, #0
    76ca:	d003      	beq.n	76d4 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    76cc:	68f8      	ldr	r0, [r7, #12]
    76ce:	4b07      	ldr	r3, [pc, #28]	; (76ec <_spi_m_async_enable_rx+0x68>)
    76d0:	4798      	blx	r3
    76d2:	e002      	b.n	76da <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    76d4:	68f8      	ldr	r0, [r7, #12]
    76d6:	4b06      	ldr	r3, [pc, #24]	; (76f0 <_spi_m_async_enable_rx+0x6c>)
    76d8:	4798      	blx	r3
	}

	return ERR_NONE;
    76da:	2300      	movs	r3, #0
}
    76dc:	4618      	mov	r0, r3
    76de:	3710      	adds	r7, #16
    76e0:	46bd      	mov	sp, r7
    76e2:	bd80      	pop	{r7, pc}
    76e4:	0000ef0c 	.word	0x0000ef0c
    76e8:	00003931 	.word	0x00003931
    76ec:	00005fc3 	.word	0x00005fc3
    76f0:	00005fdd 	.word	0x00005fdd

000076f4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	b082      	sub	sp, #8
    76f8:	af00      	add	r7, sp, #0
    76fa:	6078      	str	r0, [r7, #4]
    76fc:	460b      	mov	r3, r1
    76fe:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	2b00      	cmp	r3, #0
    7704:	d005      	beq.n	7712 <_spi_m_async_enable_tx_complete+0x1e>
    7706:	687b      	ldr	r3, [r7, #4]
    7708:	681b      	ldr	r3, [r3, #0]
    770a:	2b00      	cmp	r3, #0
    770c:	d001      	beq.n	7712 <_spi_m_async_enable_tx_complete+0x1e>
    770e:	2301      	movs	r3, #1
    7710:	e000      	b.n	7714 <_spi_m_async_enable_tx_complete+0x20>
    7712:	2300      	movs	r3, #0
    7714:	f003 0301 	and.w	r3, r3, #1
    7718:	b2db      	uxtb	r3, r3
    771a:	f640 32a3 	movw	r2, #2979	; 0xba3
    771e:	490b      	ldr	r1, [pc, #44]	; (774c <_spi_m_async_enable_tx_complete+0x58>)
    7720:	4618      	mov	r0, r3
    7722:	4b0b      	ldr	r3, [pc, #44]	; (7750 <_spi_m_async_enable_tx_complete+0x5c>)
    7724:	4798      	blx	r3

	if (state) {
    7726:	78fb      	ldrb	r3, [r7, #3]
    7728:	2b00      	cmp	r3, #0
    772a:	d005      	beq.n	7738 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    772c:	687b      	ldr	r3, [r7, #4]
    772e:	681b      	ldr	r3, [r3, #0]
    7730:	4618      	mov	r0, r3
    7732:	4b08      	ldr	r3, [pc, #32]	; (7754 <_spi_m_async_enable_tx_complete+0x60>)
    7734:	4798      	blx	r3
    7736:	e004      	b.n	7742 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7738:	687b      	ldr	r3, [r7, #4]
    773a:	681b      	ldr	r3, [r3, #0]
    773c:	4618      	mov	r0, r3
    773e:	4b06      	ldr	r3, [pc, #24]	; (7758 <_spi_m_async_enable_tx_complete+0x64>)
    7740:	4798      	blx	r3
	}

	return ERR_NONE;
    7742:	2300      	movs	r3, #0
}
    7744:	4618      	mov	r0, r3
    7746:	3708      	adds	r7, #8
    7748:	46bd      	mov	sp, r7
    774a:	bd80      	pop	{r7, pc}
    774c:	0000ef0c 	.word	0x0000ef0c
    7750:	00003931 	.word	0x00003931
    7754:	00005f8f 	.word	0x00005f8f
    7758:	00005fa9 	.word	0x00005fa9

0000775c <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    775c:	b580      	push	{r7, lr}
    775e:	b082      	sub	sp, #8
    7760:	af00      	add	r7, sp, #0
    7762:	6078      	str	r0, [r7, #4]
    7764:	460b      	mov	r3, r1
    7766:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	2b00      	cmp	r3, #0
    776c:	d005      	beq.n	777a <_spi_m_async_write_one+0x1e>
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	681b      	ldr	r3, [r3, #0]
    7772:	2b00      	cmp	r3, #0
    7774:	d001      	beq.n	777a <_spi_m_async_write_one+0x1e>
    7776:	2301      	movs	r3, #1
    7778:	e000      	b.n	777c <_spi_m_async_write_one+0x20>
    777a:	2300      	movs	r3, #0
    777c:	f003 0301 	and.w	r3, r3, #1
    7780:	b2db      	uxtb	r3, r3
    7782:	f640 32b5 	movw	r2, #2997	; 0xbb5
    7786:	4908      	ldr	r1, [pc, #32]	; (77a8 <_spi_m_async_write_one+0x4c>)
    7788:	4618      	mov	r0, r3
    778a:	4b08      	ldr	r3, [pc, #32]	; (77ac <_spi_m_async_write_one+0x50>)
    778c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    778e:	687b      	ldr	r3, [r7, #4]
    7790:	681b      	ldr	r3, [r3, #0]
    7792:	887a      	ldrh	r2, [r7, #2]
    7794:	4611      	mov	r1, r2
    7796:	4618      	mov	r0, r3
    7798:	4b05      	ldr	r3, [pc, #20]	; (77b0 <_spi_m_async_write_one+0x54>)
    779a:	4798      	blx	r3

	return ERR_NONE;
    779c:	2300      	movs	r3, #0
}
    779e:	4618      	mov	r0, r3
    77a0:	3708      	adds	r7, #8
    77a2:	46bd      	mov	sp, r7
    77a4:	bd80      	pop	{r7, pc}
    77a6:	bf00      	nop
    77a8:	0000ef0c 	.word	0x0000ef0c
    77ac:	00003931 	.word	0x00003931
    77b0:	000063d1 	.word	0x000063d1

000077b4 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    77b4:	b580      	push	{r7, lr}
    77b6:	b082      	sub	sp, #8
    77b8:	af00      	add	r7, sp, #0
    77ba:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	2b00      	cmp	r3, #0
    77c0:	d005      	beq.n	77ce <_spi_m_async_read_one+0x1a>
    77c2:	687b      	ldr	r3, [r7, #4]
    77c4:	681b      	ldr	r3, [r3, #0]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d001      	beq.n	77ce <_spi_m_async_read_one+0x1a>
    77ca:	2301      	movs	r3, #1
    77cc:	e000      	b.n	77d0 <_spi_m_async_read_one+0x1c>
    77ce:	2300      	movs	r3, #0
    77d0:	f003 0301 	and.w	r3, r3, #1
    77d4:	b2db      	uxtb	r3, r3
    77d6:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    77da:	4907      	ldr	r1, [pc, #28]	; (77f8 <_spi_m_async_read_one+0x44>)
    77dc:	4618      	mov	r0, r3
    77de:	4b07      	ldr	r3, [pc, #28]	; (77fc <_spi_m_async_read_one+0x48>)
    77e0:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    77e2:	687b      	ldr	r3, [r7, #4]
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	4618      	mov	r0, r3
    77e8:	4b05      	ldr	r3, [pc, #20]	; (7800 <_spi_m_async_read_one+0x4c>)
    77ea:	4798      	blx	r3
    77ec:	4603      	mov	r3, r0
    77ee:	b29b      	uxth	r3, r3
}
    77f0:	4618      	mov	r0, r3
    77f2:	3708      	adds	r7, #8
    77f4:	46bd      	mov	sp, r7
    77f6:	bd80      	pop	{r7, pc}
    77f8:	0000ef0c 	.word	0x0000ef0c
    77fc:	00003931 	.word	0x00003931
    7800:	000063ed 	.word	0x000063ed

00007804 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    7804:	b580      	push	{r7, lr}
    7806:	b086      	sub	sp, #24
    7808:	af00      	add	r7, sp, #0
    780a:	60f8      	str	r0, [r7, #12]
    780c:	460b      	mov	r3, r1
    780e:	607a      	str	r2, [r7, #4]
    7810:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    7812:	68fb      	ldr	r3, [r7, #12]
    7814:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7816:	68fb      	ldr	r3, [r7, #12]
    7818:	2b00      	cmp	r3, #0
    781a:	d004      	beq.n	7826 <_spi_m_async_register_callback+0x22>
    781c:	7afb      	ldrb	r3, [r7, #11]
    781e:	2b03      	cmp	r3, #3
    7820:	d801      	bhi.n	7826 <_spi_m_async_register_callback+0x22>
    7822:	2301      	movs	r3, #1
    7824:	e000      	b.n	7828 <_spi_m_async_register_callback+0x24>
    7826:	2300      	movs	r3, #0
    7828:	f003 0301 	and.w	r3, r3, #1
    782c:	b2db      	uxtb	r3, r3
    782e:	f640 32e9 	movw	r2, #3049	; 0xbe9
    7832:	4909      	ldr	r1, [pc, #36]	; (7858 <_spi_m_async_register_callback+0x54>)
    7834:	4618      	mov	r0, r3
    7836:	4b09      	ldr	r3, [pc, #36]	; (785c <_spi_m_async_register_callback+0x58>)
    7838:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    783a:	697b      	ldr	r3, [r7, #20]
    783c:	3308      	adds	r3, #8
    783e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    7840:	7afb      	ldrb	r3, [r7, #11]
    7842:	009b      	lsls	r3, r3, #2
    7844:	693a      	ldr	r2, [r7, #16]
    7846:	4413      	add	r3, r2
    7848:	687a      	ldr	r2, [r7, #4]
    784a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    784c:	2300      	movs	r3, #0
}
    784e:	4618      	mov	r0, r3
    7850:	3718      	adds	r7, #24
    7852:	46bd      	mov	sp, r7
    7854:	bd80      	pop	{r7, pc}
    7856:	bf00      	nop
    7858:	0000ef0c 	.word	0x0000ef0c
    785c:	00003931 	.word	0x00003931

00007860 <__NVIC_EnableIRQ>:
{
    7860:	b480      	push	{r7}
    7862:	b083      	sub	sp, #12
    7864:	af00      	add	r7, sp, #0
    7866:	4603      	mov	r3, r0
    7868:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    786a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    786e:	2b00      	cmp	r3, #0
    7870:	db0b      	blt.n	788a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7872:	4909      	ldr	r1, [pc, #36]	; (7898 <__NVIC_EnableIRQ+0x38>)
    7874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7878:	095b      	lsrs	r3, r3, #5
    787a:	88fa      	ldrh	r2, [r7, #6]
    787c:	f002 021f 	and.w	r2, r2, #31
    7880:	2001      	movs	r0, #1
    7882:	fa00 f202 	lsl.w	r2, r0, r2
    7886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    788a:	bf00      	nop
    788c:	370c      	adds	r7, #12
    788e:	46bd      	mov	sp, r7
    7890:	f85d 7b04 	ldr.w	r7, [sp], #4
    7894:	4770      	bx	lr
    7896:	bf00      	nop
    7898:	e000e100 	.word	0xe000e100

0000789c <__NVIC_DisableIRQ>:
{
    789c:	b480      	push	{r7}
    789e:	b083      	sub	sp, #12
    78a0:	af00      	add	r7, sp, #0
    78a2:	4603      	mov	r3, r0
    78a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78aa:	2b00      	cmp	r3, #0
    78ac:	db10      	blt.n	78d0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78ae:	490b      	ldr	r1, [pc, #44]	; (78dc <__NVIC_DisableIRQ+0x40>)
    78b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78b4:	095b      	lsrs	r3, r3, #5
    78b6:	88fa      	ldrh	r2, [r7, #6]
    78b8:	f002 021f 	and.w	r2, r2, #31
    78bc:	2001      	movs	r0, #1
    78be:	fa00 f202 	lsl.w	r2, r0, r2
    78c2:	3320      	adds	r3, #32
    78c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    78c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    78cc:	f3bf 8f6f 	isb	sy
}
    78d0:	bf00      	nop
    78d2:	370c      	adds	r7, #12
    78d4:	46bd      	mov	sp, r7
    78d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78da:	4770      	bx	lr
    78dc:	e000e100 	.word	0xe000e100

000078e0 <__NVIC_ClearPendingIRQ>:
{
    78e0:	b480      	push	{r7}
    78e2:	b083      	sub	sp, #12
    78e4:	af00      	add	r7, sp, #0
    78e6:	4603      	mov	r3, r0
    78e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78ee:	2b00      	cmp	r3, #0
    78f0:	db0c      	blt.n	790c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78f2:	4909      	ldr	r1, [pc, #36]	; (7918 <__NVIC_ClearPendingIRQ+0x38>)
    78f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78f8:	095b      	lsrs	r3, r3, #5
    78fa:	88fa      	ldrh	r2, [r7, #6]
    78fc:	f002 021f 	and.w	r2, r2, #31
    7900:	2001      	movs	r0, #1
    7902:	fa00 f202 	lsl.w	r2, r0, r2
    7906:	3360      	adds	r3, #96	; 0x60
    7908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    790c:	bf00      	nop
    790e:	370c      	adds	r7, #12
    7910:	46bd      	mov	sp, r7
    7912:	f85d 7b04 	ldr.w	r7, [sp], #4
    7916:	4770      	bx	lr
    7918:	e000e100 	.word	0xe000e100

0000791c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    791c:	b480      	push	{r7}
    791e:	b083      	sub	sp, #12
    7920:	af00      	add	r7, sp, #0
    7922:	6078      	str	r0, [r7, #4]
    7924:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7926:	bf00      	nop
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	691a      	ldr	r2, [r3, #16]
    792c:	683b      	ldr	r3, [r7, #0]
    792e:	4013      	ands	r3, r2
    7930:	2b00      	cmp	r3, #0
    7932:	d1f9      	bne.n	7928 <hri_tc_wait_for_sync+0xc>
	};
}
    7934:	bf00      	nop
    7936:	370c      	adds	r7, #12
    7938:	46bd      	mov	sp, r7
    793a:	f85d 7b04 	ldr.w	r7, [sp], #4
    793e:	4770      	bx	lr

00007940 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7940:	b480      	push	{r7}
    7942:	b083      	sub	sp, #12
    7944:	af00      	add	r7, sp, #0
    7946:	6078      	str	r0, [r7, #4]
    7948:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    794a:	687b      	ldr	r3, [r7, #4]
    794c:	691a      	ldr	r2, [r3, #16]
    794e:	683b      	ldr	r3, [r7, #0]
    7950:	4013      	ands	r3, r2
    7952:	2b00      	cmp	r3, #0
    7954:	bf14      	ite	ne
    7956:	2301      	movne	r3, #1
    7958:	2300      	moveq	r3, #0
    795a:	b2db      	uxtb	r3, r3
}
    795c:	4618      	mov	r0, r3
    795e:	370c      	adds	r7, #12
    7960:	46bd      	mov	sp, r7
    7962:	f85d 7b04 	ldr.w	r7, [sp], #4
    7966:	4770      	bx	lr

00007968 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7970:	687b      	ldr	r3, [r7, #4]
    7972:	7a9b      	ldrb	r3, [r3, #10]
    7974:	b2db      	uxtb	r3, r3
    7976:	f003 0301 	and.w	r3, r3, #1
    797a:	2b00      	cmp	r3, #0
    797c:	bf14      	ite	ne
    797e:	2301      	movne	r3, #1
    7980:	2300      	moveq	r3, #0
    7982:	b2db      	uxtb	r3, r3
}
    7984:	4618      	mov	r0, r3
    7986:	370c      	adds	r7, #12
    7988:	46bd      	mov	sp, r7
    798a:	f85d 7b04 	ldr.w	r7, [sp], #4
    798e:	4770      	bx	lr

00007990 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7990:	b480      	push	{r7}
    7992:	b083      	sub	sp, #12
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	2201      	movs	r2, #1
    799c:	729a      	strb	r2, [r3, #10]
}
    799e:	bf00      	nop
    79a0:	370c      	adds	r7, #12
    79a2:	46bd      	mov	sp, r7
    79a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79a8:	4770      	bx	lr

000079aa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    79aa:	b480      	push	{r7}
    79ac:	b083      	sub	sp, #12
    79ae:	af00      	add	r7, sp, #0
    79b0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	2202      	movs	r2, #2
    79b6:	729a      	strb	r2, [r3, #10]
}
    79b8:	bf00      	nop
    79ba:	370c      	adds	r7, #12
    79bc:	46bd      	mov	sp, r7
    79be:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c2:	4770      	bx	lr

000079c4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    79c4:	b480      	push	{r7}
    79c6:	b083      	sub	sp, #12
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	2201      	movs	r2, #1
    79d0:	725a      	strb	r2, [r3, #9]
}
    79d2:	bf00      	nop
    79d4:	370c      	adds	r7, #12
    79d6:	46bd      	mov	sp, r7
    79d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79dc:	4770      	bx	lr

000079de <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    79de:	b480      	push	{r7}
    79e0:	b083      	sub	sp, #12
    79e2:	af00      	add	r7, sp, #0
    79e4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	7a5b      	ldrb	r3, [r3, #9]
    79ea:	b2db      	uxtb	r3, r3
    79ec:	085b      	lsrs	r3, r3, #1
    79ee:	f003 0301 	and.w	r3, r3, #1
    79f2:	2b00      	cmp	r3, #0
    79f4:	bf14      	ite	ne
    79f6:	2301      	movne	r3, #1
    79f8:	2300      	moveq	r3, #0
    79fa:	b2db      	uxtb	r3, r3
}
    79fc:	4618      	mov	r0, r3
    79fe:	370c      	adds	r7, #12
    7a00:	46bd      	mov	sp, r7
    7a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a06:	4770      	bx	lr

00007a08 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7a08:	b580      	push	{r7, lr}
    7a0a:	b082      	sub	sp, #8
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	f043 0202 	orr.w	r2, r3, #2
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a1c:	2103      	movs	r1, #3
    7a1e:	6878      	ldr	r0, [r7, #4]
    7a20:	4b02      	ldr	r3, [pc, #8]	; (7a2c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7a22:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a24:	bf00      	nop
    7a26:	3708      	adds	r7, #8
    7a28:	46bd      	mov	sp, r7
    7a2a:	bd80      	pop	{r7, pc}
    7a2c:	0000791d 	.word	0x0000791d

00007a30 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b084      	sub	sp, #16
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a38:	2103      	movs	r1, #3
    7a3a:	6878      	ldr	r0, [r7, #4]
    7a3c:	4b09      	ldr	r3, [pc, #36]	; (7a64 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7a3e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7a46:	68fb      	ldr	r3, [r7, #12]
    7a48:	085b      	lsrs	r3, r3, #1
    7a4a:	f003 0301 	and.w	r3, r3, #1
    7a4e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7a50:	68fb      	ldr	r3, [r7, #12]
    7a52:	2b00      	cmp	r3, #0
    7a54:	bf14      	ite	ne
    7a56:	2301      	movne	r3, #1
    7a58:	2300      	moveq	r3, #0
    7a5a:	b2db      	uxtb	r3, r3
}
    7a5c:	4618      	mov	r0, r3
    7a5e:	3710      	adds	r7, #16
    7a60:	46bd      	mov	sp, r7
    7a62:	bd80      	pop	{r7, pc}
    7a64:	0000791d 	.word	0x0000791d

00007a68 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	b082      	sub	sp, #8
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7a70:	687b      	ldr	r3, [r7, #4]
    7a72:	681b      	ldr	r3, [r3, #0]
    7a74:	f023 0202 	bic.w	r2, r3, #2
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a7c:	2103      	movs	r1, #3
    7a7e:	6878      	ldr	r0, [r7, #4]
    7a80:	4b02      	ldr	r3, [pc, #8]	; (7a8c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7a82:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a84:	bf00      	nop
    7a86:	3708      	adds	r7, #8
    7a88:	46bd      	mov	sp, r7
    7a8a:	bd80      	pop	{r7, pc}
    7a8c:	0000791d 	.word	0x0000791d

00007a90 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b084      	sub	sp, #16
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
    7a98:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a9a:	2103      	movs	r1, #3
    7a9c:	6878      	ldr	r0, [r7, #4]
    7a9e:	4b07      	ldr	r3, [pc, #28]	; (7abc <hri_tc_get_CTRLA_reg+0x2c>)
    7aa0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	681b      	ldr	r3, [r3, #0]
    7aa6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7aa8:	68fa      	ldr	r2, [r7, #12]
    7aaa:	683b      	ldr	r3, [r7, #0]
    7aac:	4013      	ands	r3, r2
    7aae:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ab0:	68fb      	ldr	r3, [r7, #12]
}
    7ab2:	4618      	mov	r0, r3
    7ab4:	3710      	adds	r7, #16
    7ab6:	46bd      	mov	sp, r7
    7ab8:	bd80      	pop	{r7, pc}
    7aba:	bf00      	nop
    7abc:	0000791d 	.word	0x0000791d

00007ac0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7ac0:	b580      	push	{r7, lr}
    7ac2:	b082      	sub	sp, #8
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	6078      	str	r0, [r7, #4]
    7ac8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7aca:	687b      	ldr	r3, [r7, #4]
    7acc:	683a      	ldr	r2, [r7, #0]
    7ace:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7ad0:	2103      	movs	r1, #3
    7ad2:	6878      	ldr	r0, [r7, #4]
    7ad4:	4b02      	ldr	r3, [pc, #8]	; (7ae0 <hri_tc_write_CTRLA_reg+0x20>)
    7ad6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ad8:	bf00      	nop
    7ada:	3708      	adds	r7, #8
    7adc:	46bd      	mov	sp, r7
    7ade:	bd80      	pop	{r7, pc}
    7ae0:	0000791d 	.word	0x0000791d

00007ae4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7ae4:	b480      	push	{r7}
    7ae6:	b083      	sub	sp, #12
    7ae8:	af00      	add	r7, sp, #0
    7aea:	6078      	str	r0, [r7, #4]
    7aec:	460b      	mov	r3, r1
    7aee:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7af0:	687b      	ldr	r3, [r7, #4]
    7af2:	887a      	ldrh	r2, [r7, #2]
    7af4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7af6:	bf00      	nop
    7af8:	370c      	adds	r7, #12
    7afa:	46bd      	mov	sp, r7
    7afc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b00:	4770      	bx	lr

00007b02 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7b02:	b480      	push	{r7}
    7b04:	b083      	sub	sp, #12
    7b06:	af00      	add	r7, sp, #0
    7b08:	6078      	str	r0, [r7, #4]
    7b0a:	460b      	mov	r3, r1
    7b0c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	78fa      	ldrb	r2, [r7, #3]
    7b12:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b14:	bf00      	nop
    7b16:	370c      	adds	r7, #12
    7b18:	46bd      	mov	sp, r7
    7b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b1e:	4770      	bx	lr

00007b20 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7b20:	b480      	push	{r7}
    7b22:	b083      	sub	sp, #12
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
    7b28:	460b      	mov	r3, r1
    7b2a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7b2c:	687b      	ldr	r3, [r7, #4]
    7b2e:	78fa      	ldrb	r2, [r7, #3]
    7b30:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b32:	bf00      	nop
    7b34:	370c      	adds	r7, #12
    7b36:	46bd      	mov	sp, r7
    7b38:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b3c:	4770      	bx	lr
	...

00007b40 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7b40:	b580      	push	{r7, lr}
    7b42:	b082      	sub	sp, #8
    7b44:	af00      	add	r7, sp, #0
    7b46:	6078      	str	r0, [r7, #4]
    7b48:	460b      	mov	r3, r1
    7b4a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	78fa      	ldrb	r2, [r7, #3]
    7b50:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7b52:	2120      	movs	r1, #32
    7b54:	6878      	ldr	r0, [r7, #4]
    7b56:	4b03      	ldr	r3, [pc, #12]	; (7b64 <hri_tccount8_write_PER_reg+0x24>)
    7b58:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b5a:	bf00      	nop
    7b5c:	3708      	adds	r7, #8
    7b5e:	46bd      	mov	sp, r7
    7b60:	bd80      	pop	{r7, pc}
    7b62:	bf00      	nop
    7b64:	0000791d 	.word	0x0000791d

00007b68 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7b68:	b580      	push	{r7, lr}
    7b6a:	b082      	sub	sp, #8
    7b6c:	af00      	add	r7, sp, #0
    7b6e:	6078      	str	r0, [r7, #4]
    7b70:	460b      	mov	r3, r1
    7b72:	70fb      	strb	r3, [r7, #3]
    7b74:	4613      	mov	r3, r2
    7b76:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7b78:	78fb      	ldrb	r3, [r7, #3]
    7b7a:	687a      	ldr	r2, [r7, #4]
    7b7c:	4413      	add	r3, r2
    7b7e:	78ba      	ldrb	r2, [r7, #2]
    7b80:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b82:	21c0      	movs	r1, #192	; 0xc0
    7b84:	6878      	ldr	r0, [r7, #4]
    7b86:	4b03      	ldr	r3, [pc, #12]	; (7b94 <hri_tccount8_write_CC_reg+0x2c>)
    7b88:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b8a:	bf00      	nop
    7b8c:	3708      	adds	r7, #8
    7b8e:	46bd      	mov	sp, r7
    7b90:	bd80      	pop	{r7, pc}
    7b92:	bf00      	nop
    7b94:	0000791d 	.word	0x0000791d

00007b98 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7b98:	b580      	push	{r7, lr}
    7b9a:	b082      	sub	sp, #8
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	6078      	str	r0, [r7, #4]
    7ba0:	460b      	mov	r3, r1
    7ba2:	70fb      	strb	r3, [r7, #3]
    7ba4:	4613      	mov	r3, r2
    7ba6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7ba8:	78fb      	ldrb	r3, [r7, #3]
    7baa:	687a      	ldr	r2, [r7, #4]
    7bac:	330c      	adds	r3, #12
    7bae:	005b      	lsls	r3, r3, #1
    7bb0:	4413      	add	r3, r2
    7bb2:	883a      	ldrh	r2, [r7, #0]
    7bb4:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7bb6:	21c0      	movs	r1, #192	; 0xc0
    7bb8:	6878      	ldr	r0, [r7, #4]
    7bba:	4b03      	ldr	r3, [pc, #12]	; (7bc8 <hri_tccount16_write_CC_reg+0x30>)
    7bbc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7bbe:	bf00      	nop
    7bc0:	3708      	adds	r7, #8
    7bc2:	46bd      	mov	sp, r7
    7bc4:	bd80      	pop	{r7, pc}
    7bc6:	bf00      	nop
    7bc8:	0000791d 	.word	0x0000791d

00007bcc <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b084      	sub	sp, #16
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	60f8      	str	r0, [r7, #12]
    7bd4:	460b      	mov	r3, r1
    7bd6:	607a      	str	r2, [r7, #4]
    7bd8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7bda:	7afb      	ldrb	r3, [r7, #11]
    7bdc:	68fa      	ldr	r2, [r7, #12]
    7bde:	3306      	adds	r3, #6
    7be0:	009b      	lsls	r3, r3, #2
    7be2:	4413      	add	r3, r2
    7be4:	687a      	ldr	r2, [r7, #4]
    7be6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7be8:	21c0      	movs	r1, #192	; 0xc0
    7bea:	68f8      	ldr	r0, [r7, #12]
    7bec:	4b02      	ldr	r3, [pc, #8]	; (7bf8 <hri_tccount32_write_CC_reg+0x2c>)
    7bee:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7bf0:	bf00      	nop
    7bf2:	3710      	adds	r7, #16
    7bf4:	46bd      	mov	sp, r7
    7bf6:	bd80      	pop	{r7, pc}
    7bf8:	0000791d 	.word	0x0000791d

00007bfc <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7bfc:	b580      	push	{r7, lr}
    7bfe:	b084      	sub	sp, #16
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
    7c04:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7c06:	6838      	ldr	r0, [r7, #0]
    7c08:	4b93      	ldr	r3, [pc, #588]	; (7e58 <_timer_init+0x25c>)
    7c0a:	4798      	blx	r3
    7c0c:	4603      	mov	r3, r0
    7c0e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7c10:	687b      	ldr	r3, [r7, #4]
    7c12:	683a      	ldr	r2, [r7, #0]
    7c14:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7c16:	2299      	movs	r2, #153	; 0x99
    7c18:	4990      	ldr	r1, [pc, #576]	; (7e5c <_timer_init+0x260>)
    7c1a:	2001      	movs	r0, #1
    7c1c:	4b90      	ldr	r3, [pc, #576]	; (7e60 <_timer_init+0x264>)
    7c1e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7c20:	2101      	movs	r1, #1
    7c22:	6838      	ldr	r0, [r7, #0]
    7c24:	4b8f      	ldr	r3, [pc, #572]	; (7e64 <_timer_init+0x268>)
    7c26:	4798      	blx	r3
    7c28:	4603      	mov	r3, r0
    7c2a:	f083 0301 	eor.w	r3, r3, #1
    7c2e:	b2db      	uxtb	r3, r3
    7c30:	2b00      	cmp	r3, #0
    7c32:	d011      	beq.n	7c58 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7c34:	2102      	movs	r1, #2
    7c36:	6838      	ldr	r0, [r7, #0]
    7c38:	4b8b      	ldr	r3, [pc, #556]	; (7e68 <_timer_init+0x26c>)
    7c3a:	4798      	blx	r3
    7c3c:	4603      	mov	r3, r0
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d006      	beq.n	7c50 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7c42:	6838      	ldr	r0, [r7, #0]
    7c44:	4b89      	ldr	r3, [pc, #548]	; (7e6c <_timer_init+0x270>)
    7c46:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7c48:	2102      	movs	r1, #2
    7c4a:	6838      	ldr	r0, [r7, #0]
    7c4c:	4b88      	ldr	r3, [pc, #544]	; (7e70 <_timer_init+0x274>)
    7c4e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7c50:	2101      	movs	r1, #1
    7c52:	6838      	ldr	r0, [r7, #0]
    7c54:	4b87      	ldr	r3, [pc, #540]	; (7e74 <_timer_init+0x278>)
    7c56:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7c58:	2101      	movs	r1, #1
    7c5a:	6838      	ldr	r0, [r7, #0]
    7c5c:	4b84      	ldr	r3, [pc, #528]	; (7e70 <_timer_init+0x274>)
    7c5e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7c60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c64:	4984      	ldr	r1, [pc, #528]	; (7e78 <_timer_init+0x27c>)
    7c66:	4613      	mov	r3, r2
    7c68:	009b      	lsls	r3, r3, #2
    7c6a:	4413      	add	r3, r2
    7c6c:	009b      	lsls	r3, r3, #2
    7c6e:	440b      	add	r3, r1
    7c70:	3304      	adds	r3, #4
    7c72:	681b      	ldr	r3, [r3, #0]
    7c74:	4619      	mov	r1, r3
    7c76:	6838      	ldr	r0, [r7, #0]
    7c78:	4b7e      	ldr	r3, [pc, #504]	; (7e74 <_timer_init+0x278>)
    7c7a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7c7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c80:	497d      	ldr	r1, [pc, #500]	; (7e78 <_timer_init+0x27c>)
    7c82:	4613      	mov	r3, r2
    7c84:	009b      	lsls	r3, r3, #2
    7c86:	4413      	add	r3, r2
    7c88:	009b      	lsls	r3, r3, #2
    7c8a:	440b      	add	r3, r1
    7c8c:	330a      	adds	r3, #10
    7c8e:	781b      	ldrb	r3, [r3, #0]
    7c90:	4619      	mov	r1, r3
    7c92:	6838      	ldr	r0, [r7, #0]
    7c94:	4b79      	ldr	r3, [pc, #484]	; (7e7c <_timer_init+0x280>)
    7c96:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7c98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c9c:	4976      	ldr	r1, [pc, #472]	; (7e78 <_timer_init+0x27c>)
    7c9e:	4613      	mov	r3, r2
    7ca0:	009b      	lsls	r3, r3, #2
    7ca2:	4413      	add	r3, r2
    7ca4:	009b      	lsls	r3, r3, #2
    7ca6:	440b      	add	r3, r1
    7ca8:	3308      	adds	r3, #8
    7caa:	881b      	ldrh	r3, [r3, #0]
    7cac:	4619      	mov	r1, r3
    7cae:	6838      	ldr	r0, [r7, #0]
    7cb0:	4b73      	ldr	r3, [pc, #460]	; (7e80 <_timer_init+0x284>)
    7cb2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7cb4:	2101      	movs	r1, #1
    7cb6:	6838      	ldr	r0, [r7, #0]
    7cb8:	4b72      	ldr	r3, [pc, #456]	; (7e84 <_timer_init+0x288>)
    7cba:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7cbc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cc0:	496d      	ldr	r1, [pc, #436]	; (7e78 <_timer_init+0x27c>)
    7cc2:	4613      	mov	r3, r2
    7cc4:	009b      	lsls	r3, r3, #2
    7cc6:	4413      	add	r3, r2
    7cc8:	009b      	lsls	r3, r3, #2
    7cca:	440b      	add	r3, r1
    7ccc:	3304      	adds	r3, #4
    7cce:	681b      	ldr	r3, [r3, #0]
    7cd0:	f003 030c 	and.w	r3, r3, #12
    7cd4:	2b08      	cmp	r3, #8
    7cd6:	d11e      	bne.n	7d16 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7cd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cdc:	4966      	ldr	r1, [pc, #408]	; (7e78 <_timer_init+0x27c>)
    7cde:	4613      	mov	r3, r2
    7ce0:	009b      	lsls	r3, r3, #2
    7ce2:	4413      	add	r3, r2
    7ce4:	009b      	lsls	r3, r3, #2
    7ce6:	440b      	add	r3, r1
    7ce8:	330c      	adds	r3, #12
    7cea:	681b      	ldr	r3, [r3, #0]
    7cec:	461a      	mov	r2, r3
    7cee:	2100      	movs	r1, #0
    7cf0:	6838      	ldr	r0, [r7, #0]
    7cf2:	4b65      	ldr	r3, [pc, #404]	; (7e88 <_timer_init+0x28c>)
    7cf4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7cf6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cfa:	495f      	ldr	r1, [pc, #380]	; (7e78 <_timer_init+0x27c>)
    7cfc:	4613      	mov	r3, r2
    7cfe:	009b      	lsls	r3, r3, #2
    7d00:	4413      	add	r3, r2
    7d02:	009b      	lsls	r3, r3, #2
    7d04:	440b      	add	r3, r1
    7d06:	3310      	adds	r3, #16
    7d08:	681b      	ldr	r3, [r3, #0]
    7d0a:	461a      	mov	r2, r3
    7d0c:	2101      	movs	r1, #1
    7d0e:	6838      	ldr	r0, [r7, #0]
    7d10:	4b5d      	ldr	r3, [pc, #372]	; (7e88 <_timer_init+0x28c>)
    7d12:	4798      	blx	r3
    7d14:	e06a      	b.n	7dec <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7d16:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d1a:	4957      	ldr	r1, [pc, #348]	; (7e78 <_timer_init+0x27c>)
    7d1c:	4613      	mov	r3, r2
    7d1e:	009b      	lsls	r3, r3, #2
    7d20:	4413      	add	r3, r2
    7d22:	009b      	lsls	r3, r3, #2
    7d24:	440b      	add	r3, r1
    7d26:	3304      	adds	r3, #4
    7d28:	681b      	ldr	r3, [r3, #0]
    7d2a:	f003 030c 	and.w	r3, r3, #12
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d120      	bne.n	7d74 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7d32:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d36:	4950      	ldr	r1, [pc, #320]	; (7e78 <_timer_init+0x27c>)
    7d38:	4613      	mov	r3, r2
    7d3a:	009b      	lsls	r3, r3, #2
    7d3c:	4413      	add	r3, r2
    7d3e:	009b      	lsls	r3, r3, #2
    7d40:	440b      	add	r3, r1
    7d42:	330c      	adds	r3, #12
    7d44:	681b      	ldr	r3, [r3, #0]
    7d46:	b29b      	uxth	r3, r3
    7d48:	461a      	mov	r2, r3
    7d4a:	2100      	movs	r1, #0
    7d4c:	6838      	ldr	r0, [r7, #0]
    7d4e:	4b4f      	ldr	r3, [pc, #316]	; (7e8c <_timer_init+0x290>)
    7d50:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7d52:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d56:	4948      	ldr	r1, [pc, #288]	; (7e78 <_timer_init+0x27c>)
    7d58:	4613      	mov	r3, r2
    7d5a:	009b      	lsls	r3, r3, #2
    7d5c:	4413      	add	r3, r2
    7d5e:	009b      	lsls	r3, r3, #2
    7d60:	440b      	add	r3, r1
    7d62:	3310      	adds	r3, #16
    7d64:	681b      	ldr	r3, [r3, #0]
    7d66:	b29b      	uxth	r3, r3
    7d68:	461a      	mov	r2, r3
    7d6a:	2101      	movs	r1, #1
    7d6c:	6838      	ldr	r0, [r7, #0]
    7d6e:	4b47      	ldr	r3, [pc, #284]	; (7e8c <_timer_init+0x290>)
    7d70:	4798      	blx	r3
    7d72:	e03b      	b.n	7dec <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7d74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d78:	493f      	ldr	r1, [pc, #252]	; (7e78 <_timer_init+0x27c>)
    7d7a:	4613      	mov	r3, r2
    7d7c:	009b      	lsls	r3, r3, #2
    7d7e:	4413      	add	r3, r2
    7d80:	009b      	lsls	r3, r3, #2
    7d82:	440b      	add	r3, r1
    7d84:	3304      	adds	r3, #4
    7d86:	681b      	ldr	r3, [r3, #0]
    7d88:	f003 030c 	and.w	r3, r3, #12
    7d8c:	2b04      	cmp	r3, #4
    7d8e:	d12d      	bne.n	7dec <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7d90:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d94:	4938      	ldr	r1, [pc, #224]	; (7e78 <_timer_init+0x27c>)
    7d96:	4613      	mov	r3, r2
    7d98:	009b      	lsls	r3, r3, #2
    7d9a:	4413      	add	r3, r2
    7d9c:	009b      	lsls	r3, r3, #2
    7d9e:	440b      	add	r3, r1
    7da0:	330c      	adds	r3, #12
    7da2:	681b      	ldr	r3, [r3, #0]
    7da4:	b2db      	uxtb	r3, r3
    7da6:	461a      	mov	r2, r3
    7da8:	2100      	movs	r1, #0
    7daa:	6838      	ldr	r0, [r7, #0]
    7dac:	4b38      	ldr	r3, [pc, #224]	; (7e90 <_timer_init+0x294>)
    7dae:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7db0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7db4:	4930      	ldr	r1, [pc, #192]	; (7e78 <_timer_init+0x27c>)
    7db6:	4613      	mov	r3, r2
    7db8:	009b      	lsls	r3, r3, #2
    7dba:	4413      	add	r3, r2
    7dbc:	009b      	lsls	r3, r3, #2
    7dbe:	440b      	add	r3, r1
    7dc0:	3310      	adds	r3, #16
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	b2db      	uxtb	r3, r3
    7dc6:	461a      	mov	r2, r3
    7dc8:	2101      	movs	r1, #1
    7dca:	6838      	ldr	r0, [r7, #0]
    7dcc:	4b30      	ldr	r3, [pc, #192]	; (7e90 <_timer_init+0x294>)
    7dce:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7dd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dd4:	4928      	ldr	r1, [pc, #160]	; (7e78 <_timer_init+0x27c>)
    7dd6:	4613      	mov	r3, r2
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	4413      	add	r3, r2
    7ddc:	009b      	lsls	r3, r3, #2
    7dde:	440b      	add	r3, r1
    7de0:	330b      	adds	r3, #11
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	4619      	mov	r1, r3
    7de6:	6838      	ldr	r0, [r7, #0]
    7de8:	4b2a      	ldr	r3, [pc, #168]	; (7e94 <_timer_init+0x298>)
    7dea:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7dec:	6838      	ldr	r0, [r7, #0]
    7dee:	4b2a      	ldr	r3, [pc, #168]	; (7e98 <_timer_init+0x29c>)
    7df0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7df2:	6879      	ldr	r1, [r7, #4]
    7df4:	6838      	ldr	r0, [r7, #0]
    7df6:	4b29      	ldr	r3, [pc, #164]	; (7e9c <_timer_init+0x2a0>)
    7df8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7dfa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dfe:	491e      	ldr	r1, [pc, #120]	; (7e78 <_timer_init+0x27c>)
    7e00:	4613      	mov	r3, r2
    7e02:	009b      	lsls	r3, r3, #2
    7e04:	4413      	add	r3, r2
    7e06:	009b      	lsls	r3, r3, #2
    7e08:	440b      	add	r3, r1
    7e0a:	3302      	adds	r3, #2
    7e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e10:	4618      	mov	r0, r3
    7e12:	4b23      	ldr	r3, [pc, #140]	; (7ea0 <_timer_init+0x2a4>)
    7e14:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7e16:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e1a:	4917      	ldr	r1, [pc, #92]	; (7e78 <_timer_init+0x27c>)
    7e1c:	4613      	mov	r3, r2
    7e1e:	009b      	lsls	r3, r3, #2
    7e20:	4413      	add	r3, r2
    7e22:	009b      	lsls	r3, r3, #2
    7e24:	440b      	add	r3, r1
    7e26:	3302      	adds	r3, #2
    7e28:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e2c:	4618      	mov	r0, r3
    7e2e:	4b1d      	ldr	r3, [pc, #116]	; (7ea4 <_timer_init+0x2a8>)
    7e30:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7e32:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e36:	4910      	ldr	r1, [pc, #64]	; (7e78 <_timer_init+0x27c>)
    7e38:	4613      	mov	r3, r2
    7e3a:	009b      	lsls	r3, r3, #2
    7e3c:	4413      	add	r3, r2
    7e3e:	009b      	lsls	r3, r3, #2
    7e40:	440b      	add	r3, r1
    7e42:	3302      	adds	r3, #2
    7e44:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e48:	4618      	mov	r0, r3
    7e4a:	4b17      	ldr	r3, [pc, #92]	; (7ea8 <_timer_init+0x2ac>)
    7e4c:	4798      	blx	r3

	return ERR_NONE;
    7e4e:	2300      	movs	r3, #0
}
    7e50:	4618      	mov	r0, r3
    7e52:	3710      	adds	r7, #16
    7e54:	46bd      	mov	sp, r7
    7e56:	bd80      	pop	{r7, pc}
    7e58:	00008351 	.word	0x00008351
    7e5c:	0000ef7c 	.word	0x0000ef7c
    7e60:	00003931 	.word	0x00003931
    7e64:	00007941 	.word	0x00007941
    7e68:	00007a91 	.word	0x00007a91
    7e6c:	00007a69 	.word	0x00007a69
    7e70:	0000791d 	.word	0x0000791d
    7e74:	00007ac1 	.word	0x00007ac1
    7e78:	20000048 	.word	0x20000048
    7e7c:	00007b21 	.word	0x00007b21
    7e80:	00007ae5 	.word	0x00007ae5
    7e84:	00007b03 	.word	0x00007b03
    7e88:	00007bcd 	.word	0x00007bcd
    7e8c:	00007b99 	.word	0x00007b99
    7e90:	00007b69 	.word	0x00007b69
    7e94:	00007b41 	.word	0x00007b41
    7e98:	000079c5 	.word	0x000079c5
    7e9c:	000083b9 	.word	0x000083b9
    7ea0:	0000789d 	.word	0x0000789d
    7ea4:	000078e1 	.word	0x000078e1
    7ea8:	00007861 	.word	0x00007861

00007eac <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7eac:	b580      	push	{r7, lr}
    7eae:	b084      	sub	sp, #16
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	6078      	str	r0, [r7, #4]
    7eb4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7eb6:	6838      	ldr	r0, [r7, #0]
    7eb8:	4b73      	ldr	r3, [pc, #460]	; (8088 <_pwm_init+0x1dc>)
    7eba:	4798      	blx	r3
    7ebc:	4603      	mov	r3, r0
    7ebe:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	683a      	ldr	r2, [r7, #0]
    7ec4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7ec6:	2101      	movs	r1, #1
    7ec8:	6838      	ldr	r0, [r7, #0]
    7eca:	4b70      	ldr	r3, [pc, #448]	; (808c <_pwm_init+0x1e0>)
    7ecc:	4798      	blx	r3
    7ece:	4603      	mov	r3, r0
    7ed0:	f083 0301 	eor.w	r3, r3, #1
    7ed4:	b2db      	uxtb	r3, r3
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d011      	beq.n	7efe <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7eda:	2102      	movs	r1, #2
    7edc:	6838      	ldr	r0, [r7, #0]
    7ede:	4b6c      	ldr	r3, [pc, #432]	; (8090 <_pwm_init+0x1e4>)
    7ee0:	4798      	blx	r3
    7ee2:	4603      	mov	r3, r0
    7ee4:	2b00      	cmp	r3, #0
    7ee6:	d006      	beq.n	7ef6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7ee8:	6838      	ldr	r0, [r7, #0]
    7eea:	4b6a      	ldr	r3, [pc, #424]	; (8094 <_pwm_init+0x1e8>)
    7eec:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7eee:	2102      	movs	r1, #2
    7ef0:	6838      	ldr	r0, [r7, #0]
    7ef2:	4b69      	ldr	r3, [pc, #420]	; (8098 <_pwm_init+0x1ec>)
    7ef4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7ef6:	2101      	movs	r1, #1
    7ef8:	6838      	ldr	r0, [r7, #0]
    7efa:	4b68      	ldr	r3, [pc, #416]	; (809c <_pwm_init+0x1f0>)
    7efc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7efe:	2101      	movs	r1, #1
    7f00:	6838      	ldr	r0, [r7, #0]
    7f02:	4b65      	ldr	r3, [pc, #404]	; (8098 <_pwm_init+0x1ec>)
    7f04:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7f06:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f0a:	4965      	ldr	r1, [pc, #404]	; (80a0 <_pwm_init+0x1f4>)
    7f0c:	4613      	mov	r3, r2
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	4413      	add	r3, r2
    7f12:	009b      	lsls	r3, r3, #2
    7f14:	440b      	add	r3, r1
    7f16:	3304      	adds	r3, #4
    7f18:	681b      	ldr	r3, [r3, #0]
    7f1a:	4619      	mov	r1, r3
    7f1c:	6838      	ldr	r0, [r7, #0]
    7f1e:	4b5f      	ldr	r3, [pc, #380]	; (809c <_pwm_init+0x1f0>)
    7f20:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7f22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f26:	495e      	ldr	r1, [pc, #376]	; (80a0 <_pwm_init+0x1f4>)
    7f28:	4613      	mov	r3, r2
    7f2a:	009b      	lsls	r3, r3, #2
    7f2c:	4413      	add	r3, r2
    7f2e:	009b      	lsls	r3, r3, #2
    7f30:	440b      	add	r3, r1
    7f32:	330a      	adds	r3, #10
    7f34:	781b      	ldrb	r3, [r3, #0]
    7f36:	4619      	mov	r1, r3
    7f38:	6838      	ldr	r0, [r7, #0]
    7f3a:	4b5a      	ldr	r3, [pc, #360]	; (80a4 <_pwm_init+0x1f8>)
    7f3c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7f3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f42:	4957      	ldr	r1, [pc, #348]	; (80a0 <_pwm_init+0x1f4>)
    7f44:	4613      	mov	r3, r2
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	4413      	add	r3, r2
    7f4a:	009b      	lsls	r3, r3, #2
    7f4c:	440b      	add	r3, r1
    7f4e:	3308      	adds	r3, #8
    7f50:	881b      	ldrh	r3, [r3, #0]
    7f52:	4619      	mov	r1, r3
    7f54:	6838      	ldr	r0, [r7, #0]
    7f56:	4b54      	ldr	r3, [pc, #336]	; (80a8 <_pwm_init+0x1fc>)
    7f58:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7f5a:	2103      	movs	r1, #3
    7f5c:	6838      	ldr	r0, [r7, #0]
    7f5e:	4b53      	ldr	r3, [pc, #332]	; (80ac <_pwm_init+0x200>)
    7f60:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7f62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f66:	494e      	ldr	r1, [pc, #312]	; (80a0 <_pwm_init+0x1f4>)
    7f68:	4613      	mov	r3, r2
    7f6a:	009b      	lsls	r3, r3, #2
    7f6c:	4413      	add	r3, r2
    7f6e:	009b      	lsls	r3, r3, #2
    7f70:	440b      	add	r3, r1
    7f72:	3304      	adds	r3, #4
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	f003 030c 	and.w	r3, r3, #12
    7f7a:	2b08      	cmp	r3, #8
    7f7c:	d11e      	bne.n	7fbc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7f7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f82:	4947      	ldr	r1, [pc, #284]	; (80a0 <_pwm_init+0x1f4>)
    7f84:	4613      	mov	r3, r2
    7f86:	009b      	lsls	r3, r3, #2
    7f88:	4413      	add	r3, r2
    7f8a:	009b      	lsls	r3, r3, #2
    7f8c:	440b      	add	r3, r1
    7f8e:	330c      	adds	r3, #12
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	461a      	mov	r2, r3
    7f94:	2100      	movs	r1, #0
    7f96:	6838      	ldr	r0, [r7, #0]
    7f98:	4b45      	ldr	r3, [pc, #276]	; (80b0 <_pwm_init+0x204>)
    7f9a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7f9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fa0:	493f      	ldr	r1, [pc, #252]	; (80a0 <_pwm_init+0x1f4>)
    7fa2:	4613      	mov	r3, r2
    7fa4:	009b      	lsls	r3, r3, #2
    7fa6:	4413      	add	r3, r2
    7fa8:	009b      	lsls	r3, r3, #2
    7faa:	440b      	add	r3, r1
    7fac:	3310      	adds	r3, #16
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	461a      	mov	r2, r3
    7fb2:	2101      	movs	r1, #1
    7fb4:	6838      	ldr	r0, [r7, #0]
    7fb6:	4b3e      	ldr	r3, [pc, #248]	; (80b0 <_pwm_init+0x204>)
    7fb8:	4798      	blx	r3
    7fba:	e031      	b.n	8020 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7fbc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fc0:	4937      	ldr	r1, [pc, #220]	; (80a0 <_pwm_init+0x1f4>)
    7fc2:	4613      	mov	r3, r2
    7fc4:	009b      	lsls	r3, r3, #2
    7fc6:	4413      	add	r3, r2
    7fc8:	009b      	lsls	r3, r3, #2
    7fca:	440b      	add	r3, r1
    7fcc:	3304      	adds	r3, #4
    7fce:	681b      	ldr	r3, [r3, #0]
    7fd0:	f003 030c 	and.w	r3, r3, #12
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d120      	bne.n	801a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7fd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fdc:	4930      	ldr	r1, [pc, #192]	; (80a0 <_pwm_init+0x1f4>)
    7fde:	4613      	mov	r3, r2
    7fe0:	009b      	lsls	r3, r3, #2
    7fe2:	4413      	add	r3, r2
    7fe4:	009b      	lsls	r3, r3, #2
    7fe6:	440b      	add	r3, r1
    7fe8:	330c      	adds	r3, #12
    7fea:	681b      	ldr	r3, [r3, #0]
    7fec:	b29b      	uxth	r3, r3
    7fee:	461a      	mov	r2, r3
    7ff0:	2100      	movs	r1, #0
    7ff2:	6838      	ldr	r0, [r7, #0]
    7ff4:	4b2f      	ldr	r3, [pc, #188]	; (80b4 <_pwm_init+0x208>)
    7ff6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7ff8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ffc:	4928      	ldr	r1, [pc, #160]	; (80a0 <_pwm_init+0x1f4>)
    7ffe:	4613      	mov	r3, r2
    8000:	009b      	lsls	r3, r3, #2
    8002:	4413      	add	r3, r2
    8004:	009b      	lsls	r3, r3, #2
    8006:	440b      	add	r3, r1
    8008:	3310      	adds	r3, #16
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	b29b      	uxth	r3, r3
    800e:	461a      	mov	r2, r3
    8010:	2101      	movs	r1, #1
    8012:	6838      	ldr	r0, [r7, #0]
    8014:	4b27      	ldr	r3, [pc, #156]	; (80b4 <_pwm_init+0x208>)
    8016:	4798      	blx	r3
    8018:	e002      	b.n	8020 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    801a:	f04f 33ff 	mov.w	r3, #4294967295
    801e:	e02e      	b.n	807e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8020:	6879      	ldr	r1, [r7, #4]
    8022:	6838      	ldr	r0, [r7, #0]
    8024:	4b24      	ldr	r3, [pc, #144]	; (80b8 <_pwm_init+0x20c>)
    8026:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8028:	f997 200f 	ldrsb.w	r2, [r7, #15]
    802c:	491c      	ldr	r1, [pc, #112]	; (80a0 <_pwm_init+0x1f4>)
    802e:	4613      	mov	r3, r2
    8030:	009b      	lsls	r3, r3, #2
    8032:	4413      	add	r3, r2
    8034:	009b      	lsls	r3, r3, #2
    8036:	440b      	add	r3, r1
    8038:	3302      	adds	r3, #2
    803a:	f9b3 3000 	ldrsh.w	r3, [r3]
    803e:	4618      	mov	r0, r3
    8040:	4b1e      	ldr	r3, [pc, #120]	; (80bc <_pwm_init+0x210>)
    8042:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8044:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8048:	4915      	ldr	r1, [pc, #84]	; (80a0 <_pwm_init+0x1f4>)
    804a:	4613      	mov	r3, r2
    804c:	009b      	lsls	r3, r3, #2
    804e:	4413      	add	r3, r2
    8050:	009b      	lsls	r3, r3, #2
    8052:	440b      	add	r3, r1
    8054:	3302      	adds	r3, #2
    8056:	f9b3 3000 	ldrsh.w	r3, [r3]
    805a:	4618      	mov	r0, r3
    805c:	4b18      	ldr	r3, [pc, #96]	; (80c0 <_pwm_init+0x214>)
    805e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8060:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8064:	490e      	ldr	r1, [pc, #56]	; (80a0 <_pwm_init+0x1f4>)
    8066:	4613      	mov	r3, r2
    8068:	009b      	lsls	r3, r3, #2
    806a:	4413      	add	r3, r2
    806c:	009b      	lsls	r3, r3, #2
    806e:	440b      	add	r3, r1
    8070:	3302      	adds	r3, #2
    8072:	f9b3 3000 	ldrsh.w	r3, [r3]
    8076:	4618      	mov	r0, r3
    8078:	4b12      	ldr	r3, [pc, #72]	; (80c4 <_pwm_init+0x218>)
    807a:	4798      	blx	r3

	return 0;
    807c:	2300      	movs	r3, #0
}
    807e:	4618      	mov	r0, r3
    8080:	3710      	adds	r7, #16
    8082:	46bd      	mov	sp, r7
    8084:	bd80      	pop	{r7, pc}
    8086:	bf00      	nop
    8088:	00008351 	.word	0x00008351
    808c:	00007941 	.word	0x00007941
    8090:	00007a91 	.word	0x00007a91
    8094:	00007a69 	.word	0x00007a69
    8098:	0000791d 	.word	0x0000791d
    809c:	00007ac1 	.word	0x00007ac1
    80a0:	20000048 	.word	0x20000048
    80a4:	00007b21 	.word	0x00007b21
    80a8:	00007ae5 	.word	0x00007ae5
    80ac:	00007b03 	.word	0x00007b03
    80b0:	00007bcd 	.word	0x00007bcd
    80b4:	00007b99 	.word	0x00007b99
    80b8:	000083b9 	.word	0x000083b9
    80bc:	0000789d 	.word	0x0000789d
    80c0:	000078e1 	.word	0x000078e1
    80c4:	00007861 	.word	0x00007861

000080c8 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    80c8:	b580      	push	{r7, lr}
    80ca:	b082      	sub	sp, #8
    80cc:	af00      	add	r7, sp, #0
    80ce:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    80d0:	687b      	ldr	r3, [r7, #4]
    80d2:	68db      	ldr	r3, [r3, #12]
    80d4:	4618      	mov	r0, r3
    80d6:	4b03      	ldr	r3, [pc, #12]	; (80e4 <_timer_start+0x1c>)
    80d8:	4798      	blx	r3
}
    80da:	bf00      	nop
    80dc:	3708      	adds	r7, #8
    80de:	46bd      	mov	sp, r7
    80e0:	bd80      	pop	{r7, pc}
    80e2:	bf00      	nop
    80e4:	00007a09 	.word	0x00007a09

000080e8 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    80e8:	b580      	push	{r7, lr}
    80ea:	b082      	sub	sp, #8
    80ec:	af00      	add	r7, sp, #0
    80ee:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	691b      	ldr	r3, [r3, #16]
    80f4:	4618      	mov	r0, r3
    80f6:	4b03      	ldr	r3, [pc, #12]	; (8104 <_pwm_enable+0x1c>)
    80f8:	4798      	blx	r3
}
    80fa:	bf00      	nop
    80fc:	3708      	adds	r7, #8
    80fe:	46bd      	mov	sp, r7
    8100:	bd80      	pop	{r7, pc}
    8102:	bf00      	nop
    8104:	00007a09 	.word	0x00007a09

00008108 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    8108:	b580      	push	{r7, lr}
    810a:	b082      	sub	sp, #8
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	68db      	ldr	r3, [r3, #12]
    8114:	4618      	mov	r0, r3
    8116:	4b03      	ldr	r3, [pc, #12]	; (8124 <_timer_stop+0x1c>)
    8118:	4798      	blx	r3
}
    811a:	bf00      	nop
    811c:	3708      	adds	r7, #8
    811e:	46bd      	mov	sp, r7
    8120:	bd80      	pop	{r7, pc}
    8122:	bf00      	nop
    8124:	00007a69 	.word	0x00007a69

00008128 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    8128:	b580      	push	{r7, lr}
    812a:	b082      	sub	sp, #8
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8130:	687b      	ldr	r3, [r7, #4]
    8132:	68db      	ldr	r3, [r3, #12]
    8134:	4618      	mov	r0, r3
    8136:	4b03      	ldr	r3, [pc, #12]	; (8144 <_timer_is_started+0x1c>)
    8138:	4798      	blx	r3
    813a:	4603      	mov	r3, r0
}
    813c:	4618      	mov	r0, r3
    813e:	3708      	adds	r7, #8
    8140:	46bd      	mov	sp, r7
    8142:	bd80      	pop	{r7, pc}
    8144:	00007a31 	.word	0x00007a31

00008148 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8148:	b580      	push	{r7, lr}
    814a:	b082      	sub	sp, #8
    814c:	af00      	add	r7, sp, #0
    814e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	691b      	ldr	r3, [r3, #16]
    8154:	4618      	mov	r0, r3
    8156:	4b03      	ldr	r3, [pc, #12]	; (8164 <_pwm_is_enabled+0x1c>)
    8158:	4798      	blx	r3
    815a:	4603      	mov	r3, r0
}
    815c:	4618      	mov	r0, r3
    815e:	3708      	adds	r7, #8
    8160:	46bd      	mov	sp, r7
    8162:	bd80      	pop	{r7, pc}
    8164:	00007a31 	.word	0x00007a31

00008168 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8168:	b480      	push	{r7}
    816a:	af00      	add	r7, sp, #0
	return NULL;
    816c:	2300      	movs	r3, #0
}
    816e:	4618      	mov	r0, r3
    8170:	46bd      	mov	sp, r7
    8172:	f85d 7b04 	ldr.w	r7, [sp], #4
    8176:	4770      	bx	lr

00008178 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8178:	b480      	push	{r7}
    817a:	af00      	add	r7, sp, #0
	return NULL;
    817c:	2300      	movs	r3, #0
}
    817e:	4618      	mov	r0, r3
    8180:	46bd      	mov	sp, r7
    8182:	f85d 7b04 	ldr.w	r7, [sp], #4
    8186:	4770      	bx	lr

00008188 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    8188:	b580      	push	{r7, lr}
    818a:	b084      	sub	sp, #16
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8190:	687b      	ldr	r3, [r7, #4]
    8192:	68db      	ldr	r3, [r3, #12]
    8194:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8196:	68f8      	ldr	r0, [r7, #12]
    8198:	4b0e      	ldr	r3, [pc, #56]	; (81d4 <_timer_set_irq+0x4c>)
    819a:	4798      	blx	r3
    819c:	4603      	mov	r3, r0
    819e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    81a0:	f240 12a7 	movw	r2, #423	; 0x1a7
    81a4:	490c      	ldr	r1, [pc, #48]	; (81d8 <_timer_set_irq+0x50>)
    81a6:	2001      	movs	r0, #1
    81a8:	4b0c      	ldr	r3, [pc, #48]	; (81dc <_timer_set_irq+0x54>)
    81aa:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    81ac:	f997 200b 	ldrsb.w	r2, [r7, #11]
    81b0:	490b      	ldr	r1, [pc, #44]	; (81e0 <_timer_set_irq+0x58>)
    81b2:	4613      	mov	r3, r2
    81b4:	009b      	lsls	r3, r3, #2
    81b6:	4413      	add	r3, r2
    81b8:	009b      	lsls	r3, r3, #2
    81ba:	440b      	add	r3, r1
    81bc:	3302      	adds	r3, #2
    81be:	f9b3 3000 	ldrsh.w	r3, [r3]
    81c2:	b2db      	uxtb	r3, r3
    81c4:	4618      	mov	r0, r3
    81c6:	4b07      	ldr	r3, [pc, #28]	; (81e4 <_timer_set_irq+0x5c>)
    81c8:	4798      	blx	r3
}
    81ca:	bf00      	nop
    81cc:	3710      	adds	r7, #16
    81ce:	46bd      	mov	sp, r7
    81d0:	bd80      	pop	{r7, pc}
    81d2:	bf00      	nop
    81d4:	00008351 	.word	0x00008351
    81d8:	0000ef7c 	.word	0x0000ef7c
    81dc:	00003931 	.word	0x00003931
    81e0:	20000048 	.word	0x20000048
    81e4:	0000417d 	.word	0x0000417d

000081e8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	b084      	sub	sp, #16
    81ec:	af00      	add	r7, sp, #0
    81ee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    81f0:	687b      	ldr	r3, [r7, #4]
    81f2:	68db      	ldr	r3, [r3, #12]
    81f4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    81f6:	68f8      	ldr	r0, [r7, #12]
    81f8:	4b07      	ldr	r3, [pc, #28]	; (8218 <tc_interrupt_handler+0x30>)
    81fa:	4798      	blx	r3
    81fc:	4603      	mov	r3, r0
    81fe:	2b00      	cmp	r3, #0
    8200:	d006      	beq.n	8210 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8202:	68f8      	ldr	r0, [r7, #12]
    8204:	4b05      	ldr	r3, [pc, #20]	; (821c <tc_interrupt_handler+0x34>)
    8206:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	6878      	ldr	r0, [r7, #4]
    820e:	4798      	blx	r3
	}
}
    8210:	bf00      	nop
    8212:	3710      	adds	r7, #16
    8214:	46bd      	mov	sp, r7
    8216:	bd80      	pop	{r7, pc}
    8218:	00007969 	.word	0x00007969
    821c:	00007991 	.word	0x00007991

00008220 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8220:	b580      	push	{r7, lr}
    8222:	b084      	sub	sp, #16
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8228:	687b      	ldr	r3, [r7, #4]
    822a:	691b      	ldr	r3, [r3, #16]
    822c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    822e:	68f8      	ldr	r0, [r7, #12]
    8230:	4b12      	ldr	r3, [pc, #72]	; (827c <tc_pwm_interrupt_handler+0x5c>)
    8232:	4798      	blx	r3
    8234:	4603      	mov	r3, r0
    8236:	2b00      	cmp	r3, #0
    8238:	d00a      	beq.n	8250 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    823a:	68f8      	ldr	r0, [r7, #12]
    823c:	4b10      	ldr	r3, [pc, #64]	; (8280 <tc_pwm_interrupt_handler+0x60>)
    823e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	2b00      	cmp	r3, #0
    8246:	d003      	beq.n	8250 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	681b      	ldr	r3, [r3, #0]
    824c:	6878      	ldr	r0, [r7, #4]
    824e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8250:	68f8      	ldr	r0, [r7, #12]
    8252:	4b0c      	ldr	r3, [pc, #48]	; (8284 <tc_pwm_interrupt_handler+0x64>)
    8254:	4798      	blx	r3
    8256:	4603      	mov	r3, r0
    8258:	2b00      	cmp	r3, #0
    825a:	d00a      	beq.n	8272 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    825c:	68f8      	ldr	r0, [r7, #12]
    825e:	4b0a      	ldr	r3, [pc, #40]	; (8288 <tc_pwm_interrupt_handler+0x68>)
    8260:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	685b      	ldr	r3, [r3, #4]
    8266:	2b00      	cmp	r3, #0
    8268:	d003      	beq.n	8272 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    826a:	687b      	ldr	r3, [r7, #4]
    826c:	685b      	ldr	r3, [r3, #4]
    826e:	6878      	ldr	r0, [r7, #4]
    8270:	4798      	blx	r3
		}
	}
}
    8272:	bf00      	nop
    8274:	3710      	adds	r7, #16
    8276:	46bd      	mov	sp, r7
    8278:	bd80      	pop	{r7, pc}
    827a:	bf00      	nop
    827c:	00007969 	.word	0x00007969
    8280:	00007991 	.word	0x00007991
    8284:	000079df 	.word	0x000079df
    8288:	000079ab 	.word	0x000079ab

0000828c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    828c:	b580      	push	{r7, lr}
    828e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8290:	4b03      	ldr	r3, [pc, #12]	; (82a0 <TC0_Handler+0x14>)
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	4618      	mov	r0, r3
    8296:	4b03      	ldr	r3, [pc, #12]	; (82a4 <TC0_Handler+0x18>)
    8298:	4798      	blx	r3
}
    829a:	bf00      	nop
    829c:	bd80      	pop	{r7, pc}
    829e:	bf00      	nop
    82a0:	20000710 	.word	0x20000710
    82a4:	000081e9 	.word	0x000081e9

000082a8 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    82a8:	b580      	push	{r7, lr}
    82aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    82ac:	4b03      	ldr	r3, [pc, #12]	; (82bc <TC1_Handler+0x14>)
    82ae:	681b      	ldr	r3, [r3, #0]
    82b0:	4618      	mov	r0, r3
    82b2:	4b03      	ldr	r3, [pc, #12]	; (82c0 <TC1_Handler+0x18>)
    82b4:	4798      	blx	r3
}
    82b6:	bf00      	nop
    82b8:	bd80      	pop	{r7, pc}
    82ba:	bf00      	nop
    82bc:	20000714 	.word	0x20000714
    82c0:	000081e9 	.word	0x000081e9

000082c4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    82c4:	b580      	push	{r7, lr}
    82c6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    82c8:	4b03      	ldr	r3, [pc, #12]	; (82d8 <TC2_Handler+0x14>)
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	4618      	mov	r0, r3
    82ce:	4b03      	ldr	r3, [pc, #12]	; (82dc <TC2_Handler+0x18>)
    82d0:	4798      	blx	r3
}
    82d2:	bf00      	nop
    82d4:	bd80      	pop	{r7, pc}
    82d6:	bf00      	nop
    82d8:	20000718 	.word	0x20000718
    82dc:	000081e9 	.word	0x000081e9

000082e0 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    82e0:	b580      	push	{r7, lr}
    82e2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    82e4:	4b03      	ldr	r3, [pc, #12]	; (82f4 <TC3_Handler+0x14>)
    82e6:	681b      	ldr	r3, [r3, #0]
    82e8:	4618      	mov	r0, r3
    82ea:	4b03      	ldr	r3, [pc, #12]	; (82f8 <TC3_Handler+0x18>)
    82ec:	4798      	blx	r3
}
    82ee:	bf00      	nop
    82f0:	bd80      	pop	{r7, pc}
    82f2:	bf00      	nop
    82f4:	2000071c 	.word	0x2000071c
    82f8:	000081e9 	.word	0x000081e9

000082fc <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    82fc:	b580      	push	{r7, lr}
    82fe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8300:	4b03      	ldr	r3, [pc, #12]	; (8310 <TC4_Handler+0x14>)
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	4618      	mov	r0, r3
    8306:	4b03      	ldr	r3, [pc, #12]	; (8314 <TC4_Handler+0x18>)
    8308:	4798      	blx	r3
}
    830a:	bf00      	nop
    830c:	bd80      	pop	{r7, pc}
    830e:	bf00      	nop
    8310:	20000720 	.word	0x20000720
    8314:	000081e9 	.word	0x000081e9

00008318 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8318:	b580      	push	{r7, lr}
    831a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    831c:	4b03      	ldr	r3, [pc, #12]	; (832c <TC5_Handler+0x14>)
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	4618      	mov	r0, r3
    8322:	4b03      	ldr	r3, [pc, #12]	; (8330 <TC5_Handler+0x18>)
    8324:	4798      	blx	r3
}
    8326:	bf00      	nop
    8328:	bd80      	pop	{r7, pc}
    832a:	bf00      	nop
    832c:	20000724 	.word	0x20000724
    8330:	000081e9 	.word	0x000081e9

00008334 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8334:	b580      	push	{r7, lr}
    8336:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8338:	4b03      	ldr	r3, [pc, #12]	; (8348 <TC7_Handler+0x14>)
    833a:	681b      	ldr	r3, [r3, #0]
    833c:	4618      	mov	r0, r3
    833e:	4b03      	ldr	r3, [pc, #12]	; (834c <TC7_Handler+0x18>)
    8340:	4798      	blx	r3
}
    8342:	bf00      	nop
    8344:	bd80      	pop	{r7, pc}
    8346:	bf00      	nop
    8348:	20000728 	.word	0x20000728
    834c:	00008221 	.word	0x00008221

00008350 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8350:	b580      	push	{r7, lr}
    8352:	b084      	sub	sp, #16
    8354:	af00      	add	r7, sp, #0
    8356:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8358:	6878      	ldr	r0, [r7, #4]
    835a:	4b13      	ldr	r3, [pc, #76]	; (83a8 <get_tc_index+0x58>)
    835c:	4798      	blx	r3
    835e:	4603      	mov	r3, r0
    8360:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8362:	2300      	movs	r3, #0
    8364:	73fb      	strb	r3, [r7, #15]
    8366:	e010      	b.n	838a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8368:	7bfa      	ldrb	r2, [r7, #15]
    836a:	4910      	ldr	r1, [pc, #64]	; (83ac <get_tc_index+0x5c>)
    836c:	4613      	mov	r3, r2
    836e:	009b      	lsls	r3, r3, #2
    8370:	4413      	add	r3, r2
    8372:	009b      	lsls	r3, r3, #2
    8374:	440b      	add	r3, r1
    8376:	781b      	ldrb	r3, [r3, #0]
    8378:	7bba      	ldrb	r2, [r7, #14]
    837a:	429a      	cmp	r2, r3
    837c:	d102      	bne.n	8384 <get_tc_index+0x34>
			return i;
    837e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8382:	e00d      	b.n	83a0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8384:	7bfb      	ldrb	r3, [r7, #15]
    8386:	3301      	adds	r3, #1
    8388:	73fb      	strb	r3, [r7, #15]
    838a:	7bfb      	ldrb	r3, [r7, #15]
    838c:	2b06      	cmp	r3, #6
    838e:	d9eb      	bls.n	8368 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8390:	f240 221a 	movw	r2, #538	; 0x21a
    8394:	4906      	ldr	r1, [pc, #24]	; (83b0 <get_tc_index+0x60>)
    8396:	2000      	movs	r0, #0
    8398:	4b06      	ldr	r3, [pc, #24]	; (83b4 <get_tc_index+0x64>)
    839a:	4798      	blx	r3
	return -1;
    839c:	f04f 33ff 	mov.w	r3, #4294967295
}
    83a0:	4618      	mov	r0, r3
    83a2:	3710      	adds	r7, #16
    83a4:	46bd      	mov	sp, r7
    83a6:	bd80      	pop	{r7, pc}
    83a8:	00008469 	.word	0x00008469
    83ac:	20000048 	.word	0x20000048
    83b0:	0000ef7c 	.word	0x0000ef7c
    83b4:	00003931 	.word	0x00003931

000083b8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    83b8:	b480      	push	{r7}
    83ba:	b083      	sub	sp, #12
    83bc:	af00      	add	r7, sp, #0
    83be:	6078      	str	r0, [r7, #4]
    83c0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    83c2:	687b      	ldr	r3, [r7, #4]
    83c4:	4a1a      	ldr	r2, [pc, #104]	; (8430 <_tc_init_irq_param+0x78>)
    83c6:	4293      	cmp	r3, r2
    83c8:	d102      	bne.n	83d0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    83ca:	4a1a      	ldr	r2, [pc, #104]	; (8434 <_tc_init_irq_param+0x7c>)
    83cc:	683b      	ldr	r3, [r7, #0]
    83ce:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	4a19      	ldr	r2, [pc, #100]	; (8438 <_tc_init_irq_param+0x80>)
    83d4:	4293      	cmp	r3, r2
    83d6:	d102      	bne.n	83de <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    83d8:	4a18      	ldr	r2, [pc, #96]	; (843c <_tc_init_irq_param+0x84>)
    83da:	683b      	ldr	r3, [r7, #0]
    83dc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	4a17      	ldr	r2, [pc, #92]	; (8440 <_tc_init_irq_param+0x88>)
    83e2:	4293      	cmp	r3, r2
    83e4:	d102      	bne.n	83ec <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    83e6:	4a17      	ldr	r2, [pc, #92]	; (8444 <_tc_init_irq_param+0x8c>)
    83e8:	683b      	ldr	r3, [r7, #0]
    83ea:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    83ec:	687b      	ldr	r3, [r7, #4]
    83ee:	4a16      	ldr	r2, [pc, #88]	; (8448 <_tc_init_irq_param+0x90>)
    83f0:	4293      	cmp	r3, r2
    83f2:	d102      	bne.n	83fa <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    83f4:	4a15      	ldr	r2, [pc, #84]	; (844c <_tc_init_irq_param+0x94>)
    83f6:	683b      	ldr	r3, [r7, #0]
    83f8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    83fa:	687b      	ldr	r3, [r7, #4]
    83fc:	4a14      	ldr	r2, [pc, #80]	; (8450 <_tc_init_irq_param+0x98>)
    83fe:	4293      	cmp	r3, r2
    8400:	d102      	bne.n	8408 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    8402:	4a14      	ldr	r2, [pc, #80]	; (8454 <_tc_init_irq_param+0x9c>)
    8404:	683b      	ldr	r3, [r7, #0]
    8406:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	4a13      	ldr	r2, [pc, #76]	; (8458 <_tc_init_irq_param+0xa0>)
    840c:	4293      	cmp	r3, r2
    840e:	d102      	bne.n	8416 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    8410:	4a12      	ldr	r2, [pc, #72]	; (845c <_tc_init_irq_param+0xa4>)
    8412:	683b      	ldr	r3, [r7, #0]
    8414:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8416:	687b      	ldr	r3, [r7, #4]
    8418:	4a11      	ldr	r2, [pc, #68]	; (8460 <_tc_init_irq_param+0xa8>)
    841a:	4293      	cmp	r3, r2
    841c:	d102      	bne.n	8424 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    841e:	4a11      	ldr	r2, [pc, #68]	; (8464 <_tc_init_irq_param+0xac>)
    8420:	683b      	ldr	r3, [r7, #0]
    8422:	6013      	str	r3, [r2, #0]
	}
}
    8424:	bf00      	nop
    8426:	370c      	adds	r7, #12
    8428:	46bd      	mov	sp, r7
    842a:	f85d 7b04 	ldr.w	r7, [sp], #4
    842e:	4770      	bx	lr
    8430:	40003800 	.word	0x40003800
    8434:	20000710 	.word	0x20000710
    8438:	40003c00 	.word	0x40003c00
    843c:	20000714 	.word	0x20000714
    8440:	4101a000 	.word	0x4101a000
    8444:	20000718 	.word	0x20000718
    8448:	4101c000 	.word	0x4101c000
    844c:	2000071c 	.word	0x2000071c
    8450:	42001400 	.word	0x42001400
    8454:	20000720 	.word	0x20000720
    8458:	42001800 	.word	0x42001800
    845c:	20000724 	.word	0x20000724
    8460:	43001800 	.word	0x43001800
    8464:	20000728 	.word	0x20000728

00008468 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8468:	b4b0      	push	{r4, r5, r7}
    846a:	b08d      	sub	sp, #52	; 0x34
    846c:	af00      	add	r7, sp, #0
    846e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8470:	4b13      	ldr	r3, [pc, #76]	; (84c0 <_get_hardware_offset+0x58>)
    8472:	f107 040c 	add.w	r4, r7, #12
    8476:	461d      	mov	r5, r3
    8478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    847a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    847c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8484:	2300      	movs	r3, #0
    8486:	62fb      	str	r3, [r7, #44]	; 0x2c
    8488:	e010      	b.n	84ac <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    848c:	009b      	lsls	r3, r3, #2
    848e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8492:	4413      	add	r3, r2
    8494:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8498:	461a      	mov	r2, r3
    849a:	687b      	ldr	r3, [r7, #4]
    849c:	429a      	cmp	r2, r3
    849e:	d102      	bne.n	84a6 <_get_hardware_offset+0x3e>
			return i;
    84a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84a2:	b2db      	uxtb	r3, r3
    84a4:	e006      	b.n	84b4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    84a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84a8:	3301      	adds	r3, #1
    84aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    84ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84ae:	2b07      	cmp	r3, #7
    84b0:	d9eb      	bls.n	848a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    84b2:	2300      	movs	r3, #0
}
    84b4:	4618      	mov	r0, r3
    84b6:	3734      	adds	r7, #52	; 0x34
    84b8:	46bd      	mov	sp, r7
    84ba:	bcb0      	pop	{r4, r5, r7}
    84bc:	4770      	bx	lr
    84be:	bf00      	nop
    84c0:	0000ef90 	.word	0x0000ef90

000084c4 <__NVIC_EnableIRQ>:
{
    84c4:	b480      	push	{r7}
    84c6:	b083      	sub	sp, #12
    84c8:	af00      	add	r7, sp, #0
    84ca:	4603      	mov	r3, r0
    84cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    84ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    84d2:	2b00      	cmp	r3, #0
    84d4:	db0b      	blt.n	84ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84d6:	4909      	ldr	r1, [pc, #36]	; (84fc <__NVIC_EnableIRQ+0x38>)
    84d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    84dc:	095b      	lsrs	r3, r3, #5
    84de:	88fa      	ldrh	r2, [r7, #6]
    84e0:	f002 021f 	and.w	r2, r2, #31
    84e4:	2001      	movs	r0, #1
    84e6:	fa00 f202 	lsl.w	r2, r0, r2
    84ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    84ee:	bf00      	nop
    84f0:	370c      	adds	r7, #12
    84f2:	46bd      	mov	sp, r7
    84f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    84f8:	4770      	bx	lr
    84fa:	bf00      	nop
    84fc:	e000e100 	.word	0xe000e100

00008500 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8500:	b480      	push	{r7}
    8502:	b087      	sub	sp, #28
    8504:	af00      	add	r7, sp, #0
    8506:	60f8      	str	r0, [r7, #12]
    8508:	460b      	mov	r3, r1
    850a:	607a      	str	r2, [r7, #4]
    850c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    850e:	7afa      	ldrb	r2, [r7, #11]
    8510:	68f9      	ldr	r1, [r7, #12]
    8512:	4613      	mov	r3, r2
    8514:	009b      	lsls	r3, r3, #2
    8516:	4413      	add	r3, r2
    8518:	009b      	lsls	r3, r3, #2
    851a:	440b      	add	r3, r1
    851c:	3340      	adds	r3, #64	; 0x40
    851e:	681b      	ldr	r3, [r3, #0]
    8520:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8522:	697a      	ldr	r2, [r7, #20]
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	4013      	ands	r3, r2
    8528:	617b      	str	r3, [r7, #20]
	return tmp;
    852a:	697b      	ldr	r3, [r7, #20]
}
    852c:	4618      	mov	r0, r3
    852e:	371c      	adds	r7, #28
    8530:	46bd      	mov	sp, r7
    8532:	f85d 7b04 	ldr.w	r7, [sp], #4
    8536:	4770      	bx	lr

00008538 <hri_oscctrl_get_STATUS_reg>:
{
    8538:	b480      	push	{r7}
    853a:	b085      	sub	sp, #20
    853c:	af00      	add	r7, sp, #0
    853e:	6078      	str	r0, [r7, #4]
    8540:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8542:	687b      	ldr	r3, [r7, #4]
    8544:	691b      	ldr	r3, [r3, #16]
    8546:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8548:	68fa      	ldr	r2, [r7, #12]
    854a:	683b      	ldr	r3, [r7, #0]
    854c:	4013      	ands	r3, r2
    854e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8550:	68fb      	ldr	r3, [r7, #12]
}
    8552:	4618      	mov	r0, r3
    8554:	3714      	adds	r7, #20
    8556:	46bd      	mov	sp, r7
    8558:	f85d 7b04 	ldr.w	r7, [sp], #4
    855c:	4770      	bx	lr

0000855e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    855e:	b480      	push	{r7}
    8560:	b085      	sub	sp, #20
    8562:	af00      	add	r7, sp, #0
    8564:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8566:	687b      	ldr	r3, [r7, #4]
    8568:	f893 3020 	ldrb.w	r3, [r3, #32]
    856c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    856e:	7bfb      	ldrb	r3, [r7, #15]
    8570:	f003 0301 	and.w	r3, r3, #1
    8574:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8576:	7bfb      	ldrb	r3, [r7, #15]
    8578:	2b00      	cmp	r3, #0
    857a:	bf14      	ite	ne
    857c:	2301      	movne	r3, #1
    857e:	2300      	moveq	r3, #0
    8580:	b2db      	uxtb	r3, r3
}
    8582:	4618      	mov	r0, r3
    8584:	3714      	adds	r7, #20
    8586:	46bd      	mov	sp, r7
    8588:	f85d 7b04 	ldr.w	r7, [sp], #4
    858c:	4770      	bx	lr

0000858e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    858e:	b480      	push	{r7}
    8590:	b083      	sub	sp, #12
    8592:	af00      	add	r7, sp, #0
    8594:	6078      	str	r0, [r7, #4]
    8596:	460b      	mov	r3, r1
    8598:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    859a:	bf00      	nop
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	789b      	ldrb	r3, [r3, #2]
    85a0:	b2da      	uxtb	r2, r3
    85a2:	78fb      	ldrb	r3, [r7, #3]
    85a4:	4013      	ands	r3, r2
    85a6:	b2db      	uxtb	r3, r3
    85a8:	2b00      	cmp	r3, #0
    85aa:	d1f7      	bne.n	859c <hri_usb_wait_for_sync+0xe>
	};
}
    85ac:	bf00      	nop
    85ae:	370c      	adds	r7, #12
    85b0:	46bd      	mov	sp, r7
    85b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85b6:	4770      	bx	lr

000085b8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    85b8:	b480      	push	{r7}
    85ba:	b083      	sub	sp, #12
    85bc:	af00      	add	r7, sp, #0
    85be:	6078      	str	r0, [r7, #4]
    85c0:	460b      	mov	r3, r1
    85c2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	789b      	ldrb	r3, [r3, #2]
    85c8:	b2da      	uxtb	r2, r3
    85ca:	78fb      	ldrb	r3, [r7, #3]
    85cc:	4013      	ands	r3, r2
    85ce:	b2db      	uxtb	r3, r3
    85d0:	2b00      	cmp	r3, #0
    85d2:	bf14      	ite	ne
    85d4:	2301      	movne	r3, #1
    85d6:	2300      	moveq	r3, #0
    85d8:	b2db      	uxtb	r3, r3
}
    85da:	4618      	mov	r0, r3
    85dc:	370c      	adds	r7, #12
    85de:	46bd      	mov	sp, r7
    85e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e4:	4770      	bx	lr

000085e6 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    85e6:	b480      	push	{r7}
    85e8:	b085      	sub	sp, #20
    85ea:	af00      	add	r7, sp, #0
    85ec:	6078      	str	r0, [r7, #4]
    85ee:	460b      	mov	r3, r1
    85f0:	70fb      	strb	r3, [r7, #3]
    85f2:	4613      	mov	r3, r2
    85f4:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    85f6:	78fb      	ldrb	r3, [r7, #3]
    85f8:	687a      	ldr	r2, [r7, #4]
    85fa:	3308      	adds	r3, #8
    85fc:	015b      	lsls	r3, r3, #5
    85fe:	4413      	add	r3, r2
    8600:	3307      	adds	r3, #7
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8606:	7bfa      	ldrb	r2, [r7, #15]
    8608:	78bb      	ldrb	r3, [r7, #2]
    860a:	4013      	ands	r3, r2
    860c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    860e:	7bfb      	ldrb	r3, [r7, #15]
}
    8610:	4618      	mov	r0, r3
    8612:	3714      	adds	r7, #20
    8614:	46bd      	mov	sp, r7
    8616:	f85d 7b04 	ldr.w	r7, [sp], #4
    861a:	4770      	bx	lr

0000861c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    861c:	b480      	push	{r7}
    861e:	b083      	sub	sp, #12
    8620:	af00      	add	r7, sp, #0
    8622:	6078      	str	r0, [r7, #4]
    8624:	460b      	mov	r3, r1
    8626:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8628:	78fb      	ldrb	r3, [r7, #3]
    862a:	687a      	ldr	r2, [r7, #4]
    862c:	3308      	adds	r3, #8
    862e:	015b      	lsls	r3, r3, #5
    8630:	4413      	add	r3, r2
    8632:	3307      	adds	r3, #7
    8634:	781b      	ldrb	r3, [r3, #0]
    8636:	b2db      	uxtb	r3, r3
}
    8638:	4618      	mov	r0, r3
    863a:	370c      	adds	r7, #12
    863c:	46bd      	mov	sp, r7
    863e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8642:	4770      	bx	lr

00008644 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8644:	b480      	push	{r7}
    8646:	b083      	sub	sp, #12
    8648:	af00      	add	r7, sp, #0
    864a:	6078      	str	r0, [r7, #4]
    864c:	460b      	mov	r3, r1
    864e:	70fb      	strb	r3, [r7, #3]
    8650:	4613      	mov	r3, r2
    8652:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8654:	78fb      	ldrb	r3, [r7, #3]
    8656:	687a      	ldr	r2, [r7, #4]
    8658:	3308      	adds	r3, #8
    865a:	015b      	lsls	r3, r3, #5
    865c:	4413      	add	r3, r2
    865e:	3307      	adds	r3, #7
    8660:	78ba      	ldrb	r2, [r7, #2]
    8662:	701a      	strb	r2, [r3, #0]
}
    8664:	bf00      	nop
    8666:	370c      	adds	r7, #12
    8668:	46bd      	mov	sp, r7
    866a:	f85d 7b04 	ldr.w	r7, [sp], #4
    866e:	4770      	bx	lr

00008670 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8670:	b480      	push	{r7}
    8672:	b083      	sub	sp, #12
    8674:	af00      	add	r7, sp, #0
    8676:	6078      	str	r0, [r7, #4]
    8678:	460b      	mov	r3, r1
    867a:	70fb      	strb	r3, [r7, #3]
    867c:	4613      	mov	r3, r2
    867e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8680:	78fb      	ldrb	r3, [r7, #3]
    8682:	687a      	ldr	r2, [r7, #4]
    8684:	3308      	adds	r3, #8
    8686:	015b      	lsls	r3, r3, #5
    8688:	4413      	add	r3, r2
    868a:	3305      	adds	r3, #5
    868c:	78ba      	ldrb	r2, [r7, #2]
    868e:	701a      	strb	r2, [r3, #0]
}
    8690:	bf00      	nop
    8692:	370c      	adds	r7, #12
    8694:	46bd      	mov	sp, r7
    8696:	f85d 7b04 	ldr.w	r7, [sp], #4
    869a:	4770      	bx	lr

0000869c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    869c:	b480      	push	{r7}
    869e:	b083      	sub	sp, #12
    86a0:	af00      	add	r7, sp, #0
    86a2:	6078      	str	r0, [r7, #4]
    86a4:	460b      	mov	r3, r1
    86a6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    86a8:	78fb      	ldrb	r3, [r7, #3]
    86aa:	687a      	ldr	r2, [r7, #4]
    86ac:	3308      	adds	r3, #8
    86ae:	015b      	lsls	r3, r3, #5
    86b0:	4413      	add	r3, r2
    86b2:	3306      	adds	r3, #6
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	b2db      	uxtb	r3, r3
}
    86b8:	4618      	mov	r0, r3
    86ba:	370c      	adds	r7, #12
    86bc:	46bd      	mov	sp, r7
    86be:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c2:	4770      	bx	lr

000086c4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    86c4:	b480      	push	{r7}
    86c6:	b083      	sub	sp, #12
    86c8:	af00      	add	r7, sp, #0
    86ca:	6078      	str	r0, [r7, #4]
    86cc:	460b      	mov	r3, r1
    86ce:	70fb      	strb	r3, [r7, #3]
    86d0:	4613      	mov	r3, r2
    86d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    86d4:	78fb      	ldrb	r3, [r7, #3]
    86d6:	687a      	ldr	r2, [r7, #4]
    86d8:	3308      	adds	r3, #8
    86da:	015b      	lsls	r3, r3, #5
    86dc:	4413      	add	r3, r2
    86de:	3304      	adds	r3, #4
    86e0:	78ba      	ldrb	r2, [r7, #2]
    86e2:	701a      	strb	r2, [r3, #0]
}
    86e4:	bf00      	nop
    86e6:	370c      	adds	r7, #12
    86e8:	46bd      	mov	sp, r7
    86ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ee:	4770      	bx	lr

000086f0 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    86f0:	b480      	push	{r7}
    86f2:	b083      	sub	sp, #12
    86f4:	af00      	add	r7, sp, #0
    86f6:	6078      	str	r0, [r7, #4]
    86f8:	460b      	mov	r3, r1
    86fa:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    86fc:	78fb      	ldrb	r3, [r7, #3]
    86fe:	687a      	ldr	r2, [r7, #4]
    8700:	015b      	lsls	r3, r3, #5
    8702:	4413      	add	r3, r2
    8704:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8708:	2210      	movs	r2, #16
    870a:	701a      	strb	r2, [r3, #0]
}
    870c:	bf00      	nop
    870e:	370c      	adds	r7, #12
    8710:	46bd      	mov	sp, r7
    8712:	f85d 7b04 	ldr.w	r7, [sp], #4
    8716:	4770      	bx	lr

00008718 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8718:	b480      	push	{r7}
    871a:	b083      	sub	sp, #12
    871c:	af00      	add	r7, sp, #0
    871e:	6078      	str	r0, [r7, #4]
    8720:	460b      	mov	r3, r1
    8722:	70fb      	strb	r3, [r7, #3]
    8724:	4613      	mov	r3, r2
    8726:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8728:	78fb      	ldrb	r3, [r7, #3]
    872a:	687a      	ldr	r2, [r7, #4]
    872c:	015b      	lsls	r3, r3, #5
    872e:	4413      	add	r3, r2
    8730:	f203 1309 	addw	r3, r3, #265	; 0x109
    8734:	78ba      	ldrb	r2, [r7, #2]
    8736:	701a      	strb	r2, [r3, #0]
}
    8738:	bf00      	nop
    873a:	370c      	adds	r7, #12
    873c:	46bd      	mov	sp, r7
    873e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8742:	4770      	bx	lr

00008744 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8744:	b480      	push	{r7}
    8746:	b083      	sub	sp, #12
    8748:	af00      	add	r7, sp, #0
    874a:	6078      	str	r0, [r7, #4]
    874c:	460b      	mov	r3, r1
    874e:	70fb      	strb	r3, [r7, #3]
    8750:	4613      	mov	r3, r2
    8752:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8754:	78fb      	ldrb	r3, [r7, #3]
    8756:	687a      	ldr	r2, [r7, #4]
    8758:	015b      	lsls	r3, r3, #5
    875a:	4413      	add	r3, r2
    875c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8760:	78ba      	ldrb	r2, [r7, #2]
    8762:	701a      	strb	r2, [r3, #0]
}
    8764:	bf00      	nop
    8766:	370c      	adds	r7, #12
    8768:	46bd      	mov	sp, r7
    876a:	f85d 7b04 	ldr.w	r7, [sp], #4
    876e:	4770      	bx	lr

00008770 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8770:	b480      	push	{r7}
    8772:	b085      	sub	sp, #20
    8774:	af00      	add	r7, sp, #0
    8776:	6078      	str	r0, [r7, #4]
    8778:	460b      	mov	r3, r1
    877a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    877c:	78fb      	ldrb	r3, [r7, #3]
    877e:	687a      	ldr	r2, [r7, #4]
    8780:	3308      	adds	r3, #8
    8782:	015b      	lsls	r3, r3, #5
    8784:	4413      	add	r3, r2
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    878a:	7bfb      	ldrb	r3, [r7, #15]
    878c:	f003 0307 	and.w	r3, r3, #7
    8790:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8792:	7bfb      	ldrb	r3, [r7, #15]
}
    8794:	4618      	mov	r0, r3
    8796:	3714      	adds	r7, #20
    8798:	46bd      	mov	sp, r7
    879a:	f85d 7b04 	ldr.w	r7, [sp], #4
    879e:	4770      	bx	lr

000087a0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    87a0:	b480      	push	{r7}
    87a2:	b085      	sub	sp, #20
    87a4:	af00      	add	r7, sp, #0
    87a6:	6078      	str	r0, [r7, #4]
    87a8:	460b      	mov	r3, r1
    87aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    87ac:	78fb      	ldrb	r3, [r7, #3]
    87ae:	687a      	ldr	r2, [r7, #4]
    87b0:	3308      	adds	r3, #8
    87b2:	015b      	lsls	r3, r3, #5
    87b4:	4413      	add	r3, r2
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    87ba:	7bfb      	ldrb	r3, [r7, #15]
    87bc:	091b      	lsrs	r3, r3, #4
    87be:	b2db      	uxtb	r3, r3
    87c0:	f003 0307 	and.w	r3, r3, #7
    87c4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    87c6:	7bfb      	ldrb	r3, [r7, #15]
}
    87c8:	4618      	mov	r0, r3
    87ca:	3714      	adds	r7, #20
    87cc:	46bd      	mov	sp, r7
    87ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d2:	4770      	bx	lr

000087d4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    87d4:	b480      	push	{r7}
    87d6:	b083      	sub	sp, #12
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
    87dc:	460b      	mov	r3, r1
    87de:	70fb      	strb	r3, [r7, #3]
    87e0:	4613      	mov	r3, r2
    87e2:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    87e4:	78fb      	ldrb	r3, [r7, #3]
    87e6:	687a      	ldr	r2, [r7, #4]
    87e8:	3308      	adds	r3, #8
    87ea:	015b      	lsls	r3, r3, #5
    87ec:	4413      	add	r3, r2
    87ee:	78ba      	ldrb	r2, [r7, #2]
    87f0:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    87f2:	bf00      	nop
    87f4:	370c      	adds	r7, #12
    87f6:	46bd      	mov	sp, r7
    87f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87fc:	4770      	bx	lr

000087fe <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    87fe:	b480      	push	{r7}
    8800:	b083      	sub	sp, #12
    8802:	af00      	add	r7, sp, #0
    8804:	6078      	str	r0, [r7, #4]
    8806:	460b      	mov	r3, r1
    8808:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    880a:	78fb      	ldrb	r3, [r7, #3]
    880c:	687a      	ldr	r2, [r7, #4]
    880e:	3308      	adds	r3, #8
    8810:	015b      	lsls	r3, r3, #5
    8812:	4413      	add	r3, r2
    8814:	781b      	ldrb	r3, [r3, #0]
    8816:	b2db      	uxtb	r3, r3
}
    8818:	4618      	mov	r0, r3
    881a:	370c      	adds	r7, #12
    881c:	46bd      	mov	sp, r7
    881e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8822:	4770      	bx	lr

00008824 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8824:	b480      	push	{r7}
    8826:	b083      	sub	sp, #12
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	8b9b      	ldrh	r3, [r3, #28]
    8830:	b29b      	uxth	r3, r3
}
    8832:	4618      	mov	r0, r3
    8834:	370c      	adds	r7, #12
    8836:	46bd      	mov	sp, r7
    8838:	f85d 7b04 	ldr.w	r7, [sp], #4
    883c:	4770      	bx	lr

0000883e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    883e:	b480      	push	{r7}
    8840:	b083      	sub	sp, #12
    8842:	af00      	add	r7, sp, #0
    8844:	6078      	str	r0, [r7, #4]
    8846:	460b      	mov	r3, r1
    8848:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	887a      	ldrh	r2, [r7, #2]
    884e:	839a      	strh	r2, [r3, #28]
}
    8850:	bf00      	nop
    8852:	370c      	adds	r7, #12
    8854:	46bd      	mov	sp, r7
    8856:	f85d 7b04 	ldr.w	r7, [sp], #4
    885a:	4770      	bx	lr

0000885c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    885c:	b480      	push	{r7}
    885e:	b083      	sub	sp, #12
    8860:	af00      	add	r7, sp, #0
    8862:	6078      	str	r0, [r7, #4]
    8864:	460b      	mov	r3, r1
    8866:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	887a      	ldrh	r2, [r7, #2]
    886c:	831a      	strh	r2, [r3, #24]
}
    886e:	bf00      	nop
    8870:	370c      	adds	r7, #12
    8872:	46bd      	mov	sp, r7
    8874:	f85d 7b04 	ldr.w	r7, [sp], #4
    8878:	4770      	bx	lr

0000887a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    887a:	b480      	push	{r7}
    887c:	b083      	sub	sp, #12
    887e:	af00      	add	r7, sp, #0
    8880:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	8b1b      	ldrh	r3, [r3, #24]
    8886:	b29b      	uxth	r3, r3
}
    8888:	4618      	mov	r0, r3
    888a:	370c      	adds	r7, #12
    888c:	46bd      	mov	sp, r7
    888e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8892:	4770      	bx	lr

00008894 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8894:	b480      	push	{r7}
    8896:	b083      	sub	sp, #12
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
    889c:	460b      	mov	r3, r1
    889e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    88a0:	687b      	ldr	r3, [r7, #4]
    88a2:	887a      	ldrh	r2, [r7, #2]
    88a4:	829a      	strh	r2, [r3, #20]
}
    88a6:	bf00      	nop
    88a8:	370c      	adds	r7, #12
    88aa:	46bd      	mov	sp, r7
    88ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b0:	4770      	bx	lr

000088b2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    88b2:	b480      	push	{r7}
    88b4:	b085      	sub	sp, #20
    88b6:	af00      	add	r7, sp, #0
    88b8:	6078      	str	r0, [r7, #4]
    88ba:	460b      	mov	r3, r1
    88bc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	789b      	ldrb	r3, [r3, #2]
    88c2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    88c4:	7bfa      	ldrb	r2, [r7, #15]
    88c6:	78fb      	ldrb	r3, [r7, #3]
    88c8:	4013      	ands	r3, r2
    88ca:	73fb      	strb	r3, [r7, #15]
	return tmp;
    88cc:	7bfb      	ldrb	r3, [r7, #15]
}
    88ce:	4618      	mov	r0, r3
    88d0:	3714      	adds	r7, #20
    88d2:	46bd      	mov	sp, r7
    88d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d8:	4770      	bx	lr
	...

000088dc <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    88dc:	b580      	push	{r7, lr}
    88de:	b082      	sub	sp, #8
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    88e4:	687b      	ldr	r3, [r7, #4]
    88e6:	781b      	ldrb	r3, [r3, #0]
    88e8:	b2db      	uxtb	r3, r3
    88ea:	f023 0302 	bic.w	r3, r3, #2
    88ee:	b2da      	uxtb	r2, r3
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    88f4:	2103      	movs	r1, #3
    88f6:	6878      	ldr	r0, [r7, #4]
    88f8:	4b02      	ldr	r3, [pc, #8]	; (8904 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    88fa:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    88fc:	bf00      	nop
    88fe:	3708      	adds	r7, #8
    8900:	46bd      	mov	sp, r7
    8902:	bd80      	pop	{r7, pc}
    8904:	0000858f 	.word	0x0000858f

00008908 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8908:	b580      	push	{r7, lr}
    890a:	b084      	sub	sp, #16
    890c:	af00      	add	r7, sp, #0
    890e:	6078      	str	r0, [r7, #4]
    8910:	460b      	mov	r3, r1
    8912:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8914:	2103      	movs	r1, #3
    8916:	6878      	ldr	r0, [r7, #4]
    8918:	4b06      	ldr	r3, [pc, #24]	; (8934 <hri_usb_get_CTRLA_reg+0x2c>)
    891a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8922:	7bfa      	ldrb	r2, [r7, #15]
    8924:	78fb      	ldrb	r3, [r7, #3]
    8926:	4013      	ands	r3, r2
    8928:	73fb      	strb	r3, [r7, #15]
	return tmp;
    892a:	7bfb      	ldrb	r3, [r7, #15]
}
    892c:	4618      	mov	r0, r3
    892e:	3710      	adds	r7, #16
    8930:	46bd      	mov	sp, r7
    8932:	bd80      	pop	{r7, pc}
    8934:	0000858f 	.word	0x0000858f

00008938 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8938:	b580      	push	{r7, lr}
    893a:	b082      	sub	sp, #8
    893c:	af00      	add	r7, sp, #0
    893e:	6078      	str	r0, [r7, #4]
    8940:	460b      	mov	r3, r1
    8942:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	78fa      	ldrb	r2, [r7, #3]
    8948:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    894a:	2103      	movs	r1, #3
    894c:	6878      	ldr	r0, [r7, #4]
    894e:	4b03      	ldr	r3, [pc, #12]	; (895c <hri_usb_write_CTRLA_reg+0x24>)
    8950:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8952:	bf00      	nop
    8954:	3708      	adds	r7, #8
    8956:	46bd      	mov	sp, r7
    8958:	bd80      	pop	{r7, pc}
    895a:	bf00      	nop
    895c:	0000858f 	.word	0x0000858f

00008960 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8960:	b580      	push	{r7, lr}
    8962:	b082      	sub	sp, #8
    8964:	af00      	add	r7, sp, #0
    8966:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8968:	2103      	movs	r1, #3
    896a:	6878      	ldr	r0, [r7, #4]
    896c:	4b04      	ldr	r3, [pc, #16]	; (8980 <hri_usb_read_CTRLA_reg+0x20>)
    896e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	781b      	ldrb	r3, [r3, #0]
    8974:	b2db      	uxtb	r3, r3
}
    8976:	4618      	mov	r0, r3
    8978:	3708      	adds	r7, #8
    897a:	46bd      	mov	sp, r7
    897c:	bd80      	pop	{r7, pc}
    897e:	bf00      	nop
    8980:	0000858f 	.word	0x0000858f

00008984 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8984:	b480      	push	{r7}
    8986:	b083      	sub	sp, #12
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	891b      	ldrh	r3, [r3, #8]
    8990:	b29b      	uxth	r3, r3
    8992:	f023 0301 	bic.w	r3, r3, #1
    8996:	b29a      	uxth	r2, r3
    8998:	687b      	ldr	r3, [r7, #4]
    899a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    899c:	bf00      	nop
    899e:	370c      	adds	r7, #12
    89a0:	46bd      	mov	sp, r7
    89a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    89a6:	4770      	bx	lr

000089a8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    89a8:	b480      	push	{r7}
    89aa:	b083      	sub	sp, #12
    89ac:	af00      	add	r7, sp, #0
    89ae:	6078      	str	r0, [r7, #4]
    89b0:	460b      	mov	r3, r1
    89b2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	887a      	ldrh	r2, [r7, #2]
    89b8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    89ba:	bf00      	nop
    89bc:	370c      	adds	r7, #12
    89be:	46bd      	mov	sp, r7
    89c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    89c4:	4770      	bx	lr

000089c6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    89c6:	b480      	push	{r7}
    89c8:	b083      	sub	sp, #12
    89ca:	af00      	add	r7, sp, #0
    89cc:	6078      	str	r0, [r7, #4]
    89ce:	460b      	mov	r3, r1
    89d0:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	78fa      	ldrb	r2, [r7, #3]
    89d6:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    89d8:	bf00      	nop
    89da:	370c      	adds	r7, #12
    89dc:	46bd      	mov	sp, r7
    89de:	f85d 7b04 	ldr.w	r7, [sp], #4
    89e2:	4770      	bx	lr

000089e4 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    89e4:	b480      	push	{r7}
    89e6:	b083      	sub	sp, #12
    89e8:	af00      	add	r7, sp, #0
    89ea:	6078      	str	r0, [r7, #4]
    89ec:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	683a      	ldr	r2, [r7, #0]
    89f2:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    89f4:	bf00      	nop
    89f6:	370c      	adds	r7, #12
    89f8:	46bd      	mov	sp, r7
    89fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    89fe:	4770      	bx	lr

00008a00 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8a00:	b480      	push	{r7}
    8a02:	b083      	sub	sp, #12
    8a04:	af00      	add	r7, sp, #0
    8a06:	6078      	str	r0, [r7, #4]
    8a08:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8a0a:	2300      	movs	r3, #0
}
    8a0c:	4618      	mov	r0, r3
    8a0e:	370c      	adds	r7, #12
    8a10:	46bd      	mov	sp, r7
    8a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a16:	4770      	bx	lr

00008a18 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8a18:	b480      	push	{r7}
    8a1a:	b085      	sub	sp, #20
    8a1c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8a1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a22:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8a24:	4b28      	ldr	r3, [pc, #160]	; (8ac8 <_usb_load_calib+0xb0>)
    8a26:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8a28:	f003 031f 	and.w	r3, r3, #31
    8a2c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8a2e:	4b26      	ldr	r3, [pc, #152]	; (8ac8 <_usb_load_calib+0xb0>)
    8a30:	681b      	ldr	r3, [r3, #0]
    8a32:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8a34:	f003 031f 	and.w	r3, r3, #31
    8a38:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8a3a:	4b23      	ldr	r3, [pc, #140]	; (8ac8 <_usb_load_calib+0xb0>)
    8a3c:	681b      	ldr	r3, [r3, #0]
    8a3e:	0a9b      	lsrs	r3, r3, #10
    8a40:	f003 0307 	and.w	r3, r3, #7
    8a44:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8a46:	68fb      	ldr	r3, [r7, #12]
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d002      	beq.n	8a52 <_usb_load_calib+0x3a>
    8a4c:	68fb      	ldr	r3, [r7, #12]
    8a4e:	2b1f      	cmp	r3, #31
    8a50:	d101      	bne.n	8a56 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8a52:	2309      	movs	r3, #9
    8a54:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8a56:	68bb      	ldr	r3, [r7, #8]
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d002      	beq.n	8a62 <_usb_load_calib+0x4a>
    8a5c:	68bb      	ldr	r3, [r7, #8]
    8a5e:	2b1f      	cmp	r3, #31
    8a60:	d101      	bne.n	8a66 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8a62:	2319      	movs	r3, #25
    8a64:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	2b00      	cmp	r3, #0
    8a6a:	d002      	beq.n	8a72 <_usb_load_calib+0x5a>
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	2b07      	cmp	r3, #7
    8a70:	d101      	bne.n	8a76 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8a72:	2306      	movs	r3, #6
    8a74:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8a76:	68fb      	ldr	r3, [r7, #12]
    8a78:	b29b      	uxth	r3, r3
    8a7a:	019b      	lsls	r3, r3, #6
    8a7c:	b29b      	uxth	r3, r3
    8a7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8a82:	b29a      	uxth	r2, r3
    8a84:	68bb      	ldr	r3, [r7, #8]
    8a86:	b29b      	uxth	r3, r3
    8a88:	f003 031f 	and.w	r3, r3, #31
    8a8c:	b29b      	uxth	r3, r3
    8a8e:	4313      	orrs	r3, r2
    8a90:	b29a      	uxth	r2, r3
    8a92:	687b      	ldr	r3, [r7, #4]
    8a94:	b29b      	uxth	r3, r3
    8a96:	031b      	lsls	r3, r3, #12
    8a98:	b29b      	uxth	r3, r3
    8a9a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8a9e:	b29b      	uxth	r3, r3
    8aa0:	4313      	orrs	r3, r2
    8aa2:	b29a      	uxth	r2, r3
    8aa4:	683b      	ldr	r3, [r7, #0]
    8aa6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8aa8:	683a      	ldr	r2, [r7, #0]
    8aaa:	78d3      	ldrb	r3, [r2, #3]
    8aac:	f043 0303 	orr.w	r3, r3, #3
    8ab0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8ab2:	683a      	ldr	r2, [r7, #0]
    8ab4:	78d3      	ldrb	r3, [r2, #3]
    8ab6:	f043 030c 	orr.w	r3, r3, #12
    8aba:	70d3      	strb	r3, [r2, #3]
}
    8abc:	bf00      	nop
    8abe:	3714      	adds	r7, #20
    8ac0:	46bd      	mov	sp, r7
    8ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac6:	4770      	bx	lr
    8ac8:	00800084 	.word	0x00800084

00008acc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8acc:	b580      	push	{r7, lr}
    8ace:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8ad0:	bf00      	nop
    8ad2:	2203      	movs	r2, #3
    8ad4:	2100      	movs	r1, #0
    8ad6:	4804      	ldr	r0, [pc, #16]	; (8ae8 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8ad8:	4b04      	ldr	r3, [pc, #16]	; (8aec <_usb_d_dev_wait_dpll_rdy+0x20>)
    8ada:	4798      	blx	r3
    8adc:	4603      	mov	r3, r0
    8ade:	2b03      	cmp	r3, #3
    8ae0:	d1f7      	bne.n	8ad2 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8ae2:	bf00      	nop
    8ae4:	bd80      	pop	{r7, pc}
    8ae6:	bf00      	nop
    8ae8:	40001000 	.word	0x40001000
    8aec:	00008501 	.word	0x00008501

00008af0 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8af0:	b580      	push	{r7, lr}
    8af2:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8af4:	480e      	ldr	r0, [pc, #56]	; (8b30 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8af6:	4b0f      	ldr	r3, [pc, #60]	; (8b34 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8af8:	4798      	blx	r3
    8afa:	4603      	mov	r3, r0
    8afc:	2b00      	cmp	r3, #0
    8afe:	d00a      	beq.n	8b16 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8b00:	bf00      	nop
    8b02:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8b06:	480a      	ldr	r0, [pc, #40]	; (8b30 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8b08:	4b0b      	ldr	r3, [pc, #44]	; (8b38 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8b0a:	4798      	blx	r3
    8b0c:	4603      	mov	r3, r0
    8b0e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8b12:	d1f6      	bne.n	8b02 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8b14:	e009      	b.n	8b2a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8b16:	bf00      	nop
    8b18:	f44f 7180 	mov.w	r1, #256	; 0x100
    8b1c:	4804      	ldr	r0, [pc, #16]	; (8b30 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8b1e:	4b06      	ldr	r3, [pc, #24]	; (8b38 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8b20:	4798      	blx	r3
    8b22:	4603      	mov	r3, r0
    8b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8b28:	d1f6      	bne.n	8b18 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8b2a:	bf00      	nop
    8b2c:	bd80      	pop	{r7, pc}
    8b2e:	bf00      	nop
    8b30:	40001000 	.word	0x40001000
    8b34:	0000855f 	.word	0x0000855f
    8b38:	00008539 	.word	0x00008539

00008b3c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b082      	sub	sp, #8
    8b40:	af00      	add	r7, sp, #0
    8b42:	4603      	mov	r3, r0
    8b44:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8b46:	79fb      	ldrb	r3, [r7, #7]
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d102      	bne.n	8b52 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8b4c:	4b05      	ldr	r3, [pc, #20]	; (8b64 <_usb_d_dev_wait_clk_rdy+0x28>)
    8b4e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8b50:	e004      	b.n	8b5c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8b52:	79fb      	ldrb	r3, [r7, #7]
    8b54:	2b01      	cmp	r3, #1
    8b56:	d101      	bne.n	8b5c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8b58:	4b03      	ldr	r3, [pc, #12]	; (8b68 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8b5a:	4798      	blx	r3
}
    8b5c:	bf00      	nop
    8b5e:	3708      	adds	r7, #8
    8b60:	46bd      	mov	sp, r7
    8b62:	bd80      	pop	{r7, pc}
    8b64:	00008af1 	.word	0x00008af1
    8b68:	00008acd 	.word	0x00008acd

00008b6c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8b6c:	b580      	push	{r7, lr}
    8b6e:	b082      	sub	sp, #8
    8b70:	af00      	add	r7, sp, #0
    8b72:	4603      	mov	r3, r0
    8b74:	6039      	str	r1, [r7, #0]
    8b76:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8b78:	683b      	ldr	r3, [r7, #0]
    8b7a:	b2da      	uxtb	r2, r3
    8b7c:	79fb      	ldrb	r3, [r7, #7]
    8b7e:	4619      	mov	r1, r3
    8b80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b84:	4b02      	ldr	r3, [pc, #8]	; (8b90 <_usbd_ep_int_ack+0x24>)
    8b86:	4798      	blx	r3
}
    8b88:	bf00      	nop
    8b8a:	3708      	adds	r7, #8
    8b8c:	46bd      	mov	sp, r7
    8b8e:	bd80      	pop	{r7, pc}
    8b90:	00008645 	.word	0x00008645

00008b94 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8b94:	b580      	push	{r7, lr}
    8b96:	b082      	sub	sp, #8
    8b98:	af00      	add	r7, sp, #0
    8b9a:	4603      	mov	r3, r0
    8b9c:	6039      	str	r1, [r7, #0]
    8b9e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8ba0:	683b      	ldr	r3, [r7, #0]
    8ba2:	b2da      	uxtb	r2, r3
    8ba4:	79fb      	ldrb	r3, [r7, #7]
    8ba6:	4619      	mov	r1, r3
    8ba8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bac:	4b02      	ldr	r3, [pc, #8]	; (8bb8 <_usbd_ep_int_en+0x24>)
    8bae:	4798      	blx	r3
}
    8bb0:	bf00      	nop
    8bb2:	3708      	adds	r7, #8
    8bb4:	46bd      	mov	sp, r7
    8bb6:	bd80      	pop	{r7, pc}
    8bb8:	00008719 	.word	0x00008719

00008bbc <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8bbc:	b580      	push	{r7, lr}
    8bbe:	b082      	sub	sp, #8
    8bc0:	af00      	add	r7, sp, #0
    8bc2:	4603      	mov	r3, r0
    8bc4:	6039      	str	r1, [r7, #0]
    8bc6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8bc8:	683b      	ldr	r3, [r7, #0]
    8bca:	b2da      	uxtb	r2, r3
    8bcc:	79fb      	ldrb	r3, [r7, #7]
    8bce:	4619      	mov	r1, r3
    8bd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bd4:	4b02      	ldr	r3, [pc, #8]	; (8be0 <_usbd_ep_int_dis+0x24>)
    8bd6:	4798      	blx	r3
}
    8bd8:	bf00      	nop
    8bda:	3708      	adds	r7, #8
    8bdc:	46bd      	mov	sp, r7
    8bde:	bd80      	pop	{r7, pc}
    8be0:	00008745 	.word	0x00008745

00008be4 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8be4:	b580      	push	{r7, lr}
    8be6:	b082      	sub	sp, #8
    8be8:	af00      	add	r7, sp, #0
    8bea:	4603      	mov	r3, r0
    8bec:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8bee:	79fb      	ldrb	r3, [r7, #7]
    8bf0:	4619      	mov	r1, r3
    8bf2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bf6:	4b06      	ldr	r3, [pc, #24]	; (8c10 <_usbd_ep_is_ctrl+0x2c>)
    8bf8:	4798      	blx	r3
    8bfa:	4603      	mov	r3, r0
    8bfc:	2b11      	cmp	r3, #17
    8bfe:	bf0c      	ite	eq
    8c00:	2301      	moveq	r3, #1
    8c02:	2300      	movne	r3, #0
    8c04:	b2db      	uxtb	r3, r3
}
    8c06:	4618      	mov	r0, r3
    8c08:	3708      	adds	r7, #8
    8c0a:	46bd      	mov	sp, r7
    8c0c:	bd80      	pop	{r7, pc}
    8c0e:	bf00      	nop
    8c10:	000087ff 	.word	0x000087ff

00008c14 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8c14:	b580      	push	{r7, lr}
    8c16:	b082      	sub	sp, #8
    8c18:	af00      	add	r7, sp, #0
    8c1a:	4603      	mov	r3, r0
    8c1c:	71fb      	strb	r3, [r7, #7]
    8c1e:	460b      	mov	r3, r1
    8c20:	71bb      	strb	r3, [r7, #6]
    8c22:	4613      	mov	r3, r2
    8c24:	717b      	strb	r3, [r7, #5]
	if (st) {
    8c26:	797b      	ldrb	r3, [r7, #5]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d00b      	beq.n	8c44 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8c2c:	79bb      	ldrb	r3, [r7, #6]
    8c2e:	2210      	movs	r2, #16
    8c30:	fa02 f303 	lsl.w	r3, r2, r3
    8c34:	b2da      	uxtb	r2, r3
    8c36:	79fb      	ldrb	r3, [r7, #7]
    8c38:	4619      	mov	r1, r3
    8c3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c3e:	4b09      	ldr	r3, [pc, #36]	; (8c64 <_usbd_ep_set_stall+0x50>)
    8c40:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8c42:	e00a      	b.n	8c5a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8c44:	79bb      	ldrb	r3, [r7, #6]
    8c46:	2210      	movs	r2, #16
    8c48:	fa02 f303 	lsl.w	r3, r2, r3
    8c4c:	b2da      	uxtb	r2, r3
    8c4e:	79fb      	ldrb	r3, [r7, #7]
    8c50:	4619      	mov	r1, r3
    8c52:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c56:	4b04      	ldr	r3, [pc, #16]	; (8c68 <_usbd_ep_set_stall+0x54>)
    8c58:	4798      	blx	r3
}
    8c5a:	bf00      	nop
    8c5c:	3708      	adds	r7, #8
    8c5e:	46bd      	mov	sp, r7
    8c60:	bd80      	pop	{r7, pc}
    8c62:	bf00      	nop
    8c64:	00008671 	.word	0x00008671
    8c68:	000086c5 	.word	0x000086c5

00008c6c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b084      	sub	sp, #16
    8c70:	af00      	add	r7, sp, #0
    8c72:	4603      	mov	r3, r0
    8c74:	460a      	mov	r2, r1
    8c76:	71fb      	strb	r3, [r7, #7]
    8c78:	4613      	mov	r3, r2
    8c7a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8c7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c80:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8c82:	79fb      	ldrb	r3, [r7, #7]
    8c84:	4619      	mov	r1, r3
    8c86:	68f8      	ldr	r0, [r7, #12]
    8c88:	4b08      	ldr	r3, [pc, #32]	; (8cac <_usbd_ep_is_stalled+0x40>)
    8c8a:	4798      	blx	r3
    8c8c:	4603      	mov	r3, r0
    8c8e:	4619      	mov	r1, r3
    8c90:	79bb      	ldrb	r3, [r7, #6]
    8c92:	2210      	movs	r2, #16
    8c94:	fa02 f303 	lsl.w	r3, r2, r3
    8c98:	400b      	ands	r3, r1
    8c9a:	2b00      	cmp	r3, #0
    8c9c:	bf14      	ite	ne
    8c9e:	2301      	movne	r3, #1
    8ca0:	2300      	moveq	r3, #0
    8ca2:	b2db      	uxtb	r3, r3
}
    8ca4:	4618      	mov	r0, r3
    8ca6:	3710      	adds	r7, #16
    8ca8:	46bd      	mov	sp, r7
    8caa:	bd80      	pop	{r7, pc}
    8cac:	0000869d 	.word	0x0000869d

00008cb0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8cb0:	b580      	push	{r7, lr}
    8cb2:	b084      	sub	sp, #16
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	4603      	mov	r3, r0
    8cb8:	460a      	mov	r2, r1
    8cba:	71fb      	strb	r3, [r7, #7]
    8cbc:	4613      	mov	r3, r2
    8cbe:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8cc0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8cc4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8cc6:	79fb      	ldrb	r3, [r7, #7]
    8cc8:	4619      	mov	r1, r3
    8cca:	68f8      	ldr	r0, [r7, #12]
    8ccc:	4b08      	ldr	r3, [pc, #32]	; (8cf0 <_usbd_ep_is_stall_sent+0x40>)
    8cce:	4798      	blx	r3
    8cd0:	4603      	mov	r3, r0
    8cd2:	4619      	mov	r1, r3
    8cd4:	79bb      	ldrb	r3, [r7, #6]
    8cd6:	2220      	movs	r2, #32
    8cd8:	fa02 f303 	lsl.w	r3, r2, r3
    8cdc:	400b      	ands	r3, r1
    8cde:	2b00      	cmp	r3, #0
    8ce0:	bf14      	ite	ne
    8ce2:	2301      	movne	r3, #1
    8ce4:	2300      	moveq	r3, #0
    8ce6:	b2db      	uxtb	r3, r3
}
    8ce8:	4618      	mov	r0, r3
    8cea:	3710      	adds	r7, #16
    8cec:	46bd      	mov	sp, r7
    8cee:	bd80      	pop	{r7, pc}
    8cf0:	0000861d 	.word	0x0000861d

00008cf4 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b082      	sub	sp, #8
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	4603      	mov	r3, r0
    8cfc:	460a      	mov	r2, r1
    8cfe:	71fb      	strb	r3, [r7, #7]
    8d00:	4613      	mov	r3, r2
    8d02:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8d04:	79bb      	ldrb	r3, [r7, #6]
    8d06:	2220      	movs	r2, #32
    8d08:	409a      	lsls	r2, r3
    8d0a:	79fb      	ldrb	r3, [r7, #7]
    8d0c:	4611      	mov	r1, r2
    8d0e:	4618      	mov	r0, r3
    8d10:	4b02      	ldr	r3, [pc, #8]	; (8d1c <_usbd_ep_ack_stall+0x28>)
    8d12:	4798      	blx	r3
}
    8d14:	bf00      	nop
    8d16:	3708      	adds	r7, #8
    8d18:	46bd      	mov	sp, r7
    8d1a:	bd80      	pop	{r7, pc}
    8d1c:	00008b6d 	.word	0x00008b6d

00008d20 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8d20:	b580      	push	{r7, lr}
    8d22:	b082      	sub	sp, #8
    8d24:	af00      	add	r7, sp, #0
    8d26:	4603      	mov	r3, r0
    8d28:	71fb      	strb	r3, [r7, #7]
    8d2a:	460b      	mov	r3, r1
    8d2c:	71bb      	strb	r3, [r7, #6]
    8d2e:	4613      	mov	r3, r2
    8d30:	717b      	strb	r3, [r7, #5]
	if (en) {
    8d32:	797b      	ldrb	r3, [r7, #5]
    8d34:	2b00      	cmp	r3, #0
    8d36:	d008      	beq.n	8d4a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8d38:	79bb      	ldrb	r3, [r7, #6]
    8d3a:	2220      	movs	r2, #32
    8d3c:	409a      	lsls	r2, r3
    8d3e:	79fb      	ldrb	r3, [r7, #7]
    8d40:	4611      	mov	r1, r2
    8d42:	4618      	mov	r0, r3
    8d44:	4b07      	ldr	r3, [pc, #28]	; (8d64 <_usbd_ep_int_stall_en+0x44>)
    8d46:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8d48:	e007      	b.n	8d5a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8d4a:	79bb      	ldrb	r3, [r7, #6]
    8d4c:	2220      	movs	r2, #32
    8d4e:	409a      	lsls	r2, r3
    8d50:	79fb      	ldrb	r3, [r7, #7]
    8d52:	4611      	mov	r1, r2
    8d54:	4618      	mov	r0, r3
    8d56:	4b04      	ldr	r3, [pc, #16]	; (8d68 <_usbd_ep_int_stall_en+0x48>)
    8d58:	4798      	blx	r3
}
    8d5a:	bf00      	nop
    8d5c:	3708      	adds	r7, #8
    8d5e:	46bd      	mov	sp, r7
    8d60:	bd80      	pop	{r7, pc}
    8d62:	bf00      	nop
    8d64:	00008b95 	.word	0x00008b95
    8d68:	00008bbd 	.word	0x00008bbd

00008d6c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	b082      	sub	sp, #8
    8d70:	af00      	add	r7, sp, #0
    8d72:	4603      	mov	r3, r0
    8d74:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8d76:	79fb      	ldrb	r3, [r7, #7]
    8d78:	4619      	mov	r1, r3
    8d7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d7e:	4b03      	ldr	r3, [pc, #12]	; (8d8c <_usbd_ep_stop_setup+0x20>)
    8d80:	4798      	blx	r3
}
    8d82:	bf00      	nop
    8d84:	3708      	adds	r7, #8
    8d86:	46bd      	mov	sp, r7
    8d88:	bd80      	pop	{r7, pc}
    8d8a:	bf00      	nop
    8d8c:	000086f1 	.word	0x000086f1

00008d90 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8d90:	b580      	push	{r7, lr}
    8d92:	b082      	sub	sp, #8
    8d94:	af00      	add	r7, sp, #0
    8d96:	4603      	mov	r3, r0
    8d98:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8d9a:	79fb      	ldrb	r3, [r7, #7]
    8d9c:	2210      	movs	r2, #16
    8d9e:	4619      	mov	r1, r3
    8da0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8da4:	4b05      	ldr	r3, [pc, #20]	; (8dbc <_usbd_ep_is_setup+0x2c>)
    8da6:	4798      	blx	r3
    8da8:	4603      	mov	r3, r0
    8daa:	2b00      	cmp	r3, #0
    8dac:	bf14      	ite	ne
    8dae:	2301      	movne	r3, #1
    8db0:	2300      	moveq	r3, #0
    8db2:	b2db      	uxtb	r3, r3
}
    8db4:	4618      	mov	r0, r3
    8db6:	3708      	adds	r7, #8
    8db8:	46bd      	mov	sp, r7
    8dba:	bd80      	pop	{r7, pc}
    8dbc:	000085e7 	.word	0x000085e7

00008dc0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8dc0:	b580      	push	{r7, lr}
    8dc2:	b082      	sub	sp, #8
    8dc4:	af00      	add	r7, sp, #0
    8dc6:	4603      	mov	r3, r0
    8dc8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8dca:	79fb      	ldrb	r3, [r7, #7]
    8dcc:	2110      	movs	r1, #16
    8dce:	4618      	mov	r0, r3
    8dd0:	4b02      	ldr	r3, [pc, #8]	; (8ddc <_usbd_ep_ack_setup+0x1c>)
    8dd2:	4798      	blx	r3
}
    8dd4:	bf00      	nop
    8dd6:	3708      	adds	r7, #8
    8dd8:	46bd      	mov	sp, r7
    8dda:	bd80      	pop	{r7, pc}
    8ddc:	00008b6d 	.word	0x00008b6d

00008de0 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8de0:	b580      	push	{r7, lr}
    8de2:	b082      	sub	sp, #8
    8de4:	af00      	add	r7, sp, #0
    8de6:	4603      	mov	r3, r0
    8de8:	71fb      	strb	r3, [r7, #7]
    8dea:	460b      	mov	r3, r1
    8dec:	71bb      	strb	r3, [r7, #6]
    8dee:	4613      	mov	r3, r2
    8df0:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8df2:	797b      	ldrb	r3, [r7, #5]
    8df4:	2b00      	cmp	r3, #0
    8df6:	d00b      	beq.n	8e10 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8df8:	79bb      	ldrb	r3, [r7, #6]
    8dfa:	2201      	movs	r2, #1
    8dfc:	fa02 f303 	lsl.w	r3, r2, r3
    8e00:	b2da      	uxtb	r2, r3
    8e02:	79fb      	ldrb	r3, [r7, #7]
    8e04:	4619      	mov	r1, r3
    8e06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e0a:	4b09      	ldr	r3, [pc, #36]	; (8e30 <_usbd_ep_set_toggle+0x50>)
    8e0c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8e0e:	e00a      	b.n	8e26 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8e10:	79bb      	ldrb	r3, [r7, #6]
    8e12:	2201      	movs	r2, #1
    8e14:	fa02 f303 	lsl.w	r3, r2, r3
    8e18:	b2da      	uxtb	r2, r3
    8e1a:	79fb      	ldrb	r3, [r7, #7]
    8e1c:	4619      	mov	r1, r3
    8e1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e22:	4b04      	ldr	r3, [pc, #16]	; (8e34 <_usbd_ep_set_toggle+0x54>)
    8e24:	4798      	blx	r3
}
    8e26:	bf00      	nop
    8e28:	3708      	adds	r7, #8
    8e2a:	46bd      	mov	sp, r7
    8e2c:	bd80      	pop	{r7, pc}
    8e2e:	bf00      	nop
    8e30:	00008671 	.word	0x00008671
    8e34:	000086c5 	.word	0x000086c5

00008e38 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8e38:	b580      	push	{r7, lr}
    8e3a:	b082      	sub	sp, #8
    8e3c:	af00      	add	r7, sp, #0
    8e3e:	4603      	mov	r3, r0
    8e40:	460a      	mov	r2, r1
    8e42:	71fb      	strb	r3, [r7, #7]
    8e44:	4613      	mov	r3, r2
    8e46:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8e48:	79bb      	ldrb	r3, [r7, #6]
    8e4a:	2201      	movs	r2, #1
    8e4c:	409a      	lsls	r2, r3
    8e4e:	79fb      	ldrb	r3, [r7, #7]
    8e50:	4611      	mov	r1, r2
    8e52:	4618      	mov	r0, r3
    8e54:	4b02      	ldr	r3, [pc, #8]	; (8e60 <_usbd_ep_ack_io_cpt+0x28>)
    8e56:	4798      	blx	r3
}
    8e58:	bf00      	nop
    8e5a:	3708      	adds	r7, #8
    8e5c:	46bd      	mov	sp, r7
    8e5e:	bd80      	pop	{r7, pc}
    8e60:	00008b6d 	.word	0x00008b6d

00008e64 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8e64:	b480      	push	{r7}
    8e66:	b085      	sub	sp, #20
    8e68:	af00      	add	r7, sp, #0
    8e6a:	4603      	mov	r3, r0
    8e6c:	603a      	str	r2, [r7, #0]
    8e6e:	71fb      	strb	r3, [r7, #7]
    8e70:	460b      	mov	r3, r1
    8e72:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e74:	79fa      	ldrb	r2, [r7, #7]
    8e76:	79bb      	ldrb	r3, [r7, #6]
    8e78:	0052      	lsls	r2, r2, #1
    8e7a:	4413      	add	r3, r2
    8e7c:	011b      	lsls	r3, r3, #4
    8e7e:	4a06      	ldr	r2, [pc, #24]	; (8e98 <_usbd_ep_set_buf+0x34>)
    8e80:	4413      	add	r3, r2
    8e82:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8e84:	68fb      	ldr	r3, [r7, #12]
    8e86:	683a      	ldr	r2, [r7, #0]
    8e88:	601a      	str	r2, [r3, #0]
}
    8e8a:	bf00      	nop
    8e8c:	3714      	adds	r7, #20
    8e8e:	46bd      	mov	sp, r7
    8e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e94:	4770      	bx	lr
    8e96:	bf00      	nop
    8e98:	20000a34 	.word	0x20000a34

00008e9c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8e9c:	b480      	push	{r7}
    8e9e:	b085      	sub	sp, #20
    8ea0:	af00      	add	r7, sp, #0
    8ea2:	4603      	mov	r3, r0
    8ea4:	71fb      	strb	r3, [r7, #7]
    8ea6:	460b      	mov	r3, r1
    8ea8:	71bb      	strb	r3, [r7, #6]
    8eaa:	4613      	mov	r3, r2
    8eac:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8eae:	79fa      	ldrb	r2, [r7, #7]
    8eb0:	79bb      	ldrb	r3, [r7, #6]
    8eb2:	0052      	lsls	r2, r2, #1
    8eb4:	4413      	add	r3, r2
    8eb6:	011b      	lsls	r3, r3, #4
    8eb8:	4a08      	ldr	r2, [pc, #32]	; (8edc <_usbd_ep_set_in_count+0x40>)
    8eba:	4413      	add	r3, r2
    8ebc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8ebe:	88bb      	ldrh	r3, [r7, #4]
    8ec0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8ec4:	b299      	uxth	r1, r3
    8ec6:	68fa      	ldr	r2, [r7, #12]
    8ec8:	6853      	ldr	r3, [r2, #4]
    8eca:	f361 339b 	bfi	r3, r1, #14, #14
    8ece:	6053      	str	r3, [r2, #4]
}
    8ed0:	bf00      	nop
    8ed2:	3714      	adds	r7, #20
    8ed4:	46bd      	mov	sp, r7
    8ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eda:	4770      	bx	lr
    8edc:	20000a34 	.word	0x20000a34

00008ee0 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8ee0:	b480      	push	{r7}
    8ee2:	b085      	sub	sp, #20
    8ee4:	af00      	add	r7, sp, #0
    8ee6:	4603      	mov	r3, r0
    8ee8:	71fb      	strb	r3, [r7, #7]
    8eea:	460b      	mov	r3, r1
    8eec:	71bb      	strb	r3, [r7, #6]
    8eee:	4613      	mov	r3, r2
    8ef0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ef2:	79fa      	ldrb	r2, [r7, #7]
    8ef4:	79bb      	ldrb	r3, [r7, #6]
    8ef6:	0052      	lsls	r2, r2, #1
    8ef8:	4413      	add	r3, r2
    8efa:	011b      	lsls	r3, r3, #4
    8efc:	4a08      	ldr	r2, [pc, #32]	; (8f20 <_usbd_ep_set_in_size+0x40>)
    8efe:	4413      	add	r3, r2
    8f00:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8f02:	88bb      	ldrh	r3, [r7, #4]
    8f04:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8f08:	b299      	uxth	r1, r3
    8f0a:	68fa      	ldr	r2, [r7, #12]
    8f0c:	6853      	ldr	r3, [r2, #4]
    8f0e:	f361 030d 	bfi	r3, r1, #0, #14
    8f12:	6053      	str	r3, [r2, #4]
}
    8f14:	bf00      	nop
    8f16:	3714      	adds	r7, #20
    8f18:	46bd      	mov	sp, r7
    8f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1e:	4770      	bx	lr
    8f20:	20000a34 	.word	0x20000a34

00008f24 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8f24:	b480      	push	{r7}
    8f26:	b085      	sub	sp, #20
    8f28:	af00      	add	r7, sp, #0
    8f2a:	4603      	mov	r3, r0
    8f2c:	71fb      	strb	r3, [r7, #7]
    8f2e:	460b      	mov	r3, r1
    8f30:	71bb      	strb	r3, [r7, #6]
    8f32:	4613      	mov	r3, r2
    8f34:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f36:	79fa      	ldrb	r2, [r7, #7]
    8f38:	79bb      	ldrb	r3, [r7, #6]
    8f3a:	0052      	lsls	r2, r2, #1
    8f3c:	4413      	add	r3, r2
    8f3e:	011b      	lsls	r3, r3, #4
    8f40:	4a08      	ldr	r2, [pc, #32]	; (8f64 <_usbd_ep_set_out_count+0x40>)
    8f42:	4413      	add	r3, r2
    8f44:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8f46:	88bb      	ldrh	r3, [r7, #4]
    8f48:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8f4c:	b299      	uxth	r1, r3
    8f4e:	68fa      	ldr	r2, [r7, #12]
    8f50:	6853      	ldr	r3, [r2, #4]
    8f52:	f361 030d 	bfi	r3, r1, #0, #14
    8f56:	6053      	str	r3, [r2, #4]
}
    8f58:	bf00      	nop
    8f5a:	3714      	adds	r7, #20
    8f5c:	46bd      	mov	sp, r7
    8f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f62:	4770      	bx	lr
    8f64:	20000a34 	.word	0x20000a34

00008f68 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8f68:	b480      	push	{r7}
    8f6a:	b085      	sub	sp, #20
    8f6c:	af00      	add	r7, sp, #0
    8f6e:	4603      	mov	r3, r0
    8f70:	71fb      	strb	r3, [r7, #7]
    8f72:	460b      	mov	r3, r1
    8f74:	71bb      	strb	r3, [r7, #6]
    8f76:	4613      	mov	r3, r2
    8f78:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f7a:	79fa      	ldrb	r2, [r7, #7]
    8f7c:	79bb      	ldrb	r3, [r7, #6]
    8f7e:	0052      	lsls	r2, r2, #1
    8f80:	4413      	add	r3, r2
    8f82:	011b      	lsls	r3, r3, #4
    8f84:	4a08      	ldr	r2, [pc, #32]	; (8fa8 <_usbd_ep_set_out_size+0x40>)
    8f86:	4413      	add	r3, r2
    8f88:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8f8a:	88bb      	ldrh	r3, [r7, #4]
    8f8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8f90:	b299      	uxth	r1, r3
    8f92:	68fa      	ldr	r2, [r7, #12]
    8f94:	6853      	ldr	r3, [r2, #4]
    8f96:	f361 339b 	bfi	r3, r1, #14, #14
    8f9a:	6053      	str	r3, [r2, #4]
}
    8f9c:	bf00      	nop
    8f9e:	3714      	adds	r7, #20
    8fa0:	46bd      	mov	sp, r7
    8fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa6:	4770      	bx	lr
    8fa8:	20000a34 	.word	0x20000a34

00008fac <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8fac:	b580      	push	{r7, lr}
    8fae:	b084      	sub	sp, #16
    8fb0:	af00      	add	r7, sp, #0
    8fb2:	60ba      	str	r2, [r7, #8]
    8fb4:	607b      	str	r3, [r7, #4]
    8fb6:	4603      	mov	r3, r0
    8fb8:	73fb      	strb	r3, [r7, #15]
    8fba:	460b      	mov	r3, r1
    8fbc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8fbe:	68bb      	ldr	r3, [r7, #8]
    8fc0:	b29a      	uxth	r2, r3
    8fc2:	7bb9      	ldrb	r1, [r7, #14]
    8fc4:	7bfb      	ldrb	r3, [r7, #15]
    8fc6:	4618      	mov	r0, r3
    8fc8:	4b06      	ldr	r3, [pc, #24]	; (8fe4 <_usbd_ep_set_in_trans+0x38>)
    8fca:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	b29a      	uxth	r2, r3
    8fd0:	7bb9      	ldrb	r1, [r7, #14]
    8fd2:	7bfb      	ldrb	r3, [r7, #15]
    8fd4:	4618      	mov	r0, r3
    8fd6:	4b04      	ldr	r3, [pc, #16]	; (8fe8 <_usbd_ep_set_in_trans+0x3c>)
    8fd8:	4798      	blx	r3
}
    8fda:	bf00      	nop
    8fdc:	3710      	adds	r7, #16
    8fde:	46bd      	mov	sp, r7
    8fe0:	bd80      	pop	{r7, pc}
    8fe2:	bf00      	nop
    8fe4:	00008ee1 	.word	0x00008ee1
    8fe8:	00008e9d 	.word	0x00008e9d

00008fec <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8fec:	b580      	push	{r7, lr}
    8fee:	b084      	sub	sp, #16
    8ff0:	af00      	add	r7, sp, #0
    8ff2:	60ba      	str	r2, [r7, #8]
    8ff4:	607b      	str	r3, [r7, #4]
    8ff6:	4603      	mov	r3, r0
    8ff8:	73fb      	strb	r3, [r7, #15]
    8ffa:	460b      	mov	r3, r1
    8ffc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8ffe:	68bb      	ldr	r3, [r7, #8]
    9000:	b29a      	uxth	r2, r3
    9002:	7bb9      	ldrb	r1, [r7, #14]
    9004:	7bfb      	ldrb	r3, [r7, #15]
    9006:	4618      	mov	r0, r3
    9008:	4b06      	ldr	r3, [pc, #24]	; (9024 <_usbd_ep_set_out_trans+0x38>)
    900a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	b29a      	uxth	r2, r3
    9010:	7bb9      	ldrb	r1, [r7, #14]
    9012:	7bfb      	ldrb	r3, [r7, #15]
    9014:	4618      	mov	r0, r3
    9016:	4b04      	ldr	r3, [pc, #16]	; (9028 <_usbd_ep_set_out_trans+0x3c>)
    9018:	4798      	blx	r3
}
    901a:	bf00      	nop
    901c:	3710      	adds	r7, #16
    901e:	46bd      	mov	sp, r7
    9020:	bd80      	pop	{r7, pc}
    9022:	bf00      	nop
    9024:	00008f69 	.word	0x00008f69
    9028:	00008f25 	.word	0x00008f25

0000902c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    902c:	b480      	push	{r7}
    902e:	b085      	sub	sp, #20
    9030:	af00      	add	r7, sp, #0
    9032:	4603      	mov	r3, r0
    9034:	460a      	mov	r2, r1
    9036:	71fb      	strb	r3, [r7, #7]
    9038:	4613      	mov	r3, r2
    903a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    903c:	79fa      	ldrb	r2, [r7, #7]
    903e:	79bb      	ldrb	r3, [r7, #6]
    9040:	0052      	lsls	r2, r2, #1
    9042:	4413      	add	r3, r2
    9044:	011b      	lsls	r3, r3, #4
    9046:	4a06      	ldr	r2, [pc, #24]	; (9060 <_usbd_ep_clear_bank_status+0x34>)
    9048:	4413      	add	r3, r2
    904a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    904c:	68fb      	ldr	r3, [r7, #12]
    904e:	2200      	movs	r2, #0
    9050:	729a      	strb	r2, [r3, #10]
}
    9052:	bf00      	nop
    9054:	3714      	adds	r7, #20
    9056:	46bd      	mov	sp, r7
    9058:	f85d 7b04 	ldr.w	r7, [sp], #4
    905c:	4770      	bx	lr
    905e:	bf00      	nop
    9060:	20000a34 	.word	0x20000a34

00009064 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9064:	b580      	push	{r7, lr}
    9066:	b082      	sub	sp, #8
    9068:	af00      	add	r7, sp, #0
    906a:	4603      	mov	r3, r0
    906c:	71fb      	strb	r3, [r7, #7]
    906e:	460b      	mov	r3, r1
    9070:	71bb      	strb	r3, [r7, #6]
    9072:	4613      	mov	r3, r2
    9074:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9076:	797b      	ldrb	r3, [r7, #5]
    9078:	2b00      	cmp	r3, #0
    907a:	d00b      	beq.n	9094 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    907c:	79bb      	ldrb	r3, [r7, #6]
    907e:	2240      	movs	r2, #64	; 0x40
    9080:	fa02 f303 	lsl.w	r3, r2, r3
    9084:	b2da      	uxtb	r2, r3
    9086:	79fb      	ldrb	r3, [r7, #7]
    9088:	4619      	mov	r1, r3
    908a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    908e:	4b09      	ldr	r3, [pc, #36]	; (90b4 <_usbd_ep_set_in_rdy+0x50>)
    9090:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9092:	e00a      	b.n	90aa <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9094:	79bb      	ldrb	r3, [r7, #6]
    9096:	2240      	movs	r2, #64	; 0x40
    9098:	fa02 f303 	lsl.w	r3, r2, r3
    909c:	b2da      	uxtb	r2, r3
    909e:	79fb      	ldrb	r3, [r7, #7]
    90a0:	4619      	mov	r1, r3
    90a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90a6:	4b04      	ldr	r3, [pc, #16]	; (90b8 <_usbd_ep_set_in_rdy+0x54>)
    90a8:	4798      	blx	r3
}
    90aa:	bf00      	nop
    90ac:	3708      	adds	r7, #8
    90ae:	46bd      	mov	sp, r7
    90b0:	bd80      	pop	{r7, pc}
    90b2:	bf00      	nop
    90b4:	00008671 	.word	0x00008671
    90b8:	000086c5 	.word	0x000086c5

000090bc <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    90bc:	b580      	push	{r7, lr}
    90be:	b082      	sub	sp, #8
    90c0:	af00      	add	r7, sp, #0
    90c2:	4603      	mov	r3, r0
    90c4:	71fb      	strb	r3, [r7, #7]
    90c6:	460b      	mov	r3, r1
    90c8:	71bb      	strb	r3, [r7, #6]
    90ca:	4613      	mov	r3, r2
    90cc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    90ce:	797b      	ldrb	r3, [r7, #5]
    90d0:	2b00      	cmp	r3, #0
    90d2:	d00b      	beq.n	90ec <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    90d4:	79bb      	ldrb	r3, [r7, #6]
    90d6:	2240      	movs	r2, #64	; 0x40
    90d8:	fa02 f303 	lsl.w	r3, r2, r3
    90dc:	b2da      	uxtb	r2, r3
    90de:	79fb      	ldrb	r3, [r7, #7]
    90e0:	4619      	mov	r1, r3
    90e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90e6:	4b09      	ldr	r3, [pc, #36]	; (910c <_usbd_ep_set_out_rdy+0x50>)
    90e8:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    90ea:	e00a      	b.n	9102 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    90ec:	79bb      	ldrb	r3, [r7, #6]
    90ee:	2240      	movs	r2, #64	; 0x40
    90f0:	fa02 f303 	lsl.w	r3, r2, r3
    90f4:	b2da      	uxtb	r2, r3
    90f6:	79fb      	ldrb	r3, [r7, #7]
    90f8:	4619      	mov	r1, r3
    90fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90fe:	4b04      	ldr	r3, [pc, #16]	; (9110 <_usbd_ep_set_out_rdy+0x54>)
    9100:	4798      	blx	r3
}
    9102:	bf00      	nop
    9104:	3708      	adds	r7, #8
    9106:	46bd      	mov	sp, r7
    9108:	bd80      	pop	{r7, pc}
    910a:	bf00      	nop
    910c:	000086c5 	.word	0x000086c5
    9110:	00008671 	.word	0x00008671

00009114 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9114:	b480      	push	{r7}
    9116:	b083      	sub	sp, #12
    9118:	af00      	add	r7, sp, #0
    911a:	4603      	mov	r3, r0
    911c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    911e:	88fb      	ldrh	r3, [r7, #6]
    9120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9124:	d820      	bhi.n	9168 <_usbd_ep_pcksize_size+0x54>
    9126:	88fb      	ldrh	r3, [r7, #6]
    9128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    912c:	d81a      	bhi.n	9164 <_usbd_ep_pcksize_size+0x50>
    912e:	88fb      	ldrh	r3, [r7, #6]
    9130:	2b80      	cmp	r3, #128	; 0x80
    9132:	d815      	bhi.n	9160 <_usbd_ep_pcksize_size+0x4c>
    9134:	88fb      	ldrh	r3, [r7, #6]
    9136:	2b40      	cmp	r3, #64	; 0x40
    9138:	d810      	bhi.n	915c <_usbd_ep_pcksize_size+0x48>
    913a:	88fb      	ldrh	r3, [r7, #6]
    913c:	2b20      	cmp	r3, #32
    913e:	d80b      	bhi.n	9158 <_usbd_ep_pcksize_size+0x44>
    9140:	88fb      	ldrh	r3, [r7, #6]
    9142:	2b10      	cmp	r3, #16
    9144:	d806      	bhi.n	9154 <_usbd_ep_pcksize_size+0x40>
    9146:	88fb      	ldrh	r3, [r7, #6]
    9148:	2b08      	cmp	r3, #8
    914a:	bf8c      	ite	hi
    914c:	2301      	movhi	r3, #1
    914e:	2300      	movls	r3, #0
    9150:	b2db      	uxtb	r3, r3
    9152:	e00a      	b.n	916a <_usbd_ep_pcksize_size+0x56>
    9154:	2302      	movs	r3, #2
    9156:	e008      	b.n	916a <_usbd_ep_pcksize_size+0x56>
    9158:	2303      	movs	r3, #3
    915a:	e006      	b.n	916a <_usbd_ep_pcksize_size+0x56>
    915c:	2304      	movs	r3, #4
    915e:	e004      	b.n	916a <_usbd_ep_pcksize_size+0x56>
    9160:	2305      	movs	r3, #5
    9162:	e002      	b.n	916a <_usbd_ep_pcksize_size+0x56>
    9164:	2306      	movs	r3, #6
    9166:	e000      	b.n	916a <_usbd_ep_pcksize_size+0x56>
    9168:	2307      	movs	r3, #7
}
    916a:	4618      	mov	r0, r3
    916c:	370c      	adds	r7, #12
    916e:	46bd      	mov	sp, r7
    9170:	f85d 7b04 	ldr.w	r7, [sp], #4
    9174:	4770      	bx	lr
	...

00009178 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9178:	b480      	push	{r7}
    917a:	b085      	sub	sp, #20
    917c:	af00      	add	r7, sp, #0
    917e:	4603      	mov	r3, r0
    9180:	460a      	mov	r2, r1
    9182:	71fb      	strb	r3, [r7, #7]
    9184:	4613      	mov	r3, r2
    9186:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9188:	79fb      	ldrb	r3, [r7, #7]
    918a:	2b00      	cmp	r3, #0
    918c:	d008      	beq.n	91a0 <_usb_d_dev_ept+0x28>
    918e:	79bb      	ldrb	r3, [r7, #6]
    9190:	2b00      	cmp	r3, #0
    9192:	d003      	beq.n	919c <_usb_d_dev_ept+0x24>
    9194:	79fb      	ldrb	r3, [r7, #7]
    9196:	3304      	adds	r3, #4
    9198:	b2db      	uxtb	r3, r3
    919a:	e002      	b.n	91a2 <_usb_d_dev_ept+0x2a>
    919c:	79fb      	ldrb	r3, [r7, #7]
    919e:	e000      	b.n	91a2 <_usb_d_dev_ept+0x2a>
    91a0:	2300      	movs	r3, #0
    91a2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    91a4:	7bfa      	ldrb	r2, [r7, #15]
    91a6:	4613      	mov	r3, r2
    91a8:	009b      	lsls	r3, r3, #2
    91aa:	4413      	add	r3, r2
    91ac:	009b      	lsls	r3, r3, #2
    91ae:	3310      	adds	r3, #16
    91b0:	4a04      	ldr	r2, [pc, #16]	; (91c4 <_usb_d_dev_ept+0x4c>)
    91b2:	4413      	add	r3, r2
    91b4:	3304      	adds	r3, #4
}
    91b6:	4618      	mov	r0, r3
    91b8:	3714      	adds	r7, #20
    91ba:	46bd      	mov	sp, r7
    91bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c0:	4770      	bx	lr
    91c2:	bf00      	nop
    91c4:	2000096c 	.word	0x2000096c

000091c8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    91cc:	2104      	movs	r1, #4
    91ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91d2:	4b03      	ldr	r3, [pc, #12]	; (91e0 <_usb_d_dev_sof+0x18>)
    91d4:	4798      	blx	r3
	dev_inst.callbacks.sof();
    91d6:	4b03      	ldr	r3, [pc, #12]	; (91e4 <_usb_d_dev_sof+0x1c>)
    91d8:	681b      	ldr	r3, [r3, #0]
    91da:	4798      	blx	r3
}
    91dc:	bf00      	nop
    91de:	bd80      	pop	{r7, pc}
    91e0:	0000883f 	.word	0x0000883f
    91e4:	2000096c 	.word	0x2000096c

000091e8 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    91e8:	b580      	push	{r7, lr}
    91ea:	b084      	sub	sp, #16
    91ec:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    91ee:	2300      	movs	r3, #0
    91f0:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91f2:	f240 2101 	movw	r1, #513	; 0x201
    91f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91fa:	4b1a      	ldr	r3, [pc, #104]	; (9264 <_usb_d_dev_lpmsusp+0x7c>)
    91fc:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91fe:	f240 2101 	movw	r1, #513	; 0x201
    9202:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9206:	4b18      	ldr	r3, [pc, #96]	; (9268 <_usb_d_dev_lpmsusp+0x80>)
    9208:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    920a:	2170      	movs	r1, #112	; 0x70
    920c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9210:	4b16      	ldr	r3, [pc, #88]	; (926c <_usb_d_dev_lpmsusp+0x84>)
    9212:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9214:	2300      	movs	r3, #0
    9216:	73fb      	strb	r3, [r7, #15]
    9218:	e018      	b.n	924c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    921a:	7bfb      	ldrb	r3, [r7, #15]
    921c:	015b      	lsls	r3, r3, #5
    921e:	4a14      	ldr	r2, [pc, #80]	; (9270 <_usb_d_dev_lpmsusp+0x88>)
    9220:	4413      	add	r3, r2
    9222:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	891b      	ldrh	r3, [r3, #8]
    9228:	f3c3 0303 	ubfx	r3, r3, #0, #4
    922c:	b2db      	uxtb	r3, r3
    922e:	2b03      	cmp	r3, #3
    9230:	d109      	bne.n	9246 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	891b      	ldrh	r3, [r3, #8]
    9236:	f3c3 130a 	ubfx	r3, r3, #4, #11
    923a:	b29b      	uxth	r3, r3
    923c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    923e:	687b      	ldr	r3, [r7, #4]
    9240:	2200      	movs	r2, #0
    9242:	811a      	strh	r2, [r3, #8]
			break;
    9244:	e005      	b.n	9252 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9246:	7bfb      	ldrb	r3, [r7, #15]
    9248:	3301      	adds	r3, #1
    924a:	73fb      	strb	r3, [r7, #15]
    924c:	7bfb      	ldrb	r3, [r7, #15]
    924e:	2b03      	cmp	r3, #3
    9250:	d9e3      	bls.n	921a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9252:	4b08      	ldr	r3, [pc, #32]	; (9274 <_usb_d_dev_lpmsusp+0x8c>)
    9254:	685b      	ldr	r3, [r3, #4]
    9256:	68b9      	ldr	r1, [r7, #8]
    9258:	2003      	movs	r0, #3
    925a:	4798      	blx	r3
}
    925c:	bf00      	nop
    925e:	3710      	adds	r7, #16
    9260:	46bd      	mov	sp, r7
    9262:	bd80      	pop	{r7, pc}
    9264:	0000883f 	.word	0x0000883f
    9268:	00008895 	.word	0x00008895
    926c:	0000885d 	.word	0x0000885d
    9270:	20000a34 	.word	0x20000a34
    9274:	2000096c 	.word	0x2000096c

00009278 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9278:	b580      	push	{r7, lr}
    927a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    927c:	2180      	movs	r1, #128	; 0x80
    927e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9282:	4b04      	ldr	r3, [pc, #16]	; (9294 <_usb_d_dev_ramerr+0x1c>)
    9284:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9286:	4b04      	ldr	r3, [pc, #16]	; (9298 <_usb_d_dev_ramerr+0x20>)
    9288:	685b      	ldr	r3, [r3, #4]
    928a:	2100      	movs	r1, #0
    928c:	2005      	movs	r0, #5
    928e:	4798      	blx	r3
}
    9290:	bf00      	nop
    9292:	bd80      	pop	{r7, pc}
    9294:	0000883f 	.word	0x0000883f
    9298:	2000096c 	.word	0x2000096c

0000929c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    929c:	b580      	push	{r7, lr}
    929e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    92a0:	2170      	movs	r1, #112	; 0x70
    92a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92a6:	4b0b      	ldr	r3, [pc, #44]	; (92d4 <_usb_d_dev_wakeup+0x38>)
    92a8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    92aa:	2170      	movs	r1, #112	; 0x70
    92ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92b0:	4b09      	ldr	r3, [pc, #36]	; (92d8 <_usb_d_dev_wakeup+0x3c>)
    92b2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    92b4:	f240 2101 	movw	r1, #513	; 0x201
    92b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92bc:	4b07      	ldr	r3, [pc, #28]	; (92dc <_usb_d_dev_wakeup+0x40>)
    92be:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    92c0:	2000      	movs	r0, #0
    92c2:	4b07      	ldr	r3, [pc, #28]	; (92e0 <_usb_d_dev_wakeup+0x44>)
    92c4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    92c6:	4b07      	ldr	r3, [pc, #28]	; (92e4 <_usb_d_dev_wakeup+0x48>)
    92c8:	685b      	ldr	r3, [r3, #4]
    92ca:	2100      	movs	r1, #0
    92cc:	2002      	movs	r0, #2
    92ce:	4798      	blx	r3
}
    92d0:	bf00      	nop
    92d2:	bd80      	pop	{r7, pc}
    92d4:	0000883f 	.word	0x0000883f
    92d8:	00008895 	.word	0x00008895
    92dc:	0000885d 	.word	0x0000885d
    92e0:	00008b3d 	.word	0x00008b3d
    92e4:	2000096c 	.word	0x2000096c

000092e8 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    92e8:	b580      	push	{r7, lr}
    92ea:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    92ec:	2200      	movs	r2, #0
    92ee:	2100      	movs	r1, #0
    92f0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92f4:	4b0d      	ldr	r3, [pc, #52]	; (932c <_usb_d_dev_reset+0x44>)
    92f6:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    92f8:	2108      	movs	r1, #8
    92fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92fe:	4b0c      	ldr	r3, [pc, #48]	; (9330 <_usb_d_dev_reset+0x48>)
    9300:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9302:	2170      	movs	r1, #112	; 0x70
    9304:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9308:	4b0a      	ldr	r3, [pc, #40]	; (9334 <_usb_d_dev_reset+0x4c>)
    930a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    930c:	f240 2101 	movw	r1, #513	; 0x201
    9310:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9314:	4b08      	ldr	r3, [pc, #32]	; (9338 <_usb_d_dev_reset+0x50>)
    9316:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9318:	4b08      	ldr	r3, [pc, #32]	; (933c <_usb_d_dev_reset+0x54>)
    931a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    931c:	4b08      	ldr	r3, [pc, #32]	; (9340 <_usb_d_dev_reset+0x58>)
    931e:	685b      	ldr	r3, [r3, #4]
    9320:	2100      	movs	r1, #0
    9322:	2001      	movs	r0, #1
    9324:	4798      	blx	r3
}
    9326:	bf00      	nop
    9328:	bd80      	pop	{r7, pc}
    932a:	bf00      	nop
    932c:	000087d5 	.word	0x000087d5
    9330:	0000883f 	.word	0x0000883f
    9334:	00008895 	.word	0x00008895
    9338:	0000885d 	.word	0x0000885d
    933c:	00009ea5 	.word	0x00009ea5
    9340:	2000096c 	.word	0x2000096c

00009344 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9344:	b580      	push	{r7, lr}
    9346:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9348:	f240 2101 	movw	r1, #513	; 0x201
    934c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9350:	4b09      	ldr	r3, [pc, #36]	; (9378 <_usb_d_dev_suspend+0x34>)
    9352:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9354:	f240 2101 	movw	r1, #513	; 0x201
    9358:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    935c:	4b07      	ldr	r3, [pc, #28]	; (937c <_usb_d_dev_suspend+0x38>)
    935e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9360:	2170      	movs	r1, #112	; 0x70
    9362:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9366:	4b06      	ldr	r3, [pc, #24]	; (9380 <_usb_d_dev_suspend+0x3c>)
    9368:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    936a:	4b06      	ldr	r3, [pc, #24]	; (9384 <_usb_d_dev_suspend+0x40>)
    936c:	685b      	ldr	r3, [r3, #4]
    936e:	2100      	movs	r1, #0
    9370:	2004      	movs	r0, #4
    9372:	4798      	blx	r3
}
    9374:	bf00      	nop
    9376:	bd80      	pop	{r7, pc}
    9378:	0000883f 	.word	0x0000883f
    937c:	00008895 	.word	0x00008895
    9380:	0000885d 	.word	0x0000885d
    9384:	2000096c 	.word	0x2000096c

00009388 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9388:	b580      	push	{r7, lr}
    938a:	b082      	sub	sp, #8
    938c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    938e:	2301      	movs	r3, #1
    9390:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9392:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9396:	4b22      	ldr	r3, [pc, #136]	; (9420 <_usb_d_dev_handle_nep+0x98>)
    9398:	4798      	blx	r3
    939a:	4603      	mov	r3, r0
    939c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    939e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93a2:	4b20      	ldr	r3, [pc, #128]	; (9424 <_usb_d_dev_handle_nep+0x9c>)
    93a4:	4798      	blx	r3
    93a6:	4603      	mov	r3, r0
    93a8:	461a      	mov	r2, r3
    93aa:	88bb      	ldrh	r3, [r7, #4]
    93ac:	4013      	ands	r3, r2
    93ae:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    93b0:	88bb      	ldrh	r3, [r7, #4]
    93b2:	f003 0304 	and.w	r3, r3, #4
    93b6:	2b00      	cmp	r3, #0
    93b8:	d003      	beq.n	93c2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    93ba:	4b1b      	ldr	r3, [pc, #108]	; (9428 <_usb_d_dev_handle_nep+0xa0>)
    93bc:	4798      	blx	r3
		return true;
    93be:	2301      	movs	r3, #1
    93c0:	e02a      	b.n	9418 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    93c2:	88bb      	ldrh	r3, [r7, #4]
    93c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    93c8:	2b00      	cmp	r3, #0
    93ca:	d002      	beq.n	93d2 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    93cc:	4b17      	ldr	r3, [pc, #92]	; (942c <_usb_d_dev_handle_nep+0xa4>)
    93ce:	4798      	blx	r3
    93d0:	e021      	b.n	9416 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    93d2:	88bb      	ldrh	r3, [r7, #4]
    93d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    93d8:	2b00      	cmp	r3, #0
    93da:	d002      	beq.n	93e2 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    93dc:	4b14      	ldr	r3, [pc, #80]	; (9430 <_usb_d_dev_handle_nep+0xa8>)
    93de:	4798      	blx	r3
    93e0:	e019      	b.n	9416 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    93e2:	88bb      	ldrh	r3, [r7, #4]
    93e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    93e8:	2b00      	cmp	r3, #0
    93ea:	d002      	beq.n	93f2 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    93ec:	4b11      	ldr	r3, [pc, #68]	; (9434 <_usb_d_dev_handle_nep+0xac>)
    93ee:	4798      	blx	r3
    93f0:	e011      	b.n	9416 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    93f2:	88bb      	ldrh	r3, [r7, #4]
    93f4:	f003 0308 	and.w	r3, r3, #8
    93f8:	2b00      	cmp	r3, #0
    93fa:	d002      	beq.n	9402 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    93fc:	4b0e      	ldr	r3, [pc, #56]	; (9438 <_usb_d_dev_handle_nep+0xb0>)
    93fe:	4798      	blx	r3
    9400:	e009      	b.n	9416 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9402:	88bb      	ldrh	r3, [r7, #4]
    9404:	f003 0301 	and.w	r3, r3, #1
    9408:	2b00      	cmp	r3, #0
    940a:	d002      	beq.n	9412 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    940c:	4b0b      	ldr	r3, [pc, #44]	; (943c <_usb_d_dev_handle_nep+0xb4>)
    940e:	4798      	blx	r3
    9410:	e001      	b.n	9416 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9412:	2300      	movs	r3, #0
    9414:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9416:	79fb      	ldrb	r3, [r7, #7]
}
    9418:	4618      	mov	r0, r3
    941a:	3708      	adds	r7, #8
    941c:	46bd      	mov	sp, r7
    941e:	bd80      	pop	{r7, pc}
    9420:	00008825 	.word	0x00008825
    9424:	0000887b 	.word	0x0000887b
    9428:	000091c9 	.word	0x000091c9
    942c:	000091e9 	.word	0x000091e9
    9430:	00009279 	.word	0x00009279
    9434:	0000929d 	.word	0x0000929d
    9438:	000092e9 	.word	0x000092e9
    943c:	00009345 	.word	0x00009345

00009440 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9440:	b590      	push	{r4, r7, lr}
    9442:	b089      	sub	sp, #36	; 0x24
    9444:	af00      	add	r7, sp, #0
    9446:	6078      	str	r0, [r7, #4]
    9448:	460b      	mov	r3, r1
    944a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    944c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9450:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	7c9b      	ldrb	r3, [r3, #18]
    9456:	f003 030f 	and.w	r3, r3, #15
    945a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    945c:	7dfb      	ldrb	r3, [r7, #23]
    945e:	015b      	lsls	r3, r3, #5
    9460:	4a73      	ldr	r2, [pc, #460]	; (9630 <_usb_d_dev_in_next+0x1f0>)
    9462:	4413      	add	r3, r2
    9464:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9466:	78fb      	ldrb	r3, [r7, #3]
    9468:	2b00      	cmp	r3, #0
    946a:	d006      	beq.n	947a <_usb_d_dev_in_next+0x3a>
    946c:	693b      	ldr	r3, [r7, #16]
    946e:	3310      	adds	r3, #16
    9470:	685b      	ldr	r3, [r3, #4]
    9472:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9476:	b29b      	uxth	r3, r3
    9478:	e000      	b.n	947c <_usb_d_dev_in_next+0x3c>
    947a:	2300      	movs	r3, #0
    947c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    947e:	687b      	ldr	r3, [r7, #4]
    9480:	8a1b      	ldrh	r3, [r3, #16]
    9482:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9486:	4293      	cmp	r3, r2
    9488:	d103      	bne.n	9492 <_usb_d_dev_in_next+0x52>
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	8a1b      	ldrh	r3, [r3, #16]
    948e:	b21b      	sxth	r3, r3
    9490:	e004      	b.n	949c <_usb_d_dev_in_next+0x5c>
    9492:	687b      	ldr	r3, [r7, #4]
    9494:	8a1b      	ldrh	r3, [r3, #16]
    9496:	3b01      	subs	r3, #1
    9498:	b29b      	uxth	r3, r3
    949a:	b21b      	sxth	r3, r3
    949c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    94a0:	4013      	ands	r3, r2
    94a2:	b21b      	sxth	r3, r3
    94a4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    94a6:	2300      	movs	r3, #0
    94a8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	7cdb      	ldrb	r3, [r3, #19]
    94ae:	f003 0307 	and.w	r3, r3, #7
    94b2:	b2db      	uxtb	r3, r3
    94b4:	2b01      	cmp	r3, #1
    94b6:	bf0c      	ite	eq
    94b8:	2301      	moveq	r3, #1
    94ba:	2300      	movne	r3, #0
    94bc:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    94be:	78fb      	ldrb	r3, [r7, #3]
    94c0:	2b00      	cmp	r3, #0
    94c2:	d004      	beq.n	94ce <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    94c4:	7dfb      	ldrb	r3, [r7, #23]
    94c6:	2101      	movs	r1, #1
    94c8:	4618      	mov	r0, r3
    94ca:	4b5a      	ldr	r3, [pc, #360]	; (9634 <_usb_d_dev_in_next+0x1f4>)
    94cc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    94ce:	687b      	ldr	r3, [r7, #4]
    94d0:	689a      	ldr	r2, [r3, #8]
    94d2:	89fb      	ldrh	r3, [r7, #14]
    94d4:	441a      	add	r2, r3
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    94da:	687b      	ldr	r3, [r7, #4]
    94dc:	689a      	ldr	r2, [r3, #8]
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	685b      	ldr	r3, [r3, #4]
    94e2:	429a      	cmp	r2, r3
    94e4:	d243      	bcs.n	956e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	685b      	ldr	r3, [r3, #4]
    94ea:	b29a      	uxth	r2, r3
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	689b      	ldr	r3, [r3, #8]
    94f0:	b29b      	uxth	r3, r3
    94f2:	1ad3      	subs	r3, r2, r3
    94f4:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    94f6:	687b      	ldr	r3, [r7, #4]
    94f8:	7cdb      	ldrb	r3, [r3, #19]
    94fa:	f003 0320 	and.w	r3, r3, #32
    94fe:	b2db      	uxtb	r3, r3
    9500:	2b00      	cmp	r3, #0
    9502:	d01b      	beq.n	953c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	8a1b      	ldrh	r3, [r3, #16]
    9508:	8bfa      	ldrh	r2, [r7, #30]
    950a:	429a      	cmp	r2, r3
    950c:	d902      	bls.n	9514 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    950e:	687b      	ldr	r3, [r7, #4]
    9510:	8a1b      	ldrh	r3, [r3, #16]
    9512:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	68d8      	ldr	r0, [r3, #12]
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	681a      	ldr	r2, [r3, #0]
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	689b      	ldr	r3, [r3, #8]
    9520:	4413      	add	r3, r2
    9522:	8bfa      	ldrh	r2, [r7, #30]
    9524:	4619      	mov	r1, r3
    9526:	4b44      	ldr	r3, [pc, #272]	; (9638 <_usb_d_dev_in_next+0x1f8>)
    9528:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    952a:	687b      	ldr	r3, [r7, #4]
    952c:	68db      	ldr	r3, [r3, #12]
    952e:	461a      	mov	r2, r3
    9530:	7dfb      	ldrb	r3, [r7, #23]
    9532:	2101      	movs	r1, #1
    9534:	4618      	mov	r0, r3
    9536:	4b41      	ldr	r3, [pc, #260]	; (963c <_usb_d_dev_in_next+0x1fc>)
    9538:	4798      	blx	r3
    953a:	e011      	b.n	9560 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    953c:	8bfb      	ldrh	r3, [r7, #30]
    953e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9542:	d902      	bls.n	954a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9548:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    954a:	687b      	ldr	r3, [r7, #4]
    954c:	681a      	ldr	r2, [r3, #0]
    954e:	687b      	ldr	r3, [r7, #4]
    9550:	689b      	ldr	r3, [r3, #8]
    9552:	4413      	add	r3, r2
    9554:	461a      	mov	r2, r3
    9556:	7dfb      	ldrb	r3, [r7, #23]
    9558:	2101      	movs	r1, #1
    955a:	4618      	mov	r0, r3
    955c:	4b37      	ldr	r3, [pc, #220]	; (963c <_usb_d_dev_in_next+0x1fc>)
    955e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9560:	8bfa      	ldrh	r2, [r7, #30]
    9562:	7df8      	ldrb	r0, [r7, #23]
    9564:	2300      	movs	r3, #0
    9566:	2101      	movs	r1, #1
    9568:	4c35      	ldr	r4, [pc, #212]	; (9640 <_usb_d_dev_in_next+0x200>)
    956a:	47a0      	blx	r4
		goto _in_tx_exec;
    956c:	e041      	b.n	95f2 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    956e:	687b      	ldr	r3, [r7, #4]
    9570:	7cdb      	ldrb	r3, [r3, #19]
    9572:	f003 0310 	and.w	r3, r3, #16
    9576:	b2db      	uxtb	r3, r3
    9578:	2b00      	cmp	r3, #0
    957a:	d00b      	beq.n	9594 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    957c:	687a      	ldr	r2, [r7, #4]
    957e:	7cd3      	ldrb	r3, [r2, #19]
    9580:	f36f 1304 	bfc	r3, #4, #1
    9584:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9586:	7df8      	ldrb	r0, [r7, #23]
    9588:	2300      	movs	r3, #0
    958a:	2200      	movs	r2, #0
    958c:	2101      	movs	r1, #1
    958e:	4c2c      	ldr	r4, [pc, #176]	; (9640 <_usb_d_dev_in_next+0x200>)
    9590:	47a0      	blx	r4
		goto _in_tx_exec;
    9592:	e02e      	b.n	95f2 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9594:	7afb      	ldrb	r3, [r7, #11]
    9596:	2b00      	cmp	r3, #0
    9598:	d006      	beq.n	95a8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    959a:	7dfb      	ldrb	r3, [r7, #23]
    959c:	224b      	movs	r2, #75	; 0x4b
    959e:	4619      	mov	r1, r3
    95a0:	69b8      	ldr	r0, [r7, #24]
    95a2:	4b28      	ldr	r3, [pc, #160]	; (9644 <_usb_d_dev_in_next+0x204>)
    95a4:	4798      	blx	r3
    95a6:	e005      	b.n	95b4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    95a8:	7dfb      	ldrb	r3, [r7, #23]
    95aa:	224a      	movs	r2, #74	; 0x4a
    95ac:	4619      	mov	r1, r3
    95ae:	69b8      	ldr	r0, [r7, #24]
    95b0:	4b24      	ldr	r3, [pc, #144]	; (9644 <_usb_d_dev_in_next+0x204>)
    95b2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	8a1b      	ldrh	r3, [r3, #16]
    95b8:	89ba      	ldrh	r2, [r7, #12]
    95ba:	429a      	cmp	r2, r3
    95bc:	d114      	bne.n	95e8 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    95be:	687a      	ldr	r2, [r7, #4]
    95c0:	7cd3      	ldrb	r3, [r2, #19]
    95c2:	f36f 1386 	bfc	r3, #6, #1
    95c6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    95c8:	4b1f      	ldr	r3, [pc, #124]	; (9648 <_usb_d_dev_in_next+0x208>)
    95ca:	68db      	ldr	r3, [r3, #12]
    95cc:	687a      	ldr	r2, [r7, #4]
    95ce:	7c90      	ldrb	r0, [r2, #18]
    95d0:	687a      	ldr	r2, [r7, #4]
    95d2:	6892      	ldr	r2, [r2, #8]
    95d4:	4611      	mov	r1, r2
    95d6:	4798      	blx	r3
    95d8:	4603      	mov	r3, r0
    95da:	2b00      	cmp	r3, #0
    95dc:	d124      	bne.n	9628 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    95de:	687a      	ldr	r2, [r7, #4]
    95e0:	7cd3      	ldrb	r3, [r2, #19]
    95e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    95e6:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    95e8:	2100      	movs	r1, #0
    95ea:	6878      	ldr	r0, [r7, #4]
    95ec:	4b17      	ldr	r3, [pc, #92]	; (964c <_usb_d_dev_in_next+0x20c>)
    95ee:	4798      	blx	r3
	return;
    95f0:	e01b      	b.n	962a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    95f2:	78fb      	ldrb	r3, [r7, #3]
    95f4:	f083 0301 	eor.w	r3, r3, #1
    95f8:	b2db      	uxtb	r3, r3
    95fa:	2b00      	cmp	r3, #0
    95fc:	d00d      	beq.n	961a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    95fe:	7afb      	ldrb	r3, [r7, #11]
    9600:	2b00      	cmp	r3, #0
    9602:	d002      	beq.n	960a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9604:	234e      	movs	r3, #78	; 0x4e
    9606:	777b      	strb	r3, [r7, #29]
    9608:	e001      	b.n	960e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    960a:	234a      	movs	r3, #74	; 0x4a
    960c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    960e:	7f7a      	ldrb	r2, [r7, #29]
    9610:	7dfb      	ldrb	r3, [r7, #23]
    9612:	4619      	mov	r1, r3
    9614:	69b8      	ldr	r0, [r7, #24]
    9616:	4b0e      	ldr	r3, [pc, #56]	; (9650 <_usb_d_dev_in_next+0x210>)
    9618:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    961a:	7dfb      	ldrb	r3, [r7, #23]
    961c:	2201      	movs	r2, #1
    961e:	2101      	movs	r1, #1
    9620:	4618      	mov	r0, r3
    9622:	4b0c      	ldr	r3, [pc, #48]	; (9654 <_usb_d_dev_in_next+0x214>)
    9624:	4798      	blx	r3
    9626:	e000      	b.n	962a <_usb_d_dev_in_next+0x1ea>
			return;
    9628:	bf00      	nop
}
    962a:	3724      	adds	r7, #36	; 0x24
    962c:	46bd      	mov	sp, r7
    962e:	bd90      	pop	{r4, r7, pc}
    9630:	20000a34 	.word	0x20000a34
    9634:	00008e39 	.word	0x00008e39
    9638:	0000e829 	.word	0x0000e829
    963c:	00008e65 	.word	0x00008e65
    9640:	00008fad 	.word	0x00008fad
    9644:	00008745 	.word	0x00008745
    9648:	2000096c 	.word	0x2000096c
    964c:	0000a769 	.word	0x0000a769
    9650:	00008719 	.word	0x00008719
    9654:	00009065 	.word	0x00009065

00009658 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9658:	b590      	push	{r4, r7, lr}
    965a:	b08b      	sub	sp, #44	; 0x2c
    965c:	af00      	add	r7, sp, #0
    965e:	6078      	str	r0, [r7, #4]
    9660:	460b      	mov	r3, r1
    9662:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9664:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9668:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    966a:	687b      	ldr	r3, [r7, #4]
    966c:	7c9b      	ldrb	r3, [r3, #18]
    966e:	f003 030f 	and.w	r3, r3, #15
    9672:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9674:	7ffb      	ldrb	r3, [r7, #31]
    9676:	015b      	lsls	r3, r3, #5
    9678:	4a94      	ldr	r2, [pc, #592]	; (98cc <_usb_d_dev_out_next+0x274>)
    967a:	4413      	add	r3, r2
    967c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    967e:	78fb      	ldrb	r3, [r7, #3]
    9680:	2b00      	cmp	r3, #0
    9682:	d005      	beq.n	9690 <_usb_d_dev_out_next+0x38>
    9684:	69bb      	ldr	r3, [r7, #24]
    9686:	685b      	ldr	r3, [r3, #4]
    9688:	f3c3 338d 	ubfx	r3, r3, #14, #14
    968c:	b29b      	uxth	r3, r3
    968e:	e000      	b.n	9692 <_usb_d_dev_out_next+0x3a>
    9690:	2300      	movs	r3, #0
    9692:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9694:	78fb      	ldrb	r3, [r7, #3]
    9696:	2b00      	cmp	r3, #0
    9698:	d005      	beq.n	96a6 <_usb_d_dev_out_next+0x4e>
    969a:	69bb      	ldr	r3, [r7, #24]
    969c:	685b      	ldr	r3, [r3, #4]
    969e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    96a2:	b29b      	uxth	r3, r3
    96a4:	e000      	b.n	96a8 <_usb_d_dev_out_next+0x50>
    96a6:	2300      	movs	r3, #0
    96a8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    96aa:	687b      	ldr	r3, [r7, #4]
    96ac:	8a1b      	ldrh	r3, [r3, #16]
    96ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
    96b2:	4293      	cmp	r3, r2
    96b4:	d004      	beq.n	96c0 <_usb_d_dev_out_next+0x68>
    96b6:	687b      	ldr	r3, [r7, #4]
    96b8:	8a1b      	ldrh	r3, [r3, #16]
    96ba:	3b01      	subs	r3, #1
    96bc:	b29b      	uxth	r3, r3
    96be:	e001      	b.n	96c4 <_usb_d_dev_out_next+0x6c>
    96c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    96c4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    96c6:	8aba      	ldrh	r2, [r7, #20]
    96c8:	8a7b      	ldrh	r3, [r7, #18]
    96ca:	4013      	ands	r3, r2
    96cc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    96ce:	687b      	ldr	r3, [r7, #4]
    96d0:	7cdb      	ldrb	r3, [r3, #19]
    96d2:	f003 0307 	and.w	r3, r3, #7
    96d6:	b2db      	uxtb	r3, r3
    96d8:	2b01      	cmp	r3, #1
    96da:	bf0c      	ite	eq
    96dc:	2301      	moveq	r3, #1
    96de:	2300      	movne	r3, #0
    96e0:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    96e2:	78fb      	ldrb	r3, [r7, #3]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d004      	beq.n	96f2 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    96e8:	7ffb      	ldrb	r3, [r7, #31]
    96ea:	2100      	movs	r1, #0
    96ec:	4618      	mov	r0, r3
    96ee:	4b78      	ldr	r3, [pc, #480]	; (98d0 <_usb_d_dev_out_next+0x278>)
    96f0:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	7cdb      	ldrb	r3, [r3, #19]
    96f6:	f003 0320 	and.w	r3, r3, #32
    96fa:	b2db      	uxtb	r3, r3
    96fc:	2b00      	cmp	r3, #0
    96fe:	d01c      	beq.n	973a <_usb_d_dev_out_next+0xe2>
    9700:	687b      	ldr	r3, [r7, #4]
    9702:	685b      	ldr	r3, [r3, #4]
    9704:	2b00      	cmp	r3, #0
    9706:	d018      	beq.n	973a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	685b      	ldr	r3, [r3, #4]
    970c:	b29a      	uxth	r2, r3
    970e:	687b      	ldr	r3, [r7, #4]
    9710:	689b      	ldr	r3, [r3, #8]
    9712:	b29b      	uxth	r3, r3
    9714:	1ad3      	subs	r3, r2, r3
    9716:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9718:	687b      	ldr	r3, [r7, #4]
    971a:	681a      	ldr	r2, [r3, #0]
    971c:	687b      	ldr	r3, [r7, #4]
    971e:	689b      	ldr	r3, [r3, #8]
    9720:	18d0      	adds	r0, r2, r3
    9722:	687b      	ldr	r3, [r7, #4]
    9724:	68d9      	ldr	r1, [r3, #12]
    9726:	89ba      	ldrh	r2, [r7, #12]
    9728:	8a3b      	ldrh	r3, [r7, #16]
    972a:	429a      	cmp	r2, r3
    972c:	d901      	bls.n	9732 <_usb_d_dev_out_next+0xda>
    972e:	8a3b      	ldrh	r3, [r7, #16]
    9730:	e000      	b.n	9734 <_usb_d_dev_out_next+0xdc>
    9732:	89bb      	ldrh	r3, [r7, #12]
    9734:	461a      	mov	r2, r3
    9736:	4b67      	ldr	r3, [pc, #412]	; (98d4 <_usb_d_dev_out_next+0x27c>)
    9738:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    973a:	687b      	ldr	r3, [r7, #4]
    973c:	685b      	ldr	r3, [r3, #4]
    973e:	2b00      	cmp	r3, #0
    9740:	d121      	bne.n	9786 <_usb_d_dev_out_next+0x12e>
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	7cdb      	ldrb	r3, [r3, #19]
    9746:	f003 0310 	and.w	r3, r3, #16
    974a:	b2db      	uxtb	r3, r3
    974c:	2b00      	cmp	r3, #0
    974e:	d01a      	beq.n	9786 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9750:	687a      	ldr	r2, [r7, #4]
    9752:	7cd3      	ldrb	r3, [r2, #19]
    9754:	f36f 1304 	bfc	r3, #4, #1
    9758:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    975a:	687a      	ldr	r2, [r7, #4]
    975c:	7cd3      	ldrb	r3, [r2, #19]
    975e:	f043 0320 	orr.w	r3, r3, #32
    9762:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	68db      	ldr	r3, [r3, #12]
    9768:	461a      	mov	r2, r3
    976a:	7ffb      	ldrb	r3, [r7, #31]
    976c:	2100      	movs	r1, #0
    976e:	4618      	mov	r0, r3
    9770:	4b59      	ldr	r3, [pc, #356]	; (98d8 <_usb_d_dev_out_next+0x280>)
    9772:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9774:	687b      	ldr	r3, [r7, #4]
    9776:	8a1b      	ldrh	r3, [r3, #16]
    9778:	461a      	mov	r2, r3
    977a:	7ff8      	ldrb	r0, [r7, #31]
    977c:	2300      	movs	r3, #0
    977e:	2100      	movs	r1, #0
    9780:	4c56      	ldr	r4, [pc, #344]	; (98dc <_usb_d_dev_out_next+0x284>)
    9782:	47a0      	blx	r4
		goto _out_rx_exec;
    9784:	e090      	b.n	98a8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9786:	78fb      	ldrb	r3, [r7, #3]
    9788:	2b00      	cmp	r3, #0
    978a:	d010      	beq.n	97ae <_usb_d_dev_out_next+0x156>
    978c:	687b      	ldr	r3, [r7, #4]
    978e:	8a1b      	ldrh	r3, [r3, #16]
    9790:	8a3a      	ldrh	r2, [r7, #16]
    9792:	429a      	cmp	r2, r3
    9794:	d20b      	bcs.n	97ae <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9796:	687a      	ldr	r2, [r7, #4]
    9798:	7cd3      	ldrb	r3, [r2, #19]
    979a:	f36f 1304 	bfc	r3, #4, #1
    979e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    97a0:	687b      	ldr	r3, [r7, #4]
    97a2:	689a      	ldr	r2, [r3, #8]
    97a4:	8abb      	ldrh	r3, [r7, #20]
    97a6:	441a      	add	r2, r3
    97a8:	687b      	ldr	r3, [r7, #4]
    97aa:	609a      	str	r2, [r3, #8]
    97ac:	e05c      	b.n	9868 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    97ae:	687b      	ldr	r3, [r7, #4]
    97b0:	689a      	ldr	r2, [r3, #8]
    97b2:	8afb      	ldrh	r3, [r7, #22]
    97b4:	441a      	add	r2, r3
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    97ba:	687b      	ldr	r3, [r7, #4]
    97bc:	689a      	ldr	r2, [r3, #8]
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	685b      	ldr	r3, [r3, #4]
    97c2:	429a      	cmp	r2, r3
    97c4:	d250      	bcs.n	9868 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    97c6:	687b      	ldr	r3, [r7, #4]
    97c8:	685b      	ldr	r3, [r3, #4]
    97ca:	b29a      	uxth	r2, r3
    97cc:	687b      	ldr	r3, [r7, #4]
    97ce:	689b      	ldr	r3, [r3, #8]
    97d0:	b29b      	uxth	r3, r3
    97d2:	1ad3      	subs	r3, r2, r3
    97d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	7cdb      	ldrb	r3, [r3, #19]
    97da:	f003 0320 	and.w	r3, r3, #32
    97de:	b2db      	uxtb	r3, r3
    97e0:	2b00      	cmp	r3, #0
    97e2:	d010      	beq.n	9806 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    97e4:	687b      	ldr	r3, [r7, #4]
    97e6:	8a1b      	ldrh	r3, [r3, #16]
    97e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    97ea:	429a      	cmp	r2, r3
    97ec:	d902      	bls.n	97f4 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	8a1b      	ldrh	r3, [r3, #16]
    97f2:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	68db      	ldr	r3, [r3, #12]
    97f8:	461a      	mov	r2, r3
    97fa:	7ffb      	ldrb	r3, [r7, #31]
    97fc:	2100      	movs	r1, #0
    97fe:	4618      	mov	r0, r3
    9800:	4b35      	ldr	r3, [pc, #212]	; (98d8 <_usb_d_dev_out_next+0x280>)
    9802:	4798      	blx	r3
    9804:	e029      	b.n	985a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9806:	687b      	ldr	r3, [r7, #4]
    9808:	8a1b      	ldrh	r3, [r3, #16]
    980a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    980c:	429a      	cmp	r2, r3
    980e:	d90f      	bls.n	9830 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9816:	d903      	bls.n	9820 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    981c:	84fb      	strh	r3, [r7, #38]	; 0x26
    981e:	e011      	b.n	9844 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9820:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9822:	8a7b      	ldrh	r3, [r7, #18]
    9824:	4013      	ands	r3, r2
    9826:	b29b      	uxth	r3, r3
    9828:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    982a:	1ad3      	subs	r3, r2, r3
    982c:	84fb      	strh	r3, [r7, #38]	; 0x26
    982e:	e009      	b.n	9844 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9830:	687b      	ldr	r3, [r7, #4]
    9832:	8a1b      	ldrh	r3, [r3, #16]
    9834:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9836:	429a      	cmp	r2, r3
    9838:	d204      	bcs.n	9844 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    983a:	687a      	ldr	r2, [r7, #4]
    983c:	7cd3      	ldrb	r3, [r2, #19]
    983e:	f043 0320 	orr.w	r3, r3, #32
    9842:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	681a      	ldr	r2, [r3, #0]
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	689b      	ldr	r3, [r3, #8]
    984c:	4413      	add	r3, r2
    984e:	461a      	mov	r2, r3
    9850:	7ffb      	ldrb	r3, [r7, #31]
    9852:	2100      	movs	r1, #0
    9854:	4618      	mov	r0, r3
    9856:	4b20      	ldr	r3, [pc, #128]	; (98d8 <_usb_d_dev_out_next+0x280>)
    9858:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    985a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    985c:	7ff8      	ldrb	r0, [r7, #31]
    985e:	2300      	movs	r3, #0
    9860:	2100      	movs	r1, #0
    9862:	4c1e      	ldr	r4, [pc, #120]	; (98dc <_usb_d_dev_out_next+0x284>)
    9864:	47a0      	blx	r4
			goto _out_rx_exec;
    9866:	e01f      	b.n	98a8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9868:	7bfb      	ldrb	r3, [r7, #15]
    986a:	2b00      	cmp	r3, #0
    986c:	d006      	beq.n	987c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    986e:	7ffb      	ldrb	r3, [r7, #31]
    9870:	222d      	movs	r2, #45	; 0x2d
    9872:	4619      	mov	r1, r3
    9874:	6a38      	ldr	r0, [r7, #32]
    9876:	4b1a      	ldr	r3, [pc, #104]	; (98e0 <_usb_d_dev_out_next+0x288>)
    9878:	4798      	blx	r3
    987a:	e005      	b.n	9888 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    987c:	7ffb      	ldrb	r3, [r7, #31]
    987e:	2225      	movs	r2, #37	; 0x25
    9880:	4619      	mov	r1, r3
    9882:	6a38      	ldr	r0, [r7, #32]
    9884:	4b16      	ldr	r3, [pc, #88]	; (98e0 <_usb_d_dev_out_next+0x288>)
    9886:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9888:	7ffb      	ldrb	r3, [r7, #31]
    988a:	2b00      	cmp	r3, #0
    988c:	d107      	bne.n	989e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    988e:	687b      	ldr	r3, [r7, #4]
    9890:	68db      	ldr	r3, [r3, #12]
    9892:	461a      	mov	r2, r3
    9894:	7ffb      	ldrb	r3, [r7, #31]
    9896:	2100      	movs	r1, #0
    9898:	4618      	mov	r0, r3
    989a:	4b0f      	ldr	r3, [pc, #60]	; (98d8 <_usb_d_dev_out_next+0x280>)
    989c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    989e:	2100      	movs	r1, #0
    98a0:	6878      	ldr	r0, [r7, #4]
    98a2:	4b10      	ldr	r3, [pc, #64]	; (98e4 <_usb_d_dev_out_next+0x28c>)
    98a4:	4798      	blx	r3
	return;
    98a6:	e031      	b.n	990c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    98a8:	78fb      	ldrb	r3, [r7, #3]
    98aa:	f083 0301 	eor.w	r3, r3, #1
    98ae:	b2db      	uxtb	r3, r3
    98b0:	2b00      	cmp	r3, #0
    98b2:	d025      	beq.n	9900 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    98b4:	7bfb      	ldrb	r3, [r7, #15]
    98b6:	2b00      	cmp	r3, #0
    98b8:	d018      	beq.n	98ec <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    98ba:	7ffb      	ldrb	r3, [r7, #31]
    98bc:	2101      	movs	r1, #1
    98be:	4618      	mov	r0, r3
    98c0:	4b09      	ldr	r3, [pc, #36]	; (98e8 <_usb_d_dev_out_next+0x290>)
    98c2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    98c4:	232d      	movs	r3, #45	; 0x2d
    98c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    98ca:	e012      	b.n	98f2 <_usb_d_dev_out_next+0x29a>
    98cc:	20000a34 	.word	0x20000a34
    98d0:	00008e39 	.word	0x00008e39
    98d4:	0000e829 	.word	0x0000e829
    98d8:	00008e65 	.word	0x00008e65
    98dc:	00008fed 	.word	0x00008fed
    98e0:	00008745 	.word	0x00008745
    98e4:	0000a769 	.word	0x0000a769
    98e8:	0000902d 	.word	0x0000902d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    98ec:	2325      	movs	r3, #37	; 0x25
    98ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    98f2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    98f6:	7ffb      	ldrb	r3, [r7, #31]
    98f8:	4619      	mov	r1, r3
    98fa:	6a38      	ldr	r0, [r7, #32]
    98fc:	4b05      	ldr	r3, [pc, #20]	; (9914 <_usb_d_dev_out_next+0x2bc>)
    98fe:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9900:	7ffb      	ldrb	r3, [r7, #31]
    9902:	2201      	movs	r2, #1
    9904:	2100      	movs	r1, #0
    9906:	4618      	mov	r0, r3
    9908:	4b03      	ldr	r3, [pc, #12]	; (9918 <_usb_d_dev_out_next+0x2c0>)
    990a:	4798      	blx	r3
}
    990c:	372c      	adds	r7, #44	; 0x2c
    990e:	46bd      	mov	sp, r7
    9910:	bd90      	pop	{r4, r7, pc}
    9912:	bf00      	nop
    9914:	00008719 	.word	0x00008719
    9918:	000090bd 	.word	0x000090bd

0000991c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    991c:	b580      	push	{r7, lr}
    991e:	b084      	sub	sp, #16
    9920:	af00      	add	r7, sp, #0
    9922:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	7c9b      	ldrb	r3, [r3, #18]
    9928:	f003 030f 	and.w	r3, r3, #15
    992c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	7cdb      	ldrb	r3, [r3, #19]
    9932:	f003 0307 	and.w	r3, r3, #7
    9936:	b2db      	uxtb	r3, r3
    9938:	2b01      	cmp	r3, #1
    993a:	bf0c      	ite	eq
    993c:	2301      	moveq	r3, #1
    993e:	2300      	movne	r3, #0
    9940:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9942:	7bbb      	ldrb	r3, [r7, #14]
    9944:	f083 0301 	eor.w	r3, r3, #1
    9948:	b2db      	uxtb	r3, r3
    994a:	2b00      	cmp	r3, #0
    994c:	d008      	beq.n	9960 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    994e:	7bfb      	ldrb	r3, [r7, #15]
    9950:	4618      	mov	r0, r3
    9952:	4b20      	ldr	r3, [pc, #128]	; (99d4 <_usb_d_dev_handle_setup+0xb8>)
    9954:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9956:	7bfb      	ldrb	r3, [r7, #15]
    9958:	4618      	mov	r0, r3
    995a:	4b1f      	ldr	r3, [pc, #124]	; (99d8 <_usb_d_dev_handle_setup+0xbc>)
    995c:	4798      	blx	r3
		return;
    995e:	e036      	b.n	99ce <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	7cdb      	ldrb	r3, [r3, #19]
    9964:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9968:	b2db      	uxtb	r3, r3
    996a:	2b00      	cmp	r3, #0
    996c:	d010      	beq.n	9990 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    996e:	687a      	ldr	r2, [r7, #4]
    9970:	7cd3      	ldrb	r3, [r2, #19]
    9972:	f36f 1386 	bfc	r3, #6, #1
    9976:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9978:	7bfb      	ldrb	r3, [r7, #15]
    997a:	2200      	movs	r2, #0
    997c:	2101      	movs	r1, #1
    997e:	4618      	mov	r0, r3
    9980:	4b16      	ldr	r3, [pc, #88]	; (99dc <_usb_d_dev_handle_setup+0xc0>)
    9982:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9984:	7bfb      	ldrb	r3, [r7, #15]
    9986:	2200      	movs	r2, #0
    9988:	2100      	movs	r1, #0
    998a:	4618      	mov	r0, r3
    998c:	4b14      	ldr	r3, [pc, #80]	; (99e0 <_usb_d_dev_handle_setup+0xc4>)
    998e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9990:	687a      	ldr	r2, [r7, #4]
    9992:	7cd3      	ldrb	r3, [r2, #19]
    9994:	f36f 03c3 	bfc	r3, #3, #1
    9998:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    999a:	7bfb      	ldrb	r3, [r7, #15]
    999c:	2100      	movs	r1, #0
    999e:	4618      	mov	r0, r3
    99a0:	4b10      	ldr	r3, [pc, #64]	; (99e4 <_usb_d_dev_handle_setup+0xc8>)
    99a2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    99a4:	7bfb      	ldrb	r3, [r7, #15]
    99a6:	2101      	movs	r1, #1
    99a8:	4618      	mov	r0, r3
    99aa:	4b0e      	ldr	r3, [pc, #56]	; (99e4 <_usb_d_dev_handle_setup+0xc8>)
    99ac:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    99ae:	7bfb      	ldrb	r3, [r7, #15]
    99b0:	216f      	movs	r1, #111	; 0x6f
    99b2:	4618      	mov	r0, r3
    99b4:	4b0c      	ldr	r3, [pc, #48]	; (99e8 <_usb_d_dev_handle_setup+0xcc>)
    99b6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    99b8:	7bfb      	ldrb	r3, [r7, #15]
    99ba:	216f      	movs	r1, #111	; 0x6f
    99bc:	4618      	mov	r0, r3
    99be:	4b0b      	ldr	r3, [pc, #44]	; (99ec <_usb_d_dev_handle_setup+0xd0>)
    99c0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    99c2:	4b0b      	ldr	r3, [pc, #44]	; (99f0 <_usb_d_dev_handle_setup+0xd4>)
    99c4:	689b      	ldr	r3, [r3, #8]
    99c6:	687a      	ldr	r2, [r7, #4]
    99c8:	7c92      	ldrb	r2, [r2, #18]
    99ca:	4610      	mov	r0, r2
    99cc:	4798      	blx	r3
}
    99ce:	3710      	adds	r7, #16
    99d0:	46bd      	mov	sp, r7
    99d2:	bd80      	pop	{r7, pc}
    99d4:	00008dc1 	.word	0x00008dc1
    99d8:	00008d6d 	.word	0x00008d6d
    99dc:	00009065 	.word	0x00009065
    99e0:	000090bd 	.word	0x000090bd
    99e4:	0000902d 	.word	0x0000902d
    99e8:	00008b6d 	.word	0x00008b6d
    99ec:	00008bbd 	.word	0x00008bbd
    99f0:	2000096c 	.word	0x2000096c

000099f4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    99f4:	b580      	push	{r7, lr}
    99f6:	b084      	sub	sp, #16
    99f8:	af00      	add	r7, sp, #0
    99fa:	6078      	str	r0, [r7, #4]
    99fc:	460b      	mov	r3, r1
    99fe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a00:	687b      	ldr	r3, [r7, #4]
    9a02:	7c9b      	ldrb	r3, [r3, #18]
    9a04:	f003 030f 	and.w	r3, r3, #15
    9a08:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9a0a:	78f9      	ldrb	r1, [r7, #3]
    9a0c:	7bfb      	ldrb	r3, [r7, #15]
    9a0e:	2200      	movs	r2, #0
    9a10:	4618      	mov	r0, r3
    9a12:	4b07      	ldr	r3, [pc, #28]	; (9a30 <_usb_d_dev_handle_stall+0x3c>)
    9a14:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9a16:	4b07      	ldr	r3, [pc, #28]	; (9a34 <_usb_d_dev_handle_stall+0x40>)
    9a18:	691b      	ldr	r3, [r3, #16]
    9a1a:	687a      	ldr	r2, [r7, #4]
    9a1c:	7c90      	ldrb	r0, [r2, #18]
    9a1e:	687a      	ldr	r2, [r7, #4]
    9a20:	6892      	ldr	r2, [r2, #8]
    9a22:	2101      	movs	r1, #1
    9a24:	4798      	blx	r3
}
    9a26:	bf00      	nop
    9a28:	3710      	adds	r7, #16
    9a2a:	46bd      	mov	sp, r7
    9a2c:	bd80      	pop	{r7, pc}
    9a2e:	bf00      	nop
    9a30:	00008d21 	.word	0x00008d21
    9a34:	2000096c 	.word	0x2000096c

00009a38 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9a38:	b580      	push	{r7, lr}
    9a3a:	b088      	sub	sp, #32
    9a3c:	af00      	add	r7, sp, #0
    9a3e:	6078      	str	r0, [r7, #4]
    9a40:	460b      	mov	r3, r1
    9a42:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9a44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a48:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9a4a:	687b      	ldr	r3, [r7, #4]
    9a4c:	7c9b      	ldrb	r3, [r3, #18]
    9a4e:	f003 030f 	and.w	r3, r3, #15
    9a52:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9a54:	4b61      	ldr	r3, [pc, #388]	; (9bdc <_usb_d_dev_handle_trfail+0x1a4>)
    9a56:	881b      	ldrh	r3, [r3, #0]
    9a58:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9a5a:	7efb      	ldrb	r3, [r7, #27]
    9a5c:	015b      	lsls	r3, r3, #5
    9a5e:	4a60      	ldr	r2, [pc, #384]	; (9be0 <_usb_d_dev_handle_trfail+0x1a8>)
    9a60:	4413      	add	r3, r2
    9a62:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9a64:	78fb      	ldrb	r3, [r7, #3]
    9a66:	2b00      	cmp	r3, #0
    9a68:	d006      	beq.n	9a78 <_usb_d_dev_handle_trfail+0x40>
    9a6a:	7efb      	ldrb	r3, [r7, #27]
    9a6c:	4619      	mov	r1, r3
    9a6e:	69f8      	ldr	r0, [r7, #28]
    9a70:	4b5c      	ldr	r3, [pc, #368]	; (9be4 <_usb_d_dev_handle_trfail+0x1ac>)
    9a72:	4798      	blx	r3
    9a74:	4603      	mov	r3, r0
    9a76:	e005      	b.n	9a84 <_usb_d_dev_handle_trfail+0x4c>
    9a78:	7efb      	ldrb	r3, [r7, #27]
    9a7a:	4619      	mov	r1, r3
    9a7c:	69f8      	ldr	r0, [r7, #28]
    9a7e:	4b5a      	ldr	r3, [pc, #360]	; (9be8 <_usb_d_dev_handle_trfail+0x1b0>)
    9a80:	4798      	blx	r3
    9a82:	4603      	mov	r3, r0
    9a84:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	7cdb      	ldrb	r3, [r3, #19]
    9a8a:	f003 0307 	and.w	r3, r3, #7
    9a8e:	b2db      	uxtb	r3, r3
    9a90:	2b01      	cmp	r3, #1
    9a92:	bf0c      	ite	eq
    9a94:	2301      	moveq	r3, #1
    9a96:	2300      	movne	r3, #0
    9a98:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9a9a:	78fb      	ldrb	r3, [r7, #3]
    9a9c:	011b      	lsls	r3, r3, #4
    9a9e:	697a      	ldr	r2, [r7, #20]
    9aa0:	4413      	add	r3, r2
    9aa2:	7a9b      	ldrb	r3, [r3, #10]
    9aa4:	b2db      	uxtb	r3, r3
    9aa6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9aa8:	7cfb      	ldrb	r3, [r7, #19]
    9aaa:	2b02      	cmp	r3, #2
    9aac:	d12f      	bne.n	9b0e <_usb_d_dev_handle_trfail+0xd6>
    9aae:	7b3b      	ldrb	r3, [r7, #12]
    9ab0:	f003 0301 	and.w	r3, r3, #1
    9ab4:	b2db      	uxtb	r3, r3
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d029      	beq.n	9b0e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9aba:	78fb      	ldrb	r3, [r7, #3]
    9abc:	011b      	lsls	r3, r3, #4
    9abe:	697a      	ldr	r2, [r7, #20]
    9ac0:	441a      	add	r2, r3
    9ac2:	7a93      	ldrb	r3, [r2, #10]
    9ac4:	f36f 0300 	bfc	r3, #0, #1
    9ac8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9aca:	78fb      	ldrb	r3, [r7, #3]
    9acc:	f107 0220 	add.w	r2, r7, #32
    9ad0:	4413      	add	r3, r2
    9ad2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9ad6:	7efb      	ldrb	r3, [r7, #27]
    9ad8:	4619      	mov	r1, r3
    9ada:	69f8      	ldr	r0, [r7, #28]
    9adc:	4b43      	ldr	r3, [pc, #268]	; (9bec <_usb_d_dev_handle_trfail+0x1b4>)
    9ade:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9ae0:	78fb      	ldrb	r3, [r7, #3]
    9ae2:	f107 0220 	add.w	r2, r7, #32
    9ae6:	4413      	add	r3, r2
    9ae8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9aec:	7efb      	ldrb	r3, [r7, #27]
    9aee:	4619      	mov	r1, r3
    9af0:	69f8      	ldr	r0, [r7, #28]
    9af2:	4b3f      	ldr	r3, [pc, #252]	; (9bf0 <_usb_d_dev_handle_trfail+0x1b8>)
    9af4:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9af6:	78fb      	ldrb	r3, [r7, #3]
    9af8:	2b00      	cmp	r3, #0
    9afa:	bf14      	ite	ne
    9afc:	2301      	movne	r3, #1
    9afe:	2300      	moveq	r3, #0
    9b00:	b2db      	uxtb	r3, r3
    9b02:	2204      	movs	r2, #4
    9b04:	4619      	mov	r1, r3
    9b06:	6878      	ldr	r0, [r7, #4]
    9b08:	4b3a      	ldr	r3, [pc, #232]	; (9bf4 <_usb_d_dev_handle_trfail+0x1bc>)
    9b0a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9b0c:	e062      	b.n	9bd4 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9b0e:	7b3b      	ldrb	r3, [r7, #12]
    9b10:	f003 0302 	and.w	r3, r3, #2
    9b14:	b2db      	uxtb	r3, r3
    9b16:	2b00      	cmp	r3, #0
    9b18:	d040      	beq.n	9b9c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9b1a:	78fb      	ldrb	r3, [r7, #3]
    9b1c:	011b      	lsls	r3, r3, #4
    9b1e:	697a      	ldr	r2, [r7, #20]
    9b20:	441a      	add	r2, r3
    9b22:	7a93      	ldrb	r3, [r2, #10]
    9b24:	f36f 0341 	bfc	r3, #1, #1
    9b28:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9b2a:	78fb      	ldrb	r3, [r7, #3]
    9b2c:	f107 0220 	add.w	r2, r7, #32
    9b30:	4413      	add	r3, r2
    9b32:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b36:	7efb      	ldrb	r3, [r7, #27]
    9b38:	4619      	mov	r1, r3
    9b3a:	69f8      	ldr	r0, [r7, #28]
    9b3c:	4b2b      	ldr	r3, [pc, #172]	; (9bec <_usb_d_dev_handle_trfail+0x1b4>)
    9b3e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9b40:	78fb      	ldrb	r3, [r7, #3]
    9b42:	f107 0220 	add.w	r2, r7, #32
    9b46:	4413      	add	r3, r2
    9b48:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b4c:	7efb      	ldrb	r3, [r7, #27]
    9b4e:	4619      	mov	r1, r3
    9b50:	69f8      	ldr	r0, [r7, #28]
    9b52:	4b27      	ldr	r3, [pc, #156]	; (9bf0 <_usb_d_dev_handle_trfail+0x1b8>)
    9b54:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9b56:	7cbb      	ldrb	r3, [r7, #18]
    9b58:	2b00      	cmp	r3, #0
    9b5a:	d03b      	beq.n	9bd4 <_usb_d_dev_handle_trfail+0x19c>
    9b5c:	687b      	ldr	r3, [r7, #4]
    9b5e:	7cdb      	ldrb	r3, [r3, #19]
    9b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b64:	b2db      	uxtb	r3, r3
    9b66:	2b00      	cmp	r3, #0
    9b68:	d034      	beq.n	9bd4 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9b6a:	687b      	ldr	r3, [r7, #4]
    9b6c:	7cdb      	ldrb	r3, [r3, #19]
    9b6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9b72:	b2db      	uxtb	r3, r3
    9b74:	461a      	mov	r2, r3
    9b76:	78fb      	ldrb	r3, [r7, #3]
    9b78:	4293      	cmp	r3, r2
    9b7a:	d02b      	beq.n	9bd4 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9b7c:	687b      	ldr	r3, [r7, #4]
    9b7e:	7cdb      	ldrb	r3, [r3, #19]
    9b80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9b84:	b2db      	uxtb	r3, r3
    9b86:	2b00      	cmp	r3, #0
    9b88:	bf14      	ite	ne
    9b8a:	2301      	movne	r3, #1
    9b8c:	2300      	moveq	r3, #0
    9b8e:	b2db      	uxtb	r3, r3
    9b90:	2200      	movs	r2, #0
    9b92:	4619      	mov	r1, r3
    9b94:	6878      	ldr	r0, [r7, #4]
    9b96:	4b17      	ldr	r3, [pc, #92]	; (9bf4 <_usb_d_dev_handle_trfail+0x1bc>)
    9b98:	4798      	blx	r3
}
    9b9a:	e01b      	b.n	9bd4 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9b9c:	78fa      	ldrb	r2, [r7, #3]
    9b9e:	7efb      	ldrb	r3, [r7, #27]
    9ba0:	4611      	mov	r1, r2
    9ba2:	4618      	mov	r0, r3
    9ba4:	4b14      	ldr	r3, [pc, #80]	; (9bf8 <_usb_d_dev_handle_trfail+0x1c0>)
    9ba6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ba8:	78fb      	ldrb	r3, [r7, #3]
    9baa:	f107 0220 	add.w	r2, r7, #32
    9bae:	4413      	add	r3, r2
    9bb0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9bb4:	7efb      	ldrb	r3, [r7, #27]
    9bb6:	4619      	mov	r1, r3
    9bb8:	69f8      	ldr	r0, [r7, #28]
    9bba:	4b0c      	ldr	r3, [pc, #48]	; (9bec <_usb_d_dev_handle_trfail+0x1b4>)
    9bbc:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9bbe:	78fb      	ldrb	r3, [r7, #3]
    9bc0:	f107 0220 	add.w	r2, r7, #32
    9bc4:	4413      	add	r3, r2
    9bc6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9bca:	7efb      	ldrb	r3, [r7, #27]
    9bcc:	4619      	mov	r1, r3
    9bce:	69f8      	ldr	r0, [r7, #28]
    9bd0:	4b07      	ldr	r3, [pc, #28]	; (9bf0 <_usb_d_dev_handle_trfail+0x1b8>)
    9bd2:	4798      	blx	r3
}
    9bd4:	bf00      	nop
    9bd6:	3720      	adds	r7, #32
    9bd8:	46bd      	mov	sp, r7
    9bda:	bd80      	pop	{r7, pc}
    9bdc:	0000efec 	.word	0x0000efec
    9be0:	20000a34 	.word	0x20000a34
    9be4:	000087a1 	.word	0x000087a1
    9be8:	00008771 	.word	0x00008771
    9bec:	00008645 	.word	0x00008645
    9bf0:	00008745 	.word	0x00008745
    9bf4:	0000a7b1 	.word	0x0000a7b1
    9bf8:	0000902d 	.word	0x0000902d

00009bfc <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9bfc:	b580      	push	{r7, lr}
    9bfe:	b082      	sub	sp, #8
    9c00:	af00      	add	r7, sp, #0
    9c02:	6078      	str	r0, [r7, #4]
    9c04:	460b      	mov	r3, r1
    9c06:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9c08:	78fb      	ldrb	r3, [r7, #3]
    9c0a:	f003 0310 	and.w	r3, r3, #16
    9c0e:	2b00      	cmp	r3, #0
    9c10:	d003      	beq.n	9c1a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9c12:	6878      	ldr	r0, [r7, #4]
    9c14:	4b0c      	ldr	r3, [pc, #48]	; (9c48 <_usb_d_dev_trans_setup_isr+0x4c>)
    9c16:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9c18:	e012      	b.n	9c40 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9c1a:	78fb      	ldrb	r3, [r7, #3]
    9c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c20:	2b00      	cmp	r3, #0
    9c22:	d004      	beq.n	9c2e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9c24:	2101      	movs	r1, #1
    9c26:	6878      	ldr	r0, [r7, #4]
    9c28:	4b08      	ldr	r3, [pc, #32]	; (9c4c <_usb_d_dev_trans_setup_isr+0x50>)
    9c2a:	4798      	blx	r3
}
    9c2c:	e008      	b.n	9c40 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9c2e:	78fb      	ldrb	r3, [r7, #3]
    9c30:	f003 0320 	and.w	r3, r3, #32
    9c34:	2b00      	cmp	r3, #0
    9c36:	d003      	beq.n	9c40 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9c38:	2100      	movs	r1, #0
    9c3a:	6878      	ldr	r0, [r7, #4]
    9c3c:	4b03      	ldr	r3, [pc, #12]	; (9c4c <_usb_d_dev_trans_setup_isr+0x50>)
    9c3e:	4798      	blx	r3
}
    9c40:	bf00      	nop
    9c42:	3708      	adds	r7, #8
    9c44:	46bd      	mov	sp, r7
    9c46:	bd80      	pop	{r7, pc}
    9c48:	0000991d 	.word	0x0000991d
    9c4c:	000099f5 	.word	0x000099f5

00009c50 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9c50:	b580      	push	{r7, lr}
    9c52:	b082      	sub	sp, #8
    9c54:	af00      	add	r7, sp, #0
    9c56:	6078      	str	r0, [r7, #4]
    9c58:	460b      	mov	r3, r1
    9c5a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9c5c:	78fb      	ldrb	r3, [r7, #3]
    9c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c62:	2b00      	cmp	r3, #0
    9c64:	d004      	beq.n	9c70 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9c66:	2101      	movs	r1, #1
    9c68:	6878      	ldr	r0, [r7, #4]
    9c6a:	4b1a      	ldr	r3, [pc, #104]	; (9cd4 <_usb_d_dev_trans_in_isr+0x84>)
    9c6c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9c6e:	e02c      	b.n	9cca <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9c70:	78fb      	ldrb	r3, [r7, #3]
    9c72:	f003 0308 	and.w	r3, r3, #8
    9c76:	2b00      	cmp	r3, #0
    9c78:	d004      	beq.n	9c84 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9c7a:	2101      	movs	r1, #1
    9c7c:	6878      	ldr	r0, [r7, #4]
    9c7e:	4b16      	ldr	r3, [pc, #88]	; (9cd8 <_usb_d_dev_trans_in_isr+0x88>)
    9c80:	4798      	blx	r3
}
    9c82:	e022      	b.n	9cca <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9c84:	78fb      	ldrb	r3, [r7, #3]
    9c86:	f003 0302 	and.w	r3, r3, #2
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d004      	beq.n	9c98 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9c8e:	2101      	movs	r1, #1
    9c90:	6878      	ldr	r0, [r7, #4]
    9c92:	4b12      	ldr	r3, [pc, #72]	; (9cdc <_usb_d_dev_trans_in_isr+0x8c>)
    9c94:	4798      	blx	r3
}
    9c96:	e018      	b.n	9cca <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9c98:	687b      	ldr	r3, [r7, #4]
    9c9a:	7cdb      	ldrb	r3, [r3, #19]
    9c9c:	f003 0307 	and.w	r3, r3, #7
    9ca0:	b2db      	uxtb	r3, r3
    9ca2:	2b01      	cmp	r3, #1
    9ca4:	d111      	bne.n	9cca <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9ca6:	78fb      	ldrb	r3, [r7, #3]
    9ca8:	f003 0304 	and.w	r3, r3, #4
    9cac:	2b00      	cmp	r3, #0
    9cae:	d004      	beq.n	9cba <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9cb0:	2100      	movs	r1, #0
    9cb2:	6878      	ldr	r0, [r7, #4]
    9cb4:	4b08      	ldr	r3, [pc, #32]	; (9cd8 <_usb_d_dev_trans_in_isr+0x88>)
    9cb6:	4798      	blx	r3
}
    9cb8:	e007      	b.n	9cca <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9cba:	78fb      	ldrb	r3, [r7, #3]
    9cbc:	f003 0310 	and.w	r3, r3, #16
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d002      	beq.n	9cca <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9cc4:	6878      	ldr	r0, [r7, #4]
    9cc6:	4b06      	ldr	r3, [pc, #24]	; (9ce0 <_usb_d_dev_trans_in_isr+0x90>)
    9cc8:	4798      	blx	r3
}
    9cca:	bf00      	nop
    9ccc:	3708      	adds	r7, #8
    9cce:	46bd      	mov	sp, r7
    9cd0:	bd80      	pop	{r7, pc}
    9cd2:	bf00      	nop
    9cd4:	000099f5 	.word	0x000099f5
    9cd8:	00009a39 	.word	0x00009a39
    9cdc:	00009441 	.word	0x00009441
    9ce0:	0000991d 	.word	0x0000991d

00009ce4 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9ce4:	b580      	push	{r7, lr}
    9ce6:	b082      	sub	sp, #8
    9ce8:	af00      	add	r7, sp, #0
    9cea:	6078      	str	r0, [r7, #4]
    9cec:	460b      	mov	r3, r1
    9cee:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9cf0:	78fb      	ldrb	r3, [r7, #3]
    9cf2:	f003 0320 	and.w	r3, r3, #32
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d004      	beq.n	9d04 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9cfa:	2100      	movs	r1, #0
    9cfc:	6878      	ldr	r0, [r7, #4]
    9cfe:	4b1a      	ldr	r3, [pc, #104]	; (9d68 <_usb_d_dev_trans_out_isr+0x84>)
    9d00:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9d02:	e02c      	b.n	9d5e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9d04:	78fb      	ldrb	r3, [r7, #3]
    9d06:	f003 0304 	and.w	r3, r3, #4
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d004      	beq.n	9d18 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9d0e:	2100      	movs	r1, #0
    9d10:	6878      	ldr	r0, [r7, #4]
    9d12:	4b16      	ldr	r3, [pc, #88]	; (9d6c <_usb_d_dev_trans_out_isr+0x88>)
    9d14:	4798      	blx	r3
}
    9d16:	e022      	b.n	9d5e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9d18:	78fb      	ldrb	r3, [r7, #3]
    9d1a:	f003 0301 	and.w	r3, r3, #1
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d004      	beq.n	9d2c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9d22:	2101      	movs	r1, #1
    9d24:	6878      	ldr	r0, [r7, #4]
    9d26:	4b12      	ldr	r3, [pc, #72]	; (9d70 <_usb_d_dev_trans_out_isr+0x8c>)
    9d28:	4798      	blx	r3
}
    9d2a:	e018      	b.n	9d5e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	7cdb      	ldrb	r3, [r3, #19]
    9d30:	f003 0307 	and.w	r3, r3, #7
    9d34:	b2db      	uxtb	r3, r3
    9d36:	2b01      	cmp	r3, #1
    9d38:	d111      	bne.n	9d5e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9d3a:	78fb      	ldrb	r3, [r7, #3]
    9d3c:	f003 0308 	and.w	r3, r3, #8
    9d40:	2b00      	cmp	r3, #0
    9d42:	d004      	beq.n	9d4e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9d44:	2101      	movs	r1, #1
    9d46:	6878      	ldr	r0, [r7, #4]
    9d48:	4b08      	ldr	r3, [pc, #32]	; (9d6c <_usb_d_dev_trans_out_isr+0x88>)
    9d4a:	4798      	blx	r3
}
    9d4c:	e007      	b.n	9d5e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9d4e:	78fb      	ldrb	r3, [r7, #3]
    9d50:	f003 0310 	and.w	r3, r3, #16
    9d54:	2b00      	cmp	r3, #0
    9d56:	d002      	beq.n	9d5e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9d58:	6878      	ldr	r0, [r7, #4]
    9d5a:	4b06      	ldr	r3, [pc, #24]	; (9d74 <_usb_d_dev_trans_out_isr+0x90>)
    9d5c:	4798      	blx	r3
}
    9d5e:	bf00      	nop
    9d60:	3708      	adds	r7, #8
    9d62:	46bd      	mov	sp, r7
    9d64:	bd80      	pop	{r7, pc}
    9d66:	bf00      	nop
    9d68:	000099f5 	.word	0x000099f5
    9d6c:	00009a39 	.word	0x00009a39
    9d70:	00009659 	.word	0x00009659
    9d74:	0000991d 	.word	0x0000991d

00009d78 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9d78:	b580      	push	{r7, lr}
    9d7a:	b084      	sub	sp, #16
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	6078      	str	r0, [r7, #4]
    9d80:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9d82:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d86:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9d88:	683b      	ldr	r3, [r7, #0]
    9d8a:	7c9b      	ldrb	r3, [r3, #18]
    9d8c:	f003 030f 	and.w	r3, r3, #15
    9d90:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9d92:	7afb      	ldrb	r3, [r7, #11]
    9d94:	2201      	movs	r2, #1
    9d96:	409a      	lsls	r2, r3
    9d98:	687b      	ldr	r3, [r7, #4]
    9d9a:	4013      	ands	r3, r2
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d03d      	beq.n	9e1c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9da0:	7afb      	ldrb	r3, [r7, #11]
    9da2:	68fa      	ldr	r2, [r7, #12]
    9da4:	3308      	adds	r3, #8
    9da6:	015b      	lsls	r3, r3, #5
    9da8:	4413      	add	r3, r2
    9daa:	3307      	adds	r3, #7
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9db0:	7afb      	ldrb	r3, [r7, #11]
    9db2:	68fa      	ldr	r2, [r7, #12]
    9db4:	015b      	lsls	r3, r3, #5
    9db6:	4413      	add	r3, r2
    9db8:	f203 1309 	addw	r3, r3, #265	; 0x109
    9dbc:	781b      	ldrb	r3, [r3, #0]
    9dbe:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9dc0:	7aba      	ldrb	r2, [r7, #10]
    9dc2:	7a7b      	ldrb	r3, [r7, #9]
    9dc4:	4013      	ands	r3, r2
    9dc6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9dc8:	7abb      	ldrb	r3, [r7, #10]
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d027      	beq.n	9e1e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9dce:	683b      	ldr	r3, [r7, #0]
    9dd0:	7cdb      	ldrb	r3, [r3, #19]
    9dd2:	f003 0307 	and.w	r3, r3, #7
    9dd6:	b2db      	uxtb	r3, r3
    9dd8:	2b01      	cmp	r3, #1
    9dda:	d10c      	bne.n	9df6 <_usb_d_dev_handle_eps+0x7e>
    9ddc:	683b      	ldr	r3, [r7, #0]
    9dde:	7cdb      	ldrb	r3, [r3, #19]
    9de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9de4:	b2db      	uxtb	r3, r3
    9de6:	2b00      	cmp	r3, #0
    9de8:	d105      	bne.n	9df6 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9dea:	7abb      	ldrb	r3, [r7, #10]
    9dec:	4619      	mov	r1, r3
    9dee:	6838      	ldr	r0, [r7, #0]
    9df0:	4b0c      	ldr	r3, [pc, #48]	; (9e24 <_usb_d_dev_handle_eps+0xac>)
    9df2:	4798      	blx	r3
    9df4:	e013      	b.n	9e1e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9df6:	683b      	ldr	r3, [r7, #0]
    9df8:	7cdb      	ldrb	r3, [r3, #19]
    9dfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9dfe:	b2db      	uxtb	r3, r3
    9e00:	2b00      	cmp	r3, #0
    9e02:	d005      	beq.n	9e10 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9e04:	7abb      	ldrb	r3, [r7, #10]
    9e06:	4619      	mov	r1, r3
    9e08:	6838      	ldr	r0, [r7, #0]
    9e0a:	4b07      	ldr	r3, [pc, #28]	; (9e28 <_usb_d_dev_handle_eps+0xb0>)
    9e0c:	4798      	blx	r3
    9e0e:	e006      	b.n	9e1e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9e10:	7abb      	ldrb	r3, [r7, #10]
    9e12:	4619      	mov	r1, r3
    9e14:	6838      	ldr	r0, [r7, #0]
    9e16:	4b05      	ldr	r3, [pc, #20]	; (9e2c <_usb_d_dev_handle_eps+0xb4>)
    9e18:	4798      	blx	r3
    9e1a:	e000      	b.n	9e1e <_usb_d_dev_handle_eps+0xa6>
		return;
    9e1c:	bf00      	nop
		}
	}
}
    9e1e:	3710      	adds	r7, #16
    9e20:	46bd      	mov	sp, r7
    9e22:	bd80      	pop	{r7, pc}
    9e24:	00009bfd 	.word	0x00009bfd
    9e28:	00009c51 	.word	0x00009c51
    9e2c:	00009ce5 	.word	0x00009ce5

00009e30 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9e30:	b580      	push	{r7, lr}
    9e32:	b084      	sub	sp, #16
    9e34:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9e36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e3a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9e3c:	68bb      	ldr	r3, [r7, #8]
    9e3e:	8c1b      	ldrh	r3, [r3, #32]
    9e40:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9e42:	88fb      	ldrh	r3, [r7, #6]
    9e44:	2b00      	cmp	r3, #0
    9e46:	d104      	bne.n	9e52 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9e48:	4b13      	ldr	r3, [pc, #76]	; (9e98 <_usb_d_dev_handler+0x68>)
    9e4a:	4798      	blx	r3
    9e4c:	4603      	mov	r3, r0
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d11e      	bne.n	9e90 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9e52:	2300      	movs	r3, #0
    9e54:	73fb      	strb	r3, [r7, #15]
    9e56:	e017      	b.n	9e88 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9e58:	7bfa      	ldrb	r2, [r7, #15]
    9e5a:	4613      	mov	r3, r2
    9e5c:	009b      	lsls	r3, r3, #2
    9e5e:	4413      	add	r3, r2
    9e60:	009b      	lsls	r3, r3, #2
    9e62:	3310      	adds	r3, #16
    9e64:	4a0d      	ldr	r2, [pc, #52]	; (9e9c <_usb_d_dev_handler+0x6c>)
    9e66:	4413      	add	r3, r2
    9e68:	3304      	adds	r3, #4
    9e6a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9e6c:	683b      	ldr	r3, [r7, #0]
    9e6e:	7c9b      	ldrb	r3, [r3, #18]
    9e70:	2bff      	cmp	r3, #255	; 0xff
    9e72:	d005      	beq.n	9e80 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9e74:	88fb      	ldrh	r3, [r7, #6]
    9e76:	6839      	ldr	r1, [r7, #0]
    9e78:	4618      	mov	r0, r3
    9e7a:	4b09      	ldr	r3, [pc, #36]	; (9ea0 <_usb_d_dev_handler+0x70>)
    9e7c:	4798      	blx	r3
    9e7e:	e000      	b.n	9e82 <_usb_d_dev_handler+0x52>
			continue;
    9e80:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9e82:	7bfb      	ldrb	r3, [r7, #15]
    9e84:	3301      	adds	r3, #1
    9e86:	73fb      	strb	r3, [r7, #15]
    9e88:	7bfb      	ldrb	r3, [r7, #15]
    9e8a:	2b08      	cmp	r3, #8
    9e8c:	d9e4      	bls.n	9e58 <_usb_d_dev_handler+0x28>
    9e8e:	e000      	b.n	9e92 <_usb_d_dev_handler+0x62>
			return;
    9e90:	bf00      	nop
	}
}
    9e92:	3710      	adds	r7, #16
    9e94:	46bd      	mov	sp, r7
    9e96:	bd80      	pop	{r7, pc}
    9e98:	00009389 	.word	0x00009389
    9e9c:	2000096c 	.word	0x2000096c
    9ea0:	00009d79 	.word	0x00009d79

00009ea4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	b082      	sub	sp, #8
    9ea8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9eaa:	2300      	movs	r3, #0
    9eac:	71fb      	strb	r3, [r7, #7]
    9eae:	e023      	b.n	9ef8 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9eb0:	79fa      	ldrb	r2, [r7, #7]
    9eb2:	4613      	mov	r3, r2
    9eb4:	009b      	lsls	r3, r3, #2
    9eb6:	4413      	add	r3, r2
    9eb8:	009b      	lsls	r3, r3, #2
    9eba:	3310      	adds	r3, #16
    9ebc:	4a14      	ldr	r2, [pc, #80]	; (9f10 <_usb_d_dev_reset_epts+0x6c>)
    9ebe:	4413      	add	r3, r2
    9ec0:	3304      	adds	r3, #4
    9ec2:	2103      	movs	r1, #3
    9ec4:	4618      	mov	r0, r3
    9ec6:	4b13      	ldr	r3, [pc, #76]	; (9f14 <_usb_d_dev_reset_epts+0x70>)
    9ec8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9eca:	79fa      	ldrb	r2, [r7, #7]
    9ecc:	4910      	ldr	r1, [pc, #64]	; (9f10 <_usb_d_dev_reset_epts+0x6c>)
    9ece:	4613      	mov	r3, r2
    9ed0:	009b      	lsls	r3, r3, #2
    9ed2:	4413      	add	r3, r2
    9ed4:	009b      	lsls	r3, r3, #2
    9ed6:	440b      	add	r3, r1
    9ed8:	3326      	adds	r3, #38	; 0x26
    9eda:	22ff      	movs	r2, #255	; 0xff
    9edc:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9ede:	79fa      	ldrb	r2, [r7, #7]
    9ee0:	490b      	ldr	r1, [pc, #44]	; (9f10 <_usb_d_dev_reset_epts+0x6c>)
    9ee2:	4613      	mov	r3, r2
    9ee4:	009b      	lsls	r3, r3, #2
    9ee6:	4413      	add	r3, r2
    9ee8:	009b      	lsls	r3, r3, #2
    9eea:	440b      	add	r3, r1
    9eec:	3327      	adds	r3, #39	; 0x27
    9eee:	2200      	movs	r2, #0
    9ef0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9ef2:	79fb      	ldrb	r3, [r7, #7]
    9ef4:	3301      	adds	r3, #1
    9ef6:	71fb      	strb	r3, [r7, #7]
    9ef8:	79fb      	ldrb	r3, [r7, #7]
    9efa:	2b08      	cmp	r3, #8
    9efc:	d9d8      	bls.n	9eb0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9efe:	22a0      	movs	r2, #160	; 0xa0
    9f00:	2100      	movs	r1, #0
    9f02:	4805      	ldr	r0, [pc, #20]	; (9f18 <_usb_d_dev_reset_epts+0x74>)
    9f04:	4b05      	ldr	r3, [pc, #20]	; (9f1c <_usb_d_dev_reset_epts+0x78>)
    9f06:	4798      	blx	r3
}
    9f08:	bf00      	nop
    9f0a:	3708      	adds	r7, #8
    9f0c:	46bd      	mov	sp, r7
    9f0e:	bd80      	pop	{r7, pc}
    9f10:	2000096c 	.word	0x2000096c
    9f14:	0000a769 	.word	0x0000a769
    9f18:	20000a34 	.word	0x20000a34
    9f1c:	0000e95d 	.word	0x0000e95d

00009f20 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9f20:	b580      	push	{r7, lr}
    9f22:	b084      	sub	sp, #16
    9f24:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9f26:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f2a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9f2c:	2301      	movs	r3, #1
    9f2e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9f30:	2304      	movs	r3, #4
    9f32:	713b      	strb	r3, [r7, #4]
    9f34:	2300      	movs	r3, #0
    9f36:	717b      	strb	r3, [r7, #5]
    9f38:	2300      	movs	r3, #0
    9f3a:	71bb      	strb	r3, [r7, #6]
    9f3c:	2300      	movs	r3, #0
    9f3e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9f40:	2101      	movs	r1, #1
    9f42:	68f8      	ldr	r0, [r7, #12]
    9f44:	4b26      	ldr	r3, [pc, #152]	; (9fe0 <_usb_d_dev_init+0xc0>)
    9f46:	4798      	blx	r3
    9f48:	4603      	mov	r3, r0
    9f4a:	f083 0301 	eor.w	r3, r3, #1
    9f4e:	b2db      	uxtb	r3, r3
    9f50:	2b00      	cmp	r3, #0
    9f52:	d011      	beq.n	9f78 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9f54:	2102      	movs	r1, #2
    9f56:	68f8      	ldr	r0, [r7, #12]
    9f58:	4b22      	ldr	r3, [pc, #136]	; (9fe4 <_usb_d_dev_init+0xc4>)
    9f5a:	4798      	blx	r3
    9f5c:	4603      	mov	r3, r0
    9f5e:	2b00      	cmp	r3, #0
    9f60:	d006      	beq.n	9f70 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9f62:	68f8      	ldr	r0, [r7, #12]
    9f64:	4b20      	ldr	r3, [pc, #128]	; (9fe8 <_usb_d_dev_init+0xc8>)
    9f66:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9f68:	2102      	movs	r1, #2
    9f6a:	68f8      	ldr	r0, [r7, #12]
    9f6c:	4b1f      	ldr	r3, [pc, #124]	; (9fec <_usb_d_dev_init+0xcc>)
    9f6e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9f70:	2101      	movs	r1, #1
    9f72:	68f8      	ldr	r0, [r7, #12]
    9f74:	4b1e      	ldr	r3, [pc, #120]	; (9ff0 <_usb_d_dev_init+0xd0>)
    9f76:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9f78:	2101      	movs	r1, #1
    9f7a:	68f8      	ldr	r0, [r7, #12]
    9f7c:	4b1b      	ldr	r3, [pc, #108]	; (9fec <_usb_d_dev_init+0xcc>)
    9f7e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9f80:	4b1c      	ldr	r3, [pc, #112]	; (9ff4 <_usb_d_dev_init+0xd4>)
    9f82:	4a1d      	ldr	r2, [pc, #116]	; (9ff8 <_usb_d_dev_init+0xd8>)
    9f84:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9f86:	4b1b      	ldr	r3, [pc, #108]	; (9ff4 <_usb_d_dev_init+0xd4>)
    9f88:	4a1b      	ldr	r2, [pc, #108]	; (9ff8 <_usb_d_dev_init+0xd8>)
    9f8a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9f8c:	4b19      	ldr	r3, [pc, #100]	; (9ff4 <_usb_d_dev_init+0xd4>)
    9f8e:	4a1a      	ldr	r2, [pc, #104]	; (9ff8 <_usb_d_dev_init+0xd8>)
    9f90:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9f92:	4b18      	ldr	r3, [pc, #96]	; (9ff4 <_usb_d_dev_init+0xd4>)
    9f94:	4a18      	ldr	r2, [pc, #96]	; (9ff8 <_usb_d_dev_init+0xd8>)
    9f96:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9f98:	4b16      	ldr	r3, [pc, #88]	; (9ff4 <_usb_d_dev_init+0xd4>)
    9f9a:	4a17      	ldr	r2, [pc, #92]	; (9ff8 <_usb_d_dev_init+0xd8>)
    9f9c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9f9e:	4b17      	ldr	r3, [pc, #92]	; (9ffc <_usb_d_dev_init+0xdc>)
    9fa0:	4798      	blx	r3

	_usb_load_calib();
    9fa2:	4b17      	ldr	r3, [pc, #92]	; (a000 <_usb_d_dev_init+0xe0>)
    9fa4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9fa6:	2104      	movs	r1, #4
    9fa8:	68f8      	ldr	r0, [r7, #12]
    9faa:	4b11      	ldr	r3, [pc, #68]	; (9ff0 <_usb_d_dev_init+0xd0>)
    9fac:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9fae:	4b15      	ldr	r3, [pc, #84]	; (a004 <_usb_d_dev_init+0xe4>)
    9fb0:	4619      	mov	r1, r3
    9fb2:	68f8      	ldr	r0, [r7, #12]
    9fb4:	4b14      	ldr	r3, [pc, #80]	; (a008 <_usb_d_dev_init+0xe8>)
    9fb6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9fb8:	7afb      	ldrb	r3, [r7, #11]
    9fba:	f107 0210 	add.w	r2, r7, #16
    9fbe:	4413      	add	r3, r2
    9fc0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9fc4:	f043 0301 	orr.w	r3, r3, #1
    9fc8:	b2db      	uxtb	r3, r3
    9fca:	b29b      	uxth	r3, r3
    9fcc:	4619      	mov	r1, r3
    9fce:	68f8      	ldr	r0, [r7, #12]
    9fd0:	4b0e      	ldr	r3, [pc, #56]	; (a00c <_usb_d_dev_init+0xec>)
    9fd2:	4798      	blx	r3

	return ERR_NONE;
    9fd4:	2300      	movs	r3, #0
}
    9fd6:	4618      	mov	r0, r3
    9fd8:	3710      	adds	r7, #16
    9fda:	46bd      	mov	sp, r7
    9fdc:	bd80      	pop	{r7, pc}
    9fde:	bf00      	nop
    9fe0:	000085b9 	.word	0x000085b9
    9fe4:	00008909 	.word	0x00008909
    9fe8:	000088dd 	.word	0x000088dd
    9fec:	0000858f 	.word	0x0000858f
    9ff0:	00008939 	.word	0x00008939
    9ff4:	2000096c 	.word	0x2000096c
    9ff8:	00008a01 	.word	0x00008a01
    9ffc:	00009ea5 	.word	0x00009ea5
    a000:	00008a19 	.word	0x00008a19
    a004:	20000a34 	.word	0x20000a34
    a008:	000089e5 	.word	0x000089e5
    a00c:	000089a9 	.word	0x000089a9

0000a010 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a010:	b580      	push	{r7, lr}
    a012:	b082      	sub	sp, #8
    a014:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a016:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a01a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a01c:	2103      	movs	r1, #3
    a01e:	6878      	ldr	r0, [r7, #4]
    a020:	4b17      	ldr	r3, [pc, #92]	; (a080 <_usb_d_dev_enable+0x70>)
    a022:	4798      	blx	r3
    a024:	4603      	mov	r3, r0
    a026:	2b00      	cmp	r3, #0
    a028:	d002      	beq.n	a030 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a02a:	f06f 0310 	mvn.w	r3, #16
    a02e:	e023      	b.n	a078 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a030:	6878      	ldr	r0, [r7, #4]
    a032:	4b14      	ldr	r3, [pc, #80]	; (a084 <_usb_d_dev_enable+0x74>)
    a034:	4798      	blx	r3
    a036:	4603      	mov	r3, r0
    a038:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a03a:	78fb      	ldrb	r3, [r7, #3]
    a03c:	f003 0302 	and.w	r3, r3, #2
    a040:	2b00      	cmp	r3, #0
    a042:	d107      	bne.n	a054 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a044:	78fb      	ldrb	r3, [r7, #3]
    a046:	f043 0302 	orr.w	r3, r3, #2
    a04a:	b2db      	uxtb	r3, r3
    a04c:	4619      	mov	r1, r3
    a04e:	6878      	ldr	r0, [r7, #4]
    a050:	4b0d      	ldr	r3, [pc, #52]	; (a088 <_usb_d_dev_enable+0x78>)
    a052:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a054:	2050      	movs	r0, #80	; 0x50
    a056:	4b0d      	ldr	r3, [pc, #52]	; (a08c <_usb_d_dev_enable+0x7c>)
    a058:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a05a:	2051      	movs	r0, #81	; 0x51
    a05c:	4b0b      	ldr	r3, [pc, #44]	; (a08c <_usb_d_dev_enable+0x7c>)
    a05e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a060:	2052      	movs	r0, #82	; 0x52
    a062:	4b0a      	ldr	r3, [pc, #40]	; (a08c <_usb_d_dev_enable+0x7c>)
    a064:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a066:	2053      	movs	r0, #83	; 0x53
    a068:	4b08      	ldr	r3, [pc, #32]	; (a08c <_usb_d_dev_enable+0x7c>)
    a06a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a06c:	f240 218d 	movw	r1, #653	; 0x28d
    a070:	6878      	ldr	r0, [r7, #4]
    a072:	4b07      	ldr	r3, [pc, #28]	; (a090 <_usb_d_dev_enable+0x80>)
    a074:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a076:	2300      	movs	r3, #0
}
    a078:	4618      	mov	r0, r3
    a07a:	3708      	adds	r7, #8
    a07c:	46bd      	mov	sp, r7
    a07e:	bd80      	pop	{r7, pc}
    a080:	000088b3 	.word	0x000088b3
    a084:	00008961 	.word	0x00008961
    a088:	00008939 	.word	0x00008939
    a08c:	000084c5 	.word	0x000084c5
    a090:	0000885d 	.word	0x0000885d

0000a094 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a094:	b580      	push	{r7, lr}
    a096:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a098:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a09c:	4b01      	ldr	r3, [pc, #4]	; (a0a4 <_usb_d_dev_attach+0x10>)
    a09e:	4798      	blx	r3
}
    a0a0:	bf00      	nop
    a0a2:	bd80      	pop	{r7, pc}
    a0a4:	00008985 	.word	0x00008985

0000a0a8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a0a8:	b580      	push	{r7, lr}
    a0aa:	b082      	sub	sp, #8
    a0ac:	af00      	add	r7, sp, #0
    a0ae:	4603      	mov	r3, r0
    a0b0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a0b2:	79fb      	ldrb	r3, [r7, #7]
    a0b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a0b8:	b2db      	uxtb	r3, r3
    a0ba:	4619      	mov	r1, r3
    a0bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0c0:	4b02      	ldr	r3, [pc, #8]	; (a0cc <_usb_d_dev_set_address+0x24>)
    a0c2:	4798      	blx	r3
}
    a0c4:	bf00      	nop
    a0c6:	3708      	adds	r7, #8
    a0c8:	46bd      	mov	sp, r7
    a0ca:	bd80      	pop	{r7, pc}
    a0cc:	000089c7 	.word	0x000089c7

0000a0d0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a0d0:	b590      	push	{r4, r7, lr}
    a0d2:	b085      	sub	sp, #20
    a0d4:	af00      	add	r7, sp, #0
    a0d6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a0d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a0dc:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	7c9b      	ldrb	r3, [r3, #18]
    a0e2:	f003 030f 	and.w	r3, r3, #15
    a0e6:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	68db      	ldr	r3, [r3, #12]
    a0ec:	461a      	mov	r2, r3
    a0ee:	7afb      	ldrb	r3, [r7, #11]
    a0f0:	2100      	movs	r1, #0
    a0f2:	4618      	mov	r0, r3
    a0f4:	4b0f      	ldr	r3, [pc, #60]	; (a134 <_usb_d_dev_trans_setup+0x64>)
    a0f6:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	8a1b      	ldrh	r3, [r3, #16]
    a0fc:	461a      	mov	r2, r3
    a0fe:	7af8      	ldrb	r0, [r7, #11]
    a100:	2300      	movs	r3, #0
    a102:	2100      	movs	r1, #0
    a104:	4c0c      	ldr	r4, [pc, #48]	; (a138 <_usb_d_dev_trans_setup+0x68>)
    a106:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a108:	7afb      	ldrb	r3, [r7, #11]
    a10a:	22b0      	movs	r2, #176	; 0xb0
    a10c:	4619      	mov	r1, r3
    a10e:	68f8      	ldr	r0, [r7, #12]
    a110:	4b0a      	ldr	r3, [pc, #40]	; (a13c <_usb_d_dev_trans_setup+0x6c>)
    a112:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a114:	7afb      	ldrb	r3, [r7, #11]
    a116:	2200      	movs	r2, #0
    a118:	2100      	movs	r1, #0
    a11a:	4618      	mov	r0, r3
    a11c:	4b08      	ldr	r3, [pc, #32]	; (a140 <_usb_d_dev_trans_setup+0x70>)
    a11e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a120:	7afb      	ldrb	r3, [r7, #11]
    a122:	2210      	movs	r2, #16
    a124:	4619      	mov	r1, r3
    a126:	68f8      	ldr	r0, [r7, #12]
    a128:	4b06      	ldr	r3, [pc, #24]	; (a144 <_usb_d_dev_trans_setup+0x74>)
    a12a:	4798      	blx	r3
}
    a12c:	bf00      	nop
    a12e:	3714      	adds	r7, #20
    a130:	46bd      	mov	sp, r7
    a132:	bd90      	pop	{r4, r7, pc}
    a134:	00008e65 	.word	0x00008e65
    a138:	00008fed 	.word	0x00008fed
    a13c:	000086c5 	.word	0x000086c5
    a140:	000090bd 	.word	0x000090bd
    a144:	00008719 	.word	0x00008719

0000a148 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a148:	b580      	push	{r7, lr}
    a14a:	b088      	sub	sp, #32
    a14c:	af00      	add	r7, sp, #0
    a14e:	4603      	mov	r3, r0
    a150:	71fb      	strb	r3, [r7, #7]
    a152:	460b      	mov	r3, r1
    a154:	71bb      	strb	r3, [r7, #6]
    a156:	4613      	mov	r3, r2
    a158:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a15a:	79fb      	ldrb	r3, [r7, #7]
    a15c:	f003 030f 	and.w	r3, r3, #15
    a160:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a162:	79fb      	ldrb	r3, [r7, #7]
    a164:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a168:	2b00      	cmp	r3, #0
    a16a:	bf14      	ite	ne
    a16c:	2301      	movne	r3, #1
    a16e:	2300      	moveq	r3, #0
    a170:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a172:	7fba      	ldrb	r2, [r7, #30]
    a174:	7ffb      	ldrb	r3, [r7, #31]
    a176:	4611      	mov	r1, r2
    a178:	4618      	mov	r0, r3
    a17a:	4b3e      	ldr	r3, [pc, #248]	; (a274 <_usb_d_dev_ep_init+0x12c>)
    a17c:	4798      	blx	r3
    a17e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a180:	79bb      	ldrb	r3, [r7, #6]
    a182:	f003 0303 	and.w	r3, r3, #3
    a186:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a188:	7ffa      	ldrb	r2, [r7, #31]
    a18a:	4613      	mov	r3, r2
    a18c:	005b      	lsls	r3, r3, #1
    a18e:	4413      	add	r3, r2
    a190:	009b      	lsls	r3, r3, #2
    a192:	4a39      	ldr	r2, [pc, #228]	; (a278 <_usb_d_dev_ep_init+0x130>)
    a194:	4413      	add	r3, r2
    a196:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a198:	7ffb      	ldrb	r3, [r7, #31]
    a19a:	2b04      	cmp	r3, #4
    a19c:	d902      	bls.n	a1a4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a19e:	f06f 0311 	mvn.w	r3, #17
    a1a2:	e063      	b.n	a26c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a1a4:	69bb      	ldr	r3, [r7, #24]
    a1a6:	7c9b      	ldrb	r3, [r3, #18]
    a1a8:	2bff      	cmp	r3, #255	; 0xff
    a1aa:	d002      	beq.n	a1b2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a1ac:	f06f 0313 	mvn.w	r3, #19
    a1b0:	e05c      	b.n	a26c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a1b2:	7dfb      	ldrb	r3, [r7, #23]
    a1b4:	2b00      	cmp	r3, #0
    a1b6:	d11f      	bne.n	a1f8 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a1b8:	7fbb      	ldrb	r3, [r7, #30]
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	bf14      	ite	ne
    a1be:	2301      	movne	r3, #1
    a1c0:	2300      	moveq	r3, #0
    a1c2:	b2db      	uxtb	r3, r3
    a1c4:	f083 0301 	eor.w	r3, r3, #1
    a1c8:	b2db      	uxtb	r3, r3
    a1ca:	f003 0301 	and.w	r3, r3, #1
    a1ce:	b2da      	uxtb	r2, r3
    a1d0:	7ffb      	ldrb	r3, [r7, #31]
    a1d2:	4611      	mov	r1, r2
    a1d4:	4618      	mov	r0, r3
    a1d6:	4b27      	ldr	r3, [pc, #156]	; (a274 <_usb_d_dev_ep_init+0x12c>)
    a1d8:	4798      	blx	r3
    a1da:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a1dc:	68fb      	ldr	r3, [r7, #12]
    a1de:	7c9b      	ldrb	r3, [r3, #18]
    a1e0:	2bff      	cmp	r3, #255	; 0xff
    a1e2:	d002      	beq.n	a1ea <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a1e4:	f06f 0313 	mvn.w	r3, #19
    a1e8:	e040      	b.n	a26c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a1ea:	693b      	ldr	r3, [r7, #16]
    a1ec:	681b      	ldr	r3, [r3, #0]
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d102      	bne.n	a1f8 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a1f2:	f06f 0312 	mvn.w	r3, #18
    a1f6:	e039      	b.n	a26c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a1f8:	7fbb      	ldrb	r3, [r7, #30]
    a1fa:	2b00      	cmp	r3, #0
    a1fc:	d007      	beq.n	a20e <_usb_d_dev_ep_init+0xc6>
    a1fe:	693b      	ldr	r3, [r7, #16]
    a200:	685b      	ldr	r3, [r3, #4]
    a202:	2b00      	cmp	r3, #0
    a204:	bf14      	ite	ne
    a206:	2301      	movne	r3, #1
    a208:	2300      	moveq	r3, #0
    a20a:	b2db      	uxtb	r3, r3
    a20c:	e006      	b.n	a21c <_usb_d_dev_ep_init+0xd4>
    a20e:	693b      	ldr	r3, [r7, #16]
    a210:	681b      	ldr	r3, [r3, #0]
    a212:	2b00      	cmp	r3, #0
    a214:	bf14      	ite	ne
    a216:	2301      	movne	r3, #1
    a218:	2300      	moveq	r3, #0
    a21a:	b2db      	uxtb	r3, r3
    a21c:	2b00      	cmp	r3, #0
    a21e:	d00f      	beq.n	a240 <_usb_d_dev_ep_init+0xf8>
    a220:	7fbb      	ldrb	r3, [r7, #30]
    a222:	2b00      	cmp	r3, #0
    a224:	d003      	beq.n	a22e <_usb_d_dev_ep_init+0xe6>
    a226:	693b      	ldr	r3, [r7, #16]
    a228:	895b      	ldrh	r3, [r3, #10]
    a22a:	461a      	mov	r2, r3
    a22c:	e002      	b.n	a234 <_usb_d_dev_ep_init+0xec>
    a22e:	693b      	ldr	r3, [r7, #16]
    a230:	891b      	ldrh	r3, [r3, #8]
    a232:	461a      	mov	r2, r3
    a234:	88bb      	ldrh	r3, [r7, #4]
    a236:	429a      	cmp	r2, r3
    a238:	da02      	bge.n	a240 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a23a:	f06f 0312 	mvn.w	r3, #18
    a23e:	e015      	b.n	a26c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a240:	7fbb      	ldrb	r3, [r7, #30]
    a242:	2b00      	cmp	r3, #0
    a244:	d002      	beq.n	a24c <_usb_d_dev_ep_init+0x104>
    a246:	693b      	ldr	r3, [r7, #16]
    a248:	685b      	ldr	r3, [r3, #4]
    a24a:	e001      	b.n	a250 <_usb_d_dev_ep_init+0x108>
    a24c:	693b      	ldr	r3, [r7, #16]
    a24e:	681b      	ldr	r3, [r3, #0]
    a250:	69ba      	ldr	r2, [r7, #24]
    a252:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a254:	69bb      	ldr	r3, [r7, #24]
    a256:	88ba      	ldrh	r2, [r7, #4]
    a258:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a25a:	7dfb      	ldrb	r3, [r7, #23]
    a25c:	3301      	adds	r3, #1
    a25e:	b2da      	uxtb	r2, r3
    a260:	69bb      	ldr	r3, [r7, #24]
    a262:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a264:	69bb      	ldr	r3, [r7, #24]
    a266:	79fa      	ldrb	r2, [r7, #7]
    a268:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a26a:	2300      	movs	r3, #0
}
    a26c:	4618      	mov	r0, r3
    a26e:	3720      	adds	r7, #32
    a270:	46bd      	mov	sp, r7
    a272:	bd80      	pop	{r7, pc}
    a274:	00009179 	.word	0x00009179
    a278:	0000efb0 	.word	0x0000efb0

0000a27c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a27c:	b580      	push	{r7, lr}
    a27e:	b086      	sub	sp, #24
    a280:	af00      	add	r7, sp, #0
    a282:	4603      	mov	r3, r0
    a284:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a286:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a28a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a28c:	79fb      	ldrb	r3, [r7, #7]
    a28e:	f003 030f 	and.w	r3, r3, #15
    a292:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a294:	79fb      	ldrb	r3, [r7, #7]
    a296:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a29a:	2b00      	cmp	r3, #0
    a29c:	bf14      	ite	ne
    a29e:	2301      	movne	r3, #1
    a2a0:	2300      	moveq	r3, #0
    a2a2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a2a4:	7cba      	ldrb	r2, [r7, #18]
    a2a6:	7cfb      	ldrb	r3, [r7, #19]
    a2a8:	4611      	mov	r1, r2
    a2aa:	4618      	mov	r0, r3
    a2ac:	4b2a      	ldr	r3, [pc, #168]	; (a358 <_usb_d_dev_ep_deinit+0xdc>)
    a2ae:	4798      	blx	r3
    a2b0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a2b2:	7cfb      	ldrb	r3, [r7, #19]
    a2b4:	2b04      	cmp	r3, #4
    a2b6:	d84a      	bhi.n	a34e <_usb_d_dev_ep_deinit+0xd2>
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	7c9b      	ldrb	r3, [r3, #18]
    a2bc:	2bff      	cmp	r3, #255	; 0xff
    a2be:	d046      	beq.n	a34e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a2c0:	7cbb      	ldrb	r3, [r7, #18]
    a2c2:	2203      	movs	r2, #3
    a2c4:	4619      	mov	r1, r3
    a2c6:	68f8      	ldr	r0, [r7, #12]
    a2c8:	4b24      	ldr	r3, [pc, #144]	; (a35c <_usb_d_dev_ep_deinit+0xe0>)
    a2ca:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a2cc:	68fb      	ldr	r3, [r7, #12]
    a2ce:	7cdb      	ldrb	r3, [r3, #19]
    a2d0:	f003 0307 	and.w	r3, r3, #7
    a2d4:	b2db      	uxtb	r3, r3
    a2d6:	2b01      	cmp	r3, #1
    a2d8:	d107      	bne.n	a2ea <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a2da:	79fb      	ldrb	r3, [r7, #7]
    a2dc:	697a      	ldr	r2, [r7, #20]
    a2de:	3308      	adds	r3, #8
    a2e0:	015b      	lsls	r3, r3, #5
    a2e2:	4413      	add	r3, r2
    a2e4:	2200      	movs	r2, #0
    a2e6:	701a      	strb	r2, [r3, #0]
    a2e8:	e02a      	b.n	a340 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	da15      	bge.n	a31e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a2f2:	79fb      	ldrb	r3, [r7, #7]
    a2f4:	f003 030f 	and.w	r3, r3, #15
    a2f8:	79fa      	ldrb	r2, [r7, #7]
    a2fa:	f002 020f 	and.w	r2, r2, #15
    a2fe:	6979      	ldr	r1, [r7, #20]
    a300:	3208      	adds	r2, #8
    a302:	0152      	lsls	r2, r2, #5
    a304:	440a      	add	r2, r1
    a306:	7812      	ldrb	r2, [r2, #0]
    a308:	b2d2      	uxtb	r2, r2
    a30a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a30e:	b2d1      	uxtb	r1, r2
    a310:	697a      	ldr	r2, [r7, #20]
    a312:	3308      	adds	r3, #8
    a314:	015b      	lsls	r3, r3, #5
    a316:	4413      	add	r3, r2
    a318:	460a      	mov	r2, r1
    a31a:	701a      	strb	r2, [r3, #0]
    a31c:	e010      	b.n	a340 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a31e:	79fb      	ldrb	r3, [r7, #7]
    a320:	79fa      	ldrb	r2, [r7, #7]
    a322:	6979      	ldr	r1, [r7, #20]
    a324:	3208      	adds	r2, #8
    a326:	0152      	lsls	r2, r2, #5
    a328:	440a      	add	r2, r1
    a32a:	7812      	ldrb	r2, [r2, #0]
    a32c:	b2d2      	uxtb	r2, r2
    a32e:	f022 0207 	bic.w	r2, r2, #7
    a332:	b2d1      	uxtb	r1, r2
    a334:	697a      	ldr	r2, [r7, #20]
    a336:	3308      	adds	r3, #8
    a338:	015b      	lsls	r3, r3, #5
    a33a:	4413      	add	r3, r2
    a33c:	460a      	mov	r2, r1
    a33e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a340:	68fb      	ldr	r3, [r7, #12]
    a342:	2200      	movs	r2, #0
    a344:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a346:	68fb      	ldr	r3, [r7, #12]
    a348:	22ff      	movs	r2, #255	; 0xff
    a34a:	749a      	strb	r2, [r3, #18]
    a34c:	e000      	b.n	a350 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a34e:	bf00      	nop
}
    a350:	3718      	adds	r7, #24
    a352:	46bd      	mov	sp, r7
    a354:	bd80      	pop	{r7, pc}
    a356:	bf00      	nop
    a358:	00009179 	.word	0x00009179
    a35c:	0000a7b1 	.word	0x0000a7b1

0000a360 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a360:	b5b0      	push	{r4, r5, r7, lr}
    a362:	b088      	sub	sp, #32
    a364:	af00      	add	r7, sp, #0
    a366:	4603      	mov	r3, r0
    a368:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a36a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a36e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a370:	79fb      	ldrb	r3, [r7, #7]
    a372:	f003 030f 	and.w	r3, r3, #15
    a376:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a378:	79fb      	ldrb	r3, [r7, #7]
    a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a37e:	2b00      	cmp	r3, #0
    a380:	bf14      	ite	ne
    a382:	2301      	movne	r3, #1
    a384:	2300      	moveq	r3, #0
    a386:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a388:	7eba      	ldrb	r2, [r7, #26]
    a38a:	7efb      	ldrb	r3, [r7, #27]
    a38c:	4611      	mov	r1, r2
    a38e:	4618      	mov	r0, r3
    a390:	4b70      	ldr	r3, [pc, #448]	; (a554 <_usb_d_dev_ep_enable+0x1f4>)
    a392:	4798      	blx	r3
    a394:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a396:	7efb      	ldrb	r3, [r7, #27]
    a398:	4619      	mov	r1, r3
    a39a:	69f8      	ldr	r0, [r7, #28]
    a39c:	4b6e      	ldr	r3, [pc, #440]	; (a558 <_usb_d_dev_ep_enable+0x1f8>)
    a39e:	4798      	blx	r3
    a3a0:	4603      	mov	r3, r0
    a3a2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a3a4:	7efb      	ldrb	r3, [r7, #27]
    a3a6:	2b04      	cmp	r3, #4
    a3a8:	d803      	bhi.n	a3b2 <_usb_d_dev_ep_enable+0x52>
    a3aa:	697b      	ldr	r3, [r7, #20]
    a3ac:	7c9b      	ldrb	r3, [r3, #18]
    a3ae:	2bff      	cmp	r3, #255	; 0xff
    a3b0:	d102      	bne.n	a3b8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a3b2:	f06f 0311 	mvn.w	r3, #17
    a3b6:	e0c8      	b.n	a54a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a3b8:	7efb      	ldrb	r3, [r7, #27]
    a3ba:	015b      	lsls	r3, r3, #5
    a3bc:	4a67      	ldr	r2, [pc, #412]	; (a55c <_usb_d_dev_ep_enable+0x1fc>)
    a3be:	4413      	add	r3, r2
    a3c0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a3c2:	697b      	ldr	r3, [r7, #20]
    a3c4:	7cdb      	ldrb	r3, [r3, #19]
    a3c6:	f003 0307 	and.w	r3, r3, #7
    a3ca:	b2db      	uxtb	r3, r3
    a3cc:	2b01      	cmp	r3, #1
    a3ce:	d14b      	bne.n	a468 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a3d0:	7cfb      	ldrb	r3, [r7, #19]
    a3d2:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	d002      	beq.n	a3e0 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a3da:	f06f 0313 	mvn.w	r3, #19
    a3de:	e0b4      	b.n	a54a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a3e0:	7efb      	ldrb	r3, [r7, #27]
    a3e2:	2211      	movs	r2, #17
    a3e4:	4619      	mov	r1, r3
    a3e6:	69f8      	ldr	r0, [r7, #28]
    a3e8:	4b5d      	ldr	r3, [pc, #372]	; (a560 <_usb_d_dev_ep_enable+0x200>)
    a3ea:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a3ec:	697b      	ldr	r3, [r7, #20]
    a3ee:	8a1b      	ldrh	r3, [r3, #16]
    a3f0:	039b      	lsls	r3, r3, #14
    a3f2:	4c5c      	ldr	r4, [pc, #368]	; (a564 <_usb_d_dev_ep_enable+0x204>)
    a3f4:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a3f6:	697b      	ldr	r3, [r7, #20]
    a3f8:	8a1b      	ldrh	r3, [r3, #16]
    a3fa:	4618      	mov	r0, r3
    a3fc:	4b5a      	ldr	r3, [pc, #360]	; (a568 <_usb_d_dev_ep_enable+0x208>)
    a3fe:	4798      	blx	r3
    a400:	4603      	mov	r3, r0
    a402:	071b      	lsls	r3, r3, #28
    a404:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a408:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a40c:	68fb      	ldr	r3, [r7, #12]
    a40e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a410:	68fb      	ldr	r3, [r7, #12]
    a412:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a416:	697b      	ldr	r3, [r7, #20]
    a418:	8a1b      	ldrh	r3, [r3, #16]
    a41a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a41e:	697b      	ldr	r3, [r7, #20]
    a420:	8a1b      	ldrh	r3, [r3, #16]
    a422:	4618      	mov	r0, r3
    a424:	4b50      	ldr	r3, [pc, #320]	; (a568 <_usb_d_dev_ep_enable+0x208>)
    a426:	4798      	blx	r3
    a428:	4603      	mov	r3, r0
    a42a:	071b      	lsls	r3, r3, #28
    a42c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a430:	432b      	orrs	r3, r5
    a432:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a434:	7efb      	ldrb	r3, [r7, #27]
    a436:	2200      	movs	r2, #0
    a438:	2100      	movs	r1, #0
    a43a:	4618      	mov	r0, r3
    a43c:	4b4b      	ldr	r3, [pc, #300]	; (a56c <_usb_d_dev_ep_enable+0x20c>)
    a43e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a440:	7efb      	ldrb	r3, [r7, #27]
    a442:	2200      	movs	r2, #0
    a444:	2101      	movs	r1, #1
    a446:	4618      	mov	r0, r3
    a448:	4b49      	ldr	r3, [pc, #292]	; (a570 <_usb_d_dev_ep_enable+0x210>)
    a44a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a44c:	7efb      	ldrb	r3, [r7, #27]
    a44e:	2100      	movs	r1, #0
    a450:	4618      	mov	r0, r3
    a452:	4b48      	ldr	r3, [pc, #288]	; (a574 <_usb_d_dev_ep_enable+0x214>)
    a454:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a456:	7efb      	ldrb	r3, [r7, #27]
    a458:	2101      	movs	r1, #1
    a45a:	4618      	mov	r0, r3
    a45c:	4b45      	ldr	r3, [pc, #276]	; (a574 <_usb_d_dev_ep_enable+0x214>)
    a45e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a460:	6978      	ldr	r0, [r7, #20]
    a462:	4b45      	ldr	r3, [pc, #276]	; (a578 <_usb_d_dev_ep_enable+0x218>)
    a464:	4798      	blx	r3
    a466:	e06f      	b.n	a548 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a468:	7ebb      	ldrb	r3, [r7, #26]
    a46a:	2b00      	cmp	r3, #0
    a46c:	d038      	beq.n	a4e0 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a46e:	7cfb      	ldrb	r3, [r7, #19]
    a470:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a474:	2b00      	cmp	r3, #0
    a476:	d002      	beq.n	a47e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a478:	f06f 0313 	mvn.w	r3, #19
    a47c:	e065      	b.n	a54a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a47e:	697b      	ldr	r3, [r7, #20]
    a480:	7cdb      	ldrb	r3, [r3, #19]
    a482:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a486:	b2db      	uxtb	r3, r3
    a488:	011b      	lsls	r3, r3, #4
    a48a:	b2db      	uxtb	r3, r3
    a48c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a490:	b2da      	uxtb	r2, r3
    a492:	7cfb      	ldrb	r3, [r7, #19]
    a494:	4313      	orrs	r3, r2
    a496:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a498:	7cfa      	ldrb	r2, [r7, #19]
    a49a:	7efb      	ldrb	r3, [r7, #27]
    a49c:	4619      	mov	r1, r3
    a49e:	69f8      	ldr	r0, [r7, #28]
    a4a0:	4b2f      	ldr	r3, [pc, #188]	; (a560 <_usb_d_dev_ep_enable+0x200>)
    a4a2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a4a4:	68fb      	ldr	r3, [r7, #12]
    a4a6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a4aa:	697b      	ldr	r3, [r7, #20]
    a4ac:	8a1b      	ldrh	r3, [r3, #16]
    a4ae:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a4b2:	697b      	ldr	r3, [r7, #20]
    a4b4:	8a1b      	ldrh	r3, [r3, #16]
    a4b6:	4618      	mov	r0, r3
    a4b8:	4b2b      	ldr	r3, [pc, #172]	; (a568 <_usb_d_dev_ep_enable+0x208>)
    a4ba:	4798      	blx	r3
    a4bc:	4603      	mov	r3, r0
    a4be:	071b      	lsls	r3, r3, #28
    a4c0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a4c4:	432b      	orrs	r3, r5
    a4c6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a4c8:	7efb      	ldrb	r3, [r7, #27]
    a4ca:	2200      	movs	r2, #0
    a4cc:	2101      	movs	r1, #1
    a4ce:	4618      	mov	r0, r3
    a4d0:	4b27      	ldr	r3, [pc, #156]	; (a570 <_usb_d_dev_ep_enable+0x210>)
    a4d2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a4d4:	7efb      	ldrb	r3, [r7, #27]
    a4d6:	2101      	movs	r1, #1
    a4d8:	4618      	mov	r0, r3
    a4da:	4b26      	ldr	r3, [pc, #152]	; (a574 <_usb_d_dev_ep_enable+0x214>)
    a4dc:	4798      	blx	r3
    a4de:	e033      	b.n	a548 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a4e0:	7cfb      	ldrb	r3, [r7, #19]
    a4e2:	f003 0307 	and.w	r3, r3, #7
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d002      	beq.n	a4f0 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a4ea:	f06f 0313 	mvn.w	r3, #19
    a4ee:	e02c      	b.n	a54a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a4f0:	697b      	ldr	r3, [r7, #20]
    a4f2:	7cdb      	ldrb	r3, [r3, #19]
    a4f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a4f8:	b2db      	uxtb	r3, r3
    a4fa:	461a      	mov	r2, r3
    a4fc:	7cfb      	ldrb	r3, [r7, #19]
    a4fe:	4313      	orrs	r3, r2
    a500:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a502:	7cfa      	ldrb	r2, [r7, #19]
    a504:	7efb      	ldrb	r3, [r7, #27]
    a506:	4619      	mov	r1, r3
    a508:	69f8      	ldr	r0, [r7, #28]
    a50a:	4b15      	ldr	r3, [pc, #84]	; (a560 <_usb_d_dev_ep_enable+0x200>)
    a50c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a50e:	697b      	ldr	r3, [r7, #20]
    a510:	8a1b      	ldrh	r3, [r3, #16]
    a512:	039b      	lsls	r3, r3, #14
    a514:	4c13      	ldr	r4, [pc, #76]	; (a564 <_usb_d_dev_ep_enable+0x204>)
    a516:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a518:	697b      	ldr	r3, [r7, #20]
    a51a:	8a1b      	ldrh	r3, [r3, #16]
    a51c:	4618      	mov	r0, r3
    a51e:	4b12      	ldr	r3, [pc, #72]	; (a568 <_usb_d_dev_ep_enable+0x208>)
    a520:	4798      	blx	r3
    a522:	4603      	mov	r3, r0
    a524:	071b      	lsls	r3, r3, #28
    a526:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a52a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a52e:	68fb      	ldr	r3, [r7, #12]
    a530:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a532:	7efb      	ldrb	r3, [r7, #27]
    a534:	2200      	movs	r2, #0
    a536:	2100      	movs	r1, #0
    a538:	4618      	mov	r0, r3
    a53a:	4b0c      	ldr	r3, [pc, #48]	; (a56c <_usb_d_dev_ep_enable+0x20c>)
    a53c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a53e:	7efb      	ldrb	r3, [r7, #27]
    a540:	2100      	movs	r1, #0
    a542:	4618      	mov	r0, r3
    a544:	4b0b      	ldr	r3, [pc, #44]	; (a574 <_usb_d_dev_ep_enable+0x214>)
    a546:	4798      	blx	r3
	}

	return USB_OK;
    a548:	2300      	movs	r3, #0
}
    a54a:	4618      	mov	r0, r3
    a54c:	3720      	adds	r7, #32
    a54e:	46bd      	mov	sp, r7
    a550:	bdb0      	pop	{r4, r5, r7, pc}
    a552:	bf00      	nop
    a554:	00009179 	.word	0x00009179
    a558:	000087ff 	.word	0x000087ff
    a55c:	20000a34 	.word	0x20000a34
    a560:	000087d5 	.word	0x000087d5
    a564:	0fffc000 	.word	0x0fffc000
    a568:	00009115 	.word	0x00009115
    a56c:	000090bd 	.word	0x000090bd
    a570:	00009065 	.word	0x00009065
    a574:	0000902d 	.word	0x0000902d
    a578:	0000a0d1 	.word	0x0000a0d1

0000a57c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a57c:	b580      	push	{r7, lr}
    a57e:	b084      	sub	sp, #16
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
    a584:	460b      	mov	r3, r1
    a586:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	7c9b      	ldrb	r3, [r3, #18]
    a58c:	f003 030f 	and.w	r3, r3, #15
    a590:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a592:	78fa      	ldrb	r2, [r7, #3]
    a594:	7bfb      	ldrb	r3, [r7, #15]
    a596:	4611      	mov	r1, r2
    a598:	4618      	mov	r0, r3
    a59a:	4b03      	ldr	r3, [pc, #12]	; (a5a8 <_usb_d_dev_ep_stall_get+0x2c>)
    a59c:	4798      	blx	r3
    a59e:	4603      	mov	r3, r0
}
    a5a0:	4618      	mov	r0, r3
    a5a2:	3710      	adds	r7, #16
    a5a4:	46bd      	mov	sp, r7
    a5a6:	bd80      	pop	{r7, pc}
    a5a8:	00008c6d 	.word	0x00008c6d

0000a5ac <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a5ac:	b580      	push	{r7, lr}
    a5ae:	b084      	sub	sp, #16
    a5b0:	af00      	add	r7, sp, #0
    a5b2:	6078      	str	r0, [r7, #4]
    a5b4:	460b      	mov	r3, r1
    a5b6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	7c9b      	ldrb	r3, [r3, #18]
    a5bc:	f003 030f 	and.w	r3, r3, #15
    a5c0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a5c2:	78f9      	ldrb	r1, [r7, #3]
    a5c4:	7bfb      	ldrb	r3, [r7, #15]
    a5c6:	2201      	movs	r2, #1
    a5c8:	4618      	mov	r0, r3
    a5ca:	4b0a      	ldr	r3, [pc, #40]	; (a5f4 <_usb_d_dev_ep_stall_set+0x48>)
    a5cc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a5ce:	78fb      	ldrb	r3, [r7, #3]
    a5d0:	2220      	movs	r2, #32
    a5d2:	409a      	lsls	r2, r3
    a5d4:	7bfb      	ldrb	r3, [r7, #15]
    a5d6:	4611      	mov	r1, r2
    a5d8:	4618      	mov	r0, r3
    a5da:	4b07      	ldr	r3, [pc, #28]	; (a5f8 <_usb_d_dev_ep_stall_set+0x4c>)
    a5dc:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a5de:	687a      	ldr	r2, [r7, #4]
    a5e0:	7cd3      	ldrb	r3, [r2, #19]
    a5e2:	f043 0308 	orr.w	r3, r3, #8
    a5e6:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a5e8:	2300      	movs	r3, #0
}
    a5ea:	4618      	mov	r0, r3
    a5ec:	3710      	adds	r7, #16
    a5ee:	46bd      	mov	sp, r7
    a5f0:	bd80      	pop	{r7, pc}
    a5f2:	bf00      	nop
    a5f4:	00008c15 	.word	0x00008c15
    a5f8:	00008b95 	.word	0x00008b95

0000a5fc <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a5fc:	b580      	push	{r7, lr}
    a5fe:	b084      	sub	sp, #16
    a600:	af00      	add	r7, sp, #0
    a602:	6078      	str	r0, [r7, #4]
    a604:	460b      	mov	r3, r1
    a606:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	7c9b      	ldrb	r3, [r3, #18]
    a60c:	f003 030f 	and.w	r3, r3, #15
    a610:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a612:	78fa      	ldrb	r2, [r7, #3]
    a614:	7bfb      	ldrb	r3, [r7, #15]
    a616:	4611      	mov	r1, r2
    a618:	4618      	mov	r0, r3
    a61a:	4b28      	ldr	r3, [pc, #160]	; (a6bc <_usb_d_dev_ep_stall_clr+0xc0>)
    a61c:	4798      	blx	r3
    a61e:	4603      	mov	r3, r0
    a620:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a622:	7bbb      	ldrb	r3, [r7, #14]
    a624:	f083 0301 	eor.w	r3, r3, #1
    a628:	b2db      	uxtb	r3, r3
    a62a:	2b00      	cmp	r3, #0
    a62c:	d001      	beq.n	a632 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a62e:	2300      	movs	r3, #0
    a630:	e040      	b.n	a6b4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a632:	78f9      	ldrb	r1, [r7, #3]
    a634:	7bfb      	ldrb	r3, [r7, #15]
    a636:	2200      	movs	r2, #0
    a638:	4618      	mov	r0, r3
    a63a:	4b21      	ldr	r3, [pc, #132]	; (a6c0 <_usb_d_dev_ep_stall_clr+0xc4>)
    a63c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a63e:	78fb      	ldrb	r3, [r7, #3]
    a640:	2220      	movs	r2, #32
    a642:	409a      	lsls	r2, r3
    a644:	7bfb      	ldrb	r3, [r7, #15]
    a646:	4611      	mov	r1, r2
    a648:	4618      	mov	r0, r3
    a64a:	4b1e      	ldr	r3, [pc, #120]	; (a6c4 <_usb_d_dev_ep_stall_clr+0xc8>)
    a64c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a64e:	78fa      	ldrb	r2, [r7, #3]
    a650:	7bfb      	ldrb	r3, [r7, #15]
    a652:	4611      	mov	r1, r2
    a654:	4618      	mov	r0, r3
    a656:	4b1c      	ldr	r3, [pc, #112]	; (a6c8 <_usb_d_dev_ep_stall_clr+0xcc>)
    a658:	4798      	blx	r3
    a65a:	4603      	mov	r3, r0
    a65c:	2b00      	cmp	r3, #0
    a65e:	d00b      	beq.n	a678 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a660:	78fa      	ldrb	r2, [r7, #3]
    a662:	7bfb      	ldrb	r3, [r7, #15]
    a664:	4611      	mov	r1, r2
    a666:	4618      	mov	r0, r3
    a668:	4b18      	ldr	r3, [pc, #96]	; (a6cc <_usb_d_dev_ep_stall_clr+0xd0>)
    a66a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a66c:	78f9      	ldrb	r1, [r7, #3]
    a66e:	7bfb      	ldrb	r3, [r7, #15]
    a670:	2200      	movs	r2, #0
    a672:	4618      	mov	r0, r3
    a674:	4b16      	ldr	r3, [pc, #88]	; (a6d0 <_usb_d_dev_ep_stall_clr+0xd4>)
    a676:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a678:	687b      	ldr	r3, [r7, #4]
    a67a:	7cdb      	ldrb	r3, [r3, #19]
    a67c:	f003 0307 	and.w	r3, r3, #7
    a680:	b2db      	uxtb	r3, r3
    a682:	2b01      	cmp	r3, #1
    a684:	d110      	bne.n	a6a8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a686:	7bfb      	ldrb	r3, [r7, #15]
    a688:	4619      	mov	r1, r3
    a68a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a68e:	4b11      	ldr	r3, [pc, #68]	; (a6d4 <_usb_d_dev_ep_stall_clr+0xd8>)
    a690:	4798      	blx	r3
    a692:	4603      	mov	r3, r0
    a694:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a698:	2b00      	cmp	r3, #0
    a69a:	d10a      	bne.n	a6b2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a69c:	687a      	ldr	r2, [r7, #4]
    a69e:	7cd3      	ldrb	r3, [r2, #19]
    a6a0:	f36f 03c3 	bfc	r3, #3, #1
    a6a4:	74d3      	strb	r3, [r2, #19]
    a6a6:	e004      	b.n	a6b2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a6a8:	687a      	ldr	r2, [r7, #4]
    a6aa:	7cd3      	ldrb	r3, [r2, #19]
    a6ac:	f36f 03c3 	bfc	r3, #3, #1
    a6b0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a6b2:	2300      	movs	r3, #0
}
    a6b4:	4618      	mov	r0, r3
    a6b6:	3710      	adds	r7, #16
    a6b8:	46bd      	mov	sp, r7
    a6ba:	bd80      	pop	{r7, pc}
    a6bc:	00008c6d 	.word	0x00008c6d
    a6c0:	00008c15 	.word	0x00008c15
    a6c4:	00008bbd 	.word	0x00008bbd
    a6c8:	00008cb1 	.word	0x00008cb1
    a6cc:	00008cf5 	.word	0x00008cf5
    a6d0:	00008de1 	.word	0x00008de1
    a6d4:	0000869d 	.word	0x0000869d

0000a6d8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a6d8:	b580      	push	{r7, lr}
    a6da:	b086      	sub	sp, #24
    a6dc:	af00      	add	r7, sp, #0
    a6de:	4603      	mov	r3, r0
    a6e0:	460a      	mov	r2, r1
    a6e2:	71fb      	strb	r3, [r7, #7]
    a6e4:	4613      	mov	r3, r2
    a6e6:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a6e8:	79fb      	ldrb	r3, [r7, #7]
    a6ea:	f003 030f 	and.w	r3, r3, #15
    a6ee:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a6f0:	79fb      	ldrb	r3, [r7, #7]
    a6f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a6f6:	2b00      	cmp	r3, #0
    a6f8:	bf14      	ite	ne
    a6fa:	2301      	movne	r3, #1
    a6fc:	2300      	moveq	r3, #0
    a6fe:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a700:	7cba      	ldrb	r2, [r7, #18]
    a702:	7cfb      	ldrb	r3, [r7, #19]
    a704:	4611      	mov	r1, r2
    a706:	4618      	mov	r0, r3
    a708:	4b13      	ldr	r3, [pc, #76]	; (a758 <_usb_d_dev_ep_stall+0x80>)
    a70a:	4798      	blx	r3
    a70c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a70e:	7cfb      	ldrb	r3, [r7, #19]
    a710:	2b04      	cmp	r3, #4
    a712:	d902      	bls.n	a71a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a714:	f06f 0311 	mvn.w	r3, #17
    a718:	e01a      	b.n	a750 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a71a:	79bb      	ldrb	r3, [r7, #6]
    a71c:	2b01      	cmp	r3, #1
    a71e:	d106      	bne.n	a72e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a720:	7cbb      	ldrb	r3, [r7, #18]
    a722:	4619      	mov	r1, r3
    a724:	68f8      	ldr	r0, [r7, #12]
    a726:	4b0d      	ldr	r3, [pc, #52]	; (a75c <_usb_d_dev_ep_stall+0x84>)
    a728:	4798      	blx	r3
    a72a:	6178      	str	r0, [r7, #20]
    a72c:	e00f      	b.n	a74e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a72e:	79bb      	ldrb	r3, [r7, #6]
    a730:	2b00      	cmp	r3, #0
    a732:	d106      	bne.n	a742 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a734:	7cbb      	ldrb	r3, [r7, #18]
    a736:	4619      	mov	r1, r3
    a738:	68f8      	ldr	r0, [r7, #12]
    a73a:	4b09      	ldr	r3, [pc, #36]	; (a760 <_usb_d_dev_ep_stall+0x88>)
    a73c:	4798      	blx	r3
    a73e:	6178      	str	r0, [r7, #20]
    a740:	e005      	b.n	a74e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a742:	7cbb      	ldrb	r3, [r7, #18]
    a744:	4619      	mov	r1, r3
    a746:	68f8      	ldr	r0, [r7, #12]
    a748:	4b06      	ldr	r3, [pc, #24]	; (a764 <_usb_d_dev_ep_stall+0x8c>)
    a74a:	4798      	blx	r3
    a74c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a74e:	697b      	ldr	r3, [r7, #20]
}
    a750:	4618      	mov	r0, r3
    a752:	3718      	adds	r7, #24
    a754:	46bd      	mov	sp, r7
    a756:	bd80      	pop	{r7, pc}
    a758:	00009179 	.word	0x00009179
    a75c:	0000a5ad 	.word	0x0000a5ad
    a760:	0000a5fd 	.word	0x0000a5fd
    a764:	0000a57d 	.word	0x0000a57d

0000a768 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a768:	b580      	push	{r7, lr}
    a76a:	b082      	sub	sp, #8
    a76c:	af00      	add	r7, sp, #0
    a76e:	6078      	str	r0, [r7, #4]
    a770:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	7c9b      	ldrb	r3, [r3, #18]
    a776:	2bff      	cmp	r3, #255	; 0xff
    a778:	d014      	beq.n	a7a4 <_usb_d_dev_trans_done+0x3c>
    a77a:	687b      	ldr	r3, [r7, #4]
    a77c:	7cdb      	ldrb	r3, [r3, #19]
    a77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a782:	b2db      	uxtb	r3, r3
    a784:	2b00      	cmp	r3, #0
    a786:	d00d      	beq.n	a7a4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a788:	687a      	ldr	r2, [r7, #4]
    a78a:	7cd3      	ldrb	r3, [r2, #19]
    a78c:	f36f 1386 	bfc	r3, #6, #1
    a790:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a792:	4b06      	ldr	r3, [pc, #24]	; (a7ac <_usb_d_dev_trans_done+0x44>)
    a794:	691b      	ldr	r3, [r3, #16]
    a796:	687a      	ldr	r2, [r7, #4]
    a798:	7c90      	ldrb	r0, [r2, #18]
    a79a:	687a      	ldr	r2, [r7, #4]
    a79c:	6892      	ldr	r2, [r2, #8]
    a79e:	6839      	ldr	r1, [r7, #0]
    a7a0:	4798      	blx	r3
    a7a2:	e000      	b.n	a7a6 <_usb_d_dev_trans_done+0x3e>
		return;
    a7a4:	bf00      	nop
}
    a7a6:	3708      	adds	r7, #8
    a7a8:	46bd      	mov	sp, r7
    a7aa:	bd80      	pop	{r7, pc}
    a7ac:	2000096c 	.word	0x2000096c

0000a7b0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a7b0:	b580      	push	{r7, lr}
    a7b2:	b086      	sub	sp, #24
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	60f8      	str	r0, [r7, #12]
    a7b8:	460b      	mov	r3, r1
    a7ba:	607a      	str	r2, [r7, #4]
    a7bc:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7be:	68fb      	ldr	r3, [r7, #12]
    a7c0:	7c9b      	ldrb	r3, [r3, #18]
    a7c2:	f003 030f 	and.w	r3, r3, #15
    a7c6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a7c8:	4b1f      	ldr	r3, [pc, #124]	; (a848 <_usb_d_dev_trans_stop+0x98>)
    a7ca:	881b      	ldrh	r3, [r3, #0]
    a7cc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a7ce:	68fb      	ldr	r3, [r7, #12]
    a7d0:	7c9b      	ldrb	r3, [r3, #18]
    a7d2:	2bff      	cmp	r3, #255	; 0xff
    a7d4:	d033      	beq.n	a83e <_usb_d_dev_trans_stop+0x8e>
    a7d6:	68fb      	ldr	r3, [r7, #12]
    a7d8:	7cdb      	ldrb	r3, [r3, #19]
    a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a7de:	b2db      	uxtb	r3, r3
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d02c      	beq.n	a83e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a7e4:	7afb      	ldrb	r3, [r7, #11]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d006      	beq.n	a7f8 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a7ea:	7dfb      	ldrb	r3, [r7, #23]
    a7ec:	2200      	movs	r2, #0
    a7ee:	2101      	movs	r1, #1
    a7f0:	4618      	mov	r0, r3
    a7f2:	4b16      	ldr	r3, [pc, #88]	; (a84c <_usb_d_dev_trans_stop+0x9c>)
    a7f4:	4798      	blx	r3
    a7f6:	e005      	b.n	a804 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a7f8:	7dfb      	ldrb	r3, [r7, #23]
    a7fa:	2200      	movs	r2, #0
    a7fc:	2100      	movs	r1, #0
    a7fe:	4618      	mov	r0, r3
    a800:	4b13      	ldr	r3, [pc, #76]	; (a850 <_usb_d_dev_trans_stop+0xa0>)
    a802:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a804:	7afb      	ldrb	r3, [r7, #11]
    a806:	f107 0218 	add.w	r2, r7, #24
    a80a:	4413      	add	r3, r2
    a80c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a810:	461a      	mov	r2, r3
    a812:	7dfb      	ldrb	r3, [r7, #23]
    a814:	4611      	mov	r1, r2
    a816:	4618      	mov	r0, r3
    a818:	4b0e      	ldr	r3, [pc, #56]	; (a854 <_usb_d_dev_trans_stop+0xa4>)
    a81a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a81c:	7afb      	ldrb	r3, [r7, #11]
    a81e:	f107 0218 	add.w	r2, r7, #24
    a822:	4413      	add	r3, r2
    a824:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a828:	461a      	mov	r2, r3
    a82a:	7dfb      	ldrb	r3, [r7, #23]
    a82c:	4611      	mov	r1, r2
    a82e:	4618      	mov	r0, r3
    a830:	4b09      	ldr	r3, [pc, #36]	; (a858 <_usb_d_dev_trans_stop+0xa8>)
    a832:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a834:	6879      	ldr	r1, [r7, #4]
    a836:	68f8      	ldr	r0, [r7, #12]
    a838:	4b08      	ldr	r3, [pc, #32]	; (a85c <_usb_d_dev_trans_stop+0xac>)
    a83a:	4798      	blx	r3
    a83c:	e000      	b.n	a840 <_usb_d_dev_trans_stop+0x90>
		return;
    a83e:	bf00      	nop
}
    a840:	3718      	adds	r7, #24
    a842:	46bd      	mov	sp, r7
    a844:	bd80      	pop	{r7, pc}
    a846:	bf00      	nop
    a848:	0000eff0 	.word	0x0000eff0
    a84c:	00009065 	.word	0x00009065
    a850:	000090bd 	.word	0x000090bd
    a854:	00008b6d 	.word	0x00008b6d
    a858:	00008bbd 	.word	0x00008bbd
    a85c:	0000a769 	.word	0x0000a769

0000a860 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a860:	b580      	push	{r7, lr}
    a862:	b086      	sub	sp, #24
    a864:	af00      	add	r7, sp, #0
    a866:	4603      	mov	r3, r0
    a868:	6039      	str	r1, [r7, #0]
    a86a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a86c:	79fb      	ldrb	r3, [r7, #7]
    a86e:	f003 030f 	and.w	r3, r3, #15
    a872:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a874:	7dfb      	ldrb	r3, [r7, #23]
    a876:	015b      	lsls	r3, r3, #5
    a878:	4a1e      	ldr	r2, [pc, #120]	; (a8f4 <_usb_d_dev_ep_read_req+0x94>)
    a87a:	4413      	add	r3, r2
    a87c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a87e:	693b      	ldr	r3, [r7, #16]
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a884:	693b      	ldr	r3, [r7, #16]
    a886:	685b      	ldr	r3, [r3, #4]
    a888:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a88c:	b29b      	uxth	r3, r3
    a88e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a890:	7dfb      	ldrb	r3, [r7, #23]
    a892:	2b04      	cmp	r3, #4
    a894:	d802      	bhi.n	a89c <_usb_d_dev_ep_read_req+0x3c>
    a896:	683b      	ldr	r3, [r7, #0]
    a898:	2b00      	cmp	r3, #0
    a89a:	d102      	bne.n	a8a2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a89c:	f06f 0311 	mvn.w	r3, #17
    a8a0:	e023      	b.n	a8ea <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a8a2:	7dfb      	ldrb	r3, [r7, #23]
    a8a4:	4618      	mov	r0, r3
    a8a6:	4b14      	ldr	r3, [pc, #80]	; (a8f8 <_usb_d_dev_ep_read_req+0x98>)
    a8a8:	4798      	blx	r3
    a8aa:	4603      	mov	r3, r0
    a8ac:	f083 0301 	eor.w	r3, r3, #1
    a8b0:	b2db      	uxtb	r3, r3
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d002      	beq.n	a8bc <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a8b6:	f06f 0312 	mvn.w	r3, #18
    a8ba:	e016      	b.n	a8ea <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a8bc:	7dfb      	ldrb	r3, [r7, #23]
    a8be:	4618      	mov	r0, r3
    a8c0:	4b0e      	ldr	r3, [pc, #56]	; (a8fc <_usb_d_dev_ep_read_req+0x9c>)
    a8c2:	4798      	blx	r3
    a8c4:	4603      	mov	r3, r0
    a8c6:	f083 0301 	eor.w	r3, r3, #1
    a8ca:	b2db      	uxtb	r3, r3
    a8cc:	2b00      	cmp	r3, #0
    a8ce:	d001      	beq.n	a8d4 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a8d0:	2300      	movs	r3, #0
    a8d2:	e00a      	b.n	a8ea <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a8d4:	68fb      	ldr	r3, [r7, #12]
    a8d6:	2208      	movs	r2, #8
    a8d8:	4619      	mov	r1, r3
    a8da:	6838      	ldr	r0, [r7, #0]
    a8dc:	4b08      	ldr	r3, [pc, #32]	; (a900 <_usb_d_dev_ep_read_req+0xa0>)
    a8de:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a8e0:	7dfb      	ldrb	r3, [r7, #23]
    a8e2:	4618      	mov	r0, r3
    a8e4:	4b07      	ldr	r3, [pc, #28]	; (a904 <_usb_d_dev_ep_read_req+0xa4>)
    a8e6:	4798      	blx	r3

	return bytes;
    a8e8:	897b      	ldrh	r3, [r7, #10]
}
    a8ea:	4618      	mov	r0, r3
    a8ec:	3718      	adds	r7, #24
    a8ee:	46bd      	mov	sp, r7
    a8f0:	bd80      	pop	{r7, pc}
    a8f2:	bf00      	nop
    a8f4:	20000a34 	.word	0x20000a34
    a8f8:	00008be5 	.word	0x00008be5
    a8fc:	00008d91 	.word	0x00008d91
    a900:	0000e829 	.word	0x0000e829
    a904:	00008dc1 	.word	0x00008dc1

0000a908 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a908:	b580      	push	{r7, lr}
    a90a:	b086      	sub	sp, #24
    a90c:	af00      	add	r7, sp, #0
    a90e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	7a1b      	ldrb	r3, [r3, #8]
    a914:	f003 030f 	and.w	r3, r3, #15
    a918:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a91a:	687b      	ldr	r3, [r7, #4]
    a91c:	7a1b      	ldrb	r3, [r3, #8]
    a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a922:	2b00      	cmp	r3, #0
    a924:	bf14      	ite	ne
    a926:	2301      	movne	r3, #1
    a928:	2300      	moveq	r3, #0
    a92a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a92c:	7d7a      	ldrb	r2, [r7, #21]
    a92e:	7dbb      	ldrb	r3, [r7, #22]
    a930:	4611      	mov	r1, r2
    a932:	4618      	mov	r0, r3
    a934:	4b5f      	ldr	r3, [pc, #380]	; (aab4 <_usb_d_dev_ep_trans+0x1ac>)
    a936:	4798      	blx	r3
    a938:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a93a:	693b      	ldr	r3, [r7, #16]
    a93c:	8a1b      	ldrh	r3, [r3, #16]
    a93e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a942:	4293      	cmp	r3, r2
    a944:	d004      	beq.n	a950 <_usb_d_dev_ep_trans+0x48>
    a946:	693b      	ldr	r3, [r7, #16]
    a948:	8a1b      	ldrh	r3, [r3, #16]
    a94a:	3b01      	subs	r3, #1
    a94c:	b29b      	uxth	r3, r3
    a94e:	e001      	b.n	a954 <_usb_d_dev_ep_trans+0x4c>
    a950:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a954:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a956:	687b      	ldr	r3, [r7, #4]
    a958:	685a      	ldr	r2, [r3, #4]
    a95a:	89fb      	ldrh	r3, [r7, #14]
    a95c:	4013      	ands	r3, r2
    a95e:	2b00      	cmp	r3, #0
    a960:	bf14      	ite	ne
    a962:	2301      	movne	r3, #1
    a964:	2300      	moveq	r3, #0
    a966:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a968:	2300      	movs	r3, #0
    a96a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a96c:	7dbb      	ldrb	r3, [r7, #22]
    a96e:	2b04      	cmp	r3, #4
    a970:	d902      	bls.n	a978 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a972:	f06f 0311 	mvn.w	r3, #17
    a976:	e098      	b.n	aaaa <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	681b      	ldr	r3, [r3, #0]
    a97c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a980:	d31a      	bcc.n	a9b8 <_usb_d_dev_ep_trans+0xb0>
    a982:	687b      	ldr	r3, [r7, #4]
    a984:	681b      	ldr	r3, [r3, #0]
    a986:	461a      	mov	r2, r3
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	685b      	ldr	r3, [r3, #4]
    a98c:	4413      	add	r3, r2
    a98e:	4a4a      	ldr	r2, [pc, #296]	; (aab8 <_usb_d_dev_ep_trans+0x1b0>)
    a990:	4293      	cmp	r3, r2
    a992:	d811      	bhi.n	a9b8 <_usb_d_dev_ep_trans+0xb0>
    a994:	687b      	ldr	r3, [r7, #4]
    a996:	681b      	ldr	r3, [r3, #0]
    a998:	f003 0303 	and.w	r3, r3, #3
    a99c:	2b00      	cmp	r3, #0
    a99e:	d10b      	bne.n	a9b8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a9a0:	7d7b      	ldrb	r3, [r7, #21]
    a9a2:	f083 0301 	eor.w	r3, r3, #1
    a9a6:	b2db      	uxtb	r3, r3
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d00e      	beq.n	a9ca <_usb_d_dev_ep_trans+0xc2>
    a9ac:	687b      	ldr	r3, [r7, #4]
    a9ae:	685b      	ldr	r3, [r3, #4]
    a9b0:	693a      	ldr	r2, [r7, #16]
    a9b2:	8a12      	ldrh	r2, [r2, #16]
    a9b4:	4293      	cmp	r3, r2
    a9b6:	d208      	bcs.n	a9ca <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a9b8:	693b      	ldr	r3, [r7, #16]
    a9ba:	68db      	ldr	r3, [r3, #12]
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d102      	bne.n	a9c6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a9c0:	f06f 0312 	mvn.w	r3, #18
    a9c4:	e071      	b.n	aaaa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a9c6:	2301      	movs	r3, #1
    a9c8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a9ca:	7d7b      	ldrb	r3, [r7, #21]
    a9cc:	f083 0301 	eor.w	r3, r3, #1
    a9d0:	b2db      	uxtb	r3, r3
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d009      	beq.n	a9ea <_usb_d_dev_ep_trans+0xe2>
    a9d6:	7b7b      	ldrb	r3, [r7, #13]
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d006      	beq.n	a9ea <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a9dc:	693b      	ldr	r3, [r7, #16]
    a9de:	68db      	ldr	r3, [r3, #12]
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d102      	bne.n	a9ea <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a9e4:	f06f 0311 	mvn.w	r3, #17
    a9e8:	e05f      	b.n	aaaa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a9ea:	693b      	ldr	r3, [r7, #16]
    a9ec:	7cdb      	ldrb	r3, [r3, #19]
    a9ee:	f003 0308 	and.w	r3, r3, #8
    a9f2:	b2db      	uxtb	r3, r3
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	d001      	beq.n	a9fc <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a9f8:	2302      	movs	r3, #2
    a9fa:	e056      	b.n	aaaa <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a9fc:	f107 0308 	add.w	r3, r7, #8
    aa00:	4618      	mov	r0, r3
    aa02:	4b2e      	ldr	r3, [pc, #184]	; (aabc <_usb_d_dev_ep_trans+0x1b4>)
    aa04:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    aa06:	693b      	ldr	r3, [r7, #16]
    aa08:	7cdb      	ldrb	r3, [r3, #19]
    aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aa0e:	b2db      	uxtb	r3, r3
    aa10:	2b00      	cmp	r3, #0
    aa12:	d006      	beq.n	aa22 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    aa14:	f107 0308 	add.w	r3, r7, #8
    aa18:	4618      	mov	r0, r3
    aa1a:	4b29      	ldr	r3, [pc, #164]	; (aac0 <_usb_d_dev_ep_trans+0x1b8>)
    aa1c:	4798      	blx	r3
		return USB_BUSY;
    aa1e:	2301      	movs	r3, #1
    aa20:	e043      	b.n	aaaa <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    aa22:	693a      	ldr	r2, [r7, #16]
    aa24:	7cd3      	ldrb	r3, [r2, #19]
    aa26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa2a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    aa2c:	f107 0308 	add.w	r3, r7, #8
    aa30:	4618      	mov	r0, r3
    aa32:	4b23      	ldr	r3, [pc, #140]	; (aac0 <_usb_d_dev_ep_trans+0x1b8>)
    aa34:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    aa36:	687b      	ldr	r3, [r7, #4]
    aa38:	681a      	ldr	r2, [r3, #0]
    aa3a:	693b      	ldr	r3, [r7, #16]
    aa3c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    aa3e:	687b      	ldr	r3, [r7, #4]
    aa40:	685a      	ldr	r2, [r3, #4]
    aa42:	693b      	ldr	r3, [r7, #16]
    aa44:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    aa46:	693b      	ldr	r3, [r7, #16]
    aa48:	2200      	movs	r2, #0
    aa4a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    aa4c:	693a      	ldr	r2, [r7, #16]
    aa4e:	7cd3      	ldrb	r3, [r2, #19]
    aa50:	7d79      	ldrb	r1, [r7, #21]
    aa52:	f361 13c7 	bfi	r3, r1, #7, #1
    aa56:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    aa58:	693a      	ldr	r2, [r7, #16]
    aa5a:	7cd3      	ldrb	r3, [r2, #19]
    aa5c:	7df9      	ldrb	r1, [r7, #23]
    aa5e:	f361 1345 	bfi	r3, r1, #5, #1
    aa62:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    aa64:	687b      	ldr	r3, [r7, #4]
    aa66:	7a5b      	ldrb	r3, [r3, #9]
    aa68:	2b00      	cmp	r3, #0
    aa6a:	d007      	beq.n	aa7c <_usb_d_dev_ep_trans+0x174>
    aa6c:	7b7b      	ldrb	r3, [r7, #13]
    aa6e:	f083 0301 	eor.w	r3, r3, #1
    aa72:	b2db      	uxtb	r3, r3
    aa74:	2b00      	cmp	r3, #0
    aa76:	d001      	beq.n	aa7c <_usb_d_dev_ep_trans+0x174>
    aa78:	2301      	movs	r3, #1
    aa7a:	e000      	b.n	aa7e <_usb_d_dev_ep_trans+0x176>
    aa7c:	2300      	movs	r3, #0
    aa7e:	b2db      	uxtb	r3, r3
    aa80:	f003 0301 	and.w	r3, r3, #1
    aa84:	b2d9      	uxtb	r1, r3
    aa86:	693a      	ldr	r2, [r7, #16]
    aa88:	7cd3      	ldrb	r3, [r2, #19]
    aa8a:	f361 1304 	bfi	r3, r1, #4, #1
    aa8e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    aa90:	7d7b      	ldrb	r3, [r7, #21]
    aa92:	2b00      	cmp	r3, #0
    aa94:	d004      	beq.n	aaa0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    aa96:	2100      	movs	r1, #0
    aa98:	6938      	ldr	r0, [r7, #16]
    aa9a:	4b0a      	ldr	r3, [pc, #40]	; (aac4 <_usb_d_dev_ep_trans+0x1bc>)
    aa9c:	4798      	blx	r3
    aa9e:	e003      	b.n	aaa8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    aaa0:	2100      	movs	r1, #0
    aaa2:	6938      	ldr	r0, [r7, #16]
    aaa4:	4b08      	ldr	r3, [pc, #32]	; (aac8 <_usb_d_dev_ep_trans+0x1c0>)
    aaa6:	4798      	blx	r3
	}

	return ERR_NONE;
    aaa8:	2300      	movs	r3, #0
}
    aaaa:	4618      	mov	r0, r3
    aaac:	3718      	adds	r7, #24
    aaae:	46bd      	mov	sp, r7
    aab0:	bd80      	pop	{r7, pc}
    aab2:	bf00      	nop
    aab4:	00009179 	.word	0x00009179
    aab8:	20041fff 	.word	0x20041fff
    aabc:	0000b2d5 	.word	0x0000b2d5
    aac0:	0000b2fb 	.word	0x0000b2fb
    aac4:	00009441 	.word	0x00009441
    aac8:	00009659 	.word	0x00009659

0000aacc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    aacc:	b580      	push	{r7, lr}
    aace:	b084      	sub	sp, #16
    aad0:	af00      	add	r7, sp, #0
    aad2:	4603      	mov	r3, r0
    aad4:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    aad6:	79fb      	ldrb	r3, [r7, #7]
    aad8:	f003 030f 	and.w	r3, r3, #15
    aadc:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    aade:	79fb      	ldrb	r3, [r7, #7]
    aae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aae4:	2b00      	cmp	r3, #0
    aae6:	bf14      	ite	ne
    aae8:	2301      	movne	r3, #1
    aaea:	2300      	moveq	r3, #0
    aaec:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aaee:	7bba      	ldrb	r2, [r7, #14]
    aaf0:	7bfb      	ldrb	r3, [r7, #15]
    aaf2:	4611      	mov	r1, r2
    aaf4:	4618      	mov	r0, r3
    aaf6:	4b08      	ldr	r3, [pc, #32]	; (ab18 <_usb_d_dev_ep_abort+0x4c>)
    aaf8:	4798      	blx	r3
    aafa:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    aafc:	7bfb      	ldrb	r3, [r7, #15]
    aafe:	2b04      	cmp	r3, #4
    ab00:	d806      	bhi.n	ab10 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ab02:	7bbb      	ldrb	r3, [r7, #14]
    ab04:	2202      	movs	r2, #2
    ab06:	4619      	mov	r1, r3
    ab08:	68b8      	ldr	r0, [r7, #8]
    ab0a:	4b04      	ldr	r3, [pc, #16]	; (ab1c <_usb_d_dev_ep_abort+0x50>)
    ab0c:	4798      	blx	r3
    ab0e:	e000      	b.n	ab12 <_usb_d_dev_ep_abort+0x46>
		return;
    ab10:	bf00      	nop
}
    ab12:	3710      	adds	r7, #16
    ab14:	46bd      	mov	sp, r7
    ab16:	bd80      	pop	{r7, pc}
    ab18:	00009179 	.word	0x00009179
    ab1c:	0000a7b1 	.word	0x0000a7b1

0000ab20 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ab20:	b480      	push	{r7}
    ab22:	b085      	sub	sp, #20
    ab24:	af00      	add	r7, sp, #0
    ab26:	4603      	mov	r3, r0
    ab28:	6039      	str	r1, [r7, #0]
    ab2a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ab2c:	683b      	ldr	r3, [r7, #0]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d001      	beq.n	ab36 <_usb_d_dev_register_callback+0x16>
    ab32:	683b      	ldr	r3, [r7, #0]
    ab34:	e000      	b.n	ab38 <_usb_d_dev_register_callback+0x18>
    ab36:	4b0a      	ldr	r3, [pc, #40]	; (ab60 <_usb_d_dev_register_callback+0x40>)
    ab38:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ab3a:	79fb      	ldrb	r3, [r7, #7]
    ab3c:	2b01      	cmp	r3, #1
    ab3e:	d103      	bne.n	ab48 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ab40:	4a08      	ldr	r2, [pc, #32]	; (ab64 <_usb_d_dev_register_callback+0x44>)
    ab42:	68fb      	ldr	r3, [r7, #12]
    ab44:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ab46:	e005      	b.n	ab54 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ab48:	79fb      	ldrb	r3, [r7, #7]
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	d102      	bne.n	ab54 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ab4e:	4a05      	ldr	r2, [pc, #20]	; (ab64 <_usb_d_dev_register_callback+0x44>)
    ab50:	68fb      	ldr	r3, [r7, #12]
    ab52:	6013      	str	r3, [r2, #0]
}
    ab54:	bf00      	nop
    ab56:	3714      	adds	r7, #20
    ab58:	46bd      	mov	sp, r7
    ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5e:	4770      	bx	lr
    ab60:	00008a01 	.word	0x00008a01
    ab64:	2000096c 	.word	0x2000096c

0000ab68 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ab68:	b480      	push	{r7}
    ab6a:	b085      	sub	sp, #20
    ab6c:	af00      	add	r7, sp, #0
    ab6e:	4603      	mov	r3, r0
    ab70:	6039      	str	r1, [r7, #0]
    ab72:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ab74:	683b      	ldr	r3, [r7, #0]
    ab76:	2b00      	cmp	r3, #0
    ab78:	d001      	beq.n	ab7e <_usb_d_dev_register_ep_callback+0x16>
    ab7a:	683b      	ldr	r3, [r7, #0]
    ab7c:	e000      	b.n	ab80 <_usb_d_dev_register_ep_callback+0x18>
    ab7e:	4b0e      	ldr	r3, [pc, #56]	; (abb8 <_usb_d_dev_register_ep_callback+0x50>)
    ab80:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ab82:	79fb      	ldrb	r3, [r7, #7]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d103      	bne.n	ab90 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ab88:	4a0c      	ldr	r2, [pc, #48]	; (abbc <_usb_d_dev_register_ep_callback+0x54>)
    ab8a:	68fb      	ldr	r3, [r7, #12]
    ab8c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ab8e:	e00c      	b.n	abaa <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ab90:	79fb      	ldrb	r3, [r7, #7]
    ab92:	2b01      	cmp	r3, #1
    ab94:	d103      	bne.n	ab9e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ab96:	4a09      	ldr	r2, [pc, #36]	; (abbc <_usb_d_dev_register_ep_callback+0x54>)
    ab98:	68fb      	ldr	r3, [r7, #12]
    ab9a:	60d3      	str	r3, [r2, #12]
}
    ab9c:	e005      	b.n	abaa <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ab9e:	79fb      	ldrb	r3, [r7, #7]
    aba0:	2b02      	cmp	r3, #2
    aba2:	d102      	bne.n	abaa <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    aba4:	4a05      	ldr	r2, [pc, #20]	; (abbc <_usb_d_dev_register_ep_callback+0x54>)
    aba6:	68fb      	ldr	r3, [r7, #12]
    aba8:	6113      	str	r3, [r2, #16]
}
    abaa:	bf00      	nop
    abac:	3714      	adds	r7, #20
    abae:	46bd      	mov	sp, r7
    abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    abb4:	4770      	bx	lr
    abb6:	bf00      	nop
    abb8:	00008a01 	.word	0x00008a01
    abbc:	2000096c 	.word	0x2000096c

0000abc0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    abc0:	b580      	push	{r7, lr}
    abc2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    abc4:	4b01      	ldr	r3, [pc, #4]	; (abcc <USB_0_Handler+0xc>)
    abc6:	4798      	blx	r3
}
    abc8:	bf00      	nop
    abca:	bd80      	pop	{r7, pc}
    abcc:	00009e31 	.word	0x00009e31

0000abd0 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    abd0:	b580      	push	{r7, lr}
    abd2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    abd4:	4b01      	ldr	r3, [pc, #4]	; (abdc <USB_1_Handler+0xc>)
    abd6:	4798      	blx	r3
}
    abd8:	bf00      	nop
    abda:	bd80      	pop	{r7, pc}
    abdc:	00009e31 	.word	0x00009e31

0000abe0 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    abe0:	b580      	push	{r7, lr}
    abe2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    abe4:	4b01      	ldr	r3, [pc, #4]	; (abec <USB_2_Handler+0xc>)
    abe6:	4798      	blx	r3
}
    abe8:	bf00      	nop
    abea:	bd80      	pop	{r7, pc}
    abec:	00009e31 	.word	0x00009e31

0000abf0 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    abf0:	b580      	push	{r7, lr}
    abf2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    abf4:	4b01      	ldr	r3, [pc, #4]	; (abfc <USB_3_Handler+0xc>)
    abf6:	4798      	blx	r3
}
    abf8:	bf00      	nop
    abfa:	bd80      	pop	{r7, pc}
    abfc:	00009e31 	.word	0x00009e31

0000ac00 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ac00:	b480      	push	{r7}
    ac02:	b083      	sub	sp, #12
    ac04:	af00      	add	r7, sp, #0
    ac06:	6078      	str	r0, [r7, #4]
    ac08:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ac0a:	bf00      	nop
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	689a      	ldr	r2, [r3, #8]
    ac10:	683b      	ldr	r3, [r7, #0]
    ac12:	4013      	ands	r3, r2
    ac14:	2b00      	cmp	r3, #0
    ac16:	d1f9      	bne.n	ac0c <hri_wdt_wait_for_sync+0xc>
	};
}
    ac18:	bf00      	nop
    ac1a:	370c      	adds	r7, #12
    ac1c:	46bd      	mov	sp, r7
    ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac22:	4770      	bx	lr

0000ac24 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ac24:	b580      	push	{r7, lr}
    ac26:	b084      	sub	sp, #16
    ac28:	af00      	add	r7, sp, #0
    ac2a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ac2c:	210e      	movs	r1, #14
    ac2e:	6878      	ldr	r0, [r7, #4]
    ac30:	4b0a      	ldr	r3, [pc, #40]	; (ac5c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ac32:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ac34:	687b      	ldr	r3, [r7, #4]
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ac3a:	7bfb      	ldrb	r3, [r7, #15]
    ac3c:	085b      	lsrs	r3, r3, #1
    ac3e:	b2db      	uxtb	r3, r3
    ac40:	f003 0301 	and.w	r3, r3, #1
    ac44:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ac46:	7bfb      	ldrb	r3, [r7, #15]
    ac48:	2b00      	cmp	r3, #0
    ac4a:	bf14      	ite	ne
    ac4c:	2301      	movne	r3, #1
    ac4e:	2300      	moveq	r3, #0
    ac50:	b2db      	uxtb	r3, r3
}
    ac52:	4618      	mov	r0, r3
    ac54:	3710      	adds	r7, #16
    ac56:	46bd      	mov	sp, r7
    ac58:	bd80      	pop	{r7, pc}
    ac5a:	bf00      	nop
    ac5c:	0000ac01 	.word	0x0000ac01

0000ac60 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ac60:	b580      	push	{r7, lr}
    ac62:	b082      	sub	sp, #8
    ac64:	af00      	add	r7, sp, #0
    ac66:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	b2db      	uxtb	r3, r3
    ac6e:	f023 0304 	bic.w	r3, r3, #4
    ac72:	b2da      	uxtb	r2, r3
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ac78:	210e      	movs	r1, #14
    ac7a:	6878      	ldr	r0, [r7, #4]
    ac7c:	4b02      	ldr	r3, [pc, #8]	; (ac88 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ac7e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ac80:	bf00      	nop
    ac82:	3708      	adds	r7, #8
    ac84:	46bd      	mov	sp, r7
    ac86:	bd80      	pop	{r7, pc}
    ac88:	0000ac01 	.word	0x0000ac01

0000ac8c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b084      	sub	sp, #16
    ac90:	af00      	add	r7, sp, #0
    ac92:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ac94:	210e      	movs	r1, #14
    ac96:	6878      	ldr	r0, [r7, #4]
    ac98:	4b08      	ldr	r3, [pc, #32]	; (acbc <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ac9a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ac9c:	687b      	ldr	r3, [r7, #4]
    ac9e:	781b      	ldrb	r3, [r3, #0]
    aca0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    aca2:	7bfb      	ldrb	r3, [r7, #15]
    aca4:	09db      	lsrs	r3, r3, #7
    aca6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aca8:	7bfb      	ldrb	r3, [r7, #15]
    acaa:	2b00      	cmp	r3, #0
    acac:	bf14      	ite	ne
    acae:	2301      	movne	r3, #1
    acb0:	2300      	moveq	r3, #0
    acb2:	b2db      	uxtb	r3, r3
}
    acb4:	4618      	mov	r0, r3
    acb6:	3710      	adds	r7, #16
    acb8:	46bd      	mov	sp, r7
    acba:	bd80      	pop	{r7, pc}
    acbc:	0000ac01 	.word	0x0000ac01

0000acc0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    acc0:	b480      	push	{r7}
    acc2:	b085      	sub	sp, #20
    acc4:	af00      	add	r7, sp, #0
    acc6:	6078      	str	r0, [r7, #4]
    acc8:	460b      	mov	r3, r1
    acca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    accc:	687b      	ldr	r3, [r7, #4]
    acce:	785b      	ldrb	r3, [r3, #1]
    acd0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    acd2:	7bfb      	ldrb	r3, [r7, #15]
    acd4:	f023 030f 	bic.w	r3, r3, #15
    acd8:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    acda:	78fb      	ldrb	r3, [r7, #3]
    acdc:	f003 030f 	and.w	r3, r3, #15
    ace0:	b2da      	uxtb	r2, r3
    ace2:	7bfb      	ldrb	r3, [r7, #15]
    ace4:	4313      	orrs	r3, r2
    ace6:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ace8:	687b      	ldr	r3, [r7, #4]
    acea:	7bfa      	ldrb	r2, [r7, #15]
    acec:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    acee:	bf00      	nop
    acf0:	3714      	adds	r7, #20
    acf2:	46bd      	mov	sp, r7
    acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf8:	4770      	bx	lr
	...

0000acfc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b082      	sub	sp, #8
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	2b00      	cmp	r3, #0
    ad08:	d005      	beq.n	ad16 <_wdt_init+0x1a>
    ad0a:	687b      	ldr	r3, [r7, #4]
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d001      	beq.n	ad16 <_wdt_init+0x1a>
    ad12:	2301      	movs	r3, #1
    ad14:	e000      	b.n	ad18 <_wdt_init+0x1c>
    ad16:	2300      	movs	r3, #0
    ad18:	f003 0301 	and.w	r3, r3, #1
    ad1c:	b2db      	uxtb	r3, r3
    ad1e:	2250      	movs	r2, #80	; 0x50
    ad20:	4913      	ldr	r1, [pc, #76]	; (ad70 <_wdt_init+0x74>)
    ad22:	4618      	mov	r0, r3
    ad24:	4b13      	ldr	r3, [pc, #76]	; (ad74 <_wdt_init+0x78>)
    ad26:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ad28:	687b      	ldr	r3, [r7, #4]
    ad2a:	681b      	ldr	r3, [r3, #0]
    ad2c:	4618      	mov	r0, r3
    ad2e:	4b12      	ldr	r3, [pc, #72]	; (ad78 <_wdt_init+0x7c>)
    ad30:	4798      	blx	r3
    ad32:	4603      	mov	r3, r0
    ad34:	2b00      	cmp	r3, #0
    ad36:	d107      	bne.n	ad48 <_wdt_init+0x4c>
    ad38:	687b      	ldr	r3, [r7, #4]
    ad3a:	681b      	ldr	r3, [r3, #0]
    ad3c:	4618      	mov	r0, r3
    ad3e:	4b0f      	ldr	r3, [pc, #60]	; (ad7c <_wdt_init+0x80>)
    ad40:	4798      	blx	r3
    ad42:	4603      	mov	r3, r0
    ad44:	2b00      	cmp	r3, #0
    ad46:	d002      	beq.n	ad4e <_wdt_init+0x52>
		return ERR_DENIED;
    ad48:	f06f 0310 	mvn.w	r3, #16
    ad4c:	e00b      	b.n	ad66 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ad4e:	687b      	ldr	r3, [r7, #4]
    ad50:	681b      	ldr	r3, [r3, #0]
    ad52:	4618      	mov	r0, r3
    ad54:	4b0a      	ldr	r3, [pc, #40]	; (ad80 <_wdt_init+0x84>)
    ad56:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ad58:	687b      	ldr	r3, [r7, #4]
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	210b      	movs	r1, #11
    ad5e:	4618      	mov	r0, r3
    ad60:	4b08      	ldr	r3, [pc, #32]	; (ad84 <_wdt_init+0x88>)
    ad62:	4798      	blx	r3
	}

	return ERR_NONE;
    ad64:	2300      	movs	r3, #0
}
    ad66:	4618      	mov	r0, r3
    ad68:	3708      	adds	r7, #8
    ad6a:	46bd      	mov	sp, r7
    ad6c:	bd80      	pop	{r7, pc}
    ad6e:	bf00      	nop
    ad70:	0000eff4 	.word	0x0000eff4
    ad74:	00003931 	.word	0x00003931
    ad78:	0000ac8d 	.word	0x0000ac8d
    ad7c:	0000ac25 	.word	0x0000ac25
    ad80:	0000ac61 	.word	0x0000ac61
    ad84:	0000acc1 	.word	0x0000acc1

0000ad88 <hri_port_set_DIR_reg>:
{
    ad88:	b480      	push	{r7}
    ad8a:	b085      	sub	sp, #20
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	60f8      	str	r0, [r7, #12]
    ad90:	460b      	mov	r3, r1
    ad92:	607a      	str	r2, [r7, #4]
    ad94:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ad96:	7afb      	ldrb	r3, [r7, #11]
    ad98:	68fa      	ldr	r2, [r7, #12]
    ad9a:	01db      	lsls	r3, r3, #7
    ad9c:	4413      	add	r3, r2
    ad9e:	3308      	adds	r3, #8
    ada0:	687a      	ldr	r2, [r7, #4]
    ada2:	601a      	str	r2, [r3, #0]
}
    ada4:	bf00      	nop
    ada6:	3714      	adds	r7, #20
    ada8:	46bd      	mov	sp, r7
    adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    adae:	4770      	bx	lr

0000adb0 <hri_port_clear_DIR_reg>:
{
    adb0:	b480      	push	{r7}
    adb2:	b085      	sub	sp, #20
    adb4:	af00      	add	r7, sp, #0
    adb6:	60f8      	str	r0, [r7, #12]
    adb8:	460b      	mov	r3, r1
    adba:	607a      	str	r2, [r7, #4]
    adbc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    adbe:	7afb      	ldrb	r3, [r7, #11]
    adc0:	68fa      	ldr	r2, [r7, #12]
    adc2:	01db      	lsls	r3, r3, #7
    adc4:	4413      	add	r3, r2
    adc6:	3304      	adds	r3, #4
    adc8:	687a      	ldr	r2, [r7, #4]
    adca:	601a      	str	r2, [r3, #0]
}
    adcc:	bf00      	nop
    adce:	3714      	adds	r7, #20
    add0:	46bd      	mov	sp, r7
    add2:	f85d 7b04 	ldr.w	r7, [sp], #4
    add6:	4770      	bx	lr

0000add8 <hri_port_set_OUT_reg>:
{
    add8:	b480      	push	{r7}
    adda:	b085      	sub	sp, #20
    addc:	af00      	add	r7, sp, #0
    adde:	60f8      	str	r0, [r7, #12]
    ade0:	460b      	mov	r3, r1
    ade2:	607a      	str	r2, [r7, #4]
    ade4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ade6:	7afb      	ldrb	r3, [r7, #11]
    ade8:	68fa      	ldr	r2, [r7, #12]
    adea:	01db      	lsls	r3, r3, #7
    adec:	4413      	add	r3, r2
    adee:	3318      	adds	r3, #24
    adf0:	687a      	ldr	r2, [r7, #4]
    adf2:	601a      	str	r2, [r3, #0]
}
    adf4:	bf00      	nop
    adf6:	3714      	adds	r7, #20
    adf8:	46bd      	mov	sp, r7
    adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    adfe:	4770      	bx	lr

0000ae00 <hri_port_clear_OUT_reg>:
{
    ae00:	b480      	push	{r7}
    ae02:	b085      	sub	sp, #20
    ae04:	af00      	add	r7, sp, #0
    ae06:	60f8      	str	r0, [r7, #12]
    ae08:	460b      	mov	r3, r1
    ae0a:	607a      	str	r2, [r7, #4]
    ae0c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ae0e:	7afb      	ldrb	r3, [r7, #11]
    ae10:	68fa      	ldr	r2, [r7, #12]
    ae12:	01db      	lsls	r3, r3, #7
    ae14:	4413      	add	r3, r2
    ae16:	3314      	adds	r3, #20
    ae18:	687a      	ldr	r2, [r7, #4]
    ae1a:	601a      	str	r2, [r3, #0]
}
    ae1c:	bf00      	nop
    ae1e:	3714      	adds	r7, #20
    ae20:	46bd      	mov	sp, r7
    ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae26:	4770      	bx	lr

0000ae28 <hri_port_write_PMUX_PMUXE_bf>:
{
    ae28:	b480      	push	{r7}
    ae2a:	b085      	sub	sp, #20
    ae2c:	af00      	add	r7, sp, #0
    ae2e:	6078      	str	r0, [r7, #4]
    ae30:	4608      	mov	r0, r1
    ae32:	4611      	mov	r1, r2
    ae34:	461a      	mov	r2, r3
    ae36:	4603      	mov	r3, r0
    ae38:	70fb      	strb	r3, [r7, #3]
    ae3a:	460b      	mov	r3, r1
    ae3c:	70bb      	strb	r3, [r7, #2]
    ae3e:	4613      	mov	r3, r2
    ae40:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ae42:	78fa      	ldrb	r2, [r7, #3]
    ae44:	78bb      	ldrb	r3, [r7, #2]
    ae46:	6879      	ldr	r1, [r7, #4]
    ae48:	01d2      	lsls	r2, r2, #7
    ae4a:	440a      	add	r2, r1
    ae4c:	4413      	add	r3, r2
    ae4e:	3330      	adds	r3, #48	; 0x30
    ae50:	781b      	ldrb	r3, [r3, #0]
    ae52:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ae54:	7bfb      	ldrb	r3, [r7, #15]
    ae56:	f023 030f 	bic.w	r3, r3, #15
    ae5a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ae5c:	787b      	ldrb	r3, [r7, #1]
    ae5e:	f003 030f 	and.w	r3, r3, #15
    ae62:	b2da      	uxtb	r2, r3
    ae64:	7bfb      	ldrb	r3, [r7, #15]
    ae66:	4313      	orrs	r3, r2
    ae68:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ae6a:	78fa      	ldrb	r2, [r7, #3]
    ae6c:	78bb      	ldrb	r3, [r7, #2]
    ae6e:	6879      	ldr	r1, [r7, #4]
    ae70:	01d2      	lsls	r2, r2, #7
    ae72:	440a      	add	r2, r1
    ae74:	4413      	add	r3, r2
    ae76:	3330      	adds	r3, #48	; 0x30
    ae78:	7bfa      	ldrb	r2, [r7, #15]
    ae7a:	701a      	strb	r2, [r3, #0]
}
    ae7c:	bf00      	nop
    ae7e:	3714      	adds	r7, #20
    ae80:	46bd      	mov	sp, r7
    ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae86:	4770      	bx	lr

0000ae88 <hri_port_write_PMUX_PMUXO_bf>:
{
    ae88:	b480      	push	{r7}
    ae8a:	b085      	sub	sp, #20
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	6078      	str	r0, [r7, #4]
    ae90:	4608      	mov	r0, r1
    ae92:	4611      	mov	r1, r2
    ae94:	461a      	mov	r2, r3
    ae96:	4603      	mov	r3, r0
    ae98:	70fb      	strb	r3, [r7, #3]
    ae9a:	460b      	mov	r3, r1
    ae9c:	70bb      	strb	r3, [r7, #2]
    ae9e:	4613      	mov	r3, r2
    aea0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    aea2:	78fa      	ldrb	r2, [r7, #3]
    aea4:	78bb      	ldrb	r3, [r7, #2]
    aea6:	6879      	ldr	r1, [r7, #4]
    aea8:	01d2      	lsls	r2, r2, #7
    aeaa:	440a      	add	r2, r1
    aeac:	4413      	add	r3, r2
    aeae:	3330      	adds	r3, #48	; 0x30
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    aeb4:	7bfb      	ldrb	r3, [r7, #15]
    aeb6:	f003 030f 	and.w	r3, r3, #15
    aeba:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    aebc:	787b      	ldrb	r3, [r7, #1]
    aebe:	011b      	lsls	r3, r3, #4
    aec0:	b2da      	uxtb	r2, r3
    aec2:	7bfb      	ldrb	r3, [r7, #15]
    aec4:	4313      	orrs	r3, r2
    aec6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    aec8:	78fa      	ldrb	r2, [r7, #3]
    aeca:	78bb      	ldrb	r3, [r7, #2]
    aecc:	6879      	ldr	r1, [r7, #4]
    aece:	01d2      	lsls	r2, r2, #7
    aed0:	440a      	add	r2, r1
    aed2:	4413      	add	r3, r2
    aed4:	3330      	adds	r3, #48	; 0x30
    aed6:	7bfa      	ldrb	r2, [r7, #15]
    aed8:	701a      	strb	r2, [r3, #0]
}
    aeda:	bf00      	nop
    aedc:	3714      	adds	r7, #20
    aede:	46bd      	mov	sp, r7
    aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aee4:	4770      	bx	lr

0000aee6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    aee6:	b480      	push	{r7}
    aee8:	b085      	sub	sp, #20
    aeea:	af00      	add	r7, sp, #0
    aeec:	6078      	str	r0, [r7, #4]
    aeee:	4608      	mov	r0, r1
    aef0:	4611      	mov	r1, r2
    aef2:	461a      	mov	r2, r3
    aef4:	4603      	mov	r3, r0
    aef6:	70fb      	strb	r3, [r7, #3]
    aef8:	460b      	mov	r3, r1
    aefa:	70bb      	strb	r3, [r7, #2]
    aefc:	4613      	mov	r3, r2
    aefe:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    af00:	78fa      	ldrb	r2, [r7, #3]
    af02:	78bb      	ldrb	r3, [r7, #2]
    af04:	6879      	ldr	r1, [r7, #4]
    af06:	01d2      	lsls	r2, r2, #7
    af08:	440a      	add	r2, r1
    af0a:	4413      	add	r3, r2
    af0c:	3340      	adds	r3, #64	; 0x40
    af0e:	781b      	ldrb	r3, [r3, #0]
    af10:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    af12:	7bfb      	ldrb	r3, [r7, #15]
    af14:	f023 0301 	bic.w	r3, r3, #1
    af18:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    af1a:	787a      	ldrb	r2, [r7, #1]
    af1c:	7bfb      	ldrb	r3, [r7, #15]
    af1e:	4313      	orrs	r3, r2
    af20:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    af22:	78fa      	ldrb	r2, [r7, #3]
    af24:	78bb      	ldrb	r3, [r7, #2]
    af26:	6879      	ldr	r1, [r7, #4]
    af28:	01d2      	lsls	r2, r2, #7
    af2a:	440a      	add	r2, r1
    af2c:	4413      	add	r3, r2
    af2e:	3340      	adds	r3, #64	; 0x40
    af30:	7bfa      	ldrb	r2, [r7, #15]
    af32:	701a      	strb	r2, [r3, #0]
}
    af34:	bf00      	nop
    af36:	3714      	adds	r7, #20
    af38:	46bd      	mov	sp, r7
    af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af3e:	4770      	bx	lr

0000af40 <hri_port_write_WRCONFIG_reg>:
{
    af40:	b480      	push	{r7}
    af42:	b085      	sub	sp, #20
    af44:	af00      	add	r7, sp, #0
    af46:	60f8      	str	r0, [r7, #12]
    af48:	460b      	mov	r3, r1
    af4a:	607a      	str	r2, [r7, #4]
    af4c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    af4e:	7afb      	ldrb	r3, [r7, #11]
    af50:	68fa      	ldr	r2, [r7, #12]
    af52:	01db      	lsls	r3, r3, #7
    af54:	4413      	add	r3, r2
    af56:	3328      	adds	r3, #40	; 0x28
    af58:	687a      	ldr	r2, [r7, #4]
    af5a:	601a      	str	r2, [r3, #0]
}
    af5c:	bf00      	nop
    af5e:	3714      	adds	r7, #20
    af60:	46bd      	mov	sp, r7
    af62:	f85d 7b04 	ldr.w	r7, [sp], #4
    af66:	4770      	bx	lr

0000af68 <_gpio_set_direction>:
{
    af68:	b580      	push	{r7, lr}
    af6a:	b082      	sub	sp, #8
    af6c:	af00      	add	r7, sp, #0
    af6e:	4603      	mov	r3, r0
    af70:	6039      	str	r1, [r7, #0]
    af72:	71fb      	strb	r3, [r7, #7]
    af74:	4613      	mov	r3, r2
    af76:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    af78:	79bb      	ldrb	r3, [r7, #6]
    af7a:	2b01      	cmp	r3, #1
    af7c:	d01c      	beq.n	afb8 <_gpio_set_direction+0x50>
    af7e:	2b02      	cmp	r3, #2
    af80:	d037      	beq.n	aff2 <_gpio_set_direction+0x8a>
    af82:	2b00      	cmp	r3, #0
    af84:	d14e      	bne.n	b024 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    af86:	79fb      	ldrb	r3, [r7, #7]
    af88:	683a      	ldr	r2, [r7, #0]
    af8a:	4619      	mov	r1, r3
    af8c:	482a      	ldr	r0, [pc, #168]	; (b038 <_gpio_set_direction+0xd0>)
    af8e:	4b2b      	ldr	r3, [pc, #172]	; (b03c <_gpio_set_direction+0xd4>)
    af90:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    af92:	683b      	ldr	r3, [r7, #0]
    af94:	b29b      	uxth	r3, r3
    af96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    af9a:	79fb      	ldrb	r3, [r7, #7]
    af9c:	4619      	mov	r1, r3
    af9e:	4826      	ldr	r0, [pc, #152]	; (b038 <_gpio_set_direction+0xd0>)
    afa0:	4b27      	ldr	r3, [pc, #156]	; (b040 <_gpio_set_direction+0xd8>)
    afa2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    afa4:	683b      	ldr	r3, [r7, #0]
    afa6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    afa8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    afac:	79fb      	ldrb	r3, [r7, #7]
    afae:	4619      	mov	r1, r3
    afb0:	4821      	ldr	r0, [pc, #132]	; (b038 <_gpio_set_direction+0xd0>)
    afb2:	4b23      	ldr	r3, [pc, #140]	; (b040 <_gpio_set_direction+0xd8>)
    afb4:	4798      	blx	r3
		break;
    afb6:	e03a      	b.n	b02e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    afb8:	79fb      	ldrb	r3, [r7, #7]
    afba:	683a      	ldr	r2, [r7, #0]
    afbc:	4619      	mov	r1, r3
    afbe:	481e      	ldr	r0, [pc, #120]	; (b038 <_gpio_set_direction+0xd0>)
    afc0:	4b1e      	ldr	r3, [pc, #120]	; (b03c <_gpio_set_direction+0xd4>)
    afc2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    afc4:	683b      	ldr	r3, [r7, #0]
    afc6:	b29b      	uxth	r3, r3
    afc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    afcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    afd0:	79f9      	ldrb	r1, [r7, #7]
    afd2:	461a      	mov	r2, r3
    afd4:	4818      	ldr	r0, [pc, #96]	; (b038 <_gpio_set_direction+0xd0>)
    afd6:	4b1a      	ldr	r3, [pc, #104]	; (b040 <_gpio_set_direction+0xd8>)
    afd8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    afda:	683b      	ldr	r3, [r7, #0]
    afdc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    afde:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    afe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    afe6:	79f9      	ldrb	r1, [r7, #7]
    afe8:	461a      	mov	r2, r3
    afea:	4813      	ldr	r0, [pc, #76]	; (b038 <_gpio_set_direction+0xd0>)
    afec:	4b14      	ldr	r3, [pc, #80]	; (b040 <_gpio_set_direction+0xd8>)
    afee:	4798      	blx	r3
		break;
    aff0:	e01d      	b.n	b02e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    aff2:	79fb      	ldrb	r3, [r7, #7]
    aff4:	683a      	ldr	r2, [r7, #0]
    aff6:	4619      	mov	r1, r3
    aff8:	480f      	ldr	r0, [pc, #60]	; (b038 <_gpio_set_direction+0xd0>)
    affa:	4b12      	ldr	r3, [pc, #72]	; (b044 <_gpio_set_direction+0xdc>)
    affc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    affe:	683b      	ldr	r3, [r7, #0]
    b000:	b29b      	uxth	r3, r3
    b002:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b006:	79fb      	ldrb	r3, [r7, #7]
    b008:	4619      	mov	r1, r3
    b00a:	480b      	ldr	r0, [pc, #44]	; (b038 <_gpio_set_direction+0xd0>)
    b00c:	4b0c      	ldr	r3, [pc, #48]	; (b040 <_gpio_set_direction+0xd8>)
    b00e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b010:	683b      	ldr	r3, [r7, #0]
    b012:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b014:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b018:	79fb      	ldrb	r3, [r7, #7]
    b01a:	4619      	mov	r1, r3
    b01c:	4806      	ldr	r0, [pc, #24]	; (b038 <_gpio_set_direction+0xd0>)
    b01e:	4b08      	ldr	r3, [pc, #32]	; (b040 <_gpio_set_direction+0xd8>)
    b020:	4798      	blx	r3
		break;
    b022:	e004      	b.n	b02e <_gpio_set_direction+0xc6>
		ASSERT(false);
    b024:	2246      	movs	r2, #70	; 0x46
    b026:	4908      	ldr	r1, [pc, #32]	; (b048 <_gpio_set_direction+0xe0>)
    b028:	2000      	movs	r0, #0
    b02a:	4b08      	ldr	r3, [pc, #32]	; (b04c <_gpio_set_direction+0xe4>)
    b02c:	4798      	blx	r3
}
    b02e:	bf00      	nop
    b030:	3708      	adds	r7, #8
    b032:	46bd      	mov	sp, r7
    b034:	bd80      	pop	{r7, pc}
    b036:	bf00      	nop
    b038:	41008000 	.word	0x41008000
    b03c:	0000adb1 	.word	0x0000adb1
    b040:	0000af41 	.word	0x0000af41
    b044:	0000ad89 	.word	0x0000ad89
    b048:	0000f00c 	.word	0x0000f00c
    b04c:	00003931 	.word	0x00003931

0000b050 <_gpio_set_level>:
{
    b050:	b580      	push	{r7, lr}
    b052:	b082      	sub	sp, #8
    b054:	af00      	add	r7, sp, #0
    b056:	4603      	mov	r3, r0
    b058:	6039      	str	r1, [r7, #0]
    b05a:	71fb      	strb	r3, [r7, #7]
    b05c:	4613      	mov	r3, r2
    b05e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b060:	79bb      	ldrb	r3, [r7, #6]
    b062:	2b00      	cmp	r3, #0
    b064:	d006      	beq.n	b074 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b066:	79fb      	ldrb	r3, [r7, #7]
    b068:	683a      	ldr	r2, [r7, #0]
    b06a:	4619      	mov	r1, r3
    b06c:	4806      	ldr	r0, [pc, #24]	; (b088 <_gpio_set_level+0x38>)
    b06e:	4b07      	ldr	r3, [pc, #28]	; (b08c <_gpio_set_level+0x3c>)
    b070:	4798      	blx	r3
}
    b072:	e005      	b.n	b080 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b074:	79fb      	ldrb	r3, [r7, #7]
    b076:	683a      	ldr	r2, [r7, #0]
    b078:	4619      	mov	r1, r3
    b07a:	4803      	ldr	r0, [pc, #12]	; (b088 <_gpio_set_level+0x38>)
    b07c:	4b04      	ldr	r3, [pc, #16]	; (b090 <_gpio_set_level+0x40>)
    b07e:	4798      	blx	r3
}
    b080:	bf00      	nop
    b082:	3708      	adds	r7, #8
    b084:	46bd      	mov	sp, r7
    b086:	bd80      	pop	{r7, pc}
    b088:	41008000 	.word	0x41008000
    b08c:	0000add9 	.word	0x0000add9
    b090:	0000ae01 	.word	0x0000ae01

0000b094 <_gpio_set_pin_function>:
{
    b094:	b590      	push	{r4, r7, lr}
    b096:	b085      	sub	sp, #20
    b098:	af00      	add	r7, sp, #0
    b09a:	6078      	str	r0, [r7, #4]
    b09c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b09e:	687b      	ldr	r3, [r7, #4]
    b0a0:	095b      	lsrs	r3, r3, #5
    b0a2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	b2db      	uxtb	r3, r3
    b0a8:	f003 031f 	and.w	r3, r3, #31
    b0ac:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b0ae:	683b      	ldr	r3, [r7, #0]
    b0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    b0b4:	d106      	bne.n	b0c4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b0b6:	7bba      	ldrb	r2, [r7, #14]
    b0b8:	7bf9      	ldrb	r1, [r7, #15]
    b0ba:	2300      	movs	r3, #0
    b0bc:	4812      	ldr	r0, [pc, #72]	; (b108 <_gpio_set_pin_function+0x74>)
    b0be:	4c13      	ldr	r4, [pc, #76]	; (b10c <_gpio_set_pin_function+0x78>)
    b0c0:	47a0      	blx	r4
}
    b0c2:	e01d      	b.n	b100 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b0c4:	7bba      	ldrb	r2, [r7, #14]
    b0c6:	7bf9      	ldrb	r1, [r7, #15]
    b0c8:	2301      	movs	r3, #1
    b0ca:	480f      	ldr	r0, [pc, #60]	; (b108 <_gpio_set_pin_function+0x74>)
    b0cc:	4c0f      	ldr	r4, [pc, #60]	; (b10c <_gpio_set_pin_function+0x78>)
    b0ce:	47a0      	blx	r4
		if (pin & 1) {
    b0d0:	7bbb      	ldrb	r3, [r7, #14]
    b0d2:	f003 0301 	and.w	r3, r3, #1
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d009      	beq.n	b0ee <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b0da:	7bbb      	ldrb	r3, [r7, #14]
    b0dc:	085b      	lsrs	r3, r3, #1
    b0de:	b2da      	uxtb	r2, r3
    b0e0:	683b      	ldr	r3, [r7, #0]
    b0e2:	b2db      	uxtb	r3, r3
    b0e4:	7bf9      	ldrb	r1, [r7, #15]
    b0e6:	4808      	ldr	r0, [pc, #32]	; (b108 <_gpio_set_pin_function+0x74>)
    b0e8:	4c09      	ldr	r4, [pc, #36]	; (b110 <_gpio_set_pin_function+0x7c>)
    b0ea:	47a0      	blx	r4
}
    b0ec:	e008      	b.n	b100 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b0ee:	7bbb      	ldrb	r3, [r7, #14]
    b0f0:	085b      	lsrs	r3, r3, #1
    b0f2:	b2da      	uxtb	r2, r3
    b0f4:	683b      	ldr	r3, [r7, #0]
    b0f6:	b2db      	uxtb	r3, r3
    b0f8:	7bf9      	ldrb	r1, [r7, #15]
    b0fa:	4803      	ldr	r0, [pc, #12]	; (b108 <_gpio_set_pin_function+0x74>)
    b0fc:	4c05      	ldr	r4, [pc, #20]	; (b114 <_gpio_set_pin_function+0x80>)
    b0fe:	47a0      	blx	r4
}
    b100:	bf00      	nop
    b102:	3714      	adds	r7, #20
    b104:	46bd      	mov	sp, r7
    b106:	bd90      	pop	{r4, r7, pc}
    b108:	41008000 	.word	0x41008000
    b10c:	0000aee7 	.word	0x0000aee7
    b110:	0000ae89 	.word	0x0000ae89
    b114:	0000ae29 	.word	0x0000ae29

0000b118 <gpio_set_pin_function>:
{
    b118:	b580      	push	{r7, lr}
    b11a:	b082      	sub	sp, #8
    b11c:	af00      	add	r7, sp, #0
    b11e:	6078      	str	r0, [r7, #4]
    b120:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b122:	6839      	ldr	r1, [r7, #0]
    b124:	6878      	ldr	r0, [r7, #4]
    b126:	4b03      	ldr	r3, [pc, #12]	; (b134 <gpio_set_pin_function+0x1c>)
    b128:	4798      	blx	r3
}
    b12a:	bf00      	nop
    b12c:	3708      	adds	r7, #8
    b12e:	46bd      	mov	sp, r7
    b130:	bd80      	pop	{r7, pc}
    b132:	bf00      	nop
    b134:	0000b095 	.word	0x0000b095

0000b138 <gpio_set_pin_direction>:
{
    b138:	b580      	push	{r7, lr}
    b13a:	b082      	sub	sp, #8
    b13c:	af00      	add	r7, sp, #0
    b13e:	4603      	mov	r3, r0
    b140:	460a      	mov	r2, r1
    b142:	71fb      	strb	r3, [r7, #7]
    b144:	4613      	mov	r3, r2
    b146:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b148:	79fb      	ldrb	r3, [r7, #7]
    b14a:	095b      	lsrs	r3, r3, #5
    b14c:	b2d8      	uxtb	r0, r3
    b14e:	79fb      	ldrb	r3, [r7, #7]
    b150:	f003 031f 	and.w	r3, r3, #31
    b154:	2201      	movs	r2, #1
    b156:	fa02 f303 	lsl.w	r3, r2, r3
    b15a:	79ba      	ldrb	r2, [r7, #6]
    b15c:	4619      	mov	r1, r3
    b15e:	4b03      	ldr	r3, [pc, #12]	; (b16c <gpio_set_pin_direction+0x34>)
    b160:	4798      	blx	r3
}
    b162:	bf00      	nop
    b164:	3708      	adds	r7, #8
    b166:	46bd      	mov	sp, r7
    b168:	bd80      	pop	{r7, pc}
    b16a:	bf00      	nop
    b16c:	0000af69 	.word	0x0000af69

0000b170 <gpio_set_pin_level>:
{
    b170:	b580      	push	{r7, lr}
    b172:	b082      	sub	sp, #8
    b174:	af00      	add	r7, sp, #0
    b176:	4603      	mov	r3, r0
    b178:	460a      	mov	r2, r1
    b17a:	71fb      	strb	r3, [r7, #7]
    b17c:	4613      	mov	r3, r2
    b17e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b180:	79fb      	ldrb	r3, [r7, #7]
    b182:	095b      	lsrs	r3, r3, #5
    b184:	b2d8      	uxtb	r0, r3
    b186:	79fb      	ldrb	r3, [r7, #7]
    b188:	f003 031f 	and.w	r3, r3, #31
    b18c:	2201      	movs	r2, #1
    b18e:	fa02 f303 	lsl.w	r3, r2, r3
    b192:	79ba      	ldrb	r2, [r7, #6]
    b194:	4619      	mov	r1, r3
    b196:	4b03      	ldr	r3, [pc, #12]	; (b1a4 <gpio_set_pin_level+0x34>)
    b198:	4798      	blx	r3
}
    b19a:	bf00      	nop
    b19c:	3708      	adds	r7, #8
    b19e:	46bd      	mov	sp, r7
    b1a0:	bd80      	pop	{r7, pc}
    b1a2:	bf00      	nop
    b1a4:	0000b051 	.word	0x0000b051

0000b1a8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b1a8:	b580      	push	{r7, lr}
    b1aa:	b082      	sub	sp, #8
    b1ac:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b1ae:	2100      	movs	r1, #0
    b1b0:	2008      	movs	r0, #8
    b1b2:	4b24      	ldr	r3, [pc, #144]	; (b244 <QSPI_N25Q256_exit_xip+0x9c>)
    b1b4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b1b6:	2100      	movs	r1, #0
    b1b8:	202b      	movs	r0, #43	; 0x2b
    b1ba:	4b22      	ldr	r3, [pc, #136]	; (b244 <QSPI_N25Q256_exit_xip+0x9c>)
    b1bc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b1be:	2100      	movs	r1, #0
    b1c0:	202a      	movs	r0, #42	; 0x2a
    b1c2:	4b20      	ldr	r3, [pc, #128]	; (b244 <QSPI_N25Q256_exit_xip+0x9c>)
    b1c4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b1c6:	2102      	movs	r1, #2
    b1c8:	2008      	movs	r0, #8
    b1ca:	4b1f      	ldr	r3, [pc, #124]	; (b248 <QSPI_N25Q256_exit_xip+0xa0>)
    b1cc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b1ce:	2102      	movs	r1, #2
    b1d0:	202b      	movs	r0, #43	; 0x2b
    b1d2:	4b1d      	ldr	r3, [pc, #116]	; (b248 <QSPI_N25Q256_exit_xip+0xa0>)
    b1d4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b1d6:	2102      	movs	r1, #2
    b1d8:	202a      	movs	r0, #42	; 0x2a
    b1da:	4b1b      	ldr	r3, [pc, #108]	; (b248 <QSPI_N25Q256_exit_xip+0xa0>)
    b1dc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b1de:	2101      	movs	r1, #1
    b1e0:	2008      	movs	r0, #8
    b1e2:	4b1a      	ldr	r3, [pc, #104]	; (b24c <QSPI_N25Q256_exit_xip+0xa4>)
    b1e4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b1e6:	2100      	movs	r1, #0
    b1e8:	202b      	movs	r0, #43	; 0x2b
    b1ea:	4b18      	ldr	r3, [pc, #96]	; (b24c <QSPI_N25Q256_exit_xip+0xa4>)
    b1ec:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b1ee:	2100      	movs	r1, #0
    b1f0:	202a      	movs	r0, #42	; 0x2a
    b1f2:	4b16      	ldr	r3, [pc, #88]	; (b24c <QSPI_N25Q256_exit_xip+0xa4>)
    b1f4:	4798      	blx	r3

	delay_us(1);
    b1f6:	2001      	movs	r0, #1
    b1f8:	4b15      	ldr	r3, [pc, #84]	; (b250 <QSPI_N25Q256_exit_xip+0xa8>)
    b1fa:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b1fc:	2300      	movs	r3, #0
    b1fe:	607b      	str	r3, [r7, #4]
    b200:	e010      	b.n	b224 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b202:	2101      	movs	r1, #1
    b204:	202a      	movs	r0, #42	; 0x2a
    b206:	4b11      	ldr	r3, [pc, #68]	; (b24c <QSPI_N25Q256_exit_xip+0xa4>)
    b208:	4798      	blx	r3
		delay_us(1);
    b20a:	2001      	movs	r0, #1
    b20c:	4b10      	ldr	r3, [pc, #64]	; (b250 <QSPI_N25Q256_exit_xip+0xa8>)
    b20e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b210:	2100      	movs	r1, #0
    b212:	202a      	movs	r0, #42	; 0x2a
    b214:	4b0d      	ldr	r3, [pc, #52]	; (b24c <QSPI_N25Q256_exit_xip+0xa4>)
    b216:	4798      	blx	r3
		delay_us(1);
    b218:	2001      	movs	r0, #1
    b21a:	4b0d      	ldr	r3, [pc, #52]	; (b250 <QSPI_N25Q256_exit_xip+0xa8>)
    b21c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b21e:	687b      	ldr	r3, [r7, #4]
    b220:	3301      	adds	r3, #1
    b222:	607b      	str	r3, [r7, #4]
    b224:	687b      	ldr	r3, [r7, #4]
    b226:	2b06      	cmp	r3, #6
    b228:	ddeb      	ble.n	b202 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b22a:	2101      	movs	r1, #1
    b22c:	202b      	movs	r0, #43	; 0x2b
    b22e:	4b07      	ldr	r3, [pc, #28]	; (b24c <QSPI_N25Q256_exit_xip+0xa4>)
    b230:	4798      	blx	r3
	delay_us(1);
    b232:	2001      	movs	r0, #1
    b234:	4b06      	ldr	r3, [pc, #24]	; (b250 <QSPI_N25Q256_exit_xip+0xa8>)
    b236:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b238:	4b06      	ldr	r3, [pc, #24]	; (b254 <QSPI_N25Q256_exit_xip+0xac>)
    b23a:	4798      	blx	r3
}
    b23c:	bf00      	nop
    b23e:	3708      	adds	r7, #8
    b240:	46bd      	mov	sp, r7
    b242:	bd80      	pop	{r7, pc}
    b244:	0000b119 	.word	0x0000b119
    b248:	0000b139 	.word	0x0000b139
    b24c:	0000b171 	.word	0x0000b171
    b250:	00001fa1 	.word	0x00001fa1
    b254:	000013b5 	.word	0x000013b5

0000b258 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b258:	b598      	push	{r3, r4, r7, lr}
    b25a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b25c:	4806      	ldr	r0, [pc, #24]	; (b278 <spi_nor_flash_init+0x20>)
    b25e:	4b07      	ldr	r3, [pc, #28]	; (b27c <spi_nor_flash_init+0x24>)
    b260:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b262:	2300      	movs	r3, #0
    b264:	4a06      	ldr	r2, [pc, #24]	; (b280 <spi_nor_flash_init+0x28>)
    b266:	4904      	ldr	r1, [pc, #16]	; (b278 <spi_nor_flash_init+0x20>)
    b268:	4806      	ldr	r0, [pc, #24]	; (b284 <spi_nor_flash_init+0x2c>)
    b26a:	4c07      	ldr	r4, [pc, #28]	; (b288 <spi_nor_flash_init+0x30>)
    b26c:	47a0      	blx	r4
    b26e:	4602      	mov	r2, r0
    b270:	4b06      	ldr	r3, [pc, #24]	; (b28c <spi_nor_flash_init+0x34>)
    b272:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b274:	bf00      	nop
    b276:	bd98      	pop	{r3, r4, r7, pc}
    b278:	20000e98 	.word	0x20000e98
    b27c:	00002519 	.word	0x00002519
    b280:	0000b1a9 	.word	0x0000b1a9
    b284:	20000ad4 	.word	0x20000ad4
    b288:	0000b6c5 	.word	0x0000b6c5
    b28c:	200010a4 	.word	0x200010a4

0000b290 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b290:	b580      	push	{r7, lr}
    b292:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b294:	4805      	ldr	r0, [pc, #20]	; (b2ac <cdc_device_acm_init+0x1c>)
    b296:	4b06      	ldr	r3, [pc, #24]	; (b2b0 <cdc_device_acm_init+0x20>)
    b298:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b29a:	4b06      	ldr	r3, [pc, #24]	; (b2b4 <cdc_device_acm_init+0x24>)
    b29c:	4798      	blx	r3

	usbdc_start(single_desc);
    b29e:	4806      	ldr	r0, [pc, #24]	; (b2b8 <cdc_device_acm_init+0x28>)
    b2a0:	4b06      	ldr	r3, [pc, #24]	; (b2bc <cdc_device_acm_init+0x2c>)
    b2a2:	4798      	blx	r3
	usbdc_attach();
    b2a4:	4b06      	ldr	r3, [pc, #24]	; (b2c0 <cdc_device_acm_init+0x30>)
    b2a6:	4798      	blx	r3
}
    b2a8:	bf00      	nop
    b2aa:	bd80      	pop	{r7, pc}
    b2ac:	20000b24 	.word	0x20000b24
    b2b0:	0000cded 	.word	0x0000cded
    b2b4:	0000c065 	.word	0x0000c065
    b2b8:	2000012c 	.word	0x2000012c
    b2bc:	0000ce89 	.word	0x0000ce89
    b2c0:	0000ced9 	.word	0x0000ced9

0000b2c4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b2c4:	b580      	push	{r7, lr}
    b2c6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b2c8:	4b01      	ldr	r3, [pc, #4]	; (b2d0 <usb_init+0xc>)
    b2ca:	4798      	blx	r3
}
    b2cc:	bf00      	nop
    b2ce:	bd80      	pop	{r7, pc}
    b2d0:	0000b291 	.word	0x0000b291

0000b2d4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b2d4:	b480      	push	{r7}
    b2d6:	b085      	sub	sp, #20
    b2d8:	af00      	add	r7, sp, #0
    b2da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b2dc:	f3ef 8310 	mrs	r3, PRIMASK
    b2e0:	60fb      	str	r3, [r7, #12]
  return(result);
    b2e2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b2e8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b2ea:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b2ee:	bf00      	nop
    b2f0:	3714      	adds	r7, #20
    b2f2:	46bd      	mov	sp, r7
    b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2f8:	4770      	bx	lr

0000b2fa <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b2fa:	b480      	push	{r7}
    b2fc:	b085      	sub	sp, #20
    b2fe:	af00      	add	r7, sp, #0
    b300:	6078      	str	r0, [r7, #4]
    b302:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	681b      	ldr	r3, [r3, #0]
    b30a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b30c:	68fb      	ldr	r3, [r7, #12]
    b30e:	f383 8810 	msr	PRIMASK, r3
}
    b312:	bf00      	nop
    b314:	3714      	adds	r7, #20
    b316:	46bd      	mov	sp, r7
    b318:	f85d 7b04 	ldr.w	r7, [sp], #4
    b31c:	4770      	bx	lr
	...

0000b320 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b320:	b580      	push	{r7, lr}
    b322:	b08c      	sub	sp, #48	; 0x30
    b324:	af00      	add	r7, sp, #0
    b326:	6078      	str	r0, [r7, #4]
    b328:	460b      	mov	r3, r1
    b32a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b330:	687b      	ldr	r3, [r7, #4]
    b332:	681b      	ldr	r3, [r3, #0]
    b334:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b336:	f107 030c 	add.w	r3, r7, #12
    b33a:	2200      	movs	r2, #0
    b33c:	601a      	str	r2, [r3, #0]
    b33e:	605a      	str	r2, [r3, #4]
    b340:	609a      	str	r2, [r3, #8]
    b342:	60da      	str	r2, [r3, #12]
    b344:	611a      	str	r2, [r3, #16]
    b346:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b34a:	7b1b      	ldrb	r3, [r3, #12]
    b34c:	2b00      	cmp	r3, #0
    b34e:	d001      	beq.n	b354 <n25q256a_xip_confirm+0x34>
    b350:	2206      	movs	r2, #6
    b352:	e000      	b.n	b356 <n25q256a_xip_confirm+0x36>
    b354:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b356:	7b3b      	ldrb	r3, [r7, #12]
    b358:	f362 0302 	bfi	r3, r2, #0, #3
    b35c:	733b      	strb	r3, [r7, #12]
    b35e:	7b3b      	ldrb	r3, [r7, #12]
    b360:	f043 0310 	orr.w	r3, r3, #16
    b364:	733b      	strb	r3, [r7, #12]
    b366:	7b3b      	ldrb	r3, [r7, #12]
    b368:	f043 0320 	orr.w	r3, r3, #32
    b36c:	733b      	strb	r3, [r7, #12]
    b36e:	7b3b      	ldrb	r3, [r7, #12]
    b370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b374:	733b      	strb	r3, [r7, #12]
    b376:	7b3b      	ldrb	r3, [r7, #12]
    b378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b37c:	733b      	strb	r3, [r7, #12]
    b37e:	7b7b      	ldrb	r3, [r7, #13]
    b380:	f043 0303 	orr.w	r3, r3, #3
    b384:	737b      	strb	r3, [r7, #13]
    b386:	7b7b      	ldrb	r3, [r7, #13]
    b388:	2201      	movs	r2, #1
    b38a:	f362 1305 	bfi	r3, r2, #4, #2
    b38e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b392:	7b1b      	ldrb	r3, [r3, #12]
    b394:	2b00      	cmp	r3, #0
    b396:	d001      	beq.n	b39c <n25q256a_xip_confirm+0x7c>
    b398:	2208      	movs	r2, #8
    b39a:	e000      	b.n	b39e <n25q256a_xip_confirm+0x7e>
    b39c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b39e:	7bbb      	ldrb	r3, [r7, #14]
    b3a0:	f362 0304 	bfi	r3, r2, #0, #5
    b3a4:	73bb      	strb	r3, [r7, #14]
    b3a6:	230b      	movs	r3, #11
    b3a8:	743b      	strb	r3, [r7, #16]
    b3aa:	78fb      	ldrb	r3, [r7, #3]
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	d001      	beq.n	b3b4 <n25q256a_xip_confirm+0x94>
    b3b0:	2300      	movs	r3, #0
    b3b2:	e000      	b.n	b3b6 <n25q256a_xip_confirm+0x96>
    b3b4:	23ff      	movs	r3, #255	; 0xff
    b3b6:	747b      	strb	r3, [r7, #17]
    b3b8:	2301      	movs	r3, #1
    b3ba:	61bb      	str	r3, [r7, #24]
    b3bc:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b3c0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b3c2:	f107 030c 	add.w	r3, r7, #12
    b3c6:	4619      	mov	r1, r3
    b3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b3ca:	4b07      	ldr	r3, [pc, #28]	; (b3e8 <n25q256a_xip_confirm+0xc8>)
    b3cc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b3ce:	78fb      	ldrb	r3, [r7, #3]
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d001      	beq.n	b3d8 <n25q256a_xip_confirm+0xb8>
    b3d4:	2202      	movs	r2, #2
    b3d6:	e000      	b.n	b3da <n25q256a_xip_confirm+0xba>
    b3d8:	2201      	movs	r2, #1
    b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3dc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b3de:	2300      	movs	r3, #0
}
    b3e0:	4618      	mov	r0, r3
    b3e2:	3730      	adds	r7, #48	; 0x30
    b3e4:	46bd      	mov	sp, r7
    b3e6:	bd80      	pop	{r7, pc}
    b3e8:	00002591 	.word	0x00002591

0000b3ec <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b3ec:	b580      	push	{r7, lr}
    b3ee:	b08c      	sub	sp, #48	; 0x30
    b3f0:	af00      	add	r7, sp, #0
    b3f2:	6078      	str	r0, [r7, #4]
    b3f4:	460b      	mov	r3, r1
    b3f6:	70fb      	strb	r3, [r7, #3]
    b3f8:	4613      	mov	r3, r2
    b3fa:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b3fc:	2300      	movs	r3, #0
    b3fe:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b400:	687b      	ldr	r3, [r7, #4]
    b402:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b404:	687b      	ldr	r3, [r7, #4]
    b406:	681b      	ldr	r3, [r3, #0]
    b408:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b40a:	f107 030c 	add.w	r3, r7, #12
    b40e:	2200      	movs	r2, #0
    b410:	601a      	str	r2, [r3, #0]
    b412:	605a      	str	r2, [r3, #4]
    b414:	609a      	str	r2, [r3, #8]
    b416:	60da      	str	r2, [r3, #12]
    b418:	611a      	str	r2, [r3, #16]
    b41a:	615a      	str	r2, [r3, #20]
    b41c:	78fb      	ldrb	r3, [r7, #3]
    b41e:	f003 0307 	and.w	r3, r3, #7
    b422:	b2da      	uxtb	r2, r3
    b424:	7b3b      	ldrb	r3, [r7, #12]
    b426:	f362 0302 	bfi	r3, r2, #0, #3
    b42a:	733b      	strb	r3, [r7, #12]
    b42c:	7b3b      	ldrb	r3, [r7, #12]
    b42e:	f043 0310 	orr.w	r3, r3, #16
    b432:	733b      	strb	r3, [r7, #12]
    b434:	7b3b      	ldrb	r3, [r7, #12]
    b436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b43a:	733b      	strb	r3, [r7, #12]
    b43c:	78bb      	ldrb	r3, [r7, #2]
    b43e:	743b      	strb	r3, [r7, #16]
    b440:	2301      	movs	r3, #1
    b442:	61bb      	str	r3, [r7, #24]
    b444:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b448:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b44c:	7b5b      	ldrb	r3, [r3, #13]
    b44e:	2b00      	cmp	r3, #0
    b450:	d003      	beq.n	b45a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b452:	2100      	movs	r1, #0
    b454:	6878      	ldr	r0, [r7, #4]
    b456:	4b0a      	ldr	r3, [pc, #40]	; (b480 <n25q256a_read_reg+0x94>)
    b458:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b45a:	f107 030c 	add.w	r3, r7, #12
    b45e:	4619      	mov	r1, r3
    b460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b462:	4b08      	ldr	r3, [pc, #32]	; (b484 <n25q256a_read_reg+0x98>)
    b464:	4798      	blx	r3
	if (n25q->xip_mode) {
    b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b468:	7b5b      	ldrb	r3, [r3, #13]
    b46a:	2b00      	cmp	r3, #0
    b46c:	d003      	beq.n	b476 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b46e:	2101      	movs	r1, #1
    b470:	6878      	ldr	r0, [r7, #4]
    b472:	4b03      	ldr	r3, [pc, #12]	; (b480 <n25q256a_read_reg+0x94>)
    b474:	4798      	blx	r3
	}
	return status;
    b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b478:	4618      	mov	r0, r3
    b47a:	3730      	adds	r7, #48	; 0x30
    b47c:	46bd      	mov	sp, r7
    b47e:	bd80      	pop	{r7, pc}
    b480:	0000b321 	.word	0x0000b321
    b484:	00002591 	.word	0x00002591

0000b488 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b488:	b580      	push	{r7, lr}
    b48a:	b08c      	sub	sp, #48	; 0x30
    b48c:	af00      	add	r7, sp, #0
    b48e:	60f8      	str	r0, [r7, #12]
    b490:	607b      	str	r3, [r7, #4]
    b492:	460b      	mov	r3, r1
    b494:	72fb      	strb	r3, [r7, #11]
    b496:	4613      	mov	r3, r2
    b498:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b49a:	68fb      	ldr	r3, [r7, #12]
    b49c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b49e:	68fb      	ldr	r3, [r7, #12]
    b4a0:	681b      	ldr	r3, [r3, #0]
    b4a2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b4a4:	f107 0310 	add.w	r3, r7, #16
    b4a8:	2200      	movs	r2, #0
    b4aa:	601a      	str	r2, [r3, #0]
    b4ac:	605a      	str	r2, [r3, #4]
    b4ae:	609a      	str	r2, [r3, #8]
    b4b0:	60da      	str	r2, [r3, #12]
    b4b2:	611a      	str	r2, [r3, #16]
    b4b4:	615a      	str	r2, [r3, #20]
    b4b6:	7afb      	ldrb	r3, [r7, #11]
    b4b8:	f003 0307 	and.w	r3, r3, #7
    b4bc:	b2da      	uxtb	r2, r3
    b4be:	7c3b      	ldrb	r3, [r7, #16]
    b4c0:	f362 0302 	bfi	r3, r2, #0, #3
    b4c4:	743b      	strb	r3, [r7, #16]
    b4c6:	7c3b      	ldrb	r3, [r7, #16]
    b4c8:	f043 0310 	orr.w	r3, r3, #16
    b4cc:	743b      	strb	r3, [r7, #16]
    b4ce:	7c3b      	ldrb	r3, [r7, #16]
    b4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4d4:	743b      	strb	r3, [r7, #16]
    b4d6:	7c7b      	ldrb	r3, [r7, #17]
    b4d8:	2202      	movs	r2, #2
    b4da:	f362 1305 	bfi	r3, r2, #4, #2
    b4de:	747b      	strb	r3, [r7, #17]
    b4e0:	7abb      	ldrb	r3, [r7, #10]
    b4e2:	753b      	strb	r3, [r7, #20]
    b4e4:	2301      	movs	r3, #1
    b4e6:	61fb      	str	r3, [r7, #28]
    b4e8:	1d3b      	adds	r3, r7, #4
    b4ea:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4ee:	7b5b      	ldrb	r3, [r3, #13]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	d003      	beq.n	b4fc <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b4f4:	2100      	movs	r1, #0
    b4f6:	68f8      	ldr	r0, [r7, #12]
    b4f8:	4b09      	ldr	r3, [pc, #36]	; (b520 <n25q256a_write_reg+0x98>)
    b4fa:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b4fc:	f107 0310 	add.w	r3, r7, #16
    b500:	4619      	mov	r1, r3
    b502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b504:	4b07      	ldr	r3, [pc, #28]	; (b524 <n25q256a_write_reg+0x9c>)
    b506:	4798      	blx	r3
	if (n25q->xip_mode) {
    b508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b50a:	7b5b      	ldrb	r3, [r3, #13]
    b50c:	2b00      	cmp	r3, #0
    b50e:	d003      	beq.n	b518 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b510:	2101      	movs	r1, #1
    b512:	68f8      	ldr	r0, [r7, #12]
    b514:	4b02      	ldr	r3, [pc, #8]	; (b520 <n25q256a_write_reg+0x98>)
    b516:	4798      	blx	r3
	}
}
    b518:	bf00      	nop
    b51a:	3730      	adds	r7, #48	; 0x30
    b51c:	46bd      	mov	sp, r7
    b51e:	bd80      	pop	{r7, pc}
    b520:	0000b321 	.word	0x0000b321
    b524:	00002591 	.word	0x00002591

0000b528 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b528:	b580      	push	{r7, lr}
    b52a:	b090      	sub	sp, #64	; 0x40
    b52c:	af00      	add	r7, sp, #0
    b52e:	6078      	str	r0, [r7, #4]
    b530:	460b      	mov	r3, r1
    b532:	70fb      	strb	r3, [r7, #3]
    b534:	4613      	mov	r3, r2
    b536:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b538:	687b      	ldr	r3, [r7, #4]
    b53a:	681b      	ldr	r3, [r3, #0]
    b53c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b53e:	78bb      	ldrb	r3, [r7, #2]
    b540:	2b00      	cmp	r3, #0
    b542:	d001      	beq.n	b548 <n25q256a_write_enable+0x20>
    b544:	2306      	movs	r3, #6
    b546:	e000      	b.n	b54a <n25q256a_write_enable+0x22>
    b548:	2304      	movs	r3, #4
    b54a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b54e:	f107 0320 	add.w	r3, r7, #32
    b552:	2200      	movs	r2, #0
    b554:	601a      	str	r2, [r3, #0]
    b556:	605a      	str	r2, [r3, #4]
    b558:	609a      	str	r2, [r3, #8]
    b55a:	60da      	str	r2, [r3, #12]
    b55c:	611a      	str	r2, [r3, #16]
    b55e:	615a      	str	r2, [r3, #20]
    b560:	78fb      	ldrb	r3, [r7, #3]
    b562:	f003 0307 	and.w	r3, r3, #7
    b566:	b2da      	uxtb	r2, r3
    b568:	f897 3020 	ldrb.w	r3, [r7, #32]
    b56c:	f362 0302 	bfi	r3, r2, #0, #3
    b570:	f887 3020 	strb.w	r3, [r7, #32]
    b574:	f897 3020 	ldrb.w	r3, [r7, #32]
    b578:	f043 0310 	orr.w	r3, r3, #16
    b57c:	f887 3020 	strb.w	r3, [r7, #32]
    b580:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b584:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b588:	f107 0308 	add.w	r3, r7, #8
    b58c:	2200      	movs	r2, #0
    b58e:	601a      	str	r2, [r3, #0]
    b590:	605a      	str	r2, [r3, #4]
    b592:	609a      	str	r2, [r3, #8]
    b594:	60da      	str	r2, [r3, #12]
    b596:	611a      	str	r2, [r3, #16]
    b598:	615a      	str	r2, [r3, #20]
    b59a:	78fb      	ldrb	r3, [r7, #3]
    b59c:	f003 0307 	and.w	r3, r3, #7
    b5a0:	b2da      	uxtb	r2, r3
    b5a2:	7a3b      	ldrb	r3, [r7, #8]
    b5a4:	f362 0302 	bfi	r3, r2, #0, #3
    b5a8:	723b      	strb	r3, [r7, #8]
    b5aa:	7a3b      	ldrb	r3, [r7, #8]
    b5ac:	f043 0310 	orr.w	r3, r3, #16
    b5b0:	723b      	strb	r3, [r7, #8]
    b5b2:	7a3b      	ldrb	r3, [r7, #8]
    b5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5b8:	723b      	strb	r3, [r7, #8]
    b5ba:	2305      	movs	r3, #5
    b5bc:	733b      	strb	r3, [r7, #12]
    b5be:	2301      	movs	r3, #1
    b5c0:	617b      	str	r3, [r7, #20]
    b5c2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b5c6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b5c8:	f107 0320 	add.w	r3, r7, #32
    b5cc:	4619      	mov	r1, r3
    b5ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b5d0:	4b08      	ldr	r3, [pc, #32]	; (b5f4 <n25q256a_write_enable+0xcc>)
    b5d2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b5d4:	f107 0308 	add.w	r3, r7, #8
    b5d8:	4619      	mov	r1, r3
    b5da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b5dc:	4b05      	ldr	r3, [pc, #20]	; (b5f4 <n25q256a_write_enable+0xcc>)
    b5de:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b5e0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b5e4:	f003 0302 	and.w	r3, r3, #2
    b5e8:	2b00      	cmp	r3, #0
    b5ea:	d0ed      	beq.n	b5c8 <n25q256a_write_enable+0xa0>
}
    b5ec:	bf00      	nop
    b5ee:	3740      	adds	r7, #64	; 0x40
    b5f0:	46bd      	mov	sp, r7
    b5f2:	bd80      	pop	{r7, pc}
    b5f4:	00002591 	.word	0x00002591

0000b5f8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b5f8:	b590      	push	{r4, r7, lr}
    b5fa:	b087      	sub	sp, #28
    b5fc:	af00      	add	r7, sp, #0
    b5fe:	6078      	str	r0, [r7, #4]
    b600:	460b      	mov	r3, r1
    b602:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b608:	68fb      	ldr	r3, [r7, #12]
    b60a:	7b1b      	ldrb	r3, [r3, #12]
    b60c:	2b00      	cmp	r3, #0
    b60e:	d001      	beq.n	b614 <n25q256a_switch_mode+0x1c>
    b610:	2306      	movs	r3, #6
    b612:	e000      	b.n	b616 <n25q256a_switch_mode+0x1e>
    b614:	2300      	movs	r3, #0
    b616:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b618:	7afb      	ldrb	r3, [r7, #11]
    b61a:	2265      	movs	r2, #101	; 0x65
    b61c:	4619      	mov	r1, r3
    b61e:	6878      	ldr	r0, [r7, #4]
    b620:	4b25      	ldr	r3, [pc, #148]	; (b6b8 <n25q256a_switch_mode+0xc0>)
    b622:	4798      	blx	r3
    b624:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b626:	2300      	movs	r3, #0
    b628:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b62a:	68fb      	ldr	r3, [r7, #12]
    b62c:	7b1b      	ldrb	r3, [r3, #12]
    b62e:	78fa      	ldrb	r2, [r7, #3]
    b630:	429a      	cmp	r2, r3
    b632:	d03d      	beq.n	b6b0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b634:	78fb      	ldrb	r3, [r7, #3]
    b636:	2b00      	cmp	r3, #0
    b638:	d00b      	beq.n	b652 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b63a:	697b      	ldr	r3, [r7, #20]
    b63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b640:	2b00      	cmp	r3, #0
    b642:	d011      	beq.n	b668 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b644:	697b      	ldr	r3, [r7, #20]
    b646:	f003 031f 	and.w	r3, r3, #31
    b64a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b64c:	2301      	movs	r3, #1
    b64e:	74fb      	strb	r3, [r7, #19]
    b650:	e00a      	b.n	b668 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b652:	697b      	ldr	r3, [r7, #20]
    b654:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b658:	2b00      	cmp	r3, #0
    b65a:	d105      	bne.n	b668 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b65c:	697b      	ldr	r3, [r7, #20]
    b65e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b662:	617b      	str	r3, [r7, #20]
			modify = 1;
    b664:	2301      	movs	r3, #1
    b666:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b668:	7cfb      	ldrb	r3, [r7, #19]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d021      	beq.n	b6b2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b66e:	68fb      	ldr	r3, [r7, #12]
    b670:	78fa      	ldrb	r2, [r7, #3]
    b672:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b674:	7afb      	ldrb	r3, [r7, #11]
    b676:	2201      	movs	r2, #1
    b678:	4619      	mov	r1, r3
    b67a:	6878      	ldr	r0, [r7, #4]
    b67c:	4b0f      	ldr	r3, [pc, #60]	; (b6bc <n25q256a_switch_mode+0xc4>)
    b67e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b680:	7af9      	ldrb	r1, [r7, #11]
    b682:	697b      	ldr	r3, [r7, #20]
    b684:	2261      	movs	r2, #97	; 0x61
    b686:	6878      	ldr	r0, [r7, #4]
    b688:	4c0d      	ldr	r4, [pc, #52]	; (b6c0 <n25q256a_switch_mode+0xc8>)
    b68a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b68c:	78fb      	ldrb	r3, [r7, #3]
    b68e:	2b00      	cmp	r3, #0
    b690:	d001      	beq.n	b696 <n25q256a_switch_mode+0x9e>
    b692:	2306      	movs	r3, #6
    b694:	e000      	b.n	b698 <n25q256a_switch_mode+0xa0>
    b696:	2300      	movs	r3, #0
    b698:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b69a:	7afb      	ldrb	r3, [r7, #11]
    b69c:	2265      	movs	r2, #101	; 0x65
    b69e:	4619      	mov	r1, r3
    b6a0:	6878      	ldr	r0, [r7, #4]
    b6a2:	4b05      	ldr	r3, [pc, #20]	; (b6b8 <n25q256a_switch_mode+0xc0>)
    b6a4:	4798      	blx	r3
    b6a6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b6a8:	68fb      	ldr	r3, [r7, #12]
    b6aa:	78fa      	ldrb	r2, [r7, #3]
    b6ac:	731a      	strb	r2, [r3, #12]
    b6ae:	e000      	b.n	b6b2 <n25q256a_switch_mode+0xba>
		return;
    b6b0:	bf00      	nop
	}
}
    b6b2:	371c      	adds	r7, #28
    b6b4:	46bd      	mov	sp, r7
    b6b6:	bd90      	pop	{r4, r7, pc}
    b6b8:	0000b3ed 	.word	0x0000b3ed
    b6bc:	0000b529 	.word	0x0000b529
    b6c0:	0000b489 	.word	0x0000b489

0000b6c4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b6c4:	b580      	push	{r7, lr}
    b6c6:	b086      	sub	sp, #24
    b6c8:	af00      	add	r7, sp, #0
    b6ca:	60f8      	str	r0, [r7, #12]
    b6cc:	60b9      	str	r1, [r7, #8]
    b6ce:	607a      	str	r2, [r7, #4]
    b6d0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b6d2:	68fb      	ldr	r3, [r7, #12]
    b6d4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b6d6:	4a0c      	ldr	r2, [pc, #48]	; (b708 <n25q256a_construct+0x44>)
    b6d8:	68b9      	ldr	r1, [r7, #8]
    b6da:	68f8      	ldr	r0, [r7, #12]
    b6dc:	4b0b      	ldr	r3, [pc, #44]	; (b70c <n25q256a_construct+0x48>)
    b6de:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b6e0:	697b      	ldr	r3, [r7, #20]
    b6e2:	2200      	movs	r2, #0
    b6e4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b6e6:	697b      	ldr	r3, [r7, #20]
    b6e8:	2200      	movs	r2, #0
    b6ea:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b6ec:	697b      	ldr	r3, [r7, #20]
    b6ee:	687a      	ldr	r2, [r7, #4]
    b6f0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b6f2:	78fb      	ldrb	r3, [r7, #3]
    b6f4:	4619      	mov	r1, r3
    b6f6:	68f8      	ldr	r0, [r7, #12]
    b6f8:	4b05      	ldr	r3, [pc, #20]	; (b710 <n25q256a_construct+0x4c>)
    b6fa:	4798      	blx	r3
	return me;
    b6fc:	68fb      	ldr	r3, [r7, #12]
}
    b6fe:	4618      	mov	r0, r3
    b700:	3718      	adds	r7, #24
    b702:	46bd      	mov	sp, r7
    b704:	bd80      	pop	{r7, pc}
    b706:	bf00      	nop
    b708:	0000f028 	.word	0x0000f028
    b70c:	0000bba1 	.word	0x0000bba1
    b710:	0000b5f9 	.word	0x0000b5f9

0000b714 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b714:	b580      	push	{r7, lr}
    b716:	b08c      	sub	sp, #48	; 0x30
    b718:	af00      	add	r7, sp, #0
    b71a:	60f8      	str	r0, [r7, #12]
    b71c:	60b9      	str	r1, [r7, #8]
    b71e:	607a      	str	r2, [r7, #4]
    b720:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b722:	68fb      	ldr	r3, [r7, #12]
    b724:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b726:	68fb      	ldr	r3, [r7, #12]
    b728:	681b      	ldr	r3, [r3, #0]
    b72a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b72c:	f107 0310 	add.w	r3, r7, #16
    b730:	2200      	movs	r2, #0
    b732:	601a      	str	r2, [r3, #0]
    b734:	605a      	str	r2, [r3, #4]
    b736:	609a      	str	r2, [r3, #8]
    b738:	60da      	str	r2, [r3, #12]
    b73a:	611a      	str	r2, [r3, #16]
    b73c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b740:	7b1b      	ldrb	r3, [r3, #12]
    b742:	2b00      	cmp	r3, #0
    b744:	d001      	beq.n	b74a <n25q256a_read+0x36>
    b746:	2206      	movs	r2, #6
    b748:	e000      	b.n	b74c <n25q256a_read+0x38>
    b74a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b74c:	7c3b      	ldrb	r3, [r7, #16]
    b74e:	f362 0302 	bfi	r3, r2, #0, #3
    b752:	743b      	strb	r3, [r7, #16]
    b754:	7c3b      	ldrb	r3, [r7, #16]
    b756:	f043 0310 	orr.w	r3, r3, #16
    b75a:	743b      	strb	r3, [r7, #16]
    b75c:	7c3b      	ldrb	r3, [r7, #16]
    b75e:	f043 0320 	orr.w	r3, r3, #32
    b762:	743b      	strb	r3, [r7, #16]
    b764:	7c3b      	ldrb	r3, [r7, #16]
    b766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b76a:	743b      	strb	r3, [r7, #16]
    b76c:	7c7b      	ldrb	r3, [r7, #17]
    b76e:	2201      	movs	r2, #1
    b770:	f362 1305 	bfi	r3, r2, #4, #2
    b774:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b778:	7b1b      	ldrb	r3, [r3, #12]
    b77a:	2b00      	cmp	r3, #0
    b77c:	d001      	beq.n	b782 <n25q256a_read+0x6e>
    b77e:	220a      	movs	r2, #10
    b780:	e000      	b.n	b784 <n25q256a_read+0x70>
    b782:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b784:	7cbb      	ldrb	r3, [r7, #18]
    b786:	f362 0304 	bfi	r3, r2, #0, #5
    b78a:	74bb      	strb	r3, [r7, #18]
    b78c:	230b      	movs	r3, #11
    b78e:	753b      	strb	r3, [r7, #20]
    b790:	687b      	ldr	r3, [r7, #4]
    b792:	61bb      	str	r3, [r7, #24]
    b794:	683b      	ldr	r3, [r7, #0]
    b796:	61fb      	str	r3, [r7, #28]
    b798:	68bb      	ldr	r3, [r7, #8]
    b79a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b79c:	f107 0310 	add.w	r3, r7, #16
    b7a0:	4619      	mov	r1, r3
    b7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b7a4:	4b03      	ldr	r3, [pc, #12]	; (b7b4 <n25q256a_read+0xa0>)
    b7a6:	4798      	blx	r3
	return ERR_NONE;
    b7a8:	2300      	movs	r3, #0
}
    b7aa:	4618      	mov	r0, r3
    b7ac:	3730      	adds	r7, #48	; 0x30
    b7ae:	46bd      	mov	sp, r7
    b7b0:	bd80      	pop	{r7, pc}
    b7b2:	bf00      	nop
    b7b4:	00002591 	.word	0x00002591

0000b7b8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b7b8:	b580      	push	{r7, lr}
    b7ba:	b08c      	sub	sp, #48	; 0x30
    b7bc:	af00      	add	r7, sp, #0
    b7be:	60f8      	str	r0, [r7, #12]
    b7c0:	60b9      	str	r1, [r7, #8]
    b7c2:	607a      	str	r2, [r7, #4]
    b7c4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b7c6:	68fb      	ldr	r3, [r7, #12]
    b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b7ca:	68fb      	ldr	r3, [r7, #12]
    b7cc:	681b      	ldr	r3, [r3, #0]
    b7ce:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b7d0:	f107 0310 	add.w	r3, r7, #16
    b7d4:	2200      	movs	r2, #0
    b7d6:	601a      	str	r2, [r3, #0]
    b7d8:	605a      	str	r2, [r3, #4]
    b7da:	609a      	str	r2, [r3, #8]
    b7dc:	60da      	str	r2, [r3, #12]
    b7de:	611a      	str	r2, [r3, #16]
    b7e0:	615a      	str	r2, [r3, #20]
    b7e2:	7c3b      	ldrb	r3, [r7, #16]
    b7e4:	f043 0310 	orr.w	r3, r3, #16
    b7e8:	743b      	strb	r3, [r7, #16]
    b7ea:	7c3b      	ldrb	r3, [r7, #16]
    b7ec:	f043 0320 	orr.w	r3, r3, #32
    b7f0:	743b      	strb	r3, [r7, #16]
    b7f2:	7c3b      	ldrb	r3, [r7, #16]
    b7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7f8:	743b      	strb	r3, [r7, #16]
    b7fa:	7c7b      	ldrb	r3, [r7, #17]
    b7fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b800:	747b      	strb	r3, [r7, #17]
    b802:	2302      	movs	r3, #2
    b804:	753b      	strb	r3, [r7, #20]
    b806:	687b      	ldr	r3, [r7, #4]
    b808:	61bb      	str	r3, [r7, #24]
    b80a:	683b      	ldr	r3, [r7, #0]
    b80c:	61fb      	str	r3, [r7, #28]
    b80e:	68bb      	ldr	r3, [r7, #8]
    b810:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b814:	7b1b      	ldrb	r3, [r3, #12]
    b816:	2b00      	cmp	r3, #0
    b818:	d001      	beq.n	b81e <n25q256a_write+0x66>
    b81a:	2206      	movs	r2, #6
    b81c:	e000      	b.n	b820 <n25q256a_write+0x68>
    b81e:	2200      	movs	r2, #0
    b820:	7c3b      	ldrb	r3, [r7, #16]
    b822:	f362 0302 	bfi	r3, r2, #0, #3
    b826:	743b      	strb	r3, [r7, #16]
	while (length) {
    b828:	e035      	b.n	b896 <n25q256a_write+0xde>
		cmd.address = address;
    b82a:	687b      	ldr	r3, [r7, #4]
    b82c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b82e:	683b      	ldr	r3, [r7, #0]
    b830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b834:	d802      	bhi.n	b83c <n25q256a_write+0x84>
			cmd.buf_len = length;
    b836:	683b      	ldr	r3, [r7, #0]
    b838:	61fb      	str	r3, [r7, #28]
    b83a:	e002      	b.n	b842 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b83c:	f44f 7380 	mov.w	r3, #256	; 0x100
    b840:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b842:	7c3b      	ldrb	r3, [r7, #16]
    b844:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b848:	b2db      	uxtb	r3, r3
    b84a:	2201      	movs	r2, #1
    b84c:	4619      	mov	r1, r3
    b84e:	68f8      	ldr	r0, [r7, #12]
    b850:	4b19      	ldr	r3, [pc, #100]	; (b8b8 <n25q256a_write+0x100>)
    b852:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b854:	f107 0310 	add.w	r3, r7, #16
    b858:	4619      	mov	r1, r3
    b85a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b85c:	4b17      	ldr	r3, [pc, #92]	; (b8bc <n25q256a_write+0x104>)
    b85e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b860:	bf00      	nop
    b862:	7c3b      	ldrb	r3, [r7, #16]
    b864:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b868:	b2db      	uxtb	r3, r3
    b86a:	2270      	movs	r2, #112	; 0x70
    b86c:	4619      	mov	r1, r3
    b86e:	68f8      	ldr	r0, [r7, #12]
    b870:	4b13      	ldr	r3, [pc, #76]	; (b8c0 <n25q256a_write+0x108>)
    b872:	4798      	blx	r3
    b874:	4603      	mov	r3, r0
    b876:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b87a:	2b00      	cmp	r3, #0
    b87c:	d0f1      	beq.n	b862 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b87e:	6a3a      	ldr	r2, [r7, #32]
    b880:	69fb      	ldr	r3, [r7, #28]
    b882:	4413      	add	r3, r2
    b884:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b886:	69fb      	ldr	r3, [r7, #28]
    b888:	683a      	ldr	r2, [r7, #0]
    b88a:	1ad3      	subs	r3, r2, r3
    b88c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b88e:	69fb      	ldr	r3, [r7, #28]
    b890:	687a      	ldr	r2, [r7, #4]
    b892:	4413      	add	r3, r2
    b894:	607b      	str	r3, [r7, #4]
	while (length) {
    b896:	683b      	ldr	r3, [r7, #0]
    b898:	2b00      	cmp	r3, #0
    b89a:	d1c6      	bne.n	b82a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b89e:	7b5b      	ldrb	r3, [r3, #13]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d003      	beq.n	b8ac <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b8a4:	2101      	movs	r1, #1
    b8a6:	68f8      	ldr	r0, [r7, #12]
    b8a8:	4b06      	ldr	r3, [pc, #24]	; (b8c4 <n25q256a_write+0x10c>)
    b8aa:	4798      	blx	r3
	}
	return ERR_NONE;
    b8ac:	2300      	movs	r3, #0
}
    b8ae:	4618      	mov	r0, r3
    b8b0:	3730      	adds	r7, #48	; 0x30
    b8b2:	46bd      	mov	sp, r7
    b8b4:	bd80      	pop	{r7, pc}
    b8b6:	bf00      	nop
    b8b8:	0000b529 	.word	0x0000b529
    b8bc:	00002591 	.word	0x00002591
    b8c0:	0000b3ed 	.word	0x0000b3ed
    b8c4:	0000b321 	.word	0x0000b321

0000b8c8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b8c8:	b580      	push	{r7, lr}
    b8ca:	b090      	sub	sp, #64	; 0x40
    b8cc:	af00      	add	r7, sp, #0
    b8ce:	60f8      	str	r0, [r7, #12]
    b8d0:	60b9      	str	r1, [r7, #8]
    b8d2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b8d4:	68fb      	ldr	r3, [r7, #12]
    b8d6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b8d8:	68fb      	ldr	r3, [r7, #12]
    b8da:	681b      	ldr	r3, [r3, #0]
    b8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b8de:	f107 0314 	add.w	r3, r7, #20
    b8e2:	2200      	movs	r2, #0
    b8e4:	601a      	str	r2, [r3, #0]
    b8e6:	605a      	str	r2, [r3, #4]
    b8e8:	609a      	str	r2, [r3, #8]
    b8ea:	60da      	str	r2, [r3, #12]
    b8ec:	611a      	str	r2, [r3, #16]
    b8ee:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b8f2:	7b1b      	ldrb	r3, [r3, #12]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	d001      	beq.n	b8fc <n25q256a_erase+0x34>
    b8f8:	2206      	movs	r2, #6
    b8fa:	e000      	b.n	b8fe <n25q256a_erase+0x36>
    b8fc:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b8fe:	7d3b      	ldrb	r3, [r7, #20]
    b900:	f362 0302 	bfi	r3, r2, #0, #3
    b904:	753b      	strb	r3, [r7, #20]
    b906:	7d3b      	ldrb	r3, [r7, #20]
    b908:	f043 0310 	orr.w	r3, r3, #16
    b90c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b90e:	687b      	ldr	r3, [r7, #4]
    b910:	4a56      	ldr	r2, [pc, #344]	; (ba6c <n25q256a_erase+0x1a4>)
    b912:	4293      	cmp	r3, r2
    b914:	bf94      	ite	ls
    b916:	2301      	movls	r3, #1
    b918:	2300      	movhi	r3, #0
    b91a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b91c:	7d3b      	ldrb	r3, [r7, #20]
    b91e:	f362 1345 	bfi	r3, r2, #5, #1
    b922:	753b      	strb	r3, [r7, #20]
    b924:	7d7b      	ldrb	r3, [r7, #21]
    b926:	2202      	movs	r2, #2
    b928:	f362 1305 	bfi	r3, r2, #4, #2
    b92c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b92e:	68bb      	ldr	r3, [r7, #8]
    b930:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b932:	687b      	ldr	r3, [r7, #4]
    b934:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b936:	2300      	movs	r3, #0
    b938:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b93a:	687b      	ldr	r3, [r7, #4]
    b93c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b940:	2b00      	cmp	r3, #0
    b942:	d104      	bne.n	b94e <n25q256a_erase+0x86>
    b944:	68bb      	ldr	r3, [r7, #8]
    b946:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b94a:	2b00      	cmp	r3, #0
    b94c:	d002      	beq.n	b954 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b94e:	f06f 030c 	mvn.w	r3, #12
    b952:	e087      	b.n	ba64 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b954:	687b      	ldr	r3, [r7, #4]
    b956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b95a:	d368      	bcc.n	ba2e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b95c:	23c7      	movs	r3, #199	; 0xc7
    b95e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b960:	7d3b      	ldrb	r3, [r7, #20]
    b962:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b966:	b2db      	uxtb	r3, r3
    b968:	2201      	movs	r2, #1
    b96a:	4619      	mov	r1, r3
    b96c:	68f8      	ldr	r0, [r7, #12]
    b96e:	4b40      	ldr	r3, [pc, #256]	; (ba70 <n25q256a_erase+0x1a8>)
    b970:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b972:	f107 0314 	add.w	r3, r7, #20
    b976:	4619      	mov	r1, r3
    b978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b97a:	4b3e      	ldr	r3, [pc, #248]	; (ba74 <n25q256a_erase+0x1ac>)
    b97c:	4798      	blx	r3
    b97e:	e059      	b.n	ba34 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b982:	b29b      	uxth	r3, r3
    b984:	2b00      	cmp	r3, #0
    b986:	d11f      	bne.n	b9c8 <n25q256a_erase+0x100>
    b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b98a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b98e:	d31b      	bcc.n	b9c8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b992:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b994:	23d8      	movs	r3, #216	; 0xd8
    b996:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b998:	7d3b      	ldrb	r3, [r7, #20]
    b99a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b99e:	b2db      	uxtb	r3, r3
    b9a0:	2201      	movs	r2, #1
    b9a2:	4619      	mov	r1, r3
    b9a4:	68f8      	ldr	r0, [r7, #12]
    b9a6:	4b32      	ldr	r3, [pc, #200]	; (ba70 <n25q256a_erase+0x1a8>)
    b9a8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b9aa:	f107 0314 	add.w	r3, r7, #20
    b9ae:	4619      	mov	r1, r3
    b9b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b9b2:	4b30      	ldr	r3, [pc, #192]	; (ba74 <n25q256a_erase+0x1ac>)
    b9b4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b9b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b9c0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b9c4:	63bb      	str	r3, [r7, #56]	; 0x38
    b9c6:	e023      	b.n	ba10 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b9ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b9ce:	d31b      	bcc.n	ba08 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b9d2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b9d4:	2320      	movs	r3, #32
    b9d6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b9d8:	7d3b      	ldrb	r3, [r7, #20]
    b9da:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b9de:	b2db      	uxtb	r3, r3
    b9e0:	2201      	movs	r2, #1
    b9e2:	4619      	mov	r1, r3
    b9e4:	68f8      	ldr	r0, [r7, #12]
    b9e6:	4b22      	ldr	r3, [pc, #136]	; (ba70 <n25q256a_erase+0x1a8>)
    b9e8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b9ea:	f107 0314 	add.w	r3, r7, #20
    b9ee:	4619      	mov	r1, r3
    b9f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b9f2:	4b20      	ldr	r3, [pc, #128]	; (ba74 <n25q256a_erase+0x1ac>)
    b9f4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba00:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    ba04:	63bb      	str	r3, [r7, #56]	; 0x38
    ba06:	e003      	b.n	ba10 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    ba08:	f06f 030c 	mvn.w	r3, #12
    ba0c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    ba0e:	e011      	b.n	ba34 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba10:	bf00      	nop
    ba12:	7d3b      	ldrb	r3, [r7, #20]
    ba14:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba18:	b2db      	uxtb	r3, r3
    ba1a:	2270      	movs	r2, #112	; 0x70
    ba1c:	4619      	mov	r1, r3
    ba1e:	68f8      	ldr	r0, [r7, #12]
    ba20:	4b15      	ldr	r3, [pc, #84]	; (ba78 <n25q256a_erase+0x1b0>)
    ba22:	4798      	blx	r3
    ba24:	4603      	mov	r3, r0
    ba26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d0f1      	beq.n	ba12 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba30:	2b00      	cmp	r3, #0
    ba32:	d1a5      	bne.n	b980 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba34:	bf00      	nop
    ba36:	7d3b      	ldrb	r3, [r7, #20]
    ba38:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba3c:	b2db      	uxtb	r3, r3
    ba3e:	2270      	movs	r2, #112	; 0x70
    ba40:	4619      	mov	r1, r3
    ba42:	68f8      	ldr	r0, [r7, #12]
    ba44:	4b0c      	ldr	r3, [pc, #48]	; (ba78 <n25q256a_erase+0x1b0>)
    ba46:	4798      	blx	r3
    ba48:	4603      	mov	r3, r0
    ba4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d0f1      	beq.n	ba36 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    ba52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ba54:	7b5b      	ldrb	r3, [r3, #13]
    ba56:	2b00      	cmp	r3, #0
    ba58:	d003      	beq.n	ba62 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    ba5a:	2101      	movs	r1, #1
    ba5c:	68f8      	ldr	r0, [r7, #12]
    ba5e:	4b07      	ldr	r3, [pc, #28]	; (ba7c <n25q256a_erase+0x1b4>)
    ba60:	4798      	blx	r3
	}
	return rc;
    ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ba64:	4618      	mov	r0, r3
    ba66:	3740      	adds	r7, #64	; 0x40
    ba68:	46bd      	mov	sp, r7
    ba6a:	bd80      	pop	{r7, pc}
    ba6c:	001fffff 	.word	0x001fffff
    ba70:	0000b529 	.word	0x0000b529
    ba74:	00002591 	.word	0x00002591
    ba78:	0000b3ed 	.word	0x0000b3ed
    ba7c:	0000b321 	.word	0x0000b321

0000ba80 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    ba80:	b590      	push	{r4, r7, lr}
    ba82:	b085      	sub	sp, #20
    ba84:	af00      	add	r7, sp, #0
    ba86:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    ba88:	687b      	ldr	r3, [r7, #4]
    ba8a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba8c:	68fb      	ldr	r3, [r7, #12]
    ba8e:	7b1b      	ldrb	r3, [r3, #12]
    ba90:	2b00      	cmp	r3, #0
    ba92:	d001      	beq.n	ba98 <n25q256a_enable_xip+0x18>
    ba94:	2306      	movs	r3, #6
    ba96:	e000      	b.n	ba9a <n25q256a_enable_xip+0x1a>
    ba98:	2300      	movs	r3, #0
    ba9a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ba9c:	68fb      	ldr	r3, [r7, #12]
    ba9e:	7b5b      	ldrb	r3, [r3, #13]
    baa0:	2b00      	cmp	r3, #0
    baa2:	d129      	bne.n	baf8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    baa4:	7afb      	ldrb	r3, [r7, #11]
    baa6:	2285      	movs	r2, #133	; 0x85
    baa8:	4619      	mov	r1, r3
    baaa:	6878      	ldr	r0, [r7, #4]
    baac:	4b15      	ldr	r3, [pc, #84]	; (bb04 <n25q256a_enable_xip+0x84>)
    baae:	4798      	blx	r3
    bab0:	4603      	mov	r3, r0
    bab2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bab4:	7abb      	ldrb	r3, [r7, #10]
    bab6:	f003 0308 	and.w	r3, r3, #8
    baba:	2b00      	cmp	r3, #0
    babc:	d015      	beq.n	baea <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    babe:	7abb      	ldrb	r3, [r7, #10]
    bac0:	f023 0308 	bic.w	r3, r3, #8
    bac4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bac6:	7abb      	ldrb	r3, [r7, #10]
    bac8:	7af9      	ldrb	r1, [r7, #11]
    baca:	2281      	movs	r2, #129	; 0x81
    bacc:	6878      	ldr	r0, [r7, #4]
    bace:	4c0e      	ldr	r4, [pc, #56]	; (bb08 <n25q256a_enable_xip+0x88>)
    bad0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bad2:	bf00      	nop
    bad4:	7afb      	ldrb	r3, [r7, #11]
    bad6:	2270      	movs	r2, #112	; 0x70
    bad8:	4619      	mov	r1, r3
    bada:	6878      	ldr	r0, [r7, #4]
    badc:	4b09      	ldr	r3, [pc, #36]	; (bb04 <n25q256a_enable_xip+0x84>)
    bade:	4798      	blx	r3
    bae0:	4603      	mov	r3, r0
    bae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bae6:	2b00      	cmp	r3, #0
    bae8:	d0f4      	beq.n	bad4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    baea:	68fb      	ldr	r3, [r7, #12]
    baec:	2201      	movs	r2, #1
    baee:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    baf0:	2101      	movs	r1, #1
    baf2:	6878      	ldr	r0, [r7, #4]
    baf4:	4b05      	ldr	r3, [pc, #20]	; (bb0c <n25q256a_enable_xip+0x8c>)
    baf6:	4798      	blx	r3
	}
	return ERR_NONE;
    baf8:	2300      	movs	r3, #0
}
    bafa:	4618      	mov	r0, r3
    bafc:	3714      	adds	r7, #20
    bafe:	46bd      	mov	sp, r7
    bb00:	bd90      	pop	{r4, r7, pc}
    bb02:	bf00      	nop
    bb04:	0000b3ed 	.word	0x0000b3ed
    bb08:	0000b489 	.word	0x0000b489
    bb0c:	0000b321 	.word	0x0000b321

0000bb10 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bb10:	b580      	push	{r7, lr}
    bb12:	b086      	sub	sp, #24
    bb14:	af00      	add	r7, sp, #0
    bb16:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bb18:	687b      	ldr	r3, [r7, #4]
    bb1a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bb1c:	687b      	ldr	r3, [r7, #4]
    bb1e:	681b      	ldr	r3, [r3, #0]
    bb20:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bb22:	697b      	ldr	r3, [r7, #20]
    bb24:	7b1b      	ldrb	r3, [r3, #12]
    bb26:	2b00      	cmp	r3, #0
    bb28:	d001      	beq.n	bb2e <n25q256a_disable_xip+0x1e>
    bb2a:	2306      	movs	r3, #6
    bb2c:	e000      	b.n	bb30 <n25q256a_disable_xip+0x20>
    bb2e:	2300      	movs	r3, #0
    bb30:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bb32:	2100      	movs	r1, #0
    bb34:	6878      	ldr	r0, [r7, #4]
    bb36:	4b15      	ldr	r3, [pc, #84]	; (bb8c <n25q256a_disable_xip+0x7c>)
    bb38:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bb3a:	7bfb      	ldrb	r3, [r7, #15]
    bb3c:	2285      	movs	r2, #133	; 0x85
    bb3e:	4619      	mov	r1, r3
    bb40:	6878      	ldr	r0, [r7, #4]
    bb42:	4b13      	ldr	r3, [pc, #76]	; (bb90 <n25q256a_disable_xip+0x80>)
    bb44:	4798      	blx	r3
    bb46:	4603      	mov	r3, r0
    bb48:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bb4a:	7bbb      	ldrb	r3, [r7, #14]
    bb4c:	f003 0308 	and.w	r3, r3, #8
    bb50:	2b00      	cmp	r3, #0
    bb52:	d113      	bne.n	bb7c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bb54:	697b      	ldr	r3, [r7, #20]
    bb56:	689b      	ldr	r3, [r3, #8]
    bb58:	2b00      	cmp	r3, #0
    bb5a:	d00f      	beq.n	bb7c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bb5c:	693b      	ldr	r3, [r7, #16]
    bb5e:	681b      	ldr	r3, [r3, #0]
    bb60:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bb62:	6938      	ldr	r0, [r7, #16]
    bb64:	4b0b      	ldr	r3, [pc, #44]	; (bb94 <n25q256a_disable_xip+0x84>)
    bb66:	4798      	blx	r3
			n25q->pin_exit_xip();
    bb68:	697b      	ldr	r3, [r7, #20]
    bb6a:	689b      	ldr	r3, [r3, #8]
    bb6c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bb6e:	68b9      	ldr	r1, [r7, #8]
    bb70:	6938      	ldr	r0, [r7, #16]
    bb72:	4b09      	ldr	r3, [pc, #36]	; (bb98 <n25q256a_disable_xip+0x88>)
    bb74:	4798      	blx	r3
			qspi_sync_enable(descr);
    bb76:	6938      	ldr	r0, [r7, #16]
    bb78:	4b08      	ldr	r3, [pc, #32]	; (bb9c <n25q256a_disable_xip+0x8c>)
    bb7a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bb7c:	697b      	ldr	r3, [r7, #20]
    bb7e:	2200      	movs	r2, #0
    bb80:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bb82:	2300      	movs	r3, #0
}
    bb84:	4618      	mov	r0, r3
    bb86:	3718      	adds	r7, #24
    bb88:	46bd      	mov	sp, r7
    bb8a:	bd80      	pop	{r7, pc}
    bb8c:	0000b321 	.word	0x0000b321
    bb90:	0000b3ed 	.word	0x0000b3ed
    bb94:	00002555 	.word	0x00002555
    bb98:	000024cd 	.word	0x000024cd
    bb9c:	00002519 	.word	0x00002519

0000bba0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bba0:	b480      	push	{r7}
    bba2:	b085      	sub	sp, #20
    bba4:	af00      	add	r7, sp, #0
    bba6:	60f8      	str	r0, [r7, #12]
    bba8:	60b9      	str	r1, [r7, #8]
    bbaa:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bbac:	68fb      	ldr	r3, [r7, #12]
    bbae:	68ba      	ldr	r2, [r7, #8]
    bbb0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bbb2:	68fb      	ldr	r3, [r7, #12]
    bbb4:	687a      	ldr	r2, [r7, #4]
    bbb6:	605a      	str	r2, [r3, #4]

	return me;
    bbb8:	68fb      	ldr	r3, [r7, #12]
}
    bbba:	4618      	mov	r0, r3
    bbbc:	3714      	adds	r7, #20
    bbbe:	46bd      	mov	sp, r7
    bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbc4:	4770      	bx	lr

0000bbc6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bbc6:	b480      	push	{r7}
    bbc8:	b083      	sub	sp, #12
    bbca:	af00      	add	r7, sp, #0
    bbcc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bbce:	687b      	ldr	r3, [r7, #4]
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	b29a      	uxth	r2, r3
    bbd4:	687b      	ldr	r3, [r7, #4]
    bbd6:	3301      	adds	r3, #1
    bbd8:	781b      	ldrb	r3, [r3, #0]
    bbda:	b29b      	uxth	r3, r3
    bbdc:	021b      	lsls	r3, r3, #8
    bbde:	b29b      	uxth	r3, r3
    bbe0:	4413      	add	r3, r2
    bbe2:	b29b      	uxth	r3, r3
}
    bbe4:	4618      	mov	r0, r3
    bbe6:	370c      	adds	r7, #12
    bbe8:	46bd      	mov	sp, r7
    bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbee:	4770      	bx	lr

0000bbf0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bbf0:	b480      	push	{r7}
    bbf2:	b083      	sub	sp, #12
    bbf4:	af00      	add	r7, sp, #0
    bbf6:	6078      	str	r0, [r7, #4]
	return desc[0];
    bbf8:	687b      	ldr	r3, [r7, #4]
    bbfa:	781b      	ldrb	r3, [r3, #0]
}
    bbfc:	4618      	mov	r0, r3
    bbfe:	370c      	adds	r7, #12
    bc00:	46bd      	mov	sp, r7
    bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc06:	4770      	bx	lr

0000bc08 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bc08:	b580      	push	{r7, lr}
    bc0a:	b082      	sub	sp, #8
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bc10:	6878      	ldr	r0, [r7, #4]
    bc12:	4b05      	ldr	r3, [pc, #20]	; (bc28 <usb_desc_next+0x20>)
    bc14:	4798      	blx	r3
    bc16:	4603      	mov	r3, r0
    bc18:	461a      	mov	r2, r3
    bc1a:	687b      	ldr	r3, [r7, #4]
    bc1c:	4413      	add	r3, r2
}
    bc1e:	4618      	mov	r0, r3
    bc20:	3708      	adds	r7, #8
    bc22:	46bd      	mov	sp, r7
    bc24:	bd80      	pop	{r7, pc}
    bc26:	bf00      	nop
    bc28:	0000bbf1 	.word	0x0000bbf1

0000bc2c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bc2c:	b580      	push	{r7, lr}
    bc2e:	b08c      	sub	sp, #48	; 0x30
    bc30:	af00      	add	r7, sp, #0
    bc32:	6078      	str	r0, [r7, #4]
    bc34:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bc36:	687b      	ldr	r3, [r7, #4]
    bc38:	689b      	ldr	r3, [r3, #8]
    bc3a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bc3c:	683b      	ldr	r3, [r7, #0]
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bc42:	2300      	movs	r3, #0
    bc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bc48:	e08f      	b.n	bd6a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d102      	bne.n	bc56 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bc50:	f06f 0309 	mvn.w	r3, #9
    bc54:	e092      	b.n	bd7c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc58:	789b      	ldrb	r3, [r3, #2]
    bc5a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc5e:	795b      	ldrb	r3, [r3, #5]
    bc60:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bc62:	7c7b      	ldrb	r3, [r7, #17]
    bc64:	2b02      	cmp	r3, #2
    bc66:	d002      	beq.n	bc6e <cdcdf_acm_enable+0x42>
    bc68:	7c7b      	ldrb	r3, [r7, #17]
    bc6a:	2b0a      	cmp	r3, #10
    bc6c:	d121      	bne.n	bcb2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bc6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc72:	6a3a      	ldr	r2, [r7, #32]
    bc74:	5cd2      	ldrb	r2, [r2, r3]
    bc76:	7bbb      	ldrb	r3, [r7, #14]
    bc78:	429a      	cmp	r2, r3
    bc7a:	d102      	bne.n	bc82 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bc7c:	f06f 0311 	mvn.w	r3, #17
    bc80:	e07c      	b.n	bd7c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bc82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc86:	6a3a      	ldr	r2, [r7, #32]
    bc88:	5cd3      	ldrb	r3, [r2, r3]
    bc8a:	2bff      	cmp	r3, #255	; 0xff
    bc8c:	d002      	beq.n	bc94 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bc8e:	f06f 031b 	mvn.w	r3, #27
    bc92:	e073      	b.n	bd7c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc98:	7bb9      	ldrb	r1, [r7, #14]
    bc9a:	6a3a      	ldr	r2, [r7, #32]
    bc9c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bc9e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bca0:	683b      	ldr	r3, [r7, #0]
    bca2:	685b      	ldr	r3, [r3, #4]
    bca4:	2205      	movs	r2, #5
    bca6:	4619      	mov	r1, r3
    bca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bcaa:	4b36      	ldr	r3, [pc, #216]	; (bd84 <cdcdf_acm_enable+0x158>)
    bcac:	4798      	blx	r3
    bcae:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bcb0:	e047      	b.n	bd42 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bcb2:	f06f 0309 	mvn.w	r3, #9
    bcb6:	e061      	b.n	bd7c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bcba:	789b      	ldrb	r3, [r3, #2]
    bcbc:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bcc0:	78db      	ldrb	r3, [r3, #3]
    bcc2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bcc6:	3304      	adds	r3, #4
    bcc8:	4618      	mov	r0, r3
    bcca:	4b2f      	ldr	r3, [pc, #188]	; (bd88 <cdcdf_acm_enable+0x15c>)
    bccc:	4798      	blx	r3
    bcce:	4603      	mov	r3, r0
    bcd0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bcd2:	7ebb      	ldrb	r3, [r7, #26]
    bcd4:	7ef9      	ldrb	r1, [r7, #27]
    bcd6:	8bba      	ldrh	r2, [r7, #28]
    bcd8:	4618      	mov	r0, r3
    bcda:	4b2c      	ldr	r3, [pc, #176]	; (bd8c <cdcdf_acm_enable+0x160>)
    bcdc:	4798      	blx	r3
    bcde:	4603      	mov	r3, r0
    bce0:	2b00      	cmp	r3, #0
    bce2:	d002      	beq.n	bcea <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bce4:	f06f 0313 	mvn.w	r3, #19
    bce8:	e048      	b.n	bd7c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bcea:	7ebb      	ldrb	r3, [r7, #26]
    bcec:	b25b      	sxtb	r3, r3
    bcee:	2b00      	cmp	r3, #0
    bcf0:	da0f      	bge.n	bd12 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bcf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bcf6:	7eb9      	ldrb	r1, [r7, #26]
    bcf8:	6a3a      	ldr	r2, [r7, #32]
    bcfa:	4413      	add	r3, r2
    bcfc:	460a      	mov	r2, r1
    bcfe:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bd00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd04:	6a3a      	ldr	r2, [r7, #32]
    bd06:	4413      	add	r3, r2
    bd08:	789b      	ldrb	r3, [r3, #2]
    bd0a:	4618      	mov	r0, r3
    bd0c:	4b20      	ldr	r3, [pc, #128]	; (bd90 <cdcdf_acm_enable+0x164>)
    bd0e:	4798      	blx	r3
    bd10:	e007      	b.n	bd22 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bd12:	7eba      	ldrb	r2, [r7, #26]
    bd14:	6a3b      	ldr	r3, [r7, #32]
    bd16:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bd18:	6a3b      	ldr	r3, [r7, #32]
    bd1a:	791b      	ldrb	r3, [r3, #4]
    bd1c:	4618      	mov	r0, r3
    bd1e:	4b1c      	ldr	r3, [pc, #112]	; (bd90 <cdcdf_acm_enable+0x164>)
    bd20:	4798      	blx	r3
			}
			desc->sod = ep;
    bd22:	683b      	ldr	r3, [r7, #0]
    bd24:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bd26:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bd28:	683b      	ldr	r3, [r7, #0]
    bd2a:	681b      	ldr	r3, [r3, #0]
    bd2c:	4618      	mov	r0, r3
    bd2e:	4b19      	ldr	r3, [pc, #100]	; (bd94 <cdcdf_acm_enable+0x168>)
    bd30:	4798      	blx	r3
    bd32:	4602      	mov	r2, r0
    bd34:	683b      	ldr	r3, [r7, #0]
    bd36:	685b      	ldr	r3, [r3, #4]
    bd38:	4619      	mov	r1, r3
    bd3a:	4610      	mov	r0, r2
    bd3c:	4b16      	ldr	r3, [pc, #88]	; (bd98 <cdcdf_acm_enable+0x16c>)
    bd3e:	4798      	blx	r3
    bd40:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd44:	2b00      	cmp	r3, #0
    bd46:	d1b7      	bne.n	bcb8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bd48:	683b      	ldr	r3, [r7, #0]
    bd4a:	681b      	ldr	r3, [r3, #0]
    bd4c:	4618      	mov	r0, r3
    bd4e:	4b11      	ldr	r3, [pc, #68]	; (bd94 <cdcdf_acm_enable+0x168>)
    bd50:	4798      	blx	r3
    bd52:	683b      	ldr	r3, [r7, #0]
    bd54:	685b      	ldr	r3, [r3, #4]
    bd56:	2204      	movs	r2, #4
    bd58:	4619      	mov	r1, r3
    bd5a:	4b0a      	ldr	r3, [pc, #40]	; (bd84 <cdcdf_acm_enable+0x158>)
    bd5c:	4798      	blx	r3
    bd5e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd64:	3301      	adds	r3, #1
    bd66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd6e:	2b01      	cmp	r3, #1
    bd70:	f67f af6b 	bls.w	bc4a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bd74:	4b09      	ldr	r3, [pc, #36]	; (bd9c <cdcdf_acm_enable+0x170>)
    bd76:	2201      	movs	r2, #1
    bd78:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bd7a:	2300      	movs	r3, #0
}
    bd7c:	4618      	mov	r0, r3
    bd7e:	3730      	adds	r7, #48	; 0x30
    bd80:	46bd      	mov	sp, r7
    bd82:	bd80      	pop	{r7, pc}
    bd84:	0000cfed 	.word	0x0000cfed
    bd88:	0000bbc7 	.word	0x0000bbc7
    bd8c:	000034c5 	.word	0x000034c5
    bd90:	000035b1 	.word	0x000035b1
    bd94:	0000bc09 	.word	0x0000bc09
    bd98:	0000d049 	.word	0x0000d049
    bd9c:	20000b70 	.word	0x20000b70

0000bda0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bda0:	b580      	push	{r7, lr}
    bda2:	b088      	sub	sp, #32
    bda4:	af00      	add	r7, sp, #0
    bda6:	6078      	str	r0, [r7, #4]
    bda8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bdaa:	687b      	ldr	r3, [r7, #4]
    bdac:	689b      	ldr	r3, [r3, #8]
    bdae:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bdb0:	683b      	ldr	r3, [r7, #0]
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d00c      	beq.n	bdd0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bdb6:	683b      	ldr	r3, [r7, #0]
    bdb8:	681b      	ldr	r3, [r3, #0]
    bdba:	795b      	ldrb	r3, [r3, #5]
    bdbc:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bdbe:	7c7b      	ldrb	r3, [r7, #17]
    bdc0:	2b02      	cmp	r3, #2
    bdc2:	d005      	beq.n	bdd0 <cdcdf_acm_disable+0x30>
    bdc4:	7c7b      	ldrb	r3, [r7, #17]
    bdc6:	2b0a      	cmp	r3, #10
    bdc8:	d002      	beq.n	bdd0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bdca:	f06f 0309 	mvn.w	r3, #9
    bdce:	e035      	b.n	be3c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bdd0:	2300      	movs	r3, #0
    bdd2:	77fb      	strb	r3, [r7, #31]
    bdd4:	e01f      	b.n	be16 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bdd6:	7ffb      	ldrb	r3, [r7, #31]
    bdd8:	69ba      	ldr	r2, [r7, #24]
    bdda:	5cd3      	ldrb	r3, [r2, r3]
    bddc:	2bff      	cmp	r3, #255	; 0xff
    bdde:	d016      	beq.n	be0e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bde0:	7ffb      	ldrb	r3, [r7, #31]
    bde2:	69ba      	ldr	r2, [r7, #24]
    bde4:	21ff      	movs	r1, #255	; 0xff
    bde6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bde8:	7ffb      	ldrb	r3, [r7, #31]
    bdea:	69ba      	ldr	r2, [r7, #24]
    bdec:	4413      	add	r3, r2
    bdee:	789b      	ldrb	r3, [r3, #2]
    bdf0:	2bff      	cmp	r3, #255	; 0xff
    bdf2:	d00d      	beq.n	be10 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bdf4:	7ffb      	ldrb	r3, [r7, #31]
    bdf6:	69ba      	ldr	r2, [r7, #24]
    bdf8:	4413      	add	r3, r2
    bdfa:	789b      	ldrb	r3, [r3, #2]
    bdfc:	4618      	mov	r0, r3
    bdfe:	4b11      	ldr	r3, [pc, #68]	; (be44 <cdcdf_acm_disable+0xa4>)
    be00:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    be02:	7ffb      	ldrb	r3, [r7, #31]
    be04:	69ba      	ldr	r2, [r7, #24]
    be06:	4413      	add	r3, r2
    be08:	22ff      	movs	r2, #255	; 0xff
    be0a:	709a      	strb	r2, [r3, #2]
    be0c:	e000      	b.n	be10 <cdcdf_acm_disable+0x70>
			continue;
    be0e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    be10:	7ffb      	ldrb	r3, [r7, #31]
    be12:	3301      	adds	r3, #1
    be14:	77fb      	strb	r3, [r7, #31]
    be16:	7ffb      	ldrb	r3, [r7, #31]
    be18:	2b01      	cmp	r3, #1
    be1a:	d9dc      	bls.n	bdd6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    be1c:	69bb      	ldr	r3, [r7, #24]
    be1e:	791b      	ldrb	r3, [r3, #4]
    be20:	2bff      	cmp	r3, #255	; 0xff
    be22:	d007      	beq.n	be34 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    be24:	69bb      	ldr	r3, [r7, #24]
    be26:	791b      	ldrb	r3, [r3, #4]
    be28:	4618      	mov	r0, r3
    be2a:	4b06      	ldr	r3, [pc, #24]	; (be44 <cdcdf_acm_disable+0xa4>)
    be2c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    be2e:	69bb      	ldr	r3, [r7, #24]
    be30:	22ff      	movs	r2, #255	; 0xff
    be32:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    be34:	4b04      	ldr	r3, [pc, #16]	; (be48 <cdcdf_acm_disable+0xa8>)
    be36:	2200      	movs	r2, #0
    be38:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    be3a:	2300      	movs	r3, #0
}
    be3c:	4618      	mov	r0, r3
    be3e:	3720      	adds	r7, #32
    be40:	46bd      	mov	sp, r7
    be42:	bd80      	pop	{r7, pc}
    be44:	00003561 	.word	0x00003561
    be48:	20000b70 	.word	0x20000b70

0000be4c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    be4c:	b580      	push	{r7, lr}
    be4e:	b084      	sub	sp, #16
    be50:	af00      	add	r7, sp, #0
    be52:	60f8      	str	r0, [r7, #12]
    be54:	460b      	mov	r3, r1
    be56:	607a      	str	r2, [r7, #4]
    be58:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    be5a:	7afb      	ldrb	r3, [r7, #11]
    be5c:	2b01      	cmp	r3, #1
    be5e:	d009      	beq.n	be74 <cdcdf_acm_ctrl+0x28>
    be60:	2b02      	cmp	r3, #2
    be62:	d00d      	beq.n	be80 <cdcdf_acm_ctrl+0x34>
    be64:	2b00      	cmp	r3, #0
    be66:	d10e      	bne.n	be86 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    be68:	6879      	ldr	r1, [r7, #4]
    be6a:	68f8      	ldr	r0, [r7, #12]
    be6c:	4b09      	ldr	r3, [pc, #36]	; (be94 <cdcdf_acm_ctrl+0x48>)
    be6e:	4798      	blx	r3
    be70:	4603      	mov	r3, r0
    be72:	e00a      	b.n	be8a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    be74:	6879      	ldr	r1, [r7, #4]
    be76:	68f8      	ldr	r0, [r7, #12]
    be78:	4b07      	ldr	r3, [pc, #28]	; (be98 <cdcdf_acm_ctrl+0x4c>)
    be7a:	4798      	blx	r3
    be7c:	4603      	mov	r3, r0
    be7e:	e004      	b.n	be8a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    be80:	f06f 031a 	mvn.w	r3, #26
    be84:	e001      	b.n	be8a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    be86:	f06f 030c 	mvn.w	r3, #12
	}
}
    be8a:	4618      	mov	r0, r3
    be8c:	3710      	adds	r7, #16
    be8e:	46bd      	mov	sp, r7
    be90:	bd80      	pop	{r7, pc}
    be92:	bf00      	nop
    be94:	0000bc2d 	.word	0x0000bc2d
    be98:	0000bda1 	.word	0x0000bda1

0000be9c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be9c:	b590      	push	{r4, r7, lr}
    be9e:	b087      	sub	sp, #28
    bea0:	af00      	add	r7, sp, #0
    bea2:	4603      	mov	r3, r0
    bea4:	6039      	str	r1, [r7, #0]
    bea6:	71fb      	strb	r3, [r7, #7]
    bea8:	4613      	mov	r3, r2
    beaa:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    beac:	683b      	ldr	r3, [r7, #0]
    beae:	799a      	ldrb	r2, [r3, #6]
    beb0:	79db      	ldrb	r3, [r3, #7]
    beb2:	021b      	lsls	r3, r3, #8
    beb4:	4313      	orrs	r3, r2
    beb6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    beb8:	4b2b      	ldr	r3, [pc, #172]	; (bf68 <cdcdf_acm_set_req+0xcc>)
    beba:	4798      	blx	r3
    bebc:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bebe:	683b      	ldr	r3, [r7, #0]
    bec0:	785b      	ldrb	r3, [r3, #1]
    bec2:	2b20      	cmp	r3, #32
    bec4:	d002      	beq.n	becc <cdcdf_acm_set_req+0x30>
    bec6:	2b22      	cmp	r3, #34	; 0x22
    bec8:	d034      	beq.n	bf34 <cdcdf_acm_set_req+0x98>
    beca:	e046      	b.n	bf5a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    becc:	8afb      	ldrh	r3, [r7, #22]
    bece:	2b07      	cmp	r3, #7
    bed0:	d002      	beq.n	bed8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bed2:	f04f 33ff 	mov.w	r3, #4294967295
    bed6:	e042      	b.n	bf5e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bed8:	79bb      	ldrb	r3, [r7, #6]
    beda:	2b00      	cmp	r3, #0
    bedc:	d107      	bne.n	beee <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bede:	8afa      	ldrh	r2, [r7, #22]
    bee0:	79f8      	ldrb	r0, [r7, #7]
    bee2:	2300      	movs	r3, #0
    bee4:	6939      	ldr	r1, [r7, #16]
    bee6:	4c21      	ldr	r4, [pc, #132]	; (bf6c <cdcdf_acm_set_req+0xd0>)
    bee8:	47a0      	blx	r4
    beea:	4603      	mov	r3, r0
    beec:	e037      	b.n	bf5e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    beee:	693a      	ldr	r2, [r7, #16]
    bef0:	f107 0308 	add.w	r3, r7, #8
    bef4:	6810      	ldr	r0, [r2, #0]
    bef6:	6018      	str	r0, [r3, #0]
    bef8:	8891      	ldrh	r1, [r2, #4]
    befa:	7992      	ldrb	r2, [r2, #6]
    befc:	8099      	strh	r1, [r3, #4]
    befe:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bf00:	4b1b      	ldr	r3, [pc, #108]	; (bf70 <cdcdf_acm_set_req+0xd4>)
    bf02:	681b      	ldr	r3, [r3, #0]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d008      	beq.n	bf1a <cdcdf_acm_set_req+0x7e>
    bf08:	4b19      	ldr	r3, [pc, #100]	; (bf70 <cdcdf_acm_set_req+0xd4>)
    bf0a:	681b      	ldr	r3, [r3, #0]
    bf0c:	f107 0208 	add.w	r2, r7, #8
    bf10:	4610      	mov	r0, r2
    bf12:	4798      	blx	r3
    bf14:	4603      	mov	r3, r0
    bf16:	2b00      	cmp	r3, #0
    bf18:	d00a      	beq.n	bf30 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bf1a:	4b16      	ldr	r3, [pc, #88]	; (bf74 <cdcdf_acm_set_req+0xd8>)
    bf1c:	f107 0208 	add.w	r2, r7, #8
    bf20:	e892 0003 	ldmia.w	r2, {r0, r1}
    bf24:	6018      	str	r0, [r3, #0]
    bf26:	3304      	adds	r3, #4
    bf28:	8019      	strh	r1, [r3, #0]
    bf2a:	3302      	adds	r3, #2
    bf2c:	0c0a      	lsrs	r2, r1, #16
    bf2e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    bf30:	2300      	movs	r3, #0
    bf32:	e014      	b.n	bf5e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    bf34:	2300      	movs	r3, #0
    bf36:	2200      	movs	r2, #0
    bf38:	2100      	movs	r1, #0
    bf3a:	2000      	movs	r0, #0
    bf3c:	4c0b      	ldr	r4, [pc, #44]	; (bf6c <cdcdf_acm_set_req+0xd0>)
    bf3e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bf40:	4b0d      	ldr	r3, [pc, #52]	; (bf78 <cdcdf_acm_set_req+0xdc>)
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	2b00      	cmp	r3, #0
    bf46:	d006      	beq.n	bf56 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    bf48:	4b0b      	ldr	r3, [pc, #44]	; (bf78 <cdcdf_acm_set_req+0xdc>)
    bf4a:	681b      	ldr	r3, [r3, #0]
    bf4c:	683a      	ldr	r2, [r7, #0]
    bf4e:	8852      	ldrh	r2, [r2, #2]
    bf50:	b292      	uxth	r2, r2
    bf52:	4610      	mov	r0, r2
    bf54:	4798      	blx	r3
		}
		return ERR_NONE;
    bf56:	2300      	movs	r3, #0
    bf58:	e001      	b.n	bf5e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    bf5a:	f06f 030c 	mvn.w	r3, #12
	}
}
    bf5e:	4618      	mov	r0, r3
    bf60:	371c      	adds	r7, #28
    bf62:	46bd      	mov	sp, r7
    bf64:	bd90      	pop	{r4, r7, pc}
    bf66:	bf00      	nop
    bf68:	0000cee9 	.word	0x0000cee9
    bf6c:	0000cd5d 	.word	0x0000cd5d
    bf70:	20000b84 	.word	0x20000b84
    bf74:	20000b78 	.word	0x20000b78
    bf78:	20000b80 	.word	0x20000b80

0000bf7c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf7c:	b590      	push	{r4, r7, lr}
    bf7e:	b085      	sub	sp, #20
    bf80:	af00      	add	r7, sp, #0
    bf82:	4603      	mov	r3, r0
    bf84:	6039      	str	r1, [r7, #0]
    bf86:	71fb      	strb	r3, [r7, #7]
    bf88:	4613      	mov	r3, r2
    bf8a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bf8c:	683b      	ldr	r3, [r7, #0]
    bf8e:	799a      	ldrb	r2, [r3, #6]
    bf90:	79db      	ldrb	r3, [r3, #7]
    bf92:	021b      	lsls	r3, r3, #8
    bf94:	4313      	orrs	r3, r2
    bf96:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    bf98:	79bb      	ldrb	r3, [r7, #6]
    bf9a:	2b01      	cmp	r3, #1
    bf9c:	d101      	bne.n	bfa2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    bf9e:	2300      	movs	r3, #0
    bfa0:	e013      	b.n	bfca <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bfa2:	683b      	ldr	r3, [r7, #0]
    bfa4:	785b      	ldrb	r3, [r3, #1]
    bfa6:	2b21      	cmp	r3, #33	; 0x21
    bfa8:	d10d      	bne.n	bfc6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bfaa:	89fb      	ldrh	r3, [r7, #14]
    bfac:	2b07      	cmp	r3, #7
    bfae:	d002      	beq.n	bfb6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bfb0:	f04f 33ff 	mov.w	r3, #4294967295
    bfb4:	e009      	b.n	bfca <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bfb6:	89fa      	ldrh	r2, [r7, #14]
    bfb8:	79f8      	ldrb	r0, [r7, #7]
    bfba:	2300      	movs	r3, #0
    bfbc:	4905      	ldr	r1, [pc, #20]	; (bfd4 <cdcdf_acm_get_req+0x58>)
    bfbe:	4c06      	ldr	r4, [pc, #24]	; (bfd8 <cdcdf_acm_get_req+0x5c>)
    bfc0:	47a0      	blx	r4
    bfc2:	4603      	mov	r3, r0
    bfc4:	e001      	b.n	bfca <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bfc6:	f06f 030c 	mvn.w	r3, #12
	}
}
    bfca:	4618      	mov	r0, r3
    bfcc:	3714      	adds	r7, #20
    bfce:	46bd      	mov	sp, r7
    bfd0:	bd90      	pop	{r4, r7, pc}
    bfd2:	bf00      	nop
    bfd4:	20000b78 	.word	0x20000b78
    bfd8:	0000cd5d 	.word	0x0000cd5d

0000bfdc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bfdc:	b580      	push	{r7, lr}
    bfde:	b082      	sub	sp, #8
    bfe0:	af00      	add	r7, sp, #0
    bfe2:	4603      	mov	r3, r0
    bfe4:	6039      	str	r1, [r7, #0]
    bfe6:	71fb      	strb	r3, [r7, #7]
    bfe8:	4613      	mov	r3, r2
    bfea:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bfec:	683b      	ldr	r3, [r7, #0]
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	095b      	lsrs	r3, r3, #5
    bff2:	b2db      	uxtb	r3, r3
    bff4:	f003 0303 	and.w	r3, r3, #3
    bff8:	2b01      	cmp	r3, #1
    bffa:	d002      	beq.n	c002 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bffc:	f06f 0309 	mvn.w	r3, #9
    c000:	e026      	b.n	c050 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c002:	683b      	ldr	r3, [r7, #0]
    c004:	889b      	ldrh	r3, [r3, #4]
    c006:	b29a      	uxth	r2, r3
    c008:	4b13      	ldr	r3, [pc, #76]	; (c058 <cdcdf_acm_req+0x7c>)
    c00a:	781b      	ldrb	r3, [r3, #0]
    c00c:	b29b      	uxth	r3, r3
    c00e:	429a      	cmp	r2, r3
    c010:	d007      	beq.n	c022 <cdcdf_acm_req+0x46>
    c012:	683b      	ldr	r3, [r7, #0]
    c014:	889b      	ldrh	r3, [r3, #4]
    c016:	b29a      	uxth	r2, r3
    c018:	4b0f      	ldr	r3, [pc, #60]	; (c058 <cdcdf_acm_req+0x7c>)
    c01a:	785b      	ldrb	r3, [r3, #1]
    c01c:	b29b      	uxth	r3, r3
    c01e:	429a      	cmp	r2, r3
    c020:	d114      	bne.n	c04c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c022:	683b      	ldr	r3, [r7, #0]
    c024:	781b      	ldrb	r3, [r3, #0]
    c026:	b25b      	sxtb	r3, r3
    c028:	2b00      	cmp	r3, #0
    c02a:	da07      	bge.n	c03c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c02c:	79ba      	ldrb	r2, [r7, #6]
    c02e:	79fb      	ldrb	r3, [r7, #7]
    c030:	6839      	ldr	r1, [r7, #0]
    c032:	4618      	mov	r0, r3
    c034:	4b09      	ldr	r3, [pc, #36]	; (c05c <cdcdf_acm_req+0x80>)
    c036:	4798      	blx	r3
    c038:	4603      	mov	r3, r0
    c03a:	e009      	b.n	c050 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c03c:	79ba      	ldrb	r2, [r7, #6]
    c03e:	79fb      	ldrb	r3, [r7, #7]
    c040:	6839      	ldr	r1, [r7, #0]
    c042:	4618      	mov	r0, r3
    c044:	4b06      	ldr	r3, [pc, #24]	; (c060 <cdcdf_acm_req+0x84>)
    c046:	4798      	blx	r3
    c048:	4603      	mov	r3, r0
    c04a:	e001      	b.n	c050 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c04c:	f06f 0309 	mvn.w	r3, #9
	}
}
    c050:	4618      	mov	r0, r3
    c052:	3708      	adds	r7, #8
    c054:	46bd      	mov	sp, r7
    c056:	bd80      	pop	{r7, pc}
    c058:	20000b70 	.word	0x20000b70
    c05c:	0000bf7d 	.word	0x0000bf7d
    c060:	0000be9d 	.word	0x0000be9d

0000c064 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c064:	b580      	push	{r7, lr}
    c066:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c068:	4b0b      	ldr	r3, [pc, #44]	; (c098 <cdcdf_acm_init+0x34>)
    c06a:	4798      	blx	r3
    c06c:	4603      	mov	r3, r0
    c06e:	2b01      	cmp	r3, #1
    c070:	d902      	bls.n	c078 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c072:	f06f 0310 	mvn.w	r3, #16
    c076:	e00d      	b.n	c094 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c078:	4b08      	ldr	r3, [pc, #32]	; (c09c <cdcdf_acm_init+0x38>)
    c07a:	4a09      	ldr	r2, [pc, #36]	; (c0a0 <cdcdf_acm_init+0x3c>)
    c07c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c07e:	4b07      	ldr	r3, [pc, #28]	; (c09c <cdcdf_acm_init+0x38>)
    c080:	4a08      	ldr	r2, [pc, #32]	; (c0a4 <cdcdf_acm_init+0x40>)
    c082:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c084:	4805      	ldr	r0, [pc, #20]	; (c09c <cdcdf_acm_init+0x38>)
    c086:	4b08      	ldr	r3, [pc, #32]	; (c0a8 <cdcdf_acm_init+0x44>)
    c088:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c08a:	4908      	ldr	r1, [pc, #32]	; (c0ac <cdcdf_acm_init+0x48>)
    c08c:	2001      	movs	r0, #1
    c08e:	4b08      	ldr	r3, [pc, #32]	; (c0b0 <cdcdf_acm_init+0x4c>)
    c090:	4798      	blx	r3
	return ERR_NONE;
    c092:	2300      	movs	r3, #0
}
    c094:	4618      	mov	r0, r3
    c096:	bd80      	pop	{r7, pc}
    c098:	0000cf01 	.word	0x0000cf01
    c09c:	20000b64 	.word	0x20000b64
    c0a0:	0000be4d 	.word	0x0000be4d
    c0a4:	20000b70 	.word	0x20000b70
    c0a8:	0000ce69 	.word	0x0000ce69
    c0ac:	20000134 	.word	0x20000134
    c0b0:	0000cd99 	.word	0x0000cd99

0000c0b4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c0b4:	b590      	push	{r4, r7, lr}
    c0b6:	b083      	sub	sp, #12
    c0b8:	af00      	add	r7, sp, #0
    c0ba:	6078      	str	r0, [r7, #4]
    c0bc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c0be:	4b0b      	ldr	r3, [pc, #44]	; (c0ec <cdcdf_acm_read+0x38>)
    c0c0:	4798      	blx	r3
    c0c2:	4603      	mov	r3, r0
    c0c4:	f083 0301 	eor.w	r3, r3, #1
    c0c8:	b2db      	uxtb	r3, r3
    c0ca:	2b00      	cmp	r3, #0
    c0cc:	d002      	beq.n	c0d4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c0ce:	f06f 0310 	mvn.w	r3, #16
    c0d2:	e007      	b.n	c0e4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c0d4:	4b06      	ldr	r3, [pc, #24]	; (c0f0 <cdcdf_acm_read+0x3c>)
    c0d6:	7918      	ldrb	r0, [r3, #4]
    c0d8:	2300      	movs	r3, #0
    c0da:	683a      	ldr	r2, [r7, #0]
    c0dc:	6879      	ldr	r1, [r7, #4]
    c0de:	4c05      	ldr	r4, [pc, #20]	; (c0f4 <cdcdf_acm_read+0x40>)
    c0e0:	47a0      	blx	r4
    c0e2:	4603      	mov	r3, r0
}
    c0e4:	4618      	mov	r0, r3
    c0e6:	370c      	adds	r7, #12
    c0e8:	46bd      	mov	sp, r7
    c0ea:	bd90      	pop	{r4, r7, pc}
    c0ec:	0000c1d9 	.word	0x0000c1d9
    c0f0:	20000b70 	.word	0x20000b70
    c0f4:	0000cd5d 	.word	0x0000cd5d

0000c0f8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c0f8:	b590      	push	{r4, r7, lr}
    c0fa:	b083      	sub	sp, #12
    c0fc:	af00      	add	r7, sp, #0
    c0fe:	6078      	str	r0, [r7, #4]
    c100:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c102:	4b0b      	ldr	r3, [pc, #44]	; (c130 <cdcdf_acm_write+0x38>)
    c104:	4798      	blx	r3
    c106:	4603      	mov	r3, r0
    c108:	f083 0301 	eor.w	r3, r3, #1
    c10c:	b2db      	uxtb	r3, r3
    c10e:	2b00      	cmp	r3, #0
    c110:	d002      	beq.n	c118 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c112:	f06f 0310 	mvn.w	r3, #16
    c116:	e007      	b.n	c128 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c118:	4b06      	ldr	r3, [pc, #24]	; (c134 <cdcdf_acm_write+0x3c>)
    c11a:	78d8      	ldrb	r0, [r3, #3]
    c11c:	2301      	movs	r3, #1
    c11e:	683a      	ldr	r2, [r7, #0]
    c120:	6879      	ldr	r1, [r7, #4]
    c122:	4c05      	ldr	r4, [pc, #20]	; (c138 <cdcdf_acm_write+0x40>)
    c124:	47a0      	blx	r4
    c126:	4603      	mov	r3, r0
}
    c128:	4618      	mov	r0, r3
    c12a:	370c      	adds	r7, #12
    c12c:	46bd      	mov	sp, r7
    c12e:	bd90      	pop	{r4, r7, pc}
    c130:	0000c1d9 	.word	0x0000c1d9
    c134:	20000b70 	.word	0x20000b70
    c138:	0000cd5d 	.word	0x0000cd5d

0000c13c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c13c:	b580      	push	{r7, lr}
    c13e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c140:	4b05      	ldr	r3, [pc, #20]	; (c158 <cdcdf_acm_stop_xfer+0x1c>)
    c142:	78db      	ldrb	r3, [r3, #3]
    c144:	4618      	mov	r0, r3
    c146:	4b05      	ldr	r3, [pc, #20]	; (c15c <cdcdf_acm_stop_xfer+0x20>)
    c148:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c14a:	4b03      	ldr	r3, [pc, #12]	; (c158 <cdcdf_acm_stop_xfer+0x1c>)
    c14c:	791b      	ldrb	r3, [r3, #4]
    c14e:	4618      	mov	r0, r3
    c150:	4b02      	ldr	r3, [pc, #8]	; (c15c <cdcdf_acm_stop_xfer+0x20>)
    c152:	4798      	blx	r3
}
    c154:	bf00      	nop
    c156:	bd80      	pop	{r7, pc}
    c158:	20000b70 	.word	0x20000b70
    c15c:	00003789 	.word	0x00003789

0000c160 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c160:	b580      	push	{r7, lr}
    c162:	b082      	sub	sp, #8
    c164:	af00      	add	r7, sp, #0
    c166:	4603      	mov	r3, r0
    c168:	6039      	str	r1, [r7, #0]
    c16a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c16c:	79fb      	ldrb	r3, [r7, #7]
    c16e:	2b03      	cmp	r3, #3
    c170:	d822      	bhi.n	c1b8 <cdcdf_acm_register_callback+0x58>
    c172:	a201      	add	r2, pc, #4	; (adr r2, c178 <cdcdf_acm_register_callback+0x18>)
    c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c178:	0000c189 	.word	0x0000c189
    c17c:	0000c199 	.word	0x0000c199
    c180:	0000c1a9 	.word	0x0000c1a9
    c184:	0000c1b1 	.word	0x0000c1b1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c188:	4b0f      	ldr	r3, [pc, #60]	; (c1c8 <cdcdf_acm_register_callback+0x68>)
    c18a:	791b      	ldrb	r3, [r3, #4]
    c18c:	683a      	ldr	r2, [r7, #0]
    c18e:	2102      	movs	r1, #2
    c190:	4618      	mov	r0, r3
    c192:	4b0e      	ldr	r3, [pc, #56]	; (c1cc <cdcdf_acm_register_callback+0x6c>)
    c194:	4798      	blx	r3
		break;
    c196:	e012      	b.n	c1be <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c198:	4b0b      	ldr	r3, [pc, #44]	; (c1c8 <cdcdf_acm_register_callback+0x68>)
    c19a:	78db      	ldrb	r3, [r3, #3]
    c19c:	683a      	ldr	r2, [r7, #0]
    c19e:	2102      	movs	r1, #2
    c1a0:	4618      	mov	r0, r3
    c1a2:	4b0a      	ldr	r3, [pc, #40]	; (c1cc <cdcdf_acm_register_callback+0x6c>)
    c1a4:	4798      	blx	r3
		break;
    c1a6:	e00a      	b.n	c1be <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c1a8:	4a09      	ldr	r2, [pc, #36]	; (c1d0 <cdcdf_acm_register_callback+0x70>)
    c1aa:	683b      	ldr	r3, [r7, #0]
    c1ac:	6013      	str	r3, [r2, #0]
		break;
    c1ae:	e006      	b.n	c1be <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c1b0:	4a08      	ldr	r2, [pc, #32]	; (c1d4 <cdcdf_acm_register_callback+0x74>)
    c1b2:	683b      	ldr	r3, [r7, #0]
    c1b4:	6013      	str	r3, [r2, #0]
		break;
    c1b6:	e002      	b.n	c1be <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c1b8:	f06f 030c 	mvn.w	r3, #12
    c1bc:	e000      	b.n	c1c0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c1be:	2300      	movs	r3, #0
}
    c1c0:	4618      	mov	r0, r3
    c1c2:	3708      	adds	r7, #8
    c1c4:	46bd      	mov	sp, r7
    c1c6:	bd80      	pop	{r7, pc}
    c1c8:	20000b70 	.word	0x20000b70
    c1cc:	000038b5 	.word	0x000038b5
    c1d0:	20000b84 	.word	0x20000b84
    c1d4:	20000b80 	.word	0x20000b80

0000c1d8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c1d8:	b480      	push	{r7}
    c1da:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c1dc:	4b03      	ldr	r3, [pc, #12]	; (c1ec <cdcdf_acm_is_enabled+0x14>)
    c1de:	795b      	ldrb	r3, [r3, #5]
}
    c1e0:	4618      	mov	r0, r3
    c1e2:	46bd      	mov	sp, r7
    c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1e8:	4770      	bx	lr
    c1ea:	bf00      	nop
    c1ec:	20000b70 	.word	0x20000b70

0000c1f0 <usb_get_u16>:
{
    c1f0:	b480      	push	{r7}
    c1f2:	b083      	sub	sp, #12
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	781b      	ldrb	r3, [r3, #0]
    c1fc:	b29a      	uxth	r2, r3
    c1fe:	687b      	ldr	r3, [r7, #4]
    c200:	3301      	adds	r3, #1
    c202:	781b      	ldrb	r3, [r3, #0]
    c204:	b29b      	uxth	r3, r3
    c206:	021b      	lsls	r3, r3, #8
    c208:	b29b      	uxth	r3, r3
    c20a:	4413      	add	r3, r2
    c20c:	b29b      	uxth	r3, r3
}
    c20e:	4618      	mov	r0, r3
    c210:	370c      	adds	r7, #12
    c212:	46bd      	mov	sp, r7
    c214:	f85d 7b04 	ldr.w	r7, [sp], #4
    c218:	4770      	bx	lr

0000c21a <usb_desc_len>:
{
    c21a:	b480      	push	{r7}
    c21c:	b083      	sub	sp, #12
    c21e:	af00      	add	r7, sp, #0
    c220:	6078      	str	r0, [r7, #4]
	return desc[0];
    c222:	687b      	ldr	r3, [r7, #4]
    c224:	781b      	ldrb	r3, [r3, #0]
}
    c226:	4618      	mov	r0, r3
    c228:	370c      	adds	r7, #12
    c22a:	46bd      	mov	sp, r7
    c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c230:	4770      	bx	lr
	...

0000c234 <usb_desc_next>:
{
    c234:	b580      	push	{r7, lr}
    c236:	b082      	sub	sp, #8
    c238:	af00      	add	r7, sp, #0
    c23a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c23c:	6878      	ldr	r0, [r7, #4]
    c23e:	4b05      	ldr	r3, [pc, #20]	; (c254 <usb_desc_next+0x20>)
    c240:	4798      	blx	r3
    c242:	4603      	mov	r3, r0
    c244:	461a      	mov	r2, r3
    c246:	687b      	ldr	r3, [r7, #4]
    c248:	4413      	add	r3, r2
}
    c24a:	4618      	mov	r0, r3
    c24c:	3708      	adds	r7, #8
    c24e:	46bd      	mov	sp, r7
    c250:	bd80      	pop	{r7, pc}
    c252:	bf00      	nop
    c254:	0000c21b 	.word	0x0000c21b

0000c258 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c258:	b580      	push	{r7, lr}
    c25a:	b082      	sub	sp, #8
    c25c:	af00      	add	r7, sp, #0
    c25e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c260:	687b      	ldr	r3, [r7, #4]
    c262:	3302      	adds	r3, #2
    c264:	4618      	mov	r0, r3
    c266:	4b03      	ldr	r3, [pc, #12]	; (c274 <usb_cfg_desc_total_len+0x1c>)
    c268:	4798      	blx	r3
    c26a:	4603      	mov	r3, r0
}
    c26c:	4618      	mov	r0, r3
    c26e:	3708      	adds	r7, #8
    c270:	46bd      	mov	sp, r7
    c272:	bd80      	pop	{r7, pc}
    c274:	0000c1f1 	.word	0x0000c1f1

0000c278 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c278:	b590      	push	{r4, r7, lr}
    c27a:	b085      	sub	sp, #20
    c27c:	af00      	add	r7, sp, #0
    c27e:	4603      	mov	r3, r0
    c280:	6039      	str	r1, [r7, #0]
    c282:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c284:	2300      	movs	r3, #0
    c286:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c288:	683b      	ldr	r3, [r7, #0]
    c28a:	799a      	ldrb	r2, [r3, #6]
    c28c:	79db      	ldrb	r3, [r3, #7]
    c28e:	021b      	lsls	r3, r3, #8
    c290:	4313      	orrs	r3, r2
    c292:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c294:	897b      	ldrh	r3, [r7, #10]
    c296:	2b12      	cmp	r3, #18
    c298:	d901      	bls.n	c29e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c29a:	2312      	movs	r3, #18
    c29c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c29e:	68fb      	ldr	r3, [r7, #12]
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d10a      	bne.n	c2ba <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c2a4:	4b0f      	ldr	r3, [pc, #60]	; (c2e4 <usbdc_get_dev_desc+0x6c>)
    c2a6:	681b      	ldr	r3, [r3, #0]
    c2a8:	6818      	ldr	r0, [r3, #0]
    c2aa:	4b0e      	ldr	r3, [pc, #56]	; (c2e4 <usbdc_get_dev_desc+0x6c>)
    c2ac:	681b      	ldr	r3, [r3, #0]
    c2ae:	685b      	ldr	r3, [r3, #4]
    c2b0:	2201      	movs	r2, #1
    c2b2:	4619      	mov	r1, r3
    c2b4:	4b0c      	ldr	r3, [pc, #48]	; (c2e8 <usbdc_get_dev_desc+0x70>)
    c2b6:	4798      	blx	r3
    c2b8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c2ba:	68fb      	ldr	r3, [r7, #12]
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d101      	bne.n	c2c4 <usbdc_get_dev_desc+0x4c>
		return false;
    c2c0:	2300      	movs	r3, #0
    c2c2:	e00b      	b.n	c2dc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c2c4:	897a      	ldrh	r2, [r7, #10]
    c2c6:	79f8      	ldrb	r0, [r7, #7]
    c2c8:	2300      	movs	r3, #0
    c2ca:	68f9      	ldr	r1, [r7, #12]
    c2cc:	4c07      	ldr	r4, [pc, #28]	; (c2ec <usbdc_get_dev_desc+0x74>)
    c2ce:	47a0      	blx	r4
    c2d0:	4603      	mov	r3, r0
    c2d2:	2b00      	cmp	r3, #0
    c2d4:	d001      	beq.n	c2da <usbdc_get_dev_desc+0x62>
		return false;
    c2d6:	2300      	movs	r3, #0
    c2d8:	e000      	b.n	c2dc <usbdc_get_dev_desc+0x64>
	}
	return true;
    c2da:	2301      	movs	r3, #1
}
    c2dc:	4618      	mov	r0, r3
    c2de:	3714      	adds	r7, #20
    c2e0:	46bd      	mov	sp, r7
    c2e2:	bd90      	pop	{r4, r7, pc}
    c2e4:	20000b88 	.word	0x20000b88
    c2e8:	0000cfed 	.word	0x0000cfed
    c2ec:	0000cd5d 	.word	0x0000cd5d

0000c2f0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c2f0:	b590      	push	{r4, r7, lr}
    c2f2:	b087      	sub	sp, #28
    c2f4:	af00      	add	r7, sp, #0
    c2f6:	4603      	mov	r3, r0
    c2f8:	6039      	str	r1, [r7, #0]
    c2fa:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c2fc:	2300      	movs	r3, #0
    c2fe:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c300:	683b      	ldr	r3, [r7, #0]
    c302:	799a      	ldrb	r2, [r3, #6]
    c304:	79db      	ldrb	r3, [r3, #7]
    c306:	021b      	lsls	r3, r3, #8
    c308:	4313      	orrs	r3, r2
    c30a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c30c:	683b      	ldr	r3, [r7, #0]
    c30e:	885b      	ldrh	r3, [r3, #2]
    c310:	b29b      	uxth	r3, r3
    c312:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c314:	8a7a      	ldrh	r2, [r7, #18]
    c316:	4b1e      	ldr	r3, [pc, #120]	; (c390 <usbdc_get_cfg_desc+0xa0>)
    c318:	7f1b      	ldrb	r3, [r3, #28]
    c31a:	3b01      	subs	r3, #1
    c31c:	4013      	ands	r3, r2
    c31e:	2b00      	cmp	r3, #0
    c320:	bf0c      	ite	eq
    c322:	2301      	moveq	r3, #1
    c324:	2300      	movne	r3, #0
    c326:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c328:	697b      	ldr	r3, [r7, #20]
    c32a:	2b00      	cmp	r3, #0
    c32c:	d10c      	bne.n	c348 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c32e:	4b18      	ldr	r3, [pc, #96]	; (c390 <usbdc_get_cfg_desc+0xa0>)
    c330:	681b      	ldr	r3, [r3, #0]
    c332:	6818      	ldr	r0, [r3, #0]
    c334:	4b16      	ldr	r3, [pc, #88]	; (c390 <usbdc_get_cfg_desc+0xa0>)
    c336:	681b      	ldr	r3, [r3, #0]
    c338:	6859      	ldr	r1, [r3, #4]
    c33a:	7c3b      	ldrb	r3, [r7, #16]
    c33c:	3301      	adds	r3, #1
    c33e:	b2db      	uxtb	r3, r3
    c340:	461a      	mov	r2, r3
    c342:	4b14      	ldr	r3, [pc, #80]	; (c394 <usbdc_get_cfg_desc+0xa4>)
    c344:	4798      	blx	r3
    c346:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c348:	697b      	ldr	r3, [r7, #20]
    c34a:	2b00      	cmp	r3, #0
    c34c:	d101      	bne.n	c352 <usbdc_get_cfg_desc+0x62>
		return false;
    c34e:	2300      	movs	r3, #0
    c350:	e019      	b.n	c386 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c352:	6978      	ldr	r0, [r7, #20]
    c354:	4b10      	ldr	r3, [pc, #64]	; (c398 <usbdc_get_cfg_desc+0xa8>)
    c356:	4798      	blx	r3
    c358:	4603      	mov	r3, r0
    c35a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c35c:	8a7a      	ldrh	r2, [r7, #18]
    c35e:	89fb      	ldrh	r3, [r7, #14]
    c360:	429a      	cmp	r2, r3
    c362:	d802      	bhi.n	c36a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c364:	2300      	movs	r3, #0
    c366:	747b      	strb	r3, [r7, #17]
    c368:	e001      	b.n	c36e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c36a:	89fb      	ldrh	r3, [r7, #14]
    c36c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c36e:	8a7a      	ldrh	r2, [r7, #18]
    c370:	7c7b      	ldrb	r3, [r7, #17]
    c372:	79f8      	ldrb	r0, [r7, #7]
    c374:	6979      	ldr	r1, [r7, #20]
    c376:	4c09      	ldr	r4, [pc, #36]	; (c39c <usbdc_get_cfg_desc+0xac>)
    c378:	47a0      	blx	r4
    c37a:	4603      	mov	r3, r0
    c37c:	2b00      	cmp	r3, #0
    c37e:	d001      	beq.n	c384 <usbdc_get_cfg_desc+0x94>
		return false;
    c380:	2300      	movs	r3, #0
    c382:	e000      	b.n	c386 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c384:	2301      	movs	r3, #1
}
    c386:	4618      	mov	r0, r3
    c388:	371c      	adds	r7, #28
    c38a:	46bd      	mov	sp, r7
    c38c:	bd90      	pop	{r4, r7, pc}
    c38e:	bf00      	nop
    c390:	20000b88 	.word	0x20000b88
    c394:	0000d0ad 	.word	0x0000d0ad
    c398:	0000c259 	.word	0x0000c259
    c39c:	0000cd5d 	.word	0x0000cd5d

0000c3a0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c3a0:	b590      	push	{r4, r7, lr}
    c3a2:	b085      	sub	sp, #20
    c3a4:	af00      	add	r7, sp, #0
    c3a6:	4603      	mov	r3, r0
    c3a8:	6039      	str	r1, [r7, #0]
    c3aa:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c3ac:	683b      	ldr	r3, [r7, #0]
    c3ae:	799a      	ldrb	r2, [r3, #6]
    c3b0:	79db      	ldrb	r3, [r3, #7]
    c3b2:	021b      	lsls	r3, r3, #8
    c3b4:	4313      	orrs	r3, r2
    c3b6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c3b8:	683b      	ldr	r3, [r7, #0]
    c3ba:	885b      	ldrh	r3, [r3, #2]
    c3bc:	b29b      	uxth	r3, r3
    c3be:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3c0:	89fa      	ldrh	r2, [r7, #14]
    c3c2:	4b1a      	ldr	r3, [pc, #104]	; (c42c <usbdc_get_str_desc+0x8c>)
    c3c4:	7f1b      	ldrb	r3, [r3, #28]
    c3c6:	3b01      	subs	r3, #1
    c3c8:	4013      	ands	r3, r2
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	bf0c      	ite	eq
    c3ce:	2301      	moveq	r3, #1
    c3d0:	2300      	movne	r3, #0
    c3d2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c3d4:	4b15      	ldr	r3, [pc, #84]	; (c42c <usbdc_get_str_desc+0x8c>)
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	6818      	ldr	r0, [r3, #0]
    c3da:	4b14      	ldr	r3, [pc, #80]	; (c42c <usbdc_get_str_desc+0x8c>)
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	685b      	ldr	r3, [r3, #4]
    c3e0:	7b3a      	ldrb	r2, [r7, #12]
    c3e2:	4619      	mov	r1, r3
    c3e4:	4b12      	ldr	r3, [pc, #72]	; (c430 <usbdc_get_str_desc+0x90>)
    c3e6:	4798      	blx	r3
    c3e8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c3ea:	68bb      	ldr	r3, [r7, #8]
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d101      	bne.n	c3f4 <usbdc_get_str_desc+0x54>
		return false;
    c3f0:	2300      	movs	r3, #0
    c3f2:	e017      	b.n	c424 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c3f4:	68bb      	ldr	r3, [r7, #8]
    c3f6:	781b      	ldrb	r3, [r3, #0]
    c3f8:	b29b      	uxth	r3, r3
    c3fa:	89fa      	ldrh	r2, [r7, #14]
    c3fc:	429a      	cmp	r2, r3
    c3fe:	d802      	bhi.n	c406 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c400:	2300      	movs	r3, #0
    c402:	737b      	strb	r3, [r7, #13]
    c404:	e002      	b.n	c40c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c406:	68bb      	ldr	r3, [r7, #8]
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c40c:	89fa      	ldrh	r2, [r7, #14]
    c40e:	7b7b      	ldrb	r3, [r7, #13]
    c410:	79f8      	ldrb	r0, [r7, #7]
    c412:	68b9      	ldr	r1, [r7, #8]
    c414:	4c07      	ldr	r4, [pc, #28]	; (c434 <usbdc_get_str_desc+0x94>)
    c416:	47a0      	blx	r4
    c418:	4603      	mov	r3, r0
    c41a:	2b00      	cmp	r3, #0
    c41c:	d001      	beq.n	c422 <usbdc_get_str_desc+0x82>
		return false;
    c41e:	2300      	movs	r3, #0
    c420:	e000      	b.n	c424 <usbdc_get_str_desc+0x84>
	}
	return true;
    c422:	2301      	movs	r3, #1
}
    c424:	4618      	mov	r0, r3
    c426:	3714      	adds	r7, #20
    c428:	46bd      	mov	sp, r7
    c42a:	bd90      	pop	{r4, r7, pc}
    c42c:	20000b88 	.word	0x20000b88
    c430:	0000d125 	.word	0x0000d125
    c434:	0000cd5d 	.word	0x0000cd5d

0000c438 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c438:	b580      	push	{r7, lr}
    c43a:	b084      	sub	sp, #16
    c43c:	af00      	add	r7, sp, #0
    c43e:	4603      	mov	r3, r0
    c440:	6039      	str	r1, [r7, #0]
    c442:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c444:	683b      	ldr	r3, [r7, #0]
    c446:	885b      	ldrh	r3, [r3, #2]
    c448:	b29b      	uxth	r3, r3
    c44a:	0a1b      	lsrs	r3, r3, #8
    c44c:	b29b      	uxth	r3, r3
    c44e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c450:	7bfb      	ldrb	r3, [r7, #15]
    c452:	2b02      	cmp	r3, #2
    c454:	d00d      	beq.n	c472 <usbdc_get_desc_req+0x3a>
    c456:	2b03      	cmp	r3, #3
    c458:	d012      	beq.n	c480 <usbdc_get_desc_req+0x48>
    c45a:	2b01      	cmp	r3, #1
    c45c:	d002      	beq.n	c464 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c45e:	bf00      	nop
	}
	return false;
    c460:	2300      	movs	r3, #0
    c462:	e013      	b.n	c48c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c464:	79fb      	ldrb	r3, [r7, #7]
    c466:	6839      	ldr	r1, [r7, #0]
    c468:	4618      	mov	r0, r3
    c46a:	4b0a      	ldr	r3, [pc, #40]	; (c494 <usbdc_get_desc_req+0x5c>)
    c46c:	4798      	blx	r3
    c46e:	4603      	mov	r3, r0
    c470:	e00c      	b.n	c48c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c472:	79fb      	ldrb	r3, [r7, #7]
    c474:	6839      	ldr	r1, [r7, #0]
    c476:	4618      	mov	r0, r3
    c478:	4b07      	ldr	r3, [pc, #28]	; (c498 <usbdc_get_desc_req+0x60>)
    c47a:	4798      	blx	r3
    c47c:	4603      	mov	r3, r0
    c47e:	e005      	b.n	c48c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c480:	79fb      	ldrb	r3, [r7, #7]
    c482:	6839      	ldr	r1, [r7, #0]
    c484:	4618      	mov	r0, r3
    c486:	4b05      	ldr	r3, [pc, #20]	; (c49c <usbdc_get_desc_req+0x64>)
    c488:	4798      	blx	r3
    c48a:	4603      	mov	r3, r0
}
    c48c:	4618      	mov	r0, r3
    c48e:	3710      	adds	r7, #16
    c490:	46bd      	mov	sp, r7
    c492:	bd80      	pop	{r7, pc}
    c494:	0000c279 	.word	0x0000c279
    c498:	0000c2f1 	.word	0x0000c2f1
    c49c:	0000c3a1 	.word	0x0000c3a1

0000c4a0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c4a0:	b590      	push	{r4, r7, lr}
    c4a2:	b085      	sub	sp, #20
    c4a4:	af00      	add	r7, sp, #0
    c4a6:	4603      	mov	r3, r0
    c4a8:	6039      	str	r1, [r7, #0]
    c4aa:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c4ac:	683b      	ldr	r3, [r7, #0]
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	f003 031f 	and.w	r3, r3, #31
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	db1b      	blt.n	c4f0 <usbdc_get_status_req+0x50>
    c4b8:	2b01      	cmp	r3, #1
    c4ba:	dd02      	ble.n	c4c2 <usbdc_get_status_req+0x22>
    c4bc:	2b02      	cmp	r3, #2
    c4be:	d003      	beq.n	c4c8 <usbdc_get_status_req+0x28>
    c4c0:	e016      	b.n	c4f0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c4c2:	2300      	movs	r3, #0
    c4c4:	60fb      	str	r3, [r7, #12]
		break;
    c4c6:	e015      	b.n	c4f4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c4c8:	683b      	ldr	r3, [r7, #0]
    c4ca:	889b      	ldrh	r3, [r3, #4]
    c4cc:	b29b      	uxth	r3, r3
    c4ce:	b2db      	uxtb	r3, r3
    c4d0:	2102      	movs	r1, #2
    c4d2:	4618      	mov	r0, r3
    c4d4:	4b0f      	ldr	r3, [pc, #60]	; (c514 <usbdc_get_status_req+0x74>)
    c4d6:	4798      	blx	r3
    c4d8:	4603      	mov	r3, r0
    c4da:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c4dc:	68fb      	ldr	r3, [r7, #12]
    c4de:	2b00      	cmp	r3, #0
    c4e0:	da01      	bge.n	c4e6 <usbdc_get_status_req+0x46>
			return false;
    c4e2:	2300      	movs	r3, #0
    c4e4:	e012      	b.n	c50c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c4e6:	68fb      	ldr	r3, [r7, #12]
    c4e8:	f003 0301 	and.w	r3, r3, #1
    c4ec:	60fb      	str	r3, [r7, #12]
		break;
    c4ee:	e001      	b.n	c4f4 <usbdc_get_status_req+0x54>
	default:
		return false;
    c4f0:	2300      	movs	r3, #0
    c4f2:	e00b      	b.n	c50c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c4f4:	4b08      	ldr	r3, [pc, #32]	; (c518 <usbdc_get_status_req+0x78>)
    c4f6:	695b      	ldr	r3, [r3, #20]
    c4f8:	89ba      	ldrh	r2, [r7, #12]
    c4fa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c4fc:	4b06      	ldr	r3, [pc, #24]	; (c518 <usbdc_get_status_req+0x78>)
    c4fe:	6959      	ldr	r1, [r3, #20]
    c500:	79f8      	ldrb	r0, [r7, #7]
    c502:	2300      	movs	r3, #0
    c504:	2202      	movs	r2, #2
    c506:	4c05      	ldr	r4, [pc, #20]	; (c51c <usbdc_get_status_req+0x7c>)
    c508:	47a0      	blx	r4
	return true;
    c50a:	2301      	movs	r3, #1
}
    c50c:	4618      	mov	r0, r3
    c50e:	3714      	adds	r7, #20
    c510:	46bd      	mov	sp, r7
    c512:	bd90      	pop	{r4, r7, pc}
    c514:	00003861 	.word	0x00003861
    c518:	20000b88 	.word	0x20000b88
    c51c:	0000cd5d 	.word	0x0000cd5d

0000c520 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c520:	b590      	push	{r4, r7, lr}
    c522:	b085      	sub	sp, #20
    c524:	af00      	add	r7, sp, #0
    c526:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c528:	4b1f      	ldr	r3, [pc, #124]	; (c5a8 <usbdc_get_interface+0x88>)
    c52a:	691b      	ldr	r3, [r3, #16]
    c52c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c52e:	4b1e      	ldr	r3, [pc, #120]	; (c5a8 <usbdc_get_interface+0x88>)
    c530:	7f5b      	ldrb	r3, [r3, #29]
    c532:	461a      	mov	r2, r3
    c534:	687b      	ldr	r3, [r7, #4]
    c536:	889b      	ldrh	r3, [r3, #4]
    c538:	b29b      	uxth	r3, r3
    c53a:	fa42 f303 	asr.w	r3, r2, r3
    c53e:	f003 0301 	and.w	r3, r3, #1
    c542:	2b00      	cmp	r3, #0
    c544:	d128      	bne.n	c598 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c546:	4b18      	ldr	r3, [pc, #96]	; (c5a8 <usbdc_get_interface+0x88>)
    c548:	695b      	ldr	r3, [r3, #20]
    c54a:	2200      	movs	r2, #0
    c54c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c54e:	4b16      	ldr	r3, [pc, #88]	; (c5a8 <usbdc_get_interface+0x88>)
    c550:	6959      	ldr	r1, [r3, #20]
    c552:	2300      	movs	r3, #0
    c554:	2201      	movs	r2, #1
    c556:	2000      	movs	r0, #0
    c558:	4c14      	ldr	r4, [pc, #80]	; (c5ac <usbdc_get_interface+0x8c>)
    c55a:	47a0      	blx	r4
		return true;
    c55c:	2301      	movs	r3, #1
    c55e:	e01f      	b.n	c5a0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c560:	68fb      	ldr	r3, [r7, #12]
    c562:	685b      	ldr	r3, [r3, #4]
    c564:	687a      	ldr	r2, [r7, #4]
    c566:	2102      	movs	r1, #2
    c568:	68f8      	ldr	r0, [r7, #12]
    c56a:	4798      	blx	r3
    c56c:	60b8      	str	r0, [r7, #8]
    c56e:	68bb      	ldr	r3, [r7, #8]
    c570:	2b00      	cmp	r3, #0
    c572:	da03      	bge.n	c57c <usbdc_get_interface+0x5c>
			func = func->next;
    c574:	68fb      	ldr	r3, [r7, #12]
    c576:	681b      	ldr	r3, [r3, #0]
    c578:	60fb      	str	r3, [r7, #12]
    c57a:	e00d      	b.n	c598 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c57c:	4b0a      	ldr	r3, [pc, #40]	; (c5a8 <usbdc_get_interface+0x88>)
    c57e:	695b      	ldr	r3, [r3, #20]
    c580:	68ba      	ldr	r2, [r7, #8]
    c582:	b2d2      	uxtb	r2, r2
    c584:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c586:	4b08      	ldr	r3, [pc, #32]	; (c5a8 <usbdc_get_interface+0x88>)
    c588:	6959      	ldr	r1, [r3, #20]
    c58a:	2300      	movs	r3, #0
    c58c:	2201      	movs	r2, #1
    c58e:	2000      	movs	r0, #0
    c590:	4c06      	ldr	r4, [pc, #24]	; (c5ac <usbdc_get_interface+0x8c>)
    c592:	47a0      	blx	r4
			return true;
    c594:	2301      	movs	r3, #1
    c596:	e003      	b.n	c5a0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c598:	68fb      	ldr	r3, [r7, #12]
    c59a:	2b00      	cmp	r3, #0
    c59c:	d1e0      	bne.n	c560 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c59e:	2300      	movs	r3, #0
}
    c5a0:	4618      	mov	r0, r3
    c5a2:	3714      	adds	r7, #20
    c5a4:	46bd      	mov	sp, r7
    c5a6:	bd90      	pop	{r4, r7, pc}
    c5a8:	20000b88 	.word	0x20000b88
    c5ac:	0000cd5d 	.word	0x0000cd5d

0000c5b0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c5b0:	b590      	push	{r4, r7, lr}
    c5b2:	b083      	sub	sp, #12
    c5b4:	af00      	add	r7, sp, #0
    c5b6:	4603      	mov	r3, r0
    c5b8:	6039      	str	r1, [r7, #0]
    c5ba:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c5bc:	683b      	ldr	r3, [r7, #0]
    c5be:	785b      	ldrb	r3, [r3, #1]
    c5c0:	2b0a      	cmp	r3, #10
    c5c2:	d83a      	bhi.n	c63a <usbdc_get_req+0x8a>
    c5c4:	a201      	add	r2, pc, #4	; (adr r2, c5cc <usbdc_get_req+0x1c>)
    c5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c5ca:	bf00      	nop
    c5cc:	0000c623 	.word	0x0000c623
    c5d0:	0000c63b 	.word	0x0000c63b
    c5d4:	0000c63b 	.word	0x0000c63b
    c5d8:	0000c63b 	.word	0x0000c63b
    c5dc:	0000c63b 	.word	0x0000c63b
    c5e0:	0000c63b 	.word	0x0000c63b
    c5e4:	0000c5f9 	.word	0x0000c5f9
    c5e8:	0000c63b 	.word	0x0000c63b
    c5ec:	0000c607 	.word	0x0000c607
    c5f0:	0000c63b 	.word	0x0000c63b
    c5f4:	0000c631 	.word	0x0000c631
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c5f8:	79fb      	ldrb	r3, [r7, #7]
    c5fa:	6839      	ldr	r1, [r7, #0]
    c5fc:	4618      	mov	r0, r3
    c5fe:	4b11      	ldr	r3, [pc, #68]	; (c644 <usbdc_get_req+0x94>)
    c600:	4798      	blx	r3
    c602:	4603      	mov	r3, r0
    c604:	e01a      	b.n	c63c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c606:	4b10      	ldr	r3, [pc, #64]	; (c648 <usbdc_get_req+0x98>)
    c608:	695b      	ldr	r3, [r3, #20]
    c60a:	4a0f      	ldr	r2, [pc, #60]	; (c648 <usbdc_get_req+0x98>)
    c60c:	7ed2      	ldrb	r2, [r2, #27]
    c60e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c610:	4b0d      	ldr	r3, [pc, #52]	; (c648 <usbdc_get_req+0x98>)
    c612:	6959      	ldr	r1, [r3, #20]
    c614:	79f8      	ldrb	r0, [r7, #7]
    c616:	2300      	movs	r3, #0
    c618:	2201      	movs	r2, #1
    c61a:	4c0c      	ldr	r4, [pc, #48]	; (c64c <usbdc_get_req+0x9c>)
    c61c:	47a0      	blx	r4
		return true;
    c61e:	2301      	movs	r3, #1
    c620:	e00c      	b.n	c63c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c622:	79fb      	ldrb	r3, [r7, #7]
    c624:	6839      	ldr	r1, [r7, #0]
    c626:	4618      	mov	r0, r3
    c628:	4b09      	ldr	r3, [pc, #36]	; (c650 <usbdc_get_req+0xa0>)
    c62a:	4798      	blx	r3
    c62c:	4603      	mov	r3, r0
    c62e:	e005      	b.n	c63c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c630:	6838      	ldr	r0, [r7, #0]
    c632:	4b08      	ldr	r3, [pc, #32]	; (c654 <usbdc_get_req+0xa4>)
    c634:	4798      	blx	r3
    c636:	4603      	mov	r3, r0
    c638:	e000      	b.n	c63c <usbdc_get_req+0x8c>
	default:
		return false;
    c63a:	2300      	movs	r3, #0
	}
}
    c63c:	4618      	mov	r0, r3
    c63e:	370c      	adds	r7, #12
    c640:	46bd      	mov	sp, r7
    c642:	bd90      	pop	{r4, r7, pc}
    c644:	0000c439 	.word	0x0000c439
    c648:	20000b88 	.word	0x20000b88
    c64c:	0000cd5d 	.word	0x0000cd5d
    c650:	0000c4a1 	.word	0x0000c4a1
    c654:	0000c521 	.word	0x0000c521

0000c658 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c658:	b590      	push	{r4, r7, lr}
    c65a:	b083      	sub	sp, #12
    c65c:	af00      	add	r7, sp, #0
    c65e:	4603      	mov	r3, r0
    c660:	6039      	str	r1, [r7, #0]
    c662:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c664:	683b      	ldr	r3, [r7, #0]
    c666:	781b      	ldrb	r3, [r3, #0]
    c668:	f003 031f 	and.w	r3, r3, #31
    c66c:	2b02      	cmp	r3, #2
    c66e:	d116      	bne.n	c69e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c670:	683b      	ldr	r3, [r7, #0]
    c672:	88db      	ldrh	r3, [r3, #6]
    c674:	b29b      	uxth	r3, r3
    c676:	2b00      	cmp	r3, #0
    c678:	d001      	beq.n	c67e <usbdc_clear_ftr_req+0x26>
			return false;
    c67a:	2300      	movs	r3, #0
    c67c:	e010      	b.n	c6a0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c67e:	683b      	ldr	r3, [r7, #0]
    c680:	889b      	ldrh	r3, [r3, #4]
    c682:	b29b      	uxth	r3, r3
    c684:	b2db      	uxtb	r3, r3
    c686:	2100      	movs	r1, #0
    c688:	4618      	mov	r0, r3
    c68a:	4b07      	ldr	r3, [pc, #28]	; (c6a8 <usbdc_clear_ftr_req+0x50>)
    c68c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c68e:	79f8      	ldrb	r0, [r7, #7]
    c690:	2301      	movs	r3, #1
    c692:	2200      	movs	r2, #0
    c694:	2100      	movs	r1, #0
    c696:	4c05      	ldr	r4, [pc, #20]	; (c6ac <usbdc_clear_ftr_req+0x54>)
    c698:	47a0      	blx	r4
		return true;
    c69a:	2301      	movs	r3, #1
    c69c:	e000      	b.n	c6a0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c69e:	2300      	movs	r3, #0
	}
}
    c6a0:	4618      	mov	r0, r3
    c6a2:	370c      	adds	r7, #12
    c6a4:	46bd      	mov	sp, r7
    c6a6:	bd90      	pop	{r4, r7, pc}
    c6a8:	00003861 	.word	0x00003861
    c6ac:	0000cd5d 	.word	0x0000cd5d

0000c6b0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c6b0:	b590      	push	{r4, r7, lr}
    c6b2:	b083      	sub	sp, #12
    c6b4:	af00      	add	r7, sp, #0
    c6b6:	4603      	mov	r3, r0
    c6b8:	6039      	str	r1, [r7, #0]
    c6ba:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c6bc:	683b      	ldr	r3, [r7, #0]
    c6be:	781b      	ldrb	r3, [r3, #0]
    c6c0:	f003 031f 	and.w	r3, r3, #31
    c6c4:	2b02      	cmp	r3, #2
    c6c6:	d116      	bne.n	c6f6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c6c8:	683b      	ldr	r3, [r7, #0]
    c6ca:	88db      	ldrh	r3, [r3, #6]
    c6cc:	b29b      	uxth	r3, r3
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d001      	beq.n	c6d6 <usbdc_set_ftr_req+0x26>
			return false;
    c6d2:	2300      	movs	r3, #0
    c6d4:	e010      	b.n	c6f8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c6d6:	683b      	ldr	r3, [r7, #0]
    c6d8:	889b      	ldrh	r3, [r3, #4]
    c6da:	b29b      	uxth	r3, r3
    c6dc:	b2db      	uxtb	r3, r3
    c6de:	2101      	movs	r1, #1
    c6e0:	4618      	mov	r0, r3
    c6e2:	4b07      	ldr	r3, [pc, #28]	; (c700 <usbdc_set_ftr_req+0x50>)
    c6e4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c6e6:	79f8      	ldrb	r0, [r7, #7]
    c6e8:	2301      	movs	r3, #1
    c6ea:	2200      	movs	r2, #0
    c6ec:	2100      	movs	r1, #0
    c6ee:	4c05      	ldr	r4, [pc, #20]	; (c704 <usbdc_set_ftr_req+0x54>)
    c6f0:	47a0      	blx	r4
		return true;
    c6f2:	2301      	movs	r3, #1
    c6f4:	e000      	b.n	c6f8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c6f6:	2300      	movs	r3, #0
	}
}
    c6f8:	4618      	mov	r0, r3
    c6fa:	370c      	adds	r7, #12
    c6fc:	46bd      	mov	sp, r7
    c6fe:	bd90      	pop	{r4, r7, pc}
    c700:	00003861 	.word	0x00003861
    c704:	0000cd5d 	.word	0x0000cd5d

0000c708 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c708:	b580      	push	{r7, lr}
    c70a:	b082      	sub	sp, #8
    c70c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c70e:	4b0a      	ldr	r3, [pc, #40]	; (c738 <usbdc_unconfig+0x30>)
    c710:	691b      	ldr	r3, [r3, #16]
    c712:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c714:	e008      	b.n	c728 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c716:	687b      	ldr	r3, [r7, #4]
    c718:	685b      	ldr	r3, [r3, #4]
    c71a:	2200      	movs	r2, #0
    c71c:	2101      	movs	r1, #1
    c71e:	6878      	ldr	r0, [r7, #4]
    c720:	4798      	blx	r3
		func = func->next;
    c722:	687b      	ldr	r3, [r7, #4]
    c724:	681b      	ldr	r3, [r3, #0]
    c726:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	2b00      	cmp	r3, #0
    c72c:	d1f3      	bne.n	c716 <usbdc_unconfig+0xe>
	}
}
    c72e:	bf00      	nop
    c730:	3708      	adds	r7, #8
    c732:	46bd      	mov	sp, r7
    c734:	bd80      	pop	{r7, pc}
    c736:	bf00      	nop
    c738:	20000b88 	.word	0x20000b88

0000c73c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c73c:	b580      	push	{r7, lr}
    c73e:	b088      	sub	sp, #32
    c740:	af00      	add	r7, sp, #0
    c742:	4603      	mov	r3, r0
    c744:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c746:	2300      	movs	r3, #0
    c748:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c74a:	23ff      	movs	r3, #255	; 0xff
    c74c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c74e:	79fb      	ldrb	r3, [r7, #7]
    c750:	2b00      	cmp	r3, #0
    c752:	d103      	bne.n	c75c <usbdc_set_config+0x20>
		usbdc_unconfig();
    c754:	4b2e      	ldr	r3, [pc, #184]	; (c810 <usbdc_set_config+0xd4>)
    c756:	4798      	blx	r3
		return true;
    c758:	2301      	movs	r3, #1
    c75a:	e055      	b.n	c808 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c75c:	69bb      	ldr	r3, [r7, #24]
    c75e:	2b00      	cmp	r3, #0
    c760:	d10a      	bne.n	c778 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c762:	4b2c      	ldr	r3, [pc, #176]	; (c814 <usbdc_set_config+0xd8>)
    c764:	681b      	ldr	r3, [r3, #0]
    c766:	6818      	ldr	r0, [r3, #0]
    c768:	4b2a      	ldr	r3, [pc, #168]	; (c814 <usbdc_set_config+0xd8>)
    c76a:	681b      	ldr	r3, [r3, #0]
    c76c:	685b      	ldr	r3, [r3, #4]
    c76e:	79fa      	ldrb	r2, [r7, #7]
    c770:	4619      	mov	r1, r3
    c772:	4b29      	ldr	r3, [pc, #164]	; (c818 <usbdc_set_config+0xdc>)
    c774:	4798      	blx	r3
    c776:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c778:	69bb      	ldr	r3, [r7, #24]
    c77a:	2b00      	cmp	r3, #0
    c77c:	d101      	bne.n	c782 <usbdc_set_config+0x46>
		return false;
    c77e:	2300      	movs	r3, #0
    c780:	e042      	b.n	c808 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c782:	69b8      	ldr	r0, [r7, #24]
    c784:	4b25      	ldr	r3, [pc, #148]	; (c81c <usbdc_set_config+0xe0>)
    c786:	4798      	blx	r3
    c788:	4603      	mov	r3, r0
    c78a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c78c:	8abb      	ldrh	r3, [r7, #20]
    c78e:	69ba      	ldr	r2, [r7, #24]
    c790:	4413      	add	r3, r2
    c792:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c794:	693b      	ldr	r3, [r7, #16]
    c796:	2204      	movs	r2, #4
    c798:	4619      	mov	r1, r3
    c79a:	69b8      	ldr	r0, [r7, #24]
    c79c:	4b20      	ldr	r3, [pc, #128]	; (c820 <usbdc_set_config+0xe4>)
    c79e:	4798      	blx	r3
    c7a0:	4603      	mov	r3, r0
    c7a2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c7a4:	e02c      	b.n	c800 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c7a6:	68fb      	ldr	r3, [r7, #12]
    c7a8:	3302      	adds	r3, #2
    c7aa:	781b      	ldrb	r3, [r3, #0]
    c7ac:	7dfa      	ldrb	r2, [r7, #23]
    c7ae:	429a      	cmp	r2, r3
    c7b0:	d018      	beq.n	c7e4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c7b2:	68fb      	ldr	r3, [r7, #12]
    c7b4:	789b      	ldrb	r3, [r3, #2]
    c7b6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c7b8:	4b16      	ldr	r3, [pc, #88]	; (c814 <usbdc_set_config+0xd8>)
    c7ba:	691b      	ldr	r3, [r3, #16]
    c7bc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c7be:	e00c      	b.n	c7da <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c7c0:	69fb      	ldr	r3, [r7, #28]
    c7c2:	685b      	ldr	r3, [r3, #4]
    c7c4:	f107 020c 	add.w	r2, r7, #12
    c7c8:	2100      	movs	r1, #0
    c7ca:	69f8      	ldr	r0, [r7, #28]
    c7cc:	4798      	blx	r3
    c7ce:	4603      	mov	r3, r0
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d006      	beq.n	c7e2 <usbdc_set_config+0xa6>
					func = func->next;
    c7d4:	69fb      	ldr	r3, [r7, #28]
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c7da:	69fb      	ldr	r3, [r7, #28]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d1ef      	bne.n	c7c0 <usbdc_set_config+0x84>
    c7e0:	e000      	b.n	c7e4 <usbdc_set_config+0xa8>
				} else {
					break;
    c7e2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c7e4:	68fb      	ldr	r3, [r7, #12]
    c7e6:	4618      	mov	r0, r3
    c7e8:	4b0e      	ldr	r3, [pc, #56]	; (c824 <usbdc_set_config+0xe8>)
    c7ea:	4798      	blx	r3
    c7ec:	4603      	mov	r3, r0
    c7ee:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c7f0:	68fb      	ldr	r3, [r7, #12]
    c7f2:	6939      	ldr	r1, [r7, #16]
    c7f4:	2204      	movs	r2, #4
    c7f6:	4618      	mov	r0, r3
    c7f8:	4b09      	ldr	r3, [pc, #36]	; (c820 <usbdc_set_config+0xe4>)
    c7fa:	4798      	blx	r3
    c7fc:	4603      	mov	r3, r0
    c7fe:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c800:	68fb      	ldr	r3, [r7, #12]
    c802:	2b00      	cmp	r3, #0
    c804:	d1cf      	bne.n	c7a6 <usbdc_set_config+0x6a>
	}
	return true;
    c806:	2301      	movs	r3, #1
}
    c808:	4618      	mov	r0, r3
    c80a:	3720      	adds	r7, #32
    c80c:	46bd      	mov	sp, r7
    c80e:	bd80      	pop	{r7, pc}
    c810:	0000c709 	.word	0x0000c709
    c814:	20000b88 	.word	0x20000b88
    c818:	0000d0ad 	.word	0x0000d0ad
    c81c:	0000c259 	.word	0x0000c259
    c820:	0000cfed 	.word	0x0000cfed
    c824:	0000c235 	.word	0x0000c235

0000c828 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c828:	b580      	push	{r7, lr}
    c82a:	b082      	sub	sp, #8
    c82c:	af00      	add	r7, sp, #0
    c82e:	4603      	mov	r3, r0
    c830:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c832:	79fb      	ldrb	r3, [r7, #7]
    c834:	4618      	mov	r0, r3
    c836:	4b03      	ldr	r3, [pc, #12]	; (c844 <usbdc_set_address+0x1c>)
    c838:	4798      	blx	r3
}
    c83a:	bf00      	nop
    c83c:	3708      	adds	r7, #8
    c83e:	46bd      	mov	sp, r7
    c840:	bd80      	pop	{r7, pc}
    c842:	bf00      	nop
    c844:	0000347d 	.word	0x0000347d

0000c848 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c848:	b590      	push	{r4, r7, lr}
    c84a:	b087      	sub	sp, #28
    c84c:	af00      	add	r7, sp, #0
    c84e:	4603      	mov	r3, r0
    c850:	460a      	mov	r2, r1
    c852:	80fb      	strh	r3, [r7, #6]
    c854:	4613      	mov	r3, r2
    c856:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c858:	2300      	movs	r3, #0
    c85a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c85c:	693b      	ldr	r3, [r7, #16]
    c85e:	2b00      	cmp	r3, #0
    c860:	d10b      	bne.n	c87a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c862:	4b43      	ldr	r3, [pc, #268]	; (c970 <usbdc_set_interface+0x128>)
    c864:	681b      	ldr	r3, [r3, #0]
    c866:	6818      	ldr	r0, [r3, #0]
    c868:	4b41      	ldr	r3, [pc, #260]	; (c970 <usbdc_set_interface+0x128>)
    c86a:	681b      	ldr	r3, [r3, #0]
    c86c:	6859      	ldr	r1, [r3, #4]
    c86e:	4b40      	ldr	r3, [pc, #256]	; (c970 <usbdc_set_interface+0x128>)
    c870:	7edb      	ldrb	r3, [r3, #27]
    c872:	461a      	mov	r2, r3
    c874:	4b3f      	ldr	r3, [pc, #252]	; (c974 <usbdc_set_interface+0x12c>)
    c876:	4798      	blx	r3
    c878:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c87a:	693b      	ldr	r3, [r7, #16]
    c87c:	2b00      	cmp	r3, #0
    c87e:	d101      	bne.n	c884 <usbdc_set_interface+0x3c>
		return false;
    c880:	2300      	movs	r3, #0
    c882:	e071      	b.n	c968 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c884:	693b      	ldr	r3, [r7, #16]
    c886:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c888:	6938      	ldr	r0, [r7, #16]
    c88a:	4b3b      	ldr	r3, [pc, #236]	; (c978 <usbdc_set_interface+0x130>)
    c88c:	4798      	blx	r3
    c88e:	4603      	mov	r3, r0
    c890:	461a      	mov	r2, r3
    c892:	693b      	ldr	r3, [r7, #16]
    c894:	4413      	add	r3, r2
    c896:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c898:	68bb      	ldr	r3, [r7, #8]
    c89a:	68f9      	ldr	r1, [r7, #12]
    c89c:	2204      	movs	r2, #4
    c89e:	4618      	mov	r0, r3
    c8a0:	4b36      	ldr	r3, [pc, #216]	; (c97c <usbdc_set_interface+0x134>)
    c8a2:	4798      	blx	r3
    c8a4:	6138      	str	r0, [r7, #16]
    c8a6:	693b      	ldr	r3, [r7, #16]
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d113      	bne.n	c8d4 <usbdc_set_interface+0x8c>
		return false;
    c8ac:	2300      	movs	r3, #0
    c8ae:	e05b      	b.n	c968 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c8b0:	68bb      	ldr	r3, [r7, #8]
    c8b2:	4618      	mov	r0, r3
    c8b4:	4b32      	ldr	r3, [pc, #200]	; (c980 <usbdc_set_interface+0x138>)
    c8b6:	4798      	blx	r3
    c8b8:	4603      	mov	r3, r0
    c8ba:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c8bc:	68bb      	ldr	r3, [r7, #8]
    c8be:	68f9      	ldr	r1, [r7, #12]
    c8c0:	2204      	movs	r2, #4
    c8c2:	4618      	mov	r0, r3
    c8c4:	4b2d      	ldr	r3, [pc, #180]	; (c97c <usbdc_set_interface+0x134>)
    c8c6:	4798      	blx	r3
    c8c8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c8ca:	693b      	ldr	r3, [r7, #16]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d101      	bne.n	c8d4 <usbdc_set_interface+0x8c>
			return false;
    c8d0:	2300      	movs	r3, #0
    c8d2:	e049      	b.n	c968 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c8d4:	693b      	ldr	r3, [r7, #16]
    c8d6:	3302      	adds	r3, #2
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	b29b      	uxth	r3, r3
    c8dc:	88ba      	ldrh	r2, [r7, #4]
    c8de:	429a      	cmp	r2, r3
    c8e0:	d1e6      	bne.n	c8b0 <usbdc_set_interface+0x68>
    c8e2:	693b      	ldr	r3, [r7, #16]
    c8e4:	3303      	adds	r3, #3
    c8e6:	781b      	ldrb	r3, [r3, #0]
    c8e8:	b29b      	uxth	r3, r3
    c8ea:	88fa      	ldrh	r2, [r7, #6]
    c8ec:	429a      	cmp	r2, r3
    c8ee:	d1df      	bne.n	c8b0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c8f0:	693b      	ldr	r3, [r7, #16]
    c8f2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c8f4:	4b1e      	ldr	r3, [pc, #120]	; (c970 <usbdc_set_interface+0x128>)
    c8f6:	691b      	ldr	r3, [r3, #16]
    c8f8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c8fa:	e031      	b.n	c960 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c8fc:	697b      	ldr	r3, [r7, #20]
    c8fe:	685b      	ldr	r3, [r3, #4]
    c900:	f107 0208 	add.w	r2, r7, #8
    c904:	2101      	movs	r1, #1
    c906:	6978      	ldr	r0, [r7, #20]
    c908:	4798      	blx	r3
    c90a:	4603      	mov	r3, r0
    c90c:	2b00      	cmp	r3, #0
    c90e:	d003      	beq.n	c918 <usbdc_set_interface+0xd0>
			func = func->next;
    c910:	697b      	ldr	r3, [r7, #20]
    c912:	681b      	ldr	r3, [r3, #0]
    c914:	617b      	str	r3, [r7, #20]
    c916:	e023      	b.n	c960 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c918:	697b      	ldr	r3, [r7, #20]
    c91a:	685b      	ldr	r3, [r3, #4]
    c91c:	f107 0208 	add.w	r2, r7, #8
    c920:	2100      	movs	r1, #0
    c922:	6978      	ldr	r0, [r7, #20]
    c924:	4798      	blx	r3
    c926:	4603      	mov	r3, r0
    c928:	2b00      	cmp	r3, #0
    c92a:	d117      	bne.n	c95c <usbdc_set_interface+0x114>
			if (alt_set) {
    c92c:	88fb      	ldrh	r3, [r7, #6]
    c92e:	2b00      	cmp	r3, #0
    c930:	d00c      	beq.n	c94c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c932:	4b0f      	ldr	r3, [pc, #60]	; (c970 <usbdc_set_interface+0x128>)
    c934:	7f5b      	ldrb	r3, [r3, #29]
    c936:	b25a      	sxtb	r2, r3
    c938:	88bb      	ldrh	r3, [r7, #4]
    c93a:	2101      	movs	r1, #1
    c93c:	fa01 f303 	lsl.w	r3, r1, r3
    c940:	b25b      	sxtb	r3, r3
    c942:	4313      	orrs	r3, r2
    c944:	b25b      	sxtb	r3, r3
    c946:	b2da      	uxtb	r2, r3
    c948:	4b09      	ldr	r3, [pc, #36]	; (c970 <usbdc_set_interface+0x128>)
    c94a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c94c:	2300      	movs	r3, #0
    c94e:	2200      	movs	r2, #0
    c950:	2100      	movs	r1, #0
    c952:	2000      	movs	r0, #0
    c954:	4c0b      	ldr	r4, [pc, #44]	; (c984 <usbdc_set_interface+0x13c>)
    c956:	47a0      	blx	r4
			return true;
    c958:	2301      	movs	r3, #1
    c95a:	e005      	b.n	c968 <usbdc_set_interface+0x120>
		} else {
			return false;
    c95c:	2300      	movs	r3, #0
    c95e:	e003      	b.n	c968 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c960:	697b      	ldr	r3, [r7, #20]
    c962:	2b00      	cmp	r3, #0
    c964:	d1ca      	bne.n	c8fc <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c966:	2300      	movs	r3, #0
}
    c968:	4618      	mov	r0, r3
    c96a:	371c      	adds	r7, #28
    c96c:	46bd      	mov	sp, r7
    c96e:	bd90      	pop	{r4, r7, pc}
    c970:	20000b88 	.word	0x20000b88
    c974:	0000d0ad 	.word	0x0000d0ad
    c978:	0000c259 	.word	0x0000c259
    c97c:	0000cfed 	.word	0x0000cfed
    c980:	0000c235 	.word	0x0000c235
    c984:	0000cd5d 	.word	0x0000cd5d

0000c988 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c988:	b590      	push	{r4, r7, lr}
    c98a:	b083      	sub	sp, #12
    c98c:	af00      	add	r7, sp, #0
    c98e:	4603      	mov	r3, r0
    c990:	6039      	str	r1, [r7, #0]
    c992:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c994:	683b      	ldr	r3, [r7, #0]
    c996:	785b      	ldrb	r3, [r3, #1]
    c998:	3b01      	subs	r3, #1
    c99a:	2b0a      	cmp	r3, #10
    c99c:	d85b      	bhi.n	ca56 <usbdc_set_req+0xce>
    c99e:	a201      	add	r2, pc, #4	; (adr r2, c9a4 <usbdc_set_req+0x1c>)
    c9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c9a4:	0000ca23 	.word	0x0000ca23
    c9a8:	0000ca57 	.word	0x0000ca57
    c9ac:	0000ca31 	.word	0x0000ca31
    c9b0:	0000ca57 	.word	0x0000ca57
    c9b4:	0000c9d1 	.word	0x0000c9d1
    c9b8:	0000ca57 	.word	0x0000ca57
    c9bc:	0000ca57 	.word	0x0000ca57
    c9c0:	0000ca57 	.word	0x0000ca57
    c9c4:	0000c9eb 	.word	0x0000c9eb
    c9c8:	0000ca57 	.word	0x0000ca57
    c9cc:	0000ca3f 	.word	0x0000ca3f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c9d0:	79f8      	ldrb	r0, [r7, #7]
    c9d2:	2301      	movs	r3, #1
    c9d4:	2200      	movs	r2, #0
    c9d6:	2100      	movs	r1, #0
    c9d8:	4c21      	ldr	r4, [pc, #132]	; (ca60 <usbdc_set_req+0xd8>)
    c9da:	47a0      	blx	r4
    c9dc:	4603      	mov	r3, r0
    c9de:	2b00      	cmp	r3, #0
    c9e0:	bf0c      	ite	eq
    c9e2:	2301      	moveq	r3, #1
    c9e4:	2300      	movne	r3, #0
    c9e6:	b2db      	uxtb	r3, r3
    c9e8:	e036      	b.n	ca58 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c9ea:	683b      	ldr	r3, [r7, #0]
    c9ec:	885b      	ldrh	r3, [r3, #2]
    c9ee:	b29b      	uxth	r3, r3
    c9f0:	b2db      	uxtb	r3, r3
    c9f2:	4618      	mov	r0, r3
    c9f4:	4b1b      	ldr	r3, [pc, #108]	; (ca64 <usbdc_set_req+0xdc>)
    c9f6:	4798      	blx	r3
    c9f8:	4603      	mov	r3, r0
    c9fa:	f083 0301 	eor.w	r3, r3, #1
    c9fe:	b2db      	uxtb	r3, r3
    ca00:	2b00      	cmp	r3, #0
    ca02:	d001      	beq.n	ca08 <usbdc_set_req+0x80>
			return false;
    ca04:	2300      	movs	r3, #0
    ca06:	e027      	b.n	ca58 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ca08:	79f8      	ldrb	r0, [r7, #7]
    ca0a:	2301      	movs	r3, #1
    ca0c:	2200      	movs	r2, #0
    ca0e:	2100      	movs	r1, #0
    ca10:	4c13      	ldr	r4, [pc, #76]	; (ca60 <usbdc_set_req+0xd8>)
    ca12:	47a0      	blx	r4
    ca14:	4603      	mov	r3, r0
    ca16:	2b00      	cmp	r3, #0
    ca18:	bf0c      	ite	eq
    ca1a:	2301      	moveq	r3, #1
    ca1c:	2300      	movne	r3, #0
    ca1e:	b2db      	uxtb	r3, r3
    ca20:	e01a      	b.n	ca58 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    ca22:	79fb      	ldrb	r3, [r7, #7]
    ca24:	6839      	ldr	r1, [r7, #0]
    ca26:	4618      	mov	r0, r3
    ca28:	4b0f      	ldr	r3, [pc, #60]	; (ca68 <usbdc_set_req+0xe0>)
    ca2a:	4798      	blx	r3
    ca2c:	4603      	mov	r3, r0
    ca2e:	e013      	b.n	ca58 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    ca30:	79fb      	ldrb	r3, [r7, #7]
    ca32:	6839      	ldr	r1, [r7, #0]
    ca34:	4618      	mov	r0, r3
    ca36:	4b0d      	ldr	r3, [pc, #52]	; (ca6c <usbdc_set_req+0xe4>)
    ca38:	4798      	blx	r3
    ca3a:	4603      	mov	r3, r0
    ca3c:	e00c      	b.n	ca58 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    ca3e:	683b      	ldr	r3, [r7, #0]
    ca40:	885b      	ldrh	r3, [r3, #2]
    ca42:	b29a      	uxth	r2, r3
    ca44:	683b      	ldr	r3, [r7, #0]
    ca46:	889b      	ldrh	r3, [r3, #4]
    ca48:	b29b      	uxth	r3, r3
    ca4a:	4619      	mov	r1, r3
    ca4c:	4610      	mov	r0, r2
    ca4e:	4b08      	ldr	r3, [pc, #32]	; (ca70 <usbdc_set_req+0xe8>)
    ca50:	4798      	blx	r3
    ca52:	4603      	mov	r3, r0
    ca54:	e000      	b.n	ca58 <usbdc_set_req+0xd0>
	default:
		return false;
    ca56:	2300      	movs	r3, #0
	}
}
    ca58:	4618      	mov	r0, r3
    ca5a:	370c      	adds	r7, #12
    ca5c:	46bd      	mov	sp, r7
    ca5e:	bd90      	pop	{r4, r7, pc}
    ca60:	0000cd5d 	.word	0x0000cd5d
    ca64:	0000c73d 	.word	0x0000c73d
    ca68:	0000c659 	.word	0x0000c659
    ca6c:	0000c6b1 	.word	0x0000c6b1
    ca70:	0000c849 	.word	0x0000c849

0000ca74 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    ca74:	b580      	push	{r7, lr}
    ca76:	b082      	sub	sp, #8
    ca78:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    ca7a:	4b0a      	ldr	r3, [pc, #40]	; (caa4 <usbdc_sof_notify+0x30>)
    ca7c:	685b      	ldr	r3, [r3, #4]
    ca7e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    ca80:	e009      	b.n	ca96 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    ca82:	687b      	ldr	r3, [r7, #4]
    ca84:	685b      	ldr	r3, [r3, #4]
    ca86:	2b00      	cmp	r3, #0
    ca88:	d002      	beq.n	ca90 <usbdc_sof_notify+0x1c>
			sof->cb();
    ca8a:	687b      	ldr	r3, [r7, #4]
    ca8c:	685b      	ldr	r3, [r3, #4]
    ca8e:	4798      	blx	r3
		}
		sof = sof->next;
    ca90:	687b      	ldr	r3, [r7, #4]
    ca92:	681b      	ldr	r3, [r3, #0]
    ca94:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    ca96:	687b      	ldr	r3, [r7, #4]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d1f2      	bne.n	ca82 <usbdc_sof_notify+0xe>
	}
}
    ca9c:	bf00      	nop
    ca9e:	3708      	adds	r7, #8
    caa0:	46bd      	mov	sp, r7
    caa2:	bd80      	pop	{r7, pc}
    caa4:	20000b88 	.word	0x20000b88

0000caa8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    caa8:	b580      	push	{r7, lr}
    caaa:	b084      	sub	sp, #16
    caac:	af00      	add	r7, sp, #0
    caae:	4603      	mov	r3, r0
    cab0:	6039      	str	r1, [r7, #0]
    cab2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cab4:	4b0b      	ldr	r3, [pc, #44]	; (cae4 <usbdc_change_notify+0x3c>)
    cab6:	68db      	ldr	r3, [r3, #12]
    cab8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    caba:	e00c      	b.n	cad6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cabc:	68fb      	ldr	r3, [r7, #12]
    cabe:	685b      	ldr	r3, [r3, #4]
    cac0:	2b00      	cmp	r3, #0
    cac2:	d005      	beq.n	cad0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cac4:	68fb      	ldr	r3, [r7, #12]
    cac6:	685b      	ldr	r3, [r3, #4]
    cac8:	79fa      	ldrb	r2, [r7, #7]
    caca:	6839      	ldr	r1, [r7, #0]
    cacc:	4610      	mov	r0, r2
    cace:	4798      	blx	r3
		}
		cg = cg->next;
    cad0:	68fb      	ldr	r3, [r7, #12]
    cad2:	681b      	ldr	r3, [r3, #0]
    cad4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cad6:	68fb      	ldr	r3, [r7, #12]
    cad8:	2b00      	cmp	r3, #0
    cada:	d1ef      	bne.n	cabc <usbdc_change_notify+0x14>
	}
}
    cadc:	bf00      	nop
    cade:	3710      	adds	r7, #16
    cae0:	46bd      	mov	sp, r7
    cae2:	bd80      	pop	{r7, pc}
    cae4:	20000b88 	.word	0x20000b88

0000cae8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cae8:	b580      	push	{r7, lr}
    caea:	b084      	sub	sp, #16
    caec:	af00      	add	r7, sp, #0
    caee:	4603      	mov	r3, r0
    caf0:	6039      	str	r1, [r7, #0]
    caf2:	71fb      	strb	r3, [r7, #7]
    caf4:	4613      	mov	r3, r2
    caf6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    caf8:	4b12      	ldr	r3, [pc, #72]	; (cb44 <usbdc_request_handler+0x5c>)
    cafa:	689b      	ldr	r3, [r3, #8]
    cafc:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cafe:	e019      	b.n	cb34 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cb00:	68fb      	ldr	r3, [r7, #12]
    cb02:	685b      	ldr	r3, [r3, #4]
    cb04:	2b00      	cmp	r3, #0
    cb06:	d012      	beq.n	cb2e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cb08:	68fb      	ldr	r3, [r7, #12]
    cb0a:	685b      	ldr	r3, [r3, #4]
    cb0c:	79ba      	ldrb	r2, [r7, #6]
    cb0e:	79f8      	ldrb	r0, [r7, #7]
    cb10:	6839      	ldr	r1, [r7, #0]
    cb12:	4798      	blx	r3
    cb14:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cb16:	68bb      	ldr	r3, [r7, #8]
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d101      	bne.n	cb20 <usbdc_request_handler+0x38>
				return true;
    cb1c:	2301      	movs	r3, #1
    cb1e:	e00d      	b.n	cb3c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cb20:	68bb      	ldr	r3, [r7, #8]
    cb22:	f113 0f0a 	cmn.w	r3, #10
    cb26:	d002      	beq.n	cb2e <usbdc_request_handler+0x46>
				return -1;
    cb28:	f04f 33ff 	mov.w	r3, #4294967295
    cb2c:	e006      	b.n	cb3c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cb2e:	68fb      	ldr	r3, [r7, #12]
    cb30:	681b      	ldr	r3, [r3, #0]
    cb32:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cb34:	68fb      	ldr	r3, [r7, #12]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d1e2      	bne.n	cb00 <usbdc_request_handler+0x18>
	}
	return false;
    cb3a:	2300      	movs	r3, #0
}
    cb3c:	4618      	mov	r0, r3
    cb3e:	3710      	adds	r7, #16
    cb40:	46bd      	mov	sp, r7
    cb42:	bd80      	pop	{r7, pc}
    cb44:	20000b88 	.word	0x20000b88

0000cb48 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cb48:	b580      	push	{r7, lr}
    cb4a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cb4c:	4b01      	ldr	r3, [pc, #4]	; (cb54 <usbd_sof_cb+0xc>)
    cb4e:	4798      	blx	r3
}
    cb50:	bf00      	nop
    cb52:	bd80      	pop	{r7, pc}
    cb54:	0000ca75 	.word	0x0000ca75

0000cb58 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cb58:	b580      	push	{r7, lr}
    cb5a:	b082      	sub	sp, #8
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	4603      	mov	r3, r0
    cb60:	6039      	str	r1, [r7, #0]
    cb62:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cb64:	79fb      	ldrb	r3, [r7, #7]
    cb66:	2200      	movs	r2, #0
    cb68:	6839      	ldr	r1, [r7, #0]
    cb6a:	4618      	mov	r0, r3
    cb6c:	4b14      	ldr	r3, [pc, #80]	; (cbc0 <usbdc_cb_ctl_req+0x68>)
    cb6e:	4798      	blx	r3
    cb70:	4603      	mov	r3, r0
    cb72:	f1b3 3fff 	cmp.w	r3, #4294967295
    cb76:	d00b      	beq.n	cb90 <usbdc_cb_ctl_req+0x38>
    cb78:	2b01      	cmp	r3, #1
    cb7a:	d007      	beq.n	cb8c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cb7c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cb7e:	683b      	ldr	r3, [r7, #0]
    cb80:	781b      	ldrb	r3, [r3, #0]
    cb82:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cb86:	2b00      	cmp	r3, #0
    cb88:	d007      	beq.n	cb9a <usbdc_cb_ctl_req+0x42>
    cb8a:	e003      	b.n	cb94 <usbdc_cb_ctl_req+0x3c>
		return true;
    cb8c:	2301      	movs	r3, #1
    cb8e:	e013      	b.n	cbb8 <usbdc_cb_ctl_req+0x60>
		return false;
    cb90:	2300      	movs	r3, #0
    cb92:	e011      	b.n	cbb8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cb94:	2b80      	cmp	r3, #128	; 0x80
    cb96:	d007      	beq.n	cba8 <usbdc_cb_ctl_req+0x50>
    cb98:	e00d      	b.n	cbb6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cb9a:	79fb      	ldrb	r3, [r7, #7]
    cb9c:	6839      	ldr	r1, [r7, #0]
    cb9e:	4618      	mov	r0, r3
    cba0:	4b08      	ldr	r3, [pc, #32]	; (cbc4 <usbdc_cb_ctl_req+0x6c>)
    cba2:	4798      	blx	r3
    cba4:	4603      	mov	r3, r0
    cba6:	e007      	b.n	cbb8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cba8:	79fb      	ldrb	r3, [r7, #7]
    cbaa:	6839      	ldr	r1, [r7, #0]
    cbac:	4618      	mov	r0, r3
    cbae:	4b06      	ldr	r3, [pc, #24]	; (cbc8 <usbdc_cb_ctl_req+0x70>)
    cbb0:	4798      	blx	r3
    cbb2:	4603      	mov	r3, r0
    cbb4:	e000      	b.n	cbb8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cbb6:	2300      	movs	r3, #0
	}
}
    cbb8:	4618      	mov	r0, r3
    cbba:	3708      	adds	r7, #8
    cbbc:	46bd      	mov	sp, r7
    cbbe:	bd80      	pop	{r7, pc}
    cbc0:	0000cae9 	.word	0x0000cae9
    cbc4:	0000c989 	.word	0x0000c989
    cbc8:	0000c5b1 	.word	0x0000c5b1

0000cbcc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cbcc:	b580      	push	{r7, lr}
    cbce:	b082      	sub	sp, #8
    cbd0:	af00      	add	r7, sp, #0
    cbd2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	781b      	ldrb	r3, [r3, #0]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d135      	bne.n	cc48 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cbdc:	687b      	ldr	r3, [r7, #4]
    cbde:	785b      	ldrb	r3, [r3, #1]
    cbe0:	2b05      	cmp	r3, #5
    cbe2:	d019      	beq.n	cc18 <usbdc_ctrl_status_end+0x4c>
    cbe4:	2b09      	cmp	r3, #9
    cbe6:	d000      	beq.n	cbea <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cbe8:	e02f      	b.n	cc4a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	885b      	ldrh	r3, [r3, #2]
    cbee:	b29b      	uxth	r3, r3
    cbf0:	b2da      	uxtb	r2, r3
    cbf2:	4b17      	ldr	r3, [pc, #92]	; (cc50 <usbdc_ctrl_status_end+0x84>)
    cbf4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	885b      	ldrh	r3, [r3, #2]
    cbfa:	b29b      	uxth	r3, r3
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	d001      	beq.n	cc04 <usbdc_ctrl_status_end+0x38>
    cc00:	2204      	movs	r2, #4
    cc02:	e000      	b.n	cc06 <usbdc_ctrl_status_end+0x3a>
    cc04:	2203      	movs	r2, #3
    cc06:	4b12      	ldr	r3, [pc, #72]	; (cc50 <usbdc_ctrl_status_end+0x84>)
    cc08:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cc0a:	4b11      	ldr	r3, [pc, #68]	; (cc50 <usbdc_ctrl_status_end+0x84>)
    cc0c:	7e9b      	ldrb	r3, [r3, #26]
    cc0e:	4619      	mov	r1, r3
    cc10:	2001      	movs	r0, #1
    cc12:	4b10      	ldr	r3, [pc, #64]	; (cc54 <usbdc_ctrl_status_end+0x88>)
    cc14:	4798      	blx	r3
		break;
    cc16:	e018      	b.n	cc4a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cc18:	687b      	ldr	r3, [r7, #4]
    cc1a:	885b      	ldrh	r3, [r3, #2]
    cc1c:	b29b      	uxth	r3, r3
    cc1e:	b2db      	uxtb	r3, r3
    cc20:	4618      	mov	r0, r3
    cc22:	4b0d      	ldr	r3, [pc, #52]	; (cc58 <usbdc_ctrl_status_end+0x8c>)
    cc24:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cc26:	687b      	ldr	r3, [r7, #4]
    cc28:	885b      	ldrh	r3, [r3, #2]
    cc2a:	b29b      	uxth	r3, r3
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d001      	beq.n	cc34 <usbdc_ctrl_status_end+0x68>
    cc30:	2203      	movs	r2, #3
    cc32:	e000      	b.n	cc36 <usbdc_ctrl_status_end+0x6a>
    cc34:	2202      	movs	r2, #2
    cc36:	4b06      	ldr	r3, [pc, #24]	; (cc50 <usbdc_ctrl_status_end+0x84>)
    cc38:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cc3a:	4b05      	ldr	r3, [pc, #20]	; (cc50 <usbdc_ctrl_status_end+0x84>)
    cc3c:	7e9b      	ldrb	r3, [r3, #26]
    cc3e:	4619      	mov	r1, r3
    cc40:	2001      	movs	r0, #1
    cc42:	4b04      	ldr	r3, [pc, #16]	; (cc54 <usbdc_ctrl_status_end+0x88>)
    cc44:	4798      	blx	r3
		break;
    cc46:	e000      	b.n	cc4a <usbdc_ctrl_status_end+0x7e>
		return;
    cc48:	bf00      	nop
	}
}
    cc4a:	3708      	adds	r7, #8
    cc4c:	46bd      	mov	sp, r7
    cc4e:	bd80      	pop	{r7, pc}
    cc50:	20000b88 	.word	0x20000b88
    cc54:	0000caa9 	.word	0x0000caa9
    cc58:	0000c829 	.word	0x0000c829

0000cc5c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cc5c:	b580      	push	{r7, lr}
    cc5e:	b082      	sub	sp, #8
    cc60:	af00      	add	r7, sp, #0
    cc62:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cc64:	2201      	movs	r2, #1
    cc66:	6879      	ldr	r1, [r7, #4]
    cc68:	2000      	movs	r0, #0
    cc6a:	4b03      	ldr	r3, [pc, #12]	; (cc78 <usbdc_ctrl_data_end+0x1c>)
    cc6c:	4798      	blx	r3
	return false;
    cc6e:	2300      	movs	r3, #0
}
    cc70:	4618      	mov	r0, r3
    cc72:	3708      	adds	r7, #8
    cc74:	46bd      	mov	sp, r7
    cc76:	bd80      	pop	{r7, pc}
    cc78:	0000cae9 	.word	0x0000cae9

0000cc7c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cc7c:	b580      	push	{r7, lr}
    cc7e:	b082      	sub	sp, #8
    cc80:	af00      	add	r7, sp, #0
    cc82:	4603      	mov	r3, r0
    cc84:	603a      	str	r2, [r7, #0]
    cc86:	71fb      	strb	r3, [r7, #7]
    cc88:	460b      	mov	r3, r1
    cc8a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cc8c:	79bb      	ldrb	r3, [r7, #6]
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d002      	beq.n	cc98 <usbdc_cb_ctl_done+0x1c>
    cc92:	2b01      	cmp	r3, #1
    cc94:	d004      	beq.n	cca0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cc96:	e008      	b.n	ccaa <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cc98:	6838      	ldr	r0, [r7, #0]
    cc9a:	4b06      	ldr	r3, [pc, #24]	; (ccb4 <usbdc_cb_ctl_done+0x38>)
    cc9c:	4798      	blx	r3
		break;
    cc9e:	e004      	b.n	ccaa <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cca0:	6838      	ldr	r0, [r7, #0]
    cca2:	4b05      	ldr	r3, [pc, #20]	; (ccb8 <usbdc_cb_ctl_done+0x3c>)
    cca4:	4798      	blx	r3
    cca6:	4603      	mov	r3, r0
    cca8:	e000      	b.n	ccac <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ccaa:	2300      	movs	r3, #0
}
    ccac:	4618      	mov	r0, r3
    ccae:	3708      	adds	r7, #8
    ccb0:	46bd      	mov	sp, r7
    ccb2:	bd80      	pop	{r7, pc}
    ccb4:	0000cbcd 	.word	0x0000cbcd
    ccb8:	0000cc5d 	.word	0x0000cc5d

0000ccbc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ccc0:	4b10      	ldr	r3, [pc, #64]	; (cd04 <usbdc_reset+0x48>)
    ccc2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ccc4:	4b10      	ldr	r3, [pc, #64]	; (cd08 <usbdc_reset+0x4c>)
    ccc6:	2202      	movs	r2, #2
    ccc8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ccca:	4b0f      	ldr	r3, [pc, #60]	; (cd08 <usbdc_reset+0x4c>)
    cccc:	2200      	movs	r2, #0
    ccce:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    ccd0:	4b0d      	ldr	r3, [pc, #52]	; (cd08 <usbdc_reset+0x4c>)
    ccd2:	2200      	movs	r2, #0
    ccd4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ccd6:	2000      	movs	r0, #0
    ccd8:	4b0c      	ldr	r3, [pc, #48]	; (cd0c <usbdc_reset+0x50>)
    ccda:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ccdc:	4b0a      	ldr	r3, [pc, #40]	; (cd08 <usbdc_reset+0x4c>)
    ccde:	7f1b      	ldrb	r3, [r3, #28]
    cce0:	4618      	mov	r0, r3
    cce2:	4b0b      	ldr	r3, [pc, #44]	; (cd10 <usbdc_reset+0x54>)
    cce4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cce6:	4a0b      	ldr	r2, [pc, #44]	; (cd14 <usbdc_reset+0x58>)
    cce8:	2100      	movs	r1, #0
    ccea:	2000      	movs	r0, #0
    ccec:	4b0a      	ldr	r3, [pc, #40]	; (cd18 <usbdc_reset+0x5c>)
    ccee:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ccf0:	4a0a      	ldr	r2, [pc, #40]	; (cd1c <usbdc_reset+0x60>)
    ccf2:	2102      	movs	r1, #2
    ccf4:	2000      	movs	r0, #0
    ccf6:	4b08      	ldr	r3, [pc, #32]	; (cd18 <usbdc_reset+0x5c>)
    ccf8:	4798      	blx	r3
	usb_d_ep_enable(0);
    ccfa:	2000      	movs	r0, #0
    ccfc:	4b08      	ldr	r3, [pc, #32]	; (cd20 <usbdc_reset+0x64>)
    ccfe:	4798      	blx	r3
}
    cd00:	bf00      	nop
    cd02:	bd80      	pop	{r7, pc}
    cd04:	0000c709 	.word	0x0000c709
    cd08:	20000b88 	.word	0x20000b88
    cd0c:	00003561 	.word	0x00003561
    cd10:	0000349d 	.word	0x0000349d
    cd14:	0000cb59 	.word	0x0000cb59
    cd18:	000038b5 	.word	0x000038b5
    cd1c:	0000cc7d 	.word	0x0000cc7d
    cd20:	000035b1 	.word	0x000035b1

0000cd24 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cd24:	b580      	push	{r7, lr}
    cd26:	b082      	sub	sp, #8
    cd28:	af00      	add	r7, sp, #0
    cd2a:	4603      	mov	r3, r0
    cd2c:	6039      	str	r1, [r7, #0]
    cd2e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cd30:	79fb      	ldrb	r3, [r7, #7]
    cd32:	2b00      	cmp	r3, #0
    cd34:	d002      	beq.n	cd3c <usbd_event_cb+0x18>
    cd36:	2b01      	cmp	r3, #1
    cd38:	d005      	beq.n	cd46 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cd3a:	e007      	b.n	cd4c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cd3c:	6839      	ldr	r1, [r7, #0]
    cd3e:	2000      	movs	r0, #0
    cd40:	4b04      	ldr	r3, [pc, #16]	; (cd54 <usbd_event_cb+0x30>)
    cd42:	4798      	blx	r3
		break;
    cd44:	e002      	b.n	cd4c <usbd_event_cb+0x28>
		usbdc_reset();
    cd46:	4b04      	ldr	r3, [pc, #16]	; (cd58 <usbd_event_cb+0x34>)
    cd48:	4798      	blx	r3
		break;
    cd4a:	bf00      	nop
	}
}
    cd4c:	bf00      	nop
    cd4e:	3708      	adds	r7, #8
    cd50:	46bd      	mov	sp, r7
    cd52:	bd80      	pop	{r7, pc}
    cd54:	0000caa9 	.word	0x0000caa9
    cd58:	0000ccbd 	.word	0x0000ccbd

0000cd5c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cd5c:	b580      	push	{r7, lr}
    cd5e:	b088      	sub	sp, #32
    cd60:	af00      	add	r7, sp, #0
    cd62:	60b9      	str	r1, [r7, #8]
    cd64:	607a      	str	r2, [r7, #4]
    cd66:	461a      	mov	r2, r3
    cd68:	4603      	mov	r3, r0
    cd6a:	73fb      	strb	r3, [r7, #15]
    cd6c:	4613      	mov	r3, r2
    cd6e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cd70:	68bb      	ldr	r3, [r7, #8]
    cd72:	617b      	str	r3, [r7, #20]
    cd74:	687b      	ldr	r3, [r7, #4]
    cd76:	61bb      	str	r3, [r7, #24]
    cd78:	7bfb      	ldrb	r3, [r7, #15]
    cd7a:	773b      	strb	r3, [r7, #28]
    cd7c:	7bbb      	ldrb	r3, [r7, #14]
    cd7e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cd80:	f107 0314 	add.w	r3, r7, #20
    cd84:	4618      	mov	r0, r3
    cd86:	4b03      	ldr	r3, [pc, #12]	; (cd94 <usbdc_xfer+0x38>)
    cd88:	4798      	blx	r3
    cd8a:	4603      	mov	r3, r0
}
    cd8c:	4618      	mov	r0, r3
    cd8e:	3720      	adds	r7, #32
    cd90:	46bd      	mov	sp, r7
    cd92:	bd80      	pop	{r7, pc}
    cd94:	00003621 	.word	0x00003621

0000cd98 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	b082      	sub	sp, #8
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	4603      	mov	r3, r0
    cda0:	6039      	str	r1, [r7, #0]
    cda2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cda4:	79fb      	ldrb	r3, [r7, #7]
    cda6:	2b01      	cmp	r3, #1
    cda8:	d009      	beq.n	cdbe <usbdc_register_handler+0x26>
    cdaa:	2b02      	cmp	r3, #2
    cdac:	d00c      	beq.n	cdc8 <usbdc_register_handler+0x30>
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d000      	beq.n	cdb4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cdb2:	e00e      	b.n	cdd2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cdb4:	6839      	ldr	r1, [r7, #0]
    cdb6:	4809      	ldr	r0, [pc, #36]	; (cddc <usbdc_register_handler+0x44>)
    cdb8:	4b09      	ldr	r3, [pc, #36]	; (cde0 <usbdc_register_handler+0x48>)
    cdba:	4798      	blx	r3
		break;
    cdbc:	e009      	b.n	cdd2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cdbe:	6839      	ldr	r1, [r7, #0]
    cdc0:	4808      	ldr	r0, [pc, #32]	; (cde4 <usbdc_register_handler+0x4c>)
    cdc2:	4b07      	ldr	r3, [pc, #28]	; (cde0 <usbdc_register_handler+0x48>)
    cdc4:	4798      	blx	r3
		break;
    cdc6:	e004      	b.n	cdd2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cdc8:	6839      	ldr	r1, [r7, #0]
    cdca:	4807      	ldr	r0, [pc, #28]	; (cde8 <usbdc_register_handler+0x50>)
    cdcc:	4b04      	ldr	r3, [pc, #16]	; (cde0 <usbdc_register_handler+0x48>)
    cdce:	4798      	blx	r3
		break;
    cdd0:	bf00      	nop
	}
}
    cdd2:	bf00      	nop
    cdd4:	3708      	adds	r7, #8
    cdd6:	46bd      	mov	sp, r7
    cdd8:	bd80      	pop	{r7, pc}
    cdda:	bf00      	nop
    cddc:	20000b8c 	.word	0x20000b8c
    cde0:	00003a0d 	.word	0x00003a0d
    cde4:	20000b90 	.word	0x20000b90
    cde8:	20000b94 	.word	0x20000b94

0000cdec <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cdec:	b580      	push	{r7, lr}
    cdee:	b084      	sub	sp, #16
    cdf0:	af00      	add	r7, sp, #0
    cdf2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cdf4:	687b      	ldr	r3, [r7, #4]
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	bf14      	ite	ne
    cdfa:	2301      	movne	r3, #1
    cdfc:	2300      	moveq	r3, #0
    cdfe:	b2db      	uxtb	r3, r3
    ce00:	f240 3255 	movw	r2, #853	; 0x355
    ce04:	4910      	ldr	r1, [pc, #64]	; (ce48 <usbdc_init+0x5c>)
    ce06:	4618      	mov	r0, r3
    ce08:	4b10      	ldr	r3, [pc, #64]	; (ce4c <usbdc_init+0x60>)
    ce0a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    ce0c:	4b10      	ldr	r3, [pc, #64]	; (ce50 <usbdc_init+0x64>)
    ce0e:	4798      	blx	r3
    ce10:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    ce12:	68fb      	ldr	r3, [r7, #12]
    ce14:	2b00      	cmp	r3, #0
    ce16:	da01      	bge.n	ce1c <usbdc_init+0x30>
		return rc;
    ce18:	68fb      	ldr	r3, [r7, #12]
    ce1a:	e010      	b.n	ce3e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ce1c:	2220      	movs	r2, #32
    ce1e:	2100      	movs	r1, #0
    ce20:	480c      	ldr	r0, [pc, #48]	; (ce54 <usbdc_init+0x68>)
    ce22:	4b0d      	ldr	r3, [pc, #52]	; (ce58 <usbdc_init+0x6c>)
    ce24:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ce26:	4a0b      	ldr	r2, [pc, #44]	; (ce54 <usbdc_init+0x68>)
    ce28:	687b      	ldr	r3, [r7, #4]
    ce2a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ce2c:	490b      	ldr	r1, [pc, #44]	; (ce5c <usbdc_init+0x70>)
    ce2e:	2000      	movs	r0, #0
    ce30:	4b0b      	ldr	r3, [pc, #44]	; (ce60 <usbdc_init+0x74>)
    ce32:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    ce34:	490b      	ldr	r1, [pc, #44]	; (ce64 <usbdc_init+0x78>)
    ce36:	2001      	movs	r0, #1
    ce38:	4b09      	ldr	r3, [pc, #36]	; (ce60 <usbdc_init+0x74>)
    ce3a:	4798      	blx	r3

	return 0;
    ce3c:	2300      	movs	r3, #0
}
    ce3e:	4618      	mov	r0, r3
    ce40:	3710      	adds	r7, #16
    ce42:	46bd      	mov	sp, r7
    ce44:	bd80      	pop	{r7, pc}
    ce46:	bf00      	nop
    ce48:	0000f03c 	.word	0x0000f03c
    ce4c:	00003931 	.word	0x00003931
    ce50:	00003389 	.word	0x00003389
    ce54:	20000b88 	.word	0x20000b88
    ce58:	0000e95d 	.word	0x0000e95d
    ce5c:	0000cb49 	.word	0x0000cb49
    ce60:	00003435 	.word	0x00003435
    ce64:	0000cd25 	.word	0x0000cd25

0000ce68 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ce68:	b580      	push	{r7, lr}
    ce6a:	b082      	sub	sp, #8
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    ce70:	6879      	ldr	r1, [r7, #4]
    ce72:	4803      	ldr	r0, [pc, #12]	; (ce80 <usbdc_register_function+0x18>)
    ce74:	4b03      	ldr	r3, [pc, #12]	; (ce84 <usbdc_register_function+0x1c>)
    ce76:	4798      	blx	r3
}
    ce78:	bf00      	nop
    ce7a:	3708      	adds	r7, #8
    ce7c:	46bd      	mov	sp, r7
    ce7e:	bd80      	pop	{r7, pc}
    ce80:	20000b98 	.word	0x20000b98
    ce84:	00003a0d 	.word	0x00003a0d

0000ce88 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ce88:	b580      	push	{r7, lr}
    ce8a:	b082      	sub	sp, #8
    ce8c:	af00      	add	r7, sp, #0
    ce8e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    ce90:	4b0f      	ldr	r3, [pc, #60]	; (ced0 <usbdc_start+0x48>)
    ce92:	7e9b      	ldrb	r3, [r3, #26]
    ce94:	2b00      	cmp	r3, #0
    ce96:	d002      	beq.n	ce9e <usbdc_start+0x16>
		return ERR_BUSY;
    ce98:	f06f 0303 	mvn.w	r3, #3
    ce9c:	e013      	b.n	cec6 <usbdc_start+0x3e>
	}

	if (desces) {
    ce9e:	687b      	ldr	r3, [r7, #4]
    cea0:	2b00      	cmp	r3, #0
    cea2:	d00e      	beq.n	cec2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cea4:	4a0a      	ldr	r2, [pc, #40]	; (ced0 <usbdc_start+0x48>)
    cea6:	687b      	ldr	r3, [r7, #4]
    cea8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ceaa:	687b      	ldr	r3, [r7, #4]
    ceac:	681b      	ldr	r3, [r3, #0]
    ceae:	79da      	ldrb	r2, [r3, #7]
    ceb0:	4b07      	ldr	r3, [pc, #28]	; (ced0 <usbdc_start+0x48>)
    ceb2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ceb4:	4b06      	ldr	r3, [pc, #24]	; (ced0 <usbdc_start+0x48>)
    ceb6:	2201      	movs	r2, #1
    ceb8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ceba:	4b06      	ldr	r3, [pc, #24]	; (ced4 <usbdc_start+0x4c>)
    cebc:	4798      	blx	r3
	return ERR_NONE;
    cebe:	2300      	movs	r3, #0
    cec0:	e001      	b.n	cec6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cec2:	f06f 0308 	mvn.w	r3, #8
}
    cec6:	4618      	mov	r0, r3
    cec8:	3708      	adds	r7, #8
    ceca:	46bd      	mov	sp, r7
    cecc:	bd80      	pop	{r7, pc}
    cece:	bf00      	nop
    ced0:	20000b88 	.word	0x20000b88
    ced4:	00003459 	.word	0x00003459

0000ced8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ced8:	b580      	push	{r7, lr}
    ceda:	af00      	add	r7, sp, #0
	usb_d_attach();
    cedc:	4b01      	ldr	r3, [pc, #4]	; (cee4 <usbdc_attach+0xc>)
    cede:	4798      	blx	r3
}
    cee0:	bf00      	nop
    cee2:	bd80      	pop	{r7, pc}
    cee4:	0000346d 	.word	0x0000346d

0000cee8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cee8:	b480      	push	{r7}
    ceea:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ceec:	4b03      	ldr	r3, [pc, #12]	; (cefc <usbdc_get_ctrl_buffer+0x14>)
    ceee:	695b      	ldr	r3, [r3, #20]
}
    cef0:	4618      	mov	r0, r3
    cef2:	46bd      	mov	sp, r7
    cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cef8:	4770      	bx	lr
    cefa:	bf00      	nop
    cefc:	20000b88 	.word	0x20000b88

0000cf00 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cf00:	b480      	push	{r7}
    cf02:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cf04:	4b07      	ldr	r3, [pc, #28]	; (cf24 <usbdc_get_state+0x24>)
    cf06:	7e9b      	ldrb	r3, [r3, #26]
    cf08:	f003 0310 	and.w	r3, r3, #16
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d001      	beq.n	cf14 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cf10:	2310      	movs	r3, #16
    cf12:	e001      	b.n	cf18 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cf14:	4b03      	ldr	r3, [pc, #12]	; (cf24 <usbdc_get_state+0x24>)
    cf16:	7e9b      	ldrb	r3, [r3, #26]
}
    cf18:	4618      	mov	r0, r3
    cf1a:	46bd      	mov	sp, r7
    cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf20:	4770      	bx	lr
    cf22:	bf00      	nop
    cf24:	20000b88 	.word	0x20000b88

0000cf28 <usb_get_u16>:
{
    cf28:	b480      	push	{r7}
    cf2a:	b083      	sub	sp, #12
    cf2c:	af00      	add	r7, sp, #0
    cf2e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	b29a      	uxth	r2, r3
    cf36:	687b      	ldr	r3, [r7, #4]
    cf38:	3301      	adds	r3, #1
    cf3a:	781b      	ldrb	r3, [r3, #0]
    cf3c:	b29b      	uxth	r3, r3
    cf3e:	021b      	lsls	r3, r3, #8
    cf40:	b29b      	uxth	r3, r3
    cf42:	4413      	add	r3, r2
    cf44:	b29b      	uxth	r3, r3
}
    cf46:	4618      	mov	r0, r3
    cf48:	370c      	adds	r7, #12
    cf4a:	46bd      	mov	sp, r7
    cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf50:	4770      	bx	lr

0000cf52 <usb_desc_len>:
{
    cf52:	b480      	push	{r7}
    cf54:	b083      	sub	sp, #12
    cf56:	af00      	add	r7, sp, #0
    cf58:	6078      	str	r0, [r7, #4]
	return desc[0];
    cf5a:	687b      	ldr	r3, [r7, #4]
    cf5c:	781b      	ldrb	r3, [r3, #0]
}
    cf5e:	4618      	mov	r0, r3
    cf60:	370c      	adds	r7, #12
    cf62:	46bd      	mov	sp, r7
    cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf68:	4770      	bx	lr

0000cf6a <usb_desc_type>:
{
    cf6a:	b480      	push	{r7}
    cf6c:	b083      	sub	sp, #12
    cf6e:	af00      	add	r7, sp, #0
    cf70:	6078      	str	r0, [r7, #4]
	return desc[1];
    cf72:	687b      	ldr	r3, [r7, #4]
    cf74:	3301      	adds	r3, #1
    cf76:	781b      	ldrb	r3, [r3, #0]
}
    cf78:	4618      	mov	r0, r3
    cf7a:	370c      	adds	r7, #12
    cf7c:	46bd      	mov	sp, r7
    cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf82:	4770      	bx	lr

0000cf84 <usb_desc_next>:
{
    cf84:	b580      	push	{r7, lr}
    cf86:	b082      	sub	sp, #8
    cf88:	af00      	add	r7, sp, #0
    cf8a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cf8c:	6878      	ldr	r0, [r7, #4]
    cf8e:	4b05      	ldr	r3, [pc, #20]	; (cfa4 <usb_desc_next+0x20>)
    cf90:	4798      	blx	r3
    cf92:	4603      	mov	r3, r0
    cf94:	461a      	mov	r2, r3
    cf96:	687b      	ldr	r3, [r7, #4]
    cf98:	4413      	add	r3, r2
}
    cf9a:	4618      	mov	r0, r3
    cf9c:	3708      	adds	r7, #8
    cf9e:	46bd      	mov	sp, r7
    cfa0:	bd80      	pop	{r7, pc}
    cfa2:	bf00      	nop
    cfa4:	0000cf53 	.word	0x0000cf53

0000cfa8 <usb_cfg_desc_total_len>:
{
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b082      	sub	sp, #8
    cfac:	af00      	add	r7, sp, #0
    cfae:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	3302      	adds	r3, #2
    cfb4:	4618      	mov	r0, r3
    cfb6:	4b03      	ldr	r3, [pc, #12]	; (cfc4 <usb_cfg_desc_total_len+0x1c>)
    cfb8:	4798      	blx	r3
    cfba:	4603      	mov	r3, r0
}
    cfbc:	4618      	mov	r0, r3
    cfbe:	3708      	adds	r7, #8
    cfc0:	46bd      	mov	sp, r7
    cfc2:	bd80      	pop	{r7, pc}
    cfc4:	0000cf29 	.word	0x0000cf29

0000cfc8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cfc8:	b580      	push	{r7, lr}
    cfca:	b082      	sub	sp, #8
    cfcc:	af00      	add	r7, sp, #0
    cfce:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cfd0:	6878      	ldr	r0, [r7, #4]
    cfd2:	4b05      	ldr	r3, [pc, #20]	; (cfe8 <usb_cfg_desc_next+0x20>)
    cfd4:	4798      	blx	r3
    cfd6:	4603      	mov	r3, r0
    cfd8:	461a      	mov	r2, r3
    cfda:	687b      	ldr	r3, [r7, #4]
    cfdc:	4413      	add	r3, r2
}
    cfde:	4618      	mov	r0, r3
    cfe0:	3708      	adds	r7, #8
    cfe2:	46bd      	mov	sp, r7
    cfe4:	bd80      	pop	{r7, pc}
    cfe6:	bf00      	nop
    cfe8:	0000cfa9 	.word	0x0000cfa9

0000cfec <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cfec:	b580      	push	{r7, lr}
    cfee:	b084      	sub	sp, #16
    cff0:	af00      	add	r7, sp, #0
    cff2:	60f8      	str	r0, [r7, #12]
    cff4:	60b9      	str	r1, [r7, #8]
    cff6:	4613      	mov	r3, r2
    cff8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cffa:	e015      	b.n	d028 <usb_find_desc+0x3c>
		_desc_len_check();
    cffc:	68f8      	ldr	r0, [r7, #12]
    cffe:	4b0f      	ldr	r3, [pc, #60]	; (d03c <usb_find_desc+0x50>)
    d000:	4798      	blx	r3
    d002:	4603      	mov	r3, r0
    d004:	2b01      	cmp	r3, #1
    d006:	d801      	bhi.n	d00c <usb_find_desc+0x20>
    d008:	2300      	movs	r3, #0
    d00a:	e012      	b.n	d032 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d00c:	68f8      	ldr	r0, [r7, #12]
    d00e:	4b0c      	ldr	r3, [pc, #48]	; (d040 <usb_find_desc+0x54>)
    d010:	4798      	blx	r3
    d012:	4603      	mov	r3, r0
    d014:	461a      	mov	r2, r3
    d016:	79fb      	ldrb	r3, [r7, #7]
    d018:	4293      	cmp	r3, r2
    d01a:	d101      	bne.n	d020 <usb_find_desc+0x34>
			return desc;
    d01c:	68fb      	ldr	r3, [r7, #12]
    d01e:	e008      	b.n	d032 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d020:	68f8      	ldr	r0, [r7, #12]
    d022:	4b08      	ldr	r3, [pc, #32]	; (d044 <usb_find_desc+0x58>)
    d024:	4798      	blx	r3
    d026:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d028:	68fa      	ldr	r2, [r7, #12]
    d02a:	68bb      	ldr	r3, [r7, #8]
    d02c:	429a      	cmp	r2, r3
    d02e:	d3e5      	bcc.n	cffc <usb_find_desc+0x10>
	}
	return NULL;
    d030:	2300      	movs	r3, #0
}
    d032:	4618      	mov	r0, r3
    d034:	3710      	adds	r7, #16
    d036:	46bd      	mov	sp, r7
    d038:	bd80      	pop	{r7, pc}
    d03a:	bf00      	nop
    d03c:	0000cf53 	.word	0x0000cf53
    d040:	0000cf6b 	.word	0x0000cf6b
    d044:	0000cf85 	.word	0x0000cf85

0000d048 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d048:	b580      	push	{r7, lr}
    d04a:	b082      	sub	sp, #8
    d04c:	af00      	add	r7, sp, #0
    d04e:	6078      	str	r0, [r7, #4]
    d050:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d052:	e019      	b.n	d088 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d054:	6878      	ldr	r0, [r7, #4]
    d056:	4b12      	ldr	r3, [pc, #72]	; (d0a0 <usb_find_ep_desc+0x58>)
    d058:	4798      	blx	r3
    d05a:	4603      	mov	r3, r0
    d05c:	2b01      	cmp	r3, #1
    d05e:	d801      	bhi.n	d064 <usb_find_ep_desc+0x1c>
    d060:	2300      	movs	r3, #0
    d062:	e018      	b.n	d096 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d064:	6878      	ldr	r0, [r7, #4]
    d066:	4b0f      	ldr	r3, [pc, #60]	; (d0a4 <usb_find_ep_desc+0x5c>)
    d068:	4798      	blx	r3
    d06a:	4603      	mov	r3, r0
    d06c:	2b04      	cmp	r3, #4
    d06e:	d010      	beq.n	d092 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d070:	6878      	ldr	r0, [r7, #4]
    d072:	4b0c      	ldr	r3, [pc, #48]	; (d0a4 <usb_find_ep_desc+0x5c>)
    d074:	4798      	blx	r3
    d076:	4603      	mov	r3, r0
    d078:	2b05      	cmp	r3, #5
    d07a:	d101      	bne.n	d080 <usb_find_ep_desc+0x38>
			return desc;
    d07c:	687b      	ldr	r3, [r7, #4]
    d07e:	e00a      	b.n	d096 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d080:	6878      	ldr	r0, [r7, #4]
    d082:	4b09      	ldr	r3, [pc, #36]	; (d0a8 <usb_find_ep_desc+0x60>)
    d084:	4798      	blx	r3
    d086:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d088:	687a      	ldr	r2, [r7, #4]
    d08a:	683b      	ldr	r3, [r7, #0]
    d08c:	429a      	cmp	r2, r3
    d08e:	d3e1      	bcc.n	d054 <usb_find_ep_desc+0xc>
    d090:	e000      	b.n	d094 <usb_find_ep_desc+0x4c>
			break;
    d092:	bf00      	nop
	}
	return NULL;
    d094:	2300      	movs	r3, #0
}
    d096:	4618      	mov	r0, r3
    d098:	3708      	adds	r7, #8
    d09a:	46bd      	mov	sp, r7
    d09c:	bd80      	pop	{r7, pc}
    d09e:	bf00      	nop
    d0a0:	0000cf53 	.word	0x0000cf53
    d0a4:	0000cf6b 	.word	0x0000cf6b
    d0a8:	0000cf85 	.word	0x0000cf85

0000d0ac <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d0ac:	b580      	push	{r7, lr}
    d0ae:	b084      	sub	sp, #16
    d0b0:	af00      	add	r7, sp, #0
    d0b2:	60f8      	str	r0, [r7, #12]
    d0b4:	60b9      	str	r1, [r7, #8]
    d0b6:	4613      	mov	r3, r2
    d0b8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d0ba:	2202      	movs	r2, #2
    d0bc:	68b9      	ldr	r1, [r7, #8]
    d0be:	68f8      	ldr	r0, [r7, #12]
    d0c0:	4b15      	ldr	r3, [pc, #84]	; (d118 <usb_find_cfg_desc+0x6c>)
    d0c2:	4798      	blx	r3
    d0c4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d0c6:	68fb      	ldr	r3, [r7, #12]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d11a      	bne.n	d102 <usb_find_cfg_desc+0x56>
		return NULL;
    d0cc:	2300      	movs	r3, #0
    d0ce:	e01f      	b.n	d110 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d0d0:	68f8      	ldr	r0, [r7, #12]
    d0d2:	4b12      	ldr	r3, [pc, #72]	; (d11c <usb_find_cfg_desc+0x70>)
    d0d4:	4798      	blx	r3
    d0d6:	4603      	mov	r3, r0
    d0d8:	2b01      	cmp	r3, #1
    d0da:	d801      	bhi.n	d0e0 <usb_find_cfg_desc+0x34>
    d0dc:	2300      	movs	r3, #0
    d0de:	e017      	b.n	d110 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d0e0:	68fb      	ldr	r3, [r7, #12]
    d0e2:	3301      	adds	r3, #1
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	2b02      	cmp	r3, #2
    d0e8:	d110      	bne.n	d10c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d0ea:	68fb      	ldr	r3, [r7, #12]
    d0ec:	3305      	adds	r3, #5
    d0ee:	781b      	ldrb	r3, [r3, #0]
    d0f0:	79fa      	ldrb	r2, [r7, #7]
    d0f2:	429a      	cmp	r2, r3
    d0f4:	d101      	bne.n	d0fa <usb_find_cfg_desc+0x4e>
			return desc;
    d0f6:	68fb      	ldr	r3, [r7, #12]
    d0f8:	e00a      	b.n	d110 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d0fa:	68f8      	ldr	r0, [r7, #12]
    d0fc:	4b08      	ldr	r3, [pc, #32]	; (d120 <usb_find_cfg_desc+0x74>)
    d0fe:	4798      	blx	r3
    d100:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d102:	68fa      	ldr	r2, [r7, #12]
    d104:	68bb      	ldr	r3, [r7, #8]
    d106:	429a      	cmp	r2, r3
    d108:	d3e2      	bcc.n	d0d0 <usb_find_cfg_desc+0x24>
    d10a:	e000      	b.n	d10e <usb_find_cfg_desc+0x62>
			break;
    d10c:	bf00      	nop
	}
	return NULL;
    d10e:	2300      	movs	r3, #0
}
    d110:	4618      	mov	r0, r3
    d112:	3710      	adds	r7, #16
    d114:	46bd      	mov	sp, r7
    d116:	bd80      	pop	{r7, pc}
    d118:	0000cfed 	.word	0x0000cfed
    d11c:	0000cf53 	.word	0x0000cf53
    d120:	0000cfc9 	.word	0x0000cfc9

0000d124 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d124:	b580      	push	{r7, lr}
    d126:	b086      	sub	sp, #24
    d128:	af00      	add	r7, sp, #0
    d12a:	60f8      	str	r0, [r7, #12]
    d12c:	60b9      	str	r1, [r7, #8]
    d12e:	4613      	mov	r3, r2
    d130:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d132:	2300      	movs	r3, #0
    d134:	75fb      	strb	r3, [r7, #23]
    d136:	e020      	b.n	d17a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d138:	2203      	movs	r2, #3
    d13a:	68b9      	ldr	r1, [r7, #8]
    d13c:	68f8      	ldr	r0, [r7, #12]
    d13e:	4b13      	ldr	r3, [pc, #76]	; (d18c <usb_find_str_desc+0x68>)
    d140:	4798      	blx	r3
    d142:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d144:	68fb      	ldr	r3, [r7, #12]
    d146:	2b00      	cmp	r3, #0
    d148:	d015      	beq.n	d176 <usb_find_str_desc+0x52>
			_desc_len_check();
    d14a:	68f8      	ldr	r0, [r7, #12]
    d14c:	4b10      	ldr	r3, [pc, #64]	; (d190 <usb_find_str_desc+0x6c>)
    d14e:	4798      	blx	r3
    d150:	4603      	mov	r3, r0
    d152:	2b01      	cmp	r3, #1
    d154:	d801      	bhi.n	d15a <usb_find_str_desc+0x36>
    d156:	2300      	movs	r3, #0
    d158:	e014      	b.n	d184 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d15a:	7dfa      	ldrb	r2, [r7, #23]
    d15c:	79fb      	ldrb	r3, [r7, #7]
    d15e:	429a      	cmp	r2, r3
    d160:	d101      	bne.n	d166 <usb_find_str_desc+0x42>
				return desc;
    d162:	68fb      	ldr	r3, [r7, #12]
    d164:	e00e      	b.n	d184 <usb_find_str_desc+0x60>
			}
			i++;
    d166:	7dfb      	ldrb	r3, [r7, #23]
    d168:	3301      	adds	r3, #1
    d16a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d16c:	68f8      	ldr	r0, [r7, #12]
    d16e:	4b09      	ldr	r3, [pc, #36]	; (d194 <usb_find_str_desc+0x70>)
    d170:	4798      	blx	r3
    d172:	60f8      	str	r0, [r7, #12]
    d174:	e001      	b.n	d17a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d176:	2300      	movs	r3, #0
    d178:	e004      	b.n	d184 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d17a:	68fa      	ldr	r2, [r7, #12]
    d17c:	68bb      	ldr	r3, [r7, #8]
    d17e:	429a      	cmp	r2, r3
    d180:	d3da      	bcc.n	d138 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d182:	2300      	movs	r3, #0
}
    d184:	4618      	mov	r0, r3
    d186:	3718      	adds	r7, #24
    d188:	46bd      	mov	sp, r7
    d18a:	bd80      	pop	{r7, pc}
    d18c:	0000cfed 	.word	0x0000cfed
    d190:	0000cf53 	.word	0x0000cf53
    d194:	0000cf85 	.word	0x0000cf85

0000d198 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    d198:	b580      	push	{r7, lr}
    d19a:	b082      	sub	sp, #8
    d19c:	af00      	add	r7, sp, #0
    d19e:	6078      	str	r0, [r7, #4]
    d1a0:	6039      	str	r1, [r7, #0]
    d1a2:	687b      	ldr	r3, [r7, #4]
    d1a4:	3308      	adds	r3, #8
    d1a6:	4618      	mov	r0, r3
    d1a8:	4b06      	ldr	r3, [pc, #24]	; (d1c4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    d1aa:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    d1ac:	687b      	ldr	r3, [r7, #4]
    d1ae:	683a      	ldr	r2, [r7, #0]
    d1b0:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
    d1b2:	4a05      	ldr	r2, [pc, #20]	; (d1c8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    d1b4:	687b      	ldr	r3, [r7, #4]
    d1b6:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    d1b8:	687b      	ldr	r3, [r7, #4]
    d1ba:	4618      	mov	r0, r3
    d1bc:	3708      	adds	r7, #8
    d1be:	46bd      	mov	sp, r7
    d1c0:	bd80      	pop	{r7, pc}
    d1c2:	bf00      	nop
    d1c4:	0000e501 	.word	0x0000e501
    d1c8:	20000ba8 	.word	0x20000ba8

0000d1cc <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    d1cc:	b580      	push	{r7, lr}
    d1ce:	b082      	sub	sp, #8
    d1d0:	af00      	add	r7, sp, #0
    d1d2:	6078      	str	r0, [r7, #4]
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	3308      	adds	r3, #8
    d1d8:	4618      	mov	r0, r3
    d1da:	4b03      	ldr	r3, [pc, #12]	; (d1e8 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    d1dc:	4798      	blx	r3
{
} //~AT24MAC_Class
    d1de:	687b      	ldr	r3, [r7, #4]
    d1e0:	4618      	mov	r0, r3
    d1e2:	3708      	adds	r7, #8
    d1e4:	46bd      	mov	sp, r7
    d1e6:	bd80      	pop	{r7, pc}
    d1e8:	0000e529 	.word	0x0000e529

0000d1ec <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
    d1ec:	b580      	push	{r7, lr}
    d1ee:	b082      	sub	sp, #8
    d1f0:	af00      	add	r7, sp, #0
    d1f2:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
    d1f4:	2156      	movs	r1, #86	; 0x56
    d1f6:	6878      	ldr	r0, [r7, #4]
    d1f8:	4b04      	ldr	r3, [pc, #16]	; (d20c <_ZN13AT24MAC_Class4InitEv+0x20>)
    d1fa:	4798      	blx	r3
	return SelfTest();
    d1fc:	6878      	ldr	r0, [r7, #4]
    d1fe:	4b04      	ldr	r3, [pc, #16]	; (d210 <_ZN13AT24MAC_Class4InitEv+0x24>)
    d200:	4798      	blx	r3
    d202:	4603      	mov	r3, r0
}
    d204:	4618      	mov	r0, r3
    d206:	3708      	adds	r7, #8
    d208:	46bd      	mov	sp, r7
    d20a:	bd80      	pop	{r7, pc}
    d20c:	0000d215 	.word	0x0000d215
    d210:	0000d48d 	.word	0x0000d48d

0000d214 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
    d214:	b580      	push	{r7, lr}
    d216:	b082      	sub	sp, #8
    d218:	af00      	add	r7, sp, #0
    d21a:	6078      	str	r0, [r7, #4]
    d21c:	460b      	mov	r3, r1
    d21e:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
    d220:	687b      	ldr	r3, [r7, #4]
    d222:	78fa      	ldrb	r2, [r7, #3]
    d224:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
    d226:	687b      	ldr	r3, [r7, #4]
    d228:	f103 0208 	add.w	r2, r3, #8
    d22c:	687b      	ldr	r3, [r7, #4]
    d22e:	685b      	ldr	r3, [r3, #4]
    d230:	4619      	mov	r1, r3
    d232:	4610      	mov	r0, r2
    d234:	4b0a      	ldr	r3, [pc, #40]	; (d260 <_ZN13AT24MAC_Class4InitEh+0x4c>)
    d236:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
    d238:	687b      	ldr	r3, [r7, #4]
    d23a:	3308      	adds	r3, #8
    d23c:	78fa      	ldrb	r2, [r7, #3]
    d23e:	4611      	mov	r1, r2
    d240:	4618      	mov	r0, r3
    d242:	4b08      	ldr	r3, [pc, #32]	; (d264 <_ZN13AT24MAC_Class4InitEh+0x50>)
    d244:	4798      	blx	r3
    d246:	4603      	mov	r3, r0
    d248:	2b00      	cmp	r3, #0
    d24a:	bf0c      	ite	eq
    d24c:	2301      	moveq	r3, #1
    d24e:	2300      	movne	r3, #0
    d250:	b2da      	uxtb	r2, r3
    d252:	687b      	ldr	r3, [r7, #4]
    d254:	701a      	strb	r2, [r3, #0]
}
    d256:	bf00      	nop
    d258:	3708      	adds	r7, #8
    d25a:	46bd      	mov	sp, r7
    d25c:	bd80      	pop	{r7, pc}
    d25e:	bf00      	nop
    d260:	0000e53d 	.word	0x0000e53d
    d264:	0000e5e1 	.word	0x0000e5e1

0000d268 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
    d268:	b580      	push	{r7, lr}
    d26a:	b084      	sub	sp, #16
    d26c:	af00      	add	r7, sp, #0
    d26e:	6078      	str	r0, [r7, #4]
    d270:	460b      	mov	r3, r1
    d272:	70fb      	strb	r3, [r7, #3]
    d274:	4613      	mov	r3, r2
    d276:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
    d278:	687b      	ldr	r3, [r7, #4]
    d27a:	2200      	movs	r2, #0
    d27c:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
    d27e:	78fb      	ldrb	r3, [r7, #3]
    d280:	723b      	strb	r3, [r7, #8]
	array[1]=value;
    d282:	78bb      	ldrb	r3, [r7, #2]
    d284:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	3308      	adds	r3, #8
    d28a:	f107 0108 	add.w	r1, r7, #8
    d28e:	2202      	movs	r2, #2
    d290:	4618      	mov	r0, r3
    d292:	4b09      	ldr	r3, [pc, #36]	; (d2b8 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
    d294:	4798      	blx	r3
    d296:	4603      	mov	r3, r0
    d298:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
    d29a:	687b      	ldr	r3, [r7, #4]
    d29c:	7a1b      	ldrb	r3, [r3, #8]
    d29e:	b2db      	uxtb	r3, r3
    d2a0:	f083 0301 	eor.w	r3, r3, #1
    d2a4:	b2db      	uxtb	r3, r3
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d000      	beq.n	d2ac <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
    d2aa:	e7f6      	b.n	d29a <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
    d2ac:	68fb      	ldr	r3, [r7, #12]
}
    d2ae:	4618      	mov	r0, r3
    d2b0:	3710      	adds	r7, #16
    d2b2:	46bd      	mov	sp, r7
    d2b4:	bd80      	pop	{r7, pc}
    d2b6:	bf00      	nop
    d2b8:	0000e629 	.word	0x0000e629

0000d2bc <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
    d2bc:	b580      	push	{r7, lr}
    d2be:	b086      	sub	sp, #24
    d2c0:	af00      	add	r7, sp, #0
    d2c2:	60f8      	str	r0, [r7, #12]
    d2c4:	60b9      	str	r1, [r7, #8]
    d2c6:	4611      	mov	r1, r2
    d2c8:	461a      	mov	r2, r3
    d2ca:	460b      	mov	r3, r1
    d2cc:	71fb      	strb	r3, [r7, #7]
    d2ce:	4613      	mov	r3, r2
    d2d0:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
    d2d2:	2300      	movs	r3, #0
    d2d4:	613b      	str	r3, [r7, #16]
    d2d6:	79ba      	ldrb	r2, [r7, #6]
    d2d8:	693b      	ldr	r3, [r7, #16]
    d2da:	429a      	cmp	r2, r3
    d2dc:	dd2a      	ble.n	d334 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
    d2de:	68f8      	ldr	r0, [r7, #12]
    d2e0:	4b17      	ldr	r3, [pc, #92]	; (d340 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
    d2e2:	4798      	blx	r3
    d2e4:	4603      	mov	r3, r0
    d2e6:	f083 0301 	eor.w	r3, r3, #1
    d2ea:	b2db      	uxtb	r3, r3
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d000      	beq.n	d2f2 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
    d2f0:	e7f5      	b.n	d2de <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
    d2f2:	693b      	ldr	r3, [r7, #16]
    d2f4:	b2da      	uxtb	r2, r3
    d2f6:	79fb      	ldrb	r3, [r7, #7]
    d2f8:	4413      	add	r3, r2
    d2fa:	b2d9      	uxtb	r1, r3
    d2fc:	68bb      	ldr	r3, [r7, #8]
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	461a      	mov	r2, r3
    d302:	68f8      	ldr	r0, [r7, #12]
    d304:	4b0f      	ldr	r3, [pc, #60]	; (d344 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
    d306:	4798      	blx	r3
    d308:	4603      	mov	r3, r0
    d30a:	617b      	str	r3, [r7, #20]
		p++;
    d30c:	68bb      	ldr	r3, [r7, #8]
    d30e:	3301      	adds	r3, #1
    d310:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
    d312:	2002      	movs	r0, #2
    d314:	4b0c      	ldr	r3, [pc, #48]	; (d348 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
    d316:	4798      	blx	r3
		while(!AcknolledgePolling());
    d318:	68f8      	ldr	r0, [r7, #12]
    d31a:	4b0c      	ldr	r3, [pc, #48]	; (d34c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
    d31c:	4798      	blx	r3
    d31e:	4603      	mov	r3, r0
    d320:	f083 0301 	eor.w	r3, r3, #1
    d324:	b2db      	uxtb	r3, r3
    d326:	2b00      	cmp	r3, #0
    d328:	d000      	beq.n	d32c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
    d32a:	e7f5      	b.n	d318 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
    d32c:	693b      	ldr	r3, [r7, #16]
    d32e:	3301      	adds	r3, #1
    d330:	613b      	str	r3, [r7, #16]
    d332:	e7d0      	b.n	d2d6 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
    d334:	697b      	ldr	r3, [r7, #20]
}
    d336:	4618      	mov	r0, r3
    d338:	3718      	adds	r7, #24
    d33a:	46bd      	mov	sp, r7
    d33c:	bd80      	pop	{r7, pc}
    d33e:	bf00      	nop
    d340:	0000d585 	.word	0x0000d585
    d344:	0000d269 	.word	0x0000d269
    d348:	00001fd5 	.word	0x00001fd5
    d34c:	0000d455 	.word	0x0000d455

0000d350 <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
    d350:	b580      	push	{r7, lr}
    d352:	b084      	sub	sp, #16
    d354:	af00      	add	r7, sp, #0
    d356:	6078      	str	r0, [r7, #4]
    d358:	460b      	mov	r3, r1
    d35a:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	3308      	adds	r3, #8
    d360:	1cf9      	adds	r1, r7, #3
    d362:	2201      	movs	r2, #1
    d364:	4618      	mov	r0, r3
    d366:	4b10      	ldr	r3, [pc, #64]	; (d3a8 <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
    d368:	4798      	blx	r3
	while(!i2ca.txReady);
    d36a:	687b      	ldr	r3, [r7, #4]
    d36c:	7a1b      	ldrb	r3, [r3, #8]
    d36e:	b2db      	uxtb	r3, r3
    d370:	f083 0301 	eor.w	r3, r3, #1
    d374:	b2db      	uxtb	r3, r3
    d376:	2b00      	cmp	r3, #0
    d378:	d000      	beq.n	d37c <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
    d37a:	e7f6      	b.n	d36a <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	3308      	adds	r3, #8
    d380:	f107 010f 	add.w	r1, r7, #15
    d384:	2201      	movs	r2, #1
    d386:	4618      	mov	r0, r3
    d388:	4b08      	ldr	r3, [pc, #32]	; (d3ac <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
    d38a:	4798      	blx	r3
	while(!i2ca.rxReady);
    d38c:	687b      	ldr	r3, [r7, #4]
    d38e:	7a5b      	ldrb	r3, [r3, #9]
    d390:	b2db      	uxtb	r3, r3
    d392:	f083 0301 	eor.w	r3, r3, #1
    d396:	b2db      	uxtb	r3, r3
    d398:	2b00      	cmp	r3, #0
    d39a:	d000      	beq.n	d39e <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
    d39c:	e7f6      	b.n	d38c <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
    d39e:	7bfb      	ldrb	r3, [r7, #15]
}
    d3a0:	4618      	mov	r0, r3
    d3a2:	3710      	adds	r7, #16
    d3a4:	46bd      	mov	sp, r7
    d3a6:	bd80      	pop	{r7, pc}
    d3a8:	0000e629 	.word	0x0000e629
    d3ac:	0000e66d 	.word	0x0000e66d

0000d3b0 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
    d3b0:	b580      	push	{r7, lr}
    d3b2:	b086      	sub	sp, #24
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	60f8      	str	r0, [r7, #12]
    d3b8:	60b9      	str	r1, [r7, #8]
    d3ba:	4611      	mov	r1, r2
    d3bc:	461a      	mov	r2, r3
    d3be:	460b      	mov	r3, r1
    d3c0:	71fb      	strb	r3, [r7, #7]
    d3c2:	4613      	mov	r3, r2
    d3c4:	71bb      	strb	r3, [r7, #6]
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
    d3c6:	68fb      	ldr	r3, [r7, #12]
    d3c8:	3308      	adds	r3, #8
    d3ca:	1df9      	adds	r1, r7, #7
    d3cc:	2201      	movs	r2, #1
    d3ce:	4618      	mov	r0, r3
    d3d0:	4b11      	ldr	r3, [pc, #68]	; (d418 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
    d3d2:	4798      	blx	r3
	while(!i2ca.txReady);
    d3d4:	68fb      	ldr	r3, [r7, #12]
    d3d6:	7a1b      	ldrb	r3, [r3, #8]
    d3d8:	b2db      	uxtb	r3, r3
    d3da:	f083 0301 	eor.w	r3, r3, #1
    d3de:	b2db      	uxtb	r3, r3
    d3e0:	2b00      	cmp	r3, #0
    d3e2:	d000      	beq.n	d3e6 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
    d3e4:	e7f6      	b.n	d3d4 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	uint32_t r= i2ca.Read(p,size);
    d3e6:	68fb      	ldr	r3, [r7, #12]
    d3e8:	3308      	adds	r3, #8
    d3ea:	79ba      	ldrb	r2, [r7, #6]
    d3ec:	b292      	uxth	r2, r2
    d3ee:	68b9      	ldr	r1, [r7, #8]
    d3f0:	4618      	mov	r0, r3
    d3f2:	4b0a      	ldr	r3, [pc, #40]	; (d41c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
    d3f4:	4798      	blx	r3
    d3f6:	4603      	mov	r3, r0
    d3f8:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
    d3fa:	68fb      	ldr	r3, [r7, #12]
    d3fc:	7a5b      	ldrb	r3, [r3, #9]
    d3fe:	b2db      	uxtb	r3, r3
    d400:	f083 0301 	eor.w	r3, r3, #1
    d404:	b2db      	uxtb	r3, r3
    d406:	2b00      	cmp	r3, #0
    d408:	d000      	beq.n	d40c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
    d40a:	e7f6      	b.n	d3fa <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
	return r;
    d40c:	697b      	ldr	r3, [r7, #20]
}
    d40e:	4618      	mov	r0, r3
    d410:	3718      	adds	r7, #24
    d412:	46bd      	mov	sp, r7
    d414:	bd80      	pop	{r7, pc}
    d416:	bf00      	nop
    d418:	0000e629 	.word	0x0000e629
    d41c:	0000e66d 	.word	0x0000e66d

0000d420 <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
	uint8_t add=(uint8_t)(0xff&addr);
	
	return ReadAddress(p,add,size);
}
bool	AT24MAC_Class::GetAcknowledge(void){
    d420:	b580      	push	{r7, lr}
    d422:	b082      	sub	sp, #8
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
    d428:	2100      	movs	r1, #0
    d42a:	6878      	ldr	r0, [r7, #4]
    d42c:	4b08      	ldr	r3, [pc, #32]	; (d450 <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x30>)
    d42e:	4798      	blx	r3
    d430:	4603      	mov	r3, r0
    d432:	461a      	mov	r2, r3
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	765a      	strb	r2, [r3, #25]
	return	byte>0;
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	7e5b      	ldrb	r3, [r3, #25]
    d43c:	2b00      	cmp	r3, #0
    d43e:	bfcc      	ite	gt
    d440:	2301      	movgt	r3, #1
    d442:	2300      	movle	r3, #0
    d444:	b2db      	uxtb	r3, r3
}
    d446:	4618      	mov	r0, r3
    d448:	3708      	adds	r7, #8
    d44a:	46bd      	mov	sp, r7
    d44c:	bd80      	pop	{r7, pc}
    d44e:	bf00      	nop
    d450:	0000d351 	.word	0x0000d351

0000d454 <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
    d454:	b580      	push	{r7, lr}
    d456:	b082      	sub	sp, #8
    d458:	af00      	add	r7, sp, #0
    d45a:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
    d45c:	6878      	ldr	r0, [r7, #4]
    d45e:	4b09      	ldr	r3, [pc, #36]	; (d484 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
    d460:	4798      	blx	r3
	} while (!IsReady());
    d462:	6878      	ldr	r0, [r7, #4]
    d464:	4b08      	ldr	r3, [pc, #32]	; (d488 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
    d466:	4798      	blx	r3
    d468:	4603      	mov	r3, r0
	do 
    d46a:	f083 0301 	eor.w	r3, r3, #1
    d46e:	b2db      	uxtb	r3, r3
    d470:	2b00      	cmp	r3, #0
    d472:	d000      	beq.n	d476 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
    d474:	e7f2      	b.n	d45c <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
    d476:	687b      	ldr	r3, [r7, #4]
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	b2db      	uxtb	r3, r3
}
    d47c:	4618      	mov	r0, r3
    d47e:	3708      	adds	r7, #8
    d480:	46bd      	mov	sp, r7
    d482:	bd80      	pop	{r7, pc}
    d484:	0000d421 	.word	0x0000d421
    d488:	0000d585 	.word	0x0000d585

0000d48c <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
    d48c:	b590      	push	{r4, r7, lr}
    d48e:	b085      	sub	sp, #20
    d490:	af00      	add	r7, sp, #0
    d492:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE;
    d494:	687b      	ldr	r3, [r7, #4]
    d496:	22f0      	movs	r2, #240	; 0xf0
    d498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
    d49c:	2300      	movs	r3, #0
    d49e:	60fb      	str	r3, [r7, #12]
    d4a0:	68fb      	ldr	r3, [r7, #12]
    d4a2:	2b0f      	cmp	r3, #15
    d4a4:	dc18      	bgt.n	d4d8 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
    d4a6:	4b33      	ldr	r3, [pc, #204]	; (d574 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
    d4a8:	4798      	blx	r3
    d4aa:	4603      	mov	r3, r0
    d4ac:	b2d9      	uxtb	r1, r3
    d4ae:	687a      	ldr	r2, [r7, #4]
    d4b0:	68fb      	ldr	r3, [r7, #12]
    d4b2:	4413      	add	r3, r2
    d4b4:	331a      	adds	r3, #26
    d4b6:	460a      	mov	r2, r1
    d4b8:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
    d4ba:	68fb      	ldr	r3, [r7, #12]
    d4bc:	b2db      	uxtb	r3, r3
    d4be:	f1c3 0310 	rsb	r3, r3, #16
    d4c2:	b2d9      	uxtb	r1, r3
    d4c4:	687a      	ldr	r2, [r7, #4]
    d4c6:	68fb      	ldr	r3, [r7, #12]
    d4c8:	4413      	add	r3, r2
    d4ca:	332a      	adds	r3, #42	; 0x2a
    d4cc:	460a      	mov	r2, r1
    d4ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
    d4d0:	68fb      	ldr	r3, [r7, #12]
    d4d2:	3301      	adds	r3, #1
    d4d4:	60fb      	str	r3, [r7, #12]
    d4d6:	e7e3      	b.n	d4a0 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
    d4d8:	6878      	ldr	r0, [r7, #4]
    d4da:	4b27      	ldr	r3, [pc, #156]	; (d578 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
    d4dc:	4798      	blx	r3
    d4de:	4603      	mov	r3, r0
    d4e0:	f083 0301 	eor.w	r3, r3, #1
    d4e4:	b2db      	uxtb	r3, r3
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d000      	beq.n	d4ec <_ZN13AT24MAC_Class8SelfTestEv+0x60>
    d4ea:	e7f5      	b.n	d4d8 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	f103 011a 	add.w	r1, r3, #26
    d4f2:	687b      	ldr	r3, [r7, #4]
    d4f4:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    d4f8:	2310      	movs	r3, #16
    d4fa:	6878      	ldr	r0, [r7, #4]
    d4fc:	4c1f      	ldr	r4, [pc, #124]	; (d57c <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
    d4fe:	47a0      	blx	r4
	while(!IsReady());
    d500:	6878      	ldr	r0, [r7, #4]
    d502:	4b1d      	ldr	r3, [pc, #116]	; (d578 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
    d504:	4798      	blx	r3
    d506:	4603      	mov	r3, r0
    d508:	f083 0301 	eor.w	r3, r3, #1
    d50c:	b2db      	uxtb	r3, r3
    d50e:	2b00      	cmp	r3, #0
    d510:	d000      	beq.n	d514 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
    d512:	e7f5      	b.n	d500 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
    d514:	687b      	ldr	r3, [r7, #4]
    d516:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    d51a:	687b      	ldr	r3, [r7, #4]
    d51c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    d520:	2310      	movs	r3, #16
    d522:	6878      	ldr	r0, [r7, #4]
    d524:	4c16      	ldr	r4, [pc, #88]	; (d580 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
    d526:	47a0      	blx	r4
	isOK = true;
    d528:	687b      	ldr	r3, [r7, #4]
    d52a:	2201      	movs	r2, #1
    d52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
    d530:	2300      	movs	r3, #0
    d532:	60bb      	str	r3, [r7, #8]
    d534:	68bb      	ldr	r3, [r7, #8]
    d536:	2b0f      	cmp	r3, #15
    d538:	dc14      	bgt.n	d564 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
    d53a:	687a      	ldr	r2, [r7, #4]
    d53c:	68bb      	ldr	r3, [r7, #8]
    d53e:	4413      	add	r3, r2
    d540:	331a      	adds	r3, #26
    d542:	781a      	ldrb	r2, [r3, #0]
    d544:	6879      	ldr	r1, [r7, #4]
    d546:	68bb      	ldr	r3, [r7, #8]
    d548:	440b      	add	r3, r1
    d54a:	332a      	adds	r3, #42	; 0x2a
    d54c:	781b      	ldrb	r3, [r3, #0]
    d54e:	429a      	cmp	r2, r3
    d550:	d004      	beq.n	d55c <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	2200      	movs	r2, #0
    d556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
    d55a:	e003      	b.n	d564 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
    d55c:	68bb      	ldr	r3, [r7, #8]
    d55e:	3301      	adds	r3, #1
    d560:	60bb      	str	r3, [r7, #8]
    d562:	e7e7      	b.n	d534 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
    d564:	687b      	ldr	r3, [r7, #4]
    d566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
    d56a:	4618      	mov	r0, r3
    d56c:	3714      	adds	r7, #20
    d56e:	46bd      	mov	sp, r7
    d570:	bd90      	pop	{r4, r7, pc}
    d572:	bf00      	nop
    d574:	0000e9f9 	.word	0x0000e9f9
    d578:	0000d585 	.word	0x0000d585
    d57c:	0000d2bd 	.word	0x0000d2bd
    d580:	0000d3b1 	.word	0x0000d3b1

0000d584 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
    d584:	b480      	push	{r7}
    d586:	b083      	sub	sp, #12
    d588:	af00      	add	r7, sp, #0
    d58a:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	7a1b      	ldrb	r3, [r3, #8]
    d590:	b2db      	uxtb	r3, r3
    d592:	2b00      	cmp	r3, #0
    d594:	d006      	beq.n	d5a4 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	7a5b      	ldrb	r3, [r3, #9]
    d59a:	b2db      	uxtb	r3, r3
    d59c:	2b00      	cmp	r3, #0
    d59e:	d001      	beq.n	d5a4 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
    d5a0:	2301      	movs	r3, #1
    d5a2:	e000      	b.n	d5a6 <_ZN13AT24MAC_Class7IsReadyEv+0x22>
    d5a4:	2300      	movs	r3, #0
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	d003      	beq.n	d5b2 <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
    d5aa:	687b      	ldr	r3, [r7, #4]
    d5ac:	2201      	movs	r2, #1
    d5ae:	701a      	strb	r2, [r3, #0]
    d5b0:	e002      	b.n	d5b8 <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
    d5b2:	687b      	ldr	r3, [r7, #4]
    d5b4:	2200      	movs	r2, #0
    d5b6:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
    d5b8:	687b      	ldr	r3, [r7, #4]
    d5ba:	781b      	ldrb	r3, [r3, #0]
    d5bc:	b2db      	uxtb	r3, r3
}
    d5be:	4618      	mov	r0, r3
    d5c0:	370c      	adds	r7, #12
    d5c2:	46bd      	mov	sp, r7
    d5c4:	bc80      	pop	{r7}
    d5c6:	4770      	bx	lr

0000d5c8 <_Z41__static_initialization_and_destruction_0ii>:

    d5c8:	b580      	push	{r7, lr}
    d5ca:	b082      	sub	sp, #8
    d5cc:	af00      	add	r7, sp, #0
    d5ce:	6078      	str	r0, [r7, #4]
    d5d0:	6039      	str	r1, [r7, #0]
    d5d2:	687b      	ldr	r3, [r7, #4]
    d5d4:	2b01      	cmp	r3, #1
    d5d6:	d10d      	bne.n	d5f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d5d8:	683b      	ldr	r3, [r7, #0]
    d5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d5de:	4293      	cmp	r3, r2
    d5e0:	d108      	bne.n	d5f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d5e2:	4906      	ldr	r1, [pc, #24]	; (d5fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d5e4:	4806      	ldr	r0, [pc, #24]	; (d600 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d5e6:	4b07      	ldr	r3, [pc, #28]	; (d604 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d5e8:	4798      	blx	r3
    d5ea:	4a07      	ldr	r2, [pc, #28]	; (d608 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d5ec:	4907      	ldr	r1, [pc, #28]	; (d60c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d5ee:	4804      	ldr	r0, [pc, #16]	; (d600 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d5f0:	4b07      	ldr	r3, [pc, #28]	; (d610 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d5f2:	4798      	blx	r3
    d5f4:	bf00      	nop
    d5f6:	3708      	adds	r7, #8
    d5f8:	46bd      	mov	sp, r7
    d5fa:	bd80      	pop	{r7, pc}
    d5fc:	20000fac 	.word	0x20000fac
    d600:	20000bb0 	.word	0x20000bb0
    d604:	0000d199 	.word	0x0000d199
    d608:	20000000 	.word	0x20000000
    d60c:	0000d1cd 	.word	0x0000d1cd
    d610:	0000e7a5 	.word	0x0000e7a5

0000d614 <_GLOBAL__sub_I_ptrAT24MACClass>:
    d614:	b580      	push	{r7, lr}
    d616:	af00      	add	r7, sp, #0
    d618:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d61c:	2001      	movs	r0, #1
    d61e:	4b01      	ldr	r3, [pc, #4]	; (d624 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    d620:	4798      	blx	r3
    d622:	bd80      	pop	{r7, pc}
    d624:	0000d5c9 	.word	0x0000d5c9

0000d628 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    d628:	b580      	push	{r7, lr}
    d62a:	b082      	sub	sp, #8
    d62c:	af00      	add	r7, sp, #0
    d62e:	6078      	str	r0, [r7, #4]
    d630:	6039      	str	r1, [r7, #0]
    d632:	687b      	ldr	r3, [r7, #4]
    d634:	3318      	adds	r3, #24
    d636:	4618      	mov	r0, r3
    d638:	4b08      	ldr	r3, [pc, #32]	; (d65c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    d63a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	4a08      	ldr	r2, [pc, #32]	; (d660 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    d640:	7812      	ldrb	r2, [r2, #0]
    d642:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    d644:	687b      	ldr	r3, [r7, #4]
    d646:	683a      	ldr	r2, [r7, #0]
    d648:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    d64a:	4b06      	ldr	r3, [pc, #24]	; (d664 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    d64c:	681a      	ldr	r2, [r3, #0]
    d64e:	687b      	ldr	r3, [r7, #4]
    d650:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    d652:	687b      	ldr	r3, [r7, #4]
    d654:	4618      	mov	r0, r3
    d656:	3708      	adds	r7, #8
    d658:	46bd      	mov	sp, r7
    d65a:	bd80      	pop	{r7, pc}
    d65c:	0000e6d1 	.word	0x0000e6d1
    d660:	0000f054 	.word	0x0000f054
    d664:	20000bf0 	.word	0x20000bf0

0000d668 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    d668:	b580      	push	{r7, lr}
    d66a:	b082      	sub	sp, #8
    d66c:	af00      	add	r7, sp, #0
    d66e:	6078      	str	r0, [r7, #4]
    d670:	687b      	ldr	r3, [r7, #4]
    d672:	3318      	adds	r3, #24
    d674:	4618      	mov	r0, r3
    d676:	4b03      	ldr	r3, [pc, #12]	; (d684 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    d678:	4798      	blx	r3
{
} //~FlashMemoryClass
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	4618      	mov	r0, r3
    d67e:	3708      	adds	r7, #8
    d680:	46bd      	mov	sp, r7
    d682:	bd80      	pop	{r7, pc}
    d684:	0000e6f1 	.word	0x0000e6f1

0000d688 <_Z41__static_initialization_and_destruction_0ii>:
	flashClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    d688:	b580      	push	{r7, lr}
    d68a:	b082      	sub	sp, #8
    d68c:	af00      	add	r7, sp, #0
    d68e:	6078      	str	r0, [r7, #4]
    d690:	6039      	str	r1, [r7, #0]
    d692:	687b      	ldr	r3, [r7, #4]
    d694:	2b01      	cmp	r3, #1
    d696:	d10d      	bne.n	d6b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d698:	683b      	ldr	r3, [r7, #0]
    d69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d69e:	4293      	cmp	r3, r2
    d6a0:	d108      	bne.n	d6b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d6a2:	4906      	ldr	r1, [pc, #24]	; (d6bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d6a4:	4806      	ldr	r0, [pc, #24]	; (d6c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d6a6:	4b07      	ldr	r3, [pc, #28]	; (d6c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d6a8:	4798      	blx	r3
    d6aa:	4a07      	ldr	r2, [pc, #28]	; (d6c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d6ac:	4907      	ldr	r1, [pc, #28]	; (d6cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d6ae:	4804      	ldr	r0, [pc, #16]	; (d6c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d6b0:	4b07      	ldr	r3, [pc, #28]	; (d6d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d6b2:	4798      	blx	r3
    d6b4:	bf00      	nop
    d6b6:	3708      	adds	r7, #8
    d6b8:	46bd      	mov	sp, r7
    d6ba:	bd80      	pop	{r7, pc}
    d6bc:	20000e04 	.word	0x20000e04
    d6c0:	20000bf4 	.word	0x20000bf4
    d6c4:	0000d629 	.word	0x0000d629
    d6c8:	20000000 	.word	0x20000000
    d6cc:	0000d669 	.word	0x0000d669
    d6d0:	0000e7a5 	.word	0x0000e7a5

0000d6d4 <_GLOBAL__sub_I_flashLayout>:
    d6d4:	b580      	push	{r7, lr}
    d6d6:	af00      	add	r7, sp, #0
    d6d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d6dc:	2001      	movs	r0, #1
    d6de:	4b01      	ldr	r3, [pc, #4]	; (d6e4 <_GLOBAL__sub_I_flashLayout+0x10>)
    d6e0:	4798      	blx	r3
    d6e2:	bd80      	pop	{r7, pc}
    d6e4:	0000d689 	.word	0x0000d689

0000d6e8 <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    d6e8:	b580      	push	{r7, lr}
    d6ea:	b082      	sub	sp, #8
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	6078      	str	r0, [r7, #4]
    d6f0:	687b      	ldr	r3, [r7, #4]
    d6f2:	3318      	adds	r3, #24
    d6f4:	4618      	mov	r0, r3
    d6f6:	4b03      	ldr	r3, [pc, #12]	; (d704 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    d6f8:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	4618      	mov	r0, r3
    d6fe:	3708      	adds	r7, #8
    d700:	46bd      	mov	sp, r7
    d702:	bd80      	pop	{r7, pc}
    d704:	0000e6f1 	.word	0x0000e6f1

0000d708 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    d708:	b580      	push	{r7, lr}
    d70a:	b082      	sub	sp, #8
    d70c:	af00      	add	r7, sp, #0
    d70e:	6078      	str	r0, [r7, #4]
    d710:	6039      	str	r1, [r7, #0]
    d712:	687b      	ldr	r3, [r7, #4]
    d714:	3318      	adds	r3, #24
    d716:	4618      	mov	r0, r3
    d718:	4b08      	ldr	r3, [pc, #32]	; (d73c <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x34>)
    d71a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    d71c:	687b      	ldr	r3, [r7, #4]
    d71e:	4a08      	ldr	r2, [pc, #32]	; (d740 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    d720:	7812      	ldrb	r2, [r2, #0]
    d722:	741a      	strb	r2, [r3, #16]
	spi_descriptor=spi_des;
    d724:	687b      	ldr	r3, [r7, #4]
    d726:	683a      	ldr	r2, [r7, #0]
    d728:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    d72a:	4b06      	ldr	r3, [pc, #24]	; (d744 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    d72c:	681a      	ldr	r2, [r3, #0]
    d72e:	687b      	ldr	r3, [r7, #4]
    d730:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    d732:	687b      	ldr	r3, [r7, #4]
    d734:	4618      	mov	r0, r3
    d736:	3708      	adds	r7, #8
    d738:	46bd      	mov	sp, r7
    d73a:	bd80      	pop	{r7, pc}
    d73c:	0000e6d1 	.word	0x0000e6d1
    d740:	0000f054 	.word	0x0000f054
    d744:	20000c3c 	.word	0x20000c3c

0000d748 <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    d748:	b580      	push	{r7, lr}
    d74a:	b082      	sub	sp, #8
    d74c:	af00      	add	r7, sp, #0
    d74e:	6078      	str	r0, [r7, #4]
    d750:	6039      	str	r1, [r7, #0]
    d752:	687b      	ldr	r3, [r7, #4]
    d754:	2b01      	cmp	r3, #1
    d756:	d10d      	bne.n	d774 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d758:	683b      	ldr	r3, [r7, #0]
    d75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d75e:	4293      	cmp	r3, r2
    d760:	d108      	bne.n	d774 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d762:	4906      	ldr	r1, [pc, #24]	; (d77c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d764:	4806      	ldr	r0, [pc, #24]	; (d780 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d766:	4b07      	ldr	r3, [pc, #28]	; (d784 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d768:	4798      	blx	r3
    d76a:	4a07      	ldr	r2, [pc, #28]	; (d788 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d76c:	4907      	ldr	r1, [pc, #28]	; (d78c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d76e:	4804      	ldr	r0, [pc, #16]	; (d780 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d770:	4b07      	ldr	r3, [pc, #28]	; (d790 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d772:	4798      	blx	r3
    d774:	bf00      	nop
    d776:	3708      	adds	r7, #8
    d778:	46bd      	mov	sp, r7
    d77a:	bd80      	pop	{r7, pc}
    d77c:	20000e04 	.word	0x20000e04
    d780:	20000c40 	.word	0x20000c40
    d784:	0000d709 	.word	0x0000d709
    d788:	20000000 	.word	0x20000000
    d78c:	0000d6e9 	.word	0x0000d6e9
    d790:	0000e7a5 	.word	0x0000e7a5

0000d794 <_GLOBAL__sub_I_framMemory>:
    d794:	b580      	push	{r7, lr}
    d796:	af00      	add	r7, sp, #0
    d798:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d79c:	2001      	movs	r0, #1
    d79e:	4b01      	ldr	r3, [pc, #4]	; (d7a4 <_GLOBAL__sub_I_framMemory+0x10>)
    d7a0:	4798      	blx	r3
    d7a2:	bd80      	pop	{r7, pc}
    d7a4:	0000d749 	.word	0x0000d749

0000d7a8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d7a8:	b480      	push	{r7}
    d7aa:	b083      	sub	sp, #12
    d7ac:	af00      	add	r7, sp, #0
    d7ae:	6078      	str	r0, [r7, #4]
    d7b0:	4a05      	ldr	r2, [pc, #20]	; (d7c8 <_ZN5PrintC1Ev+0x20>)
    d7b2:	687b      	ldr	r3, [r7, #4]
    d7b4:	601a      	str	r2, [r3, #0]
    d7b6:	687b      	ldr	r3, [r7, #4]
    d7b8:	2200      	movs	r2, #0
    d7ba:	605a      	str	r2, [r3, #4]
    d7bc:	687b      	ldr	r3, [r7, #4]
    d7be:	4618      	mov	r0, r3
    d7c0:	370c      	adds	r7, #12
    d7c2:	46bd      	mov	sp, r7
    d7c4:	bc80      	pop	{r7}
    d7c6:	4770      	bx	lr
    d7c8:	0000f0d4 	.word	0x0000f0d4

0000d7cc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d7cc:	b480      	push	{r7}
    d7ce:	b083      	sub	sp, #12
    d7d0:	af00      	add	r7, sp, #0
    d7d2:	6078      	str	r0, [r7, #4]
    d7d4:	2300      	movs	r3, #0
    d7d6:	4618      	mov	r0, r3
    d7d8:	370c      	adds	r7, #12
    d7da:	46bd      	mov	sp, r7
    d7dc:	bc80      	pop	{r7}
    d7de:	4770      	bx	lr

0000d7e0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d7e0:	b480      	push	{r7}
    d7e2:	b083      	sub	sp, #12
    d7e4:	af00      	add	r7, sp, #0
    d7e6:	6078      	str	r0, [r7, #4]
    d7e8:	bf00      	nop
    d7ea:	370c      	adds	r7, #12
    d7ec:	46bd      	mov	sp, r7
    d7ee:	bc80      	pop	{r7}
    d7f0:	4770      	bx	lr
	...

0000d7f4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d7f4:	b580      	push	{r7, lr}
    d7f6:	b082      	sub	sp, #8
    d7f8:	af00      	add	r7, sp, #0
    d7fa:	6078      	str	r0, [r7, #4]
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	4618      	mov	r0, r3
    d800:	4b06      	ldr	r3, [pc, #24]	; (d81c <_ZN6StreamC1Ev+0x28>)
    d802:	4798      	blx	r3
    d804:	4a06      	ldr	r2, [pc, #24]	; (d820 <_ZN6StreamC1Ev+0x2c>)
    d806:	687b      	ldr	r3, [r7, #4]
    d808:	601a      	str	r2, [r3, #0]
    d80a:	687b      	ldr	r3, [r7, #4]
    d80c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d810:	609a      	str	r2, [r3, #8]
    d812:	687b      	ldr	r3, [r7, #4]
    d814:	4618      	mov	r0, r3
    d816:	3708      	adds	r7, #8
    d818:	46bd      	mov	sp, r7
    d81a:	bd80      	pop	{r7, pc}
    d81c:	0000d7a9 	.word	0x0000d7a9
    d820:	0000f098 	.word	0x0000f098

0000d824 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d824:	b480      	push	{r7}
    d826:	b083      	sub	sp, #12
    d828:	af00      	add	r7, sp, #0
    d82a:	4603      	mov	r3, r0
    d82c:	603a      	str	r2, [r7, #0]
    d82e:	71fb      	strb	r3, [r7, #7]
    d830:	460b      	mov	r3, r1
    d832:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d834:	4b08      	ldr	r3, [pc, #32]	; (d858 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d836:	681b      	ldr	r3, [r3, #0]
    d838:	2201      	movs	r2, #1
    d83a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    d83c:	4b06      	ldr	r3, [pc, #24]	; (d858 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d83e:	681b      	ldr	r3, [r3, #0]
    d840:	2201      	movs	r2, #1
    d842:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    d844:	4b04      	ldr	r3, [pc, #16]	; (d858 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d846:	681b      	ldr	r3, [r3, #0]
    d848:	2201      	movs	r2, #1
    d84a:	741a      	strb	r2, [r3, #16]


	return false;
    d84c:	2300      	movs	r3, #0
}
    d84e:	4618      	mov	r0, r3
    d850:	370c      	adds	r7, #12
    d852:	46bd      	mov	sp, r7
    d854:	bc80      	pop	{r7}
    d856:	4770      	bx	lr
    d858:	20000cb0 	.word	0x20000cb0

0000d85c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d85c:	b480      	push	{r7}
    d85e:	b083      	sub	sp, #12
    d860:	af00      	add	r7, sp, #0
    d862:	4603      	mov	r3, r0
    d864:	603a      	str	r2, [r7, #0]
    d866:	71fb      	strb	r3, [r7, #7]
    d868:	460b      	mov	r3, r1
    d86a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d86c:	4b08      	ldr	r3, [pc, #32]	; (d890 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d86e:	681b      	ldr	r3, [r3, #0]
    d870:	2201      	movs	r2, #1
    d872:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    d874:	4b06      	ldr	r3, [pc, #24]	; (d890 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d876:	681b      	ldr	r3, [r3, #0]
    d878:	2201      	movs	r2, #1
    d87a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    d87c:	4b04      	ldr	r3, [pc, #16]	; (d890 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d87e:	681b      	ldr	r3, [r3, #0]
    d880:	2201      	movs	r2, #1
    d882:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d884:	2300      	movs	r3, #0
}
    d886:	4618      	mov	r0, r3
    d888:	370c      	adds	r7, #12
    d88a:	46bd      	mov	sp, r7
    d88c:	bc80      	pop	{r7}
    d88e:	4770      	bx	lr
    d890:	20000cb0 	.word	0x20000cb0

0000d894 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d894:	b580      	push	{r7, lr}
    d896:	b082      	sub	sp, #8
    d898:	af00      	add	r7, sp, #0
    d89a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d89c:	793b      	ldrb	r3, [r7, #4]
    d89e:	f003 0301 	and.w	r3, r3, #1
    d8a2:	b2db      	uxtb	r3, r3
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d013      	beq.n	d8d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d8a8:	490c      	ldr	r1, [pc, #48]	; (d8dc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d8aa:	2000      	movs	r0, #0
    d8ac:	4b0c      	ldr	r3, [pc, #48]	; (d8e0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d8ae:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d8b0:	490c      	ldr	r1, [pc, #48]	; (d8e4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d8b2:	2001      	movs	r0, #1
    d8b4:	4b0a      	ldr	r3, [pc, #40]	; (d8e0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d8b6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d8b8:	4b0b      	ldr	r3, [pc, #44]	; (d8e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d8ba:	681b      	ldr	r3, [r3, #0]
    d8bc:	2201      	movs	r2, #1
    d8be:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d8c0:	4b09      	ldr	r3, [pc, #36]	; (d8e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d8c2:	681b      	ldr	r3, [r3, #0]
    d8c4:	2201      	movs	r2, #1
    d8c6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    d8c8:	4b07      	ldr	r3, [pc, #28]	; (d8e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d8ca:	681b      	ldr	r3, [r3, #0]
    d8cc:	2201      	movs	r2, #1
    d8ce:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d8d0:	2300      	movs	r3, #0
}
    d8d2:	4618      	mov	r0, r3
    d8d4:	3708      	adds	r7, #8
    d8d6:	46bd      	mov	sp, r7
    d8d8:	bd80      	pop	{r7, pc}
    d8da:	bf00      	nop
    d8dc:	0000d825 	.word	0x0000d825
    d8e0:	0000c161 	.word	0x0000c161
    d8e4:	0000d85d 	.word	0x0000d85d
    d8e8:	20000cb0 	.word	0x20000cb0

0000d8ec <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d8ec:	b580      	push	{r7, lr}
    d8ee:	b082      	sub	sp, #8
    d8f0:	af00      	add	r7, sp, #0
    d8f2:	6078      	str	r0, [r7, #4]
    d8f4:	687b      	ldr	r3, [r7, #4]
    d8f6:	4618      	mov	r0, r3
    d8f8:	4b0a      	ldr	r3, [pc, #40]	; (d924 <_ZN9CDC_ClassC1Ev+0x38>)
    d8fa:	4798      	blx	r3
    d8fc:	687b      	ldr	r3, [r7, #4]
    d8fe:	3310      	adds	r3, #16
    d900:	4618      	mov	r0, r3
    d902:	4b09      	ldr	r3, [pc, #36]	; (d928 <_ZN9CDC_ClassC1Ev+0x3c>)
    d904:	4798      	blx	r3
    d906:	4a09      	ldr	r2, [pc, #36]	; (d92c <_ZN9CDC_ClassC1Ev+0x40>)
    d908:	687b      	ldr	r3, [r7, #4]
    d90a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d90c:	687b      	ldr	r3, [r7, #4]
    d90e:	f04f 32ff 	mov.w	r2, #4294967295
    d912:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d914:	4a06      	ldr	r2, [pc, #24]	; (d930 <_ZN9CDC_ClassC1Ev+0x44>)
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	4618      	mov	r0, r3
    d91e:	3708      	adds	r7, #8
    d920:	46bd      	mov	sp, r7
    d922:	bd80      	pop	{r7, pc}
    d924:	0000d7f5 	.word	0x0000d7f5
    d928:	0000dfb1 	.word	0x0000dfb1
    d92c:	0000f068 	.word	0x0000f068
    d930:	20000cb0 	.word	0x20000cb0

0000d934 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d934:	b580      	push	{r7, lr}
    d936:	b082      	sub	sp, #8
    d938:	af00      	add	r7, sp, #0
    d93a:	6078      	str	r0, [r7, #4]
    d93c:	4a06      	ldr	r2, [pc, #24]	; (d958 <_ZN9CDC_ClassD1Ev+0x24>)
    d93e:	687b      	ldr	r3, [r7, #4]
    d940:	601a      	str	r2, [r3, #0]
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	3310      	adds	r3, #16
    d946:	4618      	mov	r0, r3
    d948:	4b04      	ldr	r3, [pc, #16]	; (d95c <_ZN9CDC_ClassD1Ev+0x28>)
    d94a:	4798      	blx	r3
{
} //~CDC_Class
    d94c:	687b      	ldr	r3, [r7, #4]
    d94e:	4618      	mov	r0, r3
    d950:	3708      	adds	r7, #8
    d952:	46bd      	mov	sp, r7
    d954:	bd80      	pop	{r7, pc}
    d956:	bf00      	nop
    d958:	0000f068 	.word	0x0000f068
    d95c:	0000dfd1 	.word	0x0000dfd1

0000d960 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    d960:	b580      	push	{r7, lr}
    d962:	b082      	sub	sp, #8
    d964:	af00      	add	r7, sp, #0
    d966:	6078      	str	r0, [r7, #4]
	
	OnInit();
    d968:	687b      	ldr	r3, [r7, #4]
    d96a:	3310      	adds	r3, #16
    d96c:	4618      	mov	r0, r3
    d96e:	4b07      	ldr	r3, [pc, #28]	; (d98c <_ZN9CDC_Class4InitEv+0x2c>)
    d970:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    d972:	4907      	ldr	r1, [pc, #28]	; (d990 <_ZN9CDC_Class4InitEv+0x30>)
    d974:	2003      	movs	r0, #3
    d976:	4b07      	ldr	r3, [pc, #28]	; (d994 <_ZN9CDC_Class4InitEv+0x34>)
    d978:	4798      	blx	r3
	
		
	if (plugged)
    d97a:	687b      	ldr	r3, [r7, #4]
    d97c:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    d97e:	20c8      	movs	r0, #200	; 0xc8
    d980:	4b05      	ldr	r3, [pc, #20]	; (d998 <_ZN9CDC_Class4InitEv+0x38>)
    d982:	4798      	blx	r3

}
    d984:	bf00      	nop
    d986:	3708      	adds	r7, #8
    d988:	46bd      	mov	sp, r7
    d98a:	bd80      	pop	{r7, pc}
    d98c:	0000dfe5 	.word	0x0000dfe5
    d990:	0000d895 	.word	0x0000d895
    d994:	0000c161 	.word	0x0000c161
    d998:	00001fd5 	.word	0x00001fd5

0000d99c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    d99c:	b580      	push	{r7, lr}
    d99e:	b082      	sub	sp, #8
    d9a0:	af00      	add	r7, sp, #0
    d9a2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    d9a4:	4b03      	ldr	r3, [pc, #12]	; (d9b4 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    d9a6:	4798      	blx	r3
    d9a8:	4603      	mov	r3, r0
	
}
    d9aa:	4618      	mov	r0, r3
    d9ac:	3708      	adds	r7, #8
    d9ae:	46bd      	mov	sp, r7
    d9b0:	bd80      	pop	{r7, pc}
    d9b2:	bf00      	nop
    d9b4:	0000c1d9 	.word	0x0000c1d9

0000d9b8 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    d9b8:	b580      	push	{r7, lr}
    d9ba:	b084      	sub	sp, #16
    d9bc:	af00      	add	r7, sp, #0
    d9be:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    d9c0:	687b      	ldr	r3, [r7, #4]
    d9c2:	699b      	ldr	r3, [r3, #24]
    d9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
    d9c8:	bf14      	ite	ne
    d9ca:	2301      	movne	r3, #1
    d9cc:	2300      	moveq	r3, #0
    d9ce:	b2db      	uxtb	r3, r3
    d9d0:	2b00      	cmp	r3, #0
    d9d2:	d002      	beq.n	d9da <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    d9d4:	687b      	ldr	r3, [r7, #4]
    d9d6:	699b      	ldr	r3, [r3, #24]
    d9d8:	e011      	b.n	d9fe <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	681b      	ldr	r3, [r3, #0]
    d9de:	331c      	adds	r3, #28
    d9e0:	681b      	ldr	r3, [r3, #0]
    d9e2:	f107 010f 	add.w	r1, r7, #15
    d9e6:	2201      	movs	r2, #1
    d9e8:	6878      	ldr	r0, [r7, #4]
    d9ea:	4798      	blx	r3
    d9ec:	4602      	mov	r2, r0
    d9ee:	687b      	ldr	r3, [r7, #4]
    d9f0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    d9f2:	7bfb      	ldrb	r3, [r7, #15]
    d9f4:	461a      	mov	r2, r3
    d9f6:	687b      	ldr	r3, [r7, #4]
    d9f8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    d9fa:	687b      	ldr	r3, [r7, #4]
    d9fc:	699b      	ldr	r3, [r3, #24]
}
    d9fe:	4618      	mov	r0, r3
    da00:	3710      	adds	r7, #16
    da02:	46bd      	mov	sp, r7
    da04:	bd80      	pop	{r7, pc}
	...

0000da08 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    da08:	b580      	push	{r7, lr}
    da0a:	b086      	sub	sp, #24
    da0c:	af00      	add	r7, sp, #0
    da0e:	60f8      	str	r0, [r7, #12]
    da10:	60b9      	str	r1, [r7, #8]
    da12:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    da14:	68fb      	ldr	r3, [r7, #12]
    da16:	2200      	movs	r2, #0
    da18:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    da1a:	687b      	ldr	r3, [r7, #4]
    da1c:	4619      	mov	r1, r3
    da1e:	68b8      	ldr	r0, [r7, #8]
    da20:	4b08      	ldr	r3, [pc, #32]	; (da44 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    da22:	4798      	blx	r3
    da24:	4603      	mov	r3, r0
    da26:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    da28:	68fb      	ldr	r3, [r7, #12]
    da2a:	7d5b      	ldrb	r3, [r3, #21]
    da2c:	b2db      	uxtb	r3, r3
    da2e:	f083 0301 	eor.w	r3, r3, #1
    da32:	b2db      	uxtb	r3, r3
    da34:	2b00      	cmp	r3, #0
    da36:	d000      	beq.n	da3a <_ZN9CDC_Class8readDataEPvl+0x32>
    da38:	e7f6      	b.n	da28 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    da3a:	7dfb      	ldrb	r3, [r7, #23]
}
    da3c:	4618      	mov	r0, r3
    da3e:	3718      	adds	r7, #24
    da40:	46bd      	mov	sp, r7
    da42:	bd80      	pop	{r7, pc}
    da44:	0000c0b5 	.word	0x0000c0b5

0000da48 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    da48:	b580      	push	{r7, lr}
    da4a:	b086      	sub	sp, #24
    da4c:	af00      	add	r7, sp, #0
    da4e:	60f8      	str	r0, [r7, #12]
    da50:	60b9      	str	r1, [r7, #8]
    da52:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    da54:	68fb      	ldr	r3, [r7, #12]
    da56:	2200      	movs	r2, #0
    da58:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    da5a:	687b      	ldr	r3, [r7, #4]
    da5c:	4619      	mov	r1, r3
    da5e:	68b8      	ldr	r0, [r7, #8]
    da60:	4b04      	ldr	r3, [pc, #16]	; (da74 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    da62:	4798      	blx	r3
    da64:	4603      	mov	r3, r0
    da66:	617b      	str	r3, [r7, #20]
	return r;
    da68:	697b      	ldr	r3, [r7, #20]
}
    da6a:	4618      	mov	r0, r3
    da6c:	3718      	adds	r7, #24
    da6e:	46bd      	mov	sp, r7
    da70:	bd80      	pop	{r7, pc}
    da72:	bf00      	nop
    da74:	0000c0b5 	.word	0x0000c0b5

0000da78 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    da78:	b580      	push	{r7, lr}
    da7a:	b084      	sub	sp, #16
    da7c:	af00      	add	r7, sp, #0
    da7e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    da80:	687b      	ldr	r3, [r7, #4]
    da82:	2200      	movs	r2, #0
    da84:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    da86:	f107 030f 	add.w	r3, r7, #15
    da8a:	2101      	movs	r1, #1
    da8c:	4618      	mov	r0, r3
    da8e:	4b08      	ldr	r3, [pc, #32]	; (dab0 <_ZN9CDC_Class4readEv+0x38>)
    da90:	4798      	blx	r3
	while(!rxReady);
    da92:	687b      	ldr	r3, [r7, #4]
    da94:	7d5b      	ldrb	r3, [r3, #21]
    da96:	b2db      	uxtb	r3, r3
    da98:	f083 0301 	eor.w	r3, r3, #1
    da9c:	b2db      	uxtb	r3, r3
    da9e:	2b00      	cmp	r3, #0
    daa0:	d000      	beq.n	daa4 <_ZN9CDC_Class4readEv+0x2c>
    daa2:	e7f6      	b.n	da92 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    daa4:	7bfb      	ldrb	r3, [r7, #15]
}
    daa6:	4618      	mov	r0, r3
    daa8:	3710      	adds	r7, #16
    daaa:	46bd      	mov	sp, r7
    daac:	bd80      	pop	{r7, pc}
    daae:	bf00      	nop
    dab0:	0000c0b5 	.word	0x0000c0b5

0000dab4 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    dab4:	b580      	push	{r7, lr}
    dab6:	b082      	sub	sp, #8
    dab8:	af00      	add	r7, sp, #0
    daba:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    dabc:	687b      	ldr	r3, [r7, #4]
    dabe:	331c      	adds	r3, #28
    dac0:	2140      	movs	r1, #64	; 0x40
    dac2:	4618      	mov	r0, r3
    dac4:	4b02      	ldr	r3, [pc, #8]	; (dad0 <_ZN9CDC_Class5flushEv+0x1c>)
    dac6:	4798      	blx	r3
}
    dac8:	bf00      	nop
    daca:	3708      	adds	r7, #8
    dacc:	46bd      	mov	sp, r7
    dace:	bd80      	pop	{r7, pc}
    dad0:	0000c0f9 	.word	0x0000c0f9

0000dad4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dad4:	b580      	push	{r7, lr}
    dad6:	b082      	sub	sp, #8
    dad8:	af00      	add	r7, sp, #0
    dada:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    dadc:	4b02      	ldr	r3, [pc, #8]	; (dae8 <_ZN9CDC_Class5clearEv+0x14>)
    dade:	4798      	blx	r3
}
    dae0:	bf00      	nop
    dae2:	3708      	adds	r7, #8
    dae4:	46bd      	mov	sp, r7
    dae6:	bd80      	pop	{r7, pc}
    dae8:	0000c13d 	.word	0x0000c13d

0000daec <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    daec:	b580      	push	{r7, lr}
    daee:	b082      	sub	sp, #8
    daf0:	af00      	add	r7, sp, #0
    daf2:	6078      	str	r0, [r7, #4]
    daf4:	460b      	mov	r3, r1
    daf6:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    daf8:	687b      	ldr	r3, [r7, #4]
    dafa:	7d1b      	ldrb	r3, [r3, #20]
    dafc:	b2db      	uxtb	r3, r3
    dafe:	f083 0301 	eor.w	r3, r3, #1
    db02:	b2db      	uxtb	r3, r3
    db04:	2b00      	cmp	r3, #0
    db06:	d000      	beq.n	db0a <_ZN9CDC_Class5writeEh+0x1e>
    db08:	e7f6      	b.n	daf8 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    db0a:	687b      	ldr	r3, [r7, #4]
    db0c:	681b      	ldr	r3, [r3, #0]
    db0e:	3324      	adds	r3, #36	; 0x24
    db10:	681b      	ldr	r3, [r3, #0]
    db12:	1cf9      	adds	r1, r7, #3
    db14:	2201      	movs	r2, #1
    db16:	6878      	ldr	r0, [r7, #4]
    db18:	4798      	blx	r3
    db1a:	4603      	mov	r3, r0
}
    db1c:	4618      	mov	r0, r3
    db1e:	3708      	adds	r7, #8
    db20:	46bd      	mov	sp, r7
    db22:	bd80      	pop	{r7, pc}

0000db24 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    db24:	b580      	push	{r7, lr}
    db26:	b086      	sub	sp, #24
    db28:	af00      	add	r7, sp, #0
    db2a:	60f8      	str	r0, [r7, #12]
    db2c:	60b9      	str	r1, [r7, #8]
    db2e:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    db30:	68fb      	ldr	r3, [r7, #12]
    db32:	2200      	movs	r2, #0
    db34:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    db36:	68fb      	ldr	r3, [r7, #12]
    db38:	3310      	adds	r3, #16
    db3a:	4618      	mov	r0, r3
    db3c:	4b14      	ldr	r3, [pc, #80]	; (db90 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    db3e:	4798      	blx	r3
    db40:	4603      	mov	r3, r0
    db42:	2b00      	cmp	r3, #0
    db44:	d01e      	beq.n	db84 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    db46:	687b      	ldr	r3, [r7, #4]
    db48:	4619      	mov	r1, r3
    db4a:	68b8      	ldr	r0, [r7, #8]
    db4c:	4b11      	ldr	r3, [pc, #68]	; (db94 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    db4e:	4798      	blx	r3
    db50:	4603      	mov	r3, r0
    db52:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    db54:	68fb      	ldr	r3, [r7, #12]
    db56:	7d1b      	ldrb	r3, [r3, #20]
    db58:	b2db      	uxtb	r3, r3
    db5a:	f083 0301 	eor.w	r3, r3, #1
    db5e:	b2db      	uxtb	r3, r3
    db60:	2b00      	cmp	r3, #0
    db62:	d006      	beq.n	db72 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    db64:	68fb      	ldr	r3, [r7, #12]
    db66:	7c5b      	ldrb	r3, [r3, #17]
    db68:	b2db      	uxtb	r3, r3
    db6a:	2b00      	cmp	r3, #0
    db6c:	d001      	beq.n	db72 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    db6e:	2301      	movs	r3, #1
    db70:	e000      	b.n	db74 <_ZN9CDC_Class9writeDataEPKvl+0x50>
    db72:	2300      	movs	r3, #0
    db74:	2b00      	cmp	r3, #0
    db76:	d000      	beq.n	db7a <_ZN9CDC_Class9writeDataEPKvl+0x56>
    db78:	e7ec      	b.n	db54 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTerminalTimer.Stop();
    db7a:	4807      	ldr	r0, [pc, #28]	; (db98 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    db7c:	4b07      	ldr	r3, [pc, #28]	; (db9c <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    db7e:	4798      	blx	r3
		return r;
    db80:	697b      	ldr	r3, [r7, #20]
    db82:	e000      	b.n	db86 <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    db84:	2300      	movs	r3, #0
	}
	

}
    db86:	4618      	mov	r0, r3
    db88:	3718      	adds	r7, #24
    db8a:	46bd      	mov	sp, r7
    db8c:	bd80      	pop	{r7, pc}
    db8e:	bf00      	nop
    db90:	0000e081 	.word	0x0000e081
    db94:	0000c0f9 	.word	0x0000c0f9
    db98:	20000dbc 	.word	0x20000dbc
    db9c:	0000e1b1 	.word	0x0000e1b1

0000dba0 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    dba0:	b580      	push	{r7, lr}
    dba2:	b086      	sub	sp, #24
    dba4:	af00      	add	r7, sp, #0
    dba6:	60f8      	str	r0, [r7, #12]
    dba8:	60b9      	str	r1, [r7, #8]
    dbaa:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dbac:	68fb      	ldr	r3, [r7, #12]
    dbae:	2200      	movs	r2, #0
    dbb0:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (plugged){
    dbb2:	68fb      	ldr	r3, [r7, #12]
    dbb4:	7c1b      	ldrb	r3, [r3, #16]
    dbb6:	b2db      	uxtb	r3, r3
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d01c      	beq.n	dbf6 <_ZN9CDC_Class5writeEPKhj+0x56>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dbbc:	6879      	ldr	r1, [r7, #4]
    dbbe:	68b8      	ldr	r0, [r7, #8]
    dbc0:	4b10      	ldr	r3, [pc, #64]	; (dc04 <_ZN9CDC_Class5writeEPKhj+0x64>)
    dbc2:	4798      	blx	r3
    dbc4:	4603      	mov	r3, r0
    dbc6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    dbc8:	68fb      	ldr	r3, [r7, #12]
    dbca:	7d1b      	ldrb	r3, [r3, #20]
    dbcc:	b2db      	uxtb	r3, r3
    dbce:	f083 0301 	eor.w	r3, r3, #1
    dbd2:	b2db      	uxtb	r3, r3
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	d006      	beq.n	dbe6 <_ZN9CDC_Class5writeEPKhj+0x46>
    dbd8:	68fb      	ldr	r3, [r7, #12]
    dbda:	7c5b      	ldrb	r3, [r3, #17]
    dbdc:	b2db      	uxtb	r3, r3
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d001      	beq.n	dbe6 <_ZN9CDC_Class5writeEPKhj+0x46>
    dbe2:	2301      	movs	r3, #1
    dbe4:	e000      	b.n	dbe8 <_ZN9CDC_Class5writeEPKhj+0x48>
    dbe6:	2300      	movs	r3, #0
    dbe8:	2b00      	cmp	r3, #0
    dbea:	d000      	beq.n	dbee <_ZN9CDC_Class5writeEPKhj+0x4e>
    dbec:	e7ec      	b.n	dbc8 <_ZN9CDC_Class5writeEPKhj+0x28>
		//while((!txReady));
		usbTerminalTimer.Stop();
    dbee:	4806      	ldr	r0, [pc, #24]	; (dc08 <_ZN9CDC_Class5writeEPKhj+0x68>)
    dbf0:	4b06      	ldr	r3, [pc, #24]	; (dc0c <_ZN9CDC_Class5writeEPKhj+0x6c>)
    dbf2:	4798      	blx	r3
    dbf4:	e001      	b.n	dbfa <_ZN9CDC_Class5writeEPKhj+0x5a>
	}else{
 		r=0;
    dbf6:	2300      	movs	r3, #0
    dbf8:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    dbfa:	697b      	ldr	r3, [r7, #20]
}
    dbfc:	4618      	mov	r0, r3
    dbfe:	3718      	adds	r7, #24
    dc00:	46bd      	mov	sp, r7
    dc02:	bd80      	pop	{r7, pc}
    dc04:	0000c0f9 	.word	0x0000c0f9
    dc08:	20000dbc 	.word	0x20000dbc
    dc0c:	0000e1b1 	.word	0x0000e1b1

0000dc10 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    dc10:	b480      	push	{r7}
    dc12:	b083      	sub	sp, #12
    dc14:	af00      	add	r7, sp, #0
    dc16:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    dc18:	687b      	ldr	r3, [r7, #4]
    dc1a:	7d5b      	ldrb	r3, [r3, #21]
    dc1c:	b2db      	uxtb	r3, r3
    dc1e:	2b00      	cmp	r3, #0
    dc20:	d006      	beq.n	dc30 <_ZN9CDC_Class9availableEv+0x20>
    dc22:	687b      	ldr	r3, [r7, #4]
    dc24:	7d1b      	ldrb	r3, [r3, #20]
    dc26:	b2db      	uxtb	r3, r3
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d001      	beq.n	dc30 <_ZN9CDC_Class9availableEv+0x20>
    dc2c:	2301      	movs	r3, #1
    dc2e:	e000      	b.n	dc32 <_ZN9CDC_Class9availableEv+0x22>
    dc30:	2300      	movs	r3, #0
    dc32:	2b00      	cmp	r3, #0
    dc34:	d001      	beq.n	dc3a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    dc36:	2301      	movs	r3, #1
    dc38:	e000      	b.n	dc3c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    dc3a:	2300      	movs	r3, #0
	}
	
}
    dc3c:	4618      	mov	r0, r3
    dc3e:	370c      	adds	r7, #12
    dc40:	46bd      	mov	sp, r7
    dc42:	bc80      	pop	{r7}
    dc44:	4770      	bx	lr
	...

0000dc48 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    dc48:	b580      	push	{r7, lr}
    dc4a:	b082      	sub	sp, #8
    dc4c:	af00      	add	r7, sp, #0
    dc4e:	6078      	str	r0, [r7, #4]
    dc50:	6039      	str	r1, [r7, #0]
    dc52:	687b      	ldr	r3, [r7, #4]
    dc54:	2b01      	cmp	r3, #1
    dc56:	d10c      	bne.n	dc72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dc58:	683b      	ldr	r3, [r7, #0]
    dc5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc5e:	4293      	cmp	r3, r2
    dc60:	d107      	bne.n	dc72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dc62:	4806      	ldr	r0, [pc, #24]	; (dc7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dc64:	4b06      	ldr	r3, [pc, #24]	; (dc80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dc66:	4798      	blx	r3
    dc68:	4a06      	ldr	r2, [pc, #24]	; (dc84 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dc6a:	4907      	ldr	r1, [pc, #28]	; (dc88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dc6c:	4803      	ldr	r0, [pc, #12]	; (dc7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dc6e:	4b07      	ldr	r3, [pc, #28]	; (dc8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dc70:	4798      	blx	r3
    dc72:	bf00      	nop
    dc74:	3708      	adds	r7, #8
    dc76:	46bd      	mov	sp, r7
    dc78:	bd80      	pop	{r7, pc}
    dc7a:	bf00      	nop
    dc7c:	20000cb4 	.word	0x20000cb4
    dc80:	0000d8ed 	.word	0x0000d8ed
    dc84:	20000000 	.word	0x20000000
    dc88:	0000d935 	.word	0x0000d935
    dc8c:	0000e7a5 	.word	0x0000e7a5

0000dc90 <_GLOBAL__sub_I_ptrCDCClass>:
    dc90:	b580      	push	{r7, lr}
    dc92:	af00      	add	r7, sp, #0
    dc94:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc98:	2001      	movs	r0, #1
    dc9a:	4b01      	ldr	r3, [pc, #4]	; (dca0 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    dc9c:	4798      	blx	r3
    dc9e:	bd80      	pop	{r7, pc}
    dca0:	0000dc49 	.word	0x0000dc49

0000dca4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    dca4:	b590      	push	{r4, r7, lr}
    dca6:	b083      	sub	sp, #12
    dca8:	af00      	add	r7, sp, #0
    dcaa:	6078      	str	r0, [r7, #4]
    dcac:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    dcae:	683b      	ldr	r3, [r7, #0]
    dcb0:	2b00      	cmp	r3, #0
    dcb2:	d101      	bne.n	dcb8 <_ZN5Print5writeEPKc+0x14>
    dcb4:	2300      	movs	r3, #0
    dcb6:	e00c      	b.n	dcd2 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    dcb8:	687b      	ldr	r3, [r7, #4]
    dcba:	681b      	ldr	r3, [r3, #0]
    dcbc:	3304      	adds	r3, #4
    dcbe:	681c      	ldr	r4, [r3, #0]
    dcc0:	6838      	ldr	r0, [r7, #0]
    dcc2:	4b06      	ldr	r3, [pc, #24]	; (dcdc <_ZN5Print5writeEPKc+0x38>)
    dcc4:	4798      	blx	r3
    dcc6:	4603      	mov	r3, r0
    dcc8:	461a      	mov	r2, r3
    dcca:	6839      	ldr	r1, [r7, #0]
    dccc:	6878      	ldr	r0, [r7, #4]
    dcce:	47a0      	blx	r4
    dcd0:	4603      	mov	r3, r0
    }
    dcd2:	4618      	mov	r0, r3
    dcd4:	370c      	adds	r7, #12
    dcd6:	46bd      	mov	sp, r7
    dcd8:	bd90      	pop	{r4, r7, pc}
    dcda:	bf00      	nop
    dcdc:	0000ea41 	.word	0x0000ea41

0000dce0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    dce0:	b580      	push	{r7, lr}
    dce2:	b086      	sub	sp, #24
    dce4:	af00      	add	r7, sp, #0
    dce6:	60f8      	str	r0, [r7, #12]
    dce8:	60b9      	str	r1, [r7, #8]
    dcea:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    dcec:	2300      	movs	r3, #0
    dcee:	617b      	str	r3, [r7, #20]
  while (size--) {
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	1e5a      	subs	r2, r3, #1
    dcf4:	607a      	str	r2, [r7, #4]
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	bf14      	ite	ne
    dcfa:	2301      	movne	r3, #1
    dcfc:	2300      	moveq	r3, #0
    dcfe:	b2db      	uxtb	r3, r3
    dd00:	2b00      	cmp	r3, #0
    dd02:	d016      	beq.n	dd32 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    dd04:	68fb      	ldr	r3, [r7, #12]
    dd06:	681b      	ldr	r3, [r3, #0]
    dd08:	681a      	ldr	r2, [r3, #0]
    dd0a:	68bb      	ldr	r3, [r7, #8]
    dd0c:	1c59      	adds	r1, r3, #1
    dd0e:	60b9      	str	r1, [r7, #8]
    dd10:	781b      	ldrb	r3, [r3, #0]
    dd12:	4619      	mov	r1, r3
    dd14:	68f8      	ldr	r0, [r7, #12]
    dd16:	4790      	blx	r2
    dd18:	4603      	mov	r3, r0
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	bf14      	ite	ne
    dd1e:	2301      	movne	r3, #1
    dd20:	2300      	moveq	r3, #0
    dd22:	b2db      	uxtb	r3, r3
    dd24:	2b00      	cmp	r3, #0
    dd26:	d003      	beq.n	dd30 <_ZN5Print5writeEPKhj+0x50>
    dd28:	697b      	ldr	r3, [r7, #20]
    dd2a:	3301      	adds	r3, #1
    dd2c:	617b      	str	r3, [r7, #20]
  while (size--) {
    dd2e:	e7df      	b.n	dcf0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    dd30:	bf00      	nop
  }
  return n;
    dd32:	697b      	ldr	r3, [r7, #20]
}
    dd34:	4618      	mov	r0, r3
    dd36:	3718      	adds	r7, #24
    dd38:	46bd      	mov	sp, r7
    dd3a:	bd80      	pop	{r7, pc}

0000dd3c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    dd3c:	b580      	push	{r7, lr}
    dd3e:	b082      	sub	sp, #8
    dd40:	af00      	add	r7, sp, #0
    dd42:	6078      	str	r0, [r7, #4]
    dd44:	6039      	str	r1, [r7, #0]
  return write(str);
    dd46:	6839      	ldr	r1, [r7, #0]
    dd48:	6878      	ldr	r0, [r7, #4]
    dd4a:	4b03      	ldr	r3, [pc, #12]	; (dd58 <_ZN5Print5printEPKc+0x1c>)
    dd4c:	4798      	blx	r3
    dd4e:	4603      	mov	r3, r0
}
    dd50:	4618      	mov	r0, r3
    dd52:	3708      	adds	r7, #8
    dd54:	46bd      	mov	sp, r7
    dd56:	bd80      	pop	{r7, pc}
    dd58:	0000dca5 	.word	0x0000dca5

0000dd5c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    dd5c:	b580      	push	{r7, lr}
    dd5e:	b084      	sub	sp, #16
    dd60:	af00      	add	r7, sp, #0
    dd62:	60f8      	str	r0, [r7, #12]
    dd64:	460b      	mov	r3, r1
    dd66:	607a      	str	r2, [r7, #4]
    dd68:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    dd6a:	7afb      	ldrb	r3, [r7, #11]
    dd6c:	687a      	ldr	r2, [r7, #4]
    dd6e:	4619      	mov	r1, r3
    dd70:	68f8      	ldr	r0, [r7, #12]
    dd72:	4b03      	ldr	r3, [pc, #12]	; (dd80 <_ZN5Print5printEhi+0x24>)
    dd74:	4798      	blx	r3
    dd76:	4603      	mov	r3, r0
}
    dd78:	4618      	mov	r0, r3
    dd7a:	3710      	adds	r7, #16
    dd7c:	46bd      	mov	sp, r7
    dd7e:	bd80      	pop	{r7, pc}
    dd80:	0000dd85 	.word	0x0000dd85

0000dd84 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    dd84:	b580      	push	{r7, lr}
    dd86:	b084      	sub	sp, #16
    dd88:	af00      	add	r7, sp, #0
    dd8a:	60f8      	str	r0, [r7, #12]
    dd8c:	60b9      	str	r1, [r7, #8]
    dd8e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    dd90:	687b      	ldr	r3, [r7, #4]
    dd92:	2b00      	cmp	r3, #0
    dd94:	d109      	bne.n	ddaa <_ZN5Print5printEmi+0x26>
    dd96:	68fb      	ldr	r3, [r7, #12]
    dd98:	681b      	ldr	r3, [r3, #0]
    dd9a:	681b      	ldr	r3, [r3, #0]
    dd9c:	68ba      	ldr	r2, [r7, #8]
    dd9e:	b2d2      	uxtb	r2, r2
    dda0:	4611      	mov	r1, r2
    dda2:	68f8      	ldr	r0, [r7, #12]
    dda4:	4798      	blx	r3
    dda6:	4603      	mov	r3, r0
    dda8:	e007      	b.n	ddba <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    ddaa:	687b      	ldr	r3, [r7, #4]
    ddac:	b2db      	uxtb	r3, r3
    ddae:	461a      	mov	r2, r3
    ddb0:	68b9      	ldr	r1, [r7, #8]
    ddb2:	68f8      	ldr	r0, [r7, #12]
    ddb4:	4b03      	ldr	r3, [pc, #12]	; (ddc4 <_ZN5Print5printEmi+0x40>)
    ddb6:	4798      	blx	r3
    ddb8:	4603      	mov	r3, r0
}
    ddba:	4618      	mov	r0, r3
    ddbc:	3710      	adds	r7, #16
    ddbe:	46bd      	mov	sp, r7
    ddc0:	bd80      	pop	{r7, pc}
    ddc2:	bf00      	nop
    ddc4:	0000dded 	.word	0x0000dded

0000ddc8 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    ddc8:	b580      	push	{r7, lr}
    ddca:	b082      	sub	sp, #8
    ddcc:	af00      	add	r7, sp, #0
    ddce:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    ddd0:	4904      	ldr	r1, [pc, #16]	; (dde4 <_ZN5Print7printlnEv+0x1c>)
    ddd2:	6878      	ldr	r0, [r7, #4]
    ddd4:	4b04      	ldr	r3, [pc, #16]	; (dde8 <_ZN5Print7printlnEv+0x20>)
    ddd6:	4798      	blx	r3
    ddd8:	4603      	mov	r3, r0
}
    ddda:	4618      	mov	r0, r3
    dddc:	3708      	adds	r7, #8
    ddde:	46bd      	mov	sp, r7
    dde0:	bd80      	pop	{r7, pc}
    dde2:	bf00      	nop
    dde4:	0000f0bc 	.word	0x0000f0bc
    dde8:	0000dca5 	.word	0x0000dca5

0000ddec <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    ddec:	b580      	push	{r7, lr}
    ddee:	b08e      	sub	sp, #56	; 0x38
    ddf0:	af00      	add	r7, sp, #0
    ddf2:	60f8      	str	r0, [r7, #12]
    ddf4:	60b9      	str	r1, [r7, #8]
    ddf6:	4613      	mov	r3, r2
    ddf8:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    ddfa:	f107 0310 	add.w	r3, r7, #16
    ddfe:	3320      	adds	r3, #32
    de00:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    de02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    de04:	2200      	movs	r2, #0
    de06:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    de08:	79fb      	ldrb	r3, [r7, #7]
    de0a:	2b01      	cmp	r3, #1
    de0c:	dc01      	bgt.n	de12 <_ZN5Print11printNumberEmh+0x26>
    de0e:	230a      	movs	r3, #10
    de10:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    de12:	79fa      	ldrb	r2, [r7, #7]
    de14:	68bb      	ldr	r3, [r7, #8]
    de16:	fbb3 f1f2 	udiv	r1, r3, r2
    de1a:	fb02 f201 	mul.w	r2, r2, r1
    de1e:	1a9b      	subs	r3, r3, r2
    de20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    de24:	79fb      	ldrb	r3, [r7, #7]
    de26:	68ba      	ldr	r2, [r7, #8]
    de28:	fbb2 f3f3 	udiv	r3, r2, r3
    de2c:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    de2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    de30:	3b01      	subs	r3, #1
    de32:	637b      	str	r3, [r7, #52]	; 0x34
    de34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    de38:	2b09      	cmp	r3, #9
    de3a:	dc04      	bgt.n	de46 <_ZN5Print11printNumberEmh+0x5a>
    de3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    de40:	3330      	adds	r3, #48	; 0x30
    de42:	b2db      	uxtb	r3, r3
    de44:	e003      	b.n	de4e <_ZN5Print11printNumberEmh+0x62>
    de46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    de4a:	3337      	adds	r3, #55	; 0x37
    de4c:	b2db      	uxtb	r3, r3
    de4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    de50:	7013      	strb	r3, [r2, #0]
  } while(n);
    de52:	68bb      	ldr	r3, [r7, #8]
    de54:	2b00      	cmp	r3, #0
    de56:	d000      	beq.n	de5a <_ZN5Print11printNumberEmh+0x6e>
  do {
    de58:	e7db      	b.n	de12 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    de5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    de5c:	68f8      	ldr	r0, [r7, #12]
    de5e:	4b03      	ldr	r3, [pc, #12]	; (de6c <_ZN5Print11printNumberEmh+0x80>)
    de60:	4798      	blx	r3
    de62:	4603      	mov	r3, r0
}
    de64:	4618      	mov	r0, r3
    de66:	3738      	adds	r7, #56	; 0x38
    de68:	46bd      	mov	sp, r7
    de6a:	bd80      	pop	{r7, pc}
    de6c:	0000dca5 	.word	0x0000dca5

0000de70 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    de70:	b480      	push	{r7}
    de72:	b083      	sub	sp, #12
    de74:	af00      	add	r7, sp, #0
    de76:	6078      	str	r0, [r7, #4]
    de78:	460b      	mov	r3, r1
    de7a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    de7c:	78fb      	ldrb	r3, [r7, #3]
    de7e:	687a      	ldr	r2, [r7, #4]
    de80:	01db      	lsls	r3, r3, #7
    de82:	4413      	add	r3, r2
    de84:	681b      	ldr	r3, [r3, #0]
}
    de86:	4618      	mov	r0, r3
    de88:	370c      	adds	r7, #12
    de8a:	46bd      	mov	sp, r7
    de8c:	bc80      	pop	{r7}
    de8e:	4770      	bx	lr

0000de90 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    de90:	b480      	push	{r7}
    de92:	b083      	sub	sp, #12
    de94:	af00      	add	r7, sp, #0
    de96:	6078      	str	r0, [r7, #4]
    de98:	460b      	mov	r3, r1
    de9a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    de9c:	78fb      	ldrb	r3, [r7, #3]
    de9e:	687a      	ldr	r2, [r7, #4]
    dea0:	01db      	lsls	r3, r3, #7
    dea2:	4413      	add	r3, r2
    dea4:	3310      	adds	r3, #16
    dea6:	681b      	ldr	r3, [r3, #0]
}
    dea8:	4618      	mov	r0, r3
    deaa:	370c      	adds	r7, #12
    deac:	46bd      	mov	sp, r7
    deae:	bc80      	pop	{r7}
    deb0:	4770      	bx	lr

0000deb2 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    deb2:	b480      	push	{r7}
    deb4:	b083      	sub	sp, #12
    deb6:	af00      	add	r7, sp, #0
    deb8:	6078      	str	r0, [r7, #4]
    deba:	460b      	mov	r3, r1
    debc:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    debe:	78fb      	ldrb	r3, [r7, #3]
    dec0:	687a      	ldr	r2, [r7, #4]
    dec2:	01db      	lsls	r3, r3, #7
    dec4:	4413      	add	r3, r2
    dec6:	3320      	adds	r3, #32
    dec8:	681b      	ldr	r3, [r3, #0]
}
    deca:	4618      	mov	r0, r3
    decc:	370c      	adds	r7, #12
    dece:	46bd      	mov	sp, r7
    ded0:	bc80      	pop	{r7}
    ded2:	4770      	bx	lr

0000ded4 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    ded4:	b580      	push	{r7, lr}
    ded6:	b086      	sub	sp, #24
    ded8:	af00      	add	r7, sp, #0
    deda:	4603      	mov	r3, r0
    dedc:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    dede:	f107 030c 	add.w	r3, r7, #12
    dee2:	4618      	mov	r0, r3
    dee4:	4b13      	ldr	r3, [pc, #76]	; (df34 <_gpio_get_level+0x60>)
    dee6:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    dee8:	79fb      	ldrb	r3, [r7, #7]
    deea:	4619      	mov	r1, r3
    deec:	4812      	ldr	r0, [pc, #72]	; (df38 <_gpio_get_level+0x64>)
    deee:	4b13      	ldr	r3, [pc, #76]	; (df3c <_gpio_get_level+0x68>)
    def0:	4798      	blx	r3
    def2:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    def4:	79fb      	ldrb	r3, [r7, #7]
    def6:	4619      	mov	r1, r3
    def8:	480f      	ldr	r0, [pc, #60]	; (df38 <_gpio_get_level+0x64>)
    defa:	4b11      	ldr	r3, [pc, #68]	; (df40 <_gpio_get_level+0x6c>)
    defc:	4798      	blx	r3
    defe:	4602      	mov	r2, r0
    df00:	697b      	ldr	r3, [r7, #20]
    df02:	43db      	mvns	r3, r3
    df04:	4013      	ands	r3, r2
    df06:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    df08:	79fb      	ldrb	r3, [r7, #7]
    df0a:	4619      	mov	r1, r3
    df0c:	480a      	ldr	r0, [pc, #40]	; (df38 <_gpio_get_level+0x64>)
    df0e:	4b0d      	ldr	r3, [pc, #52]	; (df44 <_gpio_get_level+0x70>)
    df10:	4798      	blx	r3
    df12:	4602      	mov	r2, r0
    df14:	697b      	ldr	r3, [r7, #20]
    df16:	4013      	ands	r3, r2
    df18:	693a      	ldr	r2, [r7, #16]
    df1a:	4313      	orrs	r3, r2
    df1c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    df1e:	f107 030c 	add.w	r3, r7, #12
    df22:	4618      	mov	r0, r3
    df24:	4b08      	ldr	r3, [pc, #32]	; (df48 <_gpio_get_level+0x74>)
    df26:	4798      	blx	r3

	return tmp;
    df28:	693b      	ldr	r3, [r7, #16]
}
    df2a:	4618      	mov	r0, r3
    df2c:	3718      	adds	r7, #24
    df2e:	46bd      	mov	sp, r7
    df30:	bd80      	pop	{r7, pc}
    df32:	bf00      	nop
    df34:	0000b2d5 	.word	0x0000b2d5
    df38:	41008000 	.word	0x41008000
    df3c:	0000de71 	.word	0x0000de71
    df40:	0000deb3 	.word	0x0000deb3
    df44:	0000de91 	.word	0x0000de91
    df48:	0000b2fb 	.word	0x0000b2fb

0000df4c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    df4c:	b580      	push	{r7, lr}
    df4e:	b082      	sub	sp, #8
    df50:	af00      	add	r7, sp, #0
    df52:	4603      	mov	r3, r0
    df54:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    df56:	79fb      	ldrb	r3, [r7, #7]
    df58:	115b      	asrs	r3, r3, #5
    df5a:	b2db      	uxtb	r3, r3
    df5c:	4618      	mov	r0, r3
    df5e:	4b09      	ldr	r3, [pc, #36]	; (df84 <gpio_get_pin_level+0x38>)
    df60:	4798      	blx	r3
    df62:	4601      	mov	r1, r0
    df64:	79fb      	ldrb	r3, [r7, #7]
    df66:	f003 031f 	and.w	r3, r3, #31
    df6a:	2201      	movs	r2, #1
    df6c:	fa02 f303 	lsl.w	r3, r2, r3
    df70:	400b      	ands	r3, r1
    df72:	2b00      	cmp	r3, #0
    df74:	bf14      	ite	ne
    df76:	2301      	movne	r3, #1
    df78:	2300      	moveq	r3, #0
    df7a:	b2db      	uxtb	r3, r3
}
    df7c:	4618      	mov	r0, r3
    df7e:	3708      	adds	r7, #8
    df80:	46bd      	mov	sp, r7
    df82:	bd80      	pop	{r7, pc}
    df84:	0000ded5 	.word	0x0000ded5

0000df88 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    df88:	b480      	push	{r7}
    df8a:	b083      	sub	sp, #12
    df8c:	af00      	add	r7, sp, #0
    df8e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    df90:	4b06      	ldr	r3, [pc, #24]	; (dfac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    df92:	681b      	ldr	r3, [r3, #0]
    df94:	2201      	movs	r2, #1
    df96:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    df98:	4b04      	ldr	r3, [pc, #16]	; (dfac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    df9a:	681b      	ldr	r3, [r3, #0]
    df9c:	2200      	movs	r2, #0
    df9e:	705a      	strb	r2, [r3, #1]
}
    dfa0:	bf00      	nop
    dfa2:	370c      	adds	r7, #12
    dfa4:	46bd      	mov	sp, r7
    dfa6:	bc80      	pop	{r7}
    dfa8:	4770      	bx	lr
    dfaa:	bf00      	nop
    dfac:	20000d14 	.word	0x20000d14

0000dfb0 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    dfb0:	b480      	push	{r7}
    dfb2:	b083      	sub	sp, #12
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    dfb8:	4a04      	ldr	r2, [pc, #16]	; (dfcc <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    dfba:	687b      	ldr	r3, [r7, #4]
    dfbc:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	4618      	mov	r0, r3
    dfc2:	370c      	adds	r7, #12
    dfc4:	46bd      	mov	sp, r7
    dfc6:	bc80      	pop	{r7}
    dfc8:	4770      	bx	lr
    dfca:	bf00      	nop
    dfcc:	20000d14 	.word	0x20000d14

0000dfd0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    dfd0:	b480      	push	{r7}
    dfd2:	b083      	sub	sp, #12
    dfd4:	af00      	add	r7, sp, #0
    dfd6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    dfd8:	687b      	ldr	r3, [r7, #4]
    dfda:	4618      	mov	r0, r3
    dfdc:	370c      	adds	r7, #12
    dfde:	46bd      	mov	sp, r7
    dfe0:	bc80      	pop	{r7}
    dfe2:	4770      	bx	lr

0000dfe4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    dfe4:	b580      	push	{r7, lr}
    dfe6:	b082      	sub	sp, #8
    dfe8:	af00      	add	r7, sp, #0
    dfea:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    dfec:	2040      	movs	r0, #64	; 0x40
    dfee:	4b1c      	ldr	r3, [pc, #112]	; (e060 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    dff0:	4798      	blx	r3
    dff2:	4603      	mov	r3, r0
    dff4:	461a      	mov	r2, r3
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    dffa:	687b      	ldr	r3, [r7, #4]
    dffc:	78db      	ldrb	r3, [r3, #3]
    dffe:	2b00      	cmp	r3, #0
    e000:	d024      	beq.n	e04c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    e002:	687b      	ldr	r3, [r7, #4]
    e004:	2200      	movs	r2, #0
    e006:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    e008:	687b      	ldr	r3, [r7, #4]
    e00a:	2201      	movs	r2, #1
    e00c:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e00e:	f44f 7216 	mov.w	r2, #600	; 0x258
    e012:	4914      	ldr	r1, [pc, #80]	; (e064 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    e014:	4814      	ldr	r0, [pc, #80]	; (e068 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e016:	4b15      	ldr	r3, [pc, #84]	; (e06c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e018:	4798      	blx	r3
			usbTerminalTimer.Start();
    e01a:	4813      	ldr	r0, [pc, #76]	; (e068 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e01c:	4b14      	ldr	r3, [pc, #80]	; (e070 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e01e:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e020:	4814      	ldr	r0, [pc, #80]	; (e074 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e022:	4b15      	ldr	r3, [pc, #84]	; (e078 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e024:	4798      	blx	r3
    e026:	4603      	mov	r3, r0
    e028:	f083 0301 	eor.w	r3, r3, #1
    e02c:	b2db      	uxtb	r3, r3
    e02e:	2b00      	cmp	r3, #0
    e030:	d008      	beq.n	e044 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    e032:	687b      	ldr	r3, [r7, #4]
    e034:	789b      	ldrb	r3, [r3, #2]
    e036:	b2db      	uxtb	r3, r3
    e038:	2b00      	cmp	r3, #0
    e03a:	d0f1      	beq.n	e020 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	2200      	movs	r2, #0
    e040:	701a      	strb	r2, [r3, #0]
					return;
    e042:	e009      	b.n	e058 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e044:	4808      	ldr	r0, [pc, #32]	; (e068 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e046:	4b0d      	ldr	r3, [pc, #52]	; (e07c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e048:	4798      	blx	r3
    e04a:	e005      	b.n	e058 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    e04c:	687b      	ldr	r3, [r7, #4]
    e04e:	2200      	movs	r2, #0
    e050:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    e052:	687b      	ldr	r3, [r7, #4]
    e054:	2200      	movs	r2, #0
    e056:	705a      	strb	r2, [r3, #1]
		}
		
}
    e058:	3708      	adds	r7, #8
    e05a:	46bd      	mov	sp, r7
    e05c:	bd80      	pop	{r7, pc}
    e05e:	bf00      	nop
    e060:	0000df4d 	.word	0x0000df4d
    e064:	0000df89 	.word	0x0000df89
    e068:	20000dbc 	.word	0x20000dbc
    e06c:	0000e269 	.word	0x0000e269
    e070:	0000e18d 	.word	0x0000e18d
    e074:	20000cb4 	.word	0x20000cb4
    e078:	0000d99d 	.word	0x0000d99d
    e07c:	0000e1b1 	.word	0x0000e1b1

0000e080 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTerminalTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    e080:	b580      	push	{r7, lr}
    e082:	b082      	sub	sp, #8
    e084:	af00      	add	r7, sp, #0
    e086:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    e088:	687b      	ldr	r3, [r7, #4]
    e08a:	785b      	ldrb	r3, [r3, #1]
    e08c:	b2db      	uxtb	r3, r3
    e08e:	2b00      	cmp	r3, #0
    e090:	d01f      	beq.n	e0d2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	781b      	ldrb	r3, [r3, #0]
    e096:	b2db      	uxtb	r3, r3
    e098:	2b00      	cmp	r3, #0
    e09a:	d105      	bne.n	e0a8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    e09c:	4812      	ldr	r0, [pc, #72]	; (e0e8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    e09e:	4b13      	ldr	r3, [pc, #76]	; (e0ec <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    e0a0:	4798      	blx	r3
    e0a2:	4603      	mov	r3, r0
    e0a4:	2b00      	cmp	r3, #0
    e0a6:	d001      	beq.n	e0ac <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    e0a8:	2301      	movs	r3, #1
    e0aa:	e000      	b.n	e0ae <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    e0ac:	2300      	movs	r3, #0
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d00b      	beq.n	e0ca <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTerminalTimer.Start()==0;
    e0b2:	480f      	ldr	r0, [pc, #60]	; (e0f0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    e0b4:	4b0f      	ldr	r3, [pc, #60]	; (e0f4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    e0b6:	4798      	blx	r3
    e0b8:	4603      	mov	r3, r0
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	bf0c      	ite	eq
    e0be:	2301      	moveq	r3, #1
    e0c0:	2300      	movne	r3, #0
    e0c2:	b2da      	uxtb	r2, r3
    e0c4:	687b      	ldr	r3, [r7, #4]
    e0c6:	705a      	strb	r2, [r3, #1]
    e0c8:	e007      	b.n	e0da <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    e0ca:	687b      	ldr	r3, [r7, #4]
    e0cc:	2200      	movs	r2, #0
    e0ce:	705a      	strb	r2, [r3, #1]
    e0d0:	e003      	b.n	e0da <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    e0d2:	687b      	ldr	r3, [r7, #4]
    e0d4:	785b      	ldrb	r3, [r3, #1]
    e0d6:	b2db      	uxtb	r3, r3
    e0d8:	e002      	b.n	e0e0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	785b      	ldrb	r3, [r3, #1]
    e0de:	b2db      	uxtb	r3, r3
}
    e0e0:	4618      	mov	r0, r3
    e0e2:	3708      	adds	r7, #8
    e0e4:	46bd      	mov	sp, r7
    e0e6:	bd80      	pop	{r7, pc}
    e0e8:	20000cb4 	.word	0x20000cb4
    e0ec:	0000d99d 	.word	0x0000d99d
    e0f0:	20000dbc 	.word	0x20000dbc
    e0f4:	0000e18d 	.word	0x0000e18d

0000e0f8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e0f8:	b580      	push	{r7, lr}
    e0fa:	b082      	sub	sp, #8
    e0fc:	af00      	add	r7, sp, #0
    e0fe:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e100:	4b04      	ldr	r3, [pc, #16]	; (e114 <_ZL7task_cbPK10timer_task+0x1c>)
    e102:	681b      	ldr	r3, [r3, #0]
    e104:	4618      	mov	r0, r3
    e106:	4b04      	ldr	r3, [pc, #16]	; (e118 <_ZL7task_cbPK10timer_task+0x20>)
    e108:	4798      	blx	r3
}
    e10a:	bf00      	nop
    e10c:	3708      	adds	r7, #8
    e10e:	46bd      	mov	sp, r7
    e110:	bd80      	pop	{r7, pc}
    e112:	bf00      	nop
    e114:	20000d18 	.word	0x20000d18
    e118:	0000e1d9 	.word	0x0000e1d9

0000e11c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e11c:	b480      	push	{r7}
    e11e:	b083      	sub	sp, #12
    e120:	af00      	add	r7, sp, #0
    e122:	6078      	str	r0, [r7, #4]
    e124:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e126:	687b      	ldr	r3, [r7, #4]
    e128:	683a      	ldr	r2, [r7, #0]
    e12a:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
    e12c:	4a08      	ldr	r2, [pc, #32]	; (e150 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e12e:	687b      	ldr	r3, [r7, #4]
    e130:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e132:	687b      	ldr	r3, [r7, #4]
    e134:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e138:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
    e13a:	687b      	ldr	r3, [r7, #4]
    e13c:	689b      	ldr	r3, [r3, #8]
    e13e:	4a05      	ldr	r2, [pc, #20]	; (e154 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e140:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e142:	687b      	ldr	r3, [r7, #4]
    e144:	4618      	mov	r0, r3
    e146:	370c      	adds	r7, #12
    e148:	46bd      	mov	sp, r7
    e14a:	bc80      	pop	{r7}
    e14c:	4770      	bx	lr
    e14e:	bf00      	nop
    e150:	20000d18 	.word	0x20000d18
    e154:	0000e0f9 	.word	0x0000e0f9

0000e158 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e158:	b480      	push	{r7}
    e15a:	b083      	sub	sp, #12
    e15c:	af00      	add	r7, sp, #0
    e15e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e160:	687b      	ldr	r3, [r7, #4]
    e162:	2200      	movs	r2, #0
    e164:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e166:	687b      	ldr	r3, [r7, #4]
    e168:	4618      	mov	r0, r3
    e16a:	370c      	adds	r7, #12
    e16c:	46bd      	mov	sp, r7
    e16e:	bc80      	pop	{r7}
    e170:	4770      	bx	lr

0000e172 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void TimerSerial_Class::Init(void){
    e172:	b480      	push	{r7}
    e174:	b083      	sub	sp, #12
    e176:	af00      	add	r7, sp, #0
    e178:	6078      	str	r0, [r7, #4]
	ticks=0;
    e17a:	687b      	ldr	r3, [r7, #4]
    e17c:	2200      	movs	r2, #0
    e17e:	619a      	str	r2, [r3, #24]
}
    e180:	bf00      	nop
    e182:	370c      	adds	r7, #12
    e184:	46bd      	mov	sp, r7
    e186:	bc80      	pop	{r7}
    e188:	4770      	bx	lr
	...

0000e18c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e18c:	b580      	push	{r7, lr}
    e18e:	b084      	sub	sp, #16
    e190:	af00      	add	r7, sp, #0
    e192:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	68db      	ldr	r3, [r3, #12]
    e198:	4618      	mov	r0, r3
    e19a:	4b04      	ldr	r3, [pc, #16]	; (e1ac <_ZN17TimerSerial_Class5StartEv+0x20>)
    e19c:	4798      	blx	r3
    e19e:	60f8      	str	r0, [r7, #12]
	return status;
    e1a0:	68fb      	ldr	r3, [r7, #12]
	
}
    e1a2:	4618      	mov	r0, r3
    e1a4:	3710      	adds	r7, #16
    e1a6:	46bd      	mov	sp, r7
    e1a8:	bd80      	pop	{r7, pc}
    e1aa:	bf00      	nop
    e1ac:	00002bd9 	.word	0x00002bd9

0000e1b0 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e1b0:	b580      	push	{r7, lr}
    e1b2:	b084      	sub	sp, #16
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e1b8:	687b      	ldr	r3, [r7, #4]
    e1ba:	68db      	ldr	r3, [r3, #12]
    e1bc:	4618      	mov	r0, r3
    e1be:	4b05      	ldr	r3, [pc, #20]	; (e1d4 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e1c0:	4798      	blx	r3
    e1c2:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e1c4:	687b      	ldr	r3, [r7, #4]
    e1c6:	2200      	movs	r2, #0
    e1c8:	705a      	strb	r2, [r3, #1]
	return status;
    e1ca:	68fb      	ldr	r3, [r7, #12]
}
    e1cc:	4618      	mov	r0, r3
    e1ce:	3710      	adds	r7, #16
    e1d0:	46bd      	mov	sp, r7
    e1d2:	bd80      	pop	{r7, pc}
    e1d4:	00002c2d 	.word	0x00002c2d

0000e1d8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e1d8:	b480      	push	{r7}
    e1da:	b083      	sub	sp, #12
    e1dc:	af00      	add	r7, sp, #0
    e1de:	6078      	str	r0, [r7, #4]
	timeout=1;
    e1e0:	687b      	ldr	r3, [r7, #4]
    e1e2:	2201      	movs	r2, #1
    e1e4:	705a      	strb	r2, [r3, #1]
}
    e1e6:	bf00      	nop
    e1e8:	370c      	adds	r7, #12
    e1ea:	46bd      	mov	sp, r7
    e1ec:	bc80      	pop	{r7}
    e1ee:	4770      	bx	lr

0000e1f0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e1f0:	b580      	push	{r7, lr}
    e1f2:	b086      	sub	sp, #24
    e1f4:	af00      	add	r7, sp, #0
    e1f6:	60f8      	str	r0, [r7, #12]
    e1f8:	60b9      	str	r1, [r7, #8]
    e1fa:	607a      	str	r2, [r7, #4]
    e1fc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e1fe:	68f8      	ldr	r0, [r7, #12]
    e200:	4b0d      	ldr	r3, [pc, #52]	; (e238 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e202:	4798      	blx	r3
	task->interval = interval;
    e204:	68fb      	ldr	r3, [r7, #12]
    e206:	689b      	ldr	r3, [r3, #8]
    e208:	687a      	ldr	r2, [r7, #4]
    e20a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e20c:	68fb      	ldr	r3, [r7, #12]
    e20e:	689b      	ldr	r3, [r3, #8]
    e210:	68ba      	ldr	r2, [r7, #8]
    e212:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e214:	68fb      	ldr	r3, [r7, #12]
    e216:	689b      	ldr	r3, [r3, #8]
    e218:	78fa      	ldrb	r2, [r7, #3]
    e21a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e21c:	68fb      	ldr	r3, [r7, #12]
    e21e:	68da      	ldr	r2, [r3, #12]
    e220:	68fb      	ldr	r3, [r7, #12]
    e222:	689b      	ldr	r3, [r3, #8]
    e224:	4619      	mov	r1, r3
    e226:	4610      	mov	r0, r2
    e228:	4b04      	ldr	r3, [pc, #16]	; (e23c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e22a:	4798      	blx	r3
    e22c:	6178      	str	r0, [r7, #20]
	
	return status;
    e22e:	697b      	ldr	r3, [r7, #20]
}
    e230:	4618      	mov	r0, r3
    e232:	3718      	adds	r7, #24
    e234:	46bd      	mov	sp, r7
    e236:	bd80      	pop	{r7, pc}
    e238:	0000e321 	.word	0x0000e321
    e23c:	00002c89 	.word	0x00002c89

0000e240 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e240:	b590      	push	{r4, r7, lr}
    e242:	b087      	sub	sp, #28
    e244:	af00      	add	r7, sp, #0
    e246:	60f8      	str	r0, [r7, #12]
    e248:	60b9      	str	r1, [r7, #8]
    e24a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e24c:	2301      	movs	r3, #1
    e24e:	687a      	ldr	r2, [r7, #4]
    e250:	68b9      	ldr	r1, [r7, #8]
    e252:	68f8      	ldr	r0, [r7, #12]
    e254:	4c03      	ldr	r4, [pc, #12]	; (e264 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    e256:	47a0      	blx	r4
    e258:	6178      	str	r0, [r7, #20]
		return status;
    e25a:	697b      	ldr	r3, [r7, #20]
}
    e25c:	4618      	mov	r0, r3
    e25e:	371c      	adds	r7, #28
    e260:	46bd      	mov	sp, r7
    e262:	bd90      	pop	{r4, r7, pc}
    e264:	0000e1f1 	.word	0x0000e1f1

0000e268 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e268:	b590      	push	{r4, r7, lr}
    e26a:	b087      	sub	sp, #28
    e26c:	af00      	add	r7, sp, #0
    e26e:	60f8      	str	r0, [r7, #12]
    e270:	60b9      	str	r1, [r7, #8]
    e272:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e274:	2300      	movs	r3, #0
    e276:	687a      	ldr	r2, [r7, #4]
    e278:	68b9      	ldr	r1, [r7, #8]
    e27a:	68f8      	ldr	r0, [r7, #12]
    e27c:	4c03      	ldr	r4, [pc, #12]	; (e28c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e27e:	47a0      	blx	r4
    e280:	6178      	str	r0, [r7, #20]
	return status;
    e282:	697b      	ldr	r3, [r7, #20]
}
    e284:	4618      	mov	r0, r3
    e286:	371c      	adds	r7, #28
    e288:	46bd      	mov	sp, r7
    e28a:	bd90      	pop	{r4, r7, pc}
    e28c:	0000e1f1 	.word	0x0000e1f1

0000e290 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e290:	b590      	push	{r4, r7, lr}
    e292:	b087      	sub	sp, #28
    e294:	af00      	add	r7, sp, #0
    e296:	60f8      	str	r0, [r7, #12]
    e298:	60b9      	str	r1, [r7, #8]
    e29a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e29c:	2300      	movs	r3, #0
    e29e:	687a      	ldr	r2, [r7, #4]
    e2a0:	68b9      	ldr	r1, [r7, #8]
    e2a2:	68f8      	ldr	r0, [r7, #12]
    e2a4:	4c06      	ldr	r4, [pc, #24]	; (e2c0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e2a6:	47a0      	blx	r4
    e2a8:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e2aa:	68fb      	ldr	r3, [r7, #12]
    e2ac:	68db      	ldr	r3, [r3, #12]
    e2ae:	4618      	mov	r0, r3
    e2b0:	4b04      	ldr	r3, [pc, #16]	; (e2c4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e2b2:	4798      	blx	r3
    e2b4:	6178      	str	r0, [r7, #20]
	return status;
    e2b6:	697b      	ldr	r3, [r7, #20]
}
    e2b8:	4618      	mov	r0, r3
    e2ba:	371c      	adds	r7, #28
    e2bc:	46bd      	mov	sp, r7
    e2be:	bd90      	pop	{r4, r7, pc}
    e2c0:	0000e1f1 	.word	0x0000e1f1
    e2c4:	00002bd9 	.word	0x00002bd9

0000e2c8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e2c8:	b580      	push	{r7, lr}
    e2ca:	b082      	sub	sp, #8
    e2cc:	af00      	add	r7, sp, #0
    e2ce:	6078      	str	r0, [r7, #4]
    e2d0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e2d2:	6839      	ldr	r1, [r7, #0]
    e2d4:	6878      	ldr	r0, [r7, #4]
    e2d6:	4b0f      	ldr	r3, [pc, #60]	; (e314 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e2d8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e2da:	687b      	ldr	r3, [r7, #4]
    e2dc:	68db      	ldr	r3, [r3, #12]
    e2de:	f103 0214 	add.w	r2, r3, #20
    e2e2:	687b      	ldr	r3, [r7, #4]
    e2e4:	689b      	ldr	r3, [r3, #8]
    e2e6:	4619      	mov	r1, r3
    e2e8:	4610      	mov	r0, r2
    e2ea:	4b0b      	ldr	r3, [pc, #44]	; (e318 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e2ec:	4798      	blx	r3
    e2ee:	4603      	mov	r3, r0
    e2f0:	2b00      	cmp	r3, #0
    e2f2:	d007      	beq.n	e304 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e2f4:	687b      	ldr	r3, [r7, #4]
    e2f6:	68da      	ldr	r2, [r3, #12]
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	689b      	ldr	r3, [r3, #8]
    e2fc:	4619      	mov	r1, r3
    e2fe:	4610      	mov	r0, r2
    e300:	4b06      	ldr	r3, [pc, #24]	; (e31c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e302:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e304:	687b      	ldr	r3, [r7, #4]
    e306:	689b      	ldr	r3, [r3, #8]
    e308:	2200      	movs	r2, #0
    e30a:	60da      	str	r2, [r3, #12]
}
    e30c:	bf00      	nop
    e30e:	3708      	adds	r7, #8
    e310:	46bd      	mov	sp, r7
    e312:	bd80      	pop	{r7, pc}
    e314:	0000e389 	.word	0x0000e389
    e318:	00003959 	.word	0x00003959
    e31c:	00002d81 	.word	0x00002d81

0000e320 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e320:	b480      	push	{r7}
    e322:	b083      	sub	sp, #12
    e324:	af00      	add	r7, sp, #0
    e326:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    e328:	687b      	ldr	r3, [r7, #4]
    e32a:	2200      	movs	r2, #0
    e32c:	771a      	strb	r2, [r3, #28]
    e32e:	687b      	ldr	r3, [r7, #4]
    e330:	7f1b      	ldrb	r3, [r3, #28]
    e332:	2b07      	cmp	r3, #7
    e334:	dc1f      	bgt.n	e376 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    e336:	687b      	ldr	r3, [r7, #4]
    e338:	7f1b      	ldrb	r3, [r3, #28]
    e33a:	4619      	mov	r1, r3
    e33c:	4a11      	ldr	r2, [pc, #68]	; (e384 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e33e:	460b      	mov	r3, r1
    e340:	009b      	lsls	r3, r3, #2
    e342:	440b      	add	r3, r1
    e344:	009b      	lsls	r3, r3, #2
    e346:	4413      	add	r3, r2
    e348:	330c      	adds	r3, #12
    e34a:	681b      	ldr	r3, [r3, #0]
    e34c:	2b00      	cmp	r3, #0
    e34e:	d10b      	bne.n	e368 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    e350:	687b      	ldr	r3, [r7, #4]
    e352:	7f1b      	ldrb	r3, [r3, #28]
    e354:	461a      	mov	r2, r3
    e356:	4613      	mov	r3, r2
    e358:	009b      	lsls	r3, r3, #2
    e35a:	4413      	add	r3, r2
    e35c:	009b      	lsls	r3, r3, #2
    e35e:	4a09      	ldr	r2, [pc, #36]	; (e384 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e360:	441a      	add	r2, r3
    e362:	687b      	ldr	r3, [r7, #4]
    e364:	609a      	str	r2, [r3, #8]
			return;
    e366:	e009      	b.n	e37c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    e368:	687b      	ldr	r3, [r7, #4]
    e36a:	7f1b      	ldrb	r3, [r3, #28]
    e36c:	3301      	adds	r3, #1
    e36e:	b2da      	uxtb	r2, r3
    e370:	687b      	ldr	r3, [r7, #4]
    e372:	771a      	strb	r2, [r3, #28]
    e374:	e7db      	b.n	e32e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    e376:	687b      	ldr	r3, [r7, #4]
    e378:	4a02      	ldr	r2, [pc, #8]	; (e384 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e37a:	609a      	str	r2, [r3, #8]

}
    e37c:	370c      	adds	r7, #12
    e37e:	46bd      	mov	sp, r7
    e380:	bc80      	pop	{r7}
    e382:	4770      	bx	lr
    e384:	20000d1c 	.word	0x20000d1c

0000e388 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e388:	b480      	push	{r7}
    e38a:	b083      	sub	sp, #12
    e38c:	af00      	add	r7, sp, #0
    e38e:	6078      	str	r0, [r7, #4]
    e390:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
    e392:	687b      	ldr	r3, [r7, #4]
    e394:	2200      	movs	r2, #0
    e396:	771a      	strb	r2, [r3, #28]
    e398:	687b      	ldr	r3, [r7, #4]
    e39a:	7f1b      	ldrb	r3, [r3, #28]
    e39c:	2b07      	cmp	r3, #7
    e39e:	dc20      	bgt.n	e3e2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    e3a0:	687b      	ldr	r3, [r7, #4]
    e3a2:	7f1b      	ldrb	r3, [r3, #28]
    e3a4:	4619      	mov	r1, r3
    e3a6:	4a11      	ldr	r2, [pc, #68]	; (e3ec <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    e3a8:	460b      	mov	r3, r1
    e3aa:	009b      	lsls	r3, r3, #2
    e3ac:	440b      	add	r3, r1
    e3ae:	009b      	lsls	r3, r3, #2
    e3b0:	4413      	add	r3, r2
    e3b2:	330c      	adds	r3, #12
    e3b4:	681a      	ldr	r2, [r3, #0]
    e3b6:	683b      	ldr	r3, [r7, #0]
    e3b8:	429a      	cmp	r2, r3
    e3ba:	d10b      	bne.n	e3d4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    e3bc:	687b      	ldr	r3, [r7, #4]
    e3be:	7f1b      	ldrb	r3, [r3, #28]
    e3c0:	461a      	mov	r2, r3
    e3c2:	4613      	mov	r3, r2
    e3c4:	009b      	lsls	r3, r3, #2
    e3c6:	4413      	add	r3, r2
    e3c8:	009b      	lsls	r3, r3, #2
    e3ca:	4a08      	ldr	r2, [pc, #32]	; (e3ec <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    e3cc:	441a      	add	r2, r3
    e3ce:	687b      	ldr	r3, [r7, #4]
    e3d0:	609a      	str	r2, [r3, #8]
			return;
    e3d2:	e006      	b.n	e3e2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
    e3d4:	687b      	ldr	r3, [r7, #4]
    e3d6:	7f1b      	ldrb	r3, [r3, #28]
    e3d8:	3301      	adds	r3, #1
    e3da:	b2da      	uxtb	r2, r3
    e3dc:	687b      	ldr	r3, [r7, #4]
    e3de:	771a      	strb	r2, [r3, #28]
    e3e0:	e7da      	b.n	e398 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    e3e2:	370c      	adds	r7, #12
    e3e4:	46bd      	mov	sp, r7
    e3e6:	bc80      	pop	{r7}
    e3e8:	4770      	bx	lr
    e3ea:	bf00      	nop
    e3ec:	20000d1c 	.word	0x20000d1c

0000e3f0 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b082      	sub	sp, #8
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	6078      	str	r0, [r7, #4]
    e3f8:	6039      	str	r1, [r7, #0]
    e3fa:	687b      	ldr	r3, [r7, #4]
    e3fc:	2b01      	cmp	r3, #1
    e3fe:	d116      	bne.n	e42e <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e400:	683b      	ldr	r3, [r7, #0]
    e402:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e406:	4293      	cmp	r3, r2
    e408:	d111      	bne.n	e42e <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e40a:	490b      	ldr	r1, [pc, #44]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e40c:	480b      	ldr	r0, [pc, #44]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e40e:	4b0c      	ldr	r3, [pc, #48]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e410:	4798      	blx	r3
    e412:	4a0c      	ldr	r2, [pc, #48]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e414:	490c      	ldr	r1, [pc, #48]	; (e448 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e416:	4809      	ldr	r0, [pc, #36]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e418:	4b0c      	ldr	r3, [pc, #48]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e41a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e41c:	490c      	ldr	r1, [pc, #48]	; (e450 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e41e:	480d      	ldr	r0, [pc, #52]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e420:	4b07      	ldr	r3, [pc, #28]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e422:	4798      	blx	r3
    e424:	4a07      	ldr	r2, [pc, #28]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e426:	4908      	ldr	r1, [pc, #32]	; (e448 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e428:	480a      	ldr	r0, [pc, #40]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e42a:	4b08      	ldr	r3, [pc, #32]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e42c:	4798      	blx	r3
    e42e:	bf00      	nop
    e430:	3708      	adds	r7, #8
    e432:	46bd      	mov	sp, r7
    e434:	bd80      	pop	{r7, pc}
    e436:	bf00      	nop
    e438:	20000f34 	.word	0x20000f34
    e43c:	20000dbc 	.word	0x20000dbc
    e440:	0000e11d 	.word	0x0000e11d
    e444:	20000000 	.word	0x20000000
    e448:	0000e159 	.word	0x0000e159
    e44c:	0000e7a5 	.word	0x0000e7a5
    e450:	20000e7c 	.word	0x20000e7c
    e454:	20000ddc 	.word	0x20000ddc

0000e458 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e458:	b580      	push	{r7, lr}
    e45a:	af00      	add	r7, sp, #0
    e45c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e460:	2001      	movs	r0, #1
    e462:	4b01      	ldr	r3, [pc, #4]	; (e468 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e464:	4798      	blx	r3
    e466:	bd80      	pop	{r7, pc}
    e468:	0000e3f1 	.word	0x0000e3f1

0000e46c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e46c:	b480      	push	{r7}
    e46e:	b083      	sub	sp, #12
    e470:	af00      	add	r7, sp, #0
    e472:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e474:	2300      	movs	r3, #0
	}
    e476:	4618      	mov	r0, r3
    e478:	370c      	adds	r7, #12
    e47a:	46bd      	mov	sp, r7
    e47c:	bc80      	pop	{r7}
    e47e:	4770      	bx	lr

0000e480 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e480:	b480      	push	{r7}
    e482:	af00      	add	r7, sp, #0
		}
    e484:	bf00      	nop
    e486:	46bd      	mov	sp, r7
    e488:	bc80      	pop	{r7}
    e48a:	4770      	bx	lr

0000e48c <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
    e48c:	b480      	push	{r7}
    e48e:	b083      	sub	sp, #12
    e490:	af00      	add	r7, sp, #0
    e492:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
    e494:	4b04      	ldr	r3, [pc, #16]	; (e4a8 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
    e496:	681b      	ldr	r3, [r3, #0]
    e498:	2201      	movs	r2, #1
    e49a:	701a      	strb	r2, [r3, #0]

}
    e49c:	bf00      	nop
    e49e:	370c      	adds	r7, #12
    e4a0:	46bd      	mov	sp, r7
    e4a2:	bc80      	pop	{r7}
    e4a4:	4770      	bx	lr
    e4a6:	bf00      	nop
    e4a8:	20000dfc 	.word	0x20000dfc

0000e4ac <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
    e4ac:	b480      	push	{r7}
    e4ae:	b083      	sub	sp, #12
    e4b0:	af00      	add	r7, sp, #0
    e4b2:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
    e4b4:	4b04      	ldr	r3, [pc, #16]	; (e4c8 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
    e4b6:	681b      	ldr	r3, [r3, #0]
    e4b8:	2201      	movs	r2, #1
    e4ba:	705a      	strb	r2, [r3, #1]
}
    e4bc:	bf00      	nop
    e4be:	370c      	adds	r7, #12
    e4c0:	46bd      	mov	sp, r7
    e4c2:	bc80      	pop	{r7}
    e4c4:	4770      	bx	lr
    e4c6:	bf00      	nop
    e4c8:	20000dfc 	.word	0x20000dfc

0000e4cc <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
    e4cc:	b580      	push	{r7, lr}
    e4ce:	b082      	sub	sp, #8
    e4d0:	af00      	add	r7, sp, #0
    e4d2:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
    e4d4:	4b08      	ldr	r3, [pc, #32]	; (e4f8 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    e4d6:	681b      	ldr	r3, [r3, #0]
    e4d8:	4618      	mov	r0, r3
    e4da:	4b08      	ldr	r3, [pc, #32]	; (e4fc <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
    e4dc:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
    e4de:	4b06      	ldr	r3, [pc, #24]	; (e4f8 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    e4e0:	681b      	ldr	r3, [r3, #0]
    e4e2:	2201      	movs	r2, #1
    e4e4:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
    e4e6:	4b04      	ldr	r3, [pc, #16]	; (e4f8 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    e4e8:	681b      	ldr	r3, [r3, #0]
    e4ea:	2201      	movs	r2, #1
    e4ec:	705a      	strb	r2, [r3, #1]
 }
    e4ee:	bf00      	nop
    e4f0:	3708      	adds	r7, #8
    e4f2:	46bd      	mov	sp, r7
    e4f4:	bd80      	pop	{r7, pc}
    e4f6:	bf00      	nop
    e4f8:	20000dfc 	.word	0x20000dfc
    e4fc:	0000e6b1 	.word	0x0000e6b1

0000e500 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
    e500:	b480      	push	{r7}
    e502:	b083      	sub	sp, #12
    e504:	af00      	add	r7, sp, #0
    e506:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
    e508:	687b      	ldr	r3, [r7, #4]
    e50a:	4a05      	ldr	r2, [pc, #20]	; (e520 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
    e50c:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    e50e:	4a05      	ldr	r2, [pc, #20]	; (e524 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
    e510:	687b      	ldr	r3, [r7, #4]
    e512:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
    e514:	687b      	ldr	r3, [r7, #4]
    e516:	4618      	mov	r0, r3
    e518:	370c      	adds	r7, #12
    e51a:	46bd      	mov	sp, r7
    e51c:	bc80      	pop	{r7}
    e51e:	4770      	bx	lr
    e520:	20000f50 	.word	0x20000f50
    e524:	20000dfc 	.word	0x20000dfc

0000e528 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
    e528:	b480      	push	{r7}
    e52a:	b083      	sub	sp, #12
    e52c:	af00      	add	r7, sp, #0
    e52e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
    e530:	687b      	ldr	r3, [r7, #4]
    e532:	4618      	mov	r0, r3
    e534:	370c      	adds	r7, #12
    e536:	46bd      	mov	sp, r7
    e538:	bc80      	pop	{r7}
    e53a:	4770      	bx	lr

0000e53c <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
    e53c:	b480      	push	{r7}
    e53e:	b083      	sub	sp, #12
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
    e544:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
    e546:	687b      	ldr	r3, [r7, #4]
    e548:	683a      	ldr	r2, [r7, #0]
    e54a:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    e54c:	4a03      	ldr	r2, [pc, #12]	; (e55c <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	6013      	str	r3, [r2, #0]
}
    e552:	bf00      	nop
    e554:	370c      	adds	r7, #12
    e556:	46bd      	mov	sp, r7
    e558:	bc80      	pop	{r7}
    e55a:	4770      	bx	lr
    e55c:	20000dfc 	.word	0x20000dfc

0000e560 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
    e560:	b580      	push	{r7, lr}
    e562:	b084      	sub	sp, #16
    e564:	af00      	add	r7, sp, #0
    e566:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	689a      	ldr	r2, [r3, #8]
    e56c:	687b      	ldr	r3, [r7, #4]
    e56e:	3304      	adds	r3, #4
    e570:	4619      	mov	r1, r3
    e572:	4610      	mov	r0, r2
    e574:	4b14      	ldr	r3, [pc, #80]	; (e5c8 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
    e576:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
    e578:	687b      	ldr	r3, [r7, #4]
    e57a:	689b      	ldr	r3, [r3, #8]
    e57c:	4618      	mov	r0, r3
    e57e:	4b13      	ldr	r3, [pc, #76]	; (e5cc <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
    e580:	4798      	blx	r3
    e582:	4603      	mov	r3, r0
    e584:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
    e586:	687b      	ldr	r3, [r7, #4]
    e588:	689b      	ldr	r3, [r3, #8]
    e58a:	4a11      	ldr	r2, [pc, #68]	; (e5d0 <_ZN14I2C_Asyn_Class4InitEv+0x70>)
    e58c:	2101      	movs	r1, #1
    e58e:	4618      	mov	r0, r3
    e590:	4b10      	ldr	r3, [pc, #64]	; (e5d4 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
    e592:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
    e594:	687b      	ldr	r3, [r7, #4]
    e596:	689b      	ldr	r3, [r3, #8]
    e598:	4a0f      	ldr	r2, [pc, #60]	; (e5d8 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
    e59a:	2102      	movs	r1, #2
    e59c:	4618      	mov	r0, r3
    e59e:	4b0d      	ldr	r3, [pc, #52]	; (e5d4 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
    e5a0:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
    e5a2:	687b      	ldr	r3, [r7, #4]
    e5a4:	689b      	ldr	r3, [r3, #8]
    e5a6:	4a0d      	ldr	r2, [pc, #52]	; (e5dc <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
    e5a8:	2100      	movs	r1, #0
    e5aa:	4618      	mov	r0, r3
    e5ac:	4b09      	ldr	r3, [pc, #36]	; (e5d4 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
    e5ae:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
    e5b0:	687b      	ldr	r3, [r7, #4]
    e5b2:	2201      	movs	r2, #1
    e5b4:	701a      	strb	r2, [r3, #0]
	rxReady=true;
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	2201      	movs	r2, #1
    e5ba:	705a      	strb	r2, [r3, #1]
	return ena;
    e5bc:	7bfb      	ldrb	r3, [r7, #15]
	
}
    e5be:	4618      	mov	r0, r3
    e5c0:	3710      	adds	r7, #16
    e5c2:	46bd      	mov	sp, r7
    e5c4:	bd80      	pop	{r7, pc}
    e5c6:	bf00      	nop
    e5c8:	000023ab 	.word	0x000023ab
    e5cc:	000022bd 	.word	0x000022bd
    e5d0:	0000e48d 	.word	0x0000e48d
    e5d4:	00002363 	.word	0x00002363
    e5d8:	0000e4ad 	.word	0x0000e4ad
    e5dc:	0000e4cd 	.word	0x0000e4cd

0000e5e0 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
    e5e0:	b580      	push	{r7, lr}
    e5e2:	b084      	sub	sp, #16
    e5e4:	af00      	add	r7, sp, #0
    e5e6:	6078      	str	r0, [r7, #4]
    e5e8:	460b      	mov	r3, r1
    e5ea:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
    e5ec:	6878      	ldr	r0, [r7, #4]
    e5ee:	4b0c      	ldr	r3, [pc, #48]	; (e620 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
    e5f0:	4798      	blx	r3
    e5f2:	4603      	mov	r3, r0
    e5f4:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	689b      	ldr	r3, [r3, #8]
    e5fa:	78fa      	ldrb	r2, [r7, #3]
    e5fc:	b211      	sxth	r1, r2
    e5fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e602:	4618      	mov	r0, r3
    e604:	4b07      	ldr	r3, [pc, #28]	; (e624 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
    e606:	4798      	blx	r3
	txReady=true;
    e608:	687b      	ldr	r3, [r7, #4]
    e60a:	2201      	movs	r2, #1
    e60c:	701a      	strb	r2, [r3, #0]
	rxReady=true;
    e60e:	687b      	ldr	r3, [r7, #4]
    e610:	2201      	movs	r2, #1
    e612:	705a      	strb	r2, [r3, #1]
	return ena;
    e614:	7bfb      	ldrb	r3, [r7, #15]
}
    e616:	4618      	mov	r0, r3
    e618:	3710      	adds	r7, #16
    e61a:	46bd      	mov	sp, r7
    e61c:	bd80      	pop	{r7, pc}
    e61e:	bf00      	nop
    e620:	0000e561 	.word	0x0000e561
    e624:	00002329 	.word	0x00002329

0000e628 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
    e628:	b580      	push	{r7, lr}
    e62a:	b084      	sub	sp, #16
    e62c:	af00      	add	r7, sp, #0
    e62e:	60f8      	str	r0, [r7, #12]
    e630:	60b9      	str	r1, [r7, #8]
    e632:	4613      	mov	r3, r2
    e634:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
    e636:	68fb      	ldr	r3, [r7, #12]
    e638:	781b      	ldrb	r3, [r3, #0]
    e63a:	b2db      	uxtb	r3, r3
    e63c:	f083 0301 	eor.w	r3, r3, #1
    e640:	b2db      	uxtb	r3, r3
    e642:	2b00      	cmp	r3, #0
    e644:	d000      	beq.n	e648 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
    e646:	e7f6      	b.n	e636 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
    e648:	68fb      	ldr	r3, [r7, #12]
    e64a:	2200      	movs	r2, #0
    e64c:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
    e64e:	68fb      	ldr	r3, [r7, #12]
    e650:	685b      	ldr	r3, [r3, #4]
    e652:	88fa      	ldrh	r2, [r7, #6]
    e654:	68b9      	ldr	r1, [r7, #8]
    e656:	4618      	mov	r0, r3
    e658:	4b03      	ldr	r3, [pc, #12]	; (e668 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
    e65a:	4798      	blx	r3
    e65c:	4603      	mov	r3, r0
}
    e65e:	4618      	mov	r0, r3
    e660:	3710      	adds	r7, #16
    e662:	46bd      	mov	sp, r7
    e664:	bd80      	pop	{r7, pc}
    e666:	bf00      	nop
    e668:	0000e705 	.word	0x0000e705

0000e66c <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
    e66c:	b580      	push	{r7, lr}
    e66e:	b084      	sub	sp, #16
    e670:	af00      	add	r7, sp, #0
    e672:	60f8      	str	r0, [r7, #12]
    e674:	60b9      	str	r1, [r7, #8]
    e676:	4613      	mov	r3, r2
    e678:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
    e67a:	68fb      	ldr	r3, [r7, #12]
    e67c:	785b      	ldrb	r3, [r3, #1]
    e67e:	b2db      	uxtb	r3, r3
    e680:	f083 0301 	eor.w	r3, r3, #1
    e684:	b2db      	uxtb	r3, r3
    e686:	2b00      	cmp	r3, #0
    e688:	d000      	beq.n	e68c <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
    e68a:	e7f6      	b.n	e67a <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
    e68c:	68fb      	ldr	r3, [r7, #12]
    e68e:	2200      	movs	r2, #0
    e690:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
    e692:	68fb      	ldr	r3, [r7, #12]
    e694:	685b      	ldr	r3, [r3, #4]
    e696:	88fa      	ldrh	r2, [r7, #6]
    e698:	68b9      	ldr	r1, [r7, #8]
    e69a:	4618      	mov	r0, r3
    e69c:	4b03      	ldr	r3, [pc, #12]	; (e6ac <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
    e69e:	4798      	blx	r3
    e6a0:	4603      	mov	r3, r0
}
    e6a2:	4618      	mov	r0, r3
    e6a4:	3710      	adds	r7, #16
    e6a6:	46bd      	mov	sp, r7
    e6a8:	bd80      	pop	{r7, pc}
    e6aa:	bf00      	nop
    e6ac:	0000e755 	.word	0x0000e755

0000e6b0 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
    e6b0:	b480      	push	{r7}
    e6b2:	b083      	sub	sp, #12
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	6078      	str	r0, [r7, #4]
	 ack=false;
    e6b8:	687b      	ldr	r3, [r7, #4]
    e6ba:	2200      	movs	r2, #0
    e6bc:	709a      	strb	r2, [r3, #2]
	 return ack;
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	789b      	ldrb	r3, [r3, #2]
    e6c2:	b2db      	uxtb	r3, r3
    e6c4:	4618      	mov	r0, r3
    e6c6:	370c      	adds	r7, #12
    e6c8:	46bd      	mov	sp, r7
    e6ca:	bc80      	pop	{r7}
    e6cc:	4770      	bx	lr
	...

0000e6d0 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    e6d0:	b480      	push	{r7}
    e6d2:	b083      	sub	sp, #12
    e6d4:	af00      	add	r7, sp, #0
    e6d6:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    e6d8:	4a04      	ldr	r2, [pc, #16]	; (e6ec <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    e6da:	687b      	ldr	r3, [r7, #4]
    e6dc:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    e6de:	687b      	ldr	r3, [r7, #4]
    e6e0:	4618      	mov	r0, r3
    e6e2:	370c      	adds	r7, #12
    e6e4:	46bd      	mov	sp, r7
    e6e6:	bc80      	pop	{r7}
    e6e8:	4770      	bx	lr
    e6ea:	bf00      	nop
    e6ec:	20000e00 	.word	0x20000e00

0000e6f0 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    e6f0:	b480      	push	{r7}
    e6f2:	b083      	sub	sp, #12
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    e6f8:	687b      	ldr	r3, [r7, #4]
    e6fa:	4618      	mov	r0, r3
    e6fc:	370c      	adds	r7, #12
    e6fe:	46bd      	mov	sp, r7
    e700:	bc80      	pop	{r7}
    e702:	4770      	bx	lr

0000e704 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e704:	b580      	push	{r7, lr}
    e706:	b084      	sub	sp, #16
    e708:	af00      	add	r7, sp, #0
    e70a:	60f8      	str	r0, [r7, #12]
    e70c:	60b9      	str	r1, [r7, #8]
    e70e:	4613      	mov	r3, r2
    e710:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e712:	68fb      	ldr	r3, [r7, #12]
    e714:	2b00      	cmp	r3, #0
    e716:	d004      	beq.n	e722 <io_write+0x1e>
    e718:	68bb      	ldr	r3, [r7, #8]
    e71a:	2b00      	cmp	r3, #0
    e71c:	d001      	beq.n	e722 <io_write+0x1e>
    e71e:	2301      	movs	r3, #1
    e720:	e000      	b.n	e724 <io_write+0x20>
    e722:	2300      	movs	r3, #0
    e724:	f003 0301 	and.w	r3, r3, #1
    e728:	b2db      	uxtb	r3, r3
    e72a:	2234      	movs	r2, #52	; 0x34
    e72c:	4907      	ldr	r1, [pc, #28]	; (e74c <io_write+0x48>)
    e72e:	4618      	mov	r0, r3
    e730:	4b07      	ldr	r3, [pc, #28]	; (e750 <io_write+0x4c>)
    e732:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e734:	68fb      	ldr	r3, [r7, #12]
    e736:	681b      	ldr	r3, [r3, #0]
    e738:	88fa      	ldrh	r2, [r7, #6]
    e73a:	68b9      	ldr	r1, [r7, #8]
    e73c:	68f8      	ldr	r0, [r7, #12]
    e73e:	4798      	blx	r3
    e740:	4603      	mov	r3, r0
}
    e742:	4618      	mov	r0, r3
    e744:	3710      	adds	r7, #16
    e746:	46bd      	mov	sp, r7
    e748:	bd80      	pop	{r7, pc}
    e74a:	bf00      	nop
    e74c:	0000f0e4 	.word	0x0000f0e4
    e750:	00003931 	.word	0x00003931

0000e754 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e754:	b580      	push	{r7, lr}
    e756:	b084      	sub	sp, #16
    e758:	af00      	add	r7, sp, #0
    e75a:	60f8      	str	r0, [r7, #12]
    e75c:	60b9      	str	r1, [r7, #8]
    e75e:	4613      	mov	r3, r2
    e760:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e762:	68fb      	ldr	r3, [r7, #12]
    e764:	2b00      	cmp	r3, #0
    e766:	d004      	beq.n	e772 <io_read+0x1e>
    e768:	68bb      	ldr	r3, [r7, #8]
    e76a:	2b00      	cmp	r3, #0
    e76c:	d001      	beq.n	e772 <io_read+0x1e>
    e76e:	2301      	movs	r3, #1
    e770:	e000      	b.n	e774 <io_read+0x20>
    e772:	2300      	movs	r3, #0
    e774:	f003 0301 	and.w	r3, r3, #1
    e778:	b2db      	uxtb	r3, r3
    e77a:	223d      	movs	r2, #61	; 0x3d
    e77c:	4907      	ldr	r1, [pc, #28]	; (e79c <io_read+0x48>)
    e77e:	4618      	mov	r0, r3
    e780:	4b07      	ldr	r3, [pc, #28]	; (e7a0 <io_read+0x4c>)
    e782:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e784:	68fb      	ldr	r3, [r7, #12]
    e786:	685b      	ldr	r3, [r3, #4]
    e788:	88fa      	ldrh	r2, [r7, #6]
    e78a:	68b9      	ldr	r1, [r7, #8]
    e78c:	68f8      	ldr	r0, [r7, #12]
    e78e:	4798      	blx	r3
    e790:	4603      	mov	r3, r0
}
    e792:	4618      	mov	r0, r3
    e794:	3710      	adds	r7, #16
    e796:	46bd      	mov	sp, r7
    e798:	bd80      	pop	{r7, pc}
    e79a:	bf00      	nop
    e79c:	0000f0e4 	.word	0x0000f0e4
    e7a0:	00003931 	.word	0x00003931

0000e7a4 <__aeabi_atexit>:
    e7a4:	460b      	mov	r3, r1
    e7a6:	4601      	mov	r1, r0
    e7a8:	4618      	mov	r0, r3
    e7aa:	f000 b801 	b.w	e7b0 <__cxa_atexit>
    e7ae:	bf00      	nop

0000e7b0 <__cxa_atexit>:
    e7b0:	4613      	mov	r3, r2
    e7b2:	460a      	mov	r2, r1
    e7b4:	4601      	mov	r1, r0
    e7b6:	2002      	movs	r0, #2
    e7b8:	f000 b9b0 	b.w	eb1c <__register_exitproc>

0000e7bc <ffs>:
    e7bc:	b140      	cbz	r0, e7d0 <ffs+0x14>
    e7be:	2300      	movs	r3, #0
    e7c0:	fa40 f103 	asr.w	r1, r0, r3
    e7c4:	1c5a      	adds	r2, r3, #1
    e7c6:	07c9      	lsls	r1, r1, #31
    e7c8:	4613      	mov	r3, r2
    e7ca:	d5f9      	bpl.n	e7c0 <ffs+0x4>
    e7cc:	4610      	mov	r0, r2
    e7ce:	4770      	bx	lr
    e7d0:	4602      	mov	r2, r0
    e7d2:	4610      	mov	r0, r2
    e7d4:	4770      	bx	lr
    e7d6:	bf00      	nop

0000e7d8 <__libc_init_array>:
    e7d8:	b570      	push	{r4, r5, r6, lr}
    e7da:	4e0f      	ldr	r6, [pc, #60]	; (e818 <__libc_init_array+0x40>)
    e7dc:	4d0f      	ldr	r5, [pc, #60]	; (e81c <__libc_init_array+0x44>)
    e7de:	1b76      	subs	r6, r6, r5
    e7e0:	10b6      	asrs	r6, r6, #2
    e7e2:	bf18      	it	ne
    e7e4:	2400      	movne	r4, #0
    e7e6:	d005      	beq.n	e7f4 <__libc_init_array+0x1c>
    e7e8:	3401      	adds	r4, #1
    e7ea:	f855 3b04 	ldr.w	r3, [r5], #4
    e7ee:	4798      	blx	r3
    e7f0:	42a6      	cmp	r6, r4
    e7f2:	d1f9      	bne.n	e7e8 <__libc_init_array+0x10>
    e7f4:	4e0a      	ldr	r6, [pc, #40]	; (e820 <__libc_init_array+0x48>)
    e7f6:	4d0b      	ldr	r5, [pc, #44]	; (e824 <__libc_init_array+0x4c>)
    e7f8:	1b76      	subs	r6, r6, r5
    e7fa:	f000 fc7f 	bl	f0fc <_init>
    e7fe:	10b6      	asrs	r6, r6, #2
    e800:	bf18      	it	ne
    e802:	2400      	movne	r4, #0
    e804:	d006      	beq.n	e814 <__libc_init_array+0x3c>
    e806:	3401      	adds	r4, #1
    e808:	f855 3b04 	ldr.w	r3, [r5], #4
    e80c:	4798      	blx	r3
    e80e:	42a6      	cmp	r6, r4
    e810:	d1f9      	bne.n	e806 <__libc_init_array+0x2e>
    e812:	bd70      	pop	{r4, r5, r6, pc}
    e814:	bd70      	pop	{r4, r5, r6, pc}
    e816:	bf00      	nop
    e818:	0000f108 	.word	0x0000f108
    e81c:	0000f108 	.word	0x0000f108
    e820:	0000f124 	.word	0x0000f124
    e824:	0000f108 	.word	0x0000f108

0000e828 <memcpy>:
    e828:	4684      	mov	ip, r0
    e82a:	ea41 0300 	orr.w	r3, r1, r0
    e82e:	f013 0303 	ands.w	r3, r3, #3
    e832:	d16d      	bne.n	e910 <memcpy+0xe8>
    e834:	3a40      	subs	r2, #64	; 0x40
    e836:	d341      	bcc.n	e8bc <memcpy+0x94>
    e838:	f851 3b04 	ldr.w	r3, [r1], #4
    e83c:	f840 3b04 	str.w	r3, [r0], #4
    e840:	f851 3b04 	ldr.w	r3, [r1], #4
    e844:	f840 3b04 	str.w	r3, [r0], #4
    e848:	f851 3b04 	ldr.w	r3, [r1], #4
    e84c:	f840 3b04 	str.w	r3, [r0], #4
    e850:	f851 3b04 	ldr.w	r3, [r1], #4
    e854:	f840 3b04 	str.w	r3, [r0], #4
    e858:	f851 3b04 	ldr.w	r3, [r1], #4
    e85c:	f840 3b04 	str.w	r3, [r0], #4
    e860:	f851 3b04 	ldr.w	r3, [r1], #4
    e864:	f840 3b04 	str.w	r3, [r0], #4
    e868:	f851 3b04 	ldr.w	r3, [r1], #4
    e86c:	f840 3b04 	str.w	r3, [r0], #4
    e870:	f851 3b04 	ldr.w	r3, [r1], #4
    e874:	f840 3b04 	str.w	r3, [r0], #4
    e878:	f851 3b04 	ldr.w	r3, [r1], #4
    e87c:	f840 3b04 	str.w	r3, [r0], #4
    e880:	f851 3b04 	ldr.w	r3, [r1], #4
    e884:	f840 3b04 	str.w	r3, [r0], #4
    e888:	f851 3b04 	ldr.w	r3, [r1], #4
    e88c:	f840 3b04 	str.w	r3, [r0], #4
    e890:	f851 3b04 	ldr.w	r3, [r1], #4
    e894:	f840 3b04 	str.w	r3, [r0], #4
    e898:	f851 3b04 	ldr.w	r3, [r1], #4
    e89c:	f840 3b04 	str.w	r3, [r0], #4
    e8a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e8a4:	f840 3b04 	str.w	r3, [r0], #4
    e8a8:	f851 3b04 	ldr.w	r3, [r1], #4
    e8ac:	f840 3b04 	str.w	r3, [r0], #4
    e8b0:	f851 3b04 	ldr.w	r3, [r1], #4
    e8b4:	f840 3b04 	str.w	r3, [r0], #4
    e8b8:	3a40      	subs	r2, #64	; 0x40
    e8ba:	d2bd      	bcs.n	e838 <memcpy+0x10>
    e8bc:	3230      	adds	r2, #48	; 0x30
    e8be:	d311      	bcc.n	e8e4 <memcpy+0xbc>
    e8c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c4:	f840 3b04 	str.w	r3, [r0], #4
    e8c8:	f851 3b04 	ldr.w	r3, [r1], #4
    e8cc:	f840 3b04 	str.w	r3, [r0], #4
    e8d0:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d4:	f840 3b04 	str.w	r3, [r0], #4
    e8d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e8dc:	f840 3b04 	str.w	r3, [r0], #4
    e8e0:	3a10      	subs	r2, #16
    e8e2:	d2ed      	bcs.n	e8c0 <memcpy+0x98>
    e8e4:	320c      	adds	r2, #12
    e8e6:	d305      	bcc.n	e8f4 <memcpy+0xcc>
    e8e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e8ec:	f840 3b04 	str.w	r3, [r0], #4
    e8f0:	3a04      	subs	r2, #4
    e8f2:	d2f9      	bcs.n	e8e8 <memcpy+0xc0>
    e8f4:	3204      	adds	r2, #4
    e8f6:	d008      	beq.n	e90a <memcpy+0xe2>
    e8f8:	07d2      	lsls	r2, r2, #31
    e8fa:	bf1c      	itt	ne
    e8fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e900:	f800 3b01 	strbne.w	r3, [r0], #1
    e904:	d301      	bcc.n	e90a <memcpy+0xe2>
    e906:	880b      	ldrh	r3, [r1, #0]
    e908:	8003      	strh	r3, [r0, #0]
    e90a:	4660      	mov	r0, ip
    e90c:	4770      	bx	lr
    e90e:	bf00      	nop
    e910:	2a08      	cmp	r2, #8
    e912:	d313      	bcc.n	e93c <memcpy+0x114>
    e914:	078b      	lsls	r3, r1, #30
    e916:	d08d      	beq.n	e834 <memcpy+0xc>
    e918:	f010 0303 	ands.w	r3, r0, #3
    e91c:	d08a      	beq.n	e834 <memcpy+0xc>
    e91e:	f1c3 0304 	rsb	r3, r3, #4
    e922:	1ad2      	subs	r2, r2, r3
    e924:	07db      	lsls	r3, r3, #31
    e926:	bf1c      	itt	ne
    e928:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e92c:	f800 3b01 	strbne.w	r3, [r0], #1
    e930:	d380      	bcc.n	e834 <memcpy+0xc>
    e932:	f831 3b02 	ldrh.w	r3, [r1], #2
    e936:	f820 3b02 	strh.w	r3, [r0], #2
    e93a:	e77b      	b.n	e834 <memcpy+0xc>
    e93c:	3a04      	subs	r2, #4
    e93e:	d3d9      	bcc.n	e8f4 <memcpy+0xcc>
    e940:	3a01      	subs	r2, #1
    e942:	f811 3b01 	ldrb.w	r3, [r1], #1
    e946:	f800 3b01 	strb.w	r3, [r0], #1
    e94a:	d2f9      	bcs.n	e940 <memcpy+0x118>
    e94c:	780b      	ldrb	r3, [r1, #0]
    e94e:	7003      	strb	r3, [r0, #0]
    e950:	784b      	ldrb	r3, [r1, #1]
    e952:	7043      	strb	r3, [r0, #1]
    e954:	788b      	ldrb	r3, [r1, #2]
    e956:	7083      	strb	r3, [r0, #2]
    e958:	4660      	mov	r0, ip
    e95a:	4770      	bx	lr

0000e95c <memset>:
    e95c:	b470      	push	{r4, r5, r6}
    e95e:	0786      	lsls	r6, r0, #30
    e960:	d046      	beq.n	e9f0 <memset+0x94>
    e962:	1e54      	subs	r4, r2, #1
    e964:	2a00      	cmp	r2, #0
    e966:	d041      	beq.n	e9ec <memset+0x90>
    e968:	b2ca      	uxtb	r2, r1
    e96a:	4603      	mov	r3, r0
    e96c:	e002      	b.n	e974 <memset+0x18>
    e96e:	f114 34ff 	adds.w	r4, r4, #4294967295
    e972:	d33b      	bcc.n	e9ec <memset+0x90>
    e974:	f803 2b01 	strb.w	r2, [r3], #1
    e978:	079d      	lsls	r5, r3, #30
    e97a:	d1f8      	bne.n	e96e <memset+0x12>
    e97c:	2c03      	cmp	r4, #3
    e97e:	d92e      	bls.n	e9de <memset+0x82>
    e980:	b2cd      	uxtb	r5, r1
    e982:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e986:	2c0f      	cmp	r4, #15
    e988:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e98c:	d919      	bls.n	e9c2 <memset+0x66>
    e98e:	f103 0210 	add.w	r2, r3, #16
    e992:	4626      	mov	r6, r4
    e994:	3e10      	subs	r6, #16
    e996:	2e0f      	cmp	r6, #15
    e998:	f842 5c10 	str.w	r5, [r2, #-16]
    e99c:	f842 5c0c 	str.w	r5, [r2, #-12]
    e9a0:	f842 5c08 	str.w	r5, [r2, #-8]
    e9a4:	f842 5c04 	str.w	r5, [r2, #-4]
    e9a8:	f102 0210 	add.w	r2, r2, #16
    e9ac:	d8f2      	bhi.n	e994 <memset+0x38>
    e9ae:	f1a4 0210 	sub.w	r2, r4, #16
    e9b2:	f022 020f 	bic.w	r2, r2, #15
    e9b6:	f004 040f 	and.w	r4, r4, #15
    e9ba:	3210      	adds	r2, #16
    e9bc:	2c03      	cmp	r4, #3
    e9be:	4413      	add	r3, r2
    e9c0:	d90d      	bls.n	e9de <memset+0x82>
    e9c2:	461e      	mov	r6, r3
    e9c4:	4622      	mov	r2, r4
    e9c6:	3a04      	subs	r2, #4
    e9c8:	2a03      	cmp	r2, #3
    e9ca:	f846 5b04 	str.w	r5, [r6], #4
    e9ce:	d8fa      	bhi.n	e9c6 <memset+0x6a>
    e9d0:	1f22      	subs	r2, r4, #4
    e9d2:	f022 0203 	bic.w	r2, r2, #3
    e9d6:	3204      	adds	r2, #4
    e9d8:	4413      	add	r3, r2
    e9da:	f004 0403 	and.w	r4, r4, #3
    e9de:	b12c      	cbz	r4, e9ec <memset+0x90>
    e9e0:	b2c9      	uxtb	r1, r1
    e9e2:	441c      	add	r4, r3
    e9e4:	f803 1b01 	strb.w	r1, [r3], #1
    e9e8:	429c      	cmp	r4, r3
    e9ea:	d1fb      	bne.n	e9e4 <memset+0x88>
    e9ec:	bc70      	pop	{r4, r5, r6}
    e9ee:	4770      	bx	lr
    e9f0:	4614      	mov	r4, r2
    e9f2:	4603      	mov	r3, r0
    e9f4:	e7c2      	b.n	e97c <memset+0x20>
    e9f6:	bf00      	nop

0000e9f8 <rand>:
    e9f8:	b410      	push	{r4}
    e9fa:	4b0c      	ldr	r3, [pc, #48]	; (ea2c <rand+0x34>)
    e9fc:	480c      	ldr	r0, [pc, #48]	; (ea30 <rand+0x38>)
    e9fe:	6819      	ldr	r1, [r3, #0]
    ea00:	4c0c      	ldr	r4, [pc, #48]	; (ea34 <rand+0x3c>)
    ea02:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
    ea06:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
    ea0a:	fb00 f002 	mul.w	r0, r0, r2
    ea0e:	fb04 0003 	mla	r0, r4, r3, r0
    ea12:	fba2 2304 	umull	r2, r3, r2, r4
    ea16:	4403      	add	r3, r0
    ea18:	3201      	adds	r2, #1
    ea1a:	f143 0300 	adc.w	r3, r3, #0
    ea1e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    ea22:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    ea26:	bc10      	pop	{r4}
    ea28:	4770      	bx	lr
    ea2a:	bf00      	nop
    ea2c:	2000013c 	.word	0x2000013c
    ea30:	5851f42d 	.word	0x5851f42d
    ea34:	4c957f2d 	.word	0x4c957f2d
	...

0000ea40 <strlen>:
    ea40:	f890 f000 	pld	[r0]
    ea44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ea48:	f020 0107 	bic.w	r1, r0, #7
    ea4c:	f06f 0c00 	mvn.w	ip, #0
    ea50:	f010 0407 	ands.w	r4, r0, #7
    ea54:	f891 f020 	pld	[r1, #32]
    ea58:	f040 8049 	bne.w	eaee <strlen+0xae>
    ea5c:	f04f 0400 	mov.w	r4, #0
    ea60:	f06f 0007 	mvn.w	r0, #7
    ea64:	e9d1 2300 	ldrd	r2, r3, [r1]
    ea68:	f891 f040 	pld	[r1, #64]	; 0x40
    ea6c:	f100 0008 	add.w	r0, r0, #8
    ea70:	fa82 f24c 	uadd8	r2, r2, ip
    ea74:	faa4 f28c 	sel	r2, r4, ip
    ea78:	fa83 f34c 	uadd8	r3, r3, ip
    ea7c:	faa2 f38c 	sel	r3, r2, ip
    ea80:	bb4b      	cbnz	r3, ead6 <strlen+0x96>
    ea82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ea86:	fa82 f24c 	uadd8	r2, r2, ip
    ea8a:	f100 0008 	add.w	r0, r0, #8
    ea8e:	faa4 f28c 	sel	r2, r4, ip
    ea92:	fa83 f34c 	uadd8	r3, r3, ip
    ea96:	faa2 f38c 	sel	r3, r2, ip
    ea9a:	b9e3      	cbnz	r3, ead6 <strlen+0x96>
    ea9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    eaa0:	fa82 f24c 	uadd8	r2, r2, ip
    eaa4:	f100 0008 	add.w	r0, r0, #8
    eaa8:	faa4 f28c 	sel	r2, r4, ip
    eaac:	fa83 f34c 	uadd8	r3, r3, ip
    eab0:	faa2 f38c 	sel	r3, r2, ip
    eab4:	b97b      	cbnz	r3, ead6 <strlen+0x96>
    eab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    eaba:	f101 0120 	add.w	r1, r1, #32
    eabe:	fa82 f24c 	uadd8	r2, r2, ip
    eac2:	f100 0008 	add.w	r0, r0, #8
    eac6:	faa4 f28c 	sel	r2, r4, ip
    eaca:	fa83 f34c 	uadd8	r3, r3, ip
    eace:	faa2 f38c 	sel	r3, r2, ip
    ead2:	2b00      	cmp	r3, #0
    ead4:	d0c6      	beq.n	ea64 <strlen+0x24>
    ead6:	2a00      	cmp	r2, #0
    ead8:	bf04      	itt	eq
    eada:	3004      	addeq	r0, #4
    eadc:	461a      	moveq	r2, r3
    eade:	ba12      	rev	r2, r2
    eae0:	fab2 f282 	clz	r2, r2
    eae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    eaec:	4770      	bx	lr
    eaee:	e9d1 2300 	ldrd	r2, r3, [r1]
    eaf2:	f004 0503 	and.w	r5, r4, #3
    eaf6:	f1c4 0000 	rsb	r0, r4, #0
    eafa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    eafe:	f014 0f04 	tst.w	r4, #4
    eb02:	f891 f040 	pld	[r1, #64]	; 0x40
    eb06:	fa0c f505 	lsl.w	r5, ip, r5
    eb0a:	ea62 0205 	orn	r2, r2, r5
    eb0e:	bf1c      	itt	ne
    eb10:	ea63 0305 	ornne	r3, r3, r5
    eb14:	4662      	movne	r2, ip
    eb16:	f04f 0400 	mov.w	r4, #0
    eb1a:	e7a9      	b.n	ea70 <strlen+0x30>

0000eb1c <__register_exitproc>:
    eb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb20:	4d2c      	ldr	r5, [pc, #176]	; (ebd4 <__register_exitproc+0xb8>)
    eb22:	4606      	mov	r6, r0
    eb24:	6828      	ldr	r0, [r5, #0]
    eb26:	4698      	mov	r8, r3
    eb28:	460f      	mov	r7, r1
    eb2a:	4691      	mov	r9, r2
    eb2c:	f000 f882 	bl	ec34 <__retarget_lock_acquire_recursive>
    eb30:	4b29      	ldr	r3, [pc, #164]	; (ebd8 <__register_exitproc+0xbc>)
    eb32:	681c      	ldr	r4, [r3, #0]
    eb34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eb38:	2b00      	cmp	r3, #0
    eb3a:	d03e      	beq.n	ebba <__register_exitproc+0x9e>
    eb3c:	685a      	ldr	r2, [r3, #4]
    eb3e:	2a1f      	cmp	r2, #31
    eb40:	dc1c      	bgt.n	eb7c <__register_exitproc+0x60>
    eb42:	f102 0e01 	add.w	lr, r2, #1
    eb46:	b176      	cbz	r6, eb66 <__register_exitproc+0x4a>
    eb48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eb4c:	2401      	movs	r4, #1
    eb4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eb52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eb56:	4094      	lsls	r4, r2
    eb58:	4320      	orrs	r0, r4
    eb5a:	2e02      	cmp	r6, #2
    eb5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eb60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eb64:	d023      	beq.n	ebae <__register_exitproc+0x92>
    eb66:	3202      	adds	r2, #2
    eb68:	f8c3 e004 	str.w	lr, [r3, #4]
    eb6c:	6828      	ldr	r0, [r5, #0]
    eb6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    eb72:	f000 f861 	bl	ec38 <__retarget_lock_release_recursive>
    eb76:	2000      	movs	r0, #0
    eb78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eb7c:	4b17      	ldr	r3, [pc, #92]	; (ebdc <__register_exitproc+0xc0>)
    eb7e:	b30b      	cbz	r3, ebc4 <__register_exitproc+0xa8>
    eb80:	f44f 70c8 	mov.w	r0, #400	; 0x190
    eb84:	f7ff fc72 	bl	e46c <malloc>
    eb88:	4603      	mov	r3, r0
    eb8a:	b1d8      	cbz	r0, ebc4 <__register_exitproc+0xa8>
    eb8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    eb90:	6002      	str	r2, [r0, #0]
    eb92:	2100      	movs	r1, #0
    eb94:	6041      	str	r1, [r0, #4]
    eb96:	460a      	mov	r2, r1
    eb98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    eb9c:	f04f 0e01 	mov.w	lr, #1
    eba0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    eba4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    eba8:	2e00      	cmp	r6, #0
    ebaa:	d0dc      	beq.n	eb66 <__register_exitproc+0x4a>
    ebac:	e7cc      	b.n	eb48 <__register_exitproc+0x2c>
    ebae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ebb2:	430c      	orrs	r4, r1
    ebb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ebb8:	e7d5      	b.n	eb66 <__register_exitproc+0x4a>
    ebba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ebbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ebc2:	e7bb      	b.n	eb3c <__register_exitproc+0x20>
    ebc4:	6828      	ldr	r0, [r5, #0]
    ebc6:	f000 f837 	bl	ec38 <__retarget_lock_release_recursive>
    ebca:	f04f 30ff 	mov.w	r0, #4294967295
    ebce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ebd2:	bf00      	nop
    ebd4:	20000568 	.word	0x20000568
    ebd8:	0000f0f8 	.word	0x0000f0f8
    ebdc:	0000e46d 	.word	0x0000e46d

0000ebe0 <register_fini>:
    ebe0:	4b02      	ldr	r3, [pc, #8]	; (ebec <register_fini+0xc>)
    ebe2:	b113      	cbz	r3, ebea <register_fini+0xa>
    ebe4:	4802      	ldr	r0, [pc, #8]	; (ebf0 <register_fini+0x10>)
    ebe6:	f000 b805 	b.w	ebf4 <atexit>
    ebea:	4770      	bx	lr
    ebec:	00000000 	.word	0x00000000
    ebf0:	0000ec01 	.word	0x0000ec01

0000ebf4 <atexit>:
    ebf4:	2300      	movs	r3, #0
    ebf6:	4601      	mov	r1, r0
    ebf8:	461a      	mov	r2, r3
    ebfa:	4618      	mov	r0, r3
    ebfc:	f7ff bf8e 	b.w	eb1c <__register_exitproc>

0000ec00 <__libc_fini_array>:
    ec00:	b538      	push	{r3, r4, r5, lr}
    ec02:	4c0a      	ldr	r4, [pc, #40]	; (ec2c <__libc_fini_array+0x2c>)
    ec04:	4d0a      	ldr	r5, [pc, #40]	; (ec30 <__libc_fini_array+0x30>)
    ec06:	1b64      	subs	r4, r4, r5
    ec08:	10a4      	asrs	r4, r4, #2
    ec0a:	d00a      	beq.n	ec22 <__libc_fini_array+0x22>
    ec0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ec10:	3b01      	subs	r3, #1
    ec12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ec16:	3c01      	subs	r4, #1
    ec18:	f855 3904 	ldr.w	r3, [r5], #-4
    ec1c:	4798      	blx	r3
    ec1e:	2c00      	cmp	r4, #0
    ec20:	d1f9      	bne.n	ec16 <__libc_fini_array+0x16>
    ec22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec26:	f000 ba7d 	b.w	f124 <_fini>
    ec2a:	bf00      	nop
    ec2c:	0000f134 	.word	0x0000f134
    ec30:	0000f130 	.word	0x0000f130

0000ec34 <__retarget_lock_acquire_recursive>:
    ec34:	4770      	bx	lr
    ec36:	bf00      	nop

0000ec38 <__retarget_lock_release_recursive>:
    ec38:	4770      	bx	lr
    ec3a:	bf00      	nop
    ec3c:	20555043 	.word	0x20555043
    ec40:	69726553 	.word	0x69726553
    ec44:	203a6c61 	.word	0x203a6c61
    ec48:	00000000 	.word	0x00000000
    ec4c:	682f2e2e 	.word	0x682f2e2e
    ec50:	702f6c70 	.word	0x702f6c70
    ec54:	2f74726f 	.word	0x2f74726f
    ec58:	5f6c7068 	.word	0x5f6c7068
    ec5c:	6f697067 	.word	0x6f697067
    ec60:	7361625f 	.word	0x7361625f
    ec64:	00682e65 	.word	0x00682e65
    ec68:	682f2e2e 	.word	0x682f2e2e
    ec6c:	692f6c61 	.word	0x692f6c61
    ec70:	756c636e 	.word	0x756c636e
    ec74:	682f6564 	.word	0x682f6564
    ec78:	775f6c61 	.word	0x775f6c61
    ec7c:	682e7464 	.word	0x682e7464
    ec80:	00000000 	.word	0x00000000
    ec84:	682f2e2e 	.word	0x682f2e2e
    ec88:	732f6c61 	.word	0x732f6c61
    ec8c:	682f6372 	.word	0x682f6372
    ec90:	635f6c61 	.word	0x635f6c61
    ec94:	6e656c61 	.word	0x6e656c61
    ec98:	2e726164 	.word	0x2e726164
    ec9c:	00000063 	.word	0x00000063
    eca0:	682f2e2e 	.word	0x682f2e2e
    eca4:	732f6c61 	.word	0x732f6c61
    eca8:	682f6372 	.word	0x682f6372
    ecac:	635f6c61 	.word	0x635f6c61
    ecb0:	615f6e61 	.word	0x615f6e61
    ecb4:	636e7973 	.word	0x636e7973
    ecb8:	0000632e 	.word	0x0000632e
    ecbc:	682f2e2e 	.word	0x682f2e2e
    ecc0:	732f6c61 	.word	0x732f6c61
    ecc4:	682f6372 	.word	0x682f6372
    ecc8:	635f6c61 	.word	0x635f6c61
    eccc:	735f6372 	.word	0x735f6372
    ecd0:	2e636e79 	.word	0x2e636e79
    ecd4:	00000063 	.word	0x00000063
    ecd8:	682f2e2e 	.word	0x682f2e2e
    ecdc:	732f6c61 	.word	0x732f6c61
    ece0:	682f6372 	.word	0x682f6372
    ece4:	695f6c61 	.word	0x695f6c61
    ece8:	6d5f6332 	.word	0x6d5f6332
    ecec:	7973615f 	.word	0x7973615f
    ecf0:	632e636e 	.word	0x632e636e
    ecf4:	00000000 	.word	0x00000000
    ecf8:	682f2e2e 	.word	0x682f2e2e
    ecfc:	732f6c61 	.word	0x732f6c61
    ed00:	682f6372 	.word	0x682f6372
    ed04:	705f6c61 	.word	0x705f6c61
    ed08:	632e6d77 	.word	0x632e6d77
    ed0c:	00000000 	.word	0x00000000
    ed10:	682f2e2e 	.word	0x682f2e2e
    ed14:	732f6c61 	.word	0x732f6c61
    ed18:	682f6372 	.word	0x682f6372
    ed1c:	715f6c61 	.word	0x715f6c61
    ed20:	5f697073 	.word	0x5f697073
    ed24:	636e7973 	.word	0x636e7973
    ed28:	0000632e 	.word	0x0000632e
    ed2c:	682f2e2e 	.word	0x682f2e2e
    ed30:	732f6c61 	.word	0x732f6c61
    ed34:	682f6372 	.word	0x682f6372
    ed38:	735f6c61 	.word	0x735f6c61
    ed3c:	6d5f6970 	.word	0x6d5f6970
    ed40:	7973615f 	.word	0x7973615f
    ed44:	632e636e 	.word	0x632e636e
    ed48:	00000000 	.word	0x00000000
    ed4c:	682f2e2e 	.word	0x682f2e2e
    ed50:	732f6c61 	.word	0x732f6c61
    ed54:	682f6372 	.word	0x682f6372
    ed58:	735f6c61 	.word	0x735f6c61
    ed5c:	6d5f6970 	.word	0x6d5f6970
    ed60:	6e79735f 	.word	0x6e79735f
    ed64:	00632e63 	.word	0x00632e63
    ed68:	682f2e2e 	.word	0x682f2e2e
    ed6c:	732f6c61 	.word	0x732f6c61
    ed70:	682f6372 	.word	0x682f6372
    ed74:	745f6c61 	.word	0x745f6c61
    ed78:	72656d69 	.word	0x72656d69
    ed7c:	0000632e 	.word	0x0000632e
    ed80:	682f2e2e 	.word	0x682f2e2e
    ed84:	752f6c61 	.word	0x752f6c61
    ed88:	736c6974 	.word	0x736c6974
    ed8c:	6372732f 	.word	0x6372732f
    ed90:	6974752f 	.word	0x6974752f
    ed94:	6c5f736c 	.word	0x6c5f736c
    ed98:	2e747369 	.word	0x2e747369
    ed9c:	00000063 	.word	0x00000063

0000eda0 <_map>:
    eda0:	00000004 00000004 00000005 00000005     ................
    edb0:	00000006 00000056 00000007 00000057     ....V.......W...
    edc0:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    edd0:	632e6369 00000000                       ic.c....

0000edd8 <user_mux_confs>:
    edd8:	00000100 00000000 00000000 00000000     ................
	...

0000ee1c <channel_confs>:
    ee1c:	0000065e 00000000 00000000 00000000     ^...............
	...

0000ee5c <interrupt_cfg>:
	...
    eedc:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    eeec:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    eefc:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    ef0c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    ef1c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    ef2c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    ef3c:	43000400 43000800 43000c00              ...C...C...C

0000ef48 <sercomspi_regs>:
    ef48:	0020000c 00020000 00000000 01ff00fe     .. .............
    ef58:	20008c00 02000000 00000000 ff006300     ... .........c..
    ef68:	000c0101 00000020 00000002 00fe0000     .... ...........
    ef78:	000401ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    ef88:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    ef98:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    efa8:	43001400 43001800                       ...C...C

0000efb0 <_usb_ep_cfgs>:
    efb0:	2000072c 00000000 00000040 2000076c     ,.. ....@...l.. 
    efc0:	200007ac 00400040 200007ec 2000082c     ... @.@.... ,.. 
    efd0:	00400040 2000086c 200008ac 00400040     @.@.l.. ... @.@.
    efe0:	200008ec 2000092c 00400040 00000804     ... ,.. @.@.....
    eff0:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f000:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f010:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f020:	7361625f 00682e65                       _base.h.

0000f028 <n25q256a_interface>:
    f028:	0000b715 0000b7b9 0000b8c9 0000ba81     ................
    f038:	0000bb11 752f2e2e 642f6273 63697665     ....../usb/devic
    f048:	73752f65 2e636462 00000063              e/usbdc.c...

0000f054 <defaultParameters>:
    f054:	00000082                                ....

0000f058 <defaultPreferences>:
    f058:	000000fa 00000032                       ....2...

0000f060 <_ZTV9CDC_Class>:
	...
    f068:	0000daed 0000dba1 0000d7cd 0000dab5     ................
    f078:	0000dc11 0000da79 0000d9b9 0000da09     ....y...........
    f088:	0000dad5 0000db25                       ....%...

0000f090 <_ZTV6Stream>:
	...
    f098:	0000e481 0000dce1 0000d7cd 0000d7e1     ................
    f0a8:	0000e481 0000e481 0000e481 2e257830     ............0x%.
    f0b8:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f0c8:	0066766f                                ovf.

0000f0cc <_ZTV5Print>:
	...
    f0d4:	0000e481 0000dce1 0000d7cd 0000d7e1     ................
    f0e4:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f0f4:	00632e6f                                o.c.

0000f0f8 <_global_impure_ptr>:
    f0f8:	20000140                                @.. 

0000f0fc <_init>:
    f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0fe:	bf00      	nop
    f100:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f102:	bc08      	pop	{r3}
    f104:	469e      	mov	lr, r3
    f106:	4770      	bx	lr

0000f108 <__init_array_start>:
    f108:	0000ebe1 	.word	0x0000ebe1

0000f10c <__frame_dummy_init_array_entry>:
    f10c:	00000289 0000d615 0000d6d5 0000d795     ................
    f11c:	0000dc91 0000e459                       ....Y...

0000f124 <_fini>:
    f124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f126:	bf00      	nop
    f128:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f12a:	bc08      	pop	{r3}
    f12c:	469e      	mov	lr, r3
    f12e:	4770      	bx	lr

0000f130 <__fini_array_start>:
    f130:	00000265 	.word	0x00000265
