
ARINC_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011218  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011218  00011218  00021218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000061c  20000000  00011220  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003061c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003061c  2**0
                  CONTENTS
  5 .bss          0000106c  2000061c  0001183c  0003061c  2**2
                  ALLOC
  6 .stack        00010000  20001688  000128a8  0003061c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003061c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003064a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007150f  00000000  00000000  000306a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a302  00000000  00000000  000a1bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001dc04  00000000  00000000  000abeb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003180  00000000  00000000  000c9ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002ff0  00000000  00000000  000ccc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004dc59  00000000  00000000  000cfc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00039a33  00000000  00000000  0011d881  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00141057  00000000  00000000  001572b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cff0  00000000  00000000  0029830c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 16 01 20 6d 09 00 00 69 09 00 00 69 09 00 00     ... m...i...i...
      10:	69 09 00 00 69 09 00 00 69 09 00 00 00 00 00 00     i...i...i.......
	...
      2c:	69 09 00 00 69 09 00 00 00 00 00 00 69 09 00 00     i...i.......i...
      3c:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      4c:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      5c:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      6c:	45 61 00 00 61 4f 00 00 71 4f 00 00 69 09 00 00     Ea..aO..qO..i...
      7c:	81 4f 00 00 91 4f 00 00 a1 4f 00 00 b1 4f 00 00     .O...O...O...O..
      8c:	c1 4f 00 00 d1 4f 00 00 e1 4f 00 00 69 09 00 00     .O...O...O..i...
      9c:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      ac:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      bc:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      cc:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
      dc:	69 09 00 00 69 09 00 00 69 09 00 00 00 00 00 00     i...i...i.......
	...
      f4:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     104:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     114:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     124:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     134:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     144:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     154:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     164:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     174:	69 09 00 00 69 09 00 00 a9 43 00 00 dd af 00 00     i...i....C......
     184:	ed af 00 00 fd af 00 00 0d b0 00 00 69 09 00 00     ............i...
     194:	39 7a 00 00 69 09 00 00 69 09 00 00 69 09 00 00     9z..i...i...i...
     1a4:	69 09 00 00 69 09 00 00 69 09 00 00 55 7a 00 00     i...i...i...Uz..
     1b4:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     1c4:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     1d4:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     1e4:	69 09 00 00 69 09 00 00 d9 86 00 00 69 09 00 00     i...i.......i...
     1f4:	f5 86 00 00 69 09 00 00 11 87 00 00 2d 87 00 00     ....i.......-...
     204:	49 87 00 00 65 87 00 00 69 09 00 00 69 09 00 00     I...e...i...i...
     214:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     224:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     234:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     244:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...
     254:	69 09 00 00 69 09 00 00 69 09 00 00 69 09 00 00     i...i...i...i...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000061c 	.word	0x2000061c
     280:	00000000 	.word	0x00000000
     284:	00011220 	.word	0x00011220

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011220 	.word	0x00011220
     2c4:	20000620 	.word	0x20000620
     2c8:	00011220 	.word	0x00011220
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassD1Ev>:
} //AMMC_Class

// default destructor
AMMC_Class::~AMMC_Class()
{
} //~AMMC_Class
     2d0:	4770      	bx	lr
	...

000002d4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AMMC_Class	ammc1;
     2d6:	4f06      	ldr	r7, [pc, #24]	; (2f0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x1c>)
     2d8:	4e06      	ldr	r6, [pc, #24]	; (2f4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x20>)
     2da:	4d07      	ldr	r5, [pc, #28]	; (2f8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x24>)
     2dc:	463a      	mov	r2, r7
     2de:	4631      	mov	r1, r6
     2e0:	4628      	mov	r0, r5
     2e2:	4c06      	ldr	r4, [pc, #24]	; (2fc <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x28>)
     2e4:	47a0      	blx	r4
AMMC_Class	ammc2;
     2e6:	463a      	mov	r2, r7
     2e8:	4631      	mov	r1, r6
     2ea:	1d28      	adds	r0, r5, #4
     2ec:	47a0      	blx	r4
     2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2f0:	20000000 	.word	0x20000000
     2f4:	000002d1 	.word	0x000002d1
     2f8:	20000638 	.word	0x20000638
     2fc:	0000e325 	.word	0x0000e325

00000300 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
     300:	b410      	push	{r4}
     302:	680a      	ldr	r2, [r1, #0]
     304:	6002      	str	r2, [r0, #0]
     306:	684c      	ldr	r4, [r1, #4]
     308:	f852 2c0c 	ldr.w	r2, [r2, #-12]
     30c:	5084      	str	r4, [r0, r2]
     30e:	6889      	ldr	r1, [r1, #8]
     310:	6802      	ldr	r2, [r0, #0]
     312:	f852 2c10 	ldr.w	r2, [r2, #-16]
     316:	5081      	str	r1, [r0, r2]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
     318:	bc10      	pop	{r4}
     31a:	4770      	bx	lr

0000031c <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
     31c:	b410      	push	{r4}
     31e:	680a      	ldr	r2, [r1, #0]
     320:	6002      	str	r2, [r0, #0]
     322:	684c      	ldr	r4, [r1, #4]
     324:	f852 2c0c 	ldr.w	r2, [r2, #-12]
     328:	5084      	str	r4, [r0, r2]
     32a:	6889      	ldr	r1, [r1, #8]
     32c:	6802      	ldr	r2, [r0, #0]
     32e:	f852 2c10 	ldr.w	r2, [r2, #-16]
     332:	5081      	str	r1, [r0, r2]
{
} //~ARINC_Buffer_Class
     334:	bc10      	pop	{r4}
     336:	4770      	bx	lr

00000338 <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
     338:	b430      	push	{r4, r5}
	LabelsArrayTX=&bufferLabelsArrayTX[0];
     33a:	4d10      	ldr	r5, [pc, #64]	; (37c <_ZN18ARINC_Buffer_Class10InitBufferEv+0x44>)
     33c:	6045      	str	r5, [r0, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
     33e:	f105 0320 	add.w	r3, r5, #32
     342:	6083      	str	r3, [r0, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
     344:	f105 0340 	add.w	r3, r5, #64	; 0x40
     348:	60c3      	str	r3, [r0, #12]
     34a:	f105 0360 	add.w	r3, r5, #96	; 0x60
     34e:	f100 0420 	add.w	r4, r0, #32
     352:	f105 02e0 	add.w	r2, r5, #224	; 0xe0
     356:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
     35a:	4615      	mov	r5, r2
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
     35c:	f841 3f04 	str.w	r3, [r1, #4]!
			pointerArrayTX[i]=bufferTransmitBuffer[i];
     360:	f844 2f04 	str.w	r2, [r4, #4]!
     364:	3304      	adds	r3, #4
     366:	3204      	adds	r2, #4
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
     368:	42ab      	cmp	r3, r5
     36a:	d1f7      	bne.n	35c <_ZN18ARINC_Buffer_Class10InitBufferEv+0x24>
		}
		receiverBuffer=pointerArrayRX;
     36c:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
     370:	6103      	str	r3, [r0, #16]
		transmitBuffer=pointerArrayTX;
     372:	f100 0324 	add.w	r3, r0, #36	; 0x24
     376:	6143      	str	r3, [r0, #20]
}
     378:	bc30      	pop	{r4, r5}
     37a:	4770      	bx	lr
     37c:	20000644 	.word	0x20000644

00000380 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:
	data=MakeLabel270(st);
	Uint32FourBytesArray(data,localArray);
	memcpy(transmitBuffer[index],localArray,4);
}

void ARINC_Buffer_Class::SortReceivedData(uint8_t* receiver){
     380:	2300      	movs	r3, #0
     382:	e014      	b.n	3ae <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x2e>
     384:	3301      	adds	r3, #1
		uint8_t i;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
     386:	2b20      	cmp	r3, #32
     388:	d00c      	beq.n	3a4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x24>
		{
			if (LabelsArrayRX1[i]>0)
     38a:	6882      	ldr	r2, [r0, #8]
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	2a00      	cmp	r2, #0
     390:	d0f8      	beq.n	384 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
			{
			
					if (receiver[3]==LabelsArrayRX1[i])
     392:	78cc      	ldrb	r4, [r1, #3]
     394:	4294      	cmp	r4, r2
     396:	d1f5      	bne.n	384 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
					{
						memcpy(receiverBuffer[i],receiver,4);
     398:	6902      	ldr	r2, [r0, #16]
     39a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     39e:	680c      	ldr	r4, [r1, #0]
     3a0:	6014      	str	r4, [r2, #0]
     3a2:	e7ef      	b.n	384 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x4>
					}
			
	
			}
		}
     3a4:	bc10      	pop	{r4}
     3a6:	4770      	bx	lr
     3a8:	3301      	adds	r3, #1
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
     3aa:	2b20      	cmp	r3, #32
     3ac:	d005      	beq.n	3ba <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x3a>
			if (LabelsArrayRX1[i]>0)
     3ae:	6882      	ldr	r2, [r0, #8]
     3b0:	5cd2      	ldrb	r2, [r2, r3]
     3b2:	2a00      	cmp	r2, #0
     3b4:	d0f8      	beq.n	3a8 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x28>
void ARINC_Buffer_Class::SortReceivedData(uint8_t* receiver){
     3b6:	b410      	push	{r4}
     3b8:	e7eb      	b.n	392 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x12>
     3ba:	4770      	bx	lr

000003bc <_ZN17ARINC_Conversions8FlipByteEh>:
}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
	uint8_t rev=0;
	for (int i=0;i<8;i++)
     3bc:	2300      	movs	r3, #0
	uint8_t rev=0;
     3be:	4618      	mov	r0, r3
	{
		rev=rev<<1;
		rev|=(byte>>i)&(0x01);
     3c0:	fa41 f203 	asr.w	r2, r1, r3
     3c4:	f002 0201 	and.w	r2, r2, #1
     3c8:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
     3cc:	b2c0      	uxtb	r0, r0
	for (int i=0;i<8;i++)
     3ce:	3301      	adds	r3, #1
     3d0:	2b08      	cmp	r3, #8
     3d2:	d1f5      	bne.n	3c0 <_ZN17ARINC_Conversions8FlipByteEh+0x4>
	}
	return rev;
}
     3d4:	4770      	bx	lr
	...

000003d8 <_ZN17ARINC_Conversions10Label2ByteEm>:
uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b085      	sub	sp, #20
     3de:	4680      	mov	r8, r0
     3e0:	4608      	mov	r0, r1
     3e2:	f04f 0a02 	mov.w	sl, #2
	result=0;
     3e6:	f04f 0900 	mov.w	r9, #0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3ea:	4f23      	ldr	r7, [pc, #140]	; (478 <_ZN17ARINC_Conversions10Label2ByteEm+0xa0>)
     3ec:	464e      	mov	r6, r9
     3ee:	46c3      	mov	fp, r8
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3f0:	4b22      	ldr	r3, [pc, #136]	; (47c <_ZN17ARINC_Conversions10Label2ByteEm+0xa4>)
     3f2:	4798      	blx	r3
     3f4:	4604      	mov	r4, r0
     3f6:	460d      	mov	r5, r1
     3f8:	4650      	mov	r0, sl
     3fa:	47b8      	blx	r7
     3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
     400:	4602      	mov	r2, r0
     402:	460b      	mov	r3, r1
     404:	2000      	movs	r0, #0
     406:	491e      	ldr	r1, [pc, #120]	; (480 <_ZN17ARINC_Conversions10Label2ByteEm+0xa8>)
     408:	f8df 8080 	ldr.w	r8, [pc, #128]	; 48c <_ZN17ARINC_Conversions10Label2ByteEm+0xb4>
     40c:	47c0      	blx	r8
     40e:	4602      	mov	r2, r0
     410:	460b      	mov	r3, r1
     412:	e9cd 4500 	strd	r4, r5, [sp]
     416:	4620      	mov	r0, r4
     418:	4629      	mov	r1, r5
     41a:	4c1a      	ldr	r4, [pc, #104]	; (484 <_ZN17ARINC_Conversions10Label2ByteEm+0xac>)
     41c:	47a0      	blx	r4
     41e:	4d1a      	ldr	r5, [pc, #104]	; (488 <_ZN17ARINC_Conversions10Label2ByteEm+0xb0>)
     420:	47a8      	blx	r5
		label-=octals[2-i]*pow(10,2-i);
     422:	b2c4      	uxtb	r4, r0
     424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     428:	2000      	movs	r0, #0
     42a:	4915      	ldr	r1, [pc, #84]	; (480 <_ZN17ARINC_Conversions10Label2ByteEm+0xa8>)
     42c:	47c0      	blx	r8
     42e:	4680      	mov	r8, r0
     430:	4689      	mov	r9, r1
     432:	4620      	mov	r0, r4
     434:	47b8      	blx	r7
     436:	4642      	mov	r2, r8
     438:	464b      	mov	r3, r9
     43a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 490 <_ZN17ARINC_Conversions10Label2ByteEm+0xb8>
     43e:	47c0      	blx	r8
     440:	4602      	mov	r2, r0
     442:	460b      	mov	r3, r1
     444:	e9dd 0100 	ldrd	r0, r1, [sp]
     448:	f8df 8048 	ldr.w	r8, [pc, #72]	; 494 <_ZN17ARINC_Conversions10Label2ByteEm+0xbc>
     44c:	47c0      	blx	r8
     44e:	47a8      	blx	r5
		result|=octals[2-i]<<(6-3*i);
     450:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     454:	409c      	lsls	r4, r3
     456:	4326      	orrs	r6, r4
     458:	b2f6      	uxtb	r6, r6
     45a:	f10a 3aff 	add.w	sl, sl, #4294967295
	for (uint8_t i = 0; i < sizeof(octals); i++){
     45e:	f1ba 3fff 	cmp.w	sl, #4294967295
     462:	d1c5      	bne.n	3f0 <_ZN17ARINC_Conversions10Label2ByteEm+0x18>
	result=FlipByte(result);
     464:	f8db 3000 	ldr.w	r3, [fp]
     468:	681b      	ldr	r3, [r3, #0]
     46a:	4631      	mov	r1, r6
     46c:	4658      	mov	r0, fp
     46e:	4798      	blx	r3
}
     470:	b005      	add	sp, #20
     472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     476:	bf00      	nop
     478:	0000f721 	.word	0x0000f721
     47c:	0000f701 	.word	0x0000f701
     480:	40240000 	.word	0x40240000
     484:	0000fa41 	.word	0x0000fa41
     488:	0000fd4d 	.word	0x0000fd4d
     48c:	0000e335 	.word	0x0000e335
     490:	0000f7ed 	.word	0x0000f7ed
     494:	0000f485 	.word	0x0000f485

00000498 <_ZN17ARINC_ConversionsC1Ev>:
ARINC_Conversions::ARINC_Conversions()
     498:	4b01      	ldr	r3, [pc, #4]	; (4a0 <_ZN17ARINC_ConversionsC1Ev+0x8>)
     49a:	6003      	str	r3, [r0, #0]
} //ARINC_Conversions
     49c:	4770      	bx	lr
     49e:	bf00      	nop
     4a0:	00010204 	.word	0x00010204

000004a4 <_ZN17ARINC_ConversionsD1Ev>:
} //~ARINC_Conversions
     4a4:	4770      	bx	lr

000004a6 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
	for (uint8_t ii = 0; ii < 32; ii++)
	{
		if (arr[ii]==l)
     4a6:	7813      	ldrb	r3, [r2, #0]
     4a8:	428b      	cmp	r3, r1
     4aa:	d009      	beq.n	4c0 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x1a>
     4ac:	2001      	movs	r0, #1
     4ae:	5c13      	ldrb	r3, [r2, r0]
     4b0:	428b      	cmp	r3, r1
     4b2:	d006      	beq.n	4c2 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x1c>
	for (uint8_t ii = 0; ii < 32; ii++)
     4b4:	3001      	adds	r0, #1
     4b6:	b2c0      	uxtb	r0, r0
     4b8:	281f      	cmp	r0, #31
     4ba:	ddf8      	ble.n	4ae <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x8>
		{
			return ii;
		}
		
	}
	return 32;
     4bc:	2020      	movs	r0, #32
     4be:	4770      	bx	lr
	for (uint8_t ii = 0; ii < 32; ii++)
     4c0:	2000      	movs	r0, #0
}
     4c2:	4770      	bx	lr

000004c4 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
     4c4:	b410      	push	{r4}

		result=0;
     4c6:	2300      	movs	r3, #0
     4c8:	6083      	str	r3, [r0, #8]
     4ca:	3901      	subs	r1, #1
     4cc:	2218      	movs	r2, #24
		for (uint8_t ii = 0; ii < 4; ii++)
		{
			result|=((uint32_t)arr[ii])<<(24-ii*8);
     4ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     4d2:	4093      	lsls	r3, r2
     4d4:	6884      	ldr	r4, [r0, #8]
     4d6:	4323      	orrs	r3, r4
     4d8:	6083      	str	r3, [r0, #8]
     4da:	3a08      	subs	r2, #8
		for (uint8_t ii = 0; ii < 4; ii++)
     4dc:	f112 0f08 	cmn.w	r2, #8
     4e0:	d1f5      	bne.n	4ce <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0xa>

		}
		return result;
}
     4e2:	4618      	mov	r0, r3
     4e4:	bc10      	pop	{r4}
     4e6:	4770      	bx	lr

000004e8 <_ZN19ARINC_Handler_Class4InitEv>:
ARINC_Handler_Class::~ARINC_Handler_Class()
{
} //~ARINC_Handler_Class


bool ARINC_Handler_Class::Init(void){
     4e8:	b510      	push	{r4, lr}
     4ea:	4604      	mov	r4, r0
	isOK=ar->Init();
     4ec:	f8d0 02b0 	ldr.w	r0, [r0, #688]	; 0x2b0
     4f0:	4b03      	ldr	r3, [pc, #12]	; (500 <_ZN19ARINC_Handler_Class4InitEv+0x18>)
     4f2:	4798      	blx	r3
     4f4:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
	
	return isOK;
     4f8:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
}
     4fc:	bd10      	pop	{r4, pc}
     4fe:	bf00      	nop
     500:	000006e1 	.word	0x000006e1

00000504 <_ZN19ARINC_Handler_Class12R1GotMessageEv>:

bool ARINC_Handler_Class::R1GotMessage(void){
	return ar->newMessageR1;
     504:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
     508:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
}
     50c:	4770      	bx	lr
	...

00000510 <_ZN19ARINC_Handler_Class19HandleCommunicationEv>:
bool ARINC_Handler_Class::HandleCommunication(void){
     510:	b510      	push	{r4, lr}
     512:	4604      	mov	r4, r0
	ar->ReadRXBuffer(1);
     514:	2101      	movs	r1, #1
     516:	f8d0 02b0 	ldr.w	r0, [r0, #688]	; 0x2b0
     51a:	4b03      	ldr	r3, [pc, #12]	; (528 <_ZN19ARINC_Handler_Class19HandleCommunicationEv+0x18>)
     51c:	4798      	blx	r3
	return ar->newMessageR1;
     51e:	f8d4 32b0 	ldr.w	r3, [r4, #688]	; 0x2b0
     522:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
}
     526:	bd10      	pop	{r4, pc}
     528:	000007f5 	.word	0x000007f5

0000052c <_ZN19ARINC_Handler_Class8PollDataEv>:

bool ARINC_Handler_Class::PollData(void){
     52c:	b508      	push	{r3, lr}
	ar->TransmitTXBuffer();
     52e:	f8d0 02b0 	ldr.w	r0, [r0, #688]	; 0x2b0
     532:	4b02      	ldr	r3, [pc, #8]	; (53c <_ZN19ARINC_Handler_Class8PollDataEv+0x10>)
     534:	4798      	blx	r3
	return false;
}
     536:	2000      	movs	r0, #0
     538:	bd08      	pop	{r3, pc}
     53a:	bf00      	nop
     53c:	00000925 	.word	0x00000925

00000540 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev>:




     540:	b510      	push	{r4, lr}
static ARINC_Interface staticArinc;
     542:	4c05      	ldr	r4, [pc, #20]	; (558 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x18>)
     544:	4620      	mov	r0, r4
     546:	4b05      	ldr	r3, [pc, #20]	; (55c <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x1c>)
     548:	4798      	blx	r3
     54a:	4a05      	ldr	r2, [pc, #20]	; (560 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x20>)
     54c:	4905      	ldr	r1, [pc, #20]	; (564 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x24>)
     54e:	4620      	mov	r0, r4
     550:	4b05      	ldr	r3, [pc, #20]	; (568 <_GLOBAL__sub_I__ZN19ARINC_Handler_ClassC2Ev+0x28>)
     552:	4798      	blx	r3
     554:	bd10      	pop	{r4, pc}
     556:	bf00      	nop
     558:	200007a4 	.word	0x200007a4
     55c:	00000681 	.word	0x00000681
     560:	20000000 	.word	0x20000000
     564:	00000591 	.word	0x00000591
     568:	0000e325 	.word	0x0000e325

0000056c <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
     56c:	4770      	bx	lr
	...

00000570 <_ZL9TxTimeoutPK10timer_task>:
	//gpio_toggle_pin_level(LED0);
}
static void TxTimeout(const struct timer_task *const timer_task){
	ptrARINCInterface->txTimeout=true;
     570:	4b02      	ldr	r3, [pc, #8]	; (57c <_ZL9TxTimeoutPK10timer_task+0xc>)
     572:	681b      	ldr	r3, [r3, #0]
     574:	2201      	movs	r2, #1
     576:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
     57a:	4770      	bx	lr
     57c:	20000a80 	.word	0x20000a80

00000580 <_ZL12Receiver1Intv>:
}

static void Receiver1Int(void){
	ptrARINCInterface->newMessageR1=true;
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <_ZL12Receiver1Intv+0xc>)
     582:	681b      	ldr	r3, [r3, #0]
     584:	2201      	movs	r2, #1
     586:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
     58a:	4770      	bx	lr
     58c:	20000a80 	.word	0x20000a80

00000590 <_ZN15ARINC_InterfaceD1Ev>:
	//converter=ptrConverter;
} //ARINC_Interface


// default destructor
ARINC_Interface::~ARINC_Interface()
     590:	b538      	push	{r3, r4, r5, lr}
     592:	4604      	mov	r4, r0
     594:	4d10      	ldr	r5, [pc, #64]	; (5d8 <_ZN15ARINC_InterfaceD1Ev+0x48>)
     596:	f105 0310 	add.w	r3, r5, #16
     59a:	6003      	str	r3, [r0, #0]
     59c:	f105 032c 	add.w	r3, r5, #44	; 0x2c
     5a0:	f8c0 32ac 	str.w	r3, [r0, #684]	; 0x2ac
     5a4:	f105 0348 	add.w	r3, r5, #72	; 0x48
     5a8:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
     5ac:	f500 70c8 	add.w	r0, r0, #400	; 0x190
     5b0:	4b0a      	ldr	r3, [pc, #40]	; (5dc <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     5b2:	4798      	blx	r3
     5b4:	f105 0158 	add.w	r1, r5, #88	; 0x58
     5b8:	4620      	mov	r0, r4
     5ba:	4b09      	ldr	r3, [pc, #36]	; (5e0 <_ZN15ARINC_InterfaceD1Ev+0x50>)
     5bc:	4798      	blx	r3
     5be:	f105 016c 	add.w	r1, r5, #108	; 0x6c
     5c2:	f504 702f 	add.w	r0, r4, #700	; 0x2bc
     5c6:	4b07      	ldr	r3, [pc, #28]	; (5e4 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     5c8:	4798      	blx	r3
     5ca:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
     5ce:	4b06      	ldr	r3, [pc, #24]	; (5e8 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     5d0:	4798      	blx	r3
{
} //~ARINC_Interface
     5d2:	4620      	mov	r0, r4
     5d4:	bd38      	pop	{r3, r4, r5, pc}
     5d6:	bf00      	nop
     5d8:	0001020c 	.word	0x0001020c
     5dc:	000009fd 	.word	0x000009fd
     5e0:	0000031d 	.word	0x0000031d
     5e4:	00000ef9 	.word	0x00000ef9
     5e8:	000004a5 	.word	0x000004a5

000005ec <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
     5ec:	b508      	push	{r3, lr}
     5ee:	6803      	ldr	r3, [r0, #0]
     5f0:	f853 3c10 	ldr.w	r3, [r3, #-16]
     5f4:	4418      	add	r0, r3
     5f6:	4b01      	ldr	r3, [pc, #4]	; (5fc <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x10>)
     5f8:	4798      	blx	r3
     5fa:	bd08      	pop	{r3, pc}
     5fc:	00000591 	.word	0x00000591

00000600 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     600:	b510      	push	{r4, lr}
     602:	4604      	mov	r4, r0
} //~ARINC_Interface
     604:	4b04      	ldr	r3, [pc, #16]	; (618 <_ZN15ARINC_InterfaceD0Ev+0x18>)
     606:	4798      	blx	r3
     608:	f44f 7136 	mov.w	r1, #728	; 0x2d8
     60c:	4620      	mov	r0, r4
     60e:	4b03      	ldr	r3, [pc, #12]	; (61c <_ZN15ARINC_InterfaceD0Ev+0x1c>)
     610:	4798      	blx	r3
     612:	4620      	mov	r0, r4
     614:	bd10      	pop	{r4, pc}
     616:	bf00      	nop
     618:	00000591 	.word	0x00000591
     61c:	0000e331 	.word	0x0000e331

00000620 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
     620:	b508      	push	{r3, lr}
     622:	6803      	ldr	r3, [r0, #0]
     624:	f853 3c10 	ldr.w	r3, [r3, #-16]
     628:	4418      	add	r0, r3
     62a:	4b01      	ldr	r3, [pc, #4]	; (630 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x10>)
     62c:	4798      	blx	r3
     62e:	bd08      	pop	{r3, pc}
     630:	00000601 	.word	0x00000601

00000634 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     634:	b538      	push	{r3, r4, r5, lr}
	uint32_t data;

	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
		if (receiverBuffer[i][3]==label)
     636:	6905      	ldr	r5, [r0, #16]
     638:	682a      	ldr	r2, [r5, #0]
     63a:	78d3      	ldrb	r3, [r2, #3]
     63c:	428b      	cmp	r3, r1
     63e:	d00b      	beq.n	658 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x24>
     640:	2301      	movs	r3, #1
     642:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
     646:	78d4      	ldrb	r4, [r2, #3]
     648:	428c      	cmp	r4, r1
     64a:	d005      	beq.n	658 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x24>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     64c:	3301      	adds	r3, #1
     64e:	b2db      	uxtb	r3, r3
     650:	2b1f      	cmp	r3, #31
     652:	ddf6      	ble.n	642 <_ZN15ARINC_Interface15ReadBufferLabelEh+0xe>
			return data;
		}
		
	}

	return 0;
     654:	2000      	movs	r0, #0
}
     656:	bd38      	pop	{r3, r4, r5, pc}
			data=FourBytesArray2Uint32(receiverBuffer[i]);
     658:	6803      	ldr	r3, [r0, #0]
     65a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
     65e:	4611      	mov	r1, r2
     660:	4418      	add	r0, r3
     662:	4b01      	ldr	r3, [pc, #4]	; (668 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x34>)
     664:	4798      	blx	r3
			return data;
     666:	bd38      	pop	{r3, r4, r5, pc}
     668:	000004c5 	.word	0x000004c5

0000066c <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
     66c:	b508      	push	{r3, lr}
     66e:	6803      	ldr	r3, [r0, #0]
     670:	f853 3c14 	ldr.w	r3, [r3, #-20]
     674:	4418      	add	r0, r3
     676:	4b01      	ldr	r3, [pc, #4]	; (67c <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x10>)
     678:	4798      	blx	r3
     67a:	bd08      	pop	{r3, pc}
     67c:	00000635 	.word	0x00000635

00000680 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
     680:	b538      	push	{r3, r4, r5, lr}
     682:	4604      	mov	r4, r0
     684:	f500 702b 	add.w	r0, r0, #684	; 0x2ac
     688:	4b10      	ldr	r3, [pc, #64]	; (6cc <_ZN15ARINC_InterfaceC1Ev+0x4c>)
     68a:	4798      	blx	r3
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     68c:	4d10      	ldr	r5, [pc, #64]	; (6d0 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     68e:	f105 0380 	add.w	r3, r5, #128	; 0x80
     692:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
     696:	f105 039c 	add.w	r3, r5, #156	; 0x9c
     69a:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
     69e:	f105 0158 	add.w	r1, r5, #88	; 0x58
     6a2:	4620      	mov	r0, r4
     6a4:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     6a6:	4798      	blx	r3
     6a8:	f105 0310 	add.w	r3, r5, #16
     6ac:	6023      	str	r3, [r4, #0]
     6ae:	f105 032c 	add.w	r3, r5, #44	; 0x2c
     6b2:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
     6b6:	3548      	adds	r5, #72	; 0x48
     6b8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
     6bc:	f504 70c8 	add.w	r0, r4, #400	; 0x190
     6c0:	4b05      	ldr	r3, [pc, #20]	; (6d8 <_ZN15ARINC_InterfaceC1Ev+0x58>)
     6c2:	4798      	blx	r3
	ptrARINCInterface=this;
     6c4:	4b05      	ldr	r3, [pc, #20]	; (6dc <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     6c6:	601c      	str	r4, [r3, #0]
} //ARINC_Interface
     6c8:	4620      	mov	r0, r4
     6ca:	bd38      	pop	{r3, r4, r5, pc}
     6cc:	00000499 	.word	0x00000499
     6d0:	0001020c 	.word	0x0001020c
     6d4:	00000301 	.word	0x00000301
     6d8:	000009f1 	.word	0x000009f1
     6dc:	20000a80 	.word	0x20000a80

000006e0 <_ZN15ARINC_Interface4InitEv>:
bool	ARINC_Interface::Init(void){
     6e0:	b570      	push	{r4, r5, r6, lr}
     6e2:	4604      	mov	r4, r0
	MessageCount=0; MessageCount1=0; MessageCount2=0;
     6e4:	2300      	movs	r3, #0
     6e6:	f880 3155 	strb.w	r3, [r0, #341]	; 0x155
     6ea:	f880 317c 	strb.w	r3, [r0, #380]	; 0x17c
     6ee:	f880 317d 	strb.w	r3, [r0, #381]	; 0x17d
	BITRATE0=false;
     6f2:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	BITRATE1=false;
     6f6:	f880 3159 	strb.w	r3, [r0, #345]	; 0x159
	BITRATE2=false;
     6fa:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
	PARITY=false;
     6fe:	f880 315b 	strb.w	r3, [r0, #347]	; 0x15b
}

void ARINC_Interface::HW_RESET(void){
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
     702:	2001      	movs	r0, #1
     704:	4b2a      	ldr	r3, [pc, #168]	; (7b0 <_ZN15ARINC_Interface4InitEv+0xd0>)
     706:	4798      	blx	r3
	InitBuffer();
     708:	4620      	mov	r0, r4
     70a:	4b2a      	ldr	r3, [pc, #168]	; (7b4 <_ZN15ARINC_Interface4InitEv+0xd4>)
     70c:	4798      	blx	r3
	statusHolt=HI3593.Init();
     70e:	f504 76c8 	add.w	r6, r4, #400	; 0x190
     712:	4630      	mov	r0, r6
     714:	4b28      	ldr	r3, [pc, #160]	; (7b8 <_ZN15ARINC_Interface4InitEv+0xd8>)
     716:	4798      	blx	r3
     718:	f884 017f 	strb.w	r0, [r4, #383]	; 0x17f
	if (statusHolt!=TSR_Default){
     71c:	2801      	cmp	r0, #1
     71e:	d01f      	beq.n	760 <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
     720:	4926      	ldr	r1, [pc, #152]	; (7bc <_ZN15ARINC_Interface4InitEv+0xdc>)
     722:	4827      	ldr	r0, [pc, #156]	; (7c0 <_ZN15ARINC_Interface4InitEv+0xe0>)
     724:	4b27      	ldr	r3, [pc, #156]	; (7c4 <_ZN15ARINC_Interface4InitEv+0xe4>)
     726:	4798      	blx	r3
		isOK=false;
     728:	2300      	movs	r3, #0
     72a:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
	arincTimer.Init();
     72e:	4d26      	ldr	r5, [pc, #152]	; (7c8 <_ZN15ARINC_Interface4InitEv+0xe8>)
     730:	4628      	mov	r0, r5
     732:	4b26      	ldr	r3, [pc, #152]	; (7cc <_ZN15ARINC_Interface4InitEv+0xec>)
     734:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
     736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     73a:	4925      	ldr	r1, [pc, #148]	; (7d0 <_ZN15ARINC_Interface4InitEv+0xf0>)
     73c:	4628      	mov	r0, r5
     73e:	4e25      	ldr	r6, [pc, #148]	; (7d4 <_ZN15ARINC_Interface4InitEv+0xf4>)
     740:	47b0      	blx	r6
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
     742:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     746:	4924      	ldr	r1, [pc, #144]	; (7d8 <_ZN15ARINC_Interface4InitEv+0xf8>)
     748:	4628      	mov	r0, r5
     74a:	47b0      	blx	r6
	ext_irq_register(ARINCR1Int, Receiver1Int);
     74c:	4923      	ldr	r1, [pc, #140]	; (7dc <_ZN15ARINC_Interface4InitEv+0xfc>)
     74e:	2057      	movs	r0, #87	; 0x57
     750:	4b23      	ldr	r3, [pc, #140]	; (7e0 <_ZN15ARINC_Interface4InitEv+0x100>)
     752:	4798      	blx	r3
	arincTimer.start();
     754:	4628      	mov	r0, r5
     756:	4b23      	ldr	r3, [pc, #140]	; (7e4 <_ZN15ARINC_Interface4InitEv+0x104>)
     758:	4798      	blx	r3
}
     75a:	f894 0180 	ldrb.w	r0, [r4, #384]	; 0x180
     75e:	bd70      	pop	{r4, r5, r6, pc}
		isOK=true;
     760:	2301      	movs	r3, #1
     762:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
		newMessageR1=false;
     766:	2500      	movs	r5, #0
     768:	f884 5124 	strb.w	r5, [r4, #292]	; 0x124
		newMessageR2=false;
     76c:	f884 5125 	strb.w	r5, [r4, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
     770:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
		MessageCount=0;
     774:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
     778:	231d      	movs	r3, #29
     77a:	f884 3188 	strb.w	r3, [r4, #392]	; 0x188
		Arate=0;
     77e:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
     782:	f8c4 5127 	str.w	r5, [r4, #295]	; 0x127
     786:	f8c4 512b 	str.w	r5, [r4, #299]	; 0x12b
     78a:	f8c4 512f 	str.w	r5, [r4, #303]	; 0x12f
     78e:	f8c4 5133 	str.w	r5, [r4, #307]	; 0x133
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
     792:	4630      	mov	r0, r6
     794:	4b14      	ldr	r3, [pc, #80]	; (7e8 <_ZN15ARINC_Interface4InitEv+0x108>)
     796:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
     798:	4630      	mov	r0, r6
     79a:	4b14      	ldr	r3, [pc, #80]	; (7ec <_ZN15ARINC_Interface4InitEv+0x10c>)
     79c:	4798      	blx	r3
		HI3593.InitPriorityLabels();
     79e:	4630      	mov	r0, r6
     7a0:	4b13      	ldr	r3, [pc, #76]	; (7f0 <_ZN15ARINC_Interface4InitEv+0x110>)
     7a2:	4798      	blx	r3
		Rec1Parity =0;
     7a4:	f884 518a 	strb.w	r5, [r4, #394]	; 0x18a
		Rec2Parity =0;
     7a8:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
     7ac:	e7bf      	b.n	72e <_ZN15ARINC_Interface4InitEv+0x4e>
     7ae:	bf00      	nop
     7b0:	0000266d 	.word	0x0000266d
     7b4:	00000339 	.word	0x00000339
     7b8:	00000da9 	.word	0x00000da9
     7bc:	00010300 	.word	0x00010300
     7c0:	200012f8 	.word	0x200012f8
     7c4:	0000df59 	.word	0x0000df59
     7c8:	200012d8 	.word	0x200012d8
     7cc:	0000d795 	.word	0x0000d795
     7d0:	0000056d 	.word	0x0000056d
     7d4:	0000d859 	.word	0x0000d859
     7d8:	00000571 	.word	0x00000571
     7dc:	00000581 	.word	0x00000581
     7e0:	00002735 	.word	0x00002735
     7e4:	0000d7e5 	.word	0x0000d7e5
     7e8:	00000a99 	.word	0x00000a99
     7ec:	00000b19 	.word	0x00000b19
     7f0:	00000c61 	.word	0x00000c61

000007f4 <_ZN15ARINC_Interface12ReadRXBufferEh>:
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
     7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7f8:	b0c3      	sub	sp, #268	; 0x10c
     7fa:	4606      	mov	r6, r0
     7fc:	468b      	mov	fp, r1
	usb.println("r\n---!got message!----");
     7fe:	492b      	ldr	r1, [pc, #172]	; (8ac <_ZN15ARINC_Interface12ReadRXBufferEh+0xb8>)
     800:	482b      	ldr	r0, [pc, #172]	; (8b0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xbc>)
     802:	4b2c      	ldr	r3, [pc, #176]	; (8b4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xc0>)
     804:	4798      	blx	r3
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     806:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     80a:	b672      	cpsid	i
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
     80c:	ea4f 184b 	mov.w	r8, fp, lsl #5
     810:	f1a8 0890 	sub.w	r8, r8, #144	; 0x90
     814:	fa5f f888 	uxtb.w	r8, r8
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
     818:	f10b 0304 	add.w	r3, fp, #4
     81c:	015b      	lsls	r3, r3, #5
     81e:	b2db      	uxtb	r3, r3
     820:	9301      	str	r3, [sp, #4]
     822:	2400      	movs	r4, #0
     824:	4625      	mov	r5, r4
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
     826:	f506 77c8 	add.w	r7, r6, #400	; 0x190
     82a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8bc <_ZN15ARINC_Interface12ReadRXBufferEh+0xc8>
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
     82e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8c0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xcc>
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
     832:	4641      	mov	r1, r8
     834:	4638      	mov	r0, r7
     836:	47c8      	blx	r9
     838:	f886 017e 	strb.w	r0, [r6, #382]	; 0x17e
		if(((statusRegister & FFEMPTY) == 0))
     83c:	f010 0f01 	tst.w	r0, #1
     840:	d111      	bne.n	866 <_ZN15ARINC_Interface12ReadRXBufferEh+0x72>
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
     842:	f506 72b2 	add.w	r2, r6, #356	; 0x164
     846:	9901      	ldr	r1, [sp, #4]
     848:	4638      	mov	r0, r7
     84a:	47d0      	blx	sl
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
     84c:	f8d6 3164 	ldr.w	r3, [r6, #356]	; 0x164
     850:	aa42      	add	r2, sp, #264	; 0x108
     852:	eb02 0484 	add.w	r4, r2, r4, lsl #2
     856:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
     85a:	6023      	str	r3, [r4, #0]
			messagesCounter++;
     85c:	3501      	adds	r5, #1
     85e:	b2ed      	uxtb	r5, r5
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
     860:	462c      	mov	r4, r5
     862:	2d3f      	cmp	r5, #63	; 0x3f
     864:	dde5      	ble.n	832 <_ZN15ARINC_Interface12ReadRXBufferEh+0x3e>
  __ASM volatile ("dmb 0xF":::"memory");
     866:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     86a:	b662      	cpsie	i
		if ((n==1))
     86c:	f1bb 0f01 	cmp.w	fp, #1
     870:	d018      	beq.n	8a4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xb0>
		else if (n==2)
     872:	f1bb 0f02 	cmp.w	fp, #2
			newMessageR2=false;
     876:	bf04      	itt	eq
     878:	2300      	moveq	r3, #0
     87a:	f886 3125 	strbeq.w	r3, [r6, #293]	; 0x125
	for (uint8_t i = 0; i < messagesCounter; i++)
     87e:	b164      	cbz	r4, 89a <_ZN15ARINC_Interface12ReadRXBufferEh+0xa6>
     880:	2100      	movs	r1, #0
     882:	460d      	mov	r5, r1
		SortReceivedData(receiver[i]);
     884:	4f0c      	ldr	r7, [pc, #48]	; (8b8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xc4>)
     886:	ab02      	add	r3, sp, #8
     888:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     88c:	4630      	mov	r0, r6
     88e:	47b8      	blx	r7
	for (uint8_t i = 0; i < messagesCounter; i++)
     890:	3501      	adds	r5, #1
     892:	b2ed      	uxtb	r5, r5
     894:	4629      	mov	r1, r5
     896:	42a5      	cmp	r5, r4
     898:	dbf5      	blt.n	886 <_ZN15ARINC_Interface12ReadRXBufferEh+0x92>
}
     89a:	f896 017e 	ldrb.w	r0, [r6, #382]	; 0x17e
     89e:	b043      	add	sp, #268	; 0x10c
     8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			newMessageR1=false;
     8a4:	2300      	movs	r3, #0
     8a6:	f886 3124 	strb.w	r3, [r6, #292]	; 0x124
     8aa:	e7e8      	b.n	87e <_ZN15ARINC_Interface12ReadRXBufferEh+0x8a>
     8ac:	00010344 	.word	0x00010344
     8b0:	200012f8 	.word	0x200012f8
     8b4:	0000df59 	.word	0x0000df59
     8b8:	00000381 	.word	0x00000381
     8bc:	00000d25 	.word	0x00000d25
     8c0:	00000b65 	.word	0x00000b65

000008c4 <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:
uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
     8c4:	b538      	push	{r3, r4, r5, lr}
     8c6:	4604      	mov	r4, r0
     8c8:	460d      	mov	r5, r1
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
     8ca:	6803      	ldr	r3, [r0, #0]
     8cc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     8d0:	6862      	ldr	r2, [r4, #4]
     8d2:	4420      	add	r0, r4
     8d4:	4b11      	ldr	r3, [pc, #68]	; (91c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x58>)
     8d6:	4798      	blx	r3
     8d8:	f884 018c 	strb.w	r0, [r4, #396]	; 0x18c
	if (transmitBuffer[index][3]|transmitBuffer[index][2]|transmitBuffer[index][1]>0)
     8dc:	6963      	ldr	r3, [r4, #20]
     8de:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
     8e2:	78d3      	ldrb	r3, [r2, #3]
     8e4:	7891      	ldrb	r1, [r2, #2]
     8e6:	430b      	orrs	r3, r1
     8e8:	7851      	ldrb	r1, [r2, #1]
     8ea:	2900      	cmp	r1, #0
     8ec:	bf18      	it	ne
     8ee:	f043 0301 	orrne.w	r3, r3, #1
     8f2:	b90b      	cbnz	r3, 8f8 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x34>
}
     8f4:	4628      	mov	r0, r5
     8f6:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(localBuffer,transmitBuffer[index],4);
     8f8:	6813      	ldr	r3, [r2, #0]
     8fa:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  __ASM volatile ("dmb 0xF":::"memory");
     8fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
     902:	b672      	cpsid	i
			HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
     904:	f504 72b0 	add.w	r2, r4, #352	; 0x160
     908:	210c      	movs	r1, #12
     90a:	f504 70c8 	add.w	r0, r4, #400	; 0x190
     90e:	4b04      	ldr	r3, [pc, #16]	; (920 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x5c>)
     910:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
     912:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     916:	b662      	cpsie	i
     918:	e7ec      	b.n	8f4 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x30>
     91a:	bf00      	nop
     91c:	000004a7 	.word	0x000004a7
     920:	00000be1 	.word	0x00000be1

00000924 <_ZN15ARINC_Interface16TransmitTXBufferEv>:
void	ARINC_Interface::TransmitTXBuffer(void){
     924:	b570      	push	{r4, r5, r6, lr}
     926:	4605      	mov	r5, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     928:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     92c:	4b0c      	ldr	r3, [pc, #48]	; (960 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3c>)
     92e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     932:	2400      	movs	r4, #0
			TrasmitSingleLabel(l);
     934:	4e0b      	ldr	r6, [pc, #44]	; (964 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x40>)
     936:	e002      	b.n	93e <_ZN15ARINC_Interface16TransmitTXBufferEv+0x1a>
     938:	3401      	adds	r4, #1
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
     93a:	2c20      	cmp	r4, #32
     93c:	d006      	beq.n	94c <_ZN15ARINC_Interface16TransmitTXBufferEv+0x28>
		if (LabelsArrayTX[i]>0)
     93e:	686b      	ldr	r3, [r5, #4]
     940:	5d19      	ldrb	r1, [r3, r4]
     942:	2900      	cmp	r1, #0
     944:	d0f8      	beq.n	938 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
			TrasmitSingleLabel(l);
     946:	4628      	mov	r0, r5
     948:	47b0      	blx	r6
     94a:	e7f5      	b.n	938 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
	txTimeout=false;
     94c:	2300      	movs	r3, #0
     94e:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     952:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     956:	4b02      	ldr	r3, [pc, #8]	; (960 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3c>)
     958:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     95c:	bd70      	pop	{r4, r5, r6, pc}
     95e:	bf00      	nop
     960:	41008000 	.word	0x41008000
     964:	000008c5 	.word	0x000008c5

00000968 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     968:	e7fe      	b.n	968 <Dummy_Handler>
	...

0000096c <Reset_Handler>:
{
     96c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     96e:	4b17      	ldr	r3, [pc, #92]	; (9cc <Reset_Handler+0x60>)
     970:	4a17      	ldr	r2, [pc, #92]	; (9d0 <Reset_Handler+0x64>)
     972:	429a      	cmp	r2, r3
     974:	d010      	beq.n	998 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     976:	4b17      	ldr	r3, [pc, #92]	; (9d4 <Reset_Handler+0x68>)
     978:	4a14      	ldr	r2, [pc, #80]	; (9cc <Reset_Handler+0x60>)
     97a:	429a      	cmp	r2, r3
     97c:	d20c      	bcs.n	998 <Reset_Handler+0x2c>
     97e:	3b01      	subs	r3, #1
     980:	1a9b      	subs	r3, r3, r2
     982:	f023 0303 	bic.w	r3, r3, #3
     986:	3304      	adds	r3, #4
     988:	4413      	add	r3, r2
     98a:	4911      	ldr	r1, [pc, #68]	; (9d0 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     98c:	f851 0b04 	ldr.w	r0, [r1], #4
     990:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     994:	429a      	cmp	r2, r3
     996:	d1f9      	bne.n	98c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     998:	4b0f      	ldr	r3, [pc, #60]	; (9d8 <Reset_Handler+0x6c>)
     99a:	4a10      	ldr	r2, [pc, #64]	; (9dc <Reset_Handler+0x70>)
     99c:	429a      	cmp	r2, r3
     99e:	d20a      	bcs.n	9b6 <Reset_Handler+0x4a>
     9a0:	3b01      	subs	r3, #1
     9a2:	1a9b      	subs	r3, r3, r2
     9a4:	f023 0303 	bic.w	r3, r3, #3
     9a8:	3304      	adds	r3, #4
     9aa:	4413      	add	r3, r2
                *pDest++ = 0;
     9ac:	2100      	movs	r1, #0
     9ae:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     9b2:	4293      	cmp	r3, r2
     9b4:	d1fb      	bne.n	9ae <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     9b6:	4a0a      	ldr	r2, [pc, #40]	; (9e0 <Reset_Handler+0x74>)
     9b8:	4b0a      	ldr	r3, [pc, #40]	; (9e4 <Reset_Handler+0x78>)
     9ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     9be:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     9c0:	4b09      	ldr	r3, [pc, #36]	; (9e8 <Reset_Handler+0x7c>)
     9c2:	4798      	blx	r3
        main();
     9c4:	4b09      	ldr	r3, [pc, #36]	; (9ec <Reset_Handler+0x80>)
     9c6:	4798      	blx	r3
     9c8:	e7fe      	b.n	9c8 <Reset_Handler+0x5c>
     9ca:	bf00      	nop
     9cc:	20000000 	.word	0x20000000
     9d0:	00011220 	.word	0x00011220
     9d4:	2000061c 	.word	0x2000061c
     9d8:	20001688 	.word	0x20001688
     9dc:	2000061c 	.word	0x2000061c
     9e0:	e000ed00 	.word	0xe000ed00
     9e4:	00000000 	.word	0x00000000
     9e8:	0000fdc1 	.word	0x0000fdc1
     9ec:	00000e79 	.word	0x00000e79

000009f0 <_ZN15Holt_3593_ClassC1Ev>:
unsigned char LabelPriority2 [3];
static SPI_Syn_Class	staticSPI(&SPI_HI3593);

Holt_3593_Class::Holt_3593_Class()
{
	spi=&staticSPI;
     9f0:	4b01      	ldr	r3, [pc, #4]	; (9f8 <_ZN15Holt_3593_ClassC1Ev+0x8>)
     9f2:	6183      	str	r3, [r0, #24]
} //Holt_3593_Class
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	20000a84 	.word	0x20000a84

000009fc <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
{
} //~Holt_3593_Class
     9fc:	4770      	bx	lr
	...

00000a00 <_ZN15Holt_3593_Class4openEv>:
	 return R_Register (R_TSR);
	 
	 
 }
 
 void Holt_3593_Class::open(){
     a00:	b508      	push	{r3, lr}
	 	spi->Enable();
     a02:	6980      	ldr	r0, [r0, #24]
     a04:	4b03      	ldr	r3, [pc, #12]	; (a14 <_ZN15Holt_3593_Class4openEv+0x14>)
     a06:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     a0c:	4b02      	ldr	r3, [pc, #8]	; (a18 <_ZN15Holt_3593_Class4openEv+0x18>)
     a0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     a12:	bd08      	pop	{r3, pc}
     a14:	0000d5c5 	.word	0x0000d5c5
     a18:	41008000 	.word	0x41008000

00000a1c <_ZN15Holt_3593_Class5closeEv>:
		 SS_Low();
 }
  void Holt_3593_Class::close(){
     a1c:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <_ZN15Holt_3593_Class5closeEv+0x14>)
     a24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	    SS_High();
	  spi->Disable();
     a28:	6980      	ldr	r0, [r0, #24]
     a2a:	4b02      	ldr	r3, [pc, #8]	; (a34 <_ZN15Holt_3593_Class5closeEv+0x18>)
     a2c:	4798      	blx	r3
     a2e:	bd08      	pop	{r3, pc}
     a30:	41008000 	.word	0x41008000
     a34:	0000d689 	.word	0x0000d689

00000a38 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
     a38:	b530      	push	{r4, r5, lr}
     a3a:	b083      	sub	sp, #12
     a3c:	4604      	mov	r4, r0
     a3e:	f88d 1007 	strb.w	r1, [sp, #7]
	while (!spi->IsSPIReady()); 
     a42:	4d0a      	ldr	r5, [pc, #40]	; (a6c <_ZN15Holt_3593_Class9Send_ByteEh+0x34>)
     a44:	69a0      	ldr	r0, [r4, #24]
     a46:	47a8      	blx	r5
     a48:	2800      	cmp	r0, #0
     a4a:	d0fb      	beq.n	a44 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi->Write(&byte,1);
     a4c:	2201      	movs	r2, #1
     a4e:	f10d 0107 	add.w	r1, sp, #7
     a52:	69a0      	ldr	r0, [r4, #24]
     a54:	4b06      	ldr	r3, [pc, #24]	; (a70 <_ZN15Holt_3593_Class9Send_ByteEh+0x38>)
     a56:	4798      	blx	r3
	while (!spi->IsSPIReady());  
     a58:	4d04      	ldr	r5, [pc, #16]	; (a6c <_ZN15Holt_3593_Class9Send_ByteEh+0x34>)
     a5a:	69a0      	ldr	r0, [r4, #24]
     a5c:	47a8      	blx	r5
     a5e:	2800      	cmp	r0, #0
     a60:	d0fb      	beq.n	a5a <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
	return byte;
}
     a62:	f89d 0007 	ldrb.w	r0, [sp, #7]
     a66:	b003      	add	sp, #12
     a68:	bd30      	pop	{r4, r5, pc}
     a6a:	bf00      	nop
     a6c:	0000d6a9 	.word	0x0000d6a9
     a70:	0000d601 	.word	0x0000d601

00000a74 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	4604      	mov	r4, r0
     a78:	460e      	mov	r6, r1
     a7a:	4615      	mov	r5, r2
  Send_Byte(p)    ;   // write Data Register to begin transfer  
     a7c:	4b04      	ldr	r3, [pc, #16]	; (a90 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x1c>)
     a7e:	4798      	blx	r3
  if (return_when_done) {  // optional wait for SPIF flag
     a80:	b125      	cbz	r5, a8c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x18>
    while (!spi->IsSPIReady());     
     a82:	4d04      	ldr	r5, [pc, #16]	; (a94 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x20>)
     a84:	69a0      	ldr	r0, [r4, #24]
     a86:	47a8      	blx	r5
     a88:	2800      	cmp	r0, #0
     a8a:	d0fb      	beq.n	a84 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x10>
}
     a8c:	4630      	mov	r0, r6
     a8e:	bd70      	pop	{r4, r5, r6, pc}
     a90:	00000a39 	.word	0x00000a39
     a94:	0000d6a9 	.word	0x0000d6a9

00000a98 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:
{
     a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a9c:	4606      	mov	r6, r0
  open();
     a9e:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x38>)
     aa0:	4798      	blx	r3
  dummy = txrx8bits_8(0x14,1);  
     aa2:	2201      	movs	r2, #1
     aa4:	2114      	movs	r1, #20
     aa6:	4630      	mov	r0, r6
     aa8:	4b0a      	ldr	r3, [pc, #40]	; (ad4 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x3c>)
     aaa:	4798      	blx	r3
     aac:	4d0a      	ldr	r5, [pc, #40]	; (ad8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x40>)
     aae:	f105 0420 	add.w	r4, r5, #32
    dummy = txrx8bits_8(LabelArray_1[i],1);       
     ab2:	f04f 0801 	mov.w	r8, #1
     ab6:	4f07      	ldr	r7, [pc, #28]	; (ad4 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x3c>)
     ab8:	4642      	mov	r2, r8
     aba:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
     abe:	4630      	mov	r0, r6
     ac0:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
     ac2:	42ac      	cmp	r4, r5
     ac4:	d1f8      	bne.n	ab8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
	close();
     ac6:	4630      	mov	r0, r6
     ac8:	4b04      	ldr	r3, [pc, #16]	; (adc <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x44>)
     aca:	4798      	blx	r3
     acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ad0:	00000a01 	.word	0x00000a01
     ad4:	00000a75 	.word	0x00000a75
     ad8:	00010d0c 	.word	0x00010d0c
     adc:	00000a1d 	.word	0x00000a1d

00000ae0 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
     ae0:	b530      	push	{r4, r5, lr}
     ae2:	b083      	sub	sp, #12
     ae4:	4604      	mov	r4, r0
	uint8_t byte;
	
	while (!spi->IsSPIReady());
     ae6:	4d0a      	ldr	r5, [pc, #40]	; (b10 <_ZN15Holt_3593_Class8Get_ByteEv+0x30>)
     ae8:	69a0      	ldr	r0, [r4, #24]
     aea:	47a8      	blx	r5
     aec:	2800      	cmp	r0, #0
     aee:	d0fb      	beq.n	ae8 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi->Read(&byte,1);
     af0:	2201      	movs	r2, #1
     af2:	f10d 0107 	add.w	r1, sp, #7
     af6:	69a0      	ldr	r0, [r4, #24]
     af8:	4b06      	ldr	r3, [pc, #24]	; (b14 <_ZN15Holt_3593_Class8Get_ByteEv+0x34>)
     afa:	4798      	blx	r3
	while (!spi->IsSPIReady());
     afc:	4d04      	ldr	r5, [pc, #16]	; (b10 <_ZN15Holt_3593_Class8Get_ByteEv+0x30>)
     afe:	69a0      	ldr	r0, [r4, #24]
     b00:	47a8      	blx	r5
     b02:	2800      	cmp	r0, #0
     b04:	d0fb      	beq.n	afe <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>


	
	return byte;
}	
     b06:	f89d 0007 	ldrb.w	r0, [sp, #7]
     b0a:	b003      	add	sp, #12
     b0c:	bd30      	pop	{r4, r5, pc}
     b0e:	bf00      	nop
     b10:	0000d6a9 	.word	0x0000d6a9
     b14:	0000d645 	.word	0x0000d645

00000b18 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
     b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b1c:	4606      	mov	r6, r0
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
     b1e:	4b0d      	ldr	r3, [pc, #52]	; (b54 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x3c>)
     b20:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
     b22:	2201      	movs	r2, #1
     b24:	2128      	movs	r1, #40	; 0x28
     b26:	4630      	mov	r0, r6
     b28:	4b0b      	ldr	r3, [pc, #44]	; (b58 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
     b2a:	4798      	blx	r3
     b2c:	4d0b      	ldr	r5, [pc, #44]	; (b5c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x44>)
     b2e:	f105 043c 	add.w	r4, r5, #60	; 0x3c
     b32:	351c      	adds	r5, #28
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
     b34:	f04f 0801 	mov.w	r8, #1
     b38:	4f07      	ldr	r7, [pc, #28]	; (b58 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x40>)
     b3a:	4642      	mov	r2, r8
     b3c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
     b40:	4630      	mov	r0, r6
     b42:	47b8      	blx	r7
  for (i=31; i>=0; i--) {
     b44:	42ac      	cmp	r4, r5
     b46:	d1f8      	bne.n	b3a <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x22>
  }    
 	  
	close();
     b48:	4630      	mov	r0, r6
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x48>)
     b4c:	4798      	blx	r3
     b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b52:	bf00      	nop
     b54:	00000a01 	.word	0x00000a01
     b58:	00000a75 	.word	0x00000a75
     b5c:	20000a84 	.word	0x20000a84
     b60:	00000a1d 	.word	0x00000a1d

00000b64 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
     b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b68:	4605      	mov	r5, r0
     b6a:	460c      	mov	r4, r1
     b6c:	4690      	mov	r8, r2
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
     b6e:	29a0      	cmp	r1, #160	; 0xa0
     b70:	d019      	beq.n	ba6 <_ZN15Holt_3593_Class9ArincReadEhPh+0x42>
       count++;								 // then it has 4 bytes.
     b72:	29c0      	cmp	r1, #192	; 0xc0
     b74:	bf14      	ite	ne
     b76:	2603      	movne	r6, #3
     b78:	2604      	moveq	r6, #4
	   }                        
  open();
     b7a:	4628      	mov	r0, r5
     b7c:	4b0b      	ldr	r3, [pc, #44]	; (bac <_ZN15Holt_3593_Class9ArincReadEhPh+0x48>)
     b7e:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
     b80:	4621      	mov	r1, r4
     b82:	4628      	mov	r0, r5
     b84:	4b0a      	ldr	r3, [pc, #40]	; (bb0 <_ZN15Holt_3593_Class9ArincReadEhPh+0x4c>)
     b86:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
     b88:	2400      	movs	r4, #0
      dummy = Get_Byte(); 
     b8a:	4f0a      	ldr	r7, [pc, #40]	; (bb4 <_ZN15Holt_3593_Class9ArincReadEhPh+0x50>)
     b8c:	4628      	mov	r0, r5
     b8e:	47b8      	blx	r7
      passedArray[ByteCount] = dummy; 
     b90:	f808 0004 	strb.w	r0, [r8, r4]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
     b94:	3401      	adds	r4, #1
     b96:	b2e4      	uxtb	r4, r4
     b98:	42b4      	cmp	r4, r6
     b9a:	dbf7      	blt.n	b8c <_ZN15Holt_3593_Class9ArincReadEhPh+0x28>
     }

  close();
     b9c:	4628      	mov	r0, r5
     b9e:	4b06      	ldr	r3, [pc, #24]	; (bb8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x54>)
     ba0:	4798      	blx	r3
  
}
     ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       count++;								 // then it has 4 bytes.
     ba6:	2604      	movs	r6, #4
     ba8:	e7e7      	b.n	b7a <_ZN15Holt_3593_Class9ArincReadEhPh+0x16>
     baa:	bf00      	nop
     bac:	00000a01 	.word	0x00000a01
     bb0:	00000a39 	.word	0x00000a39
     bb4:	00000ae1 	.word	0x00000ae1
     bb8:	00000a1d 	.word	0x00000a1d

00000bbc <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	4604      	mov	r4, r0
     bc0:	460e      	mov	r6, r1
     bc2:	4615      	mov	r5, r2
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
     bc4:	4b04      	ldr	r3, [pc, #16]	; (bd8 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x1c>)
     bc6:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
     bc8:	b125      	cbz	r5, bd4 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x18>
		while (!spi->IsSPIReady());      
     bca:	4d04      	ldr	r5, [pc, #16]	; (bdc <_ZN15Holt_3593_Class9txrx8bitsEhh+0x20>)
     bcc:	69a0      	ldr	r0, [r4, #24]
     bce:	47a8      	blx	r5
     bd0:	2800      	cmp	r0, #0
     bd2:	d0fb      	beq.n	bcc <_ZN15Holt_3593_Class9txrx8bitsEhh+0x10>

  rxbyte = txbyte;  // get received data byte from Data Register

  return rxbyte;
  
 }
     bd4:	4630      	mov	r0, r6
     bd6:	bd70      	pop	{r4, r5, r6, pc}
     bd8:	00000a39 	.word	0x00000a39
     bdc:	0000d6a9 	.word	0x0000d6a9

00000be0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
     be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     be4:	4605      	mov	r5, r0
     be6:	460c      	mov	r4, r1
     be8:	4616      	mov	r6, r2
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
     bea:	4b19      	ldr	r3, [pc, #100]	; (c50 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x70>)
     bec:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
     bee:	2c18      	cmp	r4, #24
     bf0:	d029      	beq.n	c46 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x66>
     bf2:	2c2c      	cmp	r4, #44	; 0x2c
     bf4:	d027      	beq.n	c46 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x66>
   transmitCount=4;                                // Standard messages are 4 bytes
     bf6:	2204      	movs	r2, #4
     bf8:	4b16      	ldr	r3, [pc, #88]	; (c54 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
     bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      transmitCount--;
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
     bfe:	2201      	movs	r2, #1
     c00:	4621      	mov	r1, r4
     c02:	4628      	mov	r0, r5
     c04:	4b14      	ldr	r3, [pc, #80]	; (c58 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x78>)
     c06:	4798      	blx	r3

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
     c08:	4b12      	ldr	r3, [pc, #72]	; (c54 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
     c0a:	2200      	movs	r2, #0
     c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
     c14:	b193      	cbz	r3, c3c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x5c>
     c16:	4613      	mov	r3, r2
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
     c18:	f04f 0801 	mov.w	r8, #1
     c1c:	4f0e      	ldr	r7, [pc, #56]	; (c58 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x78>)
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
     c1e:	4c0d      	ldr	r4, [pc, #52]	; (c54 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
     c20:	4642      	mov	r2, r8
     c22:	5cf1      	ldrb	r1, [r6, r3]
     c24:	4628      	mov	r0, r5
     c26:	47b8      	blx	r7
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
     c28:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
     c34:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     c38:	4293      	cmp	r3, r2
     c3a:	dbf1      	blt.n	c20 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x40>
      }   
 close();
     c3c:	4628      	mov	r0, r5
     c3e:	4b07      	ldr	r3, [pc, #28]	; (c5c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x7c>)
     c40:	4798      	blx	r3
     c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      transmitCount--;
     c46:	2203      	movs	r2, #3
     c48:	4b02      	ldr	r3, [pc, #8]	; (c54 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x74>)
     c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     c4e:	e7d6      	b.n	bfe <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x1e>
     c50:	00000a01 	.word	0x00000a01
     c54:	20000a84 	.word	0x20000a84
     c58:	00000bbd 	.word	0x00000bbd
     c5c:	00000a1d 	.word	0x00000a1d

00000c60 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
{
     c60:	b570      	push	{r4, r5, r6, lr}
     c62:	4604      	mov	r4, r0
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
     c64:	4b0d      	ldr	r3, [pc, #52]	; (c9c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x3c>)
     c66:	781a      	ldrb	r2, [r3, #0]
     c68:	7142      	strb	r2, [r0, #5]
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
     c6a:	785a      	ldrb	r2, [r3, #1]
     c6c:	7182      	strb	r2, [r0, #6]
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
     c6e:	789b      	ldrb	r3, [r3, #2]
     c70:	71c3      	strb	r3, [r0, #7]
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
     c72:	1d46      	adds	r6, r0, #5
     c74:	4632      	mov	r2, r6
     c76:	2118      	movs	r1, #24
     c78:	4d09      	ldr	r5, [pc, #36]	; (ca0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x40>)
     c7a:	47a8      	blx	r5
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
     c7c:	4b09      	ldr	r3, [pc, #36]	; (ca4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x44>)
     c7e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
     c82:	7162      	strb	r2, [r4, #5]
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
     c84:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
     c88:	71a2      	strb	r2, [r4, #6]
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
     c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
     c8e:	71e3      	strb	r3, [r4, #7]
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
     c90:	4632      	mov	r2, r6
     c92:	212c      	movs	r1, #44	; 0x2c
     c94:	4620      	mov	r0, r4
     c96:	47a8      	blx	r5
     c98:	bd70      	pop	{r4, r5, r6, pc}
     c9a:	bf00      	nop
     c9c:	20000004 	.word	0x20000004
     ca0:	00000be1 	.word	0x00000be1
     ca4:	20000a84 	.word	0x20000a84

00000ca8 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
     ca8:	b538      	push	{r3, r4, r5, lr}
     caa:	4604      	mov	r4, r0
     cac:	460d      	mov	r5, r1

 	  uint8_t p(cmd); 
  open();
     cae:	4b07      	ldr	r3, [pc, #28]	; (ccc <_ZN15Holt_3593_Class9W_CommandEc+0x24>)
     cb0:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
     cb2:	4629      	mov	r1, r5
     cb4:	4620      	mov	r0, r4
     cb6:	4b06      	ldr	r3, [pc, #24]	; (cd0 <_ZN15Holt_3593_Class9W_CommandEc+0x28>)
     cb8:	4798      	blx	r3
  while (!spi->IsSPIReady()) {;}      // Wait for data to come back in.
     cba:	4d06      	ldr	r5, [pc, #24]	; (cd4 <_ZN15Holt_3593_Class9W_CommandEc+0x2c>)
     cbc:	69a0      	ldr	r0, [r4, #24]
     cbe:	47a8      	blx	r5
     cc0:	2800      	cmp	r0, #0
     cc2:	d0fb      	beq.n	cbc <_ZN15Holt_3593_Class9W_CommandEc+0x14>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
     cc4:	4620      	mov	r0, r4
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <_ZN15Holt_3593_Class9W_CommandEc+0x30>)
     cc8:	4798      	blx	r3
     cca:	bd38      	pop	{r3, r4, r5, pc}
     ccc:	00000a01 	.word	0x00000a01
     cd0:	00000a39 	.word	0x00000a39
     cd4:	0000d6a9 	.word	0x0000d6a9
     cd8:	00000a1d 	.word	0x00000a1d

00000cdc <_ZN15Holt_3593_Class14W_CommandValueEhh>:
}

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
     cdc:	b570      	push	{r4, r5, r6, lr}
     cde:	4604      	mov	r4, r0
     ce0:	460d      	mov	r5, r1
     ce2:	4616      	mov	r6, r2

  	
  open();                             // assert the SPI0 /SS strobe
     ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x38>)
     ce6:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
     ce8:	4629      	mov	r1, r5
     cea:	4620      	mov	r0, r4
     cec:	4b0a      	ldr	r3, [pc, #40]	; (d18 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x3c>)
     cee:	4798      	blx	r3
  while (!spi->IsSPIReady());    
     cf0:	4d0a      	ldr	r5, [pc, #40]	; (d1c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>)
     cf2:	69a0      	ldr	r0, [r4, #24]
     cf4:	47a8      	blx	r5
     cf6:	2800      	cmp	r0, #0
     cf8:	d0fb      	beq.n	cf2 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x16>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
     cfa:	4631      	mov	r1, r6
     cfc:	4620      	mov	r0, r4
     cfe:	4b06      	ldr	r3, [pc, #24]	; (d18 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x3c>)
     d00:	4798      	blx	r3
  while (!spi->IsSPIReady());    
     d02:	4d06      	ldr	r5, [pc, #24]	; (d1c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>)
     d04:	69a0      	ldr	r0, [r4, #24]
     d06:	47a8      	blx	r5
     d08:	2800      	cmp	r0, #0
     d0a:	d0fb      	beq.n	d04 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x28>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
     d0c:	4620      	mov	r0, r4
     d0e:	4b04      	ldr	r3, [pc, #16]	; (d20 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x44>)
     d10:	4798      	blx	r3
     d12:	bd70      	pop	{r4, r5, r6, pc}
     d14:	00000a01 	.word	0x00000a01
     d18:	00000a39 	.word	0x00000a39
     d1c:	0000d6a9 	.word	0x0000d6a9
     d20:	00000a1d 	.word	0x00000a1d

00000d24 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
     d24:	b538      	push	{r3, r4, r5, lr}
     d26:	4604      	mov	r4, r0
     d28:	460d      	mov	r5, r1
  unsigned char R_Reg;
	
  open();
     d2a:	4b08      	ldr	r3, [pc, #32]	; (d4c <_ZN15Holt_3593_Class10R_RegisterEc+0x28>)
     d2c:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
     d2e:	2201      	movs	r2, #1
     d30:	4629      	mov	r1, r5
     d32:	4620      	mov	r0, r4
     d34:	4b06      	ldr	r3, [pc, #24]	; (d50 <_ZN15Holt_3593_Class10R_RegisterEc+0x2c>)
     d36:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
     d38:	4620      	mov	r0, r4
     d3a:	4b06      	ldr	r3, [pc, #24]	; (d54 <_ZN15Holt_3593_Class10R_RegisterEc+0x30>)
     d3c:	4798      	blx	r3
     d3e:	4605      	mov	r5, r0
         
  close();
     d40:	4620      	mov	r0, r4
     d42:	4b05      	ldr	r3, [pc, #20]	; (d58 <_ZN15Holt_3593_Class10R_RegisterEc+0x34>)
     d44:	4798      	blx	r3
  return R_Reg;
}
     d46:	4628      	mov	r0, r5
     d48:	bd38      	pop	{r3, r4, r5, pc}
     d4a:	bf00      	nop
     d4c:	00000a01 	.word	0x00000a01
     d50:	00000bbd 	.word	0x00000bbd
     d54:	00000ae1 	.word	0x00000ae1
     d58:	00000a1d 	.word	0x00000a1d

00000d5c <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 {
     d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d5e:	4604      	mov	r4, r0
     d60:	460d      	mov	r5, r1
     d62:	4617      	mov	r7, r2
     d64:	461e      	mov	r6, r3
	 W_Command(RESETCMD);                // Reset the HI-3593
     d66:	2104      	movs	r1, #4
     d68:	4b0c      	ldr	r3, [pc, #48]	; (d9c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x40>)
     d6a:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
     d6c:	462a      	mov	r2, r5
     d6e:	2138      	movs	r1, #56	; 0x38
     d70:	4620      	mov	r0, r4
     d72:	4d0b      	ldr	r5, [pc, #44]	; (da0 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x44>)
     d74:	47a8      	blx	r5
	 cmd |= tflip << 6;                  // TFLIP on
     d76:	f89d 2018 	ldrb.w	r2, [sp, #24]
     d7a:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
     d7e:	f89d 301c 	ldrb.w	r3, [sp, #28]
     d82:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
     d86:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
     d8a:	b2d2      	uxtb	r2, r2
     d8c:	2108      	movs	r1, #8
     d8e:	4620      	mov	r0, r4
     d90:	47a8      	blx	r5
	 return R_Register (R_TSR);
     d92:	2180      	movs	r1, #128	; 0x80
     d94:	4620      	mov	r0, r4
     d96:	4b03      	ldr	r3, [pc, #12]	; (da4 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x48>)
     d98:	4798      	blx	r3
 }
     d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d9c:	00000ca9 	.word	0x00000ca9
     da0:	00000cdd 	.word	0x00000cdd
     da4:	00000d25 	.word	0x00000d25

00000da8 <_ZN15Holt_3593_Class4InitEv>:
 uint8_t	Holt_3593_Class::Init(void){
     da8:	b5f0      	push	{r4, r5, r6, r7, lr}
     daa:	b083      	sub	sp, #12
     dac:	4604      	mov	r4, r0
	  spi->init();
     dae:	6980      	ldr	r0, [r0, #24]
     db0:	4b1b      	ldr	r3, [pc, #108]	; (e20 <_ZN15Holt_3593_Class4InitEv+0x78>)
     db2:	4798      	blx	r3
	 TFLIP );
     db4:	2340      	movs	r3, #64	; 0x40
     db6:	9301      	str	r3, [sp, #4]
     db8:	2300      	movs	r3, #0
     dba:	9300      	str	r3, [sp, #0]
     dbc:	2201      	movs	r2, #1
     dbe:	2104      	movs	r1, #4
     dc0:	4620      	mov	r0, r4
     dc2:	4c18      	ldr	r4, [pc, #96]	; (e24 <_ZN15Holt_3593_Class4InitEv+0x7c>)
     dc4:	47a0      	blx	r4
     dc6:	4f18      	ldr	r7, [pc, #96]	; (e28 <_ZN15Holt_3593_Class4InitEv+0x80>)
     dc8:	1e7a      	subs	r2, r7, #1
     dca:	4b18      	ldr	r3, [pc, #96]	; (e2c <_ZN15Holt_3593_Class4InitEv+0x84>)
     dcc:	371f      	adds	r7, #31
     dce:	f102 0c01 	add.w	ip, r2, #1
		arinc->ar->LabelsArrayRX1[i]=LabelArray_2[i];
     dd2:	f8df e064 	ldr.w	lr, [pc, #100]	; e38 <_ZN15Holt_3593_Class4InitEv+0x90>
		LabelArray_2[i]=LabelArray_1[i];
     dd6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
     dda:	705d      	strb	r5, [r3, #1]
     ddc:	eba2 010c 	sub.w	r1, r2, ip
		arinc->ar->LabelsArrayRX1[i]=LabelArray_2[i];
     de0:	f8de 4000 	ldr.w	r4, [lr]
     de4:	f8d4 62b0 	ldr.w	r6, [r4, #688]	; 0x2b0
     de8:	68b6      	ldr	r6, [r6, #8]
     dea:	5475      	strb	r5, [r6, r1]
		arinc->ar->LabelsArrayRX2[i]=LabelArray_2[i];
     dec:	785e      	ldrb	r6, [r3, #1]
     dee:	f8d4 52b0 	ldr.w	r5, [r4, #688]	; 0x2b0
     df2:	68ed      	ldr	r5, [r5, #12]
     df4:	546e      	strb	r6, [r5, r1]
		arinc->ar->LabelsArrayTX[i]=LabelArray_2[i];
     df6:	f813 5f01 	ldrb.w	r5, [r3, #1]!
     dfa:	f8d4 42b0 	ldr.w	r4, [r4, #688]	; 0x2b0
     dfe:	6864      	ldr	r4, [r4, #4]
     e00:	5465      	strb	r5, [r4, r1]
	for (int i=0;i<32;i++)
     e02:	42ba      	cmp	r2, r7
     e04:	d1e7      	bne.n	dd6 <_ZN15Holt_3593_Class4InitEv+0x2e>
		LabelPriority2[i]=LabelPriority1[i];
     e06:	4b0a      	ldr	r3, [pc, #40]	; (e30 <_ZN15Holt_3593_Class4InitEv+0x88>)
     e08:	4a0a      	ldr	r2, [pc, #40]	; (e34 <_ZN15Holt_3593_Class4InitEv+0x8c>)
     e0a:	7811      	ldrb	r1, [r2, #0]
     e0c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
     e10:	7851      	ldrb	r1, [r2, #1]
     e12:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
     e16:	7892      	ldrb	r2, [r2, #2]
     e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 } 
     e1c:	b003      	add	sp, #12
     e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e20:	0000d57d 	.word	0x0000d57d
     e24:	00000d5d 	.word	0x00000d5d
     e28:	00010d0c 	.word	0x00010d0c
     e2c:	20000a9f 	.word	0x20000a9f
     e30:	20000a84 	.word	0x20000a84
     e34:	20000004 	.word	0x20000004
     e38:	20000a7c 	.word	0x20000a7c

00000e3c <_GLOBAL__sub_I_LabelArray_2>:
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
}
     e3c:	b510      	push	{r4, lr}
static SPI_Syn_Class	staticSPI(&SPI_HI3593);
     e3e:	4c05      	ldr	r4, [pc, #20]	; (e54 <_GLOBAL__sub_I_LabelArray_2+0x18>)
     e40:	4905      	ldr	r1, [pc, #20]	; (e58 <_GLOBAL__sub_I_LabelArray_2+0x1c>)
     e42:	4620      	mov	r0, r4
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <_GLOBAL__sub_I_LabelArray_2+0x20>)
     e46:	4798      	blx	r3
     e48:	4a05      	ldr	r2, [pc, #20]	; (e60 <_GLOBAL__sub_I_LabelArray_2+0x24>)
     e4a:	4906      	ldr	r1, [pc, #24]	; (e64 <_GLOBAL__sub_I_LabelArray_2+0x28>)
     e4c:	4620      	mov	r0, r4
     e4e:	4b06      	ldr	r3, [pc, #24]	; (e68 <_GLOBAL__sub_I_LabelArray_2+0x2c>)
     e50:	4798      	blx	r3
     e52:	bd10      	pop	{r4, pc}
     e54:	20000a84 	.word	0x20000a84
     e58:	20001410 	.word	0x20001410
     e5c:	0000d541 	.word	0x0000d541
     e60:	20000000 	.word	0x20000000
     e64:	0000d569 	.word	0x0000d569
     e68:	0000e325 	.word	0x0000e325

00000e6c <_ZL11ARINCTimeUpPK10timer_task>:
#include "ARINC_Handler_Class.h"

static bool arincTXTimeUP=false;

static void ARINCTimeUp(const struct timer_task *const timer_task){
	arincTXTimeUP=true;
     e6c:	2201      	movs	r2, #1
     e6e:	4b01      	ldr	r3, [pc, #4]	; (e74 <_ZL11ARINCTimeUpPK10timer_task+0x8>)
     e70:	701a      	strb	r2, [r3, #0]
     e72:	4770      	bx	lr
     e74:	20000ac7 	.word	0x20000ac7

00000e78 <main>:
}


int main(void)
{
     e78:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	/*bool gotNewTemperature=false;*/
	atmel_start_init();
     e7a:	4b14      	ldr	r3, [pc, #80]	; (ecc <main+0x54>)
     e7c:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     e7e:	20c8      	movs	r0, #200	; 0xc8
     e80:	4b13      	ldr	r3, [pc, #76]	; (ed0 <main+0x58>)
     e82:	4798      	blx	r3
	
	arinc->Init();
     e84:	4b13      	ldr	r3, [pc, #76]	; (ed4 <main+0x5c>)
     e86:	6818      	ldr	r0, [r3, #0]
     e88:	4b13      	ldr	r3, [pc, #76]	; (ed8 <main+0x60>)
     e8a:	4798      	blx	r3
	arincTimer.Start_oneShot_task(FUNC_PTR(ARINCTimeUp),500);
     e8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     e90:	4912      	ldr	r1, [pc, #72]	; (edc <main+0x64>)
     e92:	4813      	ldr	r0, [pc, #76]	; (ee0 <main+0x68>)
     e94:	4b13      	ldr	r3, [pc, #76]	; (ee4 <main+0x6c>)
     e96:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
		if (arincTXTimeUP)
     e98:	4c13      	ldr	r4, [pc, #76]	; (ee8 <main+0x70>)
			arincTimer.Start_oneShot_task(FUNC_PTR(ARINCTimeUp),500);
			
		} 
		else
		{
			if (arinc->R1GotMessage())
     e9a:	4d0e      	ldr	r5, [pc, #56]	; (ed4 <main+0x5c>)
     e9c:	4e13      	ldr	r6, [pc, #76]	; (eec <main+0x74>)
     e9e:	e002      	b.n	ea6 <main+0x2e>
     ea0:	6828      	ldr	r0, [r5, #0]
     ea2:	47b0      	blx	r6
     ea4:	b970      	cbnz	r0, ec4 <main+0x4c>
		if (arincTXTimeUP)
     ea6:	7823      	ldrb	r3, [r4, #0]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d0f9      	beq.n	ea0 <main+0x28>
			arinc->PollData();
     eac:	6828      	ldr	r0, [r5, #0]
     eae:	4b10      	ldr	r3, [pc, #64]	; (ef0 <main+0x78>)
     eb0:	4798      	blx	r3
			arincTXTimeUP=false;
     eb2:	2300      	movs	r3, #0
     eb4:	7023      	strb	r3, [r4, #0]
			arincTimer.Start_oneShot_task(FUNC_PTR(ARINCTimeUp),500);
     eb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     eba:	4908      	ldr	r1, [pc, #32]	; (edc <main+0x64>)
     ebc:	4808      	ldr	r0, [pc, #32]	; (ee0 <main+0x68>)
     ebe:	4b09      	ldr	r3, [pc, #36]	; (ee4 <main+0x6c>)
     ec0:	4798      	blx	r3
     ec2:	e7f0      	b.n	ea6 <main+0x2e>
			{
				arinc->HandleCommunication();
     ec4:	6828      	ldr	r0, [r5, #0]
     ec6:	4b0b      	ldr	r3, [pc, #44]	; (ef4 <main+0x7c>)
     ec8:	4798      	blx	r3
     eca:	e7ec      	b.n	ea6 <main+0x2e>
     ecc:	00000f09 	.word	0x00000f09
     ed0:	000026a1 	.word	0x000026a1
     ed4:	20000a7c 	.word	0x20000a7c
     ed8:	000004e9 	.word	0x000004e9
     edc:	00000e6d 	.word	0x00000e6d
     ee0:	200012d8 	.word	0x200012d8
     ee4:	0000d881 	.word	0x0000d881
     ee8:	20000ac7 	.word	0x20000ac7
     eec:	00000505 	.word	0x00000505
     ef0:	0000052d 	.word	0x0000052d
     ef4:	00000511 	.word	0x00000511

00000ef8 <_ZN14Protocol_ClassD2Ev>:
#include "Protocol_Class.h"
#include "stdlib.h"
#include "math.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
     ef8:	680a      	ldr	r2, [r1, #0]
     efa:	6002      	str	r2, [r0, #0]
     efc:	6849      	ldr	r1, [r1, #4]
     efe:	f852 2c0c 	ldr.w	r2, [r2, #-12]
     f02:	5081      	str	r1, [r0, r2]
{
} //~Protocol_Class
     f04:	4770      	bx	lr
	...

00000f08 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     f08:	b580      	push	{r7, lr}
     f0a:	af00      	add	r7, sp, #0
	system_init();
     f0c:	4b03      	ldr	r3, [pc, #12]	; (f1c <atmel_start_init+0x14>)
     f0e:	4798      	blx	r3
	usb_init();
     f10:	4b03      	ldr	r3, [pc, #12]	; (f20 <atmel_start_init+0x18>)
     f12:	4798      	blx	r3
	spi_nor_flash_init();
     f14:	4b03      	ldr	r3, [pc, #12]	; (f24 <atmel_start_init+0x1c>)
     f16:	4798      	blx	r3
}
     f18:	bf00      	nop
     f1a:	bd80      	pop	{r7, pc}
     f1c:	00002291 	.word	0x00002291
     f20:	0000b6e1 	.word	0x0000b6e1
     f24:	0000b675 	.word	0x0000b675

00000f28 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     f28:	b480      	push	{r7}
     f2a:	b085      	sub	sp, #20
     f2c:	af00      	add	r7, sp, #0
     f2e:	60f8      	str	r0, [r7, #12]
     f30:	460b      	mov	r3, r1
     f32:	607a      	str	r2, [r7, #4]
     f34:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     f36:	7afa      	ldrb	r2, [r7, #11]
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	3220      	adds	r2, #32
     f3c:	6879      	ldr	r1, [r7, #4]
     f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     f42:	bf00      	nop
     f44:	3714      	adds	r7, #20
     f46:	46bd      	mov	sp, r7
     f48:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4c:	4770      	bx	lr

00000f4e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     f4e:	b480      	push	{r7}
     f50:	b083      	sub	sp, #12
     f52:	af00      	add	r7, sp, #0
     f54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	691b      	ldr	r3, [r3, #16]
     f5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f62:	bf00      	nop
     f64:	370c      	adds	r7, #12
     f66:	46bd      	mov	sp, r7
     f68:	f85d 7b04 	ldr.w	r7, [sp], #4
     f6c:	4770      	bx	lr

00000f6e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     f6e:	b480      	push	{r7}
     f70:	b083      	sub	sp, #12
     f72:	af00      	add	r7, sp, #0
     f74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	691b      	ldr	r3, [r3, #16]
     f7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f82:	bf00      	nop
     f84:	370c      	adds	r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8c:	4770      	bx	lr

00000f8e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     f8e:	b480      	push	{r7}
     f90:	b083      	sub	sp, #12
     f92:	af00      	add	r7, sp, #0
     f94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	691b      	ldr	r3, [r3, #16]
     f9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fa2:	bf00      	nop
     fa4:	370c      	adds	r7, #12
     fa6:	46bd      	mov	sp, r7
     fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fac:	4770      	bx	lr

00000fae <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     fae:	b480      	push	{r7}
     fb0:	b083      	sub	sp, #12
     fb2:	af00      	add	r7, sp, #0
     fb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	691b      	ldr	r3, [r3, #16]
     fba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fc2:	bf00      	nop
     fc4:	370c      	adds	r7, #12
     fc6:	46bd      	mov	sp, r7
     fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fcc:	4770      	bx	lr

00000fce <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     fce:	b480      	push	{r7}
     fd0:	b083      	sub	sp, #12
     fd2:	af00      	add	r7, sp, #0
     fd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	695b      	ldr	r3, [r3, #20]
     fda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fe2:	bf00      	nop
     fe4:	370c      	adds	r7, #12
     fe6:	46bd      	mov	sp, r7
     fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fec:	4770      	bx	lr

00000fee <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     fee:	b480      	push	{r7}
     ff0:	b083      	sub	sp, #12
     ff2:	af00      	add	r7, sp, #0
     ff4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	695b      	ldr	r3, [r3, #20]
     ffa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1002:	bf00      	nop
    1004:	370c      	adds	r7, #12
    1006:	46bd      	mov	sp, r7
    1008:	f85d 7b04 	ldr.w	r7, [sp], #4
    100c:	4770      	bx	lr

0000100e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    100e:	b480      	push	{r7}
    1010:	b083      	sub	sp, #12
    1012:	af00      	add	r7, sp, #0
    1014:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	695b      	ldr	r3, [r3, #20]
    101a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1022:	bf00      	nop
    1024:	370c      	adds	r7, #12
    1026:	46bd      	mov	sp, r7
    1028:	f85d 7b04 	ldr.w	r7, [sp], #4
    102c:	4770      	bx	lr

0000102e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    102e:	b480      	push	{r7}
    1030:	b083      	sub	sp, #12
    1032:	af00      	add	r7, sp, #0
    1034:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	695b      	ldr	r3, [r3, #20]
    103a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1042:	bf00      	nop
    1044:	370c      	adds	r7, #12
    1046:	46bd      	mov	sp, r7
    1048:	f85d 7b04 	ldr.w	r7, [sp], #4
    104c:	4770      	bx	lr

0000104e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    104e:	b480      	push	{r7}
    1050:	b083      	sub	sp, #12
    1052:	af00      	add	r7, sp, #0
    1054:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	695b      	ldr	r3, [r3, #20]
    105a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1062:	bf00      	nop
    1064:	370c      	adds	r7, #12
    1066:	46bd      	mov	sp, r7
    1068:	f85d 7b04 	ldr.w	r7, [sp], #4
    106c:	4770      	bx	lr

0000106e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    106e:	b480      	push	{r7}
    1070:	b083      	sub	sp, #12
    1072:	af00      	add	r7, sp, #0
    1074:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	699b      	ldr	r3, [r3, #24]
    107a:	f043 0201 	orr.w	r2, r3, #1
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1082:	bf00      	nop
    1084:	370c      	adds	r7, #12
    1086:	46bd      	mov	sp, r7
    1088:	f85d 7b04 	ldr.w	r7, [sp], #4
    108c:	4770      	bx	lr

0000108e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    108e:	b480      	push	{r7}
    1090:	b083      	sub	sp, #12
    1092:	af00      	add	r7, sp, #0
    1094:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	699b      	ldr	r3, [r3, #24]
    109a:	f043 0202 	orr.w	r2, r3, #2
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10a2:	bf00      	nop
    10a4:	370c      	adds	r7, #12
    10a6:	46bd      	mov	sp, r7
    10a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ac:	4770      	bx	lr

000010ae <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    10ae:	b480      	push	{r7}
    10b0:	b083      	sub	sp, #12
    10b2:	af00      	add	r7, sp, #0
    10b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	699b      	ldr	r3, [r3, #24]
    10ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10c2:	bf00      	nop
    10c4:	370c      	adds	r7, #12
    10c6:	46bd      	mov	sp, r7
    10c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10cc:	4770      	bx	lr

000010ce <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    10ce:	b480      	push	{r7}
    10d0:	b083      	sub	sp, #12
    10d2:	af00      	add	r7, sp, #0
    10d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	699b      	ldr	r3, [r3, #24]
    10da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10e2:	bf00      	nop
    10e4:	370c      	adds	r7, #12
    10e6:	46bd      	mov	sp, r7
    10e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ec:	4770      	bx	lr

000010ee <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    10ee:	b480      	push	{r7}
    10f0:	b083      	sub	sp, #12
    10f2:	af00      	add	r7, sp, #0
    10f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	699b      	ldr	r3, [r3, #24]
    10fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1102:	bf00      	nop
    1104:	370c      	adds	r7, #12
    1106:	46bd      	mov	sp, r7
    1108:	f85d 7b04 	ldr.w	r7, [sp], #4
    110c:	4770      	bx	lr

0000110e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    110e:	b480      	push	{r7}
    1110:	b083      	sub	sp, #12
    1112:	af00      	add	r7, sp, #0
    1114:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	699b      	ldr	r3, [r3, #24]
    111a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1122:	bf00      	nop
    1124:	370c      	adds	r7, #12
    1126:	46bd      	mov	sp, r7
    1128:	f85d 7b04 	ldr.w	r7, [sp], #4
    112c:	4770      	bx	lr

0000112e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    112e:	b480      	push	{r7}
    1130:	b083      	sub	sp, #12
    1132:	af00      	add	r7, sp, #0
    1134:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	69db      	ldr	r3, [r3, #28]
    113a:	f043 0220 	orr.w	r2, r3, #32
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1142:	bf00      	nop
    1144:	370c      	adds	r7, #12
    1146:	46bd      	mov	sp, r7
    1148:	f85d 7b04 	ldr.w	r7, [sp], #4
    114c:	4770      	bx	lr

0000114e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    114e:	b480      	push	{r7}
    1150:	b083      	sub	sp, #12
    1152:	af00      	add	r7, sp, #0
    1154:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	69db      	ldr	r3, [r3, #28]
    115a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1162:	bf00      	nop
    1164:	370c      	adds	r7, #12
    1166:	46bd      	mov	sp, r7
    1168:	f85d 7b04 	ldr.w	r7, [sp], #4
    116c:	4770      	bx	lr

0000116e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    116e:	b480      	push	{r7}
    1170:	b083      	sub	sp, #12
    1172:	af00      	add	r7, sp, #0
    1174:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	69db      	ldr	r3, [r3, #28]
    117a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1182:	bf00      	nop
    1184:	370c      	adds	r7, #12
    1186:	46bd      	mov	sp, r7
    1188:	f85d 7b04 	ldr.w	r7, [sp], #4
    118c:	4770      	bx	lr

0000118e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    118e:	b480      	push	{r7}
    1190:	b083      	sub	sp, #12
    1192:	af00      	add	r7, sp, #0
    1194:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	6a1b      	ldr	r3, [r3, #32]
    119a:	f043 0201 	orr.w	r2, r3, #1
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11a2:	bf00      	nop
    11a4:	370c      	adds	r7, #12
    11a6:	46bd      	mov	sp, r7
    11a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ac:	4770      	bx	lr

000011ae <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    11ae:	b480      	push	{r7}
    11b0:	b083      	sub	sp, #12
    11b2:	af00      	add	r7, sp, #0
    11b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	6a1b      	ldr	r3, [r3, #32]
    11ba:	f043 0202 	orr.w	r2, r3, #2
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11c2:	bf00      	nop
    11c4:	370c      	adds	r7, #12
    11c6:	46bd      	mov	sp, r7
    11c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11cc:	4770      	bx	lr

000011ce <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    11ce:	b480      	push	{r7}
    11d0:	b083      	sub	sp, #12
    11d2:	af00      	add	r7, sp, #0
    11d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	6a1b      	ldr	r3, [r3, #32]
    11da:	f043 0204 	orr.w	r2, r3, #4
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11e2:	bf00      	nop
    11e4:	370c      	adds	r7, #12
    11e6:	46bd      	mov	sp, r7
    11e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ec:	4770      	bx	lr

000011ee <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    11ee:	b480      	push	{r7}
    11f0:	b083      	sub	sp, #12
    11f2:	af00      	add	r7, sp, #0
    11f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	6a1b      	ldr	r3, [r3, #32]
    11fa:	f043 0208 	orr.w	r2, r3, #8
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1202:	bf00      	nop
    1204:	370c      	adds	r7, #12
    1206:	46bd      	mov	sp, r7
    1208:	f85d 7b04 	ldr.w	r7, [sp], #4
    120c:	4770      	bx	lr

0000120e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    120e:	b480      	push	{r7}
    1210:	b083      	sub	sp, #12
    1212:	af00      	add	r7, sp, #0
    1214:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	6a1b      	ldr	r3, [r3, #32]
    121a:	f043 0220 	orr.w	r2, r3, #32
    121e:	687b      	ldr	r3, [r7, #4]
    1220:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1222:	bf00      	nop
    1224:	370c      	adds	r7, #12
    1226:	46bd      	mov	sp, r7
    1228:	f85d 7b04 	ldr.w	r7, [sp], #4
    122c:	4770      	bx	lr

0000122e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    122e:	b480      	push	{r7}
    1230:	b083      	sub	sp, #12
    1232:	af00      	add	r7, sp, #0
    1234:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	6a1b      	ldr	r3, [r3, #32]
    123a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    123e:	687b      	ldr	r3, [r7, #4]
    1240:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1242:	bf00      	nop
    1244:	370c      	adds	r7, #12
    1246:	46bd      	mov	sp, r7
    1248:	f85d 7b04 	ldr.w	r7, [sp], #4
    124c:	4770      	bx	lr

0000124e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    124e:	b480      	push	{r7}
    1250:	b085      	sub	sp, #20
    1252:	af00      	add	r7, sp, #0
    1254:	60f8      	str	r0, [r7, #12]
    1256:	460b      	mov	r3, r1
    1258:	607a      	str	r2, [r7, #4]
    125a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    125c:	7afb      	ldrb	r3, [r7, #11]
    125e:	68fa      	ldr	r2, [r7, #12]
    1260:	01db      	lsls	r3, r3, #7
    1262:	4413      	add	r3, r2
    1264:	3308      	adds	r3, #8
    1266:	687a      	ldr	r2, [r7, #4]
    1268:	601a      	str	r2, [r3, #0]
}
    126a:	bf00      	nop
    126c:	3714      	adds	r7, #20
    126e:	46bd      	mov	sp, r7
    1270:	f85d 7b04 	ldr.w	r7, [sp], #4
    1274:	4770      	bx	lr

00001276 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1276:	b480      	push	{r7}
    1278:	b085      	sub	sp, #20
    127a:	af00      	add	r7, sp, #0
    127c:	60f8      	str	r0, [r7, #12]
    127e:	460b      	mov	r3, r1
    1280:	607a      	str	r2, [r7, #4]
    1282:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1284:	7afb      	ldrb	r3, [r7, #11]
    1286:	68fa      	ldr	r2, [r7, #12]
    1288:	01db      	lsls	r3, r3, #7
    128a:	4413      	add	r3, r2
    128c:	3304      	adds	r3, #4
    128e:	687a      	ldr	r2, [r7, #4]
    1290:	601a      	str	r2, [r3, #0]
}
    1292:	bf00      	nop
    1294:	3714      	adds	r7, #20
    1296:	46bd      	mov	sp, r7
    1298:	f85d 7b04 	ldr.w	r7, [sp], #4
    129c:	4770      	bx	lr

0000129e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    129e:	b480      	push	{r7}
    12a0:	b085      	sub	sp, #20
    12a2:	af00      	add	r7, sp, #0
    12a4:	60f8      	str	r0, [r7, #12]
    12a6:	460b      	mov	r3, r1
    12a8:	607a      	str	r2, [r7, #4]
    12aa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12ac:	7afb      	ldrb	r3, [r7, #11]
    12ae:	68fa      	ldr	r2, [r7, #12]
    12b0:	01db      	lsls	r3, r3, #7
    12b2:	4413      	add	r3, r2
    12b4:	3318      	adds	r3, #24
    12b6:	687a      	ldr	r2, [r7, #4]
    12b8:	601a      	str	r2, [r3, #0]
}
    12ba:	bf00      	nop
    12bc:	3714      	adds	r7, #20
    12be:	46bd      	mov	sp, r7
    12c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    12c4:	4770      	bx	lr

000012c6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    12c6:	b480      	push	{r7}
    12c8:	b085      	sub	sp, #20
    12ca:	af00      	add	r7, sp, #0
    12cc:	60f8      	str	r0, [r7, #12]
    12ce:	460b      	mov	r3, r1
    12d0:	607a      	str	r2, [r7, #4]
    12d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12d4:	7afb      	ldrb	r3, [r7, #11]
    12d6:	68fa      	ldr	r2, [r7, #12]
    12d8:	01db      	lsls	r3, r3, #7
    12da:	4413      	add	r3, r2
    12dc:	3314      	adds	r3, #20
    12de:	687a      	ldr	r2, [r7, #4]
    12e0:	601a      	str	r2, [r3, #0]
}
    12e2:	bf00      	nop
    12e4:	3714      	adds	r7, #20
    12e6:	46bd      	mov	sp, r7
    12e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ec:	4770      	bx	lr

000012ee <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    12ee:	b480      	push	{r7}
    12f0:	b085      	sub	sp, #20
    12f2:	af00      	add	r7, sp, #0
    12f4:	6078      	str	r0, [r7, #4]
    12f6:	4608      	mov	r0, r1
    12f8:	4611      	mov	r1, r2
    12fa:	461a      	mov	r2, r3
    12fc:	4603      	mov	r3, r0
    12fe:	70fb      	strb	r3, [r7, #3]
    1300:	460b      	mov	r3, r1
    1302:	70bb      	strb	r3, [r7, #2]
    1304:	4613      	mov	r3, r2
    1306:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1308:	78fa      	ldrb	r2, [r7, #3]
    130a:	78bb      	ldrb	r3, [r7, #2]
    130c:	6879      	ldr	r1, [r7, #4]
    130e:	01d2      	lsls	r2, r2, #7
    1310:	440a      	add	r2, r1
    1312:	4413      	add	r3, r2
    1314:	3330      	adds	r3, #48	; 0x30
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    131a:	7bfb      	ldrb	r3, [r7, #15]
    131c:	f023 030f 	bic.w	r3, r3, #15
    1320:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1322:	787b      	ldrb	r3, [r7, #1]
    1324:	f003 030f 	and.w	r3, r3, #15
    1328:	b2da      	uxtb	r2, r3
    132a:	7bfb      	ldrb	r3, [r7, #15]
    132c:	4313      	orrs	r3, r2
    132e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1330:	78fa      	ldrb	r2, [r7, #3]
    1332:	78bb      	ldrb	r3, [r7, #2]
    1334:	6879      	ldr	r1, [r7, #4]
    1336:	01d2      	lsls	r2, r2, #7
    1338:	440a      	add	r2, r1
    133a:	4413      	add	r3, r2
    133c:	3330      	adds	r3, #48	; 0x30
    133e:	7bfa      	ldrb	r2, [r7, #15]
    1340:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1342:	bf00      	nop
    1344:	3714      	adds	r7, #20
    1346:	46bd      	mov	sp, r7
    1348:	f85d 7b04 	ldr.w	r7, [sp], #4
    134c:	4770      	bx	lr

0000134e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    134e:	b480      	push	{r7}
    1350:	b085      	sub	sp, #20
    1352:	af00      	add	r7, sp, #0
    1354:	6078      	str	r0, [r7, #4]
    1356:	4608      	mov	r0, r1
    1358:	4611      	mov	r1, r2
    135a:	461a      	mov	r2, r3
    135c:	4603      	mov	r3, r0
    135e:	70fb      	strb	r3, [r7, #3]
    1360:	460b      	mov	r3, r1
    1362:	70bb      	strb	r3, [r7, #2]
    1364:	4613      	mov	r3, r2
    1366:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1368:	78fa      	ldrb	r2, [r7, #3]
    136a:	78bb      	ldrb	r3, [r7, #2]
    136c:	6879      	ldr	r1, [r7, #4]
    136e:	01d2      	lsls	r2, r2, #7
    1370:	440a      	add	r2, r1
    1372:	4413      	add	r3, r2
    1374:	3330      	adds	r3, #48	; 0x30
    1376:	781b      	ldrb	r3, [r3, #0]
    1378:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    137a:	7bfb      	ldrb	r3, [r7, #15]
    137c:	f003 030f 	and.w	r3, r3, #15
    1380:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1382:	787b      	ldrb	r3, [r7, #1]
    1384:	011b      	lsls	r3, r3, #4
    1386:	b2da      	uxtb	r2, r3
    1388:	7bfb      	ldrb	r3, [r7, #15]
    138a:	4313      	orrs	r3, r2
    138c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    138e:	78fa      	ldrb	r2, [r7, #3]
    1390:	78bb      	ldrb	r3, [r7, #2]
    1392:	6879      	ldr	r1, [r7, #4]
    1394:	01d2      	lsls	r2, r2, #7
    1396:	440a      	add	r2, r1
    1398:	4413      	add	r3, r2
    139a:	3330      	adds	r3, #48	; 0x30
    139c:	7bfa      	ldrb	r2, [r7, #15]
    139e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    13a0:	bf00      	nop
    13a2:	3714      	adds	r7, #20
    13a4:	46bd      	mov	sp, r7
    13a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13aa:	4770      	bx	lr

000013ac <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    13ac:	b480      	push	{r7}
    13ae:	b085      	sub	sp, #20
    13b0:	af00      	add	r7, sp, #0
    13b2:	6078      	str	r0, [r7, #4]
    13b4:	4608      	mov	r0, r1
    13b6:	4611      	mov	r1, r2
    13b8:	461a      	mov	r2, r3
    13ba:	4603      	mov	r3, r0
    13bc:	70fb      	strb	r3, [r7, #3]
    13be:	460b      	mov	r3, r1
    13c0:	70bb      	strb	r3, [r7, #2]
    13c2:	4613      	mov	r3, r2
    13c4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13c6:	78fa      	ldrb	r2, [r7, #3]
    13c8:	78bb      	ldrb	r3, [r7, #2]
    13ca:	6879      	ldr	r1, [r7, #4]
    13cc:	01d2      	lsls	r2, r2, #7
    13ce:	440a      	add	r2, r1
    13d0:	4413      	add	r3, r2
    13d2:	3340      	adds	r3, #64	; 0x40
    13d4:	781b      	ldrb	r3, [r3, #0]
    13d6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    13d8:	7bfb      	ldrb	r3, [r7, #15]
    13da:	f023 0301 	bic.w	r3, r3, #1
    13de:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13e0:	787a      	ldrb	r2, [r7, #1]
    13e2:	7bfb      	ldrb	r3, [r7, #15]
    13e4:	4313      	orrs	r3, r2
    13e6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13e8:	78fa      	ldrb	r2, [r7, #3]
    13ea:	78bb      	ldrb	r3, [r7, #2]
    13ec:	6879      	ldr	r1, [r7, #4]
    13ee:	01d2      	lsls	r2, r2, #7
    13f0:	440a      	add	r2, r1
    13f2:	4413      	add	r3, r2
    13f4:	3340      	adds	r3, #64	; 0x40
    13f6:	7bfa      	ldrb	r2, [r7, #15]
    13f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    13fa:	bf00      	nop
    13fc:	3714      	adds	r7, #20
    13fe:	46bd      	mov	sp, r7
    1400:	f85d 7b04 	ldr.w	r7, [sp], #4
    1404:	4770      	bx	lr

00001406 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1406:	b490      	push	{r4, r7}
    1408:	b082      	sub	sp, #8
    140a:	af00      	add	r7, sp, #0
    140c:	6078      	str	r0, [r7, #4]
    140e:	460b      	mov	r3, r1
    1410:	70fb      	strb	r3, [r7, #3]
    1412:	4613      	mov	r3, r2
    1414:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1416:	78fa      	ldrb	r2, [r7, #3]
    1418:	78bb      	ldrb	r3, [r7, #2]
    141a:	78f8      	ldrb	r0, [r7, #3]
    141c:	78b9      	ldrb	r1, [r7, #2]
    141e:	687c      	ldr	r4, [r7, #4]
    1420:	01c0      	lsls	r0, r0, #7
    1422:	4420      	add	r0, r4
    1424:	4401      	add	r1, r0
    1426:	3140      	adds	r1, #64	; 0x40
    1428:	7809      	ldrb	r1, [r1, #0]
    142a:	b2c9      	uxtb	r1, r1
    142c:	f041 0104 	orr.w	r1, r1, #4
    1430:	b2c8      	uxtb	r0, r1
    1432:	6879      	ldr	r1, [r7, #4]
    1434:	01d2      	lsls	r2, r2, #7
    1436:	440a      	add	r2, r1
    1438:	4413      	add	r3, r2
    143a:	3340      	adds	r3, #64	; 0x40
    143c:	4602      	mov	r2, r0
    143e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1440:	bf00      	nop
    1442:	3708      	adds	r7, #8
    1444:	46bd      	mov	sp, r7
    1446:	bc90      	pop	{r4, r7}
    1448:	4770      	bx	lr

0000144a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    144a:	b490      	push	{r4, r7}
    144c:	b082      	sub	sp, #8
    144e:	af00      	add	r7, sp, #0
    1450:	6078      	str	r0, [r7, #4]
    1452:	460b      	mov	r3, r1
    1454:	70fb      	strb	r3, [r7, #3]
    1456:	4613      	mov	r3, r2
    1458:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    145a:	78fa      	ldrb	r2, [r7, #3]
    145c:	78bb      	ldrb	r3, [r7, #2]
    145e:	78f8      	ldrb	r0, [r7, #3]
    1460:	78b9      	ldrb	r1, [r7, #2]
    1462:	687c      	ldr	r4, [r7, #4]
    1464:	01c0      	lsls	r0, r0, #7
    1466:	4420      	add	r0, r4
    1468:	4401      	add	r1, r0
    146a:	3140      	adds	r1, #64	; 0x40
    146c:	7809      	ldrb	r1, [r1, #0]
    146e:	b2c9      	uxtb	r1, r1
    1470:	f021 0104 	bic.w	r1, r1, #4
    1474:	b2c8      	uxtb	r0, r1
    1476:	6879      	ldr	r1, [r7, #4]
    1478:	01d2      	lsls	r2, r2, #7
    147a:	440a      	add	r2, r1
    147c:	4413      	add	r3, r2
    147e:	3340      	adds	r3, #64	; 0x40
    1480:	4602      	mov	r2, r0
    1482:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1484:	bf00      	nop
    1486:	3708      	adds	r7, #8
    1488:	46bd      	mov	sp, r7
    148a:	bc90      	pop	{r4, r7}
    148c:	4770      	bx	lr

0000148e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    148e:	b480      	push	{r7}
    1490:	b085      	sub	sp, #20
    1492:	af00      	add	r7, sp, #0
    1494:	60f8      	str	r0, [r7, #12]
    1496:	460b      	mov	r3, r1
    1498:	607a      	str	r2, [r7, #4]
    149a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    149c:	7afb      	ldrb	r3, [r7, #11]
    149e:	68fa      	ldr	r2, [r7, #12]
    14a0:	01db      	lsls	r3, r3, #7
    14a2:	4413      	add	r3, r2
    14a4:	3328      	adds	r3, #40	; 0x28
    14a6:	687a      	ldr	r2, [r7, #4]
    14a8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    14aa:	bf00      	nop
    14ac:	3714      	adds	r7, #20
    14ae:	46bd      	mov	sp, r7
    14b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b4:	4770      	bx	lr
	...

000014b8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	b082      	sub	sp, #8
    14bc:	af00      	add	r7, sp, #0
    14be:	4603      	mov	r3, r0
    14c0:	6039      	str	r1, [r7, #0]
    14c2:	71fb      	strb	r3, [r7, #7]
    14c4:	4613      	mov	r3, r2
    14c6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    14c8:	79bb      	ldrb	r3, [r7, #6]
    14ca:	2b01      	cmp	r3, #1
    14cc:	d01c      	beq.n	1508 <_gpio_set_direction+0x50>
    14ce:	2b02      	cmp	r3, #2
    14d0:	d037      	beq.n	1542 <_gpio_set_direction+0x8a>
    14d2:	2b00      	cmp	r3, #0
    14d4:	d14e      	bne.n	1574 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    14d6:	79fb      	ldrb	r3, [r7, #7]
    14d8:	683a      	ldr	r2, [r7, #0]
    14da:	4619      	mov	r1, r3
    14dc:	482a      	ldr	r0, [pc, #168]	; (1588 <_gpio_set_direction+0xd0>)
    14de:	4b2b      	ldr	r3, [pc, #172]	; (158c <_gpio_set_direction+0xd4>)
    14e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    14e2:	683b      	ldr	r3, [r7, #0]
    14e4:	b29b      	uxth	r3, r3
    14e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    14ea:	79fb      	ldrb	r3, [r7, #7]
    14ec:	4619      	mov	r1, r3
    14ee:	4826      	ldr	r0, [pc, #152]	; (1588 <_gpio_set_direction+0xd0>)
    14f0:	4b27      	ldr	r3, [pc, #156]	; (1590 <_gpio_set_direction+0xd8>)
    14f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    14f4:	683b      	ldr	r3, [r7, #0]
    14f6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    14f8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    14fc:	79fb      	ldrb	r3, [r7, #7]
    14fe:	4619      	mov	r1, r3
    1500:	4821      	ldr	r0, [pc, #132]	; (1588 <_gpio_set_direction+0xd0>)
    1502:	4b23      	ldr	r3, [pc, #140]	; (1590 <_gpio_set_direction+0xd8>)
    1504:	4798      	blx	r3
		break;
    1506:	e03a      	b.n	157e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1508:	79fb      	ldrb	r3, [r7, #7]
    150a:	683a      	ldr	r2, [r7, #0]
    150c:	4619      	mov	r1, r3
    150e:	481e      	ldr	r0, [pc, #120]	; (1588 <_gpio_set_direction+0xd0>)
    1510:	4b1e      	ldr	r3, [pc, #120]	; (158c <_gpio_set_direction+0xd4>)
    1512:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1514:	683b      	ldr	r3, [r7, #0]
    1516:	b29b      	uxth	r3, r3
    1518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1520:	79f9      	ldrb	r1, [r7, #7]
    1522:	461a      	mov	r2, r3
    1524:	4818      	ldr	r0, [pc, #96]	; (1588 <_gpio_set_direction+0xd0>)
    1526:	4b1a      	ldr	r3, [pc, #104]	; (1590 <_gpio_set_direction+0xd8>)
    1528:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    152a:	683b      	ldr	r3, [r7, #0]
    152c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    152e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1536:	79f9      	ldrb	r1, [r7, #7]
    1538:	461a      	mov	r2, r3
    153a:	4813      	ldr	r0, [pc, #76]	; (1588 <_gpio_set_direction+0xd0>)
    153c:	4b14      	ldr	r3, [pc, #80]	; (1590 <_gpio_set_direction+0xd8>)
    153e:	4798      	blx	r3
		break;
    1540:	e01d      	b.n	157e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1542:	79fb      	ldrb	r3, [r7, #7]
    1544:	683a      	ldr	r2, [r7, #0]
    1546:	4619      	mov	r1, r3
    1548:	480f      	ldr	r0, [pc, #60]	; (1588 <_gpio_set_direction+0xd0>)
    154a:	4b12      	ldr	r3, [pc, #72]	; (1594 <_gpio_set_direction+0xdc>)
    154c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    154e:	683b      	ldr	r3, [r7, #0]
    1550:	b29b      	uxth	r3, r3
    1552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1556:	79fb      	ldrb	r3, [r7, #7]
    1558:	4619      	mov	r1, r3
    155a:	480b      	ldr	r0, [pc, #44]	; (1588 <_gpio_set_direction+0xd0>)
    155c:	4b0c      	ldr	r3, [pc, #48]	; (1590 <_gpio_set_direction+0xd8>)
    155e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1560:	683b      	ldr	r3, [r7, #0]
    1562:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1564:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1568:	79fb      	ldrb	r3, [r7, #7]
    156a:	4619      	mov	r1, r3
    156c:	4806      	ldr	r0, [pc, #24]	; (1588 <_gpio_set_direction+0xd0>)
    156e:	4b08      	ldr	r3, [pc, #32]	; (1590 <_gpio_set_direction+0xd8>)
    1570:	4798      	blx	r3
		break;
    1572:	e004      	b.n	157e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1574:	2246      	movs	r2, #70	; 0x46
    1576:	4908      	ldr	r1, [pc, #32]	; (1598 <_gpio_set_direction+0xe0>)
    1578:	2000      	movs	r0, #0
    157a:	4b08      	ldr	r3, [pc, #32]	; (159c <_gpio_set_direction+0xe4>)
    157c:	4798      	blx	r3
	}
}
    157e:	bf00      	nop
    1580:	3708      	adds	r7, #8
    1582:	46bd      	mov	sp, r7
    1584:	bd80      	pop	{r7, pc}
    1586:	bf00      	nop
    1588:	41008000 	.word	0x41008000
    158c:	00001277 	.word	0x00001277
    1590:	0000148f 	.word	0x0000148f
    1594:	0000124f 	.word	0x0000124f
    1598:	00010d2c 	.word	0x00010d2c
    159c:	00003c61 	.word	0x00003c61

000015a0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	af00      	add	r7, sp, #0
    15a6:	4603      	mov	r3, r0
    15a8:	6039      	str	r1, [r7, #0]
    15aa:	71fb      	strb	r3, [r7, #7]
    15ac:	4613      	mov	r3, r2
    15ae:	71bb      	strb	r3, [r7, #6]
	if (level) {
    15b0:	79bb      	ldrb	r3, [r7, #6]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d006      	beq.n	15c4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    15b6:	79fb      	ldrb	r3, [r7, #7]
    15b8:	683a      	ldr	r2, [r7, #0]
    15ba:	4619      	mov	r1, r3
    15bc:	4806      	ldr	r0, [pc, #24]	; (15d8 <_gpio_set_level+0x38>)
    15be:	4b07      	ldr	r3, [pc, #28]	; (15dc <_gpio_set_level+0x3c>)
    15c0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    15c2:	e005      	b.n	15d0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    15c4:	79fb      	ldrb	r3, [r7, #7]
    15c6:	683a      	ldr	r2, [r7, #0]
    15c8:	4619      	mov	r1, r3
    15ca:	4803      	ldr	r0, [pc, #12]	; (15d8 <_gpio_set_level+0x38>)
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <_gpio_set_level+0x40>)
    15ce:	4798      	blx	r3
}
    15d0:	bf00      	nop
    15d2:	3708      	adds	r7, #8
    15d4:	46bd      	mov	sp, r7
    15d6:	bd80      	pop	{r7, pc}
    15d8:	41008000 	.word	0x41008000
    15dc:	0000129f 	.word	0x0000129f
    15e0:	000012c7 	.word	0x000012c7

000015e4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	b082      	sub	sp, #8
    15e8:	af00      	add	r7, sp, #0
    15ea:	4603      	mov	r3, r0
    15ec:	71fb      	strb	r3, [r7, #7]
    15ee:	460b      	mov	r3, r1
    15f0:	71bb      	strb	r3, [r7, #6]
    15f2:	4613      	mov	r3, r2
    15f4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    15f6:	797b      	ldrb	r3, [r7, #5]
    15f8:	2b01      	cmp	r3, #1
    15fa:	d00a      	beq.n	1612 <_gpio_set_pin_pull_mode+0x2e>
    15fc:	2b02      	cmp	r3, #2
    15fe:	d01f      	beq.n	1640 <_gpio_set_pin_pull_mode+0x5c>
    1600:	2b00      	cmp	r3, #0
    1602:	d134      	bne.n	166e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1604:	79ba      	ldrb	r2, [r7, #6]
    1606:	79fb      	ldrb	r3, [r7, #7]
    1608:	4619      	mov	r1, r3
    160a:	481e      	ldr	r0, [pc, #120]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    160c:	4b1e      	ldr	r3, [pc, #120]	; (1688 <_gpio_set_pin_pull_mode+0xa4>)
    160e:	4798      	blx	r3
		break;
    1610:	e033      	b.n	167a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1612:	79bb      	ldrb	r3, [r7, #6]
    1614:	2201      	movs	r2, #1
    1616:	409a      	lsls	r2, r3
    1618:	79fb      	ldrb	r3, [r7, #7]
    161a:	4619      	mov	r1, r3
    161c:	4819      	ldr	r0, [pc, #100]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    161e:	4b1b      	ldr	r3, [pc, #108]	; (168c <_gpio_set_pin_pull_mode+0xa8>)
    1620:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1622:	79ba      	ldrb	r2, [r7, #6]
    1624:	79fb      	ldrb	r3, [r7, #7]
    1626:	4619      	mov	r1, r3
    1628:	4816      	ldr	r0, [pc, #88]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    162a:	4b19      	ldr	r3, [pc, #100]	; (1690 <_gpio_set_pin_pull_mode+0xac>)
    162c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    162e:	79bb      	ldrb	r3, [r7, #6]
    1630:	2201      	movs	r2, #1
    1632:	409a      	lsls	r2, r3
    1634:	79fb      	ldrb	r3, [r7, #7]
    1636:	4619      	mov	r1, r3
    1638:	4812      	ldr	r0, [pc, #72]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    163a:	4b16      	ldr	r3, [pc, #88]	; (1694 <_gpio_set_pin_pull_mode+0xb0>)
    163c:	4798      	blx	r3
		break;
    163e:	e01c      	b.n	167a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1640:	79bb      	ldrb	r3, [r7, #6]
    1642:	2201      	movs	r2, #1
    1644:	409a      	lsls	r2, r3
    1646:	79fb      	ldrb	r3, [r7, #7]
    1648:	4619      	mov	r1, r3
    164a:	480e      	ldr	r0, [pc, #56]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    164c:	4b0f      	ldr	r3, [pc, #60]	; (168c <_gpio_set_pin_pull_mode+0xa8>)
    164e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1650:	79ba      	ldrb	r2, [r7, #6]
    1652:	79fb      	ldrb	r3, [r7, #7]
    1654:	4619      	mov	r1, r3
    1656:	480b      	ldr	r0, [pc, #44]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    1658:	4b0d      	ldr	r3, [pc, #52]	; (1690 <_gpio_set_pin_pull_mode+0xac>)
    165a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    165c:	79bb      	ldrb	r3, [r7, #6]
    165e:	2201      	movs	r2, #1
    1660:	409a      	lsls	r2, r3
    1662:	79fb      	ldrb	r3, [r7, #7]
    1664:	4619      	mov	r1, r3
    1666:	4807      	ldr	r0, [pc, #28]	; (1684 <_gpio_set_pin_pull_mode+0xa0>)
    1668:	4b0b      	ldr	r3, [pc, #44]	; (1698 <_gpio_set_pin_pull_mode+0xb4>)
    166a:	4798      	blx	r3
		break;
    166c:	e005      	b.n	167a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    166e:	2289      	movs	r2, #137	; 0x89
    1670:	490a      	ldr	r1, [pc, #40]	; (169c <_gpio_set_pin_pull_mode+0xb8>)
    1672:	2000      	movs	r0, #0
    1674:	4b0a      	ldr	r3, [pc, #40]	; (16a0 <_gpio_set_pin_pull_mode+0xbc>)
    1676:	4798      	blx	r3
		break;
    1678:	bf00      	nop
	}
}
    167a:	bf00      	nop
    167c:	3708      	adds	r7, #8
    167e:	46bd      	mov	sp, r7
    1680:	bd80      	pop	{r7, pc}
    1682:	bf00      	nop
    1684:	41008000 	.word	0x41008000
    1688:	0000144b 	.word	0x0000144b
    168c:	00001277 	.word	0x00001277
    1690:	00001407 	.word	0x00001407
    1694:	0000129f 	.word	0x0000129f
    1698:	000012c7 	.word	0x000012c7
    169c:	00010d2c 	.word	0x00010d2c
    16a0:	00003c61 	.word	0x00003c61

000016a4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    16a4:	b590      	push	{r4, r7, lr}
    16a6:	b085      	sub	sp, #20
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
    16ac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	095b      	lsrs	r3, r3, #5
    16b2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	b2db      	uxtb	r3, r3
    16b8:	f003 031f 	and.w	r3, r3, #31
    16bc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    16be:	683b      	ldr	r3, [r7, #0]
    16c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    16c4:	d106      	bne.n	16d4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    16c6:	7bba      	ldrb	r2, [r7, #14]
    16c8:	7bf9      	ldrb	r1, [r7, #15]
    16ca:	2300      	movs	r3, #0
    16cc:	4812      	ldr	r0, [pc, #72]	; (1718 <_gpio_set_pin_function+0x74>)
    16ce:	4c13      	ldr	r4, [pc, #76]	; (171c <_gpio_set_pin_function+0x78>)
    16d0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    16d2:	e01d      	b.n	1710 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    16d4:	7bba      	ldrb	r2, [r7, #14]
    16d6:	7bf9      	ldrb	r1, [r7, #15]
    16d8:	2301      	movs	r3, #1
    16da:	480f      	ldr	r0, [pc, #60]	; (1718 <_gpio_set_pin_function+0x74>)
    16dc:	4c0f      	ldr	r4, [pc, #60]	; (171c <_gpio_set_pin_function+0x78>)
    16de:	47a0      	blx	r4
		if (pin & 1) {
    16e0:	7bbb      	ldrb	r3, [r7, #14]
    16e2:	f003 0301 	and.w	r3, r3, #1
    16e6:	2b00      	cmp	r3, #0
    16e8:	d009      	beq.n	16fe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    16ea:	7bbb      	ldrb	r3, [r7, #14]
    16ec:	085b      	lsrs	r3, r3, #1
    16ee:	b2da      	uxtb	r2, r3
    16f0:	683b      	ldr	r3, [r7, #0]
    16f2:	b2db      	uxtb	r3, r3
    16f4:	7bf9      	ldrb	r1, [r7, #15]
    16f6:	4808      	ldr	r0, [pc, #32]	; (1718 <_gpio_set_pin_function+0x74>)
    16f8:	4c09      	ldr	r4, [pc, #36]	; (1720 <_gpio_set_pin_function+0x7c>)
    16fa:	47a0      	blx	r4
}
    16fc:	e008      	b.n	1710 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    16fe:	7bbb      	ldrb	r3, [r7, #14]
    1700:	085b      	lsrs	r3, r3, #1
    1702:	b2da      	uxtb	r2, r3
    1704:	683b      	ldr	r3, [r7, #0]
    1706:	b2db      	uxtb	r3, r3
    1708:	7bf9      	ldrb	r1, [r7, #15]
    170a:	4803      	ldr	r0, [pc, #12]	; (1718 <_gpio_set_pin_function+0x74>)
    170c:	4c05      	ldr	r4, [pc, #20]	; (1724 <_gpio_set_pin_function+0x80>)
    170e:	47a0      	blx	r4
}
    1710:	bf00      	nop
    1712:	3714      	adds	r7, #20
    1714:	46bd      	mov	sp, r7
    1716:	bd90      	pop	{r4, r7, pc}
    1718:	41008000 	.word	0x41008000
    171c:	000013ad 	.word	0x000013ad
    1720:	0000134f 	.word	0x0000134f
    1724:	000012ef 	.word	0x000012ef

00001728 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1728:	b580      	push	{r7, lr}
    172a:	b082      	sub	sp, #8
    172c:	af00      	add	r7, sp, #0
    172e:	4603      	mov	r3, r0
    1730:	460a      	mov	r2, r1
    1732:	71fb      	strb	r3, [r7, #7]
    1734:	4613      	mov	r3, r2
    1736:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1738:	79fb      	ldrb	r3, [r7, #7]
    173a:	095b      	lsrs	r3, r3, #5
    173c:	b2d8      	uxtb	r0, r3
    173e:	79fb      	ldrb	r3, [r7, #7]
    1740:	f003 031f 	and.w	r3, r3, #31
    1744:	b2db      	uxtb	r3, r3
    1746:	79ba      	ldrb	r2, [r7, #6]
    1748:	4619      	mov	r1, r3
    174a:	4b03      	ldr	r3, [pc, #12]	; (1758 <gpio_set_pin_pull_mode+0x30>)
    174c:	4798      	blx	r3
}
    174e:	bf00      	nop
    1750:	3708      	adds	r7, #8
    1752:	46bd      	mov	sp, r7
    1754:	bd80      	pop	{r7, pc}
    1756:	bf00      	nop
    1758:	000015e5 	.word	0x000015e5

0000175c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    175c:	b580      	push	{r7, lr}
    175e:	b082      	sub	sp, #8
    1760:	af00      	add	r7, sp, #0
    1762:	6078      	str	r0, [r7, #4]
    1764:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1766:	6839      	ldr	r1, [r7, #0]
    1768:	6878      	ldr	r0, [r7, #4]
    176a:	4b03      	ldr	r3, [pc, #12]	; (1778 <gpio_set_pin_function+0x1c>)
    176c:	4798      	blx	r3
}
    176e:	bf00      	nop
    1770:	3708      	adds	r7, #8
    1772:	46bd      	mov	sp, r7
    1774:	bd80      	pop	{r7, pc}
    1776:	bf00      	nop
    1778:	000016a5 	.word	0x000016a5

0000177c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
    1782:	4603      	mov	r3, r0
    1784:	460a      	mov	r2, r1
    1786:	71fb      	strb	r3, [r7, #7]
    1788:	4613      	mov	r3, r2
    178a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    178c:	79fb      	ldrb	r3, [r7, #7]
    178e:	095b      	lsrs	r3, r3, #5
    1790:	b2d8      	uxtb	r0, r3
    1792:	79fb      	ldrb	r3, [r7, #7]
    1794:	f003 031f 	and.w	r3, r3, #31
    1798:	2201      	movs	r2, #1
    179a:	fa02 f303 	lsl.w	r3, r2, r3
    179e:	79ba      	ldrb	r2, [r7, #6]
    17a0:	4619      	mov	r1, r3
    17a2:	4b03      	ldr	r3, [pc, #12]	; (17b0 <gpio_set_pin_direction+0x34>)
    17a4:	4798      	blx	r3
}
    17a6:	bf00      	nop
    17a8:	3708      	adds	r7, #8
    17aa:	46bd      	mov	sp, r7
    17ac:	bd80      	pop	{r7, pc}
    17ae:	bf00      	nop
    17b0:	000014b9 	.word	0x000014b9

000017b4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	b082      	sub	sp, #8
    17b8:	af00      	add	r7, sp, #0
    17ba:	4603      	mov	r3, r0
    17bc:	460a      	mov	r2, r1
    17be:	71fb      	strb	r3, [r7, #7]
    17c0:	4613      	mov	r3, r2
    17c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    17c4:	79fb      	ldrb	r3, [r7, #7]
    17c6:	095b      	lsrs	r3, r3, #5
    17c8:	b2d8      	uxtb	r0, r3
    17ca:	79fb      	ldrb	r3, [r7, #7]
    17cc:	f003 031f 	and.w	r3, r3, #31
    17d0:	2201      	movs	r2, #1
    17d2:	fa02 f303 	lsl.w	r3, r2, r3
    17d6:	79ba      	ldrb	r2, [r7, #6]
    17d8:	4619      	mov	r1, r3
    17da:	4b03      	ldr	r3, [pc, #12]	; (17e8 <gpio_set_pin_level+0x34>)
    17dc:	4798      	blx	r3
}
    17de:	bf00      	nop
    17e0:	3708      	adds	r7, #8
    17e2:	46bd      	mov	sp, r7
    17e4:	bd80      	pop	{r7, pc}
    17e6:	bf00      	nop
    17e8:	000015a1 	.word	0x000015a1

000017ec <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
	_init_chip();
    17f0:	4b01      	ldr	r3, [pc, #4]	; (17f8 <init_mcu+0xc>)
    17f2:	4798      	blx	r3
}
    17f4:	bf00      	nop
    17f6:	bd80      	pop	{r7, pc}
    17f8:	0000486d 	.word	0x0000486d

000017fc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	b082      	sub	sp, #8
    1800:	af00      	add	r7, sp, #0
    1802:	6078      	str	r0, [r7, #4]
    1804:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	2b00      	cmp	r3, #0
    180a:	d004      	beq.n	1816 <wdt_init+0x1a>
    180c:	683b      	ldr	r3, [r7, #0]
    180e:	2b00      	cmp	r3, #0
    1810:	d001      	beq.n	1816 <wdt_init+0x1a>
    1812:	2301      	movs	r3, #1
    1814:	e000      	b.n	1818 <wdt_init+0x1c>
    1816:	2300      	movs	r3, #0
    1818:	f003 0301 	and.w	r3, r3, #1
    181c:	b2db      	uxtb	r3, r3
    181e:	2248      	movs	r2, #72	; 0x48
    1820:	4907      	ldr	r1, [pc, #28]	; (1840 <wdt_init+0x44>)
    1822:	4618      	mov	r0, r3
    1824:	4b07      	ldr	r3, [pc, #28]	; (1844 <wdt_init+0x48>)
    1826:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	683a      	ldr	r2, [r7, #0]
    182c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	4618      	mov	r0, r3
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <wdt_init+0x4c>)
    1834:	4798      	blx	r3
    1836:	4603      	mov	r3, r0
}
    1838:	4618      	mov	r0, r3
    183a:	3708      	adds	r7, #8
    183c:	46bd      	mov	sp, r7
    183e:	bd80      	pop	{r7, pc}
    1840:	00010d48 	.word	0x00010d48
    1844:	00003c61 	.word	0x00003c61
    1848:	0000b119 	.word	0x0000b119

0000184c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    184c:	b580      	push	{r7, lr}
    184e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1850:	4804      	ldr	r0, [pc, #16]	; (1864 <CRC_CALC_init+0x18>)
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <CRC_CALC_init+0x1c>)
    1854:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1856:	4905      	ldr	r1, [pc, #20]	; (186c <CRC_CALC_init+0x20>)
    1858:	4805      	ldr	r0, [pc, #20]	; (1870 <CRC_CALC_init+0x24>)
    185a:	4b06      	ldr	r3, [pc, #24]	; (1874 <CRC_CALC_init+0x28>)
    185c:	4798      	blx	r3
}
    185e:	bf00      	nop
    1860:	bd80      	pop	{r7, pc}
    1862:	bf00      	nop
    1864:	40000800 	.word	0x40000800
    1868:	0000108f 	.word	0x0000108f
    186c:	41002000 	.word	0x41002000
    1870:	200015cc 	.word	0x200015cc
    1874:	00002621 	.word	0x00002621

00001878 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    187c:	2244      	movs	r2, #68	; 0x44
    187e:	2104      	movs	r1, #4
    1880:	483f      	ldr	r0, [pc, #252]	; (1980 <EXTERNAL_IRQ_0_init+0x108>)
    1882:	4b40      	ldr	r3, [pc, #256]	; (1984 <EXTERNAL_IRQ_0_init+0x10c>)
    1884:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1886:	4840      	ldr	r0, [pc, #256]	; (1988 <EXTERNAL_IRQ_0_init+0x110>)
    1888:	4b40      	ldr	r3, [pc, #256]	; (198c <EXTERNAL_IRQ_0_init+0x114>)
    188a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    188c:	2101      	movs	r1, #1
    188e:	2040      	movs	r0, #64	; 0x40
    1890:	4b3f      	ldr	r3, [pc, #252]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    1892:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1894:	2100      	movs	r1, #0
    1896:	2040      	movs	r0, #64	; 0x40
    1898:	4b3e      	ldr	r3, [pc, #248]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    189a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    189c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    18a0:	2040      	movs	r0, #64	; 0x40
    18a2:	4b3d      	ldr	r3, [pc, #244]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    18a4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    18a6:	2101      	movs	r1, #1
    18a8:	2021      	movs	r0, #33	; 0x21
    18aa:	4b39      	ldr	r3, [pc, #228]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    18ac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    18ae:	2100      	movs	r1, #0
    18b0:	2021      	movs	r0, #33	; 0x21
    18b2:	4b38      	ldr	r3, [pc, #224]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    18b4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    18b6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    18ba:	2021      	movs	r0, #33	; 0x21
    18bc:	4b36      	ldr	r3, [pc, #216]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    18be:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    18c0:	2101      	movs	r1, #1
    18c2:	2003      	movs	r0, #3
    18c4:	4b32      	ldr	r3, [pc, #200]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    18c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    18c8:	2102      	movs	r1, #2
    18ca:	2003      	movs	r0, #3
    18cc:	4b31      	ldr	r3, [pc, #196]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    18ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    18d0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    18d4:	2003      	movs	r0, #3
    18d6:	4b30      	ldr	r3, [pc, #192]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    18d8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    18da:	2101      	movs	r1, #1
    18dc:	2004      	movs	r0, #4
    18de:	4b2c      	ldr	r3, [pc, #176]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    18e0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    18e2:	2102      	movs	r1, #2
    18e4:	2004      	movs	r0, #4
    18e6:	4b2b      	ldr	r3, [pc, #172]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    18e8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    18ea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    18ee:	2004      	movs	r0, #4
    18f0:	4b29      	ldr	r3, [pc, #164]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    18f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    18f4:	2101      	movs	r1, #1
    18f6:	2005      	movs	r0, #5
    18f8:	4b25      	ldr	r3, [pc, #148]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    18fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    18fc:	2102      	movs	r1, #2
    18fe:	2005      	movs	r0, #5
    1900:	4b24      	ldr	r3, [pc, #144]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    1902:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1904:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1908:	2005      	movs	r0, #5
    190a:	4b23      	ldr	r3, [pc, #140]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    190c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    190e:	2101      	movs	r1, #1
    1910:	2056      	movs	r0, #86	; 0x56
    1912:	4b1f      	ldr	r3, [pc, #124]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    1914:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1916:	2102      	movs	r1, #2
    1918:	2056      	movs	r0, #86	; 0x56
    191a:	4b1e      	ldr	r3, [pc, #120]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    191c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    191e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1922:	2056      	movs	r0, #86	; 0x56
    1924:	4b1c      	ldr	r3, [pc, #112]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    1926:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1928:	2101      	movs	r1, #1
    192a:	2057      	movs	r0, #87	; 0x57
    192c:	4b18      	ldr	r3, [pc, #96]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    192e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1930:	2102      	movs	r1, #2
    1932:	2057      	movs	r0, #87	; 0x57
    1934:	4b17      	ldr	r3, [pc, #92]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    1936:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1938:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    193c:	2057      	movs	r0, #87	; 0x57
    193e:	4b16      	ldr	r3, [pc, #88]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    1940:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1942:	2101      	movs	r1, #1
    1944:	2028      	movs	r0, #40	; 0x28
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    1948:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    194a:	2100      	movs	r1, #0
    194c:	2028      	movs	r0, #40	; 0x28
    194e:	4b11      	ldr	r3, [pc, #68]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    1950:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1952:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1956:	2028      	movs	r0, #40	; 0x28
    1958:	4b0f      	ldr	r3, [pc, #60]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    195a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    195c:	2101      	movs	r1, #1
    195e:	2029      	movs	r0, #41	; 0x29
    1960:	4b0b      	ldr	r3, [pc, #44]	; (1990 <EXTERNAL_IRQ_0_init+0x118>)
    1962:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1964:	2100      	movs	r1, #0
    1966:	2029      	movs	r0, #41	; 0x29
    1968:	4b0a      	ldr	r3, [pc, #40]	; (1994 <EXTERNAL_IRQ_0_init+0x11c>)
    196a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    196c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1970:	2029      	movs	r0, #41	; 0x29
    1972:	4b09      	ldr	r3, [pc, #36]	; (1998 <EXTERNAL_IRQ_0_init+0x120>)
    1974:	4798      	blx	r3

	ext_irq_init();
    1976:	4b09      	ldr	r3, [pc, #36]	; (199c <EXTERNAL_IRQ_0_init+0x124>)
    1978:	4798      	blx	r3
}
    197a:	bf00      	nop
    197c:	bd80      	pop	{r7, pc}
    197e:	bf00      	nop
    1980:	40001c00 	.word	0x40001c00
    1984:	00000f29 	.word	0x00000f29
    1988:	40000800 	.word	0x40000800
    198c:	0000100f 	.word	0x0000100f
    1990:	0000177d 	.word	0x0000177d
    1994:	00001729 	.word	0x00001729
    1998:	0000175d 	.word	0x0000175d
    199c:	000026e9 	.word	0x000026e9

000019a0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    19a0:	b580      	push	{r7, lr}
    19a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19a4:	2244      	movs	r2, #68	; 0x44
    19a6:	210b      	movs	r1, #11
    19a8:	4807      	ldr	r0, [pc, #28]	; (19c8 <EVENT_SYSTEM_0_init+0x28>)
    19aa:	4b08      	ldr	r3, [pc, #32]	; (19cc <EVENT_SYSTEM_0_init+0x2c>)
    19ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ae:	2244      	movs	r2, #68	; 0x44
    19b0:	210c      	movs	r1, #12
    19b2:	4805      	ldr	r0, [pc, #20]	; (19c8 <EVENT_SYSTEM_0_init+0x28>)
    19b4:	4b05      	ldr	r3, [pc, #20]	; (19cc <EVENT_SYSTEM_0_init+0x2c>)
    19b6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    19b8:	4805      	ldr	r0, [pc, #20]	; (19d0 <EVENT_SYSTEM_0_init+0x30>)
    19ba:	4b06      	ldr	r3, [pc, #24]	; (19d4 <EVENT_SYSTEM_0_init+0x34>)
    19bc:	4798      	blx	r3

	event_system_init();
    19be:	4b06      	ldr	r3, [pc, #24]	; (19d8 <EVENT_SYSTEM_0_init+0x38>)
    19c0:	4798      	blx	r3
}
    19c2:	bf00      	nop
    19c4:	bd80      	pop	{r7, pc}
    19c6:	bf00      	nop
    19c8:	40001c00 	.word	0x40001c00
    19cc:	00000f29 	.word	0x00000f29
    19d0:	40000800 	.word	0x40000800
    19d4:	000010af 	.word	0x000010af
    19d8:	000026d5 	.word	0x000026d5

000019dc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    19dc:	b580      	push	{r7, lr}
    19de:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    19e0:	2101      	movs	r1, #1
    19e2:	202b      	movs	r0, #43	; 0x2b
    19e4:	4b2b      	ldr	r3, [pc, #172]	; (1a94 <QSPI_N25Q256_PORT_init+0xb8>)
    19e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    19e8:	2100      	movs	r1, #0
    19ea:	202b      	movs	r0, #43	; 0x2b
    19ec:	4b2a      	ldr	r3, [pc, #168]	; (1a98 <QSPI_N25Q256_PORT_init+0xbc>)
    19ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    19f0:	492a      	ldr	r1, [pc, #168]	; (1a9c <QSPI_N25Q256_PORT_init+0xc0>)
    19f2:	202b      	movs	r0, #43	; 0x2b
    19f4:	4b2a      	ldr	r3, [pc, #168]	; (1aa0 <QSPI_N25Q256_PORT_init+0xc4>)
    19f6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    19f8:	2102      	movs	r1, #2
    19fa:	2008      	movs	r0, #8
    19fc:	4b25      	ldr	r3, [pc, #148]	; (1a94 <QSPI_N25Q256_PORT_init+0xb8>)
    19fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1a00:	2100      	movs	r1, #0
    1a02:	2008      	movs	r0, #8
    1a04:	4b27      	ldr	r3, [pc, #156]	; (1aa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1a06:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1a08:	2100      	movs	r1, #0
    1a0a:	2008      	movs	r0, #8
    1a0c:	4b22      	ldr	r3, [pc, #136]	; (1a98 <QSPI_N25Q256_PORT_init+0xbc>)
    1a0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1a10:	4925      	ldr	r1, [pc, #148]	; (1aa8 <QSPI_N25Q256_PORT_init+0xcc>)
    1a12:	2008      	movs	r0, #8
    1a14:	4b22      	ldr	r3, [pc, #136]	; (1aa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1a16:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1a18:	2102      	movs	r1, #2
    1a1a:	2009      	movs	r0, #9
    1a1c:	4b1d      	ldr	r3, [pc, #116]	; (1a94 <QSPI_N25Q256_PORT_init+0xb8>)
    1a1e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1a20:	2100      	movs	r1, #0
    1a22:	2009      	movs	r0, #9
    1a24:	4b1f      	ldr	r3, [pc, #124]	; (1aa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1a26:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1a28:	2100      	movs	r1, #0
    1a2a:	2009      	movs	r0, #9
    1a2c:	4b1a      	ldr	r3, [pc, #104]	; (1a98 <QSPI_N25Q256_PORT_init+0xbc>)
    1a2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1a30:	491e      	ldr	r1, [pc, #120]	; (1aac <QSPI_N25Q256_PORT_init+0xd0>)
    1a32:	2009      	movs	r0, #9
    1a34:	4b1a      	ldr	r3, [pc, #104]	; (1aa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1a36:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1a38:	2102      	movs	r1, #2
    1a3a:	200a      	movs	r0, #10
    1a3c:	4b15      	ldr	r3, [pc, #84]	; (1a94 <QSPI_N25Q256_PORT_init+0xb8>)
    1a3e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1a40:	2100      	movs	r1, #0
    1a42:	200a      	movs	r0, #10
    1a44:	4b17      	ldr	r3, [pc, #92]	; (1aa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1a46:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1a48:	2100      	movs	r1, #0
    1a4a:	200a      	movs	r0, #10
    1a4c:	4b12      	ldr	r3, [pc, #72]	; (1a98 <QSPI_N25Q256_PORT_init+0xbc>)
    1a4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1a50:	4917      	ldr	r1, [pc, #92]	; (1ab0 <QSPI_N25Q256_PORT_init+0xd4>)
    1a52:	200a      	movs	r0, #10
    1a54:	4b12      	ldr	r3, [pc, #72]	; (1aa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1a56:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1a58:	2102      	movs	r1, #2
    1a5a:	200b      	movs	r0, #11
    1a5c:	4b0d      	ldr	r3, [pc, #52]	; (1a94 <QSPI_N25Q256_PORT_init+0xb8>)
    1a5e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1a60:	2100      	movs	r1, #0
    1a62:	200b      	movs	r0, #11
    1a64:	4b0f      	ldr	r3, [pc, #60]	; (1aa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1a66:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1a68:	2100      	movs	r1, #0
    1a6a:	200b      	movs	r0, #11
    1a6c:	4b0a      	ldr	r3, [pc, #40]	; (1a98 <QSPI_N25Q256_PORT_init+0xbc>)
    1a6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1a70:	4910      	ldr	r1, [pc, #64]	; (1ab4 <QSPI_N25Q256_PORT_init+0xd8>)
    1a72:	200b      	movs	r0, #11
    1a74:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1a76:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1a78:	2101      	movs	r1, #1
    1a7a:	202a      	movs	r0, #42	; 0x2a
    1a7c:	4b05      	ldr	r3, [pc, #20]	; (1a94 <QSPI_N25Q256_PORT_init+0xb8>)
    1a7e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1a80:	2100      	movs	r1, #0
    1a82:	202a      	movs	r0, #42	; 0x2a
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <QSPI_N25Q256_PORT_init+0xbc>)
    1a86:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1a88:	490b      	ldr	r1, [pc, #44]	; (1ab8 <QSPI_N25Q256_PORT_init+0xdc>)
    1a8a:	202a      	movs	r0, #42	; 0x2a
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1a8e:	4798      	blx	r3
}
    1a90:	bf00      	nop
    1a92:	bd80      	pop	{r7, pc}
    1a94:	0000177d 	.word	0x0000177d
    1a98:	00001729 	.word	0x00001729
    1a9c:	002b0007 	.word	0x002b0007
    1aa0:	0000175d 	.word	0x0000175d
    1aa4:	000017b5 	.word	0x000017b5
    1aa8:	00080007 	.word	0x00080007
    1aac:	00090007 	.word	0x00090007
    1ab0:	000a0007 	.word	0x000a0007
    1ab4:	000b0007 	.word	0x000b0007
    1ab8:	002a0007 	.word	0x002a0007

00001abc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1abc:	b580      	push	{r7, lr}
    1abe:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1ac0:	4805      	ldr	r0, [pc, #20]	; (1ad8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <QSPI_N25Q256_CLOCK_init+0x20>)
    1ac4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1ac6:	4804      	ldr	r0, [pc, #16]	; (1ad8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1ac8:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <QSPI_N25Q256_CLOCK_init+0x24>)
    1aca:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1acc:	4802      	ldr	r0, [pc, #8]	; (1ad8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <QSPI_N25Q256_CLOCK_init+0x28>)
    1ad0:	4798      	blx	r3
}
    1ad2:	bf00      	nop
    1ad4:	bd80      	pop	{r7, pc}
    1ad6:	bf00      	nop
    1ad8:	40000800 	.word	0x40000800
    1adc:	00000f6f 	.word	0x00000f6f
    1ae0:	00000faf 	.word	0x00000faf
    1ae4:	0000116f 	.word	0x0000116f

00001ae8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1aec:	4b04      	ldr	r3, [pc, #16]	; (1b00 <QSPI_N25Q256_init+0x18>)
    1aee:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1af0:	4904      	ldr	r1, [pc, #16]	; (1b04 <QSPI_N25Q256_init+0x1c>)
    1af2:	4805      	ldr	r0, [pc, #20]	; (1b08 <QSPI_N25Q256_init+0x20>)
    1af4:	4b05      	ldr	r3, [pc, #20]	; (1b0c <QSPI_N25Q256_init+0x24>)
    1af6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1af8:	4b05      	ldr	r3, [pc, #20]	; (1b10 <QSPI_N25Q256_init+0x28>)
    1afa:	4798      	blx	r3
}
    1afc:	bf00      	nop
    1afe:	bd80      	pop	{r7, pc}
    1b00:	00001abd 	.word	0x00001abd
    1b04:	42003400 	.word	0x42003400
    1b08:	20001480 	.word	0x20001480
    1b0c:	00002abd 	.word	0x00002abd
    1b10:	000019dd 	.word	0x000019dd

00001b14 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1b18:	4802      	ldr	r0, [pc, #8]	; (1b24 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1b1a:	4b03      	ldr	r3, [pc, #12]	; (1b28 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1b1c:	4798      	blx	r3
}
    1b1e:	bf00      	nop
    1b20:	bd80      	pop	{r7, pc}
    1b22:	bf00      	nop
    1b24:	40000800 	.word	0x40000800
    1b28:	00000fef 	.word	0x00000fef

00001b2c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1b30:	4b03      	ldr	r3, [pc, #12]	; (1b40 <DATETIME_CLOCK_init+0x14>)
    1b32:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1b34:	4903      	ldr	r1, [pc, #12]	; (1b44 <DATETIME_CLOCK_init+0x18>)
    1b36:	4804      	ldr	r0, [pc, #16]	; (1b48 <DATETIME_CLOCK_init+0x1c>)
    1b38:	4b04      	ldr	r3, [pc, #16]	; (1b4c <DATETIME_CLOCK_init+0x20>)
    1b3a:	4798      	blx	r3
}
    1b3c:	bf00      	nop
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	00001b15 	.word	0x00001b15
    1b44:	40002400 	.word	0x40002400
    1b48:	200015a8 	.word	0x200015a8
    1b4c:	000024c5 	.word	0x000024c5

00001b50 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1b54:	2101      	movs	r1, #1
    1b56:	2010      	movs	r0, #16
    1b58:	4b07      	ldr	r3, [pc, #28]	; (1b78 <I2C_HEATERS_PORT_init+0x28>)
    1b5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1b5c:	4907      	ldr	r1, [pc, #28]	; (1b7c <I2C_HEATERS_PORT_init+0x2c>)
    1b5e:	2010      	movs	r0, #16
    1b60:	4b07      	ldr	r3, [pc, #28]	; (1b80 <I2C_HEATERS_PORT_init+0x30>)
    1b62:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1b64:	2101      	movs	r1, #1
    1b66:	2011      	movs	r0, #17
    1b68:	4b03      	ldr	r3, [pc, #12]	; (1b78 <I2C_HEATERS_PORT_init+0x28>)
    1b6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1b6c:	4905      	ldr	r1, [pc, #20]	; (1b84 <I2C_HEATERS_PORT_init+0x34>)
    1b6e:	2011      	movs	r0, #17
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <I2C_HEATERS_PORT_init+0x30>)
    1b72:	4798      	blx	r3
}
    1b74:	bf00      	nop
    1b76:	bd80      	pop	{r7, pc}
    1b78:	00001729 	.word	0x00001729
    1b7c:	00100002 	.word	0x00100002
    1b80:	0000175d 	.word	0x0000175d
    1b84:	00110002 	.word	0x00110002

00001b88 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b8c:	2242      	movs	r2, #66	; 0x42
    1b8e:	2108      	movs	r1, #8
    1b90:	4806      	ldr	r0, [pc, #24]	; (1bac <I2C_HEATERS_CLOCK_init+0x24>)
    1b92:	4b07      	ldr	r3, [pc, #28]	; (1bb0 <I2C_HEATERS_CLOCK_init+0x28>)
    1b94:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b96:	224a      	movs	r2, #74	; 0x4a
    1b98:	2103      	movs	r1, #3
    1b9a:	4804      	ldr	r0, [pc, #16]	; (1bac <I2C_HEATERS_CLOCK_init+0x24>)
    1b9c:	4b04      	ldr	r3, [pc, #16]	; (1bb0 <I2C_HEATERS_CLOCK_init+0x28>)
    1b9e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1ba0:	4804      	ldr	r0, [pc, #16]	; (1bb4 <I2C_HEATERS_CLOCK_init+0x2c>)
    1ba2:	4b05      	ldr	r3, [pc, #20]	; (1bb8 <I2C_HEATERS_CLOCK_init+0x30>)
    1ba4:	4798      	blx	r3
}
    1ba6:	bf00      	nop
    1ba8:	bd80      	pop	{r7, pc}
    1baa:	bf00      	nop
    1bac:	40001c00 	.word	0x40001c00
    1bb0:	00000f29 	.word	0x00000f29
    1bb4:	40000800 	.word	0x40000800
    1bb8:	0000102f 	.word	0x0000102f

00001bbc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1bbc:	b580      	push	{r7, lr}
    1bbe:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1bc0:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <I2C_HEATERS_init+0x18>)
    1bc2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1bc4:	4904      	ldr	r1, [pc, #16]	; (1bd8 <I2C_HEATERS_init+0x1c>)
    1bc6:	4805      	ldr	r0, [pc, #20]	; (1bdc <I2C_HEATERS_init+0x20>)
    1bc8:	4b05      	ldr	r3, [pc, #20]	; (1be0 <I2C_HEATERS_init+0x24>)
    1bca:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1bcc:	4b05      	ldr	r3, [pc, #20]	; (1be4 <I2C_HEATERS_init+0x28>)
    1bce:	4798      	blx	r3
}
    1bd0:	bf00      	nop
    1bd2:	bd80      	pop	{r7, pc}
    1bd4:	00001b89 	.word	0x00001b89
    1bd8:	40003400 	.word	0x40003400
    1bdc:	20001500 	.word	0x20001500
    1be0:	000029b1 	.word	0x000029b1
    1be4:	00001b51 	.word	0x00001b51

00001be8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1bec:	2100      	movs	r1, #0
    1bee:	203b      	movs	r0, #59	; 0x3b
    1bf0:	4b11      	ldr	r3, [pc, #68]	; (1c38 <SPI_TEMP_PORT_init+0x50>)
    1bf2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1bf4:	2102      	movs	r1, #2
    1bf6:	203b      	movs	r0, #59	; 0x3b
    1bf8:	4b10      	ldr	r3, [pc, #64]	; (1c3c <SPI_TEMP_PORT_init+0x54>)
    1bfa:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1bfc:	4910      	ldr	r1, [pc, #64]	; (1c40 <SPI_TEMP_PORT_init+0x58>)
    1bfe:	203b      	movs	r0, #59	; 0x3b
    1c00:	4b10      	ldr	r3, [pc, #64]	; (1c44 <SPI_TEMP_PORT_init+0x5c>)
    1c02:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1c04:	2100      	movs	r1, #0
    1c06:	203a      	movs	r0, #58	; 0x3a
    1c08:	4b0b      	ldr	r3, [pc, #44]	; (1c38 <SPI_TEMP_PORT_init+0x50>)
    1c0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1c0c:	2102      	movs	r1, #2
    1c0e:	203a      	movs	r0, #58	; 0x3a
    1c10:	4b0a      	ldr	r3, [pc, #40]	; (1c3c <SPI_TEMP_PORT_init+0x54>)
    1c12:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1c14:	490c      	ldr	r1, [pc, #48]	; (1c48 <SPI_TEMP_PORT_init+0x60>)
    1c16:	203a      	movs	r0, #58	; 0x3a
    1c18:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <SPI_TEMP_PORT_init+0x5c>)
    1c1a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1c1c:	2101      	movs	r1, #1
    1c1e:	203c      	movs	r0, #60	; 0x3c
    1c20:	4b06      	ldr	r3, [pc, #24]	; (1c3c <SPI_TEMP_PORT_init+0x54>)
    1c22:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1c24:	2100      	movs	r1, #0
    1c26:	203c      	movs	r0, #60	; 0x3c
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <SPI_TEMP_PORT_init+0x64>)
    1c2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1c2c:	4908      	ldr	r1, [pc, #32]	; (1c50 <SPI_TEMP_PORT_init+0x68>)
    1c2e:	203c      	movs	r0, #60	; 0x3c
    1c30:	4b04      	ldr	r3, [pc, #16]	; (1c44 <SPI_TEMP_PORT_init+0x5c>)
    1c32:	4798      	blx	r3
}
    1c34:	bf00      	nop
    1c36:	bd80      	pop	{r7, pc}
    1c38:	000017b5 	.word	0x000017b5
    1c3c:	0000177d 	.word	0x0000177d
    1c40:	003b0003 	.word	0x003b0003
    1c44:	0000175d 	.word	0x0000175d
    1c48:	003a0003 	.word	0x003a0003
    1c4c:	00001729 	.word	0x00001729
    1c50:	003c0003 	.word	0x003c0003

00001c54 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1c54:	b580      	push	{r7, lr}
    1c56:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c58:	2245      	movs	r2, #69	; 0x45
    1c5a:	2122      	movs	r1, #34	; 0x22
    1c5c:	4806      	ldr	r0, [pc, #24]	; (1c78 <SPI_TEMP_CLOCK_init+0x24>)
    1c5e:	4b07      	ldr	r3, [pc, #28]	; (1c7c <SPI_TEMP_CLOCK_init+0x28>)
    1c60:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c62:	224a      	movs	r2, #74	; 0x4a
    1c64:	2103      	movs	r1, #3
    1c66:	4804      	ldr	r0, [pc, #16]	; (1c78 <SPI_TEMP_CLOCK_init+0x24>)
    1c68:	4b04      	ldr	r3, [pc, #16]	; (1c7c <SPI_TEMP_CLOCK_init+0x28>)
    1c6a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1c6c:	4804      	ldr	r0, [pc, #16]	; (1c80 <SPI_TEMP_CLOCK_init+0x2c>)
    1c6e:	4b05      	ldr	r3, [pc, #20]	; (1c84 <SPI_TEMP_CLOCK_init+0x30>)
    1c70:	4798      	blx	r3
}
    1c72:	bf00      	nop
    1c74:	bd80      	pop	{r7, pc}
    1c76:	bf00      	nop
    1c78:	40001c00 	.word	0x40001c00
    1c7c:	00000f29 	.word	0x00000f29
    1c80:	40000800 	.word	0x40000800
    1c84:	0000118f 	.word	0x0000118f

00001c88 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1c88:	b580      	push	{r7, lr}
    1c8a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1c8c:	4b05      	ldr	r3, [pc, #20]	; (1ca4 <SPI_TEMP_init+0x1c>)
    1c8e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1c90:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1c94:	4804      	ldr	r0, [pc, #16]	; (1ca8 <SPI_TEMP_init+0x20>)
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <SPI_TEMP_init+0x24>)
    1c98:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1c9a:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <SPI_TEMP_init+0x28>)
    1c9c:	4798      	blx	r3
}
    1c9e:	bf00      	nop
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	bf00      	nop
    1ca4:	00001c55 	.word	0x00001c55
    1ca8:	20001428 	.word	0x20001428
    1cac:	00002bcd 	.word	0x00002bcd
    1cb0:	00001be9 	.word	0x00001be9

00001cb4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1cb8:	2100      	movs	r1, #0
    1cba:	2017      	movs	r0, #23
    1cbc:	4b07      	ldr	r3, [pc, #28]	; (1cdc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1cbe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1cc0:	4907      	ldr	r1, [pc, #28]	; (1ce0 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    1cc2:	2017      	movs	r0, #23
    1cc4:	4b07      	ldr	r3, [pc, #28]	; (1ce4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1cc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1cc8:	2100      	movs	r1, #0
    1cca:	2016      	movs	r0, #22
    1ccc:	4b03      	ldr	r3, [pc, #12]	; (1cdc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1cce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1cd0:	4905      	ldr	r1, [pc, #20]	; (1ce8 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    1cd2:	2016      	movs	r0, #22
    1cd4:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1cd6:	4798      	blx	r3
}
    1cd8:	bf00      	nop
    1cda:	bd80      	pop	{r7, pc}
    1cdc:	00001729 	.word	0x00001729
    1ce0:	00170003 	.word	0x00170003
    1ce4:	0000175d 	.word	0x0000175d
    1ce8:	00160003 	.word	0x00160003

00001cec <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cf0:	2244      	movs	r2, #68	; 0x44
    1cf2:	2123      	movs	r1, #35	; 0x23
    1cf4:	4806      	ldr	r0, [pc, #24]	; (1d10 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1cf6:	4b07      	ldr	r3, [pc, #28]	; (1d14 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1cf8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cfa:	224a      	movs	r2, #74	; 0x4a
    1cfc:	2103      	movs	r1, #3
    1cfe:	4804      	ldr	r0, [pc, #16]	; (1d10 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1d00:	4b04      	ldr	r3, [pc, #16]	; (1d14 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1d02:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1d04:	4804      	ldr	r0, [pc, #16]	; (1d18 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1d06:	4b05      	ldr	r3, [pc, #20]	; (1d1c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1d08:	4798      	blx	r3
}
    1d0a:	bf00      	nop
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	bf00      	nop
    1d10:	40001c00 	.word	0x40001c00
    1d14:	00000f29 	.word	0x00000f29
    1d18:	40000800 	.word	0x40000800
    1d1c:	000011af 	.word	0x000011af

00001d20 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1d24:	4b04      	ldr	r3, [pc, #16]	; (1d38 <I2C_FLAPPER_VALVE_init+0x18>)
    1d26:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1d28:	4904      	ldr	r1, [pc, #16]	; (1d3c <I2C_FLAPPER_VALVE_init+0x1c>)
    1d2a:	4805      	ldr	r0, [pc, #20]	; (1d40 <I2C_FLAPPER_VALVE_init+0x20>)
    1d2c:	4b05      	ldr	r3, [pc, #20]	; (1d44 <I2C_FLAPPER_VALVE_init+0x24>)
    1d2e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1d30:	4b05      	ldr	r3, [pc, #20]	; (1d48 <I2C_FLAPPER_VALVE_init+0x28>)
    1d32:	4798      	blx	r3
}
    1d34:	bf00      	nop
    1d36:	bd80      	pop	{r7, pc}
    1d38:	00001ced 	.word	0x00001ced
    1d3c:	43000400 	.word	0x43000400
    1d40:	200014c4 	.word	0x200014c4
    1d44:	000029b1 	.word	0x000029b1
    1d48:	00001cb5 	.word	0x00001cb5

00001d4c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1d50:	2100      	movs	r1, #0
    1d52:	2044      	movs	r0, #68	; 0x44
    1d54:	4b11      	ldr	r3, [pc, #68]	; (1d9c <SPI_HI3593_PORT_init+0x50>)
    1d56:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1d58:	2102      	movs	r1, #2
    1d5a:	2044      	movs	r0, #68	; 0x44
    1d5c:	4b10      	ldr	r3, [pc, #64]	; (1da0 <SPI_HI3593_PORT_init+0x54>)
    1d5e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1d60:	4910      	ldr	r1, [pc, #64]	; (1da4 <SPI_HI3593_PORT_init+0x58>)
    1d62:	2044      	movs	r0, #68	; 0x44
    1d64:	4b10      	ldr	r3, [pc, #64]	; (1da8 <SPI_HI3593_PORT_init+0x5c>)
    1d66:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1d68:	2100      	movs	r1, #0
    1d6a:	2045      	movs	r0, #69	; 0x45
    1d6c:	4b0b      	ldr	r3, [pc, #44]	; (1d9c <SPI_HI3593_PORT_init+0x50>)
    1d6e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1d70:	2102      	movs	r1, #2
    1d72:	2045      	movs	r0, #69	; 0x45
    1d74:	4b0a      	ldr	r3, [pc, #40]	; (1da0 <SPI_HI3593_PORT_init+0x54>)
    1d76:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1d78:	490c      	ldr	r1, [pc, #48]	; (1dac <SPI_HI3593_PORT_init+0x60>)
    1d7a:	2045      	movs	r0, #69	; 0x45
    1d7c:	4b0a      	ldr	r3, [pc, #40]	; (1da8 <SPI_HI3593_PORT_init+0x5c>)
    1d7e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1d80:	2101      	movs	r1, #1
    1d82:	2047      	movs	r0, #71	; 0x47
    1d84:	4b06      	ldr	r3, [pc, #24]	; (1da0 <SPI_HI3593_PORT_init+0x54>)
    1d86:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1d88:	2100      	movs	r1, #0
    1d8a:	2047      	movs	r0, #71	; 0x47
    1d8c:	4b08      	ldr	r3, [pc, #32]	; (1db0 <SPI_HI3593_PORT_init+0x64>)
    1d8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1d90:	4908      	ldr	r1, [pc, #32]	; (1db4 <SPI_HI3593_PORT_init+0x68>)
    1d92:	2047      	movs	r0, #71	; 0x47
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <SPI_HI3593_PORT_init+0x5c>)
    1d96:	4798      	blx	r3
}
    1d98:	bf00      	nop
    1d9a:	bd80      	pop	{r7, pc}
    1d9c:	000017b5 	.word	0x000017b5
    1da0:	0000177d 	.word	0x0000177d
    1da4:	00440002 	.word	0x00440002
    1da8:	0000175d 	.word	0x0000175d
    1dac:	00450002 	.word	0x00450002
    1db0:	00001729 	.word	0x00001729
    1db4:	00470002 	.word	0x00470002

00001db8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1db8:	b580      	push	{r7, lr}
    1dba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dbc:	2242      	movs	r2, #66	; 0x42
    1dbe:	2124      	movs	r1, #36	; 0x24
    1dc0:	4806      	ldr	r0, [pc, #24]	; (1ddc <SPI_HI3593_CLOCK_init+0x24>)
    1dc2:	4b07      	ldr	r3, [pc, #28]	; (1de0 <SPI_HI3593_CLOCK_init+0x28>)
    1dc4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dc6:	224a      	movs	r2, #74	; 0x4a
    1dc8:	2103      	movs	r1, #3
    1dca:	4804      	ldr	r0, [pc, #16]	; (1ddc <SPI_HI3593_CLOCK_init+0x24>)
    1dcc:	4b04      	ldr	r3, [pc, #16]	; (1de0 <SPI_HI3593_CLOCK_init+0x28>)
    1dce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1dd0:	4804      	ldr	r0, [pc, #16]	; (1de4 <SPI_HI3593_CLOCK_init+0x2c>)
    1dd2:	4b05      	ldr	r3, [pc, #20]	; (1de8 <SPI_HI3593_CLOCK_init+0x30>)
    1dd4:	4798      	blx	r3
}
    1dd6:	bf00      	nop
    1dd8:	bd80      	pop	{r7, pc}
    1dda:	bf00      	nop
    1ddc:	40001c00 	.word	0x40001c00
    1de0:	00000f29 	.word	0x00000f29
    1de4:	40000800 	.word	0x40000800
    1de8:	000011cf 	.word	0x000011cf

00001dec <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1dec:	b580      	push	{r7, lr}
    1dee:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1df0:	4b04      	ldr	r3, [pc, #16]	; (1e04 <SPI_HI3593_init+0x18>)
    1df2:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1df4:	4904      	ldr	r1, [pc, #16]	; (1e08 <SPI_HI3593_init+0x1c>)
    1df6:	4805      	ldr	r0, [pc, #20]	; (1e0c <SPI_HI3593_init+0x20>)
    1df8:	4b05      	ldr	r3, [pc, #20]	; (1e10 <SPI_HI3593_init+0x24>)
    1dfa:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <SPI_HI3593_init+0x28>)
    1dfe:	4798      	blx	r3
}
    1e00:	bf00      	nop
    1e02:	bd80      	pop	{r7, pc}
    1e04:	00001db9 	.word	0x00001db9
    1e08:	43000800 	.word	0x43000800
    1e0c:	20001410 	.word	0x20001410
    1e10:	00002bcd 	.word	0x00002bcd
    1e14:	00001d4d 	.word	0x00001d4d

00001e18 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1e1c:	2100      	movs	r1, #0
    1e1e:	2068      	movs	r0, #104	; 0x68
    1e20:	4b07      	ldr	r3, [pc, #28]	; (1e40 <I2C_FANS_PORT_init+0x28>)
    1e22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1e24:	4907      	ldr	r1, [pc, #28]	; (1e44 <I2C_FANS_PORT_init+0x2c>)
    1e26:	2068      	movs	r0, #104	; 0x68
    1e28:	4b07      	ldr	r3, [pc, #28]	; (1e48 <I2C_FANS_PORT_init+0x30>)
    1e2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1e2c:	2100      	movs	r1, #0
    1e2e:	2069      	movs	r0, #105	; 0x69
    1e30:	4b03      	ldr	r3, [pc, #12]	; (1e40 <I2C_FANS_PORT_init+0x28>)
    1e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1e34:	4905      	ldr	r1, [pc, #20]	; (1e4c <I2C_FANS_PORT_init+0x34>)
    1e36:	2069      	movs	r0, #105	; 0x69
    1e38:	4b03      	ldr	r3, [pc, #12]	; (1e48 <I2C_FANS_PORT_init+0x30>)
    1e3a:	4798      	blx	r3
}
    1e3c:	bf00      	nop
    1e3e:	bd80      	pop	{r7, pc}
    1e40:	00001729 	.word	0x00001729
    1e44:	00680002 	.word	0x00680002
    1e48:	0000175d 	.word	0x0000175d
    1e4c:	00690002 	.word	0x00690002

00001e50 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1e50:	b580      	push	{r7, lr}
    1e52:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e54:	2244      	movs	r2, #68	; 0x44
    1e56:	2125      	movs	r1, #37	; 0x25
    1e58:	4806      	ldr	r0, [pc, #24]	; (1e74 <I2C_FANS_CLOCK_init+0x24>)
    1e5a:	4b07      	ldr	r3, [pc, #28]	; (1e78 <I2C_FANS_CLOCK_init+0x28>)
    1e5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e5e:	224a      	movs	r2, #74	; 0x4a
    1e60:	2103      	movs	r1, #3
    1e62:	4804      	ldr	r0, [pc, #16]	; (1e74 <I2C_FANS_CLOCK_init+0x24>)
    1e64:	4b04      	ldr	r3, [pc, #16]	; (1e78 <I2C_FANS_CLOCK_init+0x28>)
    1e66:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1e68:	4804      	ldr	r0, [pc, #16]	; (1e7c <I2C_FANS_CLOCK_init+0x2c>)
    1e6a:	4b05      	ldr	r3, [pc, #20]	; (1e80 <I2C_FANS_CLOCK_init+0x30>)
    1e6c:	4798      	blx	r3
}
    1e6e:	bf00      	nop
    1e70:	bd80      	pop	{r7, pc}
    1e72:	bf00      	nop
    1e74:	40001c00 	.word	0x40001c00
    1e78:	00000f29 	.word	0x00000f29
    1e7c:	40000800 	.word	0x40000800
    1e80:	000011ef 	.word	0x000011ef

00001e84 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1e88:	4b04      	ldr	r3, [pc, #16]	; (1e9c <I2C_FANS_init+0x18>)
    1e8a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1e8c:	4904      	ldr	r1, [pc, #16]	; (1ea0 <I2C_FANS_init+0x1c>)
    1e8e:	4805      	ldr	r0, [pc, #20]	; (1ea4 <I2C_FANS_init+0x20>)
    1e90:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <I2C_FANS_init+0x24>)
    1e92:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <I2C_FANS_init+0x28>)
    1e96:	4798      	blx	r3
}
    1e98:	bf00      	nop
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	00001e51 	.word	0x00001e51
    1ea0:	43000c00 	.word	0x43000c00
    1ea4:	20001440 	.word	0x20001440
    1ea8:	000029b1 	.word	0x000029b1
    1eac:	00001e19 	.word	0x00001e19

00001eb0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1eb0:	b580      	push	{r7, lr}
    1eb2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1eb4:	4808      	ldr	r0, [pc, #32]	; (1ed8 <TIMER_USB_init+0x28>)
    1eb6:	4b09      	ldr	r3, [pc, #36]	; (1edc <TIMER_USB_init+0x2c>)
    1eb8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1eba:	2243      	movs	r2, #67	; 0x43
    1ebc:	2109      	movs	r1, #9
    1ebe:	4808      	ldr	r0, [pc, #32]	; (1ee0 <TIMER_USB_init+0x30>)
    1ec0:	4b08      	ldr	r3, [pc, #32]	; (1ee4 <TIMER_USB_init+0x34>)
    1ec2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1ec4:	4b08      	ldr	r3, [pc, #32]	; (1ee8 <TIMER_USB_init+0x38>)
    1ec6:	4798      	blx	r3
    1ec8:	4603      	mov	r3, r0
    1eca:	461a      	mov	r2, r3
    1ecc:	4907      	ldr	r1, [pc, #28]	; (1eec <TIMER_USB_init+0x3c>)
    1ece:	4808      	ldr	r0, [pc, #32]	; (1ef0 <TIMER_USB_init+0x40>)
    1ed0:	4b08      	ldr	r3, [pc, #32]	; (1ef4 <TIMER_USB_init+0x44>)
    1ed2:	4798      	blx	r3
}
    1ed4:	bf00      	nop
    1ed6:	bd80      	pop	{r7, pc}
    1ed8:	40000800 	.word	0x40000800
    1edc:	0000104f 	.word	0x0000104f
    1ee0:	40001c00 	.word	0x40001c00
    1ee4:	00000f29 	.word	0x00000f29
    1ee8:	000085b1 	.word	0x000085b1
    1eec:	40003800 	.word	0x40003800
    1ef0:	20001568 	.word	0x20001568
    1ef4:	00002e5d 	.word	0x00002e5d

00001ef8 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1efc:	4808      	ldr	r0, [pc, #32]	; (1f20 <TIMER_ARINC_init+0x28>)
    1efe:	4b09      	ldr	r3, [pc, #36]	; (1f24 <TIMER_ARINC_init+0x2c>)
    1f00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f02:	2244      	movs	r2, #68	; 0x44
    1f04:	211a      	movs	r1, #26
    1f06:	4808      	ldr	r0, [pc, #32]	; (1f28 <TIMER_ARINC_init+0x30>)
    1f08:	4b08      	ldr	r3, [pc, #32]	; (1f2c <TIMER_ARINC_init+0x34>)
    1f0a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1f0c:	4b08      	ldr	r3, [pc, #32]	; (1f30 <TIMER_ARINC_init+0x38>)
    1f0e:	4798      	blx	r3
    1f10:	4603      	mov	r3, r0
    1f12:	461a      	mov	r2, r3
    1f14:	4907      	ldr	r1, [pc, #28]	; (1f34 <TIMER_ARINC_init+0x3c>)
    1f16:	4808      	ldr	r0, [pc, #32]	; (1f38 <TIMER_ARINC_init+0x40>)
    1f18:	4b08      	ldr	r3, [pc, #32]	; (1f3c <TIMER_ARINC_init+0x44>)
    1f1a:	4798      	blx	r3
}
    1f1c:	bf00      	nop
    1f1e:	bd80      	pop	{r7, pc}
    1f20:	40000800 	.word	0x40000800
    1f24:	0000110f 	.word	0x0000110f
    1f28:	40001c00 	.word	0x40001c00
    1f2c:	00000f29 	.word	0x00000f29
    1f30:	000085b1 	.word	0x000085b1
    1f34:	4101a000 	.word	0x4101a000
    1f38:	20001548 	.word	0x20001548
    1f3c:	00002e5d 	.word	0x00002e5d

00001f40 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1f40:	b580      	push	{r7, lr}
    1f42:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1f44:	4808      	ldr	r0, [pc, #32]	; (1f68 <TIMER_MAINTENANCE_init+0x28>)
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <TIMER_MAINTENANCE_init+0x2c>)
    1f48:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f4a:	2246      	movs	r2, #70	; 0x46
    1f4c:	211e      	movs	r1, #30
    1f4e:	4808      	ldr	r0, [pc, #32]	; (1f70 <TIMER_MAINTENANCE_init+0x30>)
    1f50:	4b08      	ldr	r3, [pc, #32]	; (1f74 <TIMER_MAINTENANCE_init+0x34>)
    1f52:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1f54:	4b08      	ldr	r3, [pc, #32]	; (1f78 <TIMER_MAINTENANCE_init+0x38>)
    1f56:	4798      	blx	r3
    1f58:	4603      	mov	r3, r0
    1f5a:	461a      	mov	r2, r3
    1f5c:	4907      	ldr	r1, [pc, #28]	; (1f7c <TIMER_MAINTENANCE_init+0x3c>)
    1f5e:	4808      	ldr	r0, [pc, #32]	; (1f80 <TIMER_MAINTENANCE_init+0x40>)
    1f60:	4b08      	ldr	r3, [pc, #32]	; (1f84 <TIMER_MAINTENANCE_init+0x44>)
    1f62:	4798      	blx	r3
}
    1f64:	bf00      	nop
    1f66:	bd80      	pop	{r7, pc}
    1f68:	40000800 	.word	0x40000800
    1f6c:	0000112f 	.word	0x0000112f
    1f70:	40001c00 	.word	0x40001c00
    1f74:	00000f29 	.word	0x00000f29
    1f78:	000085b1 	.word	0x000085b1
    1f7c:	42001400 	.word	0x42001400
    1f80:	20001460 	.word	0x20001460
    1f84:	00002e5d 	.word	0x00002e5d

00001f88 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1f8c:	4808      	ldr	r0, [pc, #32]	; (1fb0 <TIMER_INTERFACE_init+0x28>)
    1f8e:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <TIMER_INTERFACE_init+0x2c>)
    1f90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f92:	2246      	movs	r2, #70	; 0x46
    1f94:	211e      	movs	r1, #30
    1f96:	4808      	ldr	r0, [pc, #32]	; (1fb8 <TIMER_INTERFACE_init+0x30>)
    1f98:	4b08      	ldr	r3, [pc, #32]	; (1fbc <TIMER_INTERFACE_init+0x34>)
    1f9a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <TIMER_INTERFACE_init+0x38>)
    1f9e:	4798      	blx	r3
    1fa0:	4603      	mov	r3, r0
    1fa2:	461a      	mov	r2, r3
    1fa4:	4907      	ldr	r1, [pc, #28]	; (1fc4 <TIMER_INTERFACE_init+0x3c>)
    1fa6:	4808      	ldr	r0, [pc, #32]	; (1fc8 <TIMER_INTERFACE_init+0x40>)
    1fa8:	4b08      	ldr	r3, [pc, #32]	; (1fcc <TIMER_INTERFACE_init+0x44>)
    1faa:	4798      	blx	r3
}
    1fac:	bf00      	nop
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	40000800 	.word	0x40000800
    1fb4:	0000114f 	.word	0x0000114f
    1fb8:	40001c00 	.word	0x40001c00
    1fbc:	00000f29 	.word	0x00000f29
    1fc0:	000085b1 	.word	0x000085b1
    1fc4:	42001800 	.word	0x42001800
    1fc8:	200014a4 	.word	0x200014a4
    1fcc:	00002e5d 	.word	0x00002e5d

00001fd0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1fd4:	4808      	ldr	r0, [pc, #32]	; (1ff8 <TIMER_EVENT_init+0x28>)
    1fd6:	4b09      	ldr	r3, [pc, #36]	; (1ffc <TIMER_EVENT_init+0x2c>)
    1fd8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fda:	2246      	movs	r2, #70	; 0x46
    1fdc:	2127      	movs	r1, #39	; 0x27
    1fde:	4808      	ldr	r0, [pc, #32]	; (2000 <TIMER_EVENT_init+0x30>)
    1fe0:	4b08      	ldr	r3, [pc, #32]	; (2004 <TIMER_EVENT_init+0x34>)
    1fe2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1fe4:	4b08      	ldr	r3, [pc, #32]	; (2008 <TIMER_EVENT_init+0x38>)
    1fe6:	4798      	blx	r3
    1fe8:	4603      	mov	r3, r0
    1fea:	461a      	mov	r2, r3
    1fec:	4907      	ldr	r1, [pc, #28]	; (200c <TIMER_EVENT_init+0x3c>)
    1fee:	4808      	ldr	r0, [pc, #32]	; (2010 <TIMER_EVENT_init+0x40>)
    1ff0:	4b08      	ldr	r3, [pc, #32]	; (2014 <TIMER_EVENT_init+0x44>)
    1ff2:	4798      	blx	r3
}
    1ff4:	bf00      	nop
    1ff6:	bd80      	pop	{r7, pc}
    1ff8:	40000800 	.word	0x40000800
    1ffc:	0000120f 	.word	0x0000120f
    2000:	40001c00 	.word	0x40001c00
    2004:	00000f29 	.word	0x00000f29
    2008:	000085b1 	.word	0x000085b1
    200c:	43001400 	.word	0x43001400
    2010:	20001484 	.word	0x20001484
    2014:	00002e5d 	.word	0x00002e5d

00002018 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2018:	b480      	push	{r7}
    201a:	af00      	add	r7, sp, #0
}
    201c:	bf00      	nop
    201e:	46bd      	mov	sp, r7
    2020:	f85d 7b04 	ldr.w	r7, [sp], #4
    2024:	4770      	bx	lr
	...

00002028 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2028:	b580      	push	{r7, lr}
    202a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    202c:	4804      	ldr	r0, [pc, #16]	; (2040 <LIVE_PULSE_CLOCK_init+0x18>)
    202e:	4b05      	ldr	r3, [pc, #20]	; (2044 <LIVE_PULSE_CLOCK_init+0x1c>)
    2030:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2032:	2240      	movs	r2, #64	; 0x40
    2034:	2127      	movs	r1, #39	; 0x27
    2036:	4804      	ldr	r0, [pc, #16]	; (2048 <LIVE_PULSE_CLOCK_init+0x20>)
    2038:	4b04      	ldr	r3, [pc, #16]	; (204c <LIVE_PULSE_CLOCK_init+0x24>)
    203a:	4798      	blx	r3
}
    203c:	bf00      	nop
    203e:	bd80      	pop	{r7, pc}
    2040:	40000800 	.word	0x40000800
    2044:	0000122f 	.word	0x0000122f
    2048:	40001c00 	.word	0x40001c00
    204c:	00000f29 	.word	0x00000f29

00002050 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2050:	b580      	push	{r7, lr}
    2052:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2054:	4b06      	ldr	r3, [pc, #24]	; (2070 <LIVE_PULSE_init+0x20>)
    2056:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <LIVE_PULSE_init+0x24>)
    205a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    205c:	4b06      	ldr	r3, [pc, #24]	; (2078 <LIVE_PULSE_init+0x28>)
    205e:	4798      	blx	r3
    2060:	4603      	mov	r3, r0
    2062:	461a      	mov	r2, r3
    2064:	4905      	ldr	r1, [pc, #20]	; (207c <LIVE_PULSE_init+0x2c>)
    2066:	4806      	ldr	r0, [pc, #24]	; (2080 <LIVE_PULSE_init+0x30>)
    2068:	4b06      	ldr	r3, [pc, #24]	; (2084 <LIVE_PULSE_init+0x34>)
    206a:	4798      	blx	r3
}
    206c:	bf00      	nop
    206e:	bd80      	pop	{r7, pc}
    2070:	00002029 	.word	0x00002029
    2074:	00002019 	.word	0x00002019
    2078:	000085c5 	.word	0x000085c5
    207c:	43001800 	.word	0x43001800
    2080:	200014e4 	.word	0x200014e4
    2084:	00002a11 	.word	0x00002a11

00002088 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2088:	b580      	push	{r7, lr}
    208a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    208c:	4804      	ldr	r0, [pc, #16]	; (20a0 <TIMER_HVAC_CLOCK_init+0x18>)
    208e:	4b05      	ldr	r3, [pc, #20]	; (20a4 <TIMER_HVAC_CLOCK_init+0x1c>)
    2090:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2092:	2244      	movs	r2, #68	; 0x44
    2094:	2119      	movs	r1, #25
    2096:	4804      	ldr	r0, [pc, #16]	; (20a8 <TIMER_HVAC_CLOCK_init+0x20>)
    2098:	4b04      	ldr	r3, [pc, #16]	; (20ac <TIMER_HVAC_CLOCK_init+0x24>)
    209a:	4798      	blx	r3
}
    209c:	bf00      	nop
    209e:	bd80      	pop	{r7, pc}
    20a0:	40000800 	.word	0x40000800
    20a4:	000010cf 	.word	0x000010cf
    20a8:	40001c00 	.word	0x40001c00
    20ac:	00000f29 	.word	0x00000f29

000020b0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    20b0:	b580      	push	{r7, lr}
    20b2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    20b4:	4b05      	ldr	r3, [pc, #20]	; (20cc <TIMER_HVAC_init+0x1c>)
    20b6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    20b8:	4b05      	ldr	r3, [pc, #20]	; (20d0 <TIMER_HVAC_init+0x20>)
    20ba:	4798      	blx	r3
    20bc:	4603      	mov	r3, r0
    20be:	461a      	mov	r2, r3
    20c0:	4904      	ldr	r1, [pc, #16]	; (20d4 <TIMER_HVAC_init+0x24>)
    20c2:	4805      	ldr	r0, [pc, #20]	; (20d8 <TIMER_HVAC_init+0x28>)
    20c4:	4b05      	ldr	r3, [pc, #20]	; (20dc <TIMER_HVAC_init+0x2c>)
    20c6:	4798      	blx	r3
}
    20c8:	bf00      	nop
    20ca:	bd80      	pop	{r7, pc}
    20cc:	00002089 	.word	0x00002089
    20d0:	000079b1 	.word	0x000079b1
    20d4:	41016000 	.word	0x41016000
    20d8:	20001588 	.word	0x20001588
    20dc:	00002e5d 	.word	0x00002e5d

000020e0 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    20e4:	4804      	ldr	r0, [pc, #16]	; (20f8 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    20e6:	4b05      	ldr	r3, [pc, #20]	; (20fc <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    20e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20ea:	2244      	movs	r2, #68	; 0x44
    20ec:	2119      	movs	r1, #25
    20ee:	4804      	ldr	r0, [pc, #16]	; (2100 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    20f2:	4798      	blx	r3
}
    20f4:	bf00      	nop
    20f6:	bd80      	pop	{r7, pc}
    20f8:	40000800 	.word	0x40000800
    20fc:	000010ef 	.word	0x000010ef
    2100:	40001c00 	.word	0x40001c00
    2104:	00000f29 	.word	0x00000f29

00002108 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2108:	b580      	push	{r7, lr}
    210a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    210c:	4b05      	ldr	r3, [pc, #20]	; (2124 <TIMER_TEMPERATURES_init+0x1c>)
    210e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2110:	4b05      	ldr	r3, [pc, #20]	; (2128 <TIMER_TEMPERATURES_init+0x20>)
    2112:	4798      	blx	r3
    2114:	4603      	mov	r3, r0
    2116:	461a      	mov	r2, r3
    2118:	4904      	ldr	r1, [pc, #16]	; (212c <TIMER_TEMPERATURES_init+0x24>)
    211a:	4805      	ldr	r0, [pc, #20]	; (2130 <TIMER_TEMPERATURES_init+0x28>)
    211c:	4b05      	ldr	r3, [pc, #20]	; (2134 <TIMER_TEMPERATURES_init+0x2c>)
    211e:	4798      	blx	r3
}
    2120:	bf00      	nop
    2122:	bd80      	pop	{r7, pc}
    2124:	000020e1 	.word	0x000020e1
    2128:	000079b1 	.word	0x000079b1
    212c:	41018000 	.word	0x41018000
    2130:	200013f0 	.word	0x200013f0
    2134:	00002e5d 	.word	0x00002e5d

00002138 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2138:	b580      	push	{r7, lr}
    213a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    213c:	2102      	movs	r1, #2
    213e:	2018      	movs	r0, #24
    2140:	4b0f      	ldr	r3, [pc, #60]	; (2180 <CDCUSB_PORT_init+0x48>)
    2142:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2144:	2100      	movs	r1, #0
    2146:	2018      	movs	r0, #24
    2148:	4b0e      	ldr	r3, [pc, #56]	; (2184 <CDCUSB_PORT_init+0x4c>)
    214a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    214c:	2100      	movs	r1, #0
    214e:	2018      	movs	r0, #24
    2150:	4b0d      	ldr	r3, [pc, #52]	; (2188 <CDCUSB_PORT_init+0x50>)
    2152:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2154:	490d      	ldr	r1, [pc, #52]	; (218c <CDCUSB_PORT_init+0x54>)
    2156:	2018      	movs	r0, #24
    2158:	4b0d      	ldr	r3, [pc, #52]	; (2190 <CDCUSB_PORT_init+0x58>)
    215a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    215c:	2102      	movs	r1, #2
    215e:	2019      	movs	r0, #25
    2160:	4b07      	ldr	r3, [pc, #28]	; (2180 <CDCUSB_PORT_init+0x48>)
    2162:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2164:	2100      	movs	r1, #0
    2166:	2019      	movs	r0, #25
    2168:	4b06      	ldr	r3, [pc, #24]	; (2184 <CDCUSB_PORT_init+0x4c>)
    216a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    216c:	2100      	movs	r1, #0
    216e:	2019      	movs	r0, #25
    2170:	4b05      	ldr	r3, [pc, #20]	; (2188 <CDCUSB_PORT_init+0x50>)
    2172:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2174:	4907      	ldr	r1, [pc, #28]	; (2194 <CDCUSB_PORT_init+0x5c>)
    2176:	2019      	movs	r0, #25
    2178:	4b05      	ldr	r3, [pc, #20]	; (2190 <CDCUSB_PORT_init+0x58>)
    217a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    217c:	bf00      	nop
    217e:	bd80      	pop	{r7, pc}
    2180:	0000177d 	.word	0x0000177d
    2184:	000017b5 	.word	0x000017b5
    2188:	00001729 	.word	0x00001729
    218c:	00180007 	.word	0x00180007
    2190:	0000175d 	.word	0x0000175d
    2194:	00190007 	.word	0x00190007

00002198 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2198:	b580      	push	{r7, lr}
    219a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    219c:	2242      	movs	r2, #66	; 0x42
    219e:	210a      	movs	r1, #10
    21a0:	4805      	ldr	r0, [pc, #20]	; (21b8 <CDCUSB_CLOCK_init+0x20>)
    21a2:	4b06      	ldr	r3, [pc, #24]	; (21bc <CDCUSB_CLOCK_init+0x24>)
    21a4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    21a6:	4806      	ldr	r0, [pc, #24]	; (21c0 <CDCUSB_CLOCK_init+0x28>)
    21a8:	4b06      	ldr	r3, [pc, #24]	; (21c4 <CDCUSB_CLOCK_init+0x2c>)
    21aa:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    21ac:	4804      	ldr	r0, [pc, #16]	; (21c0 <CDCUSB_CLOCK_init+0x28>)
    21ae:	4b06      	ldr	r3, [pc, #24]	; (21c8 <CDCUSB_CLOCK_init+0x30>)
    21b0:	4798      	blx	r3
}
    21b2:	bf00      	nop
    21b4:	bd80      	pop	{r7, pc}
    21b6:	bf00      	nop
    21b8:	40001c00 	.word	0x40001c00
    21bc:	00000f29 	.word	0x00000f29
    21c0:	40000800 	.word	0x40000800
    21c4:	00000f4f 	.word	0x00000f4f
    21c8:	0000106f 	.word	0x0000106f

000021cc <CDCUSB_init>:

void CDCUSB_init(void)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    21d0:	4b03      	ldr	r3, [pc, #12]	; (21e0 <CDCUSB_init+0x14>)
    21d2:	4798      	blx	r3
	usb_d_init();
    21d4:	4b03      	ldr	r3, [pc, #12]	; (21e4 <CDCUSB_init+0x18>)
    21d6:	4798      	blx	r3
	CDCUSB_PORT_init();
    21d8:	4b03      	ldr	r3, [pc, #12]	; (21e8 <CDCUSB_init+0x1c>)
    21da:	4798      	blx	r3
}
    21dc:	bf00      	nop
    21de:	bd80      	pop	{r7, pc}
    21e0:	00002199 	.word	0x00002199
    21e4:	000036b9 	.word	0x000036b9
    21e8:	00002139 	.word	0x00002139

000021ec <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    21f0:	4802      	ldr	r0, [pc, #8]	; (21fc <WATCHDOG_CLOCK_init+0x10>)
    21f2:	4b03      	ldr	r3, [pc, #12]	; (2200 <WATCHDOG_CLOCK_init+0x14>)
    21f4:	4798      	blx	r3
}
    21f6:	bf00      	nop
    21f8:	bd80      	pop	{r7, pc}
    21fa:	bf00      	nop
    21fc:	40000800 	.word	0x40000800
    2200:	00000fcf 	.word	0x00000fcf

00002204 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2204:	b580      	push	{r7, lr}
    2206:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2208:	4b03      	ldr	r3, [pc, #12]	; (2218 <WATCHDOG_init+0x14>)
    220a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    220c:	4903      	ldr	r1, [pc, #12]	; (221c <WATCHDOG_init+0x18>)
    220e:	4804      	ldr	r0, [pc, #16]	; (2220 <WATCHDOG_init+0x1c>)
    2210:	4b04      	ldr	r3, [pc, #16]	; (2224 <WATCHDOG_init+0x20>)
    2212:	4798      	blx	r3
}
    2214:	bf00      	nop
    2216:	bd80      	pop	{r7, pc}
    2218:	000021ed 	.word	0x000021ed
    221c:	40002000 	.word	0x40002000
    2220:	200015c8 	.word	0x200015c8
    2224:	000017fd 	.word	0x000017fd

00002228 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2228:	b580      	push	{r7, lr}
    222a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    222c:	4904      	ldr	r1, [pc, #16]	; (2240 <CAN_CCU_PORT_init+0x18>)
    222e:	202d      	movs	r0, #45	; 0x2d
    2230:	4b04      	ldr	r3, [pc, #16]	; (2244 <CAN_CCU_PORT_init+0x1c>)
    2232:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2234:	4904      	ldr	r1, [pc, #16]	; (2248 <CAN_CCU_PORT_init+0x20>)
    2236:	202c      	movs	r0, #44	; 0x2c
    2238:	4b02      	ldr	r3, [pc, #8]	; (2244 <CAN_CCU_PORT_init+0x1c>)
    223a:	4798      	blx	r3
}
    223c:	bf00      	nop
    223e:	bd80      	pop	{r7, pc}
    2240:	002d0007 	.word	0x002d0007
    2244:	0000175d 	.word	0x0000175d
    2248:	002c0007 	.word	0x002c0007

0000224c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    224c:	b580      	push	{r7, lr}
    224e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2250:	4807      	ldr	r0, [pc, #28]	; (2270 <CAN_CCU_init+0x24>)
    2252:	4b08      	ldr	r3, [pc, #32]	; (2274 <CAN_CCU_init+0x28>)
    2254:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2256:	2243      	movs	r2, #67	; 0x43
    2258:	211c      	movs	r1, #28
    225a:	4807      	ldr	r0, [pc, #28]	; (2278 <CAN_CCU_init+0x2c>)
    225c:	4b07      	ldr	r3, [pc, #28]	; (227c <CAN_CCU_init+0x30>)
    225e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2260:	4907      	ldr	r1, [pc, #28]	; (2280 <CAN_CCU_init+0x34>)
    2262:	4808      	ldr	r0, [pc, #32]	; (2284 <CAN_CCU_init+0x38>)
    2264:	4b08      	ldr	r3, [pc, #32]	; (2288 <CAN_CCU_init+0x3c>)
    2266:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2268:	4b08      	ldr	r3, [pc, #32]	; (228c <CAN_CCU_init+0x40>)
    226a:	4798      	blx	r3
}
    226c:	bf00      	nop
    226e:	bd80      	pop	{r7, pc}
    2270:	40000800 	.word	0x40000800
    2274:	00000f8f 	.word	0x00000f8f
    2278:	40001c00 	.word	0x40001c00
    227c:	00000f29 	.word	0x00000f29
    2280:	42000400 	.word	0x42000400
    2284:	20001520 	.word	0x20001520
    2288:	00002535 	.word	0x00002535
    228c:	00002229 	.word	0x00002229

00002290 <system_init>:

void system_init(void)
{
    2290:	b580      	push	{r7, lr}
    2292:	af00      	add	r7, sp, #0
	init_mcu();
    2294:	4b5e      	ldr	r3, [pc, #376]	; (2410 <system_init+0x180>)
    2296:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    2298:	2100      	movs	r1, #0
    229a:	2007      	movs	r0, #7
    229c:	4b5d      	ldr	r3, [pc, #372]	; (2414 <system_init+0x184>)
    229e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    22a0:	2102      	movs	r1, #2
    22a2:	2007      	movs	r0, #7
    22a4:	4b5c      	ldr	r3, [pc, #368]	; (2418 <system_init+0x188>)
    22a6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    22a8:	f04f 31ff 	mov.w	r1, #4294967295
    22ac:	2007      	movs	r0, #7
    22ae:	4b5b      	ldr	r3, [pc, #364]	; (241c <system_init+0x18c>)
    22b0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    22b2:	2101      	movs	r1, #1
    22b4:	200f      	movs	r0, #15
    22b6:	4b57      	ldr	r3, [pc, #348]	; (2414 <system_init+0x184>)
    22b8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    22ba:	2102      	movs	r1, #2
    22bc:	200f      	movs	r0, #15
    22be:	4b56      	ldr	r3, [pc, #344]	; (2418 <system_init+0x188>)
    22c0:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    22c2:	f04f 31ff 	mov.w	r1, #4294967295
    22c6:	200f      	movs	r0, #15
    22c8:	4b54      	ldr	r3, [pc, #336]	; (241c <system_init+0x18c>)
    22ca:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    22cc:	2101      	movs	r1, #1
    22ce:	2013      	movs	r0, #19
    22d0:	4b50      	ldr	r3, [pc, #320]	; (2414 <system_init+0x184>)
    22d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    22d4:	2102      	movs	r1, #2
    22d6:	2013      	movs	r0, #19
    22d8:	4b4f      	ldr	r3, [pc, #316]	; (2418 <system_init+0x188>)
    22da:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    22dc:	f04f 31ff 	mov.w	r1, #4294967295
    22e0:	2013      	movs	r0, #19
    22e2:	4b4e      	ldr	r3, [pc, #312]	; (241c <system_init+0x18c>)
    22e4:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    22e6:	2101      	movs	r1, #1
    22e8:	201b      	movs	r0, #27
    22ea:	4b4a      	ldr	r3, [pc, #296]	; (2414 <system_init+0x184>)
    22ec:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    22ee:	2102      	movs	r1, #2
    22f0:	201b      	movs	r0, #27
    22f2:	4b49      	ldr	r3, [pc, #292]	; (2418 <system_init+0x188>)
    22f4:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    22f6:	f04f 31ff 	mov.w	r1, #4294967295
    22fa:	201b      	movs	r0, #27
    22fc:	4b47      	ldr	r3, [pc, #284]	; (241c <system_init+0x18c>)
    22fe:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2300:	2101      	movs	r1, #1
    2302:	2027      	movs	r0, #39	; 0x27
    2304:	4b43      	ldr	r3, [pc, #268]	; (2414 <system_init+0x184>)
    2306:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2308:	2102      	movs	r1, #2
    230a:	2027      	movs	r0, #39	; 0x27
    230c:	4b42      	ldr	r3, [pc, #264]	; (2418 <system_init+0x188>)
    230e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2310:	f04f 31ff 	mov.w	r1, #4294967295
    2314:	2027      	movs	r0, #39	; 0x27
    2316:	4b41      	ldr	r3, [pc, #260]	; (241c <system_init+0x18c>)
    2318:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    231a:	2101      	movs	r1, #1
    231c:	203d      	movs	r0, #61	; 0x3d
    231e:	4b3d      	ldr	r3, [pc, #244]	; (2414 <system_init+0x184>)
    2320:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2322:	2102      	movs	r1, #2
    2324:	203d      	movs	r0, #61	; 0x3d
    2326:	4b3c      	ldr	r3, [pc, #240]	; (2418 <system_init+0x188>)
    2328:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    232a:	f04f 31ff 	mov.w	r1, #4294967295
    232e:	203d      	movs	r0, #61	; 0x3d
    2330:	4b3a      	ldr	r3, [pc, #232]	; (241c <system_init+0x18c>)
    2332:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2334:	2101      	movs	r1, #1
    2336:	203f      	movs	r0, #63	; 0x3f
    2338:	4b37      	ldr	r3, [pc, #220]	; (2418 <system_init+0x188>)
    233a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    233c:	2101      	movs	r1, #1
    233e:	203f      	movs	r0, #63	; 0x3f
    2340:	4b37      	ldr	r3, [pc, #220]	; (2420 <system_init+0x190>)
    2342:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2344:	f04f 31ff 	mov.w	r1, #4294967295
    2348:	203f      	movs	r0, #63	; 0x3f
    234a:	4b34      	ldr	r3, [pc, #208]	; (241c <system_init+0x18c>)
    234c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    234e:	2100      	movs	r1, #0
    2350:	204d      	movs	r0, #77	; 0x4d
    2352:	4b30      	ldr	r3, [pc, #192]	; (2414 <system_init+0x184>)
    2354:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2356:	2102      	movs	r1, #2
    2358:	204d      	movs	r0, #77	; 0x4d
    235a:	4b2f      	ldr	r3, [pc, #188]	; (2418 <system_init+0x188>)
    235c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    235e:	f04f 31ff 	mov.w	r1, #4294967295
    2362:	204d      	movs	r0, #77	; 0x4d
    2364:	4b2d      	ldr	r3, [pc, #180]	; (241c <system_init+0x18c>)
    2366:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2368:	2101      	movs	r1, #1
    236a:	204e      	movs	r0, #78	; 0x4e
    236c:	4b29      	ldr	r3, [pc, #164]	; (2414 <system_init+0x184>)
    236e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2370:	2102      	movs	r1, #2
    2372:	204e      	movs	r0, #78	; 0x4e
    2374:	4b28      	ldr	r3, [pc, #160]	; (2418 <system_init+0x188>)
    2376:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2378:	f04f 31ff 	mov.w	r1, #4294967295
    237c:	204e      	movs	r0, #78	; 0x4e
    237e:	4b27      	ldr	r3, [pc, #156]	; (241c <system_init+0x18c>)
    2380:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2382:	2100      	movs	r1, #0
    2384:	204f      	movs	r0, #79	; 0x4f
    2386:	4b23      	ldr	r3, [pc, #140]	; (2414 <system_init+0x184>)
    2388:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    238a:	2102      	movs	r1, #2
    238c:	204f      	movs	r0, #79	; 0x4f
    238e:	4b22      	ldr	r3, [pc, #136]	; (2418 <system_init+0x188>)
    2390:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2392:	f04f 31ff 	mov.w	r1, #4294967295
    2396:	204f      	movs	r0, #79	; 0x4f
    2398:	4b20      	ldr	r3, [pc, #128]	; (241c <system_init+0x18c>)
    239a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    239c:	2100      	movs	r1, #0
    239e:	2052      	movs	r0, #82	; 0x52
    23a0:	4b1c      	ldr	r3, [pc, #112]	; (2414 <system_init+0x184>)
    23a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    23a4:	2102      	movs	r1, #2
    23a6:	2052      	movs	r0, #82	; 0x52
    23a8:	4b1b      	ldr	r3, [pc, #108]	; (2418 <system_init+0x188>)
    23aa:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    23ac:	f04f 31ff 	mov.w	r1, #4294967295
    23b0:	2052      	movs	r0, #82	; 0x52
    23b2:	4b1a      	ldr	r3, [pc, #104]	; (241c <system_init+0x18c>)
    23b4:	4798      	blx	r3

	CRC_CALC_init();
    23b6:	4b1b      	ldr	r3, [pc, #108]	; (2424 <system_init+0x194>)
    23b8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    23ba:	4b1b      	ldr	r3, [pc, #108]	; (2428 <system_init+0x198>)
    23bc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    23be:	4b1b      	ldr	r3, [pc, #108]	; (242c <system_init+0x19c>)
    23c0:	4798      	blx	r3

	QSPI_N25Q256_init();
    23c2:	4b1b      	ldr	r3, [pc, #108]	; (2430 <system_init+0x1a0>)
    23c4:	4798      	blx	r3

	DATETIME_CLOCK_init();
    23c6:	4b1b      	ldr	r3, [pc, #108]	; (2434 <system_init+0x1a4>)
    23c8:	4798      	blx	r3

	I2C_HEATERS_init();
    23ca:	4b1b      	ldr	r3, [pc, #108]	; (2438 <system_init+0x1a8>)
    23cc:	4798      	blx	r3

	SPI_TEMP_init();
    23ce:	4b1b      	ldr	r3, [pc, #108]	; (243c <system_init+0x1ac>)
    23d0:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    23d2:	4b1b      	ldr	r3, [pc, #108]	; (2440 <system_init+0x1b0>)
    23d4:	4798      	blx	r3

	SPI_HI3593_init();
    23d6:	4b1b      	ldr	r3, [pc, #108]	; (2444 <system_init+0x1b4>)
    23d8:	4798      	blx	r3

	I2C_FANS_init();
    23da:	4b1b      	ldr	r3, [pc, #108]	; (2448 <system_init+0x1b8>)
    23dc:	4798      	blx	r3

	TIMER_USB_init();
    23de:	4b1b      	ldr	r3, [pc, #108]	; (244c <system_init+0x1bc>)
    23e0:	4798      	blx	r3
	TIMER_ARINC_init();
    23e2:	4b1b      	ldr	r3, [pc, #108]	; (2450 <system_init+0x1c0>)
    23e4:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    23e6:	4b1b      	ldr	r3, [pc, #108]	; (2454 <system_init+0x1c4>)
    23e8:	4798      	blx	r3
	TIMER_INTERFACE_init();
    23ea:	4b1b      	ldr	r3, [pc, #108]	; (2458 <system_init+0x1c8>)
    23ec:	4798      	blx	r3
	TIMER_EVENT_init();
    23ee:	4b1b      	ldr	r3, [pc, #108]	; (245c <system_init+0x1cc>)
    23f0:	4798      	blx	r3
	LIVE_PULSE_init();
    23f2:	4b1b      	ldr	r3, [pc, #108]	; (2460 <system_init+0x1d0>)
    23f4:	4798      	blx	r3

	TIMER_HVAC_init();
    23f6:	4b1b      	ldr	r3, [pc, #108]	; (2464 <system_init+0x1d4>)
    23f8:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    23fa:	4b1b      	ldr	r3, [pc, #108]	; (2468 <system_init+0x1d8>)
    23fc:	4798      	blx	r3

	CDCUSB_init();
    23fe:	4b1b      	ldr	r3, [pc, #108]	; (246c <system_init+0x1dc>)
    2400:	4798      	blx	r3

	WATCHDOG_init();
    2402:	4b1b      	ldr	r3, [pc, #108]	; (2470 <system_init+0x1e0>)
    2404:	4798      	blx	r3
	CAN_CCU_init();
    2406:	4b1b      	ldr	r3, [pc, #108]	; (2474 <system_init+0x1e4>)
    2408:	4798      	blx	r3
}
    240a:	bf00      	nop
    240c:	bd80      	pop	{r7, pc}
    240e:	bf00      	nop
    2410:	000017ed 	.word	0x000017ed
    2414:	000017b5 	.word	0x000017b5
    2418:	0000177d 	.word	0x0000177d
    241c:	0000175d 	.word	0x0000175d
    2420:	00001729 	.word	0x00001729
    2424:	0000184d 	.word	0x0000184d
    2428:	00001879 	.word	0x00001879
    242c:	000019a1 	.word	0x000019a1
    2430:	00001ae9 	.word	0x00001ae9
    2434:	00001b2d 	.word	0x00001b2d
    2438:	00001bbd 	.word	0x00001bbd
    243c:	00001c89 	.word	0x00001c89
    2440:	00001d21 	.word	0x00001d21
    2444:	00001ded 	.word	0x00001ded
    2448:	00001e85 	.word	0x00001e85
    244c:	00001eb1 	.word	0x00001eb1
    2450:	00001ef9 	.word	0x00001ef9
    2454:	00001f41 	.word	0x00001f41
    2458:	00001f89 	.word	0x00001f89
    245c:	00001fd1 	.word	0x00001fd1
    2460:	00002051 	.word	0x00002051
    2464:	000020b1 	.word	0x000020b1
    2468:	00002109 	.word	0x00002109
    246c:	000021cd 	.word	0x000021cd
    2470:	00002205 	.word	0x00002205
    2474:	0000224d 	.word	0x0000224d

00002478 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    2478:	b480      	push	{r7}
    247a:	b085      	sub	sp, #20
    247c:	af00      	add	r7, sp, #0
    247e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2480:	f3ef 8310 	mrs	r3, PRIMASK
    2484:	60fb      	str	r3, [r7, #12]
  return(result);
    2486:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    248c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    248e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2492:	bf00      	nop
    2494:	3714      	adds	r7, #20
    2496:	46bd      	mov	sp, r7
    2498:	f85d 7b04 	ldr.w	r7, [sp], #4
    249c:	4770      	bx	lr

0000249e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    249e:	b480      	push	{r7}
    24a0:	b085      	sub	sp, #20
    24a2:	af00      	add	r7, sp, #0
    24a4:	6078      	str	r0, [r7, #4]
    24a6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	681b      	ldr	r3, [r3, #0]
    24ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    24b0:	68fb      	ldr	r3, [r7, #12]
    24b2:	f383 8810 	msr	PRIMASK, r3
}
    24b6:	bf00      	nop
    24b8:	3714      	adds	r7, #20
    24ba:	46bd      	mov	sp, r7
    24bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c0:	4770      	bx	lr
	...

000024c4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b084      	sub	sp, #16
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
    24cc:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    24ce:	2300      	movs	r3, #0
    24d0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	2b00      	cmp	r3, #0
    24d6:	bf14      	ite	ne
    24d8:	2301      	movne	r3, #1
    24da:	2300      	moveq	r3, #0
    24dc:	b2db      	uxtb	r3, r3
    24de:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    24e2:	4911      	ldr	r1, [pc, #68]	; (2528 <calendar_init+0x64>)
    24e4:	4618      	mov	r0, r3
    24e6:	4b11      	ldr	r3, [pc, #68]	; (252c <calendar_init+0x68>)
    24e8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	681a      	ldr	r2, [r3, #0]
    24ee:	683b      	ldr	r3, [r7, #0]
    24f0:	429a      	cmp	r2, r3
    24f2:	d101      	bne.n	24f8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    24f4:	2300      	movs	r3, #0
    24f6:	e013      	b.n	2520 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	681b      	ldr	r3, [r3, #0]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d002      	beq.n	2506 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2500:	f06f 0311 	mvn.w	r3, #17
    2504:	e00c      	b.n	2520 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	683a      	ldr	r2, [r7, #0]
    250a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	4618      	mov	r0, r3
    2510:	4b07      	ldr	r3, [pc, #28]	; (2530 <calendar_init+0x6c>)
    2512:	4798      	blx	r3
    2514:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	f240 72b2 	movw	r2, #1970	; 0x7b2
    251c:	619a      	str	r2, [r3, #24]

	return ret;
    251e:	68fb      	ldr	r3, [r7, #12]
}
    2520:	4618      	mov	r0, r3
    2522:	3710      	adds	r7, #16
    2524:	46bd      	mov	sp, r7
    2526:	bd80      	pop	{r7, pc}
    2528:	00010d64 	.word	0x00010d64
    252c:	00003c61 	.word	0x00003c61
    2530:	00006009 	.word	0x00006009

00002534 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2534:	b580      	push	{r7, lr}
    2536:	b084      	sub	sp, #16
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
    253c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	2b00      	cmp	r3, #0
    2542:	d004      	beq.n	254e <can_async_init+0x1a>
    2544:	683b      	ldr	r3, [r7, #0]
    2546:	2b00      	cmp	r3, #0
    2548:	d001      	beq.n	254e <can_async_init+0x1a>
    254a:	2301      	movs	r3, #1
    254c:	e000      	b.n	2550 <can_async_init+0x1c>
    254e:	2300      	movs	r3, #0
    2550:	f003 0301 	and.w	r3, r3, #1
    2554:	b2db      	uxtb	r3, r3
    2556:	2241      	movs	r2, #65	; 0x41
    2558:	490e      	ldr	r1, [pc, #56]	; (2594 <can_async_init+0x60>)
    255a:	4618      	mov	r0, r3
    255c:	4b0e      	ldr	r3, [pc, #56]	; (2598 <can_async_init+0x64>)
    255e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	6839      	ldr	r1, [r7, #0]
    2564:	4618      	mov	r0, r3
    2566:	4b0d      	ldr	r3, [pc, #52]	; (259c <can_async_init+0x68>)
    2568:	4798      	blx	r3
    256a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	2b00      	cmp	r3, #0
    2570:	d001      	beq.n	2576 <can_async_init+0x42>
		return rc;
    2572:	68fb      	ldr	r3, [r7, #12]
    2574:	e009      	b.n	258a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	4a09      	ldr	r2, [pc, #36]	; (25a0 <can_async_init+0x6c>)
    257a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	4a09      	ldr	r2, [pc, #36]	; (25a4 <can_async_init+0x70>)
    2580:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	4a08      	ldr	r2, [pc, #32]	; (25a8 <can_async_init+0x74>)
    2586:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2588:	2300      	movs	r3, #0
}
    258a:	4618      	mov	r0, r3
    258c:	3710      	adds	r7, #16
    258e:	46bd      	mov	sp, r7
    2590:	bd80      	pop	{r7, pc}
    2592:	bf00      	nop
    2594:	00010d80 	.word	0x00010d80
    2598:	00003c61 	.word	0x00003c61
    259c:	000041bd 	.word	0x000041bd
    25a0:	000025ad 	.word	0x000025ad
    25a4:	000025d1 	.word	0x000025d1
    25a8:	000025f5 	.word	0x000025f5

000025ac <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b084      	sub	sp, #16
    25b0:	af00      	add	r7, sp, #0
    25b2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	69db      	ldr	r3, [r3, #28]
    25bc:	2b00      	cmp	r3, #0
    25be:	d003      	beq.n	25c8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    25c0:	68fb      	ldr	r3, [r7, #12]
    25c2:	69db      	ldr	r3, [r3, #28]
    25c4:	68f8      	ldr	r0, [r7, #12]
    25c6:	4798      	blx	r3
	}
}
    25c8:	bf00      	nop
    25ca:	3710      	adds	r7, #16
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}

000025d0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    25d0:	b580      	push	{r7, lr}
    25d2:	b084      	sub	sp, #16
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    25dc:	68fb      	ldr	r3, [r7, #12]
    25de:	6a1b      	ldr	r3, [r3, #32]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d003      	beq.n	25ec <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    25e4:	68fb      	ldr	r3, [r7, #12]
    25e6:	6a1b      	ldr	r3, [r3, #32]
    25e8:	68f8      	ldr	r0, [r7, #12]
    25ea:	4798      	blx	r3
	}
}
    25ec:	bf00      	nop
    25ee:	3710      	adds	r7, #16
    25f0:	46bd      	mov	sp, r7
    25f2:	bd80      	pop	{r7, pc}

000025f4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b084      	sub	sp, #16
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
    25fc:	460b      	mov	r3, r1
    25fe:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2604:	68fb      	ldr	r3, [r7, #12]
    2606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2608:	2b00      	cmp	r3, #0
    260a:	d005      	beq.n	2618 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    260c:	68fb      	ldr	r3, [r7, #12]
    260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2610:	78fa      	ldrb	r2, [r7, #3]
    2612:	4611      	mov	r1, r2
    2614:	68f8      	ldr	r0, [r7, #12]
    2616:	4798      	blx	r3
	}
}
    2618:	bf00      	nop
    261a:	3710      	adds	r7, #16
    261c:	46bd      	mov	sp, r7
    261e:	bd80      	pop	{r7, pc}

00002620 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2620:	b580      	push	{r7, lr}
    2622:	b082      	sub	sp, #8
    2624:	af00      	add	r7, sp, #0
    2626:	6078      	str	r0, [r7, #4]
    2628:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	2b00      	cmp	r3, #0
    262e:	d004      	beq.n	263a <crc_sync_init+0x1a>
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	2b00      	cmp	r3, #0
    2634:	d001      	beq.n	263a <crc_sync_init+0x1a>
    2636:	2301      	movs	r3, #1
    2638:	e000      	b.n	263c <crc_sync_init+0x1c>
    263a:	2300      	movs	r3, #0
    263c:	f003 0301 	and.w	r3, r3, #1
    2640:	b2db      	uxtb	r3, r3
    2642:	222b      	movs	r2, #43	; 0x2b
    2644:	4906      	ldr	r1, [pc, #24]	; (2660 <crc_sync_init+0x40>)
    2646:	4618      	mov	r0, r3
    2648:	4b06      	ldr	r3, [pc, #24]	; (2664 <crc_sync_init+0x44>)
    264a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	6839      	ldr	r1, [r7, #0]
    2650:	4618      	mov	r0, r3
    2652:	4b05      	ldr	r3, [pc, #20]	; (2668 <crc_sync_init+0x48>)
    2654:	4798      	blx	r3
    2656:	4603      	mov	r3, r0
}
    2658:	4618      	mov	r0, r3
    265a:	3708      	adds	r7, #8
    265c:	46bd      	mov	sp, r7
    265e:	bd80      	pop	{r7, pc}
    2660:	00010d9c 	.word	0x00010d9c
    2664:	00003c61 	.word	0x00003c61
    2668:	000048c1 	.word	0x000048c1

0000266c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    266c:	b590      	push	{r4, r7, lr}
    266e:	b083      	sub	sp, #12
    2670:	af00      	add	r7, sp, #0
    2672:	4603      	mov	r3, r0
    2674:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2676:	4b07      	ldr	r3, [pc, #28]	; (2694 <delay_us+0x28>)
    2678:	681c      	ldr	r4, [r3, #0]
    267a:	88fb      	ldrh	r3, [r7, #6]
    267c:	4618      	mov	r0, r3
    267e:	4b06      	ldr	r3, [pc, #24]	; (2698 <delay_us+0x2c>)
    2680:	4798      	blx	r3
    2682:	4603      	mov	r3, r0
    2684:	4619      	mov	r1, r3
    2686:	4620      	mov	r0, r4
    2688:	4b04      	ldr	r3, [pc, #16]	; (269c <delay_us+0x30>)
    268a:	4798      	blx	r3
}
    268c:	bf00      	nop
    268e:	370c      	adds	r7, #12
    2690:	46bd      	mov	sp, r7
    2692:	bd90      	pop	{r4, r7, pc}
    2694:	20000ac8 	.word	0x20000ac8
    2698:	00004615 	.word	0x00004615
    269c:	000047a9 	.word	0x000047a9

000026a0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    26a0:	b590      	push	{r4, r7, lr}
    26a2:	b083      	sub	sp, #12
    26a4:	af00      	add	r7, sp, #0
    26a6:	4603      	mov	r3, r0
    26a8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    26aa:	4b07      	ldr	r3, [pc, #28]	; (26c8 <delay_ms+0x28>)
    26ac:	681c      	ldr	r4, [r3, #0]
    26ae:	88fb      	ldrh	r3, [r7, #6]
    26b0:	4618      	mov	r0, r3
    26b2:	4b06      	ldr	r3, [pc, #24]	; (26cc <delay_ms+0x2c>)
    26b4:	4798      	blx	r3
    26b6:	4603      	mov	r3, r0
    26b8:	4619      	mov	r1, r3
    26ba:	4620      	mov	r0, r4
    26bc:	4b04      	ldr	r3, [pc, #16]	; (26d0 <delay_ms+0x30>)
    26be:	4798      	blx	r3
}
    26c0:	bf00      	nop
    26c2:	370c      	adds	r7, #12
    26c4:	46bd      	mov	sp, r7
    26c6:	bd90      	pop	{r4, r7, pc}
    26c8:	20000ac8 	.word	0x20000ac8
    26cc:	00004781 	.word	0x00004781
    26d0:	000047a9 	.word	0x000047a9

000026d4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	af00      	add	r7, sp, #0
	return _event_system_init();
    26d8:	4b02      	ldr	r3, [pc, #8]	; (26e4 <event_system_init+0x10>)
    26da:	4798      	blx	r3
    26dc:	4603      	mov	r3, r0
}
    26de:	4618      	mov	r0, r3
    26e0:	bd80      	pop	{r7, pc}
    26e2:	bf00      	nop
    26e4:	0000507d 	.word	0x0000507d

000026e8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b082      	sub	sp, #8
    26ec:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    26ee:	2300      	movs	r3, #0
    26f0:	80fb      	strh	r3, [r7, #6]
    26f2:	e00e      	b.n	2712 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    26f4:	88fb      	ldrh	r3, [r7, #6]
    26f6:	4a0c      	ldr	r2, [pc, #48]	; (2728 <ext_irq_init+0x40>)
    26f8:	00db      	lsls	r3, r3, #3
    26fa:	4413      	add	r3, r2
    26fc:	f04f 32ff 	mov.w	r2, #4294967295
    2700:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2702:	88fb      	ldrh	r3, [r7, #6]
    2704:	4a08      	ldr	r2, [pc, #32]	; (2728 <ext_irq_init+0x40>)
    2706:	2100      	movs	r1, #0
    2708:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    270c:	88fb      	ldrh	r3, [r7, #6]
    270e:	3301      	adds	r3, #1
    2710:	80fb      	strh	r3, [r7, #6]
    2712:	88fb      	ldrh	r3, [r7, #6]
    2714:	2b08      	cmp	r3, #8
    2716:	d9ed      	bls.n	26f4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2718:	4804      	ldr	r0, [pc, #16]	; (272c <ext_irq_init+0x44>)
    271a:	4b05      	ldr	r3, [pc, #20]	; (2730 <ext_irq_init+0x48>)
    271c:	4798      	blx	r3
    271e:	4603      	mov	r3, r0
}
    2720:	4618      	mov	r0, r3
    2722:	3708      	adds	r7, #8
    2724:	46bd      	mov	sp, r7
    2726:	bd80      	pop	{r7, pc}
    2728:	20000acc 	.word	0x20000acc
    272c:	0000288d 	.word	0x0000288d
    2730:	00004c01 	.word	0x00004c01

00002734 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2734:	b580      	push	{r7, lr}
    2736:	b086      	sub	sp, #24
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
    273c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    273e:	2300      	movs	r3, #0
    2740:	75fb      	strb	r3, [r7, #23]
    2742:	2300      	movs	r3, #0
    2744:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2746:	2300      	movs	r3, #0
    2748:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    274a:	e012      	b.n	2772 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    274c:	7dfb      	ldrb	r3, [r7, #23]
    274e:	4a4d      	ldr	r2, [pc, #308]	; (2884 <ext_irq_register+0x150>)
    2750:	00db      	lsls	r3, r3, #3
    2752:	4413      	add	r3, r2
    2754:	685a      	ldr	r2, [r3, #4]
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	429a      	cmp	r2, r3
    275a:	d107      	bne.n	276c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    275c:	7dfb      	ldrb	r3, [r7, #23]
    275e:	4949      	ldr	r1, [pc, #292]	; (2884 <ext_irq_register+0x150>)
    2760:	683a      	ldr	r2, [r7, #0]
    2762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2766:	2301      	movs	r3, #1
    2768:	757b      	strb	r3, [r7, #21]
			break;
    276a:	e005      	b.n	2778 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    276c:	7dfb      	ldrb	r3, [r7, #23]
    276e:	3301      	adds	r3, #1
    2770:	75fb      	strb	r3, [r7, #23]
    2772:	7dfb      	ldrb	r3, [r7, #23]
    2774:	2b08      	cmp	r3, #8
    2776:	d9e9      	bls.n	274c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2778:	683b      	ldr	r3, [r7, #0]
    277a:	2b00      	cmp	r3, #0
    277c:	d10e      	bne.n	279c <ext_irq_register+0x68>
		if (!found) {
    277e:	7d7b      	ldrb	r3, [r7, #21]
    2780:	f083 0301 	eor.w	r3, r3, #1
    2784:	b2db      	uxtb	r3, r3
    2786:	2b00      	cmp	r3, #0
    2788:	d002      	beq.n	2790 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    278a:	f06f 030c 	mvn.w	r3, #12
    278e:	e074      	b.n	287a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2790:	2100      	movs	r1, #0
    2792:	6878      	ldr	r0, [r7, #4]
    2794:	4b3c      	ldr	r3, [pc, #240]	; (2888 <ext_irq_register+0x154>)
    2796:	4798      	blx	r3
    2798:	4603      	mov	r3, r0
    279a:	e06e      	b.n	287a <ext_irq_register+0x146>
	}

	if (!found) {
    279c:	7d7b      	ldrb	r3, [r7, #21]
    279e:	f083 0301 	eor.w	r3, r3, #1
    27a2:	b2db      	uxtb	r3, r3
    27a4:	2b00      	cmp	r3, #0
    27a6:	d05a      	beq.n	285e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    27a8:	2300      	movs	r3, #0
    27aa:	75fb      	strb	r3, [r7, #23]
    27ac:	e016      	b.n	27dc <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    27ae:	7dfb      	ldrb	r3, [r7, #23]
    27b0:	4a34      	ldr	r2, [pc, #208]	; (2884 <ext_irq_register+0x150>)
    27b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d10d      	bne.n	27d6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    27ba:	7dfb      	ldrb	r3, [r7, #23]
    27bc:	4931      	ldr	r1, [pc, #196]	; (2884 <ext_irq_register+0x150>)
    27be:	683a      	ldr	r2, [r7, #0]
    27c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    27c4:	7dfb      	ldrb	r3, [r7, #23]
    27c6:	4a2f      	ldr	r2, [pc, #188]	; (2884 <ext_irq_register+0x150>)
    27c8:	00db      	lsls	r3, r3, #3
    27ca:	4413      	add	r3, r2
    27cc:	687a      	ldr	r2, [r7, #4]
    27ce:	605a      	str	r2, [r3, #4]
				found           = true;
    27d0:	2301      	movs	r3, #1
    27d2:	757b      	strb	r3, [r7, #21]
				break;
    27d4:	e005      	b.n	27e2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    27d6:	7dfb      	ldrb	r3, [r7, #23]
    27d8:	3301      	adds	r3, #1
    27da:	75fb      	strb	r3, [r7, #23]
    27dc:	7dfb      	ldrb	r3, [r7, #23]
    27de:	2b08      	cmp	r3, #8
    27e0:	d9e5      	bls.n	27ae <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    27e2:	e036      	b.n	2852 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    27e4:	7dfb      	ldrb	r3, [r7, #23]
    27e6:	4a27      	ldr	r2, [pc, #156]	; (2884 <ext_irq_register+0x150>)
    27e8:	00db      	lsls	r3, r3, #3
    27ea:	4413      	add	r3, r2
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	7dbb      	ldrb	r3, [r7, #22]
    27f0:	4924      	ldr	r1, [pc, #144]	; (2884 <ext_irq_register+0x150>)
    27f2:	00db      	lsls	r3, r3, #3
    27f4:	440b      	add	r3, r1
    27f6:	685b      	ldr	r3, [r3, #4]
    27f8:	429a      	cmp	r2, r3
    27fa:	d227      	bcs.n	284c <ext_irq_register+0x118>
    27fc:	7dbb      	ldrb	r3, [r7, #22]
    27fe:	4a21      	ldr	r2, [pc, #132]	; (2884 <ext_irq_register+0x150>)
    2800:	00db      	lsls	r3, r3, #3
    2802:	4413      	add	r3, r2
    2804:	685b      	ldr	r3, [r3, #4]
    2806:	f1b3 3fff 	cmp.w	r3, #4294967295
    280a:	d01f      	beq.n	284c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    280c:	7dbb      	ldrb	r3, [r7, #22]
    280e:	491d      	ldr	r1, [pc, #116]	; (2884 <ext_irq_register+0x150>)
    2810:	f107 020c 	add.w	r2, r7, #12
    2814:	00db      	lsls	r3, r3, #3
    2816:	440b      	add	r3, r1
    2818:	e893 0003 	ldmia.w	r3, {r0, r1}
    281c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2820:	7dbb      	ldrb	r3, [r7, #22]
    2822:	7dfa      	ldrb	r2, [r7, #23]
    2824:	4817      	ldr	r0, [pc, #92]	; (2884 <ext_irq_register+0x150>)
    2826:	4917      	ldr	r1, [pc, #92]	; (2884 <ext_irq_register+0x150>)
    2828:	00db      	lsls	r3, r3, #3
    282a:	4403      	add	r3, r0
    282c:	00d2      	lsls	r2, r2, #3
    282e:	440a      	add	r2, r1
    2830:	e892 0003 	ldmia.w	r2, {r0, r1}
    2834:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2838:	7dfb      	ldrb	r3, [r7, #23]
    283a:	4a12      	ldr	r2, [pc, #72]	; (2884 <ext_irq_register+0x150>)
    283c:	00db      	lsls	r3, r3, #3
    283e:	4413      	add	r3, r2
    2840:	f107 020c 	add.w	r2, r7, #12
    2844:	e892 0003 	ldmia.w	r2, {r0, r1}
    2848:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    284c:	7dbb      	ldrb	r3, [r7, #22]
    284e:	3301      	adds	r3, #1
    2850:	75bb      	strb	r3, [r7, #22]
    2852:	7dbb      	ldrb	r3, [r7, #22]
    2854:	2b08      	cmp	r3, #8
    2856:	d802      	bhi.n	285e <ext_irq_register+0x12a>
    2858:	7dfb      	ldrb	r3, [r7, #23]
    285a:	2b08      	cmp	r3, #8
    285c:	d9c2      	bls.n	27e4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    285e:	7d7b      	ldrb	r3, [r7, #21]
    2860:	f083 0301 	eor.w	r3, r3, #1
    2864:	b2db      	uxtb	r3, r3
    2866:	2b00      	cmp	r3, #0
    2868:	d002      	beq.n	2870 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    286a:	f06f 030c 	mvn.w	r3, #12
    286e:	e004      	b.n	287a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2870:	2101      	movs	r1, #1
    2872:	6878      	ldr	r0, [r7, #4]
    2874:	4b04      	ldr	r3, [pc, #16]	; (2888 <ext_irq_register+0x154>)
    2876:	4798      	blx	r3
    2878:	4603      	mov	r3, r0
}
    287a:	4618      	mov	r0, r3
    287c:	3718      	adds	r7, #24
    287e:	46bd      	mov	sp, r7
    2880:	bd80      	pop	{r7, pc}
    2882:	bf00      	nop
    2884:	20000acc 	.word	0x20000acc
    2888:	00004d95 	.word	0x00004d95

0000288c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    288c:	b580      	push	{r7, lr}
    288e:	b084      	sub	sp, #16
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2894:	2300      	movs	r3, #0
    2896:	73fb      	strb	r3, [r7, #15]
    2898:	2309      	movs	r3, #9
    289a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    289c:	e02a      	b.n	28f4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    289e:	7bba      	ldrb	r2, [r7, #14]
    28a0:	7bfb      	ldrb	r3, [r7, #15]
    28a2:	4413      	add	r3, r2
    28a4:	105b      	asrs	r3, r3, #1
    28a6:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    28a8:	7b7b      	ldrb	r3, [r7, #13]
    28aa:	2b08      	cmp	r3, #8
    28ac:	d827      	bhi.n	28fe <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    28ae:	7b7b      	ldrb	r3, [r7, #13]
    28b0:	4a16      	ldr	r2, [pc, #88]	; (290c <process_ext_irq+0x80>)
    28b2:	00db      	lsls	r3, r3, #3
    28b4:	4413      	add	r3, r2
    28b6:	685a      	ldr	r2, [r3, #4]
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	429a      	cmp	r2, r3
    28bc:	d10b      	bne.n	28d6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    28be:	7b7b      	ldrb	r3, [r7, #13]
    28c0:	4a12      	ldr	r2, [pc, #72]	; (290c <process_ext_irq+0x80>)
    28c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d01b      	beq.n	2902 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    28ca:	7b7b      	ldrb	r3, [r7, #13]
    28cc:	4a0f      	ldr	r2, [pc, #60]	; (290c <process_ext_irq+0x80>)
    28ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    28d2:	4798      	blx	r3
			}
			return;
    28d4:	e015      	b.n	2902 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    28d6:	7b7b      	ldrb	r3, [r7, #13]
    28d8:	4a0c      	ldr	r2, [pc, #48]	; (290c <process_ext_irq+0x80>)
    28da:	00db      	lsls	r3, r3, #3
    28dc:	4413      	add	r3, r2
    28de:	685a      	ldr	r2, [r3, #4]
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	429a      	cmp	r2, r3
    28e4:	d203      	bcs.n	28ee <process_ext_irq+0x62>
			lower = middle + 1;
    28e6:	7b7b      	ldrb	r3, [r7, #13]
    28e8:	3301      	adds	r3, #1
    28ea:	73fb      	strb	r3, [r7, #15]
    28ec:	e002      	b.n	28f4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    28ee:	7b7b      	ldrb	r3, [r7, #13]
    28f0:	3b01      	subs	r3, #1
    28f2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    28f4:	7bba      	ldrb	r2, [r7, #14]
    28f6:	7bfb      	ldrb	r3, [r7, #15]
    28f8:	429a      	cmp	r2, r3
    28fa:	d2d0      	bcs.n	289e <process_ext_irq+0x12>
    28fc:	e002      	b.n	2904 <process_ext_irq+0x78>
			return;
    28fe:	bf00      	nop
    2900:	e000      	b.n	2904 <process_ext_irq+0x78>
			return;
    2902:	bf00      	nop
		}
	}
}
    2904:	3710      	adds	r7, #16
    2906:	46bd      	mov	sp, r7
    2908:	bd80      	pop	{r7, pc}
    290a:	bf00      	nop
    290c:	20000acc 	.word	0x20000acc

00002910 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2910:	b580      	push	{r7, lr}
    2912:	b08a      	sub	sp, #40	; 0x28
    2914:	af00      	add	r7, sp, #0
    2916:	60f8      	str	r0, [r7, #12]
    2918:	60b9      	str	r1, [r7, #8]
    291a:	4613      	mov	r3, r2
    291c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    291e:	68fb      	ldr	r3, [r7, #12]
    2920:	3b14      	subs	r3, #20
    2922:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2926:	8b9b      	ldrh	r3, [r3, #28]
    2928:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    292a:	88fb      	ldrh	r3, [r7, #6]
    292c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    292e:	f248 0301 	movw	r3, #32769	; 0x8001
    2932:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2934:	68bb      	ldr	r3, [r7, #8]
    2936:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    293a:	f107 0214 	add.w	r2, r7, #20
    293e:	4611      	mov	r1, r2
    2940:	4618      	mov	r0, r3
    2942:	4b06      	ldr	r3, [pc, #24]	; (295c <i2c_m_sync_read+0x4c>)
    2944:	4798      	blx	r3
    2946:	6238      	str	r0, [r7, #32]

	if (ret) {
    2948:	6a3b      	ldr	r3, [r7, #32]
    294a:	2b00      	cmp	r3, #0
    294c:	d001      	beq.n	2952 <i2c_m_sync_read+0x42>
		return ret;
    294e:	6a3b      	ldr	r3, [r7, #32]
    2950:	e000      	b.n	2954 <i2c_m_sync_read+0x44>
	}

	return n;
    2952:	88fb      	ldrh	r3, [r7, #6]
}
    2954:	4618      	mov	r0, r3
    2956:	3728      	adds	r7, #40	; 0x28
    2958:	46bd      	mov	sp, r7
    295a:	bd80      	pop	{r7, pc}
    295c:	00006bd5 	.word	0x00006bd5

00002960 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2960:	b580      	push	{r7, lr}
    2962:	b08a      	sub	sp, #40	; 0x28
    2964:	af00      	add	r7, sp, #0
    2966:	60f8      	str	r0, [r7, #12]
    2968:	60b9      	str	r1, [r7, #8]
    296a:	4613      	mov	r3, r2
    296c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    296e:	68fb      	ldr	r3, [r7, #12]
    2970:	3b14      	subs	r3, #20
    2972:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2976:	8b9b      	ldrh	r3, [r3, #28]
    2978:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    297a:	88fb      	ldrh	r3, [r7, #6]
    297c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    297e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2982:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2984:	68bb      	ldr	r3, [r7, #8]
    2986:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    298a:	f107 0214 	add.w	r2, r7, #20
    298e:	4611      	mov	r1, r2
    2990:	4618      	mov	r0, r3
    2992:	4b06      	ldr	r3, [pc, #24]	; (29ac <i2c_m_sync_write+0x4c>)
    2994:	4798      	blx	r3
    2996:	6238      	str	r0, [r7, #32]

	if (ret) {
    2998:	6a3b      	ldr	r3, [r7, #32]
    299a:	2b00      	cmp	r3, #0
    299c:	d001      	beq.n	29a2 <i2c_m_sync_write+0x42>
		return ret;
    299e:	6a3b      	ldr	r3, [r7, #32]
    29a0:	e000      	b.n	29a4 <i2c_m_sync_write+0x44>
	}

	return n;
    29a2:	88fb      	ldrh	r3, [r7, #6]
}
    29a4:	4618      	mov	r0, r3
    29a6:	3728      	adds	r7, #40	; 0x28
    29a8:	46bd      	mov	sp, r7
    29aa:	bd80      	pop	{r7, pc}
    29ac:	00006bd5 	.word	0x00006bd5

000029b0 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    29b0:	b580      	push	{r7, lr}
    29b2:	b084      	sub	sp, #16
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	2b00      	cmp	r3, #0
    29be:	bf14      	ite	ne
    29c0:	2301      	movne	r3, #1
    29c2:	2300      	moveq	r3, #0
    29c4:	b2db      	uxtb	r3, r3
    29c6:	225e      	movs	r2, #94	; 0x5e
    29c8:	490c      	ldr	r1, [pc, #48]	; (29fc <i2c_m_sync_init+0x4c>)
    29ca:	4618      	mov	r0, r3
    29cc:	4b0c      	ldr	r3, [pc, #48]	; (2a00 <i2c_m_sync_init+0x50>)
    29ce:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	6839      	ldr	r1, [r7, #0]
    29d4:	4618      	mov	r0, r3
    29d6:	4b0b      	ldr	r3, [pc, #44]	; (2a04 <i2c_m_sync_init+0x54>)
    29d8:	4798      	blx	r3
    29da:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	2b00      	cmp	r3, #0
    29e0:	d001      	beq.n	29e6 <i2c_m_sync_init+0x36>
		return init_status;
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	e006      	b.n	29f4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	4a07      	ldr	r2, [pc, #28]	; (2a08 <i2c_m_sync_init+0x58>)
    29ea:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	4a07      	ldr	r2, [pc, #28]	; (2a0c <i2c_m_sync_init+0x5c>)
    29f0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    29f2:	2300      	movs	r3, #0
}
    29f4:	4618      	mov	r0, r3
    29f6:	3710      	adds	r7, #16
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}
    29fc:	00010db8 	.word	0x00010db8
    2a00:	00003c61 	.word	0x00003c61
    2a04:	00006a11 	.word	0x00006a11
    2a08:	00002911 	.word	0x00002911
    2a0c:	00002961 	.word	0x00002961

00002a10 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b084      	sub	sp, #16
    2a14:	af00      	add	r7, sp, #0
    2a16:	60f8      	str	r0, [r7, #12]
    2a18:	60b9      	str	r1, [r7, #8]
    2a1a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2a1c:	68fb      	ldr	r3, [r7, #12]
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d004      	beq.n	2a2c <pwm_init+0x1c>
    2a22:	68bb      	ldr	r3, [r7, #8]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d001      	beq.n	2a2c <pwm_init+0x1c>
    2a28:	2301      	movs	r3, #1
    2a2a:	e000      	b.n	2a2e <pwm_init+0x1e>
    2a2c:	2300      	movs	r3, #0
    2a2e:	f003 0301 	and.w	r3, r3, #1
    2a32:	b2db      	uxtb	r3, r3
    2a34:	2233      	movs	r2, #51	; 0x33
    2a36:	490a      	ldr	r1, [pc, #40]	; (2a60 <pwm_init+0x50>)
    2a38:	4618      	mov	r0, r3
    2a3a:	4b0a      	ldr	r3, [pc, #40]	; (2a64 <pwm_init+0x54>)
    2a3c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2a3e:	68fb      	ldr	r3, [r7, #12]
    2a40:	68b9      	ldr	r1, [r7, #8]
    2a42:	4618      	mov	r0, r3
    2a44:	4b08      	ldr	r3, [pc, #32]	; (2a68 <pwm_init+0x58>)
    2a46:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	4a08      	ldr	r2, [pc, #32]	; (2a6c <pwm_init+0x5c>)
    2a4c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2a4e:	68fb      	ldr	r3, [r7, #12]
    2a50:	4a07      	ldr	r2, [pc, #28]	; (2a70 <pwm_init+0x60>)
    2a52:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2a54:	2300      	movs	r3, #0
}
    2a56:	4618      	mov	r0, r3
    2a58:	3710      	adds	r7, #16
    2a5a:	46bd      	mov	sp, r7
    2a5c:	bd80      	pop	{r7, pc}
    2a5e:	bf00      	nop
    2a60:	00010dd4 	.word	0x00010dd4
    2a64:	00003c61 	.word	0x00003c61
    2a68:	000081e1 	.word	0x000081e1
    2a6c:	00002a75 	.word	0x00002a75
    2a70:	00002a99 	.word	0x00002a99

00002a74 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2a74:	b580      	push	{r7, lr}
    2a76:	b084      	sub	sp, #16
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2a80:	68fb      	ldr	r3, [r7, #12]
    2a82:	695b      	ldr	r3, [r3, #20]
    2a84:	2b00      	cmp	r3, #0
    2a86:	d003      	beq.n	2a90 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2a88:	68fb      	ldr	r3, [r7, #12]
    2a8a:	695b      	ldr	r3, [r3, #20]
    2a8c:	68f8      	ldr	r0, [r7, #12]
    2a8e:	4798      	blx	r3
	}
}
    2a90:	bf00      	nop
    2a92:	3710      	adds	r7, #16
    2a94:	46bd      	mov	sp, r7
    2a96:	bd80      	pop	{r7, pc}

00002a98 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b084      	sub	sp, #16
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	699b      	ldr	r3, [r3, #24]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d003      	beq.n	2ab4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2aac:	68fb      	ldr	r3, [r7, #12]
    2aae:	699b      	ldr	r3, [r3, #24]
    2ab0:	68f8      	ldr	r0, [r7, #12]
    2ab2:	4798      	blx	r3
	}
}
    2ab4:	bf00      	nop
    2ab6:	3710      	adds	r7, #16
    2ab8:	46bd      	mov	sp, r7
    2aba:	bd80      	pop	{r7, pc}

00002abc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2abc:	b580      	push	{r7, lr}
    2abe:	b082      	sub	sp, #8
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	6078      	str	r0, [r7, #4]
    2ac4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d004      	beq.n	2ad6 <qspi_sync_init+0x1a>
    2acc:	683b      	ldr	r3, [r7, #0]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d001      	beq.n	2ad6 <qspi_sync_init+0x1a>
    2ad2:	2301      	movs	r3, #1
    2ad4:	e000      	b.n	2ad8 <qspi_sync_init+0x1c>
    2ad6:	2300      	movs	r3, #0
    2ad8:	f003 0301 	and.w	r3, r3, #1
    2adc:	b2db      	uxtb	r3, r3
    2ade:	2231      	movs	r2, #49	; 0x31
    2ae0:	4906      	ldr	r1, [pc, #24]	; (2afc <qspi_sync_init+0x40>)
    2ae2:	4618      	mov	r0, r3
    2ae4:	4b06      	ldr	r3, [pc, #24]	; (2b00 <qspi_sync_init+0x44>)
    2ae6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	6839      	ldr	r1, [r7, #0]
    2aec:	4618      	mov	r0, r3
    2aee:	4b05      	ldr	r3, [pc, #20]	; (2b04 <qspi_sync_init+0x48>)
    2af0:	4798      	blx	r3
    2af2:	4603      	mov	r3, r0
}
    2af4:	4618      	mov	r0, r3
    2af6:	3708      	adds	r7, #8
    2af8:	46bd      	mov	sp, r7
    2afa:	bd80      	pop	{r7, pc}
    2afc:	00010dec 	.word	0x00010dec
    2b00:	00003c61 	.word	0x00003c61
    2b04:	00005c45 	.word	0x00005c45

00002b08 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b082      	sub	sp, #8
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	2b00      	cmp	r3, #0
    2b14:	bf14      	ite	ne
    2b16:	2301      	movne	r3, #1
    2b18:	2300      	moveq	r3, #0
    2b1a:	b2db      	uxtb	r3, r3
    2b1c:	223f      	movs	r2, #63	; 0x3f
    2b1e:	4906      	ldr	r1, [pc, #24]	; (2b38 <qspi_sync_enable+0x30>)
    2b20:	4618      	mov	r0, r3
    2b22:	4b06      	ldr	r3, [pc, #24]	; (2b3c <qspi_sync_enable+0x34>)
    2b24:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2b26:	687b      	ldr	r3, [r7, #4]
    2b28:	4618      	mov	r0, r3
    2b2a:	4b05      	ldr	r3, [pc, #20]	; (2b40 <qspi_sync_enable+0x38>)
    2b2c:	4798      	blx	r3
    2b2e:	4603      	mov	r3, r0
}
    2b30:	4618      	mov	r0, r3
    2b32:	3708      	adds	r7, #8
    2b34:	46bd      	mov	sp, r7
    2b36:	bd80      	pop	{r7, pc}
    2b38:	00010dec 	.word	0x00010dec
    2b3c:	00003c61 	.word	0x00003c61
    2b40:	00005cb9 	.word	0x00005cb9

00002b44 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2b44:	b580      	push	{r7, lr}
    2b46:	b082      	sub	sp, #8
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	bf14      	ite	ne
    2b52:	2301      	movne	r3, #1
    2b54:	2300      	moveq	r3, #0
    2b56:	b2db      	uxtb	r3, r3
    2b58:	2246      	movs	r2, #70	; 0x46
    2b5a:	4906      	ldr	r1, [pc, #24]	; (2b74 <qspi_sync_disable+0x30>)
    2b5c:	4618      	mov	r0, r3
    2b5e:	4b06      	ldr	r3, [pc, #24]	; (2b78 <qspi_sync_disable+0x34>)
    2b60:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	4618      	mov	r0, r3
    2b66:	4b05      	ldr	r3, [pc, #20]	; (2b7c <qspi_sync_disable+0x38>)
    2b68:	4798      	blx	r3
    2b6a:	4603      	mov	r3, r0
}
    2b6c:	4618      	mov	r0, r3
    2b6e:	3708      	adds	r7, #8
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}
    2b74:	00010dec 	.word	0x00010dec
    2b78:	00003c61 	.word	0x00003c61
    2b7c:	00005cdd 	.word	0x00005cdd

00002b80 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2b80:	b580      	push	{r7, lr}
    2b82:	b082      	sub	sp, #8
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    2b88:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d004      	beq.n	2b9a <qspi_sync_serial_run_command+0x1a>
    2b90:	683b      	ldr	r3, [r7, #0]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d001      	beq.n	2b9a <qspi_sync_serial_run_command+0x1a>
    2b96:	2301      	movs	r3, #1
    2b98:	e000      	b.n	2b9c <qspi_sync_serial_run_command+0x1c>
    2b9a:	2300      	movs	r3, #0
    2b9c:	f003 0301 	and.w	r3, r3, #1
    2ba0:	b2db      	uxtb	r3, r3
    2ba2:	224d      	movs	r2, #77	; 0x4d
    2ba4:	4906      	ldr	r1, [pc, #24]	; (2bc0 <qspi_sync_serial_run_command+0x40>)
    2ba6:	4618      	mov	r0, r3
    2ba8:	4b06      	ldr	r3, [pc, #24]	; (2bc4 <qspi_sync_serial_run_command+0x44>)
    2baa:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	6839      	ldr	r1, [r7, #0]
    2bb0:	4618      	mov	r0, r3
    2bb2:	4b05      	ldr	r3, [pc, #20]	; (2bc8 <qspi_sync_serial_run_command+0x48>)
    2bb4:	4798      	blx	r3
    2bb6:	4603      	mov	r3, r0
}
    2bb8:	4618      	mov	r0, r3
    2bba:	3708      	adds	r7, #8
    2bbc:	46bd      	mov	sp, r7
    2bbe:	bd80      	pop	{r7, pc}
    2bc0:	00010dec 	.word	0x00010dec
    2bc4:	00003c61 	.word	0x00003c61
    2bc8:	00005e29 	.word	0x00005e29

00002bcc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	6078      	str	r0, [r7, #4]
    2bd4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2bd6:	2300      	movs	r3, #0
    2bd8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d004      	beq.n	2bea <spi_m_sync_init+0x1e>
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d001      	beq.n	2bea <spi_m_sync_init+0x1e>
    2be6:	2301      	movs	r3, #1
    2be8:	e000      	b.n	2bec <spi_m_sync_init+0x20>
    2bea:	2300      	movs	r3, #0
    2bec:	f003 0301 	and.w	r3, r3, #1
    2bf0:	b2db      	uxtb	r3, r3
    2bf2:	2240      	movs	r2, #64	; 0x40
    2bf4:	4910      	ldr	r1, [pc, #64]	; (2c38 <spi_m_sync_init+0x6c>)
    2bf6:	4618      	mov	r0, r3
    2bf8:	4b10      	ldr	r3, [pc, #64]	; (2c3c <spi_m_sync_init+0x70>)
    2bfa:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	683a      	ldr	r2, [r7, #0]
    2c00:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	3304      	adds	r3, #4
    2c06:	6839      	ldr	r1, [r7, #0]
    2c08:	4618      	mov	r0, r3
    2c0a:	4b0d      	ldr	r3, [pc, #52]	; (2c40 <spi_m_sync_init+0x74>)
    2c0c:	4798      	blx	r3
    2c0e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2c10:	68fb      	ldr	r3, [r7, #12]
    2c12:	2b00      	cmp	r3, #0
    2c14:	da01      	bge.n	2c1a <spi_m_sync_init+0x4e>
		return rc;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	e00a      	b.n	2c30 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2c20:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	4a07      	ldr	r2, [pc, #28]	; (2c44 <spi_m_sync_init+0x78>)
    2c26:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	4a07      	ldr	r2, [pc, #28]	; (2c48 <spi_m_sync_init+0x7c>)
    2c2c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2c2e:	2300      	movs	r3, #0
}
    2c30:	4618      	mov	r0, r3
    2c32:	3710      	adds	r7, #16
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}
    2c38:	00010e08 	.word	0x00010e08
    2c3c:	00003c61 	.word	0x00003c61
    2c40:	00007045 	.word	0x00007045
    2c44:	00002cc5 	.word	0x00002cc5
    2c48:	00002d1d 	.word	0x00002d1d

00002c4c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2c4c:	b580      	push	{r7, lr}
    2c4e:	b082      	sub	sp, #8
    2c50:	af00      	add	r7, sp, #0
    2c52:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	2b00      	cmp	r3, #0
    2c58:	bf14      	ite	ne
    2c5a:	2301      	movne	r3, #1
    2c5c:	2300      	moveq	r3, #0
    2c5e:	b2db      	uxtb	r3, r3
    2c60:	2257      	movs	r2, #87	; 0x57
    2c62:	4906      	ldr	r1, [pc, #24]	; (2c7c <spi_m_sync_enable+0x30>)
    2c64:	4618      	mov	r0, r3
    2c66:	4b06      	ldr	r3, [pc, #24]	; (2c80 <spi_m_sync_enable+0x34>)
    2c68:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	3304      	adds	r3, #4
    2c6e:	4618      	mov	r0, r3
    2c70:	4b04      	ldr	r3, [pc, #16]	; (2c84 <spi_m_sync_enable+0x38>)
    2c72:	4798      	blx	r3
}
    2c74:	bf00      	nop
    2c76:	3708      	adds	r7, #8
    2c78:	46bd      	mov	sp, r7
    2c7a:	bd80      	pop	{r7, pc}
    2c7c:	00010e08 	.word	0x00010e08
    2c80:	00003c61 	.word	0x00003c61
    2c84:	00007151 	.word	0x00007151

00002c88 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b082      	sub	sp, #8
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	2b00      	cmp	r3, #0
    2c94:	bf14      	ite	ne
    2c96:	2301      	movne	r3, #1
    2c98:	2300      	moveq	r3, #0
    2c9a:	b2db      	uxtb	r3, r3
    2c9c:	225d      	movs	r2, #93	; 0x5d
    2c9e:	4906      	ldr	r1, [pc, #24]	; (2cb8 <spi_m_sync_disable+0x30>)
    2ca0:	4618      	mov	r0, r3
    2ca2:	4b06      	ldr	r3, [pc, #24]	; (2cbc <spi_m_sync_disable+0x34>)
    2ca4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	3304      	adds	r3, #4
    2caa:	4618      	mov	r0, r3
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <spi_m_sync_disable+0x38>)
    2cae:	4798      	blx	r3
}
    2cb0:	bf00      	nop
    2cb2:	3708      	adds	r7, #8
    2cb4:	46bd      	mov	sp, r7
    2cb6:	bd80      	pop	{r7, pc}
    2cb8:	00010e08 	.word	0x00010e08
    2cbc:	00003c61 	.word	0x00003c61
    2cc0:	000071a1 	.word	0x000071a1

00002cc4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b088      	sub	sp, #32
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	60b9      	str	r1, [r7, #8]
    2cce:	4613      	mov	r3, r2
    2cd0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2cd2:	68fb      	ldr	r3, [r7, #12]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	bf14      	ite	ne
    2cd8:	2301      	movne	r3, #1
    2cda:	2300      	moveq	r3, #0
    2cdc:	b2db      	uxtb	r3, r3
    2cde:	2287      	movs	r2, #135	; 0x87
    2ce0:	490b      	ldr	r1, [pc, #44]	; (2d10 <_spi_m_sync_io_read+0x4c>)
    2ce2:	4618      	mov	r0, r3
    2ce4:	4b0b      	ldr	r3, [pc, #44]	; (2d14 <_spi_m_sync_io_read+0x50>)
    2ce6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2ce8:	68fb      	ldr	r3, [r7, #12]
    2cea:	3b0c      	subs	r3, #12
    2cec:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2cee:	68bb      	ldr	r3, [r7, #8]
    2cf0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2cf2:	2300      	movs	r3, #0
    2cf4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2cf6:	88fb      	ldrh	r3, [r7, #6]
    2cf8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2cfa:	f107 0310 	add.w	r3, r7, #16
    2cfe:	4619      	mov	r1, r3
    2d00:	69f8      	ldr	r0, [r7, #28]
    2d02:	4b05      	ldr	r3, [pc, #20]	; (2d18 <_spi_m_sync_io_read+0x54>)
    2d04:	4798      	blx	r3
    2d06:	4603      	mov	r3, r0
}
    2d08:	4618      	mov	r0, r3
    2d0a:	3720      	adds	r7, #32
    2d0c:	46bd      	mov	sp, r7
    2d0e:	bd80      	pop	{r7, pc}
    2d10:	00010e08 	.word	0x00010e08
    2d14:	00003c61 	.word	0x00003c61
    2d18:	00002d75 	.word	0x00002d75

00002d1c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b088      	sub	sp, #32
    2d20:	af00      	add	r7, sp, #0
    2d22:	60f8      	str	r0, [r7, #12]
    2d24:	60b9      	str	r1, [r7, #8]
    2d26:	4613      	mov	r3, r2
    2d28:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	bf14      	ite	ne
    2d30:	2301      	movne	r3, #1
    2d32:	2300      	moveq	r3, #0
    2d34:	b2db      	uxtb	r3, r3
    2d36:	22a3      	movs	r2, #163	; 0xa3
    2d38:	490b      	ldr	r1, [pc, #44]	; (2d68 <_spi_m_sync_io_write+0x4c>)
    2d3a:	4618      	mov	r0, r3
    2d3c:	4b0b      	ldr	r3, [pc, #44]	; (2d6c <_spi_m_sync_io_write+0x50>)
    2d3e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2d40:	68fb      	ldr	r3, [r7, #12]
    2d42:	3b0c      	subs	r3, #12
    2d44:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2d46:	2300      	movs	r3, #0
    2d48:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2d4a:	68bb      	ldr	r3, [r7, #8]
    2d4c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2d4e:	88fb      	ldrh	r3, [r7, #6]
    2d50:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2d52:	f107 0310 	add.w	r3, r7, #16
    2d56:	4619      	mov	r1, r3
    2d58:	69f8      	ldr	r0, [r7, #28]
    2d5a:	4b05      	ldr	r3, [pc, #20]	; (2d70 <_spi_m_sync_io_write+0x54>)
    2d5c:	4798      	blx	r3
    2d5e:	4603      	mov	r3, r0
}
    2d60:	4618      	mov	r0, r3
    2d62:	3720      	adds	r7, #32
    2d64:	46bd      	mov	sp, r7
    2d66:	bd80      	pop	{r7, pc}
    2d68:	00010e08 	.word	0x00010e08
    2d6c:	00003c61 	.word	0x00003c61
    2d70:	00002d75 	.word	0x00002d75

00002d74 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b086      	sub	sp, #24
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    2d7c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d004      	beq.n	2d8e <spi_m_sync_transfer+0x1a>
    2d84:	683b      	ldr	r3, [r7, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d001      	beq.n	2d8e <spi_m_sync_transfer+0x1a>
    2d8a:	2301      	movs	r3, #1
    2d8c:	e000      	b.n	2d90 <spi_m_sync_transfer+0x1c>
    2d8e:	2300      	movs	r3, #0
    2d90:	f003 0301 	and.w	r3, r3, #1
    2d94:	b2db      	uxtb	r3, r3
    2d96:	22b3      	movs	r2, #179	; 0xb3
    2d98:	490c      	ldr	r1, [pc, #48]	; (2dcc <spi_m_sync_transfer+0x58>)
    2d9a:	4618      	mov	r0, r3
    2d9c:	4b0c      	ldr	r3, [pc, #48]	; (2dd0 <spi_m_sync_transfer+0x5c>)
    2d9e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2da0:	683b      	ldr	r3, [r7, #0]
    2da2:	681b      	ldr	r3, [r3, #0]
    2da4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	685b      	ldr	r3, [r3, #4]
    2daa:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2dac:	683b      	ldr	r3, [r7, #0]
    2dae:	689b      	ldr	r3, [r3, #8]
    2db0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	3304      	adds	r3, #4
    2db6:	f107 020c 	add.w	r2, r7, #12
    2dba:	4611      	mov	r1, r2
    2dbc:	4618      	mov	r0, r3
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <spi_m_sync_transfer+0x60>)
    2dc0:	4798      	blx	r3
    2dc2:	4603      	mov	r3, r0
}
    2dc4:	4618      	mov	r0, r3
    2dc6:	3718      	adds	r7, #24
    2dc8:	46bd      	mov	sp, r7
    2dca:	bd80      	pop	{r7, pc}
    2dcc:	00010e08 	.word	0x00010e08
    2dd0:	00003c61 	.word	0x00003c61
    2dd4:	00007345 	.word	0x00007345

00002dd8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	b082      	sub	sp, #8
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6078      	str	r0, [r7, #4]
    2de0:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d004      	beq.n	2df2 <spi_m_sync_get_io_descriptor+0x1a>
    2de8:	683b      	ldr	r3, [r7, #0]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d001      	beq.n	2df2 <spi_m_sync_get_io_descriptor+0x1a>
    2dee:	2301      	movs	r3, #1
    2df0:	e000      	b.n	2df4 <spi_m_sync_get_io_descriptor+0x1c>
    2df2:	2300      	movs	r3, #0
    2df4:	f003 0301 	and.w	r3, r3, #1
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	22bd      	movs	r2, #189	; 0xbd
    2dfc:	4906      	ldr	r1, [pc, #24]	; (2e18 <spi_m_sync_get_io_descriptor+0x40>)
    2dfe:	4618      	mov	r0, r3
    2e00:	4b06      	ldr	r3, [pc, #24]	; (2e1c <spi_m_sync_get_io_descriptor+0x44>)
    2e02:	4798      	blx	r3
	*io = &spi->io;
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	f103 020c 	add.w	r2, r3, #12
    2e0a:	683b      	ldr	r3, [r7, #0]
    2e0c:	601a      	str	r2, [r3, #0]
	return 0;
    2e0e:	2300      	movs	r3, #0
}
    2e10:	4618      	mov	r0, r3
    2e12:	3708      	adds	r7, #8
    2e14:	46bd      	mov	sp, r7
    2e16:	bd80      	pop	{r7, pc}
    2e18:	00010e08 	.word	0x00010e08
    2e1c:	00003c61 	.word	0x00003c61

00002e20 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2e20:	b480      	push	{r7}
    2e22:	b083      	sub	sp, #12
    2e24:	af00      	add	r7, sp, #0
    2e26:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	681b      	ldr	r3, [r3, #0]
}
    2e2c:	4618      	mov	r0, r3
    2e2e:	370c      	adds	r7, #12
    2e30:	46bd      	mov	sp, r7
    2e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e36:	4770      	bx	lr

00002e38 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2e38:	b480      	push	{r7}
    2e3a:	b083      	sub	sp, #12
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2e40:	687b      	ldr	r3, [r7, #4]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d002      	beq.n	2e4c <list_get_next_element+0x14>
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	e000      	b.n	2e4e <list_get_next_element+0x16>
    2e4c:	2300      	movs	r3, #0
}
    2e4e:	4618      	mov	r0, r3
    2e50:	370c      	adds	r7, #12
    2e52:	46bd      	mov	sp, r7
    2e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e58:	4770      	bx	lr
	...

00002e5c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b084      	sub	sp, #16
    2e60:	af00      	add	r7, sp, #0
    2e62:	60f8      	str	r0, [r7, #12]
    2e64:	60b9      	str	r1, [r7, #8]
    2e66:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2e68:	68fb      	ldr	r3, [r7, #12]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d007      	beq.n	2e7e <timer_init+0x22>
    2e6e:	68bb      	ldr	r3, [r7, #8]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d004      	beq.n	2e7e <timer_init+0x22>
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d001      	beq.n	2e7e <timer_init+0x22>
    2e7a:	2301      	movs	r3, #1
    2e7c:	e000      	b.n	2e80 <timer_init+0x24>
    2e7e:	2300      	movs	r3, #0
    2e80:	f003 0301 	and.w	r3, r3, #1
    2e84:	b2db      	uxtb	r3, r3
    2e86:	223b      	movs	r2, #59	; 0x3b
    2e88:	490c      	ldr	r1, [pc, #48]	; (2ebc <timer_init+0x60>)
    2e8a:	4618      	mov	r0, r3
    2e8c:	4b0c      	ldr	r3, [pc, #48]	; (2ec0 <timer_init+0x64>)
    2e8e:	4798      	blx	r3
	descr->func = func;
    2e90:	68fb      	ldr	r3, [r7, #12]
    2e92:	687a      	ldr	r2, [r7, #4]
    2e94:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2e96:	68fb      	ldr	r3, [r7, #12]
    2e98:	681b      	ldr	r3, [r3, #0]
    2e9a:	681b      	ldr	r3, [r3, #0]
    2e9c:	68fa      	ldr	r2, [r7, #12]
    2e9e:	3204      	adds	r2, #4
    2ea0:	68b9      	ldr	r1, [r7, #8]
    2ea2:	4610      	mov	r0, r2
    2ea4:	4798      	blx	r3
	descr->time                           = 0;
    2ea6:	68fb      	ldr	r3, [r7, #12]
    2ea8:	2200      	movs	r2, #0
    2eaa:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2eac:	68fb      	ldr	r3, [r7, #12]
    2eae:	4a05      	ldr	r2, [pc, #20]	; (2ec4 <timer_init+0x68>)
    2eb0:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2eb2:	2300      	movs	r3, #0
}
    2eb4:	4618      	mov	r0, r3
    2eb6:	3710      	adds	r7, #16
    2eb8:	46bd      	mov	sp, r7
    2eba:	bd80      	pop	{r7, pc}
    2ebc:	00010e24 	.word	0x00010e24
    2ec0:	00003c61 	.word	0x00003c61
    2ec4:	0000324d 	.word	0x0000324d

00002ec8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b082      	sub	sp, #8
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d005      	beq.n	2ee2 <timer_start+0x1a>
    2ed6:	687b      	ldr	r3, [r7, #4]
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d001      	beq.n	2ee2 <timer_start+0x1a>
    2ede:	2301      	movs	r3, #1
    2ee0:	e000      	b.n	2ee4 <timer_start+0x1c>
    2ee2:	2300      	movs	r3, #0
    2ee4:	f003 0301 	and.w	r3, r3, #1
    2ee8:	b2db      	uxtb	r3, r3
    2eea:	2254      	movs	r2, #84	; 0x54
    2eec:	490e      	ldr	r1, [pc, #56]	; (2f28 <timer_start+0x60>)
    2eee:	4618      	mov	r0, r3
    2ef0:	4b0e      	ldr	r3, [pc, #56]	; (2f2c <timer_start+0x64>)
    2ef2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	699b      	ldr	r3, [r3, #24]
    2efa:	687a      	ldr	r2, [r7, #4]
    2efc:	3204      	adds	r2, #4
    2efe:	4610      	mov	r0, r2
    2f00:	4798      	blx	r3
    2f02:	4603      	mov	r3, r0
    2f04:	2b00      	cmp	r3, #0
    2f06:	d002      	beq.n	2f0e <timer_start+0x46>
		return ERR_DENIED;
    2f08:	f06f 0310 	mvn.w	r3, #16
    2f0c:	e007      	b.n	2f1e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	681b      	ldr	r3, [r3, #0]
    2f12:	689b      	ldr	r3, [r3, #8]
    2f14:	687a      	ldr	r2, [r7, #4]
    2f16:	3204      	adds	r2, #4
    2f18:	4610      	mov	r0, r2
    2f1a:	4798      	blx	r3

	return ERR_NONE;
    2f1c:	2300      	movs	r3, #0
}
    2f1e:	4618      	mov	r0, r3
    2f20:	3708      	adds	r7, #8
    2f22:	46bd      	mov	sp, r7
    2f24:	bd80      	pop	{r7, pc}
    2f26:	bf00      	nop
    2f28:	00010e24 	.word	0x00010e24
    2f2c:	00003c61 	.word	0x00003c61

00002f30 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2f30:	b580      	push	{r7, lr}
    2f32:	b082      	sub	sp, #8
    2f34:	af00      	add	r7, sp, #0
    2f36:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d005      	beq.n	2f4a <timer_stop+0x1a>
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	681b      	ldr	r3, [r3, #0]
    2f42:	2b00      	cmp	r3, #0
    2f44:	d001      	beq.n	2f4a <timer_stop+0x1a>
    2f46:	2301      	movs	r3, #1
    2f48:	e000      	b.n	2f4c <timer_stop+0x1c>
    2f4a:	2300      	movs	r3, #0
    2f4c:	f003 0301 	and.w	r3, r3, #1
    2f50:	b2db      	uxtb	r3, r3
    2f52:	2262      	movs	r2, #98	; 0x62
    2f54:	490f      	ldr	r1, [pc, #60]	; (2f94 <timer_stop+0x64>)
    2f56:	4618      	mov	r0, r3
    2f58:	4b0f      	ldr	r3, [pc, #60]	; (2f98 <timer_stop+0x68>)
    2f5a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	699b      	ldr	r3, [r3, #24]
    2f62:	687a      	ldr	r2, [r7, #4]
    2f64:	3204      	adds	r2, #4
    2f66:	4610      	mov	r0, r2
    2f68:	4798      	blx	r3
    2f6a:	4603      	mov	r3, r0
    2f6c:	f083 0301 	eor.w	r3, r3, #1
    2f70:	b2db      	uxtb	r3, r3
    2f72:	2b00      	cmp	r3, #0
    2f74:	d002      	beq.n	2f7c <timer_stop+0x4c>
		return ERR_DENIED;
    2f76:	f06f 0310 	mvn.w	r3, #16
    2f7a:	e007      	b.n	2f8c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	68db      	ldr	r3, [r3, #12]
    2f82:	687a      	ldr	r2, [r7, #4]
    2f84:	3204      	adds	r2, #4
    2f86:	4610      	mov	r0, r2
    2f88:	4798      	blx	r3

	return ERR_NONE;
    2f8a:	2300      	movs	r3, #0
}
    2f8c:	4618      	mov	r0, r3
    2f8e:	3708      	adds	r7, #8
    2f90:	46bd      	mov	sp, r7
    2f92:	bd80      	pop	{r7, pc}
    2f94:	00010e24 	.word	0x00010e24
    2f98:	00003c61 	.word	0x00003c61

00002f9c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	b084      	sub	sp, #16
    2fa0:	af00      	add	r7, sp, #0
    2fa2:	6078      	str	r0, [r7, #4]
    2fa4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d008      	beq.n	2fbe <timer_add_task+0x22>
    2fac:	683b      	ldr	r3, [r7, #0]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d005      	beq.n	2fbe <timer_add_task+0x22>
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d001      	beq.n	2fbe <timer_add_task+0x22>
    2fba:	2301      	movs	r3, #1
    2fbc:	e000      	b.n	2fc0 <timer_add_task+0x24>
    2fbe:	2300      	movs	r3, #0
    2fc0:	f003 0301 	and.w	r3, r3, #1
    2fc4:	b2db      	uxtb	r3, r3
    2fc6:	227b      	movs	r2, #123	; 0x7b
    2fc8:	492f      	ldr	r1, [pc, #188]	; (3088 <timer_add_task+0xec>)
    2fca:	4618      	mov	r0, r3
    2fcc:	4b2f      	ldr	r3, [pc, #188]	; (308c <timer_add_task+0xf0>)
    2fce:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	7f1b      	ldrb	r3, [r3, #28]
    2fd4:	b2db      	uxtb	r3, r3
    2fd6:	f043 0301 	orr.w	r3, r3, #1
    2fda:	b2da      	uxtb	r2, r3
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	3318      	adds	r3, #24
    2fe4:	6839      	ldr	r1, [r7, #0]
    2fe6:	4618      	mov	r0, r3
    2fe8:	4b29      	ldr	r3, [pc, #164]	; (3090 <timer_add_task+0xf4>)
    2fea:	4798      	blx	r3
    2fec:	4603      	mov	r3, r0
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d00f      	beq.n	3012 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	7f1b      	ldrb	r3, [r3, #28]
    2ff6:	b2db      	uxtb	r3, r3
    2ff8:	f023 0301 	bic.w	r3, r3, #1
    2ffc:	b2da      	uxtb	r2, r3
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3002:	2280      	movs	r2, #128	; 0x80
    3004:	4920      	ldr	r1, [pc, #128]	; (3088 <timer_add_task+0xec>)
    3006:	2000      	movs	r0, #0
    3008:	4b20      	ldr	r3, [pc, #128]	; (308c <timer_add_task+0xf0>)
    300a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    300c:	f06f 0311 	mvn.w	r3, #17
    3010:	e035      	b.n	307e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	695a      	ldr	r2, [r3, #20]
    3016:	683b      	ldr	r3, [r7, #0]
    3018:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	f103 0018 	add.w	r0, r3, #24
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	695b      	ldr	r3, [r3, #20]
    3024:	461a      	mov	r2, r3
    3026:	6839      	ldr	r1, [r7, #0]
    3028:	4b1a      	ldr	r3, [pc, #104]	; (3094 <timer_add_task+0xf8>)
    302a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	7f1b      	ldrb	r3, [r3, #28]
    3030:	b2db      	uxtb	r3, r3
    3032:	f023 0301 	bic.w	r3, r3, #1
    3036:	b2da      	uxtb	r2, r3
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	7f1b      	ldrb	r3, [r3, #28]
    3040:	b2db      	uxtb	r3, r3
    3042:	f003 0302 	and.w	r3, r3, #2
    3046:	2b00      	cmp	r3, #0
    3048:	d018      	beq.n	307c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    304a:	f107 030c 	add.w	r3, r7, #12
    304e:	4618      	mov	r0, r3
    3050:	4b11      	ldr	r3, [pc, #68]	; (3098 <timer_add_task+0xfc>)
    3052:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	7f1b      	ldrb	r3, [r3, #28]
    3058:	b2db      	uxtb	r3, r3
    305a:	f023 0302 	bic.w	r3, r3, #2
    305e:	b2da      	uxtb	r2, r3
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	69db      	ldr	r3, [r3, #28]
    306a:	687a      	ldr	r2, [r7, #4]
    306c:	3204      	adds	r2, #4
    306e:	4610      	mov	r0, r2
    3070:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3072:	f107 030c 	add.w	r3, r7, #12
    3076:	4618      	mov	r0, r3
    3078:	4b08      	ldr	r3, [pc, #32]	; (309c <timer_add_task+0x100>)
    307a:	4798      	blx	r3
	}

	return ERR_NONE;
    307c:	2300      	movs	r3, #0
}
    307e:	4618      	mov	r0, r3
    3080:	3710      	adds	r7, #16
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop
    3088:	00010e24 	.word	0x00010e24
    308c:	00003c61 	.word	0x00003c61
    3090:	00003c89 	.word	0x00003c89
    3094:	0000319d 	.word	0x0000319d
    3098:	00002479 	.word	0x00002479
    309c:	0000249f 	.word	0x0000249f

000030a0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b084      	sub	sp, #16
    30a4:	af00      	add	r7, sp, #0
    30a6:	6078      	str	r0, [r7, #4]
    30a8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    30aa:	687b      	ldr	r3, [r7, #4]
    30ac:	2b00      	cmp	r3, #0
    30ae:	d008      	beq.n	30c2 <timer_remove_task+0x22>
    30b0:	683b      	ldr	r3, [r7, #0]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d005      	beq.n	30c2 <timer_remove_task+0x22>
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	681b      	ldr	r3, [r3, #0]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d001      	beq.n	30c2 <timer_remove_task+0x22>
    30be:	2301      	movs	r3, #1
    30c0:	e000      	b.n	30c4 <timer_remove_task+0x24>
    30c2:	2300      	movs	r3, #0
    30c4:	f003 0301 	and.w	r3, r3, #1
    30c8:	b2db      	uxtb	r3, r3
    30ca:	2296      	movs	r2, #150	; 0x96
    30cc:	492d      	ldr	r1, [pc, #180]	; (3184 <timer_remove_task+0xe4>)
    30ce:	4618      	mov	r0, r3
    30d0:	4b2d      	ldr	r3, [pc, #180]	; (3188 <timer_remove_task+0xe8>)
    30d2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	7f1b      	ldrb	r3, [r3, #28]
    30d8:	b2db      	uxtb	r3, r3
    30da:	f043 0301 	orr.w	r3, r3, #1
    30de:	b2da      	uxtb	r2, r3
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	3318      	adds	r3, #24
    30e8:	6839      	ldr	r1, [r7, #0]
    30ea:	4618      	mov	r0, r3
    30ec:	4b27      	ldr	r3, [pc, #156]	; (318c <timer_remove_task+0xec>)
    30ee:	4798      	blx	r3
    30f0:	4603      	mov	r3, r0
    30f2:	f083 0301 	eor.w	r3, r3, #1
    30f6:	b2db      	uxtb	r3, r3
    30f8:	2b00      	cmp	r3, #0
    30fa:	d00f      	beq.n	311c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	7f1b      	ldrb	r3, [r3, #28]
    3100:	b2db      	uxtb	r3, r3
    3102:	f023 0301 	bic.w	r3, r3, #1
    3106:	b2da      	uxtb	r2, r3
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    310c:	229b      	movs	r2, #155	; 0x9b
    310e:	491d      	ldr	r1, [pc, #116]	; (3184 <timer_remove_task+0xe4>)
    3110:	2000      	movs	r0, #0
    3112:	4b1d      	ldr	r3, [pc, #116]	; (3188 <timer_remove_task+0xe8>)
    3114:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3116:	f06f 0309 	mvn.w	r3, #9
    311a:	e02e      	b.n	317a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	3318      	adds	r3, #24
    3120:	6839      	ldr	r1, [r7, #0]
    3122:	4618      	mov	r0, r3
    3124:	4b1a      	ldr	r3, [pc, #104]	; (3190 <timer_remove_task+0xf0>)
    3126:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	7f1b      	ldrb	r3, [r3, #28]
    312c:	b2db      	uxtb	r3, r3
    312e:	f023 0301 	bic.w	r3, r3, #1
    3132:	b2da      	uxtb	r2, r3
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	7f1b      	ldrb	r3, [r3, #28]
    313c:	b2db      	uxtb	r3, r3
    313e:	f003 0302 	and.w	r3, r3, #2
    3142:	2b00      	cmp	r3, #0
    3144:	d018      	beq.n	3178 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3146:	f107 030c 	add.w	r3, r7, #12
    314a:	4618      	mov	r0, r3
    314c:	4b11      	ldr	r3, [pc, #68]	; (3194 <timer_remove_task+0xf4>)
    314e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3150:	687b      	ldr	r3, [r7, #4]
    3152:	7f1b      	ldrb	r3, [r3, #28]
    3154:	b2db      	uxtb	r3, r3
    3156:	f023 0302 	bic.w	r3, r3, #2
    315a:	b2da      	uxtb	r2, r3
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	69db      	ldr	r3, [r3, #28]
    3166:	687a      	ldr	r2, [r7, #4]
    3168:	3204      	adds	r2, #4
    316a:	4610      	mov	r0, r2
    316c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    316e:	f107 030c 	add.w	r3, r7, #12
    3172:	4618      	mov	r0, r3
    3174:	4b08      	ldr	r3, [pc, #32]	; (3198 <timer_remove_task+0xf8>)
    3176:	4798      	blx	r3
	}

	return ERR_NONE;
    3178:	2300      	movs	r3, #0
}
    317a:	4618      	mov	r0, r3
    317c:	3710      	adds	r7, #16
    317e:	46bd      	mov	sp, r7
    3180:	bd80      	pop	{r7, pc}
    3182:	bf00      	nop
    3184:	00010e24 	.word	0x00010e24
    3188:	00003c61 	.word	0x00003c61
    318c:	00003c89 	.word	0x00003c89
    3190:	00003deb 	.word	0x00003deb
    3194:	00002479 	.word	0x00002479
    3198:	0000249f 	.word	0x0000249f

0000319c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    319c:	b580      	push	{r7, lr}
    319e:	b088      	sub	sp, #32
    31a0:	af00      	add	r7, sp, #0
    31a2:	60f8      	str	r0, [r7, #12]
    31a4:	60b9      	str	r1, [r7, #8]
    31a6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    31a8:	2300      	movs	r3, #0
    31aa:	61bb      	str	r3, [r7, #24]
    31ac:	68f8      	ldr	r0, [r7, #12]
    31ae:	4b23      	ldr	r3, [pc, #140]	; (323c <timer_add_timer_task+0xa0>)
    31b0:	4798      	blx	r3
    31b2:	6138      	str	r0, [r7, #16]

	if (!head) {
    31b4:	693b      	ldr	r3, [r7, #16]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d104      	bne.n	31c4 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    31ba:	68b9      	ldr	r1, [r7, #8]
    31bc:	68f8      	ldr	r0, [r7, #12]
    31be:	4b20      	ldr	r3, [pc, #128]	; (3240 <timer_add_timer_task+0xa4>)
    31c0:	4798      	blx	r3
		return;
    31c2:	e037      	b.n	3234 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    31c4:	693b      	ldr	r3, [r7, #16]
    31c6:	61fb      	str	r3, [r7, #28]
    31c8:	e022      	b.n	3210 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    31ca:	69fb      	ldr	r3, [r7, #28]
    31cc:	685a      	ldr	r2, [r3, #4]
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	429a      	cmp	r2, r3
    31d2:	d808      	bhi.n	31e6 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    31d4:	69fb      	ldr	r3, [r7, #28]
    31d6:	689a      	ldr	r2, [r3, #8]
    31d8:	69fb      	ldr	r3, [r7, #28]
    31da:	6859      	ldr	r1, [r3, #4]
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	1acb      	subs	r3, r1, r3
    31e0:	4413      	add	r3, r2
    31e2:	617b      	str	r3, [r7, #20]
    31e4:	e009      	b.n	31fa <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    31e6:	69fb      	ldr	r3, [r7, #28]
    31e8:	689a      	ldr	r2, [r3, #8]
    31ea:	69fb      	ldr	r3, [r7, #28]
    31ec:	685b      	ldr	r3, [r3, #4]
    31ee:	441a      	add	r2, r3
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	425b      	negs	r3, r3
    31f4:	4413      	add	r3, r2
    31f6:	3301      	adds	r3, #1
    31f8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    31fa:	68bb      	ldr	r3, [r7, #8]
    31fc:	689a      	ldr	r2, [r3, #8]
    31fe:	697b      	ldr	r3, [r7, #20]
    3200:	429a      	cmp	r2, r3
    3202:	d909      	bls.n	3218 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3204:	69fb      	ldr	r3, [r7, #28]
    3206:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3208:	69f8      	ldr	r0, [r7, #28]
    320a:	4b0e      	ldr	r3, [pc, #56]	; (3244 <timer_add_timer_task+0xa8>)
    320c:	4798      	blx	r3
    320e:	61f8      	str	r0, [r7, #28]
    3210:	69fb      	ldr	r3, [r7, #28]
    3212:	2b00      	cmp	r3, #0
    3214:	d1d9      	bne.n	31ca <timer_add_timer_task+0x2e>
    3216:	e000      	b.n	321a <timer_add_timer_task+0x7e>
			break;
    3218:	bf00      	nop
	}

	if (it == head) {
    321a:	69fa      	ldr	r2, [r7, #28]
    321c:	693b      	ldr	r3, [r7, #16]
    321e:	429a      	cmp	r2, r3
    3220:	d104      	bne.n	322c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3222:	68b9      	ldr	r1, [r7, #8]
    3224:	68f8      	ldr	r0, [r7, #12]
    3226:	4b06      	ldr	r3, [pc, #24]	; (3240 <timer_add_timer_task+0xa4>)
    3228:	4798      	blx	r3
    322a:	e003      	b.n	3234 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    322c:	68b9      	ldr	r1, [r7, #8]
    322e:	69b8      	ldr	r0, [r7, #24]
    3230:	4b05      	ldr	r3, [pc, #20]	; (3248 <timer_add_timer_task+0xac>)
    3232:	4798      	blx	r3
	}
}
    3234:	3720      	adds	r7, #32
    3236:	46bd      	mov	sp, r7
    3238:	bd80      	pop	{r7, pc}
    323a:	bf00      	nop
    323c:	00002e21 	.word	0x00002e21
    3240:	00003cc1 	.word	0x00003cc1
    3244:	00002e39 	.word	0x00002e39
    3248:	00003d19 	.word	0x00003d19

0000324c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    324c:	b580      	push	{r7, lr}
    324e:	b086      	sub	sp, #24
    3250:	af00      	add	r7, sp, #0
    3252:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	3b04      	subs	r3, #4
    3258:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    325a:	693b      	ldr	r3, [r7, #16]
    325c:	3318      	adds	r3, #24
    325e:	4618      	mov	r0, r3
    3260:	4b27      	ldr	r3, [pc, #156]	; (3300 <timer_process_counted+0xb4>)
    3262:	4798      	blx	r3
    3264:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3266:	693b      	ldr	r3, [r7, #16]
    3268:	695b      	ldr	r3, [r3, #20]
    326a:	1c5a      	adds	r2, r3, #1
    326c:	693b      	ldr	r3, [r7, #16]
    326e:	615a      	str	r2, [r3, #20]
    3270:	693b      	ldr	r3, [r7, #16]
    3272:	695b      	ldr	r3, [r3, #20]
    3274:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3276:	693b      	ldr	r3, [r7, #16]
    3278:	7f1b      	ldrb	r3, [r3, #28]
    327a:	b2db      	uxtb	r3, r3
    327c:	f003 0301 	and.w	r3, r3, #1
    3280:	2b00      	cmp	r3, #0
    3282:	d106      	bne.n	3292 <timer_process_counted+0x46>
    3284:	693b      	ldr	r3, [r7, #16]
    3286:	7f1b      	ldrb	r3, [r3, #28]
    3288:	b2db      	uxtb	r3, r3
    328a:	f003 0302 	and.w	r3, r3, #2
    328e:	2b00      	cmp	r3, #0
    3290:	d027      	beq.n	32e2 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3292:	693b      	ldr	r3, [r7, #16]
    3294:	7f1b      	ldrb	r3, [r3, #28]
    3296:	b2db      	uxtb	r3, r3
    3298:	f043 0302 	orr.w	r3, r3, #2
    329c:	b2da      	uxtb	r2, r3
    329e:	693b      	ldr	r3, [r7, #16]
    32a0:	771a      	strb	r2, [r3, #28]
		return;
    32a2:	e029      	b.n	32f8 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    32a4:	697b      	ldr	r3, [r7, #20]
    32a6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    32a8:	693b      	ldr	r3, [r7, #16]
    32aa:	3318      	adds	r3, #24
    32ac:	4618      	mov	r0, r3
    32ae:	4b15      	ldr	r3, [pc, #84]	; (3304 <timer_process_counted+0xb8>)
    32b0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    32b2:	68bb      	ldr	r3, [r7, #8]
    32b4:	7c1b      	ldrb	r3, [r3, #16]
    32b6:	2b01      	cmp	r3, #1
    32b8:	d109      	bne.n	32ce <timer_process_counted+0x82>
			tmp->time_label = time;
    32ba:	68bb      	ldr	r3, [r7, #8]
    32bc:	68fa      	ldr	r2, [r7, #12]
    32be:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    32c0:	693b      	ldr	r3, [r7, #16]
    32c2:	3318      	adds	r3, #24
    32c4:	68fa      	ldr	r2, [r7, #12]
    32c6:	68b9      	ldr	r1, [r7, #8]
    32c8:	4618      	mov	r0, r3
    32ca:	4b0f      	ldr	r3, [pc, #60]	; (3308 <timer_process_counted+0xbc>)
    32cc:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    32ce:	693b      	ldr	r3, [r7, #16]
    32d0:	3318      	adds	r3, #24
    32d2:	4618      	mov	r0, r3
    32d4:	4b0a      	ldr	r3, [pc, #40]	; (3300 <timer_process_counted+0xb4>)
    32d6:	4798      	blx	r3
    32d8:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    32da:	68bb      	ldr	r3, [r7, #8]
    32dc:	68db      	ldr	r3, [r3, #12]
    32de:	68b8      	ldr	r0, [r7, #8]
    32e0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    32e2:	697b      	ldr	r3, [r7, #20]
    32e4:	2b00      	cmp	r3, #0
    32e6:	d007      	beq.n	32f8 <timer_process_counted+0xac>
    32e8:	697b      	ldr	r3, [r7, #20]
    32ea:	685b      	ldr	r3, [r3, #4]
    32ec:	68fa      	ldr	r2, [r7, #12]
    32ee:	1ad2      	subs	r2, r2, r3
    32f0:	697b      	ldr	r3, [r7, #20]
    32f2:	689b      	ldr	r3, [r3, #8]
    32f4:	429a      	cmp	r2, r3
    32f6:	d2d5      	bcs.n	32a4 <timer_process_counted+0x58>
	}
}
    32f8:	3718      	adds	r7, #24
    32fa:	46bd      	mov	sp, r7
    32fc:	bd80      	pop	{r7, pc}
    32fe:	bf00      	nop
    3300:	00002e21 	.word	0x00002e21
    3304:	00003db9 	.word	0x00003db9
    3308:	0000319d 	.word	0x0000319d

0000330c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    330c:	b480      	push	{r7}
    330e:	b085      	sub	sp, #20
    3310:	af00      	add	r7, sp, #0
    3312:	4603      	mov	r3, r0
    3314:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3316:	2300      	movs	r3, #0
    3318:	73fb      	strb	r3, [r7, #15]
    331a:	e029      	b.n	3370 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    331c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3320:	4a19      	ldr	r2, [pc, #100]	; (3388 <_usb_d_find_ep+0x7c>)
    3322:	015b      	lsls	r3, r3, #5
    3324:	4413      	add	r3, r2
    3326:	3301      	adds	r3, #1
    3328:	781b      	ldrb	r3, [r3, #0]
    332a:	79fa      	ldrb	r2, [r7, #7]
    332c:	429a      	cmp	r2, r3
    332e:	d102      	bne.n	3336 <_usb_d_find_ep+0x2a>
			return i;
    3330:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3334:	e022      	b.n	337c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3336:	f997 300f 	ldrsb.w	r3, [r7, #15]
    333a:	4a13      	ldr	r2, [pc, #76]	; (3388 <_usb_d_find_ep+0x7c>)
    333c:	015b      	lsls	r3, r3, #5
    333e:	4413      	add	r3, r2
    3340:	781b      	ldrb	r3, [r3, #0]
    3342:	2b00      	cmp	r3, #0
    3344:	d10e      	bne.n	3364 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3346:	79fb      	ldrb	r3, [r7, #7]
    3348:	f003 030f 	and.w	r3, r3, #15
    334c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3350:	490d      	ldr	r1, [pc, #52]	; (3388 <_usb_d_find_ep+0x7c>)
    3352:	0152      	lsls	r2, r2, #5
    3354:	440a      	add	r2, r1
    3356:	3201      	adds	r2, #1
    3358:	7812      	ldrb	r2, [r2, #0]
    335a:	4293      	cmp	r3, r2
    335c:	d102      	bne.n	3364 <_usb_d_find_ep+0x58>
			return i;
    335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3362:	e00b      	b.n	337c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3364:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3368:	b2db      	uxtb	r3, r3
    336a:	3301      	adds	r3, #1
    336c:	b2db      	uxtb	r3, r3
    336e:	73fb      	strb	r3, [r7, #15]
    3370:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3374:	2b03      	cmp	r3, #3
    3376:	ddd1      	ble.n	331c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3378:	f04f 33ff 	mov.w	r3, #4294967295
}
    337c:	4618      	mov	r0, r3
    337e:	3714      	adds	r7, #20
    3380:	46bd      	mov	sp, r7
    3382:	f85d 7b04 	ldr.w	r7, [sp], #4
    3386:	4770      	bx	lr
    3388:	20000b14 	.word	0x20000b14

0000338c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    338c:	b580      	push	{r7, lr}
    338e:	b088      	sub	sp, #32
    3390:	af00      	add	r7, sp, #0
    3392:	60ba      	str	r2, [r7, #8]
    3394:	607b      	str	r3, [r7, #4]
    3396:	4603      	mov	r3, r0
    3398:	73fb      	strb	r3, [r7, #15]
    339a:	460b      	mov	r3, r1
    339c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    339e:	68bb      	ldr	r3, [r7, #8]
    33a0:	617b      	str	r3, [r7, #20]
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	61bb      	str	r3, [r7, #24]
    33a6:	7bbb      	ldrb	r3, [r7, #14]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d004      	beq.n	33b6 <_usb_d_trans+0x2a>
    33ac:	7bfb      	ldrb	r3, [r7, #15]
    33ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33b2:	b2db      	uxtb	r3, r3
    33b4:	e003      	b.n	33be <_usb_d_trans+0x32>
    33b6:	7bfb      	ldrb	r3, [r7, #15]
    33b8:	f003 030f 	and.w	r3, r3, #15
    33bc:	b2db      	uxtb	r3, r3
    33be:	773b      	strb	r3, [r7, #28]
    33c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    33c4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    33c6:	f107 0314 	add.w	r3, r7, #20
    33ca:	4618      	mov	r0, r3
    33cc:	4b03      	ldr	r3, [pc, #12]	; (33dc <_usb_d_trans+0x50>)
    33ce:	4798      	blx	r3
    33d0:	4603      	mov	r3, r0
}
    33d2:	4618      	mov	r0, r3
    33d4:	3720      	adds	r7, #32
    33d6:	46bd      	mov	sp, r7
    33d8:	bd80      	pop	{r7, pc}
    33da:	bf00      	nop
    33dc:	0000ad25 	.word	0x0000ad25

000033e0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    33e0:	b480      	push	{r7}
    33e2:	b085      	sub	sp, #20
    33e4:	af00      	add	r7, sp, #0
    33e6:	60f8      	str	r0, [r7, #12]
    33e8:	60b9      	str	r1, [r7, #8]
    33ea:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    33ec:	2300      	movs	r3, #0
}
    33ee:	4618      	mov	r0, r3
    33f0:	3714      	adds	r7, #20
    33f2:	46bd      	mov	sp, r7
    33f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    33f8:	4770      	bx	lr
	...

000033fc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    33fc:	b580      	push	{r7, lr}
    33fe:	b086      	sub	sp, #24
    3400:	af00      	add	r7, sp, #0
    3402:	4603      	mov	r3, r0
    3404:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3406:	79fb      	ldrb	r3, [r7, #7]
    3408:	4618      	mov	r0, r3
    340a:	4b2a      	ldr	r3, [pc, #168]	; (34b4 <usb_d_cb_trans_setup+0xb8>)
    340c:	4798      	blx	r3
    340e:	4603      	mov	r3, r0
    3410:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3412:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3416:	015b      	lsls	r3, r3, #5
    3418:	4a27      	ldr	r2, [pc, #156]	; (34b8 <usb_d_cb_trans_setup+0xbc>)
    341a:	4413      	add	r3, r2
    341c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    341e:	693b      	ldr	r3, [r7, #16]
    3420:	330c      	adds	r3, #12
    3422:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3424:	79fb      	ldrb	r3, [r7, #7]
    3426:	68f9      	ldr	r1, [r7, #12]
    3428:	4618      	mov	r0, r3
    342a:	4b24      	ldr	r3, [pc, #144]	; (34bc <usb_d_cb_trans_setup+0xc0>)
    342c:	4798      	blx	r3
    342e:	4603      	mov	r3, r0
    3430:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3432:	7afb      	ldrb	r3, [r7, #11]
    3434:	2b08      	cmp	r3, #8
    3436:	d00d      	beq.n	3454 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3438:	79fb      	ldrb	r3, [r7, #7]
    343a:	2101      	movs	r1, #1
    343c:	4618      	mov	r0, r3
    343e:	4b20      	ldr	r3, [pc, #128]	; (34c0 <usb_d_cb_trans_setup+0xc4>)
    3440:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3442:	79fb      	ldrb	r3, [r7, #7]
    3444:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3448:	b2db      	uxtb	r3, r3
    344a:	2101      	movs	r1, #1
    344c:	4618      	mov	r0, r3
    344e:	4b1c      	ldr	r3, [pc, #112]	; (34c0 <usb_d_cb_trans_setup+0xc4>)
    3450:	4798      	blx	r3
		return;
    3452:	e02b      	b.n	34ac <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3454:	79fb      	ldrb	r3, [r7, #7]
    3456:	2100      	movs	r1, #0
    3458:	4618      	mov	r0, r3
    345a:	4b19      	ldr	r3, [pc, #100]	; (34c0 <usb_d_cb_trans_setup+0xc4>)
    345c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    345e:	79fb      	ldrb	r3, [r7, #7]
    3460:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3464:	b2db      	uxtb	r3, r3
    3466:	2100      	movs	r1, #0
    3468:	4618      	mov	r0, r3
    346a:	4b15      	ldr	r3, [pc, #84]	; (34c0 <usb_d_cb_trans_setup+0xc4>)
    346c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    346e:	693b      	ldr	r3, [r7, #16]
    3470:	2201      	movs	r2, #1
    3472:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3474:	693b      	ldr	r3, [r7, #16]
    3476:	695b      	ldr	r3, [r3, #20]
    3478:	79fa      	ldrb	r2, [r7, #7]
    347a:	68f9      	ldr	r1, [r7, #12]
    347c:	4610      	mov	r0, r2
    347e:	4798      	blx	r3
    3480:	4603      	mov	r3, r0
    3482:	f083 0301 	eor.w	r3, r3, #1
    3486:	b2db      	uxtb	r3, r3
    3488:	2b00      	cmp	r3, #0
    348a:	d00f      	beq.n	34ac <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    348c:	693b      	ldr	r3, [r7, #16]
    348e:	2205      	movs	r2, #5
    3490:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3492:	79fb      	ldrb	r3, [r7, #7]
    3494:	2101      	movs	r1, #1
    3496:	4618      	mov	r0, r3
    3498:	4b09      	ldr	r3, [pc, #36]	; (34c0 <usb_d_cb_trans_setup+0xc4>)
    349a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    349c:	79fb      	ldrb	r3, [r7, #7]
    349e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34a2:	b2db      	uxtb	r3, r3
    34a4:	2101      	movs	r1, #1
    34a6:	4618      	mov	r0, r3
    34a8:	4b05      	ldr	r3, [pc, #20]	; (34c0 <usb_d_cb_trans_setup+0xc4>)
    34aa:	4798      	blx	r3
	}
}
    34ac:	3718      	adds	r7, #24
    34ae:	46bd      	mov	sp, r7
    34b0:	bd80      	pop	{r7, pc}
    34b2:	bf00      	nop
    34b4:	0000330d 	.word	0x0000330d
    34b8:	20000b14 	.word	0x20000b14
    34bc:	0000ac7d 	.word	0x0000ac7d
    34c0:	0000aaf5 	.word	0x0000aaf5

000034c4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b084      	sub	sp, #16
    34c8:	af00      	add	r7, sp, #0
    34ca:	4603      	mov	r3, r0
    34cc:	6039      	str	r1, [r7, #0]
    34ce:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    34d0:	79fb      	ldrb	r3, [r7, #7]
    34d2:	4618      	mov	r0, r3
    34d4:	4b0d      	ldr	r3, [pc, #52]	; (350c <usb_d_cb_trans_more+0x48>)
    34d6:	4798      	blx	r3
    34d8:	4603      	mov	r3, r0
    34da:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34e0:	015b      	lsls	r3, r3, #5
    34e2:	4a0b      	ldr	r2, [pc, #44]	; (3510 <usb_d_cb_trans_more+0x4c>)
    34e4:	4413      	add	r3, r2
    34e6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    34e8:	68bb      	ldr	r3, [r7, #8]
    34ea:	789b      	ldrb	r3, [r3, #2]
    34ec:	2b03      	cmp	r3, #3
    34ee:	d107      	bne.n	3500 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    34f0:	68bb      	ldr	r3, [r7, #8]
    34f2:	699b      	ldr	r3, [r3, #24]
    34f4:	79fa      	ldrb	r2, [r7, #7]
    34f6:	6839      	ldr	r1, [r7, #0]
    34f8:	4610      	mov	r0, r2
    34fa:	4798      	blx	r3
    34fc:	4603      	mov	r3, r0
    34fe:	e000      	b.n	3502 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3500:	2300      	movs	r3, #0
}
    3502:	4618      	mov	r0, r3
    3504:	3710      	adds	r7, #16
    3506:	46bd      	mov	sp, r7
    3508:	bd80      	pop	{r7, pc}
    350a:	bf00      	nop
    350c:	0000330d 	.word	0x0000330d
    3510:	20000b14 	.word	0x20000b14

00003514 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3514:	b590      	push	{r4, r7, lr}
    3516:	b087      	sub	sp, #28
    3518:	af02      	add	r7, sp, #8
    351a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	789b      	ldrb	r3, [r3, #2]
    3520:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	7b1b      	ldrb	r3, [r3, #12]
    3526:	f003 0380 	and.w	r3, r3, #128	; 0x80
    352a:	2b00      	cmp	r3, #0
    352c:	bf14      	ite	ne
    352e:	2301      	movne	r3, #1
    3530:	2300      	moveq	r3, #0
    3532:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3534:	7bfb      	ldrb	r3, [r7, #15]
    3536:	2b03      	cmp	r3, #3
    3538:	d13a      	bne.n	35b0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	69db      	ldr	r3, [r3, #28]
    353e:	687a      	ldr	r2, [r7, #4]
    3540:	7850      	ldrb	r0, [r2, #1]
    3542:	687a      	ldr	r2, [r7, #4]
    3544:	320c      	adds	r2, #12
    3546:	2101      	movs	r1, #1
    3548:	4798      	blx	r3
    354a:	4603      	mov	r3, r0
    354c:	737b      	strb	r3, [r7, #13]
		if (err) {
    354e:	7b7b      	ldrb	r3, [r7, #13]
    3550:	2b00      	cmp	r3, #0
    3552:	d015      	beq.n	3580 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	2205      	movs	r2, #5
    3558:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	2202      	movs	r2, #2
    355e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3560:	7bbb      	ldrb	r3, [r7, #14]
    3562:	2b00      	cmp	r3, #0
    3564:	d002      	beq.n	356c <usb_d_ctrl_trans_done+0x58>
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	785b      	ldrb	r3, [r3, #1]
    356a:	e004      	b.n	3576 <usb_d_ctrl_trans_done+0x62>
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	785b      	ldrb	r3, [r3, #1]
    3570:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3574:	b2db      	uxtb	r3, r3
    3576:	2101      	movs	r1, #1
    3578:	4618      	mov	r0, r3
    357a:	4b15      	ldr	r3, [pc, #84]	; (35d0 <usb_d_ctrl_trans_done+0xbc>)
    357c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    357e:	e022      	b.n	35c6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	2204      	movs	r2, #4
    3584:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	7858      	ldrb	r0, [r3, #1]
    358a:	7bbb      	ldrb	r3, [r7, #14]
    358c:	2b00      	cmp	r3, #0
    358e:	bf14      	ite	ne
    3590:	2301      	movne	r3, #1
    3592:	2300      	moveq	r3, #0
    3594:	b2db      	uxtb	r3, r3
    3596:	f083 0301 	eor.w	r3, r3, #1
    359a:	b2db      	uxtb	r3, r3
    359c:	f003 0301 	and.w	r3, r3, #1
    35a0:	b2d9      	uxtb	r1, r3
    35a2:	2301      	movs	r3, #1
    35a4:	9300      	str	r3, [sp, #0]
    35a6:	2300      	movs	r3, #0
    35a8:	2200      	movs	r2, #0
    35aa:	4c0a      	ldr	r4, [pc, #40]	; (35d4 <usb_d_ctrl_trans_done+0xc0>)
    35ac:	47a0      	blx	r4
}
    35ae:	e00a      	b.n	35c6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	69db      	ldr	r3, [r3, #28]
    35b4:	687a      	ldr	r2, [r7, #4]
    35b6:	7850      	ldrb	r0, [r2, #1]
    35b8:	687a      	ldr	r2, [r7, #4]
    35ba:	320c      	adds	r2, #12
    35bc:	2100      	movs	r1, #0
    35be:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	2202      	movs	r2, #2
    35c4:	709a      	strb	r2, [r3, #2]
}
    35c6:	bf00      	nop
    35c8:	3714      	adds	r7, #20
    35ca:	46bd      	mov	sp, r7
    35cc:	bd90      	pop	{r4, r7, pc}
    35ce:	bf00      	nop
    35d0:	0000aaf5 	.word	0x0000aaf5
    35d4:	0000338d 	.word	0x0000338d

000035d8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    35d8:	b580      	push	{r7, lr}
    35da:	b086      	sub	sp, #24
    35dc:	af00      	add	r7, sp, #0
    35de:	4603      	mov	r3, r0
    35e0:	60b9      	str	r1, [r7, #8]
    35e2:	607a      	str	r2, [r7, #4]
    35e4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35e6:	7bfb      	ldrb	r3, [r7, #15]
    35e8:	4618      	mov	r0, r3
    35ea:	4b2f      	ldr	r3, [pc, #188]	; (36a8 <_usb_d_cb_trans_done+0xd0>)
    35ec:	4798      	blx	r3
    35ee:	4603      	mov	r3, r0
    35f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35f6:	015b      	lsls	r3, r3, #5
    35f8:	4a2c      	ldr	r2, [pc, #176]	; (36ac <_usb_d_cb_trans_done+0xd4>)
    35fa:	4413      	add	r3, r2
    35fc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    35fe:	68bb      	ldr	r3, [r7, #8]
    3600:	2b00      	cmp	r3, #0
    3602:	d10e      	bne.n	3622 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3604:	693b      	ldr	r3, [r7, #16]
    3606:	2200      	movs	r2, #0
    3608:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    360a:	693b      	ldr	r3, [r7, #16]
    360c:	781b      	ldrb	r3, [r3, #0]
    360e:	2b00      	cmp	r3, #0
    3610:	d103      	bne.n	361a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3612:	6938      	ldr	r0, [r7, #16]
    3614:	4b26      	ldr	r3, [pc, #152]	; (36b0 <_usb_d_cb_trans_done+0xd8>)
    3616:	4798      	blx	r3
			return;
    3618:	e043      	b.n	36a2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    361a:	693b      	ldr	r3, [r7, #16]
    361c:	2201      	movs	r2, #1
    361e:	709a      	strb	r2, [r3, #2]
    3620:	e038      	b.n	3694 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3622:	68bb      	ldr	r3, [r7, #8]
    3624:	2b01      	cmp	r3, #1
    3626:	d113      	bne.n	3650 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3628:	693b      	ldr	r3, [r7, #16]
    362a:	2202      	movs	r2, #2
    362c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    362e:	693b      	ldr	r3, [r7, #16]
    3630:	781b      	ldrb	r3, [r3, #0]
    3632:	2b00      	cmp	r3, #0
    3634:	d108      	bne.n	3648 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3636:	693b      	ldr	r3, [r7, #16]
    3638:	2202      	movs	r2, #2
    363a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    363c:	7bfb      	ldrb	r3, [r7, #15]
    363e:	2100      	movs	r1, #0
    3640:	4618      	mov	r0, r3
    3642:	4b1c      	ldr	r3, [pc, #112]	; (36b4 <_usb_d_cb_trans_done+0xdc>)
    3644:	4798      	blx	r3
    3646:	e025      	b.n	3694 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3648:	693b      	ldr	r3, [r7, #16]
    364a:	2205      	movs	r2, #5
    364c:	709a      	strb	r2, [r3, #2]
    364e:	e021      	b.n	3694 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3650:	68bb      	ldr	r3, [r7, #8]
    3652:	2b02      	cmp	r3, #2
    3654:	d10e      	bne.n	3674 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3656:	693b      	ldr	r3, [r7, #16]
    3658:	2204      	movs	r2, #4
    365a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    365c:	693b      	ldr	r3, [r7, #16]
    365e:	781b      	ldrb	r3, [r3, #0]
    3660:	2b00      	cmp	r3, #0
    3662:	d103      	bne.n	366c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3664:	693b      	ldr	r3, [r7, #16]
    3666:	2202      	movs	r2, #2
    3668:	709a      	strb	r2, [r3, #2]
			return;
    366a:	e01a      	b.n	36a2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    366c:	693b      	ldr	r3, [r7, #16]
    366e:	2201      	movs	r2, #1
    3670:	709a      	strb	r2, [r3, #2]
    3672:	e00f      	b.n	3694 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3674:	68bb      	ldr	r3, [r7, #8]
    3676:	2b03      	cmp	r3, #3
    3678:	d106      	bne.n	3688 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    367a:	693b      	ldr	r3, [r7, #16]
    367c:	2200      	movs	r2, #0
    367e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3680:	693b      	ldr	r3, [r7, #16]
    3682:	2205      	movs	r2, #5
    3684:	70da      	strb	r2, [r3, #3]
    3686:	e005      	b.n	3694 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3688:	693b      	ldr	r3, [r7, #16]
    368a:	2206      	movs	r2, #6
    368c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    368e:	693b      	ldr	r3, [r7, #16]
    3690:	2206      	movs	r2, #6
    3692:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3694:	693b      	ldr	r3, [r7, #16]
    3696:	69db      	ldr	r3, [r3, #28]
    3698:	693a      	ldr	r2, [r7, #16]
    369a:	78d1      	ldrb	r1, [r2, #3]
    369c:	687a      	ldr	r2, [r7, #4]
    369e:	7bf8      	ldrb	r0, [r7, #15]
    36a0:	4798      	blx	r3
}
    36a2:	3718      	adds	r7, #24
    36a4:	46bd      	mov	sp, r7
    36a6:	bd80      	pop	{r7, pc}
    36a8:	0000330d 	.word	0x0000330d
    36ac:	20000b14 	.word	0x20000b14
    36b0:	00003515 	.word	0x00003515
    36b4:	0000aaf5 	.word	0x0000aaf5

000036b8 <usb_d_init>:

int32_t usb_d_init(void)
{
    36b8:	b580      	push	{r7, lr}
    36ba:	b082      	sub	sp, #8
    36bc:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    36be:	4b21      	ldr	r3, [pc, #132]	; (3744 <usb_d_init+0x8c>)
    36c0:	4798      	blx	r3
    36c2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    36c4:	683b      	ldr	r3, [r7, #0]
    36c6:	2b00      	cmp	r3, #0
    36c8:	da01      	bge.n	36ce <usb_d_init+0x16>
		return rc;
    36ca:	683b      	ldr	r3, [r7, #0]
    36cc:	e036      	b.n	373c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    36ce:	2280      	movs	r2, #128	; 0x80
    36d0:	2100      	movs	r1, #0
    36d2:	481d      	ldr	r0, [pc, #116]	; (3748 <usb_d_init+0x90>)
    36d4:	4b1d      	ldr	r3, [pc, #116]	; (374c <usb_d_init+0x94>)
    36d6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    36d8:	2300      	movs	r3, #0
    36da:	71fb      	strb	r3, [r7, #7]
    36dc:	e01e      	b.n	371c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    36de:	79fb      	ldrb	r3, [r7, #7]
    36e0:	4a19      	ldr	r2, [pc, #100]	; (3748 <usb_d_init+0x90>)
    36e2:	015b      	lsls	r3, r3, #5
    36e4:	4413      	add	r3, r2
    36e6:	3301      	adds	r3, #1
    36e8:	22ff      	movs	r2, #255	; 0xff
    36ea:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    36ec:	79fb      	ldrb	r3, [r7, #7]
    36ee:	4a16      	ldr	r2, [pc, #88]	; (3748 <usb_d_init+0x90>)
    36f0:	015b      	lsls	r3, r3, #5
    36f2:	4413      	add	r3, r2
    36f4:	3314      	adds	r3, #20
    36f6:	4a16      	ldr	r2, [pc, #88]	; (3750 <usb_d_init+0x98>)
    36f8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    36fa:	79fb      	ldrb	r3, [r7, #7]
    36fc:	4a12      	ldr	r2, [pc, #72]	; (3748 <usb_d_init+0x90>)
    36fe:	015b      	lsls	r3, r3, #5
    3700:	4413      	add	r3, r2
    3702:	3318      	adds	r3, #24
    3704:	4a12      	ldr	r2, [pc, #72]	; (3750 <usb_d_init+0x98>)
    3706:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3708:	79fb      	ldrb	r3, [r7, #7]
    370a:	4a0f      	ldr	r2, [pc, #60]	; (3748 <usb_d_init+0x90>)
    370c:	015b      	lsls	r3, r3, #5
    370e:	4413      	add	r3, r2
    3710:	331c      	adds	r3, #28
    3712:	4a0f      	ldr	r2, [pc, #60]	; (3750 <usb_d_init+0x98>)
    3714:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3716:	79fb      	ldrb	r3, [r7, #7]
    3718:	3301      	adds	r3, #1
    371a:	71fb      	strb	r3, [r7, #7]
    371c:	79fb      	ldrb	r3, [r7, #7]
    371e:	2b03      	cmp	r3, #3
    3720:	d9dd      	bls.n	36de <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3722:	490c      	ldr	r1, [pc, #48]	; (3754 <usb_d_init+0x9c>)
    3724:	2000      	movs	r0, #0
    3726:	4b0c      	ldr	r3, [pc, #48]	; (3758 <usb_d_init+0xa0>)
    3728:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    372a:	490c      	ldr	r1, [pc, #48]	; (375c <usb_d_init+0xa4>)
    372c:	2001      	movs	r0, #1
    372e:	4b0a      	ldr	r3, [pc, #40]	; (3758 <usb_d_init+0xa0>)
    3730:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3732:	490b      	ldr	r1, [pc, #44]	; (3760 <usb_d_init+0xa8>)
    3734:	2002      	movs	r0, #2
    3736:	4b08      	ldr	r3, [pc, #32]	; (3758 <usb_d_init+0xa0>)
    3738:	4798      	blx	r3
	return ERR_NONE;
    373a:	2300      	movs	r3, #0
}
    373c:	4618      	mov	r0, r3
    373e:	3708      	adds	r7, #8
    3740:	46bd      	mov	sp, r7
    3742:	bd80      	pop	{r7, pc}
    3744:	0000a33d 	.word	0x0000a33d
    3748:	20000b14 	.word	0x20000b14
    374c:	0000ff45 	.word	0x0000ff45
    3750:	000033e1 	.word	0x000033e1
    3754:	000033fd 	.word	0x000033fd
    3758:	0000af85 	.word	0x0000af85
    375c:	000034c5 	.word	0x000034c5
    3760:	000035d9 	.word	0x000035d9

00003764 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3764:	b580      	push	{r7, lr}
    3766:	b082      	sub	sp, #8
    3768:	af00      	add	r7, sp, #0
    376a:	4603      	mov	r3, r0
    376c:	6039      	str	r1, [r7, #0]
    376e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3770:	79fb      	ldrb	r3, [r7, #7]
    3772:	6839      	ldr	r1, [r7, #0]
    3774:	4618      	mov	r0, r3
    3776:	4b03      	ldr	r3, [pc, #12]	; (3784 <usb_d_register_callback+0x20>)
    3778:	4798      	blx	r3
}
    377a:	bf00      	nop
    377c:	3708      	adds	r7, #8
    377e:	46bd      	mov	sp, r7
    3780:	bd80      	pop	{r7, pc}
    3782:	bf00      	nop
    3784:	0000af3d 	.word	0x0000af3d

00003788 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3788:	b580      	push	{r7, lr}
    378a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    378c:	4b02      	ldr	r3, [pc, #8]	; (3798 <usb_d_enable+0x10>)
    378e:	4798      	blx	r3
    3790:	4603      	mov	r3, r0
}
    3792:	4618      	mov	r0, r3
    3794:	bd80      	pop	{r7, pc}
    3796:	bf00      	nop
    3798:	0000a42d 	.word	0x0000a42d

0000379c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    379c:	b580      	push	{r7, lr}
    379e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    37a0:	4b01      	ldr	r3, [pc, #4]	; (37a8 <usb_d_attach+0xc>)
    37a2:	4798      	blx	r3
}
    37a4:	bf00      	nop
    37a6:	bd80      	pop	{r7, pc}
    37a8:	0000a4b1 	.word	0x0000a4b1

000037ac <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    37ac:	b580      	push	{r7, lr}
    37ae:	b082      	sub	sp, #8
    37b0:	af00      	add	r7, sp, #0
    37b2:	4603      	mov	r3, r0
    37b4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    37b6:	79fb      	ldrb	r3, [r7, #7]
    37b8:	4618      	mov	r0, r3
    37ba:	4b03      	ldr	r3, [pc, #12]	; (37c8 <usb_d_set_address+0x1c>)
    37bc:	4798      	blx	r3
}
    37be:	bf00      	nop
    37c0:	3708      	adds	r7, #8
    37c2:	46bd      	mov	sp, r7
    37c4:	bd80      	pop	{r7, pc}
    37c6:	bf00      	nop
    37c8:	0000a4c5 	.word	0x0000a4c5

000037cc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    37cc:	b580      	push	{r7, lr}
    37ce:	b082      	sub	sp, #8
    37d0:	af00      	add	r7, sp, #0
    37d2:	4603      	mov	r3, r0
    37d4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    37d6:	79fb      	ldrb	r3, [r7, #7]
    37d8:	b29b      	uxth	r3, r3
    37da:	461a      	mov	r2, r3
    37dc:	2100      	movs	r1, #0
    37de:	2000      	movs	r0, #0
    37e0:	4b03      	ldr	r3, [pc, #12]	; (37f0 <usb_d_ep0_init+0x24>)
    37e2:	4798      	blx	r3
    37e4:	4603      	mov	r3, r0
}
    37e6:	4618      	mov	r0, r3
    37e8:	3708      	adds	r7, #8
    37ea:	46bd      	mov	sp, r7
    37ec:	bd80      	pop	{r7, pc}
    37ee:	bf00      	nop
    37f0:	000037f5 	.word	0x000037f5

000037f4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b086      	sub	sp, #24
    37f8:	af00      	add	r7, sp, #0
    37fa:	4603      	mov	r3, r0
    37fc:	71fb      	strb	r3, [r7, #7]
    37fe:	460b      	mov	r3, r1
    3800:	71bb      	strb	r3, [r7, #6]
    3802:	4613      	mov	r3, r2
    3804:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3806:	79fb      	ldrb	r3, [r7, #7]
    3808:	4618      	mov	r0, r3
    380a:	4b1e      	ldr	r3, [pc, #120]	; (3884 <usb_d_ep_init+0x90>)
    380c:	4798      	blx	r3
    380e:	4603      	mov	r3, r0
    3810:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3812:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3816:	015b      	lsls	r3, r3, #5
    3818:	4a1b      	ldr	r2, [pc, #108]	; (3888 <usb_d_ep_init+0x94>)
    381a:	4413      	add	r3, r2
    381c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    381e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3822:	2b00      	cmp	r3, #0
    3824:	db02      	blt.n	382c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3826:	f06f 0313 	mvn.w	r3, #19
    382a:	e027      	b.n	387c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    382c:	20ff      	movs	r0, #255	; 0xff
    382e:	4b15      	ldr	r3, [pc, #84]	; (3884 <usb_d_ep_init+0x90>)
    3830:	4798      	blx	r3
    3832:	4603      	mov	r3, r0
    3834:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3836:	f997 3017 	ldrsb.w	r3, [r7, #23]
    383a:	2b00      	cmp	r3, #0
    383c:	da02      	bge.n	3844 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    383e:	f06f 0314 	mvn.w	r3, #20
    3842:	e01b      	b.n	387c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3844:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3848:	015b      	lsls	r3, r3, #5
    384a:	4a0f      	ldr	r2, [pc, #60]	; (3888 <usb_d_ep_init+0x94>)
    384c:	4413      	add	r3, r2
    384e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3850:	88ba      	ldrh	r2, [r7, #4]
    3852:	79b9      	ldrb	r1, [r7, #6]
    3854:	79fb      	ldrb	r3, [r7, #7]
    3856:	4618      	mov	r0, r3
    3858:	4b0c      	ldr	r3, [pc, #48]	; (388c <usb_d_ep_init+0x98>)
    385a:	4798      	blx	r3
    385c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	2b00      	cmp	r3, #0
    3862:	da01      	bge.n	3868 <usb_d_ep_init+0x74>
		return rc;
    3864:	68fb      	ldr	r3, [r7, #12]
    3866:	e009      	b.n	387c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3868:	693b      	ldr	r3, [r7, #16]
    386a:	79fa      	ldrb	r2, [r7, #7]
    386c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    386e:	79bb      	ldrb	r3, [r7, #6]
    3870:	f003 0303 	and.w	r3, r3, #3
    3874:	b2da      	uxtb	r2, r3
    3876:	693b      	ldr	r3, [r7, #16]
    3878:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    387a:	2300      	movs	r3, #0
}
    387c:	4618      	mov	r0, r3
    387e:	3718      	adds	r7, #24
    3880:	46bd      	mov	sp, r7
    3882:	bd80      	pop	{r7, pc}
    3884:	0000330d 	.word	0x0000330d
    3888:	20000b14 	.word	0x20000b14
    388c:	0000a565 	.word	0x0000a565

00003890 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3890:	b580      	push	{r7, lr}
    3892:	b084      	sub	sp, #16
    3894:	af00      	add	r7, sp, #0
    3896:	4603      	mov	r3, r0
    3898:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    389a:	79fb      	ldrb	r3, [r7, #7]
    389c:	4618      	mov	r0, r3
    389e:	4b0d      	ldr	r3, [pc, #52]	; (38d4 <usb_d_ep_deinit+0x44>)
    38a0:	4798      	blx	r3
    38a2:	4603      	mov	r3, r0
    38a4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38aa:	015b      	lsls	r3, r3, #5
    38ac:	4a0a      	ldr	r2, [pc, #40]	; (38d8 <usb_d_ep_deinit+0x48>)
    38ae:	4413      	add	r3, r2
    38b0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    38b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38b6:	2b00      	cmp	r3, #0
    38b8:	db07      	blt.n	38ca <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    38ba:	79fb      	ldrb	r3, [r7, #7]
    38bc:	4618      	mov	r0, r3
    38be:	4b07      	ldr	r3, [pc, #28]	; (38dc <usb_d_ep_deinit+0x4c>)
    38c0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    38c2:	68bb      	ldr	r3, [r7, #8]
    38c4:	22ff      	movs	r2, #255	; 0xff
    38c6:	705a      	strb	r2, [r3, #1]
    38c8:	e000      	b.n	38cc <usb_d_ep_deinit+0x3c>
		return;
    38ca:	bf00      	nop
}
    38cc:	3710      	adds	r7, #16
    38ce:	46bd      	mov	sp, r7
    38d0:	bd80      	pop	{r7, pc}
    38d2:	bf00      	nop
    38d4:	0000330d 	.word	0x0000330d
    38d8:	20000b14 	.word	0x20000b14
    38dc:	0000a699 	.word	0x0000a699

000038e0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b086      	sub	sp, #24
    38e4:	af00      	add	r7, sp, #0
    38e6:	4603      	mov	r3, r0
    38e8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    38ea:	79fb      	ldrb	r3, [r7, #7]
    38ec:	4618      	mov	r0, r3
    38ee:	4b15      	ldr	r3, [pc, #84]	; (3944 <usb_d_ep_enable+0x64>)
    38f0:	4798      	blx	r3
    38f2:	4603      	mov	r3, r0
    38f4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38fa:	015b      	lsls	r3, r3, #5
    38fc:	4a12      	ldr	r2, [pc, #72]	; (3948 <usb_d_ep_enable+0x68>)
    38fe:	4413      	add	r3, r2
    3900:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3902:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3906:	2b00      	cmp	r3, #0
    3908:	da02      	bge.n	3910 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    390a:	f06f 0311 	mvn.w	r3, #17
    390e:	e014      	b.n	393a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3910:	693b      	ldr	r3, [r7, #16]
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	2b00      	cmp	r3, #0
    3916:	d101      	bne.n	391c <usb_d_ep_enable+0x3c>
    3918:	2202      	movs	r2, #2
    391a:	e000      	b.n	391e <usb_d_ep_enable+0x3e>
    391c:	2201      	movs	r2, #1
    391e:	693b      	ldr	r3, [r7, #16]
    3920:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3922:	79fb      	ldrb	r3, [r7, #7]
    3924:	4618      	mov	r0, r3
    3926:	4b09      	ldr	r3, [pc, #36]	; (394c <usb_d_ep_enable+0x6c>)
    3928:	4798      	blx	r3
    392a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    392c:	68fb      	ldr	r3, [r7, #12]
    392e:	2b00      	cmp	r3, #0
    3930:	da02      	bge.n	3938 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3932:	693b      	ldr	r3, [r7, #16]
    3934:	2200      	movs	r2, #0
    3936:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3938:	68fb      	ldr	r3, [r7, #12]
}
    393a:	4618      	mov	r0, r3
    393c:	3718      	adds	r7, #24
    393e:	46bd      	mov	sp, r7
    3940:	bd80      	pop	{r7, pc}
    3942:	bf00      	nop
    3944:	0000330d 	.word	0x0000330d
    3948:	20000b14 	.word	0x20000b14
    394c:	0000a77d 	.word	0x0000a77d

00003950 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3950:	b590      	push	{r4, r7, lr}
    3952:	b08d      	sub	sp, #52	; 0x34
    3954:	af02      	add	r7, sp, #8
    3956:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	7a1b      	ldrb	r3, [r3, #8]
    395c:	4618      	mov	r0, r3
    395e:	4b51      	ldr	r3, [pc, #324]	; (3aa4 <usb_d_ep_transfer+0x154>)
    3960:	4798      	blx	r3
    3962:	4603      	mov	r3, r0
    3964:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3966:	f997 301f 	ldrsb.w	r3, [r7, #31]
    396a:	015b      	lsls	r3, r3, #5
    396c:	4a4e      	ldr	r2, [pc, #312]	; (3aa8 <usb_d_ep_transfer+0x158>)
    396e:	4413      	add	r3, r2
    3970:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	7a1b      	ldrb	r3, [r3, #8]
    3976:	f003 0380 	and.w	r3, r3, #128	; 0x80
    397a:	2b00      	cmp	r3, #0
    397c:	bf14      	ite	ne
    397e:	2301      	movne	r3, #1
    3980:	2300      	moveq	r3, #0
    3982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3986:	687b      	ldr	r3, [r7, #4]
    3988:	7a5b      	ldrb	r3, [r3, #9]
    398a:	2b00      	cmp	r3, #0
    398c:	bf14      	ite	ne
    398e:	2301      	movne	r3, #1
    3990:	2300      	moveq	r3, #0
    3992:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	685b      	ldr	r3, [r3, #4]
    399a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    399c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    39a0:	2b00      	cmp	r3, #0
    39a2:	da02      	bge.n	39aa <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    39a4:	f06f 0311 	mvn.w	r3, #17
    39a8:	e077      	b.n	3a9a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    39aa:	f107 0308 	add.w	r3, r7, #8
    39ae:	4618      	mov	r0, r3
    39b0:	4b3e      	ldr	r3, [pc, #248]	; (3aac <usb_d_ep_transfer+0x15c>)
    39b2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    39b4:	69bb      	ldr	r3, [r7, #24]
    39b6:	789b      	ldrb	r3, [r3, #2]
    39b8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    39ba:	7bfb      	ldrb	r3, [r7, #15]
    39bc:	b2db      	uxtb	r3, r3
    39be:	2b01      	cmp	r3, #1
    39c0:	d10c      	bne.n	39dc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    39c2:	69bb      	ldr	r3, [r7, #24]
    39c4:	2203      	movs	r2, #3
    39c6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    39c8:	f107 0308 	add.w	r3, r7, #8
    39cc:	4618      	mov	r0, r3
    39ce:	4b38      	ldr	r3, [pc, #224]	; (3ab0 <usb_d_ep_transfer+0x160>)
    39d0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    39d2:	69bb      	ldr	r3, [r7, #24]
    39d4:	781b      	ldrb	r3, [r3, #0]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d151      	bne.n	3a7e <usb_d_ep_transfer+0x12e>
    39da:	e017      	b.n	3a0c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    39dc:	f107 0308 	add.w	r3, r7, #8
    39e0:	4618      	mov	r0, r3
    39e2:	4b33      	ldr	r3, [pc, #204]	; (3ab0 <usb_d_ep_transfer+0x160>)
    39e4:	4798      	blx	r3
		switch (state) {
    39e6:	7bfb      	ldrb	r3, [r7, #15]
    39e8:	b2db      	uxtb	r3, r3
    39ea:	2b05      	cmp	r3, #5
    39ec:	d004      	beq.n	39f8 <usb_d_ep_transfer+0xa8>
    39ee:	2b06      	cmp	r3, #6
    39f0:	d004      	beq.n	39fc <usb_d_ep_transfer+0xac>
    39f2:	2b00      	cmp	r3, #0
    39f4:	d005      	beq.n	3a02 <usb_d_ep_transfer+0xb2>
    39f6:	e007      	b.n	3a08 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    39f8:	2302      	movs	r3, #2
    39fa:	e04e      	b.n	3a9a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    39fc:	f06f 030f 	mvn.w	r3, #15
    3a00:	e04b      	b.n	3a9a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3a02:	f06f 0312 	mvn.w	r3, #18
    3a06:	e048      	b.n	3a9a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3a08:	2301      	movs	r3, #1
    3a0a:	e046      	b.n	3a9a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3a0c:	69bb      	ldr	r3, [r7, #24]
    3a0e:	7c9b      	ldrb	r3, [r3, #18]
    3a10:	b29a      	uxth	r2, r3
    3a12:	69bb      	ldr	r3, [r7, #24]
    3a14:	7cdb      	ldrb	r3, [r3, #19]
    3a16:	b29b      	uxth	r3, r3
    3a18:	021b      	lsls	r3, r3, #8
    3a1a:	b29b      	uxth	r3, r3
    3a1c:	4413      	add	r3, r2
    3a1e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3a20:	8afb      	ldrh	r3, [r7, #22]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d10b      	bne.n	3a3e <usb_d_ep_transfer+0xee>
			dir                 = true;
    3a26:	2301      	movs	r3, #1
    3a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3a2c:	2300      	movs	r3, #0
    3a2e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3a30:	2301      	movs	r3, #1
    3a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3a36:	69bb      	ldr	r3, [r7, #24]
    3a38:	2204      	movs	r2, #4
    3a3a:	709a      	strb	r2, [r3, #2]
    3a3c:	e01f      	b.n	3a7e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3a3e:	69bb      	ldr	r3, [r7, #24]
    3a40:	7b1b      	ldrb	r3, [r3, #12]
    3a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3a46:	2b00      	cmp	r3, #0
    3a48:	bf14      	ite	ne
    3a4a:	2301      	movne	r3, #1
    3a4c:	2300      	moveq	r3, #0
    3a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3a52:	8afa      	ldrh	r2, [r7, #22]
    3a54:	6a3b      	ldr	r3, [r7, #32]
    3a56:	429a      	cmp	r2, r3
    3a58:	d201      	bcs.n	3a5e <usb_d_ep_transfer+0x10e>
				len = req_len;
    3a5a:	8afb      	ldrh	r3, [r7, #22]
    3a5c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3a62:	2b00      	cmp	r3, #0
    3a64:	d008      	beq.n	3a78 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3a66:	8afa      	ldrh	r2, [r7, #22]
    3a68:	6a3b      	ldr	r3, [r7, #32]
    3a6a:	429a      	cmp	r2, r3
    3a6c:	bf8c      	ite	hi
    3a6e:	2301      	movhi	r3, #1
    3a70:	2300      	movls	r3, #0
    3a72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3a76:	e002      	b.n	3a7e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3a78:	2300      	movs	r3, #0
    3a7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	7a18      	ldrb	r0, [r3, #8]
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	681a      	ldr	r2, [r3, #0]
    3a86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3a8a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3a8e:	9300      	str	r3, [sp, #0]
    3a90:	6a3b      	ldr	r3, [r7, #32]
    3a92:	4c08      	ldr	r4, [pc, #32]	; (3ab4 <usb_d_ep_transfer+0x164>)
    3a94:	47a0      	blx	r4
    3a96:	6138      	str	r0, [r7, #16]
	return rc;
    3a98:	693b      	ldr	r3, [r7, #16]
}
    3a9a:	4618      	mov	r0, r3
    3a9c:	372c      	adds	r7, #44	; 0x2c
    3a9e:	46bd      	mov	sp, r7
    3aa0:	bd90      	pop	{r4, r7, pc}
    3aa2:	bf00      	nop
    3aa4:	0000330d 	.word	0x0000330d
    3aa8:	20000b14 	.word	0x20000b14
    3aac:	00002479 	.word	0x00002479
    3ab0:	0000249f 	.word	0x0000249f
    3ab4:	0000338d 	.word	0x0000338d

00003ab8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3ab8:	b580      	push	{r7, lr}
    3aba:	b084      	sub	sp, #16
    3abc:	af00      	add	r7, sp, #0
    3abe:	4603      	mov	r3, r0
    3ac0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3ac2:	79fb      	ldrb	r3, [r7, #7]
    3ac4:	4618      	mov	r0, r3
    3ac6:	4b0e      	ldr	r3, [pc, #56]	; (3b00 <usb_d_ep_abort+0x48>)
    3ac8:	4798      	blx	r3
    3aca:	4603      	mov	r3, r0
    3acc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ad2:	015b      	lsls	r3, r3, #5
    3ad4:	4a0b      	ldr	r2, [pc, #44]	; (3b04 <usb_d_ep_abort+0x4c>)
    3ad6:	4413      	add	r3, r2
    3ad8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ade:	2b00      	cmp	r3, #0
    3ae0:	db0a      	blt.n	3af8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3ae2:	79fb      	ldrb	r3, [r7, #7]
    3ae4:	4618      	mov	r0, r3
    3ae6:	4b08      	ldr	r3, [pc, #32]	; (3b08 <usb_d_ep_abort+0x50>)
    3ae8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3aea:	68bb      	ldr	r3, [r7, #8]
    3aec:	2201      	movs	r2, #1
    3aee:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3af0:	68bb      	ldr	r3, [r7, #8]
    3af2:	2204      	movs	r2, #4
    3af4:	70da      	strb	r2, [r3, #3]
    3af6:	e000      	b.n	3afa <usb_d_ep_abort+0x42>
		return;
    3af8:	bf00      	nop
}
    3afa:	3710      	adds	r7, #16
    3afc:	46bd      	mov	sp, r7
    3afe:	bd80      	pop	{r7, pc}
    3b00:	0000330d 	.word	0x0000330d
    3b04:	20000b14 	.word	0x20000b14
    3b08:	0000aee9 	.word	0x0000aee9

00003b0c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	b086      	sub	sp, #24
    3b10:	af00      	add	r7, sp, #0
    3b12:	4603      	mov	r3, r0
    3b14:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b16:	79fb      	ldrb	r3, [r7, #7]
    3b18:	4618      	mov	r0, r3
    3b1a:	4b1a      	ldr	r3, [pc, #104]	; (3b84 <_usb_d_ep_halt_clr+0x78>)
    3b1c:	4798      	blx	r3
    3b1e:	4603      	mov	r3, r0
    3b20:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b26:	015b      	lsls	r3, r3, #5
    3b28:	4a17      	ldr	r2, [pc, #92]	; (3b88 <_usb_d_ep_halt_clr+0x7c>)
    3b2a:	4413      	add	r3, r2
    3b2c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b32:	2b00      	cmp	r3, #0
    3b34:	da02      	bge.n	3b3c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3b36:	f06f 0311 	mvn.w	r3, #17
    3b3a:	e01f      	b.n	3b7c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3b3c:	79fb      	ldrb	r3, [r7, #7]
    3b3e:	2102      	movs	r1, #2
    3b40:	4618      	mov	r0, r3
    3b42:	4b12      	ldr	r3, [pc, #72]	; (3b8c <_usb_d_ep_halt_clr+0x80>)
    3b44:	4798      	blx	r3
    3b46:	4603      	mov	r3, r0
    3b48:	2b00      	cmp	r3, #0
    3b4a:	d016      	beq.n	3b7a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3b4c:	79fb      	ldrb	r3, [r7, #7]
    3b4e:	2100      	movs	r1, #0
    3b50:	4618      	mov	r0, r3
    3b52:	4b0e      	ldr	r3, [pc, #56]	; (3b8c <_usb_d_ep_halt_clr+0x80>)
    3b54:	4798      	blx	r3
    3b56:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3b58:	68fb      	ldr	r3, [r7, #12]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	da01      	bge.n	3b62 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3b5e:	68fb      	ldr	r3, [r7, #12]
    3b60:	e00c      	b.n	3b7c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3b62:	693b      	ldr	r3, [r7, #16]
    3b64:	2201      	movs	r2, #1
    3b66:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3b68:	693b      	ldr	r3, [r7, #16]
    3b6a:	2203      	movs	r2, #3
    3b6c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3b6e:	693b      	ldr	r3, [r7, #16]
    3b70:	69db      	ldr	r3, [r3, #28]
    3b72:	79f8      	ldrb	r0, [r7, #7]
    3b74:	2200      	movs	r2, #0
    3b76:	2103      	movs	r1, #3
    3b78:	4798      	blx	r3
	}
	return ERR_NONE;
    3b7a:	2300      	movs	r3, #0
}
    3b7c:	4618      	mov	r0, r3
    3b7e:	3718      	adds	r7, #24
    3b80:	46bd      	mov	sp, r7
    3b82:	bd80      	pop	{r7, pc}
    3b84:	0000330d 	.word	0x0000330d
    3b88:	20000b14 	.word	0x20000b14
    3b8c:	0000aaf5 	.word	0x0000aaf5

00003b90 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b082      	sub	sp, #8
    3b94:	af00      	add	r7, sp, #0
    3b96:	4603      	mov	r3, r0
    3b98:	460a      	mov	r2, r1
    3b9a:	71fb      	strb	r3, [r7, #7]
    3b9c:	4613      	mov	r3, r2
    3b9e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3ba0:	79bb      	ldrb	r3, [r7, #6]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d105      	bne.n	3bb2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3ba6:	79fb      	ldrb	r3, [r7, #7]
    3ba8:	4618      	mov	r0, r3
    3baa:	4b0c      	ldr	r3, [pc, #48]	; (3bdc <usb_d_ep_halt+0x4c>)
    3bac:	4798      	blx	r3
    3bae:	4603      	mov	r3, r0
    3bb0:	e00f      	b.n	3bd2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3bb2:	79bb      	ldrb	r3, [r7, #6]
    3bb4:	2b01      	cmp	r3, #1
    3bb6:	d106      	bne.n	3bc6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3bb8:	79fb      	ldrb	r3, [r7, #7]
    3bba:	2101      	movs	r1, #1
    3bbc:	4618      	mov	r0, r3
    3bbe:	4b08      	ldr	r3, [pc, #32]	; (3be0 <usb_d_ep_halt+0x50>)
    3bc0:	4798      	blx	r3
    3bc2:	4603      	mov	r3, r0
    3bc4:	e005      	b.n	3bd2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3bc6:	79fb      	ldrb	r3, [r7, #7]
    3bc8:	2102      	movs	r1, #2
    3bca:	4618      	mov	r0, r3
    3bcc:	4b04      	ldr	r3, [pc, #16]	; (3be0 <usb_d_ep_halt+0x50>)
    3bce:	4798      	blx	r3
    3bd0:	4603      	mov	r3, r0
	}
}
    3bd2:	4618      	mov	r0, r3
    3bd4:	3708      	adds	r7, #8
    3bd6:	46bd      	mov	sp, r7
    3bd8:	bd80      	pop	{r7, pc}
    3bda:	bf00      	nop
    3bdc:	00003b0d 	.word	0x00003b0d
    3be0:	0000aaf5 	.word	0x0000aaf5

00003be4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3be4:	b580      	push	{r7, lr}
    3be6:	b086      	sub	sp, #24
    3be8:	af00      	add	r7, sp, #0
    3bea:	4603      	mov	r3, r0
    3bec:	603a      	str	r2, [r7, #0]
    3bee:	71fb      	strb	r3, [r7, #7]
    3bf0:	460b      	mov	r3, r1
    3bf2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3bf4:	79fb      	ldrb	r3, [r7, #7]
    3bf6:	4618      	mov	r0, r3
    3bf8:	4b16      	ldr	r3, [pc, #88]	; (3c54 <usb_d_ep_register_callback+0x70>)
    3bfa:	4798      	blx	r3
    3bfc:	4603      	mov	r3, r0
    3bfe:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c04:	015b      	lsls	r3, r3, #5
    3c06:	4a14      	ldr	r2, [pc, #80]	; (3c58 <usb_d_ep_register_callback+0x74>)
    3c08:	4413      	add	r3, r2
    3c0a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3c0c:	683b      	ldr	r3, [r7, #0]
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d001      	beq.n	3c16 <usb_d_ep_register_callback+0x32>
    3c12:	683b      	ldr	r3, [r7, #0]
    3c14:	e000      	b.n	3c18 <usb_d_ep_register_callback+0x34>
    3c16:	4b11      	ldr	r3, [pc, #68]	; (3c5c <usb_d_ep_register_callback+0x78>)
    3c18:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	db13      	blt.n	3c4a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3c22:	79bb      	ldrb	r3, [r7, #6]
    3c24:	2b01      	cmp	r3, #1
    3c26:	d008      	beq.n	3c3a <usb_d_ep_register_callback+0x56>
    3c28:	2b02      	cmp	r3, #2
    3c2a:	d00a      	beq.n	3c42 <usb_d_ep_register_callback+0x5e>
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d000      	beq.n	3c32 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3c30:	e00c      	b.n	3c4c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3c32:	693b      	ldr	r3, [r7, #16]
    3c34:	68fa      	ldr	r2, [r7, #12]
    3c36:	615a      	str	r2, [r3, #20]
		break;
    3c38:	e008      	b.n	3c4c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3c3a:	693b      	ldr	r3, [r7, #16]
    3c3c:	68fa      	ldr	r2, [r7, #12]
    3c3e:	619a      	str	r2, [r3, #24]
		break;
    3c40:	e004      	b.n	3c4c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3c42:	693b      	ldr	r3, [r7, #16]
    3c44:	68fa      	ldr	r2, [r7, #12]
    3c46:	61da      	str	r2, [r3, #28]
		break;
    3c48:	e000      	b.n	3c4c <usb_d_ep_register_callback+0x68>
		return;
    3c4a:	bf00      	nop
	}
}
    3c4c:	3718      	adds	r7, #24
    3c4e:	46bd      	mov	sp, r7
    3c50:	bd80      	pop	{r7, pc}
    3c52:	bf00      	nop
    3c54:	0000330d 	.word	0x0000330d
    3c58:	20000b14 	.word	0x20000b14
    3c5c:	000033e1 	.word	0x000033e1

00003c60 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3c60:	b480      	push	{r7}
    3c62:	b085      	sub	sp, #20
    3c64:	af00      	add	r7, sp, #0
    3c66:	4603      	mov	r3, r0
    3c68:	60b9      	str	r1, [r7, #8]
    3c6a:	607a      	str	r2, [r7, #4]
    3c6c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3c6e:	7bfb      	ldrb	r3, [r7, #15]
    3c70:	f083 0301 	eor.w	r3, r3, #1
    3c74:	b2db      	uxtb	r3, r3
    3c76:	2b00      	cmp	r3, #0
    3c78:	d000      	beq.n	3c7c <assert+0x1c>
		__asm("BKPT #0");
    3c7a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3c7c:	bf00      	nop
    3c7e:	3714      	adds	r7, #20
    3c80:	46bd      	mov	sp, r7
    3c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c86:	4770      	bx	lr

00003c88 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3c88:	b480      	push	{r7}
    3c8a:	b085      	sub	sp, #20
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	6078      	str	r0, [r7, #4]
    3c90:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	681b      	ldr	r3, [r3, #0]
    3c96:	60fb      	str	r3, [r7, #12]
    3c98:	e008      	b.n	3cac <is_list_element+0x24>
		if (it == element) {
    3c9a:	68fa      	ldr	r2, [r7, #12]
    3c9c:	683b      	ldr	r3, [r7, #0]
    3c9e:	429a      	cmp	r2, r3
    3ca0:	d101      	bne.n	3ca6 <is_list_element+0x1e>
			return true;
    3ca2:	2301      	movs	r3, #1
    3ca4:	e006      	b.n	3cb4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3ca6:	68fb      	ldr	r3, [r7, #12]
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	60fb      	str	r3, [r7, #12]
    3cac:	68fb      	ldr	r3, [r7, #12]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d1f3      	bne.n	3c9a <is_list_element+0x12>
		}
	}

	return false;
    3cb2:	2300      	movs	r3, #0
}
    3cb4:	4618      	mov	r0, r3
    3cb6:	3714      	adds	r7, #20
    3cb8:	46bd      	mov	sp, r7
    3cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbe:	4770      	bx	lr

00003cc0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b082      	sub	sp, #8
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
    3cc8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3cca:	6839      	ldr	r1, [r7, #0]
    3ccc:	6878      	ldr	r0, [r7, #4]
    3cce:	4b0f      	ldr	r3, [pc, #60]	; (3d0c <list_insert_as_head+0x4c>)
    3cd0:	4798      	blx	r3
    3cd2:	4603      	mov	r3, r0
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	bf14      	ite	ne
    3cd8:	2301      	movne	r3, #1
    3cda:	2300      	moveq	r3, #0
    3cdc:	b2db      	uxtb	r3, r3
    3cde:	f083 0301 	eor.w	r3, r3, #1
    3ce2:	b2db      	uxtb	r3, r3
    3ce4:	f003 0301 	and.w	r3, r3, #1
    3ce8:	b2db      	uxtb	r3, r3
    3cea:	2239      	movs	r2, #57	; 0x39
    3cec:	4908      	ldr	r1, [pc, #32]	; (3d10 <list_insert_as_head+0x50>)
    3cee:	4618      	mov	r0, r3
    3cf0:	4b08      	ldr	r3, [pc, #32]	; (3d14 <list_insert_as_head+0x54>)
    3cf2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	681a      	ldr	r2, [r3, #0]
    3cf8:	683b      	ldr	r3, [r7, #0]
    3cfa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3cfc:	687b      	ldr	r3, [r7, #4]
    3cfe:	683a      	ldr	r2, [r7, #0]
    3d00:	601a      	str	r2, [r3, #0]
}
    3d02:	bf00      	nop
    3d04:	3708      	adds	r7, #8
    3d06:	46bd      	mov	sp, r7
    3d08:	bd80      	pop	{r7, pc}
    3d0a:	bf00      	nop
    3d0c:	00003c89 	.word	0x00003c89
    3d10:	00010e3c 	.word	0x00010e3c
    3d14:	00003c61 	.word	0x00003c61

00003d18 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3d18:	b480      	push	{r7}
    3d1a:	b083      	sub	sp, #12
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	6078      	str	r0, [r7, #4]
    3d20:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	681a      	ldr	r2, [r3, #0]
    3d26:	683b      	ldr	r3, [r7, #0]
    3d28:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	683a      	ldr	r2, [r7, #0]
    3d2e:	601a      	str	r2, [r3, #0]
}
    3d30:	bf00      	nop
    3d32:	370c      	adds	r7, #12
    3d34:	46bd      	mov	sp, r7
    3d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3a:	4770      	bx	lr

00003d3c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	b084      	sub	sp, #16
    3d40:	af00      	add	r7, sp, #0
    3d42:	6078      	str	r0, [r7, #4]
    3d44:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3d46:	687b      	ldr	r3, [r7, #4]
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3d4c:	6839      	ldr	r1, [r7, #0]
    3d4e:	6878      	ldr	r0, [r7, #4]
    3d50:	4b16      	ldr	r3, [pc, #88]	; (3dac <list_insert_at_end+0x70>)
    3d52:	4798      	blx	r3
    3d54:	4603      	mov	r3, r0
    3d56:	2b00      	cmp	r3, #0
    3d58:	bf14      	ite	ne
    3d5a:	2301      	movne	r3, #1
    3d5c:	2300      	moveq	r3, #0
    3d5e:	b2db      	uxtb	r3, r3
    3d60:	f083 0301 	eor.w	r3, r3, #1
    3d64:	b2db      	uxtb	r3, r3
    3d66:	f003 0301 	and.w	r3, r3, #1
    3d6a:	b2db      	uxtb	r3, r3
    3d6c:	224f      	movs	r2, #79	; 0x4f
    3d6e:	4910      	ldr	r1, [pc, #64]	; (3db0 <list_insert_at_end+0x74>)
    3d70:	4618      	mov	r0, r3
    3d72:	4b10      	ldr	r3, [pc, #64]	; (3db4 <list_insert_at_end+0x78>)
    3d74:	4798      	blx	r3

	if (!list->head) {
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	681b      	ldr	r3, [r3, #0]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d109      	bne.n	3d92 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	683a      	ldr	r2, [r7, #0]
    3d82:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3d84:	683b      	ldr	r3, [r7, #0]
    3d86:	2200      	movs	r2, #0
    3d88:	601a      	str	r2, [r3, #0]
		return;
    3d8a:	e00c      	b.n	3da6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3d8c:	68fb      	ldr	r3, [r7, #12]
    3d8e:	681b      	ldr	r3, [r3, #0]
    3d90:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3d92:	68fb      	ldr	r3, [r7, #12]
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d1f8      	bne.n	3d8c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3d9a:	68fb      	ldr	r3, [r7, #12]
    3d9c:	683a      	ldr	r2, [r7, #0]
    3d9e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3da0:	683b      	ldr	r3, [r7, #0]
    3da2:	2200      	movs	r2, #0
    3da4:	601a      	str	r2, [r3, #0]
}
    3da6:	3710      	adds	r7, #16
    3da8:	46bd      	mov	sp, r7
    3daa:	bd80      	pop	{r7, pc}
    3dac:	00003c89 	.word	0x00003c89
    3db0:	00010e3c 	.word	0x00010e3c
    3db4:	00003c61 	.word	0x00003c61

00003db8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3db8:	b480      	push	{r7}
    3dba:	b085      	sub	sp, #20
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	681b      	ldr	r3, [r3, #0]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d009      	beq.n	3ddc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	681b      	ldr	r3, [r3, #0]
    3dcc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3dce:	687b      	ldr	r3, [r7, #4]
    3dd0:	681b      	ldr	r3, [r3, #0]
    3dd2:	681a      	ldr	r2, [r3, #0]
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	e000      	b.n	3dde <list_remove_head+0x26>
	}

	return NULL;
    3ddc:	2300      	movs	r3, #0
}
    3dde:	4618      	mov	r0, r3
    3de0:	3714      	adds	r7, #20
    3de2:	46bd      	mov	sp, r7
    3de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de8:	4770      	bx	lr

00003dea <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3dea:	b480      	push	{r7}
    3dec:	b085      	sub	sp, #20
    3dee:	af00      	add	r7, sp, #0
    3df0:	6078      	str	r0, [r7, #4]
    3df2:	6039      	str	r1, [r7, #0]
	if (!element) {
    3df4:	683b      	ldr	r3, [r7, #0]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d101      	bne.n	3dfe <list_delete_element+0x14>
		return false;
    3dfa:	2300      	movs	r3, #0
    3dfc:	e024      	b.n	3e48 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3dfe:	687b      	ldr	r3, [r7, #4]
    3e00:	681a      	ldr	r2, [r3, #0]
    3e02:	683b      	ldr	r3, [r7, #0]
    3e04:	429a      	cmp	r2, r3
    3e06:	d106      	bne.n	3e16 <list_delete_element+0x2c>
		list->head = list->head->next;
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	681b      	ldr	r3, [r3, #0]
    3e0c:	681a      	ldr	r2, [r3, #0]
    3e0e:	687b      	ldr	r3, [r7, #4]
    3e10:	601a      	str	r2, [r3, #0]
		return true;
    3e12:	2301      	movs	r3, #1
    3e14:	e018      	b.n	3e48 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3e1c:	e002      	b.n	3e24 <list_delete_element+0x3a>
			it = it->next;
    3e1e:	68fb      	ldr	r3, [r7, #12]
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d004      	beq.n	3e34 <list_delete_element+0x4a>
    3e2a:	68fb      	ldr	r3, [r7, #12]
    3e2c:	681a      	ldr	r2, [r3, #0]
    3e2e:	683b      	ldr	r3, [r7, #0]
    3e30:	429a      	cmp	r2, r3
    3e32:	d1f4      	bne.n	3e1e <list_delete_element+0x34>
		}
		if (it) {
    3e34:	68fb      	ldr	r3, [r7, #12]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d005      	beq.n	3e46 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3e3a:	683b      	ldr	r3, [r7, #0]
    3e3c:	681a      	ldr	r2, [r3, #0]
    3e3e:	68fb      	ldr	r3, [r7, #12]
    3e40:	601a      	str	r2, [r3, #0]
			return true;
    3e42:	2301      	movs	r3, #1
    3e44:	e000      	b.n	3e48 <list_delete_element+0x5e>
		}
	}

	return false;
    3e46:	2300      	movs	r3, #0
}
    3e48:	4618      	mov	r0, r3
    3e4a:	3714      	adds	r7, #20
    3e4c:	46bd      	mov	sp, r7
    3e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e52:	4770      	bx	lr

00003e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3e54:	b480      	push	{r7}
    3e56:	b083      	sub	sp, #12
    3e58:	af00      	add	r7, sp, #0
    3e5a:	4603      	mov	r3, r0
    3e5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e62:	2b00      	cmp	r3, #0
    3e64:	db0b      	blt.n	3e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e66:	4909      	ldr	r1, [pc, #36]	; (3e8c <__NVIC_EnableIRQ+0x38>)
    3e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e6c:	095b      	lsrs	r3, r3, #5
    3e6e:	88fa      	ldrh	r2, [r7, #6]
    3e70:	f002 021f 	and.w	r2, r2, #31
    3e74:	2001      	movs	r0, #1
    3e76:	fa00 f202 	lsl.w	r2, r0, r2
    3e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3e7e:	bf00      	nop
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop
    3e8c:	e000e100 	.word	0xe000e100

00003e90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3e90:	b480      	push	{r7}
    3e92:	b083      	sub	sp, #12
    3e94:	af00      	add	r7, sp, #0
    3e96:	4603      	mov	r3, r0
    3e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	db10      	blt.n	3ec4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ea2:	490b      	ldr	r1, [pc, #44]	; (3ed0 <__NVIC_DisableIRQ+0x40>)
    3ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ea8:	095b      	lsrs	r3, r3, #5
    3eaa:	88fa      	ldrh	r2, [r7, #6]
    3eac:	f002 021f 	and.w	r2, r2, #31
    3eb0:	2001      	movs	r0, #1
    3eb2:	fa00 f202 	lsl.w	r2, r0, r2
    3eb6:	3320      	adds	r3, #32
    3eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ec0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3ec4:	bf00      	nop
    3ec6:	370c      	adds	r7, #12
    3ec8:	46bd      	mov	sp, r7
    3eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ece:	4770      	bx	lr
    3ed0:	e000e100 	.word	0xe000e100

00003ed4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3ed4:	b480      	push	{r7}
    3ed6:	b083      	sub	sp, #12
    3ed8:	af00      	add	r7, sp, #0
    3eda:	4603      	mov	r3, r0
    3edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	db0c      	blt.n	3f00 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ee6:	4909      	ldr	r1, [pc, #36]	; (3f0c <__NVIC_ClearPendingIRQ+0x38>)
    3ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3eec:	095b      	lsrs	r3, r3, #5
    3eee:	88fa      	ldrh	r2, [r7, #6]
    3ef0:	f002 021f 	and.w	r2, r2, #31
    3ef4:	2001      	movs	r0, #1
    3ef6:	fa00 f202 	lsl.w	r2, r0, r2
    3efa:	3360      	adds	r3, #96	; 0x60
    3efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3f00:	bf00      	nop
    3f02:	370c      	adds	r7, #12
    3f04:	46bd      	mov	sp, r7
    3f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f0a:	4770      	bx	lr
    3f0c:	e000e100 	.word	0xe000e100

00003f10 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3f10:	b480      	push	{r7}
    3f12:	b083      	sub	sp, #12
    3f14:	af00      	add	r7, sp, #0
    3f16:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f1c:	095b      	lsrs	r3, r3, #5
    3f1e:	f003 0301 	and.w	r3, r3, #1
    3f22:	2b00      	cmp	r3, #0
    3f24:	bf14      	ite	ne
    3f26:	2301      	movne	r3, #1
    3f28:	2300      	moveq	r3, #0
    3f2a:	b2db      	uxtb	r3, r3
}
    3f2c:	4618      	mov	r0, r3
    3f2e:	370c      	adds	r7, #12
    3f30:	46bd      	mov	sp, r7
    3f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f36:	4770      	bx	lr

00003f38 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3f38:	b480      	push	{r7}
    3f3a:	b083      	sub	sp, #12
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    3f40:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	683a      	ldr	r2, [r7, #0]
    3f46:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f48:	bf00      	nop
    3f4a:	370c      	adds	r7, #12
    3f4c:	46bd      	mov	sp, r7
    3f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f52:	4770      	bx	lr

00003f54 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3f54:	b480      	push	{r7}
    3f56:	b083      	sub	sp, #12
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    3f5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	683a      	ldr	r2, [r7, #0]
    3f62:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f64:	bf00      	nop
    3f66:	370c      	adds	r7, #12
    3f68:	46bd      	mov	sp, r7
    3f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f6e:	4770      	bx	lr

00003f70 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	699b      	ldr	r3, [r3, #24]
    3f7c:	f043 0201 	orr.w	r2, r3, #1
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f84:	bf00      	nop
    3f86:	370c      	adds	r7, #12
    3f88:	46bd      	mov	sp, r7
    3f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f8e:	4770      	bx	lr

00003f90 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3f90:	b480      	push	{r7}
    3f92:	b085      	sub	sp, #20
    3f94:	af00      	add	r7, sp, #0
    3f96:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	699b      	ldr	r3, [r3, #24]
    3f9c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	f003 0301 	and.w	r3, r3, #1
    3fa4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3fa6:	68fb      	ldr	r3, [r7, #12]
    3fa8:	2b00      	cmp	r3, #0
    3faa:	bf14      	ite	ne
    3fac:	2301      	movne	r3, #1
    3fae:	2300      	moveq	r3, #0
    3fb0:	b2db      	uxtb	r3, r3
}
    3fb2:	4618      	mov	r0, r3
    3fb4:	3714      	adds	r7, #20
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr

00003fbe <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3fbe:	b480      	push	{r7}
    3fc0:	b083      	sub	sp, #12
    3fc2:	af00      	add	r7, sp, #0
    3fc4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	699b      	ldr	r3, [r3, #24]
    3fca:	f023 0201 	bic.w	r2, r3, #1
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fd2:	bf00      	nop
    3fd4:	370c      	adds	r7, #12
    3fd6:	46bd      	mov	sp, r7
    3fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fdc:	4770      	bx	lr

00003fde <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3fde:	b480      	push	{r7}
    3fe0:	b083      	sub	sp, #12
    3fe2:	af00      	add	r7, sp, #0
    3fe4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	699b      	ldr	r3, [r3, #24]
    3fea:	f043 0202 	orr.w	r2, r3, #2
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ff2:	bf00      	nop
    3ff4:	370c      	adds	r7, #12
    3ff6:	46bd      	mov	sp, r7
    3ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffc:	4770      	bx	lr

00003ffe <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3ffe:	b480      	push	{r7}
    4000:	b083      	sub	sp, #12
    4002:	af00      	add	r7, sp, #0
    4004:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	699b      	ldr	r3, [r3, #24]
    400a:	f023 0202 	bic.w	r2, r3, #2
    400e:	687b      	ldr	r3, [r7, #4]
    4010:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4012:	bf00      	nop
    4014:	370c      	adds	r7, #12
    4016:	46bd      	mov	sp, r7
    4018:	f85d 7b04 	ldr.w	r7, [sp], #4
    401c:	4770      	bx	lr

0000401e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    401e:	b480      	push	{r7}
    4020:	b083      	sub	sp, #12
    4022:	af00      	add	r7, sp, #0
    4024:	6078      	str	r0, [r7, #4]
    4026:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	699a      	ldr	r2, [r3, #24]
    402c:	683b      	ldr	r3, [r7, #0]
    402e:	431a      	orrs	r2, r3
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4034:	bf00      	nop
    4036:	370c      	adds	r7, #12
    4038:	46bd      	mov	sp, r7
    403a:	f85d 7b04 	ldr.w	r7, [sp], #4
    403e:	4770      	bx	lr

00004040 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    4040:	b480      	push	{r7}
    4042:	b083      	sub	sp, #12
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
    4048:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	683a      	ldr	r2, [r7, #0]
    404e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4050:	bf00      	nop
    4052:	370c      	adds	r7, #12
    4054:	46bd      	mov	sp, r7
    4056:	f85d 7b04 	ldr.w	r7, [sp], #4
    405a:	4770      	bx	lr

0000405c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    405c:	b480      	push	{r7}
    405e:	b083      	sub	sp, #12
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
    4064:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	683a      	ldr	r2, [r7, #0]
    406a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    406c:	bf00      	nop
    406e:	370c      	adds	r7, #12
    4070:	46bd      	mov	sp, r7
    4072:	f85d 7b04 	ldr.w	r7, [sp], #4
    4076:	4770      	bx	lr

00004078 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4084:	4618      	mov	r0, r3
    4086:	370c      	adds	r7, #12
    4088:	46bd      	mov	sp, r7
    408a:	f85d 7b04 	ldr.w	r7, [sp], #4
    408e:	4770      	bx	lr

00004090 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4090:	b480      	push	{r7}
    4092:	b083      	sub	sp, #12
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
    4098:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	683a      	ldr	r2, [r7, #0]
    409e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    40a0:	bf00      	nop
    40a2:	370c      	adds	r7, #12
    40a4:	46bd      	mov	sp, r7
    40a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40aa:	4770      	bx	lr

000040ac <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    40ac:	b480      	push	{r7}
    40ae:	b083      	sub	sp, #12
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
    40b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	683a      	ldr	r2, [r7, #0]
    40ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    40be:	bf00      	nop
    40c0:	370c      	adds	r7, #12
    40c2:	46bd      	mov	sp, r7
    40c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40c8:	4770      	bx	lr

000040ca <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    40ca:	b480      	push	{r7}
    40cc:	b083      	sub	sp, #12
    40ce:	af00      	add	r7, sp, #0
    40d0:	6078      	str	r0, [r7, #4]
    40d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	683a      	ldr	r2, [r7, #0]
    40d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    40dc:	bf00      	nop
    40de:	370c      	adds	r7, #12
    40e0:	46bd      	mov	sp, r7
    40e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e6:	4770      	bx	lr

000040e8 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    40e8:	b480      	push	{r7}
    40ea:	b083      	sub	sp, #12
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
    40f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	683a      	ldr	r2, [r7, #0]
    40f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    40fa:	bf00      	nop
    40fc:	370c      	adds	r7, #12
    40fe:	46bd      	mov	sp, r7
    4100:	f85d 7b04 	ldr.w	r7, [sp], #4
    4104:	4770      	bx	lr

00004106 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4106:	b480      	push	{r7}
    4108:	b083      	sub	sp, #12
    410a:	af00      	add	r7, sp, #0
    410c:	6078      	str	r0, [r7, #4]
    410e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	683a      	ldr	r2, [r7, #0]
    4114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4118:	bf00      	nop
    411a:	370c      	adds	r7, #12
    411c:	46bd      	mov	sp, r7
    411e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4122:	4770      	bx	lr

00004124 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4124:	b480      	push	{r7}
    4126:	b083      	sub	sp, #12
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
    412c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	683a      	ldr	r2, [r7, #0]
    4132:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4136:	bf00      	nop
    4138:	370c      	adds	r7, #12
    413a:	46bd      	mov	sp, r7
    413c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4140:	4770      	bx	lr

00004142 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    4142:	b480      	push	{r7}
    4144:	b083      	sub	sp, #12
    4146:	af00      	add	r7, sp, #0
    4148:	6078      	str	r0, [r7, #4]
    414a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	683a      	ldr	r2, [r7, #0]
    4150:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4154:	bf00      	nop
    4156:	370c      	adds	r7, #12
    4158:	46bd      	mov	sp, r7
    415a:	f85d 7b04 	ldr.w	r7, [sp], #4
    415e:	4770      	bx	lr

00004160 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4160:	b480      	push	{r7}
    4162:	b083      	sub	sp, #12
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
    4168:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    416a:	687b      	ldr	r3, [r7, #4]
    416c:	683a      	ldr	r2, [r7, #0]
    416e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4172:	bf00      	nop
    4174:	370c      	adds	r7, #12
    4176:	46bd      	mov	sp, r7
    4178:	f85d 7b04 	ldr.w	r7, [sp], #4
    417c:	4770      	bx	lr

0000417e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    417e:	b480      	push	{r7}
    4180:	b083      	sub	sp, #12
    4182:	af00      	add	r7, sp, #0
    4184:	6078      	str	r0, [r7, #4]
    4186:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	683a      	ldr	r2, [r7, #0]
    418c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4190:	bf00      	nop
    4192:	370c      	adds	r7, #12
    4194:	46bd      	mov	sp, r7
    4196:	f85d 7b04 	ldr.w	r7, [sp], #4
    419a:	4770      	bx	lr

0000419c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
    41a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	683a      	ldr	r2, [r7, #0]
    41aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    41ae:	bf00      	nop
    41b0:	370c      	adds	r7, #12
    41b2:	46bd      	mov	sp, r7
    41b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    41b8:	4770      	bx	lr
	...

000041bc <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    41bc:	b580      	push	{r7, lr}
    41be:	b082      	sub	sp, #8
    41c0:	af00      	add	r7, sp, #0
    41c2:	6078      	str	r0, [r7, #4]
    41c4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	683a      	ldr	r2, [r7, #0]
    41ca:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	4618      	mov	r0, r3
    41d2:	4b55      	ldr	r3, [pc, #340]	; (4328 <_can_async_init+0x16c>)
    41d4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    41d6:	bf00      	nop
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	681b      	ldr	r3, [r3, #0]
    41dc:	4618      	mov	r0, r3
    41de:	4b53      	ldr	r3, [pc, #332]	; (432c <_can_async_init+0x170>)
    41e0:	4798      	blx	r3
    41e2:	4603      	mov	r3, r0
    41e4:	f083 0301 	eor.w	r3, r3, #1
    41e8:	b2db      	uxtb	r3, r3
    41ea:	2b00      	cmp	r3, #0
    41ec:	d1f4      	bne.n	41d8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	681b      	ldr	r3, [r3, #0]
    41f2:	4618      	mov	r0, r3
    41f4:	4b4e      	ldr	r3, [pc, #312]	; (4330 <_can_async_init+0x174>)
    41f6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    41f8:	683b      	ldr	r3, [r7, #0]
    41fa:	4a4e      	ldr	r2, [pc, #312]	; (4334 <_can_async_init+0x178>)
    41fc:	4293      	cmp	r3, r2
    41fe:	d17a      	bne.n	42f6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    4200:	4a4d      	ldr	r2, [pc, #308]	; (4338 <_can_async_init+0x17c>)
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4206:	687b      	ldr	r3, [r7, #4]
    4208:	4a4c      	ldr	r2, [pc, #304]	; (433c <_can_async_init+0x180>)
    420a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	f44f 7140 	mov.w	r1, #768	; 0x300
    4214:	4618      	mov	r0, r3
    4216:	4b4a      	ldr	r3, [pc, #296]	; (4340 <_can_async_init+0x184>)
    4218:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	681b      	ldr	r3, [r3, #0]
    421e:	2102      	movs	r1, #2
    4220:	4618      	mov	r0, r3
    4222:	4b48      	ldr	r3, [pc, #288]	; (4344 <_can_async_init+0x188>)
    4224:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	4947      	ldr	r1, [pc, #284]	; (4348 <_can_async_init+0x18c>)
    422c:	4618      	mov	r0, r3
    422e:	4b47      	ldr	r3, [pc, #284]	; (434c <_can_async_init+0x190>)
    4230:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	4946      	ldr	r1, [pc, #280]	; (4350 <_can_async_init+0x194>)
    4238:	4618      	mov	r0, r3
    423a:	4b46      	ldr	r3, [pc, #280]	; (4354 <_can_async_init+0x198>)
    423c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	681a      	ldr	r2, [r3, #0]
    4242:	4b45      	ldr	r3, [pc, #276]	; (4358 <_can_async_init+0x19c>)
    4244:	b29b      	uxth	r3, r3
    4246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    424a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    424e:	4619      	mov	r1, r3
    4250:	4610      	mov	r0, r2
    4252:	4b42      	ldr	r3, [pc, #264]	; (435c <_can_async_init+0x1a0>)
    4254:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	681b      	ldr	r3, [r3, #0]
    425a:	2107      	movs	r1, #7
    425c:	4618      	mov	r0, r3
    425e:	4b40      	ldr	r3, [pc, #256]	; (4360 <_can_async_init+0x1a4>)
    4260:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	2107      	movs	r1, #7
    4268:	4618      	mov	r0, r3
    426a:	4b3e      	ldr	r3, [pc, #248]	; (4364 <_can_async_init+0x1a8>)
    426c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	681a      	ldr	r2, [r3, #0]
    4272:	4b3d      	ldr	r3, [pc, #244]	; (4368 <_can_async_init+0x1ac>)
    4274:	b29b      	uxth	r3, r3
    4276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    427a:	4619      	mov	r1, r3
    427c:	4610      	mov	r0, r2
    427e:	4b3b      	ldr	r3, [pc, #236]	; (436c <_can_async_init+0x1b0>)
    4280:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	681a      	ldr	r2, [r3, #0]
    4286:	4b3a      	ldr	r3, [pc, #232]	; (4370 <_can_async_init+0x1b4>)
    4288:	b29b      	uxth	r3, r3
    428a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    428e:	4619      	mov	r1, r3
    4290:	4610      	mov	r0, r2
    4292:	4b38      	ldr	r3, [pc, #224]	; (4374 <_can_async_init+0x1b8>)
    4294:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	681b      	ldr	r3, [r3, #0]
    429a:	2108      	movs	r1, #8
    429c:	4618      	mov	r0, r3
    429e:	4b36      	ldr	r3, [pc, #216]	; (4378 <_can_async_init+0x1bc>)
    42a0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	681a      	ldr	r2, [r3, #0]
    42a6:	4b35      	ldr	r3, [pc, #212]	; (437c <_can_async_init+0x1c0>)
    42a8:	b29b      	uxth	r3, r3
    42aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    42ae:	4619      	mov	r1, r3
    42b0:	4610      	mov	r0, r2
    42b2:	4b33      	ldr	r3, [pc, #204]	; (4380 <_can_async_init+0x1c4>)
    42b4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	681a      	ldr	r2, [r3, #0]
    42ba:	4b32      	ldr	r3, [pc, #200]	; (4384 <_can_async_init+0x1c8>)
    42bc:	b29b      	uxth	r3, r3
    42be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    42c2:	4619      	mov	r1, r3
    42c4:	4610      	mov	r0, r2
    42c6:	4b30      	ldr	r3, [pc, #192]	; (4388 <_can_async_init+0x1cc>)
    42c8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	681b      	ldr	r3, [r3, #0]
    42ce:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    42d2:	4618      	mov	r0, r3
    42d4:	4b2d      	ldr	r3, [pc, #180]	; (438c <_can_async_init+0x1d0>)
    42d6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    42d8:	204f      	movs	r0, #79	; 0x4f
    42da:	4b2d      	ldr	r3, [pc, #180]	; (4390 <_can_async_init+0x1d4>)
    42dc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    42de:	204f      	movs	r0, #79	; 0x4f
    42e0:	4b2c      	ldr	r3, [pc, #176]	; (4394 <_can_async_init+0x1d8>)
    42e2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    42e4:	204f      	movs	r0, #79	; 0x4f
    42e6:	4b2c      	ldr	r3, [pc, #176]	; (4398 <_can_async_init+0x1dc>)
    42e8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	2101      	movs	r1, #1
    42f0:	4618      	mov	r0, r3
    42f2:	4b2a      	ldr	r3, [pc, #168]	; (439c <_can_async_init+0x1e0>)
    42f4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	4618      	mov	r0, r3
    42fc:	4b28      	ldr	r3, [pc, #160]	; (43a0 <_can_async_init+0x1e4>)
    42fe:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	681b      	ldr	r3, [r3, #0]
    4304:	4618      	mov	r0, r3
    4306:	4b27      	ldr	r3, [pc, #156]	; (43a4 <_can_async_init+0x1e8>)
    4308:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    430a:	bf00      	nop
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	4618      	mov	r0, r3
    4312:	4b06      	ldr	r3, [pc, #24]	; (432c <_can_async_init+0x170>)
    4314:	4798      	blx	r3
    4316:	4603      	mov	r3, r0
    4318:	2b00      	cmp	r3, #0
    431a:	d1f7      	bne.n	430c <_can_async_init+0x150>
	};

	return ERR_NONE;
    431c:	2300      	movs	r3, #0
}
    431e:	4618      	mov	r0, r3
    4320:	3708      	adds	r7, #8
    4322:	46bd      	mov	sp, r7
    4324:	bd80      	pop	{r7, pc}
    4326:	bf00      	nop
    4328:	00003f71 	.word	0x00003f71
    432c:	00003f91 	.word	0x00003f91
    4330:	00003fdf 	.word	0x00003fdf
    4334:	42000400 	.word	0x42000400
    4338:	20000c34 	.word	0x20000c34
    433c:	20000008 	.word	0x20000008
    4340:	0000401f 	.word	0x0000401f
    4344:	00003f39 	.word	0x00003f39
    4348:	00010c01 	.word	0x00010c01
    434c:	00004041 	.word	0x00004041
    4350:	00010c10 	.word	0x00010c10
    4354:	00003f55 	.word	0x00003f55
    4358:	20001618 	.word	0x20001618
    435c:	00004125 	.word	0x00004125
    4360:	00004143 	.word	0x00004143
    4364:	0000417f 	.word	0x0000417f
    4368:	200015d0 	.word	0x200015d0
    436c:	00004161 	.word	0x00004161
    4370:	20000b94 	.word	0x20000b94
    4374:	0000419d 	.word	0x0000419d
    4378:	000040ad 	.word	0x000040ad
    437c:	20000ba4 	.word	0x20000ba4
    4380:	000040cb 	.word	0x000040cb
    4384:	20000c24 	.word	0x20000c24
    4388:	000040e9 	.word	0x000040e9
    438c:	00004107 	.word	0x00004107
    4390:	00003e91 	.word	0x00003e91
    4394:	00003ed5 	.word	0x00003ed5
    4398:	00003e55 	.word	0x00003e55
    439c:	00004091 	.word	0x00004091
    43a0:	00003fff 	.word	0x00003fff
    43a4:	00003fbf 	.word	0x00003fbf

000043a8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    43a8:	b590      	push	{r4, r7, lr}
    43aa:	b083      	sub	sp, #12
    43ac:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    43ae:	4b2c      	ldr	r3, [pc, #176]	; (4460 <CAN1_Handler+0xb8>)
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	681b      	ldr	r3, [r3, #0]
    43b8:	4618      	mov	r0, r3
    43ba:	4b2a      	ldr	r3, [pc, #168]	; (4464 <CAN1_Handler+0xbc>)
    43bc:	4798      	blx	r3
    43be:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    43c0:	683b      	ldr	r3, [r7, #0]
    43c2:	f003 0301 	and.w	r3, r3, #1
    43c6:	2b00      	cmp	r3, #0
    43c8:	d003      	beq.n	43d2 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	689b      	ldr	r3, [r3, #8]
    43ce:	6878      	ldr	r0, [r7, #4]
    43d0:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    43d2:	683b      	ldr	r3, [r7, #0]
    43d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    43d8:	2b00      	cmp	r3, #0
    43da:	d003      	beq.n	43e4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	685b      	ldr	r3, [r3, #4]
    43e0:	6878      	ldr	r0, [r7, #4]
    43e2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    43e4:	683b      	ldr	r3, [r7, #0]
    43e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    43ea:	2b00      	cmp	r3, #0
    43ec:	d004      	beq.n	43f8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	68db      	ldr	r3, [r3, #12]
    43f2:	2103      	movs	r1, #3
    43f4:	6878      	ldr	r0, [r7, #4]
    43f6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    43f8:	683b      	ldr	r3, [r7, #0]
    43fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    43fe:	2b00      	cmp	r3, #0
    4400:	d004      	beq.n	440c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	68db      	ldr	r3, [r3, #12]
    4406:	2100      	movs	r1, #0
    4408:	6878      	ldr	r0, [r7, #4]
    440a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    440c:	683b      	ldr	r3, [r7, #0]
    440e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4412:	2b00      	cmp	r3, #0
    4414:	d00f      	beq.n	4436 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	68dc      	ldr	r4, [r3, #12]
    441a:	687b      	ldr	r3, [r7, #4]
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	4618      	mov	r0, r3
    4420:	4b11      	ldr	r3, [pc, #68]	; (4468 <CAN1_Handler+0xc0>)
    4422:	4798      	blx	r3
    4424:	4603      	mov	r3, r0
    4426:	2b00      	cmp	r3, #0
    4428:	d001      	beq.n	442e <CAN1_Handler+0x86>
    442a:	2302      	movs	r3, #2
    442c:	e000      	b.n	4430 <CAN1_Handler+0x88>
    442e:	2301      	movs	r3, #1
    4430:	4619      	mov	r1, r3
    4432:	6878      	ldr	r0, [r7, #4]
    4434:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	f003 0308 	and.w	r3, r3, #8
    443c:	2b00      	cmp	r3, #0
    443e:	d004      	beq.n	444a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	68db      	ldr	r3, [r3, #12]
    4444:	2104      	movs	r1, #4
    4446:	6878      	ldr	r0, [r7, #4]
    4448:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	6839      	ldr	r1, [r7, #0]
    4450:	4618      	mov	r0, r3
    4452:	4b06      	ldr	r3, [pc, #24]	; (446c <CAN1_Handler+0xc4>)
    4454:	4798      	blx	r3
}
    4456:	bf00      	nop
    4458:	370c      	adds	r7, #12
    445a:	46bd      	mov	sp, r7
    445c:	bd90      	pop	{r4, r7, pc}
    445e:	bf00      	nop
    4460:	20000c34 	.word	0x20000c34
    4464:	00004079 	.word	0x00004079
    4468:	00003f11 	.word	0x00003f11
    446c:	0000405d 	.word	0x0000405d

00004470 <__NVIC_SetPendingIRQ>:
{
    4470:	b480      	push	{r7}
    4472:	b083      	sub	sp, #12
    4474:	af00      	add	r7, sp, #0
    4476:	4603      	mov	r3, r0
    4478:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    447a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    447e:	2b00      	cmp	r3, #0
    4480:	db0c      	blt.n	449c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4482:	4909      	ldr	r1, [pc, #36]	; (44a8 <__NVIC_SetPendingIRQ+0x38>)
    4484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4488:	095b      	lsrs	r3, r3, #5
    448a:	88fa      	ldrh	r2, [r7, #6]
    448c:	f002 021f 	and.w	r2, r2, #31
    4490:	2001      	movs	r0, #1
    4492:	fa00 f202 	lsl.w	r2, r0, r2
    4496:	3340      	adds	r3, #64	; 0x40
    4498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    449c:	bf00      	nop
    449e:	370c      	adds	r7, #12
    44a0:	46bd      	mov	sp, r7
    44a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a6:	4770      	bx	lr
    44a8:	e000e100 	.word	0xe000e100

000044ac <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b082      	sub	sp, #8
    44b0:	af00      	add	r7, sp, #0
    44b2:	4603      	mov	r3, r0
    44b4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    44b6:	79fb      	ldrb	r3, [r7, #7]
    44b8:	b21b      	sxth	r3, r3
    44ba:	4618      	mov	r0, r3
    44bc:	4b02      	ldr	r3, [pc, #8]	; (44c8 <_irq_set+0x1c>)
    44be:	4798      	blx	r3
}
    44c0:	bf00      	nop
    44c2:	3708      	adds	r7, #8
    44c4:	46bd      	mov	sp, r7
    44c6:	bd80      	pop	{r7, pc}
    44c8:	00004471 	.word	0x00004471

000044cc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    44cc:	b480      	push	{r7}
    44ce:	b083      	sub	sp, #12
    44d0:	af00      	add	r7, sp, #0
    44d2:	4603      	mov	r3, r0
    44d4:	6039      	str	r1, [r7, #0]
    44d6:	80fb      	strh	r3, [r7, #6]
    44d8:	4613      	mov	r3, r2
    44da:	717b      	strb	r3, [r7, #5]
	switch (power) {
    44dc:	797b      	ldrb	r3, [r7, #5]
    44de:	3b04      	subs	r3, #4
    44e0:	2b05      	cmp	r3, #5
    44e2:	d86b      	bhi.n	45bc <_get_cycles_for_us_internal+0xf0>
    44e4:	a201      	add	r2, pc, #4	; (adr r2, 44ec <_get_cycles_for_us_internal+0x20>)
    44e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    44ea:	bf00      	nop
    44ec:	0000459b 	.word	0x0000459b
    44f0:	0000457b 	.word	0x0000457b
    44f4:	0000455d 	.word	0x0000455d
    44f8:	0000453f 	.word	0x0000453f
    44fc:	00004521 	.word	0x00004521
    4500:	00004505 	.word	0x00004505
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4504:	88fb      	ldrh	r3, [r7, #6]
    4506:	683a      	ldr	r2, [r7, #0]
    4508:	4935      	ldr	r1, [pc, #212]	; (45e0 <_get_cycles_for_us_internal+0x114>)
    450a:	fba1 1202 	umull	r1, r2, r1, r2
    450e:	0c92      	lsrs	r2, r2, #18
    4510:	fb02 f303 	mul.w	r3, r2, r3
    4514:	3302      	adds	r3, #2
    4516:	4a33      	ldr	r2, [pc, #204]	; (45e4 <_get_cycles_for_us_internal+0x118>)
    4518:	fba2 2303 	umull	r2, r3, r2, r3
    451c:	085b      	lsrs	r3, r3, #1
    451e:	e059      	b.n	45d4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4520:	88fb      	ldrh	r3, [r7, #6]
    4522:	683a      	ldr	r2, [r7, #0]
    4524:	0952      	lsrs	r2, r2, #5
    4526:	4930      	ldr	r1, [pc, #192]	; (45e8 <_get_cycles_for_us_internal+0x11c>)
    4528:	fba1 1202 	umull	r1, r2, r1, r2
    452c:	09d2      	lsrs	r2, r2, #7
    452e:	fb02 f303 	mul.w	r3, r2, r3
    4532:	331d      	adds	r3, #29
    4534:	4a2d      	ldr	r2, [pc, #180]	; (45ec <_get_cycles_for_us_internal+0x120>)
    4536:	fba2 2303 	umull	r2, r3, r2, r3
    453a:	091b      	lsrs	r3, r3, #4
    453c:	e04a      	b.n	45d4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    453e:	88fb      	ldrh	r3, [r7, #6]
    4540:	683a      	ldr	r2, [r7, #0]
    4542:	492b      	ldr	r1, [pc, #172]	; (45f0 <_get_cycles_for_us_internal+0x124>)
    4544:	fba1 1202 	umull	r1, r2, r1, r2
    4548:	0b52      	lsrs	r2, r2, #13
    454a:	fb02 f303 	mul.w	r3, r2, r3
    454e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4552:	4a28      	ldr	r2, [pc, #160]	; (45f4 <_get_cycles_for_us_internal+0x128>)
    4554:	fba2 2303 	umull	r2, r3, r2, r3
    4558:	095b      	lsrs	r3, r3, #5
    455a:	e03b      	b.n	45d4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    455c:	88fb      	ldrh	r3, [r7, #6]
    455e:	683a      	ldr	r2, [r7, #0]
    4560:	4925      	ldr	r1, [pc, #148]	; (45f8 <_get_cycles_for_us_internal+0x12c>)
    4562:	fba1 1202 	umull	r1, r2, r1, r2
    4566:	0992      	lsrs	r2, r2, #6
    4568:	fb02 f303 	mul.w	r3, r2, r3
    456c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4570:	4a22      	ldr	r2, [pc, #136]	; (45fc <_get_cycles_for_us_internal+0x130>)
    4572:	fba2 2303 	umull	r2, r3, r2, r3
    4576:	099b      	lsrs	r3, r3, #6
    4578:	e02c      	b.n	45d4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    457a:	88fb      	ldrh	r3, [r7, #6]
    457c:	683a      	ldr	r2, [r7, #0]
    457e:	4920      	ldr	r1, [pc, #128]	; (4600 <_get_cycles_for_us_internal+0x134>)
    4580:	fba1 1202 	umull	r1, r2, r1, r2
    4584:	0952      	lsrs	r2, r2, #5
    4586:	fb02 f303 	mul.w	r3, r2, r3
    458a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    458e:	332f      	adds	r3, #47	; 0x2f
    4590:	4a1c      	ldr	r2, [pc, #112]	; (4604 <_get_cycles_for_us_internal+0x138>)
    4592:	fba2 2303 	umull	r2, r3, r2, r3
    4596:	0b5b      	lsrs	r3, r3, #13
    4598:	e01c      	b.n	45d4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    459a:	88fb      	ldrh	r3, [r7, #6]
    459c:	683a      	ldr	r2, [r7, #0]
    459e:	491a      	ldr	r1, [pc, #104]	; (4608 <_get_cycles_for_us_internal+0x13c>)
    45a0:	fba1 1202 	umull	r1, r2, r1, r2
    45a4:	08d2      	lsrs	r2, r2, #3
    45a6:	fb02 f303 	mul.w	r3, r2, r3
    45aa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    45ae:	f203 33df 	addw	r3, r3, #991	; 0x3df
    45b2:	4a16      	ldr	r2, [pc, #88]	; (460c <_get_cycles_for_us_internal+0x140>)
    45b4:	fba2 2303 	umull	r2, r3, r2, r3
    45b8:	0c5b      	lsrs	r3, r3, #17
    45ba:	e00b      	b.n	45d4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    45bc:	88fb      	ldrh	r3, [r7, #6]
    45be:	683a      	ldr	r2, [r7, #0]
    45c0:	fb02 f303 	mul.w	r3, r2, r3
    45c4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    45c8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    45cc:	4a10      	ldr	r2, [pc, #64]	; (4610 <_get_cycles_for_us_internal+0x144>)
    45ce:	fba2 2303 	umull	r2, r3, r2, r3
    45d2:	0c9b      	lsrs	r3, r3, #18
	}
}
    45d4:	4618      	mov	r0, r3
    45d6:	370c      	adds	r7, #12
    45d8:	46bd      	mov	sp, r7
    45da:	f85d 7b04 	ldr.w	r7, [sp], #4
    45de:	4770      	bx	lr
    45e0:	431bde83 	.word	0x431bde83
    45e4:	aaaaaaab 	.word	0xaaaaaaab
    45e8:	0a7c5ac5 	.word	0x0a7c5ac5
    45ec:	88888889 	.word	0x88888889
    45f0:	d1b71759 	.word	0xd1b71759
    45f4:	1b4e81b5 	.word	0x1b4e81b5
    45f8:	10624dd3 	.word	0x10624dd3
    45fc:	057619f1 	.word	0x057619f1
    4600:	51eb851f 	.word	0x51eb851f
    4604:	45e7b273 	.word	0x45e7b273
    4608:	cccccccd 	.word	0xcccccccd
    460c:	6fd91d85 	.word	0x6fd91d85
    4610:	165e9f81 	.word	0x165e9f81

00004614 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
    461a:	4603      	mov	r3, r0
    461c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    461e:	88fb      	ldrh	r3, [r7, #6]
    4620:	2209      	movs	r2, #9
    4622:	4904      	ldr	r1, [pc, #16]	; (4634 <_get_cycles_for_us+0x20>)
    4624:	4618      	mov	r0, r3
    4626:	4b04      	ldr	r3, [pc, #16]	; (4638 <_get_cycles_for_us+0x24>)
    4628:	4798      	blx	r3
    462a:	4603      	mov	r3, r0
}
    462c:	4618      	mov	r0, r3
    462e:	3708      	adds	r7, #8
    4630:	46bd      	mov	sp, r7
    4632:	bd80      	pop	{r7, pc}
    4634:	07270e00 	.word	0x07270e00
    4638:	000044cd 	.word	0x000044cd

0000463c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    463c:	b480      	push	{r7}
    463e:	b083      	sub	sp, #12
    4640:	af00      	add	r7, sp, #0
    4642:	4603      	mov	r3, r0
    4644:	6039      	str	r1, [r7, #0]
    4646:	80fb      	strh	r3, [r7, #6]
    4648:	4613      	mov	r3, r2
    464a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    464c:	797b      	ldrb	r3, [r7, #5]
    464e:	3b04      	subs	r3, #4
    4650:	2b05      	cmp	r3, #5
    4652:	d870      	bhi.n	4736 <_get_cycles_for_ms_internal+0xfa>
    4654:	a201      	add	r2, pc, #4	; (adr r2, 465c <_get_cycles_for_ms_internal+0x20>)
    4656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    465a:	bf00      	nop
    465c:	00004719 	.word	0x00004719
    4660:	000046fd 	.word	0x000046fd
    4664:	000046e1 	.word	0x000046e1
    4668:	000046bd 	.word	0x000046bd
    466c:	00004699 	.word	0x00004699
    4670:	00004675 	.word	0x00004675
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4674:	88fb      	ldrh	r3, [r7, #6]
    4676:	683a      	ldr	r2, [r7, #0]
    4678:	4937      	ldr	r1, [pc, #220]	; (4758 <_get_cycles_for_ms_internal+0x11c>)
    467a:	fba1 1202 	umull	r1, r2, r1, r2
    467e:	0c92      	lsrs	r2, r2, #18
    4680:	fb02 f303 	mul.w	r3, r2, r3
    4684:	3302      	adds	r3, #2
    4686:	4a35      	ldr	r2, [pc, #212]	; (475c <_get_cycles_for_ms_internal+0x120>)
    4688:	fba2 2303 	umull	r2, r3, r2, r3
    468c:	085b      	lsrs	r3, r3, #1
    468e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4692:	fb02 f303 	mul.w	r3, r2, r3
    4696:	e058      	b.n	474a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4698:	88fb      	ldrh	r3, [r7, #6]
    469a:	683a      	ldr	r2, [r7, #0]
    469c:	0952      	lsrs	r2, r2, #5
    469e:	4930      	ldr	r1, [pc, #192]	; (4760 <_get_cycles_for_ms_internal+0x124>)
    46a0:	fba1 1202 	umull	r1, r2, r1, r2
    46a4:	09d2      	lsrs	r2, r2, #7
    46a6:	fb02 f303 	mul.w	r3, r2, r3
    46aa:	3302      	adds	r3, #2
    46ac:	4a2b      	ldr	r2, [pc, #172]	; (475c <_get_cycles_for_ms_internal+0x120>)
    46ae:	fba2 2303 	umull	r2, r3, r2, r3
    46b2:	085b      	lsrs	r3, r3, #1
    46b4:	2264      	movs	r2, #100	; 0x64
    46b6:	fb02 f303 	mul.w	r3, r2, r3
    46ba:	e046      	b.n	474a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    46bc:	88fb      	ldrh	r3, [r7, #6]
    46be:	683a      	ldr	r2, [r7, #0]
    46c0:	4928      	ldr	r1, [pc, #160]	; (4764 <_get_cycles_for_ms_internal+0x128>)
    46c2:	fba1 1202 	umull	r1, r2, r1, r2
    46c6:	0b52      	lsrs	r2, r2, #13
    46c8:	fb02 f303 	mul.w	r3, r2, r3
    46cc:	3302      	adds	r3, #2
    46ce:	4a23      	ldr	r2, [pc, #140]	; (475c <_get_cycles_for_ms_internal+0x120>)
    46d0:	fba2 2303 	umull	r2, r3, r2, r3
    46d4:	085a      	lsrs	r2, r3, #1
    46d6:	4613      	mov	r3, r2
    46d8:	009b      	lsls	r3, r3, #2
    46da:	4413      	add	r3, r2
    46dc:	005b      	lsls	r3, r3, #1
    46de:	e034      	b.n	474a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    46e0:	88fb      	ldrh	r3, [r7, #6]
    46e2:	683a      	ldr	r2, [r7, #0]
    46e4:	4920      	ldr	r1, [pc, #128]	; (4768 <_get_cycles_for_ms_internal+0x12c>)
    46e6:	fba1 1202 	umull	r1, r2, r1, r2
    46ea:	0992      	lsrs	r2, r2, #6
    46ec:	fb02 f303 	mul.w	r3, r2, r3
    46f0:	3302      	adds	r3, #2
    46f2:	4a1a      	ldr	r2, [pc, #104]	; (475c <_get_cycles_for_ms_internal+0x120>)
    46f4:	fba2 2303 	umull	r2, r3, r2, r3
    46f8:	085b      	lsrs	r3, r3, #1
    46fa:	e026      	b.n	474a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    46fc:	88fb      	ldrh	r3, [r7, #6]
    46fe:	683a      	ldr	r2, [r7, #0]
    4700:	491a      	ldr	r1, [pc, #104]	; (476c <_get_cycles_for_ms_internal+0x130>)
    4702:	fba1 1202 	umull	r1, r2, r1, r2
    4706:	0952      	lsrs	r2, r2, #5
    4708:	fb02 f303 	mul.w	r3, r2, r3
    470c:	331d      	adds	r3, #29
    470e:	4a18      	ldr	r2, [pc, #96]	; (4770 <_get_cycles_for_ms_internal+0x134>)
    4710:	fba2 2303 	umull	r2, r3, r2, r3
    4714:	091b      	lsrs	r3, r3, #4
    4716:	e018      	b.n	474a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4718:	88fb      	ldrh	r3, [r7, #6]
    471a:	683a      	ldr	r2, [r7, #0]
    471c:	4915      	ldr	r1, [pc, #84]	; (4774 <_get_cycles_for_ms_internal+0x138>)
    471e:	fba1 1202 	umull	r1, r2, r1, r2
    4722:	08d2      	lsrs	r2, r2, #3
    4724:	fb02 f303 	mul.w	r3, r2, r3
    4728:	f203 132b 	addw	r3, r3, #299	; 0x12b
    472c:	4a12      	ldr	r2, [pc, #72]	; (4778 <_get_cycles_for_ms_internal+0x13c>)
    472e:	fba2 2303 	umull	r2, r3, r2, r3
    4732:	095b      	lsrs	r3, r3, #5
    4734:	e009      	b.n	474a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4736:	88fb      	ldrh	r3, [r7, #6]
    4738:	683a      	ldr	r2, [r7, #0]
    473a:	fb02 f303 	mul.w	r3, r2, r3
    473e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4742:	4a0e      	ldr	r2, [pc, #56]	; (477c <_get_cycles_for_ms_internal+0x140>)
    4744:	fba2 2303 	umull	r2, r3, r2, r3
    4748:	099b      	lsrs	r3, r3, #6
	}
}
    474a:	4618      	mov	r0, r3
    474c:	370c      	adds	r7, #12
    474e:	46bd      	mov	sp, r7
    4750:	f85d 7b04 	ldr.w	r7, [sp], #4
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	431bde83 	.word	0x431bde83
    475c:	aaaaaaab 	.word	0xaaaaaaab
    4760:	0a7c5ac5 	.word	0x0a7c5ac5
    4764:	d1b71759 	.word	0xd1b71759
    4768:	10624dd3 	.word	0x10624dd3
    476c:	51eb851f 	.word	0x51eb851f
    4770:	88888889 	.word	0x88888889
    4774:	cccccccd 	.word	0xcccccccd
    4778:	1b4e81b5 	.word	0x1b4e81b5
    477c:	057619f1 	.word	0x057619f1

00004780 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4780:	b580      	push	{r7, lr}
    4782:	b082      	sub	sp, #8
    4784:	af00      	add	r7, sp, #0
    4786:	4603      	mov	r3, r0
    4788:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    478a:	88fb      	ldrh	r3, [r7, #6]
    478c:	2209      	movs	r2, #9
    478e:	4904      	ldr	r1, [pc, #16]	; (47a0 <_get_cycles_for_ms+0x20>)
    4790:	4618      	mov	r0, r3
    4792:	4b04      	ldr	r3, [pc, #16]	; (47a4 <_get_cycles_for_ms+0x24>)
    4794:	4798      	blx	r3
    4796:	4603      	mov	r3, r0
}
    4798:	4618      	mov	r0, r3
    479a:	3708      	adds	r7, #8
    479c:	46bd      	mov	sp, r7
    479e:	bd80      	pop	{r7, pc}
    47a0:	07270e00 	.word	0x07270e00
    47a4:	0000463d 	.word	0x0000463d

000047a8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    47a8:	b480      	push	{r7}
    47aa:	b083      	sub	sp, #12
    47ac:	af00      	add	r7, sp, #0
    47ae:	6078      	str	r0, [r7, #4]
    47b0:	6039      	str	r1, [r7, #0]
    47b2:	bf00      	nop
    47b4:	f3af 8000 	nop.w

000047b8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    47b8:	3901      	subs	r1, #1
    47ba:	d8fd      	bhi.n	47b8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    47bc:	bf00      	nop
    47be:	370c      	adds	r7, #12
    47c0:	46bd      	mov	sp, r7
    47c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c6:	4770      	bx	lr

000047c8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    47c8:	b480      	push	{r7}
    47ca:	b083      	sub	sp, #12
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	460b      	mov	r3, r1
    47d2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	881b      	ldrh	r3, [r3, #0]
    47d8:	b29a      	uxth	r2, r3
    47da:	887b      	ldrh	r3, [r7, #2]
    47dc:	021b      	lsls	r3, r3, #8
    47de:	b29b      	uxth	r3, r3
    47e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    47e4:	b29b      	uxth	r3, r3
    47e6:	4313      	orrs	r3, r2
    47e8:	b29a      	uxth	r2, r3
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    47ee:	bf00      	nop
    47f0:	370c      	adds	r7, #12
    47f2:	46bd      	mov	sp, r7
    47f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f8:	4770      	bx	lr

000047fa <hri_port_set_EVCTRL_reg>:
{
    47fa:	b480      	push	{r7}
    47fc:	b085      	sub	sp, #20
    47fe:	af00      	add	r7, sp, #0
    4800:	60f8      	str	r0, [r7, #12]
    4802:	460b      	mov	r3, r1
    4804:	607a      	str	r2, [r7, #4]
    4806:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4808:	7afb      	ldrb	r3, [r7, #11]
    480a:	7afa      	ldrb	r2, [r7, #11]
    480c:	68f9      	ldr	r1, [r7, #12]
    480e:	01d2      	lsls	r2, r2, #7
    4810:	440a      	add	r2, r1
    4812:	322c      	adds	r2, #44	; 0x2c
    4814:	6811      	ldr	r1, [r2, #0]
    4816:	687a      	ldr	r2, [r7, #4]
    4818:	430a      	orrs	r2, r1
    481a:	68f9      	ldr	r1, [r7, #12]
    481c:	01db      	lsls	r3, r3, #7
    481e:	440b      	add	r3, r1
    4820:	332c      	adds	r3, #44	; 0x2c
    4822:	601a      	str	r2, [r3, #0]
}
    4824:	bf00      	nop
    4826:	3714      	adds	r7, #20
    4828:	46bd      	mov	sp, r7
    482a:	f85d 7b04 	ldr.w	r7, [sp], #4
    482e:	4770      	bx	lr

00004830 <_port_event_init>:

static inline void _port_event_init()
{
    4830:	b580      	push	{r7, lr}
    4832:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4834:	2200      	movs	r2, #0
    4836:	2100      	movs	r1, #0
    4838:	480a      	ldr	r0, [pc, #40]	; (4864 <_port_event_init+0x34>)
    483a:	4b0b      	ldr	r3, [pc, #44]	; (4868 <_port_event_init+0x38>)
    483c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    483e:	2200      	movs	r2, #0
    4840:	2101      	movs	r1, #1
    4842:	4808      	ldr	r0, [pc, #32]	; (4864 <_port_event_init+0x34>)
    4844:	4b08      	ldr	r3, [pc, #32]	; (4868 <_port_event_init+0x38>)
    4846:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4848:	f64e 72ef 	movw	r2, #61423	; 0xefef
    484c:	2102      	movs	r1, #2
    484e:	4805      	ldr	r0, [pc, #20]	; (4864 <_port_event_init+0x34>)
    4850:	4b05      	ldr	r3, [pc, #20]	; (4868 <_port_event_init+0x38>)
    4852:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4854:	2200      	movs	r2, #0
    4856:	2103      	movs	r1, #3
    4858:	4802      	ldr	r0, [pc, #8]	; (4864 <_port_event_init+0x34>)
    485a:	4b03      	ldr	r3, [pc, #12]	; (4868 <_port_event_init+0x38>)
    485c:	4798      	blx	r3
}
    485e:	bf00      	nop
    4860:	bd80      	pop	{r7, pc}
    4862:	bf00      	nop
    4864:	41008000 	.word	0x41008000
    4868:	000047fb 	.word	0x000047fb

0000486c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    486c:	b580      	push	{r7, lr}
    486e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4870:	2104      	movs	r1, #4
    4872:	480b      	ldr	r0, [pc, #44]	; (48a0 <_init_chip+0x34>)
    4874:	4b0b      	ldr	r3, [pc, #44]	; (48a4 <_init_chip+0x38>)
    4876:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4878:	4b0b      	ldr	r3, [pc, #44]	; (48a8 <_init_chip+0x3c>)
    487a:	4798      	blx	r3
	_oscctrl_init_sources();
    487c:	4b0b      	ldr	r3, [pc, #44]	; (48ac <_init_chip+0x40>)
    487e:	4798      	blx	r3
	_mclk_init();
    4880:	4b0b      	ldr	r3, [pc, #44]	; (48b0 <_init_chip+0x44>)
    4882:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4884:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4888:	4b0a      	ldr	r3, [pc, #40]	; (48b4 <_init_chip+0x48>)
    488a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    488c:	4b0a      	ldr	r3, [pc, #40]	; (48b8 <_init_chip+0x4c>)
    488e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4890:	f640 30df 	movw	r0, #3039	; 0xbdf
    4894:	4b07      	ldr	r3, [pc, #28]	; (48b4 <_init_chip+0x48>)
    4896:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4898:	4b08      	ldr	r3, [pc, #32]	; (48bc <_init_chip+0x50>)
    489a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    489c:	bf00      	nop
    489e:	bd80      	pop	{r7, pc}
    48a0:	41004000 	.word	0x41004000
    48a4:	000047c9 	.word	0x000047c9
    48a8:	0000537d 	.word	0x0000537d
    48ac:	00005845 	.word	0x00005845
    48b0:	0000529d 	.word	0x0000529d
    48b4:	0000515d 	.word	0x0000515d
    48b8:	00005885 	.word	0x00005885
    48bc:	00004831 	.word	0x00004831

000048c0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    48c0:	b480      	push	{r7}
    48c2:	b083      	sub	sp, #12
    48c4:	af00      	add	r7, sp, #0
    48c6:	6078      	str	r0, [r7, #4]
    48c8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	683a      	ldr	r2, [r7, #0]
    48ce:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    48d0:	2300      	movs	r3, #0
}
    48d2:	4618      	mov	r0, r3
    48d4:	370c      	adds	r7, #12
    48d6:	46bd      	mov	sp, r7
    48d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48dc:	4770      	bx	lr
	...

000048e0 <__NVIC_EnableIRQ>:
{
    48e0:	b480      	push	{r7}
    48e2:	b083      	sub	sp, #12
    48e4:	af00      	add	r7, sp, #0
    48e6:	4603      	mov	r3, r0
    48e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    48ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    48ee:	2b00      	cmp	r3, #0
    48f0:	db0b      	blt.n	490a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48f2:	4909      	ldr	r1, [pc, #36]	; (4918 <__NVIC_EnableIRQ+0x38>)
    48f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    48f8:	095b      	lsrs	r3, r3, #5
    48fa:	88fa      	ldrh	r2, [r7, #6]
    48fc:	f002 021f 	and.w	r2, r2, #31
    4900:	2001      	movs	r0, #1
    4902:	fa00 f202 	lsl.w	r2, r0, r2
    4906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    490a:	bf00      	nop
    490c:	370c      	adds	r7, #12
    490e:	46bd      	mov	sp, r7
    4910:	f85d 7b04 	ldr.w	r7, [sp], #4
    4914:	4770      	bx	lr
    4916:	bf00      	nop
    4918:	e000e100 	.word	0xe000e100

0000491c <__NVIC_DisableIRQ>:
{
    491c:	b480      	push	{r7}
    491e:	b083      	sub	sp, #12
    4920:	af00      	add	r7, sp, #0
    4922:	4603      	mov	r3, r0
    4924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    492a:	2b00      	cmp	r3, #0
    492c:	db10      	blt.n	4950 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    492e:	490b      	ldr	r1, [pc, #44]	; (495c <__NVIC_DisableIRQ+0x40>)
    4930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4934:	095b      	lsrs	r3, r3, #5
    4936:	88fa      	ldrh	r2, [r7, #6]
    4938:	f002 021f 	and.w	r2, r2, #31
    493c:	2001      	movs	r0, #1
    493e:	fa00 f202 	lsl.w	r2, r0, r2
    4942:	3320      	adds	r3, #32
    4944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    494c:	f3bf 8f6f 	isb	sy
}
    4950:	bf00      	nop
    4952:	370c      	adds	r7, #12
    4954:	46bd      	mov	sp, r7
    4956:	f85d 7b04 	ldr.w	r7, [sp], #4
    495a:	4770      	bx	lr
    495c:	e000e100 	.word	0xe000e100

00004960 <__NVIC_ClearPendingIRQ>:
{
    4960:	b480      	push	{r7}
    4962:	b083      	sub	sp, #12
    4964:	af00      	add	r7, sp, #0
    4966:	4603      	mov	r3, r0
    4968:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    496a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    496e:	2b00      	cmp	r3, #0
    4970:	db0c      	blt.n	498c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4972:	4909      	ldr	r1, [pc, #36]	; (4998 <__NVIC_ClearPendingIRQ+0x38>)
    4974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4978:	095b      	lsrs	r3, r3, #5
    497a:	88fa      	ldrh	r2, [r7, #6]
    497c:	f002 021f 	and.w	r2, r2, #31
    4980:	2001      	movs	r0, #1
    4982:	fa00 f202 	lsl.w	r2, r0, r2
    4986:	3360      	adds	r3, #96	; 0x60
    4988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    498c:	bf00      	nop
    498e:	370c      	adds	r7, #12
    4990:	46bd      	mov	sp, r7
    4992:	f85d 7b04 	ldr.w	r7, [sp], #4
    4996:	4770      	bx	lr
    4998:	e000e100 	.word	0xe000e100

0000499c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    499c:	b480      	push	{r7}
    499e:	b083      	sub	sp, #12
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
    49a4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    49a6:	bf00      	nop
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	685a      	ldr	r2, [r3, #4]
    49ac:	683b      	ldr	r3, [r7, #0]
    49ae:	4013      	ands	r3, r2
    49b0:	2b00      	cmp	r3, #0
    49b2:	d1f9      	bne.n	49a8 <hri_eic_wait_for_sync+0xc>
	};
}
    49b4:	bf00      	nop
    49b6:	370c      	adds	r7, #12
    49b8:	46bd      	mov	sp, r7
    49ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    49be:	4770      	bx	lr

000049c0 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    49c0:	b480      	push	{r7}
    49c2:	b083      	sub	sp, #12
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
    49c8:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    49ca:	687b      	ldr	r3, [r7, #4]
    49cc:	685a      	ldr	r2, [r3, #4]
    49ce:	683b      	ldr	r3, [r7, #0]
    49d0:	4013      	ands	r3, r2
    49d2:	2b00      	cmp	r3, #0
    49d4:	bf14      	ite	ne
    49d6:	2301      	movne	r3, #1
    49d8:	2300      	moveq	r3, #0
    49da:	b2db      	uxtb	r3, r3
}
    49dc:	4618      	mov	r0, r3
    49de:	370c      	adds	r7, #12
    49e0:	46bd      	mov	sp, r7
    49e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e6:	4770      	bx	lr

000049e8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    49e8:	b480      	push	{r7}
    49ea:	b083      	sub	sp, #12
    49ec:	af00      	add	r7, sp, #0
    49ee:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	695b      	ldr	r3, [r3, #20]
}
    49f4:	4618      	mov	r0, r3
    49f6:	370c      	adds	r7, #12
    49f8:	46bd      	mov	sp, r7
    49fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    49fe:	4770      	bx	lr

00004a00 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4a00:	b480      	push	{r7}
    4a02:	b083      	sub	sp, #12
    4a04:	af00      	add	r7, sp, #0
    4a06:	6078      	str	r0, [r7, #4]
    4a08:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	683a      	ldr	r2, [r7, #0]
    4a0e:	615a      	str	r2, [r3, #20]
}
    4a10:	bf00      	nop
    4a12:	370c      	adds	r7, #12
    4a14:	46bd      	mov	sp, r7
    4a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a1a:	4770      	bx	lr

00004a1c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4a1c:	b480      	push	{r7}
    4a1e:	b083      	sub	sp, #12
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
    4a24:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4a26:	687b      	ldr	r3, [r7, #4]
    4a28:	683a      	ldr	r2, [r7, #0]
    4a2a:	611a      	str	r2, [r3, #16]
}
    4a2c:	bf00      	nop
    4a2e:	370c      	adds	r7, #12
    4a30:	46bd      	mov	sp, r7
    4a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a36:	4770      	bx	lr

00004a38 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4a38:	b480      	push	{r7}
    4a3a:	b083      	sub	sp, #12
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
    4a40:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	683a      	ldr	r2, [r7, #0]
    4a46:	60da      	str	r2, [r3, #12]
}
    4a48:	bf00      	nop
    4a4a:	370c      	adds	r7, #12
    4a4c:	46bd      	mov	sp, r7
    4a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a52:	4770      	bx	lr

00004a54 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4a54:	b580      	push	{r7, lr}
    4a56:	b082      	sub	sp, #8
    4a58:	af00      	add	r7, sp, #0
    4a5a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	781b      	ldrb	r3, [r3, #0]
    4a60:	b2db      	uxtb	r3, r3
    4a62:	f043 0302 	orr.w	r3, r3, #2
    4a66:	b2da      	uxtb	r2, r3
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4a6c:	2103      	movs	r1, #3
    4a6e:	6878      	ldr	r0, [r7, #4]
    4a70:	4b02      	ldr	r3, [pc, #8]	; (4a7c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4a72:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a74:	bf00      	nop
    4a76:	3708      	adds	r7, #8
    4a78:	46bd      	mov	sp, r7
    4a7a:	bd80      	pop	{r7, pc}
    4a7c:	0000499d 	.word	0x0000499d

00004a80 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4a80:	b580      	push	{r7, lr}
    4a82:	b082      	sub	sp, #8
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	781b      	ldrb	r3, [r3, #0]
    4a8c:	b2db      	uxtb	r3, r3
    4a8e:	f023 0302 	bic.w	r3, r3, #2
    4a92:	b2da      	uxtb	r2, r3
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4a98:	2103      	movs	r1, #3
    4a9a:	6878      	ldr	r0, [r7, #4]
    4a9c:	4b02      	ldr	r3, [pc, #8]	; (4aa8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4a9e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4aa0:	bf00      	nop
    4aa2:	3708      	adds	r7, #8
    4aa4:	46bd      	mov	sp, r7
    4aa6:	bd80      	pop	{r7, pc}
    4aa8:	0000499d 	.word	0x0000499d

00004aac <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
    4ab4:	460b      	mov	r3, r1
    4ab6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	781b      	ldrb	r3, [r3, #0]
    4abc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4abe:	7bfb      	ldrb	r3, [r7, #15]
    4ac0:	f023 0310 	bic.w	r3, r3, #16
    4ac4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4ac6:	78fb      	ldrb	r3, [r7, #3]
    4ac8:	011b      	lsls	r3, r3, #4
    4aca:	b25a      	sxtb	r2, r3
    4acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ad0:	4313      	orrs	r3, r2
    4ad2:	b25b      	sxtb	r3, r3
    4ad4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	7bfa      	ldrb	r2, [r7, #15]
    4ada:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4adc:	2103      	movs	r1, #3
    4ade:	6878      	ldr	r0, [r7, #4]
    4ae0:	4b02      	ldr	r3, [pc, #8]	; (4aec <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4ae2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ae4:	bf00      	nop
    4ae6:	3710      	adds	r7, #16
    4ae8:	46bd      	mov	sp, r7
    4aea:	bd80      	pop	{r7, pc}
    4aec:	0000499d 	.word	0x0000499d

00004af0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4af0:	b580      	push	{r7, lr}
    4af2:	b084      	sub	sp, #16
    4af4:	af00      	add	r7, sp, #0
    4af6:	6078      	str	r0, [r7, #4]
    4af8:	460b      	mov	r3, r1
    4afa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4afc:	2103      	movs	r1, #3
    4afe:	6878      	ldr	r0, [r7, #4]
    4b00:	4b06      	ldr	r3, [pc, #24]	; (4b1c <hri_eic_get_CTRLA_reg+0x2c>)
    4b02:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4b04:	687b      	ldr	r3, [r7, #4]
    4b06:	781b      	ldrb	r3, [r3, #0]
    4b08:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4b0a:	7bfa      	ldrb	r2, [r7, #15]
    4b0c:	78fb      	ldrb	r3, [r7, #3]
    4b0e:	4013      	ands	r3, r2
    4b10:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4b12:	7bfb      	ldrb	r3, [r7, #15]
}
    4b14:	4618      	mov	r0, r3
    4b16:	3710      	adds	r7, #16
    4b18:	46bd      	mov	sp, r7
    4b1a:	bd80      	pop	{r7, pc}
    4b1c:	0000499d 	.word	0x0000499d

00004b20 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4b20:	b580      	push	{r7, lr}
    4b22:	b082      	sub	sp, #8
    4b24:	af00      	add	r7, sp, #0
    4b26:	6078      	str	r0, [r7, #4]
    4b28:	460b      	mov	r3, r1
    4b2a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	78fa      	ldrb	r2, [r7, #3]
    4b30:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4b32:	2103      	movs	r1, #3
    4b34:	6878      	ldr	r0, [r7, #4]
    4b36:	4b03      	ldr	r3, [pc, #12]	; (4b44 <hri_eic_write_CTRLA_reg+0x24>)
    4b38:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b3a:	bf00      	nop
    4b3c:	3708      	adds	r7, #8
    4b3e:	46bd      	mov	sp, r7
    4b40:	bd80      	pop	{r7, pc}
    4b42:	bf00      	nop
    4b44:	0000499d 	.word	0x0000499d

00004b48 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4b48:	b480      	push	{r7}
    4b4a:	b083      	sub	sp, #12
    4b4c:	af00      	add	r7, sp, #0
    4b4e:	6078      	str	r0, [r7, #4]
    4b50:	460b      	mov	r3, r1
    4b52:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	78fa      	ldrb	r2, [r7, #3]
    4b58:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b5a:	bf00      	nop
    4b5c:	370c      	adds	r7, #12
    4b5e:	46bd      	mov	sp, r7
    4b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b64:	4770      	bx	lr

00004b66 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4b66:	b480      	push	{r7}
    4b68:	b083      	sub	sp, #12
    4b6a:	af00      	add	r7, sp, #0
    4b6c:	6078      	str	r0, [r7, #4]
    4b6e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	683a      	ldr	r2, [r7, #0]
    4b74:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b76:	bf00      	nop
    4b78:	370c      	adds	r7, #12
    4b7a:	46bd      	mov	sp, r7
    4b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b80:	4770      	bx	lr

00004b82 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4b82:	b480      	push	{r7}
    4b84:	b083      	sub	sp, #12
    4b86:	af00      	add	r7, sp, #0
    4b88:	6078      	str	r0, [r7, #4]
    4b8a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	683a      	ldr	r2, [r7, #0]
    4b90:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b92:	bf00      	nop
    4b94:	370c      	adds	r7, #12
    4b96:	46bd      	mov	sp, r7
    4b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b9c:	4770      	bx	lr

00004b9e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4b9e:	b480      	push	{r7}
    4ba0:	b085      	sub	sp, #20
    4ba2:	af00      	add	r7, sp, #0
    4ba4:	60f8      	str	r0, [r7, #12]
    4ba6:	460b      	mov	r3, r1
    4ba8:	607a      	str	r2, [r7, #4]
    4baa:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4bac:	7afb      	ldrb	r3, [r7, #11]
    4bae:	68fa      	ldr	r2, [r7, #12]
    4bb0:	3306      	adds	r3, #6
    4bb2:	009b      	lsls	r3, r3, #2
    4bb4:	4413      	add	r3, r2
    4bb6:	687a      	ldr	r2, [r7, #4]
    4bb8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bba:	bf00      	nop
    4bbc:	3714      	adds	r7, #20
    4bbe:	46bd      	mov	sp, r7
    4bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc4:	4770      	bx	lr

00004bc6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4bc6:	b480      	push	{r7}
    4bc8:	b083      	sub	sp, #12
    4bca:	af00      	add	r7, sp, #0
    4bcc:	6078      	str	r0, [r7, #4]
    4bce:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	683a      	ldr	r2, [r7, #0]
    4bd4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bd6:	bf00      	nop
    4bd8:	370c      	adds	r7, #12
    4bda:	46bd      	mov	sp, r7
    4bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be0:	4770      	bx	lr

00004be2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4be2:	b480      	push	{r7}
    4be4:	b083      	sub	sp, #12
    4be6:	af00      	add	r7, sp, #0
    4be8:	6078      	str	r0, [r7, #4]
    4bea:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	683a      	ldr	r2, [r7, #0]
    4bf0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bf2:	bf00      	nop
    4bf4:	370c      	adds	r7, #12
    4bf6:	46bd      	mov	sp, r7
    4bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bfc:	4770      	bx	lr
	...

00004c00 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4c00:	b580      	push	{r7, lr}
    4c02:	b082      	sub	sp, #8
    4c04:	af00      	add	r7, sp, #0
    4c06:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4c08:	2101      	movs	r1, #1
    4c0a:	484f      	ldr	r0, [pc, #316]	; (4d48 <_ext_irq_init+0x148>)
    4c0c:	4b4f      	ldr	r3, [pc, #316]	; (4d4c <_ext_irq_init+0x14c>)
    4c0e:	4798      	blx	r3
    4c10:	4603      	mov	r3, r0
    4c12:	f083 0301 	eor.w	r3, r3, #1
    4c16:	b2db      	uxtb	r3, r3
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d011      	beq.n	4c40 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4c1c:	2102      	movs	r1, #2
    4c1e:	484a      	ldr	r0, [pc, #296]	; (4d48 <_ext_irq_init+0x148>)
    4c20:	4b4b      	ldr	r3, [pc, #300]	; (4d50 <_ext_irq_init+0x150>)
    4c22:	4798      	blx	r3
    4c24:	4603      	mov	r3, r0
    4c26:	2b00      	cmp	r3, #0
    4c28:	d006      	beq.n	4c38 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4c2a:	4847      	ldr	r0, [pc, #284]	; (4d48 <_ext_irq_init+0x148>)
    4c2c:	4b49      	ldr	r3, [pc, #292]	; (4d54 <_ext_irq_init+0x154>)
    4c2e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4c30:	2102      	movs	r1, #2
    4c32:	4845      	ldr	r0, [pc, #276]	; (4d48 <_ext_irq_init+0x148>)
    4c34:	4b48      	ldr	r3, [pc, #288]	; (4d58 <_ext_irq_init+0x158>)
    4c36:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4c38:	2101      	movs	r1, #1
    4c3a:	4843      	ldr	r0, [pc, #268]	; (4d48 <_ext_irq_init+0x148>)
    4c3c:	4b47      	ldr	r3, [pc, #284]	; (4d5c <_ext_irq_init+0x15c>)
    4c3e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4c40:	2101      	movs	r1, #1
    4c42:	4841      	ldr	r0, [pc, #260]	; (4d48 <_ext_irq_init+0x148>)
    4c44:	4b44      	ldr	r3, [pc, #272]	; (4d58 <_ext_irq_init+0x158>)
    4c46:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4c48:	2100      	movs	r1, #0
    4c4a:	483f      	ldr	r0, [pc, #252]	; (4d48 <_ext_irq_init+0x148>)
    4c4c:	4b44      	ldr	r3, [pc, #272]	; (4d60 <_ext_irq_init+0x160>)
    4c4e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4c50:	2100      	movs	r1, #0
    4c52:	483d      	ldr	r0, [pc, #244]	; (4d48 <_ext_irq_init+0x148>)
    4c54:	4b43      	ldr	r3, [pc, #268]	; (4d64 <_ext_irq_init+0x164>)
    4c56:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4c58:	2100      	movs	r1, #0
    4c5a:	483b      	ldr	r0, [pc, #236]	; (4d48 <_ext_irq_init+0x148>)
    4c5c:	4b42      	ldr	r3, [pc, #264]	; (4d68 <_ext_irq_init+0x168>)
    4c5e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4c60:	f240 31bb 	movw	r1, #955	; 0x3bb
    4c64:	4838      	ldr	r0, [pc, #224]	; (4d48 <_ext_irq_init+0x148>)
    4c66:	4b41      	ldr	r3, [pc, #260]	; (4d6c <_ext_irq_init+0x16c>)
    4c68:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4c6a:	f240 313b 	movw	r1, #827	; 0x33b
    4c6e:	4836      	ldr	r0, [pc, #216]	; (4d48 <_ext_irq_init+0x148>)
    4c70:	4b3f      	ldr	r3, [pc, #252]	; (4d70 <_ext_irq_init+0x170>)
    4c72:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4c74:	2100      	movs	r1, #0
    4c76:	4834      	ldr	r0, [pc, #208]	; (4d48 <_ext_irq_init+0x148>)
    4c78:	4b3e      	ldr	r3, [pc, #248]	; (4d74 <_ext_irq_init+0x174>)
    4c7a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4c7c:	4a3e      	ldr	r2, [pc, #248]	; (4d78 <_ext_irq_init+0x178>)
    4c7e:	2100      	movs	r1, #0
    4c80:	4831      	ldr	r0, [pc, #196]	; (4d48 <_ext_irq_init+0x148>)
    4c82:	4b3e      	ldr	r3, [pc, #248]	; (4d7c <_ext_irq_init+0x17c>)
    4c84:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4c86:	2211      	movs	r2, #17
    4c88:	2101      	movs	r1, #1
    4c8a:	482f      	ldr	r0, [pc, #188]	; (4d48 <_ext_irq_init+0x148>)
    4c8c:	4b3b      	ldr	r3, [pc, #236]	; (4d7c <_ext_irq_init+0x17c>)
    4c8e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4c90:	482d      	ldr	r0, [pc, #180]	; (4d48 <_ext_irq_init+0x148>)
    4c92:	4b3b      	ldr	r3, [pc, #236]	; (4d80 <_ext_irq_init+0x180>)
    4c94:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4c96:	200c      	movs	r0, #12
    4c98:	4b3a      	ldr	r3, [pc, #232]	; (4d84 <_ext_irq_init+0x184>)
    4c9a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4c9c:	200c      	movs	r0, #12
    4c9e:	4b3a      	ldr	r3, [pc, #232]	; (4d88 <_ext_irq_init+0x188>)
    4ca0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4ca2:	200c      	movs	r0, #12
    4ca4:	4b39      	ldr	r3, [pc, #228]	; (4d8c <_ext_irq_init+0x18c>)
    4ca6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4ca8:	200d      	movs	r0, #13
    4caa:	4b36      	ldr	r3, [pc, #216]	; (4d84 <_ext_irq_init+0x184>)
    4cac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4cae:	200d      	movs	r0, #13
    4cb0:	4b35      	ldr	r3, [pc, #212]	; (4d88 <_ext_irq_init+0x188>)
    4cb2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4cb4:	200d      	movs	r0, #13
    4cb6:	4b35      	ldr	r3, [pc, #212]	; (4d8c <_ext_irq_init+0x18c>)
    4cb8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4cba:	200f      	movs	r0, #15
    4cbc:	4b31      	ldr	r3, [pc, #196]	; (4d84 <_ext_irq_init+0x184>)
    4cbe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4cc0:	200f      	movs	r0, #15
    4cc2:	4b31      	ldr	r3, [pc, #196]	; (4d88 <_ext_irq_init+0x188>)
    4cc4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4cc6:	200f      	movs	r0, #15
    4cc8:	4b30      	ldr	r3, [pc, #192]	; (4d8c <_ext_irq_init+0x18c>)
    4cca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4ccc:	2010      	movs	r0, #16
    4cce:	4b2d      	ldr	r3, [pc, #180]	; (4d84 <_ext_irq_init+0x184>)
    4cd0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4cd2:	2010      	movs	r0, #16
    4cd4:	4b2c      	ldr	r3, [pc, #176]	; (4d88 <_ext_irq_init+0x188>)
    4cd6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4cd8:	2010      	movs	r0, #16
    4cda:	4b2c      	ldr	r3, [pc, #176]	; (4d8c <_ext_irq_init+0x18c>)
    4cdc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4cde:	2011      	movs	r0, #17
    4ce0:	4b28      	ldr	r3, [pc, #160]	; (4d84 <_ext_irq_init+0x184>)
    4ce2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4ce4:	2011      	movs	r0, #17
    4ce6:	4b28      	ldr	r3, [pc, #160]	; (4d88 <_ext_irq_init+0x188>)
    4ce8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4cea:	2011      	movs	r0, #17
    4cec:	4b27      	ldr	r3, [pc, #156]	; (4d8c <_ext_irq_init+0x18c>)
    4cee:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4cf0:	2012      	movs	r0, #18
    4cf2:	4b24      	ldr	r3, [pc, #144]	; (4d84 <_ext_irq_init+0x184>)
    4cf4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4cf6:	2012      	movs	r0, #18
    4cf8:	4b23      	ldr	r3, [pc, #140]	; (4d88 <_ext_irq_init+0x188>)
    4cfa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4cfc:	2012      	movs	r0, #18
    4cfe:	4b23      	ldr	r3, [pc, #140]	; (4d8c <_ext_irq_init+0x18c>)
    4d00:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4d02:	2013      	movs	r0, #19
    4d04:	4b1f      	ldr	r3, [pc, #124]	; (4d84 <_ext_irq_init+0x184>)
    4d06:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4d08:	2013      	movs	r0, #19
    4d0a:	4b1f      	ldr	r3, [pc, #124]	; (4d88 <_ext_irq_init+0x188>)
    4d0c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4d0e:	2013      	movs	r0, #19
    4d10:	4b1e      	ldr	r3, [pc, #120]	; (4d8c <_ext_irq_init+0x18c>)
    4d12:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4d14:	2014      	movs	r0, #20
    4d16:	4b1b      	ldr	r3, [pc, #108]	; (4d84 <_ext_irq_init+0x184>)
    4d18:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4d1a:	2014      	movs	r0, #20
    4d1c:	4b1a      	ldr	r3, [pc, #104]	; (4d88 <_ext_irq_init+0x188>)
    4d1e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4d20:	2014      	movs	r0, #20
    4d22:	4b1a      	ldr	r3, [pc, #104]	; (4d8c <_ext_irq_init+0x18c>)
    4d24:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4d26:	2015      	movs	r0, #21
    4d28:	4b16      	ldr	r3, [pc, #88]	; (4d84 <_ext_irq_init+0x184>)
    4d2a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4d2c:	2015      	movs	r0, #21
    4d2e:	4b16      	ldr	r3, [pc, #88]	; (4d88 <_ext_irq_init+0x188>)
    4d30:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4d32:	2015      	movs	r0, #21
    4d34:	4b15      	ldr	r3, [pc, #84]	; (4d8c <_ext_irq_init+0x18c>)
    4d36:	4798      	blx	r3

	callback = cb;
    4d38:	4a15      	ldr	r2, [pc, #84]	; (4d90 <_ext_irq_init+0x190>)
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4d3e:	2300      	movs	r3, #0
}
    4d40:	4618      	mov	r0, r3
    4d42:	3708      	adds	r7, #8
    4d44:	46bd      	mov	sp, r7
    4d46:	bd80      	pop	{r7, pc}
    4d48:	40002800 	.word	0x40002800
    4d4c:	000049c1 	.word	0x000049c1
    4d50:	00004af1 	.word	0x00004af1
    4d54:	00004a81 	.word	0x00004a81
    4d58:	0000499d 	.word	0x0000499d
    4d5c:	00004b21 	.word	0x00004b21
    4d60:	00004aad 	.word	0x00004aad
    4d64:	00004b49 	.word	0x00004b49
    4d68:	00004b67 	.word	0x00004b67
    4d6c:	00004b83 	.word	0x00004b83
    4d70:	00004bc7 	.word	0x00004bc7
    4d74:	00004be3 	.word	0x00004be3
    4d78:	90999013 	.word	0x90999013
    4d7c:	00004b9f 	.word	0x00004b9f
    4d80:	00004a55 	.word	0x00004a55
    4d84:	0000491d 	.word	0x0000491d
    4d88:	00004961 	.word	0x00004961
    4d8c:	000048e1 	.word	0x000048e1
    4d90:	20000c38 	.word	0x20000c38

00004d94 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4d94:	b580      	push	{r7, lr}
    4d96:	b084      	sub	sp, #16
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	460b      	mov	r3, r1
    4d9e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4da0:	23ff      	movs	r3, #255	; 0xff
    4da2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4da4:	2300      	movs	r3, #0
    4da6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4da8:	e010      	b.n	4dcc <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4daa:	7bbb      	ldrb	r3, [r7, #14]
    4dac:	4a1c      	ldr	r2, [pc, #112]	; (4e20 <_ext_irq_enable+0x8c>)
    4dae:	00db      	lsls	r3, r3, #3
    4db0:	4413      	add	r3, r2
    4db2:	685a      	ldr	r2, [r3, #4]
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	429a      	cmp	r2, r3
    4db8:	d105      	bne.n	4dc6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4dba:	7bbb      	ldrb	r3, [r7, #14]
    4dbc:	4a18      	ldr	r2, [pc, #96]	; (4e20 <_ext_irq_enable+0x8c>)
    4dbe:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4dc2:	73fb      	strb	r3, [r7, #15]
			break;
    4dc4:	e005      	b.n	4dd2 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4dc6:	7bbb      	ldrb	r3, [r7, #14]
    4dc8:	3301      	adds	r3, #1
    4dca:	73bb      	strb	r3, [r7, #14]
    4dcc:	7bbb      	ldrb	r3, [r7, #14]
    4dce:	2b08      	cmp	r3, #8
    4dd0:	d9eb      	bls.n	4daa <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4dd2:	7bfb      	ldrb	r3, [r7, #15]
    4dd4:	2bff      	cmp	r3, #255	; 0xff
    4dd6:	d102      	bne.n	4dde <_ext_irq_enable+0x4a>
		return -1;
    4dd8:	f04f 33ff 	mov.w	r3, #4294967295
    4ddc:	e01c      	b.n	4e18 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4dde:	78fb      	ldrb	r3, [r7, #3]
    4de0:	2b00      	cmp	r3, #0
    4de2:	d008      	beq.n	4df6 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4de4:	7bfb      	ldrb	r3, [r7, #15]
    4de6:	2201      	movs	r2, #1
    4de8:	fa02 f303 	lsl.w	r3, r2, r3
    4dec:	4619      	mov	r1, r3
    4dee:	480d      	ldr	r0, [pc, #52]	; (4e24 <_ext_irq_enable+0x90>)
    4df0:	4b0d      	ldr	r3, [pc, #52]	; (4e28 <_ext_irq_enable+0x94>)
    4df2:	4798      	blx	r3
    4df4:	e00f      	b.n	4e16 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4df6:	7bfb      	ldrb	r3, [r7, #15]
    4df8:	2201      	movs	r2, #1
    4dfa:	fa02 f303 	lsl.w	r3, r2, r3
    4dfe:	4619      	mov	r1, r3
    4e00:	4808      	ldr	r0, [pc, #32]	; (4e24 <_ext_irq_enable+0x90>)
    4e02:	4b0a      	ldr	r3, [pc, #40]	; (4e2c <_ext_irq_enable+0x98>)
    4e04:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4e06:	7bfb      	ldrb	r3, [r7, #15]
    4e08:	2201      	movs	r2, #1
    4e0a:	fa02 f303 	lsl.w	r3, r2, r3
    4e0e:	4619      	mov	r1, r3
    4e10:	4804      	ldr	r0, [pc, #16]	; (4e24 <_ext_irq_enable+0x90>)
    4e12:	4b07      	ldr	r3, [pc, #28]	; (4e30 <_ext_irq_enable+0x9c>)
    4e14:	4798      	blx	r3
	}

	return ERR_NONE;
    4e16:	2300      	movs	r3, #0
}
    4e18:	4618      	mov	r0, r3
    4e1a:	3710      	adds	r7, #16
    4e1c:	46bd      	mov	sp, r7
    4e1e:	bd80      	pop	{r7, pc}
    4e20:	00010e5c 	.word	0x00010e5c
    4e24:	40002800 	.word	0x40002800
    4e28:	00004a1d 	.word	0x00004a1d
    4e2c:	00004a39 	.word	0x00004a39
    4e30:	00004a01 	.word	0x00004a01

00004e34 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4e34:	b580      	push	{r7, lr}
    4e36:	b084      	sub	sp, #16
    4e38:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4e3a:	4841      	ldr	r0, [pc, #260]	; (4f40 <_ext_irq_handler+0x10c>)
    4e3c:	4b41      	ldr	r3, [pc, #260]	; (4f44 <_ext_irq_handler+0x110>)
    4e3e:	4798      	blx	r3
    4e40:	4603      	mov	r3, r0
    4e42:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4e44:	f04f 33ff 	mov.w	r3, #4294967295
    4e48:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4e4a:	683b      	ldr	r3, [r7, #0]
    4e4c:	4619      	mov	r1, r3
    4e4e:	483c      	ldr	r0, [pc, #240]	; (4f40 <_ext_irq_handler+0x10c>)
    4e50:	4b3d      	ldr	r3, [pc, #244]	; (4f48 <_ext_irq_handler+0x114>)
    4e52:	4798      	blx	r3

	ASSERT(callback);
    4e54:	4b3d      	ldr	r3, [pc, #244]	; (4f4c <_ext_irq_handler+0x118>)
    4e56:	681b      	ldr	r3, [r3, #0]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	bf14      	ite	ne
    4e5c:	2301      	movne	r3, #1
    4e5e:	2300      	moveq	r3, #0
    4e60:	b2db      	uxtb	r3, r3
    4e62:	f44f 7284 	mov.w	r2, #264	; 0x108
    4e66:	493a      	ldr	r1, [pc, #232]	; (4f50 <_ext_irq_handler+0x11c>)
    4e68:	4618      	mov	r0, r3
    4e6a:	4b3a      	ldr	r3, [pc, #232]	; (4f54 <_ext_irq_handler+0x120>)
    4e6c:	4798      	blx	r3

	while (flags) {
    4e6e:	e060      	b.n	4f32 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4e70:	683b      	ldr	r3, [r7, #0]
    4e72:	4618      	mov	r0, r3
    4e74:	4b38      	ldr	r3, [pc, #224]	; (4f58 <_ext_irq_handler+0x124>)
    4e76:	4798      	blx	r3
    4e78:	4603      	mov	r3, r0
    4e7a:	b2db      	uxtb	r3, r3
    4e7c:	3b01      	subs	r3, #1
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4e82:	e047      	b.n	4f14 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4e84:	2300      	movs	r3, #0
    4e86:	71fb      	strb	r3, [r7, #7]
    4e88:	2309      	movs	r3, #9
    4e8a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4e8c:	e024      	b.n	4ed8 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4e8e:	79ba      	ldrb	r2, [r7, #6]
    4e90:	79fb      	ldrb	r3, [r7, #7]
    4e92:	4413      	add	r3, r2
    4e94:	105b      	asrs	r3, r3, #1
    4e96:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4e98:	797b      	ldrb	r3, [r7, #5]
    4e9a:	4a30      	ldr	r2, [pc, #192]	; (4f5c <_ext_irq_handler+0x128>)
    4e9c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ea0:	461a      	mov	r2, r3
    4ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ea6:	429a      	cmp	r2, r3
    4ea8:	d106      	bne.n	4eb8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4eaa:	797b      	ldrb	r3, [r7, #5]
    4eac:	4a2b      	ldr	r2, [pc, #172]	; (4f5c <_ext_irq_handler+0x128>)
    4eae:	00db      	lsls	r3, r3, #3
    4eb0:	4413      	add	r3, r2
    4eb2:	685b      	ldr	r3, [r3, #4]
    4eb4:	60bb      	str	r3, [r7, #8]
					break;
    4eb6:	e013      	b.n	4ee0 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4eb8:	797b      	ldrb	r3, [r7, #5]
    4eba:	4a28      	ldr	r2, [pc, #160]	; (4f5c <_ext_irq_handler+0x128>)
    4ebc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ec0:	461a      	mov	r2, r3
    4ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ec6:	429a      	cmp	r2, r3
    4ec8:	da03      	bge.n	4ed2 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4eca:	797b      	ldrb	r3, [r7, #5]
    4ecc:	3301      	adds	r3, #1
    4ece:	71fb      	strb	r3, [r7, #7]
    4ed0:	e002      	b.n	4ed8 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4ed2:	797b      	ldrb	r3, [r7, #5]
    4ed4:	3b01      	subs	r3, #1
    4ed6:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4ed8:	79ba      	ldrb	r2, [r7, #6]
    4eda:	79fb      	ldrb	r3, [r7, #7]
    4edc:	429a      	cmp	r2, r3
    4ede:	d2d6      	bcs.n	4e8e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4ee0:	68bb      	ldr	r3, [r7, #8]
    4ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ee6:	d003      	beq.n	4ef0 <_ext_irq_handler+0xbc>
				callback(pin);
    4ee8:	4b18      	ldr	r3, [pc, #96]	; (4f4c <_ext_irq_handler+0x118>)
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	68b8      	ldr	r0, [r7, #8]
    4eee:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ef4:	2201      	movs	r2, #1
    4ef6:	fa02 f303 	lsl.w	r3, r2, r3
    4efa:	43da      	mvns	r2, r3
    4efc:	683b      	ldr	r3, [r7, #0]
    4efe:	4013      	ands	r3, r2
    4f00:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4f02:	683b      	ldr	r3, [r7, #0]
    4f04:	4618      	mov	r0, r3
    4f06:	4b14      	ldr	r3, [pc, #80]	; (4f58 <_ext_irq_handler+0x124>)
    4f08:	4798      	blx	r3
    4f0a:	4603      	mov	r3, r0
    4f0c:	b2db      	uxtb	r3, r3
    4f0e:	3b01      	subs	r3, #1
    4f10:	b2db      	uxtb	r3, r3
    4f12:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f18:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f1c:	d1b2      	bne.n	4e84 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4f1e:	4808      	ldr	r0, [pc, #32]	; (4f40 <_ext_irq_handler+0x10c>)
    4f20:	4b08      	ldr	r3, [pc, #32]	; (4f44 <_ext_irq_handler+0x110>)
    4f22:	4798      	blx	r3
    4f24:	4603      	mov	r3, r0
    4f26:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4f28:	683b      	ldr	r3, [r7, #0]
    4f2a:	4619      	mov	r1, r3
    4f2c:	4804      	ldr	r0, [pc, #16]	; (4f40 <_ext_irq_handler+0x10c>)
    4f2e:	4b06      	ldr	r3, [pc, #24]	; (4f48 <_ext_irq_handler+0x114>)
    4f30:	4798      	blx	r3
	while (flags) {
    4f32:	683b      	ldr	r3, [r7, #0]
    4f34:	2b00      	cmp	r3, #0
    4f36:	d19b      	bne.n	4e70 <_ext_irq_handler+0x3c>
	}
}
    4f38:	bf00      	nop
    4f3a:	3710      	adds	r7, #16
    4f3c:	46bd      	mov	sp, r7
    4f3e:	bd80      	pop	{r7, pc}
    4f40:	40002800 	.word	0x40002800
    4f44:	000049e9 	.word	0x000049e9
    4f48:	00004a01 	.word	0x00004a01
    4f4c:	20000c38 	.word	0x20000c38
    4f50:	00010ea4 	.word	0x00010ea4
    4f54:	00003c61 	.word	0x00003c61
    4f58:	0000fda5 	.word	0x0000fda5
    4f5c:	00010e5c 	.word	0x00010e5c

00004f60 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4f60:	b580      	push	{r7, lr}
    4f62:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4f64:	4b01      	ldr	r3, [pc, #4]	; (4f6c <EIC_0_Handler+0xc>)
    4f66:	4798      	blx	r3
} /**
    4f68:	bf00      	nop
    4f6a:	bd80      	pop	{r7, pc}
    4f6c:	00004e35 	.word	0x00004e35

00004f70 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4f70:	b580      	push	{r7, lr}
    4f72:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4f74:	4b01      	ldr	r3, [pc, #4]	; (4f7c <EIC_1_Handler+0xc>)
    4f76:	4798      	blx	r3
} /**
    4f78:	bf00      	nop
    4f7a:	bd80      	pop	{r7, pc}
    4f7c:	00004e35 	.word	0x00004e35

00004f80 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4f80:	b580      	push	{r7, lr}
    4f82:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4f84:	4b01      	ldr	r3, [pc, #4]	; (4f8c <EIC_3_Handler+0xc>)
    4f86:	4798      	blx	r3
} /**
    4f88:	bf00      	nop
    4f8a:	bd80      	pop	{r7, pc}
    4f8c:	00004e35 	.word	0x00004e35

00004f90 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4f94:	4b01      	ldr	r3, [pc, #4]	; (4f9c <EIC_4_Handler+0xc>)
    4f96:	4798      	blx	r3
} /**
    4f98:	bf00      	nop
    4f9a:	bd80      	pop	{r7, pc}
    4f9c:	00004e35 	.word	0x00004e35

00004fa0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fa4:	4b01      	ldr	r3, [pc, #4]	; (4fac <EIC_5_Handler+0xc>)
    4fa6:	4798      	blx	r3
} /**
    4fa8:	bf00      	nop
    4faa:	bd80      	pop	{r7, pc}
    4fac:	00004e35 	.word	0x00004e35

00004fb0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fb4:	4b01      	ldr	r3, [pc, #4]	; (4fbc <EIC_6_Handler+0xc>)
    4fb6:	4798      	blx	r3
} /**
    4fb8:	bf00      	nop
    4fba:	bd80      	pop	{r7, pc}
    4fbc:	00004e35 	.word	0x00004e35

00004fc0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fc4:	4b01      	ldr	r3, [pc, #4]	; (4fcc <EIC_7_Handler+0xc>)
    4fc6:	4798      	blx	r3
} /**
    4fc8:	bf00      	nop
    4fca:	bd80      	pop	{r7, pc}
    4fcc:	00004e35 	.word	0x00004e35

00004fd0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4fd0:	b580      	push	{r7, lr}
    4fd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fd4:	4b01      	ldr	r3, [pc, #4]	; (4fdc <EIC_8_Handler+0xc>)
    4fd6:	4798      	blx	r3
} /**
    4fd8:	bf00      	nop
    4fda:	bd80      	pop	{r7, pc}
    4fdc:	00004e35 	.word	0x00004e35

00004fe0 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4fe0:	b580      	push	{r7, lr}
    4fe2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fe4:	4b01      	ldr	r3, [pc, #4]	; (4fec <EIC_9_Handler+0xc>)
    4fe6:	4798      	blx	r3
}
    4fe8:	bf00      	nop
    4fea:	bd80      	pop	{r7, pc}
    4fec:	00004e35 	.word	0x00004e35

00004ff0 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4ff0:	b480      	push	{r7}
    4ff2:	b085      	sub	sp, #20
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	60f8      	str	r0, [r7, #12]
    4ff8:	460b      	mov	r3, r1
    4ffa:	607a      	str	r2, [r7, #4]
    4ffc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4ffe:	7afa      	ldrb	r2, [r7, #11]
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	3248      	adds	r2, #72	; 0x48
    5004:	6879      	ldr	r1, [r7, #4]
    5006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    500a:	bf00      	nop
    500c:	3714      	adds	r7, #20
    500e:	46bd      	mov	sp, r7
    5010:	f85d 7b04 	ldr.w	r7, [sp], #4
    5014:	4770      	bx	lr

00005016 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    5016:	b480      	push	{r7}
    5018:	b083      	sub	sp, #12
    501a:	af00      	add	r7, sp, #0
    501c:	6078      	str	r0, [r7, #4]
    501e:	460b      	mov	r3, r1
    5020:	70fb      	strb	r3, [r7, #3]
    5022:	4613      	mov	r3, r2
    5024:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5026:	78fb      	ldrb	r3, [r7, #3]
    5028:	687a      	ldr	r2, [r7, #4]
    502a:	3304      	adds	r3, #4
    502c:	00db      	lsls	r3, r3, #3
    502e:	4413      	add	r3, r2
    5030:	78ba      	ldrb	r2, [r7, #2]
    5032:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5034:	78fb      	ldrb	r3, [r7, #3]
    5036:	78ba      	ldrb	r2, [r7, #2]
    5038:	43d2      	mvns	r2, r2
    503a:	b2d1      	uxtb	r1, r2
    503c:	687a      	ldr	r2, [r7, #4]
    503e:	3304      	adds	r3, #4
    5040:	00db      	lsls	r3, r3, #3
    5042:	4413      	add	r3, r2
    5044:	460a      	mov	r2, r1
    5046:	711a      	strb	r2, [r3, #4]
}
    5048:	bf00      	nop
    504a:	370c      	adds	r7, #12
    504c:	46bd      	mov	sp, r7
    504e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5052:	4770      	bx	lr

00005054 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    5054:	b480      	push	{r7}
    5056:	b085      	sub	sp, #20
    5058:	af00      	add	r7, sp, #0
    505a:	60f8      	str	r0, [r7, #12]
    505c:	460b      	mov	r3, r1
    505e:	607a      	str	r2, [r7, #4]
    5060:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5062:	7afa      	ldrb	r2, [r7, #11]
    5064:	68fb      	ldr	r3, [r7, #12]
    5066:	3204      	adds	r2, #4
    5068:	6879      	ldr	r1, [r7, #4]
    506a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    506e:	bf00      	nop
    5070:	3714      	adds	r7, #20
    5072:	46bd      	mov	sp, r7
    5074:	f85d 7b04 	ldr.w	r7, [sp], #4
    5078:	4770      	bx	lr
	...

0000507c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    507c:	b580      	push	{r7, lr}
    507e:	b082      	sub	sp, #8
    5080:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    5082:	2300      	movs	r3, #0
    5084:	71fb      	strb	r3, [r7, #7]
    5086:	e00b      	b.n	50a0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5088:	79fb      	ldrb	r3, [r7, #7]
    508a:	4a18      	ldr	r2, [pc, #96]	; (50ec <_event_system_init+0x70>)
    508c:	5cd3      	ldrb	r3, [r2, r3]
    508e:	461a      	mov	r2, r3
    5090:	79fb      	ldrb	r3, [r7, #7]
    5092:	4619      	mov	r1, r3
    5094:	4816      	ldr	r0, [pc, #88]	; (50f0 <_event_system_init+0x74>)
    5096:	4b17      	ldr	r3, [pc, #92]	; (50f4 <_event_system_init+0x78>)
    5098:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    509a:	79fb      	ldrb	r3, [r7, #7]
    509c:	3301      	adds	r3, #1
    509e:	71fb      	strb	r3, [r7, #7]
    50a0:	79fb      	ldrb	r3, [r7, #7]
    50a2:	2b42      	cmp	r3, #66	; 0x42
    50a4:	d9f0      	bls.n	5088 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    50a6:	2300      	movs	r3, #0
    50a8:	71fb      	strb	r3, [r7, #7]
    50aa:	e016      	b.n	50da <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    50ac:	79fb      	ldrb	r3, [r7, #7]
    50ae:	4a12      	ldr	r2, [pc, #72]	; (50f8 <_event_system_init+0x7c>)
    50b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    50b4:	461a      	mov	r2, r3
    50b6:	79fb      	ldrb	r3, [r7, #7]
    50b8:	4619      	mov	r1, r3
    50ba:	480d      	ldr	r0, [pc, #52]	; (50f0 <_event_system_init+0x74>)
    50bc:	4b0f      	ldr	r3, [pc, #60]	; (50fc <_event_system_init+0x80>)
    50be:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    50c0:	79fb      	ldrb	r3, [r7, #7]
    50c2:	4a0f      	ldr	r2, [pc, #60]	; (5100 <_event_system_init+0x84>)
    50c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    50c8:	b2da      	uxtb	r2, r3
    50ca:	79fb      	ldrb	r3, [r7, #7]
    50cc:	4619      	mov	r1, r3
    50ce:	4808      	ldr	r0, [pc, #32]	; (50f0 <_event_system_init+0x74>)
    50d0:	4b0c      	ldr	r3, [pc, #48]	; (5104 <_event_system_init+0x88>)
    50d2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    50d4:	79fb      	ldrb	r3, [r7, #7]
    50d6:	3301      	adds	r3, #1
    50d8:	71fb      	strb	r3, [r7, #7]
    50da:	79fb      	ldrb	r3, [r7, #7]
    50dc:	2b1f      	cmp	r3, #31
    50de:	d9e5      	bls.n	50ac <_event_system_init+0x30>
	}

	return ERR_NONE;
    50e0:	2300      	movs	r3, #0
}
    50e2:	4618      	mov	r0, r3
    50e4:	3708      	adds	r7, #8
    50e6:	46bd      	mov	sp, r7
    50e8:	bd80      	pop	{r7, pc}
    50ea:	bf00      	nop
    50ec:	00010ebc 	.word	0x00010ebc
    50f0:	4100e000 	.word	0x4100e000
    50f4:	00004ff1 	.word	0x00004ff1
    50f8:	00010f00 	.word	0x00010f00
    50fc:	00005055 	.word	0x00005055
    5100:	00010f40 	.word	0x00010f40
    5104:	00005017 	.word	0x00005017

00005108 <hri_gclk_wait_for_sync>:
{
    5108:	b480      	push	{r7}
    510a:	b083      	sub	sp, #12
    510c:	af00      	add	r7, sp, #0
    510e:	6078      	str	r0, [r7, #4]
    5110:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5112:	bf00      	nop
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	685a      	ldr	r2, [r3, #4]
    5118:	683b      	ldr	r3, [r7, #0]
    511a:	4013      	ands	r3, r2
    511c:	2b00      	cmp	r3, #0
    511e:	d1f9      	bne.n	5114 <hri_gclk_wait_for_sync+0xc>
}
    5120:	bf00      	nop
    5122:	370c      	adds	r7, #12
    5124:	46bd      	mov	sp, r7
    5126:	f85d 7b04 	ldr.w	r7, [sp], #4
    512a:	4770      	bx	lr

0000512c <hri_gclk_write_GENCTRL_reg>:
{
    512c:	b580      	push	{r7, lr}
    512e:	b084      	sub	sp, #16
    5130:	af00      	add	r7, sp, #0
    5132:	60f8      	str	r0, [r7, #12]
    5134:	460b      	mov	r3, r1
    5136:	607a      	str	r2, [r7, #4]
    5138:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    513a:	7afa      	ldrb	r2, [r7, #11]
    513c:	68fb      	ldr	r3, [r7, #12]
    513e:	3208      	adds	r2, #8
    5140:	6879      	ldr	r1, [r7, #4]
    5142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5146:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    514a:	68f8      	ldr	r0, [r7, #12]
    514c:	4b02      	ldr	r3, [pc, #8]	; (5158 <hri_gclk_write_GENCTRL_reg+0x2c>)
    514e:	4798      	blx	r3
}
    5150:	bf00      	nop
    5152:	3710      	adds	r7, #16
    5154:	46bd      	mov	sp, r7
    5156:	bd80      	pop	{r7, pc}
    5158:	00005109 	.word	0x00005109

0000515c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    515c:	b580      	push	{r7, lr}
    515e:	b082      	sub	sp, #8
    5160:	af00      	add	r7, sp, #0
    5162:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5164:	687b      	ldr	r3, [r7, #4]
    5166:	f003 0301 	and.w	r3, r3, #1
    516a:	2b00      	cmp	r3, #0
    516c:	d004      	beq.n	5178 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    516e:	4a36      	ldr	r2, [pc, #216]	; (5248 <_gclk_init_generators_by_fref+0xec>)
    5170:	2100      	movs	r1, #0
    5172:	4836      	ldr	r0, [pc, #216]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    5174:	4b36      	ldr	r3, [pc, #216]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    5176:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	f003 0302 	and.w	r3, r3, #2
    517e:	2b00      	cmp	r3, #0
    5180:	d004      	beq.n	518c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    5182:	4a34      	ldr	r2, [pc, #208]	; (5254 <_gclk_init_generators_by_fref+0xf8>)
    5184:	2101      	movs	r1, #1
    5186:	4831      	ldr	r0, [pc, #196]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    5188:	4b31      	ldr	r3, [pc, #196]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    518a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	f003 0304 	and.w	r3, r3, #4
    5192:	2b00      	cmp	r3, #0
    5194:	d004      	beq.n	51a0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    5196:	4a30      	ldr	r2, [pc, #192]	; (5258 <_gclk_init_generators_by_fref+0xfc>)
    5198:	2102      	movs	r1, #2
    519a:	482c      	ldr	r0, [pc, #176]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    519c:	4b2c      	ldr	r3, [pc, #176]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    519e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    51a0:	687b      	ldr	r3, [r7, #4]
    51a2:	f003 0308 	and.w	r3, r3, #8
    51a6:	2b00      	cmp	r3, #0
    51a8:	d004      	beq.n	51b4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    51aa:	4a2c      	ldr	r2, [pc, #176]	; (525c <_gclk_init_generators_by_fref+0x100>)
    51ac:	2103      	movs	r1, #3
    51ae:	4827      	ldr	r0, [pc, #156]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    51b0:	4b27      	ldr	r3, [pc, #156]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    51b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	f003 0310 	and.w	r3, r3, #16
    51ba:	2b00      	cmp	r3, #0
    51bc:	d004      	beq.n	51c8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    51be:	4a28      	ldr	r2, [pc, #160]	; (5260 <_gclk_init_generators_by_fref+0x104>)
    51c0:	2104      	movs	r1, #4
    51c2:	4822      	ldr	r0, [pc, #136]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    51c4:	4b22      	ldr	r3, [pc, #136]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    51c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	f003 0320 	and.w	r3, r3, #32
    51ce:	2b00      	cmp	r3, #0
    51d0:	d004      	beq.n	51dc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    51d2:	4a24      	ldr	r2, [pc, #144]	; (5264 <_gclk_init_generators_by_fref+0x108>)
    51d4:	2105      	movs	r1, #5
    51d6:	481d      	ldr	r0, [pc, #116]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    51d8:	4b1d      	ldr	r3, [pc, #116]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    51da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    51e2:	2b00      	cmp	r3, #0
    51e4:	d004      	beq.n	51f0 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    51e6:	4a20      	ldr	r2, [pc, #128]	; (5268 <_gclk_init_generators_by_fref+0x10c>)
    51e8:	2106      	movs	r1, #6
    51ea:	4818      	ldr	r0, [pc, #96]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    51ec:	4b18      	ldr	r3, [pc, #96]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    51ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    51f6:	2b00      	cmp	r3, #0
    51f8:	d004      	beq.n	5204 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    51fa:	4a1c      	ldr	r2, [pc, #112]	; (526c <_gclk_init_generators_by_fref+0x110>)
    51fc:	2107      	movs	r1, #7
    51fe:	4813      	ldr	r0, [pc, #76]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    5200:	4b13      	ldr	r3, [pc, #76]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    5202:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	f403 7380 	and.w	r3, r3, #256	; 0x100
    520a:	2b00      	cmp	r3, #0
    520c:	d004      	beq.n	5218 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    520e:	4a18      	ldr	r2, [pc, #96]	; (5270 <_gclk_init_generators_by_fref+0x114>)
    5210:	2108      	movs	r1, #8
    5212:	480e      	ldr	r0, [pc, #56]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    5214:	4b0e      	ldr	r3, [pc, #56]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    5216:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    521e:	2b00      	cmp	r3, #0
    5220:	d004      	beq.n	522c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    5222:	4a14      	ldr	r2, [pc, #80]	; (5274 <_gclk_init_generators_by_fref+0x118>)
    5224:	210a      	movs	r1, #10
    5226:	4809      	ldr	r0, [pc, #36]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    5228:	4b09      	ldr	r3, [pc, #36]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    522a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    5232:	2b00      	cmp	r3, #0
    5234:	d004      	beq.n	5240 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    5236:	4a10      	ldr	r2, [pc, #64]	; (5278 <_gclk_init_generators_by_fref+0x11c>)
    5238:	210b      	movs	r1, #11
    523a:	4804      	ldr	r0, [pc, #16]	; (524c <_gclk_init_generators_by_fref+0xf0>)
    523c:	4b04      	ldr	r3, [pc, #16]	; (5250 <_gclk_init_generators_by_fref+0xf4>)
    523e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5240:	bf00      	nop
    5242:	3708      	adds	r7, #8
    5244:	46bd      	mov	sp, r7
    5246:	bd80      	pop	{r7, pc}
    5248:	00010107 	.word	0x00010107
    524c:	40001c00 	.word	0x40001c00
    5250:	0000512d 	.word	0x0000512d
    5254:	00010907 	.word	0x00010907
    5258:	00010906 	.word	0x00010906
    525c:	00020908 	.word	0x00020908
    5260:	00010901 	.word	0x00010901
    5264:	00062901 	.word	0x00062901
    5268:	000c2901 	.word	0x000c2901
    526c:	00082908 	.word	0x00082908
    5270:	00032901 	.word	0x00032901
    5274:	00010905 	.word	0x00010905
    5278:	00041905 	.word	0x00041905

0000527c <hri_mclk_write_CPUDIV_reg>:
{
    527c:	b480      	push	{r7}
    527e:	b083      	sub	sp, #12
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
    5284:	460b      	mov	r3, r1
    5286:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	78fa      	ldrb	r2, [r7, #3]
    528c:	715a      	strb	r2, [r3, #5]
}
    528e:	bf00      	nop
    5290:	370c      	adds	r7, #12
    5292:	46bd      	mov	sp, r7
    5294:	f85d 7b04 	ldr.w	r7, [sp], #4
    5298:	4770      	bx	lr
	...

0000529c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    529c:	b580      	push	{r7, lr}
    529e:	b082      	sub	sp, #8
    52a0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    52a2:	4b05      	ldr	r3, [pc, #20]	; (52b8 <_mclk_init+0x1c>)
    52a4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    52a6:	2101      	movs	r1, #1
    52a8:	6878      	ldr	r0, [r7, #4]
    52aa:	4b04      	ldr	r3, [pc, #16]	; (52bc <_mclk_init+0x20>)
    52ac:	4798      	blx	r3
}
    52ae:	bf00      	nop
    52b0:	3708      	adds	r7, #8
    52b2:	46bd      	mov	sp, r7
    52b4:	bd80      	pop	{r7, pc}
    52b6:	bf00      	nop
    52b8:	40000800 	.word	0x40000800
    52bc:	0000527d 	.word	0x0000527d

000052c0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    52c0:	b480      	push	{r7}
    52c2:	b083      	sub	sp, #12
    52c4:	af00      	add	r7, sp, #0
    52c6:	6078      	str	r0, [r7, #4]
    52c8:	460b      	mov	r3, r1
    52ca:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    52cc:	687b      	ldr	r3, [r7, #4]
    52ce:	78fa      	ldrb	r2, [r7, #3]
    52d0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    52d2:	bf00      	nop
    52d4:	370c      	adds	r7, #12
    52d6:	46bd      	mov	sp, r7
    52d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52dc:	4770      	bx	lr

000052de <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    52de:	b480      	push	{r7}
    52e0:	b083      	sub	sp, #12
    52e2:	af00      	add	r7, sp, #0
    52e4:	6078      	str	r0, [r7, #4]
    52e6:	460b      	mov	r3, r1
    52e8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	887a      	ldrh	r2, [r7, #2]
    52ee:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    52f0:	bf00      	nop
    52f2:	370c      	adds	r7, #12
    52f4:	46bd      	mov	sp, r7
    52f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52fa:	4770      	bx	lr

000052fc <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    52fc:	b480      	push	{r7}
    52fe:	b083      	sub	sp, #12
    5300:	af00      	add	r7, sp, #0
    5302:	6078      	str	r0, [r7, #4]
    5304:	460b      	mov	r3, r1
    5306:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	78fa      	ldrb	r2, [r7, #3]
    530c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    530e:	bf00      	nop
    5310:	370c      	adds	r7, #12
    5312:	46bd      	mov	sp, r7
    5314:	f85d 7b04 	ldr.w	r7, [sp], #4
    5318:	4770      	bx	lr

0000531a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    531a:	b480      	push	{r7}
    531c:	b083      	sub	sp, #12
    531e:	af00      	add	r7, sp, #0
    5320:	6078      	str	r0, [r7, #4]
    5322:	460b      	mov	r3, r1
    5324:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	78fa      	ldrb	r2, [r7, #3]
    532a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    532c:	bf00      	nop
    532e:	370c      	adds	r7, #12
    5330:	46bd      	mov	sp, r7
    5332:	f85d 7b04 	ldr.w	r7, [sp], #4
    5336:	4770      	bx	lr

00005338 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5338:	b480      	push	{r7}
    533a:	b085      	sub	sp, #20
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	69db      	ldr	r3, [r3, #28]
    5344:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5346:	68fb      	ldr	r3, [r7, #12]
    5348:	0a1b      	lsrs	r3, r3, #8
    534a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    534e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5350:	68fb      	ldr	r3, [r7, #12]
}
    5352:	4618      	mov	r0, r3
    5354:	3714      	adds	r7, #20
    5356:	46bd      	mov	sp, r7
    5358:	f85d 7b04 	ldr.w	r7, [sp], #4
    535c:	4770      	bx	lr

0000535e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    535e:	b480      	push	{r7}
    5360:	b083      	sub	sp, #12
    5362:	af00      	add	r7, sp, #0
    5364:	6078      	str	r0, [r7, #4]
    5366:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	683a      	ldr	r2, [r7, #0]
    536c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    536e:	bf00      	nop
    5370:	370c      	adds	r7, #12
    5372:	46bd      	mov	sp, r7
    5374:	f85d 7b04 	ldr.w	r7, [sp], #4
    5378:	4770      	bx	lr
	...

0000537c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    537c:	b580      	push	{r7, lr}
    537e:	b082      	sub	sp, #8
    5380:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5382:	4b13      	ldr	r3, [pc, #76]	; (53d0 <_osc32kctrl_init_sources+0x54>)
    5384:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    5386:	2300      	movs	r3, #0
    5388:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    538a:	f242 018e 	movw	r1, #8334	; 0x208e
    538e:	6878      	ldr	r0, [r7, #4]
    5390:	4b10      	ldr	r3, [pc, #64]	; (53d4 <_osc32kctrl_init_sources+0x58>)
    5392:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    5394:	2100      	movs	r1, #0
    5396:	6878      	ldr	r0, [r7, #4]
    5398:	4b0f      	ldr	r3, [pc, #60]	; (53d8 <_osc32kctrl_init_sources+0x5c>)
    539a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    539c:	2100      	movs	r1, #0
    539e:	6878      	ldr	r0, [r7, #4]
    53a0:	4b0e      	ldr	r3, [pc, #56]	; (53dc <_osc32kctrl_init_sources+0x60>)
    53a2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    53a4:	6878      	ldr	r0, [r7, #4]
    53a6:	4b0e      	ldr	r3, [pc, #56]	; (53e0 <_osc32kctrl_init_sources+0x64>)
    53a8:	4798      	blx	r3
    53aa:	4603      	mov	r3, r0
    53ac:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    53ae:	887b      	ldrh	r3, [r7, #2]
    53b0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    53b2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    53b6:	4619      	mov	r1, r3
    53b8:	6878      	ldr	r0, [r7, #4]
    53ba:	4b0a      	ldr	r3, [pc, #40]	; (53e4 <_osc32kctrl_init_sources+0x68>)
    53bc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    53be:	2100      	movs	r1, #0
    53c0:	6878      	ldr	r0, [r7, #4]
    53c2:	4b09      	ldr	r3, [pc, #36]	; (53e8 <_osc32kctrl_init_sources+0x6c>)
    53c4:	4798      	blx	r3
	(void)calib;
}
    53c6:	bf00      	nop
    53c8:	3708      	adds	r7, #8
    53ca:	46bd      	mov	sp, r7
    53cc:	bd80      	pop	{r7, pc}
    53ce:	bf00      	nop
    53d0:	40001400 	.word	0x40001400
    53d4:	000052df 	.word	0x000052df
    53d8:	000052fd 	.word	0x000052fd
    53dc:	0000531b 	.word	0x0000531b
    53e0:	00005339 	.word	0x00005339
    53e4:	0000535f 	.word	0x0000535f
    53e8:	000052c1 	.word	0x000052c1

000053ec <hri_gclk_wait_for_sync>:
{
    53ec:	b480      	push	{r7}
    53ee:	b083      	sub	sp, #12
    53f0:	af00      	add	r7, sp, #0
    53f2:	6078      	str	r0, [r7, #4]
    53f4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    53f6:	bf00      	nop
    53f8:	687b      	ldr	r3, [r7, #4]
    53fa:	685a      	ldr	r2, [r3, #4]
    53fc:	683b      	ldr	r3, [r7, #0]
    53fe:	4013      	ands	r3, r2
    5400:	2b00      	cmp	r3, #0
    5402:	d1f9      	bne.n	53f8 <hri_gclk_wait_for_sync+0xc>
}
    5404:	bf00      	nop
    5406:	370c      	adds	r7, #12
    5408:	46bd      	mov	sp, r7
    540a:	f85d 7b04 	ldr.w	r7, [sp], #4
    540e:	4770      	bx	lr

00005410 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5410:	b480      	push	{r7}
    5412:	b083      	sub	sp, #12
    5414:	af00      	add	r7, sp, #0
    5416:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	685b      	ldr	r3, [r3, #4]
    541c:	089b      	lsrs	r3, r3, #2
    541e:	f003 0301 	and.w	r3, r3, #1
    5422:	2b00      	cmp	r3, #0
    5424:	bf14      	ite	ne
    5426:	2301      	movne	r3, #1
    5428:	2300      	moveq	r3, #0
    542a:	b2db      	uxtb	r3, r3
}
    542c:	4618      	mov	r0, r3
    542e:	370c      	adds	r7, #12
    5430:	46bd      	mov	sp, r7
    5432:	f85d 7b04 	ldr.w	r7, [sp], #4
    5436:	4770      	bx	lr

00005438 <hri_gclk_read_SYNCBUSY_reg>:
{
    5438:	b480      	push	{r7}
    543a:	b083      	sub	sp, #12
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5440:	687b      	ldr	r3, [r7, #4]
    5442:	685b      	ldr	r3, [r3, #4]
}
    5444:	4618      	mov	r0, r3
    5446:	370c      	adds	r7, #12
    5448:	46bd      	mov	sp, r7
    544a:	f85d 7b04 	ldr.w	r7, [sp], #4
    544e:	4770      	bx	lr

00005450 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5450:	b580      	push	{r7, lr}
    5452:	b086      	sub	sp, #24
    5454:	af00      	add	r7, sp, #0
    5456:	60f8      	str	r0, [r7, #12]
    5458:	460b      	mov	r3, r1
    545a:	607a      	str	r2, [r7, #4]
    545c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    545e:	7afa      	ldrb	r2, [r7, #11]
    5460:	68fb      	ldr	r3, [r7, #12]
    5462:	3208      	adds	r2, #8
    5464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5468:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    546a:	697b      	ldr	r3, [r7, #20]
    546c:	f023 030f 	bic.w	r3, r3, #15
    5470:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	f003 030f 	and.w	r3, r3, #15
    5478:	697a      	ldr	r2, [r7, #20]
    547a:	4313      	orrs	r3, r2
    547c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    547e:	7afa      	ldrb	r2, [r7, #11]
    5480:	68fb      	ldr	r3, [r7, #12]
    5482:	3208      	adds	r2, #8
    5484:	6979      	ldr	r1, [r7, #20]
    5486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    548a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    548e:	68f8      	ldr	r0, [r7, #12]
    5490:	4b02      	ldr	r3, [pc, #8]	; (549c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5492:	4798      	blx	r3
}
    5494:	bf00      	nop
    5496:	3718      	adds	r7, #24
    5498:	46bd      	mov	sp, r7
    549a:	bd80      	pop	{r7, pc}
    549c:	000053ed 	.word	0x000053ed

000054a0 <hri_gclk_write_PCHCTRL_reg>:
{
    54a0:	b480      	push	{r7}
    54a2:	b085      	sub	sp, #20
    54a4:	af00      	add	r7, sp, #0
    54a6:	60f8      	str	r0, [r7, #12]
    54a8:	460b      	mov	r3, r1
    54aa:	607a      	str	r2, [r7, #4]
    54ac:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    54ae:	7afa      	ldrb	r2, [r7, #11]
    54b0:	68fb      	ldr	r3, [r7, #12]
    54b2:	3220      	adds	r2, #32
    54b4:	6879      	ldr	r1, [r7, #4]
    54b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    54ba:	bf00      	nop
    54bc:	3714      	adds	r7, #20
    54be:	46bd      	mov	sp, r7
    54c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54c4:	4770      	bx	lr

000054c6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    54c6:	b480      	push	{r7}
    54c8:	b085      	sub	sp, #20
    54ca:	af00      	add	r7, sp, #0
    54cc:	60f8      	str	r0, [r7, #12]
    54ce:	460b      	mov	r3, r1
    54d0:	607a      	str	r2, [r7, #4]
    54d2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    54d4:	bf00      	nop
    54d6:	7afa      	ldrb	r2, [r7, #11]
    54d8:	68f9      	ldr	r1, [r7, #12]
    54da:	4613      	mov	r3, r2
    54dc:	009b      	lsls	r3, r3, #2
    54de:	4413      	add	r3, r2
    54e0:	009b      	lsls	r3, r3, #2
    54e2:	440b      	add	r3, r1
    54e4:	333c      	adds	r3, #60	; 0x3c
    54e6:	681a      	ldr	r2, [r3, #0]
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	4013      	ands	r3, r2
    54ec:	2b00      	cmp	r3, #0
    54ee:	d1f2      	bne.n	54d6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    54f0:	bf00      	nop
    54f2:	3714      	adds	r7, #20
    54f4:	46bd      	mov	sp, r7
    54f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54fa:	4770      	bx	lr

000054fc <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    54fc:	b480      	push	{r7}
    54fe:	b083      	sub	sp, #12
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
    5504:	460b      	mov	r3, r1
    5506:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5508:	78fa      	ldrb	r2, [r7, #3]
    550a:	6879      	ldr	r1, [r7, #4]
    550c:	4613      	mov	r3, r2
    550e:	009b      	lsls	r3, r3, #2
    5510:	4413      	add	r3, r2
    5512:	009b      	lsls	r3, r3, #2
    5514:	440b      	add	r3, r1
    5516:	3340      	adds	r3, #64	; 0x40
    5518:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    551a:	f003 0301 	and.w	r3, r3, #1
    551e:	2b00      	cmp	r3, #0
    5520:	bf14      	ite	ne
    5522:	2301      	movne	r3, #1
    5524:	2300      	moveq	r3, #0
    5526:	b2db      	uxtb	r3, r3
}
    5528:	4618      	mov	r0, r3
    552a:	370c      	adds	r7, #12
    552c:	46bd      	mov	sp, r7
    552e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5532:	4770      	bx	lr

00005534 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5534:	b480      	push	{r7}
    5536:	b083      	sub	sp, #12
    5538:	af00      	add	r7, sp, #0
    553a:	6078      	str	r0, [r7, #4]
    553c:	460b      	mov	r3, r1
    553e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5540:	78fa      	ldrb	r2, [r7, #3]
    5542:	6879      	ldr	r1, [r7, #4]
    5544:	4613      	mov	r3, r2
    5546:	009b      	lsls	r3, r3, #2
    5548:	4413      	add	r3, r2
    554a:	009b      	lsls	r3, r3, #2
    554c:	440b      	add	r3, r1
    554e:	3340      	adds	r3, #64	; 0x40
    5550:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5552:	085b      	lsrs	r3, r3, #1
    5554:	f003 0301 	and.w	r3, r3, #1
    5558:	2b00      	cmp	r3, #0
    555a:	bf14      	ite	ne
    555c:	2301      	movne	r3, #1
    555e:	2300      	moveq	r3, #0
    5560:	b2db      	uxtb	r3, r3
}
    5562:	4618      	mov	r0, r3
    5564:	370c      	adds	r7, #12
    5566:	46bd      	mov	sp, r7
    5568:	f85d 7b04 	ldr.w	r7, [sp], #4
    556c:	4770      	bx	lr
	...

00005570 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5570:	b580      	push	{r7, lr}
    5572:	b082      	sub	sp, #8
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
    5578:	460b      	mov	r3, r1
    557a:	70fb      	strb	r3, [r7, #3]
    557c:	4613      	mov	r3, r2
    557e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5580:	78fa      	ldrb	r2, [r7, #3]
    5582:	6879      	ldr	r1, [r7, #4]
    5584:	4613      	mov	r3, r2
    5586:	009b      	lsls	r3, r3, #2
    5588:	4413      	add	r3, r2
    558a:	009b      	lsls	r3, r3, #2
    558c:	440b      	add	r3, r1
    558e:	3330      	adds	r3, #48	; 0x30
    5590:	78ba      	ldrb	r2, [r7, #2]
    5592:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5594:	78fb      	ldrb	r3, [r7, #3]
    5596:	2202      	movs	r2, #2
    5598:	4619      	mov	r1, r3
    559a:	6878      	ldr	r0, [r7, #4]
    559c:	4b02      	ldr	r3, [pc, #8]	; (55a8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    559e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55a0:	bf00      	nop
    55a2:	3708      	adds	r7, #8
    55a4:	46bd      	mov	sp, r7
    55a6:	bd80      	pop	{r7, pc}
    55a8:	000054c7 	.word	0x000054c7

000055ac <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    55ac:	b580      	push	{r7, lr}
    55ae:	b084      	sub	sp, #16
    55b0:	af00      	add	r7, sp, #0
    55b2:	60f8      	str	r0, [r7, #12]
    55b4:	460b      	mov	r3, r1
    55b6:	607a      	str	r2, [r7, #4]
    55b8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    55ba:	7afa      	ldrb	r2, [r7, #11]
    55bc:	68f9      	ldr	r1, [r7, #12]
    55be:	4613      	mov	r3, r2
    55c0:	009b      	lsls	r3, r3, #2
    55c2:	4413      	add	r3, r2
    55c4:	009b      	lsls	r3, r3, #2
    55c6:	440b      	add	r3, r1
    55c8:	3334      	adds	r3, #52	; 0x34
    55ca:	687a      	ldr	r2, [r7, #4]
    55cc:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    55ce:	7afb      	ldrb	r3, [r7, #11]
    55d0:	2206      	movs	r2, #6
    55d2:	4619      	mov	r1, r3
    55d4:	68f8      	ldr	r0, [r7, #12]
    55d6:	4b03      	ldr	r3, [pc, #12]	; (55e4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    55d8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55da:	bf00      	nop
    55dc:	3710      	adds	r7, #16
    55de:	46bd      	mov	sp, r7
    55e0:	bd80      	pop	{r7, pc}
    55e2:	bf00      	nop
    55e4:	000054c7 	.word	0x000054c7

000055e8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    55e8:	b480      	push	{r7}
    55ea:	b085      	sub	sp, #20
    55ec:	af00      	add	r7, sp, #0
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	460b      	mov	r3, r1
    55f2:	607a      	str	r2, [r7, #4]
    55f4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    55f6:	7afa      	ldrb	r2, [r7, #11]
    55f8:	68f9      	ldr	r1, [r7, #12]
    55fa:	4613      	mov	r3, r2
    55fc:	009b      	lsls	r3, r3, #2
    55fe:	4413      	add	r3, r2
    5600:	009b      	lsls	r3, r3, #2
    5602:	440b      	add	r3, r1
    5604:	3338      	adds	r3, #56	; 0x38
    5606:	687a      	ldr	r2, [r7, #4]
    5608:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    560a:	bf00      	nop
    560c:	3714      	adds	r7, #20
    560e:	46bd      	mov	sp, r7
    5610:	f85d 7b04 	ldr.w	r7, [sp], #4
    5614:	4770      	bx	lr

00005616 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5616:	b480      	push	{r7}
    5618:	b083      	sub	sp, #12
    561a:	af00      	add	r7, sp, #0
    561c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	691b      	ldr	r3, [r3, #16]
    5622:	085b      	lsrs	r3, r3, #1
    5624:	f003 0301 	and.w	r3, r3, #1
    5628:	2b00      	cmp	r3, #0
    562a:	bf14      	ite	ne
    562c:	2301      	movne	r3, #1
    562e:	2300      	moveq	r3, #0
    5630:	b2db      	uxtb	r3, r3
}
    5632:	4618      	mov	r0, r3
    5634:	370c      	adds	r7, #12
    5636:	46bd      	mov	sp, r7
    5638:	f85d 7b04 	ldr.w	r7, [sp], #4
    563c:	4770      	bx	lr

0000563e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    563e:	b480      	push	{r7}
    5640:	b083      	sub	sp, #12
    5642:	af00      	add	r7, sp, #0
    5644:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	691b      	ldr	r3, [r3, #16]
    564a:	0a1b      	lsrs	r3, r3, #8
    564c:	f003 0301 	and.w	r3, r3, #1
    5650:	2b00      	cmp	r3, #0
    5652:	bf14      	ite	ne
    5654:	2301      	movne	r3, #1
    5656:	2300      	moveq	r3, #0
    5658:	b2db      	uxtb	r3, r3
}
    565a:	4618      	mov	r0, r3
    565c:	370c      	adds	r7, #12
    565e:	46bd      	mov	sp, r7
    5660:	f85d 7b04 	ldr.w	r7, [sp], #4
    5664:	4770      	bx	lr

00005666 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5666:	b480      	push	{r7}
    5668:	b085      	sub	sp, #20
    566a:	af00      	add	r7, sp, #0
    566c:	6078      	str	r0, [r7, #4]
    566e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	691b      	ldr	r3, [r3, #16]
    5674:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5676:	68fa      	ldr	r2, [r7, #12]
    5678:	683b      	ldr	r3, [r7, #0]
    567a:	4013      	ands	r3, r2
    567c:	60fb      	str	r3, [r7, #12]
	return tmp;
    567e:	68fb      	ldr	r3, [r7, #12]
}
    5680:	4618      	mov	r0, r3
    5682:	3714      	adds	r7, #20
    5684:	46bd      	mov	sp, r7
    5686:	f85d 7b04 	ldr.w	r7, [sp], #4
    568a:	4770      	bx	lr

0000568c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    568c:	b480      	push	{r7}
    568e:	b085      	sub	sp, #20
    5690:	af00      	add	r7, sp, #0
    5692:	60f8      	str	r0, [r7, #12]
    5694:	460b      	mov	r3, r1
    5696:	607a      	str	r2, [r7, #4]
    5698:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    569a:	7afb      	ldrb	r3, [r7, #11]
    569c:	68fa      	ldr	r2, [r7, #12]
    569e:	3304      	adds	r3, #4
    56a0:	009b      	lsls	r3, r3, #2
    56a2:	4413      	add	r3, r2
    56a4:	687a      	ldr	r2, [r7, #4]
    56a6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    56a8:	bf00      	nop
    56aa:	3714      	adds	r7, #20
    56ac:	46bd      	mov	sp, r7
    56ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b2:	4770      	bx	lr

000056b4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    56b4:	b480      	push	{r7}
    56b6:	b083      	sub	sp, #12
    56b8:	af00      	add	r7, sp, #0
    56ba:	6078      	str	r0, [r7, #4]
    56bc:	460b      	mov	r3, r1
    56be:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	78fa      	ldrb	r2, [r7, #3]
    56c4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    56c6:	bf00      	nop
    56c8:	370c      	adds	r7, #12
    56ca:	46bd      	mov	sp, r7
    56cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d0:	4770      	bx	lr

000056d2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    56d2:	b480      	push	{r7}
    56d4:	b085      	sub	sp, #20
    56d6:	af00      	add	r7, sp, #0
    56d8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	f893 3020 	ldrb.w	r3, [r3, #32]
    56e0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    56e2:	7bfb      	ldrb	r3, [r7, #15]
    56e4:	f003 0301 	and.w	r3, r3, #1
    56e8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    56ea:	7bfb      	ldrb	r3, [r7, #15]
    56ec:	2b00      	cmp	r3, #0
    56ee:	bf14      	ite	ne
    56f0:	2301      	movne	r3, #1
    56f2:	2300      	moveq	r3, #0
    56f4:	b2db      	uxtb	r3, r3
}
    56f6:	4618      	mov	r0, r3
    56f8:	3714      	adds	r7, #20
    56fa:	46bd      	mov	sp, r7
    56fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5700:	4770      	bx	lr

00005702 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5702:	b480      	push	{r7}
    5704:	b083      	sub	sp, #12
    5706:	af00      	add	r7, sp, #0
    5708:	6078      	str	r0, [r7, #4]
    570a:	460b      	mov	r3, r1
    570c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	78fa      	ldrb	r2, [r7, #3]
    5712:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5716:	bf00      	nop
    5718:	370c      	adds	r7, #12
    571a:	46bd      	mov	sp, r7
    571c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5720:	4770      	bx	lr

00005722 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5722:	b480      	push	{r7}
    5724:	b083      	sub	sp, #12
    5726:	af00      	add	r7, sp, #0
    5728:	6078      	str	r0, [r7, #4]
    572a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    572c:	687b      	ldr	r3, [r7, #4]
    572e:	683a      	ldr	r2, [r7, #0]
    5730:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5732:	bf00      	nop
    5734:	370c      	adds	r7, #12
    5736:	46bd      	mov	sp, r7
    5738:	f85d 7b04 	ldr.w	r7, [sp], #4
    573c:	4770      	bx	lr

0000573e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    573e:	b480      	push	{r7}
    5740:	b083      	sub	sp, #12
    5742:	af00      	add	r7, sp, #0
    5744:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    574a:	4618      	mov	r0, r3
    574c:	370c      	adds	r7, #12
    574e:	46bd      	mov	sp, r7
    5750:	f85d 7b04 	ldr.w	r7, [sp], #4
    5754:	4770      	bx	lr

00005756 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5756:	b480      	push	{r7}
    5758:	b083      	sub	sp, #12
    575a:	af00      	add	r7, sp, #0
    575c:	6078      	str	r0, [r7, #4]
    575e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	683a      	ldr	r2, [r7, #0]
    5764:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5766:	bf00      	nop
    5768:	370c      	adds	r7, #12
    576a:	46bd      	mov	sp, r7
    576c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5770:	4770      	bx	lr

00005772 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5772:	b480      	push	{r7}
    5774:	b085      	sub	sp, #20
    5776:	af00      	add	r7, sp, #0
    5778:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    577a:	687b      	ldr	r3, [r7, #4]
    577c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5780:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5782:	7bfb      	ldrb	r3, [r7, #15]
    5784:	085b      	lsrs	r3, r3, #1
    5786:	b2db      	uxtb	r3, r3
    5788:	f003 0301 	and.w	r3, r3, #1
    578c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    578e:	7bfb      	ldrb	r3, [r7, #15]
    5790:	2b00      	cmp	r3, #0
    5792:	bf14      	ite	ne
    5794:	2301      	movne	r3, #1
    5796:	2300      	moveq	r3, #0
    5798:	b2db      	uxtb	r3, r3
}
    579a:	4618      	mov	r0, r3
    579c:	3714      	adds	r7, #20
    579e:	46bd      	mov	sp, r7
    57a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a4:	4770      	bx	lr

000057a6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    57a6:	b480      	push	{r7}
    57a8:	b085      	sub	sp, #20
    57aa:	af00      	add	r7, sp, #0
    57ac:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    57b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    57b6:	7bfb      	ldrb	r3, [r7, #15]
    57b8:	089b      	lsrs	r3, r3, #2
    57ba:	b2db      	uxtb	r3, r3
    57bc:	f003 0301 	and.w	r3, r3, #1
    57c0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    57c2:	7bfb      	ldrb	r3, [r7, #15]
    57c4:	2b00      	cmp	r3, #0
    57c6:	bf14      	ite	ne
    57c8:	2301      	movne	r3, #1
    57ca:	2300      	moveq	r3, #0
    57cc:	b2db      	uxtb	r3, r3
}
    57ce:	4618      	mov	r0, r3
    57d0:	3714      	adds	r7, #20
    57d2:	46bd      	mov	sp, r7
    57d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d8:	4770      	bx	lr

000057da <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    57da:	b480      	push	{r7}
    57dc:	b085      	sub	sp, #20
    57de:	af00      	add	r7, sp, #0
    57e0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    57e2:	687b      	ldr	r3, [r7, #4]
    57e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    57e8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    57ea:	7bfb      	ldrb	r3, [r7, #15]
    57ec:	08db      	lsrs	r3, r3, #3
    57ee:	b2db      	uxtb	r3, r3
    57f0:	f003 0301 	and.w	r3, r3, #1
    57f4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    57f6:	7bfb      	ldrb	r3, [r7, #15]
    57f8:	2b00      	cmp	r3, #0
    57fa:	bf14      	ite	ne
    57fc:	2301      	movne	r3, #1
    57fe:	2300      	moveq	r3, #0
    5800:	b2db      	uxtb	r3, r3
}
    5802:	4618      	mov	r0, r3
    5804:	3714      	adds	r7, #20
    5806:	46bd      	mov	sp, r7
    5808:	f85d 7b04 	ldr.w	r7, [sp], #4
    580c:	4770      	bx	lr

0000580e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    580e:	b480      	push	{r7}
    5810:	b085      	sub	sp, #20
    5812:	af00      	add	r7, sp, #0
    5814:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5816:	687b      	ldr	r3, [r7, #4]
    5818:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    581c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    581e:	7bfb      	ldrb	r3, [r7, #15]
    5820:	091b      	lsrs	r3, r3, #4
    5822:	b2db      	uxtb	r3, r3
    5824:	f003 0301 	and.w	r3, r3, #1
    5828:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    582a:	7bfb      	ldrb	r3, [r7, #15]
    582c:	2b00      	cmp	r3, #0
    582e:	bf14      	ite	ne
    5830:	2301      	movne	r3, #1
    5832:	2300      	moveq	r3, #0
    5834:	b2db      	uxtb	r3, r3
}
    5836:	4618      	mov	r0, r3
    5838:	3714      	adds	r7, #20
    583a:	46bd      	mov	sp, r7
    583c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5840:	4770      	bx	lr
	...

00005844 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    584a:	4b0a      	ldr	r3, [pc, #40]	; (5874 <_oscctrl_init_sources+0x30>)
    584c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    584e:	4a0a      	ldr	r2, [pc, #40]	; (5878 <_oscctrl_init_sources+0x34>)
    5850:	2101      	movs	r1, #1
    5852:	6878      	ldr	r0, [r7, #4]
    5854:	4b09      	ldr	r3, [pc, #36]	; (587c <_oscctrl_init_sources+0x38>)
    5856:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5858:	bf00      	nop
    585a:	6878      	ldr	r0, [r7, #4]
    585c:	4b08      	ldr	r3, [pc, #32]	; (5880 <_oscctrl_init_sources+0x3c>)
    585e:	4798      	blx	r3
    5860:	4603      	mov	r3, r0
    5862:	f083 0301 	eor.w	r3, r3, #1
    5866:	b2db      	uxtb	r3, r3
    5868:	2b00      	cmp	r3, #0
    586a:	d1f6      	bne.n	585a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    586c:	bf00      	nop
    586e:	3708      	adds	r7, #8
    5870:	46bd      	mov	sp, r7
    5872:	bd80      	pop	{r7, pc}
    5874:	40001000 	.word	0x40001000
    5878:	03002646 	.word	0x03002646
    587c:	0000568d 	.word	0x0000568d
    5880:	00005617 	.word	0x00005617

00005884 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5884:	b580      	push	{r7, lr}
    5886:	b084      	sub	sp, #16
    5888:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    588a:	4b6b      	ldr	r3, [pc, #428]	; (5a38 <_oscctrl_init_referenced_generators+0x1b4>)
    588c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    588e:	2204      	movs	r2, #4
    5890:	2100      	movs	r1, #0
    5892:	486a      	ldr	r0, [pc, #424]	; (5a3c <_oscctrl_init_referenced_generators+0x1b8>)
    5894:	4b6a      	ldr	r3, [pc, #424]	; (5a40 <_oscctrl_init_referenced_generators+0x1bc>)
    5896:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5898:	bf00      	nop
    589a:	4868      	ldr	r0, [pc, #416]	; (5a3c <_oscctrl_init_referenced_generators+0x1b8>)
    589c:	4b69      	ldr	r3, [pc, #420]	; (5a44 <_oscctrl_init_referenced_generators+0x1c0>)
    589e:	4798      	blx	r3
    58a0:	4603      	mov	r3, r0
    58a2:	2b00      	cmp	r3, #0
    58a4:	d1f9      	bne.n	589a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    58a6:	2100      	movs	r1, #0
    58a8:	68f8      	ldr	r0, [r7, #12]
    58aa:	4b67      	ldr	r3, [pc, #412]	; (5a48 <_oscctrl_init_referenced_generators+0x1c4>)
    58ac:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    58ae:	4967      	ldr	r1, [pc, #412]	; (5a4c <_oscctrl_init_referenced_generators+0x1c8>)
    58b0:	68f8      	ldr	r0, [r7, #12]
    58b2:	4b67      	ldr	r3, [pc, #412]	; (5a50 <_oscctrl_init_referenced_generators+0x1cc>)
    58b4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    58b6:	bf00      	nop
    58b8:	68f8      	ldr	r0, [r7, #12]
    58ba:	4b66      	ldr	r3, [pc, #408]	; (5a54 <_oscctrl_init_referenced_generators+0x1d0>)
    58bc:	4798      	blx	r3
    58be:	4603      	mov	r3, r0
    58c0:	2b00      	cmp	r3, #0
    58c2:	d1f9      	bne.n	58b8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    58c4:	2100      	movs	r1, #0
    58c6:	68f8      	ldr	r0, [r7, #12]
    58c8:	4b63      	ldr	r3, [pc, #396]	; (5a58 <_oscctrl_init_referenced_generators+0x1d4>)
    58ca:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    58cc:	bf00      	nop
    58ce:	68f8      	ldr	r0, [r7, #12]
    58d0:	4b62      	ldr	r3, [pc, #392]	; (5a5c <_oscctrl_init_referenced_generators+0x1d8>)
    58d2:	4798      	blx	r3
    58d4:	4603      	mov	r3, r0
    58d6:	2b00      	cmp	r3, #0
    58d8:	d1f9      	bne.n	58ce <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    58da:	2302      	movs	r3, #2
    58dc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    58de:	7afb      	ldrb	r3, [r7, #11]
    58e0:	4619      	mov	r1, r3
    58e2:	68f8      	ldr	r0, [r7, #12]
    58e4:	4b58      	ldr	r3, [pc, #352]	; (5a48 <_oscctrl_init_referenced_generators+0x1c4>)
    58e6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    58e8:	bf00      	nop
    58ea:	68f8      	ldr	r0, [r7, #12]
    58ec:	4b5c      	ldr	r3, [pc, #368]	; (5a60 <_oscctrl_init_referenced_generators+0x1dc>)
    58ee:	4798      	blx	r3
    58f0:	4603      	mov	r3, r0
    58f2:	2b00      	cmp	r3, #0
    58f4:	d1f9      	bne.n	58ea <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    58f6:	68f8      	ldr	r0, [r7, #12]
    58f8:	4b5a      	ldr	r3, [pc, #360]	; (5a64 <_oscctrl_init_referenced_generators+0x1e0>)
    58fa:	4798      	blx	r3
    58fc:	4603      	mov	r3, r0
    58fe:	4619      	mov	r1, r3
    5900:	68f8      	ldr	r0, [r7, #12]
    5902:	4b59      	ldr	r3, [pc, #356]	; (5a68 <_oscctrl_init_referenced_generators+0x1e4>)
    5904:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5906:	bf00      	nop
    5908:	68f8      	ldr	r0, [r7, #12]
    590a:	4b58      	ldr	r3, [pc, #352]	; (5a6c <_oscctrl_init_referenced_generators+0x1e8>)
    590c:	4798      	blx	r3
    590e:	4603      	mov	r3, r0
    5910:	2b00      	cmp	r3, #0
    5912:	d1f9      	bne.n	5908 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5914:	2319      	movs	r3, #25
    5916:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5918:	7afb      	ldrb	r3, [r7, #11]
    591a:	4619      	mov	r1, r3
    591c:	68f8      	ldr	r0, [r7, #12]
    591e:	4b4e      	ldr	r3, [pc, #312]	; (5a58 <_oscctrl_init_referenced_generators+0x1d4>)
    5920:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5922:	bf00      	nop
    5924:	68f8      	ldr	r0, [r7, #12]
    5926:	4b4d      	ldr	r3, [pc, #308]	; (5a5c <_oscctrl_init_referenced_generators+0x1d8>)
    5928:	4798      	blx	r3
    592a:	4603      	mov	r3, r0
    592c:	2b00      	cmp	r3, #0
    592e:	d1f9      	bne.n	5924 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5930:	2245      	movs	r2, #69	; 0x45
    5932:	2101      	movs	r1, #1
    5934:	4841      	ldr	r0, [pc, #260]	; (5a3c <_oscctrl_init_referenced_generators+0x1b8>)
    5936:	4b4e      	ldr	r3, [pc, #312]	; (5a70 <_oscctrl_init_referenced_generators+0x1ec>)
    5938:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    593a:	223b      	movs	r2, #59	; 0x3b
    593c:	2100      	movs	r1, #0
    593e:	68f8      	ldr	r0, [r7, #12]
    5940:	4b4c      	ldr	r3, [pc, #304]	; (5a74 <_oscctrl_init_referenced_generators+0x1f0>)
    5942:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5944:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5948:	2100      	movs	r1, #0
    594a:	68f8      	ldr	r0, [r7, #12]
    594c:	4b4a      	ldr	r3, [pc, #296]	; (5a78 <_oscctrl_init_referenced_generators+0x1f4>)
    594e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5950:	2242      	movs	r2, #66	; 0x42
    5952:	2100      	movs	r1, #0
    5954:	68f8      	ldr	r0, [r7, #12]
    5956:	4b49      	ldr	r3, [pc, #292]	; (5a7c <_oscctrl_init_referenced_generators+0x1f8>)
    5958:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    595a:	4a49      	ldr	r2, [pc, #292]	; (5a80 <_oscctrl_init_referenced_generators+0x1fc>)
    595c:	2101      	movs	r1, #1
    595e:	68f8      	ldr	r0, [r7, #12]
    5960:	4b44      	ldr	r3, [pc, #272]	; (5a74 <_oscctrl_init_referenced_generators+0x1f0>)
    5962:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5964:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5968:	2101      	movs	r1, #1
    596a:	68f8      	ldr	r0, [r7, #12]
    596c:	4b42      	ldr	r3, [pc, #264]	; (5a78 <_oscctrl_init_referenced_generators+0x1f4>)
    596e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5970:	2202      	movs	r2, #2
    5972:	2101      	movs	r1, #1
    5974:	68f8      	ldr	r0, [r7, #12]
    5976:	4b41      	ldr	r3, [pc, #260]	; (5a7c <_oscctrl_init_referenced_generators+0x1f8>)
    5978:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    597a:	68f8      	ldr	r0, [r7, #12]
    597c:	4b41      	ldr	r3, [pc, #260]	; (5a84 <_oscctrl_init_referenced_generators+0x200>)
    597e:	4798      	blx	r3
    5980:	4603      	mov	r3, r0
    5982:	2b00      	cmp	r3, #0
    5984:	d00c      	beq.n	59a0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5986:	f44f 6310 	mov.w	r3, #2304	; 0x900
    598a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    598c:	bf00      	nop
    598e:	6879      	ldr	r1, [r7, #4]
    5990:	68f8      	ldr	r0, [r7, #12]
    5992:	4b3d      	ldr	r3, [pc, #244]	; (5a88 <_oscctrl_init_referenced_generators+0x204>)
    5994:	4798      	blx	r3
    5996:	4602      	mov	r2, r0
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	429a      	cmp	r2, r3
    599c:	d1f7      	bne.n	598e <_oscctrl_init_referenced_generators+0x10a>
    599e:	e009      	b.n	59b4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    59a0:	bf00      	nop
    59a2:	68f8      	ldr	r0, [r7, #12]
    59a4:	4b39      	ldr	r3, [pc, #228]	; (5a8c <_oscctrl_init_referenced_generators+0x208>)
    59a6:	4798      	blx	r3
    59a8:	4603      	mov	r3, r0
    59aa:	f083 0301 	eor.w	r3, r3, #1
    59ae:	b2db      	uxtb	r3, r3
    59b0:	2b00      	cmp	r3, #0
    59b2:	d1f6      	bne.n	59a2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    59b4:	bf00      	nop
    59b6:	2100      	movs	r1, #0
    59b8:	68f8      	ldr	r0, [r7, #12]
    59ba:	4b35      	ldr	r3, [pc, #212]	; (5a90 <_oscctrl_init_referenced_generators+0x20c>)
    59bc:	4798      	blx	r3
    59be:	4603      	mov	r3, r0
    59c0:	f083 0301 	eor.w	r3, r3, #1
    59c4:	b2db      	uxtb	r3, r3
    59c6:	2b00      	cmp	r3, #0
    59c8:	d009      	beq.n	59de <_oscctrl_init_referenced_generators+0x15a>
    59ca:	2100      	movs	r1, #0
    59cc:	68f8      	ldr	r0, [r7, #12]
    59ce:	4b31      	ldr	r3, [pc, #196]	; (5a94 <_oscctrl_init_referenced_generators+0x210>)
    59d0:	4798      	blx	r3
    59d2:	4603      	mov	r3, r0
    59d4:	f083 0301 	eor.w	r3, r3, #1
    59d8:	b2db      	uxtb	r3, r3
    59da:	2b00      	cmp	r3, #0
    59dc:	d1eb      	bne.n	59b6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    59de:	bf00      	nop
    59e0:	2101      	movs	r1, #1
    59e2:	68f8      	ldr	r0, [r7, #12]
    59e4:	4b2a      	ldr	r3, [pc, #168]	; (5a90 <_oscctrl_init_referenced_generators+0x20c>)
    59e6:	4798      	blx	r3
    59e8:	4603      	mov	r3, r0
    59ea:	f083 0301 	eor.w	r3, r3, #1
    59ee:	b2db      	uxtb	r3, r3
    59f0:	2b00      	cmp	r3, #0
    59f2:	d009      	beq.n	5a08 <_oscctrl_init_referenced_generators+0x184>
    59f4:	2101      	movs	r1, #1
    59f6:	68f8      	ldr	r0, [r7, #12]
    59f8:	4b26      	ldr	r3, [pc, #152]	; (5a94 <_oscctrl_init_referenced_generators+0x210>)
    59fa:	4798      	blx	r3
    59fc:	4603      	mov	r3, r0
    59fe:	f083 0301 	eor.w	r3, r3, #1
    5a02:	b2db      	uxtb	r3, r3
    5a04:	2b00      	cmp	r3, #0
    5a06:	d1eb      	bne.n	59e0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5a08:	bf00      	nop
    5a0a:	480c      	ldr	r0, [pc, #48]	; (5a3c <_oscctrl_init_referenced_generators+0x1b8>)
    5a0c:	4b22      	ldr	r3, [pc, #136]	; (5a98 <_oscctrl_init_referenced_generators+0x214>)
    5a0e:	4798      	blx	r3
    5a10:	4603      	mov	r3, r0
    5a12:	2b00      	cmp	r3, #0
    5a14:	d1f9      	bne.n	5a0a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5a16:	2207      	movs	r2, #7
    5a18:	2100      	movs	r1, #0
    5a1a:	4808      	ldr	r0, [pc, #32]	; (5a3c <_oscctrl_init_referenced_generators+0x1b8>)
    5a1c:	4b08      	ldr	r3, [pc, #32]	; (5a40 <_oscctrl_init_referenced_generators+0x1bc>)
    5a1e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5a20:	bf00      	nop
    5a22:	4806      	ldr	r0, [pc, #24]	; (5a3c <_oscctrl_init_referenced_generators+0x1b8>)
    5a24:	4b07      	ldr	r3, [pc, #28]	; (5a44 <_oscctrl_init_referenced_generators+0x1c0>)
    5a26:	4798      	blx	r3
    5a28:	4603      	mov	r3, r0
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d1f9      	bne.n	5a22 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5a2e:	bf00      	nop
    5a30:	3710      	adds	r7, #16
    5a32:	46bd      	mov	sp, r7
    5a34:	bd80      	pop	{r7, pc}
    5a36:	bf00      	nop
    5a38:	40001000 	.word	0x40001000
    5a3c:	40001c00 	.word	0x40001c00
    5a40:	00005451 	.word	0x00005451
    5a44:	00005411 	.word	0x00005411
    5a48:	000056b5 	.word	0x000056b5
    5a4c:	0401bb80 	.word	0x0401bb80
    5a50:	00005757 	.word	0x00005757
    5a54:	0000580f 	.word	0x0000580f
    5a58:	00005703 	.word	0x00005703
    5a5c:	000057a7 	.word	0x000057a7
    5a60:	00005773 	.word	0x00005773
    5a64:	0000573f 	.word	0x0000573f
    5a68:	00005723 	.word	0x00005723
    5a6c:	000057db 	.word	0x000057db
    5a70:	000054a1 	.word	0x000054a1
    5a74:	000055ad 	.word	0x000055ad
    5a78:	000055e9 	.word	0x000055e9
    5a7c:	00005571 	.word	0x00005571
    5a80:	000407a0 	.word	0x000407a0
    5a84:	000056d3 	.word	0x000056d3
    5a88:	00005667 	.word	0x00005667
    5a8c:	0000563f 	.word	0x0000563f
    5a90:	000054fd 	.word	0x000054fd
    5a94:	00005535 	.word	0x00005535
    5a98:	00005439 	.word	0x00005439

00005a9c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5a9c:	b480      	push	{r7}
    5a9e:	b083      	sub	sp, #12
    5aa0:	af00      	add	r7, sp, #0
    5aa2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	69db      	ldr	r3, [r3, #28]
    5aa8:	0a9b      	lsrs	r3, r3, #10
    5aaa:	f003 0301 	and.w	r3, r3, #1
    5aae:	2b00      	cmp	r3, #0
    5ab0:	bf14      	ite	ne
    5ab2:	2301      	movne	r3, #1
    5ab4:	2300      	moveq	r3, #0
    5ab6:	b2db      	uxtb	r3, r3
}
    5ab8:	4618      	mov	r0, r3
    5aba:	370c      	adds	r7, #12
    5abc:	46bd      	mov	sp, r7
    5abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac2:	4770      	bx	lr

00005ac4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5ac4:	b480      	push	{r7}
    5ac6:	b083      	sub	sp, #12
    5ac8:	af00      	add	r7, sp, #0
    5aca:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5acc:	687b      	ldr	r3, [r7, #4]
    5ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5ad2:	61da      	str	r2, [r3, #28]
}
    5ad4:	bf00      	nop
    5ad6:	370c      	adds	r7, #12
    5ad8:	46bd      	mov	sp, r7
    5ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ade:	4770      	bx	lr

00005ae0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5ae0:	b480      	push	{r7}
    5ae2:	b083      	sub	sp, #12
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	6078      	str	r0, [r7, #4]
    5ae8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5aea:	687b      	ldr	r3, [r7, #4]
    5aec:	683a      	ldr	r2, [r7, #0]
    5aee:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5af0:	bf00      	nop
    5af2:	370c      	adds	r7, #12
    5af4:	46bd      	mov	sp, r7
    5af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5afa:	4770      	bx	lr

00005afc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5afc:	b480      	push	{r7}
    5afe:	b083      	sub	sp, #12
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
    5b04:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	683a      	ldr	r2, [r7, #0]
    5b0a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b0c:	bf00      	nop
    5b0e:	370c      	adds	r7, #12
    5b10:	46bd      	mov	sp, r7
    5b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b16:	4770      	bx	lr

00005b18 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5b18:	b480      	push	{r7}
    5b1a:	b083      	sub	sp, #12
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
    5b20:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	683a      	ldr	r2, [r7, #0]
    5b26:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b28:	bf00      	nop
    5b2a:	370c      	adds	r7, #12
    5b2c:	46bd      	mov	sp, r7
    5b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b32:	4770      	bx	lr

00005b34 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5b34:	b480      	push	{r7}
    5b36:	b083      	sub	sp, #12
    5b38:	af00      	add	r7, sp, #0
    5b3a:	6078      	str	r0, [r7, #4]
    5b3c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5b3e:	687b      	ldr	r3, [r7, #4]
    5b40:	683a      	ldr	r2, [r7, #0]
    5b42:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b44:	bf00      	nop
    5b46:	370c      	adds	r7, #12
    5b48:	46bd      	mov	sp, r7
    5b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b4e:	4770      	bx	lr

00005b50 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5b50:	b480      	push	{r7}
    5b52:	b085      	sub	sp, #20
    5b54:	af00      	add	r7, sp, #0
    5b56:	6078      	str	r0, [r7, #4]
    5b58:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5b5e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5b60:	68fb      	ldr	r3, [r7, #12]
    5b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5b66:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5b68:	683b      	ldr	r3, [r7, #0]
    5b6a:	b2db      	uxtb	r3, r3
    5b6c:	68fa      	ldr	r2, [r7, #12]
    5b6e:	4313      	orrs	r3, r2
    5b70:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	68fa      	ldr	r2, [r7, #12]
    5b76:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b78:	bf00      	nop
    5b7a:	3714      	adds	r7, #20
    5b7c:	46bd      	mov	sp, r7
    5b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b82:	4770      	bx	lr

00005b84 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5b84:	b480      	push	{r7}
    5b86:	b085      	sub	sp, #20
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
    5b8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5b92:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5b94:	68fb      	ldr	r3, [r7, #12]
    5b96:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5b9a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5b9c:	683b      	ldr	r3, [r7, #0]
    5b9e:	041b      	lsls	r3, r3, #16
    5ba0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5ba4:	68fa      	ldr	r2, [r7, #12]
    5ba6:	4313      	orrs	r3, r2
    5ba8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	68fa      	ldr	r2, [r7, #12]
    5bae:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bb0:	bf00      	nop
    5bb2:	3714      	adds	r7, #20
    5bb4:	46bd      	mov	sp, r7
    5bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bba:	4770      	bx	lr

00005bbc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5bbc:	b480      	push	{r7}
    5bbe:	b083      	sub	sp, #12
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
    5bc4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5bc6:	687b      	ldr	r3, [r7, #4]
    5bc8:	683a      	ldr	r2, [r7, #0]
    5bca:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bcc:	bf00      	nop
    5bce:	370c      	adds	r7, #12
    5bd0:	46bd      	mov	sp, r7
    5bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd6:	4770      	bx	lr

00005bd8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5bd8:	b480      	push	{r7}
    5bda:	b083      	sub	sp, #12
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5be4:	4618      	mov	r0, r3
    5be6:	370c      	adds	r7, #12
    5be8:	46bd      	mov	sp, r7
    5bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bee:	4770      	bx	lr

00005bf0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5bf0:	b480      	push	{r7}
    5bf2:	b085      	sub	sp, #20
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	60f8      	str	r0, [r7, #12]
    5bf8:	60b9      	str	r1, [r7, #8]
    5bfa:	607a      	str	r2, [r7, #4]
	while (count--) {
    5bfc:	e007      	b.n	5c0e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	1c5a      	adds	r2, r3, #1
    5c02:	60fa      	str	r2, [r7, #12]
    5c04:	68ba      	ldr	r2, [r7, #8]
    5c06:	1c51      	adds	r1, r2, #1
    5c08:	60b9      	str	r1, [r7, #8]
    5c0a:	7812      	ldrb	r2, [r2, #0]
    5c0c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	1e5a      	subs	r2, r3, #1
    5c12:	607a      	str	r2, [r7, #4]
    5c14:	2b00      	cmp	r3, #0
    5c16:	d1f2      	bne.n	5bfe <_qspi_memcpy+0xe>
	}
}
    5c18:	bf00      	nop
    5c1a:	3714      	adds	r7, #20
    5c1c:	46bd      	mov	sp, r7
    5c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c22:	4770      	bx	lr

00005c24 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5c24:	b580      	push	{r7, lr}
    5c26:	b082      	sub	sp, #8
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5c2c:	4903      	ldr	r1, [pc, #12]	; (5c3c <_qspi_end_transfer+0x18>)
    5c2e:	6878      	ldr	r0, [r7, #4]
    5c30:	4b03      	ldr	r3, [pc, #12]	; (5c40 <_qspi_end_transfer+0x1c>)
    5c32:	4798      	blx	r3
}
    5c34:	bf00      	nop
    5c36:	3708      	adds	r7, #8
    5c38:	46bd      	mov	sp, r7
    5c3a:	bd80      	pop	{r7, pc}
    5c3c:	01000002 	.word	0x01000002
    5c40:	00005ae1 	.word	0x00005ae1

00005c44 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5c44:	b580      	push	{r7, lr}
    5c46:	b082      	sub	sp, #8
    5c48:	af00      	add	r7, sp, #0
    5c4a:	6078      	str	r0, [r7, #4]
    5c4c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5c4e:	687b      	ldr	r3, [r7, #4]
    5c50:	2b00      	cmp	r3, #0
    5c52:	d004      	beq.n	5c5e <_qspi_sync_init+0x1a>
    5c54:	683b      	ldr	r3, [r7, #0]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d001      	beq.n	5c5e <_qspi_sync_init+0x1a>
    5c5a:	2301      	movs	r3, #1
    5c5c:	e000      	b.n	5c60 <_qspi_sync_init+0x1c>
    5c5e:	2300      	movs	r3, #0
    5c60:	f003 0301 	and.w	r3, r3, #1
    5c64:	b2db      	uxtb	r3, r3
    5c66:	2240      	movs	r2, #64	; 0x40
    5c68:	490c      	ldr	r1, [pc, #48]	; (5c9c <_qspi_sync_init+0x58>)
    5c6a:	4618      	mov	r0, r3
    5c6c:	4b0c      	ldr	r3, [pc, #48]	; (5ca0 <_qspi_sync_init+0x5c>)
    5c6e:	4798      	blx	r3
	dev->prvt = hw;
    5c70:	687b      	ldr	r3, [r7, #4]
    5c72:	683a      	ldr	r2, [r7, #0]
    5c74:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5c76:	687b      	ldr	r3, [r7, #4]
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	2101      	movs	r1, #1
    5c7c:	4618      	mov	r0, r3
    5c7e:	4b09      	ldr	r3, [pc, #36]	; (5ca4 <_qspi_sync_init+0x60>)
    5c80:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5c82:	4909      	ldr	r1, [pc, #36]	; (5ca8 <_qspi_sync_init+0x64>)
    5c84:	6838      	ldr	r0, [r7, #0]
    5c86:	4b09      	ldr	r3, [pc, #36]	; (5cac <_qspi_sync_init+0x68>)
    5c88:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5c8a:	4909      	ldr	r1, [pc, #36]	; (5cb0 <_qspi_sync_init+0x6c>)
    5c8c:	6838      	ldr	r0, [r7, #0]
    5c8e:	4b09      	ldr	r3, [pc, #36]	; (5cb4 <_qspi_sync_init+0x70>)
    5c90:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5c92:	2300      	movs	r3, #0
}
    5c94:	4618      	mov	r0, r3
    5c96:	3708      	adds	r7, #8
    5c98:	46bd      	mov	sp, r7
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	00010fc0 	.word	0x00010fc0
    5ca0:	00003c61 	.word	0x00003c61
    5ca4:	00005ae1 	.word	0x00005ae1
    5ca8:	06000011 	.word	0x06000011
    5cac:	00005afd 	.word	0x00005afd
    5cb0:	00241300 	.word	0x00241300
    5cb4:	00005b19 	.word	0x00005b19

00005cb8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b082      	sub	sp, #8
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	681b      	ldr	r3, [r3, #0]
    5cc4:	2102      	movs	r1, #2
    5cc6:	4618      	mov	r0, r3
    5cc8:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <_qspi_sync_enable+0x20>)
    5cca:	4798      	blx	r3
	return ERR_NONE;
    5ccc:	2300      	movs	r3, #0
}
    5cce:	4618      	mov	r0, r3
    5cd0:	3708      	adds	r7, #8
    5cd2:	46bd      	mov	sp, r7
    5cd4:	bd80      	pop	{r7, pc}
    5cd6:	bf00      	nop
    5cd8:	00005ae1 	.word	0x00005ae1

00005cdc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5cdc:	b580      	push	{r7, lr}
    5cde:	b082      	sub	sp, #8
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	681b      	ldr	r3, [r3, #0]
    5ce8:	2100      	movs	r1, #0
    5cea:	4618      	mov	r0, r3
    5cec:	4b03      	ldr	r3, [pc, #12]	; (5cfc <_qspi_sync_disable+0x20>)
    5cee:	4798      	blx	r3
	return ERR_NONE;
    5cf0:	2300      	movs	r3, #0
}
    5cf2:	4618      	mov	r0, r3
    5cf4:	3708      	adds	r7, #8
    5cf6:	46bd      	mov	sp, r7
    5cf8:	bd80      	pop	{r7, pc}
    5cfa:	bf00      	nop
    5cfc:	00005ae1 	.word	0x00005ae1

00005d00 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b084      	sub	sp, #16
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
    5d08:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	681b      	ldr	r3, [r3, #0]
    5d0e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5d10:	683b      	ldr	r3, [r7, #0]
    5d12:	781b      	ldrb	r3, [r3, #0]
    5d14:	f003 0320 	and.w	r3, r3, #32
    5d18:	b2db      	uxtb	r3, r3
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d005      	beq.n	5d2a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5d1e:	683b      	ldr	r3, [r7, #0]
    5d20:	689b      	ldr	r3, [r3, #8]
    5d22:	4619      	mov	r1, r3
    5d24:	68f8      	ldr	r0, [r7, #12]
    5d26:	4b13      	ldr	r3, [pc, #76]	; (5d74 <_qspi_sync_command_set_ifr+0x74>)
    5d28:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5d2a:	683b      	ldr	r3, [r7, #0]
    5d2c:	781b      	ldrb	r3, [r3, #0]
    5d2e:	f003 0310 	and.w	r3, r3, #16
    5d32:	b2db      	uxtb	r3, r3
    5d34:	2b00      	cmp	r3, #0
    5d36:	d005      	beq.n	5d44 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5d38:	683b      	ldr	r3, [r7, #0]
    5d3a:	791b      	ldrb	r3, [r3, #4]
    5d3c:	4619      	mov	r1, r3
    5d3e:	68f8      	ldr	r0, [r7, #12]
    5d40:	4b0d      	ldr	r3, [pc, #52]	; (5d78 <_qspi_sync_command_set_ifr+0x78>)
    5d42:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5d44:	683b      	ldr	r3, [r7, #0]
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5d4c:	b2db      	uxtb	r3, r3
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d005      	beq.n	5d5e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5d52:	683b      	ldr	r3, [r7, #0]
    5d54:	795b      	ldrb	r3, [r3, #5]
    5d56:	4619      	mov	r1, r3
    5d58:	68f8      	ldr	r0, [r7, #12]
    5d5a:	4b08      	ldr	r3, [pc, #32]	; (5d7c <_qspi_sync_command_set_ifr+0x7c>)
    5d5c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5d5e:	683b      	ldr	r3, [r7, #0]
    5d60:	681b      	ldr	r3, [r3, #0]
    5d62:	4619      	mov	r1, r3
    5d64:	68f8      	ldr	r0, [r7, #12]
    5d66:	4b06      	ldr	r3, [pc, #24]	; (5d80 <_qspi_sync_command_set_ifr+0x80>)
    5d68:	4798      	blx	r3
}
    5d6a:	bf00      	nop
    5d6c:	3710      	adds	r7, #16
    5d6e:	46bd      	mov	sp, r7
    5d70:	bd80      	pop	{r7, pc}
    5d72:	bf00      	nop
    5d74:	00005b35 	.word	0x00005b35
    5d78:	00005b51 	.word	0x00005b51
    5d7c:	00005b85 	.word	0x00005b85
    5d80:	00005bbd 	.word	0x00005bbd

00005d84 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5d84:	b580      	push	{r7, lr}
    5d86:	b084      	sub	sp, #16
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5d8e:	687b      	ldr	r3, [r7, #4]
    5d90:	681b      	ldr	r3, [r3, #0]
    5d92:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5d94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5d98:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5d9a:	683b      	ldr	r3, [r7, #0]
    5d9c:	781b      	ldrb	r3, [r3, #0]
    5d9e:	f003 0320 	and.w	r3, r3, #32
    5da2:	b2db      	uxtb	r3, r3
    5da4:	2b00      	cmp	r3, #0
    5da6:	d004      	beq.n	5db2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5da8:	683b      	ldr	r3, [r7, #0]
    5daa:	689b      	ldr	r3, [r3, #8]
    5dac:	68fa      	ldr	r2, [r7, #12]
    5dae:	4413      	add	r3, r2
    5db0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5db2:	68b8      	ldr	r0, [r7, #8]
    5db4:	4b18      	ldr	r3, [pc, #96]	; (5e18 <_qspi_sync_run_transfer+0x94>)
    5db6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5db8:	683b      	ldr	r3, [r7, #0]
    5dba:	691b      	ldr	r3, [r3, #16]
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d103      	bne.n	5dc8 <_qspi_sync_run_transfer+0x44>
    5dc0:	683b      	ldr	r3, [r7, #0]
    5dc2:	695b      	ldr	r3, [r3, #20]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d001      	beq.n	5dcc <_qspi_sync_run_transfer+0x48>
    5dc8:	2301      	movs	r3, #1
    5dca:	e000      	b.n	5dce <_qspi_sync_run_transfer+0x4a>
    5dcc:	2300      	movs	r3, #0
    5dce:	f003 0301 	and.w	r3, r3, #1
    5dd2:	b2db      	uxtb	r3, r3
    5dd4:	2282      	movs	r2, #130	; 0x82
    5dd6:	4911      	ldr	r1, [pc, #68]	; (5e1c <_qspi_sync_run_transfer+0x98>)
    5dd8:	4618      	mov	r0, r3
    5dda:	4b11      	ldr	r3, [pc, #68]	; (5e20 <_qspi_sync_run_transfer+0x9c>)
    5ddc:	4798      	blx	r3

	if (cmd->tx_buf) {
    5dde:	683b      	ldr	r3, [r7, #0]
    5de0:	691b      	ldr	r3, [r3, #16]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d008      	beq.n	5df8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5de6:	683b      	ldr	r3, [r7, #0]
    5de8:	6919      	ldr	r1, [r3, #16]
    5dea:	683b      	ldr	r3, [r7, #0]
    5dec:	68db      	ldr	r3, [r3, #12]
    5dee:	461a      	mov	r2, r3
    5df0:	68f8      	ldr	r0, [r7, #12]
    5df2:	4b0c      	ldr	r3, [pc, #48]	; (5e24 <_qspi_sync_run_transfer+0xa0>)
    5df4:	4798      	blx	r3
    5df6:	e007      	b.n	5e08 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5df8:	683b      	ldr	r3, [r7, #0]
    5dfa:	6958      	ldr	r0, [r3, #20]
    5dfc:	683b      	ldr	r3, [r7, #0]
    5dfe:	68db      	ldr	r3, [r3, #12]
    5e00:	461a      	mov	r2, r3
    5e02:	68f9      	ldr	r1, [r7, #12]
    5e04:	4b07      	ldr	r3, [pc, #28]	; (5e24 <_qspi_sync_run_transfer+0xa0>)
    5e06:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5e08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e0c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5e10:	bf00      	nop
    5e12:	3710      	adds	r7, #16
    5e14:	46bd      	mov	sp, r7
    5e16:	bd80      	pop	{r7, pc}
    5e18:	00005bd9 	.word	0x00005bd9
    5e1c:	00010fc0 	.word	0x00010fc0
    5e20:	00003c61 	.word	0x00003c61
    5e24:	00005bf1 	.word	0x00005bf1

00005e28 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5e28:	b580      	push	{r7, lr}
    5e2a:	b082      	sub	sp, #8
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	6078      	str	r0, [r7, #4]
    5e30:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5e32:	6839      	ldr	r1, [r7, #0]
    5e34:	6878      	ldr	r0, [r7, #4]
    5e36:	4b14      	ldr	r3, [pc, #80]	; (5e88 <_qspi_sync_serial_run_command+0x60>)
    5e38:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5e3a:	683b      	ldr	r3, [r7, #0]
    5e3c:	781b      	ldrb	r3, [r3, #0]
    5e3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5e42:	b2db      	uxtb	r3, r3
    5e44:	2b00      	cmp	r3, #0
    5e46:	d003      	beq.n	5e50 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5e48:	6839      	ldr	r1, [r7, #0]
    5e4a:	6878      	ldr	r0, [r7, #4]
    5e4c:	4b0f      	ldr	r3, [pc, #60]	; (5e8c <_qspi_sync_serial_run_command+0x64>)
    5e4e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	681b      	ldr	r3, [r3, #0]
    5e54:	4618      	mov	r0, r3
    5e56:	4b0e      	ldr	r3, [pc, #56]	; (5e90 <_qspi_sync_serial_run_command+0x68>)
    5e58:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5e5a:	bf00      	nop
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	681b      	ldr	r3, [r3, #0]
    5e60:	4618      	mov	r0, r3
    5e62:	4b0c      	ldr	r3, [pc, #48]	; (5e94 <_qspi_sync_serial_run_command+0x6c>)
    5e64:	4798      	blx	r3
    5e66:	4603      	mov	r3, r0
    5e68:	f083 0301 	eor.w	r3, r3, #1
    5e6c:	b2db      	uxtb	r3, r3
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d1f4      	bne.n	5e5c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	681b      	ldr	r3, [r3, #0]
    5e76:	4618      	mov	r0, r3
    5e78:	4b07      	ldr	r3, [pc, #28]	; (5e98 <_qspi_sync_serial_run_command+0x70>)
    5e7a:	4798      	blx	r3
	return ERR_NONE;
    5e7c:	2300      	movs	r3, #0
}
    5e7e:	4618      	mov	r0, r3
    5e80:	3708      	adds	r7, #8
    5e82:	46bd      	mov	sp, r7
    5e84:	bd80      	pop	{r7, pc}
    5e86:	bf00      	nop
    5e88:	00005d01 	.word	0x00005d01
    5e8c:	00005d85 	.word	0x00005d85
    5e90:	00005c25 	.word	0x00005c25
    5e94:	00005a9d 	.word	0x00005a9d
    5e98:	00005ac5 	.word	0x00005ac5

00005e9c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5e9c:	b480      	push	{r7}
    5e9e:	b083      	sub	sp, #12
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	6078      	str	r0, [r7, #4]
    5ea4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ea6:	bf00      	nop
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	691a      	ldr	r2, [r3, #16]
    5eac:	683b      	ldr	r3, [r7, #0]
    5eae:	4013      	ands	r3, r2
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	d1f9      	bne.n	5ea8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5eb4:	bf00      	nop
    5eb6:	370c      	adds	r7, #12
    5eb8:	46bd      	mov	sp, r7
    5eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ebe:	4770      	bx	lr

00005ec0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5ec0:	b480      	push	{r7}
    5ec2:	b083      	sub	sp, #12
    5ec4:	af00      	add	r7, sp, #0
    5ec6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ece:	819a      	strh	r2, [r3, #12]
}
    5ed0:	bf00      	nop
    5ed2:	370c      	adds	r7, #12
    5ed4:	46bd      	mov	sp, r7
    5ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eda:	4770      	bx	lr

00005edc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5edc:	b480      	push	{r7}
    5ede:	b083      	sub	sp, #12
    5ee0:	af00      	add	r7, sp, #0
    5ee2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5eea:	819a      	strh	r2, [r3, #12]
}
    5eec:	bf00      	nop
    5eee:	370c      	adds	r7, #12
    5ef0:	46bd      	mov	sp, r7
    5ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ef6:	4770      	bx	lr

00005ef8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5ef8:	b480      	push	{r7}
    5efa:	b083      	sub	sp, #12
    5efc:	af00      	add	r7, sp, #0
    5efe:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	899b      	ldrh	r3, [r3, #12]
    5f04:	b29b      	uxth	r3, r3
}
    5f06:	4618      	mov	r0, r3
    5f08:	370c      	adds	r7, #12
    5f0a:	46bd      	mov	sp, r7
    5f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f10:	4770      	bx	lr

00005f12 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5f12:	b480      	push	{r7}
    5f14:	b083      	sub	sp, #12
    5f16:	af00      	add	r7, sp, #0
    5f18:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	895b      	ldrh	r3, [r3, #10]
    5f1e:	b29b      	uxth	r3, r3
}
    5f20:	4618      	mov	r0, r3
    5f22:	370c      	adds	r7, #12
    5f24:	46bd      	mov	sp, r7
    5f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f2a:	4770      	bx	lr

00005f2c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b082      	sub	sp, #8
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	881b      	ldrh	r3, [r3, #0]
    5f38:	b29b      	uxth	r3, r3
    5f3a:	f043 0301 	orr.w	r3, r3, #1
    5f3e:	b29a      	uxth	r2, r3
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5f44:	2101      	movs	r1, #1
    5f46:	6878      	ldr	r0, [r7, #4]
    5f48:	4b02      	ldr	r3, [pc, #8]	; (5f54 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5f4a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5f4c:	bf00      	nop
    5f4e:	3708      	adds	r7, #8
    5f50:	46bd      	mov	sp, r7
    5f52:	bd80      	pop	{r7, pc}
    5f54:	00005e9d 	.word	0x00005e9d

00005f58 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b084      	sub	sp, #16
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5f60:	f248 0103 	movw	r1, #32771	; 0x8003
    5f64:	6878      	ldr	r0, [r7, #4]
    5f66:	4b0a      	ldr	r3, [pc, #40]	; (5f90 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5f68:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	881b      	ldrh	r3, [r3, #0]
    5f6e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5f70:	89fb      	ldrh	r3, [r7, #14]
    5f72:	085b      	lsrs	r3, r3, #1
    5f74:	b29b      	uxth	r3, r3
    5f76:	f003 0301 	and.w	r3, r3, #1
    5f7a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5f7c:	89fb      	ldrh	r3, [r7, #14]
    5f7e:	2b00      	cmp	r3, #0
    5f80:	bf14      	ite	ne
    5f82:	2301      	movne	r3, #1
    5f84:	2300      	moveq	r3, #0
    5f86:	b2db      	uxtb	r3, r3
}
    5f88:	4618      	mov	r0, r3
    5f8a:	3710      	adds	r7, #16
    5f8c:	46bd      	mov	sp, r7
    5f8e:	bd80      	pop	{r7, pc}
    5f90:	00005e9d 	.word	0x00005e9d

00005f94 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b082      	sub	sp, #8
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	881b      	ldrh	r3, [r3, #0]
    5fa0:	b29b      	uxth	r3, r3
    5fa2:	f023 0302 	bic.w	r3, r3, #2
    5fa6:	b29a      	uxth	r2, r3
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5fac:	f248 0103 	movw	r1, #32771	; 0x8003
    5fb0:	6878      	ldr	r0, [r7, #4]
    5fb2:	4b03      	ldr	r3, [pc, #12]	; (5fc0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5fb4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5fb6:	bf00      	nop
    5fb8:	3708      	adds	r7, #8
    5fba:	46bd      	mov	sp, r7
    5fbc:	bd80      	pop	{r7, pc}
    5fbe:	bf00      	nop
    5fc0:	00005e9d 	.word	0x00005e9d

00005fc4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5fc4:	b580      	push	{r7, lr}
    5fc6:	b082      	sub	sp, #8
    5fc8:	af00      	add	r7, sp, #0
    5fca:	6078      	str	r0, [r7, #4]
    5fcc:	460b      	mov	r3, r1
    5fce:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	887a      	ldrh	r2, [r7, #2]
    5fd4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5fd6:	f248 0103 	movw	r1, #32771	; 0x8003
    5fda:	6878      	ldr	r0, [r7, #4]
    5fdc:	4b02      	ldr	r3, [pc, #8]	; (5fe8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5fde:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5fe0:	bf00      	nop
    5fe2:	3708      	adds	r7, #8
    5fe4:	46bd      	mov	sp, r7
    5fe6:	bd80      	pop	{r7, pc}
    5fe8:	00005e9d 	.word	0x00005e9d

00005fec <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5fec:	b480      	push	{r7}
    5fee:	b083      	sub	sp, #12
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
    5ff4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	683a      	ldr	r2, [r7, #0]
    5ffa:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ffc:	bf00      	nop
    5ffe:	370c      	adds	r7, #12
    6000:	46bd      	mov	sp, r7
    6002:	f85d 7b04 	ldr.w	r7, [sp], #4
    6006:	4770      	bx	lr

00006008 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	2b00      	cmp	r3, #0
    6014:	d005      	beq.n	6022 <_calendar_init+0x1a>
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	2b00      	cmp	r3, #0
    601c:	d001      	beq.n	6022 <_calendar_init+0x1a>
    601e:	2301      	movs	r3, #1
    6020:	e000      	b.n	6024 <_calendar_init+0x1c>
    6022:	2300      	movs	r3, #0
    6024:	f003 0301 	and.w	r3, r3, #1
    6028:	b2db      	uxtb	r3, r3
    602a:	222f      	movs	r2, #47	; 0x2f
    602c:	491b      	ldr	r1, [pc, #108]	; (609c <_calendar_init+0x94>)
    602e:	4618      	mov	r0, r3
    6030:	4b1b      	ldr	r3, [pc, #108]	; (60a0 <_calendar_init+0x98>)
    6032:	4798      	blx	r3

	_rtc_dev = dev;
    6034:	4a1b      	ldr	r2, [pc, #108]	; (60a4 <_calendar_init+0x9c>)
    6036:	687b      	ldr	r3, [r7, #4]
    6038:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    603a:	687b      	ldr	r3, [r7, #4]
    603c:	681b      	ldr	r3, [r3, #0]
    603e:	4618      	mov	r0, r3
    6040:	4b19      	ldr	r3, [pc, #100]	; (60a8 <_calendar_init+0xa0>)
    6042:	4798      	blx	r3
    6044:	4603      	mov	r3, r0
    6046:	2b00      	cmp	r3, #0
    6048:	d00a      	beq.n	6060 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	681b      	ldr	r3, [r3, #0]
    604e:	4618      	mov	r0, r3
    6050:	4b16      	ldr	r3, [pc, #88]	; (60ac <_calendar_init+0xa4>)
    6052:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	681b      	ldr	r3, [r3, #0]
    6058:	2102      	movs	r1, #2
    605a:	4618      	mov	r0, r3
    605c:	4b14      	ldr	r3, [pc, #80]	; (60b0 <_calendar_init+0xa8>)
    605e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	681b      	ldr	r3, [r3, #0]
    6064:	4618      	mov	r0, r3
    6066:	4b13      	ldr	r3, [pc, #76]	; (60b4 <_calendar_init+0xac>)
    6068:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	2101      	movs	r1, #1
    6070:	4618      	mov	r0, r3
    6072:	4b0f      	ldr	r3, [pc, #60]	; (60b0 <_calendar_init+0xa8>)
    6074:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    6076:	687b      	ldr	r3, [r7, #4]
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    607e:	4618      	mov	r0, r3
    6080:	4b0d      	ldr	r3, [pc, #52]	; (60b8 <_calendar_init+0xb0>)
    6082:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6088:	2100      	movs	r1, #0
    608a:	4618      	mov	r0, r3
    608c:	4b0b      	ldr	r3, [pc, #44]	; (60bc <_calendar_init+0xb4>)
    608e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6090:	2300      	movs	r3, #0
}
    6092:	4618      	mov	r0, r3
    6094:	3708      	adds	r7, #8
    6096:	46bd      	mov	sp, r7
    6098:	bd80      	pop	{r7, pc}
    609a:	bf00      	nop
    609c:	00010fd8 	.word	0x00010fd8
    60a0:	00003c61 	.word	0x00003c61
    60a4:	20000c3c 	.word	0x20000c3c
    60a8:	00005f59 	.word	0x00005f59
    60ac:	00005f95 	.word	0x00005f95
    60b0:	00005e9d 	.word	0x00005e9d
    60b4:	00005f2d 	.word	0x00005f2d
    60b8:	00005fc5 	.word	0x00005fc5
    60bc:	00005fed 	.word	0x00005fed

000060c0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b084      	sub	sp, #16
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	681b      	ldr	r3, [r3, #0]
    60cc:	4618      	mov	r0, r3
    60ce:	4b19      	ldr	r3, [pc, #100]	; (6134 <_rtc_interrupt_handler+0x74>)
    60d0:	4798      	blx	r3
    60d2:	4603      	mov	r3, r0
    60d4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	681b      	ldr	r3, [r3, #0]
    60da:	4618      	mov	r0, r3
    60dc:	4b16      	ldr	r3, [pc, #88]	; (6138 <_rtc_interrupt_handler+0x78>)
    60de:	4798      	blx	r3
    60e0:	4603      	mov	r3, r0
    60e2:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    60e4:	89fa      	ldrh	r2, [r7, #14]
    60e6:	89bb      	ldrh	r3, [r7, #12]
    60e8:	4013      	ands	r3, r2
    60ea:	b29b      	uxth	r3, r3
    60ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
    60f0:	2b00      	cmp	r3, #0
    60f2:	d009      	beq.n	6108 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	685b      	ldr	r3, [r3, #4]
    60f8:	6878      	ldr	r0, [r7, #4]
    60fa:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	681b      	ldr	r3, [r3, #0]
    6100:	4618      	mov	r0, r3
    6102:	4b0e      	ldr	r3, [pc, #56]	; (613c <_rtc_interrupt_handler+0x7c>)
    6104:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6106:	e010      	b.n	612a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6108:	89fa      	ldrh	r2, [r7, #14]
    610a:	89bb      	ldrh	r3, [r7, #12]
    610c:	4013      	ands	r3, r2
    610e:	b29b      	uxth	r3, r3
    6110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6114:	2b00      	cmp	r3, #0
    6116:	d008      	beq.n	612a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	689b      	ldr	r3, [r3, #8]
    611c:	6878      	ldr	r0, [r7, #4]
    611e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	4618      	mov	r0, r3
    6126:	4b06      	ldr	r3, [pc, #24]	; (6140 <_rtc_interrupt_handler+0x80>)
    6128:	4798      	blx	r3
}
    612a:	bf00      	nop
    612c:	3710      	adds	r7, #16
    612e:	46bd      	mov	sp, r7
    6130:	bd80      	pop	{r7, pc}
    6132:	bf00      	nop
    6134:	00005ef9 	.word	0x00005ef9
    6138:	00005f13 	.word	0x00005f13
    613c:	00005ec1 	.word	0x00005ec1
    6140:	00005edd 	.word	0x00005edd

00006144 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6144:	b580      	push	{r7, lr}
    6146:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6148:	4b03      	ldr	r3, [pc, #12]	; (6158 <RTC_Handler+0x14>)
    614a:	681b      	ldr	r3, [r3, #0]
    614c:	4618      	mov	r0, r3
    614e:	4b03      	ldr	r3, [pc, #12]	; (615c <RTC_Handler+0x18>)
    6150:	4798      	blx	r3
}
    6152:	bf00      	nop
    6154:	bd80      	pop	{r7, pc}
    6156:	bf00      	nop
    6158:	20000c3c 	.word	0x20000c3c
    615c:	000060c1 	.word	0x000060c1

00006160 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6160:	b480      	push	{r7}
    6162:	b083      	sub	sp, #12
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
    6168:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    616a:	bf00      	nop
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	69da      	ldr	r2, [r3, #28]
    6170:	683b      	ldr	r3, [r7, #0]
    6172:	4013      	ands	r3, r2
    6174:	2b00      	cmp	r3, #0
    6176:	d1f9      	bne.n	616c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6178:	bf00      	nop
    617a:	370c      	adds	r7, #12
    617c:	46bd      	mov	sp, r7
    617e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6182:	4770      	bx	lr

00006184 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6184:	b480      	push	{r7}
    6186:	b083      	sub	sp, #12
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
    618c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	69da      	ldr	r2, [r3, #28]
    6192:	683b      	ldr	r3, [r7, #0]
    6194:	4013      	ands	r3, r2
    6196:	2b00      	cmp	r3, #0
    6198:	bf14      	ite	ne
    619a:	2301      	movne	r3, #1
    619c:	2300      	moveq	r3, #0
    619e:	b2db      	uxtb	r3, r3
}
    61a0:	4618      	mov	r0, r3
    61a2:	370c      	adds	r7, #12
    61a4:	46bd      	mov	sp, r7
    61a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61aa:	4770      	bx	lr

000061ac <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    61ac:	b480      	push	{r7}
    61ae:	b083      	sub	sp, #12
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
    61b4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61b6:	bf00      	nop
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	69da      	ldr	r2, [r3, #28]
    61bc:	683b      	ldr	r3, [r7, #0]
    61be:	4013      	ands	r3, r2
    61c0:	2b00      	cmp	r3, #0
    61c2:	d1f9      	bne.n	61b8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    61c4:	bf00      	nop
    61c6:	370c      	adds	r7, #12
    61c8:	46bd      	mov	sp, r7
    61ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ce:	4770      	bx	lr

000061d0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    61d0:	b480      	push	{r7}
    61d2:	b083      	sub	sp, #12
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
    61d8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	69da      	ldr	r2, [r3, #28]
    61de:	683b      	ldr	r3, [r7, #0]
    61e0:	4013      	ands	r3, r2
    61e2:	2b00      	cmp	r3, #0
    61e4:	bf14      	ite	ne
    61e6:	2301      	movne	r3, #1
    61e8:	2300      	moveq	r3, #0
    61ea:	b2db      	uxtb	r3, r3
}
    61ec:	4618      	mov	r0, r3
    61ee:	370c      	adds	r7, #12
    61f0:	46bd      	mov	sp, r7
    61f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    61f6:	4770      	bx	lr

000061f8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    61f8:	b480      	push	{r7}
    61fa:	b083      	sub	sp, #12
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	2201      	movs	r2, #1
    6204:	761a      	strb	r2, [r3, #24]
}
    6206:	bf00      	nop
    6208:	370c      	adds	r7, #12
    620a:	46bd      	mov	sp, r7
    620c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6210:	4770      	bx	lr

00006212 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6212:	b480      	push	{r7}
    6214:	b083      	sub	sp, #12
    6216:	af00      	add	r7, sp, #0
    6218:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	2202      	movs	r2, #2
    621e:	761a      	strb	r2, [r3, #24]
}
    6220:	bf00      	nop
    6222:	370c      	adds	r7, #12
    6224:	46bd      	mov	sp, r7
    6226:	f85d 7b04 	ldr.w	r7, [sp], #4
    622a:	4770      	bx	lr

0000622c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    622c:	b480      	push	{r7}
    622e:	b083      	sub	sp, #12
    6230:	af00      	add	r7, sp, #0
    6232:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6234:	687b      	ldr	r3, [r7, #4]
    6236:	7e1b      	ldrb	r3, [r3, #24]
    6238:	b2db      	uxtb	r3, r3
}
    623a:	4618      	mov	r0, r3
    623c:	370c      	adds	r7, #12
    623e:	46bd      	mov	sp, r7
    6240:	f85d 7b04 	ldr.w	r7, [sp], #4
    6244:	4770      	bx	lr

00006246 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6246:	b480      	push	{r7}
    6248:	b085      	sub	sp, #20
    624a:	af00      	add	r7, sp, #0
    624c:	6078      	str	r0, [r7, #4]
    624e:	460b      	mov	r3, r1
    6250:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	7e1b      	ldrb	r3, [r3, #24]
    6256:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6258:	7bfa      	ldrb	r2, [r7, #15]
    625a:	78fb      	ldrb	r3, [r7, #3]
    625c:	4013      	ands	r3, r2
    625e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6260:	7bfb      	ldrb	r3, [r7, #15]
}
    6262:	4618      	mov	r0, r3
    6264:	3714      	adds	r7, #20
    6266:	46bd      	mov	sp, r7
    6268:	f85d 7b04 	ldr.w	r7, [sp], #4
    626c:	4770      	bx	lr

0000626e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    626e:	b480      	push	{r7}
    6270:	b083      	sub	sp, #12
    6272:	af00      	add	r7, sp, #0
    6274:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	7e1b      	ldrb	r3, [r3, #24]
    627a:	b2db      	uxtb	r3, r3
}
    627c:	4618      	mov	r0, r3
    627e:	370c      	adds	r7, #12
    6280:	46bd      	mov	sp, r7
    6282:	f85d 7b04 	ldr.w	r7, [sp], #4
    6286:	4770      	bx	lr

00006288 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6288:	b480      	push	{r7}
    628a:	b083      	sub	sp, #12
    628c:	af00      	add	r7, sp, #0
    628e:	6078      	str	r0, [r7, #4]
    6290:	460b      	mov	r3, r1
    6292:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	78fa      	ldrb	r2, [r7, #3]
    6298:	761a      	strb	r2, [r3, #24]
}
    629a:	bf00      	nop
    629c:	370c      	adds	r7, #12
    629e:	46bd      	mov	sp, r7
    62a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    62a4:	4770      	bx	lr
	...

000062a8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    62a8:	b580      	push	{r7, lr}
    62aa:	b082      	sub	sp, #8
    62ac:	af00      	add	r7, sp, #0
    62ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	681b      	ldr	r3, [r3, #0]
    62b4:	f023 0202 	bic.w	r2, r3, #2
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    62bc:	2103      	movs	r1, #3
    62be:	6878      	ldr	r0, [r7, #4]
    62c0:	4b02      	ldr	r3, [pc, #8]	; (62cc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    62c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62c4:	bf00      	nop
    62c6:	3708      	adds	r7, #8
    62c8:	46bd      	mov	sp, r7
    62ca:	bd80      	pop	{r7, pc}
    62cc:	00006161 	.word	0x00006161

000062d0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    62d0:	b480      	push	{r7}
    62d2:	b085      	sub	sp, #20
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    62de:	68fb      	ldr	r3, [r7, #12]
    62e0:	0edb      	lsrs	r3, r3, #27
    62e2:	f003 0301 	and.w	r3, r3, #1
    62e6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    62e8:	68fb      	ldr	r3, [r7, #12]
    62ea:	2b00      	cmp	r3, #0
    62ec:	bf14      	ite	ne
    62ee:	2301      	movne	r3, #1
    62f0:	2300      	moveq	r3, #0
    62f2:	b2db      	uxtb	r3, r3
}
    62f4:	4618      	mov	r0, r3
    62f6:	3714      	adds	r7, #20
    62f8:	46bd      	mov	sp, r7
    62fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    62fe:	4770      	bx	lr

00006300 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6300:	b580      	push	{r7, lr}
    6302:	b084      	sub	sp, #16
    6304:	af00      	add	r7, sp, #0
    6306:	6078      	str	r0, [r7, #4]
    6308:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    630a:	2103      	movs	r1, #3
    630c:	6878      	ldr	r0, [r7, #4]
    630e:	4b07      	ldr	r3, [pc, #28]	; (632c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6310:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6318:	68fa      	ldr	r2, [r7, #12]
    631a:	683b      	ldr	r3, [r7, #0]
    631c:	4013      	ands	r3, r2
    631e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6320:	68fb      	ldr	r3, [r7, #12]
}
    6322:	4618      	mov	r0, r3
    6324:	3710      	adds	r7, #16
    6326:	46bd      	mov	sp, r7
    6328:	bd80      	pop	{r7, pc}
    632a:	bf00      	nop
    632c:	00006161 	.word	0x00006161

00006330 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6330:	b580      	push	{r7, lr}
    6332:	b082      	sub	sp, #8
    6334:	af00      	add	r7, sp, #0
    6336:	6078      	str	r0, [r7, #4]
    6338:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    633a:	687b      	ldr	r3, [r7, #4]
    633c:	683a      	ldr	r2, [r7, #0]
    633e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6340:	2103      	movs	r1, #3
    6342:	6878      	ldr	r0, [r7, #4]
    6344:	4b02      	ldr	r3, [pc, #8]	; (6350 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6346:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6348:	bf00      	nop
    634a:	3708      	adds	r7, #8
    634c:	46bd      	mov	sp, r7
    634e:	bd80      	pop	{r7, pc}
    6350:	00006161 	.word	0x00006161

00006354 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6354:	b580      	push	{r7, lr}
    6356:	b082      	sub	sp, #8
    6358:	af00      	add	r7, sp, #0
    635a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	681b      	ldr	r3, [r3, #0]
    6360:	f043 0202 	orr.w	r2, r3, #2
    6364:	687b      	ldr	r3, [r7, #4]
    6366:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6368:	2103      	movs	r1, #3
    636a:	6878      	ldr	r0, [r7, #4]
    636c:	4b02      	ldr	r3, [pc, #8]	; (6378 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    636e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6370:	bf00      	nop
    6372:	3708      	adds	r7, #8
    6374:	46bd      	mov	sp, r7
    6376:	bd80      	pop	{r7, pc}
    6378:	000061ad 	.word	0x000061ad

0000637c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    637c:	b580      	push	{r7, lr}
    637e:	b084      	sub	sp, #16
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6384:	2103      	movs	r1, #3
    6386:	6878      	ldr	r0, [r7, #4]
    6388:	4b09      	ldr	r3, [pc, #36]	; (63b0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    638a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	681b      	ldr	r3, [r3, #0]
    6390:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6392:	68fb      	ldr	r3, [r7, #12]
    6394:	085b      	lsrs	r3, r3, #1
    6396:	f003 0301 	and.w	r3, r3, #1
    639a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    639c:	68fb      	ldr	r3, [r7, #12]
    639e:	2b00      	cmp	r3, #0
    63a0:	bf14      	ite	ne
    63a2:	2301      	movne	r3, #1
    63a4:	2300      	moveq	r3, #0
    63a6:	b2db      	uxtb	r3, r3
}
    63a8:	4618      	mov	r0, r3
    63aa:	3710      	adds	r7, #16
    63ac:	46bd      	mov	sp, r7
    63ae:	bd80      	pop	{r7, pc}
    63b0:	000061ad 	.word	0x000061ad

000063b4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    63b4:	b580      	push	{r7, lr}
    63b6:	b082      	sub	sp, #8
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	681b      	ldr	r3, [r3, #0]
    63c0:	f023 0202 	bic.w	r2, r3, #2
    63c4:	687b      	ldr	r3, [r7, #4]
    63c6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    63c8:	2103      	movs	r1, #3
    63ca:	6878      	ldr	r0, [r7, #4]
    63cc:	4b02      	ldr	r3, [pc, #8]	; (63d8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    63ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63d0:	bf00      	nop
    63d2:	3708      	adds	r7, #8
    63d4:	46bd      	mov	sp, r7
    63d6:	bd80      	pop	{r7, pc}
    63d8:	000061ad 	.word	0x000061ad

000063dc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    63dc:	b580      	push	{r7, lr}
    63de:	b084      	sub	sp, #16
    63e0:	af00      	add	r7, sp, #0
    63e2:	6078      	str	r0, [r7, #4]
    63e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    63e6:	2103      	movs	r1, #3
    63e8:	6878      	ldr	r0, [r7, #4]
    63ea:	4b07      	ldr	r3, [pc, #28]	; (6408 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    63ec:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    63f4:	68fa      	ldr	r2, [r7, #12]
    63f6:	683b      	ldr	r3, [r7, #0]
    63f8:	4013      	ands	r3, r2
    63fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    63fc:	68fb      	ldr	r3, [r7, #12]
}
    63fe:	4618      	mov	r0, r3
    6400:	3710      	adds	r7, #16
    6402:	46bd      	mov	sp, r7
    6404:	bd80      	pop	{r7, pc}
    6406:	bf00      	nop
    6408:	000061ad 	.word	0x000061ad

0000640c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    640c:	b580      	push	{r7, lr}
    640e:	b082      	sub	sp, #8
    6410:	af00      	add	r7, sp, #0
    6412:	6078      	str	r0, [r7, #4]
    6414:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	683a      	ldr	r2, [r7, #0]
    641a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    641c:	2103      	movs	r1, #3
    641e:	6878      	ldr	r0, [r7, #4]
    6420:	4b02      	ldr	r3, [pc, #8]	; (642c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6422:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6424:	bf00      	nop
    6426:	3708      	adds	r7, #8
    6428:	46bd      	mov	sp, r7
    642a:	bd80      	pop	{r7, pc}
    642c:	000061ad 	.word	0x000061ad

00006430 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6430:	b580      	push	{r7, lr}
    6432:	b082      	sub	sp, #8
    6434:	af00      	add	r7, sp, #0
    6436:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	685b      	ldr	r3, [r3, #4]
    643c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6444:	2104      	movs	r1, #4
    6446:	6878      	ldr	r0, [r7, #4]
    6448:	4b02      	ldr	r3, [pc, #8]	; (6454 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    644a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    644c:	bf00      	nop
    644e:	3708      	adds	r7, #8
    6450:	46bd      	mov	sp, r7
    6452:	bd80      	pop	{r7, pc}
    6454:	00006161 	.word	0x00006161

00006458 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6458:	b580      	push	{r7, lr}
    645a:	b082      	sub	sp, #8
    645c:	af00      	add	r7, sp, #0
    645e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	685b      	ldr	r3, [r3, #4]
    6464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    646c:	2104      	movs	r1, #4
    646e:	6878      	ldr	r0, [r7, #4]
    6470:	4b02      	ldr	r3, [pc, #8]	; (647c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6472:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6474:	bf00      	nop
    6476:	3708      	adds	r7, #8
    6478:	46bd      	mov	sp, r7
    647a:	bd80      	pop	{r7, pc}
    647c:	00006161 	.word	0x00006161

00006480 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6480:	b580      	push	{r7, lr}
    6482:	b082      	sub	sp, #8
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6488:	687b      	ldr	r3, [r7, #4]
    648a:	685b      	ldr	r3, [r3, #4]
    648c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6494:	2104      	movs	r1, #4
    6496:	6878      	ldr	r0, [r7, #4]
    6498:	4b02      	ldr	r3, [pc, #8]	; (64a4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    649a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    649c:	bf00      	nop
    649e:	3708      	adds	r7, #8
    64a0:	46bd      	mov	sp, r7
    64a2:	bd80      	pop	{r7, pc}
    64a4:	00006161 	.word	0x00006161

000064a8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    64a8:	b580      	push	{r7, lr}
    64aa:	b082      	sub	sp, #8
    64ac:	af00      	add	r7, sp, #0
    64ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	685b      	ldr	r3, [r3, #4]
    64b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64bc:	2104      	movs	r1, #4
    64be:	6878      	ldr	r0, [r7, #4]
    64c0:	4b02      	ldr	r3, [pc, #8]	; (64cc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    64c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64c4:	bf00      	nop
    64c6:	3708      	adds	r7, #8
    64c8:	46bd      	mov	sp, r7
    64ca:	bd80      	pop	{r7, pc}
    64cc:	00006161 	.word	0x00006161

000064d0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b082      	sub	sp, #8
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
    64d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	685a      	ldr	r2, [r3, #4]
    64de:	683b      	ldr	r3, [r7, #0]
    64e0:	041b      	lsls	r3, r3, #16
    64e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    64e6:	431a      	orrs	r2, r3
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64ec:	2104      	movs	r1, #4
    64ee:	6878      	ldr	r0, [r7, #4]
    64f0:	4b02      	ldr	r3, [pc, #8]	; (64fc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    64f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64f4:	bf00      	nop
    64f6:	3708      	adds	r7, #8
    64f8:	46bd      	mov	sp, r7
    64fa:	bd80      	pop	{r7, pc}
    64fc:	00006161 	.word	0x00006161

00006500 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6500:	b580      	push	{r7, lr}
    6502:	b082      	sub	sp, #8
    6504:	af00      	add	r7, sp, #0
    6506:	6078      	str	r0, [r7, #4]
    6508:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	683a      	ldr	r2, [r7, #0]
    650e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6510:	2104      	movs	r1, #4
    6512:	6878      	ldr	r0, [r7, #4]
    6514:	4b02      	ldr	r3, [pc, #8]	; (6520 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6516:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6518:	bf00      	nop
    651a:	3708      	adds	r7, #8
    651c:	46bd      	mov	sp, r7
    651e:	bd80      	pop	{r7, pc}
    6520:	00006161 	.word	0x00006161

00006524 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6524:	b580      	push	{r7, lr}
    6526:	b082      	sub	sp, #8
    6528:	af00      	add	r7, sp, #0
    652a:	6078      	str	r0, [r7, #4]
    652c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	683a      	ldr	r2, [r7, #0]
    6532:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6534:	2117      	movs	r1, #23
    6536:	6878      	ldr	r0, [r7, #4]
    6538:	4b02      	ldr	r3, [pc, #8]	; (6544 <hri_sercomspi_write_CTRLB_reg+0x20>)
    653a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    653c:	bf00      	nop
    653e:	3708      	adds	r7, #8
    6540:	46bd      	mov	sp, r7
    6542:	bd80      	pop	{r7, pc}
    6544:	000061ad 	.word	0x000061ad

00006548 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6548:	b480      	push	{r7}
    654a:	b083      	sub	sp, #12
    654c:	af00      	add	r7, sp, #0
    654e:	6078      	str	r0, [r7, #4]
    6550:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6552:	687b      	ldr	r3, [r7, #4]
    6554:	683a      	ldr	r2, [r7, #0]
    6556:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6558:	bf00      	nop
    655a:	370c      	adds	r7, #12
    655c:	46bd      	mov	sp, r7
    655e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6562:	4770      	bx	lr

00006564 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6564:	b480      	push	{r7}
    6566:	b083      	sub	sp, #12
    6568:	af00      	add	r7, sp, #0
    656a:	6078      	str	r0, [r7, #4]
    656c:	460b      	mov	r3, r1
    656e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	78fa      	ldrb	r2, [r7, #3]
    6574:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6576:	bf00      	nop
    6578:	370c      	adds	r7, #12
    657a:	46bd      	mov	sp, r7
    657c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6580:	4770      	bx	lr
	...

00006584 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6584:	b580      	push	{r7, lr}
    6586:	b084      	sub	sp, #16
    6588:	af00      	add	r7, sp, #0
    658a:	6078      	str	r0, [r7, #4]
    658c:	460b      	mov	r3, r1
    658e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6594:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6596:	68fb      	ldr	r3, [r7, #12]
    6598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    659c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    659e:	78fb      	ldrb	r3, [r7, #3]
    65a0:	039b      	lsls	r3, r3, #14
    65a2:	461a      	mov	r2, r3
    65a4:	68fb      	ldr	r3, [r7, #12]
    65a6:	4313      	orrs	r3, r2
    65a8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    65aa:	687b      	ldr	r3, [r7, #4]
    65ac:	68fa      	ldr	r2, [r7, #12]
    65ae:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65b0:	2104      	movs	r1, #4
    65b2:	6878      	ldr	r0, [r7, #4]
    65b4:	4b02      	ldr	r3, [pc, #8]	; (65c0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    65b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65b8:	bf00      	nop
    65ba:	3710      	adds	r7, #16
    65bc:	46bd      	mov	sp, r7
    65be:	bd80      	pop	{r7, pc}
    65c0:	00006161 	.word	0x00006161

000065c4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    65c4:	b580      	push	{r7, lr}
    65c6:	b082      	sub	sp, #8
    65c8:	af00      	add	r7, sp, #0
    65ca:	6078      	str	r0, [r7, #4]
    65cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    65ce:	687b      	ldr	r3, [r7, #4]
    65d0:	683a      	ldr	r2, [r7, #0]
    65d2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65d4:	2104      	movs	r1, #4
    65d6:	6878      	ldr	r0, [r7, #4]
    65d8:	4b02      	ldr	r3, [pc, #8]	; (65e4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    65da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65dc:	bf00      	nop
    65de:	3708      	adds	r7, #8
    65e0:	46bd      	mov	sp, r7
    65e2:	bd80      	pop	{r7, pc}
    65e4:	00006161 	.word	0x00006161

000065e8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	b082      	sub	sp, #8
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65f0:	2104      	movs	r1, #4
    65f2:	6878      	ldr	r0, [r7, #4]
    65f4:	4b03      	ldr	r3, [pc, #12]	; (6604 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    65f6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    65fc:	4618      	mov	r0, r3
    65fe:	3708      	adds	r7, #8
    6600:	46bd      	mov	sp, r7
    6602:	bd80      	pop	{r7, pc}
    6604:	00006161 	.word	0x00006161

00006608 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6608:	b480      	push	{r7}
    660a:	b083      	sub	sp, #12
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
    6610:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	683a      	ldr	r2, [r7, #0]
    6616:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6618:	bf00      	nop
    661a:	370c      	adds	r7, #12
    661c:	46bd      	mov	sp, r7
    661e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6622:	4770      	bx	lr

00006624 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6624:	b580      	push	{r7, lr}
    6626:	b082      	sub	sp, #8
    6628:	af00      	add	r7, sp, #0
    662a:	6078      	str	r0, [r7, #4]
    662c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	683a      	ldr	r2, [r7, #0]
    6632:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6634:	2104      	movs	r1, #4
    6636:	6878      	ldr	r0, [r7, #4]
    6638:	4b02      	ldr	r3, [pc, #8]	; (6644 <hri_sercomi2cm_write_DATA_reg+0x20>)
    663a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    663c:	bf00      	nop
    663e:	3708      	adds	r7, #8
    6640:	46bd      	mov	sp, r7
    6642:	bd80      	pop	{r7, pc}
    6644:	00006161 	.word	0x00006161

00006648 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6648:	b580      	push	{r7, lr}
    664a:	b082      	sub	sp, #8
    664c:	af00      	add	r7, sp, #0
    664e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6650:	2104      	movs	r1, #4
    6652:	6878      	ldr	r0, [r7, #4]
    6654:	4b03      	ldr	r3, [pc, #12]	; (6664 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6656:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    665c:	4618      	mov	r0, r3
    665e:	3708      	adds	r7, #8
    6660:	46bd      	mov	sp, r7
    6662:	bd80      	pop	{r7, pc}
    6664:	00006161 	.word	0x00006161

00006668 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6668:	b480      	push	{r7}
    666a:	b083      	sub	sp, #12
    666c:	af00      	add	r7, sp, #0
    666e:	6078      	str	r0, [r7, #4]
    6670:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	683a      	ldr	r2, [r7, #0]
    6676:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6678:	bf00      	nop
    667a:	370c      	adds	r7, #12
    667c:	46bd      	mov	sp, r7
    667e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6682:	4770      	bx	lr

00006684 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6684:	b480      	push	{r7}
    6686:	b083      	sub	sp, #12
    6688:	af00      	add	r7, sp, #0
    668a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6690:	4618      	mov	r0, r3
    6692:	370c      	adds	r7, #12
    6694:	46bd      	mov	sp, r7
    6696:	f85d 7b04 	ldr.w	r7, [sp], #4
    669a:	4770      	bx	lr

0000669c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    669c:	b480      	push	{r7}
    669e:	b083      	sub	sp, #12
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
    66a4:	460b      	mov	r3, r1
    66a6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	78fa      	ldrb	r2, [r7, #3]
    66ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66b0:	bf00      	nop
    66b2:	370c      	adds	r7, #12
    66b4:	46bd      	mov	sp, r7
    66b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ba:	4770      	bx	lr

000066bc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    66bc:	b480      	push	{r7}
    66be:	b083      	sub	sp, #12
    66c0:	af00      	add	r7, sp, #0
    66c2:	6078      	str	r0, [r7, #4]
    66c4:	460b      	mov	r3, r1
    66c6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	887a      	ldrh	r2, [r7, #2]
    66cc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66ce:	bf00      	nop
    66d0:	370c      	adds	r7, #12
    66d2:	46bd      	mov	sp, r7
    66d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d8:	4770      	bx	lr
	...

000066dc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    66dc:	b580      	push	{r7, lr}
    66de:	b082      	sub	sp, #8
    66e0:	af00      	add	r7, sp, #0
    66e2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66e4:	2104      	movs	r1, #4
    66e6:	6878      	ldr	r0, [r7, #4]
    66e8:	4b04      	ldr	r3, [pc, #16]	; (66fc <hri_sercomi2cm_read_STATUS_reg+0x20>)
    66ea:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    66ec:	687b      	ldr	r3, [r7, #4]
    66ee:	8b5b      	ldrh	r3, [r3, #26]
    66f0:	b29b      	uxth	r3, r3
}
    66f2:	4618      	mov	r0, r3
    66f4:	3708      	adds	r7, #8
    66f6:	46bd      	mov	sp, r7
    66f8:	bd80      	pop	{r7, pc}
    66fa:	bf00      	nop
    66fc:	00006161 	.word	0x00006161

00006700 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6700:	b4b0      	push	{r4, r5, r7}
    6702:	b08d      	sub	sp, #52	; 0x34
    6704:	af00      	add	r7, sp, #0
    6706:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6708:	4b13      	ldr	r3, [pc, #76]	; (6758 <_sercom_get_hardware_index+0x58>)
    670a:	f107 040c 	add.w	r4, r7, #12
    670e:	461d      	mov	r5, r3
    6710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    671c:	2300      	movs	r3, #0
    671e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6720:	e010      	b.n	6744 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6724:	009b      	lsls	r3, r3, #2
    6726:	f107 0230 	add.w	r2, r7, #48	; 0x30
    672a:	4413      	add	r3, r2
    672c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6730:	461a      	mov	r2, r3
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	429a      	cmp	r2, r3
    6736:	d102      	bne.n	673e <_sercom_get_hardware_index+0x3e>
			return i;
    6738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    673a:	b2db      	uxtb	r3, r3
    673c:	e006      	b.n	674c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6740:	3301      	adds	r3, #1
    6742:	62fb      	str	r3, [r7, #44]	; 0x2c
    6744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6746:	2b07      	cmp	r3, #7
    6748:	d9eb      	bls.n	6722 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    674a:	2300      	movs	r3, #0
}
    674c:	4618      	mov	r0, r3
    674e:	3734      	adds	r7, #52	; 0x34
    6750:	46bd      	mov	sp, r7
    6752:	bcb0      	pop	{r4, r5, r7}
    6754:	4770      	bx	lr
    6756:	bf00      	nop
    6758:	0001100c 	.word	0x0001100c

0000675c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    675c:	b580      	push	{r7, lr}
    675e:	b084      	sub	sp, #16
    6760:	af00      	add	r7, sp, #0
    6762:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6764:	6878      	ldr	r0, [r7, #4]
    6766:	4b13      	ldr	r3, [pc, #76]	; (67b4 <_get_i2cm_index+0x58>)
    6768:	4798      	blx	r3
    676a:	4603      	mov	r3, r0
    676c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    676e:	2300      	movs	r3, #0
    6770:	73fb      	strb	r3, [r7, #15]
    6772:	e010      	b.n	6796 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6774:	7bfa      	ldrb	r2, [r7, #15]
    6776:	4910      	ldr	r1, [pc, #64]	; (67b8 <_get_i2cm_index+0x5c>)
    6778:	4613      	mov	r3, r2
    677a:	005b      	lsls	r3, r3, #1
    677c:	4413      	add	r3, r2
    677e:	00db      	lsls	r3, r3, #3
    6780:	440b      	add	r3, r1
    6782:	781b      	ldrb	r3, [r3, #0]
    6784:	7bba      	ldrb	r2, [r7, #14]
    6786:	429a      	cmp	r2, r3
    6788:	d102      	bne.n	6790 <_get_i2cm_index+0x34>
			return i;
    678a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    678e:	e00d      	b.n	67ac <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6790:	7bfb      	ldrb	r3, [r7, #15]
    6792:	3301      	adds	r3, #1
    6794:	73fb      	strb	r3, [r7, #15]
    6796:	7bfb      	ldrb	r3, [r7, #15]
    6798:	2b02      	cmp	r3, #2
    679a:	d9eb      	bls.n	6774 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    679c:	f240 32a6 	movw	r2, #934	; 0x3a6
    67a0:	4906      	ldr	r1, [pc, #24]	; (67bc <_get_i2cm_index+0x60>)
    67a2:	2000      	movs	r0, #0
    67a4:	4b06      	ldr	r3, [pc, #24]	; (67c0 <_get_i2cm_index+0x64>)
    67a6:	4798      	blx	r3
	return -1;
    67a8:	f04f 33ff 	mov.w	r3, #4294967295
}
    67ac:	4618      	mov	r0, r3
    67ae:	3710      	adds	r7, #16
    67b0:	46bd      	mov	sp, r7
    67b2:	bd80      	pop	{r7, pc}
    67b4:	00006701 	.word	0x00006701
    67b8:	2000001c 	.word	0x2000001c
    67bc:	00010ff0 	.word	0x00010ff0
    67c0:	00003c61 	.word	0x00003c61

000067c4 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    67c4:	b580      	push	{r7, lr}
    67c6:	b082      	sub	sp, #8
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    67cc:	2103      	movs	r1, #3
    67ce:	6878      	ldr	r0, [r7, #4]
    67d0:	4b02      	ldr	r3, [pc, #8]	; (67dc <_sercom_i2c_send_stop+0x18>)
    67d2:	4798      	blx	r3
}
    67d4:	bf00      	nop
    67d6:	3708      	adds	r7, #8
    67d8:	46bd      	mov	sp, r7
    67da:	bd80      	pop	{r7, pc}
    67dc:	000064d1 	.word	0x000064d1

000067e0 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    67e0:	b590      	push	{r4, r7, lr}
    67e2:	b087      	sub	sp, #28
    67e4:	af00      	add	r7, sp, #0
    67e6:	60f8      	str	r0, [r7, #12]
    67e8:	60b9      	str	r1, [r7, #8]
    67ea:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    67ec:	68f8      	ldr	r0, [r7, #12]
    67ee:	4b7d      	ldr	r3, [pc, #500]	; (69e4 <_sercom_i2c_sync_analyse_flags+0x204>)
    67f0:	4798      	blx	r3
    67f2:	4603      	mov	r3, r0
    67f4:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    67f6:	68f8      	ldr	r0, [r7, #12]
    67f8:	4b7b      	ldr	r3, [pc, #492]	; (69e8 <_sercom_i2c_sync_analyse_flags+0x208>)
    67fa:	4798      	blx	r3
    67fc:	4603      	mov	r3, r0
    67fe:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6800:	68bb      	ldr	r3, [r7, #8]
    6802:	f003 0301 	and.w	r3, r3, #1
    6806:	2b00      	cmp	r3, #0
    6808:	f000 8095 	beq.w	6936 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    680c:	8a7b      	ldrh	r3, [r7, #18]
    680e:	f003 0302 	and.w	r3, r3, #2
    6812:	2b00      	cmp	r3, #0
    6814:	d01d      	beq.n	6852 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6816:	68f8      	ldr	r0, [r7, #12]
    6818:	4b74      	ldr	r3, [pc, #464]	; (69ec <_sercom_i2c_sync_analyse_flags+0x20c>)
    681a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	885b      	ldrh	r3, [r3, #2]
    6820:	b29b      	uxth	r3, r3
    6822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6826:	b29a      	uxth	r2, r3
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    682c:	687b      	ldr	r3, [r7, #4]
    682e:	885b      	ldrh	r3, [r3, #2]
    6830:	b29b      	uxth	r3, r3
    6832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6836:	b29a      	uxth	r2, r3
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    683c:	8a7b      	ldrh	r3, [r7, #18]
    683e:	f003 0301 	and.w	r3, r3, #1
    6842:	2b00      	cmp	r3, #0
    6844:	d002      	beq.n	684c <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6846:	f06f 0304 	mvn.w	r3, #4
    684a:	e0c6      	b.n	69da <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    684c:	f06f 0303 	mvn.w	r3, #3
    6850:	e0c3      	b.n	69da <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6852:	8a7b      	ldrh	r3, [r7, #18]
    6854:	f003 0304 	and.w	r3, r3, #4
    6858:	2b00      	cmp	r3, #0
    685a:	d01f      	beq.n	689c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	685b      	ldr	r3, [r3, #4]
    6860:	2b00      	cmp	r3, #0
    6862:	dd07      	ble.n	6874 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6864:	687b      	ldr	r3, [r7, #4]
    6866:	885b      	ldrh	r3, [r3, #2]
    6868:	b29b      	uxth	r3, r3
    686a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    686e:	b29a      	uxth	r2, r3
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	885b      	ldrh	r3, [r3, #2]
    6878:	b29b      	uxth	r3, r3
    687a:	b21b      	sxth	r3, r3
    687c:	2b00      	cmp	r3, #0
    687e:	da02      	bge.n	6886 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6880:	68f8      	ldr	r0, [r7, #12]
    6882:	4b5b      	ldr	r3, [pc, #364]	; (69f0 <_sercom_i2c_sync_analyse_flags+0x210>)
    6884:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	885b      	ldrh	r3, [r3, #2]
    688a:	b29b      	uxth	r3, r3
    688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6890:	b29a      	uxth	r2, r3
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6896:	f06f 0301 	mvn.w	r3, #1
    689a:	e09e      	b.n	69da <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	885b      	ldrh	r3, [r3, #2]
    68a0:	b29b      	uxth	r3, r3
    68a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    68a6:	2b00      	cmp	r3, #0
    68a8:	d01c      	beq.n	68e4 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    68aa:	687b      	ldr	r3, [r7, #4]
    68ac:	881b      	ldrh	r3, [r3, #0]
    68ae:	121b      	asrs	r3, r3, #8
    68b0:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    68b2:	f003 0406 	and.w	r4, r3, #6
    68b6:	68f8      	ldr	r0, [r7, #12]
    68b8:	4b4e      	ldr	r3, [pc, #312]	; (69f4 <_sercom_i2c_sync_analyse_flags+0x214>)
    68ba:	4798      	blx	r3
    68bc:	4603      	mov	r3, r0
    68be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    68c2:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    68c4:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    68c8:	4619      	mov	r1, r3
    68ca:	68f8      	ldr	r0, [r7, #12]
    68cc:	4b4a      	ldr	r3, [pc, #296]	; (69f8 <_sercom_i2c_sync_analyse_flags+0x218>)
    68ce:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    68d0:	687b      	ldr	r3, [r7, #4]
    68d2:	885b      	ldrh	r3, [r3, #2]
    68d4:	b29b      	uxth	r3, r3
    68d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    68da:	b29a      	uxth	r2, r3
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    68e0:	2300      	movs	r3, #0
    68e2:	e07a      	b.n	69da <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    68e4:	687b      	ldr	r3, [r7, #4]
    68e6:	685b      	ldr	r3, [r3, #4]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d111      	bne.n	6910 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    68ec:	687b      	ldr	r3, [r7, #4]
    68ee:	885b      	ldrh	r3, [r3, #2]
    68f0:	b29b      	uxth	r3, r3
    68f2:	b21b      	sxth	r3, r3
    68f4:	2b00      	cmp	r3, #0
    68f6:	da02      	bge.n	68fe <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    68f8:	68f8      	ldr	r0, [r7, #12]
    68fa:	4b3d      	ldr	r3, [pc, #244]	; (69f0 <_sercom_i2c_sync_analyse_flags+0x210>)
    68fc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	885b      	ldrh	r3, [r3, #2]
    6902:	b29b      	uxth	r3, r3
    6904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6908:	b29a      	uxth	r2, r3
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	805a      	strh	r2, [r3, #2]
    690e:	e010      	b.n	6932 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	689b      	ldr	r3, [r3, #8]
    6914:	781b      	ldrb	r3, [r3, #0]
    6916:	4619      	mov	r1, r3
    6918:	68f8      	ldr	r0, [r7, #12]
    691a:	4b38      	ldr	r3, [pc, #224]	; (69fc <_sercom_i2c_sync_analyse_flags+0x21c>)
    691c:	4798      	blx	r3
				msg->buffer++;
    691e:	687b      	ldr	r3, [r7, #4]
    6920:	689b      	ldr	r3, [r3, #8]
    6922:	1c5a      	adds	r2, r3, #1
    6924:	687b      	ldr	r3, [r7, #4]
    6926:	609a      	str	r2, [r3, #8]
				msg->len--;
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	685b      	ldr	r3, [r3, #4]
    692c:	1e5a      	subs	r2, r3, #1
    692e:	687b      	ldr	r3, [r7, #4]
    6930:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6932:	2300      	movs	r3, #0
    6934:	e051      	b.n	69da <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6936:	68bb      	ldr	r3, [r7, #8]
    6938:	f003 0302 	and.w	r3, r3, #2
    693c:	2b00      	cmp	r3, #0
    693e:	d04b      	beq.n	69d8 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6940:	687b      	ldr	r3, [r7, #4]
    6942:	685b      	ldr	r3, [r3, #4]
    6944:	2b00      	cmp	r3, #0
    6946:	d041      	beq.n	69cc <_sercom_i2c_sync_analyse_flags+0x1ec>
    6948:	8a7b      	ldrh	r3, [r7, #18]
    694a:	f003 0304 	and.w	r3, r3, #4
    694e:	2b00      	cmp	r3, #0
    6950:	d13c      	bne.n	69cc <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	685b      	ldr	r3, [r3, #4]
    6956:	1e5a      	subs	r2, r3, #1
    6958:	687b      	ldr	r3, [r7, #4]
    695a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	685b      	ldr	r3, [r3, #4]
    6960:	2b00      	cmp	r3, #0
    6962:	d102      	bne.n	696a <_sercom_i2c_sync_analyse_flags+0x18a>
    6964:	697b      	ldr	r3, [r7, #20]
    6966:	2b00      	cmp	r3, #0
    6968:	d006      	beq.n	6978 <_sercom_i2c_sync_analyse_flags+0x198>
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	685b      	ldr	r3, [r3, #4]
    696e:	2b01      	cmp	r3, #1
    6970:	d105      	bne.n	697e <_sercom_i2c_sync_analyse_flags+0x19e>
    6972:	697b      	ldr	r3, [r7, #20]
    6974:	2b00      	cmp	r3, #0
    6976:	d002      	beq.n	697e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6978:	68f8      	ldr	r0, [r7, #12]
    697a:	4b21      	ldr	r3, [pc, #132]	; (6a00 <_sercom_i2c_sync_analyse_flags+0x220>)
    697c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    697e:	687b      	ldr	r3, [r7, #4]
    6980:	685b      	ldr	r3, [r3, #4]
    6982:	2b00      	cmp	r3, #0
    6984:	d113      	bne.n	69ae <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	885b      	ldrh	r3, [r3, #2]
    698a:	b29b      	uxth	r3, r3
    698c:	b21b      	sxth	r3, r3
    698e:	2b00      	cmp	r3, #0
    6990:	da05      	bge.n	699e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6992:	68f8      	ldr	r0, [r7, #12]
    6994:	4b1b      	ldr	r3, [pc, #108]	; (6a04 <_sercom_i2c_sync_analyse_flags+0x224>)
    6996:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6998:	68f8      	ldr	r0, [r7, #12]
    699a:	4b15      	ldr	r3, [pc, #84]	; (69f0 <_sercom_i2c_sync_analyse_flags+0x210>)
    699c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	885b      	ldrh	r3, [r3, #2]
    69a2:	b29b      	uxth	r3, r3
    69a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    69a8:	b29a      	uxth	r2, r3
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    69ae:	687b      	ldr	r3, [r7, #4]
    69b0:	689c      	ldr	r4, [r3, #8]
    69b2:	1c62      	adds	r2, r4, #1
    69b4:	687b      	ldr	r3, [r7, #4]
    69b6:	609a      	str	r2, [r3, #8]
    69b8:	68f8      	ldr	r0, [r7, #12]
    69ba:	4b13      	ldr	r3, [pc, #76]	; (6a08 <_sercom_i2c_sync_analyse_flags+0x228>)
    69bc:	4798      	blx	r3
    69be:	4603      	mov	r3, r0
    69c0:	b2db      	uxtb	r3, r3
    69c2:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    69c4:	68f8      	ldr	r0, [r7, #12]
    69c6:	4b11      	ldr	r3, [pc, #68]	; (6a0c <_sercom_i2c_sync_analyse_flags+0x22c>)
    69c8:	4798      	blx	r3
    69ca:	e005      	b.n	69d8 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    69cc:	68f8      	ldr	r0, [r7, #12]
    69ce:	4b0f      	ldr	r3, [pc, #60]	; (6a0c <_sercom_i2c_sync_analyse_flags+0x22c>)
    69d0:	4798      	blx	r3
			return I2C_NACK;
    69d2:	f06f 0301 	mvn.w	r3, #1
    69d6:	e000      	b.n	69da <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    69d8:	2300      	movs	r3, #0
}
    69da:	4618      	mov	r0, r3
    69dc:	371c      	adds	r7, #28
    69de:	46bd      	mov	sp, r7
    69e0:	bd90      	pop	{r4, r7, pc}
    69e2:	bf00      	nop
    69e4:	000062d1 	.word	0x000062d1
    69e8:	000066dd 	.word	0x000066dd
    69ec:	000061f9 	.word	0x000061f9
    69f0:	000067c5 	.word	0x000067c5
    69f4:	000065e9 	.word	0x000065e9
    69f8:	000065c5 	.word	0x000065c5
    69fc:	00006625 	.word	0x00006625
    6a00:	00006481 	.word	0x00006481
    6a04:	00006459 	.word	0x00006459
    6a08:	00006649 	.word	0x00006649
    6a0c:	00006213 	.word	0x00006213

00006a10 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6a10:	b580      	push	{r7, lr}
    6a12:	b082      	sub	sp, #8
    6a14:	af00      	add	r7, sp, #0
    6a16:	6078      	str	r0, [r7, #4]
    6a18:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6a1a:	687b      	ldr	r3, [r7, #4]
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	bf14      	ite	ne
    6a20:	2301      	movne	r3, #1
    6a22:	2300      	moveq	r3, #0
    6a24:	b2db      	uxtb	r3, r3
    6a26:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6a2a:	4908      	ldr	r1, [pc, #32]	; (6a4c <_i2c_m_sync_init+0x3c>)
    6a2c:	4618      	mov	r0, r3
    6a2e:	4b08      	ldr	r3, [pc, #32]	; (6a50 <_i2c_m_sync_init+0x40>)
    6a30:	4798      	blx	r3

	i2c_dev->hw = hw;
    6a32:	687b      	ldr	r3, [r7, #4]
    6a34:	683a      	ldr	r2, [r7, #0]
    6a36:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6a38:	687b      	ldr	r3, [r7, #4]
    6a3a:	6839      	ldr	r1, [r7, #0]
    6a3c:	4618      	mov	r0, r3
    6a3e:	4b05      	ldr	r3, [pc, #20]	; (6a54 <_i2c_m_sync_init+0x44>)
    6a40:	4798      	blx	r3
    6a42:	4603      	mov	r3, r0
}
    6a44:	4618      	mov	r0, r3
    6a46:	3708      	adds	r7, #8
    6a48:	46bd      	mov	sp, r7
    6a4a:	bd80      	pop	{r7, pc}
    6a4c:	00010ff0 	.word	0x00010ff0
    6a50:	00003c61 	.word	0x00003c61
    6a54:	00006d01 	.word	0x00006d01

00006a58 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b084      	sub	sp, #16
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	6078      	str	r0, [r7, #4]
    6a60:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6a66:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	691b      	ldr	r3, [r3, #16]
    6a6c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6a6e:	68b8      	ldr	r0, [r7, #8]
    6a70:	4b0f      	ldr	r3, [pc, #60]	; (6ab0 <_sercom_i2c_sync_wait_bus+0x58>)
    6a72:	4798      	blx	r3
    6a74:	4603      	mov	r3, r0
    6a76:	461a      	mov	r2, r3
    6a78:	683b      	ldr	r3, [r7, #0]
    6a7a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6a7c:	68fb      	ldr	r3, [r7, #12]
    6a7e:	1e5a      	subs	r2, r3, #1
    6a80:	60fa      	str	r2, [r7, #12]
    6a82:	2b00      	cmp	r3, #0
    6a84:	d102      	bne.n	6a8c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6a86:	f06f 0304 	mvn.w	r3, #4
    6a8a:	e00c      	b.n	6aa6 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6a8c:	683b      	ldr	r3, [r7, #0]
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	f003 0301 	and.w	r3, r3, #1
    6a94:	2b00      	cmp	r3, #0
    6a96:	d105      	bne.n	6aa4 <_sercom_i2c_sync_wait_bus+0x4c>
    6a98:	683b      	ldr	r3, [r7, #0]
    6a9a:	681b      	ldr	r3, [r3, #0]
    6a9c:	f003 0302 	and.w	r3, r3, #2
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d0e4      	beq.n	6a6e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6aa4:	2300      	movs	r3, #0
}
    6aa6:	4618      	mov	r0, r3
    6aa8:	3710      	adds	r7, #16
    6aaa:	46bd      	mov	sp, r7
    6aac:	bd80      	pop	{r7, pc}
    6aae:	bf00      	nop
    6ab0:	0000622d 	.word	0x0000622d

00006ab4 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6ab4:	b590      	push	{r4, r7, lr}
    6ab6:	b087      	sub	sp, #28
    6ab8:	af00      	add	r7, sp, #0
    6aba:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	691b      	ldr	r3, [r3, #16]
    6ac0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6ac2:	687b      	ldr	r3, [r7, #4]
    6ac4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6ac6:	6978      	ldr	r0, [r7, #20]
    6ac8:	4b39      	ldr	r3, [pc, #228]	; (6bb0 <_sercom_i2c_sync_send_address+0xfc>)
    6aca:	4798      	blx	r3
    6acc:	4603      	mov	r3, r0
    6ace:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	bf14      	ite	ne
    6ad6:	2301      	movne	r3, #1
    6ad8:	2300      	moveq	r3, #0
    6ada:	b2db      	uxtb	r3, r3
    6adc:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6ae0:	4934      	ldr	r1, [pc, #208]	; (6bb4 <_sercom_i2c_sync_send_address+0x100>)
    6ae2:	4618      	mov	r0, r3
    6ae4:	4b34      	ldr	r3, [pc, #208]	; (6bb8 <_sercom_i2c_sync_send_address+0x104>)
    6ae6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6ae8:	693b      	ldr	r3, [r7, #16]
    6aea:	685b      	ldr	r3, [r3, #4]
    6aec:	2b01      	cmp	r3, #1
    6aee:	d106      	bne.n	6afe <_sercom_i2c_sync_send_address+0x4a>
    6af0:	68fb      	ldr	r3, [r7, #12]
    6af2:	2b00      	cmp	r3, #0
    6af4:	d003      	beq.n	6afe <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6af6:	6978      	ldr	r0, [r7, #20]
    6af8:	4b30      	ldr	r3, [pc, #192]	; (6bbc <_sercom_i2c_sync_send_address+0x108>)
    6afa:	4798      	blx	r3
    6afc:	e002      	b.n	6b04 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6afe:	6978      	ldr	r0, [r7, #20]
    6b00:	4b2f      	ldr	r3, [pc, #188]	; (6bc0 <_sercom_i2c_sync_send_address+0x10c>)
    6b02:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6b04:	693b      	ldr	r3, [r7, #16]
    6b06:	881b      	ldrh	r3, [r3, #0]
    6b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d022      	beq.n	6b56 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6b10:	693b      	ldr	r3, [r7, #16]
    6b12:	885b      	ldrh	r3, [r3, #2]
    6b14:	b29b      	uxth	r3, r3
    6b16:	f003 0301 	and.w	r3, r3, #1
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d007      	beq.n	6b2e <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6b1e:	693b      	ldr	r3, [r7, #16]
    6b20:	885b      	ldrh	r3, [r3, #2]
    6b22:	b29b      	uxth	r3, r3
    6b24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6b28:	b29a      	uxth	r2, r3
    6b2a:	693b      	ldr	r3, [r7, #16]
    6b2c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6b2e:	693b      	ldr	r3, [r7, #16]
    6b30:	881b      	ldrh	r3, [r3, #0]
    6b32:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6b34:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6b38:	401c      	ands	r4, r3
    6b3a:	6978      	ldr	r0, [r7, #20]
    6b3c:	4b21      	ldr	r3, [pc, #132]	; (6bc4 <_sercom_i2c_sync_send_address+0x110>)
    6b3e:	4798      	blx	r3
    6b40:	4603      	mov	r3, r0
    6b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6b46:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6b4c:	4619      	mov	r1, r3
    6b4e:	6978      	ldr	r0, [r7, #20]
    6b50:	4b1d      	ldr	r3, [pc, #116]	; (6bc8 <_sercom_i2c_sync_send_address+0x114>)
    6b52:	4798      	blx	r3
    6b54:	e01a      	b.n	6b8c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6b56:	693b      	ldr	r3, [r7, #16]
    6b58:	881b      	ldrh	r3, [r3, #0]
    6b5a:	005b      	lsls	r3, r3, #1
    6b5c:	b2db      	uxtb	r3, r3
    6b5e:	693a      	ldr	r2, [r7, #16]
    6b60:	8852      	ldrh	r2, [r2, #2]
    6b62:	b292      	uxth	r2, r2
    6b64:	f002 0201 	and.w	r2, r2, #1
    6b68:	2a00      	cmp	r2, #0
    6b6a:	bf14      	ite	ne
    6b6c:	2201      	movne	r2, #1
    6b6e:	2200      	moveq	r2, #0
    6b70:	b2d2      	uxtb	r2, r2
    6b72:	4313      	orrs	r3, r2
    6b74:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6b76:	6978      	ldr	r0, [r7, #20]
    6b78:	4b12      	ldr	r3, [pc, #72]	; (6bc4 <_sercom_i2c_sync_send_address+0x110>)
    6b7a:	4798      	blx	r3
    6b7c:	4603      	mov	r3, r0
    6b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6b82:	4323      	orrs	r3, r4
    6b84:	4619      	mov	r1, r3
    6b86:	6978      	ldr	r0, [r7, #20]
    6b88:	4b0f      	ldr	r3, [pc, #60]	; (6bc8 <_sercom_i2c_sync_send_address+0x114>)
    6b8a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6b8c:	f107 0308 	add.w	r3, r7, #8
    6b90:	4619      	mov	r1, r3
    6b92:	6878      	ldr	r0, [r7, #4]
    6b94:	4b0d      	ldr	r3, [pc, #52]	; (6bcc <_sercom_i2c_sync_send_address+0x118>)
    6b96:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6b98:	68bb      	ldr	r3, [r7, #8]
    6b9a:	693a      	ldr	r2, [r7, #16]
    6b9c:	4619      	mov	r1, r3
    6b9e:	6978      	ldr	r0, [r7, #20]
    6ba0:	4b0b      	ldr	r3, [pc, #44]	; (6bd0 <_sercom_i2c_sync_send_address+0x11c>)
    6ba2:	4798      	blx	r3
    6ba4:	4603      	mov	r3, r0
}
    6ba6:	4618      	mov	r0, r3
    6ba8:	371c      	adds	r7, #28
    6baa:	46bd      	mov	sp, r7
    6bac:	bd90      	pop	{r4, r7, pc}
    6bae:	bf00      	nop
    6bb0:	000062d1 	.word	0x000062d1
    6bb4:	00010ff0 	.word	0x00010ff0
    6bb8:	00003c61 	.word	0x00003c61
    6bbc:	00006481 	.word	0x00006481
    6bc0:	000064a9 	.word	0x000064a9
    6bc4:	000065e9 	.word	0x000065e9
    6bc8:	000065c5 	.word	0x000065c5
    6bcc:	00006a59 	.word	0x00006a59
    6bd0:	000067e1 	.word	0x000067e1

00006bd4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6bd4:	b580      	push	{r7, lr}
    6bd6:	b086      	sub	sp, #24
    6bd8:	af00      	add	r7, sp, #0
    6bda:	6078      	str	r0, [r7, #4]
    6bdc:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	691b      	ldr	r3, [r3, #16]
    6be2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	2b00      	cmp	r3, #0
    6be8:	bf14      	ite	ne
    6bea:	2301      	movne	r3, #1
    6bec:	2300      	moveq	r3, #0
    6bee:	b2db      	uxtb	r3, r3
    6bf0:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6bf4:	493b      	ldr	r1, [pc, #236]	; (6ce4 <_i2c_m_sync_transfer+0x110>)
    6bf6:	4618      	mov	r0, r3
    6bf8:	4b3b      	ldr	r3, [pc, #236]	; (6ce8 <_i2c_m_sync_transfer+0x114>)
    6bfa:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6bfc:	687b      	ldr	r3, [r7, #4]
    6bfe:	691b      	ldr	r3, [r3, #16]
    6c00:	2b00      	cmp	r3, #0
    6c02:	bf14      	ite	ne
    6c04:	2301      	movne	r3, #1
    6c06:	2300      	moveq	r3, #0
    6c08:	b2db      	uxtb	r3, r3
    6c0a:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6c0e:	4935      	ldr	r1, [pc, #212]	; (6ce4 <_i2c_m_sync_transfer+0x110>)
    6c10:	4618      	mov	r0, r3
    6c12:	4b35      	ldr	r3, [pc, #212]	; (6ce8 <_i2c_m_sync_transfer+0x114>)
    6c14:	4798      	blx	r3
	ASSERT(msg);
    6c16:	683b      	ldr	r3, [r7, #0]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	bf14      	ite	ne
    6c1c:	2301      	movne	r3, #1
    6c1e:	2300      	moveq	r3, #0
    6c20:	b2db      	uxtb	r3, r3
    6c22:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6c26:	492f      	ldr	r1, [pc, #188]	; (6ce4 <_i2c_m_sync_transfer+0x110>)
    6c28:	4618      	mov	r0, r3
    6c2a:	4b2f      	ldr	r3, [pc, #188]	; (6ce8 <_i2c_m_sync_transfer+0x114>)
    6c2c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	885b      	ldrh	r3, [r3, #2]
    6c32:	b29b      	uxth	r3, r3
    6c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d002      	beq.n	6c42 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6c3c:	f06f 0305 	mvn.w	r3, #5
    6c40:	e04c      	b.n	6cdc <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6c42:	683b      	ldr	r3, [r7, #0]
    6c44:	885b      	ldrh	r3, [r3, #2]
    6c46:	b29b      	uxth	r3, r3
    6c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6c4c:	b29a      	uxth	r2, r3
    6c4e:	683b      	ldr	r3, [r7, #0]
    6c50:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	683a      	ldr	r2, [r7, #0]
    6c56:	ca07      	ldmia	r2, {r0, r1, r2}
    6c58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6c5c:	6938      	ldr	r0, [r7, #16]
    6c5e:	4b23      	ldr	r3, [pc, #140]	; (6cec <_i2c_m_sync_transfer+0x118>)
    6c60:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6c62:	6878      	ldr	r0, [r7, #4]
    6c64:	4b22      	ldr	r3, [pc, #136]	; (6cf0 <_i2c_m_sync_transfer+0x11c>)
    6c66:	4798      	blx	r3
    6c68:	6178      	str	r0, [r7, #20]

	if (ret) {
    6c6a:	697b      	ldr	r3, [r7, #20]
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d02d      	beq.n	6ccc <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	885b      	ldrh	r3, [r3, #2]
    6c74:	b29b      	uxth	r3, r3
    6c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c7a:	b29a      	uxth	r2, r3
    6c7c:	687b      	ldr	r3, [r7, #4]
    6c7e:	805a      	strh	r2, [r3, #2]

		return ret;
    6c80:	697b      	ldr	r3, [r7, #20]
    6c82:	e02b      	b.n	6cdc <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6c84:	f107 030c 	add.w	r3, r7, #12
    6c88:	4619      	mov	r1, r3
    6c8a:	6878      	ldr	r0, [r7, #4]
    6c8c:	4b19      	ldr	r3, [pc, #100]	; (6cf4 <_i2c_m_sync_transfer+0x120>)
    6c8e:	4798      	blx	r3
    6c90:	6178      	str	r0, [r7, #20]

		if (ret) {
    6c92:	697b      	ldr	r3, [r7, #20]
    6c94:	2b00      	cmp	r3, #0
    6c96:	d012      	beq.n	6cbe <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6c98:	683b      	ldr	r3, [r7, #0]
    6c9a:	885b      	ldrh	r3, [r3, #2]
    6c9c:	b29b      	uxth	r3, r3
    6c9e:	b21b      	sxth	r3, r3
    6ca0:	2b00      	cmp	r3, #0
    6ca2:	da02      	bge.n	6caa <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6ca4:	6938      	ldr	r0, [r7, #16]
    6ca6:	4b14      	ldr	r3, [pc, #80]	; (6cf8 <_i2c_m_sync_transfer+0x124>)
    6ca8:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	885b      	ldrh	r3, [r3, #2]
    6cae:	b29b      	uxth	r3, r3
    6cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6cb4:	b29a      	uxth	r2, r3
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	805a      	strh	r2, [r3, #2]

			return ret;
    6cba:	697b      	ldr	r3, [r7, #20]
    6cbc:	e00e      	b.n	6cdc <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6cbe:	68fb      	ldr	r3, [r7, #12]
    6cc0:	687a      	ldr	r2, [r7, #4]
    6cc2:	4619      	mov	r1, r3
    6cc4:	6938      	ldr	r0, [r7, #16]
    6cc6:	4b0d      	ldr	r3, [pc, #52]	; (6cfc <_i2c_m_sync_transfer+0x128>)
    6cc8:	4798      	blx	r3
    6cca:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	885b      	ldrh	r3, [r3, #2]
    6cd0:	b29b      	uxth	r3, r3
    6cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	d1d4      	bne.n	6c84 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6cda:	697b      	ldr	r3, [r7, #20]
}
    6cdc:	4618      	mov	r0, r3
    6cde:	3718      	adds	r7, #24
    6ce0:	46bd      	mov	sp, r7
    6ce2:	bd80      	pop	{r7, pc}
    6ce4:	00010ff0 	.word	0x00010ff0
    6ce8:	00003c61 	.word	0x00003c61
    6cec:	00006431 	.word	0x00006431
    6cf0:	00006ab5 	.word	0x00006ab5
    6cf4:	00006a59 	.word	0x00006a59
    6cf8:	000067c5 	.word	0x000067c5
    6cfc:	000067e1 	.word	0x000067e1

00006d00 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b084      	sub	sp, #16
    6d04:	af00      	add	r7, sp, #0
    6d06:	6078      	str	r0, [r7, #4]
    6d08:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6d0a:	6838      	ldr	r0, [r7, #0]
    6d0c:	4b42      	ldr	r3, [pc, #264]	; (6e18 <_i2c_m_sync_init_impl+0x118>)
    6d0e:	4798      	blx	r3
    6d10:	4603      	mov	r3, r0
    6d12:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6d14:	2101      	movs	r1, #1
    6d16:	6838      	ldr	r0, [r7, #0]
    6d18:	4b40      	ldr	r3, [pc, #256]	; (6e1c <_i2c_m_sync_init_impl+0x11c>)
    6d1a:	4798      	blx	r3
    6d1c:	4603      	mov	r3, r0
    6d1e:	f083 0301 	eor.w	r3, r3, #1
    6d22:	b2db      	uxtb	r3, r3
    6d24:	2b00      	cmp	r3, #0
    6d26:	d020      	beq.n	6d6a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6d28:	7bfa      	ldrb	r2, [r7, #15]
    6d2a:	493d      	ldr	r1, [pc, #244]	; (6e20 <_i2c_m_sync_init_impl+0x120>)
    6d2c:	4613      	mov	r3, r2
    6d2e:	005b      	lsls	r3, r3, #1
    6d30:	4413      	add	r3, r2
    6d32:	00db      	lsls	r3, r3, #3
    6d34:	440b      	add	r3, r1
    6d36:	3304      	adds	r3, #4
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	f003 031c 	and.w	r3, r3, #28
    6d3e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6d40:	2102      	movs	r1, #2
    6d42:	6838      	ldr	r0, [r7, #0]
    6d44:	4b37      	ldr	r3, [pc, #220]	; (6e24 <_i2c_m_sync_init_impl+0x124>)
    6d46:	4798      	blx	r3
    6d48:	4603      	mov	r3, r0
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d006      	beq.n	6d5c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6d4e:	6838      	ldr	r0, [r7, #0]
    6d50:	4b35      	ldr	r3, [pc, #212]	; (6e28 <_i2c_m_sync_init_impl+0x128>)
    6d52:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6d54:	2102      	movs	r1, #2
    6d56:	6838      	ldr	r0, [r7, #0]
    6d58:	4b34      	ldr	r3, [pc, #208]	; (6e2c <_i2c_m_sync_init_impl+0x12c>)
    6d5a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6d5c:	68bb      	ldr	r3, [r7, #8]
    6d5e:	f043 0301 	orr.w	r3, r3, #1
    6d62:	4619      	mov	r1, r3
    6d64:	6838      	ldr	r0, [r7, #0]
    6d66:	4b32      	ldr	r3, [pc, #200]	; (6e30 <_i2c_m_sync_init_impl+0x130>)
    6d68:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6d6a:	2101      	movs	r1, #1
    6d6c:	6838      	ldr	r0, [r7, #0]
    6d6e:	4b2f      	ldr	r3, [pc, #188]	; (6e2c <_i2c_m_sync_init_impl+0x12c>)
    6d70:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6d72:	7bfa      	ldrb	r2, [r7, #15]
    6d74:	492a      	ldr	r1, [pc, #168]	; (6e20 <_i2c_m_sync_init_impl+0x120>)
    6d76:	4613      	mov	r3, r2
    6d78:	005b      	lsls	r3, r3, #1
    6d7a:	4413      	add	r3, r2
    6d7c:	00db      	lsls	r3, r3, #3
    6d7e:	440b      	add	r3, r1
    6d80:	3304      	adds	r3, #4
    6d82:	681b      	ldr	r3, [r3, #0]
    6d84:	4619      	mov	r1, r3
    6d86:	6838      	ldr	r0, [r7, #0]
    6d88:	4b29      	ldr	r3, [pc, #164]	; (6e30 <_i2c_m_sync_init_impl+0x130>)
    6d8a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6d8c:	7bfa      	ldrb	r2, [r7, #15]
    6d8e:	4924      	ldr	r1, [pc, #144]	; (6e20 <_i2c_m_sync_init_impl+0x120>)
    6d90:	4613      	mov	r3, r2
    6d92:	005b      	lsls	r3, r3, #1
    6d94:	4413      	add	r3, r2
    6d96:	00db      	lsls	r3, r3, #3
    6d98:	440b      	add	r3, r1
    6d9a:	3308      	adds	r3, #8
    6d9c:	681b      	ldr	r3, [r3, #0]
    6d9e:	4619      	mov	r1, r3
    6da0:	6838      	ldr	r0, [r7, #0]
    6da2:	4b24      	ldr	r3, [pc, #144]	; (6e34 <_i2c_m_sync_init_impl+0x134>)
    6da4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6da6:	7bfa      	ldrb	r2, [r7, #15]
    6da8:	491d      	ldr	r1, [pc, #116]	; (6e20 <_i2c_m_sync_init_impl+0x120>)
    6daa:	4613      	mov	r3, r2
    6dac:	005b      	lsls	r3, r3, #1
    6dae:	4413      	add	r3, r2
    6db0:	00db      	lsls	r3, r3, #3
    6db2:	440b      	add	r3, r1
    6db4:	330c      	adds	r3, #12
    6db6:	681b      	ldr	r3, [r3, #0]
    6db8:	4619      	mov	r1, r3
    6dba:	6838      	ldr	r0, [r7, #0]
    6dbc:	4b1e      	ldr	r3, [pc, #120]	; (6e38 <_i2c_m_sync_init_impl+0x138>)
    6dbe:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6dc0:	7bfa      	ldrb	r2, [r7, #15]
    6dc2:	4917      	ldr	r1, [pc, #92]	; (6e20 <_i2c_m_sync_init_impl+0x120>)
    6dc4:	4613      	mov	r3, r2
    6dc6:	005b      	lsls	r3, r3, #1
    6dc8:	4413      	add	r3, r2
    6dca:	00db      	lsls	r3, r3, #3
    6dcc:	440b      	add	r3, r1
    6dce:	3304      	adds	r3, #4
    6dd0:	681b      	ldr	r3, [r3, #0]
    6dd2:	0e1b      	lsrs	r3, r3, #24
    6dd4:	b29b      	uxth	r3, r3
    6dd6:	f003 0303 	and.w	r3, r3, #3
    6dda:	b29a      	uxth	r2, r3
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	899b      	ldrh	r3, [r3, #12]
    6de4:	2b01      	cmp	r3, #1
    6de6:	bf8c      	ite	hi
    6de8:	2301      	movhi	r3, #1
    6dea:	2300      	movls	r3, #0
    6dec:	b2db      	uxtb	r3, r3
    6dee:	4619      	mov	r1, r3
    6df0:	6838      	ldr	r0, [r7, #0]
    6df2:	4b12      	ldr	r3, [pc, #72]	; (6e3c <_i2c_m_sync_init_impl+0x13c>)
    6df4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6df6:	7bfa      	ldrb	r2, [r7, #15]
    6df8:	4909      	ldr	r1, [pc, #36]	; (6e20 <_i2c_m_sync_init_impl+0x120>)
    6dfa:	4613      	mov	r3, r2
    6dfc:	005b      	lsls	r3, r3, #1
    6dfe:	4413      	add	r3, r2
    6e00:	00db      	lsls	r3, r3, #3
    6e02:	440b      	add	r3, r1
    6e04:	3312      	adds	r3, #18
    6e06:	881a      	ldrh	r2, [r3, #0]
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6e0c:	2300      	movs	r3, #0
}
    6e0e:	4618      	mov	r0, r3
    6e10:	3710      	adds	r7, #16
    6e12:	46bd      	mov	sp, r7
    6e14:	bd80      	pop	{r7, pc}
    6e16:	bf00      	nop
    6e18:	0000675d 	.word	0x0000675d
    6e1c:	00006185 	.word	0x00006185
    6e20:	2000001c 	.word	0x2000001c
    6e24:	00006301 	.word	0x00006301
    6e28:	000062a9 	.word	0x000062a9
    6e2c:	00006161 	.word	0x00006161
    6e30:	00006331 	.word	0x00006331
    6e34:	00006501 	.word	0x00006501
    6e38:	00006549 	.word	0x00006549
    6e3c:	00006585 	.word	0x00006585

00006e40 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	b082      	sub	sp, #8
    6e44:	af00      	add	r7, sp, #0
    6e46:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6e48:	2101      	movs	r1, #1
    6e4a:	6878      	ldr	r0, [r7, #4]
    6e4c:	4b07      	ldr	r3, [pc, #28]	; (6e6c <_spi_sync_enable+0x2c>)
    6e4e:	4798      	blx	r3
    6e50:	4603      	mov	r3, r0
    6e52:	2b00      	cmp	r3, #0
    6e54:	d002      	beq.n	6e5c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    6e56:	f06f 0303 	mvn.w	r3, #3
    6e5a:	e003      	b.n	6e64 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    6e5c:	6878      	ldr	r0, [r7, #4]
    6e5e:	4b04      	ldr	r3, [pc, #16]	; (6e70 <_spi_sync_enable+0x30>)
    6e60:	4798      	blx	r3

	return ERR_NONE;
    6e62:	2300      	movs	r3, #0
}
    6e64:	4618      	mov	r0, r3
    6e66:	3708      	adds	r7, #8
    6e68:	46bd      	mov	sp, r7
    6e6a:	bd80      	pop	{r7, pc}
    6e6c:	000061d1 	.word	0x000061d1
    6e70:	00006355 	.word	0x00006355

00006e74 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    6e74:	b580      	push	{r7, lr}
    6e76:	b082      	sub	sp, #8
    6e78:	af00      	add	r7, sp, #0
    6e7a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6e7c:	2101      	movs	r1, #1
    6e7e:	6878      	ldr	r0, [r7, #4]
    6e80:	4b07      	ldr	r3, [pc, #28]	; (6ea0 <_spi_sync_disable+0x2c>)
    6e82:	4798      	blx	r3
    6e84:	4603      	mov	r3, r0
    6e86:	2b00      	cmp	r3, #0
    6e88:	d002      	beq.n	6e90 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    6e8a:	f06f 0303 	mvn.w	r3, #3
    6e8e:	e003      	b.n	6e98 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6e90:	6878      	ldr	r0, [r7, #4]
    6e92:	4b04      	ldr	r3, [pc, #16]	; (6ea4 <_spi_sync_disable+0x30>)
    6e94:	4798      	blx	r3

	return ERR_NONE;
    6e96:	2300      	movs	r3, #0
}
    6e98:	4618      	mov	r0, r3
    6e9a:	3708      	adds	r7, #8
    6e9c:	46bd      	mov	sp, r7
    6e9e:	bd80      	pop	{r7, pc}
    6ea0:	000061d1 	.word	0x000061d1
    6ea4:	000063b5 	.word	0x000063b5

00006ea8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6ea8:	b580      	push	{r7, lr}
    6eaa:	b082      	sub	sp, #8
    6eac:	af00      	add	r7, sp, #0
    6eae:	6078      	str	r0, [r7, #4]
    6eb0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d004      	beq.n	6ec2 <_spi_load_regs_master+0x1a>
    6eb8:	683b      	ldr	r3, [r7, #0]
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d001      	beq.n	6ec2 <_spi_load_regs_master+0x1a>
    6ebe:	2301      	movs	r3, #1
    6ec0:	e000      	b.n	6ec4 <_spi_load_regs_master+0x1c>
    6ec2:	2300      	movs	r3, #0
    6ec4:	f003 0301 	and.w	r3, r3, #1
    6ec8:	b2db      	uxtb	r3, r3
    6eca:	f640 1209 	movw	r2, #2313	; 0x909
    6ece:	4915      	ldr	r1, [pc, #84]	; (6f24 <_spi_load_regs_master+0x7c>)
    6ed0:	4618      	mov	r0, r3
    6ed2:	4b15      	ldr	r3, [pc, #84]	; (6f28 <_spi_load_regs_master+0x80>)
    6ed4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6ed6:	683b      	ldr	r3, [r7, #0]
    6ed8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6eda:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6ede:	f023 0301 	bic.w	r3, r3, #1
    6ee2:	4619      	mov	r1, r3
    6ee4:	6878      	ldr	r0, [r7, #4]
    6ee6:	4b11      	ldr	r3, [pc, #68]	; (6f2c <_spi_load_regs_master+0x84>)
    6ee8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6eea:	683b      	ldr	r3, [r7, #0]
    6eec:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6eee:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6ef2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6efa:	4619      	mov	r1, r3
    6efc:	6878      	ldr	r0, [r7, #4]
    6efe:	4b0c      	ldr	r3, [pc, #48]	; (6f30 <_spi_load_regs_master+0x88>)
    6f00:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6f02:	683b      	ldr	r3, [r7, #0]
    6f04:	7b1b      	ldrb	r3, [r3, #12]
    6f06:	4619      	mov	r1, r3
    6f08:	6878      	ldr	r0, [r7, #4]
    6f0a:	4b0a      	ldr	r3, [pc, #40]	; (6f34 <_spi_load_regs_master+0x8c>)
    6f0c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6f0e:	683b      	ldr	r3, [r7, #0]
    6f10:	7b5b      	ldrb	r3, [r3, #13]
    6f12:	4619      	mov	r1, r3
    6f14:	6878      	ldr	r0, [r7, #4]
    6f16:	4b08      	ldr	r3, [pc, #32]	; (6f38 <_spi_load_regs_master+0x90>)
    6f18:	4798      	blx	r3
}
    6f1a:	bf00      	nop
    6f1c:	3708      	adds	r7, #8
    6f1e:	46bd      	mov	sp, r7
    6f20:	bd80      	pop	{r7, pc}
    6f22:	bf00      	nop
    6f24:	00010ff0 	.word	0x00010ff0
    6f28:	00003c61 	.word	0x00003c61
    6f2c:	0000640d 	.word	0x0000640d
    6f30:	00006525 	.word	0x00006525
    6f34:	00006565 	.word	0x00006565
    6f38:	0000669d 	.word	0x0000669d

00006f3c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6f3c:	b580      	push	{r7, lr}
    6f3e:	b082      	sub	sp, #8
    6f40:	af00      	add	r7, sp, #0
    6f42:	6078      	str	r0, [r7, #4]
    6f44:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d004      	beq.n	6f56 <_spi_load_regs_slave+0x1a>
    6f4c:	683b      	ldr	r3, [r7, #0]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d001      	beq.n	6f56 <_spi_load_regs_slave+0x1a>
    6f52:	2301      	movs	r3, #1
    6f54:	e000      	b.n	6f58 <_spi_load_regs_slave+0x1c>
    6f56:	2300      	movs	r3, #0
    6f58:	f003 0301 	and.w	r3, r3, #1
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	f640 121d 	movw	r2, #2333	; 0x91d
    6f62:	491a      	ldr	r1, [pc, #104]	; (6fcc <_spi_load_regs_slave+0x90>)
    6f64:	4618      	mov	r0, r3
    6f66:	4b1a      	ldr	r3, [pc, #104]	; (6fd0 <_spi_load_regs_slave+0x94>)
    6f68:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6f6a:	683b      	ldr	r3, [r7, #0]
    6f6c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6f6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6f72:	f023 0301 	bic.w	r3, r3, #1
    6f76:	4619      	mov	r1, r3
    6f78:	6878      	ldr	r0, [r7, #4]
    6f7a:	4b16      	ldr	r3, [pc, #88]	; (6fd4 <_spi_load_regs_slave+0x98>)
    6f7c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6f7e:	683b      	ldr	r3, [r7, #0]
    6f80:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6f82:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6f86:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6f8e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6f92:	4619      	mov	r1, r3
    6f94:	6878      	ldr	r0, [r7, #4]
    6f96:	4b10      	ldr	r3, [pc, #64]	; (6fd8 <_spi_load_regs_slave+0x9c>)
    6f98:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6f9a:	683b      	ldr	r3, [r7, #0]
    6f9c:	689b      	ldr	r3, [r3, #8]
    6f9e:	4619      	mov	r1, r3
    6fa0:	6878      	ldr	r0, [r7, #4]
    6fa2:	4b0e      	ldr	r3, [pc, #56]	; (6fdc <_spi_load_regs_slave+0xa0>)
    6fa4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6fa6:	683b      	ldr	r3, [r7, #0]
    6fa8:	7b5b      	ldrb	r3, [r3, #13]
    6faa:	4619      	mov	r1, r3
    6fac:	6878      	ldr	r0, [r7, #4]
    6fae:	4b0c      	ldr	r3, [pc, #48]	; (6fe0 <_spi_load_regs_slave+0xa4>)
    6fb0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6fb2:	bf00      	nop
    6fb4:	f04f 31ff 	mov.w	r1, #4294967295
    6fb8:	6878      	ldr	r0, [r7, #4]
    6fba:	4b0a      	ldr	r3, [pc, #40]	; (6fe4 <_spi_load_regs_slave+0xa8>)
    6fbc:	4798      	blx	r3
    6fbe:	4603      	mov	r3, r0
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d1f7      	bne.n	6fb4 <_spi_load_regs_slave+0x78>
		;
}
    6fc4:	bf00      	nop
    6fc6:	3708      	adds	r7, #8
    6fc8:	46bd      	mov	sp, r7
    6fca:	bd80      	pop	{r7, pc}
    6fcc:	00010ff0 	.word	0x00010ff0
    6fd0:	00003c61 	.word	0x00003c61
    6fd4:	0000640d 	.word	0x0000640d
    6fd8:	00006525 	.word	0x00006525
    6fdc:	00006609 	.word	0x00006609
    6fe0:	0000669d 	.word	0x0000669d
    6fe4:	000061d1 	.word	0x000061d1

00006fe8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6fe8:	b580      	push	{r7, lr}
    6fea:	b084      	sub	sp, #16
    6fec:	af00      	add	r7, sp, #0
    6fee:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	4618      	mov	r0, r3
    6ff4:	4b11      	ldr	r3, [pc, #68]	; (703c <_spi_get_regs+0x54>)
    6ff6:	4798      	blx	r3
    6ff8:	4603      	mov	r3, r0
    6ffa:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6ffc:	2300      	movs	r3, #0
    6ffe:	73fb      	strb	r3, [r7, #15]
    7000:	e014      	b.n	702c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    7002:	7bfa      	ldrb	r2, [r7, #15]
    7004:	490e      	ldr	r1, [pc, #56]	; (7040 <_spi_get_regs+0x58>)
    7006:	4613      	mov	r3, r2
    7008:	011b      	lsls	r3, r3, #4
    700a:	4413      	add	r3, r2
    700c:	440b      	add	r3, r1
    700e:	3310      	adds	r3, #16
    7010:	781b      	ldrb	r3, [r3, #0]
    7012:	7bba      	ldrb	r2, [r7, #14]
    7014:	429a      	cmp	r2, r3
    7016:	d106      	bne.n	7026 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7018:	7bfa      	ldrb	r2, [r7, #15]
    701a:	4613      	mov	r3, r2
    701c:	011b      	lsls	r3, r3, #4
    701e:	4413      	add	r3, r2
    7020:	4a07      	ldr	r2, [pc, #28]	; (7040 <_spi_get_regs+0x58>)
    7022:	4413      	add	r3, r2
    7024:	e006      	b.n	7034 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7026:	7bfb      	ldrb	r3, [r7, #15]
    7028:	3301      	adds	r3, #1
    702a:	73fb      	strb	r3, [r7, #15]
    702c:	7bfb      	ldrb	r3, [r7, #15]
    702e:	2b01      	cmp	r3, #1
    7030:	d9e7      	bls.n	7002 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7032:	2300      	movs	r3, #0
}
    7034:	4618      	mov	r0, r3
    7036:	3710      	adds	r7, #16
    7038:	46bd      	mov	sp, r7
    703a:	bd80      	pop	{r7, pc}
    703c:	00006701 	.word	0x00006701
    7040:	0001102c 	.word	0x0001102c

00007044 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7044:	b580      	push	{r7, lr}
    7046:	b084      	sub	sp, #16
    7048:	af00      	add	r7, sp, #0
    704a:	6078      	str	r0, [r7, #4]
    704c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    704e:	683b      	ldr	r3, [r7, #0]
    7050:	4618      	mov	r0, r3
    7052:	4b35      	ldr	r3, [pc, #212]	; (7128 <_spi_m_sync_init+0xe4>)
    7054:	4798      	blx	r3
    7056:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	2b00      	cmp	r3, #0
    705c:	d004      	beq.n	7068 <_spi_m_sync_init+0x24>
    705e:	683b      	ldr	r3, [r7, #0]
    7060:	2b00      	cmp	r3, #0
    7062:	d001      	beq.n	7068 <_spi_m_sync_init+0x24>
    7064:	2301      	movs	r3, #1
    7066:	e000      	b.n	706a <_spi_m_sync_init+0x26>
    7068:	2300      	movs	r3, #0
    706a:	f003 0301 	and.w	r3, r3, #1
    706e:	b2db      	uxtb	r3, r3
    7070:	f640 123f 	movw	r2, #2367	; 0x93f
    7074:	492d      	ldr	r1, [pc, #180]	; (712c <_spi_m_sync_init+0xe8>)
    7076:	4618      	mov	r0, r3
    7078:	4b2d      	ldr	r3, [pc, #180]	; (7130 <_spi_m_sync_init+0xec>)
    707a:	4798      	blx	r3

	if (regs == NULL) {
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	2b00      	cmp	r3, #0
    7080:	d102      	bne.n	7088 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7082:	f06f 030c 	mvn.w	r3, #12
    7086:	e04a      	b.n	711e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7088:	2101      	movs	r1, #1
    708a:	6838      	ldr	r0, [r7, #0]
    708c:	4b29      	ldr	r3, [pc, #164]	; (7134 <_spi_m_sync_init+0xf0>)
    708e:	4798      	blx	r3
    7090:	4603      	mov	r3, r0
    7092:	f083 0301 	eor.w	r3, r3, #1
    7096:	b2db      	uxtb	r3, r3
    7098:	2b00      	cmp	r3, #0
    709a:	d019      	beq.n	70d0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    709c:	68fb      	ldr	r3, [r7, #12]
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	f003 031c 	and.w	r3, r3, #28
    70a4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    70a6:	2102      	movs	r1, #2
    70a8:	6838      	ldr	r0, [r7, #0]
    70aa:	4b23      	ldr	r3, [pc, #140]	; (7138 <_spi_m_sync_init+0xf4>)
    70ac:	4798      	blx	r3
    70ae:	4603      	mov	r3, r0
    70b0:	2b00      	cmp	r3, #0
    70b2:	d006      	beq.n	70c2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    70b4:	6838      	ldr	r0, [r7, #0]
    70b6:	4b21      	ldr	r3, [pc, #132]	; (713c <_spi_m_sync_init+0xf8>)
    70b8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    70ba:	2102      	movs	r1, #2
    70bc:	6838      	ldr	r0, [r7, #0]
    70be:	4b20      	ldr	r3, [pc, #128]	; (7140 <_spi_m_sync_init+0xfc>)
    70c0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    70c2:	68bb      	ldr	r3, [r7, #8]
    70c4:	f043 0301 	orr.w	r3, r3, #1
    70c8:	4619      	mov	r1, r3
    70ca:	6838      	ldr	r0, [r7, #0]
    70cc:	4b1d      	ldr	r3, [pc, #116]	; (7144 <_spi_m_sync_init+0x100>)
    70ce:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    70d0:	2101      	movs	r1, #1
    70d2:	6838      	ldr	r0, [r7, #0]
    70d4:	4b1a      	ldr	r3, [pc, #104]	; (7140 <_spi_m_sync_init+0xfc>)
    70d6:	4798      	blx	r3

	dev->prvt = hw;
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	683a      	ldr	r2, [r7, #0]
    70dc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    70de:	68fb      	ldr	r3, [r7, #12]
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	f003 031c 	and.w	r3, r3, #28
    70e6:	2b08      	cmp	r3, #8
    70e8:	d104      	bne.n	70f4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    70ea:	68f9      	ldr	r1, [r7, #12]
    70ec:	6838      	ldr	r0, [r7, #0]
    70ee:	4b16      	ldr	r3, [pc, #88]	; (7148 <_spi_m_sync_init+0x104>)
    70f0:	4798      	blx	r3
    70f2:	e003      	b.n	70fc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    70f4:	68f9      	ldr	r1, [r7, #12]
    70f6:	6838      	ldr	r0, [r7, #0]
    70f8:	4b14      	ldr	r3, [pc, #80]	; (714c <_spi_m_sync_init+0x108>)
    70fa:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    70fc:	68fb      	ldr	r3, [r7, #12]
    70fe:	685b      	ldr	r3, [r3, #4]
    7100:	f003 0307 	and.w	r3, r3, #7
    7104:	2b00      	cmp	r3, #0
    7106:	d101      	bne.n	710c <_spi_m_sync_init+0xc8>
    7108:	2201      	movs	r2, #1
    710a:	e000      	b.n	710e <_spi_m_sync_init+0xca>
    710c:	2202      	movs	r2, #2
    710e:	687b      	ldr	r3, [r7, #4]
    7110:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7112:	68fb      	ldr	r3, [r7, #12]
    7114:	89db      	ldrh	r3, [r3, #14]
    7116:	b29a      	uxth	r2, r3
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    711c:	2300      	movs	r3, #0
}
    711e:	4618      	mov	r0, r3
    7120:	3710      	adds	r7, #16
    7122:	46bd      	mov	sp, r7
    7124:	bd80      	pop	{r7, pc}
    7126:	bf00      	nop
    7128:	00006fe9 	.word	0x00006fe9
    712c:	00010ff0 	.word	0x00010ff0
    7130:	00003c61 	.word	0x00003c61
    7134:	000061d1 	.word	0x000061d1
    7138:	000063dd 	.word	0x000063dd
    713c:	000063b5 	.word	0x000063b5
    7140:	000061ad 	.word	0x000061ad
    7144:	0000640d 	.word	0x0000640d
    7148:	00006f3d 	.word	0x00006f3d
    714c:	00006ea9 	.word	0x00006ea9

00007150 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    7150:	b580      	push	{r7, lr}
    7152:	b082      	sub	sp, #8
    7154:	af00      	add	r7, sp, #0
    7156:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	2b00      	cmp	r3, #0
    715c:	d005      	beq.n	716a <_spi_m_sync_enable+0x1a>
    715e:	687b      	ldr	r3, [r7, #4]
    7160:	681b      	ldr	r3, [r3, #0]
    7162:	2b00      	cmp	r3, #0
    7164:	d001      	beq.n	716a <_spi_m_sync_enable+0x1a>
    7166:	2301      	movs	r3, #1
    7168:	e000      	b.n	716c <_spi_m_sync_enable+0x1c>
    716a:	2300      	movs	r3, #0
    716c:	f003 0301 	and.w	r3, r3, #1
    7170:	b2db      	uxtb	r3, r3
    7172:	f640 129e 	movw	r2, #2462	; 0x99e
    7176:	4907      	ldr	r1, [pc, #28]	; (7194 <_spi_m_sync_enable+0x44>)
    7178:	4618      	mov	r0, r3
    717a:	4b07      	ldr	r3, [pc, #28]	; (7198 <_spi_m_sync_enable+0x48>)
    717c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	681b      	ldr	r3, [r3, #0]
    7182:	4618      	mov	r0, r3
    7184:	4b05      	ldr	r3, [pc, #20]	; (719c <_spi_m_sync_enable+0x4c>)
    7186:	4798      	blx	r3
    7188:	4603      	mov	r3, r0
}
    718a:	4618      	mov	r0, r3
    718c:	3708      	adds	r7, #8
    718e:	46bd      	mov	sp, r7
    7190:	bd80      	pop	{r7, pc}
    7192:	bf00      	nop
    7194:	00010ff0 	.word	0x00010ff0
    7198:	00003c61 	.word	0x00003c61
    719c:	00006e41 	.word	0x00006e41

000071a0 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b082      	sub	sp, #8
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d005      	beq.n	71ba <_spi_m_sync_disable+0x1a>
    71ae:	687b      	ldr	r3, [r7, #4]
    71b0:	681b      	ldr	r3, [r3, #0]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d001      	beq.n	71ba <_spi_m_sync_disable+0x1a>
    71b6:	2301      	movs	r3, #1
    71b8:	e000      	b.n	71bc <_spi_m_sync_disable+0x1c>
    71ba:	2300      	movs	r3, #0
    71bc:	f003 0301 	and.w	r3, r3, #1
    71c0:	b2db      	uxtb	r3, r3
    71c2:	f640 12ba 	movw	r2, #2490	; 0x9ba
    71c6:	4907      	ldr	r1, [pc, #28]	; (71e4 <_spi_m_sync_disable+0x44>)
    71c8:	4618      	mov	r0, r3
    71ca:	4b07      	ldr	r3, [pc, #28]	; (71e8 <_spi_m_sync_disable+0x48>)
    71cc:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	681b      	ldr	r3, [r3, #0]
    71d2:	4618      	mov	r0, r3
    71d4:	4b05      	ldr	r3, [pc, #20]	; (71ec <_spi_m_sync_disable+0x4c>)
    71d6:	4798      	blx	r3
    71d8:	4603      	mov	r3, r0
}
    71da:	4618      	mov	r0, r3
    71dc:	3708      	adds	r7, #8
    71de:	46bd      	mov	sp, r7
    71e0:	bd80      	pop	{r7, pc}
    71e2:	bf00      	nop
    71e4:	00010ff0 	.word	0x00010ff0
    71e8:	00003c61 	.word	0x00003c61
    71ec:	00006e75 	.word	0x00006e75

000071f0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    71f0:	b580      	push	{r7, lr}
    71f2:	b082      	sub	sp, #8
    71f4:	af00      	add	r7, sp, #0
    71f6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    71f8:	bf00      	nop
    71fa:	2103      	movs	r1, #3
    71fc:	6878      	ldr	r0, [r7, #4]
    71fe:	4b06      	ldr	r3, [pc, #24]	; (7218 <_spi_wait_bus_idle+0x28>)
    7200:	4798      	blx	r3
    7202:	4603      	mov	r3, r0
    7204:	2b00      	cmp	r3, #0
    7206:	d0f8      	beq.n	71fa <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7208:	2103      	movs	r1, #3
    720a:	6878      	ldr	r0, [r7, #4]
    720c:	4b03      	ldr	r3, [pc, #12]	; (721c <_spi_wait_bus_idle+0x2c>)
    720e:	4798      	blx	r3
}
    7210:	bf00      	nop
    7212:	3708      	adds	r7, #8
    7214:	46bd      	mov	sp, r7
    7216:	bd80      	pop	{r7, pc}
    7218:	00006247 	.word	0x00006247
    721c:	00006289 	.word	0x00006289

00007220 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7220:	b580      	push	{r7, lr}
    7222:	b086      	sub	sp, #24
    7224:	af00      	add	r7, sp, #0
    7226:	60f8      	str	r0, [r7, #12]
    7228:	60b9      	str	r1, [r7, #8]
    722a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    722c:	68bb      	ldr	r3, [r7, #8]
    722e:	f003 0304 	and.w	r3, r3, #4
    7232:	2b00      	cmp	r3, #0
    7234:	d101      	bne.n	723a <_spi_rx_check_and_receive+0x1a>
		return false;
    7236:	2300      	movs	r3, #0
    7238:	e022      	b.n	7280 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    723a:	68f8      	ldr	r0, [r7, #12]
    723c:	4b12      	ldr	r3, [pc, #72]	; (7288 <_spi_rx_check_and_receive+0x68>)
    723e:	4798      	blx	r3
    7240:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	685b      	ldr	r3, [r3, #4]
    7246:	2b00      	cmp	r3, #0
    7248:	d014      	beq.n	7274 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    724a:	687b      	ldr	r3, [r7, #4]
    724c:	685b      	ldr	r3, [r3, #4]
    724e:	1c59      	adds	r1, r3, #1
    7250:	687a      	ldr	r2, [r7, #4]
    7252:	6051      	str	r1, [r2, #4]
    7254:	697a      	ldr	r2, [r7, #20]
    7256:	b2d2      	uxtb	r2, r2
    7258:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    725a:	687b      	ldr	r3, [r7, #4]
    725c:	7c1b      	ldrb	r3, [r3, #16]
    725e:	2b01      	cmp	r3, #1
    7260:	d908      	bls.n	7274 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	685b      	ldr	r3, [r3, #4]
    7266:	1c59      	adds	r1, r3, #1
    7268:	687a      	ldr	r2, [r7, #4]
    726a:	6051      	str	r1, [r2, #4]
    726c:	697a      	ldr	r2, [r7, #20]
    726e:	0a12      	lsrs	r2, r2, #8
    7270:	b2d2      	uxtb	r2, r2
    7272:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	68db      	ldr	r3, [r3, #12]
    7278:	1c5a      	adds	r2, r3, #1
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	60da      	str	r2, [r3, #12]

	return true;
    727e:	2301      	movs	r3, #1
}
    7280:	4618      	mov	r0, r3
    7282:	3718      	adds	r7, #24
    7284:	46bd      	mov	sp, r7
    7286:	bd80      	pop	{r7, pc}
    7288:	00006685 	.word	0x00006685

0000728c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    728c:	b580      	push	{r7, lr}
    728e:	b086      	sub	sp, #24
    7290:	af00      	add	r7, sp, #0
    7292:	60f8      	str	r0, [r7, #12]
    7294:	60b9      	str	r1, [r7, #8]
    7296:	607a      	str	r2, [r7, #4]
    7298:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    729a:	68bb      	ldr	r3, [r7, #8]
    729c:	f003 0301 	and.w	r3, r3, #1
    72a0:	2b00      	cmp	r3, #0
    72a2:	d028      	beq.n	72f6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	681b      	ldr	r3, [r3, #0]
    72a8:	2b00      	cmp	r3, #0
    72aa:	d018      	beq.n	72de <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    72ac:	687b      	ldr	r3, [r7, #4]
    72ae:	681b      	ldr	r3, [r3, #0]
    72b0:	1c59      	adds	r1, r3, #1
    72b2:	687a      	ldr	r2, [r7, #4]
    72b4:	6011      	str	r1, [r2, #0]
    72b6:	781b      	ldrb	r3, [r3, #0]
    72b8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    72ba:	687b      	ldr	r3, [r7, #4]
    72bc:	7c1b      	ldrb	r3, [r3, #16]
    72be:	2b01      	cmp	r3, #1
    72c0:	d90f      	bls.n	72e2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	681b      	ldr	r3, [r3, #0]
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	021b      	lsls	r3, r3, #8
    72ca:	461a      	mov	r2, r3
    72cc:	697b      	ldr	r3, [r7, #20]
    72ce:	4313      	orrs	r3, r2
    72d0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	681b      	ldr	r3, [r3, #0]
    72d6:	1c5a      	adds	r2, r3, #1
    72d8:	687b      	ldr	r3, [r7, #4]
    72da:	601a      	str	r2, [r3, #0]
    72dc:	e001      	b.n	72e2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    72de:	887b      	ldrh	r3, [r7, #2]
    72e0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    72e2:	687b      	ldr	r3, [r7, #4]
    72e4:	689b      	ldr	r3, [r3, #8]
    72e6:	1c5a      	adds	r2, r3, #1
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    72ec:	6979      	ldr	r1, [r7, #20]
    72ee:	68f8      	ldr	r0, [r7, #12]
    72f0:	4b03      	ldr	r3, [pc, #12]	; (7300 <_spi_tx_check_and_send+0x74>)
    72f2:	4798      	blx	r3
    72f4:	e000      	b.n	72f8 <_spi_tx_check_and_send+0x6c>
		return;
    72f6:	bf00      	nop
}
    72f8:	3718      	adds	r7, #24
    72fa:	46bd      	mov	sp, r7
    72fc:	bd80      	pop	{r7, pc}
    72fe:	bf00      	nop
    7300:	00006669 	.word	0x00006669

00007304 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7304:	b580      	push	{r7, lr}
    7306:	b082      	sub	sp, #8
    7308:	af00      	add	r7, sp, #0
    730a:	6078      	str	r0, [r7, #4]
    730c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    730e:	687b      	ldr	r3, [r7, #4]
    7310:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7314:	2b00      	cmp	r3, #0
    7316:	d00b      	beq.n	7330 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7318:	f64f 71ff 	movw	r1, #65535	; 0xffff
    731c:	6838      	ldr	r0, [r7, #0]
    731e:	4b07      	ldr	r3, [pc, #28]	; (733c <_spi_err_check+0x38>)
    7320:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7322:	2180      	movs	r1, #128	; 0x80
    7324:	6838      	ldr	r0, [r7, #0]
    7326:	4b06      	ldr	r3, [pc, #24]	; (7340 <_spi_err_check+0x3c>)
    7328:	4798      	blx	r3
		return ERR_OVERFLOW;
    732a:	f06f 0312 	mvn.w	r3, #18
    732e:	e000      	b.n	7332 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7330:	2300      	movs	r3, #0
}
    7332:	4618      	mov	r0, r3
    7334:	3708      	adds	r7, #8
    7336:	46bd      	mov	sp, r7
    7338:	bd80      	pop	{r7, pc}
    733a:	bf00      	nop
    733c:	000066bd 	.word	0x000066bd
    7340:	00006289 	.word	0x00006289

00007344 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7344:	b590      	push	{r4, r7, lr}
    7346:	b08b      	sub	sp, #44	; 0x2c
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
    734c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	681b      	ldr	r3, [r3, #0]
    7352:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7354:	2300      	movs	r3, #0
    7356:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7358:	683b      	ldr	r3, [r7, #0]
    735a:	681b      	ldr	r3, [r3, #0]
    735c:	60bb      	str	r3, [r7, #8]
    735e:	683b      	ldr	r3, [r7, #0]
    7360:	685b      	ldr	r3, [r3, #4]
    7362:	60fb      	str	r3, [r7, #12]
    7364:	2300      	movs	r3, #0
    7366:	613b      	str	r3, [r7, #16]
    7368:	2300      	movs	r3, #0
    736a:	617b      	str	r3, [r7, #20]
    736c:	687b      	ldr	r3, [r7, #4]
    736e:	791b      	ldrb	r3, [r3, #4]
    7370:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	2b00      	cmp	r3, #0
    7376:	d004      	beq.n	7382 <_spi_m_sync_trans+0x3e>
    7378:	6a3b      	ldr	r3, [r7, #32]
    737a:	2b00      	cmp	r3, #0
    737c:	d001      	beq.n	7382 <_spi_m_sync_trans+0x3e>
    737e:	2301      	movs	r3, #1
    7380:	e000      	b.n	7384 <_spi_m_sync_trans+0x40>
    7382:	2300      	movs	r3, #0
    7384:	f003 0301 	and.w	r3, r3, #1
    7388:	b2db      	uxtb	r3, r3
    738a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    738e:	492b      	ldr	r1, [pc, #172]	; (743c <_spi_m_sync_trans+0xf8>)
    7390:	4618      	mov	r0, r3
    7392:	4b2b      	ldr	r3, [pc, #172]	; (7440 <_spi_m_sync_trans+0xfc>)
    7394:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7396:	2107      	movs	r1, #7
    7398:	6a38      	ldr	r0, [r7, #32]
    739a:	4b2a      	ldr	r3, [pc, #168]	; (7444 <_spi_m_sync_trans+0x100>)
    739c:	4798      	blx	r3
    739e:	4603      	mov	r3, r0
    73a0:	2b00      	cmp	r3, #0
    73a2:	d002      	beq.n	73aa <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    73a4:	f06f 0303 	mvn.w	r3, #3
    73a8:	e043      	b.n	7432 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    73aa:	6a38      	ldr	r0, [r7, #32]
    73ac:	4b26      	ldr	r3, [pc, #152]	; (7448 <_spi_m_sync_trans+0x104>)
    73ae:	4798      	blx	r3
    73b0:	4603      	mov	r3, r0
    73b2:	f083 0301 	eor.w	r3, r3, #1
    73b6:	b2db      	uxtb	r3, r3
    73b8:	2b00      	cmp	r3, #0
    73ba:	d002      	beq.n	73c2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    73bc:	f06f 0313 	mvn.w	r3, #19
    73c0:	e037      	b.n	7432 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    73c2:	6a38      	ldr	r0, [r7, #32]
    73c4:	4b21      	ldr	r3, [pc, #132]	; (744c <_spi_m_sync_trans+0x108>)
    73c6:	4798      	blx	r3
    73c8:	4603      	mov	r3, r0
    73ca:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    73cc:	f107 0308 	add.w	r3, r7, #8
    73d0:	461a      	mov	r2, r3
    73d2:	69f9      	ldr	r1, [r7, #28]
    73d4:	6a38      	ldr	r0, [r7, #32]
    73d6:	4b1e      	ldr	r3, [pc, #120]	; (7450 <_spi_m_sync_trans+0x10c>)
    73d8:	4798      	blx	r3
    73da:	4603      	mov	r3, r0
    73dc:	f083 0301 	eor.w	r3, r3, #1
    73e0:	b2db      	uxtb	r3, r3
    73e2:	2b00      	cmp	r3, #0
    73e4:	d00b      	beq.n	73fe <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    73e6:	697a      	ldr	r2, [r7, #20]
    73e8:	693b      	ldr	r3, [r7, #16]
    73ea:	429a      	cmp	r2, r3
    73ec:	d307      	bcc.n	73fe <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    73ee:	687b      	ldr	r3, [r7, #4]
    73f0:	88db      	ldrh	r3, [r3, #6]
    73f2:	f107 0208 	add.w	r2, r7, #8
    73f6:	69f9      	ldr	r1, [r7, #28]
    73f8:	6a38      	ldr	r0, [r7, #32]
    73fa:	4c16      	ldr	r4, [pc, #88]	; (7454 <_spi_m_sync_trans+0x110>)
    73fc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    73fe:	6a39      	ldr	r1, [r7, #32]
    7400:	69f8      	ldr	r0, [r7, #28]
    7402:	4b15      	ldr	r3, [pc, #84]	; (7458 <_spi_m_sync_trans+0x114>)
    7404:	4798      	blx	r3
    7406:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    740a:	2b00      	cmp	r3, #0
    740c:	db0c      	blt.n	7428 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    740e:	693a      	ldr	r2, [r7, #16]
    7410:	683b      	ldr	r3, [r7, #0]
    7412:	689b      	ldr	r3, [r3, #8]
    7414:	429a      	cmp	r2, r3
    7416:	d3d4      	bcc.n	73c2 <_spi_m_sync_trans+0x7e>
    7418:	697a      	ldr	r2, [r7, #20]
    741a:	683b      	ldr	r3, [r7, #0]
    741c:	689b      	ldr	r3, [r3, #8]
    741e:	429a      	cmp	r2, r3
    7420:	d3cf      	bcc.n	73c2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7422:	693b      	ldr	r3, [r7, #16]
    7424:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7426:	e000      	b.n	742a <_spi_m_sync_trans+0xe6>
			break;
    7428:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    742a:	6a38      	ldr	r0, [r7, #32]
    742c:	4b0b      	ldr	r3, [pc, #44]	; (745c <_spi_m_sync_trans+0x118>)
    742e:	4798      	blx	r3

	return rc;
    7430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7432:	4618      	mov	r0, r3
    7434:	372c      	adds	r7, #44	; 0x2c
    7436:	46bd      	mov	sp, r7
    7438:	bd90      	pop	{r4, r7, pc}
    743a:	bf00      	nop
    743c:	00010ff0 	.word	0x00010ff0
    7440:	00003c61 	.word	0x00003c61
    7444:	000061d1 	.word	0x000061d1
    7448:	0000637d 	.word	0x0000637d
    744c:	0000626f 	.word	0x0000626f
    7450:	00007221 	.word	0x00007221
    7454:	0000728d 	.word	0x0000728d
    7458:	00007305 	.word	0x00007305
    745c:	000071f1 	.word	0x000071f1

00007460 <__NVIC_EnableIRQ>:
{
    7460:	b480      	push	{r7}
    7462:	b083      	sub	sp, #12
    7464:	af00      	add	r7, sp, #0
    7466:	4603      	mov	r3, r0
    7468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    746a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    746e:	2b00      	cmp	r3, #0
    7470:	db0b      	blt.n	748a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7472:	4909      	ldr	r1, [pc, #36]	; (7498 <__NVIC_EnableIRQ+0x38>)
    7474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7478:	095b      	lsrs	r3, r3, #5
    747a:	88fa      	ldrh	r2, [r7, #6]
    747c:	f002 021f 	and.w	r2, r2, #31
    7480:	2001      	movs	r0, #1
    7482:	fa00 f202 	lsl.w	r2, r0, r2
    7486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    748a:	bf00      	nop
    748c:	370c      	adds	r7, #12
    748e:	46bd      	mov	sp, r7
    7490:	f85d 7b04 	ldr.w	r7, [sp], #4
    7494:	4770      	bx	lr
    7496:	bf00      	nop
    7498:	e000e100 	.word	0xe000e100

0000749c <__NVIC_DisableIRQ>:
{
    749c:	b480      	push	{r7}
    749e:	b083      	sub	sp, #12
    74a0:	af00      	add	r7, sp, #0
    74a2:	4603      	mov	r3, r0
    74a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74aa:	2b00      	cmp	r3, #0
    74ac:	db10      	blt.n	74d0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74ae:	490b      	ldr	r1, [pc, #44]	; (74dc <__NVIC_DisableIRQ+0x40>)
    74b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74b4:	095b      	lsrs	r3, r3, #5
    74b6:	88fa      	ldrh	r2, [r7, #6]
    74b8:	f002 021f 	and.w	r2, r2, #31
    74bc:	2001      	movs	r0, #1
    74be:	fa00 f202 	lsl.w	r2, r0, r2
    74c2:	3320      	adds	r3, #32
    74c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    74c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    74cc:	f3bf 8f6f 	isb	sy
}
    74d0:	bf00      	nop
    74d2:	370c      	adds	r7, #12
    74d4:	46bd      	mov	sp, r7
    74d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74da:	4770      	bx	lr
    74dc:	e000e100 	.word	0xe000e100

000074e0 <__NVIC_ClearPendingIRQ>:
{
    74e0:	b480      	push	{r7}
    74e2:	b083      	sub	sp, #12
    74e4:	af00      	add	r7, sp, #0
    74e6:	4603      	mov	r3, r0
    74e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74ee:	2b00      	cmp	r3, #0
    74f0:	db0c      	blt.n	750c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74f2:	4909      	ldr	r1, [pc, #36]	; (7518 <__NVIC_ClearPendingIRQ+0x38>)
    74f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74f8:	095b      	lsrs	r3, r3, #5
    74fa:	88fa      	ldrh	r2, [r7, #6]
    74fc:	f002 021f 	and.w	r2, r2, #31
    7500:	2001      	movs	r0, #1
    7502:	fa00 f202 	lsl.w	r2, r0, r2
    7506:	3360      	adds	r3, #96	; 0x60
    7508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    750c:	bf00      	nop
    750e:	370c      	adds	r7, #12
    7510:	46bd      	mov	sp, r7
    7512:	f85d 7b04 	ldr.w	r7, [sp], #4
    7516:	4770      	bx	lr
    7518:	e000e100 	.word	0xe000e100

0000751c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    751c:	b480      	push	{r7}
    751e:	b083      	sub	sp, #12
    7520:	af00      	add	r7, sp, #0
    7522:	6078      	str	r0, [r7, #4]
    7524:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7526:	bf00      	nop
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	689a      	ldr	r2, [r3, #8]
    752c:	683b      	ldr	r3, [r7, #0]
    752e:	4013      	ands	r3, r2
    7530:	2b00      	cmp	r3, #0
    7532:	d1f9      	bne.n	7528 <hri_tcc_wait_for_sync+0xc>
	};
}
    7534:	bf00      	nop
    7536:	370c      	adds	r7, #12
    7538:	46bd      	mov	sp, r7
    753a:	f85d 7b04 	ldr.w	r7, [sp], #4
    753e:	4770      	bx	lr

00007540 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7540:	b480      	push	{r7}
    7542:	b083      	sub	sp, #12
    7544:	af00      	add	r7, sp, #0
    7546:	6078      	str	r0, [r7, #4]
    7548:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	689a      	ldr	r2, [r3, #8]
    754e:	683b      	ldr	r3, [r7, #0]
    7550:	4013      	ands	r3, r2
    7552:	2b00      	cmp	r3, #0
    7554:	bf14      	ite	ne
    7556:	2301      	movne	r3, #1
    7558:	2300      	moveq	r3, #0
    755a:	b2db      	uxtb	r3, r3
}
    755c:	4618      	mov	r0, r3
    755e:	370c      	adds	r7, #12
    7560:	46bd      	mov	sp, r7
    7562:	f85d 7b04 	ldr.w	r7, [sp], #4
    7566:	4770      	bx	lr

00007568 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7568:	b480      	push	{r7}
    756a:	b083      	sub	sp, #12
    756c:	af00      	add	r7, sp, #0
    756e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7574:	f003 0301 	and.w	r3, r3, #1
    7578:	2b00      	cmp	r3, #0
    757a:	bf14      	ite	ne
    757c:	2301      	movne	r3, #1
    757e:	2300      	moveq	r3, #0
    7580:	b2db      	uxtb	r3, r3
}
    7582:	4618      	mov	r0, r3
    7584:	370c      	adds	r7, #12
    7586:	46bd      	mov	sp, r7
    7588:	f85d 7b04 	ldr.w	r7, [sp], #4
    758c:	4770      	bx	lr

0000758e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    758e:	b480      	push	{r7}
    7590:	b083      	sub	sp, #12
    7592:	af00      	add	r7, sp, #0
    7594:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7596:	687b      	ldr	r3, [r7, #4]
    7598:	2201      	movs	r2, #1
    759a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    759c:	bf00      	nop
    759e:	370c      	adds	r7, #12
    75a0:	46bd      	mov	sp, r7
    75a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75a6:	4770      	bx	lr

000075a8 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    75a8:	b480      	push	{r7}
    75aa:	b083      	sub	sp, #12
    75ac:	af00      	add	r7, sp, #0
    75ae:	6078      	str	r0, [r7, #4]
    75b0:	460b      	mov	r3, r1
    75b2:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	78fa      	ldrb	r2, [r7, #3]
    75b8:	715a      	strb	r2, [r3, #5]
}
    75ba:	bf00      	nop
    75bc:	370c      	adds	r7, #12
    75be:	46bd      	mov	sp, r7
    75c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    75c4:	4770      	bx	lr

000075c6 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    75c6:	b480      	push	{r7}
    75c8:	b083      	sub	sp, #12
    75ca:	af00      	add	r7, sp, #0
    75cc:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    75ce:	687b      	ldr	r3, [r7, #4]
    75d0:	2201      	movs	r2, #1
    75d2:	629a      	str	r2, [r3, #40]	; 0x28
}
    75d4:	bf00      	nop
    75d6:	370c      	adds	r7, #12
    75d8:	46bd      	mov	sp, r7
    75da:	f85d 7b04 	ldr.w	r7, [sp], #4
    75de:	4770      	bx	lr

000075e0 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    75e0:	b580      	push	{r7, lr}
    75e2:	b082      	sub	sp, #8
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	681b      	ldr	r3, [r3, #0]
    75ec:	f043 0201 	orr.w	r2, r3, #1
    75f0:	687b      	ldr	r3, [r7, #4]
    75f2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    75f4:	2101      	movs	r1, #1
    75f6:	6878      	ldr	r0, [r7, #4]
    75f8:	4b02      	ldr	r3, [pc, #8]	; (7604 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    75fa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    75fc:	bf00      	nop
    75fe:	3708      	adds	r7, #8
    7600:	46bd      	mov	sp, r7
    7602:	bd80      	pop	{r7, pc}
    7604:	0000751d 	.word	0x0000751d

00007608 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7608:	b580      	push	{r7, lr}
    760a:	b082      	sub	sp, #8
    760c:	af00      	add	r7, sp, #0
    760e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7610:	687b      	ldr	r3, [r7, #4]
    7612:	681b      	ldr	r3, [r3, #0]
    7614:	f043 0202 	orr.w	r2, r3, #2
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    761c:	2103      	movs	r1, #3
    761e:	6878      	ldr	r0, [r7, #4]
    7620:	4b02      	ldr	r3, [pc, #8]	; (762c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7622:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7624:	bf00      	nop
    7626:	3708      	adds	r7, #8
    7628:	46bd      	mov	sp, r7
    762a:	bd80      	pop	{r7, pc}
    762c:	0000751d 	.word	0x0000751d

00007630 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7630:	b580      	push	{r7, lr}
    7632:	b084      	sub	sp, #16
    7634:	af00      	add	r7, sp, #0
    7636:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7638:	2103      	movs	r1, #3
    763a:	6878      	ldr	r0, [r7, #4]
    763c:	4b09      	ldr	r3, [pc, #36]	; (7664 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    763e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	681b      	ldr	r3, [r3, #0]
    7644:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7646:	68fb      	ldr	r3, [r7, #12]
    7648:	085b      	lsrs	r3, r3, #1
    764a:	f003 0301 	and.w	r3, r3, #1
    764e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7650:	68fb      	ldr	r3, [r7, #12]
    7652:	2b00      	cmp	r3, #0
    7654:	bf14      	ite	ne
    7656:	2301      	movne	r3, #1
    7658:	2300      	moveq	r3, #0
    765a:	b2db      	uxtb	r3, r3
}
    765c:	4618      	mov	r0, r3
    765e:	3710      	adds	r7, #16
    7660:	46bd      	mov	sp, r7
    7662:	bd80      	pop	{r7, pc}
    7664:	0000751d 	.word	0x0000751d

00007668 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7668:	b580      	push	{r7, lr}
    766a:	b082      	sub	sp, #8
    766c:	af00      	add	r7, sp, #0
    766e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	681b      	ldr	r3, [r3, #0]
    7674:	f023 0202 	bic.w	r2, r3, #2
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    767c:	2103      	movs	r1, #3
    767e:	6878      	ldr	r0, [r7, #4]
    7680:	4b02      	ldr	r3, [pc, #8]	; (768c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7682:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7684:	bf00      	nop
    7686:	3708      	adds	r7, #8
    7688:	46bd      	mov	sp, r7
    768a:	bd80      	pop	{r7, pc}
    768c:	0000751d 	.word	0x0000751d

00007690 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7690:	b580      	push	{r7, lr}
    7692:	b084      	sub	sp, #16
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
    7698:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    769a:	2103      	movs	r1, #3
    769c:	6878      	ldr	r0, [r7, #4]
    769e:	4b07      	ldr	r3, [pc, #28]	; (76bc <hri_tcc_get_CTRLA_reg+0x2c>)
    76a0:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    76a2:	687b      	ldr	r3, [r7, #4]
    76a4:	681b      	ldr	r3, [r3, #0]
    76a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    76a8:	68fa      	ldr	r2, [r7, #12]
    76aa:	683b      	ldr	r3, [r7, #0]
    76ac:	4013      	ands	r3, r2
    76ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    76b0:	68fb      	ldr	r3, [r7, #12]
}
    76b2:	4618      	mov	r0, r3
    76b4:	3710      	adds	r7, #16
    76b6:	46bd      	mov	sp, r7
    76b8:	bd80      	pop	{r7, pc}
    76ba:	bf00      	nop
    76bc:	0000751d 	.word	0x0000751d

000076c0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    76c0:	b580      	push	{r7, lr}
    76c2:	b082      	sub	sp, #8
    76c4:	af00      	add	r7, sp, #0
    76c6:	6078      	str	r0, [r7, #4]
    76c8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    76ca:	687b      	ldr	r3, [r7, #4]
    76cc:	683a      	ldr	r2, [r7, #0]
    76ce:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    76d0:	2103      	movs	r1, #3
    76d2:	6878      	ldr	r0, [r7, #4]
    76d4:	4b02      	ldr	r3, [pc, #8]	; (76e0 <hri_tcc_write_CTRLA_reg+0x20>)
    76d6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    76d8:	bf00      	nop
    76da:	3708      	adds	r7, #8
    76dc:	46bd      	mov	sp, r7
    76de:	bd80      	pop	{r7, pc}
    76e0:	0000751d 	.word	0x0000751d

000076e4 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    76e4:	b480      	push	{r7}
    76e6:	b083      	sub	sp, #12
    76e8:	af00      	add	r7, sp, #0
    76ea:	6078      	str	r0, [r7, #4]
    76ec:	460b      	mov	r3, r1
    76ee:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	78fa      	ldrb	r2, [r7, #3]
    76f4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    76f6:	bf00      	nop
    76f8:	370c      	adds	r7, #12
    76fa:	46bd      	mov	sp, r7
    76fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7700:	4770      	bx	lr

00007702 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7702:	b480      	push	{r7}
    7704:	b083      	sub	sp, #12
    7706:	af00      	add	r7, sp, #0
    7708:	6078      	str	r0, [r7, #4]
    770a:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	683a      	ldr	r2, [r7, #0]
    7710:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7712:	bf00      	nop
    7714:	370c      	adds	r7, #12
    7716:	46bd      	mov	sp, r7
    7718:	f85d 7b04 	ldr.w	r7, [sp], #4
    771c:	4770      	bx	lr
	...

00007720 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7720:	b580      	push	{r7, lr}
    7722:	b082      	sub	sp, #8
    7724:	af00      	add	r7, sp, #0
    7726:	6078      	str	r0, [r7, #4]
    7728:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	683a      	ldr	r2, [r7, #0]
    772e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7730:	2180      	movs	r1, #128	; 0x80
    7732:	6878      	ldr	r0, [r7, #4]
    7734:	4b02      	ldr	r3, [pc, #8]	; (7740 <hri_tcc_write_PER_reg+0x20>)
    7736:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7738:	bf00      	nop
    773a:	3708      	adds	r7, #8
    773c:	46bd      	mov	sp, r7
    773e:	bd80      	pop	{r7, pc}
    7740:	0000751d 	.word	0x0000751d

00007744 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7744:	b580      	push	{r7, lr}
    7746:	b082      	sub	sp, #8
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    774c:	2180      	movs	r1, #128	; 0x80
    774e:	6878      	ldr	r0, [r7, #4]
    7750:	4b03      	ldr	r3, [pc, #12]	; (7760 <hri_tcc_read_PER_reg+0x1c>)
    7752:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7758:	4618      	mov	r0, r3
    775a:	3708      	adds	r7, #8
    775c:	46bd      	mov	sp, r7
    775e:	bd80      	pop	{r7, pc}
    7760:	0000751d 	.word	0x0000751d

00007764 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7764:	b480      	push	{r7}
    7766:	b083      	sub	sp, #12
    7768:	af00      	add	r7, sp, #0
    776a:	6078      	str	r0, [r7, #4]
    776c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	4a09      	ldr	r2, [pc, #36]	; (7798 <_tcc_init_irq_param+0x34>)
    7772:	4293      	cmp	r3, r2
    7774:	d102      	bne.n	777c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7776:	4a09      	ldr	r2, [pc, #36]	; (779c <_tcc_init_irq_param+0x38>)
    7778:	683b      	ldr	r3, [r7, #0]
    777a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    777c:	687b      	ldr	r3, [r7, #4]
    777e:	4a08      	ldr	r2, [pc, #32]	; (77a0 <_tcc_init_irq_param+0x3c>)
    7780:	4293      	cmp	r3, r2
    7782:	d102      	bne.n	778a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7784:	4a07      	ldr	r2, [pc, #28]	; (77a4 <_tcc_init_irq_param+0x40>)
    7786:	683b      	ldr	r3, [r7, #0]
    7788:	6013      	str	r3, [r2, #0]
	}
}
    778a:	bf00      	nop
    778c:	370c      	adds	r7, #12
    778e:	46bd      	mov	sp, r7
    7790:	f85d 7b04 	ldr.w	r7, [sp], #4
    7794:	4770      	bx	lr
    7796:	bf00      	nop
    7798:	41016000 	.word	0x41016000
    779c:	20000c40 	.word	0x20000c40
    77a0:	41018000 	.word	0x41018000
    77a4:	20000c44 	.word	0x20000c44

000077a8 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b084      	sub	sp, #16
    77ac:	af00      	add	r7, sp, #0
    77ae:	6078      	str	r0, [r7, #4]
    77b0:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    77b2:	6838      	ldr	r0, [r7, #0]
    77b4:	4b33      	ldr	r3, [pc, #204]	; (7884 <_tcc_timer_init+0xdc>)
    77b6:	4798      	blx	r3
    77b8:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    77ba:	68fb      	ldr	r3, [r7, #12]
    77bc:	2b00      	cmp	r3, #0
    77be:	d102      	bne.n	77c6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    77c0:	f06f 0309 	mvn.w	r3, #9
    77c4:	e05a      	b.n	787c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    77c6:	687b      	ldr	r3, [r7, #4]
    77c8:	683a      	ldr	r2, [r7, #0]
    77ca:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    77cc:	2101      	movs	r1, #1
    77ce:	6838      	ldr	r0, [r7, #0]
    77d0:	4b2d      	ldr	r3, [pc, #180]	; (7888 <_tcc_timer_init+0xe0>)
    77d2:	4798      	blx	r3
    77d4:	4603      	mov	r3, r0
    77d6:	f083 0301 	eor.w	r3, r3, #1
    77da:	b2db      	uxtb	r3, r3
    77dc:	2b00      	cmp	r3, #0
    77de:	d011      	beq.n	7804 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    77e0:	2102      	movs	r1, #2
    77e2:	6838      	ldr	r0, [r7, #0]
    77e4:	4b29      	ldr	r3, [pc, #164]	; (788c <_tcc_timer_init+0xe4>)
    77e6:	4798      	blx	r3
    77e8:	4603      	mov	r3, r0
    77ea:	2b00      	cmp	r3, #0
    77ec:	d006      	beq.n	77fc <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    77ee:	6838      	ldr	r0, [r7, #0]
    77f0:	4b27      	ldr	r3, [pc, #156]	; (7890 <_tcc_timer_init+0xe8>)
    77f2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    77f4:	2102      	movs	r1, #2
    77f6:	6838      	ldr	r0, [r7, #0]
    77f8:	4b26      	ldr	r3, [pc, #152]	; (7894 <_tcc_timer_init+0xec>)
    77fa:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    77fc:	2101      	movs	r1, #1
    77fe:	6838      	ldr	r0, [r7, #0]
    7800:	4b25      	ldr	r3, [pc, #148]	; (7898 <_tcc_timer_init+0xf0>)
    7802:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7804:	2101      	movs	r1, #1
    7806:	6838      	ldr	r0, [r7, #0]
    7808:	4b22      	ldr	r3, [pc, #136]	; (7894 <_tcc_timer_init+0xec>)
    780a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    780c:	68fb      	ldr	r3, [r7, #12]
    780e:	689b      	ldr	r3, [r3, #8]
    7810:	4619      	mov	r1, r3
    7812:	6838      	ldr	r0, [r7, #0]
    7814:	4b20      	ldr	r3, [pc, #128]	; (7898 <_tcc_timer_init+0xf0>)
    7816:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7818:	68fb      	ldr	r3, [r7, #12]
    781a:	7b1b      	ldrb	r3, [r3, #12]
    781c:	4619      	mov	r1, r3
    781e:	6838      	ldr	r0, [r7, #0]
    7820:	4b1e      	ldr	r3, [pc, #120]	; (789c <_tcc_timer_init+0xf4>)
    7822:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7824:	68fb      	ldr	r3, [r7, #12]
    7826:	7b5b      	ldrb	r3, [r3, #13]
    7828:	4619      	mov	r1, r3
    782a:	6838      	ldr	r0, [r7, #0]
    782c:	4b1c      	ldr	r3, [pc, #112]	; (78a0 <_tcc_timer_init+0xf8>)
    782e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7830:	68fb      	ldr	r3, [r7, #12]
    7832:	691b      	ldr	r3, [r3, #16]
    7834:	4619      	mov	r1, r3
    7836:	6838      	ldr	r0, [r7, #0]
    7838:	4b1a      	ldr	r3, [pc, #104]	; (78a4 <_tcc_timer_init+0xfc>)
    783a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    783c:	68fb      	ldr	r3, [r7, #12]
    783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7840:	4619      	mov	r1, r3
    7842:	6838      	ldr	r0, [r7, #0]
    7844:	4b18      	ldr	r3, [pc, #96]	; (78a8 <_tcc_timer_init+0x100>)
    7846:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7848:	6838      	ldr	r0, [r7, #0]
    784a:	4b18      	ldr	r3, [pc, #96]	; (78ac <_tcc_timer_init+0x104>)
    784c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    784e:	6879      	ldr	r1, [r7, #4]
    7850:	6838      	ldr	r0, [r7, #0]
    7852:	4b17      	ldr	r3, [pc, #92]	; (78b0 <_tcc_timer_init+0x108>)
    7854:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7856:	68fb      	ldr	r3, [r7, #12]
    7858:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    785c:	4618      	mov	r0, r3
    785e:	4b15      	ldr	r3, [pc, #84]	; (78b4 <_tcc_timer_init+0x10c>)
    7860:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7862:	68fb      	ldr	r3, [r7, #12]
    7864:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7868:	4618      	mov	r0, r3
    786a:	4b13      	ldr	r3, [pc, #76]	; (78b8 <_tcc_timer_init+0x110>)
    786c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    786e:	68fb      	ldr	r3, [r7, #12]
    7870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7874:	4618      	mov	r0, r3
    7876:	4b11      	ldr	r3, [pc, #68]	; (78bc <_tcc_timer_init+0x114>)
    7878:	4798      	blx	r3

	return ERR_NONE;
    787a:	2300      	movs	r3, #0
}
    787c:	4618      	mov	r0, r3
    787e:	3710      	adds	r7, #16
    7880:	46bd      	mov	sp, r7
    7882:	bd80      	pop	{r7, pc}
    7884:	00007a71 	.word	0x00007a71
    7888:	00007541 	.word	0x00007541
    788c:	00007691 	.word	0x00007691
    7890:	00007669 	.word	0x00007669
    7894:	0000751d 	.word	0x0000751d
    7898:	000076c1 	.word	0x000076c1
    789c:	000075a9 	.word	0x000075a9
    78a0:	000076e5 	.word	0x000076e5
    78a4:	00007703 	.word	0x00007703
    78a8:	00007721 	.word	0x00007721
    78ac:	000075c7 	.word	0x000075c7
    78b0:	00007765 	.word	0x00007765
    78b4:	0000749d 	.word	0x0000749d
    78b8:	000074e1 	.word	0x000074e1
    78bc:	00007461 	.word	0x00007461

000078c0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    78c0:	b580      	push	{r7, lr}
    78c2:	b084      	sub	sp, #16
    78c4:	af00      	add	r7, sp, #0
    78c6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    78c8:	687b      	ldr	r3, [r7, #4]
    78ca:	68db      	ldr	r3, [r3, #12]
    78cc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    78ce:	68f8      	ldr	r0, [r7, #12]
    78d0:	4b0a      	ldr	r3, [pc, #40]	; (78fc <_tcc_timer_deinit+0x3c>)
    78d2:	4798      	blx	r3
    78d4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    78d6:	68bb      	ldr	r3, [r7, #8]
    78d8:	2b00      	cmp	r3, #0
    78da:	d00b      	beq.n	78f4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    78dc:	68bb      	ldr	r3, [r7, #8]
    78de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    78e2:	4618      	mov	r0, r3
    78e4:	4b06      	ldr	r3, [pc, #24]	; (7900 <_tcc_timer_deinit+0x40>)
    78e6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    78e8:	68f8      	ldr	r0, [r7, #12]
    78ea:	4b06      	ldr	r3, [pc, #24]	; (7904 <_tcc_timer_deinit+0x44>)
    78ec:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    78ee:	68f8      	ldr	r0, [r7, #12]
    78f0:	4b05      	ldr	r3, [pc, #20]	; (7908 <_tcc_timer_deinit+0x48>)
    78f2:	4798      	blx	r3
	}
}
    78f4:	bf00      	nop
    78f6:	3710      	adds	r7, #16
    78f8:	46bd      	mov	sp, r7
    78fa:	bd80      	pop	{r7, pc}
    78fc:	00007a71 	.word	0x00007a71
    7900:	0000749d 	.word	0x0000749d
    7904:	00007669 	.word	0x00007669
    7908:	000075e1 	.word	0x000075e1

0000790c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    790c:	b580      	push	{r7, lr}
    790e:	b082      	sub	sp, #8
    7910:	af00      	add	r7, sp, #0
    7912:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	68db      	ldr	r3, [r3, #12]
    7918:	4618      	mov	r0, r3
    791a:	4b03      	ldr	r3, [pc, #12]	; (7928 <_tcc_timer_start+0x1c>)
    791c:	4798      	blx	r3
}
    791e:	bf00      	nop
    7920:	3708      	adds	r7, #8
    7922:	46bd      	mov	sp, r7
    7924:	bd80      	pop	{r7, pc}
    7926:	bf00      	nop
    7928:	00007609 	.word	0x00007609

0000792c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    792c:	b580      	push	{r7, lr}
    792e:	b082      	sub	sp, #8
    7930:	af00      	add	r7, sp, #0
    7932:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	68db      	ldr	r3, [r3, #12]
    7938:	4618      	mov	r0, r3
    793a:	4b03      	ldr	r3, [pc, #12]	; (7948 <_tcc_timer_stop+0x1c>)
    793c:	4798      	blx	r3
}
    793e:	bf00      	nop
    7940:	3708      	adds	r7, #8
    7942:	46bd      	mov	sp, r7
    7944:	bd80      	pop	{r7, pc}
    7946:	bf00      	nop
    7948:	00007669 	.word	0x00007669

0000794c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    794c:	b580      	push	{r7, lr}
    794e:	b082      	sub	sp, #8
    7950:	af00      	add	r7, sp, #0
    7952:	6078      	str	r0, [r7, #4]
    7954:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	68db      	ldr	r3, [r3, #12]
    795a:	6839      	ldr	r1, [r7, #0]
    795c:	4618      	mov	r0, r3
    795e:	4b03      	ldr	r3, [pc, #12]	; (796c <_tcc_timer_set_period+0x20>)
    7960:	4798      	blx	r3
}
    7962:	bf00      	nop
    7964:	3708      	adds	r7, #8
    7966:	46bd      	mov	sp, r7
    7968:	bd80      	pop	{r7, pc}
    796a:	bf00      	nop
    796c:	00007721 	.word	0x00007721

00007970 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7970:	b580      	push	{r7, lr}
    7972:	b082      	sub	sp, #8
    7974:	af00      	add	r7, sp, #0
    7976:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7978:	687b      	ldr	r3, [r7, #4]
    797a:	68db      	ldr	r3, [r3, #12]
    797c:	4618      	mov	r0, r3
    797e:	4b03      	ldr	r3, [pc, #12]	; (798c <_tcc_timer_get_period+0x1c>)
    7980:	4798      	blx	r3
    7982:	4603      	mov	r3, r0
}
    7984:	4618      	mov	r0, r3
    7986:	3708      	adds	r7, #8
    7988:	46bd      	mov	sp, r7
    798a:	bd80      	pop	{r7, pc}
    798c:	00007745 	.word	0x00007745

00007990 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7990:	b580      	push	{r7, lr}
    7992:	b082      	sub	sp, #8
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	68db      	ldr	r3, [r3, #12]
    799c:	4618      	mov	r0, r3
    799e:	4b03      	ldr	r3, [pc, #12]	; (79ac <_tcc_timer_is_started+0x1c>)
    79a0:	4798      	blx	r3
    79a2:	4603      	mov	r3, r0
}
    79a4:	4618      	mov	r0, r3
    79a6:	3708      	adds	r7, #8
    79a8:	46bd      	mov	sp, r7
    79aa:	bd80      	pop	{r7, pc}
    79ac:	00007631 	.word	0x00007631

000079b0 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    79b0:	b480      	push	{r7}
    79b2:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    79b4:	4b02      	ldr	r3, [pc, #8]	; (79c0 <_tcc_get_timer+0x10>)
}
    79b6:	4618      	mov	r0, r3
    79b8:	46bd      	mov	sp, r7
    79ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    79be:	4770      	bx	lr
    79c0:	200000c4 	.word	0x200000c4

000079c4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    79c4:	b580      	push	{r7, lr}
    79c6:	b084      	sub	sp, #16
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	68db      	ldr	r3, [r3, #12]
    79d0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    79d2:	68f8      	ldr	r0, [r7, #12]
    79d4:	4b08      	ldr	r3, [pc, #32]	; (79f8 <_tcc_timer_set_irq+0x34>)
    79d6:	4798      	blx	r3
    79d8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    79da:	68bb      	ldr	r3, [r7, #8]
    79dc:	2b00      	cmp	r3, #0
    79de:	d006      	beq.n	79ee <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    79e0:	68bb      	ldr	r3, [r7, #8]
    79e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    79e6:	b2db      	uxtb	r3, r3
    79e8:	4618      	mov	r0, r3
    79ea:	4b04      	ldr	r3, [pc, #16]	; (79fc <_tcc_timer_set_irq+0x38>)
    79ec:	4798      	blx	r3
	}
}
    79ee:	bf00      	nop
    79f0:	3710      	adds	r7, #16
    79f2:	46bd      	mov	sp, r7
    79f4:	bd80      	pop	{r7, pc}
    79f6:	bf00      	nop
    79f8:	00007a71 	.word	0x00007a71
    79fc:	000044ad 	.word	0x000044ad

00007a00 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7a00:	b580      	push	{r7, lr}
    7a02:	b084      	sub	sp, #16
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	68db      	ldr	r3, [r3, #12]
    7a0c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7a0e:	68f8      	ldr	r0, [r7, #12]
    7a10:	4b07      	ldr	r3, [pc, #28]	; (7a30 <tcc_interrupt_handler+0x30>)
    7a12:	4798      	blx	r3
    7a14:	4603      	mov	r3, r0
    7a16:	2b00      	cmp	r3, #0
    7a18:	d006      	beq.n	7a28 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7a1a:	68f8      	ldr	r0, [r7, #12]
    7a1c:	4b05      	ldr	r3, [pc, #20]	; (7a34 <tcc_interrupt_handler+0x34>)
    7a1e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	681b      	ldr	r3, [r3, #0]
    7a24:	6878      	ldr	r0, [r7, #4]
    7a26:	4798      	blx	r3
	}
}
    7a28:	bf00      	nop
    7a2a:	3710      	adds	r7, #16
    7a2c:	46bd      	mov	sp, r7
    7a2e:	bd80      	pop	{r7, pc}
    7a30:	00007569 	.word	0x00007569
    7a34:	0000758f 	.word	0x0000758f

00007a38 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7a38:	b580      	push	{r7, lr}
    7a3a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7a3c:	4b03      	ldr	r3, [pc, #12]	; (7a4c <TCC0_0_Handler+0x14>)
    7a3e:	681b      	ldr	r3, [r3, #0]
    7a40:	4618      	mov	r0, r3
    7a42:	4b03      	ldr	r3, [pc, #12]	; (7a50 <TCC0_0_Handler+0x18>)
    7a44:	4798      	blx	r3
}
    7a46:	bf00      	nop
    7a48:	bd80      	pop	{r7, pc}
    7a4a:	bf00      	nop
    7a4c:	20000c40 	.word	0x20000c40
    7a50:	00007a01 	.word	0x00007a01

00007a54 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7a54:	b580      	push	{r7, lr}
    7a56:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7a58:	4b03      	ldr	r3, [pc, #12]	; (7a68 <TCC1_0_Handler+0x14>)
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	4618      	mov	r0, r3
    7a5e:	4b03      	ldr	r3, [pc, #12]	; (7a6c <TCC1_0_Handler+0x18>)
    7a60:	4798      	blx	r3
}
    7a62:	bf00      	nop
    7a64:	bd80      	pop	{r7, pc}
    7a66:	bf00      	nop
    7a68:	20000c44 	.word	0x20000c44
    7a6c:	00007a01 	.word	0x00007a01

00007a70 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7a70:	b480      	push	{r7}
    7a72:	b085      	sub	sp, #20
    7a74:	af00      	add	r7, sp, #0
    7a76:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7a78:	2300      	movs	r3, #0
    7a7a:	73fb      	strb	r3, [r7, #15]
    7a7c:	e015      	b.n	7aaa <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7a7e:	7bfa      	ldrb	r2, [r7, #15]
    7a80:	490f      	ldr	r1, [pc, #60]	; (7ac0 <_get_tcc_cfg+0x50>)
    7a82:	4613      	mov	r3, r2
    7a84:	005b      	lsls	r3, r3, #1
    7a86:	4413      	add	r3, r2
    7a88:	011b      	lsls	r3, r3, #4
    7a8a:	440b      	add	r3, r1
    7a8c:	681a      	ldr	r2, [r3, #0]
    7a8e:	687b      	ldr	r3, [r7, #4]
    7a90:	429a      	cmp	r2, r3
    7a92:	d107      	bne.n	7aa4 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7a94:	7bfa      	ldrb	r2, [r7, #15]
    7a96:	4613      	mov	r3, r2
    7a98:	005b      	lsls	r3, r3, #1
    7a9a:	4413      	add	r3, r2
    7a9c:	011b      	lsls	r3, r3, #4
    7a9e:	4a08      	ldr	r2, [pc, #32]	; (7ac0 <_get_tcc_cfg+0x50>)
    7aa0:	4413      	add	r3, r2
    7aa2:	e006      	b.n	7ab2 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7aa4:	7bfb      	ldrb	r3, [r7, #15]
    7aa6:	3301      	adds	r3, #1
    7aa8:	73fb      	strb	r3, [r7, #15]
    7aaa:	7bfb      	ldrb	r3, [r7, #15]
    7aac:	2b01      	cmp	r3, #1
    7aae:	d9e6      	bls.n	7a7e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7ab0:	2300      	movs	r3, #0
}
    7ab2:	4618      	mov	r0, r3
    7ab4:	3714      	adds	r7, #20
    7ab6:	46bd      	mov	sp, r7
    7ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7abc:	4770      	bx	lr
    7abe:	bf00      	nop
    7ac0:	20000064 	.word	0x20000064

00007ac4 <__NVIC_EnableIRQ>:
{
    7ac4:	b480      	push	{r7}
    7ac6:	b083      	sub	sp, #12
    7ac8:	af00      	add	r7, sp, #0
    7aca:	4603      	mov	r3, r0
    7acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	db0b      	blt.n	7aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ad6:	4909      	ldr	r1, [pc, #36]	; (7afc <__NVIC_EnableIRQ+0x38>)
    7ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7adc:	095b      	lsrs	r3, r3, #5
    7ade:	88fa      	ldrh	r2, [r7, #6]
    7ae0:	f002 021f 	and.w	r2, r2, #31
    7ae4:	2001      	movs	r0, #1
    7ae6:	fa00 f202 	lsl.w	r2, r0, r2
    7aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7aee:	bf00      	nop
    7af0:	370c      	adds	r7, #12
    7af2:	46bd      	mov	sp, r7
    7af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7af8:	4770      	bx	lr
    7afa:	bf00      	nop
    7afc:	e000e100 	.word	0xe000e100

00007b00 <__NVIC_DisableIRQ>:
{
    7b00:	b480      	push	{r7}
    7b02:	b083      	sub	sp, #12
    7b04:	af00      	add	r7, sp, #0
    7b06:	4603      	mov	r3, r0
    7b08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	db10      	blt.n	7b34 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b12:	490b      	ldr	r1, [pc, #44]	; (7b40 <__NVIC_DisableIRQ+0x40>)
    7b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b18:	095b      	lsrs	r3, r3, #5
    7b1a:	88fa      	ldrh	r2, [r7, #6]
    7b1c:	f002 021f 	and.w	r2, r2, #31
    7b20:	2001      	movs	r0, #1
    7b22:	fa00 f202 	lsl.w	r2, r0, r2
    7b26:	3320      	adds	r3, #32
    7b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b30:	f3bf 8f6f 	isb	sy
}
    7b34:	bf00      	nop
    7b36:	370c      	adds	r7, #12
    7b38:	46bd      	mov	sp, r7
    7b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b3e:	4770      	bx	lr
    7b40:	e000e100 	.word	0xe000e100

00007b44 <__NVIC_ClearPendingIRQ>:
{
    7b44:	b480      	push	{r7}
    7b46:	b083      	sub	sp, #12
    7b48:	af00      	add	r7, sp, #0
    7b4a:	4603      	mov	r3, r0
    7b4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b52:	2b00      	cmp	r3, #0
    7b54:	db0c      	blt.n	7b70 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b56:	4909      	ldr	r1, [pc, #36]	; (7b7c <__NVIC_ClearPendingIRQ+0x38>)
    7b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b5c:	095b      	lsrs	r3, r3, #5
    7b5e:	88fa      	ldrh	r2, [r7, #6]
    7b60:	f002 021f 	and.w	r2, r2, #31
    7b64:	2001      	movs	r0, #1
    7b66:	fa00 f202 	lsl.w	r2, r0, r2
    7b6a:	3360      	adds	r3, #96	; 0x60
    7b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b70:	bf00      	nop
    7b72:	370c      	adds	r7, #12
    7b74:	46bd      	mov	sp, r7
    7b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b7a:	4770      	bx	lr
    7b7c:	e000e100 	.word	0xe000e100

00007b80 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7b80:	b480      	push	{r7}
    7b82:	b083      	sub	sp, #12
    7b84:	af00      	add	r7, sp, #0
    7b86:	6078      	str	r0, [r7, #4]
    7b88:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b8a:	bf00      	nop
    7b8c:	687b      	ldr	r3, [r7, #4]
    7b8e:	691a      	ldr	r2, [r3, #16]
    7b90:	683b      	ldr	r3, [r7, #0]
    7b92:	4013      	ands	r3, r2
    7b94:	2b00      	cmp	r3, #0
    7b96:	d1f9      	bne.n	7b8c <hri_tc_wait_for_sync+0xc>
	};
}
    7b98:	bf00      	nop
    7b9a:	370c      	adds	r7, #12
    7b9c:	46bd      	mov	sp, r7
    7b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba2:	4770      	bx	lr

00007ba4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7ba4:	b480      	push	{r7}
    7ba6:	b083      	sub	sp, #12
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
    7bac:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	691a      	ldr	r2, [r3, #16]
    7bb2:	683b      	ldr	r3, [r7, #0]
    7bb4:	4013      	ands	r3, r2
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	bf14      	ite	ne
    7bba:	2301      	movne	r3, #1
    7bbc:	2300      	moveq	r3, #0
    7bbe:	b2db      	uxtb	r3, r3
}
    7bc0:	4618      	mov	r0, r3
    7bc2:	370c      	adds	r7, #12
    7bc4:	46bd      	mov	sp, r7
    7bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bca:	4770      	bx	lr

00007bcc <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7bcc:	b480      	push	{r7}
    7bce:	b083      	sub	sp, #12
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7bd4:	687b      	ldr	r3, [r7, #4]
    7bd6:	7a9b      	ldrb	r3, [r3, #10]
    7bd8:	b2db      	uxtb	r3, r3
    7bda:	f003 0301 	and.w	r3, r3, #1
    7bde:	2b00      	cmp	r3, #0
    7be0:	bf14      	ite	ne
    7be2:	2301      	movne	r3, #1
    7be4:	2300      	moveq	r3, #0
    7be6:	b2db      	uxtb	r3, r3
}
    7be8:	4618      	mov	r0, r3
    7bea:	370c      	adds	r7, #12
    7bec:	46bd      	mov	sp, r7
    7bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf2:	4770      	bx	lr

00007bf4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7bf4:	b480      	push	{r7}
    7bf6:	b083      	sub	sp, #12
    7bf8:	af00      	add	r7, sp, #0
    7bfa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7bfc:	687b      	ldr	r3, [r7, #4]
    7bfe:	2201      	movs	r2, #1
    7c00:	729a      	strb	r2, [r3, #10]
}
    7c02:	bf00      	nop
    7c04:	370c      	adds	r7, #12
    7c06:	46bd      	mov	sp, r7
    7c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c0c:	4770      	bx	lr

00007c0e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7c0e:	b480      	push	{r7}
    7c10:	b083      	sub	sp, #12
    7c12:	af00      	add	r7, sp, #0
    7c14:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7c16:	687b      	ldr	r3, [r7, #4]
    7c18:	2202      	movs	r2, #2
    7c1a:	729a      	strb	r2, [r3, #10]
}
    7c1c:	bf00      	nop
    7c1e:	370c      	adds	r7, #12
    7c20:	46bd      	mov	sp, r7
    7c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c26:	4770      	bx	lr

00007c28 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7c28:	b480      	push	{r7}
    7c2a:	b083      	sub	sp, #12
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	2201      	movs	r2, #1
    7c34:	725a      	strb	r2, [r3, #9]
}
    7c36:	bf00      	nop
    7c38:	370c      	adds	r7, #12
    7c3a:	46bd      	mov	sp, r7
    7c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c40:	4770      	bx	lr

00007c42 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7c42:	b480      	push	{r7}
    7c44:	b083      	sub	sp, #12
    7c46:	af00      	add	r7, sp, #0
    7c48:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7c4a:	687b      	ldr	r3, [r7, #4]
    7c4c:	7a5b      	ldrb	r3, [r3, #9]
    7c4e:	b2db      	uxtb	r3, r3
    7c50:	085b      	lsrs	r3, r3, #1
    7c52:	f003 0301 	and.w	r3, r3, #1
    7c56:	2b00      	cmp	r3, #0
    7c58:	bf14      	ite	ne
    7c5a:	2301      	movne	r3, #1
    7c5c:	2300      	moveq	r3, #0
    7c5e:	b2db      	uxtb	r3, r3
}
    7c60:	4618      	mov	r0, r3
    7c62:	370c      	adds	r7, #12
    7c64:	46bd      	mov	sp, r7
    7c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c6a:	4770      	bx	lr

00007c6c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7c6c:	b580      	push	{r7, lr}
    7c6e:	b082      	sub	sp, #8
    7c70:	af00      	add	r7, sp, #0
    7c72:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	f043 0201 	orr.w	r2, r3, #1
    7c7c:	687b      	ldr	r3, [r7, #4]
    7c7e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7c80:	2101      	movs	r1, #1
    7c82:	6878      	ldr	r0, [r7, #4]
    7c84:	4b02      	ldr	r3, [pc, #8]	; (7c90 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7c86:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c88:	bf00      	nop
    7c8a:	3708      	adds	r7, #8
    7c8c:	46bd      	mov	sp, r7
    7c8e:	bd80      	pop	{r7, pc}
    7c90:	00007b81 	.word	0x00007b81

00007c94 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7c94:	b580      	push	{r7, lr}
    7c96:	b082      	sub	sp, #8
    7c98:	af00      	add	r7, sp, #0
    7c9a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	f043 0202 	orr.w	r2, r3, #2
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7ca8:	2103      	movs	r1, #3
    7caa:	6878      	ldr	r0, [r7, #4]
    7cac:	4b02      	ldr	r3, [pc, #8]	; (7cb8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7cae:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7cb0:	bf00      	nop
    7cb2:	3708      	adds	r7, #8
    7cb4:	46bd      	mov	sp, r7
    7cb6:	bd80      	pop	{r7, pc}
    7cb8:	00007b81 	.word	0x00007b81

00007cbc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7cbc:	b580      	push	{r7, lr}
    7cbe:	b084      	sub	sp, #16
    7cc0:	af00      	add	r7, sp, #0
    7cc2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7cc4:	2103      	movs	r1, #3
    7cc6:	6878      	ldr	r0, [r7, #4]
    7cc8:	4b09      	ldr	r3, [pc, #36]	; (7cf0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7cca:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ccc:	687b      	ldr	r3, [r7, #4]
    7cce:	681b      	ldr	r3, [r3, #0]
    7cd0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7cd2:	68fb      	ldr	r3, [r7, #12]
    7cd4:	085b      	lsrs	r3, r3, #1
    7cd6:	f003 0301 	and.w	r3, r3, #1
    7cda:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7cdc:	68fb      	ldr	r3, [r7, #12]
    7cde:	2b00      	cmp	r3, #0
    7ce0:	bf14      	ite	ne
    7ce2:	2301      	movne	r3, #1
    7ce4:	2300      	moveq	r3, #0
    7ce6:	b2db      	uxtb	r3, r3
}
    7ce8:	4618      	mov	r0, r3
    7cea:	3710      	adds	r7, #16
    7cec:	46bd      	mov	sp, r7
    7cee:	bd80      	pop	{r7, pc}
    7cf0:	00007b81 	.word	0x00007b81

00007cf4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7cf4:	b580      	push	{r7, lr}
    7cf6:	b082      	sub	sp, #8
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7cfc:	687b      	ldr	r3, [r7, #4]
    7cfe:	681b      	ldr	r3, [r3, #0]
    7d00:	f023 0202 	bic.w	r2, r3, #2
    7d04:	687b      	ldr	r3, [r7, #4]
    7d06:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7d08:	2103      	movs	r1, #3
    7d0a:	6878      	ldr	r0, [r7, #4]
    7d0c:	4b02      	ldr	r3, [pc, #8]	; (7d18 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7d0e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7d10:	bf00      	nop
    7d12:	3708      	adds	r7, #8
    7d14:	46bd      	mov	sp, r7
    7d16:	bd80      	pop	{r7, pc}
    7d18:	00007b81 	.word	0x00007b81

00007d1c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7d1c:	b480      	push	{r7}
    7d1e:	b085      	sub	sp, #20
    7d20:	af00      	add	r7, sp, #0
    7d22:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d24:	687b      	ldr	r3, [r7, #4]
    7d26:	681b      	ldr	r3, [r3, #0]
    7d28:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7d2a:	68fb      	ldr	r3, [r7, #12]
    7d2c:	089b      	lsrs	r3, r3, #2
    7d2e:	f003 0303 	and.w	r3, r3, #3
    7d32:	60fb      	str	r3, [r7, #12]
	return tmp;
    7d34:	68fb      	ldr	r3, [r7, #12]
}
    7d36:	4618      	mov	r0, r3
    7d38:	3714      	adds	r7, #20
    7d3a:	46bd      	mov	sp, r7
    7d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d40:	4770      	bx	lr
	...

00007d44 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7d44:	b580      	push	{r7, lr}
    7d46:	b084      	sub	sp, #16
    7d48:	af00      	add	r7, sp, #0
    7d4a:	6078      	str	r0, [r7, #4]
    7d4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7d4e:	2103      	movs	r1, #3
    7d50:	6878      	ldr	r0, [r7, #4]
    7d52:	4b07      	ldr	r3, [pc, #28]	; (7d70 <hri_tc_get_CTRLA_reg+0x2c>)
    7d54:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d56:	687b      	ldr	r3, [r7, #4]
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7d5c:	68fa      	ldr	r2, [r7, #12]
    7d5e:	683b      	ldr	r3, [r7, #0]
    7d60:	4013      	ands	r3, r2
    7d62:	60fb      	str	r3, [r7, #12]
	return tmp;
    7d64:	68fb      	ldr	r3, [r7, #12]
}
    7d66:	4618      	mov	r0, r3
    7d68:	3710      	adds	r7, #16
    7d6a:	46bd      	mov	sp, r7
    7d6c:	bd80      	pop	{r7, pc}
    7d6e:	bf00      	nop
    7d70:	00007b81 	.word	0x00007b81

00007d74 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b082      	sub	sp, #8
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
    7d7c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	683a      	ldr	r2, [r7, #0]
    7d82:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7d84:	2103      	movs	r1, #3
    7d86:	6878      	ldr	r0, [r7, #4]
    7d88:	4b02      	ldr	r3, [pc, #8]	; (7d94 <hri_tc_write_CTRLA_reg+0x20>)
    7d8a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7d8c:	bf00      	nop
    7d8e:	3708      	adds	r7, #8
    7d90:	46bd      	mov	sp, r7
    7d92:	bd80      	pop	{r7, pc}
    7d94:	00007b81 	.word	0x00007b81

00007d98 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7d98:	b480      	push	{r7}
    7d9a:	b083      	sub	sp, #12
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
    7da0:	460b      	mov	r3, r1
    7da2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7da4:	687b      	ldr	r3, [r7, #4]
    7da6:	887a      	ldrh	r2, [r7, #2]
    7da8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7daa:	bf00      	nop
    7dac:	370c      	adds	r7, #12
    7dae:	46bd      	mov	sp, r7
    7db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db4:	4770      	bx	lr

00007db6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7db6:	b480      	push	{r7}
    7db8:	b083      	sub	sp, #12
    7dba:	af00      	add	r7, sp, #0
    7dbc:	6078      	str	r0, [r7, #4]
    7dbe:	460b      	mov	r3, r1
    7dc0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7dc2:	687b      	ldr	r3, [r7, #4]
    7dc4:	78fa      	ldrb	r2, [r7, #3]
    7dc6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7dc8:	bf00      	nop
    7dca:	370c      	adds	r7, #12
    7dcc:	46bd      	mov	sp, r7
    7dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dd2:	4770      	bx	lr

00007dd4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7dd4:	b480      	push	{r7}
    7dd6:	b083      	sub	sp, #12
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
    7ddc:	460b      	mov	r3, r1
    7dde:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7de0:	687b      	ldr	r3, [r7, #4]
    7de2:	78fa      	ldrb	r2, [r7, #3]
    7de4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7de6:	bf00      	nop
    7de8:	370c      	adds	r7, #12
    7dea:	46bd      	mov	sp, r7
    7dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7df0:	4770      	bx	lr
	...

00007df4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7df4:	b580      	push	{r7, lr}
    7df6:	b082      	sub	sp, #8
    7df8:	af00      	add	r7, sp, #0
    7dfa:	6078      	str	r0, [r7, #4]
    7dfc:	460b      	mov	r3, r1
    7dfe:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	78fa      	ldrb	r2, [r7, #3]
    7e04:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7e06:	2120      	movs	r1, #32
    7e08:	6878      	ldr	r0, [r7, #4]
    7e0a:	4b03      	ldr	r3, [pc, #12]	; (7e18 <hri_tccount8_write_PER_reg+0x24>)
    7e0c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7e0e:	bf00      	nop
    7e10:	3708      	adds	r7, #8
    7e12:	46bd      	mov	sp, r7
    7e14:	bd80      	pop	{r7, pc}
    7e16:	bf00      	nop
    7e18:	00007b81 	.word	0x00007b81

00007e1c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7e1c:	b580      	push	{r7, lr}
    7e1e:	b082      	sub	sp, #8
    7e20:	af00      	add	r7, sp, #0
    7e22:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7e24:	2120      	movs	r1, #32
    7e26:	6878      	ldr	r0, [r7, #4]
    7e28:	4b04      	ldr	r3, [pc, #16]	; (7e3c <hri_tccount8_read_PER_reg+0x20>)
    7e2a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	7edb      	ldrb	r3, [r3, #27]
    7e30:	b2db      	uxtb	r3, r3
}
    7e32:	4618      	mov	r0, r3
    7e34:	3708      	adds	r7, #8
    7e36:	46bd      	mov	sp, r7
    7e38:	bd80      	pop	{r7, pc}
    7e3a:	bf00      	nop
    7e3c:	00007b81 	.word	0x00007b81

00007e40 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7e40:	b580      	push	{r7, lr}
    7e42:	b082      	sub	sp, #8
    7e44:	af00      	add	r7, sp, #0
    7e46:	6078      	str	r0, [r7, #4]
    7e48:	460b      	mov	r3, r1
    7e4a:	70fb      	strb	r3, [r7, #3]
    7e4c:	4613      	mov	r3, r2
    7e4e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7e50:	78fb      	ldrb	r3, [r7, #3]
    7e52:	687a      	ldr	r2, [r7, #4]
    7e54:	4413      	add	r3, r2
    7e56:	78ba      	ldrb	r2, [r7, #2]
    7e58:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7e5a:	21c0      	movs	r1, #192	; 0xc0
    7e5c:	6878      	ldr	r0, [r7, #4]
    7e5e:	4b03      	ldr	r3, [pc, #12]	; (7e6c <hri_tccount8_write_CC_reg+0x2c>)
    7e60:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7e62:	bf00      	nop
    7e64:	3708      	adds	r7, #8
    7e66:	46bd      	mov	sp, r7
    7e68:	bd80      	pop	{r7, pc}
    7e6a:	bf00      	nop
    7e6c:	00007b81 	.word	0x00007b81

00007e70 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7e70:	b580      	push	{r7, lr}
    7e72:	b082      	sub	sp, #8
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
    7e78:	460b      	mov	r3, r1
    7e7a:	70fb      	strb	r3, [r7, #3]
    7e7c:	4613      	mov	r3, r2
    7e7e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7e80:	78fb      	ldrb	r3, [r7, #3]
    7e82:	687a      	ldr	r2, [r7, #4]
    7e84:	330c      	adds	r3, #12
    7e86:	005b      	lsls	r3, r3, #1
    7e88:	4413      	add	r3, r2
    7e8a:	883a      	ldrh	r2, [r7, #0]
    7e8c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7e8e:	21c0      	movs	r1, #192	; 0xc0
    7e90:	6878      	ldr	r0, [r7, #4]
    7e92:	4b03      	ldr	r3, [pc, #12]	; (7ea0 <hri_tccount16_write_CC_reg+0x30>)
    7e94:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7e96:	bf00      	nop
    7e98:	3708      	adds	r7, #8
    7e9a:	46bd      	mov	sp, r7
    7e9c:	bd80      	pop	{r7, pc}
    7e9e:	bf00      	nop
    7ea0:	00007b81 	.word	0x00007b81

00007ea4 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	b082      	sub	sp, #8
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	6078      	str	r0, [r7, #4]
    7eac:	460b      	mov	r3, r1
    7eae:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7eb0:	21c0      	movs	r1, #192	; 0xc0
    7eb2:	6878      	ldr	r0, [r7, #4]
    7eb4:	4b06      	ldr	r3, [pc, #24]	; (7ed0 <hri_tccount16_read_CC_reg+0x2c>)
    7eb6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7eb8:	78fb      	ldrb	r3, [r7, #3]
    7eba:	687a      	ldr	r2, [r7, #4]
    7ebc:	330c      	adds	r3, #12
    7ebe:	005b      	lsls	r3, r3, #1
    7ec0:	4413      	add	r3, r2
    7ec2:	889b      	ldrh	r3, [r3, #4]
    7ec4:	b29b      	uxth	r3, r3
}
    7ec6:	4618      	mov	r0, r3
    7ec8:	3708      	adds	r7, #8
    7eca:	46bd      	mov	sp, r7
    7ecc:	bd80      	pop	{r7, pc}
    7ece:	bf00      	nop
    7ed0:	00007b81 	.word	0x00007b81

00007ed4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7ed4:	b580      	push	{r7, lr}
    7ed6:	b084      	sub	sp, #16
    7ed8:	af00      	add	r7, sp, #0
    7eda:	60f8      	str	r0, [r7, #12]
    7edc:	460b      	mov	r3, r1
    7ede:	607a      	str	r2, [r7, #4]
    7ee0:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7ee2:	7afb      	ldrb	r3, [r7, #11]
    7ee4:	68fa      	ldr	r2, [r7, #12]
    7ee6:	3306      	adds	r3, #6
    7ee8:	009b      	lsls	r3, r3, #2
    7eea:	4413      	add	r3, r2
    7eec:	687a      	ldr	r2, [r7, #4]
    7eee:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7ef0:	21c0      	movs	r1, #192	; 0xc0
    7ef2:	68f8      	ldr	r0, [r7, #12]
    7ef4:	4b02      	ldr	r3, [pc, #8]	; (7f00 <hri_tccount32_write_CC_reg+0x2c>)
    7ef6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ef8:	bf00      	nop
    7efa:	3710      	adds	r7, #16
    7efc:	46bd      	mov	sp, r7
    7efe:	bd80      	pop	{r7, pc}
    7f00:	00007b81 	.word	0x00007b81

00007f04 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7f04:	b580      	push	{r7, lr}
    7f06:	b082      	sub	sp, #8
    7f08:	af00      	add	r7, sp, #0
    7f0a:	6078      	str	r0, [r7, #4]
    7f0c:	460b      	mov	r3, r1
    7f0e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7f10:	21c0      	movs	r1, #192	; 0xc0
    7f12:	6878      	ldr	r0, [r7, #4]
    7f14:	4b05      	ldr	r3, [pc, #20]	; (7f2c <hri_tccount32_read_CC_reg+0x28>)
    7f16:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7f18:	78fb      	ldrb	r3, [r7, #3]
    7f1a:	687a      	ldr	r2, [r7, #4]
    7f1c:	3306      	adds	r3, #6
    7f1e:	009b      	lsls	r3, r3, #2
    7f20:	4413      	add	r3, r2
    7f22:	685b      	ldr	r3, [r3, #4]
}
    7f24:	4618      	mov	r0, r3
    7f26:	3708      	adds	r7, #8
    7f28:	46bd      	mov	sp, r7
    7f2a:	bd80      	pop	{r7, pc}
    7f2c:	00007b81 	.word	0x00007b81

00007f30 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7f30:	b580      	push	{r7, lr}
    7f32:	b084      	sub	sp, #16
    7f34:	af00      	add	r7, sp, #0
    7f36:	6078      	str	r0, [r7, #4]
    7f38:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7f3a:	6838      	ldr	r0, [r7, #0]
    7f3c:	4b93      	ldr	r3, [pc, #588]	; (818c <_tc_timer_init+0x25c>)
    7f3e:	4798      	blx	r3
    7f40:	4603      	mov	r3, r0
    7f42:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	683a      	ldr	r2, [r7, #0]
    7f48:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7f4a:	22a4      	movs	r2, #164	; 0xa4
    7f4c:	4990      	ldr	r1, [pc, #576]	; (8190 <_tc_timer_init+0x260>)
    7f4e:	2001      	movs	r0, #1
    7f50:	4b90      	ldr	r3, [pc, #576]	; (8194 <_tc_timer_init+0x264>)
    7f52:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7f54:	2101      	movs	r1, #1
    7f56:	6838      	ldr	r0, [r7, #0]
    7f58:	4b8f      	ldr	r3, [pc, #572]	; (8198 <_tc_timer_init+0x268>)
    7f5a:	4798      	blx	r3
    7f5c:	4603      	mov	r3, r0
    7f5e:	f083 0301 	eor.w	r3, r3, #1
    7f62:	b2db      	uxtb	r3, r3
    7f64:	2b00      	cmp	r3, #0
    7f66:	d011      	beq.n	7f8c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7f68:	2102      	movs	r1, #2
    7f6a:	6838      	ldr	r0, [r7, #0]
    7f6c:	4b8b      	ldr	r3, [pc, #556]	; (819c <_tc_timer_init+0x26c>)
    7f6e:	4798      	blx	r3
    7f70:	4603      	mov	r3, r0
    7f72:	2b00      	cmp	r3, #0
    7f74:	d006      	beq.n	7f84 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7f76:	6838      	ldr	r0, [r7, #0]
    7f78:	4b89      	ldr	r3, [pc, #548]	; (81a0 <_tc_timer_init+0x270>)
    7f7a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7f7c:	2102      	movs	r1, #2
    7f7e:	6838      	ldr	r0, [r7, #0]
    7f80:	4b88      	ldr	r3, [pc, #544]	; (81a4 <_tc_timer_init+0x274>)
    7f82:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7f84:	2101      	movs	r1, #1
    7f86:	6838      	ldr	r0, [r7, #0]
    7f88:	4b87      	ldr	r3, [pc, #540]	; (81a8 <_tc_timer_init+0x278>)
    7f8a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7f8c:	2101      	movs	r1, #1
    7f8e:	6838      	ldr	r0, [r7, #0]
    7f90:	4b84      	ldr	r3, [pc, #528]	; (81a4 <_tc_timer_init+0x274>)
    7f92:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7f94:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f98:	4984      	ldr	r1, [pc, #528]	; (81ac <_tc_timer_init+0x27c>)
    7f9a:	4613      	mov	r3, r2
    7f9c:	009b      	lsls	r3, r3, #2
    7f9e:	4413      	add	r3, r2
    7fa0:	009b      	lsls	r3, r3, #2
    7fa2:	440b      	add	r3, r1
    7fa4:	3304      	adds	r3, #4
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	4619      	mov	r1, r3
    7faa:	6838      	ldr	r0, [r7, #0]
    7fac:	4b7e      	ldr	r3, [pc, #504]	; (81a8 <_tc_timer_init+0x278>)
    7fae:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7fb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fb4:	497d      	ldr	r1, [pc, #500]	; (81ac <_tc_timer_init+0x27c>)
    7fb6:	4613      	mov	r3, r2
    7fb8:	009b      	lsls	r3, r3, #2
    7fba:	4413      	add	r3, r2
    7fbc:	009b      	lsls	r3, r3, #2
    7fbe:	440b      	add	r3, r1
    7fc0:	330a      	adds	r3, #10
    7fc2:	781b      	ldrb	r3, [r3, #0]
    7fc4:	4619      	mov	r1, r3
    7fc6:	6838      	ldr	r0, [r7, #0]
    7fc8:	4b79      	ldr	r3, [pc, #484]	; (81b0 <_tc_timer_init+0x280>)
    7fca:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7fcc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fd0:	4976      	ldr	r1, [pc, #472]	; (81ac <_tc_timer_init+0x27c>)
    7fd2:	4613      	mov	r3, r2
    7fd4:	009b      	lsls	r3, r3, #2
    7fd6:	4413      	add	r3, r2
    7fd8:	009b      	lsls	r3, r3, #2
    7fda:	440b      	add	r3, r1
    7fdc:	3308      	adds	r3, #8
    7fde:	881b      	ldrh	r3, [r3, #0]
    7fe0:	4619      	mov	r1, r3
    7fe2:	6838      	ldr	r0, [r7, #0]
    7fe4:	4b73      	ldr	r3, [pc, #460]	; (81b4 <_tc_timer_init+0x284>)
    7fe6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7fe8:	2101      	movs	r1, #1
    7fea:	6838      	ldr	r0, [r7, #0]
    7fec:	4b72      	ldr	r3, [pc, #456]	; (81b8 <_tc_timer_init+0x288>)
    7fee:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7ff0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ff4:	496d      	ldr	r1, [pc, #436]	; (81ac <_tc_timer_init+0x27c>)
    7ff6:	4613      	mov	r3, r2
    7ff8:	009b      	lsls	r3, r3, #2
    7ffa:	4413      	add	r3, r2
    7ffc:	009b      	lsls	r3, r3, #2
    7ffe:	440b      	add	r3, r1
    8000:	3304      	adds	r3, #4
    8002:	681b      	ldr	r3, [r3, #0]
    8004:	f003 030c 	and.w	r3, r3, #12
    8008:	2b08      	cmp	r3, #8
    800a:	d11e      	bne.n	804a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    800c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8010:	4966      	ldr	r1, [pc, #408]	; (81ac <_tc_timer_init+0x27c>)
    8012:	4613      	mov	r3, r2
    8014:	009b      	lsls	r3, r3, #2
    8016:	4413      	add	r3, r2
    8018:	009b      	lsls	r3, r3, #2
    801a:	440b      	add	r3, r1
    801c:	330c      	adds	r3, #12
    801e:	681b      	ldr	r3, [r3, #0]
    8020:	461a      	mov	r2, r3
    8022:	2100      	movs	r1, #0
    8024:	6838      	ldr	r0, [r7, #0]
    8026:	4b65      	ldr	r3, [pc, #404]	; (81bc <_tc_timer_init+0x28c>)
    8028:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    802a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    802e:	495f      	ldr	r1, [pc, #380]	; (81ac <_tc_timer_init+0x27c>)
    8030:	4613      	mov	r3, r2
    8032:	009b      	lsls	r3, r3, #2
    8034:	4413      	add	r3, r2
    8036:	009b      	lsls	r3, r3, #2
    8038:	440b      	add	r3, r1
    803a:	3310      	adds	r3, #16
    803c:	681b      	ldr	r3, [r3, #0]
    803e:	461a      	mov	r2, r3
    8040:	2101      	movs	r1, #1
    8042:	6838      	ldr	r0, [r7, #0]
    8044:	4b5d      	ldr	r3, [pc, #372]	; (81bc <_tc_timer_init+0x28c>)
    8046:	4798      	blx	r3
    8048:	e06a      	b.n	8120 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    804a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    804e:	4957      	ldr	r1, [pc, #348]	; (81ac <_tc_timer_init+0x27c>)
    8050:	4613      	mov	r3, r2
    8052:	009b      	lsls	r3, r3, #2
    8054:	4413      	add	r3, r2
    8056:	009b      	lsls	r3, r3, #2
    8058:	440b      	add	r3, r1
    805a:	3304      	adds	r3, #4
    805c:	681b      	ldr	r3, [r3, #0]
    805e:	f003 030c 	and.w	r3, r3, #12
    8062:	2b00      	cmp	r3, #0
    8064:	d120      	bne.n	80a8 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8066:	f997 200f 	ldrsb.w	r2, [r7, #15]
    806a:	4950      	ldr	r1, [pc, #320]	; (81ac <_tc_timer_init+0x27c>)
    806c:	4613      	mov	r3, r2
    806e:	009b      	lsls	r3, r3, #2
    8070:	4413      	add	r3, r2
    8072:	009b      	lsls	r3, r3, #2
    8074:	440b      	add	r3, r1
    8076:	330c      	adds	r3, #12
    8078:	681b      	ldr	r3, [r3, #0]
    807a:	b29b      	uxth	r3, r3
    807c:	461a      	mov	r2, r3
    807e:	2100      	movs	r1, #0
    8080:	6838      	ldr	r0, [r7, #0]
    8082:	4b4f      	ldr	r3, [pc, #316]	; (81c0 <_tc_timer_init+0x290>)
    8084:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8086:	f997 200f 	ldrsb.w	r2, [r7, #15]
    808a:	4948      	ldr	r1, [pc, #288]	; (81ac <_tc_timer_init+0x27c>)
    808c:	4613      	mov	r3, r2
    808e:	009b      	lsls	r3, r3, #2
    8090:	4413      	add	r3, r2
    8092:	009b      	lsls	r3, r3, #2
    8094:	440b      	add	r3, r1
    8096:	3310      	adds	r3, #16
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	b29b      	uxth	r3, r3
    809c:	461a      	mov	r2, r3
    809e:	2101      	movs	r1, #1
    80a0:	6838      	ldr	r0, [r7, #0]
    80a2:	4b47      	ldr	r3, [pc, #284]	; (81c0 <_tc_timer_init+0x290>)
    80a4:	4798      	blx	r3
    80a6:	e03b      	b.n	8120 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    80a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80ac:	493f      	ldr	r1, [pc, #252]	; (81ac <_tc_timer_init+0x27c>)
    80ae:	4613      	mov	r3, r2
    80b0:	009b      	lsls	r3, r3, #2
    80b2:	4413      	add	r3, r2
    80b4:	009b      	lsls	r3, r3, #2
    80b6:	440b      	add	r3, r1
    80b8:	3304      	adds	r3, #4
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	f003 030c 	and.w	r3, r3, #12
    80c0:	2b04      	cmp	r3, #4
    80c2:	d12d      	bne.n	8120 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    80c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80c8:	4938      	ldr	r1, [pc, #224]	; (81ac <_tc_timer_init+0x27c>)
    80ca:	4613      	mov	r3, r2
    80cc:	009b      	lsls	r3, r3, #2
    80ce:	4413      	add	r3, r2
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	440b      	add	r3, r1
    80d4:	330c      	adds	r3, #12
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	b2db      	uxtb	r3, r3
    80da:	461a      	mov	r2, r3
    80dc:	2100      	movs	r1, #0
    80de:	6838      	ldr	r0, [r7, #0]
    80e0:	4b38      	ldr	r3, [pc, #224]	; (81c4 <_tc_timer_init+0x294>)
    80e2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    80e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80e8:	4930      	ldr	r1, [pc, #192]	; (81ac <_tc_timer_init+0x27c>)
    80ea:	4613      	mov	r3, r2
    80ec:	009b      	lsls	r3, r3, #2
    80ee:	4413      	add	r3, r2
    80f0:	009b      	lsls	r3, r3, #2
    80f2:	440b      	add	r3, r1
    80f4:	3310      	adds	r3, #16
    80f6:	681b      	ldr	r3, [r3, #0]
    80f8:	b2db      	uxtb	r3, r3
    80fa:	461a      	mov	r2, r3
    80fc:	2101      	movs	r1, #1
    80fe:	6838      	ldr	r0, [r7, #0]
    8100:	4b30      	ldr	r3, [pc, #192]	; (81c4 <_tc_timer_init+0x294>)
    8102:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8104:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8108:	4928      	ldr	r1, [pc, #160]	; (81ac <_tc_timer_init+0x27c>)
    810a:	4613      	mov	r3, r2
    810c:	009b      	lsls	r3, r3, #2
    810e:	4413      	add	r3, r2
    8110:	009b      	lsls	r3, r3, #2
    8112:	440b      	add	r3, r1
    8114:	330b      	adds	r3, #11
    8116:	781b      	ldrb	r3, [r3, #0]
    8118:	4619      	mov	r1, r3
    811a:	6838      	ldr	r0, [r7, #0]
    811c:	4b2a      	ldr	r3, [pc, #168]	; (81c8 <_tc_timer_init+0x298>)
    811e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8120:	6838      	ldr	r0, [r7, #0]
    8122:	4b2a      	ldr	r3, [pc, #168]	; (81cc <_tc_timer_init+0x29c>)
    8124:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8126:	6879      	ldr	r1, [r7, #4]
    8128:	6838      	ldr	r0, [r7, #0]
    812a:	4b29      	ldr	r3, [pc, #164]	; (81d0 <_tc_timer_init+0x2a0>)
    812c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    812e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8132:	491e      	ldr	r1, [pc, #120]	; (81ac <_tc_timer_init+0x27c>)
    8134:	4613      	mov	r3, r2
    8136:	009b      	lsls	r3, r3, #2
    8138:	4413      	add	r3, r2
    813a:	009b      	lsls	r3, r3, #2
    813c:	440b      	add	r3, r1
    813e:	3302      	adds	r3, #2
    8140:	f9b3 3000 	ldrsh.w	r3, [r3]
    8144:	4618      	mov	r0, r3
    8146:	4b23      	ldr	r3, [pc, #140]	; (81d4 <_tc_timer_init+0x2a4>)
    8148:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    814a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    814e:	4917      	ldr	r1, [pc, #92]	; (81ac <_tc_timer_init+0x27c>)
    8150:	4613      	mov	r3, r2
    8152:	009b      	lsls	r3, r3, #2
    8154:	4413      	add	r3, r2
    8156:	009b      	lsls	r3, r3, #2
    8158:	440b      	add	r3, r1
    815a:	3302      	adds	r3, #2
    815c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8160:	4618      	mov	r0, r3
    8162:	4b1d      	ldr	r3, [pc, #116]	; (81d8 <_tc_timer_init+0x2a8>)
    8164:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8166:	f997 200f 	ldrsb.w	r2, [r7, #15]
    816a:	4910      	ldr	r1, [pc, #64]	; (81ac <_tc_timer_init+0x27c>)
    816c:	4613      	mov	r3, r2
    816e:	009b      	lsls	r3, r3, #2
    8170:	4413      	add	r3, r2
    8172:	009b      	lsls	r3, r3, #2
    8174:	440b      	add	r3, r1
    8176:	3302      	adds	r3, #2
    8178:	f9b3 3000 	ldrsh.w	r3, [r3]
    817c:	4618      	mov	r0, r3
    817e:	4b17      	ldr	r3, [pc, #92]	; (81dc <_tc_timer_init+0x2ac>)
    8180:	4798      	blx	r3

	return ERR_NONE;
    8182:	2300      	movs	r3, #0
}
    8184:	4618      	mov	r0, r3
    8186:	3710      	adds	r7, #16
    8188:	46bd      	mov	sp, r7
    818a:	bd80      	pop	{r7, pc}
    818c:	00008781 	.word	0x00008781
    8190:	00011050 	.word	0x00011050
    8194:	00003c61 	.word	0x00003c61
    8198:	00007ba5 	.word	0x00007ba5
    819c:	00007d45 	.word	0x00007d45
    81a0:	00007cf5 	.word	0x00007cf5
    81a4:	00007b81 	.word	0x00007b81
    81a8:	00007d75 	.word	0x00007d75
    81ac:	200000e4 	.word	0x200000e4
    81b0:	00007dd5 	.word	0x00007dd5
    81b4:	00007d99 	.word	0x00007d99
    81b8:	00007db7 	.word	0x00007db7
    81bc:	00007ed5 	.word	0x00007ed5
    81c0:	00007e71 	.word	0x00007e71
    81c4:	00007e41 	.word	0x00007e41
    81c8:	00007df5 	.word	0x00007df5
    81cc:	00007c29 	.word	0x00007c29
    81d0:	000087e9 	.word	0x000087e9
    81d4:	00007b01 	.word	0x00007b01
    81d8:	00007b45 	.word	0x00007b45
    81dc:	00007ac5 	.word	0x00007ac5

000081e0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	b084      	sub	sp, #16
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
    81e8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    81ea:	6838      	ldr	r0, [r7, #0]
    81ec:	4b73      	ldr	r3, [pc, #460]	; (83bc <_pwm_init+0x1dc>)
    81ee:	4798      	blx	r3
    81f0:	4603      	mov	r3, r0
    81f2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    81f4:	687b      	ldr	r3, [r7, #4]
    81f6:	683a      	ldr	r2, [r7, #0]
    81f8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    81fa:	2101      	movs	r1, #1
    81fc:	6838      	ldr	r0, [r7, #0]
    81fe:	4b70      	ldr	r3, [pc, #448]	; (83c0 <_pwm_init+0x1e0>)
    8200:	4798      	blx	r3
    8202:	4603      	mov	r3, r0
    8204:	f083 0301 	eor.w	r3, r3, #1
    8208:	b2db      	uxtb	r3, r3
    820a:	2b00      	cmp	r3, #0
    820c:	d011      	beq.n	8232 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    820e:	2102      	movs	r1, #2
    8210:	6838      	ldr	r0, [r7, #0]
    8212:	4b6c      	ldr	r3, [pc, #432]	; (83c4 <_pwm_init+0x1e4>)
    8214:	4798      	blx	r3
    8216:	4603      	mov	r3, r0
    8218:	2b00      	cmp	r3, #0
    821a:	d006      	beq.n	822a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    821c:	6838      	ldr	r0, [r7, #0]
    821e:	4b6a      	ldr	r3, [pc, #424]	; (83c8 <_pwm_init+0x1e8>)
    8220:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8222:	2102      	movs	r1, #2
    8224:	6838      	ldr	r0, [r7, #0]
    8226:	4b69      	ldr	r3, [pc, #420]	; (83cc <_pwm_init+0x1ec>)
    8228:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    822a:	2101      	movs	r1, #1
    822c:	6838      	ldr	r0, [r7, #0]
    822e:	4b68      	ldr	r3, [pc, #416]	; (83d0 <_pwm_init+0x1f0>)
    8230:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8232:	2101      	movs	r1, #1
    8234:	6838      	ldr	r0, [r7, #0]
    8236:	4b65      	ldr	r3, [pc, #404]	; (83cc <_pwm_init+0x1ec>)
    8238:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    823a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    823e:	4965      	ldr	r1, [pc, #404]	; (83d4 <_pwm_init+0x1f4>)
    8240:	4613      	mov	r3, r2
    8242:	009b      	lsls	r3, r3, #2
    8244:	4413      	add	r3, r2
    8246:	009b      	lsls	r3, r3, #2
    8248:	440b      	add	r3, r1
    824a:	3304      	adds	r3, #4
    824c:	681b      	ldr	r3, [r3, #0]
    824e:	4619      	mov	r1, r3
    8250:	6838      	ldr	r0, [r7, #0]
    8252:	4b5f      	ldr	r3, [pc, #380]	; (83d0 <_pwm_init+0x1f0>)
    8254:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8256:	f997 200f 	ldrsb.w	r2, [r7, #15]
    825a:	495e      	ldr	r1, [pc, #376]	; (83d4 <_pwm_init+0x1f4>)
    825c:	4613      	mov	r3, r2
    825e:	009b      	lsls	r3, r3, #2
    8260:	4413      	add	r3, r2
    8262:	009b      	lsls	r3, r3, #2
    8264:	440b      	add	r3, r1
    8266:	330a      	adds	r3, #10
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	4619      	mov	r1, r3
    826c:	6838      	ldr	r0, [r7, #0]
    826e:	4b5a      	ldr	r3, [pc, #360]	; (83d8 <_pwm_init+0x1f8>)
    8270:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8272:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8276:	4957      	ldr	r1, [pc, #348]	; (83d4 <_pwm_init+0x1f4>)
    8278:	4613      	mov	r3, r2
    827a:	009b      	lsls	r3, r3, #2
    827c:	4413      	add	r3, r2
    827e:	009b      	lsls	r3, r3, #2
    8280:	440b      	add	r3, r1
    8282:	3308      	adds	r3, #8
    8284:	881b      	ldrh	r3, [r3, #0]
    8286:	4619      	mov	r1, r3
    8288:	6838      	ldr	r0, [r7, #0]
    828a:	4b54      	ldr	r3, [pc, #336]	; (83dc <_pwm_init+0x1fc>)
    828c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    828e:	2103      	movs	r1, #3
    8290:	6838      	ldr	r0, [r7, #0]
    8292:	4b53      	ldr	r3, [pc, #332]	; (83e0 <_pwm_init+0x200>)
    8294:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8296:	f997 200f 	ldrsb.w	r2, [r7, #15]
    829a:	494e      	ldr	r1, [pc, #312]	; (83d4 <_pwm_init+0x1f4>)
    829c:	4613      	mov	r3, r2
    829e:	009b      	lsls	r3, r3, #2
    82a0:	4413      	add	r3, r2
    82a2:	009b      	lsls	r3, r3, #2
    82a4:	440b      	add	r3, r1
    82a6:	3304      	adds	r3, #4
    82a8:	681b      	ldr	r3, [r3, #0]
    82aa:	f003 030c 	and.w	r3, r3, #12
    82ae:	2b08      	cmp	r3, #8
    82b0:	d11e      	bne.n	82f0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    82b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82b6:	4947      	ldr	r1, [pc, #284]	; (83d4 <_pwm_init+0x1f4>)
    82b8:	4613      	mov	r3, r2
    82ba:	009b      	lsls	r3, r3, #2
    82bc:	4413      	add	r3, r2
    82be:	009b      	lsls	r3, r3, #2
    82c0:	440b      	add	r3, r1
    82c2:	330c      	adds	r3, #12
    82c4:	681b      	ldr	r3, [r3, #0]
    82c6:	461a      	mov	r2, r3
    82c8:	2100      	movs	r1, #0
    82ca:	6838      	ldr	r0, [r7, #0]
    82cc:	4b45      	ldr	r3, [pc, #276]	; (83e4 <_pwm_init+0x204>)
    82ce:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    82d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82d4:	493f      	ldr	r1, [pc, #252]	; (83d4 <_pwm_init+0x1f4>)
    82d6:	4613      	mov	r3, r2
    82d8:	009b      	lsls	r3, r3, #2
    82da:	4413      	add	r3, r2
    82dc:	009b      	lsls	r3, r3, #2
    82de:	440b      	add	r3, r1
    82e0:	3310      	adds	r3, #16
    82e2:	681b      	ldr	r3, [r3, #0]
    82e4:	461a      	mov	r2, r3
    82e6:	2101      	movs	r1, #1
    82e8:	6838      	ldr	r0, [r7, #0]
    82ea:	4b3e      	ldr	r3, [pc, #248]	; (83e4 <_pwm_init+0x204>)
    82ec:	4798      	blx	r3
    82ee:	e031      	b.n	8354 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    82f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82f4:	4937      	ldr	r1, [pc, #220]	; (83d4 <_pwm_init+0x1f4>)
    82f6:	4613      	mov	r3, r2
    82f8:	009b      	lsls	r3, r3, #2
    82fa:	4413      	add	r3, r2
    82fc:	009b      	lsls	r3, r3, #2
    82fe:	440b      	add	r3, r1
    8300:	3304      	adds	r3, #4
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	f003 030c 	and.w	r3, r3, #12
    8308:	2b00      	cmp	r3, #0
    830a:	d120      	bne.n	834e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    830c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8310:	4930      	ldr	r1, [pc, #192]	; (83d4 <_pwm_init+0x1f4>)
    8312:	4613      	mov	r3, r2
    8314:	009b      	lsls	r3, r3, #2
    8316:	4413      	add	r3, r2
    8318:	009b      	lsls	r3, r3, #2
    831a:	440b      	add	r3, r1
    831c:	330c      	adds	r3, #12
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	b29b      	uxth	r3, r3
    8322:	461a      	mov	r2, r3
    8324:	2100      	movs	r1, #0
    8326:	6838      	ldr	r0, [r7, #0]
    8328:	4b2f      	ldr	r3, [pc, #188]	; (83e8 <_pwm_init+0x208>)
    832a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    832c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8330:	4928      	ldr	r1, [pc, #160]	; (83d4 <_pwm_init+0x1f4>)
    8332:	4613      	mov	r3, r2
    8334:	009b      	lsls	r3, r3, #2
    8336:	4413      	add	r3, r2
    8338:	009b      	lsls	r3, r3, #2
    833a:	440b      	add	r3, r1
    833c:	3310      	adds	r3, #16
    833e:	681b      	ldr	r3, [r3, #0]
    8340:	b29b      	uxth	r3, r3
    8342:	461a      	mov	r2, r3
    8344:	2101      	movs	r1, #1
    8346:	6838      	ldr	r0, [r7, #0]
    8348:	4b27      	ldr	r3, [pc, #156]	; (83e8 <_pwm_init+0x208>)
    834a:	4798      	blx	r3
    834c:	e002      	b.n	8354 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    834e:	f04f 33ff 	mov.w	r3, #4294967295
    8352:	e02e      	b.n	83b2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8354:	6879      	ldr	r1, [r7, #4]
    8356:	6838      	ldr	r0, [r7, #0]
    8358:	4b24      	ldr	r3, [pc, #144]	; (83ec <_pwm_init+0x20c>)
    835a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    835c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8360:	491c      	ldr	r1, [pc, #112]	; (83d4 <_pwm_init+0x1f4>)
    8362:	4613      	mov	r3, r2
    8364:	009b      	lsls	r3, r3, #2
    8366:	4413      	add	r3, r2
    8368:	009b      	lsls	r3, r3, #2
    836a:	440b      	add	r3, r1
    836c:	3302      	adds	r3, #2
    836e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8372:	4618      	mov	r0, r3
    8374:	4b1e      	ldr	r3, [pc, #120]	; (83f0 <_pwm_init+0x210>)
    8376:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8378:	f997 200f 	ldrsb.w	r2, [r7, #15]
    837c:	4915      	ldr	r1, [pc, #84]	; (83d4 <_pwm_init+0x1f4>)
    837e:	4613      	mov	r3, r2
    8380:	009b      	lsls	r3, r3, #2
    8382:	4413      	add	r3, r2
    8384:	009b      	lsls	r3, r3, #2
    8386:	440b      	add	r3, r1
    8388:	3302      	adds	r3, #2
    838a:	f9b3 3000 	ldrsh.w	r3, [r3]
    838e:	4618      	mov	r0, r3
    8390:	4b18      	ldr	r3, [pc, #96]	; (83f4 <_pwm_init+0x214>)
    8392:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8394:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8398:	490e      	ldr	r1, [pc, #56]	; (83d4 <_pwm_init+0x1f4>)
    839a:	4613      	mov	r3, r2
    839c:	009b      	lsls	r3, r3, #2
    839e:	4413      	add	r3, r2
    83a0:	009b      	lsls	r3, r3, #2
    83a2:	440b      	add	r3, r1
    83a4:	3302      	adds	r3, #2
    83a6:	f9b3 3000 	ldrsh.w	r3, [r3]
    83aa:	4618      	mov	r0, r3
    83ac:	4b12      	ldr	r3, [pc, #72]	; (83f8 <_pwm_init+0x218>)
    83ae:	4798      	blx	r3

	return 0;
    83b0:	2300      	movs	r3, #0
}
    83b2:	4618      	mov	r0, r3
    83b4:	3710      	adds	r7, #16
    83b6:	46bd      	mov	sp, r7
    83b8:	bd80      	pop	{r7, pc}
    83ba:	bf00      	nop
    83bc:	00008781 	.word	0x00008781
    83c0:	00007ba5 	.word	0x00007ba5
    83c4:	00007d45 	.word	0x00007d45
    83c8:	00007cf5 	.word	0x00007cf5
    83cc:	00007b81 	.word	0x00007b81
    83d0:	00007d75 	.word	0x00007d75
    83d4:	200000e4 	.word	0x200000e4
    83d8:	00007dd5 	.word	0x00007dd5
    83dc:	00007d99 	.word	0x00007d99
    83e0:	00007db7 	.word	0x00007db7
    83e4:	00007ed5 	.word	0x00007ed5
    83e8:	00007e71 	.word	0x00007e71
    83ec:	000087e9 	.word	0x000087e9
    83f0:	00007b01 	.word	0x00007b01
    83f4:	00007b45 	.word	0x00007b45
    83f8:	00007ac5 	.word	0x00007ac5

000083fc <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    83fc:	b580      	push	{r7, lr}
    83fe:	b084      	sub	sp, #16
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	68db      	ldr	r3, [r3, #12]
    8408:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    840a:	68f8      	ldr	r0, [r7, #12]
    840c:	4b10      	ldr	r3, [pc, #64]	; (8450 <_tc_timer_deinit+0x54>)
    840e:	4798      	blx	r3
    8410:	4603      	mov	r3, r0
    8412:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8414:	22f9      	movs	r2, #249	; 0xf9
    8416:	490f      	ldr	r1, [pc, #60]	; (8454 <_tc_timer_deinit+0x58>)
    8418:	2001      	movs	r0, #1
    841a:	4b0f      	ldr	r3, [pc, #60]	; (8458 <_tc_timer_deinit+0x5c>)
    841c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    841e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8422:	490e      	ldr	r1, [pc, #56]	; (845c <_tc_timer_deinit+0x60>)
    8424:	4613      	mov	r3, r2
    8426:	009b      	lsls	r3, r3, #2
    8428:	4413      	add	r3, r2
    842a:	009b      	lsls	r3, r3, #2
    842c:	440b      	add	r3, r1
    842e:	3302      	adds	r3, #2
    8430:	f9b3 3000 	ldrsh.w	r3, [r3]
    8434:	4618      	mov	r0, r3
    8436:	4b0a      	ldr	r3, [pc, #40]	; (8460 <_tc_timer_deinit+0x64>)
    8438:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    843a:	68f8      	ldr	r0, [r7, #12]
    843c:	4b09      	ldr	r3, [pc, #36]	; (8464 <_tc_timer_deinit+0x68>)
    843e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8440:	68f8      	ldr	r0, [r7, #12]
    8442:	4b09      	ldr	r3, [pc, #36]	; (8468 <_tc_timer_deinit+0x6c>)
    8444:	4798      	blx	r3
}
    8446:	bf00      	nop
    8448:	3710      	adds	r7, #16
    844a:	46bd      	mov	sp, r7
    844c:	bd80      	pop	{r7, pc}
    844e:	bf00      	nop
    8450:	00008781 	.word	0x00008781
    8454:	00011050 	.word	0x00011050
    8458:	00003c61 	.word	0x00003c61
    845c:	200000e4 	.word	0x200000e4
    8460:	00007b01 	.word	0x00007b01
    8464:	00007cf5 	.word	0x00007cf5
    8468:	00007c6d 	.word	0x00007c6d

0000846c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    846c:	b580      	push	{r7, lr}
    846e:	b082      	sub	sp, #8
    8470:	af00      	add	r7, sp, #0
    8472:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	68db      	ldr	r3, [r3, #12]
    8478:	4618      	mov	r0, r3
    847a:	4b03      	ldr	r3, [pc, #12]	; (8488 <_tc_timer_start+0x1c>)
    847c:	4798      	blx	r3
}
    847e:	bf00      	nop
    8480:	3708      	adds	r7, #8
    8482:	46bd      	mov	sp, r7
    8484:	bd80      	pop	{r7, pc}
    8486:	bf00      	nop
    8488:	00007c95 	.word	0x00007c95

0000848c <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    848c:	b580      	push	{r7, lr}
    848e:	b082      	sub	sp, #8
    8490:	af00      	add	r7, sp, #0
    8492:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	68db      	ldr	r3, [r3, #12]
    8498:	4618      	mov	r0, r3
    849a:	4b03      	ldr	r3, [pc, #12]	; (84a8 <_tc_timer_stop+0x1c>)
    849c:	4798      	blx	r3
}
    849e:	bf00      	nop
    84a0:	3708      	adds	r7, #8
    84a2:	46bd      	mov	sp, r7
    84a4:	bd80      	pop	{r7, pc}
    84a6:	bf00      	nop
    84a8:	00007cf5 	.word	0x00007cf5

000084ac <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    84ac:	b580      	push	{r7, lr}
    84ae:	b084      	sub	sp, #16
    84b0:	af00      	add	r7, sp, #0
    84b2:	6078      	str	r0, [r7, #4]
    84b4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    84b6:	687b      	ldr	r3, [r7, #4]
    84b8:	68db      	ldr	r3, [r3, #12]
    84ba:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    84bc:	68f8      	ldr	r0, [r7, #12]
    84be:	4b14      	ldr	r3, [pc, #80]	; (8510 <_tc_timer_set_period+0x64>)
    84c0:	4798      	blx	r3
    84c2:	4603      	mov	r3, r0
    84c4:	2b02      	cmp	r3, #2
    84c6:	d105      	bne.n	84d4 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    84c8:	683a      	ldr	r2, [r7, #0]
    84ca:	2100      	movs	r1, #0
    84cc:	68f8      	ldr	r0, [r7, #12]
    84ce:	4b11      	ldr	r3, [pc, #68]	; (8514 <_tc_timer_set_period+0x68>)
    84d0:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    84d2:	e019      	b.n	8508 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    84d4:	68f8      	ldr	r0, [r7, #12]
    84d6:	4b0e      	ldr	r3, [pc, #56]	; (8510 <_tc_timer_set_period+0x64>)
    84d8:	4798      	blx	r3
    84da:	4603      	mov	r3, r0
    84dc:	2b00      	cmp	r3, #0
    84de:	d107      	bne.n	84f0 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    84e0:	683b      	ldr	r3, [r7, #0]
    84e2:	b29b      	uxth	r3, r3
    84e4:	461a      	mov	r2, r3
    84e6:	2100      	movs	r1, #0
    84e8:	68f8      	ldr	r0, [r7, #12]
    84ea:	4b0b      	ldr	r3, [pc, #44]	; (8518 <_tc_timer_set_period+0x6c>)
    84ec:	4798      	blx	r3
}
    84ee:	e00b      	b.n	8508 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    84f0:	68f8      	ldr	r0, [r7, #12]
    84f2:	4b07      	ldr	r3, [pc, #28]	; (8510 <_tc_timer_set_period+0x64>)
    84f4:	4798      	blx	r3
    84f6:	4603      	mov	r3, r0
    84f8:	2b01      	cmp	r3, #1
    84fa:	d105      	bne.n	8508 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    84fc:	683b      	ldr	r3, [r7, #0]
    84fe:	b2db      	uxtb	r3, r3
    8500:	4619      	mov	r1, r3
    8502:	68f8      	ldr	r0, [r7, #12]
    8504:	4b05      	ldr	r3, [pc, #20]	; (851c <_tc_timer_set_period+0x70>)
    8506:	4798      	blx	r3
}
    8508:	bf00      	nop
    850a:	3710      	adds	r7, #16
    850c:	46bd      	mov	sp, r7
    850e:	bd80      	pop	{r7, pc}
    8510:	00007d1d 	.word	0x00007d1d
    8514:	00007ed5 	.word	0x00007ed5
    8518:	00007e71 	.word	0x00007e71
    851c:	00007df5 	.word	0x00007df5

00008520 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8520:	b580      	push	{r7, lr}
    8522:	b084      	sub	sp, #16
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8528:	687b      	ldr	r3, [r7, #4]
    852a:	68db      	ldr	r3, [r3, #12]
    852c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    852e:	68f8      	ldr	r0, [r7, #12]
    8530:	4b13      	ldr	r3, [pc, #76]	; (8580 <_tc_timer_get_period+0x60>)
    8532:	4798      	blx	r3
    8534:	4603      	mov	r3, r0
    8536:	2b02      	cmp	r3, #2
    8538:	d105      	bne.n	8546 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    853a:	2100      	movs	r1, #0
    853c:	68f8      	ldr	r0, [r7, #12]
    853e:	4b11      	ldr	r3, [pc, #68]	; (8584 <_tc_timer_get_period+0x64>)
    8540:	4798      	blx	r3
    8542:	4603      	mov	r3, r0
    8544:	e017      	b.n	8576 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8546:	68f8      	ldr	r0, [r7, #12]
    8548:	4b0d      	ldr	r3, [pc, #52]	; (8580 <_tc_timer_get_period+0x60>)
    854a:	4798      	blx	r3
    854c:	4603      	mov	r3, r0
    854e:	2b00      	cmp	r3, #0
    8550:	d105      	bne.n	855e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8552:	2100      	movs	r1, #0
    8554:	68f8      	ldr	r0, [r7, #12]
    8556:	4b0c      	ldr	r3, [pc, #48]	; (8588 <_tc_timer_get_period+0x68>)
    8558:	4798      	blx	r3
    855a:	4603      	mov	r3, r0
    855c:	e00b      	b.n	8576 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    855e:	68f8      	ldr	r0, [r7, #12]
    8560:	4b07      	ldr	r3, [pc, #28]	; (8580 <_tc_timer_get_period+0x60>)
    8562:	4798      	blx	r3
    8564:	4603      	mov	r3, r0
    8566:	2b01      	cmp	r3, #1
    8568:	d104      	bne.n	8574 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    856a:	68f8      	ldr	r0, [r7, #12]
    856c:	4b07      	ldr	r3, [pc, #28]	; (858c <_tc_timer_get_period+0x6c>)
    856e:	4798      	blx	r3
    8570:	4603      	mov	r3, r0
    8572:	e000      	b.n	8576 <_tc_timer_get_period+0x56>
	}

	return 0;
    8574:	2300      	movs	r3, #0
}
    8576:	4618      	mov	r0, r3
    8578:	3710      	adds	r7, #16
    857a:	46bd      	mov	sp, r7
    857c:	bd80      	pop	{r7, pc}
    857e:	bf00      	nop
    8580:	00007d1d 	.word	0x00007d1d
    8584:	00007f05 	.word	0x00007f05
    8588:	00007ea5 	.word	0x00007ea5
    858c:	00007e1d 	.word	0x00007e1d

00008590 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8590:	b580      	push	{r7, lr}
    8592:	b082      	sub	sp, #8
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	68db      	ldr	r3, [r3, #12]
    859c:	4618      	mov	r0, r3
    859e:	4b03      	ldr	r3, [pc, #12]	; (85ac <_tc_timer_is_started+0x1c>)
    85a0:	4798      	blx	r3
    85a2:	4603      	mov	r3, r0
}
    85a4:	4618      	mov	r0, r3
    85a6:	3708      	adds	r7, #8
    85a8:	46bd      	mov	sp, r7
    85aa:	bd80      	pop	{r7, pc}
    85ac:	00007cbd 	.word	0x00007cbd

000085b0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    85b0:	b480      	push	{r7}
    85b2:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    85b4:	4b02      	ldr	r3, [pc, #8]	; (85c0 <_tc_get_timer+0x10>)
}
    85b6:	4618      	mov	r0, r3
    85b8:	46bd      	mov	sp, r7
    85ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    85be:	4770      	bx	lr
    85c0:	2000015c 	.word	0x2000015c

000085c4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    85c4:	b480      	push	{r7}
    85c6:	af00      	add	r7, sp, #0
	return NULL;
    85c8:	2300      	movs	r3, #0
}
    85ca:	4618      	mov	r0, r3
    85cc:	46bd      	mov	sp, r7
    85ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d2:	4770      	bx	lr

000085d4 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    85d4:	b580      	push	{r7, lr}
    85d6:	b084      	sub	sp, #16
    85d8:	af00      	add	r7, sp, #0
    85da:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    85dc:	687b      	ldr	r3, [r7, #4]
    85de:	68db      	ldr	r3, [r3, #12]
    85e0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    85e2:	68f8      	ldr	r0, [r7, #12]
    85e4:	4b0e      	ldr	r3, [pc, #56]	; (8620 <_tc_timer_set_irq+0x4c>)
    85e6:	4798      	blx	r3
    85e8:	4603      	mov	r3, r0
    85ea:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    85ec:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    85f0:	490c      	ldr	r1, [pc, #48]	; (8624 <_tc_timer_set_irq+0x50>)
    85f2:	2001      	movs	r0, #1
    85f4:	4b0c      	ldr	r3, [pc, #48]	; (8628 <_tc_timer_set_irq+0x54>)
    85f6:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    85f8:	f997 200b 	ldrsb.w	r2, [r7, #11]
    85fc:	490b      	ldr	r1, [pc, #44]	; (862c <_tc_timer_set_irq+0x58>)
    85fe:	4613      	mov	r3, r2
    8600:	009b      	lsls	r3, r3, #2
    8602:	4413      	add	r3, r2
    8604:	009b      	lsls	r3, r3, #2
    8606:	440b      	add	r3, r1
    8608:	3302      	adds	r3, #2
    860a:	f9b3 3000 	ldrsh.w	r3, [r3]
    860e:	b2db      	uxtb	r3, r3
    8610:	4618      	mov	r0, r3
    8612:	4b07      	ldr	r3, [pc, #28]	; (8630 <_tc_timer_set_irq+0x5c>)
    8614:	4798      	blx	r3
}
    8616:	bf00      	nop
    8618:	3710      	adds	r7, #16
    861a:	46bd      	mov	sp, r7
    861c:	bd80      	pop	{r7, pc}
    861e:	bf00      	nop
    8620:	00008781 	.word	0x00008781
    8624:	00011050 	.word	0x00011050
    8628:	00003c61 	.word	0x00003c61
    862c:	200000e4 	.word	0x200000e4
    8630:	000044ad 	.word	0x000044ad

00008634 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8634:	b580      	push	{r7, lr}
    8636:	b084      	sub	sp, #16
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    863c:	687b      	ldr	r3, [r7, #4]
    863e:	68db      	ldr	r3, [r3, #12]
    8640:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8642:	68f8      	ldr	r0, [r7, #12]
    8644:	4b07      	ldr	r3, [pc, #28]	; (8664 <tc_interrupt_handler+0x30>)
    8646:	4798      	blx	r3
    8648:	4603      	mov	r3, r0
    864a:	2b00      	cmp	r3, #0
    864c:	d006      	beq.n	865c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    864e:	68f8      	ldr	r0, [r7, #12]
    8650:	4b05      	ldr	r3, [pc, #20]	; (8668 <tc_interrupt_handler+0x34>)
    8652:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	681b      	ldr	r3, [r3, #0]
    8658:	6878      	ldr	r0, [r7, #4]
    865a:	4798      	blx	r3
	}
}
    865c:	bf00      	nop
    865e:	3710      	adds	r7, #16
    8660:	46bd      	mov	sp, r7
    8662:	bd80      	pop	{r7, pc}
    8664:	00007bcd 	.word	0x00007bcd
    8668:	00007bf5 	.word	0x00007bf5

0000866c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    866c:	b580      	push	{r7, lr}
    866e:	b084      	sub	sp, #16
    8670:	af00      	add	r7, sp, #0
    8672:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	691b      	ldr	r3, [r3, #16]
    8678:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    867a:	68f8      	ldr	r0, [r7, #12]
    867c:	4b12      	ldr	r3, [pc, #72]	; (86c8 <tc_pwm_interrupt_handler+0x5c>)
    867e:	4798      	blx	r3
    8680:	4603      	mov	r3, r0
    8682:	2b00      	cmp	r3, #0
    8684:	d00a      	beq.n	869c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8686:	68f8      	ldr	r0, [r7, #12]
    8688:	4b10      	ldr	r3, [pc, #64]	; (86cc <tc_pwm_interrupt_handler+0x60>)
    868a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	681b      	ldr	r3, [r3, #0]
    8690:	2b00      	cmp	r3, #0
    8692:	d003      	beq.n	869c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8694:	687b      	ldr	r3, [r7, #4]
    8696:	681b      	ldr	r3, [r3, #0]
    8698:	6878      	ldr	r0, [r7, #4]
    869a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    869c:	68f8      	ldr	r0, [r7, #12]
    869e:	4b0c      	ldr	r3, [pc, #48]	; (86d0 <tc_pwm_interrupt_handler+0x64>)
    86a0:	4798      	blx	r3
    86a2:	4603      	mov	r3, r0
    86a4:	2b00      	cmp	r3, #0
    86a6:	d00a      	beq.n	86be <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    86a8:	68f8      	ldr	r0, [r7, #12]
    86aa:	4b0a      	ldr	r3, [pc, #40]	; (86d4 <tc_pwm_interrupt_handler+0x68>)
    86ac:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	685b      	ldr	r3, [r3, #4]
    86b2:	2b00      	cmp	r3, #0
    86b4:	d003      	beq.n	86be <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    86b6:	687b      	ldr	r3, [r7, #4]
    86b8:	685b      	ldr	r3, [r3, #4]
    86ba:	6878      	ldr	r0, [r7, #4]
    86bc:	4798      	blx	r3
		}
	}
}
    86be:	bf00      	nop
    86c0:	3710      	adds	r7, #16
    86c2:	46bd      	mov	sp, r7
    86c4:	bd80      	pop	{r7, pc}
    86c6:	bf00      	nop
    86c8:	00007bcd 	.word	0x00007bcd
    86cc:	00007bf5 	.word	0x00007bf5
    86d0:	00007c43 	.word	0x00007c43
    86d4:	00007c0f 	.word	0x00007c0f

000086d8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    86d8:	b580      	push	{r7, lr}
    86da:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    86dc:	4b03      	ldr	r3, [pc, #12]	; (86ec <TC0_Handler+0x14>)
    86de:	681b      	ldr	r3, [r3, #0]
    86e0:	4618      	mov	r0, r3
    86e2:	4b03      	ldr	r3, [pc, #12]	; (86f0 <TC0_Handler+0x18>)
    86e4:	4798      	blx	r3
}
    86e6:	bf00      	nop
    86e8:	bd80      	pop	{r7, pc}
    86ea:	bf00      	nop
    86ec:	20000c48 	.word	0x20000c48
    86f0:	00008635 	.word	0x00008635

000086f4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    86f4:	b580      	push	{r7, lr}
    86f6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    86f8:	4b03      	ldr	r3, [pc, #12]	; (8708 <TC2_Handler+0x14>)
    86fa:	681b      	ldr	r3, [r3, #0]
    86fc:	4618      	mov	r0, r3
    86fe:	4b03      	ldr	r3, [pc, #12]	; (870c <TC2_Handler+0x18>)
    8700:	4798      	blx	r3
}
    8702:	bf00      	nop
    8704:	bd80      	pop	{r7, pc}
    8706:	bf00      	nop
    8708:	20000c4c 	.word	0x20000c4c
    870c:	00008635 	.word	0x00008635

00008710 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8710:	b580      	push	{r7, lr}
    8712:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8714:	4b03      	ldr	r3, [pc, #12]	; (8724 <TC4_Handler+0x14>)
    8716:	681b      	ldr	r3, [r3, #0]
    8718:	4618      	mov	r0, r3
    871a:	4b03      	ldr	r3, [pc, #12]	; (8728 <TC4_Handler+0x18>)
    871c:	4798      	blx	r3
}
    871e:	bf00      	nop
    8720:	bd80      	pop	{r7, pc}
    8722:	bf00      	nop
    8724:	20000c50 	.word	0x20000c50
    8728:	00008635 	.word	0x00008635

0000872c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    872c:	b580      	push	{r7, lr}
    872e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8730:	4b03      	ldr	r3, [pc, #12]	; (8740 <TC5_Handler+0x14>)
    8732:	681b      	ldr	r3, [r3, #0]
    8734:	4618      	mov	r0, r3
    8736:	4b03      	ldr	r3, [pc, #12]	; (8744 <TC5_Handler+0x18>)
    8738:	4798      	blx	r3
}
    873a:	bf00      	nop
    873c:	bd80      	pop	{r7, pc}
    873e:	bf00      	nop
    8740:	20000c54 	.word	0x20000c54
    8744:	00008635 	.word	0x00008635

00008748 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8748:	b580      	push	{r7, lr}
    874a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    874c:	4b03      	ldr	r3, [pc, #12]	; (875c <TC6_Handler+0x14>)
    874e:	681b      	ldr	r3, [r3, #0]
    8750:	4618      	mov	r0, r3
    8752:	4b03      	ldr	r3, [pc, #12]	; (8760 <TC6_Handler+0x18>)
    8754:	4798      	blx	r3
}
    8756:	bf00      	nop
    8758:	bd80      	pop	{r7, pc}
    875a:	bf00      	nop
    875c:	20000c58 	.word	0x20000c58
    8760:	00008635 	.word	0x00008635

00008764 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8764:	b580      	push	{r7, lr}
    8766:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8768:	4b03      	ldr	r3, [pc, #12]	; (8778 <TC7_Handler+0x14>)
    876a:	681b      	ldr	r3, [r3, #0]
    876c:	4618      	mov	r0, r3
    876e:	4b03      	ldr	r3, [pc, #12]	; (877c <TC7_Handler+0x18>)
    8770:	4798      	blx	r3
}
    8772:	bf00      	nop
    8774:	bd80      	pop	{r7, pc}
    8776:	bf00      	nop
    8778:	20000c5c 	.word	0x20000c5c
    877c:	0000866d 	.word	0x0000866d

00008780 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8780:	b580      	push	{r7, lr}
    8782:	b084      	sub	sp, #16
    8784:	af00      	add	r7, sp, #0
    8786:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8788:	6878      	ldr	r0, [r7, #4]
    878a:	4b13      	ldr	r3, [pc, #76]	; (87d8 <get_tc_index+0x58>)
    878c:	4798      	blx	r3
    878e:	4603      	mov	r3, r0
    8790:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8792:	2300      	movs	r3, #0
    8794:	73fb      	strb	r3, [r7, #15]
    8796:	e010      	b.n	87ba <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8798:	7bfa      	ldrb	r2, [r7, #15]
    879a:	4910      	ldr	r1, [pc, #64]	; (87dc <get_tc_index+0x5c>)
    879c:	4613      	mov	r3, r2
    879e:	009b      	lsls	r3, r3, #2
    87a0:	4413      	add	r3, r2
    87a2:	009b      	lsls	r3, r3, #2
    87a4:	440b      	add	r3, r1
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	7bba      	ldrb	r2, [r7, #14]
    87aa:	429a      	cmp	r2, r3
    87ac:	d102      	bne.n	87b4 <get_tc_index+0x34>
			return i;
    87ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    87b2:	e00d      	b.n	87d0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    87b4:	7bfb      	ldrb	r3, [r7, #15]
    87b6:	3301      	adds	r3, #1
    87b8:	73fb      	strb	r3, [r7, #15]
    87ba:	7bfb      	ldrb	r3, [r7, #15]
    87bc:	2b05      	cmp	r3, #5
    87be:	d9eb      	bls.n	8798 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    87c0:	f240 221d 	movw	r2, #541	; 0x21d
    87c4:	4906      	ldr	r1, [pc, #24]	; (87e0 <get_tc_index+0x60>)
    87c6:	2000      	movs	r0, #0
    87c8:	4b06      	ldr	r3, [pc, #24]	; (87e4 <get_tc_index+0x64>)
    87ca:	4798      	blx	r3
	return -1;
    87cc:	f04f 33ff 	mov.w	r3, #4294967295
}
    87d0:	4618      	mov	r0, r3
    87d2:	3710      	adds	r7, #16
    87d4:	46bd      	mov	sp, r7
    87d6:	bd80      	pop	{r7, pc}
    87d8:	00008885 	.word	0x00008885
    87dc:	200000e4 	.word	0x200000e4
    87e0:	00011050 	.word	0x00011050
    87e4:	00003c61 	.word	0x00003c61

000087e8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    87e8:	b480      	push	{r7}
    87ea:	b083      	sub	sp, #12
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
    87f0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    87f2:	687b      	ldr	r3, [r7, #4]
    87f4:	4a17      	ldr	r2, [pc, #92]	; (8854 <_tc_init_irq_param+0x6c>)
    87f6:	4293      	cmp	r3, r2
    87f8:	d102      	bne.n	8800 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    87fa:	4a17      	ldr	r2, [pc, #92]	; (8858 <_tc_init_irq_param+0x70>)
    87fc:	683b      	ldr	r3, [r7, #0]
    87fe:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	4a16      	ldr	r2, [pc, #88]	; (885c <_tc_init_irq_param+0x74>)
    8804:	4293      	cmp	r3, r2
    8806:	d102      	bne.n	880e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8808:	4a15      	ldr	r2, [pc, #84]	; (8860 <_tc_init_irq_param+0x78>)
    880a:	683b      	ldr	r3, [r7, #0]
    880c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	4a14      	ldr	r2, [pc, #80]	; (8864 <_tc_init_irq_param+0x7c>)
    8812:	4293      	cmp	r3, r2
    8814:	d102      	bne.n	881c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8816:	4a14      	ldr	r2, [pc, #80]	; (8868 <_tc_init_irq_param+0x80>)
    8818:	683b      	ldr	r3, [r7, #0]
    881a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    881c:	687b      	ldr	r3, [r7, #4]
    881e:	4a13      	ldr	r2, [pc, #76]	; (886c <_tc_init_irq_param+0x84>)
    8820:	4293      	cmp	r3, r2
    8822:	d102      	bne.n	882a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8824:	4a12      	ldr	r2, [pc, #72]	; (8870 <_tc_init_irq_param+0x88>)
    8826:	683b      	ldr	r3, [r7, #0]
    8828:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    882a:	687b      	ldr	r3, [r7, #4]
    882c:	4a11      	ldr	r2, [pc, #68]	; (8874 <_tc_init_irq_param+0x8c>)
    882e:	4293      	cmp	r3, r2
    8830:	d102      	bne.n	8838 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8832:	4a11      	ldr	r2, [pc, #68]	; (8878 <_tc_init_irq_param+0x90>)
    8834:	683b      	ldr	r3, [r7, #0]
    8836:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	4a10      	ldr	r2, [pc, #64]	; (887c <_tc_init_irq_param+0x94>)
    883c:	4293      	cmp	r3, r2
    883e:	d102      	bne.n	8846 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8840:	4a0f      	ldr	r2, [pc, #60]	; (8880 <_tc_init_irq_param+0x98>)
    8842:	683b      	ldr	r3, [r7, #0]
    8844:	6013      	str	r3, [r2, #0]
	}
}
    8846:	bf00      	nop
    8848:	370c      	adds	r7, #12
    884a:	46bd      	mov	sp, r7
    884c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8850:	4770      	bx	lr
    8852:	bf00      	nop
    8854:	40003800 	.word	0x40003800
    8858:	20000c48 	.word	0x20000c48
    885c:	4101a000 	.word	0x4101a000
    8860:	20000c4c 	.word	0x20000c4c
    8864:	42001400 	.word	0x42001400
    8868:	20000c50 	.word	0x20000c50
    886c:	42001800 	.word	0x42001800
    8870:	20000c54 	.word	0x20000c54
    8874:	43001400 	.word	0x43001400
    8878:	20000c58 	.word	0x20000c58
    887c:	43001800 	.word	0x43001800
    8880:	20000c5c 	.word	0x20000c5c

00008884 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8884:	b4b0      	push	{r4, r5, r7}
    8886:	b08d      	sub	sp, #52	; 0x34
    8888:	af00      	add	r7, sp, #0
    888a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    888c:	4b13      	ldr	r3, [pc, #76]	; (88dc <_get_hardware_offset+0x58>)
    888e:	f107 040c 	add.w	r4, r7, #12
    8892:	461d      	mov	r5, r3
    8894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    889c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    88a0:	2300      	movs	r3, #0
    88a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    88a4:	e010      	b.n	88c8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    88a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    88ae:	4413      	add	r3, r2
    88b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    88b4:	461a      	mov	r2, r3
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	429a      	cmp	r2, r3
    88ba:	d102      	bne.n	88c2 <_get_hardware_offset+0x3e>
			return i;
    88bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88be:	b2db      	uxtb	r3, r3
    88c0:	e006      	b.n	88d0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    88c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88c4:	3301      	adds	r3, #1
    88c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    88c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88ca:	2b07      	cmp	r3, #7
    88cc:	d9eb      	bls.n	88a6 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    88ce:	2300      	movs	r3, #0
}
    88d0:	4618      	mov	r0, r3
    88d2:	3734      	adds	r7, #52	; 0x34
    88d4:	46bd      	mov	sp, r7
    88d6:	bcb0      	pop	{r4, r5, r7}
    88d8:	4770      	bx	lr
    88da:	bf00      	nop
    88dc:	00011064 	.word	0x00011064

000088e0 <__NVIC_EnableIRQ>:
{
    88e0:	b480      	push	{r7}
    88e2:	b083      	sub	sp, #12
    88e4:	af00      	add	r7, sp, #0
    88e6:	4603      	mov	r3, r0
    88e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    88ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    88ee:	2b00      	cmp	r3, #0
    88f0:	db0b      	blt.n	890a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    88f2:	4909      	ldr	r1, [pc, #36]	; (8918 <__NVIC_EnableIRQ+0x38>)
    88f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    88f8:	095b      	lsrs	r3, r3, #5
    88fa:	88fa      	ldrh	r2, [r7, #6]
    88fc:	f002 021f 	and.w	r2, r2, #31
    8900:	2001      	movs	r0, #1
    8902:	fa00 f202 	lsl.w	r2, r0, r2
    8906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    890a:	bf00      	nop
    890c:	370c      	adds	r7, #12
    890e:	46bd      	mov	sp, r7
    8910:	f85d 7b04 	ldr.w	r7, [sp], #4
    8914:	4770      	bx	lr
    8916:	bf00      	nop
    8918:	e000e100 	.word	0xe000e100

0000891c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    891c:	b480      	push	{r7}
    891e:	b087      	sub	sp, #28
    8920:	af00      	add	r7, sp, #0
    8922:	60f8      	str	r0, [r7, #12]
    8924:	460b      	mov	r3, r1
    8926:	607a      	str	r2, [r7, #4]
    8928:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    892a:	7afa      	ldrb	r2, [r7, #11]
    892c:	68f9      	ldr	r1, [r7, #12]
    892e:	4613      	mov	r3, r2
    8930:	009b      	lsls	r3, r3, #2
    8932:	4413      	add	r3, r2
    8934:	009b      	lsls	r3, r3, #2
    8936:	440b      	add	r3, r1
    8938:	3340      	adds	r3, #64	; 0x40
    893a:	681b      	ldr	r3, [r3, #0]
    893c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    893e:	697a      	ldr	r2, [r7, #20]
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	4013      	ands	r3, r2
    8944:	617b      	str	r3, [r7, #20]
	return tmp;
    8946:	697b      	ldr	r3, [r7, #20]
}
    8948:	4618      	mov	r0, r3
    894a:	371c      	adds	r7, #28
    894c:	46bd      	mov	sp, r7
    894e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8952:	4770      	bx	lr

00008954 <hri_oscctrl_get_STATUS_reg>:
{
    8954:	b480      	push	{r7}
    8956:	b085      	sub	sp, #20
    8958:	af00      	add	r7, sp, #0
    895a:	6078      	str	r0, [r7, #4]
    895c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	691b      	ldr	r3, [r3, #16]
    8962:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8964:	68fa      	ldr	r2, [r7, #12]
    8966:	683b      	ldr	r3, [r7, #0]
    8968:	4013      	ands	r3, r2
    896a:	60fb      	str	r3, [r7, #12]
	return tmp;
    896c:	68fb      	ldr	r3, [r7, #12]
}
    896e:	4618      	mov	r0, r3
    8970:	3714      	adds	r7, #20
    8972:	46bd      	mov	sp, r7
    8974:	f85d 7b04 	ldr.w	r7, [sp], #4
    8978:	4770      	bx	lr

0000897a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    897a:	b480      	push	{r7}
    897c:	b085      	sub	sp, #20
    897e:	af00      	add	r7, sp, #0
    8980:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8982:	687b      	ldr	r3, [r7, #4]
    8984:	f893 3020 	ldrb.w	r3, [r3, #32]
    8988:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    898a:	7bfb      	ldrb	r3, [r7, #15]
    898c:	f003 0301 	and.w	r3, r3, #1
    8990:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8992:	7bfb      	ldrb	r3, [r7, #15]
    8994:	2b00      	cmp	r3, #0
    8996:	bf14      	ite	ne
    8998:	2301      	movne	r3, #1
    899a:	2300      	moveq	r3, #0
    899c:	b2db      	uxtb	r3, r3
}
    899e:	4618      	mov	r0, r3
    89a0:	3714      	adds	r7, #20
    89a2:	46bd      	mov	sp, r7
    89a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    89a8:	4770      	bx	lr

000089aa <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    89aa:	b480      	push	{r7}
    89ac:	b083      	sub	sp, #12
    89ae:	af00      	add	r7, sp, #0
    89b0:	6078      	str	r0, [r7, #4]
    89b2:	460b      	mov	r3, r1
    89b4:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    89b6:	bf00      	nop
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	789b      	ldrb	r3, [r3, #2]
    89bc:	b2da      	uxtb	r2, r3
    89be:	78fb      	ldrb	r3, [r7, #3]
    89c0:	4013      	ands	r3, r2
    89c2:	b2db      	uxtb	r3, r3
    89c4:	2b00      	cmp	r3, #0
    89c6:	d1f7      	bne.n	89b8 <hri_usb_wait_for_sync+0xe>
	};
}
    89c8:	bf00      	nop
    89ca:	370c      	adds	r7, #12
    89cc:	46bd      	mov	sp, r7
    89ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    89d2:	4770      	bx	lr

000089d4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    89d4:	b480      	push	{r7}
    89d6:	b083      	sub	sp, #12
    89d8:	af00      	add	r7, sp, #0
    89da:	6078      	str	r0, [r7, #4]
    89dc:	460b      	mov	r3, r1
    89de:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	789b      	ldrb	r3, [r3, #2]
    89e4:	b2da      	uxtb	r2, r3
    89e6:	78fb      	ldrb	r3, [r7, #3]
    89e8:	4013      	ands	r3, r2
    89ea:	b2db      	uxtb	r3, r3
    89ec:	2b00      	cmp	r3, #0
    89ee:	bf14      	ite	ne
    89f0:	2301      	movne	r3, #1
    89f2:	2300      	moveq	r3, #0
    89f4:	b2db      	uxtb	r3, r3
}
    89f6:	4618      	mov	r0, r3
    89f8:	370c      	adds	r7, #12
    89fa:	46bd      	mov	sp, r7
    89fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a00:	4770      	bx	lr

00008a02 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8a02:	b480      	push	{r7}
    8a04:	b085      	sub	sp, #20
    8a06:	af00      	add	r7, sp, #0
    8a08:	6078      	str	r0, [r7, #4]
    8a0a:	460b      	mov	r3, r1
    8a0c:	70fb      	strb	r3, [r7, #3]
    8a0e:	4613      	mov	r3, r2
    8a10:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8a12:	78fb      	ldrb	r3, [r7, #3]
    8a14:	687a      	ldr	r2, [r7, #4]
    8a16:	3308      	adds	r3, #8
    8a18:	015b      	lsls	r3, r3, #5
    8a1a:	4413      	add	r3, r2
    8a1c:	3307      	adds	r3, #7
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8a22:	7bfa      	ldrb	r2, [r7, #15]
    8a24:	78bb      	ldrb	r3, [r7, #2]
    8a26:	4013      	ands	r3, r2
    8a28:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8a2a:	7bfb      	ldrb	r3, [r7, #15]
}
    8a2c:	4618      	mov	r0, r3
    8a2e:	3714      	adds	r7, #20
    8a30:	46bd      	mov	sp, r7
    8a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a36:	4770      	bx	lr

00008a38 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8a38:	b480      	push	{r7}
    8a3a:	b083      	sub	sp, #12
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	6078      	str	r0, [r7, #4]
    8a40:	460b      	mov	r3, r1
    8a42:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8a44:	78fb      	ldrb	r3, [r7, #3]
    8a46:	687a      	ldr	r2, [r7, #4]
    8a48:	3308      	adds	r3, #8
    8a4a:	015b      	lsls	r3, r3, #5
    8a4c:	4413      	add	r3, r2
    8a4e:	3307      	adds	r3, #7
    8a50:	781b      	ldrb	r3, [r3, #0]
    8a52:	b2db      	uxtb	r3, r3
}
    8a54:	4618      	mov	r0, r3
    8a56:	370c      	adds	r7, #12
    8a58:	46bd      	mov	sp, r7
    8a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a5e:	4770      	bx	lr

00008a60 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8a60:	b480      	push	{r7}
    8a62:	b083      	sub	sp, #12
    8a64:	af00      	add	r7, sp, #0
    8a66:	6078      	str	r0, [r7, #4]
    8a68:	460b      	mov	r3, r1
    8a6a:	70fb      	strb	r3, [r7, #3]
    8a6c:	4613      	mov	r3, r2
    8a6e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8a70:	78fb      	ldrb	r3, [r7, #3]
    8a72:	687a      	ldr	r2, [r7, #4]
    8a74:	3308      	adds	r3, #8
    8a76:	015b      	lsls	r3, r3, #5
    8a78:	4413      	add	r3, r2
    8a7a:	3307      	adds	r3, #7
    8a7c:	78ba      	ldrb	r2, [r7, #2]
    8a7e:	701a      	strb	r2, [r3, #0]
}
    8a80:	bf00      	nop
    8a82:	370c      	adds	r7, #12
    8a84:	46bd      	mov	sp, r7
    8a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8a:	4770      	bx	lr

00008a8c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8a8c:	b480      	push	{r7}
    8a8e:	b083      	sub	sp, #12
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
    8a94:	460b      	mov	r3, r1
    8a96:	70fb      	strb	r3, [r7, #3]
    8a98:	4613      	mov	r3, r2
    8a9a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8a9c:	78fb      	ldrb	r3, [r7, #3]
    8a9e:	687a      	ldr	r2, [r7, #4]
    8aa0:	3308      	adds	r3, #8
    8aa2:	015b      	lsls	r3, r3, #5
    8aa4:	4413      	add	r3, r2
    8aa6:	3305      	adds	r3, #5
    8aa8:	78ba      	ldrb	r2, [r7, #2]
    8aaa:	701a      	strb	r2, [r3, #0]
}
    8aac:	bf00      	nop
    8aae:	370c      	adds	r7, #12
    8ab0:	46bd      	mov	sp, r7
    8ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ab6:	4770      	bx	lr

00008ab8 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8ab8:	b480      	push	{r7}
    8aba:	b083      	sub	sp, #12
    8abc:	af00      	add	r7, sp, #0
    8abe:	6078      	str	r0, [r7, #4]
    8ac0:	460b      	mov	r3, r1
    8ac2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8ac4:	78fb      	ldrb	r3, [r7, #3]
    8ac6:	687a      	ldr	r2, [r7, #4]
    8ac8:	3308      	adds	r3, #8
    8aca:	015b      	lsls	r3, r3, #5
    8acc:	4413      	add	r3, r2
    8ace:	3306      	adds	r3, #6
    8ad0:	781b      	ldrb	r3, [r3, #0]
    8ad2:	b2db      	uxtb	r3, r3
}
    8ad4:	4618      	mov	r0, r3
    8ad6:	370c      	adds	r7, #12
    8ad8:	46bd      	mov	sp, r7
    8ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ade:	4770      	bx	lr

00008ae0 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8ae0:	b480      	push	{r7}
    8ae2:	b083      	sub	sp, #12
    8ae4:	af00      	add	r7, sp, #0
    8ae6:	6078      	str	r0, [r7, #4]
    8ae8:	460b      	mov	r3, r1
    8aea:	70fb      	strb	r3, [r7, #3]
    8aec:	4613      	mov	r3, r2
    8aee:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8af0:	78fb      	ldrb	r3, [r7, #3]
    8af2:	687a      	ldr	r2, [r7, #4]
    8af4:	3308      	adds	r3, #8
    8af6:	015b      	lsls	r3, r3, #5
    8af8:	4413      	add	r3, r2
    8afa:	3304      	adds	r3, #4
    8afc:	78ba      	ldrb	r2, [r7, #2]
    8afe:	701a      	strb	r2, [r3, #0]
}
    8b00:	bf00      	nop
    8b02:	370c      	adds	r7, #12
    8b04:	46bd      	mov	sp, r7
    8b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b0a:	4770      	bx	lr

00008b0c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8b0c:	b480      	push	{r7}
    8b0e:	b083      	sub	sp, #12
    8b10:	af00      	add	r7, sp, #0
    8b12:	6078      	str	r0, [r7, #4]
    8b14:	460b      	mov	r3, r1
    8b16:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8b18:	78fb      	ldrb	r3, [r7, #3]
    8b1a:	687a      	ldr	r2, [r7, #4]
    8b1c:	015b      	lsls	r3, r3, #5
    8b1e:	4413      	add	r3, r2
    8b20:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8b24:	2210      	movs	r2, #16
    8b26:	701a      	strb	r2, [r3, #0]
}
    8b28:	bf00      	nop
    8b2a:	370c      	adds	r7, #12
    8b2c:	46bd      	mov	sp, r7
    8b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b32:	4770      	bx	lr

00008b34 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8b34:	b480      	push	{r7}
    8b36:	b083      	sub	sp, #12
    8b38:	af00      	add	r7, sp, #0
    8b3a:	6078      	str	r0, [r7, #4]
    8b3c:	460b      	mov	r3, r1
    8b3e:	70fb      	strb	r3, [r7, #3]
    8b40:	4613      	mov	r3, r2
    8b42:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8b44:	78fb      	ldrb	r3, [r7, #3]
    8b46:	687a      	ldr	r2, [r7, #4]
    8b48:	015b      	lsls	r3, r3, #5
    8b4a:	4413      	add	r3, r2
    8b4c:	f203 1309 	addw	r3, r3, #265	; 0x109
    8b50:	78ba      	ldrb	r2, [r7, #2]
    8b52:	701a      	strb	r2, [r3, #0]
}
    8b54:	bf00      	nop
    8b56:	370c      	adds	r7, #12
    8b58:	46bd      	mov	sp, r7
    8b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b5e:	4770      	bx	lr

00008b60 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8b60:	b480      	push	{r7}
    8b62:	b083      	sub	sp, #12
    8b64:	af00      	add	r7, sp, #0
    8b66:	6078      	str	r0, [r7, #4]
    8b68:	460b      	mov	r3, r1
    8b6a:	70fb      	strb	r3, [r7, #3]
    8b6c:	4613      	mov	r3, r2
    8b6e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8b70:	78fb      	ldrb	r3, [r7, #3]
    8b72:	687a      	ldr	r2, [r7, #4]
    8b74:	015b      	lsls	r3, r3, #5
    8b76:	4413      	add	r3, r2
    8b78:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8b7c:	78ba      	ldrb	r2, [r7, #2]
    8b7e:	701a      	strb	r2, [r3, #0]
}
    8b80:	bf00      	nop
    8b82:	370c      	adds	r7, #12
    8b84:	46bd      	mov	sp, r7
    8b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b8a:	4770      	bx	lr

00008b8c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8b8c:	b480      	push	{r7}
    8b8e:	b085      	sub	sp, #20
    8b90:	af00      	add	r7, sp, #0
    8b92:	6078      	str	r0, [r7, #4]
    8b94:	460b      	mov	r3, r1
    8b96:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8b98:	78fb      	ldrb	r3, [r7, #3]
    8b9a:	687a      	ldr	r2, [r7, #4]
    8b9c:	3308      	adds	r3, #8
    8b9e:	015b      	lsls	r3, r3, #5
    8ba0:	4413      	add	r3, r2
    8ba2:	781b      	ldrb	r3, [r3, #0]
    8ba4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8ba6:	7bfb      	ldrb	r3, [r7, #15]
    8ba8:	f003 0307 	and.w	r3, r3, #7
    8bac:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8bae:	7bfb      	ldrb	r3, [r7, #15]
}
    8bb0:	4618      	mov	r0, r3
    8bb2:	3714      	adds	r7, #20
    8bb4:	46bd      	mov	sp, r7
    8bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bba:	4770      	bx	lr

00008bbc <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8bbc:	b480      	push	{r7}
    8bbe:	b085      	sub	sp, #20
    8bc0:	af00      	add	r7, sp, #0
    8bc2:	6078      	str	r0, [r7, #4]
    8bc4:	460b      	mov	r3, r1
    8bc6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8bc8:	78fb      	ldrb	r3, [r7, #3]
    8bca:	687a      	ldr	r2, [r7, #4]
    8bcc:	3308      	adds	r3, #8
    8bce:	015b      	lsls	r3, r3, #5
    8bd0:	4413      	add	r3, r2
    8bd2:	781b      	ldrb	r3, [r3, #0]
    8bd4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8bd6:	7bfb      	ldrb	r3, [r7, #15]
    8bd8:	091b      	lsrs	r3, r3, #4
    8bda:	b2db      	uxtb	r3, r3
    8bdc:	f003 0307 	and.w	r3, r3, #7
    8be0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8be2:	7bfb      	ldrb	r3, [r7, #15]
}
    8be4:	4618      	mov	r0, r3
    8be6:	3714      	adds	r7, #20
    8be8:	46bd      	mov	sp, r7
    8bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bee:	4770      	bx	lr

00008bf0 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8bf0:	b480      	push	{r7}
    8bf2:	b083      	sub	sp, #12
    8bf4:	af00      	add	r7, sp, #0
    8bf6:	6078      	str	r0, [r7, #4]
    8bf8:	460b      	mov	r3, r1
    8bfa:	70fb      	strb	r3, [r7, #3]
    8bfc:	4613      	mov	r3, r2
    8bfe:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8c00:	78fb      	ldrb	r3, [r7, #3]
    8c02:	687a      	ldr	r2, [r7, #4]
    8c04:	3308      	adds	r3, #8
    8c06:	015b      	lsls	r3, r3, #5
    8c08:	4413      	add	r3, r2
    8c0a:	78ba      	ldrb	r2, [r7, #2]
    8c0c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8c0e:	bf00      	nop
    8c10:	370c      	adds	r7, #12
    8c12:	46bd      	mov	sp, r7
    8c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c18:	4770      	bx	lr

00008c1a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8c1a:	b480      	push	{r7}
    8c1c:	b083      	sub	sp, #12
    8c1e:	af00      	add	r7, sp, #0
    8c20:	6078      	str	r0, [r7, #4]
    8c22:	460b      	mov	r3, r1
    8c24:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c26:	78fb      	ldrb	r3, [r7, #3]
    8c28:	687a      	ldr	r2, [r7, #4]
    8c2a:	3308      	adds	r3, #8
    8c2c:	015b      	lsls	r3, r3, #5
    8c2e:	4413      	add	r3, r2
    8c30:	781b      	ldrb	r3, [r3, #0]
    8c32:	b2db      	uxtb	r3, r3
}
    8c34:	4618      	mov	r0, r3
    8c36:	370c      	adds	r7, #12
    8c38:	46bd      	mov	sp, r7
    8c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c3e:	4770      	bx	lr

00008c40 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8c40:	b480      	push	{r7}
    8c42:	b083      	sub	sp, #12
    8c44:	af00      	add	r7, sp, #0
    8c46:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	8b9b      	ldrh	r3, [r3, #28]
    8c4c:	b29b      	uxth	r3, r3
}
    8c4e:	4618      	mov	r0, r3
    8c50:	370c      	adds	r7, #12
    8c52:	46bd      	mov	sp, r7
    8c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c58:	4770      	bx	lr

00008c5a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8c5a:	b480      	push	{r7}
    8c5c:	b083      	sub	sp, #12
    8c5e:	af00      	add	r7, sp, #0
    8c60:	6078      	str	r0, [r7, #4]
    8c62:	460b      	mov	r3, r1
    8c64:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8c66:	687b      	ldr	r3, [r7, #4]
    8c68:	887a      	ldrh	r2, [r7, #2]
    8c6a:	839a      	strh	r2, [r3, #28]
}
    8c6c:	bf00      	nop
    8c6e:	370c      	adds	r7, #12
    8c70:	46bd      	mov	sp, r7
    8c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c76:	4770      	bx	lr

00008c78 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8c78:	b480      	push	{r7}
    8c7a:	b083      	sub	sp, #12
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	6078      	str	r0, [r7, #4]
    8c80:	460b      	mov	r3, r1
    8c82:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8c84:	687b      	ldr	r3, [r7, #4]
    8c86:	887a      	ldrh	r2, [r7, #2]
    8c88:	831a      	strh	r2, [r3, #24]
}
    8c8a:	bf00      	nop
    8c8c:	370c      	adds	r7, #12
    8c8e:	46bd      	mov	sp, r7
    8c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c94:	4770      	bx	lr

00008c96 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8c96:	b480      	push	{r7}
    8c98:	b083      	sub	sp, #12
    8c9a:	af00      	add	r7, sp, #0
    8c9c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8c9e:	687b      	ldr	r3, [r7, #4]
    8ca0:	8b1b      	ldrh	r3, [r3, #24]
    8ca2:	b29b      	uxth	r3, r3
}
    8ca4:	4618      	mov	r0, r3
    8ca6:	370c      	adds	r7, #12
    8ca8:	46bd      	mov	sp, r7
    8caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cae:	4770      	bx	lr

00008cb0 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8cb0:	b480      	push	{r7}
    8cb2:	b083      	sub	sp, #12
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	6078      	str	r0, [r7, #4]
    8cb8:	460b      	mov	r3, r1
    8cba:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8cbc:	687b      	ldr	r3, [r7, #4]
    8cbe:	887a      	ldrh	r2, [r7, #2]
    8cc0:	829a      	strh	r2, [r3, #20]
}
    8cc2:	bf00      	nop
    8cc4:	370c      	adds	r7, #12
    8cc6:	46bd      	mov	sp, r7
    8cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ccc:	4770      	bx	lr

00008cce <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8cce:	b480      	push	{r7}
    8cd0:	b085      	sub	sp, #20
    8cd2:	af00      	add	r7, sp, #0
    8cd4:	6078      	str	r0, [r7, #4]
    8cd6:	460b      	mov	r3, r1
    8cd8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	789b      	ldrb	r3, [r3, #2]
    8cde:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8ce0:	7bfa      	ldrb	r2, [r7, #15]
    8ce2:	78fb      	ldrb	r3, [r7, #3]
    8ce4:	4013      	ands	r3, r2
    8ce6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ce8:	7bfb      	ldrb	r3, [r7, #15]
}
    8cea:	4618      	mov	r0, r3
    8cec:	3714      	adds	r7, #20
    8cee:	46bd      	mov	sp, r7
    8cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf4:	4770      	bx	lr
	...

00008cf8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8cf8:	b580      	push	{r7, lr}
    8cfa:	b082      	sub	sp, #8
    8cfc:	af00      	add	r7, sp, #0
    8cfe:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	781b      	ldrb	r3, [r3, #0]
    8d04:	b2db      	uxtb	r3, r3
    8d06:	f023 0302 	bic.w	r3, r3, #2
    8d0a:	b2da      	uxtb	r2, r3
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8d10:	2103      	movs	r1, #3
    8d12:	6878      	ldr	r0, [r7, #4]
    8d14:	4b02      	ldr	r3, [pc, #8]	; (8d20 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8d16:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8d18:	bf00      	nop
    8d1a:	3708      	adds	r7, #8
    8d1c:	46bd      	mov	sp, r7
    8d1e:	bd80      	pop	{r7, pc}
    8d20:	000089ab 	.word	0x000089ab

00008d24 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	b084      	sub	sp, #16
    8d28:	af00      	add	r7, sp, #0
    8d2a:	6078      	str	r0, [r7, #4]
    8d2c:	460b      	mov	r3, r1
    8d2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8d30:	2103      	movs	r1, #3
    8d32:	6878      	ldr	r0, [r7, #4]
    8d34:	4b06      	ldr	r3, [pc, #24]	; (8d50 <hri_usb_get_CTRLA_reg+0x2c>)
    8d36:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8d38:	687b      	ldr	r3, [r7, #4]
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8d3e:	7bfa      	ldrb	r2, [r7, #15]
    8d40:	78fb      	ldrb	r3, [r7, #3]
    8d42:	4013      	ands	r3, r2
    8d44:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8d46:	7bfb      	ldrb	r3, [r7, #15]
}
    8d48:	4618      	mov	r0, r3
    8d4a:	3710      	adds	r7, #16
    8d4c:	46bd      	mov	sp, r7
    8d4e:	bd80      	pop	{r7, pc}
    8d50:	000089ab 	.word	0x000089ab

00008d54 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	b082      	sub	sp, #8
    8d58:	af00      	add	r7, sp, #0
    8d5a:	6078      	str	r0, [r7, #4]
    8d5c:	460b      	mov	r3, r1
    8d5e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8d60:	687b      	ldr	r3, [r7, #4]
    8d62:	78fa      	ldrb	r2, [r7, #3]
    8d64:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8d66:	2103      	movs	r1, #3
    8d68:	6878      	ldr	r0, [r7, #4]
    8d6a:	4b03      	ldr	r3, [pc, #12]	; (8d78 <hri_usb_write_CTRLA_reg+0x24>)
    8d6c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8d6e:	bf00      	nop
    8d70:	3708      	adds	r7, #8
    8d72:	46bd      	mov	sp, r7
    8d74:	bd80      	pop	{r7, pc}
    8d76:	bf00      	nop
    8d78:	000089ab 	.word	0x000089ab

00008d7c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b082      	sub	sp, #8
    8d80:	af00      	add	r7, sp, #0
    8d82:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8d84:	2103      	movs	r1, #3
    8d86:	6878      	ldr	r0, [r7, #4]
    8d88:	4b04      	ldr	r3, [pc, #16]	; (8d9c <hri_usb_read_CTRLA_reg+0x20>)
    8d8a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	781b      	ldrb	r3, [r3, #0]
    8d90:	b2db      	uxtb	r3, r3
}
    8d92:	4618      	mov	r0, r3
    8d94:	3708      	adds	r7, #8
    8d96:	46bd      	mov	sp, r7
    8d98:	bd80      	pop	{r7, pc}
    8d9a:	bf00      	nop
    8d9c:	000089ab 	.word	0x000089ab

00008da0 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8da0:	b480      	push	{r7}
    8da2:	b083      	sub	sp, #12
    8da4:	af00      	add	r7, sp, #0
    8da6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	891b      	ldrh	r3, [r3, #8]
    8dac:	b29b      	uxth	r3, r3
    8dae:	f023 0301 	bic.w	r3, r3, #1
    8db2:	b29a      	uxth	r2, r3
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8db8:	bf00      	nop
    8dba:	370c      	adds	r7, #12
    8dbc:	46bd      	mov	sp, r7
    8dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dc2:	4770      	bx	lr

00008dc4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8dc4:	b480      	push	{r7}
    8dc6:	b083      	sub	sp, #12
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	460b      	mov	r3, r1
    8dce:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8dd0:	687b      	ldr	r3, [r7, #4]
    8dd2:	887a      	ldrh	r2, [r7, #2]
    8dd4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8dd6:	bf00      	nop
    8dd8:	370c      	adds	r7, #12
    8dda:	46bd      	mov	sp, r7
    8ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8de0:	4770      	bx	lr

00008de2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8de2:	b480      	push	{r7}
    8de4:	b083      	sub	sp, #12
    8de6:	af00      	add	r7, sp, #0
    8de8:	6078      	str	r0, [r7, #4]
    8dea:	460b      	mov	r3, r1
    8dec:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	78fa      	ldrb	r2, [r7, #3]
    8df2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8df4:	bf00      	nop
    8df6:	370c      	adds	r7, #12
    8df8:	46bd      	mov	sp, r7
    8dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dfe:	4770      	bx	lr

00008e00 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8e00:	b480      	push	{r7}
    8e02:	b083      	sub	sp, #12
    8e04:	af00      	add	r7, sp, #0
    8e06:	6078      	str	r0, [r7, #4]
    8e08:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	683a      	ldr	r2, [r7, #0]
    8e0e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8e10:	bf00      	nop
    8e12:	370c      	adds	r7, #12
    8e14:	46bd      	mov	sp, r7
    8e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e1a:	4770      	bx	lr

00008e1c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8e1c:	b480      	push	{r7}
    8e1e:	b083      	sub	sp, #12
    8e20:	af00      	add	r7, sp, #0
    8e22:	6078      	str	r0, [r7, #4]
    8e24:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8e26:	2300      	movs	r3, #0
}
    8e28:	4618      	mov	r0, r3
    8e2a:	370c      	adds	r7, #12
    8e2c:	46bd      	mov	sp, r7
    8e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e32:	4770      	bx	lr

00008e34 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8e34:	b480      	push	{r7}
    8e36:	b085      	sub	sp, #20
    8e38:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8e3a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e3e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8e40:	4b28      	ldr	r3, [pc, #160]	; (8ee4 <_usb_load_calib+0xb0>)
    8e42:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8e44:	f003 031f 	and.w	r3, r3, #31
    8e48:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8e4a:	4b26      	ldr	r3, [pc, #152]	; (8ee4 <_usb_load_calib+0xb0>)
    8e4c:	681b      	ldr	r3, [r3, #0]
    8e4e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8e50:	f003 031f 	and.w	r3, r3, #31
    8e54:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8e56:	4b23      	ldr	r3, [pc, #140]	; (8ee4 <_usb_load_calib+0xb0>)
    8e58:	681b      	ldr	r3, [r3, #0]
    8e5a:	0a9b      	lsrs	r3, r3, #10
    8e5c:	f003 0307 	and.w	r3, r3, #7
    8e60:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8e62:	68fb      	ldr	r3, [r7, #12]
    8e64:	2b00      	cmp	r3, #0
    8e66:	d002      	beq.n	8e6e <_usb_load_calib+0x3a>
    8e68:	68fb      	ldr	r3, [r7, #12]
    8e6a:	2b1f      	cmp	r3, #31
    8e6c:	d101      	bne.n	8e72 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8e6e:	2309      	movs	r3, #9
    8e70:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8e72:	68bb      	ldr	r3, [r7, #8]
    8e74:	2b00      	cmp	r3, #0
    8e76:	d002      	beq.n	8e7e <_usb_load_calib+0x4a>
    8e78:	68bb      	ldr	r3, [r7, #8]
    8e7a:	2b1f      	cmp	r3, #31
    8e7c:	d101      	bne.n	8e82 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8e7e:	2319      	movs	r3, #25
    8e80:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8e82:	687b      	ldr	r3, [r7, #4]
    8e84:	2b00      	cmp	r3, #0
    8e86:	d002      	beq.n	8e8e <_usb_load_calib+0x5a>
    8e88:	687b      	ldr	r3, [r7, #4]
    8e8a:	2b07      	cmp	r3, #7
    8e8c:	d101      	bne.n	8e92 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8e8e:	2306      	movs	r3, #6
    8e90:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8e92:	68fb      	ldr	r3, [r7, #12]
    8e94:	b29b      	uxth	r3, r3
    8e96:	019b      	lsls	r3, r3, #6
    8e98:	b29b      	uxth	r3, r3
    8e9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8e9e:	b29a      	uxth	r2, r3
    8ea0:	68bb      	ldr	r3, [r7, #8]
    8ea2:	b29b      	uxth	r3, r3
    8ea4:	f003 031f 	and.w	r3, r3, #31
    8ea8:	b29b      	uxth	r3, r3
    8eaa:	4313      	orrs	r3, r2
    8eac:	b29a      	uxth	r2, r3
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	b29b      	uxth	r3, r3
    8eb2:	031b      	lsls	r3, r3, #12
    8eb4:	b29b      	uxth	r3, r3
    8eb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8eba:	b29b      	uxth	r3, r3
    8ebc:	4313      	orrs	r3, r2
    8ebe:	b29a      	uxth	r2, r3
    8ec0:	683b      	ldr	r3, [r7, #0]
    8ec2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8ec4:	683a      	ldr	r2, [r7, #0]
    8ec6:	78d3      	ldrb	r3, [r2, #3]
    8ec8:	f043 0303 	orr.w	r3, r3, #3
    8ecc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8ece:	683a      	ldr	r2, [r7, #0]
    8ed0:	78d3      	ldrb	r3, [r2, #3]
    8ed2:	f043 030c 	orr.w	r3, r3, #12
    8ed6:	70d3      	strb	r3, [r2, #3]
}
    8ed8:	bf00      	nop
    8eda:	3714      	adds	r7, #20
    8edc:	46bd      	mov	sp, r7
    8ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ee2:	4770      	bx	lr
    8ee4:	00800084 	.word	0x00800084

00008ee8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8ee8:	b580      	push	{r7, lr}
    8eea:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8eec:	bf00      	nop
    8eee:	2203      	movs	r2, #3
    8ef0:	2100      	movs	r1, #0
    8ef2:	4804      	ldr	r0, [pc, #16]	; (8f04 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8ef4:	4b04      	ldr	r3, [pc, #16]	; (8f08 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8ef6:	4798      	blx	r3
    8ef8:	4603      	mov	r3, r0
    8efa:	2b03      	cmp	r3, #3
    8efc:	d1f7      	bne.n	8eee <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8efe:	bf00      	nop
    8f00:	bd80      	pop	{r7, pc}
    8f02:	bf00      	nop
    8f04:	40001000 	.word	0x40001000
    8f08:	0000891d 	.word	0x0000891d

00008f0c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8f0c:	b580      	push	{r7, lr}
    8f0e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8f10:	480e      	ldr	r0, [pc, #56]	; (8f4c <_usb_d_dev_wait_dfll_rdy+0x40>)
    8f12:	4b0f      	ldr	r3, [pc, #60]	; (8f50 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8f14:	4798      	blx	r3
    8f16:	4603      	mov	r3, r0
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d00a      	beq.n	8f32 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8f1c:	bf00      	nop
    8f1e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8f22:	480a      	ldr	r0, [pc, #40]	; (8f4c <_usb_d_dev_wait_dfll_rdy+0x40>)
    8f24:	4b0b      	ldr	r3, [pc, #44]	; (8f54 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8f26:	4798      	blx	r3
    8f28:	4603      	mov	r3, r0
    8f2a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8f2e:	d1f6      	bne.n	8f1e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8f30:	e009      	b.n	8f46 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8f32:	bf00      	nop
    8f34:	f44f 7180 	mov.w	r1, #256	; 0x100
    8f38:	4804      	ldr	r0, [pc, #16]	; (8f4c <_usb_d_dev_wait_dfll_rdy+0x40>)
    8f3a:	4b06      	ldr	r3, [pc, #24]	; (8f54 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8f3c:	4798      	blx	r3
    8f3e:	4603      	mov	r3, r0
    8f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8f44:	d1f6      	bne.n	8f34 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8f46:	bf00      	nop
    8f48:	bd80      	pop	{r7, pc}
    8f4a:	bf00      	nop
    8f4c:	40001000 	.word	0x40001000
    8f50:	0000897b 	.word	0x0000897b
    8f54:	00008955 	.word	0x00008955

00008f58 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b082      	sub	sp, #8
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	4603      	mov	r3, r0
    8f60:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8f62:	79fb      	ldrb	r3, [r7, #7]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d102      	bne.n	8f6e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8f68:	4b05      	ldr	r3, [pc, #20]	; (8f80 <_usb_d_dev_wait_clk_rdy+0x28>)
    8f6a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8f6c:	e004      	b.n	8f78 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8f6e:	79fb      	ldrb	r3, [r7, #7]
    8f70:	2b01      	cmp	r3, #1
    8f72:	d101      	bne.n	8f78 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8f74:	4b03      	ldr	r3, [pc, #12]	; (8f84 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8f76:	4798      	blx	r3
}
    8f78:	bf00      	nop
    8f7a:	3708      	adds	r7, #8
    8f7c:	46bd      	mov	sp, r7
    8f7e:	bd80      	pop	{r7, pc}
    8f80:	00008f0d 	.word	0x00008f0d
    8f84:	00008ee9 	.word	0x00008ee9

00008f88 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8f88:	b580      	push	{r7, lr}
    8f8a:	b082      	sub	sp, #8
    8f8c:	af00      	add	r7, sp, #0
    8f8e:	4603      	mov	r3, r0
    8f90:	6039      	str	r1, [r7, #0]
    8f92:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8f94:	683b      	ldr	r3, [r7, #0]
    8f96:	b2da      	uxtb	r2, r3
    8f98:	79fb      	ldrb	r3, [r7, #7]
    8f9a:	4619      	mov	r1, r3
    8f9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fa0:	4b02      	ldr	r3, [pc, #8]	; (8fac <_usbd_ep_int_ack+0x24>)
    8fa2:	4798      	blx	r3
}
    8fa4:	bf00      	nop
    8fa6:	3708      	adds	r7, #8
    8fa8:	46bd      	mov	sp, r7
    8faa:	bd80      	pop	{r7, pc}
    8fac:	00008a61 	.word	0x00008a61

00008fb0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8fb0:	b580      	push	{r7, lr}
    8fb2:	b082      	sub	sp, #8
    8fb4:	af00      	add	r7, sp, #0
    8fb6:	4603      	mov	r3, r0
    8fb8:	6039      	str	r1, [r7, #0]
    8fba:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8fbc:	683b      	ldr	r3, [r7, #0]
    8fbe:	b2da      	uxtb	r2, r3
    8fc0:	79fb      	ldrb	r3, [r7, #7]
    8fc2:	4619      	mov	r1, r3
    8fc4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fc8:	4b02      	ldr	r3, [pc, #8]	; (8fd4 <_usbd_ep_int_en+0x24>)
    8fca:	4798      	blx	r3
}
    8fcc:	bf00      	nop
    8fce:	3708      	adds	r7, #8
    8fd0:	46bd      	mov	sp, r7
    8fd2:	bd80      	pop	{r7, pc}
    8fd4:	00008b35 	.word	0x00008b35

00008fd8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8fd8:	b580      	push	{r7, lr}
    8fda:	b082      	sub	sp, #8
    8fdc:	af00      	add	r7, sp, #0
    8fde:	4603      	mov	r3, r0
    8fe0:	6039      	str	r1, [r7, #0]
    8fe2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8fe4:	683b      	ldr	r3, [r7, #0]
    8fe6:	b2da      	uxtb	r2, r3
    8fe8:	79fb      	ldrb	r3, [r7, #7]
    8fea:	4619      	mov	r1, r3
    8fec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ff0:	4b02      	ldr	r3, [pc, #8]	; (8ffc <_usbd_ep_int_dis+0x24>)
    8ff2:	4798      	blx	r3
}
    8ff4:	bf00      	nop
    8ff6:	3708      	adds	r7, #8
    8ff8:	46bd      	mov	sp, r7
    8ffa:	bd80      	pop	{r7, pc}
    8ffc:	00008b61 	.word	0x00008b61

00009000 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9000:	b580      	push	{r7, lr}
    9002:	b082      	sub	sp, #8
    9004:	af00      	add	r7, sp, #0
    9006:	4603      	mov	r3, r0
    9008:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    900a:	79fb      	ldrb	r3, [r7, #7]
    900c:	4619      	mov	r1, r3
    900e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9012:	4b06      	ldr	r3, [pc, #24]	; (902c <_usbd_ep_is_ctrl+0x2c>)
    9014:	4798      	blx	r3
    9016:	4603      	mov	r3, r0
    9018:	2b11      	cmp	r3, #17
    901a:	bf0c      	ite	eq
    901c:	2301      	moveq	r3, #1
    901e:	2300      	movne	r3, #0
    9020:	b2db      	uxtb	r3, r3
}
    9022:	4618      	mov	r0, r3
    9024:	3708      	adds	r7, #8
    9026:	46bd      	mov	sp, r7
    9028:	bd80      	pop	{r7, pc}
    902a:	bf00      	nop
    902c:	00008c1b 	.word	0x00008c1b

00009030 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9030:	b580      	push	{r7, lr}
    9032:	b082      	sub	sp, #8
    9034:	af00      	add	r7, sp, #0
    9036:	4603      	mov	r3, r0
    9038:	71fb      	strb	r3, [r7, #7]
    903a:	460b      	mov	r3, r1
    903c:	71bb      	strb	r3, [r7, #6]
    903e:	4613      	mov	r3, r2
    9040:	717b      	strb	r3, [r7, #5]
	if (st) {
    9042:	797b      	ldrb	r3, [r7, #5]
    9044:	2b00      	cmp	r3, #0
    9046:	d00b      	beq.n	9060 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9048:	79bb      	ldrb	r3, [r7, #6]
    904a:	2210      	movs	r2, #16
    904c:	fa02 f303 	lsl.w	r3, r2, r3
    9050:	b2da      	uxtb	r2, r3
    9052:	79fb      	ldrb	r3, [r7, #7]
    9054:	4619      	mov	r1, r3
    9056:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    905a:	4b09      	ldr	r3, [pc, #36]	; (9080 <_usbd_ep_set_stall+0x50>)
    905c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    905e:	e00a      	b.n	9076 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9060:	79bb      	ldrb	r3, [r7, #6]
    9062:	2210      	movs	r2, #16
    9064:	fa02 f303 	lsl.w	r3, r2, r3
    9068:	b2da      	uxtb	r2, r3
    906a:	79fb      	ldrb	r3, [r7, #7]
    906c:	4619      	mov	r1, r3
    906e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9072:	4b04      	ldr	r3, [pc, #16]	; (9084 <_usbd_ep_set_stall+0x54>)
    9074:	4798      	blx	r3
}
    9076:	bf00      	nop
    9078:	3708      	adds	r7, #8
    907a:	46bd      	mov	sp, r7
    907c:	bd80      	pop	{r7, pc}
    907e:	bf00      	nop
    9080:	00008a8d 	.word	0x00008a8d
    9084:	00008ae1 	.word	0x00008ae1

00009088 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9088:	b580      	push	{r7, lr}
    908a:	b084      	sub	sp, #16
    908c:	af00      	add	r7, sp, #0
    908e:	4603      	mov	r3, r0
    9090:	460a      	mov	r2, r1
    9092:	71fb      	strb	r3, [r7, #7]
    9094:	4613      	mov	r3, r2
    9096:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9098:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    909c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    909e:	79fb      	ldrb	r3, [r7, #7]
    90a0:	4619      	mov	r1, r3
    90a2:	68f8      	ldr	r0, [r7, #12]
    90a4:	4b08      	ldr	r3, [pc, #32]	; (90c8 <_usbd_ep_is_stalled+0x40>)
    90a6:	4798      	blx	r3
    90a8:	4603      	mov	r3, r0
    90aa:	4619      	mov	r1, r3
    90ac:	79bb      	ldrb	r3, [r7, #6]
    90ae:	2210      	movs	r2, #16
    90b0:	fa02 f303 	lsl.w	r3, r2, r3
    90b4:	400b      	ands	r3, r1
    90b6:	2b00      	cmp	r3, #0
    90b8:	bf14      	ite	ne
    90ba:	2301      	movne	r3, #1
    90bc:	2300      	moveq	r3, #0
    90be:	b2db      	uxtb	r3, r3
}
    90c0:	4618      	mov	r0, r3
    90c2:	3710      	adds	r7, #16
    90c4:	46bd      	mov	sp, r7
    90c6:	bd80      	pop	{r7, pc}
    90c8:	00008ab9 	.word	0x00008ab9

000090cc <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    90cc:	b580      	push	{r7, lr}
    90ce:	b084      	sub	sp, #16
    90d0:	af00      	add	r7, sp, #0
    90d2:	4603      	mov	r3, r0
    90d4:	460a      	mov	r2, r1
    90d6:	71fb      	strb	r3, [r7, #7]
    90d8:	4613      	mov	r3, r2
    90da:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    90dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90e0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    90e2:	79fb      	ldrb	r3, [r7, #7]
    90e4:	4619      	mov	r1, r3
    90e6:	68f8      	ldr	r0, [r7, #12]
    90e8:	4b08      	ldr	r3, [pc, #32]	; (910c <_usbd_ep_is_stall_sent+0x40>)
    90ea:	4798      	blx	r3
    90ec:	4603      	mov	r3, r0
    90ee:	4619      	mov	r1, r3
    90f0:	79bb      	ldrb	r3, [r7, #6]
    90f2:	2220      	movs	r2, #32
    90f4:	fa02 f303 	lsl.w	r3, r2, r3
    90f8:	400b      	ands	r3, r1
    90fa:	2b00      	cmp	r3, #0
    90fc:	bf14      	ite	ne
    90fe:	2301      	movne	r3, #1
    9100:	2300      	moveq	r3, #0
    9102:	b2db      	uxtb	r3, r3
}
    9104:	4618      	mov	r0, r3
    9106:	3710      	adds	r7, #16
    9108:	46bd      	mov	sp, r7
    910a:	bd80      	pop	{r7, pc}
    910c:	00008a39 	.word	0x00008a39

00009110 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9110:	b580      	push	{r7, lr}
    9112:	b082      	sub	sp, #8
    9114:	af00      	add	r7, sp, #0
    9116:	4603      	mov	r3, r0
    9118:	460a      	mov	r2, r1
    911a:	71fb      	strb	r3, [r7, #7]
    911c:	4613      	mov	r3, r2
    911e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9120:	79bb      	ldrb	r3, [r7, #6]
    9122:	2220      	movs	r2, #32
    9124:	409a      	lsls	r2, r3
    9126:	79fb      	ldrb	r3, [r7, #7]
    9128:	4611      	mov	r1, r2
    912a:	4618      	mov	r0, r3
    912c:	4b02      	ldr	r3, [pc, #8]	; (9138 <_usbd_ep_ack_stall+0x28>)
    912e:	4798      	blx	r3
}
    9130:	bf00      	nop
    9132:	3708      	adds	r7, #8
    9134:	46bd      	mov	sp, r7
    9136:	bd80      	pop	{r7, pc}
    9138:	00008f89 	.word	0x00008f89

0000913c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    913c:	b580      	push	{r7, lr}
    913e:	b082      	sub	sp, #8
    9140:	af00      	add	r7, sp, #0
    9142:	4603      	mov	r3, r0
    9144:	71fb      	strb	r3, [r7, #7]
    9146:	460b      	mov	r3, r1
    9148:	71bb      	strb	r3, [r7, #6]
    914a:	4613      	mov	r3, r2
    914c:	717b      	strb	r3, [r7, #5]
	if (en) {
    914e:	797b      	ldrb	r3, [r7, #5]
    9150:	2b00      	cmp	r3, #0
    9152:	d008      	beq.n	9166 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9154:	79bb      	ldrb	r3, [r7, #6]
    9156:	2220      	movs	r2, #32
    9158:	409a      	lsls	r2, r3
    915a:	79fb      	ldrb	r3, [r7, #7]
    915c:	4611      	mov	r1, r2
    915e:	4618      	mov	r0, r3
    9160:	4b07      	ldr	r3, [pc, #28]	; (9180 <_usbd_ep_int_stall_en+0x44>)
    9162:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9164:	e007      	b.n	9176 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9166:	79bb      	ldrb	r3, [r7, #6]
    9168:	2220      	movs	r2, #32
    916a:	409a      	lsls	r2, r3
    916c:	79fb      	ldrb	r3, [r7, #7]
    916e:	4611      	mov	r1, r2
    9170:	4618      	mov	r0, r3
    9172:	4b04      	ldr	r3, [pc, #16]	; (9184 <_usbd_ep_int_stall_en+0x48>)
    9174:	4798      	blx	r3
}
    9176:	bf00      	nop
    9178:	3708      	adds	r7, #8
    917a:	46bd      	mov	sp, r7
    917c:	bd80      	pop	{r7, pc}
    917e:	bf00      	nop
    9180:	00008fb1 	.word	0x00008fb1
    9184:	00008fd9 	.word	0x00008fd9

00009188 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9188:	b580      	push	{r7, lr}
    918a:	b082      	sub	sp, #8
    918c:	af00      	add	r7, sp, #0
    918e:	4603      	mov	r3, r0
    9190:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9192:	79fb      	ldrb	r3, [r7, #7]
    9194:	4619      	mov	r1, r3
    9196:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    919a:	4b03      	ldr	r3, [pc, #12]	; (91a8 <_usbd_ep_stop_setup+0x20>)
    919c:	4798      	blx	r3
}
    919e:	bf00      	nop
    91a0:	3708      	adds	r7, #8
    91a2:	46bd      	mov	sp, r7
    91a4:	bd80      	pop	{r7, pc}
    91a6:	bf00      	nop
    91a8:	00008b0d 	.word	0x00008b0d

000091ac <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    91ac:	b580      	push	{r7, lr}
    91ae:	b082      	sub	sp, #8
    91b0:	af00      	add	r7, sp, #0
    91b2:	4603      	mov	r3, r0
    91b4:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    91b6:	79fb      	ldrb	r3, [r7, #7]
    91b8:	2210      	movs	r2, #16
    91ba:	4619      	mov	r1, r3
    91bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91c0:	4b05      	ldr	r3, [pc, #20]	; (91d8 <_usbd_ep_is_setup+0x2c>)
    91c2:	4798      	blx	r3
    91c4:	4603      	mov	r3, r0
    91c6:	2b00      	cmp	r3, #0
    91c8:	bf14      	ite	ne
    91ca:	2301      	movne	r3, #1
    91cc:	2300      	moveq	r3, #0
    91ce:	b2db      	uxtb	r3, r3
}
    91d0:	4618      	mov	r0, r3
    91d2:	3708      	adds	r7, #8
    91d4:	46bd      	mov	sp, r7
    91d6:	bd80      	pop	{r7, pc}
    91d8:	00008a03 	.word	0x00008a03

000091dc <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    91dc:	b580      	push	{r7, lr}
    91de:	b082      	sub	sp, #8
    91e0:	af00      	add	r7, sp, #0
    91e2:	4603      	mov	r3, r0
    91e4:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    91e6:	79fb      	ldrb	r3, [r7, #7]
    91e8:	2110      	movs	r1, #16
    91ea:	4618      	mov	r0, r3
    91ec:	4b02      	ldr	r3, [pc, #8]	; (91f8 <_usbd_ep_ack_setup+0x1c>)
    91ee:	4798      	blx	r3
}
    91f0:	bf00      	nop
    91f2:	3708      	adds	r7, #8
    91f4:	46bd      	mov	sp, r7
    91f6:	bd80      	pop	{r7, pc}
    91f8:	00008f89 	.word	0x00008f89

000091fc <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    91fc:	b580      	push	{r7, lr}
    91fe:	b082      	sub	sp, #8
    9200:	af00      	add	r7, sp, #0
    9202:	4603      	mov	r3, r0
    9204:	71fb      	strb	r3, [r7, #7]
    9206:	460b      	mov	r3, r1
    9208:	71bb      	strb	r3, [r7, #6]
    920a:	4613      	mov	r3, r2
    920c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    920e:	797b      	ldrb	r3, [r7, #5]
    9210:	2b00      	cmp	r3, #0
    9212:	d00b      	beq.n	922c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9214:	79bb      	ldrb	r3, [r7, #6]
    9216:	2201      	movs	r2, #1
    9218:	fa02 f303 	lsl.w	r3, r2, r3
    921c:	b2da      	uxtb	r2, r3
    921e:	79fb      	ldrb	r3, [r7, #7]
    9220:	4619      	mov	r1, r3
    9222:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9226:	4b09      	ldr	r3, [pc, #36]	; (924c <_usbd_ep_set_toggle+0x50>)
    9228:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    922a:	e00a      	b.n	9242 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    922c:	79bb      	ldrb	r3, [r7, #6]
    922e:	2201      	movs	r2, #1
    9230:	fa02 f303 	lsl.w	r3, r2, r3
    9234:	b2da      	uxtb	r2, r3
    9236:	79fb      	ldrb	r3, [r7, #7]
    9238:	4619      	mov	r1, r3
    923a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    923e:	4b04      	ldr	r3, [pc, #16]	; (9250 <_usbd_ep_set_toggle+0x54>)
    9240:	4798      	blx	r3
}
    9242:	bf00      	nop
    9244:	3708      	adds	r7, #8
    9246:	46bd      	mov	sp, r7
    9248:	bd80      	pop	{r7, pc}
    924a:	bf00      	nop
    924c:	00008a8d 	.word	0x00008a8d
    9250:	00008ae1 	.word	0x00008ae1

00009254 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9254:	b580      	push	{r7, lr}
    9256:	b082      	sub	sp, #8
    9258:	af00      	add	r7, sp, #0
    925a:	4603      	mov	r3, r0
    925c:	460a      	mov	r2, r1
    925e:	71fb      	strb	r3, [r7, #7]
    9260:	4613      	mov	r3, r2
    9262:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9264:	79bb      	ldrb	r3, [r7, #6]
    9266:	2201      	movs	r2, #1
    9268:	409a      	lsls	r2, r3
    926a:	79fb      	ldrb	r3, [r7, #7]
    926c:	4611      	mov	r1, r2
    926e:	4618      	mov	r0, r3
    9270:	4b02      	ldr	r3, [pc, #8]	; (927c <_usbd_ep_ack_io_cpt+0x28>)
    9272:	4798      	blx	r3
}
    9274:	bf00      	nop
    9276:	3708      	adds	r7, #8
    9278:	46bd      	mov	sp, r7
    927a:	bd80      	pop	{r7, pc}
    927c:	00008f89 	.word	0x00008f89

00009280 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9280:	b480      	push	{r7}
    9282:	b085      	sub	sp, #20
    9284:	af00      	add	r7, sp, #0
    9286:	4603      	mov	r3, r0
    9288:	603a      	str	r2, [r7, #0]
    928a:	71fb      	strb	r3, [r7, #7]
    928c:	460b      	mov	r3, r1
    928e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9290:	79fa      	ldrb	r2, [r7, #7]
    9292:	79bb      	ldrb	r3, [r7, #6]
    9294:	0052      	lsls	r2, r2, #1
    9296:	4413      	add	r3, r2
    9298:	011b      	lsls	r3, r3, #4
    929a:	4a06      	ldr	r2, [pc, #24]	; (92b4 <_usbd_ep_set_buf+0x34>)
    929c:	4413      	add	r3, r2
    929e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    92a0:	68fb      	ldr	r3, [r7, #12]
    92a2:	683a      	ldr	r2, [r7, #0]
    92a4:	601a      	str	r2, [r3, #0]
}
    92a6:	bf00      	nop
    92a8:	3714      	adds	r7, #20
    92aa:	46bd      	mov	sp, r7
    92ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b0:	4770      	bx	lr
    92b2:	bf00      	nop
    92b4:	20000f68 	.word	0x20000f68

000092b8 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    92b8:	b480      	push	{r7}
    92ba:	b085      	sub	sp, #20
    92bc:	af00      	add	r7, sp, #0
    92be:	4603      	mov	r3, r0
    92c0:	71fb      	strb	r3, [r7, #7]
    92c2:	460b      	mov	r3, r1
    92c4:	71bb      	strb	r3, [r7, #6]
    92c6:	4613      	mov	r3, r2
    92c8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    92ca:	79fa      	ldrb	r2, [r7, #7]
    92cc:	79bb      	ldrb	r3, [r7, #6]
    92ce:	0052      	lsls	r2, r2, #1
    92d0:	4413      	add	r3, r2
    92d2:	011b      	lsls	r3, r3, #4
    92d4:	4a08      	ldr	r2, [pc, #32]	; (92f8 <_usbd_ep_set_in_count+0x40>)
    92d6:	4413      	add	r3, r2
    92d8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    92da:	88bb      	ldrh	r3, [r7, #4]
    92dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    92e0:	b299      	uxth	r1, r3
    92e2:	68fa      	ldr	r2, [r7, #12]
    92e4:	6853      	ldr	r3, [r2, #4]
    92e6:	f361 339b 	bfi	r3, r1, #14, #14
    92ea:	6053      	str	r3, [r2, #4]
}
    92ec:	bf00      	nop
    92ee:	3714      	adds	r7, #20
    92f0:	46bd      	mov	sp, r7
    92f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f6:	4770      	bx	lr
    92f8:	20000f68 	.word	0x20000f68

000092fc <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    92fc:	b480      	push	{r7}
    92fe:	b085      	sub	sp, #20
    9300:	af00      	add	r7, sp, #0
    9302:	4603      	mov	r3, r0
    9304:	71fb      	strb	r3, [r7, #7]
    9306:	460b      	mov	r3, r1
    9308:	71bb      	strb	r3, [r7, #6]
    930a:	4613      	mov	r3, r2
    930c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    930e:	79fa      	ldrb	r2, [r7, #7]
    9310:	79bb      	ldrb	r3, [r7, #6]
    9312:	0052      	lsls	r2, r2, #1
    9314:	4413      	add	r3, r2
    9316:	011b      	lsls	r3, r3, #4
    9318:	4a08      	ldr	r2, [pc, #32]	; (933c <_usbd_ep_set_in_size+0x40>)
    931a:	4413      	add	r3, r2
    931c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    931e:	88bb      	ldrh	r3, [r7, #4]
    9320:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9324:	b299      	uxth	r1, r3
    9326:	68fa      	ldr	r2, [r7, #12]
    9328:	6853      	ldr	r3, [r2, #4]
    932a:	f361 030d 	bfi	r3, r1, #0, #14
    932e:	6053      	str	r3, [r2, #4]
}
    9330:	bf00      	nop
    9332:	3714      	adds	r7, #20
    9334:	46bd      	mov	sp, r7
    9336:	f85d 7b04 	ldr.w	r7, [sp], #4
    933a:	4770      	bx	lr
    933c:	20000f68 	.word	0x20000f68

00009340 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9340:	b480      	push	{r7}
    9342:	b085      	sub	sp, #20
    9344:	af00      	add	r7, sp, #0
    9346:	4603      	mov	r3, r0
    9348:	71fb      	strb	r3, [r7, #7]
    934a:	460b      	mov	r3, r1
    934c:	71bb      	strb	r3, [r7, #6]
    934e:	4613      	mov	r3, r2
    9350:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9352:	79fa      	ldrb	r2, [r7, #7]
    9354:	79bb      	ldrb	r3, [r7, #6]
    9356:	0052      	lsls	r2, r2, #1
    9358:	4413      	add	r3, r2
    935a:	011b      	lsls	r3, r3, #4
    935c:	4a08      	ldr	r2, [pc, #32]	; (9380 <_usbd_ep_set_out_count+0x40>)
    935e:	4413      	add	r3, r2
    9360:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9362:	88bb      	ldrh	r3, [r7, #4]
    9364:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9368:	b299      	uxth	r1, r3
    936a:	68fa      	ldr	r2, [r7, #12]
    936c:	6853      	ldr	r3, [r2, #4]
    936e:	f361 030d 	bfi	r3, r1, #0, #14
    9372:	6053      	str	r3, [r2, #4]
}
    9374:	bf00      	nop
    9376:	3714      	adds	r7, #20
    9378:	46bd      	mov	sp, r7
    937a:	f85d 7b04 	ldr.w	r7, [sp], #4
    937e:	4770      	bx	lr
    9380:	20000f68 	.word	0x20000f68

00009384 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9384:	b480      	push	{r7}
    9386:	b085      	sub	sp, #20
    9388:	af00      	add	r7, sp, #0
    938a:	4603      	mov	r3, r0
    938c:	71fb      	strb	r3, [r7, #7]
    938e:	460b      	mov	r3, r1
    9390:	71bb      	strb	r3, [r7, #6]
    9392:	4613      	mov	r3, r2
    9394:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9396:	79fa      	ldrb	r2, [r7, #7]
    9398:	79bb      	ldrb	r3, [r7, #6]
    939a:	0052      	lsls	r2, r2, #1
    939c:	4413      	add	r3, r2
    939e:	011b      	lsls	r3, r3, #4
    93a0:	4a08      	ldr	r2, [pc, #32]	; (93c4 <_usbd_ep_set_out_size+0x40>)
    93a2:	4413      	add	r3, r2
    93a4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    93a6:	88bb      	ldrh	r3, [r7, #4]
    93a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    93ac:	b299      	uxth	r1, r3
    93ae:	68fa      	ldr	r2, [r7, #12]
    93b0:	6853      	ldr	r3, [r2, #4]
    93b2:	f361 339b 	bfi	r3, r1, #14, #14
    93b6:	6053      	str	r3, [r2, #4]
}
    93b8:	bf00      	nop
    93ba:	3714      	adds	r7, #20
    93bc:	46bd      	mov	sp, r7
    93be:	f85d 7b04 	ldr.w	r7, [sp], #4
    93c2:	4770      	bx	lr
    93c4:	20000f68 	.word	0x20000f68

000093c8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    93c8:	b580      	push	{r7, lr}
    93ca:	b084      	sub	sp, #16
    93cc:	af00      	add	r7, sp, #0
    93ce:	60ba      	str	r2, [r7, #8]
    93d0:	607b      	str	r3, [r7, #4]
    93d2:	4603      	mov	r3, r0
    93d4:	73fb      	strb	r3, [r7, #15]
    93d6:	460b      	mov	r3, r1
    93d8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    93da:	68bb      	ldr	r3, [r7, #8]
    93dc:	b29a      	uxth	r2, r3
    93de:	7bb9      	ldrb	r1, [r7, #14]
    93e0:	7bfb      	ldrb	r3, [r7, #15]
    93e2:	4618      	mov	r0, r3
    93e4:	4b06      	ldr	r3, [pc, #24]	; (9400 <_usbd_ep_set_in_trans+0x38>)
    93e6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	b29a      	uxth	r2, r3
    93ec:	7bb9      	ldrb	r1, [r7, #14]
    93ee:	7bfb      	ldrb	r3, [r7, #15]
    93f0:	4618      	mov	r0, r3
    93f2:	4b04      	ldr	r3, [pc, #16]	; (9404 <_usbd_ep_set_in_trans+0x3c>)
    93f4:	4798      	blx	r3
}
    93f6:	bf00      	nop
    93f8:	3710      	adds	r7, #16
    93fa:	46bd      	mov	sp, r7
    93fc:	bd80      	pop	{r7, pc}
    93fe:	bf00      	nop
    9400:	000092fd 	.word	0x000092fd
    9404:	000092b9 	.word	0x000092b9

00009408 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9408:	b580      	push	{r7, lr}
    940a:	b084      	sub	sp, #16
    940c:	af00      	add	r7, sp, #0
    940e:	60ba      	str	r2, [r7, #8]
    9410:	607b      	str	r3, [r7, #4]
    9412:	4603      	mov	r3, r0
    9414:	73fb      	strb	r3, [r7, #15]
    9416:	460b      	mov	r3, r1
    9418:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    941a:	68bb      	ldr	r3, [r7, #8]
    941c:	b29a      	uxth	r2, r3
    941e:	7bb9      	ldrb	r1, [r7, #14]
    9420:	7bfb      	ldrb	r3, [r7, #15]
    9422:	4618      	mov	r0, r3
    9424:	4b06      	ldr	r3, [pc, #24]	; (9440 <_usbd_ep_set_out_trans+0x38>)
    9426:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	b29a      	uxth	r2, r3
    942c:	7bb9      	ldrb	r1, [r7, #14]
    942e:	7bfb      	ldrb	r3, [r7, #15]
    9430:	4618      	mov	r0, r3
    9432:	4b04      	ldr	r3, [pc, #16]	; (9444 <_usbd_ep_set_out_trans+0x3c>)
    9434:	4798      	blx	r3
}
    9436:	bf00      	nop
    9438:	3710      	adds	r7, #16
    943a:	46bd      	mov	sp, r7
    943c:	bd80      	pop	{r7, pc}
    943e:	bf00      	nop
    9440:	00009385 	.word	0x00009385
    9444:	00009341 	.word	0x00009341

00009448 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9448:	b480      	push	{r7}
    944a:	b085      	sub	sp, #20
    944c:	af00      	add	r7, sp, #0
    944e:	4603      	mov	r3, r0
    9450:	460a      	mov	r2, r1
    9452:	71fb      	strb	r3, [r7, #7]
    9454:	4613      	mov	r3, r2
    9456:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9458:	79fa      	ldrb	r2, [r7, #7]
    945a:	79bb      	ldrb	r3, [r7, #6]
    945c:	0052      	lsls	r2, r2, #1
    945e:	4413      	add	r3, r2
    9460:	011b      	lsls	r3, r3, #4
    9462:	4a06      	ldr	r2, [pc, #24]	; (947c <_usbd_ep_clear_bank_status+0x34>)
    9464:	4413      	add	r3, r2
    9466:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9468:	68fb      	ldr	r3, [r7, #12]
    946a:	2200      	movs	r2, #0
    946c:	729a      	strb	r2, [r3, #10]
}
    946e:	bf00      	nop
    9470:	3714      	adds	r7, #20
    9472:	46bd      	mov	sp, r7
    9474:	f85d 7b04 	ldr.w	r7, [sp], #4
    9478:	4770      	bx	lr
    947a:	bf00      	nop
    947c:	20000f68 	.word	0x20000f68

00009480 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9480:	b580      	push	{r7, lr}
    9482:	b082      	sub	sp, #8
    9484:	af00      	add	r7, sp, #0
    9486:	4603      	mov	r3, r0
    9488:	71fb      	strb	r3, [r7, #7]
    948a:	460b      	mov	r3, r1
    948c:	71bb      	strb	r3, [r7, #6]
    948e:	4613      	mov	r3, r2
    9490:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9492:	797b      	ldrb	r3, [r7, #5]
    9494:	2b00      	cmp	r3, #0
    9496:	d00b      	beq.n	94b0 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9498:	79bb      	ldrb	r3, [r7, #6]
    949a:	2240      	movs	r2, #64	; 0x40
    949c:	fa02 f303 	lsl.w	r3, r2, r3
    94a0:	b2da      	uxtb	r2, r3
    94a2:	79fb      	ldrb	r3, [r7, #7]
    94a4:	4619      	mov	r1, r3
    94a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94aa:	4b09      	ldr	r3, [pc, #36]	; (94d0 <_usbd_ep_set_in_rdy+0x50>)
    94ac:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    94ae:	e00a      	b.n	94c6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    94b0:	79bb      	ldrb	r3, [r7, #6]
    94b2:	2240      	movs	r2, #64	; 0x40
    94b4:	fa02 f303 	lsl.w	r3, r2, r3
    94b8:	b2da      	uxtb	r2, r3
    94ba:	79fb      	ldrb	r3, [r7, #7]
    94bc:	4619      	mov	r1, r3
    94be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94c2:	4b04      	ldr	r3, [pc, #16]	; (94d4 <_usbd_ep_set_in_rdy+0x54>)
    94c4:	4798      	blx	r3
}
    94c6:	bf00      	nop
    94c8:	3708      	adds	r7, #8
    94ca:	46bd      	mov	sp, r7
    94cc:	bd80      	pop	{r7, pc}
    94ce:	bf00      	nop
    94d0:	00008a8d 	.word	0x00008a8d
    94d4:	00008ae1 	.word	0x00008ae1

000094d8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    94d8:	b580      	push	{r7, lr}
    94da:	b082      	sub	sp, #8
    94dc:	af00      	add	r7, sp, #0
    94de:	4603      	mov	r3, r0
    94e0:	71fb      	strb	r3, [r7, #7]
    94e2:	460b      	mov	r3, r1
    94e4:	71bb      	strb	r3, [r7, #6]
    94e6:	4613      	mov	r3, r2
    94e8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    94ea:	797b      	ldrb	r3, [r7, #5]
    94ec:	2b00      	cmp	r3, #0
    94ee:	d00b      	beq.n	9508 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    94f0:	79bb      	ldrb	r3, [r7, #6]
    94f2:	2240      	movs	r2, #64	; 0x40
    94f4:	fa02 f303 	lsl.w	r3, r2, r3
    94f8:	b2da      	uxtb	r2, r3
    94fa:	79fb      	ldrb	r3, [r7, #7]
    94fc:	4619      	mov	r1, r3
    94fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9502:	4b09      	ldr	r3, [pc, #36]	; (9528 <_usbd_ep_set_out_rdy+0x50>)
    9504:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9506:	e00a      	b.n	951e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9508:	79bb      	ldrb	r3, [r7, #6]
    950a:	2240      	movs	r2, #64	; 0x40
    950c:	fa02 f303 	lsl.w	r3, r2, r3
    9510:	b2da      	uxtb	r2, r3
    9512:	79fb      	ldrb	r3, [r7, #7]
    9514:	4619      	mov	r1, r3
    9516:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    951a:	4b04      	ldr	r3, [pc, #16]	; (952c <_usbd_ep_set_out_rdy+0x54>)
    951c:	4798      	blx	r3
}
    951e:	bf00      	nop
    9520:	3708      	adds	r7, #8
    9522:	46bd      	mov	sp, r7
    9524:	bd80      	pop	{r7, pc}
    9526:	bf00      	nop
    9528:	00008ae1 	.word	0x00008ae1
    952c:	00008a8d 	.word	0x00008a8d

00009530 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9530:	b480      	push	{r7}
    9532:	b083      	sub	sp, #12
    9534:	af00      	add	r7, sp, #0
    9536:	4603      	mov	r3, r0
    9538:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    953a:	88fb      	ldrh	r3, [r7, #6]
    953c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9540:	d820      	bhi.n	9584 <_usbd_ep_pcksize_size+0x54>
    9542:	88fb      	ldrh	r3, [r7, #6]
    9544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9548:	d81a      	bhi.n	9580 <_usbd_ep_pcksize_size+0x50>
    954a:	88fb      	ldrh	r3, [r7, #6]
    954c:	2b80      	cmp	r3, #128	; 0x80
    954e:	d815      	bhi.n	957c <_usbd_ep_pcksize_size+0x4c>
    9550:	88fb      	ldrh	r3, [r7, #6]
    9552:	2b40      	cmp	r3, #64	; 0x40
    9554:	d810      	bhi.n	9578 <_usbd_ep_pcksize_size+0x48>
    9556:	88fb      	ldrh	r3, [r7, #6]
    9558:	2b20      	cmp	r3, #32
    955a:	d80b      	bhi.n	9574 <_usbd_ep_pcksize_size+0x44>
    955c:	88fb      	ldrh	r3, [r7, #6]
    955e:	2b10      	cmp	r3, #16
    9560:	d806      	bhi.n	9570 <_usbd_ep_pcksize_size+0x40>
    9562:	88fb      	ldrh	r3, [r7, #6]
    9564:	2b08      	cmp	r3, #8
    9566:	bf8c      	ite	hi
    9568:	2301      	movhi	r3, #1
    956a:	2300      	movls	r3, #0
    956c:	b2db      	uxtb	r3, r3
    956e:	e00a      	b.n	9586 <_usbd_ep_pcksize_size+0x56>
    9570:	2302      	movs	r3, #2
    9572:	e008      	b.n	9586 <_usbd_ep_pcksize_size+0x56>
    9574:	2303      	movs	r3, #3
    9576:	e006      	b.n	9586 <_usbd_ep_pcksize_size+0x56>
    9578:	2304      	movs	r3, #4
    957a:	e004      	b.n	9586 <_usbd_ep_pcksize_size+0x56>
    957c:	2305      	movs	r3, #5
    957e:	e002      	b.n	9586 <_usbd_ep_pcksize_size+0x56>
    9580:	2306      	movs	r3, #6
    9582:	e000      	b.n	9586 <_usbd_ep_pcksize_size+0x56>
    9584:	2307      	movs	r3, #7
}
    9586:	4618      	mov	r0, r3
    9588:	370c      	adds	r7, #12
    958a:	46bd      	mov	sp, r7
    958c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9590:	4770      	bx	lr
	...

00009594 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9594:	b480      	push	{r7}
    9596:	b085      	sub	sp, #20
    9598:	af00      	add	r7, sp, #0
    959a:	4603      	mov	r3, r0
    959c:	460a      	mov	r2, r1
    959e:	71fb      	strb	r3, [r7, #7]
    95a0:	4613      	mov	r3, r2
    95a2:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    95a4:	79fb      	ldrb	r3, [r7, #7]
    95a6:	2b00      	cmp	r3, #0
    95a8:	d008      	beq.n	95bc <_usb_d_dev_ept+0x28>
    95aa:	79bb      	ldrb	r3, [r7, #6]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d003      	beq.n	95b8 <_usb_d_dev_ept+0x24>
    95b0:	79fb      	ldrb	r3, [r7, #7]
    95b2:	3304      	adds	r3, #4
    95b4:	b2db      	uxtb	r3, r3
    95b6:	e002      	b.n	95be <_usb_d_dev_ept+0x2a>
    95b8:	79fb      	ldrb	r3, [r7, #7]
    95ba:	e000      	b.n	95be <_usb_d_dev_ept+0x2a>
    95bc:	2300      	movs	r3, #0
    95be:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    95c0:	7bfa      	ldrb	r2, [r7, #15]
    95c2:	4613      	mov	r3, r2
    95c4:	009b      	lsls	r3, r3, #2
    95c6:	4413      	add	r3, r2
    95c8:	009b      	lsls	r3, r3, #2
    95ca:	3310      	adds	r3, #16
    95cc:	4a04      	ldr	r2, [pc, #16]	; (95e0 <_usb_d_dev_ept+0x4c>)
    95ce:	4413      	add	r3, r2
    95d0:	3304      	adds	r3, #4
}
    95d2:	4618      	mov	r0, r3
    95d4:	3714      	adds	r7, #20
    95d6:	46bd      	mov	sp, r7
    95d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95dc:	4770      	bx	lr
    95de:	bf00      	nop
    95e0:	20000ea0 	.word	0x20000ea0

000095e4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    95e4:	b580      	push	{r7, lr}
    95e6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    95e8:	2104      	movs	r1, #4
    95ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95ee:	4b03      	ldr	r3, [pc, #12]	; (95fc <_usb_d_dev_sof+0x18>)
    95f0:	4798      	blx	r3
	dev_inst.callbacks.sof();
    95f2:	4b03      	ldr	r3, [pc, #12]	; (9600 <_usb_d_dev_sof+0x1c>)
    95f4:	681b      	ldr	r3, [r3, #0]
    95f6:	4798      	blx	r3
}
    95f8:	bf00      	nop
    95fa:	bd80      	pop	{r7, pc}
    95fc:	00008c5b 	.word	0x00008c5b
    9600:	20000ea0 	.word	0x20000ea0

00009604 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9604:	b580      	push	{r7, lr}
    9606:	b084      	sub	sp, #16
    9608:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    960a:	2300      	movs	r3, #0
    960c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    960e:	f240 2101 	movw	r1, #513	; 0x201
    9612:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9616:	4b1a      	ldr	r3, [pc, #104]	; (9680 <_usb_d_dev_lpmsusp+0x7c>)
    9618:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    961a:	f240 2101 	movw	r1, #513	; 0x201
    961e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9622:	4b18      	ldr	r3, [pc, #96]	; (9684 <_usb_d_dev_lpmsusp+0x80>)
    9624:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9626:	2170      	movs	r1, #112	; 0x70
    9628:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    962c:	4b16      	ldr	r3, [pc, #88]	; (9688 <_usb_d_dev_lpmsusp+0x84>)
    962e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9630:	2300      	movs	r3, #0
    9632:	73fb      	strb	r3, [r7, #15]
    9634:	e018      	b.n	9668 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9636:	7bfb      	ldrb	r3, [r7, #15]
    9638:	015b      	lsls	r3, r3, #5
    963a:	4a14      	ldr	r2, [pc, #80]	; (968c <_usb_d_dev_lpmsusp+0x88>)
    963c:	4413      	add	r3, r2
    963e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9640:	687b      	ldr	r3, [r7, #4]
    9642:	891b      	ldrh	r3, [r3, #8]
    9644:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9648:	b2db      	uxtb	r3, r3
    964a:	2b03      	cmp	r3, #3
    964c:	d109      	bne.n	9662 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    964e:	687b      	ldr	r3, [r7, #4]
    9650:	891b      	ldrh	r3, [r3, #8]
    9652:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9656:	b29b      	uxth	r3, r3
    9658:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    965a:	687b      	ldr	r3, [r7, #4]
    965c:	2200      	movs	r2, #0
    965e:	811a      	strh	r2, [r3, #8]
			break;
    9660:	e005      	b.n	966e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9662:	7bfb      	ldrb	r3, [r7, #15]
    9664:	3301      	adds	r3, #1
    9666:	73fb      	strb	r3, [r7, #15]
    9668:	7bfb      	ldrb	r3, [r7, #15]
    966a:	2b03      	cmp	r3, #3
    966c:	d9e3      	bls.n	9636 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    966e:	4b08      	ldr	r3, [pc, #32]	; (9690 <_usb_d_dev_lpmsusp+0x8c>)
    9670:	685b      	ldr	r3, [r3, #4]
    9672:	68b9      	ldr	r1, [r7, #8]
    9674:	2003      	movs	r0, #3
    9676:	4798      	blx	r3
}
    9678:	bf00      	nop
    967a:	3710      	adds	r7, #16
    967c:	46bd      	mov	sp, r7
    967e:	bd80      	pop	{r7, pc}
    9680:	00008c5b 	.word	0x00008c5b
    9684:	00008cb1 	.word	0x00008cb1
    9688:	00008c79 	.word	0x00008c79
    968c:	20000f68 	.word	0x20000f68
    9690:	20000ea0 	.word	0x20000ea0

00009694 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9694:	b580      	push	{r7, lr}
    9696:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9698:	2180      	movs	r1, #128	; 0x80
    969a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    969e:	4b04      	ldr	r3, [pc, #16]	; (96b0 <_usb_d_dev_ramerr+0x1c>)
    96a0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    96a2:	4b04      	ldr	r3, [pc, #16]	; (96b4 <_usb_d_dev_ramerr+0x20>)
    96a4:	685b      	ldr	r3, [r3, #4]
    96a6:	2100      	movs	r1, #0
    96a8:	2005      	movs	r0, #5
    96aa:	4798      	blx	r3
}
    96ac:	bf00      	nop
    96ae:	bd80      	pop	{r7, pc}
    96b0:	00008c5b 	.word	0x00008c5b
    96b4:	20000ea0 	.word	0x20000ea0

000096b8 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    96b8:	b580      	push	{r7, lr}
    96ba:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    96bc:	2170      	movs	r1, #112	; 0x70
    96be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96c2:	4b0b      	ldr	r3, [pc, #44]	; (96f0 <_usb_d_dev_wakeup+0x38>)
    96c4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    96c6:	2170      	movs	r1, #112	; 0x70
    96c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96cc:	4b09      	ldr	r3, [pc, #36]	; (96f4 <_usb_d_dev_wakeup+0x3c>)
    96ce:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    96d0:	f240 2101 	movw	r1, #513	; 0x201
    96d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96d8:	4b07      	ldr	r3, [pc, #28]	; (96f8 <_usb_d_dev_wakeup+0x40>)
    96da:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    96dc:	2000      	movs	r0, #0
    96de:	4b07      	ldr	r3, [pc, #28]	; (96fc <_usb_d_dev_wakeup+0x44>)
    96e0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    96e2:	4b07      	ldr	r3, [pc, #28]	; (9700 <_usb_d_dev_wakeup+0x48>)
    96e4:	685b      	ldr	r3, [r3, #4]
    96e6:	2100      	movs	r1, #0
    96e8:	2002      	movs	r0, #2
    96ea:	4798      	blx	r3
}
    96ec:	bf00      	nop
    96ee:	bd80      	pop	{r7, pc}
    96f0:	00008c5b 	.word	0x00008c5b
    96f4:	00008cb1 	.word	0x00008cb1
    96f8:	00008c79 	.word	0x00008c79
    96fc:	00008f59 	.word	0x00008f59
    9700:	20000ea0 	.word	0x20000ea0

00009704 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9704:	b580      	push	{r7, lr}
    9706:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9708:	2200      	movs	r2, #0
    970a:	2100      	movs	r1, #0
    970c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9710:	4b0d      	ldr	r3, [pc, #52]	; (9748 <_usb_d_dev_reset+0x44>)
    9712:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9714:	2108      	movs	r1, #8
    9716:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    971a:	4b0c      	ldr	r3, [pc, #48]	; (974c <_usb_d_dev_reset+0x48>)
    971c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    971e:	2170      	movs	r1, #112	; 0x70
    9720:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9724:	4b0a      	ldr	r3, [pc, #40]	; (9750 <_usb_d_dev_reset+0x4c>)
    9726:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9728:	f240 2101 	movw	r1, #513	; 0x201
    972c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9730:	4b08      	ldr	r3, [pc, #32]	; (9754 <_usb_d_dev_reset+0x50>)
    9732:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9734:	4b08      	ldr	r3, [pc, #32]	; (9758 <_usb_d_dev_reset+0x54>)
    9736:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9738:	4b08      	ldr	r3, [pc, #32]	; (975c <_usb_d_dev_reset+0x58>)
    973a:	685b      	ldr	r3, [r3, #4]
    973c:	2100      	movs	r1, #0
    973e:	2001      	movs	r0, #1
    9740:	4798      	blx	r3
}
    9742:	bf00      	nop
    9744:	bd80      	pop	{r7, pc}
    9746:	bf00      	nop
    9748:	00008bf1 	.word	0x00008bf1
    974c:	00008c5b 	.word	0x00008c5b
    9750:	00008cb1 	.word	0x00008cb1
    9754:	00008c79 	.word	0x00008c79
    9758:	0000a2c1 	.word	0x0000a2c1
    975c:	20000ea0 	.word	0x20000ea0

00009760 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9760:	b580      	push	{r7, lr}
    9762:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9764:	f240 2101 	movw	r1, #513	; 0x201
    9768:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    976c:	4b09      	ldr	r3, [pc, #36]	; (9794 <_usb_d_dev_suspend+0x34>)
    976e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9770:	f240 2101 	movw	r1, #513	; 0x201
    9774:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9778:	4b07      	ldr	r3, [pc, #28]	; (9798 <_usb_d_dev_suspend+0x38>)
    977a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    977c:	2170      	movs	r1, #112	; 0x70
    977e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9782:	4b06      	ldr	r3, [pc, #24]	; (979c <_usb_d_dev_suspend+0x3c>)
    9784:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9786:	4b06      	ldr	r3, [pc, #24]	; (97a0 <_usb_d_dev_suspend+0x40>)
    9788:	685b      	ldr	r3, [r3, #4]
    978a:	2100      	movs	r1, #0
    978c:	2004      	movs	r0, #4
    978e:	4798      	blx	r3
}
    9790:	bf00      	nop
    9792:	bd80      	pop	{r7, pc}
    9794:	00008c5b 	.word	0x00008c5b
    9798:	00008cb1 	.word	0x00008cb1
    979c:	00008c79 	.word	0x00008c79
    97a0:	20000ea0 	.word	0x20000ea0

000097a4 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    97a4:	b580      	push	{r7, lr}
    97a6:	b082      	sub	sp, #8
    97a8:	af00      	add	r7, sp, #0
	bool     rc    = true;
    97aa:	2301      	movs	r3, #1
    97ac:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    97ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97b2:	4b22      	ldr	r3, [pc, #136]	; (983c <_usb_d_dev_handle_nep+0x98>)
    97b4:	4798      	blx	r3
    97b6:	4603      	mov	r3, r0
    97b8:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    97ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97be:	4b20      	ldr	r3, [pc, #128]	; (9840 <_usb_d_dev_handle_nep+0x9c>)
    97c0:	4798      	blx	r3
    97c2:	4603      	mov	r3, r0
    97c4:	461a      	mov	r2, r3
    97c6:	88bb      	ldrh	r3, [r7, #4]
    97c8:	4013      	ands	r3, r2
    97ca:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    97cc:	88bb      	ldrh	r3, [r7, #4]
    97ce:	f003 0304 	and.w	r3, r3, #4
    97d2:	2b00      	cmp	r3, #0
    97d4:	d003      	beq.n	97de <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    97d6:	4b1b      	ldr	r3, [pc, #108]	; (9844 <_usb_d_dev_handle_nep+0xa0>)
    97d8:	4798      	blx	r3
		return true;
    97da:	2301      	movs	r3, #1
    97dc:	e02a      	b.n	9834 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    97de:	88bb      	ldrh	r3, [r7, #4]
    97e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    97e4:	2b00      	cmp	r3, #0
    97e6:	d002      	beq.n	97ee <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    97e8:	4b17      	ldr	r3, [pc, #92]	; (9848 <_usb_d_dev_handle_nep+0xa4>)
    97ea:	4798      	blx	r3
    97ec:	e021      	b.n	9832 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    97ee:	88bb      	ldrh	r3, [r7, #4]
    97f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    97f4:	2b00      	cmp	r3, #0
    97f6:	d002      	beq.n	97fe <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    97f8:	4b14      	ldr	r3, [pc, #80]	; (984c <_usb_d_dev_handle_nep+0xa8>)
    97fa:	4798      	blx	r3
    97fc:	e019      	b.n	9832 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    97fe:	88bb      	ldrh	r3, [r7, #4]
    9800:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9804:	2b00      	cmp	r3, #0
    9806:	d002      	beq.n	980e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9808:	4b11      	ldr	r3, [pc, #68]	; (9850 <_usb_d_dev_handle_nep+0xac>)
    980a:	4798      	blx	r3
    980c:	e011      	b.n	9832 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    980e:	88bb      	ldrh	r3, [r7, #4]
    9810:	f003 0308 	and.w	r3, r3, #8
    9814:	2b00      	cmp	r3, #0
    9816:	d002      	beq.n	981e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9818:	4b0e      	ldr	r3, [pc, #56]	; (9854 <_usb_d_dev_handle_nep+0xb0>)
    981a:	4798      	blx	r3
    981c:	e009      	b.n	9832 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    981e:	88bb      	ldrh	r3, [r7, #4]
    9820:	f003 0301 	and.w	r3, r3, #1
    9824:	2b00      	cmp	r3, #0
    9826:	d002      	beq.n	982e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9828:	4b0b      	ldr	r3, [pc, #44]	; (9858 <_usb_d_dev_handle_nep+0xb4>)
    982a:	4798      	blx	r3
    982c:	e001      	b.n	9832 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    982e:	2300      	movs	r3, #0
    9830:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9832:	79fb      	ldrb	r3, [r7, #7]
}
    9834:	4618      	mov	r0, r3
    9836:	3708      	adds	r7, #8
    9838:	46bd      	mov	sp, r7
    983a:	bd80      	pop	{r7, pc}
    983c:	00008c41 	.word	0x00008c41
    9840:	00008c97 	.word	0x00008c97
    9844:	000095e5 	.word	0x000095e5
    9848:	00009605 	.word	0x00009605
    984c:	00009695 	.word	0x00009695
    9850:	000096b9 	.word	0x000096b9
    9854:	00009705 	.word	0x00009705
    9858:	00009761 	.word	0x00009761

0000985c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    985c:	b590      	push	{r4, r7, lr}
    985e:	b089      	sub	sp, #36	; 0x24
    9860:	af00      	add	r7, sp, #0
    9862:	6078      	str	r0, [r7, #4]
    9864:	460b      	mov	r3, r1
    9866:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9868:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    986c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	7c9b      	ldrb	r3, [r3, #18]
    9872:	f003 030f 	and.w	r3, r3, #15
    9876:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9878:	7dfb      	ldrb	r3, [r7, #23]
    987a:	015b      	lsls	r3, r3, #5
    987c:	4a73      	ldr	r2, [pc, #460]	; (9a4c <_usb_d_dev_in_next+0x1f0>)
    987e:	4413      	add	r3, r2
    9880:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9882:	78fb      	ldrb	r3, [r7, #3]
    9884:	2b00      	cmp	r3, #0
    9886:	d006      	beq.n	9896 <_usb_d_dev_in_next+0x3a>
    9888:	693b      	ldr	r3, [r7, #16]
    988a:	3310      	adds	r3, #16
    988c:	685b      	ldr	r3, [r3, #4]
    988e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9892:	b29b      	uxth	r3, r3
    9894:	e000      	b.n	9898 <_usb_d_dev_in_next+0x3c>
    9896:	2300      	movs	r3, #0
    9898:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	8a1b      	ldrh	r3, [r3, #16]
    989e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    98a2:	4293      	cmp	r3, r2
    98a4:	d103      	bne.n	98ae <_usb_d_dev_in_next+0x52>
    98a6:	687b      	ldr	r3, [r7, #4]
    98a8:	8a1b      	ldrh	r3, [r3, #16]
    98aa:	b21b      	sxth	r3, r3
    98ac:	e004      	b.n	98b8 <_usb_d_dev_in_next+0x5c>
    98ae:	687b      	ldr	r3, [r7, #4]
    98b0:	8a1b      	ldrh	r3, [r3, #16]
    98b2:	3b01      	subs	r3, #1
    98b4:	b29b      	uxth	r3, r3
    98b6:	b21b      	sxth	r3, r3
    98b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    98bc:	4013      	ands	r3, r2
    98be:	b21b      	sxth	r3, r3
    98c0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    98c2:	2300      	movs	r3, #0
    98c4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    98c6:	687b      	ldr	r3, [r7, #4]
    98c8:	7cdb      	ldrb	r3, [r3, #19]
    98ca:	f003 0307 	and.w	r3, r3, #7
    98ce:	b2db      	uxtb	r3, r3
    98d0:	2b01      	cmp	r3, #1
    98d2:	bf0c      	ite	eq
    98d4:	2301      	moveq	r3, #1
    98d6:	2300      	movne	r3, #0
    98d8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    98da:	78fb      	ldrb	r3, [r7, #3]
    98dc:	2b00      	cmp	r3, #0
    98de:	d004      	beq.n	98ea <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    98e0:	7dfb      	ldrb	r3, [r7, #23]
    98e2:	2101      	movs	r1, #1
    98e4:	4618      	mov	r0, r3
    98e6:	4b5a      	ldr	r3, [pc, #360]	; (9a50 <_usb_d_dev_in_next+0x1f4>)
    98e8:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    98ea:	687b      	ldr	r3, [r7, #4]
    98ec:	689a      	ldr	r2, [r3, #8]
    98ee:	89fb      	ldrh	r3, [r7, #14]
    98f0:	441a      	add	r2, r3
    98f2:	687b      	ldr	r3, [r7, #4]
    98f4:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    98f6:	687b      	ldr	r3, [r7, #4]
    98f8:	689a      	ldr	r2, [r3, #8]
    98fa:	687b      	ldr	r3, [r7, #4]
    98fc:	685b      	ldr	r3, [r3, #4]
    98fe:	429a      	cmp	r2, r3
    9900:	d243      	bcs.n	998a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9902:	687b      	ldr	r3, [r7, #4]
    9904:	685b      	ldr	r3, [r3, #4]
    9906:	b29a      	uxth	r2, r3
    9908:	687b      	ldr	r3, [r7, #4]
    990a:	689b      	ldr	r3, [r3, #8]
    990c:	b29b      	uxth	r3, r3
    990e:	1ad3      	subs	r3, r2, r3
    9910:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9912:	687b      	ldr	r3, [r7, #4]
    9914:	7cdb      	ldrb	r3, [r3, #19]
    9916:	f003 0320 	and.w	r3, r3, #32
    991a:	b2db      	uxtb	r3, r3
    991c:	2b00      	cmp	r3, #0
    991e:	d01b      	beq.n	9958 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	8a1b      	ldrh	r3, [r3, #16]
    9924:	8bfa      	ldrh	r2, [r7, #30]
    9926:	429a      	cmp	r2, r3
    9928:	d902      	bls.n	9930 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    992a:	687b      	ldr	r3, [r7, #4]
    992c:	8a1b      	ldrh	r3, [r3, #16]
    992e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	68d8      	ldr	r0, [r3, #12]
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	681a      	ldr	r2, [r3, #0]
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	689b      	ldr	r3, [r3, #8]
    993c:	4413      	add	r3, r2
    993e:	8bfa      	ldrh	r2, [r7, #30]
    9940:	4619      	mov	r1, r3
    9942:	4b44      	ldr	r3, [pc, #272]	; (9a54 <_usb_d_dev_in_next+0x1f8>)
    9944:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9946:	687b      	ldr	r3, [r7, #4]
    9948:	68db      	ldr	r3, [r3, #12]
    994a:	461a      	mov	r2, r3
    994c:	7dfb      	ldrb	r3, [r7, #23]
    994e:	2101      	movs	r1, #1
    9950:	4618      	mov	r0, r3
    9952:	4b41      	ldr	r3, [pc, #260]	; (9a58 <_usb_d_dev_in_next+0x1fc>)
    9954:	4798      	blx	r3
    9956:	e011      	b.n	997c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9958:	8bfb      	ldrh	r3, [r7, #30]
    995a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    995e:	d902      	bls.n	9966 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9964:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9966:	687b      	ldr	r3, [r7, #4]
    9968:	681a      	ldr	r2, [r3, #0]
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	689b      	ldr	r3, [r3, #8]
    996e:	4413      	add	r3, r2
    9970:	461a      	mov	r2, r3
    9972:	7dfb      	ldrb	r3, [r7, #23]
    9974:	2101      	movs	r1, #1
    9976:	4618      	mov	r0, r3
    9978:	4b37      	ldr	r3, [pc, #220]	; (9a58 <_usb_d_dev_in_next+0x1fc>)
    997a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    997c:	8bfa      	ldrh	r2, [r7, #30]
    997e:	7df8      	ldrb	r0, [r7, #23]
    9980:	2300      	movs	r3, #0
    9982:	2101      	movs	r1, #1
    9984:	4c35      	ldr	r4, [pc, #212]	; (9a5c <_usb_d_dev_in_next+0x200>)
    9986:	47a0      	blx	r4
		goto _in_tx_exec;
    9988:	e041      	b.n	9a0e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    998a:	687b      	ldr	r3, [r7, #4]
    998c:	7cdb      	ldrb	r3, [r3, #19]
    998e:	f003 0310 	and.w	r3, r3, #16
    9992:	b2db      	uxtb	r3, r3
    9994:	2b00      	cmp	r3, #0
    9996:	d00b      	beq.n	99b0 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9998:	687a      	ldr	r2, [r7, #4]
    999a:	7cd3      	ldrb	r3, [r2, #19]
    999c:	f36f 1304 	bfc	r3, #4, #1
    99a0:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    99a2:	7df8      	ldrb	r0, [r7, #23]
    99a4:	2300      	movs	r3, #0
    99a6:	2200      	movs	r2, #0
    99a8:	2101      	movs	r1, #1
    99aa:	4c2c      	ldr	r4, [pc, #176]	; (9a5c <_usb_d_dev_in_next+0x200>)
    99ac:	47a0      	blx	r4
		goto _in_tx_exec;
    99ae:	e02e      	b.n	9a0e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    99b0:	7afb      	ldrb	r3, [r7, #11]
    99b2:	2b00      	cmp	r3, #0
    99b4:	d006      	beq.n	99c4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    99b6:	7dfb      	ldrb	r3, [r7, #23]
    99b8:	224b      	movs	r2, #75	; 0x4b
    99ba:	4619      	mov	r1, r3
    99bc:	69b8      	ldr	r0, [r7, #24]
    99be:	4b28      	ldr	r3, [pc, #160]	; (9a60 <_usb_d_dev_in_next+0x204>)
    99c0:	4798      	blx	r3
    99c2:	e005      	b.n	99d0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    99c4:	7dfb      	ldrb	r3, [r7, #23]
    99c6:	224a      	movs	r2, #74	; 0x4a
    99c8:	4619      	mov	r1, r3
    99ca:	69b8      	ldr	r0, [r7, #24]
    99cc:	4b24      	ldr	r3, [pc, #144]	; (9a60 <_usb_d_dev_in_next+0x204>)
    99ce:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	8a1b      	ldrh	r3, [r3, #16]
    99d4:	89ba      	ldrh	r2, [r7, #12]
    99d6:	429a      	cmp	r2, r3
    99d8:	d114      	bne.n	9a04 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    99da:	687a      	ldr	r2, [r7, #4]
    99dc:	7cd3      	ldrb	r3, [r2, #19]
    99de:	f36f 1386 	bfc	r3, #6, #1
    99e2:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    99e4:	4b1f      	ldr	r3, [pc, #124]	; (9a64 <_usb_d_dev_in_next+0x208>)
    99e6:	68db      	ldr	r3, [r3, #12]
    99e8:	687a      	ldr	r2, [r7, #4]
    99ea:	7c90      	ldrb	r0, [r2, #18]
    99ec:	687a      	ldr	r2, [r7, #4]
    99ee:	6892      	ldr	r2, [r2, #8]
    99f0:	4611      	mov	r1, r2
    99f2:	4798      	blx	r3
    99f4:	4603      	mov	r3, r0
    99f6:	2b00      	cmp	r3, #0
    99f8:	d124      	bne.n	9a44 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    99fa:	687a      	ldr	r2, [r7, #4]
    99fc:	7cd3      	ldrb	r3, [r2, #19]
    99fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9a02:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9a04:	2100      	movs	r1, #0
    9a06:	6878      	ldr	r0, [r7, #4]
    9a08:	4b17      	ldr	r3, [pc, #92]	; (9a68 <_usb_d_dev_in_next+0x20c>)
    9a0a:	4798      	blx	r3
	return;
    9a0c:	e01b      	b.n	9a46 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9a0e:	78fb      	ldrb	r3, [r7, #3]
    9a10:	f083 0301 	eor.w	r3, r3, #1
    9a14:	b2db      	uxtb	r3, r3
    9a16:	2b00      	cmp	r3, #0
    9a18:	d00d      	beq.n	9a36 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9a1a:	7afb      	ldrb	r3, [r7, #11]
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	d002      	beq.n	9a26 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9a20:	234e      	movs	r3, #78	; 0x4e
    9a22:	777b      	strb	r3, [r7, #29]
    9a24:	e001      	b.n	9a2a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9a26:	234a      	movs	r3, #74	; 0x4a
    9a28:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9a2a:	7f7a      	ldrb	r2, [r7, #29]
    9a2c:	7dfb      	ldrb	r3, [r7, #23]
    9a2e:	4619      	mov	r1, r3
    9a30:	69b8      	ldr	r0, [r7, #24]
    9a32:	4b0e      	ldr	r3, [pc, #56]	; (9a6c <_usb_d_dev_in_next+0x210>)
    9a34:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9a36:	7dfb      	ldrb	r3, [r7, #23]
    9a38:	2201      	movs	r2, #1
    9a3a:	2101      	movs	r1, #1
    9a3c:	4618      	mov	r0, r3
    9a3e:	4b0c      	ldr	r3, [pc, #48]	; (9a70 <_usb_d_dev_in_next+0x214>)
    9a40:	4798      	blx	r3
    9a42:	e000      	b.n	9a46 <_usb_d_dev_in_next+0x1ea>
			return;
    9a44:	bf00      	nop
}
    9a46:	3724      	adds	r7, #36	; 0x24
    9a48:	46bd      	mov	sp, r7
    9a4a:	bd90      	pop	{r4, r7, pc}
    9a4c:	20000f68 	.word	0x20000f68
    9a50:	00009255 	.word	0x00009255
    9a54:	0000fe11 	.word	0x0000fe11
    9a58:	00009281 	.word	0x00009281
    9a5c:	000093c9 	.word	0x000093c9
    9a60:	00008b61 	.word	0x00008b61
    9a64:	20000ea0 	.word	0x20000ea0
    9a68:	0000ab85 	.word	0x0000ab85
    9a6c:	00008b35 	.word	0x00008b35
    9a70:	00009481 	.word	0x00009481

00009a74 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9a74:	b590      	push	{r4, r7, lr}
    9a76:	b08b      	sub	sp, #44	; 0x2c
    9a78:	af00      	add	r7, sp, #0
    9a7a:	6078      	str	r0, [r7, #4]
    9a7c:	460b      	mov	r3, r1
    9a7e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9a80:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a84:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	7c9b      	ldrb	r3, [r3, #18]
    9a8a:	f003 030f 	and.w	r3, r3, #15
    9a8e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9a90:	7ffb      	ldrb	r3, [r7, #31]
    9a92:	015b      	lsls	r3, r3, #5
    9a94:	4a94      	ldr	r2, [pc, #592]	; (9ce8 <_usb_d_dev_out_next+0x274>)
    9a96:	4413      	add	r3, r2
    9a98:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9a9a:	78fb      	ldrb	r3, [r7, #3]
    9a9c:	2b00      	cmp	r3, #0
    9a9e:	d005      	beq.n	9aac <_usb_d_dev_out_next+0x38>
    9aa0:	69bb      	ldr	r3, [r7, #24]
    9aa2:	685b      	ldr	r3, [r3, #4]
    9aa4:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9aa8:	b29b      	uxth	r3, r3
    9aaa:	e000      	b.n	9aae <_usb_d_dev_out_next+0x3a>
    9aac:	2300      	movs	r3, #0
    9aae:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9ab0:	78fb      	ldrb	r3, [r7, #3]
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d005      	beq.n	9ac2 <_usb_d_dev_out_next+0x4e>
    9ab6:	69bb      	ldr	r3, [r7, #24]
    9ab8:	685b      	ldr	r3, [r3, #4]
    9aba:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9abe:	b29b      	uxth	r3, r3
    9ac0:	e000      	b.n	9ac4 <_usb_d_dev_out_next+0x50>
    9ac2:	2300      	movs	r3, #0
    9ac4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	8a1b      	ldrh	r3, [r3, #16]
    9aca:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9ace:	4293      	cmp	r3, r2
    9ad0:	d004      	beq.n	9adc <_usb_d_dev_out_next+0x68>
    9ad2:	687b      	ldr	r3, [r7, #4]
    9ad4:	8a1b      	ldrh	r3, [r3, #16]
    9ad6:	3b01      	subs	r3, #1
    9ad8:	b29b      	uxth	r3, r3
    9ada:	e001      	b.n	9ae0 <_usb_d_dev_out_next+0x6c>
    9adc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9ae0:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9ae2:	8aba      	ldrh	r2, [r7, #20]
    9ae4:	8a7b      	ldrh	r3, [r7, #18]
    9ae6:	4013      	ands	r3, r2
    9ae8:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9aea:	687b      	ldr	r3, [r7, #4]
    9aec:	7cdb      	ldrb	r3, [r3, #19]
    9aee:	f003 0307 	and.w	r3, r3, #7
    9af2:	b2db      	uxtb	r3, r3
    9af4:	2b01      	cmp	r3, #1
    9af6:	bf0c      	ite	eq
    9af8:	2301      	moveq	r3, #1
    9afa:	2300      	movne	r3, #0
    9afc:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9afe:	78fb      	ldrb	r3, [r7, #3]
    9b00:	2b00      	cmp	r3, #0
    9b02:	d004      	beq.n	9b0e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9b04:	7ffb      	ldrb	r3, [r7, #31]
    9b06:	2100      	movs	r1, #0
    9b08:	4618      	mov	r0, r3
    9b0a:	4b78      	ldr	r3, [pc, #480]	; (9cec <_usb_d_dev_out_next+0x278>)
    9b0c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9b0e:	687b      	ldr	r3, [r7, #4]
    9b10:	7cdb      	ldrb	r3, [r3, #19]
    9b12:	f003 0320 	and.w	r3, r3, #32
    9b16:	b2db      	uxtb	r3, r3
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d01c      	beq.n	9b56 <_usb_d_dev_out_next+0xe2>
    9b1c:	687b      	ldr	r3, [r7, #4]
    9b1e:	685b      	ldr	r3, [r3, #4]
    9b20:	2b00      	cmp	r3, #0
    9b22:	d018      	beq.n	9b56 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9b24:	687b      	ldr	r3, [r7, #4]
    9b26:	685b      	ldr	r3, [r3, #4]
    9b28:	b29a      	uxth	r2, r3
    9b2a:	687b      	ldr	r3, [r7, #4]
    9b2c:	689b      	ldr	r3, [r3, #8]
    9b2e:	b29b      	uxth	r3, r3
    9b30:	1ad3      	subs	r3, r2, r3
    9b32:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9b34:	687b      	ldr	r3, [r7, #4]
    9b36:	681a      	ldr	r2, [r3, #0]
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	689b      	ldr	r3, [r3, #8]
    9b3c:	18d0      	adds	r0, r2, r3
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	68d9      	ldr	r1, [r3, #12]
    9b42:	89ba      	ldrh	r2, [r7, #12]
    9b44:	8a3b      	ldrh	r3, [r7, #16]
    9b46:	429a      	cmp	r2, r3
    9b48:	d901      	bls.n	9b4e <_usb_d_dev_out_next+0xda>
    9b4a:	8a3b      	ldrh	r3, [r7, #16]
    9b4c:	e000      	b.n	9b50 <_usb_d_dev_out_next+0xdc>
    9b4e:	89bb      	ldrh	r3, [r7, #12]
    9b50:	461a      	mov	r2, r3
    9b52:	4b67      	ldr	r3, [pc, #412]	; (9cf0 <_usb_d_dev_out_next+0x27c>)
    9b54:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	685b      	ldr	r3, [r3, #4]
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d121      	bne.n	9ba2 <_usb_d_dev_out_next+0x12e>
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	7cdb      	ldrb	r3, [r3, #19]
    9b62:	f003 0310 	and.w	r3, r3, #16
    9b66:	b2db      	uxtb	r3, r3
    9b68:	2b00      	cmp	r3, #0
    9b6a:	d01a      	beq.n	9ba2 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9b6c:	687a      	ldr	r2, [r7, #4]
    9b6e:	7cd3      	ldrb	r3, [r2, #19]
    9b70:	f36f 1304 	bfc	r3, #4, #1
    9b74:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9b76:	687a      	ldr	r2, [r7, #4]
    9b78:	7cd3      	ldrb	r3, [r2, #19]
    9b7a:	f043 0320 	orr.w	r3, r3, #32
    9b7e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9b80:	687b      	ldr	r3, [r7, #4]
    9b82:	68db      	ldr	r3, [r3, #12]
    9b84:	461a      	mov	r2, r3
    9b86:	7ffb      	ldrb	r3, [r7, #31]
    9b88:	2100      	movs	r1, #0
    9b8a:	4618      	mov	r0, r3
    9b8c:	4b59      	ldr	r3, [pc, #356]	; (9cf4 <_usb_d_dev_out_next+0x280>)
    9b8e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	8a1b      	ldrh	r3, [r3, #16]
    9b94:	461a      	mov	r2, r3
    9b96:	7ff8      	ldrb	r0, [r7, #31]
    9b98:	2300      	movs	r3, #0
    9b9a:	2100      	movs	r1, #0
    9b9c:	4c56      	ldr	r4, [pc, #344]	; (9cf8 <_usb_d_dev_out_next+0x284>)
    9b9e:	47a0      	blx	r4
		goto _out_rx_exec;
    9ba0:	e090      	b.n	9cc4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9ba2:	78fb      	ldrb	r3, [r7, #3]
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d010      	beq.n	9bca <_usb_d_dev_out_next+0x156>
    9ba8:	687b      	ldr	r3, [r7, #4]
    9baa:	8a1b      	ldrh	r3, [r3, #16]
    9bac:	8a3a      	ldrh	r2, [r7, #16]
    9bae:	429a      	cmp	r2, r3
    9bb0:	d20b      	bcs.n	9bca <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9bb2:	687a      	ldr	r2, [r7, #4]
    9bb4:	7cd3      	ldrb	r3, [r2, #19]
    9bb6:	f36f 1304 	bfc	r3, #4, #1
    9bba:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9bbc:	687b      	ldr	r3, [r7, #4]
    9bbe:	689a      	ldr	r2, [r3, #8]
    9bc0:	8abb      	ldrh	r3, [r7, #20]
    9bc2:	441a      	add	r2, r3
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	609a      	str	r2, [r3, #8]
    9bc8:	e05c      	b.n	9c84 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	689a      	ldr	r2, [r3, #8]
    9bce:	8afb      	ldrh	r3, [r7, #22]
    9bd0:	441a      	add	r2, r3
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9bd6:	687b      	ldr	r3, [r7, #4]
    9bd8:	689a      	ldr	r2, [r3, #8]
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	685b      	ldr	r3, [r3, #4]
    9bde:	429a      	cmp	r2, r3
    9be0:	d250      	bcs.n	9c84 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	685b      	ldr	r3, [r3, #4]
    9be6:	b29a      	uxth	r2, r3
    9be8:	687b      	ldr	r3, [r7, #4]
    9bea:	689b      	ldr	r3, [r3, #8]
    9bec:	b29b      	uxth	r3, r3
    9bee:	1ad3      	subs	r3, r2, r3
    9bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	7cdb      	ldrb	r3, [r3, #19]
    9bf6:	f003 0320 	and.w	r3, r3, #32
    9bfa:	b2db      	uxtb	r3, r3
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	d010      	beq.n	9c22 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9c00:	687b      	ldr	r3, [r7, #4]
    9c02:	8a1b      	ldrh	r3, [r3, #16]
    9c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9c06:	429a      	cmp	r2, r3
    9c08:	d902      	bls.n	9c10 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9c0a:	687b      	ldr	r3, [r7, #4]
    9c0c:	8a1b      	ldrh	r3, [r3, #16]
    9c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	68db      	ldr	r3, [r3, #12]
    9c14:	461a      	mov	r2, r3
    9c16:	7ffb      	ldrb	r3, [r7, #31]
    9c18:	2100      	movs	r1, #0
    9c1a:	4618      	mov	r0, r3
    9c1c:	4b35      	ldr	r3, [pc, #212]	; (9cf4 <_usb_d_dev_out_next+0x280>)
    9c1e:	4798      	blx	r3
    9c20:	e029      	b.n	9c76 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	8a1b      	ldrh	r3, [r3, #16]
    9c26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9c28:	429a      	cmp	r2, r3
    9c2a:	d90f      	bls.n	9c4c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9c32:	d903      	bls.n	9c3c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9c38:	84fb      	strh	r3, [r7, #38]	; 0x26
    9c3a:	e011      	b.n	9c60 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9c3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9c3e:	8a7b      	ldrh	r3, [r7, #18]
    9c40:	4013      	ands	r3, r2
    9c42:	b29b      	uxth	r3, r3
    9c44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9c46:	1ad3      	subs	r3, r2, r3
    9c48:	84fb      	strh	r3, [r7, #38]	; 0x26
    9c4a:	e009      	b.n	9c60 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9c4c:	687b      	ldr	r3, [r7, #4]
    9c4e:	8a1b      	ldrh	r3, [r3, #16]
    9c50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9c52:	429a      	cmp	r2, r3
    9c54:	d204      	bcs.n	9c60 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9c56:	687a      	ldr	r2, [r7, #4]
    9c58:	7cd3      	ldrb	r3, [r2, #19]
    9c5a:	f043 0320 	orr.w	r3, r3, #32
    9c5e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	681a      	ldr	r2, [r3, #0]
    9c64:	687b      	ldr	r3, [r7, #4]
    9c66:	689b      	ldr	r3, [r3, #8]
    9c68:	4413      	add	r3, r2
    9c6a:	461a      	mov	r2, r3
    9c6c:	7ffb      	ldrb	r3, [r7, #31]
    9c6e:	2100      	movs	r1, #0
    9c70:	4618      	mov	r0, r3
    9c72:	4b20      	ldr	r3, [pc, #128]	; (9cf4 <_usb_d_dev_out_next+0x280>)
    9c74:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9c76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9c78:	7ff8      	ldrb	r0, [r7, #31]
    9c7a:	2300      	movs	r3, #0
    9c7c:	2100      	movs	r1, #0
    9c7e:	4c1e      	ldr	r4, [pc, #120]	; (9cf8 <_usb_d_dev_out_next+0x284>)
    9c80:	47a0      	blx	r4
			goto _out_rx_exec;
    9c82:	e01f      	b.n	9cc4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9c84:	7bfb      	ldrb	r3, [r7, #15]
    9c86:	2b00      	cmp	r3, #0
    9c88:	d006      	beq.n	9c98 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9c8a:	7ffb      	ldrb	r3, [r7, #31]
    9c8c:	222d      	movs	r2, #45	; 0x2d
    9c8e:	4619      	mov	r1, r3
    9c90:	6a38      	ldr	r0, [r7, #32]
    9c92:	4b1a      	ldr	r3, [pc, #104]	; (9cfc <_usb_d_dev_out_next+0x288>)
    9c94:	4798      	blx	r3
    9c96:	e005      	b.n	9ca4 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9c98:	7ffb      	ldrb	r3, [r7, #31]
    9c9a:	2225      	movs	r2, #37	; 0x25
    9c9c:	4619      	mov	r1, r3
    9c9e:	6a38      	ldr	r0, [r7, #32]
    9ca0:	4b16      	ldr	r3, [pc, #88]	; (9cfc <_usb_d_dev_out_next+0x288>)
    9ca2:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9ca4:	7ffb      	ldrb	r3, [r7, #31]
    9ca6:	2b00      	cmp	r3, #0
    9ca8:	d107      	bne.n	9cba <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9caa:	687b      	ldr	r3, [r7, #4]
    9cac:	68db      	ldr	r3, [r3, #12]
    9cae:	461a      	mov	r2, r3
    9cb0:	7ffb      	ldrb	r3, [r7, #31]
    9cb2:	2100      	movs	r1, #0
    9cb4:	4618      	mov	r0, r3
    9cb6:	4b0f      	ldr	r3, [pc, #60]	; (9cf4 <_usb_d_dev_out_next+0x280>)
    9cb8:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9cba:	2100      	movs	r1, #0
    9cbc:	6878      	ldr	r0, [r7, #4]
    9cbe:	4b10      	ldr	r3, [pc, #64]	; (9d00 <_usb_d_dev_out_next+0x28c>)
    9cc0:	4798      	blx	r3
	return;
    9cc2:	e031      	b.n	9d28 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9cc4:	78fb      	ldrb	r3, [r7, #3]
    9cc6:	f083 0301 	eor.w	r3, r3, #1
    9cca:	b2db      	uxtb	r3, r3
    9ccc:	2b00      	cmp	r3, #0
    9cce:	d025      	beq.n	9d1c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9cd0:	7bfb      	ldrb	r3, [r7, #15]
    9cd2:	2b00      	cmp	r3, #0
    9cd4:	d018      	beq.n	9d08 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9cd6:	7ffb      	ldrb	r3, [r7, #31]
    9cd8:	2101      	movs	r1, #1
    9cda:	4618      	mov	r0, r3
    9cdc:	4b09      	ldr	r3, [pc, #36]	; (9d04 <_usb_d_dev_out_next+0x290>)
    9cde:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9ce0:	232d      	movs	r3, #45	; 0x2d
    9ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9ce6:	e012      	b.n	9d0e <_usb_d_dev_out_next+0x29a>
    9ce8:	20000f68 	.word	0x20000f68
    9cec:	00009255 	.word	0x00009255
    9cf0:	0000fe11 	.word	0x0000fe11
    9cf4:	00009281 	.word	0x00009281
    9cf8:	00009409 	.word	0x00009409
    9cfc:	00008b61 	.word	0x00008b61
    9d00:	0000ab85 	.word	0x0000ab85
    9d04:	00009449 	.word	0x00009449
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9d08:	2325      	movs	r3, #37	; 0x25
    9d0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9d0e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9d12:	7ffb      	ldrb	r3, [r7, #31]
    9d14:	4619      	mov	r1, r3
    9d16:	6a38      	ldr	r0, [r7, #32]
    9d18:	4b05      	ldr	r3, [pc, #20]	; (9d30 <_usb_d_dev_out_next+0x2bc>)
    9d1a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9d1c:	7ffb      	ldrb	r3, [r7, #31]
    9d1e:	2201      	movs	r2, #1
    9d20:	2100      	movs	r1, #0
    9d22:	4618      	mov	r0, r3
    9d24:	4b03      	ldr	r3, [pc, #12]	; (9d34 <_usb_d_dev_out_next+0x2c0>)
    9d26:	4798      	blx	r3
}
    9d28:	372c      	adds	r7, #44	; 0x2c
    9d2a:	46bd      	mov	sp, r7
    9d2c:	bd90      	pop	{r4, r7, pc}
    9d2e:	bf00      	nop
    9d30:	00008b35 	.word	0x00008b35
    9d34:	000094d9 	.word	0x000094d9

00009d38 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	b084      	sub	sp, #16
    9d3c:	af00      	add	r7, sp, #0
    9d3e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9d40:	687b      	ldr	r3, [r7, #4]
    9d42:	7c9b      	ldrb	r3, [r3, #18]
    9d44:	f003 030f 	and.w	r3, r3, #15
    9d48:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	7cdb      	ldrb	r3, [r3, #19]
    9d4e:	f003 0307 	and.w	r3, r3, #7
    9d52:	b2db      	uxtb	r3, r3
    9d54:	2b01      	cmp	r3, #1
    9d56:	bf0c      	ite	eq
    9d58:	2301      	moveq	r3, #1
    9d5a:	2300      	movne	r3, #0
    9d5c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9d5e:	7bbb      	ldrb	r3, [r7, #14]
    9d60:	f083 0301 	eor.w	r3, r3, #1
    9d64:	b2db      	uxtb	r3, r3
    9d66:	2b00      	cmp	r3, #0
    9d68:	d008      	beq.n	9d7c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9d6a:	7bfb      	ldrb	r3, [r7, #15]
    9d6c:	4618      	mov	r0, r3
    9d6e:	4b20      	ldr	r3, [pc, #128]	; (9df0 <_usb_d_dev_handle_setup+0xb8>)
    9d70:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9d72:	7bfb      	ldrb	r3, [r7, #15]
    9d74:	4618      	mov	r0, r3
    9d76:	4b1f      	ldr	r3, [pc, #124]	; (9df4 <_usb_d_dev_handle_setup+0xbc>)
    9d78:	4798      	blx	r3
		return;
    9d7a:	e036      	b.n	9dea <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9d7c:	687b      	ldr	r3, [r7, #4]
    9d7e:	7cdb      	ldrb	r3, [r3, #19]
    9d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d84:	b2db      	uxtb	r3, r3
    9d86:	2b00      	cmp	r3, #0
    9d88:	d010      	beq.n	9dac <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9d8a:	687a      	ldr	r2, [r7, #4]
    9d8c:	7cd3      	ldrb	r3, [r2, #19]
    9d8e:	f36f 1386 	bfc	r3, #6, #1
    9d92:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9d94:	7bfb      	ldrb	r3, [r7, #15]
    9d96:	2200      	movs	r2, #0
    9d98:	2101      	movs	r1, #1
    9d9a:	4618      	mov	r0, r3
    9d9c:	4b16      	ldr	r3, [pc, #88]	; (9df8 <_usb_d_dev_handle_setup+0xc0>)
    9d9e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9da0:	7bfb      	ldrb	r3, [r7, #15]
    9da2:	2200      	movs	r2, #0
    9da4:	2100      	movs	r1, #0
    9da6:	4618      	mov	r0, r3
    9da8:	4b14      	ldr	r3, [pc, #80]	; (9dfc <_usb_d_dev_handle_setup+0xc4>)
    9daa:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9dac:	687a      	ldr	r2, [r7, #4]
    9dae:	7cd3      	ldrb	r3, [r2, #19]
    9db0:	f36f 03c3 	bfc	r3, #3, #1
    9db4:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9db6:	7bfb      	ldrb	r3, [r7, #15]
    9db8:	2100      	movs	r1, #0
    9dba:	4618      	mov	r0, r3
    9dbc:	4b10      	ldr	r3, [pc, #64]	; (9e00 <_usb_d_dev_handle_setup+0xc8>)
    9dbe:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9dc0:	7bfb      	ldrb	r3, [r7, #15]
    9dc2:	2101      	movs	r1, #1
    9dc4:	4618      	mov	r0, r3
    9dc6:	4b0e      	ldr	r3, [pc, #56]	; (9e00 <_usb_d_dev_handle_setup+0xc8>)
    9dc8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9dca:	7bfb      	ldrb	r3, [r7, #15]
    9dcc:	216f      	movs	r1, #111	; 0x6f
    9dce:	4618      	mov	r0, r3
    9dd0:	4b0c      	ldr	r3, [pc, #48]	; (9e04 <_usb_d_dev_handle_setup+0xcc>)
    9dd2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9dd4:	7bfb      	ldrb	r3, [r7, #15]
    9dd6:	216f      	movs	r1, #111	; 0x6f
    9dd8:	4618      	mov	r0, r3
    9dda:	4b0b      	ldr	r3, [pc, #44]	; (9e08 <_usb_d_dev_handle_setup+0xd0>)
    9ddc:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9dde:	4b0b      	ldr	r3, [pc, #44]	; (9e0c <_usb_d_dev_handle_setup+0xd4>)
    9de0:	689b      	ldr	r3, [r3, #8]
    9de2:	687a      	ldr	r2, [r7, #4]
    9de4:	7c92      	ldrb	r2, [r2, #18]
    9de6:	4610      	mov	r0, r2
    9de8:	4798      	blx	r3
}
    9dea:	3710      	adds	r7, #16
    9dec:	46bd      	mov	sp, r7
    9dee:	bd80      	pop	{r7, pc}
    9df0:	000091dd 	.word	0x000091dd
    9df4:	00009189 	.word	0x00009189
    9df8:	00009481 	.word	0x00009481
    9dfc:	000094d9 	.word	0x000094d9
    9e00:	00009449 	.word	0x00009449
    9e04:	00008f89 	.word	0x00008f89
    9e08:	00008fd9 	.word	0x00008fd9
    9e0c:	20000ea0 	.word	0x20000ea0

00009e10 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9e10:	b580      	push	{r7, lr}
    9e12:	b084      	sub	sp, #16
    9e14:	af00      	add	r7, sp, #0
    9e16:	6078      	str	r0, [r7, #4]
    9e18:	460b      	mov	r3, r1
    9e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9e1c:	687b      	ldr	r3, [r7, #4]
    9e1e:	7c9b      	ldrb	r3, [r3, #18]
    9e20:	f003 030f 	and.w	r3, r3, #15
    9e24:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9e26:	78f9      	ldrb	r1, [r7, #3]
    9e28:	7bfb      	ldrb	r3, [r7, #15]
    9e2a:	2200      	movs	r2, #0
    9e2c:	4618      	mov	r0, r3
    9e2e:	4b07      	ldr	r3, [pc, #28]	; (9e4c <_usb_d_dev_handle_stall+0x3c>)
    9e30:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9e32:	4b07      	ldr	r3, [pc, #28]	; (9e50 <_usb_d_dev_handle_stall+0x40>)
    9e34:	691b      	ldr	r3, [r3, #16]
    9e36:	687a      	ldr	r2, [r7, #4]
    9e38:	7c90      	ldrb	r0, [r2, #18]
    9e3a:	687a      	ldr	r2, [r7, #4]
    9e3c:	6892      	ldr	r2, [r2, #8]
    9e3e:	2101      	movs	r1, #1
    9e40:	4798      	blx	r3
}
    9e42:	bf00      	nop
    9e44:	3710      	adds	r7, #16
    9e46:	46bd      	mov	sp, r7
    9e48:	bd80      	pop	{r7, pc}
    9e4a:	bf00      	nop
    9e4c:	0000913d 	.word	0x0000913d
    9e50:	20000ea0 	.word	0x20000ea0

00009e54 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9e54:	b580      	push	{r7, lr}
    9e56:	b088      	sub	sp, #32
    9e58:	af00      	add	r7, sp, #0
    9e5a:	6078      	str	r0, [r7, #4]
    9e5c:	460b      	mov	r3, r1
    9e5e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9e60:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e64:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	7c9b      	ldrb	r3, [r3, #18]
    9e6a:	f003 030f 	and.w	r3, r3, #15
    9e6e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9e70:	4b61      	ldr	r3, [pc, #388]	; (9ff8 <_usb_d_dev_handle_trfail+0x1a4>)
    9e72:	881b      	ldrh	r3, [r3, #0]
    9e74:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9e76:	7efb      	ldrb	r3, [r7, #27]
    9e78:	015b      	lsls	r3, r3, #5
    9e7a:	4a60      	ldr	r2, [pc, #384]	; (9ffc <_usb_d_dev_handle_trfail+0x1a8>)
    9e7c:	4413      	add	r3, r2
    9e7e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9e80:	78fb      	ldrb	r3, [r7, #3]
    9e82:	2b00      	cmp	r3, #0
    9e84:	d006      	beq.n	9e94 <_usb_d_dev_handle_trfail+0x40>
    9e86:	7efb      	ldrb	r3, [r7, #27]
    9e88:	4619      	mov	r1, r3
    9e8a:	69f8      	ldr	r0, [r7, #28]
    9e8c:	4b5c      	ldr	r3, [pc, #368]	; (a000 <_usb_d_dev_handle_trfail+0x1ac>)
    9e8e:	4798      	blx	r3
    9e90:	4603      	mov	r3, r0
    9e92:	e005      	b.n	9ea0 <_usb_d_dev_handle_trfail+0x4c>
    9e94:	7efb      	ldrb	r3, [r7, #27]
    9e96:	4619      	mov	r1, r3
    9e98:	69f8      	ldr	r0, [r7, #28]
    9e9a:	4b5a      	ldr	r3, [pc, #360]	; (a004 <_usb_d_dev_handle_trfail+0x1b0>)
    9e9c:	4798      	blx	r3
    9e9e:	4603      	mov	r3, r0
    9ea0:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9ea2:	687b      	ldr	r3, [r7, #4]
    9ea4:	7cdb      	ldrb	r3, [r3, #19]
    9ea6:	f003 0307 	and.w	r3, r3, #7
    9eaa:	b2db      	uxtb	r3, r3
    9eac:	2b01      	cmp	r3, #1
    9eae:	bf0c      	ite	eq
    9eb0:	2301      	moveq	r3, #1
    9eb2:	2300      	movne	r3, #0
    9eb4:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9eb6:	78fb      	ldrb	r3, [r7, #3]
    9eb8:	011b      	lsls	r3, r3, #4
    9eba:	697a      	ldr	r2, [r7, #20]
    9ebc:	4413      	add	r3, r2
    9ebe:	7a9b      	ldrb	r3, [r3, #10]
    9ec0:	b2db      	uxtb	r3, r3
    9ec2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9ec4:	7cfb      	ldrb	r3, [r7, #19]
    9ec6:	2b02      	cmp	r3, #2
    9ec8:	d12f      	bne.n	9f2a <_usb_d_dev_handle_trfail+0xd6>
    9eca:	7b3b      	ldrb	r3, [r7, #12]
    9ecc:	f003 0301 	and.w	r3, r3, #1
    9ed0:	b2db      	uxtb	r3, r3
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d029      	beq.n	9f2a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9ed6:	78fb      	ldrb	r3, [r7, #3]
    9ed8:	011b      	lsls	r3, r3, #4
    9eda:	697a      	ldr	r2, [r7, #20]
    9edc:	441a      	add	r2, r3
    9ede:	7a93      	ldrb	r3, [r2, #10]
    9ee0:	f36f 0300 	bfc	r3, #0, #1
    9ee4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ee6:	78fb      	ldrb	r3, [r7, #3]
    9ee8:	f107 0220 	add.w	r2, r7, #32
    9eec:	4413      	add	r3, r2
    9eee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9ef2:	7efb      	ldrb	r3, [r7, #27]
    9ef4:	4619      	mov	r1, r3
    9ef6:	69f8      	ldr	r0, [r7, #28]
    9ef8:	4b43      	ldr	r3, [pc, #268]	; (a008 <_usb_d_dev_handle_trfail+0x1b4>)
    9efa:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9efc:	78fb      	ldrb	r3, [r7, #3]
    9efe:	f107 0220 	add.w	r2, r7, #32
    9f02:	4413      	add	r3, r2
    9f04:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9f08:	7efb      	ldrb	r3, [r7, #27]
    9f0a:	4619      	mov	r1, r3
    9f0c:	69f8      	ldr	r0, [r7, #28]
    9f0e:	4b3f      	ldr	r3, [pc, #252]	; (a00c <_usb_d_dev_handle_trfail+0x1b8>)
    9f10:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9f12:	78fb      	ldrb	r3, [r7, #3]
    9f14:	2b00      	cmp	r3, #0
    9f16:	bf14      	ite	ne
    9f18:	2301      	movne	r3, #1
    9f1a:	2300      	moveq	r3, #0
    9f1c:	b2db      	uxtb	r3, r3
    9f1e:	2204      	movs	r2, #4
    9f20:	4619      	mov	r1, r3
    9f22:	6878      	ldr	r0, [r7, #4]
    9f24:	4b3a      	ldr	r3, [pc, #232]	; (a010 <_usb_d_dev_handle_trfail+0x1bc>)
    9f26:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9f28:	e062      	b.n	9ff0 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9f2a:	7b3b      	ldrb	r3, [r7, #12]
    9f2c:	f003 0302 	and.w	r3, r3, #2
    9f30:	b2db      	uxtb	r3, r3
    9f32:	2b00      	cmp	r3, #0
    9f34:	d040      	beq.n	9fb8 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9f36:	78fb      	ldrb	r3, [r7, #3]
    9f38:	011b      	lsls	r3, r3, #4
    9f3a:	697a      	ldr	r2, [r7, #20]
    9f3c:	441a      	add	r2, r3
    9f3e:	7a93      	ldrb	r3, [r2, #10]
    9f40:	f36f 0341 	bfc	r3, #1, #1
    9f44:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9f46:	78fb      	ldrb	r3, [r7, #3]
    9f48:	f107 0220 	add.w	r2, r7, #32
    9f4c:	4413      	add	r3, r2
    9f4e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9f52:	7efb      	ldrb	r3, [r7, #27]
    9f54:	4619      	mov	r1, r3
    9f56:	69f8      	ldr	r0, [r7, #28]
    9f58:	4b2b      	ldr	r3, [pc, #172]	; (a008 <_usb_d_dev_handle_trfail+0x1b4>)
    9f5a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9f5c:	78fb      	ldrb	r3, [r7, #3]
    9f5e:	f107 0220 	add.w	r2, r7, #32
    9f62:	4413      	add	r3, r2
    9f64:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9f68:	7efb      	ldrb	r3, [r7, #27]
    9f6a:	4619      	mov	r1, r3
    9f6c:	69f8      	ldr	r0, [r7, #28]
    9f6e:	4b27      	ldr	r3, [pc, #156]	; (a00c <_usb_d_dev_handle_trfail+0x1b8>)
    9f70:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9f72:	7cbb      	ldrb	r3, [r7, #18]
    9f74:	2b00      	cmp	r3, #0
    9f76:	d03b      	beq.n	9ff0 <_usb_d_dev_handle_trfail+0x19c>
    9f78:	687b      	ldr	r3, [r7, #4]
    9f7a:	7cdb      	ldrb	r3, [r3, #19]
    9f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9f80:	b2db      	uxtb	r3, r3
    9f82:	2b00      	cmp	r3, #0
    9f84:	d034      	beq.n	9ff0 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	7cdb      	ldrb	r3, [r3, #19]
    9f8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9f8e:	b2db      	uxtb	r3, r3
    9f90:	461a      	mov	r2, r3
    9f92:	78fb      	ldrb	r3, [r7, #3]
    9f94:	4293      	cmp	r3, r2
    9f96:	d02b      	beq.n	9ff0 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	7cdb      	ldrb	r3, [r3, #19]
    9f9c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9fa0:	b2db      	uxtb	r3, r3
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	bf14      	ite	ne
    9fa6:	2301      	movne	r3, #1
    9fa8:	2300      	moveq	r3, #0
    9faa:	b2db      	uxtb	r3, r3
    9fac:	2200      	movs	r2, #0
    9fae:	4619      	mov	r1, r3
    9fb0:	6878      	ldr	r0, [r7, #4]
    9fb2:	4b17      	ldr	r3, [pc, #92]	; (a010 <_usb_d_dev_handle_trfail+0x1bc>)
    9fb4:	4798      	blx	r3
}
    9fb6:	e01b      	b.n	9ff0 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9fb8:	78fa      	ldrb	r2, [r7, #3]
    9fba:	7efb      	ldrb	r3, [r7, #27]
    9fbc:	4611      	mov	r1, r2
    9fbe:	4618      	mov	r0, r3
    9fc0:	4b14      	ldr	r3, [pc, #80]	; (a014 <_usb_d_dev_handle_trfail+0x1c0>)
    9fc2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9fc4:	78fb      	ldrb	r3, [r7, #3]
    9fc6:	f107 0220 	add.w	r2, r7, #32
    9fca:	4413      	add	r3, r2
    9fcc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9fd0:	7efb      	ldrb	r3, [r7, #27]
    9fd2:	4619      	mov	r1, r3
    9fd4:	69f8      	ldr	r0, [r7, #28]
    9fd6:	4b0c      	ldr	r3, [pc, #48]	; (a008 <_usb_d_dev_handle_trfail+0x1b4>)
    9fd8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9fda:	78fb      	ldrb	r3, [r7, #3]
    9fdc:	f107 0220 	add.w	r2, r7, #32
    9fe0:	4413      	add	r3, r2
    9fe2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9fe6:	7efb      	ldrb	r3, [r7, #27]
    9fe8:	4619      	mov	r1, r3
    9fea:	69f8      	ldr	r0, [r7, #28]
    9fec:	4b07      	ldr	r3, [pc, #28]	; (a00c <_usb_d_dev_handle_trfail+0x1b8>)
    9fee:	4798      	blx	r3
}
    9ff0:	bf00      	nop
    9ff2:	3720      	adds	r7, #32
    9ff4:	46bd      	mov	sp, r7
    9ff6:	bd80      	pop	{r7, pc}
    9ff8:	000110c0 	.word	0x000110c0
    9ffc:	20000f68 	.word	0x20000f68
    a000:	00008bbd 	.word	0x00008bbd
    a004:	00008b8d 	.word	0x00008b8d
    a008:	00008a61 	.word	0x00008a61
    a00c:	00008b61 	.word	0x00008b61
    a010:	0000abcd 	.word	0x0000abcd
    a014:	00009449 	.word	0x00009449

0000a018 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a018:	b580      	push	{r7, lr}
    a01a:	b082      	sub	sp, #8
    a01c:	af00      	add	r7, sp, #0
    a01e:	6078      	str	r0, [r7, #4]
    a020:	460b      	mov	r3, r1
    a022:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a024:	78fb      	ldrb	r3, [r7, #3]
    a026:	f003 0310 	and.w	r3, r3, #16
    a02a:	2b00      	cmp	r3, #0
    a02c:	d003      	beq.n	a036 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a02e:	6878      	ldr	r0, [r7, #4]
    a030:	4b0c      	ldr	r3, [pc, #48]	; (a064 <_usb_d_dev_trans_setup_isr+0x4c>)
    a032:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a034:	e012      	b.n	a05c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a036:	78fb      	ldrb	r3, [r7, #3]
    a038:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a03c:	2b00      	cmp	r3, #0
    a03e:	d004      	beq.n	a04a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a040:	2101      	movs	r1, #1
    a042:	6878      	ldr	r0, [r7, #4]
    a044:	4b08      	ldr	r3, [pc, #32]	; (a068 <_usb_d_dev_trans_setup_isr+0x50>)
    a046:	4798      	blx	r3
}
    a048:	e008      	b.n	a05c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a04a:	78fb      	ldrb	r3, [r7, #3]
    a04c:	f003 0320 	and.w	r3, r3, #32
    a050:	2b00      	cmp	r3, #0
    a052:	d003      	beq.n	a05c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a054:	2100      	movs	r1, #0
    a056:	6878      	ldr	r0, [r7, #4]
    a058:	4b03      	ldr	r3, [pc, #12]	; (a068 <_usb_d_dev_trans_setup_isr+0x50>)
    a05a:	4798      	blx	r3
}
    a05c:	bf00      	nop
    a05e:	3708      	adds	r7, #8
    a060:	46bd      	mov	sp, r7
    a062:	bd80      	pop	{r7, pc}
    a064:	00009d39 	.word	0x00009d39
    a068:	00009e11 	.word	0x00009e11

0000a06c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a06c:	b580      	push	{r7, lr}
    a06e:	b082      	sub	sp, #8
    a070:	af00      	add	r7, sp, #0
    a072:	6078      	str	r0, [r7, #4]
    a074:	460b      	mov	r3, r1
    a076:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a078:	78fb      	ldrb	r3, [r7, #3]
    a07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a07e:	2b00      	cmp	r3, #0
    a080:	d004      	beq.n	a08c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a082:	2101      	movs	r1, #1
    a084:	6878      	ldr	r0, [r7, #4]
    a086:	4b1a      	ldr	r3, [pc, #104]	; (a0f0 <_usb_d_dev_trans_in_isr+0x84>)
    a088:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a08a:	e02c      	b.n	a0e6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a08c:	78fb      	ldrb	r3, [r7, #3]
    a08e:	f003 0308 	and.w	r3, r3, #8
    a092:	2b00      	cmp	r3, #0
    a094:	d004      	beq.n	a0a0 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a096:	2101      	movs	r1, #1
    a098:	6878      	ldr	r0, [r7, #4]
    a09a:	4b16      	ldr	r3, [pc, #88]	; (a0f4 <_usb_d_dev_trans_in_isr+0x88>)
    a09c:	4798      	blx	r3
}
    a09e:	e022      	b.n	a0e6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a0a0:	78fb      	ldrb	r3, [r7, #3]
    a0a2:	f003 0302 	and.w	r3, r3, #2
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d004      	beq.n	a0b4 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a0aa:	2101      	movs	r1, #1
    a0ac:	6878      	ldr	r0, [r7, #4]
    a0ae:	4b12      	ldr	r3, [pc, #72]	; (a0f8 <_usb_d_dev_trans_in_isr+0x8c>)
    a0b0:	4798      	blx	r3
}
    a0b2:	e018      	b.n	a0e6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a0b4:	687b      	ldr	r3, [r7, #4]
    a0b6:	7cdb      	ldrb	r3, [r3, #19]
    a0b8:	f003 0307 	and.w	r3, r3, #7
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	2b01      	cmp	r3, #1
    a0c0:	d111      	bne.n	a0e6 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a0c2:	78fb      	ldrb	r3, [r7, #3]
    a0c4:	f003 0304 	and.w	r3, r3, #4
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d004      	beq.n	a0d6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a0cc:	2100      	movs	r1, #0
    a0ce:	6878      	ldr	r0, [r7, #4]
    a0d0:	4b08      	ldr	r3, [pc, #32]	; (a0f4 <_usb_d_dev_trans_in_isr+0x88>)
    a0d2:	4798      	blx	r3
}
    a0d4:	e007      	b.n	a0e6 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a0d6:	78fb      	ldrb	r3, [r7, #3]
    a0d8:	f003 0310 	and.w	r3, r3, #16
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d002      	beq.n	a0e6 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a0e0:	6878      	ldr	r0, [r7, #4]
    a0e2:	4b06      	ldr	r3, [pc, #24]	; (a0fc <_usb_d_dev_trans_in_isr+0x90>)
    a0e4:	4798      	blx	r3
}
    a0e6:	bf00      	nop
    a0e8:	3708      	adds	r7, #8
    a0ea:	46bd      	mov	sp, r7
    a0ec:	bd80      	pop	{r7, pc}
    a0ee:	bf00      	nop
    a0f0:	00009e11 	.word	0x00009e11
    a0f4:	00009e55 	.word	0x00009e55
    a0f8:	0000985d 	.word	0x0000985d
    a0fc:	00009d39 	.word	0x00009d39

0000a100 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a100:	b580      	push	{r7, lr}
    a102:	b082      	sub	sp, #8
    a104:	af00      	add	r7, sp, #0
    a106:	6078      	str	r0, [r7, #4]
    a108:	460b      	mov	r3, r1
    a10a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a10c:	78fb      	ldrb	r3, [r7, #3]
    a10e:	f003 0320 	and.w	r3, r3, #32
    a112:	2b00      	cmp	r3, #0
    a114:	d004      	beq.n	a120 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a116:	2100      	movs	r1, #0
    a118:	6878      	ldr	r0, [r7, #4]
    a11a:	4b1a      	ldr	r3, [pc, #104]	; (a184 <_usb_d_dev_trans_out_isr+0x84>)
    a11c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a11e:	e02c      	b.n	a17a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a120:	78fb      	ldrb	r3, [r7, #3]
    a122:	f003 0304 	and.w	r3, r3, #4
    a126:	2b00      	cmp	r3, #0
    a128:	d004      	beq.n	a134 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a12a:	2100      	movs	r1, #0
    a12c:	6878      	ldr	r0, [r7, #4]
    a12e:	4b16      	ldr	r3, [pc, #88]	; (a188 <_usb_d_dev_trans_out_isr+0x88>)
    a130:	4798      	blx	r3
}
    a132:	e022      	b.n	a17a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a134:	78fb      	ldrb	r3, [r7, #3]
    a136:	f003 0301 	and.w	r3, r3, #1
    a13a:	2b00      	cmp	r3, #0
    a13c:	d004      	beq.n	a148 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a13e:	2101      	movs	r1, #1
    a140:	6878      	ldr	r0, [r7, #4]
    a142:	4b12      	ldr	r3, [pc, #72]	; (a18c <_usb_d_dev_trans_out_isr+0x8c>)
    a144:	4798      	blx	r3
}
    a146:	e018      	b.n	a17a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a148:	687b      	ldr	r3, [r7, #4]
    a14a:	7cdb      	ldrb	r3, [r3, #19]
    a14c:	f003 0307 	and.w	r3, r3, #7
    a150:	b2db      	uxtb	r3, r3
    a152:	2b01      	cmp	r3, #1
    a154:	d111      	bne.n	a17a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a156:	78fb      	ldrb	r3, [r7, #3]
    a158:	f003 0308 	and.w	r3, r3, #8
    a15c:	2b00      	cmp	r3, #0
    a15e:	d004      	beq.n	a16a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a160:	2101      	movs	r1, #1
    a162:	6878      	ldr	r0, [r7, #4]
    a164:	4b08      	ldr	r3, [pc, #32]	; (a188 <_usb_d_dev_trans_out_isr+0x88>)
    a166:	4798      	blx	r3
}
    a168:	e007      	b.n	a17a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a16a:	78fb      	ldrb	r3, [r7, #3]
    a16c:	f003 0310 	and.w	r3, r3, #16
    a170:	2b00      	cmp	r3, #0
    a172:	d002      	beq.n	a17a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a174:	6878      	ldr	r0, [r7, #4]
    a176:	4b06      	ldr	r3, [pc, #24]	; (a190 <_usb_d_dev_trans_out_isr+0x90>)
    a178:	4798      	blx	r3
}
    a17a:	bf00      	nop
    a17c:	3708      	adds	r7, #8
    a17e:	46bd      	mov	sp, r7
    a180:	bd80      	pop	{r7, pc}
    a182:	bf00      	nop
    a184:	00009e11 	.word	0x00009e11
    a188:	00009e55 	.word	0x00009e55
    a18c:	00009a75 	.word	0x00009a75
    a190:	00009d39 	.word	0x00009d39

0000a194 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a194:	b580      	push	{r7, lr}
    a196:	b084      	sub	sp, #16
    a198:	af00      	add	r7, sp, #0
    a19a:	6078      	str	r0, [r7, #4]
    a19c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a19e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a1a2:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a1a4:	683b      	ldr	r3, [r7, #0]
    a1a6:	7c9b      	ldrb	r3, [r3, #18]
    a1a8:	f003 030f 	and.w	r3, r3, #15
    a1ac:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a1ae:	7afb      	ldrb	r3, [r7, #11]
    a1b0:	2201      	movs	r2, #1
    a1b2:	409a      	lsls	r2, r3
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	4013      	ands	r3, r2
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d03d      	beq.n	a238 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a1bc:	7afb      	ldrb	r3, [r7, #11]
    a1be:	68fa      	ldr	r2, [r7, #12]
    a1c0:	3308      	adds	r3, #8
    a1c2:	015b      	lsls	r3, r3, #5
    a1c4:	4413      	add	r3, r2
    a1c6:	3307      	adds	r3, #7
    a1c8:	781b      	ldrb	r3, [r3, #0]
    a1ca:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a1cc:	7afb      	ldrb	r3, [r7, #11]
    a1ce:	68fa      	ldr	r2, [r7, #12]
    a1d0:	015b      	lsls	r3, r3, #5
    a1d2:	4413      	add	r3, r2
    a1d4:	f203 1309 	addw	r3, r3, #265	; 0x109
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a1dc:	7aba      	ldrb	r2, [r7, #10]
    a1de:	7a7b      	ldrb	r3, [r7, #9]
    a1e0:	4013      	ands	r3, r2
    a1e2:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a1e4:	7abb      	ldrb	r3, [r7, #10]
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d027      	beq.n	a23a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a1ea:	683b      	ldr	r3, [r7, #0]
    a1ec:	7cdb      	ldrb	r3, [r3, #19]
    a1ee:	f003 0307 	and.w	r3, r3, #7
    a1f2:	b2db      	uxtb	r3, r3
    a1f4:	2b01      	cmp	r3, #1
    a1f6:	d10c      	bne.n	a212 <_usb_d_dev_handle_eps+0x7e>
    a1f8:	683b      	ldr	r3, [r7, #0]
    a1fa:	7cdb      	ldrb	r3, [r3, #19]
    a1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a200:	b2db      	uxtb	r3, r3
    a202:	2b00      	cmp	r3, #0
    a204:	d105      	bne.n	a212 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a206:	7abb      	ldrb	r3, [r7, #10]
    a208:	4619      	mov	r1, r3
    a20a:	6838      	ldr	r0, [r7, #0]
    a20c:	4b0c      	ldr	r3, [pc, #48]	; (a240 <_usb_d_dev_handle_eps+0xac>)
    a20e:	4798      	blx	r3
    a210:	e013      	b.n	a23a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a212:	683b      	ldr	r3, [r7, #0]
    a214:	7cdb      	ldrb	r3, [r3, #19]
    a216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a21a:	b2db      	uxtb	r3, r3
    a21c:	2b00      	cmp	r3, #0
    a21e:	d005      	beq.n	a22c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a220:	7abb      	ldrb	r3, [r7, #10]
    a222:	4619      	mov	r1, r3
    a224:	6838      	ldr	r0, [r7, #0]
    a226:	4b07      	ldr	r3, [pc, #28]	; (a244 <_usb_d_dev_handle_eps+0xb0>)
    a228:	4798      	blx	r3
    a22a:	e006      	b.n	a23a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a22c:	7abb      	ldrb	r3, [r7, #10]
    a22e:	4619      	mov	r1, r3
    a230:	6838      	ldr	r0, [r7, #0]
    a232:	4b05      	ldr	r3, [pc, #20]	; (a248 <_usb_d_dev_handle_eps+0xb4>)
    a234:	4798      	blx	r3
    a236:	e000      	b.n	a23a <_usb_d_dev_handle_eps+0xa6>
		return;
    a238:	bf00      	nop
		}
	}
}
    a23a:	3710      	adds	r7, #16
    a23c:	46bd      	mov	sp, r7
    a23e:	bd80      	pop	{r7, pc}
    a240:	0000a019 	.word	0x0000a019
    a244:	0000a06d 	.word	0x0000a06d
    a248:	0000a101 	.word	0x0000a101

0000a24c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a24c:	b580      	push	{r7, lr}
    a24e:	b084      	sub	sp, #16
    a250:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a252:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a256:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a258:	68bb      	ldr	r3, [r7, #8]
    a25a:	8c1b      	ldrh	r3, [r3, #32]
    a25c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a25e:	88fb      	ldrh	r3, [r7, #6]
    a260:	2b00      	cmp	r3, #0
    a262:	d104      	bne.n	a26e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a264:	4b13      	ldr	r3, [pc, #76]	; (a2b4 <_usb_d_dev_handler+0x68>)
    a266:	4798      	blx	r3
    a268:	4603      	mov	r3, r0
    a26a:	2b00      	cmp	r3, #0
    a26c:	d11e      	bne.n	a2ac <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a26e:	2300      	movs	r3, #0
    a270:	73fb      	strb	r3, [r7, #15]
    a272:	e017      	b.n	a2a4 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a274:	7bfa      	ldrb	r2, [r7, #15]
    a276:	4613      	mov	r3, r2
    a278:	009b      	lsls	r3, r3, #2
    a27a:	4413      	add	r3, r2
    a27c:	009b      	lsls	r3, r3, #2
    a27e:	3310      	adds	r3, #16
    a280:	4a0d      	ldr	r2, [pc, #52]	; (a2b8 <_usb_d_dev_handler+0x6c>)
    a282:	4413      	add	r3, r2
    a284:	3304      	adds	r3, #4
    a286:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a288:	683b      	ldr	r3, [r7, #0]
    a28a:	7c9b      	ldrb	r3, [r3, #18]
    a28c:	2bff      	cmp	r3, #255	; 0xff
    a28e:	d005      	beq.n	a29c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a290:	88fb      	ldrh	r3, [r7, #6]
    a292:	6839      	ldr	r1, [r7, #0]
    a294:	4618      	mov	r0, r3
    a296:	4b09      	ldr	r3, [pc, #36]	; (a2bc <_usb_d_dev_handler+0x70>)
    a298:	4798      	blx	r3
    a29a:	e000      	b.n	a29e <_usb_d_dev_handler+0x52>
			continue;
    a29c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a29e:	7bfb      	ldrb	r3, [r7, #15]
    a2a0:	3301      	adds	r3, #1
    a2a2:	73fb      	strb	r3, [r7, #15]
    a2a4:	7bfb      	ldrb	r3, [r7, #15]
    a2a6:	2b08      	cmp	r3, #8
    a2a8:	d9e4      	bls.n	a274 <_usb_d_dev_handler+0x28>
    a2aa:	e000      	b.n	a2ae <_usb_d_dev_handler+0x62>
			return;
    a2ac:	bf00      	nop
	}
}
    a2ae:	3710      	adds	r7, #16
    a2b0:	46bd      	mov	sp, r7
    a2b2:	bd80      	pop	{r7, pc}
    a2b4:	000097a5 	.word	0x000097a5
    a2b8:	20000ea0 	.word	0x20000ea0
    a2bc:	0000a195 	.word	0x0000a195

0000a2c0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a2c0:	b580      	push	{r7, lr}
    a2c2:	b082      	sub	sp, #8
    a2c4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a2c6:	2300      	movs	r3, #0
    a2c8:	71fb      	strb	r3, [r7, #7]
    a2ca:	e023      	b.n	a314 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a2cc:	79fa      	ldrb	r2, [r7, #7]
    a2ce:	4613      	mov	r3, r2
    a2d0:	009b      	lsls	r3, r3, #2
    a2d2:	4413      	add	r3, r2
    a2d4:	009b      	lsls	r3, r3, #2
    a2d6:	3310      	adds	r3, #16
    a2d8:	4a14      	ldr	r2, [pc, #80]	; (a32c <_usb_d_dev_reset_epts+0x6c>)
    a2da:	4413      	add	r3, r2
    a2dc:	3304      	adds	r3, #4
    a2de:	2103      	movs	r1, #3
    a2e0:	4618      	mov	r0, r3
    a2e2:	4b13      	ldr	r3, [pc, #76]	; (a330 <_usb_d_dev_reset_epts+0x70>)
    a2e4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a2e6:	79fa      	ldrb	r2, [r7, #7]
    a2e8:	4910      	ldr	r1, [pc, #64]	; (a32c <_usb_d_dev_reset_epts+0x6c>)
    a2ea:	4613      	mov	r3, r2
    a2ec:	009b      	lsls	r3, r3, #2
    a2ee:	4413      	add	r3, r2
    a2f0:	009b      	lsls	r3, r3, #2
    a2f2:	440b      	add	r3, r1
    a2f4:	3326      	adds	r3, #38	; 0x26
    a2f6:	22ff      	movs	r2, #255	; 0xff
    a2f8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a2fa:	79fa      	ldrb	r2, [r7, #7]
    a2fc:	490b      	ldr	r1, [pc, #44]	; (a32c <_usb_d_dev_reset_epts+0x6c>)
    a2fe:	4613      	mov	r3, r2
    a300:	009b      	lsls	r3, r3, #2
    a302:	4413      	add	r3, r2
    a304:	009b      	lsls	r3, r3, #2
    a306:	440b      	add	r3, r1
    a308:	3327      	adds	r3, #39	; 0x27
    a30a:	2200      	movs	r2, #0
    a30c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a30e:	79fb      	ldrb	r3, [r7, #7]
    a310:	3301      	adds	r3, #1
    a312:	71fb      	strb	r3, [r7, #7]
    a314:	79fb      	ldrb	r3, [r7, #7]
    a316:	2b08      	cmp	r3, #8
    a318:	d9d8      	bls.n	a2cc <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a31a:	22a0      	movs	r2, #160	; 0xa0
    a31c:	2100      	movs	r1, #0
    a31e:	4805      	ldr	r0, [pc, #20]	; (a334 <_usb_d_dev_reset_epts+0x74>)
    a320:	4b05      	ldr	r3, [pc, #20]	; (a338 <_usb_d_dev_reset_epts+0x78>)
    a322:	4798      	blx	r3
}
    a324:	bf00      	nop
    a326:	3708      	adds	r7, #8
    a328:	46bd      	mov	sp, r7
    a32a:	bd80      	pop	{r7, pc}
    a32c:	20000ea0 	.word	0x20000ea0
    a330:	0000ab85 	.word	0x0000ab85
    a334:	20000f68 	.word	0x20000f68
    a338:	0000ff45 	.word	0x0000ff45

0000a33c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a33c:	b580      	push	{r7, lr}
    a33e:	b084      	sub	sp, #16
    a340:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a342:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a346:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a348:	2301      	movs	r3, #1
    a34a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a34c:	2304      	movs	r3, #4
    a34e:	713b      	strb	r3, [r7, #4]
    a350:	2300      	movs	r3, #0
    a352:	717b      	strb	r3, [r7, #5]
    a354:	2300      	movs	r3, #0
    a356:	71bb      	strb	r3, [r7, #6]
    a358:	2300      	movs	r3, #0
    a35a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a35c:	2101      	movs	r1, #1
    a35e:	68f8      	ldr	r0, [r7, #12]
    a360:	4b26      	ldr	r3, [pc, #152]	; (a3fc <_usb_d_dev_init+0xc0>)
    a362:	4798      	blx	r3
    a364:	4603      	mov	r3, r0
    a366:	f083 0301 	eor.w	r3, r3, #1
    a36a:	b2db      	uxtb	r3, r3
    a36c:	2b00      	cmp	r3, #0
    a36e:	d011      	beq.n	a394 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a370:	2102      	movs	r1, #2
    a372:	68f8      	ldr	r0, [r7, #12]
    a374:	4b22      	ldr	r3, [pc, #136]	; (a400 <_usb_d_dev_init+0xc4>)
    a376:	4798      	blx	r3
    a378:	4603      	mov	r3, r0
    a37a:	2b00      	cmp	r3, #0
    a37c:	d006      	beq.n	a38c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a37e:	68f8      	ldr	r0, [r7, #12]
    a380:	4b20      	ldr	r3, [pc, #128]	; (a404 <_usb_d_dev_init+0xc8>)
    a382:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a384:	2102      	movs	r1, #2
    a386:	68f8      	ldr	r0, [r7, #12]
    a388:	4b1f      	ldr	r3, [pc, #124]	; (a408 <_usb_d_dev_init+0xcc>)
    a38a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a38c:	2101      	movs	r1, #1
    a38e:	68f8      	ldr	r0, [r7, #12]
    a390:	4b1e      	ldr	r3, [pc, #120]	; (a40c <_usb_d_dev_init+0xd0>)
    a392:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a394:	2101      	movs	r1, #1
    a396:	68f8      	ldr	r0, [r7, #12]
    a398:	4b1b      	ldr	r3, [pc, #108]	; (a408 <_usb_d_dev_init+0xcc>)
    a39a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a39c:	4b1c      	ldr	r3, [pc, #112]	; (a410 <_usb_d_dev_init+0xd4>)
    a39e:	4a1d      	ldr	r2, [pc, #116]	; (a414 <_usb_d_dev_init+0xd8>)
    a3a0:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a3a2:	4b1b      	ldr	r3, [pc, #108]	; (a410 <_usb_d_dev_init+0xd4>)
    a3a4:	4a1b      	ldr	r2, [pc, #108]	; (a414 <_usb_d_dev_init+0xd8>)
    a3a6:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a3a8:	4b19      	ldr	r3, [pc, #100]	; (a410 <_usb_d_dev_init+0xd4>)
    a3aa:	4a1a      	ldr	r2, [pc, #104]	; (a414 <_usb_d_dev_init+0xd8>)
    a3ac:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a3ae:	4b18      	ldr	r3, [pc, #96]	; (a410 <_usb_d_dev_init+0xd4>)
    a3b0:	4a18      	ldr	r2, [pc, #96]	; (a414 <_usb_d_dev_init+0xd8>)
    a3b2:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a3b4:	4b16      	ldr	r3, [pc, #88]	; (a410 <_usb_d_dev_init+0xd4>)
    a3b6:	4a17      	ldr	r2, [pc, #92]	; (a414 <_usb_d_dev_init+0xd8>)
    a3b8:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a3ba:	4b17      	ldr	r3, [pc, #92]	; (a418 <_usb_d_dev_init+0xdc>)
    a3bc:	4798      	blx	r3

	_usb_load_calib();
    a3be:	4b17      	ldr	r3, [pc, #92]	; (a41c <_usb_d_dev_init+0xe0>)
    a3c0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a3c2:	2104      	movs	r1, #4
    a3c4:	68f8      	ldr	r0, [r7, #12]
    a3c6:	4b11      	ldr	r3, [pc, #68]	; (a40c <_usb_d_dev_init+0xd0>)
    a3c8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a3ca:	4b15      	ldr	r3, [pc, #84]	; (a420 <_usb_d_dev_init+0xe4>)
    a3cc:	4619      	mov	r1, r3
    a3ce:	68f8      	ldr	r0, [r7, #12]
    a3d0:	4b14      	ldr	r3, [pc, #80]	; (a424 <_usb_d_dev_init+0xe8>)
    a3d2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a3d4:	7afb      	ldrb	r3, [r7, #11]
    a3d6:	f107 0210 	add.w	r2, r7, #16
    a3da:	4413      	add	r3, r2
    a3dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a3e0:	f043 0301 	orr.w	r3, r3, #1
    a3e4:	b2db      	uxtb	r3, r3
    a3e6:	b29b      	uxth	r3, r3
    a3e8:	4619      	mov	r1, r3
    a3ea:	68f8      	ldr	r0, [r7, #12]
    a3ec:	4b0e      	ldr	r3, [pc, #56]	; (a428 <_usb_d_dev_init+0xec>)
    a3ee:	4798      	blx	r3

	return ERR_NONE;
    a3f0:	2300      	movs	r3, #0
}
    a3f2:	4618      	mov	r0, r3
    a3f4:	3710      	adds	r7, #16
    a3f6:	46bd      	mov	sp, r7
    a3f8:	bd80      	pop	{r7, pc}
    a3fa:	bf00      	nop
    a3fc:	000089d5 	.word	0x000089d5
    a400:	00008d25 	.word	0x00008d25
    a404:	00008cf9 	.word	0x00008cf9
    a408:	000089ab 	.word	0x000089ab
    a40c:	00008d55 	.word	0x00008d55
    a410:	20000ea0 	.word	0x20000ea0
    a414:	00008e1d 	.word	0x00008e1d
    a418:	0000a2c1 	.word	0x0000a2c1
    a41c:	00008e35 	.word	0x00008e35
    a420:	20000f68 	.word	0x20000f68
    a424:	00008e01 	.word	0x00008e01
    a428:	00008dc5 	.word	0x00008dc5

0000a42c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a42c:	b580      	push	{r7, lr}
    a42e:	b082      	sub	sp, #8
    a430:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a432:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a436:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a438:	2103      	movs	r1, #3
    a43a:	6878      	ldr	r0, [r7, #4]
    a43c:	4b17      	ldr	r3, [pc, #92]	; (a49c <_usb_d_dev_enable+0x70>)
    a43e:	4798      	blx	r3
    a440:	4603      	mov	r3, r0
    a442:	2b00      	cmp	r3, #0
    a444:	d002      	beq.n	a44c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a446:	f06f 0310 	mvn.w	r3, #16
    a44a:	e023      	b.n	a494 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a44c:	6878      	ldr	r0, [r7, #4]
    a44e:	4b14      	ldr	r3, [pc, #80]	; (a4a0 <_usb_d_dev_enable+0x74>)
    a450:	4798      	blx	r3
    a452:	4603      	mov	r3, r0
    a454:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a456:	78fb      	ldrb	r3, [r7, #3]
    a458:	f003 0302 	and.w	r3, r3, #2
    a45c:	2b00      	cmp	r3, #0
    a45e:	d107      	bne.n	a470 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a460:	78fb      	ldrb	r3, [r7, #3]
    a462:	f043 0302 	orr.w	r3, r3, #2
    a466:	b2db      	uxtb	r3, r3
    a468:	4619      	mov	r1, r3
    a46a:	6878      	ldr	r0, [r7, #4]
    a46c:	4b0d      	ldr	r3, [pc, #52]	; (a4a4 <_usb_d_dev_enable+0x78>)
    a46e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a470:	2050      	movs	r0, #80	; 0x50
    a472:	4b0d      	ldr	r3, [pc, #52]	; (a4a8 <_usb_d_dev_enable+0x7c>)
    a474:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a476:	2051      	movs	r0, #81	; 0x51
    a478:	4b0b      	ldr	r3, [pc, #44]	; (a4a8 <_usb_d_dev_enable+0x7c>)
    a47a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a47c:	2052      	movs	r0, #82	; 0x52
    a47e:	4b0a      	ldr	r3, [pc, #40]	; (a4a8 <_usb_d_dev_enable+0x7c>)
    a480:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a482:	2053      	movs	r0, #83	; 0x53
    a484:	4b08      	ldr	r3, [pc, #32]	; (a4a8 <_usb_d_dev_enable+0x7c>)
    a486:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a488:	f240 218d 	movw	r1, #653	; 0x28d
    a48c:	6878      	ldr	r0, [r7, #4]
    a48e:	4b07      	ldr	r3, [pc, #28]	; (a4ac <_usb_d_dev_enable+0x80>)
    a490:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a492:	2300      	movs	r3, #0
}
    a494:	4618      	mov	r0, r3
    a496:	3708      	adds	r7, #8
    a498:	46bd      	mov	sp, r7
    a49a:	bd80      	pop	{r7, pc}
    a49c:	00008ccf 	.word	0x00008ccf
    a4a0:	00008d7d 	.word	0x00008d7d
    a4a4:	00008d55 	.word	0x00008d55
    a4a8:	000088e1 	.word	0x000088e1
    a4ac:	00008c79 	.word	0x00008c79

0000a4b0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a4b0:	b580      	push	{r7, lr}
    a4b2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a4b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a4b8:	4b01      	ldr	r3, [pc, #4]	; (a4c0 <_usb_d_dev_attach+0x10>)
    a4ba:	4798      	blx	r3
}
    a4bc:	bf00      	nop
    a4be:	bd80      	pop	{r7, pc}
    a4c0:	00008da1 	.word	0x00008da1

0000a4c4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a4c4:	b580      	push	{r7, lr}
    a4c6:	b082      	sub	sp, #8
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	4603      	mov	r3, r0
    a4cc:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a4ce:	79fb      	ldrb	r3, [r7, #7]
    a4d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a4d4:	b2db      	uxtb	r3, r3
    a4d6:	4619      	mov	r1, r3
    a4d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a4dc:	4b02      	ldr	r3, [pc, #8]	; (a4e8 <_usb_d_dev_set_address+0x24>)
    a4de:	4798      	blx	r3
}
    a4e0:	bf00      	nop
    a4e2:	3708      	adds	r7, #8
    a4e4:	46bd      	mov	sp, r7
    a4e6:	bd80      	pop	{r7, pc}
    a4e8:	00008de3 	.word	0x00008de3

0000a4ec <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a4ec:	b590      	push	{r4, r7, lr}
    a4ee:	b085      	sub	sp, #20
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a4f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4f8:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a4fa:	687b      	ldr	r3, [r7, #4]
    a4fc:	7c9b      	ldrb	r3, [r3, #18]
    a4fe:	f003 030f 	and.w	r3, r3, #15
    a502:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a504:	687b      	ldr	r3, [r7, #4]
    a506:	68db      	ldr	r3, [r3, #12]
    a508:	461a      	mov	r2, r3
    a50a:	7afb      	ldrb	r3, [r7, #11]
    a50c:	2100      	movs	r1, #0
    a50e:	4618      	mov	r0, r3
    a510:	4b0f      	ldr	r3, [pc, #60]	; (a550 <_usb_d_dev_trans_setup+0x64>)
    a512:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a514:	687b      	ldr	r3, [r7, #4]
    a516:	8a1b      	ldrh	r3, [r3, #16]
    a518:	461a      	mov	r2, r3
    a51a:	7af8      	ldrb	r0, [r7, #11]
    a51c:	2300      	movs	r3, #0
    a51e:	2100      	movs	r1, #0
    a520:	4c0c      	ldr	r4, [pc, #48]	; (a554 <_usb_d_dev_trans_setup+0x68>)
    a522:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a524:	7afb      	ldrb	r3, [r7, #11]
    a526:	22b0      	movs	r2, #176	; 0xb0
    a528:	4619      	mov	r1, r3
    a52a:	68f8      	ldr	r0, [r7, #12]
    a52c:	4b0a      	ldr	r3, [pc, #40]	; (a558 <_usb_d_dev_trans_setup+0x6c>)
    a52e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a530:	7afb      	ldrb	r3, [r7, #11]
    a532:	2200      	movs	r2, #0
    a534:	2100      	movs	r1, #0
    a536:	4618      	mov	r0, r3
    a538:	4b08      	ldr	r3, [pc, #32]	; (a55c <_usb_d_dev_trans_setup+0x70>)
    a53a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a53c:	7afb      	ldrb	r3, [r7, #11]
    a53e:	2210      	movs	r2, #16
    a540:	4619      	mov	r1, r3
    a542:	68f8      	ldr	r0, [r7, #12]
    a544:	4b06      	ldr	r3, [pc, #24]	; (a560 <_usb_d_dev_trans_setup+0x74>)
    a546:	4798      	blx	r3
}
    a548:	bf00      	nop
    a54a:	3714      	adds	r7, #20
    a54c:	46bd      	mov	sp, r7
    a54e:	bd90      	pop	{r4, r7, pc}
    a550:	00009281 	.word	0x00009281
    a554:	00009409 	.word	0x00009409
    a558:	00008ae1 	.word	0x00008ae1
    a55c:	000094d9 	.word	0x000094d9
    a560:	00008b35 	.word	0x00008b35

0000a564 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a564:	b580      	push	{r7, lr}
    a566:	b088      	sub	sp, #32
    a568:	af00      	add	r7, sp, #0
    a56a:	4603      	mov	r3, r0
    a56c:	71fb      	strb	r3, [r7, #7]
    a56e:	460b      	mov	r3, r1
    a570:	71bb      	strb	r3, [r7, #6]
    a572:	4613      	mov	r3, r2
    a574:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a576:	79fb      	ldrb	r3, [r7, #7]
    a578:	f003 030f 	and.w	r3, r3, #15
    a57c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a57e:	79fb      	ldrb	r3, [r7, #7]
    a580:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a584:	2b00      	cmp	r3, #0
    a586:	bf14      	ite	ne
    a588:	2301      	movne	r3, #1
    a58a:	2300      	moveq	r3, #0
    a58c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a58e:	7fba      	ldrb	r2, [r7, #30]
    a590:	7ffb      	ldrb	r3, [r7, #31]
    a592:	4611      	mov	r1, r2
    a594:	4618      	mov	r0, r3
    a596:	4b3e      	ldr	r3, [pc, #248]	; (a690 <_usb_d_dev_ep_init+0x12c>)
    a598:	4798      	blx	r3
    a59a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a59c:	79bb      	ldrb	r3, [r7, #6]
    a59e:	f003 0303 	and.w	r3, r3, #3
    a5a2:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a5a4:	7ffa      	ldrb	r2, [r7, #31]
    a5a6:	4613      	mov	r3, r2
    a5a8:	005b      	lsls	r3, r3, #1
    a5aa:	4413      	add	r3, r2
    a5ac:	009b      	lsls	r3, r3, #2
    a5ae:	4a39      	ldr	r2, [pc, #228]	; (a694 <_usb_d_dev_ep_init+0x130>)
    a5b0:	4413      	add	r3, r2
    a5b2:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a5b4:	7ffb      	ldrb	r3, [r7, #31]
    a5b6:	2b04      	cmp	r3, #4
    a5b8:	d902      	bls.n	a5c0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a5ba:	f06f 0311 	mvn.w	r3, #17
    a5be:	e063      	b.n	a688 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a5c0:	69bb      	ldr	r3, [r7, #24]
    a5c2:	7c9b      	ldrb	r3, [r3, #18]
    a5c4:	2bff      	cmp	r3, #255	; 0xff
    a5c6:	d002      	beq.n	a5ce <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a5c8:	f06f 0313 	mvn.w	r3, #19
    a5cc:	e05c      	b.n	a688 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a5ce:	7dfb      	ldrb	r3, [r7, #23]
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	d11f      	bne.n	a614 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a5d4:	7fbb      	ldrb	r3, [r7, #30]
    a5d6:	2b00      	cmp	r3, #0
    a5d8:	bf14      	ite	ne
    a5da:	2301      	movne	r3, #1
    a5dc:	2300      	moveq	r3, #0
    a5de:	b2db      	uxtb	r3, r3
    a5e0:	f083 0301 	eor.w	r3, r3, #1
    a5e4:	b2db      	uxtb	r3, r3
    a5e6:	f003 0301 	and.w	r3, r3, #1
    a5ea:	b2da      	uxtb	r2, r3
    a5ec:	7ffb      	ldrb	r3, [r7, #31]
    a5ee:	4611      	mov	r1, r2
    a5f0:	4618      	mov	r0, r3
    a5f2:	4b27      	ldr	r3, [pc, #156]	; (a690 <_usb_d_dev_ep_init+0x12c>)
    a5f4:	4798      	blx	r3
    a5f6:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a5f8:	68fb      	ldr	r3, [r7, #12]
    a5fa:	7c9b      	ldrb	r3, [r3, #18]
    a5fc:	2bff      	cmp	r3, #255	; 0xff
    a5fe:	d002      	beq.n	a606 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a600:	f06f 0313 	mvn.w	r3, #19
    a604:	e040      	b.n	a688 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a606:	693b      	ldr	r3, [r7, #16]
    a608:	681b      	ldr	r3, [r3, #0]
    a60a:	2b00      	cmp	r3, #0
    a60c:	d102      	bne.n	a614 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a60e:	f06f 0312 	mvn.w	r3, #18
    a612:	e039      	b.n	a688 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a614:	7fbb      	ldrb	r3, [r7, #30]
    a616:	2b00      	cmp	r3, #0
    a618:	d007      	beq.n	a62a <_usb_d_dev_ep_init+0xc6>
    a61a:	693b      	ldr	r3, [r7, #16]
    a61c:	685b      	ldr	r3, [r3, #4]
    a61e:	2b00      	cmp	r3, #0
    a620:	bf14      	ite	ne
    a622:	2301      	movne	r3, #1
    a624:	2300      	moveq	r3, #0
    a626:	b2db      	uxtb	r3, r3
    a628:	e006      	b.n	a638 <_usb_d_dev_ep_init+0xd4>
    a62a:	693b      	ldr	r3, [r7, #16]
    a62c:	681b      	ldr	r3, [r3, #0]
    a62e:	2b00      	cmp	r3, #0
    a630:	bf14      	ite	ne
    a632:	2301      	movne	r3, #1
    a634:	2300      	moveq	r3, #0
    a636:	b2db      	uxtb	r3, r3
    a638:	2b00      	cmp	r3, #0
    a63a:	d00f      	beq.n	a65c <_usb_d_dev_ep_init+0xf8>
    a63c:	7fbb      	ldrb	r3, [r7, #30]
    a63e:	2b00      	cmp	r3, #0
    a640:	d003      	beq.n	a64a <_usb_d_dev_ep_init+0xe6>
    a642:	693b      	ldr	r3, [r7, #16]
    a644:	895b      	ldrh	r3, [r3, #10]
    a646:	461a      	mov	r2, r3
    a648:	e002      	b.n	a650 <_usb_d_dev_ep_init+0xec>
    a64a:	693b      	ldr	r3, [r7, #16]
    a64c:	891b      	ldrh	r3, [r3, #8]
    a64e:	461a      	mov	r2, r3
    a650:	88bb      	ldrh	r3, [r7, #4]
    a652:	429a      	cmp	r2, r3
    a654:	da02      	bge.n	a65c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a656:	f06f 0312 	mvn.w	r3, #18
    a65a:	e015      	b.n	a688 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a65c:	7fbb      	ldrb	r3, [r7, #30]
    a65e:	2b00      	cmp	r3, #0
    a660:	d002      	beq.n	a668 <_usb_d_dev_ep_init+0x104>
    a662:	693b      	ldr	r3, [r7, #16]
    a664:	685b      	ldr	r3, [r3, #4]
    a666:	e001      	b.n	a66c <_usb_d_dev_ep_init+0x108>
    a668:	693b      	ldr	r3, [r7, #16]
    a66a:	681b      	ldr	r3, [r3, #0]
    a66c:	69ba      	ldr	r2, [r7, #24]
    a66e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a670:	69bb      	ldr	r3, [r7, #24]
    a672:	88ba      	ldrh	r2, [r7, #4]
    a674:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a676:	7dfb      	ldrb	r3, [r7, #23]
    a678:	3301      	adds	r3, #1
    a67a:	b2da      	uxtb	r2, r3
    a67c:	69bb      	ldr	r3, [r7, #24]
    a67e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a680:	69bb      	ldr	r3, [r7, #24]
    a682:	79fa      	ldrb	r2, [r7, #7]
    a684:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a686:	2300      	movs	r3, #0
}
    a688:	4618      	mov	r0, r3
    a68a:	3720      	adds	r7, #32
    a68c:	46bd      	mov	sp, r7
    a68e:	bd80      	pop	{r7, pc}
    a690:	00009595 	.word	0x00009595
    a694:	00011084 	.word	0x00011084

0000a698 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a698:	b580      	push	{r7, lr}
    a69a:	b086      	sub	sp, #24
    a69c:	af00      	add	r7, sp, #0
    a69e:	4603      	mov	r3, r0
    a6a0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a6a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6a6:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a6a8:	79fb      	ldrb	r3, [r7, #7]
    a6aa:	f003 030f 	and.w	r3, r3, #15
    a6ae:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a6b0:	79fb      	ldrb	r3, [r7, #7]
    a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	bf14      	ite	ne
    a6ba:	2301      	movne	r3, #1
    a6bc:	2300      	moveq	r3, #0
    a6be:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a6c0:	7cba      	ldrb	r2, [r7, #18]
    a6c2:	7cfb      	ldrb	r3, [r7, #19]
    a6c4:	4611      	mov	r1, r2
    a6c6:	4618      	mov	r0, r3
    a6c8:	4b2a      	ldr	r3, [pc, #168]	; (a774 <_usb_d_dev_ep_deinit+0xdc>)
    a6ca:	4798      	blx	r3
    a6cc:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a6ce:	7cfb      	ldrb	r3, [r7, #19]
    a6d0:	2b04      	cmp	r3, #4
    a6d2:	d84a      	bhi.n	a76a <_usb_d_dev_ep_deinit+0xd2>
    a6d4:	68fb      	ldr	r3, [r7, #12]
    a6d6:	7c9b      	ldrb	r3, [r3, #18]
    a6d8:	2bff      	cmp	r3, #255	; 0xff
    a6da:	d046      	beq.n	a76a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a6dc:	7cbb      	ldrb	r3, [r7, #18]
    a6de:	2203      	movs	r2, #3
    a6e0:	4619      	mov	r1, r3
    a6e2:	68f8      	ldr	r0, [r7, #12]
    a6e4:	4b24      	ldr	r3, [pc, #144]	; (a778 <_usb_d_dev_ep_deinit+0xe0>)
    a6e6:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a6e8:	68fb      	ldr	r3, [r7, #12]
    a6ea:	7cdb      	ldrb	r3, [r3, #19]
    a6ec:	f003 0307 	and.w	r3, r3, #7
    a6f0:	b2db      	uxtb	r3, r3
    a6f2:	2b01      	cmp	r3, #1
    a6f4:	d107      	bne.n	a706 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a6f6:	79fb      	ldrb	r3, [r7, #7]
    a6f8:	697a      	ldr	r2, [r7, #20]
    a6fa:	3308      	adds	r3, #8
    a6fc:	015b      	lsls	r3, r3, #5
    a6fe:	4413      	add	r3, r2
    a700:	2200      	movs	r2, #0
    a702:	701a      	strb	r2, [r3, #0]
    a704:	e02a      	b.n	a75c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a706:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a70a:	2b00      	cmp	r3, #0
    a70c:	da15      	bge.n	a73a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a70e:	79fb      	ldrb	r3, [r7, #7]
    a710:	f003 030f 	and.w	r3, r3, #15
    a714:	79fa      	ldrb	r2, [r7, #7]
    a716:	f002 020f 	and.w	r2, r2, #15
    a71a:	6979      	ldr	r1, [r7, #20]
    a71c:	3208      	adds	r2, #8
    a71e:	0152      	lsls	r2, r2, #5
    a720:	440a      	add	r2, r1
    a722:	7812      	ldrb	r2, [r2, #0]
    a724:	b2d2      	uxtb	r2, r2
    a726:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a72a:	b2d1      	uxtb	r1, r2
    a72c:	697a      	ldr	r2, [r7, #20]
    a72e:	3308      	adds	r3, #8
    a730:	015b      	lsls	r3, r3, #5
    a732:	4413      	add	r3, r2
    a734:	460a      	mov	r2, r1
    a736:	701a      	strb	r2, [r3, #0]
    a738:	e010      	b.n	a75c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a73a:	79fb      	ldrb	r3, [r7, #7]
    a73c:	79fa      	ldrb	r2, [r7, #7]
    a73e:	6979      	ldr	r1, [r7, #20]
    a740:	3208      	adds	r2, #8
    a742:	0152      	lsls	r2, r2, #5
    a744:	440a      	add	r2, r1
    a746:	7812      	ldrb	r2, [r2, #0]
    a748:	b2d2      	uxtb	r2, r2
    a74a:	f022 0207 	bic.w	r2, r2, #7
    a74e:	b2d1      	uxtb	r1, r2
    a750:	697a      	ldr	r2, [r7, #20]
    a752:	3308      	adds	r3, #8
    a754:	015b      	lsls	r3, r3, #5
    a756:	4413      	add	r3, r2
    a758:	460a      	mov	r2, r1
    a75a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a75c:	68fb      	ldr	r3, [r7, #12]
    a75e:	2200      	movs	r2, #0
    a760:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a762:	68fb      	ldr	r3, [r7, #12]
    a764:	22ff      	movs	r2, #255	; 0xff
    a766:	749a      	strb	r2, [r3, #18]
    a768:	e000      	b.n	a76c <_usb_d_dev_ep_deinit+0xd4>
		return;
    a76a:	bf00      	nop
}
    a76c:	3718      	adds	r7, #24
    a76e:	46bd      	mov	sp, r7
    a770:	bd80      	pop	{r7, pc}
    a772:	bf00      	nop
    a774:	00009595 	.word	0x00009595
    a778:	0000abcd 	.word	0x0000abcd

0000a77c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a77c:	b5b0      	push	{r4, r5, r7, lr}
    a77e:	b088      	sub	sp, #32
    a780:	af00      	add	r7, sp, #0
    a782:	4603      	mov	r3, r0
    a784:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a786:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a78a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a78c:	79fb      	ldrb	r3, [r7, #7]
    a78e:	f003 030f 	and.w	r3, r3, #15
    a792:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a794:	79fb      	ldrb	r3, [r7, #7]
    a796:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a79a:	2b00      	cmp	r3, #0
    a79c:	bf14      	ite	ne
    a79e:	2301      	movne	r3, #1
    a7a0:	2300      	moveq	r3, #0
    a7a2:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a7a4:	7eba      	ldrb	r2, [r7, #26]
    a7a6:	7efb      	ldrb	r3, [r7, #27]
    a7a8:	4611      	mov	r1, r2
    a7aa:	4618      	mov	r0, r3
    a7ac:	4b70      	ldr	r3, [pc, #448]	; (a970 <_usb_d_dev_ep_enable+0x1f4>)
    a7ae:	4798      	blx	r3
    a7b0:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a7b2:	7efb      	ldrb	r3, [r7, #27]
    a7b4:	4619      	mov	r1, r3
    a7b6:	69f8      	ldr	r0, [r7, #28]
    a7b8:	4b6e      	ldr	r3, [pc, #440]	; (a974 <_usb_d_dev_ep_enable+0x1f8>)
    a7ba:	4798      	blx	r3
    a7bc:	4603      	mov	r3, r0
    a7be:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a7c0:	7efb      	ldrb	r3, [r7, #27]
    a7c2:	2b04      	cmp	r3, #4
    a7c4:	d803      	bhi.n	a7ce <_usb_d_dev_ep_enable+0x52>
    a7c6:	697b      	ldr	r3, [r7, #20]
    a7c8:	7c9b      	ldrb	r3, [r3, #18]
    a7ca:	2bff      	cmp	r3, #255	; 0xff
    a7cc:	d102      	bne.n	a7d4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a7ce:	f06f 0311 	mvn.w	r3, #17
    a7d2:	e0c8      	b.n	a966 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a7d4:	7efb      	ldrb	r3, [r7, #27]
    a7d6:	015b      	lsls	r3, r3, #5
    a7d8:	4a67      	ldr	r2, [pc, #412]	; (a978 <_usb_d_dev_ep_enable+0x1fc>)
    a7da:	4413      	add	r3, r2
    a7dc:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a7de:	697b      	ldr	r3, [r7, #20]
    a7e0:	7cdb      	ldrb	r3, [r3, #19]
    a7e2:	f003 0307 	and.w	r3, r3, #7
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	2b01      	cmp	r3, #1
    a7ea:	d14b      	bne.n	a884 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a7ec:	7cfb      	ldrb	r3, [r7, #19]
    a7ee:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d002      	beq.n	a7fc <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a7f6:	f06f 0313 	mvn.w	r3, #19
    a7fa:	e0b4      	b.n	a966 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a7fc:	7efb      	ldrb	r3, [r7, #27]
    a7fe:	2211      	movs	r2, #17
    a800:	4619      	mov	r1, r3
    a802:	69f8      	ldr	r0, [r7, #28]
    a804:	4b5d      	ldr	r3, [pc, #372]	; (a97c <_usb_d_dev_ep_enable+0x200>)
    a806:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a808:	697b      	ldr	r3, [r7, #20]
    a80a:	8a1b      	ldrh	r3, [r3, #16]
    a80c:	039b      	lsls	r3, r3, #14
    a80e:	4c5c      	ldr	r4, [pc, #368]	; (a980 <_usb_d_dev_ep_enable+0x204>)
    a810:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a812:	697b      	ldr	r3, [r7, #20]
    a814:	8a1b      	ldrh	r3, [r3, #16]
    a816:	4618      	mov	r0, r3
    a818:	4b5a      	ldr	r3, [pc, #360]	; (a984 <_usb_d_dev_ep_enable+0x208>)
    a81a:	4798      	blx	r3
    a81c:	4603      	mov	r3, r0
    a81e:	071b      	lsls	r3, r3, #28
    a820:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a824:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a828:	68fb      	ldr	r3, [r7, #12]
    a82a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a82c:	68fb      	ldr	r3, [r7, #12]
    a82e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a832:	697b      	ldr	r3, [r7, #20]
    a834:	8a1b      	ldrh	r3, [r3, #16]
    a836:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a83a:	697b      	ldr	r3, [r7, #20]
    a83c:	8a1b      	ldrh	r3, [r3, #16]
    a83e:	4618      	mov	r0, r3
    a840:	4b50      	ldr	r3, [pc, #320]	; (a984 <_usb_d_dev_ep_enable+0x208>)
    a842:	4798      	blx	r3
    a844:	4603      	mov	r3, r0
    a846:	071b      	lsls	r3, r3, #28
    a848:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a84c:	432b      	orrs	r3, r5
    a84e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a850:	7efb      	ldrb	r3, [r7, #27]
    a852:	2200      	movs	r2, #0
    a854:	2100      	movs	r1, #0
    a856:	4618      	mov	r0, r3
    a858:	4b4b      	ldr	r3, [pc, #300]	; (a988 <_usb_d_dev_ep_enable+0x20c>)
    a85a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a85c:	7efb      	ldrb	r3, [r7, #27]
    a85e:	2200      	movs	r2, #0
    a860:	2101      	movs	r1, #1
    a862:	4618      	mov	r0, r3
    a864:	4b49      	ldr	r3, [pc, #292]	; (a98c <_usb_d_dev_ep_enable+0x210>)
    a866:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a868:	7efb      	ldrb	r3, [r7, #27]
    a86a:	2100      	movs	r1, #0
    a86c:	4618      	mov	r0, r3
    a86e:	4b48      	ldr	r3, [pc, #288]	; (a990 <_usb_d_dev_ep_enable+0x214>)
    a870:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a872:	7efb      	ldrb	r3, [r7, #27]
    a874:	2101      	movs	r1, #1
    a876:	4618      	mov	r0, r3
    a878:	4b45      	ldr	r3, [pc, #276]	; (a990 <_usb_d_dev_ep_enable+0x214>)
    a87a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a87c:	6978      	ldr	r0, [r7, #20]
    a87e:	4b45      	ldr	r3, [pc, #276]	; (a994 <_usb_d_dev_ep_enable+0x218>)
    a880:	4798      	blx	r3
    a882:	e06f      	b.n	a964 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a884:	7ebb      	ldrb	r3, [r7, #26]
    a886:	2b00      	cmp	r3, #0
    a888:	d038      	beq.n	a8fc <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a88a:	7cfb      	ldrb	r3, [r7, #19]
    a88c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a890:	2b00      	cmp	r3, #0
    a892:	d002      	beq.n	a89a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a894:	f06f 0313 	mvn.w	r3, #19
    a898:	e065      	b.n	a966 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a89a:	697b      	ldr	r3, [r7, #20]
    a89c:	7cdb      	ldrb	r3, [r3, #19]
    a89e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a8a2:	b2db      	uxtb	r3, r3
    a8a4:	011b      	lsls	r3, r3, #4
    a8a6:	b2db      	uxtb	r3, r3
    a8a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a8ac:	b2da      	uxtb	r2, r3
    a8ae:	7cfb      	ldrb	r3, [r7, #19]
    a8b0:	4313      	orrs	r3, r2
    a8b2:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a8b4:	7cfa      	ldrb	r2, [r7, #19]
    a8b6:	7efb      	ldrb	r3, [r7, #27]
    a8b8:	4619      	mov	r1, r3
    a8ba:	69f8      	ldr	r0, [r7, #28]
    a8bc:	4b2f      	ldr	r3, [pc, #188]	; (a97c <_usb_d_dev_ep_enable+0x200>)
    a8be:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a8c0:	68fb      	ldr	r3, [r7, #12]
    a8c2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a8c6:	697b      	ldr	r3, [r7, #20]
    a8c8:	8a1b      	ldrh	r3, [r3, #16]
    a8ca:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a8ce:	697b      	ldr	r3, [r7, #20]
    a8d0:	8a1b      	ldrh	r3, [r3, #16]
    a8d2:	4618      	mov	r0, r3
    a8d4:	4b2b      	ldr	r3, [pc, #172]	; (a984 <_usb_d_dev_ep_enable+0x208>)
    a8d6:	4798      	blx	r3
    a8d8:	4603      	mov	r3, r0
    a8da:	071b      	lsls	r3, r3, #28
    a8dc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a8e0:	432b      	orrs	r3, r5
    a8e2:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a8e4:	7efb      	ldrb	r3, [r7, #27]
    a8e6:	2200      	movs	r2, #0
    a8e8:	2101      	movs	r1, #1
    a8ea:	4618      	mov	r0, r3
    a8ec:	4b27      	ldr	r3, [pc, #156]	; (a98c <_usb_d_dev_ep_enable+0x210>)
    a8ee:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a8f0:	7efb      	ldrb	r3, [r7, #27]
    a8f2:	2101      	movs	r1, #1
    a8f4:	4618      	mov	r0, r3
    a8f6:	4b26      	ldr	r3, [pc, #152]	; (a990 <_usb_d_dev_ep_enable+0x214>)
    a8f8:	4798      	blx	r3
    a8fa:	e033      	b.n	a964 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a8fc:	7cfb      	ldrb	r3, [r7, #19]
    a8fe:	f003 0307 	and.w	r3, r3, #7
    a902:	2b00      	cmp	r3, #0
    a904:	d002      	beq.n	a90c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a906:	f06f 0313 	mvn.w	r3, #19
    a90a:	e02c      	b.n	a966 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a90c:	697b      	ldr	r3, [r7, #20]
    a90e:	7cdb      	ldrb	r3, [r3, #19]
    a910:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a914:	b2db      	uxtb	r3, r3
    a916:	461a      	mov	r2, r3
    a918:	7cfb      	ldrb	r3, [r7, #19]
    a91a:	4313      	orrs	r3, r2
    a91c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a91e:	7cfa      	ldrb	r2, [r7, #19]
    a920:	7efb      	ldrb	r3, [r7, #27]
    a922:	4619      	mov	r1, r3
    a924:	69f8      	ldr	r0, [r7, #28]
    a926:	4b15      	ldr	r3, [pc, #84]	; (a97c <_usb_d_dev_ep_enable+0x200>)
    a928:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a92a:	697b      	ldr	r3, [r7, #20]
    a92c:	8a1b      	ldrh	r3, [r3, #16]
    a92e:	039b      	lsls	r3, r3, #14
    a930:	4c13      	ldr	r4, [pc, #76]	; (a980 <_usb_d_dev_ep_enable+0x204>)
    a932:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a934:	697b      	ldr	r3, [r7, #20]
    a936:	8a1b      	ldrh	r3, [r3, #16]
    a938:	4618      	mov	r0, r3
    a93a:	4b12      	ldr	r3, [pc, #72]	; (a984 <_usb_d_dev_ep_enable+0x208>)
    a93c:	4798      	blx	r3
    a93e:	4603      	mov	r3, r0
    a940:	071b      	lsls	r3, r3, #28
    a942:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a946:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a94a:	68fb      	ldr	r3, [r7, #12]
    a94c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a94e:	7efb      	ldrb	r3, [r7, #27]
    a950:	2200      	movs	r2, #0
    a952:	2100      	movs	r1, #0
    a954:	4618      	mov	r0, r3
    a956:	4b0c      	ldr	r3, [pc, #48]	; (a988 <_usb_d_dev_ep_enable+0x20c>)
    a958:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a95a:	7efb      	ldrb	r3, [r7, #27]
    a95c:	2100      	movs	r1, #0
    a95e:	4618      	mov	r0, r3
    a960:	4b0b      	ldr	r3, [pc, #44]	; (a990 <_usb_d_dev_ep_enable+0x214>)
    a962:	4798      	blx	r3
	}

	return USB_OK;
    a964:	2300      	movs	r3, #0
}
    a966:	4618      	mov	r0, r3
    a968:	3720      	adds	r7, #32
    a96a:	46bd      	mov	sp, r7
    a96c:	bdb0      	pop	{r4, r5, r7, pc}
    a96e:	bf00      	nop
    a970:	00009595 	.word	0x00009595
    a974:	00008c1b 	.word	0x00008c1b
    a978:	20000f68 	.word	0x20000f68
    a97c:	00008bf1 	.word	0x00008bf1
    a980:	0fffc000 	.word	0x0fffc000
    a984:	00009531 	.word	0x00009531
    a988:	000094d9 	.word	0x000094d9
    a98c:	00009481 	.word	0x00009481
    a990:	00009449 	.word	0x00009449
    a994:	0000a4ed 	.word	0x0000a4ed

0000a998 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a998:	b580      	push	{r7, lr}
    a99a:	b084      	sub	sp, #16
    a99c:	af00      	add	r7, sp, #0
    a99e:	6078      	str	r0, [r7, #4]
    a9a0:	460b      	mov	r3, r1
    a9a2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a9a4:	687b      	ldr	r3, [r7, #4]
    a9a6:	7c9b      	ldrb	r3, [r3, #18]
    a9a8:	f003 030f 	and.w	r3, r3, #15
    a9ac:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a9ae:	78fa      	ldrb	r2, [r7, #3]
    a9b0:	7bfb      	ldrb	r3, [r7, #15]
    a9b2:	4611      	mov	r1, r2
    a9b4:	4618      	mov	r0, r3
    a9b6:	4b03      	ldr	r3, [pc, #12]	; (a9c4 <_usb_d_dev_ep_stall_get+0x2c>)
    a9b8:	4798      	blx	r3
    a9ba:	4603      	mov	r3, r0
}
    a9bc:	4618      	mov	r0, r3
    a9be:	3710      	adds	r7, #16
    a9c0:	46bd      	mov	sp, r7
    a9c2:	bd80      	pop	{r7, pc}
    a9c4:	00009089 	.word	0x00009089

0000a9c8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a9c8:	b580      	push	{r7, lr}
    a9ca:	b084      	sub	sp, #16
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	6078      	str	r0, [r7, #4]
    a9d0:	460b      	mov	r3, r1
    a9d2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a9d4:	687b      	ldr	r3, [r7, #4]
    a9d6:	7c9b      	ldrb	r3, [r3, #18]
    a9d8:	f003 030f 	and.w	r3, r3, #15
    a9dc:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a9de:	78f9      	ldrb	r1, [r7, #3]
    a9e0:	7bfb      	ldrb	r3, [r7, #15]
    a9e2:	2201      	movs	r2, #1
    a9e4:	4618      	mov	r0, r3
    a9e6:	4b0a      	ldr	r3, [pc, #40]	; (aa10 <_usb_d_dev_ep_stall_set+0x48>)
    a9e8:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a9ea:	78fb      	ldrb	r3, [r7, #3]
    a9ec:	2220      	movs	r2, #32
    a9ee:	409a      	lsls	r2, r3
    a9f0:	7bfb      	ldrb	r3, [r7, #15]
    a9f2:	4611      	mov	r1, r2
    a9f4:	4618      	mov	r0, r3
    a9f6:	4b07      	ldr	r3, [pc, #28]	; (aa14 <_usb_d_dev_ep_stall_set+0x4c>)
    a9f8:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a9fa:	687a      	ldr	r2, [r7, #4]
    a9fc:	7cd3      	ldrb	r3, [r2, #19]
    a9fe:	f043 0308 	orr.w	r3, r3, #8
    aa02:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    aa04:	2300      	movs	r3, #0
}
    aa06:	4618      	mov	r0, r3
    aa08:	3710      	adds	r7, #16
    aa0a:	46bd      	mov	sp, r7
    aa0c:	bd80      	pop	{r7, pc}
    aa0e:	bf00      	nop
    aa10:	00009031 	.word	0x00009031
    aa14:	00008fb1 	.word	0x00008fb1

0000aa18 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    aa18:	b580      	push	{r7, lr}
    aa1a:	b084      	sub	sp, #16
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	6078      	str	r0, [r7, #4]
    aa20:	460b      	mov	r3, r1
    aa22:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    aa24:	687b      	ldr	r3, [r7, #4]
    aa26:	7c9b      	ldrb	r3, [r3, #18]
    aa28:	f003 030f 	and.w	r3, r3, #15
    aa2c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    aa2e:	78fa      	ldrb	r2, [r7, #3]
    aa30:	7bfb      	ldrb	r3, [r7, #15]
    aa32:	4611      	mov	r1, r2
    aa34:	4618      	mov	r0, r3
    aa36:	4b28      	ldr	r3, [pc, #160]	; (aad8 <_usb_d_dev_ep_stall_clr+0xc0>)
    aa38:	4798      	blx	r3
    aa3a:	4603      	mov	r3, r0
    aa3c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    aa3e:	7bbb      	ldrb	r3, [r7, #14]
    aa40:	f083 0301 	eor.w	r3, r3, #1
    aa44:	b2db      	uxtb	r3, r3
    aa46:	2b00      	cmp	r3, #0
    aa48:	d001      	beq.n	aa4e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    aa4a:	2300      	movs	r3, #0
    aa4c:	e040      	b.n	aad0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    aa4e:	78f9      	ldrb	r1, [r7, #3]
    aa50:	7bfb      	ldrb	r3, [r7, #15]
    aa52:	2200      	movs	r2, #0
    aa54:	4618      	mov	r0, r3
    aa56:	4b21      	ldr	r3, [pc, #132]	; (aadc <_usb_d_dev_ep_stall_clr+0xc4>)
    aa58:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    aa5a:	78fb      	ldrb	r3, [r7, #3]
    aa5c:	2220      	movs	r2, #32
    aa5e:	409a      	lsls	r2, r3
    aa60:	7bfb      	ldrb	r3, [r7, #15]
    aa62:	4611      	mov	r1, r2
    aa64:	4618      	mov	r0, r3
    aa66:	4b1e      	ldr	r3, [pc, #120]	; (aae0 <_usb_d_dev_ep_stall_clr+0xc8>)
    aa68:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    aa6a:	78fa      	ldrb	r2, [r7, #3]
    aa6c:	7bfb      	ldrb	r3, [r7, #15]
    aa6e:	4611      	mov	r1, r2
    aa70:	4618      	mov	r0, r3
    aa72:	4b1c      	ldr	r3, [pc, #112]	; (aae4 <_usb_d_dev_ep_stall_clr+0xcc>)
    aa74:	4798      	blx	r3
    aa76:	4603      	mov	r3, r0
    aa78:	2b00      	cmp	r3, #0
    aa7a:	d00b      	beq.n	aa94 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    aa7c:	78fa      	ldrb	r2, [r7, #3]
    aa7e:	7bfb      	ldrb	r3, [r7, #15]
    aa80:	4611      	mov	r1, r2
    aa82:	4618      	mov	r0, r3
    aa84:	4b18      	ldr	r3, [pc, #96]	; (aae8 <_usb_d_dev_ep_stall_clr+0xd0>)
    aa86:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    aa88:	78f9      	ldrb	r1, [r7, #3]
    aa8a:	7bfb      	ldrb	r3, [r7, #15]
    aa8c:	2200      	movs	r2, #0
    aa8e:	4618      	mov	r0, r3
    aa90:	4b16      	ldr	r3, [pc, #88]	; (aaec <_usb_d_dev_ep_stall_clr+0xd4>)
    aa92:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    aa94:	687b      	ldr	r3, [r7, #4]
    aa96:	7cdb      	ldrb	r3, [r3, #19]
    aa98:	f003 0307 	and.w	r3, r3, #7
    aa9c:	b2db      	uxtb	r3, r3
    aa9e:	2b01      	cmp	r3, #1
    aaa0:	d110      	bne.n	aac4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    aaa2:	7bfb      	ldrb	r3, [r7, #15]
    aaa4:	4619      	mov	r1, r3
    aaa6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aaaa:	4b11      	ldr	r3, [pc, #68]	; (aaf0 <_usb_d_dev_ep_stall_clr+0xd8>)
    aaac:	4798      	blx	r3
    aaae:	4603      	mov	r3, r0
    aab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    aab4:	2b00      	cmp	r3, #0
    aab6:	d10a      	bne.n	aace <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    aab8:	687a      	ldr	r2, [r7, #4]
    aaba:	7cd3      	ldrb	r3, [r2, #19]
    aabc:	f36f 03c3 	bfc	r3, #3, #1
    aac0:	74d3      	strb	r3, [r2, #19]
    aac2:	e004      	b.n	aace <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    aac4:	687a      	ldr	r2, [r7, #4]
    aac6:	7cd3      	ldrb	r3, [r2, #19]
    aac8:	f36f 03c3 	bfc	r3, #3, #1
    aacc:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    aace:	2300      	movs	r3, #0
}
    aad0:	4618      	mov	r0, r3
    aad2:	3710      	adds	r7, #16
    aad4:	46bd      	mov	sp, r7
    aad6:	bd80      	pop	{r7, pc}
    aad8:	00009089 	.word	0x00009089
    aadc:	00009031 	.word	0x00009031
    aae0:	00008fd9 	.word	0x00008fd9
    aae4:	000090cd 	.word	0x000090cd
    aae8:	00009111 	.word	0x00009111
    aaec:	000091fd 	.word	0x000091fd
    aaf0:	00008ab9 	.word	0x00008ab9

0000aaf4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    aaf4:	b580      	push	{r7, lr}
    aaf6:	b086      	sub	sp, #24
    aaf8:	af00      	add	r7, sp, #0
    aafa:	4603      	mov	r3, r0
    aafc:	460a      	mov	r2, r1
    aafe:	71fb      	strb	r3, [r7, #7]
    ab00:	4613      	mov	r3, r2
    ab02:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    ab04:	79fb      	ldrb	r3, [r7, #7]
    ab06:	f003 030f 	and.w	r3, r3, #15
    ab0a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ab0c:	79fb      	ldrb	r3, [r7, #7]
    ab0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab12:	2b00      	cmp	r3, #0
    ab14:	bf14      	ite	ne
    ab16:	2301      	movne	r3, #1
    ab18:	2300      	moveq	r3, #0
    ab1a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab1c:	7cba      	ldrb	r2, [r7, #18]
    ab1e:	7cfb      	ldrb	r3, [r7, #19]
    ab20:	4611      	mov	r1, r2
    ab22:	4618      	mov	r0, r3
    ab24:	4b13      	ldr	r3, [pc, #76]	; (ab74 <_usb_d_dev_ep_stall+0x80>)
    ab26:	4798      	blx	r3
    ab28:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab2a:	7cfb      	ldrb	r3, [r7, #19]
    ab2c:	2b04      	cmp	r3, #4
    ab2e:	d902      	bls.n	ab36 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ab30:	f06f 0311 	mvn.w	r3, #17
    ab34:	e01a      	b.n	ab6c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    ab36:	79bb      	ldrb	r3, [r7, #6]
    ab38:	2b01      	cmp	r3, #1
    ab3a:	d106      	bne.n	ab4a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ab3c:	7cbb      	ldrb	r3, [r7, #18]
    ab3e:	4619      	mov	r1, r3
    ab40:	68f8      	ldr	r0, [r7, #12]
    ab42:	4b0d      	ldr	r3, [pc, #52]	; (ab78 <_usb_d_dev_ep_stall+0x84>)
    ab44:	4798      	blx	r3
    ab46:	6178      	str	r0, [r7, #20]
    ab48:	e00f      	b.n	ab6a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ab4a:	79bb      	ldrb	r3, [r7, #6]
    ab4c:	2b00      	cmp	r3, #0
    ab4e:	d106      	bne.n	ab5e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ab50:	7cbb      	ldrb	r3, [r7, #18]
    ab52:	4619      	mov	r1, r3
    ab54:	68f8      	ldr	r0, [r7, #12]
    ab56:	4b09      	ldr	r3, [pc, #36]	; (ab7c <_usb_d_dev_ep_stall+0x88>)
    ab58:	4798      	blx	r3
    ab5a:	6178      	str	r0, [r7, #20]
    ab5c:	e005      	b.n	ab6a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ab5e:	7cbb      	ldrb	r3, [r7, #18]
    ab60:	4619      	mov	r1, r3
    ab62:	68f8      	ldr	r0, [r7, #12]
    ab64:	4b06      	ldr	r3, [pc, #24]	; (ab80 <_usb_d_dev_ep_stall+0x8c>)
    ab66:	4798      	blx	r3
    ab68:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ab6a:	697b      	ldr	r3, [r7, #20]
}
    ab6c:	4618      	mov	r0, r3
    ab6e:	3718      	adds	r7, #24
    ab70:	46bd      	mov	sp, r7
    ab72:	bd80      	pop	{r7, pc}
    ab74:	00009595 	.word	0x00009595
    ab78:	0000a9c9 	.word	0x0000a9c9
    ab7c:	0000aa19 	.word	0x0000aa19
    ab80:	0000a999 	.word	0x0000a999

0000ab84 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b082      	sub	sp, #8
    ab88:	af00      	add	r7, sp, #0
    ab8a:	6078      	str	r0, [r7, #4]
    ab8c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ab8e:	687b      	ldr	r3, [r7, #4]
    ab90:	7c9b      	ldrb	r3, [r3, #18]
    ab92:	2bff      	cmp	r3, #255	; 0xff
    ab94:	d014      	beq.n	abc0 <_usb_d_dev_trans_done+0x3c>
    ab96:	687b      	ldr	r3, [r7, #4]
    ab98:	7cdb      	ldrb	r3, [r3, #19]
    ab9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ab9e:	b2db      	uxtb	r3, r3
    aba0:	2b00      	cmp	r3, #0
    aba2:	d00d      	beq.n	abc0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    aba4:	687a      	ldr	r2, [r7, #4]
    aba6:	7cd3      	ldrb	r3, [r2, #19]
    aba8:	f36f 1386 	bfc	r3, #6, #1
    abac:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    abae:	4b06      	ldr	r3, [pc, #24]	; (abc8 <_usb_d_dev_trans_done+0x44>)
    abb0:	691b      	ldr	r3, [r3, #16]
    abb2:	687a      	ldr	r2, [r7, #4]
    abb4:	7c90      	ldrb	r0, [r2, #18]
    abb6:	687a      	ldr	r2, [r7, #4]
    abb8:	6892      	ldr	r2, [r2, #8]
    abba:	6839      	ldr	r1, [r7, #0]
    abbc:	4798      	blx	r3
    abbe:	e000      	b.n	abc2 <_usb_d_dev_trans_done+0x3e>
		return;
    abc0:	bf00      	nop
}
    abc2:	3708      	adds	r7, #8
    abc4:	46bd      	mov	sp, r7
    abc6:	bd80      	pop	{r7, pc}
    abc8:	20000ea0 	.word	0x20000ea0

0000abcc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    abcc:	b580      	push	{r7, lr}
    abce:	b086      	sub	sp, #24
    abd0:	af00      	add	r7, sp, #0
    abd2:	60f8      	str	r0, [r7, #12]
    abd4:	460b      	mov	r3, r1
    abd6:	607a      	str	r2, [r7, #4]
    abd8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    abda:	68fb      	ldr	r3, [r7, #12]
    abdc:	7c9b      	ldrb	r3, [r3, #18]
    abde:	f003 030f 	and.w	r3, r3, #15
    abe2:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    abe4:	4b1f      	ldr	r3, [pc, #124]	; (ac64 <_usb_d_dev_trans_stop+0x98>)
    abe6:	881b      	ldrh	r3, [r3, #0]
    abe8:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    abea:	68fb      	ldr	r3, [r7, #12]
    abec:	7c9b      	ldrb	r3, [r3, #18]
    abee:	2bff      	cmp	r3, #255	; 0xff
    abf0:	d033      	beq.n	ac5a <_usb_d_dev_trans_stop+0x8e>
    abf2:	68fb      	ldr	r3, [r7, #12]
    abf4:	7cdb      	ldrb	r3, [r3, #19]
    abf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    abfa:	b2db      	uxtb	r3, r3
    abfc:	2b00      	cmp	r3, #0
    abfe:	d02c      	beq.n	ac5a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    ac00:	7afb      	ldrb	r3, [r7, #11]
    ac02:	2b00      	cmp	r3, #0
    ac04:	d006      	beq.n	ac14 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ac06:	7dfb      	ldrb	r3, [r7, #23]
    ac08:	2200      	movs	r2, #0
    ac0a:	2101      	movs	r1, #1
    ac0c:	4618      	mov	r0, r3
    ac0e:	4b16      	ldr	r3, [pc, #88]	; (ac68 <_usb_d_dev_trans_stop+0x9c>)
    ac10:	4798      	blx	r3
    ac12:	e005      	b.n	ac20 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ac14:	7dfb      	ldrb	r3, [r7, #23]
    ac16:	2200      	movs	r2, #0
    ac18:	2100      	movs	r1, #0
    ac1a:	4618      	mov	r0, r3
    ac1c:	4b13      	ldr	r3, [pc, #76]	; (ac6c <_usb_d_dev_trans_stop+0xa0>)
    ac1e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    ac20:	7afb      	ldrb	r3, [r7, #11]
    ac22:	f107 0218 	add.w	r2, r7, #24
    ac26:	4413      	add	r3, r2
    ac28:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ac2c:	461a      	mov	r2, r3
    ac2e:	7dfb      	ldrb	r3, [r7, #23]
    ac30:	4611      	mov	r1, r2
    ac32:	4618      	mov	r0, r3
    ac34:	4b0e      	ldr	r3, [pc, #56]	; (ac70 <_usb_d_dev_trans_stop+0xa4>)
    ac36:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    ac38:	7afb      	ldrb	r3, [r7, #11]
    ac3a:	f107 0218 	add.w	r2, r7, #24
    ac3e:	4413      	add	r3, r2
    ac40:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ac44:	461a      	mov	r2, r3
    ac46:	7dfb      	ldrb	r3, [r7, #23]
    ac48:	4611      	mov	r1, r2
    ac4a:	4618      	mov	r0, r3
    ac4c:	4b09      	ldr	r3, [pc, #36]	; (ac74 <_usb_d_dev_trans_stop+0xa8>)
    ac4e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ac50:	6879      	ldr	r1, [r7, #4]
    ac52:	68f8      	ldr	r0, [r7, #12]
    ac54:	4b08      	ldr	r3, [pc, #32]	; (ac78 <_usb_d_dev_trans_stop+0xac>)
    ac56:	4798      	blx	r3
    ac58:	e000      	b.n	ac5c <_usb_d_dev_trans_stop+0x90>
		return;
    ac5a:	bf00      	nop
}
    ac5c:	3718      	adds	r7, #24
    ac5e:	46bd      	mov	sp, r7
    ac60:	bd80      	pop	{r7, pc}
    ac62:	bf00      	nop
    ac64:	000110c4 	.word	0x000110c4
    ac68:	00009481 	.word	0x00009481
    ac6c:	000094d9 	.word	0x000094d9
    ac70:	00008f89 	.word	0x00008f89
    ac74:	00008fd9 	.word	0x00008fd9
    ac78:	0000ab85 	.word	0x0000ab85

0000ac7c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b086      	sub	sp, #24
    ac80:	af00      	add	r7, sp, #0
    ac82:	4603      	mov	r3, r0
    ac84:	6039      	str	r1, [r7, #0]
    ac86:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    ac88:	79fb      	ldrb	r3, [r7, #7]
    ac8a:	f003 030f 	and.w	r3, r3, #15
    ac8e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ac90:	7dfb      	ldrb	r3, [r7, #23]
    ac92:	015b      	lsls	r3, r3, #5
    ac94:	4a1e      	ldr	r2, [pc, #120]	; (ad10 <_usb_d_dev_ep_read_req+0x94>)
    ac96:	4413      	add	r3, r2
    ac98:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    ac9a:	693b      	ldr	r3, [r7, #16]
    ac9c:	681b      	ldr	r3, [r3, #0]
    ac9e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    aca0:	693b      	ldr	r3, [r7, #16]
    aca2:	685b      	ldr	r3, [r3, #4]
    aca4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aca8:	b29b      	uxth	r3, r3
    acaa:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    acac:	7dfb      	ldrb	r3, [r7, #23]
    acae:	2b04      	cmp	r3, #4
    acb0:	d802      	bhi.n	acb8 <_usb_d_dev_ep_read_req+0x3c>
    acb2:	683b      	ldr	r3, [r7, #0]
    acb4:	2b00      	cmp	r3, #0
    acb6:	d102      	bne.n	acbe <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    acb8:	f06f 0311 	mvn.w	r3, #17
    acbc:	e023      	b.n	ad06 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    acbe:	7dfb      	ldrb	r3, [r7, #23]
    acc0:	4618      	mov	r0, r3
    acc2:	4b14      	ldr	r3, [pc, #80]	; (ad14 <_usb_d_dev_ep_read_req+0x98>)
    acc4:	4798      	blx	r3
    acc6:	4603      	mov	r3, r0
    acc8:	f083 0301 	eor.w	r3, r3, #1
    accc:	b2db      	uxtb	r3, r3
    acce:	2b00      	cmp	r3, #0
    acd0:	d002      	beq.n	acd8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    acd2:	f06f 0312 	mvn.w	r3, #18
    acd6:	e016      	b.n	ad06 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    acd8:	7dfb      	ldrb	r3, [r7, #23]
    acda:	4618      	mov	r0, r3
    acdc:	4b0e      	ldr	r3, [pc, #56]	; (ad18 <_usb_d_dev_ep_read_req+0x9c>)
    acde:	4798      	blx	r3
    ace0:	4603      	mov	r3, r0
    ace2:	f083 0301 	eor.w	r3, r3, #1
    ace6:	b2db      	uxtb	r3, r3
    ace8:	2b00      	cmp	r3, #0
    acea:	d001      	beq.n	acf0 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    acec:	2300      	movs	r3, #0
    acee:	e00a      	b.n	ad06 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    acf0:	68fb      	ldr	r3, [r7, #12]
    acf2:	2208      	movs	r2, #8
    acf4:	4619      	mov	r1, r3
    acf6:	6838      	ldr	r0, [r7, #0]
    acf8:	4b08      	ldr	r3, [pc, #32]	; (ad1c <_usb_d_dev_ep_read_req+0xa0>)
    acfa:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    acfc:	7dfb      	ldrb	r3, [r7, #23]
    acfe:	4618      	mov	r0, r3
    ad00:	4b07      	ldr	r3, [pc, #28]	; (ad20 <_usb_d_dev_ep_read_req+0xa4>)
    ad02:	4798      	blx	r3

	return bytes;
    ad04:	897b      	ldrh	r3, [r7, #10]
}
    ad06:	4618      	mov	r0, r3
    ad08:	3718      	adds	r7, #24
    ad0a:	46bd      	mov	sp, r7
    ad0c:	bd80      	pop	{r7, pc}
    ad0e:	bf00      	nop
    ad10:	20000f68 	.word	0x20000f68
    ad14:	00009001 	.word	0x00009001
    ad18:	000091ad 	.word	0x000091ad
    ad1c:	0000fe11 	.word	0x0000fe11
    ad20:	000091dd 	.word	0x000091dd

0000ad24 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ad24:	b580      	push	{r7, lr}
    ad26:	b086      	sub	sp, #24
    ad28:	af00      	add	r7, sp, #0
    ad2a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ad2c:	687b      	ldr	r3, [r7, #4]
    ad2e:	7a1b      	ldrb	r3, [r3, #8]
    ad30:	f003 030f 	and.w	r3, r3, #15
    ad34:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ad36:	687b      	ldr	r3, [r7, #4]
    ad38:	7a1b      	ldrb	r3, [r3, #8]
    ad3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad3e:	2b00      	cmp	r3, #0
    ad40:	bf14      	ite	ne
    ad42:	2301      	movne	r3, #1
    ad44:	2300      	moveq	r3, #0
    ad46:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad48:	7d7a      	ldrb	r2, [r7, #21]
    ad4a:	7dbb      	ldrb	r3, [r7, #22]
    ad4c:	4611      	mov	r1, r2
    ad4e:	4618      	mov	r0, r3
    ad50:	4b5f      	ldr	r3, [pc, #380]	; (aed0 <_usb_d_dev_ep_trans+0x1ac>)
    ad52:	4798      	blx	r3
    ad54:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ad56:	693b      	ldr	r3, [r7, #16]
    ad58:	8a1b      	ldrh	r3, [r3, #16]
    ad5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ad5e:	4293      	cmp	r3, r2
    ad60:	d004      	beq.n	ad6c <_usb_d_dev_ep_trans+0x48>
    ad62:	693b      	ldr	r3, [r7, #16]
    ad64:	8a1b      	ldrh	r3, [r3, #16]
    ad66:	3b01      	subs	r3, #1
    ad68:	b29b      	uxth	r3, r3
    ad6a:	e001      	b.n	ad70 <_usb_d_dev_ep_trans+0x4c>
    ad6c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ad70:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ad72:	687b      	ldr	r3, [r7, #4]
    ad74:	685a      	ldr	r2, [r3, #4]
    ad76:	89fb      	ldrh	r3, [r7, #14]
    ad78:	4013      	ands	r3, r2
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	bf14      	ite	ne
    ad7e:	2301      	movne	r3, #1
    ad80:	2300      	moveq	r3, #0
    ad82:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ad84:	2300      	movs	r3, #0
    ad86:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ad88:	7dbb      	ldrb	r3, [r7, #22]
    ad8a:	2b04      	cmp	r3, #4
    ad8c:	d902      	bls.n	ad94 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    ad8e:	f06f 0311 	mvn.w	r3, #17
    ad92:	e098      	b.n	aec6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ad94:	687b      	ldr	r3, [r7, #4]
    ad96:	681b      	ldr	r3, [r3, #0]
    ad98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ad9c:	d31a      	bcc.n	add4 <_usb_d_dev_ep_trans+0xb0>
    ad9e:	687b      	ldr	r3, [r7, #4]
    ada0:	681b      	ldr	r3, [r3, #0]
    ada2:	461a      	mov	r2, r3
    ada4:	687b      	ldr	r3, [r7, #4]
    ada6:	685b      	ldr	r3, [r3, #4]
    ada8:	4413      	add	r3, r2
    adaa:	4a4a      	ldr	r2, [pc, #296]	; (aed4 <_usb_d_dev_ep_trans+0x1b0>)
    adac:	4293      	cmp	r3, r2
    adae:	d811      	bhi.n	add4 <_usb_d_dev_ep_trans+0xb0>
    adb0:	687b      	ldr	r3, [r7, #4]
    adb2:	681b      	ldr	r3, [r3, #0]
    adb4:	f003 0303 	and.w	r3, r3, #3
    adb8:	2b00      	cmp	r3, #0
    adba:	d10b      	bne.n	add4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    adbc:	7d7b      	ldrb	r3, [r7, #21]
    adbe:	f083 0301 	eor.w	r3, r3, #1
    adc2:	b2db      	uxtb	r3, r3
    adc4:	2b00      	cmp	r3, #0
    adc6:	d00e      	beq.n	ade6 <_usb_d_dev_ep_trans+0xc2>
    adc8:	687b      	ldr	r3, [r7, #4]
    adca:	685b      	ldr	r3, [r3, #4]
    adcc:	693a      	ldr	r2, [r7, #16]
    adce:	8a12      	ldrh	r2, [r2, #16]
    add0:	4293      	cmp	r3, r2
    add2:	d208      	bcs.n	ade6 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    add4:	693b      	ldr	r3, [r7, #16]
    add6:	68db      	ldr	r3, [r3, #12]
    add8:	2b00      	cmp	r3, #0
    adda:	d102      	bne.n	ade2 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    addc:	f06f 0312 	mvn.w	r3, #18
    ade0:	e071      	b.n	aec6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    ade2:	2301      	movs	r3, #1
    ade4:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    ade6:	7d7b      	ldrb	r3, [r7, #21]
    ade8:	f083 0301 	eor.w	r3, r3, #1
    adec:	b2db      	uxtb	r3, r3
    adee:	2b00      	cmp	r3, #0
    adf0:	d009      	beq.n	ae06 <_usb_d_dev_ep_trans+0xe2>
    adf2:	7b7b      	ldrb	r3, [r7, #13]
    adf4:	2b00      	cmp	r3, #0
    adf6:	d006      	beq.n	ae06 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    adf8:	693b      	ldr	r3, [r7, #16]
    adfa:	68db      	ldr	r3, [r3, #12]
    adfc:	2b00      	cmp	r3, #0
    adfe:	d102      	bne.n	ae06 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ae00:	f06f 0311 	mvn.w	r3, #17
    ae04:	e05f      	b.n	aec6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ae06:	693b      	ldr	r3, [r7, #16]
    ae08:	7cdb      	ldrb	r3, [r3, #19]
    ae0a:	f003 0308 	and.w	r3, r3, #8
    ae0e:	b2db      	uxtb	r3, r3
    ae10:	2b00      	cmp	r3, #0
    ae12:	d001      	beq.n	ae18 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ae14:	2302      	movs	r3, #2
    ae16:	e056      	b.n	aec6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ae18:	f107 0308 	add.w	r3, r7, #8
    ae1c:	4618      	mov	r0, r3
    ae1e:	4b2e      	ldr	r3, [pc, #184]	; (aed8 <_usb_d_dev_ep_trans+0x1b4>)
    ae20:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ae22:	693b      	ldr	r3, [r7, #16]
    ae24:	7cdb      	ldrb	r3, [r3, #19]
    ae26:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ae2a:	b2db      	uxtb	r3, r3
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d006      	beq.n	ae3e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ae30:	f107 0308 	add.w	r3, r7, #8
    ae34:	4618      	mov	r0, r3
    ae36:	4b29      	ldr	r3, [pc, #164]	; (aedc <_usb_d_dev_ep_trans+0x1b8>)
    ae38:	4798      	blx	r3
		return USB_BUSY;
    ae3a:	2301      	movs	r3, #1
    ae3c:	e043      	b.n	aec6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ae3e:	693a      	ldr	r2, [r7, #16]
    ae40:	7cd3      	ldrb	r3, [r2, #19]
    ae42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae46:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ae48:	f107 0308 	add.w	r3, r7, #8
    ae4c:	4618      	mov	r0, r3
    ae4e:	4b23      	ldr	r3, [pc, #140]	; (aedc <_usb_d_dev_ep_trans+0x1b8>)
    ae50:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ae52:	687b      	ldr	r3, [r7, #4]
    ae54:	681a      	ldr	r2, [r3, #0]
    ae56:	693b      	ldr	r3, [r7, #16]
    ae58:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    ae5a:	687b      	ldr	r3, [r7, #4]
    ae5c:	685a      	ldr	r2, [r3, #4]
    ae5e:	693b      	ldr	r3, [r7, #16]
    ae60:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    ae62:	693b      	ldr	r3, [r7, #16]
    ae64:	2200      	movs	r2, #0
    ae66:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    ae68:	693a      	ldr	r2, [r7, #16]
    ae6a:	7cd3      	ldrb	r3, [r2, #19]
    ae6c:	7d79      	ldrb	r1, [r7, #21]
    ae6e:	f361 13c7 	bfi	r3, r1, #7, #1
    ae72:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    ae74:	693a      	ldr	r2, [r7, #16]
    ae76:	7cd3      	ldrb	r3, [r2, #19]
    ae78:	7df9      	ldrb	r1, [r7, #23]
    ae7a:	f361 1345 	bfi	r3, r1, #5, #1
    ae7e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ae80:	687b      	ldr	r3, [r7, #4]
    ae82:	7a5b      	ldrb	r3, [r3, #9]
    ae84:	2b00      	cmp	r3, #0
    ae86:	d007      	beq.n	ae98 <_usb_d_dev_ep_trans+0x174>
    ae88:	7b7b      	ldrb	r3, [r7, #13]
    ae8a:	f083 0301 	eor.w	r3, r3, #1
    ae8e:	b2db      	uxtb	r3, r3
    ae90:	2b00      	cmp	r3, #0
    ae92:	d001      	beq.n	ae98 <_usb_d_dev_ep_trans+0x174>
    ae94:	2301      	movs	r3, #1
    ae96:	e000      	b.n	ae9a <_usb_d_dev_ep_trans+0x176>
    ae98:	2300      	movs	r3, #0
    ae9a:	b2db      	uxtb	r3, r3
    ae9c:	f003 0301 	and.w	r3, r3, #1
    aea0:	b2d9      	uxtb	r1, r3
    aea2:	693a      	ldr	r2, [r7, #16]
    aea4:	7cd3      	ldrb	r3, [r2, #19]
    aea6:	f361 1304 	bfi	r3, r1, #4, #1
    aeaa:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    aeac:	7d7b      	ldrb	r3, [r7, #21]
    aeae:	2b00      	cmp	r3, #0
    aeb0:	d004      	beq.n	aebc <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    aeb2:	2100      	movs	r1, #0
    aeb4:	6938      	ldr	r0, [r7, #16]
    aeb6:	4b0a      	ldr	r3, [pc, #40]	; (aee0 <_usb_d_dev_ep_trans+0x1bc>)
    aeb8:	4798      	blx	r3
    aeba:	e003      	b.n	aec4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    aebc:	2100      	movs	r1, #0
    aebe:	6938      	ldr	r0, [r7, #16]
    aec0:	4b08      	ldr	r3, [pc, #32]	; (aee4 <_usb_d_dev_ep_trans+0x1c0>)
    aec2:	4798      	blx	r3
	}

	return ERR_NONE;
    aec4:	2300      	movs	r3, #0
}
    aec6:	4618      	mov	r0, r3
    aec8:	3718      	adds	r7, #24
    aeca:	46bd      	mov	sp, r7
    aecc:	bd80      	pop	{r7, pc}
    aece:	bf00      	nop
    aed0:	00009595 	.word	0x00009595
    aed4:	20041fff 	.word	0x20041fff
    aed8:	00002479 	.word	0x00002479
    aedc:	0000249f 	.word	0x0000249f
    aee0:	0000985d 	.word	0x0000985d
    aee4:	00009a75 	.word	0x00009a75

0000aee8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    aee8:	b580      	push	{r7, lr}
    aeea:	b084      	sub	sp, #16
    aeec:	af00      	add	r7, sp, #0
    aeee:	4603      	mov	r3, r0
    aef0:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    aef2:	79fb      	ldrb	r3, [r7, #7]
    aef4:	f003 030f 	and.w	r3, r3, #15
    aef8:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    aefa:	79fb      	ldrb	r3, [r7, #7]
    aefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af00:	2b00      	cmp	r3, #0
    af02:	bf14      	ite	ne
    af04:	2301      	movne	r3, #1
    af06:	2300      	moveq	r3, #0
    af08:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    af0a:	7bba      	ldrb	r2, [r7, #14]
    af0c:	7bfb      	ldrb	r3, [r7, #15]
    af0e:	4611      	mov	r1, r2
    af10:	4618      	mov	r0, r3
    af12:	4b08      	ldr	r3, [pc, #32]	; (af34 <_usb_d_dev_ep_abort+0x4c>)
    af14:	4798      	blx	r3
    af16:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    af18:	7bfb      	ldrb	r3, [r7, #15]
    af1a:	2b04      	cmp	r3, #4
    af1c:	d806      	bhi.n	af2c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    af1e:	7bbb      	ldrb	r3, [r7, #14]
    af20:	2202      	movs	r2, #2
    af22:	4619      	mov	r1, r3
    af24:	68b8      	ldr	r0, [r7, #8]
    af26:	4b04      	ldr	r3, [pc, #16]	; (af38 <_usb_d_dev_ep_abort+0x50>)
    af28:	4798      	blx	r3
    af2a:	e000      	b.n	af2e <_usb_d_dev_ep_abort+0x46>
		return;
    af2c:	bf00      	nop
}
    af2e:	3710      	adds	r7, #16
    af30:	46bd      	mov	sp, r7
    af32:	bd80      	pop	{r7, pc}
    af34:	00009595 	.word	0x00009595
    af38:	0000abcd 	.word	0x0000abcd

0000af3c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    af3c:	b480      	push	{r7}
    af3e:	b085      	sub	sp, #20
    af40:	af00      	add	r7, sp, #0
    af42:	4603      	mov	r3, r0
    af44:	6039      	str	r1, [r7, #0]
    af46:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    af48:	683b      	ldr	r3, [r7, #0]
    af4a:	2b00      	cmp	r3, #0
    af4c:	d001      	beq.n	af52 <_usb_d_dev_register_callback+0x16>
    af4e:	683b      	ldr	r3, [r7, #0]
    af50:	e000      	b.n	af54 <_usb_d_dev_register_callback+0x18>
    af52:	4b0a      	ldr	r3, [pc, #40]	; (af7c <_usb_d_dev_register_callback+0x40>)
    af54:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    af56:	79fb      	ldrb	r3, [r7, #7]
    af58:	2b01      	cmp	r3, #1
    af5a:	d103      	bne.n	af64 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    af5c:	4a08      	ldr	r2, [pc, #32]	; (af80 <_usb_d_dev_register_callback+0x44>)
    af5e:	68fb      	ldr	r3, [r7, #12]
    af60:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    af62:	e005      	b.n	af70 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    af64:	79fb      	ldrb	r3, [r7, #7]
    af66:	2b00      	cmp	r3, #0
    af68:	d102      	bne.n	af70 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    af6a:	4a05      	ldr	r2, [pc, #20]	; (af80 <_usb_d_dev_register_callback+0x44>)
    af6c:	68fb      	ldr	r3, [r7, #12]
    af6e:	6013      	str	r3, [r2, #0]
}
    af70:	bf00      	nop
    af72:	3714      	adds	r7, #20
    af74:	46bd      	mov	sp, r7
    af76:	f85d 7b04 	ldr.w	r7, [sp], #4
    af7a:	4770      	bx	lr
    af7c:	00008e1d 	.word	0x00008e1d
    af80:	20000ea0 	.word	0x20000ea0

0000af84 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    af84:	b480      	push	{r7}
    af86:	b085      	sub	sp, #20
    af88:	af00      	add	r7, sp, #0
    af8a:	4603      	mov	r3, r0
    af8c:	6039      	str	r1, [r7, #0]
    af8e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    af90:	683b      	ldr	r3, [r7, #0]
    af92:	2b00      	cmp	r3, #0
    af94:	d001      	beq.n	af9a <_usb_d_dev_register_ep_callback+0x16>
    af96:	683b      	ldr	r3, [r7, #0]
    af98:	e000      	b.n	af9c <_usb_d_dev_register_ep_callback+0x18>
    af9a:	4b0e      	ldr	r3, [pc, #56]	; (afd4 <_usb_d_dev_register_ep_callback+0x50>)
    af9c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    af9e:	79fb      	ldrb	r3, [r7, #7]
    afa0:	2b00      	cmp	r3, #0
    afa2:	d103      	bne.n	afac <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    afa4:	4a0c      	ldr	r2, [pc, #48]	; (afd8 <_usb_d_dev_register_ep_callback+0x54>)
    afa6:	68fb      	ldr	r3, [r7, #12]
    afa8:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    afaa:	e00c      	b.n	afc6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    afac:	79fb      	ldrb	r3, [r7, #7]
    afae:	2b01      	cmp	r3, #1
    afb0:	d103      	bne.n	afba <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    afb2:	4a09      	ldr	r2, [pc, #36]	; (afd8 <_usb_d_dev_register_ep_callback+0x54>)
    afb4:	68fb      	ldr	r3, [r7, #12]
    afb6:	60d3      	str	r3, [r2, #12]
}
    afb8:	e005      	b.n	afc6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    afba:	79fb      	ldrb	r3, [r7, #7]
    afbc:	2b02      	cmp	r3, #2
    afbe:	d102      	bne.n	afc6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    afc0:	4a05      	ldr	r2, [pc, #20]	; (afd8 <_usb_d_dev_register_ep_callback+0x54>)
    afc2:	68fb      	ldr	r3, [r7, #12]
    afc4:	6113      	str	r3, [r2, #16]
}
    afc6:	bf00      	nop
    afc8:	3714      	adds	r7, #20
    afca:	46bd      	mov	sp, r7
    afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    afd0:	4770      	bx	lr
    afd2:	bf00      	nop
    afd4:	00008e1d 	.word	0x00008e1d
    afd8:	20000ea0 	.word	0x20000ea0

0000afdc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    afdc:	b580      	push	{r7, lr}
    afde:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    afe0:	4b01      	ldr	r3, [pc, #4]	; (afe8 <USB_0_Handler+0xc>)
    afe2:	4798      	blx	r3
}
    afe4:	bf00      	nop
    afe6:	bd80      	pop	{r7, pc}
    afe8:	0000a24d 	.word	0x0000a24d

0000afec <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    afec:	b580      	push	{r7, lr}
    afee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aff0:	4b01      	ldr	r3, [pc, #4]	; (aff8 <USB_1_Handler+0xc>)
    aff2:	4798      	blx	r3
}
    aff4:	bf00      	nop
    aff6:	bd80      	pop	{r7, pc}
    aff8:	0000a24d 	.word	0x0000a24d

0000affc <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    affc:	b580      	push	{r7, lr}
    affe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b000:	4b01      	ldr	r3, [pc, #4]	; (b008 <USB_2_Handler+0xc>)
    b002:	4798      	blx	r3
}
    b004:	bf00      	nop
    b006:	bd80      	pop	{r7, pc}
    b008:	0000a24d 	.word	0x0000a24d

0000b00c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b00c:	b580      	push	{r7, lr}
    b00e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b010:	4b01      	ldr	r3, [pc, #4]	; (b018 <USB_3_Handler+0xc>)
    b012:	4798      	blx	r3
}
    b014:	bf00      	nop
    b016:	bd80      	pop	{r7, pc}
    b018:	0000a24d 	.word	0x0000a24d

0000b01c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b01c:	b480      	push	{r7}
    b01e:	b083      	sub	sp, #12
    b020:	af00      	add	r7, sp, #0
    b022:	6078      	str	r0, [r7, #4]
    b024:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b026:	bf00      	nop
    b028:	687b      	ldr	r3, [r7, #4]
    b02a:	689a      	ldr	r2, [r3, #8]
    b02c:	683b      	ldr	r3, [r7, #0]
    b02e:	4013      	ands	r3, r2
    b030:	2b00      	cmp	r3, #0
    b032:	d1f9      	bne.n	b028 <hri_wdt_wait_for_sync+0xc>
	};
}
    b034:	bf00      	nop
    b036:	370c      	adds	r7, #12
    b038:	46bd      	mov	sp, r7
    b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b03e:	4770      	bx	lr

0000b040 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b040:	b580      	push	{r7, lr}
    b042:	b084      	sub	sp, #16
    b044:	af00      	add	r7, sp, #0
    b046:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b048:	210e      	movs	r1, #14
    b04a:	6878      	ldr	r0, [r7, #4]
    b04c:	4b0a      	ldr	r3, [pc, #40]	; (b078 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b04e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b050:	687b      	ldr	r3, [r7, #4]
    b052:	781b      	ldrb	r3, [r3, #0]
    b054:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b056:	7bfb      	ldrb	r3, [r7, #15]
    b058:	085b      	lsrs	r3, r3, #1
    b05a:	b2db      	uxtb	r3, r3
    b05c:	f003 0301 	and.w	r3, r3, #1
    b060:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b062:	7bfb      	ldrb	r3, [r7, #15]
    b064:	2b00      	cmp	r3, #0
    b066:	bf14      	ite	ne
    b068:	2301      	movne	r3, #1
    b06a:	2300      	moveq	r3, #0
    b06c:	b2db      	uxtb	r3, r3
}
    b06e:	4618      	mov	r0, r3
    b070:	3710      	adds	r7, #16
    b072:	46bd      	mov	sp, r7
    b074:	bd80      	pop	{r7, pc}
    b076:	bf00      	nop
    b078:	0000b01d 	.word	0x0000b01d

0000b07c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b082      	sub	sp, #8
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	b2db      	uxtb	r3, r3
    b08a:	f023 0304 	bic.w	r3, r3, #4
    b08e:	b2da      	uxtb	r2, r3
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b094:	210e      	movs	r1, #14
    b096:	6878      	ldr	r0, [r7, #4]
    b098:	4b02      	ldr	r3, [pc, #8]	; (b0a4 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b09a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b09c:	bf00      	nop
    b09e:	3708      	adds	r7, #8
    b0a0:	46bd      	mov	sp, r7
    b0a2:	bd80      	pop	{r7, pc}
    b0a4:	0000b01d 	.word	0x0000b01d

0000b0a8 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b0a8:	b580      	push	{r7, lr}
    b0aa:	b084      	sub	sp, #16
    b0ac:	af00      	add	r7, sp, #0
    b0ae:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b0b0:	210e      	movs	r1, #14
    b0b2:	6878      	ldr	r0, [r7, #4]
    b0b4:	4b08      	ldr	r3, [pc, #32]	; (b0d8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b0b6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	781b      	ldrb	r3, [r3, #0]
    b0bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b0be:	7bfb      	ldrb	r3, [r7, #15]
    b0c0:	09db      	lsrs	r3, r3, #7
    b0c2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b0c4:	7bfb      	ldrb	r3, [r7, #15]
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	bf14      	ite	ne
    b0ca:	2301      	movne	r3, #1
    b0cc:	2300      	moveq	r3, #0
    b0ce:	b2db      	uxtb	r3, r3
}
    b0d0:	4618      	mov	r0, r3
    b0d2:	3710      	adds	r7, #16
    b0d4:	46bd      	mov	sp, r7
    b0d6:	bd80      	pop	{r7, pc}
    b0d8:	0000b01d 	.word	0x0000b01d

0000b0dc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b0dc:	b480      	push	{r7}
    b0de:	b085      	sub	sp, #20
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	6078      	str	r0, [r7, #4]
    b0e4:	460b      	mov	r3, r1
    b0e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	785b      	ldrb	r3, [r3, #1]
    b0ec:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b0ee:	7bfb      	ldrb	r3, [r7, #15]
    b0f0:	f023 030f 	bic.w	r3, r3, #15
    b0f4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b0f6:	78fb      	ldrb	r3, [r7, #3]
    b0f8:	f003 030f 	and.w	r3, r3, #15
    b0fc:	b2da      	uxtb	r2, r3
    b0fe:	7bfb      	ldrb	r3, [r7, #15]
    b100:	4313      	orrs	r3, r2
    b102:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b104:	687b      	ldr	r3, [r7, #4]
    b106:	7bfa      	ldrb	r2, [r7, #15]
    b108:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b10a:	bf00      	nop
    b10c:	3714      	adds	r7, #20
    b10e:	46bd      	mov	sp, r7
    b110:	f85d 7b04 	ldr.w	r7, [sp], #4
    b114:	4770      	bx	lr
	...

0000b118 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b118:	b580      	push	{r7, lr}
    b11a:	b082      	sub	sp, #8
    b11c:	af00      	add	r7, sp, #0
    b11e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b120:	687b      	ldr	r3, [r7, #4]
    b122:	2b00      	cmp	r3, #0
    b124:	d005      	beq.n	b132 <_wdt_init+0x1a>
    b126:	687b      	ldr	r3, [r7, #4]
    b128:	681b      	ldr	r3, [r3, #0]
    b12a:	2b00      	cmp	r3, #0
    b12c:	d001      	beq.n	b132 <_wdt_init+0x1a>
    b12e:	2301      	movs	r3, #1
    b130:	e000      	b.n	b134 <_wdt_init+0x1c>
    b132:	2300      	movs	r3, #0
    b134:	f003 0301 	and.w	r3, r3, #1
    b138:	b2db      	uxtb	r3, r3
    b13a:	2250      	movs	r2, #80	; 0x50
    b13c:	4913      	ldr	r1, [pc, #76]	; (b18c <_wdt_init+0x74>)
    b13e:	4618      	mov	r0, r3
    b140:	4b13      	ldr	r3, [pc, #76]	; (b190 <_wdt_init+0x78>)
    b142:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b144:	687b      	ldr	r3, [r7, #4]
    b146:	681b      	ldr	r3, [r3, #0]
    b148:	4618      	mov	r0, r3
    b14a:	4b12      	ldr	r3, [pc, #72]	; (b194 <_wdt_init+0x7c>)
    b14c:	4798      	blx	r3
    b14e:	4603      	mov	r3, r0
    b150:	2b00      	cmp	r3, #0
    b152:	d107      	bne.n	b164 <_wdt_init+0x4c>
    b154:	687b      	ldr	r3, [r7, #4]
    b156:	681b      	ldr	r3, [r3, #0]
    b158:	4618      	mov	r0, r3
    b15a:	4b0f      	ldr	r3, [pc, #60]	; (b198 <_wdt_init+0x80>)
    b15c:	4798      	blx	r3
    b15e:	4603      	mov	r3, r0
    b160:	2b00      	cmp	r3, #0
    b162:	d002      	beq.n	b16a <_wdt_init+0x52>
		return ERR_DENIED;
    b164:	f06f 0310 	mvn.w	r3, #16
    b168:	e00b      	b.n	b182 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b16a:	687b      	ldr	r3, [r7, #4]
    b16c:	681b      	ldr	r3, [r3, #0]
    b16e:	4618      	mov	r0, r3
    b170:	4b0a      	ldr	r3, [pc, #40]	; (b19c <_wdt_init+0x84>)
    b172:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	681b      	ldr	r3, [r3, #0]
    b178:	210b      	movs	r1, #11
    b17a:	4618      	mov	r0, r3
    b17c:	4b08      	ldr	r3, [pc, #32]	; (b1a0 <_wdt_init+0x88>)
    b17e:	4798      	blx	r3
	}

	return ERR_NONE;
    b180:	2300      	movs	r3, #0
}
    b182:	4618      	mov	r0, r3
    b184:	3708      	adds	r7, #8
    b186:	46bd      	mov	sp, r7
    b188:	bd80      	pop	{r7, pc}
    b18a:	bf00      	nop
    b18c:	000110c8 	.word	0x000110c8
    b190:	00003c61 	.word	0x00003c61
    b194:	0000b0a9 	.word	0x0000b0a9
    b198:	0000b041 	.word	0x0000b041
    b19c:	0000b07d 	.word	0x0000b07d
    b1a0:	0000b0dd 	.word	0x0000b0dd

0000b1a4 <hri_port_set_DIR_reg>:
{
    b1a4:	b480      	push	{r7}
    b1a6:	b085      	sub	sp, #20
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	60f8      	str	r0, [r7, #12]
    b1ac:	460b      	mov	r3, r1
    b1ae:	607a      	str	r2, [r7, #4]
    b1b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b1b2:	7afb      	ldrb	r3, [r7, #11]
    b1b4:	68fa      	ldr	r2, [r7, #12]
    b1b6:	01db      	lsls	r3, r3, #7
    b1b8:	4413      	add	r3, r2
    b1ba:	3308      	adds	r3, #8
    b1bc:	687a      	ldr	r2, [r7, #4]
    b1be:	601a      	str	r2, [r3, #0]
}
    b1c0:	bf00      	nop
    b1c2:	3714      	adds	r7, #20
    b1c4:	46bd      	mov	sp, r7
    b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ca:	4770      	bx	lr

0000b1cc <hri_port_clear_DIR_reg>:
{
    b1cc:	b480      	push	{r7}
    b1ce:	b085      	sub	sp, #20
    b1d0:	af00      	add	r7, sp, #0
    b1d2:	60f8      	str	r0, [r7, #12]
    b1d4:	460b      	mov	r3, r1
    b1d6:	607a      	str	r2, [r7, #4]
    b1d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b1da:	7afb      	ldrb	r3, [r7, #11]
    b1dc:	68fa      	ldr	r2, [r7, #12]
    b1de:	01db      	lsls	r3, r3, #7
    b1e0:	4413      	add	r3, r2
    b1e2:	3304      	adds	r3, #4
    b1e4:	687a      	ldr	r2, [r7, #4]
    b1e6:	601a      	str	r2, [r3, #0]
}
    b1e8:	bf00      	nop
    b1ea:	3714      	adds	r7, #20
    b1ec:	46bd      	mov	sp, r7
    b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1f2:	4770      	bx	lr

0000b1f4 <hri_port_set_OUT_reg>:
{
    b1f4:	b480      	push	{r7}
    b1f6:	b085      	sub	sp, #20
    b1f8:	af00      	add	r7, sp, #0
    b1fa:	60f8      	str	r0, [r7, #12]
    b1fc:	460b      	mov	r3, r1
    b1fe:	607a      	str	r2, [r7, #4]
    b200:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b202:	7afb      	ldrb	r3, [r7, #11]
    b204:	68fa      	ldr	r2, [r7, #12]
    b206:	01db      	lsls	r3, r3, #7
    b208:	4413      	add	r3, r2
    b20a:	3318      	adds	r3, #24
    b20c:	687a      	ldr	r2, [r7, #4]
    b20e:	601a      	str	r2, [r3, #0]
}
    b210:	bf00      	nop
    b212:	3714      	adds	r7, #20
    b214:	46bd      	mov	sp, r7
    b216:	f85d 7b04 	ldr.w	r7, [sp], #4
    b21a:	4770      	bx	lr

0000b21c <hri_port_clear_OUT_reg>:
{
    b21c:	b480      	push	{r7}
    b21e:	b085      	sub	sp, #20
    b220:	af00      	add	r7, sp, #0
    b222:	60f8      	str	r0, [r7, #12]
    b224:	460b      	mov	r3, r1
    b226:	607a      	str	r2, [r7, #4]
    b228:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b22a:	7afb      	ldrb	r3, [r7, #11]
    b22c:	68fa      	ldr	r2, [r7, #12]
    b22e:	01db      	lsls	r3, r3, #7
    b230:	4413      	add	r3, r2
    b232:	3314      	adds	r3, #20
    b234:	687a      	ldr	r2, [r7, #4]
    b236:	601a      	str	r2, [r3, #0]
}
    b238:	bf00      	nop
    b23a:	3714      	adds	r7, #20
    b23c:	46bd      	mov	sp, r7
    b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b242:	4770      	bx	lr

0000b244 <hri_port_write_PMUX_PMUXE_bf>:
{
    b244:	b480      	push	{r7}
    b246:	b085      	sub	sp, #20
    b248:	af00      	add	r7, sp, #0
    b24a:	6078      	str	r0, [r7, #4]
    b24c:	4608      	mov	r0, r1
    b24e:	4611      	mov	r1, r2
    b250:	461a      	mov	r2, r3
    b252:	4603      	mov	r3, r0
    b254:	70fb      	strb	r3, [r7, #3]
    b256:	460b      	mov	r3, r1
    b258:	70bb      	strb	r3, [r7, #2]
    b25a:	4613      	mov	r3, r2
    b25c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b25e:	78fa      	ldrb	r2, [r7, #3]
    b260:	78bb      	ldrb	r3, [r7, #2]
    b262:	6879      	ldr	r1, [r7, #4]
    b264:	01d2      	lsls	r2, r2, #7
    b266:	440a      	add	r2, r1
    b268:	4413      	add	r3, r2
    b26a:	3330      	adds	r3, #48	; 0x30
    b26c:	781b      	ldrb	r3, [r3, #0]
    b26e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b270:	7bfb      	ldrb	r3, [r7, #15]
    b272:	f023 030f 	bic.w	r3, r3, #15
    b276:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b278:	787b      	ldrb	r3, [r7, #1]
    b27a:	f003 030f 	and.w	r3, r3, #15
    b27e:	b2da      	uxtb	r2, r3
    b280:	7bfb      	ldrb	r3, [r7, #15]
    b282:	4313      	orrs	r3, r2
    b284:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b286:	78fa      	ldrb	r2, [r7, #3]
    b288:	78bb      	ldrb	r3, [r7, #2]
    b28a:	6879      	ldr	r1, [r7, #4]
    b28c:	01d2      	lsls	r2, r2, #7
    b28e:	440a      	add	r2, r1
    b290:	4413      	add	r3, r2
    b292:	3330      	adds	r3, #48	; 0x30
    b294:	7bfa      	ldrb	r2, [r7, #15]
    b296:	701a      	strb	r2, [r3, #0]
}
    b298:	bf00      	nop
    b29a:	3714      	adds	r7, #20
    b29c:	46bd      	mov	sp, r7
    b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2a2:	4770      	bx	lr

0000b2a4 <hri_port_write_PMUX_PMUXO_bf>:
{
    b2a4:	b480      	push	{r7}
    b2a6:	b085      	sub	sp, #20
    b2a8:	af00      	add	r7, sp, #0
    b2aa:	6078      	str	r0, [r7, #4]
    b2ac:	4608      	mov	r0, r1
    b2ae:	4611      	mov	r1, r2
    b2b0:	461a      	mov	r2, r3
    b2b2:	4603      	mov	r3, r0
    b2b4:	70fb      	strb	r3, [r7, #3]
    b2b6:	460b      	mov	r3, r1
    b2b8:	70bb      	strb	r3, [r7, #2]
    b2ba:	4613      	mov	r3, r2
    b2bc:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b2be:	78fa      	ldrb	r2, [r7, #3]
    b2c0:	78bb      	ldrb	r3, [r7, #2]
    b2c2:	6879      	ldr	r1, [r7, #4]
    b2c4:	01d2      	lsls	r2, r2, #7
    b2c6:	440a      	add	r2, r1
    b2c8:	4413      	add	r3, r2
    b2ca:	3330      	adds	r3, #48	; 0x30
    b2cc:	781b      	ldrb	r3, [r3, #0]
    b2ce:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b2d0:	7bfb      	ldrb	r3, [r7, #15]
    b2d2:	f003 030f 	and.w	r3, r3, #15
    b2d6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b2d8:	787b      	ldrb	r3, [r7, #1]
    b2da:	011b      	lsls	r3, r3, #4
    b2dc:	b2da      	uxtb	r2, r3
    b2de:	7bfb      	ldrb	r3, [r7, #15]
    b2e0:	4313      	orrs	r3, r2
    b2e2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b2e4:	78fa      	ldrb	r2, [r7, #3]
    b2e6:	78bb      	ldrb	r3, [r7, #2]
    b2e8:	6879      	ldr	r1, [r7, #4]
    b2ea:	01d2      	lsls	r2, r2, #7
    b2ec:	440a      	add	r2, r1
    b2ee:	4413      	add	r3, r2
    b2f0:	3330      	adds	r3, #48	; 0x30
    b2f2:	7bfa      	ldrb	r2, [r7, #15]
    b2f4:	701a      	strb	r2, [r3, #0]
}
    b2f6:	bf00      	nop
    b2f8:	3714      	adds	r7, #20
    b2fa:	46bd      	mov	sp, r7
    b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b300:	4770      	bx	lr

0000b302 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b302:	b480      	push	{r7}
    b304:	b085      	sub	sp, #20
    b306:	af00      	add	r7, sp, #0
    b308:	6078      	str	r0, [r7, #4]
    b30a:	4608      	mov	r0, r1
    b30c:	4611      	mov	r1, r2
    b30e:	461a      	mov	r2, r3
    b310:	4603      	mov	r3, r0
    b312:	70fb      	strb	r3, [r7, #3]
    b314:	460b      	mov	r3, r1
    b316:	70bb      	strb	r3, [r7, #2]
    b318:	4613      	mov	r3, r2
    b31a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b31c:	78fa      	ldrb	r2, [r7, #3]
    b31e:	78bb      	ldrb	r3, [r7, #2]
    b320:	6879      	ldr	r1, [r7, #4]
    b322:	01d2      	lsls	r2, r2, #7
    b324:	440a      	add	r2, r1
    b326:	4413      	add	r3, r2
    b328:	3340      	adds	r3, #64	; 0x40
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b32e:	7bfb      	ldrb	r3, [r7, #15]
    b330:	f023 0301 	bic.w	r3, r3, #1
    b334:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b336:	787a      	ldrb	r2, [r7, #1]
    b338:	7bfb      	ldrb	r3, [r7, #15]
    b33a:	4313      	orrs	r3, r2
    b33c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b33e:	78fa      	ldrb	r2, [r7, #3]
    b340:	78bb      	ldrb	r3, [r7, #2]
    b342:	6879      	ldr	r1, [r7, #4]
    b344:	01d2      	lsls	r2, r2, #7
    b346:	440a      	add	r2, r1
    b348:	4413      	add	r3, r2
    b34a:	3340      	adds	r3, #64	; 0x40
    b34c:	7bfa      	ldrb	r2, [r7, #15]
    b34e:	701a      	strb	r2, [r3, #0]
}
    b350:	bf00      	nop
    b352:	3714      	adds	r7, #20
    b354:	46bd      	mov	sp, r7
    b356:	f85d 7b04 	ldr.w	r7, [sp], #4
    b35a:	4770      	bx	lr

0000b35c <hri_port_write_WRCONFIG_reg>:
{
    b35c:	b480      	push	{r7}
    b35e:	b085      	sub	sp, #20
    b360:	af00      	add	r7, sp, #0
    b362:	60f8      	str	r0, [r7, #12]
    b364:	460b      	mov	r3, r1
    b366:	607a      	str	r2, [r7, #4]
    b368:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b36a:	7afb      	ldrb	r3, [r7, #11]
    b36c:	68fa      	ldr	r2, [r7, #12]
    b36e:	01db      	lsls	r3, r3, #7
    b370:	4413      	add	r3, r2
    b372:	3328      	adds	r3, #40	; 0x28
    b374:	687a      	ldr	r2, [r7, #4]
    b376:	601a      	str	r2, [r3, #0]
}
    b378:	bf00      	nop
    b37a:	3714      	adds	r7, #20
    b37c:	46bd      	mov	sp, r7
    b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b382:	4770      	bx	lr

0000b384 <_gpio_set_direction>:
{
    b384:	b580      	push	{r7, lr}
    b386:	b082      	sub	sp, #8
    b388:	af00      	add	r7, sp, #0
    b38a:	4603      	mov	r3, r0
    b38c:	6039      	str	r1, [r7, #0]
    b38e:	71fb      	strb	r3, [r7, #7]
    b390:	4613      	mov	r3, r2
    b392:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b394:	79bb      	ldrb	r3, [r7, #6]
    b396:	2b01      	cmp	r3, #1
    b398:	d01c      	beq.n	b3d4 <_gpio_set_direction+0x50>
    b39a:	2b02      	cmp	r3, #2
    b39c:	d037      	beq.n	b40e <_gpio_set_direction+0x8a>
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d14e      	bne.n	b440 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b3a2:	79fb      	ldrb	r3, [r7, #7]
    b3a4:	683a      	ldr	r2, [r7, #0]
    b3a6:	4619      	mov	r1, r3
    b3a8:	482a      	ldr	r0, [pc, #168]	; (b454 <_gpio_set_direction+0xd0>)
    b3aa:	4b2b      	ldr	r3, [pc, #172]	; (b458 <_gpio_set_direction+0xd4>)
    b3ac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b3ae:	683b      	ldr	r3, [r7, #0]
    b3b0:	b29b      	uxth	r3, r3
    b3b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b3b6:	79fb      	ldrb	r3, [r7, #7]
    b3b8:	4619      	mov	r1, r3
    b3ba:	4826      	ldr	r0, [pc, #152]	; (b454 <_gpio_set_direction+0xd0>)
    b3bc:	4b27      	ldr	r3, [pc, #156]	; (b45c <_gpio_set_direction+0xd8>)
    b3be:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b3c0:	683b      	ldr	r3, [r7, #0]
    b3c2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b3c4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b3c8:	79fb      	ldrb	r3, [r7, #7]
    b3ca:	4619      	mov	r1, r3
    b3cc:	4821      	ldr	r0, [pc, #132]	; (b454 <_gpio_set_direction+0xd0>)
    b3ce:	4b23      	ldr	r3, [pc, #140]	; (b45c <_gpio_set_direction+0xd8>)
    b3d0:	4798      	blx	r3
		break;
    b3d2:	e03a      	b.n	b44a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b3d4:	79fb      	ldrb	r3, [r7, #7]
    b3d6:	683a      	ldr	r2, [r7, #0]
    b3d8:	4619      	mov	r1, r3
    b3da:	481e      	ldr	r0, [pc, #120]	; (b454 <_gpio_set_direction+0xd0>)
    b3dc:	4b1e      	ldr	r3, [pc, #120]	; (b458 <_gpio_set_direction+0xd4>)
    b3de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b3e0:	683b      	ldr	r3, [r7, #0]
    b3e2:	b29b      	uxth	r3, r3
    b3e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b3e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b3ec:	79f9      	ldrb	r1, [r7, #7]
    b3ee:	461a      	mov	r2, r3
    b3f0:	4818      	ldr	r0, [pc, #96]	; (b454 <_gpio_set_direction+0xd0>)
    b3f2:	4b1a      	ldr	r3, [pc, #104]	; (b45c <_gpio_set_direction+0xd8>)
    b3f4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b3f6:	683b      	ldr	r3, [r7, #0]
    b3f8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b3fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b3fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b402:	79f9      	ldrb	r1, [r7, #7]
    b404:	461a      	mov	r2, r3
    b406:	4813      	ldr	r0, [pc, #76]	; (b454 <_gpio_set_direction+0xd0>)
    b408:	4b14      	ldr	r3, [pc, #80]	; (b45c <_gpio_set_direction+0xd8>)
    b40a:	4798      	blx	r3
		break;
    b40c:	e01d      	b.n	b44a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b40e:	79fb      	ldrb	r3, [r7, #7]
    b410:	683a      	ldr	r2, [r7, #0]
    b412:	4619      	mov	r1, r3
    b414:	480f      	ldr	r0, [pc, #60]	; (b454 <_gpio_set_direction+0xd0>)
    b416:	4b12      	ldr	r3, [pc, #72]	; (b460 <_gpio_set_direction+0xdc>)
    b418:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b41a:	683b      	ldr	r3, [r7, #0]
    b41c:	b29b      	uxth	r3, r3
    b41e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b422:	79fb      	ldrb	r3, [r7, #7]
    b424:	4619      	mov	r1, r3
    b426:	480b      	ldr	r0, [pc, #44]	; (b454 <_gpio_set_direction+0xd0>)
    b428:	4b0c      	ldr	r3, [pc, #48]	; (b45c <_gpio_set_direction+0xd8>)
    b42a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b42c:	683b      	ldr	r3, [r7, #0]
    b42e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b430:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b434:	79fb      	ldrb	r3, [r7, #7]
    b436:	4619      	mov	r1, r3
    b438:	4806      	ldr	r0, [pc, #24]	; (b454 <_gpio_set_direction+0xd0>)
    b43a:	4b08      	ldr	r3, [pc, #32]	; (b45c <_gpio_set_direction+0xd8>)
    b43c:	4798      	blx	r3
		break;
    b43e:	e004      	b.n	b44a <_gpio_set_direction+0xc6>
		ASSERT(false);
    b440:	2246      	movs	r2, #70	; 0x46
    b442:	4908      	ldr	r1, [pc, #32]	; (b464 <_gpio_set_direction+0xe0>)
    b444:	2000      	movs	r0, #0
    b446:	4b08      	ldr	r3, [pc, #32]	; (b468 <_gpio_set_direction+0xe4>)
    b448:	4798      	blx	r3
}
    b44a:	bf00      	nop
    b44c:	3708      	adds	r7, #8
    b44e:	46bd      	mov	sp, r7
    b450:	bd80      	pop	{r7, pc}
    b452:	bf00      	nop
    b454:	41008000 	.word	0x41008000
    b458:	0000b1cd 	.word	0x0000b1cd
    b45c:	0000b35d 	.word	0x0000b35d
    b460:	0000b1a5 	.word	0x0000b1a5
    b464:	000110e0 	.word	0x000110e0
    b468:	00003c61 	.word	0x00003c61

0000b46c <_gpio_set_level>:
{
    b46c:	b580      	push	{r7, lr}
    b46e:	b082      	sub	sp, #8
    b470:	af00      	add	r7, sp, #0
    b472:	4603      	mov	r3, r0
    b474:	6039      	str	r1, [r7, #0]
    b476:	71fb      	strb	r3, [r7, #7]
    b478:	4613      	mov	r3, r2
    b47a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b47c:	79bb      	ldrb	r3, [r7, #6]
    b47e:	2b00      	cmp	r3, #0
    b480:	d006      	beq.n	b490 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b482:	79fb      	ldrb	r3, [r7, #7]
    b484:	683a      	ldr	r2, [r7, #0]
    b486:	4619      	mov	r1, r3
    b488:	4806      	ldr	r0, [pc, #24]	; (b4a4 <_gpio_set_level+0x38>)
    b48a:	4b07      	ldr	r3, [pc, #28]	; (b4a8 <_gpio_set_level+0x3c>)
    b48c:	4798      	blx	r3
}
    b48e:	e005      	b.n	b49c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b490:	79fb      	ldrb	r3, [r7, #7]
    b492:	683a      	ldr	r2, [r7, #0]
    b494:	4619      	mov	r1, r3
    b496:	4803      	ldr	r0, [pc, #12]	; (b4a4 <_gpio_set_level+0x38>)
    b498:	4b04      	ldr	r3, [pc, #16]	; (b4ac <_gpio_set_level+0x40>)
    b49a:	4798      	blx	r3
}
    b49c:	bf00      	nop
    b49e:	3708      	adds	r7, #8
    b4a0:	46bd      	mov	sp, r7
    b4a2:	bd80      	pop	{r7, pc}
    b4a4:	41008000 	.word	0x41008000
    b4a8:	0000b1f5 	.word	0x0000b1f5
    b4ac:	0000b21d 	.word	0x0000b21d

0000b4b0 <_gpio_set_pin_function>:
{
    b4b0:	b590      	push	{r4, r7, lr}
    b4b2:	b085      	sub	sp, #20
    b4b4:	af00      	add	r7, sp, #0
    b4b6:	6078      	str	r0, [r7, #4]
    b4b8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	095b      	lsrs	r3, r3, #5
    b4be:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b4c0:	687b      	ldr	r3, [r7, #4]
    b4c2:	b2db      	uxtb	r3, r3
    b4c4:	f003 031f 	and.w	r3, r3, #31
    b4c8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b4ca:	683b      	ldr	r3, [r7, #0]
    b4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
    b4d0:	d106      	bne.n	b4e0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b4d2:	7bba      	ldrb	r2, [r7, #14]
    b4d4:	7bf9      	ldrb	r1, [r7, #15]
    b4d6:	2300      	movs	r3, #0
    b4d8:	4812      	ldr	r0, [pc, #72]	; (b524 <_gpio_set_pin_function+0x74>)
    b4da:	4c13      	ldr	r4, [pc, #76]	; (b528 <_gpio_set_pin_function+0x78>)
    b4dc:	47a0      	blx	r4
}
    b4de:	e01d      	b.n	b51c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b4e0:	7bba      	ldrb	r2, [r7, #14]
    b4e2:	7bf9      	ldrb	r1, [r7, #15]
    b4e4:	2301      	movs	r3, #1
    b4e6:	480f      	ldr	r0, [pc, #60]	; (b524 <_gpio_set_pin_function+0x74>)
    b4e8:	4c0f      	ldr	r4, [pc, #60]	; (b528 <_gpio_set_pin_function+0x78>)
    b4ea:	47a0      	blx	r4
		if (pin & 1) {
    b4ec:	7bbb      	ldrb	r3, [r7, #14]
    b4ee:	f003 0301 	and.w	r3, r3, #1
    b4f2:	2b00      	cmp	r3, #0
    b4f4:	d009      	beq.n	b50a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b4f6:	7bbb      	ldrb	r3, [r7, #14]
    b4f8:	085b      	lsrs	r3, r3, #1
    b4fa:	b2da      	uxtb	r2, r3
    b4fc:	683b      	ldr	r3, [r7, #0]
    b4fe:	b2db      	uxtb	r3, r3
    b500:	7bf9      	ldrb	r1, [r7, #15]
    b502:	4808      	ldr	r0, [pc, #32]	; (b524 <_gpio_set_pin_function+0x74>)
    b504:	4c09      	ldr	r4, [pc, #36]	; (b52c <_gpio_set_pin_function+0x7c>)
    b506:	47a0      	blx	r4
}
    b508:	e008      	b.n	b51c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b50a:	7bbb      	ldrb	r3, [r7, #14]
    b50c:	085b      	lsrs	r3, r3, #1
    b50e:	b2da      	uxtb	r2, r3
    b510:	683b      	ldr	r3, [r7, #0]
    b512:	b2db      	uxtb	r3, r3
    b514:	7bf9      	ldrb	r1, [r7, #15]
    b516:	4803      	ldr	r0, [pc, #12]	; (b524 <_gpio_set_pin_function+0x74>)
    b518:	4c05      	ldr	r4, [pc, #20]	; (b530 <_gpio_set_pin_function+0x80>)
    b51a:	47a0      	blx	r4
}
    b51c:	bf00      	nop
    b51e:	3714      	adds	r7, #20
    b520:	46bd      	mov	sp, r7
    b522:	bd90      	pop	{r4, r7, pc}
    b524:	41008000 	.word	0x41008000
    b528:	0000b303 	.word	0x0000b303
    b52c:	0000b2a5 	.word	0x0000b2a5
    b530:	0000b245 	.word	0x0000b245

0000b534 <gpio_set_pin_function>:
{
    b534:	b580      	push	{r7, lr}
    b536:	b082      	sub	sp, #8
    b538:	af00      	add	r7, sp, #0
    b53a:	6078      	str	r0, [r7, #4]
    b53c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b53e:	6839      	ldr	r1, [r7, #0]
    b540:	6878      	ldr	r0, [r7, #4]
    b542:	4b03      	ldr	r3, [pc, #12]	; (b550 <gpio_set_pin_function+0x1c>)
    b544:	4798      	blx	r3
}
    b546:	bf00      	nop
    b548:	3708      	adds	r7, #8
    b54a:	46bd      	mov	sp, r7
    b54c:	bd80      	pop	{r7, pc}
    b54e:	bf00      	nop
    b550:	0000b4b1 	.word	0x0000b4b1

0000b554 <gpio_set_pin_direction>:
{
    b554:	b580      	push	{r7, lr}
    b556:	b082      	sub	sp, #8
    b558:	af00      	add	r7, sp, #0
    b55a:	4603      	mov	r3, r0
    b55c:	460a      	mov	r2, r1
    b55e:	71fb      	strb	r3, [r7, #7]
    b560:	4613      	mov	r3, r2
    b562:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b564:	79fb      	ldrb	r3, [r7, #7]
    b566:	095b      	lsrs	r3, r3, #5
    b568:	b2d8      	uxtb	r0, r3
    b56a:	79fb      	ldrb	r3, [r7, #7]
    b56c:	f003 031f 	and.w	r3, r3, #31
    b570:	2201      	movs	r2, #1
    b572:	fa02 f303 	lsl.w	r3, r2, r3
    b576:	79ba      	ldrb	r2, [r7, #6]
    b578:	4619      	mov	r1, r3
    b57a:	4b03      	ldr	r3, [pc, #12]	; (b588 <gpio_set_pin_direction+0x34>)
    b57c:	4798      	blx	r3
}
    b57e:	bf00      	nop
    b580:	3708      	adds	r7, #8
    b582:	46bd      	mov	sp, r7
    b584:	bd80      	pop	{r7, pc}
    b586:	bf00      	nop
    b588:	0000b385 	.word	0x0000b385

0000b58c <gpio_set_pin_level>:
{
    b58c:	b580      	push	{r7, lr}
    b58e:	b082      	sub	sp, #8
    b590:	af00      	add	r7, sp, #0
    b592:	4603      	mov	r3, r0
    b594:	460a      	mov	r2, r1
    b596:	71fb      	strb	r3, [r7, #7]
    b598:	4613      	mov	r3, r2
    b59a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b59c:	79fb      	ldrb	r3, [r7, #7]
    b59e:	095b      	lsrs	r3, r3, #5
    b5a0:	b2d8      	uxtb	r0, r3
    b5a2:	79fb      	ldrb	r3, [r7, #7]
    b5a4:	f003 031f 	and.w	r3, r3, #31
    b5a8:	2201      	movs	r2, #1
    b5aa:	fa02 f303 	lsl.w	r3, r2, r3
    b5ae:	79ba      	ldrb	r2, [r7, #6]
    b5b0:	4619      	mov	r1, r3
    b5b2:	4b03      	ldr	r3, [pc, #12]	; (b5c0 <gpio_set_pin_level+0x34>)
    b5b4:	4798      	blx	r3
}
    b5b6:	bf00      	nop
    b5b8:	3708      	adds	r7, #8
    b5ba:	46bd      	mov	sp, r7
    b5bc:	bd80      	pop	{r7, pc}
    b5be:	bf00      	nop
    b5c0:	0000b46d 	.word	0x0000b46d

0000b5c4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b5c4:	b580      	push	{r7, lr}
    b5c6:	b082      	sub	sp, #8
    b5c8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b5ca:	2100      	movs	r1, #0
    b5cc:	2008      	movs	r0, #8
    b5ce:	4b24      	ldr	r3, [pc, #144]	; (b660 <QSPI_N25Q256_exit_xip+0x9c>)
    b5d0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b5d2:	2100      	movs	r1, #0
    b5d4:	202b      	movs	r0, #43	; 0x2b
    b5d6:	4b22      	ldr	r3, [pc, #136]	; (b660 <QSPI_N25Q256_exit_xip+0x9c>)
    b5d8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b5da:	2100      	movs	r1, #0
    b5dc:	202a      	movs	r0, #42	; 0x2a
    b5de:	4b20      	ldr	r3, [pc, #128]	; (b660 <QSPI_N25Q256_exit_xip+0x9c>)
    b5e0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b5e2:	2102      	movs	r1, #2
    b5e4:	2008      	movs	r0, #8
    b5e6:	4b1f      	ldr	r3, [pc, #124]	; (b664 <QSPI_N25Q256_exit_xip+0xa0>)
    b5e8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b5ea:	2102      	movs	r1, #2
    b5ec:	202b      	movs	r0, #43	; 0x2b
    b5ee:	4b1d      	ldr	r3, [pc, #116]	; (b664 <QSPI_N25Q256_exit_xip+0xa0>)
    b5f0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b5f2:	2102      	movs	r1, #2
    b5f4:	202a      	movs	r0, #42	; 0x2a
    b5f6:	4b1b      	ldr	r3, [pc, #108]	; (b664 <QSPI_N25Q256_exit_xip+0xa0>)
    b5f8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b5fa:	2101      	movs	r1, #1
    b5fc:	2008      	movs	r0, #8
    b5fe:	4b1a      	ldr	r3, [pc, #104]	; (b668 <QSPI_N25Q256_exit_xip+0xa4>)
    b600:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b602:	2100      	movs	r1, #0
    b604:	202b      	movs	r0, #43	; 0x2b
    b606:	4b18      	ldr	r3, [pc, #96]	; (b668 <QSPI_N25Q256_exit_xip+0xa4>)
    b608:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b60a:	2100      	movs	r1, #0
    b60c:	202a      	movs	r0, #42	; 0x2a
    b60e:	4b16      	ldr	r3, [pc, #88]	; (b668 <QSPI_N25Q256_exit_xip+0xa4>)
    b610:	4798      	blx	r3

	delay_us(1);
    b612:	2001      	movs	r0, #1
    b614:	4b15      	ldr	r3, [pc, #84]	; (b66c <QSPI_N25Q256_exit_xip+0xa8>)
    b616:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b618:	2300      	movs	r3, #0
    b61a:	607b      	str	r3, [r7, #4]
    b61c:	e010      	b.n	b640 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b61e:	2101      	movs	r1, #1
    b620:	202a      	movs	r0, #42	; 0x2a
    b622:	4b11      	ldr	r3, [pc, #68]	; (b668 <QSPI_N25Q256_exit_xip+0xa4>)
    b624:	4798      	blx	r3
		delay_us(1);
    b626:	2001      	movs	r0, #1
    b628:	4b10      	ldr	r3, [pc, #64]	; (b66c <QSPI_N25Q256_exit_xip+0xa8>)
    b62a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b62c:	2100      	movs	r1, #0
    b62e:	202a      	movs	r0, #42	; 0x2a
    b630:	4b0d      	ldr	r3, [pc, #52]	; (b668 <QSPI_N25Q256_exit_xip+0xa4>)
    b632:	4798      	blx	r3
		delay_us(1);
    b634:	2001      	movs	r0, #1
    b636:	4b0d      	ldr	r3, [pc, #52]	; (b66c <QSPI_N25Q256_exit_xip+0xa8>)
    b638:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b63a:	687b      	ldr	r3, [r7, #4]
    b63c:	3301      	adds	r3, #1
    b63e:	607b      	str	r3, [r7, #4]
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	2b06      	cmp	r3, #6
    b644:	ddeb      	ble.n	b61e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b646:	2101      	movs	r1, #1
    b648:	202b      	movs	r0, #43	; 0x2b
    b64a:	4b07      	ldr	r3, [pc, #28]	; (b668 <QSPI_N25Q256_exit_xip+0xa4>)
    b64c:	4798      	blx	r3
	delay_us(1);
    b64e:	2001      	movs	r0, #1
    b650:	4b06      	ldr	r3, [pc, #24]	; (b66c <QSPI_N25Q256_exit_xip+0xa8>)
    b652:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b654:	4b06      	ldr	r3, [pc, #24]	; (b670 <QSPI_N25Q256_exit_xip+0xac>)
    b656:	4798      	blx	r3
}
    b658:	bf00      	nop
    b65a:	3708      	adds	r7, #8
    b65c:	46bd      	mov	sp, r7
    b65e:	bd80      	pop	{r7, pc}
    b660:	0000b535 	.word	0x0000b535
    b664:	0000b555 	.word	0x0000b555
    b668:	0000b58d 	.word	0x0000b58d
    b66c:	0000266d 	.word	0x0000266d
    b670:	000019dd 	.word	0x000019dd

0000b674 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b674:	b598      	push	{r3, r4, r7, lr}
    b676:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b678:	4806      	ldr	r0, [pc, #24]	; (b694 <spi_nor_flash_init+0x20>)
    b67a:	4b07      	ldr	r3, [pc, #28]	; (b698 <spi_nor_flash_init+0x24>)
    b67c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b67e:	2300      	movs	r3, #0
    b680:	4a06      	ldr	r2, [pc, #24]	; (b69c <spi_nor_flash_init+0x28>)
    b682:	4904      	ldr	r1, [pc, #16]	; (b694 <spi_nor_flash_init+0x20>)
    b684:	4806      	ldr	r0, [pc, #24]	; (b6a0 <spi_nor_flash_init+0x2c>)
    b686:	4c07      	ldr	r4, [pc, #28]	; (b6a4 <spi_nor_flash_init+0x30>)
    b688:	47a0      	blx	r4
    b68a:	4602      	mov	r2, r0
    b68c:	4b06      	ldr	r3, [pc, #24]	; (b6a8 <spi_nor_flash_init+0x34>)
    b68e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b690:	bf00      	nop
    b692:	bd98      	pop	{r3, r4, r7, pc}
    b694:	20001480 	.word	0x20001480
    b698:	00002b09 	.word	0x00002b09
    b69c:	0000b5c5 	.word	0x0000b5c5
    b6a0:	20001008 	.word	0x20001008
    b6a4:	0000ba95 	.word	0x0000ba95
    b6a8:	20001660 	.word	0x20001660

0000b6ac <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b6ac:	b580      	push	{r7, lr}
    b6ae:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b6b0:	4805      	ldr	r0, [pc, #20]	; (b6c8 <cdc_device_acm_init+0x1c>)
    b6b2:	4b06      	ldr	r3, [pc, #24]	; (b6cc <cdc_device_acm_init+0x20>)
    b6b4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b6b6:	4b06      	ldr	r3, [pc, #24]	; (b6d0 <cdc_device_acm_init+0x24>)
    b6b8:	4798      	blx	r3

	usbdc_start(single_desc);
    b6ba:	4806      	ldr	r0, [pc, #24]	; (b6d4 <cdc_device_acm_init+0x28>)
    b6bc:	4b06      	ldr	r3, [pc, #24]	; (b6d8 <cdc_device_acm_init+0x2c>)
    b6be:	4798      	blx	r3
	usbdc_attach();
    b6c0:	4b06      	ldr	r3, [pc, #24]	; (b6dc <cdc_device_acm_init+0x30>)
    b6c2:	4798      	blx	r3
}
    b6c4:	bf00      	nop
    b6c6:	bd80      	pop	{r7, pc}
    b6c8:	20001058 	.word	0x20001058
    b6cc:	0000d145 	.word	0x0000d145
    b6d0:	0000c435 	.word	0x0000c435
    b6d4:	200001d4 	.word	0x200001d4
    b6d8:	0000d1e1 	.word	0x0000d1e1
    b6dc:	0000d231 	.word	0x0000d231

0000b6e0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b6e0:	b580      	push	{r7, lr}
    b6e2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b6e4:	4b01      	ldr	r3, [pc, #4]	; (b6ec <usb_init+0xc>)
    b6e6:	4798      	blx	r3
}
    b6e8:	bf00      	nop
    b6ea:	bd80      	pop	{r7, pc}
    b6ec:	0000b6ad 	.word	0x0000b6ad

0000b6f0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b6f0:	b580      	push	{r7, lr}
    b6f2:	b08c      	sub	sp, #48	; 0x30
    b6f4:	af00      	add	r7, sp, #0
    b6f6:	6078      	str	r0, [r7, #4]
    b6f8:	460b      	mov	r3, r1
    b6fa:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b700:	687b      	ldr	r3, [r7, #4]
    b702:	681b      	ldr	r3, [r3, #0]
    b704:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b706:	f107 030c 	add.w	r3, r7, #12
    b70a:	2200      	movs	r2, #0
    b70c:	601a      	str	r2, [r3, #0]
    b70e:	605a      	str	r2, [r3, #4]
    b710:	609a      	str	r2, [r3, #8]
    b712:	60da      	str	r2, [r3, #12]
    b714:	611a      	str	r2, [r3, #16]
    b716:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b71a:	7b1b      	ldrb	r3, [r3, #12]
    b71c:	2b00      	cmp	r3, #0
    b71e:	d001      	beq.n	b724 <n25q256a_xip_confirm+0x34>
    b720:	2206      	movs	r2, #6
    b722:	e000      	b.n	b726 <n25q256a_xip_confirm+0x36>
    b724:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b726:	7b3b      	ldrb	r3, [r7, #12]
    b728:	f362 0302 	bfi	r3, r2, #0, #3
    b72c:	733b      	strb	r3, [r7, #12]
    b72e:	7b3b      	ldrb	r3, [r7, #12]
    b730:	f043 0310 	orr.w	r3, r3, #16
    b734:	733b      	strb	r3, [r7, #12]
    b736:	7b3b      	ldrb	r3, [r7, #12]
    b738:	f043 0320 	orr.w	r3, r3, #32
    b73c:	733b      	strb	r3, [r7, #12]
    b73e:	7b3b      	ldrb	r3, [r7, #12]
    b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b744:	733b      	strb	r3, [r7, #12]
    b746:	7b3b      	ldrb	r3, [r7, #12]
    b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b74c:	733b      	strb	r3, [r7, #12]
    b74e:	7b7b      	ldrb	r3, [r7, #13]
    b750:	f043 0303 	orr.w	r3, r3, #3
    b754:	737b      	strb	r3, [r7, #13]
    b756:	7b7b      	ldrb	r3, [r7, #13]
    b758:	2201      	movs	r2, #1
    b75a:	f362 1305 	bfi	r3, r2, #4, #2
    b75e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b762:	7b1b      	ldrb	r3, [r3, #12]
    b764:	2b00      	cmp	r3, #0
    b766:	d001      	beq.n	b76c <n25q256a_xip_confirm+0x7c>
    b768:	2208      	movs	r2, #8
    b76a:	e000      	b.n	b76e <n25q256a_xip_confirm+0x7e>
    b76c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b76e:	7bbb      	ldrb	r3, [r7, #14]
    b770:	f362 0304 	bfi	r3, r2, #0, #5
    b774:	73bb      	strb	r3, [r7, #14]
    b776:	230b      	movs	r3, #11
    b778:	743b      	strb	r3, [r7, #16]
    b77a:	78fb      	ldrb	r3, [r7, #3]
    b77c:	2b00      	cmp	r3, #0
    b77e:	d001      	beq.n	b784 <n25q256a_xip_confirm+0x94>
    b780:	2300      	movs	r3, #0
    b782:	e000      	b.n	b786 <n25q256a_xip_confirm+0x96>
    b784:	23ff      	movs	r3, #255	; 0xff
    b786:	747b      	strb	r3, [r7, #17]
    b788:	2301      	movs	r3, #1
    b78a:	61bb      	str	r3, [r7, #24]
    b78c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b790:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b792:	f107 030c 	add.w	r3, r7, #12
    b796:	4619      	mov	r1, r3
    b798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b79a:	4b07      	ldr	r3, [pc, #28]	; (b7b8 <n25q256a_xip_confirm+0xc8>)
    b79c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b79e:	78fb      	ldrb	r3, [r7, #3]
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d001      	beq.n	b7a8 <n25q256a_xip_confirm+0xb8>
    b7a4:	2202      	movs	r2, #2
    b7a6:	e000      	b.n	b7aa <n25q256a_xip_confirm+0xba>
    b7a8:	2201      	movs	r2, #1
    b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7ac:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b7ae:	2300      	movs	r3, #0
}
    b7b0:	4618      	mov	r0, r3
    b7b2:	3730      	adds	r7, #48	; 0x30
    b7b4:	46bd      	mov	sp, r7
    b7b6:	bd80      	pop	{r7, pc}
    b7b8:	00002b81 	.word	0x00002b81

0000b7bc <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b7bc:	b580      	push	{r7, lr}
    b7be:	b08c      	sub	sp, #48	; 0x30
    b7c0:	af00      	add	r7, sp, #0
    b7c2:	6078      	str	r0, [r7, #4]
    b7c4:	460b      	mov	r3, r1
    b7c6:	70fb      	strb	r3, [r7, #3]
    b7c8:	4613      	mov	r3, r2
    b7ca:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b7cc:	2300      	movs	r3, #0
    b7ce:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b7d0:	687b      	ldr	r3, [r7, #4]
    b7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b7d4:	687b      	ldr	r3, [r7, #4]
    b7d6:	681b      	ldr	r3, [r3, #0]
    b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b7da:	f107 030c 	add.w	r3, r7, #12
    b7de:	2200      	movs	r2, #0
    b7e0:	601a      	str	r2, [r3, #0]
    b7e2:	605a      	str	r2, [r3, #4]
    b7e4:	609a      	str	r2, [r3, #8]
    b7e6:	60da      	str	r2, [r3, #12]
    b7e8:	611a      	str	r2, [r3, #16]
    b7ea:	615a      	str	r2, [r3, #20]
    b7ec:	78fb      	ldrb	r3, [r7, #3]
    b7ee:	f003 0307 	and.w	r3, r3, #7
    b7f2:	b2da      	uxtb	r2, r3
    b7f4:	7b3b      	ldrb	r3, [r7, #12]
    b7f6:	f362 0302 	bfi	r3, r2, #0, #3
    b7fa:	733b      	strb	r3, [r7, #12]
    b7fc:	7b3b      	ldrb	r3, [r7, #12]
    b7fe:	f043 0310 	orr.w	r3, r3, #16
    b802:	733b      	strb	r3, [r7, #12]
    b804:	7b3b      	ldrb	r3, [r7, #12]
    b806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b80a:	733b      	strb	r3, [r7, #12]
    b80c:	78bb      	ldrb	r3, [r7, #2]
    b80e:	743b      	strb	r3, [r7, #16]
    b810:	2301      	movs	r3, #1
    b812:	61bb      	str	r3, [r7, #24]
    b814:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b818:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b81c:	7b5b      	ldrb	r3, [r3, #13]
    b81e:	2b00      	cmp	r3, #0
    b820:	d003      	beq.n	b82a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b822:	2100      	movs	r1, #0
    b824:	6878      	ldr	r0, [r7, #4]
    b826:	4b0a      	ldr	r3, [pc, #40]	; (b850 <n25q256a_read_reg+0x94>)
    b828:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b82a:	f107 030c 	add.w	r3, r7, #12
    b82e:	4619      	mov	r1, r3
    b830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b832:	4b08      	ldr	r3, [pc, #32]	; (b854 <n25q256a_read_reg+0x98>)
    b834:	4798      	blx	r3
	if (n25q->xip_mode) {
    b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b838:	7b5b      	ldrb	r3, [r3, #13]
    b83a:	2b00      	cmp	r3, #0
    b83c:	d003      	beq.n	b846 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b83e:	2101      	movs	r1, #1
    b840:	6878      	ldr	r0, [r7, #4]
    b842:	4b03      	ldr	r3, [pc, #12]	; (b850 <n25q256a_read_reg+0x94>)
    b844:	4798      	blx	r3
	}
	return status;
    b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b848:	4618      	mov	r0, r3
    b84a:	3730      	adds	r7, #48	; 0x30
    b84c:	46bd      	mov	sp, r7
    b84e:	bd80      	pop	{r7, pc}
    b850:	0000b6f1 	.word	0x0000b6f1
    b854:	00002b81 	.word	0x00002b81

0000b858 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b858:	b580      	push	{r7, lr}
    b85a:	b08c      	sub	sp, #48	; 0x30
    b85c:	af00      	add	r7, sp, #0
    b85e:	60f8      	str	r0, [r7, #12]
    b860:	607b      	str	r3, [r7, #4]
    b862:	460b      	mov	r3, r1
    b864:	72fb      	strb	r3, [r7, #11]
    b866:	4613      	mov	r3, r2
    b868:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b86a:	68fb      	ldr	r3, [r7, #12]
    b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b86e:	68fb      	ldr	r3, [r7, #12]
    b870:	681b      	ldr	r3, [r3, #0]
    b872:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b874:	f107 0310 	add.w	r3, r7, #16
    b878:	2200      	movs	r2, #0
    b87a:	601a      	str	r2, [r3, #0]
    b87c:	605a      	str	r2, [r3, #4]
    b87e:	609a      	str	r2, [r3, #8]
    b880:	60da      	str	r2, [r3, #12]
    b882:	611a      	str	r2, [r3, #16]
    b884:	615a      	str	r2, [r3, #20]
    b886:	7afb      	ldrb	r3, [r7, #11]
    b888:	f003 0307 	and.w	r3, r3, #7
    b88c:	b2da      	uxtb	r2, r3
    b88e:	7c3b      	ldrb	r3, [r7, #16]
    b890:	f362 0302 	bfi	r3, r2, #0, #3
    b894:	743b      	strb	r3, [r7, #16]
    b896:	7c3b      	ldrb	r3, [r7, #16]
    b898:	f043 0310 	orr.w	r3, r3, #16
    b89c:	743b      	strb	r3, [r7, #16]
    b89e:	7c3b      	ldrb	r3, [r7, #16]
    b8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b8a4:	743b      	strb	r3, [r7, #16]
    b8a6:	7c7b      	ldrb	r3, [r7, #17]
    b8a8:	2202      	movs	r2, #2
    b8aa:	f362 1305 	bfi	r3, r2, #4, #2
    b8ae:	747b      	strb	r3, [r7, #17]
    b8b0:	7abb      	ldrb	r3, [r7, #10]
    b8b2:	753b      	strb	r3, [r7, #20]
    b8b4:	2301      	movs	r3, #1
    b8b6:	61fb      	str	r3, [r7, #28]
    b8b8:	1d3b      	adds	r3, r7, #4
    b8ba:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8be:	7b5b      	ldrb	r3, [r3, #13]
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d003      	beq.n	b8cc <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b8c4:	2100      	movs	r1, #0
    b8c6:	68f8      	ldr	r0, [r7, #12]
    b8c8:	4b09      	ldr	r3, [pc, #36]	; (b8f0 <n25q256a_write_reg+0x98>)
    b8ca:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b8cc:	f107 0310 	add.w	r3, r7, #16
    b8d0:	4619      	mov	r1, r3
    b8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b8d4:	4b07      	ldr	r3, [pc, #28]	; (b8f4 <n25q256a_write_reg+0x9c>)
    b8d6:	4798      	blx	r3
	if (n25q->xip_mode) {
    b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8da:	7b5b      	ldrb	r3, [r3, #13]
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d003      	beq.n	b8e8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b8e0:	2101      	movs	r1, #1
    b8e2:	68f8      	ldr	r0, [r7, #12]
    b8e4:	4b02      	ldr	r3, [pc, #8]	; (b8f0 <n25q256a_write_reg+0x98>)
    b8e6:	4798      	blx	r3
	}
}
    b8e8:	bf00      	nop
    b8ea:	3730      	adds	r7, #48	; 0x30
    b8ec:	46bd      	mov	sp, r7
    b8ee:	bd80      	pop	{r7, pc}
    b8f0:	0000b6f1 	.word	0x0000b6f1
    b8f4:	00002b81 	.word	0x00002b81

0000b8f8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b8f8:	b580      	push	{r7, lr}
    b8fa:	b090      	sub	sp, #64	; 0x40
    b8fc:	af00      	add	r7, sp, #0
    b8fe:	6078      	str	r0, [r7, #4]
    b900:	460b      	mov	r3, r1
    b902:	70fb      	strb	r3, [r7, #3]
    b904:	4613      	mov	r3, r2
    b906:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b908:	687b      	ldr	r3, [r7, #4]
    b90a:	681b      	ldr	r3, [r3, #0]
    b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b90e:	78bb      	ldrb	r3, [r7, #2]
    b910:	2b00      	cmp	r3, #0
    b912:	d001      	beq.n	b918 <n25q256a_write_enable+0x20>
    b914:	2306      	movs	r3, #6
    b916:	e000      	b.n	b91a <n25q256a_write_enable+0x22>
    b918:	2304      	movs	r3, #4
    b91a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b91e:	f107 0320 	add.w	r3, r7, #32
    b922:	2200      	movs	r2, #0
    b924:	601a      	str	r2, [r3, #0]
    b926:	605a      	str	r2, [r3, #4]
    b928:	609a      	str	r2, [r3, #8]
    b92a:	60da      	str	r2, [r3, #12]
    b92c:	611a      	str	r2, [r3, #16]
    b92e:	615a      	str	r2, [r3, #20]
    b930:	78fb      	ldrb	r3, [r7, #3]
    b932:	f003 0307 	and.w	r3, r3, #7
    b936:	b2da      	uxtb	r2, r3
    b938:	f897 3020 	ldrb.w	r3, [r7, #32]
    b93c:	f362 0302 	bfi	r3, r2, #0, #3
    b940:	f887 3020 	strb.w	r3, [r7, #32]
    b944:	f897 3020 	ldrb.w	r3, [r7, #32]
    b948:	f043 0310 	orr.w	r3, r3, #16
    b94c:	f887 3020 	strb.w	r3, [r7, #32]
    b950:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b954:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b958:	f107 0308 	add.w	r3, r7, #8
    b95c:	2200      	movs	r2, #0
    b95e:	601a      	str	r2, [r3, #0]
    b960:	605a      	str	r2, [r3, #4]
    b962:	609a      	str	r2, [r3, #8]
    b964:	60da      	str	r2, [r3, #12]
    b966:	611a      	str	r2, [r3, #16]
    b968:	615a      	str	r2, [r3, #20]
    b96a:	78fb      	ldrb	r3, [r7, #3]
    b96c:	f003 0307 	and.w	r3, r3, #7
    b970:	b2da      	uxtb	r2, r3
    b972:	7a3b      	ldrb	r3, [r7, #8]
    b974:	f362 0302 	bfi	r3, r2, #0, #3
    b978:	723b      	strb	r3, [r7, #8]
    b97a:	7a3b      	ldrb	r3, [r7, #8]
    b97c:	f043 0310 	orr.w	r3, r3, #16
    b980:	723b      	strb	r3, [r7, #8]
    b982:	7a3b      	ldrb	r3, [r7, #8]
    b984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b988:	723b      	strb	r3, [r7, #8]
    b98a:	2305      	movs	r3, #5
    b98c:	733b      	strb	r3, [r7, #12]
    b98e:	2301      	movs	r3, #1
    b990:	617b      	str	r3, [r7, #20]
    b992:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b996:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b998:	f107 0320 	add.w	r3, r7, #32
    b99c:	4619      	mov	r1, r3
    b99e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b9a0:	4b08      	ldr	r3, [pc, #32]	; (b9c4 <n25q256a_write_enable+0xcc>)
    b9a2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b9a4:	f107 0308 	add.w	r3, r7, #8
    b9a8:	4619      	mov	r1, r3
    b9aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b9ac:	4b05      	ldr	r3, [pc, #20]	; (b9c4 <n25q256a_write_enable+0xcc>)
    b9ae:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b9b0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b9b4:	f003 0302 	and.w	r3, r3, #2
    b9b8:	2b00      	cmp	r3, #0
    b9ba:	d0ed      	beq.n	b998 <n25q256a_write_enable+0xa0>
}
    b9bc:	bf00      	nop
    b9be:	3740      	adds	r7, #64	; 0x40
    b9c0:	46bd      	mov	sp, r7
    b9c2:	bd80      	pop	{r7, pc}
    b9c4:	00002b81 	.word	0x00002b81

0000b9c8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b9c8:	b590      	push	{r4, r7, lr}
    b9ca:	b087      	sub	sp, #28
    b9cc:	af00      	add	r7, sp, #0
    b9ce:	6078      	str	r0, [r7, #4]
    b9d0:	460b      	mov	r3, r1
    b9d2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b9d4:	687b      	ldr	r3, [r7, #4]
    b9d6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b9d8:	68fb      	ldr	r3, [r7, #12]
    b9da:	7b1b      	ldrb	r3, [r3, #12]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d001      	beq.n	b9e4 <n25q256a_switch_mode+0x1c>
    b9e0:	2306      	movs	r3, #6
    b9e2:	e000      	b.n	b9e6 <n25q256a_switch_mode+0x1e>
    b9e4:	2300      	movs	r3, #0
    b9e6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b9e8:	7afb      	ldrb	r3, [r7, #11]
    b9ea:	2265      	movs	r2, #101	; 0x65
    b9ec:	4619      	mov	r1, r3
    b9ee:	6878      	ldr	r0, [r7, #4]
    b9f0:	4b25      	ldr	r3, [pc, #148]	; (ba88 <n25q256a_switch_mode+0xc0>)
    b9f2:	4798      	blx	r3
    b9f4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b9f6:	2300      	movs	r3, #0
    b9f8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b9fa:	68fb      	ldr	r3, [r7, #12]
    b9fc:	7b1b      	ldrb	r3, [r3, #12]
    b9fe:	78fa      	ldrb	r2, [r7, #3]
    ba00:	429a      	cmp	r2, r3
    ba02:	d03d      	beq.n	ba80 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    ba04:	78fb      	ldrb	r3, [r7, #3]
    ba06:	2b00      	cmp	r3, #0
    ba08:	d00b      	beq.n	ba22 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    ba0a:	697b      	ldr	r3, [r7, #20]
    ba0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba10:	2b00      	cmp	r3, #0
    ba12:	d011      	beq.n	ba38 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ba14:	697b      	ldr	r3, [r7, #20]
    ba16:	f003 031f 	and.w	r3, r3, #31
    ba1a:	617b      	str	r3, [r7, #20]
			modify = 1;
    ba1c:	2301      	movs	r3, #1
    ba1e:	74fb      	strb	r3, [r7, #19]
    ba20:	e00a      	b.n	ba38 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ba22:	697b      	ldr	r3, [r7, #20]
    ba24:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d105      	bne.n	ba38 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ba2c:	697b      	ldr	r3, [r7, #20]
    ba2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ba32:	617b      	str	r3, [r7, #20]
			modify = 1;
    ba34:	2301      	movs	r3, #1
    ba36:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ba38:	7cfb      	ldrb	r3, [r7, #19]
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d021      	beq.n	ba82 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ba3e:	68fb      	ldr	r3, [r7, #12]
    ba40:	78fa      	ldrb	r2, [r7, #3]
    ba42:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ba44:	7afb      	ldrb	r3, [r7, #11]
    ba46:	2201      	movs	r2, #1
    ba48:	4619      	mov	r1, r3
    ba4a:	6878      	ldr	r0, [r7, #4]
    ba4c:	4b0f      	ldr	r3, [pc, #60]	; (ba8c <n25q256a_switch_mode+0xc4>)
    ba4e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ba50:	7af9      	ldrb	r1, [r7, #11]
    ba52:	697b      	ldr	r3, [r7, #20]
    ba54:	2261      	movs	r2, #97	; 0x61
    ba56:	6878      	ldr	r0, [r7, #4]
    ba58:	4c0d      	ldr	r4, [pc, #52]	; (ba90 <n25q256a_switch_mode+0xc8>)
    ba5a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba5c:	78fb      	ldrb	r3, [r7, #3]
    ba5e:	2b00      	cmp	r3, #0
    ba60:	d001      	beq.n	ba66 <n25q256a_switch_mode+0x9e>
    ba62:	2306      	movs	r3, #6
    ba64:	e000      	b.n	ba68 <n25q256a_switch_mode+0xa0>
    ba66:	2300      	movs	r3, #0
    ba68:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ba6a:	7afb      	ldrb	r3, [r7, #11]
    ba6c:	2265      	movs	r2, #101	; 0x65
    ba6e:	4619      	mov	r1, r3
    ba70:	6878      	ldr	r0, [r7, #4]
    ba72:	4b05      	ldr	r3, [pc, #20]	; (ba88 <n25q256a_switch_mode+0xc0>)
    ba74:	4798      	blx	r3
    ba76:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ba78:	68fb      	ldr	r3, [r7, #12]
    ba7a:	78fa      	ldrb	r2, [r7, #3]
    ba7c:	731a      	strb	r2, [r3, #12]
    ba7e:	e000      	b.n	ba82 <n25q256a_switch_mode+0xba>
		return;
    ba80:	bf00      	nop
	}
}
    ba82:	371c      	adds	r7, #28
    ba84:	46bd      	mov	sp, r7
    ba86:	bd90      	pop	{r4, r7, pc}
    ba88:	0000b7bd 	.word	0x0000b7bd
    ba8c:	0000b8f9 	.word	0x0000b8f9
    ba90:	0000b859 	.word	0x0000b859

0000ba94 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ba94:	b580      	push	{r7, lr}
    ba96:	b086      	sub	sp, #24
    ba98:	af00      	add	r7, sp, #0
    ba9a:	60f8      	str	r0, [r7, #12]
    ba9c:	60b9      	str	r1, [r7, #8]
    ba9e:	607a      	str	r2, [r7, #4]
    baa0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    baa2:	68fb      	ldr	r3, [r7, #12]
    baa4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    baa6:	4a0c      	ldr	r2, [pc, #48]	; (bad8 <n25q256a_construct+0x44>)
    baa8:	68b9      	ldr	r1, [r7, #8]
    baaa:	68f8      	ldr	r0, [r7, #12]
    baac:	4b0b      	ldr	r3, [pc, #44]	; (badc <n25q256a_construct+0x48>)
    baae:	4798      	blx	r3
	n25q->quad_mode    = 0;
    bab0:	697b      	ldr	r3, [r7, #20]
    bab2:	2200      	movs	r2, #0
    bab4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    bab6:	697b      	ldr	r3, [r7, #20]
    bab8:	2200      	movs	r2, #0
    baba:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    babc:	697b      	ldr	r3, [r7, #20]
    babe:	687a      	ldr	r2, [r7, #4]
    bac0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    bac2:	78fb      	ldrb	r3, [r7, #3]
    bac4:	4619      	mov	r1, r3
    bac6:	68f8      	ldr	r0, [r7, #12]
    bac8:	4b05      	ldr	r3, [pc, #20]	; (bae0 <n25q256a_construct+0x4c>)
    baca:	4798      	blx	r3
	return me;
    bacc:	68fb      	ldr	r3, [r7, #12]
}
    bace:	4618      	mov	r0, r3
    bad0:	3718      	adds	r7, #24
    bad2:	46bd      	mov	sp, r7
    bad4:	bd80      	pop	{r7, pc}
    bad6:	bf00      	nop
    bad8:	000110fc 	.word	0x000110fc
    badc:	0000bf71 	.word	0x0000bf71
    bae0:	0000b9c9 	.word	0x0000b9c9

0000bae4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bae4:	b580      	push	{r7, lr}
    bae6:	b08c      	sub	sp, #48	; 0x30
    bae8:	af00      	add	r7, sp, #0
    baea:	60f8      	str	r0, [r7, #12]
    baec:	60b9      	str	r1, [r7, #8]
    baee:	607a      	str	r2, [r7, #4]
    baf0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    baf2:	68fb      	ldr	r3, [r7, #12]
    baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    baf6:	68fb      	ldr	r3, [r7, #12]
    baf8:	681b      	ldr	r3, [r3, #0]
    bafa:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    bafc:	f107 0310 	add.w	r3, r7, #16
    bb00:	2200      	movs	r2, #0
    bb02:	601a      	str	r2, [r3, #0]
    bb04:	605a      	str	r2, [r3, #4]
    bb06:	609a      	str	r2, [r3, #8]
    bb08:	60da      	str	r2, [r3, #12]
    bb0a:	611a      	str	r2, [r3, #16]
    bb0c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb10:	7b1b      	ldrb	r3, [r3, #12]
    bb12:	2b00      	cmp	r3, #0
    bb14:	d001      	beq.n	bb1a <n25q256a_read+0x36>
    bb16:	2206      	movs	r2, #6
    bb18:	e000      	b.n	bb1c <n25q256a_read+0x38>
    bb1a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    bb1c:	7c3b      	ldrb	r3, [r7, #16]
    bb1e:	f362 0302 	bfi	r3, r2, #0, #3
    bb22:	743b      	strb	r3, [r7, #16]
    bb24:	7c3b      	ldrb	r3, [r7, #16]
    bb26:	f043 0310 	orr.w	r3, r3, #16
    bb2a:	743b      	strb	r3, [r7, #16]
    bb2c:	7c3b      	ldrb	r3, [r7, #16]
    bb2e:	f043 0320 	orr.w	r3, r3, #32
    bb32:	743b      	strb	r3, [r7, #16]
    bb34:	7c3b      	ldrb	r3, [r7, #16]
    bb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bb3a:	743b      	strb	r3, [r7, #16]
    bb3c:	7c7b      	ldrb	r3, [r7, #17]
    bb3e:	2201      	movs	r2, #1
    bb40:	f362 1305 	bfi	r3, r2, #4, #2
    bb44:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb48:	7b1b      	ldrb	r3, [r3, #12]
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	d001      	beq.n	bb52 <n25q256a_read+0x6e>
    bb4e:	220a      	movs	r2, #10
    bb50:	e000      	b.n	bb54 <n25q256a_read+0x70>
    bb52:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    bb54:	7cbb      	ldrb	r3, [r7, #18]
    bb56:	f362 0304 	bfi	r3, r2, #0, #5
    bb5a:	74bb      	strb	r3, [r7, #18]
    bb5c:	230b      	movs	r3, #11
    bb5e:	753b      	strb	r3, [r7, #20]
    bb60:	687b      	ldr	r3, [r7, #4]
    bb62:	61bb      	str	r3, [r7, #24]
    bb64:	683b      	ldr	r3, [r7, #0]
    bb66:	61fb      	str	r3, [r7, #28]
    bb68:	68bb      	ldr	r3, [r7, #8]
    bb6a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    bb6c:	f107 0310 	add.w	r3, r7, #16
    bb70:	4619      	mov	r1, r3
    bb72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bb74:	4b03      	ldr	r3, [pc, #12]	; (bb84 <n25q256a_read+0xa0>)
    bb76:	4798      	blx	r3
	return ERR_NONE;
    bb78:	2300      	movs	r3, #0
}
    bb7a:	4618      	mov	r0, r3
    bb7c:	3730      	adds	r7, #48	; 0x30
    bb7e:	46bd      	mov	sp, r7
    bb80:	bd80      	pop	{r7, pc}
    bb82:	bf00      	nop
    bb84:	00002b81 	.word	0x00002b81

0000bb88 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bb88:	b580      	push	{r7, lr}
    bb8a:	b08c      	sub	sp, #48	; 0x30
    bb8c:	af00      	add	r7, sp, #0
    bb8e:	60f8      	str	r0, [r7, #12]
    bb90:	60b9      	str	r1, [r7, #8]
    bb92:	607a      	str	r2, [r7, #4]
    bb94:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bb96:	68fb      	ldr	r3, [r7, #12]
    bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bb9a:	68fb      	ldr	r3, [r7, #12]
    bb9c:	681b      	ldr	r3, [r3, #0]
    bb9e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    bba0:	f107 0310 	add.w	r3, r7, #16
    bba4:	2200      	movs	r2, #0
    bba6:	601a      	str	r2, [r3, #0]
    bba8:	605a      	str	r2, [r3, #4]
    bbaa:	609a      	str	r2, [r3, #8]
    bbac:	60da      	str	r2, [r3, #12]
    bbae:	611a      	str	r2, [r3, #16]
    bbb0:	615a      	str	r2, [r3, #20]
    bbb2:	7c3b      	ldrb	r3, [r7, #16]
    bbb4:	f043 0310 	orr.w	r3, r3, #16
    bbb8:	743b      	strb	r3, [r7, #16]
    bbba:	7c3b      	ldrb	r3, [r7, #16]
    bbbc:	f043 0320 	orr.w	r3, r3, #32
    bbc0:	743b      	strb	r3, [r7, #16]
    bbc2:	7c3b      	ldrb	r3, [r7, #16]
    bbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbc8:	743b      	strb	r3, [r7, #16]
    bbca:	7c7b      	ldrb	r3, [r7, #17]
    bbcc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    bbd0:	747b      	strb	r3, [r7, #17]
    bbd2:	2302      	movs	r3, #2
    bbd4:	753b      	strb	r3, [r7, #20]
    bbd6:	687b      	ldr	r3, [r7, #4]
    bbd8:	61bb      	str	r3, [r7, #24]
    bbda:	683b      	ldr	r3, [r7, #0]
    bbdc:	61fb      	str	r3, [r7, #28]
    bbde:	68bb      	ldr	r3, [r7, #8]
    bbe0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bbe4:	7b1b      	ldrb	r3, [r3, #12]
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	d001      	beq.n	bbee <n25q256a_write+0x66>
    bbea:	2206      	movs	r2, #6
    bbec:	e000      	b.n	bbf0 <n25q256a_write+0x68>
    bbee:	2200      	movs	r2, #0
    bbf0:	7c3b      	ldrb	r3, [r7, #16]
    bbf2:	f362 0302 	bfi	r3, r2, #0, #3
    bbf6:	743b      	strb	r3, [r7, #16]
	while (length) {
    bbf8:	e035      	b.n	bc66 <n25q256a_write+0xde>
		cmd.address = address;
    bbfa:	687b      	ldr	r3, [r7, #4]
    bbfc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    bbfe:	683b      	ldr	r3, [r7, #0]
    bc00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bc04:	d802      	bhi.n	bc0c <n25q256a_write+0x84>
			cmd.buf_len = length;
    bc06:	683b      	ldr	r3, [r7, #0]
    bc08:	61fb      	str	r3, [r7, #28]
    bc0a:	e002      	b.n	bc12 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    bc0c:	f44f 7380 	mov.w	r3, #256	; 0x100
    bc10:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bc12:	7c3b      	ldrb	r3, [r7, #16]
    bc14:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc18:	b2db      	uxtb	r3, r3
    bc1a:	2201      	movs	r2, #1
    bc1c:	4619      	mov	r1, r3
    bc1e:	68f8      	ldr	r0, [r7, #12]
    bc20:	4b19      	ldr	r3, [pc, #100]	; (bc88 <n25q256a_write+0x100>)
    bc22:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    bc24:	f107 0310 	add.w	r3, r7, #16
    bc28:	4619      	mov	r1, r3
    bc2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bc2c:	4b17      	ldr	r3, [pc, #92]	; (bc8c <n25q256a_write+0x104>)
    bc2e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc30:	bf00      	nop
    bc32:	7c3b      	ldrb	r3, [r7, #16]
    bc34:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc38:	b2db      	uxtb	r3, r3
    bc3a:	2270      	movs	r2, #112	; 0x70
    bc3c:	4619      	mov	r1, r3
    bc3e:	68f8      	ldr	r0, [r7, #12]
    bc40:	4b13      	ldr	r3, [pc, #76]	; (bc90 <n25q256a_write+0x108>)
    bc42:	4798      	blx	r3
    bc44:	4603      	mov	r3, r0
    bc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d0f1      	beq.n	bc32 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    bc4e:	6a3a      	ldr	r2, [r7, #32]
    bc50:	69fb      	ldr	r3, [r7, #28]
    bc52:	4413      	add	r3, r2
    bc54:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    bc56:	69fb      	ldr	r3, [r7, #28]
    bc58:	683a      	ldr	r2, [r7, #0]
    bc5a:	1ad3      	subs	r3, r2, r3
    bc5c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    bc5e:	69fb      	ldr	r3, [r7, #28]
    bc60:	687a      	ldr	r2, [r7, #4]
    bc62:	4413      	add	r3, r2
    bc64:	607b      	str	r3, [r7, #4]
	while (length) {
    bc66:	683b      	ldr	r3, [r7, #0]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d1c6      	bne.n	bbfa <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc6e:	7b5b      	ldrb	r3, [r3, #13]
    bc70:	2b00      	cmp	r3, #0
    bc72:	d003      	beq.n	bc7c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bc74:	2101      	movs	r1, #1
    bc76:	68f8      	ldr	r0, [r7, #12]
    bc78:	4b06      	ldr	r3, [pc, #24]	; (bc94 <n25q256a_write+0x10c>)
    bc7a:	4798      	blx	r3
	}
	return ERR_NONE;
    bc7c:	2300      	movs	r3, #0
}
    bc7e:	4618      	mov	r0, r3
    bc80:	3730      	adds	r7, #48	; 0x30
    bc82:	46bd      	mov	sp, r7
    bc84:	bd80      	pop	{r7, pc}
    bc86:	bf00      	nop
    bc88:	0000b8f9 	.word	0x0000b8f9
    bc8c:	00002b81 	.word	0x00002b81
    bc90:	0000b7bd 	.word	0x0000b7bd
    bc94:	0000b6f1 	.word	0x0000b6f1

0000bc98 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bc98:	b580      	push	{r7, lr}
    bc9a:	b090      	sub	sp, #64	; 0x40
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	60f8      	str	r0, [r7, #12]
    bca0:	60b9      	str	r1, [r7, #8]
    bca2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bca4:	68fb      	ldr	r3, [r7, #12]
    bca6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bca8:	68fb      	ldr	r3, [r7, #12]
    bcaa:	681b      	ldr	r3, [r3, #0]
    bcac:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bcae:	f107 0314 	add.w	r3, r7, #20
    bcb2:	2200      	movs	r2, #0
    bcb4:	601a      	str	r2, [r3, #0]
    bcb6:	605a      	str	r2, [r3, #4]
    bcb8:	609a      	str	r2, [r3, #8]
    bcba:	60da      	str	r2, [r3, #12]
    bcbc:	611a      	str	r2, [r3, #16]
    bcbe:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bcc2:	7b1b      	ldrb	r3, [r3, #12]
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	d001      	beq.n	bccc <n25q256a_erase+0x34>
    bcc8:	2206      	movs	r2, #6
    bcca:	e000      	b.n	bcce <n25q256a_erase+0x36>
    bccc:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bcce:	7d3b      	ldrb	r3, [r7, #20]
    bcd0:	f362 0302 	bfi	r3, r2, #0, #3
    bcd4:	753b      	strb	r3, [r7, #20]
    bcd6:	7d3b      	ldrb	r3, [r7, #20]
    bcd8:	f043 0310 	orr.w	r3, r3, #16
    bcdc:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bcde:	687b      	ldr	r3, [r7, #4]
    bce0:	4a56      	ldr	r2, [pc, #344]	; (be3c <n25q256a_erase+0x1a4>)
    bce2:	4293      	cmp	r3, r2
    bce4:	bf94      	ite	ls
    bce6:	2301      	movls	r3, #1
    bce8:	2300      	movhi	r3, #0
    bcea:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bcec:	7d3b      	ldrb	r3, [r7, #20]
    bcee:	f362 1345 	bfi	r3, r2, #5, #1
    bcf2:	753b      	strb	r3, [r7, #20]
    bcf4:	7d7b      	ldrb	r3, [r7, #21]
    bcf6:	2202      	movs	r2, #2
    bcf8:	f362 1305 	bfi	r3, r2, #4, #2
    bcfc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bcfe:	68bb      	ldr	r3, [r7, #8]
    bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    bd02:	687b      	ldr	r3, [r7, #4]
    bd04:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    bd06:	2300      	movs	r3, #0
    bd08:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    bd0a:	687b      	ldr	r3, [r7, #4]
    bd0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bd10:	2b00      	cmp	r3, #0
    bd12:	d104      	bne.n	bd1e <n25q256a_erase+0x86>
    bd14:	68bb      	ldr	r3, [r7, #8]
    bd16:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d002      	beq.n	bd24 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bd1e:	f06f 030c 	mvn.w	r3, #12
    bd22:	e087      	b.n	be34 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bd24:	687b      	ldr	r3, [r7, #4]
    bd26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bd2a:	d368      	bcc.n	bdfe <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bd2c:	23c7      	movs	r3, #199	; 0xc7
    bd2e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bd30:	7d3b      	ldrb	r3, [r7, #20]
    bd32:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd36:	b2db      	uxtb	r3, r3
    bd38:	2201      	movs	r2, #1
    bd3a:	4619      	mov	r1, r3
    bd3c:	68f8      	ldr	r0, [r7, #12]
    bd3e:	4b40      	ldr	r3, [pc, #256]	; (be40 <n25q256a_erase+0x1a8>)
    bd40:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bd42:	f107 0314 	add.w	r3, r7, #20
    bd46:	4619      	mov	r1, r3
    bd48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bd4a:	4b3e      	ldr	r3, [pc, #248]	; (be44 <n25q256a_erase+0x1ac>)
    bd4c:	4798      	blx	r3
    bd4e:	e059      	b.n	be04 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd52:	b29b      	uxth	r3, r3
    bd54:	2b00      	cmp	r3, #0
    bd56:	d11f      	bne.n	bd98 <n25q256a_erase+0x100>
    bd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bd5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bd5e:	d31b      	bcc.n	bd98 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd62:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bd64:	23d8      	movs	r3, #216	; 0xd8
    bd66:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bd68:	7d3b      	ldrb	r3, [r7, #20]
    bd6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd6e:	b2db      	uxtb	r3, r3
    bd70:	2201      	movs	r2, #1
    bd72:	4619      	mov	r1, r3
    bd74:	68f8      	ldr	r0, [r7, #12]
    bd76:	4b32      	ldr	r3, [pc, #200]	; (be40 <n25q256a_erase+0x1a8>)
    bd78:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bd7a:	f107 0314 	add.w	r3, r7, #20
    bd7e:	4619      	mov	r1, r3
    bd80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bd82:	4b30      	ldr	r3, [pc, #192]	; (be44 <n25q256a_erase+0x1ac>)
    bd84:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bd90:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bd94:	63bb      	str	r3, [r7, #56]	; 0x38
    bd96:	e023      	b.n	bde0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bd9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bd9e:	d31b      	bcc.n	bdd8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bda2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bda4:	2320      	movs	r3, #32
    bda6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bda8:	7d3b      	ldrb	r3, [r7, #20]
    bdaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bdae:	b2db      	uxtb	r3, r3
    bdb0:	2201      	movs	r2, #1
    bdb2:	4619      	mov	r1, r3
    bdb4:	68f8      	ldr	r0, [r7, #12]
    bdb6:	4b22      	ldr	r3, [pc, #136]	; (be40 <n25q256a_erase+0x1a8>)
    bdb8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bdba:	f107 0314 	add.w	r3, r7, #20
    bdbe:	4619      	mov	r1, r3
    bdc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bdc2:	4b20      	ldr	r3, [pc, #128]	; (be44 <n25q256a_erase+0x1ac>)
    bdc4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bdc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bdd0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bdd4:	63bb      	str	r3, [r7, #56]	; 0x38
    bdd6:	e003      	b.n	bde0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bdd8:	f06f 030c 	mvn.w	r3, #12
    bddc:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bdde:	e011      	b.n	be04 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bde0:	bf00      	nop
    bde2:	7d3b      	ldrb	r3, [r7, #20]
    bde4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bde8:	b2db      	uxtb	r3, r3
    bdea:	2270      	movs	r2, #112	; 0x70
    bdec:	4619      	mov	r1, r3
    bdee:	68f8      	ldr	r0, [r7, #12]
    bdf0:	4b15      	ldr	r3, [pc, #84]	; (be48 <n25q256a_erase+0x1b0>)
    bdf2:	4798      	blx	r3
    bdf4:	4603      	mov	r3, r0
    bdf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d0f1      	beq.n	bde2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    be00:	2b00      	cmp	r3, #0
    be02:	d1a5      	bne.n	bd50 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    be04:	bf00      	nop
    be06:	7d3b      	ldrb	r3, [r7, #20]
    be08:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be0c:	b2db      	uxtb	r3, r3
    be0e:	2270      	movs	r2, #112	; 0x70
    be10:	4619      	mov	r1, r3
    be12:	68f8      	ldr	r0, [r7, #12]
    be14:	4b0c      	ldr	r3, [pc, #48]	; (be48 <n25q256a_erase+0x1b0>)
    be16:	4798      	blx	r3
    be18:	4603      	mov	r3, r0
    be1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    be1e:	2b00      	cmp	r3, #0
    be20:	d0f1      	beq.n	be06 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    be24:	7b5b      	ldrb	r3, [r3, #13]
    be26:	2b00      	cmp	r3, #0
    be28:	d003      	beq.n	be32 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    be2a:	2101      	movs	r1, #1
    be2c:	68f8      	ldr	r0, [r7, #12]
    be2e:	4b07      	ldr	r3, [pc, #28]	; (be4c <n25q256a_erase+0x1b4>)
    be30:	4798      	blx	r3
	}
	return rc;
    be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    be34:	4618      	mov	r0, r3
    be36:	3740      	adds	r7, #64	; 0x40
    be38:	46bd      	mov	sp, r7
    be3a:	bd80      	pop	{r7, pc}
    be3c:	001fffff 	.word	0x001fffff
    be40:	0000b8f9 	.word	0x0000b8f9
    be44:	00002b81 	.word	0x00002b81
    be48:	0000b7bd 	.word	0x0000b7bd
    be4c:	0000b6f1 	.word	0x0000b6f1

0000be50 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    be50:	b590      	push	{r4, r7, lr}
    be52:	b085      	sub	sp, #20
    be54:	af00      	add	r7, sp, #0
    be56:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    be58:	687b      	ldr	r3, [r7, #4]
    be5a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    be5c:	68fb      	ldr	r3, [r7, #12]
    be5e:	7b1b      	ldrb	r3, [r3, #12]
    be60:	2b00      	cmp	r3, #0
    be62:	d001      	beq.n	be68 <n25q256a_enable_xip+0x18>
    be64:	2306      	movs	r3, #6
    be66:	e000      	b.n	be6a <n25q256a_enable_xip+0x1a>
    be68:	2300      	movs	r3, #0
    be6a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    be6c:	68fb      	ldr	r3, [r7, #12]
    be6e:	7b5b      	ldrb	r3, [r3, #13]
    be70:	2b00      	cmp	r3, #0
    be72:	d129      	bne.n	bec8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    be74:	7afb      	ldrb	r3, [r7, #11]
    be76:	2285      	movs	r2, #133	; 0x85
    be78:	4619      	mov	r1, r3
    be7a:	6878      	ldr	r0, [r7, #4]
    be7c:	4b15      	ldr	r3, [pc, #84]	; (bed4 <n25q256a_enable_xip+0x84>)
    be7e:	4798      	blx	r3
    be80:	4603      	mov	r3, r0
    be82:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    be84:	7abb      	ldrb	r3, [r7, #10]
    be86:	f003 0308 	and.w	r3, r3, #8
    be8a:	2b00      	cmp	r3, #0
    be8c:	d015      	beq.n	beba <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    be8e:	7abb      	ldrb	r3, [r7, #10]
    be90:	f023 0308 	bic.w	r3, r3, #8
    be94:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    be96:	7abb      	ldrb	r3, [r7, #10]
    be98:	7af9      	ldrb	r1, [r7, #11]
    be9a:	2281      	movs	r2, #129	; 0x81
    be9c:	6878      	ldr	r0, [r7, #4]
    be9e:	4c0e      	ldr	r4, [pc, #56]	; (bed8 <n25q256a_enable_xip+0x88>)
    bea0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bea2:	bf00      	nop
    bea4:	7afb      	ldrb	r3, [r7, #11]
    bea6:	2270      	movs	r2, #112	; 0x70
    bea8:	4619      	mov	r1, r3
    beaa:	6878      	ldr	r0, [r7, #4]
    beac:	4b09      	ldr	r3, [pc, #36]	; (bed4 <n25q256a_enable_xip+0x84>)
    beae:	4798      	blx	r3
    beb0:	4603      	mov	r3, r0
    beb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    beb6:	2b00      	cmp	r3, #0
    beb8:	d0f4      	beq.n	bea4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    beba:	68fb      	ldr	r3, [r7, #12]
    bebc:	2201      	movs	r2, #1
    bebe:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bec0:	2101      	movs	r1, #1
    bec2:	6878      	ldr	r0, [r7, #4]
    bec4:	4b05      	ldr	r3, [pc, #20]	; (bedc <n25q256a_enable_xip+0x8c>)
    bec6:	4798      	blx	r3
	}
	return ERR_NONE;
    bec8:	2300      	movs	r3, #0
}
    beca:	4618      	mov	r0, r3
    becc:	3714      	adds	r7, #20
    bece:	46bd      	mov	sp, r7
    bed0:	bd90      	pop	{r4, r7, pc}
    bed2:	bf00      	nop
    bed4:	0000b7bd 	.word	0x0000b7bd
    bed8:	0000b859 	.word	0x0000b859
    bedc:	0000b6f1 	.word	0x0000b6f1

0000bee0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bee0:	b580      	push	{r7, lr}
    bee2:	b086      	sub	sp, #24
    bee4:	af00      	add	r7, sp, #0
    bee6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bee8:	687b      	ldr	r3, [r7, #4]
    beea:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    beec:	687b      	ldr	r3, [r7, #4]
    beee:	681b      	ldr	r3, [r3, #0]
    bef0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bef2:	697b      	ldr	r3, [r7, #20]
    bef4:	7b1b      	ldrb	r3, [r3, #12]
    bef6:	2b00      	cmp	r3, #0
    bef8:	d001      	beq.n	befe <n25q256a_disable_xip+0x1e>
    befa:	2306      	movs	r3, #6
    befc:	e000      	b.n	bf00 <n25q256a_disable_xip+0x20>
    befe:	2300      	movs	r3, #0
    bf00:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bf02:	2100      	movs	r1, #0
    bf04:	6878      	ldr	r0, [r7, #4]
    bf06:	4b15      	ldr	r3, [pc, #84]	; (bf5c <n25q256a_disable_xip+0x7c>)
    bf08:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bf0a:	7bfb      	ldrb	r3, [r7, #15]
    bf0c:	2285      	movs	r2, #133	; 0x85
    bf0e:	4619      	mov	r1, r3
    bf10:	6878      	ldr	r0, [r7, #4]
    bf12:	4b13      	ldr	r3, [pc, #76]	; (bf60 <n25q256a_disable_xip+0x80>)
    bf14:	4798      	blx	r3
    bf16:	4603      	mov	r3, r0
    bf18:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bf1a:	7bbb      	ldrb	r3, [r7, #14]
    bf1c:	f003 0308 	and.w	r3, r3, #8
    bf20:	2b00      	cmp	r3, #0
    bf22:	d113      	bne.n	bf4c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bf24:	697b      	ldr	r3, [r7, #20]
    bf26:	689b      	ldr	r3, [r3, #8]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d00f      	beq.n	bf4c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bf2c:	693b      	ldr	r3, [r7, #16]
    bf2e:	681b      	ldr	r3, [r3, #0]
    bf30:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bf32:	6938      	ldr	r0, [r7, #16]
    bf34:	4b0b      	ldr	r3, [pc, #44]	; (bf64 <n25q256a_disable_xip+0x84>)
    bf36:	4798      	blx	r3
			n25q->pin_exit_xip();
    bf38:	697b      	ldr	r3, [r7, #20]
    bf3a:	689b      	ldr	r3, [r3, #8]
    bf3c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bf3e:	68b9      	ldr	r1, [r7, #8]
    bf40:	6938      	ldr	r0, [r7, #16]
    bf42:	4b09      	ldr	r3, [pc, #36]	; (bf68 <n25q256a_disable_xip+0x88>)
    bf44:	4798      	blx	r3
			qspi_sync_enable(descr);
    bf46:	6938      	ldr	r0, [r7, #16]
    bf48:	4b08      	ldr	r3, [pc, #32]	; (bf6c <n25q256a_disable_xip+0x8c>)
    bf4a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bf4c:	697b      	ldr	r3, [r7, #20]
    bf4e:	2200      	movs	r2, #0
    bf50:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bf52:	2300      	movs	r3, #0
}
    bf54:	4618      	mov	r0, r3
    bf56:	3718      	adds	r7, #24
    bf58:	46bd      	mov	sp, r7
    bf5a:	bd80      	pop	{r7, pc}
    bf5c:	0000b6f1 	.word	0x0000b6f1
    bf60:	0000b7bd 	.word	0x0000b7bd
    bf64:	00002b45 	.word	0x00002b45
    bf68:	00002abd 	.word	0x00002abd
    bf6c:	00002b09 	.word	0x00002b09

0000bf70 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bf70:	b480      	push	{r7}
    bf72:	b085      	sub	sp, #20
    bf74:	af00      	add	r7, sp, #0
    bf76:	60f8      	str	r0, [r7, #12]
    bf78:	60b9      	str	r1, [r7, #8]
    bf7a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bf7c:	68fb      	ldr	r3, [r7, #12]
    bf7e:	68ba      	ldr	r2, [r7, #8]
    bf80:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bf82:	68fb      	ldr	r3, [r7, #12]
    bf84:	687a      	ldr	r2, [r7, #4]
    bf86:	605a      	str	r2, [r3, #4]

	return me;
    bf88:	68fb      	ldr	r3, [r7, #12]
}
    bf8a:	4618      	mov	r0, r3
    bf8c:	3714      	adds	r7, #20
    bf8e:	46bd      	mov	sp, r7
    bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf94:	4770      	bx	lr

0000bf96 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bf96:	b480      	push	{r7}
    bf98:	b083      	sub	sp, #12
    bf9a:	af00      	add	r7, sp, #0
    bf9c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bf9e:	687b      	ldr	r3, [r7, #4]
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	b29a      	uxth	r2, r3
    bfa4:	687b      	ldr	r3, [r7, #4]
    bfa6:	3301      	adds	r3, #1
    bfa8:	781b      	ldrb	r3, [r3, #0]
    bfaa:	b29b      	uxth	r3, r3
    bfac:	021b      	lsls	r3, r3, #8
    bfae:	b29b      	uxth	r3, r3
    bfb0:	4413      	add	r3, r2
    bfb2:	b29b      	uxth	r3, r3
}
    bfb4:	4618      	mov	r0, r3
    bfb6:	370c      	adds	r7, #12
    bfb8:	46bd      	mov	sp, r7
    bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfbe:	4770      	bx	lr

0000bfc0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bfc0:	b480      	push	{r7}
    bfc2:	b083      	sub	sp, #12
    bfc4:	af00      	add	r7, sp, #0
    bfc6:	6078      	str	r0, [r7, #4]
	return desc[0];
    bfc8:	687b      	ldr	r3, [r7, #4]
    bfca:	781b      	ldrb	r3, [r3, #0]
}
    bfcc:	4618      	mov	r0, r3
    bfce:	370c      	adds	r7, #12
    bfd0:	46bd      	mov	sp, r7
    bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfd6:	4770      	bx	lr

0000bfd8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bfd8:	b580      	push	{r7, lr}
    bfda:	b082      	sub	sp, #8
    bfdc:	af00      	add	r7, sp, #0
    bfde:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bfe0:	6878      	ldr	r0, [r7, #4]
    bfe2:	4b05      	ldr	r3, [pc, #20]	; (bff8 <usb_desc_next+0x20>)
    bfe4:	4798      	blx	r3
    bfe6:	4603      	mov	r3, r0
    bfe8:	461a      	mov	r2, r3
    bfea:	687b      	ldr	r3, [r7, #4]
    bfec:	4413      	add	r3, r2
}
    bfee:	4618      	mov	r0, r3
    bff0:	3708      	adds	r7, #8
    bff2:	46bd      	mov	sp, r7
    bff4:	bd80      	pop	{r7, pc}
    bff6:	bf00      	nop
    bff8:	0000bfc1 	.word	0x0000bfc1

0000bffc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bffc:	b580      	push	{r7, lr}
    bffe:	b08c      	sub	sp, #48	; 0x30
    c000:	af00      	add	r7, sp, #0
    c002:	6078      	str	r0, [r7, #4]
    c004:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c006:	687b      	ldr	r3, [r7, #4]
    c008:	689b      	ldr	r3, [r3, #8]
    c00a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c00c:	683b      	ldr	r3, [r7, #0]
    c00e:	681b      	ldr	r3, [r3, #0]
    c010:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c012:	2300      	movs	r3, #0
    c014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c018:	e08f      	b.n	c13a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c01c:	2b00      	cmp	r3, #0
    c01e:	d102      	bne.n	c026 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c020:	f06f 0309 	mvn.w	r3, #9
    c024:	e092      	b.n	c14c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c028:	789b      	ldrb	r3, [r3, #2]
    c02a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c02e:	795b      	ldrb	r3, [r3, #5]
    c030:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c032:	7c7b      	ldrb	r3, [r7, #17]
    c034:	2b02      	cmp	r3, #2
    c036:	d002      	beq.n	c03e <cdcdf_acm_enable+0x42>
    c038:	7c7b      	ldrb	r3, [r7, #17]
    c03a:	2b0a      	cmp	r3, #10
    c03c:	d121      	bne.n	c082 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c042:	6a3a      	ldr	r2, [r7, #32]
    c044:	5cd2      	ldrb	r2, [r2, r3]
    c046:	7bbb      	ldrb	r3, [r7, #14]
    c048:	429a      	cmp	r2, r3
    c04a:	d102      	bne.n	c052 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c04c:	f06f 0311 	mvn.w	r3, #17
    c050:	e07c      	b.n	c14c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c056:	6a3a      	ldr	r2, [r7, #32]
    c058:	5cd3      	ldrb	r3, [r2, r3]
    c05a:	2bff      	cmp	r3, #255	; 0xff
    c05c:	d002      	beq.n	c064 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c05e:	f06f 031b 	mvn.w	r3, #27
    c062:	e073      	b.n	c14c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c068:	7bb9      	ldrb	r1, [r7, #14]
    c06a:	6a3a      	ldr	r2, [r7, #32]
    c06c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c06e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c070:	683b      	ldr	r3, [r7, #0]
    c072:	685b      	ldr	r3, [r3, #4]
    c074:	2205      	movs	r2, #5
    c076:	4619      	mov	r1, r3
    c078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c07a:	4b36      	ldr	r3, [pc, #216]	; (c154 <cdcdf_acm_enable+0x158>)
    c07c:	4798      	blx	r3
    c07e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c080:	e047      	b.n	c112 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c082:	f06f 0309 	mvn.w	r3, #9
    c086:	e061      	b.n	c14c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c08a:	789b      	ldrb	r3, [r3, #2]
    c08c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c090:	78db      	ldrb	r3, [r3, #3]
    c092:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c096:	3304      	adds	r3, #4
    c098:	4618      	mov	r0, r3
    c09a:	4b2f      	ldr	r3, [pc, #188]	; (c158 <cdcdf_acm_enable+0x15c>)
    c09c:	4798      	blx	r3
    c09e:	4603      	mov	r3, r0
    c0a0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c0a2:	7ebb      	ldrb	r3, [r7, #26]
    c0a4:	7ef9      	ldrb	r1, [r7, #27]
    c0a6:	8bba      	ldrh	r2, [r7, #28]
    c0a8:	4618      	mov	r0, r3
    c0aa:	4b2c      	ldr	r3, [pc, #176]	; (c15c <cdcdf_acm_enable+0x160>)
    c0ac:	4798      	blx	r3
    c0ae:	4603      	mov	r3, r0
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d002      	beq.n	c0ba <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c0b4:	f06f 0313 	mvn.w	r3, #19
    c0b8:	e048      	b.n	c14c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c0ba:	7ebb      	ldrb	r3, [r7, #26]
    c0bc:	b25b      	sxtb	r3, r3
    c0be:	2b00      	cmp	r3, #0
    c0c0:	da0f      	bge.n	c0e2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c0c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c0c6:	7eb9      	ldrb	r1, [r7, #26]
    c0c8:	6a3a      	ldr	r2, [r7, #32]
    c0ca:	4413      	add	r3, r2
    c0cc:	460a      	mov	r2, r1
    c0ce:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c0d4:	6a3a      	ldr	r2, [r7, #32]
    c0d6:	4413      	add	r3, r2
    c0d8:	789b      	ldrb	r3, [r3, #2]
    c0da:	4618      	mov	r0, r3
    c0dc:	4b20      	ldr	r3, [pc, #128]	; (c160 <cdcdf_acm_enable+0x164>)
    c0de:	4798      	blx	r3
    c0e0:	e007      	b.n	c0f2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c0e2:	7eba      	ldrb	r2, [r7, #26]
    c0e4:	6a3b      	ldr	r3, [r7, #32]
    c0e6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c0e8:	6a3b      	ldr	r3, [r7, #32]
    c0ea:	791b      	ldrb	r3, [r3, #4]
    c0ec:	4618      	mov	r0, r3
    c0ee:	4b1c      	ldr	r3, [pc, #112]	; (c160 <cdcdf_acm_enable+0x164>)
    c0f0:	4798      	blx	r3
			}
			desc->sod = ep;
    c0f2:	683b      	ldr	r3, [r7, #0]
    c0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c0f6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c0f8:	683b      	ldr	r3, [r7, #0]
    c0fa:	681b      	ldr	r3, [r3, #0]
    c0fc:	4618      	mov	r0, r3
    c0fe:	4b19      	ldr	r3, [pc, #100]	; (c164 <cdcdf_acm_enable+0x168>)
    c100:	4798      	blx	r3
    c102:	4602      	mov	r2, r0
    c104:	683b      	ldr	r3, [r7, #0]
    c106:	685b      	ldr	r3, [r3, #4]
    c108:	4619      	mov	r1, r3
    c10a:	4610      	mov	r0, r2
    c10c:	4b16      	ldr	r3, [pc, #88]	; (c168 <cdcdf_acm_enable+0x16c>)
    c10e:	4798      	blx	r3
    c110:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c114:	2b00      	cmp	r3, #0
    c116:	d1b7      	bne.n	c088 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c118:	683b      	ldr	r3, [r7, #0]
    c11a:	681b      	ldr	r3, [r3, #0]
    c11c:	4618      	mov	r0, r3
    c11e:	4b11      	ldr	r3, [pc, #68]	; (c164 <cdcdf_acm_enable+0x168>)
    c120:	4798      	blx	r3
    c122:	683b      	ldr	r3, [r7, #0]
    c124:	685b      	ldr	r3, [r3, #4]
    c126:	2204      	movs	r2, #4
    c128:	4619      	mov	r1, r3
    c12a:	4b0a      	ldr	r3, [pc, #40]	; (c154 <cdcdf_acm_enable+0x158>)
    c12c:	4798      	blx	r3
    c12e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c134:	3301      	adds	r3, #1
    c136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c13a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c13e:	2b01      	cmp	r3, #1
    c140:	f67f af6b 	bls.w	c01a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c144:	4b09      	ldr	r3, [pc, #36]	; (c16c <cdcdf_acm_enable+0x170>)
    c146:	2201      	movs	r2, #1
    c148:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c14a:	2300      	movs	r3, #0
}
    c14c:	4618      	mov	r0, r3
    c14e:	3730      	adds	r7, #48	; 0x30
    c150:	46bd      	mov	sp, r7
    c152:	bd80      	pop	{r7, pc}
    c154:	0000d345 	.word	0x0000d345
    c158:	0000bf97 	.word	0x0000bf97
    c15c:	000037f5 	.word	0x000037f5
    c160:	000038e1 	.word	0x000038e1
    c164:	0000bfd9 	.word	0x0000bfd9
    c168:	0000d3a1 	.word	0x0000d3a1
    c16c:	200010a4 	.word	0x200010a4

0000c170 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c170:	b580      	push	{r7, lr}
    c172:	b088      	sub	sp, #32
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
    c178:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c17a:	687b      	ldr	r3, [r7, #4]
    c17c:	689b      	ldr	r3, [r3, #8]
    c17e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c180:	683b      	ldr	r3, [r7, #0]
    c182:	2b00      	cmp	r3, #0
    c184:	d00c      	beq.n	c1a0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c186:	683b      	ldr	r3, [r7, #0]
    c188:	681b      	ldr	r3, [r3, #0]
    c18a:	795b      	ldrb	r3, [r3, #5]
    c18c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c18e:	7c7b      	ldrb	r3, [r7, #17]
    c190:	2b02      	cmp	r3, #2
    c192:	d005      	beq.n	c1a0 <cdcdf_acm_disable+0x30>
    c194:	7c7b      	ldrb	r3, [r7, #17]
    c196:	2b0a      	cmp	r3, #10
    c198:	d002      	beq.n	c1a0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c19a:	f06f 0309 	mvn.w	r3, #9
    c19e:	e035      	b.n	c20c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c1a0:	2300      	movs	r3, #0
    c1a2:	77fb      	strb	r3, [r7, #31]
    c1a4:	e01f      	b.n	c1e6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c1a6:	7ffb      	ldrb	r3, [r7, #31]
    c1a8:	69ba      	ldr	r2, [r7, #24]
    c1aa:	5cd3      	ldrb	r3, [r2, r3]
    c1ac:	2bff      	cmp	r3, #255	; 0xff
    c1ae:	d016      	beq.n	c1de <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c1b0:	7ffb      	ldrb	r3, [r7, #31]
    c1b2:	69ba      	ldr	r2, [r7, #24]
    c1b4:	21ff      	movs	r1, #255	; 0xff
    c1b6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c1b8:	7ffb      	ldrb	r3, [r7, #31]
    c1ba:	69ba      	ldr	r2, [r7, #24]
    c1bc:	4413      	add	r3, r2
    c1be:	789b      	ldrb	r3, [r3, #2]
    c1c0:	2bff      	cmp	r3, #255	; 0xff
    c1c2:	d00d      	beq.n	c1e0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c1c4:	7ffb      	ldrb	r3, [r7, #31]
    c1c6:	69ba      	ldr	r2, [r7, #24]
    c1c8:	4413      	add	r3, r2
    c1ca:	789b      	ldrb	r3, [r3, #2]
    c1cc:	4618      	mov	r0, r3
    c1ce:	4b11      	ldr	r3, [pc, #68]	; (c214 <cdcdf_acm_disable+0xa4>)
    c1d0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c1d2:	7ffb      	ldrb	r3, [r7, #31]
    c1d4:	69ba      	ldr	r2, [r7, #24]
    c1d6:	4413      	add	r3, r2
    c1d8:	22ff      	movs	r2, #255	; 0xff
    c1da:	709a      	strb	r2, [r3, #2]
    c1dc:	e000      	b.n	c1e0 <cdcdf_acm_disable+0x70>
			continue;
    c1de:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c1e0:	7ffb      	ldrb	r3, [r7, #31]
    c1e2:	3301      	adds	r3, #1
    c1e4:	77fb      	strb	r3, [r7, #31]
    c1e6:	7ffb      	ldrb	r3, [r7, #31]
    c1e8:	2b01      	cmp	r3, #1
    c1ea:	d9dc      	bls.n	c1a6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c1ec:	69bb      	ldr	r3, [r7, #24]
    c1ee:	791b      	ldrb	r3, [r3, #4]
    c1f0:	2bff      	cmp	r3, #255	; 0xff
    c1f2:	d007      	beq.n	c204 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c1f4:	69bb      	ldr	r3, [r7, #24]
    c1f6:	791b      	ldrb	r3, [r3, #4]
    c1f8:	4618      	mov	r0, r3
    c1fa:	4b06      	ldr	r3, [pc, #24]	; (c214 <cdcdf_acm_disable+0xa4>)
    c1fc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c1fe:	69bb      	ldr	r3, [r7, #24]
    c200:	22ff      	movs	r2, #255	; 0xff
    c202:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c204:	4b04      	ldr	r3, [pc, #16]	; (c218 <cdcdf_acm_disable+0xa8>)
    c206:	2200      	movs	r2, #0
    c208:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c20a:	2300      	movs	r3, #0
}
    c20c:	4618      	mov	r0, r3
    c20e:	3720      	adds	r7, #32
    c210:	46bd      	mov	sp, r7
    c212:	bd80      	pop	{r7, pc}
    c214:	00003891 	.word	0x00003891
    c218:	200010a4 	.word	0x200010a4

0000c21c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c21c:	b580      	push	{r7, lr}
    c21e:	b084      	sub	sp, #16
    c220:	af00      	add	r7, sp, #0
    c222:	60f8      	str	r0, [r7, #12]
    c224:	460b      	mov	r3, r1
    c226:	607a      	str	r2, [r7, #4]
    c228:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c22a:	7afb      	ldrb	r3, [r7, #11]
    c22c:	2b01      	cmp	r3, #1
    c22e:	d009      	beq.n	c244 <cdcdf_acm_ctrl+0x28>
    c230:	2b02      	cmp	r3, #2
    c232:	d00d      	beq.n	c250 <cdcdf_acm_ctrl+0x34>
    c234:	2b00      	cmp	r3, #0
    c236:	d10e      	bne.n	c256 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c238:	6879      	ldr	r1, [r7, #4]
    c23a:	68f8      	ldr	r0, [r7, #12]
    c23c:	4b09      	ldr	r3, [pc, #36]	; (c264 <cdcdf_acm_ctrl+0x48>)
    c23e:	4798      	blx	r3
    c240:	4603      	mov	r3, r0
    c242:	e00a      	b.n	c25a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c244:	6879      	ldr	r1, [r7, #4]
    c246:	68f8      	ldr	r0, [r7, #12]
    c248:	4b07      	ldr	r3, [pc, #28]	; (c268 <cdcdf_acm_ctrl+0x4c>)
    c24a:	4798      	blx	r3
    c24c:	4603      	mov	r3, r0
    c24e:	e004      	b.n	c25a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c250:	f06f 031a 	mvn.w	r3, #26
    c254:	e001      	b.n	c25a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c256:	f06f 030c 	mvn.w	r3, #12
	}
}
    c25a:	4618      	mov	r0, r3
    c25c:	3710      	adds	r7, #16
    c25e:	46bd      	mov	sp, r7
    c260:	bd80      	pop	{r7, pc}
    c262:	bf00      	nop
    c264:	0000bffd 	.word	0x0000bffd
    c268:	0000c171 	.word	0x0000c171

0000c26c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c26c:	b590      	push	{r4, r7, lr}
    c26e:	b087      	sub	sp, #28
    c270:	af00      	add	r7, sp, #0
    c272:	4603      	mov	r3, r0
    c274:	6039      	str	r1, [r7, #0]
    c276:	71fb      	strb	r3, [r7, #7]
    c278:	4613      	mov	r3, r2
    c27a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c27c:	683b      	ldr	r3, [r7, #0]
    c27e:	799a      	ldrb	r2, [r3, #6]
    c280:	79db      	ldrb	r3, [r3, #7]
    c282:	021b      	lsls	r3, r3, #8
    c284:	4313      	orrs	r3, r2
    c286:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c288:	4b2b      	ldr	r3, [pc, #172]	; (c338 <cdcdf_acm_set_req+0xcc>)
    c28a:	4798      	blx	r3
    c28c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c28e:	683b      	ldr	r3, [r7, #0]
    c290:	785b      	ldrb	r3, [r3, #1]
    c292:	2b20      	cmp	r3, #32
    c294:	d002      	beq.n	c29c <cdcdf_acm_set_req+0x30>
    c296:	2b22      	cmp	r3, #34	; 0x22
    c298:	d034      	beq.n	c304 <cdcdf_acm_set_req+0x98>
    c29a:	e046      	b.n	c32a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c29c:	8afb      	ldrh	r3, [r7, #22]
    c29e:	2b07      	cmp	r3, #7
    c2a0:	d002      	beq.n	c2a8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c2a2:	f04f 33ff 	mov.w	r3, #4294967295
    c2a6:	e042      	b.n	c32e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c2a8:	79bb      	ldrb	r3, [r7, #6]
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	d107      	bne.n	c2be <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c2ae:	8afa      	ldrh	r2, [r7, #22]
    c2b0:	79f8      	ldrb	r0, [r7, #7]
    c2b2:	2300      	movs	r3, #0
    c2b4:	6939      	ldr	r1, [r7, #16]
    c2b6:	4c21      	ldr	r4, [pc, #132]	; (c33c <cdcdf_acm_set_req+0xd0>)
    c2b8:	47a0      	blx	r4
    c2ba:	4603      	mov	r3, r0
    c2bc:	e037      	b.n	c32e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c2be:	693a      	ldr	r2, [r7, #16]
    c2c0:	f107 0308 	add.w	r3, r7, #8
    c2c4:	6810      	ldr	r0, [r2, #0]
    c2c6:	6018      	str	r0, [r3, #0]
    c2c8:	8891      	ldrh	r1, [r2, #4]
    c2ca:	7992      	ldrb	r2, [r2, #6]
    c2cc:	8099      	strh	r1, [r3, #4]
    c2ce:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c2d0:	4b1b      	ldr	r3, [pc, #108]	; (c340 <cdcdf_acm_set_req+0xd4>)
    c2d2:	681b      	ldr	r3, [r3, #0]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d008      	beq.n	c2ea <cdcdf_acm_set_req+0x7e>
    c2d8:	4b19      	ldr	r3, [pc, #100]	; (c340 <cdcdf_acm_set_req+0xd4>)
    c2da:	681b      	ldr	r3, [r3, #0]
    c2dc:	f107 0208 	add.w	r2, r7, #8
    c2e0:	4610      	mov	r0, r2
    c2e2:	4798      	blx	r3
    c2e4:	4603      	mov	r3, r0
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d00a      	beq.n	c300 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c2ea:	4b16      	ldr	r3, [pc, #88]	; (c344 <cdcdf_acm_set_req+0xd8>)
    c2ec:	f107 0208 	add.w	r2, r7, #8
    c2f0:	e892 0003 	ldmia.w	r2, {r0, r1}
    c2f4:	6018      	str	r0, [r3, #0]
    c2f6:	3304      	adds	r3, #4
    c2f8:	8019      	strh	r1, [r3, #0]
    c2fa:	3302      	adds	r3, #2
    c2fc:	0c0a      	lsrs	r2, r1, #16
    c2fe:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c300:	2300      	movs	r3, #0
    c302:	e014      	b.n	c32e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c304:	2300      	movs	r3, #0
    c306:	2200      	movs	r2, #0
    c308:	2100      	movs	r1, #0
    c30a:	2000      	movs	r0, #0
    c30c:	4c0b      	ldr	r4, [pc, #44]	; (c33c <cdcdf_acm_set_req+0xd0>)
    c30e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c310:	4b0d      	ldr	r3, [pc, #52]	; (c348 <cdcdf_acm_set_req+0xdc>)
    c312:	681b      	ldr	r3, [r3, #0]
    c314:	2b00      	cmp	r3, #0
    c316:	d006      	beq.n	c326 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c318:	4b0b      	ldr	r3, [pc, #44]	; (c348 <cdcdf_acm_set_req+0xdc>)
    c31a:	681b      	ldr	r3, [r3, #0]
    c31c:	683a      	ldr	r2, [r7, #0]
    c31e:	8852      	ldrh	r2, [r2, #2]
    c320:	b292      	uxth	r2, r2
    c322:	4610      	mov	r0, r2
    c324:	4798      	blx	r3
		}
		return ERR_NONE;
    c326:	2300      	movs	r3, #0
    c328:	e001      	b.n	c32e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c32a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c32e:	4618      	mov	r0, r3
    c330:	371c      	adds	r7, #28
    c332:	46bd      	mov	sp, r7
    c334:	bd90      	pop	{r4, r7, pc}
    c336:	bf00      	nop
    c338:	0000d241 	.word	0x0000d241
    c33c:	0000d0b5 	.word	0x0000d0b5
    c340:	200010b8 	.word	0x200010b8
    c344:	200010ac 	.word	0x200010ac
    c348:	200010b4 	.word	0x200010b4

0000c34c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c34c:	b590      	push	{r4, r7, lr}
    c34e:	b085      	sub	sp, #20
    c350:	af00      	add	r7, sp, #0
    c352:	4603      	mov	r3, r0
    c354:	6039      	str	r1, [r7, #0]
    c356:	71fb      	strb	r3, [r7, #7]
    c358:	4613      	mov	r3, r2
    c35a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c35c:	683b      	ldr	r3, [r7, #0]
    c35e:	799a      	ldrb	r2, [r3, #6]
    c360:	79db      	ldrb	r3, [r3, #7]
    c362:	021b      	lsls	r3, r3, #8
    c364:	4313      	orrs	r3, r2
    c366:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c368:	79bb      	ldrb	r3, [r7, #6]
    c36a:	2b01      	cmp	r3, #1
    c36c:	d101      	bne.n	c372 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c36e:	2300      	movs	r3, #0
    c370:	e013      	b.n	c39a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c372:	683b      	ldr	r3, [r7, #0]
    c374:	785b      	ldrb	r3, [r3, #1]
    c376:	2b21      	cmp	r3, #33	; 0x21
    c378:	d10d      	bne.n	c396 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c37a:	89fb      	ldrh	r3, [r7, #14]
    c37c:	2b07      	cmp	r3, #7
    c37e:	d002      	beq.n	c386 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c380:	f04f 33ff 	mov.w	r3, #4294967295
    c384:	e009      	b.n	c39a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c386:	89fa      	ldrh	r2, [r7, #14]
    c388:	79f8      	ldrb	r0, [r7, #7]
    c38a:	2300      	movs	r3, #0
    c38c:	4905      	ldr	r1, [pc, #20]	; (c3a4 <cdcdf_acm_get_req+0x58>)
    c38e:	4c06      	ldr	r4, [pc, #24]	; (c3a8 <cdcdf_acm_get_req+0x5c>)
    c390:	47a0      	blx	r4
    c392:	4603      	mov	r3, r0
    c394:	e001      	b.n	c39a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c396:	f06f 030c 	mvn.w	r3, #12
	}
}
    c39a:	4618      	mov	r0, r3
    c39c:	3714      	adds	r7, #20
    c39e:	46bd      	mov	sp, r7
    c3a0:	bd90      	pop	{r4, r7, pc}
    c3a2:	bf00      	nop
    c3a4:	200010ac 	.word	0x200010ac
    c3a8:	0000d0b5 	.word	0x0000d0b5

0000c3ac <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c3ac:	b580      	push	{r7, lr}
    c3ae:	b082      	sub	sp, #8
    c3b0:	af00      	add	r7, sp, #0
    c3b2:	4603      	mov	r3, r0
    c3b4:	6039      	str	r1, [r7, #0]
    c3b6:	71fb      	strb	r3, [r7, #7]
    c3b8:	4613      	mov	r3, r2
    c3ba:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c3bc:	683b      	ldr	r3, [r7, #0]
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	095b      	lsrs	r3, r3, #5
    c3c2:	b2db      	uxtb	r3, r3
    c3c4:	f003 0303 	and.w	r3, r3, #3
    c3c8:	2b01      	cmp	r3, #1
    c3ca:	d002      	beq.n	c3d2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c3cc:	f06f 0309 	mvn.w	r3, #9
    c3d0:	e026      	b.n	c420 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c3d2:	683b      	ldr	r3, [r7, #0]
    c3d4:	889b      	ldrh	r3, [r3, #4]
    c3d6:	b29a      	uxth	r2, r3
    c3d8:	4b13      	ldr	r3, [pc, #76]	; (c428 <cdcdf_acm_req+0x7c>)
    c3da:	781b      	ldrb	r3, [r3, #0]
    c3dc:	b29b      	uxth	r3, r3
    c3de:	429a      	cmp	r2, r3
    c3e0:	d007      	beq.n	c3f2 <cdcdf_acm_req+0x46>
    c3e2:	683b      	ldr	r3, [r7, #0]
    c3e4:	889b      	ldrh	r3, [r3, #4]
    c3e6:	b29a      	uxth	r2, r3
    c3e8:	4b0f      	ldr	r3, [pc, #60]	; (c428 <cdcdf_acm_req+0x7c>)
    c3ea:	785b      	ldrb	r3, [r3, #1]
    c3ec:	b29b      	uxth	r3, r3
    c3ee:	429a      	cmp	r2, r3
    c3f0:	d114      	bne.n	c41c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c3f2:	683b      	ldr	r3, [r7, #0]
    c3f4:	781b      	ldrb	r3, [r3, #0]
    c3f6:	b25b      	sxtb	r3, r3
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	da07      	bge.n	c40c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c3fc:	79ba      	ldrb	r2, [r7, #6]
    c3fe:	79fb      	ldrb	r3, [r7, #7]
    c400:	6839      	ldr	r1, [r7, #0]
    c402:	4618      	mov	r0, r3
    c404:	4b09      	ldr	r3, [pc, #36]	; (c42c <cdcdf_acm_req+0x80>)
    c406:	4798      	blx	r3
    c408:	4603      	mov	r3, r0
    c40a:	e009      	b.n	c420 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c40c:	79ba      	ldrb	r2, [r7, #6]
    c40e:	79fb      	ldrb	r3, [r7, #7]
    c410:	6839      	ldr	r1, [r7, #0]
    c412:	4618      	mov	r0, r3
    c414:	4b06      	ldr	r3, [pc, #24]	; (c430 <cdcdf_acm_req+0x84>)
    c416:	4798      	blx	r3
    c418:	4603      	mov	r3, r0
    c41a:	e001      	b.n	c420 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c41c:	f06f 0309 	mvn.w	r3, #9
	}
}
    c420:	4618      	mov	r0, r3
    c422:	3708      	adds	r7, #8
    c424:	46bd      	mov	sp, r7
    c426:	bd80      	pop	{r7, pc}
    c428:	200010a4 	.word	0x200010a4
    c42c:	0000c34d 	.word	0x0000c34d
    c430:	0000c26d 	.word	0x0000c26d

0000c434 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c434:	b580      	push	{r7, lr}
    c436:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c438:	4b0b      	ldr	r3, [pc, #44]	; (c468 <cdcdf_acm_init+0x34>)
    c43a:	4798      	blx	r3
    c43c:	4603      	mov	r3, r0
    c43e:	2b01      	cmp	r3, #1
    c440:	d902      	bls.n	c448 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c442:	f06f 0310 	mvn.w	r3, #16
    c446:	e00d      	b.n	c464 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c448:	4b08      	ldr	r3, [pc, #32]	; (c46c <cdcdf_acm_init+0x38>)
    c44a:	4a09      	ldr	r2, [pc, #36]	; (c470 <cdcdf_acm_init+0x3c>)
    c44c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c44e:	4b07      	ldr	r3, [pc, #28]	; (c46c <cdcdf_acm_init+0x38>)
    c450:	4a08      	ldr	r2, [pc, #32]	; (c474 <cdcdf_acm_init+0x40>)
    c452:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c454:	4805      	ldr	r0, [pc, #20]	; (c46c <cdcdf_acm_init+0x38>)
    c456:	4b08      	ldr	r3, [pc, #32]	; (c478 <cdcdf_acm_init+0x44>)
    c458:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c45a:	4908      	ldr	r1, [pc, #32]	; (c47c <cdcdf_acm_init+0x48>)
    c45c:	2001      	movs	r0, #1
    c45e:	4b08      	ldr	r3, [pc, #32]	; (c480 <cdcdf_acm_init+0x4c>)
    c460:	4798      	blx	r3
	return ERR_NONE;
    c462:	2300      	movs	r3, #0
}
    c464:	4618      	mov	r0, r3
    c466:	bd80      	pop	{r7, pc}
    c468:	0000d259 	.word	0x0000d259
    c46c:	20001098 	.word	0x20001098
    c470:	0000c21d 	.word	0x0000c21d
    c474:	200010a4 	.word	0x200010a4
    c478:	0000d1c1 	.word	0x0000d1c1
    c47c:	200001dc 	.word	0x200001dc
    c480:	0000d0f1 	.word	0x0000d0f1

0000c484 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c484:	b590      	push	{r4, r7, lr}
    c486:	b083      	sub	sp, #12
    c488:	af00      	add	r7, sp, #0
    c48a:	6078      	str	r0, [r7, #4]
    c48c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c48e:	4b0b      	ldr	r3, [pc, #44]	; (c4bc <cdcdf_acm_read+0x38>)
    c490:	4798      	blx	r3
    c492:	4603      	mov	r3, r0
    c494:	f083 0301 	eor.w	r3, r3, #1
    c498:	b2db      	uxtb	r3, r3
    c49a:	2b00      	cmp	r3, #0
    c49c:	d002      	beq.n	c4a4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c49e:	f06f 0310 	mvn.w	r3, #16
    c4a2:	e007      	b.n	c4b4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c4a4:	4b06      	ldr	r3, [pc, #24]	; (c4c0 <cdcdf_acm_read+0x3c>)
    c4a6:	7918      	ldrb	r0, [r3, #4]
    c4a8:	2300      	movs	r3, #0
    c4aa:	683a      	ldr	r2, [r7, #0]
    c4ac:	6879      	ldr	r1, [r7, #4]
    c4ae:	4c05      	ldr	r4, [pc, #20]	; (c4c4 <cdcdf_acm_read+0x40>)
    c4b0:	47a0      	blx	r4
    c4b2:	4603      	mov	r3, r0
}
    c4b4:	4618      	mov	r0, r3
    c4b6:	370c      	adds	r7, #12
    c4b8:	46bd      	mov	sp, r7
    c4ba:	bd90      	pop	{r4, r7, pc}
    c4bc:	0000c531 	.word	0x0000c531
    c4c0:	200010a4 	.word	0x200010a4
    c4c4:	0000d0b5 	.word	0x0000d0b5

0000c4c8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c4c8:	b590      	push	{r4, r7, lr}
    c4ca:	b083      	sub	sp, #12
    c4cc:	af00      	add	r7, sp, #0
    c4ce:	6078      	str	r0, [r7, #4]
    c4d0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c4d2:	4b0b      	ldr	r3, [pc, #44]	; (c500 <cdcdf_acm_write+0x38>)
    c4d4:	4798      	blx	r3
    c4d6:	4603      	mov	r3, r0
    c4d8:	f083 0301 	eor.w	r3, r3, #1
    c4dc:	b2db      	uxtb	r3, r3
    c4de:	2b00      	cmp	r3, #0
    c4e0:	d002      	beq.n	c4e8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c4e2:	f06f 0310 	mvn.w	r3, #16
    c4e6:	e007      	b.n	c4f8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c4e8:	4b06      	ldr	r3, [pc, #24]	; (c504 <cdcdf_acm_write+0x3c>)
    c4ea:	78d8      	ldrb	r0, [r3, #3]
    c4ec:	2301      	movs	r3, #1
    c4ee:	683a      	ldr	r2, [r7, #0]
    c4f0:	6879      	ldr	r1, [r7, #4]
    c4f2:	4c05      	ldr	r4, [pc, #20]	; (c508 <cdcdf_acm_write+0x40>)
    c4f4:	47a0      	blx	r4
    c4f6:	4603      	mov	r3, r0
}
    c4f8:	4618      	mov	r0, r3
    c4fa:	370c      	adds	r7, #12
    c4fc:	46bd      	mov	sp, r7
    c4fe:	bd90      	pop	{r4, r7, pc}
    c500:	0000c531 	.word	0x0000c531
    c504:	200010a4 	.word	0x200010a4
    c508:	0000d0b5 	.word	0x0000d0b5

0000c50c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c50c:	b580      	push	{r7, lr}
    c50e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c510:	4b05      	ldr	r3, [pc, #20]	; (c528 <cdcdf_acm_stop_xfer+0x1c>)
    c512:	78db      	ldrb	r3, [r3, #3]
    c514:	4618      	mov	r0, r3
    c516:	4b05      	ldr	r3, [pc, #20]	; (c52c <cdcdf_acm_stop_xfer+0x20>)
    c518:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c51a:	4b03      	ldr	r3, [pc, #12]	; (c528 <cdcdf_acm_stop_xfer+0x1c>)
    c51c:	791b      	ldrb	r3, [r3, #4]
    c51e:	4618      	mov	r0, r3
    c520:	4b02      	ldr	r3, [pc, #8]	; (c52c <cdcdf_acm_stop_xfer+0x20>)
    c522:	4798      	blx	r3
}
    c524:	bf00      	nop
    c526:	bd80      	pop	{r7, pc}
    c528:	200010a4 	.word	0x200010a4
    c52c:	00003ab9 	.word	0x00003ab9

0000c530 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c530:	b480      	push	{r7}
    c532:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c534:	4b03      	ldr	r3, [pc, #12]	; (c544 <cdcdf_acm_is_enabled+0x14>)
    c536:	795b      	ldrb	r3, [r3, #5]
}
    c538:	4618      	mov	r0, r3
    c53a:	46bd      	mov	sp, r7
    c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c540:	4770      	bx	lr
    c542:	bf00      	nop
    c544:	200010a4 	.word	0x200010a4

0000c548 <usb_get_u16>:
{
    c548:	b480      	push	{r7}
    c54a:	b083      	sub	sp, #12
    c54c:	af00      	add	r7, sp, #0
    c54e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c550:	687b      	ldr	r3, [r7, #4]
    c552:	781b      	ldrb	r3, [r3, #0]
    c554:	b29a      	uxth	r2, r3
    c556:	687b      	ldr	r3, [r7, #4]
    c558:	3301      	adds	r3, #1
    c55a:	781b      	ldrb	r3, [r3, #0]
    c55c:	b29b      	uxth	r3, r3
    c55e:	021b      	lsls	r3, r3, #8
    c560:	b29b      	uxth	r3, r3
    c562:	4413      	add	r3, r2
    c564:	b29b      	uxth	r3, r3
}
    c566:	4618      	mov	r0, r3
    c568:	370c      	adds	r7, #12
    c56a:	46bd      	mov	sp, r7
    c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c570:	4770      	bx	lr

0000c572 <usb_desc_len>:
{
    c572:	b480      	push	{r7}
    c574:	b083      	sub	sp, #12
    c576:	af00      	add	r7, sp, #0
    c578:	6078      	str	r0, [r7, #4]
	return desc[0];
    c57a:	687b      	ldr	r3, [r7, #4]
    c57c:	781b      	ldrb	r3, [r3, #0]
}
    c57e:	4618      	mov	r0, r3
    c580:	370c      	adds	r7, #12
    c582:	46bd      	mov	sp, r7
    c584:	f85d 7b04 	ldr.w	r7, [sp], #4
    c588:	4770      	bx	lr
	...

0000c58c <usb_desc_next>:
{
    c58c:	b580      	push	{r7, lr}
    c58e:	b082      	sub	sp, #8
    c590:	af00      	add	r7, sp, #0
    c592:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c594:	6878      	ldr	r0, [r7, #4]
    c596:	4b05      	ldr	r3, [pc, #20]	; (c5ac <usb_desc_next+0x20>)
    c598:	4798      	blx	r3
    c59a:	4603      	mov	r3, r0
    c59c:	461a      	mov	r2, r3
    c59e:	687b      	ldr	r3, [r7, #4]
    c5a0:	4413      	add	r3, r2
}
    c5a2:	4618      	mov	r0, r3
    c5a4:	3708      	adds	r7, #8
    c5a6:	46bd      	mov	sp, r7
    c5a8:	bd80      	pop	{r7, pc}
    c5aa:	bf00      	nop
    c5ac:	0000c573 	.word	0x0000c573

0000c5b0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c5b0:	b580      	push	{r7, lr}
    c5b2:	b082      	sub	sp, #8
    c5b4:	af00      	add	r7, sp, #0
    c5b6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c5b8:	687b      	ldr	r3, [r7, #4]
    c5ba:	3302      	adds	r3, #2
    c5bc:	4618      	mov	r0, r3
    c5be:	4b03      	ldr	r3, [pc, #12]	; (c5cc <usb_cfg_desc_total_len+0x1c>)
    c5c0:	4798      	blx	r3
    c5c2:	4603      	mov	r3, r0
}
    c5c4:	4618      	mov	r0, r3
    c5c6:	3708      	adds	r7, #8
    c5c8:	46bd      	mov	sp, r7
    c5ca:	bd80      	pop	{r7, pc}
    c5cc:	0000c549 	.word	0x0000c549

0000c5d0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c5d0:	b590      	push	{r4, r7, lr}
    c5d2:	b085      	sub	sp, #20
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	4603      	mov	r3, r0
    c5d8:	6039      	str	r1, [r7, #0]
    c5da:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c5dc:	2300      	movs	r3, #0
    c5de:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c5e0:	683b      	ldr	r3, [r7, #0]
    c5e2:	799a      	ldrb	r2, [r3, #6]
    c5e4:	79db      	ldrb	r3, [r3, #7]
    c5e6:	021b      	lsls	r3, r3, #8
    c5e8:	4313      	orrs	r3, r2
    c5ea:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c5ec:	897b      	ldrh	r3, [r7, #10]
    c5ee:	2b12      	cmp	r3, #18
    c5f0:	d901      	bls.n	c5f6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c5f2:	2312      	movs	r3, #18
    c5f4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c5f6:	68fb      	ldr	r3, [r7, #12]
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d10a      	bne.n	c612 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c5fc:	4b0f      	ldr	r3, [pc, #60]	; (c63c <usbdc_get_dev_desc+0x6c>)
    c5fe:	681b      	ldr	r3, [r3, #0]
    c600:	6818      	ldr	r0, [r3, #0]
    c602:	4b0e      	ldr	r3, [pc, #56]	; (c63c <usbdc_get_dev_desc+0x6c>)
    c604:	681b      	ldr	r3, [r3, #0]
    c606:	685b      	ldr	r3, [r3, #4]
    c608:	2201      	movs	r2, #1
    c60a:	4619      	mov	r1, r3
    c60c:	4b0c      	ldr	r3, [pc, #48]	; (c640 <usbdc_get_dev_desc+0x70>)
    c60e:	4798      	blx	r3
    c610:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c612:	68fb      	ldr	r3, [r7, #12]
    c614:	2b00      	cmp	r3, #0
    c616:	d101      	bne.n	c61c <usbdc_get_dev_desc+0x4c>
		return false;
    c618:	2300      	movs	r3, #0
    c61a:	e00b      	b.n	c634 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c61c:	897a      	ldrh	r2, [r7, #10]
    c61e:	79f8      	ldrb	r0, [r7, #7]
    c620:	2300      	movs	r3, #0
    c622:	68f9      	ldr	r1, [r7, #12]
    c624:	4c07      	ldr	r4, [pc, #28]	; (c644 <usbdc_get_dev_desc+0x74>)
    c626:	47a0      	blx	r4
    c628:	4603      	mov	r3, r0
    c62a:	2b00      	cmp	r3, #0
    c62c:	d001      	beq.n	c632 <usbdc_get_dev_desc+0x62>
		return false;
    c62e:	2300      	movs	r3, #0
    c630:	e000      	b.n	c634 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c632:	2301      	movs	r3, #1
}
    c634:	4618      	mov	r0, r3
    c636:	3714      	adds	r7, #20
    c638:	46bd      	mov	sp, r7
    c63a:	bd90      	pop	{r4, r7, pc}
    c63c:	200010bc 	.word	0x200010bc
    c640:	0000d345 	.word	0x0000d345
    c644:	0000d0b5 	.word	0x0000d0b5

0000c648 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c648:	b590      	push	{r4, r7, lr}
    c64a:	b087      	sub	sp, #28
    c64c:	af00      	add	r7, sp, #0
    c64e:	4603      	mov	r3, r0
    c650:	6039      	str	r1, [r7, #0]
    c652:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c654:	2300      	movs	r3, #0
    c656:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c658:	683b      	ldr	r3, [r7, #0]
    c65a:	799a      	ldrb	r2, [r3, #6]
    c65c:	79db      	ldrb	r3, [r3, #7]
    c65e:	021b      	lsls	r3, r3, #8
    c660:	4313      	orrs	r3, r2
    c662:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c664:	683b      	ldr	r3, [r7, #0]
    c666:	885b      	ldrh	r3, [r3, #2]
    c668:	b29b      	uxth	r3, r3
    c66a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c66c:	8a7a      	ldrh	r2, [r7, #18]
    c66e:	4b1e      	ldr	r3, [pc, #120]	; (c6e8 <usbdc_get_cfg_desc+0xa0>)
    c670:	7f1b      	ldrb	r3, [r3, #28]
    c672:	3b01      	subs	r3, #1
    c674:	4013      	ands	r3, r2
    c676:	2b00      	cmp	r3, #0
    c678:	bf0c      	ite	eq
    c67a:	2301      	moveq	r3, #1
    c67c:	2300      	movne	r3, #0
    c67e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c680:	697b      	ldr	r3, [r7, #20]
    c682:	2b00      	cmp	r3, #0
    c684:	d10c      	bne.n	c6a0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c686:	4b18      	ldr	r3, [pc, #96]	; (c6e8 <usbdc_get_cfg_desc+0xa0>)
    c688:	681b      	ldr	r3, [r3, #0]
    c68a:	6818      	ldr	r0, [r3, #0]
    c68c:	4b16      	ldr	r3, [pc, #88]	; (c6e8 <usbdc_get_cfg_desc+0xa0>)
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	6859      	ldr	r1, [r3, #4]
    c692:	7c3b      	ldrb	r3, [r7, #16]
    c694:	3301      	adds	r3, #1
    c696:	b2db      	uxtb	r3, r3
    c698:	461a      	mov	r2, r3
    c69a:	4b14      	ldr	r3, [pc, #80]	; (c6ec <usbdc_get_cfg_desc+0xa4>)
    c69c:	4798      	blx	r3
    c69e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c6a0:	697b      	ldr	r3, [r7, #20]
    c6a2:	2b00      	cmp	r3, #0
    c6a4:	d101      	bne.n	c6aa <usbdc_get_cfg_desc+0x62>
		return false;
    c6a6:	2300      	movs	r3, #0
    c6a8:	e019      	b.n	c6de <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c6aa:	6978      	ldr	r0, [r7, #20]
    c6ac:	4b10      	ldr	r3, [pc, #64]	; (c6f0 <usbdc_get_cfg_desc+0xa8>)
    c6ae:	4798      	blx	r3
    c6b0:	4603      	mov	r3, r0
    c6b2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c6b4:	8a7a      	ldrh	r2, [r7, #18]
    c6b6:	89fb      	ldrh	r3, [r7, #14]
    c6b8:	429a      	cmp	r2, r3
    c6ba:	d802      	bhi.n	c6c2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c6bc:	2300      	movs	r3, #0
    c6be:	747b      	strb	r3, [r7, #17]
    c6c0:	e001      	b.n	c6c6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c6c2:	89fb      	ldrh	r3, [r7, #14]
    c6c4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c6c6:	8a7a      	ldrh	r2, [r7, #18]
    c6c8:	7c7b      	ldrb	r3, [r7, #17]
    c6ca:	79f8      	ldrb	r0, [r7, #7]
    c6cc:	6979      	ldr	r1, [r7, #20]
    c6ce:	4c09      	ldr	r4, [pc, #36]	; (c6f4 <usbdc_get_cfg_desc+0xac>)
    c6d0:	47a0      	blx	r4
    c6d2:	4603      	mov	r3, r0
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d001      	beq.n	c6dc <usbdc_get_cfg_desc+0x94>
		return false;
    c6d8:	2300      	movs	r3, #0
    c6da:	e000      	b.n	c6de <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c6dc:	2301      	movs	r3, #1
}
    c6de:	4618      	mov	r0, r3
    c6e0:	371c      	adds	r7, #28
    c6e2:	46bd      	mov	sp, r7
    c6e4:	bd90      	pop	{r4, r7, pc}
    c6e6:	bf00      	nop
    c6e8:	200010bc 	.word	0x200010bc
    c6ec:	0000d405 	.word	0x0000d405
    c6f0:	0000c5b1 	.word	0x0000c5b1
    c6f4:	0000d0b5 	.word	0x0000d0b5

0000c6f8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c6f8:	b590      	push	{r4, r7, lr}
    c6fa:	b085      	sub	sp, #20
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	4603      	mov	r3, r0
    c700:	6039      	str	r1, [r7, #0]
    c702:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c704:	683b      	ldr	r3, [r7, #0]
    c706:	799a      	ldrb	r2, [r3, #6]
    c708:	79db      	ldrb	r3, [r3, #7]
    c70a:	021b      	lsls	r3, r3, #8
    c70c:	4313      	orrs	r3, r2
    c70e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c710:	683b      	ldr	r3, [r7, #0]
    c712:	885b      	ldrh	r3, [r3, #2]
    c714:	b29b      	uxth	r3, r3
    c716:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c718:	89fa      	ldrh	r2, [r7, #14]
    c71a:	4b1a      	ldr	r3, [pc, #104]	; (c784 <usbdc_get_str_desc+0x8c>)
    c71c:	7f1b      	ldrb	r3, [r3, #28]
    c71e:	3b01      	subs	r3, #1
    c720:	4013      	ands	r3, r2
    c722:	2b00      	cmp	r3, #0
    c724:	bf0c      	ite	eq
    c726:	2301      	moveq	r3, #1
    c728:	2300      	movne	r3, #0
    c72a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c72c:	4b15      	ldr	r3, [pc, #84]	; (c784 <usbdc_get_str_desc+0x8c>)
    c72e:	681b      	ldr	r3, [r3, #0]
    c730:	6818      	ldr	r0, [r3, #0]
    c732:	4b14      	ldr	r3, [pc, #80]	; (c784 <usbdc_get_str_desc+0x8c>)
    c734:	681b      	ldr	r3, [r3, #0]
    c736:	685b      	ldr	r3, [r3, #4]
    c738:	7b3a      	ldrb	r2, [r7, #12]
    c73a:	4619      	mov	r1, r3
    c73c:	4b12      	ldr	r3, [pc, #72]	; (c788 <usbdc_get_str_desc+0x90>)
    c73e:	4798      	blx	r3
    c740:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c742:	68bb      	ldr	r3, [r7, #8]
    c744:	2b00      	cmp	r3, #0
    c746:	d101      	bne.n	c74c <usbdc_get_str_desc+0x54>
		return false;
    c748:	2300      	movs	r3, #0
    c74a:	e017      	b.n	c77c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c74c:	68bb      	ldr	r3, [r7, #8]
    c74e:	781b      	ldrb	r3, [r3, #0]
    c750:	b29b      	uxth	r3, r3
    c752:	89fa      	ldrh	r2, [r7, #14]
    c754:	429a      	cmp	r2, r3
    c756:	d802      	bhi.n	c75e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c758:	2300      	movs	r3, #0
    c75a:	737b      	strb	r3, [r7, #13]
    c75c:	e002      	b.n	c764 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c75e:	68bb      	ldr	r3, [r7, #8]
    c760:	781b      	ldrb	r3, [r3, #0]
    c762:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c764:	89fa      	ldrh	r2, [r7, #14]
    c766:	7b7b      	ldrb	r3, [r7, #13]
    c768:	79f8      	ldrb	r0, [r7, #7]
    c76a:	68b9      	ldr	r1, [r7, #8]
    c76c:	4c07      	ldr	r4, [pc, #28]	; (c78c <usbdc_get_str_desc+0x94>)
    c76e:	47a0      	blx	r4
    c770:	4603      	mov	r3, r0
    c772:	2b00      	cmp	r3, #0
    c774:	d001      	beq.n	c77a <usbdc_get_str_desc+0x82>
		return false;
    c776:	2300      	movs	r3, #0
    c778:	e000      	b.n	c77c <usbdc_get_str_desc+0x84>
	}
	return true;
    c77a:	2301      	movs	r3, #1
}
    c77c:	4618      	mov	r0, r3
    c77e:	3714      	adds	r7, #20
    c780:	46bd      	mov	sp, r7
    c782:	bd90      	pop	{r4, r7, pc}
    c784:	200010bc 	.word	0x200010bc
    c788:	0000d47d 	.word	0x0000d47d
    c78c:	0000d0b5 	.word	0x0000d0b5

0000c790 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c790:	b580      	push	{r7, lr}
    c792:	b084      	sub	sp, #16
    c794:	af00      	add	r7, sp, #0
    c796:	4603      	mov	r3, r0
    c798:	6039      	str	r1, [r7, #0]
    c79a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c79c:	683b      	ldr	r3, [r7, #0]
    c79e:	885b      	ldrh	r3, [r3, #2]
    c7a0:	b29b      	uxth	r3, r3
    c7a2:	0a1b      	lsrs	r3, r3, #8
    c7a4:	b29b      	uxth	r3, r3
    c7a6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c7a8:	7bfb      	ldrb	r3, [r7, #15]
    c7aa:	2b02      	cmp	r3, #2
    c7ac:	d00d      	beq.n	c7ca <usbdc_get_desc_req+0x3a>
    c7ae:	2b03      	cmp	r3, #3
    c7b0:	d012      	beq.n	c7d8 <usbdc_get_desc_req+0x48>
    c7b2:	2b01      	cmp	r3, #1
    c7b4:	d002      	beq.n	c7bc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c7b6:	bf00      	nop
	}
	return false;
    c7b8:	2300      	movs	r3, #0
    c7ba:	e013      	b.n	c7e4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c7bc:	79fb      	ldrb	r3, [r7, #7]
    c7be:	6839      	ldr	r1, [r7, #0]
    c7c0:	4618      	mov	r0, r3
    c7c2:	4b0a      	ldr	r3, [pc, #40]	; (c7ec <usbdc_get_desc_req+0x5c>)
    c7c4:	4798      	blx	r3
    c7c6:	4603      	mov	r3, r0
    c7c8:	e00c      	b.n	c7e4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c7ca:	79fb      	ldrb	r3, [r7, #7]
    c7cc:	6839      	ldr	r1, [r7, #0]
    c7ce:	4618      	mov	r0, r3
    c7d0:	4b07      	ldr	r3, [pc, #28]	; (c7f0 <usbdc_get_desc_req+0x60>)
    c7d2:	4798      	blx	r3
    c7d4:	4603      	mov	r3, r0
    c7d6:	e005      	b.n	c7e4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c7d8:	79fb      	ldrb	r3, [r7, #7]
    c7da:	6839      	ldr	r1, [r7, #0]
    c7dc:	4618      	mov	r0, r3
    c7de:	4b05      	ldr	r3, [pc, #20]	; (c7f4 <usbdc_get_desc_req+0x64>)
    c7e0:	4798      	blx	r3
    c7e2:	4603      	mov	r3, r0
}
    c7e4:	4618      	mov	r0, r3
    c7e6:	3710      	adds	r7, #16
    c7e8:	46bd      	mov	sp, r7
    c7ea:	bd80      	pop	{r7, pc}
    c7ec:	0000c5d1 	.word	0x0000c5d1
    c7f0:	0000c649 	.word	0x0000c649
    c7f4:	0000c6f9 	.word	0x0000c6f9

0000c7f8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c7f8:	b590      	push	{r4, r7, lr}
    c7fa:	b085      	sub	sp, #20
    c7fc:	af00      	add	r7, sp, #0
    c7fe:	4603      	mov	r3, r0
    c800:	6039      	str	r1, [r7, #0]
    c802:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c804:	683b      	ldr	r3, [r7, #0]
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	f003 031f 	and.w	r3, r3, #31
    c80c:	2b00      	cmp	r3, #0
    c80e:	db1b      	blt.n	c848 <usbdc_get_status_req+0x50>
    c810:	2b01      	cmp	r3, #1
    c812:	dd02      	ble.n	c81a <usbdc_get_status_req+0x22>
    c814:	2b02      	cmp	r3, #2
    c816:	d003      	beq.n	c820 <usbdc_get_status_req+0x28>
    c818:	e016      	b.n	c848 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c81a:	2300      	movs	r3, #0
    c81c:	60fb      	str	r3, [r7, #12]
		break;
    c81e:	e015      	b.n	c84c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c820:	683b      	ldr	r3, [r7, #0]
    c822:	889b      	ldrh	r3, [r3, #4]
    c824:	b29b      	uxth	r3, r3
    c826:	b2db      	uxtb	r3, r3
    c828:	2102      	movs	r1, #2
    c82a:	4618      	mov	r0, r3
    c82c:	4b0f      	ldr	r3, [pc, #60]	; (c86c <usbdc_get_status_req+0x74>)
    c82e:	4798      	blx	r3
    c830:	4603      	mov	r3, r0
    c832:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c834:	68fb      	ldr	r3, [r7, #12]
    c836:	2b00      	cmp	r3, #0
    c838:	da01      	bge.n	c83e <usbdc_get_status_req+0x46>
			return false;
    c83a:	2300      	movs	r3, #0
    c83c:	e012      	b.n	c864 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c83e:	68fb      	ldr	r3, [r7, #12]
    c840:	f003 0301 	and.w	r3, r3, #1
    c844:	60fb      	str	r3, [r7, #12]
		break;
    c846:	e001      	b.n	c84c <usbdc_get_status_req+0x54>
	default:
		return false;
    c848:	2300      	movs	r3, #0
    c84a:	e00b      	b.n	c864 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c84c:	4b08      	ldr	r3, [pc, #32]	; (c870 <usbdc_get_status_req+0x78>)
    c84e:	695b      	ldr	r3, [r3, #20]
    c850:	89ba      	ldrh	r2, [r7, #12]
    c852:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c854:	4b06      	ldr	r3, [pc, #24]	; (c870 <usbdc_get_status_req+0x78>)
    c856:	6959      	ldr	r1, [r3, #20]
    c858:	79f8      	ldrb	r0, [r7, #7]
    c85a:	2300      	movs	r3, #0
    c85c:	2202      	movs	r2, #2
    c85e:	4c05      	ldr	r4, [pc, #20]	; (c874 <usbdc_get_status_req+0x7c>)
    c860:	47a0      	blx	r4
	return true;
    c862:	2301      	movs	r3, #1
}
    c864:	4618      	mov	r0, r3
    c866:	3714      	adds	r7, #20
    c868:	46bd      	mov	sp, r7
    c86a:	bd90      	pop	{r4, r7, pc}
    c86c:	00003b91 	.word	0x00003b91
    c870:	200010bc 	.word	0x200010bc
    c874:	0000d0b5 	.word	0x0000d0b5

0000c878 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c878:	b590      	push	{r4, r7, lr}
    c87a:	b085      	sub	sp, #20
    c87c:	af00      	add	r7, sp, #0
    c87e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c880:	4b1f      	ldr	r3, [pc, #124]	; (c900 <usbdc_get_interface+0x88>)
    c882:	691b      	ldr	r3, [r3, #16]
    c884:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c886:	4b1e      	ldr	r3, [pc, #120]	; (c900 <usbdc_get_interface+0x88>)
    c888:	7f5b      	ldrb	r3, [r3, #29]
    c88a:	461a      	mov	r2, r3
    c88c:	687b      	ldr	r3, [r7, #4]
    c88e:	889b      	ldrh	r3, [r3, #4]
    c890:	b29b      	uxth	r3, r3
    c892:	fa42 f303 	asr.w	r3, r2, r3
    c896:	f003 0301 	and.w	r3, r3, #1
    c89a:	2b00      	cmp	r3, #0
    c89c:	d128      	bne.n	c8f0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c89e:	4b18      	ldr	r3, [pc, #96]	; (c900 <usbdc_get_interface+0x88>)
    c8a0:	695b      	ldr	r3, [r3, #20]
    c8a2:	2200      	movs	r2, #0
    c8a4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c8a6:	4b16      	ldr	r3, [pc, #88]	; (c900 <usbdc_get_interface+0x88>)
    c8a8:	6959      	ldr	r1, [r3, #20]
    c8aa:	2300      	movs	r3, #0
    c8ac:	2201      	movs	r2, #1
    c8ae:	2000      	movs	r0, #0
    c8b0:	4c14      	ldr	r4, [pc, #80]	; (c904 <usbdc_get_interface+0x8c>)
    c8b2:	47a0      	blx	r4
		return true;
    c8b4:	2301      	movs	r3, #1
    c8b6:	e01f      	b.n	c8f8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c8b8:	68fb      	ldr	r3, [r7, #12]
    c8ba:	685b      	ldr	r3, [r3, #4]
    c8bc:	687a      	ldr	r2, [r7, #4]
    c8be:	2102      	movs	r1, #2
    c8c0:	68f8      	ldr	r0, [r7, #12]
    c8c2:	4798      	blx	r3
    c8c4:	60b8      	str	r0, [r7, #8]
    c8c6:	68bb      	ldr	r3, [r7, #8]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	da03      	bge.n	c8d4 <usbdc_get_interface+0x5c>
			func = func->next;
    c8cc:	68fb      	ldr	r3, [r7, #12]
    c8ce:	681b      	ldr	r3, [r3, #0]
    c8d0:	60fb      	str	r3, [r7, #12]
    c8d2:	e00d      	b.n	c8f0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c8d4:	4b0a      	ldr	r3, [pc, #40]	; (c900 <usbdc_get_interface+0x88>)
    c8d6:	695b      	ldr	r3, [r3, #20]
    c8d8:	68ba      	ldr	r2, [r7, #8]
    c8da:	b2d2      	uxtb	r2, r2
    c8dc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c8de:	4b08      	ldr	r3, [pc, #32]	; (c900 <usbdc_get_interface+0x88>)
    c8e0:	6959      	ldr	r1, [r3, #20]
    c8e2:	2300      	movs	r3, #0
    c8e4:	2201      	movs	r2, #1
    c8e6:	2000      	movs	r0, #0
    c8e8:	4c06      	ldr	r4, [pc, #24]	; (c904 <usbdc_get_interface+0x8c>)
    c8ea:	47a0      	blx	r4
			return true;
    c8ec:	2301      	movs	r3, #1
    c8ee:	e003      	b.n	c8f8 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c8f0:	68fb      	ldr	r3, [r7, #12]
    c8f2:	2b00      	cmp	r3, #0
    c8f4:	d1e0      	bne.n	c8b8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c8f6:	2300      	movs	r3, #0
}
    c8f8:	4618      	mov	r0, r3
    c8fa:	3714      	adds	r7, #20
    c8fc:	46bd      	mov	sp, r7
    c8fe:	bd90      	pop	{r4, r7, pc}
    c900:	200010bc 	.word	0x200010bc
    c904:	0000d0b5 	.word	0x0000d0b5

0000c908 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c908:	b590      	push	{r4, r7, lr}
    c90a:	b083      	sub	sp, #12
    c90c:	af00      	add	r7, sp, #0
    c90e:	4603      	mov	r3, r0
    c910:	6039      	str	r1, [r7, #0]
    c912:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c914:	683b      	ldr	r3, [r7, #0]
    c916:	785b      	ldrb	r3, [r3, #1]
    c918:	2b0a      	cmp	r3, #10
    c91a:	d83a      	bhi.n	c992 <usbdc_get_req+0x8a>
    c91c:	a201      	add	r2, pc, #4	; (adr r2, c924 <usbdc_get_req+0x1c>)
    c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c922:	bf00      	nop
    c924:	0000c97b 	.word	0x0000c97b
    c928:	0000c993 	.word	0x0000c993
    c92c:	0000c993 	.word	0x0000c993
    c930:	0000c993 	.word	0x0000c993
    c934:	0000c993 	.word	0x0000c993
    c938:	0000c993 	.word	0x0000c993
    c93c:	0000c951 	.word	0x0000c951
    c940:	0000c993 	.word	0x0000c993
    c944:	0000c95f 	.word	0x0000c95f
    c948:	0000c993 	.word	0x0000c993
    c94c:	0000c989 	.word	0x0000c989
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c950:	79fb      	ldrb	r3, [r7, #7]
    c952:	6839      	ldr	r1, [r7, #0]
    c954:	4618      	mov	r0, r3
    c956:	4b11      	ldr	r3, [pc, #68]	; (c99c <usbdc_get_req+0x94>)
    c958:	4798      	blx	r3
    c95a:	4603      	mov	r3, r0
    c95c:	e01a      	b.n	c994 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c95e:	4b10      	ldr	r3, [pc, #64]	; (c9a0 <usbdc_get_req+0x98>)
    c960:	695b      	ldr	r3, [r3, #20]
    c962:	4a0f      	ldr	r2, [pc, #60]	; (c9a0 <usbdc_get_req+0x98>)
    c964:	7ed2      	ldrb	r2, [r2, #27]
    c966:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c968:	4b0d      	ldr	r3, [pc, #52]	; (c9a0 <usbdc_get_req+0x98>)
    c96a:	6959      	ldr	r1, [r3, #20]
    c96c:	79f8      	ldrb	r0, [r7, #7]
    c96e:	2300      	movs	r3, #0
    c970:	2201      	movs	r2, #1
    c972:	4c0c      	ldr	r4, [pc, #48]	; (c9a4 <usbdc_get_req+0x9c>)
    c974:	47a0      	blx	r4
		return true;
    c976:	2301      	movs	r3, #1
    c978:	e00c      	b.n	c994 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c97a:	79fb      	ldrb	r3, [r7, #7]
    c97c:	6839      	ldr	r1, [r7, #0]
    c97e:	4618      	mov	r0, r3
    c980:	4b09      	ldr	r3, [pc, #36]	; (c9a8 <usbdc_get_req+0xa0>)
    c982:	4798      	blx	r3
    c984:	4603      	mov	r3, r0
    c986:	e005      	b.n	c994 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c988:	6838      	ldr	r0, [r7, #0]
    c98a:	4b08      	ldr	r3, [pc, #32]	; (c9ac <usbdc_get_req+0xa4>)
    c98c:	4798      	blx	r3
    c98e:	4603      	mov	r3, r0
    c990:	e000      	b.n	c994 <usbdc_get_req+0x8c>
	default:
		return false;
    c992:	2300      	movs	r3, #0
	}
}
    c994:	4618      	mov	r0, r3
    c996:	370c      	adds	r7, #12
    c998:	46bd      	mov	sp, r7
    c99a:	bd90      	pop	{r4, r7, pc}
    c99c:	0000c791 	.word	0x0000c791
    c9a0:	200010bc 	.word	0x200010bc
    c9a4:	0000d0b5 	.word	0x0000d0b5
    c9a8:	0000c7f9 	.word	0x0000c7f9
    c9ac:	0000c879 	.word	0x0000c879

0000c9b0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c9b0:	b590      	push	{r4, r7, lr}
    c9b2:	b083      	sub	sp, #12
    c9b4:	af00      	add	r7, sp, #0
    c9b6:	4603      	mov	r3, r0
    c9b8:	6039      	str	r1, [r7, #0]
    c9ba:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c9bc:	683b      	ldr	r3, [r7, #0]
    c9be:	781b      	ldrb	r3, [r3, #0]
    c9c0:	f003 031f 	and.w	r3, r3, #31
    c9c4:	2b02      	cmp	r3, #2
    c9c6:	d116      	bne.n	c9f6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c9c8:	683b      	ldr	r3, [r7, #0]
    c9ca:	88db      	ldrh	r3, [r3, #6]
    c9cc:	b29b      	uxth	r3, r3
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	d001      	beq.n	c9d6 <usbdc_clear_ftr_req+0x26>
			return false;
    c9d2:	2300      	movs	r3, #0
    c9d4:	e010      	b.n	c9f8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c9d6:	683b      	ldr	r3, [r7, #0]
    c9d8:	889b      	ldrh	r3, [r3, #4]
    c9da:	b29b      	uxth	r3, r3
    c9dc:	b2db      	uxtb	r3, r3
    c9de:	2100      	movs	r1, #0
    c9e0:	4618      	mov	r0, r3
    c9e2:	4b07      	ldr	r3, [pc, #28]	; (ca00 <usbdc_clear_ftr_req+0x50>)
    c9e4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c9e6:	79f8      	ldrb	r0, [r7, #7]
    c9e8:	2301      	movs	r3, #1
    c9ea:	2200      	movs	r2, #0
    c9ec:	2100      	movs	r1, #0
    c9ee:	4c05      	ldr	r4, [pc, #20]	; (ca04 <usbdc_clear_ftr_req+0x54>)
    c9f0:	47a0      	blx	r4
		return true;
    c9f2:	2301      	movs	r3, #1
    c9f4:	e000      	b.n	c9f8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c9f6:	2300      	movs	r3, #0
	}
}
    c9f8:	4618      	mov	r0, r3
    c9fa:	370c      	adds	r7, #12
    c9fc:	46bd      	mov	sp, r7
    c9fe:	bd90      	pop	{r4, r7, pc}
    ca00:	00003b91 	.word	0x00003b91
    ca04:	0000d0b5 	.word	0x0000d0b5

0000ca08 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ca08:	b590      	push	{r4, r7, lr}
    ca0a:	b083      	sub	sp, #12
    ca0c:	af00      	add	r7, sp, #0
    ca0e:	4603      	mov	r3, r0
    ca10:	6039      	str	r1, [r7, #0]
    ca12:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ca14:	683b      	ldr	r3, [r7, #0]
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	f003 031f 	and.w	r3, r3, #31
    ca1c:	2b02      	cmp	r3, #2
    ca1e:	d116      	bne.n	ca4e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ca20:	683b      	ldr	r3, [r7, #0]
    ca22:	88db      	ldrh	r3, [r3, #6]
    ca24:	b29b      	uxth	r3, r3
    ca26:	2b00      	cmp	r3, #0
    ca28:	d001      	beq.n	ca2e <usbdc_set_ftr_req+0x26>
			return false;
    ca2a:	2300      	movs	r3, #0
    ca2c:	e010      	b.n	ca50 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ca2e:	683b      	ldr	r3, [r7, #0]
    ca30:	889b      	ldrh	r3, [r3, #4]
    ca32:	b29b      	uxth	r3, r3
    ca34:	b2db      	uxtb	r3, r3
    ca36:	2101      	movs	r1, #1
    ca38:	4618      	mov	r0, r3
    ca3a:	4b07      	ldr	r3, [pc, #28]	; (ca58 <usbdc_set_ftr_req+0x50>)
    ca3c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ca3e:	79f8      	ldrb	r0, [r7, #7]
    ca40:	2301      	movs	r3, #1
    ca42:	2200      	movs	r2, #0
    ca44:	2100      	movs	r1, #0
    ca46:	4c05      	ldr	r4, [pc, #20]	; (ca5c <usbdc_set_ftr_req+0x54>)
    ca48:	47a0      	blx	r4
		return true;
    ca4a:	2301      	movs	r3, #1
    ca4c:	e000      	b.n	ca50 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ca4e:	2300      	movs	r3, #0
	}
}
    ca50:	4618      	mov	r0, r3
    ca52:	370c      	adds	r7, #12
    ca54:	46bd      	mov	sp, r7
    ca56:	bd90      	pop	{r4, r7, pc}
    ca58:	00003b91 	.word	0x00003b91
    ca5c:	0000d0b5 	.word	0x0000d0b5

0000ca60 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ca60:	b580      	push	{r7, lr}
    ca62:	b082      	sub	sp, #8
    ca64:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ca66:	4b0a      	ldr	r3, [pc, #40]	; (ca90 <usbdc_unconfig+0x30>)
    ca68:	691b      	ldr	r3, [r3, #16]
    ca6a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ca6c:	e008      	b.n	ca80 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ca6e:	687b      	ldr	r3, [r7, #4]
    ca70:	685b      	ldr	r3, [r3, #4]
    ca72:	2200      	movs	r2, #0
    ca74:	2101      	movs	r1, #1
    ca76:	6878      	ldr	r0, [r7, #4]
    ca78:	4798      	blx	r3
		func = func->next;
    ca7a:	687b      	ldr	r3, [r7, #4]
    ca7c:	681b      	ldr	r3, [r3, #0]
    ca7e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ca80:	687b      	ldr	r3, [r7, #4]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d1f3      	bne.n	ca6e <usbdc_unconfig+0xe>
	}
}
    ca86:	bf00      	nop
    ca88:	3708      	adds	r7, #8
    ca8a:	46bd      	mov	sp, r7
    ca8c:	bd80      	pop	{r7, pc}
    ca8e:	bf00      	nop
    ca90:	200010bc 	.word	0x200010bc

0000ca94 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    ca94:	b580      	push	{r7, lr}
    ca96:	b088      	sub	sp, #32
    ca98:	af00      	add	r7, sp, #0
    ca9a:	4603      	mov	r3, r0
    ca9c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    ca9e:	2300      	movs	r3, #0
    caa0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    caa2:	23ff      	movs	r3, #255	; 0xff
    caa4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    caa6:	79fb      	ldrb	r3, [r7, #7]
    caa8:	2b00      	cmp	r3, #0
    caaa:	d103      	bne.n	cab4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    caac:	4b2e      	ldr	r3, [pc, #184]	; (cb68 <usbdc_set_config+0xd4>)
    caae:	4798      	blx	r3
		return true;
    cab0:	2301      	movs	r3, #1
    cab2:	e055      	b.n	cb60 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cab4:	69bb      	ldr	r3, [r7, #24]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d10a      	bne.n	cad0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    caba:	4b2c      	ldr	r3, [pc, #176]	; (cb6c <usbdc_set_config+0xd8>)
    cabc:	681b      	ldr	r3, [r3, #0]
    cabe:	6818      	ldr	r0, [r3, #0]
    cac0:	4b2a      	ldr	r3, [pc, #168]	; (cb6c <usbdc_set_config+0xd8>)
    cac2:	681b      	ldr	r3, [r3, #0]
    cac4:	685b      	ldr	r3, [r3, #4]
    cac6:	79fa      	ldrb	r2, [r7, #7]
    cac8:	4619      	mov	r1, r3
    caca:	4b29      	ldr	r3, [pc, #164]	; (cb70 <usbdc_set_config+0xdc>)
    cacc:	4798      	blx	r3
    cace:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    cad0:	69bb      	ldr	r3, [r7, #24]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d101      	bne.n	cada <usbdc_set_config+0x46>
		return false;
    cad6:	2300      	movs	r3, #0
    cad8:	e042      	b.n	cb60 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    cada:	69b8      	ldr	r0, [r7, #24]
    cadc:	4b25      	ldr	r3, [pc, #148]	; (cb74 <usbdc_set_config+0xe0>)
    cade:	4798      	blx	r3
    cae0:	4603      	mov	r3, r0
    cae2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    cae4:	8abb      	ldrh	r3, [r7, #20]
    cae6:	69ba      	ldr	r2, [r7, #24]
    cae8:	4413      	add	r3, r2
    caea:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    caec:	693b      	ldr	r3, [r7, #16]
    caee:	2204      	movs	r2, #4
    caf0:	4619      	mov	r1, r3
    caf2:	69b8      	ldr	r0, [r7, #24]
    caf4:	4b20      	ldr	r3, [pc, #128]	; (cb78 <usbdc_set_config+0xe4>)
    caf6:	4798      	blx	r3
    caf8:	4603      	mov	r3, r0
    cafa:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    cafc:	e02c      	b.n	cb58 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    cafe:	68fb      	ldr	r3, [r7, #12]
    cb00:	3302      	adds	r3, #2
    cb02:	781b      	ldrb	r3, [r3, #0]
    cb04:	7dfa      	ldrb	r2, [r7, #23]
    cb06:	429a      	cmp	r2, r3
    cb08:	d018      	beq.n	cb3c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    cb0a:	68fb      	ldr	r3, [r7, #12]
    cb0c:	789b      	ldrb	r3, [r3, #2]
    cb0e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    cb10:	4b16      	ldr	r3, [pc, #88]	; (cb6c <usbdc_set_config+0xd8>)
    cb12:	691b      	ldr	r3, [r3, #16]
    cb14:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cb16:	e00c      	b.n	cb32 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    cb18:	69fb      	ldr	r3, [r7, #28]
    cb1a:	685b      	ldr	r3, [r3, #4]
    cb1c:	f107 020c 	add.w	r2, r7, #12
    cb20:	2100      	movs	r1, #0
    cb22:	69f8      	ldr	r0, [r7, #28]
    cb24:	4798      	blx	r3
    cb26:	4603      	mov	r3, r0
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d006      	beq.n	cb3a <usbdc_set_config+0xa6>
					func = func->next;
    cb2c:	69fb      	ldr	r3, [r7, #28]
    cb2e:	681b      	ldr	r3, [r3, #0]
    cb30:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cb32:	69fb      	ldr	r3, [r7, #28]
    cb34:	2b00      	cmp	r3, #0
    cb36:	d1ef      	bne.n	cb18 <usbdc_set_config+0x84>
    cb38:	e000      	b.n	cb3c <usbdc_set_config+0xa8>
				} else {
					break;
    cb3a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    cb3c:	68fb      	ldr	r3, [r7, #12]
    cb3e:	4618      	mov	r0, r3
    cb40:	4b0e      	ldr	r3, [pc, #56]	; (cb7c <usbdc_set_config+0xe8>)
    cb42:	4798      	blx	r3
    cb44:	4603      	mov	r3, r0
    cb46:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cb48:	68fb      	ldr	r3, [r7, #12]
    cb4a:	6939      	ldr	r1, [r7, #16]
    cb4c:	2204      	movs	r2, #4
    cb4e:	4618      	mov	r0, r3
    cb50:	4b09      	ldr	r3, [pc, #36]	; (cb78 <usbdc_set_config+0xe4>)
    cb52:	4798      	blx	r3
    cb54:	4603      	mov	r3, r0
    cb56:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    cb58:	68fb      	ldr	r3, [r7, #12]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d1cf      	bne.n	cafe <usbdc_set_config+0x6a>
	}
	return true;
    cb5e:	2301      	movs	r3, #1
}
    cb60:	4618      	mov	r0, r3
    cb62:	3720      	adds	r7, #32
    cb64:	46bd      	mov	sp, r7
    cb66:	bd80      	pop	{r7, pc}
    cb68:	0000ca61 	.word	0x0000ca61
    cb6c:	200010bc 	.word	0x200010bc
    cb70:	0000d405 	.word	0x0000d405
    cb74:	0000c5b1 	.word	0x0000c5b1
    cb78:	0000d345 	.word	0x0000d345
    cb7c:	0000c58d 	.word	0x0000c58d

0000cb80 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    cb80:	b580      	push	{r7, lr}
    cb82:	b082      	sub	sp, #8
    cb84:	af00      	add	r7, sp, #0
    cb86:	4603      	mov	r3, r0
    cb88:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    cb8a:	79fb      	ldrb	r3, [r7, #7]
    cb8c:	4618      	mov	r0, r3
    cb8e:	4b03      	ldr	r3, [pc, #12]	; (cb9c <usbdc_set_address+0x1c>)
    cb90:	4798      	blx	r3
}
    cb92:	bf00      	nop
    cb94:	3708      	adds	r7, #8
    cb96:	46bd      	mov	sp, r7
    cb98:	bd80      	pop	{r7, pc}
    cb9a:	bf00      	nop
    cb9c:	000037ad 	.word	0x000037ad

0000cba0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    cba0:	b590      	push	{r4, r7, lr}
    cba2:	b087      	sub	sp, #28
    cba4:	af00      	add	r7, sp, #0
    cba6:	4603      	mov	r3, r0
    cba8:	460a      	mov	r2, r1
    cbaa:	80fb      	strh	r3, [r7, #6]
    cbac:	4613      	mov	r3, r2
    cbae:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    cbb0:	2300      	movs	r3, #0
    cbb2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    cbb4:	693b      	ldr	r3, [r7, #16]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d10b      	bne.n	cbd2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cbba:	4b43      	ldr	r3, [pc, #268]	; (ccc8 <usbdc_set_interface+0x128>)
    cbbc:	681b      	ldr	r3, [r3, #0]
    cbbe:	6818      	ldr	r0, [r3, #0]
    cbc0:	4b41      	ldr	r3, [pc, #260]	; (ccc8 <usbdc_set_interface+0x128>)
    cbc2:	681b      	ldr	r3, [r3, #0]
    cbc4:	6859      	ldr	r1, [r3, #4]
    cbc6:	4b40      	ldr	r3, [pc, #256]	; (ccc8 <usbdc_set_interface+0x128>)
    cbc8:	7edb      	ldrb	r3, [r3, #27]
    cbca:	461a      	mov	r2, r3
    cbcc:	4b3f      	ldr	r3, [pc, #252]	; (cccc <usbdc_set_interface+0x12c>)
    cbce:	4798      	blx	r3
    cbd0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    cbd2:	693b      	ldr	r3, [r7, #16]
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d101      	bne.n	cbdc <usbdc_set_interface+0x3c>
		return false;
    cbd8:	2300      	movs	r3, #0
    cbda:	e071      	b.n	ccc0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    cbdc:	693b      	ldr	r3, [r7, #16]
    cbde:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cbe0:	6938      	ldr	r0, [r7, #16]
    cbe2:	4b3b      	ldr	r3, [pc, #236]	; (ccd0 <usbdc_set_interface+0x130>)
    cbe4:	4798      	blx	r3
    cbe6:	4603      	mov	r3, r0
    cbe8:	461a      	mov	r2, r3
    cbea:	693b      	ldr	r3, [r7, #16]
    cbec:	4413      	add	r3, r2
    cbee:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cbf0:	68bb      	ldr	r3, [r7, #8]
    cbf2:	68f9      	ldr	r1, [r7, #12]
    cbf4:	2204      	movs	r2, #4
    cbf6:	4618      	mov	r0, r3
    cbf8:	4b36      	ldr	r3, [pc, #216]	; (ccd4 <usbdc_set_interface+0x134>)
    cbfa:	4798      	blx	r3
    cbfc:	6138      	str	r0, [r7, #16]
    cbfe:	693b      	ldr	r3, [r7, #16]
    cc00:	2b00      	cmp	r3, #0
    cc02:	d113      	bne.n	cc2c <usbdc_set_interface+0x8c>
		return false;
    cc04:	2300      	movs	r3, #0
    cc06:	e05b      	b.n	ccc0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cc08:	68bb      	ldr	r3, [r7, #8]
    cc0a:	4618      	mov	r0, r3
    cc0c:	4b32      	ldr	r3, [pc, #200]	; (ccd8 <usbdc_set_interface+0x138>)
    cc0e:	4798      	blx	r3
    cc10:	4603      	mov	r3, r0
    cc12:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cc14:	68bb      	ldr	r3, [r7, #8]
    cc16:	68f9      	ldr	r1, [r7, #12]
    cc18:	2204      	movs	r2, #4
    cc1a:	4618      	mov	r0, r3
    cc1c:	4b2d      	ldr	r3, [pc, #180]	; (ccd4 <usbdc_set_interface+0x134>)
    cc1e:	4798      	blx	r3
    cc20:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cc22:	693b      	ldr	r3, [r7, #16]
    cc24:	2b00      	cmp	r3, #0
    cc26:	d101      	bne.n	cc2c <usbdc_set_interface+0x8c>
			return false;
    cc28:	2300      	movs	r3, #0
    cc2a:	e049      	b.n	ccc0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cc2c:	693b      	ldr	r3, [r7, #16]
    cc2e:	3302      	adds	r3, #2
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	b29b      	uxth	r3, r3
    cc34:	88ba      	ldrh	r2, [r7, #4]
    cc36:	429a      	cmp	r2, r3
    cc38:	d1e6      	bne.n	cc08 <usbdc_set_interface+0x68>
    cc3a:	693b      	ldr	r3, [r7, #16]
    cc3c:	3303      	adds	r3, #3
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	b29b      	uxth	r3, r3
    cc42:	88fa      	ldrh	r2, [r7, #6]
    cc44:	429a      	cmp	r2, r3
    cc46:	d1df      	bne.n	cc08 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cc48:	693b      	ldr	r3, [r7, #16]
    cc4a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cc4c:	4b1e      	ldr	r3, [pc, #120]	; (ccc8 <usbdc_set_interface+0x128>)
    cc4e:	691b      	ldr	r3, [r3, #16]
    cc50:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cc52:	e031      	b.n	ccb8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cc54:	697b      	ldr	r3, [r7, #20]
    cc56:	685b      	ldr	r3, [r3, #4]
    cc58:	f107 0208 	add.w	r2, r7, #8
    cc5c:	2101      	movs	r1, #1
    cc5e:	6978      	ldr	r0, [r7, #20]
    cc60:	4798      	blx	r3
    cc62:	4603      	mov	r3, r0
    cc64:	2b00      	cmp	r3, #0
    cc66:	d003      	beq.n	cc70 <usbdc_set_interface+0xd0>
			func = func->next;
    cc68:	697b      	ldr	r3, [r7, #20]
    cc6a:	681b      	ldr	r3, [r3, #0]
    cc6c:	617b      	str	r3, [r7, #20]
    cc6e:	e023      	b.n	ccb8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cc70:	697b      	ldr	r3, [r7, #20]
    cc72:	685b      	ldr	r3, [r3, #4]
    cc74:	f107 0208 	add.w	r2, r7, #8
    cc78:	2100      	movs	r1, #0
    cc7a:	6978      	ldr	r0, [r7, #20]
    cc7c:	4798      	blx	r3
    cc7e:	4603      	mov	r3, r0
    cc80:	2b00      	cmp	r3, #0
    cc82:	d117      	bne.n	ccb4 <usbdc_set_interface+0x114>
			if (alt_set) {
    cc84:	88fb      	ldrh	r3, [r7, #6]
    cc86:	2b00      	cmp	r3, #0
    cc88:	d00c      	beq.n	cca4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cc8a:	4b0f      	ldr	r3, [pc, #60]	; (ccc8 <usbdc_set_interface+0x128>)
    cc8c:	7f5b      	ldrb	r3, [r3, #29]
    cc8e:	b25a      	sxtb	r2, r3
    cc90:	88bb      	ldrh	r3, [r7, #4]
    cc92:	2101      	movs	r1, #1
    cc94:	fa01 f303 	lsl.w	r3, r1, r3
    cc98:	b25b      	sxtb	r3, r3
    cc9a:	4313      	orrs	r3, r2
    cc9c:	b25b      	sxtb	r3, r3
    cc9e:	b2da      	uxtb	r2, r3
    cca0:	4b09      	ldr	r3, [pc, #36]	; (ccc8 <usbdc_set_interface+0x128>)
    cca2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cca4:	2300      	movs	r3, #0
    cca6:	2200      	movs	r2, #0
    cca8:	2100      	movs	r1, #0
    ccaa:	2000      	movs	r0, #0
    ccac:	4c0b      	ldr	r4, [pc, #44]	; (ccdc <usbdc_set_interface+0x13c>)
    ccae:	47a0      	blx	r4
			return true;
    ccb0:	2301      	movs	r3, #1
    ccb2:	e005      	b.n	ccc0 <usbdc_set_interface+0x120>
		} else {
			return false;
    ccb4:	2300      	movs	r3, #0
    ccb6:	e003      	b.n	ccc0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    ccb8:	697b      	ldr	r3, [r7, #20]
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d1ca      	bne.n	cc54 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    ccbe:	2300      	movs	r3, #0
}
    ccc0:	4618      	mov	r0, r3
    ccc2:	371c      	adds	r7, #28
    ccc4:	46bd      	mov	sp, r7
    ccc6:	bd90      	pop	{r4, r7, pc}
    ccc8:	200010bc 	.word	0x200010bc
    cccc:	0000d405 	.word	0x0000d405
    ccd0:	0000c5b1 	.word	0x0000c5b1
    ccd4:	0000d345 	.word	0x0000d345
    ccd8:	0000c58d 	.word	0x0000c58d
    ccdc:	0000d0b5 	.word	0x0000d0b5

0000cce0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cce0:	b590      	push	{r4, r7, lr}
    cce2:	b083      	sub	sp, #12
    cce4:	af00      	add	r7, sp, #0
    cce6:	4603      	mov	r3, r0
    cce8:	6039      	str	r1, [r7, #0]
    ccea:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ccec:	683b      	ldr	r3, [r7, #0]
    ccee:	785b      	ldrb	r3, [r3, #1]
    ccf0:	3b01      	subs	r3, #1
    ccf2:	2b0a      	cmp	r3, #10
    ccf4:	d85b      	bhi.n	cdae <usbdc_set_req+0xce>
    ccf6:	a201      	add	r2, pc, #4	; (adr r2, ccfc <usbdc_set_req+0x1c>)
    ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccfc:	0000cd7b 	.word	0x0000cd7b
    cd00:	0000cdaf 	.word	0x0000cdaf
    cd04:	0000cd89 	.word	0x0000cd89
    cd08:	0000cdaf 	.word	0x0000cdaf
    cd0c:	0000cd29 	.word	0x0000cd29
    cd10:	0000cdaf 	.word	0x0000cdaf
    cd14:	0000cdaf 	.word	0x0000cdaf
    cd18:	0000cdaf 	.word	0x0000cdaf
    cd1c:	0000cd43 	.word	0x0000cd43
    cd20:	0000cdaf 	.word	0x0000cdaf
    cd24:	0000cd97 	.word	0x0000cd97
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cd28:	79f8      	ldrb	r0, [r7, #7]
    cd2a:	2301      	movs	r3, #1
    cd2c:	2200      	movs	r2, #0
    cd2e:	2100      	movs	r1, #0
    cd30:	4c21      	ldr	r4, [pc, #132]	; (cdb8 <usbdc_set_req+0xd8>)
    cd32:	47a0      	blx	r4
    cd34:	4603      	mov	r3, r0
    cd36:	2b00      	cmp	r3, #0
    cd38:	bf0c      	ite	eq
    cd3a:	2301      	moveq	r3, #1
    cd3c:	2300      	movne	r3, #0
    cd3e:	b2db      	uxtb	r3, r3
    cd40:	e036      	b.n	cdb0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cd42:	683b      	ldr	r3, [r7, #0]
    cd44:	885b      	ldrh	r3, [r3, #2]
    cd46:	b29b      	uxth	r3, r3
    cd48:	b2db      	uxtb	r3, r3
    cd4a:	4618      	mov	r0, r3
    cd4c:	4b1b      	ldr	r3, [pc, #108]	; (cdbc <usbdc_set_req+0xdc>)
    cd4e:	4798      	blx	r3
    cd50:	4603      	mov	r3, r0
    cd52:	f083 0301 	eor.w	r3, r3, #1
    cd56:	b2db      	uxtb	r3, r3
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d001      	beq.n	cd60 <usbdc_set_req+0x80>
			return false;
    cd5c:	2300      	movs	r3, #0
    cd5e:	e027      	b.n	cdb0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cd60:	79f8      	ldrb	r0, [r7, #7]
    cd62:	2301      	movs	r3, #1
    cd64:	2200      	movs	r2, #0
    cd66:	2100      	movs	r1, #0
    cd68:	4c13      	ldr	r4, [pc, #76]	; (cdb8 <usbdc_set_req+0xd8>)
    cd6a:	47a0      	blx	r4
    cd6c:	4603      	mov	r3, r0
    cd6e:	2b00      	cmp	r3, #0
    cd70:	bf0c      	ite	eq
    cd72:	2301      	moveq	r3, #1
    cd74:	2300      	movne	r3, #0
    cd76:	b2db      	uxtb	r3, r3
    cd78:	e01a      	b.n	cdb0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cd7a:	79fb      	ldrb	r3, [r7, #7]
    cd7c:	6839      	ldr	r1, [r7, #0]
    cd7e:	4618      	mov	r0, r3
    cd80:	4b0f      	ldr	r3, [pc, #60]	; (cdc0 <usbdc_set_req+0xe0>)
    cd82:	4798      	blx	r3
    cd84:	4603      	mov	r3, r0
    cd86:	e013      	b.n	cdb0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cd88:	79fb      	ldrb	r3, [r7, #7]
    cd8a:	6839      	ldr	r1, [r7, #0]
    cd8c:	4618      	mov	r0, r3
    cd8e:	4b0d      	ldr	r3, [pc, #52]	; (cdc4 <usbdc_set_req+0xe4>)
    cd90:	4798      	blx	r3
    cd92:	4603      	mov	r3, r0
    cd94:	e00c      	b.n	cdb0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cd96:	683b      	ldr	r3, [r7, #0]
    cd98:	885b      	ldrh	r3, [r3, #2]
    cd9a:	b29a      	uxth	r2, r3
    cd9c:	683b      	ldr	r3, [r7, #0]
    cd9e:	889b      	ldrh	r3, [r3, #4]
    cda0:	b29b      	uxth	r3, r3
    cda2:	4619      	mov	r1, r3
    cda4:	4610      	mov	r0, r2
    cda6:	4b08      	ldr	r3, [pc, #32]	; (cdc8 <usbdc_set_req+0xe8>)
    cda8:	4798      	blx	r3
    cdaa:	4603      	mov	r3, r0
    cdac:	e000      	b.n	cdb0 <usbdc_set_req+0xd0>
	default:
		return false;
    cdae:	2300      	movs	r3, #0
	}
}
    cdb0:	4618      	mov	r0, r3
    cdb2:	370c      	adds	r7, #12
    cdb4:	46bd      	mov	sp, r7
    cdb6:	bd90      	pop	{r4, r7, pc}
    cdb8:	0000d0b5 	.word	0x0000d0b5
    cdbc:	0000ca95 	.word	0x0000ca95
    cdc0:	0000c9b1 	.word	0x0000c9b1
    cdc4:	0000ca09 	.word	0x0000ca09
    cdc8:	0000cba1 	.word	0x0000cba1

0000cdcc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cdcc:	b580      	push	{r7, lr}
    cdce:	b082      	sub	sp, #8
    cdd0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cdd2:	4b0a      	ldr	r3, [pc, #40]	; (cdfc <usbdc_sof_notify+0x30>)
    cdd4:	685b      	ldr	r3, [r3, #4]
    cdd6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cdd8:	e009      	b.n	cdee <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cdda:	687b      	ldr	r3, [r7, #4]
    cddc:	685b      	ldr	r3, [r3, #4]
    cdde:	2b00      	cmp	r3, #0
    cde0:	d002      	beq.n	cde8 <usbdc_sof_notify+0x1c>
			sof->cb();
    cde2:	687b      	ldr	r3, [r7, #4]
    cde4:	685b      	ldr	r3, [r3, #4]
    cde6:	4798      	blx	r3
		}
		sof = sof->next;
    cde8:	687b      	ldr	r3, [r7, #4]
    cdea:	681b      	ldr	r3, [r3, #0]
    cdec:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cdee:	687b      	ldr	r3, [r7, #4]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d1f2      	bne.n	cdda <usbdc_sof_notify+0xe>
	}
}
    cdf4:	bf00      	nop
    cdf6:	3708      	adds	r7, #8
    cdf8:	46bd      	mov	sp, r7
    cdfa:	bd80      	pop	{r7, pc}
    cdfc:	200010bc 	.word	0x200010bc

0000ce00 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ce00:	b580      	push	{r7, lr}
    ce02:	b084      	sub	sp, #16
    ce04:	af00      	add	r7, sp, #0
    ce06:	4603      	mov	r3, r0
    ce08:	6039      	str	r1, [r7, #0]
    ce0a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ce0c:	4b0b      	ldr	r3, [pc, #44]	; (ce3c <usbdc_change_notify+0x3c>)
    ce0e:	68db      	ldr	r3, [r3, #12]
    ce10:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    ce12:	e00c      	b.n	ce2e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    ce14:	68fb      	ldr	r3, [r7, #12]
    ce16:	685b      	ldr	r3, [r3, #4]
    ce18:	2b00      	cmp	r3, #0
    ce1a:	d005      	beq.n	ce28 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    ce1c:	68fb      	ldr	r3, [r7, #12]
    ce1e:	685b      	ldr	r3, [r3, #4]
    ce20:	79fa      	ldrb	r2, [r7, #7]
    ce22:	6839      	ldr	r1, [r7, #0]
    ce24:	4610      	mov	r0, r2
    ce26:	4798      	blx	r3
		}
		cg = cg->next;
    ce28:	68fb      	ldr	r3, [r7, #12]
    ce2a:	681b      	ldr	r3, [r3, #0]
    ce2c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    ce2e:	68fb      	ldr	r3, [r7, #12]
    ce30:	2b00      	cmp	r3, #0
    ce32:	d1ef      	bne.n	ce14 <usbdc_change_notify+0x14>
	}
}
    ce34:	bf00      	nop
    ce36:	3710      	adds	r7, #16
    ce38:	46bd      	mov	sp, r7
    ce3a:	bd80      	pop	{r7, pc}
    ce3c:	200010bc 	.word	0x200010bc

0000ce40 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ce40:	b580      	push	{r7, lr}
    ce42:	b084      	sub	sp, #16
    ce44:	af00      	add	r7, sp, #0
    ce46:	4603      	mov	r3, r0
    ce48:	6039      	str	r1, [r7, #0]
    ce4a:	71fb      	strb	r3, [r7, #7]
    ce4c:	4613      	mov	r3, r2
    ce4e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ce50:	4b12      	ldr	r3, [pc, #72]	; (ce9c <usbdc_request_handler+0x5c>)
    ce52:	689b      	ldr	r3, [r3, #8]
    ce54:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    ce56:	e019      	b.n	ce8c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    ce58:	68fb      	ldr	r3, [r7, #12]
    ce5a:	685b      	ldr	r3, [r3, #4]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d012      	beq.n	ce86 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    ce60:	68fb      	ldr	r3, [r7, #12]
    ce62:	685b      	ldr	r3, [r3, #4]
    ce64:	79ba      	ldrb	r2, [r7, #6]
    ce66:	79f8      	ldrb	r0, [r7, #7]
    ce68:	6839      	ldr	r1, [r7, #0]
    ce6a:	4798      	blx	r3
    ce6c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    ce6e:	68bb      	ldr	r3, [r7, #8]
    ce70:	2b00      	cmp	r3, #0
    ce72:	d101      	bne.n	ce78 <usbdc_request_handler+0x38>
				return true;
    ce74:	2301      	movs	r3, #1
    ce76:	e00d      	b.n	ce94 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    ce78:	68bb      	ldr	r3, [r7, #8]
    ce7a:	f113 0f0a 	cmn.w	r3, #10
    ce7e:	d002      	beq.n	ce86 <usbdc_request_handler+0x46>
				return -1;
    ce80:	f04f 33ff 	mov.w	r3, #4294967295
    ce84:	e006      	b.n	ce94 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    ce86:	68fb      	ldr	r3, [r7, #12]
    ce88:	681b      	ldr	r3, [r3, #0]
    ce8a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ce8c:	68fb      	ldr	r3, [r7, #12]
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d1e2      	bne.n	ce58 <usbdc_request_handler+0x18>
	}
	return false;
    ce92:	2300      	movs	r3, #0
}
    ce94:	4618      	mov	r0, r3
    ce96:	3710      	adds	r7, #16
    ce98:	46bd      	mov	sp, r7
    ce9a:	bd80      	pop	{r7, pc}
    ce9c:	200010bc 	.word	0x200010bc

0000cea0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cea0:	b580      	push	{r7, lr}
    cea2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cea4:	4b01      	ldr	r3, [pc, #4]	; (ceac <usbd_sof_cb+0xc>)
    cea6:	4798      	blx	r3
}
    cea8:	bf00      	nop
    ceaa:	bd80      	pop	{r7, pc}
    ceac:	0000cdcd 	.word	0x0000cdcd

0000ceb0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ceb0:	b580      	push	{r7, lr}
    ceb2:	b082      	sub	sp, #8
    ceb4:	af00      	add	r7, sp, #0
    ceb6:	4603      	mov	r3, r0
    ceb8:	6039      	str	r1, [r7, #0]
    ceba:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cebc:	79fb      	ldrb	r3, [r7, #7]
    cebe:	2200      	movs	r2, #0
    cec0:	6839      	ldr	r1, [r7, #0]
    cec2:	4618      	mov	r0, r3
    cec4:	4b14      	ldr	r3, [pc, #80]	; (cf18 <usbdc_cb_ctl_req+0x68>)
    cec6:	4798      	blx	r3
    cec8:	4603      	mov	r3, r0
    ceca:	f1b3 3fff 	cmp.w	r3, #4294967295
    cece:	d00b      	beq.n	cee8 <usbdc_cb_ctl_req+0x38>
    ced0:	2b01      	cmp	r3, #1
    ced2:	d007      	beq.n	cee4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ced4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ced6:	683b      	ldr	r3, [r7, #0]
    ced8:	781b      	ldrb	r3, [r3, #0]
    ceda:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cede:	2b00      	cmp	r3, #0
    cee0:	d007      	beq.n	cef2 <usbdc_cb_ctl_req+0x42>
    cee2:	e003      	b.n	ceec <usbdc_cb_ctl_req+0x3c>
		return true;
    cee4:	2301      	movs	r3, #1
    cee6:	e013      	b.n	cf10 <usbdc_cb_ctl_req+0x60>
		return false;
    cee8:	2300      	movs	r3, #0
    ceea:	e011      	b.n	cf10 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ceec:	2b80      	cmp	r3, #128	; 0x80
    ceee:	d007      	beq.n	cf00 <usbdc_cb_ctl_req+0x50>
    cef0:	e00d      	b.n	cf0e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cef2:	79fb      	ldrb	r3, [r7, #7]
    cef4:	6839      	ldr	r1, [r7, #0]
    cef6:	4618      	mov	r0, r3
    cef8:	4b08      	ldr	r3, [pc, #32]	; (cf1c <usbdc_cb_ctl_req+0x6c>)
    cefa:	4798      	blx	r3
    cefc:	4603      	mov	r3, r0
    cefe:	e007      	b.n	cf10 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cf00:	79fb      	ldrb	r3, [r7, #7]
    cf02:	6839      	ldr	r1, [r7, #0]
    cf04:	4618      	mov	r0, r3
    cf06:	4b06      	ldr	r3, [pc, #24]	; (cf20 <usbdc_cb_ctl_req+0x70>)
    cf08:	4798      	blx	r3
    cf0a:	4603      	mov	r3, r0
    cf0c:	e000      	b.n	cf10 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cf0e:	2300      	movs	r3, #0
	}
}
    cf10:	4618      	mov	r0, r3
    cf12:	3708      	adds	r7, #8
    cf14:	46bd      	mov	sp, r7
    cf16:	bd80      	pop	{r7, pc}
    cf18:	0000ce41 	.word	0x0000ce41
    cf1c:	0000cce1 	.word	0x0000cce1
    cf20:	0000c909 	.word	0x0000c909

0000cf24 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cf24:	b580      	push	{r7, lr}
    cf26:	b082      	sub	sp, #8
    cf28:	af00      	add	r7, sp, #0
    cf2a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	781b      	ldrb	r3, [r3, #0]
    cf30:	2b00      	cmp	r3, #0
    cf32:	d135      	bne.n	cfa0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cf34:	687b      	ldr	r3, [r7, #4]
    cf36:	785b      	ldrb	r3, [r3, #1]
    cf38:	2b05      	cmp	r3, #5
    cf3a:	d019      	beq.n	cf70 <usbdc_ctrl_status_end+0x4c>
    cf3c:	2b09      	cmp	r3, #9
    cf3e:	d000      	beq.n	cf42 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cf40:	e02f      	b.n	cfa2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cf42:	687b      	ldr	r3, [r7, #4]
    cf44:	885b      	ldrh	r3, [r3, #2]
    cf46:	b29b      	uxth	r3, r3
    cf48:	b2da      	uxtb	r2, r3
    cf4a:	4b17      	ldr	r3, [pc, #92]	; (cfa8 <usbdc_ctrl_status_end+0x84>)
    cf4c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cf4e:	687b      	ldr	r3, [r7, #4]
    cf50:	885b      	ldrh	r3, [r3, #2]
    cf52:	b29b      	uxth	r3, r3
    cf54:	2b00      	cmp	r3, #0
    cf56:	d001      	beq.n	cf5c <usbdc_ctrl_status_end+0x38>
    cf58:	2204      	movs	r2, #4
    cf5a:	e000      	b.n	cf5e <usbdc_ctrl_status_end+0x3a>
    cf5c:	2203      	movs	r2, #3
    cf5e:	4b12      	ldr	r3, [pc, #72]	; (cfa8 <usbdc_ctrl_status_end+0x84>)
    cf60:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cf62:	4b11      	ldr	r3, [pc, #68]	; (cfa8 <usbdc_ctrl_status_end+0x84>)
    cf64:	7e9b      	ldrb	r3, [r3, #26]
    cf66:	4619      	mov	r1, r3
    cf68:	2001      	movs	r0, #1
    cf6a:	4b10      	ldr	r3, [pc, #64]	; (cfac <usbdc_ctrl_status_end+0x88>)
    cf6c:	4798      	blx	r3
		break;
    cf6e:	e018      	b.n	cfa2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cf70:	687b      	ldr	r3, [r7, #4]
    cf72:	885b      	ldrh	r3, [r3, #2]
    cf74:	b29b      	uxth	r3, r3
    cf76:	b2db      	uxtb	r3, r3
    cf78:	4618      	mov	r0, r3
    cf7a:	4b0d      	ldr	r3, [pc, #52]	; (cfb0 <usbdc_ctrl_status_end+0x8c>)
    cf7c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cf7e:	687b      	ldr	r3, [r7, #4]
    cf80:	885b      	ldrh	r3, [r3, #2]
    cf82:	b29b      	uxth	r3, r3
    cf84:	2b00      	cmp	r3, #0
    cf86:	d001      	beq.n	cf8c <usbdc_ctrl_status_end+0x68>
    cf88:	2203      	movs	r2, #3
    cf8a:	e000      	b.n	cf8e <usbdc_ctrl_status_end+0x6a>
    cf8c:	2202      	movs	r2, #2
    cf8e:	4b06      	ldr	r3, [pc, #24]	; (cfa8 <usbdc_ctrl_status_end+0x84>)
    cf90:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cf92:	4b05      	ldr	r3, [pc, #20]	; (cfa8 <usbdc_ctrl_status_end+0x84>)
    cf94:	7e9b      	ldrb	r3, [r3, #26]
    cf96:	4619      	mov	r1, r3
    cf98:	2001      	movs	r0, #1
    cf9a:	4b04      	ldr	r3, [pc, #16]	; (cfac <usbdc_ctrl_status_end+0x88>)
    cf9c:	4798      	blx	r3
		break;
    cf9e:	e000      	b.n	cfa2 <usbdc_ctrl_status_end+0x7e>
		return;
    cfa0:	bf00      	nop
	}
}
    cfa2:	3708      	adds	r7, #8
    cfa4:	46bd      	mov	sp, r7
    cfa6:	bd80      	pop	{r7, pc}
    cfa8:	200010bc 	.word	0x200010bc
    cfac:	0000ce01 	.word	0x0000ce01
    cfb0:	0000cb81 	.word	0x0000cb81

0000cfb4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cfb4:	b580      	push	{r7, lr}
    cfb6:	b082      	sub	sp, #8
    cfb8:	af00      	add	r7, sp, #0
    cfba:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cfbc:	2201      	movs	r2, #1
    cfbe:	6879      	ldr	r1, [r7, #4]
    cfc0:	2000      	movs	r0, #0
    cfc2:	4b03      	ldr	r3, [pc, #12]	; (cfd0 <usbdc_ctrl_data_end+0x1c>)
    cfc4:	4798      	blx	r3
	return false;
    cfc6:	2300      	movs	r3, #0
}
    cfc8:	4618      	mov	r0, r3
    cfca:	3708      	adds	r7, #8
    cfcc:	46bd      	mov	sp, r7
    cfce:	bd80      	pop	{r7, pc}
    cfd0:	0000ce41 	.word	0x0000ce41

0000cfd4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cfd4:	b580      	push	{r7, lr}
    cfd6:	b082      	sub	sp, #8
    cfd8:	af00      	add	r7, sp, #0
    cfda:	4603      	mov	r3, r0
    cfdc:	603a      	str	r2, [r7, #0]
    cfde:	71fb      	strb	r3, [r7, #7]
    cfe0:	460b      	mov	r3, r1
    cfe2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cfe4:	79bb      	ldrb	r3, [r7, #6]
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d002      	beq.n	cff0 <usbdc_cb_ctl_done+0x1c>
    cfea:	2b01      	cmp	r3, #1
    cfec:	d004      	beq.n	cff8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cfee:	e008      	b.n	d002 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cff0:	6838      	ldr	r0, [r7, #0]
    cff2:	4b06      	ldr	r3, [pc, #24]	; (d00c <usbdc_cb_ctl_done+0x38>)
    cff4:	4798      	blx	r3
		break;
    cff6:	e004      	b.n	d002 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cff8:	6838      	ldr	r0, [r7, #0]
    cffa:	4b05      	ldr	r3, [pc, #20]	; (d010 <usbdc_cb_ctl_done+0x3c>)
    cffc:	4798      	blx	r3
    cffe:	4603      	mov	r3, r0
    d000:	e000      	b.n	d004 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d002:	2300      	movs	r3, #0
}
    d004:	4618      	mov	r0, r3
    d006:	3708      	adds	r7, #8
    d008:	46bd      	mov	sp, r7
    d00a:	bd80      	pop	{r7, pc}
    d00c:	0000cf25 	.word	0x0000cf25
    d010:	0000cfb5 	.word	0x0000cfb5

0000d014 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d014:	b580      	push	{r7, lr}
    d016:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d018:	4b10      	ldr	r3, [pc, #64]	; (d05c <usbdc_reset+0x48>)
    d01a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d01c:	4b10      	ldr	r3, [pc, #64]	; (d060 <usbdc_reset+0x4c>)
    d01e:	2202      	movs	r2, #2
    d020:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d022:	4b0f      	ldr	r3, [pc, #60]	; (d060 <usbdc_reset+0x4c>)
    d024:	2200      	movs	r2, #0
    d026:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d028:	4b0d      	ldr	r3, [pc, #52]	; (d060 <usbdc_reset+0x4c>)
    d02a:	2200      	movs	r2, #0
    d02c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d02e:	2000      	movs	r0, #0
    d030:	4b0c      	ldr	r3, [pc, #48]	; (d064 <usbdc_reset+0x50>)
    d032:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d034:	4b0a      	ldr	r3, [pc, #40]	; (d060 <usbdc_reset+0x4c>)
    d036:	7f1b      	ldrb	r3, [r3, #28]
    d038:	4618      	mov	r0, r3
    d03a:	4b0b      	ldr	r3, [pc, #44]	; (d068 <usbdc_reset+0x54>)
    d03c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d03e:	4a0b      	ldr	r2, [pc, #44]	; (d06c <usbdc_reset+0x58>)
    d040:	2100      	movs	r1, #0
    d042:	2000      	movs	r0, #0
    d044:	4b0a      	ldr	r3, [pc, #40]	; (d070 <usbdc_reset+0x5c>)
    d046:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d048:	4a0a      	ldr	r2, [pc, #40]	; (d074 <usbdc_reset+0x60>)
    d04a:	2102      	movs	r1, #2
    d04c:	2000      	movs	r0, #0
    d04e:	4b08      	ldr	r3, [pc, #32]	; (d070 <usbdc_reset+0x5c>)
    d050:	4798      	blx	r3
	usb_d_ep_enable(0);
    d052:	2000      	movs	r0, #0
    d054:	4b08      	ldr	r3, [pc, #32]	; (d078 <usbdc_reset+0x64>)
    d056:	4798      	blx	r3
}
    d058:	bf00      	nop
    d05a:	bd80      	pop	{r7, pc}
    d05c:	0000ca61 	.word	0x0000ca61
    d060:	200010bc 	.word	0x200010bc
    d064:	00003891 	.word	0x00003891
    d068:	000037cd 	.word	0x000037cd
    d06c:	0000ceb1 	.word	0x0000ceb1
    d070:	00003be5 	.word	0x00003be5
    d074:	0000cfd5 	.word	0x0000cfd5
    d078:	000038e1 	.word	0x000038e1

0000d07c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d07c:	b580      	push	{r7, lr}
    d07e:	b082      	sub	sp, #8
    d080:	af00      	add	r7, sp, #0
    d082:	4603      	mov	r3, r0
    d084:	6039      	str	r1, [r7, #0]
    d086:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d088:	79fb      	ldrb	r3, [r7, #7]
    d08a:	2b00      	cmp	r3, #0
    d08c:	d002      	beq.n	d094 <usbd_event_cb+0x18>
    d08e:	2b01      	cmp	r3, #1
    d090:	d005      	beq.n	d09e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d092:	e007      	b.n	d0a4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d094:	6839      	ldr	r1, [r7, #0]
    d096:	2000      	movs	r0, #0
    d098:	4b04      	ldr	r3, [pc, #16]	; (d0ac <usbd_event_cb+0x30>)
    d09a:	4798      	blx	r3
		break;
    d09c:	e002      	b.n	d0a4 <usbd_event_cb+0x28>
		usbdc_reset();
    d09e:	4b04      	ldr	r3, [pc, #16]	; (d0b0 <usbd_event_cb+0x34>)
    d0a0:	4798      	blx	r3
		break;
    d0a2:	bf00      	nop
	}
}
    d0a4:	bf00      	nop
    d0a6:	3708      	adds	r7, #8
    d0a8:	46bd      	mov	sp, r7
    d0aa:	bd80      	pop	{r7, pc}
    d0ac:	0000ce01 	.word	0x0000ce01
    d0b0:	0000d015 	.word	0x0000d015

0000d0b4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b088      	sub	sp, #32
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	60b9      	str	r1, [r7, #8]
    d0bc:	607a      	str	r2, [r7, #4]
    d0be:	461a      	mov	r2, r3
    d0c0:	4603      	mov	r3, r0
    d0c2:	73fb      	strb	r3, [r7, #15]
    d0c4:	4613      	mov	r3, r2
    d0c6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d0c8:	68bb      	ldr	r3, [r7, #8]
    d0ca:	617b      	str	r3, [r7, #20]
    d0cc:	687b      	ldr	r3, [r7, #4]
    d0ce:	61bb      	str	r3, [r7, #24]
    d0d0:	7bfb      	ldrb	r3, [r7, #15]
    d0d2:	773b      	strb	r3, [r7, #28]
    d0d4:	7bbb      	ldrb	r3, [r7, #14]
    d0d6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d0d8:	f107 0314 	add.w	r3, r7, #20
    d0dc:	4618      	mov	r0, r3
    d0de:	4b03      	ldr	r3, [pc, #12]	; (d0ec <usbdc_xfer+0x38>)
    d0e0:	4798      	blx	r3
    d0e2:	4603      	mov	r3, r0
}
    d0e4:	4618      	mov	r0, r3
    d0e6:	3720      	adds	r7, #32
    d0e8:	46bd      	mov	sp, r7
    d0ea:	bd80      	pop	{r7, pc}
    d0ec:	00003951 	.word	0x00003951

0000d0f0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	4603      	mov	r3, r0
    d0f8:	6039      	str	r1, [r7, #0]
    d0fa:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d0fc:	79fb      	ldrb	r3, [r7, #7]
    d0fe:	2b01      	cmp	r3, #1
    d100:	d009      	beq.n	d116 <usbdc_register_handler+0x26>
    d102:	2b02      	cmp	r3, #2
    d104:	d00c      	beq.n	d120 <usbdc_register_handler+0x30>
    d106:	2b00      	cmp	r3, #0
    d108:	d000      	beq.n	d10c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d10a:	e00e      	b.n	d12a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d10c:	6839      	ldr	r1, [r7, #0]
    d10e:	4809      	ldr	r0, [pc, #36]	; (d134 <usbdc_register_handler+0x44>)
    d110:	4b09      	ldr	r3, [pc, #36]	; (d138 <usbdc_register_handler+0x48>)
    d112:	4798      	blx	r3
		break;
    d114:	e009      	b.n	d12a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d116:	6839      	ldr	r1, [r7, #0]
    d118:	4808      	ldr	r0, [pc, #32]	; (d13c <usbdc_register_handler+0x4c>)
    d11a:	4b07      	ldr	r3, [pc, #28]	; (d138 <usbdc_register_handler+0x48>)
    d11c:	4798      	blx	r3
		break;
    d11e:	e004      	b.n	d12a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d120:	6839      	ldr	r1, [r7, #0]
    d122:	4807      	ldr	r0, [pc, #28]	; (d140 <usbdc_register_handler+0x50>)
    d124:	4b04      	ldr	r3, [pc, #16]	; (d138 <usbdc_register_handler+0x48>)
    d126:	4798      	blx	r3
		break;
    d128:	bf00      	nop
	}
}
    d12a:	bf00      	nop
    d12c:	3708      	adds	r7, #8
    d12e:	46bd      	mov	sp, r7
    d130:	bd80      	pop	{r7, pc}
    d132:	bf00      	nop
    d134:	200010c0 	.word	0x200010c0
    d138:	00003d3d 	.word	0x00003d3d
    d13c:	200010c4 	.word	0x200010c4
    d140:	200010c8 	.word	0x200010c8

0000d144 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d144:	b580      	push	{r7, lr}
    d146:	b084      	sub	sp, #16
    d148:	af00      	add	r7, sp, #0
    d14a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d14c:	687b      	ldr	r3, [r7, #4]
    d14e:	2b00      	cmp	r3, #0
    d150:	bf14      	ite	ne
    d152:	2301      	movne	r3, #1
    d154:	2300      	moveq	r3, #0
    d156:	b2db      	uxtb	r3, r3
    d158:	f240 3255 	movw	r2, #853	; 0x355
    d15c:	4910      	ldr	r1, [pc, #64]	; (d1a0 <usbdc_init+0x5c>)
    d15e:	4618      	mov	r0, r3
    d160:	4b10      	ldr	r3, [pc, #64]	; (d1a4 <usbdc_init+0x60>)
    d162:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d164:	4b10      	ldr	r3, [pc, #64]	; (d1a8 <usbdc_init+0x64>)
    d166:	4798      	blx	r3
    d168:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d16a:	68fb      	ldr	r3, [r7, #12]
    d16c:	2b00      	cmp	r3, #0
    d16e:	da01      	bge.n	d174 <usbdc_init+0x30>
		return rc;
    d170:	68fb      	ldr	r3, [r7, #12]
    d172:	e010      	b.n	d196 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d174:	2220      	movs	r2, #32
    d176:	2100      	movs	r1, #0
    d178:	480c      	ldr	r0, [pc, #48]	; (d1ac <usbdc_init+0x68>)
    d17a:	4b0d      	ldr	r3, [pc, #52]	; (d1b0 <usbdc_init+0x6c>)
    d17c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d17e:	4a0b      	ldr	r2, [pc, #44]	; (d1ac <usbdc_init+0x68>)
    d180:	687b      	ldr	r3, [r7, #4]
    d182:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d184:	490b      	ldr	r1, [pc, #44]	; (d1b4 <usbdc_init+0x70>)
    d186:	2000      	movs	r0, #0
    d188:	4b0b      	ldr	r3, [pc, #44]	; (d1b8 <usbdc_init+0x74>)
    d18a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d18c:	490b      	ldr	r1, [pc, #44]	; (d1bc <usbdc_init+0x78>)
    d18e:	2001      	movs	r0, #1
    d190:	4b09      	ldr	r3, [pc, #36]	; (d1b8 <usbdc_init+0x74>)
    d192:	4798      	blx	r3

	return 0;
    d194:	2300      	movs	r3, #0
}
    d196:	4618      	mov	r0, r3
    d198:	3710      	adds	r7, #16
    d19a:	46bd      	mov	sp, r7
    d19c:	bd80      	pop	{r7, pc}
    d19e:	bf00      	nop
    d1a0:	00011110 	.word	0x00011110
    d1a4:	00003c61 	.word	0x00003c61
    d1a8:	000036b9 	.word	0x000036b9
    d1ac:	200010bc 	.word	0x200010bc
    d1b0:	0000ff45 	.word	0x0000ff45
    d1b4:	0000cea1 	.word	0x0000cea1
    d1b8:	00003765 	.word	0x00003765
    d1bc:	0000d07d 	.word	0x0000d07d

0000d1c0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d1c0:	b580      	push	{r7, lr}
    d1c2:	b082      	sub	sp, #8
    d1c4:	af00      	add	r7, sp, #0
    d1c6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d1c8:	6879      	ldr	r1, [r7, #4]
    d1ca:	4803      	ldr	r0, [pc, #12]	; (d1d8 <usbdc_register_function+0x18>)
    d1cc:	4b03      	ldr	r3, [pc, #12]	; (d1dc <usbdc_register_function+0x1c>)
    d1ce:	4798      	blx	r3
}
    d1d0:	bf00      	nop
    d1d2:	3708      	adds	r7, #8
    d1d4:	46bd      	mov	sp, r7
    d1d6:	bd80      	pop	{r7, pc}
    d1d8:	200010cc 	.word	0x200010cc
    d1dc:	00003d3d 	.word	0x00003d3d

0000d1e0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d1e0:	b580      	push	{r7, lr}
    d1e2:	b082      	sub	sp, #8
    d1e4:	af00      	add	r7, sp, #0
    d1e6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d1e8:	4b0f      	ldr	r3, [pc, #60]	; (d228 <usbdc_start+0x48>)
    d1ea:	7e9b      	ldrb	r3, [r3, #26]
    d1ec:	2b00      	cmp	r3, #0
    d1ee:	d002      	beq.n	d1f6 <usbdc_start+0x16>
		return ERR_BUSY;
    d1f0:	f06f 0303 	mvn.w	r3, #3
    d1f4:	e013      	b.n	d21e <usbdc_start+0x3e>
	}

	if (desces) {
    d1f6:	687b      	ldr	r3, [r7, #4]
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d00e      	beq.n	d21a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d1fc:	4a0a      	ldr	r2, [pc, #40]	; (d228 <usbdc_start+0x48>)
    d1fe:	687b      	ldr	r3, [r7, #4]
    d200:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d202:	687b      	ldr	r3, [r7, #4]
    d204:	681b      	ldr	r3, [r3, #0]
    d206:	79da      	ldrb	r2, [r3, #7]
    d208:	4b07      	ldr	r3, [pc, #28]	; (d228 <usbdc_start+0x48>)
    d20a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d20c:	4b06      	ldr	r3, [pc, #24]	; (d228 <usbdc_start+0x48>)
    d20e:	2201      	movs	r2, #1
    d210:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d212:	4b06      	ldr	r3, [pc, #24]	; (d22c <usbdc_start+0x4c>)
    d214:	4798      	blx	r3
	return ERR_NONE;
    d216:	2300      	movs	r3, #0
    d218:	e001      	b.n	d21e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d21a:	f06f 0308 	mvn.w	r3, #8
}
    d21e:	4618      	mov	r0, r3
    d220:	3708      	adds	r7, #8
    d222:	46bd      	mov	sp, r7
    d224:	bd80      	pop	{r7, pc}
    d226:	bf00      	nop
    d228:	200010bc 	.word	0x200010bc
    d22c:	00003789 	.word	0x00003789

0000d230 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d230:	b580      	push	{r7, lr}
    d232:	af00      	add	r7, sp, #0
	usb_d_attach();
    d234:	4b01      	ldr	r3, [pc, #4]	; (d23c <usbdc_attach+0xc>)
    d236:	4798      	blx	r3
}
    d238:	bf00      	nop
    d23a:	bd80      	pop	{r7, pc}
    d23c:	0000379d 	.word	0x0000379d

0000d240 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d240:	b480      	push	{r7}
    d242:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d244:	4b03      	ldr	r3, [pc, #12]	; (d254 <usbdc_get_ctrl_buffer+0x14>)
    d246:	695b      	ldr	r3, [r3, #20]
}
    d248:	4618      	mov	r0, r3
    d24a:	46bd      	mov	sp, r7
    d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d250:	4770      	bx	lr
    d252:	bf00      	nop
    d254:	200010bc 	.word	0x200010bc

0000d258 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d258:	b480      	push	{r7}
    d25a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d25c:	4b07      	ldr	r3, [pc, #28]	; (d27c <usbdc_get_state+0x24>)
    d25e:	7e9b      	ldrb	r3, [r3, #26]
    d260:	f003 0310 	and.w	r3, r3, #16
    d264:	2b00      	cmp	r3, #0
    d266:	d001      	beq.n	d26c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d268:	2310      	movs	r3, #16
    d26a:	e001      	b.n	d270 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d26c:	4b03      	ldr	r3, [pc, #12]	; (d27c <usbdc_get_state+0x24>)
    d26e:	7e9b      	ldrb	r3, [r3, #26]
}
    d270:	4618      	mov	r0, r3
    d272:	46bd      	mov	sp, r7
    d274:	f85d 7b04 	ldr.w	r7, [sp], #4
    d278:	4770      	bx	lr
    d27a:	bf00      	nop
    d27c:	200010bc 	.word	0x200010bc

0000d280 <usb_get_u16>:
{
    d280:	b480      	push	{r7}
    d282:	b083      	sub	sp, #12
    d284:	af00      	add	r7, sp, #0
    d286:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d288:	687b      	ldr	r3, [r7, #4]
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	b29a      	uxth	r2, r3
    d28e:	687b      	ldr	r3, [r7, #4]
    d290:	3301      	adds	r3, #1
    d292:	781b      	ldrb	r3, [r3, #0]
    d294:	b29b      	uxth	r3, r3
    d296:	021b      	lsls	r3, r3, #8
    d298:	b29b      	uxth	r3, r3
    d29a:	4413      	add	r3, r2
    d29c:	b29b      	uxth	r3, r3
}
    d29e:	4618      	mov	r0, r3
    d2a0:	370c      	adds	r7, #12
    d2a2:	46bd      	mov	sp, r7
    d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2a8:	4770      	bx	lr

0000d2aa <usb_desc_len>:
{
    d2aa:	b480      	push	{r7}
    d2ac:	b083      	sub	sp, #12
    d2ae:	af00      	add	r7, sp, #0
    d2b0:	6078      	str	r0, [r7, #4]
	return desc[0];
    d2b2:	687b      	ldr	r3, [r7, #4]
    d2b4:	781b      	ldrb	r3, [r3, #0]
}
    d2b6:	4618      	mov	r0, r3
    d2b8:	370c      	adds	r7, #12
    d2ba:	46bd      	mov	sp, r7
    d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2c0:	4770      	bx	lr

0000d2c2 <usb_desc_type>:
{
    d2c2:	b480      	push	{r7}
    d2c4:	b083      	sub	sp, #12
    d2c6:	af00      	add	r7, sp, #0
    d2c8:	6078      	str	r0, [r7, #4]
	return desc[1];
    d2ca:	687b      	ldr	r3, [r7, #4]
    d2cc:	3301      	adds	r3, #1
    d2ce:	781b      	ldrb	r3, [r3, #0]
}
    d2d0:	4618      	mov	r0, r3
    d2d2:	370c      	adds	r7, #12
    d2d4:	46bd      	mov	sp, r7
    d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2da:	4770      	bx	lr

0000d2dc <usb_desc_next>:
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	b082      	sub	sp, #8
    d2e0:	af00      	add	r7, sp, #0
    d2e2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d2e4:	6878      	ldr	r0, [r7, #4]
    d2e6:	4b05      	ldr	r3, [pc, #20]	; (d2fc <usb_desc_next+0x20>)
    d2e8:	4798      	blx	r3
    d2ea:	4603      	mov	r3, r0
    d2ec:	461a      	mov	r2, r3
    d2ee:	687b      	ldr	r3, [r7, #4]
    d2f0:	4413      	add	r3, r2
}
    d2f2:	4618      	mov	r0, r3
    d2f4:	3708      	adds	r7, #8
    d2f6:	46bd      	mov	sp, r7
    d2f8:	bd80      	pop	{r7, pc}
    d2fa:	bf00      	nop
    d2fc:	0000d2ab 	.word	0x0000d2ab

0000d300 <usb_cfg_desc_total_len>:
{
    d300:	b580      	push	{r7, lr}
    d302:	b082      	sub	sp, #8
    d304:	af00      	add	r7, sp, #0
    d306:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d308:	687b      	ldr	r3, [r7, #4]
    d30a:	3302      	adds	r3, #2
    d30c:	4618      	mov	r0, r3
    d30e:	4b03      	ldr	r3, [pc, #12]	; (d31c <usb_cfg_desc_total_len+0x1c>)
    d310:	4798      	blx	r3
    d312:	4603      	mov	r3, r0
}
    d314:	4618      	mov	r0, r3
    d316:	3708      	adds	r7, #8
    d318:	46bd      	mov	sp, r7
    d31a:	bd80      	pop	{r7, pc}
    d31c:	0000d281 	.word	0x0000d281

0000d320 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d320:	b580      	push	{r7, lr}
    d322:	b082      	sub	sp, #8
    d324:	af00      	add	r7, sp, #0
    d326:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d328:	6878      	ldr	r0, [r7, #4]
    d32a:	4b05      	ldr	r3, [pc, #20]	; (d340 <usb_cfg_desc_next+0x20>)
    d32c:	4798      	blx	r3
    d32e:	4603      	mov	r3, r0
    d330:	461a      	mov	r2, r3
    d332:	687b      	ldr	r3, [r7, #4]
    d334:	4413      	add	r3, r2
}
    d336:	4618      	mov	r0, r3
    d338:	3708      	adds	r7, #8
    d33a:	46bd      	mov	sp, r7
    d33c:	bd80      	pop	{r7, pc}
    d33e:	bf00      	nop
    d340:	0000d301 	.word	0x0000d301

0000d344 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d344:	b580      	push	{r7, lr}
    d346:	b084      	sub	sp, #16
    d348:	af00      	add	r7, sp, #0
    d34a:	60f8      	str	r0, [r7, #12]
    d34c:	60b9      	str	r1, [r7, #8]
    d34e:	4613      	mov	r3, r2
    d350:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d352:	e015      	b.n	d380 <usb_find_desc+0x3c>
		_desc_len_check();
    d354:	68f8      	ldr	r0, [r7, #12]
    d356:	4b0f      	ldr	r3, [pc, #60]	; (d394 <usb_find_desc+0x50>)
    d358:	4798      	blx	r3
    d35a:	4603      	mov	r3, r0
    d35c:	2b01      	cmp	r3, #1
    d35e:	d801      	bhi.n	d364 <usb_find_desc+0x20>
    d360:	2300      	movs	r3, #0
    d362:	e012      	b.n	d38a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d364:	68f8      	ldr	r0, [r7, #12]
    d366:	4b0c      	ldr	r3, [pc, #48]	; (d398 <usb_find_desc+0x54>)
    d368:	4798      	blx	r3
    d36a:	4603      	mov	r3, r0
    d36c:	461a      	mov	r2, r3
    d36e:	79fb      	ldrb	r3, [r7, #7]
    d370:	4293      	cmp	r3, r2
    d372:	d101      	bne.n	d378 <usb_find_desc+0x34>
			return desc;
    d374:	68fb      	ldr	r3, [r7, #12]
    d376:	e008      	b.n	d38a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d378:	68f8      	ldr	r0, [r7, #12]
    d37a:	4b08      	ldr	r3, [pc, #32]	; (d39c <usb_find_desc+0x58>)
    d37c:	4798      	blx	r3
    d37e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d380:	68fa      	ldr	r2, [r7, #12]
    d382:	68bb      	ldr	r3, [r7, #8]
    d384:	429a      	cmp	r2, r3
    d386:	d3e5      	bcc.n	d354 <usb_find_desc+0x10>
	}
	return NULL;
    d388:	2300      	movs	r3, #0
}
    d38a:	4618      	mov	r0, r3
    d38c:	3710      	adds	r7, #16
    d38e:	46bd      	mov	sp, r7
    d390:	bd80      	pop	{r7, pc}
    d392:	bf00      	nop
    d394:	0000d2ab 	.word	0x0000d2ab
    d398:	0000d2c3 	.word	0x0000d2c3
    d39c:	0000d2dd 	.word	0x0000d2dd

0000d3a0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d3a0:	b580      	push	{r7, lr}
    d3a2:	b082      	sub	sp, #8
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	6078      	str	r0, [r7, #4]
    d3a8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d3aa:	e019      	b.n	d3e0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d3ac:	6878      	ldr	r0, [r7, #4]
    d3ae:	4b12      	ldr	r3, [pc, #72]	; (d3f8 <usb_find_ep_desc+0x58>)
    d3b0:	4798      	blx	r3
    d3b2:	4603      	mov	r3, r0
    d3b4:	2b01      	cmp	r3, #1
    d3b6:	d801      	bhi.n	d3bc <usb_find_ep_desc+0x1c>
    d3b8:	2300      	movs	r3, #0
    d3ba:	e018      	b.n	d3ee <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d3bc:	6878      	ldr	r0, [r7, #4]
    d3be:	4b0f      	ldr	r3, [pc, #60]	; (d3fc <usb_find_ep_desc+0x5c>)
    d3c0:	4798      	blx	r3
    d3c2:	4603      	mov	r3, r0
    d3c4:	2b04      	cmp	r3, #4
    d3c6:	d010      	beq.n	d3ea <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d3c8:	6878      	ldr	r0, [r7, #4]
    d3ca:	4b0c      	ldr	r3, [pc, #48]	; (d3fc <usb_find_ep_desc+0x5c>)
    d3cc:	4798      	blx	r3
    d3ce:	4603      	mov	r3, r0
    d3d0:	2b05      	cmp	r3, #5
    d3d2:	d101      	bne.n	d3d8 <usb_find_ep_desc+0x38>
			return desc;
    d3d4:	687b      	ldr	r3, [r7, #4]
    d3d6:	e00a      	b.n	d3ee <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d3d8:	6878      	ldr	r0, [r7, #4]
    d3da:	4b09      	ldr	r3, [pc, #36]	; (d400 <usb_find_ep_desc+0x60>)
    d3dc:	4798      	blx	r3
    d3de:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d3e0:	687a      	ldr	r2, [r7, #4]
    d3e2:	683b      	ldr	r3, [r7, #0]
    d3e4:	429a      	cmp	r2, r3
    d3e6:	d3e1      	bcc.n	d3ac <usb_find_ep_desc+0xc>
    d3e8:	e000      	b.n	d3ec <usb_find_ep_desc+0x4c>
			break;
    d3ea:	bf00      	nop
	}
	return NULL;
    d3ec:	2300      	movs	r3, #0
}
    d3ee:	4618      	mov	r0, r3
    d3f0:	3708      	adds	r7, #8
    d3f2:	46bd      	mov	sp, r7
    d3f4:	bd80      	pop	{r7, pc}
    d3f6:	bf00      	nop
    d3f8:	0000d2ab 	.word	0x0000d2ab
    d3fc:	0000d2c3 	.word	0x0000d2c3
    d400:	0000d2dd 	.word	0x0000d2dd

0000d404 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d404:	b580      	push	{r7, lr}
    d406:	b084      	sub	sp, #16
    d408:	af00      	add	r7, sp, #0
    d40a:	60f8      	str	r0, [r7, #12]
    d40c:	60b9      	str	r1, [r7, #8]
    d40e:	4613      	mov	r3, r2
    d410:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d412:	2202      	movs	r2, #2
    d414:	68b9      	ldr	r1, [r7, #8]
    d416:	68f8      	ldr	r0, [r7, #12]
    d418:	4b15      	ldr	r3, [pc, #84]	; (d470 <usb_find_cfg_desc+0x6c>)
    d41a:	4798      	blx	r3
    d41c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d41e:	68fb      	ldr	r3, [r7, #12]
    d420:	2b00      	cmp	r3, #0
    d422:	d11a      	bne.n	d45a <usb_find_cfg_desc+0x56>
		return NULL;
    d424:	2300      	movs	r3, #0
    d426:	e01f      	b.n	d468 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d428:	68f8      	ldr	r0, [r7, #12]
    d42a:	4b12      	ldr	r3, [pc, #72]	; (d474 <usb_find_cfg_desc+0x70>)
    d42c:	4798      	blx	r3
    d42e:	4603      	mov	r3, r0
    d430:	2b01      	cmp	r3, #1
    d432:	d801      	bhi.n	d438 <usb_find_cfg_desc+0x34>
    d434:	2300      	movs	r3, #0
    d436:	e017      	b.n	d468 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d438:	68fb      	ldr	r3, [r7, #12]
    d43a:	3301      	adds	r3, #1
    d43c:	781b      	ldrb	r3, [r3, #0]
    d43e:	2b02      	cmp	r3, #2
    d440:	d110      	bne.n	d464 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d442:	68fb      	ldr	r3, [r7, #12]
    d444:	3305      	adds	r3, #5
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	79fa      	ldrb	r2, [r7, #7]
    d44a:	429a      	cmp	r2, r3
    d44c:	d101      	bne.n	d452 <usb_find_cfg_desc+0x4e>
			return desc;
    d44e:	68fb      	ldr	r3, [r7, #12]
    d450:	e00a      	b.n	d468 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d452:	68f8      	ldr	r0, [r7, #12]
    d454:	4b08      	ldr	r3, [pc, #32]	; (d478 <usb_find_cfg_desc+0x74>)
    d456:	4798      	blx	r3
    d458:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d45a:	68fa      	ldr	r2, [r7, #12]
    d45c:	68bb      	ldr	r3, [r7, #8]
    d45e:	429a      	cmp	r2, r3
    d460:	d3e2      	bcc.n	d428 <usb_find_cfg_desc+0x24>
    d462:	e000      	b.n	d466 <usb_find_cfg_desc+0x62>
			break;
    d464:	bf00      	nop
	}
	return NULL;
    d466:	2300      	movs	r3, #0
}
    d468:	4618      	mov	r0, r3
    d46a:	3710      	adds	r7, #16
    d46c:	46bd      	mov	sp, r7
    d46e:	bd80      	pop	{r7, pc}
    d470:	0000d345 	.word	0x0000d345
    d474:	0000d2ab 	.word	0x0000d2ab
    d478:	0000d321 	.word	0x0000d321

0000d47c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d47c:	b580      	push	{r7, lr}
    d47e:	b086      	sub	sp, #24
    d480:	af00      	add	r7, sp, #0
    d482:	60f8      	str	r0, [r7, #12]
    d484:	60b9      	str	r1, [r7, #8]
    d486:	4613      	mov	r3, r2
    d488:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d48a:	2300      	movs	r3, #0
    d48c:	75fb      	strb	r3, [r7, #23]
    d48e:	e020      	b.n	d4d2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d490:	2203      	movs	r2, #3
    d492:	68b9      	ldr	r1, [r7, #8]
    d494:	68f8      	ldr	r0, [r7, #12]
    d496:	4b13      	ldr	r3, [pc, #76]	; (d4e4 <usb_find_str_desc+0x68>)
    d498:	4798      	blx	r3
    d49a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d49c:	68fb      	ldr	r3, [r7, #12]
    d49e:	2b00      	cmp	r3, #0
    d4a0:	d015      	beq.n	d4ce <usb_find_str_desc+0x52>
			_desc_len_check();
    d4a2:	68f8      	ldr	r0, [r7, #12]
    d4a4:	4b10      	ldr	r3, [pc, #64]	; (d4e8 <usb_find_str_desc+0x6c>)
    d4a6:	4798      	blx	r3
    d4a8:	4603      	mov	r3, r0
    d4aa:	2b01      	cmp	r3, #1
    d4ac:	d801      	bhi.n	d4b2 <usb_find_str_desc+0x36>
    d4ae:	2300      	movs	r3, #0
    d4b0:	e014      	b.n	d4dc <usb_find_str_desc+0x60>
			if (i == str_index) {
    d4b2:	7dfa      	ldrb	r2, [r7, #23]
    d4b4:	79fb      	ldrb	r3, [r7, #7]
    d4b6:	429a      	cmp	r2, r3
    d4b8:	d101      	bne.n	d4be <usb_find_str_desc+0x42>
				return desc;
    d4ba:	68fb      	ldr	r3, [r7, #12]
    d4bc:	e00e      	b.n	d4dc <usb_find_str_desc+0x60>
			}
			i++;
    d4be:	7dfb      	ldrb	r3, [r7, #23]
    d4c0:	3301      	adds	r3, #1
    d4c2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d4c4:	68f8      	ldr	r0, [r7, #12]
    d4c6:	4b09      	ldr	r3, [pc, #36]	; (d4ec <usb_find_str_desc+0x70>)
    d4c8:	4798      	blx	r3
    d4ca:	60f8      	str	r0, [r7, #12]
    d4cc:	e001      	b.n	d4d2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d4ce:	2300      	movs	r3, #0
    d4d0:	e004      	b.n	d4dc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d4d2:	68fa      	ldr	r2, [r7, #12]
    d4d4:	68bb      	ldr	r3, [r7, #8]
    d4d6:	429a      	cmp	r2, r3
    d4d8:	d3da      	bcc.n	d490 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d4da:	2300      	movs	r3, #0
}
    d4dc:	4618      	mov	r0, r3
    d4de:	3718      	adds	r7, #24
    d4e0:	46bd      	mov	sp, r7
    d4e2:	bd80      	pop	{r7, pc}
    d4e4:	0000d345 	.word	0x0000d345
    d4e8:	0000d2ab 	.word	0x0000d2ab
    d4ec:	0000d2dd 	.word	0x0000d2dd

0000d4f0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    d4f0:	b480      	push	{r7}
    d4f2:	b083      	sub	sp, #12
    d4f4:	af00      	add	r7, sp, #0
    d4f6:	6078      	str	r0, [r7, #4]
    return (void *)0;
    d4f8:	2300      	movs	r3, #0
	}
    d4fa:	4618      	mov	r0, r3
    d4fc:	370c      	adds	r7, #12
    d4fe:	46bd      	mov	sp, r7
    d500:	bc80      	pop	{r7}
    d502:	4770      	bx	lr

0000d504 <free>:
//............................................................................
extern "C" void free(void *)
	{
    d504:	b480      	push	{r7}
    d506:	b083      	sub	sp, #12
    d508:	af00      	add	r7, sp, #0
    d50a:	6078      	str	r0, [r7, #4]
	}
    d50c:	bf00      	nop
    d50e:	370c      	adds	r7, #12
    d510:	46bd      	mov	sp, r7
    d512:	bc80      	pop	{r7}
    d514:	4770      	bx	lr

0000d516 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    d516:	b480      	push	{r7}
    d518:	af00      	add	r7, sp, #0
		}
    d51a:	bf00      	nop
    d51c:	46bd      	mov	sp, r7
    d51e:	bc80      	pop	{r7}
    d520:	4770      	bx	lr
	...

0000d524 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
    d524:	b580      	push	{r7, lr}
    d526:	b082      	sub	sp, #8
    d528:	af00      	add	r7, sp, #0
    d52a:	6078      	str	r0, [r7, #4]
	free(p);
    d52c:	6878      	ldr	r0, [r7, #4]
    d52e:	4b03      	ldr	r3, [pc, #12]	; (d53c <_ZdlPv+0x18>)
    d530:	4798      	blx	r3
	}
    d532:	bf00      	nop
    d534:	3708      	adds	r7, #8
    d536:	46bd      	mov	sp, r7
    d538:	bd80      	pop	{r7, pc}
    d53a:	bf00      	nop
    d53c:	0000d505 	.word	0x0000d505

0000d540 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor>:
{
		ptrSPISync=this;
//	SPI=SPI_1;
} //SPI_Syn_Class

SPI_Syn_Class::SPI_Syn_Class(spi_m_sync_descriptor * spiDesc)
    d540:	b480      	push	{r7}
    d542:	b083      	sub	sp, #12
    d544:	af00      	add	r7, sp, #0
    d546:	6078      	str	r0, [r7, #4]
    d548:	6039      	str	r1, [r7, #0]
{
	SPI=spiDesc;
    d54a:	687b      	ldr	r3, [r7, #4]
    d54c:	683a      	ldr	r2, [r7, #0]
    d54e:	60da      	str	r2, [r3, #12]
	ptrSPISync=this;
    d550:	4a04      	ldr	r2, [pc, #16]	; (d564 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor+0x24>)
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	6013      	str	r3, [r2, #0]
} //SPI_Syn_Class
    d556:	687b      	ldr	r3, [r7, #4]
    d558:	4618      	mov	r0, r3
    d55a:	370c      	adds	r7, #12
    d55c:	46bd      	mov	sp, r7
    d55e:	bc80      	pop	{r7}
    d560:	4770      	bx	lr
    d562:	bf00      	nop
    d564:	200010dc 	.word	0x200010dc

0000d568 <_ZN13SPI_Syn_ClassD1Ev>:

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    d568:	b480      	push	{r7}
    d56a:	b083      	sub	sp, #12
    d56c:	af00      	add	r7, sp, #0
    d56e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    d570:	687b      	ldr	r3, [r7, #4]
    d572:	4618      	mov	r0, r3
    d574:	370c      	adds	r7, #12
    d576:	46bd      	mov	sp, r7
    d578:	bc80      	pop	{r7}
    d57a:	4770      	bx	lr

0000d57c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    d57c:	b580      	push	{r7, lr}
    d57e:	b082      	sub	sp, #8
    d580:	af00      	add	r7, sp, #0
    d582:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    d584:	687b      	ldr	r3, [r7, #4]
    d586:	68da      	ldr	r2, [r3, #12]
    d588:	687b      	ldr	r3, [r7, #4]
    d58a:	3310      	adds	r3, #16
    d58c:	4619      	mov	r1, r3
    d58e:	4610      	mov	r0, r2
    d590:	4b09      	ldr	r3, [pc, #36]	; (d5b8 <_ZN13SPI_Syn_Class4initEv+0x3c>)
    d592:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	68db      	ldr	r3, [r3, #12]
    d598:	4618      	mov	r0, r3
    d59a:	4b08      	ldr	r3, [pc, #32]	; (d5bc <_ZN13SPI_Syn_Class4initEv+0x40>)
    d59c:	4798      	blx	r3
		txBuffer=txStaticBuffer;
    d59e:	687b      	ldr	r3, [r7, #4]
    d5a0:	4a07      	ldr	r2, [pc, #28]	; (d5c0 <_ZN13SPI_Syn_Class4initEv+0x44>)
    d5a2:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
    d5a4:	687b      	ldr	r3, [r7, #4]
    d5a6:	4a06      	ldr	r2, [pc, #24]	; (d5c0 <_ZN13SPI_Syn_Class4initEv+0x44>)
    d5a8:	609a      	str	r2, [r3, #8]
	ready=true;
    d5aa:	687b      	ldr	r3, [r7, #4]
    d5ac:	2201      	movs	r2, #1
    d5ae:	701a      	strb	r2, [r3, #0]
	
}
    d5b0:	bf00      	nop
    d5b2:	3708      	adds	r7, #8
    d5b4:	46bd      	mov	sp, r7
    d5b6:	bd80      	pop	{r7, pc}
    d5b8:	00002dd9 	.word	0x00002dd9
    d5bc:	00002c4d 	.word	0x00002c4d
    d5c0:	200010e0 	.word	0x200010e0

0000d5c4 <_ZN13SPI_Syn_Class6EnableEv>:
	ptrSPISync=this;
	SPI=spiDesc;
}


int32_t SPI_Syn_Class::Enable(){
    d5c4:	b580      	push	{r7, lr}
    d5c6:	b082      	sub	sp, #8
    d5c8:	af00      	add	r7, sp, #0
    d5ca:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    d5cc:	687b      	ldr	r3, [r7, #4]
    d5ce:	68da      	ldr	r2, [r3, #12]
    d5d0:	687b      	ldr	r3, [r7, #4]
    d5d2:	3310      	adds	r3, #16
    d5d4:	4619      	mov	r1, r3
    d5d6:	4610      	mov	r0, r2
    d5d8:	4b07      	ldr	r3, [pc, #28]	; (d5f8 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    d5da:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    d5dc:	687b      	ldr	r3, [r7, #4]
    d5de:	68db      	ldr	r3, [r3, #12]
    d5e0:	4618      	mov	r0, r3
    d5e2:	4b06      	ldr	r3, [pc, #24]	; (d5fc <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    d5e4:	4798      	blx	r3
	ready=true;
    d5e6:	687b      	ldr	r3, [r7, #4]
    d5e8:	2201      	movs	r2, #1
    d5ea:	701a      	strb	r2, [r3, #0]
	return 0;
    d5ec:	2300      	movs	r3, #0
}
    d5ee:	4618      	mov	r0, r3
    d5f0:	3708      	adds	r7, #8
    d5f2:	46bd      	mov	sp, r7
    d5f4:	bd80      	pop	{r7, pc}
    d5f6:	bf00      	nop
    d5f8:	00002dd9 	.word	0x00002dd9
    d5fc:	00002c4d 	.word	0x00002c4d

0000d600 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    d600:	b580      	push	{r7, lr}
    d602:	b086      	sub	sp, #24
    d604:	af00      	add	r7, sp, #0
    d606:	60f8      	str	r0, [r7, #12]
    d608:	60b9      	str	r1, [r7, #8]
    d60a:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    d60c:	68fb      	ldr	r3, [r7, #12]
    d60e:	2201      	movs	r2, #1
    d610:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    d612:	68fb      	ldr	r3, [r7, #12]
    d614:	691b      	ldr	r3, [r3, #16]
    d616:	687a      	ldr	r2, [r7, #4]
    d618:	b292      	uxth	r2, r2
    d61a:	68b9      	ldr	r1, [r7, #8]
    d61c:	4618      	mov	r0, r3
    d61e:	4b08      	ldr	r3, [pc, #32]	; (d640 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    d620:	4798      	blx	r3
    d622:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    d624:	697b      	ldr	r3, [r7, #20]
    d626:	2b00      	cmp	r3, #0
    d628:	bf14      	ite	ne
    d62a:	2301      	movne	r3, #1
    d62c:	2300      	moveq	r3, #0
    d62e:	b2da      	uxtb	r2, r3
    d630:	68fb      	ldr	r3, [r7, #12]
    d632:	761a      	strb	r2, [r3, #24]
	 return w;
    d634:	697b      	ldr	r3, [r7, #20]
	
}
    d636:	4618      	mov	r0, r3
    d638:	3718      	adds	r7, #24
    d63a:	46bd      	mov	sp, r7
    d63c:	bd80      	pop	{r7, pc}
    d63e:	bf00      	nop
    d640:	0000e285 	.word	0x0000e285

0000d644 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    d644:	b580      	push	{r7, lr}
    d646:	b086      	sub	sp, #24
    d648:	af00      	add	r7, sp, #0
    d64a:	60f8      	str	r0, [r7, #12]
    d64c:	60b9      	str	r1, [r7, #8]
    d64e:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    d650:	68fb      	ldr	r3, [r7, #12]
    d652:	2201      	movs	r2, #1
    d654:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    d656:	68fb      	ldr	r3, [r7, #12]
    d658:	691b      	ldr	r3, [r3, #16]
    d65a:	687a      	ldr	r2, [r7, #4]
    d65c:	b292      	uxth	r2, r2
    d65e:	68b9      	ldr	r1, [r7, #8]
    d660:	4618      	mov	r0, r3
    d662:	4b08      	ldr	r3, [pc, #32]	; (d684 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    d664:	4798      	blx	r3
    d666:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    d668:	697b      	ldr	r3, [r7, #20]
    d66a:	2b00      	cmp	r3, #0
    d66c:	bf14      	ite	ne
    d66e:	2301      	movne	r3, #1
    d670:	2300      	moveq	r3, #0
    d672:	b2da      	uxtb	r2, r3
    d674:	68fb      	ldr	r3, [r7, #12]
    d676:	765a      	strb	r2, [r3, #25]
	return  r;
    d678:	697b      	ldr	r3, [r7, #20]
}
    d67a:	4618      	mov	r0, r3
    d67c:	3718      	adds	r7, #24
    d67e:	46bd      	mov	sp, r7
    d680:	bd80      	pop	{r7, pc}
    d682:	bf00      	nop
    d684:	0000e2d5 	.word	0x0000e2d5

0000d688 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    d688:	b580      	push	{r7, lr}
    d68a:	b082      	sub	sp, #8
    d68c:	af00      	add	r7, sp, #0
    d68e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	68db      	ldr	r3, [r3, #12]
    d694:	4618      	mov	r0, r3
    d696:	4b03      	ldr	r3, [pc, #12]	; (d6a4 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    d698:	4798      	blx	r3
	
}
    d69a:	bf00      	nop
    d69c:	3708      	adds	r7, #8
    d69e:	46bd      	mov	sp, r7
    d6a0:	bd80      	pop	{r7, pc}
    d6a2:	bf00      	nop
    d6a4:	00002c89 	.word	0x00002c89

0000d6a8 <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
    d6a8:	b480      	push	{r7}
    d6aa:	b083      	sub	sp, #12
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
    d6b0:	687b      	ldr	r3, [r7, #4]
    d6b2:	2201      	movs	r2, #1
    d6b4:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
    d6b6:	687b      	ldr	r3, [r7, #4]
    d6b8:	781b      	ldrb	r3, [r3, #0]
    d6ba:	b2db      	uxtb	r3, r3
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d001      	beq.n	d6c4 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
    d6c0:	2301      	movs	r3, #1
    d6c2:	e000      	b.n	d6c6 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
    d6c4:	2300      	movs	r3, #0
	}
	return ready;
	
}
    d6c6:	4618      	mov	r0, r3
    d6c8:	370c      	adds	r7, #12
    d6ca:	46bd      	mov	sp, r7
    d6cc:	bc80      	pop	{r7}
    d6ce:	4770      	bx	lr

0000d6d0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d6d0:	b480      	push	{r7}
    d6d2:	b083      	sub	sp, #12
    d6d4:	af00      	add	r7, sp, #0
    d6d6:	6078      	str	r0, [r7, #4]
    d6d8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d6da:	687b      	ldr	r3, [r7, #4]
    d6dc:	683a      	ldr	r2, [r7, #0]
    d6de:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    d6e0:	4a06      	ldr	r2, [pc, #24]	; (d6fc <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    d6e2:	687b      	ldr	r3, [r7, #4]
    d6e4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d6e6:	687b      	ldr	r3, [r7, #4]
    d6e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d6ec:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d6ee:	687b      	ldr	r3, [r7, #4]
    d6f0:	4618      	mov	r0, r3
    d6f2:	370c      	adds	r7, #12
    d6f4:	46bd      	mov	sp, r7
    d6f6:	bc80      	pop	{r7}
    d6f8:	4770      	bx	lr
    d6fa:	bf00      	nop
    d6fc:	20001120 	.word	0x20001120

0000d700 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d700:	b480      	push	{r7}
    d702:	b083      	sub	sp, #12
    d704:	af00      	add	r7, sp, #0
    d706:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d708:	687b      	ldr	r3, [r7, #4]
    d70a:	2200      	movs	r2, #0
    d70c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	4618      	mov	r0, r3
    d712:	370c      	adds	r7, #12
    d714:	46bd      	mov	sp, r7
    d716:	bc80      	pop	{r7}
    d718:	4770      	bx	lr
	...

0000d71c <_ZL9InitArrayv>:


static void InitArray(){
    d71c:	b480      	push	{r7}
    d71e:	b083      	sub	sp, #12
    d720:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d722:	2301      	movs	r3, #1
    d724:	607b      	str	r3, [r7, #4]
    d726:	687b      	ldr	r3, [r7, #4]
    d728:	2b0f      	cmp	r3, #15
    d72a:	dc26      	bgt.n	d77a <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d72c:	4917      	ldr	r1, [pc, #92]	; (d78c <_ZL9InitArrayv+0x70>)
    d72e:	687a      	ldr	r2, [r7, #4]
    d730:	4613      	mov	r3, r2
    d732:	009b      	lsls	r3, r3, #2
    d734:	4413      	add	r3, r2
    d736:	009b      	lsls	r3, r3, #2
    d738:	440b      	add	r3, r1
    d73a:	2200      	movs	r2, #0
    d73c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d73e:	4913      	ldr	r1, [pc, #76]	; (d78c <_ZL9InitArrayv+0x70>)
    d740:	687a      	ldr	r2, [r7, #4]
    d742:	4613      	mov	r3, r2
    d744:	009b      	lsls	r3, r3, #2
    d746:	4413      	add	r3, r2
    d748:	009b      	lsls	r3, r3, #2
    d74a:	440b      	add	r3, r1
    d74c:	330c      	adds	r3, #12
    d74e:	2200      	movs	r2, #0
    d750:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d752:	687b      	ldr	r3, [r7, #4]
    d754:	1e5a      	subs	r2, r3, #1
    d756:	6879      	ldr	r1, [r7, #4]
    d758:	460b      	mov	r3, r1
    d75a:	009b      	lsls	r3, r3, #2
    d75c:	440b      	add	r3, r1
    d75e:	009b      	lsls	r3, r3, #2
    d760:	490a      	ldr	r1, [pc, #40]	; (d78c <_ZL9InitArrayv+0x70>)
    d762:	4419      	add	r1, r3
    d764:	4809      	ldr	r0, [pc, #36]	; (d78c <_ZL9InitArrayv+0x70>)
    d766:	4613      	mov	r3, r2
    d768:	009b      	lsls	r3, r3, #2
    d76a:	4413      	add	r3, r2
    d76c:	009b      	lsls	r3, r3, #2
    d76e:	4403      	add	r3, r0
    d770:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
    d772:	687b      	ldr	r3, [r7, #4]
    d774:	3301      	adds	r3, #1
    d776:	607b      	str	r3, [r7, #4]
    d778:	e7d5      	b.n	d726 <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
    d77a:	4b05      	ldr	r3, [pc, #20]	; (d790 <_ZL9InitArrayv+0x74>)
    d77c:	2201      	movs	r2, #1
    d77e:	701a      	strb	r2, [r3, #0]
		
}
    d780:	bf00      	nop
    d782:	370c      	adds	r7, #12
    d784:	46bd      	mov	sp, r7
    d786:	bc80      	pop	{r7}
    d788:	4770      	bx	lr
    d78a:	bf00      	nop
    d78c:	20001124 	.word	0x20001124
    d790:	20001264 	.word	0x20001264

0000d794 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d794:	b580      	push	{r7, lr}
    d796:	b082      	sub	sp, #8
    d798:	af00      	add	r7, sp, #0
    d79a:	6078      	str	r0, [r7, #4]
	ticks=0;
    d79c:	687b      	ldr	r3, [r7, #4]
    d79e:	2200      	movs	r2, #0
    d7a0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d7a2:	4b0d      	ldr	r3, [pc, #52]	; (d7d8 <_ZN11Timer_Class4InitEv+0x44>)
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	f083 0301 	eor.w	r3, r3, #1
    d7aa:	b2db      	uxtb	r3, r3
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d001      	beq.n	d7b4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d7b0:	4b0a      	ldr	r3, [pc, #40]	; (d7dc <_ZN11Timer_Class4InitEv+0x48>)
    d7b2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
    d7b4:	6878      	ldr	r0, [r7, #4]
    d7b6:	4b0a      	ldr	r3, [pc, #40]	; (d7e0 <_ZN11Timer_Class4InitEv+0x4c>)
    d7b8:	4798      	blx	r3
    d7ba:	4603      	mov	r3, r0
    d7bc:	2b00      	cmp	r3, #0
    d7be:	bf0c      	ite	eq
    d7c0:	2301      	moveq	r3, #1
    d7c2:	2300      	movne	r3, #0
    d7c4:	b2da      	uxtb	r2, r3
    d7c6:	687b      	ldr	r3, [r7, #4]
    d7c8:	709a      	strb	r2, [r3, #2]
	return isOK;
    d7ca:	687b      	ldr	r3, [r7, #4]
    d7cc:	789b      	ldrb	r3, [r3, #2]
    d7ce:	b2db      	uxtb	r3, r3
}
    d7d0:	4618      	mov	r0, r3
    d7d2:	3708      	adds	r7, #8
    d7d4:	46bd      	mov	sp, r7
    d7d6:	bd80      	pop	{r7, pc}
    d7d8:	20001264 	.word	0x20001264
    d7dc:	0000d71d 	.word	0x0000d71d
    d7e0:	0000d7e5 	.word	0x0000d7e5

0000d7e4 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b084      	sub	sp, #16
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d7ec:	687b      	ldr	r3, [r7, #4]
    d7ee:	68db      	ldr	r3, [r3, #12]
    d7f0:	4618      	mov	r0, r3
    d7f2:	4b04      	ldr	r3, [pc, #16]	; (d804 <_ZN11Timer_Class5startEv+0x20>)
    d7f4:	4798      	blx	r3
    d7f6:	60f8      	str	r0, [r7, #12]
	return status;
    d7f8:	68fb      	ldr	r3, [r7, #12]
	
}
    d7fa:	4618      	mov	r0, r3
    d7fc:	3710      	adds	r7, #16
    d7fe:	46bd      	mov	sp, r7
    d800:	bd80      	pop	{r7, pc}
    d802:	bf00      	nop
    d804:	00002ec9 	.word	0x00002ec9

0000d808 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d808:	b580      	push	{r7, lr}
    d80a:	b086      	sub	sp, #24
    d80c:	af00      	add	r7, sp, #0
    d80e:	60f8      	str	r0, [r7, #12]
    d810:	60b9      	str	r1, [r7, #8]
    d812:	607a      	str	r2, [r7, #4]
    d814:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    d816:	68f8      	ldr	r0, [r7, #12]
    d818:	4b0d      	ldr	r3, [pc, #52]	; (d850 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    d81a:	4798      	blx	r3
	task->interval = interval;
    d81c:	68fb      	ldr	r3, [r7, #12]
    d81e:	699b      	ldr	r3, [r3, #24]
    d820:	687a      	ldr	r2, [r7, #4]
    d822:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d824:	68fb      	ldr	r3, [r7, #12]
    d826:	699b      	ldr	r3, [r3, #24]
    d828:	68ba      	ldr	r2, [r7, #8]
    d82a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d82c:	68fb      	ldr	r3, [r7, #12]
    d82e:	699b      	ldr	r3, [r3, #24]
    d830:	78fa      	ldrb	r2, [r7, #3]
    d832:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d834:	68fb      	ldr	r3, [r7, #12]
    d836:	68da      	ldr	r2, [r3, #12]
    d838:	68fb      	ldr	r3, [r7, #12]
    d83a:	699b      	ldr	r3, [r3, #24]
    d83c:	4619      	mov	r1, r3
    d83e:	4610      	mov	r0, r2
    d840:	4b04      	ldr	r3, [pc, #16]	; (d854 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d842:	4798      	blx	r3
    d844:	6178      	str	r0, [r7, #20]
	
	return status;
    d846:	697b      	ldr	r3, [r7, #20]
}
    d848:	4618      	mov	r0, r3
    d84a:	3718      	adds	r7, #24
    d84c:	46bd      	mov	sp, r7
    d84e:	bd80      	pop	{r7, pc}
    d850:	0000d8d1 	.word	0x0000d8d1
    d854:	00002f9d 	.word	0x00002f9d

0000d858 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		 	}else{
		 	status=timer_start(timer_descr);
	 	}
	 return status;
}
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    d858:	b590      	push	{r4, r7, lr}
    d85a:	b087      	sub	sp, #28
    d85c:	af00      	add	r7, sp, #0
    d85e:	60f8      	str	r0, [r7, #12]
    d860:	60b9      	str	r1, [r7, #8]
    d862:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    d864:	2301      	movs	r3, #1
    d866:	687a      	ldr	r2, [r7, #4]
    d868:	68b9      	ldr	r1, [r7, #8]
    d86a:	68f8      	ldr	r0, [r7, #12]
    d86c:	4c03      	ldr	r4, [pc, #12]	; (d87c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    d86e:	47a0      	blx	r4
    d870:	6178      	str	r0, [r7, #20]
		return status;
    d872:	697b      	ldr	r3, [r7, #20]
}
    d874:	4618      	mov	r0, r3
    d876:	371c      	adds	r7, #28
    d878:	46bd      	mov	sp, r7
    d87a:	bd90      	pop	{r4, r7, pc}
    d87c:	0000d809 	.word	0x0000d809

0000d880 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    d880:	b590      	push	{r4, r7, lr}
    d882:	b087      	sub	sp, #28
    d884:	af00      	add	r7, sp, #0
    d886:	60f8      	str	r0, [r7, #12]
    d888:	60b9      	str	r1, [r7, #8]
    d88a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    d88c:	2300      	movs	r3, #0
    d88e:	687a      	ldr	r2, [r7, #4]
    d890:	68b9      	ldr	r1, [r7, #8]
    d892:	68f8      	ldr	r0, [r7, #12]
    d894:	4c0c      	ldr	r4, [pc, #48]	; (d8c8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    d896:	47a0      	blx	r4
    d898:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d89a:	68fb      	ldr	r3, [r7, #12]
    d89c:	68db      	ldr	r3, [r3, #12]
    d89e:	681b      	ldr	r3, [r3, #0]
    d8a0:	699b      	ldr	r3, [r3, #24]
    d8a2:	68fa      	ldr	r2, [r7, #12]
    d8a4:	68d2      	ldr	r2, [r2, #12]
    d8a6:	3204      	adds	r2, #4
    d8a8:	4610      	mov	r0, r2
    d8aa:	4798      	blx	r3
    d8ac:	4603      	mov	r3, r0
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	d105      	bne.n	d8be <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    d8b2:	68fb      	ldr	r3, [r7, #12]
    d8b4:	68db      	ldr	r3, [r3, #12]
    d8b6:	4618      	mov	r0, r3
    d8b8:	4b04      	ldr	r3, [pc, #16]	; (d8cc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    d8ba:	4798      	blx	r3
    d8bc:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    d8be:	697b      	ldr	r3, [r7, #20]
}
    d8c0:	4618      	mov	r0, r3
    d8c2:	371c      	adds	r7, #28
    d8c4:	46bd      	mov	sp, r7
    d8c6:	bd90      	pop	{r4, r7, pc}
    d8c8:	0000d809 	.word	0x0000d809
    d8cc:	00002ec9 	.word	0x00002ec9

0000d8d0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    d8d0:	b480      	push	{r7}
    d8d2:	b085      	sub	sp, #20
    d8d4:	af00      	add	r7, sp, #0
    d8d6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d8d8:	2300      	movs	r3, #0
    d8da:	73fb      	strb	r3, [r7, #15]
    d8dc:	7bfb      	ldrb	r3, [r7, #15]
    d8de:	2b0f      	cmp	r3, #15
    d8e0:	dc1c      	bgt.n	d91c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    d8e2:	7bfb      	ldrb	r3, [r7, #15]
    d8e4:	f003 030f 	and.w	r3, r3, #15
    d8e8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d8ea:	7bba      	ldrb	r2, [r7, #14]
    d8ec:	490f      	ldr	r1, [pc, #60]	; (d92c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d8ee:	4613      	mov	r3, r2
    d8f0:	009b      	lsls	r3, r3, #2
    d8f2:	4413      	add	r3, r2
    d8f4:	009b      	lsls	r3, r3, #2
    d8f6:	440b      	add	r3, r1
    d8f8:	330c      	adds	r3, #12
    d8fa:	681b      	ldr	r3, [r3, #0]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d109      	bne.n	d914 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    d900:	7bba      	ldrb	r2, [r7, #14]
    d902:	4613      	mov	r3, r2
    d904:	009b      	lsls	r3, r3, #2
    d906:	4413      	add	r3, r2
    d908:	009b      	lsls	r3, r3, #2
    d90a:	4a08      	ldr	r2, [pc, #32]	; (d92c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d90c:	441a      	add	r2, r3
    d90e:	687b      	ldr	r3, [r7, #4]
    d910:	619a      	str	r2, [r3, #24]
			return;
    d912:	e006      	b.n	d922 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d914:	7bfb      	ldrb	r3, [r7, #15]
    d916:	3301      	adds	r3, #1
    d918:	73fb      	strb	r3, [r7, #15]
    d91a:	e7df      	b.n	d8dc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d91c:	687b      	ldr	r3, [r7, #4]
    d91e:	4a03      	ldr	r2, [pc, #12]	; (d92c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d920:	619a      	str	r2, [r3, #24]

}
    d922:	3714      	adds	r7, #20
    d924:	46bd      	mov	sp, r7
    d926:	bc80      	pop	{r7}
    d928:	4770      	bx	lr
    d92a:	bf00      	nop
    d92c:	20001124 	.word	0x20001124

0000d930 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    d930:	b580      	push	{r7, lr}
    d932:	b082      	sub	sp, #8
    d934:	af00      	add	r7, sp, #0
    d936:	6078      	str	r0, [r7, #4]
    d938:	6039      	str	r1, [r7, #0]
    d93a:	687b      	ldr	r3, [r7, #4]
    d93c:	2b01      	cmp	r3, #1
    d93e:	d131      	bne.n	d9a4 <_Z41__static_initialization_and_destruction_0ii+0x74>
    d940:	683b      	ldr	r3, [r7, #0]
    d942:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d946:	4293      	cmp	r3, r2
    d948:	d12c      	bne.n	d9a4 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d94a:	4918      	ldr	r1, [pc, #96]	; (d9ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    d94c:	4818      	ldr	r0, [pc, #96]	; (d9b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    d94e:	4b19      	ldr	r3, [pc, #100]	; (d9b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d950:	4798      	blx	r3
    d952:	4a19      	ldr	r2, [pc, #100]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d954:	4919      	ldr	r1, [pc, #100]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d956:	4816      	ldr	r0, [pc, #88]	; (d9b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    d958:	4b19      	ldr	r3, [pc, #100]	; (d9c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d95a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    d95c:	4919      	ldr	r1, [pc, #100]	; (d9c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    d95e:	481a      	ldr	r0, [pc, #104]	; (d9c8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    d960:	4b14      	ldr	r3, [pc, #80]	; (d9b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d962:	4798      	blx	r3
    d964:	4a14      	ldr	r2, [pc, #80]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d966:	4915      	ldr	r1, [pc, #84]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d968:	4817      	ldr	r0, [pc, #92]	; (d9c8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    d96a:	4b15      	ldr	r3, [pc, #84]	; (d9c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d96c:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    d96e:	4917      	ldr	r1, [pc, #92]	; (d9cc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    d970:	4817      	ldr	r0, [pc, #92]	; (d9d0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    d972:	4b10      	ldr	r3, [pc, #64]	; (d9b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d974:	4798      	blx	r3
    d976:	4a10      	ldr	r2, [pc, #64]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d978:	4910      	ldr	r1, [pc, #64]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d97a:	4815      	ldr	r0, [pc, #84]	; (d9d0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    d97c:	4b10      	ldr	r3, [pc, #64]	; (d9c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d97e:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    d980:	4914      	ldr	r1, [pc, #80]	; (d9d4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    d982:	4815      	ldr	r0, [pc, #84]	; (d9d8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    d984:	4b0b      	ldr	r3, [pc, #44]	; (d9b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d986:	4798      	blx	r3
    d988:	4a0b      	ldr	r2, [pc, #44]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d98a:	490c      	ldr	r1, [pc, #48]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d98c:	4812      	ldr	r0, [pc, #72]	; (d9d8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    d98e:	4b0c      	ldr	r3, [pc, #48]	; (d9c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d990:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    d992:	4912      	ldr	r1, [pc, #72]	; (d9dc <_Z41__static_initialization_and_destruction_0ii+0xac>)
    d994:	4812      	ldr	r0, [pc, #72]	; (d9e0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    d996:	4b07      	ldr	r3, [pc, #28]	; (d9b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d998:	4798      	blx	r3
    d99a:	4a07      	ldr	r2, [pc, #28]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d99c:	4907      	ldr	r1, [pc, #28]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d99e:	4810      	ldr	r0, [pc, #64]	; (d9e0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    d9a0:	4b07      	ldr	r3, [pc, #28]	; (d9c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d9a2:	4798      	blx	r3
    d9a4:	bf00      	nop
    d9a6:	3708      	adds	r7, #8
    d9a8:	46bd      	mov	sp, r7
    d9aa:	bd80      	pop	{r7, pc}
    d9ac:	200013f0 	.word	0x200013f0
    d9b0:	20001268 	.word	0x20001268
    d9b4:	0000d6d1 	.word	0x0000d6d1
    d9b8:	20000000 	.word	0x20000000
    d9bc:	0000d701 	.word	0x0000d701
    d9c0:	0000e325 	.word	0x0000e325
    d9c4:	20001484 	.word	0x20001484
    d9c8:	20001284 	.word	0x20001284
    d9cc:	20001588 	.word	0x20001588
    d9d0:	200012a0 	.word	0x200012a0
    d9d4:	200014a4 	.word	0x200014a4
    d9d8:	200012bc 	.word	0x200012bc
    d9dc:	20001548 	.word	0x20001548
    d9e0:	200012d8 	.word	0x200012d8

0000d9e4 <_GLOBAL__sub_I_ptrTimerClass>:
    d9e4:	b580      	push	{r7, lr}
    d9e6:	af00      	add	r7, sp, #0
    d9e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d9ec:	2001      	movs	r0, #1
    d9ee:	4b01      	ldr	r3, [pc, #4]	; (d9f4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    d9f0:	4798      	blx	r3
    d9f2:	bd80      	pop	{r7, pc}
    d9f4:	0000d931 	.word	0x0000d931

0000d9f8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d9f8:	b480      	push	{r7}
    d9fa:	b083      	sub	sp, #12
    d9fc:	af00      	add	r7, sp, #0
    d9fe:	6078      	str	r0, [r7, #4]
    da00:	4a05      	ldr	r2, [pc, #20]	; (da18 <_ZN5PrintC1Ev+0x20>)
    da02:	687b      	ldr	r3, [r7, #4]
    da04:	601a      	str	r2, [r3, #0]
    da06:	687b      	ldr	r3, [r7, #4]
    da08:	2200      	movs	r2, #0
    da0a:	605a      	str	r2, [r3, #4]
    da0c:	687b      	ldr	r3, [r7, #4]
    da0e:	4618      	mov	r0, r3
    da10:	370c      	adds	r7, #12
    da12:	46bd      	mov	sp, r7
    da14:	bc80      	pop	{r7}
    da16:	4770      	bx	lr
    da18:	0001119c 	.word	0x0001119c

0000da1c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    da1c:	b480      	push	{r7}
    da1e:	b083      	sub	sp, #12
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
    da24:	2300      	movs	r3, #0
    da26:	4618      	mov	r0, r3
    da28:	370c      	adds	r7, #12
    da2a:	46bd      	mov	sp, r7
    da2c:	bc80      	pop	{r7}
    da2e:	4770      	bx	lr

0000da30 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    da30:	b480      	push	{r7}
    da32:	b083      	sub	sp, #12
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
    da38:	bf00      	nop
    da3a:	370c      	adds	r7, #12
    da3c:	46bd      	mov	sp, r7
    da3e:	bc80      	pop	{r7}
    da40:	4770      	bx	lr
	...

0000da44 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    da44:	b580      	push	{r7, lr}
    da46:	b082      	sub	sp, #8
    da48:	af00      	add	r7, sp, #0
    da4a:	6078      	str	r0, [r7, #4]
    da4c:	687b      	ldr	r3, [r7, #4]
    da4e:	4618      	mov	r0, r3
    da50:	4b06      	ldr	r3, [pc, #24]	; (da6c <_ZN6StreamC1Ev+0x28>)
    da52:	4798      	blx	r3
    da54:	4a06      	ldr	r2, [pc, #24]	; (da70 <_ZN6StreamC1Ev+0x2c>)
    da56:	687b      	ldr	r3, [r7, #4]
    da58:	601a      	str	r2, [r3, #0]
    da5a:	687b      	ldr	r3, [r7, #4]
    da5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    da60:	609a      	str	r2, [r3, #8]
    da62:	687b      	ldr	r3, [r7, #4]
    da64:	4618      	mov	r0, r3
    da66:	3708      	adds	r7, #8
    da68:	46bd      	mov	sp, r7
    da6a:	bd80      	pop	{r7, pc}
    da6c:	0000d9f9 	.word	0x0000d9f9
    da70:	00011160 	.word	0x00011160

0000da74 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    da74:	b480      	push	{r7}
    da76:	b083      	sub	sp, #12
    da78:	af00      	add	r7, sp, #0
    da7a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    da7c:	4b06      	ldr	r3, [pc, #24]	; (da98 <_ZL10USBTimeoutPK10timer_task+0x24>)
    da7e:	681b      	ldr	r3, [r3, #0]
    da80:	2201      	movs	r2, #1
    da82:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    da84:	4b04      	ldr	r3, [pc, #16]	; (da98 <_ZL10USBTimeoutPK10timer_task+0x24>)
    da86:	681b      	ldr	r3, [r3, #0]
    da88:	2200      	movs	r2, #0
    da8a:	741a      	strb	r2, [r3, #16]
	
}
    da8c:	bf00      	nop
    da8e:	370c      	adds	r7, #12
    da90:	46bd      	mov	sp, r7
    da92:	bc80      	pop	{r7}
    da94:	4770      	bx	lr
    da96:	bf00      	nop
    da98:	200012f4 	.word	0x200012f4

0000da9c <_ZN9CDC_ClassC1Ev>:
	/* No error. */
	return false;
}

// default constructor
CDC_Class::CDC_Class()
    da9c:	b580      	push	{r7, lr}
    da9e:	b082      	sub	sp, #8
    daa0:	af00      	add	r7, sp, #0
    daa2:	6078      	str	r0, [r7, #4]
    daa4:	687b      	ldr	r3, [r7, #4]
    daa6:	4618      	mov	r0, r3
    daa8:	4b0a      	ldr	r3, [pc, #40]	; (dad4 <_ZN9CDC_ClassC1Ev+0x38>)
    daaa:	4798      	blx	r3
    daac:	687b      	ldr	r3, [r7, #4]
    daae:	3310      	adds	r3, #16
    dab0:	4618      	mov	r0, r3
    dab2:	4b09      	ldr	r3, [pc, #36]	; (dad8 <_ZN9CDC_ClassC1Ev+0x3c>)
    dab4:	4798      	blx	r3
    dab6:	4a09      	ldr	r2, [pc, #36]	; (dadc <_ZN9CDC_ClassC1Ev+0x40>)
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    dabc:	687b      	ldr	r3, [r7, #4]
    dabe:	f04f 32ff 	mov.w	r2, #4294967295
    dac2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dac4:	4a06      	ldr	r2, [pc, #24]	; (dae0 <_ZN9CDC_ClassC1Ev+0x44>)
    dac6:	687b      	ldr	r3, [r7, #4]
    dac8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    daca:	687b      	ldr	r3, [r7, #4]
    dacc:	4618      	mov	r0, r3
    dace:	3708      	adds	r7, #8
    dad0:	46bd      	mov	sp, r7
    dad2:	bd80      	pop	{r7, pc}
    dad4:	0000da45 	.word	0x0000da45
    dad8:	0000df8d 	.word	0x0000df8d
    dadc:	00011130 	.word	0x00011130
    dae0:	200012f4 	.word	0x200012f4

0000dae4 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dae4:	b580      	push	{r7, lr}
    dae6:	b082      	sub	sp, #8
    dae8:	af00      	add	r7, sp, #0
    daea:	6078      	str	r0, [r7, #4]
    daec:	4a06      	ldr	r2, [pc, #24]	; (db08 <_ZN9CDC_ClassD1Ev+0x24>)
    daee:	687b      	ldr	r3, [r7, #4]
    daf0:	601a      	str	r2, [r3, #0]
    daf2:	687b      	ldr	r3, [r7, #4]
    daf4:	3310      	adds	r3, #16
    daf6:	4618      	mov	r0, r3
    daf8:	4b04      	ldr	r3, [pc, #16]	; (db0c <_ZN9CDC_ClassD1Ev+0x28>)
    dafa:	4798      	blx	r3
{
} //~CDC_Class
    dafc:	687b      	ldr	r3, [r7, #4]
    dafe:	4618      	mov	r0, r3
    db00:	3708      	adds	r7, #8
    db02:	46bd      	mov	sp, r7
    db04:	bd80      	pop	{r7, pc}
    db06:	bf00      	nop
    db08:	00011130 	.word	0x00011130
    db0c:	0000dfad 	.word	0x0000dfad

0000db10 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    db10:	b580      	push	{r7, lr}
    db12:	b084      	sub	sp, #16
    db14:	af00      	add	r7, sp, #0
    db16:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	699b      	ldr	r3, [r3, #24]
    db1c:	f1b3 3fff 	cmp.w	r3, #4294967295
    db20:	bf14      	ite	ne
    db22:	2301      	movne	r3, #1
    db24:	2300      	moveq	r3, #0
    db26:	b2db      	uxtb	r3, r3
    db28:	2b00      	cmp	r3, #0
    db2a:	d002      	beq.n	db32 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	699b      	ldr	r3, [r3, #24]
    db30:	e011      	b.n	db56 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    db32:	687b      	ldr	r3, [r7, #4]
    db34:	681b      	ldr	r3, [r3, #0]
    db36:	331c      	adds	r3, #28
    db38:	681b      	ldr	r3, [r3, #0]
    db3a:	f107 010f 	add.w	r1, r7, #15
    db3e:	2201      	movs	r2, #1
    db40:	6878      	ldr	r0, [r7, #4]
    db42:	4798      	blx	r3
    db44:	4602      	mov	r2, r0
    db46:	687b      	ldr	r3, [r7, #4]
    db48:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    db4a:	7bfb      	ldrb	r3, [r7, #15]
    db4c:	461a      	mov	r2, r3
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    db52:	687b      	ldr	r3, [r7, #4]
    db54:	699b      	ldr	r3, [r3, #24]
}
    db56:	4618      	mov	r0, r3
    db58:	3710      	adds	r7, #16
    db5a:	46bd      	mov	sp, r7
    db5c:	bd80      	pop	{r7, pc}
	...

0000db60 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    db60:	b580      	push	{r7, lr}
    db62:	b086      	sub	sp, #24
    db64:	af00      	add	r7, sp, #0
    db66:	60f8      	str	r0, [r7, #12]
    db68:	60b9      	str	r1, [r7, #8]
    db6a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    db6c:	68fb      	ldr	r3, [r7, #12]
    db6e:	7c1b      	ldrb	r3, [r3, #16]
    db70:	b2db      	uxtb	r3, r3
    db72:	2b00      	cmp	r3, #0
    db74:	d02e      	beq.n	dbd4 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    db76:	687a      	ldr	r2, [r7, #4]
    db78:	4613      	mov	r3, r2
    db7a:	009b      	lsls	r3, r3, #2
    db7c:	4413      	add	r3, r2
    db7e:	005b      	lsls	r3, r3, #1
    db80:	461a      	mov	r2, r3
    db82:	4918      	ldr	r1, [pc, #96]	; (dbe4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    db84:	4818      	ldr	r0, [pc, #96]	; (dbe8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    db86:	4b19      	ldr	r3, [pc, #100]	; (dbec <_ZN9CDC_Class8readDataEPvl+0x8c>)
    db88:	4798      	blx	r3
		rxReady=false;
    db8a:	68fb      	ldr	r3, [r7, #12]
    db8c:	2200      	movs	r2, #0
    db8e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    db90:	687b      	ldr	r3, [r7, #4]
    db92:	4619      	mov	r1, r3
    db94:	68b8      	ldr	r0, [r7, #8]
    db96:	4b16      	ldr	r3, [pc, #88]	; (dbf0 <_ZN9CDC_Class8readDataEPvl+0x90>)
    db98:	4798      	blx	r3
    db9a:	4603      	mov	r3, r0
    db9c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    db9e:	68fb      	ldr	r3, [r7, #12]
    dba0:	7d5b      	ldrb	r3, [r3, #21]
    dba2:	b2db      	uxtb	r3, r3
    dba4:	f083 0301 	eor.w	r3, r3, #1
    dba8:	b2db      	uxtb	r3, r3
    dbaa:	2b00      	cmp	r3, #0
    dbac:	d006      	beq.n	dbbc <_ZN9CDC_Class8readDataEPvl+0x5c>
    dbae:	68fb      	ldr	r3, [r7, #12]
    dbb0:	7c1b      	ldrb	r3, [r3, #16]
    dbb2:	b2db      	uxtb	r3, r3
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d001      	beq.n	dbbc <_ZN9CDC_Class8readDataEPvl+0x5c>
    dbb8:	2301      	movs	r3, #1
    dbba:	e000      	b.n	dbbe <_ZN9CDC_Class8readDataEPvl+0x5e>
    dbbc:	2300      	movs	r3, #0
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d000      	beq.n	dbc4 <_ZN9CDC_Class8readDataEPvl+0x64>
    dbc2:	e7ec      	b.n	db9e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    dbc4:	4808      	ldr	r0, [pc, #32]	; (dbe8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    dbc6:	4b0b      	ldr	r3, [pc, #44]	; (dbf4 <_ZN9CDC_Class8readDataEPvl+0x94>)
    dbc8:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dbca:	4906      	ldr	r1, [pc, #24]	; (dbe4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    dbcc:	4806      	ldr	r0, [pc, #24]	; (dbe8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    dbce:	4b0a      	ldr	r3, [pc, #40]	; (dbf8 <_ZN9CDC_Class8readDataEPvl+0x98>)
    dbd0:	4798      	blx	r3
    dbd2:	e001      	b.n	dbd8 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    dbd4:	2300      	movs	r3, #0
    dbd6:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    dbd8:	7dfb      	ldrb	r3, [r7, #23]
}
    dbda:	4618      	mov	r0, r3
    dbdc:	3718      	adds	r7, #24
    dbde:	46bd      	mov	sp, r7
    dbe0:	bd80      	pop	{r7, pc}
    dbe2:	bf00      	nop
    dbe4:	0000da75 	.word	0x0000da75
    dbe8:	200013b0 	.word	0x200013b0
    dbec:	0000e0cd 	.word	0x0000e0cd
    dbf0:	0000c485 	.word	0x0000c485
    dbf4:	0000e03d 	.word	0x0000e03d
    dbf8:	0000e105 	.word	0x0000e105

0000dbfc <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    dbfc:	b580      	push	{r7, lr}
    dbfe:	b084      	sub	sp, #16
    dc00:	af00      	add	r7, sp, #0
    dc02:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dc04:	687b      	ldr	r3, [r7, #4]
    dc06:	2200      	movs	r2, #0
    dc08:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dc0a:	f107 030f 	add.w	r3, r7, #15
    dc0e:	2101      	movs	r1, #1
    dc10:	4618      	mov	r0, r3
    dc12:	4b08      	ldr	r3, [pc, #32]	; (dc34 <_ZN9CDC_Class4readEv+0x38>)
    dc14:	4798      	blx	r3
	while(!rxReady);
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	7d5b      	ldrb	r3, [r3, #21]
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	f083 0301 	eor.w	r3, r3, #1
    dc20:	b2db      	uxtb	r3, r3
    dc22:	2b00      	cmp	r3, #0
    dc24:	d000      	beq.n	dc28 <_ZN9CDC_Class4readEv+0x2c>
    dc26:	e7f6      	b.n	dc16 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    dc28:	7bfb      	ldrb	r3, [r7, #15]
}
    dc2a:	4618      	mov	r0, r3
    dc2c:	3710      	adds	r7, #16
    dc2e:	46bd      	mov	sp, r7
    dc30:	bd80      	pop	{r7, pc}
    dc32:	bf00      	nop
    dc34:	0000c485 	.word	0x0000c485

0000dc38 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    dc38:	b580      	push	{r7, lr}
    dc3a:	b082      	sub	sp, #8
    dc3c:	af00      	add	r7, sp, #0
    dc3e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	331c      	adds	r3, #28
    dc44:	2140      	movs	r1, #64	; 0x40
    dc46:	4618      	mov	r0, r3
    dc48:	4b02      	ldr	r3, [pc, #8]	; (dc54 <_ZN9CDC_Class5flushEv+0x1c>)
    dc4a:	4798      	blx	r3
}
    dc4c:	bf00      	nop
    dc4e:	3708      	adds	r7, #8
    dc50:	46bd      	mov	sp, r7
    dc52:	bd80      	pop	{r7, pc}
    dc54:	0000c4c9 	.word	0x0000c4c9

0000dc58 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dc58:	b580      	push	{r7, lr}
    dc5a:	b082      	sub	sp, #8
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    dc60:	4b02      	ldr	r3, [pc, #8]	; (dc6c <_ZN9CDC_Class5clearEv+0x14>)
    dc62:	4798      	blx	r3
}
    dc64:	bf00      	nop
    dc66:	3708      	adds	r7, #8
    dc68:	46bd      	mov	sp, r7
    dc6a:	bd80      	pop	{r7, pc}
    dc6c:	0000c50d 	.word	0x0000c50d

0000dc70 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    dc70:	b580      	push	{r7, lr}
    dc72:	b082      	sub	sp, #8
    dc74:	af00      	add	r7, sp, #0
    dc76:	6078      	str	r0, [r7, #4]
    dc78:	460b      	mov	r3, r1
    dc7a:	70fb      	strb	r3, [r7, #3]
	if (connected){
    dc7c:	687b      	ldr	r3, [r7, #4]
    dc7e:	7c1b      	ldrb	r3, [r3, #16]
    dc80:	b2db      	uxtb	r3, r3
    dc82:	2b00      	cmp	r3, #0
    dc84:	d012      	beq.n	dcac <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	7d1b      	ldrb	r3, [r3, #20]
    dc8a:	b2db      	uxtb	r3, r3
    dc8c:	f083 0301 	eor.w	r3, r3, #1
    dc90:	b2db      	uxtb	r3, r3
    dc92:	2b00      	cmp	r3, #0
    dc94:	d000      	beq.n	dc98 <_ZN9CDC_Class5writeEh+0x28>
    dc96:	e7f6      	b.n	dc86 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    dc98:	687b      	ldr	r3, [r7, #4]
    dc9a:	681b      	ldr	r3, [r3, #0]
    dc9c:	3324      	adds	r3, #36	; 0x24
    dc9e:	681b      	ldr	r3, [r3, #0]
    dca0:	1cf9      	adds	r1, r7, #3
    dca2:	2201      	movs	r2, #1
    dca4:	6878      	ldr	r0, [r7, #4]
    dca6:	4798      	blx	r3
    dca8:	4603      	mov	r3, r0
    dcaa:	e000      	b.n	dcae <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    dcac:	2300      	movs	r3, #0
	}
		
}
    dcae:	4618      	mov	r0, r3
    dcb0:	3708      	adds	r7, #8
    dcb2:	46bd      	mov	sp, r7
    dcb4:	bd80      	pop	{r7, pc}
	...

0000dcb8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    dcb8:	b580      	push	{r7, lr}
    dcba:	b086      	sub	sp, #24
    dcbc:	af00      	add	r7, sp, #0
    dcbe:	60f8      	str	r0, [r7, #12]
    dcc0:	60b9      	str	r1, [r7, #8]
    dcc2:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    dcc4:	68fb      	ldr	r3, [r7, #12]
    dcc6:	7c1b      	ldrb	r3, [r3, #16]
    dcc8:	b2db      	uxtb	r3, r3
    dcca:	2b00      	cmp	r3, #0
    dccc:	d02f      	beq.n	dd2e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dcce:	687a      	ldr	r2, [r7, #4]
    dcd0:	4613      	mov	r3, r2
    dcd2:	009b      	lsls	r3, r3, #2
    dcd4:	4413      	add	r3, r2
    dcd6:	005b      	lsls	r3, r3, #1
    dcd8:	461a      	mov	r2, r3
    dcda:	4917      	ldr	r1, [pc, #92]	; (dd38 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dcdc:	4817      	ldr	r0, [pc, #92]	; (dd3c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dcde:	4b18      	ldr	r3, [pc, #96]	; (dd40 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    dce0:	4798      	blx	r3
		txReady=false;
    dce2:	68fb      	ldr	r3, [r7, #12]
    dce4:	2200      	movs	r2, #0
    dce6:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dce8:	687b      	ldr	r3, [r7, #4]
    dcea:	4619      	mov	r1, r3
    dcec:	68b8      	ldr	r0, [r7, #8]
    dcee:	4b15      	ldr	r3, [pc, #84]	; (dd44 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    dcf0:	4798      	blx	r3
    dcf2:	4603      	mov	r3, r0
    dcf4:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    dcf6:	68fb      	ldr	r3, [r7, #12]
    dcf8:	7d1b      	ldrb	r3, [r3, #20]
    dcfa:	b2db      	uxtb	r3, r3
    dcfc:	f083 0301 	eor.w	r3, r3, #1
    dd00:	b2db      	uxtb	r3, r3
    dd02:	2b00      	cmp	r3, #0
    dd04:	d006      	beq.n	dd14 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dd06:	68fb      	ldr	r3, [r7, #12]
    dd08:	7c1b      	ldrb	r3, [r3, #16]
    dd0a:	b2db      	uxtb	r3, r3
    dd0c:	2b00      	cmp	r3, #0
    dd0e:	d001      	beq.n	dd14 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dd10:	2301      	movs	r3, #1
    dd12:	e000      	b.n	dd16 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    dd14:	2300      	movs	r3, #0
    dd16:	2b00      	cmp	r3, #0
    dd18:	d000      	beq.n	dd1c <_ZN9CDC_Class9writeDataEPKvl+0x64>
    dd1a:	e7ec      	b.n	dcf6 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    dd1c:	4807      	ldr	r0, [pc, #28]	; (dd3c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dd1e:	4b0a      	ldr	r3, [pc, #40]	; (dd48 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    dd20:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dd22:	4905      	ldr	r1, [pc, #20]	; (dd38 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dd24:	4805      	ldr	r0, [pc, #20]	; (dd3c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dd26:	4b09      	ldr	r3, [pc, #36]	; (dd4c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    dd28:	4798      	blx	r3
		return r;
    dd2a:	697b      	ldr	r3, [r7, #20]
    dd2c:	e000      	b.n	dd30 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    dd2e:	2300      	movs	r3, #0
	}
	

}
    dd30:	4618      	mov	r0, r3
    dd32:	3718      	adds	r7, #24
    dd34:	46bd      	mov	sp, r7
    dd36:	bd80      	pop	{r7, pc}
    dd38:	0000da75 	.word	0x0000da75
    dd3c:	200013b0 	.word	0x200013b0
    dd40:	0000e0cd 	.word	0x0000e0cd
    dd44:	0000c4c9 	.word	0x0000c4c9
    dd48:	0000e03d 	.word	0x0000e03d
    dd4c:	0000e105 	.word	0x0000e105

0000dd50 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    dd50:	b580      	push	{r7, lr}
    dd52:	b086      	sub	sp, #24
    dd54:	af00      	add	r7, sp, #0
    dd56:	60f8      	str	r0, [r7, #12]
    dd58:	60b9      	str	r1, [r7, #8]
    dd5a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dd5c:	68fb      	ldr	r3, [r7, #12]
    dd5e:	2200      	movs	r2, #0
    dd60:	751a      	strb	r2, [r3, #20]

 	if (connected){
    dd62:	68fb      	ldr	r3, [r7, #12]
    dd64:	7c1b      	ldrb	r3, [r3, #16]
    dd66:	b2db      	uxtb	r3, r3
    dd68:	2b00      	cmp	r3, #0
    dd6a:	d02a      	beq.n	ddc2 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dd6c:	687a      	ldr	r2, [r7, #4]
    dd6e:	4613      	mov	r3, r2
    dd70:	009b      	lsls	r3, r3, #2
    dd72:	4413      	add	r3, r2
    dd74:	005b      	lsls	r3, r3, #1
    dd76:	461a      	mov	r2, r3
    dd78:	4915      	ldr	r1, [pc, #84]	; (ddd0 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dd7a:	4816      	ldr	r0, [pc, #88]	; (ddd4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    dd7c:	4b16      	ldr	r3, [pc, #88]	; (ddd8 <_ZN9CDC_Class5writeEPKhj+0x88>)
    dd7e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dd80:	6879      	ldr	r1, [r7, #4]
    dd82:	68b8      	ldr	r0, [r7, #8]
    dd84:	4b15      	ldr	r3, [pc, #84]	; (dddc <_ZN9CDC_Class5writeEPKhj+0x8c>)
    dd86:	4798      	blx	r3
    dd88:	4603      	mov	r3, r0
    dd8a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    dd8c:	68fb      	ldr	r3, [r7, #12]
    dd8e:	7d1b      	ldrb	r3, [r3, #20]
    dd90:	b2db      	uxtb	r3, r3
    dd92:	f083 0301 	eor.w	r3, r3, #1
    dd96:	b2db      	uxtb	r3, r3
    dd98:	2b00      	cmp	r3, #0
    dd9a:	d006      	beq.n	ddaa <_ZN9CDC_Class5writeEPKhj+0x5a>
    dd9c:	68fb      	ldr	r3, [r7, #12]
    dd9e:	7c1b      	ldrb	r3, [r3, #16]
    dda0:	b2db      	uxtb	r3, r3
    dda2:	2b00      	cmp	r3, #0
    dda4:	d001      	beq.n	ddaa <_ZN9CDC_Class5writeEPKhj+0x5a>
    dda6:	2301      	movs	r3, #1
    dda8:	e000      	b.n	ddac <_ZN9CDC_Class5writeEPKhj+0x5c>
    ddaa:	2300      	movs	r3, #0
    ddac:	2b00      	cmp	r3, #0
    ddae:	d000      	beq.n	ddb2 <_ZN9CDC_Class5writeEPKhj+0x62>
    ddb0:	e7ec      	b.n	dd8c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    ddb2:	4808      	ldr	r0, [pc, #32]	; (ddd4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    ddb4:	4b0a      	ldr	r3, [pc, #40]	; (dde0 <_ZN9CDC_Class5writeEPKhj+0x90>)
    ddb6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ddb8:	4905      	ldr	r1, [pc, #20]	; (ddd0 <_ZN9CDC_Class5writeEPKhj+0x80>)
    ddba:	4806      	ldr	r0, [pc, #24]	; (ddd4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    ddbc:	4b09      	ldr	r3, [pc, #36]	; (dde4 <_ZN9CDC_Class5writeEPKhj+0x94>)
    ddbe:	4798      	blx	r3
    ddc0:	e001      	b.n	ddc6 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    ddc2:	2300      	movs	r3, #0
    ddc4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    ddc6:	697b      	ldr	r3, [r7, #20]
}
    ddc8:	4618      	mov	r0, r3
    ddca:	3718      	adds	r7, #24
    ddcc:	46bd      	mov	sp, r7
    ddce:	bd80      	pop	{r7, pc}
    ddd0:	0000da75 	.word	0x0000da75
    ddd4:	200013b0 	.word	0x200013b0
    ddd8:	0000e0cd 	.word	0x0000e0cd
    dddc:	0000c4c9 	.word	0x0000c4c9
    dde0:	0000e03d 	.word	0x0000e03d
    dde4:	0000e105 	.word	0x0000e105

0000dde8 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    dde8:	b480      	push	{r7}
    ddea:	b083      	sub	sp, #12
    ddec:	af00      	add	r7, sp, #0
    ddee:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    ddf0:	687b      	ldr	r3, [r7, #4]
    ddf2:	7d5b      	ldrb	r3, [r3, #21]
    ddf4:	b2db      	uxtb	r3, r3
    ddf6:	2b00      	cmp	r3, #0
    ddf8:	d006      	beq.n	de08 <_ZN9CDC_Class9availableEv+0x20>
    ddfa:	687b      	ldr	r3, [r7, #4]
    ddfc:	7d1b      	ldrb	r3, [r3, #20]
    ddfe:	b2db      	uxtb	r3, r3
    de00:	2b00      	cmp	r3, #0
    de02:	d001      	beq.n	de08 <_ZN9CDC_Class9availableEv+0x20>
    de04:	2301      	movs	r3, #1
    de06:	e000      	b.n	de0a <_ZN9CDC_Class9availableEv+0x22>
    de08:	2300      	movs	r3, #0
    de0a:	2b00      	cmp	r3, #0
    de0c:	d001      	beq.n	de12 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    de0e:	2301      	movs	r3, #1
    de10:	e000      	b.n	de14 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    de12:	2300      	movs	r3, #0
	}
	
}
    de14:	4618      	mov	r0, r3
    de16:	370c      	adds	r7, #12
    de18:	46bd      	mov	sp, r7
    de1a:	bc80      	pop	{r7}
    de1c:	4770      	bx	lr
	...

0000de20 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    de20:	b580      	push	{r7, lr}
    de22:	b082      	sub	sp, #8
    de24:	af00      	add	r7, sp, #0
    de26:	6078      	str	r0, [r7, #4]
    de28:	6039      	str	r1, [r7, #0]
    de2a:	687b      	ldr	r3, [r7, #4]
    de2c:	2b01      	cmp	r3, #1
    de2e:	d10c      	bne.n	de4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    de30:	683b      	ldr	r3, [r7, #0]
    de32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de36:	4293      	cmp	r3, r2
    de38:	d107      	bne.n	de4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    de3a:	4806      	ldr	r0, [pc, #24]	; (de54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    de3c:	4b06      	ldr	r3, [pc, #24]	; (de58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    de3e:	4798      	blx	r3
    de40:	4a06      	ldr	r2, [pc, #24]	; (de5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    de42:	4907      	ldr	r1, [pc, #28]	; (de60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    de44:	4803      	ldr	r0, [pc, #12]	; (de54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    de46:	4b07      	ldr	r3, [pc, #28]	; (de64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    de48:	4798      	blx	r3
    de4a:	bf00      	nop
    de4c:	3708      	adds	r7, #8
    de4e:	46bd      	mov	sp, r7
    de50:	bd80      	pop	{r7, pc}
    de52:	bf00      	nop
    de54:	200012f8 	.word	0x200012f8
    de58:	0000da9d 	.word	0x0000da9d
    de5c:	20000000 	.word	0x20000000
    de60:	0000dae5 	.word	0x0000dae5
    de64:	0000e325 	.word	0x0000e325

0000de68 <_GLOBAL__sub_I_ptrCDCClass>:
    de68:	b580      	push	{r7, lr}
    de6a:	af00      	add	r7, sp, #0
    de6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de70:	2001      	movs	r0, #1
    de72:	4b01      	ldr	r3, [pc, #4]	; (de78 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    de74:	4798      	blx	r3
    de76:	bd80      	pop	{r7, pc}
    de78:	0000de21 	.word	0x0000de21

0000de7c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    de7c:	b590      	push	{r4, r7, lr}
    de7e:	b083      	sub	sp, #12
    de80:	af00      	add	r7, sp, #0
    de82:	6078      	str	r0, [r7, #4]
    de84:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    de86:	683b      	ldr	r3, [r7, #0]
    de88:	2b00      	cmp	r3, #0
    de8a:	d101      	bne.n	de90 <_ZN5Print5writeEPKc+0x14>
    de8c:	2300      	movs	r3, #0
    de8e:	e00c      	b.n	deaa <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    de90:	687b      	ldr	r3, [r7, #4]
    de92:	681b      	ldr	r3, [r3, #0]
    de94:	3304      	adds	r3, #4
    de96:	681c      	ldr	r4, [r3, #0]
    de98:	6838      	ldr	r0, [r7, #0]
    de9a:	4b06      	ldr	r3, [pc, #24]	; (deb4 <_ZN5Print5writeEPKc+0x38>)
    de9c:	4798      	blx	r3
    de9e:	4603      	mov	r3, r0
    dea0:	461a      	mov	r2, r3
    dea2:	6839      	ldr	r1, [r7, #0]
    dea4:	6878      	ldr	r0, [r7, #4]
    dea6:	47a0      	blx	r4
    dea8:	4603      	mov	r3, r0
    }
    deaa:	4618      	mov	r0, r3
    deac:	370c      	adds	r7, #12
    deae:	46bd      	mov	sp, r7
    deb0:	bd90      	pop	{r4, r7, pc}
    deb2:	bf00      	nop
    deb4:	00010001 	.word	0x00010001

0000deb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    deb8:	b580      	push	{r7, lr}
    deba:	b086      	sub	sp, #24
    debc:	af00      	add	r7, sp, #0
    debe:	60f8      	str	r0, [r7, #12]
    dec0:	60b9      	str	r1, [r7, #8]
    dec2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    dec4:	2300      	movs	r3, #0
    dec6:	617b      	str	r3, [r7, #20]
  while (size--) {
    dec8:	687b      	ldr	r3, [r7, #4]
    deca:	1e5a      	subs	r2, r3, #1
    decc:	607a      	str	r2, [r7, #4]
    dece:	2b00      	cmp	r3, #0
    ded0:	bf14      	ite	ne
    ded2:	2301      	movne	r3, #1
    ded4:	2300      	moveq	r3, #0
    ded6:	b2db      	uxtb	r3, r3
    ded8:	2b00      	cmp	r3, #0
    deda:	d016      	beq.n	df0a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    dedc:	68fb      	ldr	r3, [r7, #12]
    dede:	681b      	ldr	r3, [r3, #0]
    dee0:	681a      	ldr	r2, [r3, #0]
    dee2:	68bb      	ldr	r3, [r7, #8]
    dee4:	1c59      	adds	r1, r3, #1
    dee6:	60b9      	str	r1, [r7, #8]
    dee8:	781b      	ldrb	r3, [r3, #0]
    deea:	4619      	mov	r1, r3
    deec:	68f8      	ldr	r0, [r7, #12]
    deee:	4790      	blx	r2
    def0:	4603      	mov	r3, r0
    def2:	2b00      	cmp	r3, #0
    def4:	bf14      	ite	ne
    def6:	2301      	movne	r3, #1
    def8:	2300      	moveq	r3, #0
    defa:	b2db      	uxtb	r3, r3
    defc:	2b00      	cmp	r3, #0
    defe:	d003      	beq.n	df08 <_ZN5Print5writeEPKhj+0x50>
    df00:	697b      	ldr	r3, [r7, #20]
    df02:	3301      	adds	r3, #1
    df04:	617b      	str	r3, [r7, #20]
  while (size--) {
    df06:	e7df      	b.n	dec8 <_ZN5Print5writeEPKhj+0x10>
    else break;
    df08:	bf00      	nop
  }
  return n;
    df0a:	697b      	ldr	r3, [r7, #20]
}
    df0c:	4618      	mov	r0, r3
    df0e:	3718      	adds	r7, #24
    df10:	46bd      	mov	sp, r7
    df12:	bd80      	pop	{r7, pc}

0000df14 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    df14:	b580      	push	{r7, lr}
    df16:	b082      	sub	sp, #8
    df18:	af00      	add	r7, sp, #0
    df1a:	6078      	str	r0, [r7, #4]
    df1c:	6039      	str	r1, [r7, #0]
  return write(str);
    df1e:	6839      	ldr	r1, [r7, #0]
    df20:	6878      	ldr	r0, [r7, #4]
    df22:	4b03      	ldr	r3, [pc, #12]	; (df30 <_ZN5Print5printEPKc+0x1c>)
    df24:	4798      	blx	r3
    df26:	4603      	mov	r3, r0
}
    df28:	4618      	mov	r0, r3
    df2a:	3708      	adds	r7, #8
    df2c:	46bd      	mov	sp, r7
    df2e:	bd80      	pop	{r7, pc}
    df30:	0000de7d 	.word	0x0000de7d

0000df34 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    df34:	b580      	push	{r7, lr}
    df36:	b082      	sub	sp, #8
    df38:	af00      	add	r7, sp, #0
    df3a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    df3c:	4904      	ldr	r1, [pc, #16]	; (df50 <_ZN5Print7printlnEv+0x1c>)
    df3e:	6878      	ldr	r0, [r7, #4]
    df40:	4b04      	ldr	r3, [pc, #16]	; (df54 <_ZN5Print7printlnEv+0x20>)
    df42:	4798      	blx	r3
    df44:	4603      	mov	r3, r0
}
    df46:	4618      	mov	r0, r3
    df48:	3708      	adds	r7, #8
    df4a:	46bd      	mov	sp, r7
    df4c:	bd80      	pop	{r7, pc}
    df4e:	bf00      	nop
    df50:	00011184 	.word	0x00011184
    df54:	0000de7d 	.word	0x0000de7d

0000df58 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    df58:	b580      	push	{r7, lr}
    df5a:	b084      	sub	sp, #16
    df5c:	af00      	add	r7, sp, #0
    df5e:	6078      	str	r0, [r7, #4]
    df60:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    df62:	6839      	ldr	r1, [r7, #0]
    df64:	6878      	ldr	r0, [r7, #4]
    df66:	4b07      	ldr	r3, [pc, #28]	; (df84 <_ZN5Print7printlnEPKc+0x2c>)
    df68:	4798      	blx	r3
    df6a:	60f8      	str	r0, [r7, #12]
  n += println();
    df6c:	6878      	ldr	r0, [r7, #4]
    df6e:	4b06      	ldr	r3, [pc, #24]	; (df88 <_ZN5Print7printlnEPKc+0x30>)
    df70:	4798      	blx	r3
    df72:	4602      	mov	r2, r0
    df74:	68fb      	ldr	r3, [r7, #12]
    df76:	4413      	add	r3, r2
    df78:	60fb      	str	r3, [r7, #12]
  return n;
    df7a:	68fb      	ldr	r3, [r7, #12]
}
    df7c:	4618      	mov	r0, r3
    df7e:	3710      	adds	r7, #16
    df80:	46bd      	mov	sp, r7
    df82:	bd80      	pop	{r7, pc}
    df84:	0000df15 	.word	0x0000df15
    df88:	0000df35 	.word	0x0000df35

0000df8c <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    df8c:	b480      	push	{r7}
    df8e:	b083      	sub	sp, #12
    df90:	af00      	add	r7, sp, #0
    df92:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    df94:	4a04      	ldr	r2, [pc, #16]	; (dfa8 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    df96:	687b      	ldr	r3, [r7, #4]
    df98:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    df9a:	687b      	ldr	r3, [r7, #4]
    df9c:	4618      	mov	r0, r3
    df9e:	370c      	adds	r7, #12
    dfa0:	46bd      	mov	sp, r7
    dfa2:	bc80      	pop	{r7}
    dfa4:	4770      	bx	lr
    dfa6:	bf00      	nop
    dfa8:	20001358 	.word	0x20001358

0000dfac <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    dfac:	b480      	push	{r7}
    dfae:	b083      	sub	sp, #12
    dfb0:	af00      	add	r7, sp, #0
    dfb2:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    dfb4:	687b      	ldr	r3, [r7, #4]
    dfb6:	4618      	mov	r0, r3
    dfb8:	370c      	adds	r7, #12
    dfba:	46bd      	mov	sp, r7
    dfbc:	bc80      	pop	{r7}
    dfbe:	4770      	bx	lr

0000dfc0 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b082      	sub	sp, #8
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    dfc8:	4b04      	ldr	r3, [pc, #16]	; (dfdc <_ZL7task_cbPK10timer_task+0x1c>)
    dfca:	681b      	ldr	r3, [r3, #0]
    dfcc:	4618      	mov	r0, r3
    dfce:	4b04      	ldr	r3, [pc, #16]	; (dfe0 <_ZL7task_cbPK10timer_task+0x20>)
    dfd0:	4798      	blx	r3
}
    dfd2:	bf00      	nop
    dfd4:	3708      	adds	r7, #8
    dfd6:	46bd      	mov	sp, r7
    dfd8:	bd80      	pop	{r7, pc}
    dfda:	bf00      	nop
    dfdc:	2000135c 	.word	0x2000135c
    dfe0:	0000e065 	.word	0x0000e065

0000dfe4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    dfe4:	b480      	push	{r7}
    dfe6:	b083      	sub	sp, #12
    dfe8:	af00      	add	r7, sp, #0
    dfea:	6078      	str	r0, [r7, #4]
    dfec:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    dfee:	687b      	ldr	r3, [r7, #4]
    dff0:	683a      	ldr	r2, [r7, #0]
    dff2:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    dff4:	4a08      	ldr	r2, [pc, #32]	; (e018 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    dffa:	687b      	ldr	r3, [r7, #4]
    dffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e000:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e002:	687b      	ldr	r3, [r7, #4]
    e004:	689b      	ldr	r3, [r3, #8]
    e006:	4a05      	ldr	r2, [pc, #20]	; (e01c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e008:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e00a:	687b      	ldr	r3, [r7, #4]
    e00c:	4618      	mov	r0, r3
    e00e:	370c      	adds	r7, #12
    e010:	46bd      	mov	sp, r7
    e012:	bc80      	pop	{r7}
    e014:	4770      	bx	lr
    e016:	bf00      	nop
    e018:	2000135c 	.word	0x2000135c
    e01c:	0000dfc1 	.word	0x0000dfc1

0000e020 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e020:	b480      	push	{r7}
    e022:	b083      	sub	sp, #12
    e024:	af00      	add	r7, sp, #0
    e026:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	2200      	movs	r2, #0
    e02c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	4618      	mov	r0, r3
    e032:	370c      	adds	r7, #12
    e034:	46bd      	mov	sp, r7
    e036:	bc80      	pop	{r7}
    e038:	4770      	bx	lr
	...

0000e03c <_ZN17TimerSerial_Class4StopEv>:
	status=timer_start(timer_descr);
	return status;
	
}

int32_t TimerSerial_Class::Stop( void){
    e03c:	b580      	push	{r7, lr}
    e03e:	b084      	sub	sp, #16
    e040:	af00      	add	r7, sp, #0
    e042:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e044:	687b      	ldr	r3, [r7, #4]
    e046:	691b      	ldr	r3, [r3, #16]
    e048:	4618      	mov	r0, r3
    e04a:	4b05      	ldr	r3, [pc, #20]	; (e060 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e04c:	4798      	blx	r3
    e04e:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	2200      	movs	r2, #0
    e054:	705a      	strb	r2, [r3, #1]
	return status;
    e056:	68fb      	ldr	r3, [r7, #12]
}
    e058:	4618      	mov	r0, r3
    e05a:	3710      	adds	r7, #16
    e05c:	46bd      	mov	sp, r7
    e05e:	bd80      	pop	{r7, pc}
    e060:	00002f31 	.word	0x00002f31

0000e064 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e064:	b480      	push	{r7}
    e066:	b083      	sub	sp, #12
    e068:	af00      	add	r7, sp, #0
    e06a:	6078      	str	r0, [r7, #4]
	timeout=1;
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	2201      	movs	r2, #1
    e070:	705a      	strb	r2, [r3, #1]
}
    e072:	bf00      	nop
    e074:	370c      	adds	r7, #12
    e076:	46bd      	mov	sp, r7
    e078:	bc80      	pop	{r7}
    e07a:	4770      	bx	lr

0000e07c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e07c:	b580      	push	{r7, lr}
    e07e:	b086      	sub	sp, #24
    e080:	af00      	add	r7, sp, #0
    e082:	60f8      	str	r0, [r7, #12]
    e084:	60b9      	str	r1, [r7, #8]
    e086:	607a      	str	r2, [r7, #4]
    e088:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e08a:	68f8      	ldr	r0, [r7, #12]
    e08c:	4b0d      	ldr	r3, [pc, #52]	; (e0c4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e08e:	4798      	blx	r3
	task->interval = interval;
    e090:	68fb      	ldr	r3, [r7, #12]
    e092:	689b      	ldr	r3, [r3, #8]
    e094:	687a      	ldr	r2, [r7, #4]
    e096:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e098:	68fb      	ldr	r3, [r7, #12]
    e09a:	689b      	ldr	r3, [r3, #8]
    e09c:	68ba      	ldr	r2, [r7, #8]
    e09e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e0a0:	68fb      	ldr	r3, [r7, #12]
    e0a2:	689b      	ldr	r3, [r3, #8]
    e0a4:	78fa      	ldrb	r2, [r7, #3]
    e0a6:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e0a8:	68fb      	ldr	r3, [r7, #12]
    e0aa:	691a      	ldr	r2, [r3, #16]
    e0ac:	68fb      	ldr	r3, [r7, #12]
    e0ae:	689b      	ldr	r3, [r3, #8]
    e0b0:	4619      	mov	r1, r3
    e0b2:	4610      	mov	r0, r2
    e0b4:	4b04      	ldr	r3, [pc, #16]	; (e0c8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e0b6:	4798      	blx	r3
    e0b8:	6178      	str	r0, [r7, #20]
	
	return status;
    e0ba:	697b      	ldr	r3, [r7, #20]
}
    e0bc:	4618      	mov	r0, r3
    e0be:	3718      	adds	r7, #24
    e0c0:	46bd      	mov	sp, r7
    e0c2:	bd80      	pop	{r7, pc}
    e0c4:	0000e15d 	.word	0x0000e15d
    e0c8:	00002f9d 	.word	0x00002f9d

0000e0cc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	return status;
}
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e0cc:	b590      	push	{r4, r7, lr}
    e0ce:	b087      	sub	sp, #28
    e0d0:	af00      	add	r7, sp, #0
    e0d2:	60f8      	str	r0, [r7, #12]
    e0d4:	60b9      	str	r1, [r7, #8]
    e0d6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e0d8:	2300      	movs	r3, #0
    e0da:	687a      	ldr	r2, [r7, #4]
    e0dc:	68b9      	ldr	r1, [r7, #8]
    e0de:	68f8      	ldr	r0, [r7, #12]
    e0e0:	4c06      	ldr	r4, [pc, #24]	; (e0fc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e0e2:	47a0      	blx	r4
    e0e4:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	691b      	ldr	r3, [r3, #16]
    e0ea:	4618      	mov	r0, r3
    e0ec:	4b04      	ldr	r3, [pc, #16]	; (e100 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e0ee:	4798      	blx	r3
    e0f0:	6178      	str	r0, [r7, #20]
	return status;
    e0f2:	697b      	ldr	r3, [r7, #20]
}
    e0f4:	4618      	mov	r0, r3
    e0f6:	371c      	adds	r7, #28
    e0f8:	46bd      	mov	sp, r7
    e0fa:	bd90      	pop	{r4, r7, pc}
    e0fc:	0000e07d 	.word	0x0000e07d
    e100:	00002ec9 	.word	0x00002ec9

0000e104 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e104:	b580      	push	{r7, lr}
    e106:	b082      	sub	sp, #8
    e108:	af00      	add	r7, sp, #0
    e10a:	6078      	str	r0, [r7, #4]
    e10c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e10e:	6839      	ldr	r1, [r7, #0]
    e110:	6878      	ldr	r0, [r7, #4]
    e112:	4b0f      	ldr	r3, [pc, #60]	; (e150 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e114:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	691b      	ldr	r3, [r3, #16]
    e11a:	f103 0218 	add.w	r2, r3, #24
    e11e:	687b      	ldr	r3, [r7, #4]
    e120:	689b      	ldr	r3, [r3, #8]
    e122:	4619      	mov	r1, r3
    e124:	4610      	mov	r0, r2
    e126:	4b0b      	ldr	r3, [pc, #44]	; (e154 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e128:	4798      	blx	r3
    e12a:	4603      	mov	r3, r0
    e12c:	2b00      	cmp	r3, #0
    e12e:	d007      	beq.n	e140 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e130:	687b      	ldr	r3, [r7, #4]
    e132:	691a      	ldr	r2, [r3, #16]
    e134:	687b      	ldr	r3, [r7, #4]
    e136:	689b      	ldr	r3, [r3, #8]
    e138:	4619      	mov	r1, r3
    e13a:	4610      	mov	r0, r2
    e13c:	4b06      	ldr	r3, [pc, #24]	; (e158 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e13e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	689b      	ldr	r3, [r3, #8]
    e144:	2200      	movs	r2, #0
    e146:	60da      	str	r2, [r3, #12]
}
    e148:	bf00      	nop
    e14a:	3708      	adds	r7, #8
    e14c:	46bd      	mov	sp, r7
    e14e:	bd80      	pop	{r7, pc}
    e150:	0000e1b5 	.word	0x0000e1b5
    e154:	00003c89 	.word	0x00003c89
    e158:	000030a1 	.word	0x000030a1

0000e15c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e15c:	b480      	push	{r7}
    e15e:	b085      	sub	sp, #20
    e160:	af00      	add	r7, sp, #0
    e162:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e164:	2300      	movs	r3, #0
    e166:	73fb      	strb	r3, [r7, #15]
    e168:	7bfb      	ldrb	r3, [r7, #15]
    e16a:	2b03      	cmp	r3, #3
    e16c:	dc18      	bgt.n	e1a0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    e16e:	7bfa      	ldrb	r2, [r7, #15]
    e170:	490f      	ldr	r1, [pc, #60]	; (e1b0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e172:	4613      	mov	r3, r2
    e174:	009b      	lsls	r3, r3, #2
    e176:	4413      	add	r3, r2
    e178:	009b      	lsls	r3, r3, #2
    e17a:	440b      	add	r3, r1
    e17c:	330c      	adds	r3, #12
    e17e:	681b      	ldr	r3, [r3, #0]
    e180:	2b00      	cmp	r3, #0
    e182:	d109      	bne.n	e198 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    e184:	7bfa      	ldrb	r2, [r7, #15]
    e186:	4613      	mov	r3, r2
    e188:	009b      	lsls	r3, r3, #2
    e18a:	4413      	add	r3, r2
    e18c:	009b      	lsls	r3, r3, #2
    e18e:	4a08      	ldr	r2, [pc, #32]	; (e1b0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e190:	441a      	add	r2, r3
    e192:	687b      	ldr	r3, [r7, #4]
    e194:	609a      	str	r2, [r3, #8]
			return;
    e196:	e006      	b.n	e1a6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e198:	7bfb      	ldrb	r3, [r7, #15]
    e19a:	3301      	adds	r3, #1
    e19c:	73fb      	strb	r3, [r7, #15]
    e19e:	e7e3      	b.n	e168 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    e1a0:	687b      	ldr	r3, [r7, #4]
    e1a2:	4a03      	ldr	r2, [pc, #12]	; (e1b0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e1a4:	609a      	str	r2, [r3, #8]

}
    e1a6:	3714      	adds	r7, #20
    e1a8:	46bd      	mov	sp, r7
    e1aa:	bc80      	pop	{r7}
    e1ac:	4770      	bx	lr
    e1ae:	bf00      	nop
    e1b0:	20001360 	.word	0x20001360

0000e1b4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e1b4:	b480      	push	{r7}
    e1b6:	b085      	sub	sp, #20
    e1b8:	af00      	add	r7, sp, #0
    e1ba:	6078      	str	r0, [r7, #4]
    e1bc:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e1be:	2300      	movs	r3, #0
    e1c0:	73fb      	strb	r3, [r7, #15]
    e1c2:	7bfb      	ldrb	r3, [r7, #15]
    e1c4:	2b03      	cmp	r3, #3
    e1c6:	dc19      	bgt.n	e1fc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e1c8:	7bfa      	ldrb	r2, [r7, #15]
    e1ca:	490e      	ldr	r1, [pc, #56]	; (e204 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e1cc:	4613      	mov	r3, r2
    e1ce:	009b      	lsls	r3, r3, #2
    e1d0:	4413      	add	r3, r2
    e1d2:	009b      	lsls	r3, r3, #2
    e1d4:	440b      	add	r3, r1
    e1d6:	330c      	adds	r3, #12
    e1d8:	681a      	ldr	r2, [r3, #0]
    e1da:	683b      	ldr	r3, [r7, #0]
    e1dc:	429a      	cmp	r2, r3
    e1de:	d109      	bne.n	e1f4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e1e0:	7bfa      	ldrb	r2, [r7, #15]
    e1e2:	4613      	mov	r3, r2
    e1e4:	009b      	lsls	r3, r3, #2
    e1e6:	4413      	add	r3, r2
    e1e8:	009b      	lsls	r3, r3, #2
    e1ea:	4a06      	ldr	r2, [pc, #24]	; (e204 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e1ec:	441a      	add	r2, r3
    e1ee:	687b      	ldr	r3, [r7, #4]
    e1f0:	609a      	str	r2, [r3, #8]
			return;
    e1f2:	e003      	b.n	e1fc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e1f4:	7bfb      	ldrb	r3, [r7, #15]
    e1f6:	3301      	adds	r3, #1
    e1f8:	73fb      	strb	r3, [r7, #15]
    e1fa:	e7e2      	b.n	e1c2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    e1fc:	3714      	adds	r7, #20
    e1fe:	46bd      	mov	sp, r7
    e200:	bc80      	pop	{r7}
    e202:	4770      	bx	lr
    e204:	20001360 	.word	0x20001360

0000e208 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e208:	b580      	push	{r7, lr}
    e20a:	b082      	sub	sp, #8
    e20c:	af00      	add	r7, sp, #0
    e20e:	6078      	str	r0, [r7, #4]
    e210:	6039      	str	r1, [r7, #0]
    e212:	687b      	ldr	r3, [r7, #4]
    e214:	2b01      	cmp	r3, #1
    e216:	d116      	bne.n	e246 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e218:	683b      	ldr	r3, [r7, #0]
    e21a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e21e:	4293      	cmp	r3, r2
    e220:	d111      	bne.n	e246 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e222:	490b      	ldr	r1, [pc, #44]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e224:	480b      	ldr	r0, [pc, #44]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e226:	4b0c      	ldr	r3, [pc, #48]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e228:	4798      	blx	r3
    e22a:	4a0c      	ldr	r2, [pc, #48]	; (e25c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e22c:	490c      	ldr	r1, [pc, #48]	; (e260 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e22e:	4809      	ldr	r0, [pc, #36]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e230:	4b0c      	ldr	r3, [pc, #48]	; (e264 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e232:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e234:	490c      	ldr	r1, [pc, #48]	; (e268 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e236:	480d      	ldr	r0, [pc, #52]	; (e26c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e238:	4b07      	ldr	r3, [pc, #28]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e23a:	4798      	blx	r3
    e23c:	4a07      	ldr	r2, [pc, #28]	; (e25c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e23e:	4908      	ldr	r1, [pc, #32]	; (e260 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e240:	480a      	ldr	r0, [pc, #40]	; (e26c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e242:	4b08      	ldr	r3, [pc, #32]	; (e264 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e244:	4798      	blx	r3
    e246:	bf00      	nop
    e248:	3708      	adds	r7, #8
    e24a:	46bd      	mov	sp, r7
    e24c:	bd80      	pop	{r7, pc}
    e24e:	bf00      	nop
    e250:	20001568 	.word	0x20001568
    e254:	200013b0 	.word	0x200013b0
    e258:	0000dfe5 	.word	0x0000dfe5
    e25c:	20000000 	.word	0x20000000
    e260:	0000e021 	.word	0x0000e021
    e264:	0000e325 	.word	0x0000e325
    e268:	20001460 	.word	0x20001460
    e26c:	200013d0 	.word	0x200013d0

0000e270 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e270:	b580      	push	{r7, lr}
    e272:	af00      	add	r7, sp, #0
    e274:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e278:	2001      	movs	r0, #1
    e27a:	4b01      	ldr	r3, [pc, #4]	; (e280 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e27c:	4798      	blx	r3
    e27e:	bd80      	pop	{r7, pc}
    e280:	0000e209 	.word	0x0000e209

0000e284 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e284:	b580      	push	{r7, lr}
    e286:	b084      	sub	sp, #16
    e288:	af00      	add	r7, sp, #0
    e28a:	60f8      	str	r0, [r7, #12]
    e28c:	60b9      	str	r1, [r7, #8]
    e28e:	4613      	mov	r3, r2
    e290:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e292:	68fb      	ldr	r3, [r7, #12]
    e294:	2b00      	cmp	r3, #0
    e296:	d004      	beq.n	e2a2 <io_write+0x1e>
    e298:	68bb      	ldr	r3, [r7, #8]
    e29a:	2b00      	cmp	r3, #0
    e29c:	d001      	beq.n	e2a2 <io_write+0x1e>
    e29e:	2301      	movs	r3, #1
    e2a0:	e000      	b.n	e2a4 <io_write+0x20>
    e2a2:	2300      	movs	r3, #0
    e2a4:	f003 0301 	and.w	r3, r3, #1
    e2a8:	b2db      	uxtb	r3, r3
    e2aa:	2234      	movs	r2, #52	; 0x34
    e2ac:	4907      	ldr	r1, [pc, #28]	; (e2cc <io_write+0x48>)
    e2ae:	4618      	mov	r0, r3
    e2b0:	4b07      	ldr	r3, [pc, #28]	; (e2d0 <io_write+0x4c>)
    e2b2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e2b4:	68fb      	ldr	r3, [r7, #12]
    e2b6:	681b      	ldr	r3, [r3, #0]
    e2b8:	88fa      	ldrh	r2, [r7, #6]
    e2ba:	68b9      	ldr	r1, [r7, #8]
    e2bc:	68f8      	ldr	r0, [r7, #12]
    e2be:	4798      	blx	r3
    e2c0:	4603      	mov	r3, r0
}
    e2c2:	4618      	mov	r0, r3
    e2c4:	3710      	adds	r7, #16
    e2c6:	46bd      	mov	sp, r7
    e2c8:	bd80      	pop	{r7, pc}
    e2ca:	bf00      	nop
    e2cc:	000111ac 	.word	0x000111ac
    e2d0:	00003c61 	.word	0x00003c61

0000e2d4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e2d4:	b580      	push	{r7, lr}
    e2d6:	b084      	sub	sp, #16
    e2d8:	af00      	add	r7, sp, #0
    e2da:	60f8      	str	r0, [r7, #12]
    e2dc:	60b9      	str	r1, [r7, #8]
    e2de:	4613      	mov	r3, r2
    e2e0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e2e2:	68fb      	ldr	r3, [r7, #12]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d004      	beq.n	e2f2 <io_read+0x1e>
    e2e8:	68bb      	ldr	r3, [r7, #8]
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d001      	beq.n	e2f2 <io_read+0x1e>
    e2ee:	2301      	movs	r3, #1
    e2f0:	e000      	b.n	e2f4 <io_read+0x20>
    e2f2:	2300      	movs	r3, #0
    e2f4:	f003 0301 	and.w	r3, r3, #1
    e2f8:	b2db      	uxtb	r3, r3
    e2fa:	223d      	movs	r2, #61	; 0x3d
    e2fc:	4907      	ldr	r1, [pc, #28]	; (e31c <io_read+0x48>)
    e2fe:	4618      	mov	r0, r3
    e300:	4b07      	ldr	r3, [pc, #28]	; (e320 <io_read+0x4c>)
    e302:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e304:	68fb      	ldr	r3, [r7, #12]
    e306:	685b      	ldr	r3, [r3, #4]
    e308:	88fa      	ldrh	r2, [r7, #6]
    e30a:	68b9      	ldr	r1, [r7, #8]
    e30c:	68f8      	ldr	r0, [r7, #12]
    e30e:	4798      	blx	r3
    e310:	4603      	mov	r3, r0
}
    e312:	4618      	mov	r0, r3
    e314:	3710      	adds	r7, #16
    e316:	46bd      	mov	sp, r7
    e318:	bd80      	pop	{r7, pc}
    e31a:	bf00      	nop
    e31c:	000111ac 	.word	0x000111ac
    e320:	00003c61 	.word	0x00003c61

0000e324 <__aeabi_atexit>:
    e324:	460b      	mov	r3, r1
    e326:	4601      	mov	r1, r0
    e328:	4618      	mov	r0, r3
    e32a:	f001 bd2f 	b.w	fd8c <__cxa_atexit>
    e32e:	bf00      	nop

0000e330 <_ZdlPvj>:
    e330:	f7ff b8f8 	b.w	d524 <_ZdlPv>

0000e334 <pow>:
    e334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e338:	f8df 92f0 	ldr.w	r9, [pc, #752]	; e62c <pow+0x2f8>
    e33c:	b08d      	sub	sp, #52	; 0x34
    e33e:	4606      	mov	r6, r0
    e340:	460f      	mov	r7, r1
    e342:	4614      	mov	r4, r2
    e344:	461d      	mov	r5, r3
    e346:	f000 f973 	bl	e630 <__ieee754_pow>
    e34a:	f999 8000 	ldrsb.w	r8, [r9]
    e34e:	f1b8 3fff 	cmp.w	r8, #4294967295
    e352:	e9cd 0100 	strd	r0, r1, [sp]
    e356:	d036      	beq.n	e3c6 <pow+0x92>
    e358:	4622      	mov	r2, r4
    e35a:	462b      	mov	r3, r5
    e35c:	4620      	mov	r0, r4
    e35e:	4629      	mov	r1, r5
    e360:	f001 fcde 	bl	fd20 <__aeabi_dcmpun>
    e364:	4683      	mov	fp, r0
    e366:	bb70      	cbnz	r0, e3c6 <pow+0x92>
    e368:	4632      	mov	r2, r6
    e36a:	463b      	mov	r3, r7
    e36c:	4630      	mov	r0, r6
    e36e:	4639      	mov	r1, r7
    e370:	f001 fcd6 	bl	fd20 <__aeabi_dcmpun>
    e374:	2200      	movs	r2, #0
    e376:	4682      	mov	sl, r0
    e378:	2300      	movs	r3, #0
    e37a:	2800      	cmp	r0, #0
    e37c:	f040 80a0 	bne.w	e4c0 <pow+0x18c>
    e380:	4630      	mov	r0, r6
    e382:	4639      	mov	r1, r7
    e384:	f001 fc9a 	bl	fcbc <__aeabi_dcmpeq>
    e388:	b310      	cbz	r0, e3d0 <pow+0x9c>
    e38a:	2200      	movs	r2, #0
    e38c:	2300      	movs	r3, #0
    e38e:	4620      	mov	r0, r4
    e390:	4629      	mov	r1, r5
    e392:	f001 fc93 	bl	fcbc <__aeabi_dcmpeq>
    e396:	4683      	mov	fp, r0
    e398:	2800      	cmp	r0, #0
    e39a:	d06a      	beq.n	e472 <pow+0x13e>
    e39c:	2201      	movs	r2, #1
    e39e:	4b9c      	ldr	r3, [pc, #624]	; (e610 <pow+0x2dc>)
    e3a0:	9202      	str	r2, [sp, #8]
    e3a2:	2100      	movs	r1, #0
    e3a4:	2200      	movs	r2, #0
    e3a6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    e3aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e3ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e3b2:	e9cd 1208 	strd	r1, r2, [sp, #32]
    e3b6:	9303      	str	r3, [sp, #12]
    e3b8:	f1b8 0f00 	cmp.w	r8, #0
    e3bc:	d045      	beq.n	e44a <pow+0x116>
    e3be:	4c95      	ldr	r4, [pc, #596]	; (e614 <pow+0x2e0>)
    e3c0:	2300      	movs	r3, #0
    e3c2:	e9cd 3400 	strd	r3, r4, [sp]
    e3c6:	e9dd 0100 	ldrd	r0, r1, [sp]
    e3ca:	b00d      	add	sp, #52	; 0x34
    e3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3d0:	e9dd 0100 	ldrd	r0, r1, [sp]
    e3d4:	f000 ff32 	bl	f23c <finite>
    e3d8:	4680      	mov	r8, r0
    e3da:	2800      	cmp	r0, #0
    e3dc:	f000 808b 	beq.w	e4f6 <pow+0x1c2>
    e3e0:	f04f 0a00 	mov.w	sl, #0
    e3e4:	f04f 0b00 	mov.w	fp, #0
    e3e8:	4652      	mov	r2, sl
    e3ea:	465b      	mov	r3, fp
    e3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
    e3f0:	f001 fc64 	bl	fcbc <__aeabi_dcmpeq>
    e3f4:	2800      	cmp	r0, #0
    e3f6:	d0e6      	beq.n	e3c6 <pow+0x92>
    e3f8:	4630      	mov	r0, r6
    e3fa:	4639      	mov	r1, r7
    e3fc:	f000 ff1e 	bl	f23c <finite>
    e400:	2800      	cmp	r0, #0
    e402:	d0e0      	beq.n	e3c6 <pow+0x92>
    e404:	4620      	mov	r0, r4
    e406:	4629      	mov	r1, r5
    e408:	f000 ff18 	bl	f23c <finite>
    e40c:	2800      	cmp	r0, #0
    e40e:	d0da      	beq.n	e3c6 <pow+0x92>
    e410:	f999 3000 	ldrsb.w	r3, [r9]
    e414:	4a7e      	ldr	r2, [pc, #504]	; (e610 <pow+0x2dc>)
    e416:	9203      	str	r2, [sp, #12]
    e418:	2104      	movs	r1, #4
    e41a:	2200      	movs	r2, #0
    e41c:	2b02      	cmp	r3, #2
    e41e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e422:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e426:	e9cd ab08 	strd	sl, fp, [sp, #32]
    e42a:	9102      	str	r1, [sp, #8]
    e42c:	920a      	str	r2, [sp, #40]	; 0x28
    e42e:	d003      	beq.n	e438 <pow+0x104>
    e430:	a802      	add	r0, sp, #8
    e432:	f000 ff09 	bl	f248 <matherr>
    e436:	b968      	cbnz	r0, e454 <pow+0x120>
    e438:	f001 fcae 	bl	fd98 <__errno>
    e43c:	2322      	movs	r3, #34	; 0x22
    e43e:	6003      	str	r3, [r0, #0]
    e440:	e008      	b.n	e454 <pow+0x120>
    e442:	2300      	movs	r3, #0
    e444:	2400      	movs	r4, #0
    e446:	e9cd 3408 	strd	r3, r4, [sp, #32]
    e44a:	a802      	add	r0, sp, #8
    e44c:	f000 fefc 	bl	f248 <matherr>
    e450:	2800      	cmp	r0, #0
    e452:	d030      	beq.n	e4b6 <pow+0x182>
    e454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e456:	b11b      	cbz	r3, e460 <pow+0x12c>
    e458:	f001 fc9e 	bl	fd98 <__errno>
    e45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e45e:	6003      	str	r3, [r0, #0]
    e460:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    e464:	e9cd 3400 	strd	r3, r4, [sp]
    e468:	e9dd 0100 	ldrd	r0, r1, [sp]
    e46c:	b00d      	add	sp, #52	; 0x34
    e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e472:	4620      	mov	r0, r4
    e474:	4629      	mov	r1, r5
    e476:	f000 fee1 	bl	f23c <finite>
    e47a:	2800      	cmp	r0, #0
    e47c:	d0a3      	beq.n	e3c6 <pow+0x92>
    e47e:	2200      	movs	r2, #0
    e480:	2300      	movs	r3, #0
    e482:	4620      	mov	r0, r4
    e484:	4629      	mov	r1, r5
    e486:	f001 fc23 	bl	fcd0 <__aeabi_dcmplt>
    e48a:	2800      	cmp	r0, #0
    e48c:	d09b      	beq.n	e3c6 <pow+0x92>
    e48e:	f999 3000 	ldrsb.w	r3, [r9]
    e492:	4a5f      	ldr	r2, [pc, #380]	; (e610 <pow+0x2dc>)
    e494:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    e498:	2101      	movs	r1, #1
    e49a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e49e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e4a2:	9102      	str	r1, [sp, #8]
    e4a4:	9203      	str	r2, [sp, #12]
    e4a6:	2b00      	cmp	r3, #0
    e4a8:	d0cb      	beq.n	e442 <pow+0x10e>
    e4aa:	495b      	ldr	r1, [pc, #364]	; (e618 <pow+0x2e4>)
    e4ac:	2000      	movs	r0, #0
    e4ae:	2b02      	cmp	r3, #2
    e4b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    e4b4:	d1c9      	bne.n	e44a <pow+0x116>
    e4b6:	f001 fc6f 	bl	fd98 <__errno>
    e4ba:	2321      	movs	r3, #33	; 0x21
    e4bc:	6003      	str	r3, [r0, #0]
    e4be:	e7c9      	b.n	e454 <pow+0x120>
    e4c0:	4620      	mov	r0, r4
    e4c2:	4629      	mov	r1, r5
    e4c4:	f001 fbfa 	bl	fcbc <__aeabi_dcmpeq>
    e4c8:	2800      	cmp	r0, #0
    e4ca:	f43f af7c 	beq.w	e3c6 <pow+0x92>
    e4ce:	4b51      	ldr	r3, [pc, #324]	; (e614 <pow+0x2e0>)
    e4d0:	494f      	ldr	r1, [pc, #316]	; (e610 <pow+0x2dc>)
    e4d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    e4d6:	2001      	movs	r0, #1
    e4d8:	2200      	movs	r2, #0
    e4da:	f1b8 0f02 	cmp.w	r8, #2
    e4de:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e4e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e4e6:	9002      	str	r0, [sp, #8]
    e4e8:	9103      	str	r1, [sp, #12]
    e4ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e4ee:	d1ac      	bne.n	e44a <pow+0x116>
    e4f0:	e9cd 2300 	strd	r2, r3, [sp]
    e4f4:	e767      	b.n	e3c6 <pow+0x92>
    e4f6:	4630      	mov	r0, r6
    e4f8:	4639      	mov	r1, r7
    e4fa:	f000 fe9f 	bl	f23c <finite>
    e4fe:	2800      	cmp	r0, #0
    e500:	f43f af6e 	beq.w	e3e0 <pow+0xac>
    e504:	4620      	mov	r0, r4
    e506:	4629      	mov	r1, r5
    e508:	f000 fe98 	bl	f23c <finite>
    e50c:	2800      	cmp	r0, #0
    e50e:	f43f af67 	beq.w	e3e0 <pow+0xac>
    e512:	e9dd 2300 	ldrd	r2, r3, [sp]
    e516:	4610      	mov	r0, r2
    e518:	4619      	mov	r1, r3
    e51a:	f001 fc01 	bl	fd20 <__aeabi_dcmpun>
    e51e:	2800      	cmp	r0, #0
    e520:	d158      	bne.n	e5d4 <pow+0x2a0>
    e522:	2303      	movs	r3, #3
    e524:	f999 8000 	ldrsb.w	r8, [r9]
    e528:	9302      	str	r3, [sp, #8]
    e52a:	4b39      	ldr	r3, [pc, #228]	; (e610 <pow+0x2dc>)
    e52c:	900a      	str	r0, [sp, #40]	; 0x28
    e52e:	9303      	str	r3, [sp, #12]
    e530:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e534:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e538:	2200      	movs	r2, #0
    e53a:	2300      	movs	r3, #0
    e53c:	4630      	mov	r0, r6
    e53e:	4639      	mov	r1, r7
    e540:	f1b8 0f00 	cmp.w	r8, #0
    e544:	d126      	bne.n	e594 <pow+0x260>
    e546:	4f35      	ldr	r7, [pc, #212]	; (e61c <pow+0x2e8>)
    e548:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    e54c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    e550:	f001 fbbe 	bl	fcd0 <__aeabi_dcmplt>
    e554:	2800      	cmp	r0, #0
    e556:	f43f af6b 	beq.w	e430 <pow+0xfc>
    e55a:	2200      	movs	r2, #0
    e55c:	4b30      	ldr	r3, [pc, #192]	; (e620 <pow+0x2ec>)
    e55e:	4620      	mov	r0, r4
    e560:	4629      	mov	r1, r5
    e562:	f001 f943 	bl	f7ec <__aeabi_dmul>
    e566:	4604      	mov	r4, r0
    e568:	460d      	mov	r5, r1
    e56a:	f000 fe75 	bl	f258 <rint>
    e56e:	4602      	mov	r2, r0
    e570:	460b      	mov	r3, r1
    e572:	4620      	mov	r0, r4
    e574:	4629      	mov	r1, r5
    e576:	f001 fba1 	bl	fcbc <__aeabi_dcmpeq>
    e57a:	bb40      	cbnz	r0, e5ce <pow+0x29a>
    e57c:	4b29      	ldr	r3, [pc, #164]	; (e624 <pow+0x2f0>)
    e57e:	f999 8000 	ldrsb.w	r8, [r9]
    e582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e586:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e58a:	f1b8 0f02 	cmp.w	r8, #2
    e58e:	f47f af4f 	bne.w	e430 <pow+0xfc>
    e592:	e751      	b.n	e438 <pow+0x104>
    e594:	4f24      	ldr	r7, [pc, #144]	; (e628 <pow+0x2f4>)
    e596:	2600      	movs	r6, #0
    e598:	e9cd 6708 	strd	r6, r7, [sp, #32]
    e59c:	f001 fb98 	bl	fcd0 <__aeabi_dcmplt>
    e5a0:	2800      	cmp	r0, #0
    e5a2:	d0f2      	beq.n	e58a <pow+0x256>
    e5a4:	2200      	movs	r2, #0
    e5a6:	4b1e      	ldr	r3, [pc, #120]	; (e620 <pow+0x2ec>)
    e5a8:	4620      	mov	r0, r4
    e5aa:	4629      	mov	r1, r5
    e5ac:	f001 f91e 	bl	f7ec <__aeabi_dmul>
    e5b0:	4604      	mov	r4, r0
    e5b2:	460d      	mov	r5, r1
    e5b4:	f000 fe50 	bl	f258 <rint>
    e5b8:	4602      	mov	r2, r0
    e5ba:	460b      	mov	r3, r1
    e5bc:	4620      	mov	r0, r4
    e5be:	4629      	mov	r1, r5
    e5c0:	f001 fb7c 	bl	fcbc <__aeabi_dcmpeq>
    e5c4:	b918      	cbnz	r0, e5ce <pow+0x29a>
    e5c6:	4b14      	ldr	r3, [pc, #80]	; (e618 <pow+0x2e4>)
    e5c8:	2200      	movs	r2, #0
    e5ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e5ce:	f999 8000 	ldrsb.w	r8, [r9]
    e5d2:	e7da      	b.n	e58a <pow+0x256>
    e5d4:	f999 9000 	ldrsb.w	r9, [r9]
    e5d8:	4b0d      	ldr	r3, [pc, #52]	; (e610 <pow+0x2dc>)
    e5da:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e5de:	2201      	movs	r2, #1
    e5e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e5e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e5e8:	9202      	str	r2, [sp, #8]
    e5ea:	9303      	str	r3, [sp, #12]
    e5ec:	f1b9 0f00 	cmp.w	r9, #0
    e5f0:	f43f af27 	beq.w	e442 <pow+0x10e>
    e5f4:	2200      	movs	r2, #0
    e5f6:	2300      	movs	r3, #0
    e5f8:	4610      	mov	r0, r2
    e5fa:	4619      	mov	r1, r3
    e5fc:	f001 fa20 	bl	fa40 <__aeabi_ddiv>
    e600:	f1b9 0f02 	cmp.w	r9, #2
    e604:	e9cd 0108 	strd	r0, r1, [sp, #32]
    e608:	f43f af55 	beq.w	e4b6 <pow+0x182>
    e60c:	e71d      	b.n	e44a <pow+0x116>
    e60e:	bf00      	nop
    e610:	000111c0 	.word	0x000111c0
    e614:	3ff00000 	.word	0x3ff00000
    e618:	fff00000 	.word	0xfff00000
    e61c:	47efffff 	.word	0x47efffff
    e620:	3fe00000 	.word	0x3fe00000
    e624:	c7efffff 	.word	0xc7efffff
    e628:	7ff00000 	.word	0x7ff00000
    e62c:	200001e4 	.word	0x200001e4

0000e630 <__ieee754_pow>:
    e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e634:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    e638:	ea57 0402 	orrs.w	r4, r7, r2
    e63c:	b093      	sub	sp, #76	; 0x4c
    e63e:	d037      	beq.n	e6b0 <__ieee754_pow+0x80>
    e640:	4c67      	ldr	r4, [pc, #412]	; (e7e0 <__ieee754_pow+0x1b0>)
    e642:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    e646:	42a6      	cmp	r6, r4
    e648:	4683      	mov	fp, r0
    e64a:	460d      	mov	r5, r1
    e64c:	dc29      	bgt.n	e6a2 <__ieee754_pow+0x72>
    e64e:	469a      	mov	sl, r3
    e650:	4696      	mov	lr, r2
    e652:	d025      	beq.n	e6a0 <__ieee754_pow+0x70>
    e654:	42a7      	cmp	r7, r4
    e656:	dc24      	bgt.n	e6a2 <__ieee754_pow+0x72>
    e658:	4c61      	ldr	r4, [pc, #388]	; (e7e0 <__ieee754_pow+0x1b0>)
    e65a:	42a7      	cmp	r7, r4
    e65c:	d079      	beq.n	e752 <__ieee754_pow+0x122>
    e65e:	2d00      	cmp	r5, #0
    e660:	4689      	mov	r9, r1
    e662:	4680      	mov	r8, r0
    e664:	e9cd 2300 	strd	r2, r3, [sp]
    e668:	db77      	blt.n	e75a <__ieee754_pow+0x12a>
    e66a:	2400      	movs	r4, #0
    e66c:	f1be 0f00 	cmp.w	lr, #0
    e670:	d12c      	bne.n	e6cc <__ieee754_pow+0x9c>
    e672:	4b5b      	ldr	r3, [pc, #364]	; (e7e0 <__ieee754_pow+0x1b0>)
    e674:	429f      	cmp	r7, r3
    e676:	f000 808b 	beq.w	e790 <__ieee754_pow+0x160>
    e67a:	4b5a      	ldr	r3, [pc, #360]	; (e7e4 <__ieee754_pow+0x1b4>)
    e67c:	429f      	cmp	r7, r3
    e67e:	d061      	beq.n	e744 <__ieee754_pow+0x114>
    e680:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    e684:	f000 83ba 	beq.w	edfc <__ieee754_pow+0x7cc>
    e688:	4b57      	ldr	r3, [pc, #348]	; (e7e8 <__ieee754_pow+0x1b8>)
    e68a:	459a      	cmp	sl, r3
    e68c:	d11e      	bne.n	e6cc <__ieee754_pow+0x9c>
    e68e:	2d00      	cmp	r5, #0
    e690:	db1c      	blt.n	e6cc <__ieee754_pow+0x9c>
    e692:	4640      	mov	r0, r8
    e694:	4649      	mov	r1, r9
    e696:	b013      	add	sp, #76	; 0x4c
    e698:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e69c:	f000 bd0e 	b.w	f0bc <__ieee754_sqrt>
    e6a0:	b158      	cbz	r0, e6ba <__ieee754_pow+0x8a>
    e6a2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    e6a6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    e6aa:	ea56 030b 	orrs.w	r3, r6, fp
    e6ae:	d106      	bne.n	e6be <__ieee754_pow+0x8e>
    e6b0:	494c      	ldr	r1, [pc, #304]	; (e7e4 <__ieee754_pow+0x1b4>)
    e6b2:	2000      	movs	r0, #0
    e6b4:	b013      	add	sp, #76	; 0x4c
    e6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6ba:	42b7      	cmp	r7, r6
    e6bc:	ddcc      	ble.n	e658 <__ieee754_pow+0x28>
    e6be:	484b      	ldr	r0, [pc, #300]	; (e7ec <__ieee754_pow+0x1bc>)
    e6c0:	b013      	add	sp, #76	; 0x4c
    e6c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6c6:	f000 bdc1 	b.w	f24c <nan>
    e6ca:	2400      	movs	r4, #0
    e6cc:	4640      	mov	r0, r8
    e6ce:	4649      	mov	r1, r9
    e6d0:	f000 fdb0 	bl	f234 <fabs>
    e6d4:	f1bb 0f00 	cmp.w	fp, #0
    e6d8:	d119      	bne.n	e70e <__ieee754_pow+0xde>
    e6da:	b126      	cbz	r6, e6e6 <__ieee754_pow+0xb6>
    e6dc:	4b41      	ldr	r3, [pc, #260]	; (e7e4 <__ieee754_pow+0x1b4>)
    e6de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    e6e2:	429a      	cmp	r2, r3
    e6e4:	d113      	bne.n	e70e <__ieee754_pow+0xde>
    e6e6:	f1ba 0f00 	cmp.w	sl, #0
    e6ea:	f2c0 83bc 	blt.w	ee66 <__ieee754_pow+0x836>
    e6ee:	2d00      	cmp	r5, #0
    e6f0:	dae0      	bge.n	e6b4 <__ieee754_pow+0x84>
    e6f2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    e6f6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    e6fa:	ea56 0304 	orrs.w	r3, r6, r4
    e6fe:	f000 848f 	beq.w	f020 <__ieee754_pow+0x9f0>
    e702:	2c01      	cmp	r4, #1
    e704:	d1d6      	bne.n	e6b4 <__ieee754_pow+0x84>
    e706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e70a:	4619      	mov	r1, r3
    e70c:	e7d2      	b.n	e6b4 <__ieee754_pow+0x84>
    e70e:	0fed      	lsrs	r5, r5, #31
    e710:	3d01      	subs	r5, #1
    e712:	ea54 0305 	orrs.w	r3, r4, r5
    e716:	d04e      	beq.n	e7b6 <__ieee754_pow+0x186>
    e718:	4b35      	ldr	r3, [pc, #212]	; (e7f0 <__ieee754_pow+0x1c0>)
    e71a:	429f      	cmp	r7, r3
    e71c:	dd6e      	ble.n	e7fc <__ieee754_pow+0x1cc>
    e71e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    e722:	429f      	cmp	r7, r3
    e724:	f340 83e8 	ble.w	eef8 <__ieee754_pow+0x8c8>
    e728:	4b32      	ldr	r3, [pc, #200]	; (e7f4 <__ieee754_pow+0x1c4>)
    e72a:	429e      	cmp	r6, r3
    e72c:	dd4e      	ble.n	e7cc <__ieee754_pow+0x19c>
    e72e:	f1ba 0f00 	cmp.w	sl, #0
    e732:	dd4e      	ble.n	e7d2 <__ieee754_pow+0x1a2>
    e734:	a328      	add	r3, pc, #160	; (adr r3, e7d8 <__ieee754_pow+0x1a8>)
    e736:	e9d3 2300 	ldrd	r2, r3, [r3]
    e73a:	4610      	mov	r0, r2
    e73c:	4619      	mov	r1, r3
    e73e:	f001 f855 	bl	f7ec <__aeabi_dmul>
    e742:	e7b7      	b.n	e6b4 <__ieee754_pow+0x84>
    e744:	f1ba 0f00 	cmp.w	sl, #0
    e748:	f2c0 843c 	blt.w	efc4 <__ieee754_pow+0x994>
    e74c:	4640      	mov	r0, r8
    e74e:	4649      	mov	r1, r9
    e750:	e7b0      	b.n	e6b4 <__ieee754_pow+0x84>
    e752:	f1be 0f00 	cmp.w	lr, #0
    e756:	d082      	beq.n	e65e <__ieee754_pow+0x2e>
    e758:	e7a3      	b.n	e6a2 <__ieee754_pow+0x72>
    e75a:	4b27      	ldr	r3, [pc, #156]	; (e7f8 <__ieee754_pow+0x1c8>)
    e75c:	429f      	cmp	r7, r3
    e75e:	dc28      	bgt.n	e7b2 <__ieee754_pow+0x182>
    e760:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    e764:	429f      	cmp	r7, r3
    e766:	dd80      	ble.n	e66a <__ieee754_pow+0x3a>
    e768:	153b      	asrs	r3, r7, #20
    e76a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    e76e:	2b14      	cmp	r3, #20
    e770:	f340 843e 	ble.w	eff0 <__ieee754_pow+0x9c0>
    e774:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    e778:	fa2e f203 	lsr.w	r2, lr, r3
    e77c:	fa02 f303 	lsl.w	r3, r2, r3
    e780:	459e      	cmp	lr, r3
    e782:	f47f af72 	bne.w	e66a <__ieee754_pow+0x3a>
    e786:	f002 0201 	and.w	r2, r2, #1
    e78a:	f1c2 0402 	rsb	r4, r2, #2
    e78e:	e76d      	b.n	e66c <__ieee754_pow+0x3c>
    e790:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    e794:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    e798:	ea53 030b 	orrs.w	r3, r3, fp
    e79c:	d088      	beq.n	e6b0 <__ieee754_pow+0x80>
    e79e:	4b15      	ldr	r3, [pc, #84]	; (e7f4 <__ieee754_pow+0x1c4>)
    e7a0:	429e      	cmp	r6, r3
    e7a2:	f340 8332 	ble.w	ee0a <__ieee754_pow+0x7da>
    e7a6:	f1ba 0f00 	cmp.w	sl, #0
    e7aa:	db12      	blt.n	e7d2 <__ieee754_pow+0x1a2>
    e7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
    e7b0:	e780      	b.n	e6b4 <__ieee754_pow+0x84>
    e7b2:	2402      	movs	r4, #2
    e7b4:	e75a      	b.n	e66c <__ieee754_pow+0x3c>
    e7b6:	4642      	mov	r2, r8
    e7b8:	464b      	mov	r3, r9
    e7ba:	4640      	mov	r0, r8
    e7bc:	4649      	mov	r1, r9
    e7be:	f000 fe61 	bl	f484 <__aeabi_dsub>
    e7c2:	4602      	mov	r2, r0
    e7c4:	460b      	mov	r3, r1
    e7c6:	f001 f93b 	bl	fa40 <__aeabi_ddiv>
    e7ca:	e773      	b.n	e6b4 <__ieee754_pow+0x84>
    e7cc:	f1ba 0f00 	cmp.w	sl, #0
    e7d0:	dbb0      	blt.n	e734 <__ieee754_pow+0x104>
    e7d2:	2000      	movs	r0, #0
    e7d4:	2100      	movs	r1, #0
    e7d6:	e76d      	b.n	e6b4 <__ieee754_pow+0x84>
    e7d8:	8800759c 	.word	0x8800759c
    e7dc:	7e37e43c 	.word	0x7e37e43c
    e7e0:	7ff00000 	.word	0x7ff00000
    e7e4:	3ff00000 	.word	0x3ff00000
    e7e8:	3fe00000 	.word	0x3fe00000
    e7ec:	0001091c 	.word	0x0001091c
    e7f0:	41e00000 	.word	0x41e00000
    e7f4:	3fefffff 	.word	0x3fefffff
    e7f8:	433fffff 	.word	0x433fffff
    e7fc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    e800:	f04f 0200 	mov.w	r2, #0
    e804:	da05      	bge.n	e812 <__ieee754_pow+0x1e2>
    e806:	4bd4      	ldr	r3, [pc, #848]	; (eb58 <__ieee754_pow+0x528>)
    e808:	f000 fff0 	bl	f7ec <__aeabi_dmul>
    e80c:	f06f 0234 	mvn.w	r2, #52	; 0x34
    e810:	460e      	mov	r6, r1
    e812:	1533      	asrs	r3, r6, #20
    e814:	4fd1      	ldr	r7, [pc, #836]	; (eb5c <__ieee754_pow+0x52c>)
    e816:	f3c6 0613 	ubfx	r6, r6, #0, #20
    e81a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    e81e:	4413      	add	r3, r2
    e820:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    e824:	42be      	cmp	r6, r7
    e826:	461a      	mov	r2, r3
    e828:	930d      	str	r3, [sp, #52]	; 0x34
    e82a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    e82e:	f340 8321 	ble.w	ee74 <__ieee754_pow+0x844>
    e832:	4bcb      	ldr	r3, [pc, #812]	; (eb60 <__ieee754_pow+0x530>)
    e834:	429e      	cmp	r6, r3
    e836:	f340 83fd 	ble.w	f034 <__ieee754_pow+0xa04>
    e83a:	4613      	mov	r3, r2
    e83c:	3301      	adds	r3, #1
    e83e:	930d      	str	r3, [sp, #52]	; 0x34
    e840:	4bc8      	ldr	r3, [pc, #800]	; (eb64 <__ieee754_pow+0x534>)
    e842:	2200      	movs	r2, #0
    e844:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e848:	2700      	movs	r7, #0
    e84a:	2600      	movs	r6, #0
    e84c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    e850:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    e854:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    e858:	2700      	movs	r7, #0
    e85a:	4602      	mov	r2, r0
    e85c:	4653      	mov	r3, sl
    e85e:	4651      	mov	r1, sl
    e860:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    e864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e868:	f000 fe0c 	bl	f484 <__aeabi_dsub>
    e86c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e870:	4680      	mov	r8, r0
    e872:	4689      	mov	r9, r1
    e874:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e878:	f000 fe06 	bl	f488 <__adddf3>
    e87c:	4602      	mov	r2, r0
    e87e:	460b      	mov	r3, r1
    e880:	2000      	movs	r0, #0
    e882:	49b8      	ldr	r1, [pc, #736]	; (eb64 <__ieee754_pow+0x534>)
    e884:	f001 f8dc 	bl	fa40 <__aeabi_ddiv>
    e888:	460a      	mov	r2, r1
    e88a:	4601      	mov	r1, r0
    e88c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    e890:	4613      	mov	r3, r2
    e892:	4649      	mov	r1, r9
    e894:	4602      	mov	r2, r0
    e896:	4640      	mov	r0, r8
    e898:	f000 ffa8 	bl	f7ec <__aeabi_dmul>
    e89c:	ea4f 036a 	mov.w	r3, sl, asr #1
    e8a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    e8a4:	468c      	mov	ip, r1
    e8a6:	4683      	mov	fp, r0
    e8a8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    e8ac:	e9cd bc04 	strd	fp, ip, [sp, #16]
    e8b0:	46da      	mov	sl, fp
    e8b2:	468b      	mov	fp, r1
    e8b4:	19d9      	adds	r1, r3, r7
    e8b6:	2300      	movs	r3, #0
    e8b8:	e9cd ab02 	strd	sl, fp, [sp, #8]
    e8bc:	9302      	str	r3, [sp, #8]
    e8be:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    e8c2:	2000      	movs	r0, #0
    e8c4:	4606      	mov	r6, r0
    e8c6:	460f      	mov	r7, r1
    e8c8:	4602      	mov	r2, r0
    e8ca:	460b      	mov	r3, r1
    e8cc:	4650      	mov	r0, sl
    e8ce:	4659      	mov	r1, fp
    e8d0:	f000 ff8c 	bl	f7ec <__aeabi_dmul>
    e8d4:	4602      	mov	r2, r0
    e8d6:	460b      	mov	r3, r1
    e8d8:	4640      	mov	r0, r8
    e8da:	4649      	mov	r1, r9
    e8dc:	f000 fdd2 	bl	f484 <__aeabi_dsub>
    e8e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e8e4:	4680      	mov	r8, r0
    e8e6:	4689      	mov	r9, r1
    e8e8:	4630      	mov	r0, r6
    e8ea:	4639      	mov	r1, r7
    e8ec:	f000 fdca 	bl	f484 <__aeabi_dsub>
    e8f0:	4602      	mov	r2, r0
    e8f2:	460b      	mov	r3, r1
    e8f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e8f8:	f000 fdc4 	bl	f484 <__aeabi_dsub>
    e8fc:	4652      	mov	r2, sl
    e8fe:	465b      	mov	r3, fp
    e900:	f000 ff74 	bl	f7ec <__aeabi_dmul>
    e904:	4602      	mov	r2, r0
    e906:	460b      	mov	r3, r1
    e908:	4640      	mov	r0, r8
    e90a:	4649      	mov	r1, r9
    e90c:	f000 fdba 	bl	f484 <__aeabi_dsub>
    e910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e914:	f000 ff6a 	bl	f7ec <__aeabi_dmul>
    e918:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e91c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    e920:	4632      	mov	r2, r6
    e922:	463b      	mov	r3, r7
    e924:	4630      	mov	r0, r6
    e926:	4639      	mov	r1, r7
    e928:	f000 ff60 	bl	f7ec <__aeabi_dmul>
    e92c:	a378      	add	r3, pc, #480	; (adr r3, eb10 <__ieee754_pow+0x4e0>)
    e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e932:	4606      	mov	r6, r0
    e934:	460f      	mov	r7, r1
    e936:	f000 ff59 	bl	f7ec <__aeabi_dmul>
    e93a:	a377      	add	r3, pc, #476	; (adr r3, eb18 <__ieee754_pow+0x4e8>)
    e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e940:	f000 fda2 	bl	f488 <__adddf3>
    e944:	4632      	mov	r2, r6
    e946:	463b      	mov	r3, r7
    e948:	f000 ff50 	bl	f7ec <__aeabi_dmul>
    e94c:	a374      	add	r3, pc, #464	; (adr r3, eb20 <__ieee754_pow+0x4f0>)
    e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e952:	f000 fd99 	bl	f488 <__adddf3>
    e956:	4632      	mov	r2, r6
    e958:	463b      	mov	r3, r7
    e95a:	f000 ff47 	bl	f7ec <__aeabi_dmul>
    e95e:	a372      	add	r3, pc, #456	; (adr r3, eb28 <__ieee754_pow+0x4f8>)
    e960:	e9d3 2300 	ldrd	r2, r3, [r3]
    e964:	f000 fd90 	bl	f488 <__adddf3>
    e968:	4632      	mov	r2, r6
    e96a:	463b      	mov	r3, r7
    e96c:	f000 ff3e 	bl	f7ec <__aeabi_dmul>
    e970:	a36f      	add	r3, pc, #444	; (adr r3, eb30 <__ieee754_pow+0x500>)
    e972:	e9d3 2300 	ldrd	r2, r3, [r3]
    e976:	f000 fd87 	bl	f488 <__adddf3>
    e97a:	4632      	mov	r2, r6
    e97c:	463b      	mov	r3, r7
    e97e:	f000 ff35 	bl	f7ec <__aeabi_dmul>
    e982:	a36d      	add	r3, pc, #436	; (adr r3, eb38 <__ieee754_pow+0x508>)
    e984:	e9d3 2300 	ldrd	r2, r3, [r3]
    e988:	f000 fd7e 	bl	f488 <__adddf3>
    e98c:	4632      	mov	r2, r6
    e98e:	4680      	mov	r8, r0
    e990:	4689      	mov	r9, r1
    e992:	463b      	mov	r3, r7
    e994:	4630      	mov	r0, r6
    e996:	4639      	mov	r1, r7
    e998:	f000 ff28 	bl	f7ec <__aeabi_dmul>
    e99c:	4602      	mov	r2, r0
    e99e:	460b      	mov	r3, r1
    e9a0:	4640      	mov	r0, r8
    e9a2:	4649      	mov	r1, r9
    e9a4:	f000 ff22 	bl	f7ec <__aeabi_dmul>
    e9a8:	4652      	mov	r2, sl
    e9aa:	4606      	mov	r6, r0
    e9ac:	460f      	mov	r7, r1
    e9ae:	465b      	mov	r3, fp
    e9b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e9b4:	f000 fd68 	bl	f488 <__adddf3>
    e9b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e9bc:	f000 ff16 	bl	f7ec <__aeabi_dmul>
    e9c0:	4632      	mov	r2, r6
    e9c2:	463b      	mov	r3, r7
    e9c4:	f000 fd60 	bl	f488 <__adddf3>
    e9c8:	4652      	mov	r2, sl
    e9ca:	4680      	mov	r8, r0
    e9cc:	4689      	mov	r9, r1
    e9ce:	465b      	mov	r3, fp
    e9d0:	4650      	mov	r0, sl
    e9d2:	4659      	mov	r1, fp
    e9d4:	f000 ff0a 	bl	f7ec <__aeabi_dmul>
    e9d8:	2200      	movs	r2, #0
    e9da:	4b63      	ldr	r3, [pc, #396]	; (eb68 <__ieee754_pow+0x538>)
    e9dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    e9e0:	f000 fd52 	bl	f488 <__adddf3>
    e9e4:	4642      	mov	r2, r8
    e9e6:	464b      	mov	r3, r9
    e9e8:	f000 fd4e 	bl	f488 <__adddf3>
    e9ec:	9802      	ldr	r0, [sp, #8]
    e9ee:	460f      	mov	r7, r1
    e9f0:	4606      	mov	r6, r0
    e9f2:	4632      	mov	r2, r6
    e9f4:	463b      	mov	r3, r7
    e9f6:	4650      	mov	r0, sl
    e9f8:	4659      	mov	r1, fp
    e9fa:	f000 fef7 	bl	f7ec <__aeabi_dmul>
    e9fe:	2200      	movs	r2, #0
    ea00:	4682      	mov	sl, r0
    ea02:	468b      	mov	fp, r1
    ea04:	4b58      	ldr	r3, [pc, #352]	; (eb68 <__ieee754_pow+0x538>)
    ea06:	4630      	mov	r0, r6
    ea08:	4639      	mov	r1, r7
    ea0a:	f000 fd3b 	bl	f484 <__aeabi_dsub>
    ea0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    ea12:	f000 fd37 	bl	f484 <__aeabi_dsub>
    ea16:	4602      	mov	r2, r0
    ea18:	460b      	mov	r3, r1
    ea1a:	4640      	mov	r0, r8
    ea1c:	4649      	mov	r1, r9
    ea1e:	f000 fd31 	bl	f484 <__aeabi_dsub>
    ea22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea26:	f000 fee1 	bl	f7ec <__aeabi_dmul>
    ea2a:	4632      	mov	r2, r6
    ea2c:	4680      	mov	r8, r0
    ea2e:	4689      	mov	r9, r1
    ea30:	463b      	mov	r3, r7
    ea32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    ea36:	f000 fed9 	bl	f7ec <__aeabi_dmul>
    ea3a:	4602      	mov	r2, r0
    ea3c:	460b      	mov	r3, r1
    ea3e:	4640      	mov	r0, r8
    ea40:	4649      	mov	r1, r9
    ea42:	f000 fd21 	bl	f488 <__adddf3>
    ea46:	4680      	mov	r8, r0
    ea48:	4689      	mov	r9, r1
    ea4a:	4602      	mov	r2, r0
    ea4c:	460b      	mov	r3, r1
    ea4e:	4650      	mov	r0, sl
    ea50:	4659      	mov	r1, fp
    ea52:	e9cd ab04 	strd	sl, fp, [sp, #16]
    ea56:	f000 fd17 	bl	f488 <__adddf3>
    ea5a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    ea5e:	a338      	add	r3, pc, #224	; (adr r3, eb40 <__ieee754_pow+0x510>)
    ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea64:	4650      	mov	r0, sl
    ea66:	460f      	mov	r7, r1
    ea68:	f000 fec0 	bl	f7ec <__aeabi_dmul>
    ea6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea70:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ea74:	4639      	mov	r1, r7
    ea76:	4650      	mov	r0, sl
    ea78:	f000 fd04 	bl	f484 <__aeabi_dsub>
    ea7c:	4602      	mov	r2, r0
    ea7e:	460b      	mov	r3, r1
    ea80:	4640      	mov	r0, r8
    ea82:	4649      	mov	r1, r9
    ea84:	f000 fcfe 	bl	f484 <__aeabi_dsub>
    ea88:	a32f      	add	r3, pc, #188	; (adr r3, eb48 <__ieee754_pow+0x518>)
    ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea8e:	f000 fead 	bl	f7ec <__aeabi_dmul>
    ea92:	a32f      	add	r3, pc, #188	; (adr r3, eb50 <__ieee754_pow+0x520>)
    ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea98:	4680      	mov	r8, r0
    ea9a:	4689      	mov	r9, r1
    ea9c:	4650      	mov	r0, sl
    ea9e:	4639      	mov	r1, r7
    eaa0:	f000 fea4 	bl	f7ec <__aeabi_dmul>
    eaa4:	4602      	mov	r2, r0
    eaa6:	460b      	mov	r3, r1
    eaa8:	4640      	mov	r0, r8
    eaaa:	4649      	mov	r1, r9
    eaac:	f000 fcec 	bl	f488 <__adddf3>
    eab0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    eab4:	f000 fce8 	bl	f488 <__adddf3>
    eab8:	4680      	mov	r8, r0
    eaba:	980d      	ldr	r0, [sp, #52]	; 0x34
    eabc:	4689      	mov	r9, r1
    eabe:	f000 fe2f 	bl	f720 <__aeabi_i2d>
    eac2:	4642      	mov	r2, r8
    eac4:	4606      	mov	r6, r0
    eac6:	460f      	mov	r7, r1
    eac8:	464b      	mov	r3, r9
    eaca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    eace:	f000 fcdb 	bl	f488 <__adddf3>
    ead2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ead6:	f000 fcd7 	bl	f488 <__adddf3>
    eada:	4632      	mov	r2, r6
    eadc:	463b      	mov	r3, r7
    eade:	f000 fcd3 	bl	f488 <__adddf3>
    eae2:	4632      	mov	r2, r6
    eae4:	463b      	mov	r3, r7
    eae6:	4650      	mov	r0, sl
    eae8:	468b      	mov	fp, r1
    eaea:	f000 fccb 	bl	f484 <__aeabi_dsub>
    eaee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    eaf2:	f000 fcc7 	bl	f484 <__aeabi_dsub>
    eaf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eafa:	f000 fcc3 	bl	f484 <__aeabi_dsub>
    eafe:	4602      	mov	r2, r0
    eb00:	460b      	mov	r3, r1
    eb02:	4640      	mov	r0, r8
    eb04:	4649      	mov	r1, r9
    eb06:	f000 fcbd 	bl	f484 <__aeabi_dsub>
    eb0a:	4680      	mov	r8, r0
    eb0c:	e02e      	b.n	eb6c <__ieee754_pow+0x53c>
    eb0e:	bf00      	nop
    eb10:	4a454eef 	.word	0x4a454eef
    eb14:	3fca7e28 	.word	0x3fca7e28
    eb18:	93c9db65 	.word	0x93c9db65
    eb1c:	3fcd864a 	.word	0x3fcd864a
    eb20:	a91d4101 	.word	0xa91d4101
    eb24:	3fd17460 	.word	0x3fd17460
    eb28:	518f264d 	.word	0x518f264d
    eb2c:	3fd55555 	.word	0x3fd55555
    eb30:	db6fabff 	.word	0xdb6fabff
    eb34:	3fdb6db6 	.word	0x3fdb6db6
    eb38:	33333303 	.word	0x33333303
    eb3c:	3fe33333 	.word	0x3fe33333
    eb40:	e0000000 	.word	0xe0000000
    eb44:	3feec709 	.word	0x3feec709
    eb48:	dc3a03fd 	.word	0xdc3a03fd
    eb4c:	3feec709 	.word	0x3feec709
    eb50:	145b01f5 	.word	0x145b01f5
    eb54:	be3e2fe0 	.word	0xbe3e2fe0
    eb58:	43400000 	.word	0x43400000
    eb5c:	0003988e 	.word	0x0003988e
    eb60:	000bb679 	.word	0x000bb679
    eb64:	3ff00000 	.word	0x3ff00000
    eb68:	40080000 	.word	0x40080000
    eb6c:	4689      	mov	r9, r1
    eb6e:	3c01      	subs	r4, #1
    eb70:	ea54 0305 	orrs.w	r3, r4, r5
    eb74:	e9dd 0100 	ldrd	r0, r1, [sp]
    eb78:	bf14      	ite	ne
    eb7a:	4cd9      	ldrne	r4, [pc, #868]	; (eee0 <__ieee754_pow+0x8b0>)
    eb7c:	4cd9      	ldreq	r4, [pc, #868]	; (eee4 <__ieee754_pow+0x8b4>)
    eb7e:	2300      	movs	r3, #0
    eb80:	e9cd 3404 	strd	r3, r4, [sp, #16]
    eb84:	4603      	mov	r3, r0
    eb86:	460c      	mov	r4, r1
    eb88:	e9cd 3402 	strd	r3, r4, [sp, #8]
    eb8c:	2300      	movs	r3, #0
    eb8e:	9302      	str	r3, [sp, #8]
    eb90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    eb94:	4622      	mov	r2, r4
    eb96:	462b      	mov	r3, r5
    eb98:	f000 fc74 	bl	f484 <__aeabi_dsub>
    eb9c:	4652      	mov	r2, sl
    eb9e:	465b      	mov	r3, fp
    eba0:	f000 fe24 	bl	f7ec <__aeabi_dmul>
    eba4:	e9dd 2300 	ldrd	r2, r3, [sp]
    eba8:	4606      	mov	r6, r0
    ebaa:	460f      	mov	r7, r1
    ebac:	4640      	mov	r0, r8
    ebae:	4649      	mov	r1, r9
    ebb0:	f000 fe1c 	bl	f7ec <__aeabi_dmul>
    ebb4:	4602      	mov	r2, r0
    ebb6:	460b      	mov	r3, r1
    ebb8:	4630      	mov	r0, r6
    ebba:	4639      	mov	r1, r7
    ebbc:	f000 fc64 	bl	f488 <__adddf3>
    ebc0:	4622      	mov	r2, r4
    ebc2:	4680      	mov	r8, r0
    ebc4:	4689      	mov	r9, r1
    ebc6:	462b      	mov	r3, r5
    ebc8:	4650      	mov	r0, sl
    ebca:	4659      	mov	r1, fp
    ebcc:	e9cd 8900 	strd	r8, r9, [sp]
    ebd0:	f000 fe0c 	bl	f7ec <__aeabi_dmul>
    ebd4:	460b      	mov	r3, r1
    ebd6:	4602      	mov	r2, r0
    ebd8:	4606      	mov	r6, r0
    ebda:	460f      	mov	r7, r1
    ebdc:	4640      	mov	r0, r8
    ebde:	4649      	mov	r1, r9
    ebe0:	f000 fc52 	bl	f488 <__adddf3>
    ebe4:	4bc0      	ldr	r3, [pc, #768]	; (eee8 <__ieee754_pow+0x8b8>)
    ebe6:	4299      	cmp	r1, r3
    ebe8:	4604      	mov	r4, r0
    ebea:	460d      	mov	r5, r1
    ebec:	468a      	mov	sl, r1
    ebee:	f340 8116 	ble.w	ee1e <__ieee754_pow+0x7ee>
    ebf2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    ebf6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    ebfa:	4303      	orrs	r3, r0
    ebfc:	f040 81ea 	bne.w	efd4 <__ieee754_pow+0x9a4>
    ec00:	a3a3      	add	r3, pc, #652	; (adr r3, ee90 <__ieee754_pow+0x860>)
    ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec06:	e9dd 0100 	ldrd	r0, r1, [sp]
    ec0a:	f000 fc3d 	bl	f488 <__adddf3>
    ec0e:	4632      	mov	r2, r6
    ec10:	4680      	mov	r8, r0
    ec12:	4689      	mov	r9, r1
    ec14:	463b      	mov	r3, r7
    ec16:	4620      	mov	r0, r4
    ec18:	4629      	mov	r1, r5
    ec1a:	f000 fc33 	bl	f484 <__aeabi_dsub>
    ec1e:	4602      	mov	r2, r0
    ec20:	460b      	mov	r3, r1
    ec22:	4640      	mov	r0, r8
    ec24:	4649      	mov	r1, r9
    ec26:	f001 f871 	bl	fd0c <__aeabi_dcmpgt>
    ec2a:	2800      	cmp	r0, #0
    ec2c:	f040 81d2 	bne.w	efd4 <__ieee754_pow+0x9a4>
    ec30:	46a8      	mov	r8, r5
    ec32:	ea4f 5328 	mov.w	r3, r8, asr #20
    ec36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ec3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    ec3e:	fa42 f303 	asr.w	r3, r2, r3
    ec42:	4453      	add	r3, sl
    ec44:	f3c3 520a 	ubfx	r2, r3, #20, #11
    ec48:	4da8      	ldr	r5, [pc, #672]	; (eeec <__ieee754_pow+0x8bc>)
    ec4a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    ec4e:	4115      	asrs	r5, r2
    ec50:	f3c3 0413 	ubfx	r4, r3, #0, #20
    ec54:	ea23 0105 	bic.w	r1, r3, r5
    ec58:	2000      	movs	r0, #0
    ec5a:	f1c2 0b14 	rsb	fp, r2, #20
    ec5e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    ec62:	f1ba 0f00 	cmp.w	sl, #0
    ec66:	4602      	mov	r2, r0
    ec68:	460b      	mov	r3, r1
    ec6a:	fa44 fb0b 	asr.w	fp, r4, fp
    ec6e:	4630      	mov	r0, r6
    ec70:	4639      	mov	r1, r7
    ec72:	bfb8      	it	lt
    ec74:	f1cb 0b00 	rsblt	fp, fp, #0
    ec78:	f000 fc04 	bl	f484 <__aeabi_dsub>
    ec7c:	4602      	mov	r2, r0
    ec7e:	460b      	mov	r3, r1
    ec80:	4606      	mov	r6, r0
    ec82:	460f      	mov	r7, r1
    ec84:	e9dd 0100 	ldrd	r0, r1, [sp]
    ec88:	f000 fbfe 	bl	f488 <__adddf3>
    ec8c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    ec90:	460d      	mov	r5, r1
    ec92:	2400      	movs	r4, #0
    ec94:	a380      	add	r3, pc, #512	; (adr r3, ee98 <__ieee754_pow+0x868>)
    ec96:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec9a:	4620      	mov	r0, r4
    ec9c:	4629      	mov	r1, r5
    ec9e:	f000 fda5 	bl	f7ec <__aeabi_dmul>
    eca2:	4632      	mov	r2, r6
    eca4:	4680      	mov	r8, r0
    eca6:	4689      	mov	r9, r1
    eca8:	463b      	mov	r3, r7
    ecaa:	4620      	mov	r0, r4
    ecac:	4629      	mov	r1, r5
    ecae:	f000 fbe9 	bl	f484 <__aeabi_dsub>
    ecb2:	4602      	mov	r2, r0
    ecb4:	460b      	mov	r3, r1
    ecb6:	e9dd 0100 	ldrd	r0, r1, [sp]
    ecba:	f000 fbe3 	bl	f484 <__aeabi_dsub>
    ecbe:	a378      	add	r3, pc, #480	; (adr r3, eea0 <__ieee754_pow+0x870>)
    ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecc4:	f000 fd92 	bl	f7ec <__aeabi_dmul>
    ecc8:	a377      	add	r3, pc, #476	; (adr r3, eea8 <__ieee754_pow+0x878>)
    ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecce:	4606      	mov	r6, r0
    ecd0:	460f      	mov	r7, r1
    ecd2:	4620      	mov	r0, r4
    ecd4:	4629      	mov	r1, r5
    ecd6:	f000 fd89 	bl	f7ec <__aeabi_dmul>
    ecda:	4602      	mov	r2, r0
    ecdc:	460b      	mov	r3, r1
    ecde:	4630      	mov	r0, r6
    ece0:	4639      	mov	r1, r7
    ece2:	f000 fbd1 	bl	f488 <__adddf3>
    ece6:	4606      	mov	r6, r0
    ece8:	460f      	mov	r7, r1
    ecea:	4602      	mov	r2, r0
    ecec:	460b      	mov	r3, r1
    ecee:	4640      	mov	r0, r8
    ecf0:	4649      	mov	r1, r9
    ecf2:	f000 fbc9 	bl	f488 <__adddf3>
    ecf6:	4642      	mov	r2, r8
    ecf8:	464b      	mov	r3, r9
    ecfa:	4604      	mov	r4, r0
    ecfc:	460d      	mov	r5, r1
    ecfe:	f000 fbc1 	bl	f484 <__aeabi_dsub>
    ed02:	4602      	mov	r2, r0
    ed04:	460b      	mov	r3, r1
    ed06:	4630      	mov	r0, r6
    ed08:	4639      	mov	r1, r7
    ed0a:	f000 fbbb 	bl	f484 <__aeabi_dsub>
    ed0e:	4622      	mov	r2, r4
    ed10:	4680      	mov	r8, r0
    ed12:	4689      	mov	r9, r1
    ed14:	462b      	mov	r3, r5
    ed16:	4620      	mov	r0, r4
    ed18:	4629      	mov	r1, r5
    ed1a:	f000 fd67 	bl	f7ec <__aeabi_dmul>
    ed1e:	a364      	add	r3, pc, #400	; (adr r3, eeb0 <__ieee754_pow+0x880>)
    ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed24:	4606      	mov	r6, r0
    ed26:	460f      	mov	r7, r1
    ed28:	f000 fd60 	bl	f7ec <__aeabi_dmul>
    ed2c:	a362      	add	r3, pc, #392	; (adr r3, eeb8 <__ieee754_pow+0x888>)
    ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed32:	f000 fba7 	bl	f484 <__aeabi_dsub>
    ed36:	4632      	mov	r2, r6
    ed38:	463b      	mov	r3, r7
    ed3a:	f000 fd57 	bl	f7ec <__aeabi_dmul>
    ed3e:	a360      	add	r3, pc, #384	; (adr r3, eec0 <__ieee754_pow+0x890>)
    ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed44:	f000 fba0 	bl	f488 <__adddf3>
    ed48:	4632      	mov	r2, r6
    ed4a:	463b      	mov	r3, r7
    ed4c:	f000 fd4e 	bl	f7ec <__aeabi_dmul>
    ed50:	a35d      	add	r3, pc, #372	; (adr r3, eec8 <__ieee754_pow+0x898>)
    ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed56:	f000 fb95 	bl	f484 <__aeabi_dsub>
    ed5a:	4632      	mov	r2, r6
    ed5c:	463b      	mov	r3, r7
    ed5e:	f000 fd45 	bl	f7ec <__aeabi_dmul>
    ed62:	a35b      	add	r3, pc, #364	; (adr r3, eed0 <__ieee754_pow+0x8a0>)
    ed64:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed68:	f000 fb8e 	bl	f488 <__adddf3>
    ed6c:	4632      	mov	r2, r6
    ed6e:	463b      	mov	r3, r7
    ed70:	f000 fd3c 	bl	f7ec <__aeabi_dmul>
    ed74:	4602      	mov	r2, r0
    ed76:	460b      	mov	r3, r1
    ed78:	4620      	mov	r0, r4
    ed7a:	4629      	mov	r1, r5
    ed7c:	f000 fb82 	bl	f484 <__aeabi_dsub>
    ed80:	4606      	mov	r6, r0
    ed82:	460f      	mov	r7, r1
    ed84:	4602      	mov	r2, r0
    ed86:	460b      	mov	r3, r1
    ed88:	4620      	mov	r0, r4
    ed8a:	4629      	mov	r1, r5
    ed8c:	f000 fd2e 	bl	f7ec <__aeabi_dmul>
    ed90:	2200      	movs	r2, #0
    ed92:	e9cd 0100 	strd	r0, r1, [sp]
    ed96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ed9a:	4630      	mov	r0, r6
    ed9c:	4639      	mov	r1, r7
    ed9e:	f000 fb71 	bl	f484 <__aeabi_dsub>
    eda2:	4602      	mov	r2, r0
    eda4:	460b      	mov	r3, r1
    eda6:	e9dd 0100 	ldrd	r0, r1, [sp]
    edaa:	f000 fe49 	bl	fa40 <__aeabi_ddiv>
    edae:	4642      	mov	r2, r8
    edb0:	4606      	mov	r6, r0
    edb2:	460f      	mov	r7, r1
    edb4:	464b      	mov	r3, r9
    edb6:	4620      	mov	r0, r4
    edb8:	4629      	mov	r1, r5
    edba:	f000 fd17 	bl	f7ec <__aeabi_dmul>
    edbe:	4642      	mov	r2, r8
    edc0:	464b      	mov	r3, r9
    edc2:	f000 fb61 	bl	f488 <__adddf3>
    edc6:	4602      	mov	r2, r0
    edc8:	460b      	mov	r3, r1
    edca:	4630      	mov	r0, r6
    edcc:	4639      	mov	r1, r7
    edce:	f000 fb59 	bl	f484 <__aeabi_dsub>
    edd2:	4622      	mov	r2, r4
    edd4:	462b      	mov	r3, r5
    edd6:	f000 fb55 	bl	f484 <__aeabi_dsub>
    edda:	4602      	mov	r2, r0
    eddc:	460b      	mov	r3, r1
    edde:	2000      	movs	r0, #0
    ede0:	493f      	ldr	r1, [pc, #252]	; (eee0 <__ieee754_pow+0x8b0>)
    ede2:	f000 fb4f 	bl	f484 <__aeabi_dsub>
    ede6:	448a      	add	sl, r1
    ede8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    edec:	f2c0 8133 	blt.w	f056 <__ieee754_pow+0xa26>
    edf0:	4651      	mov	r1, sl
    edf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    edf6:	f000 fcf9 	bl	f7ec <__aeabi_dmul>
    edfa:	e45b      	b.n	e6b4 <__ieee754_pow+0x84>
    edfc:	4642      	mov	r2, r8
    edfe:	4640      	mov	r0, r8
    ee00:	464b      	mov	r3, r9
    ee02:	4649      	mov	r1, r9
    ee04:	f000 fcf2 	bl	f7ec <__aeabi_dmul>
    ee08:	e454      	b.n	e6b4 <__ieee754_pow+0x84>
    ee0a:	f1ba 0f00 	cmp.w	sl, #0
    ee0e:	f6bf ace0 	bge.w	e7d2 <__ieee754_pow+0x1a2>
    ee12:	e9dd 3400 	ldrd	r3, r4, [sp]
    ee16:	4618      	mov	r0, r3
    ee18:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    ee1c:	e44a      	b.n	e6b4 <__ieee754_pow+0x84>
    ee1e:	4b34      	ldr	r3, [pc, #208]	; (eef0 <__ieee754_pow+0x8c0>)
    ee20:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    ee24:	4598      	cmp	r8, r3
    ee26:	f340 80f2 	ble.w	f00e <__ieee754_pow+0x9de>
    ee2a:	4b32      	ldr	r3, [pc, #200]	; (eef4 <__ieee754_pow+0x8c4>)
    ee2c:	440b      	add	r3, r1
    ee2e:	4303      	orrs	r3, r0
    ee30:	d10c      	bne.n	ee4c <__ieee754_pow+0x81c>
    ee32:	4632      	mov	r2, r6
    ee34:	463b      	mov	r3, r7
    ee36:	f000 fb25 	bl	f484 <__aeabi_dsub>
    ee3a:	4602      	mov	r2, r0
    ee3c:	460b      	mov	r3, r1
    ee3e:	e9dd 0100 	ldrd	r0, r1, [sp]
    ee42:	f000 ff4f 	bl	fce4 <__aeabi_dcmple>
    ee46:	2800      	cmp	r0, #0
    ee48:	f43f aef3 	beq.w	ec32 <__ieee754_pow+0x602>
    ee4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ee50:	a321      	add	r3, pc, #132	; (adr r3, eed8 <__ieee754_pow+0x8a8>)
    ee52:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee56:	f000 fcc9 	bl	f7ec <__aeabi_dmul>
    ee5a:	a31f      	add	r3, pc, #124	; (adr r3, eed8 <__ieee754_pow+0x8a8>)
    ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee60:	f000 fcc4 	bl	f7ec <__aeabi_dmul>
    ee64:	e426      	b.n	e6b4 <__ieee754_pow+0x84>
    ee66:	4602      	mov	r2, r0
    ee68:	460b      	mov	r3, r1
    ee6a:	2000      	movs	r0, #0
    ee6c:	491c      	ldr	r1, [pc, #112]	; (eee0 <__ieee754_pow+0x8b0>)
    ee6e:	f000 fde7 	bl	fa40 <__aeabi_ddiv>
    ee72:	e43c      	b.n	e6ee <__ieee754_pow+0xbe>
    ee74:	2200      	movs	r2, #0
    ee76:	2300      	movs	r3, #0
    ee78:	e9cd 2308 	strd	r2, r3, [sp, #32]
    ee7c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    ee80:	4b17      	ldr	r3, [pc, #92]	; (eee0 <__ieee754_pow+0x8b0>)
    ee82:	2200      	movs	r2, #0
    ee84:	2700      	movs	r7, #0
    ee86:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ee8a:	e4e6      	b.n	e85a <__ieee754_pow+0x22a>
    ee8c:	f3af 8000 	nop.w
    ee90:	652b82fe 	.word	0x652b82fe
    ee94:	3c971547 	.word	0x3c971547
    ee98:	00000000 	.word	0x00000000
    ee9c:	3fe62e43 	.word	0x3fe62e43
    eea0:	fefa39ef 	.word	0xfefa39ef
    eea4:	3fe62e42 	.word	0x3fe62e42
    eea8:	0ca86c39 	.word	0x0ca86c39
    eeac:	be205c61 	.word	0xbe205c61
    eeb0:	72bea4d0 	.word	0x72bea4d0
    eeb4:	3e663769 	.word	0x3e663769
    eeb8:	c5d26bf1 	.word	0xc5d26bf1
    eebc:	3ebbbd41 	.word	0x3ebbbd41
    eec0:	af25de2c 	.word	0xaf25de2c
    eec4:	3f11566a 	.word	0x3f11566a
    eec8:	16bebd93 	.word	0x16bebd93
    eecc:	3f66c16c 	.word	0x3f66c16c
    eed0:	5555553e 	.word	0x5555553e
    eed4:	3fc55555 	.word	0x3fc55555
    eed8:	c2f8f359 	.word	0xc2f8f359
    eedc:	01a56e1f 	.word	0x01a56e1f
    eee0:	3ff00000 	.word	0x3ff00000
    eee4:	bff00000 	.word	0xbff00000
    eee8:	408fffff 	.word	0x408fffff
    eeec:	000fffff 	.word	0x000fffff
    eef0:	4090cbff 	.word	0x4090cbff
    eef4:	3f6f3400 	.word	0x3f6f3400
    eef8:	4b6b      	ldr	r3, [pc, #428]	; (f0a8 <__ieee754_pow+0xa78>)
    eefa:	429e      	cmp	r6, r3
    eefc:	f77f ac66 	ble.w	e7cc <__ieee754_pow+0x19c>
    ef00:	4b6a      	ldr	r3, [pc, #424]	; (f0ac <__ieee754_pow+0xa7c>)
    ef02:	429e      	cmp	r6, r3
    ef04:	f73f ac13 	bgt.w	e72e <__ieee754_pow+0xfe>
    ef08:	2200      	movs	r2, #0
    ef0a:	4b68      	ldr	r3, [pc, #416]	; (f0ac <__ieee754_pow+0xa7c>)
    ef0c:	f000 faba 	bl	f484 <__aeabi_dsub>
    ef10:	a357      	add	r3, pc, #348	; (adr r3, f070 <__ieee754_pow+0xa40>)
    ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef16:	4606      	mov	r6, r0
    ef18:	460f      	mov	r7, r1
    ef1a:	f000 fc67 	bl	f7ec <__aeabi_dmul>
    ef1e:	a356      	add	r3, pc, #344	; (adr r3, f078 <__ieee754_pow+0xa48>)
    ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef24:	4680      	mov	r8, r0
    ef26:	4689      	mov	r9, r1
    ef28:	4630      	mov	r0, r6
    ef2a:	4639      	mov	r1, r7
    ef2c:	f000 fc5e 	bl	f7ec <__aeabi_dmul>
    ef30:	2200      	movs	r2, #0
    ef32:	4682      	mov	sl, r0
    ef34:	468b      	mov	fp, r1
    ef36:	4b5e      	ldr	r3, [pc, #376]	; (f0b0 <__ieee754_pow+0xa80>)
    ef38:	4630      	mov	r0, r6
    ef3a:	4639      	mov	r1, r7
    ef3c:	f000 fc56 	bl	f7ec <__aeabi_dmul>
    ef40:	4602      	mov	r2, r0
    ef42:	460b      	mov	r3, r1
    ef44:	a14e      	add	r1, pc, #312	; (adr r1, f080 <__ieee754_pow+0xa50>)
    ef46:	e9d1 0100 	ldrd	r0, r1, [r1]
    ef4a:	f000 fa9b 	bl	f484 <__aeabi_dsub>
    ef4e:	4632      	mov	r2, r6
    ef50:	463b      	mov	r3, r7
    ef52:	f000 fc4b 	bl	f7ec <__aeabi_dmul>
    ef56:	4602      	mov	r2, r0
    ef58:	460b      	mov	r3, r1
    ef5a:	2000      	movs	r0, #0
    ef5c:	4955      	ldr	r1, [pc, #340]	; (f0b4 <__ieee754_pow+0xa84>)
    ef5e:	f000 fa91 	bl	f484 <__aeabi_dsub>
    ef62:	4632      	mov	r2, r6
    ef64:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ef68:	463b      	mov	r3, r7
    ef6a:	4630      	mov	r0, r6
    ef6c:	4639      	mov	r1, r7
    ef6e:	f000 fc3d 	bl	f7ec <__aeabi_dmul>
    ef72:	4602      	mov	r2, r0
    ef74:	460b      	mov	r3, r1
    ef76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ef7a:	f000 fc37 	bl	f7ec <__aeabi_dmul>
    ef7e:	a342      	add	r3, pc, #264	; (adr r3, f088 <__ieee754_pow+0xa58>)
    ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef84:	f000 fc32 	bl	f7ec <__aeabi_dmul>
    ef88:	4602      	mov	r2, r0
    ef8a:	460b      	mov	r3, r1
    ef8c:	4650      	mov	r0, sl
    ef8e:	4659      	mov	r1, fp
    ef90:	f000 fa78 	bl	f484 <__aeabi_dsub>
    ef94:	4602      	mov	r2, r0
    ef96:	460b      	mov	r3, r1
    ef98:	4606      	mov	r6, r0
    ef9a:	460f      	mov	r7, r1
    ef9c:	4640      	mov	r0, r8
    ef9e:	4649      	mov	r1, r9
    efa0:	f000 fa72 	bl	f488 <__adddf3>
    efa4:	4642      	mov	r2, r8
    efa6:	464b      	mov	r3, r9
    efa8:	2000      	movs	r0, #0
    efaa:	4682      	mov	sl, r0
    efac:	468b      	mov	fp, r1
    efae:	f000 fa69 	bl	f484 <__aeabi_dsub>
    efb2:	4602      	mov	r2, r0
    efb4:	460b      	mov	r3, r1
    efb6:	4630      	mov	r0, r6
    efb8:	4639      	mov	r1, r7
    efba:	f000 fa63 	bl	f484 <__aeabi_dsub>
    efbe:	4680      	mov	r8, r0
    efc0:	4689      	mov	r9, r1
    efc2:	e5d4      	b.n	eb6e <__ieee754_pow+0x53e>
    efc4:	4642      	mov	r2, r8
    efc6:	464b      	mov	r3, r9
    efc8:	2000      	movs	r0, #0
    efca:	4938      	ldr	r1, [pc, #224]	; (f0ac <__ieee754_pow+0xa7c>)
    efcc:	f000 fd38 	bl	fa40 <__aeabi_ddiv>
    efd0:	f7ff bb70 	b.w	e6b4 <__ieee754_pow+0x84>
    efd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    efd8:	a32d      	add	r3, pc, #180	; (adr r3, f090 <__ieee754_pow+0xa60>)
    efda:	e9d3 2300 	ldrd	r2, r3, [r3]
    efde:	f000 fc05 	bl	f7ec <__aeabi_dmul>
    efe2:	a32b      	add	r3, pc, #172	; (adr r3, f090 <__ieee754_pow+0xa60>)
    efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
    efe8:	f000 fc00 	bl	f7ec <__aeabi_dmul>
    efec:	f7ff bb62 	b.w	e6b4 <__ieee754_pow+0x84>
    eff0:	f1be 0f00 	cmp.w	lr, #0
    eff4:	f47f ab69 	bne.w	e6ca <__ieee754_pow+0x9a>
    eff8:	f1c3 0314 	rsb	r3, r3, #20
    effc:	fa47 f203 	asr.w	r2, r7, r3
    f000:	fa02 f303 	lsl.w	r3, r2, r3
    f004:	429f      	cmp	r7, r3
    f006:	d02a      	beq.n	f05e <__ieee754_pow+0xa2e>
    f008:	4674      	mov	r4, lr
    f00a:	f7ff bb36 	b.w	e67a <__ieee754_pow+0x4a>
    f00e:	4b29      	ldr	r3, [pc, #164]	; (f0b4 <__ieee754_pow+0xa84>)
    f010:	4598      	cmp	r8, r3
    f012:	f73f ae0e 	bgt.w	ec32 <__ieee754_pow+0x602>
    f016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f01a:	4692      	mov	sl, r2
    f01c:	4693      	mov	fp, r2
    f01e:	e638      	b.n	ec92 <__ieee754_pow+0x662>
    f020:	4602      	mov	r2, r0
    f022:	460b      	mov	r3, r1
    f024:	f000 fa2e 	bl	f484 <__aeabi_dsub>
    f028:	4602      	mov	r2, r0
    f02a:	460b      	mov	r3, r1
    f02c:	f000 fd08 	bl	fa40 <__aeabi_ddiv>
    f030:	f7ff bb40 	b.w	e6b4 <__ieee754_pow+0x84>
    f034:	a318      	add	r3, pc, #96	; (adr r3, f098 <__ieee754_pow+0xa68>)
    f036:	e9d3 2300 	ldrd	r2, r3, [r3]
    f03a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f03e:	a318      	add	r3, pc, #96	; (adr r3, f0a0 <__ieee754_pow+0xa70>)
    f040:	e9d3 2300 	ldrd	r2, r3, [r3]
    f044:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    f048:	4b1b      	ldr	r3, [pc, #108]	; (f0b8 <__ieee754_pow+0xa88>)
    f04a:	2200      	movs	r2, #0
    f04c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    f050:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f054:	e401      	b.n	e85a <__ieee754_pow+0x22a>
    f056:	465a      	mov	r2, fp
    f058:	f000 f98a 	bl	f370 <scalbn>
    f05c:	e6c9      	b.n	edf2 <__ieee754_pow+0x7c2>
    f05e:	f002 0201 	and.w	r2, r2, #1
    f062:	f1c2 0402 	rsb	r4, r2, #2
    f066:	f7ff bb08 	b.w	e67a <__ieee754_pow+0x4a>
    f06a:	bf00      	nop
    f06c:	f3af 8000 	nop.w
    f070:	60000000 	.word	0x60000000
    f074:	3ff71547 	.word	0x3ff71547
    f078:	f85ddf44 	.word	0xf85ddf44
    f07c:	3e54ae0b 	.word	0x3e54ae0b
    f080:	55555555 	.word	0x55555555
    f084:	3fd55555 	.word	0x3fd55555
    f088:	652b82fe 	.word	0x652b82fe
    f08c:	3ff71547 	.word	0x3ff71547
    f090:	8800759c 	.word	0x8800759c
    f094:	7e37e43c 	.word	0x7e37e43c
    f098:	40000000 	.word	0x40000000
    f09c:	3fe2b803 	.word	0x3fe2b803
    f0a0:	43cfd006 	.word	0x43cfd006
    f0a4:	3e4cfdeb 	.word	0x3e4cfdeb
    f0a8:	3feffffe 	.word	0x3feffffe
    f0ac:	3ff00000 	.word	0x3ff00000
    f0b0:	3fd00000 	.word	0x3fd00000
    f0b4:	3fe00000 	.word	0x3fe00000
    f0b8:	3ff80000 	.word	0x3ff80000

0000f0bc <__ieee754_sqrt>:
    f0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f0c0:	4f5b      	ldr	r7, [pc, #364]	; (f230 <__ieee754_sqrt+0x174>)
    f0c2:	438f      	bics	r7, r1
    f0c4:	4605      	mov	r5, r0
    f0c6:	460c      	mov	r4, r1
    f0c8:	f000 8092 	beq.w	f1f0 <__ieee754_sqrt+0x134>
    f0cc:	2900      	cmp	r1, #0
    f0ce:	460b      	mov	r3, r1
    f0d0:	4602      	mov	r2, r0
    f0d2:	dd6f      	ble.n	f1b4 <__ieee754_sqrt+0xf8>
    f0d4:	150f      	asrs	r7, r1, #20
    f0d6:	d07b      	beq.n	f1d0 <__ieee754_sqrt+0x114>
    f0d8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    f0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    f0e0:	07f8      	lsls	r0, r7, #31
    f0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f0e6:	d45c      	bmi.n	f1a2 <__ieee754_sqrt+0xe6>
    f0e8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    f0ec:	2600      	movs	r6, #0
    f0ee:	440b      	add	r3, r1
    f0f0:	107f      	asrs	r7, r7, #1
    f0f2:	0052      	lsls	r2, r2, #1
    f0f4:	46b6      	mov	lr, r6
    f0f6:	2016      	movs	r0, #22
    f0f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    f0fc:	eb0e 0401 	add.w	r4, lr, r1
    f100:	429c      	cmp	r4, r3
    f102:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    f106:	ea4f 0242 	mov.w	r2, r2, lsl #1
    f10a:	dc03      	bgt.n	f114 <__ieee754_sqrt+0x58>
    f10c:	1b1b      	subs	r3, r3, r4
    f10e:	eb04 0e01 	add.w	lr, r4, r1
    f112:	440e      	add	r6, r1
    f114:	3801      	subs	r0, #1
    f116:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f11a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    f11e:	d1ed      	bne.n	f0fc <__ieee754_sqrt+0x40>
    f120:	4684      	mov	ip, r0
    f122:	2420      	movs	r4, #32
    f124:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    f128:	e009      	b.n	f13e <__ieee754_sqrt+0x82>
    f12a:	d020      	beq.n	f16e <__ieee754_sqrt+0xb2>
    f12c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    f130:	3c01      	subs	r4, #1
    f132:	ea4f 0151 	mov.w	r1, r1, lsr #1
    f136:	442b      	add	r3, r5
    f138:	ea4f 0242 	mov.w	r2, r2, lsl #1
    f13c:	d020      	beq.n	f180 <__ieee754_sqrt+0xc4>
    f13e:	4573      	cmp	r3, lr
    f140:	eb01 050c 	add.w	r5, r1, ip
    f144:	ddf1      	ble.n	f12a <__ieee754_sqrt+0x6e>
    f146:	2d00      	cmp	r5, #0
    f148:	eb05 0c01 	add.w	ip, r5, r1
    f14c:	db09      	blt.n	f162 <__ieee754_sqrt+0xa6>
    f14e:	46f0      	mov	r8, lr
    f150:	4295      	cmp	r5, r2
    f152:	eba3 030e 	sub.w	r3, r3, lr
    f156:	d900      	bls.n	f15a <__ieee754_sqrt+0x9e>
    f158:	3b01      	subs	r3, #1
    f15a:	1b52      	subs	r2, r2, r5
    f15c:	4408      	add	r0, r1
    f15e:	46c6      	mov	lr, r8
    f160:	e7e4      	b.n	f12c <__ieee754_sqrt+0x70>
    f162:	f1bc 0f00 	cmp.w	ip, #0
    f166:	dbf2      	blt.n	f14e <__ieee754_sqrt+0x92>
    f168:	f10e 0801 	add.w	r8, lr, #1
    f16c:	e7f0      	b.n	f150 <__ieee754_sqrt+0x94>
    f16e:	4295      	cmp	r5, r2
    f170:	d8dc      	bhi.n	f12c <__ieee754_sqrt+0x70>
    f172:	2d00      	cmp	r5, #0
    f174:	eb05 0c01 	add.w	ip, r5, r1
    f178:	db44      	blt.n	f204 <__ieee754_sqrt+0x148>
    f17a:	4698      	mov	r8, r3
    f17c:	2300      	movs	r3, #0
    f17e:	e7ec      	b.n	f15a <__ieee754_sqrt+0x9e>
    f180:	4313      	orrs	r3, r2
    f182:	d113      	bne.n	f1ac <__ieee754_sqrt+0xf0>
    f184:	0840      	lsrs	r0, r0, #1
    f186:	1073      	asrs	r3, r6, #1
    f188:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    f18c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    f190:	07f2      	lsls	r2, r6, #31
    f192:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    f196:	bf48      	it	mi
    f198:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    f19c:	4649      	mov	r1, r9
    f19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f1a2:	005b      	lsls	r3, r3, #1
    f1a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    f1a8:	0052      	lsls	r2, r2, #1
    f1aa:	e79d      	b.n	f0e8 <__ieee754_sqrt+0x2c>
    f1ac:	1c41      	adds	r1, r0, #1
    f1ae:	d02d      	beq.n	f20c <__ieee754_sqrt+0x150>
    f1b0:	3001      	adds	r0, #1
    f1b2:	e7e7      	b.n	f184 <__ieee754_sqrt+0xc8>
    f1b4:	4606      	mov	r6, r0
    f1b6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    f1ba:	433e      	orrs	r6, r7
    f1bc:	d0ef      	beq.n	f19e <__ieee754_sqrt+0xe2>
    f1be:	bb69      	cbnz	r1, f21c <__ieee754_sqrt+0x160>
    f1c0:	460f      	mov	r7, r1
    f1c2:	0ad3      	lsrs	r3, r2, #11
    f1c4:	3f15      	subs	r7, #21
    f1c6:	0552      	lsls	r2, r2, #21
    f1c8:	2b00      	cmp	r3, #0
    f1ca:	d0fa      	beq.n	f1c2 <__ieee754_sqrt+0x106>
    f1cc:	02de      	lsls	r6, r3, #11
    f1ce:	d420      	bmi.n	f212 <__ieee754_sqrt+0x156>
    f1d0:	2400      	movs	r4, #0
    f1d2:	e000      	b.n	f1d6 <__ieee754_sqrt+0x11a>
    f1d4:	4604      	mov	r4, r0
    f1d6:	005b      	lsls	r3, r3, #1
    f1d8:	02dd      	lsls	r5, r3, #11
    f1da:	f104 0001 	add.w	r0, r4, #1
    f1de:	d5f9      	bpl.n	f1d4 <__ieee754_sqrt+0x118>
    f1e0:	f1c0 0120 	rsb	r1, r0, #32
    f1e4:	fa22 f101 	lsr.w	r1, r2, r1
    f1e8:	430b      	orrs	r3, r1
    f1ea:	1b3f      	subs	r7, r7, r4
    f1ec:	4082      	lsls	r2, r0
    f1ee:	e773      	b.n	f0d8 <__ieee754_sqrt+0x1c>
    f1f0:	4602      	mov	r2, r0
    f1f2:	460b      	mov	r3, r1
    f1f4:	f000 fafa 	bl	f7ec <__aeabi_dmul>
    f1f8:	462a      	mov	r2, r5
    f1fa:	4623      	mov	r3, r4
    f1fc:	f000 f944 	bl	f488 <__adddf3>
    f200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f204:	f1bc 0f00 	cmp.w	ip, #0
    f208:	daae      	bge.n	f168 <__ieee754_sqrt+0xac>
    f20a:	e7b6      	b.n	f17a <__ieee754_sqrt+0xbe>
    f20c:	3601      	adds	r6, #1
    f20e:	4620      	mov	r0, r4
    f210:	e7b9      	b.n	f186 <__ieee754_sqrt+0xca>
    f212:	2000      	movs	r0, #0
    f214:	2120      	movs	r1, #32
    f216:	f04f 34ff 	mov.w	r4, #4294967295
    f21a:	e7e3      	b.n	f1e4 <__ieee754_sqrt+0x128>
    f21c:	4602      	mov	r2, r0
    f21e:	460b      	mov	r3, r1
    f220:	f000 f930 	bl	f484 <__aeabi_dsub>
    f224:	4602      	mov	r2, r0
    f226:	460b      	mov	r3, r1
    f228:	f000 fc0a 	bl	fa40 <__aeabi_ddiv>
    f22c:	e7b7      	b.n	f19e <__ieee754_sqrt+0xe2>
    f22e:	bf00      	nop
    f230:	7ff00000 	.word	0x7ff00000

0000f234 <fabs>:
    f234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f238:	4770      	bx	lr
    f23a:	bf00      	nop

0000f23c <finite>:
    f23c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f240:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    f244:	0fc0      	lsrs	r0, r0, #31
    f246:	4770      	bx	lr

0000f248 <matherr>:
    f248:	2000      	movs	r0, #0
    f24a:	4770      	bx	lr

0000f24c <nan>:
    f24c:	2000      	movs	r0, #0
    f24e:	4901      	ldr	r1, [pc, #4]	; (f254 <nan+0x8>)
    f250:	4770      	bx	lr
    f252:	bf00      	nop
    f254:	7ff80000 	.word	0x7ff80000

0000f258 <rint>:
    f258:	b5f0      	push	{r4, r5, r6, r7, lr}
    f25a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    f25e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    f262:	2e13      	cmp	r6, #19
    f264:	b083      	sub	sp, #12
    f266:	4602      	mov	r2, r0
    f268:	460b      	mov	r3, r1
    f26a:	460c      	mov	r4, r1
    f26c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    f270:	4607      	mov	r7, r0
    f272:	dc2e      	bgt.n	f2d2 <rint+0x7a>
    f274:	2e00      	cmp	r6, #0
    f276:	db49      	blt.n	f30c <rint+0xb4>
    f278:	493a      	ldr	r1, [pc, #232]	; (f364 <rint+0x10c>)
    f27a:	4131      	asrs	r1, r6
    f27c:	ea03 0001 	and.w	r0, r3, r1
    f280:	4310      	orrs	r0, r2
    f282:	d02b      	beq.n	f2dc <rint+0x84>
    f284:	0849      	lsrs	r1, r1, #1
    f286:	400b      	ands	r3, r1
    f288:	ea53 0702 	orrs.w	r7, r3, r2
    f28c:	d00c      	beq.n	f2a8 <rint+0x50>
    f28e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    f292:	2e13      	cmp	r6, #19
    f294:	ea24 0101 	bic.w	r1, r4, r1
    f298:	fa43 f406 	asr.w	r4, r3, r6
    f29c:	ea44 0401 	orr.w	r4, r4, r1
    f2a0:	bf0c      	ite	eq
    f2a2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    f2a6:	2700      	movne	r7, #0
    f2a8:	4b2f      	ldr	r3, [pc, #188]	; (f368 <rint+0x110>)
    f2aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    f2ae:	4621      	mov	r1, r4
    f2b0:	e9d5 4500 	ldrd	r4, r5, [r5]
    f2b4:	4638      	mov	r0, r7
    f2b6:	4622      	mov	r2, r4
    f2b8:	462b      	mov	r3, r5
    f2ba:	f000 f8e5 	bl	f488 <__adddf3>
    f2be:	e9cd 0100 	strd	r0, r1, [sp]
    f2c2:	4622      	mov	r2, r4
    f2c4:	462b      	mov	r3, r5
    f2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
    f2ca:	f000 f8db 	bl	f484 <__aeabi_dsub>
    f2ce:	b003      	add	sp, #12
    f2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2d2:	2e33      	cmp	r6, #51	; 0x33
    f2d4:	dd06      	ble.n	f2e4 <rint+0x8c>
    f2d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    f2da:	d040      	beq.n	f35e <rint+0x106>
    f2dc:	4610      	mov	r0, r2
    f2de:	4619      	mov	r1, r3
    f2e0:	b003      	add	sp, #12
    f2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2e4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    f2e8:	f04f 31ff 	mov.w	r1, #4294967295
    f2ec:	fa21 f10e 	lsr.w	r1, r1, lr
    f2f0:	4208      	tst	r0, r1
    f2f2:	d0f3      	beq.n	f2dc <rint+0x84>
    f2f4:	0849      	lsrs	r1, r1, #1
    f2f6:	4208      	tst	r0, r1
    f2f8:	d0d6      	beq.n	f2a8 <rint+0x50>
    f2fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f2fe:	ea20 0101 	bic.w	r1, r0, r1
    f302:	fa43 fe0e 	asr.w	lr, r3, lr
    f306:	ea4e 0701 	orr.w	r7, lr, r1
    f30a:	e7cd      	b.n	f2a8 <rint+0x50>
    f30c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f310:	4301      	orrs	r1, r0
    f312:	d0e3      	beq.n	f2dc <rint+0x84>
    f314:	f3c3 0113 	ubfx	r1, r3, #0, #20
    f318:	4e13      	ldr	r6, [pc, #76]	; (f368 <rint+0x110>)
    f31a:	4301      	orrs	r1, r0
    f31c:	f1c1 0c00 	rsb	ip, r1, #0
    f320:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    f324:	e9d6 6700 	ldrd	r6, r7, [r6]
    f328:	ea4c 0c01 	orr.w	ip, ip, r1
    f32c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    f330:	0c5c      	lsrs	r4, r3, #17
    f332:	0464      	lsls	r4, r4, #17
    f334:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    f338:	ea43 0104 	orr.w	r1, r3, r4
    f33c:	4632      	mov	r2, r6
    f33e:	463b      	mov	r3, r7
    f340:	f000 f8a2 	bl	f488 <__adddf3>
    f344:	e9cd 0100 	strd	r0, r1, [sp]
    f348:	4632      	mov	r2, r6
    f34a:	463b      	mov	r3, r7
    f34c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f350:	f000 f898 	bl	f484 <__aeabi_dsub>
    f354:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    f358:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    f35c:	e7c0      	b.n	f2e0 <rint+0x88>
    f35e:	f000 f893 	bl	f488 <__adddf3>
    f362:	e7bd      	b.n	f2e0 <rint+0x88>
    f364:	000fffff 	.word	0x000fffff
    f368:	000111c8 	.word	0x000111c8
    f36c:	00000000 	.word	0x00000000

0000f370 <scalbn>:
    f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f372:	f3c1 560a 	ubfx	r6, r1, #20, #11
    f376:	4604      	mov	r4, r0
    f378:	460d      	mov	r5, r1
    f37a:	460b      	mov	r3, r1
    f37c:	4617      	mov	r7, r2
    f37e:	bb0e      	cbnz	r6, f3c4 <scalbn+0x54>
    f380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    f384:	4303      	orrs	r3, r0
    f386:	4686      	mov	lr, r0
    f388:	d025      	beq.n	f3d6 <scalbn+0x66>
    f38a:	2200      	movs	r2, #0
    f38c:	4b34      	ldr	r3, [pc, #208]	; (f460 <scalbn+0xf0>)
    f38e:	f000 fa2d 	bl	f7ec <__aeabi_dmul>
    f392:	4a34      	ldr	r2, [pc, #208]	; (f464 <scalbn+0xf4>)
    f394:	4297      	cmp	r7, r2
    f396:	4604      	mov	r4, r0
    f398:	460d      	mov	r5, r1
    f39a:	460b      	mov	r3, r1
    f39c:	db2a      	blt.n	f3f4 <scalbn+0x84>
    f39e:	f3c1 560a 	ubfx	r6, r1, #20, #11
    f3a2:	3e36      	subs	r6, #54	; 0x36
    f3a4:	443e      	add	r6, r7
    f3a6:	f240 72fe 	movw	r2, #2046	; 0x7fe
    f3aa:	4296      	cmp	r6, r2
    f3ac:	dc28      	bgt.n	f400 <scalbn+0x90>
    f3ae:	2e00      	cmp	r6, #0
    f3b0:	dd12      	ble.n	f3d8 <scalbn+0x68>
    f3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    f3b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    f3ba:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    f3be:	4620      	mov	r0, r4
    f3c0:	4629      	mov	r1, r5
    f3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
    f3c8:	4296      	cmp	r6, r2
    f3ca:	d1eb      	bne.n	f3a4 <scalbn+0x34>
    f3cc:	4602      	mov	r2, r0
    f3ce:	460b      	mov	r3, r1
    f3d0:	f000 f85a 	bl	f488 <__adddf3>
    f3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3d8:	f116 0f35 	cmn.w	r6, #53	; 0x35
    f3dc:	da1d      	bge.n	f41a <scalbn+0xaa>
    f3de:	f24c 3350 	movw	r3, #50000	; 0xc350
    f3e2:	429f      	cmp	r7, r3
    f3e4:	4622      	mov	r2, r4
    f3e6:	462b      	mov	r3, r5
    f3e8:	dc25      	bgt.n	f436 <scalbn+0xc6>
    f3ea:	a119      	add	r1, pc, #100	; (adr r1, f450 <scalbn+0xe0>)
    f3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
    f3f0:	f000 f83c 	bl	f46c <copysign>
    f3f4:	a316      	add	r3, pc, #88	; (adr r3, f450 <scalbn+0xe0>)
    f3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3fa:	f000 f9f7 	bl	f7ec <__aeabi_dmul>
    f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f400:	4622      	mov	r2, r4
    f402:	462b      	mov	r3, r5
    f404:	a114      	add	r1, pc, #80	; (adr r1, f458 <scalbn+0xe8>)
    f406:	e9d1 0100 	ldrd	r0, r1, [r1]
    f40a:	f000 f82f 	bl	f46c <copysign>
    f40e:	a312      	add	r3, pc, #72	; (adr r3, f458 <scalbn+0xe8>)
    f410:	e9d3 2300 	ldrd	r2, r3, [r3]
    f414:	f000 f9ea 	bl	f7ec <__aeabi_dmul>
    f418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f41a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    f41e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    f422:	3636      	adds	r6, #54	; 0x36
    f424:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    f428:	4620      	mov	r0, r4
    f42a:	4629      	mov	r1, r5
    f42c:	2200      	movs	r2, #0
    f42e:	4b0e      	ldr	r3, [pc, #56]	; (f468 <scalbn+0xf8>)
    f430:	f000 f9dc 	bl	f7ec <__aeabi_dmul>
    f434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f436:	a108      	add	r1, pc, #32	; (adr r1, f458 <scalbn+0xe8>)
    f438:	e9d1 0100 	ldrd	r0, r1, [r1]
    f43c:	f000 f816 	bl	f46c <copysign>
    f440:	a305      	add	r3, pc, #20	; (adr r3, f458 <scalbn+0xe8>)
    f442:	e9d3 2300 	ldrd	r2, r3, [r3]
    f446:	f000 f9d1 	bl	f7ec <__aeabi_dmul>
    f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f44c:	f3af 8000 	nop.w
    f450:	c2f8f359 	.word	0xc2f8f359
    f454:	01a56e1f 	.word	0x01a56e1f
    f458:	8800759c 	.word	0x8800759c
    f45c:	7e37e43c 	.word	0x7e37e43c
    f460:	43500000 	.word	0x43500000
    f464:	ffff3cb0 	.word	0xffff3cb0
    f468:	3c900000 	.word	0x3c900000

0000f46c <copysign>:
    f46c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    f470:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    f474:	ea42 0103 	orr.w	r1, r2, r3
    f478:	4770      	bx	lr
    f47a:	bf00      	nop

0000f47c <__aeabi_drsub>:
    f47c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    f480:	e002      	b.n	f488 <__adddf3>
    f482:	bf00      	nop

0000f484 <__aeabi_dsub>:
    f484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000f488 <__adddf3>:
    f488:	b530      	push	{r4, r5, lr}
    f48a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    f48e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    f492:	ea94 0f05 	teq	r4, r5
    f496:	bf08      	it	eq
    f498:	ea90 0f02 	teqeq	r0, r2
    f49c:	bf1f      	itttt	ne
    f49e:	ea54 0c00 	orrsne.w	ip, r4, r0
    f4a2:	ea55 0c02 	orrsne.w	ip, r5, r2
    f4a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    f4aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    f4ae:	f000 80e2 	beq.w	f676 <__adddf3+0x1ee>
    f4b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    f4b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    f4ba:	bfb8      	it	lt
    f4bc:	426d      	neglt	r5, r5
    f4be:	dd0c      	ble.n	f4da <__adddf3+0x52>
    f4c0:	442c      	add	r4, r5
    f4c2:	ea80 0202 	eor.w	r2, r0, r2
    f4c6:	ea81 0303 	eor.w	r3, r1, r3
    f4ca:	ea82 0000 	eor.w	r0, r2, r0
    f4ce:	ea83 0101 	eor.w	r1, r3, r1
    f4d2:	ea80 0202 	eor.w	r2, r0, r2
    f4d6:	ea81 0303 	eor.w	r3, r1, r3
    f4da:	2d36      	cmp	r5, #54	; 0x36
    f4dc:	bf88      	it	hi
    f4de:	bd30      	pophi	{r4, r5, pc}
    f4e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    f4e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    f4e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    f4ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    f4f0:	d002      	beq.n	f4f8 <__adddf3+0x70>
    f4f2:	4240      	negs	r0, r0
    f4f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f4f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    f4fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    f500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    f504:	d002      	beq.n	f50c <__adddf3+0x84>
    f506:	4252      	negs	r2, r2
    f508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    f50c:	ea94 0f05 	teq	r4, r5
    f510:	f000 80a7 	beq.w	f662 <__adddf3+0x1da>
    f514:	f1a4 0401 	sub.w	r4, r4, #1
    f518:	f1d5 0e20 	rsbs	lr, r5, #32
    f51c:	db0d      	blt.n	f53a <__adddf3+0xb2>
    f51e:	fa02 fc0e 	lsl.w	ip, r2, lr
    f522:	fa22 f205 	lsr.w	r2, r2, r5
    f526:	1880      	adds	r0, r0, r2
    f528:	f141 0100 	adc.w	r1, r1, #0
    f52c:	fa03 f20e 	lsl.w	r2, r3, lr
    f530:	1880      	adds	r0, r0, r2
    f532:	fa43 f305 	asr.w	r3, r3, r5
    f536:	4159      	adcs	r1, r3
    f538:	e00e      	b.n	f558 <__adddf3+0xd0>
    f53a:	f1a5 0520 	sub.w	r5, r5, #32
    f53e:	f10e 0e20 	add.w	lr, lr, #32
    f542:	2a01      	cmp	r2, #1
    f544:	fa03 fc0e 	lsl.w	ip, r3, lr
    f548:	bf28      	it	cs
    f54a:	f04c 0c02 	orrcs.w	ip, ip, #2
    f54e:	fa43 f305 	asr.w	r3, r3, r5
    f552:	18c0      	adds	r0, r0, r3
    f554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    f558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f55c:	d507      	bpl.n	f56e <__adddf3+0xe6>
    f55e:	f04f 0e00 	mov.w	lr, #0
    f562:	f1dc 0c00 	rsbs	ip, ip, #0
    f566:	eb7e 0000 	sbcs.w	r0, lr, r0
    f56a:	eb6e 0101 	sbc.w	r1, lr, r1
    f56e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    f572:	d31b      	bcc.n	f5ac <__adddf3+0x124>
    f574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    f578:	d30c      	bcc.n	f594 <__adddf3+0x10c>
    f57a:	0849      	lsrs	r1, r1, #1
    f57c:	ea5f 0030 	movs.w	r0, r0, rrx
    f580:	ea4f 0c3c 	mov.w	ip, ip, rrx
    f584:	f104 0401 	add.w	r4, r4, #1
    f588:	ea4f 5244 	mov.w	r2, r4, lsl #21
    f58c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    f590:	f080 809a 	bcs.w	f6c8 <__adddf3+0x240>
    f594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    f598:	bf08      	it	eq
    f59a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    f59e:	f150 0000 	adcs.w	r0, r0, #0
    f5a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    f5a6:	ea41 0105 	orr.w	r1, r1, r5
    f5aa:	bd30      	pop	{r4, r5, pc}
    f5ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    f5b0:	4140      	adcs	r0, r0
    f5b2:	eb41 0101 	adc.w	r1, r1, r1
    f5b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    f5ba:	f1a4 0401 	sub.w	r4, r4, #1
    f5be:	d1e9      	bne.n	f594 <__adddf3+0x10c>
    f5c0:	f091 0f00 	teq	r1, #0
    f5c4:	bf04      	itt	eq
    f5c6:	4601      	moveq	r1, r0
    f5c8:	2000      	moveq	r0, #0
    f5ca:	fab1 f381 	clz	r3, r1
    f5ce:	bf08      	it	eq
    f5d0:	3320      	addeq	r3, #32
    f5d2:	f1a3 030b 	sub.w	r3, r3, #11
    f5d6:	f1b3 0220 	subs.w	r2, r3, #32
    f5da:	da0c      	bge.n	f5f6 <__adddf3+0x16e>
    f5dc:	320c      	adds	r2, #12
    f5de:	dd08      	ble.n	f5f2 <__adddf3+0x16a>
    f5e0:	f102 0c14 	add.w	ip, r2, #20
    f5e4:	f1c2 020c 	rsb	r2, r2, #12
    f5e8:	fa01 f00c 	lsl.w	r0, r1, ip
    f5ec:	fa21 f102 	lsr.w	r1, r1, r2
    f5f0:	e00c      	b.n	f60c <__adddf3+0x184>
    f5f2:	f102 0214 	add.w	r2, r2, #20
    f5f6:	bfd8      	it	le
    f5f8:	f1c2 0c20 	rsble	ip, r2, #32
    f5fc:	fa01 f102 	lsl.w	r1, r1, r2
    f600:	fa20 fc0c 	lsr.w	ip, r0, ip
    f604:	bfdc      	itt	le
    f606:	ea41 010c 	orrle.w	r1, r1, ip
    f60a:	4090      	lslle	r0, r2
    f60c:	1ae4      	subs	r4, r4, r3
    f60e:	bfa2      	ittt	ge
    f610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    f614:	4329      	orrge	r1, r5
    f616:	bd30      	popge	{r4, r5, pc}
    f618:	ea6f 0404 	mvn.w	r4, r4
    f61c:	3c1f      	subs	r4, #31
    f61e:	da1c      	bge.n	f65a <__adddf3+0x1d2>
    f620:	340c      	adds	r4, #12
    f622:	dc0e      	bgt.n	f642 <__adddf3+0x1ba>
    f624:	f104 0414 	add.w	r4, r4, #20
    f628:	f1c4 0220 	rsb	r2, r4, #32
    f62c:	fa20 f004 	lsr.w	r0, r0, r4
    f630:	fa01 f302 	lsl.w	r3, r1, r2
    f634:	ea40 0003 	orr.w	r0, r0, r3
    f638:	fa21 f304 	lsr.w	r3, r1, r4
    f63c:	ea45 0103 	orr.w	r1, r5, r3
    f640:	bd30      	pop	{r4, r5, pc}
    f642:	f1c4 040c 	rsb	r4, r4, #12
    f646:	f1c4 0220 	rsb	r2, r4, #32
    f64a:	fa20 f002 	lsr.w	r0, r0, r2
    f64e:	fa01 f304 	lsl.w	r3, r1, r4
    f652:	ea40 0003 	orr.w	r0, r0, r3
    f656:	4629      	mov	r1, r5
    f658:	bd30      	pop	{r4, r5, pc}
    f65a:	fa21 f004 	lsr.w	r0, r1, r4
    f65e:	4629      	mov	r1, r5
    f660:	bd30      	pop	{r4, r5, pc}
    f662:	f094 0f00 	teq	r4, #0
    f666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    f66a:	bf06      	itte	eq
    f66c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    f670:	3401      	addeq	r4, #1
    f672:	3d01      	subne	r5, #1
    f674:	e74e      	b.n	f514 <__adddf3+0x8c>
    f676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    f67a:	bf18      	it	ne
    f67c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    f680:	d029      	beq.n	f6d6 <__adddf3+0x24e>
    f682:	ea94 0f05 	teq	r4, r5
    f686:	bf08      	it	eq
    f688:	ea90 0f02 	teqeq	r0, r2
    f68c:	d005      	beq.n	f69a <__adddf3+0x212>
    f68e:	ea54 0c00 	orrs.w	ip, r4, r0
    f692:	bf04      	itt	eq
    f694:	4619      	moveq	r1, r3
    f696:	4610      	moveq	r0, r2
    f698:	bd30      	pop	{r4, r5, pc}
    f69a:	ea91 0f03 	teq	r1, r3
    f69e:	bf1e      	ittt	ne
    f6a0:	2100      	movne	r1, #0
    f6a2:	2000      	movne	r0, #0
    f6a4:	bd30      	popne	{r4, r5, pc}
    f6a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    f6aa:	d105      	bne.n	f6b8 <__adddf3+0x230>
    f6ac:	0040      	lsls	r0, r0, #1
    f6ae:	4149      	adcs	r1, r1
    f6b0:	bf28      	it	cs
    f6b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    f6b6:	bd30      	pop	{r4, r5, pc}
    f6b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    f6bc:	bf3c      	itt	cc
    f6be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    f6c2:	bd30      	popcc	{r4, r5, pc}
    f6c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f6c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    f6cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    f6d0:	f04f 0000 	mov.w	r0, #0
    f6d4:	bd30      	pop	{r4, r5, pc}
    f6d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    f6da:	bf1a      	itte	ne
    f6dc:	4619      	movne	r1, r3
    f6de:	4610      	movne	r0, r2
    f6e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    f6e4:	bf1c      	itt	ne
    f6e6:	460b      	movne	r3, r1
    f6e8:	4602      	movne	r2, r0
    f6ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    f6ee:	bf06      	itte	eq
    f6f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    f6f4:	ea91 0f03 	teqeq	r1, r3
    f6f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    f6fc:	bd30      	pop	{r4, r5, pc}
    f6fe:	bf00      	nop

0000f700 <__aeabi_ui2d>:
    f700:	f090 0f00 	teq	r0, #0
    f704:	bf04      	itt	eq
    f706:	2100      	moveq	r1, #0
    f708:	4770      	bxeq	lr
    f70a:	b530      	push	{r4, r5, lr}
    f70c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    f710:	f104 0432 	add.w	r4, r4, #50	; 0x32
    f714:	f04f 0500 	mov.w	r5, #0
    f718:	f04f 0100 	mov.w	r1, #0
    f71c:	e750      	b.n	f5c0 <__adddf3+0x138>
    f71e:	bf00      	nop

0000f720 <__aeabi_i2d>:
    f720:	f090 0f00 	teq	r0, #0
    f724:	bf04      	itt	eq
    f726:	2100      	moveq	r1, #0
    f728:	4770      	bxeq	lr
    f72a:	b530      	push	{r4, r5, lr}
    f72c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    f730:	f104 0432 	add.w	r4, r4, #50	; 0x32
    f734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    f738:	bf48      	it	mi
    f73a:	4240      	negmi	r0, r0
    f73c:	f04f 0100 	mov.w	r1, #0
    f740:	e73e      	b.n	f5c0 <__adddf3+0x138>
    f742:	bf00      	nop

0000f744 <__aeabi_f2d>:
    f744:	0042      	lsls	r2, r0, #1
    f746:	ea4f 01e2 	mov.w	r1, r2, asr #3
    f74a:	ea4f 0131 	mov.w	r1, r1, rrx
    f74e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    f752:	bf1f      	itttt	ne
    f754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    f758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    f75c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    f760:	4770      	bxne	lr
    f762:	f092 0f00 	teq	r2, #0
    f766:	bf14      	ite	ne
    f768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    f76c:	4770      	bxeq	lr
    f76e:	b530      	push	{r4, r5, lr}
    f770:	f44f 7460 	mov.w	r4, #896	; 0x380
    f774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f77c:	e720      	b.n	f5c0 <__adddf3+0x138>
    f77e:	bf00      	nop

0000f780 <__aeabi_ul2d>:
    f780:	ea50 0201 	orrs.w	r2, r0, r1
    f784:	bf08      	it	eq
    f786:	4770      	bxeq	lr
    f788:	b530      	push	{r4, r5, lr}
    f78a:	f04f 0500 	mov.w	r5, #0
    f78e:	e00a      	b.n	f7a6 <__aeabi_l2d+0x16>

0000f790 <__aeabi_l2d>:
    f790:	ea50 0201 	orrs.w	r2, r0, r1
    f794:	bf08      	it	eq
    f796:	4770      	bxeq	lr
    f798:	b530      	push	{r4, r5, lr}
    f79a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    f79e:	d502      	bpl.n	f7a6 <__aeabi_l2d+0x16>
    f7a0:	4240      	negs	r0, r0
    f7a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f7a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    f7aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
    f7ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    f7b2:	f43f aedc 	beq.w	f56e <__adddf3+0xe6>
    f7b6:	f04f 0203 	mov.w	r2, #3
    f7ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    f7be:	bf18      	it	ne
    f7c0:	3203      	addne	r2, #3
    f7c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    f7c6:	bf18      	it	ne
    f7c8:	3203      	addne	r2, #3
    f7ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    f7ce:	f1c2 0320 	rsb	r3, r2, #32
    f7d2:	fa00 fc03 	lsl.w	ip, r0, r3
    f7d6:	fa20 f002 	lsr.w	r0, r0, r2
    f7da:	fa01 fe03 	lsl.w	lr, r1, r3
    f7de:	ea40 000e 	orr.w	r0, r0, lr
    f7e2:	fa21 f102 	lsr.w	r1, r1, r2
    f7e6:	4414      	add	r4, r2
    f7e8:	e6c1      	b.n	f56e <__adddf3+0xe6>
    f7ea:	bf00      	nop

0000f7ec <__aeabi_dmul>:
    f7ec:	b570      	push	{r4, r5, r6, lr}
    f7ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
    f7f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    f7f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    f7fa:	bf1d      	ittte	ne
    f7fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    f800:	ea94 0f0c 	teqne	r4, ip
    f804:	ea95 0f0c 	teqne	r5, ip
    f808:	f000 f8de 	bleq	f9c8 <__aeabi_dmul+0x1dc>
    f80c:	442c      	add	r4, r5
    f80e:	ea81 0603 	eor.w	r6, r1, r3
    f812:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    f816:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    f81a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    f81e:	bf18      	it	ne
    f820:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    f824:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f82c:	d038      	beq.n	f8a0 <__aeabi_dmul+0xb4>
    f82e:	fba0 ce02 	umull	ip, lr, r0, r2
    f832:	f04f 0500 	mov.w	r5, #0
    f836:	fbe1 e502 	umlal	lr, r5, r1, r2
    f83a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    f83e:	fbe0 e503 	umlal	lr, r5, r0, r3
    f842:	f04f 0600 	mov.w	r6, #0
    f846:	fbe1 5603 	umlal	r5, r6, r1, r3
    f84a:	f09c 0f00 	teq	ip, #0
    f84e:	bf18      	it	ne
    f850:	f04e 0e01 	orrne.w	lr, lr, #1
    f854:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    f858:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    f85c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    f860:	d204      	bcs.n	f86c <__aeabi_dmul+0x80>
    f862:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    f866:	416d      	adcs	r5, r5
    f868:	eb46 0606 	adc.w	r6, r6, r6
    f86c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    f870:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    f874:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    f878:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    f87c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    f880:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    f884:	bf88      	it	hi
    f886:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    f88a:	d81e      	bhi.n	f8ca <__aeabi_dmul+0xde>
    f88c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    f890:	bf08      	it	eq
    f892:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    f896:	f150 0000 	adcs.w	r0, r0, #0
    f89a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    f89e:	bd70      	pop	{r4, r5, r6, pc}
    f8a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    f8a4:	ea46 0101 	orr.w	r1, r6, r1
    f8a8:	ea40 0002 	orr.w	r0, r0, r2
    f8ac:	ea81 0103 	eor.w	r1, r1, r3
    f8b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    f8b4:	bfc2      	ittt	gt
    f8b6:	ebd4 050c 	rsbsgt	r5, r4, ip
    f8ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    f8be:	bd70      	popgt	{r4, r5, r6, pc}
    f8c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f8c4:	f04f 0e00 	mov.w	lr, #0
    f8c8:	3c01      	subs	r4, #1
    f8ca:	f300 80ab 	bgt.w	fa24 <__aeabi_dmul+0x238>
    f8ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
    f8d2:	bfde      	ittt	le
    f8d4:	2000      	movle	r0, #0
    f8d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    f8da:	bd70      	pople	{r4, r5, r6, pc}
    f8dc:	f1c4 0400 	rsb	r4, r4, #0
    f8e0:	3c20      	subs	r4, #32
    f8e2:	da35      	bge.n	f950 <__aeabi_dmul+0x164>
    f8e4:	340c      	adds	r4, #12
    f8e6:	dc1b      	bgt.n	f920 <__aeabi_dmul+0x134>
    f8e8:	f104 0414 	add.w	r4, r4, #20
    f8ec:	f1c4 0520 	rsb	r5, r4, #32
    f8f0:	fa00 f305 	lsl.w	r3, r0, r5
    f8f4:	fa20 f004 	lsr.w	r0, r0, r4
    f8f8:	fa01 f205 	lsl.w	r2, r1, r5
    f8fc:	ea40 0002 	orr.w	r0, r0, r2
    f900:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    f904:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    f90c:	fa21 f604 	lsr.w	r6, r1, r4
    f910:	eb42 0106 	adc.w	r1, r2, r6
    f914:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    f918:	bf08      	it	eq
    f91a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    f91e:	bd70      	pop	{r4, r5, r6, pc}
    f920:	f1c4 040c 	rsb	r4, r4, #12
    f924:	f1c4 0520 	rsb	r5, r4, #32
    f928:	fa00 f304 	lsl.w	r3, r0, r4
    f92c:	fa20 f005 	lsr.w	r0, r0, r5
    f930:	fa01 f204 	lsl.w	r2, r1, r4
    f934:	ea40 0002 	orr.w	r0, r0, r2
    f938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    f93c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    f940:	f141 0100 	adc.w	r1, r1, #0
    f944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    f948:	bf08      	it	eq
    f94a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    f94e:	bd70      	pop	{r4, r5, r6, pc}
    f950:	f1c4 0520 	rsb	r5, r4, #32
    f954:	fa00 f205 	lsl.w	r2, r0, r5
    f958:	ea4e 0e02 	orr.w	lr, lr, r2
    f95c:	fa20 f304 	lsr.w	r3, r0, r4
    f960:	fa01 f205 	lsl.w	r2, r1, r5
    f964:	ea43 0302 	orr.w	r3, r3, r2
    f968:	fa21 f004 	lsr.w	r0, r1, r4
    f96c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    f970:	fa21 f204 	lsr.w	r2, r1, r4
    f974:	ea20 0002 	bic.w	r0, r0, r2
    f978:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    f97c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    f980:	bf08      	it	eq
    f982:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    f986:	bd70      	pop	{r4, r5, r6, pc}
    f988:	f094 0f00 	teq	r4, #0
    f98c:	d10f      	bne.n	f9ae <__aeabi_dmul+0x1c2>
    f98e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    f992:	0040      	lsls	r0, r0, #1
    f994:	eb41 0101 	adc.w	r1, r1, r1
    f998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    f99c:	bf08      	it	eq
    f99e:	3c01      	subeq	r4, #1
    f9a0:	d0f7      	beq.n	f992 <__aeabi_dmul+0x1a6>
    f9a2:	ea41 0106 	orr.w	r1, r1, r6
    f9a6:	f095 0f00 	teq	r5, #0
    f9aa:	bf18      	it	ne
    f9ac:	4770      	bxne	lr
    f9ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    f9b2:	0052      	lsls	r2, r2, #1
    f9b4:	eb43 0303 	adc.w	r3, r3, r3
    f9b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    f9bc:	bf08      	it	eq
    f9be:	3d01      	subeq	r5, #1
    f9c0:	d0f7      	beq.n	f9b2 <__aeabi_dmul+0x1c6>
    f9c2:	ea43 0306 	orr.w	r3, r3, r6
    f9c6:	4770      	bx	lr
    f9c8:	ea94 0f0c 	teq	r4, ip
    f9cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    f9d0:	bf18      	it	ne
    f9d2:	ea95 0f0c 	teqne	r5, ip
    f9d6:	d00c      	beq.n	f9f2 <__aeabi_dmul+0x206>
    f9d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    f9dc:	bf18      	it	ne
    f9de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    f9e2:	d1d1      	bne.n	f988 <__aeabi_dmul+0x19c>
    f9e4:	ea81 0103 	eor.w	r1, r1, r3
    f9e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    f9ec:	f04f 0000 	mov.w	r0, #0
    f9f0:	bd70      	pop	{r4, r5, r6, pc}
    f9f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    f9f6:	bf06      	itte	eq
    f9f8:	4610      	moveq	r0, r2
    f9fa:	4619      	moveq	r1, r3
    f9fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fa00:	d019      	beq.n	fa36 <__aeabi_dmul+0x24a>
    fa02:	ea94 0f0c 	teq	r4, ip
    fa06:	d102      	bne.n	fa0e <__aeabi_dmul+0x222>
    fa08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    fa0c:	d113      	bne.n	fa36 <__aeabi_dmul+0x24a>
    fa0e:	ea95 0f0c 	teq	r5, ip
    fa12:	d105      	bne.n	fa20 <__aeabi_dmul+0x234>
    fa14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    fa18:	bf1c      	itt	ne
    fa1a:	4610      	movne	r0, r2
    fa1c:	4619      	movne	r1, r3
    fa1e:	d10a      	bne.n	fa36 <__aeabi_dmul+0x24a>
    fa20:	ea81 0103 	eor.w	r1, r1, r3
    fa24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fa28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    fa2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    fa30:	f04f 0000 	mov.w	r0, #0
    fa34:	bd70      	pop	{r4, r5, r6, pc}
    fa36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    fa3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    fa3e:	bd70      	pop	{r4, r5, r6, pc}

0000fa40 <__aeabi_ddiv>:
    fa40:	b570      	push	{r4, r5, r6, lr}
    fa42:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fa46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    fa4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    fa4e:	bf1d      	ittte	ne
    fa50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    fa54:	ea94 0f0c 	teqne	r4, ip
    fa58:	ea95 0f0c 	teqne	r5, ip
    fa5c:	f000 f8a7 	bleq	fbae <__aeabi_ddiv+0x16e>
    fa60:	eba4 0405 	sub.w	r4, r4, r5
    fa64:	ea81 0e03 	eor.w	lr, r1, r3
    fa68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    fa6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    fa70:	f000 8088 	beq.w	fb84 <__aeabi_ddiv+0x144>
    fa74:	ea4f 3303 	mov.w	r3, r3, lsl #12
    fa78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    fa7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    fa80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    fa84:	ea4f 2202 	mov.w	r2, r2, lsl #8
    fa88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    fa8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    fa90:	ea4f 2600 	mov.w	r6, r0, lsl #8
    fa94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    fa98:	429d      	cmp	r5, r3
    fa9a:	bf08      	it	eq
    fa9c:	4296      	cmpeq	r6, r2
    fa9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    faa2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    faa6:	d202      	bcs.n	faae <__aeabi_ddiv+0x6e>
    faa8:	085b      	lsrs	r3, r3, #1
    faaa:	ea4f 0232 	mov.w	r2, r2, rrx
    faae:	1ab6      	subs	r6, r6, r2
    fab0:	eb65 0503 	sbc.w	r5, r5, r3
    fab4:	085b      	lsrs	r3, r3, #1
    fab6:	ea4f 0232 	mov.w	r2, r2, rrx
    faba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    fabe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    fac2:	ebb6 0e02 	subs.w	lr, r6, r2
    fac6:	eb75 0e03 	sbcs.w	lr, r5, r3
    faca:	bf22      	ittt	cs
    facc:	1ab6      	subcs	r6, r6, r2
    face:	4675      	movcs	r5, lr
    fad0:	ea40 000c 	orrcs.w	r0, r0, ip
    fad4:	085b      	lsrs	r3, r3, #1
    fad6:	ea4f 0232 	mov.w	r2, r2, rrx
    fada:	ebb6 0e02 	subs.w	lr, r6, r2
    fade:	eb75 0e03 	sbcs.w	lr, r5, r3
    fae2:	bf22      	ittt	cs
    fae4:	1ab6      	subcs	r6, r6, r2
    fae6:	4675      	movcs	r5, lr
    fae8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    faec:	085b      	lsrs	r3, r3, #1
    faee:	ea4f 0232 	mov.w	r2, r2, rrx
    faf2:	ebb6 0e02 	subs.w	lr, r6, r2
    faf6:	eb75 0e03 	sbcs.w	lr, r5, r3
    fafa:	bf22      	ittt	cs
    fafc:	1ab6      	subcs	r6, r6, r2
    fafe:	4675      	movcs	r5, lr
    fb00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    fb04:	085b      	lsrs	r3, r3, #1
    fb06:	ea4f 0232 	mov.w	r2, r2, rrx
    fb0a:	ebb6 0e02 	subs.w	lr, r6, r2
    fb0e:	eb75 0e03 	sbcs.w	lr, r5, r3
    fb12:	bf22      	ittt	cs
    fb14:	1ab6      	subcs	r6, r6, r2
    fb16:	4675      	movcs	r5, lr
    fb18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    fb1c:	ea55 0e06 	orrs.w	lr, r5, r6
    fb20:	d018      	beq.n	fb54 <__aeabi_ddiv+0x114>
    fb22:	ea4f 1505 	mov.w	r5, r5, lsl #4
    fb26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    fb2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    fb2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    fb32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    fb36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    fb3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    fb3e:	d1c0      	bne.n	fac2 <__aeabi_ddiv+0x82>
    fb40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fb44:	d10b      	bne.n	fb5e <__aeabi_ddiv+0x11e>
    fb46:	ea41 0100 	orr.w	r1, r1, r0
    fb4a:	f04f 0000 	mov.w	r0, #0
    fb4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    fb52:	e7b6      	b.n	fac2 <__aeabi_ddiv+0x82>
    fb54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fb58:	bf04      	itt	eq
    fb5a:	4301      	orreq	r1, r0
    fb5c:	2000      	moveq	r0, #0
    fb5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    fb62:	bf88      	it	hi
    fb64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    fb68:	f63f aeaf 	bhi.w	f8ca <__aeabi_dmul+0xde>
    fb6c:	ebb5 0c03 	subs.w	ip, r5, r3
    fb70:	bf04      	itt	eq
    fb72:	ebb6 0c02 	subseq.w	ip, r6, r2
    fb76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    fb7a:	f150 0000 	adcs.w	r0, r0, #0
    fb7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    fb82:	bd70      	pop	{r4, r5, r6, pc}
    fb84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    fb88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    fb8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    fb90:	bfc2      	ittt	gt
    fb92:	ebd4 050c 	rsbsgt	r5, r4, ip
    fb96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    fb9a:	bd70      	popgt	{r4, r5, r6, pc}
    fb9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fba0:	f04f 0e00 	mov.w	lr, #0
    fba4:	3c01      	subs	r4, #1
    fba6:	e690      	b.n	f8ca <__aeabi_dmul+0xde>
    fba8:	ea45 0e06 	orr.w	lr, r5, r6
    fbac:	e68d      	b.n	f8ca <__aeabi_dmul+0xde>
    fbae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    fbb2:	ea94 0f0c 	teq	r4, ip
    fbb6:	bf08      	it	eq
    fbb8:	ea95 0f0c 	teqeq	r5, ip
    fbbc:	f43f af3b 	beq.w	fa36 <__aeabi_dmul+0x24a>
    fbc0:	ea94 0f0c 	teq	r4, ip
    fbc4:	d10a      	bne.n	fbdc <__aeabi_ddiv+0x19c>
    fbc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    fbca:	f47f af34 	bne.w	fa36 <__aeabi_dmul+0x24a>
    fbce:	ea95 0f0c 	teq	r5, ip
    fbd2:	f47f af25 	bne.w	fa20 <__aeabi_dmul+0x234>
    fbd6:	4610      	mov	r0, r2
    fbd8:	4619      	mov	r1, r3
    fbda:	e72c      	b.n	fa36 <__aeabi_dmul+0x24a>
    fbdc:	ea95 0f0c 	teq	r5, ip
    fbe0:	d106      	bne.n	fbf0 <__aeabi_ddiv+0x1b0>
    fbe2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    fbe6:	f43f aefd 	beq.w	f9e4 <__aeabi_dmul+0x1f8>
    fbea:	4610      	mov	r0, r2
    fbec:	4619      	mov	r1, r3
    fbee:	e722      	b.n	fa36 <__aeabi_dmul+0x24a>
    fbf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    fbf4:	bf18      	it	ne
    fbf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fbfa:	f47f aec5 	bne.w	f988 <__aeabi_dmul+0x19c>
    fbfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    fc02:	f47f af0d 	bne.w	fa20 <__aeabi_dmul+0x234>
    fc06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    fc0a:	f47f aeeb 	bne.w	f9e4 <__aeabi_dmul+0x1f8>
    fc0e:	e712      	b.n	fa36 <__aeabi_dmul+0x24a>

0000fc10 <__gedf2>:
    fc10:	f04f 3cff 	mov.w	ip, #4294967295
    fc14:	e006      	b.n	fc24 <__cmpdf2+0x4>
    fc16:	bf00      	nop

0000fc18 <__ledf2>:
    fc18:	f04f 0c01 	mov.w	ip, #1
    fc1c:	e002      	b.n	fc24 <__cmpdf2+0x4>
    fc1e:	bf00      	nop

0000fc20 <__cmpdf2>:
    fc20:	f04f 0c01 	mov.w	ip, #1
    fc24:	f84d cd04 	str.w	ip, [sp, #-4]!
    fc28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    fc2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    fc30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    fc34:	bf18      	it	ne
    fc36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    fc3a:	d01b      	beq.n	fc74 <__cmpdf2+0x54>
    fc3c:	b001      	add	sp, #4
    fc3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    fc42:	bf0c      	ite	eq
    fc44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    fc48:	ea91 0f03 	teqne	r1, r3
    fc4c:	bf02      	ittt	eq
    fc4e:	ea90 0f02 	teqeq	r0, r2
    fc52:	2000      	moveq	r0, #0
    fc54:	4770      	bxeq	lr
    fc56:	f110 0f00 	cmn.w	r0, #0
    fc5a:	ea91 0f03 	teq	r1, r3
    fc5e:	bf58      	it	pl
    fc60:	4299      	cmppl	r1, r3
    fc62:	bf08      	it	eq
    fc64:	4290      	cmpeq	r0, r2
    fc66:	bf2c      	ite	cs
    fc68:	17d8      	asrcs	r0, r3, #31
    fc6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    fc6e:	f040 0001 	orr.w	r0, r0, #1
    fc72:	4770      	bx	lr
    fc74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    fc78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    fc7c:	d102      	bne.n	fc84 <__cmpdf2+0x64>
    fc7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    fc82:	d107      	bne.n	fc94 <__cmpdf2+0x74>
    fc84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    fc88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    fc8c:	d1d6      	bne.n	fc3c <__cmpdf2+0x1c>
    fc8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    fc92:	d0d3      	beq.n	fc3c <__cmpdf2+0x1c>
    fc94:	f85d 0b04 	ldr.w	r0, [sp], #4
    fc98:	4770      	bx	lr
    fc9a:	bf00      	nop

0000fc9c <__aeabi_cdrcmple>:
    fc9c:	4684      	mov	ip, r0
    fc9e:	4610      	mov	r0, r2
    fca0:	4662      	mov	r2, ip
    fca2:	468c      	mov	ip, r1
    fca4:	4619      	mov	r1, r3
    fca6:	4663      	mov	r3, ip
    fca8:	e000      	b.n	fcac <__aeabi_cdcmpeq>
    fcaa:	bf00      	nop

0000fcac <__aeabi_cdcmpeq>:
    fcac:	b501      	push	{r0, lr}
    fcae:	f7ff ffb7 	bl	fc20 <__cmpdf2>
    fcb2:	2800      	cmp	r0, #0
    fcb4:	bf48      	it	mi
    fcb6:	f110 0f00 	cmnmi.w	r0, #0
    fcba:	bd01      	pop	{r0, pc}

0000fcbc <__aeabi_dcmpeq>:
    fcbc:	f84d ed08 	str.w	lr, [sp, #-8]!
    fcc0:	f7ff fff4 	bl	fcac <__aeabi_cdcmpeq>
    fcc4:	bf0c      	ite	eq
    fcc6:	2001      	moveq	r0, #1
    fcc8:	2000      	movne	r0, #0
    fcca:	f85d fb08 	ldr.w	pc, [sp], #8
    fcce:	bf00      	nop

0000fcd0 <__aeabi_dcmplt>:
    fcd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    fcd4:	f7ff ffea 	bl	fcac <__aeabi_cdcmpeq>
    fcd8:	bf34      	ite	cc
    fcda:	2001      	movcc	r0, #1
    fcdc:	2000      	movcs	r0, #0
    fcde:	f85d fb08 	ldr.w	pc, [sp], #8
    fce2:	bf00      	nop

0000fce4 <__aeabi_dcmple>:
    fce4:	f84d ed08 	str.w	lr, [sp, #-8]!
    fce8:	f7ff ffe0 	bl	fcac <__aeabi_cdcmpeq>
    fcec:	bf94      	ite	ls
    fcee:	2001      	movls	r0, #1
    fcf0:	2000      	movhi	r0, #0
    fcf2:	f85d fb08 	ldr.w	pc, [sp], #8
    fcf6:	bf00      	nop

0000fcf8 <__aeabi_dcmpge>:
    fcf8:	f84d ed08 	str.w	lr, [sp, #-8]!
    fcfc:	f7ff ffce 	bl	fc9c <__aeabi_cdrcmple>
    fd00:	bf94      	ite	ls
    fd02:	2001      	movls	r0, #1
    fd04:	2000      	movhi	r0, #0
    fd06:	f85d fb08 	ldr.w	pc, [sp], #8
    fd0a:	bf00      	nop

0000fd0c <__aeabi_dcmpgt>:
    fd0c:	f84d ed08 	str.w	lr, [sp, #-8]!
    fd10:	f7ff ffc4 	bl	fc9c <__aeabi_cdrcmple>
    fd14:	bf34      	ite	cc
    fd16:	2001      	movcc	r0, #1
    fd18:	2000      	movcs	r0, #0
    fd1a:	f85d fb08 	ldr.w	pc, [sp], #8
    fd1e:	bf00      	nop

0000fd20 <__aeabi_dcmpun>:
    fd20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    fd24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    fd28:	d102      	bne.n	fd30 <__aeabi_dcmpun+0x10>
    fd2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    fd2e:	d10a      	bne.n	fd46 <__aeabi_dcmpun+0x26>
    fd30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    fd34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    fd38:	d102      	bne.n	fd40 <__aeabi_dcmpun+0x20>
    fd3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    fd3e:	d102      	bne.n	fd46 <__aeabi_dcmpun+0x26>
    fd40:	f04f 0000 	mov.w	r0, #0
    fd44:	4770      	bx	lr
    fd46:	f04f 0001 	mov.w	r0, #1
    fd4a:	4770      	bx	lr

0000fd4c <__aeabi_d2uiz>:
    fd4c:	004a      	lsls	r2, r1, #1
    fd4e:	d211      	bcs.n	fd74 <__aeabi_d2uiz+0x28>
    fd50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    fd54:	d211      	bcs.n	fd7a <__aeabi_d2uiz+0x2e>
    fd56:	d50d      	bpl.n	fd74 <__aeabi_d2uiz+0x28>
    fd58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    fd5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    fd60:	d40e      	bmi.n	fd80 <__aeabi_d2uiz+0x34>
    fd62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    fd66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fd6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    fd6e:	fa23 f002 	lsr.w	r0, r3, r2
    fd72:	4770      	bx	lr
    fd74:	f04f 0000 	mov.w	r0, #0
    fd78:	4770      	bx	lr
    fd7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    fd7e:	d102      	bne.n	fd86 <__aeabi_d2uiz+0x3a>
    fd80:	f04f 30ff 	mov.w	r0, #4294967295
    fd84:	4770      	bx	lr
    fd86:	f04f 0000 	mov.w	r0, #0
    fd8a:	4770      	bx	lr

0000fd8c <__cxa_atexit>:
    fd8c:	4613      	mov	r3, r2
    fd8e:	460a      	mov	r2, r1
    fd90:	4601      	mov	r1, r0
    fd92:	2002      	movs	r0, #2
    fd94:	f000 b9a2 	b.w	100dc <__register_exitproc>

0000fd98 <__errno>:
    fd98:	4b01      	ldr	r3, [pc, #4]	; (fda0 <__errno+0x8>)
    fd9a:	6818      	ldr	r0, [r3, #0]
    fd9c:	4770      	bx	lr
    fd9e:	bf00      	nop
    fda0:	200001e8 	.word	0x200001e8

0000fda4 <ffs>:
    fda4:	b140      	cbz	r0, fdb8 <ffs+0x14>
    fda6:	2300      	movs	r3, #0
    fda8:	fa40 f103 	asr.w	r1, r0, r3
    fdac:	1c5a      	adds	r2, r3, #1
    fdae:	07c9      	lsls	r1, r1, #31
    fdb0:	4613      	mov	r3, r2
    fdb2:	d5f9      	bpl.n	fda8 <ffs+0x4>
    fdb4:	4610      	mov	r0, r2
    fdb6:	4770      	bx	lr
    fdb8:	4602      	mov	r2, r0
    fdba:	4610      	mov	r0, r2
    fdbc:	4770      	bx	lr
    fdbe:	bf00      	nop

0000fdc0 <__libc_init_array>:
    fdc0:	b570      	push	{r4, r5, r6, lr}
    fdc2:	4e0f      	ldr	r6, [pc, #60]	; (fe00 <__libc_init_array+0x40>)
    fdc4:	4d0f      	ldr	r5, [pc, #60]	; (fe04 <__libc_init_array+0x44>)
    fdc6:	1b76      	subs	r6, r6, r5
    fdc8:	10b6      	asrs	r6, r6, #2
    fdca:	bf18      	it	ne
    fdcc:	2400      	movne	r4, #0
    fdce:	d005      	beq.n	fddc <__libc_init_array+0x1c>
    fdd0:	3401      	adds	r4, #1
    fdd2:	f855 3b04 	ldr.w	r3, [r5], #4
    fdd6:	4798      	blx	r3
    fdd8:	42a6      	cmp	r6, r4
    fdda:	d1f9      	bne.n	fdd0 <__libc_init_array+0x10>
    fddc:	4e0a      	ldr	r6, [pc, #40]	; (fe08 <__libc_init_array+0x48>)
    fdde:	4d0b      	ldr	r5, [pc, #44]	; (fe0c <__libc_init_array+0x4c>)
    fde0:	1b76      	subs	r6, r6, r5
    fde2:	f001 f9fb 	bl	111dc <_init>
    fde6:	10b6      	asrs	r6, r6, #2
    fde8:	bf18      	it	ne
    fdea:	2400      	movne	r4, #0
    fdec:	d006      	beq.n	fdfc <__libc_init_array+0x3c>
    fdee:	3401      	adds	r4, #1
    fdf0:	f855 3b04 	ldr.w	r3, [r5], #4
    fdf4:	4798      	blx	r3
    fdf6:	42a6      	cmp	r6, r4
    fdf8:	d1f9      	bne.n	fdee <__libc_init_array+0x2e>
    fdfa:	bd70      	pop	{r4, r5, r6, pc}
    fdfc:	bd70      	pop	{r4, r5, r6, pc}
    fdfe:	bf00      	nop
    fe00:	000111e8 	.word	0x000111e8
    fe04:	000111e8 	.word	0x000111e8
    fe08:	00011208 	.word	0x00011208
    fe0c:	000111e8 	.word	0x000111e8

0000fe10 <memcpy>:
    fe10:	4684      	mov	ip, r0
    fe12:	ea41 0300 	orr.w	r3, r1, r0
    fe16:	f013 0303 	ands.w	r3, r3, #3
    fe1a:	d16d      	bne.n	fef8 <memcpy+0xe8>
    fe1c:	3a40      	subs	r2, #64	; 0x40
    fe1e:	d341      	bcc.n	fea4 <memcpy+0x94>
    fe20:	f851 3b04 	ldr.w	r3, [r1], #4
    fe24:	f840 3b04 	str.w	r3, [r0], #4
    fe28:	f851 3b04 	ldr.w	r3, [r1], #4
    fe2c:	f840 3b04 	str.w	r3, [r0], #4
    fe30:	f851 3b04 	ldr.w	r3, [r1], #4
    fe34:	f840 3b04 	str.w	r3, [r0], #4
    fe38:	f851 3b04 	ldr.w	r3, [r1], #4
    fe3c:	f840 3b04 	str.w	r3, [r0], #4
    fe40:	f851 3b04 	ldr.w	r3, [r1], #4
    fe44:	f840 3b04 	str.w	r3, [r0], #4
    fe48:	f851 3b04 	ldr.w	r3, [r1], #4
    fe4c:	f840 3b04 	str.w	r3, [r0], #4
    fe50:	f851 3b04 	ldr.w	r3, [r1], #4
    fe54:	f840 3b04 	str.w	r3, [r0], #4
    fe58:	f851 3b04 	ldr.w	r3, [r1], #4
    fe5c:	f840 3b04 	str.w	r3, [r0], #4
    fe60:	f851 3b04 	ldr.w	r3, [r1], #4
    fe64:	f840 3b04 	str.w	r3, [r0], #4
    fe68:	f851 3b04 	ldr.w	r3, [r1], #4
    fe6c:	f840 3b04 	str.w	r3, [r0], #4
    fe70:	f851 3b04 	ldr.w	r3, [r1], #4
    fe74:	f840 3b04 	str.w	r3, [r0], #4
    fe78:	f851 3b04 	ldr.w	r3, [r1], #4
    fe7c:	f840 3b04 	str.w	r3, [r0], #4
    fe80:	f851 3b04 	ldr.w	r3, [r1], #4
    fe84:	f840 3b04 	str.w	r3, [r0], #4
    fe88:	f851 3b04 	ldr.w	r3, [r1], #4
    fe8c:	f840 3b04 	str.w	r3, [r0], #4
    fe90:	f851 3b04 	ldr.w	r3, [r1], #4
    fe94:	f840 3b04 	str.w	r3, [r0], #4
    fe98:	f851 3b04 	ldr.w	r3, [r1], #4
    fe9c:	f840 3b04 	str.w	r3, [r0], #4
    fea0:	3a40      	subs	r2, #64	; 0x40
    fea2:	d2bd      	bcs.n	fe20 <memcpy+0x10>
    fea4:	3230      	adds	r2, #48	; 0x30
    fea6:	d311      	bcc.n	fecc <memcpy+0xbc>
    fea8:	f851 3b04 	ldr.w	r3, [r1], #4
    feac:	f840 3b04 	str.w	r3, [r0], #4
    feb0:	f851 3b04 	ldr.w	r3, [r1], #4
    feb4:	f840 3b04 	str.w	r3, [r0], #4
    feb8:	f851 3b04 	ldr.w	r3, [r1], #4
    febc:	f840 3b04 	str.w	r3, [r0], #4
    fec0:	f851 3b04 	ldr.w	r3, [r1], #4
    fec4:	f840 3b04 	str.w	r3, [r0], #4
    fec8:	3a10      	subs	r2, #16
    feca:	d2ed      	bcs.n	fea8 <memcpy+0x98>
    fecc:	320c      	adds	r2, #12
    fece:	d305      	bcc.n	fedc <memcpy+0xcc>
    fed0:	f851 3b04 	ldr.w	r3, [r1], #4
    fed4:	f840 3b04 	str.w	r3, [r0], #4
    fed8:	3a04      	subs	r2, #4
    feda:	d2f9      	bcs.n	fed0 <memcpy+0xc0>
    fedc:	3204      	adds	r2, #4
    fede:	d008      	beq.n	fef2 <memcpy+0xe2>
    fee0:	07d2      	lsls	r2, r2, #31
    fee2:	bf1c      	itt	ne
    fee4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fee8:	f800 3b01 	strbne.w	r3, [r0], #1
    feec:	d301      	bcc.n	fef2 <memcpy+0xe2>
    feee:	880b      	ldrh	r3, [r1, #0]
    fef0:	8003      	strh	r3, [r0, #0]
    fef2:	4660      	mov	r0, ip
    fef4:	4770      	bx	lr
    fef6:	bf00      	nop
    fef8:	2a08      	cmp	r2, #8
    fefa:	d313      	bcc.n	ff24 <memcpy+0x114>
    fefc:	078b      	lsls	r3, r1, #30
    fefe:	d08d      	beq.n	fe1c <memcpy+0xc>
    ff00:	f010 0303 	ands.w	r3, r0, #3
    ff04:	d08a      	beq.n	fe1c <memcpy+0xc>
    ff06:	f1c3 0304 	rsb	r3, r3, #4
    ff0a:	1ad2      	subs	r2, r2, r3
    ff0c:	07db      	lsls	r3, r3, #31
    ff0e:	bf1c      	itt	ne
    ff10:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ff14:	f800 3b01 	strbne.w	r3, [r0], #1
    ff18:	d380      	bcc.n	fe1c <memcpy+0xc>
    ff1a:	f831 3b02 	ldrh.w	r3, [r1], #2
    ff1e:	f820 3b02 	strh.w	r3, [r0], #2
    ff22:	e77b      	b.n	fe1c <memcpy+0xc>
    ff24:	3a04      	subs	r2, #4
    ff26:	d3d9      	bcc.n	fedc <memcpy+0xcc>
    ff28:	3a01      	subs	r2, #1
    ff2a:	f811 3b01 	ldrb.w	r3, [r1], #1
    ff2e:	f800 3b01 	strb.w	r3, [r0], #1
    ff32:	d2f9      	bcs.n	ff28 <memcpy+0x118>
    ff34:	780b      	ldrb	r3, [r1, #0]
    ff36:	7003      	strb	r3, [r0, #0]
    ff38:	784b      	ldrb	r3, [r1, #1]
    ff3a:	7043      	strb	r3, [r0, #1]
    ff3c:	788b      	ldrb	r3, [r1, #2]
    ff3e:	7083      	strb	r3, [r0, #2]
    ff40:	4660      	mov	r0, ip
    ff42:	4770      	bx	lr

0000ff44 <memset>:
    ff44:	b470      	push	{r4, r5, r6}
    ff46:	0786      	lsls	r6, r0, #30
    ff48:	d046      	beq.n	ffd8 <memset+0x94>
    ff4a:	1e54      	subs	r4, r2, #1
    ff4c:	2a00      	cmp	r2, #0
    ff4e:	d041      	beq.n	ffd4 <memset+0x90>
    ff50:	b2ca      	uxtb	r2, r1
    ff52:	4603      	mov	r3, r0
    ff54:	e002      	b.n	ff5c <memset+0x18>
    ff56:	f114 34ff 	adds.w	r4, r4, #4294967295
    ff5a:	d33b      	bcc.n	ffd4 <memset+0x90>
    ff5c:	f803 2b01 	strb.w	r2, [r3], #1
    ff60:	079d      	lsls	r5, r3, #30
    ff62:	d1f8      	bne.n	ff56 <memset+0x12>
    ff64:	2c03      	cmp	r4, #3
    ff66:	d92e      	bls.n	ffc6 <memset+0x82>
    ff68:	b2cd      	uxtb	r5, r1
    ff6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ff6e:	2c0f      	cmp	r4, #15
    ff70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ff74:	d919      	bls.n	ffaa <memset+0x66>
    ff76:	f103 0210 	add.w	r2, r3, #16
    ff7a:	4626      	mov	r6, r4
    ff7c:	3e10      	subs	r6, #16
    ff7e:	2e0f      	cmp	r6, #15
    ff80:	f842 5c10 	str.w	r5, [r2, #-16]
    ff84:	f842 5c0c 	str.w	r5, [r2, #-12]
    ff88:	f842 5c08 	str.w	r5, [r2, #-8]
    ff8c:	f842 5c04 	str.w	r5, [r2, #-4]
    ff90:	f102 0210 	add.w	r2, r2, #16
    ff94:	d8f2      	bhi.n	ff7c <memset+0x38>
    ff96:	f1a4 0210 	sub.w	r2, r4, #16
    ff9a:	f022 020f 	bic.w	r2, r2, #15
    ff9e:	f004 040f 	and.w	r4, r4, #15
    ffa2:	3210      	adds	r2, #16
    ffa4:	2c03      	cmp	r4, #3
    ffa6:	4413      	add	r3, r2
    ffa8:	d90d      	bls.n	ffc6 <memset+0x82>
    ffaa:	461e      	mov	r6, r3
    ffac:	4622      	mov	r2, r4
    ffae:	3a04      	subs	r2, #4
    ffb0:	2a03      	cmp	r2, #3
    ffb2:	f846 5b04 	str.w	r5, [r6], #4
    ffb6:	d8fa      	bhi.n	ffae <memset+0x6a>
    ffb8:	1f22      	subs	r2, r4, #4
    ffba:	f022 0203 	bic.w	r2, r2, #3
    ffbe:	3204      	adds	r2, #4
    ffc0:	4413      	add	r3, r2
    ffc2:	f004 0403 	and.w	r4, r4, #3
    ffc6:	b12c      	cbz	r4, ffd4 <memset+0x90>
    ffc8:	b2c9      	uxtb	r1, r1
    ffca:	441c      	add	r4, r3
    ffcc:	f803 1b01 	strb.w	r1, [r3], #1
    ffd0:	429c      	cmp	r4, r3
    ffd2:	d1fb      	bne.n	ffcc <memset+0x88>
    ffd4:	bc70      	pop	{r4, r5, r6}
    ffd6:	4770      	bx	lr
    ffd8:	4614      	mov	r4, r2
    ffda:	4603      	mov	r3, r0
    ffdc:	e7c2      	b.n	ff64 <memset+0x20>
    ffde:	bf00      	nop
	...

00010000 <strlen>:
   10000:	f890 f000 	pld	[r0]
   10004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10008:	f020 0107 	bic.w	r1, r0, #7
   1000c:	f06f 0c00 	mvn.w	ip, #0
   10010:	f010 0407 	ands.w	r4, r0, #7
   10014:	f891 f020 	pld	[r1, #32]
   10018:	f040 8049 	bne.w	100ae <strlen+0xae>
   1001c:	f04f 0400 	mov.w	r4, #0
   10020:	f06f 0007 	mvn.w	r0, #7
   10024:	e9d1 2300 	ldrd	r2, r3, [r1]
   10028:	f891 f040 	pld	[r1, #64]	; 0x40
   1002c:	f100 0008 	add.w	r0, r0, #8
   10030:	fa82 f24c 	uadd8	r2, r2, ip
   10034:	faa4 f28c 	sel	r2, r4, ip
   10038:	fa83 f34c 	uadd8	r3, r3, ip
   1003c:	faa2 f38c 	sel	r3, r2, ip
   10040:	bb4b      	cbnz	r3, 10096 <strlen+0x96>
   10042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10046:	fa82 f24c 	uadd8	r2, r2, ip
   1004a:	f100 0008 	add.w	r0, r0, #8
   1004e:	faa4 f28c 	sel	r2, r4, ip
   10052:	fa83 f34c 	uadd8	r3, r3, ip
   10056:	faa2 f38c 	sel	r3, r2, ip
   1005a:	b9e3      	cbnz	r3, 10096 <strlen+0x96>
   1005c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10060:	fa82 f24c 	uadd8	r2, r2, ip
   10064:	f100 0008 	add.w	r0, r0, #8
   10068:	faa4 f28c 	sel	r2, r4, ip
   1006c:	fa83 f34c 	uadd8	r3, r3, ip
   10070:	faa2 f38c 	sel	r3, r2, ip
   10074:	b97b      	cbnz	r3, 10096 <strlen+0x96>
   10076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1007a:	f101 0120 	add.w	r1, r1, #32
   1007e:	fa82 f24c 	uadd8	r2, r2, ip
   10082:	f100 0008 	add.w	r0, r0, #8
   10086:	faa4 f28c 	sel	r2, r4, ip
   1008a:	fa83 f34c 	uadd8	r3, r3, ip
   1008e:	faa2 f38c 	sel	r3, r2, ip
   10092:	2b00      	cmp	r3, #0
   10094:	d0c6      	beq.n	10024 <strlen+0x24>
   10096:	2a00      	cmp	r2, #0
   10098:	bf04      	itt	eq
   1009a:	3004      	addeq	r0, #4
   1009c:	461a      	moveq	r2, r3
   1009e:	ba12      	rev	r2, r2
   100a0:	fab2 f282 	clz	r2, r2
   100a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   100a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   100ac:	4770      	bx	lr
   100ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   100b2:	f004 0503 	and.w	r5, r4, #3
   100b6:	f1c4 0000 	rsb	r0, r4, #0
   100ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   100be:	f014 0f04 	tst.w	r4, #4
   100c2:	f891 f040 	pld	[r1, #64]	; 0x40
   100c6:	fa0c f505 	lsl.w	r5, ip, r5
   100ca:	ea62 0205 	orn	r2, r2, r5
   100ce:	bf1c      	itt	ne
   100d0:	ea63 0305 	ornne	r3, r3, r5
   100d4:	4662      	movne	r2, ip
   100d6:	f04f 0400 	mov.w	r4, #0
   100da:	e7a9      	b.n	10030 <strlen+0x30>

000100dc <__register_exitproc>:
   100dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   100e0:	4d2c      	ldr	r5, [pc, #176]	; (10194 <__register_exitproc+0xb8>)
   100e2:	4606      	mov	r6, r0
   100e4:	6828      	ldr	r0, [r5, #0]
   100e6:	4698      	mov	r8, r3
   100e8:	460f      	mov	r7, r1
   100ea:	4691      	mov	r9, r2
   100ec:	f000 f882 	bl	101f4 <__retarget_lock_acquire_recursive>
   100f0:	4b29      	ldr	r3, [pc, #164]	; (10198 <__register_exitproc+0xbc>)
   100f2:	681c      	ldr	r4, [r3, #0]
   100f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   100f8:	2b00      	cmp	r3, #0
   100fa:	d03e      	beq.n	1017a <__register_exitproc+0x9e>
   100fc:	685a      	ldr	r2, [r3, #4]
   100fe:	2a1f      	cmp	r2, #31
   10100:	dc1c      	bgt.n	1013c <__register_exitproc+0x60>
   10102:	f102 0e01 	add.w	lr, r2, #1
   10106:	b176      	cbz	r6, 10126 <__register_exitproc+0x4a>
   10108:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1010c:	2401      	movs	r4, #1
   1010e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10112:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10116:	4094      	lsls	r4, r2
   10118:	4320      	orrs	r0, r4
   1011a:	2e02      	cmp	r6, #2
   1011c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10120:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10124:	d023      	beq.n	1016e <__register_exitproc+0x92>
   10126:	3202      	adds	r2, #2
   10128:	f8c3 e004 	str.w	lr, [r3, #4]
   1012c:	6828      	ldr	r0, [r5, #0]
   1012e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10132:	f000 f861 	bl	101f8 <__retarget_lock_release_recursive>
   10136:	2000      	movs	r0, #0
   10138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1013c:	4b17      	ldr	r3, [pc, #92]	; (1019c <__register_exitproc+0xc0>)
   1013e:	b30b      	cbz	r3, 10184 <__register_exitproc+0xa8>
   10140:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10144:	f7fd f9d4 	bl	d4f0 <malloc>
   10148:	4603      	mov	r3, r0
   1014a:	b1d8      	cbz	r0, 10184 <__register_exitproc+0xa8>
   1014c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10150:	6002      	str	r2, [r0, #0]
   10152:	2100      	movs	r1, #0
   10154:	6041      	str	r1, [r0, #4]
   10156:	460a      	mov	r2, r1
   10158:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1015c:	f04f 0e01 	mov.w	lr, #1
   10160:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10164:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10168:	2e00      	cmp	r6, #0
   1016a:	d0dc      	beq.n	10126 <__register_exitproc+0x4a>
   1016c:	e7cc      	b.n	10108 <__register_exitproc+0x2c>
   1016e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10172:	430c      	orrs	r4, r1
   10174:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10178:	e7d5      	b.n	10126 <__register_exitproc+0x4a>
   1017a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1017e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10182:	e7bb      	b.n	100fc <__register_exitproc+0x20>
   10184:	6828      	ldr	r0, [r5, #0]
   10186:	f000 f837 	bl	101f8 <__retarget_lock_release_recursive>
   1018a:	f04f 30ff 	mov.w	r0, #4294967295
   1018e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10192:	bf00      	nop
   10194:	20000618 	.word	0x20000618
   10198:	000111d8 	.word	0x000111d8
   1019c:	0000d4f1 	.word	0x0000d4f1

000101a0 <register_fini>:
   101a0:	4b02      	ldr	r3, [pc, #8]	; (101ac <register_fini+0xc>)
   101a2:	b113      	cbz	r3, 101aa <register_fini+0xa>
   101a4:	4802      	ldr	r0, [pc, #8]	; (101b0 <register_fini+0x10>)
   101a6:	f000 b805 	b.w	101b4 <atexit>
   101aa:	4770      	bx	lr
   101ac:	00000000 	.word	0x00000000
   101b0:	000101c1 	.word	0x000101c1

000101b4 <atexit>:
   101b4:	2300      	movs	r3, #0
   101b6:	4601      	mov	r1, r0
   101b8:	461a      	mov	r2, r3
   101ba:	4618      	mov	r0, r3
   101bc:	f7ff bf8e 	b.w	100dc <__register_exitproc>

000101c0 <__libc_fini_array>:
   101c0:	b538      	push	{r3, r4, r5, lr}
   101c2:	4c0a      	ldr	r4, [pc, #40]	; (101ec <__libc_fini_array+0x2c>)
   101c4:	4d0a      	ldr	r5, [pc, #40]	; (101f0 <__libc_fini_array+0x30>)
   101c6:	1b64      	subs	r4, r4, r5
   101c8:	10a4      	asrs	r4, r4, #2
   101ca:	d00a      	beq.n	101e2 <__libc_fini_array+0x22>
   101cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   101d0:	3b01      	subs	r3, #1
   101d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   101d6:	3c01      	subs	r4, #1
   101d8:	f855 3904 	ldr.w	r3, [r5], #-4
   101dc:	4798      	blx	r3
   101de:	2c00      	cmp	r4, #0
   101e0:	d1f9      	bne.n	101d6 <__libc_fini_array+0x16>
   101e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   101e6:	f001 b80f 	b.w	11208 <_fini>
   101ea:	bf00      	nop
   101ec:	00011218 	.word	0x00011218
   101f0:	00011214 	.word	0x00011214

000101f4 <__retarget_lock_acquire_recursive>:
   101f4:	4770      	bx	lr
   101f6:	bf00      	nop

000101f8 <__retarget_lock_release_recursive>:
   101f8:	4770      	bx	lr
   101fa:	bf00      	nop

000101fc <_ZTV17ARINC_Conversions>:
	...
   10204:	03bd 0000 03d9 0000                         ........

0001020c <_ZTV15ARINC_Interface>:
   1020c:	02bc 0000 02ac 0000 0000 0000 0000 0000     ................
   1021c:	0591 0000 0601 0000 0635 0000 0000 0000     ........5.......
   1022c:	0000 0000 fd54 ffff 0000 0000 03bd 0000     ....T...........
   1023c:	03d9 0000 fd44 ffff fd44 ffff fff0 ffff     ....D...D.......
   1024c:	fd44 ffff 0000 0000 05ed 0000 0621 0000     D...........!...
   1025c:	066d 0000                                   m...

00010260 <_ZTT15ARINC_Interface>:
   10260:	021c 0001 02c0 0001 02d8 0001 02f4 0001     ................
   10270:	0238 0001 0254 0001 028c 0001 02a8 0001     8...T...........

00010280 <_ZTC15ARINC_Interface700_14Protocol_Class>:
   10280:	fff0 ffff 0000 0000 0000 0000 0000 0000     ................
   10290:	0000 0000 d517 0000 0000 0000 0000 0000     ................
   102a0:	0010 0000 0000 0000 03bd 0000 03d9 0000     ................

000102b0 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   102b0:	02bc 0000 02ac 0000 0000 0000 0000 0000     ................
	...
   102d0:	fd54 ffff 0000 0000 03bd 0000 03d9 0000     T...............
   102e0:	0000 0000 fd44 ffff fff0 ffff fd44 ffff     ....D.......D...
	...
   102fc:	d517 0000 0d0a 4948 332d 3935 2033 6166     ......HI-3593 fa
   1030c:	6c69 6465 7420 206f 6e49 7469 6c69 7a69     iled to Initiliz
   1031c:	0a65 000d 0d0a 2d0a 2d2d 6820 3273 4120     e......--- hs2 A
   1032c:	4952 434e 4920 746e 7265 6166 6563 2020     RINC Interface  
   1033c:	2d2d 2d2d 0d0a 0000 0a72 2d2d 212d 6f67     ----....r.---!go
   1034c:	2074 656d 7373 6761 2165 2d2d 2d2d 0000     t message!----..
   1035c:	0d0a 2d0a 2d2d 4320 6e6f 6f73 656c 4320     ...--- Console C
   1036c:	6d6f 616d 646e 2073 6548 706c 2d20 2d2d     ommands Help ---
   1037c:	0000 0000 2020 2050 203d 6150 6972 7974     ....  P = Parity
   1038c:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   1039c:	2020 2054 203d 4654 494c 2050 5420 676f       T = TFLIP  Tog
   103ac:	6c67 2065 6e6f 6f2f 6666 0000 2020 2052     gle on/off..  R 
   103bc:	203d 4652 494c 2050 5420 676f 6c67 2065     = RFLIP  Toggle 
   103cc:	6e6f 6f2f 6666 0000 2020 2053 203d 4453     on/off..  S = SD
   103dc:	4e4f 202c 4453 2c39 5320 3144 2030 6f54     ON, SD9, SD10 To
   103ec:	6767 656c 6f20 2f6e 666f 0066 2020 2048     ggle on/off.  H 
   103fc:	203d 6854 7369 4820 6c65 2070 6150 6567     = This Help Page
   1040c:	0000 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   1041c:	203d 6944 7073 616c 2079 7453 7461 7375     = Display Status
   1042c:	6120 646e 4320 6e6f 7274 6c6f 7220 6765      and Control reg
   1043c:	0073 0000 2020 2049 203d 6e49 7263 6d65     s...  I = Increm
   1044c:	6e65 2074 654d 7373 6761 2065 6e61 2064     ent Message and 
   1045c:	7254 6e61 6d73 7469 202e 7845 6c70 726f     Transmit. Explor
   1046c:	7265 4d20 646f 2065 2d20 4f20 4c4e 2159     er Mode  - ONLY!
   1047c:	0000 0000 2020 204d 203d 6e45 6574 2072     ....  M = Enter 
   1048c:	7543 7473 6d6f 4d20 7365 6173 6567 202e     Custom Message. 
   1049c:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   104ac:	4f20 4c4e 2159 0000 2020 4e45 4554 3d52      ONLY!..  ENTER=
   104bc:	5420 6172 736e 696d 2074 656e 7478 6d20      Transmit next m
   104cc:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   104dc:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   104ec:	7830 0020 7826 3030 2030 0000 614c 6562     0x .&x000 ..Labe
   104fc:	736c 2020 2030 202d 3336 203a 0020 0000     ls  0 - 63:  ...
   1050c:	0d0a 614c 6562 736c 2020 3436 312d 3732     ..Labels  64-127
   1051c:	203a 0020 0d0a 614c 6562 736c 3120 3832     :  ...Labels 128
   1052c:	312d 3139 203a 0020 0d0a 614c 6562 736c     -191:  ...Labels
   1053c:	3120 3239 322d 3535 203a 0020 0d0a 614c      192-255:  ...La
   1054c:	6562 736c 2020 2030 202d 3336 203a 0020     bels  0 - 63:  .
   1055c:	0d0a 543e 2058 2020 4420 7461 3a61 0000     ..>TX    Data:..
   1056c:	614c 6562 3a6c 0000 7420 6172 736e 696d     Label:.. transmi
   1057c:	7474 6e69 2e67 2e2e 0000 0000 5420 6172     tting....... Tra
   1058c:	736e 696d 7474 6465 0021 0000 6552 2d63     nsmitted!...Rec-
   1059c:	2031 6144 6174 003a 4c50 2d31 2031 6144     1 Data:.PL1-1 Da
   105ac:	6174 003a 614d 6374 3a68 0000 4c50 2d31     ta:.Match:..PL1-
   105bc:	2032 6144 6174 003a 4c50 2d31 2033 6144     2 Data:.PL1-3 Da
   105cc:	6174 003a 6552 2d63 2032 6144 6174 003a     ta:.Rec-2 Data:.
   105dc:	4c50 2d32 2031 6144 6174 003a 4c50 2d32     PL2-1 Data:.PL2-
   105ec:	2032 6144 6174 003a 4c50 2d32 2033 6144     2 Data:.PL2-3 Da
   105fc:	6174 003a 5854 5020 7261 7469 2079 5241     ta:.TX Parity AR
   1060c:	4e49 5f43 4e4f 0d0a 003e 0000 5854 5020     INC_ON..>...TX P
   1061c:	7261 7469 2079 5241 4e49 5f43 464f 0a46     arity ARINC_OFF.
   1062c:	3e0d 0000 4654 494c 2050 6553 0a74 3e0d     .>..TFLIP Set..>
   1063c:	0000 0000 4654 494c 2050 6c43 6165 6572     ....TFLIP Cleare
   1064c:	0a64 3e0d 0000 0000 4552 2d43 2031 4652     d..>....REC-1 RF
   1065c:	494c 2050 6553 0a74 3e0d 0000 4552 2d43     LIP Set..>..REC-
   1066c:	2031 4652 494c 2050 6c43 6165 6572 0a64     1 RFLIP Cleared.
   1067c:	3e0d 0000 4552 2d43 2032 4652 494c 2050     .>..REC-2 RFLIP 
   1068c:	6553 0a74 3e0d 0000 4552 2d43 2032 4652     Set..>..REC-2 RF
   1069c:	494c 2050 6c43 6165 6572 0a64 3e0d 0000     LIP Cleared..>..
   106ac:	4552 2d43 2031 4453 4e4f 532c 3944 6120     REC-1 SDON,SD9 a
   106bc:	646e 5320 3144 2030 6553 0a74 3e0d 0000     nd SD10 Set..>..
   106cc:	4552 2d43 2031 4453 4e4f 532c 3944 6120     REC-1 SDON,SD9 a
   106dc:	646e 5320 3144 2030 6c43 6165 6572 0a64     nd SD10 Cleared.
   106ec:	3e0d 0000 4552 2d43 2032 4453 4e4f 532c     .>..REC-2 SDON,S
   106fc:	3944 6120 646e 5320 3144 2030 6553 0a74     D9 and SD10 Set.
   1070c:	3e0d 0000 4552 2d43 2032 4453 4e4f 532c     .>..REC-2 SDON,S
   1071c:	3944 6120 646e 5320 3144 2030 6c43 6165     D9 and SD10 Clea
   1072c:	6572 0a64 3e0d 0000 0d0a 500a 6572 7373     red..>.....Press
   1073c:	5320 6170 6563 4220 7261 6f20 2072 5753      Space Bar or SW
   1074c:	342d 7420 206f 6572 7573 656d 0000 0000     -4 to resume....
   1075c:	0d0a 7254 6e61 6d73 7469 2620 5220 6365     ..Transmit & Rec
   1076c:	6965 6576 5720 7469 2068 614c 6562 736c     eive With Labels
   1077c:	4d20 646f 0a65 000d 0d0a 4553 464c 542d      Mode.....SELF-T
   1078c:	5345 2c54 4920 746e 7265 616e 206c 6944     EST, Internal Di
   1079c:	6967 6174 206c 6f4c 706f 622d 6361 2c6b     gital Loop-back,
   107ac:	4e20 206f 6164 6174 6920 2073 7274 6e61      No data is tran
   107bc:	6d73 7469 6574 2064 7865 6574 6e72 6c61     smitted external
   107cc:	796c 0d0a 0000 0000 0d0a 6f20 206e 6154     ly........ on Ta
   107dc:	6c62 2065 616c 6562 736c 6120 6572 4520     ble labels are E
   107ec:	616e 6c62 6465 0000 0d0a 500a 6572 7373     nabled.....Press
   107fc:	5320 2d57 2031 6f74 7320 6174 7472 6920      SW-1 to start i
   1080c:	696e 6974 6c61 796c 0d0a 000a 2d2d 202d     nitially....--- 
   1081c:	7542 7474 6e6f 4320 6d6f 616d 646e 2073     Button Commands 
   1082c:	2d2d 0a2d 000d 0000 2020 7053 6361 2065     ---.....  Space 
   1083c:	6142 2072 6f74 4420 7369 6c70 7961 5320     Bar to Display S
   1084c:	6174 7574 2073 6e61 2064 6f43 746e 6f72     tatus and Contro
   1085c:	206c 6552 6967 7473 7265 0a73 000d 0000     l Registers.....
   1086c:	2020 2070 6f74 5020 7561 6573 0d0a 0000       p to Pause....
   1087c:	2020 206d 6f74 4420 7369 6c70 7961 4c20       m to Display L
   1088c:	6261 6c65 4d20 6d65 726f 0079 0d0a 003e     abel Memory...>.
   1089c:	0d0a 7254 6e61 6d73 7469 6974 676e 0d0a     ..Transmitting..
   108ac:	003e 0000 0d0a 4948 332d 3935 2033 7453     >.....HI-3593 St
   108bc:	7461 7375 202c 6f43 746e 6f72 206c 6552     atus, Control Re
   108cc:	6967 7473 7265 0d73 000a 0000 0d0a 2009     gisters........ 
   108dc:	2a20 2a2a 2a2a 5020 6572 7373 2020 7073      ***** Press  sp
   108ec:	6361 6265 7261 7420 206f 6f63 746e 6e69     acebar to contin
   108fc:	6575 2a20 2a2a 2a2a 002a 0000 0a0a 540d     ue ******......T
   1090c:	6172 736e 696d 2074 6150 7375 6465 0d0a     ransmit Paused..
   1091c:	0000 0000 0d0a 7250 7365 2073 4c4f 4445     ......Press OLED
   1092c:	425f 5455 4f54 2d4e 2032 6f74 7420 6172     _BUTTON-2 to tra
   1093c:	736e 696d 2074 6e6f 2065 7266 6d61 2065     nsmit one frame 
   1094c:	6e61 2064 6170 7375 0a65 000d 0d0a 7250     and pause.....Pr
   1095c:	7365 2073 4c4f 4445 425f 5455 4f54 2d4e     ess OLED_BUTTON-
   1096c:	2033 6f74 5220 7365 6d75 0a65 000d 0000     3 to Resume.....
   1097c:	0d0a 7254 6e61 6d73 7469 6574 2072 6552     ..Transmitter Re
   1098c:	7573 656d 2e64 2e2e 0d0a 0000 0d0a 6552     sumed.........Re
   1099c:	6563 7669 7265 3120 4c20 6261 6c65 0a73     ceiver 1 Labels.
   109ac:	000d 0000 0d0a 6552 6563 7669 7265 3220     ......Receiver 2
   109bc:	4c20 6261 6c65 0a73 000d 0000 0d0a 7254      Labels.......Tr
   109cc:	6e61 6d73 7469 2620 5220 6365 6965 6576     ansmit & Receive
   109dc:	4520 6863 206f 6f4d 6564 0d0a 0000 0000      Echo Mode......
   109ec:	0d0a 6c53 776f 5320 6570 6465 0000 0000     ..Slow Speed....
   109fc:	0d0a 6146 7473 5320 6570 6465 0000 0000     ..Fast Speed....
   10a0c:	0d0a 7254 6e61 6d73 7469 6574 2072 6150     ..Transmitter Pa
   10a1c:	6972 7974 4520 616e 6c62 6465 0000 0000     rity Enabled....
   10a2c:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   10a3c:	7420 206f 6e69 7469 6c69 7a69 0a65 000d      to initilize...
   10a4c:	0d0a 6154 6c62 2065 616c 6562 736c 6120     ..Table labels a
   10a5c:	6572 4520 616e 6c62 6465 0000 0d0a 7845     re Enabled....Ex
   10a6c:	6c70 726f 7265 4d20 646f 0a65 000d 0000     plorer Mode.....
   10a7c:	0d0a 6c20 6261 6c65 2073 6154 6c62 2065     .. labels Table 
   10a8c:	7369 4520 616e 6c62 6465 0000 0d0a 2d0a     is Enabled.....-
   10a9c:	2d2d 4220 7475 6f74 206e 6f43 6d6d 6e61     -- Button Comman
   10aac:	7364 2d20 2d2d 0000 0d0a 2020 7073 6361     ds ---....  spac
   10abc:	6265 7261 7420 206f 6944 7073 616c 2079     ebar to Display 
   10acc:	7453 7461 7375 6120 646e 4320 6e6f 7274     Status and Contr
   10adc:	6c6f 5220 6765 7369 6574 7372 0000 0000     ol Registers....
   10aec:	0d0a 2020 4c4f 4445 422d 5455 4f54 324e     ..  OLED-BUTTON2
   10afc:	7420 6172 736e 696d 2074 6e6f 2065 656d      transmit one me
   10b0c:	7373 6761 2065 7266 6d6f 7420 6172 736e     ssage from trans
   10b1c:	696d 2074 7562 6666 7265 0000 0d0a 2020     mit buffer....  
   10b2c:	204c 6f74 5020 6972 746e 4c20 6261 6c65     L to Print Label
   10b3c:	4d20 6d65 726f 0a79 000d 0000 0d0a 7250      Memory.......Pr
   10b4c:	7365 2073 4e45 4554 2052 6f74 5420 6172     ess ENTER to Tra
   10b5c:	736e 696d 2074 726f 7520 6573 7420 6568     nsmit or use the
   10b6c:	2820 294d 6320 6d6f 616d 646e 7420 206f      (M) command to 
   10b7c:	6e65 6574 2072 2061 7563 7473 6d6f 6d20     enter a custom m
   10b8c:	7365 6173 6567 0000 7250 7365 2073 5753     essage..Press SW
   10b9c:	2034 726f 7320 6170 6563 6162 2072 6f74     4 or spacebar to
   10bac:	6320 6e6f 6974 756e 0065 0000 7250 7365      continue...Pres
   10bbc:	2073 7073 6361 6265 7261 7420 206f 6f63     s spacebar to co
   10bcc:	746e 6e69 6575 0000 0d0a 433e 6d6f 616d     ntinue....>Comma
   10bdc:	646e 4d20 0000 0000 0d0a 6e45 6574 2072     nd M......Enter 
   10bec:	2033 7962 6574 2073 202b 414c 4542 204c     3 bytes + LABEL 
   10bfc:	6f74 5420 6172 736e 696d 2074 6f66 6c6c     to Transmit foll
   10c0c:	776f 6465 6220 2079 4e45 4554 0a52 000d     owed by ENTER...
   10c1c:	0d0a 6f54 5420 6172 736e 696d 2c74 6520     ..To Transmit, e
   10c2c:	746e 7265 3320 6220 7479 7365 6620 6c6f     nter 3 bytes fol
   10c3c:	6f6c 6577 2064 7962 6120 4c20 6261 6c65     lowed by a Label
   10c4c:	6220 7479 2065 6f66 6c6c 776f 6465 6220      byte followed b
   10c5c:	2079 4e45 4554 0a52 000d 0000 6f46 6d72     y ENTER.....Form
   10c6c:	7461 203a 6942 7374 3233 322d 2c35 4220     at: Bits32-25, B
   10c7c:	7469 3273 2d34 3731 202c 6942 7374 3631     its24-17, Bits16
   10c8c:	392d 202c 414c 4542 0a4c 3a0d 0000 0000     -9, LABEL..:....
   10c9c:	7845 6d61 6c70 3a65 3020 2031 3332 3420     Example: 01 23 4
   10cac:	2035 3736 4520 544e 5245 0d0a 003a 0000     5 67 ENTER..:...
   10cbc:	5020 6572 7373 5220 5445 5255 004e 0000      Press RETURN...
   10ccc:	5420 6172 736e 696d 6974 676e 2e2e 002e      Transmiting....
   10cdc:	5420 6172 736e 696d 6574 2164 0000 0000      Transmited!....
   10cec:	6f43 6d6d 6e61 2064 3a49 4920 636e 6572     Command I: Incre
   10cfc:	656d 746e 6420 7461 0a61 3e0d 0000 0000     ment data..>....

00010d0c <_ZL12LabelArray_1>:
   10d0c:	5d1d c121 efdd 9616 9f0d 3f5f ffdf bd00     .]!......._?....
	...
   10d2c:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   10d3c:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   10d4c:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   10d5c:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   10d6c:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   10d7c:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   10d8c:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   10d9c:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   10dac:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   10dbc:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   10dcc:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
   10ddc:	6372 682f 6c61 705f 6d77 632e 0000 0000     rc/hal_pwm.c....
   10dec:	2e2e 682f 6c61 732f 6372 682f 6c61 715f     ../hal/src/hal_q
   10dfc:	7073 5f69 7973 636e 632e 0000 2e2e 682f     spi_sync.c..../h
   10e0c:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
   10e1c:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
   10e2c:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
   10e3c:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
   10e4c:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...

00010e5c <_map>:
   10e5c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   10e6c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   10e7c:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   10e8c:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   10e9c:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   10eac:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00010ebc <user_mux_confs>:
   10ebc:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00010f00 <channel_confs>:
   10f00:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00010f40 <interrupt_cfg>:
	...
   10fc0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   10fd0:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   10fe0:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   10ff0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   11000:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   11010:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   11020:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0001102c <sercomspi_regs>:
   1102c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   1103c:	0c04 3000 0000 0200 0000 0000 ef00 ff00     ...0............
   1104c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1105c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1106c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   1107c:	1400 4300 1800 4300                         ...C...C

00011084 <_usb_ep_cfgs>:
   11084:	0c60 2000 0000 0000 0040 0000 0ca0 2000     `.. ....@...... 
   11094:	0ce0 2000 0040 0040 0d20 2000 0d60 2000     ... @.@. .. `.. 
   110a4:	0040 0040 0da0 2000 0de0 2000 0040 0040     @.@.... ... @.@.
   110b4:	0e20 2000 0e60 2000 0040 0040 0804 0000      .. `.. @.@.....
   110c4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   110d4:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   110e4:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   110f4:	625f 7361 2e65 0068                         _base.h.

000110fc <n25q256a_interface>:
   110fc:	bae5 0000 bb89 0000 bc99 0000 be51 0000     ............Q...
   1110c:	bee1 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   1111c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00011128 <_ZTV9CDC_Class>:
	...
   11130:	dc71 0000 dd51 0000 da1d 0000 dc39 0000     q...Q.......9...
   11140:	dde9 0000 dbfd 0000 db11 0000 db61 0000     ............a...
   11150:	dc59 0000 dcb9 0000                         Y.......

00011158 <_ZTV6Stream>:
	...
   11160:	d517 0000 deb9 0000 da1d 0000 da31 0000     ............1...
   11170:	d517 0000 d517 0000 d517 0000 7830 2e25     ............0x%.
   11180:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   11190:	766f 0066                                   ovf.

00011194 <_ZTV5Print>:
	...
   1119c:	d517 0000 deb9 0000 da1d 0000 da31 0000     ............1...
   111ac:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
   111bc:	2e6f 0063 6f70 0077 0000 0000               o.c.pow.....

000111c8 <TWO52>:
   111c8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000111d8 <_global_impure_ptr>:
   111d8:	01f0 2000                                   ... 

000111dc <_init>:
   111dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111de:	bf00      	nop
   111e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   111e2:	bc08      	pop	{r3}
   111e4:	469e      	mov	lr, r3
   111e6:	4770      	bx	lr

000111e8 <__init_array_start>:
   111e8:	000101a1 	.word	0x000101a1

000111ec <__frame_dummy_init_array_entry>:
   111ec:	00000289 000002d5 00000541 00000e3d     ........A...=...
   111fc:	0000d9e5 0000de69 0000e271              ....i...q...

00011208 <_fini>:
   11208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1120a:	bf00      	nop
   1120c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1120e:	bc08      	pop	{r3}
   11210:	469e      	mov	lr, r3
   11212:	4770      	bx	lr

00011214 <__fini_array_start>:
   11214:	00000265 	.word	0x00000265
