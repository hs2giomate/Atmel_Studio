
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ed48  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000ed48  0000ed48  0001ed48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000584  20000000  0000ed50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020584  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020584  2**0
                  CONTENTS
  5 .bss          00003390  20000588  0000f2d8  00020584  2**3
                  ALLOC
  6 .stack        00010000  20003918  00012668  00020584  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020584  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000205b2  2**0
                  CONTENTS, READONLY
  9 .debug_info   000b7193  00000000  00000000  0002060b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001008f  00000000  00000000  000d779e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a352  00000000  00000000  000e782d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000028f0  00000000  00000000  00111b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002fd8  00000000  00000000  0011446f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000595ff  00000000  00000000  00117447  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004f0a5  00000000  00000000  00170a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001444f3  00000000  00000000  001bfaeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008220  00000000  00000000  00303fe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 39 01 20 b1 07 00 00 ad 07 00 00 ad 07 00 00     .9. ............
      10:	ad 07 00 00 ad 07 00 00 ad 07 00 00 00 00 00 00     ................
	...
      2c:	ad 07 00 00 ad 07 00 00 00 00 00 00 ad 07 00 00     ................
      3c:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      4c:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      5c:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      6c:	dd 41 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     .A..............
      7c:	ad 07 00 00 ad 07 00 00 ad 07 00 00 e9 3a 00 00     .............:..
      8c:	f5 3a 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     .:..............
      9c:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      ac:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      bc:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      cc:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
      dc:	ad 07 00 00 ad 07 00 00 ad 07 00 00 00 00 00 00     ................
	...
      f4:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     104:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     114:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     124:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     134:	ad 07 00 00 f1 48 00 00 05 49 00 00 19 49 00 00     .....H...I...I..
     144:	2d 49 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     -I..............
     154:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     164:	ad 07 00 00 41 49 00 00 55 49 00 00 69 49 00 00     ....AI..UI..iI..
     174:	7d 49 00 00 ad 07 00 00 19 37 00 00 79 66 00 00     }I.......7..yf..
     184:	85 66 00 00 91 66 00 00 9d 66 00 00 ad 07 00 00     .f...f...f......
     194:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     1a4:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     1b4:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     1c4:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     1d4:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     1e4:	ad 07 00 00 ad 07 00 00 0d 53 00 00 21 53 00 00     .........S..!S..
     1f4:	35 53 00 00 49 53 00 00 ad 07 00 00 ad 07 00 00     5S..IS..........
     204:	ad 07 00 00 5d 53 00 00 ad 07 00 00 ad 07 00 00     ....]S..........
     214:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     224:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     234:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     244:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................
     254:	ad 07 00 00 ad 07 00 00 ad 07 00 00 ad 07 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000588 	.word	0x20000588
     280:	00000000 	.word	0x00000000
     284:	0000ed50 	.word	0x0000ed50

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000ed50 	.word	0x0000ed50
     2c4:	2000058c 	.word	0x2000058c
     2c8:	0000ed50 	.word	0x0000ed50
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9ALU_ClassD1Ev>:
} //ALU_Class

// default destructor
ALU_Class::~ALU_Class()
{
} //~ALU_Class
     2d0:	4770      	bx	lr
	...

000002d4 <_ZN9ALU_Class15GetSelectedAMMCEv>:
	}
	  
	return s;
}

uint8_t	ALU_Class::GetSelectedAMMC(void){
     2d4:	b510      	push	{r4, lr}
     2d6:	4604      	mov	r4, r0
	activeLine=arincInterface.GetActiveLine();
     2d8:	480a      	ldr	r0, [pc, #40]	; (304 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>)
     2da:	4b0b      	ldr	r3, [pc, #44]	; (308 <_ZN9ALU_Class15GetSelectedAMMCEv+0x34>)
     2dc:	4798      	blx	r3
     2de:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
		switch (activeLine)
     2e2:	2801      	cmp	r0, #1
     2e4:	d005      	beq.n	2f2 <_ZN9ALU_Class15GetSelectedAMMCEv+0x1e>
     2e6:	2802      	cmp	r0, #2
     2e8:	d007      	beq.n	2fa <_ZN9ALU_Class15GetSelectedAMMCEv+0x26>
			case 2:
			ammc=&ammc2;
			/* Your code here */
			break;
			default:
			ammc=&ammc1;
     2ea:	4a08      	ldr	r2, [pc, #32]	; (30c <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>)
     2ec:	4b08      	ldr	r3, [pc, #32]	; (310 <_ZN9ALU_Class15GetSelectedAMMCEv+0x3c>)
     2ee:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
		}
	return activeLine;	
}
     2f0:	bd10      	pop	{r4, pc}
			ammc=&ammc1;
     2f2:	4a06      	ldr	r2, [pc, #24]	; (30c <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>)
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <_ZN9ALU_Class15GetSelectedAMMCEv+0x3c>)
     2f6:	601a      	str	r2, [r3, #0]
			break;
     2f8:	bd10      	pop	{r4, pc}
			ammc=&ammc2;
     2fa:	4a06      	ldr	r2, [pc, #24]	; (314 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>)
     2fc:	4b04      	ldr	r3, [pc, #16]	; (310 <_ZN9ALU_Class15GetSelectedAMMCEv+0x3c>)
     2fe:	601a      	str	r2, [r3, #0]
			break;
     300:	bd10      	pop	{r4, pc}
     302:	bf00      	nop
     304:	200020f4 	.word	0x200020f4
     308:	00008827 	.word	0x00008827
     30c:	200006e8 	.word	0x200006e8
     310:	20000ad8 	.word	0x20000ad8
     314:	200008e0 	.word	0x200008e0

00000318 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     318:	b538      	push	{r3, r4, r5, lr}
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     31a:	4d06      	ldr	r5, [pc, #24]	; (334 <_ZN9ALU_Class14StartLivePulseEv+0x1c>)
     31c:	4906      	ldr	r1, [pc, #24]	; (338 <_ZN9ALU_Class14StartLivePulseEv+0x20>)
     31e:	4628      	mov	r0, r5
     320:	4c06      	ldr	r4, [pc, #24]	; (33c <_ZN9ALU_Class14StartLivePulseEv+0x24>)
     322:	47a0      	blx	r4
     324:	4906      	ldr	r1, [pc, #24]	; (340 <_ZN9ALU_Class14StartLivePulseEv+0x28>)
     326:	4628      	mov	r0, r5
     328:	47a0      	blx	r4
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     32a:	4806      	ldr	r0, [pc, #24]	; (344 <_ZN9ALU_Class14StartLivePulseEv+0x2c>)
     32c:	4b06      	ldr	r3, [pc, #24]	; (348 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     32e:	4798      	blx	r3
	return p;
}
     330:	b2c0      	uxtb	r0, r0
     332:	bd38      	pop	{r3, r4, r5, pc}
     334:	200036cc 	.word	0x200036cc
     338:	0000d208 	.word	0x0000d208
     33c:	0000ae79 	.word	0x0000ae79
     340:	0000d1cc 	.word	0x0000d1cc
     344:	200037cc 	.word	0x200037cc
     348:	00002879 	.word	0x00002879

0000034c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     350:	4604      	mov	r4, r0
     352:	460f      	mov	r7, r1
	uint32_t	w,crc,refCRC;
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     354:	4d2b      	ldr	r5, [pc, #172]	; (404 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xb8>)
     356:	4628      	mov	r0, r5
     358:	4b2b      	ldr	r3, [pc, #172]	; (408 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xbc>)
     35a:	4798      	blx	r3
     35c:	4606      	mov	r6, r0
	if (memory.IsConfigurationDataUpdated())
     35e:	f5a5 70d0 	sub.w	r0, r5, #416	; 0x1a0
     362:	4b2a      	ldr	r3, [pc, #168]	; (40c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc0>)
     364:	4798      	blx	r3
     366:	2800      	cmp	r0, #0
     368:	d131      	bne.n	3ce <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x82>
		r=memory.ReadUpdatedConfigurationData(configuration);
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     36a:	4d29      	ldr	r5, [pc, #164]	; (410 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc4>)
     36c:	22ac      	movs	r2, #172	; 0xac
     36e:	4639      	mov	r1, r7
     370:	4628      	mov	r0, r5
     372:	4b28      	ldr	r3, [pc, #160]	; (414 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc8>)
     374:	4798      	blx	r3
     376:	4680      	mov	r8, r0
		refCRC=memory.ReadCRCConfigurationData();
     378:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
     37c:	4b26      	ldr	r3, [pc, #152]	; (418 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xcc>)
     37e:	4798      	blx	r3
		if (crc==refCRC)
     380:	4580      	cmp	r8, r0
     382:	d032      	beq.n	3ea <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x9e>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     384:	f104 0518 	add.w	r5, r4, #24
     388:	4f1e      	ldr	r7, [pc, #120]	; (404 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xb8>)
     38a:	4629      	mov	r1, r5
     38c:	4638      	mov	r0, r7
     38e:	4b23      	ldr	r3, [pc, #140]	; (41c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>)
     390:	4798      	blx	r3
     392:	4606      	mov	r6, r0
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     394:	22ac      	movs	r2, #172	; 0xac
     396:	4629      	mov	r1, r5
     398:	f5a7 70d0 	sub.w	r0, r7, #416	; 0x1a0
     39c:	4b1d      	ldr	r3, [pc, #116]	; (414 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xc8>)
     39e:	4798      	blx	r3
			if (crc==hvac.CRC32)
     3a0:	4b1f      	ldr	r3, [pc, #124]	; (420 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd4>)
     3a2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
     3a6:	4298      	cmp	r0, r3
     3a8:	d026      	beq.n	3f8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xac>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     3aa:	22ac      	movs	r2, #172	; 0xac
     3ac:	491d      	ldr	r1, [pc, #116]	; (424 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd8>)
     3ae:	f104 0018 	add.w	r0, r4, #24
     3b2:	4b1d      	ldr	r3, [pc, #116]	; (428 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     3b4:	4798      	blx	r3
				w=memory.WriteDefaultConfiguration(configuration);
     3b6:	4f13      	ldr	r7, [pc, #76]	; (404 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xb8>)
     3b8:	4629      	mov	r1, r5
     3ba:	4638      	mov	r0, r7
     3bc:	4b1b      	ldr	r3, [pc, #108]	; (42c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe0>)
     3be:	4798      	blx	r3
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     3c0:	4b17      	ldr	r3, [pc, #92]	; (420 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd4>)
     3c2:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
     3c6:	4638      	mov	r0, r7
     3c8:	4b19      	ldr	r3, [pc, #100]	; (430 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe4>)
     3ca:	4798      	blx	r3
     3cc:	e005      	b.n	3da <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x8e>
		r=memory.ReadUpdatedConfigurationData(configuration);
     3ce:	f104 0118 	add.w	r1, r4, #24
     3d2:	4628      	mov	r0, r5
     3d4:	4b17      	ldr	r3, [pc, #92]	; (434 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     3d6:	4798      	blx	r3
     3d8:	4606      	mov	r6, r0
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     3da:	f104 0118 	add.w	r1, r4, #24
     3de:	4810      	ldr	r0, [pc, #64]	; (420 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd4>)
     3e0:	4b15      	ldr	r3, [pc, #84]	; (438 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xec>)
     3e2:	4798      	blx	r3
	return r;
};
     3e4:	4630      	mov	r0, r6
     3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			configuration=cd;
     3ea:	22ac      	movs	r2, #172	; 0xac
     3ec:	4639      	mov	r1, r7
     3ee:	f104 0018 	add.w	r0, r4, #24
     3f2:	4b0d      	ldr	r3, [pc, #52]	; (428 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xdc>)
     3f4:	4798      	blx	r3
     3f6:	e7f0      	b.n	3da <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x8e>
				w=memory.WriteCRCConfigurationData(crc);
     3f8:	4601      	mov	r1, r0
     3fa:	4638      	mov	r0, r7
     3fc:	4b0c      	ldr	r3, [pc, #48]	; (430 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe4>)
     3fe:	4798      	blx	r3
     400:	e7eb      	b.n	3da <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x8e>
     402:	bf00      	nop
     404:	2000127c 	.word	0x2000127c
     408:	00000bd5 	.word	0x00000bd5
     40c:	00000d81 	.word	0x00000d81
     410:	200010dc 	.word	0x200010dc
     414:	00000681 	.word	0x00000681
     418:	00000c05 	.word	0x00000c05
     41c:	00000bbd 	.word	0x00000bbd
     420:	200016cc 	.word	0x200016cc
     424:	0000d478 	.word	0x0000d478
     428:	0000cdb9 	.word	0x0000cdb9
     42c:	00000c45 	.word	0x00000c45
     430:	00000c5d 	.word	0x00000c5d
     434:	00000bed 	.word	0x00000bed
     438:	00001629 	.word	0x00001629

0000043c <_ZN9ALU_Class4InitEv>:
uint32_t	ALU_Class::Init(void){
     43c:	b530      	push	{r4, r5, lr}
     43e:	b083      	sub	sp, #12
     440:	4604      	mov	r4, r0
	StartLivePulse();
     442:	4b18      	ldr	r3, [pc, #96]	; (4a4 <_ZN9ALU_Class4InitEv+0x68>)
     444:	4798      	blx	r3
	hvac.SetCRCConfigData();
     446:	4d18      	ldr	r5, [pc, #96]	; (4a8 <_ZN9ALU_Class4InitEv+0x6c>)
     448:	4628      	mov	r0, r5
     44a:	4b18      	ldr	r3, [pc, #96]	; (4ac <_ZN9ALU_Class4InitEv+0x70>)
     44c:	4798      	blx	r3
	SetInitialConfiguration(configuration);
     44e:	f104 0118 	add.w	r1, r4, #24
     452:	4620      	mov	r0, r4
     454:	4b16      	ldr	r3, [pc, #88]	; (4b0 <_ZN9ALU_Class4InitEv+0x74>)
     456:	4798      	blx	r3
	hvac.SetInitialState(lastState);
     458:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
     45c:	4628      	mov	r0, r5
     45e:	4b15      	ldr	r3, [pc, #84]	; (4b4 <_ZN9ALU_Class4InitEv+0x78>)
     460:	4798      	blx	r3
	uhr.Init();
     462:	4815      	ldr	r0, [pc, #84]	; (4b8 <_ZN9ALU_Class4InitEv+0x7c>)
     464:	4b15      	ldr	r3, [pc, #84]	; (4bc <_ZN9ALU_Class4InitEv+0x80>)
     466:	4798      	blx	r3
	s=arincInterface.Init();
     468:	4815      	ldr	r0, [pc, #84]	; (4c0 <_ZN9ALU_Class4InitEv+0x84>)
     46a:	4b16      	ldr	r3, [pc, #88]	; (4c4 <_ZN9ALU_Class4InitEv+0x88>)
     46c:	4798      	blx	r3
	if (s!=0x01)
     46e:	b170      	cbz	r0, 48e <_ZN9ALU_Class4InitEv+0x52>
		s=pBIT.CheckCurrentStatus(status);
     470:	f504 719c 	add.w	r1, r4, #312	; 0x138
     474:	4814      	ldr	r0, [pc, #80]	; (4c8 <_ZN9ALU_Class4InitEv+0x8c>)
     476:	4b15      	ldr	r3, [pc, #84]	; (4cc <_ZN9ALU_Class4InitEv+0x90>)
     478:	4798      	blx	r3
		if (s>0)
     47a:	4604      	mov	r4, r0
     47c:	b178      	cbz	r0, 49e <_ZN9ALU_Class4InitEv+0x62>
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
	{
	data = v;
     47e:	aa02      	add	r2, sp, #8
     480:	f842 0d04 	str.w	r0, [r2, #-4]!

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(ifl),data);
     484:	2101      	movs	r1, #1
     486:	4812      	ldr	r0, [pc, #72]	; (4d0 <_ZN9ALU_Class4InitEv+0x94>)
     488:	4b12      	ldr	r3, [pc, #72]	; (4d4 <_ZN9ALU_Class4InitEv+0x98>)
     48a:	4798      	blx	r3
			return s;
     48c:	e007      	b.n	49e <_ZN9ALU_Class4InitEv+0x62>
     48e:	2400      	movs	r4, #0
     490:	aa02      	add	r2, sp, #8
     492:	f842 4d08 	str.w	r4, [r2, #-8]!
	listener.SendErrorSelf(uint16_t(ifl),data);
     496:	4621      	mov	r1, r4
     498:	480d      	ldr	r0, [pc, #52]	; (4d0 <_ZN9ALU_Class4InitEv+0x94>)
     49a:	4b0e      	ldr	r3, [pc, #56]	; (4d4 <_ZN9ALU_Class4InitEv+0x98>)
     49c:	4798      	blx	r3
}
     49e:	4620      	mov	r0, r4
     4a0:	b003      	add	sp, #12
     4a2:	bd30      	pop	{r4, r5, pc}
     4a4:	00000319 	.word	0x00000319
     4a8:	200016cc 	.word	0x200016cc
     4ac:	0000163d 	.word	0x0000163d
     4b0:	0000034d 	.word	0x0000034d
     4b4:	00000635 	.word	0x00000635
     4b8:	20000ae0 	.word	0x20000ae0
     4bc:	00000749 	.word	0x00000749
     4c0:	200020f4 	.word	0x200020f4
     4c4:	00007e71 	.word	0x00007e71
     4c8:	200016b8 	.word	0x200016b8
     4cc:	00000c91 	.word	0x00000c91
     4d0:	2000332c 	.word	0x2000332c
     4d4:	00008e49 	.word	0x00008e49

000004d8 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev>:
}
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     4d8:	b508      	push	{r3, lr}
	ptrPbit=&pBIT;
     4da:	4804      	ldr	r0, [pc, #16]	; (4ec <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x14>)
     4dc:	4b04      	ldr	r3, [pc, #16]	; (4f0 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x18>)
     4de:	6103      	str	r3, [r0, #16]
     4e0:	4a04      	ldr	r2, [pc, #16]	; (4f4 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x1c>)
     4e2:	4905      	ldr	r1, [pc, #20]	; (4f8 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x20>)
     4e4:	4b05      	ldr	r3, [pc, #20]	; (4fc <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x24>)
     4e6:	4798      	blx	r3
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop
     4ec:	200005a4 	.word	0x200005a4
     4f0:	200016b8 	.word	0x200016b8
     4f4:	20000000 	.word	0x20000000
     4f8:	000002d1 	.word	0x000002d1
     4fc:	0000b2dd 	.word	0x0000b2dd

00000500 <_ZN10AMMC_ClassD1Ev>:
AMMC_Class::AMMC_Class()
{
} //AMMC_Class

// default destructor
AMMC_Class::~AMMC_Class()
     500:	b510      	push	{r4, lr}
     502:	4604      	mov	r4, r0
     504:	4905      	ldr	r1, [pc, #20]	; (51c <_ZN10AMMC_ClassD1Ev+0x1c>)
     506:	f101 0314 	add.w	r3, r1, #20
     50a:	6003      	str	r3, [r0, #0]
     50c:	312c      	adds	r1, #44	; 0x2c
     50e:	4b04      	ldr	r3, [pc, #16]	; (520 <_ZN10AMMC_ClassD1Ev+0x20>)
     510:	4798      	blx	r3
     512:	4620      	mov	r0, r4
     514:	4b03      	ldr	r3, [pc, #12]	; (524 <_ZN10AMMC_ClassD1Ev+0x24>)
     516:	4798      	blx	r3
{
} //~AMMC_Class
     518:	4620      	mov	r0, r4
     51a:	bd10      	pop	{r4, pc}
     51c:	0000d228 	.word	0x0000d228
     520:	00007d7d 	.word	0x00007d7d
     524:	000079ed 	.word	0x000079ed

00000528 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     528:	b510      	push	{r4, lr}
     52a:	4604      	mov	r4, r0
} //~AMMC_Class
     52c:	4b04      	ldr	r3, [pc, #16]	; (540 <_ZN10AMMC_ClassD0Ev+0x18>)
     52e:	4798      	blx	r3
     530:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
     534:	4620      	mov	r0, r4
     536:	4b03      	ldr	r3, [pc, #12]	; (544 <_ZN10AMMC_ClassD0Ev+0x1c>)
     538:	4798      	blx	r3
     53a:	4620      	mov	r0, r4
     53c:	bd10      	pop	{r4, pc}
     53e:	bf00      	nop
     540:	00000501 	.word	0x00000501
     544:	0000b2e9 	.word	0x0000b2e9

00000548 <_ZN10AMMC_ClassC1Ev>:
AMMC_Class::AMMC_Class()
     548:	b538      	push	{r3, r4, r5, lr}
     54a:	4605      	mov	r5, r0
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <_ZN10AMMC_ClassC1Ev+0x1c>)
     54e:	4798      	blx	r3
     550:	4c05      	ldr	r4, [pc, #20]	; (568 <_ZN10AMMC_ClassC1Ev+0x20>)
     552:	f104 012c 	add.w	r1, r4, #44	; 0x2c
     556:	4628      	mov	r0, r5
     558:	4b04      	ldr	r3, [pc, #16]	; (56c <_ZN10AMMC_ClassC1Ev+0x24>)
     55a:	4798      	blx	r3
     55c:	3414      	adds	r4, #20
     55e:	602c      	str	r4, [r5, #0]
} //AMMC_Class
     560:	4628      	mov	r0, r5
     562:	bd38      	pop	{r3, r4, r5, pc}
     564:	000079cd 	.word	0x000079cd
     568:	0000d228 	.word	0x0000d228
     56c:	00007ca5 	.word	0x00007ca5

00000570 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
AMMC_Class	ammc1;
     574:	4c0a      	ldr	r4, [pc, #40]	; (5a0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x30>)
     576:	4620      	mov	r0, r4
     578:	f8df 8034 	ldr.w	r8, [pc, #52]	; 5b0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x40>
     57c:	47c0      	blx	r8
     57e:	4f09      	ldr	r7, [pc, #36]	; (5a4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x34>)
     580:	4e09      	ldr	r6, [pc, #36]	; (5a8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x38>)
     582:	463a      	mov	r2, r7
     584:	4631      	mov	r1, r6
     586:	4620      	mov	r0, r4
     588:	4d08      	ldr	r5, [pc, #32]	; (5ac <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x3c>)
     58a:	47a8      	blx	r5
AMMC_Class	ammc2;
     58c:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
     590:	4620      	mov	r0, r4
     592:	47c0      	blx	r8
     594:	463a      	mov	r2, r7
     596:	4631      	mov	r1, r6
     598:	4620      	mov	r0, r4
     59a:	47a8      	blx	r5
     59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5a0:	200006e8 	.word	0x200006e8
     5a4:	20000000 	.word	0x20000000
     5a8:	00000501 	.word	0x00000501
     5ac:	0000b2dd 	.word	0x0000b2dd
     5b0:	00000549 	.word	0x00000549

000005b4 <_ZN10CBIT_ClassD1Ev>:
} //CBIT_Class

// default destructor
CBIT_Class::~CBIT_Class()
{
} //~CBIT_Class
     5b4:	4770      	bx	lr

000005b6 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
	return	isOK;
     5b6:	7800      	ldrb	r0, [r0, #0]
}
     5b8:	4770      	bx	lr
	...

000005bc <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
CBIT_Class::operator bool(){
	return	isOK;
}

     5bc:	b508      	push	{r3, lr}
     5be:	4a03      	ldr	r2, [pc, #12]	; (5cc <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     5c0:	4903      	ldr	r1, [pc, #12]	; (5d0 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x14>)
     5c2:	4804      	ldr	r0, [pc, #16]	; (5d4 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x18>)
     5c4:	4b04      	ldr	r3, [pc, #16]	; (5d8 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x1c>)
     5c6:	4798      	blx	r3
     5c8:	bd08      	pop	{r3, pc}
     5ca:	bf00      	nop
     5cc:	20000000 	.word	0x20000000
     5d0:	000005b5 	.word	0x000005b5
     5d4:	20000adc 	.word	0x20000adc
     5d8:	0000b2dd 	.word	0x0000b2dd

000005dc <_ZN17ConfigState_ClassC1Ev>:
	"HMIUpdate",
	"FirmwareUpdate",
};
#endif
// default constructor
ConfigState_Class::ConfigState_Class()
     5dc:	4b01      	ldr	r3, [pc, #4]	; (5e4 <_ZN17ConfigState_ClassC1Ev+0x8>)
     5de:	6003      	str	r3, [r0, #0]
{
} //ConfigState_Class
     5e0:	4770      	bx	lr
     5e2:	bf00      	nop
     5e4:	0000d52c 	.word	0x0000d52c

000005e8 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
{
} //~ConfigState_Class
     5e8:	4770      	bx	lr
	...

000005ec <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
	
	if (config)
     5ec:	b902      	cbnz	r2, 5f0 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4>
     5ee:	4770      	bx	lr
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	460d      	mov	r5, r1
     5f4:	4604      	mov	r4, r0
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     5f6:	1d06      	adds	r6, r0, #4
     5f8:	22ac      	movs	r2, #172	; 0xac
     5fa:	4905      	ldr	r1, [pc, #20]	; (610 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x24>)
     5fc:	4630      	mov	r0, r6
     5fe:	4b05      	ldr	r3, [pc, #20]	; (614 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x28>)
     600:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     602:	6125      	str	r5, [r4, #16]
		memory.writeConfigurationDataArea(configuration);
     604:	4631      	mov	r1, r6
     606:	4804      	ldr	r0, [pc, #16]	; (618 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x2c>)
     608:	4b04      	ldr	r3, [pc, #16]	; (61c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x30>)
     60a:	4798      	blx	r3
     60c:	bd70      	pop	{r4, r5, r6, pc}
     60e:	bf00      	nop
     610:	0000d478 	.word	0x0000d478
     614:	0000cdb9 	.word	0x0000cdb9
     618:	200010dc 	.word	0x200010dc
     61c:	00000cf9 	.word	0x00000cf9

00000620 <_ZN17ConfigState_Class15SetDefaultStateER9HVACState>:
	}
	
	
}
uint32_t ConfigState_Class::SetDefaultState(HVACState& hs){
     620:	b508      	push	{r3, lr}
	uint32_t	r=memory.ReadApplicationState(hs);
     622:	4802      	ldr	r0, [pc, #8]	; (62c <_ZN17ConfigState_Class15SetDefaultStateER9HVACState+0xc>)
     624:	4b02      	ldr	r3, [pc, #8]	; (630 <_ZN17ConfigState_Class15SetDefaultStateER9HVACState+0x10>)
     626:	4798      	blx	r3
	return	r;
	};
     628:	bd08      	pop	{r3, pc}
     62a:	bf00      	nop
     62c:	20001278 	.word	0x20001278
     630:	00000839 	.word	0x00000839

00000634 <_ZN17ConfigState_Class15SetInitialStateER9HVACState>:
	
uint32_t ConfigState_Class::SetInitialState(HVACState& hs){
     634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     636:	4605      	mov	r5, r0
     638:	460c      	mov	r4, r1
		uint32_t	r=memory.ReadApplicationState(hs);
     63a:	4e0c      	ldr	r6, [pc, #48]	; (66c <_ZN17ConfigState_Class15SetInitialStateER9HVACState+0x38>)
     63c:	4630      	mov	r0, r6
     63e:	4b0c      	ldr	r3, [pc, #48]	; (670 <_ZN17ConfigState_Class15SetInitialStateER9HVACState+0x3c>)
     640:	4798      	blx	r3
     642:	4607      	mov	r7, r0
		if (memory.IsStateDataValid(hs))
     644:	4621      	mov	r1, r4
     646:	f5a6 70ce 	sub.w	r0, r6, #412	; 0x19c
     64a:	4b0a      	ldr	r3, [pc, #40]	; (674 <_ZN17ConfigState_Class15SetInitialStateER9HVACState+0x40>)
     64c:	4798      	blx	r3
     64e:	b130      	cbz	r0, 65e <_ZN17ConfigState_Class15SetInitialStateER9HVACState+0x2a>
		else
		{
			r=memory.ReadDeafultApplicationState(hs);
			
		}
	SetCurrentState(hs);
     650:	682b      	ldr	r3, [r5, #0]
     652:	681b      	ldr	r3, [r3, #0]
     654:	4621      	mov	r1, r4
     656:	4628      	mov	r0, r5
     658:	4798      	blx	r3
		return r;
	};
     65a:	4638      	mov	r0, r7
     65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			r=memory.ReadDeafultApplicationState(hs);
     65e:	4621      	mov	r1, r4
     660:	f5a6 60cd 	sub.w	r0, r6, #1640	; 0x668
     664:	4b04      	ldr	r3, [pc, #16]	; (678 <_ZN17ConfigState_Class15SetInitialStateER9HVACState+0x44>)
     666:	4798      	blx	r3
     668:	4607      	mov	r7, r0
     66a:	e7f1      	b.n	650 <_ZN17ConfigState_Class15SetInitialStateER9HVACState+0x1c>
     66c:	20001278 	.word	0x20001278
     670:	00000839 	.word	0x00000839
     674:	00000dd9 	.word	0x00000dd9
     678:	00000b51 	.word	0x00000b51

0000067c <_ZN11CRC32_ClassC1Ev>:
#include "CRC32_Class.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
     67c:	4770      	bx	lr

0000067e <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
     67e:	4770      	bx	lr

00000680 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	crc_sync_enable(&CRC_CALC);
	crc_sync_crc32(&CRC_CALC, data, len, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	b083      	sub	sp, #12
     684:	4607      	mov	r7, r0
     686:	460d      	mov	r5, r1
     688:	4616      	mov	r6, r2
	crc_sync_enable(&CRC_CALC);
     68a:	4c09      	ldr	r4, [pc, #36]	; (6b0 <_ZN11CRC32_Class12CalculateCRCEPmm+0x30>)
     68c:	4620      	mov	r0, r4
     68e:	4b09      	ldr	r3, [pc, #36]	; (6b4 <_ZN11CRC32_Class12CalculateCRCEPmm+0x34>)
     690:	4798      	blx	r3
	refCRC32=refCRC;
     692:	f04f 32ff 	mov.w	r2, #4294967295
     696:	603a      	str	r2, [r7, #0]
	uint32_t crc=Init();
     698:	ab02      	add	r3, sp, #8
     69a:	f843 2d04 	str.w	r2, [r3, #-4]!
	crc_sync_crc32(&CRC_CALC, data, len, &crc);
     69e:	4632      	mov	r2, r6
     6a0:	4629      	mov	r1, r5
     6a2:	4620      	mov	r0, r4
     6a4:	4c04      	ldr	r4, [pc, #16]	; (6b8 <_ZN11CRC32_Class12CalculateCRCEPmm+0x38>)
     6a6:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
     6a8:	9801      	ldr	r0, [sp, #4]
     6aa:	43c0      	mvns	r0, r0
     6ac:	b003      	add	sp, #12
     6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6b0:	200038ac 	.word	0x200038ac
     6b4:	00002491 	.word	0x00002491
     6b8:	000024b9 	.word	0x000024b9

000006bc <_ZN15DataLoger_ClassC1Ev>:
#include "DataLoger_Class.h"
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     6bc:	b510      	push	{r4, lr}
     6be:	4604      	mov	r4, r0
     6c0:	4b07      	ldr	r3, [pc, #28]	; (6e0 <_ZN15DataLoger_ClassC1Ev+0x24>)
     6c2:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
     6c4:	f44f 7200 	mov.w	r2, #512	; 0x200
     6c8:	2100      	movs	r1, #0
     6ca:	f504 702f 	add.w	r0, r4, #700	; 0x2bc
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <_ZN15DataLoger_ClassC1Ev+0x28>)
     6d0:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
     6d2:	2300      	movs	r3, #0
     6d4:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
  _iTail = 0;
     6d8:	f8c4 34c0 	str.w	r3, [r4, #1216]	; 0x4c0
{
} //DataLoger_Class
     6dc:	4620      	mov	r0, r4
     6de:	bd10      	pop	{r4, pc}
     6e0:	000098d9 	.word	0x000098d9
     6e4:	0000ceed 	.word	0x0000ceed

000006e8 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     6e8:	b510      	push	{r4, lr}
     6ea:	4604      	mov	r4, r0
     6ec:	4b01      	ldr	r3, [pc, #4]	; (6f4 <_ZN15DataLoger_ClassD1Ev+0xc>)
     6ee:	4798      	blx	r3
{
} //~DataLoger_Class
     6f0:	4620      	mov	r0, r4
     6f2:	bd10      	pop	{r4, pc}
     6f4:	00009915 	.word	0x00009915

000006f8 <_ZN15DataLoger_Class13LogResetEventEv>:
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
	return 0;
     6f8:	2000      	movs	r0, #0
     6fa:	4770      	bx	lr

000006fc <_ZN14DateTime_ClassD1Ev>:
DateTime_Class::DateTime_Class()
{
} //DateTime_Class

// default destructor
DateTime_Class::~DateTime_Class()
     6fc:	b538      	push	{r3, r4, r5, lr}
     6fe:	4605      	mov	r5, r0
     700:	4604      	mov	r4, r0
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <_ZN14DateTime_ClassD1Ev+0x1c>)
     704:	f844 3ba8 	str.w	r3, [r4], #168
     708:	4b04      	ldr	r3, [pc, #16]	; (71c <_ZN14DateTime_ClassD1Ev+0x20>)
     70a:	4798      	blx	r3
     70c:	4620      	mov	r0, r4
     70e:	4b04      	ldr	r3, [pc, #16]	; (720 <_ZN14DateTime_ClassD1Ev+0x24>)
     710:	4798      	blx	r3
{
} //~DateTime_Class
     712:	4628      	mov	r0, r5
     714:	bd38      	pop	{r3, r4, r5, pc}
     716:	bf00      	nop
     718:	0000d610 	.word	0x0000d610
     71c:	00009ae1 	.word	0x00009ae1
     720:	00000837 	.word	0x00000837

00000724 <_ZN14DateTime_ClassC1Ev>:
DateTime_Class::DateTime_Class()
     724:	b510      	push	{r4, lr}
     726:	4604      	mov	r4, r0
     728:	30a8      	adds	r0, #168	; 0xa8
     72a:	4b04      	ldr	r3, [pc, #16]	; (73c <_ZN14DateTime_ClassC1Ev+0x18>)
     72c:	4798      	blx	r3
     72e:	4620      	mov	r0, r4
     730:	4b03      	ldr	r3, [pc, #12]	; (740 <_ZN14DateTime_ClassC1Ev+0x1c>)
     732:	4798      	blx	r3
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <_ZN14DateTime_ClassC1Ev+0x20>)
     736:	6023      	str	r3, [r4, #0]
} //DateTime_Class
     738:	4620      	mov	r0, r4
     73a:	bd10      	pop	{r4, pc}
     73c:	00000835 	.word	0x00000835
     740:	00009a71 	.word	0x00009a71
     744:	0000d610 	.word	0x0000d610

00000748 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
     748:	b538      	push	{r3, r4, r5, lr}
	uint32_t	add=(uint32_t)&eepromMap->stack;
     74a:	4d08      	ldr	r5, [pc, #32]	; (76c <_ZN14DateTime_Class4InitEv+0x24>)
     74c:	6829      	ldr	r1, [r5, #0]
	calendar.SetCalendarStackAddress(add);
     74e:	4c08      	ldr	r4, [pc, #32]	; (770 <_ZN14DateTime_Class4InitEv+0x28>)
     750:	310c      	adds	r1, #12
     752:	4620      	mov	r0, r4
     754:	4b07      	ldr	r3, [pc, #28]	; (774 <_ZN14DateTime_Class4InitEv+0x2c>)
     756:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[1];
     758:	6829      	ldr	r1, [r5, #0]
	calendar.SetCalendarAddress(addTimeLogs);
     75a:	3114      	adds	r1, #20
     75c:	4620      	mov	r0, r4
     75e:	4b06      	ldr	r3, [pc, #24]	; (778 <_ZN14DateTime_Class4InitEv+0x30>)
     760:	4798      	blx	r3
	calendar.Init();
     762:	4620      	mov	r0, r4
     764:	4b05      	ldr	r3, [pc, #20]	; (77c <_ZN14DateTime_Class4InitEv+0x34>)
     766:	4798      	blx	r3
     768:	bd38      	pop	{r3, r4, r5, pc}
     76a:	bf00      	nop
     76c:	20000b90 	.word	0x20000b90
     770:	20003598 	.word	0x20003598
     774:	0000a3dd 	.word	0x0000a3dd
     778:	0000a3fd 	.word	0x0000a3fd
     77c:	00009b09 	.word	0x00009b09

00000780 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
}

     780:	b510      	push	{r4, lr}
     782:	4c05      	ldr	r4, [pc, #20]	; (798 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x18>)
     784:	4620      	mov	r0, r4
     786:	4b05      	ldr	r3, [pc, #20]	; (79c <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x1c>)
     788:	4798      	blx	r3
     78a:	4a05      	ldr	r2, [pc, #20]	; (7a0 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x20>)
     78c:	4905      	ldr	r1, [pc, #20]	; (7a4 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x24>)
     78e:	4620      	mov	r0, r4
     790:	4b05      	ldr	r3, [pc, #20]	; (7a8 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x28>)
     792:	4798      	blx	r3
     794:	bd10      	pop	{r4, pc}
     796:	bf00      	nop
     798:	20000ae0 	.word	0x20000ae0
     79c:	00000725 	.word	0x00000725
     7a0:	20000000 	.word	0x20000000
     7a4:	000006fd 	.word	0x000006fd
     7a8:	0000b2dd 	.word	0x0000b2dd

000007ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7ac:	e7fe      	b.n	7ac <Dummy_Handler>
	...

000007b0 <Reset_Handler>:
{
     7b0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     7b2:	4b17      	ldr	r3, [pc, #92]	; (810 <Reset_Handler+0x60>)
     7b4:	4a17      	ldr	r2, [pc, #92]	; (814 <Reset_Handler+0x64>)
     7b6:	429a      	cmp	r2, r3
     7b8:	d010      	beq.n	7dc <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     7ba:	4b17      	ldr	r3, [pc, #92]	; (818 <Reset_Handler+0x68>)
     7bc:	4a14      	ldr	r2, [pc, #80]	; (810 <Reset_Handler+0x60>)
     7be:	429a      	cmp	r2, r3
     7c0:	d20c      	bcs.n	7dc <Reset_Handler+0x2c>
     7c2:	3b01      	subs	r3, #1
     7c4:	1a9b      	subs	r3, r3, r2
     7c6:	f023 0303 	bic.w	r3, r3, #3
     7ca:	3304      	adds	r3, #4
     7cc:	4413      	add	r3, r2
     7ce:	4911      	ldr	r1, [pc, #68]	; (814 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     7d0:	f851 0b04 	ldr.w	r0, [r1], #4
     7d4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     7d8:	429a      	cmp	r2, r3
     7da:	d1f9      	bne.n	7d0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     7dc:	4b0f      	ldr	r3, [pc, #60]	; (81c <Reset_Handler+0x6c>)
     7de:	4a10      	ldr	r2, [pc, #64]	; (820 <Reset_Handler+0x70>)
     7e0:	429a      	cmp	r2, r3
     7e2:	d20a      	bcs.n	7fa <Reset_Handler+0x4a>
     7e4:	3b01      	subs	r3, #1
     7e6:	1a9b      	subs	r3, r3, r2
     7e8:	f023 0303 	bic.w	r3, r3, #3
     7ec:	3304      	adds	r3, #4
     7ee:	4413      	add	r3, r2
                *pDest++ = 0;
     7f0:	2100      	movs	r1, #0
     7f2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     7f6:	4293      	cmp	r3, r2
     7f8:	d1fb      	bne.n	7f2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     7fa:	4a0a      	ldr	r2, [pc, #40]	; (824 <Reset_Handler+0x74>)
     7fc:	4b0a      	ldr	r3, [pc, #40]	; (828 <Reset_Handler+0x78>)
     7fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     802:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     804:	4b09      	ldr	r3, [pc, #36]	; (82c <Reset_Handler+0x7c>)
     806:	4798      	blx	r3
        main();
     808:	4b09      	ldr	r3, [pc, #36]	; (830 <Reset_Handler+0x80>)
     80a:	4798      	blx	r3
     80c:	e7fe      	b.n	80c <Reset_Handler+0x5c>
     80e:	bf00      	nop
     810:	20000000 	.word	0x20000000
     814:	0000ed50 	.word	0x0000ed50
     818:	20000584 	.word	0x20000584
     81c:	20003918 	.word	0x20003918
     820:	20000588 	.word	0x20000588
     824:	e000ed00 	.word	0xe000ed00
     828:	00000000 	.word	0x00000000
     82c:	0000cd69 	.word	0x0000cd69
     830:	0000091d 	.word	0x0000091d

00000834 <_ZN17FastStorage_ClassC1Ev>:
EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
{
} //FastStorage_Class
     834:	4770      	bx	lr

00000836 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
{
} //~FastStorage_Class
     836:	4770      	bx	lr

00000838 <_ZN17FastStorage_Class20ReadApplicationStateER9HVACState>:

uint32_t	FastStorage_Class::ReadApplicationState(HVACState& as){
     838:	b510      	push	{r4, lr}
	handlerAppState=PTR_HVAC_STATE(&as);
     83a:	6001      	str	r1, [r0, #0]
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerAppState,APP_STATE_ADDRESS,sizeof(HVACState));
     83c:	2374      	movs	r3, #116	; 0x74
     83e:	f240 224e 	movw	r2, #590	; 0x24e
     842:	4802      	ldr	r0, [pc, #8]	; (84c <_ZN17FastStorage_Class20ReadApplicationStateER9HVACState+0x14>)
     844:	4c02      	ldr	r4, [pc, #8]	; (850 <_ZN17FastStorage_Class20ReadApplicationStateER9HVACState+0x18>)
     846:	47a0      	blx	r4
	return	r;
}
     848:	bd10      	pop	{r4, pc}
     84a:	bf00      	nop
     84c:	20003380 	.word	0x20003380
     850:	000099bd 	.word	0x000099bd

00000854 <_ZN17FastStorage_Class23ReadCRCApplicationStateEv>:
uint32_t	FastStorage_Class::ReadCRCApplicationState(void){
     854:	b510      	push	{r4, lr}
     856:	b082      	sub	sp, #8
	uint32_t	crc;
	uint32_t	r=flash.ReadAddress((uint8_t*)(&crc),APP_STATE_ADDRESS+sizeof(HVACState),sizeof(uint32_t));
     858:	2304      	movs	r3, #4
     85a:	f240 22c2 	movw	r2, #706	; 0x2c2
     85e:	eb0d 0103 	add.w	r1, sp, r3
     862:	4803      	ldr	r0, [pc, #12]	; (870 <_ZN17FastStorage_Class23ReadCRCApplicationStateEv+0x1c>)
     864:	4c03      	ldr	r4, [pc, #12]	; (874 <_ZN17FastStorage_Class23ReadCRCApplicationStateEv+0x20>)
     866:	47a0      	blx	r4
	return	crc;
     868:	9801      	ldr	r0, [sp, #4]
     86a:	b002      	add	sp, #8
     86c:	bd10      	pop	{r4, pc}
     86e:	bf00      	nop
     870:	20003380 	.word	0x20003380
     874:	000099bd 	.word	0x000099bd

00000878 <_ZN16Interfaces_ClassD1Ev>:
} //Interfaces_Class

// default destructor
Interfaces_Class::~Interfaces_Class()
{
} //~Interfaces_Class
     878:	4770      	bx	lr

0000087a <_ZN16Interfaces_ClassC1Ev>:
} //Interfaces_Class
     87a:	4770      	bx	lr

0000087c <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
		listener.SendEventSelf(e);
	}
	return r;
}

uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
     87c:	b470      	push	{r4, r5, r6}
     87e:	4606      	mov	r6, r0
     880:	460c      	mov	r4, r1
	s=status;
     882:	f100 0374 	add.w	r3, r0, #116	; 0x74
     886:	e893 0003 	ldmia.w	r3, {r0, r1}
     88a:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
     88e:	4620      	mov	r0, r4
     890:	2300      	movs	r3, #0
	for (int i=0;i<sizeof(status.statusBits);i++)
	{
		s.rawStatus+=(*p)&(0x01<<i);
     892:	2501      	movs	r5, #1
     894:	fa05 f203 	lsl.w	r2, r5, r3
     898:	f850 1b04 	ldr.w	r1, [r0], #4
     89c:	4011      	ands	r1, r2
     89e:	6862      	ldr	r2, [r4, #4]
     8a0:	440a      	add	r2, r1
     8a2:	6062      	str	r2, [r4, #4]
	for (int i=0;i<sizeof(status.statusBits);i++)
     8a4:	3301      	adds	r3, #1
     8a6:	2b04      	cmp	r3, #4
     8a8:	d1f4      	bne.n	894 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x18>
		p++;
	}
	return	status.rawStatus;
}
     8aa:	6fb0      	ldr	r0, [r6, #120]	; 0x78
     8ac:	bc70      	pop	{r4, r5, r6}
     8ae:	4770      	bx	lr

000008b0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:

     8b0:	b508      	push	{r3, lr}
     8b2:	4a03      	ldr	r2, [pc, #12]	; (8c0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
     8b4:	4903      	ldr	r1, [pc, #12]	; (8c4 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x14>)
     8b6:	4804      	ldr	r0, [pc, #16]	; (8c8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x18>)
     8b8:	4b04      	ldr	r3, [pc, #16]	; (8cc <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x1c>)
     8ba:	4798      	blx	r3
     8bc:	bd08      	pop	{r3, pc}
     8be:	bf00      	nop
     8c0:	20000000 	.word	0x20000000
     8c4:	00000879 	.word	0x00000879
     8c8:	20000b94 	.word	0x20000b94
     8cc:	0000b2dd 	.word	0x0000b2dd

000008d0 <_ZN16Interfaces_Class18CheckCommunicationEv>:
	if (usb.rxReady)
     8d0:	4b0e      	ldr	r3, [pc, #56]	; (90c <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
     8d2:	7c5b      	ldrb	r3, [r3, #17]
     8d4:	b90b      	cbnz	r3, 8da <_ZN16Interfaces_Class18CheckCommunicationEv+0xa>
}
     8d6:	4620      	mov	r0, r4
     8d8:	4770      	bx	lr
{
     8da:	b510      	push	{r4, lr}
     8dc:	b094      	sub	sp, #80	; 0x50
		eventData	data;
		event*		next;
	};

inline event::event()
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     8de:	f64f 73ff 	movw	r3, #65535	; 0xffff
     8e2:	f8ad 3000 	strh.w	r3, [sp]
     8e6:	f8ad 3002 	strh.w	r3, [sp, #2]
     8ea:	2300      	movs	r3, #0
     8ec:	9301      	str	r3, [sp, #4]
	data = v;
     8ee:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     8f0:	9303      	str	r3, [sp, #12]
		r=usb.readData(comBuffer, sizeof(comBuffer));
     8f2:	2240      	movs	r2, #64	; 0x40
     8f4:	a904      	add	r1, sp, #16
     8f6:	4805      	ldr	r0, [pc, #20]	; (90c <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
     8f8:	4b05      	ldr	r3, [pc, #20]	; (910 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
     8fa:	4798      	blx	r3
     8fc:	4604      	mov	r4, r0
		listener.SendEventSelf(e);
     8fe:	4669      	mov	r1, sp
     900:	4804      	ldr	r0, [pc, #16]	; (914 <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
     902:	4b05      	ldr	r3, [pc, #20]	; (918 <_ZN16Interfaces_Class18CheckCommunicationEv+0x48>)
     904:	4798      	blx	r3
}
     906:	4620      	mov	r0, r4
     908:	b014      	add	sp, #80	; 0x50
     90a:	bd10      	pop	{r4, pc}
     90c:	200036cc 	.word	0x200036cc
     910:	0000aa65 	.word	0x0000aa65
     914:	2000332c 	.word	0x2000332c
     918:	00008da5 	.word	0x00008da5

0000091c <main>:

#include "main.h"


int main(void)
{
     91c:	b580      	push	{r7, lr}
	atmel_start_init();
     91e:	4b31      	ldr	r3, [pc, #196]	; (9e4 <main+0xc8>)
     920:	4798      	blx	r3
	
	usb.init();
     922:	4c31      	ldr	r4, [pc, #196]	; (9e8 <main+0xcc>)
     924:	4620      	mov	r0, r4
     926:	4b31      	ldr	r3, [pc, #196]	; (9ec <main+0xd0>)
     928:	4798      	blx	r3
	delay_ms(100);
     92a:	2064      	movs	r0, #100	; 0x64
     92c:	4b30      	ldr	r3, [pc, #192]	; (9f0 <main+0xd4>)
     92e:	4798      	blx	r3
     930:	4e30      	ldr	r6, [pc, #192]	; (9f4 <main+0xd8>)
     932:	4631      	mov	r1, r6
     934:	4620      	mov	r0, r4
     936:	4d30      	ldr	r5, [pc, #192]	; (9f8 <main+0xdc>)
     938:	47a8      	blx	r5
     93a:	4631      	mov	r1, r6
     93c:	4620      	mov	r0, r4
     93e:	47a8      	blx	r5
     940:	492e      	ldr	r1, [pc, #184]	; (9fc <main+0xe0>)
     942:	4620      	mov	r0, r4
     944:	47a8      	blx	r5
     946:	4631      	mov	r1, r6
     948:	4620      	mov	r0, r4
     94a:	47a8      	blx	r5
     94c:	492c      	ldr	r1, [pc, #176]	; (a00 <main+0xe4>)
     94e:	4620      	mov	r0, r4
     950:	47a8      	blx	r5
     952:	492c      	ldr	r1, [pc, #176]	; (a04 <main+0xe8>)
     954:	4620      	mov	r0, r4
     956:	47a8      	blx	r5
     958:	492b      	ldr	r1, [pc, #172]	; (a08 <main+0xec>)
     95a:	4620      	mov	r0, r4
     95c:	47a8      	blx	r5
     95e:	492b      	ldr	r1, [pc, #172]	; (a0c <main+0xf0>)
     960:	4620      	mov	r0, r4
     962:	47a8      	blx	r5
     964:	4631      	mov	r1, r6
     966:	4620      	mov	r0, r4
     968:	47a8      	blx	r5
     96a:	4631      	mov	r1, r6
     96c:	4620      	mov	r0, r4
     96e:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	memory.Init();
     970:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     974:	4826      	ldr	r0, [pc, #152]	; (a10 <main+0xf4>)
     976:	4b27      	ldr	r3, [pc, #156]	; (a14 <main+0xf8>)
     978:	4798      	blx	r3
	alu.Init();
     97a:	4f27      	ldr	r7, [pc, #156]	; (a18 <main+0xfc>)
     97c:	4638      	mov	r0, r7
     97e:	4b27      	ldr	r3, [pc, #156]	; (a1c <main+0x100>)
     980:	4798      	blx	r3
     982:	4927      	ldr	r1, [pc, #156]	; (a20 <main+0x104>)
     984:	4620      	mov	r0, r4
     986:	47a8      	blx	r5
     988:	4631      	mov	r1, r6
     98a:	4620      	mov	r0, r4
     98c:	47a8      	blx	r5
	usb<<"*** ALU initiated ***"<<NEWLINE;
	uint8_t	line= alu.GetSelectedAMMC();
     98e:	4638      	mov	r0, r7
     990:	4b24      	ldr	r3, [pc, #144]	; (a24 <main+0x108>)
     992:	4798      	blx	r3
     994:	4607      	mov	r7, r0
     996:	4924      	ldr	r1, [pc, #144]	; (a28 <main+0x10c>)
     998:	4620      	mov	r0, r4
     99a:	47a8      	blx	r5
     99c:	220a      	movs	r2, #10
     99e:	4639      	mov	r1, r7
     9a0:	4620      	mov	r0, r4
     9a2:	4b22      	ldr	r3, [pc, #136]	; (a2c <main+0x110>)
     9a4:	4798      	blx	r3
     9a6:	4631      	mov	r1, r6
     9a8:	4620      	mov	r0, r4
     9aa:	47a8      	blx	r5
	usb<<"Active line: "<<line<<NEWLINE;
	if (!pBIT)
     9ac:	4820      	ldr	r0, [pc, #128]	; (a30 <main+0x114>)
     9ae:	4b21      	ldr	r3, [pc, #132]	; (a34 <main+0x118>)
     9b0:	4798      	blx	r3
     9b2:	b988      	cbnz	r0, 9d8 <main+0xbc>
	{
		hvac.Stop();
     9b4:	2100      	movs	r1, #0
     9b6:	4820      	ldr	r0, [pc, #128]	; (a38 <main+0x11c>)
     9b8:	4b20      	ldr	r3, [pc, #128]	; (a3c <main+0x120>)
     9ba:	4798      	blx	r3
		hvac.Start();
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
     9bc:	4f0c      	ldr	r7, [pc, #48]	; (9f0 <main+0xd4>)
     9be:	4e0f      	ldr	r6, [pc, #60]	; (9fc <main+0xe0>)
     9c0:	4d09      	ldr	r5, [pc, #36]	; (9e8 <main+0xcc>)
     9c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     9c6:	47b8      	blx	r7
     9c8:	4631      	mov	r1, r6
     9ca:	4628      	mov	r0, r5
     9cc:	4c0a      	ldr	r4, [pc, #40]	; (9f8 <main+0xdc>)
     9ce:	47a0      	blx	r4
     9d0:	4908      	ldr	r1, [pc, #32]	; (9f4 <main+0xd8>)
     9d2:	4628      	mov	r0, r5
     9d4:	47a0      	blx	r4
     9d6:	e7f4      	b.n	9c2 <main+0xa6>
		hvac.Start();
     9d8:	2100      	movs	r1, #0
     9da:	4817      	ldr	r0, [pc, #92]	; (a38 <main+0x11c>)
     9dc:	4b18      	ldr	r3, [pc, #96]	; (a40 <main+0x124>)
     9de:	4798      	blx	r3
     9e0:	e7ec      	b.n	9bc <main+0xa0>
     9e2:	bf00      	nop
     9e4:	00001689 	.word	0x00001689
     9e8:	200036cc 	.word	0x200036cc
     9ec:	0000a97d 	.word	0x0000a97d
     9f0:	0000251d 	.word	0x0000251d
     9f4:	0000d1cc 	.word	0x0000d1cc
     9f8:	0000ae79 	.word	0x0000ae79
     9fc:	0000d618 	.word	0x0000d618
     a00:	0000d63c 	.word	0x0000d63c
     a04:	0000d648 	.word	0x0000d648
     a08:	0000d654 	.word	0x0000d654
     a0c:	0000d65c 	.word	0x0000d65c
     a10:	20000c10 	.word	0x20000c10
     a14:	00000b21 	.word	0x00000b21
     a18:	200005a4 	.word	0x200005a4
     a1c:	0000043d 	.word	0x0000043d
     a20:	0000d668 	.word	0x0000d668
     a24:	000002d5 	.word	0x000002d5
     a28:	0000d680 	.word	0x0000d680
     a2c:	0000aebd 	.word	0x0000aebd
     a30:	200016b8 	.word	0x200016b8
     a34:	00000c8b 	.word	0x00000c8b
     a38:	200016cc 	.word	0x200016cc
     a3c:	00001625 	.word	0x00001625
     a40:	000014a9 	.word	0x000014a9

00000a44 <_ZN21MemoryManagment_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
     a44:	b510      	push	{r4, lr}
     a46:	4604      	mov	r4, r0
     a48:	f200 606c 	addw	r0, r0, #1644	; 0x66c
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <_ZN21MemoryManagment_ClassD1Ev+0x28>)
     a4e:	4798      	blx	r3
     a50:	f504 60cd 	add.w	r0, r4, #1640	; 0x668
     a54:	4b06      	ldr	r3, [pc, #24]	; (a70 <_ZN21MemoryManagment_ClassD1Ev+0x2c>)
     a56:	4798      	blx	r3

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
     a58:	f204 40cc 	addw	r0, r4, #1228	; 0x4cc
     a5c:	4b05      	ldr	r3, [pc, #20]	; (a74 <_ZN21MemoryManagment_ClassD1Ev+0x30>)
     a5e:	4798      	blx	r3
     a60:	4620      	mov	r0, r4
     a62:	4b05      	ldr	r3, [pc, #20]	; (a78 <_ZN21MemoryManagment_ClassD1Ev+0x34>)
     a64:	4798      	blx	r3
{
} //~MemoryManagment_Class
     a66:	4620      	mov	r0, r4
     a68:	bd10      	pop	{r4, pc}
     a6a:	bf00      	nop
     a6c:	00000ba3 	.word	0x00000ba3
     a70:	00000837 	.word	0x00000837
     a74:	0000067f 	.word	0x0000067f
     a78:	000006e9 	.word	0x000006e9

00000a7c <_ZN21MemoryManagment_ClassC1Ev>:
MemoryManagment_Class::MemoryManagment_Class()
     a7c:	b538      	push	{r3, r4, r5, lr}
     a7e:	4604      	mov	r4, r0
     a80:	4b12      	ldr	r3, [pc, #72]	; (acc <_ZN21MemoryManagment_ClassC1Ev+0x50>)
     a82:	4798      	blx	r3
     a84:	f204 40cc 	addw	r0, r4, #1228	; 0x4cc
     a88:	4b11      	ldr	r3, [pc, #68]	; (ad0 <_ZN21MemoryManagment_ClassC1Ev+0x54>)
     a8a:	4798      	blx	r3
     a8c:	f504 60cd 	add.w	r0, r4, #1640	; 0x668
     a90:	4b10      	ldr	r3, [pc, #64]	; (ad4 <_ZN21MemoryManagment_ClassC1Ev+0x58>)
     a92:	4798      	blx	r3
     a94:	f204 606c 	addw	r0, r4, #1644	; 0x66c
     a98:	4b0f      	ldr	r3, [pc, #60]	; (ad8 <_ZN21MemoryManagment_ClassC1Ev+0x5c>)
     a9a:	4798      	blx	r3
    memset( _aucBuffer, 0, N ) ;
     a9c:	f44f 7500 	mov.w	r5, #512	; 0x200
     aa0:	462a      	mov	r2, r5
     aa2:	2100      	movs	r1, #0
     aa4:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
     aa8:	4b0c      	ldr	r3, [pc, #48]	; (adc <_ZN21MemoryManagment_ClassC1Ev+0x60>)
     aaa:	4798      	blx	r3
  _iHead = 0;
     aac:	2300      	movs	r3, #0
     aae:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
  _iTail = 0;
     ab2:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
     ab6:	f8c4 3954 	str.w	r3, [r4, #2388]	; 0x954
	_currentAddress=0;
     aba:	f8c4 3940 	str.w	r3, [r4, #2368]	; 0x940
	head=512;
     abe:	f8c4 5958 	str.w	r5, [r4, #2392]	; 0x958
	tail=0;
     ac2:	f8c4 395c 	str.w	r3, [r4, #2396]	; 0x95c
} //MemoryManagment_Class
     ac6:	4620      	mov	r0, r4
     ac8:	bd38      	pop	{r3, r4, r5, pc}
     aca:	bf00      	nop
     acc:	000006bd 	.word	0x000006bd
     ad0:	00000ce1 	.word	0x00000ce1
     ad4:	00000835 	.word	0x00000835
     ad8:	00000ba1 	.word	0x00000ba1
     adc:	0000ceed 	.word	0x0000ceed

00000ae0 <_ZN21MemoryManagment_Class9SetChipIDEm>:
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
	  diagnostics.troubleshoot(_code, printoverride);
  }

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
     ae0:	b538      	push	{r3, r4, r5, lr}
     ae2:	4604      	mov	r4, r0
     ae4:	460d      	mov	r5, r1
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
     ae6:	4b0b      	ldr	r3, [pc, #44]	; (b14 <_ZN21MemoryManagment_Class9SetChipIDEm+0x34>)
     ae8:	4798      	blx	r3
     aea:	f8c4 094c 	str.w	r0, [r4, #2380]	; 0x94c


	 if (!logArea.capacity) {
     aee:	b970      	cbnz	r0, b0e <_ZN21MemoryManagment_Class9SetChipIDEm+0x2e>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
     af0:	b135      	cbz	r5, b00 <_ZN21MemoryManagment_Class9SetChipIDEm+0x20>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
     af2:	f8c4 594c 	str.w	r5, [r4, #2380]	; 0x94c
			 logArea.supported = false;
     af6:	2300      	movs	r3, #0
     af8:	f884 3944 	strb.w	r3, [r4, #2372]	; 0x944
			 return true;
     afc:	2001      	movs	r0, #1
     afe:	bd38      	pop	{r3, r4, r5, pc}
	  diagnostics.troubleshoot(_code, printoverride);
     b00:	2200      	movs	r2, #0
     b02:	2103      	movs	r1, #3
     b04:	4804      	ldr	r0, [pc, #16]	; (b18 <_ZN21MemoryManagment_Class9SetChipIDEm+0x38>)
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <_ZN21MemoryManagment_Class9SetChipIDEm+0x3c>)
     b08:	4798      	blx	r3
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
			 return false;
     b0a:	2000      	movs	r0, #0
     b0c:	bd38      	pop	{r3, r4, r5, pc}
		 }

	 }
	 return true;
     b0e:	2001      	movs	r0, #1
 }
     b10:	bd38      	pop	{r3, r4, r5, pc}
     b12:	bf00      	nop
     b14:	000099f7 	.word	0x000099f7
     b18:	20002310 	.word	0x20002310
     b1c:	000088a9 	.word	0x000088a9

00000b20 <_ZN21MemoryManagment_Class4InitEm>:
bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
     b20:	b538      	push	{r3, r4, r5, lr}
     b22:	4604      	mov	r4, r0
     b24:	460d      	mov	r5, r1
		flash.Init();
     b26:	4805      	ldr	r0, [pc, #20]	; (b3c <_ZN21MemoryManagment_Class4InitEm+0x1c>)
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <_ZN21MemoryManagment_Class4InitEm+0x20>)
     b2a:	4798      	blx	r3
		eeprom.Init();
     b2c:	4805      	ldr	r0, [pc, #20]	; (b44 <_ZN21MemoryManagment_Class4InitEm+0x24>)
     b2e:	4b06      	ldr	r3, [pc, #24]	; (b48 <_ZN21MemoryManagment_Class4InitEm+0x28>)
     b30:	4798      	blx	r3
		SetChipID(flashChipSize);
     b32:	4629      	mov	r1, r5
     b34:	4620      	mov	r0, r4
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <_ZN21MemoryManagment_Class4InitEm+0x2c>)
     b38:	4798      	blx	r3
}
     b3a:	bd38      	pop	{r3, r4, r5, pc}
     b3c:	20003380 	.word	0x20003380
     b40:	00009929 	.word	0x00009929
     b44:	20003350 	.word	0x20003350
     b48:	0000913d 	.word	0x0000913d
     b4c:	00000ae1 	.word	0x00000ae1

00000b50 <_ZN21MemoryManagment_Class27ReadDeafultApplicationStateER9HVACState>:
	  handlerCtrState=PTR_CTR_STATE(cs);
	  uint32_t	r=flash.ReadAddress((uint8_t*)handlerCtrState,APP_STATE_ADDRESS,sizeof(appState));
	  return	r;
  }

uint32_t	MemoryManagment_Class::ReadDeafultApplicationState(HVACState& as){
     b50:	b510      	push	{r4, lr}
	handlerAppState=PTR_HVAC_STATE(&as);
     b52:	f8c0 193c 	str.w	r1, [r0, #2364]	; 0x93c
	uint32_t	add=(uint32_t )(&flashMap->hvacDefaultState);
     b56:	4b04      	ldr	r3, [pc, #16]	; (b68 <_ZN21MemoryManagment_Class27ReadDeafultApplicationStateER9HVACState+0x18>)
     b58:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
     b5a:	2374      	movs	r3, #116	; 0x74
     b5c:	32cc      	adds	r2, #204	; 0xcc
     b5e:	4803      	ldr	r0, [pc, #12]	; (b6c <_ZN21MemoryManagment_Class27ReadDeafultApplicationStateER9HVACState+0x1c>)
     b60:	4c03      	ldr	r4, [pc, #12]	; (b70 <_ZN21MemoryManagment_Class27ReadDeafultApplicationStateER9HVACState+0x20>)
     b62:	47a0      	blx	r4
	return	r;
}
     b64:	bd10      	pop	{r4, pc}
     b66:	bf00      	nop
     b68:	200016b4 	.word	0x200016b4
     b6c:	20003380 	.word	0x20003380
     b70:	000099bd 	.word	0x000099bd

00000b74 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
	 uint32_t	r=flash.WriteAddress((uint8_t*)handlerCtrState,APP_STATE_ADDRESS,sizeof(appState));
	 
	 return	r;
 }
 
     b74:	b510      	push	{r4, lr}
     b76:	4c05      	ldr	r4, [pc, #20]	; (b8c <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x18>)
     b78:	4620      	mov	r0, r4
     b7a:	4b05      	ldr	r3, [pc, #20]	; (b90 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x1c>)
     b7c:	4798      	blx	r3
     b7e:	4a05      	ldr	r2, [pc, #20]	; (b94 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x20>)
     b80:	4905      	ldr	r1, [pc, #20]	; (b98 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x24>)
     b82:	4620      	mov	r0, r4
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x28>)
     b86:	4798      	blx	r3
     b88:	bd10      	pop	{r4, pc}
     b8a:	bf00      	nop
     b8c:	20000c10 	.word	0x20000c10
     b90:	00000a7d 	.word	0x00000a7d
     b94:	20000000 	.word	0x20000000
     b98:	00000a45 	.word	0x00000a45
     b9c:	0000b2dd 	.word	0x0000b2dd

00000ba0 <_ZN18MemoryStruct_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
{
} //MemoryStruct_Class
     ba0:	4770      	bx	lr

00000ba2 <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
{
} //~MemoryStruct_Class
     ba2:	4770      	bx	lr

00000ba4 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam>:
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
	uint32_t	r=ReadConfigurationData(cd,add);
	return	r;
}

uint32_t	MemoryStruct_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
     ba4:	b510      	push	{r4, lr}
	handlerConfigData=PTR_CONFIG_DATA(&cd);
     ba6:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
     baa:	23ac      	movs	r3, #172	; 0xac
     bac:	4801      	ldr	r0, [pc, #4]	; (bb4 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x10>)
     bae:	4c02      	ldr	r4, [pc, #8]	; (bb8 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x14>)
     bb0:	47a0      	blx	r4
	return	r;
}
     bb2:	bd10      	pop	{r4, pc}
     bb4:	20003380 	.word	0x20003380
     bb8:	000099bd 	.word	0x000099bd

00000bbc <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
     bbc:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x10>)
     bc0:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadConfigurationData(cd,add);
     bc2:	3210      	adds	r2, #16
     bc4:	4b02      	ldr	r3, [pc, #8]	; (bd0 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x14>)
     bc6:	4798      	blx	r3
}
     bc8:	bd08      	pop	{r3, pc}
     bca:	bf00      	nop
     bcc:	200016b4 	.word	0x200016b4
     bd0:	00000ba5 	.word	0x00000ba5

00000bd4 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadLastConfigurationData(ConfigurationData& cd){
     bd4:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
     bd6:	4b03      	ldr	r3, [pc, #12]	; (be4 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x10>)
     bd8:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadConfigurationData(cd,add);
     bda:	3210      	adds	r2, #16
     bdc:	4b02      	ldr	r3, [pc, #8]	; (be8 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x14>)
     bde:	4798      	blx	r3
}
     be0:	bd08      	pop	{r3, pc}
     be2:	bf00      	nop
     be4:	200016b4 	.word	0x200016b4
     be8:	00000ba5 	.word	0x00000ba5

00000bec <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
     bec:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
     bee:	4b03      	ldr	r3, [pc, #12]	; (bfc <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x10>)
     bf0:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadConfigurationData(cd,add);
     bf2:	3210      	adds	r2, #16
     bf4:	4b02      	ldr	r3, [pc, #8]	; (c00 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x14>)
     bf6:	4798      	blx	r3
}
     bf8:	bd08      	pop	{r3, pc}
     bfa:	bf00      	nop
     bfc:	200016b4 	.word	0x200016b4
     c00:	00000ba5 	.word	0x00000ba5

00000c04 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv>:

uint32_t	MemoryStruct_Class::ReadCRCConfigurationData(void){
     c04:	b510      	push	{r4, lr}
     c06:	b082      	sub	sp, #8
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
     c08:	4b05      	ldr	r3, [pc, #20]	; (c20 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x1c>)
     c0a:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=flash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
     c0c:	2304      	movs	r3, #4
     c0e:	3210      	adds	r2, #16
     c10:	eb0d 0103 	add.w	r1, sp, r3
     c14:	4803      	ldr	r0, [pc, #12]	; (c24 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x20>)
     c16:	4c04      	ldr	r4, [pc, #16]	; (c28 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x24>)
     c18:	47a0      	blx	r4
	return	crc;
}
     c1a:	9801      	ldr	r0, [sp, #4]
     c1c:	b002      	add	sp, #8
     c1e:	bd10      	pop	{r4, pc}
     c20:	200016b4 	.word	0x200016b4
     c24:	20003380 	.word	0x20003380
     c28:	000099bd 	.word	0x000099bd

00000c2c <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	MemoryStruct_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
     c2c:	b510      	push	{r4, lr}
	handlerConfigData=PTR_CONFIG_DATA(&cd);
     c2e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
	uint32_t	w=flash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
     c32:	23ac      	movs	r3, #172	; 0xac
     c34:	4801      	ldr	r0, [pc, #4]	; (c3c <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x10>)
     c36:	4c02      	ldr	r4, [pc, #8]	; (c40 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x14>)
     c38:	47a0      	blx	r4
	return	w;
}
     c3a:	bd10      	pop	{r4, pc}
     c3c:	20003380 	.word	0x20003380
     c40:	00009989 	.word	0x00009989

00000c44 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData>:
uint32_t	MemoryStruct_Class::WriteDefaultConfiguration(ConfigurationData& cd){
     c44:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
     c46:	4b03      	ldr	r3, [pc, #12]	; (c54 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x10>)
     c48:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteConfigurationData(cd,add);
     c4a:	3210      	adds	r2, #16
     c4c:	4b02      	ldr	r3, [pc, #8]	; (c58 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x14>)
     c4e:	4798      	blx	r3
	return	w;
}
     c50:	bd08      	pop	{r3, pc}
     c52:	bf00      	nop
     c54:	200016b4 	.word	0x200016b4
     c58:	00000c2d 	.word	0x00000c2d

00000c5c <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm>:

uint32_t	MemoryStruct_Class::WriteCRCConfigurationData(uint32_t crc){
     c5c:	b510      	push	{r4, lr}
     c5e:	b082      	sub	sp, #8
     c60:	a802      	add	r0, sp, #8
     c62:	f840 1d04 	str.w	r1, [r0, #-4]!
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
     c66:	4b05      	ldr	r3, [pc, #20]	; (c7c <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x20>)
     c68:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=flash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
     c6a:	2304      	movs	r3, #4
     c6c:	3210      	adds	r2, #16
     c6e:	4601      	mov	r1, r0
     c70:	4803      	ldr	r0, [pc, #12]	; (c80 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x24>)
     c72:	4c04      	ldr	r4, [pc, #16]	; (c84 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x28>)
     c74:	47a0      	blx	r4
	return	w;
}
     c76:	b002      	add	sp, #8
     c78:	bd10      	pop	{r4, pc}
     c7a:	bf00      	nop
     c7c:	200016b4 	.word	0x200016b4
     c80:	20003380 	.word	0x20003380
     c84:	00009989 	.word	0x00009989

00000c88 <_ZN10PBIT_ClassD1Ev>:
} //PBIT_Class

// default destructor
PBIT_Class::~PBIT_Class()
{
} //~PBIT_Class
     c88:	4770      	bx	lr

00000c8a <_ZN10PBIT_ClasscvbEv>:
	}
	return isOK;
}

PBIT_Class::operator bool(){
	return	isOK;
     c8a:	7800      	ldrb	r0, [r0, #0]
}
     c8c:	4770      	bx	lr
	...

00000c90 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
     c90:	b538      	push	{r3, r4, r5, lr}
     c92:	4605      	mov	r5, r0
     c94:	460c      	mov	r4, r1
	communicator.GetStatus(cs);
     c96:	4808      	ldr	r0, [pc, #32]	; (cb8 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x28>)
     c98:	4b08      	ldr	r3, [pc, #32]	; (cbc <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x2c>)
     c9a:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
	uint32_t	v=*s;
     c9c:	6820      	ldr	r0, [r4, #0]

	for (int i=0;i<32;i++)
     c9e:	2300      	movs	r3, #0
	{
		v+=(0x01<<i)&(v);
     ca0:	2101      	movs	r1, #1
     ca2:	fa01 f203 	lsl.w	r2, r1, r3
     ca6:	4002      	ands	r2, r0
     ca8:	4410      	add	r0, r2
	for (int i=0;i<32;i++)
     caa:	3301      	adds	r3, #1
     cac:	2b20      	cmp	r3, #32
     cae:	d1f8      	bne.n	ca2 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x12>
		
	}
	if (v==0)
     cb0:	b908      	cbnz	r0, cb6 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x26>
	{
		isOK=true;
     cb2:	2301      	movs	r3, #1
     cb4:	702b      	strb	r3, [r5, #0]
	}
	return	v;
}
     cb6:	bd38      	pop	{r3, r4, r5, pc}
     cb8:	20000b94 	.word	0x20000b94
     cbc:	0000087d 	.word	0x0000087d

00000cc0 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:

     cc0:	b508      	push	{r3, lr}
     cc2:	4a03      	ldr	r2, [pc, #12]	; (cd0 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
     cc4:	4903      	ldr	r1, [pc, #12]	; (cd4 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x14>)
     cc6:	4804      	ldr	r0, [pc, #16]	; (cd8 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x18>)
     cc8:	4b04      	ldr	r3, [pc, #16]	; (cdc <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x1c>)
     cca:	4798      	blx	r3
     ccc:	bd08      	pop	{r3, pc}
     cce:	bf00      	nop
     cd0:	20000000 	.word	0x20000000
     cd4:	00000c89 	.word	0x00000c89
     cd8:	200016b8 	.word	0x200016b8
     cdc:	0000b2dd 	.word	0x0000b2dd

00000ce0 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
     ce0:	b510      	push	{r4, lr}
     ce2:	4604      	mov	r4, r0
	:lastValidSaveWorkingStateForGAINIndex(0)
     ce4:	4b03      	ldr	r3, [pc, #12]	; (cf4 <_ZN19PersistenceServicesC1Ev+0x14>)
     ce6:	4798      	blx	r3
     ce8:	2300      	movs	r3, #0
     cea:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	{
	}
     cee:	4620      	mov	r0, r4
     cf0:	bd10      	pop	{r4, pc}
     cf2:	bf00      	nop
     cf4:	0000067d 	.word	0x0000067d

00000cf8 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
	bool	result(true);

	data.commons.version = kConfigurationDataVersion;
     cf8:	2304      	movs	r3, #4
     cfa:	604b      	str	r3, [r1, #4]
	data.commons.size = kConfigurationDataSize;
     cfc:	23ac      	movs	r3, #172	; 0xac
     cfe:	600b      	str	r3, [r1, #0]
	data.commons.partNumber = PARTNUMBER;
     d00:	f240 730c 	movw	r3, #1804	; 0x70c
     d04:	608b      	str	r3, [r1, #8]


	

	return result;
	}
     d06:	2001      	movs	r0, #1
     d08:	4770      	bx	lr

00000d0a <_ZN19PersistenceServices23readCycleDictionaryAreaER15CycleDictionary>:
		}


	
	return result;
	}
     d0a:	2000      	movs	r0, #0
     d0c:	4770      	bx	lr

00000d0e <_ZN19PersistenceServices20readCycleDescriptionER16CycleDescriptionh>:


		}

	return result;
	}
     d0e:	2000      	movs	r0, #0
     d10:	4770      	bx	lr
	...

00000d14 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData>:
	invalidatePersistentArea(kNVM2,FRAMProxy.persistentConfigurationArea.header);

	}

bool PersistenceServices::readPersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
     d14:	b084      	sub	sp, #16
	{
	NVMHeader	header;
	bool		result;


	result = (header.magic == validMagic) && (header.size == size);
     d16:	9a01      	ldr	r2, [sp, #4]
     d18:	4b0e      	ldr	r3, [pc, #56]	; (d54 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x40>)
     d1a:	429a      	cmp	r2, r3
     d1c:	d013      	beq.n	d46 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x32>
     d1e:	2000      	movs	r0, #0
	result &= (data.version == kPersistentConfigurationDataVersion);
     d20:	684b      	ldr	r3, [r1, #4]
	result &= (data.size == kPersistentConfigurationDataSize);
     d22:	680a      	ldr	r2, [r1, #0]
	return result;
     d24:	2b02      	cmp	r3, #2
     d26:	bf08      	it	eq
     d28:	2a38      	cmpeq	r2, #56	; 0x38
     d2a:	bf0c      	ite	eq
     d2c:	2301      	moveq	r3, #1
     d2e:	2300      	movne	r3, #0
	result &= (data.partNumber == PARTNUMBER);
     d30:	6889      	ldr	r1, [r1, #8]
	return result;
     d32:	f240 720c 	movw	r2, #1804	; 0x70c
     d36:	4291      	cmp	r1, r2
     d38:	bf14      	ite	ne
     d3a:	2300      	movne	r3, #0
     d3c:	f003 0301 	andeq.w	r3, r3, #1
	}
     d40:	4018      	ands	r0, r3
     d42:	b004      	add	sp, #16
     d44:	4770      	bx	lr
	result = (header.magic == validMagic) && (header.size == size);
     d46:	9802      	ldr	r0, [sp, #8]
     d48:	2844      	cmp	r0, #68	; 0x44
     d4a:	bf14      	ite	ne
     d4c:	2000      	movne	r0, #0
     d4e:	2001      	moveq	r0, #1
     d50:	e7e6      	b.n	d20 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0xc>
     d52:	bf00      	nop
     d54:	14031869 	.word	0x14031869

00000d58 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData>:
	data.version = kPersistentConfigurationDataVersion;
     d58:	2302      	movs	r3, #2
     d5a:	604b      	str	r3, [r1, #4]
	data.size = kPersistentConfigurationDataSize;
     d5c:	2338      	movs	r3, #56	; 0x38
     d5e:	600b      	str	r3, [r1, #0]
	data.partNumber = PARTNUMBER;
     d60:	f240 730c 	movw	r3, #1804	; 0x70c
     d64:	608b      	str	r3, [r1, #8]
	}
     d66:	2001      	movs	r0, #1
     d68:	4770      	bx	lr

00000d6a <_ZN19PersistenceServices23saveWorkingStateForGAINER9HVACState>:
	uint8	nextValidSaveWorkingStateForGAINIndex((lastValidSaveWorkingStateForGAINIndex + 1) % 2);
     d6a:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
     d6e:	3301      	adds	r3, #1
     d70:	f003 0301 	and.w	r3, r3, #1
     d74:	bf48      	it	mi
     d76:	425b      	negmi	r3, r3
     d78:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
     d7c:	4770      	bx	lr

00000d7e <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:
	{
     d7e:	4770      	bx	lr

00000d80 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
{
     d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d82:	4605      	mov	r5, r0
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
     d84:	4b0f      	ldr	r3, [pc, #60]	; (dc4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x44>)
     d86:	685c      	ldr	r4, [r3, #4]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
     d88:	f100 06ec 	add.w	r6, r0, #236	; 0xec
     d8c:	4631      	mov	r1, r6
     d8e:	480e      	ldr	r0, [pc, #56]	; (dc8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x48>)
     d90:	4b0e      	ldr	r3, [pc, #56]	; (dcc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x4c>)
     d92:	4798      	blx	r3
	if ((verUp>0))
     d94:	b108      	cbz	r0, d9a <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x1a>
		return false;
     d96:	2000      	movs	r0, #0
     d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
     d9a:	480b      	ldr	r0, [pc, #44]	; (dc8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x48>)
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x50>)
     d9e:	4798      	blx	r3
     da0:	4607      	mov	r7, r0
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     da2:	22ac      	movs	r2, #172	; 0xac
     da4:	4631      	mov	r1, r6
     da6:	4628      	mov	r0, r5
     da8:	4b0a      	ldr	r3, [pc, #40]	; (dd4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x54>)
     daa:	4798      	blx	r3
		if (refCRC==crc)
     dac:	4287      	cmp	r7, r0
     dae:	d001      	beq.n	db4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x34>
			return	false;
     db0:	2000      	movs	r0, #0
}
     db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return (verUp>ver);
     db4:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
     db8:	4284      	cmp	r4, r0
     dba:	bf2c      	ite	cs
     dbc:	2000      	movcs	r0, #0
     dbe:	2001      	movcc	r0, #1
     dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dc2:	bf00      	nop
     dc4:	0000d478 	.word	0x0000d478
     dc8:	2000127c 	.word	0x2000127c
     dcc:	00000bed 	.word	0x00000bed
     dd0:	00000c05 	.word	0x00000c05
     dd4:	00000681 	.word	0x00000681

00000dd8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
     dd8:	b570      	push	{r4, r5, r6, lr}
     dda:	4605      	mov	r5, r0
     ddc:	460e      	mov	r6, r1
	uint32_t	refCRC=memory.ReadCRCApplicationState();
     dde:	4807      	ldr	r0, [pc, #28]	; (dfc <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x24>)
     de0:	4b07      	ldr	r3, [pc, #28]	; (e00 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x28>)
     de2:	4798      	blx	r3
     de4:	4604      	mov	r4, r0
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
     de6:	2274      	movs	r2, #116	; 0x74
     de8:	4631      	mov	r1, r6
     dea:	4628      	mov	r0, r5
     dec:	4b05      	ldr	r3, [pc, #20]	; (e04 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x2c>)
     dee:	4798      	blx	r3
	return (refCRC==crc);
}
     df0:	4284      	cmp	r4, r0
     df2:	bf14      	ite	ne
     df4:	2000      	movne	r0, #0
     df6:	2001      	moveq	r0, #1
     df8:	bd70      	pop	{r4, r5, r6, pc}
     dfa:	bf00      	nop
     dfc:	20001278 	.word	0x20001278
     e00:	00000855 	.word	0x00000855
     e04:	00000681 	.word	0x00000681

00000e08 <_ZN12States_Class15SetCurrentStateER9HVACState>:
	cd=&configuration;
}
void	States_Class::SetConfigurationData(ConfigurationData& cd){
	configuration=cd;
}
void	States_Class::SetCurrentState(HVACState& hs){
     e08:	b508      	push	{r3, lr}
	state=hs;
     e0a:	2274      	movs	r2, #116	; 0x74
     e0c:	f500 7049 	add.w	r0, r0, #804	; 0x324
     e10:	4b01      	ldr	r3, [pc, #4]	; (e18 <_ZN12States_Class15SetCurrentStateER9HVACState+0x10>)
     e12:	4798      	blx	r3
     e14:	bd08      	pop	{r3, pc}
     e16:	bf00      	nop
     e18:	0000cdb9 	.word	0x0000cdb9

00000e1c <_ZN12States_ClassD1Ev>:
States_Class::~States_Class()
     e1c:	b510      	push	{r4, lr}
     e1e:	4604      	mov	r4, r0
     e20:	4b05      	ldr	r3, [pc, #20]	; (e38 <_ZN12States_ClassD1Ev+0x1c>)
     e22:	6003      	str	r3, [r0, #0]
     e24:	f500 7011 	add.w	r0, r0, #580	; 0x244
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <_ZN12States_ClassD1Ev+0x20>)
     e2a:	4798      	blx	r3
     e2c:	4620      	mov	r0, r4
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <_ZN12States_ClassD1Ev+0x24>)
     e30:	4798      	blx	r3
} //~States_Class
     e32:	4620      	mov	r0, r4
     e34:	bd10      	pop	{r4, pc}
     e36:	bf00      	nop
     e38:	0000d698 	.word	0x0000d698
     e3c:	00000879 	.word	0x00000879
     e40:	000005e9 	.word	0x000005e9

00000e44 <_ZN12States_ClassC1Ev>:
States_Class::States_Class(void)
     e44:	b510      	push	{r4, lr}
     e46:	4604      	mov	r4, r0
     e48:	4b14      	ldr	r3, [pc, #80]	; (e9c <_ZN12States_ClassC1Ev+0x58>)
     e4a:	4798      	blx	r3
     e4c:	f504 7011 	add.w	r0, r4, #580	; 0x244
     e50:	4b13      	ldr	r3, [pc, #76]	; (ea0 <_ZN12States_ClassC1Ev+0x5c>)
     e52:	4798      	blx	r3
     e54:	4b13      	ldr	r3, [pc, #76]	; (ea4 <_ZN12States_ClassC1Ev+0x60>)
     e56:	6023      	str	r3, [r4, #0]
	listener.eventHandler = NULL;
     e58:	2300      	movs	r3, #0
     e5a:	4a13      	ldr	r2, [pc, #76]	; (ea8 <_ZN12States_ClassC1Ev+0x64>)
     e5c:	6053      	str	r3, [r2, #4]
 	state.currentState = kGAINStateReset;
     e5e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
	state.callingState = kGAINStateReset;
     e62:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
	state.internalCateringState = 0;
     e66:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	state.targetUDC = 0.0;
     e6a:	2200      	movs	r2, #0
     e6c:	f8c4 2354 	str.w	r2, [r4, #852]	; 0x354
	state.cycleDuration = 0;
     e70:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	state.inStateTime = 0;
     e74:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
	state.remainingTime = 0;
     e78:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
	state.waitingExceededTime = 0;
     e7c:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
	state.fansOnAfterCateringCycleTime = forever;
     e80:	4a0a      	ldr	r2, [pc, #40]	; (eac <_ZN12States_ClassC1Ev+0x68>)
     e82:	6812      	ldr	r2, [r2, #0]
     e84:	f8c4 2378 	str.w	r2, [r4, #888]	; 0x378
	state.savedDoorLatchState = true;
     e88:	f894 2395 	ldrb.w	r2, [r4, #917]	; 0x395
	state.reedRelayOpen = false;
     e8c:	f042 0202 	orr.w	r2, r2, #2
     e90:	f363 0282 	bfi	r2, r3, #2, #1
     e94:	f884 2395 	strb.w	r2, [r4, #917]	; 0x395
	}
     e98:	4620      	mov	r0, r4
     e9a:	bd10      	pop	{r4, pc}
     e9c:	000005dd 	.word	0x000005dd
     ea0:	0000087b 	.word	0x0000087b
     ea4:	0000d698 	.word	0x0000d698
     ea8:	2000332c 	.word	0x2000332c
     eac:	0000ebd4 	.word	0x0000ebd4

00000eb0 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh>:
	{
     eb0:	b508      	push	{r3, lr}
	bool	result(memory.readCycleDescription(cycle, id));
     eb2:	4802      	ldr	r0, [pc, #8]	; (ebc <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0xc>)
     eb4:	4b02      	ldr	r3, [pc, #8]	; (ec0 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x10>)
     eb6:	4798      	blx	r3
	}
     eb8:	bd08      	pop	{r3, pc}
     eba:	bf00      	nop
     ebc:	200010dc 	.word	0x200010dc
     ec0:	00000d0f 	.word	0x00000d0f

00000ec4 <_ZN12States_Class26setPersistentConfigurationEh>:
	{
     ec4:	b510      	push	{r4, lr}
     ec6:	4604      	mov	r4, r0
     ec8:	460a      	mov	r2, r1
	persistentConfiguration.cycleDescriptionID = cycleID;
     eca:	f8c4 12f0 	str.w	r1, [r4, #752]	; 0x2f0
	readCycleDescription(persistentConfiguration.cycle, persistentConfiguration.cycleDescriptionID);
     ece:	f500 713d 	add.w	r1, r0, #756	; 0x2f4
     ed2:	4b04      	ldr	r3, [pc, #16]	; (ee4 <_ZN12States_Class26setPersistentConfigurationEh+0x20>)
     ed4:	4798      	blx	r3
	memory.writePersistentConfigurationDataArea(persistentConfiguration);
     ed6:	f504 7139 	add.w	r1, r4, #740	; 0x2e4
     eda:	4803      	ldr	r0, [pc, #12]	; (ee8 <_ZN12States_Class26setPersistentConfigurationEh+0x24>)
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <_ZN12States_Class26setPersistentConfigurationEh+0x28>)
     ede:	4798      	blx	r3
     ee0:	bd10      	pop	{r4, pc}
     ee2:	bf00      	nop
     ee4:	00000eb1 	.word	0x00000eb1
     ee8:	200010dc 	.word	0x200010dc
     eec:	00000d59 	.word	0x00000d59

00000ef0 <_ZN12States_Class34setPersistentConfigurationDefaultsEv>:
	{
     ef0:	b508      	push	{r3, lr}
	setPersistentConfiguration(0);
     ef2:	2100      	movs	r1, #0
     ef4:	4b01      	ldr	r3, [pc, #4]	; (efc <_ZN12States_Class34setPersistentConfigurationDefaultsEv+0xc>)
     ef6:	4798      	blx	r3
     ef8:	bd08      	pop	{r3, pc}
     efa:	bf00      	nop
     efc:	00000ec5 	.word	0x00000ec5

00000f00 <_ZN12States_Class21handleStateInitializeEm>:
	{
     f00:	b570      	push	{r4, r5, r6, lr}
     f02:	b084      	sub	sp, #16
     f04:	460e      	mov	r6, r1
     f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
     f0a:	f8ad 3000 	strh.w	r3, [sp]
     f0e:	f8ad 3002 	strh.w	r3, [sp, #2]
     f12:	2300      	movs	r3, #0
     f14:	9301      	str	r3, [sp, #4]
	data = v;
     f16:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     f18:	9303      	str	r3, [sp, #12]
     f1a:	4c19      	ldr	r4, [pc, #100]	; (f80 <_ZN12States_Class21handleStateInitializeEm+0x80>)
     f1c:	4919      	ldr	r1, [pc, #100]	; (f84 <_ZN12States_Class21handleStateInitializeEm+0x84>)
     f1e:	4620      	mov	r0, r4
     f20:	4d19      	ldr	r5, [pc, #100]	; (f88 <_ZN12States_Class21handleStateInitializeEm+0x88>)
     f22:	47a8      	blx	r5
     f24:	220a      	movs	r2, #10
     f26:	4631      	mov	r1, r6
     f28:	4620      	mov	r0, r4
     f2a:	4b18      	ldr	r3, [pc, #96]	; (f8c <_ZN12States_Class21handleStateInitializeEm+0x8c>)
     f2c:	4798      	blx	r3
     f2e:	4918      	ldr	r1, [pc, #96]	; (f90 <_ZN12States_Class21handleStateInitializeEm+0x90>)
     f30:	4620      	mov	r0, r4
     f32:	47a8      	blx	r5
	listener.CheckEvent();
     f34:	4817      	ldr	r0, [pc, #92]	; (f94 <_ZN12States_Class21handleStateInitializeEm+0x94>)
     f36:	4b18      	ldr	r3, [pc, #96]	; (f98 <_ZN12States_Class21handleStateInitializeEm+0x98>)
     f38:	4798      	blx	r3
	if (pBIT.isOK)
     f3a:	4b18      	ldr	r3, [pc, #96]	; (f9c <_ZN12States_Class21handleStateInitializeEm+0x9c>)
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	b90b      	cbnz	r3, f44 <_ZN12States_Class21handleStateInitializeEm+0x44>
	}
     f40:	b004      	add	sp, #16
     f42:	bd70      	pop	{r4, r5, r6, pc}
     f44:	4625      	mov	r5, r4
     f46:	4916      	ldr	r1, [pc, #88]	; (fa0 <_ZN12States_Class21handleStateInitializeEm+0xa0>)
     f48:	4620      	mov	r0, r4
     f4a:	4c0f      	ldr	r4, [pc, #60]	; (f88 <_ZN12States_Class21handleStateInitializeEm+0x88>)
     f4c:	47a0      	blx	r4
     f4e:	4910      	ldr	r1, [pc, #64]	; (f90 <_ZN12States_Class21handleStateInitializeEm+0x90>)
     f50:	4628      	mov	r0, r5
     f52:	47a0      	blx	r4
	e.eventClass = kGAINEventClass;
     f54:	f44f 7300 	mov.w	r3, #512	; 0x200
     f58:	f8ad 3000 	strh.w	r3, [sp]
	e.eventType = kGAINSwitchStateEvent;
     f5c:	f8ad 3002 	strh.w	r3, [sp, #2]
	e.data.wordData[0] = newState;
     f60:	2303      	movs	r3, #3
     f62:	f8ad 3008 	strh.w	r3, [sp, #8]
	e.data.wordData[1] = data;
     f66:	2300      	movs	r3, #0
     f68:	f8ad 300a 	strh.w	r3, [sp, #10]
			listener.SendEventSelf(e);
     f6c:	4c09      	ldr	r4, [pc, #36]	; (f94 <_ZN12States_Class21handleStateInitializeEm+0x94>)
     f6e:	4669      	mov	r1, sp
     f70:	4620      	mov	r0, r4
     f72:	4b0c      	ldr	r3, [pc, #48]	; (fa4 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
     f74:	4798      	blx	r3
		listener.CheckEvent();
     f76:	4620      	mov	r0, r4
     f78:	4b07      	ldr	r3, [pc, #28]	; (f98 <_ZN12States_Class21handleStateInitializeEm+0x98>)
     f7a:	4798      	blx	r3
	}
     f7c:	e7e0      	b.n	f40 <_ZN12States_Class21handleStateInitializeEm+0x40>
     f7e:	bf00      	nop
     f80:	200036cc 	.word	0x200036cc
     f84:	0000d69c 	.word	0x0000d69c
     f88:	0000ae79 	.word	0x0000ae79
     f8c:	0000aee5 	.word	0x0000aee5
     f90:	0000d1cc 	.word	0x0000d1cc
     f94:	2000332c 	.word	0x2000332c
     f98:	00008e8d 	.word	0x00008e8d
     f9c:	200016b8 	.word	0x200016b8
     fa0:	0000d6c0 	.word	0x0000d6c0
     fa4:	00008da5 	.word	0x00008da5

00000fa8 <_ZN12States_Class17handleStateResumeEm>:
	{
     fa8:	b530      	push	{r4, r5, lr}
     faa:	b085      	sub	sp, #20
     fac:	4604      	mov	r4, r0
     fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
     fb2:	f8ad 3000 	strh.w	r3, [sp]
     fb6:	f8ad 3002 	strh.w	r3, [sp, #2]
     fba:	2300      	movs	r3, #0
     fbc:	9301      	str	r3, [sp, #4]
	data = v;
     fbe:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     fc0:	9303      	str	r3, [sp, #12]
	uint8	currentState(state.currentState);
     fc2:	f8d0 5340 	ldr.w	r5, [r0, #832]	; 0x340
	memory.restoreWorkingStateForGAIN(state);
     fc6:	f500 7149 	add.w	r1, r0, #804	; 0x324
     fca:	481d      	ldr	r0, [pc, #116]	; (1040 <_ZN12States_Class17handleStateResumeEm+0x98>)
     fcc:	4b1d      	ldr	r3, [pc, #116]	; (1044 <_ZN12States_Class17handleStateResumeEm+0x9c>)
     fce:	4798      	blx	r3
        switch (state.currentState)
     fd0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
     fd4:	2b09      	cmp	r3, #9
     fd6:	d00d      	beq.n	ff4 <_ZN12States_Class17handleStateResumeEm+0x4c>
     fd8:	2b0a      	cmp	r3, #10
     fda:	d024      	beq.n	1026 <_ZN12States_Class17handleStateResumeEm+0x7e>
	e.eventClass = kGAINEventClass;
     fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
     fe0:	f8ad 2000 	strh.w	r2, [sp]
	e.eventType = kGAINSwitchStateEvent;
     fe4:	f8ad 2002 	strh.w	r2, [sp, #2]
            prepareStateChangeEvent(e, state.currentState);
     fe8:	f8ad 3008 	strh.w	r3, [sp, #8]
	e.data.wordData[1] = data;
     fec:	2300      	movs	r3, #0
     fee:	f8ad 300a 	strh.w	r3, [sp, #10]
     ff2:	e00b      	b.n	100c <_ZN12States_Class17handleStateResumeEm+0x64>
	e.eventClass = kGAINEventClass;
     ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
     ff8:	f8ad 3000 	strh.w	r3, [sp]
	e.eventType = kGAINSwitchStateEvent;
     ffc:	f8ad 3002 	strh.w	r3, [sp, #2]
	e.data.wordData[0] = newState;
    1000:	2309      	movs	r3, #9
    1002:	f8ad 3008 	strh.w	r3, [sp, #8]
	e.data.wordData[1] = data;
    1006:	2301      	movs	r3, #1
    1008:	f8ad 300a 	strh.w	r3, [sp, #10]
	state.currentState = currentState;
    100c:	b2ed      	uxtb	r5, r5
    100e:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340
	listener.CheckEvent();
    1012:	4c0d      	ldr	r4, [pc, #52]	; (1048 <_ZN12States_Class17handleStateResumeEm+0xa0>)
    1014:	4620      	mov	r0, r4
    1016:	4b0d      	ldr	r3, [pc, #52]	; (104c <_ZN12States_Class17handleStateResumeEm+0xa4>)
    1018:	4798      	blx	r3
	listener.SendEventSelf(e);
    101a:	4669      	mov	r1, sp
    101c:	4620      	mov	r0, r4
    101e:	4b0c      	ldr	r3, [pc, #48]	; (1050 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    1020:	4798      	blx	r3
	}
    1022:	b005      	add	sp, #20
    1024:	bd30      	pop	{r4, r5, pc}
	e.eventClass = kGAINEventClass;
    1026:	f44f 7300 	mov.w	r3, #512	; 0x200
    102a:	f8ad 3000 	strh.w	r3, [sp]
	e.eventType = kGAINSwitchStateEvent;
    102e:	f8ad 3002 	strh.w	r3, [sp, #2]
	e.data.wordData[0] = newState;
    1032:	230a      	movs	r3, #10
    1034:	f8ad 3008 	strh.w	r3, [sp, #8]
	e.data.wordData[1] = data;
    1038:	2300      	movs	r3, #0
    103a:	f8ad 300a 	strh.w	r3, [sp, #10]
    103e:	e7e5      	b.n	100c <_ZN12States_Class17handleStateResumeEm+0x64>
    1040:	200010dc 	.word	0x200010dc
    1044:	00000d7f 	.word	0x00000d7f
    1048:	2000332c 	.word	0x2000332c
    104c:	00008e8d 	.word	0x00008e8d
    1050:	00008da5 	.word	0x00008da5

00001054 <_ZN12States_Class21handleStateStandbyOFFEm>:
	{
    1054:	b5f0      	push	{r4, r5, r6, r7, lr}
    1056:	b085      	sub	sp, #20
    1058:	4605      	mov	r5, r0
    105a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    105e:	f8ad 3000 	strh.w	r3, [sp]
    1062:	f8ad 3002 	strh.w	r3, [sp, #2]
    1066:	2400      	movs	r4, #0
    1068:	9401      	str	r4, [sp, #4]
	data = v;
    106a:	9402      	str	r4, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    106c:	9403      	str	r4, [sp, #12]
    106e:	4f0d      	ldr	r7, [pc, #52]	; (10a4 <_ZN12States_Class21handleStateStandbyOFFEm+0x50>)
    1070:	490d      	ldr	r1, [pc, #52]	; (10a8 <_ZN12States_Class21handleStateStandbyOFFEm+0x54>)
    1072:	4638      	mov	r0, r7
    1074:	4e0d      	ldr	r6, [pc, #52]	; (10ac <_ZN12States_Class21handleStateStandbyOFFEm+0x58>)
    1076:	47b0      	blx	r6
    1078:	490d      	ldr	r1, [pc, #52]	; (10b0 <_ZN12States_Class21handleStateStandbyOFFEm+0x5c>)
    107a:	4638      	mov	r0, r7
    107c:	47b0      	blx	r6
	state.smpsTemperatureOutOfRangeEventSent = false;
    107e:	f895 3394 	ldrb.w	r3, [r5, #916]	; 0x394
	state.exhaustTemperatureOutOfRangeEventSent = false;
    1082:	f003 03bb 	and.w	r3, r3, #187	; 0xbb
    1086:	f364 1304 	bfi	r3, r4, #4, #1
    108a:	f885 3394 	strb.w	r3, [r5, #916]	; 0x394
	state.magnetronFanFailureDetectionTime = forever;
    108e:	4b09      	ldr	r3, [pc, #36]	; (10b4 <_ZN12States_Class21handleStateStandbyOFFEm+0x60>)
    1090:	681b      	ldr	r3, [r3, #0]
    1092:	f8c5 3384 	str.w	r3, [r5, #900]	; 0x384
	listener.SendEventSelf(e);
    1096:	4669      	mov	r1, sp
    1098:	4807      	ldr	r0, [pc, #28]	; (10b8 <_ZN12States_Class21handleStateStandbyOFFEm+0x64>)
    109a:	4b08      	ldr	r3, [pc, #32]	; (10bc <_ZN12States_Class21handleStateStandbyOFFEm+0x68>)
    109c:	4798      	blx	r3
	}
    109e:	b005      	add	sp, #20
    10a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a2:	bf00      	nop
    10a4:	200036cc 	.word	0x200036cc
    10a8:	0000d6d8 	.word	0x0000d6d8
    10ac:	0000ae79 	.word	0x0000ae79
    10b0:	0000d1cc 	.word	0x0000d1cc
    10b4:	0000ebd4 	.word	0x0000ebd4
    10b8:	2000332c 	.word	0x2000332c
    10bc:	00008da5 	.word	0x00008da5

000010c0 <_ZN12States_Class27handleStatePrepareStandbyONEm>:
	{
    10c0:	b530      	push	{r4, r5, lr}
    10c2:	b085      	sub	sp, #20
    10c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    10c8:	f8ad 3000 	strh.w	r3, [sp]
    10cc:	f8ad 3002 	strh.w	r3, [sp, #2]
    10d0:	2300      	movs	r3, #0
    10d2:	9301      	str	r3, [sp, #4]
	data = v;
    10d4:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    10d6:	9303      	str	r3, [sp, #12]
    10d8:	4d08      	ldr	r5, [pc, #32]	; (10fc <_ZN12States_Class27handleStatePrepareStandbyONEm+0x3c>)
    10da:	4909      	ldr	r1, [pc, #36]	; (1100 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x40>)
    10dc:	4628      	mov	r0, r5
    10de:	4c09      	ldr	r4, [pc, #36]	; (1104 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x44>)
    10e0:	47a0      	blx	r4
    10e2:	4909      	ldr	r1, [pc, #36]	; (1108 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x48>)
    10e4:	4628      	mov	r0, r5
    10e6:	47a0      	blx	r4
	tick_t	leaveDisplayTime = hvacTimer.get_ticks() + 4000;
    10e8:	4808      	ldr	r0, [pc, #32]	; (110c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x4c>)
    10ea:	4b09      	ldr	r3, [pc, #36]	; (1110 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x50>)
    10ec:	4798      	blx	r3
	listener.SendEventSelf(e);
    10ee:	4669      	mov	r1, sp
    10f0:	4808      	ldr	r0, [pc, #32]	; (1114 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x54>)
    10f2:	4b09      	ldr	r3, [pc, #36]	; (1118 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x58>)
    10f4:	4798      	blx	r3
	}
    10f6:	b005      	add	sp, #20
    10f8:	bd30      	pop	{r4, r5, pc}
    10fa:	bf00      	nop
    10fc:	200036cc 	.word	0x200036cc
    1100:	0000d6f0 	.word	0x0000d6f0
    1104:	0000ae79 	.word	0x0000ae79
    1108:	0000d1cc 	.word	0x0000d1cc
    110c:	20003670 	.word	0x20003670
    1110:	0000a6e1 	.word	0x0000a6e1
    1114:	2000332c 	.word	0x2000332c
    1118:	00008da5 	.word	0x00008da5

0000111c <_ZN12States_Class20handleStateStandbyONEm>:
	{
    111c:	b510      	push	{r4, lr}
    111e:	b084      	sub	sp, #16
    1120:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1124:	f8ad 3000 	strh.w	r3, [sp]
    1128:	f8ad 3002 	strh.w	r3, [sp, #2]
    112c:	2200      	movs	r2, #0
    112e:	9201      	str	r2, [sp, #4]
	data = v;
    1130:	9202      	str	r2, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1132:	9203      	str	r2, [sp, #12]
	state.latchClosedConfirmPending = false;
    1134:	f890 3395 	ldrb.w	r3, [r0, #917]	; 0x395
    state.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    1138:	f8d0 4310 	ldr.w	r4, [r0, #784]	; 0x310
    113c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1140:	fb01 f104 	mul.w	r1, r1, r4
    1144:	f8c0 136c 	str.w	r1, [r0, #876]	; 0x36c
	state.reedRelayOpen = false;
    1148:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    114c:	f362 0382 	bfi	r3, r2, #2, #1
    1150:	f880 3395 	strb.w	r3, [r0, #917]	; 0x395
	listener.SendEventSelf(e);
    1154:	4669      	mov	r1, sp
    1156:	4802      	ldr	r0, [pc, #8]	; (1160 <_ZN12States_Class20handleStateStandbyONEm+0x44>)
    1158:	4b02      	ldr	r3, [pc, #8]	; (1164 <_ZN12States_Class20handleStateStandbyONEm+0x48>)
    115a:	4798      	blx	r3
	}
    115c:	b004      	add	sp, #16
    115e:	bd10      	pop	{r4, pc}
    1160:	2000332c 	.word	0x2000332c
    1164:	00008da5 	.word	0x00008da5

00001168 <_ZN12States_Class23handleStateStandbyReadyEm>:
	{
    1168:	b500      	push	{lr}
    116a:	b085      	sub	sp, #20
    116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1170:	f8ad 3000 	strh.w	r3, [sp]
    1174:	f8ad 3002 	strh.w	r3, [sp, #2]
    1178:	2300      	movs	r3, #0
    117a:	9301      	str	r3, [sp, #4]
	data = v;
    117c:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    117e:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1180:	4669      	mov	r1, sp
    1182:	4803      	ldr	r0, [pc, #12]	; (1190 <_ZN12States_Class23handleStateStandbyReadyEm+0x28>)
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    1186:	4798      	blx	r3
	}
    1188:	b005      	add	sp, #20
    118a:	f85d fb04 	ldr.w	pc, [sp], #4
    118e:	bf00      	nop
    1190:	2000332c 	.word	0x2000332c
    1194:	00008da5 	.word	0x00008da5

00001198 <_ZN12States_Class13handleStateONEm>:
	{
    1198:	b500      	push	{lr}
    119a:	b085      	sub	sp, #20
    119c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    11a0:	f8ad 3000 	strh.w	r3, [sp]
    11a4:	f8ad 3002 	strh.w	r3, [sp, #2]
    11a8:	2300      	movs	r3, #0
    11aa:	9301      	str	r3, [sp, #4]
	data = v;
    11ac:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    11ae:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    11b0:	4669      	mov	r1, sp
    11b2:	4803      	ldr	r0, [pc, #12]	; (11c0 <_ZN12States_Class13handleStateONEm+0x28>)
    11b4:	4b03      	ldr	r3, [pc, #12]	; (11c4 <_ZN12States_Class13handleStateONEm+0x2c>)
    11b6:	4798      	blx	r3
	}
    11b8:	b005      	add	sp, #20
    11ba:	f85d fb04 	ldr.w	pc, [sp], #4
    11be:	bf00      	nop
    11c0:	2000332c 	.word	0x2000332c
    11c4:	00008da5 	.word	0x00008da5

000011c8 <_ZN12States_Class19handleStateFinishedEm>:
	{
    11c8:	b500      	push	{lr}
    11ca:	b085      	sub	sp, #20
    11cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    11d0:	f8ad 3000 	strh.w	r3, [sp]
    11d4:	f8ad 3002 	strh.w	r3, [sp, #2]
    11d8:	2300      	movs	r3, #0
    11da:	9301      	str	r3, [sp, #4]
	data = v;
    11dc:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    11de:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    11e0:	4669      	mov	r1, sp
    11e2:	4803      	ldr	r0, [pc, #12]	; (11f0 <_ZN12States_Class19handleStateFinishedEm+0x28>)
    11e4:	4b03      	ldr	r3, [pc, #12]	; (11f4 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    11e6:	4798      	blx	r3
	}
    11e8:	b005      	add	sp, #20
    11ea:	f85d fb04 	ldr.w	pc, [sp], #4
    11ee:	bf00      	nop
    11f0:	2000332c 	.word	0x2000332c
    11f4:	00008da5 	.word	0x00008da5

000011f8 <_ZN12States_Class25handleStateStoppedProcessEm>:
	{
    11f8:	b500      	push	{lr}
    11fa:	b085      	sub	sp, #20
    11fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1200:	f8ad 3000 	strh.w	r3, [sp]
    1204:	f8ad 3002 	strh.w	r3, [sp, #2]
    1208:	2300      	movs	r3, #0
    120a:	9301      	str	r3, [sp, #4]
	data = v;
    120c:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    120e:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1210:	4669      	mov	r1, sp
    1212:	4803      	ldr	r0, [pc, #12]	; (1220 <_ZN12States_Class25handleStateStoppedProcessEm+0x28>)
    1214:	4b03      	ldr	r3, [pc, #12]	; (1224 <_ZN12States_Class25handleStateStoppedProcessEm+0x2c>)
    1216:	4798      	blx	r3
	}
    1218:	b005      	add	sp, #20
    121a:	f85d fb04 	ldr.w	pc, [sp], #4
    121e:	bf00      	nop
    1220:	2000332c 	.word	0x2000332c
    1224:	00008da5 	.word	0x00008da5

00001228 <_ZN12States_Class22handleStateSelfProtectEm>:
	{
    1228:	b500      	push	{lr}
    122a:	b085      	sub	sp, #20
    122c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1230:	f8ad 3000 	strh.w	r3, [sp]
    1234:	f8ad 3002 	strh.w	r3, [sp, #2]
    1238:	2300      	movs	r3, #0
    123a:	9301      	str	r3, [sp, #4]
	data = v;
    123c:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    123e:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1240:	4669      	mov	r1, sp
    1242:	4803      	ldr	r0, [pc, #12]	; (1250 <_ZN12States_Class22handleStateSelfProtectEm+0x28>)
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    1246:	4798      	blx	r3
	}
    1248:	b005      	add	sp, #20
    124a:	f85d fb04 	ldr.w	pc, [sp], #4
    124e:	bf00      	nop
    1250:	2000332c 	.word	0x2000332c
    1254:	00008da5 	.word	0x00008da5

00001258 <_ZN12States_Class16handleStateErrorEm>:
	{
    1258:	b500      	push	{lr}
    125a:	b085      	sub	sp, #20
    125c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1260:	f8ad 3000 	strh.w	r3, [sp]
    1264:	f8ad 3002 	strh.w	r3, [sp, #2]
    1268:	2300      	movs	r3, #0
    126a:	9301      	str	r3, [sp, #4]
	data = v;
    126c:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    126e:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    1270:	4669      	mov	r1, sp
    1272:	4803      	ldr	r0, [pc, #12]	; (1280 <_ZN12States_Class16handleStateErrorEm+0x28>)
    1274:	4b03      	ldr	r3, [pc, #12]	; (1284 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    1276:	4798      	blx	r3
	}
    1278:	b005      	add	sp, #20
    127a:	f85d fb04 	ldr.w	pc, [sp], #4
    127e:	bf00      	nop
    1280:	2000332c 	.word	0x2000332c
    1284:	00008da5 	.word	0x00008da5

00001288 <_ZN12States_Class22handleStateMaintenanceEm>:
	{
    1288:	b500      	push	{lr}
    128a:	b085      	sub	sp, #20
    128c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1290:	f8ad 3000 	strh.w	r3, [sp]
    1294:	f8ad 3002 	strh.w	r3, [sp, #2]
    1298:	2300      	movs	r3, #0
    129a:	9301      	str	r3, [sp, #4]
	data = v;
    129c:	9302      	str	r3, [sp, #8]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    129e:	9303      	str	r3, [sp, #12]
	listener.SendEventSelf(e);
    12a0:	4669      	mov	r1, sp
    12a2:	4803      	ldr	r0, [pc, #12]	; (12b0 <_ZN12States_Class22handleStateMaintenanceEm+0x28>)
    12a4:	4b03      	ldr	r3, [pc, #12]	; (12b4 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    12a6:	4798      	blx	r3
	}
    12a8:	b005      	add	sp, #20
    12aa:	f85d fb04 	ldr.w	pc, [sp], #4
    12ae:	bf00      	nop
    12b0:	2000332c 	.word	0x2000332c
    12b4:	00008da5 	.word	0x00008da5

000012b8 <_ZN12States_Class16saveCurrentStateEv>:
	if (state.currentState>0){
    12b8:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
    12bc:	b903      	cbnz	r3, 12c0 <_ZN12States_Class16saveCurrentStateEv+0x8>
    12be:	4770      	bx	lr
void States_Class::saveCurrentState(void){
    12c0:	b510      	push	{r4, lr}
    12c2:	4604      	mov	r4, r0
		state.now = hvacTimer.get_ticks();
    12c4:	4805      	ldr	r0, [pc, #20]	; (12dc <_ZN12States_Class16saveCurrentStateEv+0x24>)
    12c6:	4b06      	ldr	r3, [pc, #24]	; (12e0 <_ZN12States_Class16saveCurrentStateEv+0x28>)
    12c8:	4798      	blx	r3
    12ca:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
		memory.saveWorkingStateForGAIN(state);
    12ce:	f504 7149 	add.w	r1, r4, #804	; 0x324
    12d2:	4804      	ldr	r0, [pc, #16]	; (12e4 <_ZN12States_Class16saveCurrentStateEv+0x2c>)
    12d4:	4b04      	ldr	r3, [pc, #16]	; (12e8 <_ZN12States_Class16saveCurrentStateEv+0x30>)
    12d6:	4798      	blx	r3
    12d8:	bd10      	pop	{r4, pc}
    12da:	bf00      	nop
    12dc:	20003670 	.word	0x20003670
    12e0:	0000a6e1 	.word	0x0000a6e1
    12e4:	200010dc 	.word	0x200010dc
    12e8:	00000d6b 	.word	0x00000d6b

000012ec <_ZN12States_Class15handleHVACEventER5event>:
	{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	4604      	mov	r4, r0
	if (state.currentState != kGAINStateResume)
    12f0:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
    12f4:	2b02      	cmp	r3, #2
		state.callingState = state.currentState;
    12f6:	bf18      	it	ne
    12f8:	f8c0 3344 	strne.w	r3, [r0, #836]	; 0x344
	state.currentState = e.data.wordData[0];
    12fc:	890b      	ldrh	r3, [r1, #8]
    12fe:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
	state.stateFlags = e.data.wordData[1];
    1302:	894b      	ldrh	r3, [r1, #10]
    1304:	f8c0 334c 	str.w	r3, [r0, #844]	; 0x34c
	state.stateEntryTime = hvacTimer.get_ticks();
    1308:	484e      	ldr	r0, [pc, #312]	; (1444 <_ZN12States_Class15handleHVACEventER5event+0x158>)
    130a:	4b4f      	ldr	r3, [pc, #316]	; (1448 <_ZN12States_Class15handleHVACEventER5event+0x15c>)
    130c:	4798      	blx	r3
    130e:	f8c4 0350 	str.w	r0, [r4, #848]	; 0x350
    1312:	494e      	ldr	r1, [pc, #312]	; (144c <_ZN12States_Class15handleHVACEventER5event+0x160>)
    1314:	484e      	ldr	r0, [pc, #312]	; (1450 <_ZN12States_Class15handleHVACEventER5event+0x164>)
    1316:	4b4f      	ldr	r3, [pc, #316]	; (1454 <_ZN12States_Class15handleHVACEventER5event+0x168>)
    1318:	4798      	blx	r3
	usb.write(gainStateDescription[state.callingState]);
    131a:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
    131e:	4b4e      	ldr	r3, [pc, #312]	; (1458 <_ZN12States_Class15handleHVACEventER5event+0x16c>)
    1320:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1324:	b14d      	cbz	r5, 133a <_ZN12States_Class15handleHVACEventER5event+0x4e>
      return write((const uint8_t *)str, strlen(str));
    1326:	4628      	mov	r0, r5
    1328:	4b4c      	ldr	r3, [pc, #304]	; (145c <_ZN12States_Class15handleHVACEventER5event+0x170>)
    132a:	4798      	blx	r3
    132c:	4b48      	ldr	r3, [pc, #288]	; (1450 <_ZN12States_Class15handleHVACEventER5event+0x164>)
    132e:	681a      	ldr	r2, [r3, #0]
    1330:	6856      	ldr	r6, [r2, #4]
    1332:	4602      	mov	r2, r0
    1334:	4629      	mov	r1, r5
    1336:	4618      	mov	r0, r3
    1338:	47b0      	blx	r6
    133a:	4949      	ldr	r1, [pc, #292]	; (1460 <_ZN12States_Class15handleHVACEventER5event+0x174>)
    133c:	4844      	ldr	r0, [pc, #272]	; (1450 <_ZN12States_Class15handleHVACEventER5event+0x164>)
    133e:	4b45      	ldr	r3, [pc, #276]	; (1454 <_ZN12States_Class15handleHVACEventER5event+0x168>)
    1340:	4798      	blx	r3
	usb.write(gainStateDescription[state.currentState]);
    1342:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
    1346:	4b44      	ldr	r3, [pc, #272]	; (1458 <_ZN12States_Class15handleHVACEventER5event+0x16c>)
    1348:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
      if (str == NULL) return 0;
    134c:	b14d      	cbz	r5, 1362 <_ZN12States_Class15handleHVACEventER5event+0x76>
      return write((const uint8_t *)str, strlen(str));
    134e:	4628      	mov	r0, r5
    1350:	4b42      	ldr	r3, [pc, #264]	; (145c <_ZN12States_Class15handleHVACEventER5event+0x170>)
    1352:	4798      	blx	r3
    1354:	4b3e      	ldr	r3, [pc, #248]	; (1450 <_ZN12States_Class15handleHVACEventER5event+0x164>)
    1356:	681a      	ldr	r2, [r3, #0]
    1358:	6856      	ldr	r6, [r2, #4]
    135a:	4602      	mov	r2, r0
    135c:	4629      	mov	r1, r5
    135e:	4618      	mov	r0, r3
    1360:	47b0      	blx	r6
    1362:	4d3b      	ldr	r5, [pc, #236]	; (1450 <_ZN12States_Class15handleHVACEventER5event+0x164>)
    1364:	493f      	ldr	r1, [pc, #252]	; (1464 <_ZN12States_Class15handleHVACEventER5event+0x178>)
    1366:	4628      	mov	r0, r5
    1368:	4e3a      	ldr	r6, [pc, #232]	; (1454 <_ZN12States_Class15handleHVACEventER5event+0x168>)
    136a:	47b0      	blx	r6
    136c:	220a      	movs	r2, #10
    136e:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    1372:	4628      	mov	r0, r5
    1374:	4b3c      	ldr	r3, [pc, #240]	; (1468 <_ZN12States_Class15handleHVACEventER5event+0x17c>)
    1376:	4798      	blx	r3
    1378:	2129      	movs	r1, #41	; 0x29
    137a:	4628      	mov	r0, r5
    137c:	4b3b      	ldr	r3, [pc, #236]	; (146c <_ZN12States_Class15handleHVACEventER5event+0x180>)
    137e:	4798      	blx	r3
    1380:	493b      	ldr	r1, [pc, #236]	; (1470 <_ZN12States_Class15handleHVACEventER5event+0x184>)
    1382:	4628      	mov	r0, r5
    1384:	47b0      	blx	r6
	saveCurrentState();
    1386:	4620      	mov	r0, r4
    1388:	4b3a      	ldr	r3, [pc, #232]	; (1474 <_ZN12States_Class15handleHVACEventER5event+0x188>)
    138a:	4798      	blx	r3
	switch (state.currentState)
    138c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    1390:	3b01      	subs	r3, #1
    1392:	2b0f      	cmp	r3, #15
    1394:	d851      	bhi.n	143a <_ZN12States_Class15handleHVACEventER5event+0x14e>
    1396:	e8df f003 	tbb	[pc, r3]
    139a:	0e08      	.short	0x0e08
    139c:	26201a14 	.word	0x26201a14
    13a0:	382c5050 	.word	0x382c5050
    13a4:	3e503250 	.word	0x3e503250
    13a8:	4a44      	.short	0x4a44
			handleStateInitialize(state.stateFlags);
    13aa:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13ae:	4620      	mov	r0, r4
    13b0:	4b31      	ldr	r3, [pc, #196]	; (1478 <_ZN12States_Class15handleHVACEventER5event+0x18c>)
    13b2:	4798      	blx	r3
			break;
    13b4:	bd70      	pop	{r4, r5, r6, pc}
			handleStateResume(state.stateFlags);
    13b6:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13ba:	4620      	mov	r0, r4
    13bc:	4b2f      	ldr	r3, [pc, #188]	; (147c <_ZN12States_Class15handleHVACEventER5event+0x190>)
    13be:	4798      	blx	r3
			break;
    13c0:	bd70      	pop	{r4, r5, r6, pc}
			handleStateStandbyOFF(state.stateFlags);
    13c2:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13c6:	4620      	mov	r0, r4
    13c8:	4b2d      	ldr	r3, [pc, #180]	; (1480 <_ZN12States_Class15handleHVACEventER5event+0x194>)
    13ca:	4798      	blx	r3
			break;
    13cc:	bd70      	pop	{r4, r5, r6, pc}
			handleStatePrepareStandbyON(state.stateFlags);
    13ce:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13d2:	4620      	mov	r0, r4
    13d4:	4b2b      	ldr	r3, [pc, #172]	; (1484 <_ZN12States_Class15handleHVACEventER5event+0x198>)
    13d6:	4798      	blx	r3
			break;
    13d8:	bd70      	pop	{r4, r5, r6, pc}
			handleStateStandbyON(state.stateFlags);
    13da:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13de:	4620      	mov	r0, r4
    13e0:	4b29      	ldr	r3, [pc, #164]	; (1488 <_ZN12States_Class15handleHVACEventER5event+0x19c>)
    13e2:	4798      	blx	r3
			break;
    13e4:	bd70      	pop	{r4, r5, r6, pc}
			handleStateStandbyReady(state.stateFlags);
    13e6:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13ea:	4620      	mov	r0, r4
    13ec:	4b27      	ldr	r3, [pc, #156]	; (148c <_ZN12States_Class15handleHVACEventER5event+0x1a0>)
    13ee:	4798      	blx	r3
			break;
    13f0:	bd70      	pop	{r4, r5, r6, pc}
			handleStateON(state.stateFlags);
    13f2:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    13f6:	4620      	mov	r0, r4
    13f8:	4b25      	ldr	r3, [pc, #148]	; (1490 <_ZN12States_Class15handleHVACEventER5event+0x1a4>)
    13fa:	4798      	blx	r3
			break;
    13fc:	bd70      	pop	{r4, r5, r6, pc}
			handleStateFinished(state.stateFlags);
    13fe:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    1402:	4620      	mov	r0, r4
    1404:	4b23      	ldr	r3, [pc, #140]	; (1494 <_ZN12States_Class15handleHVACEventER5event+0x1a8>)
    1406:	4798      	blx	r3
			break;
    1408:	bd70      	pop	{r4, r5, r6, pc}
			handleStateStoppedProcess(state.stateFlags);
    140a:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    140e:	4620      	mov	r0, r4
    1410:	4b21      	ldr	r3, [pc, #132]	; (1498 <_ZN12States_Class15handleHVACEventER5event+0x1ac>)
    1412:	4798      	blx	r3
			break;
    1414:	bd70      	pop	{r4, r5, r6, pc}
			handleStateSelfProtect(state.stateFlags);
    1416:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    141a:	4620      	mov	r0, r4
    141c:	4b1f      	ldr	r3, [pc, #124]	; (149c <_ZN12States_Class15handleHVACEventER5event+0x1b0>)
    141e:	4798      	blx	r3
			break;
    1420:	bd70      	pop	{r4, r5, r6, pc}
			handleStateError(state.stateFlags);
    1422:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    1426:	4620      	mov	r0, r4
    1428:	4b1d      	ldr	r3, [pc, #116]	; (14a0 <_ZN12States_Class15handleHVACEventER5event+0x1b4>)
    142a:	4798      	blx	r3
			break;
    142c:	bd70      	pop	{r4, r5, r6, pc}
			handleStateMaintenance(state.stateFlags);
    142e:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
    1432:	4620      	mov	r0, r4
    1434:	4b1b      	ldr	r3, [pc, #108]	; (14a4 <_ZN12States_Class15handleHVACEventER5event+0x1b8>)
    1436:	4798      	blx	r3
			break;
    1438:	bd70      	pop	{r4, r5, r6, pc}
			handleStateError(kGAINErrorIllegalStateTransition);
    143a:	2102      	movs	r1, #2
    143c:	4620      	mov	r0, r4
    143e:	4b18      	ldr	r3, [pc, #96]	; (14a0 <_ZN12States_Class15handleHVACEventER5event+0x1b4>)
    1440:	4798      	blx	r3
    1442:	bd70      	pop	{r4, r5, r6, pc}
    1444:	20003670 	.word	0x20003670
    1448:	0000a6e1 	.word	0x0000a6e1
    144c:	0000d70c 	.word	0x0000d70c
    1450:	200036cc 	.word	0x200036cc
    1454:	0000ae79 	.word	0x0000ae79
    1458:	20000004 	.word	0x20000004
    145c:	0000cfc1 	.word	0x0000cfc1
    1460:	0000d738 	.word	0x0000d738
    1464:	0000d740 	.word	0x0000d740
    1468:	0000aee5 	.word	0x0000aee5
    146c:	0000ae99 	.word	0x0000ae99
    1470:	0000d1cc 	.word	0x0000d1cc
    1474:	000012b9 	.word	0x000012b9
    1478:	00000f01 	.word	0x00000f01
    147c:	00000fa9 	.word	0x00000fa9
    1480:	00001055 	.word	0x00001055
    1484:	000010c1 	.word	0x000010c1
    1488:	0000111d 	.word	0x0000111d
    148c:	00001169 	.word	0x00001169
    1490:	00001199 	.word	0x00001199
    1494:	000011c9 	.word	0x000011c9
    1498:	000011f9 	.word	0x000011f9
    149c:	00001229 	.word	0x00001229
    14a0:	00001259 	.word	0x00001259
    14a4:	00001289 	.word	0x00001289

000014a8 <_ZN12States_Class5StartEh>:
	{
    14a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14ac:	b086      	sub	sp, #24
    14ae:	4680      	mov	r8, r0
    14b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    14b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    14b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    14bc:	2400      	movs	r4, #0
    14be:	9403      	str	r4, [sp, #12]
	data = v;
    14c0:	9404      	str	r4, [sp, #16]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    14c2:	9405      	str	r4, [sp, #20]
	memory.ReadApplicationState(lastState);
    14c4:	f500 7166 	add.w	r1, r0, #920	; 0x398
    14c8:	483d      	ldr	r0, [pc, #244]	; (15c0 <_ZN12States_Class5StartEh+0x118>)
    14ca:	4b3e      	ldr	r3, [pc, #248]	; (15c4 <_ZN12States_Class5StartEh+0x11c>)
    14cc:	4798      	blx	r3
	state.currentState = kGAINStateReset;
    14ce:	f8c8 4340 	str.w	r4, [r8, #832]	; 0x340
	if (calendar.WasInterrpted())
    14d2:	483d      	ldr	r0, [pc, #244]	; (15c8 <_ZN12States_Class5StartEh+0x120>)
    14d4:	4b3d      	ldr	r3, [pc, #244]	; (15cc <_ZN12States_Class5StartEh+0x124>)
    14d6:	4798      	blx	r3
    14d8:	2800      	cmp	r0, #0
    14da:	d057      	beq.n	158c <_ZN12States_Class5StartEh+0xe4>
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    14dc:	483a      	ldr	r0, [pc, #232]	; (15c8 <_ZN12States_Class5StartEh+0x120>)
    14de:	4b3c      	ldr	r3, [pc, #240]	; (15d0 <_ZN12States_Class5StartEh+0x128>)
    14e0:	4798      	blx	r3
    14e2:	f8c8 040c 	str.w	r0, [r8, #1036]	; 0x40c
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    14e6:	f241 3387 	movw	r3, #4999	; 0x1387
    14ea:	4298      	cmp	r0, r3
    14ec:	bf8c      	ite	hi
    14ee:	2000      	movhi	r0, #0
    14f0:	2001      	movls	r0, #1
    14f2:	f888 0410 	strb.w	r0, [r8, #1040]	; 0x410
	if (SetInitialState(state)>1){
    14f6:	f508 7449 	add.w	r4, r8, #804	; 0x324
    14fa:	4621      	mov	r1, r4
    14fc:	4640      	mov	r0, r8
    14fe:	4b35      	ldr	r3, [pc, #212]	; (15d4 <_ZN12States_Class5StartEh+0x12c>)
    1500:	4798      	blx	r3
    1502:	2801      	cmp	r0, #1
    1504:	d903      	bls.n	150e <_ZN12States_Class5StartEh+0x66>
		SetDefaultState(state);
    1506:	4621      	mov	r1, r4
    1508:	4640      	mov	r0, r8
    150a:	4b33      	ldr	r3, [pc, #204]	; (15d8 <_ZN12States_Class5StartEh+0x130>)
    150c:	4798      	blx	r3
	uint32_t	r=memory.ReadLastConfigurationData(configuration);
    150e:	f208 4114 	addw	r1, r8, #1044	; 0x414
    1512:	4832      	ldr	r0, [pc, #200]	; (15dc <_ZN12States_Class5StartEh+0x134>)
    1514:	4b32      	ldr	r3, [pc, #200]	; (15e0 <_ZN12States_Class5StartEh+0x138>)
    1516:	4798      	blx	r3
	if (r>0)
    1518:	2800      	cmp	r0, #0
    151a:	d13b      	bne.n	1594 <_ZN12States_Class5StartEh+0xec>
	if (!memory.readPersistentConfigurationDataArea(persistentConfiguration))
    151c:	f508 7139 	add.w	r1, r8, #740	; 0x2e4
    1520:	4830      	ldr	r0, [pc, #192]	; (15e4 <_ZN12States_Class5StartEh+0x13c>)
    1522:	4b31      	ldr	r3, [pc, #196]	; (15e8 <_ZN12States_Class5StartEh+0x140>)
    1524:	4798      	blx	r3
    1526:	2800      	cmp	r0, #0
    1528:	d03b      	beq.n	15a2 <_ZN12States_Class5StartEh+0xfa>
	if (!memory.readCycleDictionaryArea(cycleDictionary))
    152a:	f508 7130 	add.w	r1, r8, #704	; 0x2c0
    152e:	482d      	ldr	r0, [pc, #180]	; (15e4 <_ZN12States_Class5StartEh+0x13c>)
    1530:	4b2e      	ldr	r3, [pc, #184]	; (15ec <_ZN12States_Class5StartEh+0x144>)
    1532:	4798      	blx	r3
    1534:	2800      	cmp	r0, #0
    1536:	d038      	beq.n	15aa <_ZN12States_Class5StartEh+0x102>
	communicator.CheckCommunication();
    1538:	482d      	ldr	r0, [pc, #180]	; (15f0 <_ZN12States_Class5StartEh+0x148>)
    153a:	4b2e      	ldr	r3, [pc, #184]	; (15f4 <_ZN12States_Class5StartEh+0x14c>)
    153c:	4798      	blx	r3
	e.eventClass = kGAINEventClass;
    153e:	f44f 7300 	mov.w	r3, #512	; 0x200
    1542:	f8ad 3008 	strh.w	r3, [sp, #8]
	e.eventType = kGAINSwitchStateEvent;
    1546:	f8ad 300a 	strh.w	r3, [sp, #10]
	e.data.wordData[0] = newState;
    154a:	2301      	movs	r3, #1
    154c:	f8ad 3010 	strh.w	r3, [sp, #16]
	e.data.wordData[1] = data;
    1550:	2300      	movs	r3, #0
    1552:	f8ad 3012 	strh.w	r3, [sp, #18]
	listener.SendEventSelf(e);
    1556:	a902      	add	r1, sp, #8
    1558:	4827      	ldr	r0, [pc, #156]	; (15f8 <_ZN12States_Class5StartEh+0x150>)
    155a:	4b28      	ldr	r3, [pc, #160]	; (15fc <_ZN12States_Class5StartEh+0x154>)
    155c:	4798      	blx	r3
    while (cBit.IsOK())
    155e:	4e28      	ldr	r6, [pc, #160]	; (1600 <_ZN12States_Class5StartEh+0x158>)
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    1560:	4f25      	ldr	r7, [pc, #148]	; (15f8 <_ZN12States_Class5StartEh+0x150>)
    while (cBit.IsOK())
    1562:	4d28      	ldr	r5, [pc, #160]	; (1604 <_ZN12States_Class5StartEh+0x15c>)
    1564:	4630      	mov	r0, r6
    1566:	47a8      	blx	r5
    1568:	b330      	cbz	r0, 15b8 <_ZN12States_Class5StartEh+0x110>
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    156a:	4b27      	ldr	r3, [pc, #156]	; (1608 <_ZN12States_Class5StartEh+0x160>)
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	9300      	str	r3, [sp, #0]
    1570:	f44f 7300 	mov.w	r3, #512	; 0x200
    1574:	461a      	mov	r2, r3
    1576:	a902      	add	r1, sp, #8
    1578:	4638      	mov	r0, r7
    157a:	4c24      	ldr	r4, [pc, #144]	; (160c <_ZN12States_Class5StartEh+0x164>)
    157c:	47a0      	blx	r4
    157e:	2800      	cmp	r0, #0
    1580:	d0f0      	beq.n	1564 <_ZN12States_Class5StartEh+0xbc>
			handleHVACEvent(e);
    1582:	a902      	add	r1, sp, #8
    1584:	4640      	mov	r0, r8
    1586:	4b22      	ldr	r3, [pc, #136]	; (1610 <_ZN12States_Class5StartEh+0x168>)
    1588:	4798      	blx	r3
    158a:	e7ea      	b.n	1562 <_ZN12States_Class5StartEh+0xba>
		memory.LogResetEvent();
    158c:	4821      	ldr	r0, [pc, #132]	; (1614 <_ZN12States_Class5StartEh+0x16c>)
    158e:	4b22      	ldr	r3, [pc, #136]	; (1618 <_ZN12States_Class5StartEh+0x170>)
    1590:	4798      	blx	r3
    1592:	e7b0      	b.n	14f6 <_ZN12States_Class5StartEh+0x4e>
		SetFactoryDefaults(0, true, false);
    1594:	2300      	movs	r3, #0
    1596:	2201      	movs	r2, #1
    1598:	4619      	mov	r1, r3
    159a:	4640      	mov	r0, r8
    159c:	4c1f      	ldr	r4, [pc, #124]	; (161c <_ZN12States_Class5StartEh+0x174>)
    159e:	47a0      	blx	r4
    15a0:	e7bc      	b.n	151c <_ZN12States_Class5StartEh+0x74>
		setPersistentConfigurationDefaults();
    15a2:	4640      	mov	r0, r8
    15a4:	4b1e      	ldr	r3, [pc, #120]	; (1620 <_ZN12States_Class5StartEh+0x178>)
    15a6:	4798      	blx	r3
    15a8:	e7bf      	b.n	152a <_ZN12States_Class5StartEh+0x82>
		SetFactoryDefaults(0, false, true);
    15aa:	2301      	movs	r3, #1
    15ac:	2200      	movs	r2, #0
    15ae:	4611      	mov	r1, r2
    15b0:	4640      	mov	r0, r8
    15b2:	4c1a      	ldr	r4, [pc, #104]	; (161c <_ZN12States_Class5StartEh+0x174>)
    15b4:	47a0      	blx	r4
    15b6:	e7bf      	b.n	1538 <_ZN12States_Class5StartEh+0x90>
	}
    15b8:	b006      	add	sp, #24
    15ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15be:	bf00      	nop
    15c0:	20001278 	.word	0x20001278
    15c4:	00000839 	.word	0x00000839
    15c8:	20003598 	.word	0x20003598
    15cc:	0000a2d1 	.word	0x0000a2d1
    15d0:	0000a211 	.word	0x0000a211
    15d4:	00000635 	.word	0x00000635
    15d8:	00000621 	.word	0x00000621
    15dc:	2000127c 	.word	0x2000127c
    15e0:	00000bd5 	.word	0x00000bd5
    15e4:	200010dc 	.word	0x200010dc
    15e8:	00000d15 	.word	0x00000d15
    15ec:	00000d0b 	.word	0x00000d0b
    15f0:	20000b94 	.word	0x20000b94
    15f4:	000008d1 	.word	0x000008d1
    15f8:	2000332c 	.word	0x2000332c
    15fc:	00008da5 	.word	0x00008da5
    1600:	20000adc 	.word	0x20000adc
    1604:	000005b7 	.word	0x000005b7
    1608:	0000ebd4 	.word	0x0000ebd4
    160c:	00008c05 	.word	0x00008c05
    1610:	000012ed 	.word	0x000012ed
    1614:	20000c10 	.word	0x20000c10
    1618:	000006f9 	.word	0x000006f9
    161c:	000005ed 	.word	0x000005ed
    1620:	00000ef1 	.word	0x00000ef1

00001624 <_ZN12States_Class4StopEh>:
}
    1624:	4608      	mov	r0, r1
    1626:	4770      	bx	lr

00001628 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    1628:	b508      	push	{r3, lr}
	configuration=cd;
    162a:	22ac      	movs	r2, #172	; 0xac
    162c:	f200 4014 	addw	r0, r0, #1044	; 0x414
    1630:	4b01      	ldr	r3, [pc, #4]	; (1638 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x10>)
    1632:	4798      	blx	r3
    1634:	bd08      	pop	{r3, pc}
    1636:	bf00      	nop
    1638:	0000cdb9 	.word	0x0000cdb9

0000163c <_ZN12States_Class16SetCRCConfigDataEv>:
}
void	States_Class::SetCRCConfigData(void){
    163c:	b510      	push	{r4, lr}
    163e:	4604      	mov	r4, r0
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    1640:	22ac      	movs	r2, #172	; 0xac
    1642:	4903      	ldr	r1, [pc, #12]	; (1650 <_ZN12States_Class16SetCRCConfigDataEv+0x14>)
    1644:	4803      	ldr	r0, [pc, #12]	; (1654 <_ZN12States_Class16SetCRCConfigDataEv+0x18>)
    1646:	4b04      	ldr	r3, [pc, #16]	; (1658 <_ZN12States_Class16SetCRCConfigDataEv+0x1c>)
    1648:	4798      	blx	r3
    164a:	f8c4 04c0 	str.w	r0, [r4, #1216]	; 0x4c0
    164e:	bd10      	pop	{r4, pc}
    1650:	0000d478 	.word	0x0000d478
    1654:	200010dc 	.word	0x200010dc
    1658:	00000681 	.word	0x00000681

0000165c <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=state.status;
	return	state.status.rawStatus;
}

    165c:	b510      	push	{r4, lr}
    165e:	4c05      	ldr	r4, [pc, #20]	; (1674 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x18>)
    1660:	4620      	mov	r0, r4
    1662:	4b05      	ldr	r3, [pc, #20]	; (1678 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x1c>)
    1664:	4798      	blx	r3
    1666:	4a05      	ldr	r2, [pc, #20]	; (167c <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x20>)
    1668:	4905      	ldr	r1, [pc, #20]	; (1680 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x24>)
    166a:	4620      	mov	r0, r4
    166c:	4b05      	ldr	r3, [pc, #20]	; (1684 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x28>)
    166e:	4798      	blx	r3
    1670:	bd10      	pop	{r4, pc}
    1672:	bf00      	nop
    1674:	200016cc 	.word	0x200016cc
    1678:	00000e45 	.word	0x00000e45
    167c:	20000000 	.word	0x20000000
    1680:	00000e1d 	.word	0x00000e1d
    1684:	0000b2dd 	.word	0x0000b2dd

00001688 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1688:	b508      	push	{r3, lr}
	system_init();
    168a:	4b03      	ldr	r3, [pc, #12]	; (1698 <atmel_start_init+0x10>)
    168c:	4798      	blx	r3
	usb_init();
    168e:	4b03      	ldr	r3, [pc, #12]	; (169c <atmel_start_init+0x14>)
    1690:	4798      	blx	r3
	spi_nor_flash_init();
    1692:	4b03      	ldr	r3, [pc, #12]	; (16a0 <atmel_start_init+0x18>)
    1694:	4798      	blx	r3
    1696:	bd08      	pop	{r3, pc}
    1698:	00001ea9 	.word	0x00001ea9
    169c:	00006869 	.word	0x00006869
    16a0:	00006805 	.word	0x00006805

000016a4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    16a4:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    16a6:	4a05      	ldr	r2, [pc, #20]	; (16bc <CRC_CALC_init+0x18>)
    16a8:	6993      	ldr	r3, [r2, #24]
    16aa:	f043 0302 	orr.w	r3, r3, #2
    16ae:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_CALC, DSU);
    16b0:	4903      	ldr	r1, [pc, #12]	; (16c0 <CRC_CALC_init+0x1c>)
    16b2:	4804      	ldr	r0, [pc, #16]	; (16c4 <CRC_CALC_init+0x20>)
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <CRC_CALC_init+0x24>)
    16b6:	4798      	blx	r3
    16b8:	bd08      	pop	{r3, pc}
    16ba:	bf00      	nop
    16bc:	40000800 	.word	0x40000800
    16c0:	41002000 	.word	0x41002000
    16c4:	200038ac 	.word	0x200038ac
    16c8:	00002461 	.word	0x00002461

000016cc <EXTERNAL_IRQ_0_init>:
}

void EXTERNAL_IRQ_0_init(void)
{
    16cc:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    16ce:	2244      	movs	r2, #68	; 0x44
    16d0:	4b27      	ldr	r3, [pc, #156]	; (1770 <EXTERNAL_IRQ_0_init+0xa4>)
    16d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    16d6:	4a27      	ldr	r2, [pc, #156]	; (1774 <EXTERNAL_IRQ_0_init+0xa8>)
    16d8:	6953      	ldr	r3, [r2, #20]
    16da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    16de:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    16e0:	4b25      	ldr	r3, [pc, #148]	; (1778 <EXTERNAL_IRQ_0_init+0xac>)
    16e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    16e6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    16ea:	4824      	ldr	r0, [pc, #144]	; (177c <EXTERNAL_IRQ_0_init+0xb0>)
    16ec:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    16f0:	4923      	ldr	r1, [pc, #140]	; (1780 <EXTERNAL_IRQ_0_init+0xb4>)
    16f2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    16f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    16fa:	f893 1156 	ldrb.w	r1, [r3, #342]	; 0x156
    16fe:	f041 0104 	orr.w	r1, r1, #4
    1702:	f883 1156 	strb.w	r1, [r3, #342]	; 0x156
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1706:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    170a:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
	tmp &= ~PORT_PINCFG_PMUXEN;
    170e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1712:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1716:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    171a:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    171e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1722:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1726:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    172a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    172e:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    1732:	4914      	ldr	r1, [pc, #80]	; (1784 <EXTERNAL_IRQ_0_init+0xb8>)
    1734:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1738:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    173c:	f893 1157 	ldrb.w	r1, [r3, #343]	; 0x157
    1740:	f041 0104 	orr.w	r1, r1, #4
    1744:	f883 1157 	strb.w	r1, [r3, #343]	; 0x157
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1748:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    174c:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
	tmp &= ~PORT_PINCFG_PMUXEN;
    1750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1754:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1758:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    175c:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1760:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1764:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);

	ext_irq_init();
    1768:	4b07      	ldr	r3, [pc, #28]	; (1788 <EXTERNAL_IRQ_0_init+0xbc>)
    176a:	4798      	blx	r3
    176c:	bd08      	pop	{r3, pc}
    176e:	bf00      	nop
    1770:	40001c00 	.word	0x40001c00
    1774:	40000800 	.word	0x40000800
    1778:	41008000 	.word	0x41008000
    177c:	40020000 	.word	0x40020000
    1780:	c0020040 	.word	0xc0020040
    1784:	c0020080 	.word	0xc0020080
    1788:	00002599 	.word	0x00002599

0000178c <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    178c:	b508      	push	{r3, lr}
    178e:	2244      	movs	r2, #68	; 0x44
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <EVENT_SYSTEM_0_init+0x1c>)
    1792:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1796:	4a05      	ldr	r2, [pc, #20]	; (17ac <EVENT_SYSTEM_0_init+0x20>)
    1798:	6993      	ldr	r3, [r2, #24]
    179a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    179e:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    17a0:	4b03      	ldr	r3, [pc, #12]	; (17b0 <EVENT_SYSTEM_0_init+0x24>)
    17a2:	4798      	blx	r3
    17a4:	bd08      	pop	{r3, pc}
    17a6:	bf00      	nop
    17a8:	40001c00 	.word	0x40001c00
    17ac:	40000800 	.word	0x40000800
    17b0:	0000253d 	.word	0x0000253d

000017b4 <QSPI_N25Q256_PORT_init>:
}

void QSPI_N25Q256_PORT_init(void)
{
    17b4:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    17b6:	4b5a      	ldr	r3, [pc, #360]	; (1920 <QSPI_N25Q256_PORT_init+0x16c>)
    17b8:	f44f 6500 	mov.w	r5, #2048	; 0x800
    17bc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    17c0:	4a58      	ldr	r2, [pc, #352]	; (1924 <QSPI_N25Q256_PORT_init+0x170>)
    17c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    17c6:	4858      	ldr	r0, [pc, #352]	; (1928 <QSPI_N25Q256_PORT_init+0x174>)
    17c8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    17cc:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    17d0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    17d4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    17d8:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    17dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    17e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17e4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    17e8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    17ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    17f0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    17f4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    17f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    17fc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    17fe:	494b      	ldr	r1, [pc, #300]	; (192c <QSPI_N25Q256_PORT_init+0x178>)
    1800:	6299      	str	r1, [r3, #40]	; 0x28
    1802:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
    1806:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1808:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    180a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    180e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1812:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1816:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    181a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    181e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1826:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    182a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    182e:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1836:	f44f 7200 	mov.w	r2, #512	; 0x200
    183a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    183c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1840:	6299      	str	r1, [r3, #40]	; 0x28
    1842:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1844:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1846:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    184a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    184e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1852:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
    1856:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    185a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    185e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1862:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1866:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    186a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1872:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1876:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1878:	4a2d      	ldr	r2, [pc, #180]	; (1930 <QSPI_N25Q256_PORT_init+0x17c>)
    187a:	629a      	str	r2, [r3, #40]	; 0x28
    187c:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    187e:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1880:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    1884:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1888:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    188c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
    1890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1894:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1898:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    189c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    18a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    18a4:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    18a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    18ac:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18ae:	4a21      	ldr	r2, [pc, #132]	; (1934 <QSPI_N25Q256_PORT_init+0x180>)
    18b0:	629a      	str	r2, [r3, #40]	; 0x28
    18b2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18b4:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    18b6:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    18ba:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    18be:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18c2:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
    18c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18ce:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    18d2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    18d6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    18da:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    18de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18e2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18e6:	4a14      	ldr	r2, [pc, #80]	; (1938 <QSPI_N25Q256_PORT_init+0x184>)
    18e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    18ec:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    18f0:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    18f4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    18f8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18fc:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    1900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1904:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1908:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    190c:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1910:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1914:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1918:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
}
    191c:	bc30      	pop	{r4, r5}
    191e:	4770      	bx	lr
    1920:	41008000 	.word	0x41008000
    1924:	40020800 	.word	0x40020800
    1928:	c0020000 	.word	0xc0020000
    192c:	40000100 	.word	0x40000100
    1930:	40000400 	.word	0x40000400
    1934:	40000800 	.word	0x40000800
    1938:	40020400 	.word	0x40020400

0000193c <QSPI_N25Q256_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <QSPI_N25Q256_CLOCK_init+0x1c>)
    193e:	691a      	ldr	r2, [r3, #16]
    1940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    1944:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    1946:	691a      	ldr	r2, [r3, #16]
    1948:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    194c:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    194e:	69da      	ldr	r2, [r3, #28]
    1950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    1954:	61da      	str	r2, [r3, #28]
    1956:	4770      	bx	lr
    1958:	40000800 	.word	0x40000800

0000195c <QSPI_N25Q256_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_N25Q256_init(void)
{
    195c:	b508      	push	{r3, lr}
	QSPI_N25Q256_CLOCK_init();
    195e:	4b04      	ldr	r3, [pc, #16]	; (1970 <QSPI_N25Q256_init+0x14>)
    1960:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1962:	4904      	ldr	r1, [pc, #16]	; (1974 <QSPI_N25Q256_init+0x18>)
    1964:	4804      	ldr	r0, [pc, #16]	; (1978 <QSPI_N25Q256_init+0x1c>)
    1966:	4b05      	ldr	r3, [pc, #20]	; (197c <QSPI_N25Q256_init+0x20>)
    1968:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    196a:	4b05      	ldr	r3, [pc, #20]	; (1980 <QSPI_N25Q256_init+0x24>)
    196c:	4798      	blx	r3
    196e:	bd08      	pop	{r3, pc}
    1970:	0000193d 	.word	0x0000193d
    1974:	42003400 	.word	0x42003400
    1978:	20003790 	.word	0x20003790
    197c:	000028b5 	.word	0x000028b5
    1980:	000017b5 	.word	0x000017b5

00001984 <DATETIME_CLOCK_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1984:	4a02      	ldr	r2, [pc, #8]	; (1990 <DATETIME_CLOCK_CLOCK_init+0xc>)
    1986:	6953      	ldr	r3, [r2, #20]
    1988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    198c:	6153      	str	r3, [r2, #20]
    198e:	4770      	bx	lr
    1990:	40000800 	.word	0x40000800

00001994 <DATETIME_CLOCK_init>:
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}

void DATETIME_CLOCK_init(void)
{
    1994:	b508      	push	{r3, lr}
	DATETIME_CLOCK_CLOCK_init();
    1996:	4b03      	ldr	r3, [pc, #12]	; (19a4 <DATETIME_CLOCK_init+0x10>)
    1998:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    199a:	4903      	ldr	r1, [pc, #12]	; (19a8 <DATETIME_CLOCK_init+0x14>)
    199c:	4803      	ldr	r0, [pc, #12]	; (19ac <DATETIME_CLOCK_init+0x18>)
    199e:	4b04      	ldr	r3, [pc, #16]	; (19b0 <DATETIME_CLOCK_init+0x1c>)
    19a0:	4798      	blx	r3
    19a2:	bd08      	pop	{r3, pc}
    19a4:	00001985 	.word	0x00001985
    19a8:	40002400 	.word	0x40002400
    19ac:	20003888 	.word	0x20003888
    19b0:	00002275 	.word	0x00002275

000019b4 <SPI_TEMP_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19b4:	4b2c      	ldr	r3, [pc, #176]	; (1a68 <SPI_TEMP_PORT_init+0xb4>)
    19b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    19ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    19c6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    19ca:	4a28      	ldr	r2, [pc, #160]	; (1a6c <SPI_TEMP_PORT_init+0xb8>)
    19cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19d0:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
	tmp &= ~PORT_PINCFG_PMUXEN;
    19d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    19d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19dc:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    19e0:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    19e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    19e8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    19ec:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    19f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19fc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1a00:	4a1b      	ldr	r2, [pc, #108]	; (1a70 <SPI_TEMP_PORT_init+0xbc>)
    1a02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a06:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a0e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a12:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a16:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1a1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1a1e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a22:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a2e:	4a11      	ldr	r2, [pc, #68]	; (1a74 <SPI_TEMP_PORT_init+0xc0>)
    1a30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1a34:	4a10      	ldr	r2, [pc, #64]	; (1a78 <SPI_TEMP_PORT_init+0xc4>)
    1a36:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1a3a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
    1a3e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1a42:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a46:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a4e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a52:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a56:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1a5a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1a5e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a62:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    1a66:	4770      	bx	lr
    1a68:	41008000 	.word	0x41008000
    1a6c:	c0000800 	.word	0xc0000800
    1a70:	c0000400 	.word	0xc0000400
    1a74:	40020000 	.word	0x40020000
    1a78:	c0021000 	.word	0xc0021000

00001a7c <SPI_TEMP_CLOCK_init>:
    1a7c:	4b06      	ldr	r3, [pc, #24]	; (1a98 <SPI_TEMP_CLOCK_init+0x1c>)
    1a7e:	2243      	movs	r2, #67	; 0x43
    1a80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    1a84:	224a      	movs	r2, #74	; 0x4a
    1a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1a8a:	4a04      	ldr	r2, [pc, #16]	; (1a9c <SPI_TEMP_CLOCK_init+0x20>)
    1a8c:	6a13      	ldr	r3, [r2, #32]
    1a8e:	f043 0301 	orr.w	r3, r3, #1
    1a92:	6213      	str	r3, [r2, #32]
    1a94:	4770      	bx	lr
    1a96:	bf00      	nop
    1a98:	40001c00 	.word	0x40001c00
    1a9c:	40000800 	.word	0x40000800

00001aa0 <SPI_TEMP_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_TEMP_init(void)
{
    1aa0:	b508      	push	{r3, lr}
	SPI_TEMP_CLOCK_init();
    1aa2:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <SPI_TEMP_init+0x18>)
    1aa4:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    1aa6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1aaa:	4804      	ldr	r0, [pc, #16]	; (1abc <SPI_TEMP_init+0x1c>)
    1aac:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <SPI_TEMP_init+0x20>)
    1aae:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <SPI_TEMP_init+0x24>)
    1ab2:	4798      	blx	r3
    1ab4:	bd08      	pop	{r3, pc}
    1ab6:	bf00      	nop
    1ab8:	00001a7d 	.word	0x00001a7d
    1abc:	20003748 	.word	0x20003748
    1ac0:	00002b25 	.word	0x00002b25
    1ac4:	000019b5 	.word	0x000019b5

00001ac8 <SPI_HI3593_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ac8:	4b2d      	ldr	r3, [pc, #180]	; (1b80 <SPI_HI3593_PORT_init+0xb8>)
    1aca:	2210      	movs	r2, #16
    1acc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ad0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ad4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1ad8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1adc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    1ae0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ae4:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1aec:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1af0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1af4:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1af8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1afc:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b00:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b04:	2220      	movs	r2, #32
    1b06:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b0a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1b12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1b16:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b1a:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b22:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b26:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b2a:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b2e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1b32:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b36:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b3a:	2280      	movs	r2, #128	; 0x80
    1b3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1b44:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    1b48:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1b4c:	4a0d      	ldr	r2, [pc, #52]	; (1b84 <SPI_HI3593_PORT_init+0xbc>)
    1b4e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1b52:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
    1b56:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1b5a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b5e:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b66:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b6a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b6e:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b72:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1b76:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b7a:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    1b7e:	4770      	bx	lr
    1b80:	41008000 	.word	0x41008000
    1b84:	c0020000 	.word	0xc0020000

00001b88 <SPI_HI3593_CLOCK_init>:
    1b88:	4b06      	ldr	r3, [pc, #24]	; (1ba4 <SPI_HI3593_CLOCK_init+0x1c>)
    1b8a:	2243      	movs	r2, #67	; 0x43
    1b8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1b90:	224a      	movs	r2, #74	; 0x4a
    1b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1b96:	4a04      	ldr	r2, [pc, #16]	; (1ba8 <SPI_HI3593_CLOCK_init+0x20>)
    1b98:	6a13      	ldr	r3, [r2, #32]
    1b9a:	f043 0304 	orr.w	r3, r3, #4
    1b9e:	6213      	str	r3, [r2, #32]
    1ba0:	4770      	bx	lr
    1ba2:	bf00      	nop
    1ba4:	40001c00 	.word	0x40001c00
    1ba8:	40000800 	.word	0x40000800

00001bac <SPI_HI3593_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_HI3593_init(void)
{
    1bac:	b508      	push	{r3, lr}
	SPI_HI3593_CLOCK_init();
    1bae:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <SPI_HI3593_init+0x14>)
    1bb0:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1bb2:	4904      	ldr	r1, [pc, #16]	; (1bc4 <SPI_HI3593_init+0x18>)
    1bb4:	4804      	ldr	r0, [pc, #16]	; (1bc8 <SPI_HI3593_init+0x1c>)
    1bb6:	4b05      	ldr	r3, [pc, #20]	; (1bcc <SPI_HI3593_init+0x20>)
    1bb8:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <SPI_HI3593_init+0x24>)
    1bbc:	4798      	blx	r3
    1bbe:	bd08      	pop	{r3, pc}
    1bc0:	00001b89 	.word	0x00001b89
    1bc4:	43000800 	.word	0x43000800
    1bc8:	20003730 	.word	0x20003730
    1bcc:	00002ba9 	.word	0x00002ba9
    1bd0:	00001ac9 	.word	0x00001ac9

00001bd4 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1bd4:	4b16      	ldr	r3, [pc, #88]	; (1c30 <I2C_EEPROM_PORT_init+0x5c>)
    1bd6:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
    1bda:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1bde:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1be2:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
    1be6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1bea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bee:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1bf2:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1bf6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1bfa:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1bfe:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1c02:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
    1c06:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1c0a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c0e:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c1a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c1e:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1c22:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1c26:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c2a:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
    1c2e:	4770      	bx	lr
    1c30:	41008000 	.word	0x41008000

00001c34 <I2C_EEPROM_CLOCK_init>:
    1c34:	4b06      	ldr	r3, [pc, #24]	; (1c50 <I2C_EEPROM_CLOCK_init+0x1c>)
    1c36:	2244      	movs	r2, #68	; 0x44
    1c38:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1c3c:	224a      	movs	r2, #74	; 0x4a
    1c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1c42:	4a04      	ldr	r2, [pc, #16]	; (1c54 <I2C_EEPROM_CLOCK_init+0x20>)
    1c44:	6a13      	ldr	r3, [r2, #32]
    1c46:	f043 0308 	orr.w	r3, r3, #8
    1c4a:	6213      	str	r3, [r2, #32]
    1c4c:	4770      	bx	lr
    1c4e:	bf00      	nop
    1c50:	40001c00 	.word	0x40001c00
    1c54:	40000800 	.word	0x40000800

00001c58 <I2C_EEPROM_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
    1c58:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
    1c5a:	4b04      	ldr	r3, [pc, #16]	; (1c6c <I2C_EEPROM_init+0x14>)
    1c5c:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1c5e:	4904      	ldr	r1, [pc, #16]	; (1c70 <I2C_EEPROM_init+0x18>)
    1c60:	4804      	ldr	r0, [pc, #16]	; (1c74 <I2C_EEPROM_init+0x1c>)
    1c62:	4b05      	ldr	r3, [pc, #20]	; (1c78 <I2C_EEPROM_init+0x20>)
    1c64:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1c66:	4b05      	ldr	r3, [pc, #20]	; (1c7c <I2C_EEPROM_init+0x24>)
    1c68:	4798      	blx	r3
    1c6a:	bd08      	pop	{r3, pc}
    1c6c:	00001c35 	.word	0x00001c35
    1c70:	43000c00 	.word	0x43000c00
    1c74:	20003848 	.word	0x20003848
    1c78:	0000272d 	.word	0x0000272d
    1c7c:	00001bd5 	.word	0x00001bd5

00001c80 <LIVE_PULSE_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c80:	4b10      	ldr	r3, [pc, #64]	; (1cc4 <LIVE_PULSE_PORT_init+0x44>)
    1c82:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c8e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c92:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c96:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1c9a:	f042 0204 	orr.w	r2, r2, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c9e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ca2:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ca6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1caa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1cb2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1cb6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1cbe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    1cc2:	4770      	bx	lr
    1cc4:	41008000 	.word	0x41008000

00001cc8 <LIVE_PULSE_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1cc8:	4a04      	ldr	r2, [pc, #16]	; (1cdc <LIVE_PULSE_CLOCK_init+0x14>)
    1cca:	6a13      	ldr	r3, [r2, #32]
    1ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cd0:	6213      	str	r3, [r2, #32]
    1cd2:	224b      	movs	r2, #75	; 0x4b
    1cd4:	4b02      	ldr	r3, [pc, #8]	; (1ce0 <LIVE_PULSE_CLOCK_init+0x18>)
    1cd6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    1cda:	4770      	bx	lr
    1cdc:	40000800 	.word	0x40000800
    1ce0:	40001c00 	.word	0x40001c00

00001ce4 <LIVE_PULSE_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void LIVE_PULSE_init(void)
{
    1ce4:	b508      	push	{r3, lr}
	LIVE_PULSE_CLOCK_init();
    1ce6:	4b06      	ldr	r3, [pc, #24]	; (1d00 <LIVE_PULSE_init+0x1c>)
    1ce8:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1cea:	4b06      	ldr	r3, [pc, #24]	; (1d04 <LIVE_PULSE_init+0x20>)
    1cec:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1cee:	4b06      	ldr	r3, [pc, #24]	; (1d08 <LIVE_PULSE_init+0x24>)
    1cf0:	4798      	blx	r3
    1cf2:	4602      	mov	r2, r0
    1cf4:	4905      	ldr	r1, [pc, #20]	; (1d0c <LIVE_PULSE_init+0x28>)
    1cf6:	4806      	ldr	r0, [pc, #24]	; (1d10 <LIVE_PULSE_init+0x2c>)
    1cf8:	4b06      	ldr	r3, [pc, #24]	; (1d14 <LIVE_PULSE_init+0x30>)
    1cfa:	4798      	blx	r3
    1cfc:	bd08      	pop	{r3, pc}
    1cfe:	bf00      	nop
    1d00:	00001cc9 	.word	0x00001cc9
    1d04:	00001c81 	.word	0x00001c81
    1d08:	000052cb 	.word	0x000052cb
    1d0c:	43001800 	.word	0x43001800
    1d10:	200037cc 	.word	0x200037cc
    1d14:	00002835 	.word	0x00002835

00001d18 <CDCUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d18:	4b1e      	ldr	r3, [pc, #120]	; (1d94 <CDCUSB_PORT_init+0x7c>)
    1d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1d24:	6299      	str	r1, [r3, #40]	; 0x28
    1d26:	481c      	ldr	r0, [pc, #112]	; (1d98 <CDCUSB_PORT_init+0x80>)
    1d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    1d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    1d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d5e:	6299      	str	r1, [r3, #40]	; 0x28
    1d60:	490e      	ldr	r1, [pc, #56]	; (1d9c <CDCUSB_PORT_init+0x84>)
    1d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    1d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    1d92:	4770      	bx	lr
    1d94:	41008000 	.word	0x41008000
    1d98:	c0000100 	.word	0xc0000100
    1d9c:	c0000200 	.word	0xc0000200

00001da0 <CDCUSB_CLOCK_init>:
    1da0:	2242      	movs	r2, #66	; 0x42
    1da2:	4b07      	ldr	r3, [pc, #28]	; (1dc0 <CDCUSB_CLOCK_init+0x20>)
    1da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    1dac:	691a      	ldr	r2, [r3, #16]
    1dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1db4:	699a      	ldr	r2, [r3, #24]
    1db6:	f042 0201 	orr.w	r2, r2, #1
    1dba:	619a      	str	r2, [r3, #24]
    1dbc:	4770      	bx	lr
    1dbe:	bf00      	nop
    1dc0:	40001c00 	.word	0x40001c00

00001dc4 <CDCUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void CDCUSB_init(void)
{
    1dc4:	b508      	push	{r3, lr}
	CDCUSB_CLOCK_init();
    1dc6:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <CDCUSB_init+0x10>)
    1dc8:	4798      	blx	r3
	usb_d_init();
    1dca:	4b03      	ldr	r3, [pc, #12]	; (1dd8 <CDCUSB_init+0x14>)
    1dcc:	4798      	blx	r3
	CDCUSB_PORT_init();
    1dce:	4b03      	ldr	r3, [pc, #12]	; (1ddc <CDCUSB_init+0x18>)
    1dd0:	4798      	blx	r3
    1dd2:	bd08      	pop	{r3, pc}
    1dd4:	00001da1 	.word	0x00001da1
    1dd8:	000031e9 	.word	0x000031e9
    1ddc:	00001d19 	.word	0x00001d19

00001de0 <WATCHDOG_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1de0:	4a02      	ldr	r2, [pc, #8]	; (1dec <WATCHDOG_CLOCK_init+0xc>)
    1de2:	6953      	ldr	r3, [r2, #20]
    1de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1de8:	6153      	str	r3, [r2, #20]
    1dea:	4770      	bx	lr
    1dec:	40000800 	.word	0x40000800

00001df0 <WATCHDOG_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WATCHDOG_init(void)
{
    1df0:	b508      	push	{r3, lr}
	WATCHDOG_CLOCK_init();
    1df2:	4b06      	ldr	r3, [pc, #24]	; (1e0c <WATCHDOG_init+0x1c>)
    1df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
    1df6:	2248      	movs	r2, #72	; 0x48
    1df8:	4905      	ldr	r1, [pc, #20]	; (1e10 <WATCHDOG_init+0x20>)
    1dfa:	2001      	movs	r0, #1
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <WATCHDOG_init+0x24>)
    1dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1e00:	4805      	ldr	r0, [pc, #20]	; (1e18 <WATCHDOG_init+0x28>)
    1e02:	4b06      	ldr	r3, [pc, #24]	; (1e1c <WATCHDOG_init+0x2c>)
    1e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    1e06:	4b06      	ldr	r3, [pc, #24]	; (1e20 <WATCHDOG_init+0x30>)
    1e08:	4798      	blx	r3
    1e0a:	bd08      	pop	{r3, pc}
    1e0c:	00001de1 	.word	0x00001de1
    1e10:	0000d74c 	.word	0x0000d74c
    1e14:	00003565 	.word	0x00003565
    1e18:	200038a8 	.word	0x200038a8
    1e1c:	40002000 	.word	0x40002000
    1e20:	000066a9 	.word	0x000066a9

00001e24 <CAN_CCU_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e24:	4b10      	ldr	r3, [pc, #64]	; (1e68 <CAN_CCU_PORT_init+0x44>)
    1e26:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e2e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e32:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e36:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1e3a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1e3e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e42:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e46:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e4e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e52:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e56:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1e5a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1e5e:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e62:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    1e66:	4770      	bx	lr
    1e68:	41008000 	.word	0x41008000

00001e6c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1e6c:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1e6e:	4a08      	ldr	r2, [pc, #32]	; (1e90 <CAN_CCU_init+0x24>)
    1e70:	6913      	ldr	r3, [r2, #16]
    1e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1e76:	6113      	str	r3, [r2, #16]
    1e78:	2243      	movs	r2, #67	; 0x43
    1e7a:	4b06      	ldr	r3, [pc, #24]	; (1e94 <CAN_CCU_init+0x28>)
    1e7c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_CCU, CAN1);
    1e80:	4905      	ldr	r1, [pc, #20]	; (1e98 <CAN_CCU_init+0x2c>)
    1e82:	4806      	ldr	r0, [pc, #24]	; (1e9c <CAN_CCU_init+0x30>)
    1e84:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <CAN_CCU_init+0x34>)
    1e86:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1e88:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <CAN_CCU_init+0x38>)
    1e8a:	4798      	blx	r3
    1e8c:	bd08      	pop	{r3, pc}
    1e8e:	bf00      	nop
    1e90:	40000800 	.word	0x40000800
    1e94:	40001c00 	.word	0x40001c00
    1e98:	42000400 	.word	0x42000400
    1e9c:	200037e8 	.word	0x200037e8
    1ea0:	00002411 	.word	0x00002411
    1ea4:	00001e25 	.word	0x00001e25

00001ea8 <system_init>:
}

void system_init(void)
{
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1eac:	4b67      	ldr	r3, [pc, #412]	; (204c <system_init+0x1a4>)
    1eae:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1eb0:	4b67      	ldr	r3, [pc, #412]	; (2050 <system_init+0x1a8>)
    1eb2:	2280      	movs	r2, #128	; 0x80
    1eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1eb8:	4966      	ldr	r1, [pc, #408]	; (2054 <system_init+0x1ac>)
    1eba:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1ebe:	4966      	ldr	r1, [pc, #408]	; (2058 <system_init+0x1b0>)
    1ec0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1ec8:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
    1ecc:	f041 0104 	orr.w	r1, r1, #4
    1ed0:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ed4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ed8:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    1edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ee0:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ee4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    1ee8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ef0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1ef4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    1ef8:	4a58      	ldr	r2, [pc, #352]	; (205c <system_init+0x1b4>)
    1efa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1efe:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f06:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f12:	4953      	ldr	r1, [pc, #332]	; (2060 <system_init+0x1b8>)
    1f14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1f18:	f101 2180 	add.w	r1, r1, #2147516416	; 0x80008000
    1f1c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1f24:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
    1f28:	f041 0104 	orr.w	r1, r1, #4
    1f2c:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f34:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f3c:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f44:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    1f50:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1f54:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    1f58:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f5c:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f64:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1f6c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1f78:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1f7c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f80:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f88:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1f90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f98:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    1f9c:	4a31      	ldr	r2, [pc, #196]	; (2064 <system_init+0x1bc>)
    1f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1fa2:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    1fa6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1faa:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	CRC_CALC_init();
    1fae:	4b2e      	ldr	r3, [pc, #184]	; (2068 <system_init+0x1c0>)
    1fb0:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1fb2:	4b2e      	ldr	r3, [pc, #184]	; (206c <system_init+0x1c4>)
    1fb4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1fb6:	4b2e      	ldr	r3, [pc, #184]	; (2070 <system_init+0x1c8>)
    1fb8:	4798      	blx	r3

	QSPI_N25Q256_init();
    1fba:	4b2e      	ldr	r3, [pc, #184]	; (2074 <system_init+0x1cc>)
    1fbc:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1fbe:	4b2e      	ldr	r3, [pc, #184]	; (2078 <system_init+0x1d0>)
    1fc0:	4798      	blx	r3

	SPI_TEMP_init();
    1fc2:	4b2e      	ldr	r3, [pc, #184]	; (207c <system_init+0x1d4>)
    1fc4:	4798      	blx	r3

	SPI_HI3593_init();
    1fc6:	4b2e      	ldr	r3, [pc, #184]	; (2080 <system_init+0x1d8>)
    1fc8:	4798      	blx	r3

	I2C_EEPROM_init();
    1fca:	4b2e      	ldr	r3, [pc, #184]	; (2084 <system_init+0x1dc>)
    1fcc:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1fce:	4c2e      	ldr	r4, [pc, #184]	; (2088 <system_init+0x1e0>)
    1fd0:	6963      	ldr	r3, [r4, #20]
    1fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1fd6:	6163      	str	r3, [r4, #20]
    1fd8:	4f2c      	ldr	r7, [pc, #176]	; (208c <system_init+0x1e4>)
    1fda:	2343      	movs	r3, #67	; 0x43
    1fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    1fe0:	4e2b      	ldr	r6, [pc, #172]	; (2090 <system_init+0x1e8>)
    1fe2:	47b0      	blx	r6
    1fe4:	4602      	mov	r2, r0
    1fe6:	492b      	ldr	r1, [pc, #172]	; (2094 <system_init+0x1ec>)
    1fe8:	482b      	ldr	r0, [pc, #172]	; (2098 <system_init+0x1f0>)
    1fea:	4d2c      	ldr	r5, [pc, #176]	; (209c <system_init+0x1f4>)
    1fec:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1fee:	6963      	ldr	r3, [r4, #20]
    1ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1ff4:	6163      	str	r3, [r4, #20]
    1ff6:	f04f 0845 	mov.w	r8, #69	; 0x45
    1ffa:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1ffe:	47b0      	blx	r6
    2000:	4602      	mov	r2, r0
    2002:	4927      	ldr	r1, [pc, #156]	; (20a0 <system_init+0x1f8>)
    2004:	4827      	ldr	r0, [pc, #156]	; (20a4 <system_init+0x1fc>)
    2006:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2008:	69a3      	ldr	r3, [r4, #24]
    200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    200e:	61a3      	str	r3, [r4, #24]
    2010:	2344      	movs	r3, #68	; 0x44
    2012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2016:	47b0      	blx	r6
    2018:	4602      	mov	r2, r0
    201a:	4923      	ldr	r1, [pc, #140]	; (20a8 <system_init+0x200>)
    201c:	4823      	ldr	r0, [pc, #140]	; (20ac <system_init+0x204>)
    201e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2020:	69a3      	ldr	r3, [r4, #24]
    2022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2026:	61a3      	str	r3, [r4, #24]
    2028:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    202c:	47b0      	blx	r6
    202e:	4602      	mov	r2, r0
    2030:	491f      	ldr	r1, [pc, #124]	; (20b0 <system_init+0x208>)
    2032:	4820      	ldr	r0, [pc, #128]	; (20b4 <system_init+0x20c>)
    2034:	47a8      	blx	r5

	TIMER_INTERFACE_init();
	TIMER_EVENT_init();
	TIMER_ARINC_init();
	TIMER_HVAC_init();
	LIVE_PULSE_init();
    2036:	4b20      	ldr	r3, [pc, #128]	; (20b8 <system_init+0x210>)
    2038:	4798      	blx	r3

	CDCUSB_init();
    203a:	4b20      	ldr	r3, [pc, #128]	; (20bc <system_init+0x214>)
    203c:	4798      	blx	r3

	WATCHDOG_init();
    203e:	4b20      	ldr	r3, [pc, #128]	; (20c0 <system_init+0x218>)
    2040:	4798      	blx	r3
	CAN_CCU_init();
    2042:	4b20      	ldr	r3, [pc, #128]	; (20c4 <system_init+0x21c>)
    2044:	4798      	blx	r3
    2046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    204a:	bf00      	nop
    204c:	000037f1 	.word	0x000037f1
    2050:	41008000 	.word	0x41008000
    2054:	40020080 	.word	0x40020080
    2058:	c0020000 	.word	0xc0020000
    205c:	c0002000 	.word	0xc0002000
    2060:	40020000 	.word	0x40020000
    2064:	c0000004 	.word	0xc0000004
    2068:	000016a5 	.word	0x000016a5
    206c:	000016cd 	.word	0x000016cd
    2070:	0000178d 	.word	0x0000178d
    2074:	0000195d 	.word	0x0000195d
    2078:	00001995 	.word	0x00001995
    207c:	00001aa1 	.word	0x00001aa1
    2080:	00001bad 	.word	0x00001bad
    2084:	00001c59 	.word	0x00001c59
    2088:	40000800 	.word	0x40000800
    208c:	40001c00 	.word	0x40001c00
    2090:	000052c7 	.word	0x000052c7
    2094:	40003800 	.word	0x40003800
    2098:	200037b0 	.word	0x200037b0
    209c:	00002e05 	.word	0x00002e05
    20a0:	40003c00 	.word	0x40003c00
    20a4:	20003794 	.word	0x20003794
    20a8:	4101a000 	.word	0x4101a000
    20ac:	20003810 	.word	0x20003810
    20b0:	4101c000 	.word	0x4101c000
    20b4:	2000382c 	.word	0x2000382c
    20b8:	00001ce5 	.word	0x00001ce5
    20bc:	00001dc5 	.word	0x00001dc5
    20c0:	00001df1 	.word	0x00001df1
    20c4:	00001e6d 	.word	0x00001e6d

000020c8 <get_secs_in_month>:
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
	uint32_t sec_in_month = 0;

	if (leap_year(year)) {
    20c8:	f010 0f03 	tst.w	r0, #3
    20cc:	d110      	bne.n	20f0 <get_secs_in_month+0x28>
		switch (month) {
    20ce:	3901      	subs	r1, #1
    20d0:	290b      	cmp	r1, #11
    20d2:	d81e      	bhi.n	2112 <get_secs_in_month+0x4a>
    20d4:	e8df f001 	tbb	[pc, r1]
    20d8:	0a060806 	.word	0x0a060806
    20dc:	06060a06 	.word	0x06060a06
    20e0:	060a060a 	.word	0x060a060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    20e4:	480d      	ldr	r0, [pc, #52]	; (211c <get_secs_in_month+0x54>)
    20e6:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    20e8:	480d      	ldr	r0, [pc, #52]	; (2120 <get_secs_in_month+0x58>)
			break;
    20ea:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    20ec:	480d      	ldr	r0, [pc, #52]	; (2124 <get_secs_in_month+0x5c>)
			break;
    20ee:	4770      	bx	lr
		default:
			break;
		}
	} else {
		switch (month) {
    20f0:	3901      	subs	r1, #1
    20f2:	290b      	cmp	r1, #11
    20f4:	d80f      	bhi.n	2116 <get_secs_in_month+0x4e>
    20f6:	e8df f001 	tbb	[pc, r1]
    20fa:	0806      	.short	0x0806
    20fc:	0a060a06 	.word	0x0a060a06
    2100:	060a0606 	.word	0x060a0606
    2104:	060a      	.short	0x060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2106:	4805      	ldr	r0, [pc, #20]	; (211c <get_secs_in_month+0x54>)
    2108:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    210a:	4807      	ldr	r0, [pc, #28]	; (2128 <get_secs_in_month+0x60>)
			break;
    210c:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    210e:	4805      	ldr	r0, [pc, #20]	; (2124 <get_secs_in_month+0x5c>)
			break;
    2110:	4770      	bx	lr
	uint32_t sec_in_month = 0;
    2112:	2000      	movs	r0, #0
    2114:	4770      	bx	lr
    2116:	2000      	movs	r0, #0
			break;
		}
	}

	return sec_in_month;
}
    2118:	4770      	bx	lr
    211a:	bf00      	nop
    211c:	0028de80 	.word	0x0028de80
    2120:	00263b80 	.word	0x00263b80
    2124:	00278d00 	.word	0x00278d00
    2128:	0024ea00 	.word	0x0024ea00

0000212c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2130:	b083      	sub	sp, #12
	uint32_t tmp = 0;
	uint32_t i   = 0;
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    2132:	88ce      	ldrh	r6, [r1, #6]
    2134:	6980      	ldr	r0, [r0, #24]
	month   = dt->date.month;
    2136:	794d      	ldrb	r5, [r1, #5]
	day     = dt->date.day;
    2138:	790b      	ldrb	r3, [r1, #4]
    213a:	9301      	str	r3, [sp, #4]
	hour    = dt->time.hour;
    213c:	f891 a002 	ldrb.w	sl, [r1, #2]
	minutes = dt->time.min;
    2140:	f891 9001 	ldrb.w	r9, [r1, #1]
	seconds = dt->time.sec;
    2144:	f891 b000 	ldrb.w	fp, [r1]
	year    = dt->date.year - calendar->base_year;
    2148:	1a31      	subs	r1, r6, r0

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    214a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    214e:	d02d      	beq.n	21ac <convert_datetime_to_timestamp+0x80>
    2150:	2300      	movs	r3, #0
    2152:	461c      	mov	r4, r3
		if (leap_year(calendar->base_year + i)) {
			tmp += SECS_IN_LEAP_YEAR;
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    2154:	4f16      	ldr	r7, [pc, #88]	; (21b0 <convert_datetime_to_timestamp+0x84>)
		if (leap_year(calendar->base_year + i)) {
    2156:	18c2      	adds	r2, r0, r3
    2158:	f012 0f03 	tst.w	r2, #3
			tmp += SECS_IN_LEAP_YEAR;
    215c:	bf06      	itte	eq
    215e:	f104 74f1 	addeq.w	r4, r4, #31588352	; 0x1e20000
    2162:	f504 4405 	addeq.w	r4, r4, #34048	; 0x8500
			tmp += SECS_IN_NON_LEAP_YEAR;
    2166:	19e4      	addne	r4, r4, r7
	for (i = 0; i < year; ++i) {
    2168:	3301      	adds	r3, #1
    216a:	428b      	cmp	r3, r1
    216c:	d1f3      	bne.n	2156 <convert_datetime_to_timestamp+0x2a>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    216e:	462f      	mov	r7, r5
    2170:	2d01      	cmp	r5, #1
    2172:	d909      	bls.n	2188 <convert_datetime_to_timestamp+0x5c>
    2174:	2501      	movs	r5, #1
		tmp += get_secs_in_month(dt->date.year, i);
    2176:	f8df 8040 	ldr.w	r8, [pc, #64]	; 21b8 <convert_datetime_to_timestamp+0x8c>
    217a:	b2e9      	uxtb	r1, r5
    217c:	4630      	mov	r0, r6
    217e:	47c0      	blx	r8
    2180:	4404      	add	r4, r0
	for (i = 1; i < month; ++i) {
    2182:	3501      	adds	r5, #1
    2184:	42bd      	cmp	r5, r7
    2186:	d1f8      	bne.n	217a <convert_datetime_to_timestamp+0x4e>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
	tmp += hour * SECS_IN_HOUR;
	tmp += minutes * SECS_IN_MINUTE;
    2188:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
    218c:	ea4f 0989 	mov.w	r9, r9, lsl #2
	tmp += seconds;
    2190:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    2194:	fb00 900a 	mla	r0, r0, sl, r9
    2198:	4483      	add	fp, r0
	tmp += (day - 1) * SECS_IN_DAY;
    219a:	9b01      	ldr	r3, [sp, #4]
    219c:	1e58      	subs	r0, r3, #1
	tmp += seconds;
    219e:	4b05      	ldr	r3, [pc, #20]	; (21b4 <convert_datetime_to_timestamp+0x88>)
    21a0:	fb03 b000 	mla	r0, r3, r0, fp

	return tmp;
}
    21a4:	4420      	add	r0, r4
    21a6:	b003      	add	sp, #12
    21a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t tmp = 0;
    21ac:	460c      	mov	r4, r1
    21ae:	e7de      	b.n	216e <convert_datetime_to_timestamp+0x42>
    21b0:	01e13380 	.word	0x01e13380
    21b4:	00015180 	.word	0x00015180
    21b8:	000020c9 	.word	0x000020c9

000021bc <convert_timestamp_to_datetime>:
{
    21bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21c0:	460c      	mov	r4, r1
    21c2:	4690      	mov	r8, r2
	uint32_t tmp_year    = calendar->base_year;
    21c4:	6986      	ldr	r6, [r0, #24]
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    21c6:	4927      	ldr	r1, [pc, #156]	; (2264 <convert_timestamp_to_datetime+0xa8>)
    21c8:	4a27      	ldr	r2, [pc, #156]	; (2268 <convert_timestamp_to_datetime+0xac>)
    21ca:	b2b7      	uxth	r7, r6
    21cc:	f007 0303 	and.w	r3, r7, #3
    21d0:	2b00      	cmp	r3, #0
    21d2:	bf0c      	ite	eq
    21d4:	460b      	moveq	r3, r1
    21d6:	4613      	movne	r3, r2
		if (tmp >= sec_in_year) {
    21d8:	429c      	cmp	r4, r3
    21da:	d302      	bcc.n	21e2 <convert_timestamp_to_datetime+0x26>
			tmp -= sec_in_year;
    21dc:	1ae4      	subs	r4, r4, r3
			tmp_year++;
    21de:	3601      	adds	r6, #1
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    21e0:	e7f3      	b.n	21ca <convert_timestamp_to_datetime+0xe>
    21e2:	2501      	movs	r5, #1
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    21e4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2270 <convert_timestamp_to_datetime+0xb4>
    21e8:	4629      	mov	r1, r5
    21ea:	4630      	mov	r0, r6
    21ec:	47c8      	blx	r9
		if (tmp >= sec_in_month) {
    21ee:	4284      	cmp	r4, r0
    21f0:	d303      	bcc.n	21fa <convert_timestamp_to_datetime+0x3e>
			tmp -= sec_in_month;
    21f2:	1a24      	subs	r4, r4, r0
			tmp_month++;
    21f4:	3501      	adds	r5, #1
    21f6:	b2ed      	uxtb	r5, r5
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    21f8:	e7f6      	b.n	21e8 <convert_timestamp_to_datetime+0x2c>
		if (tmp >= SECS_IN_DAY) {
    21fa:	4b1c      	ldr	r3, [pc, #112]	; (226c <convert_timestamp_to_datetime+0xb0>)
    21fc:	429c      	cmp	r4, r3
    21fe:	bf98      	it	ls
    2200:	2101      	movls	r1, #1
    2202:	d909      	bls.n	2218 <convert_timestamp_to_datetime+0x5c>
    2204:	2101      	movs	r1, #1
    2206:	4b19      	ldr	r3, [pc, #100]	; (226c <convert_timestamp_to_datetime+0xb0>)
			tmp -= SECS_IN_DAY;
    2208:	f5a4 34a8 	sub.w	r4, r4, #86016	; 0x15000
    220c:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
			tmp_day++;
    2210:	3101      	adds	r1, #1
    2212:	b2c9      	uxtb	r1, r1
		if (tmp >= SECS_IN_DAY) {
    2214:	429c      	cmp	r4, r3
    2216:	d8f7      	bhi.n	2208 <convert_timestamp_to_datetime+0x4c>
		if (tmp >= SECS_IN_HOUR) {
    2218:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    221c:	bf38      	it	cc
    221e:	2200      	movcc	r2, #0
    2220:	d307      	bcc.n	2232 <convert_timestamp_to_datetime+0x76>
    2222:	2200      	movs	r2, #0
			tmp -= SECS_IN_HOUR;
    2224:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
			tmp_hour++;
    2228:	3201      	adds	r2, #1
    222a:	b2d2      	uxtb	r2, r2
		if (tmp >= SECS_IN_HOUR) {
    222c:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    2230:	d2f8      	bcs.n	2224 <convert_timestamp_to_datetime+0x68>
		if (tmp >= SECS_IN_MINUTE) {
    2232:	2c3b      	cmp	r4, #59	; 0x3b
    2234:	bf98      	it	ls
    2236:	2300      	movls	r3, #0
    2238:	d905      	bls.n	2246 <convert_timestamp_to_datetime+0x8a>
    223a:	2300      	movs	r3, #0
			tmp -= SECS_IN_MINUTE;
    223c:	3c3c      	subs	r4, #60	; 0x3c
			tmp_minutes++;
    223e:	3301      	adds	r3, #1
    2240:	b2db      	uxtb	r3, r3
		if (tmp >= SECS_IN_MINUTE) {
    2242:	2c3b      	cmp	r4, #59	; 0x3b
    2244:	d8fa      	bhi.n	223c <convert_timestamp_to_datetime+0x80>
	dt->date.year  = tmp_year;
    2246:	f8a8 7006 	strh.w	r7, [r8, #6]
	dt->date.month = tmp_month;
    224a:	f888 5005 	strb.w	r5, [r8, #5]
	dt->date.day   = tmp_day;
    224e:	f888 1004 	strb.w	r1, [r8, #4]
	dt->time.hour  = tmp_hour;
    2252:	f888 2002 	strb.w	r2, [r8, #2]
	dt->time.min   = tmp_minutes;
    2256:	f888 3001 	strb.w	r3, [r8, #1]
	dt->time.sec   = tmp;
    225a:	f888 4000 	strb.w	r4, [r8]
}
    225e:	2000      	movs	r0, #0
    2260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2264:	01e28500 	.word	0x01e28500
    2268:	01e13380 	.word	0x01e13380
    226c:	0001517f 	.word	0x0001517f
    2270:	000020c9 	.word	0x000020c9

00002274 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2274:	b538      	push	{r3, r4, r5, lr}
    2276:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    2278:	4604      	mov	r4, r0
    227a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    227e:	490b      	ldr	r1, [pc, #44]	; (22ac <calendar_init+0x38>)
    2280:	3000      	adds	r0, #0
    2282:	bf18      	it	ne
    2284:	2001      	movne	r0, #1
    2286:	4b0a      	ldr	r3, [pc, #40]	; (22b0 <calendar_init+0x3c>)
    2288:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    228a:	6823      	ldr	r3, [r4, #0]
    228c:	42ab      	cmp	r3, r5
    228e:	d008      	beq.n	22a2 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    2290:	b94b      	cbnz	r3, 22a6 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    2292:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    2294:	4620      	mov	r0, r4
    2296:	4b07      	ldr	r3, [pc, #28]	; (22b4 <calendar_init+0x40>)
    2298:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    229a:	f240 73b2 	movw	r3, #1970	; 0x7b2
    229e:	61a3      	str	r3, [r4, #24]

	return ret;
    22a0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
    22a2:	2000      	movs	r0, #0
    22a4:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
    22a6:	f06f 0011 	mvn.w	r0, #17
}
    22aa:	bd38      	pop	{r3, r4, r5, pc}
    22ac:	0000d768 	.word	0x0000d768
    22b0:	00003565 	.word	0x00003565
    22b4:	0000409d 	.word	0x0000409d

000022b8 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    22b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(calendar);
    22ba:	4604      	mov	r4, r0
    22bc:	f240 12e5 	movw	r2, #485	; 0x1e5
    22c0:	4905      	ldr	r1, [pc, #20]	; (22d8 <calendar_enable+0x20>)
    22c2:	3000      	adds	r0, #0
    22c4:	bf18      	it	ne
    22c6:	2001      	movne	r0, #1
    22c8:	4b04      	ldr	r3, [pc, #16]	; (22dc <calendar_enable+0x24>)
    22ca:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    22cc:	4620      	mov	r0, r4
    22ce:	4b04      	ldr	r3, [pc, #16]	; (22e0 <calendar_enable+0x28>)
    22d0:	4798      	blx	r3

	return ERR_NONE;
}
    22d2:	2000      	movs	r0, #0
    22d4:	bd10      	pop	{r4, pc}
    22d6:	bf00      	nop
    22d8:	0000d768 	.word	0x0000d768
    22dc:	00003565 	.word	0x00003565
    22e0:	0000413d 	.word	0x0000413d

000022e4 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    22e4:	b530      	push	{r4, r5, lr}
    22e6:	b083      	sub	sp, #12
    22e8:	460d      	mov	r5, r1
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    22ea:	4604      	mov	r4, r0
    22ec:	f44f 7203 	mov.w	r2, #524	; 0x20c
    22f0:	4910      	ldr	r1, [pc, #64]	; (2334 <calendar_set_time+0x50>)
    22f2:	3000      	adds	r0, #0
    22f4:	bf18      	it	ne
    22f6:	2001      	movne	r0, #1
    22f8:	4b0f      	ldr	r3, [pc, #60]	; (2338 <calendar_set_time+0x54>)
    22fa:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    22fc:	4620      	mov	r0, r4
    22fe:	4b0f      	ldr	r3, [pc, #60]	; (233c <calendar_set_time+0x58>)
    2300:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    2302:	466a      	mov	r2, sp
    2304:	4601      	mov	r1, r0
    2306:	4620      	mov	r0, r4
    2308:	4b0d      	ldr	r3, [pc, #52]	; (2340 <calendar_set_time+0x5c>)
    230a:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    230c:	782b      	ldrb	r3, [r5, #0]
    230e:	f88d 3000 	strb.w	r3, [sp]
	dt.time.min  = p_calendar_time->min;
    2312:	786b      	ldrb	r3, [r5, #1]
    2314:	f88d 3001 	strb.w	r3, [sp, #1]
	dt.time.hour = p_calendar_time->hour;
    2318:	78ab      	ldrb	r3, [r5, #2]
    231a:	f88d 3002 	strb.w	r3, [sp, #2]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    231e:	4669      	mov	r1, sp
    2320:	4620      	mov	r0, r4
    2322:	4b08      	ldr	r3, [pc, #32]	; (2344 <calendar_set_time+0x60>)
    2324:	4798      	blx	r3

	_calendar_set_counter(&calendar->device, new_ts);
    2326:	4601      	mov	r1, r0
    2328:	4620      	mov	r0, r4
    232a:	4b07      	ldr	r3, [pc, #28]	; (2348 <calendar_set_time+0x64>)
    232c:	4798      	blx	r3

	return ERR_NONE;
}
    232e:	2000      	movs	r0, #0
    2330:	b003      	add	sp, #12
    2332:	bd30      	pop	{r4, r5, pc}
    2334:	0000d768 	.word	0x0000d768
    2338:	00003565 	.word	0x00003565
    233c:	000041ad 	.word	0x000041ad
    2340:	000021bd 	.word	0x000021bd
    2344:	0000212d 	.word	0x0000212d
    2348:	00004179 	.word	0x00004179

0000234c <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    234c:	b530      	push	{r4, r5, lr}
    234e:	b083      	sub	sp, #12
    2350:	460d      	mov	r5, r1
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2352:	4604      	mov	r4, r0
    2354:	f44f 7209 	mov.w	r2, #548	; 0x224
    2358:	4910      	ldr	r1, [pc, #64]	; (239c <calendar_set_date+0x50>)
    235a:	3000      	adds	r0, #0
    235c:	bf18      	it	ne
    235e:	2001      	movne	r0, #1
    2360:	4b0f      	ldr	r3, [pc, #60]	; (23a0 <calendar_set_date+0x54>)
    2362:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    2364:	4620      	mov	r0, r4
    2366:	4b0f      	ldr	r3, [pc, #60]	; (23a4 <calendar_set_date+0x58>)
    2368:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    236a:	466a      	mov	r2, sp
    236c:	4601      	mov	r1, r0
    236e:	4620      	mov	r0, r4
    2370:	4b0d      	ldr	r3, [pc, #52]	; (23a8 <calendar_set_date+0x5c>)
    2372:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    2374:	782b      	ldrb	r3, [r5, #0]
    2376:	f88d 3004 	strb.w	r3, [sp, #4]
	dt.date.month = p_calendar_date->month;
    237a:	786b      	ldrb	r3, [r5, #1]
    237c:	f88d 3005 	strb.w	r3, [sp, #5]
	dt.date.year  = p_calendar_date->year;
    2380:	886b      	ldrh	r3, [r5, #2]
    2382:	f8ad 3006 	strh.w	r3, [sp, #6]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    2386:	4669      	mov	r1, sp
    2388:	4620      	mov	r0, r4
    238a:	4b08      	ldr	r3, [pc, #32]	; (23ac <calendar_set_date+0x60>)
    238c:	4798      	blx	r3

	_calendar_set_counter(&calendar->device, new_ts);
    238e:	4601      	mov	r1, r0
    2390:	4620      	mov	r0, r4
    2392:	4b07      	ldr	r3, [pc, #28]	; (23b0 <calendar_set_date+0x64>)
    2394:	4798      	blx	r3

	return ERR_NONE;
}
    2396:	2000      	movs	r0, #0
    2398:	b003      	add	sp, #12
    239a:	bd30      	pop	{r4, r5, pc}
    239c:	0000d768 	.word	0x0000d768
    23a0:	00003565 	.word	0x00003565
    23a4:	000041ad 	.word	0x000041ad
    23a8:	000021bd 	.word	0x000021bd
    23ac:	0000212d 	.word	0x0000212d
    23b0:	00004179 	.word	0x00004179

000023b4 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    23b4:	b538      	push	{r3, r4, r5, lr}
    23b6:	460d      	mov	r5, r1
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    23b8:	4604      	mov	r4, r0
    23ba:	f240 223b 	movw	r2, #571	; 0x23b
    23be:	4908      	ldr	r1, [pc, #32]	; (23e0 <calendar_get_date_time+0x2c>)
    23c0:	3000      	adds	r0, #0
    23c2:	bf18      	it	ne
    23c4:	2001      	movne	r0, #1
    23c6:	4b07      	ldr	r3, [pc, #28]	; (23e4 <calendar_get_date_time+0x30>)
    23c8:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    23ca:	4620      	mov	r0, r4
    23cc:	4b06      	ldr	r3, [pc, #24]	; (23e8 <calendar_get_date_time+0x34>)
    23ce:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    23d0:	462a      	mov	r2, r5
    23d2:	4601      	mov	r1, r0
    23d4:	4620      	mov	r0, r4
    23d6:	4b05      	ldr	r3, [pc, #20]	; (23ec <calendar_get_date_time+0x38>)
    23d8:	4798      	blx	r3

	return ERR_NONE;
}
    23da:	2000      	movs	r0, #0
    23dc:	bd38      	pop	{r3, r4, r5, pc}
    23de:	bf00      	nop
    23e0:	0000d768 	.word	0x0000d768
    23e4:	00003565 	.word	0x00003565
    23e8:	000041ad 	.word	0x000041ad
    23ec:	000021bd 	.word	0x000021bd

000023f0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    23f0:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
    23f2:	69c3      	ldr	r3, [r0, #28]
    23f4:	b103      	cbz	r3, 23f8 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
    23f6:	4798      	blx	r3
    23f8:	bd08      	pop	{r3, pc}

000023fa <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    23fa:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
    23fc:	6a03      	ldr	r3, [r0, #32]
    23fe:	b103      	cbz	r3, 2402 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
    2400:	4798      	blx	r3
    2402:	bd08      	pop	{r3, pc}

00002404 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2404:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
    2406:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2408:	b103      	cbz	r3, 240c <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
    240a:	4798      	blx	r3
    240c:	bd08      	pop	{r3, pc}
	...

00002410 <can_async_init>:
{
    2410:	b538      	push	{r3, r4, r5, lr}
    2412:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2414:	4604      	mov	r4, r0
    2416:	b1a0      	cbz	r0, 2442 <can_async_init+0x32>
    2418:	1c08      	adds	r0, r1, #0
    241a:	bf18      	it	ne
    241c:	2001      	movne	r0, #1
    241e:	2241      	movs	r2, #65	; 0x41
    2420:	4909      	ldr	r1, [pc, #36]	; (2448 <can_async_init+0x38>)
    2422:	4b0a      	ldr	r3, [pc, #40]	; (244c <can_async_init+0x3c>)
    2424:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
    2426:	4629      	mov	r1, r5
    2428:	4620      	mov	r0, r4
    242a:	4b09      	ldr	r3, [pc, #36]	; (2450 <can_async_init+0x40>)
    242c:	4798      	blx	r3
	if (rc) {
    242e:	4603      	mov	r3, r0
    2430:	b928      	cbnz	r0, 243e <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
    2432:	4a08      	ldr	r2, [pc, #32]	; (2454 <can_async_init+0x44>)
    2434:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2436:	4a08      	ldr	r2, [pc, #32]	; (2458 <can_async_init+0x48>)
    2438:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    243a:	4a08      	ldr	r2, [pc, #32]	; (245c <can_async_init+0x4c>)
    243c:	60e2      	str	r2, [r4, #12]
}
    243e:	4618      	mov	r0, r3
    2440:	bd38      	pop	{r3, r4, r5, pc}
    2442:	2000      	movs	r0, #0
    2444:	e7eb      	b.n	241e <can_async_init+0xe>
    2446:	bf00      	nop
    2448:	0000d784 	.word	0x0000d784
    244c:	00003565 	.word	0x00003565
    2450:	0000360d 	.word	0x0000360d
    2454:	000023f1 	.word	0x000023f1
    2458:	000023fb 	.word	0x000023fb
    245c:	00002405 	.word	0x00002405

00002460 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2460:	b538      	push	{r3, r4, r5, lr}
    2462:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    2464:	4605      	mov	r5, r0
    2466:	b158      	cbz	r0, 2480 <crc_sync_init+0x20>
    2468:	1c08      	adds	r0, r1, #0
    246a:	bf18      	it	ne
    246c:	2001      	movne	r0, #1
    246e:	222b      	movs	r2, #43	; 0x2b
    2470:	4904      	ldr	r1, [pc, #16]	; (2484 <crc_sync_init+0x24>)
    2472:	4b05      	ldr	r3, [pc, #20]	; (2488 <crc_sync_init+0x28>)
    2474:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2476:	4621      	mov	r1, r4
    2478:	4628      	mov	r0, r5
    247a:	4b04      	ldr	r3, [pc, #16]	; (248c <crc_sync_init+0x2c>)
    247c:	4798      	blx	r3
}
    247e:	bd38      	pop	{r3, r4, r5, pc}
    2480:	2000      	movs	r0, #0
    2482:	e7f4      	b.n	246e <crc_sync_init+0xe>
    2484:	0000d7a0 	.word	0x0000d7a0
    2488:	00003565 	.word	0x00003565
    248c:	0000385d 	.word	0x0000385d

00002490 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    2490:	b510      	push	{r4, lr}
	ASSERT(descr);
    2492:	4604      	mov	r4, r0
    2494:	223f      	movs	r2, #63	; 0x3f
    2496:	4905      	ldr	r1, [pc, #20]	; (24ac <crc_sync_enable+0x1c>)
    2498:	3000      	adds	r0, #0
    249a:	bf18      	it	ne
    249c:	2001      	movne	r0, #1
    249e:	4b04      	ldr	r3, [pc, #16]	; (24b0 <crc_sync_enable+0x20>)
    24a0:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    24a2:	4620      	mov	r0, r4
    24a4:	4b03      	ldr	r3, [pc, #12]	; (24b4 <crc_sync_enable+0x24>)
    24a6:	4798      	blx	r3
}
    24a8:	bd10      	pop	{r4, pc}
    24aa:	bf00      	nop
    24ac:	0000d7a0 	.word	0x0000d7a0
    24b0:	00003565 	.word	0x00003565
    24b4:	00003863 	.word	0x00003863

000024b8 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    24b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ba:	460c      	mov	r4, r1
    24bc:	4615      	mov	r5, r2
    24be:	461e      	mov	r6, r3
	ASSERT(descr && data && len && pcrc);
    24c0:	4607      	mov	r7, r0
    24c2:	b128      	cbz	r0, 24d0 <crc_sync_crc32+0x18>
    24c4:	b131      	cbz	r1, 24d4 <crc_sync_crc32+0x1c>
    24c6:	b13a      	cbz	r2, 24d8 <crc_sync_crc32+0x20>
    24c8:	1c18      	adds	r0, r3, #0
    24ca:	bf18      	it	ne
    24cc:	2001      	movne	r0, #1
    24ce:	e004      	b.n	24da <crc_sync_crc32+0x22>
    24d0:	2000      	movs	r0, #0
    24d2:	e002      	b.n	24da <crc_sync_crc32+0x22>
    24d4:	2000      	movs	r0, #0
    24d6:	e000      	b.n	24da <crc_sync_crc32+0x22>
    24d8:	2000      	movs	r0, #0
    24da:	2253      	movs	r2, #83	; 0x53
    24dc:	4904      	ldr	r1, [pc, #16]	; (24f0 <crc_sync_crc32+0x38>)
    24de:	4b05      	ldr	r3, [pc, #20]	; (24f4 <crc_sync_crc32+0x3c>)
    24e0:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    24e2:	4633      	mov	r3, r6
    24e4:	462a      	mov	r2, r5
    24e6:	4621      	mov	r1, r4
    24e8:	4638      	mov	r0, r7
    24ea:	4c03      	ldr	r4, [pc, #12]	; (24f8 <crc_sync_crc32+0x40>)
    24ec:	47a0      	blx	r4
}
    24ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24f0:	0000d7a0 	.word	0x0000d7a0
    24f4:	00003565 	.word	0x00003565
    24f8:	00003869 	.word	0x00003869

000024fc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    24fc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    24fe:	4b04      	ldr	r3, [pc, #16]	; (2510 <delay_us+0x14>)
    2500:	681c      	ldr	r4, [r3, #0]
    2502:	4b04      	ldr	r3, [pc, #16]	; (2514 <delay_us+0x18>)
    2504:	4798      	blx	r3
    2506:	4601      	mov	r1, r0
    2508:	4620      	mov	r0, r4
    250a:	4b03      	ldr	r3, [pc, #12]	; (2518 <delay_us+0x1c>)
    250c:	4798      	blx	r3
    250e:	bd10      	pop	{r4, pc}
    2510:	20001b90 	.word	0x20001b90
    2514:	000037b1 	.word	0x000037b1
    2518:	000037e9 	.word	0x000037e9

0000251c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    251c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    251e:	4b04      	ldr	r3, [pc, #16]	; (2530 <delay_ms+0x14>)
    2520:	681c      	ldr	r4, [r3, #0]
    2522:	4b04      	ldr	r3, [pc, #16]	; (2534 <delay_ms+0x18>)
    2524:	4798      	blx	r3
    2526:	4601      	mov	r1, r0
    2528:	4620      	mov	r0, r4
    252a:	4b03      	ldr	r3, [pc, #12]	; (2538 <delay_ms+0x1c>)
    252c:	4798      	blx	r3
    252e:	bd10      	pop	{r4, pc}
    2530:	20001b90 	.word	0x20001b90
    2534:	000037c9 	.word	0x000037c9
    2538:	000037e9 	.word	0x000037e9

0000253c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    253c:	b508      	push	{r3, lr}
	return _event_system_init();
    253e:	4b01      	ldr	r3, [pc, #4]	; (2544 <event_system_init+0x8>)
    2540:	4798      	blx	r3
}
    2542:	bd08      	pop	{r3, pc}
    2544:	00003b01 	.word	0x00003b01

00002548 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2548:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    254a:	4b12      	ldr	r3, [pc, #72]	; (2594 <process_ext_irq+0x4c>)
    254c:	68d9      	ldr	r1, [r3, #12]
    254e:	4288      	cmp	r0, r1
    2550:	d01d      	beq.n	258e <process_ext_irq+0x46>
    2552:	2201      	movs	r2, #1
    2554:	2502      	movs	r5, #2
    2556:	2400      	movs	r4, #0
    2558:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
    255a:	4288      	cmp	r0, r1
			lower = middle + 1;
    255c:	bf87      	ittee	hi
    255e:	3201      	addhi	r2, #1
    2560:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
    2562:	f102 32ff 	addls.w	r2, r2, #4294967295
    2566:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
    2568:	42a5      	cmp	r5, r4
    256a:	d312      	bcc.n	2592 <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
    256c:	192b      	adds	r3, r5, r4
    256e:	105b      	asrs	r3, r3, #1
    2570:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    2572:	2a01      	cmp	r2, #1
    2574:	d80d      	bhi.n	2592 <process_ext_irq+0x4a>
    2576:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
    2578:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    257c:	6849      	ldr	r1, [r1, #4]
    257e:	4281      	cmp	r1, r0
    2580:	d1eb      	bne.n	255a <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
    2582:	4a04      	ldr	r2, [pc, #16]	; (2594 <process_ext_irq+0x4c>)
    2584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2588:	b11b      	cbz	r3, 2592 <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
    258a:	4798      	blx	r3
    258c:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
    258e:	2301      	movs	r3, #1
    2590:	e7f7      	b.n	2582 <process_ext_irq+0x3a>
    2592:	bd70      	pop	{r4, r5, r6, pc}
    2594:	20001b94 	.word	0x20001b94

00002598 <ext_irq_init>:
{
    2598:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    259a:	4b06      	ldr	r3, [pc, #24]	; (25b4 <ext_irq_init+0x1c>)
    259c:	f04f 31ff 	mov.w	r1, #4294967295
    25a0:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    25a2:	2200      	movs	r2, #0
    25a4:	601a      	str	r2, [r3, #0]
		ext_irqs[i].pin = 0xFFFFFFFF;
    25a6:	60d9      	str	r1, [r3, #12]
		ext_irqs[i].cb  = NULL;
    25a8:	609a      	str	r2, [r3, #8]
	return _ext_irq_init(process_ext_irq);
    25aa:	4803      	ldr	r0, [pc, #12]	; (25b8 <ext_irq_init+0x20>)
    25ac:	4b03      	ldr	r3, [pc, #12]	; (25bc <ext_irq_init+0x24>)
    25ae:	4798      	blx	r3
}
    25b0:	bd08      	pop	{r3, pc}
    25b2:	bf00      	nop
    25b4:	20001b94 	.word	0x20001b94
    25b8:	00002549 	.word	0x00002549
    25bc:	000039d5 	.word	0x000039d5

000025c0 <ext_irq_register>:
{
    25c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25c4:	4603      	mov	r3, r0
		if (ext_irqs[i].pin == pin) {
    25c6:	4a31      	ldr	r2, [pc, #196]	; (268c <ext_irq_register+0xcc>)
    25c8:	6852      	ldr	r2, [r2, #4]
    25ca:	4290      	cmp	r0, r2
    25cc:	d011      	beq.n	25f2 <ext_irq_register+0x32>
    25ce:	4a2f      	ldr	r2, [pc, #188]	; (268c <ext_irq_register+0xcc>)
    25d0:	68d2      	ldr	r2, [r2, #12]
    25d2:	4282      	cmp	r2, r0
    25d4:	bf08      	it	eq
    25d6:	2201      	moveq	r2, #1
    25d8:	d00c      	beq.n	25f4 <ext_irq_register+0x34>
	if (NULL == cb) {
    25da:	b329      	cbz	r1, 2628 <ext_irq_register+0x68>
			if (NULL == ext_irqs[i].cb) {
    25dc:	4a2b      	ldr	r2, [pc, #172]	; (268c <ext_irq_register+0xcc>)
    25de:	6812      	ldr	r2, [r2, #0]
    25e0:	4610      	mov	r0, r2
    25e2:	b33a      	cbz	r2, 2634 <ext_irq_register+0x74>
    25e4:	4a29      	ldr	r2, [pc, #164]	; (268c <ext_irq_register+0xcc>)
    25e6:	6892      	ldr	r2, [r2, #8]
    25e8:	b312      	cbz	r2, 2630 <ext_irq_register+0x70>
		return ERR_INVALID_ARG;
    25ea:	f06f 000c 	mvn.w	r0, #12
    25ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ext_irqs[i].pin == pin) {
    25f2:	2200      	movs	r2, #0
			ext_irqs[i].cb = cb;
    25f4:	4825      	ldr	r0, [pc, #148]	; (268c <ext_irq_register+0xcc>)
    25f6:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
	if (NULL == cb) {
    25fa:	2900      	cmp	r1, #0
    25fc:	d140      	bne.n	2680 <ext_irq_register+0xc0>
		return _ext_irq_enable(pin, false);
    25fe:	4618      	mov	r0, r3
    2600:	4b23      	ldr	r3, [pc, #140]	; (2690 <ext_irq_register+0xd0>)
    2602:	4798      	blx	r3
    2604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2608:	f1b2 3fff 	cmp.w	r2, #4294967295
    260c:	d01f      	beq.n	264e <ext_irq_register+0x8e>
				struct ext_irq tmp = ext_irqs[j];
    260e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 268c <ext_irq_register+0xcc>
    2612:	f8de c000 	ldr.w	ip, [lr]
				ext_irqs[j] = ext_irqs[i];
    2616:	eb0e 01c7 	add.w	r1, lr, r7, lsl #3
    261a:	c903      	ldmia	r1, {r0, r1}
    261c:	e88e 0003 	stmia.w	lr, {r0, r1}
				ext_irqs[i] = tmp;
    2620:	f845 c004 	str.w	ip, [r5, r4]
    2624:	6072      	str	r2, [r6, #4]
    2626:	e012      	b.n	264e <ext_irq_register+0x8e>
			return ERR_INVALID_ARG;
    2628:	f06f 000c 	mvn.w	r0, #12
    262c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (NULL == ext_irqs[i].cb) {
    2630:	2201      	movs	r2, #1
    2632:	4610      	mov	r0, r2
				ext_irqs[i].cb  = cb;
    2634:	4d15      	ldr	r5, [pc, #84]	; (268c <ext_irq_register+0xcc>)
    2636:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
				ext_irqs[i].pin = pin;
    263a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    263e:	6053      	str	r3, [r2, #4]
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2640:	4607      	mov	r7, r0
				ext_irqs[i] = tmp;
    2642:	00c4      	lsls	r4, r0, #3
    2644:	192e      	adds	r6, r5, r4
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2646:	686a      	ldr	r2, [r5, #4]
    2648:	6871      	ldr	r1, [r6, #4]
    264a:	428a      	cmp	r2, r1
    264c:	d8dc      	bhi.n	2608 <ext_irq_register+0x48>
    264e:	4a0f      	ldr	r2, [pc, #60]	; (268c <ext_irq_register+0xcc>)
    2650:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    2654:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
    2658:	6852      	ldr	r2, [r2, #4]
    265a:	4572      	cmp	r2, lr
    265c:	d210      	bcs.n	2680 <ext_irq_register+0xc0>
    265e:	f1be 3fff 	cmp.w	lr, #4294967295
    2662:	d00d      	beq.n	2680 <ext_irq_register+0xc0>
				struct ext_irq tmp = ext_irqs[j];
    2664:	4a09      	ldr	r2, [pc, #36]	; (268c <ext_irq_register+0xcc>)
    2666:	4694      	mov	ip, r2
    2668:	f85c 8f08 	ldr.w	r8, [ip, #8]!
				ext_irqs[j] = ext_irqs[i];
    266c:	eb02 07c7 	add.w	r7, r2, r7, lsl #3
    2670:	e897 0003 	ldmia.w	r7, {r0, r1}
    2674:	e88c 0003 	stmia.w	ip, {r0, r1}
				ext_irqs[i] = tmp;
    2678:	f845 8004 	str.w	r8, [r5, r4]
    267c:	f8c6 e004 	str.w	lr, [r6, #4]
	return _ext_irq_enable(pin, true);
    2680:	2101      	movs	r1, #1
    2682:	4618      	mov	r0, r3
    2684:	4b02      	ldr	r3, [pc, #8]	; (2690 <ext_irq_register+0xd0>)
    2686:	4798      	blx	r3
    2688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    268c:	20001b94 	.word	0x20001b94
    2690:	00003aa1 	.word	0x00003aa1

00002694 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2694:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2696:	8843      	ldrh	r3, [r0, #2]
    2698:	f413 7f80 	tst.w	r3, #256	; 0x100
    269c:	d102      	bne.n	26a4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    269e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    26a0:	b103      	cbz	r3, 26a4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    26a2:	4798      	blx	r3
    26a4:	bd08      	pop	{r3, pc}

000026a6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    26a6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    26a8:	8843      	ldrh	r3, [r0, #2]
    26aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    26ae:	d102      	bne.n	26b6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    26b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    26b2:	b103      	cbz	r3, 26b6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    26b4:	4798      	blx	r3
    26b6:	bd08      	pop	{r3, pc}

000026b8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    26b8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    26ba:	8843      	ldrh	r3, [r0, #2]
    26bc:	f413 7f80 	tst.w	r3, #256	; 0x100
    26c0:	d102      	bne.n	26c8 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    26c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    26c4:	b103      	cbz	r3, 26c8 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    26c6:	4798      	blx	r3
    26c8:	bd08      	pop	{r3, pc}
	...

000026cc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    26cc:	b510      	push	{r4, lr}
    26ce:	b084      	sub	sp, #16
    26d0:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    26d2:	8a83      	ldrh	r3, [r0, #20]
    26d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    26d8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    26da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    26de:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    26e2:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    26e4:	a901      	add	r1, sp, #4
    26e6:	3828      	subs	r0, #40	; 0x28
    26e8:	4b03      	ldr	r3, [pc, #12]	; (26f8 <i2c_m_async_write+0x2c>)
    26ea:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    26ec:	2800      	cmp	r0, #0
    26ee:	bf08      	it	eq
    26f0:	4620      	moveq	r0, r4
    26f2:	b004      	add	sp, #16
    26f4:	bd10      	pop	{r4, pc}
    26f6:	bf00      	nop
    26f8:	00004771 	.word	0x00004771

000026fc <i2c_m_async_read>:
{
    26fc:	b510      	push	{r4, lr}
    26fe:	b084      	sub	sp, #16
    2700:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    2702:	8a83      	ldrh	r3, [r0, #20]
    2704:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    2708:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    270a:	f248 0301 	movw	r3, #32769	; 0x8001
    270e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    2712:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2714:	a901      	add	r1, sp, #4
    2716:	3828      	subs	r0, #40	; 0x28
    2718:	4b03      	ldr	r3, [pc, #12]	; (2728 <i2c_m_async_read+0x2c>)
    271a:	4798      	blx	r3
}
    271c:	2800      	cmp	r0, #0
    271e:	bf08      	it	eq
    2720:	4620      	moveq	r0, r4
    2722:	b004      	add	sp, #16
    2724:	bd10      	pop	{r4, pc}
    2726:	bf00      	nop
    2728:	00004771 	.word	0x00004771

0000272c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    272c:	b570      	push	{r4, r5, r6, lr}
    272e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    2730:	4604      	mov	r4, r0
    2732:	2289      	movs	r2, #137	; 0x89
    2734:	490f      	ldr	r1, [pc, #60]	; (2774 <i2c_m_async_init+0x48>)
    2736:	3000      	adds	r0, #0
    2738:	bf18      	it	ne
    273a:	2001      	movne	r0, #1
    273c:	4b0e      	ldr	r3, [pc, #56]	; (2778 <i2c_m_async_init+0x4c>)
    273e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    2740:	4629      	mov	r1, r5
    2742:	4620      	mov	r0, r4
    2744:	4b0d      	ldr	r3, [pc, #52]	; (277c <i2c_m_async_init+0x50>)
    2746:	4798      	blx	r3
	if (init_status) {
    2748:	4605      	mov	r5, r0
    274a:	b108      	cbz	r0, 2750 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    274c:	4628      	mov	r0, r5
    274e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    2750:	4b0b      	ldr	r3, [pc, #44]	; (2780 <i2c_m_async_init+0x54>)
    2752:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2754:	4b0b      	ldr	r3, [pc, #44]	; (2784 <i2c_m_async_init+0x58>)
    2756:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    2758:	4a0b      	ldr	r2, [pc, #44]	; (2788 <i2c_m_async_init+0x5c>)
    275a:	2101      	movs	r1, #1
    275c:	4620      	mov	r0, r4
    275e:	4e0b      	ldr	r6, [pc, #44]	; (278c <i2c_m_async_init+0x60>)
    2760:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2762:	4a0b      	ldr	r2, [pc, #44]	; (2790 <i2c_m_async_init+0x64>)
    2764:	2102      	movs	r1, #2
    2766:	4620      	mov	r0, r4
    2768:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    276a:	4a0a      	ldr	r2, [pc, #40]	; (2794 <i2c_m_async_init+0x68>)
    276c:	2100      	movs	r1, #0
    276e:	4620      	mov	r0, r4
    2770:	47b0      	blx	r6
	return ERR_NONE;
    2772:	e7eb      	b.n	274c <i2c_m_async_init+0x20>
    2774:	0000d7bc 	.word	0x0000d7bc
    2778:	00003565 	.word	0x00003565
    277c:	000046f1 	.word	0x000046f1
    2780:	000026fd 	.word	0x000026fd
    2784:	000026cd 	.word	0x000026cd
    2788:	00002695 	.word	0x00002695
    278c:	000048a1 	.word	0x000048a1
    2790:	000026a7 	.word	0x000026a7
    2794:	000026b9 	.word	0x000026b9

00002798 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    2798:	b570      	push	{r4, r5, r6, lr}
	int32_t rc;

	ASSERT(i2c);
    279a:	4604      	mov	r4, r0
    279c:	22b9      	movs	r2, #185	; 0xb9
    279e:	490d      	ldr	r1, [pc, #52]	; (27d4 <i2c_m_async_enable+0x3c>)
    27a0:	3000      	adds	r0, #0
    27a2:	bf18      	it	ne
    27a4:	2001      	movne	r0, #1
    27a6:	4b0c      	ldr	r3, [pc, #48]	; (27d8 <i2c_m_async_enable+0x40>)
    27a8:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    27aa:	4620      	mov	r0, r4
    27ac:	4b0b      	ldr	r3, [pc, #44]	; (27dc <i2c_m_async_enable+0x44>)
    27ae:	4798      	blx	r3
	if (rc == ERR_NONE) {
    27b0:	4605      	mov	r5, r0
    27b2:	b108      	cbz	r0, 27b8 <i2c_m_async_enable+0x20>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
	}
	return rc;
}
    27b4:	4628      	mov	r0, r5
    27b6:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    27b8:	2201      	movs	r2, #1
    27ba:	4611      	mov	r1, r2
    27bc:	4620      	mov	r0, r4
    27be:	4e08      	ldr	r6, [pc, #32]	; (27e0 <i2c_m_async_enable+0x48>)
    27c0:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    27c2:	2201      	movs	r2, #1
    27c4:	2102      	movs	r1, #2
    27c6:	4620      	mov	r0, r4
    27c8:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    27ca:	2201      	movs	r2, #1
    27cc:	2100      	movs	r1, #0
    27ce:	4620      	mov	r0, r4
    27d0:	47b0      	blx	r6
	return rc;
    27d2:	e7ef      	b.n	27b4 <i2c_m_async_enable+0x1c>
    27d4:	0000d7bc 	.word	0x0000d7bc
    27d8:	00003565 	.word	0x00003565
    27dc:	00004679 	.word	0x00004679
    27e0:	000048bb 	.word	0x000048bb

000027e4 <i2c_m_async_set_slaveaddr>:
/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    27e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
    27e8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    27ec:	430a      	orrs	r2, r1
    27ee:	8782      	strh	r2, [r0, #60]	; 0x3c
}
    27f0:	4610      	mov	r0, r2
    27f2:	4770      	bx	lr

000027f4 <i2c_m_async_register_callback>:
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
	switch (type) {
    27f4:	2901      	cmp	r1, #1
    27f6:	d008      	beq.n	280a <i2c_m_async_register_callback+0x16>
    27f8:	b121      	cbz	r1, 2804 <i2c_m_async_register_callback+0x10>
    27fa:	2902      	cmp	r1, #2
    27fc:	d008      	beq.n	2810 <i2c_m_async_register_callback+0x1c>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		return ERR_INVALID_ARG;
    27fe:	f06f 000c 	mvn.w	r0, #12
	}
	return I2C_OK;
}
    2802:	4770      	bx	lr
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    2804:	6302      	str	r2, [r0, #48]	; 0x30
	return I2C_OK;
    2806:	2000      	movs	r0, #0
		break;
    2808:	4770      	bx	lr
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    280a:	6342      	str	r2, [r0, #52]	; 0x34
	return I2C_OK;
    280c:	2000      	movs	r0, #0
		break;
    280e:	4770      	bx	lr
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    2810:	6382      	str	r2, [r0, #56]	; 0x38
	return I2C_OK;
    2812:	2000      	movs	r0, #0
		break;
    2814:	4770      	bx	lr

00002816 <i2c_m_async_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    2816:	3028      	adds	r0, #40	; 0x28
    2818:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    281a:	2000      	movs	r0, #0
    281c:	4770      	bx	lr

0000281e <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    281e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    2820:	6943      	ldr	r3, [r0, #20]
    2822:	b103      	cbz	r3, 2826 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    2824:	4798      	blx	r3
    2826:	bd08      	pop	{r3, pc}

00002828 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2828:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    282a:	6983      	ldr	r3, [r0, #24]
    282c:	b103      	cbz	r3, 2830 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    282e:	4798      	blx	r3
    2830:	bd08      	pop	{r3, pc}
	...

00002834 <pwm_init>:
{
    2834:	b538      	push	{r3, r4, r5, lr}
    2836:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2838:	4604      	mov	r4, r0
    283a:	b180      	cbz	r0, 285e <pwm_init+0x2a>
    283c:	1c08      	adds	r0, r1, #0
    283e:	bf18      	it	ne
    2840:	2001      	movne	r0, #1
    2842:	2233      	movs	r2, #51	; 0x33
    2844:	4907      	ldr	r1, [pc, #28]	; (2864 <pwm_init+0x30>)
    2846:	4b08      	ldr	r3, [pc, #32]	; (2868 <pwm_init+0x34>)
    2848:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    284a:	4629      	mov	r1, r5
    284c:	4620      	mov	r0, r4
    284e:	4b07      	ldr	r3, [pc, #28]	; (286c <pwm_init+0x38>)
    2850:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2852:	4b07      	ldr	r3, [pc, #28]	; (2870 <pwm_init+0x3c>)
    2854:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2856:	4b07      	ldr	r3, [pc, #28]	; (2874 <pwm_init+0x40>)
    2858:	6063      	str	r3, [r4, #4]
}
    285a:	2000      	movs	r0, #0
    285c:	bd38      	pop	{r3, r4, r5, pc}
    285e:	2000      	movs	r0, #0
    2860:	e7ef      	b.n	2842 <pwm_init+0xe>
    2862:	bf00      	nop
    2864:	0000d7dc 	.word	0x0000d7dc
    2868:	00003565 	.word	0x00003565
    286c:	000050b1 	.word	0x000050b1
    2870:	0000281f 	.word	0x0000281f
    2874:	00002829 	.word	0x00002829

00002878 <pwm_enable>:
{
    2878:	b510      	push	{r4, lr}
	ASSERT(descr);
    287a:	4604      	mov	r4, r0
    287c:	224a      	movs	r2, #74	; 0x4a
    287e:	4909      	ldr	r1, [pc, #36]	; (28a4 <pwm_enable+0x2c>)
    2880:	3000      	adds	r0, #0
    2882:	bf18      	it	ne
    2884:	2001      	movne	r0, #1
    2886:	4b08      	ldr	r3, [pc, #32]	; (28a8 <pwm_enable+0x30>)
    2888:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    288a:	4620      	mov	r0, r4
    288c:	4b07      	ldr	r3, [pc, #28]	; (28ac <pwm_enable+0x34>)
    288e:	4798      	blx	r3
    2890:	b920      	cbnz	r0, 289c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    2892:	4620      	mov	r0, r4
    2894:	4b06      	ldr	r3, [pc, #24]	; (28b0 <pwm_enable+0x38>)
    2896:	4798      	blx	r3
	return ERR_NONE;
    2898:	2000      	movs	r0, #0
    289a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    289c:	f06f 0010 	mvn.w	r0, #16
}
    28a0:	bd10      	pop	{r4, pc}
    28a2:	bf00      	nop
    28a4:	0000d7dc 	.word	0x0000d7dc
    28a8:	00003565 	.word	0x00003565
    28ac:	000052b5 	.word	0x000052b5
    28b0:	00005231 	.word	0x00005231

000028b4 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    28b4:	b538      	push	{r3, r4, r5, lr}
    28b6:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    28b8:	4605      	mov	r5, r0
    28ba:	b158      	cbz	r0, 28d4 <qspi_sync_init+0x20>
    28bc:	1c08      	adds	r0, r1, #0
    28be:	bf18      	it	ne
    28c0:	2001      	movne	r0, #1
    28c2:	2231      	movs	r2, #49	; 0x31
    28c4:	4904      	ldr	r1, [pc, #16]	; (28d8 <qspi_sync_init+0x24>)
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <qspi_sync_init+0x28>)
    28c8:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    28ca:	4621      	mov	r1, r4
    28cc:	4628      	mov	r0, r5
    28ce:	4b04      	ldr	r3, [pc, #16]	; (28e0 <qspi_sync_init+0x2c>)
    28d0:	4798      	blx	r3
}
    28d2:	bd38      	pop	{r3, r4, r5, pc}
    28d4:	2000      	movs	r0, #0
    28d6:	e7f4      	b.n	28c2 <qspi_sync_init+0xe>
    28d8:	0000d7f4 	.word	0x0000d7f4
    28dc:	00003565 	.word	0x00003565
    28e0:	00003f75 	.word	0x00003f75

000028e4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    28e4:	b510      	push	{r4, lr}
	ASSERT(qspi);
    28e6:	4604      	mov	r4, r0
    28e8:	223f      	movs	r2, #63	; 0x3f
    28ea:	4905      	ldr	r1, [pc, #20]	; (2900 <qspi_sync_enable+0x1c>)
    28ec:	3000      	adds	r0, #0
    28ee:	bf18      	it	ne
    28f0:	2001      	movne	r0, #1
    28f2:	4b04      	ldr	r3, [pc, #16]	; (2904 <qspi_sync_enable+0x20>)
    28f4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    28f6:	4620      	mov	r0, r4
    28f8:	4b03      	ldr	r3, [pc, #12]	; (2908 <qspi_sync_enable+0x24>)
    28fa:	4798      	blx	r3
}
    28fc:	bd10      	pop	{r4, pc}
    28fe:	bf00      	nop
    2900:	0000d7f4 	.word	0x0000d7f4
    2904:	00003565 	.word	0x00003565
    2908:	00003fb1 	.word	0x00003fb1

0000290c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    290c:	b510      	push	{r4, lr}
	ASSERT(qspi);
    290e:	4604      	mov	r4, r0
    2910:	2246      	movs	r2, #70	; 0x46
    2912:	4905      	ldr	r1, [pc, #20]	; (2928 <qspi_sync_disable+0x1c>)
    2914:	3000      	adds	r0, #0
    2916:	bf18      	it	ne
    2918:	2001      	movne	r0, #1
    291a:	4b04      	ldr	r3, [pc, #16]	; (292c <qspi_sync_disable+0x20>)
    291c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    291e:	4620      	mov	r0, r4
    2920:	4b03      	ldr	r3, [pc, #12]	; (2930 <qspi_sync_disable+0x24>)
    2922:	4798      	blx	r3
}
    2924:	bd10      	pop	{r4, pc}
    2926:	bf00      	nop
    2928:	0000d7f4 	.word	0x0000d7f4
    292c:	00003565 	.word	0x00003565
    2930:	00003fbb 	.word	0x00003fbb

00002934 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2934:	b538      	push	{r3, r4, r5, lr}
    2936:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
    2938:	4605      	mov	r5, r0
    293a:	b158      	cbz	r0, 2954 <qspi_sync_serial_run_command+0x20>
    293c:	1c08      	adds	r0, r1, #0
    293e:	bf18      	it	ne
    2940:	2001      	movne	r0, #1
    2942:	224d      	movs	r2, #77	; 0x4d
    2944:	4904      	ldr	r1, [pc, #16]	; (2958 <qspi_sync_serial_run_command+0x24>)
    2946:	4b05      	ldr	r3, [pc, #20]	; (295c <qspi_sync_serial_run_command+0x28>)
    2948:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    294a:	4621      	mov	r1, r4
    294c:	4628      	mov	r0, r5
    294e:	4b04      	ldr	r3, [pc, #16]	; (2960 <qspi_sync_serial_run_command+0x2c>)
    2950:	4798      	blx	r3
}
    2952:	bd38      	pop	{r3, r4, r5, pc}
    2954:	2000      	movs	r0, #0
    2956:	e7f4      	b.n	2942 <qspi_sync_serial_run_command+0xe>
    2958:	0000d7f4 	.word	0x0000d7f4
    295c:	00003565 	.word	0x00003565
    2960:	00003fc5 	.word	0x00003fc5

00002964 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2966:	460f      	mov	r7, r1
    2968:	4616      	mov	r6, r2
	ASSERT(io);
    296a:	4604      	mov	r4, r0
    296c:	f240 1227 	movw	r2, #295	; 0x127
    2970:	4909      	ldr	r1, [pc, #36]	; (2998 <_spi_m_async_io_write+0x34>)
    2972:	3000      	adds	r0, #0
    2974:	bf18      	it	ne
    2976:	2001      	movne	r0, #1
    2978:	4b08      	ldr	r3, [pc, #32]	; (299c <_spi_m_async_io_write+0x38>)
    297a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    297c:	2500      	movs	r5, #0
    297e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    2980:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    2982:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    2984:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2986:	2310      	movs	r3, #16
    2988:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    298a:	2101      	movs	r1, #1
    298c:	f1a4 0020 	sub.w	r0, r4, #32
    2990:	4b03      	ldr	r3, [pc, #12]	; (29a0 <_spi_m_async_io_write+0x3c>)
    2992:	4798      	blx	r3

	return ERR_NONE;
}
    2994:	4628      	mov	r0, r5
    2996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2998:	0000d810 	.word	0x0000d810
    299c:	00003565 	.word	0x00003565
    29a0:	00004cc9 	.word	0x00004cc9

000029a4 <_spi_m_async_io_read>:
{
    29a4:	b570      	push	{r4, r5, r6, lr}
    29a6:	460d      	mov	r5, r1
    29a8:	4616      	mov	r6, r2
	ASSERT(io);
    29aa:	4604      	mov	r4, r0
    29ac:	f240 1205 	movw	r2, #261	; 0x105
    29b0:	490c      	ldr	r1, [pc, #48]	; (29e4 <_spi_m_async_io_read+0x40>)
    29b2:	3000      	adds	r0, #0
    29b4:	bf18      	it	ne
    29b6:	2001      	movne	r0, #1
    29b8:	4b0b      	ldr	r3, [pc, #44]	; (29e8 <_spi_m_async_io_read+0x44>)
    29ba:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    29bc:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    29be:	2500      	movs	r5, #0
    29c0:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    29c2:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    29c4:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    29c6:	2310      	movs	r3, #16
    29c8:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    29ca:	3c20      	subs	r4, #32
    29cc:	2101      	movs	r1, #1
    29ce:	4620      	mov	r0, r4
    29d0:	4b06      	ldr	r3, [pc, #24]	; (29ec <_spi_m_async_io_read+0x48>)
    29d2:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    29d4:	f240 11ff 	movw	r1, #511	; 0x1ff
    29d8:	4620      	mov	r0, r4
    29da:	4b05      	ldr	r3, [pc, #20]	; (29f0 <_spi_m_async_io_read+0x4c>)
    29dc:	4798      	blx	r3
}
    29de:	4628      	mov	r0, r5
    29e0:	bd70      	pop	{r4, r5, r6, pc}
    29e2:	bf00      	nop
    29e4:	0000d810 	.word	0x0000d810
    29e8:	00003565 	.word	0x00003565
    29ec:	00004cfd 	.word	0x00004cfd
    29f0:	00004d79 	.word	0x00004d79

000029f4 <_spi_dev_error>:
{
    29f4:	b570      	push	{r4, r5, r6, lr}
    29f6:	4604      	mov	r4, r0
    29f8:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    29fa:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    29fc:	2100      	movs	r1, #0
    29fe:	4b09      	ldr	r3, [pc, #36]	; (2a24 <_spi_dev_error+0x30>)
    2a00:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    2a02:	2100      	movs	r1, #0
    2a04:	4620      	mov	r0, r4
    2a06:	4b08      	ldr	r3, [pc, #32]	; (2a28 <_spi_dev_error+0x34>)
    2a08:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2a0a:	2100      	movs	r1, #0
    2a0c:	4620      	mov	r0, r4
    2a0e:	4b07      	ldr	r3, [pc, #28]	; (2a2c <_spi_dev_error+0x38>)
    2a10:	4798      	blx	r3
	spi->stat = 0;
    2a12:	2300      	movs	r3, #0
    2a14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    2a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2a1a:	b113      	cbz	r3, 2a22 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    2a1c:	4631      	mov	r1, r6
    2a1e:	4628      	mov	r0, r5
    2a20:	4798      	blx	r3
    2a22:	bd70      	pop	{r4, r5, r6, pc}
    2a24:	00004cc9 	.word	0x00004cc9
    2a28:	00004cfd 	.word	0x00004cfd
    2a2c:	00004d3d 	.word	0x00004d3d

00002a30 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    2a30:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2a32:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    2a34:	429a      	cmp	r2, r3
    2a36:	d200      	bcs.n	2a3a <_spi_dev_complete+0xa>
    2a38:	4770      	bx	lr
{
    2a3a:	b510      	push	{r4, lr}
    2a3c:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    2a3e:	2100      	movs	r1, #0
    2a40:	4b04      	ldr	r3, [pc, #16]	; (2a54 <_spi_dev_complete+0x24>)
    2a42:	4798      	blx	r3
		spi->stat = 0;
    2a44:	2300      	movs	r3, #0
    2a46:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    2a4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2a4c:	b10b      	cbz	r3, 2a52 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    2a4e:	1f20      	subs	r0, r4, #4
    2a50:	4798      	blx	r3
    2a52:	bd10      	pop	{r4, pc}
    2a54:	00004d3d 	.word	0x00004d3d

00002a58 <_spi_dev_tx>:
{
    2a58:	b510      	push	{r4, lr}
    2a5a:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    2a5c:	7903      	ldrb	r3, [r0, #4]
    2a5e:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    2a60:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2a62:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2a64:	f103 0101 	add.w	r1, r3, #1
    2a68:	6401      	str	r1, [r0, #64]	; 0x40
    2a6a:	bf94      	ite	ls
    2a6c:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    2a6e:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    2a72:	4b08      	ldr	r3, [pc, #32]	; (2a94 <_spi_dev_tx+0x3c>)
    2a74:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    2a76:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2a78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2a7a:	429a      	cmp	r2, r3
    2a7c:	d000      	beq.n	2a80 <_spi_dev_tx+0x28>
    2a7e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    2a80:	2100      	movs	r1, #0
    2a82:	4620      	mov	r0, r4
    2a84:	4b04      	ldr	r3, [pc, #16]	; (2a98 <_spi_dev_tx+0x40>)
    2a86:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    2a88:	2101      	movs	r1, #1
    2a8a:	4620      	mov	r0, r4
    2a8c:	4b03      	ldr	r3, [pc, #12]	; (2a9c <_spi_dev_tx+0x44>)
    2a8e:	4798      	blx	r3
}
    2a90:	e7f5      	b.n	2a7e <_spi_dev_tx+0x26>
    2a92:	bf00      	nop
    2a94:	00004d79 	.word	0x00004d79
    2a98:	00004cc9 	.word	0x00004cc9
    2a9c:	00004d3d 	.word	0x00004d3d

00002aa0 <_spi_dev_rx>:
{
    2aa0:	b570      	push	{r4, r5, r6, lr}
    2aa2:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    2aa4:	6b85      	ldr	r5, [r0, #56]	; 0x38
    2aa6:	b305      	cbz	r5, 2aea <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    2aa8:	7903      	ldrb	r3, [r0, #4]
    2aaa:	2b01      	cmp	r3, #1
    2aac:	d916      	bls.n	2adc <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    2aae:	6c06      	ldr	r6, [r0, #64]	; 0x40
    2ab0:	1c73      	adds	r3, r6, #1
    2ab2:	6403      	str	r3, [r0, #64]	; 0x40
    2ab4:	4b18      	ldr	r3, [pc, #96]	; (2b18 <_spi_dev_rx+0x78>)
    2ab6:	4798      	blx	r3
    2ab8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    2abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2abe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2ac0:	4293      	cmp	r3, r2
    2ac2:	d21d      	bcs.n	2b00 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    2ac4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2ac6:	b1b2      	cbz	r2, 2af6 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    2ac8:	7921      	ldrb	r1, [r4, #4]
    2aca:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    2acc:	bf94      	ite	ls
    2ace:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    2ad0:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    2ad4:	4620      	mov	r0, r4
    2ad6:	4b11      	ldr	r3, [pc, #68]	; (2b1c <_spi_dev_rx+0x7c>)
    2ad8:	4798      	blx	r3
    2ada:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    2adc:	6c06      	ldr	r6, [r0, #64]	; 0x40
    2ade:	1c73      	adds	r3, r6, #1
    2ae0:	6403      	str	r3, [r0, #64]	; 0x40
    2ae2:	4b0d      	ldr	r3, [pc, #52]	; (2b18 <_spi_dev_rx+0x78>)
    2ae4:	4798      	blx	r3
    2ae6:	55a8      	strb	r0, [r5, r6]
    2ae8:	e7e8      	b.n	2abc <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    2aea:	4b0b      	ldr	r3, [pc, #44]	; (2b18 <_spi_dev_rx+0x78>)
    2aec:	4798      	blx	r3
		spi->xfercnt++;
    2aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2af0:	3301      	adds	r3, #1
    2af2:	6423      	str	r3, [r4, #64]	; 0x40
    2af4:	e7e2      	b.n	2abc <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    2af6:	88e1      	ldrh	r1, [r4, #6]
    2af8:	4620      	mov	r0, r4
    2afa:	4b08      	ldr	r3, [pc, #32]	; (2b1c <_spi_dev_rx+0x7c>)
    2afc:	4798      	blx	r3
    2afe:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    2b00:	2100      	movs	r1, #0
    2b02:	4620      	mov	r0, r4
    2b04:	4b06      	ldr	r3, [pc, #24]	; (2b20 <_spi_dev_rx+0x80>)
    2b06:	4798      	blx	r3
		spi->stat = 0;
    2b08:	2300      	movs	r3, #0
    2b0a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    2b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2b10:	b10b      	cbz	r3, 2b16 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    2b12:	1f20      	subs	r0, r4, #4
    2b14:	4798      	blx	r3
    2b16:	bd70      	pop	{r4, r5, r6, pc}
    2b18:	00004da9 	.word	0x00004da9
    2b1c:	00004d79 	.word	0x00004d79
    2b20:	00004cfd 	.word	0x00004cfd

00002b24 <spi_m_async_init>:
{
    2b24:	b570      	push	{r4, r5, r6, lr}
    2b26:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    2b28:	4606      	mov	r6, r0
    2b2a:	b330      	cbz	r0, 2b7a <spi_m_async_init+0x56>
    2b2c:	1c08      	adds	r0, r1, #0
    2b2e:	bf18      	it	ne
    2b30:	2001      	movne	r0, #1
    2b32:	22a5      	movs	r2, #165	; 0xa5
    2b34:	4912      	ldr	r1, [pc, #72]	; (2b80 <spi_m_async_init+0x5c>)
    2b36:	4b13      	ldr	r3, [pc, #76]	; (2b84 <spi_m_async_init+0x60>)
    2b38:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2b3a:	4634      	mov	r4, r6
    2b3c:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    2b40:	4629      	mov	r1, r5
    2b42:	4620      	mov	r0, r4
    2b44:	4b10      	ldr	r3, [pc, #64]	; (2b88 <spi_m_async_init+0x64>)
    2b46:	4798      	blx	r3
	if (rc >= 0) {
    2b48:	2800      	cmp	r0, #0
    2b4a:	db15      	blt.n	2b78 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    2b4c:	4a0f      	ldr	r2, [pc, #60]	; (2b8c <spi_m_async_init+0x68>)
    2b4e:	2100      	movs	r1, #0
    2b50:	4620      	mov	r0, r4
    2b52:	4d0f      	ldr	r5, [pc, #60]	; (2b90 <spi_m_async_init+0x6c>)
    2b54:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    2b56:	4a0f      	ldr	r2, [pc, #60]	; (2b94 <spi_m_async_init+0x70>)
    2b58:	2101      	movs	r1, #1
    2b5a:	4620      	mov	r0, r4
    2b5c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    2b5e:	4a0e      	ldr	r2, [pc, #56]	; (2b98 <spi_m_async_init+0x74>)
    2b60:	2102      	movs	r1, #2
    2b62:	4620      	mov	r0, r4
    2b64:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2b66:	4a0d      	ldr	r2, [pc, #52]	; (2b9c <spi_m_async_init+0x78>)
    2b68:	2103      	movs	r1, #3
    2b6a:	4620      	mov	r0, r4
    2b6c:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    2b6e:	4b0c      	ldr	r3, [pc, #48]	; (2ba0 <spi_m_async_init+0x7c>)
    2b70:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <spi_m_async_init+0x80>)
    2b74:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    2b76:	2000      	movs	r0, #0
}
    2b78:	bd70      	pop	{r4, r5, r6, pc}
    2b7a:	2000      	movs	r0, #0
    2b7c:	e7d9      	b.n	2b32 <spi_m_async_init+0xe>
    2b7e:	bf00      	nop
    2b80:	0000d810 	.word	0x0000d810
    2b84:	00003565 	.word	0x00003565
    2b88:	00004b21 	.word	0x00004b21
    2b8c:	00002a59 	.word	0x00002a59
    2b90:	00004dd5 	.word	0x00004dd5
    2b94:	00002aa1 	.word	0x00002aa1
    2b98:	00002a31 	.word	0x00002a31
    2b9c:	000029f5 	.word	0x000029f5
    2ba0:	000029a5 	.word	0x000029a5
    2ba4:	00002965 	.word	0x00002965

00002ba8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2ba8:	b538      	push	{r3, r4, r5, lr}
    2baa:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    2bac:	4604      	mov	r4, r0
    2bae:	b1b8      	cbz	r0, 2be0 <spi_m_sync_init+0x38>
    2bb0:	1c08      	adds	r0, r1, #0
    2bb2:	bf18      	it	ne
    2bb4:	2001      	movne	r0, #1
    2bb6:	2240      	movs	r2, #64	; 0x40
    2bb8:	490a      	ldr	r1, [pc, #40]	; (2be4 <spi_m_sync_init+0x3c>)
    2bba:	4b0b      	ldr	r3, [pc, #44]	; (2be8 <spi_m_sync_init+0x40>)
    2bbc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2bbe:	4620      	mov	r0, r4
    2bc0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2bc4:	4629      	mov	r1, r5
    2bc6:	4b09      	ldr	r3, [pc, #36]	; (2bec <spi_m_sync_init+0x44>)
    2bc8:	4798      	blx	r3

	if (rc < 0) {
    2bca:	2800      	cmp	r0, #0
    2bcc:	db07      	blt.n	2bde <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2bd2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2bd4:	4b06      	ldr	r3, [pc, #24]	; (2bf0 <spi_m_sync_init+0x48>)
    2bd6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    2bd8:	4b06      	ldr	r3, [pc, #24]	; (2bf4 <spi_m_sync_init+0x4c>)
    2bda:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    2bdc:	2000      	movs	r0, #0
}
    2bde:	bd38      	pop	{r3, r4, r5, pc}
    2be0:	2000      	movs	r0, #0
    2be2:	e7e8      	b.n	2bb6 <spi_m_sync_init+0xe>
    2be4:	0000d830 	.word	0x0000d830
    2be8:	00003565 	.word	0x00003565
    2bec:	00004991 	.word	0x00004991
    2bf0:	00002cc5 	.word	0x00002cc5
    2bf4:	00002c89 	.word	0x00002c89

00002bf8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2bf8:	b510      	push	{r4, lr}
	ASSERT(spi);
    2bfa:	4604      	mov	r4, r0
    2bfc:	2257      	movs	r2, #87	; 0x57
    2bfe:	4905      	ldr	r1, [pc, #20]	; (2c14 <spi_m_sync_enable+0x1c>)
    2c00:	3000      	adds	r0, #0
    2c02:	bf18      	it	ne
    2c04:	2001      	movne	r0, #1
    2c06:	4b04      	ldr	r3, [pc, #16]	; (2c18 <spi_m_sync_enable+0x20>)
    2c08:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2c0a:	1d20      	adds	r0, r4, #4
    2c0c:	4b03      	ldr	r3, [pc, #12]	; (2c1c <spi_m_sync_enable+0x24>)
    2c0e:	4798      	blx	r3
    2c10:	bd10      	pop	{r4, pc}
    2c12:	bf00      	nop
    2c14:	0000d830 	.word	0x0000d830
    2c18:	00003565 	.word	0x00003565
    2c1c:	00004b89 	.word	0x00004b89

00002c20 <spi_m_sync_disable>:
}

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2c20:	b510      	push	{r4, lr}
	ASSERT(spi);
    2c22:	4604      	mov	r4, r0
    2c24:	225d      	movs	r2, #93	; 0x5d
    2c26:	4905      	ldr	r1, [pc, #20]	; (2c3c <spi_m_sync_disable+0x1c>)
    2c28:	3000      	adds	r0, #0
    2c2a:	bf18      	it	ne
    2c2c:	2001      	movne	r0, #1
    2c2e:	4b04      	ldr	r3, [pc, #16]	; (2c40 <spi_m_sync_disable+0x20>)
    2c30:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2c32:	1d20      	adds	r0, r4, #4
    2c34:	4b03      	ldr	r3, [pc, #12]	; (2c44 <spi_m_sync_disable+0x24>)
    2c36:	4798      	blx	r3
    2c38:	bd10      	pop	{r4, pc}
    2c3a:	bf00      	nop
    2c3c:	0000d830 	.word	0x0000d830
    2c40:	00003565 	.word	0x00003565
    2c44:	00004bb9 	.word	0x00004bb9

00002c48 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2c48:	b530      	push	{r4, r5, lr}
    2c4a:	b085      	sub	sp, #20
    2c4c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2c4e:	4605      	mov	r5, r0
    2c50:	b190      	cbz	r0, 2c78 <spi_m_sync_transfer+0x30>
    2c52:	1c08      	adds	r0, r1, #0
    2c54:	bf18      	it	ne
    2c56:	2001      	movne	r0, #1
    2c58:	22b3      	movs	r2, #179	; 0xb3
    2c5a:	4908      	ldr	r1, [pc, #32]	; (2c7c <spi_m_sync_transfer+0x34>)
    2c5c:	4b08      	ldr	r3, [pc, #32]	; (2c80 <spi_m_sync_transfer+0x38>)
    2c5e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2c60:	6823      	ldr	r3, [r4, #0]
    2c62:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    2c64:	6863      	ldr	r3, [r4, #4]
    2c66:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    2c68:	68a3      	ldr	r3, [r4, #8]
    2c6a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2c6c:	a901      	add	r1, sp, #4
    2c6e:	1d28      	adds	r0, r5, #4
    2c70:	4b04      	ldr	r3, [pc, #16]	; (2c84 <spi_m_sync_transfer+0x3c>)
    2c72:	4798      	blx	r3
}
    2c74:	b005      	add	sp, #20
    2c76:	bd30      	pop	{r4, r5, pc}
    2c78:	2000      	movs	r0, #0
    2c7a:	e7ed      	b.n	2c58 <spi_m_sync_transfer+0x10>
    2c7c:	0000d830 	.word	0x0000d830
    2c80:	00003565 	.word	0x00003565
    2c84:	00004be9 	.word	0x00004be9

00002c88 <_spi_m_sync_io_write>:
{
    2c88:	b570      	push	{r4, r5, r6, lr}
    2c8a:	b084      	sub	sp, #16
    2c8c:	460e      	mov	r6, r1
    2c8e:	4615      	mov	r5, r2
	ASSERT(io);
    2c90:	4604      	mov	r4, r0
    2c92:	22a3      	movs	r2, #163	; 0xa3
    2c94:	4908      	ldr	r1, [pc, #32]	; (2cb8 <_spi_m_sync_io_write+0x30>)
    2c96:	3000      	adds	r0, #0
    2c98:	bf18      	it	ne
    2c9a:	2001      	movne	r0, #1
    2c9c:	4b07      	ldr	r3, [pc, #28]	; (2cbc <_spi_m_sync_io_write+0x34>)
    2c9e:	4798      	blx	r3
	xfer.rxbuf = 0;
    2ca0:	2300      	movs	r3, #0
    2ca2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    2ca4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    2ca6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2ca8:	a901      	add	r1, sp, #4
    2caa:	f1a4 000c 	sub.w	r0, r4, #12
    2cae:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <_spi_m_sync_io_write+0x38>)
    2cb0:	4798      	blx	r3
}
    2cb2:	b004      	add	sp, #16
    2cb4:	bd70      	pop	{r4, r5, r6, pc}
    2cb6:	bf00      	nop
    2cb8:	0000d830 	.word	0x0000d830
    2cbc:	00003565 	.word	0x00003565
    2cc0:	00002c49 	.word	0x00002c49

00002cc4 <_spi_m_sync_io_read>:
{
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	b084      	sub	sp, #16
    2cc8:	460e      	mov	r6, r1
    2cca:	4615      	mov	r5, r2
	ASSERT(io);
    2ccc:	4604      	mov	r4, r0
    2cce:	2287      	movs	r2, #135	; 0x87
    2cd0:	4908      	ldr	r1, [pc, #32]	; (2cf4 <_spi_m_sync_io_read+0x30>)
    2cd2:	3000      	adds	r0, #0
    2cd4:	bf18      	it	ne
    2cd6:	2001      	movne	r0, #1
    2cd8:	4b07      	ldr	r3, [pc, #28]	; (2cf8 <_spi_m_sync_io_read+0x34>)
    2cda:	4798      	blx	r3
	xfer.rxbuf = buf;
    2cdc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    2cde:	2300      	movs	r3, #0
    2ce0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    2ce2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2ce4:	a901      	add	r1, sp, #4
    2ce6:	f1a4 000c 	sub.w	r0, r4, #12
    2cea:	4b04      	ldr	r3, [pc, #16]	; (2cfc <_spi_m_sync_io_read+0x38>)
    2cec:	4798      	blx	r3
}
    2cee:	b004      	add	sp, #16
    2cf0:	bd70      	pop	{r4, r5, r6, pc}
    2cf2:	bf00      	nop
    2cf4:	0000d830 	.word	0x0000d830
    2cf8:	00003565 	.word	0x00003565
    2cfc:	00002c49 	.word	0x00002c49

00002d00 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2d00:	b538      	push	{r3, r4, r5, lr}
    2d02:	460d      	mov	r5, r1
	ASSERT(spi && io);
    2d04:	4604      	mov	r4, r0
    2d06:	b150      	cbz	r0, 2d1e <spi_m_sync_get_io_descriptor+0x1e>
    2d08:	1c08      	adds	r0, r1, #0
    2d0a:	bf18      	it	ne
    2d0c:	2001      	movne	r0, #1
    2d0e:	22bd      	movs	r2, #189	; 0xbd
    2d10:	4904      	ldr	r1, [pc, #16]	; (2d24 <spi_m_sync_get_io_descriptor+0x24>)
    2d12:	4b05      	ldr	r3, [pc, #20]	; (2d28 <spi_m_sync_get_io_descriptor+0x28>)
    2d14:	4798      	blx	r3
	*io = &spi->io;
    2d16:	340c      	adds	r4, #12
    2d18:	602c      	str	r4, [r5, #0]
	return 0;
}
    2d1a:	2000      	movs	r0, #0
    2d1c:	bd38      	pop	{r3, r4, r5, pc}
    2d1e:	2000      	movs	r0, #0
    2d20:	e7f5      	b.n	2d0e <spi_m_sync_get_io_descriptor+0xe>
    2d22:	bf00      	nop
    2d24:	0000d830 	.word	0x0000d830
    2d28:	00003565 	.word	0x00003565

00002d2c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d2e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2d30:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2d32:	b12f      	cbz	r7, 2d40 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    2d34:	688d      	ldr	r5, [r1, #8]
    2d36:	463c      	mov	r4, r7
    2d38:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2d3a:	f1c2 0e01 	rsb	lr, r2, #1
    2d3e:	e00b      	b.n	2d58 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    2d40:	4b0e      	ldr	r3, [pc, #56]	; (2d7c <timer_add_timer_task+0x50>)
    2d42:	4798      	blx	r3
		return;
    2d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2d46:	4473      	add	r3, lr
    2d48:	68a0      	ldr	r0, [r4, #8]
    2d4a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    2d4c:	42ab      	cmp	r3, r5
    2d4e:	d20a      	bcs.n	2d66 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    2d50:	6823      	ldr	r3, [r4, #0]
    2d52:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2d54:	b153      	cbz	r3, 2d6c <timer_add_timer_task+0x40>
    2d56:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    2d58:	6863      	ldr	r3, [r4, #4]
    2d5a:	4293      	cmp	r3, r2
    2d5c:	d8f3      	bhi.n	2d46 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    2d5e:	68a0      	ldr	r0, [r4, #8]
    2d60:	4403      	add	r3, r0
    2d62:	1a9b      	subs	r3, r3, r2
    2d64:	e7f2      	b.n	2d4c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    2d66:	42a7      	cmp	r7, r4
    2d68:	d004      	beq.n	2d74 <timer_add_timer_task+0x48>
    2d6a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2d6c:	4620      	mov	r0, r4
    2d6e:	4b04      	ldr	r3, [pc, #16]	; (2d80 <timer_add_timer_task+0x54>)
    2d70:	4798      	blx	r3
    2d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2d74:	4660      	mov	r0, ip
    2d76:	4b01      	ldr	r3, [pc, #4]	; (2d7c <timer_add_timer_task+0x50>)
    2d78:	4798      	blx	r3
    2d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d7c:	0000358d 	.word	0x0000358d
    2d80:	000035b9 	.word	0x000035b9

00002d84 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    2d88:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    2d8a:	6907      	ldr	r7, [r0, #16]
    2d8c:	3701      	adds	r7, #1
    2d8e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2d90:	7e03      	ldrb	r3, [r0, #24]
    2d92:	f013 0f01 	tst.w	r3, #1
    2d96:	d113      	bne.n	2dc0 <timer_process_counted+0x3c>
    2d98:	7e03      	ldrb	r3, [r0, #24]
    2d9a:	f013 0f02 	tst.w	r3, #2
    2d9e:	d10f      	bne.n	2dc0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    2da0:	b354      	cbz	r4, 2df8 <timer_process_counted+0x74>
    2da2:	6863      	ldr	r3, [r4, #4]
    2da4:	1afb      	subs	r3, r7, r3
    2da6:	68a2      	ldr	r2, [r4, #8]
    2da8:	4293      	cmp	r3, r2
    2daa:	d307      	bcc.n	2dbc <timer_process_counted+0x38>
    2dac:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    2dae:	f100 0814 	add.w	r8, r0, #20
    2db2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2dfc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    2db6:	f8df a048 	ldr.w	sl, [pc, #72]	; 2e00 <timer_process_counted+0x7c>
    2dba:	e012      	b.n	2de2 <timer_process_counted+0x5e>
    2dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2dc0:	7e03      	ldrb	r3, [r0, #24]
    2dc2:	f043 0302 	orr.w	r3, r3, #2
    2dc6:	7603      	strb	r3, [r0, #24]
		return;
    2dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dcc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    2dce:	68e3      	ldr	r3, [r4, #12]
    2dd0:	4620      	mov	r0, r4
    2dd2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2dd4:	b185      	cbz	r5, 2df8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2dd6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    2dd8:	686b      	ldr	r3, [r5, #4]
    2dda:	1afb      	subs	r3, r7, r3
    2ddc:	68aa      	ldr	r2, [r5, #8]
    2dde:	4293      	cmp	r3, r2
    2de0:	d30a      	bcc.n	2df8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    2de2:	4640      	mov	r0, r8
    2de4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2de6:	7c23      	ldrb	r3, [r4, #16]
    2de8:	2b01      	cmp	r3, #1
    2dea:	d1ef      	bne.n	2dcc <timer_process_counted+0x48>
			tmp->time_label = time;
    2dec:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2dee:	463a      	mov	r2, r7
    2df0:	4621      	mov	r1, r4
    2df2:	4640      	mov	r0, r8
    2df4:	47d0      	blx	sl
    2df6:	e7e9      	b.n	2dcc <timer_process_counted+0x48>
    2df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dfc:	00003601 	.word	0x00003601
    2e00:	00002d2d 	.word	0x00002d2d

00002e04 <timer_init>:
{
    2e04:	b538      	push	{r3, r4, r5, lr}
    2e06:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2e08:	4604      	mov	r4, r0
    2e0a:	b178      	cbz	r0, 2e2c <timer_init+0x28>
    2e0c:	1c08      	adds	r0, r1, #0
    2e0e:	bf18      	it	ne
    2e10:	2001      	movne	r0, #1
    2e12:	223b      	movs	r2, #59	; 0x3b
    2e14:	4906      	ldr	r1, [pc, #24]	; (2e30 <timer_init+0x2c>)
    2e16:	4b07      	ldr	r3, [pc, #28]	; (2e34 <timer_init+0x30>)
    2e18:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2e1a:	4629      	mov	r1, r5
    2e1c:	4620      	mov	r0, r4
    2e1e:	4b06      	ldr	r3, [pc, #24]	; (2e38 <timer_init+0x34>)
    2e20:	4798      	blx	r3
	descr->time                           = 0;
    2e22:	2000      	movs	r0, #0
    2e24:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2e26:	4b05      	ldr	r3, [pc, #20]	; (2e3c <timer_init+0x38>)
    2e28:	6023      	str	r3, [r4, #0]
}
    2e2a:	bd38      	pop	{r3, r4, r5, pc}
    2e2c:	2000      	movs	r0, #0
    2e2e:	e7f0      	b.n	2e12 <timer_init+0xe>
    2e30:	0000d84c 	.word	0x0000d84c
    2e34:	00003565 	.word	0x00003565
    2e38:	00004ef5 	.word	0x00004ef5
    2e3c:	00002d85 	.word	0x00002d85

00002e40 <timer_start>:
{
    2e40:	b510      	push	{r4, lr}
	ASSERT(descr);
    2e42:	4604      	mov	r4, r0
    2e44:	2253      	movs	r2, #83	; 0x53
    2e46:	4909      	ldr	r1, [pc, #36]	; (2e6c <timer_start+0x2c>)
    2e48:	3000      	adds	r0, #0
    2e4a:	bf18      	it	ne
    2e4c:	2001      	movne	r0, #1
    2e4e:	4b08      	ldr	r3, [pc, #32]	; (2e70 <timer_start+0x30>)
    2e50:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2e52:	4620      	mov	r0, r4
    2e54:	4b07      	ldr	r3, [pc, #28]	; (2e74 <timer_start+0x34>)
    2e56:	4798      	blx	r3
    2e58:	b920      	cbnz	r0, 2e64 <timer_start+0x24>
	_timer_start(&descr->device);
    2e5a:	4620      	mov	r0, r4
    2e5c:	4b06      	ldr	r3, [pc, #24]	; (2e78 <timer_start+0x38>)
    2e5e:	4798      	blx	r3
	return ERR_NONE;
    2e60:	2000      	movs	r0, #0
    2e62:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2e64:	f06f 0010 	mvn.w	r0, #16
}
    2e68:	bd10      	pop	{r4, pc}
    2e6a:	bf00      	nop
    2e6c:	0000d84c 	.word	0x0000d84c
    2e70:	00003565 	.word	0x00003565
    2e74:	000052a3 	.word	0x000052a3
    2e78:	0000521d 	.word	0x0000521d

00002e7c <timer_stop>:
{
    2e7c:	b510      	push	{r4, lr}
	ASSERT(descr);
    2e7e:	4604      	mov	r4, r0
    2e80:	2261      	movs	r2, #97	; 0x61
    2e82:	4909      	ldr	r1, [pc, #36]	; (2ea8 <timer_stop+0x2c>)
    2e84:	3000      	adds	r0, #0
    2e86:	bf18      	it	ne
    2e88:	2001      	movne	r0, #1
    2e8a:	4b08      	ldr	r3, [pc, #32]	; (2eac <timer_stop+0x30>)
    2e8c:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2e8e:	4620      	mov	r0, r4
    2e90:	4b07      	ldr	r3, [pc, #28]	; (2eb0 <timer_stop+0x34>)
    2e92:	4798      	blx	r3
    2e94:	b120      	cbz	r0, 2ea0 <timer_stop+0x24>
	_timer_stop(&descr->device);
    2e96:	4620      	mov	r0, r4
    2e98:	4b06      	ldr	r3, [pc, #24]	; (2eb4 <timer_stop+0x38>)
    2e9a:	4798      	blx	r3
	return ERR_NONE;
    2e9c:	2000      	movs	r0, #0
    2e9e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2ea0:	f06f 0010 	mvn.w	r0, #16
}
    2ea4:	bd10      	pop	{r4, pc}
    2ea6:	bf00      	nop
    2ea8:	0000d84c 	.word	0x0000d84c
    2eac:	00003565 	.word	0x00003565
    2eb0:	000052a3 	.word	0x000052a3
    2eb4:	00005245 	.word	0x00005245

00002eb8 <timer_add_task>:
{
    2eb8:	b570      	push	{r4, r5, r6, lr}
    2eba:	b082      	sub	sp, #8
    2ebc:	460d      	mov	r5, r1
	ASSERT(descr && task);
    2ebe:	4604      	mov	r4, r0
    2ec0:	b318      	cbz	r0, 2f0a <timer_add_task+0x52>
    2ec2:	1c08      	adds	r0, r1, #0
    2ec4:	bf18      	it	ne
    2ec6:	2001      	movne	r0, #1
    2ec8:	227a      	movs	r2, #122	; 0x7a
    2eca:	491e      	ldr	r1, [pc, #120]	; (2f44 <timer_add_task+0x8c>)
    2ecc:	4b1e      	ldr	r3, [pc, #120]	; (2f48 <timer_add_task+0x90>)
    2ece:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2ed0:	7e23      	ldrb	r3, [r4, #24]
    2ed2:	f043 0301 	orr.w	r3, r3, #1
    2ed6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    2ed8:	f104 0614 	add.w	r6, r4, #20
    2edc:	4629      	mov	r1, r5
    2ede:	4630      	mov	r0, r6
    2ee0:	4b1a      	ldr	r3, [pc, #104]	; (2f4c <timer_add_task+0x94>)
    2ee2:	4798      	blx	r3
    2ee4:	b998      	cbnz	r0, 2f0e <timer_add_task+0x56>
	task->time_label = descr->time;
    2ee6:	6923      	ldr	r3, [r4, #16]
    2ee8:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2eea:	6922      	ldr	r2, [r4, #16]
    2eec:	4629      	mov	r1, r5
    2eee:	4630      	mov	r0, r6
    2ef0:	4b17      	ldr	r3, [pc, #92]	; (2f50 <timer_add_task+0x98>)
    2ef2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ef4:	7e23      	ldrb	r3, [r4, #24]
    2ef6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2efa:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2efc:	7e23      	ldrb	r3, [r4, #24]
    2efe:	f013 0f02 	tst.w	r3, #2
    2f02:	d110      	bne.n	2f26 <timer_add_task+0x6e>
	return ERR_NONE;
    2f04:	2000      	movs	r0, #0
}
    2f06:	b002      	add	sp, #8
    2f08:	bd70      	pop	{r4, r5, r6, pc}
    2f0a:	2000      	movs	r0, #0
    2f0c:	e7dc      	b.n	2ec8 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2f0e:	7e23      	ldrb	r3, [r4, #24]
    2f10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2f14:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2f16:	227f      	movs	r2, #127	; 0x7f
    2f18:	490a      	ldr	r1, [pc, #40]	; (2f44 <timer_add_task+0x8c>)
    2f1a:	2000      	movs	r0, #0
    2f1c:	4b0a      	ldr	r3, [pc, #40]	; (2f48 <timer_add_task+0x90>)
    2f1e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2f20:	f06f 0011 	mvn.w	r0, #17
    2f24:	e7ef      	b.n	2f06 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    2f26:	a801      	add	r0, sp, #4
    2f28:	4b0a      	ldr	r3, [pc, #40]	; (2f54 <timer_add_task+0x9c>)
    2f2a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f2c:	7e23      	ldrb	r3, [r4, #24]
    2f2e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2f32:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2f34:	4620      	mov	r0, r4
    2f36:	4b08      	ldr	r3, [pc, #32]	; (2f58 <timer_add_task+0xa0>)
    2f38:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2f3a:	a801      	add	r0, sp, #4
    2f3c:	4b07      	ldr	r3, [pc, #28]	; (2f5c <timer_add_task+0xa4>)
    2f3e:	4798      	blx	r3
	return ERR_NONE;
    2f40:	2000      	movs	r0, #0
    2f42:	e7e0      	b.n	2f06 <timer_add_task+0x4e>
    2f44:	0000d84c 	.word	0x0000d84c
    2f48:	00003565 	.word	0x00003565
    2f4c:	0000356b 	.word	0x0000356b
    2f50:	00002d2d 	.word	0x00002d2d
    2f54:	00006875 	.word	0x00006875
    2f58:	000052d1 	.word	0x000052d1
    2f5c:	00006883 	.word	0x00006883

00002f60 <timer_get_clock_cycles_in_tick>:
{
    2f60:	b538      	push	{r3, r4, r5, lr}
    2f62:	460c      	mov	r4, r1
	ASSERT(descr && cycles);
    2f64:	4605      	mov	r5, r0
    2f66:	b160      	cbz	r0, 2f82 <timer_get_clock_cycles_in_tick+0x22>
    2f68:	1c08      	adds	r0, r1, #0
    2f6a:	bf18      	it	ne
    2f6c:	2001      	movne	r0, #1
    2f6e:	22af      	movs	r2, #175	; 0xaf
    2f70:	4905      	ldr	r1, [pc, #20]	; (2f88 <timer_get_clock_cycles_in_tick+0x28>)
    2f72:	4b06      	ldr	r3, [pc, #24]	; (2f8c <timer_get_clock_cycles_in_tick+0x2c>)
    2f74:	4798      	blx	r3
	*cycles = _timer_get_period(&descr->device);
    2f76:	4628      	mov	r0, r5
    2f78:	4b05      	ldr	r3, [pc, #20]	; (2f90 <timer_get_clock_cycles_in_tick+0x30>)
    2f7a:	4798      	blx	r3
    2f7c:	6020      	str	r0, [r4, #0]
}
    2f7e:	2000      	movs	r0, #0
    2f80:	bd38      	pop	{r3, r4, r5, pc}
    2f82:	2000      	movs	r0, #0
    2f84:	e7f3      	b.n	2f6e <timer_get_clock_cycles_in_tick+0xe>
    2f86:	bf00      	nop
    2f88:	0000d84c 	.word	0x0000d84c
    2f8c:	00003565 	.word	0x00003565
    2f90:	00005259 	.word	0x00005259

00002f94 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2f94:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <_usb_d_find_ep+0x40>)
    2f96:	7859      	ldrb	r1, [r3, #1]
    2f98:	4288      	cmp	r0, r1
    2f9a:	d018      	beq.n	2fce <_usb_d_find_ep+0x3a>
{
    2f9c:	b430      	push	{r4, r5}
    2f9e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2fa0:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2fa2:	f000 050f 	and.w	r5, r0, #15
    2fa6:	e007      	b.n	2fb8 <_usb_d_find_ep+0x24>
    2fa8:	3301      	adds	r3, #1
    2faa:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fac:	2b04      	cmp	r3, #4
    2fae:	d009      	beq.n	2fc4 <_usb_d_find_ep+0x30>
    2fb0:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2fb2:	7851      	ldrb	r1, [r2, #1]
    2fb4:	4281      	cmp	r1, r0
    2fb6:	d007      	beq.n	2fc8 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2fb8:	7814      	ldrb	r4, [r2, #0]
    2fba:	2c00      	cmp	r4, #0
    2fbc:	d1f4      	bne.n	2fa8 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2fbe:	428d      	cmp	r5, r1
    2fc0:	d1f2      	bne.n	2fa8 <_usb_d_find_ep+0x14>
    2fc2:	e001      	b.n	2fc8 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    2fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
    2fc8:	4618      	mov	r0, r3
    2fca:	bc30      	pop	{r4, r5}
    2fcc:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fce:	2300      	movs	r3, #0
}
    2fd0:	4618      	mov	r0, r3
    2fd2:	4770      	bx	lr
    2fd4:	20001ba4 	.word	0x20001ba4

00002fd8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2fd8:	2000      	movs	r0, #0
    2fda:	4770      	bx	lr

00002fdc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2fdc:	b538      	push	{r3, r4, r5, lr}
    2fde:	4604      	mov	r4, r0
    2fe0:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fe2:	4b09      	ldr	r3, [pc, #36]	; (3008 <usb_d_cb_trans_more+0x2c>)
    2fe4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2fe6:	4b09      	ldr	r3, [pc, #36]	; (300c <usb_d_cb_trans_more+0x30>)
    2fe8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    2fec:	789b      	ldrb	r3, [r3, #2]
    2fee:	2b03      	cmp	r3, #3
    2ff0:	d001      	beq.n	2ff6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    2ff2:	2000      	movs	r0, #0
}
    2ff4:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    2ff6:	4b05      	ldr	r3, [pc, #20]	; (300c <usb_d_cb_trans_more+0x30>)
    2ff8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2ffc:	6983      	ldr	r3, [r0, #24]
    2ffe:	4629      	mov	r1, r5
    3000:	4620      	mov	r0, r4
    3002:	4798      	blx	r3
    3004:	bd38      	pop	{r3, r4, r5, pc}
    3006:	bf00      	nop
    3008:	00002f95 	.word	0x00002f95
    300c:	20001ba4 	.word	0x20001ba4

00003010 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3010:	b5f0      	push	{r4, r5, r6, r7, lr}
    3012:	b085      	sub	sp, #20
    3014:	4606      	mov	r6, r0
    3016:	460d      	mov	r5, r1
    3018:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    301a:	4b4d      	ldr	r3, [pc, #308]	; (3150 <_usb_d_cb_trans_done+0x140>)
    301c:	4798      	blx	r3
    301e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    3020:	2d00      	cmp	r5, #0
    3022:	d15b      	bne.n	30dc <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3024:	4a4b      	ldr	r2, [pc, #300]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3026:	0143      	lsls	r3, r0, #5
    3028:	18d1      	adds	r1, r2, r3
    302a:	2000      	movs	r0, #0
    302c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    302e:	5cd3      	ldrb	r3, [r2, r3]
    3030:	b173      	cbz	r3, 3050 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3032:	4b48      	ldr	r3, [pc, #288]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3034:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3038:	2201      	movs	r2, #1
    303a:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    303c:	4845      	ldr	r0, [pc, #276]	; (3154 <_usb_d_cb_trans_done+0x144>)
    303e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    3042:	69c3      	ldr	r3, [r0, #28]
    3044:	463a      	mov	r2, r7
    3046:	78c1      	ldrb	r1, [r0, #3]
    3048:	4630      	mov	r0, r6
    304a:	4798      	blx	r3
}
    304c:	b005      	add	sp, #20
    304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    3050:	788b      	ldrb	r3, [r1, #2]
    3052:	2b03      	cmp	r3, #3
    3054:	d00b      	beq.n	306e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3056:	483f      	ldr	r0, [pc, #252]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3058:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    305c:	4614      	mov	r4, r2
    305e:	69d3      	ldr	r3, [r2, #28]
    3060:	320c      	adds	r2, #12
    3062:	2100      	movs	r1, #0
    3064:	7860      	ldrb	r0, [r4, #1]
    3066:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3068:	2302      	movs	r3, #2
    306a:	70a3      	strb	r3, [r4, #2]
    306c:	e7ee      	b.n	304c <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    306e:	460b      	mov	r3, r1
    3070:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3074:	460a      	mov	r2, r1
    3076:	69ce      	ldr	r6, [r1, #28]
    3078:	320c      	adds	r2, #12
    307a:	2101      	movs	r1, #1
    307c:	7858      	ldrb	r0, [r3, #1]
    307e:	47b0      	blx	r6
		if (err) {
    3080:	b1a0      	cbz	r0, 30ac <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3082:	4b34      	ldr	r3, [pc, #208]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3084:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3088:	2205      	movs	r2, #5
    308a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    308c:	2202      	movs	r2, #2
    308e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3090:	2d00      	cmp	r5, #0
    3092:	db09      	blt.n	30a8 <_usb_d_cb_trans_done+0x98>
    3094:	482f      	ldr	r0, [pc, #188]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3096:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    309a:	7840      	ldrb	r0, [r0, #1]
    309c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    30a0:	2101      	movs	r1, #1
    30a2:	4b2d      	ldr	r3, [pc, #180]	; (3158 <_usb_d_cb_trans_done+0x148>)
    30a4:	4798      	blx	r3
    30a6:	e7d1      	b.n	304c <_usb_d_cb_trans_done+0x3c>
    30a8:	7858      	ldrb	r0, [r3, #1]
    30aa:	e7f9      	b.n	30a0 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    30ac:	4829      	ldr	r0, [pc, #164]	; (3154 <_usb_d_cb_trans_done+0x144>)
    30ae:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    30b2:	2304      	movs	r3, #4
    30b4:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    30b6:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    30b8:	2200      	movs	r2, #0
    30ba:	9201      	str	r2, [sp, #4]
    30bc:	9202      	str	r2, [sp, #8]
    30be:	4295      	cmp	r5, r2
    30c0:	bfac      	ite	ge
    30c2:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    30c6:	f003 030f 	andlt.w	r3, r3, #15
    30ca:	f88d 300c 	strb.w	r3, [sp, #12]
    30ce:	2301      	movs	r3, #1
    30d0:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    30d4:	a801      	add	r0, sp, #4
    30d6:	4b21      	ldr	r3, [pc, #132]	; (315c <_usb_d_cb_trans_done+0x14c>)
    30d8:	4798      	blx	r3
    30da:	e7b7      	b.n	304c <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    30dc:	2d01      	cmp	r5, #1
    30de:	d00a      	beq.n	30f6 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    30e0:	2d02      	cmp	r5, #2
    30e2:	d01c      	beq.n	311e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    30e4:	2d03      	cmp	r5, #3
    30e6:	d02a      	beq.n	313e <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    30e8:	4b1a      	ldr	r3, [pc, #104]	; (3154 <_usb_d_cb_trans_done+0x144>)
    30ea:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    30ee:	2206      	movs	r2, #6
    30f0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    30f2:	70da      	strb	r2, [r3, #3]
    30f4:	e7a2      	b.n	303c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    30f6:	4a17      	ldr	r2, [pc, #92]	; (3154 <_usb_d_cb_trans_done+0x144>)
    30f8:	0143      	lsls	r3, r0, #5
    30fa:	18d1      	adds	r1, r2, r3
    30fc:	2002      	movs	r0, #2
    30fe:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3100:	5cd3      	ldrb	r3, [r2, r3]
    3102:	b12b      	cbz	r3, 3110 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3104:	4b13      	ldr	r3, [pc, #76]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3106:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    310a:	2205      	movs	r2, #5
    310c:	709a      	strb	r2, [r3, #2]
    310e:	e795      	b.n	303c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3110:	460b      	mov	r3, r1
    3112:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3114:	2100      	movs	r1, #0
    3116:	4630      	mov	r0, r6
    3118:	4b0f      	ldr	r3, [pc, #60]	; (3158 <_usb_d_cb_trans_done+0x148>)
    311a:	4798      	blx	r3
    311c:	e78e      	b.n	303c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    311e:	4a0d      	ldr	r2, [pc, #52]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3120:	0143      	lsls	r3, r0, #5
    3122:	18d1      	adds	r1, r2, r3
    3124:	2004      	movs	r0, #4
    3126:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3128:	5cd3      	ldrb	r3, [r2, r3]
    312a:	b12b      	cbz	r3, 3138 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    312c:	4b09      	ldr	r3, [pc, #36]	; (3154 <_usb_d_cb_trans_done+0x144>)
    312e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3132:	2201      	movs	r2, #1
    3134:	709a      	strb	r2, [r3, #2]
    3136:	e781      	b.n	303c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3138:	2302      	movs	r3, #2
    313a:	708b      	strb	r3, [r1, #2]
			return;
    313c:	e786      	b.n	304c <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    313e:	4b05      	ldr	r3, [pc, #20]	; (3154 <_usb_d_cb_trans_done+0x144>)
    3140:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    3144:	2200      	movs	r2, #0
    3146:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3148:	2205      	movs	r2, #5
    314a:	70da      	strb	r2, [r3, #3]
    314c:	e776      	b.n	303c <_usb_d_cb_trans_done+0x2c>
    314e:	bf00      	nop
    3150:	00002f95 	.word	0x00002f95
    3154:	20001ba4 	.word	0x20001ba4
    3158:	00006259 	.word	0x00006259
    315c:	00006401 	.word	0x00006401

00003160 <usb_d_cb_trans_setup>:
{
    3160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3164:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    3166:	4b1c      	ldr	r3, [pc, #112]	; (31d8 <usb_d_cb_trans_setup+0x78>)
    3168:	4798      	blx	r3
    316a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    316c:	4c1b      	ldr	r4, [pc, #108]	; (31dc <usb_d_cb_trans_setup+0x7c>)
    316e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    3172:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3174:	4621      	mov	r1, r4
    3176:	4628      	mov	r0, r5
    3178:	4b19      	ldr	r3, [pc, #100]	; (31e0 <usb_d_cb_trans_setup+0x80>)
    317a:	4798      	blx	r3
	if (n != 8) {
    317c:	b2c0      	uxtb	r0, r0
    317e:	2808      	cmp	r0, #8
    3180:	d009      	beq.n	3196 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3182:	2101      	movs	r1, #1
    3184:	4628      	mov	r0, r5
    3186:	4c17      	ldr	r4, [pc, #92]	; (31e4 <usb_d_cb_trans_setup+0x84>)
    3188:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    318a:	2101      	movs	r1, #1
    318c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    3190:	47a0      	blx	r4
		return;
    3192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3196:	2100      	movs	r1, #0
    3198:	4628      	mov	r0, r5
    319a:	4f12      	ldr	r7, [pc, #72]	; (31e4 <usb_d_cb_trans_setup+0x84>)
    319c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    319e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    31a2:	2100      	movs	r1, #0
    31a4:	4640      	mov	r0, r8
    31a6:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    31a8:	4b0c      	ldr	r3, [pc, #48]	; (31dc <usb_d_cb_trans_setup+0x7c>)
    31aa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    31ae:	2201      	movs	r2, #1
    31b0:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    31b2:	695b      	ldr	r3, [r3, #20]
    31b4:	4621      	mov	r1, r4
    31b6:	4628      	mov	r0, r5
    31b8:	4798      	blx	r3
    31ba:	b108      	cbz	r0, 31c0 <usb_d_cb_trans_setup+0x60>
    31bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    31c0:	4b06      	ldr	r3, [pc, #24]	; (31dc <usb_d_cb_trans_setup+0x7c>)
    31c2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    31c6:	2305      	movs	r3, #5
    31c8:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    31ca:	2101      	movs	r1, #1
    31cc:	4628      	mov	r0, r5
    31ce:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    31d0:	2101      	movs	r1, #1
    31d2:	4640      	mov	r0, r8
    31d4:	47b8      	blx	r7
    31d6:	e7f1      	b.n	31bc <usb_d_cb_trans_setup+0x5c>
    31d8:	00002f95 	.word	0x00002f95
    31dc:	20001ba4 	.word	0x20001ba4
    31e0:	000063a1 	.word	0x000063a1
    31e4:	00006259 	.word	0x00006259

000031e8 <usb_d_init>:

int32_t usb_d_init(void)
{
    31e8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    31ea:	4b11      	ldr	r3, [pc, #68]	; (3230 <usb_d_init+0x48>)
    31ec:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    31ee:	2800      	cmp	r0, #0
    31f0:	db1c      	blt.n	322c <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    31f2:	4c10      	ldr	r4, [pc, #64]	; (3234 <usb_d_init+0x4c>)
    31f4:	2280      	movs	r2, #128	; 0x80
    31f6:	2100      	movs	r1, #0
    31f8:	4620      	mov	r0, r4
    31fa:	4b0f      	ldr	r3, [pc, #60]	; (3238 <usb_d_init+0x50>)
    31fc:	4798      	blx	r3
    31fe:	4623      	mov	r3, r4
    3200:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3204:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3206:	4a0d      	ldr	r2, [pc, #52]	; (323c <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3208:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    320a:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    320c:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    320e:	61da      	str	r2, [r3, #28]
    3210:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3212:	4283      	cmp	r3, r0
    3214:	d1f8      	bne.n	3208 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3216:	490a      	ldr	r1, [pc, #40]	; (3240 <usb_d_init+0x58>)
    3218:	2000      	movs	r0, #0
    321a:	4c0a      	ldr	r4, [pc, #40]	; (3244 <usb_d_init+0x5c>)
    321c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    321e:	490a      	ldr	r1, [pc, #40]	; (3248 <usb_d_init+0x60>)
    3220:	2001      	movs	r0, #1
    3222:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3224:	4909      	ldr	r1, [pc, #36]	; (324c <usb_d_init+0x64>)
    3226:	2002      	movs	r0, #2
    3228:	47a0      	blx	r4
	return ERR_NONE;
    322a:	2000      	movs	r0, #0
}
    322c:	bd10      	pop	{r4, pc}
    322e:	bf00      	nop
    3230:	00005c41 	.word	0x00005c41
    3234:	20001ba4 	.word	0x20001ba4
    3238:	0000ceed 	.word	0x0000ceed
    323c:	00002fd9 	.word	0x00002fd9
    3240:	00003161 	.word	0x00003161
    3244:	00006645 	.word	0x00006645
    3248:	00002fdd 	.word	0x00002fdd
    324c:	00003011 	.word	0x00003011

00003250 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3250:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3252:	4b01      	ldr	r3, [pc, #4]	; (3258 <usb_d_register_callback+0x8>)
    3254:	4798      	blx	r3
    3256:	bd08      	pop	{r3, pc}
    3258:	0000661d 	.word	0x0000661d

0000325c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    325c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    325e:	4b01      	ldr	r3, [pc, #4]	; (3264 <usb_d_enable+0x8>)
    3260:	4798      	blx	r3
}
    3262:	bd08      	pop	{r3, pc}
    3264:	00005d49 	.word	0x00005d49

00003268 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3268:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    326a:	4b01      	ldr	r3, [pc, #4]	; (3270 <usb_d_attach+0x8>)
    326c:	4798      	blx	r3
    326e:	bd08      	pop	{r3, pc}
    3270:	00005db5 	.word	0x00005db5

00003274 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3274:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    3276:	4b01      	ldr	r3, [pc, #4]	; (327c <usb_d_set_address+0x8>)
    3278:	4798      	blx	r3
    327a:	bd08      	pop	{r3, pc}
    327c:	00005dc7 	.word	0x00005dc7

00003280 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3282:	4606      	mov	r6, r0
    3284:	460c      	mov	r4, r1
    3286:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3288:	4b0f      	ldr	r3, [pc, #60]	; (32c8 <usb_d_ep_init+0x48>)
    328a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    328c:	2800      	cmp	r0, #0
    328e:	da14      	bge.n	32ba <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3290:	20ff      	movs	r0, #255	; 0xff
    3292:	4b0d      	ldr	r3, [pc, #52]	; (32c8 <usb_d_ep_init+0x48>)
    3294:	4798      	blx	r3
		if (ep_index < 0) {
    3296:	1e05      	subs	r5, r0, #0
    3298:	db12      	blt.n	32c0 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    329a:	463a      	mov	r2, r7
    329c:	4621      	mov	r1, r4
    329e:	4630      	mov	r0, r6
    32a0:	4b0a      	ldr	r3, [pc, #40]	; (32cc <usb_d_ep_init+0x4c>)
    32a2:	4798      	blx	r3
	if (rc < 0) {
    32a4:	2800      	cmp	r0, #0
    32a6:	db0d      	blt.n	32c4 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    32a8:	4b09      	ldr	r3, [pc, #36]	; (32d0 <usb_d_ep_init+0x50>)
    32aa:	0168      	lsls	r0, r5, #5
    32ac:	181a      	adds	r2, r3, r0
    32ae:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    32b0:	f004 0403 	and.w	r4, r4, #3
    32b4:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    32b6:	2000      	movs	r0, #0
    32b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    32ba:	f06f 0013 	mvn.w	r0, #19
    32be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    32c0:	f06f 0014 	mvn.w	r0, #20
}
    32c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32c6:	bf00      	nop
    32c8:	00002f95 	.word	0x00002f95
    32cc:	00005dd5 	.word	0x00005dd5
    32d0:	20001ba4 	.word	0x20001ba4

000032d4 <usb_d_ep0_init>:
{
    32d4:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    32d6:	4602      	mov	r2, r0
    32d8:	2100      	movs	r1, #0
    32da:	4608      	mov	r0, r1
    32dc:	4b01      	ldr	r3, [pc, #4]	; (32e4 <usb_d_ep0_init+0x10>)
    32de:	4798      	blx	r3
}
    32e0:	bd08      	pop	{r3, pc}
    32e2:	bf00      	nop
    32e4:	00003281 	.word	0x00003281

000032e8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    32e8:	b538      	push	{r3, r4, r5, lr}
    32ea:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    32ec:	4b06      	ldr	r3, [pc, #24]	; (3308 <usb_d_ep_deinit+0x20>)
    32ee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    32f0:	1e04      	subs	r4, r0, #0
    32f2:	db07      	blt.n	3304 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    32f4:	4628      	mov	r0, r5
    32f6:	4b05      	ldr	r3, [pc, #20]	; (330c <usb_d_ep_deinit+0x24>)
    32f8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    32fa:	4805      	ldr	r0, [pc, #20]	; (3310 <usb_d_ep_deinit+0x28>)
    32fc:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    3300:	23ff      	movs	r3, #255	; 0xff
    3302:	7043      	strb	r3, [r0, #1]
    3304:	bd38      	pop	{r3, r4, r5, pc}
    3306:	bf00      	nop
    3308:	00002f95 	.word	0x00002f95
    330c:	00005eed 	.word	0x00005eed
    3310:	20001ba4 	.word	0x20001ba4

00003314 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3314:	b538      	push	{r3, r4, r5, lr}
    3316:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    3318:	4b0e      	ldr	r3, [pc, #56]	; (3354 <usb_d_ep_enable+0x40>)
    331a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    331c:	1e04      	subs	r4, r0, #0
    331e:	db16      	blt.n	334e <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3320:	0163      	lsls	r3, r4, #5
    3322:	4a0d      	ldr	r2, [pc, #52]	; (3358 <usb_d_ep_enable+0x44>)
    3324:	5cd3      	ldrb	r3, [r2, r3]
    3326:	2b00      	cmp	r3, #0
    3328:	bf0c      	ite	eq
    332a:	2202      	moveq	r2, #2
    332c:	2201      	movne	r2, #1
    332e:	4b0a      	ldr	r3, [pc, #40]	; (3358 <usb_d_ep_enable+0x44>)
    3330:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3334:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3336:	4628      	mov	r0, r5
    3338:	4b08      	ldr	r3, [pc, #32]	; (335c <usb_d_ep_enable+0x48>)
    333a:	4798      	blx	r3
	if (rc < 0) {
    333c:	2800      	cmp	r0, #0
    333e:	db00      	blt.n	3342 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    3340:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3342:	4b05      	ldr	r3, [pc, #20]	; (3358 <usb_d_ep_enable+0x44>)
    3344:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3348:	2300      	movs	r3, #0
    334a:	70a3      	strb	r3, [r4, #2]
    334c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    334e:	f06f 0011 	mvn.w	r0, #17
    3352:	e7f5      	b.n	3340 <usb_d_ep_enable+0x2c>
    3354:	00002f95 	.word	0x00002f95
    3358:	20001ba4 	.word	0x20001ba4
    335c:	00005fb1 	.word	0x00005fb1

00003360 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3364:	b086      	sub	sp, #24
    3366:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3368:	7a07      	ldrb	r7, [r0, #8]
    336a:	4638      	mov	r0, r7
    336c:	4b3f      	ldr	r3, [pc, #252]	; (346c <usb_d_ep_transfer+0x10c>)
    336e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3370:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    3372:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3376:	1e06      	subs	r6, r0, #0
    3378:	db72      	blt.n	3460 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    337a:	a804      	add	r0, sp, #16
    337c:	4b3c      	ldr	r3, [pc, #240]	; (3470 <usb_d_ep_transfer+0x110>)
    337e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3380:	4b3c      	ldr	r3, [pc, #240]	; (3474 <usb_d_ep_transfer+0x114>)
    3382:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    3386:	789b      	ldrb	r3, [r3, #2]
    3388:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    338c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3390:	b2db      	uxtb	r3, r3
    3392:	2b01      	cmp	r3, #1
    3394:	d011      	beq.n	33ba <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    3396:	a804      	add	r0, sp, #16
    3398:	4b37      	ldr	r3, [pc, #220]	; (3478 <usb_d_ep_transfer+0x118>)
    339a:	4798      	blx	r3
		switch (state) {
    339c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    33a0:	b2db      	uxtb	r3, r3
    33a2:	2b05      	cmp	r3, #5
    33a4:	d05f      	beq.n	3466 <usb_d_ep_transfer+0x106>
    33a6:	2b06      	cmp	r3, #6
    33a8:	d023      	beq.n	33f2 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    33aa:	2b00      	cmp	r3, #0
    33ac:	bf0c      	ite	eq
    33ae:	f06f 0012 	mvneq.w	r0, #18
    33b2:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    33b4:	b006      	add	sp, #24
    33b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    33ba:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 3474 <usb_d_ep_transfer+0x114>
    33be:	ea4f 1946 	mov.w	r9, r6, lsl #5
    33c2:	eb0a 0309 	add.w	r3, sl, r9
    33c6:	2203      	movs	r2, #3
    33c8:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    33ca:	a804      	add	r0, sp, #16
    33cc:	4b2a      	ldr	r3, [pc, #168]	; (3478 <usb_d_ep_transfer+0x118>)
    33ce:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    33d0:	f81a 3009 	ldrb.w	r3, [sl, r9]
    33d4:	b183      	cbz	r3, 33f8 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    33d6:	7a22      	ldrb	r2, [r4, #8]
    33d8:	3500      	adds	r5, #0
    33da:	bf18      	it	ne
    33dc:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    33de:	6823      	ldr	r3, [r4, #0]
    33e0:	9301      	str	r3, [sp, #4]
    33e2:	f8cd 8008 	str.w	r8, [sp, #8]
    33e6:	f017 0f80 	tst.w	r7, #128	; 0x80
    33ea:	d119      	bne.n	3420 <usb_d_ep_transfer+0xc0>
    33ec:	f002 030f 	and.w	r3, r2, #15
    33f0:	e018      	b.n	3424 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    33f2:	f06f 000f 	mvn.w	r0, #15
    33f6:	e7dd      	b.n	33b4 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    33f8:	4b1e      	ldr	r3, [pc, #120]	; (3474 <usb_d_ep_transfer+0x114>)
    33fa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    33fe:	7cda      	ldrb	r2, [r3, #19]
    3400:	7c9d      	ldrb	r5, [r3, #18]
    3402:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    3406:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    3408:	b9a5      	cbnz	r5, 3434 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    340a:	4b1a      	ldr	r3, [pc, #104]	; (3474 <usb_d_ep_transfer+0x114>)
    340c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3410:	2304      	movs	r3, #4
    3412:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    3414:	2300      	movs	r3, #0
			zlp                 = true;
    3416:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3418:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    341a:	6821      	ldr	r1, [r4, #0]
    341c:	9101      	str	r1, [sp, #4]
    341e:	9302      	str	r3, [sp, #8]
    3420:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    3424:	f88d 300c 	strb.w	r3, [sp, #12]
    3428:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    342c:	a801      	add	r0, sp, #4
    342e:	4b13      	ldr	r3, [pc, #76]	; (347c <usb_d_ep_transfer+0x11c>)
    3430:	4798      	blx	r3
	return rc;
    3432:	e7bf      	b.n	33b4 <usb_d_ep_transfer+0x54>
    3434:	4643      	mov	r3, r8
    3436:	45a8      	cmp	r8, r5
    3438:	bf28      	it	cs
    343a:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    343c:	4a0d      	ldr	r2, [pc, #52]	; (3474 <usb_d_ep_transfer+0x114>)
    343e:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    3442:	f996 200c 	ldrsb.w	r2, [r6, #12]
    3446:	2a00      	cmp	r2, #0
    3448:	db05      	blt.n	3456 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    344a:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    344c:	6821      	ldr	r1, [r4, #0]
    344e:	9101      	str	r1, [sp, #4]
    3450:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3452:	2500      	movs	r5, #0
    3454:	e7ca      	b.n	33ec <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    3456:	429d      	cmp	r5, r3
    3458:	bf94      	ite	ls
    345a:	2500      	movls	r5, #0
    345c:	2501      	movhi	r5, #1
    345e:	e7db      	b.n	3418 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    3460:	f06f 0011 	mvn.w	r0, #17
    3464:	e7a6      	b.n	33b4 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    3466:	2002      	movs	r0, #2
    3468:	e7a4      	b.n	33b4 <usb_d_ep_transfer+0x54>
    346a:	bf00      	nop
    346c:	00002f95 	.word	0x00002f95
    3470:	00006875 	.word	0x00006875
    3474:	20001ba4 	.word	0x20001ba4
    3478:	00006883 	.word	0x00006883
    347c:	00006401 	.word	0x00006401

00003480 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3480:	b538      	push	{r3, r4, r5, lr}
    3482:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    3484:	4b07      	ldr	r3, [pc, #28]	; (34a4 <usb_d_ep_abort+0x24>)
    3486:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    3488:	1e04      	subs	r4, r0, #0
    348a:	db09      	blt.n	34a0 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    348c:	4628      	mov	r0, r5
    348e:	4b06      	ldr	r3, [pc, #24]	; (34a8 <usb_d_ep_abort+0x28>)
    3490:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3492:	4806      	ldr	r0, [pc, #24]	; (34ac <usb_d_ep_abort+0x2c>)
    3494:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    3498:	2301      	movs	r3, #1
    349a:	7083      	strb	r3, [r0, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    349c:	2304      	movs	r3, #4
    349e:	70c3      	strb	r3, [r0, #3]
    34a0:	bd38      	pop	{r3, r4, r5, pc}
    34a2:	bf00      	nop
    34a4:	00002f95 	.word	0x00002f95
    34a8:	000065e1 	.word	0x000065e1
    34ac:	20001ba4 	.word	0x20001ba4

000034b0 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    34b0:	b538      	push	{r3, r4, r5, lr}
    34b2:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    34b4:	b141      	cbz	r1, 34c8 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    34b6:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    34b8:	bf0c      	ite	eq
    34ba:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    34bc:	2102      	movne	r1, #2
    34be:	4b13      	ldr	r3, [pc, #76]	; (350c <usb_d_ep_halt+0x5c>)
    34c0:	4798      	blx	r3
    34c2:	4603      	mov	r3, r0
	}
}
    34c4:	4618      	mov	r0, r3
    34c6:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    34c8:	4b11      	ldr	r3, [pc, #68]	; (3510 <usb_d_ep_halt+0x60>)
    34ca:	4798      	blx	r3
	if (ep_index < 0) {
    34cc:	1e05      	subs	r5, r0, #0
    34ce:	db19      	blt.n	3504 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    34d0:	2102      	movs	r1, #2
    34d2:	4620      	mov	r0, r4
    34d4:	4b0d      	ldr	r3, [pc, #52]	; (350c <usb_d_ep_halt+0x5c>)
    34d6:	4798      	blx	r3
    34d8:	4603      	mov	r3, r0
    34da:	2800      	cmp	r0, #0
    34dc:	d0f2      	beq.n	34c4 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    34de:	2100      	movs	r1, #0
    34e0:	4620      	mov	r0, r4
    34e2:	4b0a      	ldr	r3, [pc, #40]	; (350c <usb_d_ep_halt+0x5c>)
    34e4:	4798      	blx	r3
		if (rc < 0) {
    34e6:	1e03      	subs	r3, r0, #0
    34e8:	dbec      	blt.n	34c4 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    34ea:	4b0a      	ldr	r3, [pc, #40]	; (3514 <usb_d_ep_halt+0x64>)
    34ec:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    34f0:	2201      	movs	r2, #1
    34f2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    34f4:	2103      	movs	r1, #3
    34f6:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    34f8:	69db      	ldr	r3, [r3, #28]
    34fa:	2200      	movs	r2, #0
    34fc:	4620      	mov	r0, r4
    34fe:	4798      	blx	r3
	return ERR_NONE;
    3500:	2300      	movs	r3, #0
    3502:	e7df      	b.n	34c4 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    3504:	f06f 0311 	mvn.w	r3, #17
    3508:	e7dc      	b.n	34c4 <usb_d_ep_halt+0x14>
    350a:	bf00      	nop
    350c:	00006259 	.word	0x00006259
    3510:	00002f95 	.word	0x00002f95
    3514:	20001ba4 	.word	0x20001ba4

00003518 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3518:	b538      	push	{r3, r4, r5, lr}
    351a:	460d      	mov	r5, r1
    351c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    351e:	4b0e      	ldr	r3, [pc, #56]	; (3558 <usb_d_ep_register_callback+0x40>)
    3520:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3522:	4b0e      	ldr	r3, [pc, #56]	; (355c <usb_d_ep_register_callback+0x44>)
    3524:	2c00      	cmp	r4, #0
    3526:	bf08      	it	eq
    3528:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    352a:	2800      	cmp	r0, #0
    352c:	db13      	blt.n	3556 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    352e:	2d01      	cmp	r5, #1
    3530:	d008      	beq.n	3544 <usb_d_ep_register_callback+0x2c>
    3532:	b115      	cbz	r5, 353a <usb_d_ep_register_callback+0x22>
    3534:	2d02      	cmp	r5, #2
    3536:	d00a      	beq.n	354e <usb_d_ep_register_callback+0x36>
    3538:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    353a:	4b09      	ldr	r3, [pc, #36]	; (3560 <usb_d_ep_register_callback+0x48>)
    353c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3540:	6144      	str	r4, [r0, #20]
		break;
    3542:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3544:	4b06      	ldr	r3, [pc, #24]	; (3560 <usb_d_ep_register_callback+0x48>)
    3546:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    354a:	6184      	str	r4, [r0, #24]
		break;
    354c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    354e:	4b04      	ldr	r3, [pc, #16]	; (3560 <usb_d_ep_register_callback+0x48>)
    3550:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3554:	61c4      	str	r4, [r0, #28]
    3556:	bd38      	pop	{r3, r4, r5, pc}
    3558:	00002f95 	.word	0x00002f95
    355c:	00002fd9 	.word	0x00002fd9
    3560:	20001ba4 	.word	0x20001ba4

00003564 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    3564:	b900      	cbnz	r0, 3568 <assert+0x4>
		__asm("BKPT #0");
    3566:	be00      	bkpt	0x0000
    3568:	4770      	bx	lr

0000356a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    356a:	6803      	ldr	r3, [r0, #0]
    356c:	b14b      	cbz	r3, 3582 <is_list_element+0x18>
		if (it == element) {
    356e:	428b      	cmp	r3, r1
    3570:	d009      	beq.n	3586 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    3572:	681b      	ldr	r3, [r3, #0]
    3574:	b11b      	cbz	r3, 357e <is_list_element+0x14>
		if (it == element) {
    3576:	4299      	cmp	r1, r3
    3578:	d1fb      	bne.n	3572 <is_list_element+0x8>
			return true;
    357a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    357c:	4770      	bx	lr
	return false;
    357e:	2000      	movs	r0, #0
    3580:	4770      	bx	lr
    3582:	2000      	movs	r0, #0
    3584:	4770      	bx	lr
			return true;
    3586:	2001      	movs	r0, #1
    3588:	4770      	bx	lr
	...

0000358c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    358c:	b538      	push	{r3, r4, r5, lr}
    358e:	4604      	mov	r4, r0
    3590:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    3592:	4b06      	ldr	r3, [pc, #24]	; (35ac <list_insert_as_head+0x20>)
    3594:	4798      	blx	r3
    3596:	f080 0001 	eor.w	r0, r0, #1
    359a:	2239      	movs	r2, #57	; 0x39
    359c:	4904      	ldr	r1, [pc, #16]	; (35b0 <list_insert_as_head+0x24>)
    359e:	b2c0      	uxtb	r0, r0
    35a0:	4b04      	ldr	r3, [pc, #16]	; (35b4 <list_insert_as_head+0x28>)
    35a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    35a4:	6823      	ldr	r3, [r4, #0]
    35a6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    35a8:	6025      	str	r5, [r4, #0]
    35aa:	bd38      	pop	{r3, r4, r5, pc}
    35ac:	0000356b 	.word	0x0000356b
    35b0:	0000d864 	.word	0x0000d864
    35b4:	00003565 	.word	0x00003565

000035b8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    35b8:	6803      	ldr	r3, [r0, #0]
    35ba:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    35bc:	6001      	str	r1, [r0, #0]
    35be:	4770      	bx	lr

000035c0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    35c0:	b570      	push	{r4, r5, r6, lr}
    35c2:	4605      	mov	r5, r0
    35c4:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    35c6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    35c8:	4b0a      	ldr	r3, [pc, #40]	; (35f4 <list_insert_at_end+0x34>)
    35ca:	4798      	blx	r3
    35cc:	f080 0001 	eor.w	r0, r0, #1
    35d0:	224f      	movs	r2, #79	; 0x4f
    35d2:	4909      	ldr	r1, [pc, #36]	; (35f8 <list_insert_at_end+0x38>)
    35d4:	b2c0      	uxtb	r0, r0
    35d6:	4b09      	ldr	r3, [pc, #36]	; (35fc <list_insert_at_end+0x3c>)
    35d8:	4798      	blx	r3

	if (!list->head) {
    35da:	682b      	ldr	r3, [r5, #0]
    35dc:	b91b      	cbnz	r3, 35e6 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    35de:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    35e0:	6033      	str	r3, [r6, #0]
		return;
    35e2:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    35e4:	461c      	mov	r4, r3
	while (it->next) {
    35e6:	6823      	ldr	r3, [r4, #0]
    35e8:	2b00      	cmp	r3, #0
    35ea:	d1fb      	bne.n	35e4 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    35ec:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    35ee:	6033      	str	r3, [r6, #0]
    35f0:	bd70      	pop	{r4, r5, r6, pc}
    35f2:	bf00      	nop
    35f4:	0000356b 	.word	0x0000356b
    35f8:	0000d864 	.word	0x0000d864
    35fc:	00003565 	.word	0x00003565

00003600 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    3600:	6803      	ldr	r3, [r0, #0]
    3602:	b10b      	cbz	r3, 3608 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    3604:	681a      	ldr	r2, [r3, #0]
    3606:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    3608:	4618      	mov	r0, r3
    360a:	4770      	bx	lr

0000360c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    360c:	b430      	push	{r4, r5}
	dev->hw = hw;
    360e:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3610:	698b      	ldr	r3, [r1, #24]
    3612:	f043 0301 	orr.w	r3, r3, #1
    3616:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3618:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    361a:	6993      	ldr	r3, [r2, #24]
    361c:	f013 0f01 	tst.w	r3, #1
    3620:	d0fb      	beq.n	361a <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3622:	6993      	ldr	r3, [r2, #24]
    3624:	f043 0302 	orr.w	r3, r3, #2
    3628:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    362a:	4b34      	ldr	r3, [pc, #208]	; (36fc <_can_async_init+0xf0>)
    362c:	4299      	cmp	r1, r3
    362e:	d011      	beq.n	3654 <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3630:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3632:	6993      	ldr	r3, [r2, #24]
    3634:	f023 0302 	bic.w	r3, r3, #2
    3638:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    363a:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    363c:	6993      	ldr	r3, [r2, #24]
    363e:	f023 0301 	bic.w	r3, r3, #1
    3642:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3644:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    3646:	6993      	ldr	r3, [r2, #24]
    3648:	f013 0f01 	tst.w	r3, #1
    364c:	d1fb      	bne.n	3646 <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    364e:	2000      	movs	r0, #0
    3650:	bc30      	pop	{r4, r5}
    3652:	4770      	bx	lr
		_can1_dev    = dev;
    3654:	4b2a      	ldr	r3, [pc, #168]	; (3700 <_can_async_init+0xf4>)
    3656:	461a      	mov	r2, r3
    3658:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    365c:	4929      	ldr	r1, [pc, #164]	; (3704 <_can_async_init+0xf8>)
    365e:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3660:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3662:	698c      	ldr	r4, [r1, #24]
    3664:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3666:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    3668:	2400      	movs	r4, #0
    366a:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    366c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    366e:	4d26      	ldr	r5, [pc, #152]	; (3708 <_can_async_init+0xfc>)
    3670:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3672:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    3674:	f640 2533 	movw	r5, #2611	; 0xa33
    3678:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    367a:	6805      	ldr	r5, [r0, #0]
    367c:	4923      	ldr	r1, [pc, #140]	; (370c <_can_async_init+0x100>)
    367e:	b289      	uxth	r1, r1
    3680:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3684:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3688:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    368a:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    368e:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3690:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3694:	6805      	ldr	r5, [r0, #0]
    3696:	491e      	ldr	r1, [pc, #120]	; (3710 <_can_async_init+0x104>)
    3698:	b289      	uxth	r1, r1
    369a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    369e:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    36a2:	6801      	ldr	r1, [r0, #0]
    36a4:	b292      	uxth	r2, r2
    36a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    36aa:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    36ae:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    36b0:	2128      	movs	r1, #40	; 0x28
    36b2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    36b6:	6801      	ldr	r1, [r0, #0]
    36b8:	f103 0214 	add.w	r2, r3, #20
    36bc:	b292      	uxth	r2, r2
    36be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    36c2:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    36c6:	6802      	ldr	r2, [r0, #0]
    36c8:	331c      	adds	r3, #28
    36ca:	b29b      	uxth	r3, r3
    36cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    36d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    36d4:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    36d6:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36da:	4b0e      	ldr	r3, [pc, #56]	; (3714 <_can_async_init+0x108>)
    36dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    36e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    36e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36e8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36ec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36f0:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    36f2:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    36f4:	2201      	movs	r2, #1
    36f6:	65da      	str	r2, [r3, #92]	; 0x5c
    36f8:	e79a      	b.n	3630 <_can_async_init+0x24>
    36fa:	bf00      	nop
    36fc:	42000400 	.word	0x42000400
    3700:	20001c24 	.word	0x20001c24
    3704:	20000050 	.word	0x20000050
    3708:	06020a07 	.word	0x06020a07
    370c:	200038d0 	.word	0x200038d0
    3710:	200038b0 	.word	0x200038b0
    3714:	e000e100 	.word	0xe000e100

00003718 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3718:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    371a:	4b1d      	ldr	r3, [pc, #116]	; (3790 <CAN1_Handler+0x78>)
    371c:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    371e:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    3720:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    3722:	f014 0f01 	tst.w	r4, #1
    3726:	d11c      	bne.n	3762 <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    3728:	f414 7f00 	tst.w	r4, #512	; 0x200
    372c:	d11d      	bne.n	376a <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    372e:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    3732:	d11e      	bne.n	3772 <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    3734:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    3738:	d120      	bne.n	377c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    373a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    373e:	d00a      	beq.n	3756 <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3740:	68ea      	ldr	r2, [r5, #12]
    3742:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3746:	f3c3 1340 	ubfx	r3, r3, #5, #1
    374a:	2b00      	cmp	r3, #0
    374c:	bf14      	ite	ne
    374e:	2102      	movne	r1, #2
    3750:	2101      	moveq	r1, #1
    3752:	4628      	mov	r0, r5
    3754:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    3756:	f014 0f08 	tst.w	r4, #8
    375a:	d114      	bne.n	3786 <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    375c:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    375e:	651c      	str	r4, [r3, #80]	; 0x50
    3760:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    3762:	68ab      	ldr	r3, [r5, #8]
    3764:	4628      	mov	r0, r5
    3766:	4798      	blx	r3
    3768:	e7de      	b.n	3728 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    376a:	686b      	ldr	r3, [r5, #4]
    376c:	4628      	mov	r0, r5
    376e:	4798      	blx	r3
    3770:	e7dd      	b.n	372e <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3772:	68eb      	ldr	r3, [r5, #12]
    3774:	2103      	movs	r1, #3
    3776:	4628      	mov	r0, r5
    3778:	4798      	blx	r3
    377a:	e7db      	b.n	3734 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    377c:	68eb      	ldr	r3, [r5, #12]
    377e:	2100      	movs	r1, #0
    3780:	4628      	mov	r0, r5
    3782:	4798      	blx	r3
    3784:	e7d9      	b.n	373a <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3786:	68eb      	ldr	r3, [r5, #12]
    3788:	2104      	movs	r1, #4
    378a:	4628      	mov	r0, r5
    378c:	4798      	blx	r3
    378e:	e7e5      	b.n	375c <CAN1_Handler+0x44>
    3790:	20001c24 	.word	0x20001c24

00003794 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3794:	0943      	lsrs	r3, r0, #5
    3796:	f000 001f 	and.w	r0, r0, #31
    379a:	2201      	movs	r2, #1
    379c:	fa02 f000 	lsl.w	r0, r2, r0
    37a0:	3340      	adds	r3, #64	; 0x40
    37a2:	4a02      	ldr	r2, [pc, #8]	; (37ac <_irq_set+0x18>)
    37a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    37a8:	4770      	bx	lr
    37aa:	bf00      	nop
    37ac:	e000e100 	.word	0xe000e100

000037b0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    37b0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    37b4:	00c0      	lsls	r0, r0, #3
    37b6:	3002      	adds	r0, #2
    37b8:	4b02      	ldr	r3, [pc, #8]	; (37c4 <_get_cycles_for_us+0x14>)
    37ba:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    37be:	0840      	lsrs	r0, r0, #1
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop
    37c4:	aaaaaaab 	.word	0xaaaaaaab

000037c8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    37c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    37cc:	00c3      	lsls	r3, r0, #3
    37ce:	3302      	adds	r3, #2
    37d0:	4804      	ldr	r0, [pc, #16]	; (37e4 <_get_cycles_for_ms+0x1c>)
    37d2:	fba0 2303 	umull	r2, r3, r0, r3
    37d6:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    37d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    37dc:	fb00 f003 	mul.w	r0, r0, r3
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	aaaaaaab 	.word	0xaaaaaaab

000037e8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    37e8:	3901      	subs	r1, #1
    37ea:	d8fd      	bhi.n	37e8 <_delay_cycles>
    37ec:	4770      	bx	lr
    37ee:	bf00      	nop

000037f0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    37f0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    37f2:	4a13      	ldr	r2, [pc, #76]	; (3840 <_init_chip+0x50>)
    37f4:	8813      	ldrh	r3, [r2, #0]
    37f6:	b29b      	uxth	r3, r3
    37f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    37fc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    37fe:	4b11      	ldr	r3, [pc, #68]	; (3844 <_init_chip+0x54>)
    3800:	4798      	blx	r3
	_oscctrl_init_sources();
    3802:	4b11      	ldr	r3, [pc, #68]	; (3848 <_init_chip+0x58>)
    3804:	4798      	blx	r3
	_mclk_init();
    3806:	4b11      	ldr	r3, [pc, #68]	; (384c <_init_chip+0x5c>)
    3808:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    380a:	f44f 6084 	mov.w	r0, #1056	; 0x420
    380e:	4c10      	ldr	r4, [pc, #64]	; (3850 <_init_chip+0x60>)
    3810:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    3812:	4b10      	ldr	r3, [pc, #64]	; (3854 <_init_chip+0x64>)
    3814:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3816:	f640 30df 	movw	r0, #3039	; 0xbdf
    381a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    381c:	4b0e      	ldr	r3, [pc, #56]	; (3858 <_init_chip+0x68>)
    381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3820:	62da      	str	r2, [r3, #44]	; 0x2c
    3822:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    3826:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    382a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    382e:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    3832:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    3836:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    383a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    383e:	bd10      	pop	{r4, pc}
    3840:	41004000 	.word	0x41004000
    3844:	00003c51 	.word	0x00003c51
    3848:	00003c71 	.word	0x00003c71
    384c:	00003c45 	.word	0x00003c45
    3850:	00003b5d 	.word	0x00003b5d
    3854:	00003c8d 	.word	0x00003c8d
    3858:	41008000 	.word	0x41008000

0000385c <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    385c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    385e:	2000      	movs	r0, #0
    3860:	4770      	bx	lr

00003862 <_crc_sync_enable>:
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
	(void)device;

	return ERR_NONE;
}
    3862:	2000      	movs	r0, #0
    3864:	4770      	bx	lr
	...

00003868 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    3868:	b5f0      	push	{r4, r5, r6, r7, lr}
    386a:	b083      	sub	sp, #12
	int32_t rc = ERR_NONE;
	if (((uint32_t)data) & 0x00000003) {
    386c:	f011 0f03 	tst.w	r1, #3
    3870:	d138      	bne.n	38e4 <_crc_sync_crc32+0x7c>
    3872:	461d      	mov	r5, r3
    3874:	4617      	mov	r7, r2
    3876:	460e      	mov	r6, r1
    3878:	4604      	mov	r4, r0
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
	}

	CRITICAL_SECTION_ENTER()
    387a:	a801      	add	r0, sp, #4
    387c:	4b1b      	ldr	r3, [pc, #108]	; (38ec <_crc_sync_crc32+0x84>)
    387e:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    3880:	6820      	ldr	r0, [r4, #0]
    3882:	4b1b      	ldr	r3, [pc, #108]	; (38f0 <_crc_sync_crc32+0x88>)
    3884:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    3886:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    3888:	605e      	str	r6, [r3, #4]
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    388a:	6823      	ldr	r3, [r4, #0]

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    388c:	6899      	ldr	r1, [r3, #8]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    388e:	f001 0103 	and.w	r1, r1, #3
	tmp |= DSU_LENGTH_LENGTH(data);
    3892:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
	((Dsu *)hw)->LENGTH.reg = tmp;
    3896:	6099      	str	r1, [r3, #8]
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    3898:	6823      	ldr	r3, [r4, #0]
    389a:	682a      	ldr	r2, [r5, #0]
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    389c:	60da      	str	r2, [r3, #12]
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    389e:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    38a0:	2204      	movs	r2, #4
    38a2:	701a      	strb	r2, [r3, #0]

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    38a4:	6821      	ldr	r1, [r4, #0]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    38a6:	784a      	ldrb	r2, [r1, #1]
    38a8:	f012 0f01 	tst.w	r2, #1
    38ac:	d0fb      	beq.n	38a6 <_crc_sync_crc32+0x3e>
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    38ae:	784b      	ldrb	r3, [r1, #1]
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    38b0:	f013 0f04 	tst.w	r3, #4
    38b4:	d012      	beq.n	38dc <_crc_sync_crc32+0x74>
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    38b6:	2304      	movs	r3, #4
    38b8:	704b      	strb	r3, [r1, #1]
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    38ba:	6823      	ldr	r3, [r4, #0]
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    38bc:	2201      	movs	r2, #1
    38be:	705a      	strb	r2, [r3, #1]
		rc = ERR_IO;
    38c0:	f06f 0505 	mvn.w	r5, #5
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    38c4:	6823      	ldr	r3, [r4, #0]
    38c6:	2201      	movs	r2, #1
    38c8:	705a      	strb	r2, [r3, #1]

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    38ca:	6820      	ldr	r0, [r4, #0]
    38cc:	4b09      	ldr	r3, [pc, #36]	; (38f4 <_crc_sync_crc32+0x8c>)
    38ce:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    38d0:	a801      	add	r0, sp, #4
    38d2:	4b09      	ldr	r3, [pc, #36]	; (38f8 <_crc_sync_crc32+0x90>)
    38d4:	4798      	blx	r3

	return rc;
}
    38d6:	4628      	mov	r0, r5
    38d8:	b003      	add	sp, #12
    38da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((Dsu *)hw)->DATA.reg;
    38dc:	68cb      	ldr	r3, [r1, #12]
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    38de:	602b      	str	r3, [r5, #0]
	int32_t rc = ERR_NONE;
    38e0:	2500      	movs	r5, #0
    38e2:	e7ef      	b.n	38c4 <_crc_sync_crc32+0x5c>
		return ERR_INVALID_ARG;
    38e4:	f06f 050c 	mvn.w	r5, #12
    38e8:	e7f5      	b.n	38d6 <_crc_sync_crc32+0x6e>
    38ea:	bf00      	nop
    38ec:	00006875 	.word	0x00006875
    38f0:	00003f09 	.word	0x00003f09
    38f4:	00003e9d 	.word	0x00003e9d
    38f8:	00006883 	.word	0x00006883

000038fc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    38fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38fe:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    3900:	4b2f      	ldr	r3, [pc, #188]	; (39c0 <_ext_irq_handler+0xc4>)
    3902:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    3904:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    3906:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    3908:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    390a:	4b2e      	ldr	r3, [pc, #184]	; (39c4 <_ext_irq_handler+0xc8>)
    390c:	6818      	ldr	r0, [r3, #0]
    390e:	22ec      	movs	r2, #236	; 0xec
    3910:	492d      	ldr	r1, [pc, #180]	; (39c8 <_ext_irq_handler+0xcc>)
    3912:	3000      	adds	r0, #0
    3914:	bf18      	it	ne
    3916:	2001      	movne	r0, #1
    3918:	4b2c      	ldr	r3, [pc, #176]	; (39cc <_ext_irq_handler+0xd0>)
    391a:	4798      	blx	r3

	while (flags) {
    391c:	9b01      	ldr	r3, [sp, #4]
    391e:	2b00      	cmp	r3, #0
    3920:	d04b      	beq.n	39ba <_ext_irq_handler+0xbe>
    3922:	f04f 37ff 	mov.w	r7, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    3926:	4d2a      	ldr	r5, [pc, #168]	; (39d0 <_ext_irq_handler+0xd4>)
    3928:	e03b      	b.n	39a2 <_ext_irq_handler+0xa6>
				if (_map[middle].extint == pos) {
    392a:	46b6      	mov	lr, r6
					pin = _map[middle].pin;
    392c:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
    3930:	f8de 7004 	ldr.w	r7, [lr, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    3934:	f1b7 3fff 	cmp.w	r7, #4294967295
    3938:	d003      	beq.n	3942 <_ext_irq_handler+0x46>
				callback(pin);
    393a:	4b22      	ldr	r3, [pc, #136]	; (39c4 <_ext_irq_handler+0xc8>)
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	4638      	mov	r0, r7
    3940:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    3942:	9b01      	ldr	r3, [sp, #4]
    3944:	fa06 f404 	lsl.w	r4, r6, r4
    3948:	ea23 0404 	bic.w	r4, r3, r4
    394c:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    394e:	9a01      	ldr	r2, [sp, #4]
    3950:	fa92 f3a2 	rbit	r3, r2
    3954:	fab3 f383 	clz	r3, r3
    3958:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    395a:	bf08      	it	eq
    395c:	f04f 33ff 	moveq.w	r3, #4294967295
    3960:	d018      	beq.n	3994 <_ext_irq_handler+0x98>
				if (_map[middle].extint == pos) {
    3962:	461c      	mov	r4, r3
    3964:	2b07      	cmp	r3, #7
    3966:	d0e0      	beq.n	392a <_ext_irq_handler+0x2e>
    3968:	2207      	movs	r2, #7
    396a:	4633      	mov	r3, r6
    396c:	2002      	movs	r0, #2
    396e:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
    3970:	4294      	cmp	r4, r2
					lower = middle + 1;
    3972:	bfc7      	ittee	gt
    3974:	3301      	addgt	r3, #1
    3976:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
    3978:	f103 33ff 	addle.w	r3, r3, #4294967295
    397c:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
    397e:	4281      	cmp	r1, r0
    3980:	d8d8      	bhi.n	3934 <_ext_irq_handler+0x38>
				middle = (upper + lower) >> 1;
    3982:	1843      	adds	r3, r0, r1
    3984:	f3c3 0347 	ubfx	r3, r3, #1, #8
    3988:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
    398a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    398e:	42a2      	cmp	r2, r4
    3990:	d1ee      	bne.n	3970 <_ext_irq_handler+0x74>
    3992:	e7cb      	b.n	392c <_ext_irq_handler+0x30>
	return ((Eic *)hw)->INTFLAG.reg;
    3994:	4b0a      	ldr	r3, [pc, #40]	; (39c0 <_ext_irq_handler+0xc4>)
    3996:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    3998:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    399a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    399c:	615a      	str	r2, [r3, #20]
	while (flags) {
    399e:	9b01      	ldr	r3, [sp, #4]
    39a0:	b15b      	cbz	r3, 39ba <_ext_irq_handler+0xbe>
		pos = ffs(flags) - 1;
    39a2:	9a01      	ldr	r2, [sp, #4]
    39a4:	fa92 f3a2 	rbit	r3, r2
    39a8:	fab3 f383 	clz	r3, r3
    39ac:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    39ae:	bf0c      	ite	eq
    39b0:	f04f 33ff 	moveq.w	r3, #4294967295
				if (_map[middle].extint == pos) {
    39b4:	2601      	movne	r6, #1
		while (-1 != pos) {
    39b6:	d1d4      	bne.n	3962 <_ext_irq_handler+0x66>
    39b8:	e7ec      	b.n	3994 <_ext_irq_handler+0x98>
	}
}
    39ba:	b003      	add	sp, #12
    39bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39be:	bf00      	nop
    39c0:	40002800 	.word	0x40002800
    39c4:	20001c50 	.word	0x20001c50
    39c8:	0000d894 	.word	0x0000d894
    39cc:	00003565 	.word	0x00003565
    39d0:	0000d884 	.word	0x0000d884

000039d4 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    39d4:	4b2f      	ldr	r3, [pc, #188]	; (3a94 <_ext_irq_init+0xc0>)
    39d6:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    39d8:	f013 0f01 	tst.w	r3, #1
    39dc:	d11f      	bne.n	3a1e <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    39de:	4a2d      	ldr	r2, [pc, #180]	; (3a94 <_ext_irq_init+0xc0>)
    39e0:	6853      	ldr	r3, [r2, #4]
    39e2:	f013 0f03 	tst.w	r3, #3
    39e6:	d1fb      	bne.n	39e0 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    39e8:	4b2a      	ldr	r3, [pc, #168]	; (3a94 <_ext_irq_init+0xc0>)
    39ea:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    39ec:	f013 0f02 	tst.w	r3, #2
    39f0:	d00d      	beq.n	3a0e <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    39f2:	4a28      	ldr	r2, [pc, #160]	; (3a94 <_ext_irq_init+0xc0>)
    39f4:	7813      	ldrb	r3, [r2, #0]
    39f6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    39fa:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    39fc:	6853      	ldr	r3, [r2, #4]
    39fe:	f013 0f03 	tst.w	r3, #3
    3a02:	d1fb      	bne.n	39fc <_ext_irq_init+0x28>
    3a04:	4a23      	ldr	r2, [pc, #140]	; (3a94 <_ext_irq_init+0xc0>)
    3a06:	6853      	ldr	r3, [r2, #4]
    3a08:	f013 0f02 	tst.w	r3, #2
    3a0c:	d1fb      	bne.n	3a06 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    3a0e:	2201      	movs	r2, #1
    3a10:	4b20      	ldr	r3, [pc, #128]	; (3a94 <_ext_irq_init+0xc0>)
    3a12:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3a14:	461a      	mov	r2, r3
    3a16:	6853      	ldr	r3, [r2, #4]
    3a18:	f013 0f03 	tst.w	r3, #3
    3a1c:	d1fb      	bne.n	3a16 <_ext_irq_init+0x42>
    3a1e:	4a1d      	ldr	r2, [pc, #116]	; (3a94 <_ext_irq_init+0xc0>)
    3a20:	6853      	ldr	r3, [r2, #4]
    3a22:	f013 0f01 	tst.w	r3, #1
    3a26:	d1fb      	bne.n	3a20 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    3a28:	4a1a      	ldr	r2, [pc, #104]	; (3a94 <_ext_irq_init+0xc0>)
    3a2a:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    3a2c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    3a30:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3a32:	6853      	ldr	r3, [r2, #4]
    3a34:	f013 0f03 	tst.w	r3, #3
    3a38:	d1fb      	bne.n	3a32 <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3a3a:	4b16      	ldr	r3, [pc, #88]	; (3a94 <_ext_irq_init+0xc0>)
    3a3c:	2200      	movs	r2, #0
    3a3e:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3a40:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3a42:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3a44:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3a46:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    3a48:	61da      	str	r2, [r3, #28]
    3a4a:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3a4c:	781a      	ldrb	r2, [r3, #0]
    3a4e:	f042 0202 	orr.w	r2, r2, #2
    3a52:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3a54:	461a      	mov	r2, r3
    3a56:	6853      	ldr	r3, [r2, #4]
    3a58:	f013 0f03 	tst.w	r3, #3
    3a5c:	d1fb      	bne.n	3a56 <_ext_irq_init+0x82>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a5e:	4b0e      	ldr	r3, [pc, #56]	; (3a98 <_ext_irq_init+0xc4>)
    3a60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a6c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a74:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3a7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a8a:	601a      	str	r2, [r3, #0]
	callback = cb;
    3a8c:	4b03      	ldr	r3, [pc, #12]	; (3a9c <_ext_irq_init+0xc8>)
    3a8e:	6018      	str	r0, [r3, #0]
}
    3a90:	2000      	movs	r0, #0
    3a92:	4770      	bx	lr
    3a94:	40002800 	.word	0x40002800
    3a98:	e000e100 	.word	0xe000e100
    3a9c:	20001c50 	.word	0x20001c50

00003aa0 <_ext_irq_enable>:
		if (_map[i].pin == pin) {
    3aa0:	2856      	cmp	r0, #86	; 0x56
    3aa2:	d006      	beq.n	3ab2 <_ext_irq_enable+0x12>
    3aa4:	2857      	cmp	r0, #87	; 0x57
    3aa6:	bf08      	it	eq
    3aa8:	2201      	moveq	r2, #1
    3aaa:	d003      	beq.n	3ab4 <_ext_irq_enable+0x14>
		return -1;
    3aac:	f04f 30ff 	mov.w	r0, #4294967295
    3ab0:	4770      	bx	lr
		if (_map[i].pin == pin) {
    3ab2:	2200      	movs	r2, #0
			extint = _map[i].extint;
    3ab4:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <_ext_irq_enable+0x40>)
    3ab6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
	if (INVALID_EXTINT_NUMBER == extint) {
    3aba:	2aff      	cmp	r2, #255	; 0xff
    3abc:	d00d      	beq.n	3ada <_ext_irq_enable+0x3a>
	if (enable) {
    3abe:	b931      	cbnz	r1, 3ace <_ext_irq_enable+0x2e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    3ac0:	2301      	movs	r3, #1
    3ac2:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    3ac4:	4a07      	ldr	r2, [pc, #28]	; (3ae4 <_ext_irq_enable+0x44>)
    3ac6:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    3ac8:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    3aca:	2000      	movs	r0, #0
    3acc:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    3ace:	2301      	movs	r3, #1
    3ad0:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    3ad2:	4a04      	ldr	r2, [pc, #16]	; (3ae4 <_ext_irq_enable+0x44>)
    3ad4:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    3ad6:	2000      	movs	r0, #0
    3ad8:	4770      	bx	lr
		return -1;
    3ada:	f04f 30ff 	mov.w	r0, #4294967295
}
    3ade:	4770      	bx	lr
    3ae0:	0000d884 	.word	0x0000d884
    3ae4:	40002800 	.word	0x40002800

00003ae8 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    3ae8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    3aea:	4b01      	ldr	r3, [pc, #4]	; (3af0 <EIC_6_Handler+0x8>)
    3aec:	4798      	blx	r3
    3aee:	bd08      	pop	{r3, pc}
    3af0:	000038fd 	.word	0x000038fd

00003af4 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    3af4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    3af6:	4b01      	ldr	r3, [pc, #4]	; (3afc <EIC_7_Handler+0x8>)
    3af8:	4798      	blx	r3
    3afa:	bd08      	pop	{r3, pc}
    3afc:	000038fd 	.word	0x000038fd

00003b00 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    3b00:	b430      	push	{r4, r5}
    3b02:	4814      	ldr	r0, [pc, #80]	; (3b54 <_event_system_init+0x54>)
    3b04:	f100 0543 	add.w	r5, r0, #67	; 0x43
    3b08:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    3b0a:	4c13      	ldr	r4, [pc, #76]	; (3b58 <_event_system_init+0x58>)
    3b0c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    3b0e:	f813 1b01 	ldrb.w	r1, [r3], #1
    3b12:	3248      	adds	r2, #72	; 0x48
    3b14:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    3b18:	42ab      	cmp	r3, r5
    3b1a:	d1f7      	bne.n	3b0c <_event_system_init+0xc>
    3b1c:	480d      	ldr	r0, [pc, #52]	; (3b54 <_event_system_init+0x54>)
    3b1e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    3b22:	3080      	adds	r0, #128	; 0x80
    3b24:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    3b26:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3b2a:	00ca      	lsls	r2, r1, #3
    3b2c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3b30:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    3b34:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    3b36:	f850 3f04 	ldr.w	r3, [r0, #4]!
    3b3a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    3b3c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    3b40:	43db      	mvns	r3, r3
    3b42:	b2db      	uxtb	r3, r3
    3b44:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3b48:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    3b4a:	2920      	cmp	r1, #32
    3b4c:	d1eb      	bne.n	3b26 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    3b4e:	2000      	movs	r0, #0
    3b50:	bc30      	pop	{r4, r5}
    3b52:	4770      	bx	lr
    3b54:	0000d8ac 	.word	0x0000d8ac
    3b58:	4100e000 	.word	0x4100e000

00003b5c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3b5c:	f010 0f01 	tst.w	r0, #1
    3b60:	d008      	beq.n	3b74 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3b62:	4a2f      	ldr	r2, [pc, #188]	; (3c20 <_gclk_init_generators_by_fref+0xc4>)
    3b64:	4b2f      	ldr	r3, [pc, #188]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3b66:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b68:	4619      	mov	r1, r3
    3b6a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b6e:	684b      	ldr	r3, [r1, #4]
    3b70:	4213      	tst	r3, r2
    3b72:	d1fc      	bne.n	3b6e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    3b74:	f010 0f02 	tst.w	r0, #2
    3b78:	d008      	beq.n	3b8c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3b7a:	4a2b      	ldr	r2, [pc, #172]	; (3c28 <_gclk_init_generators_by_fref+0xcc>)
    3b7c:	4b29      	ldr	r3, [pc, #164]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3b7e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b80:	4619      	mov	r1, r3
    3b82:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b86:	684b      	ldr	r3, [r1, #4]
    3b88:	4213      	tst	r3, r2
    3b8a:	d1fc      	bne.n	3b86 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    3b8c:	f010 0f04 	tst.w	r0, #4
    3b90:	d008      	beq.n	3ba4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3b92:	4a26      	ldr	r2, [pc, #152]	; (3c2c <_gclk_init_generators_by_fref+0xd0>)
    3b94:	4b23      	ldr	r3, [pc, #140]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3b96:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3b98:	4619      	mov	r1, r3
    3b9a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3b9e:	684b      	ldr	r3, [r1, #4]
    3ba0:	4213      	tst	r3, r2
    3ba2:	d1fc      	bne.n	3b9e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    3ba4:	f010 0f08 	tst.w	r0, #8
    3ba8:	d008      	beq.n	3bbc <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3baa:	4a21      	ldr	r2, [pc, #132]	; (3c30 <_gclk_init_generators_by_fref+0xd4>)
    3bac:	4b1d      	ldr	r3, [pc, #116]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3bae:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3bb0:	4619      	mov	r1, r3
    3bb2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3bb6:	684b      	ldr	r3, [r1, #4]
    3bb8:	4213      	tst	r3, r2
    3bba:	d1fc      	bne.n	3bb6 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    3bbc:	f010 0f10 	tst.w	r0, #16
    3bc0:	d008      	beq.n	3bd4 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3bc2:	4a1c      	ldr	r2, [pc, #112]	; (3c34 <_gclk_init_generators_by_fref+0xd8>)
    3bc4:	4b17      	ldr	r3, [pc, #92]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3bc6:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3bc8:	4619      	mov	r1, r3
    3bca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3bce:	684b      	ldr	r3, [r1, #4]
    3bd0:	4213      	tst	r3, r2
    3bd2:	d1fc      	bne.n	3bce <_gclk_init_generators_by_fref+0x72>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    3bd4:	f010 0f20 	tst.w	r0, #32
    3bd8:	d008      	beq.n	3bec <_gclk_init_generators_by_fref+0x90>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3bda:	4a17      	ldr	r2, [pc, #92]	; (3c38 <_gclk_init_generators_by_fref+0xdc>)
    3bdc:	4b11      	ldr	r3, [pc, #68]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3bde:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3be0:	4619      	mov	r1, r3
    3be2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3be6:	684b      	ldr	r3, [r1, #4]
    3be8:	4213      	tst	r3, r2
    3bea:	d1fc      	bne.n	3be6 <_gclk_init_generators_by_fref+0x8a>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    3bec:	f410 6f80 	tst.w	r0, #1024	; 0x400
    3bf0:	d008      	beq.n	3c04 <_gclk_init_generators_by_fref+0xa8>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3bf2:	4a12      	ldr	r2, [pc, #72]	; (3c3c <_gclk_init_generators_by_fref+0xe0>)
    3bf4:	4b0b      	ldr	r3, [pc, #44]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3bf6:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3bf8:	4619      	mov	r1, r3
    3bfa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3bfe:	684b      	ldr	r3, [r1, #4]
    3c00:	4213      	tst	r3, r2
    3c02:	d1fc      	bne.n	3bfe <_gclk_init_generators_by_fref+0xa2>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    3c04:	f410 6f00 	tst.w	r0, #2048	; 0x800
    3c08:	d008      	beq.n	3c1c <_gclk_init_generators_by_fref+0xc0>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3c0a:	4a0d      	ldr	r2, [pc, #52]	; (3c40 <_gclk_init_generators_by_fref+0xe4>)
    3c0c:	4b05      	ldr	r3, [pc, #20]	; (3c24 <_gclk_init_generators_by_fref+0xc8>)
    3c0e:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3c10:	4619      	mov	r1, r3
    3c12:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3c16:	684b      	ldr	r3, [r1, #4]
    3c18:	4213      	tst	r3, r2
    3c1a:	d1fc      	bne.n	3c16 <_gclk_init_generators_by_fref+0xba>
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop
    3c20:	00010107 	.word	0x00010107
    3c24:	40001c00 	.word	0x40001c00
    3c28:	00010907 	.word	0x00010907
    3c2c:	00010906 	.word	0x00010906
    3c30:	00011908 	.word	0x00011908
    3c34:	00010901 	.word	0x00010901
    3c38:	00060901 	.word	0x00060901
    3c3c:	00010905 	.word	0x00010905
    3c40:	00041905 	.word	0x00041905

00003c44 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    3c44:	2201      	movs	r2, #1
    3c46:	4b01      	ldr	r3, [pc, #4]	; (3c4c <_mclk_init+0x8>)
    3c48:	715a      	strb	r2, [r3, #5]
    3c4a:	4770      	bx	lr
    3c4c:	40000800 	.word	0x40000800

00003c50 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    3c50:	4b06      	ldr	r3, [pc, #24]	; (3c6c <_osc32kctrl_init_sources+0x1c>)
    3c52:	f242 028e 	movw	r2, #8334	; 0x208e
    3c56:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    3c58:	2200      	movs	r2, #0
    3c5a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    3c5c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    3c5e:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    3c60:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3c64:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3c66:	741a      	strb	r2, [r3, #16]
    3c68:	4770      	bx	lr
    3c6a:	bf00      	nop
    3c6c:	40001400 	.word	0x40001400

00003c70 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    3c70:	4a04      	ldr	r2, [pc, #16]	; (3c84 <_oscctrl_init_sources+0x14>)
    3c72:	4b05      	ldr	r3, [pc, #20]	; (3c88 <_oscctrl_init_sources+0x18>)
    3c74:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    3c76:	461a      	mov	r2, r3
    3c78:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    3c7a:	f013 0f02 	tst.w	r3, #2
    3c7e:	d0fb      	beq.n	3c78 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    3c80:	4770      	bx	lr
    3c82:	bf00      	nop
    3c84:	03002606 	.word	0x03002606
    3c88:	40001000 	.word	0x40001000

00003c8c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3c8c:	4a54      	ldr	r2, [pc, #336]	; (3de0 <_oscctrl_init_referenced_generators+0x154>)
    3c8e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3c90:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3c94:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3c98:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3c9a:	4611      	mov	r1, r2
    3c9c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3ca0:	684b      	ldr	r3, [r1, #4]
    3ca2:	4213      	tst	r3, r2
    3ca4:	d1fc      	bne.n	3ca0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3ca6:	4a4e      	ldr	r2, [pc, #312]	; (3de0 <_oscctrl_init_referenced_generators+0x154>)
    3ca8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    3caa:	f013 0f04 	tst.w	r3, #4
    3cae:	d1fb      	bne.n	3ca8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3cb0:	4b4c      	ldr	r3, [pc, #304]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3cb2:	2200      	movs	r2, #0
    3cb4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    3cb6:	4a4c      	ldr	r2, [pc, #304]	; (3de8 <_oscctrl_init_referenced_generators+0x15c>)
    3cb8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3cba:	461a      	mov	r2, r3
    3cbc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    3cc0:	f013 0f10 	tst.w	r3, #16
    3cc4:	d1fa      	bne.n	3cbc <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3cc6:	2200      	movs	r2, #0
    3cc8:	4b46      	ldr	r3, [pc, #280]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3cca:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3cce:	461a      	mov	r2, r3
    3cd0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3cd4:	f013 0f04 	tst.w	r3, #4
    3cd8:	d1fa      	bne.n	3cd0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3cda:	2202      	movs	r2, #2
    3cdc:	4b41      	ldr	r3, [pc, #260]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3cde:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3ce0:	461a      	mov	r2, r3
    3ce2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    3ce6:	f013 0f02 	tst.w	r3, #2
    3cea:	d1fa      	bne.n	3ce2 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3cec:	4b3d      	ldr	r3, [pc, #244]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3cf0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3cf2:	461a      	mov	r2, r3
    3cf4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    3cf8:	f013 0f08 	tst.w	r3, #8
    3cfc:	d1fa      	bne.n	3cf4 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3cfe:	2219      	movs	r2, #25
    3d00:	4b38      	ldr	r3, [pc, #224]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d02:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3d06:	461a      	mov	r2, r3
    3d08:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3d0c:	f013 0f04 	tst.w	r3, #4
    3d10:	d1fa      	bne.n	3d08 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    3d12:	2245      	movs	r2, #69	; 0x45
    3d14:	4b32      	ldr	r3, [pc, #200]	; (3de0 <_oscctrl_init_referenced_generators+0x154>)
    3d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    3d1a:	223b      	movs	r2, #59	; 0x3b
    3d1c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    3d20:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3d22:	461a      	mov	r2, r3
    3d24:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    3d26:	f013 0f06 	tst.w	r3, #6
    3d2a:	d1fb      	bne.n	3d24 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    3d2c:	4b2d      	ldr	r3, [pc, #180]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d2e:	2210      	movs	r2, #16
    3d30:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    3d32:	2202      	movs	r2, #2
    3d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3d38:	461a      	mov	r2, r3
    3d3a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    3d3c:	f013 0f02 	tst.w	r3, #2
    3d40:	d1fb      	bne.n	3d3a <_oscctrl_init_referenced_generators+0xae>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    3d42:	4a2a      	ldr	r2, [pc, #168]	; (3dec <_oscctrl_init_referenced_generators+0x160>)
    3d44:	4b27      	ldr	r3, [pc, #156]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d46:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3d48:	461a      	mov	r2, r3
    3d4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3d4c:	f013 0f06 	tst.w	r3, #6
    3d50:	d1fb      	bne.n	3d4a <_oscctrl_init_referenced_generators+0xbe>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    3d52:	4b24      	ldr	r3, [pc, #144]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d54:	2220      	movs	r2, #32
    3d56:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    3d58:	2202      	movs	r2, #2
    3d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3d5e:	461a      	mov	r2, r3
    3d60:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3d62:	f013 0f02 	tst.w	r3, #2
    3d66:	d1fb      	bne.n	3d60 <_oscctrl_init_referenced_generators+0xd4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3d68:	4b1e      	ldr	r3, [pc, #120]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    3d6e:	f013 0f01 	tst.w	r3, #1
    3d72:	d02f      	beq.n	3dd4 <_oscctrl_init_referenced_generators+0x148>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3d74:	4a1b      	ldr	r2, [pc, #108]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d76:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3d78:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    3d7c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3d80:	d1f9      	bne.n	3d76 <_oscctrl_init_referenced_generators+0xea>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    3d82:	4b18      	ldr	r3, [pc, #96]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    3d86:	f012 0f01 	tst.w	r2, #1
    3d8a:	d103      	bne.n	3d94 <_oscctrl_init_referenced_generators+0x108>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    3d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3d8e:	f012 0f02 	tst.w	r2, #2
    3d92:	d0f7      	beq.n	3d84 <_oscctrl_init_referenced_generators+0xf8>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    3d94:	4b13      	ldr	r3, [pc, #76]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3d96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    3d98:	f012 0f01 	tst.w	r2, #1
    3d9c:	d103      	bne.n	3da6 <_oscctrl_init_referenced_generators+0x11a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    3d9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    3da0:	f012 0f02 	tst.w	r2, #2
    3da4:	d0f7      	beq.n	3d96 <_oscctrl_init_referenced_generators+0x10a>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3da6:	4a0e      	ldr	r2, [pc, #56]	; (3de0 <_oscctrl_init_referenced_generators+0x154>)
    3da8:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3daa:	2b00      	cmp	r3, #0
    3dac:	d1fc      	bne.n	3da8 <_oscctrl_init_referenced_generators+0x11c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3dae:	4a0c      	ldr	r2, [pc, #48]	; (3de0 <_oscctrl_init_referenced_generators+0x154>)
    3db0:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3db2:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3db6:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3dba:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    3dbc:	4611      	mov	r1, r2
    3dbe:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3dc2:	684b      	ldr	r3, [r1, #4]
    3dc4:	4213      	tst	r3, r2
    3dc6:	d1fc      	bne.n	3dc2 <_oscctrl_init_referenced_generators+0x136>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3dc8:	4a05      	ldr	r2, [pc, #20]	; (3de0 <_oscctrl_init_referenced_generators+0x154>)
    3dca:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    3dcc:	f013 0f04 	tst.w	r3, #4
    3dd0:	d1fb      	bne.n	3dca <_oscctrl_init_referenced_generators+0x13e>
		;
#endif
	(void)hw;
}
    3dd2:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    3dd4:	4a03      	ldr	r2, [pc, #12]	; (3de4 <_oscctrl_init_referenced_generators+0x158>)
    3dd6:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    3dd8:	f413 7f80 	tst.w	r3, #256	; 0x100
    3ddc:	d0fb      	beq.n	3dd6 <_oscctrl_init_referenced_generators+0x14a>
    3dde:	e7d0      	b.n	3d82 <_oscctrl_init_referenced_generators+0xf6>
    3de0:	40001c00 	.word	0x40001c00
    3de4:	40001000 	.word	0x40001000
    3de8:	0401bb80 	.word	0x0401bb80
    3dec:	000407a0 	.word	0x000407a0

00003df0 <_pac_get_peripheral_id>:

static uint32_t _pac_get_peripheral_id(const void *const module)
{
	uint32_t peripheral = 10;

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    3df0:	f000 4382 	and.w	r3, r0, #1090519040	; 0x41000000
		peripheral = 13;
    3df4:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    3df8:	bf14      	ite	ne
    3dfa:	220a      	movne	r2, #10
    3dfc:	220d      	moveq	r2, #13
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    3dfe:	4b04      	ldr	r3, [pc, #16]	; (3e10 <_pac_get_peripheral_id+0x20>)
    3e00:	4003      	ands	r3, r0
    3e02:	40d3      	lsrs	r3, r2
    3e04:	f3c0 6003 	ubfx	r0, r0, #24, #4

	return peripheral;
}
    3e08:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3e0c:	4770      	bx	lr
    3e0e:	bf00      	nop
    3e10:	000fff00 	.word	0x000fff00

00003e14 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    3e14:	b538      	push	{r3, r4, r5, lr}
    3e16:	4604      	mov	r4, r0
    3e18:	460d      	mov	r5, r1
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    3e1a:	226d      	movs	r2, #109	; 0x6d
    3e1c:	491c      	ldr	r1, [pc, #112]	; (3e90 <_periph_get_lock_state+0x7c>)
    3e1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    3e22:	bf94      	ite	ls
    3e24:	2000      	movls	r0, #0
    3e26:	2001      	movhi	r0, #1
    3e28:	4b1a      	ldr	r3, [pc, #104]	; (3e94 <_periph_get_lock_state+0x80>)
    3e2a:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    3e2c:	4620      	mov	r0, r4
    3e2e:	4b1a      	ldr	r3, [pc, #104]	; (3e98 <_periph_get_lock_state+0x84>)
    3e30:	4798      	blx	r3
    3e32:	f000 001f 	and.w	r0, r0, #31

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    3e36:	f1b4 4f82 	cmp.w	r4, #1090519040	; 0x41000000
    3e3a:	d311      	bcc.n	3e60 <_periph_get_lock_state+0x4c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    3e3c:	f1b4 4f84 	cmp.w	r4, #1107296256	; 0x42000000
    3e40:	d31a      	bcc.n	3e78 <_periph_get_lock_state+0x64>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    3e42:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    3e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e4a:	bf34      	ite	cc
    3e4c:	6bda      	ldrcc	r2, [r3, #60]	; 0x3c
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    3e4e:	6c1a      	ldrcs	r2, [r3, #64]	; 0x40
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    3e50:	2301      	movs	r3, #1
    3e52:	fa03 f000 	lsl.w	r0, r3, r0
    3e56:	4210      	tst	r0, r2
    3e58:	bf08      	it	eq
    3e5a:	2300      	moveq	r3, #0
    3e5c:	702b      	strb	r3, [r5, #0]
    3e5e:	e009      	b.n	3e74 <_periph_get_lock_state+0x60>
	tmp = ((Pac *)hw)->STATUSA.reg;
    3e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    3e66:	2301      	movs	r3, #1
    3e68:	fa03 f000 	lsl.w	r0, r3, r0
    3e6c:	4210      	tst	r0, r2
    3e6e:	bf08      	it	eq
    3e70:	2300      	moveq	r3, #0
    3e72:	702b      	strb	r3, [r5, #0]
	}

	return ERR_NONE;
}
    3e74:	2000      	movs	r0, #0
    3e76:	bd38      	pop	{r3, r4, r5, pc}
	tmp = ((Pac *)hw)->STATUSB.reg;
    3e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    3e7e:	2301      	movs	r3, #1
    3e80:	fa03 f000 	lsl.w	r0, r3, r0
    3e84:	4210      	tst	r0, r2
    3e86:	bf08      	it	eq
    3e88:	2300      	moveq	r3, #0
    3e8a:	702b      	strb	r3, [r5, #0]
    3e8c:	e7f2      	b.n	3e74 <_periph_get_lock_state+0x60>
    3e8e:	bf00      	nop
    3e90:	0000d9b0 	.word	0x0000d9b0
    3e94:	00003565 	.word	0x00003565
    3e98:	00003df1 	.word	0x00003df1

00003e9c <_periph_lock>:
{
    3e9c:	b570      	push	{r4, r5, r6, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	4605      	mov	r5, r0
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    3ea2:	2239      	movs	r2, #57	; 0x39
    3ea4:	4914      	ldr	r1, [pc, #80]	; (3ef8 <_periph_lock+0x5c>)
    3ea6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    3eaa:	bf94      	ite	ls
    3eac:	2000      	movls	r0, #0
    3eae:	2001      	movhi	r0, #1
    3eb0:	4b12      	ldr	r3, [pc, #72]	; (3efc <_periph_lock+0x60>)
    3eb2:	4798      	blx	r3
	peripheral = _pac_get_peripheral_id(module);
    3eb4:	4628      	mov	r0, r5
    3eb6:	4b12      	ldr	r3, [pc, #72]	; (3f00 <_periph_lock+0x64>)
    3eb8:	4798      	blx	r3
	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    3eba:	b280      	uxth	r0, r0
    3ebc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    3ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ec4:	6018      	str	r0, [r3, #0]
	int32_t  timeout = 1000;
    3ec6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		_periph_get_lock_state(module, &stat);
    3eca:	4e0e      	ldr	r6, [pc, #56]	; (3f04 <_periph_lock+0x68>)
    3ecc:	f10d 0107 	add.w	r1, sp, #7
    3ed0:	4628      	mov	r0, r5
    3ed2:	47b0      	blx	r6
	} while (!stat && timeout--);
    3ed4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3ed8:	b933      	cbnz	r3, 3ee8 <_periph_lock+0x4c>
    3eda:	3c01      	subs	r4, #1
    3edc:	f1b4 3fff 	cmp.w	r4, #4294967295
    3ee0:	d1f4      	bne.n	3ecc <_periph_lock+0x30>
		return ERR_TIMEOUT;
    3ee2:	f06f 0007 	mvn.w	r0, #7
    3ee6:	e004      	b.n	3ef2 <_periph_lock+0x56>
	return ERR_NONE;
    3ee8:	2c00      	cmp	r4, #0
    3eea:	bfb4      	ite	lt
    3eec:	f06f 0007 	mvnlt.w	r0, #7
    3ef0:	2000      	movge	r0, #0
}
    3ef2:	b002      	add	sp, #8
    3ef4:	bd70      	pop	{r4, r5, r6, pc}
    3ef6:	bf00      	nop
    3ef8:	0000d9b0 	.word	0x0000d9b0
    3efc:	00003565 	.word	0x00003565
    3f00:	00003df1 	.word	0x00003df1
    3f04:	00003e15 	.word	0x00003e15

00003f08 <_periph_unlock>:
{
    3f08:	b570      	push	{r4, r5, r6, lr}
    3f0a:	b082      	sub	sp, #8
    3f0c:	4605      	mov	r5, r0
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    3f0e:	2253      	movs	r2, #83	; 0x53
    3f10:	4914      	ldr	r1, [pc, #80]	; (3f64 <_periph_unlock+0x5c>)
    3f12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    3f16:	bf94      	ite	ls
    3f18:	2000      	movls	r0, #0
    3f1a:	2001      	movhi	r0, #1
    3f1c:	4b12      	ldr	r3, [pc, #72]	; (3f68 <_periph_unlock+0x60>)
    3f1e:	4798      	blx	r3
	peripheral = _pac_get_peripheral_id(module);
    3f20:	4628      	mov	r0, r5
    3f22:	4b12      	ldr	r3, [pc, #72]	; (3f6c <_periph_unlock+0x64>)
    3f24:	4798      	blx	r3
	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    3f26:	b280      	uxth	r0, r0
    3f28:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    3f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f30:	6018      	str	r0, [r3, #0]
	int32_t  timeout = 1000;
    3f32:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		_periph_get_lock_state(module, &stat);
    3f36:	4e0e      	ldr	r6, [pc, #56]	; (3f70 <_periph_unlock+0x68>)
    3f38:	f10d 0107 	add.w	r1, sp, #7
    3f3c:	4628      	mov	r0, r5
    3f3e:	47b0      	blx	r6
	} while (stat && timeout--);
    3f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3f44:	b133      	cbz	r3, 3f54 <_periph_unlock+0x4c>
    3f46:	3c01      	subs	r4, #1
    3f48:	f1b4 3fff 	cmp.w	r4, #4294967295
    3f4c:	d1f4      	bne.n	3f38 <_periph_unlock+0x30>
		return ERR_TIMEOUT;
    3f4e:	f06f 0007 	mvn.w	r0, #7
    3f52:	e004      	b.n	3f5e <_periph_unlock+0x56>
	return ERR_NONE;
    3f54:	2c00      	cmp	r4, #0
    3f56:	bfb4      	ite	lt
    3f58:	f06f 0007 	mvnlt.w	r0, #7
    3f5c:	2000      	movge	r0, #0
}
    3f5e:	b002      	add	sp, #8
    3f60:	bd70      	pop	{r4, r5, r6, pc}
    3f62:	bf00      	nop
    3f64:	0000d9b0 	.word	0x0000d9b0
    3f68:	00003565 	.word	0x00003565
    3f6c:	00003df1 	.word	0x00003df1
    3f70:	00003e15 	.word	0x00003e15

00003f74 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    3f74:	b538      	push	{r3, r4, r5, lr}
    3f76:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    3f78:	4605      	mov	r5, r0
    3f7a:	b178      	cbz	r0, 3f9c <_qspi_sync_init+0x28>
    3f7c:	1c08      	adds	r0, r1, #0
    3f7e:	bf18      	it	ne
    3f80:	2001      	movne	r0, #1
    3f82:	2240      	movs	r2, #64	; 0x40
    3f84:	4906      	ldr	r1, [pc, #24]	; (3fa0 <_qspi_sync_init+0x2c>)
    3f86:	4b07      	ldr	r3, [pc, #28]	; (3fa4 <_qspi_sync_init+0x30>)
    3f88:	4798      	blx	r3
	dev->prvt = hw;
    3f8a:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    3f8c:	2301      	movs	r3, #1
    3f8e:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    3f90:	4b05      	ldr	r3, [pc, #20]	; (3fa8 <_qspi_sync_init+0x34>)
    3f92:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    3f94:	4b05      	ldr	r3, [pc, #20]	; (3fac <_qspi_sync_init+0x38>)
    3f96:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    3f98:	2000      	movs	r0, #0
    3f9a:	bd38      	pop	{r3, r4, r5, pc}
    3f9c:	2000      	movs	r0, #0
    3f9e:	e7f0      	b.n	3f82 <_qspi_sync_init+0xe>
    3fa0:	0000d9c8 	.word	0x0000d9c8
    3fa4:	00003565 	.word	0x00003565
    3fa8:	06000011 	.word	0x06000011
    3fac:	00241300 	.word	0x00241300

00003fb0 <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    3fb0:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    3fb2:	2202      	movs	r2, #2
    3fb4:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    3fb6:	2000      	movs	r0, #0
    3fb8:	4770      	bx	lr

00003fba <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    3fba:	6803      	ldr	r3, [r0, #0]
    3fbc:	2000      	movs	r0, #0
    3fbe:	6018      	str	r0, [r3, #0]
	return ERR_NONE;
}
    3fc0:	4770      	bx	lr
	...

00003fc4 <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    3fc4:	b570      	push	{r4, r5, r6, lr}
    3fc6:	4605      	mov	r5, r0
    3fc8:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    3fca:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    3fcc:	780a      	ldrb	r2, [r1, #0]
    3fce:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    3fd2:	bf1c      	itt	ne
    3fd4:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    3fd6:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    3fd8:	780a      	ldrb	r2, [r1, #0]
    3fda:	f012 0f10 	tst.w	r2, #16
    3fde:	d005      	beq.n	3fec <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    3fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    3fe2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    3fe6:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    3fe8:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    3fea:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    3fec:	7822      	ldrb	r2, [r4, #0]
    3fee:	f012 0f40 	tst.w	r2, #64	; 0x40
    3ff2:	d006      	beq.n	4002 <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    3ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    3ff6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    3ffa:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    3ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4000:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    4002:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    4004:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    4006:	7823      	ldrb	r3, [r4, #0]
    4008:	f013 0f80 	tst.w	r3, #128	; 0x80
    400c:	d10c      	bne.n	4028 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    400e:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    4010:	4a1f      	ldr	r2, [pc, #124]	; (4090 <_qspi_sync_serial_run_command+0xcc>)
    4012:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    4014:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    4016:	69d3      	ldr	r3, [r2, #28]
    4018:	f413 6f80 	tst.w	r3, #1024	; 0x400
    401c:	d0fb      	beq.n	4016 <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    401e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4022:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    4024:	2000      	movs	r0, #0
    4026:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    4028:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    402a:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    402e:	bf1a      	itte	ne
    4030:	68a2      	ldrne	r2, [r4, #8]
    4032:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    4036:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    403a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    403c:	6923      	ldr	r3, [r4, #16]
    403e:	b1ab      	cbz	r3, 406c <_qspi_sync_serial_run_command+0xa8>
    4040:	2001      	movs	r0, #1
    4042:	2282      	movs	r2, #130	; 0x82
    4044:	4913      	ldr	r1, [pc, #76]	; (4094 <_qspi_sync_serial_run_command+0xd0>)
    4046:	4b14      	ldr	r3, [pc, #80]	; (4098 <_qspi_sync_serial_run_command+0xd4>)
    4048:	4798      	blx	r3
	if (cmd->tx_buf) {
    404a:	6923      	ldr	r3, [r4, #16]
    404c:	b19b      	cbz	r3, 4076 <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    404e:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    4050:	b138      	cbz	r0, 4062 <_qspi_sync_serial_run_command+0x9e>
    4052:	1e72      	subs	r2, r6, #1
    4054:	4418      	add	r0, r3
		*dst++ = *src++;
    4056:	f813 1b01 	ldrb.w	r1, [r3], #1
    405a:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    405e:	4283      	cmp	r3, r0
    4060:	d1f9      	bne.n	4056 <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    4062:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4066:	f3bf 8f6f 	isb	sy
    406a:	e7d0      	b.n	400e <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    406c:	6960      	ldr	r0, [r4, #20]
    406e:	3000      	adds	r0, #0
    4070:	bf18      	it	ne
    4072:	2001      	movne	r0, #1
    4074:	e7e5      	b.n	4042 <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    4076:	6963      	ldr	r3, [r4, #20]
    4078:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    407a:	2900      	cmp	r1, #0
    407c:	d0f1      	beq.n	4062 <_qspi_sync_serial_run_command+0x9e>
    407e:	3b01      	subs	r3, #1
    4080:	4431      	add	r1, r6
		*dst++ = *src++;
    4082:	f816 2b01 	ldrb.w	r2, [r6], #1
    4086:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    408a:	42b1      	cmp	r1, r6
    408c:	d1f9      	bne.n	4082 <_qspi_sync_serial_run_command+0xbe>
    408e:	e7e8      	b.n	4062 <_qspi_sync_serial_run_command+0x9e>
    4090:	01000002 	.word	0x01000002
    4094:	0000d9c8 	.word	0x0000d9c8
    4098:	00003565 	.word	0x00003565

0000409c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    409c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    409e:	4604      	mov	r4, r0
    40a0:	2800      	cmp	r0, #0
    40a2:	d042      	beq.n	412a <_calendar_init+0x8e>
    40a4:	6800      	ldr	r0, [r0, #0]
    40a6:	3000      	adds	r0, #0
    40a8:	bf18      	it	ne
    40aa:	2001      	movne	r0, #1
    40ac:	222f      	movs	r2, #47	; 0x2f
    40ae:	4920      	ldr	r1, [pc, #128]	; (4130 <_calendar_init+0x94>)
    40b0:	4b20      	ldr	r3, [pc, #128]	; (4134 <_calendar_init+0x98>)
    40b2:	4798      	blx	r3

	_rtc_dev = dev;
    40b4:	4b20      	ldr	r3, [pc, #128]	; (4138 <_calendar_init+0x9c>)
    40b6:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    40b8:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    40ba:	691a      	ldr	r2, [r3, #16]
    40bc:	f012 0f01 	tst.w	r2, #1
    40c0:	d1fb      	bne.n	40ba <_calendar_init+0x1e>
    40c2:	f248 0103 	movw	r1, #32771	; 0x8003
    40c6:	691a      	ldr	r2, [r3, #16]
    40c8:	420a      	tst	r2, r1
    40ca:	d1fc      	bne.n	40c6 <_calendar_init+0x2a>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    40cc:	881a      	ldrh	r2, [r3, #0]
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    40ce:	f012 0f02 	tst.w	r2, #2
    40d2:	d00f      	beq.n	40f4 <_calendar_init+0x58>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    40d4:	881a      	ldrh	r2, [r3, #0]
    40d6:	f022 0202 	bic.w	r2, r2, #2
    40da:	0412      	lsls	r2, r2, #16
    40dc:	0c12      	lsrs	r2, r2, #16
    40de:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    40e0:	f248 0103 	movw	r1, #32771	; 0x8003
    40e4:	691a      	ldr	r2, [r3, #16]
    40e6:	420a      	tst	r2, r1
    40e8:	d1fc      	bne.n	40e4 <_calendar_init+0x48>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    40ea:	6822      	ldr	r2, [r4, #0]
    40ec:	6913      	ldr	r3, [r2, #16]
    40ee:	f013 0f02 	tst.w	r3, #2
    40f2:	d1fb      	bne.n	40ec <_calendar_init+0x50>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    40f4:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    40f6:	8813      	ldrh	r3, [r2, #0]
    40f8:	b29b      	uxth	r3, r3
    40fa:	f043 0301 	orr.w	r3, r3, #1
    40fe:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    4100:	6913      	ldr	r3, [r2, #16]
    4102:	f013 0f01 	tst.w	r3, #1
    4106:	d1fb      	bne.n	4100 <_calendar_init+0x64>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    4108:	6823      	ldr	r3, [r4, #0]
    410a:	691a      	ldr	r2, [r3, #16]
    410c:	f012 0f01 	tst.w	r2, #1
    4110:	d1fb      	bne.n	410a <_calendar_init+0x6e>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    4112:	f44f 420b 	mov.w	r2, #35584	; 0x8b00
    4116:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    4118:	f248 0103 	movw	r1, #32771	; 0x8003
    411c:	691a      	ldr	r2, [r3, #16]
    411e:	420a      	tst	r2, r1
    4120:	d1fc      	bne.n	411c <_calendar_init+0x80>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    4122:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    4124:	2000      	movs	r0, #0
    4126:	6618      	str	r0, [r3, #96]	; 0x60
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
}
    4128:	bd10      	pop	{r4, pc}
    412a:	2000      	movs	r0, #0
    412c:	e7be      	b.n	40ac <_calendar_init+0x10>
    412e:	bf00      	nop
    4130:	0000d9e0 	.word	0x0000d9e0
    4134:	00003565 	.word	0x00003565
    4138:	20001c54 	.word	0x20001c54

0000413c <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    413c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    413e:	4604      	mov	r4, r0
    4140:	b1a0      	cbz	r0, 416c <_calendar_enable+0x30>
    4142:	6800      	ldr	r0, [r0, #0]
    4144:	3000      	adds	r0, #0
    4146:	bf18      	it	ne
    4148:	2001      	movne	r0, #1
    414a:	2276      	movs	r2, #118	; 0x76
    414c:	4908      	ldr	r1, [pc, #32]	; (4170 <_calendar_enable+0x34>)
    414e:	4b09      	ldr	r3, [pc, #36]	; (4174 <_calendar_enable+0x38>)
    4150:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    4152:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    4154:	8813      	ldrh	r3, [r2, #0]
    4156:	b29b      	uxth	r3, r3
    4158:	f043 0302 	orr.w	r3, r3, #2
    415c:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    415e:	f248 0103 	movw	r1, #32771	; 0x8003
    4162:	6913      	ldr	r3, [r2, #16]
    4164:	420b      	tst	r3, r1
    4166:	d1fc      	bne.n	4162 <_calendar_enable+0x26>

	return ERR_NONE;
}
    4168:	2000      	movs	r0, #0
    416a:	bd10      	pop	{r4, pc}
    416c:	2000      	movs	r0, #0
    416e:	e7ec      	b.n	414a <_calendar_enable+0xe>
    4170:	0000d9e0 	.word	0x0000d9e0
    4174:	00003565 	.word	0x00003565

00004178 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    4178:	b538      	push	{r3, r4, r5, lr}
    417a:	460d      	mov	r5, r1
	ASSERT(dev && dev->hw);
    417c:	4604      	mov	r4, r0
    417e:	b178      	cbz	r0, 41a0 <_calendar_set_counter+0x28>
    4180:	6800      	ldr	r0, [r0, #0]
    4182:	3000      	adds	r0, #0
    4184:	bf18      	it	ne
    4186:	2001      	movne	r0, #1
    4188:	228e      	movs	r2, #142	; 0x8e
    418a:	4906      	ldr	r1, [pc, #24]	; (41a4 <_calendar_set_counter+0x2c>)
    418c:	4b06      	ldr	r3, [pc, #24]	; (41a8 <_calendar_set_counter+0x30>)
    418e:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    4190:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    4192:	6195      	str	r5, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    4194:	6913      	ldr	r3, [r2, #16]
    4196:	f013 0f08 	tst.w	r3, #8
    419a:	d1fb      	bne.n	4194 <_calendar_set_counter+0x1c>

	return ERR_NONE;
}
    419c:	2000      	movs	r0, #0
    419e:	bd38      	pop	{r3, r4, r5, pc}
    41a0:	2000      	movs	r0, #0
    41a2:	e7f1      	b.n	4188 <_calendar_set_counter+0x10>
    41a4:	0000d9e0 	.word	0x0000d9e0
    41a8:	00003565 	.word	0x00003565

000041ac <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    41ac:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    41ae:	4604      	mov	r4, r0
    41b0:	b170      	cbz	r0, 41d0 <_calendar_get_counter+0x24>
    41b2:	6800      	ldr	r0, [r0, #0]
    41b4:	3000      	adds	r0, #0
    41b6:	bf18      	it	ne
    41b8:	2001      	movne	r0, #1
    41ba:	229a      	movs	r2, #154	; 0x9a
    41bc:	4905      	ldr	r1, [pc, #20]	; (41d4 <_calendar_get_counter+0x28>)
    41be:	4b06      	ldr	r3, [pc, #24]	; (41d8 <_calendar_get_counter+0x2c>)
    41c0:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    41c2:	6822      	ldr	r2, [r4, #0]
    41c4:	6913      	ldr	r3, [r2, #16]
    41c6:	f013 0f08 	tst.w	r3, #8
    41ca:	d1fb      	bne.n	41c4 <_calendar_get_counter+0x18>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    41cc:	6990      	ldr	r0, [r2, #24]
}
    41ce:	bd10      	pop	{r4, pc}
    41d0:	2000      	movs	r0, #0
    41d2:	e7f2      	b.n	41ba <_calendar_get_counter+0xe>
    41d4:	0000d9e0 	.word	0x0000d9e0
    41d8:	00003565 	.word	0x00003565

000041dc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    41dc:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    41de:	4b0f      	ldr	r3, [pc, #60]	; (421c <RTC_Handler+0x40>)
    41e0:	681c      	ldr	r4, [r3, #0]
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    41e2:	6822      	ldr	r2, [r4, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    41e4:	8991      	ldrh	r1, [r2, #12]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    41e6:	8953      	ldrh	r3, [r2, #10]
    41e8:	b29b      	uxth	r3, r3
	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    41ea:	400b      	ands	r3, r1
    41ec:	f413 7f80 	tst.w	r3, #256	; 0x100
    41f0:	d103      	bne.n	41fa <RTC_Handler+0x1e>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    41f2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    41f6:	d108      	bne.n	420a <RTC_Handler+0x2e>
    41f8:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    41fa:	6863      	ldr	r3, [r4, #4]
    41fc:	4620      	mov	r0, r4
    41fe:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    4200:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    4202:	f44f 7280 	mov.w	r2, #256	; 0x100
    4206:	819a      	strh	r2, [r3, #12]
    4208:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    420a:	68a3      	ldr	r3, [r4, #8]
    420c:	4620      	mov	r0, r4
    420e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    4210:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    4212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4216:	819a      	strh	r2, [r3, #12]
}
    4218:	e7ee      	b.n	41f8 <RTC_Handler+0x1c>
    421a:	bf00      	nop
    421c:	20001c54 	.word	0x20001c54

00004220 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    4220:	b470      	push	{r4, r5, r6}
    4222:	b089      	sub	sp, #36	; 0x24
    4224:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    4226:	466c      	mov	r4, sp
    4228:	4d0d      	ldr	r5, [pc, #52]	; (4260 <_sercom_get_hardware_index+0x40>)
    422a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    422c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    422e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    4236:	9b00      	ldr	r3, [sp, #0]
    4238:	42b3      	cmp	r3, r6
    423a:	d00d      	beq.n	4258 <_sercom_get_hardware_index+0x38>
    423c:	4631      	mov	r1, r6
    423e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4240:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    4242:	f853 2b04 	ldr.w	r2, [r3], #4
    4246:	428a      	cmp	r2, r1
    4248:	d007      	beq.n	425a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    424a:	3001      	adds	r0, #1
    424c:	2808      	cmp	r0, #8
    424e:	d1f8      	bne.n	4242 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    4250:	2000      	movs	r0, #0
}
    4252:	b009      	add	sp, #36	; 0x24
    4254:	bc70      	pop	{r4, r5, r6}
    4256:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4258:	2000      	movs	r0, #0
			return i;
    425a:	b2c0      	uxtb	r0, r0
    425c:	e7f9      	b.n	4252 <_sercom_get_hardware_index+0x32>
    425e:	bf00      	nop
    4260:	0000d9f8 	.word	0x0000d9f8

00004264 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
    4264:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    4268:	d005      	beq.n	4276 <_sercom_init_irq_param+0x12>
		_sercom4_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM7) {
    426a:	4b04      	ldr	r3, [pc, #16]	; (427c <_sercom_init_irq_param+0x18>)
    426c:	4298      	cmp	r0, r3
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    426e:	bf04      	itt	eq
    4270:	4b03      	ldreq	r3, [pc, #12]	; (4280 <_sercom_init_irq_param+0x1c>)
    4272:	6059      	streq	r1, [r3, #4]
    4274:	4770      	bx	lr
		_sercom4_dev = (struct _spi_async_dev *)dev;
    4276:	4b02      	ldr	r3, [pc, #8]	; (4280 <_sercom_init_irq_param+0x1c>)
    4278:	6019      	str	r1, [r3, #0]
    427a:	4770      	bx	lr
    427c:	43000c00 	.word	0x43000c00
    4280:	20001c58 	.word	0x20001c58

00004284 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    4284:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    4286:	4b03      	ldr	r3, [pc, #12]	; (4294 <_sercom_get_irq_num+0x10>)
    4288:	4798      	blx	r3
    428a:	0080      	lsls	r0, r0, #2
    428c:	302e      	adds	r0, #46	; 0x2e
}
    428e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    4292:	bd08      	pop	{r3, pc}
    4294:	00004221 	.word	0x00004221

00004298 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4298:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    429a:	f013 0f01 	tst.w	r3, #1
    429e:	d109      	bne.n	42b4 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	f043 0302 	orr.w	r3, r3, #2
    42a6:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    42a8:	69c3      	ldr	r3, [r0, #28]
    42aa:	f013 0f03 	tst.w	r3, #3
    42ae:	d1fb      	bne.n	42a8 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    42b0:	2000      	movs	r0, #0
    42b2:	4770      	bx	lr
		return ERR_BUSY;
    42b4:	f06f 0003 	mvn.w	r0, #3
}
    42b8:	4770      	bx	lr

000042ba <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    42ba:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    42bc:	f013 0f01 	tst.w	r3, #1
    42c0:	d109      	bne.n	42d6 <_spi_sync_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    42c2:	6803      	ldr	r3, [r0, #0]
    42c4:	f023 0302 	bic.w	r3, r3, #2
    42c8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    42ca:	69c3      	ldr	r3, [r0, #28]
    42cc:	f013 0f03 	tst.w	r3, #3
    42d0:	d1fb      	bne.n	42ca <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    42d2:	2000      	movs	r0, #0
    42d4:	4770      	bx	lr
		return ERR_BUSY;
    42d6:	f06f 0003 	mvn.w	r0, #3
}
    42da:	4770      	bx	lr

000042dc <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    42dc:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    42de:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    42e0:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    42e2:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    42e4:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    42e6:	f013 0f01 	tst.w	r3, #1
    42ea:	d109      	bne.n	4300 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    42ec:	f013 0f04 	tst.w	r3, #4
    42f0:	d109      	bne.n	4306 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    42f2:	f013 0f02 	tst.w	r3, #2
    42f6:	d109      	bne.n	430c <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    42f8:	f013 0f80 	tst.w	r3, #128	; 0x80
    42fc:	d10b      	bne.n	4316 <_spi_handler+0x3a>
    42fe:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    4300:	6883      	ldr	r3, [r0, #8]
    4302:	4798      	blx	r3
    4304:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    4306:	68c3      	ldr	r3, [r0, #12]
    4308:	4798      	blx	r3
    430a:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    430c:	2302      	movs	r3, #2
    430e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    4310:	6903      	ldr	r3, [r0, #16]
    4312:	4798      	blx	r3
    4314:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    4316:	2304      	movs	r3, #4
    4318:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    431a:	2380      	movs	r3, #128	; 0x80
    431c:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    431e:	6943      	ldr	r3, [r0, #20]
    4320:	f06f 0112 	mvn.w	r1, #18
    4324:	4798      	blx	r3
	}
}
    4326:	e7ea      	b.n	42fe <_spi_handler+0x22>

00004328 <_get_i2cm_index>:
{
    4328:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    432a:	4b07      	ldr	r3, [pc, #28]	; (4348 <_get_i2cm_index+0x20>)
    432c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    432e:	2807      	cmp	r0, #7
    4330:	d008      	beq.n	4344 <_get_i2cm_index+0x1c>
	ASSERT(false);
    4332:	f240 32b2 	movw	r2, #946	; 0x3b2
    4336:	4905      	ldr	r1, [pc, #20]	; (434c <_get_i2cm_index+0x24>)
    4338:	2000      	movs	r0, #0
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <_get_i2cm_index+0x28>)
    433c:	4798      	blx	r3
	return -1;
    433e:	f04f 30ff 	mov.w	r0, #4294967295
}
    4342:	bd08      	pop	{r3, pc}
			return i;
    4344:	2000      	movs	r0, #0
    4346:	bd08      	pop	{r3, pc}
    4348:	00004221 	.word	0x00004221
    434c:	0000da54 	.word	0x0000da54
    4350:	00003565 	.word	0x00003565

00004354 <_i2c_m_sync_init_impl>:
{
    4354:	b538      	push	{r3, r4, r5, lr}
    4356:	4605      	mov	r5, r0
    4358:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    435a:	4608      	mov	r0, r1
    435c:	4b32      	ldr	r3, [pc, #200]	; (4428 <_i2c_m_sync_init_impl+0xd4>)
    435e:	4798      	blx	r3
    4360:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    4362:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    4364:	f013 0f01 	tst.w	r3, #1
    4368:	d122      	bne.n	43b0 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    436a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    436e:	4a2f      	ldr	r2, [pc, #188]	; (442c <_i2c_m_sync_init_impl+0xd8>)
    4370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4376:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    437a:	69e3      	ldr	r3, [r4, #28]
    437c:	f013 0f03 	tst.w	r3, #3
    4380:	d1fb      	bne.n	437a <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    4382:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    4384:	f013 0f02 	tst.w	r3, #2
    4388:	d00b      	beq.n	43a2 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    438a:	6823      	ldr	r3, [r4, #0]
    438c:	f023 0302 	bic.w	r3, r3, #2
    4390:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4392:	69e3      	ldr	r3, [r4, #28]
    4394:	f013 0f03 	tst.w	r3, #3
    4398:	d1fb      	bne.n	4392 <_i2c_m_sync_init_impl+0x3e>
    439a:	69e3      	ldr	r3, [r4, #28]
    439c:	f013 0f02 	tst.w	r3, #2
    43a0:	d1fb      	bne.n	439a <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    43a2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    43a6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    43a8:	69e3      	ldr	r3, [r4, #28]
    43aa:	f013 0f03 	tst.w	r3, #3
    43ae:	d1fb      	bne.n	43a8 <_i2c_m_sync_init_impl+0x54>
    43b0:	69e3      	ldr	r3, [r4, #28]
    43b2:	f013 0f01 	tst.w	r3, #1
    43b6:	d1fb      	bne.n	43b0 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    43b8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    43bc:	4a1b      	ldr	r2, [pc, #108]	; (442c <_i2c_m_sync_init_impl+0xd8>)
    43be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    43c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    43c4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    43c6:	69e3      	ldr	r3, [r4, #28]
    43c8:	f013 0f03 	tst.w	r3, #3
    43cc:	d1fb      	bne.n	43c6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    43ce:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    43d2:	4916      	ldr	r1, [pc, #88]	; (442c <_i2c_m_sync_init_impl+0xd8>)
    43d4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    43d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    43da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    43dc:	69e3      	ldr	r3, [r4, #28]
    43de:	f013 0f04 	tst.w	r3, #4
    43e2:	d1fb      	bne.n	43dc <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    43e4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    43e8:	4910      	ldr	r1, [pc, #64]	; (442c <_i2c_m_sync_init_impl+0xd8>)
    43ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    43ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    43f0:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    43f2:	f3c2 6301 	ubfx	r3, r2, #24, #2
    43f6:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    43f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    43fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    43fe:	2b01      	cmp	r3, #1
    4400:	bf94      	ite	ls
    4402:	2300      	movls	r3, #0
    4404:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    4406:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    440a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    440c:	69e3      	ldr	r3, [r4, #28]
    440e:	f013 0f04 	tst.w	r3, #4
    4412:	d1fb      	bne.n	440c <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    4414:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4418:	4b04      	ldr	r3, [pc, #16]	; (442c <_i2c_m_sync_init_impl+0xd8>)
    441a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    441e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    4420:	81eb      	strh	r3, [r5, #14]
}
    4422:	2000      	movs	r0, #0
    4424:	bd38      	pop	{r3, r4, r5, pc}
    4426:	bf00      	nop
    4428:	00004329 	.word	0x00004329
    442c:	0000d9f8 	.word	0x0000d9f8

00004430 <_sercom_i2c_m_irq_handler>:
{
    4430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4434:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    4436:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    4438:	7e26      	ldrb	r6, [r4, #24]
    443a:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    443c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4674 <_sercom_i2c_m_irq_handler+0x244>
    4440:	f240 4224 	movw	r2, #1060	; 0x424
    4444:	4641      	mov	r1, r8
    4446:	3000      	adds	r0, #0
    4448:	bf18      	it	ne
    444a:	2001      	movne	r0, #1
    444c:	4f88      	ldr	r7, [pc, #544]	; (4670 <_sercom_i2c_m_irq_handler+0x240>)
    444e:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    4450:	6928      	ldr	r0, [r5, #16]
    4452:	f240 4225 	movw	r2, #1061	; 0x425
    4456:	4641      	mov	r1, r8
    4458:	3000      	adds	r0, #0
    445a:	bf18      	it	ne
    445c:	2001      	movne	r0, #1
    445e:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    4460:	f016 0f80 	tst.w	r6, #128	; 0x80
    4464:	f040 80f6 	bne.w	4654 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    4468:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    446a:	69e3      	ldr	r3, [r4, #28]
    446c:	f013 0f04 	tst.w	r3, #4
    4470:	d1fb      	bne.n	446a <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    4472:	8b63      	ldrh	r3, [r4, #26]
    4474:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    4476:	f016 0f01 	tst.w	r6, #1
    447a:	f000 8092 	beq.w	45a2 <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    447e:	f013 0f02 	tst.w	r3, #2
    4482:	d024      	beq.n	44ce <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    4484:	2201      	movs	r2, #1
    4486:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    4488:	886a      	ldrh	r2, [r5, #2]
    448a:	b292      	uxth	r2, r2
    448c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    4490:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    4492:	886a      	ldrh	r2, [r5, #2]
    4494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    4498:	0412      	lsls	r2, r2, #16
    449a:	0c12      	lsrs	r2, r2, #16
    449c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    449e:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    44a2:	2b00      	cmp	r3, #0
    44a4:	bf14      	ite	ne
    44a6:	f06f 0104 	mvnne.w	r1, #4
    44aa:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    44ae:	886b      	ldrh	r3, [r5, #2]
    44b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    44b4:	041b      	lsls	r3, r3, #16
    44b6:	0c1b      	lsrs	r3, r3, #16
    44b8:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    44ba:	696b      	ldr	r3, [r5, #20]
    44bc:	2b00      	cmp	r3, #0
    44be:	f000 80c7 	beq.w	4650 <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    44c2:	4628      	mov	r0, r5
    44c4:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    44c6:	2380      	movs	r3, #128	; 0x80
    44c8:	7623      	strb	r3, [r4, #24]
    44ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    44ce:	f013 0f04 	tst.w	r3, #4
    44d2:	d124      	bne.n	451e <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    44d4:	886b      	ldrh	r3, [r5, #2]
    44d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    44da:	d03e      	beq.n	455a <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    44dc:	882b      	ldrh	r3, [r5, #0]
    44de:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    44e0:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    44e4:	69e3      	ldr	r3, [r4, #28]
    44e6:	f013 0f04 	tst.w	r3, #4
    44ea:	d1fb      	bne.n	44e4 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    44ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    44ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    44f2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    44f6:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    44f8:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    44fa:	69e3      	ldr	r3, [r4, #28]
    44fc:	f013 0f04 	tst.w	r3, #4
    4500:	d1fb      	bne.n	44fa <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    4502:	886b      	ldrh	r3, [r5, #2]
    4504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4508:	041b      	lsls	r3, r3, #16
    450a:	0c1b      	lsrs	r3, r3, #16
    450c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    450e:	69ab      	ldr	r3, [r5, #24]
    4510:	2b00      	cmp	r3, #0
    4512:	f000 8088 	beq.w	4626 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    4516:	4628      	mov	r0, r5
    4518:	4798      	blx	r3
    451a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    451e:	686b      	ldr	r3, [r5, #4]
    4520:	2b00      	cmp	r3, #0
    4522:	dd04      	ble.n	452e <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    4524:	886b      	ldrh	r3, [r5, #2]
    4526:	b29b      	uxth	r3, r3
    4528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    452c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    452e:	886b      	ldrh	r3, [r5, #2]
    4530:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4534:	d108      	bne.n	4548 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    4536:	886b      	ldrh	r3, [r5, #2]
    4538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    453c:	041b      	lsls	r3, r3, #16
    453e:	0c1b      	lsrs	r3, r3, #16
    4540:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    4542:	f06f 0101 	mvn.w	r1, #1
    4546:	e7b2      	b.n	44ae <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    4548:	6863      	ldr	r3, [r4, #4]
    454a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    454e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4550:	69e3      	ldr	r3, [r4, #28]
    4552:	f013 0f04 	tst.w	r3, #4
    4556:	d1fb      	bne.n	4550 <_sercom_i2c_m_irq_handler+0x120>
    4558:	e7ed      	b.n	4536 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    455a:	686b      	ldr	r3, [r5, #4]
    455c:	b99b      	cbnz	r3, 4586 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    455e:	886b      	ldrh	r3, [r5, #2]
    4560:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4564:	d106      	bne.n	4574 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    4566:	886b      	ldrh	r3, [r5, #2]
    4568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    456c:	041b      	lsls	r3, r3, #16
    456e:	0c1b      	lsrs	r3, r3, #16
    4570:	806b      	strh	r3, [r5, #2]
    4572:	e7cc      	b.n	450e <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    4574:	6863      	ldr	r3, [r4, #4]
    4576:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    457a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    457c:	69e3      	ldr	r3, [r4, #28]
    457e:	f013 0f04 	tst.w	r3, #4
    4582:	d1fb      	bne.n	457c <_sercom_i2c_m_irq_handler+0x14c>
    4584:	e7ef      	b.n	4566 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    4586:	68ab      	ldr	r3, [r5, #8]
    4588:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    458a:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    458c:	69e3      	ldr	r3, [r4, #28]
    458e:	f013 0f04 	tst.w	r3, #4
    4592:	d1fb      	bne.n	458c <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    4594:	68ab      	ldr	r3, [r5, #8]
    4596:	3301      	adds	r3, #1
    4598:	60ab      	str	r3, [r5, #8]
				msg->len--;
    459a:	686b      	ldr	r3, [r5, #4]
    459c:	3b01      	subs	r3, #1
    459e:	606b      	str	r3, [r5, #4]
    45a0:	e7b5      	b.n	450e <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    45a2:	f016 0f02 	tst.w	r6, #2
    45a6:	d041      	beq.n	462c <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    45a8:	686a      	ldr	r2, [r5, #4]
    45aa:	2a00      	cmp	r2, #0
    45ac:	d036      	beq.n	461c <_sercom_i2c_m_irq_handler+0x1ec>
    45ae:	f013 0f04 	tst.w	r3, #4
    45b2:	d133      	bne.n	461c <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    45b4:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    45b8:	3a01      	subs	r2, #1
    45ba:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    45bc:	2a00      	cmp	r2, #0
    45be:	d137      	bne.n	4630 <_sercom_i2c_m_irq_handler+0x200>
    45c0:	2900      	cmp	r1, #0
    45c2:	d039      	beq.n	4638 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    45c4:	886b      	ldrh	r3, [r5, #2]
    45c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    45ca:	d116      	bne.n	45fa <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    45cc:	886b      	ldrh	r3, [r5, #2]
    45ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    45d2:	041b      	lsls	r3, r3, #16
    45d4:	0c1b      	lsrs	r3, r3, #16
    45d6:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    45d8:	68aa      	ldr	r2, [r5, #8]
    45da:	1c53      	adds	r3, r2, #1
    45dc:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    45de:	69e3      	ldr	r3, [r4, #28]
    45e0:	f013 0f04 	tst.w	r3, #4
    45e4:	d1fb      	bne.n	45de <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    45e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    45e8:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    45ea:	2302      	movs	r3, #2
    45ec:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    45ee:	69eb      	ldr	r3, [r5, #28]
    45f0:	b1e3      	cbz	r3, 462c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    45f2:	4628      	mov	r0, r5
    45f4:	4798      	blx	r3
    45f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    45fa:	6863      	ldr	r3, [r4, #4]
    45fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4600:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4602:	69e3      	ldr	r3, [r4, #28]
    4604:	f013 0f04 	tst.w	r3, #4
    4608:	d1fb      	bne.n	4602 <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    460a:	6863      	ldr	r3, [r4, #4]
    460c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    4610:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4612:	69e3      	ldr	r3, [r4, #28]
    4614:	f013 0f04 	tst.w	r3, #4
    4618:	d1fb      	bne.n	4612 <_sercom_i2c_m_irq_handler+0x1e2>
    461a:	e7d7      	b.n	45cc <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    461c:	2302      	movs	r3, #2
    461e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    4620:	f06f 0101 	mvn.w	r1, #1
    4624:	e743      	b.n	44ae <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    4626:	f016 0f02 	tst.w	r6, #2
    462a:	d1e0      	bne.n	45ee <_sercom_i2c_m_irq_handler+0x1be>
    462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    4630:	2a01      	cmp	r2, #1
    4632:	d1d1      	bne.n	45d8 <_sercom_i2c_m_irq_handler+0x1a8>
    4634:	2900      	cmp	r1, #0
    4636:	d0cf      	beq.n	45d8 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4638:	6863      	ldr	r3, [r4, #4]
    463a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    463e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4640:	69e3      	ldr	r3, [r4, #28]
    4642:	f013 0f04 	tst.w	r3, #4
    4646:	d1fb      	bne.n	4640 <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    4648:	686b      	ldr	r3, [r5, #4]
    464a:	2b00      	cmp	r3, #0
    464c:	d0ba      	beq.n	45c4 <_sercom_i2c_m_irq_handler+0x194>
    464e:	e7c3      	b.n	45d8 <_sercom_i2c_m_irq_handler+0x1a8>
    4650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    4654:	886b      	ldrh	r3, [r5, #2]
    4656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    465a:	041b      	lsls	r3, r3, #16
    465c:	0c1b      	lsrs	r3, r3, #16
    465e:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    4660:	696b      	ldr	r3, [r5, #20]
    4662:	2b00      	cmp	r3, #0
    4664:	d0e2      	beq.n	462c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    4666:	f06f 0104 	mvn.w	r1, #4
    466a:	4628      	mov	r0, r5
    466c:	4798      	blx	r3
    466e:	e72a      	b.n	44c6 <_sercom_i2c_m_irq_handler+0x96>
    4670:	00003565 	.word	0x00003565
    4674:	0000da54 	.word	0x0000da54

00004678 <_i2c_m_async_enable>:
{
    4678:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    467a:	4e1b      	ldr	r6, [pc, #108]	; (46e8 <_i2c_m_async_enable+0x70>)
    467c:	4604      	mov	r4, r0
    467e:	f240 424a 	movw	r2, #1098	; 0x44a
    4682:	4631      	mov	r1, r6
    4684:	3000      	adds	r0, #0
    4686:	bf18      	it	ne
    4688:	2001      	movne	r0, #1
    468a:	4d18      	ldr	r5, [pc, #96]	; (46ec <_i2c_m_async_enable+0x74>)
    468c:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    468e:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    4690:	f240 623b 	movw	r2, #1595	; 0x63b
    4694:	4631      	mov	r1, r6
    4696:	1c20      	adds	r0, r4, #0
    4698:	bf18      	it	ne
    469a:	2001      	movne	r0, #1
    469c:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    469e:	6823      	ldr	r3, [r4, #0]
    46a0:	f043 0302 	orr.w	r3, r3, #2
    46a4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    46a6:	69e3      	ldr	r3, [r4, #28]
    46a8:	f013 0f03 	tst.w	r3, #3
    46ac:	d1fb      	bne.n	46a6 <_i2c_m_async_enable+0x2e>
    46ae:	2104      	movs	r1, #4
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    46b0:	2010      	movs	r0, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    46b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    46b6:	69e3      	ldr	r3, [r4, #28]
    46b8:	f013 0f04 	tst.w	r3, #4
    46bc:	d1fb      	bne.n	46b6 <_i2c_m_async_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    46be:	8b63      	ldrh	r3, [r4, #26]
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    46c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    46c4:	2b01      	cmp	r3, #1
    46c6:	d009      	beq.n	46dc <_i2c_m_async_enable+0x64>
		if (timeout <= 0) {
    46c8:	3a01      	subs	r2, #1
    46ca:	d1f4      	bne.n	46b6 <_i2c_m_async_enable+0x3e>
			if (--timeout_attempt)
    46cc:	3901      	subs	r1, #1
    46ce:	d007      	beq.n	46e0 <_i2c_m_async_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    46d0:	8360      	strh	r0, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    46d2:	69e3      	ldr	r3, [r4, #28]
    46d4:	f013 0f04 	tst.w	r3, #4
    46d8:	d1fb      	bne.n	46d2 <_i2c_m_async_enable+0x5a>
    46da:	e7ea      	b.n	46b2 <_i2c_m_async_enable+0x3a>
	return ERR_NONE;
    46dc:	2000      	movs	r0, #0
    46de:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    46e0:	f06f 0005 	mvn.w	r0, #5
}
    46e4:	bd70      	pop	{r4, r5, r6, pc}
    46e6:	bf00      	nop
    46e8:	0000da54 	.word	0x0000da54
    46ec:	00003565 	.word	0x00003565

000046f0 <_i2c_m_async_init>:
{
    46f0:	b570      	push	{r4, r5, r6, lr}
    46f2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    46f4:	4606      	mov	r6, r0
    46f6:	f44f 6293 	mov.w	r2, #1176	; 0x498
    46fa:	4918      	ldr	r1, [pc, #96]	; (475c <_i2c_m_async_init+0x6c>)
    46fc:	3000      	adds	r0, #0
    46fe:	bf18      	it	ne
    4700:	2001      	movne	r0, #1
    4702:	4b17      	ldr	r3, [pc, #92]	; (4760 <_i2c_m_async_init+0x70>)
    4704:	4798      	blx	r3
	i2c_dev->hw = hw;
    4706:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    4708:	4629      	mov	r1, r5
    470a:	4630      	mov	r0, r6
    470c:	4b15      	ldr	r3, [pc, #84]	; (4764 <_i2c_m_async_init+0x74>)
    470e:	4798      	blx	r3
	if (init_status) {
    4710:	4604      	mov	r4, r0
    4712:	b108      	cbz	r0, 4718 <_i2c_m_async_init+0x28>
}
    4714:	4620      	mov	r0, r4
    4716:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    4718:	4631      	mov	r1, r6
    471a:	4628      	mov	r0, r5
    471c:	4b12      	ldr	r3, [pc, #72]	; (4768 <_i2c_m_async_init+0x78>)
    471e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    4720:	4628      	mov	r0, r5
    4722:	4b12      	ldr	r3, [pc, #72]	; (476c <_i2c_m_async_init+0x7c>)
    4724:	4798      	blx	r3
    4726:	1d01      	adds	r1, r0, #4
    4728:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    472a:	2501      	movs	r5, #1
    472c:	f000 021f 	and.w	r2, r0, #31
    4730:	fa05 f202 	lsl.w	r2, r5, r2
    4734:	0943      	lsrs	r3, r0, #5
    4736:	009b      	lsls	r3, r3, #2
    4738:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    473c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4748:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    474c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4750:	601a      	str	r2, [r3, #0]
		irq++;
    4752:	3001      	adds	r0, #1
    4754:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    4756:	4281      	cmp	r1, r0
    4758:	d1e8      	bne.n	472c <_i2c_m_async_init+0x3c>
    475a:	e7db      	b.n	4714 <_i2c_m_async_init+0x24>
    475c:	0000da54 	.word	0x0000da54
    4760:	00003565 	.word	0x00003565
    4764:	00004355 	.word	0x00004355
    4768:	00004265 	.word	0x00004265
    476c:	00004285 	.word	0x00004285

00004770 <_i2c_m_async_transfer>:
{
    4770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4774:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    4776:	4605      	mov	r5, r0
    4778:	f110 0800 	adds.w	r8, r0, #0
    477c:	bf18      	it	ne
    477e:	f04f 0801 	movne.w	r8, #1
    4782:	4f45      	ldr	r7, [pc, #276]	; (4898 <_i2c_m_async_transfer+0x128>)
    4784:	f240 42ee 	movw	r2, #1262	; 0x4ee
    4788:	4639      	mov	r1, r7
    478a:	4640      	mov	r0, r8
    478c:	4e43      	ldr	r6, [pc, #268]	; (489c <_i2c_m_async_transfer+0x12c>)
    478e:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    4790:	6928      	ldr	r0, [r5, #16]
    4792:	f240 42ef 	movw	r2, #1263	; 0x4ef
    4796:	4639      	mov	r1, r7
    4798:	3000      	adds	r0, #0
    479a:	bf18      	it	ne
    479c:	2001      	movne	r0, #1
    479e:	47b0      	blx	r6
	ASSERT(msg);
    47a0:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    47a4:	4639      	mov	r1, r7
    47a6:	1c20      	adds	r0, r4, #0
    47a8:	bf18      	it	ne
    47aa:	2001      	movne	r0, #1
    47ac:	47b0      	blx	r6
	if (msg->len == 0) {
    47ae:	6860      	ldr	r0, [r4, #4]
    47b0:	2800      	cmp	r0, #0
    47b2:	d06f      	beq.n	4894 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    47b4:	886b      	ldrh	r3, [r5, #2]
    47b6:	f413 7f80 	tst.w	r3, #256	; 0x100
    47ba:	d169      	bne.n	4890 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    47bc:	8863      	ldrh	r3, [r4, #2]
    47be:	b29b      	uxth	r3, r3
    47c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    47c4:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    47c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    47ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    47ce:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    47d0:	6853      	ldr	r3, [r2, #4]
    47d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    47d6:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    47d8:	69d3      	ldr	r3, [r2, #28]
    47da:	f013 0f04 	tst.w	r3, #4
    47de:	d1fb      	bne.n	47d8 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    47e0:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    47e2:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    47e4:	f240 42c6 	movw	r2, #1222	; 0x4c6
    47e8:	492b      	ldr	r1, [pc, #172]	; (4898 <_i2c_m_async_transfer+0x128>)
    47ea:	4640      	mov	r0, r8
    47ec:	4b2b      	ldr	r3, [pc, #172]	; (489c <_i2c_m_async_transfer+0x12c>)
    47ee:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    47f0:	686b      	ldr	r3, [r5, #4]
    47f2:	2b01      	cmp	r3, #1
    47f4:	d02a      	beq.n	484c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    47f6:	6863      	ldr	r3, [r4, #4]
    47f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    47fc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    47fe:	69e3      	ldr	r3, [r4, #28]
    4800:	f013 0f04 	tst.w	r3, #4
    4804:	d1fb      	bne.n	47fe <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    4806:	882b      	ldrh	r3, [r5, #0]
    4808:	f413 6f80 	tst.w	r3, #1024	; 0x400
    480c:	d02a      	beq.n	4864 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    480e:	886a      	ldrh	r2, [r5, #2]
    4810:	f012 0f01 	tst.w	r2, #1
    4814:	d004      	beq.n	4820 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    4816:	886a      	ldrh	r2, [r5, #2]
    4818:	b292      	uxth	r2, r2
    481a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    481e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4820:	f240 72fe 	movw	r2, #2046	; 0x7fe
    4824:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    4828:	69e3      	ldr	r3, [r4, #28]
    482a:	f013 0f04 	tst.w	r3, #4
    482e:	d1fb      	bne.n	4828 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    4830:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    4836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    483a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    483c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    483e:	69e3      	ldr	r3, [r4, #28]
    4840:	f013 0f04 	tst.w	r3, #4
    4844:	d1fb      	bne.n	483e <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    4846:	2000      	movs	r0, #0
    4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    484c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    4850:	d0d1      	beq.n	47f6 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4852:	6863      	ldr	r3, [r4, #4]
    4854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    4858:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    485a:	69e3      	ldr	r3, [r4, #28]
    485c:	f013 0f04 	tst.w	r3, #4
    4860:	d1fb      	bne.n	485a <_i2c_m_async_transfer+0xea>
    4862:	e7d0      	b.n	4806 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    4864:	8869      	ldrh	r1, [r5, #2]
    4866:	005a      	lsls	r2, r3, #1
    4868:	b2d2      	uxtb	r2, r2
    486a:	f001 0301 	and.w	r3, r1, #1
    486e:	431a      	orrs	r2, r3
    4870:	69e3      	ldr	r3, [r4, #28]
    4872:	f013 0f04 	tst.w	r3, #4
    4876:	d1fb      	bne.n	4870 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    4878:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    487a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    487e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    4880:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4882:	69e3      	ldr	r3, [r4, #28]
    4884:	f013 0f04 	tst.w	r3, #4
    4888:	d1fb      	bne.n	4882 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    488a:	2000      	movs	r0, #0
    488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    4890:	f06f 0003 	mvn.w	r0, #3
}
    4894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4898:	0000da54 	.word	0x0000da54
    489c:	00003565 	.word	0x00003565

000048a0 <_i2c_m_async_register_callback>:
	switch (type) {
    48a0:	2901      	cmp	r1, #1
    48a2:	d006      	beq.n	48b2 <_i2c_m_async_register_callback+0x12>
    48a4:	b119      	cbz	r1, 48ae <_i2c_m_async_register_callback+0xe>
    48a6:	2902      	cmp	r1, #2
    48a8:	d005      	beq.n	48b6 <_i2c_m_async_register_callback+0x16>
}
    48aa:	2000      	movs	r0, #0
    48ac:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    48ae:	6142      	str	r2, [r0, #20]
		break;
    48b0:	e7fb      	b.n	48aa <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    48b2:	6182      	str	r2, [r0, #24]
		break;
    48b4:	e7f9      	b.n	48aa <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    48b6:	61c2      	str	r2, [r0, #28]
		break;
    48b8:	e7f7      	b.n	48aa <_i2c_m_async_register_callback+0xa>

000048ba <_i2c_m_async_set_irq_state>:
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    48ba:	1e4b      	subs	r3, r1, #1
    48bc:	b2db      	uxtb	r3, r3
    48be:	2b01      	cmp	r3, #1
    48c0:	d905      	bls.n	48ce <_i2c_m_async_set_irq_state+0x14>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    48c2:	b919      	cbnz	r1, 48cc <_i2c_m_async_set_irq_state+0x12>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    48c4:	6903      	ldr	r3, [r0, #16]
	if (value == 0x0) {
    48c6:	b182      	cbz	r2, 48ea <_i2c_m_async_set_irq_state+0x30>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    48c8:	2280      	movs	r2, #128	; 0x80
    48ca:	759a      	strb	r2, [r3, #22]
    48cc:	4770      	bx	lr
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    48ce:	6903      	ldr	r3, [r0, #16]
	if (value == 0x0) {
    48d0:	b92a      	cbnz	r2, 48de <_i2c_m_async_set_irq_state+0x24>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    48d2:	2202      	movs	r2, #2
    48d4:	751a      	strb	r2, [r3, #20]
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    48d6:	6903      	ldr	r3, [r0, #16]
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    48d8:	2201      	movs	r2, #1
    48da:	751a      	strb	r2, [r3, #20]
    48dc:	4770      	bx	lr
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    48de:	2202      	movs	r2, #2
    48e0:	759a      	strb	r2, [r3, #22]
    48e2:	6903      	ldr	r3, [r0, #16]
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    48e4:	2201      	movs	r2, #1
    48e6:	759a      	strb	r2, [r3, #22]
    48e8:	4770      	bx	lr
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    48ea:	2280      	movs	r2, #128	; 0x80
    48ec:	751a      	strb	r2, [r3, #20]
    48ee:	4770      	bx	lr

000048f0 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    48f0:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    48f2:	4b02      	ldr	r3, [pc, #8]	; (48fc <SERCOM4_0_Handler+0xc>)
    48f4:	6818      	ldr	r0, [r3, #0]
    48f6:	4b02      	ldr	r3, [pc, #8]	; (4900 <SERCOM4_0_Handler+0x10>)
    48f8:	4798      	blx	r3
    48fa:	bd08      	pop	{r3, pc}
    48fc:	20001c58 	.word	0x20001c58
    4900:	000042dd 	.word	0x000042dd

00004904 <SERCOM4_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    4904:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    4906:	4b02      	ldr	r3, [pc, #8]	; (4910 <SERCOM4_1_Handler+0xc>)
    4908:	6818      	ldr	r0, [r3, #0]
    490a:	4b02      	ldr	r3, [pc, #8]	; (4914 <SERCOM4_1_Handler+0x10>)
    490c:	4798      	blx	r3
    490e:	bd08      	pop	{r3, pc}
    4910:	20001c58 	.word	0x20001c58
    4914:	000042dd 	.word	0x000042dd

00004918 <SERCOM4_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    4918:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    491a:	4b02      	ldr	r3, [pc, #8]	; (4924 <SERCOM4_2_Handler+0xc>)
    491c:	6818      	ldr	r0, [r3, #0]
    491e:	4b02      	ldr	r3, [pc, #8]	; (4928 <SERCOM4_2_Handler+0x10>)
    4920:	4798      	blx	r3
    4922:	bd08      	pop	{r3, pc}
    4924:	20001c58 	.word	0x20001c58
    4928:	000042dd 	.word	0x000042dd

0000492c <SERCOM4_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    492c:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    492e:	4b02      	ldr	r3, [pc, #8]	; (4938 <SERCOM4_3_Handler+0xc>)
    4930:	6818      	ldr	r0, [r3, #0]
    4932:	4b02      	ldr	r3, [pc, #8]	; (493c <SERCOM4_3_Handler+0x10>)
    4934:	4798      	blx	r3
    4936:	bd08      	pop	{r3, pc}
    4938:	20001c58 	.word	0x20001c58
    493c:	000042dd 	.word	0x000042dd

00004940 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    4940:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    4942:	4b02      	ldr	r3, [pc, #8]	; (494c <SERCOM7_0_Handler+0xc>)
    4944:	6858      	ldr	r0, [r3, #4]
    4946:	4b02      	ldr	r3, [pc, #8]	; (4950 <SERCOM7_0_Handler+0x10>)
    4948:	4798      	blx	r3
    494a:	bd08      	pop	{r3, pc}
    494c:	20001c58 	.word	0x20001c58
    4950:	00004431 	.word	0x00004431

00004954 <SERCOM7_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    4954:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    4956:	4b02      	ldr	r3, [pc, #8]	; (4960 <SERCOM7_1_Handler+0xc>)
    4958:	6858      	ldr	r0, [r3, #4]
    495a:	4b02      	ldr	r3, [pc, #8]	; (4964 <SERCOM7_1_Handler+0x10>)
    495c:	4798      	blx	r3
    495e:	bd08      	pop	{r3, pc}
    4960:	20001c58 	.word	0x20001c58
    4964:	00004431 	.word	0x00004431

00004968 <SERCOM7_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    4968:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    496a:	4b02      	ldr	r3, [pc, #8]	; (4974 <SERCOM7_2_Handler+0xc>)
    496c:	6858      	ldr	r0, [r3, #4]
    496e:	4b02      	ldr	r3, [pc, #8]	; (4978 <SERCOM7_2_Handler+0x10>)
    4970:	4798      	blx	r3
    4972:	bd08      	pop	{r3, pc}
    4974:	20001c58 	.word	0x20001c58
    4978:	00004431 	.word	0x00004431

0000497c <SERCOM7_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    497c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    497e:	4b02      	ldr	r3, [pc, #8]	; (4988 <SERCOM7_3_Handler+0xc>)
    4980:	6858      	ldr	r0, [r3, #4]
    4982:	4b02      	ldr	r3, [pc, #8]	; (498c <SERCOM7_3_Handler+0x10>)
    4984:	4798      	blx	r3
    4986:	bd08      	pop	{r3, pc}
    4988:	20001c58 	.word	0x20001c58
    498c:	00004431 	.word	0x00004431

00004990 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    4990:	b570      	push	{r4, r5, r6, lr}
    4992:	4606      	mov	r6, r0
    4994:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    4996:	4608      	mov	r0, r1
    4998:	4b5d      	ldr	r3, [pc, #372]	; (4b10 <_spi_m_sync_init+0x180>)
    499a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    499c:	2804      	cmp	r0, #4
    499e:	d00c      	beq.n	49ba <_spi_m_sync_init+0x2a>
    49a0:	2806      	cmp	r0, #6
    49a2:	bf08      	it	eq
    49a4:	2301      	moveq	r3, #1
    49a6:	d009      	beq.n	49bc <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    49a8:	2e00      	cmp	r6, #0
    49aa:	f000 809f 	beq.w	4aec <_spi_m_sync_init+0x15c>
    49ae:	2c00      	cmp	r4, #0
    49b0:	f040 80a5 	bne.w	4afe <_spi_m_sync_init+0x16e>
	return NULL;
    49b4:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    49b6:	2000      	movs	r0, #0
    49b8:	e009      	b.n	49ce <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    49ba:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    49bc:	4d55      	ldr	r5, [pc, #340]	; (4b14 <_spi_m_sync_init+0x184>)
    49be:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    49c2:	441d      	add	r5, r3
	ASSERT(dev && hw);
    49c4:	2e00      	cmp	r6, #0
    49c6:	d0f6      	beq.n	49b6 <_spi_m_sync_init+0x26>
    49c8:	2001      	movs	r0, #1
    49ca:	2c00      	cmp	r4, #0
    49cc:	d0f3      	beq.n	49b6 <_spi_m_sync_init+0x26>
    49ce:	f640 12c6 	movw	r2, #2502	; 0x9c6
    49d2:	4951      	ldr	r1, [pc, #324]	; (4b18 <_spi_m_sync_init+0x188>)
    49d4:	4b51      	ldr	r3, [pc, #324]	; (4b1c <_spi_m_sync_init+0x18c>)
    49d6:	4798      	blx	r3

	if (regs == NULL) {
    49d8:	2d00      	cmp	r5, #0
    49da:	f000 8084 	beq.w	4ae6 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    49de:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    49e0:	f013 0f01 	tst.w	r3, #1
    49e4:	d11d      	bne.n	4a22 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    49e6:	682b      	ldr	r3, [r5, #0]
    49e8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    49ec:	69e3      	ldr	r3, [r4, #28]
    49ee:	f013 0f03 	tst.w	r3, #3
    49f2:	d1fb      	bne.n	49ec <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    49f4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    49f6:	f013 0f02 	tst.w	r3, #2
    49fa:	d00b      	beq.n	4a14 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    49fc:	6823      	ldr	r3, [r4, #0]
    49fe:	f023 0302 	bic.w	r3, r3, #2
    4a02:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4a04:	69e3      	ldr	r3, [r4, #28]
    4a06:	f013 0f03 	tst.w	r3, #3
    4a0a:	d1fb      	bne.n	4a04 <_spi_m_sync_init+0x74>
    4a0c:	69e3      	ldr	r3, [r4, #28]
    4a0e:	f013 0f02 	tst.w	r3, #2
    4a12:	d1fb      	bne.n	4a0c <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    4a14:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4a18:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4a1a:	69e3      	ldr	r3, [r4, #28]
    4a1c:	f013 0f03 	tst.w	r3, #3
    4a20:	d1fb      	bne.n	4a1a <_spi_m_sync_init+0x8a>
    4a22:	69e3      	ldr	r3, [r4, #28]
    4a24:	f013 0f01 	tst.w	r3, #1
    4a28:	d1fb      	bne.n	4a22 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    4a2a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    4a2c:	682b      	ldr	r3, [r5, #0]
    4a2e:	f003 031c 	and.w	r3, r3, #28
    4a32:	2b08      	cmp	r3, #8
    4a34:	d02e      	beq.n	4a94 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    4a36:	f640 123c 	movw	r2, #2364	; 0x93c
    4a3a:	4937      	ldr	r1, [pc, #220]	; (4b18 <_spi_m_sync_init+0x188>)
    4a3c:	1c20      	adds	r0, r4, #0
    4a3e:	bf18      	it	ne
    4a40:	2001      	movne	r0, #1
    4a42:	4b36      	ldr	r3, [pc, #216]	; (4b1c <_spi_m_sync_init+0x18c>)
    4a44:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    4a46:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    4a48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    4a4c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4a50:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4a52:	69e3      	ldr	r3, [r4, #28]
    4a54:	f013 0f03 	tst.w	r3, #3
    4a58:	d1fb      	bne.n	4a52 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    4a5a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    4a5c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    4a60:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    4a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    4a68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4a6a:	69e3      	ldr	r3, [r4, #28]
    4a6c:	f013 0f17 	tst.w	r3, #23
    4a70:	d1fb      	bne.n	4a6a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    4a72:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    4a74:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    4a76:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    4a78:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    4a7c:	686b      	ldr	r3, [r5, #4]
    4a7e:	f003 0307 	and.w	r3, r3, #7
    4a82:	2b00      	cmp	r3, #0
    4a84:	bf0c      	ite	eq
    4a86:	2301      	moveq	r3, #1
    4a88:	2302      	movne	r3, #2
    4a8a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    4a8c:	89eb      	ldrh	r3, [r5, #14]
    4a8e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    4a90:	2000      	movs	r0, #0
    4a92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    4a94:	f44f 6215 	mov.w	r2, #2384	; 0x950
    4a98:	491f      	ldr	r1, [pc, #124]	; (4b18 <_spi_m_sync_init+0x188>)
    4a9a:	1c20      	adds	r0, r4, #0
    4a9c:	bf18      	it	ne
    4a9e:	2001      	movne	r0, #1
    4aa0:	4b1e      	ldr	r3, [pc, #120]	; (4b1c <_spi_m_sync_init+0x18c>)
    4aa2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    4aa4:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    4aa6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    4aaa:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4aae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4ab0:	69e3      	ldr	r3, [r4, #28]
    4ab2:	f013 0f03 	tst.w	r3, #3
    4ab6:	d1fb      	bne.n	4ab0 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    4ab8:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    4aba:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    4abe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    4ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4ac6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    4aca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4acc:	69e3      	ldr	r3, [r4, #28]
    4ace:	f013 0f17 	tst.w	r3, #23
    4ad2:	d1fb      	bne.n	4acc <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    4ad4:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    4ad6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    4ad8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    4ada:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4ade:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d1fc      	bne.n	4ade <_spi_m_sync_init+0x14e>
    4ae4:	e7ca      	b.n	4a7c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    4ae6:	f06f 000c 	mvn.w	r0, #12
    4aea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    4aec:	f640 12c6 	movw	r2, #2502	; 0x9c6
    4af0:	4909      	ldr	r1, [pc, #36]	; (4b18 <_spi_m_sync_init+0x188>)
    4af2:	2000      	movs	r0, #0
    4af4:	4b09      	ldr	r3, [pc, #36]	; (4b1c <_spi_m_sync_init+0x18c>)
    4af6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    4af8:	f06f 000c 	mvn.w	r0, #12
    4afc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    4afe:	f640 12c6 	movw	r2, #2502	; 0x9c6
    4b02:	4905      	ldr	r1, [pc, #20]	; (4b18 <_spi_m_sync_init+0x188>)
    4b04:	2001      	movs	r0, #1
    4b06:	4b05      	ldr	r3, [pc, #20]	; (4b1c <_spi_m_sync_init+0x18c>)
    4b08:	4798      	blx	r3
		return ERR_INVALID_ARG;
    4b0a:	f06f 000c 	mvn.w	r0, #12
    4b0e:	bd70      	pop	{r4, r5, r6, pc}
    4b10:	00004221 	.word	0x00004221
    4b14:	0000da30 	.word	0x0000da30
    4b18:	0000da54 	.word	0x0000da54
    4b1c:	00003565 	.word	0x00003565

00004b20 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    4b20:	b538      	push	{r3, r4, r5, lr}
    4b22:	4604      	mov	r4, r0
    4b24:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    4b26:	4b15      	ldr	r3, [pc, #84]	; (4b7c <_spi_m_async_init+0x5c>)
    4b28:	4798      	blx	r3

	if (rc < 0) {
    4b2a:	2800      	cmp	r0, #0
    4b2c:	db24      	blt.n	4b78 <_spi_m_async_init+0x58>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    4b2e:	4621      	mov	r1, r4
    4b30:	4628      	mov	r0, r5
    4b32:	4b13      	ldr	r3, [pc, #76]	; (4b80 <_spi_m_async_init+0x60>)
    4b34:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    4b36:	2300      	movs	r3, #0
    4b38:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    4b3a:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    4b3c:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    4b3e:	4628      	mov	r0, r5
    4b40:	4b10      	ldr	r3, [pc, #64]	; (4b84 <_spi_m_async_init+0x64>)
    4b42:	4798      	blx	r3
    4b44:	1d01      	adds	r1, r0, #4
    4b46:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b48:	2401      	movs	r4, #1
    4b4a:	f000 021f 	and.w	r2, r0, #31
    4b4e:	fa04 f202 	lsl.w	r2, r4, r2
    4b52:	0943      	lsrs	r3, r0, #5
    4b54:	009b      	lsls	r3, r3, #2
    4b56:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4b5a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4b62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b66:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b6a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    4b6e:	3001      	adds	r0, #1
    4b70:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    4b72:	4281      	cmp	r1, r0
    4b74:	d1e9      	bne.n	4b4a <_spi_m_async_init+0x2a>
	}

	return ERR_NONE;
    4b76:	2000      	movs	r0, #0
}
    4b78:	bd38      	pop	{r3, r4, r5, pc}
    4b7a:	bf00      	nop
    4b7c:	00004991 	.word	0x00004991
    4b80:	00004265 	.word	0x00004265
    4b84:	00004285 	.word	0x00004285

00004b88 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    4b88:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    4b8a:	4604      	mov	r4, r0
    4b8c:	b160      	cbz	r0, 4ba8 <_spi_m_sync_enable+0x20>
    4b8e:	6800      	ldr	r0, [r0, #0]
    4b90:	3000      	adds	r0, #0
    4b92:	bf18      	it	ne
    4b94:	2001      	movne	r0, #1
    4b96:	f640 2225 	movw	r2, #2597	; 0xa25
    4b9a:	4904      	ldr	r1, [pc, #16]	; (4bac <_spi_m_sync_enable+0x24>)
    4b9c:	4b04      	ldr	r3, [pc, #16]	; (4bb0 <_spi_m_sync_enable+0x28>)
    4b9e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    4ba0:	6820      	ldr	r0, [r4, #0]
    4ba2:	4b04      	ldr	r3, [pc, #16]	; (4bb4 <_spi_m_sync_enable+0x2c>)
    4ba4:	4798      	blx	r3
}
    4ba6:	bd10      	pop	{r4, pc}
    4ba8:	2000      	movs	r0, #0
    4baa:	e7f4      	b.n	4b96 <_spi_m_sync_enable+0xe>
    4bac:	0000da54 	.word	0x0000da54
    4bb0:	00003565 	.word	0x00003565
    4bb4:	00004299 	.word	0x00004299

00004bb8 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    4bb8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    4bba:	4604      	mov	r4, r0
    4bbc:	b160      	cbz	r0, 4bd8 <_spi_m_sync_disable+0x20>
    4bbe:	6800      	ldr	r0, [r0, #0]
    4bc0:	3000      	adds	r0, #0
    4bc2:	bf18      	it	ne
    4bc4:	2001      	movne	r0, #1
    4bc6:	f640 2241 	movw	r2, #2625	; 0xa41
    4bca:	4904      	ldr	r1, [pc, #16]	; (4bdc <_spi_m_sync_disable+0x24>)
    4bcc:	4b04      	ldr	r3, [pc, #16]	; (4be0 <_spi_m_sync_disable+0x28>)
    4bce:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    4bd0:	6820      	ldr	r0, [r4, #0]
    4bd2:	4b04      	ldr	r3, [pc, #16]	; (4be4 <_spi_m_sync_disable+0x2c>)
    4bd4:	4798      	blx	r3
}
    4bd6:	bd10      	pop	{r4, pc}
    4bd8:	2000      	movs	r0, #0
    4bda:	e7f4      	b.n	4bc6 <_spi_m_sync_disable+0xe>
    4bdc:	0000da54 	.word	0x0000da54
    4be0:	00003565 	.word	0x00003565
    4be4:	000042bb 	.word	0x000042bb

00004be8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    4be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4bec:	4681      	mov	r9, r0
    4bee:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    4bf0:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    4bf2:	f8d1 8000 	ldr.w	r8, [r1]
    4bf6:	684d      	ldr	r5, [r1, #4]
    4bf8:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    4bfa:	b1a8      	cbz	r0, 4c28 <_spi_m_sync_trans+0x40>
    4bfc:	1c20      	adds	r0, r4, #0
    4bfe:	bf18      	it	ne
    4c00:	2001      	movne	r0, #1
    4c02:	f640 322a 	movw	r2, #2858	; 0xb2a
    4c06:	492e      	ldr	r1, [pc, #184]	; (4cc0 <_spi_m_sync_trans+0xd8>)
    4c08:	4b2e      	ldr	r3, [pc, #184]	; (4cc4 <_spi_m_sync_trans+0xdc>)
    4c0a:	4798      	blx	r3
    4c0c:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    4c0e:	f013 0f07 	tst.w	r3, #7
    4c12:	d134      	bne.n	4c7e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4c14:	69e0      	ldr	r0, [r4, #28]
    4c16:	f010 0003 	ands.w	r0, r0, #3
    4c1a:	d1fb      	bne.n	4c14 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    4c1c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    4c1e:	f013 0f02 	tst.w	r3, #2
    4c22:	d030      	beq.n	4c86 <_spi_m_sync_trans+0x9e>
    4c24:	4602      	mov	r2, r0
    4c26:	e008      	b.n	4c3a <_spi_m_sync_trans+0x52>
    4c28:	2000      	movs	r0, #0
    4c2a:	e7ea      	b.n	4c02 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    4c2c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    4c2e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4c32:	d112      	bne.n	4c5a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    4c34:	68b3      	ldr	r3, [r6, #8]
    4c36:	4283      	cmp	r3, r0
    4c38:	d91e      	bls.n	4c78 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    4c3a:	7e23      	ldrb	r3, [r4, #24]
    4c3c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    4c3e:	f013 0f04 	tst.w	r3, #4
    4c42:	d024      	beq.n	4c8e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    4c44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    4c46:	2d00      	cmp	r5, #0
    4c48:	d0f0      	beq.n	4c2c <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    4c4a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    4c4c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    4c4e:	bf91      	iteee	ls
    4c50:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    4c52:	0a09      	lsrhi	r1, r1, #8
    4c54:	7069      	strbhi	r1, [r5, #1]
    4c56:	3502      	addhi	r5, #2
    4c58:	e7e8      	b.n	4c2c <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    4c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4c5e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    4c60:	2380      	movs	r3, #128	; 0x80
    4c62:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    4c64:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    4c68:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    4c6a:	f013 0f03 	tst.w	r3, #3
    4c6e:	d0fb      	beq.n	4c68 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    4c70:	2303      	movs	r3, #3
    4c72:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    4c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    4c78:	4293      	cmp	r3, r2
    4c7a:	d8de      	bhi.n	4c3a <_spi_m_sync_trans+0x52>
    4c7c:	e7f4      	b.n	4c68 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    4c7e:	f06f 0003 	mvn.w	r0, #3
    4c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    4c86:	f06f 0013 	mvn.w	r0, #19
    4c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    4c8e:	4290      	cmp	r0, r2
    4c90:	d8cd      	bhi.n	4c2e <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    4c92:	f013 0f01 	tst.w	r3, #1
    4c96:	d0ca      	beq.n	4c2e <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    4c98:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    4c9c:	f1b8 0f00 	cmp.w	r8, #0
    4ca0:	d00b      	beq.n	4cba <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    4ca2:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    4ca6:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    4ca8:	bf91      	iteee	ls
    4caa:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    4cae:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    4cb2:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    4cb6:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    4cba:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    4cbc:	62a1      	str	r1, [r4, #40]	; 0x28
    4cbe:	e7b6      	b.n	4c2e <_spi_m_sync_trans+0x46>
    4cc0:	0000da54 	.word	0x0000da54
    4cc4:	00003565 	.word	0x00003565

00004cc8 <_spi_m_async_enable_tx>:
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    4cc8:	b538      	push	{r3, r4, r5, lr}
    4cca:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    4ccc:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    4cce:	b160      	cbz	r0, 4cea <_spi_m_async_enable_tx+0x22>
    4cd0:	1c20      	adds	r0, r4, #0
    4cd2:	bf18      	it	ne
    4cd4:	2001      	movne	r0, #1
    4cd6:	f640 3256 	movw	r2, #2902	; 0xb56
    4cda:	4906      	ldr	r1, [pc, #24]	; (4cf4 <_spi_m_async_enable_tx+0x2c>)
    4cdc:	4b06      	ldr	r3, [pc, #24]	; (4cf8 <_spi_m_async_enable_tx+0x30>)
    4cde:	4798      	blx	r3

	if (state) {
    4ce0:	b92d      	cbnz	r5, 4cee <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    4ce2:	2301      	movs	r3, #1
    4ce4:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    4ce6:	2000      	movs	r0, #0
    4ce8:	bd38      	pop	{r3, r4, r5, pc}
    4cea:	2000      	movs	r0, #0
    4cec:	e7f3      	b.n	4cd6 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    4cee:	2301      	movs	r3, #1
    4cf0:	75a3      	strb	r3, [r4, #22]
    4cf2:	e7f8      	b.n	4ce6 <_spi_m_async_enable_tx+0x1e>
    4cf4:	0000da54 	.word	0x0000da54
    4cf8:	00003565 	.word	0x00003565

00004cfc <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    4cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cfe:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    4d00:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    4d02:	4e0c      	ldr	r6, [pc, #48]	; (4d34 <_spi_m_async_enable_rx+0x38>)
    4d04:	f640 326a 	movw	r2, #2922	; 0xb6a
    4d08:	4631      	mov	r1, r6
    4d0a:	3000      	adds	r0, #0
    4d0c:	bf18      	it	ne
    4d0e:	2001      	movne	r0, #1
    4d10:	4d09      	ldr	r5, [pc, #36]	; (4d38 <_spi_m_async_enable_rx+0x3c>)
    4d12:	47a8      	blx	r5
	ASSERT(hw);
    4d14:	f640 326b 	movw	r2, #2923	; 0xb6b
    4d18:	4631      	mov	r1, r6
    4d1a:	1c20      	adds	r0, r4, #0
    4d1c:	bf18      	it	ne
    4d1e:	2001      	movne	r0, #1
    4d20:	47a8      	blx	r5

	if (state) {
    4d22:	b91f      	cbnz	r7, 4d2c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    4d24:	2304      	movs	r3, #4
    4d26:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    4d28:	2000      	movs	r0, #0
    4d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    4d2c:	2304      	movs	r3, #4
    4d2e:	75a3      	strb	r3, [r4, #22]
    4d30:	e7fa      	b.n	4d28 <_spi_m_async_enable_rx+0x2c>
    4d32:	bf00      	nop
    4d34:	0000da54 	.word	0x0000da54
    4d38:	00003565 	.word	0x00003565

00004d3c <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    4d3c:	b538      	push	{r3, r4, r5, lr}
    4d3e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    4d40:	4604      	mov	r4, r0
    4d42:	b170      	cbz	r0, 4d62 <_spi_m_async_enable_tx_complete+0x26>
    4d44:	6800      	ldr	r0, [r0, #0]
    4d46:	3000      	adds	r0, #0
    4d48:	bf18      	it	ne
    4d4a:	2001      	movne	r0, #1
    4d4c:	f640 327d 	movw	r2, #2941	; 0xb7d
    4d50:	4907      	ldr	r1, [pc, #28]	; (4d70 <_spi_m_async_enable_tx_complete+0x34>)
    4d52:	4b08      	ldr	r3, [pc, #32]	; (4d74 <_spi_m_async_enable_tx_complete+0x38>)
    4d54:	4798      	blx	r3

	if (state) {
    4d56:	b935      	cbnz	r5, 4d66 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    4d58:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    4d5a:	2202      	movs	r2, #2
    4d5c:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    4d5e:	2000      	movs	r0, #0
    4d60:	bd38      	pop	{r3, r4, r5, pc}
    4d62:	2000      	movs	r0, #0
    4d64:	e7f2      	b.n	4d4c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    4d66:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    4d68:	2202      	movs	r2, #2
    4d6a:	759a      	strb	r2, [r3, #22]
    4d6c:	e7f7      	b.n	4d5e <_spi_m_async_enable_tx_complete+0x22>
    4d6e:	bf00      	nop
    4d70:	0000da54 	.word	0x0000da54
    4d74:	00003565 	.word	0x00003565

00004d78 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    4d78:	b538      	push	{r3, r4, r5, lr}
    4d7a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    4d7c:	4604      	mov	r4, r0
    4d7e:	b160      	cbz	r0, 4d9a <_spi_m_async_write_one+0x22>
    4d80:	6800      	ldr	r0, [r0, #0]
    4d82:	3000      	adds	r0, #0
    4d84:	bf18      	it	ne
    4d86:	2001      	movne	r0, #1
    4d88:	f640 328f 	movw	r2, #2959	; 0xb8f
    4d8c:	4904      	ldr	r1, [pc, #16]	; (4da0 <_spi_m_async_write_one+0x28>)
    4d8e:	4b05      	ldr	r3, [pc, #20]	; (4da4 <_spi_m_async_write_one+0x2c>)
    4d90:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    4d92:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    4d94:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    4d96:	2000      	movs	r0, #0
    4d98:	bd38      	pop	{r3, r4, r5, pc}
    4d9a:	2000      	movs	r0, #0
    4d9c:	e7f4      	b.n	4d88 <_spi_m_async_write_one+0x10>
    4d9e:	bf00      	nop
    4da0:	0000da54 	.word	0x0000da54
    4da4:	00003565 	.word	0x00003565

00004da8 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    4da8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    4daa:	4604      	mov	r4, r0
    4dac:	b160      	cbz	r0, 4dc8 <_spi_m_async_read_one+0x20>
    4dae:	6800      	ldr	r0, [r0, #0]
    4db0:	3000      	adds	r0, #0
    4db2:	bf18      	it	ne
    4db4:	2001      	movne	r0, #1
    4db6:	f640 32aa 	movw	r2, #2986	; 0xbaa
    4dba:	4904      	ldr	r1, [pc, #16]	; (4dcc <_spi_m_async_read_one+0x24>)
    4dbc:	4b04      	ldr	r3, [pc, #16]	; (4dd0 <_spi_m_async_read_one+0x28>)
    4dbe:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    4dc0:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    4dc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    4dc4:	b280      	uxth	r0, r0
    4dc6:	bd10      	pop	{r4, pc}
    4dc8:	2000      	movs	r0, #0
    4dca:	e7f4      	b.n	4db6 <_spi_m_async_read_one+0xe>
    4dcc:	0000da54 	.word	0x0000da54
    4dd0:	00003565 	.word	0x00003565

00004dd4 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    4dd4:	b570      	push	{r4, r5, r6, lr}
    4dd6:	460d      	mov	r5, r1
    4dd8:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    4dda:	4604      	mov	r4, r0
    4ddc:	b168      	cbz	r0, 4dfa <_spi_m_async_register_callback+0x26>
    4dde:	2903      	cmp	r1, #3
    4de0:	bf8c      	ite	hi
    4de2:	2000      	movhi	r0, #0
    4de4:	2001      	movls	r0, #1
    4de6:	f640 32c3 	movw	r2, #3011	; 0xbc3
    4dea:	4905      	ldr	r1, [pc, #20]	; (4e00 <_spi_m_async_register_callback+0x2c>)
    4dec:	4b05      	ldr	r3, [pc, #20]	; (4e04 <_spi_m_async_register_callback+0x30>)
    4dee:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    4df0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    4df4:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    4df6:	2000      	movs	r0, #0
    4df8:	bd70      	pop	{r4, r5, r6, pc}
    4dfa:	2000      	movs	r0, #0
    4dfc:	e7f3      	b.n	4de6 <_spi_m_async_register_callback+0x12>
    4dfe:	bf00      	nop
    4e00:	0000da54 	.word	0x0000da54
    4e04:	00003565 	.word	0x00003565

00004e08 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4e08:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4e0a:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4e0c:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4e0e:	f012 0f01 	tst.w	r2, #1
    4e12:	d100      	bne.n	4e16 <tc_interrupt_handler+0xe>
    4e14:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    4e16:	2201      	movs	r2, #1
    4e18:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    4e1a:	6803      	ldr	r3, [r0, #0]
    4e1c:	4798      	blx	r3
	}
}
    4e1e:	e7f9      	b.n	4e14 <tc_interrupt_handler+0xc>

00004e20 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    4e20:	4b0e      	ldr	r3, [pc, #56]	; (4e5c <_tc_init_irq_param+0x3c>)
    4e22:	4298      	cmp	r0, r3
    4e24:	d00e      	beq.n	4e44 <_tc_init_irq_param+0x24>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC1) {
    4e26:	4b0e      	ldr	r3, [pc, #56]	; (4e60 <_tc_init_irq_param+0x40>)
    4e28:	4298      	cmp	r0, r3
    4e2a:	d00e      	beq.n	4e4a <_tc_init_irq_param+0x2a>
		_tc1_dev = (struct _timer_device *)dev;
	}
	if (hw == TC2) {
    4e2c:	4b0d      	ldr	r3, [pc, #52]	; (4e64 <_tc_init_irq_param+0x44>)
    4e2e:	4298      	cmp	r0, r3
    4e30:	d00e      	beq.n	4e50 <_tc_init_irq_param+0x30>
		_tc2_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
    4e32:	4b0d      	ldr	r3, [pc, #52]	; (4e68 <_tc_init_irq_param+0x48>)
    4e34:	4298      	cmp	r0, r3
    4e36:	d00e      	beq.n	4e56 <_tc_init_irq_param+0x36>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC7) {
    4e38:	4b0c      	ldr	r3, [pc, #48]	; (4e6c <_tc_init_irq_param+0x4c>)
    4e3a:	4298      	cmp	r0, r3
		_tc7_dev = (struct _pwm_device *)dev;
    4e3c:	bf04      	itt	eq
    4e3e:	4b0c      	ldreq	r3, [pc, #48]	; (4e70 <_tc_init_irq_param+0x50>)
    4e40:	6119      	streq	r1, [r3, #16]
    4e42:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    4e44:	4b0a      	ldr	r3, [pc, #40]	; (4e70 <_tc_init_irq_param+0x50>)
    4e46:	6019      	str	r1, [r3, #0]
    4e48:	e7f3      	b.n	4e32 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _timer_device *)dev;
    4e4a:	4b09      	ldr	r3, [pc, #36]	; (4e70 <_tc_init_irq_param+0x50>)
    4e4c:	6059      	str	r1, [r3, #4]
    4e4e:	e7f3      	b.n	4e38 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _timer_device *)dev;
    4e50:	4b07      	ldr	r3, [pc, #28]	; (4e70 <_tc_init_irq_param+0x50>)
    4e52:	6099      	str	r1, [r3, #8]
    4e54:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    4e56:	4b06      	ldr	r3, [pc, #24]	; (4e70 <_tc_init_irq_param+0x50>)
    4e58:	60d9      	str	r1, [r3, #12]
    4e5a:	4770      	bx	lr
    4e5c:	40003800 	.word	0x40003800
    4e60:	40003c00 	.word	0x40003c00
    4e64:	4101a000 	.word	0x4101a000
    4e68:	4101c000 	.word	0x4101c000
    4e6c:	43001800 	.word	0x43001800
    4e70:	20001c60 	.word	0x20001c60

00004e74 <get_tc_index>:
{
    4e74:	b570      	push	{r4, r5, r6, lr}
    4e76:	b088      	sub	sp, #32
    4e78:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4e7a:	466c      	mov	r4, sp
    4e7c:	4d19      	ldr	r5, [pc, #100]	; (4ee4 <get_tc_index+0x70>)
    4e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4e82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    4e8a:	9b00      	ldr	r3, [sp, #0]
    4e8c:	42b3      	cmp	r3, r6
    4e8e:	d022      	beq.n	4ed6 <get_tc_index+0x62>
    4e90:	4630      	mov	r0, r6
    4e92:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4e94:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    4e96:	f852 1b04 	ldr.w	r1, [r2], #4
    4e9a:	4281      	cmp	r1, r0
    4e9c:	d01c      	beq.n	4ed8 <get_tc_index+0x64>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4e9e:	3301      	adds	r3, #1
    4ea0:	2b08      	cmp	r3, #8
    4ea2:	d1f8      	bne.n	4e96 <get_tc_index+0x22>
			return i;
		}
	}
	return 0;
    4ea4:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    4ea6:	4a10      	ldr	r2, [pc, #64]	; (4ee8 <get_tc_index+0x74>)
    4ea8:	7812      	ldrb	r2, [r2, #0]
    4eaa:	429a      	cmp	r2, r3
    4eac:	d016      	beq.n	4edc <get_tc_index+0x68>
    4eae:	4a0e      	ldr	r2, [pc, #56]	; (4ee8 <get_tc_index+0x74>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4eb0:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    4eb2:	7d11      	ldrb	r1, [r2, #20]
    4eb4:	4299      	cmp	r1, r3
    4eb6:	d012      	beq.n	4ede <get_tc_index+0x6a>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4eb8:	3001      	adds	r0, #1
    4eba:	b2c0      	uxtb	r0, r0
    4ebc:	3214      	adds	r2, #20
    4ebe:	2805      	cmp	r0, #5
    4ec0:	d1f7      	bne.n	4eb2 <get_tc_index+0x3e>
	ASSERT(false);
    4ec2:	f240 2206 	movw	r2, #518	; 0x206
    4ec6:	4909      	ldr	r1, [pc, #36]	; (4eec <get_tc_index+0x78>)
    4ec8:	2000      	movs	r0, #0
    4eca:	4b09      	ldr	r3, [pc, #36]	; (4ef0 <get_tc_index+0x7c>)
    4ecc:	4798      	blx	r3
	return -1;
    4ece:	f04f 30ff 	mov.w	r0, #4294967295
}
    4ed2:	b008      	add	sp, #32
    4ed4:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4ed6:	2300      	movs	r3, #0
			return i;
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	e7e4      	b.n	4ea6 <get_tc_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4edc:	2000      	movs	r0, #0
			return i;
    4ede:	b240      	sxtb	r0, r0
    4ee0:	e7f7      	b.n	4ed2 <get_tc_index+0x5e>
    4ee2:	bf00      	nop
    4ee4:	0000da70 	.word	0x0000da70
    4ee8:	20000064 	.word	0x20000064
    4eec:	0000da90 	.word	0x0000da90
    4ef0:	00003565 	.word	0x00003565

00004ef4 <_timer_init>:
{
    4ef4:	b570      	push	{r4, r5, r6, lr}
    4ef6:	4606      	mov	r6, r0
    4ef8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    4efa:	4608      	mov	r0, r1
    4efc:	4b66      	ldr	r3, [pc, #408]	; (5098 <_timer_init+0x1a4>)
    4efe:	4798      	blx	r3
    4f00:	4605      	mov	r5, r0
	device->hw = hw;
    4f02:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4f04:	2295      	movs	r2, #149	; 0x95
    4f06:	4965      	ldr	r1, [pc, #404]	; (509c <_timer_init+0x1a8>)
    4f08:	2001      	movs	r0, #1
    4f0a:	4b65      	ldr	r3, [pc, #404]	; (50a0 <_timer_init+0x1ac>)
    4f0c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    4f0e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    4f10:	f013 0f01 	tst.w	r3, #1
    4f14:	d119      	bne.n	4f4a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4f16:	6923      	ldr	r3, [r4, #16]
    4f18:	f013 0f03 	tst.w	r3, #3
    4f1c:	d1fb      	bne.n	4f16 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4f1e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    4f20:	f013 0f02 	tst.w	r3, #2
    4f24:	d00b      	beq.n	4f3e <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4f26:	6823      	ldr	r3, [r4, #0]
    4f28:	f023 0302 	bic.w	r3, r3, #2
    4f2c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4f2e:	6923      	ldr	r3, [r4, #16]
    4f30:	f013 0f03 	tst.w	r3, #3
    4f34:	d1fb      	bne.n	4f2e <_timer_init+0x3a>
    4f36:	6923      	ldr	r3, [r4, #16]
    4f38:	f013 0f02 	tst.w	r3, #2
    4f3c:	d1fb      	bne.n	4f36 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4f3e:	2301      	movs	r3, #1
    4f40:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4f42:	6923      	ldr	r3, [r4, #16]
    4f44:	f013 0f03 	tst.w	r3, #3
    4f48:	d1fb      	bne.n	4f42 <_timer_init+0x4e>
    4f4a:	6923      	ldr	r3, [r4, #16]
    4f4c:	f013 0f01 	tst.w	r3, #1
    4f50:	d1fb      	bne.n	4f4a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4f52:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4f56:	4a53      	ldr	r2, [pc, #332]	; (50a4 <_timer_init+0x1b0>)
    4f58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f5c:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4f5e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4f60:	6923      	ldr	r3, [r4, #16]
    4f62:	f013 0f03 	tst.w	r3, #3
    4f66:	d1fb      	bne.n	4f60 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4f68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4f6c:	4a4d      	ldr	r2, [pc, #308]	; (50a4 <_timer_init+0x1b0>)
    4f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f72:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    4f74:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4f76:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    4f78:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4f7a:	2201      	movs	r2, #1
    4f7c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4f7e:	685b      	ldr	r3, [r3, #4]
    4f80:	f003 030c 	and.w	r3, r3, #12
    4f84:	2b08      	cmp	r3, #8
    4f86:	d04c      	beq.n	5022 <_timer_init+0x12e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d161      	bne.n	5050 <_timer_init+0x15c>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    4f8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4f90:	4a44      	ldr	r2, [pc, #272]	; (50a4 <_timer_init+0x1b0>)
    4f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f96:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4f98:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4f9a:	6923      	ldr	r3, [r4, #16]
    4f9c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4fa0:	d1fb      	bne.n	4f9a <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    4fa2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4fa6:	4a3f      	ldr	r2, [pc, #252]	; (50a4 <_timer_init+0x1b0>)
    4fa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4fac:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4fae:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4fb0:	6923      	ldr	r3, [r4, #16]
    4fb2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4fb6:	d1fb      	bne.n	4fb0 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    4fb8:	2301      	movs	r3, #1
    4fba:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    4fbc:	4631      	mov	r1, r6
    4fbe:	4620      	mov	r0, r4
    4fc0:	4b39      	ldr	r3, [pc, #228]	; (50a8 <_timer_init+0x1b4>)
    4fc2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4fc4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4fc8:	4a36      	ldr	r2, [pc, #216]	; (50a4 <_timer_init+0x1b0>)
    4fca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4fce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	db23      	blt.n	501e <_timer_init+0x12a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4fd6:	095a      	lsrs	r2, r3, #5
    4fd8:	f003 031f 	and.w	r3, r3, #31
    4fdc:	2101      	movs	r1, #1
    4fde:	fa01 f303 	lsl.w	r3, r1, r3
    4fe2:	3220      	adds	r2, #32
    4fe4:	4931      	ldr	r1, [pc, #196]	; (50ac <_timer_init+0x1b8>)
    4fe6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fee:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4ff2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4ff6:	4b2b      	ldr	r3, [pc, #172]	; (50a4 <_timer_init+0x1b0>)
    4ff8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4ffc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    5000:	2b00      	cmp	r3, #0
    5002:	db0c      	blt.n	501e <_timer_init+0x12a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5004:	0959      	lsrs	r1, r3, #5
    5006:	f003 031f 	and.w	r3, r3, #31
    500a:	2201      	movs	r2, #1
    500c:	fa02 f303 	lsl.w	r3, r2, r3
    5010:	4a26      	ldr	r2, [pc, #152]	; (50ac <_timer_init+0x1b8>)
    5012:	f101 0060 	add.w	r0, r1, #96	; 0x60
    5016:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    501a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    501e:	2000      	movs	r0, #0
    5020:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    5022:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5026:	4a1f      	ldr	r2, [pc, #124]	; (50a4 <_timer_init+0x1b0>)
    5028:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    502c:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    502e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5030:	6923      	ldr	r3, [r4, #16]
    5032:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5036:	d1fb      	bne.n	5030 <_timer_init+0x13c>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    5038:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    503c:	4a19      	ldr	r2, [pc, #100]	; (50a4 <_timer_init+0x1b0>)
    503e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5042:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    5044:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5046:	6923      	ldr	r3, [r4, #16]
    5048:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    504c:	d1fb      	bne.n	5046 <_timer_init+0x152>
    504e:	e7b3      	b.n	4fb8 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    5050:	2b04      	cmp	r3, #4
    5052:	d1b1      	bne.n	4fb8 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    5054:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5058:	4a12      	ldr	r2, [pc, #72]	; (50a4 <_timer_init+0x1b0>)
    505a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    505e:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    5060:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5062:	6923      	ldr	r3, [r4, #16]
    5064:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5068:	d1fb      	bne.n	5062 <_timer_init+0x16e>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    506a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    506e:	4a0d      	ldr	r2, [pc, #52]	; (50a4 <_timer_init+0x1b0>)
    5070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5074:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    5076:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5078:	6923      	ldr	r3, [r4, #16]
    507a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    507e:	d1fb      	bne.n	5078 <_timer_init+0x184>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    5080:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5084:	4a07      	ldr	r2, [pc, #28]	; (50a4 <_timer_init+0x1b0>)
    5086:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    508a:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    508c:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    508e:	6923      	ldr	r3, [r4, #16]
    5090:	f013 0f20 	tst.w	r3, #32
    5094:	d1fb      	bne.n	508e <_timer_init+0x19a>
    5096:	e78f      	b.n	4fb8 <_timer_init+0xc4>
    5098:	00004e75 	.word	0x00004e75
    509c:	0000da90 	.word	0x0000da90
    50a0:	00003565 	.word	0x00003565
    50a4:	20000064 	.word	0x20000064
    50a8:	00004e21 	.word	0x00004e21
    50ac:	e000e100 	.word	0xe000e100

000050b0 <_pwm_init>:
{
    50b0:	b570      	push	{r4, r5, r6, lr}
    50b2:	4606      	mov	r6, r0
    50b4:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    50b6:	4608      	mov	r0, r1
    50b8:	4b54      	ldr	r3, [pc, #336]	; (520c <_pwm_init+0x15c>)
    50ba:	4798      	blx	r3
    50bc:	4605      	mov	r5, r0
	device->hw = hw;
    50be:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    50c0:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    50c2:	f013 0f01 	tst.w	r3, #1
    50c6:	d119      	bne.n	50fc <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    50c8:	6923      	ldr	r3, [r4, #16]
    50ca:	f013 0f03 	tst.w	r3, #3
    50ce:	d1fb      	bne.n	50c8 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    50d0:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    50d2:	f013 0f02 	tst.w	r3, #2
    50d6:	d00b      	beq.n	50f0 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    50d8:	6823      	ldr	r3, [r4, #0]
    50da:	f023 0302 	bic.w	r3, r3, #2
    50de:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    50e0:	6923      	ldr	r3, [r4, #16]
    50e2:	f013 0f03 	tst.w	r3, #3
    50e6:	d1fb      	bne.n	50e0 <_pwm_init+0x30>
    50e8:	6923      	ldr	r3, [r4, #16]
    50ea:	f013 0f02 	tst.w	r3, #2
    50ee:	d1fb      	bne.n	50e8 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    50f0:	2301      	movs	r3, #1
    50f2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    50f4:	6923      	ldr	r3, [r4, #16]
    50f6:	f013 0f03 	tst.w	r3, #3
    50fa:	d1fb      	bne.n	50f4 <_pwm_init+0x44>
    50fc:	6923      	ldr	r3, [r4, #16]
    50fe:	f013 0f01 	tst.w	r3, #1
    5102:	d1fb      	bne.n	50fc <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    5104:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5108:	4a41      	ldr	r2, [pc, #260]	; (5210 <_pwm_init+0x160>)
    510a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    510e:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5110:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5112:	6923      	ldr	r3, [r4, #16]
    5114:	f013 0f03 	tst.w	r3, #3
    5118:	d1fb      	bne.n	5112 <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    511a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    511e:	4a3c      	ldr	r2, [pc, #240]	; (5210 <_pwm_init+0x160>)
    5120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5124:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    5126:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    5128:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    512a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    512c:	2203      	movs	r2, #3
    512e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    5130:	685b      	ldr	r3, [r3, #4]
    5132:	f003 030c 	and.w	r3, r3, #12
    5136:	2b08      	cmp	r3, #8
    5138:	d04a      	beq.n	51d0 <_pwm_init+0x120>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    513a:	2b00      	cmp	r3, #0
    513c:	d15f      	bne.n	51fe <_pwm_init+0x14e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    513e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5142:	4a33      	ldr	r2, [pc, #204]	; (5210 <_pwm_init+0x160>)
    5144:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5148:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    514a:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    514c:	6923      	ldr	r3, [r4, #16]
    514e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5152:	d1fb      	bne.n	514c <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    5154:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5158:	4a2d      	ldr	r2, [pc, #180]	; (5210 <_pwm_init+0x160>)
    515a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    515e:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5160:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5162:	6923      	ldr	r3, [r4, #16]
    5164:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5168:	d1fb      	bne.n	5162 <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    516a:	4631      	mov	r1, r6
    516c:	4620      	mov	r0, r4
    516e:	4b29      	ldr	r3, [pc, #164]	; (5214 <_pwm_init+0x164>)
    5170:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    5172:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5176:	4a26      	ldr	r2, [pc, #152]	; (5210 <_pwm_init+0x160>)
    5178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    517c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    5180:	2b00      	cmp	r3, #0
    5182:	db3f      	blt.n	5204 <_pwm_init+0x154>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5184:	095a      	lsrs	r2, r3, #5
    5186:	f003 031f 	and.w	r3, r3, #31
    518a:	2101      	movs	r1, #1
    518c:	fa01 f303 	lsl.w	r3, r1, r3
    5190:	3220      	adds	r2, #32
    5192:	4921      	ldr	r1, [pc, #132]	; (5218 <_pwm_init+0x168>)
    5194:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5198:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    519c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    51a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    51a4:	4b1a      	ldr	r3, [pc, #104]	; (5210 <_pwm_init+0x160>)
    51a6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    51aa:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    51ae:	2b00      	cmp	r3, #0
    51b0:	db2a      	blt.n	5208 <_pwm_init+0x158>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51b2:	0959      	lsrs	r1, r3, #5
    51b4:	f003 031f 	and.w	r3, r3, #31
    51b8:	2201      	movs	r2, #1
    51ba:	fa02 f303 	lsl.w	r3, r2, r3
    51be:	4a16      	ldr	r2, [pc, #88]	; (5218 <_pwm_init+0x168>)
    51c0:	f101 0060 	add.w	r0, r1, #96	; 0x60
    51c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    51cc:	2000      	movs	r0, #0
    51ce:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    51d0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    51d4:	4a0e      	ldr	r2, [pc, #56]	; (5210 <_pwm_init+0x160>)
    51d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    51da:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    51dc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    51de:	6923      	ldr	r3, [r4, #16]
    51e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    51e4:	d1fb      	bne.n	51de <_pwm_init+0x12e>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    51e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    51ea:	4a09      	ldr	r2, [pc, #36]	; (5210 <_pwm_init+0x160>)
    51ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    51f0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    51f2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    51f4:	6923      	ldr	r3, [r4, #16]
    51f6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    51fa:	d1fb      	bne.n	51f4 <_pwm_init+0x144>
    51fc:	e7b5      	b.n	516a <_pwm_init+0xba>
		return -1;
    51fe:	f04f 30ff 	mov.w	r0, #4294967295
    5202:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    5204:	2000      	movs	r0, #0
    5206:	bd70      	pop	{r4, r5, r6, pc}
    5208:	2000      	movs	r0, #0
}
    520a:	bd70      	pop	{r4, r5, r6, pc}
    520c:	00004e75 	.word	0x00004e75
    5210:	20000064 	.word	0x20000064
    5214:	00004e21 	.word	0x00004e21
    5218:	e000e100 	.word	0xe000e100

0000521c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    521c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    521e:	6813      	ldr	r3, [r2, #0]
    5220:	f043 0302 	orr.w	r3, r3, #2
    5224:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5226:	6913      	ldr	r3, [r2, #16]
    5228:	f013 0f03 	tst.w	r3, #3
    522c:	d1fb      	bne.n	5226 <_timer_start+0xa>
}
    522e:	4770      	bx	lr

00005230 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    5230:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    5232:	6813      	ldr	r3, [r2, #0]
    5234:	f043 0302 	orr.w	r3, r3, #2
    5238:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    523a:	6913      	ldr	r3, [r2, #16]
    523c:	f013 0f03 	tst.w	r3, #3
    5240:	d1fb      	bne.n	523a <_pwm_enable+0xa>
}
    5242:	4770      	bx	lr

00005244 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    5244:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5246:	6813      	ldr	r3, [r2, #0]
    5248:	f023 0302 	bic.w	r3, r3, #2
    524c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    524e:	6913      	ldr	r3, [r2, #16]
    5250:	f013 0f03 	tst.w	r3, #3
    5254:	d1fb      	bne.n	524e <_timer_stop+0xa>
}
    5256:	4770      	bx	lr

00005258 <_timer_get_period>:
	void *const hw = device->hw;
    5258:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    525a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    525c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    5260:	2a02      	cmp	r2, #2
    5262:	d00a      	beq.n	527a <_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5264:	681a      	ldr	r2, [r3, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    5266:	f012 0f0c 	tst.w	r2, #12
    526a:	d10c      	bne.n	5286 <_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    526c:	691a      	ldr	r2, [r3, #16]
    526e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    5272:	d1fb      	bne.n	526c <_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    5274:	8b98      	ldrh	r0, [r3, #28]
    5276:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    5278:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    527a:	691a      	ldr	r2, [r3, #16]
    527c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    5280:	d1fb      	bne.n	527a <_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    5282:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    5284:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5286:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    5288:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    528c:	2a01      	cmp	r2, #1
    528e:	d001      	beq.n	5294 <_timer_get_period+0x3c>
	return 0;
    5290:	2000      	movs	r0, #0
}
    5292:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5294:	691a      	ldr	r2, [r3, #16]
    5296:	f012 0f20 	tst.w	r2, #32
    529a:	d1fb      	bne.n	5294 <_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    529c:	7ed8      	ldrb	r0, [r3, #27]
    529e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    52a0:	4770      	bx	lr

000052a2 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    52a2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    52a4:	6913      	ldr	r3, [r2, #16]
    52a6:	f013 0f03 	tst.w	r3, #3
    52aa:	d1fb      	bne.n	52a4 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    52ac:	6810      	ldr	r0, [r2, #0]
}
    52ae:	f3c0 0040 	ubfx	r0, r0, #1, #1
    52b2:	4770      	bx	lr

000052b4 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    52b4:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    52b6:	6913      	ldr	r3, [r2, #16]
    52b8:	f013 0f03 	tst.w	r3, #3
    52bc:	d1fb      	bne.n	52b6 <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    52be:	6810      	ldr	r0, [r2, #0]
}
    52c0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    52c4:	4770      	bx	lr

000052c6 <_tc_get_timer>:
}
    52c6:	2000      	movs	r0, #0
    52c8:	4770      	bx	lr

000052ca <_tc_get_pwm>:
}
    52ca:	2000      	movs	r0, #0
    52cc:	4770      	bx	lr
	...

000052d0 <_timer_set_irq>:
{
    52d0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    52d2:	68c0      	ldr	r0, [r0, #12]
    52d4:	4b08      	ldr	r3, [pc, #32]	; (52f8 <_timer_set_irq+0x28>)
    52d6:	4798      	blx	r3
    52d8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    52da:	f240 12a3 	movw	r2, #419	; 0x1a3
    52de:	4907      	ldr	r1, [pc, #28]	; (52fc <_timer_set_irq+0x2c>)
    52e0:	2001      	movs	r0, #1
    52e2:	4b07      	ldr	r3, [pc, #28]	; (5300 <_timer_set_irq+0x30>)
    52e4:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    52e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    52ea:	4b06      	ldr	r3, [pc, #24]	; (5304 <_timer_set_irq+0x34>)
    52ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    52f0:	78a0      	ldrb	r0, [r4, #2]
    52f2:	4b05      	ldr	r3, [pc, #20]	; (5308 <_timer_set_irq+0x38>)
    52f4:	4798      	blx	r3
    52f6:	bd10      	pop	{r4, pc}
    52f8:	00004e75 	.word	0x00004e75
    52fc:	0000da90 	.word	0x0000da90
    5300:	00003565 	.word	0x00003565
    5304:	20000064 	.word	0x20000064
    5308:	00003795 	.word	0x00003795

0000530c <TC0_Handler>:
{
    530c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    530e:	4b02      	ldr	r3, [pc, #8]	; (5318 <TC0_Handler+0xc>)
    5310:	6818      	ldr	r0, [r3, #0]
    5312:	4b02      	ldr	r3, [pc, #8]	; (531c <TC0_Handler+0x10>)
    5314:	4798      	blx	r3
    5316:	bd08      	pop	{r3, pc}
    5318:	20001c60 	.word	0x20001c60
    531c:	00004e09 	.word	0x00004e09

00005320 <TC1_Handler>:
{
    5320:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    5322:	4b02      	ldr	r3, [pc, #8]	; (532c <TC1_Handler+0xc>)
    5324:	6858      	ldr	r0, [r3, #4]
    5326:	4b02      	ldr	r3, [pc, #8]	; (5330 <TC1_Handler+0x10>)
    5328:	4798      	blx	r3
    532a:	bd08      	pop	{r3, pc}
    532c:	20001c60 	.word	0x20001c60
    5330:	00004e09 	.word	0x00004e09

00005334 <TC2_Handler>:
{
    5334:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    5336:	4b02      	ldr	r3, [pc, #8]	; (5340 <TC2_Handler+0xc>)
    5338:	6898      	ldr	r0, [r3, #8]
    533a:	4b02      	ldr	r3, [pc, #8]	; (5344 <TC2_Handler+0x10>)
    533c:	4798      	blx	r3
    533e:	bd08      	pop	{r3, pc}
    5340:	20001c60 	.word	0x20001c60
    5344:	00004e09 	.word	0x00004e09

00005348 <TC3_Handler>:
{
    5348:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    534a:	4b02      	ldr	r3, [pc, #8]	; (5354 <TC3_Handler+0xc>)
    534c:	68d8      	ldr	r0, [r3, #12]
    534e:	4b02      	ldr	r3, [pc, #8]	; (5358 <TC3_Handler+0x10>)
    5350:	4798      	blx	r3
    5352:	bd08      	pop	{r3, pc}
    5354:	20001c60 	.word	0x20001c60
    5358:	00004e09 	.word	0x00004e09

0000535c <TC7_Handler>:
{
    535c:	b538      	push	{r3, r4, r5, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    535e:	4b0c      	ldr	r3, [pc, #48]	; (5390 <TC7_Handler+0x34>)
    5360:	691d      	ldr	r5, [r3, #16]
	void *const hw = device->hw;
    5362:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    5364:	7aa3      	ldrb	r3, [r4, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    5366:	f013 0f01 	tst.w	r3, #1
    536a:	d005      	beq.n	5378 <TC7_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    536c:	2301      	movs	r3, #1
    536e:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_period_cb) {
    5370:	682b      	ldr	r3, [r5, #0]
    5372:	b10b      	cbz	r3, 5378 <TC7_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    5374:	4628      	mov	r0, r5
    5376:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    5378:	7a63      	ldrb	r3, [r4, #9]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    537a:	f013 0f02 	tst.w	r3, #2
    537e:	d005      	beq.n	538c <TC7_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    5380:	2302      	movs	r3, #2
    5382:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_error_cb) {
    5384:	686b      	ldr	r3, [r5, #4]
    5386:	b10b      	cbz	r3, 538c <TC7_Handler+0x30>
			device->callback.pwm_error_cb(device);
    5388:	4628      	mov	r0, r5
    538a:	4798      	blx	r3
    538c:	bd38      	pop	{r3, r4, r5, pc}
    538e:	bf00      	nop
    5390:	20001c60 	.word	0x20001c60

00005394 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    5394:	2000      	movs	r0, #0
    5396:	4770      	bx	lr

00005398 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    5398:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    539a:	7c83      	ldrb	r3, [r0, #18]
    539c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    53a0:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    53a2:	f002 0107 	and.w	r1, r2, #7
    53a6:	2901      	cmp	r1, #1
    53a8:	d00b      	beq.n	53c2 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    53aa:	015a      	lsls	r2, r3, #5
    53ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    53b0:	2110      	movs	r1, #16
    53b2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    53b6:	015b      	lsls	r3, r3, #5
    53b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    53bc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    53c0:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    53c2:	f012 0f40 	tst.w	r2, #64	; 0x40
    53c6:	d00c      	beq.n	53e2 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    53c8:	7cc2      	ldrb	r2, [r0, #19]
    53ca:	f36f 1286 	bfc	r2, #6, #1
    53ce:	74c2      	strb	r2, [r0, #19]
    53d0:	015a      	lsls	r2, r3, #5
    53d2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    53d6:	2180      	movs	r1, #128	; 0x80
    53d8:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    53dc:	2140      	movs	r1, #64	; 0x40
    53de:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    53e2:	7cc2      	ldrb	r2, [r0, #19]
    53e4:	f36f 02c3 	bfc	r2, #3, #1
    53e8:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    53ea:	490a      	ldr	r1, [pc, #40]	; (5414 <_usb_d_dev_handle_setup+0x7c>)
    53ec:	015a      	lsls	r2, r3, #5
    53ee:	188c      	adds	r4, r1, r2
    53f0:	2500      	movs	r5, #0
    53f2:	72a5      	strb	r5, [r4, #10]
    53f4:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    53f6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    53fa:	246f      	movs	r4, #111	; 0x6f
    53fc:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5400:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5404:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    5408:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    540c:	7c80      	ldrb	r0, [r0, #18]
    540e:	4798      	blx	r3
    5410:	bd38      	pop	{r3, r4, r5, pc}
    5412:	bf00      	nop
    5414:	20001c74 	.word	0x20001c74

00005418 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5418:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    541a:	2320      	movs	r3, #32
    541c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    5420:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5422:	7c83      	ldrb	r3, [r0, #18]
    5424:	f003 030f 	and.w	r3, r3, #15
    5428:	015b      	lsls	r3, r3, #5
    542a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    542e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    5432:	4b04      	ldr	r3, [pc, #16]	; (5444 <_usb_d_dev_handle_stall+0x2c>)
    5434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    5438:	6882      	ldr	r2, [r0, #8]
    543a:	2101      	movs	r1, #1
    543c:	7c80      	ldrb	r0, [r0, #18]
    543e:	4798      	blx	r3
    5440:	bd08      	pop	{r3, pc}
    5442:	bf00      	nop
    5444:	20001c74 	.word	0x20001c74

00005448 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    5448:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    544a:	7c84      	ldrb	r4, [r0, #18]
    544c:	2cff      	cmp	r4, #255	; 0xff
    544e:	d003      	beq.n	5458 <_usb_d_dev_trans_done+0x10>
    5450:	7cc3      	ldrb	r3, [r0, #19]
    5452:	f013 0f40 	tst.w	r3, #64	; 0x40
    5456:	d100      	bne.n	545a <_usb_d_dev_trans_done+0x12>
    5458:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    545a:	7cc2      	ldrb	r2, [r0, #19]
    545c:	f36f 1286 	bfc	r2, #6, #1
    5460:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    5462:	4a03      	ldr	r2, [pc, #12]	; (5470 <_usb_d_dev_trans_done+0x28>)
    5464:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
    5468:	6882      	ldr	r2, [r0, #8]
    546a:	4620      	mov	r0, r4
    546c:	47a8      	blx	r5
    546e:	e7f3      	b.n	5458 <_usb_d_dev_trans_done+0x10>
    5470:	20001c74 	.word	0x20001c74

00005474 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    5474:	b530      	push	{r4, r5, lr}
    5476:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5478:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    547a:	2425      	movs	r4, #37	; 0x25
    547c:	f88d 4004 	strb.w	r4, [sp, #4]
    5480:	244a      	movs	r4, #74	; 0x4a
    5482:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    5486:	2bff      	cmp	r3, #255	; 0xff
    5488:	d01e      	beq.n	54c8 <_usb_d_dev_trans_stop+0x54>
    548a:	7cc4      	ldrb	r4, [r0, #19]
    548c:	f014 0f40 	tst.w	r4, #64	; 0x40
    5490:	d01a      	beq.n	54c8 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5492:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    5496:	b1c9      	cbz	r1, 54cc <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5498:	0163      	lsls	r3, r4, #5
    549a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    549e:	2580      	movs	r5, #128	; 0x80
    54a0:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    54a4:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    54a6:	a902      	add	r1, sp, #8
    54a8:	440b      	add	r3, r1
    54aa:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    54ae:	0163      	lsls	r3, r4, #5
    54b0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    54b4:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    54b8:	0163      	lsls	r3, r4, #5
    54ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    54be:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    54c2:	4611      	mov	r1, r2
    54c4:	4b05      	ldr	r3, [pc, #20]	; (54dc <_usb_d_dev_trans_stop+0x68>)
    54c6:	4798      	blx	r3
}
    54c8:	b003      	add	sp, #12
    54ca:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    54cc:	0163      	lsls	r3, r4, #5
    54ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    54d2:	2540      	movs	r5, #64	; 0x40
    54d4:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    54d8:	e7e4      	b.n	54a4 <_usb_d_dev_trans_stop+0x30>
    54da:	bf00      	nop
    54dc:	00005449 	.word	0x00005449

000054e0 <_usb_d_dev_handle_trfail>:
{
    54e0:	b530      	push	{r4, r5, lr}
    54e2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    54e4:	7c83      	ldrb	r3, [r0, #18]
    54e6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    54ea:	2204      	movs	r2, #4
    54ec:	f88d 2004 	strb.w	r2, [sp, #4]
    54f0:	2208      	movs	r2, #8
    54f2:	f88d 2005 	strb.w	r2, [sp, #5]
    54f6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    54f8:	460c      	mov	r4, r1
    54fa:	b391      	cbz	r1, 5562 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    54fc:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    5500:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    5504:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    5508:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    550c:	4a32      	ldr	r2, [pc, #200]	; (55d8 <_usb_d_dev_handle_trfail+0xf8>)
    550e:	440a      	add	r2, r1
    5510:	7a91      	ldrb	r1, [r2, #10]
    5512:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    5514:	2d02      	cmp	r5, #2
    5516:	d02c      	beq.n	5572 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    5518:	f011 0f02 	tst.w	r1, #2
    551c:	d045      	beq.n	55aa <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    551e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    5520:	7a91      	ldrb	r1, [r2, #10]
    5522:	f36f 0141 	bfc	r1, #1, #1
    5526:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5528:	aa02      	add	r2, sp, #8
    552a:	4422      	add	r2, r4
    552c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5530:	015a      	lsls	r2, r3, #5
    5532:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5536:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    553a:	015b      	lsls	r3, r3, #5
    553c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5540:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    5544:	f005 0307 	and.w	r3, r5, #7
    5548:	2b01      	cmp	r3, #1
    554a:	d143      	bne.n	55d4 <_usb_d_dev_handle_trfail+0xf4>
    554c:	7cc3      	ldrb	r3, [r0, #19]
    554e:	f013 0f40 	tst.w	r3, #64	; 0x40
    5552:	d03f      	beq.n	55d4 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    5554:	09d9      	lsrs	r1, r3, #7
    5556:	428c      	cmp	r4, r1
    5558:	d03c      	beq.n	55d4 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    555a:	2200      	movs	r2, #0
    555c:	4b1f      	ldr	r3, [pc, #124]	; (55dc <_usb_d_dev_handle_trfail+0xfc>)
    555e:	4798      	blx	r3
    5560:	e038      	b.n	55d4 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5562:	0159      	lsls	r1, r3, #5
    5564:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    5568:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    556c:	f005 0507 	and.w	r5, r5, #7
    5570:	e7ca      	b.n	5508 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    5572:	f011 0f01 	tst.w	r1, #1
    5576:	d0cf      	beq.n	5518 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    5578:	7a91      	ldrb	r1, [r2, #10]
    557a:	f36f 0100 	bfc	r1, #0, #1
    557e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5580:	aa02      	add	r2, sp, #8
    5582:	4422      	add	r2, r4
    5584:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5588:	015a      	lsls	r2, r3, #5
    558a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    558e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5592:	015b      	lsls	r3, r3, #5
    5594:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5598:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    559c:	2204      	movs	r2, #4
    559e:	1c21      	adds	r1, r4, #0
    55a0:	bf18      	it	ne
    55a2:	2101      	movne	r1, #1
    55a4:	4b0d      	ldr	r3, [pc, #52]	; (55dc <_usb_d_dev_handle_trfail+0xfc>)
    55a6:	4798      	blx	r3
    55a8:	e014      	b.n	55d4 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    55aa:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    55ae:	4a0a      	ldr	r2, [pc, #40]	; (55d8 <_usb_d_dev_handle_trfail+0xf8>)
    55b0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    55b4:	2100      	movs	r1, #0
    55b6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    55b8:	aa02      	add	r2, sp, #8
    55ba:	4414      	add	r4, r2
    55bc:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    55c0:	015a      	lsls	r2, r3, #5
    55c2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    55c6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    55ca:	015b      	lsls	r3, r3, #5
    55cc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55d0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    55d4:	b003      	add	sp, #12
    55d6:	bd30      	pop	{r4, r5, pc}
    55d8:	20001c74 	.word	0x20001c74
    55dc:	00005475 	.word	0x00005475

000055e0 <_usb_d_dev_reset_epts>:
{
    55e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55e4:	4d0c      	ldr	r5, [pc, #48]	; (5618 <_usb_d_dev_reset_epts+0x38>)
    55e6:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
    55ea:	f505 75b4 	add.w	r5, r5, #360	; 0x168
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    55ee:	f04f 0803 	mov.w	r8, #3
    55f2:	4f0a      	ldr	r7, [pc, #40]	; (561c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    55f4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    55f6:	4641      	mov	r1, r8
    55f8:	4620      	mov	r0, r4
    55fa:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    55fc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    55fe:	2300      	movs	r3, #0
    5600:	74e3      	strb	r3, [r4, #19]
    5602:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    5604:	42ac      	cmp	r4, r5
    5606:	d1f6      	bne.n	55f6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    5608:	22a0      	movs	r2, #160	; 0xa0
    560a:	4619      	mov	r1, r3
    560c:	4802      	ldr	r0, [pc, #8]	; (5618 <_usb_d_dev_reset_epts+0x38>)
    560e:	4b04      	ldr	r3, [pc, #16]	; (5620 <_usb_d_dev_reset_epts+0x40>)
    5610:	4798      	blx	r3
    5612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5616:	bf00      	nop
    5618:	20001c74 	.word	0x20001c74
    561c:	00005449 	.word	0x00005449
    5620:	0000ceed 	.word	0x0000ceed

00005624 <_usb_d_dev_in_next>:
{
    5624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5628:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    562a:	7c84      	ldrb	r4, [r0, #18]
    562c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    5630:	4688      	mov	r8, r1
    5632:	2900      	cmp	r1, #0
    5634:	f000 80a0 	beq.w	5778 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5638:	4b58      	ldr	r3, [pc, #352]	; (579c <_usb_d_dev_in_next+0x178>)
    563a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    563e:	6958      	ldr	r0, [r3, #20]
    5640:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    5644:	8a2b      	ldrh	r3, [r5, #16]
    5646:	f240 32ff 	movw	r2, #1023	; 0x3ff
    564a:	4293      	cmp	r3, r2
    564c:	f000 808e 	beq.w	576c <_usb_d_dev_in_next+0x148>
    5650:	3b01      	subs	r3, #1
    5652:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    5654:	7cef      	ldrb	r7, [r5, #19]
    5656:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    565a:	f1b8 0f00 	cmp.w	r8, #0
    565e:	d005      	beq.n	566c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5660:	0162      	lsls	r2, r4, #5
    5662:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5666:	2302      	movs	r3, #2
    5668:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    566c:	68a9      	ldr	r1, [r5, #8]
    566e:	eb0e 0301 	add.w	r3, lr, r1
    5672:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    5674:	686e      	ldr	r6, [r5, #4]
    5676:	42b3      	cmp	r3, r6
    5678:	d23f      	bcs.n	56fa <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    567a:	1af6      	subs	r6, r6, r3
    567c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    567e:	7cea      	ldrb	r2, [r5, #19]
    5680:	f012 0f20 	tst.w	r2, #32
    5684:	d02d      	beq.n	56e2 <_usb_d_dev_in_next+0xbe>
    5686:	8a2a      	ldrh	r2, [r5, #16]
    5688:	4296      	cmp	r6, r2
    568a:	bf28      	it	cs
    568c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    568e:	6829      	ldr	r1, [r5, #0]
    5690:	4632      	mov	r2, r6
    5692:	4419      	add	r1, r3
    5694:	68e8      	ldr	r0, [r5, #12]
    5696:	4b42      	ldr	r3, [pc, #264]	; (57a0 <_usb_d_dev_in_next+0x17c>)
    5698:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    569a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    569c:	4b3f      	ldr	r3, [pc, #252]	; (579c <_usb_d_dev_in_next+0x178>)
    569e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    56a2:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    56a4:	4b3d      	ldr	r3, [pc, #244]	; (579c <_usb_d_dev_in_next+0x178>)
    56a6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    56aa:	695a      	ldr	r2, [r3, #20]
    56ac:	f366 020d 	bfi	r2, r6, #0, #14
    56b0:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    56b2:	695a      	ldr	r2, [r3, #20]
    56b4:	f36f 329b 	bfc	r2, #14, #14
    56b8:	615a      	str	r2, [r3, #20]
	if (!isr) {
    56ba:	f1b8 0f00 	cmp.w	r8, #0
    56be:	d108      	bne.n	56d2 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    56c0:	2f01      	cmp	r7, #1
    56c2:	bf0c      	ite	eq
    56c4:	224e      	moveq	r2, #78	; 0x4e
    56c6:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    56c8:	0163      	lsls	r3, r4, #5
    56ca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    56ce:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    56d2:	0164      	lsls	r4, r4, #5
    56d4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    56d8:	2380      	movs	r3, #128	; 0x80
    56da:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    56de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56e2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    56e6:	bf28      	it	cs
    56e8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    56ec:	6829      	ldr	r1, [r5, #0]
    56ee:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    56f0:	4a2a      	ldr	r2, [pc, #168]	; (579c <_usb_d_dev_in_next+0x178>)
    56f2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    56f6:	6113      	str	r3, [r2, #16]
    56f8:	e7d4      	b.n	56a4 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    56fa:	7ceb      	ldrb	r3, [r5, #19]
    56fc:	f013 0f10 	tst.w	r3, #16
    5700:	d00f      	beq.n	5722 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    5702:	7ceb      	ldrb	r3, [r5, #19]
    5704:	f36f 1304 	bfc	r3, #4, #1
    5708:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    570a:	4b24      	ldr	r3, [pc, #144]	; (579c <_usb_d_dev_in_next+0x178>)
    570c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5710:	695a      	ldr	r2, [r3, #20]
    5712:	f36f 020d 	bfc	r2, #0, #14
    5716:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    5718:	695a      	ldr	r2, [r3, #20]
    571a:	f36f 329b 	bfc	r2, #14, #14
    571e:	615a      	str	r2, [r3, #20]
    5720:	e7cb      	b.n	56ba <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    5722:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5724:	ea4f 1444 	mov.w	r4, r4, lsl #5
    5728:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    572c:	bf0c      	ite	eq
    572e:	234b      	moveq	r3, #75	; 0x4b
    5730:	234a      	movne	r3, #74	; 0x4a
    5732:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    5736:	8a2a      	ldrh	r2, [r5, #16]
    5738:	ea00 030e 	and.w	r3, r0, lr
    573c:	429a      	cmp	r2, r3
    573e:	d005      	beq.n	574c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5740:	2100      	movs	r1, #0
    5742:	4628      	mov	r0, r5
    5744:	4b17      	ldr	r3, [pc, #92]	; (57a4 <_usb_d_dev_in_next+0x180>)
    5746:	4798      	blx	r3
	return;
    5748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    574c:	7ceb      	ldrb	r3, [r5, #19]
    574e:	f36f 1386 	bfc	r3, #6, #1
    5752:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    5754:	4b11      	ldr	r3, [pc, #68]	; (579c <_usb_d_dev_in_next+0x178>)
    5756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    575a:	68a9      	ldr	r1, [r5, #8]
    575c:	7ca8      	ldrb	r0, [r5, #18]
    575e:	4798      	blx	r3
    5760:	b9d0      	cbnz	r0, 5798 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    5762:	7ceb      	ldrb	r3, [r5, #19]
    5764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5768:	74eb      	strb	r3, [r5, #19]
    576a:	e7e9      	b.n	5740 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    576c:	7cef      	ldrb	r7, [r5, #19]
    576e:	f007 0707 	and.w	r7, r7, #7
    5772:	f240 30ff 	movw	r0, #1023	; 0x3ff
    5776:	e773      	b.n	5660 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    5778:	8a03      	ldrh	r3, [r0, #16]
    577a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    577e:	4293      	cmp	r3, r2
    5780:	d107      	bne.n	5792 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    5782:	7cef      	ldrb	r7, [r5, #19]
    5784:	f007 0707 	and.w	r7, r7, #7
    5788:	f04f 0e00 	mov.w	lr, #0
    578c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    5790:	e76c      	b.n	566c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    5792:	f04f 0e00 	mov.w	lr, #0
    5796:	e75b      	b.n	5650 <_usb_d_dev_in_next+0x2c>
    5798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    579c:	20001c74 	.word	0x20001c74
    57a0:	0000cdb9 	.word	0x0000cdb9
    57a4:	00005449 	.word	0x00005449

000057a8 <_usb_d_dev_out_next>:
{
    57a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57ac:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    57ae:	7c85      	ldrb	r5, [r0, #18]
    57b0:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    57b4:	4689      	mov	r9, r1
    57b6:	2900      	cmp	r1, #0
    57b8:	d056      	beq.n	5868 <_usb_d_dev_out_next+0xc0>
    57ba:	4b74      	ldr	r3, [pc, #464]	; (598c <_usb_d_dev_out_next+0x1e4>)
    57bc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    57c0:	685a      	ldr	r2, [r3, #4]
    57c2:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    57c6:	685f      	ldr	r7, [r3, #4]
    57c8:	f3c7 070d 	ubfx	r7, r7, #0, #14
    57cc:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    57ce:	8a06      	ldrh	r6, [r0, #16]
    57d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    57d4:	429e      	cmp	r6, r3
    57d6:	f000 80ba 	beq.w	594e <_usb_d_dev_out_next+0x1a6>
    57da:	3e01      	subs	r6, #1
    57dc:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    57de:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    57e2:	f894 8013 	ldrb.w	r8, [r4, #19]
    57e6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    57ea:	f1b9 0f00 	cmp.w	r9, #0
    57ee:	d005      	beq.n	57fc <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    57f0:	016b      	lsls	r3, r5, #5
    57f2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    57f6:	2201      	movs	r2, #1
    57f8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    57fc:	7ce3      	ldrb	r3, [r4, #19]
    57fe:	f013 0f20 	tst.w	r3, #32
    5802:	d00d      	beq.n	5820 <_usb_d_dev_out_next+0x78>
    5804:	6862      	ldr	r2, [r4, #4]
    5806:	2a00      	cmp	r2, #0
    5808:	d037      	beq.n	587a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    580a:	68a0      	ldr	r0, [r4, #8]
    580c:	1a12      	subs	r2, r2, r0
    580e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    5810:	6823      	ldr	r3, [r4, #0]
    5812:	42ba      	cmp	r2, r7
    5814:	bf28      	it	cs
    5816:	463a      	movcs	r2, r7
    5818:	68e1      	ldr	r1, [r4, #12]
    581a:	4418      	add	r0, r3
    581c:	4b5c      	ldr	r3, [pc, #368]	; (5990 <_usb_d_dev_out_next+0x1e8>)
    581e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    5820:	6863      	ldr	r3, [r4, #4]
    5822:	b353      	cbz	r3, 587a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    5824:	f1b9 0f00 	cmp.w	r9, #0
    5828:	d040      	beq.n	58ac <_usb_d_dev_out_next+0x104>
    582a:	8a22      	ldrh	r2, [r4, #16]
    582c:	42ba      	cmp	r2, r7
    582e:	d93d      	bls.n	58ac <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    5830:	7ce3      	ldrb	r3, [r4, #19]
    5832:	f36f 1304 	bfc	r3, #4, #1
    5836:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    5838:	68a3      	ldr	r3, [r4, #8]
    583a:	445b      	add	r3, fp
    583c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    583e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5842:	ea4f 1345 	mov.w	r3, r5, lsl #5
    5846:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    584a:	bf0c      	ite	eq
    584c:	222d      	moveq	r2, #45	; 0x2d
    584e:	2225      	movne	r2, #37	; 0x25
    5850:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    5854:	b915      	cbnz	r5, 585c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5856:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    5858:	4b4c      	ldr	r3, [pc, #304]	; (598c <_usb_d_dev_out_next+0x1e4>)
    585a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    585c:	2100      	movs	r1, #0
    585e:	4620      	mov	r0, r4
    5860:	4b4c      	ldr	r3, [pc, #304]	; (5994 <_usb_d_dev_out_next+0x1ec>)
    5862:	4798      	blx	r3
	return;
    5864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5868:	8a06      	ldrh	r6, [r0, #16]
    586a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    586e:	429e      	cmp	r6, r3
    5870:	d07b      	beq.n	596a <_usb_d_dev_out_next+0x1c2>
    5872:	f04f 0b00 	mov.w	fp, #0
    5876:	46da      	mov	sl, fp
    5878:	e7af      	b.n	57da <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    587a:	7ce3      	ldrb	r3, [r4, #19]
    587c:	f013 0f10 	tst.w	r3, #16
    5880:	d06c      	beq.n	595c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    5882:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    5884:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    5888:	f043 0320 	orr.w	r3, r3, #32
    588c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    588e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    5890:	493e      	ldr	r1, [pc, #248]	; (598c <_usb_d_dev_out_next+0x1e4>)
    5892:	016a      	lsls	r2, r5, #5
    5894:	188b      	adds	r3, r1, r2
    5896:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5898:	8a21      	ldrh	r1, [r4, #16]
    589a:	685a      	ldr	r2, [r3, #4]
    589c:	f361 329b 	bfi	r2, r1, #14, #14
    58a0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    58a2:	685a      	ldr	r2, [r3, #4]
    58a4:	f36f 020d 	bfc	r2, #0, #14
    58a8:	605a      	str	r2, [r3, #4]
    58aa:	e01d      	b.n	58e8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    58ac:	68a2      	ldr	r2, [r4, #8]
    58ae:	4452      	add	r2, sl
    58b0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    58b2:	4293      	cmp	r3, r2
    58b4:	d9c3      	bls.n	583e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    58b6:	1a9b      	subs	r3, r3, r2
    58b8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    58ba:	7ce1      	ldrb	r1, [r4, #19]
    58bc:	f011 0f20 	tst.w	r1, #32
    58c0:	d026      	beq.n	5910 <_usb_d_dev_out_next+0x168>
    58c2:	8a22      	ldrh	r2, [r4, #16]
    58c4:	4293      	cmp	r3, r2
    58c6:	bf28      	it	cs
    58c8:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    58ca:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    58cc:	016a      	lsls	r2, r5, #5
    58ce:	492f      	ldr	r1, [pc, #188]	; (598c <_usb_d_dev_out_next+0x1e4>)
    58d0:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    58d2:	4a2e      	ldr	r2, [pc, #184]	; (598c <_usb_d_dev_out_next+0x1e4>)
    58d4:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    58d8:	6851      	ldr	r1, [r2, #4]
    58da:	f363 319b 	bfi	r1, r3, #14, #14
    58de:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    58e0:	6853      	ldr	r3, [r2, #4]
    58e2:	f36f 030d 	bfc	r3, #0, #14
    58e6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    58e8:	f1b9 0f00 	cmp.w	r9, #0
    58ec:	d108      	bne.n	5900 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    58ee:	f1b8 0f01 	cmp.w	r8, #1
    58f2:	d025      	beq.n	5940 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    58f4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    58f6:	016b      	lsls	r3, r5, #5
    58f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    58fc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5900:	016d      	lsls	r5, r5, #5
    5902:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    5906:	2340      	movs	r3, #64	; 0x40
    5908:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    590c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    5910:	8a21      	ldrh	r1, [r4, #16]
    5912:	428b      	cmp	r3, r1
    5914:	d90a      	bls.n	592c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    5916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    591a:	d80e      	bhi.n	593a <_usb_d_dev_out_next+0x192>
    591c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5920:	6821      	ldr	r1, [r4, #0]
    5922:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    5924:	0169      	lsls	r1, r5, #5
    5926:	4819      	ldr	r0, [pc, #100]	; (598c <_usb_d_dev_out_next+0x1e4>)
    5928:	5042      	str	r2, [r0, r1]
    592a:	e7d2      	b.n	58d2 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    592c:	428b      	cmp	r3, r1
    592e:	d2f7      	bcs.n	5920 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    5930:	7ce1      	ldrb	r1, [r4, #19]
    5932:	f041 0120 	orr.w	r1, r1, #32
    5936:	74e1      	strb	r1, [r4, #19]
    5938:	e7f2      	b.n	5920 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    593a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    593e:	e7ef      	b.n	5920 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    5940:	4b12      	ldr	r3, [pc, #72]	; (598c <_usb_d_dev_out_next+0x1e4>)
    5942:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    5946:	2200      	movs	r2, #0
    5948:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    594a:	222d      	movs	r2, #45	; 0x2d
    594c:	e7d3      	b.n	58f6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    594e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5952:	f890 8013 	ldrb.w	r8, [r0, #19]
    5956:	f008 0807 	and.w	r8, r8, #7
    595a:	e749      	b.n	57f0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    595c:	f1b9 0f00 	cmp.w	r9, #0
    5960:	d10b      	bne.n	597a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    5962:	68a3      	ldr	r3, [r4, #8]
    5964:	4453      	add	r3, sl
    5966:	60a3      	str	r3, [r4, #8]
    5968:	e769      	b.n	583e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    596a:	f890 8013 	ldrb.w	r8, [r0, #19]
    596e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    5972:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5974:	46bb      	mov	fp, r7
    5976:	46ba      	mov	sl, r7
    5978:	e740      	b.n	57fc <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    597a:	8a23      	ldrh	r3, [r4, #16]
    597c:	42bb      	cmp	r3, r7
    597e:	f63f af57 	bhi.w	5830 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    5982:	68a3      	ldr	r3, [r4, #8]
    5984:	4453      	add	r3, sl
    5986:	60a3      	str	r3, [r4, #8]
    5988:	e759      	b.n	583e <_usb_d_dev_out_next+0x96>
    598a:	bf00      	nop
    598c:	20001c74 	.word	0x20001c74
    5990:	0000cdb9 	.word	0x0000cdb9
    5994:	00005449 	.word	0x00005449

00005998 <_usb_d_dev_handler>:
{
    5998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    599c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    59a0:	8c1e      	ldrh	r6, [r3, #32]
    59a2:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    59a4:	b146      	cbz	r6, 59b8 <_usb_d_dev_handler+0x20>
    59a6:	4d9d      	ldr	r5, [pc, #628]	; (5c1c <_usb_d_dev_handler+0x284>)
	uint32_t lpm_variable = 0;
    59a8:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    59aa:	f1a5 07b4 	sub.w	r7, r5, #180	; 0xb4
			_usb_d_dev_handle_setup(ept);
    59ae:	f8df 9288 	ldr.w	r9, [pc, #648]	; 5c38 <_usb_d_dev_handler+0x2a0>
			_usb_d_dev_handle_trfail(ept, 1);
    59b2:	f8df 8288 	ldr.w	r8, [pc, #648]	; 5c3c <_usb_d_dev_handler+0x2a4>
    59b6:	e0ec      	b.n	5b92 <_usb_d_dev_handler+0x1fa>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    59b8:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    59ba:	8b1b      	ldrh	r3, [r3, #24]
    59bc:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    59be:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    59c0:	f013 0f04 	tst.w	r3, #4
    59c4:	d11f      	bne.n	5a06 <_usb_d_dev_handler+0x6e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    59c6:	f413 7f00 	tst.w	r3, #512	; 0x200
    59ca:	d126      	bne.n	5a1a <_usb_d_dev_handler+0x82>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    59cc:	f013 0f80 	tst.w	r3, #128	; 0x80
    59d0:	d15d      	bne.n	5a8e <_usb_d_dev_handler+0xf6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    59d2:	f013 0f70 	tst.w	r3, #112	; 0x70
    59d6:	d166      	bne.n	5aa6 <_usb_d_dev_handler+0x10e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    59d8:	f013 0f08 	tst.w	r3, #8
    59dc:	f040 8086 	bne.w	5aec <_usb_d_dev_handler+0x154>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    59e0:	f013 0f01 	tst.w	r3, #1
    59e4:	d0df      	beq.n	59a6 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    59e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    59ea:	f240 2201 	movw	r2, #513	; 0x201
    59ee:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    59f0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    59f2:	2270      	movs	r2, #112	; 0x70
    59f4:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    59f6:	4b8a      	ldr	r3, [pc, #552]	; (5c20 <_usb_d_dev_handler+0x288>)
    59f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    59fc:	2100      	movs	r1, #0
    59fe:	2004      	movs	r0, #4
    5a00:	4798      	blx	r3
    5a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5a06:	2204      	movs	r2, #4
    5a08:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5a0c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    5a0e:	4b84      	ldr	r3, [pc, #528]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5a14:	4798      	blx	r3
    5a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5a1e:	f240 2201 	movw	r2, #513	; 0x201
    5a22:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    5a24:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5a26:	2270      	movs	r2, #112	; 0x70
    5a28:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    5a2a:	4b7d      	ldr	r3, [pc, #500]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a2c:	891b      	ldrh	r3, [r3, #8]
    5a2e:	f003 030f 	and.w	r3, r3, #15
    5a32:	2b03      	cmp	r3, #3
    5a34:	d029      	beq.n	5a8a <_usb_d_dev_handler+0xf2>
    5a36:	4b7a      	ldr	r3, [pc, #488]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5a3a:	f003 030f 	and.w	r3, r3, #15
    5a3e:	2b03      	cmp	r3, #3
    5a40:	d017      	beq.n	5a72 <_usb_d_dev_handler+0xda>
    5a42:	4b77      	ldr	r3, [pc, #476]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    5a48:	f003 030f 	and.w	r3, r3, #15
    5a4c:	2b03      	cmp	r3, #3
    5a4e:	d01a      	beq.n	5a86 <_usb_d_dev_handler+0xee>
    5a50:	4b73      	ldr	r3, [pc, #460]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    5a56:	f003 030f 	and.w	r3, r3, #15
    5a5a:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5a5c:	bf08      	it	eq
    5a5e:	2203      	moveq	r2, #3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    5a60:	d008      	beq.n	5a74 <_usb_d_dev_handler+0xdc>
	uint32_t lpm_variable = 0;
    5a62:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    5a64:	4b6e      	ldr	r3, [pc, #440]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5a6a:	2003      	movs	r0, #3
    5a6c:	4798      	blx	r3
    5a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5a72:	2201      	movs	r2, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    5a74:	4b6a      	ldr	r3, [pc, #424]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a76:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    5a7a:	8919      	ldrh	r1, [r3, #8]
    5a7c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    5a80:	2200      	movs	r2, #0
    5a82:	811a      	strh	r2, [r3, #8]
    5a84:	e7ee      	b.n	5a64 <_usb_d_dev_handler+0xcc>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5a86:	2202      	movs	r2, #2
    5a88:	e7f4      	b.n	5a74 <_usb_d_dev_handler+0xdc>
    5a8a:	2200      	movs	r2, #0
    5a8c:	e7f2      	b.n	5a74 <_usb_d_dev_handler+0xdc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5a8e:	2280      	movs	r2, #128	; 0x80
    5a90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5a94:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    5a96:	4b62      	ldr	r3, [pc, #392]	; (5c20 <_usb_d_dev_handler+0x288>)
    5a98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5a9c:	2100      	movs	r1, #0
    5a9e:	2005      	movs	r0, #5
    5aa0:	4798      	blx	r3
    5aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5aa6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5aaa:	2270      	movs	r2, #112	; 0x70
    5aac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    5aae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5ab0:	f240 2201 	movw	r2, #513	; 0x201
    5ab4:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5ab6:	4b5b      	ldr	r3, [pc, #364]	; (5c24 <_usb_d_dev_handler+0x28c>)
    5ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    5abc:	f013 0f01 	tst.w	r3, #1
    5ac0:	d00e      	beq.n	5ae0 <_usb_d_dev_handler+0x148>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5ac2:	4a58      	ldr	r2, [pc, #352]	; (5c24 <_usb_d_dev_handler+0x28c>)
    5ac4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    5ac6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    5aca:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5ace:	d1f9      	bne.n	5ac4 <_usb_d_dev_handler+0x12c>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    5ad0:	4b53      	ldr	r3, [pc, #332]	; (5c20 <_usb_d_dev_handler+0x288>)
    5ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5ad6:	2100      	movs	r1, #0
    5ad8:	2002      	movs	r0, #2
    5ada:	4798      	blx	r3
    5adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5ae0:	4a50      	ldr	r2, [pc, #320]	; (5c24 <_usb_d_dev_handler+0x28c>)
    5ae2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    5ae4:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ae8:	d0fb      	beq.n	5ae2 <_usb_d_dev_handler+0x14a>
    5aea:	e7f1      	b.n	5ad0 <_usb_d_dev_handler+0x138>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5aec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5af0:	2400      	movs	r4, #0
    5af2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5af6:	2208      	movs	r2, #8
    5af8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    5afa:	2270      	movs	r2, #112	; 0x70
    5afc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5afe:	f240 2201 	movw	r2, #513	; 0x201
    5b02:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    5b04:	4b48      	ldr	r3, [pc, #288]	; (5c28 <_usb_d_dev_handler+0x290>)
    5b06:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    5b08:	4b45      	ldr	r3, [pc, #276]	; (5c20 <_usb_d_dev_handler+0x288>)
    5b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5b0e:	4621      	mov	r1, r4
    5b10:	2001      	movs	r0, #1
    5b12:	4798      	blx	r3
    5b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5b18:	f011 0f10 	tst.w	r1, #16
    5b1c:	d109      	bne.n	5b32 <_usb_d_dev_handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    5b1e:	f011 0f40 	tst.w	r1, #64	; 0x40
    5b22:	d108      	bne.n	5b36 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    5b24:	f011 0f20 	tst.w	r1, #32
    5b28:	d02f      	beq.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 0);
    5b2a:	2100      	movs	r1, #0
    5b2c:	4b3f      	ldr	r3, [pc, #252]	; (5c2c <_usb_d_dev_handler+0x294>)
    5b2e:	4798      	blx	r3
    5b30:	e02b      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_setup(ept);
    5b32:	47c8      	blx	r9
    5b34:	e029      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 1);
    5b36:	2101      	movs	r1, #1
    5b38:	4b3c      	ldr	r3, [pc, #240]	; (5c2c <_usb_d_dev_handler+0x294>)
    5b3a:	4798      	blx	r3
    5b3c:	e025      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    5b3e:	f011 0f40 	tst.w	r1, #64	; 0x40
    5b42:	d111      	bne.n	5b68 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5b44:	f011 0f08 	tst.w	r1, #8
    5b48:	d112      	bne.n	5b70 <_usb_d_dev_handler+0x1d8>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    5b4a:	f011 0f02 	tst.w	r1, #2
    5b4e:	d112      	bne.n	5b76 <_usb_d_dev_handler+0x1de>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    5b50:	f003 0307 	and.w	r3, r3, #7
    5b54:	2b01      	cmp	r3, #1
    5b56:	d118      	bne.n	5b8a <_usb_d_dev_handler+0x1f2>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5b58:	f011 0f04 	tst.w	r1, #4
    5b5c:	d10f      	bne.n	5b7e <_usb_d_dev_handler+0x1e6>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5b5e:	f011 0f10 	tst.w	r1, #16
    5b62:	d012      	beq.n	5b8a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_setup(ept);
    5b64:	47c8      	blx	r9
    5b66:	e010      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 1);
    5b68:	2101      	movs	r1, #1
    5b6a:	4b30      	ldr	r3, [pc, #192]	; (5c2c <_usb_d_dev_handler+0x294>)
    5b6c:	4798      	blx	r3
    5b6e:	e00c      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_trfail(ept, 1);
    5b70:	2101      	movs	r1, #1
    5b72:	47c0      	blx	r8
    5b74:	e009      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_in_next(ept, true);
    5b76:	2101      	movs	r1, #1
    5b78:	4b2d      	ldr	r3, [pc, #180]	; (5c30 <_usb_d_dev_handler+0x298>)
    5b7a:	4798      	blx	r3
    5b7c:	e005      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_trfail(ept, 0);
    5b7e:	2100      	movs	r1, #0
    5b80:	47c0      	blx	r8
    5b82:	e002      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 0);
    5b84:	2100      	movs	r1, #0
    5b86:	4b29      	ldr	r3, [pc, #164]	; (5c2c <_usb_d_dev_handler+0x294>)
    5b88:	4798      	blx	r3
    5b8a:	3401      	adds	r4, #1
    5b8c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    5b8e:	2c09      	cmp	r4, #9
    5b90:	d042      	beq.n	5c18 <_usb_d_dev_handler+0x280>
    5b92:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    5b94:	7cab      	ldrb	r3, [r5, #18]
    5b96:	2bff      	cmp	r3, #255	; 0xff
    5b98:	d0f7      	beq.n	5b8a <_usb_d_dev_handler+0x1f2>
	if (!(epint & (1u << epn))) {
    5b9a:	f003 030f 	and.w	r3, r3, #15
    5b9e:	2101      	movs	r1, #1
    5ba0:	4099      	lsls	r1, r3
    5ba2:	4231      	tst	r1, r6
    5ba4:	d0f1      	beq.n	5b8a <_usb_d_dev_handler+0x1f2>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    5ba6:	0159      	lsls	r1, r3, #5
    5ba8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    5bac:	f501 7180 	add.w	r1, r1, #256	; 0x100
    5bb0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    5bb2:	015b      	lsls	r3, r3, #5
    5bb4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5bb8:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    5bbc:	4019      	ands	r1, r3
    5bbe:	d0e4      	beq.n	5b8a <_usb_d_dev_handler+0x1f2>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    5bc0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5bc4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    5bc8:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
    5bcc:	f003 0247 	and.w	r2, r3, #71	; 0x47
    5bd0:	2a01      	cmp	r2, #1
    5bd2:	d0a1      	beq.n	5b18 <_usb_d_dev_handler+0x180>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    5bd4:	f013 0f80 	tst.w	r3, #128	; 0x80
    5bd8:	d1b1      	bne.n	5b3e <_usb_d_dev_handler+0x1a6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    5bda:	f011 0f20 	tst.w	r1, #32
    5bde:	d1d1      	bne.n	5b84 <_usb_d_dev_handler+0x1ec>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5be0:	f011 0f04 	tst.w	r1, #4
    5be4:	d10e      	bne.n	5c04 <_usb_d_dev_handler+0x26c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5be6:	f011 0f01 	tst.w	r1, #1
    5bea:	d10e      	bne.n	5c0a <_usb_d_dev_handler+0x272>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    5bec:	f003 0307 	and.w	r3, r3, #7
    5bf0:	2b01      	cmp	r3, #1
    5bf2:	d1ca      	bne.n	5b8a <_usb_d_dev_handler+0x1f2>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5bf4:	f011 0f08 	tst.w	r1, #8
    5bf8:	d10b      	bne.n	5c12 <_usb_d_dev_handler+0x27a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5bfa:	f011 0f10 	tst.w	r1, #16
    5bfe:	d0c4      	beq.n	5b8a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_setup(ept);
    5c00:	47c8      	blx	r9
    5c02:	e7c2      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_trfail(ept, 0);
    5c04:	2100      	movs	r1, #0
    5c06:	47c0      	blx	r8
    5c08:	e7bf      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_out_next(ept, true);
    5c0a:	2101      	movs	r1, #1
    5c0c:	4b09      	ldr	r3, [pc, #36]	; (5c34 <_usb_d_dev_handler+0x29c>)
    5c0e:	4798      	blx	r3
    5c10:	e7bb      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_trfail(ept, 1);
    5c12:	2101      	movs	r1, #1
    5c14:	47c0      	blx	r8
    5c16:	e7b8      	b.n	5b8a <_usb_d_dev_handler+0x1f2>
    5c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c1c:	20001d28 	.word	0x20001d28
    5c20:	20001c74 	.word	0x20001c74
    5c24:	40001000 	.word	0x40001000
    5c28:	000055e1 	.word	0x000055e1
    5c2c:	00005419 	.word	0x00005419
    5c30:	00005625 	.word	0x00005625
    5c34:	000057a9 	.word	0x000057a9
    5c38:	00005399 	.word	0x00005399
    5c3c:	000054e1 	.word	0x000054e1

00005c40 <_usb_d_dev_init>:
{
    5c40:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    5c42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5c46:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    5c48:	f013 0f01 	tst.w	r3, #1
    5c4c:	d124      	bne.n	5c98 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5c4e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5c52:	7893      	ldrb	r3, [r2, #2]
    5c54:	f013 0f03 	tst.w	r3, #3
    5c58:	d1fb      	bne.n	5c52 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    5c5a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5c5e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    5c60:	f013 0f02 	tst.w	r3, #2
    5c64:	d00f      	beq.n	5c86 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    5c66:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5c6a:	7813      	ldrb	r3, [r2, #0]
    5c6c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5c70:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5c72:	7893      	ldrb	r3, [r2, #2]
    5c74:	f013 0f03 	tst.w	r3, #3
    5c78:	d1fb      	bne.n	5c72 <_usb_d_dev_init+0x32>
    5c7a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5c7e:	7893      	ldrb	r3, [r2, #2]
    5c80:	f013 0f02 	tst.w	r3, #2
    5c84:	d1fb      	bne.n	5c7e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5c86:	2201      	movs	r2, #1
    5c88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5c8c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5c8e:	461a      	mov	r2, r3
    5c90:	7893      	ldrb	r3, [r2, #2]
    5c92:	f013 0f03 	tst.w	r3, #3
    5c96:	d1fb      	bne.n	5c90 <_usb_d_dev_init+0x50>
    5c98:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5c9c:	7893      	ldrb	r3, [r2, #2]
    5c9e:	f013 0f01 	tst.w	r3, #1
    5ca2:	d1fb      	bne.n	5c9c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    5ca4:	4b24      	ldr	r3, [pc, #144]	; (5d38 <_usb_d_dev_init+0xf8>)
    5ca6:	4a25      	ldr	r2, [pc, #148]	; (5d3c <_usb_d_dev_init+0xfc>)
    5ca8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    5cac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    5cb0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    5cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    5cb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	_usb_d_dev_reset_epts();
    5cbc:	4b20      	ldr	r3, [pc, #128]	; (5d40 <_usb_d_dev_init+0x100>)
    5cbe:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    5cc0:	4b20      	ldr	r3, [pc, #128]	; (5d44 <_usb_d_dev_init+0x104>)
    5cc2:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    5cc4:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    5cc8:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    5ccc:	f011 011f 	ands.w	r1, r1, #31
    5cd0:	d02b      	beq.n	5d2a <_usb_d_dev_init+0xea>
		pad_transn = 9;
    5cd2:	291f      	cmp	r1, #31
    5cd4:	bf08      	it	eq
    5cd6:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    5cd8:	b34b      	cbz	r3, 5d2e <_usb_d_dev_init+0xee>
		pad_transp = 25;
    5cda:	2b1f      	cmp	r3, #31
    5cdc:	bf08      	it	eq
    5cde:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    5ce0:	b33a      	cbz	r2, 5d32 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    5ce2:	2a07      	cmp	r2, #7
    5ce4:	bf08      	it	eq
    5ce6:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    5ce8:	f003 031f 	and.w	r3, r3, #31
    5cec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    5cf0:	0312      	lsls	r2, r2, #12
    5cf2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    5cf6:	4313      	orrs	r3, r2
    5cf8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5cfc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    5cfe:	78d3      	ldrb	r3, [r2, #3]
    5d00:	f043 0303 	orr.w	r3, r3, #3
    5d04:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    5d06:	78d3      	ldrb	r3, [r2, #3]
    5d08:	f043 030c 	orr.w	r3, r3, #12
    5d0c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5d0e:	2304      	movs	r3, #4
    5d10:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5d12:	7893      	ldrb	r3, [r2, #2]
    5d14:	f013 0f03 	tst.w	r3, #3
    5d18:	d1fb      	bne.n	5d12 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    5d1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5d1e:	4a06      	ldr	r2, [pc, #24]	; (5d38 <_usb_d_dev_init+0xf8>)
    5d20:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    5d22:	2201      	movs	r2, #1
    5d24:	811a      	strh	r2, [r3, #8]
}
    5d26:	2000      	movs	r0, #0
    5d28:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    5d2a:	2109      	movs	r1, #9
    5d2c:	e7d4      	b.n	5cd8 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    5d2e:	2319      	movs	r3, #25
    5d30:	e7d6      	b.n	5ce0 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    5d32:	2206      	movs	r2, #6
    5d34:	e7d8      	b.n	5ce8 <_usb_d_dev_init+0xa8>
    5d36:	bf00      	nop
    5d38:	20001c74 	.word	0x20001c74
    5d3c:	00005395 	.word	0x00005395
    5d40:	000055e1 	.word	0x000055e1
    5d44:	00800084 	.word	0x00800084

00005d48 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    5d48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5d4c:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    5d4e:	f013 0f03 	tst.w	r3, #3
    5d52:	d129      	bne.n	5da8 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5d54:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5d58:	7893      	ldrb	r3, [r2, #2]
    5d5a:	f013 0f03 	tst.w	r3, #3
    5d5e:	d1fb      	bne.n	5d58 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    5d60:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5d64:	781b      	ldrb	r3, [r3, #0]
    5d66:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    5d68:	f013 0f02 	tst.w	r3, #2
    5d6c:	d108      	bne.n	5d80 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    5d6e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5d72:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5d76:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5d78:	7893      	ldrb	r3, [r2, #2]
    5d7a:	f013 0f03 	tst.w	r3, #3
    5d7e:	d1fb      	bne.n	5d78 <_usb_d_dev_enable+0x30>
    5d80:	4b0b      	ldr	r3, [pc, #44]	; (5db0 <_usb_d_dev_enable+0x68>)
    5d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5d86:	609a      	str	r2, [r3, #8]
    5d88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5d8c:	609a      	str	r2, [r3, #8]
    5d8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5d92:	609a      	str	r2, [r3, #8]
    5d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    5d98:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5d9a:	f240 228d 	movw	r2, #653	; 0x28d
    5d9e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5da2:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    5da4:	2000      	movs	r0, #0
    5da6:	4770      	bx	lr
		return -USB_ERR_DENIED;
    5da8:	f06f 0010 	mvn.w	r0, #16
}
    5dac:	4770      	bx	lr
    5dae:	bf00      	nop
    5db0:	e000e100 	.word	0xe000e100

00005db4 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5db4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5db8:	8913      	ldrh	r3, [r2, #8]
    5dba:	f023 0301 	bic.w	r3, r3, #1
    5dbe:	041b      	lsls	r3, r3, #16
    5dc0:	0c1b      	lsrs	r3, r3, #16
    5dc2:	8113      	strh	r3, [r2, #8]
    5dc4:	4770      	bx	lr

00005dc6 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    5dc6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    5dca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5dce:	7298      	strb	r0, [r3, #10]
    5dd0:	4770      	bx	lr
	...

00005dd4 <_usb_d_dev_ep_init>:
{
    5dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dd6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5dda:	f010 050f 	ands.w	r5, r0, #15
    5dde:	d04d      	beq.n	5e7c <_usb_d_dev_ep_init+0xa8>
    5de0:	f1be 0f00 	cmp.w	lr, #0
    5de4:	bfb4      	ite	lt
    5de6:	1d2c      	addlt	r4, r5, #4
    5de8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    5dea:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    5dee:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    5df0:	2d04      	cmp	r5, #4
    5df2:	d947      	bls.n	5e84 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    5df4:	f06f 0011 	mvn.w	r0, #17
    5df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5dfa:	f1be 0f00 	cmp.w	lr, #0
    5dfe:	db1b      	blt.n	5e38 <_usb_d_dev_ep_init+0x64>
    5e00:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5e04:	4e37      	ldr	r6, [pc, #220]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5e06:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    5e0a:	2d00      	cmp	r5, #0
    5e0c:	d15e      	bne.n	5ecc <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5e12:	4d34      	ldr	r5, [pc, #208]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5e14:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    5e18:	4d33      	ldr	r5, [pc, #204]	; (5ee8 <_usb_d_dev_ep_init+0x114>)
    5e1a:	00a6      	lsls	r6, r4, #2
    5e1c:	1933      	adds	r3, r6, r4
    5e1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5e22:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0
	ept->size     = max_pkt_siz;
    5e26:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	ept->flags.u8 = (ep_type + 1);
    5e2a:	3101      	adds	r1, #1
    5e2c:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	ept->ep       = ep;
    5e30:	f883 00c6 	strb.w	r0, [r3, #198]	; 0xc6
	return USB_OK;
    5e34:	2000      	movs	r0, #0
    5e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5e38:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5e3c:	4e29      	ldr	r6, [pc, #164]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5e3e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5e42:	686d      	ldr	r5, [r5, #4]
    5e44:	b935      	cbnz	r5, 5e54 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5e46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5e4a:	4d26      	ldr	r5, [pc, #152]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5e4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5e50:	685f      	ldr	r7, [r3, #4]
    5e52:	e7e1      	b.n	5e18 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5e54:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5e58:	4e22      	ldr	r6, [pc, #136]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5e5a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5e5e:	896d      	ldrh	r5, [r5, #10]
    5e60:	4295      	cmp	r5, r2
    5e62:	daf0      	bge.n	5e46 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    5e64:	f06f 0012 	mvn.w	r0, #18
    5e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5e6a:	f06f 0013 	mvn.w	r0, #19
    5e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    5e70:	f06f 0013 	mvn.w	r0, #19
    5e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    5e76:	f06f 0012 	mvn.w	r0, #18
    5e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    5e7c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    5e80:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    5e82:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    5e84:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    5e88:	4f17      	ldr	r7, [pc, #92]	; (5ee8 <_usb_d_dev_ep_init+0x114>)
    5e8a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    5e8e:	f896 60c6 	ldrb.w	r6, [r6, #198]	; 0xc6
    5e92:	2eff      	cmp	r6, #255	; 0xff
    5e94:	d1e9      	bne.n	5e6a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    5e96:	2900      	cmp	r1, #0
    5e98:	d1af      	bne.n	5dfa <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5e9a:	b125      	cbz	r5, 5ea6 <_usb_d_dev_ep_init+0xd2>
    5e9c:	f1be 0f00 	cmp.w	lr, #0
    5ea0:	bfa4      	itt	ge
    5ea2:	3504      	addge	r5, #4
    5ea4:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    5ea6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5eaa:	4e0f      	ldr	r6, [pc, #60]	; (5ee8 <_usb_d_dev_ep_init+0x114>)
    5eac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5eb0:	f895 50c6 	ldrb.w	r5, [r5, #198]	; 0xc6
    5eb4:	2dff      	cmp	r5, #255	; 0xff
    5eb6:	d1db      	bne.n	5e70 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    5eb8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5ebc:	4e09      	ldr	r6, [pc, #36]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5ebe:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    5ec2:	2d00      	cmp	r5, #0
    5ec4:	d0d7      	beq.n	5e76 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5ec6:	f1be 0f00 	cmp.w	lr, #0
    5eca:	dbb5      	blt.n	5e38 <_usb_d_dev_ep_init+0x64>
    5ecc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5ed0:	4e04      	ldr	r6, [pc, #16]	; (5ee4 <_usb_d_dev_ep_init+0x110>)
    5ed2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5ed6:	892d      	ldrh	r5, [r5, #8]
    5ed8:	4295      	cmp	r5, r2
    5eda:	da98      	bge.n	5e0e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    5edc:	f06f 0012 	mvn.w	r0, #18
    5ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ee2:	bf00      	nop
    5ee4:	0000daa4 	.word	0x0000daa4
    5ee8:	20001c74 	.word	0x20001c74

00005eec <_usb_d_dev_ep_deinit>:
{
    5eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eee:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5ef0:	f010 060f 	ands.w	r6, r0, #15
    5ef4:	d00e      	beq.n	5f14 <_usb_d_dev_ep_deinit+0x28>
    5ef6:	2f00      	cmp	r7, #0
    5ef8:	bfb4      	ite	lt
    5efa:	1d33      	addlt	r3, r6, #4
    5efc:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5efe:	2e04      	cmp	r6, #4
    5f00:	d900      	bls.n	5f04 <_usb_d_dev_ep_deinit+0x18>
    5f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    5f04:	461d      	mov	r5, r3
    5f06:	3301      	adds	r3, #1
    5f08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5f0c:	4a24      	ldr	r2, [pc, #144]	; (5fa0 <_usb_d_dev_ep_deinit+0xb4>)
    5f0e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    5f12:	e002      	b.n	5f1a <_usb_d_dev_ep_deinit+0x2e>
    5f14:	f8df e094 	ldr.w	lr, [pc, #148]	; 5fac <_usb_d_dev_ep_deinit+0xc0>
    5f18:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5f1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5f1e:	4a21      	ldr	r2, [pc, #132]	; (5fa4 <_usb_d_dev_ep_deinit+0xb8>)
    5f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5f24:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
    5f28:	2aff      	cmp	r2, #255	; 0xff
    5f2a:	d0ea      	beq.n	5f02 <_usb_d_dev_ep_deinit+0x16>
    5f2c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    5f2e:	2203      	movs	r2, #3
    5f30:	0ff9      	lsrs	r1, r7, #31
    5f32:	4670      	mov	r0, lr
    5f34:	4b1c      	ldr	r3, [pc, #112]	; (5fa8 <_usb_d_dev_ep_deinit+0xbc>)
    5f36:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5f38:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5f3c:	4a19      	ldr	r2, [pc, #100]	; (5fa4 <_usb_d_dev_ep_deinit+0xb8>)
    5f3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5f42:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    5f46:	f003 0307 	and.w	r3, r3, #7
    5f4a:	2b01      	cmp	r3, #1
    5f4c:	d016      	beq.n	5f7c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    5f4e:	2f00      	cmp	r7, #0
    5f50:	db1b      	blt.n	5f8a <_usb_d_dev_ep_deinit+0x9e>
    5f52:	0160      	lsls	r0, r4, #5
    5f54:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    5f58:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    5f5c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    5f60:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    5f64:	4b0f      	ldr	r3, [pc, #60]	; (5fa4 <_usb_d_dev_ep_deinit+0xb8>)
    5f66:	00aa      	lsls	r2, r5, #2
    5f68:	1951      	adds	r1, r2, r5
    5f6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5f6e:	2000      	movs	r0, #0
    5f70:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
	ept->ep       = 0xFF;
    5f74:	22ff      	movs	r2, #255	; 0xff
    5f76:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    5f7a:	e7c2      	b.n	5f02 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    5f7c:	0160      	lsls	r0, r4, #5
    5f7e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5f82:	2300      	movs	r3, #0
    5f84:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    5f88:	e7ec      	b.n	5f64 <_usb_d_dev_ep_deinit+0x78>
    5f8a:	0176      	lsls	r6, r6, #5
    5f8c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    5f90:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    5f94:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    5f98:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    5f9c:	e7e2      	b.n	5f64 <_usb_d_dev_ep_deinit+0x78>
    5f9e:	bf00      	nop
    5fa0:	20001d14 	.word	0x20001d14
    5fa4:	20001c74 	.word	0x20001c74
    5fa8:	00005475 	.word	0x00005475
    5fac:	20001d28 	.word	0x20001d28

00005fb0 <_usb_d_dev_ep_enable>:
{
    5fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fb2:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5fb4:	f010 000f 	ands.w	r0, r0, #15
    5fb8:	f000 80a6 	beq.w	6108 <_usb_d_dev_ep_enable+0x158>
    5fbc:	2f00      	cmp	r7, #0
    5fbe:	bfb4      	ite	lt
    5fc0:	1d03      	addlt	r3, r0, #4
    5fc2:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5fc4:	4606      	mov	r6, r0
    5fc6:	0142      	lsls	r2, r0, #5
    5fc8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5fcc:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    5fd0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5fd2:	2804      	cmp	r0, #4
    5fd4:	f240 809f 	bls.w	6116 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    5fd8:	f06f 0011 	mvn.w	r0, #17
    5fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    5fde:	f014 0f77 	tst.w	r4, #119	; 0x77
    5fe2:	f040 8088 	bne.w	60f6 <_usb_d_dev_ep_enable+0x146>
    5fe6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5fea:	2111      	movs	r1, #17
    5fec:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5ff0:	4c97      	ldr	r4, [pc, #604]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    5ff2:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    5ff6:	f8b1 40c4 	ldrh.w	r4, [r1, #196]	; 0xc4
    5ffa:	4996      	ldr	r1, [pc, #600]	; (6254 <_usb_d_dev_ep_enable+0x2a4>)
    5ffc:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    6000:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    6004:	f200 80cc 	bhi.w	61a0 <_usb_d_dev_ep_enable+0x1f0>
    6008:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    600c:	f200 810a 	bhi.w	6224 <_usb_d_dev_ep_enable+0x274>
    6010:	2c80      	cmp	r4, #128	; 0x80
    6012:	f200 80f9 	bhi.w	6208 <_usb_d_dev_ep_enable+0x258>
    6016:	2c40      	cmp	r4, #64	; 0x40
    6018:	f200 810b 	bhi.w	6232 <_usb_d_dev_ep_enable+0x282>
    601c:	2c20      	cmp	r4, #32
    601e:	f200 80fa 	bhi.w	6216 <_usb_d_dev_ep_enable+0x266>
    6022:	2c10      	cmp	r4, #16
    6024:	f200 810c 	bhi.w	6240 <_usb_d_dev_ep_enable+0x290>
    6028:	2c08      	cmp	r4, #8
    602a:	bf94      	ite	ls
    602c:	2700      	movls	r7, #0
    602e:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6030:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6034:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6036:	f3c4 010d 	ubfx	r1, r4, #0, #14
    603a:	e0b7      	b.n	61ac <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    603c:	f014 0f70 	tst.w	r4, #112	; 0x70
    6040:	d15c      	bne.n	60fc <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    6042:	4d83      	ldr	r5, [pc, #524]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    6044:	009f      	lsls	r7, r3, #2
    6046:	18f9      	adds	r1, r7, r3
    6048:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    604c:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
    6050:	0109      	lsls	r1, r1, #4
    6052:	f001 0170 	and.w	r1, r1, #112	; 0x70
    6056:	430c      	orrs	r4, r1
    6058:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    605c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6060:	443b      	add	r3, r7
    6062:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6066:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    606a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    606e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6072:	d80f      	bhi.n	6094 <_usb_d_dev_ep_enable+0xe4>
    6074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6078:	d819      	bhi.n	60ae <_usb_d_dev_ep_enable+0xfe>
    607a:	2b80      	cmp	r3, #128	; 0x80
    607c:	d819      	bhi.n	60b2 <_usb_d_dev_ep_enable+0x102>
    607e:	2b40      	cmp	r3, #64	; 0x40
    6080:	d819      	bhi.n	60b6 <_usb_d_dev_ep_enable+0x106>
    6082:	2b20      	cmp	r3, #32
    6084:	d819      	bhi.n	60ba <_usb_d_dev_ep_enable+0x10a>
    6086:	2b10      	cmp	r3, #16
    6088:	d819      	bhi.n	60be <_usb_d_dev_ep_enable+0x10e>
    608a:	2b08      	cmp	r3, #8
    608c:	bf94      	ite	ls
    608e:	2300      	movls	r3, #0
    6090:	2301      	movhi	r3, #1
    6092:	e000      	b.n	6096 <_usb_d_dev_ep_enable+0xe6>
    6094:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6096:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    609a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    609c:	2380      	movs	r3, #128	; 0x80
    609e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    60a2:	4b6b      	ldr	r3, [pc, #428]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    60a4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    60a8:	2000      	movs	r0, #0
    60aa:	76b0      	strb	r0, [r6, #26]
    60ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    60ae:	2306      	movs	r3, #6
    60b0:	e7f1      	b.n	6096 <_usb_d_dev_ep_enable+0xe6>
    60b2:	2305      	movs	r3, #5
    60b4:	e7ef      	b.n	6096 <_usb_d_dev_ep_enable+0xe6>
    60b6:	2304      	movs	r3, #4
    60b8:	e7ed      	b.n	6096 <_usb_d_dev_ep_enable+0xe6>
    60ba:	2303      	movs	r3, #3
    60bc:	e7eb      	b.n	6096 <_usb_d_dev_ep_enable+0xe6>
    60be:	2302      	movs	r3, #2
    60c0:	e7e9      	b.n	6096 <_usb_d_dev_ep_enable+0xe6>
    60c2:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    60c4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    60c8:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    60ca:	2340      	movs	r3, #64	; 0x40
    60cc:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    60d0:	4b5f      	ldr	r3, [pc, #380]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    60d2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    60d6:	2000      	movs	r0, #0
    60d8:	72b0      	strb	r0, [r6, #10]
    60da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    60dc:	2106      	movs	r1, #6
    60de:	e7f1      	b.n	60c4 <_usb_d_dev_ep_enable+0x114>
    60e0:	2105      	movs	r1, #5
    60e2:	e7ef      	b.n	60c4 <_usb_d_dev_ep_enable+0x114>
    60e4:	2104      	movs	r1, #4
    60e6:	e7ed      	b.n	60c4 <_usb_d_dev_ep_enable+0x114>
    60e8:	2103      	movs	r1, #3
    60ea:	e7eb      	b.n	60c4 <_usb_d_dev_ep_enable+0x114>
    60ec:	2102      	movs	r1, #2
    60ee:	e7e9      	b.n	60c4 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    60f0:	f06f 0011 	mvn.w	r0, #17
    60f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    60f6:	f06f 0013 	mvn.w	r0, #19
    60fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    60fc:	f06f 0013 	mvn.w	r0, #19
    6100:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    6102:	f06f 0013 	mvn.w	r0, #19
    6106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6108:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    610c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    6110:	b2e4      	uxtb	r4, r4
    6112:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    6114:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    6116:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    611a:	494d      	ldr	r1, [pc, #308]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    611c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6120:	f892 50c6 	ldrb.w	r5, [r2, #198]	; 0xc6
    6124:	2dff      	cmp	r5, #255	; 0xff
    6126:	d0e3      	beq.n	60f0 <_usb_d_dev_ep_enable+0x140>
    6128:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    612a:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    612c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    6130:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    6134:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
    6138:	f001 0107 	and.w	r1, r1, #7
    613c:	2901      	cmp	r1, #1
    613e:	f43f af4e 	beq.w	5fde <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    6142:	2f00      	cmp	r7, #0
    6144:	f6ff af7a 	blt.w	603c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    6148:	f014 0f07 	tst.w	r4, #7
    614c:	d1d9      	bne.n	6102 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    614e:	4d40      	ldr	r5, [pc, #256]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    6150:	009f      	lsls	r7, r3, #2
    6152:	18f9      	adds	r1, r7, r3
    6154:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    6158:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
    615c:	f001 0107 	and.w	r1, r1, #7
    6160:	430c      	orrs	r4, r1
    6162:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    6166:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    616a:	443b      	add	r3, r7
    616c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6170:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    6174:	4b37      	ldr	r3, [pc, #220]	; (6254 <_usb_d_dev_ep_enable+0x2a4>)
    6176:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    617a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    617e:	d8a0      	bhi.n	60c2 <_usb_d_dev_ep_enable+0x112>
    6180:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    6184:	d8aa      	bhi.n	60dc <_usb_d_dev_ep_enable+0x12c>
    6186:	2980      	cmp	r1, #128	; 0x80
    6188:	d8aa      	bhi.n	60e0 <_usb_d_dev_ep_enable+0x130>
    618a:	2940      	cmp	r1, #64	; 0x40
    618c:	d8aa      	bhi.n	60e4 <_usb_d_dev_ep_enable+0x134>
    618e:	2920      	cmp	r1, #32
    6190:	d8aa      	bhi.n	60e8 <_usb_d_dev_ep_enable+0x138>
    6192:	2910      	cmp	r1, #16
    6194:	d8aa      	bhi.n	60ec <_usb_d_dev_ep_enable+0x13c>
    6196:	2908      	cmp	r1, #8
    6198:	bf94      	ite	ls
    619a:	2100      	movls	r1, #0
    619c:	2101      	movhi	r1, #1
    619e:	e791      	b.n	60c4 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    61a0:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    61a4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    61a6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    61aa:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    61ac:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    61b0:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    61b2:	2140      	movs	r1, #64	; 0x40
    61b4:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    61b8:	2080      	movs	r0, #128	; 0x80
    61ba:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    61be:	4a24      	ldr	r2, [pc, #144]	; (6250 <_usb_d_dev_ep_enable+0x2a0>)
    61c0:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    61c4:	2000      	movs	r0, #0
    61c6:	72b0      	strb	r0, [r6, #10]
    61c8:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    61ca:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    61ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    61d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    61d6:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
	bank->ADDR.reg          = addr;
    61da:	016d      	lsls	r5, r5, #5
    61dc:	1953      	adds	r3, r2, r5
    61de:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    61e0:	685a      	ldr	r2, [r3, #4]
    61e2:	f364 329b 	bfi	r2, r4, #14, #14
    61e6:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    61e8:	685a      	ldr	r2, [r3, #4]
    61ea:	f360 020d 	bfi	r2, r0, #0, #14
    61ee:	605a      	str	r2, [r3, #4]
    61f0:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    61f4:	22b0      	movs	r2, #176	; 0xb0
    61f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    61fa:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    61fe:	461d      	mov	r5, r3
    6200:	2310      	movs	r3, #16
    6202:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    6206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6208:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    620c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    620e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    6212:	2705      	movs	r7, #5
    6214:	e7ca      	b.n	61ac <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6216:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    621a:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    621c:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    6220:	2703      	movs	r7, #3
    6222:	e7c3      	b.n	61ac <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6224:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6228:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    622a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    622e:	2706      	movs	r7, #6
    6230:	e7bc      	b.n	61ac <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6232:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6236:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6238:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    623c:	2704      	movs	r7, #4
    623e:	e7b5      	b.n	61ac <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6240:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6244:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6246:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    624a:	2702      	movs	r7, #2
    624c:	e7ae      	b.n	61ac <_usb_d_dev_ep_enable+0x1fc>
    624e:	bf00      	nop
    6250:	20001c74 	.word	0x20001c74
    6254:	0fffc000 	.word	0x0fffc000

00006258 <_usb_d_dev_ep_stall>:
{
    6258:	b470      	push	{r4, r5, r6}
    625a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    625c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    625e:	f010 000f 	ands.w	r0, r0, #15
    6262:	d008      	beq.n	6276 <_usb_d_dev_ep_stall+0x1e>
    6264:	2b00      	cmp	r3, #0
    6266:	bfb4      	ite	lt
    6268:	1d03      	addlt	r3, r0, #4
    626a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    626c:	2804      	cmp	r0, #4
    626e:	d903      	bls.n	6278 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    6270:	f06f 0011 	mvn.w	r0, #17
    6274:	e018      	b.n	62a8 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    6276:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    6278:	2901      	cmp	r1, #1
    627a:	d017      	beq.n	62ac <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    627c:	2900      	cmp	r1, #0
    627e:	d03a      	beq.n	62f6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6280:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6284:	4a45      	ldr	r2, [pc, #276]	; (639c <_usb_d_dev_ep_stall+0x144>)
    6286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    628a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    628e:	f003 030f 	and.w	r3, r3, #15
    6292:	015b      	lsls	r3, r3, #5
    6294:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6298:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    629c:	2310      	movs	r3, #16
    629e:	40a3      	lsls	r3, r4
    62a0:	421a      	tst	r2, r3
    62a2:	bf14      	ite	ne
    62a4:	2001      	movne	r0, #1
    62a6:	2000      	moveq	r0, #0
}
    62a8:	bc70      	pop	{r4, r5, r6}
    62aa:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    62ac:	2510      	movs	r5, #16
    62ae:	40a5      	lsls	r5, r4
    62b0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    62b2:	493a      	ldr	r1, [pc, #232]	; (639c <_usb_d_dev_ep_stall+0x144>)
    62b4:	009e      	lsls	r6, r3, #2
    62b6:	18f2      	adds	r2, r6, r3
    62b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    62bc:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    62c0:	f002 020f 	and.w	r2, r2, #15
    62c4:	0150      	lsls	r0, r2, #5
    62c6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    62ca:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    62ce:	2020      	movs	r0, #32
    62d0:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    62d4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    62d6:	0152      	lsls	r2, r2, #5
    62d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    62dc:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    62e0:	4433      	add	r3, r6
    62e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    62e6:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
    62ea:	f042 0208 	orr.w	r2, r2, #8
    62ee:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    62f2:	2000      	movs	r0, #0
    62f4:	e7d8      	b.n	62a8 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    62f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    62fa:	4928      	ldr	r1, [pc, #160]	; (639c <_usb_d_dev_ep_stall+0x144>)
    62fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6300:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
    6304:	f002 020f 	and.w	r2, r2, #15
    6308:	0151      	lsls	r1, r2, #5
    630a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    630e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6312:	2010      	movs	r0, #16
    6314:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    6316:	4205      	tst	r5, r0
    6318:	d03c      	beq.n	6394 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    631a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    631c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6320:	2020      	movs	r0, #32
    6322:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    6324:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6326:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    632a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    632e:	4202      	tst	r2, r0
    6330:	d007      	beq.n	6342 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6332:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    6336:	2201      	movs	r2, #1
    6338:	fa02 f404 	lsl.w	r4, r2, r4
    633c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    633e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    6342:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6346:	4815      	ldr	r0, [pc, #84]	; (639c <_usb_d_dev_ep_stall+0x144>)
    6348:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    634c:	f892 20c7 	ldrb.w	r2, [r2, #199]	; 0xc7
    6350:	f002 0207 	and.w	r2, r2, #7
    6354:	2a01      	cmp	r2, #1
    6356:	d00c      	beq.n	6372 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    6358:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    635c:	4a0f      	ldr	r2, [pc, #60]	; (639c <_usb_d_dev_ep_stall+0x144>)
    635e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6362:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
    6366:	f36f 02c3 	bfc	r2, #3, #1
    636a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    636e:	2000      	movs	r0, #0
    6370:	e79a      	b.n	62a8 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    6372:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    6376:	f012 0f30 	tst.w	r2, #48	; 0x30
    637a:	d10d      	bne.n	6398 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    637c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6380:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    6384:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
    6388:	f36f 02c3 	bfc	r2, #3, #1
    638c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    6390:	2000      	movs	r0, #0
    6392:	e789      	b.n	62a8 <_usb_d_dev_ep_stall+0x50>
    6394:	2000      	movs	r0, #0
    6396:	e787      	b.n	62a8 <_usb_d_dev_ep_stall+0x50>
    6398:	2000      	movs	r0, #0
    639a:	e785      	b.n	62a8 <_usb_d_dev_ep_stall+0x50>
    639c:	20001c74 	.word	0x20001c74

000063a0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    63a0:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    63a2:	f000 040f 	and.w	r4, r0, #15
    63a6:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    63a8:	4a14      	ldr	r2, [pc, #80]	; (63fc <_usb_d_dev_ep_read_req+0x5c>)
    63aa:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    63ac:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    63ae:	6840      	ldr	r0, [r0, #4]
    63b0:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    63b4:	2c04      	cmp	r4, #4
    63b6:	d817      	bhi.n	63e8 <_usb_d_dev_ep_read_req+0x48>
    63b8:	b1c9      	cbz	r1, 63ee <_usb_d_dev_ep_read_req+0x4e>
    63ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    63be:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    63c2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    63c4:	2a11      	cmp	r2, #17
    63c6:	d115      	bne.n	63f4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    63c8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    63cc:	f012 0f10 	tst.w	r2, #16
    63d0:	d102      	bne.n	63d8 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    63d2:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    63d4:	bc30      	pop	{r4, r5}
    63d6:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    63d8:	682c      	ldr	r4, [r5, #0]
    63da:	686a      	ldr	r2, [r5, #4]
    63dc:	600c      	str	r4, [r1, #0]
    63de:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    63e0:	2210      	movs	r2, #16
    63e2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    63e6:	e7f5      	b.n	63d4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    63e8:	f06f 0011 	mvn.w	r0, #17
    63ec:	e7f2      	b.n	63d4 <_usb_d_dev_ep_read_req+0x34>
    63ee:	f06f 0011 	mvn.w	r0, #17
    63f2:	e7ef      	b.n	63d4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    63f4:	f06f 0012 	mvn.w	r0, #18
    63f8:	e7ec      	b.n	63d4 <_usb_d_dev_ep_read_req+0x34>
    63fa:	bf00      	nop
    63fc:	20001c74 	.word	0x20001c74

00006400 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    6400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6404:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    6406:	7a03      	ldrb	r3, [r0, #8]
    6408:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    640a:	f013 030f 	ands.w	r3, r3, #15
    640e:	f000 80c2 	beq.w	6596 <_usb_d_dev_ep_trans+0x196>
    6412:	2e00      	cmp	r6, #0
    6414:	bfb4      	ite	lt
    6416:	1d1a      	addlt	r2, r3, #4
    6418:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    641a:	4614      	mov	r4, r2
    641c:	4969      	ldr	r1, [pc, #420]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    641e:	f101 07a0 	add.w	r7, r1, #160	; 0xa0
    6422:	1c55      	adds	r5, r2, #1
    6424:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    6428:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    642c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    6430:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6434:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
    6438:	f240 31ff 	movw	r1, #1023	; 0x3ff
    643c:	428a      	cmp	r2, r1
    643e:	d025      	beq.n	648c <_usb_d_dev_ep_trans+0x8c>
    6440:	1e55      	subs	r5, r2, #1
    6442:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    6444:	6841      	ldr	r1, [r0, #4]
    6446:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    6448:	2b04      	cmp	r3, #4
    644a:	f200 8092 	bhi.w	6572 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    644e:	6803      	ldr	r3, [r0, #0]
    6450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6454:	d31c      	bcc.n	6490 <_usb_d_dev_ep_trans+0x90>
    6456:	eb03 0c01 	add.w	ip, r3, r1
    645a:	f8df e180 	ldr.w	lr, [pc, #384]	; 65dc <_usb_d_dev_ep_trans+0x1dc>
    645e:	45f4      	cmp	ip, lr
    6460:	d816      	bhi.n	6490 <_usb_d_dev_ep_trans+0x90>
    6462:	f013 0f03 	tst.w	r3, #3
    6466:	d113      	bne.n	6490 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    6468:	2e00      	cmp	r6, #0
    646a:	db2a      	blt.n	64c2 <_usb_d_dev_ep_trans+0xc2>
    646c:	428a      	cmp	r2, r1
    646e:	f200 809c 	bhi.w	65aa <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    6472:	b34d      	cbz	r5, 64c8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    6474:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    6478:	4a52      	ldr	r2, [pc, #328]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    647a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    647e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6482:	2b00      	cmp	r3, #0
    6484:	d07b      	beq.n	657e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    6486:	f04f 0800 	mov.w	r8, #0
    648a:	e00c      	b.n	64a6 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    648c:	4615      	mov	r5, r2
    648e:	e7d9      	b.n	6444 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    6490:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    6494:	4a4b      	ldr	r2, [pc, #300]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    6496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    649a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    649e:	2b00      	cmp	r3, #0
    64a0:	d06a      	beq.n	6578 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    64a2:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    64a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    64aa:	4a46      	ldr	r2, [pc, #280]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    64ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    64b0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    64b4:	f013 0f08 	tst.w	r3, #8
    64b8:	d009      	beq.n	64ce <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    64ba:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    64bc:	b003      	add	sp, #12
    64be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    64c2:	f04f 0800 	mov.w	r8, #0
    64c6:	e7ee      	b.n	64a6 <_usb_d_dev_ep_trans+0xa6>
    64c8:	f04f 0800 	mov.w	r8, #0
    64cc:	e7eb      	b.n	64a6 <_usb_d_dev_ep_trans+0xa6>
    64ce:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    64d0:	a801      	add	r0, sp, #4
    64d2:	4b3d      	ldr	r3, [pc, #244]	; (65c8 <_usb_d_dev_ep_trans+0x1c8>)
    64d4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    64d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    64da:	4a3a      	ldr	r2, [pc, #232]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    64dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    64e0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    64e4:	f013 0f40 	tst.w	r3, #64	; 0x40
    64e8:	d13c      	bne.n	6564 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    64ea:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    64ee:	4b35      	ldr	r3, [pc, #212]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    64f0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    64f4:	f899 30c7 	ldrb.w	r3, [r9, #199]	; 0xc7
    64f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    64fc:	f889 30c7 	strb.w	r3, [r9, #199]	; 0xc7
	atomic_leave_critical(&flags);
    6500:	a801      	add	r0, sp, #4
    6502:	4b32      	ldr	r3, [pc, #200]	; (65cc <_usb_d_dev_ep_trans+0x1cc>)
    6504:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    6506:	f8da 3000 	ldr.w	r3, [sl]
    650a:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
	ept->trans_size  = trans->size;
    650e:	f8da 3004 	ldr.w	r3, [sl, #4]
    6512:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
	ept->trans_count = 0;
    6516:	2300      	movs	r3, #0
    6518:	f8c9 30bc 	str.w	r3, [r9, #188]	; 0xbc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    651c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    651e:	f899 30c7 	ldrb.w	r3, [r9, #199]	; 0xc7
    6522:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    6526:	f368 1345 	bfi	r3, r8, #5, #1
    652a:	f889 30c7 	strb.w	r3, [r9, #199]	; 0xc7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    652e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    6532:	b1e3      	cbz	r3, 656e <_usb_d_dev_ep_trans+0x16e>
    6534:	fab5 f585 	clz	r5, r5
    6538:	096d      	lsrs	r5, r5, #5
    653a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    653e:	4b21      	ldr	r3, [pc, #132]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    6540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    6544:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
    6548:	f365 1304 	bfi	r3, r5, #4, #1
    654c:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	if (dir) {
    6550:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    6552:	f04f 0100 	mov.w	r1, #0
    6556:	4638      	mov	r0, r7
    6558:	bfb4      	ite	lt
    655a:	4b1d      	ldrlt	r3, [pc, #116]	; (65d0 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    655c:	4b1d      	ldrge	r3, [pc, #116]	; (65d4 <_usb_d_dev_ep_trans+0x1d4>)
    655e:	4798      	blx	r3
	return ERR_NONE;
    6560:	2000      	movs	r0, #0
    6562:	e7ab      	b.n	64bc <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    6564:	a801      	add	r0, sp, #4
    6566:	4b19      	ldr	r3, [pc, #100]	; (65cc <_usb_d_dev_ep_trans+0x1cc>)
    6568:	4798      	blx	r3
		return USB_BUSY;
    656a:	2001      	movs	r0, #1
    656c:	e7a6      	b.n	64bc <_usb_d_dev_ep_trans+0xbc>
    656e:	2500      	movs	r5, #0
    6570:	e7e3      	b.n	653a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    6572:	f06f 0011 	mvn.w	r0, #17
    6576:	e7a1      	b.n	64bc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    6578:	f06f 0012 	mvn.w	r0, #18
    657c:	e79e      	b.n	64bc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    657e:	f06f 0011 	mvn.w	r0, #17
    6582:	e79b      	b.n	64bc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    6584:	f06f 0012 	mvn.w	r0, #18
    6588:	e798      	b.n	64bc <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    658a:	6841      	ldr	r1, [r0, #4]
    658c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    6590:	4f11      	ldr	r7, [pc, #68]	; (65d8 <_usb_d_dev_ep_trans+0x1d8>)
    6592:	2400      	movs	r4, #0
    6594:	e75b      	b.n	644e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    6596:	4a0b      	ldr	r2, [pc, #44]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    6598:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
    659c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    65a0:	428a      	cmp	r2, r1
    65a2:	d0f2      	beq.n	658a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    65a4:	4f0c      	ldr	r7, [pc, #48]	; (65d8 <_usb_d_dev_ep_trans+0x1d8>)
    65a6:	2400      	movs	r4, #0
    65a8:	e74a      	b.n	6440 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    65aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    65ae:	4a05      	ldr	r2, [pc, #20]	; (65c4 <_usb_d_dev_ep_trans+0x1c4>)
    65b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    65b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    65b8:	2b00      	cmp	r3, #0
    65ba:	d0e3      	beq.n	6584 <_usb_d_dev_ep_trans+0x184>
    65bc:	f04f 0801 	mov.w	r8, #1
    65c0:	e771      	b.n	64a6 <_usb_d_dev_ep_trans+0xa6>
    65c2:	bf00      	nop
    65c4:	20001c74 	.word	0x20001c74
    65c8:	00006875 	.word	0x00006875
    65cc:	00006883 	.word	0x00006883
    65d0:	00005625 	.word	0x00005625
    65d4:	000057a9 	.word	0x000057a9
    65d8:	20001d28 	.word	0x20001d28
    65dc:	20041fff 	.word	0x20041fff

000065e0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    65e0:	b508      	push	{r3, lr}
    65e2:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    65e4:	f010 000f 	ands.w	r0, r0, #15
    65e8:	d00c      	beq.n	6604 <_usb_d_dev_ep_abort+0x24>
    65ea:	2900      	cmp	r1, #0
    65ec:	bfb4      	ite	lt
    65ee:	1d03      	addlt	r3, r0, #4
    65f0:	4603      	movge	r3, r0
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    65f2:	2804      	cmp	r0, #4
    65f4:	d900      	bls.n	65f8 <_usb_d_dev_ep_abort+0x18>
    65f6:	bd08      	pop	{r3, pc}
	return &dev_inst.ep[ep_index];
    65f8:	2014      	movs	r0, #20
    65fa:	fb03 0300 	mla	r3, r3, r0, r0
    65fe:	4804      	ldr	r0, [pc, #16]	; (6610 <_usb_d_dev_ep_abort+0x30>)
    6600:	4418      	add	r0, r3
    6602:	e000      	b.n	6606 <_usb_d_dev_ep_abort+0x26>
    6604:	4803      	ldr	r0, [pc, #12]	; (6614 <_usb_d_dev_ep_abort+0x34>)
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    6606:	2202      	movs	r2, #2
    6608:	0fc9      	lsrs	r1, r1, #31
    660a:	4b03      	ldr	r3, [pc, #12]	; (6618 <_usb_d_dev_ep_abort+0x38>)
    660c:	4798      	blx	r3
    660e:	e7f2      	b.n	65f6 <_usb_d_dev_ep_abort+0x16>
    6610:	20001d14 	.word	0x20001d14
    6614:	20001d28 	.word	0x20001d28
    6618:	00005475 	.word	0x00005475

0000661c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    661c:	4b07      	ldr	r3, [pc, #28]	; (663c <_usb_d_dev_register_callback+0x20>)
    661e:	2900      	cmp	r1, #0
    6620:	bf08      	it	eq
    6622:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    6624:	2801      	cmp	r0, #1
    6626:	d004      	beq.n	6632 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    6628:	b910      	cbnz	r0, 6630 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    662a:	4b05      	ldr	r3, [pc, #20]	; (6640 <_usb_d_dev_register_callback+0x24>)
    662c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    6630:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    6632:	4b03      	ldr	r3, [pc, #12]	; (6640 <_usb_d_dev_register_callback+0x24>)
    6634:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
    6638:	4770      	bx	lr
    663a:	bf00      	nop
    663c:	00005395 	.word	0x00005395
    6640:	20001c74 	.word	0x20001c74

00006644 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    6644:	4b0a      	ldr	r3, [pc, #40]	; (6670 <_usb_d_dev_register_ep_callback+0x2c>)
    6646:	2900      	cmp	r1, #0
    6648:	bf08      	it	eq
    664a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    664c:	4603      	mov	r3, r0
    664e:	b138      	cbz	r0, 6660 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    6650:	2801      	cmp	r0, #1
    6652:	d009      	beq.n	6668 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    6654:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    6656:	bf04      	itt	eq
    6658:	4b06      	ldreq	r3, [pc, #24]	; (6674 <_usb_d_dev_register_ep_callback+0x30>)
    665a:	f8c3 10b0 	streq.w	r1, [r3, #176]	; 0xb0
    665e:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    6660:	4b04      	ldr	r3, [pc, #16]	; (6674 <_usb_d_dev_register_ep_callback+0x30>)
    6662:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    6666:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    6668:	4b02      	ldr	r3, [pc, #8]	; (6674 <_usb_d_dev_register_ep_callback+0x30>)
    666a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    666e:	4770      	bx	lr
    6670:	00005395 	.word	0x00005395
    6674:	20001c74 	.word	0x20001c74

00006678 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    6678:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    667a:	4b01      	ldr	r3, [pc, #4]	; (6680 <USB_0_Handler+0x8>)
    667c:	4798      	blx	r3
    667e:	bd08      	pop	{r3, pc}
    6680:	00005999 	.word	0x00005999

00006684 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    6684:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    6686:	4b01      	ldr	r3, [pc, #4]	; (668c <USB_1_Handler+0x8>)
    6688:	4798      	blx	r3
    668a:	bd08      	pop	{r3, pc}
    668c:	00005999 	.word	0x00005999

00006690 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    6690:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    6692:	4b01      	ldr	r3, [pc, #4]	; (6698 <USB_2_Handler+0x8>)
    6694:	4798      	blx	r3
    6696:	bd08      	pop	{r3, pc}
    6698:	00005999 	.word	0x00005999

0000669c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    669c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    669e:	4b01      	ldr	r3, [pc, #4]	; (66a4 <USB_3_Handler+0x8>)
    66a0:	4798      	blx	r3
    66a2:	bd08      	pop	{r3, pc}
    66a4:	00005999 	.word	0x00005999

000066a8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    66a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    66aa:	4604      	mov	r4, r0
    66ac:	b340      	cbz	r0, 6700 <_wdt_init+0x58>
    66ae:	6800      	ldr	r0, [r0, #0]
    66b0:	3000      	adds	r0, #0
    66b2:	bf18      	it	ne
    66b4:	2001      	movne	r0, #1
    66b6:	2250      	movs	r2, #80	; 0x50
    66b8:	4915      	ldr	r1, [pc, #84]	; (6710 <_wdt_init+0x68>)
    66ba:	4b16      	ldr	r3, [pc, #88]	; (6714 <_wdt_init+0x6c>)
    66bc:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    66be:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    66c0:	689a      	ldr	r2, [r3, #8]
    66c2:	f012 0f0e 	tst.w	r2, #14
    66c6:	d1fb      	bne.n	66c0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    66c8:	781a      	ldrb	r2, [r3, #0]
    66ca:	09d2      	lsrs	r2, r2, #7
    66cc:	d11a      	bne.n	6704 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    66ce:	689a      	ldr	r2, [r3, #8]
    66d0:	f012 0f0e 	tst.w	r2, #14
    66d4:	d1fb      	bne.n	66ce <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    66d6:	781a      	ldrb	r2, [r3, #0]
    66d8:	f012 0f02 	tst.w	r2, #2
    66dc:	d115      	bne.n	670a <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    66de:	781a      	ldrb	r2, [r3, #0]
    66e0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    66e4:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    66e6:	689a      	ldr	r2, [r3, #8]
    66e8:	f012 0f0e 	tst.w	r2, #14
    66ec:	d1fb      	bne.n	66e6 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    66ee:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    66f0:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    66f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    66f6:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    66fa:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    66fc:	2000      	movs	r0, #0
    66fe:	bd10      	pop	{r4, pc}
    6700:	2000      	movs	r0, #0
    6702:	e7d8      	b.n	66b6 <_wdt_init+0xe>
		return ERR_DENIED;
    6704:	f06f 0010 	mvn.w	r0, #16
    6708:	bd10      	pop	{r4, pc}
    670a:	f06f 0010 	mvn.w	r0, #16
}
    670e:	bd10      	pop	{r4, pc}
    6710:	0000dae0 	.word	0x0000dae0
    6714:	00003565 	.word	0x00003565

00006718 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    6718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    671c:	4b33      	ldr	r3, [pc, #204]	; (67ec <QSPI_N25Q256_exit_xip+0xd4>)
    671e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    6722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6726:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    672a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    672e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6732:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    673a:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    673e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6742:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6746:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    674a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    674e:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6752:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6756:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    675a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    675e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6762:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6766:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    676a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    676e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6772:	f44f 7480 	mov.w	r4, #256	; 0x100
    6776:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6778:	4a1d      	ldr	r2, [pc, #116]	; (67f0 <QSPI_N25Q256_exit_xip+0xd8>)
    677a:	629a      	str	r2, [r3, #40]	; 0x28
    677c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    6780:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6782:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6786:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    678a:	491a      	ldr	r1, [pc, #104]	; (67f4 <QSPI_N25Q256_exit_xip+0xdc>)
    678c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    6790:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6794:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6798:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    679c:	4d16      	ldr	r5, [pc, #88]	; (67f8 <QSPI_N25Q256_exit_xip+0xe0>)
    679e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
    67a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67a6:	619c      	str	r4, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    67a8:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    67ac:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94

	gpio_set_pin_level(FLASH_IO0, true);
	gpio_set_pin_level(FLASH_CS, false);
	gpio_set_pin_level(FLASH_CLK, false);

	delay_us(1);
    67b0:	2001      	movs	r0, #1
    67b2:	4b12      	ldr	r3, [pc, #72]	; (67fc <QSPI_N25Q256_exit_xip+0xe4>)
    67b4:	4798      	blx	r3
    67b6:	2407      	movs	r4, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67b8:	4e0c      	ldr	r6, [pc, #48]	; (67ec <QSPI_N25Q256_exit_xip+0xd4>)
    67ba:	f44f 6780 	mov.w	r7, #1024	; 0x400
    67be:	46b8      	mov	r8, r7
    67c0:	f8c6 8098 	str.w	r8, [r6, #152]	; 0x98

	for (int i = 0; i < 7; i++) {
		gpio_set_pin_level(FLASH_CLK, true);
		delay_us(1);
    67c4:	2001      	movs	r0, #1
    67c6:	4d0d      	ldr	r5, [pc, #52]	; (67fc <QSPI_N25Q256_exit_xip+0xe4>)
    67c8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    67ca:	f8c6 7094 	str.w	r7, [r6, #148]	; 0x94
		gpio_set_pin_level(FLASH_CLK, false);
		delay_us(1);
    67ce:	2001      	movs	r0, #1
    67d0:	47a8      	blx	r5
	for (int i = 0; i < 7; i++) {
    67d2:	3c01      	subs	r4, #1
    67d4:	d1f4      	bne.n	67c0 <QSPI_N25Q256_exit_xip+0xa8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    67da:	4b04      	ldr	r3, [pc, #16]	; (67ec <QSPI_N25Q256_exit_xip+0xd4>)
    67dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	gpio_set_pin_level(FLASH_CS, true);
	delay_us(1);
    67e0:	2001      	movs	r0, #1
    67e2:	47a8      	blx	r5
	QSPI_N25Q256_PORT_init();
    67e4:	4b06      	ldr	r3, [pc, #24]	; (6800 <QSPI_N25Q256_exit_xip+0xe8>)
    67e6:	4798      	blx	r3
    67e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67ec:	41008000 	.word	0x41008000
    67f0:	40000100 	.word	0x40000100
    67f4:	40000800 	.word	0x40000800
    67f8:	40000400 	.word	0x40000400
    67fc:	000024fd 	.word	0x000024fd
    6800:	000017b5 	.word	0x000017b5

00006804 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    6804:	b510      	push	{r4, lr}

	qspi_sync_enable(&QSPI_N25Q256);
    6806:	4c06      	ldr	r4, [pc, #24]	; (6820 <spi_nor_flash_init+0x1c>)
    6808:	4620      	mov	r0, r4
    680a:	4b06      	ldr	r3, [pc, #24]	; (6824 <spi_nor_flash_init+0x20>)
    680c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    680e:	2300      	movs	r3, #0
    6810:	4a05      	ldr	r2, [pc, #20]	; (6828 <spi_nor_flash_init+0x24>)
    6812:	4621      	mov	r1, r4
    6814:	4805      	ldr	r0, [pc, #20]	; (682c <spi_nor_flash_init+0x28>)
    6816:	4c06      	ldr	r4, [pc, #24]	; (6830 <spi_nor_flash_init+0x2c>)
    6818:	47a0      	blx	r4
    681a:	4b06      	ldr	r3, [pc, #24]	; (6834 <spi_nor_flash_init+0x30>)
    681c:	6018      	str	r0, [r3, #0]
    681e:	bd10      	pop	{r4, pc}
    6820:	20003790 	.word	0x20003790
    6824:	000028e5 	.word	0x000028e5
    6828:	00006719 	.word	0x00006719
    682c:	2000201c 	.word	0x2000201c
    6830:	00006e25 	.word	0x00006e25
    6834:	200038f0 	.word	0x200038f0

00006838 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    6838:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    683a:	4805      	ldr	r0, [pc, #20]	; (6850 <cdc_device_acm_init+0x18>)
    683c:	4b05      	ldr	r3, [pc, #20]	; (6854 <cdc_device_acm_init+0x1c>)
    683e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    6840:	4b05      	ldr	r3, [pc, #20]	; (6858 <cdc_device_acm_init+0x20>)
    6842:	4798      	blx	r3

	usbdc_start(single_desc);
    6844:	4805      	ldr	r0, [pc, #20]	; (685c <cdc_device_acm_init+0x24>)
    6846:	4b06      	ldr	r3, [pc, #24]	; (6860 <cdc_device_acm_init+0x28>)
    6848:	4798      	blx	r3
	usbdc_attach();
    684a:	4b06      	ldr	r3, [pc, #24]	; (6864 <cdc_device_acm_init+0x2c>)
    684c:	4798      	blx	r3
    684e:	bd08      	pop	{r3, pc}
    6850:	2000206c 	.word	0x2000206c
    6854:	000077cd 	.word	0x000077cd
    6858:	000070bd 	.word	0x000070bd
    685c:	200000c8 	.word	0x200000c8
    6860:	0000783d 	.word	0x0000783d
    6864:	00007871 	.word	0x00007871

00006868 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    6868:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    686a:	4b01      	ldr	r3, [pc, #4]	; (6870 <usb_init+0x8>)
    686c:	4798      	blx	r3
    686e:	bd08      	pop	{r3, pc}
    6870:	00006839 	.word	0x00006839

00006874 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    6874:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    6878:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    687a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    687c:	f3bf 8f5f 	dmb	sy
    6880:	4770      	bx	lr

00006882 <atomic_leave_critical>:
    6882:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    6886:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    6888:	f383 8810 	msr	PRIMASK, r3
    688c:	4770      	bx	lr
	...

00006890 <n25q256a_read>:
	n25q256a_switch_mode(me, quad_mode);
	return me;
}

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    6890:	b570      	push	{r4, r5, r6, lr}
    6892:	b086      	sub	sp, #24
	struct n25q256a *            n25q  = (struct n25q256a *)me;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6894:	6806      	ldr	r6, [r0, #0]

	struct _qspi_command cmd = {
    6896:	2400      	movs	r4, #0
    6898:	9400      	str	r4, [sp, #0]
    689a:	9401      	str	r4, [sp, #4]
    689c:	9404      	str	r4, [sp, #16]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    689e:	7b00      	ldrb	r0, [r0, #12]
    68a0:	bb10      	cbnz	r0, 68e8 <n25q256a_read+0x58>
	struct _qspi_command cmd = {
    68a2:	f89d 4000 	ldrb.w	r4, [sp]
    68a6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
    68aa:	f044 04b0 	orr.w	r4, r4, #176	; 0xb0
    68ae:	f88d 4000 	strb.w	r4, [sp]
    68b2:	f89d 0001 	ldrb.w	r0, [sp, #1]
    68b6:	2401      	movs	r4, #1
    68b8:	f364 1005 	bfi	r0, r4, #4, #2
    68bc:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    68c0:	2508      	movs	r5, #8
	struct _qspi_command cmd = {
    68c2:	f89d 4002 	ldrb.w	r4, [sp, #2]
    68c6:	f365 0404 	bfi	r4, r5, #0, #5
    68ca:	f88d 4002 	strb.w	r4, [sp, #2]
    68ce:	200b      	movs	r0, #11
    68d0:	f88d 0004 	strb.w	r0, [sp, #4]
    68d4:	9202      	str	r2, [sp, #8]
    68d6:	9303      	str	r3, [sp, #12]
    68d8:	9105      	str	r1, [sp, #20]
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    68da:	4669      	mov	r1, sp
    68dc:	4630      	mov	r0, r6
    68de:	4b0b      	ldr	r3, [pc, #44]	; (690c <n25q256a_read+0x7c>)
    68e0:	4798      	blx	r3
	return ERR_NONE;
}
    68e2:	2000      	movs	r0, #0
    68e4:	b006      	add	sp, #24
    68e6:	bd70      	pop	{r4, r5, r6, pc}
	struct _qspi_command cmd = {
    68e8:	f89d 4000 	ldrb.w	r4, [sp]
    68ec:	2006      	movs	r0, #6
    68ee:	f360 0402 	bfi	r4, r0, #0, #3
    68f2:	f064 044f 	orn	r4, r4, #79	; 0x4f
    68f6:	f88d 4000 	strb.w	r4, [sp]
    68fa:	f89d 0001 	ldrb.w	r0, [sp, #1]
    68fe:	2401      	movs	r4, #1
    6900:	f364 1005 	bfi	r0, r4, #4, #2
    6904:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    6908:	250a      	movs	r5, #10
    690a:	e7da      	b.n	68c2 <n25q256a_read+0x32>
    690c:	00002935 	.word	0x00002935

00006910 <n25q256a_xip_confirm>:
{
    6910:	b530      	push	{r4, r5, lr}
    6912:	b089      	sub	sp, #36	; 0x24
    6914:	4604      	mov	r4, r0
    6916:	460d      	mov	r5, r1
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6918:	6800      	ldr	r0, [r0, #0]
	struct _qspi_command         cmd
    691a:	2300      	movs	r3, #0
    691c:	9301      	str	r3, [sp, #4]
    691e:	9302      	str	r3, [sp, #8]
    6920:	9303      	str	r3, [sp, #12]
    6922:	9305      	str	r3, [sp, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    6924:	7b23      	ldrb	r3, [r4, #12]
    6926:	bb7b      	cbnz	r3, 6988 <n25q256a_xip_confirm+0x78>
	struct _qspi_command         cmd
    6928:	f89d 3004 	ldrb.w	r3, [sp, #4]
    692c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    6930:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    6934:	f88d 3004 	strb.w	r3, [sp, #4]
    6938:	f89d 3005 	ldrb.w	r3, [sp, #5]
    693c:	f043 0303 	orr.w	r3, r3, #3
    6940:	2201      	movs	r2, #1
    6942:	f362 1305 	bfi	r3, r2, #4, #2
    6946:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    694a:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    694c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6950:	f362 0304 	bfi	r3, r2, #0, #5
    6954:	f88d 3006 	strb.w	r3, [sp, #6]
    6958:	230b      	movs	r3, #11
    695a:	f88d 3008 	strb.w	r3, [sp, #8]
    695e:	f085 0301 	eor.w	r3, r5, #1
    6962:	425b      	negs	r3, r3
    6964:	f88d 3009 	strb.w	r3, [sp, #9]
    6968:	2301      	movs	r3, #1
    696a:	9304      	str	r3, [sp, #16]
    696c:	f10d 031f 	add.w	r3, sp, #31
    6970:	9306      	str	r3, [sp, #24]
	qspi_sync_serial_run_command(descr, &cmd);
    6972:	a901      	add	r1, sp, #4
    6974:	4b0e      	ldr	r3, [pc, #56]	; (69b0 <n25q256a_xip_confirm+0xa0>)
    6976:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    6978:	2d00      	cmp	r5, #0
    697a:	bf14      	ite	ne
    697c:	2302      	movne	r3, #2
    697e:	2301      	moveq	r3, #1
    6980:	7363      	strb	r3, [r4, #13]
}
    6982:	2000      	movs	r0, #0
    6984:	b009      	add	sp, #36	; 0x24
    6986:	bd30      	pop	{r4, r5, pc}
	struct _qspi_command         cmd
    6988:	f89d 3004 	ldrb.w	r3, [sp, #4]
    698c:	2206      	movs	r2, #6
    698e:	f362 0302 	bfi	r3, r2, #0, #3
    6992:	f063 030f 	orn	r3, r3, #15
    6996:	f88d 3004 	strb.w	r3, [sp, #4]
    699a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    699e:	f043 0303 	orr.w	r3, r3, #3
    69a2:	2201      	movs	r2, #1
    69a4:	f362 1305 	bfi	r3, r2, #4, #2
    69a8:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    69ac:	2208      	movs	r2, #8
    69ae:	e7cd      	b.n	694c <n25q256a_xip_confirm+0x3c>
    69b0:	00002935 	.word	0x00002935

000069b4 <n25q256a_read_reg>:
{
    69b4:	b530      	push	{r4, r5, lr}
    69b6:	b089      	sub	sp, #36	; 0x24
    69b8:	4604      	mov	r4, r0
	uint32_t                     status = 0;
    69ba:	2300      	movs	r3, #0
    69bc:	9307      	str	r3, [sp, #28]
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    69be:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    69c0:	9301      	str	r3, [sp, #4]
    69c2:	9302      	str	r3, [sp, #8]
    69c4:	9303      	str	r3, [sp, #12]
    69c6:	9305      	str	r3, [sp, #20]
    69c8:	f001 0107 	and.w	r1, r1, #7
    69cc:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    69d0:	f88d 1004 	strb.w	r1, [sp, #4]
    69d4:	f88d 2008 	strb.w	r2, [sp, #8]
    69d8:	2301      	movs	r3, #1
    69da:	9304      	str	r3, [sp, #16]
    69dc:	ab07      	add	r3, sp, #28
    69de:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
    69e0:	7b43      	ldrb	r3, [r0, #13]
    69e2:	b943      	cbnz	r3, 69f6 <n25q256a_read_reg+0x42>
	qspi_sync_serial_run_command(descr, &cmd);
    69e4:	a901      	add	r1, sp, #4
    69e6:	4628      	mov	r0, r5
    69e8:	4b07      	ldr	r3, [pc, #28]	; (6a08 <n25q256a_read_reg+0x54>)
    69ea:	4798      	blx	r3
	if (n25q->xip_mode) {
    69ec:	7b63      	ldrb	r3, [r4, #13]
    69ee:	b933      	cbnz	r3, 69fe <n25q256a_read_reg+0x4a>
}
    69f0:	9807      	ldr	r0, [sp, #28]
    69f2:	b009      	add	sp, #36	; 0x24
    69f4:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
    69f6:	2100      	movs	r1, #0
    69f8:	4b04      	ldr	r3, [pc, #16]	; (6a0c <n25q256a_read_reg+0x58>)
    69fa:	4798      	blx	r3
    69fc:	e7f2      	b.n	69e4 <n25q256a_read_reg+0x30>
		n25q256a_xip_confirm(me, true);
    69fe:	2101      	movs	r1, #1
    6a00:	4620      	mov	r0, r4
    6a02:	4b02      	ldr	r3, [pc, #8]	; (6a0c <n25q256a_read_reg+0x58>)
    6a04:	4798      	blx	r3
    6a06:	e7f3      	b.n	69f0 <n25q256a_read_reg+0x3c>
    6a08:	00002935 	.word	0x00002935
    6a0c:	00006911 	.word	0x00006911

00006a10 <n25q256a_disable_xip>:
	}
	return ERR_NONE;
}

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    6a10:	b570      	push	{r4, r5, r6, lr}
    6a12:	4604      	mov	r4, r0
	struct n25q256a *            n25q  = (struct n25q256a *)me;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6a14:	6806      	ldr	r6, [r0, #0]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    6a16:	7b05      	ldrb	r5, [r0, #12]
    6a18:	2d00      	cmp	r5, #0
    6a1a:	bf18      	it	ne
    6a1c:	2506      	movne	r5, #6
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    6a1e:	2100      	movs	r1, #0
    6a20:	4b0d      	ldr	r3, [pc, #52]	; (6a58 <n25q256a_disable_xip+0x48>)
    6a22:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    6a24:	2285      	movs	r2, #133	; 0x85
    6a26:	4629      	mov	r1, r5
    6a28:	4620      	mov	r0, r4
    6a2a:	4b0c      	ldr	r3, [pc, #48]	; (6a5c <n25q256a_disable_xip+0x4c>)
    6a2c:	4798      	blx	r3
	if (!(vcfg & (1u << 3))) {
    6a2e:	f010 0f08 	tst.w	r0, #8
    6a32:	d10e      	bne.n	6a52 <n25q256a_disable_xip+0x42>
		if (n25q->pin_exit_xip) {
    6a34:	68a3      	ldr	r3, [r4, #8]
    6a36:	b163      	cbz	r3, 6a52 <n25q256a_disable_xip+0x42>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    6a38:	6835      	ldr	r5, [r6, #0]
			qspi_sync_disable(descr);
    6a3a:	4630      	mov	r0, r6
    6a3c:	4b08      	ldr	r3, [pc, #32]	; (6a60 <n25q256a_disable_xip+0x50>)
    6a3e:	4798      	blx	r3
			n25q->pin_exit_xip();
    6a40:	68a3      	ldr	r3, [r4, #8]
    6a42:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    6a44:	4629      	mov	r1, r5
    6a46:	4630      	mov	r0, r6
    6a48:	4b06      	ldr	r3, [pc, #24]	; (6a64 <n25q256a_disable_xip+0x54>)
    6a4a:	4798      	blx	r3
			qspi_sync_enable(descr);
    6a4c:	4630      	mov	r0, r6
    6a4e:	4b06      	ldr	r3, [pc, #24]	; (6a68 <n25q256a_disable_xip+0x58>)
    6a50:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    6a52:	2000      	movs	r0, #0
    6a54:	7360      	strb	r0, [r4, #13]
	return ERR_NONE;
}
    6a56:	bd70      	pop	{r4, r5, r6, pc}
    6a58:	00006911 	.word	0x00006911
    6a5c:	000069b5 	.word	0x000069b5
    6a60:	0000290d 	.word	0x0000290d
    6a64:	000028b5 	.word	0x000028b5
    6a68:	000028e5 	.word	0x000028e5

00006a6c <n25q256a_write_reg>:
{
    6a6c:	b530      	push	{r4, r5, lr}
    6a6e:	b089      	sub	sp, #36	; 0x24
    6a70:	4604      	mov	r4, r0
    6a72:	9301      	str	r3, [sp, #4]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6a74:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    6a76:	2300      	movs	r3, #0
    6a78:	9302      	str	r3, [sp, #8]
    6a7a:	9303      	str	r3, [sp, #12]
    6a7c:	9304      	str	r3, [sp, #16]
    6a7e:	9307      	str	r3, [sp, #28]
    6a80:	f001 0107 	and.w	r1, r1, #7
    6a84:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    6a88:	f88d 1008 	strb.w	r1, [sp, #8]
    6a8c:	2102      	movs	r1, #2
    6a8e:	f361 1305 	bfi	r3, r1, #4, #2
    6a92:	f88d 3009 	strb.w	r3, [sp, #9]
    6a96:	f88d 200c 	strb.w	r2, [sp, #12]
    6a9a:	2301      	movs	r3, #1
    6a9c:	9305      	str	r3, [sp, #20]
    6a9e:	ab01      	add	r3, sp, #4
    6aa0:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
    6aa2:	7b43      	ldrb	r3, [r0, #13]
    6aa4:	b93b      	cbnz	r3, 6ab6 <n25q256a_write_reg+0x4a>
	qspi_sync_serial_run_command(descr, &cmd);
    6aa6:	a902      	add	r1, sp, #8
    6aa8:	4628      	mov	r0, r5
    6aaa:	4b07      	ldr	r3, [pc, #28]	; (6ac8 <n25q256a_write_reg+0x5c>)
    6aac:	4798      	blx	r3
	if (n25q->xip_mode) {
    6aae:	7b63      	ldrb	r3, [r4, #13]
    6ab0:	b92b      	cbnz	r3, 6abe <n25q256a_write_reg+0x52>
}
    6ab2:	b009      	add	sp, #36	; 0x24
    6ab4:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
    6ab6:	2100      	movs	r1, #0
    6ab8:	4b04      	ldr	r3, [pc, #16]	; (6acc <n25q256a_write_reg+0x60>)
    6aba:	4798      	blx	r3
    6abc:	e7f3      	b.n	6aa6 <n25q256a_write_reg+0x3a>
		n25q256a_xip_confirm(me, true);
    6abe:	2101      	movs	r1, #1
    6ac0:	4620      	mov	r0, r4
    6ac2:	4b02      	ldr	r3, [pc, #8]	; (6acc <n25q256a_write_reg+0x60>)
    6ac4:	4798      	blx	r3
}
    6ac6:	e7f4      	b.n	6ab2 <n25q256a_write_reg+0x46>
    6ac8:	00002935 	.word	0x00002935
    6acc:	00006911 	.word	0x00006911

00006ad0 <n25q256a_enable_xip>:
{
    6ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    6ad2:	7b05      	ldrb	r5, [r0, #12]
    6ad4:	2d00      	cmp	r5, #0
    6ad6:	bf18      	it	ne
    6ad8:	2506      	movne	r5, #6
	if (!n25q->xip_mode) {
    6ada:	7b43      	ldrb	r3, [r0, #13]
    6adc:	b10b      	cbz	r3, 6ae2 <n25q256a_enable_xip+0x12>
}
    6ade:	2000      	movs	r0, #0
    6ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ae2:	4604      	mov	r4, r0
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    6ae4:	2285      	movs	r2, #133	; 0x85
    6ae6:	4629      	mov	r1, r5
    6ae8:	4b0d      	ldr	r3, [pc, #52]	; (6b20 <n25q256a_enable_xip+0x50>)
    6aea:	4798      	blx	r3
		if (vcfg & (1u << 3)) {
    6aec:	f010 0f08 	tst.w	r0, #8
    6af0:	d105      	bne.n	6afe <n25q256a_enable_xip+0x2e>
		n25q->xip_mode = 1;
    6af2:	2101      	movs	r1, #1
    6af4:	7361      	strb	r1, [r4, #13]
		n25q256a_xip_confirm(me, true);
    6af6:	4620      	mov	r0, r4
    6af8:	4b0a      	ldr	r3, [pc, #40]	; (6b24 <n25q256a_enable_xip+0x54>)
    6afa:	4798      	blx	r3
    6afc:	e7ef      	b.n	6ade <n25q256a_enable_xip+0xe>
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    6afe:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
    6b02:	2281      	movs	r2, #129	; 0x81
    6b04:	4629      	mov	r1, r5
    6b06:	4620      	mov	r0, r4
    6b08:	4e07      	ldr	r6, [pc, #28]	; (6b28 <n25q256a_enable_xip+0x58>)
    6b0a:	47b0      	blx	r6
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    6b0c:	2770      	movs	r7, #112	; 0x70
    6b0e:	4e04      	ldr	r6, [pc, #16]	; (6b20 <n25q256a_enable_xip+0x50>)
    6b10:	463a      	mov	r2, r7
    6b12:	4629      	mov	r1, r5
    6b14:	4620      	mov	r0, r4
    6b16:	47b0      	blx	r6
    6b18:	f010 0f80 	tst.w	r0, #128	; 0x80
    6b1c:	d0f8      	beq.n	6b10 <n25q256a_enable_xip+0x40>
    6b1e:	e7e8      	b.n	6af2 <n25q256a_enable_xip+0x22>
    6b20:	000069b5 	.word	0x000069b5
    6b24:	00006911 	.word	0x00006911
    6b28:	00006a6d 	.word	0x00006a6d

00006b2c <n25q256a_write_enable>:
{
    6b2c:	b530      	push	{r4, r5, lr}
    6b2e:	b08f      	sub	sp, #60	; 0x3c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6b30:	6805      	ldr	r5, [r0, #0]
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    6b32:	2a00      	cmp	r2, #0
    6b34:	bf14      	ite	ne
    6b36:	2206      	movne	r2, #6
    6b38:	2204      	moveq	r2, #4
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    6b3a:	2300      	movs	r3, #0
    6b3c:	9307      	str	r3, [sp, #28]
    6b3e:	9308      	str	r3, [sp, #32]
    6b40:	9309      	str	r3, [sp, #36]	; 0x24
    6b42:	930a      	str	r3, [sp, #40]	; 0x28
    6b44:	930b      	str	r3, [sp, #44]	; 0x2c
    6b46:	930c      	str	r3, [sp, #48]	; 0x30
    6b48:	f001 0107 	and.w	r1, r1, #7
    6b4c:	f041 0010 	orr.w	r0, r1, #16
    6b50:	f88d 001c 	strb.w	r0, [sp, #28]
    6b54:	f88d 2020 	strb.w	r2, [sp, #32]
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    6b58:	9301      	str	r3, [sp, #4]
    6b5a:	9302      	str	r3, [sp, #8]
    6b5c:	9303      	str	r3, [sp, #12]
    6b5e:	9305      	str	r3, [sp, #20]
    6b60:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    6b64:	f88d 1004 	strb.w	r1, [sp, #4]
    6b68:	2305      	movs	r3, #5
    6b6a:	f88d 3008 	strb.w	r3, [sp, #8]
    6b6e:	2301      	movs	r3, #1
    6b70:	9304      	str	r3, [sp, #16]
    6b72:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    6b76:	9306      	str	r3, [sp, #24]
		qspi_sync_serial_run_command(descr, &cmd_en);
    6b78:	4c06      	ldr	r4, [pc, #24]	; (6b94 <n25q256a_write_enable+0x68>)
    6b7a:	a907      	add	r1, sp, #28
    6b7c:	4628      	mov	r0, r5
    6b7e:	47a0      	blx	r4
		qspi_sync_serial_run_command(descr, &cmd_st);
    6b80:	a901      	add	r1, sp, #4
    6b82:	4628      	mov	r0, r5
    6b84:	47a0      	blx	r4
	} while ((status & (1 << 1)) == 0);
    6b86:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    6b8a:	f013 0f02 	tst.w	r3, #2
    6b8e:	d0f4      	beq.n	6b7a <n25q256a_write_enable+0x4e>
}
    6b90:	b00f      	add	sp, #60	; 0x3c
    6b92:	bd30      	pop	{r4, r5, pc}
    6b94:	00002935 	.word	0x00002935

00006b98 <n25q256a_write>:
{
    6b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b9c:	b087      	sub	sp, #28
    6b9e:	4604      	mov	r4, r0
    6ba0:	4690      	mov	r8, r2
    6ba2:	461f      	mov	r7, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6ba4:	f8d0 b000 	ldr.w	fp, [r0]
	struct _qspi_command         cmd   = {
    6ba8:	2300      	movs	r3, #0
    6baa:	9300      	str	r3, [sp, #0]
    6bac:	9301      	str	r3, [sp, #4]
    6bae:	9305      	str	r3, [sp, #20]
    6bb0:	2330      	movs	r3, #48	; 0x30
    6bb2:	f88d 3001 	strb.w	r3, [sp, #1]
    6bb6:	2302      	movs	r3, #2
    6bb8:	f88d 3004 	strb.w	r3, [sp, #4]
    6bbc:	9202      	str	r2, [sp, #8]
    6bbe:	9703      	str	r7, [sp, #12]
    6bc0:	9104      	str	r1, [sp, #16]
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    6bc2:	7b03      	ldrb	r3, [r0, #12]
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	bf14      	ite	ne
    6bc8:	2206      	movne	r2, #6
    6bca:	2200      	moveq	r2, #0
    6bcc:	f06f 034f 	mvn.w	r3, #79	; 0x4f
    6bd0:	f362 0302 	bfi	r3, r2, #0, #3
    6bd4:	f88d 3000 	strb.w	r3, [sp]
	while (length) {
    6bd8:	b357      	cbz	r7, 6c30 <n25q256a_write+0x98>
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    6bda:	f8df a074 	ldr.w	sl, [pc, #116]	; 6c50 <n25q256a_write+0xb8>
		qspi_sync_serial_run_command(descr, &cmd);
    6bde:	f8df 9074 	ldr.w	r9, [pc, #116]	; 6c54 <n25q256a_write+0xbc>
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    6be2:	4e19      	ldr	r6, [pc, #100]	; (6c48 <n25q256a_write+0xb0>)
		cmd.address = address;
    6be4:	f8cd 8008 	str.w	r8, [sp, #8]
		if (length <= N25Q_PAGE_SIZE) {
    6be8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
			cmd.buf_len = length;
    6bec:	bf92      	itee	ls
    6bee:	9703      	strls	r7, [sp, #12]
			cmd.buf_len = N25Q_PAGE_SIZE;
    6bf0:	f44f 7380 	movhi.w	r3, #256	; 0x100
    6bf4:	9303      	strhi	r3, [sp, #12]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    6bf6:	ad06      	add	r5, sp, #24
    6bf8:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    6bfc:	2201      	movs	r2, #1
    6bfe:	f001 0107 	and.w	r1, r1, #7
    6c02:	4620      	mov	r0, r4
    6c04:	47d0      	blx	sl
		qspi_sync_serial_run_command(descr, &cmd);
    6c06:	4629      	mov	r1, r5
    6c08:	4658      	mov	r0, fp
    6c0a:	47c8      	blx	r9
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    6c0c:	2570      	movs	r5, #112	; 0x70
    6c0e:	f89d 1000 	ldrb.w	r1, [sp]
    6c12:	462a      	mov	r2, r5
    6c14:	f001 0107 	and.w	r1, r1, #7
    6c18:	4620      	mov	r0, r4
    6c1a:	47b0      	blx	r6
    6c1c:	f010 0f80 	tst.w	r0, #128	; 0x80
    6c20:	d0f5      	beq.n	6c0e <n25q256a_write+0x76>
		cmd.tx_buf += cmd.buf_len;
    6c22:	9b03      	ldr	r3, [sp, #12]
    6c24:	9a04      	ldr	r2, [sp, #16]
    6c26:	441a      	add	r2, r3
    6c28:	9204      	str	r2, [sp, #16]
		address += cmd.buf_len;
    6c2a:	4498      	add	r8, r3
	while (length) {
    6c2c:	1aff      	subs	r7, r7, r3
    6c2e:	d1d9      	bne.n	6be4 <n25q256a_write+0x4c>
	if (n25q->xip_mode) {
    6c30:	7b63      	ldrb	r3, [r4, #13]
    6c32:	b91b      	cbnz	r3, 6c3c <n25q256a_write+0xa4>
}
    6c34:	2000      	movs	r0, #0
    6c36:	b007      	add	sp, #28
    6c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
    6c3c:	2101      	movs	r1, #1
    6c3e:	4620      	mov	r0, r4
    6c40:	4b02      	ldr	r3, [pc, #8]	; (6c4c <n25q256a_write+0xb4>)
    6c42:	4798      	blx	r3
    6c44:	e7f6      	b.n	6c34 <n25q256a_write+0x9c>
    6c46:	bf00      	nop
    6c48:	000069b5 	.word	0x000069b5
    6c4c:	00006911 	.word	0x00006911
    6c50:	00006b2d 	.word	0x00006b2d
    6c54:	00002935 	.word	0x00002935

00006c58 <n25q256a_erase>:
{
    6c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c5c:	b087      	sub	sp, #28
    6c5e:	4688      	mov	r8, r1
    6c60:	4617      	mov	r7, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    6c62:	f8d0 9000 	ldr.w	r9, [r0]
	struct _qspi_command         cmd   = {
    6c66:	2300      	movs	r3, #0
    6c68:	9300      	str	r3, [sp, #0]
    6c6a:	9301      	str	r3, [sp, #4]
    6c6c:	9302      	str	r3, [sp, #8]
    6c6e:	9303      	str	r3, [sp, #12]
    6c70:	9304      	str	r3, [sp, #16]
    6c72:	9305      	str	r3, [sp, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    6c74:	7b03      	ldrb	r3, [r0, #12]
    6c76:	2b00      	cmp	r3, #0
    6c78:	bf14      	ite	ne
    6c7a:	2106      	movne	r1, #6
    6c7c:	2100      	moveq	r1, #0
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    6c7e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    6c82:	bf2c      	ite	cs
    6c84:	2200      	movcs	r2, #0
    6c86:	2201      	movcc	r2, #1
	struct _qspi_command         cmd   = {
    6c88:	f041 0310 	orr.w	r3, r1, #16
    6c8c:	f362 1345 	bfi	r3, r2, #5, #1
    6c90:	f88d 3000 	strb.w	r3, [sp]
    6c94:	f04f 0300 	mov.w	r3, #0
    6c98:	2202      	movs	r2, #2
    6c9a:	f362 1305 	bfi	r3, r2, #4, #2
    6c9e:	f88d 3001 	strb.w	r3, [sp, #1]
	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    6ca2:	ea47 0308 	orr.w	r3, r7, r8
    6ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6caa:	2b00      	cmp	r3, #0
    6cac:	d16f      	bne.n	6d8e <n25q256a_erase+0x136>
    6cae:	4604      	mov	r4, r0
	if (length >= N25Q_FLASH_SIZE) {
    6cb0:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
    6cb4:	d207      	bcs.n	6cc6 <n25q256a_erase+0x6e>
		while (temp_len > 0) {
    6cb6:	2f00      	cmp	r7, #0
    6cb8:	d052      	beq.n	6d60 <n25q256a_erase+0x108>
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    6cba:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 6d98 <n25q256a_erase+0x140>
				qspi_sync_serial_run_command(descr, &cmd);
    6cbe:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 6d9c <n25q256a_erase+0x144>
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    6cc2:	4e34      	ldr	r6, [pc, #208]	; (6d94 <n25q256a_erase+0x13c>)
    6cc4:	e02e      	b.n	6d24 <n25q256a_erase+0xcc>
		cmd.instruction = N25Q_BULK_ERASE;
    6cc6:	23c7      	movs	r3, #199	; 0xc7
    6cc8:	f88d 3004 	strb.w	r3, [sp, #4]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    6ccc:	2201      	movs	r2, #1
    6cce:	4b32      	ldr	r3, [pc, #200]	; (6d98 <n25q256a_erase+0x140>)
    6cd0:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd);
    6cd2:	4669      	mov	r1, sp
    6cd4:	4648      	mov	r0, r9
    6cd6:	4b31      	ldr	r3, [pc, #196]	; (6d9c <n25q256a_erase+0x144>)
    6cd8:	4798      	blx	r3
	int32_t  rc        = ERR_NONE;
    6cda:	2700      	movs	r7, #0
    6cdc:	e040      	b.n	6d60 <n25q256a_erase+0x108>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    6cde:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    6ce2:	d33b      	bcc.n	6d5c <n25q256a_erase+0x104>
				cmd.address     = temp_addr;
    6ce4:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    6ce8:	2320      	movs	r3, #32
    6cea:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    6cee:	ad06      	add	r5, sp, #24
    6cf0:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    6cf4:	2201      	movs	r2, #1
    6cf6:	f001 0107 	and.w	r1, r1, #7
    6cfa:	4620      	mov	r0, r4
    6cfc:	47d8      	blx	fp
				qspi_sync_serial_run_command(descr, &cmd);
    6cfe:	4629      	mov	r1, r5
    6d00:	4648      	mov	r0, r9
    6d02:	47d0      	blx	sl
				temp_addr += N25Q_SECTOR_SIZE;
    6d04:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
				temp_len -= N25Q_SECTOR_SIZE;
    6d08:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    6d0c:	2570      	movs	r5, #112	; 0x70
    6d0e:	f89d 1000 	ldrb.w	r1, [sp]
    6d12:	462a      	mov	r2, r5
    6d14:	f001 0107 	and.w	r1, r1, #7
    6d18:	4620      	mov	r0, r4
    6d1a:	47b0      	blx	r6
    6d1c:	f010 0f80 	tst.w	r0, #128	; 0x80
    6d20:	d0f5      	beq.n	6d0e <n25q256a_erase+0xb6>
		while (temp_len > 0) {
    6d22:	b1ef      	cbz	r7, 6d60 <n25q256a_erase+0x108>
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    6d24:	fa1f f388 	uxth.w	r3, r8
    6d28:	2b00      	cmp	r3, #0
    6d2a:	d1d8      	bne.n	6cde <n25q256a_erase+0x86>
    6d2c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    6d30:	d3d5      	bcc.n	6cde <n25q256a_erase+0x86>
				cmd.address     = temp_addr;
    6d32:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    6d36:	23d8      	movs	r3, #216	; 0xd8
    6d38:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    6d3c:	ad06      	add	r5, sp, #24
    6d3e:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    6d42:	2201      	movs	r2, #1
    6d44:	f001 0107 	and.w	r1, r1, #7
    6d48:	4620      	mov	r0, r4
    6d4a:	47d8      	blx	fp
				qspi_sync_serial_run_command(descr, &cmd);
    6d4c:	4629      	mov	r1, r5
    6d4e:	4648      	mov	r0, r9
    6d50:	47d0      	blx	sl
				temp_addr += N25Q_BLOCK_SIZE;
    6d52:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
				temp_len -= N25Q_BLOCK_SIZE;
    6d56:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
    6d5a:	e7d7      	b.n	6d0c <n25q256a_erase+0xb4>
				rc = ERR_INVALID_ARG;
    6d5c:	f06f 070c 	mvn.w	r7, #12
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    6d60:	2670      	movs	r6, #112	; 0x70
    6d62:	4d0c      	ldr	r5, [pc, #48]	; (6d94 <n25q256a_erase+0x13c>)
    6d64:	f89d 1000 	ldrb.w	r1, [sp]
    6d68:	4632      	mov	r2, r6
    6d6a:	f001 0107 	and.w	r1, r1, #7
    6d6e:	4620      	mov	r0, r4
    6d70:	47a8      	blx	r5
    6d72:	f010 0f80 	tst.w	r0, #128	; 0x80
    6d76:	d0f5      	beq.n	6d64 <n25q256a_erase+0x10c>
	if (n25q->xip_mode) {
    6d78:	7b63      	ldrb	r3, [r4, #13]
    6d7a:	b91b      	cbnz	r3, 6d84 <n25q256a_erase+0x12c>
}
    6d7c:	4638      	mov	r0, r7
    6d7e:	b007      	add	sp, #28
    6d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
    6d84:	2101      	movs	r1, #1
    6d86:	4620      	mov	r0, r4
    6d88:	4b05      	ldr	r3, [pc, #20]	; (6da0 <n25q256a_erase+0x148>)
    6d8a:	4798      	blx	r3
    6d8c:	e7f6      	b.n	6d7c <n25q256a_erase+0x124>
		return ERR_INVALID_ARG;
    6d8e:	f06f 070c 	mvn.w	r7, #12
    6d92:	e7f3      	b.n	6d7c <n25q256a_erase+0x124>
    6d94:	000069b5 	.word	0x000069b5
    6d98:	00006b2d 	.word	0x00006b2d
    6d9c:	00002935 	.word	0x00002935
    6da0:	00006911 	.word	0x00006911

00006da4 <n25q256a_switch_mode>:
{
    6da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6da6:	4604      	mov	r4, r0
    6da8:	460e      	mov	r6, r1
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    6daa:	7b05      	ldrb	r5, [r0, #12]
    6dac:	2d00      	cmp	r5, #0
    6dae:	bf18      	it	ne
    6db0:	2506      	movne	r5, #6
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    6db2:	2265      	movs	r2, #101	; 0x65
    6db4:	4629      	mov	r1, r5
    6db6:	4b18      	ldr	r3, [pc, #96]	; (6e18 <n25q256a_switch_mode+0x74>)
    6db8:	4798      	blx	r3
	if (n25q->quad_mode == mode) {
    6dba:	7b23      	ldrb	r3, [r4, #12]
    6dbc:	42b3      	cmp	r3, r6
    6dbe:	d017      	beq.n	6df0 <n25q256a_switch_mode+0x4c>
    6dc0:	4607      	mov	r7, r0
	if (mode) {
    6dc2:	b1b6      	cbz	r6, 6df2 <n25q256a_switch_mode+0x4e>
		if (evcfg & 0x80) {
    6dc4:	f010 0f80 	tst.w	r0, #128	; 0x80
    6dc8:	d012      	beq.n	6df0 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
    6dca:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
    6dcc:	2201      	movs	r2, #1
    6dce:	4629      	mov	r1, r5
    6dd0:	4620      	mov	r0, r4
    6dd2:	4b12      	ldr	r3, [pc, #72]	; (6e1c <n25q256a_switch_mode+0x78>)
    6dd4:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    6dd6:	f007 031f 	and.w	r3, r7, #31
    6dda:	2261      	movs	r2, #97	; 0x61
    6ddc:	4629      	mov	r1, r5
    6dde:	4620      	mov	r0, r4
    6de0:	4d0f      	ldr	r5, [pc, #60]	; (6e20 <n25q256a_switch_mode+0x7c>)
    6de2:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    6de4:	2106      	movs	r1, #6
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    6de6:	2265      	movs	r2, #101	; 0x65
    6de8:	4620      	mov	r0, r4
    6dea:	4b0b      	ldr	r3, [pc, #44]	; (6e18 <n25q256a_switch_mode+0x74>)
    6dec:	4798      	blx	r3
		n25q->quad_mode = mode;
    6dee:	7326      	strb	r6, [r4, #12]
    6df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(evcfg & 0x80)) {
    6df2:	f010 0f80 	tst.w	r0, #128	; 0x80
    6df6:	d1fb      	bne.n	6df0 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
    6df8:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
    6dfa:	2201      	movs	r2, #1
    6dfc:	4629      	mov	r1, r5
    6dfe:	4620      	mov	r0, r4
    6e00:	4b06      	ldr	r3, [pc, #24]	; (6e1c <n25q256a_switch_mode+0x78>)
    6e02:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    6e04:	f047 03c0 	orr.w	r3, r7, #192	; 0xc0
    6e08:	2261      	movs	r2, #97	; 0x61
    6e0a:	4629      	mov	r1, r5
    6e0c:	4620      	mov	r0, r4
    6e0e:	4d04      	ldr	r5, [pc, #16]	; (6e20 <n25q256a_switch_mode+0x7c>)
    6e10:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    6e12:	4631      	mov	r1, r6
    6e14:	e7e7      	b.n	6de6 <n25q256a_switch_mode+0x42>
    6e16:	bf00      	nop
    6e18:	000069b5 	.word	0x000069b5
    6e1c:	00006b2d 	.word	0x00006b2d
    6e20:	00006a6d 	.word	0x00006a6d

00006e24 <n25q256a_construct>:
{
    6e24:	b570      	push	{r4, r5, r6, lr}
    6e26:	4604      	mov	r4, r0
    6e28:	4616      	mov	r6, r2
    6e2a:	461d      	mov	r5, r3
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    6e2c:	4a06      	ldr	r2, [pc, #24]	; (6e48 <n25q256a_construct+0x24>)
    6e2e:	4b07      	ldr	r3, [pc, #28]	; (6e4c <n25q256a_construct+0x28>)
    6e30:	4798      	blx	r3
	n25q->quad_mode    = 0;
    6e32:	2300      	movs	r3, #0
    6e34:	7323      	strb	r3, [r4, #12]
	n25q->xip_mode     = false;
    6e36:	7363      	strb	r3, [r4, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    6e38:	60a6      	str	r6, [r4, #8]
	n25q256a_switch_mode(me, quad_mode);
    6e3a:	4629      	mov	r1, r5
    6e3c:	4620      	mov	r0, r4
    6e3e:	4b04      	ldr	r3, [pc, #16]	; (6e50 <n25q256a_construct+0x2c>)
    6e40:	4798      	blx	r3
}
    6e42:	4620      	mov	r0, r4
    6e44:	bd70      	pop	{r4, r5, r6, pc}
    6e46:	bf00      	nop
    6e48:	0000daf8 	.word	0x0000daf8
    6e4c:	00006e55 	.word	0x00006e55
    6e50:	00006da5 	.word	0x00006da5

00006e54 <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    6e54:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    6e56:	6042      	str	r2, [r0, #4]

	return me;
}
    6e58:	4770      	bx	lr
	...

00006e5c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    6e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e5e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    6e60:	780b      	ldrb	r3, [r1, #0]
    6e62:	f3c3 1441 	ubfx	r4, r3, #5, #2
    6e66:	2c01      	cmp	r4, #1
    6e68:	d15e      	bne.n	6f28 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    6e6a:	888c      	ldrh	r4, [r1, #4]
    6e6c:	4d35      	ldr	r5, [pc, #212]	; (6f44 <cdcdf_acm_req+0xe8>)
    6e6e:	782d      	ldrb	r5, [r5, #0]
    6e70:	42a5      	cmp	r5, r4
    6e72:	d003      	beq.n	6e7c <cdcdf_acm_req+0x20>
    6e74:	4d33      	ldr	r5, [pc, #204]	; (6f44 <cdcdf_acm_req+0xe8>)
    6e76:	786d      	ldrb	r5, [r5, #1]
    6e78:	42a5      	cmp	r5, r4
    6e7a:	d158      	bne.n	6f2e <cdcdf_acm_req+0xd2>
    6e7c:	4616      	mov	r6, r2
    6e7e:	460c      	mov	r4, r1
    6e80:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    6e82:	f013 0f80 	tst.w	r3, #128	; 0x80
    6e86:	d10c      	bne.n	6ea2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    6e88:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    6e8a:	4b2f      	ldr	r3, [pc, #188]	; (6f48 <cdcdf_acm_req+0xec>)
    6e8c:	4798      	blx	r3
    6e8e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    6e90:	7863      	ldrb	r3, [r4, #1]
    6e92:	2b20      	cmp	r3, #32
    6e94:	d013      	beq.n	6ebe <cdcdf_acm_req+0x62>
    6e96:	2b22      	cmp	r3, #34	; 0x22
    6e98:	d032      	beq.n	6f00 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    6e9a:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    6e9e:	b003      	add	sp, #12
    6ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    6ea2:	2a01      	cmp	r2, #1
    6ea4:	d046      	beq.n	6f34 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    6ea6:	784b      	ldrb	r3, [r1, #1]
    6ea8:	2b21      	cmp	r3, #33	; 0x21
    6eaa:	d145      	bne.n	6f38 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    6eac:	88cb      	ldrh	r3, [r1, #6]
    6eae:	2b07      	cmp	r3, #7
    6eb0:	d145      	bne.n	6f3e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    6eb2:	2300      	movs	r3, #0
    6eb4:	2207      	movs	r2, #7
    6eb6:	4925      	ldr	r1, [pc, #148]	; (6f4c <cdcdf_acm_req+0xf0>)
    6eb8:	4c25      	ldr	r4, [pc, #148]	; (6f50 <cdcdf_acm_req+0xf4>)
    6eba:	47a0      	blx	r4
    6ebc:	e7ef      	b.n	6e9e <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    6ebe:	2f07      	cmp	r7, #7
    6ec0:	d12b      	bne.n	6f1a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    6ec2:	b1be      	cbz	r6, 6ef4 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    6ec4:	6800      	ldr	r0, [r0, #0]
    6ec6:	9000      	str	r0, [sp, #0]
    6ec8:	888a      	ldrh	r2, [r1, #4]
    6eca:	798b      	ldrb	r3, [r1, #6]
    6ecc:	f8ad 2004 	strh.w	r2, [sp, #4]
    6ed0:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    6ed4:	4b1b      	ldr	r3, [pc, #108]	; (6f44 <cdcdf_acm_req+0xe8>)
    6ed6:	691b      	ldr	r3, [r3, #16]
    6ed8:	b113      	cbz	r3, 6ee0 <cdcdf_acm_req+0x84>
    6eda:	4668      	mov	r0, sp
    6edc:	4798      	blx	r3
    6ede:	b1f8      	cbz	r0, 6f20 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    6ee0:	4b18      	ldr	r3, [pc, #96]	; (6f44 <cdcdf_acm_req+0xe8>)
    6ee2:	aa02      	add	r2, sp, #8
    6ee4:	e912 0003 	ldmdb	r2, {r0, r1}
    6ee8:	6098      	str	r0, [r3, #8]
    6eea:	8199      	strh	r1, [r3, #12]
    6eec:	0c09      	lsrs	r1, r1, #16
    6eee:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    6ef0:	2000      	movs	r0, #0
    6ef2:	e7d4      	b.n	6e9e <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    6ef4:	2300      	movs	r3, #0
    6ef6:	2207      	movs	r2, #7
    6ef8:	4628      	mov	r0, r5
    6efa:	4c15      	ldr	r4, [pc, #84]	; (6f50 <cdcdf_acm_req+0xf4>)
    6efc:	47a0      	blx	r4
    6efe:	e7ce      	b.n	6e9e <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    6f00:	2300      	movs	r3, #0
    6f02:	461a      	mov	r2, r3
    6f04:	4619      	mov	r1, r3
    6f06:	4618      	mov	r0, r3
    6f08:	4d11      	ldr	r5, [pc, #68]	; (6f50 <cdcdf_acm_req+0xf4>)
    6f0a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    6f0c:	4b0d      	ldr	r3, [pc, #52]	; (6f44 <cdcdf_acm_req+0xe8>)
    6f0e:	695b      	ldr	r3, [r3, #20]
    6f10:	b143      	cbz	r3, 6f24 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    6f12:	8860      	ldrh	r0, [r4, #2]
    6f14:	4798      	blx	r3
		return ERR_NONE;
    6f16:	2000      	movs	r0, #0
    6f18:	e7c1      	b.n	6e9e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    6f1a:	f04f 30ff 	mov.w	r0, #4294967295
    6f1e:	e7be      	b.n	6e9e <cdcdf_acm_req+0x42>
			return ERR_NONE;
    6f20:	2000      	movs	r0, #0
    6f22:	e7bc      	b.n	6e9e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    6f24:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    6f26:	e7ba      	b.n	6e9e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    6f28:	f06f 0009 	mvn.w	r0, #9
    6f2c:	e7b7      	b.n	6e9e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    6f2e:	f06f 0009 	mvn.w	r0, #9
    6f32:	e7b4      	b.n	6e9e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    6f34:	2000      	movs	r0, #0
    6f36:	e7b2      	b.n	6e9e <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    6f38:	f06f 000c 	mvn.w	r0, #12
    6f3c:	e7af      	b.n	6e9e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    6f3e:	f04f 30ff 	mov.w	r0, #4294967295
    6f42:	e7ac      	b.n	6e9e <cdcdf_acm_req+0x42>
    6f44:	200020ac 	.word	0x200020ac
    6f48:	0000787d 	.word	0x0000787d
    6f4c:	200020b4 	.word	0x200020b4
    6f50:	00007359 	.word	0x00007359

00006f54 <cdcdf_acm_ctrl>:
{
    6f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f58:	b083      	sub	sp, #12
    6f5a:	4616      	mov	r6, r2
	switch (ctrl) {
    6f5c:	2901      	cmp	r1, #1
    6f5e:	d066      	beq.n	702e <cdcdf_acm_ctrl+0xda>
    6f60:	b141      	cbz	r1, 6f74 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    6f62:	2902      	cmp	r1, #2
    6f64:	bf0c      	ite	eq
    6f66:	f06f 001a 	mvneq.w	r0, #26
    6f6a:	f06f 000c 	mvnne.w	r0, #12
}
    6f6e:	b003      	add	sp, #12
    6f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    6f74:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    6f78:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    6f7a:	2800      	cmp	r0, #0
    6f7c:	f000 8085 	beq.w	708a <cdcdf_acm_ctrl+0x136>
    6f80:	f10a 3bff 	add.w	fp, sl, #4294967295
    6f84:	f10a 0301 	add.w	r3, sl, #1
    6f88:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    6f8a:	4f46      	ldr	r7, [pc, #280]	; (70a4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    6f8c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 70b4 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    6f90:	f8df 8124 	ldr.w	r8, [pc, #292]	; 70b8 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    6f94:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    6f96:	7943      	ldrb	r3, [r0, #5]
    6f98:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    6f9c:	2b02      	cmp	r3, #2
    6f9e:	d002      	beq.n	6fa6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    6fa0:	f06f 0009 	mvn.w	r0, #9
    6fa4:	e7e3      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
    6fa6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    6faa:	f89b 3000 	ldrb.w	r3, [fp]
    6fae:	429a      	cmp	r2, r3
    6fb0:	d06e      	beq.n	7090 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    6fb2:	2bff      	cmp	r3, #255	; 0xff
    6fb4:	d16f      	bne.n	7096 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    6fb6:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    6fba:	2205      	movs	r2, #5
    6fbc:	6871      	ldr	r1, [r6, #4]
    6fbe:	4b3a      	ldr	r3, [pc, #232]	; (70a8 <cdcdf_acm_ctrl+0x154>)
    6fc0:	4798      	blx	r3
		while (NULL != ep) {
    6fc2:	4604      	mov	r4, r0
    6fc4:	b1f8      	cbz	r0, 7006 <cdcdf_acm_ctrl+0xb2>
    6fc6:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    6fca:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    6fcc:	7963      	ldrb	r3, [r4, #5]
    6fce:	7922      	ldrb	r2, [r4, #4]
    6fd0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    6fd4:	b292      	uxth	r2, r2
    6fd6:	78e1      	ldrb	r1, [r4, #3]
    6fd8:	4628      	mov	r0, r5
    6fda:	47b8      	blx	r7
    6fdc:	2800      	cmp	r0, #0
    6fde:	d15d      	bne.n	709c <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    6fe0:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    6fe4:	bf14      	ite	ne
    6fe6:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    6fea:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    6fee:	4628      	mov	r0, r5
    6ff0:	47c8      	blx	r9
			desc->sod = ep;
    6ff2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    6ff4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    6ff6:	6871      	ldr	r1, [r6, #4]
    6ff8:	4420      	add	r0, r4
    6ffa:	47c0      	blx	r8
		while (NULL != ep) {
    6ffc:	4604      	mov	r4, r0
    6ffe:	2800      	cmp	r0, #0
    7000:	d1e3      	bne.n	6fca <cdcdf_acm_ctrl+0x76>
    7002:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    7006:	6833      	ldr	r3, [r6, #0]
    7008:	7818      	ldrb	r0, [r3, #0]
    700a:	2204      	movs	r2, #4
    700c:	6871      	ldr	r1, [r6, #4]
    700e:	4418      	add	r0, r3
    7010:	4b25      	ldr	r3, [pc, #148]	; (70a8 <cdcdf_acm_ctrl+0x154>)
    7012:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    7014:	9b00      	ldr	r3, [sp, #0]
    7016:	459b      	cmp	fp, r3
    7018:	d004      	beq.n	7024 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    701a:	2800      	cmp	r0, #0
    701c:	d1ba      	bne.n	6f94 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    701e:	f06f 0009 	mvn.w	r0, #9
    7022:	e7a4      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    7024:	2201      	movs	r2, #1
    7026:	4b21      	ldr	r3, [pc, #132]	; (70ac <cdcdf_acm_ctrl+0x158>)
    7028:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    702a:	2000      	movs	r0, #0
    702c:	e79f      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    702e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    7030:	b142      	cbz	r2, 7044 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7032:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    7034:	795b      	ldrb	r3, [r3, #5]
    7036:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    703a:	2b02      	cmp	r3, #2
    703c:	d002      	beq.n	7044 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    703e:	f06f 0009 	mvn.w	r0, #9
    7042:	e794      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    7044:	7823      	ldrb	r3, [r4, #0]
    7046:	2bff      	cmp	r3, #255	; 0xff
    7048:	d008      	beq.n	705c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    704a:	23ff      	movs	r3, #255	; 0xff
    704c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    704e:	78a0      	ldrb	r0, [r4, #2]
    7050:	4298      	cmp	r0, r3
    7052:	d003      	beq.n	705c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7054:	4b16      	ldr	r3, [pc, #88]	; (70b0 <cdcdf_acm_ctrl+0x15c>)
    7056:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7058:	23ff      	movs	r3, #255	; 0xff
    705a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    705c:	7863      	ldrb	r3, [r4, #1]
    705e:	2bff      	cmp	r3, #255	; 0xff
    7060:	d008      	beq.n	7074 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    7062:	23ff      	movs	r3, #255	; 0xff
    7064:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    7066:	78e0      	ldrb	r0, [r4, #3]
    7068:	4298      	cmp	r0, r3
    706a:	d003      	beq.n	7074 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    706c:	4b10      	ldr	r3, [pc, #64]	; (70b0 <cdcdf_acm_ctrl+0x15c>)
    706e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7070:	23ff      	movs	r3, #255	; 0xff
    7072:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    7074:	7920      	ldrb	r0, [r4, #4]
    7076:	28ff      	cmp	r0, #255	; 0xff
    7078:	d003      	beq.n	7082 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    707a:	4b0d      	ldr	r3, [pc, #52]	; (70b0 <cdcdf_acm_ctrl+0x15c>)
    707c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    707e:	23ff      	movs	r3, #255	; 0xff
    7080:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    7082:	2000      	movs	r0, #0
    7084:	4b09      	ldr	r3, [pc, #36]	; (70ac <cdcdf_acm_ctrl+0x158>)
    7086:	7158      	strb	r0, [r3, #5]
    7088:	e771      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    708a:	f06f 0009 	mvn.w	r0, #9
    708e:	e76e      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    7090:	f06f 0011 	mvn.w	r0, #17
    7094:	e76b      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    7096:	f06f 001b 	mvn.w	r0, #27
    709a:	e768      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    709c:	f06f 0013 	mvn.w	r0, #19
    70a0:	e765      	b.n	6f6e <cdcdf_acm_ctrl+0x1a>
    70a2:	bf00      	nop
    70a4:	00003281 	.word	0x00003281
    70a8:	0000789d 	.word	0x0000789d
    70ac:	200020ac 	.word	0x200020ac
    70b0:	000032e9 	.word	0x000032e9
    70b4:	00003315 	.word	0x00003315
    70b8:	000078d7 	.word	0x000078d7

000070bc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    70bc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    70be:	4b0a      	ldr	r3, [pc, #40]	; (70e8 <cdcdf_acm_init+0x2c>)
    70c0:	4798      	blx	r3
    70c2:	2801      	cmp	r0, #1
    70c4:	d80c      	bhi.n	70e0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    70c6:	4809      	ldr	r0, [pc, #36]	; (70ec <cdcdf_acm_init+0x30>)
    70c8:	4b09      	ldr	r3, [pc, #36]	; (70f0 <cdcdf_acm_init+0x34>)
    70ca:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    70cc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    70ce:	3018      	adds	r0, #24
    70d0:	4b08      	ldr	r3, [pc, #32]	; (70f4 <cdcdf_acm_init+0x38>)
    70d2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    70d4:	4908      	ldr	r1, [pc, #32]	; (70f8 <cdcdf_acm_init+0x3c>)
    70d6:	2001      	movs	r0, #1
    70d8:	4b08      	ldr	r3, [pc, #32]	; (70fc <cdcdf_acm_init+0x40>)
    70da:	4798      	blx	r3
	return ERR_NONE;
    70dc:	2000      	movs	r0, #0
    70de:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    70e0:	f06f 0010 	mvn.w	r0, #16
}
    70e4:	bd08      	pop	{r3, pc}
    70e6:	bf00      	nop
    70e8:	00007889 	.word	0x00007889
    70ec:	200020ac 	.word	0x200020ac
    70f0:	00006f55 	.word	0x00006f55
    70f4:	00007829 	.word	0x00007829
    70f8:	20000128 	.word	0x20000128
    70fc:	00007795 	.word	0x00007795

00007100 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    7100:	4b07      	ldr	r3, [pc, #28]	; (7120 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    7102:	795b      	ldrb	r3, [r3, #5]
    7104:	b143      	cbz	r3, 7118 <cdcdf_acm_read+0x18>
{
    7106:	b510      	push	{r4, lr}
    7108:	460a      	mov	r2, r1
    710a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    710c:	2300      	movs	r3, #0
    710e:	4804      	ldr	r0, [pc, #16]	; (7120 <cdcdf_acm_read+0x20>)
    7110:	7900      	ldrb	r0, [r0, #4]
    7112:	4c04      	ldr	r4, [pc, #16]	; (7124 <cdcdf_acm_read+0x24>)
    7114:	47a0      	blx	r4
    7116:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    7118:	f06f 0010 	mvn.w	r0, #16
    711c:	4770      	bx	lr
    711e:	bf00      	nop
    7120:	200020ac 	.word	0x200020ac
    7124:	00007359 	.word	0x00007359

00007128 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    7128:	4b07      	ldr	r3, [pc, #28]	; (7148 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    712a:	795b      	ldrb	r3, [r3, #5]
    712c:	b143      	cbz	r3, 7140 <cdcdf_acm_write+0x18>
{
    712e:	b510      	push	{r4, lr}
    7130:	460a      	mov	r2, r1
    7132:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    7134:	2301      	movs	r3, #1
    7136:	4804      	ldr	r0, [pc, #16]	; (7148 <cdcdf_acm_write+0x20>)
    7138:	78c0      	ldrb	r0, [r0, #3]
    713a:	4c04      	ldr	r4, [pc, #16]	; (714c <cdcdf_acm_write+0x24>)
    713c:	47a0      	blx	r4
    713e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    7140:	f06f 0010 	mvn.w	r0, #16
    7144:	4770      	bx	lr
    7146:	bf00      	nop
    7148:	200020ac 	.word	0x200020ac
    714c:	00007359 	.word	0x00007359

00007150 <cdcdf_acm_stop_xfer>:
{
    7150:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    7152:	4d03      	ldr	r5, [pc, #12]	; (7160 <cdcdf_acm_stop_xfer+0x10>)
    7154:	78e8      	ldrb	r0, [r5, #3]
    7156:	4c03      	ldr	r4, [pc, #12]	; (7164 <cdcdf_acm_stop_xfer+0x14>)
    7158:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    715a:	7928      	ldrb	r0, [r5, #4]
    715c:	47a0      	blx	r4
    715e:	bd38      	pop	{r3, r4, r5, pc}
    7160:	200020ac 	.word	0x200020ac
    7164:	00003481 	.word	0x00003481

00007168 <cdcdf_acm_register_callback>:
{
    7168:	b508      	push	{r3, lr}
	switch (cb_type) {
    716a:	2803      	cmp	r0, #3
    716c:	d81b      	bhi.n	71a6 <cdcdf_acm_register_callback+0x3e>
    716e:	e8df f000 	tbb	[pc, r0]
    7172:	0a02      	.short	0x0a02
    7174:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    7176:	460a      	mov	r2, r1
    7178:	2102      	movs	r1, #2
    717a:	4b0c      	ldr	r3, [pc, #48]	; (71ac <cdcdf_acm_register_callback+0x44>)
    717c:	7918      	ldrb	r0, [r3, #4]
    717e:	4b0c      	ldr	r3, [pc, #48]	; (71b0 <cdcdf_acm_register_callback+0x48>)
    7180:	4798      	blx	r3
	return ERR_NONE;
    7182:	2000      	movs	r0, #0
		break;
    7184:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    7186:	460a      	mov	r2, r1
    7188:	2102      	movs	r1, #2
    718a:	4b08      	ldr	r3, [pc, #32]	; (71ac <cdcdf_acm_register_callback+0x44>)
    718c:	78d8      	ldrb	r0, [r3, #3]
    718e:	4b08      	ldr	r3, [pc, #32]	; (71b0 <cdcdf_acm_register_callback+0x48>)
    7190:	4798      	blx	r3
	return ERR_NONE;
    7192:	2000      	movs	r0, #0
		break;
    7194:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    7196:	4b05      	ldr	r3, [pc, #20]	; (71ac <cdcdf_acm_register_callback+0x44>)
    7198:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    719a:	2000      	movs	r0, #0
		break;
    719c:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    719e:	4b03      	ldr	r3, [pc, #12]	; (71ac <cdcdf_acm_register_callback+0x44>)
    71a0:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    71a2:	2000      	movs	r0, #0
		break;
    71a4:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    71a6:	f06f 000c 	mvn.w	r0, #12
}
    71aa:	bd08      	pop	{r3, pc}
    71ac:	200020ac 	.word	0x200020ac
    71b0:	00003519 	.word	0x00003519

000071b4 <cdcdf_acm_is_enabled>:
}
    71b4:	4b01      	ldr	r3, [pc, #4]	; (71bc <cdcdf_acm_is_enabled+0x8>)
    71b6:	7958      	ldrb	r0, [r3, #5]
    71b8:	4770      	bx	lr
    71ba:	bf00      	nop
    71bc:	200020ac 	.word	0x200020ac

000071c0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    71c0:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    71c2:	4b07      	ldr	r3, [pc, #28]	; (71e0 <usbdc_unconfig+0x20>)
    71c4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    71c6:	b14c      	cbz	r4, 71dc <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    71c8:	2600      	movs	r6, #0
    71ca:	2501      	movs	r5, #1
    71cc:	6863      	ldr	r3, [r4, #4]
    71ce:	4632      	mov	r2, r6
    71d0:	4629      	mov	r1, r5
    71d2:	4620      	mov	r0, r4
    71d4:	4798      	blx	r3
		func = func->next;
    71d6:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    71d8:	2c00      	cmp	r4, #0
    71da:	d1f7      	bne.n	71cc <usbdc_unconfig+0xc>
    71dc:	bd70      	pop	{r4, r5, r6, pc}
    71de:	bf00      	nop
    71e0:	200020d0 	.word	0x200020d0

000071e4 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    71e4:	b570      	push	{r4, r5, r6, lr}
    71e6:	4606      	mov	r6, r0
    71e8:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    71ea:	4b07      	ldr	r3, [pc, #28]	; (7208 <usbdc_change_notify+0x24>)
    71ec:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    71ee:	b91c      	cbnz	r4, 71f8 <usbdc_change_notify+0x14>
    71f0:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    71f2:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    71f4:	2c00      	cmp	r4, #0
    71f6:	d0fb      	beq.n	71f0 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    71f8:	6863      	ldr	r3, [r4, #4]
    71fa:	2b00      	cmp	r3, #0
    71fc:	d0f9      	beq.n	71f2 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    71fe:	4629      	mov	r1, r5
    7200:	4630      	mov	r0, r6
    7202:	4798      	blx	r3
    7204:	e7f5      	b.n	71f2 <usbdc_change_notify+0xe>
    7206:	bf00      	nop
    7208:	200020d0 	.word	0x200020d0

0000720c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    720e:	4607      	mov	r7, r0
    7210:	460e      	mov	r6, r1
    7212:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    7214:	4b0c      	ldr	r3, [pc, #48]	; (7248 <usbdc_request_handler+0x3c>)
    7216:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    7218:	b91c      	cbnz	r4, 7222 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    721a:	2000      	movs	r0, #0
    721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    721e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    7220:	b16c      	cbz	r4, 723e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    7222:	6863      	ldr	r3, [r4, #4]
    7224:	2b00      	cmp	r3, #0
    7226:	d0fa      	beq.n	721e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    7228:	462a      	mov	r2, r5
    722a:	4631      	mov	r1, r6
    722c:	4638      	mov	r0, r7
    722e:	4798      	blx	r3
			if (0 == rc) {
    7230:	b138      	cbz	r0, 7242 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    7232:	f110 0f0a 	cmn.w	r0, #10
    7236:	d0f2      	beq.n	721e <usbdc_request_handler+0x12>
				return -1;
    7238:	f04f 30ff 	mov.w	r0, #4294967295
}
    723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    723e:	2000      	movs	r0, #0
    7240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    7242:	2001      	movs	r0, #1
    7244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7246:	bf00      	nop
    7248:	200020d0 	.word	0x200020d0

0000724c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    724c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    724e:	4b06      	ldr	r3, [pc, #24]	; (7268 <usbd_sof_cb+0x1c>)
    7250:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    7252:	b91c      	cbnz	r4, 725c <usbd_sof_cb+0x10>
    7254:	bd10      	pop	{r4, pc}
		sof = sof->next;
    7256:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    7258:	2c00      	cmp	r4, #0
    725a:	d0fb      	beq.n	7254 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    725c:	6863      	ldr	r3, [r4, #4]
    725e:	2b00      	cmp	r3, #0
    7260:	d0f9      	beq.n	7256 <usbd_sof_cb+0xa>
			sof->cb();
    7262:	4798      	blx	r3
    7264:	e7f7      	b.n	7256 <usbd_sof_cb+0xa>
    7266:	bf00      	nop
    7268:	200020d0 	.word	0x200020d0

0000726c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    726c:	b510      	push	{r4, lr}
    726e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    7270:	b119      	cbz	r1, 727a <usbdc_cb_ctl_done+0xe>
    7272:	2901      	cmp	r1, #1
    7274:	d026      	beq.n	72c4 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    7276:	2000      	movs	r0, #0
    7278:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    727a:	7813      	ldrb	r3, [r2, #0]
    727c:	2b00      	cmp	r3, #0
    727e:	d1fa      	bne.n	7276 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    7280:	7853      	ldrb	r3, [r2, #1]
    7282:	2b05      	cmp	r3, #5
    7284:	d00f      	beq.n	72a6 <usbdc_cb_ctl_done+0x3a>
    7286:	2b09      	cmp	r3, #9
    7288:	d1f5      	bne.n	7276 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    728a:	8852      	ldrh	r2, [r2, #2]
    728c:	4b10      	ldr	r3, [pc, #64]	; (72d0 <usbdc_cb_ctl_done+0x64>)
    728e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    7290:	8863      	ldrh	r3, [r4, #2]
    7292:	2b00      	cmp	r3, #0
    7294:	bf14      	ite	ne
    7296:	2104      	movne	r1, #4
    7298:	2103      	moveq	r1, #3
    729a:	4b0d      	ldr	r3, [pc, #52]	; (72d0 <usbdc_cb_ctl_done+0x64>)
    729c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    729e:	2001      	movs	r0, #1
    72a0:	4b0c      	ldr	r3, [pc, #48]	; (72d4 <usbdc_cb_ctl_done+0x68>)
    72a2:	4798      	blx	r3
    72a4:	e7e7      	b.n	7276 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    72a6:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    72a8:	b2c0      	uxtb	r0, r0
    72aa:	4b0b      	ldr	r3, [pc, #44]	; (72d8 <usbdc_cb_ctl_done+0x6c>)
    72ac:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    72ae:	8863      	ldrh	r3, [r4, #2]
    72b0:	2b00      	cmp	r3, #0
    72b2:	bf14      	ite	ne
    72b4:	2103      	movne	r1, #3
    72b6:	2102      	moveq	r1, #2
    72b8:	4b05      	ldr	r3, [pc, #20]	; (72d0 <usbdc_cb_ctl_done+0x64>)
    72ba:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    72bc:	2001      	movs	r0, #1
    72be:	4b05      	ldr	r3, [pc, #20]	; (72d4 <usbdc_cb_ctl_done+0x68>)
    72c0:	4798      	blx	r3
    72c2:	e7d8      	b.n	7276 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    72c4:	2201      	movs	r2, #1
    72c6:	4621      	mov	r1, r4
    72c8:	2000      	movs	r0, #0
    72ca:	4b04      	ldr	r3, [pc, #16]	; (72dc <usbdc_cb_ctl_done+0x70>)
    72cc:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    72ce:	e7d2      	b.n	7276 <usbdc_cb_ctl_done+0xa>
    72d0:	200020d0 	.word	0x200020d0
    72d4:	000071e5 	.word	0x000071e5
    72d8:	00003275 	.word	0x00003275
    72dc:	0000720d 	.word	0x0000720d

000072e0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    72e0:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    72e2:	4b0d      	ldr	r3, [pc, #52]	; (7318 <usbdc_reset+0x38>)
    72e4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    72e6:	4d0d      	ldr	r5, [pc, #52]	; (731c <usbdc_reset+0x3c>)
    72e8:	2602      	movs	r6, #2
    72ea:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    72ec:	2400      	movs	r4, #0
    72ee:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    72f0:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    72f2:	4620      	mov	r0, r4
    72f4:	4b0a      	ldr	r3, [pc, #40]	; (7320 <usbdc_reset+0x40>)
    72f6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    72f8:	7f28      	ldrb	r0, [r5, #28]
    72fa:	4b0a      	ldr	r3, [pc, #40]	; (7324 <usbdc_reset+0x44>)
    72fc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    72fe:	4a0a      	ldr	r2, [pc, #40]	; (7328 <usbdc_reset+0x48>)
    7300:	4621      	mov	r1, r4
    7302:	4620      	mov	r0, r4
    7304:	4d09      	ldr	r5, [pc, #36]	; (732c <usbdc_reset+0x4c>)
    7306:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    7308:	4a09      	ldr	r2, [pc, #36]	; (7330 <usbdc_reset+0x50>)
    730a:	4631      	mov	r1, r6
    730c:	4620      	mov	r0, r4
    730e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    7310:	4620      	mov	r0, r4
    7312:	4b08      	ldr	r3, [pc, #32]	; (7334 <usbdc_reset+0x54>)
    7314:	4798      	blx	r3
    7316:	bd70      	pop	{r4, r5, r6, pc}
    7318:	000071c1 	.word	0x000071c1
    731c:	200020d0 	.word	0x200020d0
    7320:	000032e9 	.word	0x000032e9
    7324:	000032d5 	.word	0x000032d5
    7328:	00007379 	.word	0x00007379
    732c:	00003519 	.word	0x00003519
    7330:	0000726d 	.word	0x0000726d
    7334:	00003315 	.word	0x00003315

00007338 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    7338:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    733a:	b110      	cbz	r0, 7342 <usbd_event_cb+0xa>
    733c:	2801      	cmp	r0, #1
    733e:	d004      	beq.n	734a <usbd_event_cb+0x12>
    7340:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    7342:	2000      	movs	r0, #0
    7344:	4b02      	ldr	r3, [pc, #8]	; (7350 <usbd_event_cb+0x18>)
    7346:	4798      	blx	r3
		break;
    7348:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    734a:	4b02      	ldr	r3, [pc, #8]	; (7354 <usbd_event_cb+0x1c>)
    734c:	4798      	blx	r3
    734e:	bd08      	pop	{r3, pc}
    7350:	000071e5 	.word	0x000071e5
    7354:	000072e1 	.word	0x000072e1

00007358 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    7358:	b500      	push	{lr}
    735a:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    735c:	9101      	str	r1, [sp, #4]
    735e:	9202      	str	r2, [sp, #8]
    7360:	f88d 000c 	strb.w	r0, [sp, #12]
    7364:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    7368:	a801      	add	r0, sp, #4
    736a:	4b02      	ldr	r3, [pc, #8]	; (7374 <usbdc_xfer+0x1c>)
    736c:	4798      	blx	r3
}
    736e:	b005      	add	sp, #20
    7370:	f85d fb04 	ldr.w	pc, [sp], #4
    7374:	00003361 	.word	0x00003361

00007378 <usbdc_cb_ctl_req>:
{
    7378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    737c:	b083      	sub	sp, #12
    737e:	4605      	mov	r5, r0
    7380:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    7382:	2200      	movs	r2, #0
    7384:	4b9b      	ldr	r3, [pc, #620]	; (75f4 <usbdc_cb_ctl_req+0x27c>)
    7386:	4798      	blx	r3
    7388:	f1b0 3fff 	cmp.w	r0, #4294967295
    738c:	d00b      	beq.n	73a6 <usbdc_cb_ctl_req+0x2e>
    738e:	2801      	cmp	r0, #1
    7390:	f000 81e3 	beq.w	775a <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    7394:	7823      	ldrb	r3, [r4, #0]
    7396:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    739a:	d008      	beq.n	73ae <usbdc_cb_ctl_req+0x36>
    739c:	2a80      	cmp	r2, #128	; 0x80
    739e:	f000 80f4 	beq.w	758a <usbdc_cb_ctl_req+0x212>
		return false;
    73a2:	2000      	movs	r0, #0
    73a4:	e000      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    73a6:	2000      	movs	r0, #0
}
    73a8:	b003      	add	sp, #12
    73aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    73ae:	7862      	ldrb	r2, [r4, #1]
    73b0:	3a01      	subs	r2, #1
    73b2:	2a0a      	cmp	r2, #10
    73b4:	f200 81d3 	bhi.w	775e <usbdc_cb_ctl_req+0x3e6>
    73b8:	e8df f012 	tbh	[pc, r2, lsl #1]
    73bc:	01d10060 	.word	0x01d10060
    73c0:	01d10076 	.word	0x01d10076
    73c4:	01d1000b 	.word	0x01d1000b
    73c8:	01d101d1 	.word	0x01d101d1
    73cc:	01d10015 	.word	0x01d10015
    73d0:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    73d2:	2301      	movs	r3, #1
    73d4:	2200      	movs	r2, #0
    73d6:	4611      	mov	r1, r2
    73d8:	4628      	mov	r0, r5
    73da:	4c87      	ldr	r4, [pc, #540]	; (75f8 <usbdc_cb_ctl_req+0x280>)
    73dc:	47a0      	blx	r4
    73de:	fab0 f080 	clz	r0, r0
    73e2:	0940      	lsrs	r0, r0, #5
    73e4:	e7e0      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    73e6:	8862      	ldrh	r2, [r4, #2]
    73e8:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    73ea:	b1ca      	cbz	r2, 7420 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    73ec:	4b83      	ldr	r3, [pc, #524]	; (75fc <usbdc_cb_ctl_req+0x284>)
    73ee:	681b      	ldr	r3, [r3, #0]
    73f0:	6859      	ldr	r1, [r3, #4]
    73f2:	6818      	ldr	r0, [r3, #0]
    73f4:	4b82      	ldr	r3, [pc, #520]	; (7600 <usbdc_cb_ctl_req+0x288>)
    73f6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    73f8:	2800      	cmp	r0, #0
    73fa:	f000 81be 	beq.w	777a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    73fe:	78c2      	ldrb	r2, [r0, #3]
    7400:	7881      	ldrb	r1, [r0, #2]
    7402:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    7406:	fa10 f181 	uxtah	r1, r0, r1
    740a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    740c:	2204      	movs	r2, #4
    740e:	4b7d      	ldr	r3, [pc, #500]	; (7604 <usbdc_cb_ctl_req+0x28c>)
    7410:	4798      	blx	r3
    7412:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    7414:	b130      	cbz	r0, 7424 <usbdc_cb_ctl_req+0xac>
    7416:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    7418:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 75fc <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    741c:	4f79      	ldr	r7, [pc, #484]	; (7604 <usbdc_cb_ctl_req+0x28c>)
    741e:	e018      	b.n	7452 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    7420:	4b79      	ldr	r3, [pc, #484]	; (7608 <usbdc_cb_ctl_req+0x290>)
    7422:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    7424:	2301      	movs	r3, #1
    7426:	2200      	movs	r2, #0
    7428:	4611      	mov	r1, r2
    742a:	4628      	mov	r0, r5
    742c:	4c72      	ldr	r4, [pc, #456]	; (75f8 <usbdc_cb_ctl_req+0x280>)
    742e:	47a0      	blx	r4
    7430:	fab0 f080 	clz	r0, r0
    7434:	0940      	lsrs	r0, r0, #5
    7436:	e7b7      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    7438:	464c      	mov	r4, r9
    743a:	e000      	b.n	743e <usbdc_cb_ctl_req+0xc6>
    743c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    743e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    7440:	7803      	ldrb	r3, [r0, #0]
    7442:	4418      	add	r0, r3
    7444:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    7446:	2204      	movs	r2, #4
    7448:	9901      	ldr	r1, [sp, #4]
    744a:	47b8      	blx	r7
    744c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    744e:	2800      	cmp	r0, #0
    7450:	d0e8      	beq.n	7424 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    7452:	f890 9002 	ldrb.w	r9, [r0, #2]
    7456:	45a1      	cmp	r9, r4
    7458:	d0f1      	beq.n	743e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    745a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    745e:	2c00      	cmp	r4, #0
    7460:	d0ea      	beq.n	7438 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    7462:	2600      	movs	r6, #0
    7464:	6863      	ldr	r3, [r4, #4]
    7466:	466a      	mov	r2, sp
    7468:	4631      	mov	r1, r6
    746a:	4620      	mov	r0, r4
    746c:	4798      	blx	r3
    746e:	2800      	cmp	r0, #0
    7470:	d0e4      	beq.n	743c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    7472:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    7474:	2c00      	cmp	r4, #0
    7476:	d1f5      	bne.n	7464 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    7478:	464c      	mov	r4, r9
    747a:	e7e0      	b.n	743e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    747c:	f003 031f 	and.w	r3, r3, #31
    7480:	2b02      	cmp	r3, #2
    7482:	f040 816e 	bne.w	7762 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    7486:	88e3      	ldrh	r3, [r4, #6]
    7488:	b10b      	cbz	r3, 748e <usbdc_cb_ctl_req+0x116>
			return false;
    748a:	2000      	movs	r0, #0
    748c:	e78c      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    748e:	88a0      	ldrh	r0, [r4, #4]
    7490:	2100      	movs	r1, #0
    7492:	b2c0      	uxtb	r0, r0
    7494:	4b5d      	ldr	r3, [pc, #372]	; (760c <usbdc_cb_ctl_req+0x294>)
    7496:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7498:	2301      	movs	r3, #1
    749a:	2200      	movs	r2, #0
    749c:	4611      	mov	r1, r2
    749e:	4628      	mov	r0, r5
    74a0:	4c55      	ldr	r4, [pc, #340]	; (75f8 <usbdc_cb_ctl_req+0x280>)
    74a2:	47a0      	blx	r4
		return true;
    74a4:	2001      	movs	r0, #1
    74a6:	e77f      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    74a8:	f003 031f 	and.w	r3, r3, #31
    74ac:	2b02      	cmp	r3, #2
    74ae:	f040 815a 	bne.w	7766 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    74b2:	88e3      	ldrh	r3, [r4, #6]
    74b4:	b10b      	cbz	r3, 74ba <usbdc_cb_ctl_req+0x142>
			return false;
    74b6:	2000      	movs	r0, #0
    74b8:	e776      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    74ba:	88a0      	ldrh	r0, [r4, #4]
    74bc:	2101      	movs	r1, #1
    74be:	b2c0      	uxtb	r0, r0
    74c0:	4b52      	ldr	r3, [pc, #328]	; (760c <usbdc_cb_ctl_req+0x294>)
    74c2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    74c4:	2301      	movs	r3, #1
    74c6:	2200      	movs	r2, #0
    74c8:	4611      	mov	r1, r2
    74ca:	4628      	mov	r0, r5
    74cc:	4c4a      	ldr	r4, [pc, #296]	; (75f8 <usbdc_cb_ctl_req+0x280>)
    74ce:	47a0      	blx	r4
		return true;
    74d0:	2001      	movs	r0, #1
    74d2:	e769      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    74d4:	8866      	ldrh	r6, [r4, #2]
    74d6:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    74d8:	4a48      	ldr	r2, [pc, #288]	; (75fc <usbdc_cb_ctl_req+0x284>)
    74da:	6813      	ldr	r3, [r2, #0]
    74dc:	7ed2      	ldrb	r2, [r2, #27]
    74de:	6859      	ldr	r1, [r3, #4]
    74e0:	6818      	ldr	r0, [r3, #0]
    74e2:	4b47      	ldr	r3, [pc, #284]	; (7600 <usbdc_cb_ctl_req+0x288>)
    74e4:	4798      	blx	r3
	if (NULL == ifc) {
    74e6:	2800      	cmp	r0, #0
    74e8:	d045      	beq.n	7576 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    74ea:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    74ec:	78c2      	ldrb	r2, [r0, #3]
    74ee:	7881      	ldrb	r1, [r0, #2]
    74f0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    74f4:	fa10 f181 	uxtah	r1, r0, r1
    74f8:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    74fa:	2204      	movs	r2, #4
    74fc:	4b41      	ldr	r3, [pc, #260]	; (7604 <usbdc_cb_ctl_req+0x28c>)
    74fe:	4798      	blx	r3
    7500:	4603      	mov	r3, r0
    7502:	2800      	cmp	r0, #0
    7504:	d039      	beq.n	757a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    7506:	2704      	movs	r7, #4
    7508:	4d3e      	ldr	r5, [pc, #248]	; (7604 <usbdc_cb_ctl_req+0x28c>)
    750a:	e008      	b.n	751e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    750c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    750e:	7803      	ldrb	r3, [r0, #0]
    7510:	4418      	add	r0, r3
    7512:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    7514:	463a      	mov	r2, r7
    7516:	9901      	ldr	r1, [sp, #4]
    7518:	47a8      	blx	r5
		if (NULL == ifc) {
    751a:	4603      	mov	r3, r0
    751c:	b378      	cbz	r0, 757e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    751e:	789a      	ldrb	r2, [r3, #2]
    7520:	42a2      	cmp	r2, r4
    7522:	d1f3      	bne.n	750c <usbdc_cb_ctl_req+0x194>
    7524:	78da      	ldrb	r2, [r3, #3]
    7526:	42b2      	cmp	r2, r6
    7528:	d1f0      	bne.n	750c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    752a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    752c:	4b33      	ldr	r3, [pc, #204]	; (75fc <usbdc_cb_ctl_req+0x284>)
    752e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    7530:	b33d      	cbz	r5, 7582 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    7532:	2701      	movs	r7, #1
    7534:	686b      	ldr	r3, [r5, #4]
    7536:	466a      	mov	r2, sp
    7538:	4639      	mov	r1, r7
    753a:	4628      	mov	r0, r5
    753c:	4798      	blx	r3
    753e:	b120      	cbz	r0, 754a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    7540:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    7542:	2d00      	cmp	r5, #0
    7544:	d1f6      	bne.n	7534 <usbdc_cb_ctl_req+0x1bc>
	return false;
    7546:	2000      	movs	r0, #0
    7548:	e72e      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    754a:	686b      	ldr	r3, [r5, #4]
    754c:	466a      	mov	r2, sp
    754e:	2100      	movs	r1, #0
    7550:	4628      	mov	r0, r5
    7552:	4798      	blx	r3
    7554:	b9b8      	cbnz	r0, 7586 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    7556:	b136      	cbz	r6, 7566 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    7558:	4a28      	ldr	r2, [pc, #160]	; (75fc <usbdc_cb_ctl_req+0x284>)
    755a:	2301      	movs	r3, #1
    755c:	fa03 f404 	lsl.w	r4, r3, r4
    7560:	7f53      	ldrb	r3, [r2, #29]
    7562:	4323      	orrs	r3, r4
    7564:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    7566:	2300      	movs	r3, #0
    7568:	461a      	mov	r2, r3
    756a:	4619      	mov	r1, r3
    756c:	4618      	mov	r0, r3
    756e:	4c22      	ldr	r4, [pc, #136]	; (75f8 <usbdc_cb_ctl_req+0x280>)
    7570:	47a0      	blx	r4
			return true;
    7572:	2001      	movs	r0, #1
    7574:	e718      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    7576:	2000      	movs	r0, #0
    7578:	e716      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    757a:	2000      	movs	r0, #0
    757c:	e714      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
			return false;
    757e:	2000      	movs	r0, #0
    7580:	e712      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
	return false;
    7582:	2000      	movs	r0, #0
    7584:	e710      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
			return false;
    7586:	2000      	movs	r0, #0
    7588:	e70e      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    758a:	7862      	ldrb	r2, [r4, #1]
    758c:	2a0a      	cmp	r2, #10
    758e:	f200 80ec 	bhi.w	776a <usbdc_cb_ctl_req+0x3f2>
    7592:	e8df f012 	tbh	[pc, r2, lsl #1]
    7596:	008e      	.short	0x008e
    7598:	00ea00ea 	.word	0x00ea00ea
    759c:	00ea00ea 	.word	0x00ea00ea
    75a0:	000b00ea 	.word	0x000b00ea
    75a4:	008200ea 	.word	0x008200ea
    75a8:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    75ac:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    75ae:	0a13      	lsrs	r3, r2, #8
    75b0:	2b02      	cmp	r3, #2
    75b2:	d02d      	beq.n	7610 <usbdc_cb_ctl_req+0x298>
    75b4:	2b03      	cmp	r3, #3
    75b6:	d050      	beq.n	765a <usbdc_cb_ctl_req+0x2e2>
    75b8:	2b01      	cmp	r3, #1
    75ba:	d001      	beq.n	75c0 <usbdc_cb_ctl_req+0x248>
	return false;
    75bc:	2000      	movs	r0, #0
    75be:	e6f3      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    75c0:	88e2      	ldrh	r2, [r4, #6]
    75c2:	2a12      	cmp	r2, #18
    75c4:	bf28      	it	cs
    75c6:	2212      	movcs	r2, #18
    75c8:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    75ca:	4b0c      	ldr	r3, [pc, #48]	; (75fc <usbdc_cb_ctl_req+0x284>)
    75cc:	681b      	ldr	r3, [r3, #0]
    75ce:	2201      	movs	r2, #1
    75d0:	6859      	ldr	r1, [r3, #4]
    75d2:	6818      	ldr	r0, [r3, #0]
    75d4:	4b0b      	ldr	r3, [pc, #44]	; (7604 <usbdc_cb_ctl_req+0x28c>)
    75d6:	4798      	blx	r3
	if (!dev_desc) {
    75d8:	4601      	mov	r1, r0
    75da:	2800      	cmp	r0, #0
    75dc:	f000 80c7 	beq.w	776e <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    75e0:	2300      	movs	r3, #0
    75e2:	4622      	mov	r2, r4
    75e4:	4628      	mov	r0, r5
    75e6:	4c04      	ldr	r4, [pc, #16]	; (75f8 <usbdc_cb_ctl_req+0x280>)
    75e8:	47a0      	blx	r4
    75ea:	fab0 f080 	clz	r0, r0
    75ee:	0940      	lsrs	r0, r0, #5
    75f0:	e6da      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
    75f2:	bf00      	nop
    75f4:	0000720d 	.word	0x0000720d
    75f8:	00007359 	.word	0x00007359
    75fc:	200020d0 	.word	0x200020d0
    7600:	0000791d 	.word	0x0000791d
    7604:	0000789d 	.word	0x0000789d
    7608:	000071c1 	.word	0x000071c1
    760c:	000034b1 	.word	0x000034b1
	uint16_t length   = req->wLength;
    7610:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7612:	4b5b      	ldr	r3, [pc, #364]	; (7780 <usbdc_cb_ctl_req+0x408>)
    7614:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7616:	681b      	ldr	r3, [r3, #0]
    7618:	3201      	adds	r2, #1
    761a:	b2d2      	uxtb	r2, r2
    761c:	6859      	ldr	r1, [r3, #4]
    761e:	6818      	ldr	r0, [r3, #0]
    7620:	4b58      	ldr	r3, [pc, #352]	; (7784 <usbdc_cb_ctl_req+0x40c>)
    7622:	4798      	blx	r3
	if (NULL == cfg_desc) {
    7624:	4601      	mov	r1, r0
    7626:	2800      	cmp	r0, #0
    7628:	f000 80a3 	beq.w	7772 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    762c:	78c3      	ldrb	r3, [r0, #3]
    762e:	7882      	ldrb	r2, [r0, #2]
    7630:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    7634:	b292      	uxth	r2, r2
	if (length <= total_len) {
    7636:	4294      	cmp	r4, r2
    7638:	d90d      	bls.n	7656 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    763a:	3e01      	subs	r6, #1
    763c:	4226      	tst	r6, r4
    763e:	bf0c      	ite	eq
    7640:	2301      	moveq	r3, #1
    7642:	2300      	movne	r3, #0
		length = total_len;
    7644:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    7646:	4622      	mov	r2, r4
    7648:	4628      	mov	r0, r5
    764a:	4c4f      	ldr	r4, [pc, #316]	; (7788 <usbdc_cb_ctl_req+0x410>)
    764c:	47a0      	blx	r4
    764e:	fab0 f080 	clz	r0, r0
    7652:	0940      	lsrs	r0, r0, #5
    7654:	e6a8      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    7656:	2300      	movs	r3, #0
    7658:	e7f5      	b.n	7646 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    765a:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    765c:	4b48      	ldr	r3, [pc, #288]	; (7780 <usbdc_cb_ctl_req+0x408>)
    765e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    7660:	681b      	ldr	r3, [r3, #0]
    7662:	b2d2      	uxtb	r2, r2
    7664:	6859      	ldr	r1, [r3, #4]
    7666:	6818      	ldr	r0, [r3, #0]
    7668:	4b48      	ldr	r3, [pc, #288]	; (778c <usbdc_cb_ctl_req+0x414>)
    766a:	4798      	blx	r3
	if (NULL == str_desc) {
    766c:	4601      	mov	r1, r0
    766e:	2800      	cmp	r0, #0
    7670:	f000 8081 	beq.w	7776 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    7674:	7802      	ldrb	r2, [r0, #0]
    7676:	4294      	cmp	r4, r2
    7678:	d90d      	bls.n	7696 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    767a:	3e01      	subs	r6, #1
    767c:	4226      	tst	r6, r4
    767e:	bf0c      	ite	eq
    7680:	2301      	moveq	r3, #1
    7682:	2300      	movne	r3, #0
		length = str_desc[0];
    7684:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    7686:	4622      	mov	r2, r4
    7688:	4628      	mov	r0, r5
    768a:	4c3f      	ldr	r4, [pc, #252]	; (7788 <usbdc_cb_ctl_req+0x410>)
    768c:	47a0      	blx	r4
    768e:	fab0 f080 	clz	r0, r0
    7692:	0940      	lsrs	r0, r0, #5
    7694:	e688      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    7696:	2300      	movs	r3, #0
    7698:	e7f5      	b.n	7686 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    769a:	4939      	ldr	r1, [pc, #228]	; (7780 <usbdc_cb_ctl_req+0x408>)
    769c:	694b      	ldr	r3, [r1, #20]
    769e:	7eca      	ldrb	r2, [r1, #27]
    76a0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    76a2:	2300      	movs	r3, #0
    76a4:	2201      	movs	r2, #1
    76a6:	6949      	ldr	r1, [r1, #20]
    76a8:	4628      	mov	r0, r5
    76aa:	4c37      	ldr	r4, [pc, #220]	; (7788 <usbdc_cb_ctl_req+0x410>)
    76ac:	47a0      	blx	r4
		return true;
    76ae:	2001      	movs	r0, #1
    76b0:	e67a      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    76b2:	f003 031f 	and.w	r3, r3, #31
    76b6:	2b01      	cmp	r3, #1
    76b8:	d903      	bls.n	76c2 <usbdc_cb_ctl_req+0x34a>
    76ba:	2b02      	cmp	r3, #2
    76bc:	d010      	beq.n	76e0 <usbdc_cb_ctl_req+0x368>
		return false;
    76be:	2000      	movs	r0, #0
    76c0:	e672      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		st = 0;
    76c2:	2300      	movs	r3, #0
    76c4:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    76c6:	492e      	ldr	r1, [pc, #184]	; (7780 <usbdc_cb_ctl_req+0x408>)
    76c8:	694b      	ldr	r3, [r1, #20]
    76ca:	f8bd 2000 	ldrh.w	r2, [sp]
    76ce:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    76d0:	2300      	movs	r3, #0
    76d2:	2202      	movs	r2, #2
    76d4:	6949      	ldr	r1, [r1, #20]
    76d6:	4628      	mov	r0, r5
    76d8:	4c2b      	ldr	r4, [pc, #172]	; (7788 <usbdc_cb_ctl_req+0x410>)
    76da:	47a0      	blx	r4
	return true;
    76dc:	2001      	movs	r0, #1
    76de:	e663      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    76e0:	88a0      	ldrh	r0, [r4, #4]
    76e2:	2102      	movs	r1, #2
    76e4:	b2c0      	uxtb	r0, r0
    76e6:	4b2a      	ldr	r3, [pc, #168]	; (7790 <usbdc_cb_ctl_req+0x418>)
    76e8:	4798      	blx	r3
		if (st < 0) {
    76ea:	2800      	cmp	r0, #0
    76ec:	db03      	blt.n	76f6 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    76ee:	f000 0001 	and.w	r0, r0, #1
    76f2:	9000      	str	r0, [sp, #0]
    76f4:	e7e7      	b.n	76c6 <usbdc_cb_ctl_req+0x34e>
			return false;
    76f6:	2000      	movs	r0, #0
    76f8:	e656      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    76fa:	4b21      	ldr	r3, [pc, #132]	; (7780 <usbdc_cb_ctl_req+0x408>)
    76fc:	7f5b      	ldrb	r3, [r3, #29]
    76fe:	88a2      	ldrh	r2, [r4, #4]
    7700:	4113      	asrs	r3, r2
    7702:	f013 0f01 	tst.w	r3, #1
    7706:	d012      	beq.n	772e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7708:	4b1d      	ldr	r3, [pc, #116]	; (7780 <usbdc_cb_ctl_req+0x408>)
    770a:	691d      	ldr	r5, [r3, #16]
	return false;
    770c:	2000      	movs	r0, #0
	while (NULL != func) {
    770e:	2d00      	cmp	r5, #0
    7710:	f43f ae4a 	beq.w	73a8 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    7714:	2602      	movs	r6, #2
    7716:	686b      	ldr	r3, [r5, #4]
    7718:	4622      	mov	r2, r4
    771a:	4631      	mov	r1, r6
    771c:	4628      	mov	r0, r5
    771e:	4798      	blx	r3
    7720:	2800      	cmp	r0, #0
    7722:	da0f      	bge.n	7744 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    7724:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    7726:	2d00      	cmp	r5, #0
    7728:	d1f5      	bne.n	7716 <usbdc_cb_ctl_req+0x39e>
	return false;
    772a:	2000      	movs	r0, #0
    772c:	e63c      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    772e:	4914      	ldr	r1, [pc, #80]	; (7780 <usbdc_cb_ctl_req+0x408>)
    7730:	694b      	ldr	r3, [r1, #20]
    7732:	2000      	movs	r0, #0
    7734:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7736:	4603      	mov	r3, r0
    7738:	2201      	movs	r2, #1
    773a:	6949      	ldr	r1, [r1, #20]
    773c:	4c12      	ldr	r4, [pc, #72]	; (7788 <usbdc_cb_ctl_req+0x410>)
    773e:	47a0      	blx	r4
		return true;
    7740:	2001      	movs	r0, #1
    7742:	e631      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    7744:	490e      	ldr	r1, [pc, #56]	; (7780 <usbdc_cb_ctl_req+0x408>)
    7746:	694b      	ldr	r3, [r1, #20]
    7748:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    774a:	2300      	movs	r3, #0
    774c:	2201      	movs	r2, #1
    774e:	6949      	ldr	r1, [r1, #20]
    7750:	4618      	mov	r0, r3
    7752:	4c0d      	ldr	r4, [pc, #52]	; (7788 <usbdc_cb_ctl_req+0x410>)
    7754:	47a0      	blx	r4
			return true;
    7756:	2001      	movs	r0, #1
    7758:	e626      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return true;
    775a:	2001      	movs	r0, #1
    775c:	e624      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    775e:	2000      	movs	r0, #0
    7760:	e622      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    7762:	2000      	movs	r0, #0
    7764:	e620      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    7766:	2000      	movs	r0, #0
    7768:	e61e      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    776a:	2000      	movs	r0, #0
    776c:	e61c      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    776e:	2000      	movs	r0, #0
    7770:	e61a      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    7772:	2000      	movs	r0, #0
    7774:	e618      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
		return false;
    7776:	2000      	movs	r0, #0
    7778:	e616      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
			return false;
    777a:	2000      	movs	r0, #0
    777c:	e614      	b.n	73a8 <usbdc_cb_ctl_req+0x30>
    777e:	bf00      	nop
    7780:	200020d0 	.word	0x200020d0
    7784:	0000791d 	.word	0x0000791d
    7788:	00007359 	.word	0x00007359
    778c:	00007985 	.word	0x00007985
    7790:	000034b1 	.word	0x000034b1

00007794 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    7794:	b508      	push	{r3, lr}
	switch (type) {
    7796:	2801      	cmp	r0, #1
    7798:	d007      	beq.n	77aa <usbdc_register_handler+0x16>
    779a:	b110      	cbz	r0, 77a2 <usbdc_register_handler+0xe>
    779c:	2802      	cmp	r0, #2
    779e:	d008      	beq.n	77b2 <usbdc_register_handler+0x1e>
    77a0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    77a2:	4806      	ldr	r0, [pc, #24]	; (77bc <usbdc_register_handler+0x28>)
    77a4:	4b06      	ldr	r3, [pc, #24]	; (77c0 <usbdc_register_handler+0x2c>)
    77a6:	4798      	blx	r3
		break;
    77a8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    77aa:	4806      	ldr	r0, [pc, #24]	; (77c4 <usbdc_register_handler+0x30>)
    77ac:	4b04      	ldr	r3, [pc, #16]	; (77c0 <usbdc_register_handler+0x2c>)
    77ae:	4798      	blx	r3
		break;
    77b0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    77b2:	4805      	ldr	r0, [pc, #20]	; (77c8 <usbdc_register_handler+0x34>)
    77b4:	4b02      	ldr	r3, [pc, #8]	; (77c0 <usbdc_register_handler+0x2c>)
    77b6:	4798      	blx	r3
    77b8:	bd08      	pop	{r3, pc}
    77ba:	bf00      	nop
    77bc:	200020d4 	.word	0x200020d4
    77c0:	000035c1 	.word	0x000035c1
    77c4:	200020d8 	.word	0x200020d8
    77c8:	200020dc 	.word	0x200020dc

000077cc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    77cc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    77ce:	4605      	mov	r5, r0
    77d0:	f240 3255 	movw	r2, #853	; 0x355
    77d4:	490c      	ldr	r1, [pc, #48]	; (7808 <usbdc_init+0x3c>)
    77d6:	3000      	adds	r0, #0
    77d8:	bf18      	it	ne
    77da:	2001      	movne	r0, #1
    77dc:	4b0b      	ldr	r3, [pc, #44]	; (780c <usbdc_init+0x40>)
    77de:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    77e0:	4b0b      	ldr	r3, [pc, #44]	; (7810 <usbdc_init+0x44>)
    77e2:	4798      	blx	r3
	if (rc < 0) {
    77e4:	2800      	cmp	r0, #0
    77e6:	db0e      	blt.n	7806 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    77e8:	4c0a      	ldr	r4, [pc, #40]	; (7814 <usbdc_init+0x48>)
    77ea:	2220      	movs	r2, #32
    77ec:	2100      	movs	r1, #0
    77ee:	4620      	mov	r0, r4
    77f0:	4b09      	ldr	r3, [pc, #36]	; (7818 <usbdc_init+0x4c>)
    77f2:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    77f4:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    77f6:	4909      	ldr	r1, [pc, #36]	; (781c <usbdc_init+0x50>)
    77f8:	2000      	movs	r0, #0
    77fa:	4c09      	ldr	r4, [pc, #36]	; (7820 <usbdc_init+0x54>)
    77fc:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    77fe:	4909      	ldr	r1, [pc, #36]	; (7824 <usbdc_init+0x58>)
    7800:	2001      	movs	r0, #1
    7802:	47a0      	blx	r4

	return 0;
    7804:	2000      	movs	r0, #0
}
    7806:	bd38      	pop	{r3, r4, r5, pc}
    7808:	0000db0c 	.word	0x0000db0c
    780c:	00003565 	.word	0x00003565
    7810:	000031e9 	.word	0x000031e9
    7814:	200020d0 	.word	0x200020d0
    7818:	0000ceed 	.word	0x0000ceed
    781c:	0000724d 	.word	0x0000724d
    7820:	00003251 	.word	0x00003251
    7824:	00007339 	.word	0x00007339

00007828 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    7828:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    782a:	4601      	mov	r1, r0
    782c:	4801      	ldr	r0, [pc, #4]	; (7834 <usbdc_register_function+0xc>)
    782e:	4b02      	ldr	r3, [pc, #8]	; (7838 <usbdc_register_function+0x10>)
    7830:	4798      	blx	r3
    7832:	bd08      	pop	{r3, pc}
    7834:	200020e0 	.word	0x200020e0
    7838:	000035c1 	.word	0x000035c1

0000783c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    783c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    783e:	4b0a      	ldr	r3, [pc, #40]	; (7868 <usbdc_start+0x2c>)
    7840:	7e9b      	ldrb	r3, [r3, #26]
    7842:	b95b      	cbnz	r3, 785c <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    7844:	b168      	cbz	r0, 7862 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    7846:	4b08      	ldr	r3, [pc, #32]	; (7868 <usbdc_start+0x2c>)
    7848:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    784a:	6802      	ldr	r2, [r0, #0]
    784c:	79d2      	ldrb	r2, [r2, #7]
    784e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    7850:	2201      	movs	r2, #1
    7852:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    7854:	4b05      	ldr	r3, [pc, #20]	; (786c <usbdc_start+0x30>)
    7856:	4798      	blx	r3
	return ERR_NONE;
    7858:	2000      	movs	r0, #0
    785a:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    785c:	f06f 0003 	mvn.w	r0, #3
    7860:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    7862:	f06f 0008 	mvn.w	r0, #8
}
    7866:	bd08      	pop	{r3, pc}
    7868:	200020d0 	.word	0x200020d0
    786c:	0000325d 	.word	0x0000325d

00007870 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    7870:	b508      	push	{r3, lr}
	usb_d_attach();
    7872:	4b01      	ldr	r3, [pc, #4]	; (7878 <usbdc_attach+0x8>)
    7874:	4798      	blx	r3
    7876:	bd08      	pop	{r3, pc}
    7878:	00003269 	.word	0x00003269

0000787c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    787c:	4b01      	ldr	r3, [pc, #4]	; (7884 <usbdc_get_ctrl_buffer+0x8>)
    787e:	6958      	ldr	r0, [r3, #20]
    7880:	4770      	bx	lr
    7882:	bf00      	nop
    7884:	200020d0 	.word	0x200020d0

00007888 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    7888:	4b03      	ldr	r3, [pc, #12]	; (7898 <usbdc_get_state+0x10>)
    788a:	7e98      	ldrb	r0, [r3, #26]
    788c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    7890:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    7892:	bf18      	it	ne
    7894:	2010      	movne	r0, #16
    7896:	4770      	bx	lr
    7898:	200020d0 	.word	0x200020d0

0000789c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    789c:	4288      	cmp	r0, r1
    789e:	d214      	bcs.n	78ca <usb_find_desc+0x2e>
	return desc[0];
    78a0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    78a2:	2b01      	cmp	r3, #1
    78a4:	d913      	bls.n	78ce <usb_find_desc+0x32>
{
    78a6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    78a8:	7844      	ldrb	r4, [r0, #1]
    78aa:	4294      	cmp	r4, r2
    78ac:	d00a      	beq.n	78c4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    78ae:	4418      	add	r0, r3
	while (desc < eof) {
    78b0:	4281      	cmp	r1, r0
    78b2:	d906      	bls.n	78c2 <usb_find_desc+0x26>
	return desc[0];
    78b4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    78b6:	2b01      	cmp	r3, #1
    78b8:	d90b      	bls.n	78d2 <usb_find_desc+0x36>
	return desc[1];
    78ba:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    78bc:	4294      	cmp	r4, r2
    78be:	d1f6      	bne.n	78ae <usb_find_desc+0x12>
    78c0:	e000      	b.n	78c4 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    78c2:	2000      	movs	r0, #0
}
    78c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    78c8:	4770      	bx	lr
	return NULL;
    78ca:	2000      	movs	r0, #0
    78cc:	4770      	bx	lr
		_desc_len_check();
    78ce:	2000      	movs	r0, #0
    78d0:	4770      	bx	lr
    78d2:	2000      	movs	r0, #0
    78d4:	e7f6      	b.n	78c4 <usb_find_desc+0x28>

000078d6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    78d6:	4288      	cmp	r0, r1
    78d8:	d216      	bcs.n	7908 <usb_find_ep_desc+0x32>
	return desc[0];
    78da:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    78dc:	2b01      	cmp	r3, #1
    78de:	d915      	bls.n	790c <usb_find_ep_desc+0x36>
	return desc[1];
    78e0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    78e2:	2a04      	cmp	r2, #4
    78e4:	d014      	beq.n	7910 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    78e6:	2a05      	cmp	r2, #5
    78e8:	d00b      	beq.n	7902 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    78ea:	4418      	add	r0, r3
	while (desc < eof) {
    78ec:	4281      	cmp	r1, r0
    78ee:	d909      	bls.n	7904 <usb_find_ep_desc+0x2e>
	return desc[0];
    78f0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    78f2:	2b01      	cmp	r3, #1
    78f4:	d90e      	bls.n	7914 <usb_find_ep_desc+0x3e>
	return desc[1];
    78f6:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    78f8:	2a04      	cmp	r2, #4
    78fa:	d00d      	beq.n	7918 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    78fc:	2a05      	cmp	r2, #5
    78fe:	d1f4      	bne.n	78ea <usb_find_ep_desc+0x14>
    7900:	e00b      	b.n	791a <usb_find_ep_desc+0x44>
    7902:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    7904:	2000      	movs	r0, #0
    7906:	4770      	bx	lr
    7908:	2000      	movs	r0, #0
    790a:	4770      	bx	lr
		_desc_len_check();
    790c:	2000      	movs	r0, #0
    790e:	4770      	bx	lr
	return NULL;
    7910:	2000      	movs	r0, #0
    7912:	4770      	bx	lr
		_desc_len_check();
    7914:	2000      	movs	r0, #0
    7916:	4770      	bx	lr
	return NULL;
    7918:	2000      	movs	r0, #0
}
    791a:	4770      	bx	lr

0000791c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    791c:	b538      	push	{r3, r4, r5, lr}
    791e:	460c      	mov	r4, r1
    7920:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    7922:	2202      	movs	r2, #2
    7924:	4b16      	ldr	r3, [pc, #88]	; (7980 <usb_find_cfg_desc+0x64>)
    7926:	4798      	blx	r3
	if (!desc) {
    7928:	4603      	mov	r3, r0
    792a:	b1e8      	cbz	r0, 7968 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    792c:	4284      	cmp	r4, r0
    792e:	d91d      	bls.n	796c <usb_find_cfg_desc+0x50>
		_desc_len_check();
    7930:	7802      	ldrb	r2, [r0, #0]
    7932:	2a01      	cmp	r2, #1
    7934:	d91c      	bls.n	7970 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    7936:	7842      	ldrb	r2, [r0, #1]
    7938:	2a02      	cmp	r2, #2
    793a:	d11b      	bne.n	7974 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    793c:	7942      	ldrb	r2, [r0, #5]
    793e:	42aa      	cmp	r2, r5
    7940:	d012      	beq.n	7968 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    7942:	78d9      	ldrb	r1, [r3, #3]
    7944:	789a      	ldrb	r2, [r3, #2]
    7946:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    794a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    794e:	429c      	cmp	r4, r3
    7950:	d909      	bls.n	7966 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    7952:	781a      	ldrb	r2, [r3, #0]
    7954:	2a01      	cmp	r2, #1
    7956:	d90f      	bls.n	7978 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    7958:	785a      	ldrb	r2, [r3, #1]
    795a:	2a02      	cmp	r2, #2
    795c:	d10e      	bne.n	797c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    795e:	795a      	ldrb	r2, [r3, #5]
    7960:	42aa      	cmp	r2, r5
    7962:	d1ee      	bne.n	7942 <usb_find_cfg_desc+0x26>
    7964:	e000      	b.n	7968 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    7966:	2300      	movs	r3, #0
}
    7968:	4618      	mov	r0, r3
    796a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    796c:	2300      	movs	r3, #0
    796e:	e7fb      	b.n	7968 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    7970:	2300      	movs	r3, #0
    7972:	e7f9      	b.n	7968 <usb_find_cfg_desc+0x4c>
	return NULL;
    7974:	2300      	movs	r3, #0
    7976:	e7f7      	b.n	7968 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    7978:	2300      	movs	r3, #0
    797a:	e7f5      	b.n	7968 <usb_find_cfg_desc+0x4c>
	return NULL;
    797c:	2300      	movs	r3, #0
    797e:	e7f3      	b.n	7968 <usb_find_cfg_desc+0x4c>
    7980:	0000789d 	.word	0x0000789d

00007984 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    7984:	4288      	cmp	r0, r1
    7986:	d217      	bcs.n	79b8 <usb_find_str_desc+0x34>
{
    7988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    798c:	460d      	mov	r5, r1
    798e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    7990:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    7992:	f04f 0803 	mov.w	r8, #3
    7996:	4f0c      	ldr	r7, [pc, #48]	; (79c8 <usb_find_str_desc+0x44>)
    7998:	4642      	mov	r2, r8
    799a:	4629      	mov	r1, r5
    799c:	47b8      	blx	r7
		if (desc) {
    799e:	4603      	mov	r3, r0
    79a0:	b170      	cbz	r0, 79c0 <usb_find_str_desc+0x3c>
	return desc[0];
    79a2:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    79a4:	2801      	cmp	r0, #1
    79a6:	d90a      	bls.n	79be <usb_find_str_desc+0x3a>
			if (i == str_index) {
    79a8:	42a6      	cmp	r6, r4
    79aa:	d009      	beq.n	79c0 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    79ac:	4418      	add	r0, r3
    79ae:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    79b0:	4285      	cmp	r5, r0
    79b2:	d8f1      	bhi.n	7998 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    79b4:	2300      	movs	r3, #0
    79b6:	e003      	b.n	79c0 <usb_find_str_desc+0x3c>
    79b8:	2300      	movs	r3, #0
}
    79ba:	4618      	mov	r0, r3
    79bc:	4770      	bx	lr
			_desc_len_check();
    79be:	2300      	movs	r3, #0
}
    79c0:	4618      	mov	r0, r3
    79c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79c6:	bf00      	nop
    79c8:	0000789d 	.word	0x0000789d

000079cc <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
    79cc:	b480      	push	{r7}
    79ce:	b083      	sub	sp, #12
    79d0:	af00      	add	r7, sp, #0
    79d2:	6078      	str	r0, [r7, #4]
    79d4:	4a04      	ldr	r2, [pc, #16]	; (79e8 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
    79da:	687b      	ldr	r3, [r7, #4]
    79dc:	4618      	mov	r0, r3
    79de:	370c      	adds	r7, #12
    79e0:	46bd      	mov	sp, r7
    79e2:	bc80      	pop	{r7}
    79e4:	4770      	bx	lr
    79e6:	bf00      	nop
    79e8:	0000db2c 	.word	0x0000db2c

000079ec <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
    79ec:	b480      	push	{r7}
    79ee:	b083      	sub	sp, #12
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
    79f4:	4a04      	ldr	r2, [pc, #16]	; (7a08 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
    79f6:	687b      	ldr	r3, [r7, #4]
    79f8:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	4618      	mov	r0, r3
    79fe:	370c      	adds	r7, #12
    7a00:	46bd      	mov	sp, r7
    7a02:	bc80      	pop	{r7}
    7a04:	4770      	bx	lr
    7a06:	bf00      	nop
    7a08:	0000db2c 	.word	0x0000db2c

00007a0c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    7a0c:	b5b0      	push	{r4, r5, r7, lr}
    7a0e:	b082      	sub	sp, #8
    7a10:	af00      	add	r7, sp, #0
    7a12:	6078      	str	r0, [r7, #4]
    7a14:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    7a16:	4b0a      	ldr	r3, [pc, #40]	; (7a40 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
    7a18:	6878      	ldr	r0, [r7, #4]
    7a1a:	4798      	blx	r3
    7a1c:	4604      	mov	r4, r0
    7a1e:	460d      	mov	r5, r1
    7a20:	4b07      	ldr	r3, [pc, #28]	; (7a40 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
    7a22:	6838      	ldr	r0, [r7, #0]
    7a24:	4798      	blx	r3
    7a26:	4602      	mov	r2, r0
    7a28:	460b      	mov	r3, r1
    7a2a:	4620      	mov	r0, r4
    7a2c:	4629      	mov	r1, r5
    7a2e:	4c05      	ldr	r4, [pc, #20]	; (7a44 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
    7a30:	47a0      	blx	r4
    7a32:	4603      	mov	r3, r0
    7a34:	460c      	mov	r4, r1
    }
    7a36:	4618      	mov	r0, r3
    7a38:	4621      	mov	r1, r4
    7a3a:	3708      	adds	r7, #8
    7a3c:	46bd      	mov	sp, r7
    7a3e:	bdb0      	pop	{r4, r5, r7, pc}
    7a40:	0000c6d9 	.word	0x0000c6d9
    7a44:	0000b2ed 	.word	0x0000b2ed

00007a48 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
    7a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a4c:	b085      	sub	sp, #20
    7a4e:	af00      	add	r7, sp, #0
    7a50:	6078      	str	r0, [r7, #4]
    7a52:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
    7a54:	2300      	movs	r3, #0
    7a56:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
    7a58:	2300      	movs	r3, #0
    7a5a:	73bb      	strb	r3, [r7, #14]
    7a5c:	7bbb      	ldrb	r3, [r7, #14]
    7a5e:	2b02      	cmp	r3, #2
    7a60:	d86d      	bhi.n	7b3e <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
    7a62:	7bbb      	ldrb	r3, [r7, #14]
    7a64:	f1c3 0402 	rsb	r4, r3, #2
    7a68:	4b3c      	ldr	r3, [pc, #240]	; (7b5c <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
    7a6a:	6838      	ldr	r0, [r7, #0]
    7a6c:	4798      	blx	r3
    7a6e:	4680      	mov	r8, r0
    7a70:	4689      	mov	r9, r1
    7a72:	7bbb      	ldrb	r3, [r7, #14]
    7a74:	f1c3 0302 	rsb	r3, r3, #2
    7a78:	4619      	mov	r1, r3
    7a7a:	200a      	movs	r0, #10
    7a7c:	4b38      	ldr	r3, [pc, #224]	; (7b60 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
    7a7e:	4798      	blx	r3
    7a80:	4602      	mov	r2, r0
    7a82:	460b      	mov	r3, r1
    7a84:	4d37      	ldr	r5, [pc, #220]	; (7b64 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
    7a86:	4640      	mov	r0, r8
    7a88:	4649      	mov	r1, r9
    7a8a:	47a8      	blx	r5
    7a8c:	4602      	mov	r2, r0
    7a8e:	460b      	mov	r3, r1
    7a90:	4611      	mov	r1, r2
    7a92:	461a      	mov	r2, r3
    7a94:	4b34      	ldr	r3, [pc, #208]	; (7b68 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
    7a96:	4608      	mov	r0, r1
    7a98:	4611      	mov	r1, r2
    7a9a:	4798      	blx	r3
    7a9c:	4603      	mov	r3, r0
    7a9e:	b2da      	uxtb	r2, r3
    7aa0:	f107 0310 	add.w	r3, r7, #16
    7aa4:	4423      	add	r3, r4
    7aa6:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
    7aaa:	7bbb      	ldrb	r3, [r7, #14]
    7aac:	f1c3 0302 	rsb	r3, r3, #2
    7ab0:	f107 0210 	add.w	r2, r7, #16
    7ab4:	4413      	add	r3, r2
    7ab6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    7aba:	461a      	mov	r2, r3
    7abc:	4b2b      	ldr	r3, [pc, #172]	; (7b6c <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
    7abe:	4610      	mov	r0, r2
    7ac0:	4798      	blx	r3
    7ac2:	4605      	mov	r5, r0
    7ac4:	460e      	mov	r6, r1
    7ac6:	7bbb      	ldrb	r3, [r7, #14]
    7ac8:	f1c3 0302 	rsb	r3, r3, #2
    7acc:	4619      	mov	r1, r3
    7ace:	200a      	movs	r0, #10
    7ad0:	4b23      	ldr	r3, [pc, #140]	; (7b60 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
    7ad2:	4798      	blx	r3
    7ad4:	4602      	mov	r2, r0
    7ad6:	460b      	mov	r3, r1
    7ad8:	4c25      	ldr	r4, [pc, #148]	; (7b70 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
    7ada:	4628      	mov	r0, r5
    7adc:	4631      	mov	r1, r6
    7ade:	47a0      	blx	r4
    7ae0:	4603      	mov	r3, r0
    7ae2:	460c      	mov	r4, r1
    7ae4:	461d      	mov	r5, r3
    7ae6:	4626      	mov	r6, r4
    7ae8:	4b1c      	ldr	r3, [pc, #112]	; (7b5c <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
    7aea:	6838      	ldr	r0, [r7, #0]
    7aec:	4798      	blx	r3
    7aee:	4c21      	ldr	r4, [pc, #132]	; (7b74 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
    7af0:	462a      	mov	r2, r5
    7af2:	4633      	mov	r3, r6
    7af4:	47a0      	blx	r4
    7af6:	4603      	mov	r3, r0
    7af8:	460c      	mov	r4, r1
    7afa:	4619      	mov	r1, r3
    7afc:	4622      	mov	r2, r4
    7afe:	4b1a      	ldr	r3, [pc, #104]	; (7b68 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
    7b00:	4608      	mov	r0, r1
    7b02:	4611      	mov	r1, r2
    7b04:	4798      	blx	r3
    7b06:	4603      	mov	r3, r0
    7b08:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
    7b0a:	7bbb      	ldrb	r3, [r7, #14]
    7b0c:	f1c3 0302 	rsb	r3, r3, #2
    7b10:	f107 0210 	add.w	r2, r7, #16
    7b14:	4413      	add	r3, r2
    7b16:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    7b1a:	461a      	mov	r2, r3
    7b1c:	7bbb      	ldrb	r3, [r7, #14]
    7b1e:	4619      	mov	r1, r3
    7b20:	009b      	lsls	r3, r3, #2
    7b22:	1acb      	subs	r3, r1, r3
    7b24:	3306      	adds	r3, #6
    7b26:	fa02 f303 	lsl.w	r3, r2, r3
    7b2a:	b25a      	sxtb	r2, r3
    7b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7b30:	4313      	orrs	r3, r2
    7b32:	b25b      	sxtb	r3, r3
    7b34:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
    7b36:	7bbb      	ldrb	r3, [r7, #14]
    7b38:	3301      	adds	r3, #1
    7b3a:	73bb      	strb	r3, [r7, #14]
    7b3c:	e78e      	b.n	7a5c <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	681b      	ldr	r3, [r3, #0]
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	7bfa      	ldrb	r2, [r7, #15]
    7b46:	4611      	mov	r1, r2
    7b48:	6878      	ldr	r0, [r7, #4]
    7b4a:	4798      	blx	r3
    7b4c:	4603      	mov	r3, r0
    7b4e:	73fb      	strb	r3, [r7, #15]
	return result;
    7b50:	7bfb      	ldrb	r3, [r7, #15]
	
}
    7b52:	4618      	mov	r0, r3
    7b54:	3714      	adds	r7, #20
    7b56:	46bd      	mov	sp, r7
    7b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7b5c:	0000c6b9 	.word	0x0000c6b9
    7b60:	00007a0d 	.word	0x00007a0d
    7b64:	0000c9f9 	.word	0x0000c9f9
    7b68:	0000cd05 	.word	0x0000cd05
    7b6c:	0000c6d9 	.word	0x0000c6d9
    7b70:	0000c7a5 	.word	0x0000c7a5
    7b74:	0000c43d 	.word	0x0000c43d

00007b78 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
    7b78:	b480      	push	{r7}
    7b7a:	b085      	sub	sp, #20
    7b7c:	af00      	add	r7, sp, #0
    7b7e:	6078      	str	r0, [r7, #4]
    7b80:	460b      	mov	r3, r1
    7b82:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
    7b84:	2300      	movs	r3, #0
    7b86:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
    7b88:	2300      	movs	r3, #0
    7b8a:	60bb      	str	r3, [r7, #8]
    7b8c:	68bb      	ldr	r3, [r7, #8]
    7b8e:	2b07      	cmp	r3, #7
    7b90:	dc13      	bgt.n	7bba <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
    7b92:	7bfb      	ldrb	r3, [r7, #15]
    7b94:	005b      	lsls	r3, r3, #1
    7b96:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
    7b98:	78fa      	ldrb	r2, [r7, #3]
    7b9a:	68bb      	ldr	r3, [r7, #8]
    7b9c:	fa42 f303 	asr.w	r3, r2, r3
    7ba0:	b25b      	sxtb	r3, r3
    7ba2:	f003 0301 	and.w	r3, r3, #1
    7ba6:	b25a      	sxtb	r2, r3
    7ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7bac:	4313      	orrs	r3, r2
    7bae:	b25b      	sxtb	r3, r3
    7bb0:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
    7bb2:	68bb      	ldr	r3, [r7, #8]
    7bb4:	3301      	adds	r3, #1
    7bb6:	60bb      	str	r3, [r7, #8]
    7bb8:	e7e8      	b.n	7b8c <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
    7bba:	7bfb      	ldrb	r3, [r7, #15]
    7bbc:	4618      	mov	r0, r3
    7bbe:	3714      	adds	r7, #20
    7bc0:	46bd      	mov	sp, r7
    7bc2:	bc80      	pop	{r7}
    7bc4:	4770      	bx	lr

00007bc6 <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    7bc6:	b480      	push	{r7}
    7bc8:	b085      	sub	sp, #20
    7bca:	af00      	add	r7, sp, #0
    7bcc:	60f8      	str	r0, [r7, #12]
    7bce:	460b      	mov	r3, r1
    7bd0:	607a      	str	r2, [r7, #4]
    7bd2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    7bd4:	7afb      	ldrb	r3, [r7, #11]
    7bd6:	68fa      	ldr	r2, [r7, #12]
    7bd8:	01db      	lsls	r3, r3, #7
    7bda:	4413      	add	r3, r2
    7bdc:	331c      	adds	r3, #28
    7bde:	687a      	ldr	r2, [r7, #4]
    7be0:	601a      	str	r2, [r3, #0]
}
    7be2:	bf00      	nop
    7be4:	3714      	adds	r7, #20
    7be6:	46bd      	mov	sp, r7
    7be8:	bc80      	pop	{r7}
    7bea:	4770      	bx	lr

00007bec <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    7bec:	b580      	push	{r7, lr}
    7bee:	b082      	sub	sp, #8
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	4603      	mov	r3, r0
    7bf4:	6039      	str	r1, [r7, #0]
    7bf6:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    7bf8:	79fb      	ldrb	r3, [r7, #7]
    7bfa:	683a      	ldr	r2, [r7, #0]
    7bfc:	4619      	mov	r1, r3
    7bfe:	4803      	ldr	r0, [pc, #12]	; (7c0c <_gpio_toggle_level+0x20>)
    7c00:	4b03      	ldr	r3, [pc, #12]	; (7c10 <_gpio_toggle_level+0x24>)
    7c02:	4798      	blx	r3
}
    7c04:	bf00      	nop
    7c06:	3708      	adds	r7, #8
    7c08:	46bd      	mov	sp, r7
    7c0a:	bd80      	pop	{r7, pc}
    7c0c:	41008000 	.word	0x41008000
    7c10:	00007bc7 	.word	0x00007bc7

00007c14 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
    7c1a:	4603      	mov	r3, r0
    7c1c:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    7c1e:	79fb      	ldrb	r3, [r7, #7]
    7c20:	115b      	asrs	r3, r3, #5
    7c22:	b2d8      	uxtb	r0, r3
    7c24:	79fb      	ldrb	r3, [r7, #7]
    7c26:	f003 031f 	and.w	r3, r3, #31
    7c2a:	2201      	movs	r2, #1
    7c2c:	fa02 f303 	lsl.w	r3, r2, r3
    7c30:	4619      	mov	r1, r3
    7c32:	4b03      	ldr	r3, [pc, #12]	; (7c40 <gpio_toggle_pin_level+0x2c>)
    7c34:	4798      	blx	r3
}
    7c36:	bf00      	nop
    7c38:	3708      	adds	r7, #8
    7c3a:	46bd      	mov	sp, r7
    7c3c:	bd80      	pop	{r7, pc}
    7c3e:	bf00      	nop
    7c40:	00007bed 	.word	0x00007bed

00007c44 <_ZL10blink_LED0v>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(void){
    7c44:	b580      	push	{r7, lr}
    7c46:	af00      	add	r7, sp, #0
	gpio_toggle_pin_level(LED0);
    7c48:	2052      	movs	r0, #82	; 0x52
    7c4a:	4b02      	ldr	r3, [pc, #8]	; (7c54 <_ZL10blink_LED0v+0x10>)
    7c4c:	4798      	blx	r3
}
    7c4e:	bf00      	nop
    7c50:	bd80      	pop	{r7, pc}
    7c52:	bf00      	nop
    7c54:	00007c15 	.word	0x00007c15

00007c58 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
    7c58:	b480      	push	{r7}
    7c5a:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
    7c5c:	4b03      	ldr	r3, [pc, #12]	; (7c6c <_ZL12Receiver1Intv+0x14>)
    7c5e:	681b      	ldr	r3, [r3, #0]
    7c60:	2201      	movs	r2, #1
    7c62:	741a      	strb	r2, [r3, #16]
}
    7c64:	bf00      	nop
    7c66:	46bd      	mov	sp, r7
    7c68:	bc80      	pop	{r7}
    7c6a:	4770      	bx	lr
    7c6c:	200020f0 	.word	0x200020f0

00007c70 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
    7c70:	b480      	push	{r7}
    7c72:	b083      	sub	sp, #12
    7c74:	af00      	add	r7, sp, #0
    7c76:	6078      	str	r0, [r7, #4]
    7c78:	6039      	str	r1, [r7, #0]
    7c7a:	683b      	ldr	r3, [r7, #0]
    7c7c:	681a      	ldr	r2, [r3, #0]
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	601a      	str	r2, [r3, #0]
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	681b      	ldr	r3, [r3, #0]
    7c86:	3b14      	subs	r3, #20
    7c88:	681b      	ldr	r3, [r3, #0]
    7c8a:	461a      	mov	r2, r3
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	4413      	add	r3, r2
    7c90:	683a      	ldr	r2, [r7, #0]
    7c92:	6852      	ldr	r2, [r2, #4]
    7c94:	601a      	str	r2, [r3, #0]
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	4618      	mov	r0, r3
    7c9a:	370c      	adds	r7, #12
    7c9c:	46bd      	mov	sp, r7
    7c9e:	bc80      	pop	{r7}
    7ca0:	4770      	bx	lr
	...

00007ca4 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
    7ca4:	b580      	push	{r7, lr}
    7ca6:	b082      	sub	sp, #8
    7ca8:	af00      	add	r7, sp, #0
    7caa:	6078      	str	r0, [r7, #4]
    7cac:	6039      	str	r1, [r7, #0]
    7cae:	687a      	ldr	r2, [r7, #4]
    7cb0:	683b      	ldr	r3, [r7, #0]
    7cb2:	3304      	adds	r3, #4
    7cb4:	4619      	mov	r1, r3
    7cb6:	4610      	mov	r0, r2
    7cb8:	4b11      	ldr	r3, [pc, #68]	; (7d00 <_ZN15ARINC_InterfaceC2Ev+0x5c>)
    7cba:	4798      	blx	r3
    7cbc:	683b      	ldr	r3, [r7, #0]
    7cbe:	681a      	ldr	r2, [r3, #0]
    7cc0:	687b      	ldr	r3, [r7, #4]
    7cc2:	601a      	str	r2, [r3, #0]
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	681b      	ldr	r3, [r3, #0]
    7cc8:	3b14      	subs	r3, #20
    7cca:	681b      	ldr	r3, [r3, #0]
    7ccc:	461a      	mov	r2, r3
    7cce:	687b      	ldr	r3, [r7, #4]
    7cd0:	4413      	add	r3, r2
    7cd2:	683a      	ldr	r2, [r7, #0]
    7cd4:	68d2      	ldr	r2, [r2, #12]
    7cd6:	601a      	str	r2, [r3, #0]
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    7cde:	4618      	mov	r0, r3
    7ce0:	4b08      	ldr	r3, [pc, #32]	; (7d04 <_ZN15ARINC_InterfaceC2Ev+0x60>)
    7ce2:	4798      	blx	r3
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7cea:	4618      	mov	r0, r3
    7cec:	4b06      	ldr	r3, [pc, #24]	; (7d08 <_ZN15ARINC_InterfaceC2Ev+0x64>)
    7cee:	4798      	blx	r3
{
	ptrARINCInterface=this;
    7cf0:	4a06      	ldr	r2, [pc, #24]	; (7d0c <_ZN15ARINC_InterfaceC2Ev+0x68>)
    7cf2:	687b      	ldr	r3, [r7, #4]
    7cf4:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	4618      	mov	r0, r3
    7cfa:	3708      	adds	r7, #8
    7cfc:	46bd      	mov	sp, r7
    7cfe:	bd80      	pop	{r7, pc}
    7d00:	00007c71 	.word	0x00007c71
    7d04:	0000a505 	.word	0x0000a505
    7d08:	000081b1 	.word	0x000081b1
    7d0c:	200020f0 	.word	0x200020f0

00007d10 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
    7d10:	b580      	push	{r7, lr}
    7d12:	b082      	sub	sp, #8
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	4618      	mov	r0, r3
    7d1c:	4b10      	ldr	r3, [pc, #64]	; (7d60 <_ZN15ARINC_InterfaceC1Ev+0x50>)
    7d1e:	4798      	blx	r3
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	4a10      	ldr	r2, [pc, #64]	; (7d64 <_ZN15ARINC_InterfaceC1Ev+0x54>)
    7d24:	4611      	mov	r1, r2
    7d26:	4618      	mov	r0, r3
    7d28:	4b0f      	ldr	r3, [pc, #60]	; (7d68 <_ZN15ARINC_InterfaceC1Ev+0x58>)
    7d2a:	4798      	blx	r3
    7d2c:	4a0f      	ldr	r2, [pc, #60]	; (7d6c <_ZN15ARINC_InterfaceC1Ev+0x5c>)
    7d2e:	687b      	ldr	r3, [r7, #4]
    7d30:	601a      	str	r2, [r3, #0]
    7d32:	4a0e      	ldr	r2, [pc, #56]	; (7d6c <_ZN15ARINC_InterfaceC1Ev+0x5c>)
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	601a      	str	r2, [r3, #0]
    7d38:	687b      	ldr	r3, [r7, #4]
    7d3a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    7d3e:	4618      	mov	r0, r3
    7d40:	4b0b      	ldr	r3, [pc, #44]	; (7d70 <_ZN15ARINC_InterfaceC1Ev+0x60>)
    7d42:	4798      	blx	r3
    7d44:	687b      	ldr	r3, [r7, #4]
    7d46:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7d4a:	4618      	mov	r0, r3
    7d4c:	4b09      	ldr	r3, [pc, #36]	; (7d74 <_ZN15ARINC_InterfaceC1Ev+0x64>)
    7d4e:	4798      	blx	r3
	ptrARINCInterface=this;
    7d50:	4a09      	ldr	r2, [pc, #36]	; (7d78 <_ZN15ARINC_InterfaceC1Ev+0x68>)
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
    7d56:	687b      	ldr	r3, [r7, #4]
    7d58:	4618      	mov	r0, r3
    7d5a:	3708      	adds	r7, #8
    7d5c:	46bd      	mov	sp, r7
    7d5e:	bd80      	pop	{r7, pc}
    7d60:	000079cd 	.word	0x000079cd
    7d64:	0000e560 	.word	0x0000e560
    7d68:	00007c71 	.word	0x00007c71
    7d6c:	0000e548 	.word	0x0000e548
    7d70:	0000a505 	.word	0x0000a505
    7d74:	000081b1 	.word	0x000081b1
    7d78:	200020f0 	.word	0x200020f0

00007d7c <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b082      	sub	sp, #8
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
    7d84:	6039      	str	r1, [r7, #0]
    7d86:	683b      	ldr	r3, [r7, #0]
    7d88:	681a      	ldr	r2, [r3, #0]
    7d8a:	687b      	ldr	r3, [r7, #4]
    7d8c:	601a      	str	r2, [r3, #0]
    7d8e:	687b      	ldr	r3, [r7, #4]
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	3b14      	subs	r3, #20
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	461a      	mov	r2, r3
    7d98:	687b      	ldr	r3, [r7, #4]
    7d9a:	4413      	add	r3, r2
    7d9c:	683a      	ldr	r2, [r7, #0]
    7d9e:	68d2      	ldr	r2, [r2, #12]
    7da0:	601a      	str	r2, [r3, #0]
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7da8:	4618      	mov	r0, r3
    7daa:	4b0a      	ldr	r3, [pc, #40]	; (7dd4 <_ZN15ARINC_InterfaceD2Ev+0x58>)
    7dac:	4798      	blx	r3
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    7db4:	4618      	mov	r0, r3
    7db6:	4b08      	ldr	r3, [pc, #32]	; (7dd8 <_ZN15ARINC_InterfaceD2Ev+0x5c>)
    7db8:	4798      	blx	r3
    7dba:	687a      	ldr	r2, [r7, #4]
    7dbc:	683b      	ldr	r3, [r7, #0]
    7dbe:	3304      	adds	r3, #4
    7dc0:	4619      	mov	r1, r3
    7dc2:	4610      	mov	r0, r2
    7dc4:	4b05      	ldr	r3, [pc, #20]	; (7ddc <_ZN15ARINC_InterfaceD2Ev+0x60>)
    7dc6:	4798      	blx	r3
{
} //~ARINC_Interface
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	4618      	mov	r0, r3
    7dcc:	3708      	adds	r7, #8
    7dce:	46bd      	mov	sp, r7
    7dd0:	bd80      	pop	{r7, pc}
    7dd2:	bf00      	nop
    7dd4:	000081d1 	.word	0x000081d1
    7dd8:	0000a599 	.word	0x0000a599
    7ddc:	000087f5 	.word	0x000087f5

00007de0 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
    7de0:	b580      	push	{r7, lr}
    7de2:	b082      	sub	sp, #8
    7de4:	af00      	add	r7, sp, #0
    7de6:	6078      	str	r0, [r7, #4]
    7de8:	4a10      	ldr	r2, [pc, #64]	; (7e2c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	601a      	str	r2, [r3, #0]
    7dee:	4a0f      	ldr	r2, [pc, #60]	; (7e2c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
    7df0:	687b      	ldr	r3, [r7, #4]
    7df2:	601a      	str	r2, [r3, #0]
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7dfa:	4618      	mov	r0, r3
    7dfc:	4b0c      	ldr	r3, [pc, #48]	; (7e30 <_ZN15ARINC_InterfaceD1Ev+0x50>)
    7dfe:	4798      	blx	r3
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    7e06:	4618      	mov	r0, r3
    7e08:	4b0a      	ldr	r3, [pc, #40]	; (7e34 <_ZN15ARINC_InterfaceD1Ev+0x54>)
    7e0a:	4798      	blx	r3
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	4a0a      	ldr	r2, [pc, #40]	; (7e38 <_ZN15ARINC_InterfaceD1Ev+0x58>)
    7e10:	4611      	mov	r1, r2
    7e12:	4618      	mov	r0, r3
    7e14:	4b09      	ldr	r3, [pc, #36]	; (7e3c <_ZN15ARINC_InterfaceD1Ev+0x5c>)
    7e16:	4798      	blx	r3
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	4618      	mov	r0, r3
    7e1c:	4b08      	ldr	r3, [pc, #32]	; (7e40 <_ZN15ARINC_InterfaceD1Ev+0x60>)
    7e1e:	4798      	blx	r3
} //~ARINC_Interface
    7e20:	687b      	ldr	r3, [r7, #4]
    7e22:	4618      	mov	r0, r3
    7e24:	3708      	adds	r7, #8
    7e26:	46bd      	mov	sp, r7
    7e28:	bd80      	pop	{r7, pc}
    7e2a:	bf00      	nop
    7e2c:	0000e548 	.word	0x0000e548
    7e30:	000081d1 	.word	0x000081d1
    7e34:	0000a599 	.word	0x0000a599
    7e38:	0000e560 	.word	0x0000e560
    7e3c:	000087f5 	.word	0x000087f5
    7e40:	000079ed 	.word	0x000079ed

00007e44 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
    7e44:	b580      	push	{r7, lr}
    7e46:	b082      	sub	sp, #8
    7e48:	af00      	add	r7, sp, #0
    7e4a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
    7e4c:	6878      	ldr	r0, [r7, #4]
    7e4e:	4b06      	ldr	r3, [pc, #24]	; (7e68 <_ZN15ARINC_InterfaceD0Ev+0x24>)
    7e50:	4798      	blx	r3
    7e52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    7e56:	6878      	ldr	r0, [r7, #4]
    7e58:	4b04      	ldr	r3, [pc, #16]	; (7e6c <_ZN15ARINC_InterfaceD0Ev+0x28>)
    7e5a:	4798      	blx	r3
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	4618      	mov	r0, r3
    7e60:	3708      	adds	r7, #8
    7e62:	46bd      	mov	sp, r7
    7e64:	bd80      	pop	{r7, pc}
    7e66:	bf00      	nop
    7e68:	00007de1 	.word	0x00007de1
    7e6c:	0000b2e9 	.word	0x0000b2e9

00007e70 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
    7e70:	b590      	push	{r4, r7, lr}
    7e72:	b083      	sub	sp, #12
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
	BITRATE0=false;
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	2200      	movs	r2, #0
    7e7c:	731a      	strb	r2, [r3, #12]
	BITRATE1=false;
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	2200      	movs	r2, #0
    7e82:	735a      	strb	r2, [r3, #13]
	BITRATE2=false;
    7e84:	687b      	ldr	r3, [r7, #4]
    7e86:	2200      	movs	r2, #0
    7e88:	739a      	strb	r2, [r3, #14]

	PARITY=false;
    7e8a:	687b      	ldr	r3, [r7, #4]
    7e8c:	2200      	movs	r2, #0
    7e8e:	73da      	strb	r2, [r3, #15]
	HW_RESET();
    7e90:	6878      	ldr	r0, [r7, #4]
    7e92:	4b4f      	ldr	r3, [pc, #316]	; (7fd0 <_ZN15ARINC_Interface4InitEv+0x160>)
    7e94:	4798      	blx	r3
	statusHolt=HI3593.Init();
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7e9c:	4618      	mov	r0, r3
    7e9e:	4b4d      	ldr	r3, [pc, #308]	; (7fd4 <_ZN15ARINC_Interface4InitEv+0x164>)
    7ea0:	4798      	blx	r3
    7ea2:	4603      	mov	r3, r0
    7ea4:	461a      	mov	r2, r3
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	if (statusHolt!=TSR_Default){
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
    7eb2:	2b01      	cmp	r3, #1
    7eb4:	d008      	beq.n	7ec8 <_ZN15ARINC_Interface4InitEv+0x58>
		usb.println("\n\rHI-3593 failed to initilize\n\r");
    7eb6:	4948      	ldr	r1, [pc, #288]	; (7fd8 <_ZN15ARINC_Interface4InitEv+0x168>)
    7eb8:	4848      	ldr	r0, [pc, #288]	; (7fdc <_ZN15ARINC_Interface4InitEv+0x16c>)
    7eba:	4b49      	ldr	r3, [pc, #292]	; (7fe0 <_ZN15ARINC_Interface4InitEv+0x170>)
    7ebc:	4798      	blx	r3
		isOK=false;
    7ebe:	687b      	ldr	r3, [r7, #4]
    7ec0:	2200      	movs	r2, #0
    7ec2:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
    7ec6:	e069      	b.n	7f9c <_ZN15ARINC_Interface4InitEv+0x12c>
	}else{
		isOK=true;
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	2201      	movs	r2, #1
    7ecc:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		newMessageR1=false;
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	2200      	movs	r2, #0
    7ed4:	741a      	strb	r2, [r3, #16]
			BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	2200      	movs	r2, #0
    7eda:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			MessageCount=0;
    7ede:	687b      	ldr	r3, [r7, #4]
    7ee0:	2200      	movs	r2, #0
    7ee2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			ARINCLabel = 0x1D;         // Write ARINC Label
    7ee6:	687b      	ldr	r3, [r7, #4]
    7ee8:	221d      	movs	r2, #29
    7eea:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			Arate=0;
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	2200      	movs	r2, #0
    7ef2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
			(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	3311      	adds	r3, #17
    7efa:	2210      	movs	r2, #16
    7efc:	2100      	movs	r1, #0
    7efe:	4618      	mov	r0, r3
    7f00:	4b38      	ldr	r3, [pc, #224]	; (7fe4 <_ZN15ARINC_Interface4InitEv+0x174>)
    7f02:	4798      	blx	r3
			
			// Setup the Labels
			HI3593.initReceiver1Labels();     // initial Rec1 labels
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7f0a:	4618      	mov	r0, r3
    7f0c:	4b36      	ldr	r3, [pc, #216]	; (7fe8 <_ZN15ARINC_Interface4InitEv+0x178>)
    7f0e:	4798      	blx	r3
			HI3593.initReceiver2Labels();     // initial Rec2 labels
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    7f16:	4618      	mov	r0, r3
    7f18:	4b34      	ldr	r3, [pc, #208]	; (7fec <_ZN15ARINC_Interface4InitEv+0x17c>)
    7f1a:	4798      	blx	r3
			HI3593.MultiByteRead(REC1MEMORY, 32, LabelsAr1); // read in all Rec-1 labels into the passed array
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    7f28:	2220      	movs	r2, #32
    7f2a:	2198      	movs	r1, #152	; 0x98
    7f2c:	4c30      	ldr	r4, [pc, #192]	; (7ff0 <_ZN15ARINC_Interface4InitEv+0x180>)
    7f2e:	47a0      	blx	r4
			HI3593.MultiByteRead(REC2MEMORY, 32, LabelsAr2); // read in all Rec-2 labels into the passed array
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
    7f36:	687b      	ldr	r3, [r7, #4]
    7f38:	f503 73b8 	add.w	r3, r3, #368	; 0x170
    7f3c:	2220      	movs	r2, #32
    7f3e:	21b8      	movs	r1, #184	; 0xb8
    7f40:	4c2b      	ldr	r4, [pc, #172]	; (7ff0 <_ZN15ARINC_Interface4InitEv+0x180>)
    7f42:	47a0      	blx	r4

			Rec1Parity =0;
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	2200      	movs	r2, #0
    7f48:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
			Rec2Parity =0;
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	2200      	movs	r2, #0
    7f50:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b


			HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
    7f5a:	687b      	ldr	r3, [r7, #4]
    7f5c:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
    7f66:	4313      	orrs	r3, r2
    7f68:	b2db      	uxtb	r3, r3
    7f6a:	f063 0379 	orn	r3, r3, #121	; 0x79
    7f6e:	b2db      	uxtb	r3, r3
    7f70:	461a      	mov	r2, r3
    7f72:	2110      	movs	r1, #16
    7f74:	4b1f      	ldr	r3, [pc, #124]	; (7ff4 <_ZN15ARINC_Interface4InitEv+0x184>)
    7f76:	4798      	blx	r3
			HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
    7f8a:	4313      	orrs	r3, r2
    7f8c:	b2db      	uxtb	r3, r3
    7f8e:	f063 0379 	orn	r3, r3, #121	; 0x79
    7f92:	b2db      	uxtb	r3, r3
    7f94:	461a      	mov	r2, r3
    7f96:	2124      	movs	r1, #36	; 0x24
    7f98:	4b16      	ldr	r3, [pc, #88]	; (7ff4 <_ZN15ARINC_Interface4InitEv+0x184>)
    7f9a:	4798      	blx	r3
	}
	
	timer.Init(&TIMER_ARINC);
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    7fa2:	4915      	ldr	r1, [pc, #84]	; (7ff8 <_ZN15ARINC_Interface4InitEv+0x188>)
    7fa4:	4618      	mov	r0, r3
    7fa6:	4b15      	ldr	r3, [pc, #84]	; (7ffc <_ZN15ARINC_Interface4InitEv+0x18c>)
    7fa8:	4798      	blx	r3
	timer.add_periodic_task(blink_LED0,1);
    7faa:	687b      	ldr	r3, [r7, #4]
    7fac:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    7fb0:	2201      	movs	r2, #1
    7fb2:	4913      	ldr	r1, [pc, #76]	; (8000 <_ZN15ARINC_Interface4InitEv+0x190>)
    7fb4:	4618      	mov	r0, r3
    7fb6:	4b13      	ldr	r3, [pc, #76]	; (8004 <_ZN15ARINC_Interface4InitEv+0x194>)
    7fb8:	4798      	blx	r3
	ext_irq_register(R1Int, Receiver1Int);
    7fba:	4913      	ldr	r1, [pc, #76]	; (8008 <_ZN15ARINC_Interface4InitEv+0x198>)
    7fbc:	2057      	movs	r0, #87	; 0x57
    7fbe:	4b13      	ldr	r3, [pc, #76]	; (800c <_ZN15ARINC_Interface4InitEv+0x19c>)
    7fc0:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
}
    7fc8:	4618      	mov	r0, r3
    7fca:	370c      	adds	r7, #12
    7fcc:	46bd      	mov	sp, r7
    7fce:	bd90      	pop	{r4, r7, pc}
    7fd0:	00008071 	.word	0x00008071
    7fd4:	000081f1 	.word	0x000081f1
    7fd8:	0000db6c 	.word	0x0000db6c
    7fdc:	200036cc 	.word	0x200036cc
    7fe0:	0000af81 	.word	0x0000af81
    7fe4:	0000ceed 	.word	0x0000ceed
    7fe8:	00008405 	.word	0x00008405
    7fec:	0000856d 	.word	0x0000856d
    7ff0:	000085d9 	.word	0x000085d9
    7ff4:	00008701 	.word	0x00008701
    7ff8:	20003810 	.word	0x20003810
    7ffc:	0000a5b5 	.word	0x0000a5b5
    8000:	00007c45 	.word	0x00007c45
    8004:	0000a681 	.word	0x0000a681
    8008:	00007c59 	.word	0x00007c59
    800c:	000025c1 	.word	0x000025c1

00008010 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
    8010:	b480      	push	{r7}
    8012:	b085      	sub	sp, #20
    8014:	af00      	add	r7, sp, #0
    8016:	6078      	str	r0, [r7, #4]
    8018:	460b      	mov	r3, r1
    801a:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
    801c:	2300      	movs	r3, #0
    801e:	73fb      	strb	r3, [r7, #15]
    8020:	7bfb      	ldrb	r3, [r7, #15]
    8022:	2b3f      	cmp	r3, #63	; 0x3f
    8024:	dc1e      	bgt.n	8064 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
    8026:	687b      	ldr	r3, [r7, #4]
    8028:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    802c:	7bfb      	ldrb	r3, [r7, #15]
    802e:	4413      	add	r3, r2
    8030:	b2db      	uxtb	r3, r3
    8032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8036:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
    8038:	7bbb      	ldrb	r3, [r7, #14]
    803a:	687a      	ldr	r2, [r7, #4]
    803c:	009b      	lsls	r3, r3, #2
    803e:	4413      	add	r3, r2
    8040:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    8044:	78fa      	ldrb	r2, [r7, #3]
    8046:	429a      	cmp	r2, r3
    8048:	d108      	bne.n	805c <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
    804a:	7bbb      	ldrb	r3, [r7, #14]
    804c:	3310      	adds	r3, #16
    804e:	009b      	lsls	r3, r3, #2
    8050:	687a      	ldr	r2, [r7, #4]
    8052:	4413      	add	r3, r2
    8054:	60bb      	str	r3, [r7, #8]
			return *data;
    8056:	68bb      	ldr	r3, [r7, #8]
    8058:	681b      	ldr	r3, [r3, #0]
    805a:	e004      	b.n	8066 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
    805c:	7bfb      	ldrb	r3, [r7, #15]
    805e:	3301      	adds	r3, #1
    8060:	73fb      	strb	r3, [r7, #15]
    8062:	e7dd      	b.n	8020 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
    8064:	2300      	movs	r3, #0
}
    8066:	4618      	mov	r0, r3
    8068:	3714      	adds	r7, #20
    806a:	46bd      	mov	sp, r7
    806c:	bc80      	pop	{r7}
    806e:	4770      	bx	lr

00008070 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
    8070:	b580      	push	{r7, lr}
    8072:	b082      	sub	sp, #8
    8074:	af00      	add	r7, sp, #0
    8076:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
    8078:	2001      	movs	r0, #1
    807a:	4b03      	ldr	r3, [pc, #12]	; (8088 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
    807c:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
    807e:	bf00      	nop
    8080:	3708      	adds	r7, #8
    8082:	46bd      	mov	sp, r7
    8084:	bd80      	pop	{r7, pc}
    8086:	bf00      	nop
    8088:	000024fd 	.word	0x000024fd

0000808c <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

    808c:	b580      	push	{r7, lr}
    808e:	b082      	sub	sp, #8
    8090:	af00      	add	r7, sp, #0
    8092:	6078      	str	r0, [r7, #4]
    8094:	6039      	str	r1, [r7, #0]
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	2b01      	cmp	r3, #1
    809a:	d10c      	bne.n	80b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    809c:	683b      	ldr	r3, [r7, #0]
    809e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    80a2:	4293      	cmp	r3, r2
    80a4:	d107      	bne.n	80b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    80a6:	4806      	ldr	r0, [pc, #24]	; (80c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    80a8:	4b06      	ldr	r3, [pc, #24]	; (80c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    80aa:	4798      	blx	r3
    80ac:	4a06      	ldr	r2, [pc, #24]	; (80c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    80ae:	4907      	ldr	r1, [pc, #28]	; (80cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    80b0:	4803      	ldr	r0, [pc, #12]	; (80c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    80b2:	4b07      	ldr	r3, [pc, #28]	; (80d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    80b4:	4798      	blx	r3
    80b6:	bf00      	nop
    80b8:	3708      	adds	r7, #8
    80ba:	46bd      	mov	sp, r7
    80bc:	bd80      	pop	{r7, pc}
    80be:	bf00      	nop
    80c0:	200020f4 	.word	0x200020f4
    80c4:	00007d11 	.word	0x00007d11
    80c8:	20000000 	.word	0x20000000
    80cc:	00007de1 	.word	0x00007de1
    80d0:	0000b2dd 	.word	0x0000b2dd

000080d4 <_GLOBAL__sub_I_HexSymbols>:
    80d4:	b580      	push	{r7, lr}
    80d6:	af00      	add	r7, sp, #0
    80d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    80dc:	2001      	movs	r0, #1
    80de:	4b01      	ldr	r3, [pc, #4]	; (80e4 <_GLOBAL__sub_I_HexSymbols+0x10>)
    80e0:	4798      	blx	r3
    80e2:	bd80      	pop	{r7, pc}
    80e4:	0000808d 	.word	0x0000808d

000080e8 <hri_port_set_OUT_reg>:
{
    80e8:	b480      	push	{r7}
    80ea:	b085      	sub	sp, #20
    80ec:	af00      	add	r7, sp, #0
    80ee:	60f8      	str	r0, [r7, #12]
    80f0:	460b      	mov	r3, r1
    80f2:	607a      	str	r2, [r7, #4]
    80f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    80f6:	7afb      	ldrb	r3, [r7, #11]
    80f8:	68fa      	ldr	r2, [r7, #12]
    80fa:	01db      	lsls	r3, r3, #7
    80fc:	4413      	add	r3, r2
    80fe:	3318      	adds	r3, #24
    8100:	687a      	ldr	r2, [r7, #4]
    8102:	601a      	str	r2, [r3, #0]
}
    8104:	bf00      	nop
    8106:	3714      	adds	r7, #20
    8108:	46bd      	mov	sp, r7
    810a:	bc80      	pop	{r7}
    810c:	4770      	bx	lr

0000810e <hri_port_clear_OUT_reg>:
{
    810e:	b480      	push	{r7}
    8110:	b085      	sub	sp, #20
    8112:	af00      	add	r7, sp, #0
    8114:	60f8      	str	r0, [r7, #12]
    8116:	460b      	mov	r3, r1
    8118:	607a      	str	r2, [r7, #4]
    811a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    811c:	7afb      	ldrb	r3, [r7, #11]
    811e:	68fa      	ldr	r2, [r7, #12]
    8120:	01db      	lsls	r3, r3, #7
    8122:	4413      	add	r3, r2
    8124:	3314      	adds	r3, #20
    8126:	687a      	ldr	r2, [r7, #4]
    8128:	601a      	str	r2, [r3, #0]
}
    812a:	bf00      	nop
    812c:	3714      	adds	r7, #20
    812e:	46bd      	mov	sp, r7
    8130:	bc80      	pop	{r7}
    8132:	4770      	bx	lr

00008134 <_gpio_set_level>:
{
    8134:	b580      	push	{r7, lr}
    8136:	b082      	sub	sp, #8
    8138:	af00      	add	r7, sp, #0
    813a:	4603      	mov	r3, r0
    813c:	6039      	str	r1, [r7, #0]
    813e:	71fb      	strb	r3, [r7, #7]
    8140:	4613      	mov	r3, r2
    8142:	71bb      	strb	r3, [r7, #6]
	if (level) {
    8144:	79bb      	ldrb	r3, [r7, #6]
    8146:	2b00      	cmp	r3, #0
    8148:	d006      	beq.n	8158 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    814a:	79fb      	ldrb	r3, [r7, #7]
    814c:	683a      	ldr	r2, [r7, #0]
    814e:	4619      	mov	r1, r3
    8150:	4806      	ldr	r0, [pc, #24]	; (816c <_gpio_set_level+0x38>)
    8152:	4b07      	ldr	r3, [pc, #28]	; (8170 <_gpio_set_level+0x3c>)
    8154:	4798      	blx	r3
}
    8156:	e005      	b.n	8164 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    8158:	79fb      	ldrb	r3, [r7, #7]
    815a:	683a      	ldr	r2, [r7, #0]
    815c:	4619      	mov	r1, r3
    815e:	4803      	ldr	r0, [pc, #12]	; (816c <_gpio_set_level+0x38>)
    8160:	4b04      	ldr	r3, [pc, #16]	; (8174 <_gpio_set_level+0x40>)
    8162:	4798      	blx	r3
}
    8164:	bf00      	nop
    8166:	3708      	adds	r7, #8
    8168:	46bd      	mov	sp, r7
    816a:	bd80      	pop	{r7, pc}
    816c:	41008000 	.word	0x41008000
    8170:	000080e9 	.word	0x000080e9
    8174:	0000810f 	.word	0x0000810f

00008178 <gpio_set_pin_level>:
{
    8178:	b580      	push	{r7, lr}
    817a:	b082      	sub	sp, #8
    817c:	af00      	add	r7, sp, #0
    817e:	4603      	mov	r3, r0
    8180:	460a      	mov	r2, r1
    8182:	71fb      	strb	r3, [r7, #7]
    8184:	4613      	mov	r3, r2
    8186:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    8188:	79fb      	ldrb	r3, [r7, #7]
    818a:	115b      	asrs	r3, r3, #5
    818c:	b2d8      	uxtb	r0, r3
    818e:	79fb      	ldrb	r3, [r7, #7]
    8190:	f003 031f 	and.w	r3, r3, #31
    8194:	2201      	movs	r2, #1
    8196:	fa02 f303 	lsl.w	r3, r2, r3
    819a:	79ba      	ldrb	r2, [r7, #6]
    819c:	4619      	mov	r1, r3
    819e:	4b03      	ldr	r3, [pc, #12]	; (81ac <gpio_set_pin_level+0x34>)
    81a0:	4798      	blx	r3
}
    81a2:	bf00      	nop
    81a4:	3708      	adds	r7, #8
    81a6:	46bd      	mov	sp, r7
    81a8:	bd80      	pop	{r7, pc}
    81aa:	bf00      	nop
    81ac:	00008135 	.word	0x00008135

000081b0 <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
    81b0:	b580      	push	{r7, lr}
    81b2:	b082      	sub	sp, #8
    81b4:	af00      	add	r7, sp, #0
    81b6:	6078      	str	r0, [r7, #4]
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	4618      	mov	r0, r3
    81bc:	4b03      	ldr	r3, [pc, #12]	; (81cc <_ZN15Holt_3593_ClassC1Ev+0x1c>)
    81be:	4798      	blx	r3
{
} //Holt_3593_Class
    81c0:	687b      	ldr	r3, [r7, #4]
    81c2:	4618      	mov	r0, r3
    81c4:	3708      	adds	r7, #8
    81c6:	46bd      	mov	sp, r7
    81c8:	bd80      	pop	{r7, pc}
    81ca:	bf00      	nop
    81cc:	00008f39 	.word	0x00008f39

000081d0 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
    81d0:	b580      	push	{r7, lr}
    81d2:	b082      	sub	sp, #8
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	4618      	mov	r0, r3
    81dc:	4b03      	ldr	r3, [pc, #12]	; (81ec <_ZN15Holt_3593_ClassD1Ev+0x1c>)
    81de:	4798      	blx	r3
{
} //~Holt_3593_Class
    81e0:	687b      	ldr	r3, [r7, #4]
    81e2:	4618      	mov	r0, r3
    81e4:	3708      	adds	r7, #8
    81e6:	46bd      	mov	sp, r7
    81e8:	bd80      	pop	{r7, pc}
    81ea:	bf00      	nop
    81ec:	00008f59 	.word	0x00008f59

000081f0 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
    81f0:	b590      	push	{r4, r7, lr}
    81f2:	b089      	sub	sp, #36	; 0x24
    81f4:	af02      	add	r7, sp, #8
    81f6:	6078      	str	r0, [r7, #4]
	 
	 spi.setDescriptor(&SPI_HI3593);
    81f8:	687b      	ldr	r3, [r7, #4]
    81fa:	492d      	ldr	r1, [pc, #180]	; (82b0 <_ZN15Holt_3593_Class4InitEv+0xc0>)
    81fc:	4618      	mov	r0, r3
    81fe:	4b2d      	ldr	r3, [pc, #180]	; (82b4 <_ZN15Holt_3593_Class4InitEv+0xc4>)
    8200:	4798      	blx	r3
	  spi.init();
    8202:	687b      	ldr	r3, [r7, #4]
    8204:	4618      	mov	r0, r3
    8206:	4b2c      	ldr	r3, [pc, #176]	; (82b8 <_ZN15Holt_3593_Class4InitEv+0xc8>)
    8208:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
    820a:	2340      	movs	r3, #64	; 0x40
    820c:	9301      	str	r3, [sp, #4]
    820e:	2300      	movs	r3, #0
    8210:	9300      	str	r3, [sp, #0]
    8212:	2300      	movs	r3, #0
    8214:	2201      	movs	r2, #1
    8216:	2104      	movs	r1, #4
    8218:	6878      	ldr	r0, [r7, #4]
    821a:	4c28      	ldr	r4, [pc, #160]	; (82bc <_ZN15Holt_3593_Class4InitEv+0xcc>)
    821c:	47a0      	blx	r4
    821e:	4603      	mov	r3, r0
    8220:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
    8222:	2300      	movs	r3, #0
    8224:	617b      	str	r3, [r7, #20]
    8226:	697b      	ldr	r3, [r7, #20]
    8228:	2b1f      	cmp	r3, #31
    822a:	dc1b      	bgt.n	8264 <_ZN15Holt_3593_Class4InitEv+0x74>
	{
		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
    822c:	4a24      	ldr	r2, [pc, #144]	; (82c0 <_ZN15Holt_3593_Class4InitEv+0xd0>)
    822e:	697b      	ldr	r3, [r7, #20]
    8230:	4413      	add	r3, r2
    8232:	781b      	ldrb	r3, [r3, #0]
    8234:	4619      	mov	r1, r3
    8236:	6878      	ldr	r0, [r7, #4]
    8238:	4b22      	ldr	r3, [pc, #136]	; (82c4 <_ZN15Holt_3593_Class4InitEv+0xd4>)
    823a:	4798      	blx	r3
    823c:	4603      	mov	r3, r0
    823e:	4619      	mov	r1, r3
    8240:	4a21      	ldr	r2, [pc, #132]	; (82c8 <_ZN15Holt_3593_Class4InitEv+0xd8>)
    8242:	697b      	ldr	r3, [r7, #20]
    8244:	4413      	add	r3, r2
    8246:	460a      	mov	r2, r1
    8248:	701a      	strb	r2, [r3, #0]
		LabelArray_1[i]=LabelArray_2[i];
    824a:	4a1f      	ldr	r2, [pc, #124]	; (82c8 <_ZN15Holt_3593_Class4InitEv+0xd8>)
    824c:	697b      	ldr	r3, [r7, #20]
    824e:	4413      	add	r3, r2
    8250:	7819      	ldrb	r1, [r3, #0]
    8252:	4a1b      	ldr	r2, [pc, #108]	; (82c0 <_ZN15Holt_3593_Class4InitEv+0xd0>)
    8254:	697b      	ldr	r3, [r7, #20]
    8256:	4413      	add	r3, r2
    8258:	460a      	mov	r2, r1
    825a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
    825c:	697b      	ldr	r3, [r7, #20]
    825e:	3301      	adds	r3, #1
    8260:	617b      	str	r3, [r7, #20]
    8262:	e7e0      	b.n	8226 <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
    8264:	2300      	movs	r3, #0
    8266:	613b      	str	r3, [r7, #16]
    8268:	693b      	ldr	r3, [r7, #16]
    826a:	2b02      	cmp	r3, #2
    826c:	dc1b      	bgt.n	82a6 <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		LabelPriority2[i]=FlipByte(LabelPriority1[i]);
    826e:	4a17      	ldr	r2, [pc, #92]	; (82cc <_ZN15Holt_3593_Class4InitEv+0xdc>)
    8270:	693b      	ldr	r3, [r7, #16]
    8272:	4413      	add	r3, r2
    8274:	781b      	ldrb	r3, [r3, #0]
    8276:	4619      	mov	r1, r3
    8278:	6878      	ldr	r0, [r7, #4]
    827a:	4b12      	ldr	r3, [pc, #72]	; (82c4 <_ZN15Holt_3593_Class4InitEv+0xd4>)
    827c:	4798      	blx	r3
    827e:	4603      	mov	r3, r0
    8280:	4619      	mov	r1, r3
    8282:	4a13      	ldr	r2, [pc, #76]	; (82d0 <_ZN15Holt_3593_Class4InitEv+0xe0>)
    8284:	693b      	ldr	r3, [r7, #16]
    8286:	4413      	add	r3, r2
    8288:	460a      	mov	r2, r1
    828a:	701a      	strb	r2, [r3, #0]
		LabelPriority1[i]=LabelPriority2[i];
    828c:	4a10      	ldr	r2, [pc, #64]	; (82d0 <_ZN15Holt_3593_Class4InitEv+0xe0>)
    828e:	693b      	ldr	r3, [r7, #16]
    8290:	4413      	add	r3, r2
    8292:	7819      	ldrb	r1, [r3, #0]
    8294:	4a0d      	ldr	r2, [pc, #52]	; (82cc <_ZN15Holt_3593_Class4InitEv+0xdc>)
    8296:	693b      	ldr	r3, [r7, #16]
    8298:	4413      	add	r3, r2
    829a:	460a      	mov	r2, r1
    829c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
    829e:	693b      	ldr	r3, [r7, #16]
    82a0:	3301      	adds	r3, #1
    82a2:	613b      	str	r3, [r7, #16]
    82a4:	e7e0      	b.n	8268 <_ZN15Holt_3593_Class4InitEv+0x78>
	}
	return	status;
    82a6:	7bfb      	ldrb	r3, [r7, #15]
 } 
    82a8:	4618      	mov	r0, r3
    82aa:	371c      	adds	r7, #28
    82ac:	46bd      	mov	sp, r7
    82ae:	bd90      	pop	{r4, r7, pc}
    82b0:	20003730 	.word	0x20003730
    82b4:	00008fa5 	.word	0x00008fa5
    82b8:	00008f6d 	.word	0x00008f6d
    82bc:	000082d5 	.word	0x000082d5
    82c0:	20000130 	.word	0x20000130
    82c4:	00008471 	.word	0x00008471
    82c8:	200022e8 	.word	0x200022e8
    82cc:	20000150 	.word	0x20000150
    82d0:	20002308 	.word	0x20002308

000082d4 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
    82d4:	b580      	push	{r7, lr}
    82d6:	b084      	sub	sp, #16
    82d8:	af00      	add	r7, sp, #0
    82da:	6078      	str	r0, [r7, #4]
    82dc:	4608      	mov	r0, r1
    82de:	4611      	mov	r1, r2
    82e0:	461a      	mov	r2, r3
    82e2:	4603      	mov	r3, r0
    82e4:	70fb      	strb	r3, [r7, #3]
    82e6:	460b      	mov	r3, r1
    82e8:	70bb      	strb	r3, [r7, #2]
    82ea:	4613      	mov	r3, r2
    82ec:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
    82ee:	2300      	movs	r3, #0
    82f0:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
    82f2:	2104      	movs	r1, #4
    82f4:	6878      	ldr	r0, [r7, #4]
    82f6:	4b18      	ldr	r3, [pc, #96]	; (8358 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
    82f8:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
    82fa:	78fb      	ldrb	r3, [r7, #3]
    82fc:	461a      	mov	r2, r3
    82fe:	2138      	movs	r1, #56	; 0x38
    8300:	6878      	ldr	r0, [r7, #4]
    8302:	4b16      	ldr	r3, [pc, #88]	; (835c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
    8304:	4798      	blx	r3
	 cmd =  arate;
    8306:	7e3b      	ldrb	r3, [r7, #24]
    8308:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
    830a:	787b      	ldrb	r3, [r7, #1]
    830c:	011b      	lsls	r3, r3, #4
    830e:	b25a      	sxtb	r2, r3
    8310:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8314:	4313      	orrs	r3, r2
    8316:	b25b      	sxtb	r3, r3
    8318:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
    831a:	78bb      	ldrb	r3, [r7, #2]
    831c:	015b      	lsls	r3, r3, #5
    831e:	b25a      	sxtb	r2, r3
    8320:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8324:	4313      	orrs	r3, r2
    8326:	b25b      	sxtb	r3, r3
    8328:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
    832a:	7f3b      	ldrb	r3, [r7, #28]
    832c:	019b      	lsls	r3, r3, #6
    832e:	b25a      	sxtb	r2, r3
    8330:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8334:	4313      	orrs	r3, r2
    8336:	b25b      	sxtb	r3, r3
    8338:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
    833a:	7bfb      	ldrb	r3, [r7, #15]
    833c:	461a      	mov	r2, r3
    833e:	2108      	movs	r1, #8
    8340:	6878      	ldr	r0, [r7, #4]
    8342:	4b06      	ldr	r3, [pc, #24]	; (835c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
    8344:	4798      	blx	r3
	 return R_Register (R_TSR);
    8346:	2180      	movs	r1, #128	; 0x80
    8348:	6878      	ldr	r0, [r7, #4]
    834a:	4b05      	ldr	r3, [pc, #20]	; (8360 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
    834c:	4798      	blx	r3
    834e:	4603      	mov	r3, r0
	 
	 
 }
    8350:	4618      	mov	r0, r3
    8352:	3710      	adds	r7, #16
    8354:	46bd      	mov	sp, r7
    8356:	bd80      	pop	{r7, pc}
    8358:	000086ad 	.word	0x000086ad
    835c:	00008701 	.word	0x00008701
    8360:	00008775 	.word	0x00008775

00008364 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
    8364:	b580      	push	{r7, lr}
    8366:	b082      	sub	sp, #8
    8368:	af00      	add	r7, sp, #0
    836a:	6078      	str	r0, [r7, #4]
	 	spi.enable();
    836c:	687b      	ldr	r3, [r7, #4]
    836e:	4618      	mov	r0, r3
    8370:	4b04      	ldr	r3, [pc, #16]	; (8384 <_ZN15Holt_3593_Class4openEv+0x20>)
    8372:	4798      	blx	r3
		 SS_Low();
    8374:	6878      	ldr	r0, [r7, #4]
    8376:	4b04      	ldr	r3, [pc, #16]	; (8388 <_ZN15Holt_3593_Class4openEv+0x24>)
    8378:	4798      	blx	r3
 }
    837a:	bf00      	nop
    837c:	3708      	adds	r7, #8
    837e:	46bd      	mov	sp, r7
    8380:	bd80      	pop	{r7, pc}
    8382:	bf00      	nop
    8384:	00008fc9 	.word	0x00008fc9
    8388:	000087bd 	.word	0x000087bd

0000838c <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
    838c:	b580      	push	{r7, lr}
    838e:	b082      	sub	sp, #8
    8390:	af00      	add	r7, sp, #0
    8392:	6078      	str	r0, [r7, #4]
	    SS_High();
    8394:	6878      	ldr	r0, [r7, #4]
    8396:	4b05      	ldr	r3, [pc, #20]	; (83ac <_ZN15Holt_3593_Class5closeEv+0x20>)
    8398:	4798      	blx	r3
	  spi.disable();
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	4618      	mov	r0, r3
    839e:	4b04      	ldr	r3, [pc, #16]	; (83b0 <_ZN15Holt_3593_Class5closeEv+0x24>)
    83a0:	4798      	blx	r3
	
  }
    83a2:	bf00      	nop
    83a4:	3708      	adds	r7, #8
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	bf00      	nop
    83ac:	000087d9 	.word	0x000087d9
    83b0:	0000908d 	.word	0x0000908d

000083b4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
    83b4:	b580      	push	{r7, lr}
    83b6:	b084      	sub	sp, #16
    83b8:	af00      	add	r7, sp, #0
    83ba:	6078      	str	r0, [r7, #4]
    83bc:	460b      	mov	r3, r1
    83be:	70fb      	strb	r3, [r7, #3]
    83c0:	4613      	mov	r3, r2
    83c2:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
    83c4:	78fb      	ldrb	r3, [r7, #3]
    83c6:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
    83c8:	7bfb      	ldrb	r3, [r7, #15]
    83ca:	4619      	mov	r1, r3
    83cc:	6878      	ldr	r0, [r7, #4]
    83ce:	4b0b      	ldr	r3, [pc, #44]	; (83fc <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
    83d0:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
    83d2:	78bb      	ldrb	r3, [r7, #2]
    83d4:	2b00      	cmp	r3, #0
    83d6:	d00a      	beq.n	83ee <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
    83d8:	687b      	ldr	r3, [r7, #4]
    83da:	4618      	mov	r0, r3
    83dc:	4b08      	ldr	r3, [pc, #32]	; (8400 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
    83de:	4798      	blx	r3
    83e0:	4603      	mov	r3, r0
    83e2:	f083 0301 	eor.w	r3, r3, #1
    83e6:	b2db      	uxtb	r3, r3
    83e8:	2b00      	cmp	r3, #0
    83ea:	d000      	beq.n	83ee <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    83ec:	e7f4      	b.n	83d8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
    83ee:	78fb      	ldrb	r3, [r7, #3]
    83f0:	73bb      	strb	r3, [r7, #14]
    83f2:	7bbb      	ldrb	r3, [r7, #14]
  
}
    83f4:	4618      	mov	r0, r3
    83f6:	3710      	adds	r7, #16
    83f8:	46bd      	mov	sp, r7
    83fa:	bd80      	pop	{r7, pc}
    83fc:	000084c1 	.word	0x000084c1
    8400:	000090ad 	.word	0x000090ad

00008404 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
    8404:	b580      	push	{r7, lr}
    8406:	b084      	sub	sp, #16
    8408:	af00      	add	r7, sp, #0
    840a:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
    840c:	6878      	ldr	r0, [r7, #4]
    840e:	4b14      	ldr	r3, [pc, #80]	; (8460 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
    8410:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
    8412:	2201      	movs	r2, #1
    8414:	2114      	movs	r1, #20
    8416:	6878      	ldr	r0, [r7, #4]
    8418:	4b12      	ldr	r3, [pc, #72]	; (8464 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
    841a:	4798      	blx	r3
    841c:	4603      	mov	r3, r0
    841e:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    8420:	231f      	movs	r3, #31
    8422:	73fb      	strb	r3, [r7, #15]
    8424:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8428:	2b00      	cmp	r3, #0
    842a:	db11      	blt.n	8450 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
    842c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8430:	4a0d      	ldr	r2, [pc, #52]	; (8468 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
    8432:	5cd3      	ldrb	r3, [r2, r3]
    8434:	2201      	movs	r2, #1
    8436:	4619      	mov	r1, r3
    8438:	6878      	ldr	r0, [r7, #4]
    843a:	4b0a      	ldr	r3, [pc, #40]	; (8464 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
    843c:	4798      	blx	r3
    843e:	4603      	mov	r3, r0
    8440:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
    8442:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8446:	b2db      	uxtb	r3, r3
    8448:	3b01      	subs	r3, #1
    844a:	b2db      	uxtb	r3, r3
    844c:	73fb      	strb	r3, [r7, #15]
    844e:	e7e9      	b.n	8424 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
    8450:	6878      	ldr	r0, [r7, #4]
    8452:	4b06      	ldr	r3, [pc, #24]	; (846c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
    8454:	4798      	blx	r3
}
    8456:	bf00      	nop
    8458:	3710      	adds	r7, #16
    845a:	46bd      	mov	sp, r7
    845c:	bd80      	pop	{r7, pc}
    845e:	bf00      	nop
    8460:	00008365 	.word	0x00008365
    8464:	000083b5 	.word	0x000083b5
    8468:	20000130 	.word	0x20000130
    846c:	0000838d 	.word	0x0000838d

00008470 <_ZN15Holt_3593_Class8FlipByteEh>:
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
}

unsigned char Holt_3593_Class::FlipByte(unsigned char byte){
    8470:	b480      	push	{r7}
    8472:	b085      	sub	sp, #20
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
    8478:	460b      	mov	r3, r1
    847a:	70fb      	strb	r3, [r7, #3]
	unsigned char rev=0;
    847c:	2300      	movs	r3, #0
    847e:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
    8480:	2300      	movs	r3, #0
    8482:	60bb      	str	r3, [r7, #8]
    8484:	68bb      	ldr	r3, [r7, #8]
    8486:	2b07      	cmp	r3, #7
    8488:	dc13      	bgt.n	84b2 <_ZN15Holt_3593_Class8FlipByteEh+0x42>
	{
		rev=rev<<1;
    848a:	7bfb      	ldrb	r3, [r7, #15]
    848c:	005b      	lsls	r3, r3, #1
    848e:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
    8490:	78fa      	ldrb	r2, [r7, #3]
    8492:	68bb      	ldr	r3, [r7, #8]
    8494:	fa42 f303 	asr.w	r3, r2, r3
    8498:	b25b      	sxtb	r3, r3
    849a:	f003 0301 	and.w	r3, r3, #1
    849e:	b25a      	sxtb	r2, r3
    84a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    84a4:	4313      	orrs	r3, r2
    84a6:	b25b      	sxtb	r3, r3
    84a8:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
    84aa:	68bb      	ldr	r3, [r7, #8]
    84ac:	3301      	adds	r3, #1
    84ae:	60bb      	str	r3, [r7, #8]
    84b0:	e7e8      	b.n	8484 <_ZN15Holt_3593_Class8FlipByteEh+0x14>
	}
	return rev;
    84b2:	7bfb      	ldrb	r3, [r7, #15]
}
    84b4:	4618      	mov	r0, r3
    84b6:	3714      	adds	r7, #20
    84b8:	46bd      	mov	sp, r7
    84ba:	bc80      	pop	{r7}
    84bc:	4770      	bx	lr
	...

000084c0 <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b082      	sub	sp, #8
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
    84c8:	460b      	mov	r3, r1
    84ca:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	4618      	mov	r0, r3
    84d0:	4b0f      	ldr	r3, [pc, #60]	; (8510 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
    84d2:	4798      	blx	r3
    84d4:	4603      	mov	r3, r0
    84d6:	f083 0301 	eor.w	r3, r3, #1
    84da:	b2db      	uxtb	r3, r3
    84dc:	2b00      	cmp	r3, #0
    84de:	d000      	beq.n	84e2 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
    84e0:	e7f4      	b.n	84cc <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	1cf9      	adds	r1, r7, #3
    84e6:	2201      	movs	r2, #1
    84e8:	4618      	mov	r0, r3
    84ea:	4b0a      	ldr	r3, [pc, #40]	; (8514 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
    84ec:	4798      	blx	r3
	while (!spi.isSPIReady());  
    84ee:	687b      	ldr	r3, [r7, #4]
    84f0:	4618      	mov	r0, r3
    84f2:	4b07      	ldr	r3, [pc, #28]	; (8510 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
    84f4:	4798      	blx	r3
    84f6:	4603      	mov	r3, r0
    84f8:	f083 0301 	eor.w	r3, r3, #1
    84fc:	b2db      	uxtb	r3, r3
    84fe:	2b00      	cmp	r3, #0
    8500:	d000      	beq.n	8504 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
    8502:	e7f4      	b.n	84ee <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
    8504:	78fb      	ldrb	r3, [r7, #3]
}
    8506:	4618      	mov	r0, r3
    8508:	3708      	adds	r7, #8
    850a:	46bd      	mov	sp, r7
    850c:	bd80      	pop	{r7, pc}
    850e:	bf00      	nop
    8510:	000090ad 	.word	0x000090ad
    8514:	00009005 	.word	0x00009005

00008518 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
    8518:	b580      	push	{r7, lr}
    851a:	b084      	sub	sp, #16
    851c:	af00      	add	r7, sp, #0
    851e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
    8520:	687b      	ldr	r3, [r7, #4]
    8522:	4618      	mov	r0, r3
    8524:	4b0f      	ldr	r3, [pc, #60]	; (8564 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
    8526:	4798      	blx	r3
    8528:	4603      	mov	r3, r0
    852a:	f083 0301 	eor.w	r3, r3, #1
    852e:	b2db      	uxtb	r3, r3
    8530:	2b00      	cmp	r3, #0
    8532:	d000      	beq.n	8536 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
    8534:	e7f4      	b.n	8520 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
    8536:	687b      	ldr	r3, [r7, #4]
    8538:	f107 010f 	add.w	r1, r7, #15
    853c:	2201      	movs	r2, #1
    853e:	4618      	mov	r0, r3
    8540:	4b09      	ldr	r3, [pc, #36]	; (8568 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
    8542:	4798      	blx	r3
	while (!spi.isSPIReady());
    8544:	687b      	ldr	r3, [r7, #4]
    8546:	4618      	mov	r0, r3
    8548:	4b06      	ldr	r3, [pc, #24]	; (8564 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
    854a:	4798      	blx	r3
    854c:	4603      	mov	r3, r0
    854e:	f083 0301 	eor.w	r3, r3, #1
    8552:	b2db      	uxtb	r3, r3
    8554:	2b00      	cmp	r3, #0
    8556:	d000      	beq.n	855a <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
    8558:	e7f4      	b.n	8544 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
    855a:	7bfb      	ldrb	r3, [r7, #15]
}	
    855c:	4618      	mov	r0, r3
    855e:	3710      	adds	r7, #16
    8560:	46bd      	mov	sp, r7
    8562:	bd80      	pop	{r7, pc}
    8564:	000090ad 	.word	0x000090ad
    8568:	00009049 	.word	0x00009049

0000856c <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
    856c:	b580      	push	{r7, lr}
    856e:	b084      	sub	sp, #16
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
    8574:	6878      	ldr	r0, [r7, #4]
    8576:	4b14      	ldr	r3, [pc, #80]	; (85c8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
    8578:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
    857a:	2201      	movs	r2, #1
    857c:	2128      	movs	r1, #40	; 0x28
    857e:	6878      	ldr	r0, [r7, #4]
    8580:	4b12      	ldr	r3, [pc, #72]	; (85cc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
    8582:	4798      	blx	r3
    8584:	4603      	mov	r3, r0
    8586:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
    8588:	231f      	movs	r3, #31
    858a:	73fb      	strb	r3, [r7, #15]
    858c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8590:	2b00      	cmp	r3, #0
    8592:	db11      	blt.n	85b8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
    8594:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8598:	4a0d      	ldr	r2, [pc, #52]	; (85d0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
    859a:	5cd3      	ldrb	r3, [r2, r3]
    859c:	2201      	movs	r2, #1
    859e:	4619      	mov	r1, r3
    85a0:	6878      	ldr	r0, [r7, #4]
    85a2:	4b0a      	ldr	r3, [pc, #40]	; (85cc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
    85a4:	4798      	blx	r3
    85a6:	4603      	mov	r3, r0
    85a8:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
    85aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    85ae:	b2db      	uxtb	r3, r3
    85b0:	3b01      	subs	r3, #1
    85b2:	b2db      	uxtb	r3, r3
    85b4:	73fb      	strb	r3, [r7, #15]
    85b6:	e7e9      	b.n	858c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
    85b8:	6878      	ldr	r0, [r7, #4]
    85ba:	4b06      	ldr	r3, [pc, #24]	; (85d4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
    85bc:	4798      	blx	r3
}
    85be:	bf00      	nop
    85c0:	3710      	adds	r7, #16
    85c2:	46bd      	mov	sp, r7
    85c4:	bd80      	pop	{r7, pc}
    85c6:	bf00      	nop
    85c8:	00008365 	.word	0x00008365
    85cc:	000083b5 	.word	0x000083b5
    85d0:	200022e8 	.word	0x200022e8
    85d4:	0000838d 	.word	0x0000838d

000085d8 <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
    85d8:	b580      	push	{r7, lr}
    85da:	b086      	sub	sp, #24
    85dc:	af00      	add	r7, sp, #0
    85de:	60f8      	str	r0, [r7, #12]
    85e0:	607b      	str	r3, [r7, #4]
    85e2:	460b      	mov	r3, r1
    85e4:	72fb      	strb	r3, [r7, #11]
    85e6:	4613      	mov	r3, r2
    85e8:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   open();
    85ea:	68f8      	ldr	r0, [r7, #12]
    85ec:	4b16      	ldr	r3, [pc, #88]	; (8648 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
    85ee:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
    85f0:	7afb      	ldrb	r3, [r7, #11]
    85f2:	4619      	mov	r1, r3
    85f4:	68f8      	ldr	r0, [r7, #12]
    85f6:	4b15      	ldr	r3, [pc, #84]	; (864c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
    85f8:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
    85fa:	68fb      	ldr	r3, [r7, #12]
    85fc:	4618      	mov	r0, r3
    85fe:	4b14      	ldr	r3, [pc, #80]	; (8650 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
    8600:	4798      	blx	r3
    8602:	4603      	mov	r3, r0
    8604:	f083 0301 	eor.w	r3, r3, #1
    8608:	b2db      	uxtb	r3, r3
    860a:	2b00      	cmp	r3, #0
    860c:	d000      	beq.n	8610 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
    860e:	e7f4      	b.n	85fa <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    8610:	2300      	movs	r3, #0
    8612:	75fb      	strb	r3, [r7, #23]
    8614:	7dfa      	ldrb	r2, [r7, #23]
    8616:	7abb      	ldrb	r3, [r7, #10]
    8618:	429a      	cmp	r2, r3
    861a:	da0d      	bge.n	8638 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
    861c:	68f8      	ldr	r0, [r7, #12]
    861e:	4b0d      	ldr	r3, [pc, #52]	; (8654 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
    8620:	4798      	blx	r3
    8622:	4603      	mov	r3, r0
    8624:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
    8626:	7dfb      	ldrb	r3, [r7, #23]
    8628:	687a      	ldr	r2, [r7, #4]
    862a:	4413      	add	r3, r2
    862c:	7dba      	ldrb	r2, [r7, #22]
    862e:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
    8630:	7dfb      	ldrb	r3, [r7, #23]
    8632:	3301      	adds	r3, #1
    8634:	75fb      	strb	r3, [r7, #23]
    8636:	e7ed      	b.n	8614 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
    8638:	68f8      	ldr	r0, [r7, #12]
    863a:	4b07      	ldr	r3, [pc, #28]	; (8658 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
    863c:	4798      	blx	r3
  
}
    863e:	bf00      	nop
    8640:	3718      	adds	r7, #24
    8642:	46bd      	mov	sp, r7
    8644:	bd80      	pop	{r7, pc}
    8646:	bf00      	nop
    8648:	00008365 	.word	0x00008365
    864c:	000084c1 	.word	0x000084c1
    8650:	000090ad 	.word	0x000090ad
    8654:	00008519 	.word	0x00008519
    8658:	0000838d 	.word	0x0000838d

0000865c <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
    865c:	b580      	push	{r7, lr}
    865e:	b084      	sub	sp, #16
    8660:	af00      	add	r7, sp, #0
    8662:	6078      	str	r0, [r7, #4]
    8664:	460b      	mov	r3, r1
    8666:	70fb      	strb	r3, [r7, #3]
    8668:	4613      	mov	r3, r2
    866a:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
    866c:	78fb      	ldrb	r3, [r7, #3]
    866e:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
    8670:	7bfb      	ldrb	r3, [r7, #15]
    8672:	4619      	mov	r1, r3
    8674:	6878      	ldr	r0, [r7, #4]
    8676:	4b0b      	ldr	r3, [pc, #44]	; (86a4 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
    8678:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
    867a:	78bb      	ldrb	r3, [r7, #2]
    867c:	2b00      	cmp	r3, #0
    867e:	d00a      	beq.n	8696 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	4618      	mov	r0, r3
    8684:	4b08      	ldr	r3, [pc, #32]	; (86a8 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
    8686:	4798      	blx	r3
    8688:	4603      	mov	r3, r0
    868a:	f083 0301 	eor.w	r3, r3, #1
    868e:	b2db      	uxtb	r3, r3
    8690:	2b00      	cmp	r3, #0
    8692:	d000      	beq.n	8696 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
    8694:	e7f4      	b.n	8680 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
    8696:	78fb      	ldrb	r3, [r7, #3]
    8698:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
    869a:	7bbb      	ldrb	r3, [r7, #14]
  
 }
    869c:	4618      	mov	r0, r3
    869e:	3710      	adds	r7, #16
    86a0:	46bd      	mov	sp, r7
    86a2:	bd80      	pop	{r7, pc}
    86a4:	000084c1 	.word	0x000084c1
    86a8:	000090ad 	.word	0x000090ad

000086ac <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
    86ac:	b580      	push	{r7, lr}
    86ae:	b084      	sub	sp, #16
    86b0:	af00      	add	r7, sp, #0
    86b2:	6078      	str	r0, [r7, #4]
    86b4:	460b      	mov	r3, r1
    86b6:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
    86b8:	78fb      	ldrb	r3, [r7, #3]
    86ba:	73fb      	strb	r3, [r7, #15]
  open();
    86bc:	6878      	ldr	r0, [r7, #4]
    86be:	4b0c      	ldr	r3, [pc, #48]	; (86f0 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
    86c0:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
    86c2:	7bfb      	ldrb	r3, [r7, #15]
    86c4:	4619      	mov	r1, r3
    86c6:	6878      	ldr	r0, [r7, #4]
    86c8:	4b0a      	ldr	r3, [pc, #40]	; (86f4 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
    86ca:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
    86cc:	687b      	ldr	r3, [r7, #4]
    86ce:	4618      	mov	r0, r3
    86d0:	4b09      	ldr	r3, [pc, #36]	; (86f8 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
    86d2:	4798      	blx	r3
    86d4:	4603      	mov	r3, r0
    86d6:	f083 0301 	eor.w	r3, r3, #1
    86da:	b2db      	uxtb	r3, r3
    86dc:	2b00      	cmp	r3, #0
    86de:	d000      	beq.n	86e2 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
    86e0:	e7f4      	b.n	86cc <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
    86e2:	6878      	ldr	r0, [r7, #4]
    86e4:	4b05      	ldr	r3, [pc, #20]	; (86fc <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
    86e6:	4798      	blx	r3
}
    86e8:	bf00      	nop
    86ea:	3710      	adds	r7, #16
    86ec:	46bd      	mov	sp, r7
    86ee:	bd80      	pop	{r7, pc}
    86f0:	00008365 	.word	0x00008365
    86f4:	000084c1 	.word	0x000084c1
    86f8:	000090ad 	.word	0x000090ad
    86fc:	0000838d 	.word	0x0000838d

00008700 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
    8700:	b580      	push	{r7, lr}
    8702:	b082      	sub	sp, #8
    8704:	af00      	add	r7, sp, #0
    8706:	6078      	str	r0, [r7, #4]
    8708:	460b      	mov	r3, r1
    870a:	70fb      	strb	r3, [r7, #3]
    870c:	4613      	mov	r3, r2
    870e:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
    8710:	6878      	ldr	r0, [r7, #4]
    8712:	4b14      	ldr	r3, [pc, #80]	; (8764 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
    8714:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
    8716:	78fb      	ldrb	r3, [r7, #3]
    8718:	4619      	mov	r1, r3
    871a:	6878      	ldr	r0, [r7, #4]
    871c:	4b12      	ldr	r3, [pc, #72]	; (8768 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
    871e:	4798      	blx	r3
  while (!spi.isSPIReady());    
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	4618      	mov	r0, r3
    8724:	4b11      	ldr	r3, [pc, #68]	; (876c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
    8726:	4798      	blx	r3
    8728:	4603      	mov	r3, r0
    872a:	f083 0301 	eor.w	r3, r3, #1
    872e:	b2db      	uxtb	r3, r3
    8730:	2b00      	cmp	r3, #0
    8732:	d000      	beq.n	8736 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
    8734:	e7f4      	b.n	8720 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
    8736:	78bb      	ldrb	r3, [r7, #2]
    8738:	4619      	mov	r1, r3
    873a:	6878      	ldr	r0, [r7, #4]
    873c:	4b0a      	ldr	r3, [pc, #40]	; (8768 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
    873e:	4798      	blx	r3
  while (!spi.isSPIReady());    
    8740:	687b      	ldr	r3, [r7, #4]
    8742:	4618      	mov	r0, r3
    8744:	4b09      	ldr	r3, [pc, #36]	; (876c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
    8746:	4798      	blx	r3
    8748:	4603      	mov	r3, r0
    874a:	f083 0301 	eor.w	r3, r3, #1
    874e:	b2db      	uxtb	r3, r3
    8750:	2b00      	cmp	r3, #0
    8752:	d000      	beq.n	8756 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
    8754:	e7f4      	b.n	8740 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
    8756:	6878      	ldr	r0, [r7, #4]
    8758:	4b05      	ldr	r3, [pc, #20]	; (8770 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
    875a:	4798      	blx	r3
}
    875c:	bf00      	nop
    875e:	3708      	adds	r7, #8
    8760:	46bd      	mov	sp, r7
    8762:	bd80      	pop	{r7, pc}
    8764:	00008365 	.word	0x00008365
    8768:	000084c1 	.word	0x000084c1
    876c:	000090ad 	.word	0x000090ad
    8770:	0000838d 	.word	0x0000838d

00008774 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
    8774:	b580      	push	{r7, lr}
    8776:	b084      	sub	sp, #16
    8778:	af00      	add	r7, sp, #0
    877a:	6078      	str	r0, [r7, #4]
    877c:	460b      	mov	r3, r1
    877e:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
    8780:	6878      	ldr	r0, [r7, #4]
    8782:	4b0a      	ldr	r3, [pc, #40]	; (87ac <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
    8784:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
    8786:	78fb      	ldrb	r3, [r7, #3]
    8788:	2201      	movs	r2, #1
    878a:	4619      	mov	r1, r3
    878c:	6878      	ldr	r0, [r7, #4]
    878e:	4b08      	ldr	r3, [pc, #32]	; (87b0 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
    8790:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
    8792:	6878      	ldr	r0, [r7, #4]
    8794:	4b07      	ldr	r3, [pc, #28]	; (87b4 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
    8796:	4798      	blx	r3
    8798:	4603      	mov	r3, r0
    879a:	73fb      	strb	r3, [r7, #15]
         
  close();
    879c:	6878      	ldr	r0, [r7, #4]
    879e:	4b06      	ldr	r3, [pc, #24]	; (87b8 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
    87a0:	4798      	blx	r3
  return R_Reg;
    87a2:	7bfb      	ldrb	r3, [r7, #15]
}
    87a4:	4618      	mov	r0, r3
    87a6:	3710      	adds	r7, #16
    87a8:	46bd      	mov	sp, r7
    87aa:	bd80      	pop	{r7, pc}
    87ac:	00008365 	.word	0x00008365
    87b0:	0000865d 	.word	0x0000865d
    87b4:	00008519 	.word	0x00008519
    87b8:	0000838d 	.word	0x0000838d

000087bc <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
    87bc:	b580      	push	{r7, lr}
    87be:	b082      	sub	sp, #8
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
    87c4:	2100      	movs	r1, #0
    87c6:	204e      	movs	r0, #78	; 0x4e
    87c8:	4b02      	ldr	r3, [pc, #8]	; (87d4 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
    87ca:	4798      	blx	r3
}
    87cc:	bf00      	nop
    87ce:	3708      	adds	r7, #8
    87d0:	46bd      	mov	sp, r7
    87d2:	bd80      	pop	{r7, pc}
    87d4:	00008179 	.word	0x00008179

000087d8 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
    87d8:	b580      	push	{r7, lr}
    87da:	b082      	sub	sp, #8
    87dc:	af00      	add	r7, sp, #0
    87de:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    87e0:	2101      	movs	r1, #1
    87e2:	204e      	movs	r0, #78	; 0x4e
    87e4:	4b02      	ldr	r3, [pc, #8]	; (87f0 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
    87e6:	4798      	blx	r3
}
    87e8:	bf00      	nop
    87ea:	3708      	adds	r7, #8
    87ec:	46bd      	mov	sp, r7
    87ee:	bd80      	pop	{r7, pc}
    87f0:	00008179 	.word	0x00008179

000087f4 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
    87f4:	b480      	push	{r7}
    87f6:	b083      	sub	sp, #12
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    87fc:	6039      	str	r1, [r7, #0]
    87fe:	683b      	ldr	r3, [r7, #0]
    8800:	681a      	ldr	r2, [r3, #0]
    8802:	687b      	ldr	r3, [r7, #4]
    8804:	601a      	str	r2, [r3, #0]
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	681b      	ldr	r3, [r3, #0]
    880a:	3b14      	subs	r3, #20
    880c:	681b      	ldr	r3, [r3, #0]
    880e:	461a      	mov	r2, r3
    8810:	687b      	ldr	r3, [r7, #4]
    8812:	4413      	add	r3, r2
    8814:	683a      	ldr	r2, [r7, #0]
    8816:	6852      	ldr	r2, [r2, #4]
    8818:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
    881a:	687b      	ldr	r3, [r7, #4]
    881c:	4618      	mov	r0, r3
    881e:	370c      	adds	r7, #12
    8820:	46bd      	mov	sp, r7
    8822:	bc80      	pop	{r7}
    8824:	4770      	bx	lr

00008826 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
    8826:	b590      	push	{r4, r7, lr}
    8828:	b085      	sub	sp, #20
    882a:	af00      	add	r7, sp, #0
    882c:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
    882e:	687b      	ldr	r3, [r7, #4]
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	3310      	adds	r3, #16
    8834:	681c      	ldr	r4, [r3, #0]
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	681b      	ldr	r3, [r3, #0]
    883a:	3b14      	subs	r3, #20
    883c:	681b      	ldr	r3, [r3, #0]
    883e:	461a      	mov	r2, r3
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	4413      	add	r3, r2
    8844:	681b      	ldr	r3, [r3, #0]
    8846:	3304      	adds	r3, #4
    8848:	681b      	ldr	r3, [r3, #0]
    884a:	687a      	ldr	r2, [r7, #4]
    884c:	6812      	ldr	r2, [r2, #0]
    884e:	3a14      	subs	r2, #20
    8850:	6812      	ldr	r2, [r2, #0]
    8852:	4611      	mov	r1, r2
    8854:	687a      	ldr	r2, [r7, #4]
    8856:	440a      	add	r2, r1
    8858:	f44f 7187 	mov.w	r1, #270	; 0x10e
    885c:	4610      	mov	r0, r2
    885e:	4798      	blx	r3
    8860:	4603      	mov	r3, r0
    8862:	4619      	mov	r1, r3
    8864:	6878      	ldr	r0, [r7, #4]
    8866:	47a0      	blx	r4
    8868:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
    886a:	68fb      	ldr	r3, [r7, #12]
    886c:	0c9b      	lsrs	r3, r3, #18
    886e:	b2db      	uxtb	r3, r3
    8870:	f003 0303 	and.w	r3, r3, #3
    8874:	72fb      	strb	r3, [r7, #11]

	return key;
    8876:	7afb      	ldrb	r3, [r7, #11]
}
    8878:	4618      	mov	r0, r3
    887a:	3714      	adds	r7, #20
    887c:	46bd      	mov	sp, r7
    887e:	bd90      	pop	{r4, r7, pc}

00008880 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
    8880:	b480      	push	{r7}
    8882:	b083      	sub	sp, #12
    8884:	af00      	add	r7, sp, #0
    8886:	6078      	str	r0, [r7, #4]
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	4618      	mov	r0, r3
    888c:	370c      	adds	r7, #12
    888e:	46bd      	mov	sp, r7
    8890:	bc80      	pop	{r7}
    8892:	4770      	bx	lr

00008894 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
    8894:	b480      	push	{r7}
    8896:	b083      	sub	sp, #12
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	4618      	mov	r0, r3
    88a0:	370c      	adds	r7, #12
    88a2:	46bd      	mov	sp, r7
    88a4:	bc80      	pop	{r7}
    88a6:	4770      	bx	lr

000088a8 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
    88a8:	b580      	push	{r7, lr}
    88aa:	b084      	sub	sp, #16
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    88b0:	460b      	mov	r3, r1
    88b2:	70fb      	strb	r3, [r7, #3]
    88b4:	4613      	mov	r3, r2
    88b6:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	78fa      	ldrb	r2, [r7, #3]
    88bc:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
    88be:	78bb      	ldrb	r3, [r7, #2]
    88c0:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
    88c2:	7bfb      	ldrb	r3, [r7, #15]
    88c4:	2b00      	cmp	r3, #0
    88c6:	f000 80ba 	beq.w	8a3e <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
    88ca:	78fb      	ldrb	r3, [r7, #3]
    88cc:	2b14      	cmp	r3, #20
    88ce:	f200 80a2 	bhi.w	8a16 <_ZN11Diagnostics12troubleshootEhb+0x16e>
    88d2:	a201      	add	r2, pc, #4	; (adr r2, 88d8 <_ZN11Diagnostics12troubleshootEhb+0x30>)
    88d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    88d8:	0000892d 	.word	0x0000892d
    88dc:	00008941 	.word	0x00008941
    88e0:	0000894b 	.word	0x0000894b
    88e4:	00008955 	.word	0x00008955
    88e8:	0000895f 	.word	0x0000895f
    88ec:	00008971 	.word	0x00008971
    88f0:	0000897b 	.word	0x0000897b
    88f4:	0000898d 	.word	0x0000898d
    88f8:	0000899f 	.word	0x0000899f
    88fc:	000089b3 	.word	0x000089b3
    8900:	000089bd 	.word	0x000089bd
    8904:	00008937 	.word	0x00008937
    8908:	000089a9 	.word	0x000089a9
    890c:	000089c7 	.word	0x000089c7
    8910:	000089d1 	.word	0x000089d1
    8914:	000089db 	.word	0x000089db
    8918:	000089e5 	.word	0x000089e5
    891c:	000089ef 	.word	0x000089ef
    8920:	000089f9 	.word	0x000089f9
    8924:	00008a03 	.word	0x00008a03
    8928:	00008a0d 	.word	0x00008a0d
      case SUCCESS:
      usb.println(F("Function executed successfully"));
    892c:	4946      	ldr	r1, [pc, #280]	; (8a48 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
    892e:	4847      	ldr	r0, [pc, #284]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8930:	4b47      	ldr	r3, [pc, #284]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8932:	4798      	blx	r3
      break;
    8934:	e074      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
    8936:	4947      	ldr	r1, [pc, #284]	; (8a54 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
    8938:	4844      	ldr	r0, [pc, #272]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    893a:	4b45      	ldr	r3, [pc, #276]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    893c:	4798      	blx	r3
      break;
    893e:	e06f      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    8940:	4945      	ldr	r1, [pc, #276]	; (8a58 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
    8942:	4842      	ldr	r0, [pc, #264]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8944:	4b42      	ldr	r3, [pc, #264]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8946:	4798      	blx	r3
      break;
    8948:	e06a      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    894a:	4944      	ldr	r1, [pc, #272]	; (8a5c <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
    894c:	483f      	ldr	r0, [pc, #252]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    894e:	4b40      	ldr	r3, [pc, #256]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8950:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
    8952:	e065      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
    8954:	4942      	ldr	r1, [pc, #264]	; (8a60 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
    8956:	483d      	ldr	r0, [pc, #244]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8958:	4b3d      	ldr	r3, [pc, #244]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    895a:	4798      	blx	r3
      break;
    895c:	e060      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
    895e:	4941      	ldr	r1, [pc, #260]	; (8a64 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
    8960:	483a      	ldr	r0, [pc, #232]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8962:	4b3b      	ldr	r3, [pc, #236]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8964:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
    8966:	4940      	ldr	r1, [pc, #256]	; (8a68 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
    8968:	4838      	ldr	r0, [pc, #224]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    896a:	4b39      	ldr	r3, [pc, #228]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    896c:	4798      	blx	r3
      break;
    896e:	e057      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
    8970:	493e      	ldr	r1, [pc, #248]	; (8a6c <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
    8972:	4836      	ldr	r0, [pc, #216]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8974:	4b36      	ldr	r3, [pc, #216]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8976:	4798      	blx	r3
      break;
    8978:	e052      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
    897a:	493d      	ldr	r1, [pc, #244]	; (8a70 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
    897c:	4833      	ldr	r0, [pc, #204]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    897e:	4b34      	ldr	r3, [pc, #208]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8980:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
    8982:	493c      	ldr	r1, [pc, #240]	; (8a74 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
    8984:	4831      	ldr	r0, [pc, #196]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8986:	4b32      	ldr	r3, [pc, #200]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8988:	4798      	blx	r3
      break;
    898a:	e049      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
    898c:	493a      	ldr	r1, [pc, #232]	; (8a78 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
    898e:	482f      	ldr	r0, [pc, #188]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8990:	4b2f      	ldr	r3, [pc, #188]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8992:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
    8994:	4939      	ldr	r1, [pc, #228]	; (8a7c <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
    8996:	482d      	ldr	r0, [pc, #180]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8998:	4b2d      	ldr	r3, [pc, #180]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    899a:	4798      	blx	r3
      break;
    899c:	e040      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
    899e:	4938      	ldr	r1, [pc, #224]	; (8a80 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
    89a0:	482a      	ldr	r0, [pc, #168]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89a2:	4b2b      	ldr	r3, [pc, #172]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89a4:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
    89a6:	e03b      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
    89a8:	4936      	ldr	r1, [pc, #216]	; (8a84 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
    89aa:	4828      	ldr	r0, [pc, #160]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89ac:	4b28      	ldr	r3, [pc, #160]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89ae:	4798      	blx	r3
      break;
    89b0:	e036      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
    89b2:	4935      	ldr	r1, [pc, #212]	; (8a88 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
    89b4:	4825      	ldr	r0, [pc, #148]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89b6:	4b26      	ldr	r3, [pc, #152]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89b8:	4798      	blx	r3
      break;
    89ba:	e031      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
    89bc:	4933      	ldr	r1, [pc, #204]	; (8a8c <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
    89be:	4823      	ldr	r0, [pc, #140]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89c0:	4b23      	ldr	r3, [pc, #140]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89c2:	4798      	blx	r3
      break;
    89c4:	e02c      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
    89c6:	4932      	ldr	r1, [pc, #200]	; (8a90 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
    89c8:	4820      	ldr	r0, [pc, #128]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89ca:	4b21      	ldr	r3, [pc, #132]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89cc:	4798      	blx	r3
      break;
    89ce:	e027      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
    89d0:	4930      	ldr	r1, [pc, #192]	; (8a94 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
    89d2:	481e      	ldr	r0, [pc, #120]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89d4:	4b1e      	ldr	r3, [pc, #120]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89d6:	4798      	blx	r3
      break;
    89d8:	e022      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
    89da:	492f      	ldr	r1, [pc, #188]	; (8a98 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
    89dc:	481b      	ldr	r0, [pc, #108]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89de:	4b1c      	ldr	r3, [pc, #112]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89e0:	4798      	blx	r3
      break;
    89e2:	e01d      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
    89e4:	492d      	ldr	r1, [pc, #180]	; (8a9c <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
    89e6:	4819      	ldr	r0, [pc, #100]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89e8:	4b19      	ldr	r3, [pc, #100]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89ea:	4798      	blx	r3
      break;
    89ec:	e018      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
    89ee:	492c      	ldr	r1, [pc, #176]	; (8aa0 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
    89f0:	4816      	ldr	r0, [pc, #88]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89f2:	4b17      	ldr	r3, [pc, #92]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89f4:	4798      	blx	r3
      break;
    89f6:	e013      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
    89f8:	492a      	ldr	r1, [pc, #168]	; (8aa4 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
    89fa:	4814      	ldr	r0, [pc, #80]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    89fc:	4b14      	ldr	r3, [pc, #80]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    89fe:	4798      	blx	r3
      break;
    8a00:	e00e      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
    8a02:	4929      	ldr	r1, [pc, #164]	; (8aa8 <_ZN11Diagnostics12troubleshootEhb+0x200>)
    8a04:	4811      	ldr	r0, [pc, #68]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8a06:	4b12      	ldr	r3, [pc, #72]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8a08:	4798      	blx	r3
      break;
    8a0a:	e009      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
    8a0c:	4927      	ldr	r1, [pc, #156]	; (8aac <_ZN11Diagnostics12troubleshootEhb+0x204>)
    8a0e:	480f      	ldr	r0, [pc, #60]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8a10:	4b0f      	ldr	r3, [pc, #60]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8a12:	4798      	blx	r3
      break;
    8a14:	e004      	b.n	8a20 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
    8a16:	4926      	ldr	r1, [pc, #152]	; (8ab0 <_ZN11Diagnostics12troubleshootEhb+0x208>)
    8a18:	480c      	ldr	r0, [pc, #48]	; (8a4c <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
    8a1a:	4b0d      	ldr	r3, [pc, #52]	; (8a50 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
    8a1c:	4798      	blx	r3
      break;
    8a1e:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
    8a20:	78fb      	ldrb	r3, [r7, #3]
    8a22:	2b0a      	cmp	r3, #10
    8a24:	d008      	beq.n	8a38 <_ZN11Diagnostics12troubleshootEhb+0x190>
    8a26:	78fb      	ldrb	r3, [r7, #3]
    8a28:	2b06      	cmp	r3, #6
    8a2a:	d005      	beq.n	8a38 <_ZN11Diagnostics12troubleshootEhb+0x190>
    8a2c:	78fb      	ldrb	r3, [r7, #3]
    8a2e:	2b02      	cmp	r3, #2
    8a30:	d002      	beq.n	8a38 <_ZN11Diagnostics12troubleshootEhb+0x190>
    8a32:	78fb      	ldrb	r3, [r7, #3]
    8a34:	2b0b      	cmp	r3, #11
    8a36:	d102      	bne.n	8a3e <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
    8a38:	6878      	ldr	r0, [r7, #4]
    8a3a:	4b1e      	ldr	r3, [pc, #120]	; (8ab4 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
    8a3c:	4798      	blx	r3
    }
  #endif
  }
}
    8a3e:	bf00      	nop
    8a40:	3710      	adds	r7, #16
    8a42:	46bd      	mov	sp, r7
    8a44:	bd80      	pop	{r7, pc}
    8a46:	bf00      	nop
    8a48:	0000e594 	.word	0x0000e594
    8a4c:	200036cc 	.word	0x200036cc
    8a50:	0000af29 	.word	0x0000af29
    8a54:	0000e5b4 	.word	0x0000e5b4
    8a58:	0000e5e8 	.word	0x0000e5e8
    8a5c:	0000e628 	.word	0x0000e628
    8a60:	0000e668 	.word	0x0000e668
    8a64:	0000e700 	.word	0x0000e700
    8a68:	0000e710 	.word	0x0000e710
    8a6c:	0000e740 	.word	0x0000e740
    8a70:	0000e78c 	.word	0x0000e78c
    8a74:	0000e7b0 	.word	0x0000e7b0
    8a78:	0000e7f4 	.word	0x0000e7f4
    8a7c:	0000e818 	.word	0x0000e818
    8a80:	0000e854 	.word	0x0000e854
    8a84:	0000e8a4 	.word	0x0000e8a4
    8a88:	0000e8e4 	.word	0x0000e8e4
    8a8c:	0000e908 	.word	0x0000e908
    8a90:	0000e930 	.word	0x0000e930
    8a94:	0000e954 	.word	0x0000e954
    8a98:	0000e97c 	.word	0x0000e97c
    8a9c:	0000e9a0 	.word	0x0000e9a0
    8aa0:	0000e9c8 	.word	0x0000e9c8
    8aa4:	0000ea14 	.word	0x0000ea14
    8aa8:	0000ea64 	.word	0x0000ea64
    8aac:	0000eab4 	.word	0x0000eab4
    8ab0:	0000eae8 	.word	0x0000eae8
    8ab4:	00008ab9 	.word	0x00008ab9

00008ab8 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
    8ab8:	b580      	push	{r7, lr}
    8aba:	b082      	sub	sp, #8
    8abc:	af00      	add	r7, sp, #0
    8abe:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
    8ac0:	4905      	ldr	r1, [pc, #20]	; (8ad8 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
    8ac2:	4806      	ldr	r0, [pc, #24]	; (8adc <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
    8ac4:	4b06      	ldr	r3, [pc, #24]	; (8ae0 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
    8ac6:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
    8ac8:	4906      	ldr	r1, [pc, #24]	; (8ae4 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
    8aca:	4804      	ldr	r0, [pc, #16]	; (8adc <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
    8acc:	4b06      	ldr	r3, [pc, #24]	; (8ae8 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
    8ace:	4798      	blx	r3
}
    8ad0:	bf00      	nop
    8ad2:	3708      	adds	r7, #8
    8ad4:	46bd      	mov	sp, r7
    8ad6:	bd80      	pop	{r7, pc}
    8ad8:	0000eb0c 	.word	0x0000eb0c
    8adc:	200036cc 	.word	0x200036cc
    8ae0:	0000ae59 	.word	0x0000ae59
    8ae4:	0000eb40 	.word	0x0000eb40
    8ae8:	0000af29 	.word	0x0000af29

00008aec <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
    8aec:	b580      	push	{r7, lr}
    8aee:	b082      	sub	sp, #8
    8af0:	af00      	add	r7, sp, #0
    8af2:	6078      	str	r0, [r7, #4]
    8af4:	6039      	str	r1, [r7, #0]
    8af6:	687b      	ldr	r3, [r7, #4]
    8af8:	2b01      	cmp	r3, #1
    8afa:	d10c      	bne.n	8b16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    8afc:	683b      	ldr	r3, [r7, #0]
    8afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8b02:	4293      	cmp	r3, r2
    8b04:	d107      	bne.n	8b16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    8b06:	4806      	ldr	r0, [pc, #24]	; (8b20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    8b08:	4b06      	ldr	r3, [pc, #24]	; (8b24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    8b0a:	4798      	blx	r3
    8b0c:	4a06      	ldr	r2, [pc, #24]	; (8b28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    8b0e:	4907      	ldr	r1, [pc, #28]	; (8b2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    8b10:	4803      	ldr	r0, [pc, #12]	; (8b20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    8b12:	4b07      	ldr	r3, [pc, #28]	; (8b30 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    8b14:	4798      	blx	r3
    8b16:	bf00      	nop
    8b18:	3708      	adds	r7, #8
    8b1a:	46bd      	mov	sp, r7
    8b1c:	bd80      	pop	{r7, pc}
    8b1e:	bf00      	nop
    8b20:	20002310 	.word	0x20002310
    8b24:	00008881 	.word	0x00008881
    8b28:	20000000 	.word	0x20000000
    8b2c:	00008895 	.word	0x00008895
    8b30:	0000b2dd 	.word	0x0000b2dd

00008b34 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
    8b34:	b580      	push	{r7, lr}
    8b36:	af00      	add	r7, sp, #0
    8b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b3c:	2001      	movs	r0, #1
    8b3e:	4b01      	ldr	r3, [pc, #4]	; (8b44 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
    8b40:	4798      	blx	r3
    8b42:	bd80      	pop	{r7, pc}
    8b44:	00008aed 	.word	0x00008aed

00008b48 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
    8b48:	b480      	push	{r7}
    8b4a:	b083      	sub	sp, #12
    8b4c:	af00      	add	r7, sp, #0
    8b4e:	6078      	str	r0, [r7, #4]
    8b50:	6039      	str	r1, [r7, #0]
	{
	data = v;
    8b52:	687b      	ldr	r3, [r7, #4]
    8b54:	683a      	ldr	r2, [r7, #0]
    8b56:	601a      	str	r2, [r3, #0]
	}
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	4618      	mov	r0, r3
    8b5c:	370c      	adds	r7, #12
    8b5e:	46bd      	mov	sp, r7
    8b60:	bc80      	pop	{r7}
    8b62:	4770      	bx	lr

00008b64 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
    8b64:	b580      	push	{r7, lr}
    8b66:	b082      	sub	sp, #8
    8b68:	af00      	add	r7, sp, #0
    8b6a:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8b72:	801a      	strh	r2, [r3, #0]
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8b7a:	805a      	strh	r2, [r3, #2]
    8b7c:	687b      	ldr	r3, [r7, #4]
    8b7e:	2200      	movs	r2, #0
    8b80:	605a      	str	r2, [r3, #4]
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	3308      	adds	r3, #8
    8b86:	2100      	movs	r1, #0
    8b88:	4618      	mov	r0, r3
    8b8a:	4b05      	ldr	r3, [pc, #20]	; (8ba0 <_ZN5eventC1Ev+0x3c>)
    8b8c:	4798      	blx	r3
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	2200      	movs	r2, #0
    8b92:	60da      	str	r2, [r3, #12]
	{
	}
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	4618      	mov	r0, r3
    8b98:	3708      	adds	r7, #8
    8b9a:	46bd      	mov	sp, r7
    8b9c:	bd80      	pop	{r7, pc}
    8b9e:	bf00      	nop
    8ba0:	00008b49 	.word	0x00008b49

00008ba4 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
    8ba4:	b480      	push	{r7}
    8ba6:	b083      	sub	sp, #12
    8ba8:	af00      	add	r7, sp, #0
    8baa:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
    8bac:	4b04      	ldr	r3, [pc, #16]	; (8bc0 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
    8bae:	681b      	ldr	r3, [r3, #0]
    8bb0:	2201      	movs	r2, #1
    8bb2:	701a      	strb	r2, [r3, #0]
}
    8bb4:	bf00      	nop
    8bb6:	370c      	adds	r7, #12
    8bb8:	46bd      	mov	sp, r7
    8bba:	bc80      	pop	{r7}
    8bbc:	4770      	bx	lr
    8bbe:	bf00      	nop
    8bc0:	2000331c 	.word	0x2000331c

00008bc4 <_ZN18EventHandler_ClassC1Ev>:


// default constructor
EventHandler_Class::EventHandler_Class()
    8bc4:	b480      	push	{r7}
    8bc6:	b083      	sub	sp, #12
    8bc8:	af00      	add	r7, sp, #0
    8bca:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
    8bcc:	4a04      	ldr	r2, [pc, #16]	; (8be0 <_ZN18EventHandler_ClassC1Ev+0x1c>)
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	4618      	mov	r0, r3
    8bd6:	370c      	adds	r7, #12
    8bd8:	46bd      	mov	sp, r7
    8bda:	bc80      	pop	{r7}
    8bdc:	4770      	bx	lr
    8bde:	bf00      	nop
    8be0:	2000331c 	.word	0x2000331c

00008be4 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
    8be4:	b480      	push	{r7}
    8be6:	b083      	sub	sp, #12
    8be8:	af00      	add	r7, sp, #0
    8bea:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
    8bec:	4a04      	ldr	r2, [pc, #16]	; (8c00 <_ZN18EventHandler_ClassD1Ev+0x1c>)
    8bee:	687b      	ldr	r3, [r7, #4]
    8bf0:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	4618      	mov	r0, r3
    8bf6:	370c      	adds	r7, #12
    8bf8:	46bd      	mov	sp, r7
    8bfa:	bc80      	pop	{r7}
    8bfc:	4770      	bx	lr
    8bfe:	bf00      	nop
    8c00:	2000331c 	.word	0x2000331c

00008c04 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:

	#endif
}

bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout)
{
    8c04:	b590      	push	{r4, r7, lr}
    8c06:	b08b      	sub	sp, #44	; 0x2c
    8c08:	af00      	add	r7, sp, #0
    8c0a:	60f8      	str	r0, [r7, #12]
    8c0c:	60b9      	str	r1, [r7, #8]
    8c0e:	4611      	mov	r1, r2
    8c10:	461a      	mov	r2, r3
    8c12:	460b      	mov	r3, r1
    8c14:	80fb      	strh	r3, [r7, #6]
    8c16:	4613      	mov	r3, r2
    8c18:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
    8c1a:	2300      	movs	r3, #0
    8c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	event*	queue;
	event*	queuePrev(NULL);
    8c20:	2300      	movs	r3, #0
    8c22:	61fb      	str	r3, [r7, #28]
	
	
	e.eventClass = eventClass;
    8c24:	68bb      	ldr	r3, [r7, #8]
    8c26:	88fa      	ldrh	r2, [r7, #6]
    8c28:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
    8c2a:	68bb      	ldr	r3, [r7, #8]
    8c2c:	88ba      	ldrh	r2, [r7, #4]
    8c2e:	805a      	strh	r2, [r3, #2]

	tick_t	timeoutTime;
	
	if (timeout != forever)
    8c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8c36:	4293      	cmp	r3, r2
    8c38:	d007      	beq.n	8c4a <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x46>
	timeoutTime = (eventTimer.get_ticks() + timeout);
    8c3a:	4853      	ldr	r0, [pc, #332]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8c3c:	4b53      	ldr	r3, [pc, #332]	; (8d8c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x188>)
    8c3e:	4798      	blx	r3
    8c40:	4602      	mov	r2, r0
    8c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c44:	4413      	add	r3, r2
    8c46:	61bb      	str	r3, [r7, #24]
    8c48:	e002      	b.n	8c50 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x4c>
	else
	timeoutTime = forever;
    8c4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    8c4e:	61bb      	str	r3, [r7, #24]

	while (!result && (eventTimer.get_ticks() < timeoutTime))
    8c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    8c54:	f083 0301 	eor.w	r3, r3, #1
    8c58:	b2db      	uxtb	r3, r3
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d008      	beq.n	8c70 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x6c>
    8c5e:	484a      	ldr	r0, [pc, #296]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8c60:	4b4a      	ldr	r3, [pc, #296]	; (8d8c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x188>)
    8c62:	4798      	blx	r3
    8c64:	4602      	mov	r2, r0
    8c66:	69bb      	ldr	r3, [r7, #24]
    8c68:	429a      	cmp	r2, r3
    8c6a:	d201      	bcs.n	8c70 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x6c>
    8c6c:	2301      	movs	r3, #1
    8c6e:	e000      	b.n	8c72 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x6e>
    8c70:	2300      	movs	r3, #0
    8c72:	2b00      	cmp	r3, #0
    8c74:	f000 8081 	beq.w	8d7a <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x176>
	{
		if (eventHandler)
    8c78:	68fb      	ldr	r3, [r7, #12]
    8c7a:	685b      	ldr	r3, [r3, #4]
    8c7c:	2b00      	cmp	r3, #0
    8c7e:	d002      	beq.n	8c86 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x82>
		{
			eventHandler();
    8c80:	68fb      	ldr	r3, [r7, #12]
    8c82:	685b      	ldr	r3, [r3, #4]
    8c84:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
    8c86:	4b42      	ldr	r3, [pc, #264]	; (8d90 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x18c>)
    8c88:	681b      	ldr	r3, [r3, #0]
    8c8a:	623b      	str	r3, [r7, #32]

		while (queue)
    8c8c:	6a3b      	ldr	r3, [r7, #32]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d041      	beq.n	8d16 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x112>
			usb << "     queue->type:      " << (*queue).eventType << newline;
			usb << "     queue->timestamp: " << (*queue).timestamp << newline;
		
			#endif
			if (
			((e.eventClass == kAnyEventClass) ||
    8c92:	68bb      	ldr	r3, [r7, #8]
    8c94:	881b      	ldrh	r3, [r3, #0]
			if (
    8c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8c9a:	4293      	cmp	r3, r2
    8c9c:	d005      	beq.n	8caa <_ZN18EventHandler_Class12WaitForEventER5eventttl+0xa6>
			(queue->eventClass == e.eventClass))
    8c9e:	6a3b      	ldr	r3, [r7, #32]
    8ca0:	881a      	ldrh	r2, [r3, #0]
    8ca2:	68bb      	ldr	r3, [r7, #8]
    8ca4:	881b      	ldrh	r3, [r3, #0]
			((e.eventClass == kAnyEventClass) ||
    8ca6:	429a      	cmp	r2, r3
    8ca8:	d12f      	bne.n	8d0a <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x106>
			&&
			((e.eventType == kAnyEventType) ||
    8caa:	68bb      	ldr	r3, [r7, #8]
    8cac:	885b      	ldrh	r3, [r3, #2]
			&&
    8cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8cb2:	4293      	cmp	r3, r2
    8cb4:	d005      	beq.n	8cc2 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0xbe>
			(queue->eventType == e.eventType))
    8cb6:	6a3b      	ldr	r3, [r7, #32]
    8cb8:	885a      	ldrh	r2, [r3, #2]
    8cba:	68bb      	ldr	r3, [r7, #8]
    8cbc:	885b      	ldrh	r3, [r3, #2]
			((e.eventType == kAnyEventType) ||
    8cbe:	429a      	cmp	r2, r3
    8cc0:	d123      	bne.n	8d0a <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x106>
			)
			{
				if (queuePrev)
    8cc2:	69fb      	ldr	r3, [r7, #28]
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d004      	beq.n	8cd2 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0xce>
				{
					queuePrev->next = queue->next;
    8cc8:	6a3b      	ldr	r3, [r7, #32]
    8cca:	68da      	ldr	r2, [r3, #12]
    8ccc:	69fb      	ldr	r3, [r7, #28]
    8cce:	60da      	str	r2, [r3, #12]
    8cd0:	e003      	b.n	8cda <_ZN18EventHandler_Class12WaitForEventER5eventttl+0xd6>
				}
				else
				{
					mainThreadEventQueue = queue->next;
    8cd2:	6a3b      	ldr	r3, [r7, #32]
    8cd4:	68db      	ldr	r3, [r3, #12]
    8cd6:	4a2e      	ldr	r2, [pc, #184]	; (8d90 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x18c>)
    8cd8:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
    8cda:	68ba      	ldr	r2, [r7, #8]
    8cdc:	6a3b      	ldr	r3, [r7, #32]
    8cde:	4614      	mov	r4, r2
    8ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
    8ce6:	4b2b      	ldr	r3, [pc, #172]	; (8d94 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x190>)
    8ce8:	681a      	ldr	r2, [r3, #0]
    8cea:	6a3b      	ldr	r3, [r7, #32]
    8cec:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
    8cee:	4a29      	ldr	r2, [pc, #164]	; (8d94 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x190>)
    8cf0:	6a3b      	ldr	r3, [r7, #32]
    8cf2:	6013      	str	r3, [r2, #0]
				
				eventsInUse--;
    8cf4:	68fb      	ldr	r3, [r7, #12]
    8cf6:	689b      	ldr	r3, [r3, #8]
    8cf8:	1e5a      	subs	r2, r3, #1
    8cfa:	68fb      	ldr	r3, [r7, #12]
    8cfc:	609a      	str	r2, [r3, #8]

				queue = NULL;
    8cfe:	2300      	movs	r3, #0
    8d00:	623b      	str	r3, [r7, #32]
				result = true;
    8d02:	2301      	movs	r3, #1
    8d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    8d08:	e004      	b.n	8d14 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x110>
			}
			else
			{
				queuePrev = queue;
    8d0a:	6a3b      	ldr	r3, [r7, #32]
    8d0c:	61fb      	str	r3, [r7, #28]
				queue = queue->next;
    8d0e:	6a3b      	ldr	r3, [r7, #32]
    8d10:	68db      	ldr	r3, [r3, #12]
    8d12:	623b      	str	r3, [r7, #32]
		while (queue)
    8d14:	e7ba      	b.n	8c8c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x88>
			}
		}

		if (result)
    8d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d198      	bne.n	8c50 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x4c>
		
			#endif
		}
		else
		{
			tick_t	timeRemaining(timeoutTime - eventTimer.get_ticks());
    8d1e:	69bc      	ldr	r4, [r7, #24]
    8d20:	4819      	ldr	r0, [pc, #100]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8d22:	4b1a      	ldr	r3, [pc, #104]	; (8d8c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x188>)
    8d24:	4798      	blx	r3
    8d26:	4603      	mov	r3, r0
    8d28:	1ae3      	subs	r3, r4, r3
    8d2a:	617b      	str	r3, [r7, #20]
			eventTimeout=false;
    8d2c:	68fb      	ldr	r3, [r7, #12]
    8d2e:	2200      	movs	r2, #0
    8d30:	701a      	strb	r2, [r3, #0]
			if (timeRemaining > CHECK_EVENT_PERIOD){
    8d32:	697b      	ldr	r3, [r7, #20]
    8d34:	2b32      	cmp	r3, #50	; 0x32
    8d36:	dd05      	ble.n	8d44 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x140>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
    8d38:	2232      	movs	r2, #50	; 0x32
    8d3a:	4917      	ldr	r1, [pc, #92]	; (8d98 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x194>)
    8d3c:	4812      	ldr	r0, [pc, #72]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8d3e:	4b17      	ldr	r3, [pc, #92]	; (8d9c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x198>)
    8d40:	4798      	blx	r3
    8d42:	e00d      	b.n	8d60 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x15c>
			}else if (timeRemaining > 0){
    8d44:	697b      	ldr	r3, [r7, #20]
    8d46:	2b00      	cmp	r3, #0
    8d48:	dd0a      	ble.n	8d60 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x15c>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,timeoutTime - eventTimer.get_ticks());
    8d4a:	69bc      	ldr	r4, [r7, #24]
    8d4c:	480e      	ldr	r0, [pc, #56]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8d4e:	4b0f      	ldr	r3, [pc, #60]	; (8d8c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x188>)
    8d50:	4798      	blx	r3
    8d52:	4603      	mov	r3, r0
    8d54:	1ae3      	subs	r3, r4, r3
    8d56:	461a      	mov	r2, r3
    8d58:	490f      	ldr	r1, [pc, #60]	; (8d98 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x194>)
    8d5a:	480b      	ldr	r0, [pc, #44]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8d5c:	4b0f      	ldr	r3, [pc, #60]	; (8d9c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x198>)
    8d5e:	4798      	blx	r3
			}
			eventTimer.start();
    8d60:	4809      	ldr	r0, [pc, #36]	; (8d88 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x184>)
    8d62:	4b0f      	ldr	r3, [pc, #60]	; (8da0 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x19c>)
    8d64:	4798      	blx	r3
			while (!eventTimeout);
    8d66:	68fb      	ldr	r3, [r7, #12]
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	b2db      	uxtb	r3, r3
    8d6c:	f083 0301 	eor.w	r3, r3, #1
    8d70:	b2db      	uxtb	r3, r3
    8d72:	2b00      	cmp	r3, #0
    8d74:	f43f af6c 	beq.w	8c50 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x4c>
    8d78:	e7f5      	b.n	8d66 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x162>
		
		}
	}

	return result;
    8d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
    8d7e:	4618      	mov	r0, r3
    8d80:	372c      	adds	r7, #44	; 0x2c
    8d82:	46bd      	mov	sp, r7
    8d84:	bd90      	pop	{r4, r7, pc}
    8d86:	bf00      	nop
    8d88:	20003644 	.word	0x20003644
    8d8c:	0000a6e1 	.word	0x0000a6e1
    8d90:	20003318 	.word	0x20003318
    8d94:	20003314 	.word	0x20003314
    8d98:	00008ba5 	.word	0x00008ba5
    8d9c:	0000a6a9 	.word	0x0000a6a9
    8da0:	0000a5d9 	.word	0x0000a5d9

00008da4 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
    8da4:	b580      	push	{r7, lr}
    8da6:	b084      	sub	sp, #16
    8da8:	af00      	add	r7, sp, #0
    8daa:	6078      	str	r0, [r7, #4]
    8dac:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
    8dae:	4b22      	ldr	r3, [pc, #136]	; (8e38 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
    8db0:	681b      	ldr	r3, [r3, #0]
    8db2:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
    8db4:	68bb      	ldr	r3, [r7, #8]
    8db6:	2b00      	cmp	r3, #0
    8db8:	d035      	beq.n	8e26 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
    8dba:	4b1f      	ldr	r3, [pc, #124]	; (8e38 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
    8dbc:	681b      	ldr	r3, [r3, #0]
    8dbe:	68db      	ldr	r3, [r3, #12]
    8dc0:	4a1d      	ldr	r2, [pc, #116]	; (8e38 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
    8dc2:	6013      	str	r3, [r2, #0]
		theEvent->next = NULL;
    8dc4:	68bb      	ldr	r3, [r7, #8]
    8dc6:	2200      	movs	r2, #0
    8dc8:	60da      	str	r2, [r3, #12]
		eventsInUse++;
    8dca:	687b      	ldr	r3, [r7, #4]
    8dcc:	689b      	ldr	r3, [r3, #8]
    8dce:	1c5a      	adds	r2, r3, #1
    8dd0:	687b      	ldr	r3, [r7, #4]
    8dd2:	609a      	str	r2, [r3, #8]

		event*	threadQueue((event*)mainThreadEventQueue);
    8dd4:	4b19      	ldr	r3, [pc, #100]	; (8e3c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
    8dd6:	681b      	ldr	r3, [r3, #0]
    8dd8:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
    8dda:	68fb      	ldr	r3, [r7, #12]
    8ddc:	2b00      	cmp	r3, #0
    8dde:	d103      	bne.n	8de8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
    8de0:	4a16      	ldr	r2, [pc, #88]	; (8e3c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
    8de2:	68bb      	ldr	r3, [r7, #8]
    8de4:	6013      	str	r3, [r2, #0]
    8de6:	e00a      	b.n	8dfe <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
    8de8:	68fb      	ldr	r3, [r7, #12]
    8dea:	68db      	ldr	r3, [r3, #12]
    8dec:	2b00      	cmp	r3, #0
    8dee:	d003      	beq.n	8df8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
    8df0:	68fb      	ldr	r3, [r7, #12]
    8df2:	68db      	ldr	r3, [r3, #12]
    8df4:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
    8df6:	e7f7      	b.n	8de8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
    8df8:	68fb      	ldr	r3, [r7, #12]
    8dfa:	68ba      	ldr	r2, [r7, #8]
    8dfc:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
    8dfe:	683b      	ldr	r3, [r7, #0]
    8e00:	881a      	ldrh	r2, [r3, #0]
    8e02:	68bb      	ldr	r3, [r7, #8]
    8e04:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
    8e06:	683b      	ldr	r3, [r7, #0]
    8e08:	885a      	ldrh	r2, [r3, #2]
    8e0a:	68bb      	ldr	r3, [r7, #8]
    8e0c:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
    8e0e:	68bb      	ldr	r3, [r7, #8]
    8e10:	683a      	ldr	r2, [r7, #0]
    8e12:	6892      	ldr	r2, [r2, #8]
    8e14:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.get_ticks();
    8e16:	480a      	ldr	r0, [pc, #40]	; (8e40 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
    8e18:	4b0a      	ldr	r3, [pc, #40]	; (8e44 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa0>)
    8e1a:	4798      	blx	r3
    8e1c:	4603      	mov	r3, r0
    8e1e:	461a      	mov	r2, r3
    8e20:	68bb      	ldr	r3, [r7, #8]
    8e22:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
    8e24:	e004      	b.n	8e30 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
    8e26:	687b      	ldr	r3, [r7, #4]
    8e28:	699b      	ldr	r3, [r3, #24]
    8e2a:	1c5a      	adds	r2, r3, #1
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	619a      	str	r2, [r3, #24]
}
    8e30:	bf00      	nop
    8e32:	3710      	adds	r7, #16
    8e34:	46bd      	mov	sp, r7
    8e36:	bd80      	pop	{r7, pc}
    8e38:	20003314 	.word	0x20003314
    8e3c:	20003318 	.word	0x20003318
    8e40:	20003644 	.word	0x20003644
    8e44:	0000a6e1 	.word	0x0000a6e1

00008e48 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	b088      	sub	sp, #32
    8e4c:	af00      	add	r7, sp, #0
    8e4e:	60f8      	str	r0, [r7, #12]
    8e50:	460b      	mov	r3, r1
    8e52:	607a      	str	r2, [r7, #4]
    8e54:	817b      	strh	r3, [r7, #10]
	event		theEvent;
    8e56:	f107 0310 	add.w	r3, r7, #16
    8e5a:	4618      	mov	r0, r3
    8e5c:	4b09      	ldr	r3, [pc, #36]	; (8e84 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
    8e5e:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
    8e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    8e64:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(uint16_t)et ;
    8e66:	897b      	ldrh	r3, [r7, #10]
    8e68:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
    8e6a:	687b      	ldr	r3, [r7, #4]
    8e6c:	681b      	ldr	r3, [r3, #0]
    8e6e:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
    8e70:	f107 0310 	add.w	r3, r7, #16
    8e74:	4619      	mov	r1, r3
    8e76:	68f8      	ldr	r0, [r7, #12]
    8e78:	4b03      	ldr	r3, [pc, #12]	; (8e88 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
    8e7a:	4798      	blx	r3
}
    8e7c:	bf00      	nop
    8e7e:	3720      	adds	r7, #32
    8e80:	46bd      	mov	sp, r7
    8e82:	bd80      	pop	{r7, pc}
    8e84:	00008b65 	.word	0x00008b65
    8e88:	00008da5 	.word	0x00008da5

00008e8c <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
    8e8c:	b580      	push	{r7, lr}
    8e8e:	b08a      	sub	sp, #40	; 0x28
    8e90:	af00      	add	r7, sp, #0
    8e92:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
    8e94:	f04f 0300 	mov.w	r3, #0
    8e98:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
    8e9a:	f04f 0300 	mov.w	r3, #0
    8e9e:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
    8ea0:	f04f 0300 	mov.w	r3, #0
    8ea4:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
    8ea6:	f107 030c 	add.w	r3, r7, #12
    8eaa:	4618      	mov	r0, r3
    8eac:	4b03      	ldr	r3, [pc, #12]	; (8ebc <_ZN18EventHandler_Class10CheckEventEv+0x30>)
    8eae:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	689b      	ldr	r3, [r3, #8]
	
}
    8eb4:	4618      	mov	r0, r3
    8eb6:	3728      	adds	r7, #40	; 0x28
    8eb8:	46bd      	mov	sp, r7
    8eba:	bd80      	pop	{r7, pc}
    8ebc:	00008b65 	.word	0x00008b65

00008ec0 <_Z41__static_initialization_and_destruction_0ii>:


    8ec0:	b5b0      	push	{r4, r5, r7, lr}
    8ec2:	b082      	sub	sp, #8
    8ec4:	af00      	add	r7, sp, #0
    8ec6:	6078      	str	r0, [r7, #4]
    8ec8:	6039      	str	r1, [r7, #0]
    8eca:	687b      	ldr	r3, [r7, #4]
    8ecc:	2b01      	cmp	r3, #1
    8ece:	d117      	bne.n	8f00 <_Z41__static_initialization_and_destruction_0ii+0x40>
    8ed0:	683b      	ldr	r3, [r7, #0]
    8ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8ed6:	4293      	cmp	r3, r2
    8ed8:	d112      	bne.n	8f00 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
    8eda:	4b0b      	ldr	r3, [pc, #44]	; (8f08 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    8edc:	24ff      	movs	r4, #255	; 0xff
    8ede:	461d      	mov	r5, r3
    8ee0:	2c00      	cmp	r4, #0
    8ee2:	db05      	blt.n	8ef0 <_Z41__static_initialization_and_destruction_0ii+0x30>
    8ee4:	4628      	mov	r0, r5
    8ee6:	4b09      	ldr	r3, [pc, #36]	; (8f0c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    8ee8:	4798      	blx	r3
    8eea:	3510      	adds	r5, #16
    8eec:	3c01      	subs	r4, #1
    8eee:	e7f7      	b.n	8ee0 <_Z41__static_initialization_and_destruction_0ii+0x20>
    8ef0:	4807      	ldr	r0, [pc, #28]	; (8f10 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    8ef2:	4b08      	ldr	r3, [pc, #32]	; (8f14 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    8ef4:	4798      	blx	r3
    8ef6:	4a08      	ldr	r2, [pc, #32]	; (8f18 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    8ef8:	4908      	ldr	r1, [pc, #32]	; (8f1c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    8efa:	4805      	ldr	r0, [pc, #20]	; (8f10 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    8efc:	4b08      	ldr	r3, [pc, #32]	; (8f20 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    8efe:	4798      	blx	r3
    8f00:	bf00      	nop
    8f02:	3708      	adds	r7, #8
    8f04:	46bd      	mov	sp, r7
    8f06:	bdb0      	pop	{r4, r5, r7, pc}
    8f08:	20002314 	.word	0x20002314
    8f0c:	00008b65 	.word	0x00008b65
    8f10:	2000332c 	.word	0x2000332c
    8f14:	00008bc5 	.word	0x00008bc5
    8f18:	20000000 	.word	0x20000000
    8f1c:	00008be5 	.word	0x00008be5
    8f20:	0000b2dd 	.word	0x0000b2dd

00008f24 <_GLOBAL__sub_I_maxEventCount>:
    8f24:	b580      	push	{r7, lr}
    8f26:	af00      	add	r7, sp, #0
    8f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8f2c:	2001      	movs	r0, #1
    8f2e:	4b01      	ldr	r3, [pc, #4]	; (8f34 <_GLOBAL__sub_I_maxEventCount+0x10>)
    8f30:	4798      	blx	r3
    8f32:	bd80      	pop	{r7, pc}
    8f34:	00008ec1 	.word	0x00008ec1

00008f38 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    8f38:	b480      	push	{r7}
    8f3a:	b083      	sub	sp, #12
    8f3c:	af00      	add	r7, sp, #0
    8f3e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    8f40:	4a04      	ldr	r2, [pc, #16]	; (8f54 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    8f42:	687b      	ldr	r3, [r7, #4]
    8f44:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	4618      	mov	r0, r3
    8f4a:	370c      	adds	r7, #12
    8f4c:	46bd      	mov	sp, r7
    8f4e:	bc80      	pop	{r7}
    8f50:	4770      	bx	lr
    8f52:	bf00      	nop
    8f54:	20003348 	.word	0x20003348

00008f58 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    8f58:	b480      	push	{r7}
    8f5a:	b083      	sub	sp, #12
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    8f60:	687b      	ldr	r3, [r7, #4]
    8f62:	4618      	mov	r0, r3
    8f64:	370c      	adds	r7, #12
    8f66:	46bd      	mov	sp, r7
    8f68:	bc80      	pop	{r7}
    8f6a:	4770      	bx	lr

00008f6c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    8f6c:	b580      	push	{r7, lr}
    8f6e:	b082      	sub	sp, #8
    8f70:	af00      	add	r7, sp, #0
    8f72:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	685a      	ldr	r2, [r3, #4]
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	3308      	adds	r3, #8
    8f7c:	4619      	mov	r1, r3
    8f7e:	4610      	mov	r0, r2
    8f80:	4b06      	ldr	r3, [pc, #24]	; (8f9c <_ZN13SPI_Syn_Class4initEv+0x30>)
    8f82:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	685b      	ldr	r3, [r3, #4]
    8f88:	4618      	mov	r0, r3
    8f8a:	4b05      	ldr	r3, [pc, #20]	; (8fa0 <_ZN13SPI_Syn_Class4initEv+0x34>)
    8f8c:	4798      	blx	r3
	
	ready=true;
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	2201      	movs	r2, #1
    8f92:	701a      	strb	r2, [r3, #0]
	
}
    8f94:	bf00      	nop
    8f96:	3708      	adds	r7, #8
    8f98:	46bd      	mov	sp, r7
    8f9a:	bd80      	pop	{r7, pc}
    8f9c:	00002d01 	.word	0x00002d01
    8fa0:	00002bf9 	.word	0x00002bf9

00008fa4 <_ZN13SPI_Syn_Class13setDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::setDescriptor(spi_m_sync_descriptor *spiDesc){
    8fa4:	b480      	push	{r7}
    8fa6:	b083      	sub	sp, #12
    8fa8:	af00      	add	r7, sp, #0
    8faa:	6078      	str	r0, [r7, #4]
    8fac:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    8fae:	4a05      	ldr	r2, [pc, #20]	; (8fc4 <_ZN13SPI_Syn_Class13setDescriptorEP21spi_m_sync_descriptor+0x20>)
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	683a      	ldr	r2, [r7, #0]
    8fb8:	605a      	str	r2, [r3, #4]
}
    8fba:	bf00      	nop
    8fbc:	370c      	adds	r7, #12
    8fbe:	46bd      	mov	sp, r7
    8fc0:	bc80      	pop	{r7}
    8fc2:	4770      	bx	lr
    8fc4:	20003348 	.word	0x20003348

00008fc8 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    8fc8:	b580      	push	{r7, lr}
    8fca:	b082      	sub	sp, #8
    8fcc:	af00      	add	r7, sp, #0
    8fce:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	685a      	ldr	r2, [r3, #4]
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	3308      	adds	r3, #8
    8fd8:	4619      	mov	r1, r3
    8fda:	4610      	mov	r0, r2
    8fdc:	4b07      	ldr	r3, [pc, #28]	; (8ffc <_ZN13SPI_Syn_Class6enableEv+0x34>)
    8fde:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    8fe0:	687b      	ldr	r3, [r7, #4]
    8fe2:	685b      	ldr	r3, [r3, #4]
    8fe4:	4618      	mov	r0, r3
    8fe6:	4b06      	ldr	r3, [pc, #24]	; (9000 <_ZN13SPI_Syn_Class6enableEv+0x38>)
    8fe8:	4798      	blx	r3
	ready=true;
    8fea:	687b      	ldr	r3, [r7, #4]
    8fec:	2201      	movs	r2, #1
    8fee:	701a      	strb	r2, [r3, #0]
	return 0;
    8ff0:	2300      	movs	r3, #0
}
    8ff2:	4618      	mov	r0, r3
    8ff4:	3708      	adds	r7, #8
    8ff6:	46bd      	mov	sp, r7
    8ff8:	bd80      	pop	{r7, pc}
    8ffa:	bf00      	nop
    8ffc:	00002d01 	.word	0x00002d01
    9000:	00002bf9 	.word	0x00002bf9

00009004 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    9004:	b580      	push	{r7, lr}
    9006:	b086      	sub	sp, #24
    9008:	af00      	add	r7, sp, #0
    900a:	60f8      	str	r0, [r7, #12]
    900c:	60b9      	str	r1, [r7, #8]
    900e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    9010:	68fb      	ldr	r3, [r7, #12]
    9012:	2201      	movs	r2, #1
    9014:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
    9016:	68fb      	ldr	r3, [r7, #12]
    9018:	689b      	ldr	r3, [r3, #8]
    901a:	687a      	ldr	r2, [r7, #4]
    901c:	b292      	uxth	r2, r2
    901e:	68b9      	ldr	r1, [r7, #8]
    9020:	4618      	mov	r0, r3
    9022:	4b08      	ldr	r3, [pc, #32]	; (9044 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
    9024:	4798      	blx	r3
    9026:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    9028:	697b      	ldr	r3, [r7, #20]
    902a:	2b00      	cmp	r3, #0
    902c:	bf14      	ite	ne
    902e:	2301      	movne	r3, #1
    9030:	2300      	moveq	r3, #0
    9032:	b2da      	uxtb	r2, r3
    9034:	68fb      	ldr	r3, [r7, #12]
    9036:	741a      	strb	r2, [r3, #16]
	 return w;
    9038:	697b      	ldr	r3, [r7, #20]
	
}
    903a:	4618      	mov	r0, r3
    903c:	3718      	adds	r7, #24
    903e:	46bd      	mov	sp, r7
    9040:	bd80      	pop	{r7, pc}
    9042:	bf00      	nop
    9044:	0000b27d 	.word	0x0000b27d

00009048 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    9048:	b580      	push	{r7, lr}
    904a:	b086      	sub	sp, #24
    904c:	af00      	add	r7, sp, #0
    904e:	60f8      	str	r0, [r7, #12]
    9050:	60b9      	str	r1, [r7, #8]
    9052:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    9054:	68fb      	ldr	r3, [r7, #12]
    9056:	2201      	movs	r2, #1
    9058:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
    905a:	68fb      	ldr	r3, [r7, #12]
    905c:	689b      	ldr	r3, [r3, #8]
    905e:	687a      	ldr	r2, [r7, #4]
    9060:	b292      	uxth	r2, r2
    9062:	68b9      	ldr	r1, [r7, #8]
    9064:	4618      	mov	r0, r3
    9066:	4b08      	ldr	r3, [pc, #32]	; (9088 <_ZN13SPI_Syn_Class4readEPhl+0x40>)
    9068:	4798      	blx	r3
    906a:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    906c:	697b      	ldr	r3, [r7, #20]
    906e:	2b00      	cmp	r3, #0
    9070:	bf14      	ite	ne
    9072:	2301      	movne	r3, #1
    9074:	2300      	moveq	r3, #0
    9076:	b2da      	uxtb	r2, r3
    9078:	68fb      	ldr	r3, [r7, #12]
    907a:	745a      	strb	r2, [r3, #17]
	return  r;
    907c:	697b      	ldr	r3, [r7, #20]
}
    907e:	4618      	mov	r0, r3
    9080:	3718      	adds	r7, #24
    9082:	46bd      	mov	sp, r7
    9084:	bd80      	pop	{r7, pc}
    9086:	bf00      	nop
    9088:	0000b2ad 	.word	0x0000b2ad

0000908c <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    908c:	b580      	push	{r7, lr}
    908e:	b082      	sub	sp, #8
    9090:	af00      	add	r7, sp, #0
    9092:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	685b      	ldr	r3, [r3, #4]
    9098:	4618      	mov	r0, r3
    909a:	4b03      	ldr	r3, [pc, #12]	; (90a8 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
    909c:	4798      	blx	r3
	
}
    909e:	bf00      	nop
    90a0:	3708      	adds	r7, #8
    90a2:	46bd      	mov	sp, r7
    90a4:	bd80      	pop	{r7, pc}
    90a6:	bf00      	nop
    90a8:	00002c21 	.word	0x00002c21

000090ac <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
    90ac:	b480      	push	{r7}
    90ae:	b083      	sub	sp, #12
    90b0:	af00      	add	r7, sp, #0
    90b2:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	7c5b      	ldrb	r3, [r3, #17]
    90b8:	b2db      	uxtb	r3, r3
    90ba:	2b00      	cmp	r3, #0
    90bc:	d103      	bne.n	90c6 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
    90be:	687b      	ldr	r3, [r7, #4]
    90c0:	7c1b      	ldrb	r3, [r3, #16]
    90c2:	b2db      	uxtb	r3, r3
    90c4:	2b00      	cmp	r3, #0
    90c6:	687b      	ldr	r3, [r7, #4]
    90c8:	2201      	movs	r2, #1
    90ca:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	b2db      	uxtb	r3, r3
    90d2:	2b00      	cmp	r3, #0
    90d4:	d001      	beq.n	90da <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
    90d6:	2301      	movs	r3, #1
    90d8:	e000      	b.n	90dc <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
    90da:	2300      	movs	r3, #0
	}
	return ready;
	
}
    90dc:	4618      	mov	r0, r3
    90de:	370c      	adds	r7, #12
    90e0:	46bd      	mov	sp, r7
    90e2:	bc80      	pop	{r7}
    90e4:	4770      	bx	lr
	...

000090e8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    90e8:	b580      	push	{r7, lr}
    90ea:	b082      	sub	sp, #8
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
    90f0:	6039      	str	r1, [r7, #0]
    90f2:	687b      	ldr	r3, [r7, #4]
    90f4:	3308      	adds	r3, #8
    90f6:	4618      	mov	r0, r3
    90f8:	4b06      	ldr	r3, [pc, #24]	; (9114 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    90fa:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    90fc:	687b      	ldr	r3, [r7, #4]
    90fe:	683a      	ldr	r2, [r7, #0]
    9100:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
    9102:	4a05      	ldr	r2, [pc, #20]	; (9118 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    9108:	687b      	ldr	r3, [r7, #4]
    910a:	4618      	mov	r0, r3
    910c:	3708      	adds	r7, #8
    910e:	46bd      	mov	sp, r7
    9110:	bd80      	pop	{r7, pc}
    9112:	bf00      	nop
    9114:	0000b0ad 	.word	0x0000b0ad
    9118:	2000334c 	.word	0x2000334c

0000911c <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    911c:	b580      	push	{r7, lr}
    911e:	b082      	sub	sp, #8
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	3308      	adds	r3, #8
    9128:	4618      	mov	r0, r3
    912a:	4b03      	ldr	r3, [pc, #12]	; (9138 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    912c:	4798      	blx	r3
{
} //~AT24MAC_Class
    912e:	687b      	ldr	r3, [r7, #4]
    9130:	4618      	mov	r0, r3
    9132:	3708      	adds	r7, #8
    9134:	46bd      	mov	sp, r7
    9136:	bd80      	pop	{r7, pc}
    9138:	0000b0d5 	.word	0x0000b0d5

0000913c <_ZN13AT24MAC_Class4InitEv>:


void AT24MAC_Class::Init(void){
    913c:	b580      	push	{r7, lr}
    913e:	b082      	sub	sp, #8
    9140:	af00      	add	r7, sp, #0
    9142:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
    9144:	2156      	movs	r1, #86	; 0x56
    9146:	6878      	ldr	r0, [r7, #4]
    9148:	4b02      	ldr	r3, [pc, #8]	; (9154 <_ZN13AT24MAC_Class4InitEv+0x18>)
    914a:	4798      	blx	r3
}
    914c:	bf00      	nop
    914e:	3708      	adds	r7, #8
    9150:	46bd      	mov	sp, r7
    9152:	bd80      	pop	{r7, pc}
    9154:	00009159 	.word	0x00009159

00009158 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
    9158:	b580      	push	{r7, lr}
    915a:	b082      	sub	sp, #8
    915c:	af00      	add	r7, sp, #0
    915e:	6078      	str	r0, [r7, #4]
    9160:	460b      	mov	r3, r1
    9162:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
    9164:	687b      	ldr	r3, [r7, #4]
    9166:	78fa      	ldrb	r2, [r7, #3]
    9168:	761a      	strb	r2, [r3, #24]
	i2ca.set_descriptor(ptrI2CDescr);
    916a:	687b      	ldr	r3, [r7, #4]
    916c:	f103 0208 	add.w	r2, r3, #8
    9170:	687b      	ldr	r3, [r7, #4]
    9172:	685b      	ldr	r3, [r3, #4]
    9174:	4619      	mov	r1, r3
    9176:	4610      	mov	r0, r2
    9178:	4b0a      	ldr	r3, [pc, #40]	; (91a4 <_ZN13AT24MAC_Class4InitEh+0x4c>)
    917a:	4798      	blx	r3
	isReady=i2ca.init(addr)==0;
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	3308      	adds	r3, #8
    9180:	78fa      	ldrb	r2, [r7, #3]
    9182:	4611      	mov	r1, r2
    9184:	4618      	mov	r0, r3
    9186:	4b08      	ldr	r3, [pc, #32]	; (91a8 <_ZN13AT24MAC_Class4InitEh+0x50>)
    9188:	4798      	blx	r3
    918a:	4603      	mov	r3, r0
    918c:	2b00      	cmp	r3, #0
    918e:	bf0c      	ite	eq
    9190:	2301      	moveq	r3, #1
    9192:	2300      	movne	r3, #0
    9194:	b2da      	uxtb	r2, r3
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	701a      	strb	r2, [r3, #0]
}
    919a:	bf00      	nop
    919c:	3708      	adds	r7, #8
    919e:	46bd      	mov	sp, r7
    91a0:	bd80      	pop	{r7, pc}
    91a2:	bf00      	nop
    91a4:	0000b0e9 	.word	0x0000b0e9
    91a8:	0000b18d 	.word	0x0000b18d

000091ac <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca.write(array,2);
	while(!i2ca.txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
    91ac:	b580      	push	{r7, lr}
    91ae:	b08c      	sub	sp, #48	; 0x30
    91b0:	af00      	add	r7, sp, #0
    91b2:	60f8      	str	r0, [r7, #12]
    91b4:	60b9      	str	r1, [r7, #8]
    91b6:	4611      	mov	r1, r2
    91b8:	461a      	mov	r2, r3
    91ba:	460b      	mov	r3, r1
    91bc:	71fb      	strb	r3, [r7, #7]
    91be:	4613      	mov	r3, r2
    91c0:	71bb      	strb	r3, [r7, #6]
	
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value;
	uint32_t w;
	isReady=false;
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	2200      	movs	r2, #0
    91c6:	701a      	strb	r2, [r3, #0]
	array[0]=addr;
    91c8:	79fb      	ldrb	r3, [r7, #7]
    91ca:	743b      	strb	r3, [r7, #16]
	for (int i=1;i<size+1;i++)
    91cc:	2301      	movs	r3, #1
    91ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    91d0:	79bb      	ldrb	r3, [r7, #6]
    91d2:	1c5a      	adds	r2, r3, #1
    91d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91d6:	429a      	cmp	r2, r3
    91d8:	dd11      	ble.n	91fe <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x52>
	{
				
		value=*p;
    91da:	68bb      	ldr	r3, [r7, #8]
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		array[i]=value;
    91e2:	f107 0210 	add.w	r2, r7, #16
    91e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91e8:	4413      	add	r3, r2
    91ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    91ee:	701a      	strb	r2, [r3, #0]
	
		p++;
    91f0:	68bb      	ldr	r3, [r7, #8]
    91f2:	3301      	adds	r3, #1
    91f4:	60bb      	str	r3, [r7, #8]
	for (int i=1;i<size+1;i++)
    91f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91f8:	3301      	adds	r3, #1
    91fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    91fc:	e7e8      	b.n	91d0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x24>
	}
	w= i2ca.write(array,1+size);
    91fe:	68fb      	ldr	r3, [r7, #12]
    9200:	f103 0008 	add.w	r0, r3, #8
    9204:	79bb      	ldrb	r3, [r7, #6]
    9206:	b29b      	uxth	r3, r3
    9208:	3301      	adds	r3, #1
    920a:	b29a      	uxth	r2, r3
    920c:	f107 0310 	add.w	r3, r7, #16
    9210:	4619      	mov	r1, r3
    9212:	4b09      	ldr	r3, [pc, #36]	; (9238 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
    9214:	4798      	blx	r3
    9216:	4603      	mov	r3, r0
    9218:	627b      	str	r3, [r7, #36]	; 0x24
	while(!i2ca.txReady);
    921a:	68fb      	ldr	r3, [r7, #12]
    921c:	7a1b      	ldrb	r3, [r3, #8]
    921e:	b2db      	uxtb	r3, r3
    9220:	f083 0301 	eor.w	r3, r3, #1
    9224:	b2db      	uxtb	r3, r3
    9226:	2b00      	cmp	r3, #0
    9228:	d000      	beq.n	922c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x80>
    922a:	e7f6      	b.n	921a <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x6e>
	
	return	w;
    922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    922e:	4618      	mov	r0, r3
    9230:	3730      	adds	r7, #48	; 0x30
    9232:	46bd      	mov	sp, r7
    9234:	bd80      	pop	{r7, pc}
    9236:	bf00      	nop
    9238:	0000b1d5 	.word	0x0000b1d5

0000923c <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
    923c:	b580      	push	{r7, lr}
    923e:	b08c      	sub	sp, #48	; 0x30
    9240:	af00      	add	r7, sp, #0
    9242:	60f8      	str	r0, [r7, #12]
    9244:	60b9      	str	r1, [r7, #8]
    9246:	4611      	mov	r1, r2
    9248:	461a      	mov	r2, r3
    924a:	460b      	mov	r3, r1
    924c:	80fb      	strh	r3, [r7, #6]
    924e:	4613      	mov	r3, r2
    9250:	717b      	strb	r3, [r7, #5]
	
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	
	uint8_t array[2+AT24MAC_BUFFER_SIZE],value;
	uint32_t w;
	isReady=false;
    9252:	68fb      	ldr	r3, [r7, #12]
    9254:	2200      	movs	r2, #0
    9256:	701a      	strb	r2, [r3, #0]
	array[0]=(uint8_t)((addr&(0xff00))>>8);
    9258:	88fb      	ldrh	r3, [r7, #6]
    925a:	0a1b      	lsrs	r3, r3, #8
    925c:	b29b      	uxth	r3, r3
    925e:	b2db      	uxtb	r3, r3
    9260:	743b      	strb	r3, [r7, #16]
	array[1]=(uint8_t)(addr)&(0xff);
    9262:	88fb      	ldrh	r3, [r7, #6]
    9264:	b2db      	uxtb	r3, r3
    9266:	747b      	strb	r3, [r7, #17]
	for (int i=2;i<size+2;i++)
    9268:	2302      	movs	r3, #2
    926a:	62fb      	str	r3, [r7, #44]	; 0x2c
    926c:	797b      	ldrb	r3, [r7, #5]
    926e:	1c9a      	adds	r2, r3, #2
    9270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9272:	429a      	cmp	r2, r3
    9274:	dd11      	ble.n	929a <_ZN13AT24MAC_Class12WriteAddressEPhth+0x5e>
	{
		
		value=*p;
    9276:	68bb      	ldr	r3, [r7, #8]
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		array[i]=value;
    927e:	f107 0210 	add.w	r2, r7, #16
    9282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9284:	4413      	add	r3, r2
    9286:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    928a:	701a      	strb	r2, [r3, #0]
		
		p++;
    928c:	68bb      	ldr	r3, [r7, #8]
    928e:	3301      	adds	r3, #1
    9290:	60bb      	str	r3, [r7, #8]
	for (int i=2;i<size+2;i++)
    9292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9294:	3301      	adds	r3, #1
    9296:	62fb      	str	r3, [r7, #44]	; 0x2c
    9298:	e7e8      	b.n	926c <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>
	}
	w= i2ca.write(array,2+size);
    929a:	68fb      	ldr	r3, [r7, #12]
    929c:	f103 0008 	add.w	r0, r3, #8
    92a0:	797b      	ldrb	r3, [r7, #5]
    92a2:	b29b      	uxth	r3, r3
    92a4:	3302      	adds	r3, #2
    92a6:	b29a      	uxth	r2, r3
    92a8:	f107 0310 	add.w	r3, r7, #16
    92ac:	4619      	mov	r1, r3
    92ae:	4b09      	ldr	r3, [pc, #36]	; (92d4 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x98>)
    92b0:	4798      	blx	r3
    92b2:	4603      	mov	r3, r0
    92b4:	627b      	str	r3, [r7, #36]	; 0x24
	while(!i2ca.txReady);
    92b6:	68fb      	ldr	r3, [r7, #12]
    92b8:	7a1b      	ldrb	r3, [r3, #8]
    92ba:	b2db      	uxtb	r3, r3
    92bc:	f083 0301 	eor.w	r3, r3, #1
    92c0:	b2db      	uxtb	r3, r3
    92c2:	2b00      	cmp	r3, #0
    92c4:	d000      	beq.n	92c8 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x8c>
    92c6:	e7f6      	b.n	92b6 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x7a>
	
	return	w;
    92c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    92ca:	4618      	mov	r0, r3
    92cc:	3730      	adds	r7, #48	; 0x30
    92ce:	46bd      	mov	sp, r7
    92d0:	bd80      	pop	{r7, pc}
    92d2:	bf00      	nop
    92d4:	0000b1d5 	.word	0x0000b1d5

000092d8 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca.read(&value,1);
	while(!i2ca.rxReady);
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
    92d8:	b580      	push	{r7, lr}
    92da:	b086      	sub	sp, #24
    92dc:	af00      	add	r7, sp, #0
    92de:	60f8      	str	r0, [r7, #12]
    92e0:	60b9      	str	r1, [r7, #8]
    92e2:	4611      	mov	r1, r2
    92e4:	461a      	mov	r2, r3
    92e6:	460b      	mov	r3, r1
    92e8:	71fb      	strb	r3, [r7, #7]
    92ea:	4613      	mov	r3, r2
    92ec:	71bb      	strb	r3, [r7, #6]
	//i2ca.read_cmd(addr,&value);
	i2ca.write(&addr,1);
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	3308      	adds	r3, #8
    92f2:	1df9      	adds	r1, r7, #7
    92f4:	2201      	movs	r2, #1
    92f6:	4618      	mov	r0, r3
    92f8:	4b11      	ldr	r3, [pc, #68]	; (9340 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
    92fa:	4798      	blx	r3
	while(!i2ca.txReady);
    92fc:	68fb      	ldr	r3, [r7, #12]
    92fe:	7a1b      	ldrb	r3, [r3, #8]
    9300:	b2db      	uxtb	r3, r3
    9302:	f083 0301 	eor.w	r3, r3, #1
    9306:	b2db      	uxtb	r3, r3
    9308:	2b00      	cmp	r3, #0
    930a:	d000      	beq.n	930e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
    930c:	e7f6      	b.n	92fc <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	uint32_t r= i2ca.read(p,size);
    930e:	68fb      	ldr	r3, [r7, #12]
    9310:	3308      	adds	r3, #8
    9312:	79ba      	ldrb	r2, [r7, #6]
    9314:	b292      	uxth	r2, r2
    9316:	68b9      	ldr	r1, [r7, #8]
    9318:	4618      	mov	r0, r3
    931a:	4b0a      	ldr	r3, [pc, #40]	; (9344 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
    931c:	4798      	blx	r3
    931e:	4603      	mov	r3, r0
    9320:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
    9322:	68fb      	ldr	r3, [r7, #12]
    9324:	7a5b      	ldrb	r3, [r3, #9]
    9326:	b2db      	uxtb	r3, r3
    9328:	f083 0301 	eor.w	r3, r3, #1
    932c:	b2db      	uxtb	r3, r3
    932e:	2b00      	cmp	r3, #0
    9330:	d000      	beq.n	9334 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
    9332:	e7f6      	b.n	9322 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
	return r;
    9334:	697b      	ldr	r3, [r7, #20]
}
    9336:	4618      	mov	r0, r3
    9338:	3718      	adds	r7, #24
    933a:	46bd      	mov	sp, r7
    933c:	bd80      	pop	{r7, pc}
    933e:	bf00      	nop
    9340:	0000b1d5 	.word	0x0000b1d5
    9344:	0000b219 	.word	0x0000b219

00009348 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
    9348:	b580      	push	{r7, lr}
    934a:	b086      	sub	sp, #24
    934c:	af00      	add	r7, sp, #0
    934e:	60f8      	str	r0, [r7, #12]
    9350:	60b9      	str	r1, [r7, #8]
    9352:	4611      	mov	r1, r2
    9354:	461a      	mov	r2, r3
    9356:	460b      	mov	r3, r1
    9358:	80fb      	strh	r3, [r7, #6]
    935a:	4613      	mov	r3, r2
    935c:	717b      	strb	r3, [r7, #5]
	//i2ca.read_cmd(addr,&value);
	
	i2ca.write((uint8_t *)&addr,2);
    935e:	68fb      	ldr	r3, [r7, #12]
    9360:	3308      	adds	r3, #8
    9362:	1db9      	adds	r1, r7, #6
    9364:	2202      	movs	r2, #2
    9366:	4618      	mov	r0, r3
    9368:	4b11      	ldr	r3, [pc, #68]	; (93b0 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x68>)
    936a:	4798      	blx	r3
	while(!i2ca.txReady);
    936c:	68fb      	ldr	r3, [r7, #12]
    936e:	7a1b      	ldrb	r3, [r3, #8]
    9370:	b2db      	uxtb	r3, r3
    9372:	f083 0301 	eor.w	r3, r3, #1
    9376:	b2db      	uxtb	r3, r3
    9378:	2b00      	cmp	r3, #0
    937a:	d000      	beq.n	937e <_ZN13AT24MAC_Class11ReadAddressEPhth+0x36>
    937c:	e7f6      	b.n	936c <_ZN13AT24MAC_Class11ReadAddressEPhth+0x24>
	uint32_t r= i2ca.read(p,size);
    937e:	68fb      	ldr	r3, [r7, #12]
    9380:	3308      	adds	r3, #8
    9382:	797a      	ldrb	r2, [r7, #5]
    9384:	b292      	uxth	r2, r2
    9386:	68b9      	ldr	r1, [r7, #8]
    9388:	4618      	mov	r0, r3
    938a:	4b0a      	ldr	r3, [pc, #40]	; (93b4 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x6c>)
    938c:	4798      	blx	r3
    938e:	4603      	mov	r3, r0
    9390:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
    9392:	68fb      	ldr	r3, [r7, #12]
    9394:	7a5b      	ldrb	r3, [r3, #9]
    9396:	b2db      	uxtb	r3, r3
    9398:	f083 0301 	eor.w	r3, r3, #1
    939c:	b2db      	uxtb	r3, r3
    939e:	2b00      	cmp	r3, #0
    93a0:	d000      	beq.n	93a4 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x5c>
    93a2:	e7f6      	b.n	9392 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x4a>
	return r;
    93a4:	697b      	ldr	r3, [r7, #20]
}
    93a6:	4618      	mov	r0, r3
    93a8:	3718      	adds	r7, #24
    93aa:	46bd      	mov	sp, r7
    93ac:	bd80      	pop	{r7, pc}
    93ae:	bf00      	nop
    93b0:	0000b1d5 	.word	0x0000b1d5
    93b4:	0000b219 	.word	0x0000b219

000093b8 <_Z41__static_initialization_and_destruction_0ii>:
		isReady=false;
	}
	return isReady;	
}

    93b8:	b580      	push	{r7, lr}
    93ba:	b082      	sub	sp, #8
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
    93c0:	6039      	str	r1, [r7, #0]
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	2b01      	cmp	r3, #1
    93c6:	d10d      	bne.n	93e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    93c8:	683b      	ldr	r3, [r7, #0]
    93ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    93ce:	4293      	cmp	r3, r2
    93d0:	d108      	bne.n	93e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    93d2:	4906      	ldr	r1, [pc, #24]	; (93ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
    93d4:	4806      	ldr	r0, [pc, #24]	; (93f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    93d6:	4b07      	ldr	r3, [pc, #28]	; (93f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    93d8:	4798      	blx	r3
    93da:	4a07      	ldr	r2, [pc, #28]	; (93f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    93dc:	4907      	ldr	r1, [pc, #28]	; (93fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    93de:	4804      	ldr	r0, [pc, #16]	; (93f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    93e0:	4b07      	ldr	r3, [pc, #28]	; (9400 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    93e2:	4798      	blx	r3
    93e4:	bf00      	nop
    93e6:	3708      	adds	r7, #8
    93e8:	46bd      	mov	sp, r7
    93ea:	bd80      	pop	{r7, pc}
    93ec:	20003848 	.word	0x20003848
    93f0:	20003350 	.word	0x20003350
    93f4:	000090e9 	.word	0x000090e9
    93f8:	20000000 	.word	0x20000000
    93fc:	0000911d 	.word	0x0000911d
    9400:	0000b2dd 	.word	0x0000b2dd

00009404 <_GLOBAL__sub_I_ptrAT24MACClass>:
    9404:	b580      	push	{r7, lr}
    9406:	af00      	add	r7, sp, #0
    9408:	f64f 71ff 	movw	r1, #65535	; 0xffff
    940c:	2001      	movs	r0, #1
    940e:	4b01      	ldr	r3, [pc, #4]	; (9414 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    9410:	4798      	blx	r3
    9412:	bd80      	pop	{r7, pc}
    9414:	000093b9 	.word	0x000093b9

00009418 <hri_port_set_DIR_reg>:
{
    9418:	b480      	push	{r7}
    941a:	b085      	sub	sp, #20
    941c:	af00      	add	r7, sp, #0
    941e:	60f8      	str	r0, [r7, #12]
    9420:	460b      	mov	r3, r1
    9422:	607a      	str	r2, [r7, #4]
    9424:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    9426:	7afb      	ldrb	r3, [r7, #11]
    9428:	68fa      	ldr	r2, [r7, #12]
    942a:	01db      	lsls	r3, r3, #7
    942c:	4413      	add	r3, r2
    942e:	3308      	adds	r3, #8
    9430:	687a      	ldr	r2, [r7, #4]
    9432:	601a      	str	r2, [r3, #0]
}
    9434:	bf00      	nop
    9436:	3714      	adds	r7, #20
    9438:	46bd      	mov	sp, r7
    943a:	bc80      	pop	{r7}
    943c:	4770      	bx	lr

0000943e <hri_port_clear_DIR_reg>:
{
    943e:	b480      	push	{r7}
    9440:	b085      	sub	sp, #20
    9442:	af00      	add	r7, sp, #0
    9444:	60f8      	str	r0, [r7, #12]
    9446:	460b      	mov	r3, r1
    9448:	607a      	str	r2, [r7, #4]
    944a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    944c:	7afb      	ldrb	r3, [r7, #11]
    944e:	68fa      	ldr	r2, [r7, #12]
    9450:	01db      	lsls	r3, r3, #7
    9452:	4413      	add	r3, r2
    9454:	3304      	adds	r3, #4
    9456:	687a      	ldr	r2, [r7, #4]
    9458:	601a      	str	r2, [r3, #0]
}
    945a:	bf00      	nop
    945c:	3714      	adds	r7, #20
    945e:	46bd      	mov	sp, r7
    9460:	bc80      	pop	{r7}
    9462:	4770      	bx	lr

00009464 <hri_port_set_OUT_reg>:
{
    9464:	b480      	push	{r7}
    9466:	b085      	sub	sp, #20
    9468:	af00      	add	r7, sp, #0
    946a:	60f8      	str	r0, [r7, #12]
    946c:	460b      	mov	r3, r1
    946e:	607a      	str	r2, [r7, #4]
    9470:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9472:	7afb      	ldrb	r3, [r7, #11]
    9474:	68fa      	ldr	r2, [r7, #12]
    9476:	01db      	lsls	r3, r3, #7
    9478:	4413      	add	r3, r2
    947a:	3318      	adds	r3, #24
    947c:	687a      	ldr	r2, [r7, #4]
    947e:	601a      	str	r2, [r3, #0]
}
    9480:	bf00      	nop
    9482:	3714      	adds	r7, #20
    9484:	46bd      	mov	sp, r7
    9486:	bc80      	pop	{r7}
    9488:	4770      	bx	lr

0000948a <hri_port_clear_OUT_reg>:
{
    948a:	b480      	push	{r7}
    948c:	b085      	sub	sp, #20
    948e:	af00      	add	r7, sp, #0
    9490:	60f8      	str	r0, [r7, #12]
    9492:	460b      	mov	r3, r1
    9494:	607a      	str	r2, [r7, #4]
    9496:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9498:	7afb      	ldrb	r3, [r7, #11]
    949a:	68fa      	ldr	r2, [r7, #12]
    949c:	01db      	lsls	r3, r3, #7
    949e:	4413      	add	r3, r2
    94a0:	3314      	adds	r3, #20
    94a2:	687a      	ldr	r2, [r7, #4]
    94a4:	601a      	str	r2, [r3, #0]
}
    94a6:	bf00      	nop
    94a8:	3714      	adds	r7, #20
    94aa:	46bd      	mov	sp, r7
    94ac:	bc80      	pop	{r7}
    94ae:	4770      	bx	lr

000094b0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    94b0:	b480      	push	{r7}
    94b2:	b085      	sub	sp, #20
    94b4:	af00      	add	r7, sp, #0
    94b6:	6078      	str	r0, [r7, #4]
    94b8:	4608      	mov	r0, r1
    94ba:	4611      	mov	r1, r2
    94bc:	461a      	mov	r2, r3
    94be:	4603      	mov	r3, r0
    94c0:	70fb      	strb	r3, [r7, #3]
    94c2:	460b      	mov	r3, r1
    94c4:	70bb      	strb	r3, [r7, #2]
    94c6:	4613      	mov	r3, r2
    94c8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    94ca:	78fa      	ldrb	r2, [r7, #3]
    94cc:	78bb      	ldrb	r3, [r7, #2]
    94ce:	6879      	ldr	r1, [r7, #4]
    94d0:	01d2      	lsls	r2, r2, #7
    94d2:	440a      	add	r2, r1
    94d4:	4413      	add	r3, r2
    94d6:	3330      	adds	r3, #48	; 0x30
    94d8:	781b      	ldrb	r3, [r3, #0]
    94da:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    94dc:	7bfb      	ldrb	r3, [r7, #15]
    94de:	f023 030f 	bic.w	r3, r3, #15
    94e2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    94e4:	787b      	ldrb	r3, [r7, #1]
    94e6:	f003 030f 	and.w	r3, r3, #15
    94ea:	b2da      	uxtb	r2, r3
    94ec:	7bfb      	ldrb	r3, [r7, #15]
    94ee:	4313      	orrs	r3, r2
    94f0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    94f2:	78fa      	ldrb	r2, [r7, #3]
    94f4:	78bb      	ldrb	r3, [r7, #2]
    94f6:	6879      	ldr	r1, [r7, #4]
    94f8:	01d2      	lsls	r2, r2, #7
    94fa:	440a      	add	r2, r1
    94fc:	4413      	add	r3, r2
    94fe:	3330      	adds	r3, #48	; 0x30
    9500:	7bfa      	ldrb	r2, [r7, #15]
    9502:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    9504:	bf00      	nop
    9506:	3714      	adds	r7, #20
    9508:	46bd      	mov	sp, r7
    950a:	bc80      	pop	{r7}
    950c:	4770      	bx	lr

0000950e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    950e:	b480      	push	{r7}
    9510:	b085      	sub	sp, #20
    9512:	af00      	add	r7, sp, #0
    9514:	6078      	str	r0, [r7, #4]
    9516:	4608      	mov	r0, r1
    9518:	4611      	mov	r1, r2
    951a:	461a      	mov	r2, r3
    951c:	4603      	mov	r3, r0
    951e:	70fb      	strb	r3, [r7, #3]
    9520:	460b      	mov	r3, r1
    9522:	70bb      	strb	r3, [r7, #2]
    9524:	4613      	mov	r3, r2
    9526:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    9528:	78fa      	ldrb	r2, [r7, #3]
    952a:	78bb      	ldrb	r3, [r7, #2]
    952c:	6879      	ldr	r1, [r7, #4]
    952e:	01d2      	lsls	r2, r2, #7
    9530:	440a      	add	r2, r1
    9532:	4413      	add	r3, r2
    9534:	3330      	adds	r3, #48	; 0x30
    9536:	781b      	ldrb	r3, [r3, #0]
    9538:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    953a:	7bfb      	ldrb	r3, [r7, #15]
    953c:	f003 030f 	and.w	r3, r3, #15
    9540:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    9542:	787b      	ldrb	r3, [r7, #1]
    9544:	011b      	lsls	r3, r3, #4
    9546:	b2da      	uxtb	r2, r3
    9548:	7bfb      	ldrb	r3, [r7, #15]
    954a:	4313      	orrs	r3, r2
    954c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    954e:	78fa      	ldrb	r2, [r7, #3]
    9550:	78bb      	ldrb	r3, [r7, #2]
    9552:	6879      	ldr	r1, [r7, #4]
    9554:	01d2      	lsls	r2, r2, #7
    9556:	440a      	add	r2, r1
    9558:	4413      	add	r3, r2
    955a:	3330      	adds	r3, #48	; 0x30
    955c:	7bfa      	ldrb	r2, [r7, #15]
    955e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    9560:	bf00      	nop
    9562:	3714      	adds	r7, #20
    9564:	46bd      	mov	sp, r7
    9566:	bc80      	pop	{r7}
    9568:	4770      	bx	lr

0000956a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    956a:	b480      	push	{r7}
    956c:	b085      	sub	sp, #20
    956e:	af00      	add	r7, sp, #0
    9570:	6078      	str	r0, [r7, #4]
    9572:	4608      	mov	r0, r1
    9574:	4611      	mov	r1, r2
    9576:	461a      	mov	r2, r3
    9578:	4603      	mov	r3, r0
    957a:	70fb      	strb	r3, [r7, #3]
    957c:	460b      	mov	r3, r1
    957e:	70bb      	strb	r3, [r7, #2]
    9580:	4613      	mov	r3, r2
    9582:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    9584:	78fa      	ldrb	r2, [r7, #3]
    9586:	78bb      	ldrb	r3, [r7, #2]
    9588:	6879      	ldr	r1, [r7, #4]
    958a:	01d2      	lsls	r2, r2, #7
    958c:	440a      	add	r2, r1
    958e:	4413      	add	r3, r2
    9590:	3340      	adds	r3, #64	; 0x40
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    9596:	7bfb      	ldrb	r3, [r7, #15]
    9598:	f023 0301 	bic.w	r3, r3, #1
    959c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    959e:	787a      	ldrb	r2, [r7, #1]
    95a0:	7bfb      	ldrb	r3, [r7, #15]
    95a2:	4313      	orrs	r3, r2
    95a4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    95a6:	78fa      	ldrb	r2, [r7, #3]
    95a8:	78bb      	ldrb	r3, [r7, #2]
    95aa:	6879      	ldr	r1, [r7, #4]
    95ac:	01d2      	lsls	r2, r2, #7
    95ae:	440a      	add	r2, r1
    95b0:	4413      	add	r3, r2
    95b2:	3340      	adds	r3, #64	; 0x40
    95b4:	7bfa      	ldrb	r2, [r7, #15]
    95b6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    95b8:	bf00      	nop
    95ba:	3714      	adds	r7, #20
    95bc:	46bd      	mov	sp, r7
    95be:	bc80      	pop	{r7}
    95c0:	4770      	bx	lr

000095c2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    95c2:	b480      	push	{r7}
    95c4:	b085      	sub	sp, #20
    95c6:	af00      	add	r7, sp, #0
    95c8:	60f8      	str	r0, [r7, #12]
    95ca:	460b      	mov	r3, r1
    95cc:	607a      	str	r2, [r7, #4]
    95ce:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    95d0:	7afb      	ldrb	r3, [r7, #11]
    95d2:	68fa      	ldr	r2, [r7, #12]
    95d4:	01db      	lsls	r3, r3, #7
    95d6:	4413      	add	r3, r2
    95d8:	3328      	adds	r3, #40	; 0x28
    95da:	687a      	ldr	r2, [r7, #4]
    95dc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    95de:	bf00      	nop
    95e0:	3714      	adds	r7, #20
    95e2:	46bd      	mov	sp, r7
    95e4:	bc80      	pop	{r7}
    95e6:	4770      	bx	lr

000095e8 <_gpio_set_direction>:
{
    95e8:	b580      	push	{r7, lr}
    95ea:	b082      	sub	sp, #8
    95ec:	af00      	add	r7, sp, #0
    95ee:	4603      	mov	r3, r0
    95f0:	6039      	str	r1, [r7, #0]
    95f2:	71fb      	strb	r3, [r7, #7]
    95f4:	4613      	mov	r3, r2
    95f6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    95f8:	79bb      	ldrb	r3, [r7, #6]
    95fa:	2b01      	cmp	r3, #1
    95fc:	d01c      	beq.n	9638 <_gpio_set_direction+0x50>
    95fe:	2b02      	cmp	r3, #2
    9600:	d037      	beq.n	9672 <_gpio_set_direction+0x8a>
    9602:	2b00      	cmp	r3, #0
    9604:	d14e      	bne.n	96a4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    9606:	79fb      	ldrb	r3, [r7, #7]
    9608:	683a      	ldr	r2, [r7, #0]
    960a:	4619      	mov	r1, r3
    960c:	482a      	ldr	r0, [pc, #168]	; (96b8 <_gpio_set_direction+0xd0>)
    960e:	4b2b      	ldr	r3, [pc, #172]	; (96bc <_gpio_set_direction+0xd4>)
    9610:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    9612:	683b      	ldr	r3, [r7, #0]
    9614:	b29b      	uxth	r3, r3
    9616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    961a:	79fb      	ldrb	r3, [r7, #7]
    961c:	4619      	mov	r1, r3
    961e:	4826      	ldr	r0, [pc, #152]	; (96b8 <_gpio_set_direction+0xd0>)
    9620:	4b27      	ldr	r3, [pc, #156]	; (96c0 <_gpio_set_direction+0xd8>)
    9622:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    9624:	683b      	ldr	r3, [r7, #0]
    9626:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    9628:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    962c:	79fb      	ldrb	r3, [r7, #7]
    962e:	4619      	mov	r1, r3
    9630:	4821      	ldr	r0, [pc, #132]	; (96b8 <_gpio_set_direction+0xd0>)
    9632:	4b23      	ldr	r3, [pc, #140]	; (96c0 <_gpio_set_direction+0xd8>)
    9634:	4798      	blx	r3
		break;
    9636:	e03a      	b.n	96ae <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    9638:	79fb      	ldrb	r3, [r7, #7]
    963a:	683a      	ldr	r2, [r7, #0]
    963c:	4619      	mov	r1, r3
    963e:	481e      	ldr	r0, [pc, #120]	; (96b8 <_gpio_set_direction+0xd0>)
    9640:	4b1e      	ldr	r3, [pc, #120]	; (96bc <_gpio_set_direction+0xd4>)
    9642:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    9644:	683b      	ldr	r3, [r7, #0]
    9646:	b29b      	uxth	r3, r3
    9648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    964c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9650:	79f9      	ldrb	r1, [r7, #7]
    9652:	461a      	mov	r2, r3
    9654:	4818      	ldr	r0, [pc, #96]	; (96b8 <_gpio_set_direction+0xd0>)
    9656:	4b1a      	ldr	r3, [pc, #104]	; (96c0 <_gpio_set_direction+0xd8>)
    9658:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    965a:	683b      	ldr	r3, [r7, #0]
    965c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    965e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    9662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    9666:	79f9      	ldrb	r1, [r7, #7]
    9668:	461a      	mov	r2, r3
    966a:	4813      	ldr	r0, [pc, #76]	; (96b8 <_gpio_set_direction+0xd0>)
    966c:	4b14      	ldr	r3, [pc, #80]	; (96c0 <_gpio_set_direction+0xd8>)
    966e:	4798      	blx	r3
		break;
    9670:	e01d      	b.n	96ae <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    9672:	79fb      	ldrb	r3, [r7, #7]
    9674:	683a      	ldr	r2, [r7, #0]
    9676:	4619      	mov	r1, r3
    9678:	480f      	ldr	r0, [pc, #60]	; (96b8 <_gpio_set_direction+0xd0>)
    967a:	4b12      	ldr	r3, [pc, #72]	; (96c4 <_gpio_set_direction+0xdc>)
    967c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    967e:	683b      	ldr	r3, [r7, #0]
    9680:	b29b      	uxth	r3, r3
    9682:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    9686:	79fb      	ldrb	r3, [r7, #7]
    9688:	4619      	mov	r1, r3
    968a:	480b      	ldr	r0, [pc, #44]	; (96b8 <_gpio_set_direction+0xd0>)
    968c:	4b0c      	ldr	r3, [pc, #48]	; (96c0 <_gpio_set_direction+0xd8>)
    968e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    9690:	683b      	ldr	r3, [r7, #0]
    9692:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    9694:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    9698:	79fb      	ldrb	r3, [r7, #7]
    969a:	4619      	mov	r1, r3
    969c:	4806      	ldr	r0, [pc, #24]	; (96b8 <_gpio_set_direction+0xd0>)
    969e:	4b08      	ldr	r3, [pc, #32]	; (96c0 <_gpio_set_direction+0xd8>)
    96a0:	4798      	blx	r3
		break;
    96a2:	e004      	b.n	96ae <_gpio_set_direction+0xc6>
		ASSERT(false);
    96a4:	2246      	movs	r2, #70	; 0x46
    96a6:	4908      	ldr	r1, [pc, #32]	; (96c8 <_gpio_set_direction+0xe0>)
    96a8:	2000      	movs	r0, #0
    96aa:	4b08      	ldr	r3, [pc, #32]	; (96cc <_gpio_set_direction+0xe4>)
    96ac:	4798      	blx	r3
}
    96ae:	bf00      	nop
    96b0:	3708      	adds	r7, #8
    96b2:	46bd      	mov	sp, r7
    96b4:	bd80      	pop	{r7, pc}
    96b6:	bf00      	nop
    96b8:	41008000 	.word	0x41008000
    96bc:	0000943f 	.word	0x0000943f
    96c0:	000095c3 	.word	0x000095c3
    96c4:	00009419 	.word	0x00009419
    96c8:	0000ebd8 	.word	0x0000ebd8
    96cc:	00003565 	.word	0x00003565

000096d0 <_gpio_set_level>:
{
    96d0:	b580      	push	{r7, lr}
    96d2:	b082      	sub	sp, #8
    96d4:	af00      	add	r7, sp, #0
    96d6:	4603      	mov	r3, r0
    96d8:	6039      	str	r1, [r7, #0]
    96da:	71fb      	strb	r3, [r7, #7]
    96dc:	4613      	mov	r3, r2
    96de:	71bb      	strb	r3, [r7, #6]
	if (level) {
    96e0:	79bb      	ldrb	r3, [r7, #6]
    96e2:	2b00      	cmp	r3, #0
    96e4:	d006      	beq.n	96f4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    96e6:	79fb      	ldrb	r3, [r7, #7]
    96e8:	683a      	ldr	r2, [r7, #0]
    96ea:	4619      	mov	r1, r3
    96ec:	4806      	ldr	r0, [pc, #24]	; (9708 <_gpio_set_level+0x38>)
    96ee:	4b07      	ldr	r3, [pc, #28]	; (970c <_gpio_set_level+0x3c>)
    96f0:	4798      	blx	r3
}
    96f2:	e005      	b.n	9700 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    96f4:	79fb      	ldrb	r3, [r7, #7]
    96f6:	683a      	ldr	r2, [r7, #0]
    96f8:	4619      	mov	r1, r3
    96fa:	4803      	ldr	r0, [pc, #12]	; (9708 <_gpio_set_level+0x38>)
    96fc:	4b04      	ldr	r3, [pc, #16]	; (9710 <_gpio_set_level+0x40>)
    96fe:	4798      	blx	r3
}
    9700:	bf00      	nop
    9702:	3708      	adds	r7, #8
    9704:	46bd      	mov	sp, r7
    9706:	bd80      	pop	{r7, pc}
    9708:	41008000 	.word	0x41008000
    970c:	00009465 	.word	0x00009465
    9710:	0000948b 	.word	0x0000948b

00009714 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    9714:	b590      	push	{r4, r7, lr}
    9716:	b085      	sub	sp, #20
    9718:	af00      	add	r7, sp, #0
    971a:	6078      	str	r0, [r7, #4]
    971c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    971e:	687b      	ldr	r3, [r7, #4]
    9720:	095b      	lsrs	r3, r3, #5
    9722:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    9724:	687b      	ldr	r3, [r7, #4]
    9726:	b2db      	uxtb	r3, r3
    9728:	f003 031f 	and.w	r3, r3, #31
    972c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    972e:	683b      	ldr	r3, [r7, #0]
    9730:	f1b3 3fff 	cmp.w	r3, #4294967295
    9734:	d106      	bne.n	9744 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    9736:	7bba      	ldrb	r2, [r7, #14]
    9738:	7bf9      	ldrb	r1, [r7, #15]
    973a:	2300      	movs	r3, #0
    973c:	4812      	ldr	r0, [pc, #72]	; (9788 <_gpio_set_pin_function+0x74>)
    973e:	4c13      	ldr	r4, [pc, #76]	; (978c <_gpio_set_pin_function+0x78>)
    9740:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    9742:	e01d      	b.n	9780 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    9744:	7bba      	ldrb	r2, [r7, #14]
    9746:	7bf9      	ldrb	r1, [r7, #15]
    9748:	2301      	movs	r3, #1
    974a:	480f      	ldr	r0, [pc, #60]	; (9788 <_gpio_set_pin_function+0x74>)
    974c:	4c0f      	ldr	r4, [pc, #60]	; (978c <_gpio_set_pin_function+0x78>)
    974e:	47a0      	blx	r4
		if (pin & 1) {
    9750:	7bbb      	ldrb	r3, [r7, #14]
    9752:	f003 0301 	and.w	r3, r3, #1
    9756:	2b00      	cmp	r3, #0
    9758:	d009      	beq.n	976e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    975a:	7bbb      	ldrb	r3, [r7, #14]
    975c:	105b      	asrs	r3, r3, #1
    975e:	b2da      	uxtb	r2, r3
    9760:	683b      	ldr	r3, [r7, #0]
    9762:	b2db      	uxtb	r3, r3
    9764:	7bf9      	ldrb	r1, [r7, #15]
    9766:	4808      	ldr	r0, [pc, #32]	; (9788 <_gpio_set_pin_function+0x74>)
    9768:	4c09      	ldr	r4, [pc, #36]	; (9790 <_gpio_set_pin_function+0x7c>)
    976a:	47a0      	blx	r4
}
    976c:	e008      	b.n	9780 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    976e:	7bbb      	ldrb	r3, [r7, #14]
    9770:	105b      	asrs	r3, r3, #1
    9772:	b2da      	uxtb	r2, r3
    9774:	683b      	ldr	r3, [r7, #0]
    9776:	b2db      	uxtb	r3, r3
    9778:	7bf9      	ldrb	r1, [r7, #15]
    977a:	4803      	ldr	r0, [pc, #12]	; (9788 <_gpio_set_pin_function+0x74>)
    977c:	4c05      	ldr	r4, [pc, #20]	; (9794 <_gpio_set_pin_function+0x80>)
    977e:	47a0      	blx	r4
}
    9780:	bf00      	nop
    9782:	3714      	adds	r7, #20
    9784:	46bd      	mov	sp, r7
    9786:	bd90      	pop	{r4, r7, pc}
    9788:	41008000 	.word	0x41008000
    978c:	0000956b 	.word	0x0000956b
    9790:	0000950f 	.word	0x0000950f
    9794:	000094b1 	.word	0x000094b1

00009798 <gpio_set_pin_function>:
{
    9798:	b580      	push	{r7, lr}
    979a:	b082      	sub	sp, #8
    979c:	af00      	add	r7, sp, #0
    979e:	6078      	str	r0, [r7, #4]
    97a0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    97a2:	6839      	ldr	r1, [r7, #0]
    97a4:	6878      	ldr	r0, [r7, #4]
    97a6:	4b03      	ldr	r3, [pc, #12]	; (97b4 <gpio_set_pin_function+0x1c>)
    97a8:	4798      	blx	r3
}
    97aa:	bf00      	nop
    97ac:	3708      	adds	r7, #8
    97ae:	46bd      	mov	sp, r7
    97b0:	bd80      	pop	{r7, pc}
    97b2:	bf00      	nop
    97b4:	00009715 	.word	0x00009715

000097b8 <gpio_set_pin_direction>:
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	4603      	mov	r3, r0
    97c0:	460a      	mov	r2, r1
    97c2:	71fb      	strb	r3, [r7, #7]
    97c4:	4613      	mov	r3, r2
    97c6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    97c8:	79fb      	ldrb	r3, [r7, #7]
    97ca:	115b      	asrs	r3, r3, #5
    97cc:	b2d8      	uxtb	r0, r3
    97ce:	79fb      	ldrb	r3, [r7, #7]
    97d0:	f003 031f 	and.w	r3, r3, #31
    97d4:	2201      	movs	r2, #1
    97d6:	fa02 f303 	lsl.w	r3, r2, r3
    97da:	79ba      	ldrb	r2, [r7, #6]
    97dc:	4619      	mov	r1, r3
    97de:	4b03      	ldr	r3, [pc, #12]	; (97ec <gpio_set_pin_direction+0x34>)
    97e0:	4798      	blx	r3
}
    97e2:	bf00      	nop
    97e4:	3708      	adds	r7, #8
    97e6:	46bd      	mov	sp, r7
    97e8:	bd80      	pop	{r7, pc}
    97ea:	bf00      	nop
    97ec:	000095e9 	.word	0x000095e9

000097f0 <gpio_set_pin_level>:
{
    97f0:	b580      	push	{r7, lr}
    97f2:	b082      	sub	sp, #8
    97f4:	af00      	add	r7, sp, #0
    97f6:	4603      	mov	r3, r0
    97f8:	460a      	mov	r2, r1
    97fa:	71fb      	strb	r3, [r7, #7]
    97fc:	4613      	mov	r3, r2
    97fe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    9800:	79fb      	ldrb	r3, [r7, #7]
    9802:	115b      	asrs	r3, r3, #5
    9804:	b2d8      	uxtb	r0, r3
    9806:	79fb      	ldrb	r3, [r7, #7]
    9808:	f003 031f 	and.w	r3, r3, #31
    980c:	2201      	movs	r2, #1
    980e:	fa02 f303 	lsl.w	r3, r2, r3
    9812:	79ba      	ldrb	r2, [r7, #6]
    9814:	4619      	mov	r1, r3
    9816:	4b03      	ldr	r3, [pc, #12]	; (9824 <gpio_set_pin_level+0x34>)
    9818:	4798      	blx	r3
}
    981a:	bf00      	nop
    981c:	3708      	adds	r7, #8
    981e:	46bd      	mov	sp, r7
    9820:	bd80      	pop	{r7, pc}
    9822:	bf00      	nop
    9824:	000096d1 	.word	0x000096d1

00009828 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    9828:	b580      	push	{r7, lr}
    982a:	b082      	sub	sp, #8
    982c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    982e:	2100      	movs	r1, #0
    9830:	2008      	movs	r0, #8
    9832:	4b24      	ldr	r3, [pc, #144]	; (98c4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    9834:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    9836:	2100      	movs	r1, #0
    9838:	202b      	movs	r0, #43	; 0x2b
    983a:	4b22      	ldr	r3, [pc, #136]	; (98c4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    983c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    983e:	2100      	movs	r1, #0
    9840:	202a      	movs	r0, #42	; 0x2a
    9842:	4b20      	ldr	r3, [pc, #128]	; (98c4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    9844:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    9846:	2102      	movs	r1, #2
    9848:	2008      	movs	r0, #8
    984a:	4b1f      	ldr	r3, [pc, #124]	; (98c8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    984c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    984e:	2102      	movs	r1, #2
    9850:	202b      	movs	r0, #43	; 0x2b
    9852:	4b1d      	ldr	r3, [pc, #116]	; (98c8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    9854:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    9856:	2102      	movs	r1, #2
    9858:	202a      	movs	r0, #42	; 0x2a
    985a:	4b1b      	ldr	r3, [pc, #108]	; (98c8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    985c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    985e:	2101      	movs	r1, #1
    9860:	2008      	movs	r0, #8
    9862:	4b1a      	ldr	r3, [pc, #104]	; (98cc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    9864:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    9866:	2100      	movs	r1, #0
    9868:	202b      	movs	r0, #43	; 0x2b
    986a:	4b18      	ldr	r3, [pc, #96]	; (98cc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    986c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    986e:	2100      	movs	r1, #0
    9870:	202a      	movs	r0, #42	; 0x2a
    9872:	4b16      	ldr	r3, [pc, #88]	; (98cc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    9874:	4798      	blx	r3

	delay_us(1);
    9876:	2001      	movs	r0, #1
    9878:	4b15      	ldr	r3, [pc, #84]	; (98d0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    987a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    987c:	2300      	movs	r3, #0
    987e:	607b      	str	r3, [r7, #4]
    9880:	687b      	ldr	r3, [r7, #4]
    9882:	2b06      	cmp	r3, #6
    9884:	dc11      	bgt.n	98aa <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    9886:	2101      	movs	r1, #1
    9888:	202a      	movs	r0, #42	; 0x2a
    988a:	4b10      	ldr	r3, [pc, #64]	; (98cc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    988c:	4798      	blx	r3
		delay_us(1);
    988e:	2001      	movs	r0, #1
    9890:	4b0f      	ldr	r3, [pc, #60]	; (98d0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    9892:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    9894:	2100      	movs	r1, #0
    9896:	202a      	movs	r0, #42	; 0x2a
    9898:	4b0c      	ldr	r3, [pc, #48]	; (98cc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    989a:	4798      	blx	r3
		delay_us(1);
    989c:	2001      	movs	r0, #1
    989e:	4b0c      	ldr	r3, [pc, #48]	; (98d0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    98a0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    98a2:	687b      	ldr	r3, [r7, #4]
    98a4:	3301      	adds	r3, #1
    98a6:	607b      	str	r3, [r7, #4]
    98a8:	e7ea      	b.n	9880 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    98aa:	2101      	movs	r1, #1
    98ac:	202b      	movs	r0, #43	; 0x2b
    98ae:	4b07      	ldr	r3, [pc, #28]	; (98cc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    98b0:	4798      	blx	r3
	delay_us(1);
    98b2:	2001      	movs	r0, #1
    98b4:	4b06      	ldr	r3, [pc, #24]	; (98d0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    98b6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    98b8:	4b06      	ldr	r3, [pc, #24]	; (98d4 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    98ba:	4798      	blx	r3
}
    98bc:	bf00      	nop
    98be:	3708      	adds	r7, #8
    98c0:	46bd      	mov	sp, r7
    98c2:	bd80      	pop	{r7, pc}
    98c4:	00009799 	.word	0x00009799
    98c8:	000097b9 	.word	0x000097b9
    98cc:	000097f1 	.word	0x000097f1
    98d0:	000024fd 	.word	0x000024fd
    98d4:	000017b5 	.word	0x000017b5

000098d8 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
    98d8:	b480      	push	{r7}
    98da:	b083      	sub	sp, #12
    98dc:	af00      	add	r7, sp, #0
    98de:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    98e0:	687b      	ldr	r3, [r7, #4]
    98e2:	4618      	mov	r0, r3
    98e4:	370c      	adds	r7, #12
    98e6:	46bd      	mov	sp, r7
    98e8:	bc80      	pop	{r7}
    98ea:	4770      	bx	lr

000098ec <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    98ec:	b480      	push	{r7}
    98ee:	b083      	sub	sp, #12
    98f0:	af00      	add	r7, sp, #0
    98f2:	6078      	str	r0, [r7, #4]
    98f4:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    98f6:	687b      	ldr	r3, [r7, #4]
    98f8:	683a      	ldr	r2, [r7, #0]
    98fa:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	4a04      	ldr	r2, [pc, #16]	; (9910 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    9900:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	4618      	mov	r0, r3
    9908:	370c      	adds	r7, #12
    990a:	46bd      	mov	sp, r7
    990c:	bc80      	pop	{r7}
    990e:	4770      	bx	lr
    9910:	001fff00 	.word	0x001fff00

00009914 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    9914:	b480      	push	{r7}
    9916:	b083      	sub	sp, #12
    9918:	af00      	add	r7, sp, #0
    991a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    991c:	687b      	ldr	r3, [r7, #4]
    991e:	4618      	mov	r0, r3
    9920:	370c      	adds	r7, #12
    9922:	46bd      	mov	sp, r7
    9924:	bc80      	pop	{r7}
    9926:	4770      	bx	lr

00009928 <_ZN13N25Q256_Class4InitEv>:

void N25Q256_Class::Init(void){
    9928:	b580      	push	{r7, lr}
    992a:	b082      	sub	sp, #8
    992c:	af00      	add	r7, sp, #0
    992e:	6078      	str	r0, [r7, #4]
	xferDone=false;
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	2200      	movs	r2, #0
    9934:	701a      	strb	r2, [r3, #0]
	
	spi_nor_flash_init();
    9936:	6878      	ldr	r0, [r7, #4]
    9938:	4b02      	ldr	r3, [pc, #8]	; (9944 <_ZN13N25Q256_Class4InitEv+0x1c>)
    993a:	4798      	blx	r3
}
    993c:	bf00      	nop
    993e:	3708      	adds	r7, #8
    9940:	46bd      	mov	sp, r7
    9942:	bd80      	pop	{r7, pc}
    9944:	00009949 	.word	0x00009949

00009948 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    9948:	b590      	push	{r4, r7, lr}
    994a:	b083      	sub	sp, #12
    994c:	af00      	add	r7, sp, #0
    994e:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	685b      	ldr	r3, [r3, #4]
    9954:	4618      	mov	r0, r3
    9956:	4b08      	ldr	r3, [pc, #32]	; (9978 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    9958:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    995e:	2300      	movs	r3, #0
    9960:	4a06      	ldr	r2, [pc, #24]	; (997c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    9962:	4807      	ldr	r0, [pc, #28]	; (9980 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    9964:	4c07      	ldr	r4, [pc, #28]	; (9984 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    9966:	47a0      	blx	r4
    9968:	4602      	mov	r2, r0
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    9970:	bf00      	nop
    9972:	370c      	adds	r7, #12
    9974:	46bd      	mov	sp, r7
    9976:	bd90      	pop	{r4, r7, pc}
    9978:	000028e5 	.word	0x000028e5
    997c:	00009829 	.word	0x00009829
    9980:	20003370 	.word	0x20003370
    9984:	00006e25 	.word	0x00006e25

00009988 <_ZN13N25Q256_Class12WriteAddressEPhmm>:

uint32_t	N25Q256_Class::Write(uint8_t *p, uint32_t size){
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH,p, 0, size));
	return	w;
}
uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    9988:	b590      	push	{r4, r7, lr}
    998a:	b087      	sub	sp, #28
    998c:	af00      	add	r7, sp, #0
    998e:	60f8      	str	r0, [r7, #12]
    9990:	60b9      	str	r1, [r7, #8]
    9992:	607a      	str	r2, [r7, #4]
    9994:	603b      	str	r3, [r7, #0]
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    9996:	68fb      	ldr	r3, [r7, #12]
    9998:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    999c:	685b      	ldr	r3, [r3, #4]
    999e:	685c      	ldr	r4, [r3, #4]
    99a0:	68fb      	ldr	r3, [r7, #12]
    99a2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    99a6:	683b      	ldr	r3, [r7, #0]
    99a8:	687a      	ldr	r2, [r7, #4]
    99aa:	68b9      	ldr	r1, [r7, #8]
    99ac:	47a0      	blx	r4
    99ae:	4603      	mov	r3, r0
    99b0:	617b      	str	r3, [r7, #20]
	return	w;
    99b2:	697b      	ldr	r3, [r7, #20]
}
    99b4:	4618      	mov	r0, r3
    99b6:	371c      	adds	r7, #28
    99b8:	46bd      	mov	sp, r7
    99ba:	bd90      	pop	{r4, r7, pc}

000099bc <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    99bc:	b590      	push	{r4, r7, lr}
    99be:	b087      	sub	sp, #28
    99c0:	af00      	add	r7, sp, #0
    99c2:	60f8      	str	r0, [r7, #12]
    99c4:	60b9      	str	r1, [r7, #8]
    99c6:	607a      	str	r2, [r7, #4]
    99c8:	603b      	str	r3, [r7, #0]
	xferDone=false;
    99ca:	68fb      	ldr	r3, [r7, #12]
    99cc:	2200      	movs	r2, #0
    99ce:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    99d0:	68fb      	ldr	r3, [r7, #12]
    99d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    99d6:	685b      	ldr	r3, [r3, #4]
    99d8:	681c      	ldr	r4, [r3, #0]
    99da:	68fb      	ldr	r3, [r7, #12]
    99dc:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    99e0:	683b      	ldr	r3, [r7, #0]
    99e2:	687a      	ldr	r2, [r7, #4]
    99e4:	68b9      	ldr	r1, [r7, #8]
    99e6:	47a0      	blx	r4
    99e8:	4603      	mov	r3, r0
    99ea:	617b      	str	r3, [r7, #20]
	return	r;
    99ec:	697b      	ldr	r3, [r7, #20]
}
    99ee:	4618      	mov	r0, r3
    99f0:	371c      	adds	r7, #28
    99f2:	46bd      	mov	sp, r7
    99f4:	bd90      	pop	{r4, r7, pc}

000099f6 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
		uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
		uint8_t vcfg = n25q256a_read_reg(SPI_NOR_FLASH, width, N25Q_READ_STATUS_REGISTER);
		return	vcfg;
	
	}
uint32_t	N25Q256_Class::GetMemoryCapacity(){
    99f6:	b480      	push	{r7}
    99f8:	b083      	sub	sp, #12
    99fa:	af00      	add	r7, sp, #0
    99fc:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
    9a04:	4618      	mov	r0, r3
    9a06:	370c      	adds	r7, #12
    9a08:	46bd      	mov	sp, r7
    9a0a:	bc80      	pop	{r7}
    9a0c:	4770      	bx	lr
	...

00009a10 <_Z41__static_initialization_and_destruction_0ii>:
    9a10:	b580      	push	{r7, lr}
    9a12:	b082      	sub	sp, #8
    9a14:	af00      	add	r7, sp, #0
    9a16:	6078      	str	r0, [r7, #4]
    9a18:	6039      	str	r1, [r7, #0]
    9a1a:	687b      	ldr	r3, [r7, #4]
    9a1c:	2b01      	cmp	r3, #1
    9a1e:	d10d      	bne.n	9a3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    9a20:	683b      	ldr	r3, [r7, #0]
    9a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9a26:	4293      	cmp	r3, r2
    9a28:	d108      	bne.n	9a3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    9a2a:	4906      	ldr	r1, [pc, #24]	; (9a44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    9a2c:	4806      	ldr	r0, [pc, #24]	; (9a48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    9a2e:	4b07      	ldr	r3, [pc, #28]	; (9a4c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    9a30:	4798      	blx	r3
    9a32:	4a07      	ldr	r2, [pc, #28]	; (9a50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    9a34:	4907      	ldr	r1, [pc, #28]	; (9a54 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    9a36:	4804      	ldr	r0, [pc, #16]	; (9a48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    9a38:	4b07      	ldr	r3, [pc, #28]	; (9a58 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    9a3a:	4798      	blx	r3
    9a3c:	bf00      	nop
    9a3e:	3708      	adds	r7, #8
    9a40:	46bd      	mov	sp, r7
    9a42:	bd80      	pop	{r7, pc}
    9a44:	20003790 	.word	0x20003790
    9a48:	20003380 	.word	0x20003380
    9a4c:	000098ed 	.word	0x000098ed
    9a50:	20000000 	.word	0x20000000
    9a54:	00009915 	.word	0x00009915
    9a58:	0000b2dd 	.word	0x0000b2dd

00009a5c <_GLOBAL__sub_I_ptrN25Q256Class>:
    9a5c:	b580      	push	{r7, lr}
    9a5e:	af00      	add	r7, sp, #0
    9a60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9a64:	2001      	movs	r0, #1
    9a66:	4b01      	ldr	r3, [pc, #4]	; (9a6c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    9a68:	4798      	blx	r3
    9a6a:	bd80      	pop	{r7, pc}
    9a6c:	00009a11 	.word	0x00009a11

00009a70 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
    9a70:	b580      	push	{r7, lr}
    9a72:	b082      	sub	sp, #8
    9a74:	af00      	add	r7, sp, #0
    9a76:	6078      	str	r0, [r7, #4]
    9a78:	687b      	ldr	r3, [r7, #4]
    9a7a:	4618      	mov	r0, r3
    9a7c:	4b06      	ldr	r3, [pc, #24]	; (9a98 <_ZN14Calendar_ClassC1Ev+0x28>)
    9a7e:	4798      	blx	r3
    9a80:	4a06      	ldr	r2, [pc, #24]	; (9a9c <_ZN14Calendar_ClassC1Ev+0x2c>)
    9a82:	687b      	ldr	r3, [r7, #4]
    9a84:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
    9a86:	4a06      	ldr	r2, [pc, #24]	; (9aa0 <_ZN14Calendar_ClassC1Ev+0x30>)
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	4618      	mov	r0, r3
    9a90:	3708      	adds	r7, #8
    9a92:	46bd      	mov	sp, r7
    9a94:	bd80      	pop	{r7, pc}
    9a96:	bf00      	nop
    9a98:	0000a1d1 	.word	0x0000a1d1
    9a9c:	0000ec18 	.word	0x0000ec18
    9aa0:	20003590 	.word	0x20003590

00009aa4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    9aa4:	b580      	push	{r7, lr}
    9aa6:	b082      	sub	sp, #8
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	6078      	str	r0, [r7, #4]
    9aac:	6039      	str	r1, [r7, #0]
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	4618      	mov	r0, r3
    9ab2:	4b08      	ldr	r3, [pc, #32]	; (9ad4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    9ab4:	4798      	blx	r3
    9ab6:	4a08      	ldr	r2, [pc, #32]	; (9ad8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    9ab8:	687b      	ldr	r3, [r7, #4]
    9aba:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	683a      	ldr	r2, [r7, #0]
    9ac0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    9ac4:	4a05      	ldr	r2, [pc, #20]	; (9adc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	4618      	mov	r0, r3
    9ace:	3708      	adds	r7, #8
    9ad0:	46bd      	mov	sp, r7
    9ad2:	bd80      	pop	{r7, pc}
    9ad4:	0000a1d1 	.word	0x0000a1d1
    9ad8:	0000ec18 	.word	0x0000ec18
    9adc:	20003590 	.word	0x20003590

00009ae0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    9ae0:	b580      	push	{r7, lr}
    9ae2:	b082      	sub	sp, #8
    9ae4:	af00      	add	r7, sp, #0
    9ae6:	6078      	str	r0, [r7, #4]
    9ae8:	4a05      	ldr	r2, [pc, #20]	; (9b00 <_ZN14Calendar_ClassD1Ev+0x20>)
    9aea:	687b      	ldr	r3, [r7, #4]
    9aec:	601a      	str	r2, [r3, #0]
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	4618      	mov	r0, r3
    9af2:	4b04      	ldr	r3, [pc, #16]	; (9b04 <_ZN14Calendar_ClassD1Ev+0x24>)
    9af4:	4798      	blx	r3
{
} //~Calendar_Class
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	4618      	mov	r0, r3
    9afa:	3708      	adds	r7, #8
    9afc:	46bd      	mov	sp, r7
    9afe:	bd80      	pop	{r7, pc}
    9b00:	0000ec18 	.word	0x0000ec18
    9b04:	0000a1f1 	.word	0x0000a1f1

00009b08 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
    9b08:	b580      	push	{r7, lr}
    9b0a:	b082      	sub	sp, #8
    9b0c:	af00      	add	r7, sp, #0
    9b0e:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
    9b10:	687b      	ldr	r3, [r7, #4]
    9b12:	4a54      	ldr	r2, [pc, #336]	; (9c64 <_ZN14Calendar_Class4InitEv+0x15c>)
    9b14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
    9b18:	687b      	ldr	r3, [r7, #4]
    9b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    9b1e:	4618      	mov	r0, r3
    9b20:	4b51      	ldr	r3, [pc, #324]	; (9c68 <_ZN14Calendar_Class4InitEv+0x160>)
    9b22:	4798      	blx	r3
	ptrMemory->Init();
    9b24:	687b      	ldr	r3, [r7, #4]
    9b26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    9b2a:	4618      	mov	r0, r3
    9b2c:	4b4f      	ldr	r3, [pc, #316]	; (9c6c <_ZN14Calendar_Class4InitEv+0x164>)
    9b2e:	4798      	blx	r3
	InitMaxDate();
    9b30:	6878      	ldr	r0, [r7, #4]
    9b32:	4b4f      	ldr	r3, [pc, #316]	; (9c70 <_ZN14Calendar_Class4InitEv+0x168>)
    9b34:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	4618      	mov	r0, r3
    9b3a:	4b4e      	ldr	r3, [pc, #312]	; (9c74 <_ZN14Calendar_Class4InitEv+0x16c>)
    9b3c:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	681b      	ldr	r3, [r3, #0]
    9b42:	3304      	adds	r3, #4
    9b44:	681b      	ldr	r3, [r3, #0]
    9b46:	687a      	ldr	r2, [r7, #4]
    9b48:	3260      	adds	r2, #96	; 0x60
    9b4a:	4611      	mov	r1, r2
    9b4c:	6878      	ldr	r0, [r7, #4]
    9b4e:	4798      	blx	r3
    9b50:	4602      	mov	r2, r0
    9b52:	687b      	ldr	r3, [r7, #4]
    9b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	681b      	ldr	r3, [r3, #0]
    9b5c:	3304      	adds	r3, #4
    9b5e:	681b      	ldr	r3, [r3, #0]
    9b60:	687a      	ldr	r2, [r7, #4]
    9b62:	3268      	adds	r2, #104	; 0x68
    9b64:	4611      	mov	r1, r2
    9b66:	6878      	ldr	r0, [r7, #4]
    9b68:	4798      	blx	r3
    9b6a:	4602      	mov	r2, r0
    9b6c:	687b      	ldr	r3, [r7, #4]
    9b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
    9b72:	687b      	ldr	r3, [r7, #4]
    9b74:	681b      	ldr	r3, [r3, #0]
    9b76:	3304      	adds	r3, #4
    9b78:	681b      	ldr	r3, [r3, #0]
    9b7a:	687a      	ldr	r2, [r7, #4]
    9b7c:	3278      	adds	r2, #120	; 0x78
    9b7e:	4611      	mov	r1, r2
    9b80:	6878      	ldr	r0, [r7, #4]
    9b82:	4798      	blx	r3
    9b84:	4602      	mov	r2, r0
    9b86:	687b      	ldr	r3, [r7, #4]
    9b88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	3304      	adds	r3, #4
    9b92:	681b      	ldr	r3, [r3, #0]
    9b94:	687a      	ldr	r2, [r7, #4]
    9b96:	3280      	adds	r2, #128	; 0x80
    9b98:	4611      	mov	r1, r2
    9b9a:	6878      	ldr	r0, [r7, #4]
    9b9c:	4798      	blx	r3
    9b9e:	4602      	mov	r2, r0
    9ba0:	687b      	ldr	r3, [r7, #4]
    9ba2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	SetCompilationDateTime();
    9ba6:	6878      	ldr	r0, [r7, #4]
    9ba8:	4b33      	ldr	r3, [pc, #204]	; (9c78 <_ZN14Calendar_Class4InitEv+0x170>)
    9baa:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
    9bac:	687b      	ldr	r3, [r7, #4]
    9bae:	681b      	ldr	r3, [r3, #0]
    9bb0:	3304      	adds	r3, #4
    9bb2:	681b      	ldr	r3, [r3, #0]
    9bb4:	687a      	ldr	r2, [r7, #4]
    9bb6:	3270      	adds	r2, #112	; 0x70
    9bb8:	4611      	mov	r1, r2
    9bba:	6878      	ldr	r0, [r7, #4]
    9bbc:	4798      	blx	r3
    9bbe:	4602      	mov	r2, r0
    9bc0:	687b      	ldr	r3, [r7, #4]
    9bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    9bcc:	687b      	ldr	r3, [r7, #4]
    9bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9bd2:	429a      	cmp	r2, r3
    9bd4:	d80f      	bhi.n	9bf6 <_ZN14Calendar_Class4InitEv+0xee>
    9bd6:	687b      	ldr	r3, [r7, #4]
    9bd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    9bdc:	687b      	ldr	r3, [r7, #4]
    9bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9be2:	429a      	cmp	r2, r3
    9be4:	d007      	beq.n	9bf6 <_ZN14Calendar_Class4InitEv+0xee>
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    9bec:	687b      	ldr	r3, [r7, #4]
    9bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    9bf2:	429a      	cmp	r2, r3
    9bf4:	d106      	bne.n	9c04 <_ZN14Calendar_Class4InitEv+0xfc>
	{
		SetDateTime(&compilationDateTime);
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	3370      	adds	r3, #112	; 0x70
    9bfa:	4619      	mov	r1, r3
    9bfc:	6878      	ldr	r0, [r7, #4]
    9bfe:	4b1f      	ldr	r3, [pc, #124]	; (9c7c <_ZN14Calendar_Class4InitEv+0x174>)
    9c00:	4798      	blx	r3
    9c02:	e023      	b.n	9c4c <_ZN14Calendar_Class4InitEv+0x144>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
    9c04:	687b      	ldr	r3, [r7, #4]
    9c06:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    9c0a:	687b      	ldr	r3, [r7, #4]
    9c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    9c10:	429a      	cmp	r2, r3
    9c12:	d206      	bcs.n	9c22 <_ZN14Calendar_Class4InitEv+0x11a>
		{
			SetDateTime(&compilationDateTime);
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	3370      	adds	r3, #112	; 0x70
    9c18:	4619      	mov	r1, r3
    9c1a:	6878      	ldr	r0, [r7, #4]
    9c1c:	4b17      	ldr	r3, [pc, #92]	; (9c7c <_ZN14Calendar_Class4InitEv+0x174>)
    9c1e:	4798      	blx	r3
    9c20:	e014      	b.n	9c4c <_ZN14Calendar_Class4InitEv+0x144>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    9c2e:	429a      	cmp	r2, r3
    9c30:	d106      	bne.n	9c40 <_ZN14Calendar_Class4InitEv+0x138>
			{
				SetDateTime(&compilationDateTime);
    9c32:	687b      	ldr	r3, [r7, #4]
    9c34:	3370      	adds	r3, #112	; 0x70
    9c36:	4619      	mov	r1, r3
    9c38:	6878      	ldr	r0, [r7, #4]
    9c3a:	4b10      	ldr	r3, [pc, #64]	; (9c7c <_ZN14Calendar_Class4InitEv+0x174>)
    9c3c:	4798      	blx	r3
    9c3e:	e005      	b.n	9c4c <_ZN14Calendar_Class4InitEv+0x144>
			} 
			else
			{
				SetDateTime(&lastDateTime);
    9c40:	687b      	ldr	r3, [r7, #4]
    9c42:	3360      	adds	r3, #96	; 0x60
    9c44:	4619      	mov	r1, r3
    9c46:	6878      	ldr	r0, [r7, #4]
    9c48:	4b0c      	ldr	r3, [pc, #48]	; (9c7c <_ZN14Calendar_Class4InitEv+0x174>)
    9c4a:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
    9c4c:	687b      	ldr	r3, [r7, #4]
    9c4e:	2200      	movs	r2, #0
    9c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
    9c54:	687b      	ldr	r3, [r7, #4]
    9c56:	4618      	mov	r0, r3
    9c58:	4b09      	ldr	r3, [pc, #36]	; (9c80 <_ZN14Calendar_Class4InitEv+0x178>)
    9c5a:	4798      	blx	r3
	
}
    9c5c:	bf00      	nop
    9c5e:	3708      	adds	r7, #8
    9c60:	46bd      	mov	sp, r7
    9c62:	bd80      	pop	{r7, pc}
    9c64:	20003350 	.word	0x20003350
    9c68:	000022b9 	.word	0x000022b9
    9c6c:	0000913d 	.word	0x0000913d
    9c70:	00009c85 	.word	0x00009c85
    9c74:	0000a48d 	.word	0x0000a48d
    9c78:	00009d2b 	.word	0x00009d2b
    9c7c:	00009f21 	.word	0x00009f21
    9c80:	0000a41d 	.word	0x0000a41d

00009c84 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
    9c84:	b480      	push	{r7}
    9c86:	b083      	sub	sp, #12
    9c88:	af00      	add	r7, sp, #0
    9c8a:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
    9c8c:	687b      	ldr	r3, [r7, #4]
    9c8e:	f640 0202 	movw	r2, #2050	; 0x802
    9c92:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		maxDateTime.date.month = 12;
    9c96:	687b      	ldr	r3, [r7, #4]
    9c98:	220c      	movs	r2, #12
    9c9a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.date.day   = 31;
    9c9e:	687b      	ldr	r3, [r7, #4]
    9ca0:	221f      	movs	r2, #31
    9ca2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

		maxDateTime.time.hour = 12;
    9ca6:	687b      	ldr	r3, [r7, #4]
    9ca8:	220c      	movs	r2, #12
    9caa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		maxDateTime.time.min  = 59;
    9cae:	687b      	ldr	r3, [r7, #4]
    9cb0:	223b      	movs	r2, #59	; 0x3b
    9cb2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		maxDateTime.time.sec  = 59;
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	223b      	movs	r2, #59	; 0x3b
    9cba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		
		erasedDateTime.date.year  =0xffff;
    9cbe:	687b      	ldr	r3, [r7, #4]
    9cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9cc4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.date.month = 0xff;
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	22ff      	movs	r2, #255	; 0xff
    9ccc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.date.day   = 0xff;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	22ff      	movs	r2, #255	; 0xff
    9cd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

		erasedDateTime.time.hour = 0xff;
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	22ff      	movs	r2, #255	; 0xff
    9cdc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		erasedDateTime.time.min  = 0xff;
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	22ff      	movs	r2, #255	; 0xff
    9ce4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		erasedDateTime.time.sec  = 0xff;
    9ce8:	687b      	ldr	r3, [r7, #4]
    9cea:	22ff      	movs	r2, #255	; 0xff
    9cec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		
		nullDateTime.date.year  = 0x0;
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	2200      	movs	r2, #0
    9cf4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		nullDateTime.date.month = 0x0;
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	2200      	movs	r2, #0
    9cfc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.date.day   = 0x0;
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	2200      	movs	r2, #0
    9d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		nullDateTime.time.hour = 0x0;
    9d08:	687b      	ldr	r3, [r7, #4]
    9d0a:	2200      	movs	r2, #0
    9d0c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		nullDateTime.time.min  = 0x0;
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	2200      	movs	r2, #0
    9d14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		nullDateTime.time.sec  = 0x0;
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	2200      	movs	r2, #0
    9d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}
    9d20:	bf00      	nop
    9d22:	370c      	adds	r7, #12
    9d24:	46bd      	mov	sp, r7
    9d26:	bc80      	pop	{r7}
    9d28:	4770      	bx	lr

00009d2a <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
    9d2a:	b480      	push	{r7}
    9d2c:	b083      	sub	sp, #12
    9d2e:	af00      	add	r7, sp, #0
    9d30:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
    9d32:	2332      	movs	r3, #50	; 0x32
    9d34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9d38:	4613      	mov	r3, r2
    9d3a:	009b      	lsls	r3, r3, #2
    9d3c:	4413      	add	r3, r2
    9d3e:	005b      	lsls	r3, r3, #1
    9d40:	461a      	mov	r2, r3
    9d42:	2330      	movs	r3, #48	; 0x30
    9d44:	3b30      	subs	r3, #48	; 0x30
    9d46:	441a      	add	r2, r3
    9d48:	4613      	mov	r3, r2
    9d4a:	009b      	lsls	r3, r3, #2
    9d4c:	4413      	add	r3, r2
    9d4e:	005b      	lsls	r3, r3, #1
    9d50:	461a      	mov	r2, r3
    9d52:	2332      	movs	r3, #50	; 0x32
    9d54:	3b30      	subs	r3, #48	; 0x30
    9d56:	4413      	add	r3, r2
    9d58:	b29b      	uxth	r3, r3
    9d5a:	461a      	mov	r2, r3
    9d5c:	0092      	lsls	r2, r2, #2
    9d5e:	4413      	add	r3, r2
    9d60:	005b      	lsls	r3, r3, #1
    9d62:	b29a      	uxth	r2, r3
    9d64:	2330      	movs	r3, #48	; 0x30
    9d66:	b29b      	uxth	r3, r3
    9d68:	4413      	add	r3, r2
    9d6a:	b29b      	uxth	r3, r3
    9d6c:	3b30      	subs	r3, #48	; 0x30
    9d6e:	b29a      	uxth	r2, r3
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
    9d76:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9d78:	2b6e      	cmp	r3, #110	; 0x6e
    9d7a:	d106      	bne.n	9d8a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
    9d7c:	2375      	movs	r3, #117	; 0x75
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9d7e:	2b61      	cmp	r3, #97	; 0x61
    9d80:	d101      	bne.n	9d86 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
    9d82:	2301      	movs	r3, #1
    9d84:	e02f      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9d86:	2306      	movs	r3, #6
    9d88:	e02d      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
    9d8a:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9d8c:	2b62      	cmp	r3, #98	; 0x62
    9d8e:	d029      	beq.n	9de4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
    9d90:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9d92:	2b72      	cmp	r3, #114	; 0x72
    9d94:	d106      	bne.n	9da4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
    9d96:	234a      	movs	r3, #74	; 0x4a
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9d98:	2b4d      	cmp	r3, #77	; 0x4d
    9d9a:	d101      	bne.n	9da0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
    9d9c:	2303      	movs	r3, #3
    9d9e:	e022      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9da0:	2304      	movs	r3, #4
    9da2:	e020      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
    9da4:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9da6:	2b79      	cmp	r3, #121	; 0x79
    9da8:	d01a      	beq.n	9de0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
    9daa:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9dac:	2b6c      	cmp	r3, #108	; 0x6c
    9dae:	d015      	beq.n	9ddc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
    9db0:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9db2:	2b67      	cmp	r3, #103	; 0x67
    9db4:	d010      	beq.n	9dd8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
    9db6:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9db8:	2b70      	cmp	r3, #112	; 0x70
    9dba:	d00b      	beq.n	9dd4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
    9dbc:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    9dbe:	2b74      	cmp	r3, #116	; 0x74
    9dc0:	d006      	beq.n	9dd0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
    9dc2:	236c      	movs	r3, #108	; 0x6c
    9dc4:	2b76      	cmp	r3, #118	; 0x76
    9dc6:	d101      	bne.n	9dcc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
    9dc8:	230b      	movs	r3, #11
    9dca:	e00c      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9dcc:	230c      	movs	r3, #12
    9dce:	e00a      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9dd0:	230a      	movs	r3, #10
    9dd2:	e008      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9dd4:	2309      	movs	r3, #9
    9dd6:	e006      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9dd8:	2308      	movs	r3, #8
    9dda:	e004      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9ddc:	2307      	movs	r3, #7
    9dde:	e002      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9de0:	2305      	movs	r3, #5
    9de2:	e000      	b.n	9de6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    9de4:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
    9de6:	687a      	ldr	r2, [r7, #4]
    9de8:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
    9dec:	2331      	movs	r3, #49	; 0x31
    9dee:	2b20      	cmp	r3, #32
    9df0:	d008      	beq.n	9e04 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
    9df2:	2331      	movs	r3, #49	; 0x31
    9df4:	3b30      	subs	r3, #48	; 0x30
    9df6:	b2db      	uxtb	r3, r3
    9df8:	461a      	mov	r2, r3
    9dfa:	0092      	lsls	r2, r2, #2
    9dfc:	4413      	add	r3, r2
    9dfe:	005b      	lsls	r3, r3, #1
    9e00:	b2db      	uxtb	r3, r3
    9e02:	e000      	b.n	9e06 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
    9e04:	2300      	movs	r3, #0
    9e06:	2233      	movs	r2, #51	; 0x33
    9e08:	4413      	add	r3, r2
    9e0a:	b2db      	uxtb	r3, r3
    9e0c:	3b30      	subs	r3, #48	; 0x30
    9e0e:	b2da      	uxtb	r2, r3
    9e10:	687b      	ldr	r3, [r7, #4]
    9e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
    9e16:	2331      	movs	r3, #49	; 0x31
    9e18:	3b30      	subs	r3, #48	; 0x30
    9e1a:	b2db      	uxtb	r3, r3
    9e1c:	461a      	mov	r2, r3
    9e1e:	0092      	lsls	r2, r2, #2
    9e20:	4413      	add	r3, r2
    9e22:	005b      	lsls	r3, r3, #1
    9e24:	b2db      	uxtb	r3, r3
    9e26:	2230      	movs	r2, #48	; 0x30
    9e28:	4413      	add	r3, r2
    9e2a:	b2db      	uxtb	r3, r3
    9e2c:	3b30      	subs	r3, #48	; 0x30
    9e2e:	b2da      	uxtb	r2, r3
    9e30:	687b      	ldr	r3, [r7, #4]
    9e32:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
    9e36:	2335      	movs	r3, #53	; 0x35
    9e38:	3b30      	subs	r3, #48	; 0x30
    9e3a:	b2db      	uxtb	r3, r3
    9e3c:	461a      	mov	r2, r3
    9e3e:	0092      	lsls	r2, r2, #2
    9e40:	4413      	add	r3, r2
    9e42:	005b      	lsls	r3, r3, #1
    9e44:	b2db      	uxtb	r3, r3
    9e46:	2238      	movs	r2, #56	; 0x38
    9e48:	4413      	add	r3, r2
    9e4a:	b2db      	uxtb	r3, r3
    9e4c:	3b30      	subs	r3, #48	; 0x30
    9e4e:	b2da      	uxtb	r2, r3
    9e50:	687b      	ldr	r3, [r7, #4]
    9e52:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
    9e56:	2331      	movs	r3, #49	; 0x31
    9e58:	3b30      	subs	r3, #48	; 0x30
    9e5a:	b2db      	uxtb	r3, r3
    9e5c:	461a      	mov	r2, r3
    9e5e:	0092      	lsls	r2, r2, #2
    9e60:	4413      	add	r3, r2
    9e62:	005b      	lsls	r3, r3, #1
    9e64:	b2db      	uxtb	r3, r3
    9e66:	2233      	movs	r2, #51	; 0x33
    9e68:	4413      	add	r3, r2
    9e6a:	b2db      	uxtb	r3, r3
    9e6c:	3b30      	subs	r3, #48	; 0x30
    9e6e:	b2da      	uxtb	r2, r3
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	}
    9e76:	bf00      	nop
    9e78:	370c      	adds	r7, #12
    9e7a:	46bd      	mov	sp, r7
    9e7c:	bc80      	pop	{r7}
    9e7e:	4770      	bx	lr

00009e80 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    9e80:	b580      	push	{r7, lr}
    9e82:	b082      	sub	sp, #8
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
    9e88:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    9e90:	6839      	ldr	r1, [r7, #0]
    9e92:	4618      	mov	r0, r3
    9e94:	4b03      	ldr	r3, [pc, #12]	; (9ea4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    9e96:	4798      	blx	r3
    9e98:	4603      	mov	r3, r0
}
    9e9a:	4618      	mov	r0, r3
    9e9c:	3708      	adds	r7, #8
    9e9e:	46bd      	mov	sp, r7
    9ea0:	bd80      	pop	{r7, pc}
    9ea2:	bf00      	nop
    9ea4:	000023b5 	.word	0x000023b5

00009ea8 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    9ea8:	b480      	push	{r7}
    9eaa:	b083      	sub	sp, #12
    9eac:	af00      	add	r7, sp, #0
    9eae:	6078      	str	r0, [r7, #4]
    9eb0:	460b      	mov	r3, r1
    9eb2:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    9eb4:	887b      	ldrh	r3, [r7, #2]
    9eb6:	f003 0303 	and.w	r3, r3, #3
    9eba:	2b00      	cmp	r3, #0
    9ebc:	d001      	beq.n	9ec2 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    9ebe:	2300      	movs	r3, #0
    9ec0:	e000      	b.n	9ec4 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    9ec2:	2301      	movs	r3, #1
	}
}
    9ec4:	4618      	mov	r0, r3
    9ec6:	370c      	adds	r7, #12
    9ec8:	46bd      	mov	sp, r7
    9eca:	bc80      	pop	{r7}
    9ecc:	4770      	bx	lr
	...

00009ed0 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
    9ed0:	b580      	push	{r7, lr}
    9ed2:	b082      	sub	sp, #8
    9ed4:	af00      	add	r7, sp, #0
    9ed6:	6078      	str	r0, [r7, #4]
    9ed8:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
    9eda:	687b      	ldr	r3, [r7, #4]
    9edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    9ee0:	6839      	ldr	r1, [r7, #0]
    9ee2:	4618      	mov	r0, r3
    9ee4:	4b03      	ldr	r3, [pc, #12]	; (9ef4 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
    9ee6:	4798      	blx	r3
    9ee8:	4603      	mov	r3, r0
}
    9eea:	4618      	mov	r0, r3
    9eec:	3708      	adds	r7, #8
    9eee:	46bd      	mov	sp, r7
    9ef0:	bd80      	pop	{r7, pc}
    9ef2:	bf00      	nop
    9ef4:	000022e5 	.word	0x000022e5

00009ef8 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
    9ef8:	b580      	push	{r7, lr}
    9efa:	b082      	sub	sp, #8
    9efc:	af00      	add	r7, sp, #0
    9efe:	6078      	str	r0, [r7, #4]
    9f00:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    9f08:	6839      	ldr	r1, [r7, #0]
    9f0a:	4618      	mov	r0, r3
    9f0c:	4b03      	ldr	r3, [pc, #12]	; (9f1c <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
    9f0e:	4798      	blx	r3
    9f10:	4603      	mov	r3, r0
}
    9f12:	4618      	mov	r0, r3
    9f14:	3708      	adds	r7, #8
    9f16:	46bd      	mov	sp, r7
    9f18:	bd80      	pop	{r7, pc}
    9f1a:	bf00      	nop
    9f1c:	0000234d 	.word	0x0000234d

00009f20 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
    9f20:	b580      	push	{r7, lr}
    9f22:	b084      	sub	sp, #16
    9f24:	af00      	add	r7, sp, #0
    9f26:	6078      	str	r0, [r7, #4]
    9f28:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
    9f2a:	683a      	ldr	r2, [r7, #0]
    9f2c:	f107 030c 	add.w	r3, r7, #12
    9f30:	3204      	adds	r2, #4
    9f32:	6810      	ldr	r0, [r2, #0]
    9f34:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
    9f36:	f107 030c 	add.w	r3, r7, #12
    9f3a:	4619      	mov	r1, r3
    9f3c:	6878      	ldr	r0, [r7, #4]
    9f3e:	4b0a      	ldr	r3, [pc, #40]	; (9f68 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
    9f40:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
    9f42:	683a      	ldr	r2, [r7, #0]
    9f44:	f107 0308 	add.w	r3, r7, #8
    9f48:	8811      	ldrh	r1, [r2, #0]
    9f4a:	7892      	ldrb	r2, [r2, #2]
    9f4c:	8019      	strh	r1, [r3, #0]
    9f4e:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
    9f50:	f107 0308 	add.w	r3, r7, #8
    9f54:	4619      	mov	r1, r3
    9f56:	6878      	ldr	r0, [r7, #4]
    9f58:	4b04      	ldr	r3, [pc, #16]	; (9f6c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
    9f5a:	4798      	blx	r3
    9f5c:	4603      	mov	r3, r0
			
}
    9f5e:	4618      	mov	r0, r3
    9f60:	3710      	adds	r7, #16
    9f62:	46bd      	mov	sp, r7
    9f64:	bd80      	pop	{r7, pc}
    9f66:	bf00      	nop
    9f68:	00009ef9 	.word	0x00009ef9
    9f6c:	00009ed1 	.word	0x00009ed1

00009f70 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    9f70:	b580      	push	{r7, lr}
    9f72:	b086      	sub	sp, #24
    9f74:	af00      	add	r7, sp, #0
    9f76:	6078      	str	r0, [r7, #4]
    9f78:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    9f7a:	2300      	movs	r3, #0
    9f7c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    9f7e:	2300      	movs	r3, #0
    9f80:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    9f82:	683b      	ldr	r3, [r7, #0]
    9f84:	88db      	ldrh	r3, [r3, #6]
    9f86:	b2da      	uxtb	r2, r3
    9f88:	687b      	ldr	r3, [r7, #4]
    9f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    9f8e:	699b      	ldr	r3, [r3, #24]
    9f90:	b2db      	uxtb	r3, r3
    9f92:	1ad3      	subs	r3, r2, r3
    9f94:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    9f96:	683b      	ldr	r3, [r7, #0]
    9f98:	795b      	ldrb	r3, [r3, #5]
    9f9a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    9f9c:	683b      	ldr	r3, [r7, #0]
    9f9e:	791b      	ldrb	r3, [r3, #4]
    9fa0:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    9fa2:	683b      	ldr	r3, [r7, #0]
    9fa4:	789b      	ldrb	r3, [r3, #2]
    9fa6:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    9fa8:	683b      	ldr	r3, [r7, #0]
    9faa:	785b      	ldrb	r3, [r3, #1]
    9fac:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    9fae:	683b      	ldr	r3, [r7, #0]
    9fb0:	781b      	ldrb	r3, [r3, #0]
    9fb2:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    9fb4:	2300      	movs	r3, #0
    9fb6:	613b      	str	r3, [r7, #16]
    9fb8:	7bfa      	ldrb	r2, [r7, #15]
    9fba:	693b      	ldr	r3, [r7, #16]
    9fbc:	429a      	cmp	r2, r3
    9fbe:	d91e      	bls.n	9ffe <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    9fc6:	699b      	ldr	r3, [r3, #24]
    9fc8:	b29a      	uxth	r2, r3
    9fca:	693b      	ldr	r3, [r7, #16]
    9fcc:	b29b      	uxth	r3, r3
    9fce:	4413      	add	r3, r2
    9fd0:	b29b      	uxth	r3, r3
    9fd2:	4619      	mov	r1, r3
    9fd4:	6878      	ldr	r0, [r7, #4]
    9fd6:	4b27      	ldr	r3, [pc, #156]	; (a074 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    9fd8:	4798      	blx	r3
    9fda:	4603      	mov	r3, r0
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d006      	beq.n	9fee <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    9fe0:	697b      	ldr	r3, [r7, #20]
    9fe2:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    9fe6:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    9fea:	617b      	str	r3, [r7, #20]
    9fec:	e003      	b.n	9ff6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    9fee:	697a      	ldr	r2, [r7, #20]
    9ff0:	4b21      	ldr	r3, [pc, #132]	; (a078 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    9ff2:	4413      	add	r3, r2
    9ff4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    9ff6:	693b      	ldr	r3, [r7, #16]
    9ff8:	3301      	adds	r3, #1
    9ffa:	613b      	str	r3, [r7, #16]
    9ffc:	e7dc      	b.n	9fb8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    9ffe:	2301      	movs	r3, #1
    a000:	613b      	str	r3, [r7, #16]
    a002:	7bba      	ldrb	r2, [r7, #14]
    a004:	693b      	ldr	r3, [r7, #16]
    a006:	429a      	cmp	r2, r3
    a008:	d910      	bls.n	a02c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    a00a:	683b      	ldr	r3, [r7, #0]
    a00c:	88db      	ldrh	r3, [r3, #6]
    a00e:	4619      	mov	r1, r3
    a010:	693b      	ldr	r3, [r7, #16]
    a012:	b2db      	uxtb	r3, r3
    a014:	461a      	mov	r2, r3
    a016:	6878      	ldr	r0, [r7, #4]
    a018:	4b18      	ldr	r3, [pc, #96]	; (a07c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    a01a:	4798      	blx	r3
    a01c:	4602      	mov	r2, r0
    a01e:	697b      	ldr	r3, [r7, #20]
    a020:	4413      	add	r3, r2
    a022:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    a024:	693b      	ldr	r3, [r7, #16]
    a026:	3301      	adds	r3, #1
    a028:	613b      	str	r3, [r7, #16]
    a02a:	e7ea      	b.n	a002 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    a02c:	7b7b      	ldrb	r3, [r7, #13]
    a02e:	3b01      	subs	r3, #1
    a030:	4a13      	ldr	r2, [pc, #76]	; (a080 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    a032:	fb02 f303 	mul.w	r3, r2, r3
    a036:	461a      	mov	r2, r3
    a038:	697b      	ldr	r3, [r7, #20]
    a03a:	4413      	add	r3, r2
    a03c:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    a03e:	7b3b      	ldrb	r3, [r7, #12]
    a040:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    a044:	fb02 f303 	mul.w	r3, r2, r3
    a048:	461a      	mov	r2, r3
    a04a:	697b      	ldr	r3, [r7, #20]
    a04c:	4413      	add	r3, r2
    a04e:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    a050:	7afa      	ldrb	r2, [r7, #11]
    a052:	4613      	mov	r3, r2
    a054:	011b      	lsls	r3, r3, #4
    a056:	1a9b      	subs	r3, r3, r2
    a058:	009b      	lsls	r3, r3, #2
    a05a:	461a      	mov	r2, r3
    a05c:	697b      	ldr	r3, [r7, #20]
    a05e:	4413      	add	r3, r2
    a060:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    a062:	7abb      	ldrb	r3, [r7, #10]
    a064:	697a      	ldr	r2, [r7, #20]
    a066:	4413      	add	r3, r2
    a068:	617b      	str	r3, [r7, #20]

	return tmp;
    a06a:	697b      	ldr	r3, [r7, #20]
}
    a06c:	4618      	mov	r0, r3
    a06e:	3718      	adds	r7, #24
    a070:	46bd      	mov	sp, r7
    a072:	bd80      	pop	{r7, pc}
    a074:	00009ea9 	.word	0x00009ea9
    a078:	01e13380 	.word	0x01e13380
    a07c:	0000a085 	.word	0x0000a085
    a080:	00015180 	.word	0x00015180

0000a084 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    a084:	b580      	push	{r7, lr}
    a086:	b086      	sub	sp, #24
    a088:	af00      	add	r7, sp, #0
    a08a:	60f8      	str	r0, [r7, #12]
    a08c:	60b9      	str	r1, [r7, #8]
    a08e:	4613      	mov	r3, r2
    a090:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    a092:	2300      	movs	r3, #0
    a094:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    a096:	68bb      	ldr	r3, [r7, #8]
    a098:	b29b      	uxth	r3, r3
    a09a:	4619      	mov	r1, r3
    a09c:	68f8      	ldr	r0, [r7, #12]
    a09e:	4b2f      	ldr	r3, [pc, #188]	; (a15c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    a0a0:	4798      	blx	r3
    a0a2:	4603      	mov	r3, r0
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	d028      	beq.n	a0fa <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    a0a8:	79fb      	ldrb	r3, [r7, #7]
    a0aa:	3b01      	subs	r3, #1
    a0ac:	2b0b      	cmp	r3, #11
    a0ae:	d84c      	bhi.n	a14a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    a0b0:	a201      	add	r2, pc, #4	; (adr r2, a0b8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    a0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a0b6:	bf00      	nop
    a0b8:	0000a0e9 	.word	0x0000a0e9
    a0bc:	0000a0ef 	.word	0x0000a0ef
    a0c0:	0000a0e9 	.word	0x0000a0e9
    a0c4:	0000a0f5 	.word	0x0000a0f5
    a0c8:	0000a0e9 	.word	0x0000a0e9
    a0cc:	0000a0f5 	.word	0x0000a0f5
    a0d0:	0000a0e9 	.word	0x0000a0e9
    a0d4:	0000a0e9 	.word	0x0000a0e9
    a0d8:	0000a0f5 	.word	0x0000a0f5
    a0dc:	0000a0e9 	.word	0x0000a0e9
    a0e0:	0000a0f5 	.word	0x0000a0f5
    a0e4:	0000a0e9 	.word	0x0000a0e9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    a0e8:	4b1d      	ldr	r3, [pc, #116]	; (a160 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    a0ea:	617b      	str	r3, [r7, #20]
			break;
    a0ec:	e030      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    a0ee:	4b1d      	ldr	r3, [pc, #116]	; (a164 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    a0f0:	617b      	str	r3, [r7, #20]
			break;
    a0f2:	e02d      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    a0f4:	4b1c      	ldr	r3, [pc, #112]	; (a168 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    a0f6:	617b      	str	r3, [r7, #20]
			break;
    a0f8:	e02a      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    a0fa:	79fb      	ldrb	r3, [r7, #7]
    a0fc:	3b01      	subs	r3, #1
    a0fe:	2b0b      	cmp	r3, #11
    a100:	d825      	bhi.n	a14e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    a102:	a201      	add	r2, pc, #4	; (adr r2, a108 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a108:	0000a139 	.word	0x0000a139
    a10c:	0000a13f 	.word	0x0000a13f
    a110:	0000a139 	.word	0x0000a139
    a114:	0000a145 	.word	0x0000a145
    a118:	0000a139 	.word	0x0000a139
    a11c:	0000a145 	.word	0x0000a145
    a120:	0000a139 	.word	0x0000a139
    a124:	0000a139 	.word	0x0000a139
    a128:	0000a145 	.word	0x0000a145
    a12c:	0000a139 	.word	0x0000a139
    a130:	0000a145 	.word	0x0000a145
    a134:	0000a139 	.word	0x0000a139
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    a138:	4b09      	ldr	r3, [pc, #36]	; (a160 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    a13a:	617b      	str	r3, [r7, #20]
			break;
    a13c:	e008      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    a13e:	4b0b      	ldr	r3, [pc, #44]	; (a16c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    a140:	617b      	str	r3, [r7, #20]
			break;
    a142:	e005      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    a144:	4b08      	ldr	r3, [pc, #32]	; (a168 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    a146:	617b      	str	r3, [r7, #20]
			break;
    a148:	e002      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    a14a:	bf00      	nop
    a14c:	e000      	b.n	a150 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    a14e:	bf00      	nop
		}
	}

	return sec_in_month;
    a150:	697b      	ldr	r3, [r7, #20]
}
    a152:	4618      	mov	r0, r3
    a154:	3718      	adds	r7, #24
    a156:	46bd      	mov	sp, r7
    a158:	bd80      	pop	{r7, pc}
    a15a:	bf00      	nop
    a15c:	00009ea9 	.word	0x00009ea9
    a160:	0028de80 	.word	0x0028de80
    a164:	00263b80 	.word	0x00263b80
    a168:	00278d00 	.word	0x00278d00
    a16c:	0024ea00 	.word	0x0024ea00

0000a170 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    a170:	b580      	push	{r7, lr}
    a172:	b082      	sub	sp, #8
    a174:	af00      	add	r7, sp, #0
    a176:	6078      	str	r0, [r7, #4]
    a178:	6039      	str	r1, [r7, #0]
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	2b01      	cmp	r3, #1
    a17e:	d10d      	bne.n	a19c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    a180:	683b      	ldr	r3, [r7, #0]
    a182:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a186:	4293      	cmp	r3, r2
    a188:	d108      	bne.n	a19c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    a18a:	4906      	ldr	r1, [pc, #24]	; (a1a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    a18c:	4806      	ldr	r0, [pc, #24]	; (a1a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    a18e:	4b07      	ldr	r3, [pc, #28]	; (a1ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    a190:	4798      	blx	r3
    a192:	4a07      	ldr	r2, [pc, #28]	; (a1b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    a194:	4907      	ldr	r1, [pc, #28]	; (a1b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    a196:	4804      	ldr	r0, [pc, #16]	; (a1a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    a198:	4b07      	ldr	r3, [pc, #28]	; (a1b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    a19a:	4798      	blx	r3
    a19c:	bf00      	nop
    a19e:	3708      	adds	r7, #8
    a1a0:	46bd      	mov	sp, r7
    a1a2:	bd80      	pop	{r7, pc}
    a1a4:	20003888 	.word	0x20003888
    a1a8:	20003598 	.word	0x20003598
    a1ac:	00009aa5 	.word	0x00009aa5
    a1b0:	20000000 	.word	0x20000000
    a1b4:	00009ae1 	.word	0x00009ae1
    a1b8:	0000b2dd 	.word	0x0000b2dd

0000a1bc <_GLOBAL__sub_I_ptrCalendarClass>:
    a1bc:	b580      	push	{r7, lr}
    a1be:	af00      	add	r7, sp, #0
    a1c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a1c4:	2001      	movs	r0, #1
    a1c6:	4b01      	ldr	r3, [pc, #4]	; (a1cc <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    a1c8:	4798      	blx	r3
    a1ca:	bd80      	pop	{r7, pc}
    a1cc:	0000a171 	.word	0x0000a171

0000a1d0 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"


DateTimeLog_Class::DateTimeLog_Class()
    a1d0:	b480      	push	{r7}
    a1d2:	b083      	sub	sp, #12
    a1d4:	af00      	add	r7, sp, #0
    a1d6:	6078      	str	r0, [r7, #4]
    a1d8:	4a04      	ldr	r2, [pc, #16]	; (a1ec <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    a1da:	687b      	ldr	r3, [r7, #4]
    a1dc:	601a      	str	r2, [r3, #0]
{
} //~D
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	4618      	mov	r0, r3
    a1e2:	370c      	adds	r7, #12
    a1e4:	46bd      	mov	sp, r7
    a1e6:	bc80      	pop	{r7}
    a1e8:	4770      	bx	lr
    a1ea:	bf00      	nop
    a1ec:	0000ec28 	.word	0x0000ec28

0000a1f0 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    a1f0:	b480      	push	{r7}
    a1f2:	b083      	sub	sp, #12
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	6078      	str	r0, [r7, #4]
    a1f8:	4a04      	ldr	r2, [pc, #16]	; (a20c <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	4618      	mov	r0, r3
    a202:	370c      	adds	r7, #12
    a204:	46bd      	mov	sp, r7
    a206:	bc80      	pop	{r7}
    a208:	4770      	bx	lr
    a20a:	bf00      	nop
    a20c:	0000ec28 	.word	0x0000ec28

0000a210 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
    a210:	b590      	push	{r4, r7, lr}
    a212:	b085      	sub	sp, #20
    a214:	af00      	add	r7, sp, #0
    a216:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	681b      	ldr	r3, [r3, #0]
    a21c:	681b      	ldr	r3, [r3, #0]
    a21e:	687a      	ldr	r2, [r7, #4]
    a220:	3226      	adds	r2, #38	; 0x26
    a222:	4611      	mov	r1, r2
    a224:	6878      	ldr	r0, [r7, #4]
    a226:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	681b      	ldr	r3, [r3, #0]
    a22c:	3304      	adds	r3, #4
    a22e:	681b      	ldr	r3, [r3, #0]
    a230:	687a      	ldr	r2, [r7, #4]
    a232:	3226      	adds	r2, #38	; 0x26
    a234:	4611      	mov	r1, r2
    a236:	6878      	ldr	r0, [r7, #4]
    a238:	4798      	blx	r3
    a23a:	4602      	mov	r2, r0
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
    a240:	6878      	ldr	r0, [r7, #4]
    a242:	4b15      	ldr	r3, [pc, #84]	; (a298 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x88>)
    a244:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
    a246:	687b      	ldr	r3, [r7, #4]
    a248:	681b      	ldr	r3, [r3, #0]
    a24a:	3304      	adds	r3, #4
    a24c:	681b      	ldr	r3, [r3, #0]
    a24e:	687a      	ldr	r2, [r7, #4]
    a250:	322e      	adds	r2, #46	; 0x2e
    a252:	4611      	mov	r1, r2
    a254:	6878      	ldr	r0, [r7, #4]
    a256:	4798      	blx	r3
    a258:	4602      	mov	r2, r0
    a25a:	687b      	ldr	r3, [r7, #4]
    a25c:	60da      	str	r2, [r3, #12]
	timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	689b      	ldr	r3, [r3, #8]
    a262:	461a      	mov	r2, r3
    a264:	687b      	ldr	r3, [r7, #4]
    a266:	68db      	ldr	r3, [r3, #12]
    a268:	4619      	mov	r1, r3
    a26a:	4610      	mov	r0, r2
    a26c:	4b0b      	ldr	r3, [pc, #44]	; (a29c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x8c>)
    a26e:	4798      	blx	r3
    a270:	4603      	mov	r3, r0
    a272:	460c      	mov	r4, r1
    a274:	687a      	ldr	r2, [r7, #4]
    a276:	e9c2 3406 	strd	r3, r4, [r2, #24]
	tick_t diferencia=(uint32_t)timeDifference;
    a27a:	687b      	ldr	r3, [r7, #4]
    a27c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
    a280:	4a07      	ldr	r2, [pc, #28]	; (a2a0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>)
    a282:	4618      	mov	r0, r3
    a284:	4621      	mov	r1, r4
    a286:	4790      	blx	r2
    a288:	4603      	mov	r3, r0
    a28a:	60fb      	str	r3, [r7, #12]
	return	diferencia;
    a28c:	68fb      	ldr	r3, [r7, #12]
}
    a28e:	4618      	mov	r0, r3
    a290:	3714      	adds	r7, #20
    a292:	46bd      	mov	sp, r7
    a294:	bd90      	pop	{r4, r7, pc}
    a296:	bf00      	nop
    a298:	0000a48d 	.word	0x0000a48d
    a29c:	0000cd51 	.word	0x0000cd51
    a2a0:	0000cd05 	.word	0x0000cd05

0000a2a4 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
    a2a4:	b5b0      	push	{r4, r5, r7, lr}
    a2a6:	b082      	sub	sp, #8
    a2a8:	af00      	add	r7, sp, #0
    a2aa:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
    a2ac:	4b07      	ldr	r3, [pc, #28]	; (a2cc <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    a2ae:	6878      	ldr	r0, [r7, #4]
    a2b0:	4798      	blx	r3
    a2b2:	4602      	mov	r2, r0
    a2b4:	460b      	mov	r3, r1
    a2b6:	4614      	mov	r4, r2
    a2b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    a2bc:	4623      	mov	r3, r4
    a2be:	462c      	mov	r4, r5
    a2c0:	4618      	mov	r0, r3
    a2c2:	4621      	mov	r1, r4
    a2c4:	3708      	adds	r7, #8
    a2c6:	46bd      	mov	sp, r7
    a2c8:	bdb0      	pop	{r4, r5, r7, pc}
    a2ca:	bf00      	nop
    a2cc:	0000c6d9 	.word	0x0000c6d9

0000a2d0 <_ZN17DateTimeLog_Class13WasInterrptedEv>:

bool	DateTimeLog_Class::WasInterrpted(void){
    a2d0:	b5b0      	push	{r4, r5, r7, lr}
    a2d2:	b082      	sub	sp, #8
    a2d4:	af00      	add	r7, sp, #0
    a2d6:	6078      	str	r0, [r7, #4]
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
    a2d8:	6878      	ldr	r0, [r7, #4]
    a2da:	4b12      	ldr	r3, [pc, #72]	; (a324 <_ZN17DateTimeLog_Class13WasInterrptedEv+0x54>)
    a2dc:	4798      	blx	r3
    a2de:	4603      	mov	r3, r0
    a2e0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
    a2e4:	4618      	mov	r0, r3
    a2e6:	4b10      	ldr	r3, [pc, #64]	; (a328 <_ZN17DateTimeLog_Class13WasInterrptedEv+0x58>)
    a2e8:	4798      	blx	r3
    a2ea:	2301      	movs	r3, #1
    a2ec:	461d      	mov	r5, r3
    a2ee:	4c0f      	ldr	r4, [pc, #60]	; (a32c <_ZN17DateTimeLog_Class13WasInterrptedEv+0x5c>)
    a2f0:	f04f 0200 	mov.w	r2, #0
    a2f4:	4b0e      	ldr	r3, [pc, #56]	; (a330 <_ZN17DateTimeLog_Class13WasInterrptedEv+0x60>)
    a2f6:	47a0      	blx	r4
    a2f8:	4603      	mov	r3, r0
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d101      	bne.n	a302 <_ZN17DateTimeLog_Class13WasInterrptedEv+0x32>
    a2fe:	2300      	movs	r3, #0
    a300:	461d      	mov	r5, r3
    a302:	b2eb      	uxtb	r3, r5
    a304:	2b00      	cmp	r3, #0
    a306:	d003      	beq.n	a310 <_ZN17DateTimeLog_Class13WasInterrptedEv+0x40>
	{
		powerInterrupt=true;
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	2201      	movs	r2, #1
    a30c:	711a      	strb	r2, [r3, #4]
    a30e:	e002      	b.n	a316 <_ZN17DateTimeLog_Class13WasInterrptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	2200      	movs	r2, #0
    a314:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	791b      	ldrb	r3, [r3, #4]
    a31a:	b2db      	uxtb	r3, r3
}
    a31c:	4618      	mov	r0, r3
    a31e:	3708      	adds	r7, #8
    a320:	46bd      	mov	sp, r7
    a322:	bdb0      	pop	{r4, r5, r7, pc}
    a324:	0000a211 	.word	0x0000a211
    a328:	0000a2a5 	.word	0x0000a2a5
    a32c:	0000ccc5 	.word	0x0000ccc5
    a330:	40490000 	.word	0x40490000

0000a334 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
    a334:	b590      	push	{r4, r7, lr}
    a336:	b085      	sub	sp, #20
    a338:	af00      	add	r7, sp, #0
    a33a:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	f103 0122 	add.w	r1, r3, #34	; 0x22
    a342:	687b      	ldr	r3, [r7, #4]
    a344:	8c1a      	ldrh	r2, [r3, #32]
    a346:	2301      	movs	r3, #1
    a348:	480c      	ldr	r0, [pc, #48]	; (a37c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
    a34a:	4c0d      	ldr	r4, [pc, #52]	; (a380 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
    a34c:	47a0      	blx	r4
    a34e:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
    a350:	6878      	ldr	r0, [r7, #4]
    a352:	4b0c      	ldr	r3, [pc, #48]	; (a384 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
    a354:	4798      	blx	r3
    a356:	4603      	mov	r3, r0
    a358:	b29a      	uxth	r2, r3
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
    a35e:	687b      	ldr	r3, [r7, #4]
    a360:	f103 0122 	add.w	r1, r3, #34	; 0x22
    a364:	687b      	ldr	r3, [r7, #4]
    a366:	8c1a      	ldrh	r2, [r3, #32]
    a368:	2301      	movs	r3, #1
    a36a:	4804      	ldr	r0, [pc, #16]	; (a37c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
    a36c:	4c06      	ldr	r4, [pc, #24]	; (a388 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
    a36e:	47a0      	blx	r4
    a370:	60f8      	str	r0, [r7, #12]
	return r;
    a372:	68fb      	ldr	r3, [r7, #12]
}
    a374:	4618      	mov	r0, r3
    a376:	3714      	adds	r7, #20
    a378:	46bd      	mov	sp, r7
    a37a:	bd90      	pop	{r4, r7, pc}
    a37c:	20003350 	.word	0x20003350
    a380:	00009349 	.word	0x00009349
    a384:	0000a38d 	.word	0x0000a38d
    a388:	0000923d 	.word	0x0000923d

0000a38c <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
    a38c:	b480      	push	{r7}
    a38e:	b083      	sub	sp, #12
    a390:	af00      	add	r7, sp, #0
    a392:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
    a394:	687b      	ldr	r3, [r7, #4]
    a396:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a398:	b2db      	uxtb	r3, r3
    a39a:	3301      	adds	r3, #1
    a39c:	b2db      	uxtb	r3, r3
    a39e:	f003 030f 	and.w	r3, r3, #15
    a3a2:	b2db      	uxtb	r3, r3
 }
    a3a4:	4618      	mov	r0, r3
    a3a6:	370c      	adds	r7, #12
    a3a8:	46bd      	mov	sp, r7
    a3aa:	bc80      	pop	{r7}
    a3ac:	4770      	bx	lr
	...

0000a3b0 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
    a3b0:	b590      	push	{r4, r7, lr}
    a3b2:	b085      	sub	sp, #20
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	8c1a      	ldrh	r2, [r3, #32]
    a3bc:	f107 010f 	add.w	r1, r7, #15
    a3c0:	2301      	movs	r3, #1
    a3c2:	4804      	ldr	r0, [pc, #16]	; (a3d4 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
    a3c4:	4c04      	ldr	r4, [pc, #16]	; (a3d8 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
    a3c6:	47a0      	blx	r4
	 return	s;
    a3c8:	7bfb      	ldrb	r3, [r7, #15]
 }
    a3ca:	4618      	mov	r0, r3
    a3cc:	3714      	adds	r7, #20
    a3ce:	46bd      	mov	sp, r7
    a3d0:	bd90      	pop	{r4, r7, pc}
    a3d2:	bf00      	nop
    a3d4:	20003350 	.word	0x20003350
    a3d8:	00009349 	.word	0x00009349

0000a3dc <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
    a3dc:	b480      	push	{r7}
    a3de:	b083      	sub	sp, #12
    a3e0:	af00      	add	r7, sp, #0
    a3e2:	6078      	str	r0, [r7, #4]
    a3e4:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
    a3e6:	683b      	ldr	r3, [r7, #0]
    a3e8:	b29a      	uxth	r2, r3
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
    a3ee:	687b      	ldr	r3, [r7, #4]
    a3f0:	8c1b      	ldrh	r3, [r3, #32]
 }
    a3f2:	4618      	mov	r0, r3
    a3f4:	370c      	adds	r7, #12
    a3f6:	46bd      	mov	sp, r7
    a3f8:	bc80      	pop	{r7}
    a3fa:	4770      	bx	lr

0000a3fc <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
    a3fc:	b480      	push	{r7}
    a3fe:	b083      	sub	sp, #12
    a400:	af00      	add	r7, sp, #0
    a402:	6078      	str	r0, [r7, #4]
    a404:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
    a406:	683b      	ldr	r3, [r7, #0]
    a408:	b29a      	uxth	r2, r3
    a40a:	687b      	ldr	r3, [r7, #4]
    a40c:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
    a412:	4618      	mov	r0, r3
    a414:	370c      	adds	r7, #12
    a416:	46bd      	mov	sp, r7
    a418:	bc80      	pop	{r7}
    a41a:	4770      	bx	lr

0000a41c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
    a41c:	b590      	push	{r4, r7, lr}
    a41e:	b085      	sub	sp, #20
    a420:	af00      	add	r7, sp, #0
    a422:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
    a424:	6878      	ldr	r0, [r7, #4]
    a426:	4b15      	ldr	r3, [pc, #84]	; (a47c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
    a428:	4798      	blx	r3
    a42a:	4603      	mov	r3, r0
    a42c:	b29a      	uxth	r2, r3
    a42e:	687b      	ldr	r3, [r7, #4]
    a430:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	681b      	ldr	r3, [r3, #0]
    a436:	681b      	ldr	r3, [r3, #0]
    a438:	687a      	ldr	r2, [r7, #4]
    a43a:	3226      	adds	r2, #38	; 0x26
    a43c:	4611      	mov	r1, r2
    a43e:	6878      	ldr	r0, [r7, #4]
    a440:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
    a442:	687b      	ldr	r3, [r7, #4]
    a444:	3326      	adds	r3, #38	; 0x26
    a446:	461a      	mov	r2, r3
    a448:	687b      	ldr	r3, [r7, #4]
    a44a:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
    a44c:	687b      	ldr	r3, [r7, #4]
    a44e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    a450:	687b      	ldr	r3, [r7, #4]
    a452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a454:	b2da      	uxtb	r2, r3
    a456:	687b      	ldr	r3, [r7, #4]
    a458:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a45a:	b2db      	uxtb	r3, r3
    a45c:	4413      	add	r3, r2
    a45e:	b2da      	uxtb	r2, r3
    a460:	2308      	movs	r3, #8
    a462:	4807      	ldr	r0, [pc, #28]	; (a480 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
    a464:	4c07      	ldr	r4, [pc, #28]	; (a484 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
    a466:	47a0      	blx	r4
    a468:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
    a46a:	6878      	ldr	r0, [r7, #4]
    a46c:	4b06      	ldr	r3, [pc, #24]	; (a488 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
    a46e:	4798      	blx	r3
	return	w;
    a470:	68fb      	ldr	r3, [r7, #12]
}
    a472:	4618      	mov	r0, r3
    a474:	3714      	adds	r7, #20
    a476:	46bd      	mov	sp, r7
    a478:	bd90      	pop	{r4, r7, pc}
    a47a:	bf00      	nop
    a47c:	0000a3b1 	.word	0x0000a3b1
    a480:	20003350 	.word	0x20003350
    a484:	000091ad 	.word	0x000091ad
    a488:	0000a335 	.word	0x0000a335

0000a48c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
    a48c:	b590      	push	{r4, r7, lr}
    a48e:	b085      	sub	sp, #20
    a490:	af00      	add	r7, sp, #0
    a492:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
    a494:	6878      	ldr	r0, [r7, #4]
    a496:	4b0f      	ldr	r3, [pc, #60]	; (a4d4 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
    a498:	4798      	blx	r3
    a49a:	4603      	mov	r3, r0
    a49c:	b29a      	uxth	r2, r3
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
    a4a2:	687b      	ldr	r3, [r7, #4]
    a4a4:	332e      	adds	r3, #46	; 0x2e
    a4a6:	461a      	mov	r2, r3
    a4a8:	687b      	ldr	r3, [r7, #4]
    a4aa:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
    a4ac:	687b      	ldr	r3, [r7, #4]
    a4ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a4b4:	b2da      	uxtb	r2, r3
    a4b6:	687b      	ldr	r3, [r7, #4]
    a4b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a4ba:	b2db      	uxtb	r3, r3
    a4bc:	4413      	add	r3, r2
    a4be:	b2da      	uxtb	r2, r3
    a4c0:	2308      	movs	r3, #8
    a4c2:	4805      	ldr	r0, [pc, #20]	; (a4d8 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
    a4c4:	4c05      	ldr	r4, [pc, #20]	; (a4dc <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
    a4c6:	47a0      	blx	r4
    a4c8:	60f8      	str	r0, [r7, #12]
	return	r;
    a4ca:	68fb      	ldr	r3, [r7, #12]
}
    a4cc:	4618      	mov	r0, r3
    a4ce:	3714      	adds	r7, #20
    a4d0:	46bd      	mov	sp, r7
    a4d2:	bd90      	pop	{r4, r7, pc}
    a4d4:	0000a3b1 	.word	0x0000a3b1
    a4d8:	20003350 	.word	0x20003350
    a4dc:	000092d9 	.word	0x000092d9

0000a4e0 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    a4e0:	b580      	push	{r7, lr}
    a4e2:	b082      	sub	sp, #8
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    a4e8:	4b04      	ldr	r3, [pc, #16]	; (a4fc <_ZL7task_cbPK10timer_task+0x1c>)
    a4ea:	681b      	ldr	r3, [r3, #0]
    a4ec:	4618      	mov	r0, r3
    a4ee:	4b04      	ldr	r3, [pc, #16]	; (a500 <_ZL7task_cbPK10timer_task+0x20>)
    a4f0:	4798      	blx	r3
}
    a4f2:	bf00      	nop
    a4f4:	3708      	adds	r7, #8
    a4f6:	46bd      	mov	sp, r7
    a4f8:	bd80      	pop	{r7, pc}
    a4fa:	bf00      	nop
    a4fc:	20003640 	.word	0x20003640
    a500:	0000a625 	.word	0x0000a625

0000a504 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
    a504:	b480      	push	{r7}
    a506:	b083      	sub	sp, #12
    a508:	af00      	add	r7, sp, #0
    a50a:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	687a      	ldr	r2, [r7, #4]
    a510:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    a512:	4a08      	ldr	r2, [pc, #32]	; (a534 <_ZN11Timer_ClassC1Ev+0x30>)
    a514:	687b      	ldr	r3, [r7, #4]
    a516:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a51e:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	4a05      	ldr	r2, [pc, #20]	; (a538 <_ZN11Timer_ClassC1Ev+0x34>)
    a524:	621a      	str	r2, [r3, #32]
} //Timer_Class
    a526:	687b      	ldr	r3, [r7, #4]
    a528:	4618      	mov	r0, r3
    a52a:	370c      	adds	r7, #12
    a52c:	46bd      	mov	sp, r7
    a52e:	bc80      	pop	{r7}
    a530:	4770      	bx	lr
    a532:	bf00      	nop
    a534:	20003640 	.word	0x20003640
    a538:	0000a4e1 	.word	0x0000a4e1

0000a53c <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    a53c:	b480      	push	{r7}
    a53e:	b083      	sub	sp, #12
    a540:	af00      	add	r7, sp, #0
    a542:	6078      	str	r0, [r7, #4]
    a544:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	683a      	ldr	r2, [r7, #0]
    a54a:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    a54c:	4a07      	ldr	r2, [pc, #28]	; (a56c <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a558:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	4a04      	ldr	r2, [pc, #16]	; (a570 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    a55e:	621a      	str	r2, [r3, #32]
} //Timer_Class
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	4618      	mov	r0, r3
    a564:	370c      	adds	r7, #12
    a566:	46bd      	mov	sp, r7
    a568:	bc80      	pop	{r7}
    a56a:	4770      	bx	lr
    a56c:	20003640 	.word	0x20003640
    a570:	0000a4e1 	.word	0x0000a4e1

0000a574 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor>:
void	Timer_Class::set_descriptor(timer_descriptor * descr){
    a574:	b480      	push	{r7}
    a576:	b083      	sub	sp, #12
    a578:	af00      	add	r7, sp, #0
    a57a:	6078      	str	r0, [r7, #4]
    a57c:	6039      	str	r1, [r7, #0]
		timer_descr=descr;
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	683a      	ldr	r2, [r7, #0]
    a582:	609a      	str	r2, [r3, #8]
		ptrTimerClass=this;
    a584:	4a03      	ldr	r2, [pc, #12]	; (a594 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor+0x20>)
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	6013      	str	r3, [r2, #0]
}
    a58a:	bf00      	nop
    a58c:	370c      	adds	r7, #12
    a58e:	46bd      	mov	sp, r7
    a590:	bc80      	pop	{r7}
    a592:	4770      	bx	lr
    a594:	20003640 	.word	0x20003640

0000a598 <_ZN11Timer_ClassD1Ev>:

// default destructor
Timer_Class::~Timer_Class()
    a598:	b480      	push	{r7}
    a59a:	b083      	sub	sp, #12
    a59c:	af00      	add	r7, sp, #0
    a59e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    a5a0:	687b      	ldr	r3, [r7, #4]
    a5a2:	2200      	movs	r2, #0
    a5a4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    a5a6:	687b      	ldr	r3, [r7, #4]
    a5a8:	4618      	mov	r0, r3
    a5aa:	370c      	adds	r7, #12
    a5ac:	46bd      	mov	sp, r7
    a5ae:	bc80      	pop	{r7}
    a5b0:	4770      	bx	lr
	...

0000a5b4 <_ZN11Timer_Class4InitEP16timer_descriptor>:



void Timer_Class::Init(timer_descriptor * descr){
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b082      	sub	sp, #8
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	6078      	str	r0, [r7, #4]
    a5bc:	6039      	str	r1, [r7, #0]
	set_descriptor(descr);
    a5be:	6839      	ldr	r1, [r7, #0]
    a5c0:	6878      	ldr	r0, [r7, #4]
    a5c2:	4b04      	ldr	r3, [pc, #16]	; (a5d4 <_ZN11Timer_Class4InitEP16timer_descriptor+0x20>)
    a5c4:	4798      	blx	r3
	ticks=0;
    a5c6:	687b      	ldr	r3, [r7, #4]
    a5c8:	2200      	movs	r2, #0
    a5ca:	629a      	str	r2, [r3, #40]	; 0x28
}
    a5cc:	bf00      	nop
    a5ce:	3708      	adds	r7, #8
    a5d0:	46bd      	mov	sp, r7
    a5d2:	bd80      	pop	{r7, pc}
    a5d4:	0000a575 	.word	0x0000a575

0000a5d8 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    a5d8:	b580      	push	{r7, lr}
    a5da:	b084      	sub	sp, #16
    a5dc:	af00      	add	r7, sp, #0
    a5de:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    a5e0:	687b      	ldr	r3, [r7, #4]
    a5e2:	689b      	ldr	r3, [r3, #8]
    a5e4:	4618      	mov	r0, r3
    a5e6:	4b04      	ldr	r3, [pc, #16]	; (a5f8 <_ZN11Timer_Class5startEv+0x20>)
    a5e8:	4798      	blx	r3
    a5ea:	60f8      	str	r0, [r7, #12]
	return status;
    a5ec:	68fb      	ldr	r3, [r7, #12]
	
}
    a5ee:	4618      	mov	r0, r3
    a5f0:	3710      	adds	r7, #16
    a5f2:	46bd      	mov	sp, r7
    a5f4:	bd80      	pop	{r7, pc}
    a5f6:	bf00      	nop
    a5f8:	00002e41 	.word	0x00002e41

0000a5fc <_ZN11Timer_Class4stopEv>:

int32_t Timer_Class::stop( void){
    a5fc:	b580      	push	{r7, lr}
    a5fe:	b084      	sub	sp, #16
    a600:	af00      	add	r7, sp, #0
    a602:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    a604:	687b      	ldr	r3, [r7, #4]
    a606:	689b      	ldr	r3, [r3, #8]
    a608:	4618      	mov	r0, r3
    a60a:	4b05      	ldr	r3, [pc, #20]	; (a620 <_ZN11Timer_Class4stopEv+0x24>)
    a60c:	4798      	blx	r3
    a60e:	60f8      	str	r0, [r7, #12]
	timeout=0;
    a610:	687b      	ldr	r3, [r7, #4]
    a612:	2200      	movs	r2, #0
    a614:	705a      	strb	r2, [r3, #1]
	return status;
    a616:	68fb      	ldr	r3, [r7, #12]
}
    a618:	4618      	mov	r0, r3
    a61a:	3710      	adds	r7, #16
    a61c:	46bd      	mov	sp, r7
    a61e:	bd80      	pop	{r7, pc}
    a620:	00002e7d 	.word	0x00002e7d

0000a624 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    a624:	b480      	push	{r7}
    a626:	b083      	sub	sp, #12
    a628:	af00      	add	r7, sp, #0
    a62a:	6078      	str	r0, [r7, #4]
	timeout=1;
    a62c:	687b      	ldr	r3, [r7, #4]
    a62e:	2201      	movs	r2, #1
    a630:	705a      	strb	r2, [r3, #1]
}
    a632:	bf00      	nop
    a634:	370c      	adds	r7, #12
    a636:	46bd      	mov	sp, r7
    a638:	bc80      	pop	{r7}
    a63a:	4770      	bx	lr

0000a63c <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    a63c:	b580      	push	{r7, lr}
    a63e:	b086      	sub	sp, #24
    a640:	af00      	add	r7, sp, #0
    a642:	60f8      	str	r0, [r7, #12]
    a644:	60b9      	str	r1, [r7, #8]
    a646:	607a      	str	r2, [r7, #4]
    a648:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    a64a:	68fb      	ldr	r3, [r7, #12]
    a64c:	687a      	ldr	r2, [r7, #4]
    a64e:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    a650:	68fb      	ldr	r3, [r7, #12]
    a652:	68ba      	ldr	r2, [r7, #8]
    a654:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    a656:	68fb      	ldr	r3, [r7, #12]
    a658:	78fa      	ldrb	r2, [r7, #3]
    a65a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	689a      	ldr	r2, [r3, #8]
    a662:	68fb      	ldr	r3, [r7, #12]
    a664:	3314      	adds	r3, #20
    a666:	4619      	mov	r1, r3
    a668:	4610      	mov	r0, r2
    a66a:	4b04      	ldr	r3, [pc, #16]	; (a67c <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x40>)
    a66c:	4798      	blx	r3
    a66e:	6178      	str	r0, [r7, #20]
	
	return status;
    a670:	697b      	ldr	r3, [r7, #20]
}
    a672:	4618      	mov	r0, r3
    a674:	3718      	adds	r7, #24
    a676:	46bd      	mov	sp, r7
    a678:	bd80      	pop	{r7, pc}
    a67a:	bf00      	nop
    a67c:	00002eb9 	.word	0x00002eb9

0000a680 <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
    a680:	b590      	push	{r4, r7, lr}
    a682:	b087      	sub	sp, #28
    a684:	af00      	add	r7, sp, #0
    a686:	60f8      	str	r0, [r7, #12]
    a688:	60b9      	str	r1, [r7, #8]
    a68a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
    a68c:	2301      	movs	r3, #1
    a68e:	687a      	ldr	r2, [r7, #4]
    a690:	68b9      	ldr	r1, [r7, #8]
    a692:	68f8      	ldr	r0, [r7, #12]
    a694:	4c03      	ldr	r4, [pc, #12]	; (a6a4 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x24>)
    a696:	47a0      	blx	r4
    a698:	6178      	str	r0, [r7, #20]
		return status;
    a69a:	697b      	ldr	r3, [r7, #20]
}
    a69c:	4618      	mov	r0, r3
    a69e:	371c      	adds	r7, #28
    a6a0:	46bd      	mov	sp, r7
    a6a2:	bd90      	pop	{r4, r7, pc}
    a6a4:	0000a63d 	.word	0x0000a63d

0000a6a8 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
    a6a8:	b590      	push	{r4, r7, lr}
    a6aa:	b087      	sub	sp, #28
    a6ac:	af00      	add	r7, sp, #0
    a6ae:	60f8      	str	r0, [r7, #12]
    a6b0:	60b9      	str	r1, [r7, #8]
    a6b2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
    a6b4:	2300      	movs	r3, #0
    a6b6:	687a      	ldr	r2, [r7, #4]
    a6b8:	68b9      	ldr	r1, [r7, #8]
    a6ba:	68f8      	ldr	r0, [r7, #12]
    a6bc:	4c06      	ldr	r4, [pc, #24]	; (a6d8 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
    a6be:	47a0      	blx	r4
    a6c0:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    a6c2:	68fb      	ldr	r3, [r7, #12]
    a6c4:	689b      	ldr	r3, [r3, #8]
    a6c6:	4618      	mov	r0, r3
    a6c8:	4b04      	ldr	r3, [pc, #16]	; (a6dc <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
    a6ca:	4798      	blx	r3
    a6cc:	6178      	str	r0, [r7, #20]
	return status;
    a6ce:	697b      	ldr	r3, [r7, #20]
}
    a6d0:	4618      	mov	r0, r3
    a6d2:	371c      	adds	r7, #28
    a6d4:	46bd      	mov	sp, r7
    a6d6:	bd90      	pop	{r4, r7, pc}
    a6d8:	0000a63d 	.word	0x0000a63d
    a6dc:	00002e41 	.word	0x00002e41

0000a6e0 <_ZN11Timer_Class9get_ticksEv>:
	timer_remove_task(timer_descr, &task);
}



uint32_t	Timer_Class::get_ticks(void){
    a6e0:	b580      	push	{r7, lr}
    a6e2:	b082      	sub	sp, #8
    a6e4:	af00      	add	r7, sp, #0
    a6e6:	6078      	str	r0, [r7, #4]
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	689a      	ldr	r2, [r3, #8]
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	3328      	adds	r3, #40	; 0x28
    a6f0:	4619      	mov	r1, r3
    a6f2:	4610      	mov	r0, r2
    a6f4:	4b03      	ldr	r3, [pc, #12]	; (a704 <_ZN11Timer_Class9get_ticksEv+0x24>)
    a6f6:	4798      	blx	r3
	return ticks;
    a6f8:	687b      	ldr	r3, [r7, #4]
    a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    a6fc:	4618      	mov	r0, r3
    a6fe:	3708      	adds	r7, #8
    a700:	46bd      	mov	sp, r7
    a702:	bd80      	pop	{r7, pc}
    a704:	00002f61 	.word	0x00002f61

0000a708 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
    a708:	b580      	push	{r7, lr}
    a70a:	b082      	sub	sp, #8
    a70c:	af00      	add	r7, sp, #0
    a70e:	6078      	str	r0, [r7, #4]
    a710:	6039      	str	r1, [r7, #0]
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	2b01      	cmp	r3, #1
    a716:	d11f      	bne.n	a758 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a718:	683b      	ldr	r3, [r7, #0]
    a71a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a71e:	4293      	cmp	r3, r2
    a720:	d11a      	bne.n	a758 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
    a722:	490f      	ldr	r1, [pc, #60]	; (a760 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    a724:	480f      	ldr	r0, [pc, #60]	; (a764 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    a726:	4b10      	ldr	r3, [pc, #64]	; (a768 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    a728:	4798      	blx	r3
    a72a:	4a10      	ldr	r2, [pc, #64]	; (a76c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    a72c:	4910      	ldr	r1, [pc, #64]	; (a770 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    a72e:	480d      	ldr	r0, [pc, #52]	; (a764 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    a730:	4b10      	ldr	r3, [pc, #64]	; (a774 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    a732:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    a734:	4910      	ldr	r1, [pc, #64]	; (a778 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    a736:	4811      	ldr	r0, [pc, #68]	; (a77c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    a738:	4b0b      	ldr	r3, [pc, #44]	; (a768 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    a73a:	4798      	blx	r3
    a73c:	4a0b      	ldr	r2, [pc, #44]	; (a76c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    a73e:	490c      	ldr	r1, [pc, #48]	; (a770 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    a740:	480e      	ldr	r0, [pc, #56]	; (a77c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    a742:	4b0c      	ldr	r3, [pc, #48]	; (a774 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    a744:	4798      	blx	r3
    a746:	490e      	ldr	r1, [pc, #56]	; (a780 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    a748:	480e      	ldr	r0, [pc, #56]	; (a784 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    a74a:	4b07      	ldr	r3, [pc, #28]	; (a768 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    a74c:	4798      	blx	r3
    a74e:	4a07      	ldr	r2, [pc, #28]	; (a76c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    a750:	4907      	ldr	r1, [pc, #28]	; (a770 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    a752:	480c      	ldr	r0, [pc, #48]	; (a784 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    a754:	4b07      	ldr	r3, [pc, #28]	; (a774 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    a756:	4798      	blx	r3
    a758:	bf00      	nop
    a75a:	3708      	adds	r7, #8
    a75c:	46bd      	mov	sp, r7
    a75e:	bd80      	pop	{r7, pc}
    a760:	20003794 	.word	0x20003794
    a764:	20003644 	.word	0x20003644
    a768:	0000a53d 	.word	0x0000a53d
    a76c:	20000000 	.word	0x20000000
    a770:	0000a599 	.word	0x0000a599
    a774:	0000b2dd 	.word	0x0000b2dd
    a778:	2000382c 	.word	0x2000382c
    a77c:	20003670 	.word	0x20003670
    a780:	200037b0 	.word	0x200037b0
    a784:	2000369c 	.word	0x2000369c

0000a788 <_GLOBAL__sub_I_ptrTimerClass>:
    a788:	b580      	push	{r7, lr}
    a78a:	af00      	add	r7, sp, #0
    a78c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a790:	2001      	movs	r0, #1
    a792:	4b01      	ldr	r3, [pc, #4]	; (a798 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    a794:	4798      	blx	r3
    a796:	bd80      	pop	{r7, pc}
    a798:	0000a709 	.word	0x0000a709

0000a79c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    a79c:	b480      	push	{r7}
    a79e:	b083      	sub	sp, #12
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	6078      	str	r0, [r7, #4]
    a7a4:	4a05      	ldr	r2, [pc, #20]	; (a7bc <_ZN5PrintC1Ev+0x20>)
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	601a      	str	r2, [r3, #0]
    a7aa:	687b      	ldr	r3, [r7, #4]
    a7ac:	2200      	movs	r2, #0
    a7ae:	605a      	str	r2, [r3, #4]
    a7b0:	687b      	ldr	r3, [r7, #4]
    a7b2:	4618      	mov	r0, r3
    a7b4:	370c      	adds	r7, #12
    a7b6:	46bd      	mov	sp, r7
    a7b8:	bc80      	pop	{r7}
    a7ba:	4770      	bx	lr
    a7bc:	0000eca4 	.word	0x0000eca4

0000a7c0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    a7c0:	b480      	push	{r7}
    a7c2:	b083      	sub	sp, #12
    a7c4:	af00      	add	r7, sp, #0
    a7c6:	6078      	str	r0, [r7, #4]
    a7c8:	2300      	movs	r3, #0
    a7ca:	4618      	mov	r0, r3
    a7cc:	370c      	adds	r7, #12
    a7ce:	46bd      	mov	sp, r7
    a7d0:	bc80      	pop	{r7}
    a7d2:	4770      	bx	lr

0000a7d4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    a7d4:	b480      	push	{r7}
    a7d6:	b083      	sub	sp, #12
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
    a7dc:	bf00      	nop
    a7de:	370c      	adds	r7, #12
    a7e0:	46bd      	mov	sp, r7
    a7e2:	bc80      	pop	{r7}
    a7e4:	4770      	bx	lr
	...

0000a7e8 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b082      	sub	sp, #8
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	6078      	str	r0, [r7, #4]
    a7f0:	687b      	ldr	r3, [r7, #4]
    a7f2:	4618      	mov	r0, r3
    a7f4:	4b06      	ldr	r3, [pc, #24]	; (a810 <_ZN6StreamC1Ev+0x28>)
    a7f6:	4798      	blx	r3
    a7f8:	4a06      	ldr	r2, [pc, #24]	; (a814 <_ZN6StreamC1Ev+0x2c>)
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	601a      	str	r2, [r3, #0]
    a7fe:	687b      	ldr	r3, [r7, #4]
    a800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a804:	609a      	str	r2, [r3, #8]
    a806:	687b      	ldr	r3, [r7, #4]
    a808:	4618      	mov	r0, r3
    a80a:	3708      	adds	r7, #8
    a80c:	46bd      	mov	sp, r7
    a80e:	bd80      	pop	{r7, pc}
    a810:	0000a79d 	.word	0x0000a79d
    a814:	0000ec68 	.word	0x0000ec68

0000a818 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Calendar_Class.h"
#include	"Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    a818:	b480      	push	{r7}
    a81a:	b083      	sub	sp, #12
    a81c:	af00      	add	r7, sp, #0
    a81e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    a820:	4b07      	ldr	r3, [pc, #28]	; (a840 <_ZL14USBTimeoutTaskPK10timer_task+0x28>)
    a822:	681b      	ldr	r3, [r3, #0]
    a824:	2201      	movs	r2, #1
    a826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	ptrCDCClass->terminal=false;
    a82a:	4b05      	ldr	r3, [pc, #20]	; (a840 <_ZL14USBTimeoutTaskPK10timer_task+0x28>)
    a82c:	681b      	ldr	r3, [r3, #0]
    a82e:	2200      	movs	r2, #0
    a830:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
    a834:	bf00      	nop
    a836:	370c      	adds	r7, #12
    a838:	46bd      	mov	sp, r7
    a83a:	bc80      	pop	{r7}
    a83c:	4770      	bx	lr
    a83e:	bf00      	nop
    a840:	200036c8 	.word	0x200036c8

0000a844 <_Z12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
volatile bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a844:	b480      	push	{r7}
    a846:	b083      	sub	sp, #12
    a848:	af00      	add	r7, sp, #0
    a84a:	4603      	mov	r3, r0
    a84c:	603a      	str	r2, [r7, #0]
    a84e:	71fb      	strb	r3, [r7, #7]
    a850:	460b      	mov	r3, r1
    a852:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    a854:	4b09      	ldr	r3, [pc, #36]	; (a87c <_Z12cb_bulk_readh13usb_xfer_codem+0x38>)
    a856:	681b      	ldr	r3, [r3, #0]
    a858:	2201      	movs	r2, #1
    a85a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->terminal=true;
    a85c:	4b07      	ldr	r3, [pc, #28]	; (a87c <_Z12cb_bulk_readh13usb_xfer_codem+0x38>)
    a85e:	681b      	ldr	r3, [r3, #0]
    a860:	2201      	movs	r2, #1
    a862:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrCDCClass->plugged=true;
    a866:	4b05      	ldr	r3, [pc, #20]	; (a87c <_Z12cb_bulk_readh13usb_xfer_codem+0x38>)
    a868:	681b      	ldr	r3, [r3, #0]
    a86a:	2201      	movs	r2, #1
    a86c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59


	return false;
    a870:	2300      	movs	r3, #0
}
    a872:	4618      	mov	r0, r3
    a874:	370c      	adds	r7, #12
    a876:	46bd      	mov	sp, r7
    a878:	bc80      	pop	{r7}
    a87a:	4770      	bx	lr
    a87c:	200036c8 	.word	0x200036c8

0000a880 <_Z13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
volatile bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a880:	b480      	push	{r7}
    a882:	b083      	sub	sp, #12
    a884:	af00      	add	r7, sp, #0
    a886:	4603      	mov	r3, r0
    a888:	603a      	str	r2, [r7, #0]
    a88a:	71fb      	strb	r3, [r7, #7]
    a88c:	460b      	mov	r3, r1
    a88e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    a890:	4b09      	ldr	r3, [pc, #36]	; (a8b8 <_Z13cb_bulk_writeh13usb_xfer_codem+0x38>)
    a892:	681b      	ldr	r3, [r3, #0]
    a894:	2201      	movs	r2, #1
    a896:	741a      	strb	r2, [r3, #16]
	ptrCDCClass->terminal=true;
    a898:	4b07      	ldr	r3, [pc, #28]	; (a8b8 <_Z13cb_bulk_writeh13usb_xfer_codem+0x38>)
    a89a:	681b      	ldr	r3, [r3, #0]
    a89c:	2201      	movs	r2, #1
    a89e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrCDCClass->plugged=true;
    a8a2:	4b05      	ldr	r3, [pc, #20]	; (a8b8 <_Z13cb_bulk_writeh13usb_xfer_codem+0x38>)
    a8a4:	681b      	ldr	r3, [r3, #0]
    a8a6:	2201      	movs	r2, #1
    a8a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	

	/* No error. */
	return false;
    a8ac:	2300      	movs	r3, #0
}
    a8ae:	4618      	mov	r0, r3
    a8b0:	370c      	adds	r7, #12
    a8b2:	46bd      	mov	sp, r7
    a8b4:	bc80      	pop	{r7}
    a8b6:	4770      	bx	lr
    a8b8:	200036c8 	.word	0x200036c8

0000a8bc <_Z10cb_state_c22usb_cdc_control_signal>:

volatile bool cb_state_c(usb_cdc_control_signal_t state)
{
    a8bc:	b580      	push	{r7, lr}
    a8be:	b082      	sub	sp, #8
    a8c0:	af00      	add	r7, sp, #0
    a8c2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    a8c4:	793b      	ldrb	r3, [r7, #4]
    a8c6:	f003 0301 	and.w	r3, r3, #1
    a8ca:	b2db      	uxtb	r3, r3
    a8cc:	2b00      	cmp	r3, #0
    a8ce:	d019      	beq.n	a904 <_Z10cb_state_c22usb_cdc_control_signal+0x48>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    a8d0:	490f      	ldr	r1, [pc, #60]	; (a910 <_Z10cb_state_c22usb_cdc_control_signal+0x54>)
    a8d2:	2000      	movs	r0, #0
    a8d4:	4b0f      	ldr	r3, [pc, #60]	; (a914 <_Z10cb_state_c22usb_cdc_control_signal+0x58>)
    a8d6:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    a8d8:	490f      	ldr	r1, [pc, #60]	; (a918 <_Z10cb_state_c22usb_cdc_control_signal+0x5c>)
    a8da:	2001      	movs	r0, #1
    a8dc:	4b0d      	ldr	r3, [pc, #52]	; (a914 <_Z10cb_state_c22usb_cdc_control_signal+0x58>)
    a8de:	4798      	blx	r3

		ptrCDCClass->txReady=true;
    a8e0:	4b0e      	ldr	r3, [pc, #56]	; (a91c <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    a8e2:	681b      	ldr	r3, [r3, #0]
    a8e4:	2201      	movs	r2, #1
    a8e6:	741a      	strb	r2, [r3, #16]
		ptrCDCClass->rxReady=true;
    a8e8:	4b0c      	ldr	r3, [pc, #48]	; (a91c <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    a8ea:	681b      	ldr	r3, [r3, #0]
    a8ec:	2201      	movs	r2, #1
    a8ee:	745a      	strb	r2, [r3, #17]
		ptrCDCClass->plugged=true;
    a8f0:	4b0a      	ldr	r3, [pc, #40]	; (a91c <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    a8f2:	681b      	ldr	r3, [r3, #0]
    a8f4:	2201      	movs	r2, #1
    a8f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		ptrCDCClass->terminal=true;
    a8fa:	4b08      	ldr	r3, [pc, #32]	; (a91c <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    a8fc:	681b      	ldr	r3, [r3, #0]
    a8fe:	2201      	movs	r2, #1
    a900:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		
	}

	/* No error. */
	return false;
    a904:	2300      	movs	r3, #0
}
    a906:	4618      	mov	r0, r3
    a908:	3708      	adds	r7, #8
    a90a:	46bd      	mov	sp, r7
    a90c:	bd80      	pop	{r7, pc}
    a90e:	bf00      	nop
    a910:	0000a845 	.word	0x0000a845
    a914:	00007169 	.word	0x00007169
    a918:	0000a881 	.word	0x0000a881
    a91c:	200036c8 	.word	0x200036c8

0000a920 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    a920:	b580      	push	{r7, lr}
    a922:	b082      	sub	sp, #8
    a924:	af00      	add	r7, sp, #0
    a926:	6078      	str	r0, [r7, #4]
    a928:	687b      	ldr	r3, [r7, #4]
    a92a:	4618      	mov	r0, r3
    a92c:	4b08      	ldr	r3, [pc, #32]	; (a950 <_ZN9CDC_ClassC1Ev+0x30>)
    a92e:	4798      	blx	r3
    a930:	4a08      	ldr	r2, [pc, #32]	; (a954 <_ZN9CDC_ClassC1Ev+0x34>)
    a932:	687b      	ldr	r3, [r7, #4]
    a934:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	f04f 32ff 	mov.w	r2, #4294967295
    a93c:	615a      	str	r2, [r3, #20]
	ptrCDCClass=this;
    a93e:	4a06      	ldr	r2, [pc, #24]	; (a958 <_ZN9CDC_ClassC1Ev+0x38>)
    a940:	687b      	ldr	r3, [r7, #4]
    a942:	6013      	str	r3, [r2, #0]
} //CDC_Class
    a944:	687b      	ldr	r3, [r7, #4]
    a946:	4618      	mov	r0, r3
    a948:	3708      	adds	r7, #8
    a94a:	46bd      	mov	sp, r7
    a94c:	bd80      	pop	{r7, pc}
    a94e:	bf00      	nop
    a950:	0000a7e9 	.word	0x0000a7e9
    a954:	0000ec38 	.word	0x0000ec38
    a958:	200036c8 	.word	0x200036c8

0000a95c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    a95c:	b480      	push	{r7}
    a95e:	b083      	sub	sp, #12
    a960:	af00      	add	r7, sp, #0
    a962:	6078      	str	r0, [r7, #4]
    a964:	4a04      	ldr	r2, [pc, #16]	; (a978 <_ZN9CDC_ClassD1Ev+0x1c>)
    a966:	687b      	ldr	r3, [r7, #4]
    a968:	601a      	str	r2, [r3, #0]
{
} //~CDC_Class
    a96a:	687b      	ldr	r3, [r7, #4]
    a96c:	4618      	mov	r0, r3
    a96e:	370c      	adds	r7, #12
    a970:	46bd      	mov	sp, r7
    a972:	bc80      	pop	{r7}
    a974:	4770      	bx	lr
    a976:	bf00      	nop
    a978:	0000ec38 	.word	0x0000ec38

0000a97c <_ZN9CDC_Class4initEv>:

void CDC_Class::init(void){
    a97c:	b580      	push	{r7, lr}
    a97e:	b082      	sub	sp, #8
    a980:	af00      	add	r7, sp, #0
    a982:	6078      	str	r0, [r7, #4]
	
	timeout=false;
    a984:	687b      	ldr	r3, [r7, #4]
    a986:	2200      	movs	r2, #0
    a988:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	terminal=true;
    a98c:	687b      	ldr	r3, [r7, #4]
    a98e:	2201      	movs	r2, #1
    a990:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	connectionTimer.add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT);
    a994:	22c8      	movs	r2, #200	; 0xc8
    a996:	4911      	ldr	r1, [pc, #68]	; (a9dc <_ZN9CDC_Class4initEv+0x60>)
    a998:	4811      	ldr	r0, [pc, #68]	; (a9e0 <_ZN9CDC_Class4initEv+0x64>)
    a99a:	4b12      	ldr	r3, [pc, #72]	; (a9e4 <_ZN9CDC_Class4initEv+0x68>)
    a99c:	4798      	blx	r3
	while (!IsEnabled()){
    a99e:	6878      	ldr	r0, [r7, #4]
    a9a0:	4b11      	ldr	r3, [pc, #68]	; (a9e8 <_ZN9CDC_Class4initEv+0x6c>)
    a9a2:	4798      	blx	r3
    a9a4:	4603      	mov	r3, r0
    a9a6:	f083 0301 	eor.w	r3, r3, #1
    a9aa:	b2db      	uxtb	r3, r3
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d00a      	beq.n	a9c6 <_ZN9CDC_Class4initEv+0x4a>
		if (timeout)
    a9b0:	687b      	ldr	r3, [r7, #4]
    a9b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    a9b6:	b2db      	uxtb	r3, r3
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d0f0      	beq.n	a99e <_ZN9CDC_Class4initEv+0x22>
		{
			plugged=false;
    a9bc:	687b      	ldr	r3, [r7, #4]
    a9be:	2200      	movs	r2, #0
    a9c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			return;
    a9c4:	e006      	b.n	a9d4 <_ZN9CDC_Class4initEv+0x58>
		}
		else
		{
		}
	}
	connectionTimer.stop();
    a9c6:	4806      	ldr	r0, [pc, #24]	; (a9e0 <_ZN9CDC_Class4initEv+0x64>)
    a9c8:	4b08      	ldr	r3, [pc, #32]	; (a9ec <_ZN9CDC_Class4initEv+0x70>)
    a9ca:	4798      	blx	r3
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    a9cc:	4908      	ldr	r1, [pc, #32]	; (a9f0 <_ZN9CDC_Class4initEv+0x74>)
    a9ce:	2003      	movs	r0, #3
    a9d0:	4b08      	ldr	r3, [pc, #32]	; (a9f4 <_ZN9CDC_Class4initEv+0x78>)
    a9d2:	4798      	blx	r3


}
    a9d4:	3708      	adds	r7, #8
    a9d6:	46bd      	mov	sp, r7
    a9d8:	bd80      	pop	{r7, pc}
    a9da:	bf00      	nop
    a9dc:	0000a819 	.word	0x0000a819
    a9e0:	2000369c 	.word	0x2000369c
    a9e4:	0000a6a9 	.word	0x0000a6a9
    a9e8:	0000a9f9 	.word	0x0000a9f9
    a9ec:	0000a5fd 	.word	0x0000a5fd
    a9f0:	0000a8bd 	.word	0x0000a8bd
    a9f4:	00007169 	.word	0x00007169

0000a9f8 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    a9f8:	b580      	push	{r7, lr}
    a9fa:	b082      	sub	sp, #8
    a9fc:	af00      	add	r7, sp, #0
    a9fe:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    aa00:	4b03      	ldr	r3, [pc, #12]	; (aa10 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    aa02:	4798      	blx	r3
    aa04:	4603      	mov	r3, r0
	
}
    aa06:	4618      	mov	r0, r3
    aa08:	3708      	adds	r7, #8
    aa0a:	46bd      	mov	sp, r7
    aa0c:	bd80      	pop	{r7, pc}
    aa0e:	bf00      	nop
    aa10:	000071b5 	.word	0x000071b5

0000aa14 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    aa14:	b580      	push	{r7, lr}
    aa16:	b084      	sub	sp, #16
    aa18:	af00      	add	r7, sp, #0
    aa1a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    aa1c:	687b      	ldr	r3, [r7, #4]
    aa1e:	695b      	ldr	r3, [r3, #20]
    aa20:	f1b3 3fff 	cmp.w	r3, #4294967295
    aa24:	bf14      	ite	ne
    aa26:	2301      	movne	r3, #1
    aa28:	2300      	moveq	r3, #0
    aa2a:	b2db      	uxtb	r3, r3
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d002      	beq.n	aa36 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    aa30:	687b      	ldr	r3, [r7, #4]
    aa32:	695b      	ldr	r3, [r3, #20]
    aa34:	e011      	b.n	aa5a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    aa36:	687b      	ldr	r3, [r7, #4]
    aa38:	681b      	ldr	r3, [r3, #0]
    aa3a:	331c      	adds	r3, #28
    aa3c:	681b      	ldr	r3, [r3, #0]
    aa3e:	f107 010f 	add.w	r1, r7, #15
    aa42:	2201      	movs	r2, #1
    aa44:	6878      	ldr	r0, [r7, #4]
    aa46:	4798      	blx	r3
    aa48:	4602      	mov	r2, r0
    aa4a:	687b      	ldr	r3, [r7, #4]
    aa4c:	615a      	str	r2, [r3, #20]
	_serialPeek=(int)r;
    aa4e:	7bfb      	ldrb	r3, [r7, #15]
    aa50:	461a      	mov	r2, r3
    aa52:	687b      	ldr	r3, [r7, #4]
    aa54:	615a      	str	r2, [r3, #20]
	return _serialPeek;
    aa56:	687b      	ldr	r3, [r7, #4]
    aa58:	695b      	ldr	r3, [r3, #20]
}
    aa5a:	4618      	mov	r0, r3
    aa5c:	3710      	adds	r7, #16
    aa5e:	46bd      	mov	sp, r7
    aa60:	bd80      	pop	{r7, pc}
	...

0000aa64 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    aa64:	b580      	push	{r7, lr}
    aa66:	b086      	sub	sp, #24
    aa68:	af00      	add	r7, sp, #0
    aa6a:	60f8      	str	r0, [r7, #12]
    aa6c:	60b9      	str	r1, [r7, #8]
    aa6e:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    aa70:	68fb      	ldr	r3, [r7, #12]
    aa72:	2200      	movs	r2, #0
    aa74:	745a      	strb	r2, [r3, #17]
	r=cdcdf_acm_read((uint8_t *)p, size);
    aa76:	687b      	ldr	r3, [r7, #4]
    aa78:	4619      	mov	r1, r3
    aa7a:	68b8      	ldr	r0, [r7, #8]
    aa7c:	4b08      	ldr	r3, [pc, #32]	; (aaa0 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    aa7e:	4798      	blx	r3
    aa80:	4603      	mov	r3, r0
    aa82:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    aa84:	68fb      	ldr	r3, [r7, #12]
    aa86:	7c5b      	ldrb	r3, [r3, #17]
    aa88:	b2db      	uxtb	r3, r3
    aa8a:	f083 0301 	eor.w	r3, r3, #1
    aa8e:	b2db      	uxtb	r3, r3
    aa90:	2b00      	cmp	r3, #0
    aa92:	d000      	beq.n	aa96 <_ZN9CDC_Class8readDataEPvl+0x32>
    aa94:	e7f6      	b.n	aa84 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    aa96:	7dfb      	ldrb	r3, [r7, #23]
}
    aa98:	4618      	mov	r0, r3
    aa9a:	3718      	adds	r7, #24
    aa9c:	46bd      	mov	sp, r7
    aa9e:	bd80      	pop	{r7, pc}
    aaa0:	00007101 	.word	0x00007101

0000aaa4 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    aaa4:	b580      	push	{r7, lr}
    aaa6:	b084      	sub	sp, #16
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    aaac:	687b      	ldr	r3, [r7, #4]
    aaae:	2200      	movs	r2, #0
    aab0:	745a      	strb	r2, [r3, #17]
	cdcdf_acm_read(&p, 1);
    aab2:	f107 030f 	add.w	r3, r7, #15
    aab6:	2101      	movs	r1, #1
    aab8:	4618      	mov	r0, r3
    aaba:	4b08      	ldr	r3, [pc, #32]	; (aadc <_ZN9CDC_Class4readEv+0x38>)
    aabc:	4798      	blx	r3
	while(!rxReady);
    aabe:	687b      	ldr	r3, [r7, #4]
    aac0:	7c5b      	ldrb	r3, [r3, #17]
    aac2:	b2db      	uxtb	r3, r3
    aac4:	f083 0301 	eor.w	r3, r3, #1
    aac8:	b2db      	uxtb	r3, r3
    aaca:	2b00      	cmp	r3, #0
    aacc:	d000      	beq.n	aad0 <_ZN9CDC_Class4readEv+0x2c>
    aace:	e7f6      	b.n	aabe <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    aad0:	7bfb      	ldrb	r3, [r7, #15]
}
    aad2:	4618      	mov	r0, r3
    aad4:	3710      	adds	r7, #16
    aad6:	46bd      	mov	sp, r7
    aad8:	bd80      	pop	{r7, pc}
    aada:	bf00      	nop
    aadc:	00007101 	.word	0x00007101

0000aae0 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    aae0:	b580      	push	{r7, lr}
    aae2:	b082      	sub	sp, #8
    aae4:	af00      	add	r7, sp, #0
    aae6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	3318      	adds	r3, #24
    aaec:	2140      	movs	r1, #64	; 0x40
    aaee:	4618      	mov	r0, r3
    aaf0:	4b02      	ldr	r3, [pc, #8]	; (aafc <_ZN9CDC_Class5flushEv+0x1c>)
    aaf2:	4798      	blx	r3
}
    aaf4:	bf00      	nop
    aaf6:	3708      	adds	r7, #8
    aaf8:	46bd      	mov	sp, r7
    aafa:	bd80      	pop	{r7, pc}
    aafc:	00007129 	.word	0x00007129

0000ab00 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    ab00:	b580      	push	{r7, lr}
    ab02:	b082      	sub	sp, #8
    ab04:	af00      	add	r7, sp, #0
    ab06:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    ab08:	4b02      	ldr	r3, [pc, #8]	; (ab14 <_ZN9CDC_Class5clearEv+0x14>)
    ab0a:	4798      	blx	r3
}
    ab0c:	bf00      	nop
    ab0e:	3708      	adds	r7, #8
    ab10:	46bd      	mov	sp, r7
    ab12:	bd80      	pop	{r7, pc}
    ab14:	00007151 	.word	0x00007151

0000ab18 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    ab18:	b580      	push	{r7, lr}
    ab1a:	b082      	sub	sp, #8
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
    ab20:	460b      	mov	r3, r1
    ab22:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    ab24:	687b      	ldr	r3, [r7, #4]
    ab26:	7c1b      	ldrb	r3, [r3, #16]
    ab28:	b2db      	uxtb	r3, r3
    ab2a:	f083 0301 	eor.w	r3, r3, #1
    ab2e:	b2db      	uxtb	r3, r3
    ab30:	2b00      	cmp	r3, #0
    ab32:	d000      	beq.n	ab36 <_ZN9CDC_Class5writeEh+0x1e>
    ab34:	e7f6      	b.n	ab24 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    ab36:	687b      	ldr	r3, [r7, #4]
    ab38:	681b      	ldr	r3, [r3, #0]
    ab3a:	3324      	adds	r3, #36	; 0x24
    ab3c:	681b      	ldr	r3, [r3, #0]
    ab3e:	1cf9      	adds	r1, r7, #3
    ab40:	2201      	movs	r2, #1
    ab42:	6878      	ldr	r0, [r7, #4]
    ab44:	4798      	blx	r3
    ab46:	4603      	mov	r3, r0
}
    ab48:	4618      	mov	r0, r3
    ab4a:	3708      	adds	r7, #8
    ab4c:	46bd      	mov	sp, r7
    ab4e:	bd80      	pop	{r7, pc}

0000ab50 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    ab50:	b580      	push	{r7, lr}
    ab52:	b086      	sub	sp, #24
    ab54:	af00      	add	r7, sp, #0
    ab56:	60f8      	str	r0, [r7, #12]
    ab58:	60b9      	str	r1, [r7, #8]
    ab5a:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    ab5c:	68fb      	ldr	r3, [r7, #12]
    ab5e:	2200      	movs	r2, #0
    ab60:	741a      	strb	r2, [r3, #16]
	if ((CheckTerminal())&&terminal)
    ab62:	68f8      	ldr	r0, [r7, #12]
    ab64:	4b19      	ldr	r3, [pc, #100]	; (abcc <_ZN9CDC_Class9writeDataEPKvl+0x7c>)
    ab66:	4798      	blx	r3
    ab68:	4603      	mov	r3, r0
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d006      	beq.n	ab7c <_ZN9CDC_Class9writeDataEPKvl+0x2c>
    ab6e:	68fb      	ldr	r3, [r7, #12]
    ab70:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    ab74:	2b00      	cmp	r3, #0
    ab76:	d001      	beq.n	ab7c <_ZN9CDC_Class9writeDataEPKvl+0x2c>
    ab78:	2301      	movs	r3, #1
    ab7a:	e000      	b.n	ab7e <_ZN9CDC_Class9writeDataEPKvl+0x2e>
    ab7c:	2300      	movs	r3, #0
    ab7e:	2b00      	cmp	r3, #0
    ab80:	d01e      	beq.n	abc0 <_ZN9CDC_Class9writeDataEPKvl+0x70>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ab82:	687b      	ldr	r3, [r7, #4]
    ab84:	4619      	mov	r1, r3
    ab86:	68b8      	ldr	r0, [r7, #8]
    ab88:	4b11      	ldr	r3, [pc, #68]	; (abd0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ab8a:	4798      	blx	r3
    ab8c:	4603      	mov	r3, r0
    ab8e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminal)){
    ab90:	68fb      	ldr	r3, [r7, #12]
    ab92:	7c1b      	ldrb	r3, [r3, #16]
    ab94:	b2db      	uxtb	r3, r3
    ab96:	f083 0301 	eor.w	r3, r3, #1
    ab9a:	b2db      	uxtb	r3, r3
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d006      	beq.n	abae <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    aba0:	68fb      	ldr	r3, [r7, #12]
    aba2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    aba6:	2b00      	cmp	r3, #0
    aba8:	d001      	beq.n	abae <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    abaa:	2301      	movs	r3, #1
    abac:	e000      	b.n	abb0 <_ZN9CDC_Class9writeDataEPKvl+0x60>
    abae:	2300      	movs	r3, #0
    abb0:	2b00      	cmp	r3, #0
    abb2:	d000      	beq.n	abb6 <_ZN9CDC_Class9writeDataEPKvl+0x66>
    abb4:	e7ec      	b.n	ab90 <_ZN9CDC_Class9writeDataEPKvl+0x40>
			
			};
			connectionTimer.stop();
    abb6:	4807      	ldr	r0, [pc, #28]	; (abd4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    abb8:	4b07      	ldr	r3, [pc, #28]	; (abd8 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    abba:	4798      	blx	r3
		return r;
    abbc:	697b      	ldr	r3, [r7, #20]
    abbe:	e000      	b.n	abc2 <_ZN9CDC_Class9writeDataEPKvl+0x72>
	} 
	else
	{
		return 0;
    abc0:	2300      	movs	r3, #0
	}
	

}
    abc2:	4618      	mov	r0, r3
    abc4:	3718      	adds	r7, #24
    abc6:	46bd      	mov	sp, r7
    abc8:	bd80      	pop	{r7, pc}
    abca:	bf00      	nop
    abcc:	0000ac9d 	.word	0x0000ac9d
    abd0:	00007129 	.word	0x00007129
    abd4:	2000369c 	.word	0x2000369c
    abd8:	0000a5fd 	.word	0x0000a5fd

0000abdc <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    abdc:	b580      	push	{r7, lr}
    abde:	b086      	sub	sp, #24
    abe0:	af00      	add	r7, sp, #0
    abe2:	60f8      	str	r0, [r7, #12]
    abe4:	60b9      	str	r1, [r7, #8]
    abe6:	607a      	str	r2, [r7, #4]
	txReady=false;
    abe8:	68fb      	ldr	r3, [r7, #12]
    abea:	2200      	movs	r2, #0
    abec:	741a      	strb	r2, [r3, #16]
	if (CheckTerminal()&&terminal)
    abee:	68f8      	ldr	r0, [r7, #12]
    abf0:	4b18      	ldr	r3, [pc, #96]	; (ac54 <_ZN9CDC_Class5writeEPKhj+0x78>)
    abf2:	4798      	blx	r3
    abf4:	4603      	mov	r3, r0
    abf6:	2b00      	cmp	r3, #0
    abf8:	d006      	beq.n	ac08 <_ZN9CDC_Class5writeEPKhj+0x2c>
    abfa:	68fb      	ldr	r3, [r7, #12]
    abfc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    ac00:	2b00      	cmp	r3, #0
    ac02:	d001      	beq.n	ac08 <_ZN9CDC_Class5writeEPKhj+0x2c>
    ac04:	2301      	movs	r3, #1
    ac06:	e000      	b.n	ac0a <_ZN9CDC_Class5writeEPKhj+0x2e>
    ac08:	2300      	movs	r3, #0
    ac0a:	2b00      	cmp	r3, #0
    ac0c:	d01d      	beq.n	ac4a <_ZN9CDC_Class5writeEPKhj+0x6e>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ac0e:	6879      	ldr	r1, [r7, #4]
    ac10:	68b8      	ldr	r0, [r7, #8]
    ac12:	4b11      	ldr	r3, [pc, #68]	; (ac58 <_ZN9CDC_Class5writeEPKhj+0x7c>)
    ac14:	4798      	blx	r3
    ac16:	4603      	mov	r3, r0
    ac18:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminal)){
    ac1a:	68fb      	ldr	r3, [r7, #12]
    ac1c:	7c1b      	ldrb	r3, [r3, #16]
    ac1e:	b2db      	uxtb	r3, r3
    ac20:	f083 0301 	eor.w	r3, r3, #1
    ac24:	b2db      	uxtb	r3, r3
    ac26:	2b00      	cmp	r3, #0
    ac28:	d006      	beq.n	ac38 <_ZN9CDC_Class5writeEPKhj+0x5c>
    ac2a:	68fb      	ldr	r3, [r7, #12]
    ac2c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    ac30:	2b00      	cmp	r3, #0
    ac32:	d001      	beq.n	ac38 <_ZN9CDC_Class5writeEPKhj+0x5c>
    ac34:	2301      	movs	r3, #1
    ac36:	e000      	b.n	ac3a <_ZN9CDC_Class5writeEPKhj+0x5e>
    ac38:	2300      	movs	r3, #0
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d000      	beq.n	ac40 <_ZN9CDC_Class5writeEPKhj+0x64>
    ac3e:	e7ec      	b.n	ac1a <_ZN9CDC_Class5writeEPKhj+0x3e>
			
		};
		connectionTimer.stop();
    ac40:	4806      	ldr	r0, [pc, #24]	; (ac5c <_ZN9CDC_Class5writeEPKhj+0x80>)
    ac42:	4b07      	ldr	r3, [pc, #28]	; (ac60 <_ZN9CDC_Class5writeEPKhj+0x84>)
    ac44:	4798      	blx	r3
		return r;
    ac46:	697b      	ldr	r3, [r7, #20]
    ac48:	e000      	b.n	ac4c <_ZN9CDC_Class5writeEPKhj+0x70>
	}
	else
	{
		return 0;
    ac4a:	2300      	movs	r3, #0
	}
	
	
	
}
    ac4c:	4618      	mov	r0, r3
    ac4e:	3718      	adds	r7, #24
    ac50:	46bd      	mov	sp, r7
    ac52:	bd80      	pop	{r7, pc}
    ac54:	0000ac9d 	.word	0x0000ac9d
    ac58:	00007129 	.word	0x00007129
    ac5c:	2000369c 	.word	0x2000369c
    ac60:	0000a5fd 	.word	0x0000a5fd

0000ac64 <_ZN9CDC_Class9availableEv>:
			return 0;
		}

}

bool	CDC_Class::available(void){
    ac64:	b480      	push	{r7}
    ac66:	b083      	sub	sp, #12
    ac68:	af00      	add	r7, sp, #0
    ac6a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    ac6c:	687b      	ldr	r3, [r7, #4]
    ac6e:	7c5b      	ldrb	r3, [r3, #17]
    ac70:	b2db      	uxtb	r3, r3
    ac72:	2b00      	cmp	r3, #0
    ac74:	d006      	beq.n	ac84 <_ZN9CDC_Class9availableEv+0x20>
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	7c1b      	ldrb	r3, [r3, #16]
    ac7a:	b2db      	uxtb	r3, r3
    ac7c:	2b00      	cmp	r3, #0
    ac7e:	d001      	beq.n	ac84 <_ZN9CDC_Class9availableEv+0x20>
    ac80:	2301      	movs	r3, #1
    ac82:	e000      	b.n	ac86 <_ZN9CDC_Class9availableEv+0x22>
    ac84:	2300      	movs	r3, #0
    ac86:	2b00      	cmp	r3, #0
    ac88:	d001      	beq.n	ac8e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ac8a:	2301      	movs	r3, #1
    ac8c:	e000      	b.n	ac90 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ac8e:	2300      	movs	r3, #0
	}
	
}
    ac90:	4618      	mov	r0, r3
    ac92:	370c      	adds	r7, #12
    ac94:	46bd      	mov	sp, r7
    ac96:	bc80      	pop	{r7}
    ac98:	4770      	bx	lr
	...

0000ac9c <_ZN9CDC_Class13CheckTerminalEv>:
bool	CDC_Class::CheckTerminal(void){
    ac9c:	b580      	push	{r7, lr}
    ac9e:	b082      	sub	sp, #8
    aca0:	af00      	add	r7, sp, #0
    aca2:	6078      	str	r0, [r7, #4]
	if (terminal)
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    acaa:	2b00      	cmp	r3, #0
    acac:	d021      	beq.n	acf2 <_ZN9CDC_Class13CheckTerminalEv+0x56>
	{
		if (plugged||IsEnabled())
    acae:	687b      	ldr	r3, [r7, #4]
    acb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    acb4:	2b00      	cmp	r3, #0
    acb6:	d105      	bne.n	acc4 <_ZN9CDC_Class13CheckTerminalEv+0x28>
    acb8:	6878      	ldr	r0, [r7, #4]
    acba:	4b13      	ldr	r3, [pc, #76]	; (ad08 <_ZN9CDC_Class13CheckTerminalEv+0x6c>)
    acbc:	4798      	blx	r3
    acbe:	4603      	mov	r3, r0
    acc0:	2b00      	cmp	r3, #0
    acc2:	d001      	beq.n	acc8 <_ZN9CDC_Class13CheckTerminalEv+0x2c>
    acc4:	2301      	movs	r3, #1
    acc6:	e000      	b.n	acca <_ZN9CDC_Class13CheckTerminalEv+0x2e>
    acc8:	2300      	movs	r3, #0
    acca:	2b00      	cmp	r3, #0
    accc:	d00c      	beq.n	ace8 <_ZN9CDC_Class13CheckTerminalEv+0x4c>
		{
			terminal=connectionTimer.start()==0;
    acce:	480f      	ldr	r0, [pc, #60]	; (ad0c <_ZN9CDC_Class13CheckTerminalEv+0x70>)
    acd0:	4b0f      	ldr	r3, [pc, #60]	; (ad10 <_ZN9CDC_Class13CheckTerminalEv+0x74>)
    acd2:	4798      	blx	r3
    acd4:	4603      	mov	r3, r0
    acd6:	2b00      	cmp	r3, #0
    acd8:	bf0c      	ite	eq
    acda:	2301      	moveq	r3, #1
    acdc:	2300      	movne	r3, #0
    acde:	b2da      	uxtb	r2, r3
    ace0:	687b      	ldr	r3, [r7, #4]
    ace2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    ace6:	e008      	b.n	acfa <_ZN9CDC_Class13CheckTerminalEv+0x5e>
		}
		else
		{
			terminal=false;
    ace8:	687b      	ldr	r3, [r7, #4]
    acea:	2200      	movs	r2, #0
    acec:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    acf0:	e003      	b.n	acfa <_ZN9CDC_Class13CheckTerminalEv+0x5e>
		}
	} 
	else
	{
		return	terminal;	
    acf2:	687b      	ldr	r3, [r7, #4]
    acf4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    acf8:	e002      	b.n	ad00 <_ZN9CDC_Class13CheckTerminalEv+0x64>
	}
	
	return	terminal;	
    acfa:	687b      	ldr	r3, [r7, #4]
    acfc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
}
    ad00:	4618      	mov	r0, r3
    ad02:	3708      	adds	r7, #8
    ad04:	46bd      	mov	sp, r7
    ad06:	bd80      	pop	{r7, pc}
    ad08:	0000a9f9 	.word	0x0000a9f9
    ad0c:	2000369c 	.word	0x2000369c
    ad10:	0000a5d9 	.word	0x0000a5d9

0000ad14 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

CDC_Class	usb;
    ad14:	b580      	push	{r7, lr}
    ad16:	b082      	sub	sp, #8
    ad18:	af00      	add	r7, sp, #0
    ad1a:	6078      	str	r0, [r7, #4]
    ad1c:	6039      	str	r1, [r7, #0]
    ad1e:	687b      	ldr	r3, [r7, #4]
    ad20:	2b01      	cmp	r3, #1
    ad22:	d10c      	bne.n	ad3e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ad24:	683b      	ldr	r3, [r7, #0]
    ad26:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ad2a:	4293      	cmp	r3, r2
    ad2c:	d107      	bne.n	ad3e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ad2e:	4806      	ldr	r0, [pc, #24]	; (ad48 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ad30:	4b06      	ldr	r3, [pc, #24]	; (ad4c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ad32:	4798      	blx	r3
    ad34:	4a06      	ldr	r2, [pc, #24]	; (ad50 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ad36:	4907      	ldr	r1, [pc, #28]	; (ad54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ad38:	4803      	ldr	r0, [pc, #12]	; (ad48 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ad3a:	4b07      	ldr	r3, [pc, #28]	; (ad58 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ad3c:	4798      	blx	r3
    ad3e:	bf00      	nop
    ad40:	3708      	adds	r7, #8
    ad42:	46bd      	mov	sp, r7
    ad44:	bd80      	pop	{r7, pc}
    ad46:	bf00      	nop
    ad48:	200036cc 	.word	0x200036cc
    ad4c:	0000a921 	.word	0x0000a921
    ad50:	20000000 	.word	0x20000000
    ad54:	0000a95d 	.word	0x0000a95d
    ad58:	0000b2dd 	.word	0x0000b2dd

0000ad5c <_GLOBAL__sub_I_ptrCDCClass>:
    ad5c:	b580      	push	{r7, lr}
    ad5e:	af00      	add	r7, sp, #0
    ad60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ad64:	2001      	movs	r0, #1
    ad66:	4b01      	ldr	r3, [pc, #4]	; (ad6c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    ad68:	4798      	blx	r3
    ad6a:	bd80      	pop	{r7, pc}
    ad6c:	0000ad15 	.word	0x0000ad15

0000ad70 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ad70:	b480      	push	{r7}
    ad72:	b083      	sub	sp, #12
    ad74:	af00      	add	r7, sp, #0
    ad76:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ad78:	2300      	movs	r3, #0
	}
    ad7a:	4618      	mov	r0, r3
    ad7c:	370c      	adds	r7, #12
    ad7e:	46bd      	mov	sp, r7
    ad80:	bc80      	pop	{r7}
    ad82:	4770      	bx	lr

0000ad84 <free>:
//............................................................................
extern "C" void free(void *)
	{
    ad84:	b480      	push	{r7}
    ad86:	b083      	sub	sp, #12
    ad88:	af00      	add	r7, sp, #0
    ad8a:	6078      	str	r0, [r7, #4]
	}
    ad8c:	bf00      	nop
    ad8e:	370c      	adds	r7, #12
    ad90:	46bd      	mov	sp, r7
    ad92:	bc80      	pop	{r7}
    ad94:	4770      	bx	lr

0000ad96 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ad96:	b480      	push	{r7}
    ad98:	af00      	add	r7, sp, #0
		}
    ad9a:	bf00      	nop
    ad9c:	46bd      	mov	sp, r7
    ad9e:	bc80      	pop	{r7}
    ada0:	4770      	bx	lr
	...

0000ada4 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
    ada4:	b580      	push	{r7, lr}
    ada6:	b082      	sub	sp, #8
    ada8:	af00      	add	r7, sp, #0
    adaa:	6078      	str	r0, [r7, #4]
	free(p);
    adac:	6878      	ldr	r0, [r7, #4]
    adae:	4b03      	ldr	r3, [pc, #12]	; (adbc <_ZdlPv+0x18>)
    adb0:	4798      	blx	r3
	}
    adb2:	bf00      	nop
    adb4:	3708      	adds	r7, #8
    adb6:	46bd      	mov	sp, r7
    adb8:	bd80      	pop	{r7, pc}
    adba:	bf00      	nop
    adbc:	0000ad85 	.word	0x0000ad85

0000adc0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    adc0:	b590      	push	{r4, r7, lr}
    adc2:	b083      	sub	sp, #12
    adc4:	af00      	add	r7, sp, #0
    adc6:	6078      	str	r0, [r7, #4]
    adc8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    adca:	683b      	ldr	r3, [r7, #0]
    adcc:	2b00      	cmp	r3, #0
    adce:	d101      	bne.n	add4 <_ZN5Print5writeEPKc+0x14>
    add0:	2300      	movs	r3, #0
    add2:	e00c      	b.n	adee <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    add4:	687b      	ldr	r3, [r7, #4]
    add6:	681b      	ldr	r3, [r3, #0]
    add8:	3304      	adds	r3, #4
    adda:	681c      	ldr	r4, [r3, #0]
    addc:	6838      	ldr	r0, [r7, #0]
    adde:	4b06      	ldr	r3, [pc, #24]	; (adf8 <_ZN5Print5writeEPKc+0x38>)
    ade0:	4798      	blx	r3
    ade2:	4603      	mov	r3, r0
    ade4:	461a      	mov	r2, r3
    ade6:	6839      	ldr	r1, [r7, #0]
    ade8:	6878      	ldr	r0, [r7, #4]
    adea:	47a0      	blx	r4
    adec:	4603      	mov	r3, r0
    }
    adee:	4618      	mov	r0, r3
    adf0:	370c      	adds	r7, #12
    adf2:	46bd      	mov	sp, r7
    adf4:	bd90      	pop	{r4, r7, pc}
    adf6:	bf00      	nop
    adf8:	0000cfc1 	.word	0x0000cfc1

0000adfc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    adfc:	b580      	push	{r7, lr}
    adfe:	b086      	sub	sp, #24
    ae00:	af00      	add	r7, sp, #0
    ae02:	60f8      	str	r0, [r7, #12]
    ae04:	60b9      	str	r1, [r7, #8]
    ae06:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    ae08:	2300      	movs	r3, #0
    ae0a:	617b      	str	r3, [r7, #20]
  while (size--) {
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	1e5a      	subs	r2, r3, #1
    ae10:	607a      	str	r2, [r7, #4]
    ae12:	2b00      	cmp	r3, #0
    ae14:	bf14      	ite	ne
    ae16:	2301      	movne	r3, #1
    ae18:	2300      	moveq	r3, #0
    ae1a:	b2db      	uxtb	r3, r3
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d016      	beq.n	ae4e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    ae20:	68fb      	ldr	r3, [r7, #12]
    ae22:	681b      	ldr	r3, [r3, #0]
    ae24:	681a      	ldr	r2, [r3, #0]
    ae26:	68bb      	ldr	r3, [r7, #8]
    ae28:	1c59      	adds	r1, r3, #1
    ae2a:	60b9      	str	r1, [r7, #8]
    ae2c:	781b      	ldrb	r3, [r3, #0]
    ae2e:	4619      	mov	r1, r3
    ae30:	68f8      	ldr	r0, [r7, #12]
    ae32:	4790      	blx	r2
    ae34:	4603      	mov	r3, r0
    ae36:	2b00      	cmp	r3, #0
    ae38:	bf14      	ite	ne
    ae3a:	2301      	movne	r3, #1
    ae3c:	2300      	moveq	r3, #0
    ae3e:	b2db      	uxtb	r3, r3
    ae40:	2b00      	cmp	r3, #0
    ae42:	d003      	beq.n	ae4c <_ZN5Print5writeEPKhj+0x50>
    ae44:	697b      	ldr	r3, [r7, #20]
    ae46:	3301      	adds	r3, #1
    ae48:	617b      	str	r3, [r7, #20]
  while (size--) {
    ae4a:	e7df      	b.n	ae0c <_ZN5Print5writeEPKhj+0x10>
    else break;
    ae4c:	bf00      	nop
  }
  return n;
    ae4e:	697b      	ldr	r3, [r7, #20]
}
    ae50:	4618      	mov	r0, r3
    ae52:	3718      	adds	r7, #24
    ae54:	46bd      	mov	sp, r7
    ae56:	bd80      	pop	{r7, pc}

0000ae58 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	b082      	sub	sp, #8
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	6078      	str	r0, [r7, #4]
    ae60:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
    ae62:	6839      	ldr	r1, [r7, #0]
    ae64:	6878      	ldr	r0, [r7, #4]
    ae66:	4b03      	ldr	r3, [pc, #12]	; (ae74 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
    ae68:	4798      	blx	r3
    ae6a:	4603      	mov	r3, r0
}
    ae6c:	4618      	mov	r0, r3
    ae6e:	3708      	adds	r7, #8
    ae70:	46bd      	mov	sp, r7
    ae72:	bd80      	pop	{r7, pc}
    ae74:	0000ae79 	.word	0x0000ae79

0000ae78 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    ae78:	b580      	push	{r7, lr}
    ae7a:	b082      	sub	sp, #8
    ae7c:	af00      	add	r7, sp, #0
    ae7e:	6078      	str	r0, [r7, #4]
    ae80:	6039      	str	r1, [r7, #0]
  return write(str);
    ae82:	6839      	ldr	r1, [r7, #0]
    ae84:	6878      	ldr	r0, [r7, #4]
    ae86:	4b03      	ldr	r3, [pc, #12]	; (ae94 <_ZN5Print5printEPKc+0x1c>)
    ae88:	4798      	blx	r3
    ae8a:	4603      	mov	r3, r0
}
    ae8c:	4618      	mov	r0, r3
    ae8e:	3708      	adds	r7, #8
    ae90:	46bd      	mov	sp, r7
    ae92:	bd80      	pop	{r7, pc}
    ae94:	0000adc1 	.word	0x0000adc1

0000ae98 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    ae98:	b580      	push	{r7, lr}
    ae9a:	b082      	sub	sp, #8
    ae9c:	af00      	add	r7, sp, #0
    ae9e:	6078      	str	r0, [r7, #4]
    aea0:	460b      	mov	r3, r1
    aea2:	70fb      	strb	r3, [r7, #3]
  return write(c);
    aea4:	687b      	ldr	r3, [r7, #4]
    aea6:	681b      	ldr	r3, [r3, #0]
    aea8:	681b      	ldr	r3, [r3, #0]
    aeaa:	78fa      	ldrb	r2, [r7, #3]
    aeac:	4611      	mov	r1, r2
    aeae:	6878      	ldr	r0, [r7, #4]
    aeb0:	4798      	blx	r3
    aeb2:	4603      	mov	r3, r0
}
    aeb4:	4618      	mov	r0, r3
    aeb6:	3708      	adds	r7, #8
    aeb8:	46bd      	mov	sp, r7
    aeba:	bd80      	pop	{r7, pc}

0000aebc <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    aebc:	b580      	push	{r7, lr}
    aebe:	b084      	sub	sp, #16
    aec0:	af00      	add	r7, sp, #0
    aec2:	60f8      	str	r0, [r7, #12]
    aec4:	460b      	mov	r3, r1
    aec6:	607a      	str	r2, [r7, #4]
    aec8:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    aeca:	7afb      	ldrb	r3, [r7, #11]
    aecc:	687a      	ldr	r2, [r7, #4]
    aece:	4619      	mov	r1, r3
    aed0:	68f8      	ldr	r0, [r7, #12]
    aed2:	4b03      	ldr	r3, [pc, #12]	; (aee0 <_ZN5Print5printEhi+0x24>)
    aed4:	4798      	blx	r3
    aed6:	4603      	mov	r3, r0
}
    aed8:	4618      	mov	r0, r3
    aeda:	3710      	adds	r7, #16
    aedc:	46bd      	mov	sp, r7
    aede:	bd80      	pop	{r7, pc}
    aee0:	0000aee5 	.word	0x0000aee5

0000aee4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    aee4:	b580      	push	{r7, lr}
    aee6:	b084      	sub	sp, #16
    aee8:	af00      	add	r7, sp, #0
    aeea:	60f8      	str	r0, [r7, #12]
    aeec:	60b9      	str	r1, [r7, #8]
    aeee:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	2b00      	cmp	r3, #0
    aef4:	d109      	bne.n	af0a <_ZN5Print5printEmi+0x26>
    aef6:	68fb      	ldr	r3, [r7, #12]
    aef8:	681b      	ldr	r3, [r3, #0]
    aefa:	681b      	ldr	r3, [r3, #0]
    aefc:	68ba      	ldr	r2, [r7, #8]
    aefe:	b2d2      	uxtb	r2, r2
    af00:	4611      	mov	r1, r2
    af02:	68f8      	ldr	r0, [r7, #12]
    af04:	4798      	blx	r3
    af06:	4603      	mov	r3, r0
    af08:	e007      	b.n	af1a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    af0a:	687b      	ldr	r3, [r7, #4]
    af0c:	b2db      	uxtb	r3, r3
    af0e:	461a      	mov	r2, r3
    af10:	68b9      	ldr	r1, [r7, #8]
    af12:	68f8      	ldr	r0, [r7, #12]
    af14:	4b03      	ldr	r3, [pc, #12]	; (af24 <_ZN5Print5printEmi+0x40>)
    af16:	4798      	blx	r3
    af18:	4603      	mov	r3, r0
}
    af1a:	4618      	mov	r0, r3
    af1c:	3710      	adds	r7, #16
    af1e:	46bd      	mov	sp, r7
    af20:	bd80      	pop	{r7, pc}
    af22:	bf00      	nop
    af24:	0000afb5 	.word	0x0000afb5

0000af28 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    af28:	b580      	push	{r7, lr}
    af2a:	b084      	sub	sp, #16
    af2c:	af00      	add	r7, sp, #0
    af2e:	6078      	str	r0, [r7, #4]
    af30:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
    af32:	6839      	ldr	r1, [r7, #0]
    af34:	6878      	ldr	r0, [r7, #4]
    af36:	4b07      	ldr	r3, [pc, #28]	; (af54 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
    af38:	4798      	blx	r3
    af3a:	60f8      	str	r0, [r7, #12]
  n += println();
    af3c:	6878      	ldr	r0, [r7, #4]
    af3e:	4b06      	ldr	r3, [pc, #24]	; (af58 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
    af40:	4798      	blx	r3
    af42:	4602      	mov	r2, r0
    af44:	68fb      	ldr	r3, [r7, #12]
    af46:	4413      	add	r3, r2
    af48:	60fb      	str	r3, [r7, #12]
  return n;
    af4a:	68fb      	ldr	r3, [r7, #12]
}
    af4c:	4618      	mov	r0, r3
    af4e:	3710      	adds	r7, #16
    af50:	46bd      	mov	sp, r7
    af52:	bd80      	pop	{r7, pc}
    af54:	0000ae59 	.word	0x0000ae59
    af58:	0000af5d 	.word	0x0000af5d

0000af5c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    af5c:	b580      	push	{r7, lr}
    af5e:	b082      	sub	sp, #8
    af60:	af00      	add	r7, sp, #0
    af62:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    af64:	4904      	ldr	r1, [pc, #16]	; (af78 <_ZN5Print7printlnEv+0x1c>)
    af66:	6878      	ldr	r0, [r7, #4]
    af68:	4b04      	ldr	r3, [pc, #16]	; (af7c <_ZN5Print7printlnEv+0x20>)
    af6a:	4798      	blx	r3
    af6c:	4603      	mov	r3, r0
}
    af6e:	4618      	mov	r0, r3
    af70:	3708      	adds	r7, #8
    af72:	46bd      	mov	sp, r7
    af74:	bd80      	pop	{r7, pc}
    af76:	bf00      	nop
    af78:	0000ec8c 	.word	0x0000ec8c
    af7c:	0000adc1 	.word	0x0000adc1

0000af80 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    af80:	b580      	push	{r7, lr}
    af82:	b084      	sub	sp, #16
    af84:	af00      	add	r7, sp, #0
    af86:	6078      	str	r0, [r7, #4]
    af88:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    af8a:	6839      	ldr	r1, [r7, #0]
    af8c:	6878      	ldr	r0, [r7, #4]
    af8e:	4b07      	ldr	r3, [pc, #28]	; (afac <_ZN5Print7printlnEPKc+0x2c>)
    af90:	4798      	blx	r3
    af92:	60f8      	str	r0, [r7, #12]
  n += println();
    af94:	6878      	ldr	r0, [r7, #4]
    af96:	4b06      	ldr	r3, [pc, #24]	; (afb0 <_ZN5Print7printlnEPKc+0x30>)
    af98:	4798      	blx	r3
    af9a:	4602      	mov	r2, r0
    af9c:	68fb      	ldr	r3, [r7, #12]
    af9e:	4413      	add	r3, r2
    afa0:	60fb      	str	r3, [r7, #12]
  return n;
    afa2:	68fb      	ldr	r3, [r7, #12]
}
    afa4:	4618      	mov	r0, r3
    afa6:	3710      	adds	r7, #16
    afa8:	46bd      	mov	sp, r7
    afaa:	bd80      	pop	{r7, pc}
    afac:	0000ae79 	.word	0x0000ae79
    afb0:	0000af5d 	.word	0x0000af5d

0000afb4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    afb4:	b580      	push	{r7, lr}
    afb6:	b08e      	sub	sp, #56	; 0x38
    afb8:	af00      	add	r7, sp, #0
    afba:	60f8      	str	r0, [r7, #12]
    afbc:	60b9      	str	r1, [r7, #8]
    afbe:	4613      	mov	r3, r2
    afc0:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    afc2:	f107 0310 	add.w	r3, r7, #16
    afc6:	3320      	adds	r3, #32
    afc8:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    afca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    afcc:	2200      	movs	r2, #0
    afce:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    afd0:	79fb      	ldrb	r3, [r7, #7]
    afd2:	2b01      	cmp	r3, #1
    afd4:	dc01      	bgt.n	afda <_ZN5Print11printNumberEmh+0x26>
    afd6:	230a      	movs	r3, #10
    afd8:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    afda:	79fa      	ldrb	r2, [r7, #7]
    afdc:	68bb      	ldr	r3, [r7, #8]
    afde:	fbb3 f1f2 	udiv	r1, r3, r2
    afe2:	fb02 f201 	mul.w	r2, r2, r1
    afe6:	1a9b      	subs	r3, r3, r2
    afe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    afec:	79fb      	ldrb	r3, [r7, #7]
    afee:	68ba      	ldr	r2, [r7, #8]
    aff0:	fbb2 f3f3 	udiv	r3, r2, r3
    aff4:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    aff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aff8:	3b01      	subs	r3, #1
    affa:	637b      	str	r3, [r7, #52]	; 0x34
    affc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    b000:	2b09      	cmp	r3, #9
    b002:	dc04      	bgt.n	b00e <_ZN5Print11printNumberEmh+0x5a>
    b004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    b008:	3330      	adds	r3, #48	; 0x30
    b00a:	b2db      	uxtb	r3, r3
    b00c:	e003      	b.n	b016 <_ZN5Print11printNumberEmh+0x62>
    b00e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    b012:	3337      	adds	r3, #55	; 0x37
    b014:	b2db      	uxtb	r3, r3
    b016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b018:	7013      	strb	r3, [r2, #0]
  } while(n);
    b01a:	68bb      	ldr	r3, [r7, #8]
    b01c:	2b00      	cmp	r3, #0
    b01e:	d000      	beq.n	b022 <_ZN5Print11printNumberEmh+0x6e>
  do {
    b020:	e7db      	b.n	afda <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    b022:	6b79      	ldr	r1, [r7, #52]	; 0x34
    b024:	68f8      	ldr	r0, [r7, #12]
    b026:	4b03      	ldr	r3, [pc, #12]	; (b034 <_ZN5Print11printNumberEmh+0x80>)
    b028:	4798      	blx	r3
    b02a:	4603      	mov	r3, r0
}
    b02c:	4618      	mov	r0, r3
    b02e:	3738      	adds	r7, #56	; 0x38
    b030:	46bd      	mov	sp, r7
    b032:	bd80      	pop	{r7, pc}
    b034:	0000adc1 	.word	0x0000adc1

0000b038 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
    b038:	b480      	push	{r7}
    b03a:	b083      	sub	sp, #12
    b03c:	af00      	add	r7, sp, #0
    b03e:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
    b040:	4b04      	ldr	r3, [pc, #16]	; (b054 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
    b042:	681b      	ldr	r3, [r3, #0]
    b044:	2201      	movs	r2, #1
    b046:	701a      	strb	r2, [r3, #0]

}
    b048:	bf00      	nop
    b04a:	370c      	adds	r7, #12
    b04c:	46bd      	mov	sp, r7
    b04e:	bc80      	pop	{r7}
    b050:	4770      	bx	lr
    b052:	bf00      	nop
    b054:	2000372c 	.word	0x2000372c

0000b058 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
    b058:	b480      	push	{r7}
    b05a:	b083      	sub	sp, #12
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
    b060:	4b04      	ldr	r3, [pc, #16]	; (b074 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
    b062:	681b      	ldr	r3, [r3, #0]
    b064:	2201      	movs	r2, #1
    b066:	705a      	strb	r2, [r3, #1]
}
    b068:	bf00      	nop
    b06a:	370c      	adds	r7, #12
    b06c:	46bd      	mov	sp, r7
    b06e:	bc80      	pop	{r7}
    b070:	4770      	bx	lr
    b072:	bf00      	nop
    b074:	2000372c 	.word	0x2000372c

0000b078 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
    b078:	b580      	push	{r7, lr}
    b07a:	b082      	sub	sp, #8
    b07c:	af00      	add	r7, sp, #0
    b07e:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->clear_ack();
    b080:	4b08      	ldr	r3, [pc, #32]	; (b0a4 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    b082:	681b      	ldr	r3, [r3, #0]
    b084:	4618      	mov	r0, r3
    b086:	4b08      	ldr	r3, [pc, #32]	; (b0a8 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
    b088:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
    b08a:	4b06      	ldr	r3, [pc, #24]	; (b0a4 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    b08c:	681b      	ldr	r3, [r3, #0]
    b08e:	2201      	movs	r2, #1
    b090:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
    b092:	4b04      	ldr	r3, [pc, #16]	; (b0a4 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    b094:	681b      	ldr	r3, [r3, #0]
    b096:	2201      	movs	r2, #1
    b098:	705a      	strb	r2, [r3, #1]
 }
    b09a:	bf00      	nop
    b09c:	3708      	adds	r7, #8
    b09e:	46bd      	mov	sp, r7
    b0a0:	bd80      	pop	{r7, pc}
    b0a2:	bf00      	nop
    b0a4:	2000372c 	.word	0x2000372c
    b0a8:	0000b25d 	.word	0x0000b25d

0000b0ac <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
    b0ac:	b480      	push	{r7}
    b0ae:	b083      	sub	sp, #12
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
    b0b4:	687b      	ldr	r3, [r7, #4]
    b0b6:	4a05      	ldr	r2, [pc, #20]	; (b0cc <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
    b0b8:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    b0ba:	4a05      	ldr	r2, [pc, #20]	; (b0d0 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
    b0bc:	687b      	ldr	r3, [r7, #4]
    b0be:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
    b0c0:	687b      	ldr	r3, [r7, #4]
    b0c2:	4618      	mov	r0, r3
    b0c4:	370c      	adds	r7, #12
    b0c6:	46bd      	mov	sp, r7
    b0c8:	bc80      	pop	{r7}
    b0ca:	4770      	bx	lr
    b0cc:	20003848 	.word	0x20003848
    b0d0:	2000372c 	.word	0x2000372c

0000b0d4 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
    b0d4:	b480      	push	{r7}
    b0d6:	b083      	sub	sp, #12
    b0d8:	af00      	add	r7, sp, #0
    b0da:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
    b0dc:	687b      	ldr	r3, [r7, #4]
    b0de:	4618      	mov	r0, r3
    b0e0:	370c      	adds	r7, #12
    b0e2:	46bd      	mov	sp, r7
    b0e4:	bc80      	pop	{r7}
    b0e6:	4770      	bx	lr

0000b0e8 <_ZN14I2C_Asyn_Class14set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::set_descriptor(i2c_m_async_desc * i2c_a){
    b0e8:	b480      	push	{r7}
    b0ea:	b083      	sub	sp, #12
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	6078      	str	r0, [r7, #4]
    b0f0:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	683a      	ldr	r2, [r7, #0]
    b0f6:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    b0f8:	4a03      	ldr	r2, [pc, #12]	; (b108 <_ZN14I2C_Asyn_Class14set_descriptorEP16i2c_m_async_desc+0x20>)
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	6013      	str	r3, [r2, #0]
}
    b0fe:	bf00      	nop
    b100:	370c      	adds	r7, #12
    b102:	46bd      	mov	sp, r7
    b104:	bc80      	pop	{r7}
    b106:	4770      	bx	lr
    b108:	2000372c 	.word	0x2000372c

0000b10c <_ZN14I2C_Asyn_Class4initEv>:

uint8_t	I2C_Asyn_Class::init(void){
    b10c:	b580      	push	{r7, lr}
    b10e:	b084      	sub	sp, #16
    b110:	af00      	add	r7, sp, #0
    b112:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
    b114:	687b      	ldr	r3, [r7, #4]
    b116:	689a      	ldr	r2, [r3, #8]
    b118:	687b      	ldr	r3, [r7, #4]
    b11a:	3304      	adds	r3, #4
    b11c:	4619      	mov	r1, r3
    b11e:	4610      	mov	r0, r2
    b120:	4b14      	ldr	r3, [pc, #80]	; (b174 <_ZN14I2C_Asyn_Class4initEv+0x68>)
    b122:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
    b124:	687b      	ldr	r3, [r7, #4]
    b126:	689b      	ldr	r3, [r3, #8]
    b128:	4618      	mov	r0, r3
    b12a:	4b13      	ldr	r3, [pc, #76]	; (b178 <_ZN14I2C_Asyn_Class4initEv+0x6c>)
    b12c:	4798      	blx	r3
    b12e:	4603      	mov	r3, r0
    b130:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
    b132:	687b      	ldr	r3, [r7, #4]
    b134:	689b      	ldr	r3, [r3, #8]
    b136:	4a11      	ldr	r2, [pc, #68]	; (b17c <_ZN14I2C_Asyn_Class4initEv+0x70>)
    b138:	2101      	movs	r1, #1
    b13a:	4618      	mov	r0, r3
    b13c:	4b10      	ldr	r3, [pc, #64]	; (b180 <_ZN14I2C_Asyn_Class4initEv+0x74>)
    b13e:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
    b140:	687b      	ldr	r3, [r7, #4]
    b142:	689b      	ldr	r3, [r3, #8]
    b144:	4a0f      	ldr	r2, [pc, #60]	; (b184 <_ZN14I2C_Asyn_Class4initEv+0x78>)
    b146:	2102      	movs	r1, #2
    b148:	4618      	mov	r0, r3
    b14a:	4b0d      	ldr	r3, [pc, #52]	; (b180 <_ZN14I2C_Asyn_Class4initEv+0x74>)
    b14c:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	689b      	ldr	r3, [r3, #8]
    b152:	4a0d      	ldr	r2, [pc, #52]	; (b188 <_ZN14I2C_Asyn_Class4initEv+0x7c>)
    b154:	2100      	movs	r1, #0
    b156:	4618      	mov	r0, r3
    b158:	4b09      	ldr	r3, [pc, #36]	; (b180 <_ZN14I2C_Asyn_Class4initEv+0x74>)
    b15a:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	2201      	movs	r2, #1
    b160:	701a      	strb	r2, [r3, #0]
	rxReady=true;
    b162:	687b      	ldr	r3, [r7, #4]
    b164:	2201      	movs	r2, #1
    b166:	705a      	strb	r2, [r3, #1]
	return ena;
    b168:	7bfb      	ldrb	r3, [r7, #15]
	
}
    b16a:	4618      	mov	r0, r3
    b16c:	3710      	adds	r7, #16
    b16e:	46bd      	mov	sp, r7
    b170:	bd80      	pop	{r7, pc}
    b172:	bf00      	nop
    b174:	00002817 	.word	0x00002817
    b178:	00002799 	.word	0x00002799
    b17c:	0000b039 	.word	0x0000b039
    b180:	000027f5 	.word	0x000027f5
    b184:	0000b059 	.word	0x0000b059
    b188:	0000b079 	.word	0x0000b079

0000b18c <_ZN14I2C_Asyn_Class4initEh>:
uint8_t	I2C_Asyn_Class::init(uint8_t add){
    b18c:	b580      	push	{r7, lr}
    b18e:	b084      	sub	sp, #16
    b190:	af00      	add	r7, sp, #0
    b192:	6078      	str	r0, [r7, #4]
    b194:	460b      	mov	r3, r1
    b196:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=init();
    b198:	6878      	ldr	r0, [r7, #4]
    b19a:	4b0c      	ldr	r3, [pc, #48]	; (b1cc <_ZN14I2C_Asyn_Class4initEh+0x40>)
    b19c:	4798      	blx	r3
    b19e:	4603      	mov	r3, r0
    b1a0:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
    b1a2:	687b      	ldr	r3, [r7, #4]
    b1a4:	689b      	ldr	r3, [r3, #8]
    b1a6:	78fa      	ldrb	r2, [r7, #3]
    b1a8:	b211      	sxth	r1, r2
    b1aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b1ae:	4618      	mov	r0, r3
    b1b0:	4b07      	ldr	r3, [pc, #28]	; (b1d0 <_ZN14I2C_Asyn_Class4initEh+0x44>)
    b1b2:	4798      	blx	r3
	txReady=true;
    b1b4:	687b      	ldr	r3, [r7, #4]
    b1b6:	2201      	movs	r2, #1
    b1b8:	701a      	strb	r2, [r3, #0]
	rxReady=true;
    b1ba:	687b      	ldr	r3, [r7, #4]
    b1bc:	2201      	movs	r2, #1
    b1be:	705a      	strb	r2, [r3, #1]
	return ena;
    b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
    b1c2:	4618      	mov	r0, r3
    b1c4:	3710      	adds	r7, #16
    b1c6:	46bd      	mov	sp, r7
    b1c8:	bd80      	pop	{r7, pc}
    b1ca:	bf00      	nop
    b1cc:	0000b10d 	.word	0x0000b10d
    b1d0:	000027e5 	.word	0x000027e5

0000b1d4 <_ZN14I2C_Asyn_Class5writeEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::write(uint8_t* buffer, uint16_t lenght){
    b1d4:	b580      	push	{r7, lr}
    b1d6:	b084      	sub	sp, #16
    b1d8:	af00      	add	r7, sp, #0
    b1da:	60f8      	str	r0, [r7, #12]
    b1dc:	60b9      	str	r1, [r7, #8]
    b1de:	4613      	mov	r3, r2
    b1e0:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
    b1e2:	68fb      	ldr	r3, [r7, #12]
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	b2db      	uxtb	r3, r3
    b1e8:	f083 0301 	eor.w	r3, r3, #1
    b1ec:	b2db      	uxtb	r3, r3
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	d000      	beq.n	b1f4 <_ZN14I2C_Asyn_Class5writeEPht+0x20>
    b1f2:	e7f6      	b.n	b1e2 <_ZN14I2C_Asyn_Class5writeEPht+0xe>
	txReady=false;
    b1f4:	68fb      	ldr	r3, [r7, #12]
    b1f6:	2200      	movs	r2, #0
    b1f8:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
    b1fa:	68fb      	ldr	r3, [r7, #12]
    b1fc:	685b      	ldr	r3, [r3, #4]
    b1fe:	88fa      	ldrh	r2, [r7, #6]
    b200:	68b9      	ldr	r1, [r7, #8]
    b202:	4618      	mov	r0, r3
    b204:	4b03      	ldr	r3, [pc, #12]	; (b214 <_ZN14I2C_Asyn_Class5writeEPht+0x40>)
    b206:	4798      	blx	r3
    b208:	4603      	mov	r3, r0
}
    b20a:	4618      	mov	r0, r3
    b20c:	3710      	adds	r7, #16
    b20e:	46bd      	mov	sp, r7
    b210:	bd80      	pop	{r7, pc}
    b212:	bf00      	nop
    b214:	0000b27d 	.word	0x0000b27d

0000b218 <_ZN14I2C_Asyn_Class4readEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::read(uint8_t* buffer, uint16_t lenght){
    b218:	b580      	push	{r7, lr}
    b21a:	b084      	sub	sp, #16
    b21c:	af00      	add	r7, sp, #0
    b21e:	60f8      	str	r0, [r7, #12]
    b220:	60b9      	str	r1, [r7, #8]
    b222:	4613      	mov	r3, r2
    b224:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
    b226:	68fb      	ldr	r3, [r7, #12]
    b228:	785b      	ldrb	r3, [r3, #1]
    b22a:	b2db      	uxtb	r3, r3
    b22c:	f083 0301 	eor.w	r3, r3, #1
    b230:	b2db      	uxtb	r3, r3
    b232:	2b00      	cmp	r3, #0
    b234:	d000      	beq.n	b238 <_ZN14I2C_Asyn_Class4readEPht+0x20>
    b236:	e7f6      	b.n	b226 <_ZN14I2C_Asyn_Class4readEPht+0xe>
		rxReady=false;
    b238:	68fb      	ldr	r3, [r7, #12]
    b23a:	2200      	movs	r2, #0
    b23c:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
    b23e:	68fb      	ldr	r3, [r7, #12]
    b240:	685b      	ldr	r3, [r3, #4]
    b242:	88fa      	ldrh	r2, [r7, #6]
    b244:	68b9      	ldr	r1, [r7, #8]
    b246:	4618      	mov	r0, r3
    b248:	4b03      	ldr	r3, [pc, #12]	; (b258 <_ZN14I2C_Asyn_Class4readEPht+0x40>)
    b24a:	4798      	blx	r3
    b24c:	4603      	mov	r3, r0
}
    b24e:	4618      	mov	r0, r3
    b250:	3710      	adds	r7, #16
    b252:	46bd      	mov	sp, r7
    b254:	bd80      	pop	{r7, pc}
    b256:	bf00      	nop
    b258:	0000b2ad 	.word	0x0000b2ad

0000b25c <_ZN14I2C_Asyn_Class9clear_ackEv>:
int32_t I2C_Asyn_Class::send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::clear_ack(void){
    b25c:	b480      	push	{r7}
    b25e:	b083      	sub	sp, #12
    b260:	af00      	add	r7, sp, #0
    b262:	6078      	str	r0, [r7, #4]
	 ack=false;
    b264:	687b      	ldr	r3, [r7, #4]
    b266:	2200      	movs	r2, #0
    b268:	709a      	strb	r2, [r3, #2]
	 return ack;
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	789b      	ldrb	r3, [r3, #2]
    b26e:	b2db      	uxtb	r3, r3
    b270:	4618      	mov	r0, r3
    b272:	370c      	adds	r7, #12
    b274:	46bd      	mov	sp, r7
    b276:	bc80      	pop	{r7}
    b278:	4770      	bx	lr
	...

0000b27c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    b27c:	b570      	push	{r4, r5, r6, lr}
    b27e:	460d      	mov	r5, r1
    b280:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    b282:	4604      	mov	r4, r0
    b284:	b160      	cbz	r0, b2a0 <io_write+0x24>
    b286:	1c08      	adds	r0, r1, #0
    b288:	bf18      	it	ne
    b28a:	2001      	movne	r0, #1
    b28c:	2234      	movs	r2, #52	; 0x34
    b28e:	4905      	ldr	r1, [pc, #20]	; (b2a4 <io_write+0x28>)
    b290:	4b05      	ldr	r3, [pc, #20]	; (b2a8 <io_write+0x2c>)
    b292:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    b294:	6823      	ldr	r3, [r4, #0]
    b296:	4632      	mov	r2, r6
    b298:	4629      	mov	r1, r5
    b29a:	4620      	mov	r0, r4
    b29c:	4798      	blx	r3
}
    b29e:	bd70      	pop	{r4, r5, r6, pc}
    b2a0:	2000      	movs	r0, #0
    b2a2:	e7f3      	b.n	b28c <io_write+0x10>
    b2a4:	0000ecb4 	.word	0x0000ecb4
    b2a8:	00003565 	.word	0x00003565

0000b2ac <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    b2ac:	b570      	push	{r4, r5, r6, lr}
    b2ae:	460d      	mov	r5, r1
    b2b0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    b2b2:	4604      	mov	r4, r0
    b2b4:	b160      	cbz	r0, b2d0 <io_read+0x24>
    b2b6:	1c08      	adds	r0, r1, #0
    b2b8:	bf18      	it	ne
    b2ba:	2001      	movne	r0, #1
    b2bc:	223d      	movs	r2, #61	; 0x3d
    b2be:	4905      	ldr	r1, [pc, #20]	; (b2d4 <io_read+0x28>)
    b2c0:	4b05      	ldr	r3, [pc, #20]	; (b2d8 <io_read+0x2c>)
    b2c2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    b2c4:	6863      	ldr	r3, [r4, #4]
    b2c6:	4632      	mov	r2, r6
    b2c8:	4629      	mov	r1, r5
    b2ca:	4620      	mov	r0, r4
    b2cc:	4798      	blx	r3
}
    b2ce:	bd70      	pop	{r4, r5, r6, pc}
    b2d0:	2000      	movs	r0, #0
    b2d2:	e7f3      	b.n	b2bc <io_read+0x10>
    b2d4:	0000ecb4 	.word	0x0000ecb4
    b2d8:	00003565 	.word	0x00003565

0000b2dc <__aeabi_atexit>:
    b2dc:	460b      	mov	r3, r1
    b2de:	4601      	mov	r1, r0
    b2e0:	4618      	mov	r0, r3
    b2e2:	f001 bd2f 	b.w	cd44 <__cxa_atexit>
    b2e6:	bf00      	nop

0000b2e8 <_ZdlPvj>:
    b2e8:	f7ff bd5c 	b.w	ada4 <_ZdlPv>

0000b2ec <pow>:
    b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2f0:	f8df 92f0 	ldr.w	r9, [pc, #752]	; b5e4 <pow+0x2f8>
    b2f4:	b08d      	sub	sp, #52	; 0x34
    b2f6:	4606      	mov	r6, r0
    b2f8:	460f      	mov	r7, r1
    b2fa:	4614      	mov	r4, r2
    b2fc:	461d      	mov	r5, r3
    b2fe:	f000 f973 	bl	b5e8 <__ieee754_pow>
    b302:	f999 8000 	ldrsb.w	r8, [r9]
    b306:	f1b8 3fff 	cmp.w	r8, #4294967295
    b30a:	e9cd 0100 	strd	r0, r1, [sp]
    b30e:	d036      	beq.n	b37e <pow+0x92>
    b310:	4622      	mov	r2, r4
    b312:	462b      	mov	r3, r5
    b314:	4620      	mov	r0, r4
    b316:	4629      	mov	r1, r5
    b318:	f001 fcde 	bl	ccd8 <__aeabi_dcmpun>
    b31c:	4683      	mov	fp, r0
    b31e:	bb70      	cbnz	r0, b37e <pow+0x92>
    b320:	4632      	mov	r2, r6
    b322:	463b      	mov	r3, r7
    b324:	4630      	mov	r0, r6
    b326:	4639      	mov	r1, r7
    b328:	f001 fcd6 	bl	ccd8 <__aeabi_dcmpun>
    b32c:	2200      	movs	r2, #0
    b32e:	4682      	mov	sl, r0
    b330:	2300      	movs	r3, #0
    b332:	2800      	cmp	r0, #0
    b334:	f040 80a0 	bne.w	b478 <pow+0x18c>
    b338:	4630      	mov	r0, r6
    b33a:	4639      	mov	r1, r7
    b33c:	f001 fc9a 	bl	cc74 <__aeabi_dcmpeq>
    b340:	b310      	cbz	r0, b388 <pow+0x9c>
    b342:	2200      	movs	r2, #0
    b344:	2300      	movs	r3, #0
    b346:	4620      	mov	r0, r4
    b348:	4629      	mov	r1, r5
    b34a:	f001 fc93 	bl	cc74 <__aeabi_dcmpeq>
    b34e:	4683      	mov	fp, r0
    b350:	2800      	cmp	r0, #0
    b352:	d06a      	beq.n	b42a <pow+0x13e>
    b354:	2201      	movs	r2, #1
    b356:	4b9c      	ldr	r3, [pc, #624]	; (b5c8 <pow+0x2dc>)
    b358:	9202      	str	r2, [sp, #8]
    b35a:	2100      	movs	r1, #0
    b35c:	2200      	movs	r2, #0
    b35e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    b362:	e9cd 6704 	strd	r6, r7, [sp, #16]
    b366:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b36a:	e9cd 1208 	strd	r1, r2, [sp, #32]
    b36e:	9303      	str	r3, [sp, #12]
    b370:	f1b8 0f00 	cmp.w	r8, #0
    b374:	d045      	beq.n	b402 <pow+0x116>
    b376:	4c95      	ldr	r4, [pc, #596]	; (b5cc <pow+0x2e0>)
    b378:	2300      	movs	r3, #0
    b37a:	e9cd 3400 	strd	r3, r4, [sp]
    b37e:	e9dd 0100 	ldrd	r0, r1, [sp]
    b382:	b00d      	add	sp, #52	; 0x34
    b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b388:	e9dd 0100 	ldrd	r0, r1, [sp]
    b38c:	f000 ff32 	bl	c1f4 <finite>
    b390:	4680      	mov	r8, r0
    b392:	2800      	cmp	r0, #0
    b394:	f000 808b 	beq.w	b4ae <pow+0x1c2>
    b398:	f04f 0a00 	mov.w	sl, #0
    b39c:	f04f 0b00 	mov.w	fp, #0
    b3a0:	4652      	mov	r2, sl
    b3a2:	465b      	mov	r3, fp
    b3a4:	e9dd 0100 	ldrd	r0, r1, [sp]
    b3a8:	f001 fc64 	bl	cc74 <__aeabi_dcmpeq>
    b3ac:	2800      	cmp	r0, #0
    b3ae:	d0e6      	beq.n	b37e <pow+0x92>
    b3b0:	4630      	mov	r0, r6
    b3b2:	4639      	mov	r1, r7
    b3b4:	f000 ff1e 	bl	c1f4 <finite>
    b3b8:	2800      	cmp	r0, #0
    b3ba:	d0e0      	beq.n	b37e <pow+0x92>
    b3bc:	4620      	mov	r0, r4
    b3be:	4629      	mov	r1, r5
    b3c0:	f000 ff18 	bl	c1f4 <finite>
    b3c4:	2800      	cmp	r0, #0
    b3c6:	d0da      	beq.n	b37e <pow+0x92>
    b3c8:	f999 3000 	ldrsb.w	r3, [r9]
    b3cc:	4a7e      	ldr	r2, [pc, #504]	; (b5c8 <pow+0x2dc>)
    b3ce:	9203      	str	r2, [sp, #12]
    b3d0:	2104      	movs	r1, #4
    b3d2:	2200      	movs	r2, #0
    b3d4:	2b02      	cmp	r3, #2
    b3d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    b3da:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b3de:	e9cd ab08 	strd	sl, fp, [sp, #32]
    b3e2:	9102      	str	r1, [sp, #8]
    b3e4:	920a      	str	r2, [sp, #40]	; 0x28
    b3e6:	d003      	beq.n	b3f0 <pow+0x104>
    b3e8:	a802      	add	r0, sp, #8
    b3ea:	f000 ff09 	bl	c200 <matherr>
    b3ee:	b968      	cbnz	r0, b40c <pow+0x120>
    b3f0:	f001 fcb4 	bl	cd5c <__errno>
    b3f4:	2322      	movs	r3, #34	; 0x22
    b3f6:	6003      	str	r3, [r0, #0]
    b3f8:	e008      	b.n	b40c <pow+0x120>
    b3fa:	2300      	movs	r3, #0
    b3fc:	2400      	movs	r4, #0
    b3fe:	e9cd 3408 	strd	r3, r4, [sp, #32]
    b402:	a802      	add	r0, sp, #8
    b404:	f000 fefc 	bl	c200 <matherr>
    b408:	2800      	cmp	r0, #0
    b40a:	d030      	beq.n	b46e <pow+0x182>
    b40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b40e:	b11b      	cbz	r3, b418 <pow+0x12c>
    b410:	f001 fca4 	bl	cd5c <__errno>
    b414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b416:	6003      	str	r3, [r0, #0]
    b418:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    b41c:	e9cd 3400 	strd	r3, r4, [sp]
    b420:	e9dd 0100 	ldrd	r0, r1, [sp]
    b424:	b00d      	add	sp, #52	; 0x34
    b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b42a:	4620      	mov	r0, r4
    b42c:	4629      	mov	r1, r5
    b42e:	f000 fee1 	bl	c1f4 <finite>
    b432:	2800      	cmp	r0, #0
    b434:	d0a3      	beq.n	b37e <pow+0x92>
    b436:	2200      	movs	r2, #0
    b438:	2300      	movs	r3, #0
    b43a:	4620      	mov	r0, r4
    b43c:	4629      	mov	r1, r5
    b43e:	f001 fc23 	bl	cc88 <__aeabi_dcmplt>
    b442:	2800      	cmp	r0, #0
    b444:	d09b      	beq.n	b37e <pow+0x92>
    b446:	f999 3000 	ldrsb.w	r3, [r9]
    b44a:	4a5f      	ldr	r2, [pc, #380]	; (b5c8 <pow+0x2dc>)
    b44c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    b450:	2101      	movs	r1, #1
    b452:	e9cd 6704 	strd	r6, r7, [sp, #16]
    b456:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b45a:	9102      	str	r1, [sp, #8]
    b45c:	9203      	str	r2, [sp, #12]
    b45e:	2b00      	cmp	r3, #0
    b460:	d0cb      	beq.n	b3fa <pow+0x10e>
    b462:	495b      	ldr	r1, [pc, #364]	; (b5d0 <pow+0x2e4>)
    b464:	2000      	movs	r0, #0
    b466:	2b02      	cmp	r3, #2
    b468:	e9cd 0108 	strd	r0, r1, [sp, #32]
    b46c:	d1c9      	bne.n	b402 <pow+0x116>
    b46e:	f001 fc75 	bl	cd5c <__errno>
    b472:	2321      	movs	r3, #33	; 0x21
    b474:	6003      	str	r3, [r0, #0]
    b476:	e7c9      	b.n	b40c <pow+0x120>
    b478:	4620      	mov	r0, r4
    b47a:	4629      	mov	r1, r5
    b47c:	f001 fbfa 	bl	cc74 <__aeabi_dcmpeq>
    b480:	2800      	cmp	r0, #0
    b482:	f43f af7c 	beq.w	b37e <pow+0x92>
    b486:	4b51      	ldr	r3, [pc, #324]	; (b5cc <pow+0x2e0>)
    b488:	494f      	ldr	r1, [pc, #316]	; (b5c8 <pow+0x2dc>)
    b48a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    b48e:	2001      	movs	r0, #1
    b490:	2200      	movs	r2, #0
    b492:	f1b8 0f02 	cmp.w	r8, #2
    b496:	e9cd 6704 	strd	r6, r7, [sp, #16]
    b49a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b49e:	9002      	str	r0, [sp, #8]
    b4a0:	9103      	str	r1, [sp, #12]
    b4a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    b4a6:	d1ac      	bne.n	b402 <pow+0x116>
    b4a8:	e9cd 2300 	strd	r2, r3, [sp]
    b4ac:	e767      	b.n	b37e <pow+0x92>
    b4ae:	4630      	mov	r0, r6
    b4b0:	4639      	mov	r1, r7
    b4b2:	f000 fe9f 	bl	c1f4 <finite>
    b4b6:	2800      	cmp	r0, #0
    b4b8:	f43f af6e 	beq.w	b398 <pow+0xac>
    b4bc:	4620      	mov	r0, r4
    b4be:	4629      	mov	r1, r5
    b4c0:	f000 fe98 	bl	c1f4 <finite>
    b4c4:	2800      	cmp	r0, #0
    b4c6:	f43f af67 	beq.w	b398 <pow+0xac>
    b4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
    b4ce:	4610      	mov	r0, r2
    b4d0:	4619      	mov	r1, r3
    b4d2:	f001 fc01 	bl	ccd8 <__aeabi_dcmpun>
    b4d6:	2800      	cmp	r0, #0
    b4d8:	d158      	bne.n	b58c <pow+0x2a0>
    b4da:	2303      	movs	r3, #3
    b4dc:	f999 8000 	ldrsb.w	r8, [r9]
    b4e0:	9302      	str	r3, [sp, #8]
    b4e2:	4b39      	ldr	r3, [pc, #228]	; (b5c8 <pow+0x2dc>)
    b4e4:	900a      	str	r0, [sp, #40]	; 0x28
    b4e6:	9303      	str	r3, [sp, #12]
    b4e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    b4ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b4f0:	2200      	movs	r2, #0
    b4f2:	2300      	movs	r3, #0
    b4f4:	4630      	mov	r0, r6
    b4f6:	4639      	mov	r1, r7
    b4f8:	f1b8 0f00 	cmp.w	r8, #0
    b4fc:	d126      	bne.n	b54c <pow+0x260>
    b4fe:	4f35      	ldr	r7, [pc, #212]	; (b5d4 <pow+0x2e8>)
    b500:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    b504:	e9cd 6708 	strd	r6, r7, [sp, #32]
    b508:	f001 fbbe 	bl	cc88 <__aeabi_dcmplt>
    b50c:	2800      	cmp	r0, #0
    b50e:	f43f af6b 	beq.w	b3e8 <pow+0xfc>
    b512:	2200      	movs	r2, #0
    b514:	4b30      	ldr	r3, [pc, #192]	; (b5d8 <pow+0x2ec>)
    b516:	4620      	mov	r0, r4
    b518:	4629      	mov	r1, r5
    b51a:	f001 f943 	bl	c7a4 <__aeabi_dmul>
    b51e:	4604      	mov	r4, r0
    b520:	460d      	mov	r5, r1
    b522:	f000 fe75 	bl	c210 <rint>
    b526:	4602      	mov	r2, r0
    b528:	460b      	mov	r3, r1
    b52a:	4620      	mov	r0, r4
    b52c:	4629      	mov	r1, r5
    b52e:	f001 fba1 	bl	cc74 <__aeabi_dcmpeq>
    b532:	bb40      	cbnz	r0, b586 <pow+0x29a>
    b534:	4b29      	ldr	r3, [pc, #164]	; (b5dc <pow+0x2f0>)
    b536:	f999 8000 	ldrsb.w	r8, [r9]
    b53a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    b53e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    b542:	f1b8 0f02 	cmp.w	r8, #2
    b546:	f47f af4f 	bne.w	b3e8 <pow+0xfc>
    b54a:	e751      	b.n	b3f0 <pow+0x104>
    b54c:	4f24      	ldr	r7, [pc, #144]	; (b5e0 <pow+0x2f4>)
    b54e:	2600      	movs	r6, #0
    b550:	e9cd 6708 	strd	r6, r7, [sp, #32]
    b554:	f001 fb98 	bl	cc88 <__aeabi_dcmplt>
    b558:	2800      	cmp	r0, #0
    b55a:	d0f2      	beq.n	b542 <pow+0x256>
    b55c:	2200      	movs	r2, #0
    b55e:	4b1e      	ldr	r3, [pc, #120]	; (b5d8 <pow+0x2ec>)
    b560:	4620      	mov	r0, r4
    b562:	4629      	mov	r1, r5
    b564:	f001 f91e 	bl	c7a4 <__aeabi_dmul>
    b568:	4604      	mov	r4, r0
    b56a:	460d      	mov	r5, r1
    b56c:	f000 fe50 	bl	c210 <rint>
    b570:	4602      	mov	r2, r0
    b572:	460b      	mov	r3, r1
    b574:	4620      	mov	r0, r4
    b576:	4629      	mov	r1, r5
    b578:	f001 fb7c 	bl	cc74 <__aeabi_dcmpeq>
    b57c:	b918      	cbnz	r0, b586 <pow+0x29a>
    b57e:	4b14      	ldr	r3, [pc, #80]	; (b5d0 <pow+0x2e4>)
    b580:	2200      	movs	r2, #0
    b582:	e9cd 2308 	strd	r2, r3, [sp, #32]
    b586:	f999 8000 	ldrsb.w	r8, [r9]
    b58a:	e7da      	b.n	b542 <pow+0x256>
    b58c:	f999 9000 	ldrsb.w	r9, [r9]
    b590:	4b0d      	ldr	r3, [pc, #52]	; (b5c8 <pow+0x2dc>)
    b592:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    b596:	2201      	movs	r2, #1
    b598:	e9cd 6704 	strd	r6, r7, [sp, #16]
    b59c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b5a0:	9202      	str	r2, [sp, #8]
    b5a2:	9303      	str	r3, [sp, #12]
    b5a4:	f1b9 0f00 	cmp.w	r9, #0
    b5a8:	f43f af27 	beq.w	b3fa <pow+0x10e>
    b5ac:	2200      	movs	r2, #0
    b5ae:	2300      	movs	r3, #0
    b5b0:	4610      	mov	r0, r2
    b5b2:	4619      	mov	r1, r3
    b5b4:	f001 fa20 	bl	c9f8 <__aeabi_ddiv>
    b5b8:	f1b9 0f02 	cmp.w	r9, #2
    b5bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
    b5c0:	f43f af55 	beq.w	b46e <pow+0x182>
    b5c4:	e71d      	b.n	b402 <pow+0x116>
    b5c6:	bf00      	nop
    b5c8:	0000ecc8 	.word	0x0000ecc8
    b5cc:	3ff00000 	.word	0x3ff00000
    b5d0:	fff00000 	.word	0xfff00000
    b5d4:	47efffff 	.word	0x47efffff
    b5d8:	3fe00000 	.word	0x3fe00000
    b5dc:	c7efffff 	.word	0xc7efffff
    b5e0:	7ff00000 	.word	0x7ff00000
    b5e4:	20000153 	.word	0x20000153

0000b5e8 <__ieee754_pow>:
    b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5ec:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    b5f0:	ea57 0402 	orrs.w	r4, r7, r2
    b5f4:	b093      	sub	sp, #76	; 0x4c
    b5f6:	d037      	beq.n	b668 <__ieee754_pow+0x80>
    b5f8:	4c67      	ldr	r4, [pc, #412]	; (b798 <__ieee754_pow+0x1b0>)
    b5fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    b5fe:	42a6      	cmp	r6, r4
    b600:	4683      	mov	fp, r0
    b602:	460d      	mov	r5, r1
    b604:	dc29      	bgt.n	b65a <__ieee754_pow+0x72>
    b606:	469a      	mov	sl, r3
    b608:	4696      	mov	lr, r2
    b60a:	d025      	beq.n	b658 <__ieee754_pow+0x70>
    b60c:	42a7      	cmp	r7, r4
    b60e:	dc24      	bgt.n	b65a <__ieee754_pow+0x72>
    b610:	4c61      	ldr	r4, [pc, #388]	; (b798 <__ieee754_pow+0x1b0>)
    b612:	42a7      	cmp	r7, r4
    b614:	d079      	beq.n	b70a <__ieee754_pow+0x122>
    b616:	2d00      	cmp	r5, #0
    b618:	4689      	mov	r9, r1
    b61a:	4680      	mov	r8, r0
    b61c:	e9cd 2300 	strd	r2, r3, [sp]
    b620:	db77      	blt.n	b712 <__ieee754_pow+0x12a>
    b622:	2400      	movs	r4, #0
    b624:	f1be 0f00 	cmp.w	lr, #0
    b628:	d12c      	bne.n	b684 <__ieee754_pow+0x9c>
    b62a:	4b5b      	ldr	r3, [pc, #364]	; (b798 <__ieee754_pow+0x1b0>)
    b62c:	429f      	cmp	r7, r3
    b62e:	f000 808b 	beq.w	b748 <__ieee754_pow+0x160>
    b632:	4b5a      	ldr	r3, [pc, #360]	; (b79c <__ieee754_pow+0x1b4>)
    b634:	429f      	cmp	r7, r3
    b636:	d061      	beq.n	b6fc <__ieee754_pow+0x114>
    b638:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    b63c:	f000 83ba 	beq.w	bdb4 <__ieee754_pow+0x7cc>
    b640:	4b57      	ldr	r3, [pc, #348]	; (b7a0 <__ieee754_pow+0x1b8>)
    b642:	459a      	cmp	sl, r3
    b644:	d11e      	bne.n	b684 <__ieee754_pow+0x9c>
    b646:	2d00      	cmp	r5, #0
    b648:	db1c      	blt.n	b684 <__ieee754_pow+0x9c>
    b64a:	4640      	mov	r0, r8
    b64c:	4649      	mov	r1, r9
    b64e:	b013      	add	sp, #76	; 0x4c
    b650:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b654:	f000 bd0e 	b.w	c074 <__ieee754_sqrt>
    b658:	b158      	cbz	r0, b672 <__ieee754_pow+0x8a>
    b65a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    b65e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    b662:	ea56 030b 	orrs.w	r3, r6, fp
    b666:	d106      	bne.n	b676 <__ieee754_pow+0x8e>
    b668:	494c      	ldr	r1, [pc, #304]	; (b79c <__ieee754_pow+0x1b4>)
    b66a:	2000      	movs	r0, #0
    b66c:	b013      	add	sp, #76	; 0x4c
    b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b672:	42b7      	cmp	r7, r6
    b674:	ddcc      	ble.n	b610 <__ieee754_pow+0x28>
    b676:	484b      	ldr	r0, [pc, #300]	; (b7a4 <__ieee754_pow+0x1bc>)
    b678:	b013      	add	sp, #76	; 0x4c
    b67a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b67e:	f000 bdc1 	b.w	c204 <nan>
    b682:	2400      	movs	r4, #0
    b684:	4640      	mov	r0, r8
    b686:	4649      	mov	r1, r9
    b688:	f000 fdb0 	bl	c1ec <fabs>
    b68c:	f1bb 0f00 	cmp.w	fp, #0
    b690:	d119      	bne.n	b6c6 <__ieee754_pow+0xde>
    b692:	b126      	cbz	r6, b69e <__ieee754_pow+0xb6>
    b694:	4b41      	ldr	r3, [pc, #260]	; (b79c <__ieee754_pow+0x1b4>)
    b696:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    b69a:	429a      	cmp	r2, r3
    b69c:	d113      	bne.n	b6c6 <__ieee754_pow+0xde>
    b69e:	f1ba 0f00 	cmp.w	sl, #0
    b6a2:	f2c0 83bc 	blt.w	be1e <__ieee754_pow+0x836>
    b6a6:	2d00      	cmp	r5, #0
    b6a8:	dae0      	bge.n	b66c <__ieee754_pow+0x84>
    b6aa:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    b6ae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    b6b2:	ea56 0304 	orrs.w	r3, r6, r4
    b6b6:	f000 848f 	beq.w	bfd8 <__ieee754_pow+0x9f0>
    b6ba:	2c01      	cmp	r4, #1
    b6bc:	d1d6      	bne.n	b66c <__ieee754_pow+0x84>
    b6be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b6c2:	4619      	mov	r1, r3
    b6c4:	e7d2      	b.n	b66c <__ieee754_pow+0x84>
    b6c6:	0fed      	lsrs	r5, r5, #31
    b6c8:	3d01      	subs	r5, #1
    b6ca:	ea54 0305 	orrs.w	r3, r4, r5
    b6ce:	d04e      	beq.n	b76e <__ieee754_pow+0x186>
    b6d0:	4b35      	ldr	r3, [pc, #212]	; (b7a8 <__ieee754_pow+0x1c0>)
    b6d2:	429f      	cmp	r7, r3
    b6d4:	dd6e      	ble.n	b7b4 <__ieee754_pow+0x1cc>
    b6d6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    b6da:	429f      	cmp	r7, r3
    b6dc:	f340 83e8 	ble.w	beb0 <__ieee754_pow+0x8c8>
    b6e0:	4b32      	ldr	r3, [pc, #200]	; (b7ac <__ieee754_pow+0x1c4>)
    b6e2:	429e      	cmp	r6, r3
    b6e4:	dd4e      	ble.n	b784 <__ieee754_pow+0x19c>
    b6e6:	f1ba 0f00 	cmp.w	sl, #0
    b6ea:	dd4e      	ble.n	b78a <__ieee754_pow+0x1a2>
    b6ec:	a328      	add	r3, pc, #160	; (adr r3, b790 <__ieee754_pow+0x1a8>)
    b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6f2:	4610      	mov	r0, r2
    b6f4:	4619      	mov	r1, r3
    b6f6:	f001 f855 	bl	c7a4 <__aeabi_dmul>
    b6fa:	e7b7      	b.n	b66c <__ieee754_pow+0x84>
    b6fc:	f1ba 0f00 	cmp.w	sl, #0
    b700:	f2c0 843c 	blt.w	bf7c <__ieee754_pow+0x994>
    b704:	4640      	mov	r0, r8
    b706:	4649      	mov	r1, r9
    b708:	e7b0      	b.n	b66c <__ieee754_pow+0x84>
    b70a:	f1be 0f00 	cmp.w	lr, #0
    b70e:	d082      	beq.n	b616 <__ieee754_pow+0x2e>
    b710:	e7a3      	b.n	b65a <__ieee754_pow+0x72>
    b712:	4b27      	ldr	r3, [pc, #156]	; (b7b0 <__ieee754_pow+0x1c8>)
    b714:	429f      	cmp	r7, r3
    b716:	dc28      	bgt.n	b76a <__ieee754_pow+0x182>
    b718:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    b71c:	429f      	cmp	r7, r3
    b71e:	dd80      	ble.n	b622 <__ieee754_pow+0x3a>
    b720:	153b      	asrs	r3, r7, #20
    b722:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    b726:	2b14      	cmp	r3, #20
    b728:	f340 843e 	ble.w	bfa8 <__ieee754_pow+0x9c0>
    b72c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    b730:	fa2e f203 	lsr.w	r2, lr, r3
    b734:	fa02 f303 	lsl.w	r3, r2, r3
    b738:	459e      	cmp	lr, r3
    b73a:	f47f af72 	bne.w	b622 <__ieee754_pow+0x3a>
    b73e:	f002 0201 	and.w	r2, r2, #1
    b742:	f1c2 0402 	rsb	r4, r2, #2
    b746:	e76d      	b.n	b624 <__ieee754_pow+0x3c>
    b748:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    b74c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    b750:	ea53 030b 	orrs.w	r3, r3, fp
    b754:	d088      	beq.n	b668 <__ieee754_pow+0x80>
    b756:	4b15      	ldr	r3, [pc, #84]	; (b7ac <__ieee754_pow+0x1c4>)
    b758:	429e      	cmp	r6, r3
    b75a:	f340 8332 	ble.w	bdc2 <__ieee754_pow+0x7da>
    b75e:	f1ba 0f00 	cmp.w	sl, #0
    b762:	db12      	blt.n	b78a <__ieee754_pow+0x1a2>
    b764:	e9dd 0100 	ldrd	r0, r1, [sp]
    b768:	e780      	b.n	b66c <__ieee754_pow+0x84>
    b76a:	2402      	movs	r4, #2
    b76c:	e75a      	b.n	b624 <__ieee754_pow+0x3c>
    b76e:	4642      	mov	r2, r8
    b770:	464b      	mov	r3, r9
    b772:	4640      	mov	r0, r8
    b774:	4649      	mov	r1, r9
    b776:	f000 fe61 	bl	c43c <__aeabi_dsub>
    b77a:	4602      	mov	r2, r0
    b77c:	460b      	mov	r3, r1
    b77e:	f001 f93b 	bl	c9f8 <__aeabi_ddiv>
    b782:	e773      	b.n	b66c <__ieee754_pow+0x84>
    b784:	f1ba 0f00 	cmp.w	sl, #0
    b788:	dbb0      	blt.n	b6ec <__ieee754_pow+0x104>
    b78a:	2000      	movs	r0, #0
    b78c:	2100      	movs	r1, #0
    b78e:	e76d      	b.n	b66c <__ieee754_pow+0x84>
    b790:	8800759c 	.word	0x8800759c
    b794:	7e37e43c 	.word	0x7e37e43c
    b798:	7ff00000 	.word	0x7ff00000
    b79c:	3ff00000 	.word	0x3ff00000
    b7a0:	3fe00000 	.word	0x3fe00000
    b7a4:	0000d73c 	.word	0x0000d73c
    b7a8:	41e00000 	.word	0x41e00000
    b7ac:	3fefffff 	.word	0x3fefffff
    b7b0:	433fffff 	.word	0x433fffff
    b7b4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    b7b8:	f04f 0200 	mov.w	r2, #0
    b7bc:	da05      	bge.n	b7ca <__ieee754_pow+0x1e2>
    b7be:	4bd4      	ldr	r3, [pc, #848]	; (bb10 <__ieee754_pow+0x528>)
    b7c0:	f000 fff0 	bl	c7a4 <__aeabi_dmul>
    b7c4:	f06f 0234 	mvn.w	r2, #52	; 0x34
    b7c8:	460e      	mov	r6, r1
    b7ca:	1533      	asrs	r3, r6, #20
    b7cc:	4fd1      	ldr	r7, [pc, #836]	; (bb14 <__ieee754_pow+0x52c>)
    b7ce:	f3c6 0613 	ubfx	r6, r6, #0, #20
    b7d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    b7d6:	4413      	add	r3, r2
    b7d8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    b7dc:	42be      	cmp	r6, r7
    b7de:	461a      	mov	r2, r3
    b7e0:	930d      	str	r3, [sp, #52]	; 0x34
    b7e2:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    b7e6:	f340 8321 	ble.w	be2c <__ieee754_pow+0x844>
    b7ea:	4bcb      	ldr	r3, [pc, #812]	; (bb18 <__ieee754_pow+0x530>)
    b7ec:	429e      	cmp	r6, r3
    b7ee:	f340 83fd 	ble.w	bfec <__ieee754_pow+0xa04>
    b7f2:	4613      	mov	r3, r2
    b7f4:	3301      	adds	r3, #1
    b7f6:	930d      	str	r3, [sp, #52]	; 0x34
    b7f8:	4bc8      	ldr	r3, [pc, #800]	; (bb1c <__ieee754_pow+0x534>)
    b7fa:	2200      	movs	r2, #0
    b7fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b800:	2700      	movs	r7, #0
    b802:	2600      	movs	r6, #0
    b804:	e9cd 6708 	strd	r6, r7, [sp, #32]
    b808:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    b80c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    b810:	2700      	movs	r7, #0
    b812:	4602      	mov	r2, r0
    b814:	4653      	mov	r3, sl
    b816:	4651      	mov	r1, sl
    b818:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b81c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b820:	f000 fe0c 	bl	c43c <__aeabi_dsub>
    b824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b828:	4680      	mov	r8, r0
    b82a:	4689      	mov	r9, r1
    b82c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b830:	f000 fe06 	bl	c440 <__adddf3>
    b834:	4602      	mov	r2, r0
    b836:	460b      	mov	r3, r1
    b838:	2000      	movs	r0, #0
    b83a:	49b8      	ldr	r1, [pc, #736]	; (bb1c <__ieee754_pow+0x534>)
    b83c:	f001 f8dc 	bl	c9f8 <__aeabi_ddiv>
    b840:	460a      	mov	r2, r1
    b842:	4601      	mov	r1, r0
    b844:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    b848:	4613      	mov	r3, r2
    b84a:	4649      	mov	r1, r9
    b84c:	4602      	mov	r2, r0
    b84e:	4640      	mov	r0, r8
    b850:	f000 ffa8 	bl	c7a4 <__aeabi_dmul>
    b854:	ea4f 036a 	mov.w	r3, sl, asr #1
    b858:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    b85c:	468c      	mov	ip, r1
    b85e:	4683      	mov	fp, r0
    b860:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    b864:	e9cd bc04 	strd	fp, ip, [sp, #16]
    b868:	46da      	mov	sl, fp
    b86a:	468b      	mov	fp, r1
    b86c:	19d9      	adds	r1, r3, r7
    b86e:	2300      	movs	r3, #0
    b870:	e9cd ab02 	strd	sl, fp, [sp, #8]
    b874:	9302      	str	r3, [sp, #8]
    b876:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    b87a:	2000      	movs	r0, #0
    b87c:	4606      	mov	r6, r0
    b87e:	460f      	mov	r7, r1
    b880:	4602      	mov	r2, r0
    b882:	460b      	mov	r3, r1
    b884:	4650      	mov	r0, sl
    b886:	4659      	mov	r1, fp
    b888:	f000 ff8c 	bl	c7a4 <__aeabi_dmul>
    b88c:	4602      	mov	r2, r0
    b88e:	460b      	mov	r3, r1
    b890:	4640      	mov	r0, r8
    b892:	4649      	mov	r1, r9
    b894:	f000 fdd2 	bl	c43c <__aeabi_dsub>
    b898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b89c:	4680      	mov	r8, r0
    b89e:	4689      	mov	r9, r1
    b8a0:	4630      	mov	r0, r6
    b8a2:	4639      	mov	r1, r7
    b8a4:	f000 fdca 	bl	c43c <__aeabi_dsub>
    b8a8:	4602      	mov	r2, r0
    b8aa:	460b      	mov	r3, r1
    b8ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b8b0:	f000 fdc4 	bl	c43c <__aeabi_dsub>
    b8b4:	4652      	mov	r2, sl
    b8b6:	465b      	mov	r3, fp
    b8b8:	f000 ff74 	bl	c7a4 <__aeabi_dmul>
    b8bc:	4602      	mov	r2, r0
    b8be:	460b      	mov	r3, r1
    b8c0:	4640      	mov	r0, r8
    b8c2:	4649      	mov	r1, r9
    b8c4:	f000 fdba 	bl	c43c <__aeabi_dsub>
    b8c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b8cc:	f000 ff6a 	bl	c7a4 <__aeabi_dmul>
    b8d0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    b8d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b8d8:	4632      	mov	r2, r6
    b8da:	463b      	mov	r3, r7
    b8dc:	4630      	mov	r0, r6
    b8de:	4639      	mov	r1, r7
    b8e0:	f000 ff60 	bl	c7a4 <__aeabi_dmul>
    b8e4:	a378      	add	r3, pc, #480	; (adr r3, bac8 <__ieee754_pow+0x4e0>)
    b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b8ea:	4606      	mov	r6, r0
    b8ec:	460f      	mov	r7, r1
    b8ee:	f000 ff59 	bl	c7a4 <__aeabi_dmul>
    b8f2:	a377      	add	r3, pc, #476	; (adr r3, bad0 <__ieee754_pow+0x4e8>)
    b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b8f8:	f000 fda2 	bl	c440 <__adddf3>
    b8fc:	4632      	mov	r2, r6
    b8fe:	463b      	mov	r3, r7
    b900:	f000 ff50 	bl	c7a4 <__aeabi_dmul>
    b904:	a374      	add	r3, pc, #464	; (adr r3, bad8 <__ieee754_pow+0x4f0>)
    b906:	e9d3 2300 	ldrd	r2, r3, [r3]
    b90a:	f000 fd99 	bl	c440 <__adddf3>
    b90e:	4632      	mov	r2, r6
    b910:	463b      	mov	r3, r7
    b912:	f000 ff47 	bl	c7a4 <__aeabi_dmul>
    b916:	a372      	add	r3, pc, #456	; (adr r3, bae0 <__ieee754_pow+0x4f8>)
    b918:	e9d3 2300 	ldrd	r2, r3, [r3]
    b91c:	f000 fd90 	bl	c440 <__adddf3>
    b920:	4632      	mov	r2, r6
    b922:	463b      	mov	r3, r7
    b924:	f000 ff3e 	bl	c7a4 <__aeabi_dmul>
    b928:	a36f      	add	r3, pc, #444	; (adr r3, bae8 <__ieee754_pow+0x500>)
    b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b92e:	f000 fd87 	bl	c440 <__adddf3>
    b932:	4632      	mov	r2, r6
    b934:	463b      	mov	r3, r7
    b936:	f000 ff35 	bl	c7a4 <__aeabi_dmul>
    b93a:	a36d      	add	r3, pc, #436	; (adr r3, baf0 <__ieee754_pow+0x508>)
    b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b940:	f000 fd7e 	bl	c440 <__adddf3>
    b944:	4632      	mov	r2, r6
    b946:	4680      	mov	r8, r0
    b948:	4689      	mov	r9, r1
    b94a:	463b      	mov	r3, r7
    b94c:	4630      	mov	r0, r6
    b94e:	4639      	mov	r1, r7
    b950:	f000 ff28 	bl	c7a4 <__aeabi_dmul>
    b954:	4602      	mov	r2, r0
    b956:	460b      	mov	r3, r1
    b958:	4640      	mov	r0, r8
    b95a:	4649      	mov	r1, r9
    b95c:	f000 ff22 	bl	c7a4 <__aeabi_dmul>
    b960:	4652      	mov	r2, sl
    b962:	4606      	mov	r6, r0
    b964:	460f      	mov	r7, r1
    b966:	465b      	mov	r3, fp
    b968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b96c:	f000 fd68 	bl	c440 <__adddf3>
    b970:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b974:	f000 ff16 	bl	c7a4 <__aeabi_dmul>
    b978:	4632      	mov	r2, r6
    b97a:	463b      	mov	r3, r7
    b97c:	f000 fd60 	bl	c440 <__adddf3>
    b980:	4652      	mov	r2, sl
    b982:	4680      	mov	r8, r0
    b984:	4689      	mov	r9, r1
    b986:	465b      	mov	r3, fp
    b988:	4650      	mov	r0, sl
    b98a:	4659      	mov	r1, fp
    b98c:	f000 ff0a 	bl	c7a4 <__aeabi_dmul>
    b990:	2200      	movs	r2, #0
    b992:	4b63      	ldr	r3, [pc, #396]	; (bb20 <__ieee754_pow+0x538>)
    b994:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    b998:	f000 fd52 	bl	c440 <__adddf3>
    b99c:	4642      	mov	r2, r8
    b99e:	464b      	mov	r3, r9
    b9a0:	f000 fd4e 	bl	c440 <__adddf3>
    b9a4:	9802      	ldr	r0, [sp, #8]
    b9a6:	460f      	mov	r7, r1
    b9a8:	4606      	mov	r6, r0
    b9aa:	4632      	mov	r2, r6
    b9ac:	463b      	mov	r3, r7
    b9ae:	4650      	mov	r0, sl
    b9b0:	4659      	mov	r1, fp
    b9b2:	f000 fef7 	bl	c7a4 <__aeabi_dmul>
    b9b6:	2200      	movs	r2, #0
    b9b8:	4682      	mov	sl, r0
    b9ba:	468b      	mov	fp, r1
    b9bc:	4b58      	ldr	r3, [pc, #352]	; (bb20 <__ieee754_pow+0x538>)
    b9be:	4630      	mov	r0, r6
    b9c0:	4639      	mov	r1, r7
    b9c2:	f000 fd3b 	bl	c43c <__aeabi_dsub>
    b9c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b9ca:	f000 fd37 	bl	c43c <__aeabi_dsub>
    b9ce:	4602      	mov	r2, r0
    b9d0:	460b      	mov	r3, r1
    b9d2:	4640      	mov	r0, r8
    b9d4:	4649      	mov	r1, r9
    b9d6:	f000 fd31 	bl	c43c <__aeabi_dsub>
    b9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b9de:	f000 fee1 	bl	c7a4 <__aeabi_dmul>
    b9e2:	4632      	mov	r2, r6
    b9e4:	4680      	mov	r8, r0
    b9e6:	4689      	mov	r9, r1
    b9e8:	463b      	mov	r3, r7
    b9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b9ee:	f000 fed9 	bl	c7a4 <__aeabi_dmul>
    b9f2:	4602      	mov	r2, r0
    b9f4:	460b      	mov	r3, r1
    b9f6:	4640      	mov	r0, r8
    b9f8:	4649      	mov	r1, r9
    b9fa:	f000 fd21 	bl	c440 <__adddf3>
    b9fe:	4680      	mov	r8, r0
    ba00:	4689      	mov	r9, r1
    ba02:	4602      	mov	r2, r0
    ba04:	460b      	mov	r3, r1
    ba06:	4650      	mov	r0, sl
    ba08:	4659      	mov	r1, fp
    ba0a:	e9cd ab04 	strd	sl, fp, [sp, #16]
    ba0e:	f000 fd17 	bl	c440 <__adddf3>
    ba12:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    ba16:	a338      	add	r3, pc, #224	; (adr r3, baf8 <__ieee754_pow+0x510>)
    ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba1c:	4650      	mov	r0, sl
    ba1e:	460f      	mov	r7, r1
    ba20:	f000 fec0 	bl	c7a4 <__aeabi_dmul>
    ba24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ba28:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ba2c:	4639      	mov	r1, r7
    ba2e:	4650      	mov	r0, sl
    ba30:	f000 fd04 	bl	c43c <__aeabi_dsub>
    ba34:	4602      	mov	r2, r0
    ba36:	460b      	mov	r3, r1
    ba38:	4640      	mov	r0, r8
    ba3a:	4649      	mov	r1, r9
    ba3c:	f000 fcfe 	bl	c43c <__aeabi_dsub>
    ba40:	a32f      	add	r3, pc, #188	; (adr r3, bb00 <__ieee754_pow+0x518>)
    ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba46:	f000 fead 	bl	c7a4 <__aeabi_dmul>
    ba4a:	a32f      	add	r3, pc, #188	; (adr r3, bb08 <__ieee754_pow+0x520>)
    ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba50:	4680      	mov	r8, r0
    ba52:	4689      	mov	r9, r1
    ba54:	4650      	mov	r0, sl
    ba56:	4639      	mov	r1, r7
    ba58:	f000 fea4 	bl	c7a4 <__aeabi_dmul>
    ba5c:	4602      	mov	r2, r0
    ba5e:	460b      	mov	r3, r1
    ba60:	4640      	mov	r0, r8
    ba62:	4649      	mov	r1, r9
    ba64:	f000 fcec 	bl	c440 <__adddf3>
    ba68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ba6c:	f000 fce8 	bl	c440 <__adddf3>
    ba70:	4680      	mov	r8, r0
    ba72:	980d      	ldr	r0, [sp, #52]	; 0x34
    ba74:	4689      	mov	r9, r1
    ba76:	f000 fe2f 	bl	c6d8 <__aeabi_i2d>
    ba7a:	4642      	mov	r2, r8
    ba7c:	4606      	mov	r6, r0
    ba7e:	460f      	mov	r7, r1
    ba80:	464b      	mov	r3, r9
    ba82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ba86:	f000 fcdb 	bl	c440 <__adddf3>
    ba8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ba8e:	f000 fcd7 	bl	c440 <__adddf3>
    ba92:	4632      	mov	r2, r6
    ba94:	463b      	mov	r3, r7
    ba96:	f000 fcd3 	bl	c440 <__adddf3>
    ba9a:	4632      	mov	r2, r6
    ba9c:	463b      	mov	r3, r7
    ba9e:	4650      	mov	r0, sl
    baa0:	468b      	mov	fp, r1
    baa2:	f000 fccb 	bl	c43c <__aeabi_dsub>
    baa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    baaa:	f000 fcc7 	bl	c43c <__aeabi_dsub>
    baae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bab2:	f000 fcc3 	bl	c43c <__aeabi_dsub>
    bab6:	4602      	mov	r2, r0
    bab8:	460b      	mov	r3, r1
    baba:	4640      	mov	r0, r8
    babc:	4649      	mov	r1, r9
    babe:	f000 fcbd 	bl	c43c <__aeabi_dsub>
    bac2:	4680      	mov	r8, r0
    bac4:	e02e      	b.n	bb24 <__ieee754_pow+0x53c>
    bac6:	bf00      	nop
    bac8:	4a454eef 	.word	0x4a454eef
    bacc:	3fca7e28 	.word	0x3fca7e28
    bad0:	93c9db65 	.word	0x93c9db65
    bad4:	3fcd864a 	.word	0x3fcd864a
    bad8:	a91d4101 	.word	0xa91d4101
    badc:	3fd17460 	.word	0x3fd17460
    bae0:	518f264d 	.word	0x518f264d
    bae4:	3fd55555 	.word	0x3fd55555
    bae8:	db6fabff 	.word	0xdb6fabff
    baec:	3fdb6db6 	.word	0x3fdb6db6
    baf0:	33333303 	.word	0x33333303
    baf4:	3fe33333 	.word	0x3fe33333
    baf8:	e0000000 	.word	0xe0000000
    bafc:	3feec709 	.word	0x3feec709
    bb00:	dc3a03fd 	.word	0xdc3a03fd
    bb04:	3feec709 	.word	0x3feec709
    bb08:	145b01f5 	.word	0x145b01f5
    bb0c:	be3e2fe0 	.word	0xbe3e2fe0
    bb10:	43400000 	.word	0x43400000
    bb14:	0003988e 	.word	0x0003988e
    bb18:	000bb679 	.word	0x000bb679
    bb1c:	3ff00000 	.word	0x3ff00000
    bb20:	40080000 	.word	0x40080000
    bb24:	4689      	mov	r9, r1
    bb26:	3c01      	subs	r4, #1
    bb28:	ea54 0305 	orrs.w	r3, r4, r5
    bb2c:	e9dd 0100 	ldrd	r0, r1, [sp]
    bb30:	bf14      	ite	ne
    bb32:	4cd9      	ldrne	r4, [pc, #868]	; (be98 <__ieee754_pow+0x8b0>)
    bb34:	4cd9      	ldreq	r4, [pc, #868]	; (be9c <__ieee754_pow+0x8b4>)
    bb36:	2300      	movs	r3, #0
    bb38:	e9cd 3404 	strd	r3, r4, [sp, #16]
    bb3c:	4603      	mov	r3, r0
    bb3e:	460c      	mov	r4, r1
    bb40:	e9cd 3402 	strd	r3, r4, [sp, #8]
    bb44:	2300      	movs	r3, #0
    bb46:	9302      	str	r3, [sp, #8]
    bb48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    bb4c:	4622      	mov	r2, r4
    bb4e:	462b      	mov	r3, r5
    bb50:	f000 fc74 	bl	c43c <__aeabi_dsub>
    bb54:	4652      	mov	r2, sl
    bb56:	465b      	mov	r3, fp
    bb58:	f000 fe24 	bl	c7a4 <__aeabi_dmul>
    bb5c:	e9dd 2300 	ldrd	r2, r3, [sp]
    bb60:	4606      	mov	r6, r0
    bb62:	460f      	mov	r7, r1
    bb64:	4640      	mov	r0, r8
    bb66:	4649      	mov	r1, r9
    bb68:	f000 fe1c 	bl	c7a4 <__aeabi_dmul>
    bb6c:	4602      	mov	r2, r0
    bb6e:	460b      	mov	r3, r1
    bb70:	4630      	mov	r0, r6
    bb72:	4639      	mov	r1, r7
    bb74:	f000 fc64 	bl	c440 <__adddf3>
    bb78:	4622      	mov	r2, r4
    bb7a:	4680      	mov	r8, r0
    bb7c:	4689      	mov	r9, r1
    bb7e:	462b      	mov	r3, r5
    bb80:	4650      	mov	r0, sl
    bb82:	4659      	mov	r1, fp
    bb84:	e9cd 8900 	strd	r8, r9, [sp]
    bb88:	f000 fe0c 	bl	c7a4 <__aeabi_dmul>
    bb8c:	460b      	mov	r3, r1
    bb8e:	4602      	mov	r2, r0
    bb90:	4606      	mov	r6, r0
    bb92:	460f      	mov	r7, r1
    bb94:	4640      	mov	r0, r8
    bb96:	4649      	mov	r1, r9
    bb98:	f000 fc52 	bl	c440 <__adddf3>
    bb9c:	4bc0      	ldr	r3, [pc, #768]	; (bea0 <__ieee754_pow+0x8b8>)
    bb9e:	4299      	cmp	r1, r3
    bba0:	4604      	mov	r4, r0
    bba2:	460d      	mov	r5, r1
    bba4:	468a      	mov	sl, r1
    bba6:	f340 8116 	ble.w	bdd6 <__ieee754_pow+0x7ee>
    bbaa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    bbae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    bbb2:	4303      	orrs	r3, r0
    bbb4:	f040 81ea 	bne.w	bf8c <__ieee754_pow+0x9a4>
    bbb8:	a3a3      	add	r3, pc, #652	; (adr r3, be48 <__ieee754_pow+0x860>)
    bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbbe:	e9dd 0100 	ldrd	r0, r1, [sp]
    bbc2:	f000 fc3d 	bl	c440 <__adddf3>
    bbc6:	4632      	mov	r2, r6
    bbc8:	4680      	mov	r8, r0
    bbca:	4689      	mov	r9, r1
    bbcc:	463b      	mov	r3, r7
    bbce:	4620      	mov	r0, r4
    bbd0:	4629      	mov	r1, r5
    bbd2:	f000 fc33 	bl	c43c <__aeabi_dsub>
    bbd6:	4602      	mov	r2, r0
    bbd8:	460b      	mov	r3, r1
    bbda:	4640      	mov	r0, r8
    bbdc:	4649      	mov	r1, r9
    bbde:	f001 f871 	bl	ccc4 <__aeabi_dcmpgt>
    bbe2:	2800      	cmp	r0, #0
    bbe4:	f040 81d2 	bne.w	bf8c <__ieee754_pow+0x9a4>
    bbe8:	46a8      	mov	r8, r5
    bbea:	ea4f 5328 	mov.w	r3, r8, asr #20
    bbee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bbf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    bbf6:	fa42 f303 	asr.w	r3, r2, r3
    bbfa:	4453      	add	r3, sl
    bbfc:	f3c3 520a 	ubfx	r2, r3, #20, #11
    bc00:	4da8      	ldr	r5, [pc, #672]	; (bea4 <__ieee754_pow+0x8bc>)
    bc02:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    bc06:	4115      	asrs	r5, r2
    bc08:	f3c3 0413 	ubfx	r4, r3, #0, #20
    bc0c:	ea23 0105 	bic.w	r1, r3, r5
    bc10:	2000      	movs	r0, #0
    bc12:	f1c2 0b14 	rsb	fp, r2, #20
    bc16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    bc1a:	f1ba 0f00 	cmp.w	sl, #0
    bc1e:	4602      	mov	r2, r0
    bc20:	460b      	mov	r3, r1
    bc22:	fa44 fb0b 	asr.w	fp, r4, fp
    bc26:	4630      	mov	r0, r6
    bc28:	4639      	mov	r1, r7
    bc2a:	bfb8      	it	lt
    bc2c:	f1cb 0b00 	rsblt	fp, fp, #0
    bc30:	f000 fc04 	bl	c43c <__aeabi_dsub>
    bc34:	4602      	mov	r2, r0
    bc36:	460b      	mov	r3, r1
    bc38:	4606      	mov	r6, r0
    bc3a:	460f      	mov	r7, r1
    bc3c:	e9dd 0100 	ldrd	r0, r1, [sp]
    bc40:	f000 fbfe 	bl	c440 <__adddf3>
    bc44:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    bc48:	460d      	mov	r5, r1
    bc4a:	2400      	movs	r4, #0
    bc4c:	a380      	add	r3, pc, #512	; (adr r3, be50 <__ieee754_pow+0x868>)
    bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc52:	4620      	mov	r0, r4
    bc54:	4629      	mov	r1, r5
    bc56:	f000 fda5 	bl	c7a4 <__aeabi_dmul>
    bc5a:	4632      	mov	r2, r6
    bc5c:	4680      	mov	r8, r0
    bc5e:	4689      	mov	r9, r1
    bc60:	463b      	mov	r3, r7
    bc62:	4620      	mov	r0, r4
    bc64:	4629      	mov	r1, r5
    bc66:	f000 fbe9 	bl	c43c <__aeabi_dsub>
    bc6a:	4602      	mov	r2, r0
    bc6c:	460b      	mov	r3, r1
    bc6e:	e9dd 0100 	ldrd	r0, r1, [sp]
    bc72:	f000 fbe3 	bl	c43c <__aeabi_dsub>
    bc76:	a378      	add	r3, pc, #480	; (adr r3, be58 <__ieee754_pow+0x870>)
    bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc7c:	f000 fd92 	bl	c7a4 <__aeabi_dmul>
    bc80:	a377      	add	r3, pc, #476	; (adr r3, be60 <__ieee754_pow+0x878>)
    bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc86:	4606      	mov	r6, r0
    bc88:	460f      	mov	r7, r1
    bc8a:	4620      	mov	r0, r4
    bc8c:	4629      	mov	r1, r5
    bc8e:	f000 fd89 	bl	c7a4 <__aeabi_dmul>
    bc92:	4602      	mov	r2, r0
    bc94:	460b      	mov	r3, r1
    bc96:	4630      	mov	r0, r6
    bc98:	4639      	mov	r1, r7
    bc9a:	f000 fbd1 	bl	c440 <__adddf3>
    bc9e:	4606      	mov	r6, r0
    bca0:	460f      	mov	r7, r1
    bca2:	4602      	mov	r2, r0
    bca4:	460b      	mov	r3, r1
    bca6:	4640      	mov	r0, r8
    bca8:	4649      	mov	r1, r9
    bcaa:	f000 fbc9 	bl	c440 <__adddf3>
    bcae:	4642      	mov	r2, r8
    bcb0:	464b      	mov	r3, r9
    bcb2:	4604      	mov	r4, r0
    bcb4:	460d      	mov	r5, r1
    bcb6:	f000 fbc1 	bl	c43c <__aeabi_dsub>
    bcba:	4602      	mov	r2, r0
    bcbc:	460b      	mov	r3, r1
    bcbe:	4630      	mov	r0, r6
    bcc0:	4639      	mov	r1, r7
    bcc2:	f000 fbbb 	bl	c43c <__aeabi_dsub>
    bcc6:	4622      	mov	r2, r4
    bcc8:	4680      	mov	r8, r0
    bcca:	4689      	mov	r9, r1
    bccc:	462b      	mov	r3, r5
    bcce:	4620      	mov	r0, r4
    bcd0:	4629      	mov	r1, r5
    bcd2:	f000 fd67 	bl	c7a4 <__aeabi_dmul>
    bcd6:	a364      	add	r3, pc, #400	; (adr r3, be68 <__ieee754_pow+0x880>)
    bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcdc:	4606      	mov	r6, r0
    bcde:	460f      	mov	r7, r1
    bce0:	f000 fd60 	bl	c7a4 <__aeabi_dmul>
    bce4:	a362      	add	r3, pc, #392	; (adr r3, be70 <__ieee754_pow+0x888>)
    bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcea:	f000 fba7 	bl	c43c <__aeabi_dsub>
    bcee:	4632      	mov	r2, r6
    bcf0:	463b      	mov	r3, r7
    bcf2:	f000 fd57 	bl	c7a4 <__aeabi_dmul>
    bcf6:	a360      	add	r3, pc, #384	; (adr r3, be78 <__ieee754_pow+0x890>)
    bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcfc:	f000 fba0 	bl	c440 <__adddf3>
    bd00:	4632      	mov	r2, r6
    bd02:	463b      	mov	r3, r7
    bd04:	f000 fd4e 	bl	c7a4 <__aeabi_dmul>
    bd08:	a35d      	add	r3, pc, #372	; (adr r3, be80 <__ieee754_pow+0x898>)
    bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd0e:	f000 fb95 	bl	c43c <__aeabi_dsub>
    bd12:	4632      	mov	r2, r6
    bd14:	463b      	mov	r3, r7
    bd16:	f000 fd45 	bl	c7a4 <__aeabi_dmul>
    bd1a:	a35b      	add	r3, pc, #364	; (adr r3, be88 <__ieee754_pow+0x8a0>)
    bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd20:	f000 fb8e 	bl	c440 <__adddf3>
    bd24:	4632      	mov	r2, r6
    bd26:	463b      	mov	r3, r7
    bd28:	f000 fd3c 	bl	c7a4 <__aeabi_dmul>
    bd2c:	4602      	mov	r2, r0
    bd2e:	460b      	mov	r3, r1
    bd30:	4620      	mov	r0, r4
    bd32:	4629      	mov	r1, r5
    bd34:	f000 fb82 	bl	c43c <__aeabi_dsub>
    bd38:	4606      	mov	r6, r0
    bd3a:	460f      	mov	r7, r1
    bd3c:	4602      	mov	r2, r0
    bd3e:	460b      	mov	r3, r1
    bd40:	4620      	mov	r0, r4
    bd42:	4629      	mov	r1, r5
    bd44:	f000 fd2e 	bl	c7a4 <__aeabi_dmul>
    bd48:	2200      	movs	r2, #0
    bd4a:	e9cd 0100 	strd	r0, r1, [sp]
    bd4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bd52:	4630      	mov	r0, r6
    bd54:	4639      	mov	r1, r7
    bd56:	f000 fb71 	bl	c43c <__aeabi_dsub>
    bd5a:	4602      	mov	r2, r0
    bd5c:	460b      	mov	r3, r1
    bd5e:	e9dd 0100 	ldrd	r0, r1, [sp]
    bd62:	f000 fe49 	bl	c9f8 <__aeabi_ddiv>
    bd66:	4642      	mov	r2, r8
    bd68:	4606      	mov	r6, r0
    bd6a:	460f      	mov	r7, r1
    bd6c:	464b      	mov	r3, r9
    bd6e:	4620      	mov	r0, r4
    bd70:	4629      	mov	r1, r5
    bd72:	f000 fd17 	bl	c7a4 <__aeabi_dmul>
    bd76:	4642      	mov	r2, r8
    bd78:	464b      	mov	r3, r9
    bd7a:	f000 fb61 	bl	c440 <__adddf3>
    bd7e:	4602      	mov	r2, r0
    bd80:	460b      	mov	r3, r1
    bd82:	4630      	mov	r0, r6
    bd84:	4639      	mov	r1, r7
    bd86:	f000 fb59 	bl	c43c <__aeabi_dsub>
    bd8a:	4622      	mov	r2, r4
    bd8c:	462b      	mov	r3, r5
    bd8e:	f000 fb55 	bl	c43c <__aeabi_dsub>
    bd92:	4602      	mov	r2, r0
    bd94:	460b      	mov	r3, r1
    bd96:	2000      	movs	r0, #0
    bd98:	493f      	ldr	r1, [pc, #252]	; (be98 <__ieee754_pow+0x8b0>)
    bd9a:	f000 fb4f 	bl	c43c <__aeabi_dsub>
    bd9e:	448a      	add	sl, r1
    bda0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    bda4:	f2c0 8133 	blt.w	c00e <__ieee754_pow+0xa26>
    bda8:	4651      	mov	r1, sl
    bdaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bdae:	f000 fcf9 	bl	c7a4 <__aeabi_dmul>
    bdb2:	e45b      	b.n	b66c <__ieee754_pow+0x84>
    bdb4:	4642      	mov	r2, r8
    bdb6:	4640      	mov	r0, r8
    bdb8:	464b      	mov	r3, r9
    bdba:	4649      	mov	r1, r9
    bdbc:	f000 fcf2 	bl	c7a4 <__aeabi_dmul>
    bdc0:	e454      	b.n	b66c <__ieee754_pow+0x84>
    bdc2:	f1ba 0f00 	cmp.w	sl, #0
    bdc6:	f6bf ace0 	bge.w	b78a <__ieee754_pow+0x1a2>
    bdca:	e9dd 3400 	ldrd	r3, r4, [sp]
    bdce:	4618      	mov	r0, r3
    bdd0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    bdd4:	e44a      	b.n	b66c <__ieee754_pow+0x84>
    bdd6:	4b34      	ldr	r3, [pc, #208]	; (bea8 <__ieee754_pow+0x8c0>)
    bdd8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    bddc:	4598      	cmp	r8, r3
    bdde:	f340 80f2 	ble.w	bfc6 <__ieee754_pow+0x9de>
    bde2:	4b32      	ldr	r3, [pc, #200]	; (beac <__ieee754_pow+0x8c4>)
    bde4:	440b      	add	r3, r1
    bde6:	4303      	orrs	r3, r0
    bde8:	d10c      	bne.n	be04 <__ieee754_pow+0x81c>
    bdea:	4632      	mov	r2, r6
    bdec:	463b      	mov	r3, r7
    bdee:	f000 fb25 	bl	c43c <__aeabi_dsub>
    bdf2:	4602      	mov	r2, r0
    bdf4:	460b      	mov	r3, r1
    bdf6:	e9dd 0100 	ldrd	r0, r1, [sp]
    bdfa:	f000 ff4f 	bl	cc9c <__aeabi_dcmple>
    bdfe:	2800      	cmp	r0, #0
    be00:	f43f aef3 	beq.w	bbea <__ieee754_pow+0x602>
    be04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    be08:	a321      	add	r3, pc, #132	; (adr r3, be90 <__ieee754_pow+0x8a8>)
    be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    be0e:	f000 fcc9 	bl	c7a4 <__aeabi_dmul>
    be12:	a31f      	add	r3, pc, #124	; (adr r3, be90 <__ieee754_pow+0x8a8>)
    be14:	e9d3 2300 	ldrd	r2, r3, [r3]
    be18:	f000 fcc4 	bl	c7a4 <__aeabi_dmul>
    be1c:	e426      	b.n	b66c <__ieee754_pow+0x84>
    be1e:	4602      	mov	r2, r0
    be20:	460b      	mov	r3, r1
    be22:	2000      	movs	r0, #0
    be24:	491c      	ldr	r1, [pc, #112]	; (be98 <__ieee754_pow+0x8b0>)
    be26:	f000 fde7 	bl	c9f8 <__aeabi_ddiv>
    be2a:	e43c      	b.n	b6a6 <__ieee754_pow+0xbe>
    be2c:	2200      	movs	r2, #0
    be2e:	2300      	movs	r3, #0
    be30:	e9cd 2308 	strd	r2, r3, [sp, #32]
    be34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    be38:	4b17      	ldr	r3, [pc, #92]	; (be98 <__ieee754_pow+0x8b0>)
    be3a:	2200      	movs	r2, #0
    be3c:	2700      	movs	r7, #0
    be3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    be42:	e4e6      	b.n	b812 <__ieee754_pow+0x22a>
    be44:	f3af 8000 	nop.w
    be48:	652b82fe 	.word	0x652b82fe
    be4c:	3c971547 	.word	0x3c971547
    be50:	00000000 	.word	0x00000000
    be54:	3fe62e43 	.word	0x3fe62e43
    be58:	fefa39ef 	.word	0xfefa39ef
    be5c:	3fe62e42 	.word	0x3fe62e42
    be60:	0ca86c39 	.word	0x0ca86c39
    be64:	be205c61 	.word	0xbe205c61
    be68:	72bea4d0 	.word	0x72bea4d0
    be6c:	3e663769 	.word	0x3e663769
    be70:	c5d26bf1 	.word	0xc5d26bf1
    be74:	3ebbbd41 	.word	0x3ebbbd41
    be78:	af25de2c 	.word	0xaf25de2c
    be7c:	3f11566a 	.word	0x3f11566a
    be80:	16bebd93 	.word	0x16bebd93
    be84:	3f66c16c 	.word	0x3f66c16c
    be88:	5555553e 	.word	0x5555553e
    be8c:	3fc55555 	.word	0x3fc55555
    be90:	c2f8f359 	.word	0xc2f8f359
    be94:	01a56e1f 	.word	0x01a56e1f
    be98:	3ff00000 	.word	0x3ff00000
    be9c:	bff00000 	.word	0xbff00000
    bea0:	408fffff 	.word	0x408fffff
    bea4:	000fffff 	.word	0x000fffff
    bea8:	4090cbff 	.word	0x4090cbff
    beac:	3f6f3400 	.word	0x3f6f3400
    beb0:	4b6b      	ldr	r3, [pc, #428]	; (c060 <__ieee754_pow+0xa78>)
    beb2:	429e      	cmp	r6, r3
    beb4:	f77f ac66 	ble.w	b784 <__ieee754_pow+0x19c>
    beb8:	4b6a      	ldr	r3, [pc, #424]	; (c064 <__ieee754_pow+0xa7c>)
    beba:	429e      	cmp	r6, r3
    bebc:	f73f ac13 	bgt.w	b6e6 <__ieee754_pow+0xfe>
    bec0:	2200      	movs	r2, #0
    bec2:	4b68      	ldr	r3, [pc, #416]	; (c064 <__ieee754_pow+0xa7c>)
    bec4:	f000 faba 	bl	c43c <__aeabi_dsub>
    bec8:	a357      	add	r3, pc, #348	; (adr r3, c028 <__ieee754_pow+0xa40>)
    beca:	e9d3 2300 	ldrd	r2, r3, [r3]
    bece:	4606      	mov	r6, r0
    bed0:	460f      	mov	r7, r1
    bed2:	f000 fc67 	bl	c7a4 <__aeabi_dmul>
    bed6:	a356      	add	r3, pc, #344	; (adr r3, c030 <__ieee754_pow+0xa48>)
    bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bedc:	4680      	mov	r8, r0
    bede:	4689      	mov	r9, r1
    bee0:	4630      	mov	r0, r6
    bee2:	4639      	mov	r1, r7
    bee4:	f000 fc5e 	bl	c7a4 <__aeabi_dmul>
    bee8:	2200      	movs	r2, #0
    beea:	4682      	mov	sl, r0
    beec:	468b      	mov	fp, r1
    beee:	4b5e      	ldr	r3, [pc, #376]	; (c068 <__ieee754_pow+0xa80>)
    bef0:	4630      	mov	r0, r6
    bef2:	4639      	mov	r1, r7
    bef4:	f000 fc56 	bl	c7a4 <__aeabi_dmul>
    bef8:	4602      	mov	r2, r0
    befa:	460b      	mov	r3, r1
    befc:	a14e      	add	r1, pc, #312	; (adr r1, c038 <__ieee754_pow+0xa50>)
    befe:	e9d1 0100 	ldrd	r0, r1, [r1]
    bf02:	f000 fa9b 	bl	c43c <__aeabi_dsub>
    bf06:	4632      	mov	r2, r6
    bf08:	463b      	mov	r3, r7
    bf0a:	f000 fc4b 	bl	c7a4 <__aeabi_dmul>
    bf0e:	4602      	mov	r2, r0
    bf10:	460b      	mov	r3, r1
    bf12:	2000      	movs	r0, #0
    bf14:	4955      	ldr	r1, [pc, #340]	; (c06c <__ieee754_pow+0xa84>)
    bf16:	f000 fa91 	bl	c43c <__aeabi_dsub>
    bf1a:	4632      	mov	r2, r6
    bf1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    bf20:	463b      	mov	r3, r7
    bf22:	4630      	mov	r0, r6
    bf24:	4639      	mov	r1, r7
    bf26:	f000 fc3d 	bl	c7a4 <__aeabi_dmul>
    bf2a:	4602      	mov	r2, r0
    bf2c:	460b      	mov	r3, r1
    bf2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bf32:	f000 fc37 	bl	c7a4 <__aeabi_dmul>
    bf36:	a342      	add	r3, pc, #264	; (adr r3, c040 <__ieee754_pow+0xa58>)
    bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf3c:	f000 fc32 	bl	c7a4 <__aeabi_dmul>
    bf40:	4602      	mov	r2, r0
    bf42:	460b      	mov	r3, r1
    bf44:	4650      	mov	r0, sl
    bf46:	4659      	mov	r1, fp
    bf48:	f000 fa78 	bl	c43c <__aeabi_dsub>
    bf4c:	4602      	mov	r2, r0
    bf4e:	460b      	mov	r3, r1
    bf50:	4606      	mov	r6, r0
    bf52:	460f      	mov	r7, r1
    bf54:	4640      	mov	r0, r8
    bf56:	4649      	mov	r1, r9
    bf58:	f000 fa72 	bl	c440 <__adddf3>
    bf5c:	4642      	mov	r2, r8
    bf5e:	464b      	mov	r3, r9
    bf60:	2000      	movs	r0, #0
    bf62:	4682      	mov	sl, r0
    bf64:	468b      	mov	fp, r1
    bf66:	f000 fa69 	bl	c43c <__aeabi_dsub>
    bf6a:	4602      	mov	r2, r0
    bf6c:	460b      	mov	r3, r1
    bf6e:	4630      	mov	r0, r6
    bf70:	4639      	mov	r1, r7
    bf72:	f000 fa63 	bl	c43c <__aeabi_dsub>
    bf76:	4680      	mov	r8, r0
    bf78:	4689      	mov	r9, r1
    bf7a:	e5d4      	b.n	bb26 <__ieee754_pow+0x53e>
    bf7c:	4642      	mov	r2, r8
    bf7e:	464b      	mov	r3, r9
    bf80:	2000      	movs	r0, #0
    bf82:	4938      	ldr	r1, [pc, #224]	; (c064 <__ieee754_pow+0xa7c>)
    bf84:	f000 fd38 	bl	c9f8 <__aeabi_ddiv>
    bf88:	f7ff bb70 	b.w	b66c <__ieee754_pow+0x84>
    bf8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    bf90:	a32d      	add	r3, pc, #180	; (adr r3, c048 <__ieee754_pow+0xa60>)
    bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf96:	f000 fc05 	bl	c7a4 <__aeabi_dmul>
    bf9a:	a32b      	add	r3, pc, #172	; (adr r3, c048 <__ieee754_pow+0xa60>)
    bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfa0:	f000 fc00 	bl	c7a4 <__aeabi_dmul>
    bfa4:	f7ff bb62 	b.w	b66c <__ieee754_pow+0x84>
    bfa8:	f1be 0f00 	cmp.w	lr, #0
    bfac:	f47f ab69 	bne.w	b682 <__ieee754_pow+0x9a>
    bfb0:	f1c3 0314 	rsb	r3, r3, #20
    bfb4:	fa47 f203 	asr.w	r2, r7, r3
    bfb8:	fa02 f303 	lsl.w	r3, r2, r3
    bfbc:	429f      	cmp	r7, r3
    bfbe:	d02a      	beq.n	c016 <__ieee754_pow+0xa2e>
    bfc0:	4674      	mov	r4, lr
    bfc2:	f7ff bb36 	b.w	b632 <__ieee754_pow+0x4a>
    bfc6:	4b29      	ldr	r3, [pc, #164]	; (c06c <__ieee754_pow+0xa84>)
    bfc8:	4598      	cmp	r8, r3
    bfca:	f73f ae0e 	bgt.w	bbea <__ieee754_pow+0x602>
    bfce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bfd2:	4692      	mov	sl, r2
    bfd4:	4693      	mov	fp, r2
    bfd6:	e638      	b.n	bc4a <__ieee754_pow+0x662>
    bfd8:	4602      	mov	r2, r0
    bfda:	460b      	mov	r3, r1
    bfdc:	f000 fa2e 	bl	c43c <__aeabi_dsub>
    bfe0:	4602      	mov	r2, r0
    bfe2:	460b      	mov	r3, r1
    bfe4:	f000 fd08 	bl	c9f8 <__aeabi_ddiv>
    bfe8:	f7ff bb40 	b.w	b66c <__ieee754_pow+0x84>
    bfec:	a318      	add	r3, pc, #96	; (adr r3, c050 <__ieee754_pow+0xa68>)
    bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
    bff2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    bff6:	a318      	add	r3, pc, #96	; (adr r3, c058 <__ieee754_pow+0xa70>)
    bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bffc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    c000:	4b1b      	ldr	r3, [pc, #108]	; (c070 <__ieee754_pow+0xa88>)
    c002:	2200      	movs	r2, #0
    c004:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    c008:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c00c:	e401      	b.n	b812 <__ieee754_pow+0x22a>
    c00e:	465a      	mov	r2, fp
    c010:	f000 f98a 	bl	c328 <scalbn>
    c014:	e6c9      	b.n	bdaa <__ieee754_pow+0x7c2>
    c016:	f002 0201 	and.w	r2, r2, #1
    c01a:	f1c2 0402 	rsb	r4, r2, #2
    c01e:	f7ff bb08 	b.w	b632 <__ieee754_pow+0x4a>
    c022:	bf00      	nop
    c024:	f3af 8000 	nop.w
    c028:	60000000 	.word	0x60000000
    c02c:	3ff71547 	.word	0x3ff71547
    c030:	f85ddf44 	.word	0xf85ddf44
    c034:	3e54ae0b 	.word	0x3e54ae0b
    c038:	55555555 	.word	0x55555555
    c03c:	3fd55555 	.word	0x3fd55555
    c040:	652b82fe 	.word	0x652b82fe
    c044:	3ff71547 	.word	0x3ff71547
    c048:	8800759c 	.word	0x8800759c
    c04c:	7e37e43c 	.word	0x7e37e43c
    c050:	40000000 	.word	0x40000000
    c054:	3fe2b803 	.word	0x3fe2b803
    c058:	43cfd006 	.word	0x43cfd006
    c05c:	3e4cfdeb 	.word	0x3e4cfdeb
    c060:	3feffffe 	.word	0x3feffffe
    c064:	3ff00000 	.word	0x3ff00000
    c068:	3fd00000 	.word	0x3fd00000
    c06c:	3fe00000 	.word	0x3fe00000
    c070:	3ff80000 	.word	0x3ff80000

0000c074 <__ieee754_sqrt>:
    c074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c078:	4f5b      	ldr	r7, [pc, #364]	; (c1e8 <__ieee754_sqrt+0x174>)
    c07a:	438f      	bics	r7, r1
    c07c:	4605      	mov	r5, r0
    c07e:	460c      	mov	r4, r1
    c080:	f000 8092 	beq.w	c1a8 <__ieee754_sqrt+0x134>
    c084:	2900      	cmp	r1, #0
    c086:	460b      	mov	r3, r1
    c088:	4602      	mov	r2, r0
    c08a:	dd6f      	ble.n	c16c <__ieee754_sqrt+0xf8>
    c08c:	150f      	asrs	r7, r1, #20
    c08e:	d07b      	beq.n	c188 <__ieee754_sqrt+0x114>
    c090:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    c094:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c098:	07f8      	lsls	r0, r7, #31
    c09a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c09e:	d45c      	bmi.n	c15a <__ieee754_sqrt+0xe6>
    c0a0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    c0a4:	2600      	movs	r6, #0
    c0a6:	440b      	add	r3, r1
    c0a8:	107f      	asrs	r7, r7, #1
    c0aa:	0052      	lsls	r2, r2, #1
    c0ac:	46b6      	mov	lr, r6
    c0ae:	2016      	movs	r0, #22
    c0b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    c0b4:	eb0e 0401 	add.w	r4, lr, r1
    c0b8:	429c      	cmp	r4, r3
    c0ba:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    c0be:	ea4f 0242 	mov.w	r2, r2, lsl #1
    c0c2:	dc03      	bgt.n	c0cc <__ieee754_sqrt+0x58>
    c0c4:	1b1b      	subs	r3, r3, r4
    c0c6:	eb04 0e01 	add.w	lr, r4, r1
    c0ca:	440e      	add	r6, r1
    c0cc:	3801      	subs	r0, #1
    c0ce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    c0d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
    c0d6:	d1ed      	bne.n	c0b4 <__ieee754_sqrt+0x40>
    c0d8:	4684      	mov	ip, r0
    c0da:	2420      	movs	r4, #32
    c0dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    c0e0:	e009      	b.n	c0f6 <__ieee754_sqrt+0x82>
    c0e2:	d020      	beq.n	c126 <__ieee754_sqrt+0xb2>
    c0e4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    c0e8:	3c01      	subs	r4, #1
    c0ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
    c0ee:	442b      	add	r3, r5
    c0f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    c0f4:	d020      	beq.n	c138 <__ieee754_sqrt+0xc4>
    c0f6:	4573      	cmp	r3, lr
    c0f8:	eb01 050c 	add.w	r5, r1, ip
    c0fc:	ddf1      	ble.n	c0e2 <__ieee754_sqrt+0x6e>
    c0fe:	2d00      	cmp	r5, #0
    c100:	eb05 0c01 	add.w	ip, r5, r1
    c104:	db09      	blt.n	c11a <__ieee754_sqrt+0xa6>
    c106:	46f0      	mov	r8, lr
    c108:	4295      	cmp	r5, r2
    c10a:	eba3 030e 	sub.w	r3, r3, lr
    c10e:	d900      	bls.n	c112 <__ieee754_sqrt+0x9e>
    c110:	3b01      	subs	r3, #1
    c112:	1b52      	subs	r2, r2, r5
    c114:	4408      	add	r0, r1
    c116:	46c6      	mov	lr, r8
    c118:	e7e4      	b.n	c0e4 <__ieee754_sqrt+0x70>
    c11a:	f1bc 0f00 	cmp.w	ip, #0
    c11e:	dbf2      	blt.n	c106 <__ieee754_sqrt+0x92>
    c120:	f10e 0801 	add.w	r8, lr, #1
    c124:	e7f0      	b.n	c108 <__ieee754_sqrt+0x94>
    c126:	4295      	cmp	r5, r2
    c128:	d8dc      	bhi.n	c0e4 <__ieee754_sqrt+0x70>
    c12a:	2d00      	cmp	r5, #0
    c12c:	eb05 0c01 	add.w	ip, r5, r1
    c130:	db44      	blt.n	c1bc <__ieee754_sqrt+0x148>
    c132:	4698      	mov	r8, r3
    c134:	2300      	movs	r3, #0
    c136:	e7ec      	b.n	c112 <__ieee754_sqrt+0x9e>
    c138:	4313      	orrs	r3, r2
    c13a:	d113      	bne.n	c164 <__ieee754_sqrt+0xf0>
    c13c:	0840      	lsrs	r0, r0, #1
    c13e:	1073      	asrs	r3, r6, #1
    c140:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    c144:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    c148:	07f2      	lsls	r2, r6, #31
    c14a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    c14e:	bf48      	it	mi
    c150:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    c154:	4649      	mov	r1, r9
    c156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c15a:	005b      	lsls	r3, r3, #1
    c15c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    c160:	0052      	lsls	r2, r2, #1
    c162:	e79d      	b.n	c0a0 <__ieee754_sqrt+0x2c>
    c164:	1c41      	adds	r1, r0, #1
    c166:	d02d      	beq.n	c1c4 <__ieee754_sqrt+0x150>
    c168:	3001      	adds	r0, #1
    c16a:	e7e7      	b.n	c13c <__ieee754_sqrt+0xc8>
    c16c:	4606      	mov	r6, r0
    c16e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    c172:	433e      	orrs	r6, r7
    c174:	d0ef      	beq.n	c156 <__ieee754_sqrt+0xe2>
    c176:	bb69      	cbnz	r1, c1d4 <__ieee754_sqrt+0x160>
    c178:	460f      	mov	r7, r1
    c17a:	0ad3      	lsrs	r3, r2, #11
    c17c:	3f15      	subs	r7, #21
    c17e:	0552      	lsls	r2, r2, #21
    c180:	2b00      	cmp	r3, #0
    c182:	d0fa      	beq.n	c17a <__ieee754_sqrt+0x106>
    c184:	02de      	lsls	r6, r3, #11
    c186:	d420      	bmi.n	c1ca <__ieee754_sqrt+0x156>
    c188:	2400      	movs	r4, #0
    c18a:	e000      	b.n	c18e <__ieee754_sqrt+0x11a>
    c18c:	4604      	mov	r4, r0
    c18e:	005b      	lsls	r3, r3, #1
    c190:	02dd      	lsls	r5, r3, #11
    c192:	f104 0001 	add.w	r0, r4, #1
    c196:	d5f9      	bpl.n	c18c <__ieee754_sqrt+0x118>
    c198:	f1c0 0120 	rsb	r1, r0, #32
    c19c:	fa22 f101 	lsr.w	r1, r2, r1
    c1a0:	430b      	orrs	r3, r1
    c1a2:	1b3f      	subs	r7, r7, r4
    c1a4:	4082      	lsls	r2, r0
    c1a6:	e773      	b.n	c090 <__ieee754_sqrt+0x1c>
    c1a8:	4602      	mov	r2, r0
    c1aa:	460b      	mov	r3, r1
    c1ac:	f000 fafa 	bl	c7a4 <__aeabi_dmul>
    c1b0:	462a      	mov	r2, r5
    c1b2:	4623      	mov	r3, r4
    c1b4:	f000 f944 	bl	c440 <__adddf3>
    c1b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c1bc:	f1bc 0f00 	cmp.w	ip, #0
    c1c0:	daae      	bge.n	c120 <__ieee754_sqrt+0xac>
    c1c2:	e7b6      	b.n	c132 <__ieee754_sqrt+0xbe>
    c1c4:	3601      	adds	r6, #1
    c1c6:	4620      	mov	r0, r4
    c1c8:	e7b9      	b.n	c13e <__ieee754_sqrt+0xca>
    c1ca:	2000      	movs	r0, #0
    c1cc:	2120      	movs	r1, #32
    c1ce:	f04f 34ff 	mov.w	r4, #4294967295
    c1d2:	e7e3      	b.n	c19c <__ieee754_sqrt+0x128>
    c1d4:	4602      	mov	r2, r0
    c1d6:	460b      	mov	r3, r1
    c1d8:	f000 f930 	bl	c43c <__aeabi_dsub>
    c1dc:	4602      	mov	r2, r0
    c1de:	460b      	mov	r3, r1
    c1e0:	f000 fc0a 	bl	c9f8 <__aeabi_ddiv>
    c1e4:	e7b7      	b.n	c156 <__ieee754_sqrt+0xe2>
    c1e6:	bf00      	nop
    c1e8:	7ff00000 	.word	0x7ff00000

0000c1ec <fabs>:
    c1ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c1f0:	4770      	bx	lr
    c1f2:	bf00      	nop

0000c1f4 <finite>:
    c1f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    c1f8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    c1fc:	0fc0      	lsrs	r0, r0, #31
    c1fe:	4770      	bx	lr

0000c200 <matherr>:
    c200:	2000      	movs	r0, #0
    c202:	4770      	bx	lr

0000c204 <nan>:
    c204:	2000      	movs	r0, #0
    c206:	4901      	ldr	r1, [pc, #4]	; (c20c <nan+0x8>)
    c208:	4770      	bx	lr
    c20a:	bf00      	nop
    c20c:	7ff80000 	.word	0x7ff80000

0000c210 <rint>:
    c210:	b5f0      	push	{r4, r5, r6, r7, lr}
    c212:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    c216:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    c21a:	2e13      	cmp	r6, #19
    c21c:	b083      	sub	sp, #12
    c21e:	4602      	mov	r2, r0
    c220:	460b      	mov	r3, r1
    c222:	460c      	mov	r4, r1
    c224:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    c228:	4607      	mov	r7, r0
    c22a:	dc2e      	bgt.n	c28a <rint+0x7a>
    c22c:	2e00      	cmp	r6, #0
    c22e:	db49      	blt.n	c2c4 <rint+0xb4>
    c230:	493a      	ldr	r1, [pc, #232]	; (c31c <rint+0x10c>)
    c232:	4131      	asrs	r1, r6
    c234:	ea03 0001 	and.w	r0, r3, r1
    c238:	4310      	orrs	r0, r2
    c23a:	d02b      	beq.n	c294 <rint+0x84>
    c23c:	0849      	lsrs	r1, r1, #1
    c23e:	400b      	ands	r3, r1
    c240:	ea53 0702 	orrs.w	r7, r3, r2
    c244:	d00c      	beq.n	c260 <rint+0x50>
    c246:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    c24a:	2e13      	cmp	r6, #19
    c24c:	ea24 0101 	bic.w	r1, r4, r1
    c250:	fa43 f406 	asr.w	r4, r3, r6
    c254:	ea44 0401 	orr.w	r4, r4, r1
    c258:	bf0c      	ite	eq
    c25a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    c25e:	2700      	movne	r7, #0
    c260:	4b2f      	ldr	r3, [pc, #188]	; (c320 <rint+0x110>)
    c262:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    c266:	4621      	mov	r1, r4
    c268:	e9d5 4500 	ldrd	r4, r5, [r5]
    c26c:	4638      	mov	r0, r7
    c26e:	4622      	mov	r2, r4
    c270:	462b      	mov	r3, r5
    c272:	f000 f8e5 	bl	c440 <__adddf3>
    c276:	e9cd 0100 	strd	r0, r1, [sp]
    c27a:	4622      	mov	r2, r4
    c27c:	462b      	mov	r3, r5
    c27e:	e9dd 0100 	ldrd	r0, r1, [sp]
    c282:	f000 f8db 	bl	c43c <__aeabi_dsub>
    c286:	b003      	add	sp, #12
    c288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c28a:	2e33      	cmp	r6, #51	; 0x33
    c28c:	dd06      	ble.n	c29c <rint+0x8c>
    c28e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    c292:	d040      	beq.n	c316 <rint+0x106>
    c294:	4610      	mov	r0, r2
    c296:	4619      	mov	r1, r3
    c298:	b003      	add	sp, #12
    c29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c29c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    c2a0:	f04f 31ff 	mov.w	r1, #4294967295
    c2a4:	fa21 f10e 	lsr.w	r1, r1, lr
    c2a8:	4208      	tst	r0, r1
    c2aa:	d0f3      	beq.n	c294 <rint+0x84>
    c2ac:	0849      	lsrs	r1, r1, #1
    c2ae:	4208      	tst	r0, r1
    c2b0:	d0d6      	beq.n	c260 <rint+0x50>
    c2b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c2b6:	ea20 0101 	bic.w	r1, r0, r1
    c2ba:	fa43 fe0e 	asr.w	lr, r3, lr
    c2be:	ea4e 0701 	orr.w	r7, lr, r1
    c2c2:	e7cd      	b.n	c260 <rint+0x50>
    c2c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c2c8:	4301      	orrs	r1, r0
    c2ca:	d0e3      	beq.n	c294 <rint+0x84>
    c2cc:	f3c3 0113 	ubfx	r1, r3, #0, #20
    c2d0:	4e13      	ldr	r6, [pc, #76]	; (c320 <rint+0x110>)
    c2d2:	4301      	orrs	r1, r0
    c2d4:	f1c1 0c00 	rsb	ip, r1, #0
    c2d8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    c2dc:	e9d6 6700 	ldrd	r6, r7, [r6]
    c2e0:	ea4c 0c01 	orr.w	ip, ip, r1
    c2e4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    c2e8:	0c5c      	lsrs	r4, r3, #17
    c2ea:	0464      	lsls	r4, r4, #17
    c2ec:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    c2f0:	ea43 0104 	orr.w	r1, r3, r4
    c2f4:	4632      	mov	r2, r6
    c2f6:	463b      	mov	r3, r7
    c2f8:	f000 f8a2 	bl	c440 <__adddf3>
    c2fc:	e9cd 0100 	strd	r0, r1, [sp]
    c300:	4632      	mov	r2, r6
    c302:	463b      	mov	r3, r7
    c304:	e9dd 0100 	ldrd	r0, r1, [sp]
    c308:	f000 f898 	bl	c43c <__aeabi_dsub>
    c30c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    c310:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    c314:	e7c0      	b.n	c298 <rint+0x88>
    c316:	f000 f893 	bl	c440 <__adddf3>
    c31a:	e7bd      	b.n	c298 <rint+0x88>
    c31c:	000fffff 	.word	0x000fffff
    c320:	0000ecd0 	.word	0x0000ecd0
    c324:	00000000 	.word	0x00000000

0000c328 <scalbn>:
    c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c32a:	f3c1 560a 	ubfx	r6, r1, #20, #11
    c32e:	4604      	mov	r4, r0
    c330:	460d      	mov	r5, r1
    c332:	460b      	mov	r3, r1
    c334:	4617      	mov	r7, r2
    c336:	bb0e      	cbnz	r6, c37c <scalbn+0x54>
    c338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    c33c:	4303      	orrs	r3, r0
    c33e:	4686      	mov	lr, r0
    c340:	d025      	beq.n	c38e <scalbn+0x66>
    c342:	2200      	movs	r2, #0
    c344:	4b34      	ldr	r3, [pc, #208]	; (c418 <scalbn+0xf0>)
    c346:	f000 fa2d 	bl	c7a4 <__aeabi_dmul>
    c34a:	4a34      	ldr	r2, [pc, #208]	; (c41c <scalbn+0xf4>)
    c34c:	4297      	cmp	r7, r2
    c34e:	4604      	mov	r4, r0
    c350:	460d      	mov	r5, r1
    c352:	460b      	mov	r3, r1
    c354:	db2a      	blt.n	c3ac <scalbn+0x84>
    c356:	f3c1 560a 	ubfx	r6, r1, #20, #11
    c35a:	3e36      	subs	r6, #54	; 0x36
    c35c:	443e      	add	r6, r7
    c35e:	f240 72fe 	movw	r2, #2046	; 0x7fe
    c362:	4296      	cmp	r6, r2
    c364:	dc28      	bgt.n	c3b8 <scalbn+0x90>
    c366:	2e00      	cmp	r6, #0
    c368:	dd12      	ble.n	c390 <scalbn+0x68>
    c36a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    c36e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    c372:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    c376:	4620      	mov	r0, r4
    c378:	4629      	mov	r1, r5
    c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c37c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c380:	4296      	cmp	r6, r2
    c382:	d1eb      	bne.n	c35c <scalbn+0x34>
    c384:	4602      	mov	r2, r0
    c386:	460b      	mov	r3, r1
    c388:	f000 f85a 	bl	c440 <__adddf3>
    c38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c390:	f116 0f35 	cmn.w	r6, #53	; 0x35
    c394:	da1d      	bge.n	c3d2 <scalbn+0xaa>
    c396:	f24c 3350 	movw	r3, #50000	; 0xc350
    c39a:	429f      	cmp	r7, r3
    c39c:	4622      	mov	r2, r4
    c39e:	462b      	mov	r3, r5
    c3a0:	dc25      	bgt.n	c3ee <scalbn+0xc6>
    c3a2:	a119      	add	r1, pc, #100	; (adr r1, c408 <scalbn+0xe0>)
    c3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
    c3a8:	f000 f83c 	bl	c424 <copysign>
    c3ac:	a316      	add	r3, pc, #88	; (adr r3, c408 <scalbn+0xe0>)
    c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    c3b2:	f000 f9f7 	bl	c7a4 <__aeabi_dmul>
    c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3b8:	4622      	mov	r2, r4
    c3ba:	462b      	mov	r3, r5
    c3bc:	a114      	add	r1, pc, #80	; (adr r1, c410 <scalbn+0xe8>)
    c3be:	e9d1 0100 	ldrd	r0, r1, [r1]
    c3c2:	f000 f82f 	bl	c424 <copysign>
    c3c6:	a312      	add	r3, pc, #72	; (adr r3, c410 <scalbn+0xe8>)
    c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c3cc:	f000 f9ea 	bl	c7a4 <__aeabi_dmul>
    c3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    c3d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    c3da:	3636      	adds	r6, #54	; 0x36
    c3dc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    c3e0:	4620      	mov	r0, r4
    c3e2:	4629      	mov	r1, r5
    c3e4:	2200      	movs	r2, #0
    c3e6:	4b0e      	ldr	r3, [pc, #56]	; (c420 <scalbn+0xf8>)
    c3e8:	f000 f9dc 	bl	c7a4 <__aeabi_dmul>
    c3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3ee:	a108      	add	r1, pc, #32	; (adr r1, c410 <scalbn+0xe8>)
    c3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
    c3f4:	f000 f816 	bl	c424 <copysign>
    c3f8:	a305      	add	r3, pc, #20	; (adr r3, c410 <scalbn+0xe8>)
    c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    c3fe:	f000 f9d1 	bl	c7a4 <__aeabi_dmul>
    c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c404:	f3af 8000 	nop.w
    c408:	c2f8f359 	.word	0xc2f8f359
    c40c:	01a56e1f 	.word	0x01a56e1f
    c410:	8800759c 	.word	0x8800759c
    c414:	7e37e43c 	.word	0x7e37e43c
    c418:	43500000 	.word	0x43500000
    c41c:	ffff3cb0 	.word	0xffff3cb0
    c420:	3c900000 	.word	0x3c900000

0000c424 <copysign>:
    c424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    c428:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    c42c:	ea42 0103 	orr.w	r1, r2, r3
    c430:	4770      	bx	lr
    c432:	bf00      	nop

0000c434 <__aeabi_drsub>:
    c434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c438:	e002      	b.n	c440 <__adddf3>
    c43a:	bf00      	nop

0000c43c <__aeabi_dsub>:
    c43c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c440 <__adddf3>:
    c440:	b530      	push	{r4, r5, lr}
    c442:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c446:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c44a:	ea94 0f05 	teq	r4, r5
    c44e:	bf08      	it	eq
    c450:	ea90 0f02 	teqeq	r0, r2
    c454:	bf1f      	itttt	ne
    c456:	ea54 0c00 	orrsne.w	ip, r4, r0
    c45a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c45e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c466:	f000 80e2 	beq.w	c62e <__adddf3+0x1ee>
    c46a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c46e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c472:	bfb8      	it	lt
    c474:	426d      	neglt	r5, r5
    c476:	dd0c      	ble.n	c492 <__adddf3+0x52>
    c478:	442c      	add	r4, r5
    c47a:	ea80 0202 	eor.w	r2, r0, r2
    c47e:	ea81 0303 	eor.w	r3, r1, r3
    c482:	ea82 0000 	eor.w	r0, r2, r0
    c486:	ea83 0101 	eor.w	r1, r3, r1
    c48a:	ea80 0202 	eor.w	r2, r0, r2
    c48e:	ea81 0303 	eor.w	r3, r1, r3
    c492:	2d36      	cmp	r5, #54	; 0x36
    c494:	bf88      	it	hi
    c496:	bd30      	pophi	{r4, r5, pc}
    c498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c49c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c4a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c4a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c4a8:	d002      	beq.n	c4b0 <__adddf3+0x70>
    c4aa:	4240      	negs	r0, r0
    c4ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c4b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c4b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c4b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c4bc:	d002      	beq.n	c4c4 <__adddf3+0x84>
    c4be:	4252      	negs	r2, r2
    c4c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c4c4:	ea94 0f05 	teq	r4, r5
    c4c8:	f000 80a7 	beq.w	c61a <__adddf3+0x1da>
    c4cc:	f1a4 0401 	sub.w	r4, r4, #1
    c4d0:	f1d5 0e20 	rsbs	lr, r5, #32
    c4d4:	db0d      	blt.n	c4f2 <__adddf3+0xb2>
    c4d6:	fa02 fc0e 	lsl.w	ip, r2, lr
    c4da:	fa22 f205 	lsr.w	r2, r2, r5
    c4de:	1880      	adds	r0, r0, r2
    c4e0:	f141 0100 	adc.w	r1, r1, #0
    c4e4:	fa03 f20e 	lsl.w	r2, r3, lr
    c4e8:	1880      	adds	r0, r0, r2
    c4ea:	fa43 f305 	asr.w	r3, r3, r5
    c4ee:	4159      	adcs	r1, r3
    c4f0:	e00e      	b.n	c510 <__adddf3+0xd0>
    c4f2:	f1a5 0520 	sub.w	r5, r5, #32
    c4f6:	f10e 0e20 	add.w	lr, lr, #32
    c4fa:	2a01      	cmp	r2, #1
    c4fc:	fa03 fc0e 	lsl.w	ip, r3, lr
    c500:	bf28      	it	cs
    c502:	f04c 0c02 	orrcs.w	ip, ip, #2
    c506:	fa43 f305 	asr.w	r3, r3, r5
    c50a:	18c0      	adds	r0, r0, r3
    c50c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c514:	d507      	bpl.n	c526 <__adddf3+0xe6>
    c516:	f04f 0e00 	mov.w	lr, #0
    c51a:	f1dc 0c00 	rsbs	ip, ip, #0
    c51e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c522:	eb6e 0101 	sbc.w	r1, lr, r1
    c526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c52a:	d31b      	bcc.n	c564 <__adddf3+0x124>
    c52c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c530:	d30c      	bcc.n	c54c <__adddf3+0x10c>
    c532:	0849      	lsrs	r1, r1, #1
    c534:	ea5f 0030 	movs.w	r0, r0, rrx
    c538:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c53c:	f104 0401 	add.w	r4, r4, #1
    c540:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c548:	f080 809a 	bcs.w	c680 <__adddf3+0x240>
    c54c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c550:	bf08      	it	eq
    c552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c556:	f150 0000 	adcs.w	r0, r0, #0
    c55a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c55e:	ea41 0105 	orr.w	r1, r1, r5
    c562:	bd30      	pop	{r4, r5, pc}
    c564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c568:	4140      	adcs	r0, r0
    c56a:	eb41 0101 	adc.w	r1, r1, r1
    c56e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c572:	f1a4 0401 	sub.w	r4, r4, #1
    c576:	d1e9      	bne.n	c54c <__adddf3+0x10c>
    c578:	f091 0f00 	teq	r1, #0
    c57c:	bf04      	itt	eq
    c57e:	4601      	moveq	r1, r0
    c580:	2000      	moveq	r0, #0
    c582:	fab1 f381 	clz	r3, r1
    c586:	bf08      	it	eq
    c588:	3320      	addeq	r3, #32
    c58a:	f1a3 030b 	sub.w	r3, r3, #11
    c58e:	f1b3 0220 	subs.w	r2, r3, #32
    c592:	da0c      	bge.n	c5ae <__adddf3+0x16e>
    c594:	320c      	adds	r2, #12
    c596:	dd08      	ble.n	c5aa <__adddf3+0x16a>
    c598:	f102 0c14 	add.w	ip, r2, #20
    c59c:	f1c2 020c 	rsb	r2, r2, #12
    c5a0:	fa01 f00c 	lsl.w	r0, r1, ip
    c5a4:	fa21 f102 	lsr.w	r1, r1, r2
    c5a8:	e00c      	b.n	c5c4 <__adddf3+0x184>
    c5aa:	f102 0214 	add.w	r2, r2, #20
    c5ae:	bfd8      	it	le
    c5b0:	f1c2 0c20 	rsble	ip, r2, #32
    c5b4:	fa01 f102 	lsl.w	r1, r1, r2
    c5b8:	fa20 fc0c 	lsr.w	ip, r0, ip
    c5bc:	bfdc      	itt	le
    c5be:	ea41 010c 	orrle.w	r1, r1, ip
    c5c2:	4090      	lslle	r0, r2
    c5c4:	1ae4      	subs	r4, r4, r3
    c5c6:	bfa2      	ittt	ge
    c5c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c5cc:	4329      	orrge	r1, r5
    c5ce:	bd30      	popge	{r4, r5, pc}
    c5d0:	ea6f 0404 	mvn.w	r4, r4
    c5d4:	3c1f      	subs	r4, #31
    c5d6:	da1c      	bge.n	c612 <__adddf3+0x1d2>
    c5d8:	340c      	adds	r4, #12
    c5da:	dc0e      	bgt.n	c5fa <__adddf3+0x1ba>
    c5dc:	f104 0414 	add.w	r4, r4, #20
    c5e0:	f1c4 0220 	rsb	r2, r4, #32
    c5e4:	fa20 f004 	lsr.w	r0, r0, r4
    c5e8:	fa01 f302 	lsl.w	r3, r1, r2
    c5ec:	ea40 0003 	orr.w	r0, r0, r3
    c5f0:	fa21 f304 	lsr.w	r3, r1, r4
    c5f4:	ea45 0103 	orr.w	r1, r5, r3
    c5f8:	bd30      	pop	{r4, r5, pc}
    c5fa:	f1c4 040c 	rsb	r4, r4, #12
    c5fe:	f1c4 0220 	rsb	r2, r4, #32
    c602:	fa20 f002 	lsr.w	r0, r0, r2
    c606:	fa01 f304 	lsl.w	r3, r1, r4
    c60a:	ea40 0003 	orr.w	r0, r0, r3
    c60e:	4629      	mov	r1, r5
    c610:	bd30      	pop	{r4, r5, pc}
    c612:	fa21 f004 	lsr.w	r0, r1, r4
    c616:	4629      	mov	r1, r5
    c618:	bd30      	pop	{r4, r5, pc}
    c61a:	f094 0f00 	teq	r4, #0
    c61e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c622:	bf06      	itte	eq
    c624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c628:	3401      	addeq	r4, #1
    c62a:	3d01      	subne	r5, #1
    c62c:	e74e      	b.n	c4cc <__adddf3+0x8c>
    c62e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c632:	bf18      	it	ne
    c634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c638:	d029      	beq.n	c68e <__adddf3+0x24e>
    c63a:	ea94 0f05 	teq	r4, r5
    c63e:	bf08      	it	eq
    c640:	ea90 0f02 	teqeq	r0, r2
    c644:	d005      	beq.n	c652 <__adddf3+0x212>
    c646:	ea54 0c00 	orrs.w	ip, r4, r0
    c64a:	bf04      	itt	eq
    c64c:	4619      	moveq	r1, r3
    c64e:	4610      	moveq	r0, r2
    c650:	bd30      	pop	{r4, r5, pc}
    c652:	ea91 0f03 	teq	r1, r3
    c656:	bf1e      	ittt	ne
    c658:	2100      	movne	r1, #0
    c65a:	2000      	movne	r0, #0
    c65c:	bd30      	popne	{r4, r5, pc}
    c65e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c662:	d105      	bne.n	c670 <__adddf3+0x230>
    c664:	0040      	lsls	r0, r0, #1
    c666:	4149      	adcs	r1, r1
    c668:	bf28      	it	cs
    c66a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c66e:	bd30      	pop	{r4, r5, pc}
    c670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c674:	bf3c      	itt	cc
    c676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c67a:	bd30      	popcc	{r4, r5, pc}
    c67c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c688:	f04f 0000 	mov.w	r0, #0
    c68c:	bd30      	pop	{r4, r5, pc}
    c68e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c692:	bf1a      	itte	ne
    c694:	4619      	movne	r1, r3
    c696:	4610      	movne	r0, r2
    c698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c69c:	bf1c      	itt	ne
    c69e:	460b      	movne	r3, r1
    c6a0:	4602      	movne	r2, r0
    c6a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c6a6:	bf06      	itte	eq
    c6a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c6ac:	ea91 0f03 	teqeq	r1, r3
    c6b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c6b4:	bd30      	pop	{r4, r5, pc}
    c6b6:	bf00      	nop

0000c6b8 <__aeabi_ui2d>:
    c6b8:	f090 0f00 	teq	r0, #0
    c6bc:	bf04      	itt	eq
    c6be:	2100      	moveq	r1, #0
    c6c0:	4770      	bxeq	lr
    c6c2:	b530      	push	{r4, r5, lr}
    c6c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c6c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c6cc:	f04f 0500 	mov.w	r5, #0
    c6d0:	f04f 0100 	mov.w	r1, #0
    c6d4:	e750      	b.n	c578 <__adddf3+0x138>
    c6d6:	bf00      	nop

0000c6d8 <__aeabi_i2d>:
    c6d8:	f090 0f00 	teq	r0, #0
    c6dc:	bf04      	itt	eq
    c6de:	2100      	moveq	r1, #0
    c6e0:	4770      	bxeq	lr
    c6e2:	b530      	push	{r4, r5, lr}
    c6e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c6e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c6ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c6f0:	bf48      	it	mi
    c6f2:	4240      	negmi	r0, r0
    c6f4:	f04f 0100 	mov.w	r1, #0
    c6f8:	e73e      	b.n	c578 <__adddf3+0x138>
    c6fa:	bf00      	nop

0000c6fc <__aeabi_f2d>:
    c6fc:	0042      	lsls	r2, r0, #1
    c6fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c702:	ea4f 0131 	mov.w	r1, r1, rrx
    c706:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c70a:	bf1f      	itttt	ne
    c70c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c718:	4770      	bxne	lr
    c71a:	f092 0f00 	teq	r2, #0
    c71e:	bf14      	ite	ne
    c720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c724:	4770      	bxeq	lr
    c726:	b530      	push	{r4, r5, lr}
    c728:	f44f 7460 	mov.w	r4, #896	; 0x380
    c72c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c734:	e720      	b.n	c578 <__adddf3+0x138>
    c736:	bf00      	nop

0000c738 <__aeabi_ul2d>:
    c738:	ea50 0201 	orrs.w	r2, r0, r1
    c73c:	bf08      	it	eq
    c73e:	4770      	bxeq	lr
    c740:	b530      	push	{r4, r5, lr}
    c742:	f04f 0500 	mov.w	r5, #0
    c746:	e00a      	b.n	c75e <__aeabi_l2d+0x16>

0000c748 <__aeabi_l2d>:
    c748:	ea50 0201 	orrs.w	r2, r0, r1
    c74c:	bf08      	it	eq
    c74e:	4770      	bxeq	lr
    c750:	b530      	push	{r4, r5, lr}
    c752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c756:	d502      	bpl.n	c75e <__aeabi_l2d+0x16>
    c758:	4240      	negs	r0, r0
    c75a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c75e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c762:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c76a:	f43f aedc 	beq.w	c526 <__adddf3+0xe6>
    c76e:	f04f 0203 	mov.w	r2, #3
    c772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c776:	bf18      	it	ne
    c778:	3203      	addne	r2, #3
    c77a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c77e:	bf18      	it	ne
    c780:	3203      	addne	r2, #3
    c782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c786:	f1c2 0320 	rsb	r3, r2, #32
    c78a:	fa00 fc03 	lsl.w	ip, r0, r3
    c78e:	fa20 f002 	lsr.w	r0, r0, r2
    c792:	fa01 fe03 	lsl.w	lr, r1, r3
    c796:	ea40 000e 	orr.w	r0, r0, lr
    c79a:	fa21 f102 	lsr.w	r1, r1, r2
    c79e:	4414      	add	r4, r2
    c7a0:	e6c1      	b.n	c526 <__adddf3+0xe6>
    c7a2:	bf00      	nop

0000c7a4 <__aeabi_dmul>:
    c7a4:	b570      	push	{r4, r5, r6, lr}
    c7a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c7aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c7ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c7b2:	bf1d      	ittte	ne
    c7b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c7b8:	ea94 0f0c 	teqne	r4, ip
    c7bc:	ea95 0f0c 	teqne	r5, ip
    c7c0:	f000 f8de 	bleq	c980 <__aeabi_dmul+0x1dc>
    c7c4:	442c      	add	r4, r5
    c7c6:	ea81 0603 	eor.w	r6, r1, r3
    c7ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c7ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c7d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c7d6:	bf18      	it	ne
    c7d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c7dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c7e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c7e4:	d038      	beq.n	c858 <__aeabi_dmul+0xb4>
    c7e6:	fba0 ce02 	umull	ip, lr, r0, r2
    c7ea:	f04f 0500 	mov.w	r5, #0
    c7ee:	fbe1 e502 	umlal	lr, r5, r1, r2
    c7f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c7f6:	fbe0 e503 	umlal	lr, r5, r0, r3
    c7fa:	f04f 0600 	mov.w	r6, #0
    c7fe:	fbe1 5603 	umlal	r5, r6, r1, r3
    c802:	f09c 0f00 	teq	ip, #0
    c806:	bf18      	it	ne
    c808:	f04e 0e01 	orrne.w	lr, lr, #1
    c80c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c810:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c814:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c818:	d204      	bcs.n	c824 <__aeabi_dmul+0x80>
    c81a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c81e:	416d      	adcs	r5, r5
    c820:	eb46 0606 	adc.w	r6, r6, r6
    c824:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c828:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c82c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c830:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c834:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c838:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c83c:	bf88      	it	hi
    c83e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c842:	d81e      	bhi.n	c882 <__aeabi_dmul+0xde>
    c844:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c848:	bf08      	it	eq
    c84a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c84e:	f150 0000 	adcs.w	r0, r0, #0
    c852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c856:	bd70      	pop	{r4, r5, r6, pc}
    c858:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c85c:	ea46 0101 	orr.w	r1, r6, r1
    c860:	ea40 0002 	orr.w	r0, r0, r2
    c864:	ea81 0103 	eor.w	r1, r1, r3
    c868:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c86c:	bfc2      	ittt	gt
    c86e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c876:	bd70      	popgt	{r4, r5, r6, pc}
    c878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c87c:	f04f 0e00 	mov.w	lr, #0
    c880:	3c01      	subs	r4, #1
    c882:	f300 80ab 	bgt.w	c9dc <__aeabi_dmul+0x238>
    c886:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c88a:	bfde      	ittt	le
    c88c:	2000      	movle	r0, #0
    c88e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c892:	bd70      	pople	{r4, r5, r6, pc}
    c894:	f1c4 0400 	rsb	r4, r4, #0
    c898:	3c20      	subs	r4, #32
    c89a:	da35      	bge.n	c908 <__aeabi_dmul+0x164>
    c89c:	340c      	adds	r4, #12
    c89e:	dc1b      	bgt.n	c8d8 <__aeabi_dmul+0x134>
    c8a0:	f104 0414 	add.w	r4, r4, #20
    c8a4:	f1c4 0520 	rsb	r5, r4, #32
    c8a8:	fa00 f305 	lsl.w	r3, r0, r5
    c8ac:	fa20 f004 	lsr.w	r0, r0, r4
    c8b0:	fa01 f205 	lsl.w	r2, r1, r5
    c8b4:	ea40 0002 	orr.w	r0, r0, r2
    c8b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c8bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c8c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c8c4:	fa21 f604 	lsr.w	r6, r1, r4
    c8c8:	eb42 0106 	adc.w	r1, r2, r6
    c8cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c8d0:	bf08      	it	eq
    c8d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c8d6:	bd70      	pop	{r4, r5, r6, pc}
    c8d8:	f1c4 040c 	rsb	r4, r4, #12
    c8dc:	f1c4 0520 	rsb	r5, r4, #32
    c8e0:	fa00 f304 	lsl.w	r3, r0, r4
    c8e4:	fa20 f005 	lsr.w	r0, r0, r5
    c8e8:	fa01 f204 	lsl.w	r2, r1, r4
    c8ec:	ea40 0002 	orr.w	r0, r0, r2
    c8f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c8f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c8f8:	f141 0100 	adc.w	r1, r1, #0
    c8fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c900:	bf08      	it	eq
    c902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c906:	bd70      	pop	{r4, r5, r6, pc}
    c908:	f1c4 0520 	rsb	r5, r4, #32
    c90c:	fa00 f205 	lsl.w	r2, r0, r5
    c910:	ea4e 0e02 	orr.w	lr, lr, r2
    c914:	fa20 f304 	lsr.w	r3, r0, r4
    c918:	fa01 f205 	lsl.w	r2, r1, r5
    c91c:	ea43 0302 	orr.w	r3, r3, r2
    c920:	fa21 f004 	lsr.w	r0, r1, r4
    c924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c928:	fa21 f204 	lsr.w	r2, r1, r4
    c92c:	ea20 0002 	bic.w	r0, r0, r2
    c930:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c938:	bf08      	it	eq
    c93a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c93e:	bd70      	pop	{r4, r5, r6, pc}
    c940:	f094 0f00 	teq	r4, #0
    c944:	d10f      	bne.n	c966 <__aeabi_dmul+0x1c2>
    c946:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c94a:	0040      	lsls	r0, r0, #1
    c94c:	eb41 0101 	adc.w	r1, r1, r1
    c950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c954:	bf08      	it	eq
    c956:	3c01      	subeq	r4, #1
    c958:	d0f7      	beq.n	c94a <__aeabi_dmul+0x1a6>
    c95a:	ea41 0106 	orr.w	r1, r1, r6
    c95e:	f095 0f00 	teq	r5, #0
    c962:	bf18      	it	ne
    c964:	4770      	bxne	lr
    c966:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c96a:	0052      	lsls	r2, r2, #1
    c96c:	eb43 0303 	adc.w	r3, r3, r3
    c970:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c974:	bf08      	it	eq
    c976:	3d01      	subeq	r5, #1
    c978:	d0f7      	beq.n	c96a <__aeabi_dmul+0x1c6>
    c97a:	ea43 0306 	orr.w	r3, r3, r6
    c97e:	4770      	bx	lr
    c980:	ea94 0f0c 	teq	r4, ip
    c984:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c988:	bf18      	it	ne
    c98a:	ea95 0f0c 	teqne	r5, ip
    c98e:	d00c      	beq.n	c9aa <__aeabi_dmul+0x206>
    c990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c994:	bf18      	it	ne
    c996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c99a:	d1d1      	bne.n	c940 <__aeabi_dmul+0x19c>
    c99c:	ea81 0103 	eor.w	r1, r1, r3
    c9a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c9a4:	f04f 0000 	mov.w	r0, #0
    c9a8:	bd70      	pop	{r4, r5, r6, pc}
    c9aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c9ae:	bf06      	itte	eq
    c9b0:	4610      	moveq	r0, r2
    c9b2:	4619      	moveq	r1, r3
    c9b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c9b8:	d019      	beq.n	c9ee <__aeabi_dmul+0x24a>
    c9ba:	ea94 0f0c 	teq	r4, ip
    c9be:	d102      	bne.n	c9c6 <__aeabi_dmul+0x222>
    c9c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c9c4:	d113      	bne.n	c9ee <__aeabi_dmul+0x24a>
    c9c6:	ea95 0f0c 	teq	r5, ip
    c9ca:	d105      	bne.n	c9d8 <__aeabi_dmul+0x234>
    c9cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c9d0:	bf1c      	itt	ne
    c9d2:	4610      	movne	r0, r2
    c9d4:	4619      	movne	r1, r3
    c9d6:	d10a      	bne.n	c9ee <__aeabi_dmul+0x24a>
    c9d8:	ea81 0103 	eor.w	r1, r1, r3
    c9dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c9e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c9e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c9e8:	f04f 0000 	mov.w	r0, #0
    c9ec:	bd70      	pop	{r4, r5, r6, pc}
    c9ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c9f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c9f6:	bd70      	pop	{r4, r5, r6, pc}

0000c9f8 <__aeabi_ddiv>:
    c9f8:	b570      	push	{r4, r5, r6, lr}
    c9fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c9fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ca02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ca06:	bf1d      	ittte	ne
    ca08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ca0c:	ea94 0f0c 	teqne	r4, ip
    ca10:	ea95 0f0c 	teqne	r5, ip
    ca14:	f000 f8a7 	bleq	cb66 <__aeabi_ddiv+0x16e>
    ca18:	eba4 0405 	sub.w	r4, r4, r5
    ca1c:	ea81 0e03 	eor.w	lr, r1, r3
    ca20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ca24:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ca28:	f000 8088 	beq.w	cb3c <__aeabi_ddiv+0x144>
    ca2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ca30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ca34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    ca38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    ca3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ca40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    ca44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    ca48:	ea4f 2600 	mov.w	r6, r0, lsl #8
    ca4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ca50:	429d      	cmp	r5, r3
    ca52:	bf08      	it	eq
    ca54:	4296      	cmpeq	r6, r2
    ca56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ca5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ca5e:	d202      	bcs.n	ca66 <__aeabi_ddiv+0x6e>
    ca60:	085b      	lsrs	r3, r3, #1
    ca62:	ea4f 0232 	mov.w	r2, r2, rrx
    ca66:	1ab6      	subs	r6, r6, r2
    ca68:	eb65 0503 	sbc.w	r5, r5, r3
    ca6c:	085b      	lsrs	r3, r3, #1
    ca6e:	ea4f 0232 	mov.w	r2, r2, rrx
    ca72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ca76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ca7a:	ebb6 0e02 	subs.w	lr, r6, r2
    ca7e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca82:	bf22      	ittt	cs
    ca84:	1ab6      	subcs	r6, r6, r2
    ca86:	4675      	movcs	r5, lr
    ca88:	ea40 000c 	orrcs.w	r0, r0, ip
    ca8c:	085b      	lsrs	r3, r3, #1
    ca8e:	ea4f 0232 	mov.w	r2, r2, rrx
    ca92:	ebb6 0e02 	subs.w	lr, r6, r2
    ca96:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca9a:	bf22      	ittt	cs
    ca9c:	1ab6      	subcs	r6, r6, r2
    ca9e:	4675      	movcs	r5, lr
    caa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    caa4:	085b      	lsrs	r3, r3, #1
    caa6:	ea4f 0232 	mov.w	r2, r2, rrx
    caaa:	ebb6 0e02 	subs.w	lr, r6, r2
    caae:	eb75 0e03 	sbcs.w	lr, r5, r3
    cab2:	bf22      	ittt	cs
    cab4:	1ab6      	subcs	r6, r6, r2
    cab6:	4675      	movcs	r5, lr
    cab8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cabc:	085b      	lsrs	r3, r3, #1
    cabe:	ea4f 0232 	mov.w	r2, r2, rrx
    cac2:	ebb6 0e02 	subs.w	lr, r6, r2
    cac6:	eb75 0e03 	sbcs.w	lr, r5, r3
    caca:	bf22      	ittt	cs
    cacc:	1ab6      	subcs	r6, r6, r2
    cace:	4675      	movcs	r5, lr
    cad0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cad4:	ea55 0e06 	orrs.w	lr, r5, r6
    cad8:	d018      	beq.n	cb0c <__aeabi_ddiv+0x114>
    cada:	ea4f 1505 	mov.w	r5, r5, lsl #4
    cade:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cae2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cae6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    caea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    caee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    caf2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    caf6:	d1c0      	bne.n	ca7a <__aeabi_ddiv+0x82>
    caf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cafc:	d10b      	bne.n	cb16 <__aeabi_ddiv+0x11e>
    cafe:	ea41 0100 	orr.w	r1, r1, r0
    cb02:	f04f 0000 	mov.w	r0, #0
    cb06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cb0a:	e7b6      	b.n	ca7a <__aeabi_ddiv+0x82>
    cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cb10:	bf04      	itt	eq
    cb12:	4301      	orreq	r1, r0
    cb14:	2000      	moveq	r0, #0
    cb16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cb1a:	bf88      	it	hi
    cb1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cb20:	f63f aeaf 	bhi.w	c882 <__aeabi_dmul+0xde>
    cb24:	ebb5 0c03 	subs.w	ip, r5, r3
    cb28:	bf04      	itt	eq
    cb2a:	ebb6 0c02 	subseq.w	ip, r6, r2
    cb2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cb32:	f150 0000 	adcs.w	r0, r0, #0
    cb36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cb3a:	bd70      	pop	{r4, r5, r6, pc}
    cb3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cb40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cb44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cb48:	bfc2      	ittt	gt
    cb4a:	ebd4 050c 	rsbsgt	r5, r4, ip
    cb4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cb52:	bd70      	popgt	{r4, r5, r6, pc}
    cb54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cb58:	f04f 0e00 	mov.w	lr, #0
    cb5c:	3c01      	subs	r4, #1
    cb5e:	e690      	b.n	c882 <__aeabi_dmul+0xde>
    cb60:	ea45 0e06 	orr.w	lr, r5, r6
    cb64:	e68d      	b.n	c882 <__aeabi_dmul+0xde>
    cb66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cb6a:	ea94 0f0c 	teq	r4, ip
    cb6e:	bf08      	it	eq
    cb70:	ea95 0f0c 	teqeq	r5, ip
    cb74:	f43f af3b 	beq.w	c9ee <__aeabi_dmul+0x24a>
    cb78:	ea94 0f0c 	teq	r4, ip
    cb7c:	d10a      	bne.n	cb94 <__aeabi_ddiv+0x19c>
    cb7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cb82:	f47f af34 	bne.w	c9ee <__aeabi_dmul+0x24a>
    cb86:	ea95 0f0c 	teq	r5, ip
    cb8a:	f47f af25 	bne.w	c9d8 <__aeabi_dmul+0x234>
    cb8e:	4610      	mov	r0, r2
    cb90:	4619      	mov	r1, r3
    cb92:	e72c      	b.n	c9ee <__aeabi_dmul+0x24a>
    cb94:	ea95 0f0c 	teq	r5, ip
    cb98:	d106      	bne.n	cba8 <__aeabi_ddiv+0x1b0>
    cb9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb9e:	f43f aefd 	beq.w	c99c <__aeabi_dmul+0x1f8>
    cba2:	4610      	mov	r0, r2
    cba4:	4619      	mov	r1, r3
    cba6:	e722      	b.n	c9ee <__aeabi_dmul+0x24a>
    cba8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cbac:	bf18      	it	ne
    cbae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cbb2:	f47f aec5 	bne.w	c940 <__aeabi_dmul+0x19c>
    cbb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    cbba:	f47f af0d 	bne.w	c9d8 <__aeabi_dmul+0x234>
    cbbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cbc2:	f47f aeeb 	bne.w	c99c <__aeabi_dmul+0x1f8>
    cbc6:	e712      	b.n	c9ee <__aeabi_dmul+0x24a>

0000cbc8 <__gedf2>:
    cbc8:	f04f 3cff 	mov.w	ip, #4294967295
    cbcc:	e006      	b.n	cbdc <__cmpdf2+0x4>
    cbce:	bf00      	nop

0000cbd0 <__ledf2>:
    cbd0:	f04f 0c01 	mov.w	ip, #1
    cbd4:	e002      	b.n	cbdc <__cmpdf2+0x4>
    cbd6:	bf00      	nop

0000cbd8 <__cmpdf2>:
    cbd8:	f04f 0c01 	mov.w	ip, #1
    cbdc:	f84d cd04 	str.w	ip, [sp, #-4]!
    cbe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cbe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cbe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cbec:	bf18      	it	ne
    cbee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cbf2:	d01b      	beq.n	cc2c <__cmpdf2+0x54>
    cbf4:	b001      	add	sp, #4
    cbf6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cbfa:	bf0c      	ite	eq
    cbfc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cc00:	ea91 0f03 	teqne	r1, r3
    cc04:	bf02      	ittt	eq
    cc06:	ea90 0f02 	teqeq	r0, r2
    cc0a:	2000      	moveq	r0, #0
    cc0c:	4770      	bxeq	lr
    cc0e:	f110 0f00 	cmn.w	r0, #0
    cc12:	ea91 0f03 	teq	r1, r3
    cc16:	bf58      	it	pl
    cc18:	4299      	cmppl	r1, r3
    cc1a:	bf08      	it	eq
    cc1c:	4290      	cmpeq	r0, r2
    cc1e:	bf2c      	ite	cs
    cc20:	17d8      	asrcs	r0, r3, #31
    cc22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cc26:	f040 0001 	orr.w	r0, r0, #1
    cc2a:	4770      	bx	lr
    cc2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cc30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cc34:	d102      	bne.n	cc3c <__cmpdf2+0x64>
    cc36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cc3a:	d107      	bne.n	cc4c <__cmpdf2+0x74>
    cc3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cc40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cc44:	d1d6      	bne.n	cbf4 <__cmpdf2+0x1c>
    cc46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cc4a:	d0d3      	beq.n	cbf4 <__cmpdf2+0x1c>
    cc4c:	f85d 0b04 	ldr.w	r0, [sp], #4
    cc50:	4770      	bx	lr
    cc52:	bf00      	nop

0000cc54 <__aeabi_cdrcmple>:
    cc54:	4684      	mov	ip, r0
    cc56:	4610      	mov	r0, r2
    cc58:	4662      	mov	r2, ip
    cc5a:	468c      	mov	ip, r1
    cc5c:	4619      	mov	r1, r3
    cc5e:	4663      	mov	r3, ip
    cc60:	e000      	b.n	cc64 <__aeabi_cdcmpeq>
    cc62:	bf00      	nop

0000cc64 <__aeabi_cdcmpeq>:
    cc64:	b501      	push	{r0, lr}
    cc66:	f7ff ffb7 	bl	cbd8 <__cmpdf2>
    cc6a:	2800      	cmp	r0, #0
    cc6c:	bf48      	it	mi
    cc6e:	f110 0f00 	cmnmi.w	r0, #0
    cc72:	bd01      	pop	{r0, pc}

0000cc74 <__aeabi_dcmpeq>:
    cc74:	f84d ed08 	str.w	lr, [sp, #-8]!
    cc78:	f7ff fff4 	bl	cc64 <__aeabi_cdcmpeq>
    cc7c:	bf0c      	ite	eq
    cc7e:	2001      	moveq	r0, #1
    cc80:	2000      	movne	r0, #0
    cc82:	f85d fb08 	ldr.w	pc, [sp], #8
    cc86:	bf00      	nop

0000cc88 <__aeabi_dcmplt>:
    cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
    cc8c:	f7ff ffea 	bl	cc64 <__aeabi_cdcmpeq>
    cc90:	bf34      	ite	cc
    cc92:	2001      	movcc	r0, #1
    cc94:	2000      	movcs	r0, #0
    cc96:	f85d fb08 	ldr.w	pc, [sp], #8
    cc9a:	bf00      	nop

0000cc9c <__aeabi_dcmple>:
    cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cca0:	f7ff ffe0 	bl	cc64 <__aeabi_cdcmpeq>
    cca4:	bf94      	ite	ls
    cca6:	2001      	movls	r0, #1
    cca8:	2000      	movhi	r0, #0
    ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
    ccae:	bf00      	nop

0000ccb0 <__aeabi_dcmpge>:
    ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
    ccb4:	f7ff ffce 	bl	cc54 <__aeabi_cdrcmple>
    ccb8:	bf94      	ite	ls
    ccba:	2001      	movls	r0, #1
    ccbc:	2000      	movhi	r0, #0
    ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
    ccc2:	bf00      	nop

0000ccc4 <__aeabi_dcmpgt>:
    ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
    ccc8:	f7ff ffc4 	bl	cc54 <__aeabi_cdrcmple>
    cccc:	bf34      	ite	cc
    ccce:	2001      	movcc	r0, #1
    ccd0:	2000      	movcs	r0, #0
    ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
    ccd6:	bf00      	nop

0000ccd8 <__aeabi_dcmpun>:
    ccd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ccdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cce0:	d102      	bne.n	cce8 <__aeabi_dcmpun+0x10>
    cce2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cce6:	d10a      	bne.n	ccfe <__aeabi_dcmpun+0x26>
    cce8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ccec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ccf0:	d102      	bne.n	ccf8 <__aeabi_dcmpun+0x20>
    ccf2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ccf6:	d102      	bne.n	ccfe <__aeabi_dcmpun+0x26>
    ccf8:	f04f 0000 	mov.w	r0, #0
    ccfc:	4770      	bx	lr
    ccfe:	f04f 0001 	mov.w	r0, #1
    cd02:	4770      	bx	lr

0000cd04 <__aeabi_d2uiz>:
    cd04:	004a      	lsls	r2, r1, #1
    cd06:	d211      	bcs.n	cd2c <__aeabi_d2uiz+0x28>
    cd08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cd0c:	d211      	bcs.n	cd32 <__aeabi_d2uiz+0x2e>
    cd0e:	d50d      	bpl.n	cd2c <__aeabi_d2uiz+0x28>
    cd10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cd14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cd18:	d40e      	bmi.n	cd38 <__aeabi_d2uiz+0x34>
    cd1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cd1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cd22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cd26:	fa23 f002 	lsr.w	r0, r3, r2
    cd2a:	4770      	bx	lr
    cd2c:	f04f 0000 	mov.w	r0, #0
    cd30:	4770      	bx	lr
    cd32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cd36:	d102      	bne.n	cd3e <__aeabi_d2uiz+0x3a>
    cd38:	f04f 30ff 	mov.w	r0, #4294967295
    cd3c:	4770      	bx	lr
    cd3e:	f04f 0000 	mov.w	r0, #0
    cd42:	4770      	bx	lr

0000cd44 <__cxa_atexit>:
    cd44:	4613      	mov	r3, r2
    cd46:	460a      	mov	r2, r1
    cd48:	4601      	mov	r1, r0
    cd4a:	2002      	movs	r0, #2
    cd4c:	f000 b9a6 	b.w	d09c <__register_exitproc>

0000cd50 <difftime>:
    cd50:	b508      	push	{r3, lr}
    cd52:	1a40      	subs	r0, r0, r1
    cd54:	f7ff fcc0 	bl	c6d8 <__aeabi_i2d>
    cd58:	bd08      	pop	{r3, pc}
    cd5a:	bf00      	nop

0000cd5c <__errno>:
    cd5c:	4b01      	ldr	r3, [pc, #4]	; (cd64 <__errno+0x8>)
    cd5e:	6818      	ldr	r0, [r3, #0]
    cd60:	4770      	bx	lr
    cd62:	bf00      	nop
    cd64:	20000154 	.word	0x20000154

0000cd68 <__libc_init_array>:
    cd68:	b570      	push	{r4, r5, r6, lr}
    cd6a:	4e0f      	ldr	r6, [pc, #60]	; (cda8 <__libc_init_array+0x40>)
    cd6c:	4d0f      	ldr	r5, [pc, #60]	; (cdac <__libc_init_array+0x44>)
    cd6e:	1b76      	subs	r6, r6, r5
    cd70:	10b6      	asrs	r6, r6, #2
    cd72:	bf18      	it	ne
    cd74:	2400      	movne	r4, #0
    cd76:	d005      	beq.n	cd84 <__libc_init_array+0x1c>
    cd78:	3401      	adds	r4, #1
    cd7a:	f855 3b04 	ldr.w	r3, [r5], #4
    cd7e:	4798      	blx	r3
    cd80:	42a6      	cmp	r6, r4
    cd82:	d1f9      	bne.n	cd78 <__libc_init_array+0x10>
    cd84:	4e0a      	ldr	r6, [pc, #40]	; (cdb0 <__libc_init_array+0x48>)
    cd86:	4d0b      	ldr	r5, [pc, #44]	; (cdb4 <__libc_init_array+0x4c>)
    cd88:	1b76      	subs	r6, r6, r5
    cd8a:	f001 ffab 	bl	ece4 <_init>
    cd8e:	10b6      	asrs	r6, r6, #2
    cd90:	bf18      	it	ne
    cd92:	2400      	movne	r4, #0
    cd94:	d006      	beq.n	cda4 <__libc_init_array+0x3c>
    cd96:	3401      	adds	r4, #1
    cd98:	f855 3b04 	ldr.w	r3, [r5], #4
    cd9c:	4798      	blx	r3
    cd9e:	42a6      	cmp	r6, r4
    cda0:	d1f9      	bne.n	cd96 <__libc_init_array+0x2e>
    cda2:	bd70      	pop	{r4, r5, r6, pc}
    cda4:	bd70      	pop	{r4, r5, r6, pc}
    cda6:	bf00      	nop
    cda8:	0000ecf0 	.word	0x0000ecf0
    cdac:	0000ecf0 	.word	0x0000ecf0
    cdb0:	0000ed38 	.word	0x0000ed38
    cdb4:	0000ecf0 	.word	0x0000ecf0

0000cdb8 <memcpy>:
    cdb8:	4684      	mov	ip, r0
    cdba:	ea41 0300 	orr.w	r3, r1, r0
    cdbe:	f013 0303 	ands.w	r3, r3, #3
    cdc2:	d16d      	bne.n	cea0 <memcpy+0xe8>
    cdc4:	3a40      	subs	r2, #64	; 0x40
    cdc6:	d341      	bcc.n	ce4c <memcpy+0x94>
    cdc8:	f851 3b04 	ldr.w	r3, [r1], #4
    cdcc:	f840 3b04 	str.w	r3, [r0], #4
    cdd0:	f851 3b04 	ldr.w	r3, [r1], #4
    cdd4:	f840 3b04 	str.w	r3, [r0], #4
    cdd8:	f851 3b04 	ldr.w	r3, [r1], #4
    cddc:	f840 3b04 	str.w	r3, [r0], #4
    cde0:	f851 3b04 	ldr.w	r3, [r1], #4
    cde4:	f840 3b04 	str.w	r3, [r0], #4
    cde8:	f851 3b04 	ldr.w	r3, [r1], #4
    cdec:	f840 3b04 	str.w	r3, [r0], #4
    cdf0:	f851 3b04 	ldr.w	r3, [r1], #4
    cdf4:	f840 3b04 	str.w	r3, [r0], #4
    cdf8:	f851 3b04 	ldr.w	r3, [r1], #4
    cdfc:	f840 3b04 	str.w	r3, [r0], #4
    ce00:	f851 3b04 	ldr.w	r3, [r1], #4
    ce04:	f840 3b04 	str.w	r3, [r0], #4
    ce08:	f851 3b04 	ldr.w	r3, [r1], #4
    ce0c:	f840 3b04 	str.w	r3, [r0], #4
    ce10:	f851 3b04 	ldr.w	r3, [r1], #4
    ce14:	f840 3b04 	str.w	r3, [r0], #4
    ce18:	f851 3b04 	ldr.w	r3, [r1], #4
    ce1c:	f840 3b04 	str.w	r3, [r0], #4
    ce20:	f851 3b04 	ldr.w	r3, [r1], #4
    ce24:	f840 3b04 	str.w	r3, [r0], #4
    ce28:	f851 3b04 	ldr.w	r3, [r1], #4
    ce2c:	f840 3b04 	str.w	r3, [r0], #4
    ce30:	f851 3b04 	ldr.w	r3, [r1], #4
    ce34:	f840 3b04 	str.w	r3, [r0], #4
    ce38:	f851 3b04 	ldr.w	r3, [r1], #4
    ce3c:	f840 3b04 	str.w	r3, [r0], #4
    ce40:	f851 3b04 	ldr.w	r3, [r1], #4
    ce44:	f840 3b04 	str.w	r3, [r0], #4
    ce48:	3a40      	subs	r2, #64	; 0x40
    ce4a:	d2bd      	bcs.n	cdc8 <memcpy+0x10>
    ce4c:	3230      	adds	r2, #48	; 0x30
    ce4e:	d311      	bcc.n	ce74 <memcpy+0xbc>
    ce50:	f851 3b04 	ldr.w	r3, [r1], #4
    ce54:	f840 3b04 	str.w	r3, [r0], #4
    ce58:	f851 3b04 	ldr.w	r3, [r1], #4
    ce5c:	f840 3b04 	str.w	r3, [r0], #4
    ce60:	f851 3b04 	ldr.w	r3, [r1], #4
    ce64:	f840 3b04 	str.w	r3, [r0], #4
    ce68:	f851 3b04 	ldr.w	r3, [r1], #4
    ce6c:	f840 3b04 	str.w	r3, [r0], #4
    ce70:	3a10      	subs	r2, #16
    ce72:	d2ed      	bcs.n	ce50 <memcpy+0x98>
    ce74:	320c      	adds	r2, #12
    ce76:	d305      	bcc.n	ce84 <memcpy+0xcc>
    ce78:	f851 3b04 	ldr.w	r3, [r1], #4
    ce7c:	f840 3b04 	str.w	r3, [r0], #4
    ce80:	3a04      	subs	r2, #4
    ce82:	d2f9      	bcs.n	ce78 <memcpy+0xc0>
    ce84:	3204      	adds	r2, #4
    ce86:	d008      	beq.n	ce9a <memcpy+0xe2>
    ce88:	07d2      	lsls	r2, r2, #31
    ce8a:	bf1c      	itt	ne
    ce8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ce90:	f800 3b01 	strbne.w	r3, [r0], #1
    ce94:	d301      	bcc.n	ce9a <memcpy+0xe2>
    ce96:	880b      	ldrh	r3, [r1, #0]
    ce98:	8003      	strh	r3, [r0, #0]
    ce9a:	4660      	mov	r0, ip
    ce9c:	4770      	bx	lr
    ce9e:	bf00      	nop
    cea0:	2a08      	cmp	r2, #8
    cea2:	d313      	bcc.n	cecc <memcpy+0x114>
    cea4:	078b      	lsls	r3, r1, #30
    cea6:	d08d      	beq.n	cdc4 <memcpy+0xc>
    cea8:	f010 0303 	ands.w	r3, r0, #3
    ceac:	d08a      	beq.n	cdc4 <memcpy+0xc>
    ceae:	f1c3 0304 	rsb	r3, r3, #4
    ceb2:	1ad2      	subs	r2, r2, r3
    ceb4:	07db      	lsls	r3, r3, #31
    ceb6:	bf1c      	itt	ne
    ceb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cebc:	f800 3b01 	strbne.w	r3, [r0], #1
    cec0:	d380      	bcc.n	cdc4 <memcpy+0xc>
    cec2:	f831 3b02 	ldrh.w	r3, [r1], #2
    cec6:	f820 3b02 	strh.w	r3, [r0], #2
    ceca:	e77b      	b.n	cdc4 <memcpy+0xc>
    cecc:	3a04      	subs	r2, #4
    cece:	d3d9      	bcc.n	ce84 <memcpy+0xcc>
    ced0:	3a01      	subs	r2, #1
    ced2:	f811 3b01 	ldrb.w	r3, [r1], #1
    ced6:	f800 3b01 	strb.w	r3, [r0], #1
    ceda:	d2f9      	bcs.n	ced0 <memcpy+0x118>
    cedc:	780b      	ldrb	r3, [r1, #0]
    cede:	7003      	strb	r3, [r0, #0]
    cee0:	784b      	ldrb	r3, [r1, #1]
    cee2:	7043      	strb	r3, [r0, #1]
    cee4:	788b      	ldrb	r3, [r1, #2]
    cee6:	7083      	strb	r3, [r0, #2]
    cee8:	4660      	mov	r0, ip
    ceea:	4770      	bx	lr

0000ceec <memset>:
    ceec:	b470      	push	{r4, r5, r6}
    ceee:	0786      	lsls	r6, r0, #30
    cef0:	d046      	beq.n	cf80 <memset+0x94>
    cef2:	1e54      	subs	r4, r2, #1
    cef4:	2a00      	cmp	r2, #0
    cef6:	d041      	beq.n	cf7c <memset+0x90>
    cef8:	b2ca      	uxtb	r2, r1
    cefa:	4603      	mov	r3, r0
    cefc:	e002      	b.n	cf04 <memset+0x18>
    cefe:	f114 34ff 	adds.w	r4, r4, #4294967295
    cf02:	d33b      	bcc.n	cf7c <memset+0x90>
    cf04:	f803 2b01 	strb.w	r2, [r3], #1
    cf08:	079d      	lsls	r5, r3, #30
    cf0a:	d1f8      	bne.n	cefe <memset+0x12>
    cf0c:	2c03      	cmp	r4, #3
    cf0e:	d92e      	bls.n	cf6e <memset+0x82>
    cf10:	b2cd      	uxtb	r5, r1
    cf12:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cf16:	2c0f      	cmp	r4, #15
    cf18:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cf1c:	d919      	bls.n	cf52 <memset+0x66>
    cf1e:	f103 0210 	add.w	r2, r3, #16
    cf22:	4626      	mov	r6, r4
    cf24:	3e10      	subs	r6, #16
    cf26:	2e0f      	cmp	r6, #15
    cf28:	f842 5c10 	str.w	r5, [r2, #-16]
    cf2c:	f842 5c0c 	str.w	r5, [r2, #-12]
    cf30:	f842 5c08 	str.w	r5, [r2, #-8]
    cf34:	f842 5c04 	str.w	r5, [r2, #-4]
    cf38:	f102 0210 	add.w	r2, r2, #16
    cf3c:	d8f2      	bhi.n	cf24 <memset+0x38>
    cf3e:	f1a4 0210 	sub.w	r2, r4, #16
    cf42:	f022 020f 	bic.w	r2, r2, #15
    cf46:	f004 040f 	and.w	r4, r4, #15
    cf4a:	3210      	adds	r2, #16
    cf4c:	2c03      	cmp	r4, #3
    cf4e:	4413      	add	r3, r2
    cf50:	d90d      	bls.n	cf6e <memset+0x82>
    cf52:	461e      	mov	r6, r3
    cf54:	4622      	mov	r2, r4
    cf56:	3a04      	subs	r2, #4
    cf58:	2a03      	cmp	r2, #3
    cf5a:	f846 5b04 	str.w	r5, [r6], #4
    cf5e:	d8fa      	bhi.n	cf56 <memset+0x6a>
    cf60:	1f22      	subs	r2, r4, #4
    cf62:	f022 0203 	bic.w	r2, r2, #3
    cf66:	3204      	adds	r2, #4
    cf68:	4413      	add	r3, r2
    cf6a:	f004 0403 	and.w	r4, r4, #3
    cf6e:	b12c      	cbz	r4, cf7c <memset+0x90>
    cf70:	b2c9      	uxtb	r1, r1
    cf72:	441c      	add	r4, r3
    cf74:	f803 1b01 	strb.w	r1, [r3], #1
    cf78:	429c      	cmp	r4, r3
    cf7a:	d1fb      	bne.n	cf74 <memset+0x88>
    cf7c:	bc70      	pop	{r4, r5, r6}
    cf7e:	4770      	bx	lr
    cf80:	4614      	mov	r4, r2
    cf82:	4603      	mov	r3, r0
    cf84:	e7c2      	b.n	cf0c <memset+0x20>
    cf86:	bf00      	nop
	...

0000cfc0 <strlen>:
    cfc0:	f890 f000 	pld	[r0]
    cfc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    cfc8:	f020 0107 	bic.w	r1, r0, #7
    cfcc:	f06f 0c00 	mvn.w	ip, #0
    cfd0:	f010 0407 	ands.w	r4, r0, #7
    cfd4:	f891 f020 	pld	[r1, #32]
    cfd8:	f040 8049 	bne.w	d06e <strlen+0xae>
    cfdc:	f04f 0400 	mov.w	r4, #0
    cfe0:	f06f 0007 	mvn.w	r0, #7
    cfe4:	e9d1 2300 	ldrd	r2, r3, [r1]
    cfe8:	f891 f040 	pld	[r1, #64]	; 0x40
    cfec:	f100 0008 	add.w	r0, r0, #8
    cff0:	fa82 f24c 	uadd8	r2, r2, ip
    cff4:	faa4 f28c 	sel	r2, r4, ip
    cff8:	fa83 f34c 	uadd8	r3, r3, ip
    cffc:	faa2 f38c 	sel	r3, r2, ip
    d000:	bb4b      	cbnz	r3, d056 <strlen+0x96>
    d002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d006:	fa82 f24c 	uadd8	r2, r2, ip
    d00a:	f100 0008 	add.w	r0, r0, #8
    d00e:	faa4 f28c 	sel	r2, r4, ip
    d012:	fa83 f34c 	uadd8	r3, r3, ip
    d016:	faa2 f38c 	sel	r3, r2, ip
    d01a:	b9e3      	cbnz	r3, d056 <strlen+0x96>
    d01c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d020:	fa82 f24c 	uadd8	r2, r2, ip
    d024:	f100 0008 	add.w	r0, r0, #8
    d028:	faa4 f28c 	sel	r2, r4, ip
    d02c:	fa83 f34c 	uadd8	r3, r3, ip
    d030:	faa2 f38c 	sel	r3, r2, ip
    d034:	b97b      	cbnz	r3, d056 <strlen+0x96>
    d036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d03a:	f101 0120 	add.w	r1, r1, #32
    d03e:	fa82 f24c 	uadd8	r2, r2, ip
    d042:	f100 0008 	add.w	r0, r0, #8
    d046:	faa4 f28c 	sel	r2, r4, ip
    d04a:	fa83 f34c 	uadd8	r3, r3, ip
    d04e:	faa2 f38c 	sel	r3, r2, ip
    d052:	2b00      	cmp	r3, #0
    d054:	d0c6      	beq.n	cfe4 <strlen+0x24>
    d056:	2a00      	cmp	r2, #0
    d058:	bf04      	itt	eq
    d05a:	3004      	addeq	r0, #4
    d05c:	461a      	moveq	r2, r3
    d05e:	ba12      	rev	r2, r2
    d060:	fab2 f282 	clz	r2, r2
    d064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d06c:	4770      	bx	lr
    d06e:	e9d1 2300 	ldrd	r2, r3, [r1]
    d072:	f004 0503 	and.w	r5, r4, #3
    d076:	f1c4 0000 	rsb	r0, r4, #0
    d07a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d07e:	f014 0f04 	tst.w	r4, #4
    d082:	f891 f040 	pld	[r1, #64]	; 0x40
    d086:	fa0c f505 	lsl.w	r5, ip, r5
    d08a:	ea62 0205 	orn	r2, r2, r5
    d08e:	bf1c      	itt	ne
    d090:	ea63 0305 	ornne	r3, r3, r5
    d094:	4662      	movne	r2, ip
    d096:	f04f 0400 	mov.w	r4, #0
    d09a:	e7a9      	b.n	cff0 <strlen+0x30>

0000d09c <__register_exitproc>:
    d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d0a0:	4d2c      	ldr	r5, [pc, #176]	; (d154 <__register_exitproc+0xb8>)
    d0a2:	4606      	mov	r6, r0
    d0a4:	6828      	ldr	r0, [r5, #0]
    d0a6:	4698      	mov	r8, r3
    d0a8:	460f      	mov	r7, r1
    d0aa:	4691      	mov	r9, r2
    d0ac:	f000 f882 	bl	d1b4 <__retarget_lock_acquire_recursive>
    d0b0:	4b29      	ldr	r3, [pc, #164]	; (d158 <__register_exitproc+0xbc>)
    d0b2:	681c      	ldr	r4, [r3, #0]
    d0b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d03e      	beq.n	d13a <__register_exitproc+0x9e>
    d0bc:	685a      	ldr	r2, [r3, #4]
    d0be:	2a1f      	cmp	r2, #31
    d0c0:	dc1c      	bgt.n	d0fc <__register_exitproc+0x60>
    d0c2:	f102 0e01 	add.w	lr, r2, #1
    d0c6:	b176      	cbz	r6, d0e6 <__register_exitproc+0x4a>
    d0c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    d0cc:	2401      	movs	r4, #1
    d0ce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d0d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    d0d6:	4094      	lsls	r4, r2
    d0d8:	4320      	orrs	r0, r4
    d0da:	2e02      	cmp	r6, #2
    d0dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    d0e0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d0e4:	d023      	beq.n	d12e <__register_exitproc+0x92>
    d0e6:	3202      	adds	r2, #2
    d0e8:	f8c3 e004 	str.w	lr, [r3, #4]
    d0ec:	6828      	ldr	r0, [r5, #0]
    d0ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    d0f2:	f000 f861 	bl	d1b8 <__retarget_lock_release_recursive>
    d0f6:	2000      	movs	r0, #0
    d0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d0fc:	4b17      	ldr	r3, [pc, #92]	; (d15c <__register_exitproc+0xc0>)
    d0fe:	b30b      	cbz	r3, d144 <__register_exitproc+0xa8>
    d100:	f44f 70c8 	mov.w	r0, #400	; 0x190
    d104:	f7fd fe34 	bl	ad70 <malloc>
    d108:	4603      	mov	r3, r0
    d10a:	b1d8      	cbz	r0, d144 <__register_exitproc+0xa8>
    d10c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    d110:	6002      	str	r2, [r0, #0]
    d112:	2100      	movs	r1, #0
    d114:	6041      	str	r1, [r0, #4]
    d116:	460a      	mov	r2, r1
    d118:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    d11c:	f04f 0e01 	mov.w	lr, #1
    d120:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    d124:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    d128:	2e00      	cmp	r6, #0
    d12a:	d0dc      	beq.n	d0e6 <__register_exitproc+0x4a>
    d12c:	e7cc      	b.n	d0c8 <__register_exitproc+0x2c>
    d12e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    d132:	430c      	orrs	r4, r1
    d134:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    d138:	e7d5      	b.n	d0e6 <__register_exitproc+0x4a>
    d13a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    d13e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    d142:	e7bb      	b.n	d0bc <__register_exitproc+0x20>
    d144:	6828      	ldr	r0, [r5, #0]
    d146:	f000 f837 	bl	d1b8 <__retarget_lock_release_recursive>
    d14a:	f04f 30ff 	mov.w	r0, #4294967295
    d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d152:	bf00      	nop
    d154:	20000580 	.word	0x20000580
    d158:	0000ece0 	.word	0x0000ece0
    d15c:	0000ad71 	.word	0x0000ad71

0000d160 <register_fini>:
    d160:	4b02      	ldr	r3, [pc, #8]	; (d16c <register_fini+0xc>)
    d162:	b113      	cbz	r3, d16a <register_fini+0xa>
    d164:	4802      	ldr	r0, [pc, #8]	; (d170 <register_fini+0x10>)
    d166:	f000 b805 	b.w	d174 <atexit>
    d16a:	4770      	bx	lr
    d16c:	00000000 	.word	0x00000000
    d170:	0000d181 	.word	0x0000d181

0000d174 <atexit>:
    d174:	2300      	movs	r3, #0
    d176:	4601      	mov	r1, r0
    d178:	461a      	mov	r2, r3
    d17a:	4618      	mov	r0, r3
    d17c:	f7ff bf8e 	b.w	d09c <__register_exitproc>

0000d180 <__libc_fini_array>:
    d180:	b538      	push	{r3, r4, r5, lr}
    d182:	4c0a      	ldr	r4, [pc, #40]	; (d1ac <__libc_fini_array+0x2c>)
    d184:	4d0a      	ldr	r5, [pc, #40]	; (d1b0 <__libc_fini_array+0x30>)
    d186:	1b64      	subs	r4, r4, r5
    d188:	10a4      	asrs	r4, r4, #2
    d18a:	d00a      	beq.n	d1a2 <__libc_fini_array+0x22>
    d18c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    d190:	3b01      	subs	r3, #1
    d192:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d196:	3c01      	subs	r4, #1
    d198:	f855 3904 	ldr.w	r3, [r5], #-4
    d19c:	4798      	blx	r3
    d19e:	2c00      	cmp	r4, #0
    d1a0:	d1f9      	bne.n	d196 <__libc_fini_array+0x16>
    d1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d1a6:	f001 bdc7 	b.w	ed38 <_fini>
    d1aa:	bf00      	nop
    d1ac:	0000ed48 	.word	0x0000ed48
    d1b0:	0000ed44 	.word	0x0000ed44

0000d1b4 <__retarget_lock_acquire_recursive>:
    d1b4:	4770      	bx	lr
    d1b6:	bf00      	nop

0000d1b8 <__retarget_lock_release_recursive>:
    d1b8:	4770      	bx	lr
    d1ba:	bf00      	nop
    d1bc:	656c6553 	.word	0x656c6553
    d1c0:	64657463 	.word	0x64657463
    d1c4:	6e696c20 	.word	0x6e696c20
    d1c8:	00003a65 	.word	0x00003a65
    d1cc:	00000a0d 	.word	0x00000a0d
    d1d0:	2e2f2e2e 	.word	0x2e2f2e2e
    d1d4:	2e2e2f2e 	.word	0x2e2e2f2e
    d1d8:	554c412f 	.word	0x554c412f
    d1dc:	6972445f 	.word	0x6972445f
    d1e0:	2f726576 	.word	0x2f726576
    d1e4:	5f554c41 	.word	0x5f554c41
    d1e8:	76697244 	.word	0x76697244
    d1ec:	682f7265 	.word	0x682f7265
    d1f0:	692f6c61 	.word	0x692f6c61
    d1f4:	756c636e 	.word	0x756c636e
    d1f8:	682f6564 	.word	0x682f6564
    d1fc:	775f6c61 	.word	0x775f6c61
    d200:	682e7464 	.word	0x682e7464
    d204:	00000000 	.word	0x00000000
    d208:	2a2a2a2a 	.word	0x2a2a2a2a
    d20c:	66694c20 	.word	0x66694c20
    d210:	75502065 	.word	0x75502065
    d214:	2065736c 	.word	0x2065736c
    d218:	69746341 	.word	0x69746341
    d21c:	65746176 	.word	0x65746176
    d220:	2a2a2a64 	.word	0x2a2a2a64
    d224:	0000002a 	.word	0x0000002a

0000d228 <_ZTV10AMMC_Class>:
	...
    d23c:	00007b79 00007a49 00000501 00000529     y{..Iz......)...
    d24c:	00008011                                ....

0000d250 <_ZTT10AMMC_Class>:
    d250:	0000d23c 0000d2a4 0000d27c 0000d27c     <.......|...|...
    d260:	0000d2a4 0000d23c                       ....<...

0000d268 <_ZTC10AMMC_Class0_14Protocol_Class>:
	...
    d27c:	00007b79 00007a49 00000000 00000000     y{..Iz..........
    d28c:	0000ad97                                ....

0000d290 <_ZTC10AMMC_Class0_15ARINC_Interface>:
	...
    d2a4:	00007b79 00007a49 00000000 00000000     y{..Iz..........
    d2b4:	00008011                                ....

0000d2b8 <factoryDefaultsCycles>:
    d2b8:	000001c0 00000005 0000000c 00000024     ............$...
    d2c8:	756e614d 00006c61 00000000 00000000     Manual..........
    d2d8:	00000000 00000001 00000258 0000000f     ........X.......
    d2e8:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
    d300:	00000001 00000258 0000001e 0000012c     ....X.......,...
    d310:	2030332b 73636573 00000000 00000000     +30 secs........
    d320:	00000000 00000001 000000f0 0000001e     ................
    d330:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
    d358:	73657250 32207465 00000000 00000000     Preset 2........
	...
    d37c:	73657250 33207465 00000000 00000000     Preset 3........
	...
    d3a0:	73657250 34207465 00000000 00000000     Preset 4........
	...
    d3c4:	73657250 35207465 00000000 00000000     Preset 5........
	...
    d3e8:	73657250 36207465 00000000 00000000     Preset 6........
	...
    d40c:	73657250 37207465 00000000 00000000     Preset 7........
	...
    d430:	73657250 38207465 00000000 00000000     Preset 8........
	...
    d454:	73657250 39207465 00000000 00000000     Preset 9........
	...

0000d478 <factoryDefaultsConfiguration>:
    d478:	000000ac 00000004 0000070c 00000000     ................
    d488:	00000000 00000001 000003e8 000003e8     ................
    d498:	000003e8 00000000 00000000 00000000     ................
    d4a8:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
    d4b8:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
    d4c8:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
    d4d8:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
    d4e8:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
    d4f8:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
    d508:	41200000 41200000 00000014 00000078     .. A.. A....x...
    d518:	be23d70a 41d00000 00000078              ..#....Ax...

0000d524 <_ZTV17ConfigState_Class>:
	...
    d52c:	0000ad97 65736552 00000074 74696e49     ....Reset...Init
    d53c:	696c6169 0000657a 75736552 0000656d     ialize..Resume..
    d54c:	6e617453 4f796264 00004646 70657250     StandbyOFF..Prep
    d55c:	53657261 646e6174 4e4f7962 00000000     areStandbyON....
    d56c:	6e617453 4f796264 0000004e 6e617453     StandbyON...Stan
    d57c:	52796264 79646165 00000000 616c6544     dbyReady....Dela
    d58c:	00646579 65746e49 70757272 00646574     yed.Interrupted.
    d59c:	00004e4f 706f7453 50646570 65636f72     ON..StoppedProce
    d5ac:	00007373 61656c43 0070756e 696e6946     ss..Cleanup.Fini
    d5bc:	64656873 00000000 7065654b 00746f48     shed....KeepHot.
    d5cc:	666c6553 746f7250 00746365 6f727245     SelfProtect.Erro
    d5dc:	00000072 6e69614d 616e6574 0065636e     r...Maintenance.
    d5ec:	55494d48 74616470 00000065 6d726946     HMIUpdate...Firm
    d5fc:	65726177 61647055 00006574              wareUpdate..

0000d608 <_ZTV14DateTime_Class>:
	...
    d610:	00009e81 00009f71 202a2a2a 72617453     ....q...*** Star
    d620:	20705574 6f676c41 68746972 206e656d     tUp Algorithmen 
    d630:	74736554 2a2a2a20 00000000 202a2a2a     Test ***....*** 
    d640:	65746144 0020203a 206c754a 32203431     Date:  .Jul 14 2
    d650:	00303230 6d695420 00203a65 303a3531     020. Time: .15:0
    d660:	39333a34 00000000 202a2a2a 20554c41     4:39....*** ALU 
    d670:	74696e69 65746169 2a2a2064 0000002a     initiated ***...
    d680:	69746341 6c206576 3a656e69 00000020     Active line: ...

0000d690 <_ZTV12States_Class>:
	...
    d698:	00000e09 646e6168 7453656c 49657461     ....handleStateI
    d6a8:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
    d6b8:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
    d6c8:	49657461 6974696e 7a696c61 00000065     ateInitialize...
    d6d8:	646e6168 7453656c 53657461 646e6174     handleStateStand
    d6e8:	464f7962 00000046 646e6168 7453656c     byOFF...handleSt
    d6f8:	50657461 61706572 74536572 62646e61     atePrepareStandb
    d708:	004e4f79 646e6168 4147656c 76454e49     yON.handleGAINEv
    d718:	20746e65 65636572 64657669 7773203a     ent received: sw
    d728:	68637469 20676e69 6d6f7266 00000020     itching from ...
    d738:	206f7420 00000000 6c662820 20736761      to .... (flags 
    d748:	00203d3d 682f2e2e 692f6c61 756c636e     == .../hal/inclu
    d758:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
    d768:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
    d778:	6e656c61 2e726164 00000063 682f2e2e     alendar.c...../h
    d788:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
    d798:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
    d7a8:	682f6372 635f6c61 735f6372 2e636e79     rc/hal_crc_sync.
    d7b8:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    d7c8:	695f6c61 6d5f6332 7973615f 632e636e     al_i2c_m_async.c
    d7d8:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    d7e8:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
    d7f8:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
    d808:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
    d818:	682f6372 735f6c61 6d5f6970 7973615f     rc/hal_spi_m_asy
    d828:	632e636e 00000000 682f2e2e 732f6c61     nc.c....../hal/s
    d838:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
    d848:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
    d858:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
    d868:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    d878:	6c5f736c 2e747369 00000063              ls_list.c...

0000d884 <_map>:
    d884:	00000006 00000056 00000007 00000057     ....V.......W...
    d894:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    d8a4:	632e6369 00000000                       ic.c....

0000d8ac <user_mux_confs>:
    d8ac:	00000100 00000000 00000000 00000000     ................
	...

0000d8f0 <channel_confs>:
    d8f0:	0000065e 00000000 00000000 00000000     ^...............
	...

0000d930 <interrupt_cfg>:
	...
    d9b0:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
    d9c0:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
    d9d0:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
    d9e0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    d9f0:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    da00:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    da10:	43000800 43000c00                       ...C...C

0000da18 <_i2cms>:
    da18:	00000007 00200014 00000100 00003635     ...... .....56..
    da28:	00d70000 00b71b00                       ........

0000da30 <sercomspi_regs>:
    da30:	0020000c 00020000 00000000 01ff004f     .. .........O...
    da40:	30000c04 02000000 00000000 ff004f00     ...0.........O..
    da50:	00000601 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    da60:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    da70:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    da80:	42001400 42001800 43001400 43001800     ...B...B...C...C
    da90:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    daa0:	0000632e                                .c..

0000daa4 <_usb_ep_cfgs>:
    daa4:	20001fdc 00000000 00000040 20001f9c     ... ....@...... 
    dab4:	20001f5c 00400040 20001f1c 20001edc     \.. @.@.... ... 
    dac4:	00400040 20001e9c 20001e5c 00400040     @.@.... \.. @.@.
    dad4:	20001e1c 20001ddc 00400040 682f2e2e     ... ... @.@.../h
    dae4:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    daf4:	00000000                                ....

0000daf8 <n25q256a_interface>:
    daf8:	00006891 00006b99 00006c59 00006ad1     .h...k..Yl...j..
    db08:	00006a11 752f2e2e 642f6273 63697665     .j..../usb/devic
    db18:	73752f65 2e636462 00000063              e/usbdc.c...

0000db24 <_ZTV17ARINC_Conversions>:
	...
    db2c:	00007b79 00007a49                       y{..Iz..

0000db34 <_ZL5Mesg1>:
    db34:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

0000db44 <_ZL5Mesg2>:
    db44:	61746144 0000203a                       Data: ..

0000db4c <_ZL10HexToAscii>:
    db4c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0000db5c <_ZL11HistoryMesg>:
    db5c:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
    db6c:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
    db7c:	206f7420 74696e69 7a696c69 000d0a65      to initilize...
    db8c:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
    db9c:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
    dbac:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
    dbbc:	67617373 2d2d2165 00002d2d 72540d0a     ssage!----....Tr
    dbcc:	6d736e61 26207469 63655220 65766965     ansmit & Receive
    dbdc:	74695720 614c2068 736c6562 646f4d20      With Labels Mod
    dbec:	000d0a65 45530d0a 542d464c 2c545345     e.....SELF-TEST,
    dbfc:	746e4920 616e7265 6944206c 61746967      Internal Digita
    dc0c:	6f4c206c 622d706f 2c6b6361 206f4e20     l Loop-back, No 
    dc1c:	61746164 20736920 6e617274 74696d73     data is transmit
    dc2c:	20646574 65747865 6c616e72 0d0a796c     ted externally..
    dc3c:	00000000 6f200d0a 6154206e 20656c62     ...... on Table 
    dc4c:	6562616c 6120736c 45206572 6c62616e     labels are Enabl
    dc5c:	00006465 500a0d0a 73736572 2d575320     ed.....Press SW-
    dc6c:	6f742031 61747320 69207472 6974696e     1 to start initi
    dc7c:	796c6c61 000a0d0a 202d2d2d 74747542     ally....--- Butt
    dc8c:	43206e6f 616d6d6f 2073646e 0a2d2d2d     on Commands ---.
    dc9c:	0000000d 70532020 20656361 20726142     ....  Space Bar 
    dcac:	44206f74 6c707369 53207961 75746174     to Display Statu
    dcbc:	6e612073 6f432064 6f72746e 6552206c     s and Control Re
    dccc:	74736967 0a737265 0000000d 20702020     gisters.....  p 
    dcdc:	50206f74 65737561 00000d0a 206d2020     to Pause....  m 
    dcec:	44206f74 6c707369 4c207961 6c656261     to Display Label
    dcfc:	6d654d20 0079726f 003e0d0a 72540d0a      Memory...>...Tr
    dd0c:	6d736e61 69747469 0d0a676e 0000003e     ansmitting..>...
    dd1c:	49480d0a 3935332d 74532033 73757461     ..HI-3593 Status
    dd2c:	6f43202c 6f72746e 6552206c 74736967     , Control Regist
    dd3c:	0d737265 0000000a 20090d0a 2a2a2a20     ers........  ***
    dd4c:	50202a2a 73736572 70732020 62656361     ** Press  spaceb
    dd5c:	74207261 6f63206f 6e69746e 2a206575     ar to continue *
    dd6c:	2a2a2a2a 0000002a 540d0a0a 736e6172     *****......Trans
    dd7c:	2074696d 73756150 0d0a6465 00000000     mit Paused......
    dd8c:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
    dd9c:	2d4e4f54 6f742032 61727420 696d736e     TON-2 to transmi
    ddac:	6e6f2074 72662065 20656d61 20646e61     t one frame and 
    ddbc:	73756170 000d0a65 72500d0a 20737365     pause.....Press 
    ddcc:	44454c4f 5455425f 2d4e4f54 6f742033     OLED_BUTTON-3 to
    dddc:	73655220 0a656d75 0000000d 72540d0a      Resume.......Tr
    ddec:	6d736e61 65747469 65522072 656d7573     ansmitter Resume
    ddfc:	2e2e2e64 00000d0a 65520d0a 76696563     d.........Receiv
    de0c:	31207265 62614c20 0a736c65 0000000d     er 1 Labels.....
    de1c:	65520d0a 76696563 32207265 62614c20     ..Receiver 2 Lab
    de2c:	0a736c65 0000000d 72540d0a 6d736e61     els.......Transm
    de3c:	26207469 63655220 65766965 68634520     it & Receive Ech
    de4c:	6f4d206f 0d0a6564 00000000 6c530d0a     o Mode........Sl
    de5c:	5320776f 64656570 00000000 61460d0a     ow Speed......Fa
    de6c:	53207473 64656570 00000000 72540d0a     st Speed......Tr
    de7c:	6d736e61 65747469 61502072 79746972     ansmitter Parity
    de8c:	616e4520 64656c62 00000000 61540d0a      Enabled......Ta
    de9c:	20656c62 6562616c 6120736c 45206572     ble labels are E
    deac:	6c62616e 00006465 2d0a0d0a 43202d2d     nabled.....--- C
    debc:	6f736e6f 4320656c 616d6d6f 2073646e     onsole Commands 
    decc:	706c6548 2d2d2d20 00000000 20502020     Help ---....  P 
    dedc:	6150203d 79746972 676f5420 20656c67     = Parity Toggle 
    deec:	6f2f6e6f 00006666 20542020 4654203d     on/off..  T = TF
    defc:	2050494c 676f5420 20656c67 6f2f6e6f     LIP  Toggle on/o
    df0c:	00006666 20522020 4652203d 2050494c     ff..  R = RFLIP 
    df1c:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
    df2c:	20532020 4453203d 202c4e4f 2c394453       S = SDON, SD9,
    df3c:	31445320 6f542030 656c6767 2f6e6f20      SD10 Toggle on/
    df4c:	0066666f 20482020 6854203d 48207369     off.  H = This H
    df5c:	20706c65 65676150 00000000 70532020     elp Page....  Sp
    df6c:	20656361 20726142 6944203d 616c7073     ace Bar = Displa
    df7c:	74532079 73757461 646e6120 6e6f4320     y Status and Con
    df8c:	6c6f7274 67657220 00000073 20492020     trol regs...  I 
    df9c:	6e49203d 6d657263 20746e65 7373654d     = Increment Mess
    dfac:	20656761 20646e61 6e617254 74696d73     age and Transmit
    dfbc:	7845202e 726f6c70 4d207265 2065646f     . Explorer Mode 
    dfcc:	4f202d20 21594c4e 00000000 204d2020      - ONLY!....  M 
    dfdc:	6e45203d 20726574 74737543 4d206d6f     = Enter Custom M
    dfec:	61737365 202e6567 6c707845 7265726f     essage. Explorer
    dffc:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
    e00c:	4e452020 3d524554 61725420 696d736e       ENTER= Transmi
    e01c:	656e2074 6d207478 61737365 202e6567     t next message. 
    e02c:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
    e03c:	4c4e4f20 00002159 00207830 30307826      ONLY!..0x .&x00
    e04c:	00002030 50205854 74697261 4e4f2079     0 ..TX Parity ON
    e05c:	003e0d0a 50205854 74697261 464f2079     ..>.TX Parity OF
    e06c:	3e0d0a46 00000000 494c4654 65532050     F..>....TFLIP Se
    e07c:	3e0d0a74 00000000 494c4654 6c432050     t..>....TFLIP Cl
    e08c:	65726165 3e0d0a64 00000000 2d434552     eared..>....REC-
    e09c:	46522031 2050494c 0a746553 00003e0d     1 RFLIP Set..>..
    e0ac:	2d434552 46522031 2050494c 61656c43     REC-1 RFLIP Clea
    e0bc:	0a646572 00003e0d 2d434552 46522032     red..>..REC-2 RF
    e0cc:	2050494c 0a746553 00003e0d 2d434552     LIP Set..>..REC-
    e0dc:	46522032 2050494c 61656c43 0a646572     2 RFLIP Cleared.
    e0ec:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
    e0fc:	61203944 5320646e 20303144 0a746553     D9 and SD10 Set.
    e10c:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
    e11c:	61203944 5320646e 20303144 61656c43     D9 and SD10 Clea
    e12c:	0a646572 00003e0d 2d434552 44532032     red..>..REC-2 SD
    e13c:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
    e14c:	0a746553 00003e0d 2d434552 44532032     Set..>..REC-2 SD
    e15c:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
    e16c:	61656c43 0a646572 00003e0d 500a0d0a     Cleared..>.....P
    e17c:	73736572 61705320 42206563 6f207261     ress Space Bar o
    e18c:	57532072 7420342d 6572206f 656d7573     r SW-4 to resume
    e19c:	00000000 6562614c 2020736c 202d2030     ....Labels  0 - 
    e1ac:	203a3336 00000020 00000020 614c0d0a     63:  ... .....La
    e1bc:	736c6562 34362020 3732312d 0020203a     bels  64-127:  .
    e1cc:	614c0d0a 736c6562 38323120 3139312d     ..Labels 128-191
    e1dc:	0020203a 614c0d0a 736c6562 32393120     :  ...Labels 192
    e1ec:	3535322d 0020203a 614c0d0a 736c6562     -255:  ...Labels
    e1fc:	20302020 3336202d 0020203a 543e0d0a       0 - 63:  ...>T
    e20c:	20202058 74614420 00003a61 6562614c     X    Data:..Labe
    e21c:	00003a6c 0000003e 2d636552 61442031     l:..>...Rec-1 Da
    e22c:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
    e23c:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
    e24c:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
    e25c:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
    e26c:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
    e27c:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
    e28c:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
    e29c:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
    e2ac:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
    e2bc:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
    e2cc:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
    e2dc:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
    e2ec:	70736944 2079616c 74617453 61207375     Display Status a
    e2fc:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
    e30c:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
    e31c:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
    e32c:	6e6f2074 656d2065 67617373 72662065     t one message fr
    e33c:	74206d6f 736e6172 2074696d 66667562     om transmit buff
    e34c:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
    e35c:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
    e36c:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
    e37c:	6f742052 61725420 696d736e 726f2074     R to Transmit or
    e38c:	65737520 65687420 294d2820 6d6f6320      use the (M) com
    e39c:	646e616d 206f7420 65746e65 20612072     mand to enter a 
    e3ac:	74737563 6d206d6f 61737365 00006567     custom message..
    e3bc:	73657250 57532073 726f2034 61707320     Press SW4 or spa
    e3cc:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
    e3dc:	00000065 73657250 70732073 62656361     e...Press spaceb
    e3ec:	74207261 6f63206f 6e69746e 00006575     ar to continue..
    e3fc:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
    e40c:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
    e41c:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
    e42c:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
    e43c:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
    e44c:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
    e45c:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
    e46c:	4c206120 6c656261 74796220 6f662065      a Label byte fo
    e47c:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
    e48c:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
    e49c:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
    e4ac:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
    e4bc:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
    e4cc:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
    e4dc:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
    e4ec:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
    e4fc:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
    e50c:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
    e51c:	49203a49 6572636e 746e656d 74616420     I: Increment dat
    e52c:	3e0d0a61 00000000                       a..>....

0000e534 <_ZTV15ARINC_Interface>:
	...
    e548:	00007b79 00007a49 00007de1 00007e45     y{..Iz...}..E~..
    e558:	00008011                                ....

0000e55c <_ZTT15ARINC_Interface>:
    e55c:	0000e548 0000e580 0000e580 0000e548     H...........H...

0000e56c <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
    e580:	00007b79 00007a49 00000000 00000000     y{..Iz..........
    e590:	0000ad97 636e7546 6e6f6974 65786520     ....Function exe
    e5a0:	65747563 75732064 73656363 6c756673     cuted successful
    e5b0:	0000796c 63656843 6f79206b 77207275     ly..Check your w
    e5c0:	6e697269 46202e67 6873616c 69686320     iring. Flash chi
    e5d0:	73692070 6e6f6e20 7365722d 736e6f70     p is non-respons
    e5e0:	2e657669 00000000 6e6f632a 75727473     ive.....*constru
    e5f0:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
    e600:	69676562 2029286e 20736177 20746f6e     begin() was not 
    e610:	6c6c6163 69206465 6f76206e 73206469     called in void s
    e620:	70757465 00002928 62616e55 7420656c     etup()..Unable t
    e630:	6469206f 69746e65 63207966 2e706968     o identify chip.
    e640:	65724120 756f7920 72757320 68742065      Are you sure th
    e650:	63207369 20706968 73207369 6f707075     is chip is suppo
    e660:	64657472 0000003f 62616e55 7420656c     rted?...Unable t
    e670:	6469206f 69746e65 63207966 63617061     o identify capac
    e680:	2e797469 20734920 73696874 69686320     ity. Is this chi
    e690:	666f2070 69636966 796c6c61 70757320     p officially sup
    e6a0:	74726f70 203f6465 6e206649 202c746f     ported? If not, 
    e6b0:	61656c70 64206573 6e696665 20612065     please define a 
    e6c0:	50414360 54494341 63206059 74736e6f     `CAPACITY` const
    e6d0:	20746e61 20646e61 6c636e69 20656475     ant and include 
    e6e0:	69207469 6c66206e 2e687361 69676562     it in flash.begi
    e6f0:	4143286e 49434150 2e295954 00000000     n(CAPACITY).....
    e700:	70696843 20736920 79737562 0000002e     Chip is busy....
    e710:	656b614d 72757320 6c612065 6970206c     Make sure all pi
    e720:	6820736e 20657661 6e656562 6e6f6320     ns have been con
    e730:	7463656e 70206465 65706f72 00796c72     nected properly.
    e740:	65676150 65766f20 6f6c6672 61682077     Page overflow ha
    e750:	65622073 64206e65 62617369 2064656c     s been disabled 
    e760:	20646e61 20656874 72646461 20737365     and the address 
    e770:	6c6c6163 65206465 65656378 74207364     called exceeds t
    e780:	6d206568 726f6d65 00000079 62616e55     he memory...Unab
    e790:	7420656c 6e45206f 656c6261 69725720     le to Enable Wri
    e7a0:	676e6974 206f7420 70696863 0000002e     ting to chip....
    e7b0:	61656c50 6d206573 20656b61 65727573     Please make sure
    e7c0:	65687420 4c4f4820 20262044 54495257      the HOLD & WRIT
    e7d0:	4f525045 54434554 6e697020 72612073     EPROTECT pins ar
    e7e0:	75702065 64656c6c 20707520 56206f74     e pulled up to V
    e7f0:	00004343 73696854 63657320 20726f74     CC..This sector 
    e800:	65726c61 20796461 746e6f63 736e6961     already contains
    e810:	74616420 00002e61 61656c50 6d206573      data...Please m
    e820:	20656b61 65727573 65687420 63657320     ake sure the sec
    e830:	73726f74 69656220 7720676e 74746972     tors being writt
    e840:	74206e65 7261206f 72652065 64657361     en to are erased
    e850:	0000002e 20756f59 20657261 6e6e7572     ....You are runn
    e860:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
    e870:	656c5020 20657361 6974706f 6573696d      Please optimise
    e880:	756f7920 72702072 6172676f 6f66206d      your program fo
    e890:	65622072 72657474 4d415220 61737520     r better RAM usa
    e8a0:	00006567 73696854 6e756620 6f697463     ge..This functio
    e8b0:	7369206e 746f6e20 70757320 74726f70     n is not support
    e8c0:	62206465 68742079 6c662065 20687361     ed by the flash 
    e8d0:	6f6d656d 68207972 77647261 2e657261     memory hardware.
    e8e0:	00000000 62616e55 7420656c 7573206f     ....Unable to su
    e8f0:	6e657073 65722f64 656d7573 65706f20     spend/resume ope
    e900:	69746172 002e6e6f 74697257 75462065     ration..Write Fu
    e910:	6974636e 68206e6f 66207361 656c6961     nction has faile
    e920:	72652064 63726f72 6b636568 0000002e     d errorcheck....
    e930:	62616e55 7420656c 6e65206f 656c6261     Unable to enable
    e940:	622d3420 20657479 72646461 69737365      4-byte addressi
    e950:	002e676e 62616e55 7420656c 6964206f     ng..Unable to di
    e960:	6c626173 2d342065 65747962 64646120     sable 4-byte add
    e970:	73736572 2e676e69 00000000 20656854     ressing.....The 
    e980:	70696863 20736920 72727563 6c746e65     chip is currentl
    e990:	6f702079 65726577 6f642064 002e6e77     y powered down..
    e9a0:	20656854 73616c46 68632068 64207069     The Flash chip d
    e9b0:	2073656f 20746f6e 70707573 2074726f     oes not support 
    e9c0:	50444653 0000002e 62616e55 7420656c     SFDP....Unable t
    e9d0:	6572206f 45206461 65736172 72615020     o read Erase Par
    e9e0:	74656d61 20737265 6d6f7266 69686320     ameters from chi
    e9f0:	52202e70 72657665 676e6974 206f7420     p. Reverting to 
    ea00:	7262696c 20797261 61666564 73746c75     library defaults
    ea10:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
    ea20:	65206461 65736172 6d697420 66207365     ad erase times f
    ea30:	206d6f72 73616c66 656d2068 79726f6d     rom flash memory
    ea40:	6552202e 74726576 20676e69 6c206f74     . Reverting to l
    ea50:	61726269 64207972 75616665 2e73746c     ibrary defaults.
    ea60:	00000000 62616e55 7420656c 6572206f     ....Unable to re
    ea70:	70206461 72676f72 74206d61 73656d69     ad program times
    ea80:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
    ea90:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
    eaa0:	62696c20 79726172 66656420 746c7561      library default
    eab0:	00002e73 43206f4e 20706968 656c6553     s...No Chip Sele
    eac0:	70207463 64206e69 6e696665 69206465     ct pin defined i
    ead0:	6874206e 75632065 6d6f7473 49505320     n the custom SPI
    eae0:	72724120 002e7961 6e6b6e55 206e776f      Array..Unknown 
    eaf0:	6f727265 00000072 6f727245 6f632072     error...Error co
    eb00:	203a6564 00007830 00000030 74206649     de: 0x..0...If t
    eb10:	20736968 73656f64 746f6e20 6c656820     his does not hel
    eb20:	65722070 766c6f73 6c632f65 66697261     p resolve/clarif
    eb30:	68742079 69207369 65757373 0000202c     y this issue, ..
    eb40:	61656c70 72206573 65736961 206e6120     please raise an 
    eb50:	75737369 74612065 74746820 2f2f3a70     issue at http://
    eb60:	2e777777 2d327368 69676e65 7265656e     www.hs2-engineer
    eb70:	2e676e69 692f6564 7865646e 7068702e     ing.de/index.php
    eb80:	6e6f632f 74636174 6d74682e 6977206c     /contact.html wi
    eb90:	74206874 64206568 69617465 6f20736c     th the details o
    eba0:	68772066 79207461 2072756f 65726577     f what your were
    ebb0:	696f6420 7720676e 206e6568 73696874      doing when this
    ebc0:	72726520 6f20726f 72756363 00646572      error occurred.

0000ebd0 <maxEventCount>:
    ebd0:	01000010                                         ..

0000ebd2 <sizeOfEventQueue>:
    ebd2:	ffff0100                                         ..

0000ebd4 <forever>:
    ebd4:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
    ebe4:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
    ebf4:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
    ec04:	6f697067 7361625f 00682e65              gpio_base.h.

0000ec10 <_ZTV14Calendar_Class>:
	...
    ec18:	00009e81 00009f71                       ....q...

0000ec20 <_ZTV17DateTimeLog_Class>:
	...
    ec28:	0000ad97 0000ad97                       ........

0000ec30 <_ZTV9CDC_Class>:
	...
    ec38:	0000ab19 0000abdd 0000a7c1 0000aae1     ................
    ec48:	0000ac65 0000aaa5 0000aa15 0000aa65     e...........e...
    ec58:	0000ab01 0000ab51                       ....Q...

0000ec60 <_ZTV6Stream>:
	...
    ec68:	0000ad97 0000adfd 0000a7c1 0000a7d5     ................
    ec78:	0000ad97 0000ad97 0000ad97 2e257830     ............0x%.
    ec88:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    ec98:	0066766f                                ovf.

0000ec9c <_ZTV5Print>:
	...
    eca4:	0000ad97 0000adfd 0000a7c1 0000a7d5     ................
    ecb4:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    ecc4:	00632e6f 00776f70 00000000              o.c.pow.....

0000ecd0 <TWO52>:
    ecd0:	00000000 43300000 00000000 c3300000     ......0C......0.

0000ece0 <_global_impure_ptr>:
    ece0:	20000158                                X.. 

0000ece4 <_init>:
    ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ece6:	bf00      	nop
    ece8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ecea:	bc08      	pop	{r3}
    ecec:	469e      	mov	lr, r3
    ecee:	4770      	bx	lr

0000ecf0 <__init_array_start>:
    ecf0:	0000d161 	.word	0x0000d161

0000ecf4 <__frame_dummy_init_array_entry>:
    ecf4:	00000289 000004d9 00000571 000005bd     ........q.......
    ed04:	00000781 000008b1 00000b75 00000cc1     ........u.......
    ed14:	0000165d 000080d5 00008b35 00008f25     ].......5...%...
    ed24:	00009405 00009a5d 0000a1bd 0000a789     ....]...........
    ed34:	0000ad5d                                ]...

0000ed38 <_fini>:
    ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed3a:	bf00      	nop
    ed3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ed3e:	bc08      	pop	{r3}
    ed40:	469e      	mov	lr, r3
    ed42:	4770      	bx	lr

0000ed44 <__fini_array_start>:
    ed44:	00000265 	.word	0x00000265
