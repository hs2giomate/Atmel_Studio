
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c34c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001c34c  0001c34c  0002c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b94  20000000  0001c354  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030b94  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030b94  2**0
                  CONTENTS
  5 .bss          000045fc  20000b98  0001cef0  00030b98  2**3
                  ALLOC
  6 .stack        00010004  20005194  000214ec  00030b98  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030b94  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030bc2  2**0
                  CONTENTS, READONLY
  9 .debug_info   000b46b8  00000000  00000000  00030c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000f3dd  00000000  00000000  000e52d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000224ef  00000000  00000000  000f46b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003da8  00000000  00000000  00116b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000038f0  00000000  00000000  0011a947  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005aea0  00000000  00000000  0011e237  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000538b1  00000000  00000000  001790d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001458d5  00000000  00000000  001cc988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000113f4  00000000  00000000  00312260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 51 01 20 15 0f 00 00 99 0f 00 00 99 0f 00 00     .Q. ............
      10:	99 0f 00 00 99 0f 00 00 99 0f 00 00 00 00 00 00     ................
	...
      2c:	99 0f 00 00 99 0f 00 00 00 00 00 00 99 0f 00 00     ................
      3c:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      4c:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      5c:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      6c:	6d 8d 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     m...............
      7c:	99 0f 00 00 ad 77 00 00 bd 77 00 00 cd 77 00 00     .....w...w...w..
      8c:	dd 77 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     .w..............
      9c:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      ac:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      bc:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      cc:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
      dc:	99 0f 00 00 99 0f 00 00 99 0f 00 00 00 00 00 00     ................
	...
      f4:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     104:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     114:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     124:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     134:	99 0f 00 00 39 a2 00 00 55 a2 00 00 71 a2 00 00     ....9...U...q...
     144:	8d a2 00 00 a9 a2 00 00 c5 a2 00 00 e1 a2 00 00     ................
     154:	fd a2 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     164:	99 0f 00 00 19 a3 00 00 35 a3 00 00 51 a3 00 00     ........5...Q...
     174:	6d a3 00 00 99 0f 00 00 01 6a 00 00 89 de 00 00     m........j......
     184:	99 de 00 00 a9 de 00 00 b9 de 00 00 99 0f 00 00     ................
     194:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     1a4:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     1b4:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     1c4:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     1d4:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     1e4:	99 0f 00 00 99 0f 00 00 b9 b5 00 00 d5 b5 00 00     ................
     1f4:	f1 b5 00 00 0d b6 00 00 99 0f 00 00 99 0f 00 00     ................
     204:	99 0f 00 00 29 b6 00 00 99 0f 00 00 99 0f 00 00     ....)...........
     214:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     224:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     234:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     244:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................
     254:	99 0f 00 00 99 0f 00 00 99 0f 00 00 99 0f 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000b98 	.word	0x20000b98
     280:	00000000 	.word	0x00000000
     284:	0001c354 	.word	0x0001c354

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001c354 	.word	0x0001c354
     2c4:	20000b9c 	.word	0x20000b9c
     2c8:	0001c354 	.word	0x0001c354
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZN9ALU_ClassC1Ev>:
#include "CDC_Class.h"
#include "DateTime_Class.h"


// default constructor
ALU_Class::ALU_Class()
     2ec:	b480      	push	{r7}
     2ee:	b083      	sub	sp, #12
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
{
	ptrPbit=&pBIT;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	4a04      	ldr	r2, [pc, #16]	; (308 <_ZN9ALU_ClassC1Ev+0x1c>)
     2f8:	611a      	str	r2, [r3, #16]
} //ALU_Class
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	4618      	mov	r0, r3
     2fe:	370c      	adds	r7, #12
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20002d30 	.word	0x20002d30

0000030c <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
{
} //~ALU_Class
     314:	687b      	ldr	r3, [r7, #4]
     316:	4618      	mov	r0, r3
     318:	370c      	adds	r7, #12
     31a:	46bd      	mov	sp, r7
     31c:	bc80      	pop	{r7}
     31e:	4770      	bx	lr

00000320 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     320:	b580      	push	{r7, lr}
     322:	b086      	sub	sp, #24
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	StartLivePulse();
     328:	6878      	ldr	r0, [r7, #4]
     32a:	4b28      	ldr	r3, [pc, #160]	; (3cc <_ZN9ALU_Class4InitEv+0xac>)
     32c:	4798      	blx	r3
	hvac.Init();
     32e:	4828      	ldr	r0, [pc, #160]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     330:	4b28      	ldr	r3, [pc, #160]	; (3d4 <_ZN9ALU_Class4InitEv+0xb4>)
     332:	4798      	blx	r3
	hvac.SetCRCConfigData();
     334:	4826      	ldr	r0, [pc, #152]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     336:	4b28      	ldr	r3, [pc, #160]	; (3d8 <_ZN9ALU_Class4InitEv+0xb8>)
     338:	4798      	blx	r3
	SetInitialConfiguration(configuration);
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	3318      	adds	r3, #24
     33e:	4619      	mov	r1, r3
     340:	6878      	ldr	r0, [r7, #4]
     342:	4b26      	ldr	r3, [pc, #152]	; (3dc <_ZN9ALU_Class4InitEv+0xbc>)
     344:	4798      	blx	r3
	memory.WriteDefaultState();
     346:	4826      	ldr	r0, [pc, #152]	; (3e0 <_ZN9ALU_Class4InitEv+0xc0>)
     348:	4b26      	ldr	r3, [pc, #152]	; (3e4 <_ZN9ALU_Class4InitEv+0xc4>)
     34a:	4798      	blx	r3
	hvac.SetInitialState();
     34c:	4820      	ldr	r0, [pc, #128]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     34e:	4b26      	ldr	r3, [pc, #152]	; (3e8 <_ZN9ALU_Class4InitEv+0xc8>)
     350:	4798      	blx	r3
	uhr.Init();
     352:	4826      	ldr	r0, [pc, #152]	; (3ec <_ZN9ALU_Class4InitEv+0xcc>)
     354:	4b26      	ldr	r3, [pc, #152]	; (3f0 <_ZN9ALU_Class4InitEv+0xd0>)
     356:	4798      	blx	r3
	hvac.saveCurrentState();
     358:	481d      	ldr	r0, [pc, #116]	; (3d0 <_ZN9ALU_Class4InitEv+0xb0>)
     35a:	4b26      	ldr	r3, [pc, #152]	; (3f4 <_ZN9ALU_Class4InitEv+0xd4>)
     35c:	4798      	blx	r3
	s=arincInterface.Init();
     35e:	4826      	ldr	r0, [pc, #152]	; (3f8 <_ZN9ALU_Class4InitEv+0xd8>)
     360:	4b26      	ldr	r3, [pc, #152]	; (3fc <_ZN9ALU_Class4InitEv+0xdc>)
     362:	4798      	blx	r3
     364:	4603      	mov	r3, r0
     366:	617b      	str	r3, [r7, #20]
	if (s!=0x01)
     368:	697b      	ldr	r3, [r7, #20]
     36a:	2b01      	cmp	r3, #1
     36c:	d00e      	beq.n	38c <_ZN9ALU_Class4InitEv+0x6c>
	{	
		NotifyError(kARINCINnterfaceError,s);
     36e:	f107 030c 	add.w	r3, r7, #12
     372:	6979      	ldr	r1, [r7, #20]
     374:	4618      	mov	r0, r3
     376:	4b22      	ldr	r3, [pc, #136]	; (400 <_ZN9ALU_Class4InitEv+0xe0>)
     378:	4798      	blx	r3
     37a:	f107 030c 	add.w	r3, r7, #12
     37e:	461a      	mov	r2, r3
     380:	2100      	movs	r1, #0
     382:	6878      	ldr	r0, [r7, #4]
     384:	4b1f      	ldr	r3, [pc, #124]	; (404 <_ZN9ALU_Class4InitEv+0xe4>)
     386:	4798      	blx	r3
		return s;
     388:	697b      	ldr	r3, [r7, #20]
     38a:	e01a      	b.n	3c2 <_ZN9ALU_Class4InitEv+0xa2>
	} 
	else
	{
		s=pBIT.CheckCurrentStatus(status);
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     392:	4619      	mov	r1, r3
     394:	481c      	ldr	r0, [pc, #112]	; (408 <_ZN9ALU_Class4InitEv+0xe8>)
     396:	4b1d      	ldr	r3, [pc, #116]	; (40c <_ZN9ALU_Class4InitEv+0xec>)
     398:	4798      	blx	r3
     39a:	6178      	str	r0, [r7, #20]
		if (s>0)
     39c:	697b      	ldr	r3, [r7, #20]
     39e:	2b00      	cmp	r3, #0
     3a0:	d00e      	beq.n	3c0 <_ZN9ALU_Class4InitEv+0xa0>
		{
			NotifyError(kpBITError,s);
     3a2:	f107 0310 	add.w	r3, r7, #16
     3a6:	6979      	ldr	r1, [r7, #20]
     3a8:	4618      	mov	r0, r3
     3aa:	4b15      	ldr	r3, [pc, #84]	; (400 <_ZN9ALU_Class4InitEv+0xe0>)
     3ac:	4798      	blx	r3
     3ae:	f107 0310 	add.w	r3, r7, #16
     3b2:	461a      	mov	r2, r3
     3b4:	2101      	movs	r1, #1
     3b6:	6878      	ldr	r0, [r7, #4]
     3b8:	4b12      	ldr	r3, [pc, #72]	; (404 <_ZN9ALU_Class4InitEv+0xe4>)
     3ba:	4798      	blx	r3
			return s;
     3bc:	697b      	ldr	r3, [r7, #20]
     3be:	e000      	b.n	3c2 <_ZN9ALU_Class4InitEv+0xa2>
		{
			
		}
	}
	  
	return s;
     3c0:	697b      	ldr	r3, [r7, #20]
}
     3c2:	4618      	mov	r0, r3
     3c4:	3718      	adds	r7, #24
     3c6:	46bd      	mov	sp, r7
     3c8:	bd80      	pop	{r7, pc}
     3ca:	bf00      	nop
     3cc:	00000475 	.word	0x00000475
     3d0:	20002d44 	.word	0x20002d44
     3d4:	00002111 	.word	0x00002111
     3d8:	00002c35 	.word	0x00002c35
     3dc:	000004c1 	.word	0x000004c1
     3e0:	200018e0 	.word	0x200018e0
     3e4:	00001aad 	.word	0x00001aad
     3e8:	00000979 	.word	0x00000979
     3ec:	200010f8 	.word	0x200010f8
     3f0:	00000e6d 	.word	0x00000e6d
     3f4:	00002b15 	.word	0x00002b15
     3f8:	20003858 	.word	0x20003858
     3fc:	00010905 	.word	0x00010905
     400:	000002d1 	.word	0x000002d1
     404:	000005e9 	.word	0x000005e9
     408:	20002d30 	.word	0x20002d30
     40c:	00001c4d 	.word	0x00001c4d

00000410 <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
	activeLine=arincInterface.GetActiveLine();
     418:	4811      	ldr	r0, [pc, #68]	; (460 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     41a:	4b12      	ldr	r3, [pc, #72]	; (464 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     41c:	4798      	blx	r3
     41e:	4603      	mov	r3, r0
     420:	461a      	mov	r2, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
		switch (activeLine)
     428:	687b      	ldr	r3, [r7, #4]
     42a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
     42e:	2b01      	cmp	r3, #1
     430:	d002      	beq.n	438 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     432:	2b02      	cmp	r3, #2
     434:	d004      	beq.n	440 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     436:	e007      	b.n	448 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     438:	4b0b      	ldr	r3, [pc, #44]	; (468 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     43a:	4a0c      	ldr	r2, [pc, #48]	; (46c <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     43c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     43e:	e007      	b.n	450 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     440:	4b09      	ldr	r3, [pc, #36]	; (468 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     442:	4a0b      	ldr	r2, [pc, #44]	; (470 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     444:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     446:	e003      	b.n	450 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     44a:	4a08      	ldr	r2, [pc, #32]	; (46c <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     44c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     44e:	bf00      	nop
		}
	return activeLine;	
     450:	687b      	ldr	r3, [r7, #4]
     452:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
}
     456:	4618      	mov	r0, r3
     458:	3708      	adds	r7, #8
     45a:	46bd      	mov	sp, r7
     45c:	bd80      	pop	{r7, pc}
     45e:	bf00      	nop
     460:	20003858 	.word	0x20003858
     464:	000112bb 	.word	0x000112bb
     468:	200010f0 	.word	0x200010f0
     46c:	20000d00 	.word	0x20000d00
     470:	20000ef8 	.word	0x20000ef8

00000474 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     474:	b580      	push	{r7, lr}
     476:	b084      	sub	sp, #16
     478:	af00      	add	r7, sp, #0
     47a:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     47c:	4909      	ldr	r1, [pc, #36]	; (4a4 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     47e:	480a      	ldr	r0, [pc, #40]	; (4a8 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     480:	4b0a      	ldr	r3, [pc, #40]	; (4ac <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     482:	4798      	blx	r3
     484:	4603      	mov	r3, r0
     486:	490a      	ldr	r1, [pc, #40]	; (4b0 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     488:	4618      	mov	r0, r3
     48a:	4b0a      	ldr	r3, [pc, #40]	; (4b4 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     48c:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     48e:	480a      	ldr	r0, [pc, #40]	; (4b8 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     490:	4b0a      	ldr	r3, [pc, #40]	; (4bc <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     492:	4798      	blx	r3
     494:	4603      	mov	r3, r0
     496:	60fb      	str	r3, [r7, #12]
	return p;
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	b2db      	uxtb	r3, r3
}
     49c:	4618      	mov	r0, r3
     49e:	3710      	adds	r7, #16
     4a0:	46bd      	mov	sp, r7
     4a2:	bd80      	pop	{r7, pc}
     4a4:	0001a3dc 	.word	0x0001a3dc
     4a8:	20004e74 	.word	0x20004e74
     4ac:	0000065d 	.word	0x0000065d
     4b0:	0001a3d8 	.word	0x0001a3d8
     4b4:	0000063d 	.word	0x0000063d
     4b8:	20005004 	.word	0x20005004
     4bc:	00004cb5 	.word	0x00004cb5

000004c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     4c0:	b580      	push	{r7, lr}
     4c2:	b088      	sub	sp, #32
     4c4:	af00      	add	r7, sp, #0
     4c6:	6078      	str	r0, [r7, #4]
     4c8:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     4ca:	2300      	movs	r3, #0
     4cc:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     4ce:	6839      	ldr	r1, [r7, #0]
     4d0:	4835      	ldr	r0, [pc, #212]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     4d2:	4b36      	ldr	r3, [pc, #216]	; (5ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xec>)
     4d4:	4798      	blx	r3
     4d6:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     4d8:	4835      	ldr	r0, [pc, #212]	; (5b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     4da:	4b36      	ldr	r3, [pc, #216]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf4>)
     4dc:	4798      	blx	r3
     4de:	4603      	mov	r3, r0
     4e0:	2b00      	cmp	r3, #0
     4e2:	d007      	beq.n	4f4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	3318      	adds	r3, #24
     4e8:	4619      	mov	r1, r3
     4ea:	482f      	ldr	r0, [pc, #188]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     4ec:	4b32      	ldr	r3, [pc, #200]	; (5b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf8>)
     4ee:	4798      	blx	r3
     4f0:	61f8      	str	r0, [r7, #28]
     4f2:	e04d      	b.n	590 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     4f4:	22ac      	movs	r2, #172	; 0xac
     4f6:	6839      	ldr	r1, [r7, #0]
     4f8:	482d      	ldr	r0, [pc, #180]	; (5b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     4fa:	4b30      	ldr	r3, [pc, #192]	; (5bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     4fc:	4798      	blx	r3
     4fe:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     500:	4829      	ldr	r0, [pc, #164]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     502:	4b2f      	ldr	r3, [pc, #188]	; (5c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     504:	4798      	blx	r3
     506:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     508:	697a      	ldr	r2, [r7, #20]
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	429a      	cmp	r2, r3
     50e:	d108      	bne.n	522 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     510:	687b      	ldr	r3, [r7, #4]
     512:	683a      	ldr	r2, [r7, #0]
     514:	3318      	adds	r3, #24
     516:	4611      	mov	r1, r2
     518:	22ac      	movs	r2, #172	; 0xac
     51a:	4618      	mov	r0, r3
     51c:	4b29      	ldr	r3, [pc, #164]	; (5c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     51e:	4798      	blx	r3
     520:	e036      	b.n	590 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     522:	687b      	ldr	r3, [r7, #4]
     524:	3318      	adds	r3, #24
     526:	4619      	mov	r1, r3
     528:	481f      	ldr	r0, [pc, #124]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     52a:	4b27      	ldr	r3, [pc, #156]	; (5c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     52c:	4798      	blx	r3
     52e:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     530:	687b      	ldr	r3, [r7, #4]
     532:	3318      	adds	r3, #24
     534:	22ac      	movs	r2, #172	; 0xac
     536:	4619      	mov	r1, r3
     538:	481d      	ldr	r0, [pc, #116]	; (5b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     53a:	4b20      	ldr	r3, [pc, #128]	; (5bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     53c:	4798      	blx	r3
     53e:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     540:	4b22      	ldr	r3, [pc, #136]	; (5cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     542:	f8d3 2568 	ldr.w	r2, [r3, #1384]	; 0x568
     546:	697b      	ldr	r3, [r7, #20]
     548:	429a      	cmp	r2, r3
     54a:	d105      	bne.n	558 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     54c:	6979      	ldr	r1, [r7, #20]
     54e:	4816      	ldr	r0, [pc, #88]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     550:	4b1f      	ldr	r3, [pc, #124]	; (5d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     552:	4798      	blx	r3
     554:	61b8      	str	r0, [r7, #24]
     556:	e01b      	b.n	590 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     558:	687b      	ldr	r3, [r7, #4]
     55a:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     55c:	3318      	adds	r3, #24
     55e:	4611      	mov	r1, r2
     560:	22ac      	movs	r2, #172	; 0xac
     562:	4618      	mov	r0, r3
     564:	4b17      	ldr	r3, [pc, #92]	; (5c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     566:	4798      	blx	r3
				e=flash.Erase(0);
     568:	2100      	movs	r1, #0
     56a:	481b      	ldr	r0, [pc, #108]	; (5d8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     56c:	4b1b      	ldr	r3, [pc, #108]	; (5dc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     56e:	4798      	blx	r3
     570:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration(configuration);
     572:	687b      	ldr	r3, [r7, #4]
     574:	3318      	adds	r3, #24
     576:	4619      	mov	r1, r3
     578:	480b      	ldr	r0, [pc, #44]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     57a:	4b19      	ldr	r3, [pc, #100]	; (5e0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     57c:	4798      	blx	r3
     57e:	61b8      	str	r0, [r7, #24]
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     580:	4b12      	ldr	r3, [pc, #72]	; (5cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     582:	f8d3 3568 	ldr.w	r3, [r3, #1384]	; 0x568
     586:	4619      	mov	r1, r3
     588:	4807      	ldr	r0, [pc, #28]	; (5a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     58a:	4b11      	ldr	r3, [pc, #68]	; (5d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     58c:	4798      	blx	r3
     58e:	61b8      	str	r0, [r7, #24]
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     590:	687b      	ldr	r3, [r7, #4]
     592:	3318      	adds	r3, #24
     594:	4619      	mov	r1, r3
     596:	480d      	ldr	r0, [pc, #52]	; (5cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     598:	4b12      	ldr	r3, [pc, #72]	; (5e4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     59a:	4798      	blx	r3
	return r;
     59c:	69fb      	ldr	r3, [r7, #28]
};
     59e:	4618      	mov	r0, r3
     5a0:	3720      	adds	r7, #32
     5a2:	46bd      	mov	sp, r7
     5a4:	bd80      	pop	{r7, pc}
     5a6:	bf00      	nop
     5a8:	200018e0 	.word	0x200018e0
     5ac:	0000193d 	.word	0x0000193d
     5b0:	20001724 	.word	0x20001724
     5b4:	00001e81 	.word	0x00001e81
     5b8:	0000196d 	.word	0x0000196d
     5bc:	00000ce1 	.word	0x00000ce1
     5c0:	000019d5 	.word	0x000019d5
     5c4:	00016735 	.word	0x00016735
     5c8:	0000190d 	.word	0x0000190d
     5cc:	20002d44 	.word	0x20002d44
     5d0:	00001b11 	.word	0x00001b11
     5d4:	0001a48c 	.word	0x0001a48c
     5d8:	20004b08 	.word	0x20004b08
     5dc:	00012631 	.word	0x00012631
     5e0:	00001a7d 	.word	0x00001a7d
     5e4:	00002be5 	.word	0x00002be5

000005e8 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	b084      	sub	sp, #16
     5ec:	af00      	add	r7, sp, #0
     5ee:	60f8      	str	r0, [r7, #12]
     5f0:	460b      	mov	r3, r1
     5f2:	607a      	str	r2, [r7, #4]
     5f4:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     5f6:	7afb      	ldrb	r3, [r7, #11]
     5f8:	b29b      	uxth	r3, r3
     5fa:	687a      	ldr	r2, [r7, #4]
     5fc:	4619      	mov	r1, r3
     5fe:	4803      	ldr	r0, [pc, #12]	; (60c <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     600:	4b03      	ldr	r3, [pc, #12]	; (610 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     602:	4798      	blx	r3
}
     604:	bf00      	nop
     606:	3710      	adds	r7, #16
     608:	46bd      	mov	sp, r7
     60a:	bd80      	pop	{r7, pc}
     60c:	20004a90 	.word	0x20004a90
     610:	0001191d 	.word	0x0001191d

00000614 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     614:	b580      	push	{r7, lr}
     616:	b082      	sub	sp, #8
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
     61c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     61e:	683b      	ldr	r3, [r7, #0]
     620:	781b      	ldrb	r3, [r3, #0]
     622:	220a      	movs	r2, #10
     624:	4619      	mov	r1, r3
     626:	6878      	ldr	r0, [r7, #4]
     628:	4b03      	ldr	r3, [pc, #12]	; (638 <_ZlsIhER5PrintS1_RKT_+0x24>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4618      	mov	r0, r3
     630:	3708      	adds	r7, #8
     632:	46bd      	mov	sp, r7
     634:	bd80      	pop	{r7, pc}
     636:	bf00      	nop
     638:	00013c19 	.word	0x00013c19

0000063c <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     63c:	b580      	push	{r7, lr}
     63e:	b082      	sub	sp, #8
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
     644:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     646:	6839      	ldr	r1, [r7, #0]
     648:	6878      	ldr	r0, [r7, #4]
     64a:	4b03      	ldr	r3, [pc, #12]	; (658 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     64c:	4798      	blx	r3
     64e:	687b      	ldr	r3, [r7, #4]
     650:	4618      	mov	r0, r3
     652:	3708      	adds	r7, #8
     654:	46bd      	mov	sp, r7
     656:	bd80      	pop	{r7, pc}
     658:	00013bd5 	.word	0x00013bd5

0000065c <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     65c:	b580      	push	{r7, lr}
     65e:	b082      	sub	sp, #8
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
     664:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     666:	6839      	ldr	r1, [r7, #0]
     668:	6878      	ldr	r0, [r7, #4]
     66a:	4b03      	ldr	r3, [pc, #12]	; (678 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     66c:	4798      	blx	r3
     66e:	687b      	ldr	r3, [r7, #4]
     670:	4618      	mov	r0, r3
     672:	3708      	adds	r7, #8
     674:	46bd      	mov	sp, r7
     676:	bd80      	pop	{r7, pc}
     678:	00013bd5 	.word	0x00013bd5

0000067c <_Z41__static_initialization_and_destruction_0ii>:
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	6078      	str	r0, [r7, #4]
     684:	6039      	str	r1, [r7, #0]
     686:	687b      	ldr	r3, [r7, #4]
     688:	2b01      	cmp	r3, #1
     68a:	d10c      	bne.n	6a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     68c:	683b      	ldr	r3, [r7, #0]
     68e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     692:	4293      	cmp	r3, r2
     694:	d107      	bne.n	6a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     696:	4806      	ldr	r0, [pc, #24]	; (6b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     698:	4b06      	ldr	r3, [pc, #24]	; (6b4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     69a:	4798      	blx	r3
     69c:	4a06      	ldr	r2, [pc, #24]	; (6b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     69e:	4907      	ldr	r1, [pc, #28]	; (6bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
     6a0:	4803      	ldr	r0, [pc, #12]	; (6b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     6a2:	4b07      	ldr	r3, [pc, #28]	; (6c0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     6a4:	4798      	blx	r3
     6a6:	bf00      	nop
     6a8:	3708      	adds	r7, #8
     6aa:	46bd      	mov	sp, r7
     6ac:	bd80      	pop	{r7, pc}
     6ae:	bf00      	nop
     6b0:	20000bb4 	.word	0x20000bb4
     6b4:	000002ed 	.word	0x000002ed
     6b8:	20000000 	.word	0x20000000
     6bc:	0000030d 	.word	0x0000030d
     6c0:	00014579 	.word	0x00014579

000006c4 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev>:
     6c4:	b580      	push	{r7, lr}
     6c6:	af00      	add	r7, sp, #0
     6c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     6cc:	2001      	movs	r0, #1
     6ce:	4b01      	ldr	r3, [pc, #4]	; (6d4 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x10>)
     6d0:	4798      	blx	r3
     6d2:	bd80      	pop	{r7, pc}
     6d4:	0000067d 	.word	0x0000067d

000006d8 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     6d8:	b580      	push	{r7, lr}
     6da:	b082      	sub	sp, #8
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	4618      	mov	r0, r3
     6e4:	4b09      	ldr	r3, [pc, #36]	; (70c <_ZN10AMMC_ClassC1Ev+0x34>)
     6e6:	4798      	blx	r3
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4a09      	ldr	r2, [pc, #36]	; (710 <_ZN10AMMC_ClassC1Ev+0x38>)
     6ec:	4611      	mov	r1, r2
     6ee:	4618      	mov	r0, r3
     6f0:	4b08      	ldr	r3, [pc, #32]	; (714 <_ZN10AMMC_ClassC1Ev+0x3c>)
     6f2:	4798      	blx	r3
     6f4:	4a08      	ldr	r2, [pc, #32]	; (718 <_ZN10AMMC_ClassC1Ev+0x40>)
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	601a      	str	r2, [r3, #0]
     6fa:	4a07      	ldr	r2, [pc, #28]	; (718 <_ZN10AMMC_ClassC1Ev+0x40>)
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     700:	687b      	ldr	r3, [r7, #4]
     702:	4618      	mov	r0, r3
     704:	3708      	adds	r7, #8
     706:	46bd      	mov	sp, r7
     708:	bd80      	pop	{r7, pc}
     70a:	bf00      	nop
     70c:	00010461 	.word	0x00010461
     710:	0001a428 	.word	0x0001a428
     714:	00010739 	.word	0x00010739
     718:	0001a410 	.word	0x0001a410

0000071c <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     71c:	b580      	push	{r7, lr}
     71e:	b082      	sub	sp, #8
     720:	af00      	add	r7, sp, #0
     722:	6078      	str	r0, [r7, #4]
     724:	4a0a      	ldr	r2, [pc, #40]	; (750 <_ZN10AMMC_ClassD1Ev+0x34>)
     726:	687b      	ldr	r3, [r7, #4]
     728:	601a      	str	r2, [r3, #0]
     72a:	4a09      	ldr	r2, [pc, #36]	; (750 <_ZN10AMMC_ClassD1Ev+0x34>)
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	601a      	str	r2, [r3, #0]
     730:	687b      	ldr	r3, [r7, #4]
     732:	4a08      	ldr	r2, [pc, #32]	; (754 <_ZN10AMMC_ClassD1Ev+0x38>)
     734:	4611      	mov	r1, r2
     736:	4618      	mov	r0, r3
     738:	4b07      	ldr	r3, [pc, #28]	; (758 <_ZN10AMMC_ClassD1Ev+0x3c>)
     73a:	4798      	blx	r3
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	4618      	mov	r0, r3
     740:	4b06      	ldr	r3, [pc, #24]	; (75c <_ZN10AMMC_ClassD1Ev+0x40>)
     742:	4798      	blx	r3
{
} //~AMMC_Class
     744:	687b      	ldr	r3, [r7, #4]
     746:	4618      	mov	r0, r3
     748:	3708      	adds	r7, #8
     74a:	46bd      	mov	sp, r7
     74c:	bd80      	pop	{r7, pc}
     74e:	bf00      	nop
     750:	0001a410 	.word	0x0001a410
     754:	0001a428 	.word	0x0001a428
     758:	00010811 	.word	0x00010811
     75c:	00010481 	.word	0x00010481

00000760 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     760:	b580      	push	{r7, lr}
     762:	b082      	sub	sp, #8
     764:	af00      	add	r7, sp, #0
     766:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     768:	6878      	ldr	r0, [r7, #4]
     76a:	4b06      	ldr	r3, [pc, #24]	; (784 <_ZN10AMMC_ClassD0Ev+0x24>)
     76c:	4798      	blx	r3
     76e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
     772:	6878      	ldr	r0, [r7, #4]
     774:	4b04      	ldr	r3, [pc, #16]	; (788 <_ZN10AMMC_ClassD0Ev+0x28>)
     776:	4798      	blx	r3
     778:	687b      	ldr	r3, [r7, #4]
     77a:	4618      	mov	r0, r3
     77c:	3708      	adds	r7, #8
     77e:	46bd      	mov	sp, r7
     780:	bd80      	pop	{r7, pc}
     782:	bf00      	nop
     784:	0000071d 	.word	0x0000071d
     788:	00014585 	.word	0x00014585

0000078c <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	6039      	str	r1, [r7, #0]
     796:	687b      	ldr	r3, [r7, #4]
     798:	2b01      	cmp	r3, #1
     79a:	d114      	bne.n	7c6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     79c:	683b      	ldr	r3, [r7, #0]
     79e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     7a2:	4293      	cmp	r3, r2
     7a4:	d10f      	bne.n	7c6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     7a6:	480a      	ldr	r0, [pc, #40]	; (7d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     7a8:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     7aa:	4798      	blx	r3
     7ac:	4a0a      	ldr	r2, [pc, #40]	; (7d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     7ae:	490b      	ldr	r1, [pc, #44]	; (7dc <_Z41__static_initialization_and_destruction_0ii+0x50>)
     7b0:	4807      	ldr	r0, [pc, #28]	; (7d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     7b2:	4b0b      	ldr	r3, [pc, #44]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     7b4:	4798      	blx	r3
AMMC_Class	ammc2;
     7b6:	480b      	ldr	r0, [pc, #44]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     7b8:	4b06      	ldr	r3, [pc, #24]	; (7d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     7ba:	4798      	blx	r3
     7bc:	4a06      	ldr	r2, [pc, #24]	; (7d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     7be:	4907      	ldr	r1, [pc, #28]	; (7dc <_Z41__static_initialization_and_destruction_0ii+0x50>)
     7c0:	4808      	ldr	r0, [pc, #32]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     7c2:	4b07      	ldr	r3, [pc, #28]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     7c4:	4798      	blx	r3
     7c6:	bf00      	nop
     7c8:	3708      	adds	r7, #8
     7ca:	46bd      	mov	sp, r7
     7cc:	bd80      	pop	{r7, pc}
     7ce:	bf00      	nop
     7d0:	20000d00 	.word	0x20000d00
     7d4:	000006d9 	.word	0x000006d9
     7d8:	20000000 	.word	0x20000000
     7dc:	0000071d 	.word	0x0000071d
     7e0:	00014579 	.word	0x00014579
     7e4:	20000ef8 	.word	0x20000ef8

000007e8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     7e8:	b580      	push	{r7, lr}
     7ea:	af00      	add	r7, sp, #0
     7ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
     7f0:	2001      	movs	r0, #1
     7f2:	4b01      	ldr	r3, [pc, #4]	; (7f8 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     7f4:	4798      	blx	r3
     7f6:	bd80      	pop	{r7, pc}
     7f8:	0000078d 	.word	0x0000078d

000007fc <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     7fc:	b480      	push	{r7}
     7fe:	b083      	sub	sp, #12
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
{
} //CBIT_Class
     804:	687b      	ldr	r3, [r7, #4]
     806:	4618      	mov	r0, r3
     808:	370c      	adds	r7, #12
     80a:	46bd      	mov	sp, r7
     80c:	bc80      	pop	{r7}
     80e:	4770      	bx	lr

00000810 <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     810:	b480      	push	{r7}
     812:	b083      	sub	sp, #12
     814:	af00      	add	r7, sp, #0
     816:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     818:	687b      	ldr	r3, [r7, #4]
     81a:	4618      	mov	r0, r3
     81c:	370c      	adds	r7, #12
     81e:	46bd      	mov	sp, r7
     820:	bc80      	pop	{r7}
     822:	4770      	bx	lr

00000824 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     824:	b480      	push	{r7}
     826:	b083      	sub	sp, #12
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
	return	isOK;
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	781b      	ldrb	r3, [r3, #0]
     830:	b2db      	uxtb	r3, r3
}
     832:	4618      	mov	r0, r3
     834:	370c      	adds	r7, #12
     836:	46bd      	mov	sp, r7
     838:	bc80      	pop	{r7}
     83a:	4770      	bx	lr

0000083c <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}

     83c:	b580      	push	{r7, lr}
     83e:	b082      	sub	sp, #8
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
     846:	687b      	ldr	r3, [r7, #4]
     848:	2b01      	cmp	r3, #1
     84a:	d10c      	bne.n	866 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     84c:	683b      	ldr	r3, [r7, #0]
     84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     852:	4293      	cmp	r3, r2
     854:	d107      	bne.n	866 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     856:	4806      	ldr	r0, [pc, #24]	; (870 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     858:	4b06      	ldr	r3, [pc, #24]	; (874 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     85a:	4798      	blx	r3
     85c:	4a06      	ldr	r2, [pc, #24]	; (878 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     85e:	4907      	ldr	r1, [pc, #28]	; (87c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     860:	4803      	ldr	r0, [pc, #12]	; (870 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     862:	4b07      	ldr	r3, [pc, #28]	; (880 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     864:	4798      	blx	r3
     866:	bf00      	nop
     868:	3708      	adds	r7, #8
     86a:	46bd      	mov	sp, r7
     86c:	bd80      	pop	{r7, pc}
     86e:	bf00      	nop
     870:	200010f4 	.word	0x200010f4
     874:	000007fd 	.word	0x000007fd
     878:	20000000 	.word	0x20000000
     87c:	00000811 	.word	0x00000811
     880:	00014579 	.word	0x00014579

00000884 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     884:	b580      	push	{r7, lr}
     886:	af00      	add	r7, sp, #0
     888:	f64f 71ff 	movw	r1, #65535	; 0xffff
     88c:	2001      	movs	r0, #1
     88e:	4b01      	ldr	r3, [pc, #4]	; (894 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     890:	4798      	blx	r3
     892:	bd80      	pop	{r7, pc}
     894:	0000083d 	.word	0x0000083d

00000898 <_ZN17ConfigState_ClassC1Ev>:
	
};


// default constructor
ConfigState_Class::ConfigState_Class()
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
     8a0:	4a14      	ldr	r2, [pc, #80]	; (8f4 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kGAINStateReset;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	2200      	movs	r2, #0
     8aa:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kGAINStateReset;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	2200      	movs	r2, #0
     8b0:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	2200      	movs	r2, #0
     8b6:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.targetUDC = 0.0;
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	f04f 0200 	mov.w	r2, #0
     8be:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.cycleDuration = 0;
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	2200      	movs	r2, #0
     8c4:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.inStateTime = 0;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	2200      	movs	r2, #0
     8ca:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.remainingTime = 0;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	2200      	movs	r2, #0
     8d0:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.waitingExceededTime = 0;
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	2200      	movs	r2, #0
     8d6:	65da      	str	r2, [r3, #92]	; 0x5c
	defaultState.fansOnAfterCateringCycleTime = forever;
     8d8:	4b07      	ldr	r3, [pc, #28]	; (8f8 <_ZN17ConfigState_ClassC1Ev+0x60>)
     8da:	681a      	ldr	r2, [r3, #0]
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	661a      	str	r2, [r3, #96]	; 0x60
	defaultState.magic=0xCAFEBABE;
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	4a06      	ldr	r2, [pc, #24]	; (8fc <_ZN17ConfigState_ClassC1Ev+0x64>)
     8e4:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	4618      	mov	r0, r3
     8ea:	370c      	adds	r7, #12
     8ec:	46bd      	mov	sp, r7
     8ee:	bc80      	pop	{r7}
     8f0:	4770      	bx	lr
     8f2:	bf00      	nop
     8f4:	0001a830 	.word	0x0001a830
     8f8:	0001bf3c 	.word	0x0001bf3c
     8fc:	cafebabe 	.word	0xcafebabe

00000900 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     900:	b480      	push	{r7}
     902:	b083      	sub	sp, #12
     904:	af00      	add	r7, sp, #0
     906:	6078      	str	r0, [r7, #4]
     908:	4a04      	ldr	r2, [pc, #16]	; (91c <_ZN17ConfigState_ClassD1Ev+0x1c>)
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     90e:	687b      	ldr	r3, [r7, #4]
     910:	4618      	mov	r0, r3
     912:	370c      	adds	r7, #12
     914:	46bd      	mov	sp, r7
     916:	bc80      	pop	{r7}
     918:	4770      	bx	lr
     91a:	bf00      	nop
     91c:	0001a830 	.word	0x0001a830

00000920 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     920:	b580      	push	{r7, lr}
     922:	b084      	sub	sp, #16
     924:	af00      	add	r7, sp, #0
     926:	60f8      	str	r0, [r7, #12]
     928:	60b9      	str	r1, [r7, #8]
     92a:	4611      	mov	r1, r2
     92c:	461a      	mov	r2, r3
     92e:	460b      	mov	r3, r1
     930:	71fb      	strb	r3, [r7, #7]
     932:	4613      	mov	r3, r2
     934:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     936:	79fb      	ldrb	r3, [r7, #7]
     938:	2b00      	cmp	r3, #0
     93a:	d010      	beq.n	95e <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3e>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     93c:	68fb      	ldr	r3, [r7, #12]
     93e:	3380      	adds	r3, #128	; 0x80
     940:	22ac      	movs	r2, #172	; 0xac
     942:	4909      	ldr	r1, [pc, #36]	; (968 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     944:	4618      	mov	r0, r3
     946:	4b09      	ldr	r3, [pc, #36]	; (96c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     948:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	68ba      	ldr	r2, [r7, #8]
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		memory.writeConfigurationDataArea(configuration);
     952:	68fb      	ldr	r3, [r7, #12]
     954:	3380      	adds	r3, #128	; 0x80
     956:	4619      	mov	r1, r3
     958:	4805      	ldr	r0, [pc, #20]	; (970 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     95a:	4b06      	ldr	r3, [pc, #24]	; (974 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x54>)
     95c:	4798      	blx	r3
	}
	
	
}
     95e:	bf00      	nop
     960:	3710      	adds	r7, #16
     962:	46bd      	mov	sp, r7
     964:	bd80      	pop	{r7, pc}
     966:	bf00      	nop
     968:	0001a48c 	.word	0x0001a48c
     96c:	00016735 	.word	0x00016735
     970:	20001724 	.word	0x20001724
     974:	00001d31 	.word	0x00001d31

00000978 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     978:	b580      	push	{r7, lr}
     97a:	b084      	sub	sp, #16
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastState);
     980:	687b      	ldr	r3, [r7, #4]
     982:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     986:	4619      	mov	r1, r3
     988:	4823      	ldr	r0, [pc, #140]	; (a18 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
     98a:	4b24      	ldr	r3, [pc, #144]	; (a1c <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
     98c:	4798      	blx	r3
     98e:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastState))
     990:	687b      	ldr	r3, [r7, #4]
     992:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     996:	4619      	mov	r1, r3
     998:	4821      	ldr	r0, [pc, #132]	; (a20 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     99a:	4b22      	ldr	r3, [pc, #136]	; (a24 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
     99c:	4798      	blx	r3
     99e:	4603      	mov	r3, r0
     9a0:	2b00      	cmp	r3, #0
     9a2:	d007      	beq.n	9b4 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastState);
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9aa:	4619      	mov	r1, r3
     9ac:	481e      	ldr	r0, [pc, #120]	; (a28 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     9ae:	4b1f      	ldr	r3, [pc, #124]	; (a2c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     9b0:	4798      	blx	r3
     9b2:	e02b      	b.n	a0c <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastState);
     9b4:	687b      	ldr	r3, [r7, #4]
     9b6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9ba:	4619      	mov	r1, r3
     9bc:	481c      	ldr	r0, [pc, #112]	; (a30 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     9be:	4b1d      	ldr	r3, [pc, #116]	; (a34 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
     9c0:	4798      	blx	r3
     9c2:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastState))
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9ca:	4619      	mov	r1, r3
     9cc:	4814      	ldr	r0, [pc, #80]	; (a20 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     9ce:	4b1a      	ldr	r3, [pc, #104]	; (a38 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
     9d0:	4798      	blx	r3
     9d2:	4603      	mov	r3, r0
     9d4:	2b00      	cmp	r3, #0
     9d6:	d00e      	beq.n	9f6 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastState);
     9d8:	687b      	ldr	r3, [r7, #4]
     9da:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9de:	4619      	mov	r1, r3
     9e0:	4811      	ldr	r0, [pc, #68]	; (a28 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     9e2:	4b12      	ldr	r3, [pc, #72]	; (a2c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     9e4:	4798      	blx	r3
				memory.SaveApplicationState(lastState);
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9ec:	4619      	mov	r1, r3
     9ee:	4813      	ldr	r0, [pc, #76]	; (a3c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     9f0:	4b13      	ldr	r3, [pc, #76]	; (a40 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
     9f2:	4798      	blx	r3
     9f4:	e00a      	b.n	a0c <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
     9f6:	480c      	ldr	r0, [pc, #48]	; (a28 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     9f8:	4b12      	ldr	r3, [pc, #72]	; (a44 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
     9fa:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
     9fc:	4912      	ldr	r1, [pc, #72]	; (a48 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     9fe:	480f      	ldr	r0, [pc, #60]	; (a3c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     a00:	4b12      	ldr	r3, [pc, #72]	; (a4c <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
     a02:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
     a04:	4910      	ldr	r1, [pc, #64]	; (a48 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     a06:	480a      	ldr	r0, [pc, #40]	; (a30 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     a08:	4b11      	ldr	r3, [pc, #68]	; (a50 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
     a0a:	4798      	blx	r3
			}
					
		
		}

		return r;
     a0c:	68fb      	ldr	r3, [r7, #12]
	};
     a0e:	4618      	mov	r0, r3
     a10:	3710      	adds	r7, #16
     a12:	46bd      	mov	sp, r7
     a14:	bd80      	pop	{r7, pc}
     a16:	bf00      	nop
     a18:	200018e0 	.word	0x200018e0
     a1c:	00001b81 	.word	0x00001b81
     a20:	20001724 	.word	0x20001724
     a24:	00001f35 	.word	0x00001f35
     a28:	20002d44 	.word	0x20002d44
     a2c:	00002c0d 	.word	0x00002c0d
     a30:	200018d0 	.word	0x200018d0
     a34:	00001009 	.word	0x00001009
     a38:	00001f79 	.word	0x00001f79
     a3c:	20001238 	.word	0x20001238
     a40:	000017dd 	.word	0x000017dd
     a44:	00000bcd 	.word	0x00000bcd
     a48:	20002d48 	.word	0x20002d48
     a4c:	0000173d 	.word	0x0000173d
     a50:	00001051 	.word	0x00001051

00000a54 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
     a54:	b580      	push	{r7, lr}
     a56:	b0a8      	sub	sp, #160	; 0xa0
     a58:	af00      	add	r7, sp, #0
     a5a:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
     a5c:	2300      	movs	r3, #0
     a5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	hvac.GetCurrentState(hs);
     a62:	f107 030c 	add.w	r3, r7, #12
     a66:	4619      	mov	r1, r3
     a68:	4849      	ldr	r0, [pc, #292]	; (b90 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
     a6a:	4b4a      	ldr	r3, [pc, #296]	; (b94 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
     a6c:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
     a6e:	693b      	ldr	r3, [r7, #16]
     a70:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
     a72:	f107 0308 	add.w	r3, r7, #8
     a76:	4618      	mov	r0, r3
     a78:	4b47      	ldr	r3, [pc, #284]	; (b98 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
     a7a:	4798      	blx	r3
     a7c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	2206      	movs	r2, #6
     a84:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
	for (i = 0; i < k; i++)
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	2200      	movs	r2, #0
     a8c:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     a96:	461a      	mov	r2, r3
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
     a9e:	429a      	cmp	r2, r3
     aa0:	da71      	bge.n	b86 <_ZN17ConfigState_Class10PrintStateEv+0x132>
	{
	
		usb<<printableNamesHVACState[i]<<" : ";
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     aa8:	009b      	lsls	r3, r3, #2
     aaa:	4a3c      	ldr	r2, [pc, #240]	; (b9c <_ZN17ConfigState_Class10PrintStateEv+0x148>)
     aac:	4413      	add	r3, r2
     aae:	4619      	mov	r1, r3
     ab0:	483b      	ldr	r0, [pc, #236]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     ab2:	4b3c      	ldr	r3, [pc, #240]	; (ba4 <_ZN17ConfigState_Class10PrintStateEv+0x150>)
     ab4:	4798      	blx	r3
     ab6:	4603      	mov	r3, r0
     ab8:	493b      	ldr	r1, [pc, #236]	; (ba8 <_ZN17ConfigState_Class10PrintStateEv+0x154>)
     aba:	4618      	mov	r0, r3
     abc:	4b3b      	ldr	r3, [pc, #236]	; (bac <_ZN17ConfigState_Class10PrintStateEv+0x158>)
     abe:	4798      	blx	r3
	
		switch (i)
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     ac6:	2b05      	cmp	r3, #5
     ac8:	d84b      	bhi.n	b62 <_ZN17ConfigState_Class10PrintStateEv+0x10e>
     aca:	a201      	add	r2, pc, #4	; (adr r2, ad0 <_ZN17ConfigState_Class10PrintStateEv+0x7c>)
     acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ad0:	00000ae9 	.word	0x00000ae9
     ad4:	00000afd 	.word	0x00000afd
     ad8:	00000b11 	.word	0x00000b11
     adc:	00000b25 	.word	0x00000b25
     ae0:	00000b41 	.word	0x00000b41
     ae4:	00000b4d 	.word	0x00000b4d
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
     ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     aee:	f107 0388 	add.w	r3, r7, #136	; 0x88
     af2:	4619      	mov	r1, r3
     af4:	482a      	ldr	r0, [pc, #168]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     af6:	4b2e      	ldr	r3, [pc, #184]	; (bb0 <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     af8:	4798      	blx	r3
			/* Your code here */
			break;
     afa:	e037      	b.n	b6c <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
     afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     b02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
     b06:	4619      	mov	r1, r3
     b08:	4825      	ldr	r0, [pc, #148]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b0a:	4b29      	ldr	r3, [pc, #164]	; (bb0 <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     b0c:	4798      	blx	r3
			/* Your code here */
			break;
     b0e:	e02d      	b.n	b6c <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
     b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
     b16:	f107 0390 	add.w	r3, r7, #144	; 0x90
     b1a:	4619      	mov	r1, r3
     b1c:	4820      	ldr	r0, [pc, #128]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b1e:	4b24      	ldr	r3, [pc, #144]	; (bb0 <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     b20:	4798      	blx	r3
			/* Your code here */
			break;
     b22:	e023      	b.n	b6c <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 3:
				usb<<(uint32_t)hs.targetPower;
     b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     b26:	4b23      	ldr	r3, [pc, #140]	; (bb4 <_ZN17ConfigState_Class10PrintStateEv+0x160>)
     b28:	4610      	mov	r0, r2
     b2a:	4798      	blx	r3
     b2c:	4603      	mov	r3, r0
     b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
     b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
     b36:	4619      	mov	r1, r3
     b38:	4819      	ldr	r0, [pc, #100]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b3a:	4b1d      	ldr	r3, [pc, #116]	; (bb0 <_ZN17ConfigState_Class10PrintStateEv+0x15c>)
     b3c:	4798      	blx	r3
			/* Your code here */
			break;
     b3e:	e015      	b.n	b6c <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 4:
				
				usb.print(act);
     b40:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
     b44:	4816      	ldr	r0, [pc, #88]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b46:	4b1c      	ldr	r3, [pc, #112]	; (bb8 <_ZN17ConfigState_Class10PrintStateEv+0x164>)
     b48:	4798      	blx	r3
			/* Your code here */
			break;
     b4a:	e00f      	b.n	b6c <_ZN17ConfigState_Class10PrintStateEv+0x118>
			case 5:
				usb<<"0x";
     b4c:	491b      	ldr	r1, [pc, #108]	; (bbc <_ZN17ConfigState_Class10PrintStateEv+0x168>)
     b4e:	4814      	ldr	r0, [pc, #80]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b50:	4b1b      	ldr	r3, [pc, #108]	; (bc0 <_ZN17ConfigState_Class10PrintStateEv+0x16c>)
     b52:	4798      	blx	r3
				usb.print(hs.magic,HEX);
     b54:	68fb      	ldr	r3, [r7, #12]
     b56:	2210      	movs	r2, #16
     b58:	4619      	mov	r1, r3
     b5a:	4811      	ldr	r0, [pc, #68]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b5c:	4b19      	ldr	r3, [pc, #100]	; (bc4 <_ZN17ConfigState_Class10PrintStateEv+0x170>)
     b5e:	4798      	blx	r3
			
				/* Your code here */
			break;
     b60:	e004      	b.n	b6c <_ZN17ConfigState_Class10PrintStateEv+0x118>
			default:
				i=sizeof(printableNamesHVACState);
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	2218      	movs	r2, #24
     b66:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
				
			/* Your code here */
			break;
     b6a:	bf00      	nop
		}
		usb<<NEWLINE;
     b6c:	4916      	ldr	r1, [pc, #88]	; (bc8 <_ZN17ConfigState_Class10PrintStateEv+0x174>)
     b6e:	480c      	ldr	r0, [pc, #48]	; (ba0 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
     b70:	4b13      	ldr	r3, [pc, #76]	; (bc0 <_ZN17ConfigState_Class10PrintStateEv+0x16c>)
     b72:	4798      	blx	r3
	for (i = 0; i < k; i++)
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
     b7a:	3301      	adds	r3, #1
     b7c:	b2da      	uxtb	r2, r3
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
     b84:	e784      	b.n	a90 <_ZN17ConfigState_Class10PrintStateEv+0x3c>
			
	}
	
}
     b86:	bf00      	nop
     b88:	37a0      	adds	r7, #160	; 0xa0
     b8a:	46bd      	mov	sp, r7
     b8c:	bd80      	pop	{r7, pc}
     b8e:	bf00      	nop
     b90:	20002d44 	.word	0x20002d44
     b94:	00002bbd 	.word	0x00002bbd
     b98:	0001644d 	.word	0x0001644d
     b9c:	20000050 	.word	0x20000050
     ba0:	20004e74 	.word	0x20004e74
     ba4:	00000bf1 	.word	0x00000bf1
     ba8:	0001a81c 	.word	0x0001a81c
     bac:	00000c15 	.word	0x00000c15
     bb0:	00000c35 	.word	0x00000c35
     bb4:	000160fd 	.word	0x000160fd
     bb8:	00013bd5 	.word	0x00013bd5
     bbc:	0001a820 	.word	0x0001a820
     bc0:	0000063d 	.word	0x0000063d
     bc4:	00013c41 	.word	0x00013c41
     bc8:	0001a824 	.word	0x0001a824

00000bcc <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
     bcc:	b580      	push	{r7, lr}
     bce:	b082      	sub	sp, #8
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	3304      	adds	r3, #4
     bd8:	4619      	mov	r1, r3
     bda:	4803      	ldr	r0, [pc, #12]	; (be8 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
     bdc:	4b03      	ldr	r3, [pc, #12]	; (bec <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
     bde:	4798      	blx	r3

}
     be0:	bf00      	nop
     be2:	3708      	adds	r7, #8
     be4:	46bd      	mov	sp, r7
     be6:	bd80      	pop	{r7, pc}
     be8:	20002d44 	.word	0x20002d44
     bec:	00002c0d 	.word	0x00002c0d

00000bf0 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     bf0:	b580      	push	{r7, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	af00      	add	r7, sp, #0
     bf6:	6078      	str	r0, [r7, #4]
     bf8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     bfa:	683b      	ldr	r3, [r7, #0]
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	4619      	mov	r1, r3
     c00:	6878      	ldr	r0, [r7, #4]
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
     c04:	4798      	blx	r3
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	4618      	mov	r0, r3
     c0a:	3708      	adds	r7, #8
     c0c:	46bd      	mov	sp, r7
     c0e:	bd80      	pop	{r7, pc}
     c10:	00013bd5 	.word	0x00013bd5

00000c14 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c14:	b580      	push	{r7, lr}
     c16:	b082      	sub	sp, #8
     c18:	af00      	add	r7, sp, #0
     c1a:	6078      	str	r0, [r7, #4]
     c1c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c1e:	6839      	ldr	r1, [r7, #0]
     c20:	6878      	ldr	r0, [r7, #4]
     c22:	4b03      	ldr	r3, [pc, #12]	; (c30 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     c24:	4798      	blx	r3
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	4618      	mov	r0, r3
     c2a:	3708      	adds	r7, #8
     c2c:	46bd      	mov	sp, r7
     c2e:	bd80      	pop	{r7, pc}
     c30:	00013bd5 	.word	0x00013bd5

00000c34 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
     c3a:	6078      	str	r0, [r7, #4]
     c3c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c3e:	683b      	ldr	r3, [r7, #0]
     c40:	681b      	ldr	r3, [r3, #0]
     c42:	220a      	movs	r2, #10
     c44:	4619      	mov	r1, r3
     c46:	6878      	ldr	r0, [r7, #4]
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <_ZlsImER5PrintS1_RKT_+0x24>)
     c4a:	4798      	blx	r3
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	4618      	mov	r0, r3
     c50:	3708      	adds	r7, #8
     c52:	46bd      	mov	sp, r7
     c54:	bd80      	pop	{r7, pc}
     c56:	bf00      	nop
     c58:	00013c41 	.word	0x00013c41

00000c5c <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
     c5c:	b480      	push	{r7}
     c5e:	b083      	sub	sp, #12
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
     c64:	687b      	ldr	r3, [r7, #4]
     c66:	4618      	mov	r0, r3
     c68:	370c      	adds	r7, #12
     c6a:	46bd      	mov	sp, r7
     c6c:	bc80      	pop	{r7}
     c6e:	4770      	bx	lr

00000c70 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
     c70:	b480      	push	{r7}
     c72:	b083      	sub	sp, #12
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	4618      	mov	r0, r3
     c7c:	370c      	adds	r7, #12
     c7e:	46bd      	mov	sp, r7
     c80:	bc80      	pop	{r7}
     c82:	4770      	bx	lr

00000c84 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
     c84:	b580      	push	{r7, lr}
     c86:	b082      	sub	sp, #8
     c88:	af00      	add	r7, sp, #0
     c8a:	6078      	str	r0, [r7, #4]
     c8c:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
     c8e:	4806      	ldr	r0, [pc, #24]	; (ca8 <_ZN11CRC32_Class4InitEm+0x24>)
     c90:	4b06      	ldr	r3, [pc, #24]	; (cac <_ZN11CRC32_Class4InitEm+0x28>)
     c92:	4798      	blx	r3
	refCRC32=refCRC;
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	683a      	ldr	r2, [r7, #0]
     c98:	601a      	str	r2, [r3, #0]
	return	refCRC32;
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	681b      	ldr	r3, [r3, #0]
}
     c9e:	4618      	mov	r0, r3
     ca0:	3708      	adds	r7, #8
     ca2:	46bd      	mov	sp, r7
     ca4:	bd80      	pop	{r7, pc}
     ca6:	bf00      	nop
     ca8:	20005124 	.word	0x20005124
     cac:	00004631 	.word	0x00004631

00000cb0 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
     cb0:	b590      	push	{r4, r7, lr}
     cb2:	b083      	sub	sp, #12
     cb4:	af00      	add	r7, sp, #0
     cb6:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
     cb8:	4b07      	ldr	r3, [pc, #28]	; (cd8 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
     cba:	6878      	ldr	r0, [r7, #4]
     cbc:	4798      	blx	r3
     cbe:	4603      	mov	r3, r0
     cc0:	460c      	mov	r4, r1
     cc2:	4618      	mov	r0, r3
     cc4:	4621      	mov	r1, r4
     cc6:	4b05      	ldr	r3, [pc, #20]	; (cdc <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
     cc8:	4798      	blx	r3
     cca:	4603      	mov	r3, r0
     ccc:	460c      	mov	r4, r1
     cce:	4618      	mov	r0, r3
     cd0:	4621      	mov	r1, r4
     cd2:	370c      	adds	r7, #12
     cd4:	46bd      	mov	sp, r7
     cd6:	bd90      	pop	{r4, r7, pc}
     cd8:	00015a71 	.word	0x00015a71
     cdc:	00014589 	.word	0x00014589

00000ce0 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
     ce0:	b590      	push	{r4, r7, lr}
     ce2:	b087      	sub	sp, #28
     ce4:	af00      	add	r7, sp, #0
     ce6:	60f8      	str	r0, [r7, #12]
     ce8:	60b9      	str	r1, [r7, #8]
     cea:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	089b      	lsrs	r3, r3, #2
     cf0:	4618      	mov	r0, r3
     cf2:	4b0f      	ldr	r3, [pc, #60]	; (d30 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
     cf4:	4798      	blx	r3
     cf6:	460a      	mov	r2, r1
     cf8:	4601      	mov	r1, r0
     cfa:	4b0e      	ldr	r3, [pc, #56]	; (d34 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
     cfc:	4608      	mov	r0, r1
     cfe:	4611      	mov	r1, r2
     d00:	4798      	blx	r3
     d02:	4603      	mov	r3, r0
     d04:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
     d06:	f04f 31ff 	mov.w	r1, #4294967295
     d0a:	68f8      	ldr	r0, [r7, #12]
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
     d0e:	4798      	blx	r3
     d10:	4603      	mov	r3, r0
     d12:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
     d14:	f107 0310 	add.w	r3, r7, #16
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	68b9      	ldr	r1, [r7, #8]
     d1c:	4807      	ldr	r0, [pc, #28]	; (d3c <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
     d1e:	4c08      	ldr	r4, [pc, #32]	; (d40 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
     d20:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
     d22:	693b      	ldr	r3, [r7, #16]
     d24:	43db      	mvns	r3, r3
     d26:	4618      	mov	r0, r3
     d28:	371c      	adds	r7, #28
     d2a:	46bd      	mov	sp, r7
     d2c:	bd90      	pop	{r4, r7, pc}
     d2e:	bf00      	nop
     d30:	00000cb1 	.word	0x00000cb1
     d34:	000160bd 	.word	0x000160bd
     d38:	00000c85 	.word	0x00000c85
     d3c:	20005124 	.word	0x20005124
     d40:	0000466d 	.word	0x0000466d

00000d44 <_ZN15DataLoger_ClassC1Ev>:
#include "DataLoger_Class.h"
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	4618      	mov	r0, r3
     d50:	4b06      	ldr	r3, [pc, #24]	; (d6c <_ZN15DataLoger_ClassC1Ev+0x28>)
     d52:	4798      	blx	r3
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
     d5a:	4618      	mov	r0, r3
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <_ZN15DataLoger_ClassC1Ev+0x2c>)
     d5e:	4798      	blx	r3
{
} //DataLoger_Class
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	4618      	mov	r0, r3
     d64:	3708      	adds	r7, #8
     d66:	46bd      	mov	sp, r7
     d68:	bd80      	pop	{r7, pc}
     d6a:	bf00      	nop
     d6c:	00012575 	.word	0x00012575
     d70:	00000da9 	.word	0x00000da9

00000d74 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     d74:	b580      	push	{r7, lr}
     d76:	b082      	sub	sp, #8
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	4618      	mov	r0, r3
     d80:	4b03      	ldr	r3, [pc, #12]	; (d90 <_ZN15DataLoger_ClassD1Ev+0x1c>)
     d82:	4798      	blx	r3
{
} //~DataLoger_Class
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	4618      	mov	r0, r3
     d88:	3708      	adds	r7, #8
     d8a:	46bd      	mov	sp, r7
     d8c:	bd80      	pop	{r7, pc}
     d8e:	bf00      	nop
     d90:	000125b1 	.word	0x000125b1

00000d94 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=flash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
     d94:	b480      	push	{r7}
     d96:	b083      	sub	sp, #12
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
	return 0;
     d9c:	2300      	movs	r3, #0
     d9e:	4618      	mov	r0, r3
     da0:	370c      	adds	r7, #12
     da2:	46bd      	mov	sp, r7
     da4:	bc80      	pop	{r7}
     da6:	4770      	bx	lr

00000da8 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	f44f 7200 	mov.w	r2, #512	; 0x200
     db6:	2100      	movs	r1, #0
     db8:	4618      	mov	r0, r3
     dba:	4b05      	ldr	r3, [pc, #20]	; (dd0 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
     dbc:	4798      	blx	r3
    clear();
     dbe:	6878      	ldr	r0, [r7, #4]
     dc0:	4b04      	ldr	r3, [pc, #16]	; (dd4 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
     dc2:	4798      	blx	r3
}
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	4618      	mov	r0, r3
     dc8:	3708      	adds	r7, #8
     dca:	46bd      	mov	sp, r7
     dcc:	bd80      	pop	{r7, pc}
     dce:	bf00      	nop
     dd0:	00016869 	.word	0x00016869
     dd4:	00000dd9 	.word	0x00000dd9

00000dd8 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
     dd8:	b480      	push	{r7}
     dda:	b083      	sub	sp, #12
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	2200      	movs	r2, #0
     dec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
     df0:	bf00      	nop
     df2:	370c      	adds	r7, #12
     df4:	46bd      	mov	sp, r7
     df6:	bc80      	pop	{r7}
     df8:	4770      	bx	lr
	...

00000dfc <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
     dfc:	b580      	push	{r7, lr}
     dfe:	b082      	sub	sp, #8
     e00:	af00      	add	r7, sp, #0
     e02:	6078      	str	r0, [r7, #4]
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	33a8      	adds	r3, #168	; 0xa8
     e08:	4618      	mov	r0, r3
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <_ZN14DateTime_ClassC1Ev+0x2c>)
     e0c:	4798      	blx	r3
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	4618      	mov	r0, r3
     e12:	4b06      	ldr	r3, [pc, #24]	; (e2c <_ZN14DateTime_ClassC1Ev+0x30>)
     e14:	4798      	blx	r3
     e16:	4a06      	ldr	r2, [pc, #24]	; (e30 <_ZN14DateTime_ClassC1Ev+0x34>)
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	4618      	mov	r0, r3
     e20:	3708      	adds	r7, #8
     e22:	46bd      	mov	sp, r7
     e24:	bd80      	pop	{r7, pc}
     e26:	bf00      	nop
     e28:	00000f9f 	.word	0x00000f9f
     e2c:	00012971 	.word	0x00012971
     e30:	0001a83c 	.word	0x0001a83c

00000e34 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
     e34:	b580      	push	{r7, lr}
     e36:	b082      	sub	sp, #8
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
     e3c:	4a08      	ldr	r2, [pc, #32]	; (e60 <_ZN14DateTime_ClassD1Ev+0x2c>)
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	601a      	str	r2, [r3, #0]
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	4618      	mov	r0, r3
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <_ZN14DateTime_ClassD1Ev+0x30>)
     e48:	4798      	blx	r3
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	33a8      	adds	r3, #168	; 0xa8
     e4e:	4618      	mov	r0, r3
     e50:	4b05      	ldr	r3, [pc, #20]	; (e68 <_ZN14DateTime_ClassD1Ev+0x34>)
     e52:	4798      	blx	r3
{
} //~DateTime_Class
     e54:	687b      	ldr	r3, [r7, #4]
     e56:	4618      	mov	r0, r3
     e58:	3708      	adds	r7, #8
     e5a:	46bd      	mov	sp, r7
     e5c:	bd80      	pop	{r7, pc}
     e5e:	bf00      	nop
     e60:	0001a83c 	.word	0x0001a83c
     e64:	000129e1 	.word	0x000129e1
     e68:	00000fb3 	.word	0x00000fb3

00000e6c <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
     e6c:	b580      	push	{r7, lr}
     e6e:	b084      	sub	sp, #16
     e70:	af00      	add	r7, sp, #0
     e72:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
     e74:	4b0b      	ldr	r3, [pc, #44]	; (ea4 <_ZN14DateTime_Class4InitEv+0x38>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	3390      	adds	r3, #144	; 0x90
     e7a:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
     e7c:	68f9      	ldr	r1, [r7, #12]
     e7e:	480a      	ldr	r0, [pc, #40]	; (ea8 <_ZN14DateTime_Class4InitEv+0x3c>)
     e80:	4b0a      	ldr	r3, [pc, #40]	; (eac <_ZN14DateTime_Class4InitEv+0x40>)
     e82:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
     e84:	4b07      	ldr	r3, [pc, #28]	; (ea4 <_ZN14DateTime_Class4InitEv+0x38>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	3394      	adds	r3, #148	; 0x94
     e8a:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
     e8c:	68b9      	ldr	r1, [r7, #8]
     e8e:	4806      	ldr	r0, [pc, #24]	; (ea8 <_ZN14DateTime_Class4InitEv+0x3c>)
     e90:	4b07      	ldr	r3, [pc, #28]	; (eb0 <_ZN14DateTime_Class4InitEv+0x44>)
     e92:	4798      	blx	r3
	calendar.Init();
     e94:	4804      	ldr	r0, [pc, #16]	; (ea8 <_ZN14DateTime_Class4InitEv+0x3c>)
     e96:	4b07      	ldr	r3, [pc, #28]	; (eb4 <_ZN14DateTime_Class4InitEv+0x48>)
     e98:	4798      	blx	r3
	
}
     e9a:	bf00      	nop
     e9c:	3710      	adds	r7, #16
     e9e:	46bd      	mov	sp, r7
     ea0:	bd80      	pop	{r7, pc}
     ea2:	bf00      	nop
     ea4:	200011b0 	.word	0x200011b0
     ea8:	20004d40 	.word	0x20004d40
     eac:	000132f1 	.word	0x000132f1
     eb0:	00013311 	.word	0x00013311
     eb4:	00012a09 	.word	0x00012a09

00000eb8 <_Z41__static_initialization_and_destruction_0ii>:

     eb8:	b580      	push	{r7, lr}
     eba:	b082      	sub	sp, #8
     ebc:	af00      	add	r7, sp, #0
     ebe:	6078      	str	r0, [r7, #4]
     ec0:	6039      	str	r1, [r7, #0]
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	2b01      	cmp	r3, #1
     ec6:	d10c      	bne.n	ee2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     ec8:	683b      	ldr	r3, [r7, #0]
     eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     ece:	4293      	cmp	r3, r2
     ed0:	d107      	bne.n	ee2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     ed2:	4806      	ldr	r0, [pc, #24]	; (eec <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ed4:	4b06      	ldr	r3, [pc, #24]	; (ef0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     ed6:	4798      	blx	r3
     ed8:	4a06      	ldr	r2, [pc, #24]	; (ef4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     eda:	4907      	ldr	r1, [pc, #28]	; (ef8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     edc:	4803      	ldr	r0, [pc, #12]	; (eec <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ede:	4b07      	ldr	r3, [pc, #28]	; (efc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     ee0:	4798      	blx	r3
     ee2:	bf00      	nop
     ee4:	3708      	adds	r7, #8
     ee6:	46bd      	mov	sp, r7
     ee8:	bd80      	pop	{r7, pc}
     eea:	bf00      	nop
     eec:	200010f8 	.word	0x200010f8
     ef0:	00000dfd 	.word	0x00000dfd
     ef4:	20000000 	.word	0x20000000
     ef8:	00000e35 	.word	0x00000e35
     efc:	00014579 	.word	0x00014579

00000f00 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
     f00:	b580      	push	{r7, lr}
     f02:	af00      	add	r7, sp, #0
     f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
     f08:	2001      	movs	r0, #1
     f0a:	4b01      	ldr	r3, [pc, #4]	; (f10 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
     f0c:	4798      	blx	r3
     f0e:	bd80      	pop	{r7, pc}
     f10:	00000eb9 	.word	0x00000eb9

00000f14 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     f14:	b580      	push	{r7, lr}
     f16:	b082      	sub	sp, #8
     f18:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     f1a:	4b16      	ldr	r3, [pc, #88]	; (f74 <Reset_Handler+0x60>)
     f1c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     f1e:	4b16      	ldr	r3, [pc, #88]	; (f78 <Reset_Handler+0x64>)
     f20:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     f22:	687a      	ldr	r2, [r7, #4]
     f24:	683b      	ldr	r3, [r7, #0]
     f26:	429a      	cmp	r2, r3
     f28:	d00c      	beq.n	f44 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     f2a:	e007      	b.n	f3c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     f2c:	683b      	ldr	r3, [r7, #0]
     f2e:	1d1a      	adds	r2, r3, #4
     f30:	603a      	str	r2, [r7, #0]
     f32:	687a      	ldr	r2, [r7, #4]
     f34:	1d11      	adds	r1, r2, #4
     f36:	6079      	str	r1, [r7, #4]
     f38:	6812      	ldr	r2, [r2, #0]
     f3a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     f3c:	683b      	ldr	r3, [r7, #0]
     f3e:	4a0f      	ldr	r2, [pc, #60]	; (f7c <Reset_Handler+0x68>)
     f40:	4293      	cmp	r3, r2
     f42:	d3f3      	bcc.n	f2c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f44:	4b0e      	ldr	r3, [pc, #56]	; (f80 <Reset_Handler+0x6c>)
     f46:	603b      	str	r3, [r7, #0]
     f48:	e004      	b.n	f54 <Reset_Handler+0x40>
                *pDest++ = 0;
     f4a:	683b      	ldr	r3, [r7, #0]
     f4c:	1d1a      	adds	r2, r3, #4
     f4e:	603a      	str	r2, [r7, #0]
     f50:	2200      	movs	r2, #0
     f52:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     f54:	683b      	ldr	r3, [r7, #0]
     f56:	4a0b      	ldr	r2, [pc, #44]	; (f84 <Reset_Handler+0x70>)
     f58:	4293      	cmp	r3, r2
     f5a:	d3f6      	bcc.n	f4a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     f5c:	4b0a      	ldr	r3, [pc, #40]	; (f88 <Reset_Handler+0x74>)
     f5e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f60:	4a0a      	ldr	r2, [pc, #40]	; (f8c <Reset_Handler+0x78>)
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     f68:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <Reset_Handler+0x7c>)
     f6c:	4798      	blx	r3

        /* Branch to main function */
        main();
     f6e:	4b09      	ldr	r3, [pc, #36]	; (f94 <Reset_Handler+0x80>)
     f70:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     f72:	e7fe      	b.n	f72 <Reset_Handler+0x5e>
     f74:	0001c354 	.word	0x0001c354
     f78:	20000000 	.word	0x20000000
     f7c:	20000b94 	.word	0x20000b94
     f80:	20000b98 	.word	0x20000b98
     f84:	20005194 	.word	0x20005194
     f88:	00000000 	.word	0x00000000
     f8c:	e000ed00 	.word	0xe000ed00
     f90:	0001649d 	.word	0x0001649d
     f94:	000012d1 	.word	0x000012d1

00000f98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     f98:	b480      	push	{r7}
     f9a:	af00      	add	r7, sp, #0
        while (1) {
     f9c:	e7fe      	b.n	f9c <Dummy_Handler+0x4>

00000f9e <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
     f9e:	b480      	push	{r7}
     fa0:	b083      	sub	sp, #12
     fa2:	af00      	add	r7, sp, #0
     fa4:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	4618      	mov	r0, r3
     faa:	370c      	adds	r7, #12
     fac:	46bd      	mov	sp, r7
     fae:	bc80      	pop	{r7}
     fb0:	4770      	bx	lr

00000fb2 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
     fb2:	b480      	push	{r7}
     fb4:	b083      	sub	sp, #12
     fb6:	af00      	add	r7, sp, #0
     fb8:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	4618      	mov	r0, r3
     fbe:	370c      	adds	r7, #12
     fc0:	46bd      	mov	sp, r7
     fc2:	bc80      	pop	{r7}
     fc4:	4770      	bx	lr
	...

00000fc8 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
     fc8:	b590      	push	{r4, r7, lr}
     fca:	b087      	sub	sp, #28
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
     fd0:	4b0a      	ldr	r3, [pc, #40]	; (ffc <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	3310      	adds	r3, #16
     fd6:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
     fd8:	697b      	ldr	r3, [r7, #20]
     fda:	b29a      	uxth	r2, r3
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	899a      	ldrh	r2, [r3, #12]
     fe4:	f107 010c 	add.w	r1, r7, #12
     fe8:	2304      	movs	r3, #4
     fea:	4805      	ldr	r0, [pc, #20]	; (1000 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
     fec:	4c05      	ldr	r4, [pc, #20]	; (1004 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
     fee:	47a0      	blx	r4
     ff0:	6138      	str	r0, [r7, #16]
	return	crc;
     ff2:	68fb      	ldr	r3, [r7, #12]
}
     ff4:	4618      	mov	r0, r3
     ff6:	371c      	adds	r7, #28
     ff8:	46bd      	mov	sp, r7
     ffa:	bd90      	pop	{r4, r7, pc}
     ffc:	200011b0 	.word	0x200011b0
    1000:	20004ab4 	.word	0x20004ab4
    1004:	00011e79 	.word	0x00011e79

00001008 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    1008:	b590      	push	{r4, r7, lr}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	6078      	str	r0, [r7, #4]
    1010:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    1012:	4b0c      	ldr	r3, [pc, #48]	; (1044 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	3314      	adds	r3, #20
    1018:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	b29a      	uxth	r2, r3
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1022:	683a      	ldr	r2, [r7, #0]
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	6819      	ldr	r1, [r3, #0]
    102c:	687b      	ldr	r3, [r7, #4]
    102e:	899a      	ldrh	r2, [r3, #12]
    1030:	237c      	movs	r3, #124	; 0x7c
    1032:	4805      	ldr	r0, [pc, #20]	; (1048 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    1034:	4c05      	ldr	r4, [pc, #20]	; (104c <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    1036:	47a0      	blx	r4
    1038:	60b8      	str	r0, [r7, #8]
	return	r;
    103a:	68bb      	ldr	r3, [r7, #8]
}
    103c:	4618      	mov	r0, r3
    103e:	3714      	adds	r7, #20
    1040:	46bd      	mov	sp, r7
    1042:	bd90      	pop	{r4, r7, pc}
    1044:	200011b0 	.word	0x200011b0
    1048:	20004ab4 	.word	0x20004ab4
    104c:	00011e79 	.word	0x00011e79

00001050 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    1050:	b580      	push	{r7, lr}
    1052:	b084      	sub	sp, #16
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
    1058:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    105a:	4b12      	ldr	r3, [pc, #72]	; (10a4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    105c:	681b      	ldr	r3, [r3, #0]
    105e:	3314      	adds	r3, #20
    1060:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1062:	68fb      	ldr	r3, [r7, #12]
    1064:	b29a      	uxth	r2, r3
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	899b      	ldrh	r3, [r3, #12]
    106e:	461a      	mov	r2, r3
    1070:	6839      	ldr	r1, [r7, #0]
    1072:	6878      	ldr	r0, [r7, #4]
    1074:	4b0c      	ldr	r3, [pc, #48]	; (10a8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    1076:	4798      	blx	r3
    1078:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    107a:	227c      	movs	r2, #124	; 0x7c
    107c:	6839      	ldr	r1, [r7, #0]
    107e:	480b      	ldr	r0, [pc, #44]	; (10ac <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    1080:	4b0b      	ldr	r3, [pc, #44]	; (10b0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    1082:	4798      	blx	r3
    1084:	4602      	mov	r2, r0
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	689b      	ldr	r3, [r3, #8]
    108e:	4619      	mov	r1, r3
    1090:	6878      	ldr	r0, [r7, #4]
    1092:	4b08      	ldr	r3, [pc, #32]	; (10b4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    1094:	4798      	blx	r3
    1096:	60b8      	str	r0, [r7, #8]
	return	w;
    1098:	68bb      	ldr	r3, [r7, #8]
}
    109a:	4618      	mov	r0, r3
    109c:	3710      	adds	r7, #16
    109e:	46bd      	mov	sp, r7
    10a0:	bd80      	pop	{r7, pc}
    10a2:	bf00      	nop
    10a4:	200011b0 	.word	0x200011b0
    10a8:	000010b9 	.word	0x000010b9
    10ac:	20001724 	.word	0x20001724
    10b0:	00000ce1 	.word	0x00000ce1
    10b4:	000010f1 	.word	0x000010f1

000010b8 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    10b8:	b590      	push	{r4, r7, lr}
    10ba:	b087      	sub	sp, #28
    10bc:	af00      	add	r7, sp, #0
    10be:	60f8      	str	r0, [r7, #12]
    10c0:	60b9      	str	r1, [r7, #8]
    10c2:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    10c4:	68ba      	ldr	r2, [r7, #8]
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	6819      	ldr	r1, [r3, #0]
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	b29a      	uxth	r2, r3
    10d2:	237c      	movs	r3, #124	; 0x7c
    10d4:	4804      	ldr	r0, [pc, #16]	; (10e8 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    10d6:	4c05      	ldr	r4, [pc, #20]	; (10ec <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    10d8:	47a0      	blx	r4
    10da:	6178      	str	r0, [r7, #20]
	return	w;
    10dc:	697b      	ldr	r3, [r7, #20]
}
    10de:	4618      	mov	r0, r3
    10e0:	371c      	adds	r7, #28
    10e2:	46bd      	mov	sp, r7
    10e4:	bd90      	pop	{r4, r7, pc}
    10e6:	bf00      	nop
    10e8:	20004ab4 	.word	0x20004ab4
    10ec:	00011d75 	.word	0x00011d75

000010f0 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    10f0:	b590      	push	{r4, r7, lr}
    10f2:	b085      	sub	sp, #20
    10f4:	af00      	add	r7, sp, #0
    10f6:	6078      	str	r0, [r7, #4]
    10f8:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    10fa:	4b08      	ldr	r3, [pc, #32]	; (111c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	3310      	adds	r3, #16
    1100:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    1102:	89fa      	ldrh	r2, [r7, #14]
    1104:	4639      	mov	r1, r7
    1106:	2304      	movs	r3, #4
    1108:	4805      	ldr	r0, [pc, #20]	; (1120 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    110a:	4c06      	ldr	r4, [pc, #24]	; (1124 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    110c:	47a0      	blx	r4
    110e:	60b8      	str	r0, [r7, #8]
	return	w;
    1110:	68bb      	ldr	r3, [r7, #8]
    1112:	4618      	mov	r0, r3
    1114:	3714      	adds	r7, #20
    1116:	46bd      	mov	sp, r7
    1118:	bd90      	pop	{r4, r7, pc}
    111a:	bf00      	nop
    111c:	200011b0 	.word	0x200011b0
    1120:	20004ab4 	.word	0x20004ab4
    1124:	00011d75 	.word	0x00011d75

00001128 <_ZN9eventDataC1Ei>:
inline eventData::eventData(int v)
    1128:	b480      	push	{r7}
    112a:	b083      	sub	sp, #12
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
    1130:	6039      	str	r1, [r7, #0]
	integerData = v;
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	683a      	ldr	r2, [r7, #0]
    1136:	601a      	str	r2, [r3, #0]
	}
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	4618      	mov	r0, r3
    113c:	370c      	adds	r7, #12
    113e:	46bd      	mov	sp, r7
    1140:	bc80      	pop	{r7}
    1142:	4770      	bx	lr

00001144 <_ZN5eventC1E10EventClass9EventTypeRK9eventData>:
inline event::event()
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
	{
	}

inline event::event(EventClass c, EventType t, const eventData& d)
    1144:	b480      	push	{r7}
    1146:	b085      	sub	sp, #20
    1148:	af00      	add	r7, sp, #0
    114a:	60f8      	str	r0, [r7, #12]
    114c:	607b      	str	r3, [r7, #4]
    114e:	460b      	mov	r3, r1
    1150:	817b      	strh	r3, [r7, #10]
    1152:	4613      	mov	r3, r2
    1154:	813b      	strh	r3, [r7, #8]
	:eventClass(c), eventType(t), timestamp(0), data(d), next(NULL)
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	897a      	ldrh	r2, [r7, #10]
    115a:	801a      	strh	r2, [r3, #0]
    115c:	68fb      	ldr	r3, [r7, #12]
    115e:	893a      	ldrh	r2, [r7, #8]
    1160:	805a      	strh	r2, [r3, #2]
    1162:	68fb      	ldr	r3, [r7, #12]
    1164:	2200      	movs	r2, #0
    1166:	605a      	str	r2, [r3, #4]
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	687a      	ldr	r2, [r7, #4]
    116c:	6812      	ldr	r2, [r2, #0]
    116e:	609a      	str	r2, [r3, #8]
    1170:	68fb      	ldr	r3, [r7, #12]
    1172:	2200      	movs	r2, #0
    1174:	60da      	str	r2, [r3, #12]
	{
	}
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	4618      	mov	r0, r3
    117a:	3714      	adds	r7, #20
    117c:	46bd      	mov	sp, r7
    117e:	bc80      	pop	{r7}
    1180:	4770      	bx	lr

00001182 <_ZN16Interfaces_ClassC1Ev>:
#include "Interfaces_Class.h"
#include "CDC_Class.h"
#include "States_Class.h"

// default constructor
Interfaces_Class::Interfaces_Class()
    1182:	b480      	push	{r7}
    1184:	b083      	sub	sp, #12
    1186:	af00      	add	r7, sp, #0
    1188:	6078      	str	r0, [r7, #4]
{
} //Interfaces_Class
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	4618      	mov	r0, r3
    118e:	370c      	adds	r7, #12
    1190:	46bd      	mov	sp, r7
    1192:	bc80      	pop	{r7}
    1194:	4770      	bx	lr

00001196 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1196:	b480      	push	{r7}
    1198:	b083      	sub	sp, #12
    119a:	af00      	add	r7, sp, #0
    119c:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	4618      	mov	r0, r3
    11a2:	370c      	adds	r7, #12
    11a4:	46bd      	mov	sp, r7
    11a6:	bc80      	pop	{r7}
    11a8:	4770      	bx	lr
	...

000011ac <_ZN16Interfaces_Class18CheckCommunicationEv>:

uint32_t Interfaces_Class::CheckCommunication(void)
{
    11ac:	b590      	push	{r4, r7, lr}
    11ae:	b089      	sub	sp, #36	; 0x24
    11b0:	af00      	add	r7, sp, #0
    11b2:	6078      	str	r0, [r7, #4]
	uint32_t	r;

	
	if (usb.terminalStarted)
    11b4:	4b11      	ldr	r3, [pc, #68]	; (11fc <_ZN16Interfaces_Class18CheckCommunicationEv+0x50>)
    11b6:	7c5b      	ldrb	r3, [r3, #17]
    11b8:	b2db      	uxtb	r3, r3
    11ba:	2b00      	cmp	r3, #0
    11bc:	d003      	beq.n	11c6 <_ZN16Interfaces_Class18CheckCommunicationEv+0x1a>
	{
		
		hvac.PrintState();	
    11be:	4810      	ldr	r0, [pc, #64]	; (1200 <_ZN16Interfaces_Class18CheckCommunicationEv+0x54>)
    11c0:	4b10      	ldr	r3, [pc, #64]	; (1204 <_ZN16Interfaces_Class18CheckCommunicationEv+0x58>)
    11c2:	4798      	blx	r3
    11c4:	e014      	b.n	11f0 <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>
	}else{
		event	e(kCommunicationEventClass,kInterfaceAvailable);
    11c6:	f107 031c 	add.w	r3, r7, #28
    11ca:	2100      	movs	r1, #0
    11cc:	4618      	mov	r0, r3
    11ce:	4b0e      	ldr	r3, [pc, #56]	; (1208 <_ZN16Interfaces_Class18CheckCommunicationEv+0x5c>)
    11d0:	4798      	blx	r3
    11d2:	f107 031c 	add.w	r3, r7, #28
    11d6:	f107 000c 	add.w	r0, r7, #12
    11da:	220c      	movs	r2, #12
    11dc:	f44f 4110 	mov.w	r1, #36864	; 0x9000
    11e0:	4c0a      	ldr	r4, [pc, #40]	; (120c <_ZN16Interfaces_Class18CheckCommunicationEv+0x60>)
    11e2:	47a0      	blx	r4
		listener.SendEventSelf(e);
    11e4:	f107 030c 	add.w	r3, r7, #12
    11e8:	4619      	mov	r1, r3
    11ea:	4809      	ldr	r0, [pc, #36]	; (1210 <_ZN16Interfaces_Class18CheckCommunicationEv+0x64>)
    11ec:	4b09      	ldr	r3, [pc, #36]	; (1214 <_ZN16Interfaces_Class18CheckCommunicationEv+0x68>)
    11ee:	4798      	blx	r3
		
	}
	
	return	0;
    11f0:	2300      	movs	r3, #0
}
    11f2:	4618      	mov	r0, r3
    11f4:	3724      	adds	r7, #36	; 0x24
    11f6:	46bd      	mov	sp, r7
    11f8:	bd90      	pop	{r4, r7, pc}
    11fa:	bf00      	nop
    11fc:	20004e74 	.word	0x20004e74
    1200:	20002d44 	.word	0x20002d44
    1204:	00000a55 	.word	0x00000a55
    1208:	00001129 	.word	0x00001129
    120c:	00001145 	.word	0x00001145
    1210:	20004a90 	.word	0x20004a90
    1214:	00011879 	.word	0x00011879

00001218 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:

uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1218:	b480      	push	{r7}
    121a:	b085      	sub	sp, #20
    121c:	af00      	add	r7, sp, #0
    121e:	6078      	str	r0, [r7, #4]
    1220:	6039      	str	r1, [r7, #0]
	s=status;
    1222:	683a      	ldr	r2, [r7, #0]
    1224:	687b      	ldr	r3, [r7, #4]
    1226:	337c      	adds	r3, #124	; 0x7c
    1228:	e893 0003 	ldmia.w	r3, {r0, r1}
    122c:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    1230:	683b      	ldr	r3, [r7, #0]
    1232:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1234:	2300      	movs	r3, #0
    1236:	60bb      	str	r3, [r7, #8]
    1238:	68bb      	ldr	r3, [r7, #8]
    123a:	2b03      	cmp	r3, #3
    123c:	d812      	bhi.n	1264 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	685a      	ldr	r2, [r3, #4]
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	681b      	ldr	r3, [r3, #0]
    1246:	2001      	movs	r0, #1
    1248:	68b9      	ldr	r1, [r7, #8]
    124a:	fa00 f101 	lsl.w	r1, r0, r1
    124e:	400b      	ands	r3, r1
    1250:	441a      	add	r2, r3
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	605a      	str	r2, [r3, #4]
		p++;
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	3304      	adds	r3, #4
    125a:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    125c:	68bb      	ldr	r3, [r7, #8]
    125e:	3301      	adds	r3, #1
    1260:	60bb      	str	r3, [r7, #8]
    1262:	e7e9      	b.n	1238 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
    126a:	4618      	mov	r0, r3
    126c:	3714      	adds	r7, #20
    126e:	46bd      	mov	sp, r7
    1270:	bc80      	pop	{r7}
    1272:	4770      	bx	lr

00001274 <_Z41__static_initialization_and_destruction_0ii>:

    1274:	b580      	push	{r7, lr}
    1276:	b082      	sub	sp, #8
    1278:	af00      	add	r7, sp, #0
    127a:	6078      	str	r0, [r7, #4]
    127c:	6039      	str	r1, [r7, #0]
    127e:	687b      	ldr	r3, [r7, #4]
    1280:	2b01      	cmp	r3, #1
    1282:	d10c      	bne.n	129e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1284:	683b      	ldr	r3, [r7, #0]
    1286:	f64f 72ff 	movw	r2, #65535	; 0xffff
    128a:	4293      	cmp	r3, r2
    128c:	d107      	bne.n	129e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    128e:	4806      	ldr	r0, [pc, #24]	; (12a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1290:	4b06      	ldr	r3, [pc, #24]	; (12ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1292:	4798      	blx	r3
    1294:	4a06      	ldr	r2, [pc, #24]	; (12b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1296:	4907      	ldr	r1, [pc, #28]	; (12b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    129a:	4b07      	ldr	r3, [pc, #28]	; (12b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    129c:	4798      	blx	r3
    129e:	bf00      	nop
    12a0:	3708      	adds	r7, #8
    12a2:	46bd      	mov	sp, r7
    12a4:	bd80      	pop	{r7, pc}
    12a6:	bf00      	nop
    12a8:	200011b4 	.word	0x200011b4
    12ac:	00001183 	.word	0x00001183
    12b0:	20000000 	.word	0x20000000
    12b4:	00001197 	.word	0x00001197
    12b8:	00014579 	.word	0x00014579

000012bc <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    12bc:	b580      	push	{r7, lr}
    12be:	af00      	add	r7, sp, #0
    12c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    12c4:	2001      	movs	r0, #1
    12c6:	4b01      	ldr	r3, [pc, #4]	; (12cc <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    12c8:	4798      	blx	r3
    12ca:	bd80      	pop	{r7, pc}
    12cc:	00001275 	.word	0x00001275

000012d0 <main>:
		
	}
}

int main(void)
{
    12d0:	b580      	push	{r7, lr}
    12d2:	b082      	sub	sp, #8
    12d4:	af00      	add	r7, sp, #0
	atmel_start_init();
    12d6:	4b3e      	ldr	r3, [pc, #248]	; (13d0 <main+0x100>)
    12d8:	4798      	blx	r3
	
	usb.Init();
    12da:	483e      	ldr	r0, [pc, #248]	; (13d4 <main+0x104>)
    12dc:	4b3e      	ldr	r3, [pc, #248]	; (13d8 <main+0x108>)
    12de:	4798      	blx	r3
	delay_ms(100);
    12e0:	2064      	movs	r0, #100	; 0x64
    12e2:	4b3e      	ldr	r3, [pc, #248]	; (13dc <main+0x10c>)
    12e4:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    12e6:	493e      	ldr	r1, [pc, #248]	; (13e0 <main+0x110>)
    12e8:	483a      	ldr	r0, [pc, #232]	; (13d4 <main+0x104>)
    12ea:	4b3e      	ldr	r3, [pc, #248]	; (13e4 <main+0x114>)
    12ec:	4798      	blx	r3
    12ee:	4603      	mov	r3, r0
    12f0:	493b      	ldr	r1, [pc, #236]	; (13e0 <main+0x110>)
    12f2:	4618      	mov	r0, r3
    12f4:	4b3b      	ldr	r3, [pc, #236]	; (13e4 <main+0x114>)
    12f6:	4798      	blx	r3
    12f8:	4603      	mov	r3, r0
    12fa:	493b      	ldr	r1, [pc, #236]	; (13e8 <main+0x118>)
    12fc:	4618      	mov	r0, r3
    12fe:	4b3b      	ldr	r3, [pc, #236]	; (13ec <main+0x11c>)
    1300:	4798      	blx	r3
    1302:	4603      	mov	r3, r0
    1304:	4936      	ldr	r1, [pc, #216]	; (13e0 <main+0x110>)
    1306:	4618      	mov	r0, r3
    1308:	4b36      	ldr	r3, [pc, #216]	; (13e4 <main+0x114>)
    130a:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    130c:	4938      	ldr	r1, [pc, #224]	; (13f0 <main+0x120>)
    130e:	4831      	ldr	r0, [pc, #196]	; (13d4 <main+0x104>)
    1310:	4b38      	ldr	r3, [pc, #224]	; (13f4 <main+0x124>)
    1312:	4798      	blx	r3
    1314:	4603      	mov	r3, r0
    1316:	4938      	ldr	r1, [pc, #224]	; (13f8 <main+0x128>)
    1318:	4618      	mov	r0, r3
    131a:	4b36      	ldr	r3, [pc, #216]	; (13f4 <main+0x124>)
    131c:	4798      	blx	r3
    131e:	4603      	mov	r3, r0
    1320:	4936      	ldr	r1, [pc, #216]	; (13fc <main+0x12c>)
    1322:	4618      	mov	r0, r3
    1324:	4b36      	ldr	r3, [pc, #216]	; (1400 <main+0x130>)
    1326:	4798      	blx	r3
    1328:	4603      	mov	r3, r0
    132a:	4936      	ldr	r1, [pc, #216]	; (1404 <main+0x134>)
    132c:	4618      	mov	r0, r3
    132e:	4b36      	ldr	r3, [pc, #216]	; (1408 <main+0x138>)
    1330:	4798      	blx	r3
    1332:	4603      	mov	r3, r0
    1334:	492a      	ldr	r1, [pc, #168]	; (13e0 <main+0x110>)
    1336:	4618      	mov	r0, r3
    1338:	4b2a      	ldr	r3, [pc, #168]	; (13e4 <main+0x114>)
    133a:	4798      	blx	r3
    133c:	4603      	mov	r3, r0
    133e:	4928      	ldr	r1, [pc, #160]	; (13e0 <main+0x110>)
    1340:	4618      	mov	r0, r3
    1342:	4b28      	ldr	r3, [pc, #160]	; (13e4 <main+0x114>)
    1344:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    1346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    134a:	4830      	ldr	r0, [pc, #192]	; (140c <main+0x13c>)
    134c:	4b30      	ldr	r3, [pc, #192]	; (1410 <main+0x140>)
    134e:	4798      	blx	r3
	alu.Init();
    1350:	4830      	ldr	r0, [pc, #192]	; (1414 <main+0x144>)
    1352:	4b31      	ldr	r3, [pc, #196]	; (1418 <main+0x148>)
    1354:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    1356:	4931      	ldr	r1, [pc, #196]	; (141c <main+0x14c>)
    1358:	481e      	ldr	r0, [pc, #120]	; (13d4 <main+0x104>)
    135a:	4b31      	ldr	r3, [pc, #196]	; (1420 <main+0x150>)
    135c:	4798      	blx	r3
    135e:	4603      	mov	r3, r0
    1360:	491f      	ldr	r1, [pc, #124]	; (13e0 <main+0x110>)
    1362:	4618      	mov	r0, r3
    1364:	4b1f      	ldr	r3, [pc, #124]	; (13e4 <main+0x114>)
    1366:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    1368:	482a      	ldr	r0, [pc, #168]	; (1414 <main+0x144>)
    136a:	4b2e      	ldr	r3, [pc, #184]	; (1424 <main+0x154>)
    136c:	4798      	blx	r3
    136e:	4603      	mov	r3, r0
    1370:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    1372:	492d      	ldr	r1, [pc, #180]	; (1428 <main+0x158>)
    1374:	4817      	ldr	r0, [pc, #92]	; (13d4 <main+0x104>)
    1376:	4b2d      	ldr	r3, [pc, #180]	; (142c <main+0x15c>)
    1378:	4798      	blx	r3
    137a:	4602      	mov	r2, r0
    137c:	1dfb      	adds	r3, r7, #7
    137e:	4619      	mov	r1, r3
    1380:	4610      	mov	r0, r2
    1382:	4b2b      	ldr	r3, [pc, #172]	; (1430 <main+0x160>)
    1384:	4798      	blx	r3
    1386:	4603      	mov	r3, r0
    1388:	4915      	ldr	r1, [pc, #84]	; (13e0 <main+0x110>)
    138a:	4618      	mov	r0, r3
    138c:	4b15      	ldr	r3, [pc, #84]	; (13e4 <main+0x114>)
    138e:	4798      	blx	r3
	if (!pBIT)
    1390:	4828      	ldr	r0, [pc, #160]	; (1434 <main+0x164>)
    1392:	4b29      	ldr	r3, [pc, #164]	; (1438 <main+0x168>)
    1394:	4798      	blx	r3
    1396:	4603      	mov	r3, r0
    1398:	f083 0301 	eor.w	r3, r3, #1
    139c:	b2db      	uxtb	r3, r3
    139e:	2b00      	cmp	r3, #0
    13a0:	d004      	beq.n	13ac <main+0xdc>
	{
		hvac.Stop();
    13a2:	2100      	movs	r1, #0
    13a4:	4825      	ldr	r0, [pc, #148]	; (143c <main+0x16c>)
    13a6:	4b26      	ldr	r3, [pc, #152]	; (1440 <main+0x170>)
    13a8:	4798      	blx	r3
    13aa:	e003      	b.n	13b4 <main+0xe4>
	} 
	else
	{
		hvac.Start();
    13ac:	2100      	movs	r1, #0
    13ae:	4823      	ldr	r0, [pc, #140]	; (143c <main+0x16c>)
    13b0:	4b24      	ldr	r3, [pc, #144]	; (1444 <main+0x174>)
    13b2:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    13b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    13b8:	4b08      	ldr	r3, [pc, #32]	; (13dc <main+0x10c>)
    13ba:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    13bc:	490a      	ldr	r1, [pc, #40]	; (13e8 <main+0x118>)
    13be:	4805      	ldr	r0, [pc, #20]	; (13d4 <main+0x104>)
    13c0:	4b0a      	ldr	r3, [pc, #40]	; (13ec <main+0x11c>)
    13c2:	4798      	blx	r3
    13c4:	4603      	mov	r3, r0
    13c6:	4906      	ldr	r1, [pc, #24]	; (13e0 <main+0x110>)
    13c8:	4618      	mov	r0, r3
    13ca:	4b06      	ldr	r3, [pc, #24]	; (13e4 <main+0x114>)
    13cc:	4798      	blx	r3
		delay_ms(1000);
    13ce:	e7f1      	b.n	13b4 <main+0xe4>
    13d0:	00002d65 	.word	0x00002d65
    13d4:	20004e74 	.word	0x20004e74
    13d8:	00013841 	.word	0x00013841
    13dc:	00004701 	.word	0x00004701
    13e0:	0001a888 	.word	0x0001a888
    13e4:	0000063d 	.word	0x0000063d
    13e8:	0001a8c0 	.word	0x0001a8c0
    13ec:	00001449 	.word	0x00001449
    13f0:	0001a8e4 	.word	0x0001a8e4
    13f4:	00001469 	.word	0x00001469
    13f8:	0001a8f0 	.word	0x0001a8f0
    13fc:	0001a8fc 	.word	0x0001a8fc
    1400:	00001489 	.word	0x00001489
    1404:	0001a904 	.word	0x0001a904
    1408:	000014a9 	.word	0x000014a9
    140c:	20001238 	.word	0x20001238
    1410:	000015f9 	.word	0x000015f9
    1414:	20000bb4 	.word	0x20000bb4
    1418:	00000321 	.word	0x00000321
    141c:	0001a910 	.word	0x0001a910
    1420:	000014c9 	.word	0x000014c9
    1424:	00000411 	.word	0x00000411
    1428:	0001a928 	.word	0x0001a928
    142c:	000014e9 	.word	0x000014e9
    1430:	00000615 	.word	0x00000615
    1434:	20002d30 	.word	0x20002d30
    1438:	00001c35 	.word	0x00001c35
    143c:	20002d44 	.word	0x20002d44
    1440:	00002ba5 	.word	0x00002ba5
    1444:	00002125 	.word	0x00002125

00001448 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1448:	b580      	push	{r7, lr}
    144a:	b082      	sub	sp, #8
    144c:	af00      	add	r7, sp, #0
    144e:	6078      	str	r0, [r7, #4]
    1450:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1452:	6839      	ldr	r1, [r7, #0]
    1454:	6878      	ldr	r0, [r7, #4]
    1456:	4b03      	ldr	r3, [pc, #12]	; (1464 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    1458:	4798      	blx	r3
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	4618      	mov	r0, r3
    145e:	3708      	adds	r7, #8
    1460:	46bd      	mov	sp, r7
    1462:	bd80      	pop	{r7, pc}
    1464:	00013bd5 	.word	0x00013bd5

00001468 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1468:	b580      	push	{r7, lr}
    146a:	b082      	sub	sp, #8
    146c:	af00      	add	r7, sp, #0
    146e:	6078      	str	r0, [r7, #4]
    1470:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1472:	6839      	ldr	r1, [r7, #0]
    1474:	6878      	ldr	r0, [r7, #4]
    1476:	4b03      	ldr	r3, [pc, #12]	; (1484 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    1478:	4798      	blx	r3
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	4618      	mov	r0, r3
    147e:	3708      	adds	r7, #8
    1480:	46bd      	mov	sp, r7
    1482:	bd80      	pop	{r7, pc}
    1484:	00013bd5 	.word	0x00013bd5

00001488 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1488:	b580      	push	{r7, lr}
    148a:	b082      	sub	sp, #8
    148c:	af00      	add	r7, sp, #0
    148e:	6078      	str	r0, [r7, #4]
    1490:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1492:	6839      	ldr	r1, [r7, #0]
    1494:	6878      	ldr	r0, [r7, #4]
    1496:	4b03      	ldr	r3, [pc, #12]	; (14a4 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    1498:	4798      	blx	r3
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	4618      	mov	r0, r3
    149e:	3708      	adds	r7, #8
    14a0:	46bd      	mov	sp, r7
    14a2:	bd80      	pop	{r7, pc}
    14a4:	00013bd5 	.word	0x00013bd5

000014a8 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14a8:	b580      	push	{r7, lr}
    14aa:	b082      	sub	sp, #8
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
    14b0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14b2:	6839      	ldr	r1, [r7, #0]
    14b4:	6878      	ldr	r0, [r7, #4]
    14b6:	4b03      	ldr	r3, [pc, #12]	; (14c4 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    14b8:	4798      	blx	r3
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	4618      	mov	r0, r3
    14be:	3708      	adds	r7, #8
    14c0:	46bd      	mov	sp, r7
    14c2:	bd80      	pop	{r7, pc}
    14c4:	00013bd5 	.word	0x00013bd5

000014c8 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14c8:	b580      	push	{r7, lr}
    14ca:	b082      	sub	sp, #8
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    14d0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14d2:	6839      	ldr	r1, [r7, #0]
    14d4:	6878      	ldr	r0, [r7, #4]
    14d6:	4b03      	ldr	r3, [pc, #12]	; (14e4 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    14d8:	4798      	blx	r3
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	4618      	mov	r0, r3
    14de:	3708      	adds	r7, #8
    14e0:	46bd      	mov	sp, r7
    14e2:	bd80      	pop	{r7, pc}
    14e4:	00013bd5 	.word	0x00013bd5

000014e8 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14e8:	b580      	push	{r7, lr}
    14ea:	b082      	sub	sp, #8
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
    14f0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14f2:	6839      	ldr	r1, [r7, #0]
    14f4:	6878      	ldr	r0, [r7, #4]
    14f6:	4b03      	ldr	r3, [pc, #12]	; (1504 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    14f8:	4798      	blx	r3
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	4618      	mov	r0, r3
    14fe:	3708      	adds	r7, #8
    1500:	46bd      	mov	sp, r7
    1502:	bd80      	pop	{r7, pc}
    1504:	00013bd5 	.word	0x00013bd5

00001508 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    1508:	b580      	push	{r7, lr}
    150a:	b082      	sub	sp, #8
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	4618      	mov	r0, r3
    1514:	4b03      	ldr	r3, [pc, #12]	; (1524 <_ZN19PersistenceServicesD1Ev+0x1c>)
    1516:	4798      	blx	r3
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	4618      	mov	r0, r3
    151c:	3708      	adds	r7, #8
    151e:	46bd      	mov	sp, r7
    1520:	bd80      	pop	{r7, pc}
    1522:	bf00      	nop
    1524:	00000c71 	.word	0x00000c71

00001528 <_ZN21MemoryManagment_ClassC1Ev>:
#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"
#include "CDC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    1528:	b580      	push	{r7, lr}
    152a:	b082      	sub	sp, #8
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	4618      	mov	r0, r3
    1534:	4b17      	ldr	r3, [pc, #92]	; (1594 <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
    1536:	4798      	blx	r3
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    153e:	4618      	mov	r0, r3
    1540:	4b15      	ldr	r3, [pc, #84]	; (1598 <_ZN21MemoryManagment_ClassC1Ev+0x70>)
    1542:	4798      	blx	r3
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
    154a:	4618      	mov	r0, r3
    154c:	4b13      	ldr	r3, [pc, #76]	; (159c <_ZN21MemoryManagment_ClassC1Ev+0x74>)
    154e:	4798      	blx	r3
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
    1556:	4618      	mov	r0, r3
    1558:	4b11      	ldr	r3, [pc, #68]	; (15a0 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    155a:	4798      	blx	r3
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	f203 7364 	addw	r3, r3, #1892	; 0x764
    1562:	4618      	mov	r0, r3
    1564:	4b0f      	ldr	r3, [pc, #60]	; (15a4 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    1566:	4798      	blx	r3
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	2200      	movs	r2, #0
    156c:	f8c3 2998 	str.w	r2, [r3, #2456]	; 0x998
{
	_currentAddress=0;
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	2200      	movs	r2, #0
    1574:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
	head=512;
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	f44f 7200 	mov.w	r2, #512	; 0x200
    157e:	f8c3 299c 	str.w	r2, [r3, #2460]	; 0x99c
	tail=0;
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	2200      	movs	r2, #0
    1586:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0

	
} //MemoryManagment_Class
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	4618      	mov	r0, r3
    158e:	3708      	adds	r7, #8
    1590:	46bd      	mov	sp, r7
    1592:	bd80      	pop	{r7, pc}
    1594:	00000d45 	.word	0x00000d45
    1598:	00001d09 	.word	0x00001d09
    159c:	00000f9f 	.word	0x00000f9f
    15a0:	000018e5 	.word	0x000018e5
    15a4:	00000da9 	.word	0x00000da9

000015a8 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    15a8:	b580      	push	{r7, lr}
    15aa:	b082      	sub	sp, #8
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
    15b6:	4618      	mov	r0, r3
    15b8:	4b0b      	ldr	r3, [pc, #44]	; (15e8 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    15ba:	4798      	blx	r3
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
    15c2:	4618      	mov	r0, r3
    15c4:	4b09      	ldr	r3, [pc, #36]	; (15ec <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    15c6:	4798      	blx	r3
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    15ce:	4618      	mov	r0, r3
    15d0:	4b07      	ldr	r3, [pc, #28]	; (15f0 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    15d2:	4798      	blx	r3
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	4618      	mov	r0, r3
    15d8:	4b06      	ldr	r3, [pc, #24]	; (15f4 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    15da:	4798      	blx	r3
{
} //~MemoryManagment_Class
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	4618      	mov	r0, r3
    15e0:	3708      	adds	r7, #8
    15e2:	46bd      	mov	sp, r7
    15e4:	bd80      	pop	{r7, pc}
    15e6:	bf00      	nop
    15e8:	000018f9 	.word	0x000018f9
    15ec:	00000fb3 	.word	0x00000fb3
    15f0:	00001509 	.word	0x00001509
    15f4:	00000d75 	.word	0x00000d75

000015f8 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    15f8:	b580      	push	{r7, lr}
    15fa:	b082      	sub	sp, #8
    15fc:	af00      	add	r7, sp, #0
    15fe:	6078      	str	r0, [r7, #4]
    1600:	6039      	str	r1, [r7, #0]
		if (flash.Init())
    1602:	481d      	ldr	r0, [pc, #116]	; (1678 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    1604:	4b1d      	ldr	r3, [pc, #116]	; (167c <_ZN21MemoryManagment_Class4InitEm+0x84>)
    1606:	4798      	blx	r3
    1608:	4603      	mov	r3, r0
    160a:	2b00      	cmp	r3, #0
    160c:	d009      	beq.n	1622 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    160e:	491c      	ldr	r1, [pc, #112]	; (1680 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    1610:	481c      	ldr	r0, [pc, #112]	; (1684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    1612:	4b1d      	ldr	r3, [pc, #116]	; (1688 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    1614:	4798      	blx	r3
    1616:	4603      	mov	r3, r0
    1618:	491c      	ldr	r1, [pc, #112]	; (168c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    161a:	4618      	mov	r0, r3
    161c:	4b1c      	ldr	r3, [pc, #112]	; (1690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    161e:	4798      	blx	r3
    1620:	e008      	b.n	1634 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    1622:	491c      	ldr	r1, [pc, #112]	; (1694 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    1624:	4817      	ldr	r0, [pc, #92]	; (1684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    1626:	4b18      	ldr	r3, [pc, #96]	; (1688 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    1628:	4798      	blx	r3
    162a:	4603      	mov	r3, r0
    162c:	4917      	ldr	r1, [pc, #92]	; (168c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    162e:	4618      	mov	r0, r3
    1630:	4b17      	ldr	r3, [pc, #92]	; (1690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1632:	4798      	blx	r3
		}
		if (eeprom.Init())
    1634:	4818      	ldr	r0, [pc, #96]	; (1698 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    1636:	4b19      	ldr	r3, [pc, #100]	; (169c <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    1638:	4798      	blx	r3
    163a:	4603      	mov	r3, r0
    163c:	2b00      	cmp	r3, #0
    163e:	d009      	beq.n	1654 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    1640:	4917      	ldr	r1, [pc, #92]	; (16a0 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    1642:	4810      	ldr	r0, [pc, #64]	; (1684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    1644:	4b17      	ldr	r3, [pc, #92]	; (16a4 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    1646:	4798      	blx	r3
    1648:	4603      	mov	r3, r0
    164a:	4910      	ldr	r1, [pc, #64]	; (168c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    164c:	4618      	mov	r0, r3
    164e:	4b10      	ldr	r3, [pc, #64]	; (1690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1650:	4798      	blx	r3
    1652:	e008      	b.n	1666 <_ZN21MemoryManagment_Class4InitEm+0x6e>
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    1654:	4914      	ldr	r1, [pc, #80]	; (16a8 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    1656:	480b      	ldr	r0, [pc, #44]	; (1684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    1658:	4b12      	ldr	r3, [pc, #72]	; (16a4 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    165a:	4798      	blx	r3
    165c:	4603      	mov	r3, r0
    165e:	490b      	ldr	r1, [pc, #44]	; (168c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    1660:	4618      	mov	r0, r3
    1662:	4b0b      	ldr	r3, [pc, #44]	; (1690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    1664:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    1666:	6839      	ldr	r1, [r7, #0]
    1668:	6878      	ldr	r0, [r7, #4]
    166a:	4b10      	ldr	r3, [pc, #64]	; (16ac <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    166c:	4798      	blx	r3
}
    166e:	bf00      	nop
    1670:	4618      	mov	r0, r3
    1672:	3708      	adds	r7, #8
    1674:	46bd      	mov	sp, r7
    1676:	bd80      	pop	{r7, pc}
    1678:	20004b08 	.word	0x20004b08
    167c:	000125c5 	.word	0x000125c5
    1680:	0001a938 	.word	0x0001a938
    1684:	20004e74 	.word	0x20004e74
    1688:	00001869 	.word	0x00001869
    168c:	0001a958 	.word	0x0001a958
    1690:	0000063d 	.word	0x0000063d
    1694:	0001a95c 	.word	0x0001a95c
    1698:	20004ab4 	.word	0x20004ab4
    169c:	00011c11 	.word	0x00011c11
    16a0:	0001a97c 	.word	0x0001a97c
    16a4:	0000065d 	.word	0x0000065d
    16a8:	0001a99c 	.word	0x0001a99c
    16ac:	000016dd 	.word	0x000016dd

000016b0 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    16b0:	b580      	push	{r7, lr}
    16b2:	b082      	sub	sp, #8
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	460b      	mov	r3, r1
    16ba:	70fb      	strb	r3, [r7, #3]
    16bc:	4613      	mov	r3, r2
    16be:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    16c0:	78ba      	ldrb	r2, [r7, #2]
    16c2:	78fb      	ldrb	r3, [r7, #3]
    16c4:	4619      	mov	r1, r3
    16c6:	4803      	ldr	r0, [pc, #12]	; (16d4 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    16c8:	4b03      	ldr	r3, [pc, #12]	; (16d8 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    16ca:	4798      	blx	r3
  }
    16cc:	bf00      	nop
    16ce:	3708      	adds	r7, #8
    16d0:	46bd      	mov	sp, r7
    16d2:	bd80      	pop	{r7, pc}
    16d4:	20003a74 	.word	0x20003a74
    16d8:	000113a1 	.word	0x000113a1

000016dc <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    16dc:	b580      	push	{r7, lr}
    16de:	b082      	sub	sp, #8
    16e0:	af00      	add	r7, sp, #0
    16e2:	6078      	str	r0, [r7, #4]
    16e4:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	4618      	mov	r0, r3
    16ea:	4b12      	ldr	r3, [pc, #72]	; (1734 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    16ec:	4798      	blx	r3
    16ee:	4602      	mov	r2, r0
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990


	 if (!logArea.capacity) {
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	f8d3 3990 	ldr.w	r3, [r3, #2448]	; 0x990
    16fc:	2b00      	cmp	r3, #0
    16fe:	d113      	bne.n	1728 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    1700:	683b      	ldr	r3, [r7, #0]
    1702:	2b00      	cmp	r3, #0
    1704:	d009      	beq.n	171a <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	683a      	ldr	r2, [r7, #0]
    170a:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
			 logArea.supported = false;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	2200      	movs	r2, #0
    1712:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
			 return true;
    1716:	2301      	movs	r3, #1
    1718:	e007      	b.n	172a <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    171a:	2200      	movs	r2, #0
    171c:	2103      	movs	r1, #3
    171e:	6878      	ldr	r0, [r7, #4]
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    1722:	4798      	blx	r3
			 return false;
    1724:	2300      	movs	r3, #0
    1726:	e000      	b.n	172a <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    1728:	2301      	movs	r3, #1
 }
    172a:	4618      	mov	r0, r3
    172c:	3708      	adds	r7, #8
    172e:	46bd      	mov	sp, r7
    1730:	bd80      	pop	{r7, pc}
    1732:	bf00      	nop
    1734:	00012745 	.word	0x00012745
    1738:	000016b1 	.word	0x000016b1

0000173c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacDefaultState);
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    173c:	b580      	push	{r7, lr}
    173e:	b084      	sub	sp, #16
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
    1744:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    1746:	687b      	ldr	r3, [r7, #4]
    1748:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
    174c:	6839      	ldr	r1, [r7, #0]
    174e:	4618      	mov	r0, r3
    1750:	4b0f      	ldr	r3, [pc, #60]	; (1790 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x54>)
    1752:	4798      	blx	r3
    1754:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    175c:	227c      	movs	r2, #124	; 0x7c
    175e:	6839      	ldr	r1, [r7, #0]
    1760:	4618      	mov	r0, r3
    1762:	4b0c      	ldr	r3, [pc, #48]	; (1794 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x58>)
    1764:	4798      	blx	r3
    1766:	4602      	mov	r2, r0
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
	w=WriteCRCAppState(crc32);
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	f503 62d5 	add.w	r2, r3, #1704	; 0x6a8
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
    177a:	4619      	mov	r1, r3
    177c:	4610      	mov	r0, r2
    177e:	4b06      	ldr	r3, [pc, #24]	; (1798 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    1780:	4798      	blx	r3
    1782:	60f8      	str	r0, [r7, #12]
	return	w;
    1784:	68fb      	ldr	r3, [r7, #12]
 }
    1786:	4618      	mov	r0, r3
    1788:	3710      	adds	r7, #16
    178a:	46bd      	mov	sp, r7
    178c:	bd80      	pop	{r7, pc}
    178e:	bf00      	nop
    1790:	00001ae1 	.word	0x00001ae1
    1794:	00000ce1 	.word	0x00000ce1
    1798:	00001b49 	.word	0x00001b49

0000179c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    179c:	b580      	push	{r7, lr}
    179e:	b084      	sub	sp, #16
    17a0:	af00      	add	r7, sp, #0
    17a2:	6078      	str	r0, [r7, #4]
    17a4:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacState;
    17a6:	4b0b      	ldr	r3, [pc, #44]	; (17d4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x38>)
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	33cc      	adds	r3, #204	; 0xcc
    17ac:	60fb      	str	r3, [r7, #12]
	 uint32_t	bufferAddres=((uint32_t)&flashBuffer);
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
    17b4:	60bb      	str	r3, [r7, #8]
	 bufferAddres+=add;
    17b6:	68ba      	ldr	r2, [r7, #8]
    17b8:	68fb      	ldr	r3, [r7, #12]
    17ba:	4413      	add	r3, r2
    17bc:	60bb      	str	r3, [r7, #8]
	 memcpy((void*)bufferAddres,&hs,sizeof(HVACState));
    17be:	68bb      	ldr	r3, [r7, #8]
    17c0:	227c      	movs	r2, #124	; 0x7c
    17c2:	6839      	ldr	r1, [r7, #0]
    17c4:	4618      	mov	r0, r3
    17c6:	4b04      	ldr	r3, [pc, #16]	; (17d8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x3c>)
    17c8:	4798      	blx	r3
	 return	bufferAddres;
    17ca:	68bb      	ldr	r3, [r7, #8]
 }
    17cc:	4618      	mov	r0, r3
    17ce:	3710      	adds	r7, #16
    17d0:	46bd      	mov	sp, r7
    17d2:	bd80      	pop	{r7, pc}
    17d4:	20002d2c 	.word	0x20002d2c
    17d8:	00016735 	.word	0x00016735

000017dc <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    17dc:	b580      	push	{r7, lr}
    17de:	b084      	sub	sp, #16
    17e0:	af00      	add	r7, sp, #0
    17e2:	6078      	str	r0, [r7, #4]
    17e4:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    17e6:	6839      	ldr	r1, [r7, #0]
    17e8:	6878      	ldr	r0, [r7, #4]
    17ea:	4b0e      	ldr	r3, [pc, #56]	; (1824 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x48>)
    17ec:	4798      	blx	r3
    17ee:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    17f6:	227c      	movs	r2, #124	; 0x7c
    17f8:	6839      	ldr	r1, [r7, #0]
    17fa:	4618      	mov	r0, r3
    17fc:	4b0a      	ldr	r3, [pc, #40]	; (1828 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x4c>)
    17fe:	4798      	blx	r3
    1800:	4602      	mov	r2, r0
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
	  w=SaveCRCAppState(crc32);
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
    180e:	4619      	mov	r1, r3
    1810:	6878      	ldr	r0, [r7, #4]
    1812:	4b06      	ldr	r3, [pc, #24]	; (182c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    1814:	4798      	blx	r3
    1816:	60f8      	str	r0, [r7, #12]
	  return	w;
    1818:	68fb      	ldr	r3, [r7, #12]
  }
    181a:	4618      	mov	r0, r3
    181c:	3710      	adds	r7, #16
    181e:	46bd      	mov	sp, r7
    1820:	bd80      	pop	{r7, pc}
    1822:	bf00      	nop
    1824:	0000179d 	.word	0x0000179d
    1828:	00000ce1 	.word	0x00000ce1
    182c:	00001831 	.word	0x00001831

00001830 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    1830:	b480      	push	{r7}
    1832:	b085      	sub	sp, #20
    1834:	af00      	add	r7, sp, #0
    1836:	6078      	str	r0, [r7, #4]
    1838:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    183a:	4b0a      	ldr	r3, [pc, #40]	; (1864 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x34>)
    183c:	681b      	ldr	r3, [r3, #0]
    183e:	33cc      	adds	r3, #204	; 0xcc
    1840:	60fb      	str	r3, [r7, #12]
	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
    1848:	461a      	mov	r2, r3
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	4413      	add	r3, r2
    184e:	60bb      	str	r3, [r7, #8]
	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
    1850:	68bb      	ldr	r3, [r7, #8]
    1852:	683a      	ldr	r2, [r7, #0]
    1854:	601a      	str	r2, [r3, #0]
	return	bufferAddres;
    1856:	68bb      	ldr	r3, [r7, #8]
}
    1858:	4618      	mov	r0, r3
    185a:	3714      	adds	r7, #20
    185c:	46bd      	mov	sp, r7
    185e:	bc80      	pop	{r7}
    1860:	4770      	bx	lr
    1862:	bf00      	nop
    1864:	20002d2c 	.word	0x20002d2c

00001868 <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1868:	b580      	push	{r7, lr}
    186a:	b082      	sub	sp, #8
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
    1870:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1872:	6839      	ldr	r1, [r7, #0]
    1874:	6878      	ldr	r0, [r7, #4]
    1876:	4b03      	ldr	r3, [pc, #12]	; (1884 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    1878:	4798      	blx	r3
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	4618      	mov	r0, r3
    187e:	3708      	adds	r7, #8
    1880:	46bd      	mov	sp, r7
    1882:	bd80      	pop	{r7, pc}
    1884:	00013bd5 	.word	0x00013bd5

00001888 <_Z41__static_initialization_and_destruction_0ii>:
 
    1888:	b580      	push	{r7, lr}
    188a:	b082      	sub	sp, #8
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
    1890:	6039      	str	r1, [r7, #0]
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	2b01      	cmp	r3, #1
    1896:	d10c      	bne.n	18b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1898:	683b      	ldr	r3, [r7, #0]
    189a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    189e:	4293      	cmp	r3, r2
    18a0:	d107      	bne.n	18b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    18a2:	4806      	ldr	r0, [pc, #24]	; (18bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    18a6:	4798      	blx	r3
    18a8:	4a06      	ldr	r2, [pc, #24]	; (18c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    18aa:	4907      	ldr	r1, [pc, #28]	; (18c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    18ac:	4803      	ldr	r0, [pc, #12]	; (18bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    18b0:	4798      	blx	r3
    18b2:	bf00      	nop
    18b4:	3708      	adds	r7, #8
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop
    18bc:	20001238 	.word	0x20001238
    18c0:	00001529 	.word	0x00001529
    18c4:	20000000 	.word	0x20000000
    18c8:	000015a9 	.word	0x000015a9
    18cc:	00014579 	.word	0x00014579

000018d0 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    18d0:	b580      	push	{r7, lr}
    18d2:	af00      	add	r7, sp, #0
    18d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    18d8:	2001      	movs	r0, #1
    18da:	4b01      	ldr	r3, [pc, #4]	; (18e0 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    18dc:	4798      	blx	r3
    18de:	bd80      	pop	{r7, pc}
    18e0:	00001889 	.word	0x00001889

000018e4 <_ZN18MemoryStruct_ClassC1Ev>:
#include "MemoryManagment_Class.h"

MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
    18e4:	b480      	push	{r7}
    18e6:	b083      	sub	sp, #12
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	4618      	mov	r0, r3
    18f0:	370c      	adds	r7, #12
    18f2:	46bd      	mov	sp, r7
    18f4:	bc80      	pop	{r7}
    18f6:	4770      	bx	lr

000018f8 <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
    18f8:	b480      	push	{r7}
    18fa:	b083      	sub	sp, #12
    18fc:	af00      	add	r7, sp, #0
    18fe:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	4618      	mov	r0, r3
    1904:	370c      	adds	r7, #12
    1906:	46bd      	mov	sp, r7
    1908:	bc80      	pop	{r7}
    190a:	4770      	bx	lr

0000190c <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	MemoryStruct_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    190c:	b580      	push	{r7, lr}
    190e:	b084      	sub	sp, #16
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
    1914:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1916:	4b07      	ldr	r3, [pc, #28]	; (1934 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x28>)
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	3310      	adds	r3, #16
    191c:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    191e:	68fa      	ldr	r2, [r7, #12]
    1920:	6839      	ldr	r1, [r7, #0]
    1922:	6878      	ldr	r0, [r7, #4]
    1924:	4b04      	ldr	r3, [pc, #16]	; (1938 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    1926:	4798      	blx	r3
    1928:	60b8      	str	r0, [r7, #8]
	return	r;
    192a:	68bb      	ldr	r3, [r7, #8]
}
    192c:	4618      	mov	r0, r3
    192e:	3710      	adds	r7, #16
    1930:	46bd      	mov	sp, r7
    1932:	bd80      	pop	{r7, pc}
    1934:	20002d2c 	.word	0x20002d2c
    1938:	0000199d 	.word	0x0000199d

0000193c <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadLastConfigurationData(ConfigurationData& cd){
    193c:	b580      	push	{r7, lr}
    193e:	b084      	sub	sp, #16
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
    1944:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
    1946:	4b07      	ldr	r3, [pc, #28]	; (1964 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x28>)
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	3310      	adds	r3, #16
    194c:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    194e:	68fa      	ldr	r2, [r7, #12]
    1950:	6839      	ldr	r1, [r7, #0]
    1952:	6878      	ldr	r0, [r7, #4]
    1954:	4b04      	ldr	r3, [pc, #16]	; (1968 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    1956:	4798      	blx	r3
    1958:	60b8      	str	r0, [r7, #8]
	return	r;
    195a:	68bb      	ldr	r3, [r7, #8]
}
    195c:	4618      	mov	r0, r3
    195e:	3710      	adds	r7, #16
    1960:	46bd      	mov	sp, r7
    1962:	bd80      	pop	{r7, pc}
    1964:	20002d2c 	.word	0x20002d2c
    1968:	0000199d 	.word	0x0000199d

0000196c <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    196c:	b580      	push	{r7, lr}
    196e:	b084      	sub	sp, #16
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
    1974:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
    1976:	4b07      	ldr	r3, [pc, #28]	; (1994 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x28>)
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	3310      	adds	r3, #16
    197c:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    197e:	68fa      	ldr	r2, [r7, #12]
    1980:	6839      	ldr	r1, [r7, #0]
    1982:	6878      	ldr	r0, [r7, #4]
    1984:	4b04      	ldr	r3, [pc, #16]	; (1998 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    1986:	4798      	blx	r3
    1988:	60b8      	str	r0, [r7, #8]
	return	r;
    198a:	68bb      	ldr	r3, [r7, #8]
}
    198c:	4618      	mov	r0, r3
    198e:	3710      	adds	r7, #16
    1990:	46bd      	mov	sp, r7
    1992:	bd80      	pop	{r7, pc}
    1994:	20002d2c 	.word	0x20002d2c
    1998:	0000199d 	.word	0x0000199d

0000199c <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	MemoryStruct_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    199c:	b590      	push	{r4, r7, lr}
    199e:	b087      	sub	sp, #28
    19a0:	af00      	add	r7, sp, #0
    19a2:	60f8      	str	r0, [r7, #12]
    19a4:	60b9      	str	r1, [r7, #8]
    19a6:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    19a8:	68ba      	ldr	r2, [r7, #8]
    19aa:	68fb      	ldr	r3, [r7, #12]
    19ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    19b6:	23ac      	movs	r3, #172	; 0xac
    19b8:	687a      	ldr	r2, [r7, #4]
    19ba:	4804      	ldr	r0, [pc, #16]	; (19cc <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    19bc:	4c04      	ldr	r4, [pc, #16]	; (19d0 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    19be:	47a0      	blx	r4
    19c0:	6178      	str	r0, [r7, #20]
	return	r;
    19c2:	697b      	ldr	r3, [r7, #20]
}
    19c4:	4618      	mov	r0, r3
    19c6:	371c      	adds	r7, #28
    19c8:	46bd      	mov	sp, r7
    19ca:	bd90      	pop	{r4, r7, pc}
    19cc:	20004b08 	.word	0x20004b08
    19d0:	00012695 	.word	0x00012695

000019d4 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv>:

uint32_t	MemoryStruct_Class::ReadCRCConfigurationData(void){
    19d4:	b590      	push	{r4, r7, lr}
    19d6:	b087      	sub	sp, #28
    19d8:	af00      	add	r7, sp, #0
    19da:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    19dc:	4b08      	ldr	r3, [pc, #32]	; (1a00 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x2c>)
    19de:	681b      	ldr	r3, [r3, #0]
    19e0:	3310      	adds	r3, #16
    19e2:	617b      	str	r3, [r7, #20]
	uint32_t	r=flash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    19e4:	f107 010c 	add.w	r1, r7, #12
    19e8:	2304      	movs	r3, #4
    19ea:	697a      	ldr	r2, [r7, #20]
    19ec:	4805      	ldr	r0, [pc, #20]	; (1a04 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x30>)
    19ee:	4c06      	ldr	r4, [pc, #24]	; (1a08 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x34>)
    19f0:	47a0      	blx	r4
    19f2:	6138      	str	r0, [r7, #16]
	return	crc;
    19f4:	68fb      	ldr	r3, [r7, #12]
}
    19f6:	4618      	mov	r0, r3
    19f8:	371c      	adds	r7, #28
    19fa:	46bd      	mov	sp, r7
    19fc:	bd90      	pop	{r4, r7, pc}
    19fe:	bf00      	nop
    1a00:	20002d2c 	.word	0x20002d2c
    1a04:	20004b08 	.word	0x20004b08
    1a08:	00012695 	.word	0x00012695

00001a0c <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	MemoryStruct_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    1a0c:	b590      	push	{r4, r7, lr}
    1a0e:	b087      	sub	sp, #28
    1a10:	af00      	add	r7, sp, #0
    1a12:	60f8      	str	r0, [r7, #12]
    1a14:	60b9      	str	r1, [r7, #8]
    1a16:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1a18:	68ba      	ldr	r2, [r7, #8]
    1a1a:	68fb      	ldr	r3, [r7, #12]
    1a1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=flash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    1a20:	68fb      	ldr	r3, [r7, #12]
    1a22:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    1a26:	23ac      	movs	r3, #172	; 0xac
    1a28:	687a      	ldr	r2, [r7, #4]
    1a2a:	4804      	ldr	r0, [pc, #16]	; (1a3c <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    1a2c:	4c04      	ldr	r4, [pc, #16]	; (1a40 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    1a2e:	47a0      	blx	r4
    1a30:	6178      	str	r0, [r7, #20]
	return	w;
    1a32:	697b      	ldr	r3, [r7, #20]
}
    1a34:	4618      	mov	r0, r3
    1a36:	371c      	adds	r7, #28
    1a38:	46bd      	mov	sp, r7
    1a3a:	bd90      	pop	{r4, r7, pc}
    1a3c:	20004b08 	.word	0x20004b08
    1a40:	00012661 	.word	0x00012661

00001a44 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	MemoryStruct_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    1a44:	b590      	push	{r4, r7, lr}
    1a46:	b087      	sub	sp, #28
    1a48:	af00      	add	r7, sp, #0
    1a4a:	60f8      	str	r0, [r7, #12]
    1a4c:	60b9      	str	r1, [r7, #8]
    1a4e:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1a50:	68ba      	ldr	r2, [r7, #8]
    1a52:	68fb      	ldr	r3, [r7, #12]
    1a54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=flash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    1a58:	68fb      	ldr	r3, [r7, #12]
    1a5a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1a5e:	237c      	movs	r3, #124	; 0x7c
    1a60:	687a      	ldr	r2, [r7, #4]
    1a62:	4804      	ldr	r0, [pc, #16]	; (1a74 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x30>)
    1a64:	4c04      	ldr	r4, [pc, #16]	; (1a78 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x34>)
    1a66:	47a0      	blx	r4
    1a68:	6178      	str	r0, [r7, #20]
	return	w;
    1a6a:	697b      	ldr	r3, [r7, #20]
}
    1a6c:	4618      	mov	r0, r3
    1a6e:	371c      	adds	r7, #28
    1a70:	46bd      	mov	sp, r7
    1a72:	bd90      	pop	{r4, r7, pc}
    1a74:	20004b08 	.word	0x20004b08
    1a78:	00012661 	.word	0x00012661

00001a7c <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData>:
uint32_t	MemoryStruct_Class::WriteDefaultConfiguration(ConfigurationData& cd){
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b084      	sub	sp, #16
    1a80:	af00      	add	r7, sp, #0
    1a82:	6078      	str	r0, [r7, #4]
    1a84:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1a86:	4b07      	ldr	r3, [pc, #28]	; (1aa4 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x28>)
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	3310      	adds	r3, #16
    1a8c:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteConfigurationData(cd,add);
    1a8e:	68fa      	ldr	r2, [r7, #12]
    1a90:	6839      	ldr	r1, [r7, #0]
    1a92:	6878      	ldr	r0, [r7, #4]
    1a94:	4b04      	ldr	r3, [pc, #16]	; (1aa8 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x2c>)
    1a96:	4798      	blx	r3
    1a98:	60b8      	str	r0, [r7, #8]
	return	w;
    1a9a:	68bb      	ldr	r3, [r7, #8]
}
    1a9c:	4618      	mov	r0, r3
    1a9e:	3710      	adds	r7, #16
    1aa0:	46bd      	mov	sp, r7
    1aa2:	bd80      	pop	{r7, pc}
    1aa4:	20002d2c 	.word	0x20002d2c
    1aa8:	00001a0d 	.word	0x00001a0d

00001aac <_ZN18MemoryStruct_Class17WriteDefaultStateEv>:
uint32_t	MemoryStruct_Class::WriteDefaultState(void){
    1aac:	b580      	push	{r7, lr}
    1aae:	b084      	sub	sp, #16
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&flashMap->hvacDefaultState;
    1ab4:	4b07      	ldr	r3, [pc, #28]	; (1ad4 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x28>)
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	33cc      	adds	r3, #204	; 0xcc
    1aba:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hvac.defaultState,add);
    1abc:	68fa      	ldr	r2, [r7, #12]
    1abe:	4906      	ldr	r1, [pc, #24]	; (1ad8 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x2c>)
    1ac0:	6878      	ldr	r0, [r7, #4]
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x30>)
    1ac4:	4798      	blx	r3
    1ac6:	60b8      	str	r0, [r7, #8]
	return	w;
    1ac8:	68bb      	ldr	r3, [r7, #8]
}
    1aca:	4618      	mov	r0, r3
    1acc:	3710      	adds	r7, #16
    1ace:	46bd      	mov	sp, r7
    1ad0:	bd80      	pop	{r7, pc}
    1ad2:	bf00      	nop
    1ad4:	20002d2c 	.word	0x20002d2c
    1ad8:	20002d48 	.word	0x20002d48
    1adc:	00001a45 	.word	0x00001a45

00001ae0 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState>:

uint32_t	MemoryStruct_Class::WriteCurrentState(HVACState& hs){
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b084      	sub	sp, #16
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
    1ae8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacState;
    1aea:	4b07      	ldr	r3, [pc, #28]	; (1b08 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x28>)
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	33cc      	adds	r3, #204	; 0xcc
    1af0:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    1af2:	68fa      	ldr	r2, [r7, #12]
    1af4:	6839      	ldr	r1, [r7, #0]
    1af6:	6878      	ldr	r0, [r7, #4]
    1af8:	4b04      	ldr	r3, [pc, #16]	; (1b0c <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x2c>)
    1afa:	4798      	blx	r3
    1afc:	60b8      	str	r0, [r7, #8]
	return	w;
    1afe:	68bb      	ldr	r3, [r7, #8]
}
    1b00:	4618      	mov	r0, r3
    1b02:	3710      	adds	r7, #16
    1b04:	46bd      	mov	sp, r7
    1b06:	bd80      	pop	{r7, pc}
    1b08:	20002d2c 	.word	0x20002d2c
    1b0c:	00001a45 	.word	0x00001a45

00001b10 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm>:

uint32_t	MemoryStruct_Class::WriteCRCConfigurationData(uint32_t crc){
    1b10:	b590      	push	{r4, r7, lr}
    1b12:	b085      	sub	sp, #20
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1b1a:	4b08      	ldr	r3, [pc, #32]	; (1b3c <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x2c>)
    1b1c:	681b      	ldr	r3, [r3, #0]
    1b1e:	3310      	adds	r3, #16
    1b20:	60fb      	str	r3, [r7, #12]
	uint32_t	w=flash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1b22:	4639      	mov	r1, r7
    1b24:	2304      	movs	r3, #4
    1b26:	68fa      	ldr	r2, [r7, #12]
    1b28:	4805      	ldr	r0, [pc, #20]	; (1b40 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x30>)
    1b2a:	4c06      	ldr	r4, [pc, #24]	; (1b44 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x34>)
    1b2c:	47a0      	blx	r4
    1b2e:	60b8      	str	r0, [r7, #8]
	return	w;
    1b30:	68bb      	ldr	r3, [r7, #8]
}
    1b32:	4618      	mov	r0, r3
    1b34:	3714      	adds	r7, #20
    1b36:	46bd      	mov	sp, r7
    1b38:	bd90      	pop	{r4, r7, pc}
    1b3a:	bf00      	nop
    1b3c:	20002d2c 	.word	0x20002d2c
    1b40:	20004b08 	.word	0x20004b08
    1b44:	00012661 	.word	0x00012661

00001b48 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm>:
uint32_t	MemoryStruct_Class::WriteCRCAppState(uint32_t crc){
    1b48:	b590      	push	{r4, r7, lr}
    1b4a:	b085      	sub	sp, #20
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
    1b50:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    1b52:	4b08      	ldr	r3, [pc, #32]	; (1b74 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x2c>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	33cc      	adds	r3, #204	; 0xcc
    1b58:	60fb      	str	r3, [r7, #12]
	uint32_t	w=flash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1b5a:	4639      	mov	r1, r7
    1b5c:	2304      	movs	r3, #4
    1b5e:	68fa      	ldr	r2, [r7, #12]
    1b60:	4805      	ldr	r0, [pc, #20]	; (1b78 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x30>)
    1b62:	4c06      	ldr	r4, [pc, #24]	; (1b7c <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x34>)
    1b64:	47a0      	blx	r4
    1b66:	60b8      	str	r0, [r7, #8]
	return	w;
    1b68:	68bb      	ldr	r3, [r7, #8]
}
    1b6a:	4618      	mov	r0, r3
    1b6c:	3714      	adds	r7, #20
    1b6e:	46bd      	mov	sp, r7
    1b70:	bd90      	pop	{r4, r7, pc}
    1b72:	bf00      	nop
    1b74:	20002d2c 	.word	0x20002d2c
    1b78:	20004b08 	.word	0x20004b08
    1b7c:	00012661 	.word	0x00012661

00001b80 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState>:
uint32_t	MemoryStruct_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	MemoryStruct_Class::ReadApplicationState(HVACState& as){
    1b80:	b590      	push	{r4, r7, lr}
    1b82:	b085      	sub	sp, #20
    1b84:	af00      	add	r7, sp, #0
    1b86:	6078      	str	r0, [r7, #4]
    1b88:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacState;
    1b8a:	4b0d      	ldr	r3, [pc, #52]	; (1bc0 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x40>)
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	33cc      	adds	r3, #204	; 0xcc
    1b90:	461a      	mov	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    1b98:	683a      	ldr	r2, [r7, #0]
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=flash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1bac:	237c      	movs	r3, #124	; 0x7c
    1bae:	4805      	ldr	r0, [pc, #20]	; (1bc4 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x44>)
    1bb0:	4c05      	ldr	r4, [pc, #20]	; (1bc8 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x48>)
    1bb2:	47a0      	blx	r4
    1bb4:	60f8      	str	r0, [r7, #12]
	return	r;
    1bb6:	68fb      	ldr	r3, [r7, #12]
}
    1bb8:	4618      	mov	r0, r3
    1bba:	3714      	adds	r7, #20
    1bbc:	46bd      	mov	sp, r7
    1bbe:	bd90      	pop	{r4, r7, pc}
    1bc0:	20002d2c 	.word	0x20002d2c
    1bc4:	20004b08 	.word	0x20004b08
    1bc8:	00012695 	.word	0x00012695

00001bcc <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv>:
uint32_t	MemoryStruct_Class::ReadCRCApplicationState(void){
    1bcc:	b590      	push	{r4, r7, lr}
    1bce:	b085      	sub	sp, #20
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->crcAppState;
    1bd4:	4b0a      	ldr	r3, [pc, #40]	; (1c00 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x34>)
    1bd6:	681b      	ldr	r3, [r3, #0]
    1bd8:	33cc      	adds	r3, #204	; 0xcc
    1bda:	461a      	mov	r2, r3
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=flash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1be8:	f107 0108 	add.w	r1, r7, #8
    1bec:	2304      	movs	r3, #4
    1bee:	4805      	ldr	r0, [pc, #20]	; (1c04 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x38>)
    1bf0:	4c05      	ldr	r4, [pc, #20]	; (1c08 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x3c>)
    1bf2:	47a0      	blx	r4
    1bf4:	60f8      	str	r0, [r7, #12]
	return	crc;
    1bf6:	68bb      	ldr	r3, [r7, #8]
    1bf8:	4618      	mov	r0, r3
    1bfa:	3714      	adds	r7, #20
    1bfc:	46bd      	mov	sp, r7
    1bfe:	bd90      	pop	{r4, r7, pc}
    1c00:	20002d2c 	.word	0x20002d2c
    1c04:	20004b08 	.word	0x20004b08
    1c08:	00012695 	.word	0x00012695

00001c0c <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    1c0c:	b480      	push	{r7}
    1c0e:	b083      	sub	sp, #12
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	4618      	mov	r0, r3
    1c18:	370c      	adds	r7, #12
    1c1a:	46bd      	mov	sp, r7
    1c1c:	bc80      	pop	{r7}
    1c1e:	4770      	bx	lr

00001c20 <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	4618      	mov	r0, r3
    1c2c:	370c      	adds	r7, #12
    1c2e:	46bd      	mov	sp, r7
    1c30:	bc80      	pop	{r7}
    1c32:	4770      	bx	lr

00001c34 <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    1c34:	b480      	push	{r7}
    1c36:	b083      	sub	sp, #12
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
	return	isOK;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	b2db      	uxtb	r3, r3
}
    1c42:	4618      	mov	r0, r3
    1c44:	370c      	adds	r7, #12
    1c46:	46bd      	mov	sp, r7
    1c48:	bc80      	pop	{r7}
    1c4a:	4770      	bx	lr

00001c4c <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    1c4c:	b580      	push	{r7, lr}
    1c4e:	b086      	sub	sp, #24
    1c50:	af00      	add	r7, sp, #0
    1c52:	6078      	str	r0, [r7, #4]
    1c54:	6039      	str	r1, [r7, #0]
	communicator.GetStatus(cs);
    1c56:	6839      	ldr	r1, [r7, #0]
    1c58:	4812      	ldr	r0, [pc, #72]	; (1ca4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    1c5a:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    1c5c:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    1c5e:	683b      	ldr	r3, [r7, #0]
    1c60:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    1c62:	693b      	ldr	r3, [r7, #16]
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    1c68:	2300      	movs	r3, #0
    1c6a:	617b      	str	r3, [r7, #20]
    1c6c:	697b      	ldr	r3, [r7, #20]
    1c6e:	2b1f      	cmp	r3, #31
    1c70:	dc0d      	bgt.n	1c8e <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    1c72:	2201      	movs	r2, #1
    1c74:	697b      	ldr	r3, [r7, #20]
    1c76:	fa02 f303 	lsl.w	r3, r2, r3
    1c7a:	461a      	mov	r2, r3
    1c7c:	68fb      	ldr	r3, [r7, #12]
    1c7e:	401a      	ands	r2, r3
    1c80:	68fb      	ldr	r3, [r7, #12]
    1c82:	4413      	add	r3, r2
    1c84:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    1c86:	697b      	ldr	r3, [r7, #20]
    1c88:	3301      	adds	r3, #1
    1c8a:	617b      	str	r3, [r7, #20]
    1c8c:	e7ee      	b.n	1c6c <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    1c8e:	68fb      	ldr	r3, [r7, #12]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d102      	bne.n	1c9a <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	2201      	movs	r2, #1
    1c98:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    1c9a:	68fb      	ldr	r3, [r7, #12]
}
    1c9c:	4618      	mov	r0, r3
    1c9e:	3718      	adds	r7, #24
    1ca0:	46bd      	mov	sp, r7
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	200011b4 	.word	0x200011b4
    1ca8:	00001219 	.word	0x00001219

00001cac <_Z41__static_initialization_and_destruction_0ii>:

    1cac:	b580      	push	{r7, lr}
    1cae:	b082      	sub	sp, #8
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
    1cb4:	6039      	str	r1, [r7, #0]
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	2b01      	cmp	r3, #1
    1cba:	d10c      	bne.n	1cd6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1cbc:	683b      	ldr	r3, [r7, #0]
    1cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1cc2:	4293      	cmp	r3, r2
    1cc4:	d107      	bne.n	1cd6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1cc6:	4806      	ldr	r0, [pc, #24]	; (1ce0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1cc8:	4b06      	ldr	r3, [pc, #24]	; (1ce4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1cca:	4798      	blx	r3
    1ccc:	4a06      	ldr	r2, [pc, #24]	; (1ce8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1cce:	4907      	ldr	r1, [pc, #28]	; (1cec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1cd0:	4803      	ldr	r0, [pc, #12]	; (1ce0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1cd2:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1cd4:	4798      	blx	r3
    1cd6:	bf00      	nop
    1cd8:	3708      	adds	r7, #8
    1cda:	46bd      	mov	sp, r7
    1cdc:	bd80      	pop	{r7, pc}
    1cde:	bf00      	nop
    1ce0:	20002d30 	.word	0x20002d30
    1ce4:	00001c0d 	.word	0x00001c0d
    1ce8:	20000000 	.word	0x20000000
    1cec:	00001c21 	.word	0x00001c21
    1cf0:	00014579 	.word	0x00014579

00001cf4 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    1cf4:	b580      	push	{r7, lr}
    1cf6:	af00      	add	r7, sp, #0
    1cf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1cfc:	2001      	movs	r0, #1
    1cfe:	4b01      	ldr	r3, [pc, #4]	; (1d04 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    1d00:	4798      	blx	r3
    1d02:	bd80      	pop	{r7, pc}
    1d04:	00001cad 	.word	0x00001cad

00001d08 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    1d08:	b580      	push	{r7, lr}
    1d0a:	b082      	sub	sp, #8
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	4618      	mov	r0, r3
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <_ZN19PersistenceServicesC1Ev+0x24>)
    1d16:	4798      	blx	r3
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	2200      	movs	r2, #0
    1d1c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	{
	}
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	4618      	mov	r0, r3
    1d24:	3708      	adds	r7, #8
    1d26:	46bd      	mov	sp, r7
    1d28:	bd80      	pop	{r7, pc}
    1d2a:	bf00      	nop
    1d2c:	00000c5d 	.word	0x00000c5d

00001d30 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    1d30:	b480      	push	{r7}
    1d32:	b085      	sub	sp, #20
    1d34:	af00      	add	r7, sp, #0
    1d36:	6078      	str	r0, [r7, #4]
    1d38:	6039      	str	r1, [r7, #0]
	bool	result(true);
    1d3a:	2301      	movs	r3, #1
    1d3c:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    1d3e:	683b      	ldr	r3, [r7, #0]
    1d40:	2204      	movs	r2, #4
    1d42:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    1d44:	683b      	ldr	r3, [r7, #0]
    1d46:	22ac      	movs	r2, #172	; 0xac
    1d48:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    1d4a:	683b      	ldr	r3, [r7, #0]
    1d4c:	f240 720c 	movw	r2, #1804	; 0x70c
    1d50:	609a      	str	r2, [r3, #8]



	

	return result;
    1d52:	7bfb      	ldrb	r3, [r7, #15]
	}
    1d54:	4618      	mov	r0, r3
    1d56:	3714      	adds	r7, #20
    1d58:	46bd      	mov	sp, r7
    1d5a:	bc80      	pop	{r7}
    1d5c:	4770      	bx	lr

00001d5e <_ZN19PersistenceServices20readCycleDescriptionER16CycleDescriptionh>:
	
	return result;
	}

bool PersistenceServices::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    1d5e:	b480      	push	{r7}
    1d60:	b087      	sub	sp, #28
    1d62:	af00      	add	r7, sp, #0
    1d64:	60f8      	str	r0, [r7, #12]
    1d66:	60b9      	str	r1, [r7, #8]
    1d68:	4613      	mov	r3, r2
    1d6a:	71fb      	strb	r3, [r7, #7]
	bool		result(false);
    1d6c:	2300      	movs	r3, #0
    1d6e:	75fb      	strb	r3, [r7, #23]
		{


		}

	return result;
    1d70:	7dfb      	ldrb	r3, [r7, #23]
	}
    1d72:	4618      	mov	r0, r3
    1d74:	371c      	adds	r7, #28
    1d76:	46bd      	mov	sp, r7
    1d78:	bc80      	pop	{r7}
    1d7a:	4770      	bx	lr

00001d7c <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData>:
	invalidatePersistentArea(kNVM2,FRAMProxy.persistentConfigurationArea.header);

	}

bool PersistenceServices::readPersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1d7c:	b590      	push	{r4, r7, lr}
    1d7e:	b085      	sub	sp, #20
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
    1d84:	6039      	str	r1, [r7, #0]
	bool		result;

	result = isPersistentAreaValid(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1d86:	2300      	movs	r3, #0
    1d88:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1d8c:	2344      	movs	r3, #68	; 0x44
    1d8e:	2102      	movs	r1, #2
    1d90:	6878      	ldr	r0, [r7, #4]
    1d92:	4c1e      	ldr	r4, [pc, #120]	; (1e0c <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x90>)
    1d94:	47a0      	blx	r4
    1d96:	4603      	mov	r3, r0
    1d98:	73fb      	strb	r3, [r7, #15]
	if (result)
    1d9a:	7bfb      	ldrb	r3, [r7, #15]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d003      	beq.n	1da8 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x2c>
		{
		int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1da0:	2300      	movs	r3, #0
    1da2:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1da6:	60bb      	str	r3, [r7, #8]
	
		}

	result &= (data.version == kPersistentConfigurationDataVersion);
    1da8:	7bfb      	ldrb	r3, [r7, #15]
    1daa:	683a      	ldr	r2, [r7, #0]
    1dac:	6852      	ldr	r2, [r2, #4]
    1dae:	2a02      	cmp	r2, #2
    1db0:	bf0c      	ite	eq
    1db2:	2201      	moveq	r2, #1
    1db4:	2200      	movne	r2, #0
    1db6:	b2d2      	uxtb	r2, r2
    1db8:	4013      	ands	r3, r2
    1dba:	2b00      	cmp	r3, #0
    1dbc:	bf14      	ite	ne
    1dbe:	2301      	movne	r3, #1
    1dc0:	2300      	moveq	r3, #0
    1dc2:	73fb      	strb	r3, [r7, #15]
	result &= (data.size == kPersistentConfigurationDataSize);
    1dc4:	7bfb      	ldrb	r3, [r7, #15]
    1dc6:	683a      	ldr	r2, [r7, #0]
    1dc8:	6812      	ldr	r2, [r2, #0]
    1dca:	2a38      	cmp	r2, #56	; 0x38
    1dcc:	bf0c      	ite	eq
    1dce:	2201      	moveq	r2, #1
    1dd0:	2200      	movne	r2, #0
    1dd2:	b2d2      	uxtb	r2, r2
    1dd4:	4013      	ands	r3, r2
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	bf14      	ite	ne
    1dda:	2301      	movne	r3, #1
    1ddc:	2300      	moveq	r3, #0
    1dde:	73fb      	strb	r3, [r7, #15]
	result &= (data.partNumber == PARTNUMBER);
    1de0:	7bfb      	ldrb	r3, [r7, #15]
    1de2:	683a      	ldr	r2, [r7, #0]
    1de4:	6892      	ldr	r2, [r2, #8]
    1de6:	f240 710c 	movw	r1, #1804	; 0x70c
    1dea:	428a      	cmp	r2, r1
    1dec:	bf0c      	ite	eq
    1dee:	2201      	moveq	r2, #1
    1df0:	2200      	movne	r2, #0
    1df2:	b2d2      	uxtb	r2, r2
    1df4:	4013      	ands	r3, r2
    1df6:	2b00      	cmp	r3, #0
    1df8:	bf14      	ite	ne
    1dfa:	2301      	movne	r3, #1
    1dfc:	2300      	moveq	r3, #0
    1dfe:	73fb      	strb	r3, [r7, #15]
	return result;
    1e00:	7bfb      	ldrb	r3, [r7, #15]
	}
    1e02:	4618      	mov	r0, r3
    1e04:	3714      	adds	r7, #20
    1e06:	46bd      	mov	sp, r7
    1e08:	bd90      	pop	{r4, r7, pc}
    1e0a:	bf00      	nop
    1e0c:	00001efd 	.word	0x00001efd

00001e10 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData>:
	
bool PersistenceServices::writePersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1e10:	b590      	push	{r4, r7, lr}
    1e12:	b085      	sub	sp, #20
    1e14:	af00      	add	r7, sp, #0
    1e16:	6078      	str	r0, [r7, #4]
    1e18:	6039      	str	r1, [r7, #0]
	bool		result(true);
    1e1a:	2301      	movs	r3, #1
    1e1c:	73fb      	strb	r3, [r7, #15]

	data.version = kPersistentConfigurationDataVersion;
    1e1e:	683b      	ldr	r3, [r7, #0]
    1e20:	2202      	movs	r2, #2
    1e22:	605a      	str	r2, [r3, #4]
	data.size = kPersistentConfigurationDataSize;
    1e24:	683b      	ldr	r3, [r7, #0]
    1e26:	2238      	movs	r2, #56	; 0x38
    1e28:	601a      	str	r2, [r3, #0]
	data.partNumber = PARTNUMBER;
    1e2a:	683b      	ldr	r3, [r7, #0]
    1e2c:	f240 720c 	movw	r2, #1804	; 0x70c
    1e30:	609a      	str	r2, [r3, #8]

	int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1e32:	2300      	movs	r3, #0
    1e34:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1e38:	60bb      	str	r3, [r7, #8]

    invalidatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header);
    1e3a:	2300      	movs	r3, #0
    1e3c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1e40:	461a      	mov	r2, r3
    1e42:	2102      	movs	r1, #2
    1e44:	6878      	ldr	r0, [r7, #4]
    1e46:	4b07      	ldr	r3, [pc, #28]	; (1e64 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x54>)
    1e48:	4798      	blx	r3
	 validatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1e4a:	2300      	movs	r3, #0
    1e4c:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1e50:	2344      	movs	r3, #68	; 0x44
    1e52:	2102      	movs	r1, #2
    1e54:	6878      	ldr	r0, [r7, #4]
    1e56:	4c04      	ldr	r4, [pc, #16]	; (1e68 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x58>)
    1e58:	47a0      	blx	r4


	return result;
    1e5a:	7bfb      	ldrb	r3, [r7, #15]
	}
    1e5c:	4618      	mov	r0, r3
    1e5e:	3714      	adds	r7, #20
    1e60:	46bd      	mov	sp, r7
    1e62:	bd90      	pop	{r4, r7, pc}
    1e64:	00001fbd 	.word	0x00001fbd
    1e68:	00001fdd 	.word	0x00001fdd

00001e6c <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:


	}

void PersistenceServices::restoreWorkingStateForGAIN(HVACState& v)
	{
    1e6c:	b480      	push	{r7}
    1e6e:	b083      	sub	sp, #12
    1e70:	af00      	add	r7, sp, #0
    1e72:	6078      	str	r0, [r7, #4]
    1e74:	6039      	str	r1, [r7, #0]
	int32	address;
	


	}
    1e76:	bf00      	nop
    1e78:	370c      	adds	r7, #12
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bc80      	pop	{r7}
    1e7e:	4770      	bx	lr

00001e80 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b086      	sub	sp, #24
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    1e88:	4b17      	ldr	r3, [pc, #92]	; (1ee8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    1e8a:	685b      	ldr	r3, [r3, #4]
    1e8c:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	33fc      	adds	r3, #252	; 0xfc
    1e92:	4619      	mov	r1, r3
    1e94:	4815      	ldr	r0, [pc, #84]	; (1eec <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1e96:	4b16      	ldr	r3, [pc, #88]	; (1ef0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    1e98:	4798      	blx	r3
    1e9a:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    1e9c:	693b      	ldr	r3, [r7, #16]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d001      	beq.n	1ea6 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    1ea2:	2300      	movs	r3, #0
    1ea4:	e01c      	b.n	1ee0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    1ea6:	4811      	ldr	r0, [pc, #68]	; (1eec <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1ea8:	4b12      	ldr	r3, [pc, #72]	; (1ef4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    1eaa:	4798      	blx	r3
    1eac:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    1eae:	6878      	ldr	r0, [r7, #4]
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	33fc      	adds	r3, #252	; 0xfc
    1eb4:	22ac      	movs	r2, #172	; 0xac
    1eb6:	4619      	mov	r1, r3
    1eb8:	4b0f      	ldr	r3, [pc, #60]	; (1ef8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    1eba:	4798      	blx	r3
    1ebc:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    1ebe:	68fa      	ldr	r2, [r7, #12]
    1ec0:	68bb      	ldr	r3, [r7, #8]
    1ec2:	429a      	cmp	r2, r3
    1ec4:	d10b      	bne.n	1ede <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1ecc:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    1ece:	693a      	ldr	r2, [r7, #16]
    1ed0:	697b      	ldr	r3, [r7, #20]
    1ed2:	429a      	cmp	r2, r3
    1ed4:	bf8c      	ite	hi
    1ed6:	2301      	movhi	r3, #1
    1ed8:	2300      	movls	r3, #0
    1eda:	b2db      	uxtb	r3, r3
    1edc:	e000      	b.n	1ee0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    1ede:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    1ee0:	4618      	mov	r0, r3
    1ee2:	3718      	adds	r7, #24
    1ee4:	46bd      	mov	sp, r7
    1ee6:	bd80      	pop	{r7, pc}
    1ee8:	0001a48c 	.word	0x0001a48c
    1eec:	200018e0 	.word	0x200018e0
    1ef0:	0000196d 	.word	0x0000196d
    1ef4:	000019d5 	.word	0x000019d5
    1ef8:	00000ce1 	.word	0x00000ce1

00001efc <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm>:
    }
#endif


bool PersistenceServices::isPersistentAreaValid(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1efc:	b480      	push	{r7}
    1efe:	b089      	sub	sp, #36	; 0x24
    1f00:	af00      	add	r7, sp, #0
    1f02:	60f8      	str	r0, [r7, #12]
    1f04:	607a      	str	r2, [r7, #4]
    1f06:	603b      	str	r3, [r7, #0]
    1f08:	460b      	mov	r3, r1
    1f0a:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;
	bool		result;


	result = (header.magic == validMagic) && (header.size == size);
    1f0c:	693b      	ldr	r3, [r7, #16]
    1f0e:	4a08      	ldr	r2, [pc, #32]	; (1f30 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x34>)
    1f10:	4293      	cmp	r3, r2
    1f12:	d105      	bne.n	1f20 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1f14:	697a      	ldr	r2, [r7, #20]
    1f16:	683b      	ldr	r3, [r7, #0]
    1f18:	429a      	cmp	r2, r3
    1f1a:	d101      	bne.n	1f20 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1f1c:	2301      	movs	r3, #1
    1f1e:	e000      	b.n	1f22 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x26>
    1f20:	2300      	movs	r3, #0
    1f22:	77fb      	strb	r3, [r7, #31]
	

	return result;
    1f24:	7ffb      	ldrb	r3, [r7, #31]
	}
    1f26:	4618      	mov	r0, r3
    1f28:	3724      	adds	r7, #36	; 0x24
    1f2a:	46bd      	mov	sp, r7
    1f2c:	bc80      	pop	{r7}
    1f2e:	4770      	bx	lr
    1f30:	14031869 	.word	0x14031869

00001f34 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	b084      	sub	sp, #16
    1f38:	af00      	add	r7, sp, #0
    1f3a:	6078      	str	r0, [r7, #4]
    1f3c:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    1f3e:	480b      	ldr	r0, [pc, #44]	; (1f6c <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    1f40:	4b0b      	ldr	r3, [pc, #44]	; (1f70 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    1f42:	4798      	blx	r3
    1f44:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	227c      	movs	r2, #124	; 0x7c
    1f4a:	6839      	ldr	r1, [r7, #0]
    1f4c:	4618      	mov	r0, r3
    1f4e:	4b09      	ldr	r3, [pc, #36]	; (1f74 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    1f50:	4798      	blx	r3
    1f52:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    1f54:	68fa      	ldr	r2, [r7, #12]
    1f56:	68bb      	ldr	r3, [r7, #8]
    1f58:	429a      	cmp	r2, r3
    1f5a:	bf0c      	ite	eq
    1f5c:	2301      	moveq	r3, #1
    1f5e:	2300      	movne	r3, #0
    1f60:	b2db      	uxtb	r3, r3
}
    1f62:	4618      	mov	r0, r3
    1f64:	3710      	adds	r7, #16
    1f66:	46bd      	mov	sp, r7
    1f68:	bd80      	pop	{r7, pc}
    1f6a:	bf00      	nop
    1f6c:	200018e0 	.word	0x200018e0
    1f70:	00001bcd 	.word	0x00001bcd
    1f74:	00000ce1 	.word	0x00000ce1

00001f78 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b084      	sub	sp, #16
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
    1f80:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    1f82:	480b      	ldr	r0, [pc, #44]	; (1fb0 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    1f84:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    1f86:	4798      	blx	r3
    1f88:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	227c      	movs	r2, #124	; 0x7c
    1f8e:	6839      	ldr	r1, [r7, #0]
    1f90:	4618      	mov	r0, r3
    1f92:	4b09      	ldr	r3, [pc, #36]	; (1fb8 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    1f94:	4798      	blx	r3
    1f96:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    1f98:	68fa      	ldr	r2, [r7, #12]
    1f9a:	68bb      	ldr	r3, [r7, #8]
    1f9c:	429a      	cmp	r2, r3
    1f9e:	bf0c      	ite	eq
    1fa0:	2301      	moveq	r3, #1
    1fa2:	2300      	movne	r3, #0
    1fa4:	b2db      	uxtb	r3, r3
}
    1fa6:	4618      	mov	r0, r3
    1fa8:	3710      	adds	r7, #16
    1faa:	46bd      	mov	sp, r7
    1fac:	bd80      	pop	{r7, pc}
    1fae:	bf00      	nop
    1fb0:	200018d0 	.word	0x200018d0
    1fb4:	00000fc9 	.word	0x00000fc9
    1fb8:	00000ce1 	.word	0x00000ce1

00001fbc <_ZN19PersistenceServices24invalidatePersistentAreaEhR9NVMHeader>:

void PersistenceServices::invalidatePersistentArea(uint8 nvm, NVMHeader& adr)
	{
    1fbc:	b480      	push	{r7}
    1fbe:	b089      	sub	sp, #36	; 0x24
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	60f8      	str	r0, [r7, #12]
    1fc4:	460b      	mov	r3, r1
    1fc6:	607a      	str	r2, [r7, #4]
    1fc8:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = 0;
    1fca:	2300      	movs	r3, #0
    1fcc:	617b      	str	r3, [r7, #20]
	header.size = 0;
    1fce:	2300      	movs	r3, #0
    1fd0:	61bb      	str	r3, [r7, #24]

	}
    1fd2:	bf00      	nop
    1fd4:	3724      	adds	r7, #36	; 0x24
    1fd6:	46bd      	mov	sp, r7
    1fd8:	bc80      	pop	{r7}
    1fda:	4770      	bx	lr

00001fdc <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm>:

void PersistenceServices::validatePersistentArea(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1fdc:	b480      	push	{r7}
    1fde:	b089      	sub	sp, #36	; 0x24
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	60f8      	str	r0, [r7, #12]
    1fe4:	607a      	str	r2, [r7, #4]
    1fe6:	603b      	str	r3, [r7, #0]
    1fe8:	460b      	mov	r3, r1
    1fea:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = validMagic;
    1fec:	4b04      	ldr	r3, [pc, #16]	; (2000 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm+0x24>)
    1fee:	617b      	str	r3, [r7, #20]
	header.size = size;
    1ff0:	683b      	ldr	r3, [r7, #0]
    1ff2:	61bb      	str	r3, [r7, #24]


	

	}
    1ff4:	bf00      	nop
    1ff6:	3724      	adds	r7, #36	; 0x24
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bc80      	pop	{r7}
    1ffc:	4770      	bx	lr
    1ffe:	bf00      	nop
    2000:	14031869 	.word	0x14031869

00002004 <_ZN5eventC1Ev>:
inline event::event()
    2004:	b580      	push	{r7, lr}
    2006:	b082      	sub	sp, #8
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2012:	801a      	strh	r2, [r3, #0]
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	f64f 72ff 	movw	r2, #65535	; 0xffff
    201a:	805a      	strh	r2, [r3, #2]
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	2200      	movs	r2, #0
    2020:	605a      	str	r2, [r3, #4]
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	3308      	adds	r3, #8
    2026:	2100      	movs	r1, #0
    2028:	4618      	mov	r0, r3
    202a:	4b05      	ldr	r3, [pc, #20]	; (2040 <_ZN5eventC1Ev+0x3c>)
    202c:	4798      	blx	r3
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	2200      	movs	r2, #0
    2032:	60da      	str	r2, [r3, #12]
	}
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	4618      	mov	r0, r3
    2038:	3708      	adds	r7, #8
    203a:	46bd      	mov	sp, r7
    203c:	bd80      	pop	{r7, pc}
    203e:	bf00      	nop
    2040:	000002d1 	.word	0x000002d1

00002044 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2044:	b590      	push	{r4, r7, lr}
    2046:	b083      	sub	sp, #12
    2048:	af00      	add	r7, sp, #0
    204a:	6078      	str	r0, [r7, #4]
    204c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    204e:	683b      	ldr	r3, [r7, #0]
    2050:	2b00      	cmp	r3, #0
    2052:	d101      	bne.n	2058 <_ZN5Print5writeEPKc+0x14>
    2054:	2300      	movs	r3, #0
    2056:	e00c      	b.n	2072 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	3304      	adds	r3, #4
    205e:	681c      	ldr	r4, [r3, #0]
    2060:	6838      	ldr	r0, [r7, #0]
    2062:	4b06      	ldr	r3, [pc, #24]	; (207c <_ZN5Print5writeEPKc+0x38>)
    2064:	4798      	blx	r3
    2066:	4603      	mov	r3, r0
    2068:	461a      	mov	r2, r3
    206a:	6839      	ldr	r1, [r7, #0]
    206c:	6878      	ldr	r0, [r7, #4]
    206e:	47a0      	blx	r4
    2070:	4603      	mov	r3, r0
    }
    2072:	4618      	mov	r0, r3
    2074:	370c      	adds	r7, #12
    2076:	46bd      	mov	sp, r7
    2078:	bd90      	pop	{r4, r7, pc}
    207a:	bf00      	nop
    207c:	00016981 	.word	0x00016981

00002080 <_ZN12States_ClassC1Ev>:
#include "CDC_Class.h"
#include "ALU_Class.h"
#include "CBIT_Class.h"

	// default constructor
States_Class::States_Class(void)
    2080:	b580      	push	{r7, lr}
    2082:	b082      	sub	sp, #8
    2084:	af00      	add	r7, sp, #0
    2086:	6078      	str	r0, [r7, #4]
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	4618      	mov	r0, r3
    208c:	4b0d      	ldr	r3, [pc, #52]	; (20c4 <_ZN12States_ClassC1Ev+0x44>)
    208e:	4798      	blx	r3
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
    2096:	4618      	mov	r0, r3
    2098:	4b0b      	ldr	r3, [pc, #44]	; (20c8 <_ZN12States_ClassC1Ev+0x48>)
    209a:	4798      	blx	r3
    209c:	4a0b      	ldr	r2, [pc, #44]	; (20cc <_ZN12States_ClassC1Ev+0x4c>)
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	601a      	str	r2, [r3, #0]
	{
	listener.eventHandler = NULL;
    20a2:	4b0b      	ldr	r3, [pc, #44]	; (20d0 <_ZN12States_ClassC1Ev+0x50>)
    20a4:	2200      	movs	r2, #0
    20a6:	605a      	str	r2, [r3, #4]
state=defaultState;
    20a8:	687a      	ldr	r2, [r7, #4]
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	f502 706f 	add.w	r0, r2, #956	; 0x3bc
    20b0:	3304      	adds	r3, #4
    20b2:	227c      	movs	r2, #124	; 0x7c
    20b4:	4619      	mov	r1, r3
    20b6:	4b07      	ldr	r3, [pc, #28]	; (20d4 <_ZN12States_ClassC1Ev+0x54>)
    20b8:	4798      	blx	r3
	}
    20ba:	687b      	ldr	r3, [r7, #4]
    20bc:	4618      	mov	r0, r3
    20be:	3708      	adds	r7, #8
    20c0:	46bd      	mov	sp, r7
    20c2:	bd80      	pop	{r7, pc}
    20c4:	00000899 	.word	0x00000899
    20c8:	00001183 	.word	0x00001183
    20cc:	0001aa78 	.word	0x0001aa78
    20d0:	20004a90 	.word	0x20004a90
    20d4:	00016735 	.word	0x00016735

000020d8 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    20d8:	b580      	push	{r7, lr}
    20da:	b082      	sub	sp, #8
    20dc:	af00      	add	r7, sp, #0
    20de:	6078      	str	r0, [r7, #4]
    20e0:	4a08      	ldr	r2, [pc, #32]	; (2104 <_ZN12States_ClassD1Ev+0x2c>)
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	601a      	str	r2, [r3, #0]
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
    20ec:	4618      	mov	r0, r3
    20ee:	4b06      	ldr	r3, [pc, #24]	; (2108 <_ZN12States_ClassD1Ev+0x30>)
    20f0:	4798      	blx	r3
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	4618      	mov	r0, r3
    20f6:	4b05      	ldr	r3, [pc, #20]	; (210c <_ZN12States_ClassD1Ev+0x34>)
    20f8:	4798      	blx	r3
{
} //~States_Class
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	4618      	mov	r0, r3
    20fe:	3708      	adds	r7, #8
    2100:	46bd      	mov	sp, r7
    2102:	bd80      	pop	{r7, pc}
    2104:	0001aa78 	.word	0x0001aa78
    2108:	00001197 	.word	0x00001197
    210c:	00000901 	.word	0x00000901

00002110 <_ZN12States_Class4InitEv>:

void States_Class::Init(void){
    2110:	b480      	push	{r7}
    2112:	b083      	sub	sp, #12
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
	
	
}
    2118:	bf00      	nop
    211a:	370c      	adds	r7, #12
    211c:	46bd      	mov	sp, r7
    211e:	bc80      	pop	{r7}
    2120:	4770      	bx	lr
	...

00002124 <_ZN12States_Class5StartEh>:
void States_Class::Start(uint8_t	operationMode)
	{
    2124:	b590      	push	{r4, r7, lr}
    2126:	b08b      	sub	sp, #44	; 0x2c
    2128:	af02      	add	r7, sp, #8
    212a:	6078      	str	r0, [r7, #4]
    212c:	460b      	mov	r3, r1
    212e:	70fb      	strb	r3, [r7, #3]
	event	e;
    2130:	f107 0308 	add.w	r3, r7, #8
    2134:	4618      	mov	r0, r3
    2136:	4b52      	ldr	r3, [pc, #328]	; (2280 <_ZN12States_Class5StartEh+0x15c>)
    2138:	4798      	blx	r3
    tick_t	timerValue = 0L;
    213a:	2300      	movs	r3, #0
    213c:	61fb      	str	r3, [r7, #28]
    bool	isCurrentStateValid = false;
    213e:	2300      	movs	r3, #0
    2140:	76fb      	strb	r3, [r7, #27]
	memory.ReadFastApplicationState(lastState);
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	f503 6387 	add.w	r3, r3, #1080	; 0x438
    2148:	4619      	mov	r1, r3
    214a:	484e      	ldr	r0, [pc, #312]	; (2284 <_ZN12States_Class5StartEh+0x160>)
    214c:	4b4e      	ldr	r3, [pc, #312]	; (2288 <_ZN12States_Class5StartEh+0x164>)
    214e:	4798      	blx	r3
	state.currentState = kGAINStateReset;
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	2200      	movs	r2, #0
    2154:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	if (calendar.WasInterrupted())
    2158:	484c      	ldr	r0, [pc, #304]	; (228c <_ZN12States_Class5StartEh+0x168>)
    215a:	4b4d      	ldr	r3, [pc, #308]	; (2290 <_ZN12States_Class5StartEh+0x16c>)
    215c:	4798      	blx	r3
    215e:	4603      	mov	r3, r0
    2160:	2b00      	cmp	r3, #0
    2162:	d019      	beq.n	2198 <_ZN12States_Class5StartEh+0x74>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    2164:	4849      	ldr	r0, [pc, #292]	; (228c <_ZN12States_Class5StartEh+0x168>)
    2166:	4b4b      	ldr	r3, [pc, #300]	; (2294 <_ZN12States_Class5StartEh+0x170>)
    2168:	4798      	blx	r3
    216a:	4602      	mov	r2, r0
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
    2178:	2b00      	cmp	r3, #0
    217a:	db08      	blt.n	218e <_ZN12States_Class5StartEh+0x6a>
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
    2182:	f241 3287 	movw	r2, #4999	; 0x1387
    2186:	4293      	cmp	r3, r2
    2188:	dc01      	bgt.n	218e <_ZN12States_Class5StartEh+0x6a>
    218a:	2201      	movs	r2, #1
    218c:	e000      	b.n	2190 <_ZN12States_Class5StartEh+0x6c>
    218e:	2200      	movs	r2, #0
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
    2196:	e002      	b.n	219e <_ZN12States_Class5StartEh+0x7a>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    2198:	483f      	ldr	r0, [pc, #252]	; (2298 <_ZN12States_Class5StartEh+0x174>)
    219a:	4b40      	ldr	r3, [pc, #256]	; (229c <_ZN12States_Class5StartEh+0x178>)
    219c:	4798      	blx	r3
	}

	

	//	Check persistent memory
	if (SetInitialState()<0){
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	4618      	mov	r0, r3
    21a2:	4b3f      	ldr	r3, [pc, #252]	; (22a0 <_ZN12States_Class5StartEh+0x17c>)
    21a4:	4798      	blx	r3
    21a6:	2300      	movs	r3, #0
    21a8:	2b00      	cmp	r3, #0
    21aa:	d003      	beq.n	21b4 <_ZN12States_Class5StartEh+0x90>
		SetDefaultState();
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	4618      	mov	r0, r3
    21b0:	4b3c      	ldr	r3, [pc, #240]	; (22a4 <_ZN12States_Class5StartEh+0x180>)
    21b2:	4798      	blx	r3
	}



	readResult=memory.ReadLastConfigurationData(configuration);
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
    21ba:	4619      	mov	r1, r3
    21bc:	483a      	ldr	r0, [pc, #232]	; (22a8 <_ZN12States_Class5StartEh+0x184>)
    21be:	4b3b      	ldr	r3, [pc, #236]	; (22ac <_ZN12States_Class5StartEh+0x188>)
    21c0:	4798      	blx	r3
    21c2:	4602      	mov	r2, r0
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	if (readResult>0)
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
    21d0:	2b00      	cmp	r3, #0
    21d2:	d005      	beq.n	21e0 <_ZN12States_Class5StartEh+0xbc>
		{
	#if __DEBUG__ > 3
		usb << "readConfigurationDataArea failed!" << newline;
	#endif
		SetFactoryDefaults(0, true, false);
    21d4:	6878      	ldr	r0, [r7, #4]
    21d6:	2300      	movs	r3, #0
    21d8:	2201      	movs	r2, #1
    21da:	2100      	movs	r1, #0
    21dc:	4c34      	ldr	r4, [pc, #208]	; (22b0 <_ZN12States_Class5StartEh+0x18c>)
    21de:	47a0      	blx	r4
		usb << "configuration.m == " << configuration.m << newline;
		usb << "configuration.zA0 == " << configuration.zA0 << newline;
		}
#endif

	if (!memory.readPersistentConfigurationDataArea(persistentConfiguration))
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	f503 735f 	add.w	r3, r3, #892	; 0x37c
    21e6:	4619      	mov	r1, r3
    21e8:	4832      	ldr	r0, [pc, #200]	; (22b4 <_ZN12States_Class5StartEh+0x190>)
    21ea:	4b33      	ldr	r3, [pc, #204]	; (22b8 <_ZN12States_Class5StartEh+0x194>)
    21ec:	4798      	blx	r3
    21ee:	4603      	mov	r3, r0
    21f0:	f083 0301 	eor.w	r3, r3, #1
    21f4:	b2db      	uxtb	r3, r3
    21f6:	2b00      	cmp	r3, #0
    21f8:	d002      	beq.n	2200 <_ZN12States_Class5StartEh+0xdc>
		{
	#if __DEBUG__ > 2
		usb << "readPersistentConfigurationDataArea failed!" << memory.getUptime() << newline;
	#endif
		setPersistentConfigurationDefaults();
    21fa:	6878      	ldr	r0, [r7, #4]
    21fc:	4b2f      	ldr	r3, [pc, #188]	; (22bc <_ZN12States_Class5StartEh+0x198>)
    21fe:	4798      	blx	r3
					<< ", duration == " << persistentConfiguration.cycle.duration << ", maximum time == " << persistentConfiguration.cycle.maximumDuration
					<< ", flags == " << persistentConfiguration.cycle.cycleFlags << newline;
#endif
	

	communicator.CheckCommunication();
    2200:	482f      	ldr	r0, [pc, #188]	; (22c0 <_ZN12States_Class5StartEh+0x19c>)
    2202:	4b30      	ldr	r3, [pc, #192]	; (22c4 <_ZN12States_Class5StartEh+0x1a0>)
    2204:	4798      	blx	r3

	if (isCurrentStateValid)
    2206:	7efb      	ldrb	r3, [r7, #27]
    2208:	2b00      	cmp	r3, #0
    220a:	d007      	beq.n	221c <_ZN12States_Class5StartEh+0xf8>
    {
		prepareStateChangeEvent(e, kGAINStateResume);
    220c:	f107 0108 	add.w	r1, r7, #8
    2210:	2300      	movs	r3, #0
    2212:	2202      	movs	r2, #2
    2214:	6878      	ldr	r0, [r7, #4]
    2216:	4c2c      	ldr	r4, [pc, #176]	; (22c8 <_ZN12States_Class5StartEh+0x1a4>)
    2218:	47a0      	blx	r4
    221a:	e006      	b.n	222a <_ZN12States_Class5StartEh+0x106>
    }else{
		prepareStateChangeEvent(e, kGAINStateInitialize);
    221c:	f107 0108 	add.w	r1, r7, #8
    2220:	2300      	movs	r3, #0
    2222:	2201      	movs	r2, #1
    2224:	6878      	ldr	r0, [r7, #4]
    2226:	4c28      	ldr	r4, [pc, #160]	; (22c8 <_ZN12States_Class5StartEh+0x1a4>)
    2228:	47a0      	blx	r4
    }

	listener.SendEventSelf(e);
    222a:	f107 0308 	add.w	r3, r7, #8
    222e:	4619      	mov	r1, r3
    2230:	4826      	ldr	r0, [pc, #152]	; (22cc <_ZN12States_Class5StartEh+0x1a8>)
    2232:	4b27      	ldr	r3, [pc, #156]	; (22d0 <_ZN12States_Class5StartEh+0x1ac>)
    2234:	4798      	blx	r3



    while (cBit.IsOK())
    2236:	4827      	ldr	r0, [pc, #156]	; (22d4 <_ZN12States_Class5StartEh+0x1b0>)
    2238:	4b27      	ldr	r3, [pc, #156]	; (22d8 <_ZN12States_Class5StartEh+0x1b4>)
    223a:	4798      	blx	r3
    223c:	4603      	mov	r3, r0
    223e:	2b00      	cmp	r3, #0
    2240:	d015      	beq.n	226e <_ZN12States_Class5StartEh+0x14a>
		{
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    2242:	4b26      	ldr	r3, [pc, #152]	; (22dc <_ZN12States_Class5StartEh+0x1b8>)
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	f107 0108 	add.w	r1, r7, #8
    224a:	9300      	str	r3, [sp, #0]
    224c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2250:	f44f 7200 	mov.w	r2, #512	; 0x200
    2254:	481d      	ldr	r0, [pc, #116]	; (22cc <_ZN12States_Class5StartEh+0x1a8>)
    2256:	4c22      	ldr	r4, [pc, #136]	; (22e0 <_ZN12States_Class5StartEh+0x1bc>)
    2258:	47a0      	blx	r4
    225a:	4603      	mov	r3, r0
    225c:	2b00      	cmp	r3, #0
    225e:	d0ea      	beq.n	2236 <_ZN12States_Class5StartEh+0x112>
			{
			handleHVACEvent(e);
    2260:	f107 0308 	add.w	r3, r7, #8
    2264:	4619      	mov	r1, r3
    2266:	6878      	ldr	r0, [r7, #4]
    2268:	4b1e      	ldr	r3, [pc, #120]	; (22e4 <_ZN12States_Class5StartEh+0x1c0>)
    226a:	4798      	blx	r3
    while (cBit.IsOK())
    226c:	e7e3      	b.n	2236 <_ZN12States_Class5StartEh+0x112>
			}
        else{

        }
		}
		Stop(0);
    226e:	2100      	movs	r1, #0
    2270:	6878      	ldr	r0, [r7, #4]
    2272:	4b1d      	ldr	r3, [pc, #116]	; (22e8 <_ZN12States_Class5StartEh+0x1c4>)
    2274:	4798      	blx	r3
	}
    2276:	bf00      	nop
    2278:	3724      	adds	r7, #36	; 0x24
    227a:	46bd      	mov	sp, r7
    227c:	bd90      	pop	{r4, r7, pc}
    227e:	bf00      	nop
    2280:	00002005 	.word	0x00002005
    2284:	200018d0 	.word	0x200018d0
    2288:	00001009 	.word	0x00001009
    228c:	20004d40 	.word	0x20004d40
    2290:	000131e5 	.word	0x000131e5
    2294:	0001310d 	.word	0x0001310d
    2298:	20001238 	.word	0x20001238
    229c:	00000d95 	.word	0x00000d95
    22a0:	00000979 	.word	0x00000979
    22a4:	00000bcd 	.word	0x00000bcd
    22a8:	200018e0 	.word	0x200018e0
    22ac:	0000193d 	.word	0x0000193d
    22b0:	00000921 	.word	0x00000921
    22b4:	20001724 	.word	0x20001724
    22b8:	00001d7d 	.word	0x00001d7d
    22bc:	000022ed 	.word	0x000022ed
    22c0:	200011b4 	.word	0x200011b4
    22c4:	000011ad 	.word	0x000011ad
    22c8:	00002ab5 	.word	0x00002ab5
    22cc:	20004a90 	.word	0x20004a90
    22d0:	00011879 	.word	0x00011879
    22d4:	200010f4 	.word	0x200010f4
    22d8:	00000825 	.word	0x00000825
    22dc:	0001bf3c 	.word	0x0001bf3c
    22e0:	000116a1 	.word	0x000116a1
    22e4:	00002391 	.word	0x00002391
    22e8:	00002ba5 	.word	0x00002ba5

000022ec <_ZN12States_Class34setPersistentConfigurationDefaultsEv>:


void States_Class::setPersistentConfigurationDefaults(void)
	{
    22ec:	b580      	push	{r7, lr}
    22ee:	b082      	sub	sp, #8
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
	setPersistentConfiguration(0);
    22f4:	2100      	movs	r1, #0
    22f6:	6878      	ldr	r0, [r7, #4]
    22f8:	4b02      	ldr	r3, [pc, #8]	; (2304 <_ZN12States_Class34setPersistentConfigurationDefaultsEv+0x18>)
    22fa:	4798      	blx	r3
	}
    22fc:	bf00      	nop
    22fe:	3708      	adds	r7, #8
    2300:	46bd      	mov	sp, r7
    2302:	bd80      	pop	{r7, pc}
    2304:	00002309 	.word	0x00002309

00002308 <_ZN12States_Class26setPersistentConfigurationEh>:

void States_Class::setPersistentConfiguration(uint8 cycleID)
	{
    2308:	b580      	push	{r7, lr}
    230a:	b082      	sub	sp, #8
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
    2310:	460b      	mov	r3, r1
    2312:	70fb      	strb	r3, [r7, #3]
	persistentConfiguration.cycleDescriptionID = cycleID;
    2314:	78fa      	ldrb	r2, [r7, #3]
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	readCycleDescription(persistentConfiguration.cycle, persistentConfiguration.cycleDescriptionID);
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	f503 7163 	add.w	r1, r3, #908	; 0x38c
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
    2328:	b2db      	uxtb	r3, r3
    232a:	461a      	mov	r2, r3
    232c:	6878      	ldr	r0, [r7, #4]
    232e:	4b09      	ldr	r3, [pc, #36]	; (2354 <_ZN12States_Class26setPersistentConfigurationEh+0x4c>)
    2330:	4798      	blx	r3
   writeResult=memory.writePersistentConfigurationDataArea(persistentConfiguration);
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	f503 735f 	add.w	r3, r3, #892	; 0x37c
    2338:	4619      	mov	r1, r3
    233a:	4807      	ldr	r0, [pc, #28]	; (2358 <_ZN12States_Class26setPersistentConfigurationEh+0x50>)
    233c:	4b07      	ldr	r3, [pc, #28]	; (235c <_ZN12States_Class26setPersistentConfigurationEh+0x54>)
    233e:	4798      	blx	r3
    2340:	4603      	mov	r3, r0
    2342:	461a      	mov	r2, r3
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
	} 	
    234a:	bf00      	nop
    234c:	3708      	adds	r7, #8
    234e:	46bd      	mov	sp, r7
    2350:	bd80      	pop	{r7, pc}
    2352:	bf00      	nop
    2354:	00002361 	.word	0x00002361
    2358:	20001724 	.word	0x20001724
    235c:	00001e11 	.word	0x00001e11

00002360 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh>:



bool States_Class::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    2360:	b580      	push	{r7, lr}
    2362:	b086      	sub	sp, #24
    2364:	af00      	add	r7, sp, #0
    2366:	60f8      	str	r0, [r7, #12]
    2368:	60b9      	str	r1, [r7, #8]
    236a:	4613      	mov	r3, r2
    236c:	71fb      	strb	r3, [r7, #7]
	bool	result(memory.readCycleDescription(cycle, id));
    236e:	79fb      	ldrb	r3, [r7, #7]
    2370:	461a      	mov	r2, r3
    2372:	68b9      	ldr	r1, [r7, #8]
    2374:	4804      	ldr	r0, [pc, #16]	; (2388 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x28>)
    2376:	4b05      	ldr	r3, [pc, #20]	; (238c <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x2c>)
    2378:	4798      	blx	r3
    237a:	4603      	mov	r3, r0
    237c:	75fb      	strb	r3, [r7, #23]

	return result;
    237e:	7dfb      	ldrb	r3, [r7, #23]
	}
    2380:	4618      	mov	r0, r3
    2382:	3718      	adds	r7, #24
    2384:	46bd      	mov	sp, r7
    2386:	bd80      	pop	{r7, pc}
    2388:	20001724 	.word	0x20001724
    238c:	00001d5f 	.word	0x00001d5f

00002390 <_ZN12States_Class15handleHVACEventER5event>:


void States_Class::handleHVACEvent(event& e)
	{
    2390:	b580      	push	{r7, lr}
    2392:	b084      	sub	sp, #16
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
    2398:	6039      	str	r1, [r7, #0]
	if (state.currentState != kGAINStateResume)
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    23a0:	2b02      	cmp	r3, #2
    23a2:	d005      	beq.n	23b0 <_ZN12States_Class15handleHVACEventER5event+0x20>
		state.callingState = state.currentState;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	f8d3 23e0 	ldr.w	r2, [r3, #992]	; 0x3e0
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
	state.currentState = e.data.wordData[0];
    23b0:	683b      	ldr	r3, [r7, #0]
    23b2:	891b      	ldrh	r3, [r3, #8]
    23b4:	461a      	mov	r2, r3
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	state.stateFlags = e.data.wordData[1];
    23bc:	683b      	ldr	r3, [r7, #0]
    23be:	895b      	ldrh	r3, [r3, #10]
    23c0:	461a      	mov	r2, r3
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
	state.stateEntryTime = hvacTimer.get_ticks();
    23c8:	486a      	ldr	r0, [pc, #424]	; (2574 <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    23ca:	4b6b      	ldr	r3, [pc, #428]	; (2578 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    23cc:	4798      	blx	r3
    23ce:	4603      	mov	r3, r0
    23d0:	461a      	mov	r2, r3
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    23d8:	4968      	ldr	r1, [pc, #416]	; (257c <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    23da:	4869      	ldr	r0, [pc, #420]	; (2580 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    23dc:	4b69      	ldr	r3, [pc, #420]	; (2584 <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    23de:	4798      	blx	r3
	usb.write(gainStateDescription[state.callingState]);
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    23e6:	4a68      	ldr	r2, [pc, #416]	; (2588 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    23e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23ec:	4619      	mov	r1, r3
    23ee:	4864      	ldr	r0, [pc, #400]	; (2580 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    23f0:	4b66      	ldr	r3, [pc, #408]	; (258c <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    23f2:	4798      	blx	r3
	usb << " to ";
    23f4:	4966      	ldr	r1, [pc, #408]	; (2590 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    23f6:	4862      	ldr	r0, [pc, #392]	; (2580 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    23f8:	4b66      	ldr	r3, [pc, #408]	; (2594 <_ZN12States_Class15handleHVACEventER5event+0x204>)
    23fa:	4798      	blx	r3
	usb.write(gainStateDescription[state.currentState]);
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2402:	4a61      	ldr	r2, [pc, #388]	; (2588 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    2404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2408:	4619      	mov	r1, r3
    240a:	485d      	ldr	r0, [pc, #372]	; (2580 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    240c:	4b5f      	ldr	r3, [pc, #380]	; (258c <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    240e:	4798      	blx	r3
	usb << " (flags == " << state.stateFlags << ')' << NEWLINE;
    2410:	4961      	ldr	r1, [pc, #388]	; (2598 <_ZN12States_Class15handleHVACEventER5event+0x208>)
    2412:	485b      	ldr	r0, [pc, #364]	; (2580 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2414:	4b61      	ldr	r3, [pc, #388]	; (259c <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    2416:	4798      	blx	r3
    2418:	4602      	mov	r2, r0
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
    2420:	4619      	mov	r1, r3
    2422:	4610      	mov	r0, r2
    2424:	4b5e      	ldr	r3, [pc, #376]	; (25a0 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    2426:	4798      	blx	r3
    2428:	4602      	mov	r2, r0
    242a:	2329      	movs	r3, #41	; 0x29
    242c:	73fb      	strb	r3, [r7, #15]
    242e:	f107 030f 	add.w	r3, r7, #15
    2432:	4619      	mov	r1, r3
    2434:	4610      	mov	r0, r2
    2436:	4b5b      	ldr	r3, [pc, #364]	; (25a4 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    2438:	4798      	blx	r3
    243a:	4603      	mov	r3, r0
    243c:	495a      	ldr	r1, [pc, #360]	; (25a8 <_ZN12States_Class15handleHVACEventER5event+0x218>)
    243e:	4618      	mov	r0, r3
    2440:	4b5a      	ldr	r3, [pc, #360]	; (25ac <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    2442:	4798      	blx	r3
	
#endif

	saveCurrentState();
    2444:	6878      	ldr	r0, [r7, #4]
    2446:	4b5a      	ldr	r3, [pc, #360]	; (25b0 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    2448:	4798      	blx	r3

	switch (state.currentState)
    244a:	687b      	ldr	r3, [r7, #4]
    244c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2450:	3b01      	subs	r3, #1
    2452:	2b0f      	cmp	r3, #15
    2454:	f200 8084 	bhi.w	2560 <_ZN12States_Class15handleHVACEventER5event+0x1d0>
    2458:	a201      	add	r2, pc, #4	; (adr r2, 2460 <_ZN12States_Class15handleHVACEventER5event+0xd0>)
    245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    245e:	bf00      	nop
    2460:	000024a1 	.word	0x000024a1
    2464:	000024b1 	.word	0x000024b1
    2468:	000024c1 	.word	0x000024c1
    246c:	000024d1 	.word	0x000024d1
    2470:	000024e1 	.word	0x000024e1
    2474:	000024f1 	.word	0x000024f1
    2478:	00002561 	.word	0x00002561
    247c:	00002561 	.word	0x00002561
    2480:	00002501 	.word	0x00002501
    2484:	00002521 	.word	0x00002521
    2488:	00002561 	.word	0x00002561
    248c:	00002511 	.word	0x00002511
    2490:	00002561 	.word	0x00002561
    2494:	00002531 	.word	0x00002531
    2498:	00002541 	.word	0x00002541
    249c:	00002551 	.word	0x00002551
		{
		case kGAINStateInitialize:
			handleStateInitialize(state.stateFlags);
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24a6:	4619      	mov	r1, r3
    24a8:	6878      	ldr	r0, [r7, #4]
    24aa:	4b42      	ldr	r3, [pc, #264]	; (25b4 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    24ac:	4798      	blx	r3
			break;
    24ae:	e05c      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateResume:
			handleStateResume(state.stateFlags);
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24b6:	4619      	mov	r1, r3
    24b8:	6878      	ldr	r0, [r7, #4]
    24ba:	4b3f      	ldr	r3, [pc, #252]	; (25b8 <_ZN12States_Class15handleHVACEventER5event+0x228>)
    24bc:	4798      	blx	r3
			break;
    24be:	e054      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyOFF:
			handleStateStandbyOFF(state.stateFlags);
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24c6:	4619      	mov	r1, r3
    24c8:	6878      	ldr	r0, [r7, #4]
    24ca:	4b3c      	ldr	r3, [pc, #240]	; (25bc <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    24cc:	4798      	blx	r3
			break;
    24ce:	e04c      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStatePrepareStandbyON:
			handleStatePrepareStandbyON(state.stateFlags);
    24d0:	687b      	ldr	r3, [r7, #4]
    24d2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24d6:	4619      	mov	r1, r3
    24d8:	6878      	ldr	r0, [r7, #4]
    24da:	4b39      	ldr	r3, [pc, #228]	; (25c0 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    24dc:	4798      	blx	r3
			break;
    24de:	e044      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyON:
			handleStateStandbyON(state.stateFlags);
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24e6:	4619      	mov	r1, r3
    24e8:	6878      	ldr	r0, [r7, #4]
    24ea:	4b36      	ldr	r3, [pc, #216]	; (25c4 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    24ec:	4798      	blx	r3
			break;
    24ee:	e03c      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyReady:
			handleStateStandbyReady(state.stateFlags);
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    24f6:	4619      	mov	r1, r3
    24f8:	6878      	ldr	r0, [r7, #4]
    24fa:	4b33      	ldr	r3, [pc, #204]	; (25c8 <_ZN12States_Class15handleHVACEventER5event+0x238>)
    24fc:	4798      	blx	r3
			break;
    24fe:	e034      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateON:
			handleStateON(state.stateFlags);
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    2506:	4619      	mov	r1, r3
    2508:	6878      	ldr	r0, [r7, #4]
    250a:	4b30      	ldr	r3, [pc, #192]	; (25cc <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    250c:	4798      	blx	r3
			break;
    250e:	e02c      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateFinished:
			handleStateFinished(state.stateFlags);
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    2516:	4619      	mov	r1, r3
    2518:	6878      	ldr	r0, [r7, #4]
    251a:	4b2d      	ldr	r3, [pc, #180]	; (25d0 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    251c:	4798      	blx	r3
			break;
    251e:	e024      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStoppedProcess:
			handleStateStoppedProcess(state.stateFlags);
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    2526:	4619      	mov	r1, r3
    2528:	6878      	ldr	r0, [r7, #4]
    252a:	4b2a      	ldr	r3, [pc, #168]	; (25d4 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    252c:	4798      	blx	r3
			break;
    252e:	e01c      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateSelfProtect:
			handleStateSelfProtect(state.stateFlags);
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    2536:	4619      	mov	r1, r3
    2538:	6878      	ldr	r0, [r7, #4]
    253a:	4b27      	ldr	r3, [pc, #156]	; (25d8 <_ZN12States_Class15handleHVACEventER5event+0x248>)
    253c:	4798      	blx	r3
			break;
    253e:	e014      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateError:
			handleStateError(state.stateFlags);
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    2546:	4619      	mov	r1, r3
    2548:	6878      	ldr	r0, [r7, #4]
    254a:	4b24      	ldr	r3, [pc, #144]	; (25dc <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    254c:	4798      	blx	r3
			break;
    254e:	e00c      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateMaintenance:
			handleStateMaintenance(state.stateFlags);
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
    2556:	4619      	mov	r1, r3
    2558:	6878      	ldr	r0, [r7, #4]
    255a:	4b21      	ldr	r3, [pc, #132]	; (25e0 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    255c:	4798      	blx	r3
			break;
    255e:	e004      	b.n	256a <_ZN12States_Class15handleHVACEventER5event+0x1da>

		default:
			handleStateError(kGAINErrorIllegalStateTransition);
    2560:	2102      	movs	r1, #2
    2562:	6878      	ldr	r0, [r7, #4]
    2564:	4b1d      	ldr	r3, [pc, #116]	; (25dc <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    2566:	4798      	blx	r3
			break;
    2568:	bf00      	nop
		}
	}
    256a:	bf00      	nop
    256c:	3710      	adds	r7, #16
    256e:	46bd      	mov	sp, r7
    2570:	bd80      	pop	{r7, pc}
    2572:	bf00      	nop
    2574:	20004e18 	.word	0x20004e18
    2578:	000135cd 	.word	0x000135cd
    257c:	0001a9bc 	.word	0x0001a9bc
    2580:	20004e74 	.word	0x20004e74
    2584:	00002c65 	.word	0x00002c65
    2588:	20000004 	.word	0x20000004
    258c:	00002045 	.word	0x00002045
    2590:	0001a9e8 	.word	0x0001a9e8
    2594:	00002c85 	.word	0x00002c85
    2598:	0001a9f0 	.word	0x0001a9f0
    259c:	00001469 	.word	0x00001469
    25a0:	00000c35 	.word	0x00000c35
    25a4:	00002ca5 	.word	0x00002ca5
    25a8:	0001a9fc 	.word	0x0001a9fc
    25ac:	0000063d 	.word	0x0000063d
    25b0:	00002b15 	.word	0x00002b15
    25b4:	000025e5 	.word	0x000025e5
    25b8:	000026c1 	.word	0x000026c1
    25bc:	00002781 	.word	0x00002781
    25c0:	00002819 	.word	0x00002819
    25c4:	000028a9 	.word	0x000028a9
    25c8:	00002911 	.word	0x00002911
    25cc:	00002949 	.word	0x00002949
    25d0:	00002995 	.word	0x00002995
    25d4:	000029cd 	.word	0x000029cd
    25d8:	00002a0d 	.word	0x00002a0d
    25dc:	00002a45 	.word	0x00002a45
    25e0:	00002a7d 	.word	0x00002a7d

000025e4 <_ZN12States_Class21handleStateInitializeEm>:


void States_Class::handleStateInitialize(uint32 flags)
	{
    25e4:	b590      	push	{r4, r7, lr}
    25e6:	b089      	sub	sp, #36	; 0x24
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
    25ec:	6039      	str	r1, [r7, #0]
	event	e;
    25ee:	f107 030c 	add.w	r3, r7, #12
    25f2:	4618      	mov	r0, r3
    25f4:	4b22      	ldr	r3, [pc, #136]	; (2680 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    25f6:	4798      	blx	r3
   	uint16	selfTestResult(kGAINNoError);
    25f8:	2300      	movs	r3, #0
    25fa:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    25fc:	4921      	ldr	r1, [pc, #132]	; (2684 <_ZN12States_Class21handleStateInitializeEm+0xa0>)
    25fe:	4822      	ldr	r0, [pc, #136]	; (2688 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2600:	4b22      	ldr	r3, [pc, #136]	; (268c <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    2602:	4798      	blx	r3
    2604:	4602      	mov	r2, r0
    2606:	463b      	mov	r3, r7
    2608:	4619      	mov	r1, r3
    260a:	4610      	mov	r0, r2
    260c:	4b20      	ldr	r3, [pc, #128]	; (2690 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    260e:	4798      	blx	r3
    2610:	4603      	mov	r3, r0
    2612:	4920      	ldr	r1, [pc, #128]	; (2694 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    2614:	4618      	mov	r0, r3
    2616:	4b20      	ldr	r3, [pc, #128]	; (2698 <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    2618:	4798      	blx	r3
		
#endif
	
	
	listener.CheckEvent();
    261a:	4820      	ldr	r0, [pc, #128]	; (269c <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    261c:	4b20      	ldr	r3, [pc, #128]	; (26a0 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    261e:	4798      	blx	r3
	if (pBIT.isOK)
    2620:	4b20      	ldr	r3, [pc, #128]	; (26a4 <_ZN12States_Class21handleStateInitializeEm+0xc0>)
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	b2db      	uxtb	r3, r3
    2626:	2b00      	cmp	r3, #0
    2628:	d021      	beq.n	266e <_ZN12States_Class21handleStateInitializeEm+0x8a>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    262a:	491f      	ldr	r1, [pc, #124]	; (26a8 <_ZN12States_Class21handleStateInitializeEm+0xc4>)
    262c:	4816      	ldr	r0, [pc, #88]	; (2688 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    262e:	4b1f      	ldr	r3, [pc, #124]	; (26ac <_ZN12States_Class21handleStateInitializeEm+0xc8>)
    2630:	4798      	blx	r3
    2632:	4603      	mov	r3, r0
    2634:	4917      	ldr	r1, [pc, #92]	; (2694 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    2636:	4618      	mov	r0, r3
    2638:	4b17      	ldr	r3, [pc, #92]	; (2698 <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    263a:	4798      	blx	r3

		#ifdef _OFFLINE
		prepareStateChangeEvent(e, kGAINStateInterrupted);
		listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    263c:	6878      	ldr	r0, [r7, #4]
    263e:	4b1c      	ldr	r3, [pc, #112]	; (26b0 <_ZN12States_Class21handleStateInitializeEm+0xcc>)
    2640:	4798      	blx	r3
    2642:	4603      	mov	r3, r0
    2644:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kGAINNoError)
    2646:	8bfb      	ldrh	r3, [r7, #30]
    2648:	2b00      	cmp	r3, #0
    264a:	d10c      	bne.n	2666 <_ZN12States_Class21handleStateInitializeEm+0x82>
		{
			prepareStateChangeEvent(e, kGAINStateStandbyOFF);
    264c:	f107 010c 	add.w	r1, r7, #12
    2650:	2300      	movs	r3, #0
    2652:	2203      	movs	r2, #3
    2654:	6878      	ldr	r0, [r7, #4]
    2656:	4c17      	ldr	r4, [pc, #92]	; (26b4 <_ZN12States_Class21handleStateInitializeEm+0xd0>)
    2658:	47a0      	blx	r4
			listener.SendEventSelf(e);
    265a:	f107 030c 	add.w	r3, r7, #12
    265e:	4619      	mov	r1, r3
    2660:	480e      	ldr	r0, [pc, #56]	; (269c <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2662:	4b15      	ldr	r3, [pc, #84]	; (26b8 <_ZN12States_Class21handleStateInitializeEm+0xd4>)
    2664:	4798      	blx	r3
		}
		#endif

		listener.CheckEvent();
    2666:	480d      	ldr	r0, [pc, #52]	; (269c <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2668:	4b0d      	ldr	r3, [pc, #52]	; (26a0 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    266a:	4798      	blx	r3
	}



	
	}
    266c:	e003      	b.n	2676 <_ZN12States_Class21handleStateInitializeEm+0x92>
		Stop();
    266e:	2100      	movs	r1, #0
    2670:	6878      	ldr	r0, [r7, #4]
    2672:	4b12      	ldr	r3, [pc, #72]	; (26bc <_ZN12States_Class21handleStateInitializeEm+0xd8>)
    2674:	4798      	blx	r3
	}
    2676:	bf00      	nop
    2678:	3724      	adds	r7, #36	; 0x24
    267a:	46bd      	mov	sp, r7
    267c:	bd90      	pop	{r4, r7, pc}
    267e:	bf00      	nop
    2680:	00002005 	.word	0x00002005
    2684:	0001aa00 	.word	0x0001aa00
    2688:	20004e74 	.word	0x20004e74
    268c:	00002cc9 	.word	0x00002cc9
    2690:	00000c35 	.word	0x00000c35
    2694:	0001a9fc 	.word	0x0001a9fc
    2698:	0000063d 	.word	0x0000063d
    269c:	20004a90 	.word	0x20004a90
    26a0:	00011961 	.word	0x00011961
    26a4:	20002d30 	.word	0x20002d30
    26a8:	0001aa24 	.word	0x0001aa24
    26ac:	000014c9 	.word	0x000014c9
    26b0:	00002af1 	.word	0x00002af1
    26b4:	00002ab5 	.word	0x00002ab5
    26b8:	00011879 	.word	0x00011879
    26bc:	00002ba5 	.word	0x00002ba5

000026c0 <_ZN12States_Class17handleStateResumeEm>:


void States_Class::handleStateResume(uint32 flags)
	{
    26c0:	b590      	push	{r4, r7, lr}
    26c2:	b089      	sub	sp, #36	; 0x24
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
    26c8:	6039      	str	r1, [r7, #0]
	event	e;
    26ca:	f107 030c 	add.w	r3, r7, #12
    26ce:	4618      	mov	r0, r3
    26d0:	4b24      	ldr	r3, [pc, #144]	; (2764 <_ZN12States_Class17handleStateResumeEm+0xa4>)
    26d2:	4798      	blx	r3
	uint8	currentState(state.currentState);
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    26da:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kGAINNoError);
    26dc:	2300      	movs	r3, #0
    26de:	83bb      	strh	r3, [r7, #28]
#endif

#if __DEBUG__ > 3
	usb << "state.currentState (before) " << state.currentState << newline;
#endif
	memory.restoreWorkingStateForGAIN(state);
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    26e6:	4619      	mov	r1, r3
    26e8:	481f      	ldr	r0, [pc, #124]	; (2768 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    26ea:	4b20      	ldr	r3, [pc, #128]	; (276c <_ZN12States_Class17handleStateResumeEm+0xac>)
    26ec:	4798      	blx	r3
	usb << "state.currentState (after) " << state.currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kGAINNoError)
    26ee:	8bbb      	ldrh	r3, [r7, #28]
    26f0:	2b00      	cmp	r3, #0
    26f2:	d125      	bne.n	2740 <_ZN12States_Class17handleStateResumeEm+0x80>
    {
        switch (state.currentState)
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    26fa:	2b09      	cmp	r3, #9
    26fc:	d002      	beq.n	2704 <_ZN12States_Class17handleStateResumeEm+0x44>
    26fe:	2b0a      	cmp	r3, #10
    2700:	d00b      	beq.n	271a <_ZN12States_Class17handleStateResumeEm+0x5a>
    2702:	e012      	b.n	272a <_ZN12States_Class17handleStateResumeEm+0x6a>
        {
        case kGAINStateON:
            prepareStateChangeEvent(e, state.currentState, true);
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    270a:	b29a      	uxth	r2, r3
    270c:	f107 010c 	add.w	r1, r7, #12
    2710:	2301      	movs	r3, #1
    2712:	6878      	ldr	r0, [r7, #4]
    2714:	4c16      	ldr	r4, [pc, #88]	; (2770 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    2716:	47a0      	blx	r4
            break;
    2718:	e012      	b.n	2740 <_ZN12States_Class17handleStateResumeEm+0x80>

        case kGAINStateStoppedProcess:
            prepareStateChangeEvent(e, kGAINStateStoppedProcess);
    271a:	f107 010c 	add.w	r1, r7, #12
    271e:	2300      	movs	r3, #0
    2720:	220a      	movs	r2, #10
    2722:	6878      	ldr	r0, [r7, #4]
    2724:	4c12      	ldr	r4, [pc, #72]	; (2770 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    2726:	47a0      	blx	r4
            break;
    2728:	e00a      	b.n	2740 <_ZN12States_Class17handleStateResumeEm+0x80>

        default:
            prepareStateChangeEvent(e, state.currentState);
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2730:	b29a      	uxth	r2, r3
    2732:	f107 010c 	add.w	r1, r7, #12
    2736:	2300      	movs	r3, #0
    2738:	6878      	ldr	r0, [r7, #4]
    273a:	4c0d      	ldr	r4, [pc, #52]	; (2770 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    273c:	47a0      	blx	r4
            break;
    273e:	bf00      	nop
        }
    }

	state.currentState = currentState;
    2740:	7ffa      	ldrb	r2, [r7, #31]
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

	listener.CheckEvent();
    2748:	480a      	ldr	r0, [pc, #40]	; (2774 <_ZN12States_Class17handleStateResumeEm+0xb4>)
    274a:	4b0b      	ldr	r3, [pc, #44]	; (2778 <_ZN12States_Class17handleStateResumeEm+0xb8>)
    274c:	4798      	blx	r3
	listener.SendEventSelf(e);
    274e:	f107 030c 	add.w	r3, r7, #12
    2752:	4619      	mov	r1, r3
    2754:	4807      	ldr	r0, [pc, #28]	; (2774 <_ZN12States_Class17handleStateResumeEm+0xb4>)
    2756:	4b09      	ldr	r3, [pc, #36]	; (277c <_ZN12States_Class17handleStateResumeEm+0xbc>)
    2758:	4798      	blx	r3
	}
    275a:	bf00      	nop
    275c:	3724      	adds	r7, #36	; 0x24
    275e:	46bd      	mov	sp, r7
    2760:	bd90      	pop	{r4, r7, pc}
    2762:	bf00      	nop
    2764:	00002005 	.word	0x00002005
    2768:	20001724 	.word	0x20001724
    276c:	00001e6d 	.word	0x00001e6d
    2770:	00002ab5 	.word	0x00002ab5
    2774:	20004a90 	.word	0x20004a90
    2778:	00011961 	.word	0x00011961
    277c:	00011879 	.word	0x00011879

00002780 <_ZN12States_Class21handleStateStandbyOFFEm>:
				
void States_Class::handleStateStandbyOFF(uint32 flags)
	{
    2780:	b580      	push	{r7, lr}
    2782:	b088      	sub	sp, #32
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
    2788:	6039      	str	r1, [r7, #0]
	event	e;
    278a:	f107 030c 	add.w	r3, r7, #12
    278e:	4618      	mov	r0, r3
    2790:	4b18      	ldr	r3, [pc, #96]	; (27f4 <_ZN12States_Class21handleStateStandbyOFFEm+0x74>)
    2792:	4798      	blx	r3
	bool	done(false);
    2794:	2300      	movs	r3, #0
    2796:	77fb      	strb	r3, [r7, #31]
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    2798:	4917      	ldr	r1, [pc, #92]	; (27f8 <_ZN12States_Class21handleStateStandbyOFFEm+0x78>)
    279a:	4818      	ldr	r0, [pc, #96]	; (27fc <_ZN12States_Class21handleStateStandbyOFFEm+0x7c>)
    279c:	4b18      	ldr	r3, [pc, #96]	; (2800 <_ZN12States_Class21handleStateStandbyOFFEm+0x80>)
    279e:	4798      	blx	r3
    27a0:	4603      	mov	r3, r0
    27a2:	4918      	ldr	r1, [pc, #96]	; (2804 <_ZN12States_Class21handleStateStandbyOFFEm+0x84>)
    27a4:	4618      	mov	r0, r3
    27a6:	4b18      	ldr	r3, [pc, #96]	; (2808 <_ZN12States_Class21handleStateStandbyOFFEm+0x88>)
    27a8:	4798      	blx	r3
		
#endif

	state.smpsTemperatureOutOfRangeEventSent = false;
    27aa:	687a      	ldr	r2, [r7, #4]
    27ac:	f892 3434 	ldrb.w	r3, [r2, #1076]	; 0x434
    27b0:	f36f 0382 	bfc	r3, #2, #1
    27b4:	f882 3434 	strb.w	r3, [r2, #1076]	; 0x434
	state.magnetronTemperatureOutOfRangeEventSent = false;
    27b8:	687a      	ldr	r2, [r7, #4]
    27ba:	f892 3434 	ldrb.w	r3, [r2, #1076]	; 0x434
    27be:	f36f 1386 	bfc	r3, #6, #1
    27c2:	f882 3434 	strb.w	r3, [r2, #1076]	; 0x434
	state.exhaustTemperatureOutOfRangeEventSent = false;
    27c6:	687a      	ldr	r2, [r7, #4]
    27c8:	f892 3434 	ldrb.w	r3, [r2, #1076]	; 0x434
    27cc:	f36f 1304 	bfc	r3, #4, #1
    27d0:	f882 3434 	strb.w	r3, [r2, #1076]	; 0x434

	state.magnetronFanFailureDetectionTime = forever;
    27d4:	4b0d      	ldr	r3, [pc, #52]	; (280c <_ZN12States_Class21handleStateStandbyOFFEm+0x8c>)
    27d6:	681a      	ldr	r2, [r3, #0]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424




	listener.SendEventSelf(e);
    27de:	f107 030c 	add.w	r3, r7, #12
    27e2:	4619      	mov	r1, r3
    27e4:	480a      	ldr	r0, [pc, #40]	; (2810 <_ZN12States_Class21handleStateStandbyOFFEm+0x90>)
    27e6:	4b0b      	ldr	r3, [pc, #44]	; (2814 <_ZN12States_Class21handleStateStandbyOFFEm+0x94>)
    27e8:	4798      	blx	r3
	}
    27ea:	bf00      	nop
    27ec:	3720      	adds	r7, #32
    27ee:	46bd      	mov	sp, r7
    27f0:	bd80      	pop	{r7, pc}
    27f2:	bf00      	nop
    27f4:	00002005 	.word	0x00002005
    27f8:	0001aa3c 	.word	0x0001aa3c
    27fc:	20004e74 	.word	0x20004e74
    2800:	000014c9 	.word	0x000014c9
    2804:	0001a9fc 	.word	0x0001a9fc
    2808:	0000063d 	.word	0x0000063d
    280c:	0001bf3c 	.word	0x0001bf3c
    2810:	20004a90 	.word	0x20004a90
    2814:	00011879 	.word	0x00011879

00002818 <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    2818:	b580      	push	{r7, lr}
    281a:	b08a      	sub	sp, #40	; 0x28
    281c:	af00      	add	r7, sp, #0
    281e:	6078      	str	r0, [r7, #4]
    2820:	6039      	str	r1, [r7, #0]
	event	e;
    2822:	f107 030c 	add.w	r3, r7, #12
    2826:	4618      	mov	r0, r3
    2828:	4b15      	ldr	r3, [pc, #84]	; (2880 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x68>)
    282a:	4798      	blx	r3
	bool	done(false);
    282c:	2300      	movs	r3, #0
    282e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(state.alarmState?kConnectFlagsAlarmOn:0);
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	f893 3435 	ldrb.w	r3, [r3, #1077]	; 0x435
    2838:	f3c3 1380 	ubfx	r3, r3, #6, #1
    283c:	b2db      	uxtb	r3, r3
    283e:	2b00      	cmp	r3, #0
    2840:	d001      	beq.n	2846 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x2e>
    2842:	2301      	movs	r3, #1
    2844:	e000      	b.n	2848 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x30>
    2846:	2300      	movs	r3, #0
    2848:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    284a:	490e      	ldr	r1, [pc, #56]	; (2884 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    284c:	480e      	ldr	r0, [pc, #56]	; (2888 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    284e:	4b0f      	ldr	r3, [pc, #60]	; (288c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    2850:	4798      	blx	r3
    2852:	4603      	mov	r3, r0
    2854:	490e      	ldr	r1, [pc, #56]	; (2890 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    2856:	4618      	mov	r0, r3
    2858:	4b0e      	ldr	r3, [pc, #56]	; (2894 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    285a:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.get_ticks() + 4000;
    285c:	480e      	ldr	r0, [pc, #56]	; (2898 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    285e:	4b0f      	ldr	r3, [pc, #60]	; (289c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    2860:	4798      	blx	r3
    2862:	4603      	mov	r3, r0
    2864:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    2868:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    286a:	f107 030c 	add.w	r3, r7, #12
    286e:	4619      	mov	r1, r3
    2870:	480b      	ldr	r0, [pc, #44]	; (28a0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    2872:	4b0c      	ldr	r3, [pc, #48]	; (28a4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    2874:	4798      	blx	r3
	}
    2876:	bf00      	nop
    2878:	3728      	adds	r7, #40	; 0x28
    287a:	46bd      	mov	sp, r7
    287c:	bd80      	pop	{r7, pc}
    287e:	bf00      	nop
    2880:	00002005 	.word	0x00002005
    2884:	0001aa54 	.word	0x0001aa54
    2888:	20004e74 	.word	0x20004e74
    288c:	00002ce9 	.word	0x00002ce9
    2890:	0001a9fc 	.word	0x0001a9fc
    2894:	0000063d 	.word	0x0000063d
    2898:	20004e18 	.word	0x20004e18
    289c:	000135cd 	.word	0x000135cd
    28a0:	20004a90 	.word	0x20004a90
    28a4:	00011879 	.word	0x00011879

000028a8 <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    28a8:	b580      	push	{r7, lr}
    28aa:	b088      	sub	sp, #32
    28ac:	af00      	add	r7, sp, #0
    28ae:	6078      	str	r0, [r7, #4]
    28b0:	6039      	str	r1, [r7, #0]
	event	e;
    28b2:	f107 030c 	add.w	r3, r7, #12
    28b6:	4618      	mov	r0, r3
    28b8:	4b12      	ldr	r3, [pc, #72]	; (2904 <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    28ba:	4798      	blx	r3
	bool	done(false);
    28bc:	2300      	movs	r3, #0
    28be:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	state.latchClosedConfirmPending = false;
    28c0:	687a      	ldr	r2, [r7, #4]
    28c2:	f892 3435 	ldrb.w	r3, [r2, #1077]	; 0x435
    28c6:	f36f 03c3 	bfc	r3, #3, #1
    28ca:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
    state.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
    28d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28d8:	fb02 f203 	mul.w	r2, r2, r3
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	
	state.reedRelayOpen = false;
    28e2:	687a      	ldr	r2, [r7, #4]
    28e4:	f892 3435 	ldrb.w	r3, [r2, #1077]	; 0x435
    28e8:	f36f 0382 	bfc	r3, #2, #1
    28ec:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
	
	listener.SendEventSelf(e);
    28f0:	f107 030c 	add.w	r3, r7, #12
    28f4:	4619      	mov	r1, r3
    28f6:	4804      	ldr	r0, [pc, #16]	; (2908 <_ZN12States_Class20handleStateStandbyONEm+0x60>)
    28f8:	4b04      	ldr	r3, [pc, #16]	; (290c <_ZN12States_Class20handleStateStandbyONEm+0x64>)
    28fa:	4798      	blx	r3
	}
    28fc:	bf00      	nop
    28fe:	3720      	adds	r7, #32
    2900:	46bd      	mov	sp, r7
    2902:	bd80      	pop	{r7, pc}
    2904:	00002005 	.word	0x00002005
    2908:	20004a90 	.word	0x20004a90
    290c:	00011879 	.word	0x00011879

00002910 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    2910:	b580      	push	{r7, lr}
    2912:	b088      	sub	sp, #32
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
    2918:	6039      	str	r1, [r7, #0]
	event	e;
    291a:	f107 030c 	add.w	r3, r7, #12
    291e:	4618      	mov	r0, r3
    2920:	4b06      	ldr	r3, [pc, #24]	; (293c <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    2922:	4798      	blx	r3
	bool	done(false);
    2924:	2300      	movs	r3, #0
    2926:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    2928:	f107 030c 	add.w	r3, r7, #12
    292c:	4619      	mov	r1, r3
    292e:	4804      	ldr	r0, [pc, #16]	; (2940 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    2930:	4b04      	ldr	r3, [pc, #16]	; (2944 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    2932:	4798      	blx	r3
	}
    2934:	bf00      	nop
    2936:	3720      	adds	r7, #32
    2938:	46bd      	mov	sp, r7
    293a:	bd80      	pop	{r7, pc}
    293c:	00002005 	.word	0x00002005
    2940:	20004a90 	.word	0x20004a90
    2944:	00011879 	.word	0x00011879

00002948 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    2948:	b580      	push	{r7, lr}
    294a:	b088      	sub	sp, #32
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
    2950:	6039      	str	r1, [r7, #0]
	event	e;
    2952:	f107 030c 	add.w	r3, r7, #12
    2956:	4618      	mov	r0, r3
    2958:	4b0b      	ldr	r3, [pc, #44]	; (2988 <_ZN12States_Class13handleStateONEm+0x40>)
    295a:	4798      	blx	r3
	bool	done(false);
    295c:	2300      	movs	r3, #0
    295e:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    2960:	2301      	movs	r3, #1
    2962:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    2964:	2301      	movs	r3, #1
    2966:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    2968:	683b      	ldr	r3, [r7, #0]
    296a:	2b00      	cmp	r3, #0
    296c:	bf14      	ite	ne
    296e:	2301      	movne	r3, #1
    2970:	2300      	moveq	r3, #0
    2972:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    2974:	f107 030c 	add.w	r3, r7, #12
    2978:	4619      	mov	r1, r3
    297a:	4804      	ldr	r0, [pc, #16]	; (298c <_ZN12States_Class13handleStateONEm+0x44>)
    297c:	4b04      	ldr	r3, [pc, #16]	; (2990 <_ZN12States_Class13handleStateONEm+0x48>)
    297e:	4798      	blx	r3
	}
    2980:	bf00      	nop
    2982:	3720      	adds	r7, #32
    2984:	46bd      	mov	sp, r7
    2986:	bd80      	pop	{r7, pc}
    2988:	00002005 	.word	0x00002005
    298c:	20004a90 	.word	0x20004a90
    2990:	00011879 	.word	0x00011879

00002994 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    2994:	b580      	push	{r7, lr}
    2996:	b088      	sub	sp, #32
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    299c:	6039      	str	r1, [r7, #0]
	event	e;
    299e:	f107 030c 	add.w	r3, r7, #12
    29a2:	4618      	mov	r0, r3
    29a4:	4b06      	ldr	r3, [pc, #24]	; (29c0 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    29a6:	4798      	blx	r3
	bool	done(false);
    29a8:	2300      	movs	r3, #0
    29aa:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    29ac:	f107 030c 	add.w	r3, r7, #12
    29b0:	4619      	mov	r1, r3
    29b2:	4804      	ldr	r0, [pc, #16]	; (29c4 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    29b6:	4798      	blx	r3
	}
    29b8:	bf00      	nop
    29ba:	3720      	adds	r7, #32
    29bc:	46bd      	mov	sp, r7
    29be:	bd80      	pop	{r7, pc}
    29c0:	00002005 	.word	0x00002005
    29c4:	20004a90 	.word	0x20004a90
    29c8:	00011879 	.word	0x00011879

000029cc <_ZN12States_Class25handleStateStoppedProcessEm>:

void States_Class::handleStateStoppedProcess(uint32 flags)
	{
    29cc:	b580      	push	{r7, lr}
    29ce:	b088      	sub	sp, #32
    29d0:	af00      	add	r7, sp, #0
    29d2:	6078      	str	r0, [r7, #4]
    29d4:	6039      	str	r1, [r7, #0]
	event	e;
    29d6:	f107 030c 	add.w	r3, r7, #12
    29da:	4618      	mov	r0, r3
    29dc:	4b08      	ldr	r3, [pc, #32]	; (2a00 <_ZN12States_Class25handleStateStoppedProcessEm+0x34>)
    29de:	4798      	blx	r3
 	bool	done(false);
    29e0:	2300      	movs	r3, #0
    29e2:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    29e4:	2301      	movs	r3, #1
    29e6:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    29e8:	683b      	ldr	r3, [r7, #0]
    29ea:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    29ec:	f107 030c 	add.w	r3, r7, #12
    29f0:	4619      	mov	r1, r3
    29f2:	4804      	ldr	r0, [pc, #16]	; (2a04 <_ZN12States_Class25handleStateStoppedProcessEm+0x38>)
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <_ZN12States_Class25handleStateStoppedProcessEm+0x3c>)
    29f6:	4798      	blx	r3
	}
    29f8:	bf00      	nop
    29fa:	3720      	adds	r7, #32
    29fc:	46bd      	mov	sp, r7
    29fe:	bd80      	pop	{r7, pc}
    2a00:	00002005 	.word	0x00002005
    2a04:	20004a90 	.word	0x20004a90
    2a08:	00011879 	.word	0x00011879

00002a0c <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b088      	sub	sp, #32
    2a10:	af00      	add	r7, sp, #0
    2a12:	6078      	str	r0, [r7, #4]
    2a14:	6039      	str	r1, [r7, #0]
	event	e;
    2a16:	f107 030c 	add.w	r3, r7, #12
    2a1a:	4618      	mov	r0, r3
    2a1c:	4b06      	ldr	r3, [pc, #24]	; (2a38 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    2a1e:	4798      	blx	r3
	bool	done(false);
    2a20:	2300      	movs	r3, #0
    2a22:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2a24:	f107 030c 	add.w	r3, r7, #12
    2a28:	4619      	mov	r1, r3
    2a2a:	4804      	ldr	r0, [pc, #16]	; (2a3c <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    2a2c:	4b04      	ldr	r3, [pc, #16]	; (2a40 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    2a2e:	4798      	blx	r3
	}
    2a30:	bf00      	nop
    2a32:	3720      	adds	r7, #32
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}
    2a38:	00002005 	.word	0x00002005
    2a3c:	20004a90 	.word	0x20004a90
    2a40:	00011879 	.word	0x00011879

00002a44 <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    2a44:	b580      	push	{r7, lr}
    2a46:	b088      	sub	sp, #32
    2a48:	af00      	add	r7, sp, #0
    2a4a:	6078      	str	r0, [r7, #4]
    2a4c:	6039      	str	r1, [r7, #0]
	event	e;
    2a4e:	f107 030c 	add.w	r3, r7, #12
    2a52:	4618      	mov	r0, r3
    2a54:	4b06      	ldr	r3, [pc, #24]	; (2a70 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    2a56:	4798      	blx	r3
	bool	done(false);
    2a58:	2300      	movs	r3, #0
    2a5a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2a5c:	f107 030c 	add.w	r3, r7, #12
    2a60:	4619      	mov	r1, r3
    2a62:	4804      	ldr	r0, [pc, #16]	; (2a74 <_ZN12States_Class16handleStateErrorEm+0x30>)
    2a64:	4b04      	ldr	r3, [pc, #16]	; (2a78 <_ZN12States_Class16handleStateErrorEm+0x34>)
    2a66:	4798      	blx	r3
	}
    2a68:	bf00      	nop
    2a6a:	3720      	adds	r7, #32
    2a6c:	46bd      	mov	sp, r7
    2a6e:	bd80      	pop	{r7, pc}
    2a70:	00002005 	.word	0x00002005
    2a74:	20004a90 	.word	0x20004a90
    2a78:	00011879 	.word	0x00011879

00002a7c <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b088      	sub	sp, #32
    2a80:	af00      	add	r7, sp, #0
    2a82:	6078      	str	r0, [r7, #4]
    2a84:	6039      	str	r1, [r7, #0]
	event	e;
    2a86:	f107 030c 	add.w	r3, r7, #12
    2a8a:	4618      	mov	r0, r3
    2a8c:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    2a8e:	4798      	blx	r3
	bool	done(false);
    2a90:	2300      	movs	r3, #0
    2a92:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2a94:	f107 030c 	add.w	r3, r7, #12
    2a98:	4619      	mov	r1, r3
    2a9a:	4804      	ldr	r0, [pc, #16]	; (2aac <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    2a9c:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    2a9e:	4798      	blx	r3
	}
    2aa0:	bf00      	nop
    2aa2:	3720      	adds	r7, #32
    2aa4:	46bd      	mov	sp, r7
    2aa6:	bd80      	pop	{r7, pc}
    2aa8:	00002005 	.word	0x00002005
    2aac:	20004a90 	.word	0x20004a90
    2ab0:	00011879 	.word	0x00011879

00002ab4 <_ZN12States_Class23prepareStateChangeEventER5eventtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(event& e, uint16 newState, uint16 data)
	{
    2ab4:	b480      	push	{r7}
    2ab6:	b085      	sub	sp, #20
    2ab8:	af00      	add	r7, sp, #0
    2aba:	60f8      	str	r0, [r7, #12]
    2abc:	60b9      	str	r1, [r7, #8]
    2abe:	4611      	mov	r1, r2
    2ac0:	461a      	mov	r2, r3
    2ac2:	460b      	mov	r3, r1
    2ac4:	80fb      	strh	r3, [r7, #6]
    2ac6:	4613      	mov	r3, r2
    2ac8:	80bb      	strh	r3, [r7, #4]
	e.eventClass =(EventClass)kGAINEventClass;
    2aca:	68bb      	ldr	r3, [r7, #8]
    2acc:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ad0:	801a      	strh	r2, [r3, #0]
	e.eventType = (EventType)kGAINSwitchStateEvent;
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ad8:	805a      	strh	r2, [r3, #2]
	e.data.wordData[0] = newState;
    2ada:	68bb      	ldr	r3, [r7, #8]
    2adc:	88fa      	ldrh	r2, [r7, #6]
    2ade:	811a      	strh	r2, [r3, #8]
	e.data.wordData[1] = data;
    2ae0:	68bb      	ldr	r3, [r7, #8]
    2ae2:	88ba      	ldrh	r2, [r7, #4]
    2ae4:	815a      	strh	r2, [r3, #10]
	}
    2ae6:	bf00      	nop
    2ae8:	3714      	adds	r7, #20
    2aea:	46bd      	mov	sp, r7
    2aec:	bc80      	pop	{r7}
    2aee:	4770      	bx	lr

00002af0 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    2af0:	b580      	push	{r7, lr}
    2af2:	b088      	sub	sp, #32
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
	event	e;
    2af8:	f107 030c 	add.w	r3, r7, #12
    2afc:	4618      	mov	r0, r3
    2afe:	4b04      	ldr	r3, [pc, #16]	; (2b10 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    2b00:	4798      	blx	r3
	uint16	selfTestResult(kGAINNoError);
    2b02:	2300      	movs	r3, #0
    2b04:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    2b06:	8bfb      	ldrh	r3, [r7, #30]
	}
    2b08:	4618      	mov	r0, r3
    2b0a:	3720      	adds	r7, #32
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	00002005 	.word	0x00002005

00002b14 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    2b14:	b580      	push	{r7, lr}
    2b16:	b084      	sub	sp, #16
    2b18:	af00      	add	r7, sp, #0
    2b1a:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    2b1c:	f107 0308 	add.w	r3, r7, #8
    2b20:	4619      	mov	r1, r3
    2b22:	4819      	ldr	r0, [pc, #100]	; (2b88 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    2b24:	4b19      	ldr	r3, [pc, #100]	; (2b8c <_ZN12States_Class16saveCurrentStateEv+0x78>)
    2b26:	4798      	blx	r3
		state.dateTime=cdt;
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
    2b2e:	f107 0208 	add.w	r2, r7, #8
    2b32:	e892 0003 	ldmia.w	r2, {r0, r1}
    2b36:	e883 0003 	stmia.w	r3, {r0, r1}
		state.now = calendar.convert_datetime_to_timestamp(&cdt);
    2b3a:	f107 0308 	add.w	r3, r7, #8
    2b3e:	4619      	mov	r1, r3
    2b40:	4811      	ldr	r0, [pc, #68]	; (2b88 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    2b42:	4b13      	ldr	r3, [pc, #76]	; (2b90 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    2b44:	4798      	blx	r3
    2b46:	4603      	mov	r3, r0
    2b48:	461a      	mov	r2, r3
    2b4a:	687b      	ldr	r3, [r7, #4]
    2b4c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	if (state.currentState!=kGAINStateMaintenance){
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2b56:	2b10      	cmp	r3, #16
    2b58:	d012      	beq.n	2b80 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		memory.WriteFastCurrentState(state);
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2b60:	4619      	mov	r1, r3
    2b62:	480c      	ldr	r0, [pc, #48]	; (2b94 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    2b64:	4b0c      	ldr	r3, [pc, #48]	; (2b98 <_ZN12States_Class16saveCurrentStateEv+0x84>)
    2b66:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (state.currentState==0)
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d106      	bne.n	2b80 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		{
			memory.SaveApplicationState(state);
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2b78:	4619      	mov	r1, r3
    2b7a:	4808      	ldr	r0, [pc, #32]	; (2b9c <_ZN12States_Class16saveCurrentStateEv+0x88>)
    2b7c:	4b08      	ldr	r3, [pc, #32]	; (2ba0 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    2b7e:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    2b80:	bf00      	nop
    2b82:	3710      	adds	r7, #16
    2b84:	46bd      	mov	sp, r7
    2b86:	bd80      	pop	{r7, pc}
    2b88:	20004d40 	.word	0x20004d40
    2b8c:	00012d7d 	.word	0x00012d7d
    2b90:	00012e6d 	.word	0x00012e6d
    2b94:	200018d0 	.word	0x200018d0
    2b98:	00001051 	.word	0x00001051
    2b9c:	20001238 	.word	0x20001238
    2ba0:	000017dd 	.word	0x000017dd

00002ba4 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    2ba4:	b480      	push	{r7}
    2ba6:	b083      	sub	sp, #12
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
    2bac:	460b      	mov	r3, r1
    2bae:	70fb      	strb	r3, [r7, #3]
	return	layer;
    2bb0:	78fb      	ldrb	r3, [r7, #3]
}
    2bb2:	4618      	mov	r0, r3
    2bb4:	370c      	adds	r7, #12
    2bb6:	46bd      	mov	sp, r7
    2bb8:	bc80      	pop	{r7}
    2bba:	4770      	bx	lr

00002bbc <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    2bc4:	6039      	str	r1, [r7, #0]
	hs=state;
    2bc6:	683a      	ldr	r2, [r7, #0]
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	4610      	mov	r0, r2
    2bcc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2bd0:	227c      	movs	r2, #124	; 0x7c
    2bd2:	4619      	mov	r1, r3
    2bd4:	4b02      	ldr	r3, [pc, #8]	; (2be0 <_ZN12States_Class15GetCurrentStateER9HVACState+0x24>)
    2bd6:	4798      	blx	r3
}
    2bd8:	bf00      	nop
    2bda:	3708      	adds	r7, #8
    2bdc:	46bd      	mov	sp, r7
    2bde:	bd80      	pop	{r7, pc}
    2be0:	00016735 	.word	0x00016735

00002be4 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    2be4:	b580      	push	{r7, lr}
    2be6:	b082      	sub	sp, #8
    2be8:	af00      	add	r7, sp, #0
    2bea:	6078      	str	r0, [r7, #4]
    2bec:	6039      	str	r1, [r7, #0]
	configuration=cd;
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	683a      	ldr	r2, [r7, #0]
    2bf2:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
    2bf6:	4611      	mov	r1, r2
    2bf8:	22ac      	movs	r2, #172	; 0xac
    2bfa:	4618      	mov	r0, r3
    2bfc:	4b02      	ldr	r3, [pc, #8]	; (2c08 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    2bfe:	4798      	blx	r3
}
    2c00:	bf00      	nop
    2c02:	3708      	adds	r7, #8
    2c04:	46bd      	mov	sp, r7
    2c06:	bd80      	pop	{r7, pc}
    2c08:	00016735 	.word	0x00016735

00002c0c <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b082      	sub	sp, #8
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
    2c14:	6039      	str	r1, [r7, #0]
	state=hs;
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	683a      	ldr	r2, [r7, #0]
    2c1a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2c1e:	4611      	mov	r1, r2
    2c20:	227c      	movs	r2, #124	; 0x7c
    2c22:	4618      	mov	r0, r3
    2c24:	4b02      	ldr	r3, [pc, #8]	; (2c30 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    2c26:	4798      	blx	r3
}
    2c28:	bf00      	nop
    2c2a:	3708      	adds	r7, #8
    2c2c:	46bd      	mov	sp, r7
    2c2e:	bd80      	pop	{r7, pc}
    2c30:	00016735 	.word	0x00016735

00002c34 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    2c34:	b580      	push	{r7, lr}
    2c36:	b082      	sub	sp, #8
    2c38:	af00      	add	r7, sp, #0
    2c3a:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    2c3c:	22ac      	movs	r2, #172	; 0xac
    2c3e:	4906      	ldr	r1, [pc, #24]	; (2c58 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    2c40:	4806      	ldr	r0, [pc, #24]	; (2c5c <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    2c42:	4b07      	ldr	r3, [pc, #28]	; (2c60 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    2c44:	4798      	blx	r3
    2c46:	4602      	mov	r2, r0
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
}
    2c4e:	bf00      	nop
    2c50:	3708      	adds	r7, #8
    2c52:	46bd      	mov	sp, r7
    2c54:	bd80      	pop	{r7, pc}
    2c56:	bf00      	nop
    2c58:	0001a48c 	.word	0x0001a48c
    2c5c:	20001724 	.word	0x20001724
    2c60:	00000ce1 	.word	0x00000ce1

00002c64 <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2c64:	b580      	push	{r7, lr}
    2c66:	b082      	sub	sp, #8
    2c68:	af00      	add	r7, sp, #0
    2c6a:	6078      	str	r0, [r7, #4]
    2c6c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2c6e:	6839      	ldr	r1, [r7, #0]
    2c70:	6878      	ldr	r0, [r7, #4]
    2c72:	4b03      	ldr	r3, [pc, #12]	; (2c80 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    2c74:	4798      	blx	r3
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	4618      	mov	r0, r3
    2c7a:	3708      	adds	r7, #8
    2c7c:	46bd      	mov	sp, r7
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	00013bd5 	.word	0x00013bd5

00002c84 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2c84:	b580      	push	{r7, lr}
    2c86:	b082      	sub	sp, #8
    2c88:	af00      	add	r7, sp, #0
    2c8a:	6078      	str	r0, [r7, #4]
    2c8c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2c8e:	6839      	ldr	r1, [r7, #0]
    2c90:	6878      	ldr	r0, [r7, #4]
    2c92:	4b03      	ldr	r3, [pc, #12]	; (2ca0 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    2c94:	4798      	blx	r3
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	4618      	mov	r0, r3
    2c9a:	3708      	adds	r7, #8
    2c9c:	46bd      	mov	sp, r7
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	00013bd5 	.word	0x00013bd5

00002ca4 <_ZlsIcER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2ca4:	b580      	push	{r7, lr}
    2ca6:	b082      	sub	sp, #8
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
    2cac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2cae:	683b      	ldr	r3, [r7, #0]
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	4619      	mov	r1, r3
    2cb4:	6878      	ldr	r0, [r7, #4]
    2cb6:	4b03      	ldr	r3, [pc, #12]	; (2cc4 <_ZlsIcER5PrintS1_RKT_+0x20>)
    2cb8:	4798      	blx	r3
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	4618      	mov	r0, r3
    2cbe:	3708      	adds	r7, #8
    2cc0:	46bd      	mov	sp, r7
    2cc2:	bd80      	pop	{r7, pc}
    2cc4:	00013bf5 	.word	0x00013bf5

00002cc8 <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2cc8:	b580      	push	{r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
    2cd0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2cd2:	6839      	ldr	r1, [r7, #0]
    2cd4:	6878      	ldr	r0, [r7, #4]
    2cd6:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    2cd8:	4798      	blx	r3
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	4618      	mov	r0, r3
    2cde:	3708      	adds	r7, #8
    2ce0:	46bd      	mov	sp, r7
    2ce2:	bd80      	pop	{r7, pc}
    2ce4:	00013bd5 	.word	0x00013bd5

00002ce8 <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2ce8:	b580      	push	{r7, lr}
    2cea:	b082      	sub	sp, #8
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
    2cf0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2cf2:	6839      	ldr	r1, [r7, #0]
    2cf4:	6878      	ldr	r0, [r7, #4]
    2cf6:	4b03      	ldr	r3, [pc, #12]	; (2d04 <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    2cf8:	4798      	blx	r3
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	4618      	mov	r0, r3
    2cfe:	3708      	adds	r7, #8
    2d00:	46bd      	mov	sp, r7
    2d02:	bd80      	pop	{r7, pc}
    2d04:	00013bd5 	.word	0x00013bd5

00002d08 <_Z41__static_initialization_and_destruction_0ii>:
	s=state.status;
	return	state.status.rawStatus;
}


    2d08:	b580      	push	{r7, lr}
    2d0a:	b082      	sub	sp, #8
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
    2d10:	6039      	str	r1, [r7, #0]
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	2b01      	cmp	r3, #1
    2d16:	d10c      	bne.n	2d32 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2d18:	683b      	ldr	r3, [r7, #0]
    2d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d1e:	4293      	cmp	r3, r2
    2d20:	d107      	bne.n	2d32 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2d22:	4806      	ldr	r0, [pc, #24]	; (2d3c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2d24:	4b06      	ldr	r3, [pc, #24]	; (2d40 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2d26:	4798      	blx	r3
    2d28:	4a06      	ldr	r2, [pc, #24]	; (2d44 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2d2a:	4907      	ldr	r1, [pc, #28]	; (2d48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2d2c:	4803      	ldr	r0, [pc, #12]	; (2d3c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2d2e:	4b07      	ldr	r3, [pc, #28]	; (2d4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2d30:	4798      	blx	r3
    2d32:	bf00      	nop
    2d34:	3708      	adds	r7, #8
    2d36:	46bd      	mov	sp, r7
    2d38:	bd80      	pop	{r7, pc}
    2d3a:	bf00      	nop
    2d3c:	20002d44 	.word	0x20002d44
    2d40:	00002081 	.word	0x00002081
    2d44:	20000000 	.word	0x20000000
    2d48:	000020d9 	.word	0x000020d9
    2d4c:	00014579 	.word	0x00014579

00002d50 <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
    2d50:	b580      	push	{r7, lr}
    2d52:	af00      	add	r7, sp, #0
    2d54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2d58:	2001      	movs	r0, #1
    2d5a:	4b01      	ldr	r3, [pc, #4]	; (2d60 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x10>)
    2d5c:	4798      	blx	r3
    2d5e:	bd80      	pop	{r7, pc}
    2d60:	00002d09 	.word	0x00002d09

00002d64 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	af00      	add	r7, sp, #0
	system_init();
    2d68:	4b03      	ldr	r3, [pc, #12]	; (2d78 <atmel_start_init+0x14>)
    2d6a:	4798      	blx	r3
	usb_init();
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <atmel_start_init+0x18>)
    2d6e:	4798      	blx	r3
	spi_nor_flash_init();
    2d70:	4b03      	ldr	r3, [pc, #12]	; (2d80 <atmel_start_init+0x1c>)
    2d72:	4798      	blx	r3
}
    2d74:	bf00      	nop
    2d76:	bd80      	pop	{r7, pc}
    2d78:	00003e61 	.word	0x00003e61
    2d7c:	0000e58d 	.word	0x0000e58d
    2d80:	0000e521 	.word	0x0000e521

00002d84 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2d84:	b480      	push	{r7}
    2d86:	b085      	sub	sp, #20
    2d88:	af00      	add	r7, sp, #0
    2d8a:	60f8      	str	r0, [r7, #12]
    2d8c:	460b      	mov	r3, r1
    2d8e:	607a      	str	r2, [r7, #4]
    2d90:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2d92:	7afa      	ldrb	r2, [r7, #11]
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	3220      	adds	r2, #32
    2d98:	6879      	ldr	r1, [r7, #4]
    2d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2d9e:	bf00      	nop
    2da0:	3714      	adds	r7, #20
    2da2:	46bd      	mov	sp, r7
    2da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2da8:	4770      	bx	lr

00002daa <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2daa:	b480      	push	{r7}
    2dac:	b083      	sub	sp, #12
    2dae:	af00      	add	r7, sp, #0
    2db0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	691b      	ldr	r3, [r3, #16]
    2db6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dbe:	bf00      	nop
    2dc0:	370c      	adds	r7, #12
    2dc2:	46bd      	mov	sp, r7
    2dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dc8:	4770      	bx	lr

00002dca <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2dca:	b480      	push	{r7}
    2dcc:	b083      	sub	sp, #12
    2dce:	af00      	add	r7, sp, #0
    2dd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	691b      	ldr	r3, [r3, #16]
    2dd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dde:	bf00      	nop
    2de0:	370c      	adds	r7, #12
    2de2:	46bd      	mov	sp, r7
    2de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2de8:	4770      	bx	lr

00002dea <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2dea:	b480      	push	{r7}
    2dec:	b083      	sub	sp, #12
    2dee:	af00      	add	r7, sp, #0
    2df0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	691b      	ldr	r3, [r3, #16]
    2df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dfe:	bf00      	nop
    2e00:	370c      	adds	r7, #12
    2e02:	46bd      	mov	sp, r7
    2e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e08:	4770      	bx	lr

00002e0a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2e0a:	b480      	push	{r7}
    2e0c:	b083      	sub	sp, #12
    2e0e:	af00      	add	r7, sp, #0
    2e10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	691b      	ldr	r3, [r3, #16]
    2e16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2e1a:	687b      	ldr	r3, [r7, #4]
    2e1c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e1e:	bf00      	nop
    2e20:	370c      	adds	r7, #12
    2e22:	46bd      	mov	sp, r7
    2e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e28:	4770      	bx	lr

00002e2a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2e2a:	b480      	push	{r7}
    2e2c:	b083      	sub	sp, #12
    2e2e:	af00      	add	r7, sp, #0
    2e30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	695b      	ldr	r3, [r3, #20]
    2e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e3e:	bf00      	nop
    2e40:	370c      	adds	r7, #12
    2e42:	46bd      	mov	sp, r7
    2e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e48:	4770      	bx	lr

00002e4a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2e4a:	b480      	push	{r7}
    2e4c:	b083      	sub	sp, #12
    2e4e:	af00      	add	r7, sp, #0
    2e50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	695b      	ldr	r3, [r3, #20]
    2e56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2e5a:	687b      	ldr	r3, [r7, #4]
    2e5c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e5e:	bf00      	nop
    2e60:	370c      	adds	r7, #12
    2e62:	46bd      	mov	sp, r7
    2e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e68:	4770      	bx	lr

00002e6a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2e6a:	b480      	push	{r7}
    2e6c:	b083      	sub	sp, #12
    2e6e:	af00      	add	r7, sp, #0
    2e70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	695b      	ldr	r3, [r3, #20]
    2e76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e7e:	bf00      	nop
    2e80:	370c      	adds	r7, #12
    2e82:	46bd      	mov	sp, r7
    2e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e88:	4770      	bx	lr

00002e8a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2e8a:	b480      	push	{r7}
    2e8c:	b083      	sub	sp, #12
    2e8e:	af00      	add	r7, sp, #0
    2e90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	695b      	ldr	r3, [r3, #20]
    2e96:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e9e:	bf00      	nop
    2ea0:	370c      	adds	r7, #12
    2ea2:	46bd      	mov	sp, r7
    2ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ea8:	4770      	bx	lr

00002eaa <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    2eaa:	b480      	push	{r7}
    2eac:	b083      	sub	sp, #12
    2eae:	af00      	add	r7, sp, #0
    2eb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	695b      	ldr	r3, [r3, #20]
    2eb6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ebe:	bf00      	nop
    2ec0:	370c      	adds	r7, #12
    2ec2:	46bd      	mov	sp, r7
    2ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ec8:	4770      	bx	lr

00002eca <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    2eca:	b480      	push	{r7}
    2ecc:	b083      	sub	sp, #12
    2ece:	af00      	add	r7, sp, #0
    2ed0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	699b      	ldr	r3, [r3, #24]
    2ed6:	f043 0201 	orr.w	r2, r3, #1
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ede:	bf00      	nop
    2ee0:	370c      	adds	r7, #12
    2ee2:	46bd      	mov	sp, r7
    2ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ee8:	4770      	bx	lr

00002eea <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2eea:	b480      	push	{r7}
    2eec:	b083      	sub	sp, #12
    2eee:	af00      	add	r7, sp, #0
    2ef0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2ef2:	687b      	ldr	r3, [r7, #4]
    2ef4:	699b      	ldr	r3, [r3, #24]
    2ef6:	f043 0202 	orr.w	r2, r3, #2
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2efe:	bf00      	nop
    2f00:	370c      	adds	r7, #12
    2f02:	46bd      	mov	sp, r7
    2f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f08:	4770      	bx	lr

00002f0a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2f0a:	b480      	push	{r7}
    2f0c:	b083      	sub	sp, #12
    2f0e:	af00      	add	r7, sp, #0
    2f10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2f12:	687b      	ldr	r3, [r7, #4]
    2f14:	699b      	ldr	r3, [r3, #24]
    2f16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f1e:	bf00      	nop
    2f20:	370c      	adds	r7, #12
    2f22:	46bd      	mov	sp, r7
    2f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f28:	4770      	bx	lr

00002f2a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2f2a:	b480      	push	{r7}
    2f2c:	b083      	sub	sp, #12
    2f2e:	af00      	add	r7, sp, #0
    2f30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2f32:	687b      	ldr	r3, [r7, #4]
    2f34:	699b      	ldr	r3, [r3, #24]
    2f36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f3e:	bf00      	nop
    2f40:	370c      	adds	r7, #12
    2f42:	46bd      	mov	sp, r7
    2f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f48:	4770      	bx	lr

00002f4a <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2f4a:	b480      	push	{r7}
    2f4c:	b083      	sub	sp, #12
    2f4e:	af00      	add	r7, sp, #0
    2f50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	699b      	ldr	r3, [r3, #24]
    2f56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f5e:	bf00      	nop
    2f60:	370c      	adds	r7, #12
    2f62:	46bd      	mov	sp, r7
    2f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f68:	4770      	bx	lr

00002f6a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2f6a:	b480      	push	{r7}
    2f6c:	b083      	sub	sp, #12
    2f6e:	af00      	add	r7, sp, #0
    2f70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	69db      	ldr	r3, [r3, #28]
    2f76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f7e:	bf00      	nop
    2f80:	370c      	adds	r7, #12
    2f82:	46bd      	mov	sp, r7
    2f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f88:	4770      	bx	lr

00002f8a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2f8a:	b480      	push	{r7}
    2f8c:	b083      	sub	sp, #12
    2f8e:	af00      	add	r7, sp, #0
    2f90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	6a1b      	ldr	r3, [r3, #32]
    2f96:	f043 0201 	orr.w	r2, r3, #1
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2f9e:	bf00      	nop
    2fa0:	370c      	adds	r7, #12
    2fa2:	46bd      	mov	sp, r7
    2fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fa8:	4770      	bx	lr

00002faa <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2faa:	b480      	push	{r7}
    2fac:	b083      	sub	sp, #12
    2fae:	af00      	add	r7, sp, #0
    2fb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	6a1b      	ldr	r3, [r3, #32]
    2fb6:	f043 0202 	orr.w	r2, r3, #2
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2fbe:	bf00      	nop
    2fc0:	370c      	adds	r7, #12
    2fc2:	46bd      	mov	sp, r7
    2fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fc8:	4770      	bx	lr

00002fca <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    2fca:	b480      	push	{r7}
    2fcc:	b083      	sub	sp, #12
    2fce:	af00      	add	r7, sp, #0
    2fd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	6a1b      	ldr	r3, [r3, #32]
    2fd6:	f043 0204 	orr.w	r2, r3, #4
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2fde:	bf00      	nop
    2fe0:	370c      	adds	r7, #12
    2fe2:	46bd      	mov	sp, r7
    2fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fe8:	4770      	bx	lr

00002fea <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2fea:	b480      	push	{r7}
    2fec:	b083      	sub	sp, #12
    2fee:	af00      	add	r7, sp, #0
    2ff0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	6a1b      	ldr	r3, [r3, #32]
    2ff6:	f043 0208 	orr.w	r2, r3, #8
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ffe:	bf00      	nop
    3000:	370c      	adds	r7, #12
    3002:	46bd      	mov	sp, r7
    3004:	f85d 7b04 	ldr.w	r7, [sp], #4
    3008:	4770      	bx	lr

0000300a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    300a:	b480      	push	{r7}
    300c:	b083      	sub	sp, #12
    300e:	af00      	add	r7, sp, #0
    3010:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	6a1b      	ldr	r3, [r3, #32]
    3016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    301e:	bf00      	nop
    3020:	370c      	adds	r7, #12
    3022:	46bd      	mov	sp, r7
    3024:	f85d 7b04 	ldr.w	r7, [sp], #4
    3028:	4770      	bx	lr

0000302a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    302a:	b480      	push	{r7}
    302c:	b085      	sub	sp, #20
    302e:	af00      	add	r7, sp, #0
    3030:	60f8      	str	r0, [r7, #12]
    3032:	460b      	mov	r3, r1
    3034:	607a      	str	r2, [r7, #4]
    3036:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3038:	7afb      	ldrb	r3, [r7, #11]
    303a:	68fa      	ldr	r2, [r7, #12]
    303c:	01db      	lsls	r3, r3, #7
    303e:	4413      	add	r3, r2
    3040:	3308      	adds	r3, #8
    3042:	687a      	ldr	r2, [r7, #4]
    3044:	601a      	str	r2, [r3, #0]
}
    3046:	bf00      	nop
    3048:	3714      	adds	r7, #20
    304a:	46bd      	mov	sp, r7
    304c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3050:	4770      	bx	lr

00003052 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    3052:	b480      	push	{r7}
    3054:	b085      	sub	sp, #20
    3056:	af00      	add	r7, sp, #0
    3058:	60f8      	str	r0, [r7, #12]
    305a:	460b      	mov	r3, r1
    305c:	607a      	str	r2, [r7, #4]
    305e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3060:	7afb      	ldrb	r3, [r7, #11]
    3062:	68fa      	ldr	r2, [r7, #12]
    3064:	01db      	lsls	r3, r3, #7
    3066:	4413      	add	r3, r2
    3068:	3304      	adds	r3, #4
    306a:	687a      	ldr	r2, [r7, #4]
    306c:	601a      	str	r2, [r3, #0]
}
    306e:	bf00      	nop
    3070:	3714      	adds	r7, #20
    3072:	46bd      	mov	sp, r7
    3074:	f85d 7b04 	ldr.w	r7, [sp], #4
    3078:	4770      	bx	lr

0000307a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    307a:	b480      	push	{r7}
    307c:	b085      	sub	sp, #20
    307e:	af00      	add	r7, sp, #0
    3080:	60f8      	str	r0, [r7, #12]
    3082:	460b      	mov	r3, r1
    3084:	607a      	str	r2, [r7, #4]
    3086:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3088:	7afb      	ldrb	r3, [r7, #11]
    308a:	68fa      	ldr	r2, [r7, #12]
    308c:	01db      	lsls	r3, r3, #7
    308e:	4413      	add	r3, r2
    3090:	3318      	adds	r3, #24
    3092:	687a      	ldr	r2, [r7, #4]
    3094:	601a      	str	r2, [r3, #0]
}
    3096:	bf00      	nop
    3098:	3714      	adds	r7, #20
    309a:	46bd      	mov	sp, r7
    309c:	f85d 7b04 	ldr.w	r7, [sp], #4
    30a0:	4770      	bx	lr

000030a2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    30a2:	b480      	push	{r7}
    30a4:	b085      	sub	sp, #20
    30a6:	af00      	add	r7, sp, #0
    30a8:	60f8      	str	r0, [r7, #12]
    30aa:	460b      	mov	r3, r1
    30ac:	607a      	str	r2, [r7, #4]
    30ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30b0:	7afb      	ldrb	r3, [r7, #11]
    30b2:	68fa      	ldr	r2, [r7, #12]
    30b4:	01db      	lsls	r3, r3, #7
    30b6:	4413      	add	r3, r2
    30b8:	3314      	adds	r3, #20
    30ba:	687a      	ldr	r2, [r7, #4]
    30bc:	601a      	str	r2, [r3, #0]
}
    30be:	bf00      	nop
    30c0:	3714      	adds	r7, #20
    30c2:	46bd      	mov	sp, r7
    30c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c8:	4770      	bx	lr

000030ca <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    30ca:	b480      	push	{r7}
    30cc:	b085      	sub	sp, #20
    30ce:	af00      	add	r7, sp, #0
    30d0:	6078      	str	r0, [r7, #4]
    30d2:	4608      	mov	r0, r1
    30d4:	4611      	mov	r1, r2
    30d6:	461a      	mov	r2, r3
    30d8:	4603      	mov	r3, r0
    30da:	70fb      	strb	r3, [r7, #3]
    30dc:	460b      	mov	r3, r1
    30de:	70bb      	strb	r3, [r7, #2]
    30e0:	4613      	mov	r3, r2
    30e2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    30e4:	78fa      	ldrb	r2, [r7, #3]
    30e6:	78bb      	ldrb	r3, [r7, #2]
    30e8:	6879      	ldr	r1, [r7, #4]
    30ea:	01d2      	lsls	r2, r2, #7
    30ec:	440a      	add	r2, r1
    30ee:	4413      	add	r3, r2
    30f0:	3330      	adds	r3, #48	; 0x30
    30f2:	781b      	ldrb	r3, [r3, #0]
    30f4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    30f6:	7bfb      	ldrb	r3, [r7, #15]
    30f8:	f023 030f 	bic.w	r3, r3, #15
    30fc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    30fe:	787b      	ldrb	r3, [r7, #1]
    3100:	f003 030f 	and.w	r3, r3, #15
    3104:	b2da      	uxtb	r2, r3
    3106:	7bfb      	ldrb	r3, [r7, #15]
    3108:	4313      	orrs	r3, r2
    310a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    310c:	78fa      	ldrb	r2, [r7, #3]
    310e:	78bb      	ldrb	r3, [r7, #2]
    3110:	6879      	ldr	r1, [r7, #4]
    3112:	01d2      	lsls	r2, r2, #7
    3114:	440a      	add	r2, r1
    3116:	4413      	add	r3, r2
    3118:	3330      	adds	r3, #48	; 0x30
    311a:	7bfa      	ldrb	r2, [r7, #15]
    311c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    311e:	bf00      	nop
    3120:	3714      	adds	r7, #20
    3122:	46bd      	mov	sp, r7
    3124:	f85d 7b04 	ldr.w	r7, [sp], #4
    3128:	4770      	bx	lr

0000312a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    312a:	b480      	push	{r7}
    312c:	b085      	sub	sp, #20
    312e:	af00      	add	r7, sp, #0
    3130:	6078      	str	r0, [r7, #4]
    3132:	4608      	mov	r0, r1
    3134:	4611      	mov	r1, r2
    3136:	461a      	mov	r2, r3
    3138:	4603      	mov	r3, r0
    313a:	70fb      	strb	r3, [r7, #3]
    313c:	460b      	mov	r3, r1
    313e:	70bb      	strb	r3, [r7, #2]
    3140:	4613      	mov	r3, r2
    3142:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3144:	78fa      	ldrb	r2, [r7, #3]
    3146:	78bb      	ldrb	r3, [r7, #2]
    3148:	6879      	ldr	r1, [r7, #4]
    314a:	01d2      	lsls	r2, r2, #7
    314c:	440a      	add	r2, r1
    314e:	4413      	add	r3, r2
    3150:	3330      	adds	r3, #48	; 0x30
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3156:	7bfb      	ldrb	r3, [r7, #15]
    3158:	f003 030f 	and.w	r3, r3, #15
    315c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    315e:	787b      	ldrb	r3, [r7, #1]
    3160:	011b      	lsls	r3, r3, #4
    3162:	b2da      	uxtb	r2, r3
    3164:	7bfb      	ldrb	r3, [r7, #15]
    3166:	4313      	orrs	r3, r2
    3168:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    316a:	78fa      	ldrb	r2, [r7, #3]
    316c:	78bb      	ldrb	r3, [r7, #2]
    316e:	6879      	ldr	r1, [r7, #4]
    3170:	01d2      	lsls	r2, r2, #7
    3172:	440a      	add	r2, r1
    3174:	4413      	add	r3, r2
    3176:	3330      	adds	r3, #48	; 0x30
    3178:	7bfa      	ldrb	r2, [r7, #15]
    317a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    317c:	bf00      	nop
    317e:	3714      	adds	r7, #20
    3180:	46bd      	mov	sp, r7
    3182:	f85d 7b04 	ldr.w	r7, [sp], #4
    3186:	4770      	bx	lr

00003188 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    3188:	b480      	push	{r7}
    318a:	b085      	sub	sp, #20
    318c:	af00      	add	r7, sp, #0
    318e:	6078      	str	r0, [r7, #4]
    3190:	4608      	mov	r0, r1
    3192:	4611      	mov	r1, r2
    3194:	461a      	mov	r2, r3
    3196:	4603      	mov	r3, r0
    3198:	70fb      	strb	r3, [r7, #3]
    319a:	460b      	mov	r3, r1
    319c:	70bb      	strb	r3, [r7, #2]
    319e:	4613      	mov	r3, r2
    31a0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    31a2:	78fa      	ldrb	r2, [r7, #3]
    31a4:	78bb      	ldrb	r3, [r7, #2]
    31a6:	6879      	ldr	r1, [r7, #4]
    31a8:	01d2      	lsls	r2, r2, #7
    31aa:	440a      	add	r2, r1
    31ac:	4413      	add	r3, r2
    31ae:	3340      	adds	r3, #64	; 0x40
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    31b4:	7bfb      	ldrb	r3, [r7, #15]
    31b6:	f023 0301 	bic.w	r3, r3, #1
    31ba:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    31bc:	787a      	ldrb	r2, [r7, #1]
    31be:	7bfb      	ldrb	r3, [r7, #15]
    31c0:	4313      	orrs	r3, r2
    31c2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    31c4:	78fa      	ldrb	r2, [r7, #3]
    31c6:	78bb      	ldrb	r3, [r7, #2]
    31c8:	6879      	ldr	r1, [r7, #4]
    31ca:	01d2      	lsls	r2, r2, #7
    31cc:	440a      	add	r2, r1
    31ce:	4413      	add	r3, r2
    31d0:	3340      	adds	r3, #64	; 0x40
    31d2:	7bfa      	ldrb	r2, [r7, #15]
    31d4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    31d6:	bf00      	nop
    31d8:	3714      	adds	r7, #20
    31da:	46bd      	mov	sp, r7
    31dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    31e0:	4770      	bx	lr

000031e2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    31e2:	b490      	push	{r4, r7}
    31e4:	b082      	sub	sp, #8
    31e6:	af00      	add	r7, sp, #0
    31e8:	6078      	str	r0, [r7, #4]
    31ea:	460b      	mov	r3, r1
    31ec:	70fb      	strb	r3, [r7, #3]
    31ee:	4613      	mov	r3, r2
    31f0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    31f2:	78fa      	ldrb	r2, [r7, #3]
    31f4:	78bb      	ldrb	r3, [r7, #2]
    31f6:	78f8      	ldrb	r0, [r7, #3]
    31f8:	78b9      	ldrb	r1, [r7, #2]
    31fa:	687c      	ldr	r4, [r7, #4]
    31fc:	01c0      	lsls	r0, r0, #7
    31fe:	4420      	add	r0, r4
    3200:	4401      	add	r1, r0
    3202:	3140      	adds	r1, #64	; 0x40
    3204:	7809      	ldrb	r1, [r1, #0]
    3206:	b2c9      	uxtb	r1, r1
    3208:	f041 0104 	orr.w	r1, r1, #4
    320c:	b2c8      	uxtb	r0, r1
    320e:	6879      	ldr	r1, [r7, #4]
    3210:	01d2      	lsls	r2, r2, #7
    3212:	440a      	add	r2, r1
    3214:	4413      	add	r3, r2
    3216:	3340      	adds	r3, #64	; 0x40
    3218:	4602      	mov	r2, r0
    321a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    321c:	bf00      	nop
    321e:	3708      	adds	r7, #8
    3220:	46bd      	mov	sp, r7
    3222:	bc90      	pop	{r4, r7}
    3224:	4770      	bx	lr

00003226 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    3226:	b490      	push	{r4, r7}
    3228:	b082      	sub	sp, #8
    322a:	af00      	add	r7, sp, #0
    322c:	6078      	str	r0, [r7, #4]
    322e:	460b      	mov	r3, r1
    3230:	70fb      	strb	r3, [r7, #3]
    3232:	4613      	mov	r3, r2
    3234:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3236:	78fa      	ldrb	r2, [r7, #3]
    3238:	78bb      	ldrb	r3, [r7, #2]
    323a:	78f8      	ldrb	r0, [r7, #3]
    323c:	78b9      	ldrb	r1, [r7, #2]
    323e:	687c      	ldr	r4, [r7, #4]
    3240:	01c0      	lsls	r0, r0, #7
    3242:	4420      	add	r0, r4
    3244:	4401      	add	r1, r0
    3246:	3140      	adds	r1, #64	; 0x40
    3248:	7809      	ldrb	r1, [r1, #0]
    324a:	b2c9      	uxtb	r1, r1
    324c:	f021 0104 	bic.w	r1, r1, #4
    3250:	b2c8      	uxtb	r0, r1
    3252:	6879      	ldr	r1, [r7, #4]
    3254:	01d2      	lsls	r2, r2, #7
    3256:	440a      	add	r2, r1
    3258:	4413      	add	r3, r2
    325a:	3340      	adds	r3, #64	; 0x40
    325c:	4602      	mov	r2, r0
    325e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3260:	bf00      	nop
    3262:	3708      	adds	r7, #8
    3264:	46bd      	mov	sp, r7
    3266:	bc90      	pop	{r4, r7}
    3268:	4770      	bx	lr

0000326a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    326a:	b480      	push	{r7}
    326c:	b085      	sub	sp, #20
    326e:	af00      	add	r7, sp, #0
    3270:	60f8      	str	r0, [r7, #12]
    3272:	460b      	mov	r3, r1
    3274:	607a      	str	r2, [r7, #4]
    3276:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3278:	7afb      	ldrb	r3, [r7, #11]
    327a:	68fa      	ldr	r2, [r7, #12]
    327c:	01db      	lsls	r3, r3, #7
    327e:	4413      	add	r3, r2
    3280:	3328      	adds	r3, #40	; 0x28
    3282:	687a      	ldr	r2, [r7, #4]
    3284:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3286:	bf00      	nop
    3288:	3714      	adds	r7, #20
    328a:	46bd      	mov	sp, r7
    328c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3290:	4770      	bx	lr
	...

00003294 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	4603      	mov	r3, r0
    329c:	6039      	str	r1, [r7, #0]
    329e:	71fb      	strb	r3, [r7, #7]
    32a0:	4613      	mov	r3, r2
    32a2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    32a4:	79bb      	ldrb	r3, [r7, #6]
    32a6:	2b01      	cmp	r3, #1
    32a8:	d01c      	beq.n	32e4 <_gpio_set_direction+0x50>
    32aa:	2b02      	cmp	r3, #2
    32ac:	d037      	beq.n	331e <_gpio_set_direction+0x8a>
    32ae:	2b00      	cmp	r3, #0
    32b0:	d14e      	bne.n	3350 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    32b2:	79fb      	ldrb	r3, [r7, #7]
    32b4:	683a      	ldr	r2, [r7, #0]
    32b6:	4619      	mov	r1, r3
    32b8:	482a      	ldr	r0, [pc, #168]	; (3364 <_gpio_set_direction+0xd0>)
    32ba:	4b2b      	ldr	r3, [pc, #172]	; (3368 <_gpio_set_direction+0xd4>)
    32bc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    32be:	683b      	ldr	r3, [r7, #0]
    32c0:	b29b      	uxth	r3, r3
    32c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    32c6:	79fb      	ldrb	r3, [r7, #7]
    32c8:	4619      	mov	r1, r3
    32ca:	4826      	ldr	r0, [pc, #152]	; (3364 <_gpio_set_direction+0xd0>)
    32cc:	4b27      	ldr	r3, [pc, #156]	; (336c <_gpio_set_direction+0xd8>)
    32ce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    32d0:	683b      	ldr	r3, [r7, #0]
    32d2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    32d4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    32d8:	79fb      	ldrb	r3, [r7, #7]
    32da:	4619      	mov	r1, r3
    32dc:	4821      	ldr	r0, [pc, #132]	; (3364 <_gpio_set_direction+0xd0>)
    32de:	4b23      	ldr	r3, [pc, #140]	; (336c <_gpio_set_direction+0xd8>)
    32e0:	4798      	blx	r3
		break;
    32e2:	e03a      	b.n	335a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    32e4:	79fb      	ldrb	r3, [r7, #7]
    32e6:	683a      	ldr	r2, [r7, #0]
    32e8:	4619      	mov	r1, r3
    32ea:	481e      	ldr	r0, [pc, #120]	; (3364 <_gpio_set_direction+0xd0>)
    32ec:	4b1e      	ldr	r3, [pc, #120]	; (3368 <_gpio_set_direction+0xd4>)
    32ee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    32f0:	683b      	ldr	r3, [r7, #0]
    32f2:	b29b      	uxth	r3, r3
    32f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    32f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    32fc:	79f9      	ldrb	r1, [r7, #7]
    32fe:	461a      	mov	r2, r3
    3300:	4818      	ldr	r0, [pc, #96]	; (3364 <_gpio_set_direction+0xd0>)
    3302:	4b1a      	ldr	r3, [pc, #104]	; (336c <_gpio_set_direction+0xd8>)
    3304:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    3306:	683b      	ldr	r3, [r7, #0]
    3308:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    330a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    330e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3312:	79f9      	ldrb	r1, [r7, #7]
    3314:	461a      	mov	r2, r3
    3316:	4813      	ldr	r0, [pc, #76]	; (3364 <_gpio_set_direction+0xd0>)
    3318:	4b14      	ldr	r3, [pc, #80]	; (336c <_gpio_set_direction+0xd8>)
    331a:	4798      	blx	r3
		break;
    331c:	e01d      	b.n	335a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    331e:	79fb      	ldrb	r3, [r7, #7]
    3320:	683a      	ldr	r2, [r7, #0]
    3322:	4619      	mov	r1, r3
    3324:	480f      	ldr	r0, [pc, #60]	; (3364 <_gpio_set_direction+0xd0>)
    3326:	4b12      	ldr	r3, [pc, #72]	; (3370 <_gpio_set_direction+0xdc>)
    3328:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    332a:	683b      	ldr	r3, [r7, #0]
    332c:	b29b      	uxth	r3, r3
    332e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3332:	79fb      	ldrb	r3, [r7, #7]
    3334:	4619      	mov	r1, r3
    3336:	480b      	ldr	r0, [pc, #44]	; (3364 <_gpio_set_direction+0xd0>)
    3338:	4b0c      	ldr	r3, [pc, #48]	; (336c <_gpio_set_direction+0xd8>)
    333a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    333c:	683b      	ldr	r3, [r7, #0]
    333e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3340:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3344:	79fb      	ldrb	r3, [r7, #7]
    3346:	4619      	mov	r1, r3
    3348:	4806      	ldr	r0, [pc, #24]	; (3364 <_gpio_set_direction+0xd0>)
    334a:	4b08      	ldr	r3, [pc, #32]	; (336c <_gpio_set_direction+0xd8>)
    334c:	4798      	blx	r3
		break;
    334e:	e004      	b.n	335a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    3350:	2246      	movs	r2, #70	; 0x46
    3352:	4908      	ldr	r1, [pc, #32]	; (3374 <_gpio_set_direction+0xe0>)
    3354:	2000      	movs	r0, #0
    3356:	4b08      	ldr	r3, [pc, #32]	; (3378 <_gpio_set_direction+0xe4>)
    3358:	4798      	blx	r3
	}
}
    335a:	bf00      	nop
    335c:	3708      	adds	r7, #8
    335e:	46bd      	mov	sp, r7
    3360:	bd80      	pop	{r7, pc}
    3362:	bf00      	nop
    3364:	41008000 	.word	0x41008000
    3368:	00003053 	.word	0x00003053
    336c:	0000326b 	.word	0x0000326b
    3370:	0000302b 	.word	0x0000302b
    3374:	0001aa7c 	.word	0x0001aa7c
    3378:	000062c5 	.word	0x000062c5

0000337c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    337c:	b580      	push	{r7, lr}
    337e:	b082      	sub	sp, #8
    3380:	af00      	add	r7, sp, #0
    3382:	4603      	mov	r3, r0
    3384:	6039      	str	r1, [r7, #0]
    3386:	71fb      	strb	r3, [r7, #7]
    3388:	4613      	mov	r3, r2
    338a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    338c:	79bb      	ldrb	r3, [r7, #6]
    338e:	2b00      	cmp	r3, #0
    3390:	d006      	beq.n	33a0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3392:	79fb      	ldrb	r3, [r7, #7]
    3394:	683a      	ldr	r2, [r7, #0]
    3396:	4619      	mov	r1, r3
    3398:	4806      	ldr	r0, [pc, #24]	; (33b4 <_gpio_set_level+0x38>)
    339a:	4b07      	ldr	r3, [pc, #28]	; (33b8 <_gpio_set_level+0x3c>)
    339c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    339e:	e005      	b.n	33ac <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    33a0:	79fb      	ldrb	r3, [r7, #7]
    33a2:	683a      	ldr	r2, [r7, #0]
    33a4:	4619      	mov	r1, r3
    33a6:	4803      	ldr	r0, [pc, #12]	; (33b4 <_gpio_set_level+0x38>)
    33a8:	4b04      	ldr	r3, [pc, #16]	; (33bc <_gpio_set_level+0x40>)
    33aa:	4798      	blx	r3
}
    33ac:	bf00      	nop
    33ae:	3708      	adds	r7, #8
    33b0:	46bd      	mov	sp, r7
    33b2:	bd80      	pop	{r7, pc}
    33b4:	41008000 	.word	0x41008000
    33b8:	0000307b 	.word	0x0000307b
    33bc:	000030a3 	.word	0x000030a3

000033c0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b082      	sub	sp, #8
    33c4:	af00      	add	r7, sp, #0
    33c6:	4603      	mov	r3, r0
    33c8:	71fb      	strb	r3, [r7, #7]
    33ca:	460b      	mov	r3, r1
    33cc:	71bb      	strb	r3, [r7, #6]
    33ce:	4613      	mov	r3, r2
    33d0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    33d2:	797b      	ldrb	r3, [r7, #5]
    33d4:	2b01      	cmp	r3, #1
    33d6:	d00a      	beq.n	33ee <_gpio_set_pin_pull_mode+0x2e>
    33d8:	2b02      	cmp	r3, #2
    33da:	d01f      	beq.n	341c <_gpio_set_pin_pull_mode+0x5c>
    33dc:	2b00      	cmp	r3, #0
    33de:	d134      	bne.n	344a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    33e0:	79ba      	ldrb	r2, [r7, #6]
    33e2:	79fb      	ldrb	r3, [r7, #7]
    33e4:	4619      	mov	r1, r3
    33e6:	481e      	ldr	r0, [pc, #120]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    33e8:	4b1e      	ldr	r3, [pc, #120]	; (3464 <_gpio_set_pin_pull_mode+0xa4>)
    33ea:	4798      	blx	r3
		break;
    33ec:	e033      	b.n	3456 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    33ee:	79bb      	ldrb	r3, [r7, #6]
    33f0:	2201      	movs	r2, #1
    33f2:	409a      	lsls	r2, r3
    33f4:	79fb      	ldrb	r3, [r7, #7]
    33f6:	4619      	mov	r1, r3
    33f8:	4819      	ldr	r0, [pc, #100]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    33fa:	4b1b      	ldr	r3, [pc, #108]	; (3468 <_gpio_set_pin_pull_mode+0xa8>)
    33fc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    33fe:	79ba      	ldrb	r2, [r7, #6]
    3400:	79fb      	ldrb	r3, [r7, #7]
    3402:	4619      	mov	r1, r3
    3404:	4816      	ldr	r0, [pc, #88]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    3406:	4b19      	ldr	r3, [pc, #100]	; (346c <_gpio_set_pin_pull_mode+0xac>)
    3408:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    340a:	79bb      	ldrb	r3, [r7, #6]
    340c:	2201      	movs	r2, #1
    340e:	409a      	lsls	r2, r3
    3410:	79fb      	ldrb	r3, [r7, #7]
    3412:	4619      	mov	r1, r3
    3414:	4812      	ldr	r0, [pc, #72]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    3416:	4b16      	ldr	r3, [pc, #88]	; (3470 <_gpio_set_pin_pull_mode+0xb0>)
    3418:	4798      	blx	r3
		break;
    341a:	e01c      	b.n	3456 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    341c:	79bb      	ldrb	r3, [r7, #6]
    341e:	2201      	movs	r2, #1
    3420:	409a      	lsls	r2, r3
    3422:	79fb      	ldrb	r3, [r7, #7]
    3424:	4619      	mov	r1, r3
    3426:	480e      	ldr	r0, [pc, #56]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    3428:	4b0f      	ldr	r3, [pc, #60]	; (3468 <_gpio_set_pin_pull_mode+0xa8>)
    342a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    342c:	79ba      	ldrb	r2, [r7, #6]
    342e:	79fb      	ldrb	r3, [r7, #7]
    3430:	4619      	mov	r1, r3
    3432:	480b      	ldr	r0, [pc, #44]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    3434:	4b0d      	ldr	r3, [pc, #52]	; (346c <_gpio_set_pin_pull_mode+0xac>)
    3436:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    3438:	79bb      	ldrb	r3, [r7, #6]
    343a:	2201      	movs	r2, #1
    343c:	409a      	lsls	r2, r3
    343e:	79fb      	ldrb	r3, [r7, #7]
    3440:	4619      	mov	r1, r3
    3442:	4807      	ldr	r0, [pc, #28]	; (3460 <_gpio_set_pin_pull_mode+0xa0>)
    3444:	4b0b      	ldr	r3, [pc, #44]	; (3474 <_gpio_set_pin_pull_mode+0xb4>)
    3446:	4798      	blx	r3
		break;
    3448:	e005      	b.n	3456 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    344a:	2289      	movs	r2, #137	; 0x89
    344c:	490a      	ldr	r1, [pc, #40]	; (3478 <_gpio_set_pin_pull_mode+0xb8>)
    344e:	2000      	movs	r0, #0
    3450:	4b0a      	ldr	r3, [pc, #40]	; (347c <_gpio_set_pin_pull_mode+0xbc>)
    3452:	4798      	blx	r3
		break;
    3454:	bf00      	nop
	}
}
    3456:	bf00      	nop
    3458:	3708      	adds	r7, #8
    345a:	46bd      	mov	sp, r7
    345c:	bd80      	pop	{r7, pc}
    345e:	bf00      	nop
    3460:	41008000 	.word	0x41008000
    3464:	00003227 	.word	0x00003227
    3468:	00003053 	.word	0x00003053
    346c:	000031e3 	.word	0x000031e3
    3470:	0000307b 	.word	0x0000307b
    3474:	000030a3 	.word	0x000030a3
    3478:	0001aa7c 	.word	0x0001aa7c
    347c:	000062c5 	.word	0x000062c5

00003480 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3480:	b590      	push	{r4, r7, lr}
    3482:	b085      	sub	sp, #20
    3484:	af00      	add	r7, sp, #0
    3486:	6078      	str	r0, [r7, #4]
    3488:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    348a:	687b      	ldr	r3, [r7, #4]
    348c:	095b      	lsrs	r3, r3, #5
    348e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	b2db      	uxtb	r3, r3
    3494:	f003 031f 	and.w	r3, r3, #31
    3498:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    349a:	683b      	ldr	r3, [r7, #0]
    349c:	f1b3 3fff 	cmp.w	r3, #4294967295
    34a0:	d106      	bne.n	34b0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    34a2:	7bba      	ldrb	r2, [r7, #14]
    34a4:	7bf9      	ldrb	r1, [r7, #15]
    34a6:	2300      	movs	r3, #0
    34a8:	4812      	ldr	r0, [pc, #72]	; (34f4 <_gpio_set_pin_function+0x74>)
    34aa:	4c13      	ldr	r4, [pc, #76]	; (34f8 <_gpio_set_pin_function+0x78>)
    34ac:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    34ae:	e01d      	b.n	34ec <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    34b0:	7bba      	ldrb	r2, [r7, #14]
    34b2:	7bf9      	ldrb	r1, [r7, #15]
    34b4:	2301      	movs	r3, #1
    34b6:	480f      	ldr	r0, [pc, #60]	; (34f4 <_gpio_set_pin_function+0x74>)
    34b8:	4c0f      	ldr	r4, [pc, #60]	; (34f8 <_gpio_set_pin_function+0x78>)
    34ba:	47a0      	blx	r4
		if (pin & 1) {
    34bc:	7bbb      	ldrb	r3, [r7, #14]
    34be:	f003 0301 	and.w	r3, r3, #1
    34c2:	2b00      	cmp	r3, #0
    34c4:	d009      	beq.n	34da <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    34c6:	7bbb      	ldrb	r3, [r7, #14]
    34c8:	085b      	lsrs	r3, r3, #1
    34ca:	b2da      	uxtb	r2, r3
    34cc:	683b      	ldr	r3, [r7, #0]
    34ce:	b2db      	uxtb	r3, r3
    34d0:	7bf9      	ldrb	r1, [r7, #15]
    34d2:	4808      	ldr	r0, [pc, #32]	; (34f4 <_gpio_set_pin_function+0x74>)
    34d4:	4c09      	ldr	r4, [pc, #36]	; (34fc <_gpio_set_pin_function+0x7c>)
    34d6:	47a0      	blx	r4
}
    34d8:	e008      	b.n	34ec <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    34da:	7bbb      	ldrb	r3, [r7, #14]
    34dc:	085b      	lsrs	r3, r3, #1
    34de:	b2da      	uxtb	r2, r3
    34e0:	683b      	ldr	r3, [r7, #0]
    34e2:	b2db      	uxtb	r3, r3
    34e4:	7bf9      	ldrb	r1, [r7, #15]
    34e6:	4803      	ldr	r0, [pc, #12]	; (34f4 <_gpio_set_pin_function+0x74>)
    34e8:	4c05      	ldr	r4, [pc, #20]	; (3500 <_gpio_set_pin_function+0x80>)
    34ea:	47a0      	blx	r4
}
    34ec:	bf00      	nop
    34ee:	3714      	adds	r7, #20
    34f0:	46bd      	mov	sp, r7
    34f2:	bd90      	pop	{r4, r7, pc}
    34f4:	41008000 	.word	0x41008000
    34f8:	00003189 	.word	0x00003189
    34fc:	0000312b 	.word	0x0000312b
    3500:	000030cb 	.word	0x000030cb

00003504 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3504:	b580      	push	{r7, lr}
    3506:	b082      	sub	sp, #8
    3508:	af00      	add	r7, sp, #0
    350a:	4603      	mov	r3, r0
    350c:	460a      	mov	r2, r1
    350e:	71fb      	strb	r3, [r7, #7]
    3510:	4613      	mov	r3, r2
    3512:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3514:	79fb      	ldrb	r3, [r7, #7]
    3516:	095b      	lsrs	r3, r3, #5
    3518:	b2d8      	uxtb	r0, r3
    351a:	79fb      	ldrb	r3, [r7, #7]
    351c:	f003 031f 	and.w	r3, r3, #31
    3520:	b2db      	uxtb	r3, r3
    3522:	79ba      	ldrb	r2, [r7, #6]
    3524:	4619      	mov	r1, r3
    3526:	4b03      	ldr	r3, [pc, #12]	; (3534 <gpio_set_pin_pull_mode+0x30>)
    3528:	4798      	blx	r3
}
    352a:	bf00      	nop
    352c:	3708      	adds	r7, #8
    352e:	46bd      	mov	sp, r7
    3530:	bd80      	pop	{r7, pc}
    3532:	bf00      	nop
    3534:	000033c1 	.word	0x000033c1

00003538 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3538:	b580      	push	{r7, lr}
    353a:	b082      	sub	sp, #8
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3542:	6839      	ldr	r1, [r7, #0]
    3544:	6878      	ldr	r0, [r7, #4]
    3546:	4b03      	ldr	r3, [pc, #12]	; (3554 <gpio_set_pin_function+0x1c>)
    3548:	4798      	blx	r3
}
    354a:	bf00      	nop
    354c:	3708      	adds	r7, #8
    354e:	46bd      	mov	sp, r7
    3550:	bd80      	pop	{r7, pc}
    3552:	bf00      	nop
    3554:	00003481 	.word	0x00003481

00003558 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3558:	b580      	push	{r7, lr}
    355a:	b082      	sub	sp, #8
    355c:	af00      	add	r7, sp, #0
    355e:	4603      	mov	r3, r0
    3560:	460a      	mov	r2, r1
    3562:	71fb      	strb	r3, [r7, #7]
    3564:	4613      	mov	r3, r2
    3566:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3568:	79fb      	ldrb	r3, [r7, #7]
    356a:	095b      	lsrs	r3, r3, #5
    356c:	b2d8      	uxtb	r0, r3
    356e:	79fb      	ldrb	r3, [r7, #7]
    3570:	f003 031f 	and.w	r3, r3, #31
    3574:	2201      	movs	r2, #1
    3576:	fa02 f303 	lsl.w	r3, r2, r3
    357a:	79ba      	ldrb	r2, [r7, #6]
    357c:	4619      	mov	r1, r3
    357e:	4b03      	ldr	r3, [pc, #12]	; (358c <gpio_set_pin_direction+0x34>)
    3580:	4798      	blx	r3
}
    3582:	bf00      	nop
    3584:	3708      	adds	r7, #8
    3586:	46bd      	mov	sp, r7
    3588:	bd80      	pop	{r7, pc}
    358a:	bf00      	nop
    358c:	00003295 	.word	0x00003295

00003590 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3590:	b580      	push	{r7, lr}
    3592:	b082      	sub	sp, #8
    3594:	af00      	add	r7, sp, #0
    3596:	4603      	mov	r3, r0
    3598:	460a      	mov	r2, r1
    359a:	71fb      	strb	r3, [r7, #7]
    359c:	4613      	mov	r3, r2
    359e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    35a0:	79fb      	ldrb	r3, [r7, #7]
    35a2:	095b      	lsrs	r3, r3, #5
    35a4:	b2d8      	uxtb	r0, r3
    35a6:	79fb      	ldrb	r3, [r7, #7]
    35a8:	f003 031f 	and.w	r3, r3, #31
    35ac:	2201      	movs	r2, #1
    35ae:	fa02 f303 	lsl.w	r3, r2, r3
    35b2:	79ba      	ldrb	r2, [r7, #6]
    35b4:	4619      	mov	r1, r3
    35b6:	4b03      	ldr	r3, [pc, #12]	; (35c4 <gpio_set_pin_level+0x34>)
    35b8:	4798      	blx	r3
}
    35ba:	bf00      	nop
    35bc:	3708      	adds	r7, #8
    35be:	46bd      	mov	sp, r7
    35c0:	bd80      	pop	{r7, pc}
    35c2:	bf00      	nop
    35c4:	0000337d 	.word	0x0000337d

000035c8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    35c8:	b580      	push	{r7, lr}
    35ca:	af00      	add	r7, sp, #0
	_init_chip();
    35cc:	4b01      	ldr	r3, [pc, #4]	; (35d4 <init_mcu+0xc>)
    35ce:	4798      	blx	r3
}
    35d0:	bf00      	nop
    35d2:	bd80      	pop	{r7, pc}
    35d4:	00006ec1 	.word	0x00006ec1

000035d8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    35d8:	b580      	push	{r7, lr}
    35da:	b082      	sub	sp, #8
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
    35e0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	2b00      	cmp	r3, #0
    35e6:	d004      	beq.n	35f2 <wdt_init+0x1a>
    35e8:	683b      	ldr	r3, [r7, #0]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d001      	beq.n	35f2 <wdt_init+0x1a>
    35ee:	2301      	movs	r3, #1
    35f0:	e000      	b.n	35f4 <wdt_init+0x1c>
    35f2:	2300      	movs	r3, #0
    35f4:	f003 0301 	and.w	r3, r3, #1
    35f8:	b2db      	uxtb	r3, r3
    35fa:	2248      	movs	r2, #72	; 0x48
    35fc:	4907      	ldr	r1, [pc, #28]	; (361c <wdt_init+0x44>)
    35fe:	4618      	mov	r0, r3
    3600:	4b07      	ldr	r3, [pc, #28]	; (3620 <wdt_init+0x48>)
    3602:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	683a      	ldr	r2, [r7, #0]
    3608:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	4618      	mov	r0, r3
    360e:	4b05      	ldr	r3, [pc, #20]	; (3624 <wdt_init+0x4c>)
    3610:	4798      	blx	r3
    3612:	4603      	mov	r3, r0
}
    3614:	4618      	mov	r0, r3
    3616:	3708      	adds	r7, #8
    3618:	46bd      	mov	sp, r7
    361a:	bd80      	pop	{r7, pc}
    361c:	0001aa98 	.word	0x0001aa98
    3620:	000062c5 	.word	0x000062c5
    3624:	0000dfc5 	.word	0x0000dfc5

00003628 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    3628:	b580      	push	{r7, lr}
    362a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    362c:	4804      	ldr	r0, [pc, #16]	; (3640 <CRC_CALC_init+0x18>)
    362e:	4b05      	ldr	r3, [pc, #20]	; (3644 <CRC_CALC_init+0x1c>)
    3630:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3632:	4905      	ldr	r1, [pc, #20]	; (3648 <CRC_CALC_init+0x20>)
    3634:	4805      	ldr	r0, [pc, #20]	; (364c <CRC_CALC_init+0x24>)
    3636:	4b06      	ldr	r3, [pc, #24]	; (3650 <CRC_CALC_init+0x28>)
    3638:	4798      	blx	r3
}
    363a:	bf00      	nop
    363c:	bd80      	pop	{r7, pc}
    363e:	bf00      	nop
    3640:	40000800 	.word	0x40000800
    3644:	00002eeb 	.word	0x00002eeb
    3648:	41002000 	.word	0x41002000
    364c:	20005124 	.word	0x20005124
    3650:	000045e5 	.word	0x000045e5

00003654 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3654:	b580      	push	{r7, lr}
    3656:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3658:	2244      	movs	r2, #68	; 0x44
    365a:	2104      	movs	r1, #4
    365c:	481e      	ldr	r0, [pc, #120]	; (36d8 <EXTERNAL_IRQ_0_init+0x84>)
    365e:	4b1f      	ldr	r3, [pc, #124]	; (36dc <EXTERNAL_IRQ_0_init+0x88>)
    3660:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3662:	481f      	ldr	r0, [pc, #124]	; (36e0 <EXTERNAL_IRQ_0_init+0x8c>)
    3664:	4b1f      	ldr	r3, [pc, #124]	; (36e4 <EXTERNAL_IRQ_0_init+0x90>)
    3666:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    3668:	2101      	movs	r1, #1
    366a:	2004      	movs	r0, #4
    366c:	4b1e      	ldr	r3, [pc, #120]	; (36e8 <EXTERNAL_IRQ_0_init+0x94>)
    366e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    3670:	2102      	movs	r1, #2
    3672:	2004      	movs	r0, #4
    3674:	4b1d      	ldr	r3, [pc, #116]	; (36ec <EXTERNAL_IRQ_0_init+0x98>)
    3676:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    3678:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    367c:	2004      	movs	r0, #4
    367e:	4b1c      	ldr	r3, [pc, #112]	; (36f0 <EXTERNAL_IRQ_0_init+0x9c>)
    3680:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    3682:	2101      	movs	r1, #1
    3684:	2005      	movs	r0, #5
    3686:	4b18      	ldr	r3, [pc, #96]	; (36e8 <EXTERNAL_IRQ_0_init+0x94>)
    3688:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    368a:	2102      	movs	r1, #2
    368c:	2005      	movs	r0, #5
    368e:	4b17      	ldr	r3, [pc, #92]	; (36ec <EXTERNAL_IRQ_0_init+0x98>)
    3690:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    3692:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3696:	2005      	movs	r0, #5
    3698:	4b15      	ldr	r3, [pc, #84]	; (36f0 <EXTERNAL_IRQ_0_init+0x9c>)
    369a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    369c:	2101      	movs	r1, #1
    369e:	2056      	movs	r0, #86	; 0x56
    36a0:	4b11      	ldr	r3, [pc, #68]	; (36e8 <EXTERNAL_IRQ_0_init+0x94>)
    36a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    36a4:	2102      	movs	r1, #2
    36a6:	2056      	movs	r0, #86	; 0x56
    36a8:	4b10      	ldr	r3, [pc, #64]	; (36ec <EXTERNAL_IRQ_0_init+0x98>)
    36aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    36ac:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    36b0:	2056      	movs	r0, #86	; 0x56
    36b2:	4b0f      	ldr	r3, [pc, #60]	; (36f0 <EXTERNAL_IRQ_0_init+0x9c>)
    36b4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    36b6:	2101      	movs	r1, #1
    36b8:	2057      	movs	r0, #87	; 0x57
    36ba:	4b0b      	ldr	r3, [pc, #44]	; (36e8 <EXTERNAL_IRQ_0_init+0x94>)
    36bc:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    36be:	2102      	movs	r1, #2
    36c0:	2057      	movs	r0, #87	; 0x57
    36c2:	4b0a      	ldr	r3, [pc, #40]	; (36ec <EXTERNAL_IRQ_0_init+0x98>)
    36c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    36c6:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    36ca:	2057      	movs	r0, #87	; 0x57
    36cc:	4b08      	ldr	r3, [pc, #32]	; (36f0 <EXTERNAL_IRQ_0_init+0x9c>)
    36ce:	4798      	blx	r3

	ext_irq_init();
    36d0:	4b08      	ldr	r3, [pc, #32]	; (36f4 <EXTERNAL_IRQ_0_init+0xa0>)
    36d2:	4798      	blx	r3
}
    36d4:	bf00      	nop
    36d6:	bd80      	pop	{r7, pc}
    36d8:	40001c00 	.word	0x40001c00
    36dc:	00002d85 	.word	0x00002d85
    36e0:	40000800 	.word	0x40000800
    36e4:	00002e6b 	.word	0x00002e6b
    36e8:	00003559 	.word	0x00003559
    36ec:	00003505 	.word	0x00003505
    36f0:	00003539 	.word	0x00003539
    36f4:	00004749 	.word	0x00004749

000036f8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    36f8:	b580      	push	{r7, lr}
    36fa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36fc:	2244      	movs	r2, #68	; 0x44
    36fe:	210b      	movs	r1, #11
    3700:	4804      	ldr	r0, [pc, #16]	; (3714 <EVENT_SYSTEM_0_init+0x1c>)
    3702:	4b05      	ldr	r3, [pc, #20]	; (3718 <EVENT_SYSTEM_0_init+0x20>)
    3704:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3706:	4805      	ldr	r0, [pc, #20]	; (371c <EVENT_SYSTEM_0_init+0x24>)
    3708:	4b05      	ldr	r3, [pc, #20]	; (3720 <EVENT_SYSTEM_0_init+0x28>)
    370a:	4798      	blx	r3

	event_system_init();
    370c:	4b05      	ldr	r3, [pc, #20]	; (3724 <EVENT_SYSTEM_0_init+0x2c>)
    370e:	4798      	blx	r3
}
    3710:	bf00      	nop
    3712:	bd80      	pop	{r7, pc}
    3714:	40001c00 	.word	0x40001c00
    3718:	00002d85 	.word	0x00002d85
    371c:	40000800 	.word	0x40000800
    3720:	00002f0b 	.word	0x00002f0b
    3724:	00004735 	.word	0x00004735

00003728 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3728:	b580      	push	{r7, lr}
    372a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    372c:	2101      	movs	r1, #1
    372e:	202b      	movs	r0, #43	; 0x2b
    3730:	4b2b      	ldr	r3, [pc, #172]	; (37e0 <QSPI_N25Q256_PORT_init+0xb8>)
    3732:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3734:	2100      	movs	r1, #0
    3736:	202b      	movs	r0, #43	; 0x2b
    3738:	4b2a      	ldr	r3, [pc, #168]	; (37e4 <QSPI_N25Q256_PORT_init+0xbc>)
    373a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    373c:	492a      	ldr	r1, [pc, #168]	; (37e8 <QSPI_N25Q256_PORT_init+0xc0>)
    373e:	202b      	movs	r0, #43	; 0x2b
    3740:	4b2a      	ldr	r3, [pc, #168]	; (37ec <QSPI_N25Q256_PORT_init+0xc4>)
    3742:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3744:	2102      	movs	r1, #2
    3746:	2008      	movs	r0, #8
    3748:	4b25      	ldr	r3, [pc, #148]	; (37e0 <QSPI_N25Q256_PORT_init+0xb8>)
    374a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    374c:	2100      	movs	r1, #0
    374e:	2008      	movs	r0, #8
    3750:	4b27      	ldr	r3, [pc, #156]	; (37f0 <QSPI_N25Q256_PORT_init+0xc8>)
    3752:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3754:	2100      	movs	r1, #0
    3756:	2008      	movs	r0, #8
    3758:	4b22      	ldr	r3, [pc, #136]	; (37e4 <QSPI_N25Q256_PORT_init+0xbc>)
    375a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    375c:	4925      	ldr	r1, [pc, #148]	; (37f4 <QSPI_N25Q256_PORT_init+0xcc>)
    375e:	2008      	movs	r0, #8
    3760:	4b22      	ldr	r3, [pc, #136]	; (37ec <QSPI_N25Q256_PORT_init+0xc4>)
    3762:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3764:	2102      	movs	r1, #2
    3766:	2009      	movs	r0, #9
    3768:	4b1d      	ldr	r3, [pc, #116]	; (37e0 <QSPI_N25Q256_PORT_init+0xb8>)
    376a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    376c:	2100      	movs	r1, #0
    376e:	2009      	movs	r0, #9
    3770:	4b1f      	ldr	r3, [pc, #124]	; (37f0 <QSPI_N25Q256_PORT_init+0xc8>)
    3772:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3774:	2100      	movs	r1, #0
    3776:	2009      	movs	r0, #9
    3778:	4b1a      	ldr	r3, [pc, #104]	; (37e4 <QSPI_N25Q256_PORT_init+0xbc>)
    377a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    377c:	491e      	ldr	r1, [pc, #120]	; (37f8 <QSPI_N25Q256_PORT_init+0xd0>)
    377e:	2009      	movs	r0, #9
    3780:	4b1a      	ldr	r3, [pc, #104]	; (37ec <QSPI_N25Q256_PORT_init+0xc4>)
    3782:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3784:	2102      	movs	r1, #2
    3786:	200a      	movs	r0, #10
    3788:	4b15      	ldr	r3, [pc, #84]	; (37e0 <QSPI_N25Q256_PORT_init+0xb8>)
    378a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    378c:	2100      	movs	r1, #0
    378e:	200a      	movs	r0, #10
    3790:	4b17      	ldr	r3, [pc, #92]	; (37f0 <QSPI_N25Q256_PORT_init+0xc8>)
    3792:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3794:	2100      	movs	r1, #0
    3796:	200a      	movs	r0, #10
    3798:	4b12      	ldr	r3, [pc, #72]	; (37e4 <QSPI_N25Q256_PORT_init+0xbc>)
    379a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    379c:	4917      	ldr	r1, [pc, #92]	; (37fc <QSPI_N25Q256_PORT_init+0xd4>)
    379e:	200a      	movs	r0, #10
    37a0:	4b12      	ldr	r3, [pc, #72]	; (37ec <QSPI_N25Q256_PORT_init+0xc4>)
    37a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    37a4:	2102      	movs	r1, #2
    37a6:	200b      	movs	r0, #11
    37a8:	4b0d      	ldr	r3, [pc, #52]	; (37e0 <QSPI_N25Q256_PORT_init+0xb8>)
    37aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    37ac:	2100      	movs	r1, #0
    37ae:	200b      	movs	r0, #11
    37b0:	4b0f      	ldr	r3, [pc, #60]	; (37f0 <QSPI_N25Q256_PORT_init+0xc8>)
    37b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    37b4:	2100      	movs	r1, #0
    37b6:	200b      	movs	r0, #11
    37b8:	4b0a      	ldr	r3, [pc, #40]	; (37e4 <QSPI_N25Q256_PORT_init+0xbc>)
    37ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    37bc:	4910      	ldr	r1, [pc, #64]	; (3800 <QSPI_N25Q256_PORT_init+0xd8>)
    37be:	200b      	movs	r0, #11
    37c0:	4b0a      	ldr	r3, [pc, #40]	; (37ec <QSPI_N25Q256_PORT_init+0xc4>)
    37c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    37c4:	2101      	movs	r1, #1
    37c6:	202a      	movs	r0, #42	; 0x2a
    37c8:	4b05      	ldr	r3, [pc, #20]	; (37e0 <QSPI_N25Q256_PORT_init+0xb8>)
    37ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    37cc:	2100      	movs	r1, #0
    37ce:	202a      	movs	r0, #42	; 0x2a
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <QSPI_N25Q256_PORT_init+0xbc>)
    37d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    37d4:	490b      	ldr	r1, [pc, #44]	; (3804 <QSPI_N25Q256_PORT_init+0xdc>)
    37d6:	202a      	movs	r0, #42	; 0x2a
    37d8:	4b04      	ldr	r3, [pc, #16]	; (37ec <QSPI_N25Q256_PORT_init+0xc4>)
    37da:	4798      	blx	r3
}
    37dc:	bf00      	nop
    37de:	bd80      	pop	{r7, pc}
    37e0:	00003559 	.word	0x00003559
    37e4:	00003505 	.word	0x00003505
    37e8:	002b0007 	.word	0x002b0007
    37ec:	00003539 	.word	0x00003539
    37f0:	00003591 	.word	0x00003591
    37f4:	00080007 	.word	0x00080007
    37f8:	00090007 	.word	0x00090007
    37fc:	000a0007 	.word	0x000a0007
    3800:	000b0007 	.word	0x000b0007
    3804:	002a0007 	.word	0x002a0007

00003808 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3808:	b580      	push	{r7, lr}
    380a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    380c:	4805      	ldr	r0, [pc, #20]	; (3824 <QSPI_N25Q256_CLOCK_init+0x1c>)
    380e:	4b06      	ldr	r3, [pc, #24]	; (3828 <QSPI_N25Q256_CLOCK_init+0x20>)
    3810:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    3812:	4804      	ldr	r0, [pc, #16]	; (3824 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3814:	4b05      	ldr	r3, [pc, #20]	; (382c <QSPI_N25Q256_CLOCK_init+0x24>)
    3816:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3818:	4802      	ldr	r0, [pc, #8]	; (3824 <QSPI_N25Q256_CLOCK_init+0x1c>)
    381a:	4b05      	ldr	r3, [pc, #20]	; (3830 <QSPI_N25Q256_CLOCK_init+0x28>)
    381c:	4798      	blx	r3
}
    381e:	bf00      	nop
    3820:	bd80      	pop	{r7, pc}
    3822:	bf00      	nop
    3824:	40000800 	.word	0x40000800
    3828:	00002dcb 	.word	0x00002dcb
    382c:	00002e0b 	.word	0x00002e0b
    3830:	00002f6b 	.word	0x00002f6b

00003834 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3834:	b580      	push	{r7, lr}
    3836:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <QSPI_N25Q256_init+0x18>)
    383a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    383c:	4904      	ldr	r1, [pc, #16]	; (3850 <QSPI_N25Q256_init+0x1c>)
    383e:	4805      	ldr	r0, [pc, #20]	; (3854 <QSPI_N25Q256_init+0x20>)
    3840:	4b05      	ldr	r3, [pc, #20]	; (3858 <QSPI_N25Q256_init+0x24>)
    3842:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3844:	4b05      	ldr	r3, [pc, #20]	; (385c <QSPI_N25Q256_init+0x28>)
    3846:	4798      	blx	r3
}
    3848:	bf00      	nop
    384a:	bd80      	pop	{r7, pc}
    384c:	00003809 	.word	0x00003809
    3850:	42003400 	.word	0x42003400
    3854:	20004fc8 	.word	0x20004fc8
    3858:	00004d51 	.word	0x00004d51
    385c:	00003729 	.word	0x00003729

00003860 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3860:	b580      	push	{r7, lr}
    3862:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3864:	4802      	ldr	r0, [pc, #8]	; (3870 <DATETIME_CLOCK_CLOCK_init+0x10>)
    3866:	4b03      	ldr	r3, [pc, #12]	; (3874 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3868:	4798      	blx	r3
}
    386a:	bf00      	nop
    386c:	bd80      	pop	{r7, pc}
    386e:	bf00      	nop
    3870:	40000800 	.word	0x40000800
    3874:	00002e4b 	.word	0x00002e4b

00003878 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3878:	b580      	push	{r7, lr}
    387a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    387c:	4b03      	ldr	r3, [pc, #12]	; (388c <DATETIME_CLOCK_init+0x14>)
    387e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3880:	4903      	ldr	r1, [pc, #12]	; (3890 <DATETIME_CLOCK_init+0x18>)
    3882:	4804      	ldr	r0, [pc, #16]	; (3894 <DATETIME_CLOCK_init+0x1c>)
    3884:	4b04      	ldr	r3, [pc, #16]	; (3898 <DATETIME_CLOCK_init+0x20>)
    3886:	4798      	blx	r3
}
    3888:	bf00      	nop
    388a:	bd80      	pop	{r7, pc}
    388c:	00003861 	.word	0x00003861
    3890:	40002400 	.word	0x40002400
    3894:	20005100 	.word	0x20005100
    3898:	000042e9 	.word	0x000042e9

0000389c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    389c:	b580      	push	{r7, lr}
    389e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    38a0:	2100      	movs	r1, #0
    38a2:	203b      	movs	r0, #59	; 0x3b
    38a4:	4b11      	ldr	r3, [pc, #68]	; (38ec <SPI_TEMP_PORT_init+0x50>)
    38a6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    38a8:	2102      	movs	r1, #2
    38aa:	203b      	movs	r0, #59	; 0x3b
    38ac:	4b10      	ldr	r3, [pc, #64]	; (38f0 <SPI_TEMP_PORT_init+0x54>)
    38ae:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    38b0:	4910      	ldr	r1, [pc, #64]	; (38f4 <SPI_TEMP_PORT_init+0x58>)
    38b2:	203b      	movs	r0, #59	; 0x3b
    38b4:	4b10      	ldr	r3, [pc, #64]	; (38f8 <SPI_TEMP_PORT_init+0x5c>)
    38b6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    38b8:	2100      	movs	r1, #0
    38ba:	203a      	movs	r0, #58	; 0x3a
    38bc:	4b0b      	ldr	r3, [pc, #44]	; (38ec <SPI_TEMP_PORT_init+0x50>)
    38be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    38c0:	2102      	movs	r1, #2
    38c2:	203a      	movs	r0, #58	; 0x3a
    38c4:	4b0a      	ldr	r3, [pc, #40]	; (38f0 <SPI_TEMP_PORT_init+0x54>)
    38c6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    38c8:	490c      	ldr	r1, [pc, #48]	; (38fc <SPI_TEMP_PORT_init+0x60>)
    38ca:	203a      	movs	r0, #58	; 0x3a
    38cc:	4b0a      	ldr	r3, [pc, #40]	; (38f8 <SPI_TEMP_PORT_init+0x5c>)
    38ce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    38d0:	2101      	movs	r1, #1
    38d2:	203c      	movs	r0, #60	; 0x3c
    38d4:	4b06      	ldr	r3, [pc, #24]	; (38f0 <SPI_TEMP_PORT_init+0x54>)
    38d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    38d8:	2100      	movs	r1, #0
    38da:	203c      	movs	r0, #60	; 0x3c
    38dc:	4b08      	ldr	r3, [pc, #32]	; (3900 <SPI_TEMP_PORT_init+0x64>)
    38de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    38e0:	4908      	ldr	r1, [pc, #32]	; (3904 <SPI_TEMP_PORT_init+0x68>)
    38e2:	203c      	movs	r0, #60	; 0x3c
    38e4:	4b04      	ldr	r3, [pc, #16]	; (38f8 <SPI_TEMP_PORT_init+0x5c>)
    38e6:	4798      	blx	r3
}
    38e8:	bf00      	nop
    38ea:	bd80      	pop	{r7, pc}
    38ec:	00003591 	.word	0x00003591
    38f0:	00003559 	.word	0x00003559
    38f4:	003b0003 	.word	0x003b0003
    38f8:	00003539 	.word	0x00003539
    38fc:	003a0003 	.word	0x003a0003
    3900:	00003505 	.word	0x00003505
    3904:	003c0003 	.word	0x003c0003

00003908 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3908:	b580      	push	{r7, lr}
    390a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    390c:	2243      	movs	r2, #67	; 0x43
    390e:	2122      	movs	r1, #34	; 0x22
    3910:	4806      	ldr	r0, [pc, #24]	; (392c <SPI_TEMP_CLOCK_init+0x24>)
    3912:	4b07      	ldr	r3, [pc, #28]	; (3930 <SPI_TEMP_CLOCK_init+0x28>)
    3914:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3916:	224a      	movs	r2, #74	; 0x4a
    3918:	2103      	movs	r1, #3
    391a:	4804      	ldr	r0, [pc, #16]	; (392c <SPI_TEMP_CLOCK_init+0x24>)
    391c:	4b04      	ldr	r3, [pc, #16]	; (3930 <SPI_TEMP_CLOCK_init+0x28>)
    391e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3920:	4804      	ldr	r0, [pc, #16]	; (3934 <SPI_TEMP_CLOCK_init+0x2c>)
    3922:	4b05      	ldr	r3, [pc, #20]	; (3938 <SPI_TEMP_CLOCK_init+0x30>)
    3924:	4798      	blx	r3
}
    3926:	bf00      	nop
    3928:	bd80      	pop	{r7, pc}
    392a:	bf00      	nop
    392c:	40001c00 	.word	0x40001c00
    3930:	00002d85 	.word	0x00002d85
    3934:	40000800 	.word	0x40000800
    3938:	00002f8b 	.word	0x00002f8b

0000393c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    393c:	b580      	push	{r7, lr}
    393e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3940:	4b05      	ldr	r3, [pc, #20]	; (3958 <SPI_TEMP_init+0x1c>)
    3942:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    3944:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    3948:	4804      	ldr	r0, [pc, #16]	; (395c <SPI_TEMP_init+0x20>)
    394a:	4b05      	ldr	r3, [pc, #20]	; (3960 <SPI_TEMP_init+0x24>)
    394c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    394e:	4b05      	ldr	r3, [pc, #20]	; (3964 <SPI_TEMP_init+0x28>)
    3950:	4798      	blx	r3
}
    3952:	bf00      	nop
    3954:	bd80      	pop	{r7, pc}
    3956:	bf00      	nop
    3958:	00003909 	.word	0x00003909
    395c:	20004f80 	.word	0x20004f80
    3960:	00005079 	.word	0x00005079
    3964:	0000389d 	.word	0x0000389d

00003968 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    3968:	b580      	push	{r7, lr}
    396a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    396c:	2100      	movs	r1, #0
    396e:	2017      	movs	r0, #23
    3970:	4b07      	ldr	r3, [pc, #28]	; (3990 <I2C_EXPANDER_PORT_init+0x28>)
    3972:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    3974:	4907      	ldr	r1, [pc, #28]	; (3994 <I2C_EXPANDER_PORT_init+0x2c>)
    3976:	2017      	movs	r0, #23
    3978:	4b07      	ldr	r3, [pc, #28]	; (3998 <I2C_EXPANDER_PORT_init+0x30>)
    397a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    397c:	2100      	movs	r1, #0
    397e:	2016      	movs	r0, #22
    3980:	4b03      	ldr	r3, [pc, #12]	; (3990 <I2C_EXPANDER_PORT_init+0x28>)
    3982:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3984:	4905      	ldr	r1, [pc, #20]	; (399c <I2C_EXPANDER_PORT_init+0x34>)
    3986:	2016      	movs	r0, #22
    3988:	4b03      	ldr	r3, [pc, #12]	; (3998 <I2C_EXPANDER_PORT_init+0x30>)
    398a:	4798      	blx	r3
}
    398c:	bf00      	nop
    398e:	bd80      	pop	{r7, pc}
    3990:	00003505 	.word	0x00003505
    3994:	00170003 	.word	0x00170003
    3998:	00003539 	.word	0x00003539
    399c:	00160003 	.word	0x00160003

000039a0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    39a0:	b580      	push	{r7, lr}
    39a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    39a4:	2243      	movs	r2, #67	; 0x43
    39a6:	2123      	movs	r1, #35	; 0x23
    39a8:	4806      	ldr	r0, [pc, #24]	; (39c4 <I2C_EXPANDER_CLOCK_init+0x24>)
    39aa:	4b07      	ldr	r3, [pc, #28]	; (39c8 <I2C_EXPANDER_CLOCK_init+0x28>)
    39ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    39ae:	224a      	movs	r2, #74	; 0x4a
    39b0:	2103      	movs	r1, #3
    39b2:	4804      	ldr	r0, [pc, #16]	; (39c4 <I2C_EXPANDER_CLOCK_init+0x24>)
    39b4:	4b04      	ldr	r3, [pc, #16]	; (39c8 <I2C_EXPANDER_CLOCK_init+0x28>)
    39b6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    39b8:	4804      	ldr	r0, [pc, #16]	; (39cc <I2C_EXPANDER_CLOCK_init+0x2c>)
    39ba:	4b05      	ldr	r3, [pc, #20]	; (39d0 <I2C_EXPANDER_CLOCK_init+0x30>)
    39bc:	4798      	blx	r3
}
    39be:	bf00      	nop
    39c0:	bd80      	pop	{r7, pc}
    39c2:	bf00      	nop
    39c4:	40001c00 	.word	0x40001c00
    39c8:	00002d85 	.word	0x00002d85
    39cc:	40000800 	.word	0x40000800
    39d0:	00002fab 	.word	0x00002fab

000039d4 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    39d4:	b580      	push	{r7, lr}
    39d6:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    39d8:	4b04      	ldr	r3, [pc, #16]	; (39ec <I2C_EXPANDER_init+0x18>)
    39da:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    39dc:	4904      	ldr	r1, [pc, #16]	; (39f0 <I2C_EXPANDER_init+0x1c>)
    39de:	4805      	ldr	r0, [pc, #20]	; (39f4 <I2C_EXPANDER_init+0x20>)
    39e0:	4b05      	ldr	r3, [pc, #20]	; (39f8 <I2C_EXPANDER_init+0x24>)
    39e2:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    39e4:	4b05      	ldr	r3, [pc, #20]	; (39fc <I2C_EXPANDER_init+0x28>)
    39e6:	4798      	blx	r3
}
    39e8:	bf00      	nop
    39ea:	bd80      	pop	{r7, pc}
    39ec:	000039a1 	.word	0x000039a1
    39f0:	43000400 	.word	0x43000400
    39f4:	20005064 	.word	0x20005064
    39f8:	00004aad 	.word	0x00004aad
    39fc:	00003969 	.word	0x00003969

00003a00 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    3a00:	b580      	push	{r7, lr}
    3a02:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    3a04:	2100      	movs	r1, #0
    3a06:	2044      	movs	r0, #68	; 0x44
    3a08:	4b11      	ldr	r3, [pc, #68]	; (3a50 <SPI_HI3593_PORT_init+0x50>)
    3a0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    3a0c:	2102      	movs	r1, #2
    3a0e:	2044      	movs	r0, #68	; 0x44
    3a10:	4b10      	ldr	r3, [pc, #64]	; (3a54 <SPI_HI3593_PORT_init+0x54>)
    3a12:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    3a14:	4910      	ldr	r1, [pc, #64]	; (3a58 <SPI_HI3593_PORT_init+0x58>)
    3a16:	2044      	movs	r0, #68	; 0x44
    3a18:	4b10      	ldr	r3, [pc, #64]	; (3a5c <SPI_HI3593_PORT_init+0x5c>)
    3a1a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    3a1c:	2100      	movs	r1, #0
    3a1e:	2045      	movs	r0, #69	; 0x45
    3a20:	4b0b      	ldr	r3, [pc, #44]	; (3a50 <SPI_HI3593_PORT_init+0x50>)
    3a22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    3a24:	2102      	movs	r1, #2
    3a26:	2045      	movs	r0, #69	; 0x45
    3a28:	4b0a      	ldr	r3, [pc, #40]	; (3a54 <SPI_HI3593_PORT_init+0x54>)
    3a2a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    3a2c:	490c      	ldr	r1, [pc, #48]	; (3a60 <SPI_HI3593_PORT_init+0x60>)
    3a2e:	2045      	movs	r0, #69	; 0x45
    3a30:	4b0a      	ldr	r3, [pc, #40]	; (3a5c <SPI_HI3593_PORT_init+0x5c>)
    3a32:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    3a34:	2101      	movs	r1, #1
    3a36:	2047      	movs	r0, #71	; 0x47
    3a38:	4b06      	ldr	r3, [pc, #24]	; (3a54 <SPI_HI3593_PORT_init+0x54>)
    3a3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    3a3c:	2100      	movs	r1, #0
    3a3e:	2047      	movs	r0, #71	; 0x47
    3a40:	4b08      	ldr	r3, [pc, #32]	; (3a64 <SPI_HI3593_PORT_init+0x64>)
    3a42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    3a44:	4908      	ldr	r1, [pc, #32]	; (3a68 <SPI_HI3593_PORT_init+0x68>)
    3a46:	2047      	movs	r0, #71	; 0x47
    3a48:	4b04      	ldr	r3, [pc, #16]	; (3a5c <SPI_HI3593_PORT_init+0x5c>)
    3a4a:	4798      	blx	r3
}
    3a4c:	bf00      	nop
    3a4e:	bd80      	pop	{r7, pc}
    3a50:	00003591 	.word	0x00003591
    3a54:	00003559 	.word	0x00003559
    3a58:	00440002 	.word	0x00440002
    3a5c:	00003539 	.word	0x00003539
    3a60:	00450002 	.word	0x00450002
    3a64:	00003505 	.word	0x00003505
    3a68:	00470002 	.word	0x00470002

00003a6c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a70:	2243      	movs	r2, #67	; 0x43
    3a72:	2124      	movs	r1, #36	; 0x24
    3a74:	4806      	ldr	r0, [pc, #24]	; (3a90 <SPI_HI3593_CLOCK_init+0x24>)
    3a76:	4b07      	ldr	r3, [pc, #28]	; (3a94 <SPI_HI3593_CLOCK_init+0x28>)
    3a78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a7a:	224a      	movs	r2, #74	; 0x4a
    3a7c:	2103      	movs	r1, #3
    3a7e:	4804      	ldr	r0, [pc, #16]	; (3a90 <SPI_HI3593_CLOCK_init+0x24>)
    3a80:	4b04      	ldr	r3, [pc, #16]	; (3a94 <SPI_HI3593_CLOCK_init+0x28>)
    3a82:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    3a84:	4804      	ldr	r0, [pc, #16]	; (3a98 <SPI_HI3593_CLOCK_init+0x2c>)
    3a86:	4b05      	ldr	r3, [pc, #20]	; (3a9c <SPI_HI3593_CLOCK_init+0x30>)
    3a88:	4798      	blx	r3
}
    3a8a:	bf00      	nop
    3a8c:	bd80      	pop	{r7, pc}
    3a8e:	bf00      	nop
    3a90:	40001c00 	.word	0x40001c00
    3a94:	00002d85 	.word	0x00002d85
    3a98:	40000800 	.word	0x40000800
    3a9c:	00002fcb 	.word	0x00002fcb

00003aa0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3aa0:	b580      	push	{r7, lr}
    3aa2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3aa4:	4b04      	ldr	r3, [pc, #16]	; (3ab8 <SPI_HI3593_init+0x18>)
    3aa6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    3aa8:	4904      	ldr	r1, [pc, #16]	; (3abc <SPI_HI3593_init+0x1c>)
    3aaa:	4805      	ldr	r0, [pc, #20]	; (3ac0 <SPI_HI3593_init+0x20>)
    3aac:	4b05      	ldr	r3, [pc, #20]	; (3ac4 <SPI_HI3593_init+0x24>)
    3aae:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3ab0:	4b05      	ldr	r3, [pc, #20]	; (3ac8 <SPI_HI3593_init+0x28>)
    3ab2:	4798      	blx	r3
}
    3ab4:	bf00      	nop
    3ab6:	bd80      	pop	{r7, pc}
    3ab8:	00003a6d 	.word	0x00003a6d
    3abc:	43000800 	.word	0x43000800
    3ac0:	20004f68 	.word	0x20004f68
    3ac4:	0000522d 	.word	0x0000522d
    3ac8:	00003a01 	.word	0x00003a01

00003acc <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    3acc:	b580      	push	{r7, lr}
    3ace:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3ad0:	2100      	movs	r1, #0
    3ad2:	2068      	movs	r0, #104	; 0x68
    3ad4:	4b07      	ldr	r3, [pc, #28]	; (3af4 <I2C_EEPROM_PORT_init+0x28>)
    3ad6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    3ad8:	4907      	ldr	r1, [pc, #28]	; (3af8 <I2C_EEPROM_PORT_init+0x2c>)
    3ada:	2068      	movs	r0, #104	; 0x68
    3adc:	4b07      	ldr	r3, [pc, #28]	; (3afc <I2C_EEPROM_PORT_init+0x30>)
    3ade:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3ae0:	2100      	movs	r1, #0
    3ae2:	2069      	movs	r0, #105	; 0x69
    3ae4:	4b03      	ldr	r3, [pc, #12]	; (3af4 <I2C_EEPROM_PORT_init+0x28>)
    3ae6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3ae8:	4905      	ldr	r1, [pc, #20]	; (3b00 <I2C_EEPROM_PORT_init+0x34>)
    3aea:	2069      	movs	r0, #105	; 0x69
    3aec:	4b03      	ldr	r3, [pc, #12]	; (3afc <I2C_EEPROM_PORT_init+0x30>)
    3aee:	4798      	blx	r3
}
    3af0:	bf00      	nop
    3af2:	bd80      	pop	{r7, pc}
    3af4:	00003505 	.word	0x00003505
    3af8:	00680002 	.word	0x00680002
    3afc:	00003539 	.word	0x00003539
    3b00:	00690002 	.word	0x00690002

00003b04 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3b04:	b580      	push	{r7, lr}
    3b06:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b08:	2242      	movs	r2, #66	; 0x42
    3b0a:	2125      	movs	r1, #37	; 0x25
    3b0c:	4806      	ldr	r0, [pc, #24]	; (3b28 <I2C_EEPROM_CLOCK_init+0x24>)
    3b0e:	4b07      	ldr	r3, [pc, #28]	; (3b2c <I2C_EEPROM_CLOCK_init+0x28>)
    3b10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b12:	224a      	movs	r2, #74	; 0x4a
    3b14:	2103      	movs	r1, #3
    3b16:	4804      	ldr	r0, [pc, #16]	; (3b28 <I2C_EEPROM_CLOCK_init+0x24>)
    3b18:	4b04      	ldr	r3, [pc, #16]	; (3b2c <I2C_EEPROM_CLOCK_init+0x28>)
    3b1a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    3b1c:	4804      	ldr	r0, [pc, #16]	; (3b30 <I2C_EEPROM_CLOCK_init+0x2c>)
    3b1e:	4b05      	ldr	r3, [pc, #20]	; (3b34 <I2C_EEPROM_CLOCK_init+0x30>)
    3b20:	4798      	blx	r3
}
    3b22:	bf00      	nop
    3b24:	bd80      	pop	{r7, pc}
    3b26:	bf00      	nop
    3b28:	40001c00 	.word	0x40001c00
    3b2c:	00002d85 	.word	0x00002d85
    3b30:	40000800 	.word	0x40000800
    3b34:	00002feb 	.word	0x00002feb

00003b38 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    3b3c:	4b04      	ldr	r3, [pc, #16]	; (3b50 <I2C_EEPROM_init+0x18>)
    3b3e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3b40:	4904      	ldr	r1, [pc, #16]	; (3b54 <I2C_EEPROM_init+0x1c>)
    3b42:	4805      	ldr	r0, [pc, #20]	; (3b58 <I2C_EEPROM_init+0x20>)
    3b44:	4b05      	ldr	r3, [pc, #20]	; (3b5c <I2C_EEPROM_init+0x24>)
    3b46:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3b48:	4b05      	ldr	r3, [pc, #20]	; (3b60 <I2C_EEPROM_init+0x28>)
    3b4a:	4798      	blx	r3
}
    3b4c:	bf00      	nop
    3b4e:	bd80      	pop	{r7, pc}
    3b50:	00003b05 	.word	0x00003b05
    3b54:	43000c00 	.word	0x43000c00
    3b58:	200050c0 	.word	0x200050c0
    3b5c:	00004aad 	.word	0x00004aad
    3b60:	00003acd 	.word	0x00003acd

00003b64 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3b64:	b580      	push	{r7, lr}
    3b66:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3b68:	4808      	ldr	r0, [pc, #32]	; (3b8c <TIMER_INTERFACE_init+0x28>)
    3b6a:	4b09      	ldr	r3, [pc, #36]	; (3b90 <TIMER_INTERFACE_init+0x2c>)
    3b6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b6e:	2243      	movs	r2, #67	; 0x43
    3b70:	2109      	movs	r1, #9
    3b72:	4808      	ldr	r0, [pc, #32]	; (3b94 <TIMER_INTERFACE_init+0x30>)
    3b74:	4b08      	ldr	r3, [pc, #32]	; (3b98 <TIMER_INTERFACE_init+0x34>)
    3b76:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    3b78:	4b08      	ldr	r3, [pc, #32]	; (3b9c <TIMER_INTERFACE_init+0x38>)
    3b7a:	4798      	blx	r3
    3b7c:	4603      	mov	r3, r0
    3b7e:	461a      	mov	r2, r3
    3b80:	4907      	ldr	r1, [pc, #28]	; (3ba0 <TIMER_INTERFACE_init+0x3c>)
    3b82:	4808      	ldr	r0, [pc, #32]	; (3ba4 <TIMER_INTERFACE_init+0x40>)
    3b84:	4b08      	ldr	r3, [pc, #32]	; (3ba8 <TIMER_INTERFACE_init+0x44>)
    3b86:	4798      	blx	r3
}
    3b88:	bf00      	nop
    3b8a:	bd80      	pop	{r7, pc}
    3b8c:	40000800 	.word	0x40000800
    3b90:	00002e8b 	.word	0x00002e8b
    3b94:	40001c00 	.word	0x40001c00
    3b98:	00002d85 	.word	0x00002d85
    3b9c:	0000b495 	.word	0x0000b495
    3ba0:	40003800 	.word	0x40003800
    3ba4:	20004fe8 	.word	0x20004fe8
    3ba8:	000054bd 	.word	0x000054bd

00003bac <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    3bb0:	4808      	ldr	r0, [pc, #32]	; (3bd4 <TIMER_EVENT_init+0x28>)
    3bb2:	4b09      	ldr	r3, [pc, #36]	; (3bd8 <TIMER_EVENT_init+0x2c>)
    3bb4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3bb6:	2245      	movs	r2, #69	; 0x45
    3bb8:	2109      	movs	r1, #9
    3bba:	4808      	ldr	r0, [pc, #32]	; (3bdc <TIMER_EVENT_init+0x30>)
    3bbc:	4b08      	ldr	r3, [pc, #32]	; (3be0 <TIMER_EVENT_init+0x34>)
    3bbe:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    3bc0:	4b08      	ldr	r3, [pc, #32]	; (3be4 <TIMER_EVENT_init+0x38>)
    3bc2:	4798      	blx	r3
    3bc4:	4603      	mov	r3, r0
    3bc6:	461a      	mov	r2, r3
    3bc8:	4907      	ldr	r1, [pc, #28]	; (3be8 <TIMER_EVENT_init+0x3c>)
    3bca:	4808      	ldr	r0, [pc, #32]	; (3bec <TIMER_EVENT_init+0x40>)
    3bcc:	4b08      	ldr	r3, [pc, #32]	; (3bf0 <TIMER_EVENT_init+0x44>)
    3bce:	4798      	blx	r3
}
    3bd0:	bf00      	nop
    3bd2:	bd80      	pop	{r7, pc}
    3bd4:	40000800 	.word	0x40000800
    3bd8:	00002eab 	.word	0x00002eab
    3bdc:	40001c00 	.word	0x40001c00
    3be0:	00002d85 	.word	0x00002d85
    3be4:	0000b495 	.word	0x0000b495
    3be8:	40003c00 	.word	0x40003c00
    3bec:	20004fcc 	.word	0x20004fcc
    3bf0:	000054bd 	.word	0x000054bd

00003bf4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3bf4:	b580      	push	{r7, lr}
    3bf6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3bf8:	4808      	ldr	r0, [pc, #32]	; (3c1c <TIMER_ARINC_init+0x28>)
    3bfa:	4b09      	ldr	r3, [pc, #36]	; (3c20 <TIMER_ARINC_init+0x2c>)
    3bfc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3bfe:	2244      	movs	r2, #68	; 0x44
    3c00:	211a      	movs	r1, #26
    3c02:	4808      	ldr	r0, [pc, #32]	; (3c24 <TIMER_ARINC_init+0x30>)
    3c04:	4b08      	ldr	r3, [pc, #32]	; (3c28 <TIMER_ARINC_init+0x34>)
    3c06:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3c08:	4b08      	ldr	r3, [pc, #32]	; (3c2c <TIMER_ARINC_init+0x38>)
    3c0a:	4798      	blx	r3
    3c0c:	4603      	mov	r3, r0
    3c0e:	461a      	mov	r2, r3
    3c10:	4907      	ldr	r1, [pc, #28]	; (3c30 <TIMER_ARINC_init+0x3c>)
    3c12:	4808      	ldr	r0, [pc, #32]	; (3c34 <TIMER_ARINC_init+0x40>)
    3c14:	4b08      	ldr	r3, [pc, #32]	; (3c38 <TIMER_ARINC_init+0x44>)
    3c16:	4798      	blx	r3
}
    3c18:	bf00      	nop
    3c1a:	bd80      	pop	{r7, pc}
    3c1c:	40000800 	.word	0x40000800
    3c20:	00002f2b 	.word	0x00002f2b
    3c24:	40001c00 	.word	0x40001c00
    3c28:	00002d85 	.word	0x00002d85
    3c2c:	0000b495 	.word	0x0000b495
    3c30:	4101a000 	.word	0x4101a000
    3c34:	20005048 	.word	0x20005048
    3c38:	000054bd 	.word	0x000054bd

00003c3c <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3c40:	4808      	ldr	r0, [pc, #32]	; (3c64 <TIMER_HVAC_init+0x28>)
    3c42:	4b09      	ldr	r3, [pc, #36]	; (3c68 <TIMER_HVAC_init+0x2c>)
    3c44:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c46:	2245      	movs	r2, #69	; 0x45
    3c48:	211a      	movs	r1, #26
    3c4a:	4808      	ldr	r0, [pc, #32]	; (3c6c <TIMER_HVAC_init+0x30>)
    3c4c:	4b08      	ldr	r3, [pc, #32]	; (3c70 <TIMER_HVAC_init+0x34>)
    3c4e:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3c50:	4b08      	ldr	r3, [pc, #32]	; (3c74 <TIMER_HVAC_init+0x38>)
    3c52:	4798      	blx	r3
    3c54:	4603      	mov	r3, r0
    3c56:	461a      	mov	r2, r3
    3c58:	4907      	ldr	r1, [pc, #28]	; (3c78 <TIMER_HVAC_init+0x3c>)
    3c5a:	4808      	ldr	r0, [pc, #32]	; (3c7c <TIMER_HVAC_init+0x40>)
    3c5c:	4b08      	ldr	r3, [pc, #32]	; (3c80 <TIMER_HVAC_init+0x44>)
    3c5e:	4798      	blx	r3
}
    3c60:	bf00      	nop
    3c62:	bd80      	pop	{r7, pc}
    3c64:	40000800 	.word	0x40000800
    3c68:	00002f4b 	.word	0x00002f4b
    3c6c:	40001c00 	.word	0x40001c00
    3c70:	00002d85 	.word	0x00002d85
    3c74:	0000b495 	.word	0x0000b495
    3c78:	4101c000 	.word	0x4101c000
    3c7c:	200050a4 	.word	0x200050a4
    3c80:	000054bd 	.word	0x000054bd

00003c84 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3c84:	b580      	push	{r7, lr}
    3c86:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    3c88:	4904      	ldr	r1, [pc, #16]	; (3c9c <LIVE_PULSE_PORT_init+0x18>)
    3c8a:	2020      	movs	r0, #32
    3c8c:	4b04      	ldr	r3, [pc, #16]	; (3ca0 <LIVE_PULSE_PORT_init+0x1c>)
    3c8e:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    3c90:	4904      	ldr	r1, [pc, #16]	; (3ca4 <LIVE_PULSE_PORT_init+0x20>)
    3c92:	2021      	movs	r0, #33	; 0x21
    3c94:	4b02      	ldr	r3, [pc, #8]	; (3ca0 <LIVE_PULSE_PORT_init+0x1c>)
    3c96:	4798      	blx	r3
}
    3c98:	bf00      	nop
    3c9a:	bd80      	pop	{r7, pc}
    3c9c:	00200004 	.word	0x00200004
    3ca0:	00003539 	.word	0x00003539
    3ca4:	00210004 	.word	0x00210004

00003ca8 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3cac:	4804      	ldr	r0, [pc, #16]	; (3cc0 <LIVE_PULSE_CLOCK_init+0x18>)
    3cae:	4b05      	ldr	r3, [pc, #20]	; (3cc4 <LIVE_PULSE_CLOCK_init+0x1c>)
    3cb0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3cb2:	224b      	movs	r2, #75	; 0x4b
    3cb4:	2127      	movs	r1, #39	; 0x27
    3cb6:	4804      	ldr	r0, [pc, #16]	; (3cc8 <LIVE_PULSE_CLOCK_init+0x20>)
    3cb8:	4b04      	ldr	r3, [pc, #16]	; (3ccc <LIVE_PULSE_CLOCK_init+0x24>)
    3cba:	4798      	blx	r3
}
    3cbc:	bf00      	nop
    3cbe:	bd80      	pop	{r7, pc}
    3cc0:	40000800 	.word	0x40000800
    3cc4:	0000300b 	.word	0x0000300b
    3cc8:	40001c00 	.word	0x40001c00
    3ccc:	00002d85 	.word	0x00002d85

00003cd0 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3cd4:	4b06      	ldr	r3, [pc, #24]	; (3cf0 <LIVE_PULSE_init+0x20>)
    3cd6:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3cd8:	4b06      	ldr	r3, [pc, #24]	; (3cf4 <LIVE_PULSE_init+0x24>)
    3cda:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3cdc:	4b06      	ldr	r3, [pc, #24]	; (3cf8 <LIVE_PULSE_init+0x28>)
    3cde:	4798      	blx	r3
    3ce0:	4603      	mov	r3, r0
    3ce2:	461a      	mov	r2, r3
    3ce4:	4905      	ldr	r1, [pc, #20]	; (3cfc <LIVE_PULSE_init+0x2c>)
    3ce6:	4806      	ldr	r0, [pc, #24]	; (3d00 <LIVE_PULSE_init+0x30>)
    3ce8:	4b06      	ldr	r3, [pc, #24]	; (3d04 <LIVE_PULSE_init+0x34>)
    3cea:	4798      	blx	r3
}
    3cec:	bf00      	nop
    3cee:	bd80      	pop	{r7, pc}
    3cf0:	00003ca9 	.word	0x00003ca9
    3cf4:	00003c85 	.word	0x00003c85
    3cf8:	0000b4a5 	.word	0x0000b4a5
    3cfc:	43001800 	.word	0x43001800
    3d00:	20005004 	.word	0x20005004
    3d04:	00004c51 	.word	0x00004c51

00003d08 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3d0c:	2102      	movs	r1, #2
    3d0e:	2018      	movs	r0, #24
    3d10:	4b0f      	ldr	r3, [pc, #60]	; (3d50 <CDCUSB_PORT_init+0x48>)
    3d12:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3d14:	2100      	movs	r1, #0
    3d16:	2018      	movs	r0, #24
    3d18:	4b0e      	ldr	r3, [pc, #56]	; (3d54 <CDCUSB_PORT_init+0x4c>)
    3d1a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3d1c:	2100      	movs	r1, #0
    3d1e:	2018      	movs	r0, #24
    3d20:	4b0d      	ldr	r3, [pc, #52]	; (3d58 <CDCUSB_PORT_init+0x50>)
    3d22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3d24:	490d      	ldr	r1, [pc, #52]	; (3d5c <CDCUSB_PORT_init+0x54>)
    3d26:	2018      	movs	r0, #24
    3d28:	4b0d      	ldr	r3, [pc, #52]	; (3d60 <CDCUSB_PORT_init+0x58>)
    3d2a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3d2c:	2102      	movs	r1, #2
    3d2e:	2019      	movs	r0, #25
    3d30:	4b07      	ldr	r3, [pc, #28]	; (3d50 <CDCUSB_PORT_init+0x48>)
    3d32:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3d34:	2100      	movs	r1, #0
    3d36:	2019      	movs	r0, #25
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <CDCUSB_PORT_init+0x4c>)
    3d3a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3d3c:	2100      	movs	r1, #0
    3d3e:	2019      	movs	r0, #25
    3d40:	4b05      	ldr	r3, [pc, #20]	; (3d58 <CDCUSB_PORT_init+0x50>)
    3d42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3d44:	4907      	ldr	r1, [pc, #28]	; (3d64 <CDCUSB_PORT_init+0x5c>)
    3d46:	2019      	movs	r0, #25
    3d48:	4b05      	ldr	r3, [pc, #20]	; (3d60 <CDCUSB_PORT_init+0x58>)
    3d4a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3d4c:	bf00      	nop
    3d4e:	bd80      	pop	{r7, pc}
    3d50:	00003559 	.word	0x00003559
    3d54:	00003591 	.word	0x00003591
    3d58:	00003505 	.word	0x00003505
    3d5c:	00180007 	.word	0x00180007
    3d60:	00003539 	.word	0x00003539
    3d64:	00190007 	.word	0x00190007

00003d68 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3d68:	b580      	push	{r7, lr}
    3d6a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3d6c:	2242      	movs	r2, #66	; 0x42
    3d6e:	210a      	movs	r1, #10
    3d70:	4805      	ldr	r0, [pc, #20]	; (3d88 <CDCUSB_CLOCK_init+0x20>)
    3d72:	4b06      	ldr	r3, [pc, #24]	; (3d8c <CDCUSB_CLOCK_init+0x24>)
    3d74:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3d76:	4806      	ldr	r0, [pc, #24]	; (3d90 <CDCUSB_CLOCK_init+0x28>)
    3d78:	4b06      	ldr	r3, [pc, #24]	; (3d94 <CDCUSB_CLOCK_init+0x2c>)
    3d7a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3d7c:	4804      	ldr	r0, [pc, #16]	; (3d90 <CDCUSB_CLOCK_init+0x28>)
    3d7e:	4b06      	ldr	r3, [pc, #24]	; (3d98 <CDCUSB_CLOCK_init+0x30>)
    3d80:	4798      	blx	r3
}
    3d82:	bf00      	nop
    3d84:	bd80      	pop	{r7, pc}
    3d86:	bf00      	nop
    3d88:	40001c00 	.word	0x40001c00
    3d8c:	00002d85 	.word	0x00002d85
    3d90:	40000800 	.word	0x40000800
    3d94:	00002dab 	.word	0x00002dab
    3d98:	00002ecb 	.word	0x00002ecb

00003d9c <CDCUSB_init>:

void CDCUSB_init(void)
{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3da0:	4b03      	ldr	r3, [pc, #12]	; (3db0 <CDCUSB_init+0x14>)
    3da2:	4798      	blx	r3
	usb_d_init();
    3da4:	4b03      	ldr	r3, [pc, #12]	; (3db4 <CDCUSB_init+0x18>)
    3da6:	4798      	blx	r3
	CDCUSB_PORT_init();
    3da8:	4b03      	ldr	r3, [pc, #12]	; (3db8 <CDCUSB_init+0x1c>)
    3daa:	4798      	blx	r3
}
    3dac:	bf00      	nop
    3dae:	bd80      	pop	{r7, pc}
    3db0:	00003d69 	.word	0x00003d69
    3db4:	00005d1d 	.word	0x00005d1d
    3db8:	00003d09 	.word	0x00003d09

00003dbc <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3dc0:	4802      	ldr	r0, [pc, #8]	; (3dcc <WATCHDOG_CLOCK_init+0x10>)
    3dc2:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <WATCHDOG_CLOCK_init+0x14>)
    3dc4:	4798      	blx	r3
}
    3dc6:	bf00      	nop
    3dc8:	bd80      	pop	{r7, pc}
    3dca:	bf00      	nop
    3dcc:	40000800 	.word	0x40000800
    3dd0:	00002e2b 	.word	0x00002e2b

00003dd4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3dd8:	4b03      	ldr	r3, [pc, #12]	; (3de8 <WATCHDOG_init+0x14>)
    3dda:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3ddc:	4903      	ldr	r1, [pc, #12]	; (3dec <WATCHDOG_init+0x18>)
    3dde:	4804      	ldr	r0, [pc, #16]	; (3df0 <WATCHDOG_init+0x1c>)
    3de0:	4b04      	ldr	r3, [pc, #16]	; (3df4 <WATCHDOG_init+0x20>)
    3de2:	4798      	blx	r3
}
    3de4:	bf00      	nop
    3de6:	bd80      	pop	{r7, pc}
    3de8:	00003dbd 	.word	0x00003dbd
    3dec:	40002000 	.word	0x40002000
    3df0:	20005120 	.word	0x20005120
    3df4:	000035d9 	.word	0x000035d9

00003df8 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3dfc:	4904      	ldr	r1, [pc, #16]	; (3e10 <CAN_CCU_PORT_init+0x18>)
    3dfe:	202d      	movs	r0, #45	; 0x2d
    3e00:	4b04      	ldr	r3, [pc, #16]	; (3e14 <CAN_CCU_PORT_init+0x1c>)
    3e02:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3e04:	4904      	ldr	r1, [pc, #16]	; (3e18 <CAN_CCU_PORT_init+0x20>)
    3e06:	202c      	movs	r0, #44	; 0x2c
    3e08:	4b02      	ldr	r3, [pc, #8]	; (3e14 <CAN_CCU_PORT_init+0x1c>)
    3e0a:	4798      	blx	r3
}
    3e0c:	bf00      	nop
    3e0e:	bd80      	pop	{r7, pc}
    3e10:	002d0007 	.word	0x002d0007
    3e14:	00003539 	.word	0x00003539
    3e18:	002c0007 	.word	0x002c0007

00003e1c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3e1c:	b580      	push	{r7, lr}
    3e1e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3e20:	4807      	ldr	r0, [pc, #28]	; (3e40 <CAN_CCU_init+0x24>)
    3e22:	4b08      	ldr	r3, [pc, #32]	; (3e44 <CAN_CCU_init+0x28>)
    3e24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e26:	2243      	movs	r2, #67	; 0x43
    3e28:	211c      	movs	r1, #28
    3e2a:	4807      	ldr	r0, [pc, #28]	; (3e48 <CAN_CCU_init+0x2c>)
    3e2c:	4b07      	ldr	r3, [pc, #28]	; (3e4c <CAN_CCU_init+0x30>)
    3e2e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3e30:	4907      	ldr	r1, [pc, #28]	; (3e50 <CAN_CCU_init+0x34>)
    3e32:	4808      	ldr	r0, [pc, #32]	; (3e54 <CAN_CCU_init+0x38>)
    3e34:	4b08      	ldr	r3, [pc, #32]	; (3e58 <CAN_CCU_init+0x3c>)
    3e36:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3e38:	4b08      	ldr	r3, [pc, #32]	; (3e5c <CAN_CCU_init+0x40>)
    3e3a:	4798      	blx	r3
}
    3e3c:	bf00      	nop
    3e3e:	bd80      	pop	{r7, pc}
    3e40:	40000800 	.word	0x40000800
    3e44:	00002deb 	.word	0x00002deb
    3e48:	40001c00 	.word	0x40001c00
    3e4c:	00002d85 	.word	0x00002d85
    3e50:	42000400 	.word	0x42000400
    3e54:	20005020 	.word	0x20005020
    3e58:	000044f9 	.word	0x000044f9
    3e5c:	00003df9 	.word	0x00003df9

00003e60 <system_init>:

void system_init(void)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	af00      	add	r7, sp, #0
	init_mcu();
    3e64:	4b40      	ldr	r3, [pc, #256]	; (3f68 <system_init+0x108>)
    3e66:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3e68:	2101      	movs	r1, #1
    3e6a:	2027      	movs	r0, #39	; 0x27
    3e6c:	4b3f      	ldr	r3, [pc, #252]	; (3f6c <system_init+0x10c>)
    3e6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3e70:	2102      	movs	r1, #2
    3e72:	2027      	movs	r0, #39	; 0x27
    3e74:	4b3e      	ldr	r3, [pc, #248]	; (3f70 <system_init+0x110>)
    3e76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3e78:	f04f 31ff 	mov.w	r1, #4294967295
    3e7c:	2027      	movs	r0, #39	; 0x27
    3e7e:	4b3d      	ldr	r3, [pc, #244]	; (3f74 <system_init+0x114>)
    3e80:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3e82:	2101      	movs	r1, #1
    3e84:	203d      	movs	r0, #61	; 0x3d
    3e86:	4b3c      	ldr	r3, [pc, #240]	; (3f78 <system_init+0x118>)
    3e88:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    3e8a:	2102      	movs	r1, #2
    3e8c:	203d      	movs	r0, #61	; 0x3d
    3e8e:	4b37      	ldr	r3, [pc, #220]	; (3f6c <system_init+0x10c>)
    3e90:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    3e92:	f04f 31ff 	mov.w	r1, #4294967295
    3e96:	203d      	movs	r0, #61	; 0x3d
    3e98:	4b36      	ldr	r3, [pc, #216]	; (3f74 <system_init+0x114>)
    3e9a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3e9c:	2101      	movs	r1, #1
    3e9e:	203f      	movs	r0, #63	; 0x3f
    3ea0:	4b32      	ldr	r3, [pc, #200]	; (3f6c <system_init+0x10c>)
    3ea2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3ea4:	2101      	movs	r1, #1
    3ea6:	203f      	movs	r0, #63	; 0x3f
    3ea8:	4b31      	ldr	r3, [pc, #196]	; (3f70 <system_init+0x110>)
    3eaa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3eac:	f04f 31ff 	mov.w	r1, #4294967295
    3eb0:	203f      	movs	r0, #63	; 0x3f
    3eb2:	4b30      	ldr	r3, [pc, #192]	; (3f74 <system_init+0x114>)
    3eb4:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    3eb6:	2101      	movs	r1, #1
    3eb8:	2040      	movs	r0, #64	; 0x40
    3eba:	4b2c      	ldr	r3, [pc, #176]	; (3f6c <system_init+0x10c>)
    3ebc:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3ebe:	2102      	movs	r1, #2
    3ec0:	2040      	movs	r0, #64	; 0x40
    3ec2:	4b2b      	ldr	r3, [pc, #172]	; (3f70 <system_init+0x110>)
    3ec4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    3ec6:	f04f 31ff 	mov.w	r1, #4294967295
    3eca:	2040      	movs	r0, #64	; 0x40
    3ecc:	4b29      	ldr	r3, [pc, #164]	; (3f74 <system_init+0x114>)
    3ece:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    3ed0:	2101      	movs	r1, #1
    3ed2:	204e      	movs	r0, #78	; 0x4e
    3ed4:	4b28      	ldr	r3, [pc, #160]	; (3f78 <system_init+0x118>)
    3ed6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3ed8:	2102      	movs	r1, #2
    3eda:	204e      	movs	r0, #78	; 0x4e
    3edc:	4b23      	ldr	r3, [pc, #140]	; (3f6c <system_init+0x10c>)
    3ede:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    3ee0:	f04f 31ff 	mov.w	r1, #4294967295
    3ee4:	204e      	movs	r0, #78	; 0x4e
    3ee6:	4b23      	ldr	r3, [pc, #140]	; (3f74 <system_init+0x114>)
    3ee8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3eea:	2100      	movs	r1, #0
    3eec:	204f      	movs	r0, #79	; 0x4f
    3eee:	4b22      	ldr	r3, [pc, #136]	; (3f78 <system_init+0x118>)
    3ef0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3ef2:	2102      	movs	r1, #2
    3ef4:	204f      	movs	r0, #79	; 0x4f
    3ef6:	4b1d      	ldr	r3, [pc, #116]	; (3f6c <system_init+0x10c>)
    3ef8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3efa:	f04f 31ff 	mov.w	r1, #4294967295
    3efe:	204f      	movs	r0, #79	; 0x4f
    3f00:	4b1c      	ldr	r3, [pc, #112]	; (3f74 <system_init+0x114>)
    3f02:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3f04:	2100      	movs	r1, #0
    3f06:	2052      	movs	r0, #82	; 0x52
    3f08:	4b1b      	ldr	r3, [pc, #108]	; (3f78 <system_init+0x118>)
    3f0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3f0c:	2102      	movs	r1, #2
    3f0e:	2052      	movs	r0, #82	; 0x52
    3f10:	4b16      	ldr	r3, [pc, #88]	; (3f6c <system_init+0x10c>)
    3f12:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3f14:	f04f 31ff 	mov.w	r1, #4294967295
    3f18:	2052      	movs	r0, #82	; 0x52
    3f1a:	4b16      	ldr	r3, [pc, #88]	; (3f74 <system_init+0x114>)
    3f1c:	4798      	blx	r3

	CRC_CALC_init();
    3f1e:	4b17      	ldr	r3, [pc, #92]	; (3f7c <system_init+0x11c>)
    3f20:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3f22:	4b17      	ldr	r3, [pc, #92]	; (3f80 <system_init+0x120>)
    3f24:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3f26:	4b17      	ldr	r3, [pc, #92]	; (3f84 <system_init+0x124>)
    3f28:	4798      	blx	r3

	QSPI_N25Q256_init();
    3f2a:	4b17      	ldr	r3, [pc, #92]	; (3f88 <system_init+0x128>)
    3f2c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3f2e:	4b17      	ldr	r3, [pc, #92]	; (3f8c <system_init+0x12c>)
    3f30:	4798      	blx	r3

	SPI_TEMP_init();
    3f32:	4b17      	ldr	r3, [pc, #92]	; (3f90 <system_init+0x130>)
    3f34:	4798      	blx	r3

	I2C_EXPANDER_init();
    3f36:	4b17      	ldr	r3, [pc, #92]	; (3f94 <system_init+0x134>)
    3f38:	4798      	blx	r3

	SPI_HI3593_init();
    3f3a:	4b17      	ldr	r3, [pc, #92]	; (3f98 <system_init+0x138>)
    3f3c:	4798      	blx	r3

	I2C_EEPROM_init();
    3f3e:	4b17      	ldr	r3, [pc, #92]	; (3f9c <system_init+0x13c>)
    3f40:	4798      	blx	r3

	TIMER_INTERFACE_init();
    3f42:	4b17      	ldr	r3, [pc, #92]	; (3fa0 <system_init+0x140>)
    3f44:	4798      	blx	r3
	TIMER_EVENT_init();
    3f46:	4b17      	ldr	r3, [pc, #92]	; (3fa4 <system_init+0x144>)
    3f48:	4798      	blx	r3
	TIMER_ARINC_init();
    3f4a:	4b17      	ldr	r3, [pc, #92]	; (3fa8 <system_init+0x148>)
    3f4c:	4798      	blx	r3
	TIMER_HVAC_init();
    3f4e:	4b17      	ldr	r3, [pc, #92]	; (3fac <system_init+0x14c>)
    3f50:	4798      	blx	r3
	LIVE_PULSE_init();
    3f52:	4b17      	ldr	r3, [pc, #92]	; (3fb0 <system_init+0x150>)
    3f54:	4798      	blx	r3

	CDCUSB_init();
    3f56:	4b17      	ldr	r3, [pc, #92]	; (3fb4 <system_init+0x154>)
    3f58:	4798      	blx	r3

	WATCHDOG_init();
    3f5a:	4b17      	ldr	r3, [pc, #92]	; (3fb8 <system_init+0x158>)
    3f5c:	4798      	blx	r3
	CAN_CCU_init();
    3f5e:	4b17      	ldr	r3, [pc, #92]	; (3fbc <system_init+0x15c>)
    3f60:	4798      	blx	r3
}
    3f62:	bf00      	nop
    3f64:	bd80      	pop	{r7, pc}
    3f66:	bf00      	nop
    3f68:	000035c9 	.word	0x000035c9
    3f6c:	00003559 	.word	0x00003559
    3f70:	00003505 	.word	0x00003505
    3f74:	00003539 	.word	0x00003539
    3f78:	00003591 	.word	0x00003591
    3f7c:	00003629 	.word	0x00003629
    3f80:	00003655 	.word	0x00003655
    3f84:	000036f9 	.word	0x000036f9
    3f88:	00003835 	.word	0x00003835
    3f8c:	00003879 	.word	0x00003879
    3f90:	0000393d 	.word	0x0000393d
    3f94:	000039d5 	.word	0x000039d5
    3f98:	00003aa1 	.word	0x00003aa1
    3f9c:	00003b39 	.word	0x00003b39
    3fa0:	00003b65 	.word	0x00003b65
    3fa4:	00003bad 	.word	0x00003bad
    3fa8:	00003bf5 	.word	0x00003bf5
    3fac:	00003c3d 	.word	0x00003c3d
    3fb0:	00003cd1 	.word	0x00003cd1
    3fb4:	00003d9d 	.word	0x00003d9d
    3fb8:	00003dd5 	.word	0x00003dd5
    3fbc:	00003e1d 	.word	0x00003e1d

00003fc0 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3fc0:	b480      	push	{r7}
    3fc2:	b083      	sub	sp, #12
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	4603      	mov	r3, r0
    3fc8:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3fca:	88fb      	ldrh	r3, [r7, #6]
    3fcc:	f003 0303 	and.w	r3, r3, #3
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d001      	beq.n	3fd8 <leap_year+0x18>
		return false;
    3fd4:	2300      	movs	r3, #0
    3fd6:	e000      	b.n	3fda <leap_year+0x1a>
	} else {
		return true;
    3fd8:	2301      	movs	r3, #1
	}
}
    3fda:	4618      	mov	r0, r3
    3fdc:	370c      	adds	r7, #12
    3fde:	46bd      	mov	sp, r7
    3fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe4:	4770      	bx	lr
	...

00003fe8 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	b084      	sub	sp, #16
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    3ff0:	460b      	mov	r3, r1
    3ff2:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3ff4:	2300      	movs	r3, #0
    3ff6:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	b29b      	uxth	r3, r3
    3ffc:	4618      	mov	r0, r3
    3ffe:	4b2f      	ldr	r3, [pc, #188]	; (40bc <get_secs_in_month+0xd4>)
    4000:	4798      	blx	r3
    4002:	4603      	mov	r3, r0
    4004:	2b00      	cmp	r3, #0
    4006:	d028      	beq.n	405a <get_secs_in_month+0x72>
		switch (month) {
    4008:	78fb      	ldrb	r3, [r7, #3]
    400a:	3b01      	subs	r3, #1
    400c:	2b0b      	cmp	r3, #11
    400e:	d84c      	bhi.n	40aa <get_secs_in_month+0xc2>
    4010:	a201      	add	r2, pc, #4	; (adr r2, 4018 <get_secs_in_month+0x30>)
    4012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4016:	bf00      	nop
    4018:	00004049 	.word	0x00004049
    401c:	0000404f 	.word	0x0000404f
    4020:	00004049 	.word	0x00004049
    4024:	00004055 	.word	0x00004055
    4028:	00004049 	.word	0x00004049
    402c:	00004055 	.word	0x00004055
    4030:	00004049 	.word	0x00004049
    4034:	00004049 	.word	0x00004049
    4038:	00004055 	.word	0x00004055
    403c:	00004049 	.word	0x00004049
    4040:	00004055 	.word	0x00004055
    4044:	00004049 	.word	0x00004049
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4048:	4b1d      	ldr	r3, [pc, #116]	; (40c0 <get_secs_in_month+0xd8>)
    404a:	60fb      	str	r3, [r7, #12]
			break;
    404c:	e030      	b.n	40b0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    404e:	4b1d      	ldr	r3, [pc, #116]	; (40c4 <get_secs_in_month+0xdc>)
    4050:	60fb      	str	r3, [r7, #12]
			break;
    4052:	e02d      	b.n	40b0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4054:	4b1c      	ldr	r3, [pc, #112]	; (40c8 <get_secs_in_month+0xe0>)
    4056:	60fb      	str	r3, [r7, #12]
			break;
    4058:	e02a      	b.n	40b0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    405a:	78fb      	ldrb	r3, [r7, #3]
    405c:	3b01      	subs	r3, #1
    405e:	2b0b      	cmp	r3, #11
    4060:	d825      	bhi.n	40ae <get_secs_in_month+0xc6>
    4062:	a201      	add	r2, pc, #4	; (adr r2, 4068 <get_secs_in_month+0x80>)
    4064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4068:	00004099 	.word	0x00004099
    406c:	0000409f 	.word	0x0000409f
    4070:	00004099 	.word	0x00004099
    4074:	000040a5 	.word	0x000040a5
    4078:	00004099 	.word	0x00004099
    407c:	000040a5 	.word	0x000040a5
    4080:	00004099 	.word	0x00004099
    4084:	00004099 	.word	0x00004099
    4088:	000040a5 	.word	0x000040a5
    408c:	00004099 	.word	0x00004099
    4090:	000040a5 	.word	0x000040a5
    4094:	00004099 	.word	0x00004099
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4098:	4b09      	ldr	r3, [pc, #36]	; (40c0 <get_secs_in_month+0xd8>)
    409a:	60fb      	str	r3, [r7, #12]
			break;
    409c:	e008      	b.n	40b0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    409e:	4b0b      	ldr	r3, [pc, #44]	; (40cc <get_secs_in_month+0xe4>)
    40a0:	60fb      	str	r3, [r7, #12]
			break;
    40a2:	e005      	b.n	40b0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    40a4:	4b08      	ldr	r3, [pc, #32]	; (40c8 <get_secs_in_month+0xe0>)
    40a6:	60fb      	str	r3, [r7, #12]
			break;
    40a8:	e002      	b.n	40b0 <get_secs_in_month+0xc8>
			break;
    40aa:	bf00      	nop
    40ac:	e000      	b.n	40b0 <get_secs_in_month+0xc8>
		default:
			break;
    40ae:	bf00      	nop
		}
	}

	return sec_in_month;
    40b0:	68fb      	ldr	r3, [r7, #12]
}
    40b2:	4618      	mov	r0, r3
    40b4:	3710      	adds	r7, #16
    40b6:	46bd      	mov	sp, r7
    40b8:	bd80      	pop	{r7, pc}
    40ba:	bf00      	nop
    40bc:	00003fc1 	.word	0x00003fc1
    40c0:	0028de80 	.word	0x0028de80
    40c4:	00263b80 	.word	0x00263b80
    40c8:	00278d00 	.word	0x00278d00
    40cc:	0024ea00 	.word	0x0024ea00

000040d0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b08a      	sub	sp, #40	; 0x28
    40d4:	af00      	add	r7, sp, #0
    40d6:	60f8      	str	r0, [r7, #12]
    40d8:	60b9      	str	r1, [r7, #8]
    40da:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    40dc:	68fb      	ldr	r3, [r7, #12]
    40de:	699b      	ldr	r3, [r3, #24]
    40e0:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    40e2:	2301      	movs	r3, #1
    40e4:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    40e6:	2301      	movs	r3, #1
    40e8:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    40ea:	2300      	movs	r3, #0
    40ec:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    40ee:	2300      	movs	r3, #0
    40f0:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    40f2:	68bb      	ldr	r3, [r7, #8]
    40f4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    40f6:	6a3b      	ldr	r3, [r7, #32]
    40f8:	b29b      	uxth	r3, r3
    40fa:	4618      	mov	r0, r3
    40fc:	4b32      	ldr	r3, [pc, #200]	; (41c8 <convert_timestamp_to_datetime+0xf8>)
    40fe:	4798      	blx	r3
    4100:	4603      	mov	r3, r0
    4102:	2b00      	cmp	r3, #0
    4104:	d001      	beq.n	410a <convert_timestamp_to_datetime+0x3a>
    4106:	4b31      	ldr	r3, [pc, #196]	; (41cc <convert_timestamp_to_datetime+0xfc>)
    4108:	e000      	b.n	410c <convert_timestamp_to_datetime+0x3c>
    410a:	4b31      	ldr	r3, [pc, #196]	; (41d0 <convert_timestamp_to_datetime+0x100>)
    410c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4110:	69bb      	ldr	r3, [r7, #24]
    4112:	429a      	cmp	r2, r3
    4114:	d307      	bcc.n	4126 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    4116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4118:	69bb      	ldr	r3, [r7, #24]
    411a:	1ad3      	subs	r3, r2, r3
    411c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    411e:	6a3b      	ldr	r3, [r7, #32]
    4120:	3301      	adds	r3, #1
    4122:	623b      	str	r3, [r7, #32]
    4124:	e7e7      	b.n	40f6 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    4126:	7ffb      	ldrb	r3, [r7, #31]
    4128:	4619      	mov	r1, r3
    412a:	6a38      	ldr	r0, [r7, #32]
    412c:	4b29      	ldr	r3, [pc, #164]	; (41d4 <convert_timestamp_to_datetime+0x104>)
    412e:	4798      	blx	r3
    4130:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    4132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4134:	697b      	ldr	r3, [r7, #20]
    4136:	429a      	cmp	r2, r3
    4138:	d307      	bcc.n	414a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    413c:	697b      	ldr	r3, [r7, #20]
    413e:	1ad3      	subs	r3, r2, r3
    4140:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    4142:	7ffb      	ldrb	r3, [r7, #31]
    4144:	3301      	adds	r3, #1
    4146:	77fb      	strb	r3, [r7, #31]
    4148:	e7ed      	b.n	4126 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    414c:	4a22      	ldr	r2, [pc, #136]	; (41d8 <convert_timestamp_to_datetime+0x108>)
    414e:	4293      	cmp	r3, r2
    4150:	d909      	bls.n	4166 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    4152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4154:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    4158:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    415c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    415e:	7fbb      	ldrb	r3, [r7, #30]
    4160:	3301      	adds	r3, #1
    4162:	77bb      	strb	r3, [r7, #30]
    4164:	e7f1      	b.n	414a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    4166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4168:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    416c:	d307      	bcc.n	417e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4170:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    4174:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    4176:	7f7b      	ldrb	r3, [r7, #29]
    4178:	3301      	adds	r3, #1
    417a:	777b      	strb	r3, [r7, #29]
    417c:	e7f3      	b.n	4166 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4180:	2b3b      	cmp	r3, #59	; 0x3b
    4182:	d906      	bls.n	4192 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    4184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4186:	3b3c      	subs	r3, #60	; 0x3c
    4188:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    418a:	7f3b      	ldrb	r3, [r7, #28]
    418c:	3301      	adds	r3, #1
    418e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    4190:	e7f5      	b.n	417e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    4192:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    4194:	6a3b      	ldr	r3, [r7, #32]
    4196:	b29a      	uxth	r2, r3
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	7ffa      	ldrb	r2, [r7, #31]
    41a0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	7fba      	ldrb	r2, [r7, #30]
    41a6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	7f7a      	ldrb	r2, [r7, #29]
    41ac:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	7f3a      	ldrb	r2, [r7, #28]
    41b2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    41b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41b6:	b2da      	uxtb	r2, r3
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    41bc:	2300      	movs	r3, #0
}
    41be:	4618      	mov	r0, r3
    41c0:	3728      	adds	r7, #40	; 0x28
    41c2:	46bd      	mov	sp, r7
    41c4:	bd80      	pop	{r7, pc}
    41c6:	bf00      	nop
    41c8:	00003fc1 	.word	0x00003fc1
    41cc:	01e28500 	.word	0x01e28500
    41d0:	01e13380 	.word	0x01e13380
    41d4:	00003fe9 	.word	0x00003fe9
    41d8:	0001517f 	.word	0x0001517f

000041dc <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    41dc:	b580      	push	{r7, lr}
    41de:	b086      	sub	sp, #24
    41e0:	af00      	add	r7, sp, #0
    41e2:	6078      	str	r0, [r7, #4]
    41e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    41e6:	2300      	movs	r3, #0
    41e8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    41ea:	2300      	movs	r3, #0
    41ec:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    41ee:	683b      	ldr	r3, [r7, #0]
    41f0:	88db      	ldrh	r3, [r3, #6]
    41f2:	b2da      	uxtb	r2, r3
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	699b      	ldr	r3, [r3, #24]
    41f8:	b2db      	uxtb	r3, r3
    41fa:	1ad3      	subs	r3, r2, r3
    41fc:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    41fe:	683b      	ldr	r3, [r7, #0]
    4200:	795b      	ldrb	r3, [r3, #5]
    4202:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    4204:	683b      	ldr	r3, [r7, #0]
    4206:	791b      	ldrb	r3, [r3, #4]
    4208:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    420a:	683b      	ldr	r3, [r7, #0]
    420c:	789b      	ldrb	r3, [r3, #2]
    420e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    4210:	683b      	ldr	r3, [r7, #0]
    4212:	785b      	ldrb	r3, [r3, #1]
    4214:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    4216:	683b      	ldr	r3, [r7, #0]
    4218:	781b      	ldrb	r3, [r3, #0]
    421a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    421c:	2300      	movs	r3, #0
    421e:	613b      	str	r3, [r7, #16]
    4220:	e01a      	b.n	4258 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	699b      	ldr	r3, [r3, #24]
    4226:	b29a      	uxth	r2, r3
    4228:	693b      	ldr	r3, [r7, #16]
    422a:	b29b      	uxth	r3, r3
    422c:	4413      	add	r3, r2
    422e:	b29b      	uxth	r3, r3
    4230:	4618      	mov	r0, r3
    4232:	4b29      	ldr	r3, [pc, #164]	; (42d8 <convert_datetime_to_timestamp+0xfc>)
    4234:	4798      	blx	r3
    4236:	4603      	mov	r3, r0
    4238:	2b00      	cmp	r3, #0
    423a:	d006      	beq.n	424a <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    423c:	697b      	ldr	r3, [r7, #20]
    423e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    4242:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    4246:	617b      	str	r3, [r7, #20]
    4248:	e003      	b.n	4252 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    424a:	697a      	ldr	r2, [r7, #20]
    424c:	4b23      	ldr	r3, [pc, #140]	; (42dc <convert_datetime_to_timestamp+0x100>)
    424e:	4413      	add	r3, r2
    4250:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	3301      	adds	r3, #1
    4256:	613b      	str	r3, [r7, #16]
    4258:	7bfa      	ldrb	r2, [r7, #15]
    425a:	693b      	ldr	r3, [r7, #16]
    425c:	429a      	cmp	r2, r3
    425e:	d8e0      	bhi.n	4222 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    4260:	2301      	movs	r3, #1
    4262:	613b      	str	r3, [r7, #16]
    4264:	e00f      	b.n	4286 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    4266:	683b      	ldr	r3, [r7, #0]
    4268:	88db      	ldrh	r3, [r3, #6]
    426a:	461a      	mov	r2, r3
    426c:	693b      	ldr	r3, [r7, #16]
    426e:	b2db      	uxtb	r3, r3
    4270:	4619      	mov	r1, r3
    4272:	4610      	mov	r0, r2
    4274:	4b1a      	ldr	r3, [pc, #104]	; (42e0 <convert_datetime_to_timestamp+0x104>)
    4276:	4798      	blx	r3
    4278:	4602      	mov	r2, r0
    427a:	697b      	ldr	r3, [r7, #20]
    427c:	4413      	add	r3, r2
    427e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    4280:	693b      	ldr	r3, [r7, #16]
    4282:	3301      	adds	r3, #1
    4284:	613b      	str	r3, [r7, #16]
    4286:	7bba      	ldrb	r2, [r7, #14]
    4288:	693b      	ldr	r3, [r7, #16]
    428a:	429a      	cmp	r2, r3
    428c:	d8eb      	bhi.n	4266 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    428e:	7b7b      	ldrb	r3, [r7, #13]
    4290:	3b01      	subs	r3, #1
    4292:	4a14      	ldr	r2, [pc, #80]	; (42e4 <convert_datetime_to_timestamp+0x108>)
    4294:	fb02 f303 	mul.w	r3, r2, r3
    4298:	461a      	mov	r2, r3
    429a:	697b      	ldr	r3, [r7, #20]
    429c:	4413      	add	r3, r2
    429e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    42a0:	7b3b      	ldrb	r3, [r7, #12]
    42a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    42a6:	fb02 f303 	mul.w	r3, r2, r3
    42aa:	461a      	mov	r2, r3
    42ac:	697b      	ldr	r3, [r7, #20]
    42ae:	4413      	add	r3, r2
    42b0:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    42b2:	7afa      	ldrb	r2, [r7, #11]
    42b4:	4613      	mov	r3, r2
    42b6:	011b      	lsls	r3, r3, #4
    42b8:	1a9b      	subs	r3, r3, r2
    42ba:	009b      	lsls	r3, r3, #2
    42bc:	461a      	mov	r2, r3
    42be:	697b      	ldr	r3, [r7, #20]
    42c0:	4413      	add	r3, r2
    42c2:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    42c4:	7abb      	ldrb	r3, [r7, #10]
    42c6:	697a      	ldr	r2, [r7, #20]
    42c8:	4413      	add	r3, r2
    42ca:	617b      	str	r3, [r7, #20]

	return tmp;
    42cc:	697b      	ldr	r3, [r7, #20]
}
    42ce:	4618      	mov	r0, r3
    42d0:	3718      	adds	r7, #24
    42d2:	46bd      	mov	sp, r7
    42d4:	bd80      	pop	{r7, pc}
    42d6:	bf00      	nop
    42d8:	00003fc1 	.word	0x00003fc1
    42dc:	01e13380 	.word	0x01e13380
    42e0:	00003fe9 	.word	0x00003fe9
    42e4:	00015180 	.word	0x00015180

000042e8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b084      	sub	sp, #16
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
    42f0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    42f2:	2300      	movs	r3, #0
    42f4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	2b00      	cmp	r3, #0
    42fa:	bf14      	ite	ne
    42fc:	2301      	movne	r3, #1
    42fe:	2300      	moveq	r3, #0
    4300:	b2db      	uxtb	r3, r3
    4302:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4306:	4911      	ldr	r1, [pc, #68]	; (434c <calendar_init+0x64>)
    4308:	4618      	mov	r0, r3
    430a:	4b11      	ldr	r3, [pc, #68]	; (4350 <calendar_init+0x68>)
    430c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	681a      	ldr	r2, [r3, #0]
    4312:	683b      	ldr	r3, [r7, #0]
    4314:	429a      	cmp	r2, r3
    4316:	d101      	bne.n	431c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4318:	2300      	movs	r3, #0
    431a:	e013      	b.n	4344 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	2b00      	cmp	r3, #0
    4322:	d002      	beq.n	432a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4324:	f06f 0311 	mvn.w	r3, #17
    4328:	e00c      	b.n	4344 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    432a:	687b      	ldr	r3, [r7, #4]
    432c:	683a      	ldr	r2, [r7, #0]
    432e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	4618      	mov	r0, r3
    4334:	4b07      	ldr	r3, [pc, #28]	; (4354 <calendar_init+0x6c>)
    4336:	4798      	blx	r3
    4338:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    4340:	619a      	str	r2, [r3, #24]

	return ret;
    4342:	68fb      	ldr	r3, [r7, #12]
}
    4344:	4618      	mov	r0, r3
    4346:	3710      	adds	r7, #16
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	0001aab4 	.word	0x0001aab4
    4350:	000062c5 	.word	0x000062c5
    4354:	00008b3d 	.word	0x00008b3d

00004358 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    4358:	b580      	push	{r7, lr}
    435a:	b082      	sub	sp, #8
    435c:	af00      	add	r7, sp, #0
    435e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	bf14      	ite	ne
    4366:	2301      	movne	r3, #1
    4368:	2300      	moveq	r3, #0
    436a:	b2db      	uxtb	r3, r3
    436c:	f240 12e5 	movw	r2, #485	; 0x1e5
    4370:	4906      	ldr	r1, [pc, #24]	; (438c <calendar_enable+0x34>)
    4372:	4618      	mov	r0, r3
    4374:	4b06      	ldr	r3, [pc, #24]	; (4390 <calendar_enable+0x38>)
    4376:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	4618      	mov	r0, r3
    437c:	4b05      	ldr	r3, [pc, #20]	; (4394 <calendar_enable+0x3c>)
    437e:	4798      	blx	r3

	return ERR_NONE;
    4380:	2300      	movs	r3, #0
}
    4382:	4618      	mov	r0, r3
    4384:	3708      	adds	r7, #8
    4386:	46bd      	mov	sp, r7
    4388:	bd80      	pop	{r7, pc}
    438a:	bf00      	nop
    438c:	0001aab4 	.word	0x0001aab4
    4390:	000062c5 	.word	0x000062c5
    4394:	00008c01 	.word	0x00008c01

00004398 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    4398:	b580      	push	{r7, lr}
    439a:	b086      	sub	sp, #24
    439c:	af00      	add	r7, sp, #0
    439e:	6078      	str	r0, [r7, #4]
    43a0:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	2b00      	cmp	r3, #0
    43a6:	bf14      	ite	ne
    43a8:	2301      	movne	r3, #1
    43aa:	2300      	moveq	r3, #0
    43ac:	b2db      	uxtb	r3, r3
    43ae:	f44f 7203 	mov.w	r2, #524	; 0x20c
    43b2:	4915      	ldr	r1, [pc, #84]	; (4408 <calendar_set_time+0x70>)
    43b4:	4618      	mov	r0, r3
    43b6:	4b15      	ldr	r3, [pc, #84]	; (440c <calendar_set_time+0x74>)
    43b8:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	4618      	mov	r0, r3
    43be:	4b14      	ldr	r3, [pc, #80]	; (4410 <calendar_set_time+0x78>)
    43c0:	4798      	blx	r3
    43c2:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    43c4:	f107 0308 	add.w	r3, r7, #8
    43c8:	461a      	mov	r2, r3
    43ca:	6979      	ldr	r1, [r7, #20]
    43cc:	6878      	ldr	r0, [r7, #4]
    43ce:	4b11      	ldr	r3, [pc, #68]	; (4414 <calendar_set_time+0x7c>)
    43d0:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    43d2:	683b      	ldr	r3, [r7, #0]
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    43d8:	683b      	ldr	r3, [r7, #0]
    43da:	785b      	ldrb	r3, [r3, #1]
    43dc:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    43de:	683b      	ldr	r3, [r7, #0]
    43e0:	789b      	ldrb	r3, [r3, #2]
    43e2:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    43e4:	f107 0308 	add.w	r3, r7, #8
    43e8:	4619      	mov	r1, r3
    43ea:	6878      	ldr	r0, [r7, #4]
    43ec:	4b0a      	ldr	r3, [pc, #40]	; (4418 <calendar_set_time+0x80>)
    43ee:	4798      	blx	r3
    43f0:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	6939      	ldr	r1, [r7, #16]
    43f6:	4618      	mov	r0, r3
    43f8:	4b08      	ldr	r3, [pc, #32]	; (441c <calendar_set_time+0x84>)
    43fa:	4798      	blx	r3

	return ERR_NONE;
    43fc:	2300      	movs	r3, #0
}
    43fe:	4618      	mov	r0, r3
    4400:	3718      	adds	r7, #24
    4402:	46bd      	mov	sp, r7
    4404:	bd80      	pop	{r7, pc}
    4406:	bf00      	nop
    4408:	0001aab4 	.word	0x0001aab4
    440c:	000062c5 	.word	0x000062c5
    4410:	00008c9d 	.word	0x00008c9d
    4414:	000040d1 	.word	0x000040d1
    4418:	000041dd 	.word	0x000041dd
    441c:	00008c4d 	.word	0x00008c4d

00004420 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    4420:	b580      	push	{r7, lr}
    4422:	b086      	sub	sp, #24
    4424:	af00      	add	r7, sp, #0
    4426:	6078      	str	r0, [r7, #4]
    4428:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	2b00      	cmp	r3, #0
    442e:	bf14      	ite	ne
    4430:	2301      	movne	r3, #1
    4432:	2300      	moveq	r3, #0
    4434:	b2db      	uxtb	r3, r3
    4436:	f44f 7209 	mov.w	r2, #548	; 0x224
    443a:	4915      	ldr	r1, [pc, #84]	; (4490 <calendar_set_date+0x70>)
    443c:	4618      	mov	r0, r3
    443e:	4b15      	ldr	r3, [pc, #84]	; (4494 <calendar_set_date+0x74>)
    4440:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	4618      	mov	r0, r3
    4446:	4b14      	ldr	r3, [pc, #80]	; (4498 <calendar_set_date+0x78>)
    4448:	4798      	blx	r3
    444a:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    444c:	f107 0308 	add.w	r3, r7, #8
    4450:	461a      	mov	r2, r3
    4452:	6979      	ldr	r1, [r7, #20]
    4454:	6878      	ldr	r0, [r7, #4]
    4456:	4b11      	ldr	r3, [pc, #68]	; (449c <calendar_set_date+0x7c>)
    4458:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    445a:	683b      	ldr	r3, [r7, #0]
    445c:	781b      	ldrb	r3, [r3, #0]
    445e:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    4460:	683b      	ldr	r3, [r7, #0]
    4462:	785b      	ldrb	r3, [r3, #1]
    4464:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	885b      	ldrh	r3, [r3, #2]
    446a:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    446c:	f107 0308 	add.w	r3, r7, #8
    4470:	4619      	mov	r1, r3
    4472:	6878      	ldr	r0, [r7, #4]
    4474:	4b0a      	ldr	r3, [pc, #40]	; (44a0 <calendar_set_date+0x80>)
    4476:	4798      	blx	r3
    4478:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	6939      	ldr	r1, [r7, #16]
    447e:	4618      	mov	r0, r3
    4480:	4b08      	ldr	r3, [pc, #32]	; (44a4 <calendar_set_date+0x84>)
    4482:	4798      	blx	r3

	return ERR_NONE;
    4484:	2300      	movs	r3, #0
}
    4486:	4618      	mov	r0, r3
    4488:	3718      	adds	r7, #24
    448a:	46bd      	mov	sp, r7
    448c:	bd80      	pop	{r7, pc}
    448e:	bf00      	nop
    4490:	0001aab4 	.word	0x0001aab4
    4494:	000062c5 	.word	0x000062c5
    4498:	00008c9d 	.word	0x00008c9d
    449c:	000040d1 	.word	0x000040d1
    44a0:	000041dd 	.word	0x000041dd
    44a4:	00008c4d 	.word	0x00008c4d

000044a8 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    44a8:	b580      	push	{r7, lr}
    44aa:	b084      	sub	sp, #16
    44ac:	af00      	add	r7, sp, #0
    44ae:	6078      	str	r0, [r7, #4]
    44b0:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	2b00      	cmp	r3, #0
    44b6:	bf14      	ite	ne
    44b8:	2301      	movne	r3, #1
    44ba:	2300      	moveq	r3, #0
    44bc:	b2db      	uxtb	r3, r3
    44be:	f240 223b 	movw	r2, #571	; 0x23b
    44c2:	4909      	ldr	r1, [pc, #36]	; (44e8 <calendar_get_date_time+0x40>)
    44c4:	4618      	mov	r0, r3
    44c6:	4b09      	ldr	r3, [pc, #36]	; (44ec <calendar_get_date_time+0x44>)
    44c8:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	4618      	mov	r0, r3
    44ce:	4b08      	ldr	r3, [pc, #32]	; (44f0 <calendar_get_date_time+0x48>)
    44d0:	4798      	blx	r3
    44d2:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    44d4:	683a      	ldr	r2, [r7, #0]
    44d6:	68f9      	ldr	r1, [r7, #12]
    44d8:	6878      	ldr	r0, [r7, #4]
    44da:	4b06      	ldr	r3, [pc, #24]	; (44f4 <calendar_get_date_time+0x4c>)
    44dc:	4798      	blx	r3

	return ERR_NONE;
    44de:	2300      	movs	r3, #0
}
    44e0:	4618      	mov	r0, r3
    44e2:	3710      	adds	r7, #16
    44e4:	46bd      	mov	sp, r7
    44e6:	bd80      	pop	{r7, pc}
    44e8:	0001aab4 	.word	0x0001aab4
    44ec:	000062c5 	.word	0x000062c5
    44f0:	00008c9d 	.word	0x00008c9d
    44f4:	000040d1 	.word	0x000040d1

000044f8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b084      	sub	sp, #16
    44fc:	af00      	add	r7, sp, #0
    44fe:	6078      	str	r0, [r7, #4]
    4500:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	2b00      	cmp	r3, #0
    4506:	d004      	beq.n	4512 <can_async_init+0x1a>
    4508:	683b      	ldr	r3, [r7, #0]
    450a:	2b00      	cmp	r3, #0
    450c:	d001      	beq.n	4512 <can_async_init+0x1a>
    450e:	2301      	movs	r3, #1
    4510:	e000      	b.n	4514 <can_async_init+0x1c>
    4512:	2300      	movs	r3, #0
    4514:	f003 0301 	and.w	r3, r3, #1
    4518:	b2db      	uxtb	r3, r3
    451a:	2241      	movs	r2, #65	; 0x41
    451c:	490e      	ldr	r1, [pc, #56]	; (4558 <can_async_init+0x60>)
    451e:	4618      	mov	r0, r3
    4520:	4b0e      	ldr	r3, [pc, #56]	; (455c <can_async_init+0x64>)
    4522:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	6839      	ldr	r1, [r7, #0]
    4528:	4618      	mov	r0, r3
    452a:	4b0d      	ldr	r3, [pc, #52]	; (4560 <can_async_init+0x68>)
    452c:	4798      	blx	r3
    452e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    4530:	68fb      	ldr	r3, [r7, #12]
    4532:	2b00      	cmp	r3, #0
    4534:	d001      	beq.n	453a <can_async_init+0x42>
		return rc;
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	e009      	b.n	454e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    453a:	687b      	ldr	r3, [r7, #4]
    453c:	4a09      	ldr	r2, [pc, #36]	; (4564 <can_async_init+0x6c>)
    453e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	4a09      	ldr	r2, [pc, #36]	; (4568 <can_async_init+0x70>)
    4544:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    4546:	687b      	ldr	r3, [r7, #4]
    4548:	4a08      	ldr	r2, [pc, #32]	; (456c <can_async_init+0x74>)
    454a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    454c:	2300      	movs	r3, #0
}
    454e:	4618      	mov	r0, r3
    4550:	3710      	adds	r7, #16
    4552:	46bd      	mov	sp, r7
    4554:	bd80      	pop	{r7, pc}
    4556:	bf00      	nop
    4558:	0001aad0 	.word	0x0001aad0
    455c:	000062c5 	.word	0x000062c5
    4560:	00006821 	.word	0x00006821
    4564:	00004571 	.word	0x00004571
    4568:	00004595 	.word	0x00004595
    456c:	000045b9 	.word	0x000045b9

00004570 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    4570:	b580      	push	{r7, lr}
    4572:	b084      	sub	sp, #16
    4574:	af00      	add	r7, sp, #0
    4576:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	69db      	ldr	r3, [r3, #28]
    4580:	2b00      	cmp	r3, #0
    4582:	d003      	beq.n	458c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	69db      	ldr	r3, [r3, #28]
    4588:	68f8      	ldr	r0, [r7, #12]
    458a:	4798      	blx	r3
	}
}
    458c:	bf00      	nop
    458e:	3710      	adds	r7, #16
    4590:	46bd      	mov	sp, r7
    4592:	bd80      	pop	{r7, pc}

00004594 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4594:	b580      	push	{r7, lr}
    4596:	b084      	sub	sp, #16
    4598:	af00      	add	r7, sp, #0
    459a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    459c:	687b      	ldr	r3, [r7, #4]
    459e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    45a0:	68fb      	ldr	r3, [r7, #12]
    45a2:	6a1b      	ldr	r3, [r3, #32]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d003      	beq.n	45b0 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	6a1b      	ldr	r3, [r3, #32]
    45ac:	68f8      	ldr	r0, [r7, #12]
    45ae:	4798      	blx	r3
	}
}
    45b0:	bf00      	nop
    45b2:	3710      	adds	r7, #16
    45b4:	46bd      	mov	sp, r7
    45b6:	bd80      	pop	{r7, pc}

000045b8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	b084      	sub	sp, #16
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	460b      	mov	r3, r1
    45c2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45cc:	2b00      	cmp	r3, #0
    45ce:	d005      	beq.n	45dc <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    45d0:	68fb      	ldr	r3, [r7, #12]
    45d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45d4:	78fa      	ldrb	r2, [r7, #3]
    45d6:	4611      	mov	r1, r2
    45d8:	68f8      	ldr	r0, [r7, #12]
    45da:	4798      	blx	r3
	}
}
    45dc:	bf00      	nop
    45de:	3710      	adds	r7, #16
    45e0:	46bd      	mov	sp, r7
    45e2:	bd80      	pop	{r7, pc}

000045e4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b082      	sub	sp, #8
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
    45ec:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	2b00      	cmp	r3, #0
    45f2:	d004      	beq.n	45fe <crc_sync_init+0x1a>
    45f4:	683b      	ldr	r3, [r7, #0]
    45f6:	2b00      	cmp	r3, #0
    45f8:	d001      	beq.n	45fe <crc_sync_init+0x1a>
    45fa:	2301      	movs	r3, #1
    45fc:	e000      	b.n	4600 <crc_sync_init+0x1c>
    45fe:	2300      	movs	r3, #0
    4600:	f003 0301 	and.w	r3, r3, #1
    4604:	b2db      	uxtb	r3, r3
    4606:	222b      	movs	r2, #43	; 0x2b
    4608:	4906      	ldr	r1, [pc, #24]	; (4624 <crc_sync_init+0x40>)
    460a:	4618      	mov	r0, r3
    460c:	4b06      	ldr	r3, [pc, #24]	; (4628 <crc_sync_init+0x44>)
    460e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4610:	687b      	ldr	r3, [r7, #4]
    4612:	6839      	ldr	r1, [r7, #0]
    4614:	4618      	mov	r0, r3
    4616:	4b05      	ldr	r3, [pc, #20]	; (462c <crc_sync_init+0x48>)
    4618:	4798      	blx	r3
    461a:	4603      	mov	r3, r0
}
    461c:	4618      	mov	r0, r3
    461e:	3708      	adds	r7, #8
    4620:	46bd      	mov	sp, r7
    4622:	bd80      	pop	{r7, pc}
    4624:	0001aaec 	.word	0x0001aaec
    4628:	000062c5 	.word	0x000062c5
    462c:	0000703d 	.word	0x0000703d

00004630 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    4630:	b580      	push	{r7, lr}
    4632:	b082      	sub	sp, #8
    4634:	af00      	add	r7, sp, #0
    4636:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	2b00      	cmp	r3, #0
    463c:	bf14      	ite	ne
    463e:	2301      	movne	r3, #1
    4640:	2300      	moveq	r3, #0
    4642:	b2db      	uxtb	r3, r3
    4644:	223f      	movs	r2, #63	; 0x3f
    4646:	4906      	ldr	r1, [pc, #24]	; (4660 <crc_sync_enable+0x30>)
    4648:	4618      	mov	r0, r3
    464a:	4b06      	ldr	r3, [pc, #24]	; (4664 <crc_sync_enable+0x34>)
    464c:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    464e:	687b      	ldr	r3, [r7, #4]
    4650:	4618      	mov	r0, r3
    4652:	4b05      	ldr	r3, [pc, #20]	; (4668 <crc_sync_enable+0x38>)
    4654:	4798      	blx	r3
    4656:	4603      	mov	r3, r0
}
    4658:	4618      	mov	r0, r3
    465a:	3708      	adds	r7, #8
    465c:	46bd      	mov	sp, r7
    465e:	bd80      	pop	{r7, pc}
    4660:	0001aaec 	.word	0x0001aaec
    4664:	000062c5 	.word	0x000062c5
    4668:	0000705b 	.word	0x0000705b

0000466c <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    466c:	b590      	push	{r4, r7, lr}
    466e:	b085      	sub	sp, #20
    4670:	af00      	add	r7, sp, #0
    4672:	60f8      	str	r0, [r7, #12]
    4674:	60b9      	str	r1, [r7, #8]
    4676:	607a      	str	r2, [r7, #4]
    4678:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    467a:	68fb      	ldr	r3, [r7, #12]
    467c:	2b00      	cmp	r3, #0
    467e:	d00a      	beq.n	4696 <crc_sync_crc32+0x2a>
    4680:	68bb      	ldr	r3, [r7, #8]
    4682:	2b00      	cmp	r3, #0
    4684:	d007      	beq.n	4696 <crc_sync_crc32+0x2a>
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	2b00      	cmp	r3, #0
    468a:	d004      	beq.n	4696 <crc_sync_crc32+0x2a>
    468c:	683b      	ldr	r3, [r7, #0]
    468e:	2b00      	cmp	r3, #0
    4690:	d001      	beq.n	4696 <crc_sync_crc32+0x2a>
    4692:	2301      	movs	r3, #1
    4694:	e000      	b.n	4698 <crc_sync_crc32+0x2c>
    4696:	2300      	movs	r3, #0
    4698:	f003 0301 	and.w	r3, r3, #1
    469c:	b2db      	uxtb	r3, r3
    469e:	2253      	movs	r2, #83	; 0x53
    46a0:	4907      	ldr	r1, [pc, #28]	; (46c0 <crc_sync_crc32+0x54>)
    46a2:	4618      	mov	r0, r3
    46a4:	4b07      	ldr	r3, [pc, #28]	; (46c4 <crc_sync_crc32+0x58>)
    46a6:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    46a8:	68f8      	ldr	r0, [r7, #12]
    46aa:	683b      	ldr	r3, [r7, #0]
    46ac:	687a      	ldr	r2, [r7, #4]
    46ae:	68b9      	ldr	r1, [r7, #8]
    46b0:	4c05      	ldr	r4, [pc, #20]	; (46c8 <crc_sync_crc32+0x5c>)
    46b2:	47a0      	blx	r4
    46b4:	4603      	mov	r3, r0
}
    46b6:	4618      	mov	r0, r3
    46b8:	3714      	adds	r7, #20
    46ba:	46bd      	mov	sp, r7
    46bc:	bd90      	pop	{r4, r7, pc}
    46be:	bf00      	nop
    46c0:	0001aaec 	.word	0x0001aaec
    46c4:	000062c5 	.word	0x000062c5
    46c8:	00007071 	.word	0x00007071

000046cc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    46cc:	b590      	push	{r4, r7, lr}
    46ce:	b083      	sub	sp, #12
    46d0:	af00      	add	r7, sp, #0
    46d2:	4603      	mov	r3, r0
    46d4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    46d6:	4b07      	ldr	r3, [pc, #28]	; (46f4 <delay_us+0x28>)
    46d8:	681c      	ldr	r4, [r3, #0]
    46da:	88fb      	ldrh	r3, [r7, #6]
    46dc:	4618      	mov	r0, r3
    46de:	4b06      	ldr	r3, [pc, #24]	; (46f8 <delay_us+0x2c>)
    46e0:	4798      	blx	r3
    46e2:	4603      	mov	r3, r0
    46e4:	4619      	mov	r1, r3
    46e6:	4620      	mov	r0, r4
    46e8:	4b04      	ldr	r3, [pc, #16]	; (46fc <delay_us+0x30>)
    46ea:	4798      	blx	r3
}
    46ec:	bf00      	nop
    46ee:	370c      	adds	r7, #12
    46f0:	46bd      	mov	sp, r7
    46f2:	bd90      	pop	{r4, r7, pc}
    46f4:	200032b8 	.word	0x200032b8
    46f8:	00006c6d 	.word	0x00006c6d
    46fc:	00006e01 	.word	0x00006e01

00004700 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4700:	b590      	push	{r4, r7, lr}
    4702:	b083      	sub	sp, #12
    4704:	af00      	add	r7, sp, #0
    4706:	4603      	mov	r3, r0
    4708:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    470a:	4b07      	ldr	r3, [pc, #28]	; (4728 <delay_ms+0x28>)
    470c:	681c      	ldr	r4, [r3, #0]
    470e:	88fb      	ldrh	r3, [r7, #6]
    4710:	4618      	mov	r0, r3
    4712:	4b06      	ldr	r3, [pc, #24]	; (472c <delay_ms+0x2c>)
    4714:	4798      	blx	r3
    4716:	4603      	mov	r3, r0
    4718:	4619      	mov	r1, r3
    471a:	4620      	mov	r0, r4
    471c:	4b04      	ldr	r3, [pc, #16]	; (4730 <delay_ms+0x30>)
    471e:	4798      	blx	r3
}
    4720:	bf00      	nop
    4722:	370c      	adds	r7, #12
    4724:	46bd      	mov	sp, r7
    4726:	bd90      	pop	{r4, r7, pc}
    4728:	200032b8 	.word	0x200032b8
    472c:	00006dd9 	.word	0x00006dd9
    4730:	00006e01 	.word	0x00006e01

00004734 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4734:	b580      	push	{r7, lr}
    4736:	af00      	add	r7, sp, #0
	return _event_system_init();
    4738:	4b02      	ldr	r3, [pc, #8]	; (4744 <event_system_init+0x10>)
    473a:	4798      	blx	r3
    473c:	4603      	mov	r3, r0
}
    473e:	4618      	mov	r0, r3
    4740:	bd80      	pop	{r7, pc}
    4742:	bf00      	nop
    4744:	00007879 	.word	0x00007879

00004748 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    4748:	b580      	push	{r7, lr}
    474a:	b082      	sub	sp, #8
    474c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    474e:	2300      	movs	r3, #0
    4750:	80fb      	strh	r3, [r7, #6]
    4752:	e00e      	b.n	4772 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    4754:	88fb      	ldrh	r3, [r7, #6]
    4756:	4a0c      	ldr	r2, [pc, #48]	; (4788 <ext_irq_init+0x40>)
    4758:	00db      	lsls	r3, r3, #3
    475a:	4413      	add	r3, r2
    475c:	f04f 32ff 	mov.w	r2, #4294967295
    4760:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    4762:	88fb      	ldrh	r3, [r7, #6]
    4764:	4a08      	ldr	r2, [pc, #32]	; (4788 <ext_irq_init+0x40>)
    4766:	2100      	movs	r1, #0
    4768:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    476c:	88fb      	ldrh	r3, [r7, #6]
    476e:	3301      	adds	r3, #1
    4770:	80fb      	strh	r3, [r7, #6]
    4772:	88fb      	ldrh	r3, [r7, #6]
    4774:	2b03      	cmp	r3, #3
    4776:	d9ed      	bls.n	4754 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    4778:	4804      	ldr	r0, [pc, #16]	; (478c <ext_irq_init+0x44>)
    477a:	4b05      	ldr	r3, [pc, #20]	; (4790 <ext_irq_init+0x48>)
    477c:	4798      	blx	r3
    477e:	4603      	mov	r3, r0
}
    4780:	4618      	mov	r0, r3
    4782:	3708      	adds	r7, #8
    4784:	46bd      	mov	sp, r7
    4786:	bd80      	pop	{r7, pc}
    4788:	200032bc 	.word	0x200032bc
    478c:	000048ed 	.word	0x000048ed
    4790:	000074ad 	.word	0x000074ad

00004794 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4794:	b580      	push	{r7, lr}
    4796:	b086      	sub	sp, #24
    4798:	af00      	add	r7, sp, #0
    479a:	6078      	str	r0, [r7, #4]
    479c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    479e:	2300      	movs	r3, #0
    47a0:	75fb      	strb	r3, [r7, #23]
    47a2:	2300      	movs	r3, #0
    47a4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    47a6:	2300      	movs	r3, #0
    47a8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    47aa:	e012      	b.n	47d2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    47ac:	7dfb      	ldrb	r3, [r7, #23]
    47ae:	4a4d      	ldr	r2, [pc, #308]	; (48e4 <ext_irq_register+0x150>)
    47b0:	00db      	lsls	r3, r3, #3
    47b2:	4413      	add	r3, r2
    47b4:	685a      	ldr	r2, [r3, #4]
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	429a      	cmp	r2, r3
    47ba:	d107      	bne.n	47cc <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    47bc:	7dfb      	ldrb	r3, [r7, #23]
    47be:	4949      	ldr	r1, [pc, #292]	; (48e4 <ext_irq_register+0x150>)
    47c0:	683a      	ldr	r2, [r7, #0]
    47c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    47c6:	2301      	movs	r3, #1
    47c8:	757b      	strb	r3, [r7, #21]
			break;
    47ca:	e005      	b.n	47d8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    47cc:	7dfb      	ldrb	r3, [r7, #23]
    47ce:	3301      	adds	r3, #1
    47d0:	75fb      	strb	r3, [r7, #23]
    47d2:	7dfb      	ldrb	r3, [r7, #23]
    47d4:	2b03      	cmp	r3, #3
    47d6:	d9e9      	bls.n	47ac <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    47d8:	683b      	ldr	r3, [r7, #0]
    47da:	2b00      	cmp	r3, #0
    47dc:	d10e      	bne.n	47fc <ext_irq_register+0x68>
		if (!found) {
    47de:	7d7b      	ldrb	r3, [r7, #21]
    47e0:	f083 0301 	eor.w	r3, r3, #1
    47e4:	b2db      	uxtb	r3, r3
    47e6:	2b00      	cmp	r3, #0
    47e8:	d002      	beq.n	47f0 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    47ea:	f06f 030c 	mvn.w	r3, #12
    47ee:	e074      	b.n	48da <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    47f0:	2100      	movs	r1, #0
    47f2:	6878      	ldr	r0, [r7, #4]
    47f4:	4b3c      	ldr	r3, [pc, #240]	; (48e8 <ext_irq_register+0x154>)
    47f6:	4798      	blx	r3
    47f8:	4603      	mov	r3, r0
    47fa:	e06e      	b.n	48da <ext_irq_register+0x146>
	}

	if (!found) {
    47fc:	7d7b      	ldrb	r3, [r7, #21]
    47fe:	f083 0301 	eor.w	r3, r3, #1
    4802:	b2db      	uxtb	r3, r3
    4804:	2b00      	cmp	r3, #0
    4806:	d05a      	beq.n	48be <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4808:	2300      	movs	r3, #0
    480a:	75fb      	strb	r3, [r7, #23]
    480c:	e016      	b.n	483c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    480e:	7dfb      	ldrb	r3, [r7, #23]
    4810:	4a34      	ldr	r2, [pc, #208]	; (48e4 <ext_irq_register+0x150>)
    4812:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4816:	2b00      	cmp	r3, #0
    4818:	d10d      	bne.n	4836 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    481a:	7dfb      	ldrb	r3, [r7, #23]
    481c:	4931      	ldr	r1, [pc, #196]	; (48e4 <ext_irq_register+0x150>)
    481e:	683a      	ldr	r2, [r7, #0]
    4820:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    4824:	7dfb      	ldrb	r3, [r7, #23]
    4826:	4a2f      	ldr	r2, [pc, #188]	; (48e4 <ext_irq_register+0x150>)
    4828:	00db      	lsls	r3, r3, #3
    482a:	4413      	add	r3, r2
    482c:	687a      	ldr	r2, [r7, #4]
    482e:	605a      	str	r2, [r3, #4]
				found           = true;
    4830:	2301      	movs	r3, #1
    4832:	757b      	strb	r3, [r7, #21]
				break;
    4834:	e005      	b.n	4842 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4836:	7dfb      	ldrb	r3, [r7, #23]
    4838:	3301      	adds	r3, #1
    483a:	75fb      	strb	r3, [r7, #23]
    483c:	7dfb      	ldrb	r3, [r7, #23]
    483e:	2b03      	cmp	r3, #3
    4840:	d9e5      	bls.n	480e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4842:	e036      	b.n	48b2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4844:	7dfb      	ldrb	r3, [r7, #23]
    4846:	4a27      	ldr	r2, [pc, #156]	; (48e4 <ext_irq_register+0x150>)
    4848:	00db      	lsls	r3, r3, #3
    484a:	4413      	add	r3, r2
    484c:	685a      	ldr	r2, [r3, #4]
    484e:	7dbb      	ldrb	r3, [r7, #22]
    4850:	4924      	ldr	r1, [pc, #144]	; (48e4 <ext_irq_register+0x150>)
    4852:	00db      	lsls	r3, r3, #3
    4854:	440b      	add	r3, r1
    4856:	685b      	ldr	r3, [r3, #4]
    4858:	429a      	cmp	r2, r3
    485a:	d227      	bcs.n	48ac <ext_irq_register+0x118>
    485c:	7dbb      	ldrb	r3, [r7, #22]
    485e:	4a21      	ldr	r2, [pc, #132]	; (48e4 <ext_irq_register+0x150>)
    4860:	00db      	lsls	r3, r3, #3
    4862:	4413      	add	r3, r2
    4864:	685b      	ldr	r3, [r3, #4]
    4866:	f1b3 3fff 	cmp.w	r3, #4294967295
    486a:	d01f      	beq.n	48ac <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    486c:	7dbb      	ldrb	r3, [r7, #22]
    486e:	491d      	ldr	r1, [pc, #116]	; (48e4 <ext_irq_register+0x150>)
    4870:	f107 020c 	add.w	r2, r7, #12
    4874:	00db      	lsls	r3, r3, #3
    4876:	440b      	add	r3, r1
    4878:	e893 0003 	ldmia.w	r3, {r0, r1}
    487c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    4880:	7dbb      	ldrb	r3, [r7, #22]
    4882:	7dfa      	ldrb	r2, [r7, #23]
    4884:	4817      	ldr	r0, [pc, #92]	; (48e4 <ext_irq_register+0x150>)
    4886:	4917      	ldr	r1, [pc, #92]	; (48e4 <ext_irq_register+0x150>)
    4888:	00db      	lsls	r3, r3, #3
    488a:	4403      	add	r3, r0
    488c:	00d2      	lsls	r2, r2, #3
    488e:	440a      	add	r2, r1
    4890:	e892 0003 	ldmia.w	r2, {r0, r1}
    4894:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4898:	7dfb      	ldrb	r3, [r7, #23]
    489a:	4a12      	ldr	r2, [pc, #72]	; (48e4 <ext_irq_register+0x150>)
    489c:	00db      	lsls	r3, r3, #3
    489e:	4413      	add	r3, r2
    48a0:	f107 020c 	add.w	r2, r7, #12
    48a4:	e892 0003 	ldmia.w	r2, {r0, r1}
    48a8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    48ac:	7dbb      	ldrb	r3, [r7, #22]
    48ae:	3301      	adds	r3, #1
    48b0:	75bb      	strb	r3, [r7, #22]
    48b2:	7dbb      	ldrb	r3, [r7, #22]
    48b4:	2b03      	cmp	r3, #3
    48b6:	d802      	bhi.n	48be <ext_irq_register+0x12a>
    48b8:	7dfb      	ldrb	r3, [r7, #23]
    48ba:	2b03      	cmp	r3, #3
    48bc:	d9c2      	bls.n	4844 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    48be:	7d7b      	ldrb	r3, [r7, #21]
    48c0:	f083 0301 	eor.w	r3, r3, #1
    48c4:	b2db      	uxtb	r3, r3
    48c6:	2b00      	cmp	r3, #0
    48c8:	d002      	beq.n	48d0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    48ca:	f06f 030c 	mvn.w	r3, #12
    48ce:	e004      	b.n	48da <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    48d0:	2101      	movs	r1, #1
    48d2:	6878      	ldr	r0, [r7, #4]
    48d4:	4b04      	ldr	r3, [pc, #16]	; (48e8 <ext_irq_register+0x154>)
    48d6:	4798      	blx	r3
    48d8:	4603      	mov	r3, r0
}
    48da:	4618      	mov	r0, r3
    48dc:	3718      	adds	r7, #24
    48de:	46bd      	mov	sp, r7
    48e0:	bd80      	pop	{r7, pc}
    48e2:	bf00      	nop
    48e4:	200032bc 	.word	0x200032bc
    48e8:	000075e1 	.word	0x000075e1

000048ec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b084      	sub	sp, #16
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    48f4:	2300      	movs	r3, #0
    48f6:	73fb      	strb	r3, [r7, #15]
    48f8:	2304      	movs	r3, #4
    48fa:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    48fc:	e02a      	b.n	4954 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    48fe:	7bba      	ldrb	r2, [r7, #14]
    4900:	7bfb      	ldrb	r3, [r7, #15]
    4902:	4413      	add	r3, r2
    4904:	105b      	asrs	r3, r3, #1
    4906:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4908:	7b7b      	ldrb	r3, [r7, #13]
    490a:	2b03      	cmp	r3, #3
    490c:	d827      	bhi.n	495e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    490e:	7b7b      	ldrb	r3, [r7, #13]
    4910:	4a16      	ldr	r2, [pc, #88]	; (496c <process_ext_irq+0x80>)
    4912:	00db      	lsls	r3, r3, #3
    4914:	4413      	add	r3, r2
    4916:	685a      	ldr	r2, [r3, #4]
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	429a      	cmp	r2, r3
    491c:	d10b      	bne.n	4936 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    491e:	7b7b      	ldrb	r3, [r7, #13]
    4920:	4a12      	ldr	r2, [pc, #72]	; (496c <process_ext_irq+0x80>)
    4922:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4926:	2b00      	cmp	r3, #0
    4928:	d01b      	beq.n	4962 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    492a:	7b7b      	ldrb	r3, [r7, #13]
    492c:	4a0f      	ldr	r2, [pc, #60]	; (496c <process_ext_irq+0x80>)
    492e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4932:	4798      	blx	r3
			}
			return;
    4934:	e015      	b.n	4962 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    4936:	7b7b      	ldrb	r3, [r7, #13]
    4938:	4a0c      	ldr	r2, [pc, #48]	; (496c <process_ext_irq+0x80>)
    493a:	00db      	lsls	r3, r3, #3
    493c:	4413      	add	r3, r2
    493e:	685a      	ldr	r2, [r3, #4]
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	429a      	cmp	r2, r3
    4944:	d203      	bcs.n	494e <process_ext_irq+0x62>
			lower = middle + 1;
    4946:	7b7b      	ldrb	r3, [r7, #13]
    4948:	3301      	adds	r3, #1
    494a:	73fb      	strb	r3, [r7, #15]
    494c:	e002      	b.n	4954 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    494e:	7b7b      	ldrb	r3, [r7, #13]
    4950:	3b01      	subs	r3, #1
    4952:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    4954:	7bba      	ldrb	r2, [r7, #14]
    4956:	7bfb      	ldrb	r3, [r7, #15]
    4958:	429a      	cmp	r2, r3
    495a:	d2d0      	bcs.n	48fe <process_ext_irq+0x12>
    495c:	e002      	b.n	4964 <process_ext_irq+0x78>
			return;
    495e:	bf00      	nop
    4960:	e000      	b.n	4964 <process_ext_irq+0x78>
			return;
    4962:	bf00      	nop
		}
	}
}
    4964:	3710      	adds	r7, #16
    4966:	46bd      	mov	sp, r7
    4968:	bd80      	pop	{r7, pc}
    496a:	bf00      	nop
    496c:	200032bc 	.word	0x200032bc

00004970 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4970:	b580      	push	{r7, lr}
    4972:	b084      	sub	sp, #16
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	885b      	ldrh	r3, [r3, #2]
    4980:	b29b      	uxth	r3, r3
    4982:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4986:	2b00      	cmp	r3, #0
    4988:	d107      	bne.n	499a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    498a:	68fb      	ldr	r3, [r7, #12]
    498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    498e:	2b00      	cmp	r3, #0
    4990:	d003      	beq.n	499a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    4992:	68fb      	ldr	r3, [r7, #12]
    4994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4996:	68f8      	ldr	r0, [r7, #12]
    4998:	4798      	blx	r3
		}
	}
}
    499a:	bf00      	nop
    499c:	3710      	adds	r7, #16
    499e:	46bd      	mov	sp, r7
    49a0:	bd80      	pop	{r7, pc}

000049a2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    49a2:	b580      	push	{r7, lr}
    49a4:	b084      	sub	sp, #16
    49a6:	af00      	add	r7, sp, #0
    49a8:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	885b      	ldrh	r3, [r3, #2]
    49b2:	b29b      	uxth	r3, r3
    49b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    49b8:	2b00      	cmp	r3, #0
    49ba:	d107      	bne.n	49cc <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    49bc:	68fb      	ldr	r3, [r7, #12]
    49be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49c0:	2b00      	cmp	r3, #0
    49c2:	d003      	beq.n	49cc <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49c8:	68f8      	ldr	r0, [r7, #12]
    49ca:	4798      	blx	r3
		}
	}
}
    49cc:	bf00      	nop
    49ce:	3710      	adds	r7, #16
    49d0:	46bd      	mov	sp, r7
    49d2:	bd80      	pop	{r7, pc}

000049d4 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b084      	sub	sp, #16
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
    49dc:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    49de:	687b      	ldr	r3, [r7, #4]
    49e0:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    49e2:	687b      	ldr	r3, [r7, #4]
    49e4:	885b      	ldrh	r3, [r3, #2]
    49e6:	b29b      	uxth	r3, r3
    49e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    49ec:	2b00      	cmp	r3, #0
    49ee:	d108      	bne.n	4a02 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    49f4:	2b00      	cmp	r3, #0
    49f6:	d004      	beq.n	4a02 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    49fc:	6839      	ldr	r1, [r7, #0]
    49fe:	68f8      	ldr	r0, [r7, #12]
    4a00:	4798      	blx	r3
		}
	}
}
    4a02:	bf00      	nop
    4a04:	3710      	adds	r7, #16
    4a06:	46bd      	mov	sp, r7
    4a08:	bd80      	pop	{r7, pc}
	...

00004a0c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b08a      	sub	sp, #40	; 0x28
    4a10:	af00      	add	r7, sp, #0
    4a12:	60f8      	str	r0, [r7, #12]
    4a14:	60b9      	str	r1, [r7, #8]
    4a16:	4613      	mov	r3, r2
    4a18:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4a1a:	68fb      	ldr	r3, [r7, #12]
    4a1c:	3b28      	subs	r3, #40	; 0x28
    4a1e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4a24:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4a26:	88fb      	ldrh	r3, [r7, #6]
    4a28:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4a2a:	f248 0301 	movw	r3, #32769	; 0x8001
    4a2e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    4a30:	68bb      	ldr	r3, [r7, #8]
    4a32:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a36:	f107 0214 	add.w	r2, r7, #20
    4a3a:	4611      	mov	r1, r2
    4a3c:	4618      	mov	r0, r3
    4a3e:	4b06      	ldr	r3, [pc, #24]	; (4a58 <i2c_m_async_read+0x4c>)
    4a40:	4798      	blx	r3
    4a42:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4a44:	6a3b      	ldr	r3, [r7, #32]
    4a46:	2b00      	cmp	r3, #0
    4a48:	d001      	beq.n	4a4e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    4a4a:	6a3b      	ldr	r3, [r7, #32]
    4a4c:	e000      	b.n	4a50 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    4a4e:	88fb      	ldrh	r3, [r7, #6]
}
    4a50:	4618      	mov	r0, r3
    4a52:	3728      	adds	r7, #40	; 0x28
    4a54:	46bd      	mov	sp, r7
    4a56:	bd80      	pop	{r7, pc}
    4a58:	00009c45 	.word	0x00009c45

00004a5c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4a5c:	b580      	push	{r7, lr}
    4a5e:	b08a      	sub	sp, #40	; 0x28
    4a60:	af00      	add	r7, sp, #0
    4a62:	60f8      	str	r0, [r7, #12]
    4a64:	60b9      	str	r1, [r7, #8]
    4a66:	4613      	mov	r3, r2
    4a68:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4a6a:	68fb      	ldr	r3, [r7, #12]
    4a6c:	3b28      	subs	r3, #40	; 0x28
    4a6e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4a74:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4a76:	88fb      	ldrh	r3, [r7, #6]
    4a78:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    4a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4a7e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4a80:	68bb      	ldr	r3, [r7, #8]
    4a82:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a86:	f107 0214 	add.w	r2, r7, #20
    4a8a:	4611      	mov	r1, r2
    4a8c:	4618      	mov	r0, r3
    4a8e:	4b06      	ldr	r3, [pc, #24]	; (4aa8 <i2c_m_async_write+0x4c>)
    4a90:	4798      	blx	r3
    4a92:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4a94:	6a3b      	ldr	r3, [r7, #32]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d001      	beq.n	4a9e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    4a9a:	6a3b      	ldr	r3, [r7, #32]
    4a9c:	e000      	b.n	4aa0 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    4a9e:	88fb      	ldrh	r3, [r7, #6]
}
    4aa0:	4618      	mov	r0, r3
    4aa2:	3728      	adds	r7, #40	; 0x28
    4aa4:	46bd      	mov	sp, r7
    4aa6:	bd80      	pop	{r7, pc}
    4aa8:	00009c45 	.word	0x00009c45

00004aac <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
    4ab4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	2b00      	cmp	r3, #0
    4aba:	bf14      	ite	ne
    4abc:	2301      	movne	r3, #1
    4abe:	2300      	moveq	r3, #0
    4ac0:	b2db      	uxtb	r3, r3
    4ac2:	2289      	movs	r2, #137	; 0x89
    4ac4:	4915      	ldr	r1, [pc, #84]	; (4b1c <i2c_m_async_init+0x70>)
    4ac6:	4618      	mov	r0, r3
    4ac8:	4b15      	ldr	r3, [pc, #84]	; (4b20 <i2c_m_async_init+0x74>)
    4aca:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	6839      	ldr	r1, [r7, #0]
    4ad0:	4618      	mov	r0, r3
    4ad2:	4b14      	ldr	r3, [pc, #80]	; (4b24 <i2c_m_async_init+0x78>)
    4ad4:	4798      	blx	r3
    4ad6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4ad8:	68fb      	ldr	r3, [r7, #12]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d001      	beq.n	4ae2 <i2c_m_async_init+0x36>
		return init_status;
    4ade:	68fb      	ldr	r3, [r7, #12]
    4ae0:	e018      	b.n	4b14 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	4a10      	ldr	r2, [pc, #64]	; (4b28 <i2c_m_async_init+0x7c>)
    4ae6:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	4a10      	ldr	r2, [pc, #64]	; (4b2c <i2c_m_async_init+0x80>)
    4aec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	4a0f      	ldr	r2, [pc, #60]	; (4b30 <i2c_m_async_init+0x84>)
    4af2:	2101      	movs	r1, #1
    4af4:	4618      	mov	r0, r3
    4af6:	4b0f      	ldr	r3, [pc, #60]	; (4b34 <i2c_m_async_init+0x88>)
    4af8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	4a0e      	ldr	r2, [pc, #56]	; (4b38 <i2c_m_async_init+0x8c>)
    4afe:	2102      	movs	r1, #2
    4b00:	4618      	mov	r0, r3
    4b02:	4b0c      	ldr	r3, [pc, #48]	; (4b34 <i2c_m_async_init+0x88>)
    4b04:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4b06:	687b      	ldr	r3, [r7, #4]
    4b08:	4a0c      	ldr	r2, [pc, #48]	; (4b3c <i2c_m_async_init+0x90>)
    4b0a:	2100      	movs	r1, #0
    4b0c:	4618      	mov	r0, r3
    4b0e:	4b09      	ldr	r3, [pc, #36]	; (4b34 <i2c_m_async_init+0x88>)
    4b10:	4798      	blx	r3

	return ERR_NONE;
    4b12:	2300      	movs	r3, #0
}
    4b14:	4618      	mov	r0, r3
    4b16:	3710      	adds	r7, #16
    4b18:	46bd      	mov	sp, r7
    4b1a:	bd80      	pop	{r7, pc}
    4b1c:	0001ab08 	.word	0x0001ab08
    4b20:	000062c5 	.word	0x000062c5
    4b24:	00009a95 	.word	0x00009a95
    4b28:	00004a0d 	.word	0x00004a0d
    4b2c:	00004a5d 	.word	0x00004a5d
    4b30:	00004971 	.word	0x00004971
    4b34:	00009d19 	.word	0x00009d19
    4b38:	000049a3 	.word	0x000049a3
    4b3c:	000049d5 	.word	0x000049d5

00004b40 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b084      	sub	sp, #16
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	bf14      	ite	ne
    4b4e:	2301      	movne	r3, #1
    4b50:	2300      	moveq	r3, #0
    4b52:	b2db      	uxtb	r3, r3
    4b54:	22b9      	movs	r2, #185	; 0xb9
    4b56:	4911      	ldr	r1, [pc, #68]	; (4b9c <i2c_m_async_enable+0x5c>)
    4b58:	4618      	mov	r0, r3
    4b5a:	4b11      	ldr	r3, [pc, #68]	; (4ba0 <i2c_m_async_enable+0x60>)
    4b5c:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	4618      	mov	r0, r3
    4b62:	4b10      	ldr	r3, [pc, #64]	; (4ba4 <i2c_m_async_enable+0x64>)
    4b64:	4798      	blx	r3
    4b66:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    4b68:	68fb      	ldr	r3, [r7, #12]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d111      	bne.n	4b92 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	2201      	movs	r2, #1
    4b72:	2101      	movs	r1, #1
    4b74:	4618      	mov	r0, r3
    4b76:	4b0c      	ldr	r3, [pc, #48]	; (4ba8 <i2c_m_async_enable+0x68>)
    4b78:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	2201      	movs	r2, #1
    4b7e:	2102      	movs	r1, #2
    4b80:	4618      	mov	r0, r3
    4b82:	4b09      	ldr	r3, [pc, #36]	; (4ba8 <i2c_m_async_enable+0x68>)
    4b84:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	2201      	movs	r2, #1
    4b8a:	2100      	movs	r1, #0
    4b8c:	4618      	mov	r0, r3
    4b8e:	4b06      	ldr	r3, [pc, #24]	; (4ba8 <i2c_m_async_enable+0x68>)
    4b90:	4798      	blx	r3
	}
	return rc;
    4b92:	68fb      	ldr	r3, [r7, #12]
}
    4b94:	4618      	mov	r0, r3
    4b96:	3710      	adds	r7, #16
    4b98:	46bd      	mov	sp, r7
    4b9a:	bd80      	pop	{r7, pc}
    4b9c:	0001ab08 	.word	0x0001ab08
    4ba0:	000062c5 	.word	0x000062c5
    4ba4:	00009a31 	.word	0x00009a31
    4ba8:	00009d5d 	.word	0x00009d5d

00004bac <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    4bac:	b480      	push	{r7}
    4bae:	b085      	sub	sp, #20
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	60f8      	str	r0, [r7, #12]
    4bb4:	460b      	mov	r3, r1
    4bb6:	607a      	str	r2, [r7, #4]
    4bb8:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    4bba:	897b      	ldrh	r3, [r7, #10]
    4bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4bc0:	b21a      	sxth	r2, r3
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	b21b      	sxth	r3, r3
    4bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4bca:	b21b      	sxth	r3, r3
    4bcc:	4313      	orrs	r3, r2
    4bce:	b21b      	sxth	r3, r3
    4bd0:	b29a      	uxth	r2, r3
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
    4bd6:	68fb      	ldr	r3, [r7, #12]
    4bd8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    4bda:	4618      	mov	r0, r3
    4bdc:	3714      	adds	r7, #20
    4bde:	46bd      	mov	sp, r7
    4be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be4:	4770      	bx	lr

00004be6 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    4be6:	b480      	push	{r7}
    4be8:	b085      	sub	sp, #20
    4bea:	af00      	add	r7, sp, #0
    4bec:	60f8      	str	r0, [r7, #12]
    4bee:	460b      	mov	r3, r1
    4bf0:	607a      	str	r2, [r7, #4]
    4bf2:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    4bf4:	7afb      	ldrb	r3, [r7, #11]
    4bf6:	2b01      	cmp	r3, #1
    4bf8:	d007      	beq.n	4c0a <i2c_m_async_register_callback+0x24>
    4bfa:	2b02      	cmp	r3, #2
    4bfc:	d009      	beq.n	4c12 <i2c_m_async_register_callback+0x2c>
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d10b      	bne.n	4c1a <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    4c02:	68fb      	ldr	r3, [r7, #12]
    4c04:	687a      	ldr	r2, [r7, #4]
    4c06:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    4c08:	e00a      	b.n	4c20 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	687a      	ldr	r2, [r7, #4]
    4c0e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    4c10:	e006      	b.n	4c20 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    4c12:	68fb      	ldr	r3, [r7, #12]
    4c14:	687a      	ldr	r2, [r7, #4]
    4c16:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    4c18:	e002      	b.n	4c20 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    4c1a:	f06f 030c 	mvn.w	r3, #12
    4c1e:	e000      	b.n	4c22 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    4c20:	2300      	movs	r3, #0
}
    4c22:	4618      	mov	r0, r3
    4c24:	3714      	adds	r7, #20
    4c26:	46bd      	mov	sp, r7
    4c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c2c:	4770      	bx	lr

00004c2e <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    4c2e:	b480      	push	{r7}
    4c30:	b083      	sub	sp, #12
    4c32:	af00      	add	r7, sp, #0
    4c34:	6078      	str	r0, [r7, #4]
    4c36:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4c3e:	683b      	ldr	r3, [r7, #0]
    4c40:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4c42:	2300      	movs	r3, #0
}
    4c44:	4618      	mov	r0, r3
    4c46:	370c      	adds	r7, #12
    4c48:	46bd      	mov	sp, r7
    4c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c4e:	4770      	bx	lr

00004c50 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b084      	sub	sp, #16
    4c54:	af00      	add	r7, sp, #0
    4c56:	60f8      	str	r0, [r7, #12]
    4c58:	60b9      	str	r1, [r7, #8]
    4c5a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4c5c:	68fb      	ldr	r3, [r7, #12]
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d004      	beq.n	4c6c <pwm_init+0x1c>
    4c62:	68bb      	ldr	r3, [r7, #8]
    4c64:	2b00      	cmp	r3, #0
    4c66:	d001      	beq.n	4c6c <pwm_init+0x1c>
    4c68:	2301      	movs	r3, #1
    4c6a:	e000      	b.n	4c6e <pwm_init+0x1e>
    4c6c:	2300      	movs	r3, #0
    4c6e:	f003 0301 	and.w	r3, r3, #1
    4c72:	b2db      	uxtb	r3, r3
    4c74:	2233      	movs	r2, #51	; 0x33
    4c76:	490a      	ldr	r1, [pc, #40]	; (4ca0 <pwm_init+0x50>)
    4c78:	4618      	mov	r0, r3
    4c7a:	4b0a      	ldr	r3, [pc, #40]	; (4ca4 <pwm_init+0x54>)
    4c7c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4c7e:	68fb      	ldr	r3, [r7, #12]
    4c80:	68b9      	ldr	r1, [r7, #8]
    4c82:	4618      	mov	r0, r3
    4c84:	4b08      	ldr	r3, [pc, #32]	; (4ca8 <pwm_init+0x58>)
    4c86:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4c88:	68fb      	ldr	r3, [r7, #12]
    4c8a:	4a08      	ldr	r2, [pc, #32]	; (4cac <pwm_init+0x5c>)
    4c8c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    4c8e:	68fb      	ldr	r3, [r7, #12]
    4c90:	4a07      	ldr	r2, [pc, #28]	; (4cb0 <pwm_init+0x60>)
    4c92:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4c94:	2300      	movs	r3, #0
}
    4c96:	4618      	mov	r0, r3
    4c98:	3710      	adds	r7, #16
    4c9a:	46bd      	mov	sp, r7
    4c9c:	bd80      	pop	{r7, pc}
    4c9e:	bf00      	nop
    4ca0:	0001ab28 	.word	0x0001ab28
    4ca4:	000062c5 	.word	0x000062c5
    4ca8:	0000b169 	.word	0x0000b169
    4cac:	00004d09 	.word	0x00004d09
    4cb0:	00004d2d 	.word	0x00004d2d

00004cb4 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b082      	sub	sp, #8
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	bf14      	ite	ne
    4cc2:	2301      	movne	r3, #1
    4cc4:	2300      	moveq	r3, #0
    4cc6:	b2db      	uxtb	r3, r3
    4cc8:	224a      	movs	r2, #74	; 0x4a
    4cca:	490b      	ldr	r1, [pc, #44]	; (4cf8 <pwm_enable+0x44>)
    4ccc:	4618      	mov	r0, r3
    4cce:	4b0b      	ldr	r3, [pc, #44]	; (4cfc <pwm_enable+0x48>)
    4cd0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	4618      	mov	r0, r3
    4cd6:	4b0a      	ldr	r3, [pc, #40]	; (4d00 <pwm_enable+0x4c>)
    4cd8:	4798      	blx	r3
    4cda:	4603      	mov	r3, r0
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d002      	beq.n	4ce6 <pwm_enable+0x32>
		return ERR_DENIED;
    4ce0:	f06f 0310 	mvn.w	r3, #16
    4ce4:	e004      	b.n	4cf0 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	4618      	mov	r0, r3
    4cea:	4b06      	ldr	r3, [pc, #24]	; (4d04 <pwm_enable+0x50>)
    4cec:	4798      	blx	r3

	return ERR_NONE;
    4cee:	2300      	movs	r3, #0
}
    4cf0:	4618      	mov	r0, r3
    4cf2:	3708      	adds	r7, #8
    4cf4:	46bd      	mov	sp, r7
    4cf6:	bd80      	pop	{r7, pc}
    4cf8:	0001ab28 	.word	0x0001ab28
    4cfc:	000062c5 	.word	0x000062c5
    4d00:	0000b475 	.word	0x0000b475
    4d04:	0000b3a5 	.word	0x0000b3a5

00004d08 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4d08:	b580      	push	{r7, lr}
    4d0a:	b084      	sub	sp, #16
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4d14:	68fb      	ldr	r3, [r7, #12]
    4d16:	695b      	ldr	r3, [r3, #20]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d003      	beq.n	4d24 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    4d1c:	68fb      	ldr	r3, [r7, #12]
    4d1e:	695b      	ldr	r3, [r3, #20]
    4d20:	68f8      	ldr	r0, [r7, #12]
    4d22:	4798      	blx	r3
	}
}
    4d24:	bf00      	nop
    4d26:	3710      	adds	r7, #16
    4d28:	46bd      	mov	sp, r7
    4d2a:	bd80      	pop	{r7, pc}

00004d2c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b084      	sub	sp, #16
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4d38:	68fb      	ldr	r3, [r7, #12]
    4d3a:	699b      	ldr	r3, [r3, #24]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d003      	beq.n	4d48 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4d40:	68fb      	ldr	r3, [r7, #12]
    4d42:	699b      	ldr	r3, [r3, #24]
    4d44:	68f8      	ldr	r0, [r7, #12]
    4d46:	4798      	blx	r3
	}
}
    4d48:	bf00      	nop
    4d4a:	3710      	adds	r7, #16
    4d4c:	46bd      	mov	sp, r7
    4d4e:	bd80      	pop	{r7, pc}

00004d50 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4d50:	b580      	push	{r7, lr}
    4d52:	b082      	sub	sp, #8
    4d54:	af00      	add	r7, sp, #0
    4d56:	6078      	str	r0, [r7, #4]
    4d58:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d004      	beq.n	4d6a <qspi_sync_init+0x1a>
    4d60:	683b      	ldr	r3, [r7, #0]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d001      	beq.n	4d6a <qspi_sync_init+0x1a>
    4d66:	2301      	movs	r3, #1
    4d68:	e000      	b.n	4d6c <qspi_sync_init+0x1c>
    4d6a:	2300      	movs	r3, #0
    4d6c:	f003 0301 	and.w	r3, r3, #1
    4d70:	b2db      	uxtb	r3, r3
    4d72:	2231      	movs	r2, #49	; 0x31
    4d74:	4906      	ldr	r1, [pc, #24]	; (4d90 <qspi_sync_init+0x40>)
    4d76:	4618      	mov	r0, r3
    4d78:	4b06      	ldr	r3, [pc, #24]	; (4d94 <qspi_sync_init+0x44>)
    4d7a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	6839      	ldr	r1, [r7, #0]
    4d80:	4618      	mov	r0, r3
    4d82:	4b05      	ldr	r3, [pc, #20]	; (4d98 <qspi_sync_init+0x48>)
    4d84:	4798      	blx	r3
    4d86:	4603      	mov	r3, r0
}
    4d88:	4618      	mov	r0, r3
    4d8a:	3708      	adds	r7, #8
    4d8c:	46bd      	mov	sp, r7
    4d8e:	bd80      	pop	{r7, pc}
    4d90:	0001ab40 	.word	0x0001ab40
    4d94:	000062c5 	.word	0x000062c5
    4d98:	00008705 	.word	0x00008705

00004d9c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4d9c:	b580      	push	{r7, lr}
    4d9e:	b082      	sub	sp, #8
    4da0:	af00      	add	r7, sp, #0
    4da2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	2b00      	cmp	r3, #0
    4da8:	bf14      	ite	ne
    4daa:	2301      	movne	r3, #1
    4dac:	2300      	moveq	r3, #0
    4dae:	b2db      	uxtb	r3, r3
    4db0:	223f      	movs	r2, #63	; 0x3f
    4db2:	4906      	ldr	r1, [pc, #24]	; (4dcc <qspi_sync_enable+0x30>)
    4db4:	4618      	mov	r0, r3
    4db6:	4b06      	ldr	r3, [pc, #24]	; (4dd0 <qspi_sync_enable+0x34>)
    4db8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	4618      	mov	r0, r3
    4dbe:	4b05      	ldr	r3, [pc, #20]	; (4dd4 <qspi_sync_enable+0x38>)
    4dc0:	4798      	blx	r3
    4dc2:	4603      	mov	r3, r0
}
    4dc4:	4618      	mov	r0, r3
    4dc6:	3708      	adds	r7, #8
    4dc8:	46bd      	mov	sp, r7
    4dca:	bd80      	pop	{r7, pc}
    4dcc:	0001ab40 	.word	0x0001ab40
    4dd0:	000062c5 	.word	0x000062c5
    4dd4:	00008779 	.word	0x00008779

00004dd8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b082      	sub	sp, #8
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	2b00      	cmp	r3, #0
    4de4:	bf14      	ite	ne
    4de6:	2301      	movne	r3, #1
    4de8:	2300      	moveq	r3, #0
    4dea:	b2db      	uxtb	r3, r3
    4dec:	2246      	movs	r2, #70	; 0x46
    4dee:	4906      	ldr	r1, [pc, #24]	; (4e08 <qspi_sync_disable+0x30>)
    4df0:	4618      	mov	r0, r3
    4df2:	4b06      	ldr	r3, [pc, #24]	; (4e0c <qspi_sync_disable+0x34>)
    4df4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	4618      	mov	r0, r3
    4dfa:	4b05      	ldr	r3, [pc, #20]	; (4e10 <qspi_sync_disable+0x38>)
    4dfc:	4798      	blx	r3
    4dfe:	4603      	mov	r3, r0
}
    4e00:	4618      	mov	r0, r3
    4e02:	3708      	adds	r7, #8
    4e04:	46bd      	mov	sp, r7
    4e06:	bd80      	pop	{r7, pc}
    4e08:	0001ab40 	.word	0x0001ab40
    4e0c:	000062c5 	.word	0x000062c5
    4e10:	0000879d 	.word	0x0000879d

00004e14 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4e14:	b580      	push	{r7, lr}
    4e16:	b082      	sub	sp, #8
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d004      	beq.n	4e2e <qspi_sync_serial_run_command+0x1a>
    4e24:	683b      	ldr	r3, [r7, #0]
    4e26:	2b00      	cmp	r3, #0
    4e28:	d001      	beq.n	4e2e <qspi_sync_serial_run_command+0x1a>
    4e2a:	2301      	movs	r3, #1
    4e2c:	e000      	b.n	4e30 <qspi_sync_serial_run_command+0x1c>
    4e2e:	2300      	movs	r3, #0
    4e30:	f003 0301 	and.w	r3, r3, #1
    4e34:	b2db      	uxtb	r3, r3
    4e36:	224d      	movs	r2, #77	; 0x4d
    4e38:	4906      	ldr	r1, [pc, #24]	; (4e54 <qspi_sync_serial_run_command+0x40>)
    4e3a:	4618      	mov	r0, r3
    4e3c:	4b06      	ldr	r3, [pc, #24]	; (4e58 <qspi_sync_serial_run_command+0x44>)
    4e3e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	6839      	ldr	r1, [r7, #0]
    4e44:	4618      	mov	r0, r3
    4e46:	4b05      	ldr	r3, [pc, #20]	; (4e5c <qspi_sync_serial_run_command+0x48>)
    4e48:	4798      	blx	r3
    4e4a:	4603      	mov	r3, r0
}
    4e4c:	4618      	mov	r0, r3
    4e4e:	3708      	adds	r7, #8
    4e50:	46bd      	mov	sp, r7
    4e52:	bd80      	pop	{r7, pc}
    4e54:	0001ab40 	.word	0x0001ab40
    4e58:	000062c5 	.word	0x000062c5
    4e5c:	000088e9 	.word	0x000088e9

00004e60 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    4e60:	b580      	push	{r7, lr}
    4e62:	b084      	sub	sp, #16
    4e64:	af00      	add	r7, sp, #0
    4e66:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	3b04      	subs	r3, #4
    4e6c:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	791b      	ldrb	r3, [r3, #4]
    4e72:	2b01      	cmp	r3, #1
    4e74:	d80e      	bhi.n	4e94 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4e76:	68fb      	ldr	r3, [r7, #12]
    4e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e7e:	1c58      	adds	r0, r3, #1
    4e80:	68f9      	ldr	r1, [r7, #12]
    4e82:	6448      	str	r0, [r1, #68]	; 0x44
    4e84:	4413      	add	r3, r2
    4e86:	781b      	ldrb	r3, [r3, #0]
    4e88:	b29b      	uxth	r3, r3
    4e8a:	4619      	mov	r1, r3
    4e8c:	6878      	ldr	r0, [r7, #4]
    4e8e:	4b11      	ldr	r3, [pc, #68]	; (4ed4 <_spi_dev_tx+0x74>)
    4e90:	4798      	blx	r3
    4e92:	e00d      	b.n	4eb0 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4e94:	68fb      	ldr	r3, [r7, #12]
    4e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4e98:	68fb      	ldr	r3, [r7, #12]
    4e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e9c:	1c58      	adds	r0, r3, #1
    4e9e:	68f9      	ldr	r1, [r7, #12]
    4ea0:	6448      	str	r0, [r1, #68]	; 0x44
    4ea2:	005b      	lsls	r3, r3, #1
    4ea4:	4413      	add	r3, r2
    4ea6:	881b      	ldrh	r3, [r3, #0]
    4ea8:	4619      	mov	r1, r3
    4eaa:	6878      	ldr	r0, [r7, #4]
    4eac:	4b09      	ldr	r3, [pc, #36]	; (4ed4 <_spi_dev_tx+0x74>)
    4eae:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4eb0:	68fb      	ldr	r3, [r7, #12]
    4eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4eb4:	68fb      	ldr	r3, [r7, #12]
    4eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4eb8:	429a      	cmp	r2, r3
    4eba:	d107      	bne.n	4ecc <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    4ebc:	2100      	movs	r1, #0
    4ebe:	6878      	ldr	r0, [r7, #4]
    4ec0:	4b05      	ldr	r3, [pc, #20]	; (4ed8 <_spi_dev_tx+0x78>)
    4ec2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4ec4:	2101      	movs	r1, #1
    4ec6:	6878      	ldr	r0, [r7, #4]
    4ec8:	4b04      	ldr	r3, [pc, #16]	; (4edc <_spi_dev_tx+0x7c>)
    4eca:	4798      	blx	r3
	}
}
    4ecc:	bf00      	nop
    4ece:	3710      	adds	r7, #16
    4ed0:	46bd      	mov	sp, r7
    4ed2:	bd80      	pop	{r7, pc}
    4ed4:	0000a971 	.word	0x0000a971
    4ed8:	0000a835 	.word	0x0000a835
    4edc:	0000a909 	.word	0x0000a909

00004ee0 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    4ee0:	b590      	push	{r4, r7, lr}
    4ee2:	b085      	sub	sp, #20
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	3b04      	subs	r3, #4
    4eec:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    4eee:	68fb      	ldr	r3, [r7, #12]
    4ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d021      	beq.n	4f3a <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	791b      	ldrb	r3, [r3, #4]
    4efa:	2b01      	cmp	r3, #1
    4efc:	d80e      	bhi.n	4f1c <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4efe:	68fb      	ldr	r3, [r7, #12]
    4f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4f02:	68fb      	ldr	r3, [r7, #12]
    4f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f06:	1c58      	adds	r0, r3, #1
    4f08:	68f9      	ldr	r1, [r7, #12]
    4f0a:	6448      	str	r0, [r1, #68]	; 0x44
    4f0c:	18d4      	adds	r4, r2, r3
    4f0e:	6878      	ldr	r0, [r7, #4]
    4f10:	4b2e      	ldr	r3, [pc, #184]	; (4fcc <_spi_dev_rx+0xec>)
    4f12:	4798      	blx	r3
    4f14:	4603      	mov	r3, r0
    4f16:	b2db      	uxtb	r3, r3
    4f18:	7023      	strb	r3, [r4, #0]
    4f1a:	e016      	b.n	4f4a <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4f1c:	68fb      	ldr	r3, [r7, #12]
    4f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4f20:	68fb      	ldr	r3, [r7, #12]
    4f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f24:	1c58      	adds	r0, r3, #1
    4f26:	68f9      	ldr	r1, [r7, #12]
    4f28:	6448      	str	r0, [r1, #68]	; 0x44
    4f2a:	005b      	lsls	r3, r3, #1
    4f2c:	18d4      	adds	r4, r2, r3
    4f2e:	6878      	ldr	r0, [r7, #4]
    4f30:	4b26      	ldr	r3, [pc, #152]	; (4fcc <_spi_dev_rx+0xec>)
    4f32:	4798      	blx	r3
    4f34:	4603      	mov	r3, r0
    4f36:	8023      	strh	r3, [r4, #0]
    4f38:	e007      	b.n	4f4a <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    4f3a:	6878      	ldr	r0, [r7, #4]
    4f3c:	4b23      	ldr	r3, [pc, #140]	; (4fcc <_spi_dev_rx+0xec>)
    4f3e:	4798      	blx	r3
		spi->xfercnt++;
    4f40:	68fb      	ldr	r3, [r7, #12]
    4f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f44:	1c5a      	adds	r2, r3, #1
    4f46:	68fb      	ldr	r3, [r7, #12]
    4f48:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    4f4a:	68fb      	ldr	r3, [r7, #12]
    4f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4f4e:	68fb      	ldr	r3, [r7, #12]
    4f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4f52:	429a      	cmp	r2, r3
    4f54:	d226      	bcs.n	4fa4 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    4f56:	68fb      	ldr	r3, [r7, #12]
    4f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d01b      	beq.n	4f96 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	791b      	ldrb	r3, [r3, #4]
    4f62:	2b01      	cmp	r3, #1
    4f64:	d80b      	bhi.n	4f7e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4f6a:	68fb      	ldr	r3, [r7, #12]
    4f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f6e:	4413      	add	r3, r2
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	b29b      	uxth	r3, r3
    4f74:	4619      	mov	r1, r3
    4f76:	6878      	ldr	r0, [r7, #4]
    4f78:	4b15      	ldr	r3, [pc, #84]	; (4fd0 <_spi_dev_rx+0xf0>)
    4f7a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    4f7c:	e022      	b.n	4fc4 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4f7e:	68fb      	ldr	r3, [r7, #12]
    4f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f86:	005b      	lsls	r3, r3, #1
    4f88:	4413      	add	r3, r2
    4f8a:	881b      	ldrh	r3, [r3, #0]
    4f8c:	4619      	mov	r1, r3
    4f8e:	6878      	ldr	r0, [r7, #4]
    4f90:	4b0f      	ldr	r3, [pc, #60]	; (4fd0 <_spi_dev_rx+0xf0>)
    4f92:	4798      	blx	r3
}
    4f94:	e016      	b.n	4fc4 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	88db      	ldrh	r3, [r3, #6]
    4f9a:	4619      	mov	r1, r3
    4f9c:	6878      	ldr	r0, [r7, #4]
    4f9e:	4b0c      	ldr	r3, [pc, #48]	; (4fd0 <_spi_dev_rx+0xf0>)
    4fa0:	4798      	blx	r3
}
    4fa2:	e00f      	b.n	4fc4 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    4fa4:	2100      	movs	r1, #0
    4fa6:	6878      	ldr	r0, [r7, #4]
    4fa8:	4b0a      	ldr	r3, [pc, #40]	; (4fd4 <_spi_dev_rx+0xf4>)
    4faa:	4798      	blx	r3
		spi->stat = 0;
    4fac:	68fb      	ldr	r3, [r7, #12]
    4fae:	2200      	movs	r2, #0
    4fb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    4fb4:	68fb      	ldr	r3, [r7, #12]
    4fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d003      	beq.n	4fc4 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4fc0:	68f8      	ldr	r0, [r7, #12]
    4fc2:	4798      	blx	r3
}
    4fc4:	bf00      	nop
    4fc6:	3714      	adds	r7, #20
    4fc8:	46bd      	mov	sp, r7
    4fca:	bd90      	pop	{r4, r7, pc}
    4fcc:	0000a9c9 	.word	0x0000a9c9
    4fd0:	0000a971 	.word	0x0000a971
    4fd4:	0000a899 	.word	0x0000a899

00004fd8 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b084      	sub	sp, #16
    4fdc:	af00      	add	r7, sp, #0
    4fde:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	3b04      	subs	r3, #4
    4fe4:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4fea:	68fb      	ldr	r3, [r7, #12]
    4fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4fee:	429a      	cmp	r2, r3
    4ff0:	d30f      	bcc.n	5012 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    4ff2:	2100      	movs	r1, #0
    4ff4:	6878      	ldr	r0, [r7, #4]
    4ff6:	4b09      	ldr	r3, [pc, #36]	; (501c <_spi_dev_complete+0x44>)
    4ff8:	4798      	blx	r3
		spi->stat = 0;
    4ffa:	68fb      	ldr	r3, [r7, #12]
    4ffc:	2200      	movs	r2, #0
    4ffe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    5002:	68fb      	ldr	r3, [r7, #12]
    5004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5006:	2b00      	cmp	r3, #0
    5008:	d003      	beq.n	5012 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    500a:	68fb      	ldr	r3, [r7, #12]
    500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    500e:	68f8      	ldr	r0, [r7, #12]
    5010:	4798      	blx	r3
		}
	}
}
    5012:	bf00      	nop
    5014:	3710      	adds	r7, #16
    5016:	46bd      	mov	sp, r7
    5018:	bd80      	pop	{r7, pc}
    501a:	bf00      	nop
    501c:	0000a909 	.word	0x0000a909

00005020 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    5020:	b580      	push	{r7, lr}
    5022:	b084      	sub	sp, #16
    5024:	af00      	add	r7, sp, #0
    5026:	6078      	str	r0, [r7, #4]
    5028:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    502a:	687b      	ldr	r3, [r7, #4]
    502c:	3b04      	subs	r3, #4
    502e:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    5030:	2100      	movs	r1, #0
    5032:	6878      	ldr	r0, [r7, #4]
    5034:	4b0d      	ldr	r3, [pc, #52]	; (506c <_spi_dev_error+0x4c>)
    5036:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    5038:	2100      	movs	r1, #0
    503a:	6878      	ldr	r0, [r7, #4]
    503c:	4b0c      	ldr	r3, [pc, #48]	; (5070 <_spi_dev_error+0x50>)
    503e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    5040:	2100      	movs	r1, #0
    5042:	6878      	ldr	r0, [r7, #4]
    5044:	4b0b      	ldr	r3, [pc, #44]	; (5074 <_spi_dev_error+0x54>)
    5046:	4798      	blx	r3
	spi->stat = 0;
    5048:	68fb      	ldr	r3, [r7, #12]
    504a:	2200      	movs	r2, #0
    504c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5054:	2b00      	cmp	r3, #0
    5056:	d004      	beq.n	5062 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    5058:	68fb      	ldr	r3, [r7, #12]
    505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    505c:	6839      	ldr	r1, [r7, #0]
    505e:	68f8      	ldr	r0, [r7, #12]
    5060:	4798      	blx	r3
	}
}
    5062:	bf00      	nop
    5064:	3710      	adds	r7, #16
    5066:	46bd      	mov	sp, r7
    5068:	bd80      	pop	{r7, pc}
    506a:	bf00      	nop
    506c:	0000a835 	.word	0x0000a835
    5070:	0000a899 	.word	0x0000a899
    5074:	0000a909 	.word	0x0000a909

00005078 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    5078:	b580      	push	{r7, lr}
    507a:	b084      	sub	sp, #16
    507c:	af00      	add	r7, sp, #0
    507e:	6078      	str	r0, [r7, #4]
    5080:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    5082:	2300      	movs	r3, #0
    5084:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	2b00      	cmp	r3, #0
    508a:	d004      	beq.n	5096 <spi_m_async_init+0x1e>
    508c:	683b      	ldr	r3, [r7, #0]
    508e:	2b00      	cmp	r3, #0
    5090:	d001      	beq.n	5096 <spi_m_async_init+0x1e>
    5092:	2301      	movs	r3, #1
    5094:	e000      	b.n	5098 <spi_m_async_init+0x20>
    5096:	2300      	movs	r3, #0
    5098:	f003 0301 	and.w	r3, r3, #1
    509c:	b2db      	uxtb	r3, r3
    509e:	22a5      	movs	r2, #165	; 0xa5
    50a0:	491c      	ldr	r1, [pc, #112]	; (5114 <spi_m_async_init+0x9c>)
    50a2:	4618      	mov	r0, r3
    50a4:	4b1c      	ldr	r3, [pc, #112]	; (5118 <spi_m_async_init+0xa0>)
    50a6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	683a      	ldr	r2, [r7, #0]
    50ac:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	3304      	adds	r3, #4
    50b2:	6839      	ldr	r1, [r7, #0]
    50b4:	4618      	mov	r0, r3
    50b6:	4b19      	ldr	r3, [pc, #100]	; (511c <spi_m_async_init+0xa4>)
    50b8:	4798      	blx	r3
    50ba:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    50bc:	68fb      	ldr	r3, [r7, #12]
    50be:	2b00      	cmp	r3, #0
    50c0:	db23      	blt.n	510a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	3304      	adds	r3, #4
    50c6:	4a16      	ldr	r2, [pc, #88]	; (5120 <spi_m_async_init+0xa8>)
    50c8:	2100      	movs	r1, #0
    50ca:	4618      	mov	r0, r3
    50cc:	4b15      	ldr	r3, [pc, #84]	; (5124 <spi_m_async_init+0xac>)
    50ce:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    50d0:	687b      	ldr	r3, [r7, #4]
    50d2:	3304      	adds	r3, #4
    50d4:	4a14      	ldr	r2, [pc, #80]	; (5128 <spi_m_async_init+0xb0>)
    50d6:	2101      	movs	r1, #1
    50d8:	4618      	mov	r0, r3
    50da:	4b12      	ldr	r3, [pc, #72]	; (5124 <spi_m_async_init+0xac>)
    50dc:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    50de:	687b      	ldr	r3, [r7, #4]
    50e0:	3304      	adds	r3, #4
    50e2:	4a12      	ldr	r2, [pc, #72]	; (512c <spi_m_async_init+0xb4>)
    50e4:	2102      	movs	r1, #2
    50e6:	4618      	mov	r0, r3
    50e8:	4b0e      	ldr	r3, [pc, #56]	; (5124 <spi_m_async_init+0xac>)
    50ea:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    50ec:	687b      	ldr	r3, [r7, #4]
    50ee:	3304      	adds	r3, #4
    50f0:	4a0f      	ldr	r2, [pc, #60]	; (5130 <spi_m_async_init+0xb8>)
    50f2:	2103      	movs	r1, #3
    50f4:	4618      	mov	r0, r3
    50f6:	4b0b      	ldr	r3, [pc, #44]	; (5124 <spi_m_async_init+0xac>)
    50f8:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	4a0d      	ldr	r2, [pc, #52]	; (5134 <spi_m_async_init+0xbc>)
    50fe:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	4a0d      	ldr	r2, [pc, #52]	; (5138 <spi_m_async_init+0xc0>)
    5104:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    5106:	2300      	movs	r3, #0
    5108:	e000      	b.n	510c <spi_m_async_init+0x94>
		return rc;
    510a:	68fb      	ldr	r3, [r7, #12]
}
    510c:	4618      	mov	r0, r3
    510e:	3710      	adds	r7, #16
    5110:	46bd      	mov	sp, r7
    5112:	bd80      	pop	{r7, pc}
    5114:	0001ab5c 	.word	0x0001ab5c
    5118:	000062c5 	.word	0x000062c5
    511c:	0000a495 	.word	0x0000a495
    5120:	00004e61 	.word	0x00004e61
    5124:	0000aa19 	.word	0x0000aa19
    5128:	00004ee1 	.word	0x00004ee1
    512c:	00004fd9 	.word	0x00004fd9
    5130:	00005021 	.word	0x00005021
    5134:	0000513d 	.word	0x0000513d
    5138:	000051bd 	.word	0x000051bd

0000513c <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    513c:	b580      	push	{r7, lr}
    513e:	b086      	sub	sp, #24
    5140:	af00      	add	r7, sp, #0
    5142:	60f8      	str	r0, [r7, #12]
    5144:	60b9      	str	r1, [r7, #8]
    5146:	4613      	mov	r3, r2
    5148:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    514a:	68fb      	ldr	r3, [r7, #12]
    514c:	2b00      	cmp	r3, #0
    514e:	bf14      	ite	ne
    5150:	2301      	movne	r3, #1
    5152:	2300      	moveq	r3, #0
    5154:	b2db      	uxtb	r3, r3
    5156:	f240 1205 	movw	r2, #261	; 0x105
    515a:	4914      	ldr	r1, [pc, #80]	; (51ac <_spi_m_async_io_read+0x70>)
    515c:	4618      	mov	r0, r3
    515e:	4b14      	ldr	r3, [pc, #80]	; (51b0 <_spi_m_async_io_read+0x74>)
    5160:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    5162:	68fb      	ldr	r3, [r7, #12]
    5164:	3b24      	subs	r3, #36	; 0x24
    5166:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    5168:	697b      	ldr	r3, [r7, #20]
    516a:	68ba      	ldr	r2, [r7, #8]
    516c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    516e:	697b      	ldr	r3, [r7, #20]
    5170:	2200      	movs	r2, #0
    5172:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5174:	88fa      	ldrh	r2, [r7, #6]
    5176:	697b      	ldr	r3, [r7, #20]
    5178:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    517a:	697b      	ldr	r3, [r7, #20]
    517c:	2200      	movs	r2, #0
    517e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5180:	697b      	ldr	r3, [r7, #20]
    5182:	2210      	movs	r2, #16
    5184:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    5188:	697b      	ldr	r3, [r7, #20]
    518a:	3304      	adds	r3, #4
    518c:	2101      	movs	r1, #1
    518e:	4618      	mov	r0, r3
    5190:	4b08      	ldr	r3, [pc, #32]	; (51b4 <_spi_m_async_io_read+0x78>)
    5192:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5194:	697b      	ldr	r3, [r7, #20]
    5196:	3304      	adds	r3, #4
    5198:	f240 11ff 	movw	r1, #511	; 0x1ff
    519c:	4618      	mov	r0, r3
    519e:	4b06      	ldr	r3, [pc, #24]	; (51b8 <_spi_m_async_io_read+0x7c>)
    51a0:	4798      	blx	r3

	return ERR_NONE;
    51a2:	2300      	movs	r3, #0
}
    51a4:	4618      	mov	r0, r3
    51a6:	3718      	adds	r7, #24
    51a8:	46bd      	mov	sp, r7
    51aa:	bd80      	pop	{r7, pc}
    51ac:	0001ab5c 	.word	0x0001ab5c
    51b0:	000062c5 	.word	0x000062c5
    51b4:	0000a899 	.word	0x0000a899
    51b8:	0000a971 	.word	0x0000a971

000051bc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    51bc:	b580      	push	{r7, lr}
    51be:	b086      	sub	sp, #24
    51c0:	af00      	add	r7, sp, #0
    51c2:	60f8      	str	r0, [r7, #12]
    51c4:	60b9      	str	r1, [r7, #8]
    51c6:	4613      	mov	r3, r2
    51c8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    51ca:	68fb      	ldr	r3, [r7, #12]
    51cc:	2b00      	cmp	r3, #0
    51ce:	bf14      	ite	ne
    51d0:	2301      	movne	r3, #1
    51d2:	2300      	moveq	r3, #0
    51d4:	b2db      	uxtb	r3, r3
    51d6:	f240 1227 	movw	r2, #295	; 0x127
    51da:	4911      	ldr	r1, [pc, #68]	; (5220 <_spi_m_async_io_write+0x64>)
    51dc:	4618      	mov	r0, r3
    51de:	4b11      	ldr	r3, [pc, #68]	; (5224 <_spi_m_async_io_write+0x68>)
    51e0:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    51e2:	68fb      	ldr	r3, [r7, #12]
    51e4:	3b24      	subs	r3, #36	; 0x24
    51e6:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    51e8:	697b      	ldr	r3, [r7, #20]
    51ea:	2200      	movs	r2, #0
    51ec:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    51ee:	697b      	ldr	r3, [r7, #20]
    51f0:	68ba      	ldr	r2, [r7, #8]
    51f2:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    51f4:	88fa      	ldrh	r2, [r7, #6]
    51f6:	697b      	ldr	r3, [r7, #20]
    51f8:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    51fa:	697b      	ldr	r3, [r7, #20]
    51fc:	2200      	movs	r2, #0
    51fe:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5200:	697b      	ldr	r3, [r7, #20]
    5202:	2210      	movs	r2, #16
    5204:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    5208:	697b      	ldr	r3, [r7, #20]
    520a:	3304      	adds	r3, #4
    520c:	2101      	movs	r1, #1
    520e:	4618      	mov	r0, r3
    5210:	4b05      	ldr	r3, [pc, #20]	; (5228 <_spi_m_async_io_write+0x6c>)
    5212:	4798      	blx	r3

	return ERR_NONE;
    5214:	2300      	movs	r3, #0
}
    5216:	4618      	mov	r0, r3
    5218:	3718      	adds	r7, #24
    521a:	46bd      	mov	sp, r7
    521c:	bd80      	pop	{r7, pc}
    521e:	bf00      	nop
    5220:	0001ab5c 	.word	0x0001ab5c
    5224:	000062c5 	.word	0x000062c5
    5228:	0000a835 	.word	0x0000a835

0000522c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    522c:	b580      	push	{r7, lr}
    522e:	b084      	sub	sp, #16
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
    5234:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    5236:	2300      	movs	r3, #0
    5238:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	2b00      	cmp	r3, #0
    523e:	d004      	beq.n	524a <spi_m_sync_init+0x1e>
    5240:	683b      	ldr	r3, [r7, #0]
    5242:	2b00      	cmp	r3, #0
    5244:	d001      	beq.n	524a <spi_m_sync_init+0x1e>
    5246:	2301      	movs	r3, #1
    5248:	e000      	b.n	524c <spi_m_sync_init+0x20>
    524a:	2300      	movs	r3, #0
    524c:	f003 0301 	and.w	r3, r3, #1
    5250:	b2db      	uxtb	r3, r3
    5252:	2240      	movs	r2, #64	; 0x40
    5254:	4910      	ldr	r1, [pc, #64]	; (5298 <spi_m_sync_init+0x6c>)
    5256:	4618      	mov	r0, r3
    5258:	4b10      	ldr	r3, [pc, #64]	; (529c <spi_m_sync_init+0x70>)
    525a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	683a      	ldr	r2, [r7, #0]
    5260:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	3304      	adds	r3, #4
    5266:	6839      	ldr	r1, [r7, #0]
    5268:	4618      	mov	r0, r3
    526a:	4b0d      	ldr	r3, [pc, #52]	; (52a0 <spi_m_sync_init+0x74>)
    526c:	4798      	blx	r3
    526e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    5270:	68fb      	ldr	r3, [r7, #12]
    5272:	2b00      	cmp	r3, #0
    5274:	da01      	bge.n	527a <spi_m_sync_init+0x4e>
		return rc;
    5276:	68fb      	ldr	r3, [r7, #12]
    5278:	e00a      	b.n	5290 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5280:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    5282:	687b      	ldr	r3, [r7, #4]
    5284:	4a07      	ldr	r2, [pc, #28]	; (52a4 <spi_m_sync_init+0x78>)
    5286:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	4a07      	ldr	r2, [pc, #28]	; (52a8 <spi_m_sync_init+0x7c>)
    528c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    528e:	2300      	movs	r3, #0
}
    5290:	4618      	mov	r0, r3
    5292:	3710      	adds	r7, #16
    5294:	46bd      	mov	sp, r7
    5296:	bd80      	pop	{r7, pc}
    5298:	0001ab7c 	.word	0x0001ab7c
    529c:	000062c5 	.word	0x000062c5
    52a0:	0000a389 	.word	0x0000a389
    52a4:	00005325 	.word	0x00005325
    52a8:	0000537d 	.word	0x0000537d

000052ac <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b082      	sub	sp, #8
    52b0:	af00      	add	r7, sp, #0
    52b2:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	2b00      	cmp	r3, #0
    52b8:	bf14      	ite	ne
    52ba:	2301      	movne	r3, #1
    52bc:	2300      	moveq	r3, #0
    52be:	b2db      	uxtb	r3, r3
    52c0:	2257      	movs	r2, #87	; 0x57
    52c2:	4906      	ldr	r1, [pc, #24]	; (52dc <spi_m_sync_enable+0x30>)
    52c4:	4618      	mov	r0, r3
    52c6:	4b06      	ldr	r3, [pc, #24]	; (52e0 <spi_m_sync_enable+0x34>)
    52c8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    52ca:	687b      	ldr	r3, [r7, #4]
    52cc:	3304      	adds	r3, #4
    52ce:	4618      	mov	r0, r3
    52d0:	4b04      	ldr	r3, [pc, #16]	; (52e4 <spi_m_sync_enable+0x38>)
    52d2:	4798      	blx	r3
}
    52d4:	bf00      	nop
    52d6:	3708      	adds	r7, #8
    52d8:	46bd      	mov	sp, r7
    52da:	bd80      	pop	{r7, pc}
    52dc:	0001ab7c 	.word	0x0001ab7c
    52e0:	000062c5 	.word	0x000062c5
    52e4:	0000a525 	.word	0x0000a525

000052e8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    52e8:	b580      	push	{r7, lr}
    52ea:	b082      	sub	sp, #8
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	2b00      	cmp	r3, #0
    52f4:	bf14      	ite	ne
    52f6:	2301      	movne	r3, #1
    52f8:	2300      	moveq	r3, #0
    52fa:	b2db      	uxtb	r3, r3
    52fc:	225d      	movs	r2, #93	; 0x5d
    52fe:	4906      	ldr	r1, [pc, #24]	; (5318 <spi_m_sync_disable+0x30>)
    5300:	4618      	mov	r0, r3
    5302:	4b06      	ldr	r3, [pc, #24]	; (531c <spi_m_sync_disable+0x34>)
    5304:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	3304      	adds	r3, #4
    530a:	4618      	mov	r0, r3
    530c:	4b04      	ldr	r3, [pc, #16]	; (5320 <spi_m_sync_disable+0x38>)
    530e:	4798      	blx	r3
}
    5310:	bf00      	nop
    5312:	3708      	adds	r7, #8
    5314:	46bd      	mov	sp, r7
    5316:	bd80      	pop	{r7, pc}
    5318:	0001ab7c 	.word	0x0001ab7c
    531c:	000062c5 	.word	0x000062c5
    5320:	0000a575 	.word	0x0000a575

00005324 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    5324:	b580      	push	{r7, lr}
    5326:	b088      	sub	sp, #32
    5328:	af00      	add	r7, sp, #0
    532a:	60f8      	str	r0, [r7, #12]
    532c:	60b9      	str	r1, [r7, #8]
    532e:	4613      	mov	r3, r2
    5330:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5332:	68fb      	ldr	r3, [r7, #12]
    5334:	2b00      	cmp	r3, #0
    5336:	bf14      	ite	ne
    5338:	2301      	movne	r3, #1
    533a:	2300      	moveq	r3, #0
    533c:	b2db      	uxtb	r3, r3
    533e:	2287      	movs	r2, #135	; 0x87
    5340:	490b      	ldr	r1, [pc, #44]	; (5370 <_spi_m_sync_io_read+0x4c>)
    5342:	4618      	mov	r0, r3
    5344:	4b0b      	ldr	r3, [pc, #44]	; (5374 <_spi_m_sync_io_read+0x50>)
    5346:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5348:	68fb      	ldr	r3, [r7, #12]
    534a:	3b0c      	subs	r3, #12
    534c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    534e:	68bb      	ldr	r3, [r7, #8]
    5350:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    5352:	2300      	movs	r3, #0
    5354:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5356:	88fb      	ldrh	r3, [r7, #6]
    5358:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    535a:	f107 0310 	add.w	r3, r7, #16
    535e:	4619      	mov	r1, r3
    5360:	69f8      	ldr	r0, [r7, #28]
    5362:	4b05      	ldr	r3, [pc, #20]	; (5378 <_spi_m_sync_io_read+0x54>)
    5364:	4798      	blx	r3
    5366:	4603      	mov	r3, r0
}
    5368:	4618      	mov	r0, r3
    536a:	3720      	adds	r7, #32
    536c:	46bd      	mov	sp, r7
    536e:	bd80      	pop	{r7, pc}
    5370:	0001ab7c 	.word	0x0001ab7c
    5374:	000062c5 	.word	0x000062c5
    5378:	000053d5 	.word	0x000053d5

0000537c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    537c:	b580      	push	{r7, lr}
    537e:	b088      	sub	sp, #32
    5380:	af00      	add	r7, sp, #0
    5382:	60f8      	str	r0, [r7, #12]
    5384:	60b9      	str	r1, [r7, #8]
    5386:	4613      	mov	r3, r2
    5388:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    538a:	68fb      	ldr	r3, [r7, #12]
    538c:	2b00      	cmp	r3, #0
    538e:	bf14      	ite	ne
    5390:	2301      	movne	r3, #1
    5392:	2300      	moveq	r3, #0
    5394:	b2db      	uxtb	r3, r3
    5396:	22a3      	movs	r2, #163	; 0xa3
    5398:	490b      	ldr	r1, [pc, #44]	; (53c8 <_spi_m_sync_io_write+0x4c>)
    539a:	4618      	mov	r0, r3
    539c:	4b0b      	ldr	r3, [pc, #44]	; (53cc <_spi_m_sync_io_write+0x50>)
    539e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    53a0:	68fb      	ldr	r3, [r7, #12]
    53a2:	3b0c      	subs	r3, #12
    53a4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    53a6:	2300      	movs	r3, #0
    53a8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    53aa:	68bb      	ldr	r3, [r7, #8]
    53ac:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    53ae:	88fb      	ldrh	r3, [r7, #6]
    53b0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    53b2:	f107 0310 	add.w	r3, r7, #16
    53b6:	4619      	mov	r1, r3
    53b8:	69f8      	ldr	r0, [r7, #28]
    53ba:	4b05      	ldr	r3, [pc, #20]	; (53d0 <_spi_m_sync_io_write+0x54>)
    53bc:	4798      	blx	r3
    53be:	4603      	mov	r3, r0
}
    53c0:	4618      	mov	r0, r3
    53c2:	3720      	adds	r7, #32
    53c4:	46bd      	mov	sp, r7
    53c6:	bd80      	pop	{r7, pc}
    53c8:	0001ab7c 	.word	0x0001ab7c
    53cc:	000062c5 	.word	0x000062c5
    53d0:	000053d5 	.word	0x000053d5

000053d4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    53d4:	b580      	push	{r7, lr}
    53d6:	b086      	sub	sp, #24
    53d8:	af00      	add	r7, sp, #0
    53da:	6078      	str	r0, [r7, #4]
    53dc:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    53de:	687b      	ldr	r3, [r7, #4]
    53e0:	2b00      	cmp	r3, #0
    53e2:	d004      	beq.n	53ee <spi_m_sync_transfer+0x1a>
    53e4:	683b      	ldr	r3, [r7, #0]
    53e6:	2b00      	cmp	r3, #0
    53e8:	d001      	beq.n	53ee <spi_m_sync_transfer+0x1a>
    53ea:	2301      	movs	r3, #1
    53ec:	e000      	b.n	53f0 <spi_m_sync_transfer+0x1c>
    53ee:	2300      	movs	r3, #0
    53f0:	f003 0301 	and.w	r3, r3, #1
    53f4:	b2db      	uxtb	r3, r3
    53f6:	22b3      	movs	r2, #179	; 0xb3
    53f8:	490c      	ldr	r1, [pc, #48]	; (542c <spi_m_sync_transfer+0x58>)
    53fa:	4618      	mov	r0, r3
    53fc:	4b0c      	ldr	r3, [pc, #48]	; (5430 <spi_m_sync_transfer+0x5c>)
    53fe:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    5400:	683b      	ldr	r3, [r7, #0]
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    5406:	683b      	ldr	r3, [r7, #0]
    5408:	685b      	ldr	r3, [r3, #4]
    540a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    540c:	683b      	ldr	r3, [r7, #0]
    540e:	689b      	ldr	r3, [r3, #8]
    5410:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    5412:	687b      	ldr	r3, [r7, #4]
    5414:	3304      	adds	r3, #4
    5416:	f107 020c 	add.w	r2, r7, #12
    541a:	4611      	mov	r1, r2
    541c:	4618      	mov	r0, r3
    541e:	4b05      	ldr	r3, [pc, #20]	; (5434 <spi_m_sync_transfer+0x60>)
    5420:	4798      	blx	r3
    5422:	4603      	mov	r3, r0
}
    5424:	4618      	mov	r0, r3
    5426:	3718      	adds	r7, #24
    5428:	46bd      	mov	sp, r7
    542a:	bd80      	pop	{r7, pc}
    542c:	0001ab7c 	.word	0x0001ab7c
    5430:	000062c5 	.word	0x000062c5
    5434:	0000a719 	.word	0x0000a719

00005438 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    5438:	b580      	push	{r7, lr}
    543a:	b082      	sub	sp, #8
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
    5440:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    5442:	687b      	ldr	r3, [r7, #4]
    5444:	2b00      	cmp	r3, #0
    5446:	d004      	beq.n	5452 <spi_m_sync_get_io_descriptor+0x1a>
    5448:	683b      	ldr	r3, [r7, #0]
    544a:	2b00      	cmp	r3, #0
    544c:	d001      	beq.n	5452 <spi_m_sync_get_io_descriptor+0x1a>
    544e:	2301      	movs	r3, #1
    5450:	e000      	b.n	5454 <spi_m_sync_get_io_descriptor+0x1c>
    5452:	2300      	movs	r3, #0
    5454:	f003 0301 	and.w	r3, r3, #1
    5458:	b2db      	uxtb	r3, r3
    545a:	22bd      	movs	r2, #189	; 0xbd
    545c:	4906      	ldr	r1, [pc, #24]	; (5478 <spi_m_sync_get_io_descriptor+0x40>)
    545e:	4618      	mov	r0, r3
    5460:	4b06      	ldr	r3, [pc, #24]	; (547c <spi_m_sync_get_io_descriptor+0x44>)
    5462:	4798      	blx	r3
	*io = &spi->io;
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	f103 020c 	add.w	r2, r3, #12
    546a:	683b      	ldr	r3, [r7, #0]
    546c:	601a      	str	r2, [r3, #0]
	return 0;
    546e:	2300      	movs	r3, #0
}
    5470:	4618      	mov	r0, r3
    5472:	3708      	adds	r7, #8
    5474:	46bd      	mov	sp, r7
    5476:	bd80      	pop	{r7, pc}
    5478:	0001ab7c 	.word	0x0001ab7c
    547c:	000062c5 	.word	0x000062c5

00005480 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    5480:	b480      	push	{r7}
    5482:	b083      	sub	sp, #12
    5484:	af00      	add	r7, sp, #0
    5486:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	681b      	ldr	r3, [r3, #0]
}
    548c:	4618      	mov	r0, r3
    548e:	370c      	adds	r7, #12
    5490:	46bd      	mov	sp, r7
    5492:	f85d 7b04 	ldr.w	r7, [sp], #4
    5496:	4770      	bx	lr

00005498 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    5498:	b480      	push	{r7}
    549a:	b083      	sub	sp, #12
    549c:	af00      	add	r7, sp, #0
    549e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	2b00      	cmp	r3, #0
    54a4:	d002      	beq.n	54ac <list_get_next_element+0x14>
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	e000      	b.n	54ae <list_get_next_element+0x16>
    54ac:	2300      	movs	r3, #0
}
    54ae:	4618      	mov	r0, r3
    54b0:	370c      	adds	r7, #12
    54b2:	46bd      	mov	sp, r7
    54b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b8:	4770      	bx	lr
	...

000054bc <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    54bc:	b580      	push	{r7, lr}
    54be:	b084      	sub	sp, #16
    54c0:	af00      	add	r7, sp, #0
    54c2:	60f8      	str	r0, [r7, #12]
    54c4:	60b9      	str	r1, [r7, #8]
    54c6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    54c8:	68fb      	ldr	r3, [r7, #12]
    54ca:	2b00      	cmp	r3, #0
    54cc:	d004      	beq.n	54d8 <timer_init+0x1c>
    54ce:	68bb      	ldr	r3, [r7, #8]
    54d0:	2b00      	cmp	r3, #0
    54d2:	d001      	beq.n	54d8 <timer_init+0x1c>
    54d4:	2301      	movs	r3, #1
    54d6:	e000      	b.n	54da <timer_init+0x1e>
    54d8:	2300      	movs	r3, #0
    54da:	f003 0301 	and.w	r3, r3, #1
    54de:	b2db      	uxtb	r3, r3
    54e0:	223b      	movs	r2, #59	; 0x3b
    54e2:	490a      	ldr	r1, [pc, #40]	; (550c <timer_init+0x50>)
    54e4:	4618      	mov	r0, r3
    54e6:	4b0a      	ldr	r3, [pc, #40]	; (5510 <timer_init+0x54>)
    54e8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    54ea:	68fb      	ldr	r3, [r7, #12]
    54ec:	68b9      	ldr	r1, [r7, #8]
    54ee:	4618      	mov	r0, r3
    54f0:	4b08      	ldr	r3, [pc, #32]	; (5514 <timer_init+0x58>)
    54f2:	4798      	blx	r3
	descr->time                           = 0;
    54f4:	68fb      	ldr	r3, [r7, #12]
    54f6:	2200      	movs	r2, #0
    54f8:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    54fa:	68fb      	ldr	r3, [r7, #12]
    54fc:	4a06      	ldr	r2, [pc, #24]	; (5518 <timer_init+0x5c>)
    54fe:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5500:	2300      	movs	r3, #0
}
    5502:	4618      	mov	r0, r3
    5504:	3710      	adds	r7, #16
    5506:	46bd      	mov	sp, r7
    5508:	bd80      	pop	{r7, pc}
    550a:	bf00      	nop
    550c:	0001ab98 	.word	0x0001ab98
    5510:	000062c5 	.word	0x000062c5
    5514:	0000aeb9 	.word	0x0000aeb9
    5518:	000058b5 	.word	0x000058b5

0000551c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    551c:	b580      	push	{r7, lr}
    551e:	b082      	sub	sp, #8
    5520:	af00      	add	r7, sp, #0
    5522:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	2b00      	cmp	r3, #0
    5528:	bf14      	ite	ne
    552a:	2301      	movne	r3, #1
    552c:	2300      	moveq	r3, #0
    552e:	b2db      	uxtb	r3, r3
    5530:	2253      	movs	r2, #83	; 0x53
    5532:	490b      	ldr	r1, [pc, #44]	; (5560 <timer_start+0x44>)
    5534:	4618      	mov	r0, r3
    5536:	4b0b      	ldr	r3, [pc, #44]	; (5564 <timer_start+0x48>)
    5538:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	4618      	mov	r0, r3
    553e:	4b0a      	ldr	r3, [pc, #40]	; (5568 <timer_start+0x4c>)
    5540:	4798      	blx	r3
    5542:	4603      	mov	r3, r0
    5544:	2b00      	cmp	r3, #0
    5546:	d002      	beq.n	554e <timer_start+0x32>
		return ERR_DENIED;
    5548:	f06f 0310 	mvn.w	r3, #16
    554c:	e004      	b.n	5558 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	4618      	mov	r0, r3
    5552:	4b06      	ldr	r3, [pc, #24]	; (556c <timer_start+0x50>)
    5554:	4798      	blx	r3

	return ERR_NONE;
    5556:	2300      	movs	r3, #0
}
    5558:	4618      	mov	r0, r3
    555a:	3708      	adds	r7, #8
    555c:	46bd      	mov	sp, r7
    555e:	bd80      	pop	{r7, pc}
    5560:	0001ab98 	.word	0x0001ab98
    5564:	000062c5 	.word	0x000062c5
    5568:	0000b455 	.word	0x0000b455
    556c:	0000b385 	.word	0x0000b385

00005570 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    5570:	b580      	push	{r7, lr}
    5572:	b082      	sub	sp, #8
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	2b00      	cmp	r3, #0
    557c:	bf14      	ite	ne
    557e:	2301      	movne	r3, #1
    5580:	2300      	moveq	r3, #0
    5582:	b2db      	uxtb	r3, r3
    5584:	2261      	movs	r2, #97	; 0x61
    5586:	490d      	ldr	r1, [pc, #52]	; (55bc <timer_stop+0x4c>)
    5588:	4618      	mov	r0, r3
    558a:	4b0d      	ldr	r3, [pc, #52]	; (55c0 <timer_stop+0x50>)
    558c:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    558e:	687b      	ldr	r3, [r7, #4]
    5590:	4618      	mov	r0, r3
    5592:	4b0c      	ldr	r3, [pc, #48]	; (55c4 <timer_stop+0x54>)
    5594:	4798      	blx	r3
    5596:	4603      	mov	r3, r0
    5598:	f083 0301 	eor.w	r3, r3, #1
    559c:	b2db      	uxtb	r3, r3
    559e:	2b00      	cmp	r3, #0
    55a0:	d002      	beq.n	55a8 <timer_stop+0x38>
		return ERR_DENIED;
    55a2:	f06f 0310 	mvn.w	r3, #16
    55a6:	e004      	b.n	55b2 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	4618      	mov	r0, r3
    55ac:	4b06      	ldr	r3, [pc, #24]	; (55c8 <timer_stop+0x58>)
    55ae:	4798      	blx	r3

	return ERR_NONE;
    55b0:	2300      	movs	r3, #0
}
    55b2:	4618      	mov	r0, r3
    55b4:	3708      	adds	r7, #8
    55b6:	46bd      	mov	sp, r7
    55b8:	bd80      	pop	{r7, pc}
    55ba:	bf00      	nop
    55bc:	0001ab98 	.word	0x0001ab98
    55c0:	000062c5 	.word	0x000062c5
    55c4:	0000b455 	.word	0x0000b455
    55c8:	0000b3c5 	.word	0x0000b3c5

000055cc <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    55cc:	b580      	push	{r7, lr}
    55ce:	b084      	sub	sp, #16
    55d0:	af00      	add	r7, sp, #0
    55d2:	6078      	str	r0, [r7, #4]
    55d4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    55d6:	687b      	ldr	r3, [r7, #4]
    55d8:	2b00      	cmp	r3, #0
    55da:	d004      	beq.n	55e6 <timer_add_task+0x1a>
    55dc:	683b      	ldr	r3, [r7, #0]
    55de:	2b00      	cmp	r3, #0
    55e0:	d001      	beq.n	55e6 <timer_add_task+0x1a>
    55e2:	2301      	movs	r3, #1
    55e4:	e000      	b.n	55e8 <timer_add_task+0x1c>
    55e6:	2300      	movs	r3, #0
    55e8:	f003 0301 	and.w	r3, r3, #1
    55ec:	b2db      	uxtb	r3, r3
    55ee:	227a      	movs	r2, #122	; 0x7a
    55f0:	492d      	ldr	r1, [pc, #180]	; (56a8 <timer_add_task+0xdc>)
    55f2:	4618      	mov	r0, r3
    55f4:	4b2d      	ldr	r3, [pc, #180]	; (56ac <timer_add_task+0xe0>)
    55f6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	7e1b      	ldrb	r3, [r3, #24]
    55fc:	b2db      	uxtb	r3, r3
    55fe:	f043 0301 	orr.w	r3, r3, #1
    5602:	b2da      	uxtb	r2, r3
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	3314      	adds	r3, #20
    560c:	6839      	ldr	r1, [r7, #0]
    560e:	4618      	mov	r0, r3
    5610:	4b27      	ldr	r3, [pc, #156]	; (56b0 <timer_add_task+0xe4>)
    5612:	4798      	blx	r3
    5614:	4603      	mov	r3, r0
    5616:	2b00      	cmp	r3, #0
    5618:	d00f      	beq.n	563a <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	7e1b      	ldrb	r3, [r3, #24]
    561e:	b2db      	uxtb	r3, r3
    5620:	f023 0301 	bic.w	r3, r3, #1
    5624:	b2da      	uxtb	r2, r3
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    562a:	227f      	movs	r2, #127	; 0x7f
    562c:	491e      	ldr	r1, [pc, #120]	; (56a8 <timer_add_task+0xdc>)
    562e:	2000      	movs	r0, #0
    5630:	4b1e      	ldr	r3, [pc, #120]	; (56ac <timer_add_task+0xe0>)
    5632:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5634:	f06f 0311 	mvn.w	r3, #17
    5638:	e032      	b.n	56a0 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    563a:	687b      	ldr	r3, [r7, #4]
    563c:	691a      	ldr	r2, [r3, #16]
    563e:	683b      	ldr	r3, [r7, #0]
    5640:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    5642:	687b      	ldr	r3, [r7, #4]
    5644:	f103 0014 	add.w	r0, r3, #20
    5648:	687b      	ldr	r3, [r7, #4]
    564a:	691b      	ldr	r3, [r3, #16]
    564c:	461a      	mov	r2, r3
    564e:	6839      	ldr	r1, [r7, #0]
    5650:	4b18      	ldr	r3, [pc, #96]	; (56b4 <timer_add_task+0xe8>)
    5652:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	7e1b      	ldrb	r3, [r3, #24]
    5658:	b2db      	uxtb	r3, r3
    565a:	f023 0301 	bic.w	r3, r3, #1
    565e:	b2da      	uxtb	r2, r3
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	7e1b      	ldrb	r3, [r3, #24]
    5668:	b2db      	uxtb	r3, r3
    566a:	f003 0302 	and.w	r3, r3, #2
    566e:	2b00      	cmp	r3, #0
    5670:	d015      	beq.n	569e <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    5672:	f107 030c 	add.w	r3, r7, #12
    5676:	4618      	mov	r0, r3
    5678:	4b0f      	ldr	r3, [pc, #60]	; (56b8 <timer_add_task+0xec>)
    567a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	7e1b      	ldrb	r3, [r3, #24]
    5680:	b2db      	uxtb	r3, r3
    5682:	f023 0302 	bic.w	r3, r3, #2
    5686:	b2da      	uxtb	r2, r3
    5688:	687b      	ldr	r3, [r7, #4]
    568a:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	4618      	mov	r0, r3
    5690:	4b0a      	ldr	r3, [pc, #40]	; (56bc <timer_add_task+0xf0>)
    5692:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5694:	f107 030c 	add.w	r3, r7, #12
    5698:	4618      	mov	r0, r3
    569a:	4b09      	ldr	r3, [pc, #36]	; (56c0 <timer_add_task+0xf4>)
    569c:	4798      	blx	r3
	}

	return ERR_NONE;
    569e:	2300      	movs	r3, #0
}
    56a0:	4618      	mov	r0, r3
    56a2:	3710      	adds	r7, #16
    56a4:	46bd      	mov	sp, r7
    56a6:	bd80      	pop	{r7, pc}
    56a8:	0001ab98 	.word	0x0001ab98
    56ac:	000062c5 	.word	0x000062c5
    56b0:	000062ed 	.word	0x000062ed
    56b4:	00005805 	.word	0x00005805
    56b8:	0000e59d 	.word	0x0000e59d
    56bc:	0000b4b5 	.word	0x0000b4b5
    56c0:	0000e5c3 	.word	0x0000e5c3

000056c4 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    56c4:	b580      	push	{r7, lr}
    56c6:	b084      	sub	sp, #16
    56c8:	af00      	add	r7, sp, #0
    56ca:	6078      	str	r0, [r7, #4]
    56cc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	2b00      	cmp	r3, #0
    56d2:	d004      	beq.n	56de <timer_remove_task+0x1a>
    56d4:	683b      	ldr	r3, [r7, #0]
    56d6:	2b00      	cmp	r3, #0
    56d8:	d001      	beq.n	56de <timer_remove_task+0x1a>
    56da:	2301      	movs	r3, #1
    56dc:	e000      	b.n	56e0 <timer_remove_task+0x1c>
    56de:	2300      	movs	r3, #0
    56e0:	f003 0301 	and.w	r3, r3, #1
    56e4:	b2db      	uxtb	r3, r3
    56e6:	2295      	movs	r2, #149	; 0x95
    56e8:	492b      	ldr	r1, [pc, #172]	; (5798 <timer_remove_task+0xd4>)
    56ea:	4618      	mov	r0, r3
    56ec:	4b2b      	ldr	r3, [pc, #172]	; (579c <timer_remove_task+0xd8>)
    56ee:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    56f0:	687b      	ldr	r3, [r7, #4]
    56f2:	7e1b      	ldrb	r3, [r3, #24]
    56f4:	b2db      	uxtb	r3, r3
    56f6:	f043 0301 	orr.w	r3, r3, #1
    56fa:	b2da      	uxtb	r2, r3
    56fc:	687b      	ldr	r3, [r7, #4]
    56fe:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	3314      	adds	r3, #20
    5704:	6839      	ldr	r1, [r7, #0]
    5706:	4618      	mov	r0, r3
    5708:	4b25      	ldr	r3, [pc, #148]	; (57a0 <timer_remove_task+0xdc>)
    570a:	4798      	blx	r3
    570c:	4603      	mov	r3, r0
    570e:	f083 0301 	eor.w	r3, r3, #1
    5712:	b2db      	uxtb	r3, r3
    5714:	2b00      	cmp	r3, #0
    5716:	d00f      	beq.n	5738 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	7e1b      	ldrb	r3, [r3, #24]
    571c:	b2db      	uxtb	r3, r3
    571e:	f023 0301 	bic.w	r3, r3, #1
    5722:	b2da      	uxtb	r2, r3
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5728:	229a      	movs	r2, #154	; 0x9a
    572a:	491b      	ldr	r1, [pc, #108]	; (5798 <timer_remove_task+0xd4>)
    572c:	2000      	movs	r0, #0
    572e:	4b1b      	ldr	r3, [pc, #108]	; (579c <timer_remove_task+0xd8>)
    5730:	4798      	blx	r3
		return ERR_NOT_FOUND;
    5732:	f06f 0309 	mvn.w	r3, #9
    5736:	e02b      	b.n	5790 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	3314      	adds	r3, #20
    573c:	6839      	ldr	r1, [r7, #0]
    573e:	4618      	mov	r0, r3
    5740:	4b18      	ldr	r3, [pc, #96]	; (57a4 <timer_remove_task+0xe0>)
    5742:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5744:	687b      	ldr	r3, [r7, #4]
    5746:	7e1b      	ldrb	r3, [r3, #24]
    5748:	b2db      	uxtb	r3, r3
    574a:	f023 0301 	bic.w	r3, r3, #1
    574e:	b2da      	uxtb	r2, r3
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5754:	687b      	ldr	r3, [r7, #4]
    5756:	7e1b      	ldrb	r3, [r3, #24]
    5758:	b2db      	uxtb	r3, r3
    575a:	f003 0302 	and.w	r3, r3, #2
    575e:	2b00      	cmp	r3, #0
    5760:	d015      	beq.n	578e <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    5762:	f107 030c 	add.w	r3, r7, #12
    5766:	4618      	mov	r0, r3
    5768:	4b0f      	ldr	r3, [pc, #60]	; (57a8 <timer_remove_task+0xe4>)
    576a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	7e1b      	ldrb	r3, [r3, #24]
    5770:	b2db      	uxtb	r3, r3
    5772:	f023 0302 	bic.w	r3, r3, #2
    5776:	b2da      	uxtb	r2, r3
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    577c:	687b      	ldr	r3, [r7, #4]
    577e:	4618      	mov	r0, r3
    5780:	4b0a      	ldr	r3, [pc, #40]	; (57ac <timer_remove_task+0xe8>)
    5782:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5784:	f107 030c 	add.w	r3, r7, #12
    5788:	4618      	mov	r0, r3
    578a:	4b09      	ldr	r3, [pc, #36]	; (57b0 <timer_remove_task+0xec>)
    578c:	4798      	blx	r3
	}

	return ERR_NONE;
    578e:	2300      	movs	r3, #0
}
    5790:	4618      	mov	r0, r3
    5792:	3710      	adds	r7, #16
    5794:	46bd      	mov	sp, r7
    5796:	bd80      	pop	{r7, pc}
    5798:	0001ab98 	.word	0x0001ab98
    579c:	000062c5 	.word	0x000062c5
    57a0:	000062ed 	.word	0x000062ed
    57a4:	0000644f 	.word	0x0000644f
    57a8:	0000e59d 	.word	0x0000e59d
    57ac:	0000b4b5 	.word	0x0000b4b5
    57b0:	0000e5c3 	.word	0x0000e5c3

000057b4 <timer_get_clock_cycles_in_tick>:

/**
 * \brief Retrieve the amount of clock cycles in a tick
 */
int32_t timer_get_clock_cycles_in_tick(const struct timer_descriptor *const descr, uint32_t *const cycles)
{
    57b4:	b580      	push	{r7, lr}
    57b6:	b082      	sub	sp, #8
    57b8:	af00      	add	r7, sp, #0
    57ba:	6078      	str	r0, [r7, #4]
    57bc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && cycles);
    57be:	687b      	ldr	r3, [r7, #4]
    57c0:	2b00      	cmp	r3, #0
    57c2:	d004      	beq.n	57ce <timer_get_clock_cycles_in_tick+0x1a>
    57c4:	683b      	ldr	r3, [r7, #0]
    57c6:	2b00      	cmp	r3, #0
    57c8:	d001      	beq.n	57ce <timer_get_clock_cycles_in_tick+0x1a>
    57ca:	2301      	movs	r3, #1
    57cc:	e000      	b.n	57d0 <timer_get_clock_cycles_in_tick+0x1c>
    57ce:	2300      	movs	r3, #0
    57d0:	f003 0301 	and.w	r3, r3, #1
    57d4:	b2db      	uxtb	r3, r3
    57d6:	22af      	movs	r2, #175	; 0xaf
    57d8:	4907      	ldr	r1, [pc, #28]	; (57f8 <timer_get_clock_cycles_in_tick+0x44>)
    57da:	4618      	mov	r0, r3
    57dc:	4b07      	ldr	r3, [pc, #28]	; (57fc <timer_get_clock_cycles_in_tick+0x48>)
    57de:	4798      	blx	r3
	*cycles = _timer_get_period(&descr->device);
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	4618      	mov	r0, r3
    57e4:	4b06      	ldr	r3, [pc, #24]	; (5800 <timer_get_clock_cycles_in_tick+0x4c>)
    57e6:	4798      	blx	r3
    57e8:	4602      	mov	r2, r0
    57ea:	683b      	ldr	r3, [r7, #0]
    57ec:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    57ee:	2300      	movs	r3, #0
}
    57f0:	4618      	mov	r0, r3
    57f2:	3708      	adds	r7, #8
    57f4:	46bd      	mov	sp, r7
    57f6:	bd80      	pop	{r7, pc}
    57f8:	0001ab98 	.word	0x0001ab98
    57fc:	000062c5 	.word	0x000062c5
    5800:	0000b3e5 	.word	0x0000b3e5

00005804 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5804:	b580      	push	{r7, lr}
    5806:	b088      	sub	sp, #32
    5808:	af00      	add	r7, sp, #0
    580a:	60f8      	str	r0, [r7, #12]
    580c:	60b9      	str	r1, [r7, #8]
    580e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    5810:	2300      	movs	r3, #0
    5812:	61bb      	str	r3, [r7, #24]
    5814:	68f8      	ldr	r0, [r7, #12]
    5816:	4b23      	ldr	r3, [pc, #140]	; (58a4 <timer_add_timer_task+0xa0>)
    5818:	4798      	blx	r3
    581a:	6138      	str	r0, [r7, #16]

	if (!head) {
    581c:	693b      	ldr	r3, [r7, #16]
    581e:	2b00      	cmp	r3, #0
    5820:	d104      	bne.n	582c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    5822:	68b9      	ldr	r1, [r7, #8]
    5824:	68f8      	ldr	r0, [r7, #12]
    5826:	4b20      	ldr	r3, [pc, #128]	; (58a8 <timer_add_timer_task+0xa4>)
    5828:	4798      	blx	r3
		return;
    582a:	e037      	b.n	589c <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    582c:	693b      	ldr	r3, [r7, #16]
    582e:	61fb      	str	r3, [r7, #28]
    5830:	e022      	b.n	5878 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    5832:	69fb      	ldr	r3, [r7, #28]
    5834:	685a      	ldr	r2, [r3, #4]
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	429a      	cmp	r2, r3
    583a:	d808      	bhi.n	584e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    583c:	69fb      	ldr	r3, [r7, #28]
    583e:	689a      	ldr	r2, [r3, #8]
    5840:	69fb      	ldr	r3, [r7, #28]
    5842:	6859      	ldr	r1, [r3, #4]
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	1acb      	subs	r3, r1, r3
    5848:	4413      	add	r3, r2
    584a:	617b      	str	r3, [r7, #20]
    584c:	e009      	b.n	5862 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    584e:	69fb      	ldr	r3, [r7, #28]
    5850:	689a      	ldr	r2, [r3, #8]
    5852:	69fb      	ldr	r3, [r7, #28]
    5854:	685b      	ldr	r3, [r3, #4]
    5856:	441a      	add	r2, r3
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	425b      	negs	r3, r3
    585c:	4413      	add	r3, r2
    585e:	3301      	adds	r3, #1
    5860:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    5862:	68bb      	ldr	r3, [r7, #8]
    5864:	689a      	ldr	r2, [r3, #8]
    5866:	697b      	ldr	r3, [r7, #20]
    5868:	429a      	cmp	r2, r3
    586a:	d909      	bls.n	5880 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    586c:	69fb      	ldr	r3, [r7, #28]
    586e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5870:	69f8      	ldr	r0, [r7, #28]
    5872:	4b0e      	ldr	r3, [pc, #56]	; (58ac <timer_add_timer_task+0xa8>)
    5874:	4798      	blx	r3
    5876:	61f8      	str	r0, [r7, #28]
    5878:	69fb      	ldr	r3, [r7, #28]
    587a:	2b00      	cmp	r3, #0
    587c:	d1d9      	bne.n	5832 <timer_add_timer_task+0x2e>
    587e:	e000      	b.n	5882 <timer_add_timer_task+0x7e>
			break;
    5880:	bf00      	nop
	}

	if (it == head) {
    5882:	69fa      	ldr	r2, [r7, #28]
    5884:	693b      	ldr	r3, [r7, #16]
    5886:	429a      	cmp	r2, r3
    5888:	d104      	bne.n	5894 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    588a:	68b9      	ldr	r1, [r7, #8]
    588c:	68f8      	ldr	r0, [r7, #12]
    588e:	4b06      	ldr	r3, [pc, #24]	; (58a8 <timer_add_timer_task+0xa4>)
    5890:	4798      	blx	r3
    5892:	e003      	b.n	589c <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    5894:	68b9      	ldr	r1, [r7, #8]
    5896:	69b8      	ldr	r0, [r7, #24]
    5898:	4b05      	ldr	r3, [pc, #20]	; (58b0 <timer_add_timer_task+0xac>)
    589a:	4798      	blx	r3
	}
}
    589c:	3720      	adds	r7, #32
    589e:	46bd      	mov	sp, r7
    58a0:	bd80      	pop	{r7, pc}
    58a2:	bf00      	nop
    58a4:	00005481 	.word	0x00005481
    58a8:	00006325 	.word	0x00006325
    58ac:	00005499 	.word	0x00005499
    58b0:	0000637d 	.word	0x0000637d

000058b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    58b4:	b580      	push	{r7, lr}
    58b6:	b086      	sub	sp, #24
    58b8:	af00      	add	r7, sp, #0
    58ba:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    58c0:	693b      	ldr	r3, [r7, #16]
    58c2:	3314      	adds	r3, #20
    58c4:	4618      	mov	r0, r3
    58c6:	4b27      	ldr	r3, [pc, #156]	; (5964 <timer_process_counted+0xb0>)
    58c8:	4798      	blx	r3
    58ca:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    58cc:	693b      	ldr	r3, [r7, #16]
    58ce:	691b      	ldr	r3, [r3, #16]
    58d0:	1c5a      	adds	r2, r3, #1
    58d2:	693b      	ldr	r3, [r7, #16]
    58d4:	611a      	str	r2, [r3, #16]
    58d6:	693b      	ldr	r3, [r7, #16]
    58d8:	691b      	ldr	r3, [r3, #16]
    58da:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    58dc:	693b      	ldr	r3, [r7, #16]
    58de:	7e1b      	ldrb	r3, [r3, #24]
    58e0:	b2db      	uxtb	r3, r3
    58e2:	f003 0301 	and.w	r3, r3, #1
    58e6:	2b00      	cmp	r3, #0
    58e8:	d106      	bne.n	58f8 <timer_process_counted+0x44>
    58ea:	693b      	ldr	r3, [r7, #16]
    58ec:	7e1b      	ldrb	r3, [r3, #24]
    58ee:	b2db      	uxtb	r3, r3
    58f0:	f003 0302 	and.w	r3, r3, #2
    58f4:	2b00      	cmp	r3, #0
    58f6:	d027      	beq.n	5948 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    58f8:	693b      	ldr	r3, [r7, #16]
    58fa:	7e1b      	ldrb	r3, [r3, #24]
    58fc:	b2db      	uxtb	r3, r3
    58fe:	f043 0302 	orr.w	r3, r3, #2
    5902:	b2da      	uxtb	r2, r3
    5904:	693b      	ldr	r3, [r7, #16]
    5906:	761a      	strb	r2, [r3, #24]
		return;
    5908:	e029      	b.n	595e <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    590a:	697b      	ldr	r3, [r7, #20]
    590c:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    590e:	693b      	ldr	r3, [r7, #16]
    5910:	3314      	adds	r3, #20
    5912:	4618      	mov	r0, r3
    5914:	4b14      	ldr	r3, [pc, #80]	; (5968 <timer_process_counted+0xb4>)
    5916:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5918:	68bb      	ldr	r3, [r7, #8]
    591a:	7c1b      	ldrb	r3, [r3, #16]
    591c:	2b01      	cmp	r3, #1
    591e:	d109      	bne.n	5934 <timer_process_counted+0x80>
			tmp->time_label = time;
    5920:	68bb      	ldr	r3, [r7, #8]
    5922:	68fa      	ldr	r2, [r7, #12]
    5924:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    5926:	693b      	ldr	r3, [r7, #16]
    5928:	3314      	adds	r3, #20
    592a:	68fa      	ldr	r2, [r7, #12]
    592c:	68b9      	ldr	r1, [r7, #8]
    592e:	4618      	mov	r0, r3
    5930:	4b0e      	ldr	r3, [pc, #56]	; (596c <timer_process_counted+0xb8>)
    5932:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    5934:	693b      	ldr	r3, [r7, #16]
    5936:	3314      	adds	r3, #20
    5938:	4618      	mov	r0, r3
    593a:	4b0a      	ldr	r3, [pc, #40]	; (5964 <timer_process_counted+0xb0>)
    593c:	4798      	blx	r3
    593e:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    5940:	68bb      	ldr	r3, [r7, #8]
    5942:	68db      	ldr	r3, [r3, #12]
    5944:	68b8      	ldr	r0, [r7, #8]
    5946:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    5948:	697b      	ldr	r3, [r7, #20]
    594a:	2b00      	cmp	r3, #0
    594c:	d007      	beq.n	595e <timer_process_counted+0xaa>
    594e:	697b      	ldr	r3, [r7, #20]
    5950:	685b      	ldr	r3, [r3, #4]
    5952:	68fa      	ldr	r2, [r7, #12]
    5954:	1ad2      	subs	r2, r2, r3
    5956:	697b      	ldr	r3, [r7, #20]
    5958:	689b      	ldr	r3, [r3, #8]
    595a:	429a      	cmp	r2, r3
    595c:	d2d5      	bcs.n	590a <timer_process_counted+0x56>
	}
}
    595e:	3718      	adds	r7, #24
    5960:	46bd      	mov	sp, r7
    5962:	bd80      	pop	{r7, pc}
    5964:	00005481 	.word	0x00005481
    5968:	0000641d 	.word	0x0000641d
    596c:	00005805 	.word	0x00005805

00005970 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    5970:	b480      	push	{r7}
    5972:	b085      	sub	sp, #20
    5974:	af00      	add	r7, sp, #0
    5976:	4603      	mov	r3, r0
    5978:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    597a:	2300      	movs	r3, #0
    597c:	73fb      	strb	r3, [r7, #15]
    597e:	e029      	b.n	59d4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5980:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5984:	4a19      	ldr	r2, [pc, #100]	; (59ec <_usb_d_find_ep+0x7c>)
    5986:	015b      	lsls	r3, r3, #5
    5988:	4413      	add	r3, r2
    598a:	3301      	adds	r3, #1
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	79fa      	ldrb	r2, [r7, #7]
    5990:	429a      	cmp	r2, r3
    5992:	d102      	bne.n	599a <_usb_d_find_ep+0x2a>
			return i;
    5994:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5998:	e022      	b.n	59e0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    599a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    599e:	4a13      	ldr	r2, [pc, #76]	; (59ec <_usb_d_find_ep+0x7c>)
    59a0:	015b      	lsls	r3, r3, #5
    59a2:	4413      	add	r3, r2
    59a4:	781b      	ldrb	r3, [r3, #0]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d10e      	bne.n	59c8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    59aa:	79fb      	ldrb	r3, [r7, #7]
    59ac:	f003 030f 	and.w	r3, r3, #15
    59b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    59b4:	490d      	ldr	r1, [pc, #52]	; (59ec <_usb_d_find_ep+0x7c>)
    59b6:	0152      	lsls	r2, r2, #5
    59b8:	440a      	add	r2, r1
    59ba:	3201      	adds	r2, #1
    59bc:	7812      	ldrb	r2, [r2, #0]
    59be:	4293      	cmp	r3, r2
    59c0:	d102      	bne.n	59c8 <_usb_d_find_ep+0x58>
			return i;
    59c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    59c6:	e00b      	b.n	59e0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    59c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    59cc:	b2db      	uxtb	r3, r3
    59ce:	3301      	adds	r3, #1
    59d0:	b2db      	uxtb	r3, r3
    59d2:	73fb      	strb	r3, [r7, #15]
    59d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    59d8:	2b03      	cmp	r3, #3
    59da:	ddd1      	ble.n	5980 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    59dc:	f04f 33ff 	mov.w	r3, #4294967295
}
    59e0:	4618      	mov	r0, r3
    59e2:	3714      	adds	r7, #20
    59e4:	46bd      	mov	sp, r7
    59e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ea:	4770      	bx	lr
    59ec:	200032dc 	.word	0x200032dc

000059f0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    59f0:	b580      	push	{r7, lr}
    59f2:	b088      	sub	sp, #32
    59f4:	af00      	add	r7, sp, #0
    59f6:	60ba      	str	r2, [r7, #8]
    59f8:	607b      	str	r3, [r7, #4]
    59fa:	4603      	mov	r3, r0
    59fc:	73fb      	strb	r3, [r7, #15]
    59fe:	460b      	mov	r3, r1
    5a00:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    5a02:	68bb      	ldr	r3, [r7, #8]
    5a04:	617b      	str	r3, [r7, #20]
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	61bb      	str	r3, [r7, #24]
    5a0a:	7bbb      	ldrb	r3, [r7, #14]
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d004      	beq.n	5a1a <_usb_d_trans+0x2a>
    5a10:	7bfb      	ldrb	r3, [r7, #15]
    5a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a16:	b2db      	uxtb	r3, r3
    5a18:	e003      	b.n	5a22 <_usb_d_trans+0x32>
    5a1a:	7bfb      	ldrb	r3, [r7, #15]
    5a1c:	f003 030f 	and.w	r3, r3, #15
    5a20:	b2db      	uxtb	r3, r3
    5a22:	773b      	strb	r3, [r7, #28]
    5a24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    5a28:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    5a2a:	f107 0314 	add.w	r3, r7, #20
    5a2e:	4618      	mov	r0, r3
    5a30:	4b03      	ldr	r3, [pc, #12]	; (5a40 <_usb_d_trans+0x50>)
    5a32:	4798      	blx	r3
    5a34:	4603      	mov	r3, r0
}
    5a36:	4618      	mov	r0, r3
    5a38:	3720      	adds	r7, #32
    5a3a:	46bd      	mov	sp, r7
    5a3c:	bd80      	pop	{r7, pc}
    5a3e:	bf00      	nop
    5a40:	0000dbd1 	.word	0x0000dbd1

00005a44 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    5a44:	b480      	push	{r7}
    5a46:	b085      	sub	sp, #20
    5a48:	af00      	add	r7, sp, #0
    5a4a:	60f8      	str	r0, [r7, #12]
    5a4c:	60b9      	str	r1, [r7, #8]
    5a4e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    5a50:	2300      	movs	r3, #0
}
    5a52:	4618      	mov	r0, r3
    5a54:	3714      	adds	r7, #20
    5a56:	46bd      	mov	sp, r7
    5a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5c:	4770      	bx	lr
	...

00005a60 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b086      	sub	sp, #24
    5a64:	af00      	add	r7, sp, #0
    5a66:	4603      	mov	r3, r0
    5a68:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5a6a:	79fb      	ldrb	r3, [r7, #7]
    5a6c:	4618      	mov	r0, r3
    5a6e:	4b2a      	ldr	r3, [pc, #168]	; (5b18 <usb_d_cb_trans_setup+0xb8>)
    5a70:	4798      	blx	r3
    5a72:	4603      	mov	r3, r0
    5a74:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5a7a:	015b      	lsls	r3, r3, #5
    5a7c:	4a27      	ldr	r2, [pc, #156]	; (5b1c <usb_d_cb_trans_setup+0xbc>)
    5a7e:	4413      	add	r3, r2
    5a80:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    5a82:	693b      	ldr	r3, [r7, #16]
    5a84:	330c      	adds	r3, #12
    5a86:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5a88:	79fb      	ldrb	r3, [r7, #7]
    5a8a:	68f9      	ldr	r1, [r7, #12]
    5a8c:	4618      	mov	r0, r3
    5a8e:	4b24      	ldr	r3, [pc, #144]	; (5b20 <usb_d_cb_trans_setup+0xc0>)
    5a90:	4798      	blx	r3
    5a92:	4603      	mov	r3, r0
    5a94:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    5a96:	7afb      	ldrb	r3, [r7, #11]
    5a98:	2b08      	cmp	r3, #8
    5a9a:	d00d      	beq.n	5ab8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a9c:	79fb      	ldrb	r3, [r7, #7]
    5a9e:	2101      	movs	r1, #1
    5aa0:	4618      	mov	r0, r3
    5aa2:	4b20      	ldr	r3, [pc, #128]	; (5b24 <usb_d_cb_trans_setup+0xc4>)
    5aa4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5aa6:	79fb      	ldrb	r3, [r7, #7]
    5aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5aac:	b2db      	uxtb	r3, r3
    5aae:	2101      	movs	r1, #1
    5ab0:	4618      	mov	r0, r3
    5ab2:	4b1c      	ldr	r3, [pc, #112]	; (5b24 <usb_d_cb_trans_setup+0xc4>)
    5ab4:	4798      	blx	r3
		return;
    5ab6:	e02b      	b.n	5b10 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5ab8:	79fb      	ldrb	r3, [r7, #7]
    5aba:	2100      	movs	r1, #0
    5abc:	4618      	mov	r0, r3
    5abe:	4b19      	ldr	r3, [pc, #100]	; (5b24 <usb_d_cb_trans_setup+0xc4>)
    5ac0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5ac2:	79fb      	ldrb	r3, [r7, #7]
    5ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ac8:	b2db      	uxtb	r3, r3
    5aca:	2100      	movs	r1, #0
    5acc:	4618      	mov	r0, r3
    5ace:	4b15      	ldr	r3, [pc, #84]	; (5b24 <usb_d_cb_trans_setup+0xc4>)
    5ad0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5ad2:	693b      	ldr	r3, [r7, #16]
    5ad4:	2201      	movs	r2, #1
    5ad6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5ad8:	693b      	ldr	r3, [r7, #16]
    5ada:	695b      	ldr	r3, [r3, #20]
    5adc:	79fa      	ldrb	r2, [r7, #7]
    5ade:	68f9      	ldr	r1, [r7, #12]
    5ae0:	4610      	mov	r0, r2
    5ae2:	4798      	blx	r3
    5ae4:	4603      	mov	r3, r0
    5ae6:	f083 0301 	eor.w	r3, r3, #1
    5aea:	b2db      	uxtb	r3, r3
    5aec:	2b00      	cmp	r3, #0
    5aee:	d00f      	beq.n	5b10 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5af0:	693b      	ldr	r3, [r7, #16]
    5af2:	2205      	movs	r2, #5
    5af4:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5af6:	79fb      	ldrb	r3, [r7, #7]
    5af8:	2101      	movs	r1, #1
    5afa:	4618      	mov	r0, r3
    5afc:	4b09      	ldr	r3, [pc, #36]	; (5b24 <usb_d_cb_trans_setup+0xc4>)
    5afe:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5b00:	79fb      	ldrb	r3, [r7, #7]
    5b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b06:	b2db      	uxtb	r3, r3
    5b08:	2101      	movs	r1, #1
    5b0a:	4618      	mov	r0, r3
    5b0c:	4b05      	ldr	r3, [pc, #20]	; (5b24 <usb_d_cb_trans_setup+0xc4>)
    5b0e:	4798      	blx	r3
	}
}
    5b10:	3718      	adds	r7, #24
    5b12:	46bd      	mov	sp, r7
    5b14:	bd80      	pop	{r7, pc}
    5b16:	bf00      	nop
    5b18:	00005971 	.word	0x00005971
    5b1c:	200032dc 	.word	0x200032dc
    5b20:	0000db29 	.word	0x0000db29
    5b24:	0000d9a1 	.word	0x0000d9a1

00005b28 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5b28:	b580      	push	{r7, lr}
    5b2a:	b084      	sub	sp, #16
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	4603      	mov	r3, r0
    5b30:	6039      	str	r1, [r7, #0]
    5b32:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b34:	79fb      	ldrb	r3, [r7, #7]
    5b36:	4618      	mov	r0, r3
    5b38:	4b0d      	ldr	r3, [pc, #52]	; (5b70 <usb_d_cb_trans_more+0x48>)
    5b3a:	4798      	blx	r3
    5b3c:	4603      	mov	r3, r0
    5b3e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5b44:	015b      	lsls	r3, r3, #5
    5b46:	4a0b      	ldr	r2, [pc, #44]	; (5b74 <usb_d_cb_trans_more+0x4c>)
    5b48:	4413      	add	r3, r2
    5b4a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5b4c:	68bb      	ldr	r3, [r7, #8]
    5b4e:	789b      	ldrb	r3, [r3, #2]
    5b50:	2b03      	cmp	r3, #3
    5b52:	d107      	bne.n	5b64 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5b54:	68bb      	ldr	r3, [r7, #8]
    5b56:	699b      	ldr	r3, [r3, #24]
    5b58:	79fa      	ldrb	r2, [r7, #7]
    5b5a:	6839      	ldr	r1, [r7, #0]
    5b5c:	4610      	mov	r0, r2
    5b5e:	4798      	blx	r3
    5b60:	4603      	mov	r3, r0
    5b62:	e000      	b.n	5b66 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5b64:	2300      	movs	r3, #0
}
    5b66:	4618      	mov	r0, r3
    5b68:	3710      	adds	r7, #16
    5b6a:	46bd      	mov	sp, r7
    5b6c:	bd80      	pop	{r7, pc}
    5b6e:	bf00      	nop
    5b70:	00005971 	.word	0x00005971
    5b74:	200032dc 	.word	0x200032dc

00005b78 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    5b78:	b590      	push	{r4, r7, lr}
    5b7a:	b087      	sub	sp, #28
    5b7c:	af02      	add	r7, sp, #8
    5b7e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	789b      	ldrb	r3, [r3, #2]
    5b84:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	7b1b      	ldrb	r3, [r3, #12]
    5b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5b8e:	2b00      	cmp	r3, #0
    5b90:	bf14      	ite	ne
    5b92:	2301      	movne	r3, #1
    5b94:	2300      	moveq	r3, #0
    5b96:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    5b98:	7bfb      	ldrb	r3, [r7, #15]
    5b9a:	2b03      	cmp	r3, #3
    5b9c:	d13a      	bne.n	5c14 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	69db      	ldr	r3, [r3, #28]
    5ba2:	687a      	ldr	r2, [r7, #4]
    5ba4:	7850      	ldrb	r0, [r2, #1]
    5ba6:	687a      	ldr	r2, [r7, #4]
    5ba8:	320c      	adds	r2, #12
    5baa:	2101      	movs	r1, #1
    5bac:	4798      	blx	r3
    5bae:	4603      	mov	r3, r0
    5bb0:	737b      	strb	r3, [r7, #13]
		if (err) {
    5bb2:	7b7b      	ldrb	r3, [r7, #13]
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d015      	beq.n	5be4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5bb8:	687b      	ldr	r3, [r7, #4]
    5bba:	2205      	movs	r2, #5
    5bbc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	2202      	movs	r2, #2
    5bc2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5bc4:	7bbb      	ldrb	r3, [r7, #14]
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d002      	beq.n	5bd0 <usb_d_ctrl_trans_done+0x58>
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	785b      	ldrb	r3, [r3, #1]
    5bce:	e004      	b.n	5bda <usb_d_ctrl_trans_done+0x62>
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	785b      	ldrb	r3, [r3, #1]
    5bd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5bd8:	b2db      	uxtb	r3, r3
    5bda:	2101      	movs	r1, #1
    5bdc:	4618      	mov	r0, r3
    5bde:	4b15      	ldr	r3, [pc, #84]	; (5c34 <usb_d_ctrl_trans_done+0xbc>)
    5be0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    5be2:	e022      	b.n	5c2a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	2204      	movs	r2, #4
    5be8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	7858      	ldrb	r0, [r3, #1]
    5bee:	7bbb      	ldrb	r3, [r7, #14]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	bf14      	ite	ne
    5bf4:	2301      	movne	r3, #1
    5bf6:	2300      	moveq	r3, #0
    5bf8:	b2db      	uxtb	r3, r3
    5bfa:	f083 0301 	eor.w	r3, r3, #1
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	f003 0301 	and.w	r3, r3, #1
    5c04:	b2d9      	uxtb	r1, r3
    5c06:	2301      	movs	r3, #1
    5c08:	9300      	str	r3, [sp, #0]
    5c0a:	2300      	movs	r3, #0
    5c0c:	2200      	movs	r2, #0
    5c0e:	4c0a      	ldr	r4, [pc, #40]	; (5c38 <usb_d_ctrl_trans_done+0xc0>)
    5c10:	47a0      	blx	r4
}
    5c12:	e00a      	b.n	5c2a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	69db      	ldr	r3, [r3, #28]
    5c18:	687a      	ldr	r2, [r7, #4]
    5c1a:	7850      	ldrb	r0, [r2, #1]
    5c1c:	687a      	ldr	r2, [r7, #4]
    5c1e:	320c      	adds	r2, #12
    5c20:	2100      	movs	r1, #0
    5c22:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	2202      	movs	r2, #2
    5c28:	709a      	strb	r2, [r3, #2]
}
    5c2a:	bf00      	nop
    5c2c:	3714      	adds	r7, #20
    5c2e:	46bd      	mov	sp, r7
    5c30:	bd90      	pop	{r4, r7, pc}
    5c32:	bf00      	nop
    5c34:	0000d9a1 	.word	0x0000d9a1
    5c38:	000059f1 	.word	0x000059f1

00005c3c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b086      	sub	sp, #24
    5c40:	af00      	add	r7, sp, #0
    5c42:	4603      	mov	r3, r0
    5c44:	60b9      	str	r1, [r7, #8]
    5c46:	607a      	str	r2, [r7, #4]
    5c48:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5c4a:	7bfb      	ldrb	r3, [r7, #15]
    5c4c:	4618      	mov	r0, r3
    5c4e:	4b2f      	ldr	r3, [pc, #188]	; (5d0c <_usb_d_cb_trans_done+0xd0>)
    5c50:	4798      	blx	r3
    5c52:	4603      	mov	r3, r0
    5c54:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5c5a:	015b      	lsls	r3, r3, #5
    5c5c:	4a2c      	ldr	r2, [pc, #176]	; (5d10 <_usb_d_cb_trans_done+0xd4>)
    5c5e:	4413      	add	r3, r2
    5c60:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	2b00      	cmp	r3, #0
    5c66:	d10e      	bne.n	5c86 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5c68:	693b      	ldr	r3, [r7, #16]
    5c6a:	2200      	movs	r2, #0
    5c6c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c6e:	693b      	ldr	r3, [r7, #16]
    5c70:	781b      	ldrb	r3, [r3, #0]
    5c72:	2b00      	cmp	r3, #0
    5c74:	d103      	bne.n	5c7e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    5c76:	6938      	ldr	r0, [r7, #16]
    5c78:	4b26      	ldr	r3, [pc, #152]	; (5d14 <_usb_d_cb_trans_done+0xd8>)
    5c7a:	4798      	blx	r3
			return;
    5c7c:	e043      	b.n	5d06 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5c7e:	693b      	ldr	r3, [r7, #16]
    5c80:	2201      	movs	r2, #1
    5c82:	709a      	strb	r2, [r3, #2]
    5c84:	e038      	b.n	5cf8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    5c86:	68bb      	ldr	r3, [r7, #8]
    5c88:	2b01      	cmp	r3, #1
    5c8a:	d113      	bne.n	5cb4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5c8c:	693b      	ldr	r3, [r7, #16]
    5c8e:	2202      	movs	r2, #2
    5c90:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c92:	693b      	ldr	r3, [r7, #16]
    5c94:	781b      	ldrb	r3, [r3, #0]
    5c96:	2b00      	cmp	r3, #0
    5c98:	d108      	bne.n	5cac <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5c9a:	693b      	ldr	r3, [r7, #16]
    5c9c:	2202      	movs	r2, #2
    5c9e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5ca0:	7bfb      	ldrb	r3, [r7, #15]
    5ca2:	2100      	movs	r1, #0
    5ca4:	4618      	mov	r0, r3
    5ca6:	4b1c      	ldr	r3, [pc, #112]	; (5d18 <_usb_d_cb_trans_done+0xdc>)
    5ca8:	4798      	blx	r3
    5caa:	e025      	b.n	5cf8 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5cac:	693b      	ldr	r3, [r7, #16]
    5cae:	2205      	movs	r2, #5
    5cb0:	709a      	strb	r2, [r3, #2]
    5cb2:	e021      	b.n	5cf8 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    5cb4:	68bb      	ldr	r3, [r7, #8]
    5cb6:	2b02      	cmp	r3, #2
    5cb8:	d10e      	bne.n	5cd8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5cba:	693b      	ldr	r3, [r7, #16]
    5cbc:	2204      	movs	r2, #4
    5cbe:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5cc0:	693b      	ldr	r3, [r7, #16]
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d103      	bne.n	5cd0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5cc8:	693b      	ldr	r3, [r7, #16]
    5cca:	2202      	movs	r2, #2
    5ccc:	709a      	strb	r2, [r3, #2]
			return;
    5cce:	e01a      	b.n	5d06 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5cd0:	693b      	ldr	r3, [r7, #16]
    5cd2:	2201      	movs	r2, #1
    5cd4:	709a      	strb	r2, [r3, #2]
    5cd6:	e00f      	b.n	5cf8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    5cd8:	68bb      	ldr	r3, [r7, #8]
    5cda:	2b03      	cmp	r3, #3
    5cdc:	d106      	bne.n	5cec <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5cde:	693b      	ldr	r3, [r7, #16]
    5ce0:	2200      	movs	r2, #0
    5ce2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5ce4:	693b      	ldr	r3, [r7, #16]
    5ce6:	2205      	movs	r2, #5
    5ce8:	70da      	strb	r2, [r3, #3]
    5cea:	e005      	b.n	5cf8 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5cec:	693b      	ldr	r3, [r7, #16]
    5cee:	2206      	movs	r2, #6
    5cf0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5cf2:	693b      	ldr	r3, [r7, #16]
    5cf4:	2206      	movs	r2, #6
    5cf6:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5cf8:	693b      	ldr	r3, [r7, #16]
    5cfa:	69db      	ldr	r3, [r3, #28]
    5cfc:	693a      	ldr	r2, [r7, #16]
    5cfe:	78d1      	ldrb	r1, [r2, #3]
    5d00:	687a      	ldr	r2, [r7, #4]
    5d02:	7bf8      	ldrb	r0, [r7, #15]
    5d04:	4798      	blx	r3
}
    5d06:	3718      	adds	r7, #24
    5d08:	46bd      	mov	sp, r7
    5d0a:	bd80      	pop	{r7, pc}
    5d0c:	00005971 	.word	0x00005971
    5d10:	200032dc 	.word	0x200032dc
    5d14:	00005b79 	.word	0x00005b79
    5d18:	0000d9a1 	.word	0x0000d9a1

00005d1c <usb_d_init>:

int32_t usb_d_init(void)
{
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b082      	sub	sp, #8
    5d20:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    5d22:	4b21      	ldr	r3, [pc, #132]	; (5da8 <usb_d_init+0x8c>)
    5d24:	4798      	blx	r3
    5d26:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    5d28:	683b      	ldr	r3, [r7, #0]
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	da01      	bge.n	5d32 <usb_d_init+0x16>
		return rc;
    5d2e:	683b      	ldr	r3, [r7, #0]
    5d30:	e036      	b.n	5da0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5d32:	2280      	movs	r2, #128	; 0x80
    5d34:	2100      	movs	r1, #0
    5d36:	481d      	ldr	r0, [pc, #116]	; (5dac <usb_d_init+0x90>)
    5d38:	4b1d      	ldr	r3, [pc, #116]	; (5db0 <usb_d_init+0x94>)
    5d3a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5d3c:	2300      	movs	r3, #0
    5d3e:	71fb      	strb	r3, [r7, #7]
    5d40:	e01e      	b.n	5d80 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5d42:	79fb      	ldrb	r3, [r7, #7]
    5d44:	4a19      	ldr	r2, [pc, #100]	; (5dac <usb_d_init+0x90>)
    5d46:	015b      	lsls	r3, r3, #5
    5d48:	4413      	add	r3, r2
    5d4a:	3301      	adds	r3, #1
    5d4c:	22ff      	movs	r2, #255	; 0xff
    5d4e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5d50:	79fb      	ldrb	r3, [r7, #7]
    5d52:	4a16      	ldr	r2, [pc, #88]	; (5dac <usb_d_init+0x90>)
    5d54:	015b      	lsls	r3, r3, #5
    5d56:	4413      	add	r3, r2
    5d58:	3314      	adds	r3, #20
    5d5a:	4a16      	ldr	r2, [pc, #88]	; (5db4 <usb_d_init+0x98>)
    5d5c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5d5e:	79fb      	ldrb	r3, [r7, #7]
    5d60:	4a12      	ldr	r2, [pc, #72]	; (5dac <usb_d_init+0x90>)
    5d62:	015b      	lsls	r3, r3, #5
    5d64:	4413      	add	r3, r2
    5d66:	3318      	adds	r3, #24
    5d68:	4a12      	ldr	r2, [pc, #72]	; (5db4 <usb_d_init+0x98>)
    5d6a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5d6c:	79fb      	ldrb	r3, [r7, #7]
    5d6e:	4a0f      	ldr	r2, [pc, #60]	; (5dac <usb_d_init+0x90>)
    5d70:	015b      	lsls	r3, r3, #5
    5d72:	4413      	add	r3, r2
    5d74:	331c      	adds	r3, #28
    5d76:	4a0f      	ldr	r2, [pc, #60]	; (5db4 <usb_d_init+0x98>)
    5d78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5d7a:	79fb      	ldrb	r3, [r7, #7]
    5d7c:	3301      	adds	r3, #1
    5d7e:	71fb      	strb	r3, [r7, #7]
    5d80:	79fb      	ldrb	r3, [r7, #7]
    5d82:	2b03      	cmp	r3, #3
    5d84:	d9dd      	bls.n	5d42 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5d86:	490c      	ldr	r1, [pc, #48]	; (5db8 <usb_d_init+0x9c>)
    5d88:	2000      	movs	r0, #0
    5d8a:	4b0c      	ldr	r3, [pc, #48]	; (5dbc <usb_d_init+0xa0>)
    5d8c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5d8e:	490c      	ldr	r1, [pc, #48]	; (5dc0 <usb_d_init+0xa4>)
    5d90:	2001      	movs	r0, #1
    5d92:	4b0a      	ldr	r3, [pc, #40]	; (5dbc <usb_d_init+0xa0>)
    5d94:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5d96:	490b      	ldr	r1, [pc, #44]	; (5dc4 <usb_d_init+0xa8>)
    5d98:	2002      	movs	r0, #2
    5d9a:	4b08      	ldr	r3, [pc, #32]	; (5dbc <usb_d_init+0xa0>)
    5d9c:	4798      	blx	r3
	return ERR_NONE;
    5d9e:	2300      	movs	r3, #0
}
    5da0:	4618      	mov	r0, r3
    5da2:	3708      	adds	r7, #8
    5da4:	46bd      	mov	sp, r7
    5da6:	bd80      	pop	{r7, pc}
    5da8:	0000d1e9 	.word	0x0000d1e9
    5dac:	200032dc 	.word	0x200032dc
    5db0:	00016869 	.word	0x00016869
    5db4:	00005a45 	.word	0x00005a45
    5db8:	00005a61 	.word	0x00005a61
    5dbc:	0000de31 	.word	0x0000de31
    5dc0:	00005b29 	.word	0x00005b29
    5dc4:	00005c3d 	.word	0x00005c3d

00005dc8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b082      	sub	sp, #8
    5dcc:	af00      	add	r7, sp, #0
    5dce:	4603      	mov	r3, r0
    5dd0:	6039      	str	r1, [r7, #0]
    5dd2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5dd4:	79fb      	ldrb	r3, [r7, #7]
    5dd6:	6839      	ldr	r1, [r7, #0]
    5dd8:	4618      	mov	r0, r3
    5dda:	4b03      	ldr	r3, [pc, #12]	; (5de8 <usb_d_register_callback+0x20>)
    5ddc:	4798      	blx	r3
}
    5dde:	bf00      	nop
    5de0:	3708      	adds	r7, #8
    5de2:	46bd      	mov	sp, r7
    5de4:	bd80      	pop	{r7, pc}
    5de6:	bf00      	nop
    5de8:	0000dde9 	.word	0x0000dde9

00005dec <usb_d_enable>:

int32_t usb_d_enable(void)
{
    5dec:	b580      	push	{r7, lr}
    5dee:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5df0:	4b02      	ldr	r3, [pc, #8]	; (5dfc <usb_d_enable+0x10>)
    5df2:	4798      	blx	r3
    5df4:	4603      	mov	r3, r0
}
    5df6:	4618      	mov	r0, r3
    5df8:	bd80      	pop	{r7, pc}
    5dfa:	bf00      	nop
    5dfc:	0000d2d9 	.word	0x0000d2d9

00005e00 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5e00:	b580      	push	{r7, lr}
    5e02:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5e04:	4b01      	ldr	r3, [pc, #4]	; (5e0c <usb_d_attach+0xc>)
    5e06:	4798      	blx	r3
}
    5e08:	bf00      	nop
    5e0a:	bd80      	pop	{r7, pc}
    5e0c:	0000d35d 	.word	0x0000d35d

00005e10 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b082      	sub	sp, #8
    5e14:	af00      	add	r7, sp, #0
    5e16:	4603      	mov	r3, r0
    5e18:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    5e1a:	79fb      	ldrb	r3, [r7, #7]
    5e1c:	4618      	mov	r0, r3
    5e1e:	4b03      	ldr	r3, [pc, #12]	; (5e2c <usb_d_set_address+0x1c>)
    5e20:	4798      	blx	r3
}
    5e22:	bf00      	nop
    5e24:	3708      	adds	r7, #8
    5e26:	46bd      	mov	sp, r7
    5e28:	bd80      	pop	{r7, pc}
    5e2a:	bf00      	nop
    5e2c:	0000d371 	.word	0x0000d371

00005e30 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b082      	sub	sp, #8
    5e34:	af00      	add	r7, sp, #0
    5e36:	4603      	mov	r3, r0
    5e38:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5e3a:	79fb      	ldrb	r3, [r7, #7]
    5e3c:	b29b      	uxth	r3, r3
    5e3e:	461a      	mov	r2, r3
    5e40:	2100      	movs	r1, #0
    5e42:	2000      	movs	r0, #0
    5e44:	4b03      	ldr	r3, [pc, #12]	; (5e54 <usb_d_ep0_init+0x24>)
    5e46:	4798      	blx	r3
    5e48:	4603      	mov	r3, r0
}
    5e4a:	4618      	mov	r0, r3
    5e4c:	3708      	adds	r7, #8
    5e4e:	46bd      	mov	sp, r7
    5e50:	bd80      	pop	{r7, pc}
    5e52:	bf00      	nop
    5e54:	00005e59 	.word	0x00005e59

00005e58 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b086      	sub	sp, #24
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	4603      	mov	r3, r0
    5e60:	71fb      	strb	r3, [r7, #7]
    5e62:	460b      	mov	r3, r1
    5e64:	71bb      	strb	r3, [r7, #6]
    5e66:	4613      	mov	r3, r2
    5e68:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e6a:	79fb      	ldrb	r3, [r7, #7]
    5e6c:	4618      	mov	r0, r3
    5e6e:	4b1e      	ldr	r3, [pc, #120]	; (5ee8 <usb_d_ep_init+0x90>)
    5e70:	4798      	blx	r3
    5e72:	4603      	mov	r3, r0
    5e74:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e7a:	015b      	lsls	r3, r3, #5
    5e7c:	4a1b      	ldr	r2, [pc, #108]	; (5eec <usb_d_ep_init+0x94>)
    5e7e:	4413      	add	r3, r2
    5e80:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e86:	2b00      	cmp	r3, #0
    5e88:	db02      	blt.n	5e90 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    5e8a:	f06f 0313 	mvn.w	r3, #19
    5e8e:	e027      	b.n	5ee0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5e90:	20ff      	movs	r0, #255	; 0xff
    5e92:	4b15      	ldr	r3, [pc, #84]	; (5ee8 <usb_d_ep_init+0x90>)
    5e94:	4798      	blx	r3
    5e96:	4603      	mov	r3, r0
    5e98:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    5e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	da02      	bge.n	5ea8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5ea2:	f06f 0314 	mvn.w	r3, #20
    5ea6:	e01b      	b.n	5ee0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5eac:	015b      	lsls	r3, r3, #5
    5eae:	4a0f      	ldr	r2, [pc, #60]	; (5eec <usb_d_ep_init+0x94>)
    5eb0:	4413      	add	r3, r2
    5eb2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5eb4:	88ba      	ldrh	r2, [r7, #4]
    5eb6:	79b9      	ldrb	r1, [r7, #6]
    5eb8:	79fb      	ldrb	r3, [r7, #7]
    5eba:	4618      	mov	r0, r3
    5ebc:	4b0c      	ldr	r3, [pc, #48]	; (5ef0 <usb_d_ep_init+0x98>)
    5ebe:	4798      	blx	r3
    5ec0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5ec2:	68fb      	ldr	r3, [r7, #12]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	da01      	bge.n	5ecc <usb_d_ep_init+0x74>
		return rc;
    5ec8:	68fb      	ldr	r3, [r7, #12]
    5eca:	e009      	b.n	5ee0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    5ecc:	693b      	ldr	r3, [r7, #16]
    5ece:	79fa      	ldrb	r2, [r7, #7]
    5ed0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5ed2:	79bb      	ldrb	r3, [r7, #6]
    5ed4:	f003 0303 	and.w	r3, r3, #3
    5ed8:	b2da      	uxtb	r2, r3
    5eda:	693b      	ldr	r3, [r7, #16]
    5edc:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    5ede:	2300      	movs	r3, #0
}
    5ee0:	4618      	mov	r0, r3
    5ee2:	3718      	adds	r7, #24
    5ee4:	46bd      	mov	sp, r7
    5ee6:	bd80      	pop	{r7, pc}
    5ee8:	00005971 	.word	0x00005971
    5eec:	200032dc 	.word	0x200032dc
    5ef0:	0000d411 	.word	0x0000d411

00005ef4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5ef4:	b580      	push	{r7, lr}
    5ef6:	b084      	sub	sp, #16
    5ef8:	af00      	add	r7, sp, #0
    5efa:	4603      	mov	r3, r0
    5efc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5efe:	79fb      	ldrb	r3, [r7, #7]
    5f00:	4618      	mov	r0, r3
    5f02:	4b0d      	ldr	r3, [pc, #52]	; (5f38 <usb_d_ep_deinit+0x44>)
    5f04:	4798      	blx	r3
    5f06:	4603      	mov	r3, r0
    5f08:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f0e:	015b      	lsls	r3, r3, #5
    5f10:	4a0a      	ldr	r2, [pc, #40]	; (5f3c <usb_d_ep_deinit+0x48>)
    5f12:	4413      	add	r3, r2
    5f14:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	db07      	blt.n	5f2e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5f1e:	79fb      	ldrb	r3, [r7, #7]
    5f20:	4618      	mov	r0, r3
    5f22:	4b07      	ldr	r3, [pc, #28]	; (5f40 <usb_d_ep_deinit+0x4c>)
    5f24:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5f26:	68bb      	ldr	r3, [r7, #8]
    5f28:	22ff      	movs	r2, #255	; 0xff
    5f2a:	705a      	strb	r2, [r3, #1]
    5f2c:	e000      	b.n	5f30 <usb_d_ep_deinit+0x3c>
		return;
    5f2e:	bf00      	nop
}
    5f30:	3710      	adds	r7, #16
    5f32:	46bd      	mov	sp, r7
    5f34:	bd80      	pop	{r7, pc}
    5f36:	bf00      	nop
    5f38:	00005971 	.word	0x00005971
    5f3c:	200032dc 	.word	0x200032dc
    5f40:	0000d545 	.word	0x0000d545

00005f44 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5f44:	b580      	push	{r7, lr}
    5f46:	b086      	sub	sp, #24
    5f48:	af00      	add	r7, sp, #0
    5f4a:	4603      	mov	r3, r0
    5f4c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5f4e:	79fb      	ldrb	r3, [r7, #7]
    5f50:	4618      	mov	r0, r3
    5f52:	4b15      	ldr	r3, [pc, #84]	; (5fa8 <usb_d_ep_enable+0x64>)
    5f54:	4798      	blx	r3
    5f56:	4603      	mov	r3, r0
    5f58:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5f5e:	015b      	lsls	r3, r3, #5
    5f60:	4a12      	ldr	r2, [pc, #72]	; (5fac <usb_d_ep_enable+0x68>)
    5f62:	4413      	add	r3, r2
    5f64:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	da02      	bge.n	5f74 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    5f6e:	f06f 0311 	mvn.w	r3, #17
    5f72:	e014      	b.n	5f9e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5f74:	693b      	ldr	r3, [r7, #16]
    5f76:	781b      	ldrb	r3, [r3, #0]
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d101      	bne.n	5f80 <usb_d_ep_enable+0x3c>
    5f7c:	2202      	movs	r2, #2
    5f7e:	e000      	b.n	5f82 <usb_d_ep_enable+0x3e>
    5f80:	2201      	movs	r2, #1
    5f82:	693b      	ldr	r3, [r7, #16]
    5f84:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5f86:	79fb      	ldrb	r3, [r7, #7]
    5f88:	4618      	mov	r0, r3
    5f8a:	4b09      	ldr	r3, [pc, #36]	; (5fb0 <usb_d_ep_enable+0x6c>)
    5f8c:	4798      	blx	r3
    5f8e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5f90:	68fb      	ldr	r3, [r7, #12]
    5f92:	2b00      	cmp	r3, #0
    5f94:	da02      	bge.n	5f9c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5f96:	693b      	ldr	r3, [r7, #16]
    5f98:	2200      	movs	r2, #0
    5f9a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    5f9c:	68fb      	ldr	r3, [r7, #12]
}
    5f9e:	4618      	mov	r0, r3
    5fa0:	3718      	adds	r7, #24
    5fa2:	46bd      	mov	sp, r7
    5fa4:	bd80      	pop	{r7, pc}
    5fa6:	bf00      	nop
    5fa8:	00005971 	.word	0x00005971
    5fac:	200032dc 	.word	0x200032dc
    5fb0:	0000d629 	.word	0x0000d629

00005fb4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5fb4:	b590      	push	{r4, r7, lr}
    5fb6:	b08d      	sub	sp, #52	; 0x34
    5fb8:	af02      	add	r7, sp, #8
    5fba:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	7a1b      	ldrb	r3, [r3, #8]
    5fc0:	4618      	mov	r0, r3
    5fc2:	4b51      	ldr	r3, [pc, #324]	; (6108 <usb_d_ep_transfer+0x154>)
    5fc4:	4798      	blx	r3
    5fc6:	4603      	mov	r3, r0
    5fc8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    5fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5fce:	015b      	lsls	r3, r3, #5
    5fd0:	4a4e      	ldr	r2, [pc, #312]	; (610c <usb_d_ep_transfer+0x158>)
    5fd2:	4413      	add	r3, r2
    5fd4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	7a1b      	ldrb	r3, [r3, #8]
    5fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5fde:	2b00      	cmp	r3, #0
    5fe0:	bf14      	ite	ne
    5fe2:	2301      	movne	r3, #1
    5fe4:	2300      	moveq	r3, #0
    5fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	7a5b      	ldrb	r3, [r3, #9]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	bf14      	ite	ne
    5ff2:	2301      	movne	r3, #1
    5ff4:	2300      	moveq	r3, #0
    5ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	685b      	ldr	r3, [r3, #4]
    5ffe:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    6000:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6004:	2b00      	cmp	r3, #0
    6006:	da02      	bge.n	600e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    6008:	f06f 0311 	mvn.w	r3, #17
    600c:	e077      	b.n	60fe <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    600e:	f107 0308 	add.w	r3, r7, #8
    6012:	4618      	mov	r0, r3
    6014:	4b3e      	ldr	r3, [pc, #248]	; (6110 <usb_d_ep_transfer+0x15c>)
    6016:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6018:	69bb      	ldr	r3, [r7, #24]
    601a:	789b      	ldrb	r3, [r3, #2]
    601c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    601e:	7bfb      	ldrb	r3, [r7, #15]
    6020:	b2db      	uxtb	r3, r3
    6022:	2b01      	cmp	r3, #1
    6024:	d10c      	bne.n	6040 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    6026:	69bb      	ldr	r3, [r7, #24]
    6028:	2203      	movs	r2, #3
    602a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    602c:	f107 0308 	add.w	r3, r7, #8
    6030:	4618      	mov	r0, r3
    6032:	4b38      	ldr	r3, [pc, #224]	; (6114 <usb_d_ep_transfer+0x160>)
    6034:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6036:	69bb      	ldr	r3, [r7, #24]
    6038:	781b      	ldrb	r3, [r3, #0]
    603a:	2b00      	cmp	r3, #0
    603c:	d151      	bne.n	60e2 <usb_d_ep_transfer+0x12e>
    603e:	e017      	b.n	6070 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    6040:	f107 0308 	add.w	r3, r7, #8
    6044:	4618      	mov	r0, r3
    6046:	4b33      	ldr	r3, [pc, #204]	; (6114 <usb_d_ep_transfer+0x160>)
    6048:	4798      	blx	r3
		switch (state) {
    604a:	7bfb      	ldrb	r3, [r7, #15]
    604c:	b2db      	uxtb	r3, r3
    604e:	2b05      	cmp	r3, #5
    6050:	d004      	beq.n	605c <usb_d_ep_transfer+0xa8>
    6052:	2b06      	cmp	r3, #6
    6054:	d004      	beq.n	6060 <usb_d_ep_transfer+0xac>
    6056:	2b00      	cmp	r3, #0
    6058:	d005      	beq.n	6066 <usb_d_ep_transfer+0xb2>
    605a:	e007      	b.n	606c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    605c:	2302      	movs	r3, #2
    605e:	e04e      	b.n	60fe <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    6060:	f06f 030f 	mvn.w	r3, #15
    6064:	e04b      	b.n	60fe <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    6066:	f06f 0312 	mvn.w	r3, #18
    606a:	e048      	b.n	60fe <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    606c:	2301      	movs	r3, #1
    606e:	e046      	b.n	60fe <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    6070:	69bb      	ldr	r3, [r7, #24]
    6072:	7c9b      	ldrb	r3, [r3, #18]
    6074:	b29a      	uxth	r2, r3
    6076:	69bb      	ldr	r3, [r7, #24]
    6078:	7cdb      	ldrb	r3, [r3, #19]
    607a:	b29b      	uxth	r3, r3
    607c:	021b      	lsls	r3, r3, #8
    607e:	b29b      	uxth	r3, r3
    6080:	4413      	add	r3, r2
    6082:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6084:	8afb      	ldrh	r3, [r7, #22]
    6086:	2b00      	cmp	r3, #0
    6088:	d10b      	bne.n	60a2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    608a:	2301      	movs	r3, #1
    608c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    6090:	2300      	movs	r3, #0
    6092:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    6094:	2301      	movs	r3, #1
    6096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    609a:	69bb      	ldr	r3, [r7, #24]
    609c:	2204      	movs	r2, #4
    609e:	709a      	strb	r2, [r3, #2]
    60a0:	e01f      	b.n	60e2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    60a2:	69bb      	ldr	r3, [r7, #24]
    60a4:	7b1b      	ldrb	r3, [r3, #12]
    60a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    60aa:	2b00      	cmp	r3, #0
    60ac:	bf14      	ite	ne
    60ae:	2301      	movne	r3, #1
    60b0:	2300      	moveq	r3, #0
    60b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    60b6:	8afa      	ldrh	r2, [r7, #22]
    60b8:	6a3b      	ldr	r3, [r7, #32]
    60ba:	429a      	cmp	r2, r3
    60bc:	d201      	bcs.n	60c2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    60be:	8afb      	ldrh	r3, [r7, #22]
    60c0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    60c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    60c6:	2b00      	cmp	r3, #0
    60c8:	d008      	beq.n	60dc <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    60ca:	8afa      	ldrh	r2, [r7, #22]
    60cc:	6a3b      	ldr	r3, [r7, #32]
    60ce:	429a      	cmp	r2, r3
    60d0:	bf8c      	ite	hi
    60d2:	2301      	movhi	r3, #1
    60d4:	2300      	movls	r3, #0
    60d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    60da:	e002      	b.n	60e2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    60dc:	2300      	movs	r3, #0
    60de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    60e2:	687b      	ldr	r3, [r7, #4]
    60e4:	7a18      	ldrb	r0, [r3, #8]
    60e6:	687b      	ldr	r3, [r7, #4]
    60e8:	681a      	ldr	r2, [r3, #0]
    60ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    60ee:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    60f2:	9300      	str	r3, [sp, #0]
    60f4:	6a3b      	ldr	r3, [r7, #32]
    60f6:	4c08      	ldr	r4, [pc, #32]	; (6118 <usb_d_ep_transfer+0x164>)
    60f8:	47a0      	blx	r4
    60fa:	6138      	str	r0, [r7, #16]
	return rc;
    60fc:	693b      	ldr	r3, [r7, #16]
}
    60fe:	4618      	mov	r0, r3
    6100:	372c      	adds	r7, #44	; 0x2c
    6102:	46bd      	mov	sp, r7
    6104:	bd90      	pop	{r4, r7, pc}
    6106:	bf00      	nop
    6108:	00005971 	.word	0x00005971
    610c:	200032dc 	.word	0x200032dc
    6110:	0000e59d 	.word	0x0000e59d
    6114:	0000e5c3 	.word	0x0000e5c3
    6118:	000059f1 	.word	0x000059f1

0000611c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    611c:	b580      	push	{r7, lr}
    611e:	b084      	sub	sp, #16
    6120:	af00      	add	r7, sp, #0
    6122:	4603      	mov	r3, r0
    6124:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6126:	79fb      	ldrb	r3, [r7, #7]
    6128:	4618      	mov	r0, r3
    612a:	4b0e      	ldr	r3, [pc, #56]	; (6164 <usb_d_ep_abort+0x48>)
    612c:	4798      	blx	r3
    612e:	4603      	mov	r3, r0
    6130:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6132:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6136:	015b      	lsls	r3, r3, #5
    6138:	4a0b      	ldr	r2, [pc, #44]	; (6168 <usb_d_ep_abort+0x4c>)
    613a:	4413      	add	r3, r2
    613c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6142:	2b00      	cmp	r3, #0
    6144:	db0a      	blt.n	615c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    6146:	79fb      	ldrb	r3, [r7, #7]
    6148:	4618      	mov	r0, r3
    614a:	4b08      	ldr	r3, [pc, #32]	; (616c <usb_d_ep_abort+0x50>)
    614c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    614e:	68bb      	ldr	r3, [r7, #8]
    6150:	2201      	movs	r2, #1
    6152:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    6154:	68bb      	ldr	r3, [r7, #8]
    6156:	2204      	movs	r2, #4
    6158:	70da      	strb	r2, [r3, #3]
    615a:	e000      	b.n	615e <usb_d_ep_abort+0x42>
		return;
    615c:	bf00      	nop
}
    615e:	3710      	adds	r7, #16
    6160:	46bd      	mov	sp, r7
    6162:	bd80      	pop	{r7, pc}
    6164:	00005971 	.word	0x00005971
    6168:	200032dc 	.word	0x200032dc
    616c:	0000dd95 	.word	0x0000dd95

00006170 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    6170:	b580      	push	{r7, lr}
    6172:	b086      	sub	sp, #24
    6174:	af00      	add	r7, sp, #0
    6176:	4603      	mov	r3, r0
    6178:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    617a:	79fb      	ldrb	r3, [r7, #7]
    617c:	4618      	mov	r0, r3
    617e:	4b1a      	ldr	r3, [pc, #104]	; (61e8 <_usb_d_ep_halt_clr+0x78>)
    6180:	4798      	blx	r3
    6182:	4603      	mov	r3, r0
    6184:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6186:	f997 3017 	ldrsb.w	r3, [r7, #23]
    618a:	015b      	lsls	r3, r3, #5
    618c:	4a17      	ldr	r2, [pc, #92]	; (61ec <_usb_d_ep_halt_clr+0x7c>)
    618e:	4413      	add	r3, r2
    6190:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    6192:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6196:	2b00      	cmp	r3, #0
    6198:	da02      	bge.n	61a0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    619a:	f06f 0311 	mvn.w	r3, #17
    619e:	e01f      	b.n	61e0 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    61a0:	79fb      	ldrb	r3, [r7, #7]
    61a2:	2102      	movs	r1, #2
    61a4:	4618      	mov	r0, r3
    61a6:	4b12      	ldr	r3, [pc, #72]	; (61f0 <_usb_d_ep_halt_clr+0x80>)
    61a8:	4798      	blx	r3
    61aa:	4603      	mov	r3, r0
    61ac:	2b00      	cmp	r3, #0
    61ae:	d016      	beq.n	61de <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    61b0:	79fb      	ldrb	r3, [r7, #7]
    61b2:	2100      	movs	r1, #0
    61b4:	4618      	mov	r0, r3
    61b6:	4b0e      	ldr	r3, [pc, #56]	; (61f0 <_usb_d_ep_halt_clr+0x80>)
    61b8:	4798      	blx	r3
    61ba:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    61bc:	68fb      	ldr	r3, [r7, #12]
    61be:	2b00      	cmp	r3, #0
    61c0:	da01      	bge.n	61c6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    61c2:	68fb      	ldr	r3, [r7, #12]
    61c4:	e00c      	b.n	61e0 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    61c6:	693b      	ldr	r3, [r7, #16]
    61c8:	2201      	movs	r2, #1
    61ca:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    61cc:	693b      	ldr	r3, [r7, #16]
    61ce:	2203      	movs	r2, #3
    61d0:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    61d2:	693b      	ldr	r3, [r7, #16]
    61d4:	69db      	ldr	r3, [r3, #28]
    61d6:	79f8      	ldrb	r0, [r7, #7]
    61d8:	2200      	movs	r2, #0
    61da:	2103      	movs	r1, #3
    61dc:	4798      	blx	r3
	}
	return ERR_NONE;
    61de:	2300      	movs	r3, #0
}
    61e0:	4618      	mov	r0, r3
    61e2:	3718      	adds	r7, #24
    61e4:	46bd      	mov	sp, r7
    61e6:	bd80      	pop	{r7, pc}
    61e8:	00005971 	.word	0x00005971
    61ec:	200032dc 	.word	0x200032dc
    61f0:	0000d9a1 	.word	0x0000d9a1

000061f4 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	b082      	sub	sp, #8
    61f8:	af00      	add	r7, sp, #0
    61fa:	4603      	mov	r3, r0
    61fc:	460a      	mov	r2, r1
    61fe:	71fb      	strb	r3, [r7, #7]
    6200:	4613      	mov	r3, r2
    6202:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    6204:	79bb      	ldrb	r3, [r7, #6]
    6206:	2b00      	cmp	r3, #0
    6208:	d105      	bne.n	6216 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    620a:	79fb      	ldrb	r3, [r7, #7]
    620c:	4618      	mov	r0, r3
    620e:	4b0c      	ldr	r3, [pc, #48]	; (6240 <usb_d_ep_halt+0x4c>)
    6210:	4798      	blx	r3
    6212:	4603      	mov	r3, r0
    6214:	e00f      	b.n	6236 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    6216:	79bb      	ldrb	r3, [r7, #6]
    6218:	2b01      	cmp	r3, #1
    621a:	d106      	bne.n	622a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    621c:	79fb      	ldrb	r3, [r7, #7]
    621e:	2101      	movs	r1, #1
    6220:	4618      	mov	r0, r3
    6222:	4b08      	ldr	r3, [pc, #32]	; (6244 <usb_d_ep_halt+0x50>)
    6224:	4798      	blx	r3
    6226:	4603      	mov	r3, r0
    6228:	e005      	b.n	6236 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    622a:	79fb      	ldrb	r3, [r7, #7]
    622c:	2102      	movs	r1, #2
    622e:	4618      	mov	r0, r3
    6230:	4b04      	ldr	r3, [pc, #16]	; (6244 <usb_d_ep_halt+0x50>)
    6232:	4798      	blx	r3
    6234:	4603      	mov	r3, r0
	}
}
    6236:	4618      	mov	r0, r3
    6238:	3708      	adds	r7, #8
    623a:	46bd      	mov	sp, r7
    623c:	bd80      	pop	{r7, pc}
    623e:	bf00      	nop
    6240:	00006171 	.word	0x00006171
    6244:	0000d9a1 	.word	0x0000d9a1

00006248 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    6248:	b580      	push	{r7, lr}
    624a:	b086      	sub	sp, #24
    624c:	af00      	add	r7, sp, #0
    624e:	4603      	mov	r3, r0
    6250:	603a      	str	r2, [r7, #0]
    6252:	71fb      	strb	r3, [r7, #7]
    6254:	460b      	mov	r3, r1
    6256:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6258:	79fb      	ldrb	r3, [r7, #7]
    625a:	4618      	mov	r0, r3
    625c:	4b16      	ldr	r3, [pc, #88]	; (62b8 <usb_d_ep_register_callback+0x70>)
    625e:	4798      	blx	r3
    6260:	4603      	mov	r3, r0
    6262:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6264:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6268:	015b      	lsls	r3, r3, #5
    626a:	4a14      	ldr	r2, [pc, #80]	; (62bc <usb_d_ep_register_callback+0x74>)
    626c:	4413      	add	r3, r2
    626e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    6270:	683b      	ldr	r3, [r7, #0]
    6272:	2b00      	cmp	r3, #0
    6274:	d001      	beq.n	627a <usb_d_ep_register_callback+0x32>
    6276:	683b      	ldr	r3, [r7, #0]
    6278:	e000      	b.n	627c <usb_d_ep_register_callback+0x34>
    627a:	4b11      	ldr	r3, [pc, #68]	; (62c0 <usb_d_ep_register_callback+0x78>)
    627c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    627e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6282:	2b00      	cmp	r3, #0
    6284:	db13      	blt.n	62ae <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    6286:	79bb      	ldrb	r3, [r7, #6]
    6288:	2b01      	cmp	r3, #1
    628a:	d008      	beq.n	629e <usb_d_ep_register_callback+0x56>
    628c:	2b02      	cmp	r3, #2
    628e:	d00a      	beq.n	62a6 <usb_d_ep_register_callback+0x5e>
    6290:	2b00      	cmp	r3, #0
    6292:	d000      	beq.n	6296 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    6294:	e00c      	b.n	62b0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6296:	693b      	ldr	r3, [r7, #16]
    6298:	68fa      	ldr	r2, [r7, #12]
    629a:	615a      	str	r2, [r3, #20]
		break;
    629c:	e008      	b.n	62b0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    629e:	693b      	ldr	r3, [r7, #16]
    62a0:	68fa      	ldr	r2, [r7, #12]
    62a2:	619a      	str	r2, [r3, #24]
		break;
    62a4:	e004      	b.n	62b0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    62a6:	693b      	ldr	r3, [r7, #16]
    62a8:	68fa      	ldr	r2, [r7, #12]
    62aa:	61da      	str	r2, [r3, #28]
		break;
    62ac:	e000      	b.n	62b0 <usb_d_ep_register_callback+0x68>
		return;
    62ae:	bf00      	nop
	}
}
    62b0:	3718      	adds	r7, #24
    62b2:	46bd      	mov	sp, r7
    62b4:	bd80      	pop	{r7, pc}
    62b6:	bf00      	nop
    62b8:	00005971 	.word	0x00005971
    62bc:	200032dc 	.word	0x200032dc
    62c0:	00005a45 	.word	0x00005a45

000062c4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    62c4:	b480      	push	{r7}
    62c6:	b085      	sub	sp, #20
    62c8:	af00      	add	r7, sp, #0
    62ca:	4603      	mov	r3, r0
    62cc:	60b9      	str	r1, [r7, #8]
    62ce:	607a      	str	r2, [r7, #4]
    62d0:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    62d2:	7bfb      	ldrb	r3, [r7, #15]
    62d4:	f083 0301 	eor.w	r3, r3, #1
    62d8:	b2db      	uxtb	r3, r3
    62da:	2b00      	cmp	r3, #0
    62dc:	d000      	beq.n	62e0 <assert+0x1c>
		__asm("BKPT #0");
    62de:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    62e0:	bf00      	nop
    62e2:	3714      	adds	r7, #20
    62e4:	46bd      	mov	sp, r7
    62e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ea:	4770      	bx	lr

000062ec <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    62ec:	b480      	push	{r7}
    62ee:	b085      	sub	sp, #20
    62f0:	af00      	add	r7, sp, #0
    62f2:	6078      	str	r0, [r7, #4]
    62f4:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	681b      	ldr	r3, [r3, #0]
    62fa:	60fb      	str	r3, [r7, #12]
    62fc:	e008      	b.n	6310 <is_list_element+0x24>
		if (it == element) {
    62fe:	68fa      	ldr	r2, [r7, #12]
    6300:	683b      	ldr	r3, [r7, #0]
    6302:	429a      	cmp	r2, r3
    6304:	d101      	bne.n	630a <is_list_element+0x1e>
			return true;
    6306:	2301      	movs	r3, #1
    6308:	e006      	b.n	6318 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    630a:	68fb      	ldr	r3, [r7, #12]
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	60fb      	str	r3, [r7, #12]
    6310:	68fb      	ldr	r3, [r7, #12]
    6312:	2b00      	cmp	r3, #0
    6314:	d1f3      	bne.n	62fe <is_list_element+0x12>
		}
	}

	return false;
    6316:	2300      	movs	r3, #0
}
    6318:	4618      	mov	r0, r3
    631a:	3714      	adds	r7, #20
    631c:	46bd      	mov	sp, r7
    631e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6322:	4770      	bx	lr

00006324 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    6324:	b580      	push	{r7, lr}
    6326:	b082      	sub	sp, #8
    6328:	af00      	add	r7, sp, #0
    632a:	6078      	str	r0, [r7, #4]
    632c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    632e:	6839      	ldr	r1, [r7, #0]
    6330:	6878      	ldr	r0, [r7, #4]
    6332:	4b0f      	ldr	r3, [pc, #60]	; (6370 <list_insert_as_head+0x4c>)
    6334:	4798      	blx	r3
    6336:	4603      	mov	r3, r0
    6338:	2b00      	cmp	r3, #0
    633a:	bf14      	ite	ne
    633c:	2301      	movne	r3, #1
    633e:	2300      	moveq	r3, #0
    6340:	b2db      	uxtb	r3, r3
    6342:	f083 0301 	eor.w	r3, r3, #1
    6346:	b2db      	uxtb	r3, r3
    6348:	f003 0301 	and.w	r3, r3, #1
    634c:	b2db      	uxtb	r3, r3
    634e:	2239      	movs	r2, #57	; 0x39
    6350:	4908      	ldr	r1, [pc, #32]	; (6374 <list_insert_as_head+0x50>)
    6352:	4618      	mov	r0, r3
    6354:	4b08      	ldr	r3, [pc, #32]	; (6378 <list_insert_as_head+0x54>)
    6356:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	681a      	ldr	r2, [r3, #0]
    635c:	683b      	ldr	r3, [r7, #0]
    635e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	683a      	ldr	r2, [r7, #0]
    6364:	601a      	str	r2, [r3, #0]
}
    6366:	bf00      	nop
    6368:	3708      	adds	r7, #8
    636a:	46bd      	mov	sp, r7
    636c:	bd80      	pop	{r7, pc}
    636e:	bf00      	nop
    6370:	000062ed 	.word	0x000062ed
    6374:	0001abb0 	.word	0x0001abb0
    6378:	000062c5 	.word	0x000062c5

0000637c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    637c:	b480      	push	{r7}
    637e:	b083      	sub	sp, #12
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
    6384:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	681a      	ldr	r2, [r3, #0]
    638a:	683b      	ldr	r3, [r7, #0]
    638c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	683a      	ldr	r2, [r7, #0]
    6392:	601a      	str	r2, [r3, #0]
}
    6394:	bf00      	nop
    6396:	370c      	adds	r7, #12
    6398:	46bd      	mov	sp, r7
    639a:	f85d 7b04 	ldr.w	r7, [sp], #4
    639e:	4770      	bx	lr

000063a0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    63a0:	b580      	push	{r7, lr}
    63a2:	b084      	sub	sp, #16
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
    63a8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    63aa:	687b      	ldr	r3, [r7, #4]
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    63b0:	6839      	ldr	r1, [r7, #0]
    63b2:	6878      	ldr	r0, [r7, #4]
    63b4:	4b16      	ldr	r3, [pc, #88]	; (6410 <list_insert_at_end+0x70>)
    63b6:	4798      	blx	r3
    63b8:	4603      	mov	r3, r0
    63ba:	2b00      	cmp	r3, #0
    63bc:	bf14      	ite	ne
    63be:	2301      	movne	r3, #1
    63c0:	2300      	moveq	r3, #0
    63c2:	b2db      	uxtb	r3, r3
    63c4:	f083 0301 	eor.w	r3, r3, #1
    63c8:	b2db      	uxtb	r3, r3
    63ca:	f003 0301 	and.w	r3, r3, #1
    63ce:	b2db      	uxtb	r3, r3
    63d0:	224f      	movs	r2, #79	; 0x4f
    63d2:	4910      	ldr	r1, [pc, #64]	; (6414 <list_insert_at_end+0x74>)
    63d4:	4618      	mov	r0, r3
    63d6:	4b10      	ldr	r3, [pc, #64]	; (6418 <list_insert_at_end+0x78>)
    63d8:	4798      	blx	r3

	if (!list->head) {
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	681b      	ldr	r3, [r3, #0]
    63de:	2b00      	cmp	r3, #0
    63e0:	d109      	bne.n	63f6 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	683a      	ldr	r2, [r7, #0]
    63e6:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    63e8:	683b      	ldr	r3, [r7, #0]
    63ea:	2200      	movs	r2, #0
    63ec:	601a      	str	r2, [r3, #0]
		return;
    63ee:	e00c      	b.n	640a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    63f0:	68fb      	ldr	r3, [r7, #12]
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    63f6:	68fb      	ldr	r3, [r7, #12]
    63f8:	681b      	ldr	r3, [r3, #0]
    63fa:	2b00      	cmp	r3, #0
    63fc:	d1f8      	bne.n	63f0 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	683a      	ldr	r2, [r7, #0]
    6402:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6404:	683b      	ldr	r3, [r7, #0]
    6406:	2200      	movs	r2, #0
    6408:	601a      	str	r2, [r3, #0]
}
    640a:	3710      	adds	r7, #16
    640c:	46bd      	mov	sp, r7
    640e:	bd80      	pop	{r7, pc}
    6410:	000062ed 	.word	0x000062ed
    6414:	0001abb0 	.word	0x0001abb0
    6418:	000062c5 	.word	0x000062c5

0000641c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    641c:	b480      	push	{r7}
    641e:	b085      	sub	sp, #20
    6420:	af00      	add	r7, sp, #0
    6422:	6078      	str	r0, [r7, #4]
	if (list->head) {
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	681b      	ldr	r3, [r3, #0]
    6428:	2b00      	cmp	r3, #0
    642a:	d009      	beq.n	6440 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	681b      	ldr	r3, [r3, #0]
    6430:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	681b      	ldr	r3, [r3, #0]
    6436:	681a      	ldr	r2, [r3, #0]
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    643c:	68fb      	ldr	r3, [r7, #12]
    643e:	e000      	b.n	6442 <list_remove_head+0x26>
	}

	return NULL;
    6440:	2300      	movs	r3, #0
}
    6442:	4618      	mov	r0, r3
    6444:	3714      	adds	r7, #20
    6446:	46bd      	mov	sp, r7
    6448:	f85d 7b04 	ldr.w	r7, [sp], #4
    644c:	4770      	bx	lr

0000644e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    644e:	b480      	push	{r7}
    6450:	b085      	sub	sp, #20
    6452:	af00      	add	r7, sp, #0
    6454:	6078      	str	r0, [r7, #4]
    6456:	6039      	str	r1, [r7, #0]
	if (!element) {
    6458:	683b      	ldr	r3, [r7, #0]
    645a:	2b00      	cmp	r3, #0
    645c:	d101      	bne.n	6462 <list_delete_element+0x14>
		return false;
    645e:	2300      	movs	r3, #0
    6460:	e024      	b.n	64ac <list_delete_element+0x5e>
	}

	if (list->head == element) {
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	681a      	ldr	r2, [r3, #0]
    6466:	683b      	ldr	r3, [r7, #0]
    6468:	429a      	cmp	r2, r3
    646a:	d106      	bne.n	647a <list_delete_element+0x2c>
		list->head = list->head->next;
    646c:	687b      	ldr	r3, [r7, #4]
    646e:	681b      	ldr	r3, [r3, #0]
    6470:	681a      	ldr	r2, [r3, #0]
    6472:	687b      	ldr	r3, [r7, #4]
    6474:	601a      	str	r2, [r3, #0]
		return true;
    6476:	2301      	movs	r3, #1
    6478:	e018      	b.n	64ac <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	681b      	ldr	r3, [r3, #0]
    647e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    6480:	e002      	b.n	6488 <list_delete_element+0x3a>
			it = it->next;
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	681b      	ldr	r3, [r3, #0]
    6486:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	2b00      	cmp	r3, #0
    648c:	d004      	beq.n	6498 <list_delete_element+0x4a>
    648e:	68fb      	ldr	r3, [r7, #12]
    6490:	681a      	ldr	r2, [r3, #0]
    6492:	683b      	ldr	r3, [r7, #0]
    6494:	429a      	cmp	r2, r3
    6496:	d1f4      	bne.n	6482 <list_delete_element+0x34>
		}
		if (it) {
    6498:	68fb      	ldr	r3, [r7, #12]
    649a:	2b00      	cmp	r3, #0
    649c:	d005      	beq.n	64aa <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    649e:	683b      	ldr	r3, [r7, #0]
    64a0:	681a      	ldr	r2, [r3, #0]
    64a2:	68fb      	ldr	r3, [r7, #12]
    64a4:	601a      	str	r2, [r3, #0]
			return true;
    64a6:	2301      	movs	r3, #1
    64a8:	e000      	b.n	64ac <list_delete_element+0x5e>
		}
	}

	return false;
    64aa:	2300      	movs	r3, #0
}
    64ac:	4618      	mov	r0, r3
    64ae:	3714      	adds	r7, #20
    64b0:	46bd      	mov	sp, r7
    64b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    64b6:	4770      	bx	lr

000064b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    64b8:	b480      	push	{r7}
    64ba:	b083      	sub	sp, #12
    64bc:	af00      	add	r7, sp, #0
    64be:	4603      	mov	r3, r0
    64c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    64c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64c6:	2b00      	cmp	r3, #0
    64c8:	db0b      	blt.n	64e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64ca:	4909      	ldr	r1, [pc, #36]	; (64f0 <__NVIC_EnableIRQ+0x38>)
    64cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64d0:	095b      	lsrs	r3, r3, #5
    64d2:	88fa      	ldrh	r2, [r7, #6]
    64d4:	f002 021f 	and.w	r2, r2, #31
    64d8:	2001      	movs	r0, #1
    64da:	fa00 f202 	lsl.w	r2, r0, r2
    64de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    64e2:	bf00      	nop
    64e4:	370c      	adds	r7, #12
    64e6:	46bd      	mov	sp, r7
    64e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ec:	4770      	bx	lr
    64ee:	bf00      	nop
    64f0:	e000e100 	.word	0xe000e100

000064f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    64f4:	b480      	push	{r7}
    64f6:	b083      	sub	sp, #12
    64f8:	af00      	add	r7, sp, #0
    64fa:	4603      	mov	r3, r0
    64fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    64fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6502:	2b00      	cmp	r3, #0
    6504:	db10      	blt.n	6528 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6506:	490b      	ldr	r1, [pc, #44]	; (6534 <__NVIC_DisableIRQ+0x40>)
    6508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    650c:	095b      	lsrs	r3, r3, #5
    650e:	88fa      	ldrh	r2, [r7, #6]
    6510:	f002 021f 	and.w	r2, r2, #31
    6514:	2001      	movs	r0, #1
    6516:	fa00 f202 	lsl.w	r2, r0, r2
    651a:	3320      	adds	r3, #32
    651c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6524:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    6528:	bf00      	nop
    652a:	370c      	adds	r7, #12
    652c:	46bd      	mov	sp, r7
    652e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6532:	4770      	bx	lr
    6534:	e000e100 	.word	0xe000e100

00006538 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    6538:	b480      	push	{r7}
    653a:	b083      	sub	sp, #12
    653c:	af00      	add	r7, sp, #0
    653e:	4603      	mov	r3, r0
    6540:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6546:	2b00      	cmp	r3, #0
    6548:	db0c      	blt.n	6564 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    654a:	4909      	ldr	r1, [pc, #36]	; (6570 <__NVIC_ClearPendingIRQ+0x38>)
    654c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6550:	095b      	lsrs	r3, r3, #5
    6552:	88fa      	ldrh	r2, [r7, #6]
    6554:	f002 021f 	and.w	r2, r2, #31
    6558:	2001      	movs	r0, #1
    655a:	fa00 f202 	lsl.w	r2, r0, r2
    655e:	3360      	adds	r3, #96	; 0x60
    6560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6564:	bf00      	nop
    6566:	370c      	adds	r7, #12
    6568:	46bd      	mov	sp, r7
    656a:	f85d 7b04 	ldr.w	r7, [sp], #4
    656e:	4770      	bx	lr
    6570:	e000e100 	.word	0xe000e100

00006574 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6574:	b480      	push	{r7}
    6576:	b083      	sub	sp, #12
    6578:	af00      	add	r7, sp, #0
    657a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6580:	095b      	lsrs	r3, r3, #5
    6582:	f003 0301 	and.w	r3, r3, #1
    6586:	2b00      	cmp	r3, #0
    6588:	bf14      	ite	ne
    658a:	2301      	movne	r3, #1
    658c:	2300      	moveq	r3, #0
    658e:	b2db      	uxtb	r3, r3
}
    6590:	4618      	mov	r0, r3
    6592:	370c      	adds	r7, #12
    6594:	46bd      	mov	sp, r7
    6596:	f85d 7b04 	ldr.w	r7, [sp], #4
    659a:	4770      	bx	lr

0000659c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    659c:	b480      	push	{r7}
    659e:	b083      	sub	sp, #12
    65a0:	af00      	add	r7, sp, #0
    65a2:	6078      	str	r0, [r7, #4]
    65a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	683a      	ldr	r2, [r7, #0]
    65aa:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65ac:	bf00      	nop
    65ae:	370c      	adds	r7, #12
    65b0:	46bd      	mov	sp, r7
    65b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65b6:	4770      	bx	lr

000065b8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    65b8:	b480      	push	{r7}
    65ba:	b083      	sub	sp, #12
    65bc:	af00      	add	r7, sp, #0
    65be:	6078      	str	r0, [r7, #4]
    65c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    65c2:	687b      	ldr	r3, [r7, #4]
    65c4:	683a      	ldr	r2, [r7, #0]
    65c6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65c8:	bf00      	nop
    65ca:	370c      	adds	r7, #12
    65cc:	46bd      	mov	sp, r7
    65ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    65d2:	4770      	bx	lr

000065d4 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    65d4:	b480      	push	{r7}
    65d6:	b083      	sub	sp, #12
    65d8:	af00      	add	r7, sp, #0
    65da:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    65dc:	687b      	ldr	r3, [r7, #4]
    65de:	699b      	ldr	r3, [r3, #24]
    65e0:	f043 0201 	orr.w	r2, r3, #1
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65e8:	bf00      	nop
    65ea:	370c      	adds	r7, #12
    65ec:	46bd      	mov	sp, r7
    65ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    65f2:	4770      	bx	lr

000065f4 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    65f4:	b480      	push	{r7}
    65f6:	b085      	sub	sp, #20
    65f8:	af00      	add	r7, sp, #0
    65fa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	699b      	ldr	r3, [r3, #24]
    6600:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    6602:	68fb      	ldr	r3, [r7, #12]
    6604:	f003 0301 	and.w	r3, r3, #1
    6608:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    660a:	68fb      	ldr	r3, [r7, #12]
    660c:	2b00      	cmp	r3, #0
    660e:	bf14      	ite	ne
    6610:	2301      	movne	r3, #1
    6612:	2300      	moveq	r3, #0
    6614:	b2db      	uxtb	r3, r3
}
    6616:	4618      	mov	r0, r3
    6618:	3714      	adds	r7, #20
    661a:	46bd      	mov	sp, r7
    661c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6620:	4770      	bx	lr

00006622 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    6622:	b480      	push	{r7}
    6624:	b083      	sub	sp, #12
    6626:	af00      	add	r7, sp, #0
    6628:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    662a:	687b      	ldr	r3, [r7, #4]
    662c:	699b      	ldr	r3, [r3, #24]
    662e:	f023 0201 	bic.w	r2, r3, #1
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6636:	bf00      	nop
    6638:	370c      	adds	r7, #12
    663a:	46bd      	mov	sp, r7
    663c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6640:	4770      	bx	lr

00006642 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6642:	b480      	push	{r7}
    6644:	b083      	sub	sp, #12
    6646:	af00      	add	r7, sp, #0
    6648:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    664a:	687b      	ldr	r3, [r7, #4]
    664c:	699b      	ldr	r3, [r3, #24]
    664e:	f043 0202 	orr.w	r2, r3, #2
    6652:	687b      	ldr	r3, [r7, #4]
    6654:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6656:	bf00      	nop
    6658:	370c      	adds	r7, #12
    665a:	46bd      	mov	sp, r7
    665c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6660:	4770      	bx	lr

00006662 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6662:	b480      	push	{r7}
    6664:	b083      	sub	sp, #12
    6666:	af00      	add	r7, sp, #0
    6668:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    666a:	687b      	ldr	r3, [r7, #4]
    666c:	699b      	ldr	r3, [r3, #24]
    666e:	f023 0202 	bic.w	r2, r3, #2
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6676:	bf00      	nop
    6678:	370c      	adds	r7, #12
    667a:	46bd      	mov	sp, r7
    667c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6680:	4770      	bx	lr

00006682 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    6682:	b480      	push	{r7}
    6684:	b083      	sub	sp, #12
    6686:	af00      	add	r7, sp, #0
    6688:	6078      	str	r0, [r7, #4]
    668a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	699a      	ldr	r2, [r3, #24]
    6690:	683b      	ldr	r3, [r7, #0]
    6692:	431a      	orrs	r2, r3
    6694:	687b      	ldr	r3, [r7, #4]
    6696:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6698:	bf00      	nop
    669a:	370c      	adds	r7, #12
    669c:	46bd      	mov	sp, r7
    669e:	f85d 7b04 	ldr.w	r7, [sp], #4
    66a2:	4770      	bx	lr

000066a4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    66a4:	b480      	push	{r7}
    66a6:	b083      	sub	sp, #12
    66a8:	af00      	add	r7, sp, #0
    66aa:	6078      	str	r0, [r7, #4]
    66ac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    66ae:	687b      	ldr	r3, [r7, #4]
    66b0:	683a      	ldr	r2, [r7, #0]
    66b2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    66b4:	bf00      	nop
    66b6:	370c      	adds	r7, #12
    66b8:	46bd      	mov	sp, r7
    66ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    66be:	4770      	bx	lr

000066c0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    66c0:	b480      	push	{r7}
    66c2:	b083      	sub	sp, #12
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
    66c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	683a      	ldr	r2, [r7, #0]
    66ce:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    66d0:	bf00      	nop
    66d2:	370c      	adds	r7, #12
    66d4:	46bd      	mov	sp, r7
    66d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66da:	4770      	bx	lr

000066dc <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    66dc:	b480      	push	{r7}
    66de:	b083      	sub	sp, #12
    66e0:	af00      	add	r7, sp, #0
    66e2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    66e4:	687b      	ldr	r3, [r7, #4]
    66e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    66e8:	4618      	mov	r0, r3
    66ea:	370c      	adds	r7, #12
    66ec:	46bd      	mov	sp, r7
    66ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    66f2:	4770      	bx	lr

000066f4 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    66f4:	b480      	push	{r7}
    66f6:	b083      	sub	sp, #12
    66f8:	af00      	add	r7, sp, #0
    66fa:	6078      	str	r0, [r7, #4]
    66fc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	683a      	ldr	r2, [r7, #0]
    6702:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6704:	bf00      	nop
    6706:	370c      	adds	r7, #12
    6708:	46bd      	mov	sp, r7
    670a:	f85d 7b04 	ldr.w	r7, [sp], #4
    670e:	4770      	bx	lr

00006710 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    6710:	b480      	push	{r7}
    6712:	b083      	sub	sp, #12
    6714:	af00      	add	r7, sp, #0
    6716:	6078      	str	r0, [r7, #4]
    6718:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	683a      	ldr	r2, [r7, #0]
    671e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    6722:	bf00      	nop
    6724:	370c      	adds	r7, #12
    6726:	46bd      	mov	sp, r7
    6728:	f85d 7b04 	ldr.w	r7, [sp], #4
    672c:	4770      	bx	lr

0000672e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    672e:	b480      	push	{r7}
    6730:	b083      	sub	sp, #12
    6732:	af00      	add	r7, sp, #0
    6734:	6078      	str	r0, [r7, #4]
    6736:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	683a      	ldr	r2, [r7, #0]
    673c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6740:	bf00      	nop
    6742:	370c      	adds	r7, #12
    6744:	46bd      	mov	sp, r7
    6746:	f85d 7b04 	ldr.w	r7, [sp], #4
    674a:	4770      	bx	lr

0000674c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    674c:	b480      	push	{r7}
    674e:	b083      	sub	sp, #12
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    6754:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    6756:	687b      	ldr	r3, [r7, #4]
    6758:	683a      	ldr	r2, [r7, #0]
    675a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    675e:	bf00      	nop
    6760:	370c      	adds	r7, #12
    6762:	46bd      	mov	sp, r7
    6764:	f85d 7b04 	ldr.w	r7, [sp], #4
    6768:	4770      	bx	lr

0000676a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    676a:	b480      	push	{r7}
    676c:	b083      	sub	sp, #12
    676e:	af00      	add	r7, sp, #0
    6770:	6078      	str	r0, [r7, #4]
    6772:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	683a      	ldr	r2, [r7, #0]
    6778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    677c:	bf00      	nop
    677e:	370c      	adds	r7, #12
    6780:	46bd      	mov	sp, r7
    6782:	f85d 7b04 	ldr.w	r7, [sp], #4
    6786:	4770      	bx	lr

00006788 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    6788:	b480      	push	{r7}
    678a:	b083      	sub	sp, #12
    678c:	af00      	add	r7, sp, #0
    678e:	6078      	str	r0, [r7, #4]
    6790:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    6792:	687b      	ldr	r3, [r7, #4]
    6794:	683a      	ldr	r2, [r7, #0]
    6796:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    679a:	bf00      	nop
    679c:	370c      	adds	r7, #12
    679e:	46bd      	mov	sp, r7
    67a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    67a4:	4770      	bx	lr

000067a6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    67a6:	b480      	push	{r7}
    67a8:	b083      	sub	sp, #12
    67aa:	af00      	add	r7, sp, #0
    67ac:	6078      	str	r0, [r7, #4]
    67ae:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	683a      	ldr	r2, [r7, #0]
    67b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    67b8:	bf00      	nop
    67ba:	370c      	adds	r7, #12
    67bc:	46bd      	mov	sp, r7
    67be:	f85d 7b04 	ldr.w	r7, [sp], #4
    67c2:	4770      	bx	lr

000067c4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    67c4:	b480      	push	{r7}
    67c6:	b083      	sub	sp, #12
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
    67cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    67ce:	687b      	ldr	r3, [r7, #4]
    67d0:	683a      	ldr	r2, [r7, #0]
    67d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    67d6:	bf00      	nop
    67d8:	370c      	adds	r7, #12
    67da:	46bd      	mov	sp, r7
    67dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e0:	4770      	bx	lr

000067e2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    67e2:	b480      	push	{r7}
    67e4:	b083      	sub	sp, #12
    67e6:	af00      	add	r7, sp, #0
    67e8:	6078      	str	r0, [r7, #4]
    67ea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	683a      	ldr	r2, [r7, #0]
    67f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    67f4:	bf00      	nop
    67f6:	370c      	adds	r7, #12
    67f8:	46bd      	mov	sp, r7
    67fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    67fe:	4770      	bx	lr

00006800 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6800:	b480      	push	{r7}
    6802:	b083      	sub	sp, #12
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
    6808:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	683a      	ldr	r2, [r7, #0]
    680e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6812:	bf00      	nop
    6814:	370c      	adds	r7, #12
    6816:	46bd      	mov	sp, r7
    6818:	f85d 7b04 	ldr.w	r7, [sp], #4
    681c:	4770      	bx	lr
	...

00006820 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6820:	b580      	push	{r7, lr}
    6822:	b082      	sub	sp, #8
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
    6828:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	683a      	ldr	r2, [r7, #0]
    682e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6830:	687b      	ldr	r3, [r7, #4]
    6832:	681b      	ldr	r3, [r3, #0]
    6834:	4618      	mov	r0, r3
    6836:	4b53      	ldr	r3, [pc, #332]	; (6984 <_can_async_init+0x164>)
    6838:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    683a:	bf00      	nop
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	681b      	ldr	r3, [r3, #0]
    6840:	4618      	mov	r0, r3
    6842:	4b51      	ldr	r3, [pc, #324]	; (6988 <_can_async_init+0x168>)
    6844:	4798      	blx	r3
    6846:	4603      	mov	r3, r0
    6848:	f083 0301 	eor.w	r3, r3, #1
    684c:	b2db      	uxtb	r3, r3
    684e:	2b00      	cmp	r3, #0
    6850:	d1f4      	bne.n	683c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	681b      	ldr	r3, [r3, #0]
    6856:	4618      	mov	r0, r3
    6858:	4b4c      	ldr	r3, [pc, #304]	; (698c <_can_async_init+0x16c>)
    685a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    685c:	683b      	ldr	r3, [r7, #0]
    685e:	4a4c      	ldr	r2, [pc, #304]	; (6990 <_can_async_init+0x170>)
    6860:	4293      	cmp	r3, r2
    6862:	d177      	bne.n	6954 <_can_async_init+0x134>
		_can1_dev    = dev;
    6864:	4a4b      	ldr	r2, [pc, #300]	; (6994 <_can_async_init+0x174>)
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    686a:	687b      	ldr	r3, [r7, #4]
    686c:	4a4a      	ldr	r2, [pc, #296]	; (6998 <_can_async_init+0x178>)
    686e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	681b      	ldr	r3, [r3, #0]
    6874:	2100      	movs	r1, #0
    6876:	4618      	mov	r0, r3
    6878:	4b48      	ldr	r3, [pc, #288]	; (699c <_can_async_init+0x17c>)
    687a:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	681b      	ldr	r3, [r3, #0]
    6880:	2100      	movs	r1, #0
    6882:	4618      	mov	r0, r3
    6884:	4b46      	ldr	r3, [pc, #280]	; (69a0 <_can_async_init+0x180>)
    6886:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	681b      	ldr	r3, [r3, #0]
    688c:	4945      	ldr	r1, [pc, #276]	; (69a4 <_can_async_init+0x184>)
    688e:	4618      	mov	r0, r3
    6890:	4b45      	ldr	r3, [pc, #276]	; (69a8 <_can_async_init+0x188>)
    6892:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	681b      	ldr	r3, [r3, #0]
    6898:	f640 2133 	movw	r1, #2611	; 0xa33
    689c:	4618      	mov	r0, r3
    689e:	4b43      	ldr	r3, [pc, #268]	; (69ac <_can_async_init+0x18c>)
    68a0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	681a      	ldr	r2, [r3, #0]
    68a6:	4b42      	ldr	r3, [pc, #264]	; (69b0 <_can_async_init+0x190>)
    68a8:	b29b      	uxth	r3, r3
    68aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    68ae:	4619      	mov	r1, r3
    68b0:	4610      	mov	r0, r2
    68b2:	4b40      	ldr	r3, [pc, #256]	; (69b4 <_can_async_init+0x194>)
    68b4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	681b      	ldr	r3, [r3, #0]
    68ba:	2100      	movs	r1, #0
    68bc:	4618      	mov	r0, r3
    68be:	4b3e      	ldr	r3, [pc, #248]	; (69b8 <_can_async_init+0x198>)
    68c0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    68c2:	687b      	ldr	r3, [r7, #4]
    68c4:	681b      	ldr	r3, [r3, #0]
    68c6:	2100      	movs	r1, #0
    68c8:	4618      	mov	r0, r3
    68ca:	4b3c      	ldr	r3, [pc, #240]	; (69bc <_can_async_init+0x19c>)
    68cc:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	681a      	ldr	r2, [r3, #0]
    68d2:	4b3b      	ldr	r3, [pc, #236]	; (69c0 <_can_async_init+0x1a0>)
    68d4:	b29b      	uxth	r3, r3
    68d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    68da:	4619      	mov	r1, r3
    68dc:	4610      	mov	r0, r2
    68de:	4b39      	ldr	r3, [pc, #228]	; (69c4 <_can_async_init+0x1a4>)
    68e0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	681a      	ldr	r2, [r3, #0]
    68e6:	4b38      	ldr	r3, [pc, #224]	; (69c8 <_can_async_init+0x1a8>)
    68e8:	b29b      	uxth	r3, r3
    68ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    68ee:	4619      	mov	r1, r3
    68f0:	4610      	mov	r0, r2
    68f2:	4b36      	ldr	r3, [pc, #216]	; (69cc <_can_async_init+0x1ac>)
    68f4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	681b      	ldr	r3, [r3, #0]
    68fa:	2128      	movs	r1, #40	; 0x28
    68fc:	4618      	mov	r0, r3
    68fe:	4b34      	ldr	r3, [pc, #208]	; (69d0 <_can_async_init+0x1b0>)
    6900:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	681a      	ldr	r2, [r3, #0]
    6906:	4b33      	ldr	r3, [pc, #204]	; (69d4 <_can_async_init+0x1b4>)
    6908:	b29b      	uxth	r3, r3
    690a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    690e:	4619      	mov	r1, r3
    6910:	4610      	mov	r0, r2
    6912:	4b31      	ldr	r3, [pc, #196]	; (69d8 <_can_async_init+0x1b8>)
    6914:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	681a      	ldr	r2, [r3, #0]
    691a:	4b30      	ldr	r3, [pc, #192]	; (69dc <_can_async_init+0x1bc>)
    691c:	b29b      	uxth	r3, r3
    691e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6922:	4619      	mov	r1, r3
    6924:	4610      	mov	r0, r2
    6926:	4b2e      	ldr	r3, [pc, #184]	; (69e0 <_can_async_init+0x1c0>)
    6928:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	681b      	ldr	r3, [r3, #0]
    692e:	2100      	movs	r1, #0
    6930:	4618      	mov	r0, r3
    6932:	4b2c      	ldr	r3, [pc, #176]	; (69e4 <_can_async_init+0x1c4>)
    6934:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    6936:	204f      	movs	r0, #79	; 0x4f
    6938:	4b2b      	ldr	r3, [pc, #172]	; (69e8 <_can_async_init+0x1c8>)
    693a:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    693c:	204f      	movs	r0, #79	; 0x4f
    693e:	4b2b      	ldr	r3, [pc, #172]	; (69ec <_can_async_init+0x1cc>)
    6940:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    6942:	204f      	movs	r0, #79	; 0x4f
    6944:	4b2a      	ldr	r3, [pc, #168]	; (69f0 <_can_async_init+0x1d0>)
    6946:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    6948:	687b      	ldr	r3, [r7, #4]
    694a:	681b      	ldr	r3, [r3, #0]
    694c:	2101      	movs	r1, #1
    694e:	4618      	mov	r0, r3
    6950:	4b28      	ldr	r3, [pc, #160]	; (69f4 <_can_async_init+0x1d4>)
    6952:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	681b      	ldr	r3, [r3, #0]
    6958:	4618      	mov	r0, r3
    695a:	4b27      	ldr	r3, [pc, #156]	; (69f8 <_can_async_init+0x1d8>)
    695c:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    695e:	687b      	ldr	r3, [r7, #4]
    6960:	681b      	ldr	r3, [r3, #0]
    6962:	4618      	mov	r0, r3
    6964:	4b25      	ldr	r3, [pc, #148]	; (69fc <_can_async_init+0x1dc>)
    6966:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    6968:	bf00      	nop
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	681b      	ldr	r3, [r3, #0]
    696e:	4618      	mov	r0, r3
    6970:	4b05      	ldr	r3, [pc, #20]	; (6988 <_can_async_init+0x168>)
    6972:	4798      	blx	r3
    6974:	4603      	mov	r3, r0
    6976:	2b00      	cmp	r3, #0
    6978:	d1f7      	bne.n	696a <_can_async_init+0x14a>
	};

	return ERR_NONE;
    697a:	2300      	movs	r3, #0
}
    697c:	4618      	mov	r0, r3
    697e:	3708      	adds	r7, #8
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	000065d5 	.word	0x000065d5
    6988:	000065f5 	.word	0x000065f5
    698c:	00006643 	.word	0x00006643
    6990:	42000400 	.word	0x42000400
    6994:	20003384 	.word	0x20003384
    6998:	20000068 	.word	0x20000068
    699c:	00006683 	.word	0x00006683
    69a0:	0000659d 	.word	0x0000659d
    69a4:	06020a07 	.word	0x06020a07
    69a8:	000066a5 	.word	0x000066a5
    69ac:	000065b9 	.word	0x000065b9
    69b0:	20005148 	.word	0x20005148
    69b4:	00006789 	.word	0x00006789
    69b8:	000067a7 	.word	0x000067a7
    69bc:	000067e3 	.word	0x000067e3
    69c0:	20005128 	.word	0x20005128
    69c4:	000067c5 	.word	0x000067c5
    69c8:	2000335c 	.word	0x2000335c
    69cc:	00006801 	.word	0x00006801
    69d0:	00006711 	.word	0x00006711
    69d4:	2000336c 	.word	0x2000336c
    69d8:	0000672f 	.word	0x0000672f
    69dc:	20003374 	.word	0x20003374
    69e0:	0000674d 	.word	0x0000674d
    69e4:	0000676b 	.word	0x0000676b
    69e8:	000064f5 	.word	0x000064f5
    69ec:	00006539 	.word	0x00006539
    69f0:	000064b9 	.word	0x000064b9
    69f4:	000066f5 	.word	0x000066f5
    69f8:	00006663 	.word	0x00006663
    69fc:	00006623 	.word	0x00006623

00006a00 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    6a00:	b590      	push	{r4, r7, lr}
    6a02:	b083      	sub	sp, #12
    6a04:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    6a06:	4b2c      	ldr	r3, [pc, #176]	; (6ab8 <CAN1_Handler+0xb8>)
    6a08:	681b      	ldr	r3, [r3, #0]
    6a0a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	681b      	ldr	r3, [r3, #0]
    6a10:	4618      	mov	r0, r3
    6a12:	4b2a      	ldr	r3, [pc, #168]	; (6abc <CAN1_Handler+0xbc>)
    6a14:	4798      	blx	r3
    6a16:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    6a18:	683b      	ldr	r3, [r7, #0]
    6a1a:	f003 0301 	and.w	r3, r3, #1
    6a1e:	2b00      	cmp	r3, #0
    6a20:	d003      	beq.n	6a2a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    6a22:	687b      	ldr	r3, [r7, #4]
    6a24:	689b      	ldr	r3, [r3, #8]
    6a26:	6878      	ldr	r0, [r7, #4]
    6a28:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    6a2a:	683b      	ldr	r3, [r7, #0]
    6a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    6a30:	2b00      	cmp	r3, #0
    6a32:	d003      	beq.n	6a3c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    6a34:	687b      	ldr	r3, [r7, #4]
    6a36:	685b      	ldr	r3, [r3, #4]
    6a38:	6878      	ldr	r0, [r7, #4]
    6a3a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    6a3c:	683b      	ldr	r3, [r7, #0]
    6a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    6a42:	2b00      	cmp	r3, #0
    6a44:	d004      	beq.n	6a50 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	68db      	ldr	r3, [r3, #12]
    6a4a:	2103      	movs	r1, #3
    6a4c:	6878      	ldr	r0, [r7, #4]
    6a4e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    6a50:	683b      	ldr	r3, [r7, #0]
    6a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6a56:	2b00      	cmp	r3, #0
    6a58:	d004      	beq.n	6a64 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    6a5a:	687b      	ldr	r3, [r7, #4]
    6a5c:	68db      	ldr	r3, [r3, #12]
    6a5e:	2100      	movs	r1, #0
    6a60:	6878      	ldr	r0, [r7, #4]
    6a62:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    6a64:	683b      	ldr	r3, [r7, #0]
    6a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d00f      	beq.n	6a8e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    6a6e:	687b      	ldr	r3, [r7, #4]
    6a70:	68dc      	ldr	r4, [r3, #12]
    6a72:	687b      	ldr	r3, [r7, #4]
    6a74:	681b      	ldr	r3, [r3, #0]
    6a76:	4618      	mov	r0, r3
    6a78:	4b11      	ldr	r3, [pc, #68]	; (6ac0 <CAN1_Handler+0xc0>)
    6a7a:	4798      	blx	r3
    6a7c:	4603      	mov	r3, r0
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d001      	beq.n	6a86 <CAN1_Handler+0x86>
    6a82:	2302      	movs	r3, #2
    6a84:	e000      	b.n	6a88 <CAN1_Handler+0x88>
    6a86:	2301      	movs	r3, #1
    6a88:	4619      	mov	r1, r3
    6a8a:	6878      	ldr	r0, [r7, #4]
    6a8c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    6a8e:	683b      	ldr	r3, [r7, #0]
    6a90:	f003 0308 	and.w	r3, r3, #8
    6a94:	2b00      	cmp	r3, #0
    6a96:	d004      	beq.n	6aa2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	68db      	ldr	r3, [r3, #12]
    6a9c:	2104      	movs	r1, #4
    6a9e:	6878      	ldr	r0, [r7, #4]
    6aa0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	6839      	ldr	r1, [r7, #0]
    6aa8:	4618      	mov	r0, r3
    6aaa:	4b06      	ldr	r3, [pc, #24]	; (6ac4 <CAN1_Handler+0xc4>)
    6aac:	4798      	blx	r3
}
    6aae:	bf00      	nop
    6ab0:	370c      	adds	r7, #12
    6ab2:	46bd      	mov	sp, r7
    6ab4:	bd90      	pop	{r4, r7, pc}
    6ab6:	bf00      	nop
    6ab8:	20003384 	.word	0x20003384
    6abc:	000066dd 	.word	0x000066dd
    6ac0:	00006575 	.word	0x00006575
    6ac4:	000066c1 	.word	0x000066c1

00006ac8 <__NVIC_SetPendingIRQ>:
{
    6ac8:	b480      	push	{r7}
    6aca:	b083      	sub	sp, #12
    6acc:	af00      	add	r7, sp, #0
    6ace:	4603      	mov	r3, r0
    6ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	db0c      	blt.n	6af4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ada:	4909      	ldr	r1, [pc, #36]	; (6b00 <__NVIC_SetPendingIRQ+0x38>)
    6adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ae0:	095b      	lsrs	r3, r3, #5
    6ae2:	88fa      	ldrh	r2, [r7, #6]
    6ae4:	f002 021f 	and.w	r2, r2, #31
    6ae8:	2001      	movs	r0, #1
    6aea:	fa00 f202 	lsl.w	r2, r0, r2
    6aee:	3340      	adds	r3, #64	; 0x40
    6af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6af4:	bf00      	nop
    6af6:	370c      	adds	r7, #12
    6af8:	46bd      	mov	sp, r7
    6afa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6afe:	4770      	bx	lr
    6b00:	e000e100 	.word	0xe000e100

00006b04 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    6b04:	b580      	push	{r7, lr}
    6b06:	b082      	sub	sp, #8
    6b08:	af00      	add	r7, sp, #0
    6b0a:	4603      	mov	r3, r0
    6b0c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    6b0e:	79fb      	ldrb	r3, [r7, #7]
    6b10:	b21b      	sxth	r3, r3
    6b12:	4618      	mov	r0, r3
    6b14:	4b02      	ldr	r3, [pc, #8]	; (6b20 <_irq_set+0x1c>)
    6b16:	4798      	blx	r3
}
    6b18:	bf00      	nop
    6b1a:	3708      	adds	r7, #8
    6b1c:	46bd      	mov	sp, r7
    6b1e:	bd80      	pop	{r7, pc}
    6b20:	00006ac9 	.word	0x00006ac9

00006b24 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    6b24:	b480      	push	{r7}
    6b26:	b083      	sub	sp, #12
    6b28:	af00      	add	r7, sp, #0
    6b2a:	4603      	mov	r3, r0
    6b2c:	6039      	str	r1, [r7, #0]
    6b2e:	80fb      	strh	r3, [r7, #6]
    6b30:	4613      	mov	r3, r2
    6b32:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6b34:	797b      	ldrb	r3, [r7, #5]
    6b36:	3b04      	subs	r3, #4
    6b38:	2b05      	cmp	r3, #5
    6b3a:	d86b      	bhi.n	6c14 <_get_cycles_for_us_internal+0xf0>
    6b3c:	a201      	add	r2, pc, #4	; (adr r2, 6b44 <_get_cycles_for_us_internal+0x20>)
    6b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6b42:	bf00      	nop
    6b44:	00006bf3 	.word	0x00006bf3
    6b48:	00006bd3 	.word	0x00006bd3
    6b4c:	00006bb5 	.word	0x00006bb5
    6b50:	00006b97 	.word	0x00006b97
    6b54:	00006b79 	.word	0x00006b79
    6b58:	00006b5d 	.word	0x00006b5d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6b5c:	88fb      	ldrh	r3, [r7, #6]
    6b5e:	683a      	ldr	r2, [r7, #0]
    6b60:	4935      	ldr	r1, [pc, #212]	; (6c38 <_get_cycles_for_us_internal+0x114>)
    6b62:	fba1 1202 	umull	r1, r2, r1, r2
    6b66:	0c92      	lsrs	r2, r2, #18
    6b68:	fb02 f303 	mul.w	r3, r2, r3
    6b6c:	3302      	adds	r3, #2
    6b6e:	4a33      	ldr	r2, [pc, #204]	; (6c3c <_get_cycles_for_us_internal+0x118>)
    6b70:	fba2 2303 	umull	r2, r3, r2, r3
    6b74:	085b      	lsrs	r3, r3, #1
    6b76:	e059      	b.n	6c2c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6b78:	88fb      	ldrh	r3, [r7, #6]
    6b7a:	683a      	ldr	r2, [r7, #0]
    6b7c:	0952      	lsrs	r2, r2, #5
    6b7e:	4930      	ldr	r1, [pc, #192]	; (6c40 <_get_cycles_for_us_internal+0x11c>)
    6b80:	fba1 1202 	umull	r1, r2, r1, r2
    6b84:	09d2      	lsrs	r2, r2, #7
    6b86:	fb02 f303 	mul.w	r3, r2, r3
    6b8a:	331d      	adds	r3, #29
    6b8c:	4a2d      	ldr	r2, [pc, #180]	; (6c44 <_get_cycles_for_us_internal+0x120>)
    6b8e:	fba2 2303 	umull	r2, r3, r2, r3
    6b92:	091b      	lsrs	r3, r3, #4
    6b94:	e04a      	b.n	6c2c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    6b96:	88fb      	ldrh	r3, [r7, #6]
    6b98:	683a      	ldr	r2, [r7, #0]
    6b9a:	492b      	ldr	r1, [pc, #172]	; (6c48 <_get_cycles_for_us_internal+0x124>)
    6b9c:	fba1 1202 	umull	r1, r2, r1, r2
    6ba0:	0b52      	lsrs	r2, r2, #13
    6ba2:	fb02 f303 	mul.w	r3, r2, r3
    6ba6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6baa:	4a28      	ldr	r2, [pc, #160]	; (6c4c <_get_cycles_for_us_internal+0x128>)
    6bac:	fba2 2303 	umull	r2, r3, r2, r3
    6bb0:	095b      	lsrs	r3, r3, #5
    6bb2:	e03b      	b.n	6c2c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    6bb4:	88fb      	ldrh	r3, [r7, #6]
    6bb6:	683a      	ldr	r2, [r7, #0]
    6bb8:	4925      	ldr	r1, [pc, #148]	; (6c50 <_get_cycles_for_us_internal+0x12c>)
    6bba:	fba1 1202 	umull	r1, r2, r1, r2
    6bbe:	0992      	lsrs	r2, r2, #6
    6bc0:	fb02 f303 	mul.w	r3, r2, r3
    6bc4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6bc8:	4a22      	ldr	r2, [pc, #136]	; (6c54 <_get_cycles_for_us_internal+0x130>)
    6bca:	fba2 2303 	umull	r2, r3, r2, r3
    6bce:	099b      	lsrs	r3, r3, #6
    6bd0:	e02c      	b.n	6c2c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    6bd2:	88fb      	ldrh	r3, [r7, #6]
    6bd4:	683a      	ldr	r2, [r7, #0]
    6bd6:	4920      	ldr	r1, [pc, #128]	; (6c58 <_get_cycles_for_us_internal+0x134>)
    6bd8:	fba1 1202 	umull	r1, r2, r1, r2
    6bdc:	0952      	lsrs	r2, r2, #5
    6bde:	fb02 f303 	mul.w	r3, r2, r3
    6be2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    6be6:	332f      	adds	r3, #47	; 0x2f
    6be8:	4a1c      	ldr	r2, [pc, #112]	; (6c5c <_get_cycles_for_us_internal+0x138>)
    6bea:	fba2 2303 	umull	r2, r3, r2, r3
    6bee:	0b5b      	lsrs	r3, r3, #13
    6bf0:	e01c      	b.n	6c2c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    6bf2:	88fb      	ldrh	r3, [r7, #6]
    6bf4:	683a      	ldr	r2, [r7, #0]
    6bf6:	491a      	ldr	r1, [pc, #104]	; (6c60 <_get_cycles_for_us_internal+0x13c>)
    6bf8:	fba1 1202 	umull	r1, r2, r1, r2
    6bfc:	08d2      	lsrs	r2, r2, #3
    6bfe:	fb02 f303 	mul.w	r3, r2, r3
    6c02:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    6c06:	f203 33df 	addw	r3, r3, #991	; 0x3df
    6c0a:	4a16      	ldr	r2, [pc, #88]	; (6c64 <_get_cycles_for_us_internal+0x140>)
    6c0c:	fba2 2303 	umull	r2, r3, r2, r3
    6c10:	0c5b      	lsrs	r3, r3, #17
    6c12:	e00b      	b.n	6c2c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    6c14:	88fb      	ldrh	r3, [r7, #6]
    6c16:	683a      	ldr	r2, [r7, #0]
    6c18:	fb02 f303 	mul.w	r3, r2, r3
    6c1c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    6c20:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    6c24:	4a10      	ldr	r2, [pc, #64]	; (6c68 <_get_cycles_for_us_internal+0x144>)
    6c26:	fba2 2303 	umull	r2, r3, r2, r3
    6c2a:	0c9b      	lsrs	r3, r3, #18
	}
}
    6c2c:	4618      	mov	r0, r3
    6c2e:	370c      	adds	r7, #12
    6c30:	46bd      	mov	sp, r7
    6c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c36:	4770      	bx	lr
    6c38:	431bde83 	.word	0x431bde83
    6c3c:	aaaaaaab 	.word	0xaaaaaaab
    6c40:	0a7c5ac5 	.word	0x0a7c5ac5
    6c44:	88888889 	.word	0x88888889
    6c48:	d1b71759 	.word	0xd1b71759
    6c4c:	1b4e81b5 	.word	0x1b4e81b5
    6c50:	10624dd3 	.word	0x10624dd3
    6c54:	057619f1 	.word	0x057619f1
    6c58:	51eb851f 	.word	0x51eb851f
    6c5c:	45e7b273 	.word	0x45e7b273
    6c60:	cccccccd 	.word	0xcccccccd
    6c64:	6fd91d85 	.word	0x6fd91d85
    6c68:	165e9f81 	.word	0x165e9f81

00006c6c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    6c6c:	b580      	push	{r7, lr}
    6c6e:	b082      	sub	sp, #8
    6c70:	af00      	add	r7, sp, #0
    6c72:	4603      	mov	r3, r0
    6c74:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6c76:	88fb      	ldrh	r3, [r7, #6]
    6c78:	2209      	movs	r2, #9
    6c7a:	4904      	ldr	r1, [pc, #16]	; (6c8c <_get_cycles_for_us+0x20>)
    6c7c:	4618      	mov	r0, r3
    6c7e:	4b04      	ldr	r3, [pc, #16]	; (6c90 <_get_cycles_for_us+0x24>)
    6c80:	4798      	blx	r3
    6c82:	4603      	mov	r3, r0
}
    6c84:	4618      	mov	r0, r3
    6c86:	3708      	adds	r7, #8
    6c88:	46bd      	mov	sp, r7
    6c8a:	bd80      	pop	{r7, pc}
    6c8c:	07270e00 	.word	0x07270e00
    6c90:	00006b25 	.word	0x00006b25

00006c94 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    6c94:	b480      	push	{r7}
    6c96:	b083      	sub	sp, #12
    6c98:	af00      	add	r7, sp, #0
    6c9a:	4603      	mov	r3, r0
    6c9c:	6039      	str	r1, [r7, #0]
    6c9e:	80fb      	strh	r3, [r7, #6]
    6ca0:	4613      	mov	r3, r2
    6ca2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6ca4:	797b      	ldrb	r3, [r7, #5]
    6ca6:	3b04      	subs	r3, #4
    6ca8:	2b05      	cmp	r3, #5
    6caa:	d870      	bhi.n	6d8e <_get_cycles_for_ms_internal+0xfa>
    6cac:	a201      	add	r2, pc, #4	; (adr r2, 6cb4 <_get_cycles_for_ms_internal+0x20>)
    6cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6cb2:	bf00      	nop
    6cb4:	00006d71 	.word	0x00006d71
    6cb8:	00006d55 	.word	0x00006d55
    6cbc:	00006d39 	.word	0x00006d39
    6cc0:	00006d15 	.word	0x00006d15
    6cc4:	00006cf1 	.word	0x00006cf1
    6cc8:	00006ccd 	.word	0x00006ccd
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    6ccc:	88fb      	ldrh	r3, [r7, #6]
    6cce:	683a      	ldr	r2, [r7, #0]
    6cd0:	4937      	ldr	r1, [pc, #220]	; (6db0 <_get_cycles_for_ms_internal+0x11c>)
    6cd2:	fba1 1202 	umull	r1, r2, r1, r2
    6cd6:	0c92      	lsrs	r2, r2, #18
    6cd8:	fb02 f303 	mul.w	r3, r2, r3
    6cdc:	3302      	adds	r3, #2
    6cde:	4a35      	ldr	r2, [pc, #212]	; (6db4 <_get_cycles_for_ms_internal+0x120>)
    6ce0:	fba2 2303 	umull	r2, r3, r2, r3
    6ce4:	085b      	lsrs	r3, r3, #1
    6ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6cea:	fb02 f303 	mul.w	r3, r2, r3
    6cee:	e058      	b.n	6da2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    6cf0:	88fb      	ldrh	r3, [r7, #6]
    6cf2:	683a      	ldr	r2, [r7, #0]
    6cf4:	0952      	lsrs	r2, r2, #5
    6cf6:	4930      	ldr	r1, [pc, #192]	; (6db8 <_get_cycles_for_ms_internal+0x124>)
    6cf8:	fba1 1202 	umull	r1, r2, r1, r2
    6cfc:	09d2      	lsrs	r2, r2, #7
    6cfe:	fb02 f303 	mul.w	r3, r2, r3
    6d02:	3302      	adds	r3, #2
    6d04:	4a2b      	ldr	r2, [pc, #172]	; (6db4 <_get_cycles_for_ms_internal+0x120>)
    6d06:	fba2 2303 	umull	r2, r3, r2, r3
    6d0a:	085b      	lsrs	r3, r3, #1
    6d0c:	2264      	movs	r2, #100	; 0x64
    6d0e:	fb02 f303 	mul.w	r3, r2, r3
    6d12:	e046      	b.n	6da2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    6d14:	88fb      	ldrh	r3, [r7, #6]
    6d16:	683a      	ldr	r2, [r7, #0]
    6d18:	4928      	ldr	r1, [pc, #160]	; (6dbc <_get_cycles_for_ms_internal+0x128>)
    6d1a:	fba1 1202 	umull	r1, r2, r1, r2
    6d1e:	0b52      	lsrs	r2, r2, #13
    6d20:	fb02 f303 	mul.w	r3, r2, r3
    6d24:	3302      	adds	r3, #2
    6d26:	4a23      	ldr	r2, [pc, #140]	; (6db4 <_get_cycles_for_ms_internal+0x120>)
    6d28:	fba2 2303 	umull	r2, r3, r2, r3
    6d2c:	085a      	lsrs	r2, r3, #1
    6d2e:	4613      	mov	r3, r2
    6d30:	009b      	lsls	r3, r3, #2
    6d32:	4413      	add	r3, r2
    6d34:	005b      	lsls	r3, r3, #1
    6d36:	e034      	b.n	6da2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6d38:	88fb      	ldrh	r3, [r7, #6]
    6d3a:	683a      	ldr	r2, [r7, #0]
    6d3c:	4920      	ldr	r1, [pc, #128]	; (6dc0 <_get_cycles_for_ms_internal+0x12c>)
    6d3e:	fba1 1202 	umull	r1, r2, r1, r2
    6d42:	0992      	lsrs	r2, r2, #6
    6d44:	fb02 f303 	mul.w	r3, r2, r3
    6d48:	3302      	adds	r3, #2
    6d4a:	4a1a      	ldr	r2, [pc, #104]	; (6db4 <_get_cycles_for_ms_internal+0x120>)
    6d4c:	fba2 2303 	umull	r2, r3, r2, r3
    6d50:	085b      	lsrs	r3, r3, #1
    6d52:	e026      	b.n	6da2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6d54:	88fb      	ldrh	r3, [r7, #6]
    6d56:	683a      	ldr	r2, [r7, #0]
    6d58:	491a      	ldr	r1, [pc, #104]	; (6dc4 <_get_cycles_for_ms_internal+0x130>)
    6d5a:	fba1 1202 	umull	r1, r2, r1, r2
    6d5e:	0952      	lsrs	r2, r2, #5
    6d60:	fb02 f303 	mul.w	r3, r2, r3
    6d64:	331d      	adds	r3, #29
    6d66:	4a18      	ldr	r2, [pc, #96]	; (6dc8 <_get_cycles_for_ms_internal+0x134>)
    6d68:	fba2 2303 	umull	r2, r3, r2, r3
    6d6c:	091b      	lsrs	r3, r3, #4
    6d6e:	e018      	b.n	6da2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    6d70:	88fb      	ldrh	r3, [r7, #6]
    6d72:	683a      	ldr	r2, [r7, #0]
    6d74:	4915      	ldr	r1, [pc, #84]	; (6dcc <_get_cycles_for_ms_internal+0x138>)
    6d76:	fba1 1202 	umull	r1, r2, r1, r2
    6d7a:	08d2      	lsrs	r2, r2, #3
    6d7c:	fb02 f303 	mul.w	r3, r2, r3
    6d80:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6d84:	4a12      	ldr	r2, [pc, #72]	; (6dd0 <_get_cycles_for_ms_internal+0x13c>)
    6d86:	fba2 2303 	umull	r2, r3, r2, r3
    6d8a:	095b      	lsrs	r3, r3, #5
    6d8c:	e009      	b.n	6da2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    6d8e:	88fb      	ldrh	r3, [r7, #6]
    6d90:	683a      	ldr	r2, [r7, #0]
    6d92:	fb02 f303 	mul.w	r3, r2, r3
    6d96:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6d9a:	4a0e      	ldr	r2, [pc, #56]	; (6dd4 <_get_cycles_for_ms_internal+0x140>)
    6d9c:	fba2 2303 	umull	r2, r3, r2, r3
    6da0:	099b      	lsrs	r3, r3, #6
	}
}
    6da2:	4618      	mov	r0, r3
    6da4:	370c      	adds	r7, #12
    6da6:	46bd      	mov	sp, r7
    6da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dac:	4770      	bx	lr
    6dae:	bf00      	nop
    6db0:	431bde83 	.word	0x431bde83
    6db4:	aaaaaaab 	.word	0xaaaaaaab
    6db8:	0a7c5ac5 	.word	0x0a7c5ac5
    6dbc:	d1b71759 	.word	0xd1b71759
    6dc0:	10624dd3 	.word	0x10624dd3
    6dc4:	51eb851f 	.word	0x51eb851f
    6dc8:	88888889 	.word	0x88888889
    6dcc:	cccccccd 	.word	0xcccccccd
    6dd0:	1b4e81b5 	.word	0x1b4e81b5
    6dd4:	057619f1 	.word	0x057619f1

00006dd8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	b082      	sub	sp, #8
    6ddc:	af00      	add	r7, sp, #0
    6dde:	4603      	mov	r3, r0
    6de0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6de2:	88fb      	ldrh	r3, [r7, #6]
    6de4:	2209      	movs	r2, #9
    6de6:	4904      	ldr	r1, [pc, #16]	; (6df8 <_get_cycles_for_ms+0x20>)
    6de8:	4618      	mov	r0, r3
    6dea:	4b04      	ldr	r3, [pc, #16]	; (6dfc <_get_cycles_for_ms+0x24>)
    6dec:	4798      	blx	r3
    6dee:	4603      	mov	r3, r0
}
    6df0:	4618      	mov	r0, r3
    6df2:	3708      	adds	r7, #8
    6df4:	46bd      	mov	sp, r7
    6df6:	bd80      	pop	{r7, pc}
    6df8:	07270e00 	.word	0x07270e00
    6dfc:	00006c95 	.word	0x00006c95

00006e00 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6e00:	b480      	push	{r7}
    6e02:	b083      	sub	sp, #12
    6e04:	af00      	add	r7, sp, #0
    6e06:	6078      	str	r0, [r7, #4]
    6e08:	6039      	str	r1, [r7, #0]
    6e0a:	bf00      	nop
    6e0c:	f3af 8000 	nop.w

00006e10 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6e10:	3901      	subs	r1, #1
    6e12:	d8fd      	bhi.n	6e10 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6e14:	bf00      	nop
    6e16:	370c      	adds	r7, #12
    6e18:	46bd      	mov	sp, r7
    6e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e1e:	4770      	bx	lr

00006e20 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    6e20:	b480      	push	{r7}
    6e22:	b083      	sub	sp, #12
    6e24:	af00      	add	r7, sp, #0
    6e26:	6078      	str	r0, [r7, #4]
    6e28:	460b      	mov	r3, r1
    6e2a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	881b      	ldrh	r3, [r3, #0]
    6e30:	b29a      	uxth	r2, r3
    6e32:	887b      	ldrh	r3, [r7, #2]
    6e34:	021b      	lsls	r3, r3, #8
    6e36:	b29b      	uxth	r3, r3
    6e38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6e3c:	b29b      	uxth	r3, r3
    6e3e:	4313      	orrs	r3, r2
    6e40:	b29a      	uxth	r2, r3
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    6e46:	bf00      	nop
    6e48:	370c      	adds	r7, #12
    6e4a:	46bd      	mov	sp, r7
    6e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e50:	4770      	bx	lr

00006e52 <hri_port_set_EVCTRL_reg>:
{
    6e52:	b480      	push	{r7}
    6e54:	b085      	sub	sp, #20
    6e56:	af00      	add	r7, sp, #0
    6e58:	60f8      	str	r0, [r7, #12]
    6e5a:	460b      	mov	r3, r1
    6e5c:	607a      	str	r2, [r7, #4]
    6e5e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6e60:	7afb      	ldrb	r3, [r7, #11]
    6e62:	7afa      	ldrb	r2, [r7, #11]
    6e64:	68f9      	ldr	r1, [r7, #12]
    6e66:	01d2      	lsls	r2, r2, #7
    6e68:	440a      	add	r2, r1
    6e6a:	322c      	adds	r2, #44	; 0x2c
    6e6c:	6811      	ldr	r1, [r2, #0]
    6e6e:	687a      	ldr	r2, [r7, #4]
    6e70:	430a      	orrs	r2, r1
    6e72:	68f9      	ldr	r1, [r7, #12]
    6e74:	01db      	lsls	r3, r3, #7
    6e76:	440b      	add	r3, r1
    6e78:	332c      	adds	r3, #44	; 0x2c
    6e7a:	601a      	str	r2, [r3, #0]
}
    6e7c:	bf00      	nop
    6e7e:	3714      	adds	r7, #20
    6e80:	46bd      	mov	sp, r7
    6e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e86:	4770      	bx	lr

00006e88 <_port_event_init>:

static inline void _port_event_init()
{
    6e88:	b580      	push	{r7, lr}
    6e8a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    6e8c:	2200      	movs	r2, #0
    6e8e:	2100      	movs	r1, #0
    6e90:	4809      	ldr	r0, [pc, #36]	; (6eb8 <_port_event_init+0x30>)
    6e92:	4b0a      	ldr	r3, [pc, #40]	; (6ebc <_port_event_init+0x34>)
    6e94:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6e96:	2200      	movs	r2, #0
    6e98:	2101      	movs	r1, #1
    6e9a:	4807      	ldr	r0, [pc, #28]	; (6eb8 <_port_event_init+0x30>)
    6e9c:	4b07      	ldr	r3, [pc, #28]	; (6ebc <_port_event_init+0x34>)
    6e9e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6ea0:	22ef      	movs	r2, #239	; 0xef
    6ea2:	2102      	movs	r1, #2
    6ea4:	4804      	ldr	r0, [pc, #16]	; (6eb8 <_port_event_init+0x30>)
    6ea6:	4b05      	ldr	r3, [pc, #20]	; (6ebc <_port_event_init+0x34>)
    6ea8:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    6eaa:	2200      	movs	r2, #0
    6eac:	2103      	movs	r1, #3
    6eae:	4802      	ldr	r0, [pc, #8]	; (6eb8 <_port_event_init+0x30>)
    6eb0:	4b02      	ldr	r3, [pc, #8]	; (6ebc <_port_event_init+0x34>)
    6eb2:	4798      	blx	r3
}
    6eb4:	bf00      	nop
    6eb6:	bd80      	pop	{r7, pc}
    6eb8:	41008000 	.word	0x41008000
    6ebc:	00006e53 	.word	0x00006e53

00006ec0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6ec4:	2104      	movs	r1, #4
    6ec6:	480b      	ldr	r0, [pc, #44]	; (6ef4 <_init_chip+0x34>)
    6ec8:	4b0b      	ldr	r3, [pc, #44]	; (6ef8 <_init_chip+0x38>)
    6eca:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6ecc:	4b0b      	ldr	r3, [pc, #44]	; (6efc <_init_chip+0x3c>)
    6ece:	4798      	blx	r3
	_oscctrl_init_sources();
    6ed0:	4b0b      	ldr	r3, [pc, #44]	; (6f00 <_init_chip+0x40>)
    6ed2:	4798      	blx	r3
	_mclk_init();
    6ed4:	4b0b      	ldr	r3, [pc, #44]	; (6f04 <_init_chip+0x44>)
    6ed6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6ed8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6edc:	4b0a      	ldr	r3, [pc, #40]	; (6f08 <_init_chip+0x48>)
    6ede:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6ee0:	4b0a      	ldr	r3, [pc, #40]	; (6f0c <_init_chip+0x4c>)
    6ee2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6ee4:	f640 30df 	movw	r0, #3039	; 0xbdf
    6ee8:	4b07      	ldr	r3, [pc, #28]	; (6f08 <_init_chip+0x48>)
    6eea:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    6eec:	4b08      	ldr	r3, [pc, #32]	; (6f10 <_init_chip+0x50>)
    6eee:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6ef0:	bf00      	nop
    6ef2:	bd80      	pop	{r7, pc}
    6ef4:	41004000 	.word	0x41004000
    6ef8:	00006e21 	.word	0x00006e21
    6efc:	00007b31 	.word	0x00007b31
    6f00:	00007ff9 	.word	0x00007ff9
    6f04:	00007a51 	.word	0x00007a51
    6f08:	00007959 	.word	0x00007959
    6f0c:	00008039 	.word	0x00008039
    6f10:	00006e89 	.word	0x00006e89

00006f14 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    6f14:	b480      	push	{r7}
    6f16:	b083      	sub	sp, #12
    6f18:	af00      	add	r7, sp, #0
    6f1a:	6078      	str	r0, [r7, #4]
    6f1c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	683a      	ldr	r2, [r7, #0]
    6f22:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f24:	bf00      	nop
    6f26:	370c      	adds	r7, #12
    6f28:	46bd      	mov	sp, r7
    6f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f2e:	4770      	bx	lr

00006f30 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    6f30:	b480      	push	{r7}
    6f32:	b085      	sub	sp, #20
    6f34:	af00      	add	r7, sp, #0
    6f36:	6078      	str	r0, [r7, #4]
    6f38:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    6f3a:	687b      	ldr	r3, [r7, #4]
    6f3c:	689b      	ldr	r3, [r3, #8]
    6f3e:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    6f40:	68fb      	ldr	r3, [r7, #12]
    6f42:	f003 0303 	and.w	r3, r3, #3
    6f46:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    6f48:	683b      	ldr	r3, [r7, #0]
    6f4a:	009b      	lsls	r3, r3, #2
    6f4c:	68fa      	ldr	r2, [r7, #12]
    6f4e:	4313      	orrs	r3, r2
    6f50:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	68fa      	ldr	r2, [r7, #12]
    6f56:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f58:	bf00      	nop
    6f5a:	3714      	adds	r7, #20
    6f5c:	46bd      	mov	sp, r7
    6f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f62:	4770      	bx	lr

00006f64 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    6f64:	b480      	push	{r7}
    6f66:	b083      	sub	sp, #12
    6f68:	af00      	add	r7, sp, #0
    6f6a:	6078      	str	r0, [r7, #4]
    6f6c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	683a      	ldr	r2, [r7, #0]
    6f72:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f74:	bf00      	nop
    6f76:	370c      	adds	r7, #12
    6f78:	46bd      	mov	sp, r7
    6f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f7e:	4770      	bx	lr

00006f80 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    6f80:	b480      	push	{r7}
    6f82:	b083      	sub	sp, #12
    6f84:	af00      	add	r7, sp, #0
    6f86:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    6f88:	687b      	ldr	r3, [r7, #4]
    6f8a:	68db      	ldr	r3, [r3, #12]
}
    6f8c:	4618      	mov	r0, r3
    6f8e:	370c      	adds	r7, #12
    6f90:	46bd      	mov	sp, r7
    6f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f96:	4770      	bx	lr

00006f98 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    6f98:	b480      	push	{r7}
    6f9a:	b083      	sub	sp, #12
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	785b      	ldrb	r3, [r3, #1]
    6fa4:	b2db      	uxtb	r3, r3
    6fa6:	f003 0301 	and.w	r3, r3, #1
    6faa:	2b00      	cmp	r3, #0
    6fac:	bf14      	ite	ne
    6fae:	2301      	movne	r3, #1
    6fb0:	2300      	moveq	r3, #0
    6fb2:	b2db      	uxtb	r3, r3
}
    6fb4:	4618      	mov	r0, r3
    6fb6:	370c      	adds	r7, #12
    6fb8:	46bd      	mov	sp, r7
    6fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fbe:	4770      	bx	lr

00006fc0 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    6fc0:	b480      	push	{r7}
    6fc2:	b083      	sub	sp, #12
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    6fc8:	687b      	ldr	r3, [r7, #4]
    6fca:	2201      	movs	r2, #1
    6fcc:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6fce:	bf00      	nop
    6fd0:	370c      	adds	r7, #12
    6fd2:	46bd      	mov	sp, r7
    6fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd8:	4770      	bx	lr

00006fda <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    6fda:	b480      	push	{r7}
    6fdc:	b083      	sub	sp, #12
    6fde:	af00      	add	r7, sp, #0
    6fe0:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	785b      	ldrb	r3, [r3, #1]
    6fe6:	b2db      	uxtb	r3, r3
    6fe8:	089b      	lsrs	r3, r3, #2
    6fea:	f003 0301 	and.w	r3, r3, #1
    6fee:	2b00      	cmp	r3, #0
    6ff0:	bf14      	ite	ne
    6ff2:	2301      	movne	r3, #1
    6ff4:	2300      	moveq	r3, #0
    6ff6:	b2db      	uxtb	r3, r3
}
    6ff8:	4618      	mov	r0, r3
    6ffa:	370c      	adds	r7, #12
    6ffc:	46bd      	mov	sp, r7
    6ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7002:	4770      	bx	lr

00007004 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    7004:	b480      	push	{r7}
    7006:	b083      	sub	sp, #12
    7008:	af00      	add	r7, sp, #0
    700a:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	2204      	movs	r2, #4
    7010:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7012:	bf00      	nop
    7014:	370c      	adds	r7, #12
    7016:	46bd      	mov	sp, r7
    7018:	f85d 7b04 	ldr.w	r7, [sp], #4
    701c:	4770      	bx	lr

0000701e <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    701e:	b480      	push	{r7}
    7020:	b083      	sub	sp, #12
    7022:	af00      	add	r7, sp, #0
    7024:	6078      	str	r0, [r7, #4]
    7026:	460b      	mov	r3, r1
    7028:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    702a:	687b      	ldr	r3, [r7, #4]
    702c:	78fa      	ldrb	r2, [r7, #3]
    702e:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    7030:	bf00      	nop
    7032:	370c      	adds	r7, #12
    7034:	46bd      	mov	sp, r7
    7036:	f85d 7b04 	ldr.w	r7, [sp], #4
    703a:	4770      	bx	lr

0000703c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    703c:	b480      	push	{r7}
    703e:	b083      	sub	sp, #12
    7040:	af00      	add	r7, sp, #0
    7042:	6078      	str	r0, [r7, #4]
    7044:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	683a      	ldr	r2, [r7, #0]
    704a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    704c:	2300      	movs	r3, #0
}
    704e:	4618      	mov	r0, r3
    7050:	370c      	adds	r7, #12
    7052:	46bd      	mov	sp, r7
    7054:	f85d 7b04 	ldr.w	r7, [sp], #4
    7058:	4770      	bx	lr

0000705a <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    705a:	b480      	push	{r7}
    705c:	b083      	sub	sp, #12
    705e:	af00      	add	r7, sp, #0
    7060:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    7062:	2300      	movs	r3, #0
}
    7064:	4618      	mov	r0, r3
    7066:	370c      	adds	r7, #12
    7068:	46bd      	mov	sp, r7
    706a:	f85d 7b04 	ldr.w	r7, [sp], #4
    706e:	4770      	bx	lr

00007070 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    7070:	b580      	push	{r7, lr}
    7072:	b086      	sub	sp, #24
    7074:	af00      	add	r7, sp, #0
    7076:	60f8      	str	r0, [r7, #12]
    7078:	60b9      	str	r1, [r7, #8]
    707a:	607a      	str	r2, [r7, #4]
    707c:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    707e:	2300      	movs	r3, #0
    7080:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    7082:	68bb      	ldr	r3, [r7, #8]
    7084:	f003 0303 	and.w	r3, r3, #3
    7088:	2b00      	cmp	r3, #0
    708a:	d002      	beq.n	7092 <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    708c:	f06f 030c 	mvn.w	r3, #12
    7090:	e05e      	b.n	7150 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    7092:	f107 0310 	add.w	r3, r7, #16
    7096:	4618      	mov	r0, r3
    7098:	4b2f      	ldr	r3, [pc, #188]	; (7158 <_crc_sync_crc32+0xe8>)
    709a:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    709c:	68fb      	ldr	r3, [r7, #12]
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	4618      	mov	r0, r3
    70a2:	4b2e      	ldr	r3, [pc, #184]	; (715c <_crc_sync_crc32+0xec>)
    70a4:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    70a6:	68fb      	ldr	r3, [r7, #12]
    70a8:	681b      	ldr	r3, [r3, #0]
    70aa:	68ba      	ldr	r2, [r7, #8]
    70ac:	4611      	mov	r1, r2
    70ae:	4618      	mov	r0, r3
    70b0:	4b2b      	ldr	r3, [pc, #172]	; (7160 <_crc_sync_crc32+0xf0>)
    70b2:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    70b4:	68fb      	ldr	r3, [r7, #12]
    70b6:	681b      	ldr	r3, [r3, #0]
    70b8:	6879      	ldr	r1, [r7, #4]
    70ba:	4618      	mov	r0, r3
    70bc:	4b29      	ldr	r3, [pc, #164]	; (7164 <_crc_sync_crc32+0xf4>)
    70be:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    70c0:	68fb      	ldr	r3, [r7, #12]
    70c2:	681a      	ldr	r2, [r3, #0]
    70c4:	683b      	ldr	r3, [r7, #0]
    70c6:	681b      	ldr	r3, [r3, #0]
    70c8:	4619      	mov	r1, r3
    70ca:	4610      	mov	r0, r2
    70cc:	4b26      	ldr	r3, [pc, #152]	; (7168 <_crc_sync_crc32+0xf8>)
    70ce:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    70d0:	68fb      	ldr	r3, [r7, #12]
    70d2:	681b      	ldr	r3, [r3, #0]
    70d4:	2104      	movs	r1, #4
    70d6:	4618      	mov	r0, r3
    70d8:	4b24      	ldr	r3, [pc, #144]	; (716c <_crc_sync_crc32+0xfc>)
    70da:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    70dc:	bf00      	nop
    70de:	68fb      	ldr	r3, [r7, #12]
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	4618      	mov	r0, r3
    70e4:	4b22      	ldr	r3, [pc, #136]	; (7170 <_crc_sync_crc32+0x100>)
    70e6:	4798      	blx	r3
    70e8:	4603      	mov	r3, r0
    70ea:	f083 0301 	eor.w	r3, r3, #1
    70ee:	b2db      	uxtb	r3, r3
    70f0:	2b00      	cmp	r3, #0
    70f2:	d1f4      	bne.n	70de <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    70f4:	68fb      	ldr	r3, [r7, #12]
    70f6:	681b      	ldr	r3, [r3, #0]
    70f8:	4618      	mov	r0, r3
    70fa:	4b1e      	ldr	r3, [pc, #120]	; (7174 <_crc_sync_crc32+0x104>)
    70fc:	4798      	blx	r3
    70fe:	4603      	mov	r3, r0
    7100:	2b00      	cmp	r3, #0
    7102:	d00d      	beq.n	7120 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    7104:	68fb      	ldr	r3, [r7, #12]
    7106:	681b      	ldr	r3, [r3, #0]
    7108:	4618      	mov	r0, r3
    710a:	4b1b      	ldr	r3, [pc, #108]	; (7178 <_crc_sync_crc32+0x108>)
    710c:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    710e:	68fb      	ldr	r3, [r7, #12]
    7110:	681b      	ldr	r3, [r3, #0]
    7112:	4618      	mov	r0, r3
    7114:	4b19      	ldr	r3, [pc, #100]	; (717c <_crc_sync_crc32+0x10c>)
    7116:	4798      	blx	r3
		rc = ERR_IO;
    7118:	f06f 0305 	mvn.w	r3, #5
    711c:	617b      	str	r3, [r7, #20]
    711e:	e007      	b.n	7130 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    7120:	68fb      	ldr	r3, [r7, #12]
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	4618      	mov	r0, r3
    7126:	4b16      	ldr	r3, [pc, #88]	; (7180 <_crc_sync_crc32+0x110>)
    7128:	4798      	blx	r3
    712a:	4602      	mov	r2, r0
    712c:	683b      	ldr	r3, [r7, #0]
    712e:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    7130:	68fb      	ldr	r3, [r7, #12]
    7132:	681b      	ldr	r3, [r3, #0]
    7134:	4618      	mov	r0, r3
    7136:	4b11      	ldr	r3, [pc, #68]	; (717c <_crc_sync_crc32+0x10c>)
    7138:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    713a:	68fb      	ldr	r3, [r7, #12]
    713c:	681b      	ldr	r3, [r3, #0]
    713e:	4618      	mov	r0, r3
    7140:	4b10      	ldr	r3, [pc, #64]	; (7184 <_crc_sync_crc32+0x114>)
    7142:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    7144:	f107 0310 	add.w	r3, r7, #16
    7148:	4618      	mov	r0, r3
    714a:	4b0f      	ldr	r3, [pc, #60]	; (7188 <_crc_sync_crc32+0x118>)
    714c:	4798      	blx	r3

	return rc;
    714e:	697b      	ldr	r3, [r7, #20]
}
    7150:	4618      	mov	r0, r3
    7152:	3718      	adds	r7, #24
    7154:	46bd      	mov	sp, r7
    7156:	bd80      	pop	{r7, pc}
    7158:	0000e59d 	.word	0x0000e59d
    715c:	000083d9 	.word	0x000083d9
    7160:	00006f15 	.word	0x00006f15
    7164:	00006f31 	.word	0x00006f31
    7168:	00006f65 	.word	0x00006f65
    716c:	0000701f 	.word	0x0000701f
    7170:	00006f99 	.word	0x00006f99
    7174:	00006fdb 	.word	0x00006fdb
    7178:	00007005 	.word	0x00007005
    717c:	00006fc1 	.word	0x00006fc1
    7180:	00006f81 	.word	0x00006f81
    7184:	0000834d 	.word	0x0000834d
    7188:	0000e5c3 	.word	0x0000e5c3

0000718c <__NVIC_EnableIRQ>:
{
    718c:	b480      	push	{r7}
    718e:	b083      	sub	sp, #12
    7190:	af00      	add	r7, sp, #0
    7192:	4603      	mov	r3, r0
    7194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    719a:	2b00      	cmp	r3, #0
    719c:	db0b      	blt.n	71b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    719e:	4909      	ldr	r1, [pc, #36]	; (71c4 <__NVIC_EnableIRQ+0x38>)
    71a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71a4:	095b      	lsrs	r3, r3, #5
    71a6:	88fa      	ldrh	r2, [r7, #6]
    71a8:	f002 021f 	and.w	r2, r2, #31
    71ac:	2001      	movs	r0, #1
    71ae:	fa00 f202 	lsl.w	r2, r0, r2
    71b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71b6:	bf00      	nop
    71b8:	370c      	adds	r7, #12
    71ba:	46bd      	mov	sp, r7
    71bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    71c0:	4770      	bx	lr
    71c2:	bf00      	nop
    71c4:	e000e100 	.word	0xe000e100

000071c8 <__NVIC_DisableIRQ>:
{
    71c8:	b480      	push	{r7}
    71ca:	b083      	sub	sp, #12
    71cc:	af00      	add	r7, sp, #0
    71ce:	4603      	mov	r3, r0
    71d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71d6:	2b00      	cmp	r3, #0
    71d8:	db10      	blt.n	71fc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71da:	490b      	ldr	r1, [pc, #44]	; (7208 <__NVIC_DisableIRQ+0x40>)
    71dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71e0:	095b      	lsrs	r3, r3, #5
    71e2:	88fa      	ldrh	r2, [r7, #6]
    71e4:	f002 021f 	and.w	r2, r2, #31
    71e8:	2001      	movs	r0, #1
    71ea:	fa00 f202 	lsl.w	r2, r0, r2
    71ee:	3320      	adds	r3, #32
    71f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    71f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    71f8:	f3bf 8f6f 	isb	sy
}
    71fc:	bf00      	nop
    71fe:	370c      	adds	r7, #12
    7200:	46bd      	mov	sp, r7
    7202:	f85d 7b04 	ldr.w	r7, [sp], #4
    7206:	4770      	bx	lr
    7208:	e000e100 	.word	0xe000e100

0000720c <__NVIC_ClearPendingIRQ>:
{
    720c:	b480      	push	{r7}
    720e:	b083      	sub	sp, #12
    7210:	af00      	add	r7, sp, #0
    7212:	4603      	mov	r3, r0
    7214:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    721a:	2b00      	cmp	r3, #0
    721c:	db0c      	blt.n	7238 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    721e:	4909      	ldr	r1, [pc, #36]	; (7244 <__NVIC_ClearPendingIRQ+0x38>)
    7220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7224:	095b      	lsrs	r3, r3, #5
    7226:	88fa      	ldrh	r2, [r7, #6]
    7228:	f002 021f 	and.w	r2, r2, #31
    722c:	2001      	movs	r0, #1
    722e:	fa00 f202 	lsl.w	r2, r0, r2
    7232:	3360      	adds	r3, #96	; 0x60
    7234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7238:	bf00      	nop
    723a:	370c      	adds	r7, #12
    723c:	46bd      	mov	sp, r7
    723e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7242:	4770      	bx	lr
    7244:	e000e100 	.word	0xe000e100

00007248 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    7248:	b480      	push	{r7}
    724a:	b083      	sub	sp, #12
    724c:	af00      	add	r7, sp, #0
    724e:	6078      	str	r0, [r7, #4]
    7250:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    7252:	bf00      	nop
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	685a      	ldr	r2, [r3, #4]
    7258:	683b      	ldr	r3, [r7, #0]
    725a:	4013      	ands	r3, r2
    725c:	2b00      	cmp	r3, #0
    725e:	d1f9      	bne.n	7254 <hri_eic_wait_for_sync+0xc>
	};
}
    7260:	bf00      	nop
    7262:	370c      	adds	r7, #12
    7264:	46bd      	mov	sp, r7
    7266:	f85d 7b04 	ldr.w	r7, [sp], #4
    726a:	4770      	bx	lr

0000726c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    726c:	b480      	push	{r7}
    726e:	b083      	sub	sp, #12
    7270:	af00      	add	r7, sp, #0
    7272:	6078      	str	r0, [r7, #4]
    7274:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	685a      	ldr	r2, [r3, #4]
    727a:	683b      	ldr	r3, [r7, #0]
    727c:	4013      	ands	r3, r2
    727e:	2b00      	cmp	r3, #0
    7280:	bf14      	ite	ne
    7282:	2301      	movne	r3, #1
    7284:	2300      	moveq	r3, #0
    7286:	b2db      	uxtb	r3, r3
}
    7288:	4618      	mov	r0, r3
    728a:	370c      	adds	r7, #12
    728c:	46bd      	mov	sp, r7
    728e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7292:	4770      	bx	lr

00007294 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    7294:	b480      	push	{r7}
    7296:	b083      	sub	sp, #12
    7298:	af00      	add	r7, sp, #0
    729a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    729c:	687b      	ldr	r3, [r7, #4]
    729e:	695b      	ldr	r3, [r3, #20]
}
    72a0:	4618      	mov	r0, r3
    72a2:	370c      	adds	r7, #12
    72a4:	46bd      	mov	sp, r7
    72a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72aa:	4770      	bx	lr

000072ac <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    72ac:	b480      	push	{r7}
    72ae:	b083      	sub	sp, #12
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
    72b4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    72b6:	687b      	ldr	r3, [r7, #4]
    72b8:	683a      	ldr	r2, [r7, #0]
    72ba:	615a      	str	r2, [r3, #20]
}
    72bc:	bf00      	nop
    72be:	370c      	adds	r7, #12
    72c0:	46bd      	mov	sp, r7
    72c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72c6:	4770      	bx	lr

000072c8 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    72c8:	b480      	push	{r7}
    72ca:	b083      	sub	sp, #12
    72cc:	af00      	add	r7, sp, #0
    72ce:	6078      	str	r0, [r7, #4]
    72d0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	683a      	ldr	r2, [r7, #0]
    72d6:	611a      	str	r2, [r3, #16]
}
    72d8:	bf00      	nop
    72da:	370c      	adds	r7, #12
    72dc:	46bd      	mov	sp, r7
    72de:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e2:	4770      	bx	lr

000072e4 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    72e4:	b480      	push	{r7}
    72e6:	b083      	sub	sp, #12
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
    72ec:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    72ee:	687b      	ldr	r3, [r7, #4]
    72f0:	683a      	ldr	r2, [r7, #0]
    72f2:	60da      	str	r2, [r3, #12]
}
    72f4:	bf00      	nop
    72f6:	370c      	adds	r7, #12
    72f8:	46bd      	mov	sp, r7
    72fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    72fe:	4770      	bx	lr

00007300 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7300:	b580      	push	{r7, lr}
    7302:	b082      	sub	sp, #8
    7304:	af00      	add	r7, sp, #0
    7306:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	781b      	ldrb	r3, [r3, #0]
    730c:	b2db      	uxtb	r3, r3
    730e:	f043 0302 	orr.w	r3, r3, #2
    7312:	b2da      	uxtb	r2, r3
    7314:	687b      	ldr	r3, [r7, #4]
    7316:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7318:	2103      	movs	r1, #3
    731a:	6878      	ldr	r0, [r7, #4]
    731c:	4b02      	ldr	r3, [pc, #8]	; (7328 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    731e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7320:	bf00      	nop
    7322:	3708      	adds	r7, #8
    7324:	46bd      	mov	sp, r7
    7326:	bd80      	pop	{r7, pc}
    7328:	00007249 	.word	0x00007249

0000732c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    732c:	b580      	push	{r7, lr}
    732e:	b082      	sub	sp, #8
    7330:	af00      	add	r7, sp, #0
    7332:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	781b      	ldrb	r3, [r3, #0]
    7338:	b2db      	uxtb	r3, r3
    733a:	f023 0302 	bic.w	r3, r3, #2
    733e:	b2da      	uxtb	r2, r3
    7340:	687b      	ldr	r3, [r7, #4]
    7342:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7344:	2103      	movs	r1, #3
    7346:	6878      	ldr	r0, [r7, #4]
    7348:	4b02      	ldr	r3, [pc, #8]	; (7354 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    734a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    734c:	bf00      	nop
    734e:	3708      	adds	r7, #8
    7350:	46bd      	mov	sp, r7
    7352:	bd80      	pop	{r7, pc}
    7354:	00007249 	.word	0x00007249

00007358 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    7358:	b580      	push	{r7, lr}
    735a:	b084      	sub	sp, #16
    735c:	af00      	add	r7, sp, #0
    735e:	6078      	str	r0, [r7, #4]
    7360:	460b      	mov	r3, r1
    7362:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    736a:	7bfb      	ldrb	r3, [r7, #15]
    736c:	f023 0310 	bic.w	r3, r3, #16
    7370:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    7372:	78fb      	ldrb	r3, [r7, #3]
    7374:	011b      	lsls	r3, r3, #4
    7376:	b25a      	sxtb	r2, r3
    7378:	f997 300f 	ldrsb.w	r3, [r7, #15]
    737c:	4313      	orrs	r3, r2
    737e:	b25b      	sxtb	r3, r3
    7380:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    7382:	687b      	ldr	r3, [r7, #4]
    7384:	7bfa      	ldrb	r2, [r7, #15]
    7386:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7388:	2103      	movs	r1, #3
    738a:	6878      	ldr	r0, [r7, #4]
    738c:	4b02      	ldr	r3, [pc, #8]	; (7398 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    738e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7390:	bf00      	nop
    7392:	3710      	adds	r7, #16
    7394:	46bd      	mov	sp, r7
    7396:	bd80      	pop	{r7, pc}
    7398:	00007249 	.word	0x00007249

0000739c <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    739c:	b580      	push	{r7, lr}
    739e:	b084      	sub	sp, #16
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
    73a4:	460b      	mov	r3, r1
    73a6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    73a8:	2103      	movs	r1, #3
    73aa:	6878      	ldr	r0, [r7, #4]
    73ac:	4b06      	ldr	r3, [pc, #24]	; (73c8 <hri_eic_get_CTRLA_reg+0x2c>)
    73ae:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	781b      	ldrb	r3, [r3, #0]
    73b4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    73b6:	7bfa      	ldrb	r2, [r7, #15]
    73b8:	78fb      	ldrb	r3, [r7, #3]
    73ba:	4013      	ands	r3, r2
    73bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    73be:	7bfb      	ldrb	r3, [r7, #15]
}
    73c0:	4618      	mov	r0, r3
    73c2:	3710      	adds	r7, #16
    73c4:	46bd      	mov	sp, r7
    73c6:	bd80      	pop	{r7, pc}
    73c8:	00007249 	.word	0x00007249

000073cc <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    73cc:	b580      	push	{r7, lr}
    73ce:	b082      	sub	sp, #8
    73d0:	af00      	add	r7, sp, #0
    73d2:	6078      	str	r0, [r7, #4]
    73d4:	460b      	mov	r3, r1
    73d6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    73d8:	687b      	ldr	r3, [r7, #4]
    73da:	78fa      	ldrb	r2, [r7, #3]
    73dc:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    73de:	2103      	movs	r1, #3
    73e0:	6878      	ldr	r0, [r7, #4]
    73e2:	4b03      	ldr	r3, [pc, #12]	; (73f0 <hri_eic_write_CTRLA_reg+0x24>)
    73e4:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    73e6:	bf00      	nop
    73e8:	3708      	adds	r7, #8
    73ea:	46bd      	mov	sp, r7
    73ec:	bd80      	pop	{r7, pc}
    73ee:	bf00      	nop
    73f0:	00007249 	.word	0x00007249

000073f4 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    73f4:	b480      	push	{r7}
    73f6:	b083      	sub	sp, #12
    73f8:	af00      	add	r7, sp, #0
    73fa:	6078      	str	r0, [r7, #4]
    73fc:	460b      	mov	r3, r1
    73fe:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	78fa      	ldrb	r2, [r7, #3]
    7404:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7406:	bf00      	nop
    7408:	370c      	adds	r7, #12
    740a:	46bd      	mov	sp, r7
    740c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7410:	4770      	bx	lr

00007412 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    7412:	b480      	push	{r7}
    7414:	b083      	sub	sp, #12
    7416:	af00      	add	r7, sp, #0
    7418:	6078      	str	r0, [r7, #4]
    741a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	683a      	ldr	r2, [r7, #0]
    7420:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7422:	bf00      	nop
    7424:	370c      	adds	r7, #12
    7426:	46bd      	mov	sp, r7
    7428:	f85d 7b04 	ldr.w	r7, [sp], #4
    742c:	4770      	bx	lr

0000742e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    742e:	b480      	push	{r7}
    7430:	b083      	sub	sp, #12
    7432:	af00      	add	r7, sp, #0
    7434:	6078      	str	r0, [r7, #4]
    7436:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    7438:	687b      	ldr	r3, [r7, #4]
    743a:	683a      	ldr	r2, [r7, #0]
    743c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    743e:	bf00      	nop
    7440:	370c      	adds	r7, #12
    7442:	46bd      	mov	sp, r7
    7444:	f85d 7b04 	ldr.w	r7, [sp], #4
    7448:	4770      	bx	lr

0000744a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    744a:	b480      	push	{r7}
    744c:	b085      	sub	sp, #20
    744e:	af00      	add	r7, sp, #0
    7450:	60f8      	str	r0, [r7, #12]
    7452:	460b      	mov	r3, r1
    7454:	607a      	str	r2, [r7, #4]
    7456:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    7458:	7afb      	ldrb	r3, [r7, #11]
    745a:	68fa      	ldr	r2, [r7, #12]
    745c:	3306      	adds	r3, #6
    745e:	009b      	lsls	r3, r3, #2
    7460:	4413      	add	r3, r2
    7462:	687a      	ldr	r2, [r7, #4]
    7464:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7466:	bf00      	nop
    7468:	3714      	adds	r7, #20
    746a:	46bd      	mov	sp, r7
    746c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7470:	4770      	bx	lr

00007472 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    7472:	b480      	push	{r7}
    7474:	b083      	sub	sp, #12
    7476:	af00      	add	r7, sp, #0
    7478:	6078      	str	r0, [r7, #4]
    747a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    747c:	687b      	ldr	r3, [r7, #4]
    747e:	683a      	ldr	r2, [r7, #0]
    7480:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    7482:	bf00      	nop
    7484:	370c      	adds	r7, #12
    7486:	46bd      	mov	sp, r7
    7488:	f85d 7b04 	ldr.w	r7, [sp], #4
    748c:	4770      	bx	lr

0000748e <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    748e:	b480      	push	{r7}
    7490:	b083      	sub	sp, #12
    7492:	af00      	add	r7, sp, #0
    7494:	6078      	str	r0, [r7, #4]
    7496:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    7498:	687b      	ldr	r3, [r7, #4]
    749a:	683a      	ldr	r2, [r7, #0]
    749c:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    749e:	bf00      	nop
    74a0:	370c      	adds	r7, #12
    74a2:	46bd      	mov	sp, r7
    74a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    74a8:	4770      	bx	lr
	...

000074ac <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    74ac:	b580      	push	{r7, lr}
    74ae:	b082      	sub	sp, #8
    74b0:	af00      	add	r7, sp, #0
    74b2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    74b4:	2101      	movs	r1, #1
    74b6:	4838      	ldr	r0, [pc, #224]	; (7598 <_ext_irq_init+0xec>)
    74b8:	4b38      	ldr	r3, [pc, #224]	; (759c <_ext_irq_init+0xf0>)
    74ba:	4798      	blx	r3
    74bc:	4603      	mov	r3, r0
    74be:	f083 0301 	eor.w	r3, r3, #1
    74c2:	b2db      	uxtb	r3, r3
    74c4:	2b00      	cmp	r3, #0
    74c6:	d011      	beq.n	74ec <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    74c8:	2102      	movs	r1, #2
    74ca:	4833      	ldr	r0, [pc, #204]	; (7598 <_ext_irq_init+0xec>)
    74cc:	4b34      	ldr	r3, [pc, #208]	; (75a0 <_ext_irq_init+0xf4>)
    74ce:	4798      	blx	r3
    74d0:	4603      	mov	r3, r0
    74d2:	2b00      	cmp	r3, #0
    74d4:	d006      	beq.n	74e4 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    74d6:	4830      	ldr	r0, [pc, #192]	; (7598 <_ext_irq_init+0xec>)
    74d8:	4b32      	ldr	r3, [pc, #200]	; (75a4 <_ext_irq_init+0xf8>)
    74da:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    74dc:	2102      	movs	r1, #2
    74de:	482e      	ldr	r0, [pc, #184]	; (7598 <_ext_irq_init+0xec>)
    74e0:	4b31      	ldr	r3, [pc, #196]	; (75a8 <_ext_irq_init+0xfc>)
    74e2:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    74e4:	2101      	movs	r1, #1
    74e6:	482c      	ldr	r0, [pc, #176]	; (7598 <_ext_irq_init+0xec>)
    74e8:	4b30      	ldr	r3, [pc, #192]	; (75ac <_ext_irq_init+0x100>)
    74ea:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    74ec:	2101      	movs	r1, #1
    74ee:	482a      	ldr	r0, [pc, #168]	; (7598 <_ext_irq_init+0xec>)
    74f0:	4b2d      	ldr	r3, [pc, #180]	; (75a8 <_ext_irq_init+0xfc>)
    74f2:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    74f4:	2100      	movs	r1, #0
    74f6:	4828      	ldr	r0, [pc, #160]	; (7598 <_ext_irq_init+0xec>)
    74f8:	4b2d      	ldr	r3, [pc, #180]	; (75b0 <_ext_irq_init+0x104>)
    74fa:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    74fc:	2100      	movs	r1, #0
    74fe:	4826      	ldr	r0, [pc, #152]	; (7598 <_ext_irq_init+0xec>)
    7500:	4b2c      	ldr	r3, [pc, #176]	; (75b4 <_ext_irq_init+0x108>)
    7502:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    7504:	2100      	movs	r1, #0
    7506:	4824      	ldr	r0, [pc, #144]	; (7598 <_ext_irq_init+0xec>)
    7508:	4b2b      	ldr	r3, [pc, #172]	; (75b8 <_ext_irq_init+0x10c>)
    750a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    750c:	2130      	movs	r1, #48	; 0x30
    750e:	4822      	ldr	r0, [pc, #136]	; (7598 <_ext_irq_init+0xec>)
    7510:	4b2a      	ldr	r3, [pc, #168]	; (75bc <_ext_irq_init+0x110>)
    7512:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    7514:	2130      	movs	r1, #48	; 0x30
    7516:	4820      	ldr	r0, [pc, #128]	; (7598 <_ext_irq_init+0xec>)
    7518:	4b29      	ldr	r3, [pc, #164]	; (75c0 <_ext_irq_init+0x114>)
    751a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    751c:	2100      	movs	r1, #0
    751e:	481e      	ldr	r0, [pc, #120]	; (7598 <_ext_irq_init+0xec>)
    7520:	4b28      	ldr	r3, [pc, #160]	; (75c4 <_ext_irq_init+0x118>)
    7522:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7524:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    7528:	2100      	movs	r1, #0
    752a:	481b      	ldr	r0, [pc, #108]	; (7598 <_ext_irq_init+0xec>)
    752c:	4b26      	ldr	r3, [pc, #152]	; (75c8 <_ext_irq_init+0x11c>)
    752e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7530:	2200      	movs	r2, #0
    7532:	2101      	movs	r1, #1
    7534:	4818      	ldr	r0, [pc, #96]	; (7598 <_ext_irq_init+0xec>)
    7536:	4b24      	ldr	r3, [pc, #144]	; (75c8 <_ext_irq_init+0x11c>)
    7538:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    753a:	4817      	ldr	r0, [pc, #92]	; (7598 <_ext_irq_init+0xec>)
    753c:	4b23      	ldr	r3, [pc, #140]	; (75cc <_ext_irq_init+0x120>)
    753e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    7540:	2010      	movs	r0, #16
    7542:	4b23      	ldr	r3, [pc, #140]	; (75d0 <_ext_irq_init+0x124>)
    7544:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    7546:	2010      	movs	r0, #16
    7548:	4b22      	ldr	r3, [pc, #136]	; (75d4 <_ext_irq_init+0x128>)
    754a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    754c:	2010      	movs	r0, #16
    754e:	4b22      	ldr	r3, [pc, #136]	; (75d8 <_ext_irq_init+0x12c>)
    7550:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    7552:	2011      	movs	r0, #17
    7554:	4b1e      	ldr	r3, [pc, #120]	; (75d0 <_ext_irq_init+0x124>)
    7556:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    7558:	2011      	movs	r0, #17
    755a:	4b1e      	ldr	r3, [pc, #120]	; (75d4 <_ext_irq_init+0x128>)
    755c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    755e:	2011      	movs	r0, #17
    7560:	4b1d      	ldr	r3, [pc, #116]	; (75d8 <_ext_irq_init+0x12c>)
    7562:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    7564:	2012      	movs	r0, #18
    7566:	4b1a      	ldr	r3, [pc, #104]	; (75d0 <_ext_irq_init+0x124>)
    7568:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    756a:	2012      	movs	r0, #18
    756c:	4b19      	ldr	r3, [pc, #100]	; (75d4 <_ext_irq_init+0x128>)
    756e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    7570:	2012      	movs	r0, #18
    7572:	4b19      	ldr	r3, [pc, #100]	; (75d8 <_ext_irq_init+0x12c>)
    7574:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    7576:	2013      	movs	r0, #19
    7578:	4b15      	ldr	r3, [pc, #84]	; (75d0 <_ext_irq_init+0x124>)
    757a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    757c:	2013      	movs	r0, #19
    757e:	4b15      	ldr	r3, [pc, #84]	; (75d4 <_ext_irq_init+0x128>)
    7580:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    7582:	2013      	movs	r0, #19
    7584:	4b14      	ldr	r3, [pc, #80]	; (75d8 <_ext_irq_init+0x12c>)
    7586:	4798      	blx	r3

	callback = cb;
    7588:	4a14      	ldr	r2, [pc, #80]	; (75dc <_ext_irq_init+0x130>)
    758a:	687b      	ldr	r3, [r7, #4]
    758c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    758e:	2300      	movs	r3, #0
}
    7590:	4618      	mov	r0, r3
    7592:	3708      	adds	r7, #8
    7594:	46bd      	mov	sp, r7
    7596:	bd80      	pop	{r7, pc}
    7598:	40002800 	.word	0x40002800
    759c:	0000726d 	.word	0x0000726d
    75a0:	0000739d 	.word	0x0000739d
    75a4:	0000732d 	.word	0x0000732d
    75a8:	00007249 	.word	0x00007249
    75ac:	000073cd 	.word	0x000073cd
    75b0:	00007359 	.word	0x00007359
    75b4:	000073f5 	.word	0x000073f5
    75b8:	00007413 	.word	0x00007413
    75bc:	0000742f 	.word	0x0000742f
    75c0:	00007473 	.word	0x00007473
    75c4:	0000748f 	.word	0x0000748f
    75c8:	0000744b 	.word	0x0000744b
    75cc:	00007301 	.word	0x00007301
    75d0:	000071c9 	.word	0x000071c9
    75d4:	0000720d 	.word	0x0000720d
    75d8:	0000718d 	.word	0x0000718d
    75dc:	20003388 	.word	0x20003388

000075e0 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    75e0:	b580      	push	{r7, lr}
    75e2:	b084      	sub	sp, #16
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
    75e8:	460b      	mov	r3, r1
    75ea:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    75ec:	23ff      	movs	r3, #255	; 0xff
    75ee:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    75f0:	2300      	movs	r3, #0
    75f2:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    75f4:	e010      	b.n	7618 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    75f6:	7bbb      	ldrb	r3, [r7, #14]
    75f8:	4a1c      	ldr	r2, [pc, #112]	; (766c <_ext_irq_enable+0x8c>)
    75fa:	00db      	lsls	r3, r3, #3
    75fc:	4413      	add	r3, r2
    75fe:	685a      	ldr	r2, [r3, #4]
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	429a      	cmp	r2, r3
    7604:	d105      	bne.n	7612 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    7606:	7bbb      	ldrb	r3, [r7, #14]
    7608:	4a18      	ldr	r2, [pc, #96]	; (766c <_ext_irq_enable+0x8c>)
    760a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    760e:	73fb      	strb	r3, [r7, #15]
			break;
    7610:	e005      	b.n	761e <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    7612:	7bbb      	ldrb	r3, [r7, #14]
    7614:	3301      	adds	r3, #1
    7616:	73bb      	strb	r3, [r7, #14]
    7618:	7bbb      	ldrb	r3, [r7, #14]
    761a:	2b03      	cmp	r3, #3
    761c:	d9eb      	bls.n	75f6 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    761e:	7bfb      	ldrb	r3, [r7, #15]
    7620:	2bff      	cmp	r3, #255	; 0xff
    7622:	d102      	bne.n	762a <_ext_irq_enable+0x4a>
		return -1;
    7624:	f04f 33ff 	mov.w	r3, #4294967295
    7628:	e01c      	b.n	7664 <_ext_irq_enable+0x84>
	}

	if (enable) {
    762a:	78fb      	ldrb	r3, [r7, #3]
    762c:	2b00      	cmp	r3, #0
    762e:	d008      	beq.n	7642 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    7630:	7bfb      	ldrb	r3, [r7, #15]
    7632:	2201      	movs	r2, #1
    7634:	fa02 f303 	lsl.w	r3, r2, r3
    7638:	4619      	mov	r1, r3
    763a:	480d      	ldr	r0, [pc, #52]	; (7670 <_ext_irq_enable+0x90>)
    763c:	4b0d      	ldr	r3, [pc, #52]	; (7674 <_ext_irq_enable+0x94>)
    763e:	4798      	blx	r3
    7640:	e00f      	b.n	7662 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    7642:	7bfb      	ldrb	r3, [r7, #15]
    7644:	2201      	movs	r2, #1
    7646:	fa02 f303 	lsl.w	r3, r2, r3
    764a:	4619      	mov	r1, r3
    764c:	4808      	ldr	r0, [pc, #32]	; (7670 <_ext_irq_enable+0x90>)
    764e:	4b0a      	ldr	r3, [pc, #40]	; (7678 <_ext_irq_enable+0x98>)
    7650:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    7652:	7bfb      	ldrb	r3, [r7, #15]
    7654:	2201      	movs	r2, #1
    7656:	fa02 f303 	lsl.w	r3, r2, r3
    765a:	4619      	mov	r1, r3
    765c:	4804      	ldr	r0, [pc, #16]	; (7670 <_ext_irq_enable+0x90>)
    765e:	4b07      	ldr	r3, [pc, #28]	; (767c <_ext_irq_enable+0x9c>)
    7660:	4798      	blx	r3
	}

	return ERR_NONE;
    7662:	2300      	movs	r3, #0
}
    7664:	4618      	mov	r0, r3
    7666:	3710      	adds	r7, #16
    7668:	46bd      	mov	sp, r7
    766a:	bd80      	pop	{r7, pc}
    766c:	0001abd0 	.word	0x0001abd0
    7670:	40002800 	.word	0x40002800
    7674:	000072c9 	.word	0x000072c9
    7678:	000072e5 	.word	0x000072e5
    767c:	000072ad 	.word	0x000072ad

00007680 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    7680:	b580      	push	{r7, lr}
    7682:	b084      	sub	sp, #16
    7684:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    7686:	4841      	ldr	r0, [pc, #260]	; (778c <_ext_irq_handler+0x10c>)
    7688:	4b41      	ldr	r3, [pc, #260]	; (7790 <_ext_irq_handler+0x110>)
    768a:	4798      	blx	r3
    768c:	4603      	mov	r3, r0
    768e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    7690:	f04f 33ff 	mov.w	r3, #4294967295
    7694:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    7696:	683b      	ldr	r3, [r7, #0]
    7698:	4619      	mov	r1, r3
    769a:	483c      	ldr	r0, [pc, #240]	; (778c <_ext_irq_handler+0x10c>)
    769c:	4b3d      	ldr	r3, [pc, #244]	; (7794 <_ext_irq_handler+0x114>)
    769e:	4798      	blx	r3

	ASSERT(callback);
    76a0:	4b3d      	ldr	r3, [pc, #244]	; (7798 <_ext_irq_handler+0x118>)
    76a2:	681b      	ldr	r3, [r3, #0]
    76a4:	2b00      	cmp	r3, #0
    76a6:	bf14      	ite	ne
    76a8:	2301      	movne	r3, #1
    76aa:	2300      	moveq	r3, #0
    76ac:	b2db      	uxtb	r3, r3
    76ae:	22f4      	movs	r2, #244	; 0xf4
    76b0:	493a      	ldr	r1, [pc, #232]	; (779c <_ext_irq_handler+0x11c>)
    76b2:	4618      	mov	r0, r3
    76b4:	4b3a      	ldr	r3, [pc, #232]	; (77a0 <_ext_irq_handler+0x120>)
    76b6:	4798      	blx	r3

	while (flags) {
    76b8:	e060      	b.n	777c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    76ba:	683b      	ldr	r3, [r7, #0]
    76bc:	4618      	mov	r0, r3
    76be:	4b39      	ldr	r3, [pc, #228]	; (77a4 <_ext_irq_handler+0x124>)
    76c0:	4798      	blx	r3
    76c2:	4603      	mov	r3, r0
    76c4:	b2db      	uxtb	r3, r3
    76c6:	3b01      	subs	r3, #1
    76c8:	b2db      	uxtb	r3, r3
    76ca:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    76cc:	e047      	b.n	775e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    76ce:	2300      	movs	r3, #0
    76d0:	71fb      	strb	r3, [r7, #7]
    76d2:	2304      	movs	r3, #4
    76d4:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    76d6:	e024      	b.n	7722 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    76d8:	79ba      	ldrb	r2, [r7, #6]
    76da:	79fb      	ldrb	r3, [r7, #7]
    76dc:	4413      	add	r3, r2
    76de:	105b      	asrs	r3, r3, #1
    76e0:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    76e2:	797b      	ldrb	r3, [r7, #5]
    76e4:	4a30      	ldr	r2, [pc, #192]	; (77a8 <_ext_irq_handler+0x128>)
    76e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    76ea:	461a      	mov	r2, r3
    76ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    76f0:	429a      	cmp	r2, r3
    76f2:	d106      	bne.n	7702 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    76f4:	797b      	ldrb	r3, [r7, #5]
    76f6:	4a2c      	ldr	r2, [pc, #176]	; (77a8 <_ext_irq_handler+0x128>)
    76f8:	00db      	lsls	r3, r3, #3
    76fa:	4413      	add	r3, r2
    76fc:	685b      	ldr	r3, [r3, #4]
    76fe:	60bb      	str	r3, [r7, #8]
					break;
    7700:	e013      	b.n	772a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7702:	797b      	ldrb	r3, [r7, #5]
    7704:	4a28      	ldr	r2, [pc, #160]	; (77a8 <_ext_irq_handler+0x128>)
    7706:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    770a:	461a      	mov	r2, r3
    770c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7710:	429a      	cmp	r2, r3
    7712:	da03      	bge.n	771c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    7714:	797b      	ldrb	r3, [r7, #5]
    7716:	3301      	adds	r3, #1
    7718:	71fb      	strb	r3, [r7, #7]
    771a:	e002      	b.n	7722 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    771c:	797b      	ldrb	r3, [r7, #5]
    771e:	3b01      	subs	r3, #1
    7720:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    7722:	79ba      	ldrb	r2, [r7, #6]
    7724:	79fb      	ldrb	r3, [r7, #7]
    7726:	429a      	cmp	r2, r3
    7728:	d2d6      	bcs.n	76d8 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    772a:	68bb      	ldr	r3, [r7, #8]
    772c:	f1b3 3fff 	cmp.w	r3, #4294967295
    7730:	d003      	beq.n	773a <_ext_irq_handler+0xba>
				callback(pin);
    7732:	4b19      	ldr	r3, [pc, #100]	; (7798 <_ext_irq_handler+0x118>)
    7734:	681b      	ldr	r3, [r3, #0]
    7736:	68b8      	ldr	r0, [r7, #8]
    7738:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    773a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    773e:	2201      	movs	r2, #1
    7740:	fa02 f303 	lsl.w	r3, r2, r3
    7744:	43da      	mvns	r2, r3
    7746:	683b      	ldr	r3, [r7, #0]
    7748:	4013      	ands	r3, r2
    774a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    774c:	683b      	ldr	r3, [r7, #0]
    774e:	4618      	mov	r0, r3
    7750:	4b14      	ldr	r3, [pc, #80]	; (77a4 <_ext_irq_handler+0x124>)
    7752:	4798      	blx	r3
    7754:	4603      	mov	r3, r0
    7756:	b2db      	uxtb	r3, r3
    7758:	3b01      	subs	r3, #1
    775a:	b2db      	uxtb	r3, r3
    775c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7762:	f1b3 3fff 	cmp.w	r3, #4294967295
    7766:	d1b2      	bne.n	76ce <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    7768:	4808      	ldr	r0, [pc, #32]	; (778c <_ext_irq_handler+0x10c>)
    776a:	4b09      	ldr	r3, [pc, #36]	; (7790 <_ext_irq_handler+0x110>)
    776c:	4798      	blx	r3
    776e:	4603      	mov	r3, r0
    7770:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    7772:	683b      	ldr	r3, [r7, #0]
    7774:	4619      	mov	r1, r3
    7776:	4805      	ldr	r0, [pc, #20]	; (778c <_ext_irq_handler+0x10c>)
    7778:	4b06      	ldr	r3, [pc, #24]	; (7794 <_ext_irq_handler+0x114>)
    777a:	4798      	blx	r3
	while (flags) {
    777c:	683b      	ldr	r3, [r7, #0]
    777e:	2b00      	cmp	r3, #0
    7780:	d19b      	bne.n	76ba <_ext_irq_handler+0x3a>
	}
}
    7782:	bf00      	nop
    7784:	3710      	adds	r7, #16
    7786:	46bd      	mov	sp, r7
    7788:	bd80      	pop	{r7, pc}
    778a:	bf00      	nop
    778c:	40002800 	.word	0x40002800
    7790:	00007295 	.word	0x00007295
    7794:	000072ad 	.word	0x000072ad
    7798:	20003388 	.word	0x20003388
    779c:	0001abf0 	.word	0x0001abf0
    77a0:	000062c5 	.word	0x000062c5
    77a4:	00016481 	.word	0x00016481
    77a8:	0001abd0 	.word	0x0001abd0

000077ac <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    77ac:	b580      	push	{r7, lr}
    77ae:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    77b0:	4b01      	ldr	r3, [pc, #4]	; (77b8 <EIC_4_Handler+0xc>)
    77b2:	4798      	blx	r3
} /**
    77b4:	bf00      	nop
    77b6:	bd80      	pop	{r7, pc}
    77b8:	00007681 	.word	0x00007681

000077bc <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    77bc:	b580      	push	{r7, lr}
    77be:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    77c0:	4b01      	ldr	r3, [pc, #4]	; (77c8 <EIC_5_Handler+0xc>)
    77c2:	4798      	blx	r3
} /**
    77c4:	bf00      	nop
    77c6:	bd80      	pop	{r7, pc}
    77c8:	00007681 	.word	0x00007681

000077cc <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    77cc:	b580      	push	{r7, lr}
    77ce:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    77d0:	4b01      	ldr	r3, [pc, #4]	; (77d8 <EIC_6_Handler+0xc>)
    77d2:	4798      	blx	r3
} /**
    77d4:	bf00      	nop
    77d6:	bd80      	pop	{r7, pc}
    77d8:	00007681 	.word	0x00007681

000077dc <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    77dc:	b580      	push	{r7, lr}
    77de:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    77e0:	4b01      	ldr	r3, [pc, #4]	; (77e8 <EIC_7_Handler+0xc>)
    77e2:	4798      	blx	r3
}
    77e4:	bf00      	nop
    77e6:	bd80      	pop	{r7, pc}
    77e8:	00007681 	.word	0x00007681

000077ec <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    77ec:	b480      	push	{r7}
    77ee:	b085      	sub	sp, #20
    77f0:	af00      	add	r7, sp, #0
    77f2:	60f8      	str	r0, [r7, #12]
    77f4:	460b      	mov	r3, r1
    77f6:	607a      	str	r2, [r7, #4]
    77f8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    77fa:	7afa      	ldrb	r2, [r7, #11]
    77fc:	68fb      	ldr	r3, [r7, #12]
    77fe:	3248      	adds	r2, #72	; 0x48
    7800:	6879      	ldr	r1, [r7, #4]
    7802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7806:	bf00      	nop
    7808:	3714      	adds	r7, #20
    780a:	46bd      	mov	sp, r7
    780c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7810:	4770      	bx	lr

00007812 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7812:	b480      	push	{r7}
    7814:	b083      	sub	sp, #12
    7816:	af00      	add	r7, sp, #0
    7818:	6078      	str	r0, [r7, #4]
    781a:	460b      	mov	r3, r1
    781c:	70fb      	strb	r3, [r7, #3]
    781e:	4613      	mov	r3, r2
    7820:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7822:	78fb      	ldrb	r3, [r7, #3]
    7824:	687a      	ldr	r2, [r7, #4]
    7826:	3304      	adds	r3, #4
    7828:	00db      	lsls	r3, r3, #3
    782a:	4413      	add	r3, r2
    782c:	78ba      	ldrb	r2, [r7, #2]
    782e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7830:	78fb      	ldrb	r3, [r7, #3]
    7832:	78ba      	ldrb	r2, [r7, #2]
    7834:	43d2      	mvns	r2, r2
    7836:	b2d1      	uxtb	r1, r2
    7838:	687a      	ldr	r2, [r7, #4]
    783a:	3304      	adds	r3, #4
    783c:	00db      	lsls	r3, r3, #3
    783e:	4413      	add	r3, r2
    7840:	460a      	mov	r2, r1
    7842:	711a      	strb	r2, [r3, #4]
}
    7844:	bf00      	nop
    7846:	370c      	adds	r7, #12
    7848:	46bd      	mov	sp, r7
    784a:	f85d 7b04 	ldr.w	r7, [sp], #4
    784e:	4770      	bx	lr

00007850 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    7850:	b480      	push	{r7}
    7852:	b085      	sub	sp, #20
    7854:	af00      	add	r7, sp, #0
    7856:	60f8      	str	r0, [r7, #12]
    7858:	460b      	mov	r3, r1
    785a:	607a      	str	r2, [r7, #4]
    785c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    785e:	7afa      	ldrb	r2, [r7, #11]
    7860:	68fb      	ldr	r3, [r7, #12]
    7862:	3204      	adds	r2, #4
    7864:	6879      	ldr	r1, [r7, #4]
    7866:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    786a:	bf00      	nop
    786c:	3714      	adds	r7, #20
    786e:	46bd      	mov	sp, r7
    7870:	f85d 7b04 	ldr.w	r7, [sp], #4
    7874:	4770      	bx	lr
	...

00007878 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7878:	b580      	push	{r7, lr}
    787a:	b082      	sub	sp, #8
    787c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    787e:	2300      	movs	r3, #0
    7880:	71fb      	strb	r3, [r7, #7]
    7882:	e00b      	b.n	789c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7884:	79fb      	ldrb	r3, [r7, #7]
    7886:	4a18      	ldr	r2, [pc, #96]	; (78e8 <_event_system_init+0x70>)
    7888:	5cd3      	ldrb	r3, [r2, r3]
    788a:	461a      	mov	r2, r3
    788c:	79fb      	ldrb	r3, [r7, #7]
    788e:	4619      	mov	r1, r3
    7890:	4816      	ldr	r0, [pc, #88]	; (78ec <_event_system_init+0x74>)
    7892:	4b17      	ldr	r3, [pc, #92]	; (78f0 <_event_system_init+0x78>)
    7894:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7896:	79fb      	ldrb	r3, [r7, #7]
    7898:	3301      	adds	r3, #1
    789a:	71fb      	strb	r3, [r7, #7]
    789c:	79fb      	ldrb	r3, [r7, #7]
    789e:	2b42      	cmp	r3, #66	; 0x42
    78a0:	d9f0      	bls.n	7884 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    78a2:	2300      	movs	r3, #0
    78a4:	71fb      	strb	r3, [r7, #7]
    78a6:	e016      	b.n	78d6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    78a8:	79fb      	ldrb	r3, [r7, #7]
    78aa:	4a12      	ldr	r2, [pc, #72]	; (78f4 <_event_system_init+0x7c>)
    78ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    78b0:	461a      	mov	r2, r3
    78b2:	79fb      	ldrb	r3, [r7, #7]
    78b4:	4619      	mov	r1, r3
    78b6:	480d      	ldr	r0, [pc, #52]	; (78ec <_event_system_init+0x74>)
    78b8:	4b0f      	ldr	r3, [pc, #60]	; (78f8 <_event_system_init+0x80>)
    78ba:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    78bc:	79fb      	ldrb	r3, [r7, #7]
    78be:	4a0f      	ldr	r2, [pc, #60]	; (78fc <_event_system_init+0x84>)
    78c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78c4:	b2da      	uxtb	r2, r3
    78c6:	79fb      	ldrb	r3, [r7, #7]
    78c8:	4619      	mov	r1, r3
    78ca:	4808      	ldr	r0, [pc, #32]	; (78ec <_event_system_init+0x74>)
    78cc:	4b0c      	ldr	r3, [pc, #48]	; (7900 <_event_system_init+0x88>)
    78ce:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    78d0:	79fb      	ldrb	r3, [r7, #7]
    78d2:	3301      	adds	r3, #1
    78d4:	71fb      	strb	r3, [r7, #7]
    78d6:	79fb      	ldrb	r3, [r7, #7]
    78d8:	2b1f      	cmp	r3, #31
    78da:	d9e5      	bls.n	78a8 <_event_system_init+0x30>
	}

	return ERR_NONE;
    78dc:	2300      	movs	r3, #0
}
    78de:	4618      	mov	r0, r3
    78e0:	3708      	adds	r7, #8
    78e2:	46bd      	mov	sp, r7
    78e4:	bd80      	pop	{r7, pc}
    78e6:	bf00      	nop
    78e8:	0001ac08 	.word	0x0001ac08
    78ec:	4100e000 	.word	0x4100e000
    78f0:	000077ed 	.word	0x000077ed
    78f4:	0001ac4c 	.word	0x0001ac4c
    78f8:	00007851 	.word	0x00007851
    78fc:	0001ac8c 	.word	0x0001ac8c
    7900:	00007813 	.word	0x00007813

00007904 <hri_gclk_wait_for_sync>:
{
    7904:	b480      	push	{r7}
    7906:	b083      	sub	sp, #12
    7908:	af00      	add	r7, sp, #0
    790a:	6078      	str	r0, [r7, #4]
    790c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    790e:	bf00      	nop
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	685a      	ldr	r2, [r3, #4]
    7914:	683b      	ldr	r3, [r7, #0]
    7916:	4013      	ands	r3, r2
    7918:	2b00      	cmp	r3, #0
    791a:	d1f9      	bne.n	7910 <hri_gclk_wait_for_sync+0xc>
}
    791c:	bf00      	nop
    791e:	370c      	adds	r7, #12
    7920:	46bd      	mov	sp, r7
    7922:	f85d 7b04 	ldr.w	r7, [sp], #4
    7926:	4770      	bx	lr

00007928 <hri_gclk_write_GENCTRL_reg>:
{
    7928:	b580      	push	{r7, lr}
    792a:	b084      	sub	sp, #16
    792c:	af00      	add	r7, sp, #0
    792e:	60f8      	str	r0, [r7, #12]
    7930:	460b      	mov	r3, r1
    7932:	607a      	str	r2, [r7, #4]
    7934:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7936:	7afa      	ldrb	r2, [r7, #11]
    7938:	68fb      	ldr	r3, [r7, #12]
    793a:	3208      	adds	r2, #8
    793c:	6879      	ldr	r1, [r7, #4]
    793e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7942:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7946:	68f8      	ldr	r0, [r7, #12]
    7948:	4b02      	ldr	r3, [pc, #8]	; (7954 <hri_gclk_write_GENCTRL_reg+0x2c>)
    794a:	4798      	blx	r3
}
    794c:	bf00      	nop
    794e:	3710      	adds	r7, #16
    7950:	46bd      	mov	sp, r7
    7952:	bd80      	pop	{r7, pc}
    7954:	00007905 	.word	0x00007905

00007958 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    7958:	b580      	push	{r7, lr}
    795a:	b082      	sub	sp, #8
    795c:	af00      	add	r7, sp, #0
    795e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	f003 0301 	and.w	r3, r3, #1
    7966:	2b00      	cmp	r3, #0
    7968:	d004      	beq.n	7974 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    796a:	4a27      	ldr	r2, [pc, #156]	; (7a08 <_gclk_init_generators_by_fref+0xb0>)
    796c:	2100      	movs	r1, #0
    796e:	4827      	ldr	r0, [pc, #156]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    7970:	4b27      	ldr	r3, [pc, #156]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    7972:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7974:	687b      	ldr	r3, [r7, #4]
    7976:	f003 0302 	and.w	r3, r3, #2
    797a:	2b00      	cmp	r3, #0
    797c:	d004      	beq.n	7988 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    797e:	4a25      	ldr	r2, [pc, #148]	; (7a14 <_gclk_init_generators_by_fref+0xbc>)
    7980:	2101      	movs	r1, #1
    7982:	4822      	ldr	r0, [pc, #136]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    7984:	4b22      	ldr	r3, [pc, #136]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    7986:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7988:	687b      	ldr	r3, [r7, #4]
    798a:	f003 0304 	and.w	r3, r3, #4
    798e:	2b00      	cmp	r3, #0
    7990:	d004      	beq.n	799c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    7992:	4a21      	ldr	r2, [pc, #132]	; (7a18 <_gclk_init_generators_by_fref+0xc0>)
    7994:	2102      	movs	r1, #2
    7996:	481d      	ldr	r0, [pc, #116]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    7998:	4b1d      	ldr	r3, [pc, #116]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    799a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	f003 0308 	and.w	r3, r3, #8
    79a2:	2b00      	cmp	r3, #0
    79a4:	d004      	beq.n	79b0 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    79a6:	4a1d      	ldr	r2, [pc, #116]	; (7a1c <_gclk_init_generators_by_fref+0xc4>)
    79a8:	2103      	movs	r1, #3
    79aa:	4818      	ldr	r0, [pc, #96]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    79ac:	4b18      	ldr	r3, [pc, #96]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    79ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	f003 0310 	and.w	r3, r3, #16
    79b6:	2b00      	cmp	r3, #0
    79b8:	d004      	beq.n	79c4 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    79ba:	4a19      	ldr	r2, [pc, #100]	; (7a20 <_gclk_init_generators_by_fref+0xc8>)
    79bc:	2104      	movs	r1, #4
    79be:	4813      	ldr	r0, [pc, #76]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    79c0:	4b13      	ldr	r3, [pc, #76]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    79c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	f003 0320 	and.w	r3, r3, #32
    79ca:	2b00      	cmp	r3, #0
    79cc:	d004      	beq.n	79d8 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    79ce:	4a15      	ldr	r2, [pc, #84]	; (7a24 <_gclk_init_generators_by_fref+0xcc>)
    79d0:	2105      	movs	r1, #5
    79d2:	480e      	ldr	r0, [pc, #56]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    79d4:	4b0e      	ldr	r3, [pc, #56]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    79d6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    79de:	2b00      	cmp	r3, #0
    79e0:	d004      	beq.n	79ec <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    79e2:	4a11      	ldr	r2, [pc, #68]	; (7a28 <_gclk_init_generators_by_fref+0xd0>)
    79e4:	210a      	movs	r1, #10
    79e6:	4809      	ldr	r0, [pc, #36]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    79e8:	4b09      	ldr	r3, [pc, #36]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    79ea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    79f2:	2b00      	cmp	r3, #0
    79f4:	d004      	beq.n	7a00 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    79f6:	4a0d      	ldr	r2, [pc, #52]	; (7a2c <_gclk_init_generators_by_fref+0xd4>)
    79f8:	210b      	movs	r1, #11
    79fa:	4804      	ldr	r0, [pc, #16]	; (7a0c <_gclk_init_generators_by_fref+0xb4>)
    79fc:	4b04      	ldr	r3, [pc, #16]	; (7a10 <_gclk_init_generators_by_fref+0xb8>)
    79fe:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    7a00:	bf00      	nop
    7a02:	3708      	adds	r7, #8
    7a04:	46bd      	mov	sp, r7
    7a06:	bd80      	pop	{r7, pc}
    7a08:	00010107 	.word	0x00010107
    7a0c:	40001c00 	.word	0x40001c00
    7a10:	00007929 	.word	0x00007929
    7a14:	00010907 	.word	0x00010907
    7a18:	00010906 	.word	0x00010906
    7a1c:	00011908 	.word	0x00011908
    7a20:	00010901 	.word	0x00010901
    7a24:	00062901 	.word	0x00062901
    7a28:	00010905 	.word	0x00010905
    7a2c:	00041905 	.word	0x00041905

00007a30 <hri_mclk_write_CPUDIV_reg>:
{
    7a30:	b480      	push	{r7}
    7a32:	b083      	sub	sp, #12
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	460b      	mov	r3, r1
    7a3a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	78fa      	ldrb	r2, [r7, #3]
    7a40:	715a      	strb	r2, [r3, #5]
}
    7a42:	bf00      	nop
    7a44:	370c      	adds	r7, #12
    7a46:	46bd      	mov	sp, r7
    7a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4c:	4770      	bx	lr
	...

00007a50 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b082      	sub	sp, #8
    7a54:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    7a56:	4b05      	ldr	r3, [pc, #20]	; (7a6c <_mclk_init+0x1c>)
    7a58:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    7a5a:	2101      	movs	r1, #1
    7a5c:	6878      	ldr	r0, [r7, #4]
    7a5e:	4b04      	ldr	r3, [pc, #16]	; (7a70 <_mclk_init+0x20>)
    7a60:	4798      	blx	r3
}
    7a62:	bf00      	nop
    7a64:	3708      	adds	r7, #8
    7a66:	46bd      	mov	sp, r7
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	bf00      	nop
    7a6c:	40000800 	.word	0x40000800
    7a70:	00007a31 	.word	0x00007a31

00007a74 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    7a74:	b480      	push	{r7}
    7a76:	b083      	sub	sp, #12
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	460b      	mov	r3, r1
    7a7e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	78fa      	ldrb	r2, [r7, #3]
    7a84:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a86:	bf00      	nop
    7a88:	370c      	adds	r7, #12
    7a8a:	46bd      	mov	sp, r7
    7a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a90:	4770      	bx	lr

00007a92 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    7a92:	b480      	push	{r7}
    7a94:	b083      	sub	sp, #12
    7a96:	af00      	add	r7, sp, #0
    7a98:	6078      	str	r0, [r7, #4]
    7a9a:	460b      	mov	r3, r1
    7a9c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    7a9e:	687b      	ldr	r3, [r7, #4]
    7aa0:	887a      	ldrh	r2, [r7, #2]
    7aa2:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7aa4:	bf00      	nop
    7aa6:	370c      	adds	r7, #12
    7aa8:	46bd      	mov	sp, r7
    7aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aae:	4770      	bx	lr

00007ab0 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    7ab0:	b480      	push	{r7}
    7ab2:	b083      	sub	sp, #12
    7ab4:	af00      	add	r7, sp, #0
    7ab6:	6078      	str	r0, [r7, #4]
    7ab8:	460b      	mov	r3, r1
    7aba:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    7abc:	687b      	ldr	r3, [r7, #4]
    7abe:	78fa      	ldrb	r2, [r7, #3]
    7ac0:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7ac2:	bf00      	nop
    7ac4:	370c      	adds	r7, #12
    7ac6:	46bd      	mov	sp, r7
    7ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7acc:	4770      	bx	lr

00007ace <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    7ace:	b480      	push	{r7}
    7ad0:	b083      	sub	sp, #12
    7ad2:	af00      	add	r7, sp, #0
    7ad4:	6078      	str	r0, [r7, #4]
    7ad6:	460b      	mov	r3, r1
    7ad8:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	78fa      	ldrb	r2, [r7, #3]
    7ade:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7ae0:	bf00      	nop
    7ae2:	370c      	adds	r7, #12
    7ae4:	46bd      	mov	sp, r7
    7ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aea:	4770      	bx	lr

00007aec <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    7aec:	b480      	push	{r7}
    7aee:	b085      	sub	sp, #20
    7af0:	af00      	add	r7, sp, #0
    7af2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	69db      	ldr	r3, [r3, #28]
    7af8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    7afa:	68fb      	ldr	r3, [r7, #12]
    7afc:	0a1b      	lsrs	r3, r3, #8
    7afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7b02:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b04:	68fb      	ldr	r3, [r7, #12]
}
    7b06:	4618      	mov	r0, r3
    7b08:	3714      	adds	r7, #20
    7b0a:	46bd      	mov	sp, r7
    7b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b10:	4770      	bx	lr

00007b12 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    7b12:	b480      	push	{r7}
    7b14:	b083      	sub	sp, #12
    7b16:	af00      	add	r7, sp, #0
    7b18:	6078      	str	r0, [r7, #4]
    7b1a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	683a      	ldr	r2, [r7, #0]
    7b20:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7b22:	bf00      	nop
    7b24:	370c      	adds	r7, #12
    7b26:	46bd      	mov	sp, r7
    7b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b2c:	4770      	bx	lr
	...

00007b30 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7b30:	b580      	push	{r7, lr}
    7b32:	b082      	sub	sp, #8
    7b34:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    7b36:	4b13      	ldr	r3, [pc, #76]	; (7b84 <_osc32kctrl_init_sources+0x54>)
    7b38:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    7b3a:	2300      	movs	r3, #0
    7b3c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7b3e:	f242 018e 	movw	r1, #8334	; 0x208e
    7b42:	6878      	ldr	r0, [r7, #4]
    7b44:	4b10      	ldr	r3, [pc, #64]	; (7b88 <_osc32kctrl_init_sources+0x58>)
    7b46:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    7b48:	2100      	movs	r1, #0
    7b4a:	6878      	ldr	r0, [r7, #4]
    7b4c:	4b0f      	ldr	r3, [pc, #60]	; (7b8c <_osc32kctrl_init_sources+0x5c>)
    7b4e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7b50:	2100      	movs	r1, #0
    7b52:	6878      	ldr	r0, [r7, #4]
    7b54:	4b0e      	ldr	r3, [pc, #56]	; (7b90 <_osc32kctrl_init_sources+0x60>)
    7b56:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    7b58:	6878      	ldr	r0, [r7, #4]
    7b5a:	4b0e      	ldr	r3, [pc, #56]	; (7b94 <_osc32kctrl_init_sources+0x64>)
    7b5c:	4798      	blx	r3
    7b5e:	4603      	mov	r3, r0
    7b60:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7b62:	887b      	ldrh	r3, [r7, #2]
    7b64:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    7b66:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    7b6a:	4619      	mov	r1, r3
    7b6c:	6878      	ldr	r0, [r7, #4]
    7b6e:	4b0a      	ldr	r3, [pc, #40]	; (7b98 <_osc32kctrl_init_sources+0x68>)
    7b70:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    7b72:	2100      	movs	r1, #0
    7b74:	6878      	ldr	r0, [r7, #4]
    7b76:	4b09      	ldr	r3, [pc, #36]	; (7b9c <_osc32kctrl_init_sources+0x6c>)
    7b78:	4798      	blx	r3
	(void)calib;
}
    7b7a:	bf00      	nop
    7b7c:	3708      	adds	r7, #8
    7b7e:	46bd      	mov	sp, r7
    7b80:	bd80      	pop	{r7, pc}
    7b82:	bf00      	nop
    7b84:	40001400 	.word	0x40001400
    7b88:	00007a93 	.word	0x00007a93
    7b8c:	00007ab1 	.word	0x00007ab1
    7b90:	00007acf 	.word	0x00007acf
    7b94:	00007aed 	.word	0x00007aed
    7b98:	00007b13 	.word	0x00007b13
    7b9c:	00007a75 	.word	0x00007a75

00007ba0 <hri_gclk_wait_for_sync>:
{
    7ba0:	b480      	push	{r7}
    7ba2:	b083      	sub	sp, #12
    7ba4:	af00      	add	r7, sp, #0
    7ba6:	6078      	str	r0, [r7, #4]
    7ba8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7baa:	bf00      	nop
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	685a      	ldr	r2, [r3, #4]
    7bb0:	683b      	ldr	r3, [r7, #0]
    7bb2:	4013      	ands	r3, r2
    7bb4:	2b00      	cmp	r3, #0
    7bb6:	d1f9      	bne.n	7bac <hri_gclk_wait_for_sync+0xc>
}
    7bb8:	bf00      	nop
    7bba:	370c      	adds	r7, #12
    7bbc:	46bd      	mov	sp, r7
    7bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc2:	4770      	bx	lr

00007bc4 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    7bc4:	b480      	push	{r7}
    7bc6:	b083      	sub	sp, #12
    7bc8:	af00      	add	r7, sp, #0
    7bca:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	685b      	ldr	r3, [r3, #4]
    7bd0:	089b      	lsrs	r3, r3, #2
    7bd2:	f003 0301 	and.w	r3, r3, #1
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	bf14      	ite	ne
    7bda:	2301      	movne	r3, #1
    7bdc:	2300      	moveq	r3, #0
    7bde:	b2db      	uxtb	r3, r3
}
    7be0:	4618      	mov	r0, r3
    7be2:	370c      	adds	r7, #12
    7be4:	46bd      	mov	sp, r7
    7be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bea:	4770      	bx	lr

00007bec <hri_gclk_read_SYNCBUSY_reg>:
{
    7bec:	b480      	push	{r7}
    7bee:	b083      	sub	sp, #12
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	685b      	ldr	r3, [r3, #4]
}
    7bf8:	4618      	mov	r0, r3
    7bfa:	370c      	adds	r7, #12
    7bfc:	46bd      	mov	sp, r7
    7bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c02:	4770      	bx	lr

00007c04 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    7c04:	b580      	push	{r7, lr}
    7c06:	b086      	sub	sp, #24
    7c08:	af00      	add	r7, sp, #0
    7c0a:	60f8      	str	r0, [r7, #12]
    7c0c:	460b      	mov	r3, r1
    7c0e:	607a      	str	r2, [r7, #4]
    7c10:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7c12:	7afa      	ldrb	r2, [r7, #11]
    7c14:	68fb      	ldr	r3, [r7, #12]
    7c16:	3208      	adds	r2, #8
    7c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c1c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7c1e:	697b      	ldr	r3, [r7, #20]
    7c20:	f023 030f 	bic.w	r3, r3, #15
    7c24:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    7c26:	687b      	ldr	r3, [r7, #4]
    7c28:	f003 030f 	and.w	r3, r3, #15
    7c2c:	697a      	ldr	r2, [r7, #20]
    7c2e:	4313      	orrs	r3, r2
    7c30:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7c32:	7afa      	ldrb	r2, [r7, #11]
    7c34:	68fb      	ldr	r3, [r7, #12]
    7c36:	3208      	adds	r2, #8
    7c38:	6979      	ldr	r1, [r7, #20]
    7c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7c3e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7c42:	68f8      	ldr	r0, [r7, #12]
    7c44:	4b02      	ldr	r3, [pc, #8]	; (7c50 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    7c46:	4798      	blx	r3
}
    7c48:	bf00      	nop
    7c4a:	3718      	adds	r7, #24
    7c4c:	46bd      	mov	sp, r7
    7c4e:	bd80      	pop	{r7, pc}
    7c50:	00007ba1 	.word	0x00007ba1

00007c54 <hri_gclk_write_PCHCTRL_reg>:
{
    7c54:	b480      	push	{r7}
    7c56:	b085      	sub	sp, #20
    7c58:	af00      	add	r7, sp, #0
    7c5a:	60f8      	str	r0, [r7, #12]
    7c5c:	460b      	mov	r3, r1
    7c5e:	607a      	str	r2, [r7, #4]
    7c60:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    7c62:	7afa      	ldrb	r2, [r7, #11]
    7c64:	68fb      	ldr	r3, [r7, #12]
    7c66:	3220      	adds	r2, #32
    7c68:	6879      	ldr	r1, [r7, #4]
    7c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7c6e:	bf00      	nop
    7c70:	3714      	adds	r7, #20
    7c72:	46bd      	mov	sp, r7
    7c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c78:	4770      	bx	lr

00007c7a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    7c7a:	b480      	push	{r7}
    7c7c:	b085      	sub	sp, #20
    7c7e:	af00      	add	r7, sp, #0
    7c80:	60f8      	str	r0, [r7, #12]
    7c82:	460b      	mov	r3, r1
    7c84:	607a      	str	r2, [r7, #4]
    7c86:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7c88:	bf00      	nop
    7c8a:	7afa      	ldrb	r2, [r7, #11]
    7c8c:	68f9      	ldr	r1, [r7, #12]
    7c8e:	4613      	mov	r3, r2
    7c90:	009b      	lsls	r3, r3, #2
    7c92:	4413      	add	r3, r2
    7c94:	009b      	lsls	r3, r3, #2
    7c96:	440b      	add	r3, r1
    7c98:	333c      	adds	r3, #60	; 0x3c
    7c9a:	681a      	ldr	r2, [r3, #0]
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	4013      	ands	r3, r2
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d1f2      	bne.n	7c8a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    7ca4:	bf00      	nop
    7ca6:	3714      	adds	r7, #20
    7ca8:	46bd      	mov	sp, r7
    7caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cae:	4770      	bx	lr

00007cb0 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    7cb0:	b480      	push	{r7}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	460b      	mov	r3, r1
    7cba:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    7cbc:	78fa      	ldrb	r2, [r7, #3]
    7cbe:	6879      	ldr	r1, [r7, #4]
    7cc0:	4613      	mov	r3, r2
    7cc2:	009b      	lsls	r3, r3, #2
    7cc4:	4413      	add	r3, r2
    7cc6:	009b      	lsls	r3, r3, #2
    7cc8:	440b      	add	r3, r1
    7cca:	3340      	adds	r3, #64	; 0x40
    7ccc:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    7cce:	f003 0301 	and.w	r3, r3, #1
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	bf14      	ite	ne
    7cd6:	2301      	movne	r3, #1
    7cd8:	2300      	moveq	r3, #0
    7cda:	b2db      	uxtb	r3, r3
}
    7cdc:	4618      	mov	r0, r3
    7cde:	370c      	adds	r7, #12
    7ce0:	46bd      	mov	sp, r7
    7ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ce6:	4770      	bx	lr

00007ce8 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    7ce8:	b480      	push	{r7}
    7cea:	b083      	sub	sp, #12
    7cec:	af00      	add	r7, sp, #0
    7cee:	6078      	str	r0, [r7, #4]
    7cf0:	460b      	mov	r3, r1
    7cf2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    7cf4:	78fa      	ldrb	r2, [r7, #3]
    7cf6:	6879      	ldr	r1, [r7, #4]
    7cf8:	4613      	mov	r3, r2
    7cfa:	009b      	lsls	r3, r3, #2
    7cfc:	4413      	add	r3, r2
    7cfe:	009b      	lsls	r3, r3, #2
    7d00:	440b      	add	r3, r1
    7d02:	3340      	adds	r3, #64	; 0x40
    7d04:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    7d06:	085b      	lsrs	r3, r3, #1
    7d08:	f003 0301 	and.w	r3, r3, #1
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	bf14      	ite	ne
    7d10:	2301      	movne	r3, #1
    7d12:	2300      	moveq	r3, #0
    7d14:	b2db      	uxtb	r3, r3
}
    7d16:	4618      	mov	r0, r3
    7d18:	370c      	adds	r7, #12
    7d1a:	46bd      	mov	sp, r7
    7d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d20:	4770      	bx	lr
	...

00007d24 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    7d24:	b580      	push	{r7, lr}
    7d26:	b082      	sub	sp, #8
    7d28:	af00      	add	r7, sp, #0
    7d2a:	6078      	str	r0, [r7, #4]
    7d2c:	460b      	mov	r3, r1
    7d2e:	70fb      	strb	r3, [r7, #3]
    7d30:	4613      	mov	r3, r2
    7d32:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    7d34:	78fa      	ldrb	r2, [r7, #3]
    7d36:	6879      	ldr	r1, [r7, #4]
    7d38:	4613      	mov	r3, r2
    7d3a:	009b      	lsls	r3, r3, #2
    7d3c:	4413      	add	r3, r2
    7d3e:	009b      	lsls	r3, r3, #2
    7d40:	440b      	add	r3, r1
    7d42:	3330      	adds	r3, #48	; 0x30
    7d44:	78ba      	ldrb	r2, [r7, #2]
    7d46:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    7d48:	78fb      	ldrb	r3, [r7, #3]
    7d4a:	2202      	movs	r2, #2
    7d4c:	4619      	mov	r1, r3
    7d4e:	6878      	ldr	r0, [r7, #4]
    7d50:	4b02      	ldr	r3, [pc, #8]	; (7d5c <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    7d52:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7d54:	bf00      	nop
    7d56:	3708      	adds	r7, #8
    7d58:	46bd      	mov	sp, r7
    7d5a:	bd80      	pop	{r7, pc}
    7d5c:	00007c7b 	.word	0x00007c7b

00007d60 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    7d60:	b580      	push	{r7, lr}
    7d62:	b084      	sub	sp, #16
    7d64:	af00      	add	r7, sp, #0
    7d66:	60f8      	str	r0, [r7, #12]
    7d68:	460b      	mov	r3, r1
    7d6a:	607a      	str	r2, [r7, #4]
    7d6c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7d6e:	7afa      	ldrb	r2, [r7, #11]
    7d70:	68f9      	ldr	r1, [r7, #12]
    7d72:	4613      	mov	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	4413      	add	r3, r2
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	440b      	add	r3, r1
    7d7c:	3334      	adds	r3, #52	; 0x34
    7d7e:	687a      	ldr	r2, [r7, #4]
    7d80:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    7d82:	7afb      	ldrb	r3, [r7, #11]
    7d84:	2206      	movs	r2, #6
    7d86:	4619      	mov	r1, r3
    7d88:	68f8      	ldr	r0, [r7, #12]
    7d8a:	4b03      	ldr	r3, [pc, #12]	; (7d98 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    7d8c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7d8e:	bf00      	nop
    7d90:	3710      	adds	r7, #16
    7d92:	46bd      	mov	sp, r7
    7d94:	bd80      	pop	{r7, pc}
    7d96:	bf00      	nop
    7d98:	00007c7b 	.word	0x00007c7b

00007d9c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    7d9c:	b480      	push	{r7}
    7d9e:	b085      	sub	sp, #20
    7da0:	af00      	add	r7, sp, #0
    7da2:	60f8      	str	r0, [r7, #12]
    7da4:	460b      	mov	r3, r1
    7da6:	607a      	str	r2, [r7, #4]
    7da8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7daa:	7afa      	ldrb	r2, [r7, #11]
    7dac:	68f9      	ldr	r1, [r7, #12]
    7dae:	4613      	mov	r3, r2
    7db0:	009b      	lsls	r3, r3, #2
    7db2:	4413      	add	r3, r2
    7db4:	009b      	lsls	r3, r3, #2
    7db6:	440b      	add	r3, r1
    7db8:	3338      	adds	r3, #56	; 0x38
    7dba:	687a      	ldr	r2, [r7, #4]
    7dbc:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7dbe:	bf00      	nop
    7dc0:	3714      	adds	r7, #20
    7dc2:	46bd      	mov	sp, r7
    7dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dc8:	4770      	bx	lr

00007dca <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    7dca:	b480      	push	{r7}
    7dcc:	b083      	sub	sp, #12
    7dce:	af00      	add	r7, sp, #0
    7dd0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	691b      	ldr	r3, [r3, #16]
    7dd6:	085b      	lsrs	r3, r3, #1
    7dd8:	f003 0301 	and.w	r3, r3, #1
    7ddc:	2b00      	cmp	r3, #0
    7dde:	bf14      	ite	ne
    7de0:	2301      	movne	r3, #1
    7de2:	2300      	moveq	r3, #0
    7de4:	b2db      	uxtb	r3, r3
}
    7de6:	4618      	mov	r0, r3
    7de8:	370c      	adds	r7, #12
    7dea:	46bd      	mov	sp, r7
    7dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7df0:	4770      	bx	lr

00007df2 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    7df2:	b480      	push	{r7}
    7df4:	b083      	sub	sp, #12
    7df6:	af00      	add	r7, sp, #0
    7df8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7dfa:	687b      	ldr	r3, [r7, #4]
    7dfc:	691b      	ldr	r3, [r3, #16]
    7dfe:	0a1b      	lsrs	r3, r3, #8
    7e00:	f003 0301 	and.w	r3, r3, #1
    7e04:	2b00      	cmp	r3, #0
    7e06:	bf14      	ite	ne
    7e08:	2301      	movne	r3, #1
    7e0a:	2300      	moveq	r3, #0
    7e0c:	b2db      	uxtb	r3, r3
}
    7e0e:	4618      	mov	r0, r3
    7e10:	370c      	adds	r7, #12
    7e12:	46bd      	mov	sp, r7
    7e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e18:	4770      	bx	lr

00007e1a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    7e1a:	b480      	push	{r7}
    7e1c:	b085      	sub	sp, #20
    7e1e:	af00      	add	r7, sp, #0
    7e20:	6078      	str	r0, [r7, #4]
    7e22:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	691b      	ldr	r3, [r3, #16]
    7e28:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7e2a:	68fa      	ldr	r2, [r7, #12]
    7e2c:	683b      	ldr	r3, [r7, #0]
    7e2e:	4013      	ands	r3, r2
    7e30:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e32:	68fb      	ldr	r3, [r7, #12]
}
    7e34:	4618      	mov	r0, r3
    7e36:	3714      	adds	r7, #20
    7e38:	46bd      	mov	sp, r7
    7e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e3e:	4770      	bx	lr

00007e40 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    7e40:	b480      	push	{r7}
    7e42:	b085      	sub	sp, #20
    7e44:	af00      	add	r7, sp, #0
    7e46:	60f8      	str	r0, [r7, #12]
    7e48:	460b      	mov	r3, r1
    7e4a:	607a      	str	r2, [r7, #4]
    7e4c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    7e4e:	7afb      	ldrb	r3, [r7, #11]
    7e50:	68fa      	ldr	r2, [r7, #12]
    7e52:	3304      	adds	r3, #4
    7e54:	009b      	lsls	r3, r3, #2
    7e56:	4413      	add	r3, r2
    7e58:	687a      	ldr	r2, [r7, #4]
    7e5a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e5c:	bf00      	nop
    7e5e:	3714      	adds	r7, #20
    7e60:	46bd      	mov	sp, r7
    7e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e66:	4770      	bx	lr

00007e68 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    7e68:	b480      	push	{r7}
    7e6a:	b083      	sub	sp, #12
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
    7e70:	460b      	mov	r3, r1
    7e72:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7e74:	687b      	ldr	r3, [r7, #4]
    7e76:	78fa      	ldrb	r2, [r7, #3]
    7e78:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e7a:	bf00      	nop
    7e7c:	370c      	adds	r7, #12
    7e7e:	46bd      	mov	sp, r7
    7e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e84:	4770      	bx	lr

00007e86 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    7e86:	b480      	push	{r7}
    7e88:	b085      	sub	sp, #20
    7e8a:	af00      	add	r7, sp, #0
    7e8c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	f893 3020 	ldrb.w	r3, [r3, #32]
    7e94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7e96:	7bfb      	ldrb	r3, [r7, #15]
    7e98:	f003 0301 	and.w	r3, r3, #1
    7e9c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7e9e:	7bfb      	ldrb	r3, [r7, #15]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	bf14      	ite	ne
    7ea4:	2301      	movne	r3, #1
    7ea6:	2300      	moveq	r3, #0
    7ea8:	b2db      	uxtb	r3, r3
}
    7eaa:	4618      	mov	r0, r3
    7eac:	3714      	adds	r7, #20
    7eae:	46bd      	mov	sp, r7
    7eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eb4:	4770      	bx	lr

00007eb6 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    7eb6:	b480      	push	{r7}
    7eb8:	b083      	sub	sp, #12
    7eba:	af00      	add	r7, sp, #0
    7ebc:	6078      	str	r0, [r7, #4]
    7ebe:	460b      	mov	r3, r1
    7ec0:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7ec2:	687b      	ldr	r3, [r7, #4]
    7ec4:	78fa      	ldrb	r2, [r7, #3]
    7ec6:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7eca:	bf00      	nop
    7ecc:	370c      	adds	r7, #12
    7ece:	46bd      	mov	sp, r7
    7ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed4:	4770      	bx	lr

00007ed6 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    7ed6:	b480      	push	{r7}
    7ed8:	b083      	sub	sp, #12
    7eda:	af00      	add	r7, sp, #0
    7edc:	6078      	str	r0, [r7, #4]
    7ede:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	683a      	ldr	r2, [r7, #0]
    7ee4:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7ee6:	bf00      	nop
    7ee8:	370c      	adds	r7, #12
    7eea:	46bd      	mov	sp, r7
    7eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ef0:	4770      	bx	lr

00007ef2 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    7ef2:	b480      	push	{r7}
    7ef4:	b083      	sub	sp, #12
    7ef6:	af00      	add	r7, sp, #0
    7ef8:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7efe:	4618      	mov	r0, r3
    7f00:	370c      	adds	r7, #12
    7f02:	46bd      	mov	sp, r7
    7f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f08:	4770      	bx	lr

00007f0a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    7f0a:	b480      	push	{r7}
    7f0c:	b083      	sub	sp, #12
    7f0e:	af00      	add	r7, sp, #0
    7f10:	6078      	str	r0, [r7, #4]
    7f12:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	683a      	ldr	r2, [r7, #0]
    7f18:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7f1a:	bf00      	nop
    7f1c:	370c      	adds	r7, #12
    7f1e:	46bd      	mov	sp, r7
    7f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f24:	4770      	bx	lr

00007f26 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    7f26:	b480      	push	{r7}
    7f28:	b085      	sub	sp, #20
    7f2a:	af00      	add	r7, sp, #0
    7f2c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7f2e:	687b      	ldr	r3, [r7, #4]
    7f30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7f34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    7f36:	7bfb      	ldrb	r3, [r7, #15]
    7f38:	085b      	lsrs	r3, r3, #1
    7f3a:	b2db      	uxtb	r3, r3
    7f3c:	f003 0301 	and.w	r3, r3, #1
    7f40:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7f42:	7bfb      	ldrb	r3, [r7, #15]
    7f44:	2b00      	cmp	r3, #0
    7f46:	bf14      	ite	ne
    7f48:	2301      	movne	r3, #1
    7f4a:	2300      	moveq	r3, #0
    7f4c:	b2db      	uxtb	r3, r3
}
    7f4e:	4618      	mov	r0, r3
    7f50:	3714      	adds	r7, #20
    7f52:	46bd      	mov	sp, r7
    7f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f58:	4770      	bx	lr

00007f5a <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7f5a:	b480      	push	{r7}
    7f5c:	b085      	sub	sp, #20
    7f5e:	af00      	add	r7, sp, #0
    7f60:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7f68:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    7f6a:	7bfb      	ldrb	r3, [r7, #15]
    7f6c:	089b      	lsrs	r3, r3, #2
    7f6e:	b2db      	uxtb	r3, r3
    7f70:	f003 0301 	and.w	r3, r3, #1
    7f74:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7f76:	7bfb      	ldrb	r3, [r7, #15]
    7f78:	2b00      	cmp	r3, #0
    7f7a:	bf14      	ite	ne
    7f7c:	2301      	movne	r3, #1
    7f7e:	2300      	moveq	r3, #0
    7f80:	b2db      	uxtb	r3, r3
}
    7f82:	4618      	mov	r0, r3
    7f84:	3714      	adds	r7, #20
    7f86:	46bd      	mov	sp, r7
    7f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8c:	4770      	bx	lr

00007f8e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    7f8e:	b480      	push	{r7}
    7f90:	b085      	sub	sp, #20
    7f92:	af00      	add	r7, sp, #0
    7f94:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7f96:	687b      	ldr	r3, [r7, #4]
    7f98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7f9c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    7f9e:	7bfb      	ldrb	r3, [r7, #15]
    7fa0:	08db      	lsrs	r3, r3, #3
    7fa2:	b2db      	uxtb	r3, r3
    7fa4:	f003 0301 	and.w	r3, r3, #1
    7fa8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7faa:	7bfb      	ldrb	r3, [r7, #15]
    7fac:	2b00      	cmp	r3, #0
    7fae:	bf14      	ite	ne
    7fb0:	2301      	movne	r3, #1
    7fb2:	2300      	moveq	r3, #0
    7fb4:	b2db      	uxtb	r3, r3
}
    7fb6:	4618      	mov	r0, r3
    7fb8:	3714      	adds	r7, #20
    7fba:	46bd      	mov	sp, r7
    7fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc0:	4770      	bx	lr

00007fc2 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    7fc2:	b480      	push	{r7}
    7fc4:	b085      	sub	sp, #20
    7fc6:	af00      	add	r7, sp, #0
    7fc8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7fd0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    7fd2:	7bfb      	ldrb	r3, [r7, #15]
    7fd4:	091b      	lsrs	r3, r3, #4
    7fd6:	b2db      	uxtb	r3, r3
    7fd8:	f003 0301 	and.w	r3, r3, #1
    7fdc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7fde:	7bfb      	ldrb	r3, [r7, #15]
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	bf14      	ite	ne
    7fe4:	2301      	movne	r3, #1
    7fe6:	2300      	moveq	r3, #0
    7fe8:	b2db      	uxtb	r3, r3
}
    7fea:	4618      	mov	r0, r3
    7fec:	3714      	adds	r7, #20
    7fee:	46bd      	mov	sp, r7
    7ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff4:	4770      	bx	lr
	...

00007ff8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b082      	sub	sp, #8
    7ffc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7ffe:	4b0a      	ldr	r3, [pc, #40]	; (8028 <_oscctrl_init_sources+0x30>)
    8000:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    8002:	4a0a      	ldr	r2, [pc, #40]	; (802c <_oscctrl_init_sources+0x34>)
    8004:	2101      	movs	r1, #1
    8006:	6878      	ldr	r0, [r7, #4]
    8008:	4b09      	ldr	r3, [pc, #36]	; (8030 <_oscctrl_init_sources+0x38>)
    800a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    800c:	bf00      	nop
    800e:	6878      	ldr	r0, [r7, #4]
    8010:	4b08      	ldr	r3, [pc, #32]	; (8034 <_oscctrl_init_sources+0x3c>)
    8012:	4798      	blx	r3
    8014:	4603      	mov	r3, r0
    8016:	f083 0301 	eor.w	r3, r3, #1
    801a:	b2db      	uxtb	r3, r3
    801c:	2b00      	cmp	r3, #0
    801e:	d1f6      	bne.n	800e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    8020:	bf00      	nop
    8022:	3708      	adds	r7, #8
    8024:	46bd      	mov	sp, r7
    8026:	bd80      	pop	{r7, pc}
    8028:	40001000 	.word	0x40001000
    802c:	03002606 	.word	0x03002606
    8030:	00007e41 	.word	0x00007e41
    8034:	00007dcb 	.word	0x00007dcb

00008038 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    8038:	b580      	push	{r7, lr}
    803a:	b084      	sub	sp, #16
    803c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    803e:	4b6b      	ldr	r3, [pc, #428]	; (81ec <_oscctrl_init_referenced_generators+0x1b4>)
    8040:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    8042:	2204      	movs	r2, #4
    8044:	2100      	movs	r1, #0
    8046:	486a      	ldr	r0, [pc, #424]	; (81f0 <_oscctrl_init_referenced_generators+0x1b8>)
    8048:	4b6a      	ldr	r3, [pc, #424]	; (81f4 <_oscctrl_init_referenced_generators+0x1bc>)
    804a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    804c:	bf00      	nop
    804e:	4868      	ldr	r0, [pc, #416]	; (81f0 <_oscctrl_init_referenced_generators+0x1b8>)
    8050:	4b69      	ldr	r3, [pc, #420]	; (81f8 <_oscctrl_init_referenced_generators+0x1c0>)
    8052:	4798      	blx	r3
    8054:	4603      	mov	r3, r0
    8056:	2b00      	cmp	r3, #0
    8058:	d1f9      	bne.n	804e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    805a:	2100      	movs	r1, #0
    805c:	68f8      	ldr	r0, [r7, #12]
    805e:	4b67      	ldr	r3, [pc, #412]	; (81fc <_oscctrl_init_referenced_generators+0x1c4>)
    8060:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    8062:	4967      	ldr	r1, [pc, #412]	; (8200 <_oscctrl_init_referenced_generators+0x1c8>)
    8064:	68f8      	ldr	r0, [r7, #12]
    8066:	4b67      	ldr	r3, [pc, #412]	; (8204 <_oscctrl_init_referenced_generators+0x1cc>)
    8068:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    806a:	bf00      	nop
    806c:	68f8      	ldr	r0, [r7, #12]
    806e:	4b66      	ldr	r3, [pc, #408]	; (8208 <_oscctrl_init_referenced_generators+0x1d0>)
    8070:	4798      	blx	r3
    8072:	4603      	mov	r3, r0
    8074:	2b00      	cmp	r3, #0
    8076:	d1f9      	bne.n	806c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    8078:	2100      	movs	r1, #0
    807a:	68f8      	ldr	r0, [r7, #12]
    807c:	4b63      	ldr	r3, [pc, #396]	; (820c <_oscctrl_init_referenced_generators+0x1d4>)
    807e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    8080:	bf00      	nop
    8082:	68f8      	ldr	r0, [r7, #12]
    8084:	4b62      	ldr	r3, [pc, #392]	; (8210 <_oscctrl_init_referenced_generators+0x1d8>)
    8086:	4798      	blx	r3
    8088:	4603      	mov	r3, r0
    808a:	2b00      	cmp	r3, #0
    808c:	d1f9      	bne.n	8082 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    808e:	2302      	movs	r3, #2
    8090:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    8092:	7afb      	ldrb	r3, [r7, #11]
    8094:	4619      	mov	r1, r3
    8096:	68f8      	ldr	r0, [r7, #12]
    8098:	4b58      	ldr	r3, [pc, #352]	; (81fc <_oscctrl_init_referenced_generators+0x1c4>)
    809a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    809c:	bf00      	nop
    809e:	68f8      	ldr	r0, [r7, #12]
    80a0:	4b5c      	ldr	r3, [pc, #368]	; (8214 <_oscctrl_init_referenced_generators+0x1dc>)
    80a2:	4798      	blx	r3
    80a4:	4603      	mov	r3, r0
    80a6:	2b00      	cmp	r3, #0
    80a8:	d1f9      	bne.n	809e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    80aa:	68f8      	ldr	r0, [r7, #12]
    80ac:	4b5a      	ldr	r3, [pc, #360]	; (8218 <_oscctrl_init_referenced_generators+0x1e0>)
    80ae:	4798      	blx	r3
    80b0:	4603      	mov	r3, r0
    80b2:	4619      	mov	r1, r3
    80b4:	68f8      	ldr	r0, [r7, #12]
    80b6:	4b59      	ldr	r3, [pc, #356]	; (821c <_oscctrl_init_referenced_generators+0x1e4>)
    80b8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    80ba:	bf00      	nop
    80bc:	68f8      	ldr	r0, [r7, #12]
    80be:	4b58      	ldr	r3, [pc, #352]	; (8220 <_oscctrl_init_referenced_generators+0x1e8>)
    80c0:	4798      	blx	r3
    80c2:	4603      	mov	r3, r0
    80c4:	2b00      	cmp	r3, #0
    80c6:	d1f9      	bne.n	80bc <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    80c8:	2319      	movs	r3, #25
    80ca:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    80cc:	7afb      	ldrb	r3, [r7, #11]
    80ce:	4619      	mov	r1, r3
    80d0:	68f8      	ldr	r0, [r7, #12]
    80d2:	4b4e      	ldr	r3, [pc, #312]	; (820c <_oscctrl_init_referenced_generators+0x1d4>)
    80d4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    80d6:	bf00      	nop
    80d8:	68f8      	ldr	r0, [r7, #12]
    80da:	4b4d      	ldr	r3, [pc, #308]	; (8210 <_oscctrl_init_referenced_generators+0x1d8>)
    80dc:	4798      	blx	r3
    80de:	4603      	mov	r3, r0
    80e0:	2b00      	cmp	r3, #0
    80e2:	d1f9      	bne.n	80d8 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    80e4:	2245      	movs	r2, #69	; 0x45
    80e6:	2101      	movs	r1, #1
    80e8:	4841      	ldr	r0, [pc, #260]	; (81f0 <_oscctrl_init_referenced_generators+0x1b8>)
    80ea:	4b4e      	ldr	r3, [pc, #312]	; (8224 <_oscctrl_init_referenced_generators+0x1ec>)
    80ec:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    80ee:	223b      	movs	r2, #59	; 0x3b
    80f0:	2100      	movs	r1, #0
    80f2:	68f8      	ldr	r0, [r7, #12]
    80f4:	4b4c      	ldr	r3, [pc, #304]	; (8228 <_oscctrl_init_referenced_generators+0x1f0>)
    80f6:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    80f8:	f44f 6201 	mov.w	r2, #2064	; 0x810
    80fc:	2100      	movs	r1, #0
    80fe:	68f8      	ldr	r0, [r7, #12]
    8100:	4b4a      	ldr	r3, [pc, #296]	; (822c <_oscctrl_init_referenced_generators+0x1f4>)
    8102:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    8104:	2242      	movs	r2, #66	; 0x42
    8106:	2100      	movs	r1, #0
    8108:	68f8      	ldr	r0, [r7, #12]
    810a:	4b49      	ldr	r3, [pc, #292]	; (8230 <_oscctrl_init_referenced_generators+0x1f8>)
    810c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    810e:	4a49      	ldr	r2, [pc, #292]	; (8234 <_oscctrl_init_referenced_generators+0x1fc>)
    8110:	2101      	movs	r1, #1
    8112:	68f8      	ldr	r0, [r7, #12]
    8114:	4b44      	ldr	r3, [pc, #272]	; (8228 <_oscctrl_init_referenced_generators+0x1f0>)
    8116:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8118:	f44f 6203 	mov.w	r2, #2096	; 0x830
    811c:	2101      	movs	r1, #1
    811e:	68f8      	ldr	r0, [r7, #12]
    8120:	4b42      	ldr	r3, [pc, #264]	; (822c <_oscctrl_init_referenced_generators+0x1f4>)
    8122:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    8124:	2202      	movs	r2, #2
    8126:	2101      	movs	r1, #1
    8128:	68f8      	ldr	r0, [r7, #12]
    812a:	4b41      	ldr	r3, [pc, #260]	; (8230 <_oscctrl_init_referenced_generators+0x1f8>)
    812c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    812e:	68f8      	ldr	r0, [r7, #12]
    8130:	4b41      	ldr	r3, [pc, #260]	; (8238 <_oscctrl_init_referenced_generators+0x200>)
    8132:	4798      	blx	r3
    8134:	4603      	mov	r3, r0
    8136:	2b00      	cmp	r3, #0
    8138:	d00c      	beq.n	8154 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    813a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    813e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    8140:	bf00      	nop
    8142:	6879      	ldr	r1, [r7, #4]
    8144:	68f8      	ldr	r0, [r7, #12]
    8146:	4b3d      	ldr	r3, [pc, #244]	; (823c <_oscctrl_init_referenced_generators+0x204>)
    8148:	4798      	blx	r3
    814a:	4602      	mov	r2, r0
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	429a      	cmp	r2, r3
    8150:	d1f7      	bne.n	8142 <_oscctrl_init_referenced_generators+0x10a>
    8152:	e009      	b.n	8168 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    8154:	bf00      	nop
    8156:	68f8      	ldr	r0, [r7, #12]
    8158:	4b39      	ldr	r3, [pc, #228]	; (8240 <_oscctrl_init_referenced_generators+0x208>)
    815a:	4798      	blx	r3
    815c:	4603      	mov	r3, r0
    815e:	f083 0301 	eor.w	r3, r3, #1
    8162:	b2db      	uxtb	r3, r3
    8164:	2b00      	cmp	r3, #0
    8166:	d1f6      	bne.n	8156 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    8168:	bf00      	nop
    816a:	2100      	movs	r1, #0
    816c:	68f8      	ldr	r0, [r7, #12]
    816e:	4b35      	ldr	r3, [pc, #212]	; (8244 <_oscctrl_init_referenced_generators+0x20c>)
    8170:	4798      	blx	r3
    8172:	4603      	mov	r3, r0
    8174:	f083 0301 	eor.w	r3, r3, #1
    8178:	b2db      	uxtb	r3, r3
    817a:	2b00      	cmp	r3, #0
    817c:	d009      	beq.n	8192 <_oscctrl_init_referenced_generators+0x15a>
    817e:	2100      	movs	r1, #0
    8180:	68f8      	ldr	r0, [r7, #12]
    8182:	4b31      	ldr	r3, [pc, #196]	; (8248 <_oscctrl_init_referenced_generators+0x210>)
    8184:	4798      	blx	r3
    8186:	4603      	mov	r3, r0
    8188:	f083 0301 	eor.w	r3, r3, #1
    818c:	b2db      	uxtb	r3, r3
    818e:	2b00      	cmp	r3, #0
    8190:	d1eb      	bne.n	816a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    8192:	bf00      	nop
    8194:	2101      	movs	r1, #1
    8196:	68f8      	ldr	r0, [r7, #12]
    8198:	4b2a      	ldr	r3, [pc, #168]	; (8244 <_oscctrl_init_referenced_generators+0x20c>)
    819a:	4798      	blx	r3
    819c:	4603      	mov	r3, r0
    819e:	f083 0301 	eor.w	r3, r3, #1
    81a2:	b2db      	uxtb	r3, r3
    81a4:	2b00      	cmp	r3, #0
    81a6:	d009      	beq.n	81bc <_oscctrl_init_referenced_generators+0x184>
    81a8:	2101      	movs	r1, #1
    81aa:	68f8      	ldr	r0, [r7, #12]
    81ac:	4b26      	ldr	r3, [pc, #152]	; (8248 <_oscctrl_init_referenced_generators+0x210>)
    81ae:	4798      	blx	r3
    81b0:	4603      	mov	r3, r0
    81b2:	f083 0301 	eor.w	r3, r3, #1
    81b6:	b2db      	uxtb	r3, r3
    81b8:	2b00      	cmp	r3, #0
    81ba:	d1eb      	bne.n	8194 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    81bc:	bf00      	nop
    81be:	480c      	ldr	r0, [pc, #48]	; (81f0 <_oscctrl_init_referenced_generators+0x1b8>)
    81c0:	4b22      	ldr	r3, [pc, #136]	; (824c <_oscctrl_init_referenced_generators+0x214>)
    81c2:	4798      	blx	r3
    81c4:	4603      	mov	r3, r0
    81c6:	2b00      	cmp	r3, #0
    81c8:	d1f9      	bne.n	81be <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    81ca:	2207      	movs	r2, #7
    81cc:	2100      	movs	r1, #0
    81ce:	4808      	ldr	r0, [pc, #32]	; (81f0 <_oscctrl_init_referenced_generators+0x1b8>)
    81d0:	4b08      	ldr	r3, [pc, #32]	; (81f4 <_oscctrl_init_referenced_generators+0x1bc>)
    81d2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    81d4:	bf00      	nop
    81d6:	4806      	ldr	r0, [pc, #24]	; (81f0 <_oscctrl_init_referenced_generators+0x1b8>)
    81d8:	4b07      	ldr	r3, [pc, #28]	; (81f8 <_oscctrl_init_referenced_generators+0x1c0>)
    81da:	4798      	blx	r3
    81dc:	4603      	mov	r3, r0
    81de:	2b00      	cmp	r3, #0
    81e0:	d1f9      	bne.n	81d6 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    81e2:	bf00      	nop
    81e4:	3710      	adds	r7, #16
    81e6:	46bd      	mov	sp, r7
    81e8:	bd80      	pop	{r7, pc}
    81ea:	bf00      	nop
    81ec:	40001000 	.word	0x40001000
    81f0:	40001c00 	.word	0x40001c00
    81f4:	00007c05 	.word	0x00007c05
    81f8:	00007bc5 	.word	0x00007bc5
    81fc:	00007e69 	.word	0x00007e69
    8200:	0401bb80 	.word	0x0401bb80
    8204:	00007f0b 	.word	0x00007f0b
    8208:	00007fc3 	.word	0x00007fc3
    820c:	00007eb7 	.word	0x00007eb7
    8210:	00007f5b 	.word	0x00007f5b
    8214:	00007f27 	.word	0x00007f27
    8218:	00007ef3 	.word	0x00007ef3
    821c:	00007ed7 	.word	0x00007ed7
    8220:	00007f8f 	.word	0x00007f8f
    8224:	00007c55 	.word	0x00007c55
    8228:	00007d61 	.word	0x00007d61
    822c:	00007d9d 	.word	0x00007d9d
    8230:	00007d25 	.word	0x00007d25
    8234:	000407a0 	.word	0x000407a0
    8238:	00007e87 	.word	0x00007e87
    823c:	00007e1b 	.word	0x00007e1b
    8240:	00007df3 	.word	0x00007df3
    8244:	00007cb1 	.word	0x00007cb1
    8248:	00007ce9 	.word	0x00007ce9
    824c:	00007bed 	.word	0x00007bed

00008250 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    8250:	b480      	push	{r7}
    8252:	b085      	sub	sp, #20
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]
    8258:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    825e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8260:	68fa      	ldr	r2, [r7, #12]
    8262:	683b      	ldr	r3, [r7, #0]
    8264:	4013      	ands	r3, r2
    8266:	60fb      	str	r3, [r7, #12]
	return tmp;
    8268:	68fb      	ldr	r3, [r7, #12]
}
    826a:	4618      	mov	r0, r3
    826c:	3714      	adds	r7, #20
    826e:	46bd      	mov	sp, r7
    8270:	f85d 7b04 	ldr.w	r7, [sp], #4
    8274:	4770      	bx	lr

00008276 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    8276:	b480      	push	{r7}
    8278:	b085      	sub	sp, #20
    827a:	af00      	add	r7, sp, #0
    827c:	6078      	str	r0, [r7, #4]
    827e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8284:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8286:	68fa      	ldr	r2, [r7, #12]
    8288:	683b      	ldr	r3, [r7, #0]
    828a:	4013      	ands	r3, r2
    828c:	60fb      	str	r3, [r7, #12]
	return tmp;
    828e:	68fb      	ldr	r3, [r7, #12]
}
    8290:	4618      	mov	r0, r3
    8292:	3714      	adds	r7, #20
    8294:	46bd      	mov	sp, r7
    8296:	f85d 7b04 	ldr.w	r7, [sp], #4
    829a:	4770      	bx	lr

0000829c <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    829c:	b480      	push	{r7}
    829e:	b085      	sub	sp, #20
    82a0:	af00      	add	r7, sp, #0
    82a2:	6078      	str	r0, [r7, #4]
    82a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    82aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    82ac:	68fa      	ldr	r2, [r7, #12]
    82ae:	683b      	ldr	r3, [r7, #0]
    82b0:	4013      	ands	r3, r2
    82b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    82b4:	68fb      	ldr	r3, [r7, #12]
}
    82b6:	4618      	mov	r0, r3
    82b8:	3714      	adds	r7, #20
    82ba:	46bd      	mov	sp, r7
    82bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c0:	4770      	bx	lr

000082c2 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    82c2:	b480      	push	{r7}
    82c4:	b085      	sub	sp, #20
    82c6:	af00      	add	r7, sp, #0
    82c8:	6078      	str	r0, [r7, #4]
    82ca:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    82d0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    82d2:	68fa      	ldr	r2, [r7, #12]
    82d4:	683b      	ldr	r3, [r7, #0]
    82d6:	4013      	ands	r3, r2
    82d8:	60fb      	str	r3, [r7, #12]
	return tmp;
    82da:	68fb      	ldr	r3, [r7, #12]
}
    82dc:	4618      	mov	r0, r3
    82de:	3714      	adds	r7, #20
    82e0:	46bd      	mov	sp, r7
    82e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e6:	4770      	bx	lr

000082e8 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    82e8:	b480      	push	{r7}
    82ea:	b083      	sub	sp, #12
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
    82f0:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	683a      	ldr	r2, [r7, #0]
    82f6:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    82f8:	bf00      	nop
    82fa:	370c      	adds	r7, #12
    82fc:	46bd      	mov	sp, r7
    82fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8302:	4770      	bx	lr

00008304 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    8304:	b480      	push	{r7}
    8306:	b085      	sub	sp, #20
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    830c:	230a      	movs	r3, #10
    830e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    8316:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    831a:	d101      	bne.n	8320 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    831c:	230d      	movs	r3, #13
    831e:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	0e1b      	lsrs	r3, r3, #24
    8324:	f003 030f 	and.w	r3, r3, #15
    8328:	015a      	lsls	r2, r3, #5
    832a:	6879      	ldr	r1, [r7, #4]
    832c:	4b06      	ldr	r3, [pc, #24]	; (8348 <_pac_get_peripheral_id+0x44>)
    832e:	400b      	ands	r3, r1
    8330:	68f9      	ldr	r1, [r7, #12]
    8332:	40cb      	lsrs	r3, r1
    8334:	4413      	add	r3, r2
    8336:	60fb      	str	r3, [r7, #12]

	return peripheral;
    8338:	68fb      	ldr	r3, [r7, #12]
}
    833a:	4618      	mov	r0, r3
    833c:	3714      	adds	r7, #20
    833e:	46bd      	mov	sp, r7
    8340:	f85d 7b04 	ldr.w	r7, [sp], #4
    8344:	4770      	bx	lr
    8346:	bf00      	nop
    8348:	000fff00 	.word	0x000fff00

0000834c <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    834c:	b580      	push	{r7, lr}
    834e:	b086      	sub	sp, #24
    8350:	af00      	add	r7, sp, #0
    8352:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    835a:	bf8c      	ite	hi
    835c:	2301      	movhi	r3, #1
    835e:	2300      	movls	r3, #0
    8360:	b2db      	uxtb	r3, r3
    8362:	2239      	movs	r2, #57	; 0x39
    8364:	4917      	ldr	r1, [pc, #92]	; (83c4 <_periph_lock+0x78>)
    8366:	4618      	mov	r0, r3
    8368:	4b17      	ldr	r3, [pc, #92]	; (83c8 <_periph_lock+0x7c>)
    836a:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    836c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8370:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    8372:	6878      	ldr	r0, [r7, #4]
    8374:	4b15      	ldr	r3, [pc, #84]	; (83cc <_periph_lock+0x80>)
    8376:	4798      	blx	r3
    8378:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    837a:	693b      	ldr	r3, [r7, #16]
    837c:	b29b      	uxth	r3, r3
    837e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8382:	4619      	mov	r1, r3
    8384:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8388:	4b11      	ldr	r3, [pc, #68]	; (83d0 <_periph_lock+0x84>)
    838a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    838c:	f107 030f 	add.w	r3, r7, #15
    8390:	4619      	mov	r1, r3
    8392:	6878      	ldr	r0, [r7, #4]
    8394:	4b0f      	ldr	r3, [pc, #60]	; (83d4 <_periph_lock+0x88>)
    8396:	4798      	blx	r3
	} while (!stat && timeout--);
    8398:	7bfb      	ldrb	r3, [r7, #15]
    839a:	f083 0301 	eor.w	r3, r3, #1
    839e:	b2db      	uxtb	r3, r3
    83a0:	2b00      	cmp	r3, #0
    83a2:	d004      	beq.n	83ae <_periph_lock+0x62>
    83a4:	697b      	ldr	r3, [r7, #20]
    83a6:	1e5a      	subs	r2, r3, #1
    83a8:	617a      	str	r2, [r7, #20]
    83aa:	2b00      	cmp	r3, #0
    83ac:	d1ee      	bne.n	838c <_periph_lock+0x40>

	if (timeout < 0) {
    83ae:	697b      	ldr	r3, [r7, #20]
    83b0:	2b00      	cmp	r3, #0
    83b2:	da02      	bge.n	83ba <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    83b4:	f06f 0307 	mvn.w	r3, #7
    83b8:	e000      	b.n	83bc <_periph_lock+0x70>
	}

	return ERR_NONE;
    83ba:	2300      	movs	r3, #0
}
    83bc:	4618      	mov	r0, r3
    83be:	3718      	adds	r7, #24
    83c0:	46bd      	mov	sp, r7
    83c2:	bd80      	pop	{r7, pc}
    83c4:	0001ad0c 	.word	0x0001ad0c
    83c8:	000062c5 	.word	0x000062c5
    83cc:	00008305 	.word	0x00008305
    83d0:	000082e9 	.word	0x000082e9
    83d4:	00008461 	.word	0x00008461

000083d8 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    83d8:	b580      	push	{r7, lr}
    83da:	b086      	sub	sp, #24
    83dc:	af00      	add	r7, sp, #0
    83de:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    83e0:	687b      	ldr	r3, [r7, #4]
    83e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    83e6:	bf8c      	ite	hi
    83e8:	2301      	movhi	r3, #1
    83ea:	2300      	movls	r3, #0
    83ec:	b2db      	uxtb	r3, r3
    83ee:	2253      	movs	r2, #83	; 0x53
    83f0:	4916      	ldr	r1, [pc, #88]	; (844c <_periph_unlock+0x74>)
    83f2:	4618      	mov	r0, r3
    83f4:	4b16      	ldr	r3, [pc, #88]	; (8450 <_periph_unlock+0x78>)
    83f6:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    83f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    83fc:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    83fe:	6878      	ldr	r0, [r7, #4]
    8400:	4b14      	ldr	r3, [pc, #80]	; (8454 <_periph_unlock+0x7c>)
    8402:	4798      	blx	r3
    8404:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    8406:	693b      	ldr	r3, [r7, #16]
    8408:	b29b      	uxth	r3, r3
    840a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    840e:	4619      	mov	r1, r3
    8410:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8414:	4b10      	ldr	r3, [pc, #64]	; (8458 <_periph_unlock+0x80>)
    8416:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    8418:	f107 030f 	add.w	r3, r7, #15
    841c:	4619      	mov	r1, r3
    841e:	6878      	ldr	r0, [r7, #4]
    8420:	4b0e      	ldr	r3, [pc, #56]	; (845c <_periph_unlock+0x84>)
    8422:	4798      	blx	r3
	} while (stat && timeout--);
    8424:	7bfb      	ldrb	r3, [r7, #15]
    8426:	2b00      	cmp	r3, #0
    8428:	d004      	beq.n	8434 <_periph_unlock+0x5c>
    842a:	697b      	ldr	r3, [r7, #20]
    842c:	1e5a      	subs	r2, r3, #1
    842e:	617a      	str	r2, [r7, #20]
    8430:	2b00      	cmp	r3, #0
    8432:	d1f1      	bne.n	8418 <_periph_unlock+0x40>

	if (timeout < 0) {
    8434:	697b      	ldr	r3, [r7, #20]
    8436:	2b00      	cmp	r3, #0
    8438:	da02      	bge.n	8440 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    843a:	f06f 0307 	mvn.w	r3, #7
    843e:	e000      	b.n	8442 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    8440:	2300      	movs	r3, #0
}
    8442:	4618      	mov	r0, r3
    8444:	3718      	adds	r7, #24
    8446:	46bd      	mov	sp, r7
    8448:	bd80      	pop	{r7, pc}
    844a:	bf00      	nop
    844c:	0001ad0c 	.word	0x0001ad0c
    8450:	000062c5 	.word	0x000062c5
    8454:	00008305 	.word	0x00008305
    8458:	000082e9 	.word	0x000082e9
    845c:	00008461 	.word	0x00008461

00008460 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    8460:	b580      	push	{r7, lr}
    8462:	b084      	sub	sp, #16
    8464:	af00      	add	r7, sp, #0
    8466:	6078      	str	r0, [r7, #4]
    8468:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8470:	bf8c      	ite	hi
    8472:	2301      	movhi	r3, #1
    8474:	2300      	movls	r3, #0
    8476:	b2db      	uxtb	r3, r3
    8478:	226d      	movs	r2, #109	; 0x6d
    847a:	4931      	ldr	r1, [pc, #196]	; (8540 <_periph_get_lock_state+0xe0>)
    847c:	4618      	mov	r0, r3
    847e:	4b31      	ldr	r3, [pc, #196]	; (8544 <_periph_get_lock_state+0xe4>)
    8480:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    8482:	6878      	ldr	r0, [r7, #4]
    8484:	4b30      	ldr	r3, [pc, #192]	; (8548 <_periph_get_lock_state+0xe8>)
    8486:	4798      	blx	r3
    8488:	4603      	mov	r3, r0
    848a:	f003 031f 	and.w	r3, r3, #31
    848e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    8496:	d211      	bcs.n	84bc <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    8498:	2201      	movs	r2, #1
    849a:	68fb      	ldr	r3, [r7, #12]
    849c:	fa02 f303 	lsl.w	r3, r2, r3
    84a0:	4619      	mov	r1, r3
    84a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    84a6:	4b29      	ldr	r3, [pc, #164]	; (854c <_periph_get_lock_state+0xec>)
    84a8:	4798      	blx	r3
    84aa:	4603      	mov	r3, r0
    84ac:	2b00      	cmp	r3, #0
    84ae:	bf14      	ite	ne
    84b0:	2301      	movne	r3, #1
    84b2:	2300      	moveq	r3, #0
    84b4:	b2da      	uxtb	r2, r3
    84b6:	683b      	ldr	r3, [r7, #0]
    84b8:	701a      	strb	r2, [r3, #0]
    84ba:	e03c      	b.n	8536 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    84bc:	687b      	ldr	r3, [r7, #4]
    84be:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    84c2:	d211      	bcs.n	84e8 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    84c4:	2201      	movs	r2, #1
    84c6:	68fb      	ldr	r3, [r7, #12]
    84c8:	fa02 f303 	lsl.w	r3, r2, r3
    84cc:	4619      	mov	r1, r3
    84ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    84d2:	4b1f      	ldr	r3, [pc, #124]	; (8550 <_periph_get_lock_state+0xf0>)
    84d4:	4798      	blx	r3
    84d6:	4603      	mov	r3, r0
    84d8:	2b00      	cmp	r3, #0
    84da:	bf14      	ite	ne
    84dc:	2301      	movne	r3, #1
    84de:	2300      	moveq	r3, #0
    84e0:	b2da      	uxtb	r2, r3
    84e2:	683b      	ldr	r3, [r7, #0]
    84e4:	701a      	strb	r2, [r3, #0]
    84e6:	e026      	b.n	8536 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    84ee:	d211      	bcs.n	8514 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    84f0:	2201      	movs	r2, #1
    84f2:	68fb      	ldr	r3, [r7, #12]
    84f4:	fa02 f303 	lsl.w	r3, r2, r3
    84f8:	4619      	mov	r1, r3
    84fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    84fe:	4b15      	ldr	r3, [pc, #84]	; (8554 <_periph_get_lock_state+0xf4>)
    8500:	4798      	blx	r3
    8502:	4603      	mov	r3, r0
    8504:	2b00      	cmp	r3, #0
    8506:	bf14      	ite	ne
    8508:	2301      	movne	r3, #1
    850a:	2300      	moveq	r3, #0
    850c:	b2da      	uxtb	r2, r3
    850e:	683b      	ldr	r3, [r7, #0]
    8510:	701a      	strb	r2, [r3, #0]
    8512:	e010      	b.n	8536 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    8514:	2201      	movs	r2, #1
    8516:	68fb      	ldr	r3, [r7, #12]
    8518:	fa02 f303 	lsl.w	r3, r2, r3
    851c:	4619      	mov	r1, r3
    851e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8522:	4b0d      	ldr	r3, [pc, #52]	; (8558 <_periph_get_lock_state+0xf8>)
    8524:	4798      	blx	r3
    8526:	4603      	mov	r3, r0
    8528:	2b00      	cmp	r3, #0
    852a:	bf14      	ite	ne
    852c:	2301      	movne	r3, #1
    852e:	2300      	moveq	r3, #0
    8530:	b2da      	uxtb	r2, r3
    8532:	683b      	ldr	r3, [r7, #0]
    8534:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    8536:	2300      	movs	r3, #0
}
    8538:	4618      	mov	r0, r3
    853a:	3710      	adds	r7, #16
    853c:	46bd      	mov	sp, r7
    853e:	bd80      	pop	{r7, pc}
    8540:	0001ad0c 	.word	0x0001ad0c
    8544:	000062c5 	.word	0x000062c5
    8548:	00008305 	.word	0x00008305
    854c:	00008251 	.word	0x00008251
    8550:	00008277 	.word	0x00008277
    8554:	0000829d 	.word	0x0000829d
    8558:	000082c3 	.word	0x000082c3

0000855c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    855c:	b480      	push	{r7}
    855e:	b083      	sub	sp, #12
    8560:	af00      	add	r7, sp, #0
    8562:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	69db      	ldr	r3, [r3, #28]
    8568:	0a9b      	lsrs	r3, r3, #10
    856a:	f003 0301 	and.w	r3, r3, #1
    856e:	2b00      	cmp	r3, #0
    8570:	bf14      	ite	ne
    8572:	2301      	movne	r3, #1
    8574:	2300      	moveq	r3, #0
    8576:	b2db      	uxtb	r3, r3
}
    8578:	4618      	mov	r0, r3
    857a:	370c      	adds	r7, #12
    857c:	46bd      	mov	sp, r7
    857e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8582:	4770      	bx	lr

00008584 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    8584:	b480      	push	{r7}
    8586:	b083      	sub	sp, #12
    8588:	af00      	add	r7, sp, #0
    858a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8592:	61da      	str	r2, [r3, #28]
}
    8594:	bf00      	nop
    8596:	370c      	adds	r7, #12
    8598:	46bd      	mov	sp, r7
    859a:	f85d 7b04 	ldr.w	r7, [sp], #4
    859e:	4770      	bx	lr

000085a0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    85a0:	b480      	push	{r7}
    85a2:	b083      	sub	sp, #12
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
    85a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    85aa:	687b      	ldr	r3, [r7, #4]
    85ac:	683a      	ldr	r2, [r7, #0]
    85ae:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85b0:	bf00      	nop
    85b2:	370c      	adds	r7, #12
    85b4:	46bd      	mov	sp, r7
    85b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ba:	4770      	bx	lr

000085bc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    85bc:	b480      	push	{r7}
    85be:	b083      	sub	sp, #12
    85c0:	af00      	add	r7, sp, #0
    85c2:	6078      	str	r0, [r7, #4]
    85c4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    85c6:	687b      	ldr	r3, [r7, #4]
    85c8:	683a      	ldr	r2, [r7, #0]
    85ca:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85cc:	bf00      	nop
    85ce:	370c      	adds	r7, #12
    85d0:	46bd      	mov	sp, r7
    85d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d6:	4770      	bx	lr

000085d8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    85d8:	b480      	push	{r7}
    85da:	b083      	sub	sp, #12
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
    85e0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    85e2:	687b      	ldr	r3, [r7, #4]
    85e4:	683a      	ldr	r2, [r7, #0]
    85e6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85e8:	bf00      	nop
    85ea:	370c      	adds	r7, #12
    85ec:	46bd      	mov	sp, r7
    85ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f2:	4770      	bx	lr

000085f4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    85f4:	b480      	push	{r7}
    85f6:	b083      	sub	sp, #12
    85f8:	af00      	add	r7, sp, #0
    85fa:	6078      	str	r0, [r7, #4]
    85fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    85fe:	687b      	ldr	r3, [r7, #4]
    8600:	683a      	ldr	r2, [r7, #0]
    8602:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8604:	bf00      	nop
    8606:	370c      	adds	r7, #12
    8608:	46bd      	mov	sp, r7
    860a:	f85d 7b04 	ldr.w	r7, [sp], #4
    860e:	4770      	bx	lr

00008610 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    8610:	b480      	push	{r7}
    8612:	b085      	sub	sp, #20
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
    8618:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    861a:	687b      	ldr	r3, [r7, #4]
    861c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    861e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    8620:	68fb      	ldr	r3, [r7, #12]
    8622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8626:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    8628:	683b      	ldr	r3, [r7, #0]
    862a:	b2db      	uxtb	r3, r3
    862c:	68fa      	ldr	r2, [r7, #12]
    862e:	4313      	orrs	r3, r2
    8630:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    8632:	687b      	ldr	r3, [r7, #4]
    8634:	68fa      	ldr	r2, [r7, #12]
    8636:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8638:	bf00      	nop
    863a:	3714      	adds	r7, #20
    863c:	46bd      	mov	sp, r7
    863e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8642:	4770      	bx	lr

00008644 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    8644:	b480      	push	{r7}
    8646:	b085      	sub	sp, #20
    8648:	af00      	add	r7, sp, #0
    864a:	6078      	str	r0, [r7, #4]
    864c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8652:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    8654:	68fb      	ldr	r3, [r7, #12]
    8656:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    865a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    865c:	683b      	ldr	r3, [r7, #0]
    865e:	041b      	lsls	r3, r3, #16
    8660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    8664:	68fa      	ldr	r2, [r7, #12]
    8666:	4313      	orrs	r3, r2
    8668:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    866a:	687b      	ldr	r3, [r7, #4]
    866c:	68fa      	ldr	r2, [r7, #12]
    866e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8670:	bf00      	nop
    8672:	3714      	adds	r7, #20
    8674:	46bd      	mov	sp, r7
    8676:	f85d 7b04 	ldr.w	r7, [sp], #4
    867a:	4770      	bx	lr

0000867c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    867c:	b480      	push	{r7}
    867e:	b083      	sub	sp, #12
    8680:	af00      	add	r7, sp, #0
    8682:	6078      	str	r0, [r7, #4]
    8684:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    8686:	687b      	ldr	r3, [r7, #4]
    8688:	683a      	ldr	r2, [r7, #0]
    868a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    868c:	bf00      	nop
    868e:	370c      	adds	r7, #12
    8690:	46bd      	mov	sp, r7
    8692:	f85d 7b04 	ldr.w	r7, [sp], #4
    8696:	4770      	bx	lr

00008698 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    8698:	b480      	push	{r7}
    869a:	b083      	sub	sp, #12
    869c:	af00      	add	r7, sp, #0
    869e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    86a4:	4618      	mov	r0, r3
    86a6:	370c      	adds	r7, #12
    86a8:	46bd      	mov	sp, r7
    86aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ae:	4770      	bx	lr

000086b0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    86b0:	b480      	push	{r7}
    86b2:	b085      	sub	sp, #20
    86b4:	af00      	add	r7, sp, #0
    86b6:	60f8      	str	r0, [r7, #12]
    86b8:	60b9      	str	r1, [r7, #8]
    86ba:	607a      	str	r2, [r7, #4]
	while (count--) {
    86bc:	e007      	b.n	86ce <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    86be:	68fb      	ldr	r3, [r7, #12]
    86c0:	1c5a      	adds	r2, r3, #1
    86c2:	60fa      	str	r2, [r7, #12]
    86c4:	68ba      	ldr	r2, [r7, #8]
    86c6:	1c51      	adds	r1, r2, #1
    86c8:	60b9      	str	r1, [r7, #8]
    86ca:	7812      	ldrb	r2, [r2, #0]
    86cc:	701a      	strb	r2, [r3, #0]
	while (count--) {
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	1e5a      	subs	r2, r3, #1
    86d2:	607a      	str	r2, [r7, #4]
    86d4:	2b00      	cmp	r3, #0
    86d6:	d1f2      	bne.n	86be <_qspi_memcpy+0xe>
	}
}
    86d8:	bf00      	nop
    86da:	3714      	adds	r7, #20
    86dc:	46bd      	mov	sp, r7
    86de:	f85d 7b04 	ldr.w	r7, [sp], #4
    86e2:	4770      	bx	lr

000086e4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    86e4:	b580      	push	{r7, lr}
    86e6:	b082      	sub	sp, #8
    86e8:	af00      	add	r7, sp, #0
    86ea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    86ec:	4903      	ldr	r1, [pc, #12]	; (86fc <_qspi_end_transfer+0x18>)
    86ee:	6878      	ldr	r0, [r7, #4]
    86f0:	4b03      	ldr	r3, [pc, #12]	; (8700 <_qspi_end_transfer+0x1c>)
    86f2:	4798      	blx	r3
}
    86f4:	bf00      	nop
    86f6:	3708      	adds	r7, #8
    86f8:	46bd      	mov	sp, r7
    86fa:	bd80      	pop	{r7, pc}
    86fc:	01000002 	.word	0x01000002
    8700:	000085a1 	.word	0x000085a1

00008704 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    8704:	b580      	push	{r7, lr}
    8706:	b082      	sub	sp, #8
    8708:	af00      	add	r7, sp, #0
    870a:	6078      	str	r0, [r7, #4]
    870c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    870e:	687b      	ldr	r3, [r7, #4]
    8710:	2b00      	cmp	r3, #0
    8712:	d004      	beq.n	871e <_qspi_sync_init+0x1a>
    8714:	683b      	ldr	r3, [r7, #0]
    8716:	2b00      	cmp	r3, #0
    8718:	d001      	beq.n	871e <_qspi_sync_init+0x1a>
    871a:	2301      	movs	r3, #1
    871c:	e000      	b.n	8720 <_qspi_sync_init+0x1c>
    871e:	2300      	movs	r3, #0
    8720:	f003 0301 	and.w	r3, r3, #1
    8724:	b2db      	uxtb	r3, r3
    8726:	2240      	movs	r2, #64	; 0x40
    8728:	490c      	ldr	r1, [pc, #48]	; (875c <_qspi_sync_init+0x58>)
    872a:	4618      	mov	r0, r3
    872c:	4b0c      	ldr	r3, [pc, #48]	; (8760 <_qspi_sync_init+0x5c>)
    872e:	4798      	blx	r3
	dev->prvt = hw;
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	683a      	ldr	r2, [r7, #0]
    8734:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    8736:	687b      	ldr	r3, [r7, #4]
    8738:	681b      	ldr	r3, [r3, #0]
    873a:	2101      	movs	r1, #1
    873c:	4618      	mov	r0, r3
    873e:	4b09      	ldr	r3, [pc, #36]	; (8764 <_qspi_sync_init+0x60>)
    8740:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    8742:	4909      	ldr	r1, [pc, #36]	; (8768 <_qspi_sync_init+0x64>)
    8744:	6838      	ldr	r0, [r7, #0]
    8746:	4b09      	ldr	r3, [pc, #36]	; (876c <_qspi_sync_init+0x68>)
    8748:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    874a:	4909      	ldr	r1, [pc, #36]	; (8770 <_qspi_sync_init+0x6c>)
    874c:	6838      	ldr	r0, [r7, #0]
    874e:	4b09      	ldr	r3, [pc, #36]	; (8774 <_qspi_sync_init+0x70>)
    8750:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    8752:	2300      	movs	r3, #0
}
    8754:	4618      	mov	r0, r3
    8756:	3708      	adds	r7, #8
    8758:	46bd      	mov	sp, r7
    875a:	bd80      	pop	{r7, pc}
    875c:	0001ad24 	.word	0x0001ad24
    8760:	000062c5 	.word	0x000062c5
    8764:	000085a1 	.word	0x000085a1
    8768:	06000011 	.word	0x06000011
    876c:	000085bd 	.word	0x000085bd
    8770:	00241300 	.word	0x00241300
    8774:	000085d9 	.word	0x000085d9

00008778 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    8778:	b580      	push	{r7, lr}
    877a:	b082      	sub	sp, #8
    877c:	af00      	add	r7, sp, #0
    877e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	681b      	ldr	r3, [r3, #0]
    8784:	2102      	movs	r1, #2
    8786:	4618      	mov	r0, r3
    8788:	4b03      	ldr	r3, [pc, #12]	; (8798 <_qspi_sync_enable+0x20>)
    878a:	4798      	blx	r3
	return ERR_NONE;
    878c:	2300      	movs	r3, #0
}
    878e:	4618      	mov	r0, r3
    8790:	3708      	adds	r7, #8
    8792:	46bd      	mov	sp, r7
    8794:	bd80      	pop	{r7, pc}
    8796:	bf00      	nop
    8798:	000085a1 	.word	0x000085a1

0000879c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    879c:	b580      	push	{r7, lr}
    879e:	b082      	sub	sp, #8
    87a0:	af00      	add	r7, sp, #0
    87a2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    87a4:	687b      	ldr	r3, [r7, #4]
    87a6:	681b      	ldr	r3, [r3, #0]
    87a8:	2100      	movs	r1, #0
    87aa:	4618      	mov	r0, r3
    87ac:	4b03      	ldr	r3, [pc, #12]	; (87bc <_qspi_sync_disable+0x20>)
    87ae:	4798      	blx	r3
	return ERR_NONE;
    87b0:	2300      	movs	r3, #0
}
    87b2:	4618      	mov	r0, r3
    87b4:	3708      	adds	r7, #8
    87b6:	46bd      	mov	sp, r7
    87b8:	bd80      	pop	{r7, pc}
    87ba:	bf00      	nop
    87bc:	000085a1 	.word	0x000085a1

000087c0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    87c0:	b580      	push	{r7, lr}
    87c2:	b084      	sub	sp, #16
    87c4:	af00      	add	r7, sp, #0
    87c6:	6078      	str	r0, [r7, #4]
    87c8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	681b      	ldr	r3, [r3, #0]
    87ce:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    87d0:	683b      	ldr	r3, [r7, #0]
    87d2:	781b      	ldrb	r3, [r3, #0]
    87d4:	f003 0320 	and.w	r3, r3, #32
    87d8:	b2db      	uxtb	r3, r3
    87da:	2b00      	cmp	r3, #0
    87dc:	d005      	beq.n	87ea <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    87de:	683b      	ldr	r3, [r7, #0]
    87e0:	689b      	ldr	r3, [r3, #8]
    87e2:	4619      	mov	r1, r3
    87e4:	68f8      	ldr	r0, [r7, #12]
    87e6:	4b13      	ldr	r3, [pc, #76]	; (8834 <_qspi_sync_command_set_ifr+0x74>)
    87e8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    87ea:	683b      	ldr	r3, [r7, #0]
    87ec:	781b      	ldrb	r3, [r3, #0]
    87ee:	f003 0310 	and.w	r3, r3, #16
    87f2:	b2db      	uxtb	r3, r3
    87f4:	2b00      	cmp	r3, #0
    87f6:	d005      	beq.n	8804 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    87f8:	683b      	ldr	r3, [r7, #0]
    87fa:	791b      	ldrb	r3, [r3, #4]
    87fc:	4619      	mov	r1, r3
    87fe:	68f8      	ldr	r0, [r7, #12]
    8800:	4b0d      	ldr	r3, [pc, #52]	; (8838 <_qspi_sync_command_set_ifr+0x78>)
    8802:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    8804:	683b      	ldr	r3, [r7, #0]
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	f003 0340 	and.w	r3, r3, #64	; 0x40
    880c:	b2db      	uxtb	r3, r3
    880e:	2b00      	cmp	r3, #0
    8810:	d005      	beq.n	881e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    8812:	683b      	ldr	r3, [r7, #0]
    8814:	795b      	ldrb	r3, [r3, #5]
    8816:	4619      	mov	r1, r3
    8818:	68f8      	ldr	r0, [r7, #12]
    881a:	4b08      	ldr	r3, [pc, #32]	; (883c <_qspi_sync_command_set_ifr+0x7c>)
    881c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    881e:	683b      	ldr	r3, [r7, #0]
    8820:	681b      	ldr	r3, [r3, #0]
    8822:	4619      	mov	r1, r3
    8824:	68f8      	ldr	r0, [r7, #12]
    8826:	4b06      	ldr	r3, [pc, #24]	; (8840 <_qspi_sync_command_set_ifr+0x80>)
    8828:	4798      	blx	r3
}
    882a:	bf00      	nop
    882c:	3710      	adds	r7, #16
    882e:	46bd      	mov	sp, r7
    8830:	bd80      	pop	{r7, pc}
    8832:	bf00      	nop
    8834:	000085f5 	.word	0x000085f5
    8838:	00008611 	.word	0x00008611
    883c:	00008645 	.word	0x00008645
    8840:	0000867d 	.word	0x0000867d

00008844 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8844:	b580      	push	{r7, lr}
    8846:	b084      	sub	sp, #16
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    884e:	687b      	ldr	r3, [r7, #4]
    8850:	681b      	ldr	r3, [r3, #0]
    8852:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    8854:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8858:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    885a:	683b      	ldr	r3, [r7, #0]
    885c:	781b      	ldrb	r3, [r3, #0]
    885e:	f003 0320 	and.w	r3, r3, #32
    8862:	b2db      	uxtb	r3, r3
    8864:	2b00      	cmp	r3, #0
    8866:	d004      	beq.n	8872 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    8868:	683b      	ldr	r3, [r7, #0]
    886a:	689b      	ldr	r3, [r3, #8]
    886c:	68fa      	ldr	r2, [r7, #12]
    886e:	4413      	add	r3, r2
    8870:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    8872:	68b8      	ldr	r0, [r7, #8]
    8874:	4b18      	ldr	r3, [pc, #96]	; (88d8 <_qspi_sync_run_transfer+0x94>)
    8876:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    8878:	683b      	ldr	r3, [r7, #0]
    887a:	691b      	ldr	r3, [r3, #16]
    887c:	2b00      	cmp	r3, #0
    887e:	d103      	bne.n	8888 <_qspi_sync_run_transfer+0x44>
    8880:	683b      	ldr	r3, [r7, #0]
    8882:	695b      	ldr	r3, [r3, #20]
    8884:	2b00      	cmp	r3, #0
    8886:	d001      	beq.n	888c <_qspi_sync_run_transfer+0x48>
    8888:	2301      	movs	r3, #1
    888a:	e000      	b.n	888e <_qspi_sync_run_transfer+0x4a>
    888c:	2300      	movs	r3, #0
    888e:	f003 0301 	and.w	r3, r3, #1
    8892:	b2db      	uxtb	r3, r3
    8894:	2282      	movs	r2, #130	; 0x82
    8896:	4911      	ldr	r1, [pc, #68]	; (88dc <_qspi_sync_run_transfer+0x98>)
    8898:	4618      	mov	r0, r3
    889a:	4b11      	ldr	r3, [pc, #68]	; (88e0 <_qspi_sync_run_transfer+0x9c>)
    889c:	4798      	blx	r3

	if (cmd->tx_buf) {
    889e:	683b      	ldr	r3, [r7, #0]
    88a0:	691b      	ldr	r3, [r3, #16]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d008      	beq.n	88b8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    88a6:	683b      	ldr	r3, [r7, #0]
    88a8:	6919      	ldr	r1, [r3, #16]
    88aa:	683b      	ldr	r3, [r7, #0]
    88ac:	68db      	ldr	r3, [r3, #12]
    88ae:	461a      	mov	r2, r3
    88b0:	68f8      	ldr	r0, [r7, #12]
    88b2:	4b0c      	ldr	r3, [pc, #48]	; (88e4 <_qspi_sync_run_transfer+0xa0>)
    88b4:	4798      	blx	r3
    88b6:	e007      	b.n	88c8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    88b8:	683b      	ldr	r3, [r7, #0]
    88ba:	6958      	ldr	r0, [r3, #20]
    88bc:	683b      	ldr	r3, [r7, #0]
    88be:	68db      	ldr	r3, [r3, #12]
    88c0:	461a      	mov	r2, r3
    88c2:	68f9      	ldr	r1, [r7, #12]
    88c4:	4b07      	ldr	r3, [pc, #28]	; (88e4 <_qspi_sync_run_transfer+0xa0>)
    88c6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    88c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    88cc:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    88d0:	bf00      	nop
    88d2:	3710      	adds	r7, #16
    88d4:	46bd      	mov	sp, r7
    88d6:	bd80      	pop	{r7, pc}
    88d8:	00008699 	.word	0x00008699
    88dc:	0001ad24 	.word	0x0001ad24
    88e0:	000062c5 	.word	0x000062c5
    88e4:	000086b1 	.word	0x000086b1

000088e8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    88e8:	b580      	push	{r7, lr}
    88ea:	b082      	sub	sp, #8
    88ec:	af00      	add	r7, sp, #0
    88ee:	6078      	str	r0, [r7, #4]
    88f0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    88f2:	6839      	ldr	r1, [r7, #0]
    88f4:	6878      	ldr	r0, [r7, #4]
    88f6:	4b14      	ldr	r3, [pc, #80]	; (8948 <_qspi_sync_serial_run_command+0x60>)
    88f8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    88fa:	683b      	ldr	r3, [r7, #0]
    88fc:	781b      	ldrb	r3, [r3, #0]
    88fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8902:	b2db      	uxtb	r3, r3
    8904:	2b00      	cmp	r3, #0
    8906:	d003      	beq.n	8910 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    8908:	6839      	ldr	r1, [r7, #0]
    890a:	6878      	ldr	r0, [r7, #4]
    890c:	4b0f      	ldr	r3, [pc, #60]	; (894c <_qspi_sync_serial_run_command+0x64>)
    890e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    8910:	687b      	ldr	r3, [r7, #4]
    8912:	681b      	ldr	r3, [r3, #0]
    8914:	4618      	mov	r0, r3
    8916:	4b0e      	ldr	r3, [pc, #56]	; (8950 <_qspi_sync_serial_run_command+0x68>)
    8918:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    891a:	bf00      	nop
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	681b      	ldr	r3, [r3, #0]
    8920:	4618      	mov	r0, r3
    8922:	4b0c      	ldr	r3, [pc, #48]	; (8954 <_qspi_sync_serial_run_command+0x6c>)
    8924:	4798      	blx	r3
    8926:	4603      	mov	r3, r0
    8928:	f083 0301 	eor.w	r3, r3, #1
    892c:	b2db      	uxtb	r3, r3
    892e:	2b00      	cmp	r3, #0
    8930:	d1f4      	bne.n	891c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    8932:	687b      	ldr	r3, [r7, #4]
    8934:	681b      	ldr	r3, [r3, #0]
    8936:	4618      	mov	r0, r3
    8938:	4b07      	ldr	r3, [pc, #28]	; (8958 <_qspi_sync_serial_run_command+0x70>)
    893a:	4798      	blx	r3
	return ERR_NONE;
    893c:	2300      	movs	r3, #0
}
    893e:	4618      	mov	r0, r3
    8940:	3708      	adds	r7, #8
    8942:	46bd      	mov	sp, r7
    8944:	bd80      	pop	{r7, pc}
    8946:	bf00      	nop
    8948:	000087c1 	.word	0x000087c1
    894c:	00008845 	.word	0x00008845
    8950:	000086e5 	.word	0x000086e5
    8954:	0000855d 	.word	0x0000855d
    8958:	00008585 	.word	0x00008585

0000895c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    895c:	b480      	push	{r7}
    895e:	b083      	sub	sp, #12
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
    8964:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8966:	bf00      	nop
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	691a      	ldr	r2, [r3, #16]
    896c:	683b      	ldr	r3, [r7, #0]
    896e:	4013      	ands	r3, r2
    8970:	2b00      	cmp	r3, #0
    8972:	d1f9      	bne.n	8968 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    8974:	bf00      	nop
    8976:	370c      	adds	r7, #12
    8978:	46bd      	mov	sp, r7
    897a:	f85d 7b04 	ldr.w	r7, [sp], #4
    897e:	4770      	bx	lr

00008980 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    8980:	b480      	push	{r7}
    8982:	b083      	sub	sp, #12
    8984:	af00      	add	r7, sp, #0
    8986:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	f44f 7280 	mov.w	r2, #256	; 0x100
    898e:	819a      	strh	r2, [r3, #12]
}
    8990:	bf00      	nop
    8992:	370c      	adds	r7, #12
    8994:	46bd      	mov	sp, r7
    8996:	f85d 7b04 	ldr.w	r7, [sp], #4
    899a:	4770      	bx	lr

0000899c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    899c:	b480      	push	{r7}
    899e:	b083      	sub	sp, #12
    89a0:	af00      	add	r7, sp, #0
    89a2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    89a4:	687b      	ldr	r3, [r7, #4]
    89a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    89aa:	819a      	strh	r2, [r3, #12]
}
    89ac:	bf00      	nop
    89ae:	370c      	adds	r7, #12
    89b0:	46bd      	mov	sp, r7
    89b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    89b6:	4770      	bx	lr

000089b8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    89b8:	b480      	push	{r7}
    89ba:	b083      	sub	sp, #12
    89bc:	af00      	add	r7, sp, #0
    89be:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	899b      	ldrh	r3, [r3, #12]
    89c4:	b29b      	uxth	r3, r3
}
    89c6:	4618      	mov	r0, r3
    89c8:	370c      	adds	r7, #12
    89ca:	46bd      	mov	sp, r7
    89cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    89d0:	4770      	bx	lr

000089d2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    89d2:	b480      	push	{r7}
    89d4:	b083      	sub	sp, #12
    89d6:	af00      	add	r7, sp, #0
    89d8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	895b      	ldrh	r3, [r3, #10]
    89de:	b29b      	uxth	r3, r3
}
    89e0:	4618      	mov	r0, r3
    89e2:	370c      	adds	r7, #12
    89e4:	46bd      	mov	sp, r7
    89e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ea:	4770      	bx	lr

000089ec <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    89ec:	b580      	push	{r7, lr}
    89ee:	b082      	sub	sp, #8
    89f0:	af00      	add	r7, sp, #0
    89f2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	881b      	ldrh	r3, [r3, #0]
    89f8:	b29b      	uxth	r3, r3
    89fa:	f043 0301 	orr.w	r3, r3, #1
    89fe:	b29a      	uxth	r2, r3
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    8a04:	2101      	movs	r1, #1
    8a06:	6878      	ldr	r0, [r7, #4]
    8a08:	4b02      	ldr	r3, [pc, #8]	; (8a14 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    8a0a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a0c:	bf00      	nop
    8a0e:	3708      	adds	r7, #8
    8a10:	46bd      	mov	sp, r7
    8a12:	bd80      	pop	{r7, pc}
    8a14:	0000895d 	.word	0x0000895d

00008a18 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8a18:	b580      	push	{r7, lr}
    8a1a:	b082      	sub	sp, #8
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	881b      	ldrh	r3, [r3, #0]
    8a24:	b29b      	uxth	r3, r3
    8a26:	f043 0302 	orr.w	r3, r3, #2
    8a2a:	b29a      	uxth	r2, r3
    8a2c:	687b      	ldr	r3, [r7, #4]
    8a2e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8a30:	f248 0103 	movw	r1, #32771	; 0x8003
    8a34:	6878      	ldr	r0, [r7, #4]
    8a36:	4b03      	ldr	r3, [pc, #12]	; (8a44 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    8a38:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a3a:	bf00      	nop
    8a3c:	3708      	adds	r7, #8
    8a3e:	46bd      	mov	sp, r7
    8a40:	bd80      	pop	{r7, pc}
    8a42:	bf00      	nop
    8a44:	0000895d 	.word	0x0000895d

00008a48 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8a48:	b580      	push	{r7, lr}
    8a4a:	b084      	sub	sp, #16
    8a4c:	af00      	add	r7, sp, #0
    8a4e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8a50:	f248 0103 	movw	r1, #32771	; 0x8003
    8a54:	6878      	ldr	r0, [r7, #4]
    8a56:	4b0a      	ldr	r3, [pc, #40]	; (8a80 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    8a58:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	881b      	ldrh	r3, [r3, #0]
    8a5e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    8a60:	89fb      	ldrh	r3, [r7, #14]
    8a62:	085b      	lsrs	r3, r3, #1
    8a64:	b29b      	uxth	r3, r3
    8a66:	f003 0301 	and.w	r3, r3, #1
    8a6a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    8a6c:	89fb      	ldrh	r3, [r7, #14]
    8a6e:	2b00      	cmp	r3, #0
    8a70:	bf14      	ite	ne
    8a72:	2301      	movne	r3, #1
    8a74:	2300      	moveq	r3, #0
    8a76:	b2db      	uxtb	r3, r3
}
    8a78:	4618      	mov	r0, r3
    8a7a:	3710      	adds	r7, #16
    8a7c:	46bd      	mov	sp, r7
    8a7e:	bd80      	pop	{r7, pc}
    8a80:	0000895d 	.word	0x0000895d

00008a84 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8a84:	b580      	push	{r7, lr}
    8a86:	b082      	sub	sp, #8
    8a88:	af00      	add	r7, sp, #0
    8a8a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8a8c:	687b      	ldr	r3, [r7, #4]
    8a8e:	881b      	ldrh	r3, [r3, #0]
    8a90:	b29b      	uxth	r3, r3
    8a92:	f023 0302 	bic.w	r3, r3, #2
    8a96:	b29a      	uxth	r2, r3
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8a9c:	f248 0103 	movw	r1, #32771	; 0x8003
    8aa0:	6878      	ldr	r0, [r7, #4]
    8aa2:	4b03      	ldr	r3, [pc, #12]	; (8ab0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    8aa4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8aa6:	bf00      	nop
    8aa8:	3708      	adds	r7, #8
    8aaa:	46bd      	mov	sp, r7
    8aac:	bd80      	pop	{r7, pc}
    8aae:	bf00      	nop
    8ab0:	0000895d 	.word	0x0000895d

00008ab4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    8ab4:	b580      	push	{r7, lr}
    8ab6:	b082      	sub	sp, #8
    8ab8:	af00      	add	r7, sp, #0
    8aba:	6078      	str	r0, [r7, #4]
    8abc:	460b      	mov	r3, r1
    8abe:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	887a      	ldrh	r2, [r7, #2]
    8ac4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8ac6:	f248 0103 	movw	r1, #32771	; 0x8003
    8aca:	6878      	ldr	r0, [r7, #4]
    8acc:	4b02      	ldr	r3, [pc, #8]	; (8ad8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    8ace:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8ad0:	bf00      	nop
    8ad2:	3708      	adds	r7, #8
    8ad4:	46bd      	mov	sp, r7
    8ad6:	bd80      	pop	{r7, pc}
    8ad8:	0000895d 	.word	0x0000895d

00008adc <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    8adc:	b580      	push	{r7, lr}
    8ade:	b082      	sub	sp, #8
    8ae0:	af00      	add	r7, sp, #0
    8ae2:	6078      	str	r0, [r7, #4]
    8ae4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    8ae6:	687b      	ldr	r3, [r7, #4]
    8ae8:	683a      	ldr	r2, [r7, #0]
    8aea:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8aec:	2108      	movs	r1, #8
    8aee:	6878      	ldr	r0, [r7, #4]
    8af0:	4b02      	ldr	r3, [pc, #8]	; (8afc <hri_rtcmode0_write_COUNT_reg+0x20>)
    8af2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8af4:	bf00      	nop
    8af6:	3708      	adds	r7, #8
    8af8:	46bd      	mov	sp, r7
    8afa:	bd80      	pop	{r7, pc}
    8afc:	0000895d 	.word	0x0000895d

00008b00 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b082      	sub	sp, #8
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8b08:	2108      	movs	r1, #8
    8b0a:	6878      	ldr	r0, [r7, #4]
    8b0c:	4b03      	ldr	r3, [pc, #12]	; (8b1c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    8b0e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    8b10:	687b      	ldr	r3, [r7, #4]
    8b12:	699b      	ldr	r3, [r3, #24]
}
    8b14:	4618      	mov	r0, r3
    8b16:	3708      	adds	r7, #8
    8b18:	46bd      	mov	sp, r7
    8b1a:	bd80      	pop	{r7, pc}
    8b1c:	0000895d 	.word	0x0000895d

00008b20 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    8b20:	b480      	push	{r7}
    8b22:	b083      	sub	sp, #12
    8b24:	af00      	add	r7, sp, #0
    8b26:	6078      	str	r0, [r7, #4]
    8b28:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	683a      	ldr	r2, [r7, #0]
    8b2e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    8b30:	bf00      	nop
    8b32:	370c      	adds	r7, #12
    8b34:	46bd      	mov	sp, r7
    8b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b3a:	4770      	bx	lr

00008b3c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b082      	sub	sp, #8
    8b40:	af00      	add	r7, sp, #0
    8b42:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	2b00      	cmp	r3, #0
    8b48:	d005      	beq.n	8b56 <_calendar_init+0x1a>
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	681b      	ldr	r3, [r3, #0]
    8b4e:	2b00      	cmp	r3, #0
    8b50:	d001      	beq.n	8b56 <_calendar_init+0x1a>
    8b52:	2301      	movs	r3, #1
    8b54:	e000      	b.n	8b58 <_calendar_init+0x1c>
    8b56:	2300      	movs	r3, #0
    8b58:	f003 0301 	and.w	r3, r3, #1
    8b5c:	b2db      	uxtb	r3, r3
    8b5e:	222f      	movs	r2, #47	; 0x2f
    8b60:	491e      	ldr	r1, [pc, #120]	; (8bdc <_calendar_init+0xa0>)
    8b62:	4618      	mov	r0, r3
    8b64:	4b1e      	ldr	r3, [pc, #120]	; (8be0 <_calendar_init+0xa4>)
    8b66:	4798      	blx	r3

	_rtc_dev = dev;
    8b68:	4a1e      	ldr	r2, [pc, #120]	; (8be4 <_calendar_init+0xa8>)
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8b6e:	687b      	ldr	r3, [r7, #4]
    8b70:	681b      	ldr	r3, [r3, #0]
    8b72:	2101      	movs	r1, #1
    8b74:	4618      	mov	r0, r3
    8b76:	4b1c      	ldr	r3, [pc, #112]	; (8be8 <_calendar_init+0xac>)
    8b78:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	681b      	ldr	r3, [r3, #0]
    8b7e:	4618      	mov	r0, r3
    8b80:	4b1a      	ldr	r3, [pc, #104]	; (8bec <_calendar_init+0xb0>)
    8b82:	4798      	blx	r3
    8b84:	4603      	mov	r3, r0
    8b86:	2b00      	cmp	r3, #0
    8b88:	d00a      	beq.n	8ba0 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	681b      	ldr	r3, [r3, #0]
    8b8e:	4618      	mov	r0, r3
    8b90:	4b17      	ldr	r3, [pc, #92]	; (8bf0 <_calendar_init+0xb4>)
    8b92:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	681b      	ldr	r3, [r3, #0]
    8b98:	2102      	movs	r1, #2
    8b9a:	4618      	mov	r0, r3
    8b9c:	4b12      	ldr	r3, [pc, #72]	; (8be8 <_calendar_init+0xac>)
    8b9e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	681b      	ldr	r3, [r3, #0]
    8ba4:	4618      	mov	r0, r3
    8ba6:	4b13      	ldr	r3, [pc, #76]	; (8bf4 <_calendar_init+0xb8>)
    8ba8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	681b      	ldr	r3, [r3, #0]
    8bae:	2101      	movs	r1, #1
    8bb0:	4618      	mov	r0, r3
    8bb2:	4b0d      	ldr	r3, [pc, #52]	; (8be8 <_calendar_init+0xac>)
    8bb4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8bb6:	687b      	ldr	r3, [r7, #4]
    8bb8:	681b      	ldr	r3, [r3, #0]
    8bba:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    8bbe:	4618      	mov	r0, r3
    8bc0:	4b0d      	ldr	r3, [pc, #52]	; (8bf8 <_calendar_init+0xbc>)
    8bc2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8bc4:	687b      	ldr	r3, [r7, #4]
    8bc6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8bc8:	2100      	movs	r1, #0
    8bca:	4618      	mov	r0, r3
    8bcc:	4b0b      	ldr	r3, [pc, #44]	; (8bfc <_calendar_init+0xc0>)
    8bce:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    8bd0:	2300      	movs	r3, #0
}
    8bd2:	4618      	mov	r0, r3
    8bd4:	3708      	adds	r7, #8
    8bd6:	46bd      	mov	sp, r7
    8bd8:	bd80      	pop	{r7, pc}
    8bda:	bf00      	nop
    8bdc:	0001ad3c 	.word	0x0001ad3c
    8be0:	000062c5 	.word	0x000062c5
    8be4:	2000338c 	.word	0x2000338c
    8be8:	0000895d 	.word	0x0000895d
    8bec:	00008a49 	.word	0x00008a49
    8bf0:	00008a85 	.word	0x00008a85
    8bf4:	000089ed 	.word	0x000089ed
    8bf8:	00008ab5 	.word	0x00008ab5
    8bfc:	00008b21 	.word	0x00008b21

00008c00 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	b082      	sub	sp, #8
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d005      	beq.n	8c1a <_calendar_enable+0x1a>
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	681b      	ldr	r3, [r3, #0]
    8c12:	2b00      	cmp	r3, #0
    8c14:	d001      	beq.n	8c1a <_calendar_enable+0x1a>
    8c16:	2301      	movs	r3, #1
    8c18:	e000      	b.n	8c1c <_calendar_enable+0x1c>
    8c1a:	2300      	movs	r3, #0
    8c1c:	f003 0301 	and.w	r3, r3, #1
    8c20:	b2db      	uxtb	r3, r3
    8c22:	2276      	movs	r2, #118	; 0x76
    8c24:	4906      	ldr	r1, [pc, #24]	; (8c40 <_calendar_enable+0x40>)
    8c26:	4618      	mov	r0, r3
    8c28:	4b06      	ldr	r3, [pc, #24]	; (8c44 <_calendar_enable+0x44>)
    8c2a:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	681b      	ldr	r3, [r3, #0]
    8c30:	4618      	mov	r0, r3
    8c32:	4b05      	ldr	r3, [pc, #20]	; (8c48 <_calendar_enable+0x48>)
    8c34:	4798      	blx	r3

	return ERR_NONE;
    8c36:	2300      	movs	r3, #0
}
    8c38:	4618      	mov	r0, r3
    8c3a:	3708      	adds	r7, #8
    8c3c:	46bd      	mov	sp, r7
    8c3e:	bd80      	pop	{r7, pc}
    8c40:	0001ad3c 	.word	0x0001ad3c
    8c44:	000062c5 	.word	0x000062c5
    8c48:	00008a19 	.word	0x00008a19

00008c4c <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    8c4c:	b580      	push	{r7, lr}
    8c4e:	b082      	sub	sp, #8
    8c50:	af00      	add	r7, sp, #0
    8c52:	6078      	str	r0, [r7, #4]
    8c54:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d005      	beq.n	8c68 <_calendar_set_counter+0x1c>
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	681b      	ldr	r3, [r3, #0]
    8c60:	2b00      	cmp	r3, #0
    8c62:	d001      	beq.n	8c68 <_calendar_set_counter+0x1c>
    8c64:	2301      	movs	r3, #1
    8c66:	e000      	b.n	8c6a <_calendar_set_counter+0x1e>
    8c68:	2300      	movs	r3, #0
    8c6a:	f003 0301 	and.w	r3, r3, #1
    8c6e:	b2db      	uxtb	r3, r3
    8c70:	228e      	movs	r2, #142	; 0x8e
    8c72:	4907      	ldr	r1, [pc, #28]	; (8c90 <_calendar_set_counter+0x44>)
    8c74:	4618      	mov	r0, r3
    8c76:	4b07      	ldr	r3, [pc, #28]	; (8c94 <_calendar_set_counter+0x48>)
    8c78:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	681b      	ldr	r3, [r3, #0]
    8c7e:	6839      	ldr	r1, [r7, #0]
    8c80:	4618      	mov	r0, r3
    8c82:	4b05      	ldr	r3, [pc, #20]	; (8c98 <_calendar_set_counter+0x4c>)
    8c84:	4798      	blx	r3

	return ERR_NONE;
    8c86:	2300      	movs	r3, #0
}
    8c88:	4618      	mov	r0, r3
    8c8a:	3708      	adds	r7, #8
    8c8c:	46bd      	mov	sp, r7
    8c8e:	bd80      	pop	{r7, pc}
    8c90:	0001ad3c 	.word	0x0001ad3c
    8c94:	000062c5 	.word	0x000062c5
    8c98:	00008add 	.word	0x00008add

00008c9c <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    8c9c:	b580      	push	{r7, lr}
    8c9e:	b082      	sub	sp, #8
    8ca0:	af00      	add	r7, sp, #0
    8ca2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d005      	beq.n	8cb6 <_calendar_get_counter+0x1a>
    8caa:	687b      	ldr	r3, [r7, #4]
    8cac:	681b      	ldr	r3, [r3, #0]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d001      	beq.n	8cb6 <_calendar_get_counter+0x1a>
    8cb2:	2301      	movs	r3, #1
    8cb4:	e000      	b.n	8cb8 <_calendar_get_counter+0x1c>
    8cb6:	2300      	movs	r3, #0
    8cb8:	f003 0301 	and.w	r3, r3, #1
    8cbc:	b2db      	uxtb	r3, r3
    8cbe:	229a      	movs	r2, #154	; 0x9a
    8cc0:	4906      	ldr	r1, [pc, #24]	; (8cdc <_calendar_get_counter+0x40>)
    8cc2:	4618      	mov	r0, r3
    8cc4:	4b06      	ldr	r3, [pc, #24]	; (8ce0 <_calendar_get_counter+0x44>)
    8cc6:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    8cc8:	687b      	ldr	r3, [r7, #4]
    8cca:	681b      	ldr	r3, [r3, #0]
    8ccc:	4618      	mov	r0, r3
    8cce:	4b05      	ldr	r3, [pc, #20]	; (8ce4 <_calendar_get_counter+0x48>)
    8cd0:	4798      	blx	r3
    8cd2:	4603      	mov	r3, r0
}
    8cd4:	4618      	mov	r0, r3
    8cd6:	3708      	adds	r7, #8
    8cd8:	46bd      	mov	sp, r7
    8cda:	bd80      	pop	{r7, pc}
    8cdc:	0001ad3c 	.word	0x0001ad3c
    8ce0:	000062c5 	.word	0x000062c5
    8ce4:	00008b01 	.word	0x00008b01

00008ce8 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    8ce8:	b580      	push	{r7, lr}
    8cea:	b084      	sub	sp, #16
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	4618      	mov	r0, r3
    8cf6:	4b19      	ldr	r3, [pc, #100]	; (8d5c <_rtc_interrupt_handler+0x74>)
    8cf8:	4798      	blx	r3
    8cfa:	4603      	mov	r3, r0
    8cfc:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    8cfe:	687b      	ldr	r3, [r7, #4]
    8d00:	681b      	ldr	r3, [r3, #0]
    8d02:	4618      	mov	r0, r3
    8d04:	4b16      	ldr	r3, [pc, #88]	; (8d60 <_rtc_interrupt_handler+0x78>)
    8d06:	4798      	blx	r3
    8d08:	4603      	mov	r3, r0
    8d0a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    8d0c:	89fa      	ldrh	r2, [r7, #14]
    8d0e:	89bb      	ldrh	r3, [r7, #12]
    8d10:	4013      	ands	r3, r2
    8d12:	b29b      	uxth	r3, r3
    8d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d009      	beq.n	8d30 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    8d1c:	687b      	ldr	r3, [r7, #4]
    8d1e:	685b      	ldr	r3, [r3, #4]
    8d20:	6878      	ldr	r0, [r7, #4]
    8d22:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	681b      	ldr	r3, [r3, #0]
    8d28:	4618      	mov	r0, r3
    8d2a:	4b0e      	ldr	r3, [pc, #56]	; (8d64 <_rtc_interrupt_handler+0x7c>)
    8d2c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    8d2e:	e010      	b.n	8d52 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    8d30:	89fa      	ldrh	r2, [r7, #14]
    8d32:	89bb      	ldrh	r3, [r7, #12]
    8d34:	4013      	ands	r3, r2
    8d36:	b29b      	uxth	r3, r3
    8d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	d008      	beq.n	8d52 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    8d40:	687b      	ldr	r3, [r7, #4]
    8d42:	689b      	ldr	r3, [r3, #8]
    8d44:	6878      	ldr	r0, [r7, #4]
    8d46:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	681b      	ldr	r3, [r3, #0]
    8d4c:	4618      	mov	r0, r3
    8d4e:	4b06      	ldr	r3, [pc, #24]	; (8d68 <_rtc_interrupt_handler+0x80>)
    8d50:	4798      	blx	r3
}
    8d52:	bf00      	nop
    8d54:	3710      	adds	r7, #16
    8d56:	46bd      	mov	sp, r7
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	bf00      	nop
    8d5c:	000089b9 	.word	0x000089b9
    8d60:	000089d3 	.word	0x000089d3
    8d64:	00008981 	.word	0x00008981
    8d68:	0000899d 	.word	0x0000899d

00008d6c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    8d70:	4b03      	ldr	r3, [pc, #12]	; (8d80 <RTC_Handler+0x14>)
    8d72:	681b      	ldr	r3, [r3, #0]
    8d74:	4618      	mov	r0, r3
    8d76:	4b03      	ldr	r3, [pc, #12]	; (8d84 <RTC_Handler+0x18>)
    8d78:	4798      	blx	r3
}
    8d7a:	bf00      	nop
    8d7c:	bd80      	pop	{r7, pc}
    8d7e:	bf00      	nop
    8d80:	2000338c 	.word	0x2000338c
    8d84:	00008ce9 	.word	0x00008ce9

00008d88 <__NVIC_EnableIRQ>:
{
    8d88:	b480      	push	{r7}
    8d8a:	b083      	sub	sp, #12
    8d8c:	af00      	add	r7, sp, #0
    8d8e:	4603      	mov	r3, r0
    8d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d96:	2b00      	cmp	r3, #0
    8d98:	db0b      	blt.n	8db2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d9a:	4909      	ldr	r1, [pc, #36]	; (8dc0 <__NVIC_EnableIRQ+0x38>)
    8d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8da0:	095b      	lsrs	r3, r3, #5
    8da2:	88fa      	ldrh	r2, [r7, #6]
    8da4:	f002 021f 	and.w	r2, r2, #31
    8da8:	2001      	movs	r0, #1
    8daa:	fa00 f202 	lsl.w	r2, r0, r2
    8dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8db2:	bf00      	nop
    8db4:	370c      	adds	r7, #12
    8db6:	46bd      	mov	sp, r7
    8db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dbc:	4770      	bx	lr
    8dbe:	bf00      	nop
    8dc0:	e000e100 	.word	0xe000e100

00008dc4 <__NVIC_DisableIRQ>:
{
    8dc4:	b480      	push	{r7}
    8dc6:	b083      	sub	sp, #12
    8dc8:	af00      	add	r7, sp, #0
    8dca:	4603      	mov	r3, r0
    8dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	db10      	blt.n	8df8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8dd6:	490b      	ldr	r1, [pc, #44]	; (8e04 <__NVIC_DisableIRQ+0x40>)
    8dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ddc:	095b      	lsrs	r3, r3, #5
    8dde:	88fa      	ldrh	r2, [r7, #6]
    8de0:	f002 021f 	and.w	r2, r2, #31
    8de4:	2001      	movs	r0, #1
    8de6:	fa00 f202 	lsl.w	r2, r0, r2
    8dea:	3320      	adds	r3, #32
    8dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8df4:	f3bf 8f6f 	isb	sy
}
    8df8:	bf00      	nop
    8dfa:	370c      	adds	r7, #12
    8dfc:	46bd      	mov	sp, r7
    8dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e02:	4770      	bx	lr
    8e04:	e000e100 	.word	0xe000e100

00008e08 <__NVIC_ClearPendingIRQ>:
{
    8e08:	b480      	push	{r7}
    8e0a:	b083      	sub	sp, #12
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	4603      	mov	r3, r0
    8e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e16:	2b00      	cmp	r3, #0
    8e18:	db0c      	blt.n	8e34 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e1a:	4909      	ldr	r1, [pc, #36]	; (8e40 <__NVIC_ClearPendingIRQ+0x38>)
    8e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e20:	095b      	lsrs	r3, r3, #5
    8e22:	88fa      	ldrh	r2, [r7, #6]
    8e24:	f002 021f 	and.w	r2, r2, #31
    8e28:	2001      	movs	r0, #1
    8e2a:	fa00 f202 	lsl.w	r2, r0, r2
    8e2e:	3360      	adds	r3, #96	; 0x60
    8e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e34:	bf00      	nop
    8e36:	370c      	adds	r7, #12
    8e38:	46bd      	mov	sp, r7
    8e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e3e:	4770      	bx	lr
    8e40:	e000e100 	.word	0xe000e100

00008e44 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8e44:	b480      	push	{r7}
    8e46:	b083      	sub	sp, #12
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
    8e4c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8e4e:	bf00      	nop
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	69da      	ldr	r2, [r3, #28]
    8e54:	683b      	ldr	r3, [r7, #0]
    8e56:	4013      	ands	r3, r2
    8e58:	2b00      	cmp	r3, #0
    8e5a:	d1f9      	bne.n	8e50 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    8e5c:	bf00      	nop
    8e5e:	370c      	adds	r7, #12
    8e60:	46bd      	mov	sp, r7
    8e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e66:	4770      	bx	lr

00008e68 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8e68:	b480      	push	{r7}
    8e6a:	b083      	sub	sp, #12
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	6078      	str	r0, [r7, #4]
    8e70:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8e72:	687b      	ldr	r3, [r7, #4]
    8e74:	69da      	ldr	r2, [r3, #28]
    8e76:	683b      	ldr	r3, [r7, #0]
    8e78:	4013      	ands	r3, r2
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	bf14      	ite	ne
    8e7e:	2301      	movne	r3, #1
    8e80:	2300      	moveq	r3, #0
    8e82:	b2db      	uxtb	r3, r3
}
    8e84:	4618      	mov	r0, r3
    8e86:	370c      	adds	r7, #12
    8e88:	46bd      	mov	sp, r7
    8e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e8e:	4770      	bx	lr

00008e90 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8e90:	b480      	push	{r7}
    8e92:	b083      	sub	sp, #12
    8e94:	af00      	add	r7, sp, #0
    8e96:	6078      	str	r0, [r7, #4]
    8e98:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8e9a:	bf00      	nop
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	69da      	ldr	r2, [r3, #28]
    8ea0:	683b      	ldr	r3, [r7, #0]
    8ea2:	4013      	ands	r3, r2
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	d1f9      	bne.n	8e9c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    8ea8:	bf00      	nop
    8eaa:	370c      	adds	r7, #12
    8eac:	46bd      	mov	sp, r7
    8eae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eb2:	4770      	bx	lr

00008eb4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8eb4:	b480      	push	{r7}
    8eb6:	b083      	sub	sp, #12
    8eb8:	af00      	add	r7, sp, #0
    8eba:	6078      	str	r0, [r7, #4]
    8ebc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	69da      	ldr	r2, [r3, #28]
    8ec2:	683b      	ldr	r3, [r7, #0]
    8ec4:	4013      	ands	r3, r2
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	bf14      	ite	ne
    8eca:	2301      	movne	r3, #1
    8ecc:	2300      	moveq	r3, #0
    8ece:	b2db      	uxtb	r3, r3
}
    8ed0:	4618      	mov	r0, r3
    8ed2:	370c      	adds	r7, #12
    8ed4:	46bd      	mov	sp, r7
    8ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eda:	4770      	bx	lr

00008edc <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    8edc:	b480      	push	{r7}
    8ede:	b083      	sub	sp, #12
    8ee0:	af00      	add	r7, sp, #0
    8ee2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	2201      	movs	r2, #1
    8ee8:	761a      	strb	r2, [r3, #24]
}
    8eea:	bf00      	nop
    8eec:	370c      	adds	r7, #12
    8eee:	46bd      	mov	sp, r7
    8ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef4:	4770      	bx	lr

00008ef6 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    8ef6:	b480      	push	{r7}
    8ef8:	b083      	sub	sp, #12
    8efa:	af00      	add	r7, sp, #0
    8efc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    8efe:	687b      	ldr	r3, [r7, #4]
    8f00:	2202      	movs	r2, #2
    8f02:	761a      	strb	r2, [r3, #24]
}
    8f04:	bf00      	nop
    8f06:	370c      	adds	r7, #12
    8f08:	46bd      	mov	sp, r7
    8f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f0e:	4770      	bx	lr

00008f10 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    8f10:	b480      	push	{r7}
    8f12:	b083      	sub	sp, #12
    8f14:	af00      	add	r7, sp, #0
    8f16:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	7e1b      	ldrb	r3, [r3, #24]
    8f1c:	b2db      	uxtb	r3, r3
}
    8f1e:	4618      	mov	r0, r3
    8f20:	370c      	adds	r7, #12
    8f22:	46bd      	mov	sp, r7
    8f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f28:	4770      	bx	lr

00008f2a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    8f2a:	b480      	push	{r7}
    8f2c:	b083      	sub	sp, #12
    8f2e:	af00      	add	r7, sp, #0
    8f30:	6078      	str	r0, [r7, #4]
    8f32:	460b      	mov	r3, r1
    8f34:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    8f36:	687b      	ldr	r3, [r7, #4]
    8f38:	78fa      	ldrb	r2, [r7, #3]
    8f3a:	761a      	strb	r2, [r3, #24]
}
    8f3c:	bf00      	nop
    8f3e:	370c      	adds	r7, #12
    8f40:	46bd      	mov	sp, r7
    8f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f46:	4770      	bx	lr

00008f48 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    8f48:	b480      	push	{r7}
    8f4a:	b085      	sub	sp, #20
    8f4c:	af00      	add	r7, sp, #0
    8f4e:	6078      	str	r0, [r7, #4]
    8f50:	460b      	mov	r3, r1
    8f52:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    8f54:	687b      	ldr	r3, [r7, #4]
    8f56:	7e1b      	ldrb	r3, [r3, #24]
    8f58:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8f5a:	7bfa      	ldrb	r2, [r7, #15]
    8f5c:	78fb      	ldrb	r3, [r7, #3]
    8f5e:	4013      	ands	r3, r2
    8f60:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8f62:	7bfb      	ldrb	r3, [r7, #15]
}
    8f64:	4618      	mov	r0, r3
    8f66:	3714      	adds	r7, #20
    8f68:	46bd      	mov	sp, r7
    8f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f6e:	4770      	bx	lr

00008f70 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    8f70:	b480      	push	{r7}
    8f72:	b083      	sub	sp, #12
    8f74:	af00      	add	r7, sp, #0
    8f76:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	7e1b      	ldrb	r3, [r3, #24]
    8f7c:	b2db      	uxtb	r3, r3
}
    8f7e:	4618      	mov	r0, r3
    8f80:	370c      	adds	r7, #12
    8f82:	46bd      	mov	sp, r7
    8f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f88:	4770      	bx	lr

00008f8a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    8f8a:	b480      	push	{r7}
    8f8c:	b083      	sub	sp, #12
    8f8e:	af00      	add	r7, sp, #0
    8f90:	6078      	str	r0, [r7, #4]
    8f92:	460b      	mov	r3, r1
    8f94:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	78fa      	ldrb	r2, [r7, #3]
    8f9a:	761a      	strb	r2, [r3, #24]
}
    8f9c:	bf00      	nop
    8f9e:	370c      	adds	r7, #12
    8fa0:	46bd      	mov	sp, r7
    8fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa6:	4770      	bx	lr

00008fa8 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    8fa8:	b480      	push	{r7}
    8faa:	b083      	sub	sp, #12
    8fac:	af00      	add	r7, sp, #0
    8fae:	6078      	str	r0, [r7, #4]
    8fb0:	460b      	mov	r3, r1
    8fb2:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8fb4:	78fb      	ldrb	r3, [r7, #3]
    8fb6:	f083 0301 	eor.w	r3, r3, #1
    8fba:	b2db      	uxtb	r3, r3
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d003      	beq.n	8fc8 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    8fc0:	687b      	ldr	r3, [r7, #4]
    8fc2:	2201      	movs	r2, #1
    8fc4:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    8fc6:	e002      	b.n	8fce <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    8fc8:	687b      	ldr	r3, [r7, #4]
    8fca:	2201      	movs	r2, #1
    8fcc:	759a      	strb	r2, [r3, #22]
}
    8fce:	bf00      	nop
    8fd0:	370c      	adds	r7, #12
    8fd2:	46bd      	mov	sp, r7
    8fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd8:	4770      	bx	lr

00008fda <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    8fda:	b480      	push	{r7}
    8fdc:	b083      	sub	sp, #12
    8fde:	af00      	add	r7, sp, #0
    8fe0:	6078      	str	r0, [r7, #4]
    8fe2:	460b      	mov	r3, r1
    8fe4:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8fe6:	78fb      	ldrb	r3, [r7, #3]
    8fe8:	f083 0301 	eor.w	r3, r3, #1
    8fec:	b2db      	uxtb	r3, r3
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d003      	beq.n	8ffa <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    8ff2:	687b      	ldr	r3, [r7, #4]
    8ff4:	2202      	movs	r2, #2
    8ff6:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    8ff8:	e002      	b.n	9000 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	2202      	movs	r2, #2
    8ffe:	759a      	strb	r2, [r3, #22]
}
    9000:	bf00      	nop
    9002:	370c      	adds	r7, #12
    9004:	46bd      	mov	sp, r7
    9006:	f85d 7b04 	ldr.w	r7, [sp], #4
    900a:	4770      	bx	lr

0000900c <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    900c:	b480      	push	{r7}
    900e:	b083      	sub	sp, #12
    9010:	af00      	add	r7, sp, #0
    9012:	6078      	str	r0, [r7, #4]
    9014:	460b      	mov	r3, r1
    9016:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    9018:	78fb      	ldrb	r3, [r7, #3]
    901a:	f083 0301 	eor.w	r3, r3, #1
    901e:	b2db      	uxtb	r3, r3
    9020:	2b00      	cmp	r3, #0
    9022:	d003      	beq.n	902c <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    9024:	687b      	ldr	r3, [r7, #4]
    9026:	2280      	movs	r2, #128	; 0x80
    9028:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    902a:	e002      	b.n	9032 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	2280      	movs	r2, #128	; 0x80
    9030:	759a      	strb	r2, [r3, #22]
}
    9032:	bf00      	nop
    9034:	370c      	adds	r7, #12
    9036:	46bd      	mov	sp, r7
    9038:	f85d 7b04 	ldr.w	r7, [sp], #4
    903c:	4770      	bx	lr

0000903e <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    903e:	b480      	push	{r7}
    9040:	b083      	sub	sp, #12
    9042:	af00      	add	r7, sp, #0
    9044:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    9046:	687b      	ldr	r3, [r7, #4]
    9048:	2201      	movs	r2, #1
    904a:	759a      	strb	r2, [r3, #22]
}
    904c:	bf00      	nop
    904e:	370c      	adds	r7, #12
    9050:	46bd      	mov	sp, r7
    9052:	f85d 7b04 	ldr.w	r7, [sp], #4
    9056:	4770      	bx	lr

00009058 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    9058:	b480      	push	{r7}
    905a:	b083      	sub	sp, #12
    905c:	af00      	add	r7, sp, #0
    905e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    9060:	687b      	ldr	r3, [r7, #4]
    9062:	2201      	movs	r2, #1
    9064:	751a      	strb	r2, [r3, #20]
}
    9066:	bf00      	nop
    9068:	370c      	adds	r7, #12
    906a:	46bd      	mov	sp, r7
    906c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9070:	4770      	bx	lr

00009072 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    9072:	b480      	push	{r7}
    9074:	b083      	sub	sp, #12
    9076:	af00      	add	r7, sp, #0
    9078:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	2202      	movs	r2, #2
    907e:	759a      	strb	r2, [r3, #22]
}
    9080:	bf00      	nop
    9082:	370c      	adds	r7, #12
    9084:	46bd      	mov	sp, r7
    9086:	f85d 7b04 	ldr.w	r7, [sp], #4
    908a:	4770      	bx	lr

0000908c <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    908c:	b480      	push	{r7}
    908e:	b083      	sub	sp, #12
    9090:	af00      	add	r7, sp, #0
    9092:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	2202      	movs	r2, #2
    9098:	751a      	strb	r2, [r3, #20]
}
    909a:	bf00      	nop
    909c:	370c      	adds	r7, #12
    909e:	46bd      	mov	sp, r7
    90a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    90a4:	4770      	bx	lr

000090a6 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    90a6:	b480      	push	{r7}
    90a8:	b083      	sub	sp, #12
    90aa:	af00      	add	r7, sp, #0
    90ac:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    90ae:	687b      	ldr	r3, [r7, #4]
    90b0:	2204      	movs	r2, #4
    90b2:	759a      	strb	r2, [r3, #22]
}
    90b4:	bf00      	nop
    90b6:	370c      	adds	r7, #12
    90b8:	46bd      	mov	sp, r7
    90ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    90be:	4770      	bx	lr

000090c0 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    90c0:	b480      	push	{r7}
    90c2:	b083      	sub	sp, #12
    90c4:	af00      	add	r7, sp, #0
    90c6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	2204      	movs	r2, #4
    90cc:	751a      	strb	r2, [r3, #20]
}
    90ce:	bf00      	nop
    90d0:	370c      	adds	r7, #12
    90d2:	46bd      	mov	sp, r7
    90d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d8:	4770      	bx	lr

000090da <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    90da:	b480      	push	{r7}
    90dc:	b083      	sub	sp, #12
    90de:	af00      	add	r7, sp, #0
    90e0:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	7d9b      	ldrb	r3, [r3, #22]
    90e6:	b2db      	uxtb	r3, r3
}
    90e8:	4618      	mov	r0, r3
    90ea:	370c      	adds	r7, #12
    90ec:	46bd      	mov	sp, r7
    90ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    90f2:	4770      	bx	lr

000090f4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    90f4:	b580      	push	{r7, lr}
    90f6:	b082      	sub	sp, #8
    90f8:	af00      	add	r7, sp, #0
    90fa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    90fc:	687b      	ldr	r3, [r7, #4]
    90fe:	681b      	ldr	r3, [r3, #0]
    9100:	f043 0202 	orr.w	r2, r3, #2
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9108:	2103      	movs	r1, #3
    910a:	6878      	ldr	r0, [r7, #4]
    910c:	4b02      	ldr	r3, [pc, #8]	; (9118 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    910e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9110:	bf00      	nop
    9112:	3708      	adds	r7, #8
    9114:	46bd      	mov	sp, r7
    9116:	bd80      	pop	{r7, pc}
    9118:	00008e45 	.word	0x00008e45

0000911c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    911c:	b580      	push	{r7, lr}
    911e:	b082      	sub	sp, #8
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	681b      	ldr	r3, [r3, #0]
    9128:	f023 0202 	bic.w	r2, r3, #2
    912c:	687b      	ldr	r3, [r7, #4]
    912e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9130:	2103      	movs	r1, #3
    9132:	6878      	ldr	r0, [r7, #4]
    9134:	4b02      	ldr	r3, [pc, #8]	; (9140 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    9136:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9138:	bf00      	nop
    913a:	3708      	adds	r7, #8
    913c:	46bd      	mov	sp, r7
    913e:	bd80      	pop	{r7, pc}
    9140:	00008e45 	.word	0x00008e45

00009144 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    9144:	b480      	push	{r7}
    9146:	b085      	sub	sp, #20
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	681b      	ldr	r3, [r3, #0]
    9150:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    9152:	68fb      	ldr	r3, [r7, #12]
    9154:	0edb      	lsrs	r3, r3, #27
    9156:	f003 0301 	and.w	r3, r3, #1
    915a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    915c:	68fb      	ldr	r3, [r7, #12]
    915e:	2b00      	cmp	r3, #0
    9160:	bf14      	ite	ne
    9162:	2301      	movne	r3, #1
    9164:	2300      	moveq	r3, #0
    9166:	b2db      	uxtb	r3, r3
}
    9168:	4618      	mov	r0, r3
    916a:	3714      	adds	r7, #20
    916c:	46bd      	mov	sp, r7
    916e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9172:	4770      	bx	lr

00009174 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    9174:	b580      	push	{r7, lr}
    9176:	b084      	sub	sp, #16
    9178:	af00      	add	r7, sp, #0
    917a:	6078      	str	r0, [r7, #4]
    917c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    917e:	2103      	movs	r1, #3
    9180:	6878      	ldr	r0, [r7, #4]
    9182:	4b07      	ldr	r3, [pc, #28]	; (91a0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    9184:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	681b      	ldr	r3, [r3, #0]
    918a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    918c:	68fa      	ldr	r2, [r7, #12]
    918e:	683b      	ldr	r3, [r7, #0]
    9190:	4013      	ands	r3, r2
    9192:	60fb      	str	r3, [r7, #12]
	return tmp;
    9194:	68fb      	ldr	r3, [r7, #12]
}
    9196:	4618      	mov	r0, r3
    9198:	3710      	adds	r7, #16
    919a:	46bd      	mov	sp, r7
    919c:	bd80      	pop	{r7, pc}
    919e:	bf00      	nop
    91a0:	00008e45 	.word	0x00008e45

000091a4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    91a4:	b580      	push	{r7, lr}
    91a6:	b082      	sub	sp, #8
    91a8:	af00      	add	r7, sp, #0
    91aa:	6078      	str	r0, [r7, #4]
    91ac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	683a      	ldr	r2, [r7, #0]
    91b2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    91b4:	2103      	movs	r1, #3
    91b6:	6878      	ldr	r0, [r7, #4]
    91b8:	4b02      	ldr	r3, [pc, #8]	; (91c4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    91ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    91bc:	bf00      	nop
    91be:	3708      	adds	r7, #8
    91c0:	46bd      	mov	sp, r7
    91c2:	bd80      	pop	{r7, pc}
    91c4:	00008e45 	.word	0x00008e45

000091c8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	b082      	sub	sp, #8
    91cc:	af00      	add	r7, sp, #0
    91ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    91d0:	687b      	ldr	r3, [r7, #4]
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	f043 0202 	orr.w	r2, r3, #2
    91d8:	687b      	ldr	r3, [r7, #4]
    91da:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    91dc:	2103      	movs	r1, #3
    91de:	6878      	ldr	r0, [r7, #4]
    91e0:	4b02      	ldr	r3, [pc, #8]	; (91ec <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    91e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    91e4:	bf00      	nop
    91e6:	3708      	adds	r7, #8
    91e8:	46bd      	mov	sp, r7
    91ea:	bd80      	pop	{r7, pc}
    91ec:	00008e91 	.word	0x00008e91

000091f0 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    91f0:	b580      	push	{r7, lr}
    91f2:	b084      	sub	sp, #16
    91f4:	af00      	add	r7, sp, #0
    91f6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    91f8:	2103      	movs	r1, #3
    91fa:	6878      	ldr	r0, [r7, #4]
    91fc:	4b09      	ldr	r3, [pc, #36]	; (9224 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    91fe:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9200:	687b      	ldr	r3, [r7, #4]
    9202:	681b      	ldr	r3, [r3, #0]
    9204:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    9206:	68fb      	ldr	r3, [r7, #12]
    9208:	085b      	lsrs	r3, r3, #1
    920a:	f003 0301 	and.w	r3, r3, #1
    920e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9210:	68fb      	ldr	r3, [r7, #12]
    9212:	2b00      	cmp	r3, #0
    9214:	bf14      	ite	ne
    9216:	2301      	movne	r3, #1
    9218:	2300      	moveq	r3, #0
    921a:	b2db      	uxtb	r3, r3
}
    921c:	4618      	mov	r0, r3
    921e:	3710      	adds	r7, #16
    9220:	46bd      	mov	sp, r7
    9222:	bd80      	pop	{r7, pc}
    9224:	00008e91 	.word	0x00008e91

00009228 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9228:	b580      	push	{r7, lr}
    922a:	b082      	sub	sp, #8
    922c:	af00      	add	r7, sp, #0
    922e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	681b      	ldr	r3, [r3, #0]
    9234:	f023 0202 	bic.w	r2, r3, #2
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    923c:	2103      	movs	r1, #3
    923e:	6878      	ldr	r0, [r7, #4]
    9240:	4b02      	ldr	r3, [pc, #8]	; (924c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    9242:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9244:	bf00      	nop
    9246:	3708      	adds	r7, #8
    9248:	46bd      	mov	sp, r7
    924a:	bd80      	pop	{r7, pc}
    924c:	00008e91 	.word	0x00008e91

00009250 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    9250:	b580      	push	{r7, lr}
    9252:	b084      	sub	sp, #16
    9254:	af00      	add	r7, sp, #0
    9256:	6078      	str	r0, [r7, #4]
    9258:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    925a:	2103      	movs	r1, #3
    925c:	6878      	ldr	r0, [r7, #4]
    925e:	4b07      	ldr	r3, [pc, #28]	; (927c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    9260:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	681b      	ldr	r3, [r3, #0]
    9266:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9268:	68fa      	ldr	r2, [r7, #12]
    926a:	683b      	ldr	r3, [r7, #0]
    926c:	4013      	ands	r3, r2
    926e:	60fb      	str	r3, [r7, #12]
	return tmp;
    9270:	68fb      	ldr	r3, [r7, #12]
}
    9272:	4618      	mov	r0, r3
    9274:	3710      	adds	r7, #16
    9276:	46bd      	mov	sp, r7
    9278:	bd80      	pop	{r7, pc}
    927a:	bf00      	nop
    927c:	00008e91 	.word	0x00008e91

00009280 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    9280:	b580      	push	{r7, lr}
    9282:	b082      	sub	sp, #8
    9284:	af00      	add	r7, sp, #0
    9286:	6078      	str	r0, [r7, #4]
    9288:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	683a      	ldr	r2, [r7, #0]
    928e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9290:	2103      	movs	r1, #3
    9292:	6878      	ldr	r0, [r7, #4]
    9294:	4b02      	ldr	r3, [pc, #8]	; (92a0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    9296:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9298:	bf00      	nop
    929a:	3708      	adds	r7, #8
    929c:	46bd      	mov	sp, r7
    929e:	bd80      	pop	{r7, pc}
    92a0:	00008e91 	.word	0x00008e91

000092a4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    92a4:	b580      	push	{r7, lr}
    92a6:	b082      	sub	sp, #8
    92a8:	af00      	add	r7, sp, #0
    92aa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	685b      	ldr	r3, [r3, #4]
    92b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    92b8:	2104      	movs	r1, #4
    92ba:	6878      	ldr	r0, [r7, #4]
    92bc:	4b02      	ldr	r3, [pc, #8]	; (92c8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    92be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92c0:	bf00      	nop
    92c2:	3708      	adds	r7, #8
    92c4:	46bd      	mov	sp, r7
    92c6:	bd80      	pop	{r7, pc}
    92c8:	00008e45 	.word	0x00008e45

000092cc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    92cc:	b580      	push	{r7, lr}
    92ce:	b082      	sub	sp, #8
    92d0:	af00      	add	r7, sp, #0
    92d2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    92d4:	687b      	ldr	r3, [r7, #4]
    92d6:	685b      	ldr	r3, [r3, #4]
    92d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    92e0:	2104      	movs	r1, #4
    92e2:	6878      	ldr	r0, [r7, #4]
    92e4:	4b02      	ldr	r3, [pc, #8]	; (92f0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    92e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92e8:	bf00      	nop
    92ea:	3708      	adds	r7, #8
    92ec:	46bd      	mov	sp, r7
    92ee:	bd80      	pop	{r7, pc}
    92f0:	00008e45 	.word	0x00008e45

000092f4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    92f4:	b580      	push	{r7, lr}
    92f6:	b082      	sub	sp, #8
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	685b      	ldr	r3, [r3, #4]
    9300:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9308:	2104      	movs	r1, #4
    930a:	6878      	ldr	r0, [r7, #4]
    930c:	4b02      	ldr	r3, [pc, #8]	; (9318 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    930e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9310:	bf00      	nop
    9312:	3708      	adds	r7, #8
    9314:	46bd      	mov	sp, r7
    9316:	bd80      	pop	{r7, pc}
    9318:	00008e45 	.word	0x00008e45

0000931c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    931c:	b580      	push	{r7, lr}
    931e:	b082      	sub	sp, #8
    9320:	af00      	add	r7, sp, #0
    9322:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	685b      	ldr	r3, [r3, #4]
    9328:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9330:	2104      	movs	r1, #4
    9332:	6878      	ldr	r0, [r7, #4]
    9334:	4b02      	ldr	r3, [pc, #8]	; (9340 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    9336:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9338:	bf00      	nop
    933a:	3708      	adds	r7, #8
    933c:	46bd      	mov	sp, r7
    933e:	bd80      	pop	{r7, pc}
    9340:	00008e45 	.word	0x00008e45

00009344 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    9344:	b580      	push	{r7, lr}
    9346:	b082      	sub	sp, #8
    9348:	af00      	add	r7, sp, #0
    934a:	6078      	str	r0, [r7, #4]
    934c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    934e:	687b      	ldr	r3, [r7, #4]
    9350:	685a      	ldr	r2, [r3, #4]
    9352:	683b      	ldr	r3, [r7, #0]
    9354:	041b      	lsls	r3, r3, #16
    9356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    935a:	431a      	orrs	r2, r3
    935c:	687b      	ldr	r3, [r7, #4]
    935e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9360:	2104      	movs	r1, #4
    9362:	6878      	ldr	r0, [r7, #4]
    9364:	4b02      	ldr	r3, [pc, #8]	; (9370 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    9366:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9368:	bf00      	nop
    936a:	3708      	adds	r7, #8
    936c:	46bd      	mov	sp, r7
    936e:	bd80      	pop	{r7, pc}
    9370:	00008e45 	.word	0x00008e45

00009374 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    9374:	b580      	push	{r7, lr}
    9376:	b082      	sub	sp, #8
    9378:	af00      	add	r7, sp, #0
    937a:	6078      	str	r0, [r7, #4]
    937c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	683a      	ldr	r2, [r7, #0]
    9382:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9384:	2104      	movs	r1, #4
    9386:	6878      	ldr	r0, [r7, #4]
    9388:	4b02      	ldr	r3, [pc, #8]	; (9394 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    938a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    938c:	bf00      	nop
    938e:	3708      	adds	r7, #8
    9390:	46bd      	mov	sp, r7
    9392:	bd80      	pop	{r7, pc}
    9394:	00008e45 	.word	0x00008e45

00009398 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    9398:	b580      	push	{r7, lr}
    939a:	b082      	sub	sp, #8
    939c:	af00      	add	r7, sp, #0
    939e:	6078      	str	r0, [r7, #4]
    93a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	683a      	ldr	r2, [r7, #0]
    93a6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    93a8:	2117      	movs	r1, #23
    93aa:	6878      	ldr	r0, [r7, #4]
    93ac:	4b02      	ldr	r3, [pc, #8]	; (93b8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    93ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93b0:	bf00      	nop
    93b2:	3708      	adds	r7, #8
    93b4:	46bd      	mov	sp, r7
    93b6:	bd80      	pop	{r7, pc}
    93b8:	00008e91 	.word	0x00008e91

000093bc <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    93bc:	b480      	push	{r7}
    93be:	b083      	sub	sp, #12
    93c0:	af00      	add	r7, sp, #0
    93c2:	6078      	str	r0, [r7, #4]
    93c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	683a      	ldr	r2, [r7, #0]
    93ca:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93cc:	bf00      	nop
    93ce:	370c      	adds	r7, #12
    93d0:	46bd      	mov	sp, r7
    93d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    93d6:	4770      	bx	lr

000093d8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    93d8:	b480      	push	{r7}
    93da:	b083      	sub	sp, #12
    93dc:	af00      	add	r7, sp, #0
    93de:	6078      	str	r0, [r7, #4]
    93e0:	460b      	mov	r3, r1
    93e2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	78fa      	ldrb	r2, [r7, #3]
    93e8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93ea:	bf00      	nop
    93ec:	370c      	adds	r7, #12
    93ee:	46bd      	mov	sp, r7
    93f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f4:	4770      	bx	lr
	...

000093f8 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    93f8:	b580      	push	{r7, lr}
    93fa:	b084      	sub	sp, #16
    93fc:	af00      	add	r7, sp, #0
    93fe:	6078      	str	r0, [r7, #4]
    9400:	460b      	mov	r3, r1
    9402:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9404:	687b      	ldr	r3, [r7, #4]
    9406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9408:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    940a:	68fb      	ldr	r3, [r7, #12]
    940c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    9410:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    9412:	78fb      	ldrb	r3, [r7, #3]
    9414:	039b      	lsls	r3, r3, #14
    9416:	461a      	mov	r2, r3
    9418:	68fb      	ldr	r3, [r7, #12]
    941a:	4313      	orrs	r3, r2
    941c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    941e:	687b      	ldr	r3, [r7, #4]
    9420:	68fa      	ldr	r2, [r7, #12]
    9422:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9424:	2104      	movs	r1, #4
    9426:	6878      	ldr	r0, [r7, #4]
    9428:	4b02      	ldr	r3, [pc, #8]	; (9434 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    942a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    942c:	bf00      	nop
    942e:	3710      	adds	r7, #16
    9430:	46bd      	mov	sp, r7
    9432:	bd80      	pop	{r7, pc}
    9434:	00008e45 	.word	0x00008e45

00009438 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    9438:	b580      	push	{r7, lr}
    943a:	b082      	sub	sp, #8
    943c:	af00      	add	r7, sp, #0
    943e:	6078      	str	r0, [r7, #4]
    9440:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	683a      	ldr	r2, [r7, #0]
    9446:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9448:	2104      	movs	r1, #4
    944a:	6878      	ldr	r0, [r7, #4]
    944c:	4b02      	ldr	r3, [pc, #8]	; (9458 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    944e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9450:	bf00      	nop
    9452:	3708      	adds	r7, #8
    9454:	46bd      	mov	sp, r7
    9456:	bd80      	pop	{r7, pc}
    9458:	00008e45 	.word	0x00008e45

0000945c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    945c:	b580      	push	{r7, lr}
    945e:	b082      	sub	sp, #8
    9460:	af00      	add	r7, sp, #0
    9462:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9464:	2104      	movs	r1, #4
    9466:	6878      	ldr	r0, [r7, #4]
    9468:	4b03      	ldr	r3, [pc, #12]	; (9478 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    946a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    946c:	687b      	ldr	r3, [r7, #4]
    946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9470:	4618      	mov	r0, r3
    9472:	3708      	adds	r7, #8
    9474:	46bd      	mov	sp, r7
    9476:	bd80      	pop	{r7, pc}
    9478:	00008e45 	.word	0x00008e45

0000947c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    947c:	b480      	push	{r7}
    947e:	b083      	sub	sp, #12
    9480:	af00      	add	r7, sp, #0
    9482:	6078      	str	r0, [r7, #4]
    9484:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    9486:	687b      	ldr	r3, [r7, #4]
    9488:	683a      	ldr	r2, [r7, #0]
    948a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    948c:	bf00      	nop
    948e:	370c      	adds	r7, #12
    9490:	46bd      	mov	sp, r7
    9492:	f85d 7b04 	ldr.w	r7, [sp], #4
    9496:	4770      	bx	lr

00009498 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    9498:	b580      	push	{r7, lr}
    949a:	b082      	sub	sp, #8
    949c:	af00      	add	r7, sp, #0
    949e:	6078      	str	r0, [r7, #4]
    94a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    94a2:	687b      	ldr	r3, [r7, #4]
    94a4:	683a      	ldr	r2, [r7, #0]
    94a6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    94a8:	2104      	movs	r1, #4
    94aa:	6878      	ldr	r0, [r7, #4]
    94ac:	4b02      	ldr	r3, [pc, #8]	; (94b8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    94ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94b0:	bf00      	nop
    94b2:	3708      	adds	r7, #8
    94b4:	46bd      	mov	sp, r7
    94b6:	bd80      	pop	{r7, pc}
    94b8:	00008e45 	.word	0x00008e45

000094bc <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    94bc:	b580      	push	{r7, lr}
    94be:	b082      	sub	sp, #8
    94c0:	af00      	add	r7, sp, #0
    94c2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    94c4:	2104      	movs	r1, #4
    94c6:	6878      	ldr	r0, [r7, #4]
    94c8:	4b03      	ldr	r3, [pc, #12]	; (94d8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    94ca:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    94d0:	4618      	mov	r0, r3
    94d2:	3708      	adds	r7, #8
    94d4:	46bd      	mov	sp, r7
    94d6:	bd80      	pop	{r7, pc}
    94d8:	00008e45 	.word	0x00008e45

000094dc <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    94dc:	b480      	push	{r7}
    94de:	b083      	sub	sp, #12
    94e0:	af00      	add	r7, sp, #0
    94e2:	6078      	str	r0, [r7, #4]
    94e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	683a      	ldr	r2, [r7, #0]
    94ea:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94ec:	bf00      	nop
    94ee:	370c      	adds	r7, #12
    94f0:	46bd      	mov	sp, r7
    94f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    94f6:	4770      	bx	lr

000094f8 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    94f8:	b480      	push	{r7}
    94fa:	b083      	sub	sp, #12
    94fc:	af00      	add	r7, sp, #0
    94fe:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    9500:	687b      	ldr	r3, [r7, #4]
    9502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9504:	4618      	mov	r0, r3
    9506:	370c      	adds	r7, #12
    9508:	46bd      	mov	sp, r7
    950a:	f85d 7b04 	ldr.w	r7, [sp], #4
    950e:	4770      	bx	lr

00009510 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    9510:	b480      	push	{r7}
    9512:	b083      	sub	sp, #12
    9514:	af00      	add	r7, sp, #0
    9516:	6078      	str	r0, [r7, #4]
    9518:	460b      	mov	r3, r1
    951a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	78fa      	ldrb	r2, [r7, #3]
    9520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9524:	bf00      	nop
    9526:	370c      	adds	r7, #12
    9528:	46bd      	mov	sp, r7
    952a:	f85d 7b04 	ldr.w	r7, [sp], #4
    952e:	4770      	bx	lr

00009530 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    9530:	b480      	push	{r7}
    9532:	b083      	sub	sp, #12
    9534:	af00      	add	r7, sp, #0
    9536:	6078      	str	r0, [r7, #4]
    9538:	460b      	mov	r3, r1
    953a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    953c:	687b      	ldr	r3, [r7, #4]
    953e:	887a      	ldrh	r2, [r7, #2]
    9540:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9542:	bf00      	nop
    9544:	370c      	adds	r7, #12
    9546:	46bd      	mov	sp, r7
    9548:	f85d 7b04 	ldr.w	r7, [sp], #4
    954c:	4770      	bx	lr
	...

00009550 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    9550:	b580      	push	{r7, lr}
    9552:	b082      	sub	sp, #8
    9554:	af00      	add	r7, sp, #0
    9556:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9558:	2104      	movs	r1, #4
    955a:	6878      	ldr	r0, [r7, #4]
    955c:	4b06      	ldr	r3, [pc, #24]	; (9578 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    955e:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	8b5b      	ldrh	r3, [r3, #26]
    9564:	b29b      	uxth	r3, r3
    9566:	091b      	lsrs	r3, r3, #4
    9568:	b29b      	uxth	r3, r3
    956a:	f003 0303 	and.w	r3, r3, #3
    956e:	b29b      	uxth	r3, r3
}
    9570:	4618      	mov	r0, r3
    9572:	3708      	adds	r7, #8
    9574:	46bd      	mov	sp, r7
    9576:	bd80      	pop	{r7, pc}
    9578:	00008e45 	.word	0x00008e45

0000957c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    957c:	b580      	push	{r7, lr}
    957e:	b082      	sub	sp, #8
    9580:	af00      	add	r7, sp, #0
    9582:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9584:	2104      	movs	r1, #4
    9586:	6878      	ldr	r0, [r7, #4]
    9588:	4b04      	ldr	r3, [pc, #16]	; (959c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    958a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    958c:	687b      	ldr	r3, [r7, #4]
    958e:	8b5b      	ldrh	r3, [r3, #26]
    9590:	b29b      	uxth	r3, r3
}
    9592:	4618      	mov	r0, r3
    9594:	3708      	adds	r7, #8
    9596:	46bd      	mov	sp, r7
    9598:	bd80      	pop	{r7, pc}
    959a:	bf00      	nop
    959c:	00008e45 	.word	0x00008e45

000095a0 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    95a0:	b580      	push	{r7, lr}
    95a2:	b082      	sub	sp, #8
    95a4:	af00      	add	r7, sp, #0
    95a6:	6078      	str	r0, [r7, #4]
    95a8:	460b      	mov	r3, r1
    95aa:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    95ac:	687b      	ldr	r3, [r7, #4]
    95ae:	887a      	ldrh	r2, [r7, #2]
    95b0:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    95b2:	2104      	movs	r1, #4
    95b4:	6878      	ldr	r0, [r7, #4]
    95b6:	4b03      	ldr	r3, [pc, #12]	; (95c4 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    95b8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    95ba:	bf00      	nop
    95bc:	3708      	adds	r7, #8
    95be:	46bd      	mov	sp, r7
    95c0:	bd80      	pop	{r7, pc}
    95c2:	bf00      	nop
    95c4:	00008e45 	.word	0x00008e45

000095c8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    95c8:	b4b0      	push	{r4, r5, r7}
    95ca:	b08d      	sub	sp, #52	; 0x34
    95cc:	af00      	add	r7, sp, #0
    95ce:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    95d0:	4b13      	ldr	r3, [pc, #76]	; (9620 <_sercom_get_hardware_index+0x58>)
    95d2:	f107 040c 	add.w	r4, r7, #12
    95d6:	461d      	mov	r5, r3
    95d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    95e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    95e4:	2300      	movs	r3, #0
    95e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    95e8:	e010      	b.n	960c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    95ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    95ec:	009b      	lsls	r3, r3, #2
    95ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
    95f2:	4413      	add	r3, r2
    95f4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    95f8:	461a      	mov	r2, r3
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	429a      	cmp	r2, r3
    95fe:	d102      	bne.n	9606 <_sercom_get_hardware_index+0x3e>
			return i;
    9600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9602:	b2db      	uxtb	r3, r3
    9604:	e006      	b.n	9614 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9608:	3301      	adds	r3, #1
    960a:	62fb      	str	r3, [r7, #44]	; 0x2c
    960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    960e:	2b07      	cmp	r3, #7
    9610:	d9eb      	bls.n	95ea <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    9612:	2300      	movs	r3, #0
}
    9614:	4618      	mov	r0, r3
    9616:	3734      	adds	r7, #52	; 0x34
    9618:	46bd      	mov	sp, r7
    961a:	bcb0      	pop	{r4, r5, r7}
    961c:	4770      	bx	lr
    961e:	bf00      	nop
    9620:	0001ad70 	.word	0x0001ad70

00009624 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    9624:	b480      	push	{r7}
    9626:	b083      	sub	sp, #12
    9628:	af00      	add	r7, sp, #0
    962a:	6078      	str	r0, [r7, #4]
    962c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    962e:	687b      	ldr	r3, [r7, #4]
    9630:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    9634:	d102      	bne.n	963c <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    9636:	4a0b      	ldr	r2, [pc, #44]	; (9664 <_sercom_init_irq_param+0x40>)
    9638:	683b      	ldr	r3, [r7, #0]
    963a:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    963c:	687b      	ldr	r3, [r7, #4]
    963e:	4a0a      	ldr	r2, [pc, #40]	; (9668 <_sercom_init_irq_param+0x44>)
    9640:	4293      	cmp	r3, r2
    9642:	d102      	bne.n	964a <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    9644:	4a09      	ldr	r2, [pc, #36]	; (966c <_sercom_init_irq_param+0x48>)
    9646:	683b      	ldr	r3, [r7, #0]
    9648:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	4a08      	ldr	r2, [pc, #32]	; (9670 <_sercom_init_irq_param+0x4c>)
    964e:	4293      	cmp	r3, r2
    9650:	d102      	bne.n	9658 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    9652:	4a08      	ldr	r2, [pc, #32]	; (9674 <_sercom_init_irq_param+0x50>)
    9654:	683b      	ldr	r3, [r7, #0]
    9656:	6013      	str	r3, [r2, #0]
	}
}
    9658:	bf00      	nop
    965a:	370c      	adds	r7, #12
    965c:	46bd      	mov	sp, r7
    965e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9662:	4770      	bx	lr
    9664:	200033a8 	.word	0x200033a8
    9668:	43000400 	.word	0x43000400
    966c:	200033ac 	.word	0x200033ac
    9670:	43000c00 	.word	0x43000c00
    9674:	200033b0 	.word	0x200033b0

00009678 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    9678:	b580      	push	{r7, lr}
    967a:	b084      	sub	sp, #16
    967c:	af00      	add	r7, sp, #0
    967e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    9680:	6878      	ldr	r0, [r7, #4]
    9682:	4b13      	ldr	r3, [pc, #76]	; (96d0 <_get_i2cm_index+0x58>)
    9684:	4798      	blx	r3
    9686:	4603      	mov	r3, r0
    9688:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    968a:	2300      	movs	r3, #0
    968c:	73fb      	strb	r3, [r7, #15]
    968e:	e010      	b.n	96b2 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    9690:	7bfa      	ldrb	r2, [r7, #15]
    9692:	4910      	ldr	r1, [pc, #64]	; (96d4 <_get_i2cm_index+0x5c>)
    9694:	4613      	mov	r3, r2
    9696:	005b      	lsls	r3, r3, #1
    9698:	4413      	add	r3, r2
    969a:	00db      	lsls	r3, r3, #3
    969c:	440b      	add	r3, r1
    969e:	781b      	ldrb	r3, [r3, #0]
    96a0:	7bba      	ldrb	r2, [r7, #14]
    96a2:	429a      	cmp	r2, r3
    96a4:	d102      	bne.n	96ac <_get_i2cm_index+0x34>
			return i;
    96a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    96aa:	e00d      	b.n	96c8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    96ac:	7bfb      	ldrb	r3, [r7, #15]
    96ae:	3301      	adds	r3, #1
    96b0:	73fb      	strb	r3, [r7, #15]
    96b2:	7bfb      	ldrb	r3, [r7, #15]
    96b4:	2b01      	cmp	r3, #1
    96b6:	d9eb      	bls.n	9690 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    96b8:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    96bc:	4906      	ldr	r1, [pc, #24]	; (96d8 <_get_i2cm_index+0x60>)
    96be:	2000      	movs	r0, #0
    96c0:	4b06      	ldr	r3, [pc, #24]	; (96dc <_get_i2cm_index+0x64>)
    96c2:	4798      	blx	r3
	return -1;
    96c4:	f04f 33ff 	mov.w	r3, #4294967295
}
    96c8:	4618      	mov	r0, r3
    96ca:	3710      	adds	r7, #16
    96cc:	46bd      	mov	sp, r7
    96ce:	bd80      	pop	{r7, pc}
    96d0:	000095c9 	.word	0x000095c9
    96d4:	2000007c 	.word	0x2000007c
    96d8:	0001ad54 	.word	0x0001ad54
    96dc:	000062c5 	.word	0x000062c5

000096e0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	b082      	sub	sp, #8
    96e4:	af00      	add	r7, sp, #0
    96e6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    96e8:	2103      	movs	r1, #3
    96ea:	6878      	ldr	r0, [r7, #4]
    96ec:	4b02      	ldr	r3, [pc, #8]	; (96f8 <_sercom_i2c_send_stop+0x18>)
    96ee:	4798      	blx	r3
}
    96f0:	bf00      	nop
    96f2:	3708      	adds	r7, #8
    96f4:	46bd      	mov	sp, r7
    96f6:	bd80      	pop	{r7, pc}
    96f8:	00009345 	.word	0x00009345

000096fc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    96fc:	b590      	push	{r4, r7, lr}
    96fe:	b087      	sub	sp, #28
    9700:	af00      	add	r7, sp, #0
    9702:	60f8      	str	r0, [r7, #12]
    9704:	60b9      	str	r1, [r7, #8]
    9706:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9708:	68f8      	ldr	r0, [r7, #12]
    970a:	4b7d      	ldr	r3, [pc, #500]	; (9900 <_sercom_i2c_sync_analyse_flags+0x204>)
    970c:	4798      	blx	r3
    970e:	4603      	mov	r3, r0
    9710:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    9712:	68f8      	ldr	r0, [r7, #12]
    9714:	4b7b      	ldr	r3, [pc, #492]	; (9904 <_sercom_i2c_sync_analyse_flags+0x208>)
    9716:	4798      	blx	r3
    9718:	4603      	mov	r3, r0
    971a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    971c:	68bb      	ldr	r3, [r7, #8]
    971e:	f003 0301 	and.w	r3, r3, #1
    9722:	2b00      	cmp	r3, #0
    9724:	f000 8095 	beq.w	9852 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    9728:	8a7b      	ldrh	r3, [r7, #18]
    972a:	f003 0302 	and.w	r3, r3, #2
    972e:	2b00      	cmp	r3, #0
    9730:	d01d      	beq.n	976e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    9732:	68f8      	ldr	r0, [r7, #12]
    9734:	4b74      	ldr	r3, [pc, #464]	; (9908 <_sercom_i2c_sync_analyse_flags+0x20c>)
    9736:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	885b      	ldrh	r3, [r3, #2]
    973c:	b29b      	uxth	r3, r3
    973e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9742:	b29a      	uxth	r2, r3
    9744:	687b      	ldr	r3, [r7, #4]
    9746:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    9748:	687b      	ldr	r3, [r7, #4]
    974a:	885b      	ldrh	r3, [r3, #2]
    974c:	b29b      	uxth	r3, r3
    974e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9752:	b29a      	uxth	r2, r3
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    9758:	8a7b      	ldrh	r3, [r7, #18]
    975a:	f003 0301 	and.w	r3, r3, #1
    975e:	2b00      	cmp	r3, #0
    9760:	d002      	beq.n	9768 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    9762:	f06f 0304 	mvn.w	r3, #4
    9766:	e0c6      	b.n	98f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    9768:	f06f 0303 	mvn.w	r3, #3
    976c:	e0c3      	b.n	98f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    976e:	8a7b      	ldrh	r3, [r7, #18]
    9770:	f003 0304 	and.w	r3, r3, #4
    9774:	2b00      	cmp	r3, #0
    9776:	d01f      	beq.n	97b8 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    9778:	687b      	ldr	r3, [r7, #4]
    977a:	685b      	ldr	r3, [r3, #4]
    977c:	2b00      	cmp	r3, #0
    977e:	dd07      	ble.n	9790 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	885b      	ldrh	r3, [r3, #2]
    9784:	b29b      	uxth	r3, r3
    9786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    978a:	b29a      	uxth	r2, r3
    978c:	687b      	ldr	r3, [r7, #4]
    978e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    9790:	687b      	ldr	r3, [r7, #4]
    9792:	885b      	ldrh	r3, [r3, #2]
    9794:	b29b      	uxth	r3, r3
    9796:	b21b      	sxth	r3, r3
    9798:	2b00      	cmp	r3, #0
    979a:	da02      	bge.n	97a2 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    979c:	68f8      	ldr	r0, [r7, #12]
    979e:	4b5b      	ldr	r3, [pc, #364]	; (990c <_sercom_i2c_sync_analyse_flags+0x210>)
    97a0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    97a2:	687b      	ldr	r3, [r7, #4]
    97a4:	885b      	ldrh	r3, [r3, #2]
    97a6:	b29b      	uxth	r3, r3
    97a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    97ac:	b29a      	uxth	r2, r3
    97ae:	687b      	ldr	r3, [r7, #4]
    97b0:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    97b2:	f06f 0301 	mvn.w	r3, #1
    97b6:	e09e      	b.n	98f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    97b8:	687b      	ldr	r3, [r7, #4]
    97ba:	885b      	ldrh	r3, [r3, #2]
    97bc:	b29b      	uxth	r3, r3
    97be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    97c2:	2b00      	cmp	r3, #0
    97c4:	d01c      	beq.n	9800 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    97c6:	687b      	ldr	r3, [r7, #4]
    97c8:	881b      	ldrh	r3, [r3, #0]
    97ca:	121b      	asrs	r3, r3, #8
    97cc:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    97ce:	f003 0406 	and.w	r4, r3, #6
    97d2:	68f8      	ldr	r0, [r7, #12]
    97d4:	4b4e      	ldr	r3, [pc, #312]	; (9910 <_sercom_i2c_sync_analyse_flags+0x214>)
    97d6:	4798      	blx	r3
    97d8:	4603      	mov	r3, r0
    97da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    97de:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    97e0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    97e4:	4619      	mov	r1, r3
    97e6:	68f8      	ldr	r0, [r7, #12]
    97e8:	4b4a      	ldr	r3, [pc, #296]	; (9914 <_sercom_i2c_sync_analyse_flags+0x218>)
    97ea:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	885b      	ldrh	r3, [r3, #2]
    97f0:	b29b      	uxth	r3, r3
    97f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    97f6:	b29a      	uxth	r2, r3
    97f8:	687b      	ldr	r3, [r7, #4]
    97fa:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    97fc:	2300      	movs	r3, #0
    97fe:	e07a      	b.n	98f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	685b      	ldr	r3, [r3, #4]
    9804:	2b00      	cmp	r3, #0
    9806:	d111      	bne.n	982c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    9808:	687b      	ldr	r3, [r7, #4]
    980a:	885b      	ldrh	r3, [r3, #2]
    980c:	b29b      	uxth	r3, r3
    980e:	b21b      	sxth	r3, r3
    9810:	2b00      	cmp	r3, #0
    9812:	da02      	bge.n	981a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    9814:	68f8      	ldr	r0, [r7, #12]
    9816:	4b3d      	ldr	r3, [pc, #244]	; (990c <_sercom_i2c_sync_analyse_flags+0x210>)
    9818:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    981a:	687b      	ldr	r3, [r7, #4]
    981c:	885b      	ldrh	r3, [r3, #2]
    981e:	b29b      	uxth	r3, r3
    9820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9824:	b29a      	uxth	r2, r3
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	805a      	strh	r2, [r3, #2]
    982a:	e010      	b.n	984e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	689b      	ldr	r3, [r3, #8]
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	4619      	mov	r1, r3
    9834:	68f8      	ldr	r0, [r7, #12]
    9836:	4b38      	ldr	r3, [pc, #224]	; (9918 <_sercom_i2c_sync_analyse_flags+0x21c>)
    9838:	4798      	blx	r3
				msg->buffer++;
    983a:	687b      	ldr	r3, [r7, #4]
    983c:	689b      	ldr	r3, [r3, #8]
    983e:	1c5a      	adds	r2, r3, #1
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	609a      	str	r2, [r3, #8]
				msg->len--;
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	685b      	ldr	r3, [r3, #4]
    9848:	1e5a      	subs	r2, r3, #1
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    984e:	2300      	movs	r3, #0
    9850:	e051      	b.n	98f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    9852:	68bb      	ldr	r3, [r7, #8]
    9854:	f003 0302 	and.w	r3, r3, #2
    9858:	2b00      	cmp	r3, #0
    985a:	d04b      	beq.n	98f4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    985c:	687b      	ldr	r3, [r7, #4]
    985e:	685b      	ldr	r3, [r3, #4]
    9860:	2b00      	cmp	r3, #0
    9862:	d041      	beq.n	98e8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    9864:	8a7b      	ldrh	r3, [r7, #18]
    9866:	f003 0304 	and.w	r3, r3, #4
    986a:	2b00      	cmp	r3, #0
    986c:	d13c      	bne.n	98e8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	685b      	ldr	r3, [r3, #4]
    9872:	1e5a      	subs	r2, r3, #1
    9874:	687b      	ldr	r3, [r7, #4]
    9876:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    9878:	687b      	ldr	r3, [r7, #4]
    987a:	685b      	ldr	r3, [r3, #4]
    987c:	2b00      	cmp	r3, #0
    987e:	d102      	bne.n	9886 <_sercom_i2c_sync_analyse_flags+0x18a>
    9880:	697b      	ldr	r3, [r7, #20]
    9882:	2b00      	cmp	r3, #0
    9884:	d006      	beq.n	9894 <_sercom_i2c_sync_analyse_flags+0x198>
    9886:	687b      	ldr	r3, [r7, #4]
    9888:	685b      	ldr	r3, [r3, #4]
    988a:	2b01      	cmp	r3, #1
    988c:	d105      	bne.n	989a <_sercom_i2c_sync_analyse_flags+0x19e>
    988e:	697b      	ldr	r3, [r7, #20]
    9890:	2b00      	cmp	r3, #0
    9892:	d002      	beq.n	989a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9894:	68f8      	ldr	r0, [r7, #12]
    9896:	4b21      	ldr	r3, [pc, #132]	; (991c <_sercom_i2c_sync_analyse_flags+0x220>)
    9898:	4798      	blx	r3
			}

			if (msg->len == 0) {
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	685b      	ldr	r3, [r3, #4]
    989e:	2b00      	cmp	r3, #0
    98a0:	d113      	bne.n	98ca <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    98a2:	687b      	ldr	r3, [r7, #4]
    98a4:	885b      	ldrh	r3, [r3, #2]
    98a6:	b29b      	uxth	r3, r3
    98a8:	b21b      	sxth	r3, r3
    98aa:	2b00      	cmp	r3, #0
    98ac:	da05      	bge.n	98ba <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    98ae:	68f8      	ldr	r0, [r7, #12]
    98b0:	4b1b      	ldr	r3, [pc, #108]	; (9920 <_sercom_i2c_sync_analyse_flags+0x224>)
    98b2:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    98b4:	68f8      	ldr	r0, [r7, #12]
    98b6:	4b15      	ldr	r3, [pc, #84]	; (990c <_sercom_i2c_sync_analyse_flags+0x210>)
    98b8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    98ba:	687b      	ldr	r3, [r7, #4]
    98bc:	885b      	ldrh	r3, [r3, #2]
    98be:	b29b      	uxth	r3, r3
    98c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    98c4:	b29a      	uxth	r2, r3
    98c6:	687b      	ldr	r3, [r7, #4]
    98c8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    98ca:	687b      	ldr	r3, [r7, #4]
    98cc:	689c      	ldr	r4, [r3, #8]
    98ce:	1c62      	adds	r2, r4, #1
    98d0:	687b      	ldr	r3, [r7, #4]
    98d2:	609a      	str	r2, [r3, #8]
    98d4:	68f8      	ldr	r0, [r7, #12]
    98d6:	4b13      	ldr	r3, [pc, #76]	; (9924 <_sercom_i2c_sync_analyse_flags+0x228>)
    98d8:	4798      	blx	r3
    98da:	4603      	mov	r3, r0
    98dc:	b2db      	uxtb	r3, r3
    98de:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    98e0:	68f8      	ldr	r0, [r7, #12]
    98e2:	4b11      	ldr	r3, [pc, #68]	; (9928 <_sercom_i2c_sync_analyse_flags+0x22c>)
    98e4:	4798      	blx	r3
    98e6:	e005      	b.n	98f4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    98e8:	68f8      	ldr	r0, [r7, #12]
    98ea:	4b0f      	ldr	r3, [pc, #60]	; (9928 <_sercom_i2c_sync_analyse_flags+0x22c>)
    98ec:	4798      	blx	r3
			return I2C_NACK;
    98ee:	f06f 0301 	mvn.w	r3, #1
    98f2:	e000      	b.n	98f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    98f4:	2300      	movs	r3, #0
}
    98f6:	4618      	mov	r0, r3
    98f8:	371c      	adds	r7, #28
    98fa:	46bd      	mov	sp, r7
    98fc:	bd90      	pop	{r4, r7, pc}
    98fe:	bf00      	nop
    9900:	00009145 	.word	0x00009145
    9904:	0000957d 	.word	0x0000957d
    9908:	00008edd 	.word	0x00008edd
    990c:	000096e1 	.word	0x000096e1
    9910:	0000945d 	.word	0x0000945d
    9914:	00009439 	.word	0x00009439
    9918:	00009499 	.word	0x00009499
    991c:	000092f5 	.word	0x000092f5
    9920:	000092cd 	.word	0x000092cd
    9924:	000094bd 	.word	0x000094bd
    9928:	00008ef7 	.word	0x00008ef7

0000992c <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    992c:	b580      	push	{r7, lr}
    992e:	b086      	sub	sp, #24
    9930:	af00      	add	r7, sp, #0
    9932:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	691b      	ldr	r3, [r3, #16]
    9938:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    993a:	6938      	ldr	r0, [r7, #16]
    993c:	4b37      	ldr	r3, [pc, #220]	; (9a1c <_sercom_i2c_m_irq_handler+0xf0>)
    993e:	4798      	blx	r3
    9940:	4603      	mov	r3, r0
    9942:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    9944:	2300      	movs	r3, #0
    9946:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    9948:	687b      	ldr	r3, [r7, #4]
    994a:	2b00      	cmp	r3, #0
    994c:	bf14      	ite	ne
    994e:	2301      	movne	r3, #1
    9950:	2300      	moveq	r3, #0
    9952:	b2db      	uxtb	r3, r3
    9954:	f240 422a 	movw	r2, #1066	; 0x42a
    9958:	4931      	ldr	r1, [pc, #196]	; (9a20 <_sercom_i2c_m_irq_handler+0xf4>)
    995a:	4618      	mov	r0, r3
    995c:	4b31      	ldr	r3, [pc, #196]	; (9a24 <_sercom_i2c_m_irq_handler+0xf8>)
    995e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	691b      	ldr	r3, [r3, #16]
    9964:	2b00      	cmp	r3, #0
    9966:	bf14      	ite	ne
    9968:	2301      	movne	r3, #1
    996a:	2300      	moveq	r3, #0
    996c:	b2db      	uxtb	r3, r3
    996e:	f240 422b 	movw	r2, #1067	; 0x42b
    9972:	492b      	ldr	r1, [pc, #172]	; (9a20 <_sercom_i2c_m_irq_handler+0xf4>)
    9974:	4618      	mov	r0, r3
    9976:	4b2b      	ldr	r3, [pc, #172]	; (9a24 <_sercom_i2c_m_irq_handler+0xf8>)
    9978:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    997a:	bf00      	nop
    997c:	68fb      	ldr	r3, [r7, #12]
    997e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9982:	2b00      	cmp	r3, #0
    9984:	d126      	bne.n	99d4 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	461a      	mov	r2, r3
    998a:	68f9      	ldr	r1, [r7, #12]
    998c:	6938      	ldr	r0, [r7, #16]
    998e:	4b26      	ldr	r3, [pc, #152]	; (9a28 <_sercom_i2c_m_irq_handler+0xfc>)
    9990:	4798      	blx	r3
    9992:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    9994:	697b      	ldr	r3, [r7, #20]
    9996:	2b00      	cmp	r3, #0
    9998:	d11b      	bne.n	99d2 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    999a:	68fb      	ldr	r3, [r7, #12]
    999c:	f003 0301 	and.w	r3, r3, #1
    99a0:	2b00      	cmp	r3, #0
    99a2:	d008      	beq.n	99b6 <_sercom_i2c_m_irq_handler+0x8a>
    99a4:	687b      	ldr	r3, [r7, #4]
    99a6:	699b      	ldr	r3, [r3, #24]
    99a8:	2b00      	cmp	r3, #0
    99aa:	d004      	beq.n	99b6 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    99ac:	687b      	ldr	r3, [r7, #4]
    99ae:	699b      	ldr	r3, [r3, #24]
    99b0:	6878      	ldr	r0, [r7, #4]
    99b2:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    99b4:	e02e      	b.n	9a14 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    99b6:	68fb      	ldr	r3, [r7, #12]
    99b8:	f003 0302 	and.w	r3, r3, #2
    99bc:	2b00      	cmp	r3, #0
    99be:	d029      	beq.n	9a14 <_sercom_i2c_m_irq_handler+0xe8>
    99c0:	687b      	ldr	r3, [r7, #4]
    99c2:	69db      	ldr	r3, [r3, #28]
    99c4:	2b00      	cmp	r3, #0
    99c6:	d025      	beq.n	9a14 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    99c8:	687b      	ldr	r3, [r7, #4]
    99ca:	69db      	ldr	r3, [r3, #28]
    99cc:	6878      	ldr	r0, [r7, #4]
    99ce:	4798      	blx	r3
		return;
    99d0:	e020      	b.n	9a14 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    99d2:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    99d4:	687b      	ldr	r3, [r7, #4]
    99d6:	885b      	ldrh	r3, [r3, #2]
    99d8:	b29b      	uxth	r3, r3
    99da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    99de:	b29a      	uxth	r2, r3
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    99e4:	687b      	ldr	r3, [r7, #4]
    99e6:	695b      	ldr	r3, [r3, #20]
    99e8:	2b00      	cmp	r3, #0
    99ea:	d014      	beq.n	9a16 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    99ec:	697b      	ldr	r3, [r7, #20]
    99ee:	2b00      	cmp	r3, #0
    99f0:	d005      	beq.n	99fe <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	695b      	ldr	r3, [r3, #20]
    99f6:	6979      	ldr	r1, [r7, #20]
    99f8:	6878      	ldr	r0, [r7, #4]
    99fa:	4798      	blx	r3
    99fc:	e005      	b.n	9a0a <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	695b      	ldr	r3, [r3, #20]
    9a02:	f06f 0104 	mvn.w	r1, #4
    9a06:	6878      	ldr	r0, [r7, #4]
    9a08:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    9a0a:	2180      	movs	r1, #128	; 0x80
    9a0c:	6938      	ldr	r0, [r7, #16]
    9a0e:	4b07      	ldr	r3, [pc, #28]	; (9a2c <_sercom_i2c_m_irq_handler+0x100>)
    9a10:	4798      	blx	r3
    9a12:	e000      	b.n	9a16 <_sercom_i2c_m_irq_handler+0xea>
		return;
    9a14:	bf00      	nop
	}
}
    9a16:	3718      	adds	r7, #24
    9a18:	46bd      	mov	sp, r7
    9a1a:	bd80      	pop	{r7, pc}
    9a1c:	00008f11 	.word	0x00008f11
    9a20:	0001ad54 	.word	0x0001ad54
    9a24:	000062c5 	.word	0x000062c5
    9a28:	000096fd 	.word	0x000096fd
    9a2c:	00008f2b 	.word	0x00008f2b

00009a30 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    9a30:	b580      	push	{r7, lr}
    9a32:	b082      	sub	sp, #8
    9a34:	af00      	add	r7, sp, #0
    9a36:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    9a38:	687b      	ldr	r3, [r7, #4]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	bf14      	ite	ne
    9a3e:	2301      	movne	r3, #1
    9a40:	2300      	moveq	r3, #0
    9a42:	b2db      	uxtb	r3, r3
    9a44:	f44f 628a 	mov.w	r2, #1104	; 0x450
    9a48:	4906      	ldr	r1, [pc, #24]	; (9a64 <_i2c_m_async_enable+0x34>)
    9a4a:	4618      	mov	r0, r3
    9a4c:	4b06      	ldr	r3, [pc, #24]	; (9a68 <_i2c_m_async_enable+0x38>)
    9a4e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    9a50:	687b      	ldr	r3, [r7, #4]
    9a52:	691b      	ldr	r3, [r3, #16]
    9a54:	4618      	mov	r0, r3
    9a56:	4b05      	ldr	r3, [pc, #20]	; (9a6c <_i2c_m_async_enable+0x3c>)
    9a58:	4798      	blx	r3
    9a5a:	4603      	mov	r3, r0
}
    9a5c:	4618      	mov	r0, r3
    9a5e:	3708      	adds	r7, #8
    9a60:	46bd      	mov	sp, r7
    9a62:	bd80      	pop	{r7, pc}
    9a64:	0001ad54 	.word	0x0001ad54
    9a68:	000062c5 	.word	0x000062c5
    9a6c:	00009dc1 	.word	0x00009dc1

00009a70 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    9a70:	b580      	push	{r7, lr}
    9a72:	b082      	sub	sp, #8
    9a74:	af00      	add	r7, sp, #0
    9a76:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    9a78:	6878      	ldr	r0, [r7, #4]
    9a7a:	4b05      	ldr	r3, [pc, #20]	; (9a90 <_sercom_get_irq_num+0x20>)
    9a7c:	4798      	blx	r3
    9a7e:	4603      	mov	r3, r0
    9a80:	009b      	lsls	r3, r3, #2
    9a82:	b2db      	uxtb	r3, r3
    9a84:	332e      	adds	r3, #46	; 0x2e
    9a86:	b2db      	uxtb	r3, r3
}
    9a88:	4618      	mov	r0, r3
    9a8a:	3708      	adds	r7, #8
    9a8c:	46bd      	mov	sp, r7
    9a8e:	bd80      	pop	{r7, pc}
    9a90:	000095c9 	.word	0x000095c9

00009a94 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b086      	sub	sp, #24
    9a98:	af00      	add	r7, sp, #0
    9a9a:	6078      	str	r0, [r7, #4]
    9a9c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    9a9e:	687b      	ldr	r3, [r7, #4]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	bf14      	ite	ne
    9aa4:	2301      	movne	r3, #1
    9aa6:	2300      	moveq	r3, #0
    9aa8:	b2db      	uxtb	r3, r3
    9aaa:	f240 429e 	movw	r2, #1182	; 0x49e
    9aae:	491d      	ldr	r1, [pc, #116]	; (9b24 <_i2c_m_async_init+0x90>)
    9ab0:	4618      	mov	r0, r3
    9ab2:	4b1d      	ldr	r3, [pc, #116]	; (9b28 <_i2c_m_async_init+0x94>)
    9ab4:	4798      	blx	r3

	i2c_dev->hw = hw;
    9ab6:	687b      	ldr	r3, [r7, #4]
    9ab8:	683a      	ldr	r2, [r7, #0]
    9aba:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	6839      	ldr	r1, [r7, #0]
    9ac0:	4618      	mov	r0, r3
    9ac2:	4b1a      	ldr	r3, [pc, #104]	; (9b2c <_i2c_m_async_init+0x98>)
    9ac4:	4798      	blx	r3
    9ac6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    9ac8:	68fb      	ldr	r3, [r7, #12]
    9aca:	2b00      	cmp	r3, #0
    9acc:	d001      	beq.n	9ad2 <_i2c_m_async_init+0x3e>
		return init_status;
    9ace:	68fb      	ldr	r3, [r7, #12]
    9ad0:	e024      	b.n	9b1c <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    9ad2:	6879      	ldr	r1, [r7, #4]
    9ad4:	6838      	ldr	r0, [r7, #0]
    9ad6:	4b16      	ldr	r3, [pc, #88]	; (9b30 <_i2c_m_async_init+0x9c>)
    9ad8:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    9ada:	6838      	ldr	r0, [r7, #0]
    9adc:	4b15      	ldr	r3, [pc, #84]	; (9b34 <_i2c_m_async_init+0xa0>)
    9ade:	4798      	blx	r3
    9ae0:	4603      	mov	r3, r0
    9ae2:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9ae4:	2300      	movs	r3, #0
    9ae6:	613b      	str	r3, [r7, #16]
    9ae8:	e014      	b.n	9b14 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9aea:	7dfb      	ldrb	r3, [r7, #23]
    9aec:	b21b      	sxth	r3, r3
    9aee:	4618      	mov	r0, r3
    9af0:	4b11      	ldr	r3, [pc, #68]	; (9b38 <_i2c_m_async_init+0xa4>)
    9af2:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9af4:	7dfb      	ldrb	r3, [r7, #23]
    9af6:	b21b      	sxth	r3, r3
    9af8:	4618      	mov	r0, r3
    9afa:	4b10      	ldr	r3, [pc, #64]	; (9b3c <_i2c_m_async_init+0xa8>)
    9afc:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    9afe:	7dfb      	ldrb	r3, [r7, #23]
    9b00:	b21b      	sxth	r3, r3
    9b02:	4618      	mov	r0, r3
    9b04:	4b0e      	ldr	r3, [pc, #56]	; (9b40 <_i2c_m_async_init+0xac>)
    9b06:	4798      	blx	r3
		irq++;
    9b08:	7dfb      	ldrb	r3, [r7, #23]
    9b0a:	3301      	adds	r3, #1
    9b0c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9b0e:	693b      	ldr	r3, [r7, #16]
    9b10:	3301      	adds	r3, #1
    9b12:	613b      	str	r3, [r7, #16]
    9b14:	693b      	ldr	r3, [r7, #16]
    9b16:	2b03      	cmp	r3, #3
    9b18:	d9e7      	bls.n	9aea <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    9b1a:	2300      	movs	r3, #0
}
    9b1c:	4618      	mov	r0, r3
    9b1e:	3718      	adds	r7, #24
    9b20:	46bd      	mov	sp, r7
    9b22:	bd80      	pop	{r7, pc}
    9b24:	0001ad54 	.word	0x0001ad54
    9b28:	000062c5 	.word	0x000062c5
    9b2c:	00009e4d 	.word	0x00009e4d
    9b30:	00009625 	.word	0x00009625
    9b34:	00009a71 	.word	0x00009a71
    9b38:	00008dc5 	.word	0x00008dc5
    9b3c:	00008e09 	.word	0x00008e09
    9b40:	00008d89 	.word	0x00008d89

00009b44 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    9b44:	b590      	push	{r4, r7, lr}
    9b46:	b087      	sub	sp, #28
    9b48:	af00      	add	r7, sp, #0
    9b4a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9b4c:	687b      	ldr	r3, [r7, #4]
    9b4e:	691b      	ldr	r3, [r3, #16]
    9b50:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    9b52:	687b      	ldr	r3, [r7, #4]
    9b54:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9b56:	6978      	ldr	r0, [r7, #20]
    9b58:	4b33      	ldr	r3, [pc, #204]	; (9c28 <_sercom_i2c_send_address+0xe4>)
    9b5a:	4798      	blx	r3
    9b5c:	4603      	mov	r3, r0
    9b5e:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9b60:	687b      	ldr	r3, [r7, #4]
    9b62:	2b00      	cmp	r3, #0
    9b64:	bf14      	ite	ne
    9b66:	2301      	movne	r3, #1
    9b68:	2300      	moveq	r3, #0
    9b6a:	b2db      	uxtb	r3, r3
    9b6c:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9b70:	492e      	ldr	r1, [pc, #184]	; (9c2c <_sercom_i2c_send_address+0xe8>)
    9b72:	4618      	mov	r0, r3
    9b74:	4b2e      	ldr	r3, [pc, #184]	; (9c30 <_sercom_i2c_send_address+0xec>)
    9b76:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9b78:	693b      	ldr	r3, [r7, #16]
    9b7a:	685b      	ldr	r3, [r3, #4]
    9b7c:	2b01      	cmp	r3, #1
    9b7e:	d106      	bne.n	9b8e <_sercom_i2c_send_address+0x4a>
    9b80:	68fb      	ldr	r3, [r7, #12]
    9b82:	2b00      	cmp	r3, #0
    9b84:	d003      	beq.n	9b8e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9b86:	6978      	ldr	r0, [r7, #20]
    9b88:	4b2a      	ldr	r3, [pc, #168]	; (9c34 <_sercom_i2c_send_address+0xf0>)
    9b8a:	4798      	blx	r3
    9b8c:	e002      	b.n	9b94 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9b8e:	6978      	ldr	r0, [r7, #20]
    9b90:	4b29      	ldr	r3, [pc, #164]	; (9c38 <_sercom_i2c_send_address+0xf4>)
    9b92:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    9b94:	693b      	ldr	r3, [r7, #16]
    9b96:	881b      	ldrh	r3, [r3, #0]
    9b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d022      	beq.n	9be6 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9ba0:	693b      	ldr	r3, [r7, #16]
    9ba2:	885b      	ldrh	r3, [r3, #2]
    9ba4:	b29b      	uxth	r3, r3
    9ba6:	f003 0301 	and.w	r3, r3, #1
    9baa:	2b00      	cmp	r3, #0
    9bac:	d007      	beq.n	9bbe <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9bae:	693b      	ldr	r3, [r7, #16]
    9bb0:	885b      	ldrh	r3, [r3, #2]
    9bb2:	b29b      	uxth	r3, r3
    9bb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9bb8:	b29a      	uxth	r2, r3
    9bba:	693b      	ldr	r3, [r7, #16]
    9bbc:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9bbe:	693b      	ldr	r3, [r7, #16]
    9bc0:	881b      	ldrh	r3, [r3, #0]
    9bc2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9bc4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9bc8:	401c      	ands	r4, r3
    9bca:	6978      	ldr	r0, [r7, #20]
    9bcc:	4b1b      	ldr	r3, [pc, #108]	; (9c3c <_sercom_i2c_send_address+0xf8>)
    9bce:	4798      	blx	r3
    9bd0:	4603      	mov	r3, r0
    9bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9bd6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9bdc:	4619      	mov	r1, r3
    9bde:	6978      	ldr	r0, [r7, #20]
    9be0:	4b17      	ldr	r3, [pc, #92]	; (9c40 <_sercom_i2c_send_address+0xfc>)
    9be2:	4798      	blx	r3
    9be4:	e01a      	b.n	9c1c <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    9be6:	693b      	ldr	r3, [r7, #16]
    9be8:	881b      	ldrh	r3, [r3, #0]
    9bea:	005b      	lsls	r3, r3, #1
    9bec:	b2db      	uxtb	r3, r3
    9bee:	693a      	ldr	r2, [r7, #16]
    9bf0:	8852      	ldrh	r2, [r2, #2]
    9bf2:	b292      	uxth	r2, r2
    9bf4:	f002 0201 	and.w	r2, r2, #1
    9bf8:	2a00      	cmp	r2, #0
    9bfa:	bf14      	ite	ne
    9bfc:	2201      	movne	r2, #1
    9bfe:	2200      	moveq	r2, #0
    9c00:	b2d2      	uxtb	r2, r2
    9c02:	4313      	orrs	r3, r2
    9c04:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9c06:	6978      	ldr	r0, [r7, #20]
    9c08:	4b0c      	ldr	r3, [pc, #48]	; (9c3c <_sercom_i2c_send_address+0xf8>)
    9c0a:	4798      	blx	r3
    9c0c:	4603      	mov	r3, r0
    9c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    9c12:	4323      	orrs	r3, r4
    9c14:	4619      	mov	r1, r3
    9c16:	6978      	ldr	r0, [r7, #20]
    9c18:	4b09      	ldr	r3, [pc, #36]	; (9c40 <_sercom_i2c_send_address+0xfc>)
    9c1a:	4798      	blx	r3
	}

	return ERR_NONE;
    9c1c:	2300      	movs	r3, #0
}
    9c1e:	4618      	mov	r0, r3
    9c20:	371c      	adds	r7, #28
    9c22:	46bd      	mov	sp, r7
    9c24:	bd90      	pop	{r4, r7, pc}
    9c26:	bf00      	nop
    9c28:	00009145 	.word	0x00009145
    9c2c:	0001ad54 	.word	0x0001ad54
    9c30:	000062c5 	.word	0x000062c5
    9c34:	000092f5 	.word	0x000092f5
    9c38:	0000931d 	.word	0x0000931d
    9c3c:	0000945d 	.word	0x0000945d
    9c40:	00009439 	.word	0x00009439

00009c44 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    9c44:	b580      	push	{r7, lr}
    9c46:	b084      	sub	sp, #16
    9c48:	af00      	add	r7, sp, #0
    9c4a:	6078      	str	r0, [r7, #4]
    9c4c:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	2b00      	cmp	r3, #0
    9c52:	bf14      	ite	ne
    9c54:	2301      	movne	r3, #1
    9c56:	2300      	moveq	r3, #0
    9c58:	b2db      	uxtb	r3, r3
    9c5a:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9c5e:	492a      	ldr	r1, [pc, #168]	; (9d08 <_i2c_m_async_transfer+0xc4>)
    9c60:	4618      	mov	r0, r3
    9c62:	4b2a      	ldr	r3, [pc, #168]	; (9d0c <_i2c_m_async_transfer+0xc8>)
    9c64:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	691b      	ldr	r3, [r3, #16]
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	bf14      	ite	ne
    9c6e:	2301      	movne	r3, #1
    9c70:	2300      	moveq	r3, #0
    9c72:	b2db      	uxtb	r3, r3
    9c74:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9c78:	4923      	ldr	r1, [pc, #140]	; (9d08 <_i2c_m_async_transfer+0xc4>)
    9c7a:	4618      	mov	r0, r3
    9c7c:	4b23      	ldr	r3, [pc, #140]	; (9d0c <_i2c_m_async_transfer+0xc8>)
    9c7e:	4798      	blx	r3
	ASSERT(msg);
    9c80:	683b      	ldr	r3, [r7, #0]
    9c82:	2b00      	cmp	r3, #0
    9c84:	bf14      	ite	ne
    9c86:	2301      	movne	r3, #1
    9c88:	2300      	moveq	r3, #0
    9c8a:	b2db      	uxtb	r3, r3
    9c8c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    9c90:	491d      	ldr	r1, [pc, #116]	; (9d08 <_i2c_m_async_transfer+0xc4>)
    9c92:	4618      	mov	r0, r3
    9c94:	4b1d      	ldr	r3, [pc, #116]	; (9d0c <_i2c_m_async_transfer+0xc8>)
    9c96:	4798      	blx	r3

	if (msg->len == 0) {
    9c98:	683b      	ldr	r3, [r7, #0]
    9c9a:	685b      	ldr	r3, [r3, #4]
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d101      	bne.n	9ca4 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    9ca0:	2300      	movs	r3, #0
    9ca2:	e02d      	b.n	9d00 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    9ca4:	687b      	ldr	r3, [r7, #4]
    9ca6:	885b      	ldrh	r3, [r3, #2]
    9ca8:	b29b      	uxth	r3, r3
    9caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d002      	beq.n	9cb8 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    9cb2:	f06f 0303 	mvn.w	r3, #3
    9cb6:	e023      	b.n	9d00 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    9cb8:	683b      	ldr	r3, [r7, #0]
    9cba:	885b      	ldrh	r3, [r3, #2]
    9cbc:	b29b      	uxth	r3, r3
    9cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9cc2:	b29a      	uxth	r2, r3
    9cc4:	683b      	ldr	r3, [r7, #0]
    9cc6:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	683a      	ldr	r2, [r7, #0]
    9ccc:	ca07      	ldmia	r2, {r0, r1, r2}
    9cce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	691b      	ldr	r3, [r3, #16]
    9cd6:	4618      	mov	r0, r3
    9cd8:	4b0d      	ldr	r3, [pc, #52]	; (9d10 <_i2c_m_async_transfer+0xcc>)
    9cda:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    9cdc:	6878      	ldr	r0, [r7, #4]
    9cde:	4b0d      	ldr	r3, [pc, #52]	; (9d14 <_i2c_m_async_transfer+0xd0>)
    9ce0:	4798      	blx	r3
    9ce2:	60f8      	str	r0, [r7, #12]

	if (ret) {
    9ce4:	68fb      	ldr	r3, [r7, #12]
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	d009      	beq.n	9cfe <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9cea:	687b      	ldr	r3, [r7, #4]
    9cec:	885b      	ldrh	r3, [r3, #2]
    9cee:	b29b      	uxth	r3, r3
    9cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9cf4:	b29a      	uxth	r2, r3
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	805a      	strh	r2, [r3, #2]

		return ret;
    9cfa:	68fb      	ldr	r3, [r7, #12]
    9cfc:	e000      	b.n	9d00 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    9cfe:	2300      	movs	r3, #0
}
    9d00:	4618      	mov	r0, r3
    9d02:	3710      	adds	r7, #16
    9d04:	46bd      	mov	sp, r7
    9d06:	bd80      	pop	{r7, pc}
    9d08:	0001ad54 	.word	0x0001ad54
    9d0c:	000062c5 	.word	0x000062c5
    9d10:	000092a5 	.word	0x000092a5
    9d14:	00009b45 	.word	0x00009b45

00009d18 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    9d18:	b480      	push	{r7}
    9d1a:	b085      	sub	sp, #20
    9d1c:	af00      	add	r7, sp, #0
    9d1e:	60f8      	str	r0, [r7, #12]
    9d20:	460b      	mov	r3, r1
    9d22:	607a      	str	r2, [r7, #4]
    9d24:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    9d26:	7afb      	ldrb	r3, [r7, #11]
    9d28:	2b01      	cmp	r3, #1
    9d2a:	d008      	beq.n	9d3e <_i2c_m_async_register_callback+0x26>
    9d2c:	2b02      	cmp	r3, #2
    9d2e:	d00a      	beq.n	9d46 <_i2c_m_async_register_callback+0x2e>
    9d30:	2b00      	cmp	r3, #0
    9d32:	d000      	beq.n	9d36 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    9d34:	e00b      	b.n	9d4e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    9d36:	68fb      	ldr	r3, [r7, #12]
    9d38:	687a      	ldr	r2, [r7, #4]
    9d3a:	615a      	str	r2, [r3, #20]
		break;
    9d3c:	e007      	b.n	9d4e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    9d3e:	68fb      	ldr	r3, [r7, #12]
    9d40:	687a      	ldr	r2, [r7, #4]
    9d42:	619a      	str	r2, [r3, #24]
		break;
    9d44:	e003      	b.n	9d4e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    9d46:	68fb      	ldr	r3, [r7, #12]
    9d48:	687a      	ldr	r2, [r7, #4]
    9d4a:	61da      	str	r2, [r3, #28]
		break;
    9d4c:	bf00      	nop
	}

	return ERR_NONE;
    9d4e:	2300      	movs	r3, #0
}
    9d50:	4618      	mov	r0, r3
    9d52:	3714      	adds	r7, #20
    9d54:	46bd      	mov	sp, r7
    9d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5a:	4770      	bx	lr

00009d5c <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    9d5c:	b580      	push	{r7, lr}
    9d5e:	b082      	sub	sp, #8
    9d60:	af00      	add	r7, sp, #0
    9d62:	6078      	str	r0, [r7, #4]
    9d64:	460b      	mov	r3, r1
    9d66:	70fb      	strb	r3, [r7, #3]
    9d68:	4613      	mov	r3, r2
    9d6a:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    9d6c:	78fb      	ldrb	r3, [r7, #3]
    9d6e:	2b01      	cmp	r3, #1
    9d70:	d002      	beq.n	9d78 <_i2c_m_async_set_irq_state+0x1c>
    9d72:	78fb      	ldrb	r3, [r7, #3]
    9d74:	2b02      	cmp	r3, #2
    9d76:	d10e      	bne.n	9d96 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	691b      	ldr	r3, [r3, #16]
    9d7c:	78ba      	ldrb	r2, [r7, #2]
    9d7e:	4611      	mov	r1, r2
    9d80:	4618      	mov	r0, r3
    9d82:	4b0c      	ldr	r3, [pc, #48]	; (9db4 <_i2c_m_async_set_irq_state+0x58>)
    9d84:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    9d86:	687b      	ldr	r3, [r7, #4]
    9d88:	691b      	ldr	r3, [r3, #16]
    9d8a:	78ba      	ldrb	r2, [r7, #2]
    9d8c:	4611      	mov	r1, r2
    9d8e:	4618      	mov	r0, r3
    9d90:	4b09      	ldr	r3, [pc, #36]	; (9db8 <_i2c_m_async_set_irq_state+0x5c>)
    9d92:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    9d94:	e009      	b.n	9daa <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    9d96:	78fb      	ldrb	r3, [r7, #3]
    9d98:	2b00      	cmp	r3, #0
    9d9a:	d106      	bne.n	9daa <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    9d9c:	687b      	ldr	r3, [r7, #4]
    9d9e:	691b      	ldr	r3, [r3, #16]
    9da0:	78ba      	ldrb	r2, [r7, #2]
    9da2:	4611      	mov	r1, r2
    9da4:	4618      	mov	r0, r3
    9da6:	4b05      	ldr	r3, [pc, #20]	; (9dbc <_i2c_m_async_set_irq_state+0x60>)
    9da8:	4798      	blx	r3
}
    9daa:	bf00      	nop
    9dac:	3708      	adds	r7, #8
    9dae:	46bd      	mov	sp, r7
    9db0:	bd80      	pop	{r7, pc}
    9db2:	bf00      	nop
    9db4:	00008fdb 	.word	0x00008fdb
    9db8:	00008fa9 	.word	0x00008fa9
    9dbc:	0000900d 	.word	0x0000900d

00009dc0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    9dc0:	b580      	push	{r7, lr}
    9dc2:	b084      	sub	sp, #16
    9dc4:	af00      	add	r7, sp, #0
    9dc6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    9dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9dcc:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    9dce:	2304      	movs	r3, #4
    9dd0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    9dd2:	687b      	ldr	r3, [r7, #4]
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	bf14      	ite	ne
    9dd8:	2301      	movne	r3, #1
    9dda:	2300      	moveq	r3, #0
    9ddc:	b2db      	uxtb	r3, r3
    9dde:	f240 6241 	movw	r2, #1601	; 0x641
    9de2:	4915      	ldr	r1, [pc, #84]	; (9e38 <_i2c_m_enable_implementation+0x78>)
    9de4:	4618      	mov	r0, r3
    9de6:	4b15      	ldr	r3, [pc, #84]	; (9e3c <_i2c_m_enable_implementation+0x7c>)
    9de8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    9dea:	6878      	ldr	r0, [r7, #4]
    9dec:	4b14      	ldr	r3, [pc, #80]	; (9e40 <_i2c_m_enable_implementation+0x80>)
    9dee:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9df0:	e016      	b.n	9e20 <_i2c_m_enable_implementation+0x60>
		timeout--;
    9df2:	68fb      	ldr	r3, [r7, #12]
    9df4:	3b01      	subs	r3, #1
    9df6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    9df8:	68fb      	ldr	r3, [r7, #12]
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	dc10      	bgt.n	9e20 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    9dfe:	68bb      	ldr	r3, [r7, #8]
    9e00:	3b01      	subs	r3, #1
    9e02:	60bb      	str	r3, [r7, #8]
    9e04:	68bb      	ldr	r3, [r7, #8]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d007      	beq.n	9e1a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    9e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e0e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    9e10:	2110      	movs	r1, #16
    9e12:	6878      	ldr	r0, [r7, #4]
    9e14:	4b0b      	ldr	r3, [pc, #44]	; (9e44 <_i2c_m_enable_implementation+0x84>)
    9e16:	4798      	blx	r3
    9e18:	e002      	b.n	9e20 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    9e1a:	f06f 0305 	mvn.w	r3, #5
    9e1e:	e006      	b.n	9e2e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9e20:	6878      	ldr	r0, [r7, #4]
    9e22:	4b09      	ldr	r3, [pc, #36]	; (9e48 <_i2c_m_enable_implementation+0x88>)
    9e24:	4798      	blx	r3
    9e26:	4603      	mov	r3, r0
    9e28:	2b01      	cmp	r3, #1
    9e2a:	d1e2      	bne.n	9df2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    9e2c:	2300      	movs	r3, #0
}
    9e2e:	4618      	mov	r0, r3
    9e30:	3710      	adds	r7, #16
    9e32:	46bd      	mov	sp, r7
    9e34:	bd80      	pop	{r7, pc}
    9e36:	bf00      	nop
    9e38:	0001ad54 	.word	0x0001ad54
    9e3c:	000062c5 	.word	0x000062c5
    9e40:	000090f5 	.word	0x000090f5
    9e44:	000095a1 	.word	0x000095a1
    9e48:	00009551 	.word	0x00009551

00009e4c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    9e4c:	b580      	push	{r7, lr}
    9e4e:	b084      	sub	sp, #16
    9e50:	af00      	add	r7, sp, #0
    9e52:	6078      	str	r0, [r7, #4]
    9e54:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    9e56:	6838      	ldr	r0, [r7, #0]
    9e58:	4b42      	ldr	r3, [pc, #264]	; (9f64 <_i2c_m_sync_init_impl+0x118>)
    9e5a:	4798      	blx	r3
    9e5c:	4603      	mov	r3, r0
    9e5e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    9e60:	2101      	movs	r1, #1
    9e62:	6838      	ldr	r0, [r7, #0]
    9e64:	4b40      	ldr	r3, [pc, #256]	; (9f68 <_i2c_m_sync_init_impl+0x11c>)
    9e66:	4798      	blx	r3
    9e68:	4603      	mov	r3, r0
    9e6a:	f083 0301 	eor.w	r3, r3, #1
    9e6e:	b2db      	uxtb	r3, r3
    9e70:	2b00      	cmp	r3, #0
    9e72:	d020      	beq.n	9eb6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    9e74:	7bfa      	ldrb	r2, [r7, #15]
    9e76:	493d      	ldr	r1, [pc, #244]	; (9f6c <_i2c_m_sync_init_impl+0x120>)
    9e78:	4613      	mov	r3, r2
    9e7a:	005b      	lsls	r3, r3, #1
    9e7c:	4413      	add	r3, r2
    9e7e:	00db      	lsls	r3, r3, #3
    9e80:	440b      	add	r3, r1
    9e82:	3304      	adds	r3, #4
    9e84:	681b      	ldr	r3, [r3, #0]
    9e86:	f003 031c 	and.w	r3, r3, #28
    9e8a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    9e8c:	2102      	movs	r1, #2
    9e8e:	6838      	ldr	r0, [r7, #0]
    9e90:	4b37      	ldr	r3, [pc, #220]	; (9f70 <_i2c_m_sync_init_impl+0x124>)
    9e92:	4798      	blx	r3
    9e94:	4603      	mov	r3, r0
    9e96:	2b00      	cmp	r3, #0
    9e98:	d006      	beq.n	9ea8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    9e9a:	6838      	ldr	r0, [r7, #0]
    9e9c:	4b35      	ldr	r3, [pc, #212]	; (9f74 <_i2c_m_sync_init_impl+0x128>)
    9e9e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    9ea0:	2102      	movs	r1, #2
    9ea2:	6838      	ldr	r0, [r7, #0]
    9ea4:	4b34      	ldr	r3, [pc, #208]	; (9f78 <_i2c_m_sync_init_impl+0x12c>)
    9ea6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    9ea8:	68bb      	ldr	r3, [r7, #8]
    9eaa:	f043 0301 	orr.w	r3, r3, #1
    9eae:	4619      	mov	r1, r3
    9eb0:	6838      	ldr	r0, [r7, #0]
    9eb2:	4b32      	ldr	r3, [pc, #200]	; (9f7c <_i2c_m_sync_init_impl+0x130>)
    9eb4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    9eb6:	2101      	movs	r1, #1
    9eb8:	6838      	ldr	r0, [r7, #0]
    9eba:	4b2f      	ldr	r3, [pc, #188]	; (9f78 <_i2c_m_sync_init_impl+0x12c>)
    9ebc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    9ebe:	7bfa      	ldrb	r2, [r7, #15]
    9ec0:	492a      	ldr	r1, [pc, #168]	; (9f6c <_i2c_m_sync_init_impl+0x120>)
    9ec2:	4613      	mov	r3, r2
    9ec4:	005b      	lsls	r3, r3, #1
    9ec6:	4413      	add	r3, r2
    9ec8:	00db      	lsls	r3, r3, #3
    9eca:	440b      	add	r3, r1
    9ecc:	3304      	adds	r3, #4
    9ece:	681b      	ldr	r3, [r3, #0]
    9ed0:	4619      	mov	r1, r3
    9ed2:	6838      	ldr	r0, [r7, #0]
    9ed4:	4b29      	ldr	r3, [pc, #164]	; (9f7c <_i2c_m_sync_init_impl+0x130>)
    9ed6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    9ed8:	7bfa      	ldrb	r2, [r7, #15]
    9eda:	4924      	ldr	r1, [pc, #144]	; (9f6c <_i2c_m_sync_init_impl+0x120>)
    9edc:	4613      	mov	r3, r2
    9ede:	005b      	lsls	r3, r3, #1
    9ee0:	4413      	add	r3, r2
    9ee2:	00db      	lsls	r3, r3, #3
    9ee4:	440b      	add	r3, r1
    9ee6:	3308      	adds	r3, #8
    9ee8:	681b      	ldr	r3, [r3, #0]
    9eea:	4619      	mov	r1, r3
    9eec:	6838      	ldr	r0, [r7, #0]
    9eee:	4b24      	ldr	r3, [pc, #144]	; (9f80 <_i2c_m_sync_init_impl+0x134>)
    9ef0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    9ef2:	7bfa      	ldrb	r2, [r7, #15]
    9ef4:	491d      	ldr	r1, [pc, #116]	; (9f6c <_i2c_m_sync_init_impl+0x120>)
    9ef6:	4613      	mov	r3, r2
    9ef8:	005b      	lsls	r3, r3, #1
    9efa:	4413      	add	r3, r2
    9efc:	00db      	lsls	r3, r3, #3
    9efe:	440b      	add	r3, r1
    9f00:	330c      	adds	r3, #12
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	4619      	mov	r1, r3
    9f06:	6838      	ldr	r0, [r7, #0]
    9f08:	4b1e      	ldr	r3, [pc, #120]	; (9f84 <_i2c_m_sync_init_impl+0x138>)
    9f0a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    9f0c:	7bfa      	ldrb	r2, [r7, #15]
    9f0e:	4917      	ldr	r1, [pc, #92]	; (9f6c <_i2c_m_sync_init_impl+0x120>)
    9f10:	4613      	mov	r3, r2
    9f12:	005b      	lsls	r3, r3, #1
    9f14:	4413      	add	r3, r2
    9f16:	00db      	lsls	r3, r3, #3
    9f18:	440b      	add	r3, r1
    9f1a:	3304      	adds	r3, #4
    9f1c:	681b      	ldr	r3, [r3, #0]
    9f1e:	0e1b      	lsrs	r3, r3, #24
    9f20:	b29b      	uxth	r3, r3
    9f22:	f003 0303 	and.w	r3, r3, #3
    9f26:	b29a      	uxth	r2, r3
    9f28:	687b      	ldr	r3, [r7, #4]
    9f2a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	899b      	ldrh	r3, [r3, #12]
    9f30:	2b01      	cmp	r3, #1
    9f32:	bf8c      	ite	hi
    9f34:	2301      	movhi	r3, #1
    9f36:	2300      	movls	r3, #0
    9f38:	b2db      	uxtb	r3, r3
    9f3a:	4619      	mov	r1, r3
    9f3c:	6838      	ldr	r0, [r7, #0]
    9f3e:	4b12      	ldr	r3, [pc, #72]	; (9f88 <_i2c_m_sync_init_impl+0x13c>)
    9f40:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    9f42:	7bfa      	ldrb	r2, [r7, #15]
    9f44:	4909      	ldr	r1, [pc, #36]	; (9f6c <_i2c_m_sync_init_impl+0x120>)
    9f46:	4613      	mov	r3, r2
    9f48:	005b      	lsls	r3, r3, #1
    9f4a:	4413      	add	r3, r2
    9f4c:	00db      	lsls	r3, r3, #3
    9f4e:	440b      	add	r3, r1
    9f50:	3312      	adds	r3, #18
    9f52:	881a      	ldrh	r2, [r3, #0]
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    9f58:	2300      	movs	r3, #0
}
    9f5a:	4618      	mov	r0, r3
    9f5c:	3710      	adds	r7, #16
    9f5e:	46bd      	mov	sp, r7
    9f60:	bd80      	pop	{r7, pc}
    9f62:	bf00      	nop
    9f64:	00009679 	.word	0x00009679
    9f68:	00008e69 	.word	0x00008e69
    9f6c:	2000007c 	.word	0x2000007c
    9f70:	00009175 	.word	0x00009175
    9f74:	0000911d 	.word	0x0000911d
    9f78:	00008e45 	.word	0x00008e45
    9f7c:	000091a5 	.word	0x000091a5
    9f80:	00009375 	.word	0x00009375
    9f84:	000093bd 	.word	0x000093bd
    9f88:	000093f9 	.word	0x000093f9

00009f8c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b082      	sub	sp, #8
    9f90:	af00      	add	r7, sp, #0
    9f92:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9f94:	2101      	movs	r1, #1
    9f96:	6878      	ldr	r0, [r7, #4]
    9f98:	4b07      	ldr	r3, [pc, #28]	; (9fb8 <_spi_sync_enable+0x2c>)
    9f9a:	4798      	blx	r3
    9f9c:	4603      	mov	r3, r0
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	d002      	beq.n	9fa8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    9fa2:	f06f 0303 	mvn.w	r3, #3
    9fa6:	e003      	b.n	9fb0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    9fa8:	6878      	ldr	r0, [r7, #4]
    9faa:	4b04      	ldr	r3, [pc, #16]	; (9fbc <_spi_sync_enable+0x30>)
    9fac:	4798      	blx	r3

	return ERR_NONE;
    9fae:	2300      	movs	r3, #0
}
    9fb0:	4618      	mov	r0, r3
    9fb2:	3708      	adds	r7, #8
    9fb4:	46bd      	mov	sp, r7
    9fb6:	bd80      	pop	{r7, pc}
    9fb8:	00008eb5 	.word	0x00008eb5
    9fbc:	000091c9 	.word	0x000091c9

00009fc0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    9fc0:	b580      	push	{r7, lr}
    9fc2:	b082      	sub	sp, #8
    9fc4:	af00      	add	r7, sp, #0
    9fc6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9fc8:	2101      	movs	r1, #1
    9fca:	6878      	ldr	r0, [r7, #4]
    9fcc:	4b07      	ldr	r3, [pc, #28]	; (9fec <_spi_sync_disable+0x2c>)
    9fce:	4798      	blx	r3
    9fd0:	4603      	mov	r3, r0
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d002      	beq.n	9fdc <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    9fd6:	f06f 0303 	mvn.w	r3, #3
    9fda:	e003      	b.n	9fe4 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    9fdc:	6878      	ldr	r0, [r7, #4]
    9fde:	4b04      	ldr	r3, [pc, #16]	; (9ff0 <_spi_sync_disable+0x30>)
    9fe0:	4798      	blx	r3

	return ERR_NONE;
    9fe2:	2300      	movs	r3, #0
}
    9fe4:	4618      	mov	r0, r3
    9fe6:	3708      	adds	r7, #8
    9fe8:	46bd      	mov	sp, r7
    9fea:	bd80      	pop	{r7, pc}
    9fec:	00008eb5 	.word	0x00008eb5
    9ff0:	00009229 	.word	0x00009229

00009ff4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9ff4:	b580      	push	{r7, lr}
    9ff6:	b082      	sub	sp, #8
    9ff8:	af00      	add	r7, sp, #0
    9ffa:	6078      	str	r0, [r7, #4]
    9ffc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    9ffe:	687b      	ldr	r3, [r7, #4]
    a000:	2b00      	cmp	r3, #0
    a002:	d004      	beq.n	a00e <_spi_load_regs_master+0x1a>
    a004:	683b      	ldr	r3, [r7, #0]
    a006:	2b00      	cmp	r3, #0
    a008:	d001      	beq.n	a00e <_spi_load_regs_master+0x1a>
    a00a:	2301      	movs	r3, #1
    a00c:	e000      	b.n	a010 <_spi_load_regs_master+0x1c>
    a00e:	2300      	movs	r3, #0
    a010:	f003 0301 	and.w	r3, r3, #1
    a014:	b2db      	uxtb	r3, r3
    a016:	f640 1242 	movw	r2, #2370	; 0x942
    a01a:	4915      	ldr	r1, [pc, #84]	; (a070 <_spi_load_regs_master+0x7c>)
    a01c:	4618      	mov	r0, r3
    a01e:	4b15      	ldr	r3, [pc, #84]	; (a074 <_spi_load_regs_master+0x80>)
    a020:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a022:	683b      	ldr	r3, [r7, #0]
    a024:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a026:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a02a:	f023 0301 	bic.w	r3, r3, #1
    a02e:	4619      	mov	r1, r3
    a030:	6878      	ldr	r0, [r7, #4]
    a032:	4b11      	ldr	r3, [pc, #68]	; (a078 <_spi_load_regs_master+0x84>)
    a034:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    a036:	683b      	ldr	r3, [r7, #0]
    a038:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    a03a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    a03e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    a042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a046:	4619      	mov	r1, r3
    a048:	6878      	ldr	r0, [r7, #4]
    a04a:	4b0c      	ldr	r3, [pc, #48]	; (a07c <_spi_load_regs_master+0x88>)
    a04c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    a04e:	683b      	ldr	r3, [r7, #0]
    a050:	7b1b      	ldrb	r3, [r3, #12]
    a052:	4619      	mov	r1, r3
    a054:	6878      	ldr	r0, [r7, #4]
    a056:	4b0a      	ldr	r3, [pc, #40]	; (a080 <_spi_load_regs_master+0x8c>)
    a058:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a05a:	683b      	ldr	r3, [r7, #0]
    a05c:	7b5b      	ldrb	r3, [r3, #13]
    a05e:	4619      	mov	r1, r3
    a060:	6878      	ldr	r0, [r7, #4]
    a062:	4b08      	ldr	r3, [pc, #32]	; (a084 <_spi_load_regs_master+0x90>)
    a064:	4798      	blx	r3
}
    a066:	bf00      	nop
    a068:	3708      	adds	r7, #8
    a06a:	46bd      	mov	sp, r7
    a06c:	bd80      	pop	{r7, pc}
    a06e:	bf00      	nop
    a070:	0001ad54 	.word	0x0001ad54
    a074:	000062c5 	.word	0x000062c5
    a078:	00009281 	.word	0x00009281
    a07c:	00009399 	.word	0x00009399
    a080:	000093d9 	.word	0x000093d9
    a084:	00009511 	.word	0x00009511

0000a088 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    a088:	b580      	push	{r7, lr}
    a08a:	b082      	sub	sp, #8
    a08c:	af00      	add	r7, sp, #0
    a08e:	6078      	str	r0, [r7, #4]
    a090:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	2b00      	cmp	r3, #0
    a096:	d004      	beq.n	a0a2 <_spi_load_regs_slave+0x1a>
    a098:	683b      	ldr	r3, [r7, #0]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d001      	beq.n	a0a2 <_spi_load_regs_slave+0x1a>
    a09e:	2301      	movs	r3, #1
    a0a0:	e000      	b.n	a0a4 <_spi_load_regs_slave+0x1c>
    a0a2:	2300      	movs	r3, #0
    a0a4:	f003 0301 	and.w	r3, r3, #1
    a0a8:	b2db      	uxtb	r3, r3
    a0aa:	f640 1256 	movw	r2, #2390	; 0x956
    a0ae:	491a      	ldr	r1, [pc, #104]	; (a118 <_spi_load_regs_slave+0x90>)
    a0b0:	4618      	mov	r0, r3
    a0b2:	4b1a      	ldr	r3, [pc, #104]	; (a11c <_spi_load_regs_slave+0x94>)
    a0b4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a0b6:	683b      	ldr	r3, [r7, #0]
    a0b8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a0ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a0be:	f023 0301 	bic.w	r3, r3, #1
    a0c2:	4619      	mov	r1, r3
    a0c4:	6878      	ldr	r0, [r7, #4]
    a0c6:	4b16      	ldr	r3, [pc, #88]	; (a120 <_spi_load_regs_slave+0x98>)
    a0c8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    a0ca:	683b      	ldr	r3, [r7, #0]
    a0cc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    a0ce:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    a0d2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    a0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a0da:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    a0de:	4619      	mov	r1, r3
    a0e0:	6878      	ldr	r0, [r7, #4]
    a0e2:	4b10      	ldr	r3, [pc, #64]	; (a124 <_spi_load_regs_slave+0x9c>)
    a0e4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    a0e6:	683b      	ldr	r3, [r7, #0]
    a0e8:	689b      	ldr	r3, [r3, #8]
    a0ea:	4619      	mov	r1, r3
    a0ec:	6878      	ldr	r0, [r7, #4]
    a0ee:	4b0e      	ldr	r3, [pc, #56]	; (a128 <_spi_load_regs_slave+0xa0>)
    a0f0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a0f2:	683b      	ldr	r3, [r7, #0]
    a0f4:	7b5b      	ldrb	r3, [r3, #13]
    a0f6:	4619      	mov	r1, r3
    a0f8:	6878      	ldr	r0, [r7, #4]
    a0fa:	4b0c      	ldr	r3, [pc, #48]	; (a12c <_spi_load_regs_slave+0xa4>)
    a0fc:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    a0fe:	bf00      	nop
    a100:	f04f 31ff 	mov.w	r1, #4294967295
    a104:	6878      	ldr	r0, [r7, #4]
    a106:	4b0a      	ldr	r3, [pc, #40]	; (a130 <_spi_load_regs_slave+0xa8>)
    a108:	4798      	blx	r3
    a10a:	4603      	mov	r3, r0
    a10c:	2b00      	cmp	r3, #0
    a10e:	d1f7      	bne.n	a100 <_spi_load_regs_slave+0x78>
		;
}
    a110:	bf00      	nop
    a112:	3708      	adds	r7, #8
    a114:	46bd      	mov	sp, r7
    a116:	bd80      	pop	{r7, pc}
    a118:	0001ad54 	.word	0x0001ad54
    a11c:	000062c5 	.word	0x000062c5
    a120:	00009281 	.word	0x00009281
    a124:	00009399 	.word	0x00009399
    a128:	0000947d 	.word	0x0000947d
    a12c:	00009511 	.word	0x00009511
    a130:	00008eb5 	.word	0x00008eb5

0000a134 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    a134:	b580      	push	{r7, lr}
    a136:	b084      	sub	sp, #16
    a138:	af00      	add	r7, sp, #0
    a13a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    a13c:	687b      	ldr	r3, [r7, #4]
    a13e:	4618      	mov	r0, r3
    a140:	4b11      	ldr	r3, [pc, #68]	; (a188 <_spi_get_regs+0x54>)
    a142:	4798      	blx	r3
    a144:	4603      	mov	r3, r0
    a146:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a148:	2300      	movs	r3, #0
    a14a:	73fb      	strb	r3, [r7, #15]
    a14c:	e014      	b.n	a178 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    a14e:	7bfa      	ldrb	r2, [r7, #15]
    a150:	490e      	ldr	r1, [pc, #56]	; (a18c <_spi_get_regs+0x58>)
    a152:	4613      	mov	r3, r2
    a154:	011b      	lsls	r3, r3, #4
    a156:	4413      	add	r3, r2
    a158:	440b      	add	r3, r1
    a15a:	3310      	adds	r3, #16
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	7bba      	ldrb	r2, [r7, #14]
    a160:	429a      	cmp	r2, r3
    a162:	d106      	bne.n	a172 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    a164:	7bfa      	ldrb	r2, [r7, #15]
    a166:	4613      	mov	r3, r2
    a168:	011b      	lsls	r3, r3, #4
    a16a:	4413      	add	r3, r2
    a16c:	4a07      	ldr	r2, [pc, #28]	; (a18c <_spi_get_regs+0x58>)
    a16e:	4413      	add	r3, r2
    a170:	e006      	b.n	a180 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a172:	7bfb      	ldrb	r3, [r7, #15]
    a174:	3301      	adds	r3, #1
    a176:	73fb      	strb	r3, [r7, #15]
    a178:	7bfb      	ldrb	r3, [r7, #15]
    a17a:	2b01      	cmp	r3, #1
    a17c:	d9e7      	bls.n	a14e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    a17e:	2300      	movs	r3, #0
}
    a180:	4618      	mov	r0, r3
    a182:	3710      	adds	r7, #16
    a184:	46bd      	mov	sp, r7
    a186:	bd80      	pop	{r7, pc}
    a188:	000095c9 	.word	0x000095c9
    a18c:	0001ad90 	.word	0x0001ad90

0000a190 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    a190:	b580      	push	{r7, lr}
    a192:	b084      	sub	sp, #16
    a194:	af00      	add	r7, sp, #0
    a196:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	681b      	ldr	r3, [r3, #0]
    a19c:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    a19e:	68f8      	ldr	r0, [r7, #12]
    a1a0:	4b21      	ldr	r3, [pc, #132]	; (a228 <_spi_handler+0x98>)
    a1a2:	4798      	blx	r3
    a1a4:	4603      	mov	r3, r0
    a1a6:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    a1a8:	68f8      	ldr	r0, [r7, #12]
    a1aa:	4b20      	ldr	r3, [pc, #128]	; (a22c <_spi_handler+0x9c>)
    a1ac:	4798      	blx	r3
    a1ae:	4603      	mov	r3, r0
    a1b0:	461a      	mov	r2, r3
    a1b2:	7afb      	ldrb	r3, [r7, #11]
    a1b4:	4013      	ands	r3, r2
    a1b6:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    a1b8:	7afb      	ldrb	r3, [r7, #11]
    a1ba:	f003 0301 	and.w	r3, r3, #1
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d004      	beq.n	a1cc <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	689b      	ldr	r3, [r3, #8]
    a1c6:	6878      	ldr	r0, [r7, #4]
    a1c8:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    a1ca:	e029      	b.n	a220 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    a1cc:	7afb      	ldrb	r3, [r7, #11]
    a1ce:	f003 0304 	and.w	r3, r3, #4
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d004      	beq.n	a1e0 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	68db      	ldr	r3, [r3, #12]
    a1da:	6878      	ldr	r0, [r7, #4]
    a1dc:	4798      	blx	r3
}
    a1de:	e01f      	b.n	a220 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    a1e0:	7afb      	ldrb	r3, [r7, #11]
    a1e2:	f003 0302 	and.w	r3, r3, #2
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d008      	beq.n	a1fc <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    a1ea:	2102      	movs	r1, #2
    a1ec:	68f8      	ldr	r0, [r7, #12]
    a1ee:	4b10      	ldr	r3, [pc, #64]	; (a230 <_spi_handler+0xa0>)
    a1f0:	4798      	blx	r3
		dev->callbacks.complete(dev);
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	691b      	ldr	r3, [r3, #16]
    a1f6:	6878      	ldr	r0, [r7, #4]
    a1f8:	4798      	blx	r3
}
    a1fa:	e011      	b.n	a220 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    a1fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
    a200:	2b00      	cmp	r3, #0
    a202:	da0d      	bge.n	a220 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    a204:	2104      	movs	r1, #4
    a206:	68f8      	ldr	r0, [r7, #12]
    a208:	4b0a      	ldr	r3, [pc, #40]	; (a234 <_spi_handler+0xa4>)
    a20a:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a20c:	2180      	movs	r1, #128	; 0x80
    a20e:	68f8      	ldr	r0, [r7, #12]
    a210:	4b07      	ldr	r3, [pc, #28]	; (a230 <_spi_handler+0xa0>)
    a212:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    a214:	687b      	ldr	r3, [r7, #4]
    a216:	695b      	ldr	r3, [r3, #20]
    a218:	f06f 0112 	mvn.w	r1, #18
    a21c:	6878      	ldr	r0, [r7, #4]
    a21e:	4798      	blx	r3
}
    a220:	bf00      	nop
    a222:	3710      	adds	r7, #16
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	00008f71 	.word	0x00008f71
    a22c:	000090db 	.word	0x000090db
    a230:	00008f8b 	.word	0x00008f8b
    a234:	00009531 	.word	0x00009531

0000a238 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    a238:	b580      	push	{r7, lr}
    a23a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a23c:	4b03      	ldr	r3, [pc, #12]	; (a24c <SERCOM4_0_Handler+0x14>)
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	4618      	mov	r0, r3
    a242:	4b03      	ldr	r3, [pc, #12]	; (a250 <SERCOM4_0_Handler+0x18>)
    a244:	4798      	blx	r3
}
    a246:	bf00      	nop
    a248:	bd80      	pop	{r7, pc}
    a24a:	bf00      	nop
    a24c:	200033a8 	.word	0x200033a8
    a250:	0000a191 	.word	0x0000a191

0000a254 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    a254:	b580      	push	{r7, lr}
    a256:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a258:	4b03      	ldr	r3, [pc, #12]	; (a268 <SERCOM4_1_Handler+0x14>)
    a25a:	681b      	ldr	r3, [r3, #0]
    a25c:	4618      	mov	r0, r3
    a25e:	4b03      	ldr	r3, [pc, #12]	; (a26c <SERCOM4_1_Handler+0x18>)
    a260:	4798      	blx	r3
}
    a262:	bf00      	nop
    a264:	bd80      	pop	{r7, pc}
    a266:	bf00      	nop
    a268:	200033a8 	.word	0x200033a8
    a26c:	0000a191 	.word	0x0000a191

0000a270 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    a270:	b580      	push	{r7, lr}
    a272:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a274:	4b03      	ldr	r3, [pc, #12]	; (a284 <SERCOM4_2_Handler+0x14>)
    a276:	681b      	ldr	r3, [r3, #0]
    a278:	4618      	mov	r0, r3
    a27a:	4b03      	ldr	r3, [pc, #12]	; (a288 <SERCOM4_2_Handler+0x18>)
    a27c:	4798      	blx	r3
}
    a27e:	bf00      	nop
    a280:	bd80      	pop	{r7, pc}
    a282:	bf00      	nop
    a284:	200033a8 	.word	0x200033a8
    a288:	0000a191 	.word	0x0000a191

0000a28c <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a290:	4b03      	ldr	r3, [pc, #12]	; (a2a0 <SERCOM4_3_Handler+0x14>)
    a292:	681b      	ldr	r3, [r3, #0]
    a294:	4618      	mov	r0, r3
    a296:	4b03      	ldr	r3, [pc, #12]	; (a2a4 <SERCOM4_3_Handler+0x18>)
    a298:	4798      	blx	r3
}
    a29a:	bf00      	nop
    a29c:	bd80      	pop	{r7, pc}
    a29e:	bf00      	nop
    a2a0:	200033a8 	.word	0x200033a8
    a2a4:	0000a191 	.word	0x0000a191

0000a2a8 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    a2a8:	b580      	push	{r7, lr}
    a2aa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a2ac:	4b03      	ldr	r3, [pc, #12]	; (a2bc <SERCOM5_0_Handler+0x14>)
    a2ae:	681b      	ldr	r3, [r3, #0]
    a2b0:	4618      	mov	r0, r3
    a2b2:	4b03      	ldr	r3, [pc, #12]	; (a2c0 <SERCOM5_0_Handler+0x18>)
    a2b4:	4798      	blx	r3
}
    a2b6:	bf00      	nop
    a2b8:	bd80      	pop	{r7, pc}
    a2ba:	bf00      	nop
    a2bc:	200033ac 	.word	0x200033ac
    a2c0:	0000992d 	.word	0x0000992d

0000a2c4 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    a2c4:	b580      	push	{r7, lr}
    a2c6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a2c8:	4b03      	ldr	r3, [pc, #12]	; (a2d8 <SERCOM5_1_Handler+0x14>)
    a2ca:	681b      	ldr	r3, [r3, #0]
    a2cc:	4618      	mov	r0, r3
    a2ce:	4b03      	ldr	r3, [pc, #12]	; (a2dc <SERCOM5_1_Handler+0x18>)
    a2d0:	4798      	blx	r3
}
    a2d2:	bf00      	nop
    a2d4:	bd80      	pop	{r7, pc}
    a2d6:	bf00      	nop
    a2d8:	200033ac 	.word	0x200033ac
    a2dc:	0000992d 	.word	0x0000992d

0000a2e0 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    a2e0:	b580      	push	{r7, lr}
    a2e2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a2e4:	4b03      	ldr	r3, [pc, #12]	; (a2f4 <SERCOM5_2_Handler+0x14>)
    a2e6:	681b      	ldr	r3, [r3, #0]
    a2e8:	4618      	mov	r0, r3
    a2ea:	4b03      	ldr	r3, [pc, #12]	; (a2f8 <SERCOM5_2_Handler+0x18>)
    a2ec:	4798      	blx	r3
}
    a2ee:	bf00      	nop
    a2f0:	bd80      	pop	{r7, pc}
    a2f2:	bf00      	nop
    a2f4:	200033ac 	.word	0x200033ac
    a2f8:	0000992d 	.word	0x0000992d

0000a2fc <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a300:	4b03      	ldr	r3, [pc, #12]	; (a310 <SERCOM5_3_Handler+0x14>)
    a302:	681b      	ldr	r3, [r3, #0]
    a304:	4618      	mov	r0, r3
    a306:	4b03      	ldr	r3, [pc, #12]	; (a314 <SERCOM5_3_Handler+0x18>)
    a308:	4798      	blx	r3
}
    a30a:	bf00      	nop
    a30c:	bd80      	pop	{r7, pc}
    a30e:	bf00      	nop
    a310:	200033ac 	.word	0x200033ac
    a314:	0000992d 	.word	0x0000992d

0000a318 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    a318:	b580      	push	{r7, lr}
    a31a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a31c:	4b03      	ldr	r3, [pc, #12]	; (a32c <SERCOM7_0_Handler+0x14>)
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	4618      	mov	r0, r3
    a322:	4b03      	ldr	r3, [pc, #12]	; (a330 <SERCOM7_0_Handler+0x18>)
    a324:	4798      	blx	r3
}
    a326:	bf00      	nop
    a328:	bd80      	pop	{r7, pc}
    a32a:	bf00      	nop
    a32c:	200033b0 	.word	0x200033b0
    a330:	0000992d 	.word	0x0000992d

0000a334 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    a334:	b580      	push	{r7, lr}
    a336:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a338:	4b03      	ldr	r3, [pc, #12]	; (a348 <SERCOM7_1_Handler+0x14>)
    a33a:	681b      	ldr	r3, [r3, #0]
    a33c:	4618      	mov	r0, r3
    a33e:	4b03      	ldr	r3, [pc, #12]	; (a34c <SERCOM7_1_Handler+0x18>)
    a340:	4798      	blx	r3
}
    a342:	bf00      	nop
    a344:	bd80      	pop	{r7, pc}
    a346:	bf00      	nop
    a348:	200033b0 	.word	0x200033b0
    a34c:	0000992d 	.word	0x0000992d

0000a350 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    a350:	b580      	push	{r7, lr}
    a352:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a354:	4b03      	ldr	r3, [pc, #12]	; (a364 <SERCOM7_2_Handler+0x14>)
    a356:	681b      	ldr	r3, [r3, #0]
    a358:	4618      	mov	r0, r3
    a35a:	4b03      	ldr	r3, [pc, #12]	; (a368 <SERCOM7_2_Handler+0x18>)
    a35c:	4798      	blx	r3
}
    a35e:	bf00      	nop
    a360:	bd80      	pop	{r7, pc}
    a362:	bf00      	nop
    a364:	200033b0 	.word	0x200033b0
    a368:	0000992d 	.word	0x0000992d

0000a36c <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    a36c:	b580      	push	{r7, lr}
    a36e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a370:	4b03      	ldr	r3, [pc, #12]	; (a380 <SERCOM7_3_Handler+0x14>)
    a372:	681b      	ldr	r3, [r3, #0]
    a374:	4618      	mov	r0, r3
    a376:	4b03      	ldr	r3, [pc, #12]	; (a384 <SERCOM7_3_Handler+0x18>)
    a378:	4798      	blx	r3
}
    a37a:	bf00      	nop
    a37c:	bd80      	pop	{r7, pc}
    a37e:	bf00      	nop
    a380:	200033b0 	.word	0x200033b0
    a384:	0000992d 	.word	0x0000992d

0000a388 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    a388:	b580      	push	{r7, lr}
    a38a:	b084      	sub	sp, #16
    a38c:	af00      	add	r7, sp, #0
    a38e:	6078      	str	r0, [r7, #4]
    a390:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    a392:	683b      	ldr	r3, [r7, #0]
    a394:	4618      	mov	r0, r3
    a396:	4b35      	ldr	r3, [pc, #212]	; (a46c <_spi_m_sync_init+0xe4>)
    a398:	4798      	blx	r3
    a39a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d004      	beq.n	a3ac <_spi_m_sync_init+0x24>
    a3a2:	683b      	ldr	r3, [r7, #0]
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	d001      	beq.n	a3ac <_spi_m_sync_init+0x24>
    a3a8:	2301      	movs	r3, #1
    a3aa:	e000      	b.n	a3ae <_spi_m_sync_init+0x26>
    a3ac:	2300      	movs	r3, #0
    a3ae:	f003 0301 	and.w	r3, r3, #1
    a3b2:	b2db      	uxtb	r3, r3
    a3b4:	f640 12e9 	movw	r2, #2537	; 0x9e9
    a3b8:	492d      	ldr	r1, [pc, #180]	; (a470 <_spi_m_sync_init+0xe8>)
    a3ba:	4618      	mov	r0, r3
    a3bc:	4b2d      	ldr	r3, [pc, #180]	; (a474 <_spi_m_sync_init+0xec>)
    a3be:	4798      	blx	r3

	if (regs == NULL) {
    a3c0:	68fb      	ldr	r3, [r7, #12]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d102      	bne.n	a3cc <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    a3c6:	f06f 030c 	mvn.w	r3, #12
    a3ca:	e04a      	b.n	a462 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a3cc:	2101      	movs	r1, #1
    a3ce:	6838      	ldr	r0, [r7, #0]
    a3d0:	4b29      	ldr	r3, [pc, #164]	; (a478 <_spi_m_sync_init+0xf0>)
    a3d2:	4798      	blx	r3
    a3d4:	4603      	mov	r3, r0
    a3d6:	f083 0301 	eor.w	r3, r3, #1
    a3da:	b2db      	uxtb	r3, r3
    a3dc:	2b00      	cmp	r3, #0
    a3de:	d019      	beq.n	a414 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    a3e0:	68fb      	ldr	r3, [r7, #12]
    a3e2:	681b      	ldr	r3, [r3, #0]
    a3e4:	f003 031c 	and.w	r3, r3, #28
    a3e8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    a3ea:	2102      	movs	r1, #2
    a3ec:	6838      	ldr	r0, [r7, #0]
    a3ee:	4b23      	ldr	r3, [pc, #140]	; (a47c <_spi_m_sync_init+0xf4>)
    a3f0:	4798      	blx	r3
    a3f2:	4603      	mov	r3, r0
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d006      	beq.n	a406 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    a3f8:	6838      	ldr	r0, [r7, #0]
    a3fa:	4b21      	ldr	r3, [pc, #132]	; (a480 <_spi_m_sync_init+0xf8>)
    a3fc:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    a3fe:	2102      	movs	r1, #2
    a400:	6838      	ldr	r0, [r7, #0]
    a402:	4b20      	ldr	r3, [pc, #128]	; (a484 <_spi_m_sync_init+0xfc>)
    a404:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    a406:	68bb      	ldr	r3, [r7, #8]
    a408:	f043 0301 	orr.w	r3, r3, #1
    a40c:	4619      	mov	r1, r3
    a40e:	6838      	ldr	r0, [r7, #0]
    a410:	4b1d      	ldr	r3, [pc, #116]	; (a488 <_spi_m_sync_init+0x100>)
    a412:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    a414:	2101      	movs	r1, #1
    a416:	6838      	ldr	r0, [r7, #0]
    a418:	4b1a      	ldr	r3, [pc, #104]	; (a484 <_spi_m_sync_init+0xfc>)
    a41a:	4798      	blx	r3

	dev->prvt = hw;
    a41c:	687b      	ldr	r3, [r7, #4]
    a41e:	683a      	ldr	r2, [r7, #0]
    a420:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    a422:	68fb      	ldr	r3, [r7, #12]
    a424:	681b      	ldr	r3, [r3, #0]
    a426:	f003 031c 	and.w	r3, r3, #28
    a42a:	2b08      	cmp	r3, #8
    a42c:	d104      	bne.n	a438 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    a42e:	68f9      	ldr	r1, [r7, #12]
    a430:	6838      	ldr	r0, [r7, #0]
    a432:	4b16      	ldr	r3, [pc, #88]	; (a48c <_spi_m_sync_init+0x104>)
    a434:	4798      	blx	r3
    a436:	e003      	b.n	a440 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    a438:	68f9      	ldr	r1, [r7, #12]
    a43a:	6838      	ldr	r0, [r7, #0]
    a43c:	4b14      	ldr	r3, [pc, #80]	; (a490 <_spi_m_sync_init+0x108>)
    a43e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    a440:	68fb      	ldr	r3, [r7, #12]
    a442:	685b      	ldr	r3, [r3, #4]
    a444:	f003 0307 	and.w	r3, r3, #7
    a448:	2b00      	cmp	r3, #0
    a44a:	d101      	bne.n	a450 <_spi_m_sync_init+0xc8>
    a44c:	2201      	movs	r2, #1
    a44e:	e000      	b.n	a452 <_spi_m_sync_init+0xca>
    a450:	2202      	movs	r2, #2
    a452:	687b      	ldr	r3, [r7, #4]
    a454:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    a456:	68fb      	ldr	r3, [r7, #12]
    a458:	89db      	ldrh	r3, [r3, #14]
    a45a:	b29a      	uxth	r2, r3
    a45c:	687b      	ldr	r3, [r7, #4]
    a45e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    a460:	2300      	movs	r3, #0
}
    a462:	4618      	mov	r0, r3
    a464:	3710      	adds	r7, #16
    a466:	46bd      	mov	sp, r7
    a468:	bd80      	pop	{r7, pc}
    a46a:	bf00      	nop
    a46c:	0000a135 	.word	0x0000a135
    a470:	0001ad54 	.word	0x0001ad54
    a474:	000062c5 	.word	0x000062c5
    a478:	00008eb5 	.word	0x00008eb5
    a47c:	00009251 	.word	0x00009251
    a480:	00009229 	.word	0x00009229
    a484:	00008e91 	.word	0x00008e91
    a488:	00009281 	.word	0x00009281
    a48c:	0000a089 	.word	0x0000a089
    a490:	00009ff5 	.word	0x00009ff5

0000a494 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    a494:	b580      	push	{r7, lr}
    a496:	b086      	sub	sp, #24
    a498:	af00      	add	r7, sp, #0
    a49a:	6078      	str	r0, [r7, #4]
    a49c:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    a4a2:	6839      	ldr	r1, [r7, #0]
    a4a4:	6878      	ldr	r0, [r7, #4]
    a4a6:	4b1a      	ldr	r3, [pc, #104]	; (a510 <_spi_m_async_init+0x7c>)
    a4a8:	4798      	blx	r3
    a4aa:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    a4ac:	68bb      	ldr	r3, [r7, #8]
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	da01      	bge.n	a4b6 <_spi_m_async_init+0x22>
		return rc;
    a4b2:	68bb      	ldr	r3, [r7, #8]
    a4b4:	e028      	b.n	a508 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    a4b6:	6879      	ldr	r1, [r7, #4]
    a4b8:	6838      	ldr	r0, [r7, #0]
    a4ba:	4b16      	ldr	r3, [pc, #88]	; (a514 <_spi_m_async_init+0x80>)
    a4bc:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    a4be:	68fb      	ldr	r3, [r7, #12]
    a4c0:	2200      	movs	r2, #0
    a4c2:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    a4c4:	68fb      	ldr	r3, [r7, #12]
    a4c6:	2200      	movs	r2, #0
    a4c8:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    a4ca:	68fb      	ldr	r3, [r7, #12]
    a4cc:	2200      	movs	r2, #0
    a4ce:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    a4d0:	6838      	ldr	r0, [r7, #0]
    a4d2:	4b11      	ldr	r3, [pc, #68]	; (a518 <_spi_m_async_init+0x84>)
    a4d4:	4798      	blx	r3
    a4d6:	4603      	mov	r3, r0
    a4d8:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a4da:	2300      	movs	r3, #0
    a4dc:	613b      	str	r3, [r7, #16]
    a4de:	e00f      	b.n	a500 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    a4e0:	7dfb      	ldrb	r3, [r7, #23]
    a4e2:	b21b      	sxth	r3, r3
    a4e4:	4618      	mov	r0, r3
    a4e6:	4b0d      	ldr	r3, [pc, #52]	; (a51c <_spi_m_async_init+0x88>)
    a4e8:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    a4ea:	7dfb      	ldrb	r3, [r7, #23]
    a4ec:	b21b      	sxth	r3, r3
    a4ee:	4618      	mov	r0, r3
    a4f0:	4b0b      	ldr	r3, [pc, #44]	; (a520 <_spi_m_async_init+0x8c>)
    a4f2:	4798      	blx	r3
		irq++;
    a4f4:	7dfb      	ldrb	r3, [r7, #23]
    a4f6:	3301      	adds	r3, #1
    a4f8:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a4fa:	693b      	ldr	r3, [r7, #16]
    a4fc:	3301      	adds	r3, #1
    a4fe:	613b      	str	r3, [r7, #16]
    a500:	693b      	ldr	r3, [r7, #16]
    a502:	2b03      	cmp	r3, #3
    a504:	d9ec      	bls.n	a4e0 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    a506:	2300      	movs	r3, #0
}
    a508:	4618      	mov	r0, r3
    a50a:	3718      	adds	r7, #24
    a50c:	46bd      	mov	sp, r7
    a50e:	bd80      	pop	{r7, pc}
    a510:	0000a389 	.word	0x0000a389
    a514:	00009625 	.word	0x00009625
    a518:	00009a71 	.word	0x00009a71
    a51c:	00008dc5 	.word	0x00008dc5
    a520:	00008e09 	.word	0x00008e09

0000a524 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    a524:	b580      	push	{r7, lr}
    a526:	b082      	sub	sp, #8
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a52c:	687b      	ldr	r3, [r7, #4]
    a52e:	2b00      	cmp	r3, #0
    a530:	d005      	beq.n	a53e <_spi_m_sync_enable+0x1a>
    a532:	687b      	ldr	r3, [r7, #4]
    a534:	681b      	ldr	r3, [r3, #0]
    a536:	2b00      	cmp	r3, #0
    a538:	d001      	beq.n	a53e <_spi_m_sync_enable+0x1a>
    a53a:	2301      	movs	r3, #1
    a53c:	e000      	b.n	a540 <_spi_m_sync_enable+0x1c>
    a53e:	2300      	movs	r3, #0
    a540:	f003 0301 	and.w	r3, r3, #1
    a544:	b2db      	uxtb	r3, r3
    a546:	f640 2248 	movw	r2, #2632	; 0xa48
    a54a:	4907      	ldr	r1, [pc, #28]	; (a568 <_spi_m_sync_enable+0x44>)
    a54c:	4618      	mov	r0, r3
    a54e:	4b07      	ldr	r3, [pc, #28]	; (a56c <_spi_m_sync_enable+0x48>)
    a550:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	681b      	ldr	r3, [r3, #0]
    a556:	4618      	mov	r0, r3
    a558:	4b05      	ldr	r3, [pc, #20]	; (a570 <_spi_m_sync_enable+0x4c>)
    a55a:	4798      	blx	r3
    a55c:	4603      	mov	r3, r0
}
    a55e:	4618      	mov	r0, r3
    a560:	3708      	adds	r7, #8
    a562:	46bd      	mov	sp, r7
    a564:	bd80      	pop	{r7, pc}
    a566:	bf00      	nop
    a568:	0001ad54 	.word	0x0001ad54
    a56c:	000062c5 	.word	0x000062c5
    a570:	00009f8d 	.word	0x00009f8d

0000a574 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    a574:	b580      	push	{r7, lr}
    a576:	b082      	sub	sp, #8
    a578:	af00      	add	r7, sp, #0
    a57a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a57c:	687b      	ldr	r3, [r7, #4]
    a57e:	2b00      	cmp	r3, #0
    a580:	d005      	beq.n	a58e <_spi_m_sync_disable+0x1a>
    a582:	687b      	ldr	r3, [r7, #4]
    a584:	681b      	ldr	r3, [r3, #0]
    a586:	2b00      	cmp	r3, #0
    a588:	d001      	beq.n	a58e <_spi_m_sync_disable+0x1a>
    a58a:	2301      	movs	r3, #1
    a58c:	e000      	b.n	a590 <_spi_m_sync_disable+0x1c>
    a58e:	2300      	movs	r3, #0
    a590:	f003 0301 	and.w	r3, r3, #1
    a594:	b2db      	uxtb	r3, r3
    a596:	f640 2264 	movw	r2, #2660	; 0xa64
    a59a:	4907      	ldr	r1, [pc, #28]	; (a5b8 <_spi_m_sync_disable+0x44>)
    a59c:	4618      	mov	r0, r3
    a59e:	4b07      	ldr	r3, [pc, #28]	; (a5bc <_spi_m_sync_disable+0x48>)
    a5a0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    a5a2:	687b      	ldr	r3, [r7, #4]
    a5a4:	681b      	ldr	r3, [r3, #0]
    a5a6:	4618      	mov	r0, r3
    a5a8:	4b05      	ldr	r3, [pc, #20]	; (a5c0 <_spi_m_sync_disable+0x4c>)
    a5aa:	4798      	blx	r3
    a5ac:	4603      	mov	r3, r0
}
    a5ae:	4618      	mov	r0, r3
    a5b0:	3708      	adds	r7, #8
    a5b2:	46bd      	mov	sp, r7
    a5b4:	bd80      	pop	{r7, pc}
    a5b6:	bf00      	nop
    a5b8:	0001ad54 	.word	0x0001ad54
    a5bc:	000062c5 	.word	0x000062c5
    a5c0:	00009fc1 	.word	0x00009fc1

0000a5c4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    a5c4:	b580      	push	{r7, lr}
    a5c6:	b082      	sub	sp, #8
    a5c8:	af00      	add	r7, sp, #0
    a5ca:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    a5cc:	bf00      	nop
    a5ce:	2103      	movs	r1, #3
    a5d0:	6878      	ldr	r0, [r7, #4]
    a5d2:	4b06      	ldr	r3, [pc, #24]	; (a5ec <_spi_wait_bus_idle+0x28>)
    a5d4:	4798      	blx	r3
    a5d6:	4603      	mov	r3, r0
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d0f8      	beq.n	a5ce <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    a5dc:	2103      	movs	r1, #3
    a5de:	6878      	ldr	r0, [r7, #4]
    a5e0:	4b03      	ldr	r3, [pc, #12]	; (a5f0 <_spi_wait_bus_idle+0x2c>)
    a5e2:	4798      	blx	r3
}
    a5e4:	bf00      	nop
    a5e6:	3708      	adds	r7, #8
    a5e8:	46bd      	mov	sp, r7
    a5ea:	bd80      	pop	{r7, pc}
    a5ec:	00008f49 	.word	0x00008f49
    a5f0:	00008f8b 	.word	0x00008f8b

0000a5f4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b086      	sub	sp, #24
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	60f8      	str	r0, [r7, #12]
    a5fc:	60b9      	str	r1, [r7, #8]
    a5fe:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    a600:	68bb      	ldr	r3, [r7, #8]
    a602:	f003 0304 	and.w	r3, r3, #4
    a606:	2b00      	cmp	r3, #0
    a608:	d101      	bne.n	a60e <_spi_rx_check_and_receive+0x1a>
		return false;
    a60a:	2300      	movs	r3, #0
    a60c:	e022      	b.n	a654 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    a60e:	68f8      	ldr	r0, [r7, #12]
    a610:	4b12      	ldr	r3, [pc, #72]	; (a65c <_spi_rx_check_and_receive+0x68>)
    a612:	4798      	blx	r3
    a614:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    a616:	687b      	ldr	r3, [r7, #4]
    a618:	685b      	ldr	r3, [r3, #4]
    a61a:	2b00      	cmp	r3, #0
    a61c:	d014      	beq.n	a648 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    a61e:	687b      	ldr	r3, [r7, #4]
    a620:	685b      	ldr	r3, [r3, #4]
    a622:	1c59      	adds	r1, r3, #1
    a624:	687a      	ldr	r2, [r7, #4]
    a626:	6051      	str	r1, [r2, #4]
    a628:	697a      	ldr	r2, [r7, #20]
    a62a:	b2d2      	uxtb	r2, r2
    a62c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    a62e:	687b      	ldr	r3, [r7, #4]
    a630:	7c1b      	ldrb	r3, [r3, #16]
    a632:	2b01      	cmp	r3, #1
    a634:	d908      	bls.n	a648 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	685b      	ldr	r3, [r3, #4]
    a63a:	1c59      	adds	r1, r3, #1
    a63c:	687a      	ldr	r2, [r7, #4]
    a63e:	6051      	str	r1, [r2, #4]
    a640:	697a      	ldr	r2, [r7, #20]
    a642:	0a12      	lsrs	r2, r2, #8
    a644:	b2d2      	uxtb	r2, r2
    a646:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    a648:	687b      	ldr	r3, [r7, #4]
    a64a:	68db      	ldr	r3, [r3, #12]
    a64c:	1c5a      	adds	r2, r3, #1
    a64e:	687b      	ldr	r3, [r7, #4]
    a650:	60da      	str	r2, [r3, #12]

	return true;
    a652:	2301      	movs	r3, #1
}
    a654:	4618      	mov	r0, r3
    a656:	3718      	adds	r7, #24
    a658:	46bd      	mov	sp, r7
    a65a:	bd80      	pop	{r7, pc}
    a65c:	000094f9 	.word	0x000094f9

0000a660 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    a660:	b580      	push	{r7, lr}
    a662:	b086      	sub	sp, #24
    a664:	af00      	add	r7, sp, #0
    a666:	60f8      	str	r0, [r7, #12]
    a668:	60b9      	str	r1, [r7, #8]
    a66a:	607a      	str	r2, [r7, #4]
    a66c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a66e:	68bb      	ldr	r3, [r7, #8]
    a670:	f003 0301 	and.w	r3, r3, #1
    a674:	2b00      	cmp	r3, #0
    a676:	d028      	beq.n	a6ca <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    a678:	687b      	ldr	r3, [r7, #4]
    a67a:	681b      	ldr	r3, [r3, #0]
    a67c:	2b00      	cmp	r3, #0
    a67e:	d018      	beq.n	a6b2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	681b      	ldr	r3, [r3, #0]
    a684:	1c59      	adds	r1, r3, #1
    a686:	687a      	ldr	r2, [r7, #4]
    a688:	6011      	str	r1, [r2, #0]
    a68a:	781b      	ldrb	r3, [r3, #0]
    a68c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    a68e:	687b      	ldr	r3, [r7, #4]
    a690:	7c1b      	ldrb	r3, [r3, #16]
    a692:	2b01      	cmp	r3, #1
    a694:	d90f      	bls.n	a6b6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    a696:	687b      	ldr	r3, [r7, #4]
    a698:	681b      	ldr	r3, [r3, #0]
    a69a:	781b      	ldrb	r3, [r3, #0]
    a69c:	021b      	lsls	r3, r3, #8
    a69e:	461a      	mov	r2, r3
    a6a0:	697b      	ldr	r3, [r7, #20]
    a6a2:	4313      	orrs	r3, r2
    a6a4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	681b      	ldr	r3, [r3, #0]
    a6aa:	1c5a      	adds	r2, r3, #1
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	601a      	str	r2, [r3, #0]
    a6b0:	e001      	b.n	a6b6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    a6b2:	887b      	ldrh	r3, [r7, #2]
    a6b4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	689b      	ldr	r3, [r3, #8]
    a6ba:	1c5a      	adds	r2, r3, #1
    a6bc:	687b      	ldr	r3, [r7, #4]
    a6be:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    a6c0:	6979      	ldr	r1, [r7, #20]
    a6c2:	68f8      	ldr	r0, [r7, #12]
    a6c4:	4b03      	ldr	r3, [pc, #12]	; (a6d4 <_spi_tx_check_and_send+0x74>)
    a6c6:	4798      	blx	r3
    a6c8:	e000      	b.n	a6cc <_spi_tx_check_and_send+0x6c>
		return;
    a6ca:	bf00      	nop
}
    a6cc:	3718      	adds	r7, #24
    a6ce:	46bd      	mov	sp, r7
    a6d0:	bd80      	pop	{r7, pc}
    a6d2:	bf00      	nop
    a6d4:	000094dd 	.word	0x000094dd

0000a6d8 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    a6d8:	b580      	push	{r7, lr}
    a6da:	b082      	sub	sp, #8
    a6dc:	af00      	add	r7, sp, #0
    a6de:	6078      	str	r0, [r7, #4]
    a6e0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    a6e2:	687b      	ldr	r3, [r7, #4]
    a6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d00b      	beq.n	a704 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    a6ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a6f0:	6838      	ldr	r0, [r7, #0]
    a6f2:	4b07      	ldr	r3, [pc, #28]	; (a710 <_spi_err_check+0x38>)
    a6f4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a6f6:	2180      	movs	r1, #128	; 0x80
    a6f8:	6838      	ldr	r0, [r7, #0]
    a6fa:	4b06      	ldr	r3, [pc, #24]	; (a714 <_spi_err_check+0x3c>)
    a6fc:	4798      	blx	r3
		return ERR_OVERFLOW;
    a6fe:	f06f 0312 	mvn.w	r3, #18
    a702:	e000      	b.n	a706 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    a704:	2300      	movs	r3, #0
}
    a706:	4618      	mov	r0, r3
    a708:	3708      	adds	r7, #8
    a70a:	46bd      	mov	sp, r7
    a70c:	bd80      	pop	{r7, pc}
    a70e:	bf00      	nop
    a710:	00009531 	.word	0x00009531
    a714:	00008f8b 	.word	0x00008f8b

0000a718 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    a718:	b590      	push	{r4, r7, lr}
    a71a:	b08b      	sub	sp, #44	; 0x2c
    a71c:	af00      	add	r7, sp, #0
    a71e:	6078      	str	r0, [r7, #4]
    a720:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	681b      	ldr	r3, [r3, #0]
    a726:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    a728:	2300      	movs	r3, #0
    a72a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    a72c:	683b      	ldr	r3, [r7, #0]
    a72e:	681b      	ldr	r3, [r3, #0]
    a730:	60bb      	str	r3, [r7, #8]
    a732:	683b      	ldr	r3, [r7, #0]
    a734:	685b      	ldr	r3, [r3, #4]
    a736:	60fb      	str	r3, [r7, #12]
    a738:	2300      	movs	r3, #0
    a73a:	613b      	str	r3, [r7, #16]
    a73c:	2300      	movs	r3, #0
    a73e:	617b      	str	r3, [r7, #20]
    a740:	687b      	ldr	r3, [r7, #4]
    a742:	791b      	ldrb	r3, [r3, #4]
    a744:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    a746:	687b      	ldr	r3, [r7, #4]
    a748:	2b00      	cmp	r3, #0
    a74a:	d004      	beq.n	a756 <_spi_m_sync_trans+0x3e>
    a74c:	6a3b      	ldr	r3, [r7, #32]
    a74e:	2b00      	cmp	r3, #0
    a750:	d001      	beq.n	a756 <_spi_m_sync_trans+0x3e>
    a752:	2301      	movs	r3, #1
    a754:	e000      	b.n	a758 <_spi_m_sync_trans+0x40>
    a756:	2300      	movs	r3, #0
    a758:	f003 0301 	and.w	r3, r3, #1
    a75c:	b2db      	uxtb	r3, r3
    a75e:	f640 324d 	movw	r2, #2893	; 0xb4d
    a762:	492b      	ldr	r1, [pc, #172]	; (a810 <_spi_m_sync_trans+0xf8>)
    a764:	4618      	mov	r0, r3
    a766:	4b2b      	ldr	r3, [pc, #172]	; (a814 <_spi_m_sync_trans+0xfc>)
    a768:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    a76a:	2107      	movs	r1, #7
    a76c:	6a38      	ldr	r0, [r7, #32]
    a76e:	4b2a      	ldr	r3, [pc, #168]	; (a818 <_spi_m_sync_trans+0x100>)
    a770:	4798      	blx	r3
    a772:	4603      	mov	r3, r0
    a774:	2b00      	cmp	r3, #0
    a776:	d002      	beq.n	a77e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    a778:	f06f 0303 	mvn.w	r3, #3
    a77c:	e043      	b.n	a806 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    a77e:	6a38      	ldr	r0, [r7, #32]
    a780:	4b26      	ldr	r3, [pc, #152]	; (a81c <_spi_m_sync_trans+0x104>)
    a782:	4798      	blx	r3
    a784:	4603      	mov	r3, r0
    a786:	f083 0301 	eor.w	r3, r3, #1
    a78a:	b2db      	uxtb	r3, r3
    a78c:	2b00      	cmp	r3, #0
    a78e:	d002      	beq.n	a796 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    a790:	f06f 0313 	mvn.w	r3, #19
    a794:	e037      	b.n	a806 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    a796:	6a38      	ldr	r0, [r7, #32]
    a798:	4b21      	ldr	r3, [pc, #132]	; (a820 <_spi_m_sync_trans+0x108>)
    a79a:	4798      	blx	r3
    a79c:	4603      	mov	r3, r0
    a79e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    a7a0:	f107 0308 	add.w	r3, r7, #8
    a7a4:	461a      	mov	r2, r3
    a7a6:	69f9      	ldr	r1, [r7, #28]
    a7a8:	6a38      	ldr	r0, [r7, #32]
    a7aa:	4b1e      	ldr	r3, [pc, #120]	; (a824 <_spi_m_sync_trans+0x10c>)
    a7ac:	4798      	blx	r3
    a7ae:	4603      	mov	r3, r0
    a7b0:	f083 0301 	eor.w	r3, r3, #1
    a7b4:	b2db      	uxtb	r3, r3
    a7b6:	2b00      	cmp	r3, #0
    a7b8:	d00b      	beq.n	a7d2 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    a7ba:	697a      	ldr	r2, [r7, #20]
    a7bc:	693b      	ldr	r3, [r7, #16]
    a7be:	429a      	cmp	r2, r3
    a7c0:	d307      	bcc.n	a7d2 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    a7c2:	687b      	ldr	r3, [r7, #4]
    a7c4:	88db      	ldrh	r3, [r3, #6]
    a7c6:	f107 0208 	add.w	r2, r7, #8
    a7ca:	69f9      	ldr	r1, [r7, #28]
    a7cc:	6a38      	ldr	r0, [r7, #32]
    a7ce:	4c16      	ldr	r4, [pc, #88]	; (a828 <_spi_m_sync_trans+0x110>)
    a7d0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    a7d2:	6a39      	ldr	r1, [r7, #32]
    a7d4:	69f8      	ldr	r0, [r7, #28]
    a7d6:	4b15      	ldr	r3, [pc, #84]	; (a82c <_spi_m_sync_trans+0x114>)
    a7d8:	4798      	blx	r3
    a7da:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a7de:	2b00      	cmp	r3, #0
    a7e0:	db0c      	blt.n	a7fc <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    a7e2:	693a      	ldr	r2, [r7, #16]
    a7e4:	683b      	ldr	r3, [r7, #0]
    a7e6:	689b      	ldr	r3, [r3, #8]
    a7e8:	429a      	cmp	r2, r3
    a7ea:	d3d4      	bcc.n	a796 <_spi_m_sync_trans+0x7e>
    a7ec:	697a      	ldr	r2, [r7, #20]
    a7ee:	683b      	ldr	r3, [r7, #0]
    a7f0:	689b      	ldr	r3, [r3, #8]
    a7f2:	429a      	cmp	r2, r3
    a7f4:	d3cf      	bcc.n	a796 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    a7f6:	693b      	ldr	r3, [r7, #16]
    a7f8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    a7fa:	e000      	b.n	a7fe <_spi_m_sync_trans+0xe6>
			break;
    a7fc:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    a7fe:	6a38      	ldr	r0, [r7, #32]
    a800:	4b0b      	ldr	r3, [pc, #44]	; (a830 <_spi_m_sync_trans+0x118>)
    a802:	4798      	blx	r3

	return rc;
    a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a806:	4618      	mov	r0, r3
    a808:	372c      	adds	r7, #44	; 0x2c
    a80a:	46bd      	mov	sp, r7
    a80c:	bd90      	pop	{r4, r7, pc}
    a80e:	bf00      	nop
    a810:	0001ad54 	.word	0x0001ad54
    a814:	000062c5 	.word	0x000062c5
    a818:	00008eb5 	.word	0x00008eb5
    a81c:	000091f1 	.word	0x000091f1
    a820:	00008f71 	.word	0x00008f71
    a824:	0000a5f5 	.word	0x0000a5f5
    a828:	0000a661 	.word	0x0000a661
    a82c:	0000a6d9 	.word	0x0000a6d9
    a830:	0000a5c5 	.word	0x0000a5c5

0000a834 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    a834:	b580      	push	{r7, lr}
    a836:	b084      	sub	sp, #16
    a838:	af00      	add	r7, sp, #0
    a83a:	6078      	str	r0, [r7, #4]
    a83c:	460b      	mov	r3, r1
    a83e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a840:	687b      	ldr	r3, [r7, #4]
    a842:	681b      	ldr	r3, [r3, #0]
    a844:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    a846:	687b      	ldr	r3, [r7, #4]
    a848:	2b00      	cmp	r3, #0
    a84a:	d004      	beq.n	a856 <_spi_m_async_enable_tx+0x22>
    a84c:	68fb      	ldr	r3, [r7, #12]
    a84e:	2b00      	cmp	r3, #0
    a850:	d001      	beq.n	a856 <_spi_m_async_enable_tx+0x22>
    a852:	2301      	movs	r3, #1
    a854:	e000      	b.n	a858 <_spi_m_async_enable_tx+0x24>
    a856:	2300      	movs	r3, #0
    a858:	f003 0301 	and.w	r3, r3, #1
    a85c:	b2db      	uxtb	r3, r3
    a85e:	f640 3279 	movw	r2, #2937	; 0xb79
    a862:	4909      	ldr	r1, [pc, #36]	; (a888 <_spi_m_async_enable_tx+0x54>)
    a864:	4618      	mov	r0, r3
    a866:	4b09      	ldr	r3, [pc, #36]	; (a88c <_spi_m_async_enable_tx+0x58>)
    a868:	4798      	blx	r3

	if (state) {
    a86a:	78fb      	ldrb	r3, [r7, #3]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d003      	beq.n	a878 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    a870:	68f8      	ldr	r0, [r7, #12]
    a872:	4b07      	ldr	r3, [pc, #28]	; (a890 <_spi_m_async_enable_tx+0x5c>)
    a874:	4798      	blx	r3
    a876:	e002      	b.n	a87e <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    a878:	68f8      	ldr	r0, [r7, #12]
    a87a:	4b06      	ldr	r3, [pc, #24]	; (a894 <_spi_m_async_enable_tx+0x60>)
    a87c:	4798      	blx	r3
	}

	return ERR_NONE;
    a87e:	2300      	movs	r3, #0
}
    a880:	4618      	mov	r0, r3
    a882:	3710      	adds	r7, #16
    a884:	46bd      	mov	sp, r7
    a886:	bd80      	pop	{r7, pc}
    a888:	0001ad54 	.word	0x0001ad54
    a88c:	000062c5 	.word	0x000062c5
    a890:	0000903f 	.word	0x0000903f
    a894:	00009059 	.word	0x00009059

0000a898 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    a898:	b580      	push	{r7, lr}
    a89a:	b084      	sub	sp, #16
    a89c:	af00      	add	r7, sp, #0
    a89e:	6078      	str	r0, [r7, #4]
    a8a0:	460b      	mov	r3, r1
    a8a2:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a8a4:	687b      	ldr	r3, [r7, #4]
    a8a6:	681b      	ldr	r3, [r3, #0]
    a8a8:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    a8aa:	687b      	ldr	r3, [r7, #4]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	bf14      	ite	ne
    a8b0:	2301      	movne	r3, #1
    a8b2:	2300      	moveq	r3, #0
    a8b4:	b2db      	uxtb	r3, r3
    a8b6:	f640 328d 	movw	r2, #2957	; 0xb8d
    a8ba:	490f      	ldr	r1, [pc, #60]	; (a8f8 <_spi_m_async_enable_rx+0x60>)
    a8bc:	4618      	mov	r0, r3
    a8be:	4b0f      	ldr	r3, [pc, #60]	; (a8fc <_spi_m_async_enable_rx+0x64>)
    a8c0:	4798      	blx	r3
	ASSERT(hw);
    a8c2:	68fb      	ldr	r3, [r7, #12]
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	bf14      	ite	ne
    a8c8:	2301      	movne	r3, #1
    a8ca:	2300      	moveq	r3, #0
    a8cc:	b2db      	uxtb	r3, r3
    a8ce:	f640 328e 	movw	r2, #2958	; 0xb8e
    a8d2:	4909      	ldr	r1, [pc, #36]	; (a8f8 <_spi_m_async_enable_rx+0x60>)
    a8d4:	4618      	mov	r0, r3
    a8d6:	4b09      	ldr	r3, [pc, #36]	; (a8fc <_spi_m_async_enable_rx+0x64>)
    a8d8:	4798      	blx	r3

	if (state) {
    a8da:	78fb      	ldrb	r3, [r7, #3]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d003      	beq.n	a8e8 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    a8e0:	68f8      	ldr	r0, [r7, #12]
    a8e2:	4b07      	ldr	r3, [pc, #28]	; (a900 <_spi_m_async_enable_rx+0x68>)
    a8e4:	4798      	blx	r3
    a8e6:	e002      	b.n	a8ee <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    a8e8:	68f8      	ldr	r0, [r7, #12]
    a8ea:	4b06      	ldr	r3, [pc, #24]	; (a904 <_spi_m_async_enable_rx+0x6c>)
    a8ec:	4798      	blx	r3
	}

	return ERR_NONE;
    a8ee:	2300      	movs	r3, #0
}
    a8f0:	4618      	mov	r0, r3
    a8f2:	3710      	adds	r7, #16
    a8f4:	46bd      	mov	sp, r7
    a8f6:	bd80      	pop	{r7, pc}
    a8f8:	0001ad54 	.word	0x0001ad54
    a8fc:	000062c5 	.word	0x000062c5
    a900:	000090a7 	.word	0x000090a7
    a904:	000090c1 	.word	0x000090c1

0000a908 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    a908:	b580      	push	{r7, lr}
    a90a:	b082      	sub	sp, #8
    a90c:	af00      	add	r7, sp, #0
    a90e:	6078      	str	r0, [r7, #4]
    a910:	460b      	mov	r3, r1
    a912:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    a914:	687b      	ldr	r3, [r7, #4]
    a916:	2b00      	cmp	r3, #0
    a918:	d005      	beq.n	a926 <_spi_m_async_enable_tx_complete+0x1e>
    a91a:	687b      	ldr	r3, [r7, #4]
    a91c:	681b      	ldr	r3, [r3, #0]
    a91e:	2b00      	cmp	r3, #0
    a920:	d001      	beq.n	a926 <_spi_m_async_enable_tx_complete+0x1e>
    a922:	2301      	movs	r3, #1
    a924:	e000      	b.n	a928 <_spi_m_async_enable_tx_complete+0x20>
    a926:	2300      	movs	r3, #0
    a928:	f003 0301 	and.w	r3, r3, #1
    a92c:	b2db      	uxtb	r3, r3
    a92e:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    a932:	490b      	ldr	r1, [pc, #44]	; (a960 <_spi_m_async_enable_tx_complete+0x58>)
    a934:	4618      	mov	r0, r3
    a936:	4b0b      	ldr	r3, [pc, #44]	; (a964 <_spi_m_async_enable_tx_complete+0x5c>)
    a938:	4798      	blx	r3

	if (state) {
    a93a:	78fb      	ldrb	r3, [r7, #3]
    a93c:	2b00      	cmp	r3, #0
    a93e:	d005      	beq.n	a94c <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    a940:	687b      	ldr	r3, [r7, #4]
    a942:	681b      	ldr	r3, [r3, #0]
    a944:	4618      	mov	r0, r3
    a946:	4b08      	ldr	r3, [pc, #32]	; (a968 <_spi_m_async_enable_tx_complete+0x60>)
    a948:	4798      	blx	r3
    a94a:	e004      	b.n	a956 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    a94c:	687b      	ldr	r3, [r7, #4]
    a94e:	681b      	ldr	r3, [r3, #0]
    a950:	4618      	mov	r0, r3
    a952:	4b06      	ldr	r3, [pc, #24]	; (a96c <_spi_m_async_enable_tx_complete+0x64>)
    a954:	4798      	blx	r3
	}

	return ERR_NONE;
    a956:	2300      	movs	r3, #0
}
    a958:	4618      	mov	r0, r3
    a95a:	3708      	adds	r7, #8
    a95c:	46bd      	mov	sp, r7
    a95e:	bd80      	pop	{r7, pc}
    a960:	0001ad54 	.word	0x0001ad54
    a964:	000062c5 	.word	0x000062c5
    a968:	00009073 	.word	0x00009073
    a96c:	0000908d 	.word	0x0000908d

0000a970 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    a970:	b580      	push	{r7, lr}
    a972:	b082      	sub	sp, #8
    a974:	af00      	add	r7, sp, #0
    a976:	6078      	str	r0, [r7, #4]
    a978:	460b      	mov	r3, r1
    a97a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    a97c:	687b      	ldr	r3, [r7, #4]
    a97e:	2b00      	cmp	r3, #0
    a980:	d005      	beq.n	a98e <_spi_m_async_write_one+0x1e>
    a982:	687b      	ldr	r3, [r7, #4]
    a984:	681b      	ldr	r3, [r3, #0]
    a986:	2b00      	cmp	r3, #0
    a988:	d001      	beq.n	a98e <_spi_m_async_write_one+0x1e>
    a98a:	2301      	movs	r3, #1
    a98c:	e000      	b.n	a990 <_spi_m_async_write_one+0x20>
    a98e:	2300      	movs	r3, #0
    a990:	f003 0301 	and.w	r3, r3, #1
    a994:	b2db      	uxtb	r3, r3
    a996:	f640 32b2 	movw	r2, #2994	; 0xbb2
    a99a:	4908      	ldr	r1, [pc, #32]	; (a9bc <_spi_m_async_write_one+0x4c>)
    a99c:	4618      	mov	r0, r3
    a99e:	4b08      	ldr	r3, [pc, #32]	; (a9c0 <_spi_m_async_write_one+0x50>)
    a9a0:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	681b      	ldr	r3, [r3, #0]
    a9a6:	887a      	ldrh	r2, [r7, #2]
    a9a8:	4611      	mov	r1, r2
    a9aa:	4618      	mov	r0, r3
    a9ac:	4b05      	ldr	r3, [pc, #20]	; (a9c4 <_spi_m_async_write_one+0x54>)
    a9ae:	4798      	blx	r3

	return ERR_NONE;
    a9b0:	2300      	movs	r3, #0
}
    a9b2:	4618      	mov	r0, r3
    a9b4:	3708      	adds	r7, #8
    a9b6:	46bd      	mov	sp, r7
    a9b8:	bd80      	pop	{r7, pc}
    a9ba:	bf00      	nop
    a9bc:	0001ad54 	.word	0x0001ad54
    a9c0:	000062c5 	.word	0x000062c5
    a9c4:	000094dd 	.word	0x000094dd

0000a9c8 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    a9c8:	b580      	push	{r7, lr}
    a9ca:	b082      	sub	sp, #8
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d005      	beq.n	a9e2 <_spi_m_async_read_one+0x1a>
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	681b      	ldr	r3, [r3, #0]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	d001      	beq.n	a9e2 <_spi_m_async_read_one+0x1a>
    a9de:	2301      	movs	r3, #1
    a9e0:	e000      	b.n	a9e4 <_spi_m_async_read_one+0x1c>
    a9e2:	2300      	movs	r3, #0
    a9e4:	f003 0301 	and.w	r3, r3, #1
    a9e8:	b2db      	uxtb	r3, r3
    a9ea:	f640 32cd 	movw	r2, #3021	; 0xbcd
    a9ee:	4907      	ldr	r1, [pc, #28]	; (aa0c <_spi_m_async_read_one+0x44>)
    a9f0:	4618      	mov	r0, r3
    a9f2:	4b07      	ldr	r3, [pc, #28]	; (aa10 <_spi_m_async_read_one+0x48>)
    a9f4:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    a9f6:	687b      	ldr	r3, [r7, #4]
    a9f8:	681b      	ldr	r3, [r3, #0]
    a9fa:	4618      	mov	r0, r3
    a9fc:	4b05      	ldr	r3, [pc, #20]	; (aa14 <_spi_m_async_read_one+0x4c>)
    a9fe:	4798      	blx	r3
    aa00:	4603      	mov	r3, r0
    aa02:	b29b      	uxth	r3, r3
}
    aa04:	4618      	mov	r0, r3
    aa06:	3708      	adds	r7, #8
    aa08:	46bd      	mov	sp, r7
    aa0a:	bd80      	pop	{r7, pc}
    aa0c:	0001ad54 	.word	0x0001ad54
    aa10:	000062c5 	.word	0x000062c5
    aa14:	000094f9 	.word	0x000094f9

0000aa18 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    aa18:	b580      	push	{r7, lr}
    aa1a:	b086      	sub	sp, #24
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	60f8      	str	r0, [r7, #12]
    aa20:	460b      	mov	r3, r1
    aa22:	607a      	str	r2, [r7, #4]
    aa24:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    aa26:	68fb      	ldr	r3, [r7, #12]
    aa28:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    aa2a:	68fb      	ldr	r3, [r7, #12]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d004      	beq.n	aa3a <_spi_m_async_register_callback+0x22>
    aa30:	7afb      	ldrb	r3, [r7, #11]
    aa32:	2b03      	cmp	r3, #3
    aa34:	d801      	bhi.n	aa3a <_spi_m_async_register_callback+0x22>
    aa36:	2301      	movs	r3, #1
    aa38:	e000      	b.n	aa3c <_spi_m_async_register_callback+0x24>
    aa3a:	2300      	movs	r3, #0
    aa3c:	f003 0301 	and.w	r3, r3, #1
    aa40:	b2db      	uxtb	r3, r3
    aa42:	f640 32e6 	movw	r2, #3046	; 0xbe6
    aa46:	4909      	ldr	r1, [pc, #36]	; (aa6c <_spi_m_async_register_callback+0x54>)
    aa48:	4618      	mov	r0, r3
    aa4a:	4b09      	ldr	r3, [pc, #36]	; (aa70 <_spi_m_async_register_callback+0x58>)
    aa4c:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    aa4e:	697b      	ldr	r3, [r7, #20]
    aa50:	3308      	adds	r3, #8
    aa52:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    aa54:	7afb      	ldrb	r3, [r7, #11]
    aa56:	009b      	lsls	r3, r3, #2
    aa58:	693a      	ldr	r2, [r7, #16]
    aa5a:	4413      	add	r3, r2
    aa5c:	687a      	ldr	r2, [r7, #4]
    aa5e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    aa60:	2300      	movs	r3, #0
}
    aa62:	4618      	mov	r0, r3
    aa64:	3718      	adds	r7, #24
    aa66:	46bd      	mov	sp, r7
    aa68:	bd80      	pop	{r7, pc}
    aa6a:	bf00      	nop
    aa6c:	0001ad54 	.word	0x0001ad54
    aa70:	000062c5 	.word	0x000062c5

0000aa74 <__NVIC_EnableIRQ>:
{
    aa74:	b480      	push	{r7}
    aa76:	b083      	sub	sp, #12
    aa78:	af00      	add	r7, sp, #0
    aa7a:	4603      	mov	r3, r0
    aa7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aa7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa82:	2b00      	cmp	r3, #0
    aa84:	db0b      	blt.n	aa9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa86:	4909      	ldr	r1, [pc, #36]	; (aaac <__NVIC_EnableIRQ+0x38>)
    aa88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa8c:	095b      	lsrs	r3, r3, #5
    aa8e:	88fa      	ldrh	r2, [r7, #6]
    aa90:	f002 021f 	and.w	r2, r2, #31
    aa94:	2001      	movs	r0, #1
    aa96:	fa00 f202 	lsl.w	r2, r0, r2
    aa9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa9e:	bf00      	nop
    aaa0:	370c      	adds	r7, #12
    aaa2:	46bd      	mov	sp, r7
    aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa8:	4770      	bx	lr
    aaaa:	bf00      	nop
    aaac:	e000e100 	.word	0xe000e100

0000aab0 <__NVIC_DisableIRQ>:
{
    aab0:	b480      	push	{r7}
    aab2:	b083      	sub	sp, #12
    aab4:	af00      	add	r7, sp, #0
    aab6:	4603      	mov	r3, r0
    aab8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aaba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aabe:	2b00      	cmp	r3, #0
    aac0:	db10      	blt.n	aae4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aac2:	490b      	ldr	r1, [pc, #44]	; (aaf0 <__NVIC_DisableIRQ+0x40>)
    aac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aac8:	095b      	lsrs	r3, r3, #5
    aaca:	88fa      	ldrh	r2, [r7, #6]
    aacc:	f002 021f 	and.w	r2, r2, #31
    aad0:	2001      	movs	r0, #1
    aad2:	fa00 f202 	lsl.w	r2, r0, r2
    aad6:	3320      	adds	r3, #32
    aad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    aadc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aae0:	f3bf 8f6f 	isb	sy
}
    aae4:	bf00      	nop
    aae6:	370c      	adds	r7, #12
    aae8:	46bd      	mov	sp, r7
    aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaee:	4770      	bx	lr
    aaf0:	e000e100 	.word	0xe000e100

0000aaf4 <__NVIC_ClearPendingIRQ>:
{
    aaf4:	b480      	push	{r7}
    aaf6:	b083      	sub	sp, #12
    aaf8:	af00      	add	r7, sp, #0
    aafa:	4603      	mov	r3, r0
    aafc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aafe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ab02:	2b00      	cmp	r3, #0
    ab04:	db0c      	blt.n	ab20 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ab06:	4909      	ldr	r1, [pc, #36]	; (ab2c <__NVIC_ClearPendingIRQ+0x38>)
    ab08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ab0c:	095b      	lsrs	r3, r3, #5
    ab0e:	88fa      	ldrh	r2, [r7, #6]
    ab10:	f002 021f 	and.w	r2, r2, #31
    ab14:	2001      	movs	r0, #1
    ab16:	fa00 f202 	lsl.w	r2, r0, r2
    ab1a:	3360      	adds	r3, #96	; 0x60
    ab1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab20:	bf00      	nop
    ab22:	370c      	adds	r7, #12
    ab24:	46bd      	mov	sp, r7
    ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab2a:	4770      	bx	lr
    ab2c:	e000e100 	.word	0xe000e100

0000ab30 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    ab30:	b480      	push	{r7}
    ab32:	b083      	sub	sp, #12
    ab34:	af00      	add	r7, sp, #0
    ab36:	6078      	str	r0, [r7, #4]
    ab38:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    ab3a:	bf00      	nop
    ab3c:	687b      	ldr	r3, [r7, #4]
    ab3e:	691a      	ldr	r2, [r3, #16]
    ab40:	683b      	ldr	r3, [r7, #0]
    ab42:	4013      	ands	r3, r2
    ab44:	2b00      	cmp	r3, #0
    ab46:	d1f9      	bne.n	ab3c <hri_tc_wait_for_sync+0xc>
	};
}
    ab48:	bf00      	nop
    ab4a:	370c      	adds	r7, #12
    ab4c:	46bd      	mov	sp, r7
    ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab52:	4770      	bx	lr

0000ab54 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    ab54:	b480      	push	{r7}
    ab56:	b083      	sub	sp, #12
    ab58:	af00      	add	r7, sp, #0
    ab5a:	6078      	str	r0, [r7, #4]
    ab5c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    ab5e:	687b      	ldr	r3, [r7, #4]
    ab60:	691a      	ldr	r2, [r3, #16]
    ab62:	683b      	ldr	r3, [r7, #0]
    ab64:	4013      	ands	r3, r2
    ab66:	2b00      	cmp	r3, #0
    ab68:	bf14      	ite	ne
    ab6a:	2301      	movne	r3, #1
    ab6c:	2300      	moveq	r3, #0
    ab6e:	b2db      	uxtb	r3, r3
}
    ab70:	4618      	mov	r0, r3
    ab72:	370c      	adds	r7, #12
    ab74:	46bd      	mov	sp, r7
    ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab7a:	4770      	bx	lr

0000ab7c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    ab7c:	b480      	push	{r7}
    ab7e:	b083      	sub	sp, #12
    ab80:	af00      	add	r7, sp, #0
    ab82:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    ab84:	687b      	ldr	r3, [r7, #4]
    ab86:	7a9b      	ldrb	r3, [r3, #10]
    ab88:	b2db      	uxtb	r3, r3
    ab8a:	f003 0301 	and.w	r3, r3, #1
    ab8e:	2b00      	cmp	r3, #0
    ab90:	bf14      	ite	ne
    ab92:	2301      	movne	r3, #1
    ab94:	2300      	moveq	r3, #0
    ab96:	b2db      	uxtb	r3, r3
}
    ab98:	4618      	mov	r0, r3
    ab9a:	370c      	adds	r7, #12
    ab9c:	46bd      	mov	sp, r7
    ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aba2:	4770      	bx	lr

0000aba4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    aba4:	b480      	push	{r7}
    aba6:	b083      	sub	sp, #12
    aba8:	af00      	add	r7, sp, #0
    abaa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	2201      	movs	r2, #1
    abb0:	729a      	strb	r2, [r3, #10]
}
    abb2:	bf00      	nop
    abb4:	370c      	adds	r7, #12
    abb6:	46bd      	mov	sp, r7
    abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    abbc:	4770      	bx	lr

0000abbe <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    abbe:	b480      	push	{r7}
    abc0:	b083      	sub	sp, #12
    abc2:	af00      	add	r7, sp, #0
    abc4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    abc6:	687b      	ldr	r3, [r7, #4]
    abc8:	2202      	movs	r2, #2
    abca:	729a      	strb	r2, [r3, #10]
}
    abcc:	bf00      	nop
    abce:	370c      	adds	r7, #12
    abd0:	46bd      	mov	sp, r7
    abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    abd6:	4770      	bx	lr

0000abd8 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    abd8:	b480      	push	{r7}
    abda:	b083      	sub	sp, #12
    abdc:	af00      	add	r7, sp, #0
    abde:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	2201      	movs	r2, #1
    abe4:	725a      	strb	r2, [r3, #9]
}
    abe6:	bf00      	nop
    abe8:	370c      	adds	r7, #12
    abea:	46bd      	mov	sp, r7
    abec:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf0:	4770      	bx	lr

0000abf2 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    abf2:	b480      	push	{r7}
    abf4:	b083      	sub	sp, #12
    abf6:	af00      	add	r7, sp, #0
    abf8:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    abfa:	687b      	ldr	r3, [r7, #4]
    abfc:	7a5b      	ldrb	r3, [r3, #9]
    abfe:	b2db      	uxtb	r3, r3
    ac00:	085b      	lsrs	r3, r3, #1
    ac02:	f003 0301 	and.w	r3, r3, #1
    ac06:	2b00      	cmp	r3, #0
    ac08:	bf14      	ite	ne
    ac0a:	2301      	movne	r3, #1
    ac0c:	2300      	moveq	r3, #0
    ac0e:	b2db      	uxtb	r3, r3
}
    ac10:	4618      	mov	r0, r3
    ac12:	370c      	adds	r7, #12
    ac14:	46bd      	mov	sp, r7
    ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac1a:	4770      	bx	lr

0000ac1c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ac1c:	b580      	push	{r7, lr}
    ac1e:	b082      	sub	sp, #8
    ac20:	af00      	add	r7, sp, #0
    ac22:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    ac24:	687b      	ldr	r3, [r7, #4]
    ac26:	681b      	ldr	r3, [r3, #0]
    ac28:	f043 0202 	orr.w	r2, r3, #2
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac30:	2103      	movs	r1, #3
    ac32:	6878      	ldr	r0, [r7, #4]
    ac34:	4b02      	ldr	r3, [pc, #8]	; (ac40 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    ac36:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ac38:	bf00      	nop
    ac3a:	3708      	adds	r7, #8
    ac3c:	46bd      	mov	sp, r7
    ac3e:	bd80      	pop	{r7, pc}
    ac40:	0000ab31 	.word	0x0000ab31

0000ac44 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ac44:	b580      	push	{r7, lr}
    ac46:	b084      	sub	sp, #16
    ac48:	af00      	add	r7, sp, #0
    ac4a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac4c:	2103      	movs	r1, #3
    ac4e:	6878      	ldr	r0, [r7, #4]
    ac50:	4b09      	ldr	r3, [pc, #36]	; (ac78 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    ac52:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ac54:	687b      	ldr	r3, [r7, #4]
    ac56:	681b      	ldr	r3, [r3, #0]
    ac58:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    ac5a:	68fb      	ldr	r3, [r7, #12]
    ac5c:	085b      	lsrs	r3, r3, #1
    ac5e:	f003 0301 	and.w	r3, r3, #1
    ac62:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    ac64:	68fb      	ldr	r3, [r7, #12]
    ac66:	2b00      	cmp	r3, #0
    ac68:	bf14      	ite	ne
    ac6a:	2301      	movne	r3, #1
    ac6c:	2300      	moveq	r3, #0
    ac6e:	b2db      	uxtb	r3, r3
}
    ac70:	4618      	mov	r0, r3
    ac72:	3710      	adds	r7, #16
    ac74:	46bd      	mov	sp, r7
    ac76:	bd80      	pop	{r7, pc}
    ac78:	0000ab31 	.word	0x0000ab31

0000ac7c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b082      	sub	sp, #8
    ac80:	af00      	add	r7, sp, #0
    ac82:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	f023 0202 	bic.w	r2, r3, #2
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac90:	2103      	movs	r1, #3
    ac92:	6878      	ldr	r0, [r7, #4]
    ac94:	4b02      	ldr	r3, [pc, #8]	; (aca0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    ac96:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ac98:	bf00      	nop
    ac9a:	3708      	adds	r7, #8
    ac9c:	46bd      	mov	sp, r7
    ac9e:	bd80      	pop	{r7, pc}
    aca0:	0000ab31 	.word	0x0000ab31

0000aca4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    aca4:	b480      	push	{r7}
    aca6:	b085      	sub	sp, #20
    aca8:	af00      	add	r7, sp, #0
    acaa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	681b      	ldr	r3, [r3, #0]
    acb0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    acb2:	68fb      	ldr	r3, [r7, #12]
    acb4:	089b      	lsrs	r3, r3, #2
    acb6:	f003 0303 	and.w	r3, r3, #3
    acba:	60fb      	str	r3, [r7, #12]
	return tmp;
    acbc:	68fb      	ldr	r3, [r7, #12]
}
    acbe:	4618      	mov	r0, r3
    acc0:	3714      	adds	r7, #20
    acc2:	46bd      	mov	sp, r7
    acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    acc8:	4770      	bx	lr
	...

0000accc <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    accc:	b580      	push	{r7, lr}
    acce:	b084      	sub	sp, #16
    acd0:	af00      	add	r7, sp, #0
    acd2:	6078      	str	r0, [r7, #4]
    acd4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    acd6:	2103      	movs	r1, #3
    acd8:	6878      	ldr	r0, [r7, #4]
    acda:	4b07      	ldr	r3, [pc, #28]	; (acf8 <hri_tc_get_CTRLA_reg+0x2c>)
    acdc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    acde:	687b      	ldr	r3, [r7, #4]
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ace4:	68fa      	ldr	r2, [r7, #12]
    ace6:	683b      	ldr	r3, [r7, #0]
    ace8:	4013      	ands	r3, r2
    acea:	60fb      	str	r3, [r7, #12]
	return tmp;
    acec:	68fb      	ldr	r3, [r7, #12]
}
    acee:	4618      	mov	r0, r3
    acf0:	3710      	adds	r7, #16
    acf2:	46bd      	mov	sp, r7
    acf4:	bd80      	pop	{r7, pc}
    acf6:	bf00      	nop
    acf8:	0000ab31 	.word	0x0000ab31

0000acfc <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b082      	sub	sp, #8
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
    ad04:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    ad06:	687b      	ldr	r3, [r7, #4]
    ad08:	683a      	ldr	r2, [r7, #0]
    ad0a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ad0c:	2103      	movs	r1, #3
    ad0e:	6878      	ldr	r0, [r7, #4]
    ad10:	4b02      	ldr	r3, [pc, #8]	; (ad1c <hri_tc_write_CTRLA_reg+0x20>)
    ad12:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad14:	bf00      	nop
    ad16:	3708      	adds	r7, #8
    ad18:	46bd      	mov	sp, r7
    ad1a:	bd80      	pop	{r7, pc}
    ad1c:	0000ab31 	.word	0x0000ab31

0000ad20 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    ad20:	b480      	push	{r7}
    ad22:	b083      	sub	sp, #12
    ad24:	af00      	add	r7, sp, #0
    ad26:	6078      	str	r0, [r7, #4]
    ad28:	460b      	mov	r3, r1
    ad2a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    ad2c:	687b      	ldr	r3, [r7, #4]
    ad2e:	887a      	ldrh	r2, [r7, #2]
    ad30:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    ad32:	bf00      	nop
    ad34:	370c      	adds	r7, #12
    ad36:	46bd      	mov	sp, r7
    ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad3c:	4770      	bx	lr

0000ad3e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    ad3e:	b480      	push	{r7}
    ad40:	b083      	sub	sp, #12
    ad42:	af00      	add	r7, sp, #0
    ad44:	6078      	str	r0, [r7, #4]
    ad46:	460b      	mov	r3, r1
    ad48:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    ad4a:	687b      	ldr	r3, [r7, #4]
    ad4c:	78fa      	ldrb	r2, [r7, #3]
    ad4e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    ad50:	bf00      	nop
    ad52:	370c      	adds	r7, #12
    ad54:	46bd      	mov	sp, r7
    ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad5a:	4770      	bx	lr

0000ad5c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    ad5c:	b480      	push	{r7}
    ad5e:	b083      	sub	sp, #12
    ad60:	af00      	add	r7, sp, #0
    ad62:	6078      	str	r0, [r7, #4]
    ad64:	460b      	mov	r3, r1
    ad66:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    ad68:	687b      	ldr	r3, [r7, #4]
    ad6a:	78fa      	ldrb	r2, [r7, #3]
    ad6c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    ad6e:	bf00      	nop
    ad70:	370c      	adds	r7, #12
    ad72:	46bd      	mov	sp, r7
    ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad78:	4770      	bx	lr
	...

0000ad7c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    ad7c:	b580      	push	{r7, lr}
    ad7e:	b082      	sub	sp, #8
    ad80:	af00      	add	r7, sp, #0
    ad82:	6078      	str	r0, [r7, #4]
    ad84:	460b      	mov	r3, r1
    ad86:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	78fa      	ldrb	r2, [r7, #3]
    ad8c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ad8e:	2120      	movs	r1, #32
    ad90:	6878      	ldr	r0, [r7, #4]
    ad92:	4b03      	ldr	r3, [pc, #12]	; (ada0 <hri_tccount8_write_PER_reg+0x24>)
    ad94:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad96:	bf00      	nop
    ad98:	3708      	adds	r7, #8
    ad9a:	46bd      	mov	sp, r7
    ad9c:	bd80      	pop	{r7, pc}
    ad9e:	bf00      	nop
    ada0:	0000ab31 	.word	0x0000ab31

0000ada4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    ada4:	b580      	push	{r7, lr}
    ada6:	b082      	sub	sp, #8
    ada8:	af00      	add	r7, sp, #0
    adaa:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    adac:	2120      	movs	r1, #32
    adae:	6878      	ldr	r0, [r7, #4]
    adb0:	4b04      	ldr	r3, [pc, #16]	; (adc4 <hri_tccount8_read_PER_reg+0x20>)
    adb2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	7edb      	ldrb	r3, [r3, #27]
    adb8:	b2db      	uxtb	r3, r3
}
    adba:	4618      	mov	r0, r3
    adbc:	3708      	adds	r7, #8
    adbe:	46bd      	mov	sp, r7
    adc0:	bd80      	pop	{r7, pc}
    adc2:	bf00      	nop
    adc4:	0000ab31 	.word	0x0000ab31

0000adc8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b082      	sub	sp, #8
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
    add0:	460b      	mov	r3, r1
    add2:	70fb      	strb	r3, [r7, #3]
    add4:	4613      	mov	r3, r2
    add6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    add8:	78fb      	ldrb	r3, [r7, #3]
    adda:	687a      	ldr	r2, [r7, #4]
    addc:	4413      	add	r3, r2
    adde:	78ba      	ldrb	r2, [r7, #2]
    ade0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ade2:	21c0      	movs	r1, #192	; 0xc0
    ade4:	6878      	ldr	r0, [r7, #4]
    ade6:	4b03      	ldr	r3, [pc, #12]	; (adf4 <hri_tccount8_write_CC_reg+0x2c>)
    ade8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    adea:	bf00      	nop
    adec:	3708      	adds	r7, #8
    adee:	46bd      	mov	sp, r7
    adf0:	bd80      	pop	{r7, pc}
    adf2:	bf00      	nop
    adf4:	0000ab31 	.word	0x0000ab31

0000adf8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    adf8:	b580      	push	{r7, lr}
    adfa:	b082      	sub	sp, #8
    adfc:	af00      	add	r7, sp, #0
    adfe:	6078      	str	r0, [r7, #4]
    ae00:	460b      	mov	r3, r1
    ae02:	70fb      	strb	r3, [r7, #3]
    ae04:	4613      	mov	r3, r2
    ae06:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    ae08:	78fb      	ldrb	r3, [r7, #3]
    ae0a:	687a      	ldr	r2, [r7, #4]
    ae0c:	330c      	adds	r3, #12
    ae0e:	005b      	lsls	r3, r3, #1
    ae10:	4413      	add	r3, r2
    ae12:	883a      	ldrh	r2, [r7, #0]
    ae14:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ae16:	21c0      	movs	r1, #192	; 0xc0
    ae18:	6878      	ldr	r0, [r7, #4]
    ae1a:	4b03      	ldr	r3, [pc, #12]	; (ae28 <hri_tccount16_write_CC_reg+0x30>)
    ae1c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ae1e:	bf00      	nop
    ae20:	3708      	adds	r7, #8
    ae22:	46bd      	mov	sp, r7
    ae24:	bd80      	pop	{r7, pc}
    ae26:	bf00      	nop
    ae28:	0000ab31 	.word	0x0000ab31

0000ae2c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    ae2c:	b580      	push	{r7, lr}
    ae2e:	b082      	sub	sp, #8
    ae30:	af00      	add	r7, sp, #0
    ae32:	6078      	str	r0, [r7, #4]
    ae34:	460b      	mov	r3, r1
    ae36:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ae38:	21c0      	movs	r1, #192	; 0xc0
    ae3a:	6878      	ldr	r0, [r7, #4]
    ae3c:	4b06      	ldr	r3, [pc, #24]	; (ae58 <hri_tccount16_read_CC_reg+0x2c>)
    ae3e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    ae40:	78fb      	ldrb	r3, [r7, #3]
    ae42:	687a      	ldr	r2, [r7, #4]
    ae44:	330c      	adds	r3, #12
    ae46:	005b      	lsls	r3, r3, #1
    ae48:	4413      	add	r3, r2
    ae4a:	889b      	ldrh	r3, [r3, #4]
    ae4c:	b29b      	uxth	r3, r3
}
    ae4e:	4618      	mov	r0, r3
    ae50:	3708      	adds	r7, #8
    ae52:	46bd      	mov	sp, r7
    ae54:	bd80      	pop	{r7, pc}
    ae56:	bf00      	nop
    ae58:	0000ab31 	.word	0x0000ab31

0000ae5c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    ae5c:	b580      	push	{r7, lr}
    ae5e:	b084      	sub	sp, #16
    ae60:	af00      	add	r7, sp, #0
    ae62:	60f8      	str	r0, [r7, #12]
    ae64:	460b      	mov	r3, r1
    ae66:	607a      	str	r2, [r7, #4]
    ae68:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    ae6a:	7afb      	ldrb	r3, [r7, #11]
    ae6c:	68fa      	ldr	r2, [r7, #12]
    ae6e:	3306      	adds	r3, #6
    ae70:	009b      	lsls	r3, r3, #2
    ae72:	4413      	add	r3, r2
    ae74:	687a      	ldr	r2, [r7, #4]
    ae76:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ae78:	21c0      	movs	r1, #192	; 0xc0
    ae7a:	68f8      	ldr	r0, [r7, #12]
    ae7c:	4b02      	ldr	r3, [pc, #8]	; (ae88 <hri_tccount32_write_CC_reg+0x2c>)
    ae7e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ae80:	bf00      	nop
    ae82:	3710      	adds	r7, #16
    ae84:	46bd      	mov	sp, r7
    ae86:	bd80      	pop	{r7, pc}
    ae88:	0000ab31 	.word	0x0000ab31

0000ae8c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    ae8c:	b580      	push	{r7, lr}
    ae8e:	b082      	sub	sp, #8
    ae90:	af00      	add	r7, sp, #0
    ae92:	6078      	str	r0, [r7, #4]
    ae94:	460b      	mov	r3, r1
    ae96:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ae98:	21c0      	movs	r1, #192	; 0xc0
    ae9a:	6878      	ldr	r0, [r7, #4]
    ae9c:	4b05      	ldr	r3, [pc, #20]	; (aeb4 <hri_tccount32_read_CC_reg+0x28>)
    ae9e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    aea0:	78fb      	ldrb	r3, [r7, #3]
    aea2:	687a      	ldr	r2, [r7, #4]
    aea4:	3306      	adds	r3, #6
    aea6:	009b      	lsls	r3, r3, #2
    aea8:	4413      	add	r3, r2
    aeaa:	685b      	ldr	r3, [r3, #4]
}
    aeac:	4618      	mov	r0, r3
    aeae:	3708      	adds	r7, #8
    aeb0:	46bd      	mov	sp, r7
    aeb2:	bd80      	pop	{r7, pc}
    aeb4:	0000ab31 	.word	0x0000ab31

0000aeb8 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    aeb8:	b580      	push	{r7, lr}
    aeba:	b084      	sub	sp, #16
    aebc:	af00      	add	r7, sp, #0
    aebe:	6078      	str	r0, [r7, #4]
    aec0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    aec2:	6838      	ldr	r0, [r7, #0]
    aec4:	4b93      	ldr	r3, [pc, #588]	; (b114 <_timer_init+0x25c>)
    aec6:	4798      	blx	r3
    aec8:	4603      	mov	r3, r0
    aeca:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    aecc:	687b      	ldr	r3, [r7, #4]
    aece:	683a      	ldr	r2, [r7, #0]
    aed0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    aed2:	2295      	movs	r2, #149	; 0x95
    aed4:	4990      	ldr	r1, [pc, #576]	; (b118 <_timer_init+0x260>)
    aed6:	2001      	movs	r0, #1
    aed8:	4b90      	ldr	r3, [pc, #576]	; (b11c <_timer_init+0x264>)
    aeda:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    aedc:	2101      	movs	r1, #1
    aede:	6838      	ldr	r0, [r7, #0]
    aee0:	4b8f      	ldr	r3, [pc, #572]	; (b120 <_timer_init+0x268>)
    aee2:	4798      	blx	r3
    aee4:	4603      	mov	r3, r0
    aee6:	f083 0301 	eor.w	r3, r3, #1
    aeea:	b2db      	uxtb	r3, r3
    aeec:	2b00      	cmp	r3, #0
    aeee:	d011      	beq.n	af14 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    aef0:	2102      	movs	r1, #2
    aef2:	6838      	ldr	r0, [r7, #0]
    aef4:	4b8b      	ldr	r3, [pc, #556]	; (b124 <_timer_init+0x26c>)
    aef6:	4798      	blx	r3
    aef8:	4603      	mov	r3, r0
    aefa:	2b00      	cmp	r3, #0
    aefc:	d006      	beq.n	af0c <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    aefe:	6838      	ldr	r0, [r7, #0]
    af00:	4b89      	ldr	r3, [pc, #548]	; (b128 <_timer_init+0x270>)
    af02:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    af04:	2102      	movs	r1, #2
    af06:	6838      	ldr	r0, [r7, #0]
    af08:	4b88      	ldr	r3, [pc, #544]	; (b12c <_timer_init+0x274>)
    af0a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    af0c:	2101      	movs	r1, #1
    af0e:	6838      	ldr	r0, [r7, #0]
    af10:	4b87      	ldr	r3, [pc, #540]	; (b130 <_timer_init+0x278>)
    af12:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    af14:	2101      	movs	r1, #1
    af16:	6838      	ldr	r0, [r7, #0]
    af18:	4b84      	ldr	r3, [pc, #528]	; (b12c <_timer_init+0x274>)
    af1a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    af1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af20:	4984      	ldr	r1, [pc, #528]	; (b134 <_timer_init+0x27c>)
    af22:	4613      	mov	r3, r2
    af24:	009b      	lsls	r3, r3, #2
    af26:	4413      	add	r3, r2
    af28:	009b      	lsls	r3, r3, #2
    af2a:	440b      	add	r3, r1
    af2c:	3304      	adds	r3, #4
    af2e:	681b      	ldr	r3, [r3, #0]
    af30:	4619      	mov	r1, r3
    af32:	6838      	ldr	r0, [r7, #0]
    af34:	4b7e      	ldr	r3, [pc, #504]	; (b130 <_timer_init+0x278>)
    af36:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    af38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af3c:	497d      	ldr	r1, [pc, #500]	; (b134 <_timer_init+0x27c>)
    af3e:	4613      	mov	r3, r2
    af40:	009b      	lsls	r3, r3, #2
    af42:	4413      	add	r3, r2
    af44:	009b      	lsls	r3, r3, #2
    af46:	440b      	add	r3, r1
    af48:	330a      	adds	r3, #10
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	4619      	mov	r1, r3
    af4e:	6838      	ldr	r0, [r7, #0]
    af50:	4b79      	ldr	r3, [pc, #484]	; (b138 <_timer_init+0x280>)
    af52:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    af54:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af58:	4976      	ldr	r1, [pc, #472]	; (b134 <_timer_init+0x27c>)
    af5a:	4613      	mov	r3, r2
    af5c:	009b      	lsls	r3, r3, #2
    af5e:	4413      	add	r3, r2
    af60:	009b      	lsls	r3, r3, #2
    af62:	440b      	add	r3, r1
    af64:	3308      	adds	r3, #8
    af66:	881b      	ldrh	r3, [r3, #0]
    af68:	4619      	mov	r1, r3
    af6a:	6838      	ldr	r0, [r7, #0]
    af6c:	4b73      	ldr	r3, [pc, #460]	; (b13c <_timer_init+0x284>)
    af6e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    af70:	2101      	movs	r1, #1
    af72:	6838      	ldr	r0, [r7, #0]
    af74:	4b72      	ldr	r3, [pc, #456]	; (b140 <_timer_init+0x288>)
    af76:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    af78:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af7c:	496d      	ldr	r1, [pc, #436]	; (b134 <_timer_init+0x27c>)
    af7e:	4613      	mov	r3, r2
    af80:	009b      	lsls	r3, r3, #2
    af82:	4413      	add	r3, r2
    af84:	009b      	lsls	r3, r3, #2
    af86:	440b      	add	r3, r1
    af88:	3304      	adds	r3, #4
    af8a:	681b      	ldr	r3, [r3, #0]
    af8c:	f003 030c 	and.w	r3, r3, #12
    af90:	2b08      	cmp	r3, #8
    af92:	d11e      	bne.n	afd2 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    af94:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af98:	4966      	ldr	r1, [pc, #408]	; (b134 <_timer_init+0x27c>)
    af9a:	4613      	mov	r3, r2
    af9c:	009b      	lsls	r3, r3, #2
    af9e:	4413      	add	r3, r2
    afa0:	009b      	lsls	r3, r3, #2
    afa2:	440b      	add	r3, r1
    afa4:	330c      	adds	r3, #12
    afa6:	681b      	ldr	r3, [r3, #0]
    afa8:	461a      	mov	r2, r3
    afaa:	2100      	movs	r1, #0
    afac:	6838      	ldr	r0, [r7, #0]
    afae:	4b65      	ldr	r3, [pc, #404]	; (b144 <_timer_init+0x28c>)
    afb0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    afb2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    afb6:	495f      	ldr	r1, [pc, #380]	; (b134 <_timer_init+0x27c>)
    afb8:	4613      	mov	r3, r2
    afba:	009b      	lsls	r3, r3, #2
    afbc:	4413      	add	r3, r2
    afbe:	009b      	lsls	r3, r3, #2
    afc0:	440b      	add	r3, r1
    afc2:	3310      	adds	r3, #16
    afc4:	681b      	ldr	r3, [r3, #0]
    afc6:	461a      	mov	r2, r3
    afc8:	2101      	movs	r1, #1
    afca:	6838      	ldr	r0, [r7, #0]
    afcc:	4b5d      	ldr	r3, [pc, #372]	; (b144 <_timer_init+0x28c>)
    afce:	4798      	blx	r3
    afd0:	e06a      	b.n	b0a8 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    afd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    afd6:	4957      	ldr	r1, [pc, #348]	; (b134 <_timer_init+0x27c>)
    afd8:	4613      	mov	r3, r2
    afda:	009b      	lsls	r3, r3, #2
    afdc:	4413      	add	r3, r2
    afde:	009b      	lsls	r3, r3, #2
    afe0:	440b      	add	r3, r1
    afe2:	3304      	adds	r3, #4
    afe4:	681b      	ldr	r3, [r3, #0]
    afe6:	f003 030c 	and.w	r3, r3, #12
    afea:	2b00      	cmp	r3, #0
    afec:	d120      	bne.n	b030 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    afee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aff2:	4950      	ldr	r1, [pc, #320]	; (b134 <_timer_init+0x27c>)
    aff4:	4613      	mov	r3, r2
    aff6:	009b      	lsls	r3, r3, #2
    aff8:	4413      	add	r3, r2
    affa:	009b      	lsls	r3, r3, #2
    affc:	440b      	add	r3, r1
    affe:	330c      	adds	r3, #12
    b000:	681b      	ldr	r3, [r3, #0]
    b002:	b29b      	uxth	r3, r3
    b004:	461a      	mov	r2, r3
    b006:	2100      	movs	r1, #0
    b008:	6838      	ldr	r0, [r7, #0]
    b00a:	4b4f      	ldr	r3, [pc, #316]	; (b148 <_timer_init+0x290>)
    b00c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b00e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b012:	4948      	ldr	r1, [pc, #288]	; (b134 <_timer_init+0x27c>)
    b014:	4613      	mov	r3, r2
    b016:	009b      	lsls	r3, r3, #2
    b018:	4413      	add	r3, r2
    b01a:	009b      	lsls	r3, r3, #2
    b01c:	440b      	add	r3, r1
    b01e:	3310      	adds	r3, #16
    b020:	681b      	ldr	r3, [r3, #0]
    b022:	b29b      	uxth	r3, r3
    b024:	461a      	mov	r2, r3
    b026:	2101      	movs	r1, #1
    b028:	6838      	ldr	r0, [r7, #0]
    b02a:	4b47      	ldr	r3, [pc, #284]	; (b148 <_timer_init+0x290>)
    b02c:	4798      	blx	r3
    b02e:	e03b      	b.n	b0a8 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    b030:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b034:	493f      	ldr	r1, [pc, #252]	; (b134 <_timer_init+0x27c>)
    b036:	4613      	mov	r3, r2
    b038:	009b      	lsls	r3, r3, #2
    b03a:	4413      	add	r3, r2
    b03c:	009b      	lsls	r3, r3, #2
    b03e:	440b      	add	r3, r1
    b040:	3304      	adds	r3, #4
    b042:	681b      	ldr	r3, [r3, #0]
    b044:	f003 030c 	and.w	r3, r3, #12
    b048:	2b04      	cmp	r3, #4
    b04a:	d12d      	bne.n	b0a8 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    b04c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b050:	4938      	ldr	r1, [pc, #224]	; (b134 <_timer_init+0x27c>)
    b052:	4613      	mov	r3, r2
    b054:	009b      	lsls	r3, r3, #2
    b056:	4413      	add	r3, r2
    b058:	009b      	lsls	r3, r3, #2
    b05a:	440b      	add	r3, r1
    b05c:	330c      	adds	r3, #12
    b05e:	681b      	ldr	r3, [r3, #0]
    b060:	b2db      	uxtb	r3, r3
    b062:	461a      	mov	r2, r3
    b064:	2100      	movs	r1, #0
    b066:	6838      	ldr	r0, [r7, #0]
    b068:	4b38      	ldr	r3, [pc, #224]	; (b14c <_timer_init+0x294>)
    b06a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    b06c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b070:	4930      	ldr	r1, [pc, #192]	; (b134 <_timer_init+0x27c>)
    b072:	4613      	mov	r3, r2
    b074:	009b      	lsls	r3, r3, #2
    b076:	4413      	add	r3, r2
    b078:	009b      	lsls	r3, r3, #2
    b07a:	440b      	add	r3, r1
    b07c:	3310      	adds	r3, #16
    b07e:	681b      	ldr	r3, [r3, #0]
    b080:	b2db      	uxtb	r3, r3
    b082:	461a      	mov	r2, r3
    b084:	2101      	movs	r1, #1
    b086:	6838      	ldr	r0, [r7, #0]
    b088:	4b30      	ldr	r3, [pc, #192]	; (b14c <_timer_init+0x294>)
    b08a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    b08c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b090:	4928      	ldr	r1, [pc, #160]	; (b134 <_timer_init+0x27c>)
    b092:	4613      	mov	r3, r2
    b094:	009b      	lsls	r3, r3, #2
    b096:	4413      	add	r3, r2
    b098:	009b      	lsls	r3, r3, #2
    b09a:	440b      	add	r3, r1
    b09c:	330b      	adds	r3, #11
    b09e:	781b      	ldrb	r3, [r3, #0]
    b0a0:	4619      	mov	r1, r3
    b0a2:	6838      	ldr	r0, [r7, #0]
    b0a4:	4b2a      	ldr	r3, [pc, #168]	; (b150 <_timer_init+0x298>)
    b0a6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    b0a8:	6838      	ldr	r0, [r7, #0]
    b0aa:	4b2a      	ldr	r3, [pc, #168]	; (b154 <_timer_init+0x29c>)
    b0ac:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    b0ae:	6879      	ldr	r1, [r7, #4]
    b0b0:	6838      	ldr	r0, [r7, #0]
    b0b2:	4b29      	ldr	r3, [pc, #164]	; (b158 <_timer_init+0x2a0>)
    b0b4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b0b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b0ba:	491e      	ldr	r1, [pc, #120]	; (b134 <_timer_init+0x27c>)
    b0bc:	4613      	mov	r3, r2
    b0be:	009b      	lsls	r3, r3, #2
    b0c0:	4413      	add	r3, r2
    b0c2:	009b      	lsls	r3, r3, #2
    b0c4:	440b      	add	r3, r1
    b0c6:	3302      	adds	r3, #2
    b0c8:	f9b3 3000 	ldrsh.w	r3, [r3]
    b0cc:	4618      	mov	r0, r3
    b0ce:	4b23      	ldr	r3, [pc, #140]	; (b15c <_timer_init+0x2a4>)
    b0d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b0d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b0d6:	4917      	ldr	r1, [pc, #92]	; (b134 <_timer_init+0x27c>)
    b0d8:	4613      	mov	r3, r2
    b0da:	009b      	lsls	r3, r3, #2
    b0dc:	4413      	add	r3, r2
    b0de:	009b      	lsls	r3, r3, #2
    b0e0:	440b      	add	r3, r1
    b0e2:	3302      	adds	r3, #2
    b0e4:	f9b3 3000 	ldrsh.w	r3, [r3]
    b0e8:	4618      	mov	r0, r3
    b0ea:	4b1d      	ldr	r3, [pc, #116]	; (b160 <_timer_init+0x2a8>)
    b0ec:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b0ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b0f2:	4910      	ldr	r1, [pc, #64]	; (b134 <_timer_init+0x27c>)
    b0f4:	4613      	mov	r3, r2
    b0f6:	009b      	lsls	r3, r3, #2
    b0f8:	4413      	add	r3, r2
    b0fa:	009b      	lsls	r3, r3, #2
    b0fc:	440b      	add	r3, r1
    b0fe:	3302      	adds	r3, #2
    b100:	f9b3 3000 	ldrsh.w	r3, [r3]
    b104:	4618      	mov	r0, r3
    b106:	4b17      	ldr	r3, [pc, #92]	; (b164 <_timer_init+0x2ac>)
    b108:	4798      	blx	r3

	return ERR_NONE;
    b10a:	2300      	movs	r3, #0
}
    b10c:	4618      	mov	r0, r3
    b10e:	3710      	adds	r7, #16
    b110:	46bd      	mov	sp, r7
    b112:	bd80      	pop	{r7, pc}
    b114:	0000b645 	.word	0x0000b645
    b118:	0001adb4 	.word	0x0001adb4
    b11c:	000062c5 	.word	0x000062c5
    b120:	0000ab55 	.word	0x0000ab55
    b124:	0000accd 	.word	0x0000accd
    b128:	0000ac7d 	.word	0x0000ac7d
    b12c:	0000ab31 	.word	0x0000ab31
    b130:	0000acfd 	.word	0x0000acfd
    b134:	200000ac 	.word	0x200000ac
    b138:	0000ad5d 	.word	0x0000ad5d
    b13c:	0000ad21 	.word	0x0000ad21
    b140:	0000ad3f 	.word	0x0000ad3f
    b144:	0000ae5d 	.word	0x0000ae5d
    b148:	0000adf9 	.word	0x0000adf9
    b14c:	0000adc9 	.word	0x0000adc9
    b150:	0000ad7d 	.word	0x0000ad7d
    b154:	0000abd9 	.word	0x0000abd9
    b158:	0000b6ad 	.word	0x0000b6ad
    b15c:	0000aab1 	.word	0x0000aab1
    b160:	0000aaf5 	.word	0x0000aaf5
    b164:	0000aa75 	.word	0x0000aa75

0000b168 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    b168:	b580      	push	{r7, lr}
    b16a:	b084      	sub	sp, #16
    b16c:	af00      	add	r7, sp, #0
    b16e:	6078      	str	r0, [r7, #4]
    b170:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    b172:	6838      	ldr	r0, [r7, #0]
    b174:	4b73      	ldr	r3, [pc, #460]	; (b344 <_pwm_init+0x1dc>)
    b176:	4798      	blx	r3
    b178:	4603      	mov	r3, r0
    b17a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    b17c:	687b      	ldr	r3, [r7, #4]
    b17e:	683a      	ldr	r2, [r7, #0]
    b180:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b182:	2101      	movs	r1, #1
    b184:	6838      	ldr	r0, [r7, #0]
    b186:	4b70      	ldr	r3, [pc, #448]	; (b348 <_pwm_init+0x1e0>)
    b188:	4798      	blx	r3
    b18a:	4603      	mov	r3, r0
    b18c:	f083 0301 	eor.w	r3, r3, #1
    b190:	b2db      	uxtb	r3, r3
    b192:	2b00      	cmp	r3, #0
    b194:	d011      	beq.n	b1ba <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b196:	2102      	movs	r1, #2
    b198:	6838      	ldr	r0, [r7, #0]
    b19a:	4b6c      	ldr	r3, [pc, #432]	; (b34c <_pwm_init+0x1e4>)
    b19c:	4798      	blx	r3
    b19e:	4603      	mov	r3, r0
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d006      	beq.n	b1b2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b1a4:	6838      	ldr	r0, [r7, #0]
    b1a6:	4b6a      	ldr	r3, [pc, #424]	; (b350 <_pwm_init+0x1e8>)
    b1a8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b1aa:	2102      	movs	r1, #2
    b1ac:	6838      	ldr	r0, [r7, #0]
    b1ae:	4b69      	ldr	r3, [pc, #420]	; (b354 <_pwm_init+0x1ec>)
    b1b0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b1b2:	2101      	movs	r1, #1
    b1b4:	6838      	ldr	r0, [r7, #0]
    b1b6:	4b68      	ldr	r3, [pc, #416]	; (b358 <_pwm_init+0x1f0>)
    b1b8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b1ba:	2101      	movs	r1, #1
    b1bc:	6838      	ldr	r0, [r7, #0]
    b1be:	4b65      	ldr	r3, [pc, #404]	; (b354 <_pwm_init+0x1ec>)
    b1c0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b1c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1c6:	4965      	ldr	r1, [pc, #404]	; (b35c <_pwm_init+0x1f4>)
    b1c8:	4613      	mov	r3, r2
    b1ca:	009b      	lsls	r3, r3, #2
    b1cc:	4413      	add	r3, r2
    b1ce:	009b      	lsls	r3, r3, #2
    b1d0:	440b      	add	r3, r1
    b1d2:	3304      	adds	r3, #4
    b1d4:	681b      	ldr	r3, [r3, #0]
    b1d6:	4619      	mov	r1, r3
    b1d8:	6838      	ldr	r0, [r7, #0]
    b1da:	4b5f      	ldr	r3, [pc, #380]	; (b358 <_pwm_init+0x1f0>)
    b1dc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b1de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1e2:	495e      	ldr	r1, [pc, #376]	; (b35c <_pwm_init+0x1f4>)
    b1e4:	4613      	mov	r3, r2
    b1e6:	009b      	lsls	r3, r3, #2
    b1e8:	4413      	add	r3, r2
    b1ea:	009b      	lsls	r3, r3, #2
    b1ec:	440b      	add	r3, r1
    b1ee:	330a      	adds	r3, #10
    b1f0:	781b      	ldrb	r3, [r3, #0]
    b1f2:	4619      	mov	r1, r3
    b1f4:	6838      	ldr	r0, [r7, #0]
    b1f6:	4b5a      	ldr	r3, [pc, #360]	; (b360 <_pwm_init+0x1f8>)
    b1f8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b1fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1fe:	4957      	ldr	r1, [pc, #348]	; (b35c <_pwm_init+0x1f4>)
    b200:	4613      	mov	r3, r2
    b202:	009b      	lsls	r3, r3, #2
    b204:	4413      	add	r3, r2
    b206:	009b      	lsls	r3, r3, #2
    b208:	440b      	add	r3, r1
    b20a:	3308      	adds	r3, #8
    b20c:	881b      	ldrh	r3, [r3, #0]
    b20e:	4619      	mov	r1, r3
    b210:	6838      	ldr	r0, [r7, #0]
    b212:	4b54      	ldr	r3, [pc, #336]	; (b364 <_pwm_init+0x1fc>)
    b214:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    b216:	2103      	movs	r1, #3
    b218:	6838      	ldr	r0, [r7, #0]
    b21a:	4b53      	ldr	r3, [pc, #332]	; (b368 <_pwm_init+0x200>)
    b21c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b21e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b222:	494e      	ldr	r1, [pc, #312]	; (b35c <_pwm_init+0x1f4>)
    b224:	4613      	mov	r3, r2
    b226:	009b      	lsls	r3, r3, #2
    b228:	4413      	add	r3, r2
    b22a:	009b      	lsls	r3, r3, #2
    b22c:	440b      	add	r3, r1
    b22e:	3304      	adds	r3, #4
    b230:	681b      	ldr	r3, [r3, #0]
    b232:	f003 030c 	and.w	r3, r3, #12
    b236:	2b08      	cmp	r3, #8
    b238:	d11e      	bne.n	b278 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b23a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b23e:	4947      	ldr	r1, [pc, #284]	; (b35c <_pwm_init+0x1f4>)
    b240:	4613      	mov	r3, r2
    b242:	009b      	lsls	r3, r3, #2
    b244:	4413      	add	r3, r2
    b246:	009b      	lsls	r3, r3, #2
    b248:	440b      	add	r3, r1
    b24a:	330c      	adds	r3, #12
    b24c:	681b      	ldr	r3, [r3, #0]
    b24e:	461a      	mov	r2, r3
    b250:	2100      	movs	r1, #0
    b252:	6838      	ldr	r0, [r7, #0]
    b254:	4b45      	ldr	r3, [pc, #276]	; (b36c <_pwm_init+0x204>)
    b256:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b258:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b25c:	493f      	ldr	r1, [pc, #252]	; (b35c <_pwm_init+0x1f4>)
    b25e:	4613      	mov	r3, r2
    b260:	009b      	lsls	r3, r3, #2
    b262:	4413      	add	r3, r2
    b264:	009b      	lsls	r3, r3, #2
    b266:	440b      	add	r3, r1
    b268:	3310      	adds	r3, #16
    b26a:	681b      	ldr	r3, [r3, #0]
    b26c:	461a      	mov	r2, r3
    b26e:	2101      	movs	r1, #1
    b270:	6838      	ldr	r0, [r7, #0]
    b272:	4b3e      	ldr	r3, [pc, #248]	; (b36c <_pwm_init+0x204>)
    b274:	4798      	blx	r3
    b276:	e031      	b.n	b2dc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b278:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b27c:	4937      	ldr	r1, [pc, #220]	; (b35c <_pwm_init+0x1f4>)
    b27e:	4613      	mov	r3, r2
    b280:	009b      	lsls	r3, r3, #2
    b282:	4413      	add	r3, r2
    b284:	009b      	lsls	r3, r3, #2
    b286:	440b      	add	r3, r1
    b288:	3304      	adds	r3, #4
    b28a:	681b      	ldr	r3, [r3, #0]
    b28c:	f003 030c 	and.w	r3, r3, #12
    b290:	2b00      	cmp	r3, #0
    b292:	d120      	bne.n	b2d6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b294:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b298:	4930      	ldr	r1, [pc, #192]	; (b35c <_pwm_init+0x1f4>)
    b29a:	4613      	mov	r3, r2
    b29c:	009b      	lsls	r3, r3, #2
    b29e:	4413      	add	r3, r2
    b2a0:	009b      	lsls	r3, r3, #2
    b2a2:	440b      	add	r3, r1
    b2a4:	330c      	adds	r3, #12
    b2a6:	681b      	ldr	r3, [r3, #0]
    b2a8:	b29b      	uxth	r3, r3
    b2aa:	461a      	mov	r2, r3
    b2ac:	2100      	movs	r1, #0
    b2ae:	6838      	ldr	r0, [r7, #0]
    b2b0:	4b2f      	ldr	r3, [pc, #188]	; (b370 <_pwm_init+0x208>)
    b2b2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b2b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2b8:	4928      	ldr	r1, [pc, #160]	; (b35c <_pwm_init+0x1f4>)
    b2ba:	4613      	mov	r3, r2
    b2bc:	009b      	lsls	r3, r3, #2
    b2be:	4413      	add	r3, r2
    b2c0:	009b      	lsls	r3, r3, #2
    b2c2:	440b      	add	r3, r1
    b2c4:	3310      	adds	r3, #16
    b2c6:	681b      	ldr	r3, [r3, #0]
    b2c8:	b29b      	uxth	r3, r3
    b2ca:	461a      	mov	r2, r3
    b2cc:	2101      	movs	r1, #1
    b2ce:	6838      	ldr	r0, [r7, #0]
    b2d0:	4b27      	ldr	r3, [pc, #156]	; (b370 <_pwm_init+0x208>)
    b2d2:	4798      	blx	r3
    b2d4:	e002      	b.n	b2dc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    b2d6:	f04f 33ff 	mov.w	r3, #4294967295
    b2da:	e02e      	b.n	b33a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    b2dc:	6879      	ldr	r1, [r7, #4]
    b2de:	6838      	ldr	r0, [r7, #0]
    b2e0:	4b24      	ldr	r3, [pc, #144]	; (b374 <_pwm_init+0x20c>)
    b2e2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b2e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2e8:	491c      	ldr	r1, [pc, #112]	; (b35c <_pwm_init+0x1f4>)
    b2ea:	4613      	mov	r3, r2
    b2ec:	009b      	lsls	r3, r3, #2
    b2ee:	4413      	add	r3, r2
    b2f0:	009b      	lsls	r3, r3, #2
    b2f2:	440b      	add	r3, r1
    b2f4:	3302      	adds	r3, #2
    b2f6:	f9b3 3000 	ldrsh.w	r3, [r3]
    b2fa:	4618      	mov	r0, r3
    b2fc:	4b1e      	ldr	r3, [pc, #120]	; (b378 <_pwm_init+0x210>)
    b2fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b300:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b304:	4915      	ldr	r1, [pc, #84]	; (b35c <_pwm_init+0x1f4>)
    b306:	4613      	mov	r3, r2
    b308:	009b      	lsls	r3, r3, #2
    b30a:	4413      	add	r3, r2
    b30c:	009b      	lsls	r3, r3, #2
    b30e:	440b      	add	r3, r1
    b310:	3302      	adds	r3, #2
    b312:	f9b3 3000 	ldrsh.w	r3, [r3]
    b316:	4618      	mov	r0, r3
    b318:	4b18      	ldr	r3, [pc, #96]	; (b37c <_pwm_init+0x214>)
    b31a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b31c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b320:	490e      	ldr	r1, [pc, #56]	; (b35c <_pwm_init+0x1f4>)
    b322:	4613      	mov	r3, r2
    b324:	009b      	lsls	r3, r3, #2
    b326:	4413      	add	r3, r2
    b328:	009b      	lsls	r3, r3, #2
    b32a:	440b      	add	r3, r1
    b32c:	3302      	adds	r3, #2
    b32e:	f9b3 3000 	ldrsh.w	r3, [r3]
    b332:	4618      	mov	r0, r3
    b334:	4b12      	ldr	r3, [pc, #72]	; (b380 <_pwm_init+0x218>)
    b336:	4798      	blx	r3

	return 0;
    b338:	2300      	movs	r3, #0
}
    b33a:	4618      	mov	r0, r3
    b33c:	3710      	adds	r7, #16
    b33e:	46bd      	mov	sp, r7
    b340:	bd80      	pop	{r7, pc}
    b342:	bf00      	nop
    b344:	0000b645 	.word	0x0000b645
    b348:	0000ab55 	.word	0x0000ab55
    b34c:	0000accd 	.word	0x0000accd
    b350:	0000ac7d 	.word	0x0000ac7d
    b354:	0000ab31 	.word	0x0000ab31
    b358:	0000acfd 	.word	0x0000acfd
    b35c:	200000ac 	.word	0x200000ac
    b360:	0000ad5d 	.word	0x0000ad5d
    b364:	0000ad21 	.word	0x0000ad21
    b368:	0000ad3f 	.word	0x0000ad3f
    b36c:	0000ae5d 	.word	0x0000ae5d
    b370:	0000adf9 	.word	0x0000adf9
    b374:	0000b6ad 	.word	0x0000b6ad
    b378:	0000aab1 	.word	0x0000aab1
    b37c:	0000aaf5 	.word	0x0000aaf5
    b380:	0000aa75 	.word	0x0000aa75

0000b384 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    b384:	b580      	push	{r7, lr}
    b386:	b082      	sub	sp, #8
    b388:	af00      	add	r7, sp, #0
    b38a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b38c:	687b      	ldr	r3, [r7, #4]
    b38e:	68db      	ldr	r3, [r3, #12]
    b390:	4618      	mov	r0, r3
    b392:	4b03      	ldr	r3, [pc, #12]	; (b3a0 <_timer_start+0x1c>)
    b394:	4798      	blx	r3
}
    b396:	bf00      	nop
    b398:	3708      	adds	r7, #8
    b39a:	46bd      	mov	sp, r7
    b39c:	bd80      	pop	{r7, pc}
    b39e:	bf00      	nop
    b3a0:	0000ac1d 	.word	0x0000ac1d

0000b3a4 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    b3a4:	b580      	push	{r7, lr}
    b3a6:	b082      	sub	sp, #8
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	691b      	ldr	r3, [r3, #16]
    b3b0:	4618      	mov	r0, r3
    b3b2:	4b03      	ldr	r3, [pc, #12]	; (b3c0 <_pwm_enable+0x1c>)
    b3b4:	4798      	blx	r3
}
    b3b6:	bf00      	nop
    b3b8:	3708      	adds	r7, #8
    b3ba:	46bd      	mov	sp, r7
    b3bc:	bd80      	pop	{r7, pc}
    b3be:	bf00      	nop
    b3c0:	0000ac1d 	.word	0x0000ac1d

0000b3c4 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b082      	sub	sp, #8
    b3c8:	af00      	add	r7, sp, #0
    b3ca:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    b3cc:	687b      	ldr	r3, [r7, #4]
    b3ce:	68db      	ldr	r3, [r3, #12]
    b3d0:	4618      	mov	r0, r3
    b3d2:	4b03      	ldr	r3, [pc, #12]	; (b3e0 <_timer_stop+0x1c>)
    b3d4:	4798      	blx	r3
}
    b3d6:	bf00      	nop
    b3d8:	3708      	adds	r7, #8
    b3da:	46bd      	mov	sp, r7
    b3dc:	bd80      	pop	{r7, pc}
    b3de:	bf00      	nop
    b3e0:	0000ac7d 	.word	0x0000ac7d

0000b3e4 <_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _timer_get_period(const struct _timer_device *const device)
{
    b3e4:	b580      	push	{r7, lr}
    b3e6:	b084      	sub	sp, #16
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b3ec:	687b      	ldr	r3, [r7, #4]
    b3ee:	68db      	ldr	r3, [r3, #12]
    b3f0:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b3f2:	68f8      	ldr	r0, [r7, #12]
    b3f4:	4b13      	ldr	r3, [pc, #76]	; (b444 <_timer_get_period+0x60>)
    b3f6:	4798      	blx	r3
    b3f8:	4603      	mov	r3, r0
    b3fa:	2b02      	cmp	r3, #2
    b3fc:	d105      	bne.n	b40a <_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    b3fe:	2100      	movs	r1, #0
    b400:	68f8      	ldr	r0, [r7, #12]
    b402:	4b11      	ldr	r3, [pc, #68]	; (b448 <_timer_get_period+0x64>)
    b404:	4798      	blx	r3
    b406:	4603      	mov	r3, r0
    b408:	e017      	b.n	b43a <_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b40a:	68f8      	ldr	r0, [r7, #12]
    b40c:	4b0d      	ldr	r3, [pc, #52]	; (b444 <_timer_get_period+0x60>)
    b40e:	4798      	blx	r3
    b410:	4603      	mov	r3, r0
    b412:	2b00      	cmp	r3, #0
    b414:	d105      	bne.n	b422 <_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    b416:	2100      	movs	r1, #0
    b418:	68f8      	ldr	r0, [r7, #12]
    b41a:	4b0c      	ldr	r3, [pc, #48]	; (b44c <_timer_get_period+0x68>)
    b41c:	4798      	blx	r3
    b41e:	4603      	mov	r3, r0
    b420:	e00b      	b.n	b43a <_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b422:	68f8      	ldr	r0, [r7, #12]
    b424:	4b07      	ldr	r3, [pc, #28]	; (b444 <_timer_get_period+0x60>)
    b426:	4798      	blx	r3
    b428:	4603      	mov	r3, r0
    b42a:	2b01      	cmp	r3, #1
    b42c:	d104      	bne.n	b438 <_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    b42e:	68f8      	ldr	r0, [r7, #12]
    b430:	4b07      	ldr	r3, [pc, #28]	; (b450 <_timer_get_period+0x6c>)
    b432:	4798      	blx	r3
    b434:	4603      	mov	r3, r0
    b436:	e000      	b.n	b43a <_timer_get_period+0x56>
	}

	return 0;
    b438:	2300      	movs	r3, #0
}
    b43a:	4618      	mov	r0, r3
    b43c:	3710      	adds	r7, #16
    b43e:	46bd      	mov	sp, r7
    b440:	bd80      	pop	{r7, pc}
    b442:	bf00      	nop
    b444:	0000aca5 	.word	0x0000aca5
    b448:	0000ae8d 	.word	0x0000ae8d
    b44c:	0000ae2d 	.word	0x0000ae2d
    b450:	0000ada5 	.word	0x0000ada5

0000b454 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    b454:	b580      	push	{r7, lr}
    b456:	b082      	sub	sp, #8
    b458:	af00      	add	r7, sp, #0
    b45a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b45c:	687b      	ldr	r3, [r7, #4]
    b45e:	68db      	ldr	r3, [r3, #12]
    b460:	4618      	mov	r0, r3
    b462:	4b03      	ldr	r3, [pc, #12]	; (b470 <_timer_is_started+0x1c>)
    b464:	4798      	blx	r3
    b466:	4603      	mov	r3, r0
}
    b468:	4618      	mov	r0, r3
    b46a:	3708      	adds	r7, #8
    b46c:	46bd      	mov	sp, r7
    b46e:	bd80      	pop	{r7, pc}
    b470:	0000ac45 	.word	0x0000ac45

0000b474 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    b474:	b580      	push	{r7, lr}
    b476:	b082      	sub	sp, #8
    b478:	af00      	add	r7, sp, #0
    b47a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b47c:	687b      	ldr	r3, [r7, #4]
    b47e:	691b      	ldr	r3, [r3, #16]
    b480:	4618      	mov	r0, r3
    b482:	4b03      	ldr	r3, [pc, #12]	; (b490 <_pwm_is_enabled+0x1c>)
    b484:	4798      	blx	r3
    b486:	4603      	mov	r3, r0
}
    b488:	4618      	mov	r0, r3
    b48a:	3708      	adds	r7, #8
    b48c:	46bd      	mov	sp, r7
    b48e:	bd80      	pop	{r7, pc}
    b490:	0000ac45 	.word	0x0000ac45

0000b494 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    b494:	b480      	push	{r7}
    b496:	af00      	add	r7, sp, #0
	return NULL;
    b498:	2300      	movs	r3, #0
}
    b49a:	4618      	mov	r0, r3
    b49c:	46bd      	mov	sp, r7
    b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4a2:	4770      	bx	lr

0000b4a4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    b4a4:	b480      	push	{r7}
    b4a6:	af00      	add	r7, sp, #0
	return NULL;
    b4a8:	2300      	movs	r3, #0
}
    b4aa:	4618      	mov	r0, r3
    b4ac:	46bd      	mov	sp, r7
    b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4b2:	4770      	bx	lr

0000b4b4 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b084      	sub	sp, #16
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b4bc:	687b      	ldr	r3, [r7, #4]
    b4be:	68db      	ldr	r3, [r3, #12]
    b4c0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    b4c2:	68f8      	ldr	r0, [r7, #12]
    b4c4:	4b0e      	ldr	r3, [pc, #56]	; (b500 <_timer_set_irq+0x4c>)
    b4c6:	4798      	blx	r3
    b4c8:	4603      	mov	r3, r0
    b4ca:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    b4cc:	f240 12a3 	movw	r2, #419	; 0x1a3
    b4d0:	490c      	ldr	r1, [pc, #48]	; (b504 <_timer_set_irq+0x50>)
    b4d2:	2001      	movs	r0, #1
    b4d4:	4b0c      	ldr	r3, [pc, #48]	; (b508 <_timer_set_irq+0x54>)
    b4d6:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    b4d8:	f997 200b 	ldrsb.w	r2, [r7, #11]
    b4dc:	490b      	ldr	r1, [pc, #44]	; (b50c <_timer_set_irq+0x58>)
    b4de:	4613      	mov	r3, r2
    b4e0:	009b      	lsls	r3, r3, #2
    b4e2:	4413      	add	r3, r2
    b4e4:	009b      	lsls	r3, r3, #2
    b4e6:	440b      	add	r3, r1
    b4e8:	3302      	adds	r3, #2
    b4ea:	f9b3 3000 	ldrsh.w	r3, [r3]
    b4ee:	b2db      	uxtb	r3, r3
    b4f0:	4618      	mov	r0, r3
    b4f2:	4b07      	ldr	r3, [pc, #28]	; (b510 <_timer_set_irq+0x5c>)
    b4f4:	4798      	blx	r3
}
    b4f6:	bf00      	nop
    b4f8:	3710      	adds	r7, #16
    b4fa:	46bd      	mov	sp, r7
    b4fc:	bd80      	pop	{r7, pc}
    b4fe:	bf00      	nop
    b500:	0000b645 	.word	0x0000b645
    b504:	0001adb4 	.word	0x0001adb4
    b508:	000062c5 	.word	0x000062c5
    b50c:	200000ac 	.word	0x200000ac
    b510:	00006b05 	.word	0x00006b05

0000b514 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    b514:	b580      	push	{r7, lr}
    b516:	b084      	sub	sp, #16
    b518:	af00      	add	r7, sp, #0
    b51a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b51c:	687b      	ldr	r3, [r7, #4]
    b51e:	68db      	ldr	r3, [r3, #12]
    b520:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b522:	68f8      	ldr	r0, [r7, #12]
    b524:	4b07      	ldr	r3, [pc, #28]	; (b544 <tc_interrupt_handler+0x30>)
    b526:	4798      	blx	r3
    b528:	4603      	mov	r3, r0
    b52a:	2b00      	cmp	r3, #0
    b52c:	d006      	beq.n	b53c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b52e:	68f8      	ldr	r0, [r7, #12]
    b530:	4b05      	ldr	r3, [pc, #20]	; (b548 <tc_interrupt_handler+0x34>)
    b532:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b534:	687b      	ldr	r3, [r7, #4]
    b536:	681b      	ldr	r3, [r3, #0]
    b538:	6878      	ldr	r0, [r7, #4]
    b53a:	4798      	blx	r3
	}
}
    b53c:	bf00      	nop
    b53e:	3710      	adds	r7, #16
    b540:	46bd      	mov	sp, r7
    b542:	bd80      	pop	{r7, pc}
    b544:	0000ab7d 	.word	0x0000ab7d
    b548:	0000aba5 	.word	0x0000aba5

0000b54c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    b54c:	b580      	push	{r7, lr}
    b54e:	b084      	sub	sp, #16
    b550:	af00      	add	r7, sp, #0
    b552:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b554:	687b      	ldr	r3, [r7, #4]
    b556:	691b      	ldr	r3, [r3, #16]
    b558:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b55a:	68f8      	ldr	r0, [r7, #12]
    b55c:	4b12      	ldr	r3, [pc, #72]	; (b5a8 <tc_pwm_interrupt_handler+0x5c>)
    b55e:	4798      	blx	r3
    b560:	4603      	mov	r3, r0
    b562:	2b00      	cmp	r3, #0
    b564:	d00a      	beq.n	b57c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b566:	68f8      	ldr	r0, [r7, #12]
    b568:	4b10      	ldr	r3, [pc, #64]	; (b5ac <tc_pwm_interrupt_handler+0x60>)
    b56a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	681b      	ldr	r3, [r3, #0]
    b570:	2b00      	cmp	r3, #0
    b572:	d003      	beq.n	b57c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	681b      	ldr	r3, [r3, #0]
    b578:	6878      	ldr	r0, [r7, #4]
    b57a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    b57c:	68f8      	ldr	r0, [r7, #12]
    b57e:	4b0c      	ldr	r3, [pc, #48]	; (b5b0 <tc_pwm_interrupt_handler+0x64>)
    b580:	4798      	blx	r3
    b582:	4603      	mov	r3, r0
    b584:	2b00      	cmp	r3, #0
    b586:	d00a      	beq.n	b59e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    b588:	68f8      	ldr	r0, [r7, #12]
    b58a:	4b0a      	ldr	r3, [pc, #40]	; (b5b4 <tc_pwm_interrupt_handler+0x68>)
    b58c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	685b      	ldr	r3, [r3, #4]
    b592:	2b00      	cmp	r3, #0
    b594:	d003      	beq.n	b59e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    b596:	687b      	ldr	r3, [r7, #4]
    b598:	685b      	ldr	r3, [r3, #4]
    b59a:	6878      	ldr	r0, [r7, #4]
    b59c:	4798      	blx	r3
		}
	}
}
    b59e:	bf00      	nop
    b5a0:	3710      	adds	r7, #16
    b5a2:	46bd      	mov	sp, r7
    b5a4:	bd80      	pop	{r7, pc}
    b5a6:	bf00      	nop
    b5a8:	0000ab7d 	.word	0x0000ab7d
    b5ac:	0000aba5 	.word	0x0000aba5
    b5b0:	0000abf3 	.word	0x0000abf3
    b5b4:	0000abbf 	.word	0x0000abbf

0000b5b8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    b5bc:	4b03      	ldr	r3, [pc, #12]	; (b5cc <TC0_Handler+0x14>)
    b5be:	681b      	ldr	r3, [r3, #0]
    b5c0:	4618      	mov	r0, r3
    b5c2:	4b03      	ldr	r3, [pc, #12]	; (b5d0 <TC0_Handler+0x18>)
    b5c4:	4798      	blx	r3
}
    b5c6:	bf00      	nop
    b5c8:	bd80      	pop	{r7, pc}
    b5ca:	bf00      	nop
    b5cc:	200033c4 	.word	0x200033c4
    b5d0:	0000b515 	.word	0x0000b515

0000b5d4 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    b5d4:	b580      	push	{r7, lr}
    b5d6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    b5d8:	4b03      	ldr	r3, [pc, #12]	; (b5e8 <TC1_Handler+0x14>)
    b5da:	681b      	ldr	r3, [r3, #0]
    b5dc:	4618      	mov	r0, r3
    b5de:	4b03      	ldr	r3, [pc, #12]	; (b5ec <TC1_Handler+0x18>)
    b5e0:	4798      	blx	r3
}
    b5e2:	bf00      	nop
    b5e4:	bd80      	pop	{r7, pc}
    b5e6:	bf00      	nop
    b5e8:	200033c8 	.word	0x200033c8
    b5ec:	0000b515 	.word	0x0000b515

0000b5f0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    b5f0:	b580      	push	{r7, lr}
    b5f2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    b5f4:	4b03      	ldr	r3, [pc, #12]	; (b604 <TC2_Handler+0x14>)
    b5f6:	681b      	ldr	r3, [r3, #0]
    b5f8:	4618      	mov	r0, r3
    b5fa:	4b03      	ldr	r3, [pc, #12]	; (b608 <TC2_Handler+0x18>)
    b5fc:	4798      	blx	r3
}
    b5fe:	bf00      	nop
    b600:	bd80      	pop	{r7, pc}
    b602:	bf00      	nop
    b604:	200033cc 	.word	0x200033cc
    b608:	0000b515 	.word	0x0000b515

0000b60c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    b60c:	b580      	push	{r7, lr}
    b60e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    b610:	4b03      	ldr	r3, [pc, #12]	; (b620 <TC3_Handler+0x14>)
    b612:	681b      	ldr	r3, [r3, #0]
    b614:	4618      	mov	r0, r3
    b616:	4b03      	ldr	r3, [pc, #12]	; (b624 <TC3_Handler+0x18>)
    b618:	4798      	blx	r3
}
    b61a:	bf00      	nop
    b61c:	bd80      	pop	{r7, pc}
    b61e:	bf00      	nop
    b620:	200033d0 	.word	0x200033d0
    b624:	0000b515 	.word	0x0000b515

0000b628 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    b628:	b580      	push	{r7, lr}
    b62a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    b62c:	4b03      	ldr	r3, [pc, #12]	; (b63c <TC7_Handler+0x14>)
    b62e:	681b      	ldr	r3, [r3, #0]
    b630:	4618      	mov	r0, r3
    b632:	4b03      	ldr	r3, [pc, #12]	; (b640 <TC7_Handler+0x18>)
    b634:	4798      	blx	r3
}
    b636:	bf00      	nop
    b638:	bd80      	pop	{r7, pc}
    b63a:	bf00      	nop
    b63c:	200033d4 	.word	0x200033d4
    b640:	0000b54d 	.word	0x0000b54d

0000b644 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    b644:	b580      	push	{r7, lr}
    b646:	b084      	sub	sp, #16
    b648:	af00      	add	r7, sp, #0
    b64a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    b64c:	6878      	ldr	r0, [r7, #4]
    b64e:	4b13      	ldr	r3, [pc, #76]	; (b69c <get_tc_index+0x58>)
    b650:	4798      	blx	r3
    b652:	4603      	mov	r3, r0
    b654:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b656:	2300      	movs	r3, #0
    b658:	73fb      	strb	r3, [r7, #15]
    b65a:	e010      	b.n	b67e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    b65c:	7bfa      	ldrb	r2, [r7, #15]
    b65e:	4910      	ldr	r1, [pc, #64]	; (b6a0 <get_tc_index+0x5c>)
    b660:	4613      	mov	r3, r2
    b662:	009b      	lsls	r3, r3, #2
    b664:	4413      	add	r3, r2
    b666:	009b      	lsls	r3, r3, #2
    b668:	440b      	add	r3, r1
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	7bba      	ldrb	r2, [r7, #14]
    b66e:	429a      	cmp	r2, r3
    b670:	d102      	bne.n	b678 <get_tc_index+0x34>
			return i;
    b672:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b676:	e00d      	b.n	b694 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b678:	7bfb      	ldrb	r3, [r7, #15]
    b67a:	3301      	adds	r3, #1
    b67c:	73fb      	strb	r3, [r7, #15]
    b67e:	7bfb      	ldrb	r3, [r7, #15]
    b680:	2b04      	cmp	r3, #4
    b682:	d9eb      	bls.n	b65c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    b684:	f240 2206 	movw	r2, #518	; 0x206
    b688:	4906      	ldr	r1, [pc, #24]	; (b6a4 <get_tc_index+0x60>)
    b68a:	2000      	movs	r0, #0
    b68c:	4b06      	ldr	r3, [pc, #24]	; (b6a8 <get_tc_index+0x64>)
    b68e:	4798      	blx	r3
	return -1;
    b690:	f04f 33ff 	mov.w	r3, #4294967295
}
    b694:	4618      	mov	r0, r3
    b696:	3710      	adds	r7, #16
    b698:	46bd      	mov	sp, r7
    b69a:	bd80      	pop	{r7, pc}
    b69c:	0000b731 	.word	0x0000b731
    b6a0:	200000ac 	.word	0x200000ac
    b6a4:	0001adb4 	.word	0x0001adb4
    b6a8:	000062c5 	.word	0x000062c5

0000b6ac <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    b6ac:	b480      	push	{r7}
    b6ae:	b083      	sub	sp, #12
    b6b0:	af00      	add	r7, sp, #0
    b6b2:	6078      	str	r0, [r7, #4]
    b6b4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    b6b6:	687b      	ldr	r3, [r7, #4]
    b6b8:	4a13      	ldr	r2, [pc, #76]	; (b708 <_tc_init_irq_param+0x5c>)
    b6ba:	4293      	cmp	r3, r2
    b6bc:	d102      	bne.n	b6c4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    b6be:	4a13      	ldr	r2, [pc, #76]	; (b70c <_tc_init_irq_param+0x60>)
    b6c0:	683b      	ldr	r3, [r7, #0]
    b6c2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	4a12      	ldr	r2, [pc, #72]	; (b710 <_tc_init_irq_param+0x64>)
    b6c8:	4293      	cmp	r3, r2
    b6ca:	d102      	bne.n	b6d2 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    b6cc:	4a11      	ldr	r2, [pc, #68]	; (b714 <_tc_init_irq_param+0x68>)
    b6ce:	683b      	ldr	r3, [r7, #0]
    b6d0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    b6d2:	687b      	ldr	r3, [r7, #4]
    b6d4:	4a10      	ldr	r2, [pc, #64]	; (b718 <_tc_init_irq_param+0x6c>)
    b6d6:	4293      	cmp	r3, r2
    b6d8:	d102      	bne.n	b6e0 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    b6da:	4a10      	ldr	r2, [pc, #64]	; (b71c <_tc_init_irq_param+0x70>)
    b6dc:	683b      	ldr	r3, [r7, #0]
    b6de:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	4a0f      	ldr	r2, [pc, #60]	; (b720 <_tc_init_irq_param+0x74>)
    b6e4:	4293      	cmp	r3, r2
    b6e6:	d102      	bne.n	b6ee <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    b6e8:	4a0e      	ldr	r2, [pc, #56]	; (b724 <_tc_init_irq_param+0x78>)
    b6ea:	683b      	ldr	r3, [r7, #0]
    b6ec:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    b6ee:	687b      	ldr	r3, [r7, #4]
    b6f0:	4a0d      	ldr	r2, [pc, #52]	; (b728 <_tc_init_irq_param+0x7c>)
    b6f2:	4293      	cmp	r3, r2
    b6f4:	d102      	bne.n	b6fc <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    b6f6:	4a0d      	ldr	r2, [pc, #52]	; (b72c <_tc_init_irq_param+0x80>)
    b6f8:	683b      	ldr	r3, [r7, #0]
    b6fa:	6013      	str	r3, [r2, #0]
	}
}
    b6fc:	bf00      	nop
    b6fe:	370c      	adds	r7, #12
    b700:	46bd      	mov	sp, r7
    b702:	f85d 7b04 	ldr.w	r7, [sp], #4
    b706:	4770      	bx	lr
    b708:	40003800 	.word	0x40003800
    b70c:	200033c4 	.word	0x200033c4
    b710:	40003c00 	.word	0x40003c00
    b714:	200033c8 	.word	0x200033c8
    b718:	4101a000 	.word	0x4101a000
    b71c:	200033cc 	.word	0x200033cc
    b720:	4101c000 	.word	0x4101c000
    b724:	200033d0 	.word	0x200033d0
    b728:	43001800 	.word	0x43001800
    b72c:	200033d4 	.word	0x200033d4

0000b730 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    b730:	b4b0      	push	{r4, r5, r7}
    b732:	b08d      	sub	sp, #52	; 0x34
    b734:	af00      	add	r7, sp, #0
    b736:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    b738:	4b13      	ldr	r3, [pc, #76]	; (b788 <_get_hardware_offset+0x58>)
    b73a:	f107 040c 	add.w	r4, r7, #12
    b73e:	461d      	mov	r5, r3
    b740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b744:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b74c:	2300      	movs	r3, #0
    b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    b750:	e010      	b.n	b774 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b754:	009b      	lsls	r3, r3, #2
    b756:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b75a:	4413      	add	r3, r2
    b75c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b760:	461a      	mov	r2, r3
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	429a      	cmp	r2, r3
    b766:	d102      	bne.n	b76e <_get_hardware_offset+0x3e>
			return i;
    b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b76a:	b2db      	uxtb	r3, r3
    b76c:	e006      	b.n	b77c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b770:	3301      	adds	r3, #1
    b772:	62fb      	str	r3, [r7, #44]	; 0x2c
    b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b776:	2b07      	cmp	r3, #7
    b778:	d9eb      	bls.n	b752 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    b77a:	2300      	movs	r3, #0
}
    b77c:	4618      	mov	r0, r3
    b77e:	3734      	adds	r7, #52	; 0x34
    b780:	46bd      	mov	sp, r7
    b782:	bcb0      	pop	{r4, r5, r7}
    b784:	4770      	bx	lr
    b786:	bf00      	nop
    b788:	0001adc8 	.word	0x0001adc8

0000b78c <__NVIC_EnableIRQ>:
{
    b78c:	b480      	push	{r7}
    b78e:	b083      	sub	sp, #12
    b790:	af00      	add	r7, sp, #0
    b792:	4603      	mov	r3, r0
    b794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b79a:	2b00      	cmp	r3, #0
    b79c:	db0b      	blt.n	b7b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b79e:	4909      	ldr	r1, [pc, #36]	; (b7c4 <__NVIC_EnableIRQ+0x38>)
    b7a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b7a4:	095b      	lsrs	r3, r3, #5
    b7a6:	88fa      	ldrh	r2, [r7, #6]
    b7a8:	f002 021f 	and.w	r2, r2, #31
    b7ac:	2001      	movs	r0, #1
    b7ae:	fa00 f202 	lsl.w	r2, r0, r2
    b7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b7b6:	bf00      	nop
    b7b8:	370c      	adds	r7, #12
    b7ba:	46bd      	mov	sp, r7
    b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7c0:	4770      	bx	lr
    b7c2:	bf00      	nop
    b7c4:	e000e100 	.word	0xe000e100

0000b7c8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    b7c8:	b480      	push	{r7}
    b7ca:	b087      	sub	sp, #28
    b7cc:	af00      	add	r7, sp, #0
    b7ce:	60f8      	str	r0, [r7, #12]
    b7d0:	460b      	mov	r3, r1
    b7d2:	607a      	str	r2, [r7, #4]
    b7d4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    b7d6:	7afa      	ldrb	r2, [r7, #11]
    b7d8:	68f9      	ldr	r1, [r7, #12]
    b7da:	4613      	mov	r3, r2
    b7dc:	009b      	lsls	r3, r3, #2
    b7de:	4413      	add	r3, r2
    b7e0:	009b      	lsls	r3, r3, #2
    b7e2:	440b      	add	r3, r1
    b7e4:	3340      	adds	r3, #64	; 0x40
    b7e6:	681b      	ldr	r3, [r3, #0]
    b7e8:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    b7ea:	697a      	ldr	r2, [r7, #20]
    b7ec:	687b      	ldr	r3, [r7, #4]
    b7ee:	4013      	ands	r3, r2
    b7f0:	617b      	str	r3, [r7, #20]
	return tmp;
    b7f2:	697b      	ldr	r3, [r7, #20]
}
    b7f4:	4618      	mov	r0, r3
    b7f6:	371c      	adds	r7, #28
    b7f8:	46bd      	mov	sp, r7
    b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7fe:	4770      	bx	lr

0000b800 <hri_oscctrl_get_STATUS_reg>:
{
    b800:	b480      	push	{r7}
    b802:	b085      	sub	sp, #20
    b804:	af00      	add	r7, sp, #0
    b806:	6078      	str	r0, [r7, #4]
    b808:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	691b      	ldr	r3, [r3, #16]
    b80e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b810:	68fa      	ldr	r2, [r7, #12]
    b812:	683b      	ldr	r3, [r7, #0]
    b814:	4013      	ands	r3, r2
    b816:	60fb      	str	r3, [r7, #12]
	return tmp;
    b818:	68fb      	ldr	r3, [r7, #12]
}
    b81a:	4618      	mov	r0, r3
    b81c:	3714      	adds	r7, #20
    b81e:	46bd      	mov	sp, r7
    b820:	f85d 7b04 	ldr.w	r7, [sp], #4
    b824:	4770      	bx	lr

0000b826 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    b826:	b480      	push	{r7}
    b828:	b085      	sub	sp, #20
    b82a:	af00      	add	r7, sp, #0
    b82c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    b82e:	687b      	ldr	r3, [r7, #4]
    b830:	f893 3020 	ldrb.w	r3, [r3, #32]
    b834:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    b836:	7bfb      	ldrb	r3, [r7, #15]
    b838:	f003 0301 	and.w	r3, r3, #1
    b83c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b83e:	7bfb      	ldrb	r3, [r7, #15]
    b840:	2b00      	cmp	r3, #0
    b842:	bf14      	ite	ne
    b844:	2301      	movne	r3, #1
    b846:	2300      	moveq	r3, #0
    b848:	b2db      	uxtb	r3, r3
}
    b84a:	4618      	mov	r0, r3
    b84c:	3714      	adds	r7, #20
    b84e:	46bd      	mov	sp, r7
    b850:	f85d 7b04 	ldr.w	r7, [sp], #4
    b854:	4770      	bx	lr

0000b856 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    b856:	b480      	push	{r7}
    b858:	b083      	sub	sp, #12
    b85a:	af00      	add	r7, sp, #0
    b85c:	6078      	str	r0, [r7, #4]
    b85e:	460b      	mov	r3, r1
    b860:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b862:	bf00      	nop
    b864:	687b      	ldr	r3, [r7, #4]
    b866:	789b      	ldrb	r3, [r3, #2]
    b868:	b2da      	uxtb	r2, r3
    b86a:	78fb      	ldrb	r3, [r7, #3]
    b86c:	4013      	ands	r3, r2
    b86e:	b2db      	uxtb	r3, r3
    b870:	2b00      	cmp	r3, #0
    b872:	d1f7      	bne.n	b864 <hri_usb_wait_for_sync+0xe>
	};
}
    b874:	bf00      	nop
    b876:	370c      	adds	r7, #12
    b878:	46bd      	mov	sp, r7
    b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b87e:	4770      	bx	lr

0000b880 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    b880:	b480      	push	{r7}
    b882:	b083      	sub	sp, #12
    b884:	af00      	add	r7, sp, #0
    b886:	6078      	str	r0, [r7, #4]
    b888:	460b      	mov	r3, r1
    b88a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    b88c:	687b      	ldr	r3, [r7, #4]
    b88e:	789b      	ldrb	r3, [r3, #2]
    b890:	b2da      	uxtb	r2, r3
    b892:	78fb      	ldrb	r3, [r7, #3]
    b894:	4013      	ands	r3, r2
    b896:	b2db      	uxtb	r3, r3
    b898:	2b00      	cmp	r3, #0
    b89a:	bf14      	ite	ne
    b89c:	2301      	movne	r3, #1
    b89e:	2300      	moveq	r3, #0
    b8a0:	b2db      	uxtb	r3, r3
}
    b8a2:	4618      	mov	r0, r3
    b8a4:	370c      	adds	r7, #12
    b8a6:	46bd      	mov	sp, r7
    b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ac:	4770      	bx	lr

0000b8ae <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    b8ae:	b480      	push	{r7}
    b8b0:	b085      	sub	sp, #20
    b8b2:	af00      	add	r7, sp, #0
    b8b4:	6078      	str	r0, [r7, #4]
    b8b6:	460b      	mov	r3, r1
    b8b8:	70fb      	strb	r3, [r7, #3]
    b8ba:	4613      	mov	r3, r2
    b8bc:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b8be:	78fb      	ldrb	r3, [r7, #3]
    b8c0:	687a      	ldr	r2, [r7, #4]
    b8c2:	3308      	adds	r3, #8
    b8c4:	015b      	lsls	r3, r3, #5
    b8c6:	4413      	add	r3, r2
    b8c8:	3307      	adds	r3, #7
    b8ca:	781b      	ldrb	r3, [r3, #0]
    b8cc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b8ce:	7bfa      	ldrb	r2, [r7, #15]
    b8d0:	78bb      	ldrb	r3, [r7, #2]
    b8d2:	4013      	ands	r3, r2
    b8d4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
    b8d8:	4618      	mov	r0, r3
    b8da:	3714      	adds	r7, #20
    b8dc:	46bd      	mov	sp, r7
    b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8e2:	4770      	bx	lr

0000b8e4 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    b8e4:	b480      	push	{r7}
    b8e6:	b083      	sub	sp, #12
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	6078      	str	r0, [r7, #4]
    b8ec:	460b      	mov	r3, r1
    b8ee:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b8f0:	78fb      	ldrb	r3, [r7, #3]
    b8f2:	687a      	ldr	r2, [r7, #4]
    b8f4:	3308      	adds	r3, #8
    b8f6:	015b      	lsls	r3, r3, #5
    b8f8:	4413      	add	r3, r2
    b8fa:	3307      	adds	r3, #7
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	b2db      	uxtb	r3, r3
}
    b900:	4618      	mov	r0, r3
    b902:	370c      	adds	r7, #12
    b904:	46bd      	mov	sp, r7
    b906:	f85d 7b04 	ldr.w	r7, [sp], #4
    b90a:	4770      	bx	lr

0000b90c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    b90c:	b480      	push	{r7}
    b90e:	b083      	sub	sp, #12
    b910:	af00      	add	r7, sp, #0
    b912:	6078      	str	r0, [r7, #4]
    b914:	460b      	mov	r3, r1
    b916:	70fb      	strb	r3, [r7, #3]
    b918:	4613      	mov	r3, r2
    b91a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b91c:	78fb      	ldrb	r3, [r7, #3]
    b91e:	687a      	ldr	r2, [r7, #4]
    b920:	3308      	adds	r3, #8
    b922:	015b      	lsls	r3, r3, #5
    b924:	4413      	add	r3, r2
    b926:	3307      	adds	r3, #7
    b928:	78ba      	ldrb	r2, [r7, #2]
    b92a:	701a      	strb	r2, [r3, #0]
}
    b92c:	bf00      	nop
    b92e:	370c      	adds	r7, #12
    b930:	46bd      	mov	sp, r7
    b932:	f85d 7b04 	ldr.w	r7, [sp], #4
    b936:	4770      	bx	lr

0000b938 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    b938:	b480      	push	{r7}
    b93a:	b083      	sub	sp, #12
    b93c:	af00      	add	r7, sp, #0
    b93e:	6078      	str	r0, [r7, #4]
    b940:	460b      	mov	r3, r1
    b942:	70fb      	strb	r3, [r7, #3]
    b944:	4613      	mov	r3, r2
    b946:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b948:	78fb      	ldrb	r3, [r7, #3]
    b94a:	687a      	ldr	r2, [r7, #4]
    b94c:	3308      	adds	r3, #8
    b94e:	015b      	lsls	r3, r3, #5
    b950:	4413      	add	r3, r2
    b952:	3305      	adds	r3, #5
    b954:	78ba      	ldrb	r2, [r7, #2]
    b956:	701a      	strb	r2, [r3, #0]
}
    b958:	bf00      	nop
    b95a:	370c      	adds	r7, #12
    b95c:	46bd      	mov	sp, r7
    b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b962:	4770      	bx	lr

0000b964 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    b964:	b480      	push	{r7}
    b966:	b083      	sub	sp, #12
    b968:	af00      	add	r7, sp, #0
    b96a:	6078      	str	r0, [r7, #4]
    b96c:	460b      	mov	r3, r1
    b96e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b970:	78fb      	ldrb	r3, [r7, #3]
    b972:	687a      	ldr	r2, [r7, #4]
    b974:	3308      	adds	r3, #8
    b976:	015b      	lsls	r3, r3, #5
    b978:	4413      	add	r3, r2
    b97a:	3306      	adds	r3, #6
    b97c:	781b      	ldrb	r3, [r3, #0]
    b97e:	b2db      	uxtb	r3, r3
}
    b980:	4618      	mov	r0, r3
    b982:	370c      	adds	r7, #12
    b984:	46bd      	mov	sp, r7
    b986:	f85d 7b04 	ldr.w	r7, [sp], #4
    b98a:	4770      	bx	lr

0000b98c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    b98c:	b480      	push	{r7}
    b98e:	b083      	sub	sp, #12
    b990:	af00      	add	r7, sp, #0
    b992:	6078      	str	r0, [r7, #4]
    b994:	460b      	mov	r3, r1
    b996:	70fb      	strb	r3, [r7, #3]
    b998:	4613      	mov	r3, r2
    b99a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b99c:	78fb      	ldrb	r3, [r7, #3]
    b99e:	687a      	ldr	r2, [r7, #4]
    b9a0:	3308      	adds	r3, #8
    b9a2:	015b      	lsls	r3, r3, #5
    b9a4:	4413      	add	r3, r2
    b9a6:	3304      	adds	r3, #4
    b9a8:	78ba      	ldrb	r2, [r7, #2]
    b9aa:	701a      	strb	r2, [r3, #0]
}
    b9ac:	bf00      	nop
    b9ae:	370c      	adds	r7, #12
    b9b0:	46bd      	mov	sp, r7
    b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9b6:	4770      	bx	lr

0000b9b8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    b9b8:	b480      	push	{r7}
    b9ba:	b083      	sub	sp, #12
    b9bc:	af00      	add	r7, sp, #0
    b9be:	6078      	str	r0, [r7, #4]
    b9c0:	460b      	mov	r3, r1
    b9c2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    b9c4:	78fb      	ldrb	r3, [r7, #3]
    b9c6:	687a      	ldr	r2, [r7, #4]
    b9c8:	015b      	lsls	r3, r3, #5
    b9ca:	4413      	add	r3, r2
    b9cc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b9d0:	2210      	movs	r2, #16
    b9d2:	701a      	strb	r2, [r3, #0]
}
    b9d4:	bf00      	nop
    b9d6:	370c      	adds	r7, #12
    b9d8:	46bd      	mov	sp, r7
    b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9de:	4770      	bx	lr

0000b9e0 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    b9e0:	b480      	push	{r7}
    b9e2:	b083      	sub	sp, #12
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	6078      	str	r0, [r7, #4]
    b9e8:	460b      	mov	r3, r1
    b9ea:	70fb      	strb	r3, [r7, #3]
    b9ec:	4613      	mov	r3, r2
    b9ee:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b9f0:	78fb      	ldrb	r3, [r7, #3]
    b9f2:	687a      	ldr	r2, [r7, #4]
    b9f4:	015b      	lsls	r3, r3, #5
    b9f6:	4413      	add	r3, r2
    b9f8:	f203 1309 	addw	r3, r3, #265	; 0x109
    b9fc:	78ba      	ldrb	r2, [r7, #2]
    b9fe:	701a      	strb	r2, [r3, #0]
}
    ba00:	bf00      	nop
    ba02:	370c      	adds	r7, #12
    ba04:	46bd      	mov	sp, r7
    ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba0a:	4770      	bx	lr

0000ba0c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    ba0c:	b480      	push	{r7}
    ba0e:	b083      	sub	sp, #12
    ba10:	af00      	add	r7, sp, #0
    ba12:	6078      	str	r0, [r7, #4]
    ba14:	460b      	mov	r3, r1
    ba16:	70fb      	strb	r3, [r7, #3]
    ba18:	4613      	mov	r3, r2
    ba1a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ba1c:	78fb      	ldrb	r3, [r7, #3]
    ba1e:	687a      	ldr	r2, [r7, #4]
    ba20:	015b      	lsls	r3, r3, #5
    ba22:	4413      	add	r3, r2
    ba24:	f503 7384 	add.w	r3, r3, #264	; 0x108
    ba28:	78ba      	ldrb	r2, [r7, #2]
    ba2a:	701a      	strb	r2, [r3, #0]
}
    ba2c:	bf00      	nop
    ba2e:	370c      	adds	r7, #12
    ba30:	46bd      	mov	sp, r7
    ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba36:	4770      	bx	lr

0000ba38 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ba38:	b480      	push	{r7}
    ba3a:	b085      	sub	sp, #20
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	6078      	str	r0, [r7, #4]
    ba40:	460b      	mov	r3, r1
    ba42:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ba44:	78fb      	ldrb	r3, [r7, #3]
    ba46:	687a      	ldr	r2, [r7, #4]
    ba48:	3308      	adds	r3, #8
    ba4a:	015b      	lsls	r3, r3, #5
    ba4c:	4413      	add	r3, r2
    ba4e:	781b      	ldrb	r3, [r3, #0]
    ba50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    ba52:	7bfb      	ldrb	r3, [r7, #15]
    ba54:	f003 0307 	and.w	r3, r3, #7
    ba58:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ba5a:	7bfb      	ldrb	r3, [r7, #15]
}
    ba5c:	4618      	mov	r0, r3
    ba5e:	3714      	adds	r7, #20
    ba60:	46bd      	mov	sp, r7
    ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba66:	4770      	bx	lr

0000ba68 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ba68:	b480      	push	{r7}
    ba6a:	b085      	sub	sp, #20
    ba6c:	af00      	add	r7, sp, #0
    ba6e:	6078      	str	r0, [r7, #4]
    ba70:	460b      	mov	r3, r1
    ba72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ba74:	78fb      	ldrb	r3, [r7, #3]
    ba76:	687a      	ldr	r2, [r7, #4]
    ba78:	3308      	adds	r3, #8
    ba7a:	015b      	lsls	r3, r3, #5
    ba7c:	4413      	add	r3, r2
    ba7e:	781b      	ldrb	r3, [r3, #0]
    ba80:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    ba82:	7bfb      	ldrb	r3, [r7, #15]
    ba84:	091b      	lsrs	r3, r3, #4
    ba86:	b2db      	uxtb	r3, r3
    ba88:	f003 0307 	and.w	r3, r3, #7
    ba8c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ba8e:	7bfb      	ldrb	r3, [r7, #15]
}
    ba90:	4618      	mov	r0, r3
    ba92:	3714      	adds	r7, #20
    ba94:	46bd      	mov	sp, r7
    ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba9a:	4770      	bx	lr

0000ba9c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    ba9c:	b480      	push	{r7}
    ba9e:	b083      	sub	sp, #12
    baa0:	af00      	add	r7, sp, #0
    baa2:	6078      	str	r0, [r7, #4]
    baa4:	460b      	mov	r3, r1
    baa6:	70fb      	strb	r3, [r7, #3]
    baa8:	4613      	mov	r3, r2
    baaa:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    baac:	78fb      	ldrb	r3, [r7, #3]
    baae:	687a      	ldr	r2, [r7, #4]
    bab0:	3308      	adds	r3, #8
    bab2:	015b      	lsls	r3, r3, #5
    bab4:	4413      	add	r3, r2
    bab6:	78ba      	ldrb	r2, [r7, #2]
    bab8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    baba:	bf00      	nop
    babc:	370c      	adds	r7, #12
    babe:	46bd      	mov	sp, r7
    bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac4:	4770      	bx	lr

0000bac6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    bac6:	b480      	push	{r7}
    bac8:	b083      	sub	sp, #12
    baca:	af00      	add	r7, sp, #0
    bacc:	6078      	str	r0, [r7, #4]
    bace:	460b      	mov	r3, r1
    bad0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bad2:	78fb      	ldrb	r3, [r7, #3]
    bad4:	687a      	ldr	r2, [r7, #4]
    bad6:	3308      	adds	r3, #8
    bad8:	015b      	lsls	r3, r3, #5
    bada:	4413      	add	r3, r2
    badc:	781b      	ldrb	r3, [r3, #0]
    bade:	b2db      	uxtb	r3, r3
}
    bae0:	4618      	mov	r0, r3
    bae2:	370c      	adds	r7, #12
    bae4:	46bd      	mov	sp, r7
    bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    baea:	4770      	bx	lr

0000baec <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    baec:	b480      	push	{r7}
    baee:	b083      	sub	sp, #12
    baf0:	af00      	add	r7, sp, #0
    baf2:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    baf4:	687b      	ldr	r3, [r7, #4]
    baf6:	8b9b      	ldrh	r3, [r3, #28]
    baf8:	b29b      	uxth	r3, r3
}
    bafa:	4618      	mov	r0, r3
    bafc:	370c      	adds	r7, #12
    bafe:	46bd      	mov	sp, r7
    bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb04:	4770      	bx	lr

0000bb06 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    bb06:	b480      	push	{r7}
    bb08:	b083      	sub	sp, #12
    bb0a:	af00      	add	r7, sp, #0
    bb0c:	6078      	str	r0, [r7, #4]
    bb0e:	460b      	mov	r3, r1
    bb10:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bb12:	687b      	ldr	r3, [r7, #4]
    bb14:	887a      	ldrh	r2, [r7, #2]
    bb16:	839a      	strh	r2, [r3, #28]
}
    bb18:	bf00      	nop
    bb1a:	370c      	adds	r7, #12
    bb1c:	46bd      	mov	sp, r7
    bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb22:	4770      	bx	lr

0000bb24 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bb24:	b480      	push	{r7}
    bb26:	b083      	sub	sp, #12
    bb28:	af00      	add	r7, sp, #0
    bb2a:	6078      	str	r0, [r7, #4]
    bb2c:	460b      	mov	r3, r1
    bb2e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bb30:	687b      	ldr	r3, [r7, #4]
    bb32:	887a      	ldrh	r2, [r7, #2]
    bb34:	831a      	strh	r2, [r3, #24]
}
    bb36:	bf00      	nop
    bb38:	370c      	adds	r7, #12
    bb3a:	46bd      	mov	sp, r7
    bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb40:	4770      	bx	lr

0000bb42 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    bb42:	b480      	push	{r7}
    bb44:	b083      	sub	sp, #12
    bb46:	af00      	add	r7, sp, #0
    bb48:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    bb4a:	687b      	ldr	r3, [r7, #4]
    bb4c:	8b1b      	ldrh	r3, [r3, #24]
    bb4e:	b29b      	uxth	r3, r3
}
    bb50:	4618      	mov	r0, r3
    bb52:	370c      	adds	r7, #12
    bb54:	46bd      	mov	sp, r7
    bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb5a:	4770      	bx	lr

0000bb5c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bb5c:	b480      	push	{r7}
    bb5e:	b083      	sub	sp, #12
    bb60:	af00      	add	r7, sp, #0
    bb62:	6078      	str	r0, [r7, #4]
    bb64:	460b      	mov	r3, r1
    bb66:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bb68:	687b      	ldr	r3, [r7, #4]
    bb6a:	887a      	ldrh	r2, [r7, #2]
    bb6c:	829a      	strh	r2, [r3, #20]
}
    bb6e:	bf00      	nop
    bb70:	370c      	adds	r7, #12
    bb72:	46bd      	mov	sp, r7
    bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb78:	4770      	bx	lr

0000bb7a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    bb7a:	b480      	push	{r7}
    bb7c:	b085      	sub	sp, #20
    bb7e:	af00      	add	r7, sp, #0
    bb80:	6078      	str	r0, [r7, #4]
    bb82:	460b      	mov	r3, r1
    bb84:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    bb86:	687b      	ldr	r3, [r7, #4]
    bb88:	789b      	ldrb	r3, [r3, #2]
    bb8a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bb8c:	7bfa      	ldrb	r2, [r7, #15]
    bb8e:	78fb      	ldrb	r3, [r7, #3]
    bb90:	4013      	ands	r3, r2
    bb92:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bb94:	7bfb      	ldrb	r3, [r7, #15]
}
    bb96:	4618      	mov	r0, r3
    bb98:	3714      	adds	r7, #20
    bb9a:	46bd      	mov	sp, r7
    bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bba0:	4770      	bx	lr
	...

0000bba4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    bba4:	b580      	push	{r7, lr}
    bba6:	b082      	sub	sp, #8
    bba8:	af00      	add	r7, sp, #0
    bbaa:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    bbac:	687b      	ldr	r3, [r7, #4]
    bbae:	781b      	ldrb	r3, [r3, #0]
    bbb0:	b2db      	uxtb	r3, r3
    bbb2:	f023 0302 	bic.w	r3, r3, #2
    bbb6:	b2da      	uxtb	r2, r3
    bbb8:	687b      	ldr	r3, [r7, #4]
    bbba:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    bbbc:	2103      	movs	r1, #3
    bbbe:	6878      	ldr	r0, [r7, #4]
    bbc0:	4b02      	ldr	r3, [pc, #8]	; (bbcc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    bbc2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bbc4:	bf00      	nop
    bbc6:	3708      	adds	r7, #8
    bbc8:	46bd      	mov	sp, r7
    bbca:	bd80      	pop	{r7, pc}
    bbcc:	0000b857 	.word	0x0000b857

0000bbd0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    bbd0:	b580      	push	{r7, lr}
    bbd2:	b084      	sub	sp, #16
    bbd4:	af00      	add	r7, sp, #0
    bbd6:	6078      	str	r0, [r7, #4]
    bbd8:	460b      	mov	r3, r1
    bbda:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bbdc:	2103      	movs	r1, #3
    bbde:	6878      	ldr	r0, [r7, #4]
    bbe0:	4b06      	ldr	r3, [pc, #24]	; (bbfc <hri_usb_get_CTRLA_reg+0x2c>)
    bbe2:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    bbe4:	687b      	ldr	r3, [r7, #4]
    bbe6:	781b      	ldrb	r3, [r3, #0]
    bbe8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bbea:	7bfa      	ldrb	r2, [r7, #15]
    bbec:	78fb      	ldrb	r3, [r7, #3]
    bbee:	4013      	ands	r3, r2
    bbf0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
    bbf4:	4618      	mov	r0, r3
    bbf6:	3710      	adds	r7, #16
    bbf8:	46bd      	mov	sp, r7
    bbfa:	bd80      	pop	{r7, pc}
    bbfc:	0000b857 	.word	0x0000b857

0000bc00 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    bc00:	b580      	push	{r7, lr}
    bc02:	b082      	sub	sp, #8
    bc04:	af00      	add	r7, sp, #0
    bc06:	6078      	str	r0, [r7, #4]
    bc08:	460b      	mov	r3, r1
    bc0a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    bc0c:	687b      	ldr	r3, [r7, #4]
    bc0e:	78fa      	ldrb	r2, [r7, #3]
    bc10:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bc12:	2103      	movs	r1, #3
    bc14:	6878      	ldr	r0, [r7, #4]
    bc16:	4b03      	ldr	r3, [pc, #12]	; (bc24 <hri_usb_write_CTRLA_reg+0x24>)
    bc18:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bc1a:	bf00      	nop
    bc1c:	3708      	adds	r7, #8
    bc1e:	46bd      	mov	sp, r7
    bc20:	bd80      	pop	{r7, pc}
    bc22:	bf00      	nop
    bc24:	0000b857 	.word	0x0000b857

0000bc28 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    bc28:	b580      	push	{r7, lr}
    bc2a:	b082      	sub	sp, #8
    bc2c:	af00      	add	r7, sp, #0
    bc2e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bc30:	2103      	movs	r1, #3
    bc32:	6878      	ldr	r0, [r7, #4]
    bc34:	4b04      	ldr	r3, [pc, #16]	; (bc48 <hri_usb_read_CTRLA_reg+0x20>)
    bc36:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    bc38:	687b      	ldr	r3, [r7, #4]
    bc3a:	781b      	ldrb	r3, [r3, #0]
    bc3c:	b2db      	uxtb	r3, r3
}
    bc3e:	4618      	mov	r0, r3
    bc40:	3708      	adds	r7, #8
    bc42:	46bd      	mov	sp, r7
    bc44:	bd80      	pop	{r7, pc}
    bc46:	bf00      	nop
    bc48:	0000b857 	.word	0x0000b857

0000bc4c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    bc4c:	b480      	push	{r7}
    bc4e:	b083      	sub	sp, #12
    bc50:	af00      	add	r7, sp, #0
    bc52:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    bc54:	687b      	ldr	r3, [r7, #4]
    bc56:	891b      	ldrh	r3, [r3, #8]
    bc58:	b29b      	uxth	r3, r3
    bc5a:	f023 0301 	bic.w	r3, r3, #1
    bc5e:	b29a      	uxth	r2, r3
    bc60:	687b      	ldr	r3, [r7, #4]
    bc62:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc64:	bf00      	nop
    bc66:	370c      	adds	r7, #12
    bc68:	46bd      	mov	sp, r7
    bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc6e:	4770      	bx	lr

0000bc70 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    bc70:	b480      	push	{r7}
    bc72:	b083      	sub	sp, #12
    bc74:	af00      	add	r7, sp, #0
    bc76:	6078      	str	r0, [r7, #4]
    bc78:	460b      	mov	r3, r1
    bc7a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    bc7c:	687b      	ldr	r3, [r7, #4]
    bc7e:	887a      	ldrh	r2, [r7, #2]
    bc80:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc82:	bf00      	nop
    bc84:	370c      	adds	r7, #12
    bc86:	46bd      	mov	sp, r7
    bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc8c:	4770      	bx	lr

0000bc8e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    bc8e:	b480      	push	{r7}
    bc90:	b083      	sub	sp, #12
    bc92:	af00      	add	r7, sp, #0
    bc94:	6078      	str	r0, [r7, #4]
    bc96:	460b      	mov	r3, r1
    bc98:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    bc9a:	687b      	ldr	r3, [r7, #4]
    bc9c:	78fa      	ldrb	r2, [r7, #3]
    bc9e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    bca0:	bf00      	nop
    bca2:	370c      	adds	r7, #12
    bca4:	46bd      	mov	sp, r7
    bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcaa:	4770      	bx	lr

0000bcac <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    bcac:	b480      	push	{r7}
    bcae:	b083      	sub	sp, #12
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	6078      	str	r0, [r7, #4]
    bcb4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    bcb6:	687b      	ldr	r3, [r7, #4]
    bcb8:	683a      	ldr	r2, [r7, #0]
    bcba:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    bcbc:	bf00      	nop
    bcbe:	370c      	adds	r7, #12
    bcc0:	46bd      	mov	sp, r7
    bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcc6:	4770      	bx	lr

0000bcc8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    bcc8:	b480      	push	{r7}
    bcca:	b083      	sub	sp, #12
    bccc:	af00      	add	r7, sp, #0
    bcce:	6078      	str	r0, [r7, #4]
    bcd0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    bcd2:	2300      	movs	r3, #0
}
    bcd4:	4618      	mov	r0, r3
    bcd6:	370c      	adds	r7, #12
    bcd8:	46bd      	mov	sp, r7
    bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcde:	4770      	bx	lr

0000bce0 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    bce0:	b480      	push	{r7}
    bce2:	b085      	sub	sp, #20
    bce4:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    bce6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bcea:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    bcec:	4b28      	ldr	r3, [pc, #160]	; (bd90 <_usb_load_calib+0xb0>)
    bcee:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    bcf0:	f003 031f 	and.w	r3, r3, #31
    bcf4:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    bcf6:	4b26      	ldr	r3, [pc, #152]	; (bd90 <_usb_load_calib+0xb0>)
    bcf8:	681b      	ldr	r3, [r3, #0]
    bcfa:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    bcfc:	f003 031f 	and.w	r3, r3, #31
    bd00:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    bd02:	4b23      	ldr	r3, [pc, #140]	; (bd90 <_usb_load_calib+0xb0>)
    bd04:	681b      	ldr	r3, [r3, #0]
    bd06:	0a9b      	lsrs	r3, r3, #10
    bd08:	f003 0307 	and.w	r3, r3, #7
    bd0c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    bd0e:	68fb      	ldr	r3, [r7, #12]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d002      	beq.n	bd1a <_usb_load_calib+0x3a>
    bd14:	68fb      	ldr	r3, [r7, #12]
    bd16:	2b1f      	cmp	r3, #31
    bd18:	d101      	bne.n	bd1e <_usb_load_calib+0x3e>
		pad_transn = 9;
    bd1a:	2309      	movs	r3, #9
    bd1c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    bd1e:	68bb      	ldr	r3, [r7, #8]
    bd20:	2b00      	cmp	r3, #0
    bd22:	d002      	beq.n	bd2a <_usb_load_calib+0x4a>
    bd24:	68bb      	ldr	r3, [r7, #8]
    bd26:	2b1f      	cmp	r3, #31
    bd28:	d101      	bne.n	bd2e <_usb_load_calib+0x4e>
		pad_transp = 25;
    bd2a:	2319      	movs	r3, #25
    bd2c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    bd2e:	687b      	ldr	r3, [r7, #4]
    bd30:	2b00      	cmp	r3, #0
    bd32:	d002      	beq.n	bd3a <_usb_load_calib+0x5a>
    bd34:	687b      	ldr	r3, [r7, #4]
    bd36:	2b07      	cmp	r3, #7
    bd38:	d101      	bne.n	bd3e <_usb_load_calib+0x5e>
		pad_trim = 6;
    bd3a:	2306      	movs	r3, #6
    bd3c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    bd3e:	68fb      	ldr	r3, [r7, #12]
    bd40:	b29b      	uxth	r3, r3
    bd42:	019b      	lsls	r3, r3, #6
    bd44:	b29b      	uxth	r3, r3
    bd46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    bd4a:	b29a      	uxth	r2, r3
    bd4c:	68bb      	ldr	r3, [r7, #8]
    bd4e:	b29b      	uxth	r3, r3
    bd50:	f003 031f 	and.w	r3, r3, #31
    bd54:	b29b      	uxth	r3, r3
    bd56:	4313      	orrs	r3, r2
    bd58:	b29a      	uxth	r2, r3
    bd5a:	687b      	ldr	r3, [r7, #4]
    bd5c:	b29b      	uxth	r3, r3
    bd5e:	031b      	lsls	r3, r3, #12
    bd60:	b29b      	uxth	r3, r3
    bd62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    bd66:	b29b      	uxth	r3, r3
    bd68:	4313      	orrs	r3, r2
    bd6a:	b29a      	uxth	r2, r3
    bd6c:	683b      	ldr	r3, [r7, #0]
    bd6e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    bd70:	683a      	ldr	r2, [r7, #0]
    bd72:	78d3      	ldrb	r3, [r2, #3]
    bd74:	f043 0303 	orr.w	r3, r3, #3
    bd78:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    bd7a:	683a      	ldr	r2, [r7, #0]
    bd7c:	78d3      	ldrb	r3, [r2, #3]
    bd7e:	f043 030c 	orr.w	r3, r3, #12
    bd82:	70d3      	strb	r3, [r2, #3]
}
    bd84:	bf00      	nop
    bd86:	3714      	adds	r7, #20
    bd88:	46bd      	mov	sp, r7
    bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd8e:	4770      	bx	lr
    bd90:	00800084 	.word	0x00800084

0000bd94 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    bd94:	b580      	push	{r7, lr}
    bd96:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    bd98:	bf00      	nop
    bd9a:	2203      	movs	r2, #3
    bd9c:	2100      	movs	r1, #0
    bd9e:	4804      	ldr	r0, [pc, #16]	; (bdb0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    bda0:	4b04      	ldr	r3, [pc, #16]	; (bdb4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    bda2:	4798      	blx	r3
    bda4:	4603      	mov	r3, r0
    bda6:	2b03      	cmp	r3, #3
    bda8:	d1f7      	bne.n	bd9a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    bdaa:	bf00      	nop
    bdac:	bd80      	pop	{r7, pc}
    bdae:	bf00      	nop
    bdb0:	40001000 	.word	0x40001000
    bdb4:	0000b7c9 	.word	0x0000b7c9

0000bdb8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    bdb8:	b580      	push	{r7, lr}
    bdba:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    bdbc:	480e      	ldr	r0, [pc, #56]	; (bdf8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bdbe:	4b0f      	ldr	r3, [pc, #60]	; (bdfc <_usb_d_dev_wait_dfll_rdy+0x44>)
    bdc0:	4798      	blx	r3
    bdc2:	4603      	mov	r3, r0
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d00a      	beq.n	bdde <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    bdc8:	bf00      	nop
    bdca:	f44f 6110 	mov.w	r1, #2304	; 0x900
    bdce:	480a      	ldr	r0, [pc, #40]	; (bdf8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bdd0:	4b0b      	ldr	r3, [pc, #44]	; (be00 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bdd2:	4798      	blx	r3
    bdd4:	4603      	mov	r3, r0
    bdd6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bdda:	d1f6      	bne.n	bdca <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    bddc:	e009      	b.n	bdf2 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    bdde:	bf00      	nop
    bde0:	f44f 7180 	mov.w	r1, #256	; 0x100
    bde4:	4804      	ldr	r0, [pc, #16]	; (bdf8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bde6:	4b06      	ldr	r3, [pc, #24]	; (be00 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bde8:	4798      	blx	r3
    bdea:	4603      	mov	r3, r0
    bdec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bdf0:	d1f6      	bne.n	bde0 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    bdf2:	bf00      	nop
    bdf4:	bd80      	pop	{r7, pc}
    bdf6:	bf00      	nop
    bdf8:	40001000 	.word	0x40001000
    bdfc:	0000b827 	.word	0x0000b827
    be00:	0000b801 	.word	0x0000b801

0000be04 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    be04:	b580      	push	{r7, lr}
    be06:	b082      	sub	sp, #8
    be08:	af00      	add	r7, sp, #0
    be0a:	4603      	mov	r3, r0
    be0c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    be0e:	79fb      	ldrb	r3, [r7, #7]
    be10:	2b00      	cmp	r3, #0
    be12:	d102      	bne.n	be1a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    be14:	4b05      	ldr	r3, [pc, #20]	; (be2c <_usb_d_dev_wait_clk_rdy+0x28>)
    be16:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    be18:	e004      	b.n	be24 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    be1a:	79fb      	ldrb	r3, [r7, #7]
    be1c:	2b01      	cmp	r3, #1
    be1e:	d101      	bne.n	be24 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    be20:	4b03      	ldr	r3, [pc, #12]	; (be30 <_usb_d_dev_wait_clk_rdy+0x2c>)
    be22:	4798      	blx	r3
}
    be24:	bf00      	nop
    be26:	3708      	adds	r7, #8
    be28:	46bd      	mov	sp, r7
    be2a:	bd80      	pop	{r7, pc}
    be2c:	0000bdb9 	.word	0x0000bdb9
    be30:	0000bd95 	.word	0x0000bd95

0000be34 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    be34:	b580      	push	{r7, lr}
    be36:	b082      	sub	sp, #8
    be38:	af00      	add	r7, sp, #0
    be3a:	4603      	mov	r3, r0
    be3c:	6039      	str	r1, [r7, #0]
    be3e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    be40:	683b      	ldr	r3, [r7, #0]
    be42:	b2da      	uxtb	r2, r3
    be44:	79fb      	ldrb	r3, [r7, #7]
    be46:	4619      	mov	r1, r3
    be48:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be4c:	4b02      	ldr	r3, [pc, #8]	; (be58 <_usbd_ep_int_ack+0x24>)
    be4e:	4798      	blx	r3
}
    be50:	bf00      	nop
    be52:	3708      	adds	r7, #8
    be54:	46bd      	mov	sp, r7
    be56:	bd80      	pop	{r7, pc}
    be58:	0000b90d 	.word	0x0000b90d

0000be5c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    be5c:	b580      	push	{r7, lr}
    be5e:	b082      	sub	sp, #8
    be60:	af00      	add	r7, sp, #0
    be62:	4603      	mov	r3, r0
    be64:	6039      	str	r1, [r7, #0]
    be66:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    be68:	683b      	ldr	r3, [r7, #0]
    be6a:	b2da      	uxtb	r2, r3
    be6c:	79fb      	ldrb	r3, [r7, #7]
    be6e:	4619      	mov	r1, r3
    be70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be74:	4b02      	ldr	r3, [pc, #8]	; (be80 <_usbd_ep_int_en+0x24>)
    be76:	4798      	blx	r3
}
    be78:	bf00      	nop
    be7a:	3708      	adds	r7, #8
    be7c:	46bd      	mov	sp, r7
    be7e:	bd80      	pop	{r7, pc}
    be80:	0000b9e1 	.word	0x0000b9e1

0000be84 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    be84:	b580      	push	{r7, lr}
    be86:	b082      	sub	sp, #8
    be88:	af00      	add	r7, sp, #0
    be8a:	4603      	mov	r3, r0
    be8c:	6039      	str	r1, [r7, #0]
    be8e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    be90:	683b      	ldr	r3, [r7, #0]
    be92:	b2da      	uxtb	r2, r3
    be94:	79fb      	ldrb	r3, [r7, #7]
    be96:	4619      	mov	r1, r3
    be98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be9c:	4b02      	ldr	r3, [pc, #8]	; (bea8 <_usbd_ep_int_dis+0x24>)
    be9e:	4798      	blx	r3
}
    bea0:	bf00      	nop
    bea2:	3708      	adds	r7, #8
    bea4:	46bd      	mov	sp, r7
    bea6:	bd80      	pop	{r7, pc}
    bea8:	0000ba0d 	.word	0x0000ba0d

0000beac <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    beac:	b580      	push	{r7, lr}
    beae:	b082      	sub	sp, #8
    beb0:	af00      	add	r7, sp, #0
    beb2:	4603      	mov	r3, r0
    beb4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    beb6:	79fb      	ldrb	r3, [r7, #7]
    beb8:	4619      	mov	r1, r3
    beba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bebe:	4b06      	ldr	r3, [pc, #24]	; (bed8 <_usbd_ep_is_ctrl+0x2c>)
    bec0:	4798      	blx	r3
    bec2:	4603      	mov	r3, r0
    bec4:	2b11      	cmp	r3, #17
    bec6:	bf0c      	ite	eq
    bec8:	2301      	moveq	r3, #1
    beca:	2300      	movne	r3, #0
    becc:	b2db      	uxtb	r3, r3
}
    bece:	4618      	mov	r0, r3
    bed0:	3708      	adds	r7, #8
    bed2:	46bd      	mov	sp, r7
    bed4:	bd80      	pop	{r7, pc}
    bed6:	bf00      	nop
    bed8:	0000bac7 	.word	0x0000bac7

0000bedc <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    bedc:	b580      	push	{r7, lr}
    bede:	b082      	sub	sp, #8
    bee0:	af00      	add	r7, sp, #0
    bee2:	4603      	mov	r3, r0
    bee4:	71fb      	strb	r3, [r7, #7]
    bee6:	460b      	mov	r3, r1
    bee8:	71bb      	strb	r3, [r7, #6]
    beea:	4613      	mov	r3, r2
    beec:	717b      	strb	r3, [r7, #5]
	if (st) {
    beee:	797b      	ldrb	r3, [r7, #5]
    bef0:	2b00      	cmp	r3, #0
    bef2:	d00b      	beq.n	bf0c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    bef4:	79bb      	ldrb	r3, [r7, #6]
    bef6:	2210      	movs	r2, #16
    bef8:	fa02 f303 	lsl.w	r3, r2, r3
    befc:	b2da      	uxtb	r2, r3
    befe:	79fb      	ldrb	r3, [r7, #7]
    bf00:	4619      	mov	r1, r3
    bf02:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bf06:	4b09      	ldr	r3, [pc, #36]	; (bf2c <_usbd_ep_set_stall+0x50>)
    bf08:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    bf0a:	e00a      	b.n	bf22 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    bf0c:	79bb      	ldrb	r3, [r7, #6]
    bf0e:	2210      	movs	r2, #16
    bf10:	fa02 f303 	lsl.w	r3, r2, r3
    bf14:	b2da      	uxtb	r2, r3
    bf16:	79fb      	ldrb	r3, [r7, #7]
    bf18:	4619      	mov	r1, r3
    bf1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bf1e:	4b04      	ldr	r3, [pc, #16]	; (bf30 <_usbd_ep_set_stall+0x54>)
    bf20:	4798      	blx	r3
}
    bf22:	bf00      	nop
    bf24:	3708      	adds	r7, #8
    bf26:	46bd      	mov	sp, r7
    bf28:	bd80      	pop	{r7, pc}
    bf2a:	bf00      	nop
    bf2c:	0000b939 	.word	0x0000b939
    bf30:	0000b98d 	.word	0x0000b98d

0000bf34 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    bf34:	b580      	push	{r7, lr}
    bf36:	b084      	sub	sp, #16
    bf38:	af00      	add	r7, sp, #0
    bf3a:	4603      	mov	r3, r0
    bf3c:	460a      	mov	r2, r1
    bf3e:	71fb      	strb	r3, [r7, #7]
    bf40:	4613      	mov	r3, r2
    bf42:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    bf44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf48:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    bf4a:	79fb      	ldrb	r3, [r7, #7]
    bf4c:	4619      	mov	r1, r3
    bf4e:	68f8      	ldr	r0, [r7, #12]
    bf50:	4b08      	ldr	r3, [pc, #32]	; (bf74 <_usbd_ep_is_stalled+0x40>)
    bf52:	4798      	blx	r3
    bf54:	4603      	mov	r3, r0
    bf56:	4619      	mov	r1, r3
    bf58:	79bb      	ldrb	r3, [r7, #6]
    bf5a:	2210      	movs	r2, #16
    bf5c:	fa02 f303 	lsl.w	r3, r2, r3
    bf60:	400b      	ands	r3, r1
    bf62:	2b00      	cmp	r3, #0
    bf64:	bf14      	ite	ne
    bf66:	2301      	movne	r3, #1
    bf68:	2300      	moveq	r3, #0
    bf6a:	b2db      	uxtb	r3, r3
}
    bf6c:	4618      	mov	r0, r3
    bf6e:	3710      	adds	r7, #16
    bf70:	46bd      	mov	sp, r7
    bf72:	bd80      	pop	{r7, pc}
    bf74:	0000b965 	.word	0x0000b965

0000bf78 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    bf78:	b580      	push	{r7, lr}
    bf7a:	b084      	sub	sp, #16
    bf7c:	af00      	add	r7, sp, #0
    bf7e:	4603      	mov	r3, r0
    bf80:	460a      	mov	r2, r1
    bf82:	71fb      	strb	r3, [r7, #7]
    bf84:	4613      	mov	r3, r2
    bf86:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    bf88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf8c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    bf8e:	79fb      	ldrb	r3, [r7, #7]
    bf90:	4619      	mov	r1, r3
    bf92:	68f8      	ldr	r0, [r7, #12]
    bf94:	4b08      	ldr	r3, [pc, #32]	; (bfb8 <_usbd_ep_is_stall_sent+0x40>)
    bf96:	4798      	blx	r3
    bf98:	4603      	mov	r3, r0
    bf9a:	4619      	mov	r1, r3
    bf9c:	79bb      	ldrb	r3, [r7, #6]
    bf9e:	2220      	movs	r2, #32
    bfa0:	fa02 f303 	lsl.w	r3, r2, r3
    bfa4:	400b      	ands	r3, r1
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	bf14      	ite	ne
    bfaa:	2301      	movne	r3, #1
    bfac:	2300      	moveq	r3, #0
    bfae:	b2db      	uxtb	r3, r3
}
    bfb0:	4618      	mov	r0, r3
    bfb2:	3710      	adds	r7, #16
    bfb4:	46bd      	mov	sp, r7
    bfb6:	bd80      	pop	{r7, pc}
    bfb8:	0000b8e5 	.word	0x0000b8e5

0000bfbc <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    bfbc:	b580      	push	{r7, lr}
    bfbe:	b082      	sub	sp, #8
    bfc0:	af00      	add	r7, sp, #0
    bfc2:	4603      	mov	r3, r0
    bfc4:	460a      	mov	r2, r1
    bfc6:	71fb      	strb	r3, [r7, #7]
    bfc8:	4613      	mov	r3, r2
    bfca:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    bfcc:	79bb      	ldrb	r3, [r7, #6]
    bfce:	2220      	movs	r2, #32
    bfd0:	409a      	lsls	r2, r3
    bfd2:	79fb      	ldrb	r3, [r7, #7]
    bfd4:	4611      	mov	r1, r2
    bfd6:	4618      	mov	r0, r3
    bfd8:	4b02      	ldr	r3, [pc, #8]	; (bfe4 <_usbd_ep_ack_stall+0x28>)
    bfda:	4798      	blx	r3
}
    bfdc:	bf00      	nop
    bfde:	3708      	adds	r7, #8
    bfe0:	46bd      	mov	sp, r7
    bfe2:	bd80      	pop	{r7, pc}
    bfe4:	0000be35 	.word	0x0000be35

0000bfe8 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    bfe8:	b580      	push	{r7, lr}
    bfea:	b082      	sub	sp, #8
    bfec:	af00      	add	r7, sp, #0
    bfee:	4603      	mov	r3, r0
    bff0:	71fb      	strb	r3, [r7, #7]
    bff2:	460b      	mov	r3, r1
    bff4:	71bb      	strb	r3, [r7, #6]
    bff6:	4613      	mov	r3, r2
    bff8:	717b      	strb	r3, [r7, #5]
	if (en) {
    bffa:	797b      	ldrb	r3, [r7, #5]
    bffc:	2b00      	cmp	r3, #0
    bffe:	d008      	beq.n	c012 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c000:	79bb      	ldrb	r3, [r7, #6]
    c002:	2220      	movs	r2, #32
    c004:	409a      	lsls	r2, r3
    c006:	79fb      	ldrb	r3, [r7, #7]
    c008:	4611      	mov	r1, r2
    c00a:	4618      	mov	r0, r3
    c00c:	4b07      	ldr	r3, [pc, #28]	; (c02c <_usbd_ep_int_stall_en+0x44>)
    c00e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    c010:	e007      	b.n	c022 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c012:	79bb      	ldrb	r3, [r7, #6]
    c014:	2220      	movs	r2, #32
    c016:	409a      	lsls	r2, r3
    c018:	79fb      	ldrb	r3, [r7, #7]
    c01a:	4611      	mov	r1, r2
    c01c:	4618      	mov	r0, r3
    c01e:	4b04      	ldr	r3, [pc, #16]	; (c030 <_usbd_ep_int_stall_en+0x48>)
    c020:	4798      	blx	r3
}
    c022:	bf00      	nop
    c024:	3708      	adds	r7, #8
    c026:	46bd      	mov	sp, r7
    c028:	bd80      	pop	{r7, pc}
    c02a:	bf00      	nop
    c02c:	0000be5d 	.word	0x0000be5d
    c030:	0000be85 	.word	0x0000be85

0000c034 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    c034:	b580      	push	{r7, lr}
    c036:	b082      	sub	sp, #8
    c038:	af00      	add	r7, sp, #0
    c03a:	4603      	mov	r3, r0
    c03c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    c03e:	79fb      	ldrb	r3, [r7, #7]
    c040:	4619      	mov	r1, r3
    c042:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c046:	4b03      	ldr	r3, [pc, #12]	; (c054 <_usbd_ep_stop_setup+0x20>)
    c048:	4798      	blx	r3
}
    c04a:	bf00      	nop
    c04c:	3708      	adds	r7, #8
    c04e:	46bd      	mov	sp, r7
    c050:	bd80      	pop	{r7, pc}
    c052:	bf00      	nop
    c054:	0000b9b9 	.word	0x0000b9b9

0000c058 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    c058:	b580      	push	{r7, lr}
    c05a:	b082      	sub	sp, #8
    c05c:	af00      	add	r7, sp, #0
    c05e:	4603      	mov	r3, r0
    c060:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c062:	79fb      	ldrb	r3, [r7, #7]
    c064:	2210      	movs	r2, #16
    c066:	4619      	mov	r1, r3
    c068:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c06c:	4b05      	ldr	r3, [pc, #20]	; (c084 <_usbd_ep_is_setup+0x2c>)
    c06e:	4798      	blx	r3
    c070:	4603      	mov	r3, r0
    c072:	2b00      	cmp	r3, #0
    c074:	bf14      	ite	ne
    c076:	2301      	movne	r3, #1
    c078:	2300      	moveq	r3, #0
    c07a:	b2db      	uxtb	r3, r3
}
    c07c:	4618      	mov	r0, r3
    c07e:	3708      	adds	r7, #8
    c080:	46bd      	mov	sp, r7
    c082:	bd80      	pop	{r7, pc}
    c084:	0000b8af 	.word	0x0000b8af

0000c088 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    c088:	b580      	push	{r7, lr}
    c08a:	b082      	sub	sp, #8
    c08c:	af00      	add	r7, sp, #0
    c08e:	4603      	mov	r3, r0
    c090:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c092:	79fb      	ldrb	r3, [r7, #7]
    c094:	2110      	movs	r1, #16
    c096:	4618      	mov	r0, r3
    c098:	4b02      	ldr	r3, [pc, #8]	; (c0a4 <_usbd_ep_ack_setup+0x1c>)
    c09a:	4798      	blx	r3
}
    c09c:	bf00      	nop
    c09e:	3708      	adds	r7, #8
    c0a0:	46bd      	mov	sp, r7
    c0a2:	bd80      	pop	{r7, pc}
    c0a4:	0000be35 	.word	0x0000be35

0000c0a8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    c0a8:	b580      	push	{r7, lr}
    c0aa:	b082      	sub	sp, #8
    c0ac:	af00      	add	r7, sp, #0
    c0ae:	4603      	mov	r3, r0
    c0b0:	71fb      	strb	r3, [r7, #7]
    c0b2:	460b      	mov	r3, r1
    c0b4:	71bb      	strb	r3, [r7, #6]
    c0b6:	4613      	mov	r3, r2
    c0b8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    c0ba:	797b      	ldrb	r3, [r7, #5]
    c0bc:	2b00      	cmp	r3, #0
    c0be:	d00b      	beq.n	c0d8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c0c0:	79bb      	ldrb	r3, [r7, #6]
    c0c2:	2201      	movs	r2, #1
    c0c4:	fa02 f303 	lsl.w	r3, r2, r3
    c0c8:	b2da      	uxtb	r2, r3
    c0ca:	79fb      	ldrb	r3, [r7, #7]
    c0cc:	4619      	mov	r1, r3
    c0ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c0d2:	4b09      	ldr	r3, [pc, #36]	; (c0f8 <_usbd_ep_set_toggle+0x50>)
    c0d4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    c0d6:	e00a      	b.n	c0ee <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c0d8:	79bb      	ldrb	r3, [r7, #6]
    c0da:	2201      	movs	r2, #1
    c0dc:	fa02 f303 	lsl.w	r3, r2, r3
    c0e0:	b2da      	uxtb	r2, r3
    c0e2:	79fb      	ldrb	r3, [r7, #7]
    c0e4:	4619      	mov	r1, r3
    c0e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c0ea:	4b04      	ldr	r3, [pc, #16]	; (c0fc <_usbd_ep_set_toggle+0x54>)
    c0ec:	4798      	blx	r3
}
    c0ee:	bf00      	nop
    c0f0:	3708      	adds	r7, #8
    c0f2:	46bd      	mov	sp, r7
    c0f4:	bd80      	pop	{r7, pc}
    c0f6:	bf00      	nop
    c0f8:	0000b939 	.word	0x0000b939
    c0fc:	0000b98d 	.word	0x0000b98d

0000c100 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    c100:	b580      	push	{r7, lr}
    c102:	b082      	sub	sp, #8
    c104:	af00      	add	r7, sp, #0
    c106:	4603      	mov	r3, r0
    c108:	460a      	mov	r2, r1
    c10a:	71fb      	strb	r3, [r7, #7]
    c10c:	4613      	mov	r3, r2
    c10e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    c110:	79bb      	ldrb	r3, [r7, #6]
    c112:	2201      	movs	r2, #1
    c114:	409a      	lsls	r2, r3
    c116:	79fb      	ldrb	r3, [r7, #7]
    c118:	4611      	mov	r1, r2
    c11a:	4618      	mov	r0, r3
    c11c:	4b02      	ldr	r3, [pc, #8]	; (c128 <_usbd_ep_ack_io_cpt+0x28>)
    c11e:	4798      	blx	r3
}
    c120:	bf00      	nop
    c122:	3708      	adds	r7, #8
    c124:	46bd      	mov	sp, r7
    c126:	bd80      	pop	{r7, pc}
    c128:	0000be35 	.word	0x0000be35

0000c12c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    c12c:	b480      	push	{r7}
    c12e:	b085      	sub	sp, #20
    c130:	af00      	add	r7, sp, #0
    c132:	4603      	mov	r3, r0
    c134:	603a      	str	r2, [r7, #0]
    c136:	71fb      	strb	r3, [r7, #7]
    c138:	460b      	mov	r3, r1
    c13a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c13c:	79fa      	ldrb	r2, [r7, #7]
    c13e:	79bb      	ldrb	r3, [r7, #6]
    c140:	0052      	lsls	r2, r2, #1
    c142:	4413      	add	r3, r2
    c144:	011b      	lsls	r3, r3, #4
    c146:	4a06      	ldr	r2, [pc, #24]	; (c160 <_usbd_ep_set_buf+0x34>)
    c148:	4413      	add	r3, r2
    c14a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    c14c:	68fb      	ldr	r3, [r7, #12]
    c14e:	683a      	ldr	r2, [r7, #0]
    c150:	601a      	str	r2, [r3, #0]
}
    c152:	bf00      	nop
    c154:	3714      	adds	r7, #20
    c156:	46bd      	mov	sp, r7
    c158:	f85d 7b04 	ldr.w	r7, [sp], #4
    c15c:	4770      	bx	lr
    c15e:	bf00      	nop
    c160:	200036e0 	.word	0x200036e0

0000c164 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c164:	b480      	push	{r7}
    c166:	b085      	sub	sp, #20
    c168:	af00      	add	r7, sp, #0
    c16a:	4603      	mov	r3, r0
    c16c:	71fb      	strb	r3, [r7, #7]
    c16e:	460b      	mov	r3, r1
    c170:	71bb      	strb	r3, [r7, #6]
    c172:	4613      	mov	r3, r2
    c174:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c176:	79fa      	ldrb	r2, [r7, #7]
    c178:	79bb      	ldrb	r3, [r7, #6]
    c17a:	0052      	lsls	r2, r2, #1
    c17c:	4413      	add	r3, r2
    c17e:	011b      	lsls	r3, r3, #4
    c180:	4a08      	ldr	r2, [pc, #32]	; (c1a4 <_usbd_ep_set_in_count+0x40>)
    c182:	4413      	add	r3, r2
    c184:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c186:	88bb      	ldrh	r3, [r7, #4]
    c188:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c18c:	b299      	uxth	r1, r3
    c18e:	68fa      	ldr	r2, [r7, #12]
    c190:	6853      	ldr	r3, [r2, #4]
    c192:	f361 339b 	bfi	r3, r1, #14, #14
    c196:	6053      	str	r3, [r2, #4]
}
    c198:	bf00      	nop
    c19a:	3714      	adds	r7, #20
    c19c:	46bd      	mov	sp, r7
    c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1a2:	4770      	bx	lr
    c1a4:	200036e0 	.word	0x200036e0

0000c1a8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c1a8:	b480      	push	{r7}
    c1aa:	b085      	sub	sp, #20
    c1ac:	af00      	add	r7, sp, #0
    c1ae:	4603      	mov	r3, r0
    c1b0:	71fb      	strb	r3, [r7, #7]
    c1b2:	460b      	mov	r3, r1
    c1b4:	71bb      	strb	r3, [r7, #6]
    c1b6:	4613      	mov	r3, r2
    c1b8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	79bb      	ldrb	r3, [r7, #6]
    c1be:	0052      	lsls	r2, r2, #1
    c1c0:	4413      	add	r3, r2
    c1c2:	011b      	lsls	r3, r3, #4
    c1c4:	4a08      	ldr	r2, [pc, #32]	; (c1e8 <_usbd_ep_set_in_size+0x40>)
    c1c6:	4413      	add	r3, r2
    c1c8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c1ca:	88bb      	ldrh	r3, [r7, #4]
    c1cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c1d0:	b299      	uxth	r1, r3
    c1d2:	68fa      	ldr	r2, [r7, #12]
    c1d4:	6853      	ldr	r3, [r2, #4]
    c1d6:	f361 030d 	bfi	r3, r1, #0, #14
    c1da:	6053      	str	r3, [r2, #4]
}
    c1dc:	bf00      	nop
    c1de:	3714      	adds	r7, #20
    c1e0:	46bd      	mov	sp, r7
    c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1e6:	4770      	bx	lr
    c1e8:	200036e0 	.word	0x200036e0

0000c1ec <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c1ec:	b480      	push	{r7}
    c1ee:	b085      	sub	sp, #20
    c1f0:	af00      	add	r7, sp, #0
    c1f2:	4603      	mov	r3, r0
    c1f4:	71fb      	strb	r3, [r7, #7]
    c1f6:	460b      	mov	r3, r1
    c1f8:	71bb      	strb	r3, [r7, #6]
    c1fa:	4613      	mov	r3, r2
    c1fc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c1fe:	79fa      	ldrb	r2, [r7, #7]
    c200:	79bb      	ldrb	r3, [r7, #6]
    c202:	0052      	lsls	r2, r2, #1
    c204:	4413      	add	r3, r2
    c206:	011b      	lsls	r3, r3, #4
    c208:	4a08      	ldr	r2, [pc, #32]	; (c22c <_usbd_ep_set_out_count+0x40>)
    c20a:	4413      	add	r3, r2
    c20c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c20e:	88bb      	ldrh	r3, [r7, #4]
    c210:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c214:	b299      	uxth	r1, r3
    c216:	68fa      	ldr	r2, [r7, #12]
    c218:	6853      	ldr	r3, [r2, #4]
    c21a:	f361 030d 	bfi	r3, r1, #0, #14
    c21e:	6053      	str	r3, [r2, #4]
}
    c220:	bf00      	nop
    c222:	3714      	adds	r7, #20
    c224:	46bd      	mov	sp, r7
    c226:	f85d 7b04 	ldr.w	r7, [sp], #4
    c22a:	4770      	bx	lr
    c22c:	200036e0 	.word	0x200036e0

0000c230 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c230:	b480      	push	{r7}
    c232:	b085      	sub	sp, #20
    c234:	af00      	add	r7, sp, #0
    c236:	4603      	mov	r3, r0
    c238:	71fb      	strb	r3, [r7, #7]
    c23a:	460b      	mov	r3, r1
    c23c:	71bb      	strb	r3, [r7, #6]
    c23e:	4613      	mov	r3, r2
    c240:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c242:	79fa      	ldrb	r2, [r7, #7]
    c244:	79bb      	ldrb	r3, [r7, #6]
    c246:	0052      	lsls	r2, r2, #1
    c248:	4413      	add	r3, r2
    c24a:	011b      	lsls	r3, r3, #4
    c24c:	4a08      	ldr	r2, [pc, #32]	; (c270 <_usbd_ep_set_out_size+0x40>)
    c24e:	4413      	add	r3, r2
    c250:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c252:	88bb      	ldrh	r3, [r7, #4]
    c254:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c258:	b299      	uxth	r1, r3
    c25a:	68fa      	ldr	r2, [r7, #12]
    c25c:	6853      	ldr	r3, [r2, #4]
    c25e:	f361 339b 	bfi	r3, r1, #14, #14
    c262:	6053      	str	r3, [r2, #4]
}
    c264:	bf00      	nop
    c266:	3714      	adds	r7, #20
    c268:	46bd      	mov	sp, r7
    c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c26e:	4770      	bx	lr
    c270:	200036e0 	.word	0x200036e0

0000c274 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c274:	b580      	push	{r7, lr}
    c276:	b084      	sub	sp, #16
    c278:	af00      	add	r7, sp, #0
    c27a:	60ba      	str	r2, [r7, #8]
    c27c:	607b      	str	r3, [r7, #4]
    c27e:	4603      	mov	r3, r0
    c280:	73fb      	strb	r3, [r7, #15]
    c282:	460b      	mov	r3, r1
    c284:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    c286:	68bb      	ldr	r3, [r7, #8]
    c288:	b29a      	uxth	r2, r3
    c28a:	7bb9      	ldrb	r1, [r7, #14]
    c28c:	7bfb      	ldrb	r3, [r7, #15]
    c28e:	4618      	mov	r0, r3
    c290:	4b06      	ldr	r3, [pc, #24]	; (c2ac <_usbd_ep_set_in_trans+0x38>)
    c292:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    c294:	687b      	ldr	r3, [r7, #4]
    c296:	b29a      	uxth	r2, r3
    c298:	7bb9      	ldrb	r1, [r7, #14]
    c29a:	7bfb      	ldrb	r3, [r7, #15]
    c29c:	4618      	mov	r0, r3
    c29e:	4b04      	ldr	r3, [pc, #16]	; (c2b0 <_usbd_ep_set_in_trans+0x3c>)
    c2a0:	4798      	blx	r3
}
    c2a2:	bf00      	nop
    c2a4:	3710      	adds	r7, #16
    c2a6:	46bd      	mov	sp, r7
    c2a8:	bd80      	pop	{r7, pc}
    c2aa:	bf00      	nop
    c2ac:	0000c1a9 	.word	0x0000c1a9
    c2b0:	0000c165 	.word	0x0000c165

0000c2b4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c2b4:	b580      	push	{r7, lr}
    c2b6:	b084      	sub	sp, #16
    c2b8:	af00      	add	r7, sp, #0
    c2ba:	60ba      	str	r2, [r7, #8]
    c2bc:	607b      	str	r3, [r7, #4]
    c2be:	4603      	mov	r3, r0
    c2c0:	73fb      	strb	r3, [r7, #15]
    c2c2:	460b      	mov	r3, r1
    c2c4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    c2c6:	68bb      	ldr	r3, [r7, #8]
    c2c8:	b29a      	uxth	r2, r3
    c2ca:	7bb9      	ldrb	r1, [r7, #14]
    c2cc:	7bfb      	ldrb	r3, [r7, #15]
    c2ce:	4618      	mov	r0, r3
    c2d0:	4b06      	ldr	r3, [pc, #24]	; (c2ec <_usbd_ep_set_out_trans+0x38>)
    c2d2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    c2d4:	687b      	ldr	r3, [r7, #4]
    c2d6:	b29a      	uxth	r2, r3
    c2d8:	7bb9      	ldrb	r1, [r7, #14]
    c2da:	7bfb      	ldrb	r3, [r7, #15]
    c2dc:	4618      	mov	r0, r3
    c2de:	4b04      	ldr	r3, [pc, #16]	; (c2f0 <_usbd_ep_set_out_trans+0x3c>)
    c2e0:	4798      	blx	r3
}
    c2e2:	bf00      	nop
    c2e4:	3710      	adds	r7, #16
    c2e6:	46bd      	mov	sp, r7
    c2e8:	bd80      	pop	{r7, pc}
    c2ea:	bf00      	nop
    c2ec:	0000c231 	.word	0x0000c231
    c2f0:	0000c1ed 	.word	0x0000c1ed

0000c2f4 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    c2f4:	b480      	push	{r7}
    c2f6:	b085      	sub	sp, #20
    c2f8:	af00      	add	r7, sp, #0
    c2fa:	4603      	mov	r3, r0
    c2fc:	460a      	mov	r2, r1
    c2fe:	71fb      	strb	r3, [r7, #7]
    c300:	4613      	mov	r3, r2
    c302:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c304:	79fa      	ldrb	r2, [r7, #7]
    c306:	79bb      	ldrb	r3, [r7, #6]
    c308:	0052      	lsls	r2, r2, #1
    c30a:	4413      	add	r3, r2
    c30c:	011b      	lsls	r3, r3, #4
    c30e:	4a06      	ldr	r2, [pc, #24]	; (c328 <_usbd_ep_clear_bank_status+0x34>)
    c310:	4413      	add	r3, r2
    c312:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    c314:	68fb      	ldr	r3, [r7, #12]
    c316:	2200      	movs	r2, #0
    c318:	729a      	strb	r2, [r3, #10]
}
    c31a:	bf00      	nop
    c31c:	3714      	adds	r7, #20
    c31e:	46bd      	mov	sp, r7
    c320:	f85d 7b04 	ldr.w	r7, [sp], #4
    c324:	4770      	bx	lr
    c326:	bf00      	nop
    c328:	200036e0 	.word	0x200036e0

0000c32c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c32c:	b580      	push	{r7, lr}
    c32e:	b082      	sub	sp, #8
    c330:	af00      	add	r7, sp, #0
    c332:	4603      	mov	r3, r0
    c334:	71fb      	strb	r3, [r7, #7]
    c336:	460b      	mov	r3, r1
    c338:	71bb      	strb	r3, [r7, #6]
    c33a:	4613      	mov	r3, r2
    c33c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c33e:	797b      	ldrb	r3, [r7, #5]
    c340:	2b00      	cmp	r3, #0
    c342:	d00b      	beq.n	c35c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c344:	79bb      	ldrb	r3, [r7, #6]
    c346:	2240      	movs	r2, #64	; 0x40
    c348:	fa02 f303 	lsl.w	r3, r2, r3
    c34c:	b2da      	uxtb	r2, r3
    c34e:	79fb      	ldrb	r3, [r7, #7]
    c350:	4619      	mov	r1, r3
    c352:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c356:	4b09      	ldr	r3, [pc, #36]	; (c37c <_usbd_ep_set_in_rdy+0x50>)
    c358:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c35a:	e00a      	b.n	c372 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c35c:	79bb      	ldrb	r3, [r7, #6]
    c35e:	2240      	movs	r2, #64	; 0x40
    c360:	fa02 f303 	lsl.w	r3, r2, r3
    c364:	b2da      	uxtb	r2, r3
    c366:	79fb      	ldrb	r3, [r7, #7]
    c368:	4619      	mov	r1, r3
    c36a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c36e:	4b04      	ldr	r3, [pc, #16]	; (c380 <_usbd_ep_set_in_rdy+0x54>)
    c370:	4798      	blx	r3
}
    c372:	bf00      	nop
    c374:	3708      	adds	r7, #8
    c376:	46bd      	mov	sp, r7
    c378:	bd80      	pop	{r7, pc}
    c37a:	bf00      	nop
    c37c:	0000b939 	.word	0x0000b939
    c380:	0000b98d 	.word	0x0000b98d

0000c384 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c384:	b580      	push	{r7, lr}
    c386:	b082      	sub	sp, #8
    c388:	af00      	add	r7, sp, #0
    c38a:	4603      	mov	r3, r0
    c38c:	71fb      	strb	r3, [r7, #7]
    c38e:	460b      	mov	r3, r1
    c390:	71bb      	strb	r3, [r7, #6]
    c392:	4613      	mov	r3, r2
    c394:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c396:	797b      	ldrb	r3, [r7, #5]
    c398:	2b00      	cmp	r3, #0
    c39a:	d00b      	beq.n	c3b4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c39c:	79bb      	ldrb	r3, [r7, #6]
    c39e:	2240      	movs	r2, #64	; 0x40
    c3a0:	fa02 f303 	lsl.w	r3, r2, r3
    c3a4:	b2da      	uxtb	r2, r3
    c3a6:	79fb      	ldrb	r3, [r7, #7]
    c3a8:	4619      	mov	r1, r3
    c3aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c3ae:	4b09      	ldr	r3, [pc, #36]	; (c3d4 <_usbd_ep_set_out_rdy+0x50>)
    c3b0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c3b2:	e00a      	b.n	c3ca <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c3b4:	79bb      	ldrb	r3, [r7, #6]
    c3b6:	2240      	movs	r2, #64	; 0x40
    c3b8:	fa02 f303 	lsl.w	r3, r2, r3
    c3bc:	b2da      	uxtb	r2, r3
    c3be:	79fb      	ldrb	r3, [r7, #7]
    c3c0:	4619      	mov	r1, r3
    c3c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c3c6:	4b04      	ldr	r3, [pc, #16]	; (c3d8 <_usbd_ep_set_out_rdy+0x54>)
    c3c8:	4798      	blx	r3
}
    c3ca:	bf00      	nop
    c3cc:	3708      	adds	r7, #8
    c3ce:	46bd      	mov	sp, r7
    c3d0:	bd80      	pop	{r7, pc}
    c3d2:	bf00      	nop
    c3d4:	0000b98d 	.word	0x0000b98d
    c3d8:	0000b939 	.word	0x0000b939

0000c3dc <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    c3dc:	b480      	push	{r7}
    c3de:	b083      	sub	sp, #12
    c3e0:	af00      	add	r7, sp, #0
    c3e2:	4603      	mov	r3, r0
    c3e4:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c3e6:	88fb      	ldrh	r3, [r7, #6]
    c3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c3ec:	d820      	bhi.n	c430 <_usbd_ep_pcksize_size+0x54>
    c3ee:	88fb      	ldrh	r3, [r7, #6]
    c3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c3f4:	d81a      	bhi.n	c42c <_usbd_ep_pcksize_size+0x50>
    c3f6:	88fb      	ldrh	r3, [r7, #6]
    c3f8:	2b80      	cmp	r3, #128	; 0x80
    c3fa:	d815      	bhi.n	c428 <_usbd_ep_pcksize_size+0x4c>
    c3fc:	88fb      	ldrh	r3, [r7, #6]
    c3fe:	2b40      	cmp	r3, #64	; 0x40
    c400:	d810      	bhi.n	c424 <_usbd_ep_pcksize_size+0x48>
    c402:	88fb      	ldrh	r3, [r7, #6]
    c404:	2b20      	cmp	r3, #32
    c406:	d80b      	bhi.n	c420 <_usbd_ep_pcksize_size+0x44>
    c408:	88fb      	ldrh	r3, [r7, #6]
    c40a:	2b10      	cmp	r3, #16
    c40c:	d806      	bhi.n	c41c <_usbd_ep_pcksize_size+0x40>
    c40e:	88fb      	ldrh	r3, [r7, #6]
    c410:	2b08      	cmp	r3, #8
    c412:	bf8c      	ite	hi
    c414:	2301      	movhi	r3, #1
    c416:	2300      	movls	r3, #0
    c418:	b2db      	uxtb	r3, r3
    c41a:	e00a      	b.n	c432 <_usbd_ep_pcksize_size+0x56>
    c41c:	2302      	movs	r3, #2
    c41e:	e008      	b.n	c432 <_usbd_ep_pcksize_size+0x56>
    c420:	2303      	movs	r3, #3
    c422:	e006      	b.n	c432 <_usbd_ep_pcksize_size+0x56>
    c424:	2304      	movs	r3, #4
    c426:	e004      	b.n	c432 <_usbd_ep_pcksize_size+0x56>
    c428:	2305      	movs	r3, #5
    c42a:	e002      	b.n	c432 <_usbd_ep_pcksize_size+0x56>
    c42c:	2306      	movs	r3, #6
    c42e:	e000      	b.n	c432 <_usbd_ep_pcksize_size+0x56>
    c430:	2307      	movs	r3, #7
}
    c432:	4618      	mov	r0, r3
    c434:	370c      	adds	r7, #12
    c436:	46bd      	mov	sp, r7
    c438:	f85d 7b04 	ldr.w	r7, [sp], #4
    c43c:	4770      	bx	lr
	...

0000c440 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    c440:	b480      	push	{r7}
    c442:	b085      	sub	sp, #20
    c444:	af00      	add	r7, sp, #0
    c446:	4603      	mov	r3, r0
    c448:	460a      	mov	r2, r1
    c44a:	71fb      	strb	r3, [r7, #7]
    c44c:	4613      	mov	r3, r2
    c44e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c450:	79fb      	ldrb	r3, [r7, #7]
    c452:	2b00      	cmp	r3, #0
    c454:	d008      	beq.n	c468 <_usb_d_dev_ept+0x28>
    c456:	79bb      	ldrb	r3, [r7, #6]
    c458:	2b00      	cmp	r3, #0
    c45a:	d003      	beq.n	c464 <_usb_d_dev_ept+0x24>
    c45c:	79fb      	ldrb	r3, [r7, #7]
    c45e:	3304      	adds	r3, #4
    c460:	b2db      	uxtb	r3, r3
    c462:	e002      	b.n	c46a <_usb_d_dev_ept+0x2a>
    c464:	79fb      	ldrb	r3, [r7, #7]
    c466:	e000      	b.n	c46a <_usb_d_dev_ept+0x2a>
    c468:	2300      	movs	r3, #0
    c46a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    c46c:	7bfa      	ldrb	r2, [r7, #15]
    c46e:	4613      	mov	r3, r2
    c470:	009b      	lsls	r3, r3, #2
    c472:	4413      	add	r3, r2
    c474:	009b      	lsls	r3, r3, #2
    c476:	3310      	adds	r3, #16
    c478:	4a04      	ldr	r2, [pc, #16]	; (c48c <_usb_d_dev_ept+0x4c>)
    c47a:	4413      	add	r3, r2
    c47c:	3304      	adds	r3, #4
}
    c47e:	4618      	mov	r0, r3
    c480:	3714      	adds	r7, #20
    c482:	46bd      	mov	sp, r7
    c484:	f85d 7b04 	ldr.w	r7, [sp], #4
    c488:	4770      	bx	lr
    c48a:	bf00      	nop
    c48c:	20003618 	.word	0x20003618

0000c490 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    c490:	b580      	push	{r7, lr}
    c492:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    c494:	2104      	movs	r1, #4
    c496:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c49a:	4b03      	ldr	r3, [pc, #12]	; (c4a8 <_usb_d_dev_sof+0x18>)
    c49c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    c49e:	4b03      	ldr	r3, [pc, #12]	; (c4ac <_usb_d_dev_sof+0x1c>)
    c4a0:	681b      	ldr	r3, [r3, #0]
    c4a2:	4798      	blx	r3
}
    c4a4:	bf00      	nop
    c4a6:	bd80      	pop	{r7, pc}
    c4a8:	0000bb07 	.word	0x0000bb07
    c4ac:	20003618 	.word	0x20003618

0000c4b0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    c4b0:	b580      	push	{r7, lr}
    c4b2:	b084      	sub	sp, #16
    c4b4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    c4b6:	2300      	movs	r3, #0
    c4b8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c4ba:	f240 2101 	movw	r1, #513	; 0x201
    c4be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4c2:	4b1a      	ldr	r3, [pc, #104]	; (c52c <_usb_d_dev_lpmsusp+0x7c>)
    c4c4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c4c6:	f240 2101 	movw	r1, #513	; 0x201
    c4ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4ce:	4b18      	ldr	r3, [pc, #96]	; (c530 <_usb_d_dev_lpmsusp+0x80>)
    c4d0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c4d2:	2170      	movs	r1, #112	; 0x70
    c4d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4d8:	4b16      	ldr	r3, [pc, #88]	; (c534 <_usb_d_dev_lpmsusp+0x84>)
    c4da:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c4dc:	2300      	movs	r3, #0
    c4de:	73fb      	strb	r3, [r7, #15]
    c4e0:	e018      	b.n	c514 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c4e2:	7bfb      	ldrb	r3, [r7, #15]
    c4e4:	015b      	lsls	r3, r3, #5
    c4e6:	4a14      	ldr	r2, [pc, #80]	; (c538 <_usb_d_dev_lpmsusp+0x88>)
    c4e8:	4413      	add	r3, r2
    c4ea:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c4ec:	687b      	ldr	r3, [r7, #4]
    c4ee:	891b      	ldrh	r3, [r3, #8]
    c4f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    c4f4:	b2db      	uxtb	r3, r3
    c4f6:	2b03      	cmp	r3, #3
    c4f8:	d109      	bne.n	c50e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c4fa:	687b      	ldr	r3, [r7, #4]
    c4fc:	891b      	ldrh	r3, [r3, #8]
    c4fe:	f3c3 130a 	ubfx	r3, r3, #4, #11
    c502:	b29b      	uxth	r3, r3
    c504:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    c506:	687b      	ldr	r3, [r7, #4]
    c508:	2200      	movs	r2, #0
    c50a:	811a      	strh	r2, [r3, #8]
			break;
    c50c:	e005      	b.n	c51a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c50e:	7bfb      	ldrb	r3, [r7, #15]
    c510:	3301      	adds	r3, #1
    c512:	73fb      	strb	r3, [r7, #15]
    c514:	7bfb      	ldrb	r3, [r7, #15]
    c516:	2b03      	cmp	r3, #3
    c518:	d9e3      	bls.n	c4e2 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c51a:	4b08      	ldr	r3, [pc, #32]	; (c53c <_usb_d_dev_lpmsusp+0x8c>)
    c51c:	685b      	ldr	r3, [r3, #4]
    c51e:	68b9      	ldr	r1, [r7, #8]
    c520:	2003      	movs	r0, #3
    c522:	4798      	blx	r3
}
    c524:	bf00      	nop
    c526:	3710      	adds	r7, #16
    c528:	46bd      	mov	sp, r7
    c52a:	bd80      	pop	{r7, pc}
    c52c:	0000bb07 	.word	0x0000bb07
    c530:	0000bb5d 	.word	0x0000bb5d
    c534:	0000bb25 	.word	0x0000bb25
    c538:	200036e0 	.word	0x200036e0
    c53c:	20003618 	.word	0x20003618

0000c540 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    c540:	b580      	push	{r7, lr}
    c542:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    c544:	2180      	movs	r1, #128	; 0x80
    c546:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c54a:	4b04      	ldr	r3, [pc, #16]	; (c55c <_usb_d_dev_ramerr+0x1c>)
    c54c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c54e:	4b04      	ldr	r3, [pc, #16]	; (c560 <_usb_d_dev_ramerr+0x20>)
    c550:	685b      	ldr	r3, [r3, #4]
    c552:	2100      	movs	r1, #0
    c554:	2005      	movs	r0, #5
    c556:	4798      	blx	r3
}
    c558:	bf00      	nop
    c55a:	bd80      	pop	{r7, pc}
    c55c:	0000bb07 	.word	0x0000bb07
    c560:	20003618 	.word	0x20003618

0000c564 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    c564:	b580      	push	{r7, lr}
    c566:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c568:	2170      	movs	r1, #112	; 0x70
    c56a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c56e:	4b0b      	ldr	r3, [pc, #44]	; (c59c <_usb_d_dev_wakeup+0x38>)
    c570:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c572:	2170      	movs	r1, #112	; 0x70
    c574:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c578:	4b09      	ldr	r3, [pc, #36]	; (c5a0 <_usb_d_dev_wakeup+0x3c>)
    c57a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c57c:	f240 2101 	movw	r1, #513	; 0x201
    c580:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c584:	4b07      	ldr	r3, [pc, #28]	; (c5a4 <_usb_d_dev_wakeup+0x40>)
    c586:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    c588:	2000      	movs	r0, #0
    c58a:	4b07      	ldr	r3, [pc, #28]	; (c5a8 <_usb_d_dev_wakeup+0x44>)
    c58c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c58e:	4b07      	ldr	r3, [pc, #28]	; (c5ac <_usb_d_dev_wakeup+0x48>)
    c590:	685b      	ldr	r3, [r3, #4]
    c592:	2100      	movs	r1, #0
    c594:	2002      	movs	r0, #2
    c596:	4798      	blx	r3
}
    c598:	bf00      	nop
    c59a:	bd80      	pop	{r7, pc}
    c59c:	0000bb07 	.word	0x0000bb07
    c5a0:	0000bb5d 	.word	0x0000bb5d
    c5a4:	0000bb25 	.word	0x0000bb25
    c5a8:	0000be05 	.word	0x0000be05
    c5ac:	20003618 	.word	0x20003618

0000c5b0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    c5b0:	b580      	push	{r7, lr}
    c5b2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    c5b4:	2200      	movs	r2, #0
    c5b6:	2100      	movs	r1, #0
    c5b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5bc:	4b0d      	ldr	r3, [pc, #52]	; (c5f4 <_usb_d_dev_reset+0x44>)
    c5be:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    c5c0:	2108      	movs	r1, #8
    c5c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5c6:	4b0c      	ldr	r3, [pc, #48]	; (c5f8 <_usb_d_dev_reset+0x48>)
    c5c8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c5ca:	2170      	movs	r1, #112	; 0x70
    c5cc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5d0:	4b0a      	ldr	r3, [pc, #40]	; (c5fc <_usb_d_dev_reset+0x4c>)
    c5d2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c5d4:	f240 2101 	movw	r1, #513	; 0x201
    c5d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5dc:	4b08      	ldr	r3, [pc, #32]	; (c600 <_usb_d_dev_reset+0x50>)
    c5de:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    c5e0:	4b08      	ldr	r3, [pc, #32]	; (c604 <_usb_d_dev_reset+0x54>)
    c5e2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c5e4:	4b08      	ldr	r3, [pc, #32]	; (c608 <_usb_d_dev_reset+0x58>)
    c5e6:	685b      	ldr	r3, [r3, #4]
    c5e8:	2100      	movs	r1, #0
    c5ea:	2001      	movs	r0, #1
    c5ec:	4798      	blx	r3
}
    c5ee:	bf00      	nop
    c5f0:	bd80      	pop	{r7, pc}
    c5f2:	bf00      	nop
    c5f4:	0000ba9d 	.word	0x0000ba9d
    c5f8:	0000bb07 	.word	0x0000bb07
    c5fc:	0000bb5d 	.word	0x0000bb5d
    c600:	0000bb25 	.word	0x0000bb25
    c604:	0000d16d 	.word	0x0000d16d
    c608:	20003618 	.word	0x20003618

0000c60c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    c60c:	b580      	push	{r7, lr}
    c60e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c610:	f240 2101 	movw	r1, #513	; 0x201
    c614:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c618:	4b09      	ldr	r3, [pc, #36]	; (c640 <_usb_d_dev_suspend+0x34>)
    c61a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c61c:	f240 2101 	movw	r1, #513	; 0x201
    c620:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c624:	4b07      	ldr	r3, [pc, #28]	; (c644 <_usb_d_dev_suspend+0x38>)
    c626:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c628:	2170      	movs	r1, #112	; 0x70
    c62a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c62e:	4b06      	ldr	r3, [pc, #24]	; (c648 <_usb_d_dev_suspend+0x3c>)
    c630:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c632:	4b06      	ldr	r3, [pc, #24]	; (c64c <_usb_d_dev_suspend+0x40>)
    c634:	685b      	ldr	r3, [r3, #4]
    c636:	2100      	movs	r1, #0
    c638:	2004      	movs	r0, #4
    c63a:	4798      	blx	r3
}
    c63c:	bf00      	nop
    c63e:	bd80      	pop	{r7, pc}
    c640:	0000bb07 	.word	0x0000bb07
    c644:	0000bb5d 	.word	0x0000bb5d
    c648:	0000bb25 	.word	0x0000bb25
    c64c:	20003618 	.word	0x20003618

0000c650 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    c650:	b580      	push	{r7, lr}
    c652:	b082      	sub	sp, #8
    c654:	af00      	add	r7, sp, #0
	bool     rc    = true;
    c656:	2301      	movs	r3, #1
    c658:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    c65a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c65e:	4b22      	ldr	r3, [pc, #136]	; (c6e8 <_usb_d_dev_handle_nep+0x98>)
    c660:	4798      	blx	r3
    c662:	4603      	mov	r3, r0
    c664:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c666:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c66a:	4b20      	ldr	r3, [pc, #128]	; (c6ec <_usb_d_dev_handle_nep+0x9c>)
    c66c:	4798      	blx	r3
    c66e:	4603      	mov	r3, r0
    c670:	461a      	mov	r2, r3
    c672:	88bb      	ldrh	r3, [r7, #4]
    c674:	4013      	ands	r3, r2
    c676:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c678:	88bb      	ldrh	r3, [r7, #4]
    c67a:	f003 0304 	and.w	r3, r3, #4
    c67e:	2b00      	cmp	r3, #0
    c680:	d003      	beq.n	c68a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    c682:	4b1b      	ldr	r3, [pc, #108]	; (c6f0 <_usb_d_dev_handle_nep+0xa0>)
    c684:	4798      	blx	r3
		return true;
    c686:	2301      	movs	r3, #1
    c688:	e02a      	b.n	c6e0 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c68a:	88bb      	ldrh	r3, [r7, #4]
    c68c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c690:	2b00      	cmp	r3, #0
    c692:	d002      	beq.n	c69a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    c694:	4b17      	ldr	r3, [pc, #92]	; (c6f4 <_usb_d_dev_handle_nep+0xa4>)
    c696:	4798      	blx	r3
    c698:	e021      	b.n	c6de <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c69a:	88bb      	ldrh	r3, [r7, #4]
    c69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d002      	beq.n	c6aa <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    c6a4:	4b14      	ldr	r3, [pc, #80]	; (c6f8 <_usb_d_dev_handle_nep+0xa8>)
    c6a6:	4798      	blx	r3
    c6a8:	e019      	b.n	c6de <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c6aa:	88bb      	ldrh	r3, [r7, #4]
    c6ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d002      	beq.n	c6ba <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    c6b4:	4b11      	ldr	r3, [pc, #68]	; (c6fc <_usb_d_dev_handle_nep+0xac>)
    c6b6:	4798      	blx	r3
    c6b8:	e011      	b.n	c6de <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c6ba:	88bb      	ldrh	r3, [r7, #4]
    c6bc:	f003 0308 	and.w	r3, r3, #8
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	d002      	beq.n	c6ca <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    c6c4:	4b0e      	ldr	r3, [pc, #56]	; (c700 <_usb_d_dev_handle_nep+0xb0>)
    c6c6:	4798      	blx	r3
    c6c8:	e009      	b.n	c6de <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c6ca:	88bb      	ldrh	r3, [r7, #4]
    c6cc:	f003 0301 	and.w	r3, r3, #1
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d002      	beq.n	c6da <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    c6d4:	4b0b      	ldr	r3, [pc, #44]	; (c704 <_usb_d_dev_handle_nep+0xb4>)
    c6d6:	4798      	blx	r3
    c6d8:	e001      	b.n	c6de <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    c6da:	2300      	movs	r3, #0
    c6dc:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    c6de:	79fb      	ldrb	r3, [r7, #7]
}
    c6e0:	4618      	mov	r0, r3
    c6e2:	3708      	adds	r7, #8
    c6e4:	46bd      	mov	sp, r7
    c6e6:	bd80      	pop	{r7, pc}
    c6e8:	0000baed 	.word	0x0000baed
    c6ec:	0000bb43 	.word	0x0000bb43
    c6f0:	0000c491 	.word	0x0000c491
    c6f4:	0000c4b1 	.word	0x0000c4b1
    c6f8:	0000c541 	.word	0x0000c541
    c6fc:	0000c565 	.word	0x0000c565
    c700:	0000c5b1 	.word	0x0000c5b1
    c704:	0000c60d 	.word	0x0000c60d

0000c708 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c708:	b590      	push	{r4, r7, lr}
    c70a:	b089      	sub	sp, #36	; 0x24
    c70c:	af00      	add	r7, sp, #0
    c70e:	6078      	str	r0, [r7, #4]
    c710:	460b      	mov	r3, r1
    c712:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    c714:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c718:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	7c9b      	ldrb	r3, [r3, #18]
    c71e:	f003 030f 	and.w	r3, r3, #15
    c722:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c724:	7dfb      	ldrb	r3, [r7, #23]
    c726:	015b      	lsls	r3, r3, #5
    c728:	4a73      	ldr	r2, [pc, #460]	; (c8f8 <_usb_d_dev_in_next+0x1f0>)
    c72a:	4413      	add	r3, r2
    c72c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c72e:	78fb      	ldrb	r3, [r7, #3]
    c730:	2b00      	cmp	r3, #0
    c732:	d006      	beq.n	c742 <_usb_d_dev_in_next+0x3a>
    c734:	693b      	ldr	r3, [r7, #16]
    c736:	3310      	adds	r3, #16
    c738:	685b      	ldr	r3, [r3, #4]
    c73a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c73e:	b29b      	uxth	r3, r3
    c740:	e000      	b.n	c744 <_usb_d_dev_in_next+0x3c>
    c742:	2300      	movs	r3, #0
    c744:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	8a1b      	ldrh	r3, [r3, #16]
    c74a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c74e:	4293      	cmp	r3, r2
    c750:	d103      	bne.n	c75a <_usb_d_dev_in_next+0x52>
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	8a1b      	ldrh	r3, [r3, #16]
    c756:	b21b      	sxth	r3, r3
    c758:	e004      	b.n	c764 <_usb_d_dev_in_next+0x5c>
    c75a:	687b      	ldr	r3, [r7, #4]
    c75c:	8a1b      	ldrh	r3, [r3, #16]
    c75e:	3b01      	subs	r3, #1
    c760:	b29b      	uxth	r3, r3
    c762:	b21b      	sxth	r3, r3
    c764:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    c768:	4013      	ands	r3, r2
    c76a:	b21b      	sxth	r3, r3
    c76c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    c76e:	2300      	movs	r3, #0
    c770:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	7cdb      	ldrb	r3, [r3, #19]
    c776:	f003 0307 	and.w	r3, r3, #7
    c77a:	b2db      	uxtb	r3, r3
    c77c:	2b01      	cmp	r3, #1
    c77e:	bf0c      	ite	eq
    c780:	2301      	moveq	r3, #1
    c782:	2300      	movne	r3, #0
    c784:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    c786:	78fb      	ldrb	r3, [r7, #3]
    c788:	2b00      	cmp	r3, #0
    c78a:	d004      	beq.n	c796 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    c78c:	7dfb      	ldrb	r3, [r7, #23]
    c78e:	2101      	movs	r1, #1
    c790:	4618      	mov	r0, r3
    c792:	4b5a      	ldr	r3, [pc, #360]	; (c8fc <_usb_d_dev_in_next+0x1f4>)
    c794:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	689a      	ldr	r2, [r3, #8]
    c79a:	89fb      	ldrh	r3, [r7, #14]
    c79c:	441a      	add	r2, r3
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    c7a2:	687b      	ldr	r3, [r7, #4]
    c7a4:	689a      	ldr	r2, [r3, #8]
    c7a6:	687b      	ldr	r3, [r7, #4]
    c7a8:	685b      	ldr	r3, [r3, #4]
    c7aa:	429a      	cmp	r2, r3
    c7ac:	d243      	bcs.n	c836 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    c7ae:	687b      	ldr	r3, [r7, #4]
    c7b0:	685b      	ldr	r3, [r3, #4]
    c7b2:	b29a      	uxth	r2, r3
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	689b      	ldr	r3, [r3, #8]
    c7b8:	b29b      	uxth	r3, r3
    c7ba:	1ad3      	subs	r3, r2, r3
    c7bc:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    c7be:	687b      	ldr	r3, [r7, #4]
    c7c0:	7cdb      	ldrb	r3, [r3, #19]
    c7c2:	f003 0320 	and.w	r3, r3, #32
    c7c6:	b2db      	uxtb	r3, r3
    c7c8:	2b00      	cmp	r3, #0
    c7ca:	d01b      	beq.n	c804 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    c7cc:	687b      	ldr	r3, [r7, #4]
    c7ce:	8a1b      	ldrh	r3, [r3, #16]
    c7d0:	8bfa      	ldrh	r2, [r7, #30]
    c7d2:	429a      	cmp	r2, r3
    c7d4:	d902      	bls.n	c7dc <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    c7d6:	687b      	ldr	r3, [r7, #4]
    c7d8:	8a1b      	ldrh	r3, [r3, #16]
    c7da:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c7dc:	687b      	ldr	r3, [r7, #4]
    c7de:	68d8      	ldr	r0, [r3, #12]
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	681a      	ldr	r2, [r3, #0]
    c7e4:	687b      	ldr	r3, [r7, #4]
    c7e6:	689b      	ldr	r3, [r3, #8]
    c7e8:	4413      	add	r3, r2
    c7ea:	8bfa      	ldrh	r2, [r7, #30]
    c7ec:	4619      	mov	r1, r3
    c7ee:	4b44      	ldr	r3, [pc, #272]	; (c900 <_usb_d_dev_in_next+0x1f8>)
    c7f0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c7f2:	687b      	ldr	r3, [r7, #4]
    c7f4:	68db      	ldr	r3, [r3, #12]
    c7f6:	461a      	mov	r2, r3
    c7f8:	7dfb      	ldrb	r3, [r7, #23]
    c7fa:	2101      	movs	r1, #1
    c7fc:	4618      	mov	r0, r3
    c7fe:	4b41      	ldr	r3, [pc, #260]	; (c904 <_usb_d_dev_in_next+0x1fc>)
    c800:	4798      	blx	r3
    c802:	e011      	b.n	c828 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    c804:	8bfb      	ldrh	r3, [r7, #30]
    c806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c80a:	d902      	bls.n	c812 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    c80c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c810:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c812:	687b      	ldr	r3, [r7, #4]
    c814:	681a      	ldr	r2, [r3, #0]
    c816:	687b      	ldr	r3, [r7, #4]
    c818:	689b      	ldr	r3, [r3, #8]
    c81a:	4413      	add	r3, r2
    c81c:	461a      	mov	r2, r3
    c81e:	7dfb      	ldrb	r3, [r7, #23]
    c820:	2101      	movs	r1, #1
    c822:	4618      	mov	r0, r3
    c824:	4b37      	ldr	r3, [pc, #220]	; (c904 <_usb_d_dev_in_next+0x1fc>)
    c826:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    c828:	8bfa      	ldrh	r2, [r7, #30]
    c82a:	7df8      	ldrb	r0, [r7, #23]
    c82c:	2300      	movs	r3, #0
    c82e:	2101      	movs	r1, #1
    c830:	4c35      	ldr	r4, [pc, #212]	; (c908 <_usb_d_dev_in_next+0x200>)
    c832:	47a0      	blx	r4
		goto _in_tx_exec;
    c834:	e041      	b.n	c8ba <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    c836:	687b      	ldr	r3, [r7, #4]
    c838:	7cdb      	ldrb	r3, [r3, #19]
    c83a:	f003 0310 	and.w	r3, r3, #16
    c83e:	b2db      	uxtb	r3, r3
    c840:	2b00      	cmp	r3, #0
    c842:	d00b      	beq.n	c85c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    c844:	687a      	ldr	r2, [r7, #4]
    c846:	7cd3      	ldrb	r3, [r2, #19]
    c848:	f36f 1304 	bfc	r3, #4, #1
    c84c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    c84e:	7df8      	ldrb	r0, [r7, #23]
    c850:	2300      	movs	r3, #0
    c852:	2200      	movs	r2, #0
    c854:	2101      	movs	r1, #1
    c856:	4c2c      	ldr	r4, [pc, #176]	; (c908 <_usb_d_dev_in_next+0x200>)
    c858:	47a0      	blx	r4
		goto _in_tx_exec;
    c85a:	e02e      	b.n	c8ba <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    c85c:	7afb      	ldrb	r3, [r7, #11]
    c85e:	2b00      	cmp	r3, #0
    c860:	d006      	beq.n	c870 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    c862:	7dfb      	ldrb	r3, [r7, #23]
    c864:	224b      	movs	r2, #75	; 0x4b
    c866:	4619      	mov	r1, r3
    c868:	69b8      	ldr	r0, [r7, #24]
    c86a:	4b28      	ldr	r3, [pc, #160]	; (c90c <_usb_d_dev_in_next+0x204>)
    c86c:	4798      	blx	r3
    c86e:	e005      	b.n	c87c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    c870:	7dfb      	ldrb	r3, [r7, #23]
    c872:	224a      	movs	r2, #74	; 0x4a
    c874:	4619      	mov	r1, r3
    c876:	69b8      	ldr	r0, [r7, #24]
    c878:	4b24      	ldr	r3, [pc, #144]	; (c90c <_usb_d_dev_in_next+0x204>)
    c87a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    c87c:	687b      	ldr	r3, [r7, #4]
    c87e:	8a1b      	ldrh	r3, [r3, #16]
    c880:	89ba      	ldrh	r2, [r7, #12]
    c882:	429a      	cmp	r2, r3
    c884:	d114      	bne.n	c8b0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    c886:	687a      	ldr	r2, [r7, #4]
    c888:	7cd3      	ldrb	r3, [r2, #19]
    c88a:	f36f 1386 	bfc	r3, #6, #1
    c88e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    c890:	4b1f      	ldr	r3, [pc, #124]	; (c910 <_usb_d_dev_in_next+0x208>)
    c892:	68db      	ldr	r3, [r3, #12]
    c894:	687a      	ldr	r2, [r7, #4]
    c896:	7c90      	ldrb	r0, [r2, #18]
    c898:	687a      	ldr	r2, [r7, #4]
    c89a:	6892      	ldr	r2, [r2, #8]
    c89c:	4611      	mov	r1, r2
    c89e:	4798      	blx	r3
    c8a0:	4603      	mov	r3, r0
    c8a2:	2b00      	cmp	r3, #0
    c8a4:	d124      	bne.n	c8f0 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    c8a6:	687a      	ldr	r2, [r7, #4]
    c8a8:	7cd3      	ldrb	r3, [r2, #19]
    c8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c8ae:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c8b0:	2100      	movs	r1, #0
    c8b2:	6878      	ldr	r0, [r7, #4]
    c8b4:	4b17      	ldr	r3, [pc, #92]	; (c914 <_usb_d_dev_in_next+0x20c>)
    c8b6:	4798      	blx	r3
	return;
    c8b8:	e01b      	b.n	c8f2 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    c8ba:	78fb      	ldrb	r3, [r7, #3]
    c8bc:	f083 0301 	eor.w	r3, r3, #1
    c8c0:	b2db      	uxtb	r3, r3
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d00d      	beq.n	c8e2 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    c8c6:	7afb      	ldrb	r3, [r7, #11]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d002      	beq.n	c8d2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    c8cc:	234e      	movs	r3, #78	; 0x4e
    c8ce:	777b      	strb	r3, [r7, #29]
    c8d0:	e001      	b.n	c8d6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    c8d2:	234a      	movs	r3, #74	; 0x4a
    c8d4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    c8d6:	7f7a      	ldrb	r2, [r7, #29]
    c8d8:	7dfb      	ldrb	r3, [r7, #23]
    c8da:	4619      	mov	r1, r3
    c8dc:	69b8      	ldr	r0, [r7, #24]
    c8de:	4b0e      	ldr	r3, [pc, #56]	; (c918 <_usb_d_dev_in_next+0x210>)
    c8e0:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    c8e2:	7dfb      	ldrb	r3, [r7, #23]
    c8e4:	2201      	movs	r2, #1
    c8e6:	2101      	movs	r1, #1
    c8e8:	4618      	mov	r0, r3
    c8ea:	4b0c      	ldr	r3, [pc, #48]	; (c91c <_usb_d_dev_in_next+0x214>)
    c8ec:	4798      	blx	r3
    c8ee:	e000      	b.n	c8f2 <_usb_d_dev_in_next+0x1ea>
			return;
    c8f0:	bf00      	nop
}
    c8f2:	3724      	adds	r7, #36	; 0x24
    c8f4:	46bd      	mov	sp, r7
    c8f6:	bd90      	pop	{r4, r7, pc}
    c8f8:	200036e0 	.word	0x200036e0
    c8fc:	0000c101 	.word	0x0000c101
    c900:	00016735 	.word	0x00016735
    c904:	0000c12d 	.word	0x0000c12d
    c908:	0000c275 	.word	0x0000c275
    c90c:	0000ba0d 	.word	0x0000ba0d
    c910:	20003618 	.word	0x20003618
    c914:	0000da31 	.word	0x0000da31
    c918:	0000b9e1 	.word	0x0000b9e1
    c91c:	0000c32d 	.word	0x0000c32d

0000c920 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c920:	b590      	push	{r4, r7, lr}
    c922:	b08b      	sub	sp, #44	; 0x2c
    c924:	af00      	add	r7, sp, #0
    c926:	6078      	str	r0, [r7, #4]
    c928:	460b      	mov	r3, r1
    c92a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    c92c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c930:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c932:	687b      	ldr	r3, [r7, #4]
    c934:	7c9b      	ldrb	r3, [r3, #18]
    c936:	f003 030f 	and.w	r3, r3, #15
    c93a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c93c:	7ffb      	ldrb	r3, [r7, #31]
    c93e:	015b      	lsls	r3, r3, #5
    c940:	4a94      	ldr	r2, [pc, #592]	; (cb94 <_usb_d_dev_out_next+0x274>)
    c942:	4413      	add	r3, r2
    c944:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c946:	78fb      	ldrb	r3, [r7, #3]
    c948:	2b00      	cmp	r3, #0
    c94a:	d005      	beq.n	c958 <_usb_d_dev_out_next+0x38>
    c94c:	69bb      	ldr	r3, [r7, #24]
    c94e:	685b      	ldr	r3, [r3, #4]
    c950:	f3c3 338d 	ubfx	r3, r3, #14, #14
    c954:	b29b      	uxth	r3, r3
    c956:	e000      	b.n	c95a <_usb_d_dev_out_next+0x3a>
    c958:	2300      	movs	r3, #0
    c95a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c95c:	78fb      	ldrb	r3, [r7, #3]
    c95e:	2b00      	cmp	r3, #0
    c960:	d005      	beq.n	c96e <_usb_d_dev_out_next+0x4e>
    c962:	69bb      	ldr	r3, [r7, #24]
    c964:	685b      	ldr	r3, [r3, #4]
    c966:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c96a:	b29b      	uxth	r3, r3
    c96c:	e000      	b.n	c970 <_usb_d_dev_out_next+0x50>
    c96e:	2300      	movs	r3, #0
    c970:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c972:	687b      	ldr	r3, [r7, #4]
    c974:	8a1b      	ldrh	r3, [r3, #16]
    c976:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c97a:	4293      	cmp	r3, r2
    c97c:	d004      	beq.n	c988 <_usb_d_dev_out_next+0x68>
    c97e:	687b      	ldr	r3, [r7, #4]
    c980:	8a1b      	ldrh	r3, [r3, #16]
    c982:	3b01      	subs	r3, #1
    c984:	b29b      	uxth	r3, r3
    c986:	e001      	b.n	c98c <_usb_d_dev_out_next+0x6c>
    c988:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c98c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    c98e:	8aba      	ldrh	r2, [r7, #20]
    c990:	8a7b      	ldrh	r3, [r7, #18]
    c992:	4013      	ands	r3, r2
    c994:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c996:	687b      	ldr	r3, [r7, #4]
    c998:	7cdb      	ldrb	r3, [r3, #19]
    c99a:	f003 0307 	and.w	r3, r3, #7
    c99e:	b2db      	uxtb	r3, r3
    c9a0:	2b01      	cmp	r3, #1
    c9a2:	bf0c      	ite	eq
    c9a4:	2301      	moveq	r3, #1
    c9a6:	2300      	movne	r3, #0
    c9a8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    c9aa:	78fb      	ldrb	r3, [r7, #3]
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d004      	beq.n	c9ba <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    c9b0:	7ffb      	ldrb	r3, [r7, #31]
    c9b2:	2100      	movs	r1, #0
    c9b4:	4618      	mov	r0, r3
    c9b6:	4b78      	ldr	r3, [pc, #480]	; (cb98 <_usb_d_dev_out_next+0x278>)
    c9b8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c9ba:	687b      	ldr	r3, [r7, #4]
    c9bc:	7cdb      	ldrb	r3, [r3, #19]
    c9be:	f003 0320 	and.w	r3, r3, #32
    c9c2:	b2db      	uxtb	r3, r3
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	d01c      	beq.n	ca02 <_usb_d_dev_out_next+0xe2>
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	685b      	ldr	r3, [r3, #4]
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	d018      	beq.n	ca02 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c9d0:	687b      	ldr	r3, [r7, #4]
    c9d2:	685b      	ldr	r3, [r3, #4]
    c9d4:	b29a      	uxth	r2, r3
    c9d6:	687b      	ldr	r3, [r7, #4]
    c9d8:	689b      	ldr	r3, [r3, #8]
    c9da:	b29b      	uxth	r3, r3
    c9dc:	1ad3      	subs	r3, r2, r3
    c9de:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	681a      	ldr	r2, [r3, #0]
    c9e4:	687b      	ldr	r3, [r7, #4]
    c9e6:	689b      	ldr	r3, [r3, #8]
    c9e8:	18d0      	adds	r0, r2, r3
    c9ea:	687b      	ldr	r3, [r7, #4]
    c9ec:	68d9      	ldr	r1, [r3, #12]
    c9ee:	89ba      	ldrh	r2, [r7, #12]
    c9f0:	8a3b      	ldrh	r3, [r7, #16]
    c9f2:	429a      	cmp	r2, r3
    c9f4:	d901      	bls.n	c9fa <_usb_d_dev_out_next+0xda>
    c9f6:	8a3b      	ldrh	r3, [r7, #16]
    c9f8:	e000      	b.n	c9fc <_usb_d_dev_out_next+0xdc>
    c9fa:	89bb      	ldrh	r3, [r7, #12]
    c9fc:	461a      	mov	r2, r3
    c9fe:	4b67      	ldr	r3, [pc, #412]	; (cb9c <_usb_d_dev_out_next+0x27c>)
    ca00:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	685b      	ldr	r3, [r3, #4]
    ca06:	2b00      	cmp	r3, #0
    ca08:	d121      	bne.n	ca4e <_usb_d_dev_out_next+0x12e>
    ca0a:	687b      	ldr	r3, [r7, #4]
    ca0c:	7cdb      	ldrb	r3, [r3, #19]
    ca0e:	f003 0310 	and.w	r3, r3, #16
    ca12:	b2db      	uxtb	r3, r3
    ca14:	2b00      	cmp	r3, #0
    ca16:	d01a      	beq.n	ca4e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    ca18:	687a      	ldr	r2, [r7, #4]
    ca1a:	7cd3      	ldrb	r3, [r2, #19]
    ca1c:	f36f 1304 	bfc	r3, #4, #1
    ca20:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    ca22:	687a      	ldr	r2, [r7, #4]
    ca24:	7cd3      	ldrb	r3, [r2, #19]
    ca26:	f043 0320 	orr.w	r3, r3, #32
    ca2a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ca2c:	687b      	ldr	r3, [r7, #4]
    ca2e:	68db      	ldr	r3, [r3, #12]
    ca30:	461a      	mov	r2, r3
    ca32:	7ffb      	ldrb	r3, [r7, #31]
    ca34:	2100      	movs	r1, #0
    ca36:	4618      	mov	r0, r3
    ca38:	4b59      	ldr	r3, [pc, #356]	; (cba0 <_usb_d_dev_out_next+0x280>)
    ca3a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ca3c:	687b      	ldr	r3, [r7, #4]
    ca3e:	8a1b      	ldrh	r3, [r3, #16]
    ca40:	461a      	mov	r2, r3
    ca42:	7ff8      	ldrb	r0, [r7, #31]
    ca44:	2300      	movs	r3, #0
    ca46:	2100      	movs	r1, #0
    ca48:	4c56      	ldr	r4, [pc, #344]	; (cba4 <_usb_d_dev_out_next+0x284>)
    ca4a:	47a0      	blx	r4
		goto _out_rx_exec;
    ca4c:	e090      	b.n	cb70 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    ca4e:	78fb      	ldrb	r3, [r7, #3]
    ca50:	2b00      	cmp	r3, #0
    ca52:	d010      	beq.n	ca76 <_usb_d_dev_out_next+0x156>
    ca54:	687b      	ldr	r3, [r7, #4]
    ca56:	8a1b      	ldrh	r3, [r3, #16]
    ca58:	8a3a      	ldrh	r2, [r7, #16]
    ca5a:	429a      	cmp	r2, r3
    ca5c:	d20b      	bcs.n	ca76 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    ca5e:	687a      	ldr	r2, [r7, #4]
    ca60:	7cd3      	ldrb	r3, [r2, #19]
    ca62:	f36f 1304 	bfc	r3, #4, #1
    ca66:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    ca68:	687b      	ldr	r3, [r7, #4]
    ca6a:	689a      	ldr	r2, [r3, #8]
    ca6c:	8abb      	ldrh	r3, [r7, #20]
    ca6e:	441a      	add	r2, r3
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	609a      	str	r2, [r3, #8]
    ca74:	e05c      	b.n	cb30 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    ca76:	687b      	ldr	r3, [r7, #4]
    ca78:	689a      	ldr	r2, [r3, #8]
    ca7a:	8afb      	ldrh	r3, [r7, #22]
    ca7c:	441a      	add	r2, r3
    ca7e:	687b      	ldr	r3, [r7, #4]
    ca80:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ca82:	687b      	ldr	r3, [r7, #4]
    ca84:	689a      	ldr	r2, [r3, #8]
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	685b      	ldr	r3, [r3, #4]
    ca8a:	429a      	cmp	r2, r3
    ca8c:	d250      	bcs.n	cb30 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	685b      	ldr	r3, [r3, #4]
    ca92:	b29a      	uxth	r2, r3
    ca94:	687b      	ldr	r3, [r7, #4]
    ca96:	689b      	ldr	r3, [r3, #8]
    ca98:	b29b      	uxth	r3, r3
    ca9a:	1ad3      	subs	r3, r2, r3
    ca9c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ca9e:	687b      	ldr	r3, [r7, #4]
    caa0:	7cdb      	ldrb	r3, [r3, #19]
    caa2:	f003 0320 	and.w	r3, r3, #32
    caa6:	b2db      	uxtb	r3, r3
    caa8:	2b00      	cmp	r3, #0
    caaa:	d010      	beq.n	cace <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	8a1b      	ldrh	r3, [r3, #16]
    cab0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cab2:	429a      	cmp	r2, r3
    cab4:	d902      	bls.n	cabc <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	8a1b      	ldrh	r3, [r3, #16]
    caba:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cabc:	687b      	ldr	r3, [r7, #4]
    cabe:	68db      	ldr	r3, [r3, #12]
    cac0:	461a      	mov	r2, r3
    cac2:	7ffb      	ldrb	r3, [r7, #31]
    cac4:	2100      	movs	r1, #0
    cac6:	4618      	mov	r0, r3
    cac8:	4b35      	ldr	r3, [pc, #212]	; (cba0 <_usb_d_dev_out_next+0x280>)
    caca:	4798      	blx	r3
    cacc:	e029      	b.n	cb22 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    cace:	687b      	ldr	r3, [r7, #4]
    cad0:	8a1b      	ldrh	r3, [r3, #16]
    cad2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cad4:	429a      	cmp	r2, r3
    cad6:	d90f      	bls.n	caf8 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    cad8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    cada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    cade:	d903      	bls.n	cae8 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    cae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    cae4:	84fb      	strh	r3, [r7, #38]	; 0x26
    cae6:	e011      	b.n	cb0c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    cae8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    caea:	8a7b      	ldrh	r3, [r7, #18]
    caec:	4013      	ands	r3, r2
    caee:	b29b      	uxth	r3, r3
    caf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    caf2:	1ad3      	subs	r3, r2, r3
    caf4:	84fb      	strh	r3, [r7, #38]	; 0x26
    caf6:	e009      	b.n	cb0c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    caf8:	687b      	ldr	r3, [r7, #4]
    cafa:	8a1b      	ldrh	r3, [r3, #16]
    cafc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cafe:	429a      	cmp	r2, r3
    cb00:	d204      	bcs.n	cb0c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    cb02:	687a      	ldr	r2, [r7, #4]
    cb04:	7cd3      	ldrb	r3, [r2, #19]
    cb06:	f043 0320 	orr.w	r3, r3, #32
    cb0a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	681a      	ldr	r2, [r3, #0]
    cb10:	687b      	ldr	r3, [r7, #4]
    cb12:	689b      	ldr	r3, [r3, #8]
    cb14:	4413      	add	r3, r2
    cb16:	461a      	mov	r2, r3
    cb18:	7ffb      	ldrb	r3, [r7, #31]
    cb1a:	2100      	movs	r1, #0
    cb1c:	4618      	mov	r0, r3
    cb1e:	4b20      	ldr	r3, [pc, #128]	; (cba0 <_usb_d_dev_out_next+0x280>)
    cb20:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    cb22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cb24:	7ff8      	ldrb	r0, [r7, #31]
    cb26:	2300      	movs	r3, #0
    cb28:	2100      	movs	r1, #0
    cb2a:	4c1e      	ldr	r4, [pc, #120]	; (cba4 <_usb_d_dev_out_next+0x284>)
    cb2c:	47a0      	blx	r4
			goto _out_rx_exec;
    cb2e:	e01f      	b.n	cb70 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    cb30:	7bfb      	ldrb	r3, [r7, #15]
    cb32:	2b00      	cmp	r3, #0
    cb34:	d006      	beq.n	cb44 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    cb36:	7ffb      	ldrb	r3, [r7, #31]
    cb38:	222d      	movs	r2, #45	; 0x2d
    cb3a:	4619      	mov	r1, r3
    cb3c:	6a38      	ldr	r0, [r7, #32]
    cb3e:	4b1a      	ldr	r3, [pc, #104]	; (cba8 <_usb_d_dev_out_next+0x288>)
    cb40:	4798      	blx	r3
    cb42:	e005      	b.n	cb50 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    cb44:	7ffb      	ldrb	r3, [r7, #31]
    cb46:	2225      	movs	r2, #37	; 0x25
    cb48:	4619      	mov	r1, r3
    cb4a:	6a38      	ldr	r0, [r7, #32]
    cb4c:	4b16      	ldr	r3, [pc, #88]	; (cba8 <_usb_d_dev_out_next+0x288>)
    cb4e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    cb50:	7ffb      	ldrb	r3, [r7, #31]
    cb52:	2b00      	cmp	r3, #0
    cb54:	d107      	bne.n	cb66 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cb56:	687b      	ldr	r3, [r7, #4]
    cb58:	68db      	ldr	r3, [r3, #12]
    cb5a:	461a      	mov	r2, r3
    cb5c:	7ffb      	ldrb	r3, [r7, #31]
    cb5e:	2100      	movs	r1, #0
    cb60:	4618      	mov	r0, r3
    cb62:	4b0f      	ldr	r3, [pc, #60]	; (cba0 <_usb_d_dev_out_next+0x280>)
    cb64:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    cb66:	2100      	movs	r1, #0
    cb68:	6878      	ldr	r0, [r7, #4]
    cb6a:	4b10      	ldr	r3, [pc, #64]	; (cbac <_usb_d_dev_out_next+0x28c>)
    cb6c:	4798      	blx	r3
	return;
    cb6e:	e031      	b.n	cbd4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    cb70:	78fb      	ldrb	r3, [r7, #3]
    cb72:	f083 0301 	eor.w	r3, r3, #1
    cb76:	b2db      	uxtb	r3, r3
    cb78:	2b00      	cmp	r3, #0
    cb7a:	d025      	beq.n	cbc8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    cb7c:	7bfb      	ldrb	r3, [r7, #15]
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d018      	beq.n	cbb4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    cb82:	7ffb      	ldrb	r3, [r7, #31]
    cb84:	2101      	movs	r1, #1
    cb86:	4618      	mov	r0, r3
    cb88:	4b09      	ldr	r3, [pc, #36]	; (cbb0 <_usb_d_dev_out_next+0x290>)
    cb8a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    cb8c:	232d      	movs	r3, #45	; 0x2d
    cb8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    cb92:	e012      	b.n	cbba <_usb_d_dev_out_next+0x29a>
    cb94:	200036e0 	.word	0x200036e0
    cb98:	0000c101 	.word	0x0000c101
    cb9c:	00016735 	.word	0x00016735
    cba0:	0000c12d 	.word	0x0000c12d
    cba4:	0000c2b5 	.word	0x0000c2b5
    cba8:	0000ba0d 	.word	0x0000ba0d
    cbac:	0000da31 	.word	0x0000da31
    cbb0:	0000c2f5 	.word	0x0000c2f5
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    cbb4:	2325      	movs	r3, #37	; 0x25
    cbb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    cbba:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    cbbe:	7ffb      	ldrb	r3, [r7, #31]
    cbc0:	4619      	mov	r1, r3
    cbc2:	6a38      	ldr	r0, [r7, #32]
    cbc4:	4b05      	ldr	r3, [pc, #20]	; (cbdc <_usb_d_dev_out_next+0x2bc>)
    cbc6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    cbc8:	7ffb      	ldrb	r3, [r7, #31]
    cbca:	2201      	movs	r2, #1
    cbcc:	2100      	movs	r1, #0
    cbce:	4618      	mov	r0, r3
    cbd0:	4b03      	ldr	r3, [pc, #12]	; (cbe0 <_usb_d_dev_out_next+0x2c0>)
    cbd2:	4798      	blx	r3
}
    cbd4:	372c      	adds	r7, #44	; 0x2c
    cbd6:	46bd      	mov	sp, r7
    cbd8:	bd90      	pop	{r4, r7, pc}
    cbda:	bf00      	nop
    cbdc:	0000b9e1 	.word	0x0000b9e1
    cbe0:	0000c385 	.word	0x0000c385

0000cbe4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    cbe4:	b580      	push	{r7, lr}
    cbe6:	b084      	sub	sp, #16
    cbe8:	af00      	add	r7, sp, #0
    cbea:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	7c9b      	ldrb	r3, [r3, #18]
    cbf0:	f003 030f 	and.w	r3, r3, #15
    cbf4:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	7cdb      	ldrb	r3, [r3, #19]
    cbfa:	f003 0307 	and.w	r3, r3, #7
    cbfe:	b2db      	uxtb	r3, r3
    cc00:	2b01      	cmp	r3, #1
    cc02:	bf0c      	ite	eq
    cc04:	2301      	moveq	r3, #1
    cc06:	2300      	movne	r3, #0
    cc08:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    cc0a:	7bbb      	ldrb	r3, [r7, #14]
    cc0c:	f083 0301 	eor.w	r3, r3, #1
    cc10:	b2db      	uxtb	r3, r3
    cc12:	2b00      	cmp	r3, #0
    cc14:	d008      	beq.n	cc28 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    cc16:	7bfb      	ldrb	r3, [r7, #15]
    cc18:	4618      	mov	r0, r3
    cc1a:	4b20      	ldr	r3, [pc, #128]	; (cc9c <_usb_d_dev_handle_setup+0xb8>)
    cc1c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    cc1e:	7bfb      	ldrb	r3, [r7, #15]
    cc20:	4618      	mov	r0, r3
    cc22:	4b1f      	ldr	r3, [pc, #124]	; (cca0 <_usb_d_dev_handle_setup+0xbc>)
    cc24:	4798      	blx	r3
		return;
    cc26:	e036      	b.n	cc96 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    cc28:	687b      	ldr	r3, [r7, #4]
    cc2a:	7cdb      	ldrb	r3, [r3, #19]
    cc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cc30:	b2db      	uxtb	r3, r3
    cc32:	2b00      	cmp	r3, #0
    cc34:	d010      	beq.n	cc58 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    cc36:	687a      	ldr	r2, [r7, #4]
    cc38:	7cd3      	ldrb	r3, [r2, #19]
    cc3a:	f36f 1386 	bfc	r3, #6, #1
    cc3e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cc40:	7bfb      	ldrb	r3, [r7, #15]
    cc42:	2200      	movs	r2, #0
    cc44:	2101      	movs	r1, #1
    cc46:	4618      	mov	r0, r3
    cc48:	4b16      	ldr	r3, [pc, #88]	; (cca4 <_usb_d_dev_handle_setup+0xc0>)
    cc4a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    cc4c:	7bfb      	ldrb	r3, [r7, #15]
    cc4e:	2200      	movs	r2, #0
    cc50:	2100      	movs	r1, #0
    cc52:	4618      	mov	r0, r3
    cc54:	4b14      	ldr	r3, [pc, #80]	; (cca8 <_usb_d_dev_handle_setup+0xc4>)
    cc56:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    cc58:	687a      	ldr	r2, [r7, #4]
    cc5a:	7cd3      	ldrb	r3, [r2, #19]
    cc5c:	f36f 03c3 	bfc	r3, #3, #1
    cc60:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    cc62:	7bfb      	ldrb	r3, [r7, #15]
    cc64:	2100      	movs	r1, #0
    cc66:	4618      	mov	r0, r3
    cc68:	4b10      	ldr	r3, [pc, #64]	; (ccac <_usb_d_dev_handle_setup+0xc8>)
    cc6a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    cc6c:	7bfb      	ldrb	r3, [r7, #15]
    cc6e:	2101      	movs	r1, #1
    cc70:	4618      	mov	r0, r3
    cc72:	4b0e      	ldr	r3, [pc, #56]	; (ccac <_usb_d_dev_handle_setup+0xc8>)
    cc74:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cc76:	7bfb      	ldrb	r3, [r7, #15]
    cc78:	216f      	movs	r1, #111	; 0x6f
    cc7a:	4618      	mov	r0, r3
    cc7c:	4b0c      	ldr	r3, [pc, #48]	; (ccb0 <_usb_d_dev_handle_setup+0xcc>)
    cc7e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cc80:	7bfb      	ldrb	r3, [r7, #15]
    cc82:	216f      	movs	r1, #111	; 0x6f
    cc84:	4618      	mov	r0, r3
    cc86:	4b0b      	ldr	r3, [pc, #44]	; (ccb4 <_usb_d_dev_handle_setup+0xd0>)
    cc88:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    cc8a:	4b0b      	ldr	r3, [pc, #44]	; (ccb8 <_usb_d_dev_handle_setup+0xd4>)
    cc8c:	689b      	ldr	r3, [r3, #8]
    cc8e:	687a      	ldr	r2, [r7, #4]
    cc90:	7c92      	ldrb	r2, [r2, #18]
    cc92:	4610      	mov	r0, r2
    cc94:	4798      	blx	r3
}
    cc96:	3710      	adds	r7, #16
    cc98:	46bd      	mov	sp, r7
    cc9a:	bd80      	pop	{r7, pc}
    cc9c:	0000c089 	.word	0x0000c089
    cca0:	0000c035 	.word	0x0000c035
    cca4:	0000c32d 	.word	0x0000c32d
    cca8:	0000c385 	.word	0x0000c385
    ccac:	0000c2f5 	.word	0x0000c2f5
    ccb0:	0000be35 	.word	0x0000be35
    ccb4:	0000be85 	.word	0x0000be85
    ccb8:	20003618 	.word	0x20003618

0000ccbc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	b084      	sub	sp, #16
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	6078      	str	r0, [r7, #4]
    ccc4:	460b      	mov	r3, r1
    ccc6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ccc8:	687b      	ldr	r3, [r7, #4]
    ccca:	7c9b      	ldrb	r3, [r3, #18]
    cccc:	f003 030f 	and.w	r3, r3, #15
    ccd0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    ccd2:	78f9      	ldrb	r1, [r7, #3]
    ccd4:	7bfb      	ldrb	r3, [r7, #15]
    ccd6:	2200      	movs	r2, #0
    ccd8:	4618      	mov	r0, r3
    ccda:	4b07      	ldr	r3, [pc, #28]	; (ccf8 <_usb_d_dev_handle_stall+0x3c>)
    ccdc:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ccde:	4b07      	ldr	r3, [pc, #28]	; (ccfc <_usb_d_dev_handle_stall+0x40>)
    cce0:	691b      	ldr	r3, [r3, #16]
    cce2:	687a      	ldr	r2, [r7, #4]
    cce4:	7c90      	ldrb	r0, [r2, #18]
    cce6:	687a      	ldr	r2, [r7, #4]
    cce8:	6892      	ldr	r2, [r2, #8]
    ccea:	2101      	movs	r1, #1
    ccec:	4798      	blx	r3
}
    ccee:	bf00      	nop
    ccf0:	3710      	adds	r7, #16
    ccf2:	46bd      	mov	sp, r7
    ccf4:	bd80      	pop	{r7, pc}
    ccf6:	bf00      	nop
    ccf8:	0000bfe9 	.word	0x0000bfe9
    ccfc:	20003618 	.word	0x20003618

0000cd00 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cd00:	b580      	push	{r7, lr}
    cd02:	b088      	sub	sp, #32
    cd04:	af00      	add	r7, sp, #0
    cd06:	6078      	str	r0, [r7, #4]
    cd08:	460b      	mov	r3, r1
    cd0a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    cd0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cd10:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    cd12:	687b      	ldr	r3, [r7, #4]
    cd14:	7c9b      	ldrb	r3, [r3, #18]
    cd16:	f003 030f 	and.w	r3, r3, #15
    cd1a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    cd1c:	4b61      	ldr	r3, [pc, #388]	; (cea4 <_usb_d_dev_handle_trfail+0x1a4>)
    cd1e:	881b      	ldrh	r3, [r3, #0]
    cd20:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    cd22:	7efb      	ldrb	r3, [r7, #27]
    cd24:	015b      	lsls	r3, r3, #5
    cd26:	4a60      	ldr	r2, [pc, #384]	; (cea8 <_usb_d_dev_handle_trfail+0x1a8>)
    cd28:	4413      	add	r3, r2
    cd2a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    cd2c:	78fb      	ldrb	r3, [r7, #3]
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d006      	beq.n	cd40 <_usb_d_dev_handle_trfail+0x40>
    cd32:	7efb      	ldrb	r3, [r7, #27]
    cd34:	4619      	mov	r1, r3
    cd36:	69f8      	ldr	r0, [r7, #28]
    cd38:	4b5c      	ldr	r3, [pc, #368]	; (ceac <_usb_d_dev_handle_trfail+0x1ac>)
    cd3a:	4798      	blx	r3
    cd3c:	4603      	mov	r3, r0
    cd3e:	e005      	b.n	cd4c <_usb_d_dev_handle_trfail+0x4c>
    cd40:	7efb      	ldrb	r3, [r7, #27]
    cd42:	4619      	mov	r1, r3
    cd44:	69f8      	ldr	r0, [r7, #28]
    cd46:	4b5a      	ldr	r3, [pc, #360]	; (ceb0 <_usb_d_dev_handle_trfail+0x1b0>)
    cd48:	4798      	blx	r3
    cd4a:	4603      	mov	r3, r0
    cd4c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cd4e:	687b      	ldr	r3, [r7, #4]
    cd50:	7cdb      	ldrb	r3, [r3, #19]
    cd52:	f003 0307 	and.w	r3, r3, #7
    cd56:	b2db      	uxtb	r3, r3
    cd58:	2b01      	cmp	r3, #1
    cd5a:	bf0c      	ite	eq
    cd5c:	2301      	moveq	r3, #1
    cd5e:	2300      	movne	r3, #0
    cd60:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    cd62:	78fb      	ldrb	r3, [r7, #3]
    cd64:	011b      	lsls	r3, r3, #4
    cd66:	697a      	ldr	r2, [r7, #20]
    cd68:	4413      	add	r3, r2
    cd6a:	7a9b      	ldrb	r3, [r3, #10]
    cd6c:	b2db      	uxtb	r3, r3
    cd6e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    cd70:	7cfb      	ldrb	r3, [r7, #19]
    cd72:	2b02      	cmp	r3, #2
    cd74:	d12f      	bne.n	cdd6 <_usb_d_dev_handle_trfail+0xd6>
    cd76:	7b3b      	ldrb	r3, [r7, #12]
    cd78:	f003 0301 	and.w	r3, r3, #1
    cd7c:	b2db      	uxtb	r3, r3
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d029      	beq.n	cdd6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    cd82:	78fb      	ldrb	r3, [r7, #3]
    cd84:	011b      	lsls	r3, r3, #4
    cd86:	697a      	ldr	r2, [r7, #20]
    cd88:	441a      	add	r2, r3
    cd8a:	7a93      	ldrb	r3, [r2, #10]
    cd8c:	f36f 0300 	bfc	r3, #0, #1
    cd90:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cd92:	78fb      	ldrb	r3, [r7, #3]
    cd94:	f107 0220 	add.w	r2, r7, #32
    cd98:	4413      	add	r3, r2
    cd9a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd9e:	7efb      	ldrb	r3, [r7, #27]
    cda0:	4619      	mov	r1, r3
    cda2:	69f8      	ldr	r0, [r7, #28]
    cda4:	4b43      	ldr	r3, [pc, #268]	; (ceb4 <_usb_d_dev_handle_trfail+0x1b4>)
    cda6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cda8:	78fb      	ldrb	r3, [r7, #3]
    cdaa:	f107 0220 	add.w	r2, r7, #32
    cdae:	4413      	add	r3, r2
    cdb0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cdb4:	7efb      	ldrb	r3, [r7, #27]
    cdb6:	4619      	mov	r1, r3
    cdb8:	69f8      	ldr	r0, [r7, #28]
    cdba:	4b3f      	ldr	r3, [pc, #252]	; (ceb8 <_usb_d_dev_handle_trfail+0x1b8>)
    cdbc:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    cdbe:	78fb      	ldrb	r3, [r7, #3]
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	bf14      	ite	ne
    cdc4:	2301      	movne	r3, #1
    cdc6:	2300      	moveq	r3, #0
    cdc8:	b2db      	uxtb	r3, r3
    cdca:	2204      	movs	r2, #4
    cdcc:	4619      	mov	r1, r3
    cdce:	6878      	ldr	r0, [r7, #4]
    cdd0:	4b3a      	ldr	r3, [pc, #232]	; (cebc <_usb_d_dev_handle_trfail+0x1bc>)
    cdd2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    cdd4:	e062      	b.n	ce9c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    cdd6:	7b3b      	ldrb	r3, [r7, #12]
    cdd8:	f003 0302 	and.w	r3, r3, #2
    cddc:	b2db      	uxtb	r3, r3
    cdde:	2b00      	cmp	r3, #0
    cde0:	d040      	beq.n	ce64 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    cde2:	78fb      	ldrb	r3, [r7, #3]
    cde4:	011b      	lsls	r3, r3, #4
    cde6:	697a      	ldr	r2, [r7, #20]
    cde8:	441a      	add	r2, r3
    cdea:	7a93      	ldrb	r3, [r2, #10]
    cdec:	f36f 0341 	bfc	r3, #1, #1
    cdf0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cdf2:	78fb      	ldrb	r3, [r7, #3]
    cdf4:	f107 0220 	add.w	r2, r7, #32
    cdf8:	4413      	add	r3, r2
    cdfa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cdfe:	7efb      	ldrb	r3, [r7, #27]
    ce00:	4619      	mov	r1, r3
    ce02:	69f8      	ldr	r0, [r7, #28]
    ce04:	4b2b      	ldr	r3, [pc, #172]	; (ceb4 <_usb_d_dev_handle_trfail+0x1b4>)
    ce06:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ce08:	78fb      	ldrb	r3, [r7, #3]
    ce0a:	f107 0220 	add.w	r2, r7, #32
    ce0e:	4413      	add	r3, r2
    ce10:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ce14:	7efb      	ldrb	r3, [r7, #27]
    ce16:	4619      	mov	r1, r3
    ce18:	69f8      	ldr	r0, [r7, #28]
    ce1a:	4b27      	ldr	r3, [pc, #156]	; (ceb8 <_usb_d_dev_handle_trfail+0x1b8>)
    ce1c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    ce1e:	7cbb      	ldrb	r3, [r7, #18]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d03b      	beq.n	ce9c <_usb_d_dev_handle_trfail+0x19c>
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	7cdb      	ldrb	r3, [r3, #19]
    ce28:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ce2c:	b2db      	uxtb	r3, r3
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d034      	beq.n	ce9c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    ce32:	687b      	ldr	r3, [r7, #4]
    ce34:	7cdb      	ldrb	r3, [r3, #19]
    ce36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ce3a:	b2db      	uxtb	r3, r3
    ce3c:	461a      	mov	r2, r3
    ce3e:	78fb      	ldrb	r3, [r7, #3]
    ce40:	4293      	cmp	r3, r2
    ce42:	d02b      	beq.n	ce9c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    ce44:	687b      	ldr	r3, [r7, #4]
    ce46:	7cdb      	ldrb	r3, [r3, #19]
    ce48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ce4c:	b2db      	uxtb	r3, r3
    ce4e:	2b00      	cmp	r3, #0
    ce50:	bf14      	ite	ne
    ce52:	2301      	movne	r3, #1
    ce54:	2300      	moveq	r3, #0
    ce56:	b2db      	uxtb	r3, r3
    ce58:	2200      	movs	r2, #0
    ce5a:	4619      	mov	r1, r3
    ce5c:	6878      	ldr	r0, [r7, #4]
    ce5e:	4b17      	ldr	r3, [pc, #92]	; (cebc <_usb_d_dev_handle_trfail+0x1bc>)
    ce60:	4798      	blx	r3
}
    ce62:	e01b      	b.n	ce9c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    ce64:	78fa      	ldrb	r2, [r7, #3]
    ce66:	7efb      	ldrb	r3, [r7, #27]
    ce68:	4611      	mov	r1, r2
    ce6a:	4618      	mov	r0, r3
    ce6c:	4b14      	ldr	r3, [pc, #80]	; (cec0 <_usb_d_dev_handle_trfail+0x1c0>)
    ce6e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ce70:	78fb      	ldrb	r3, [r7, #3]
    ce72:	f107 0220 	add.w	r2, r7, #32
    ce76:	4413      	add	r3, r2
    ce78:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ce7c:	7efb      	ldrb	r3, [r7, #27]
    ce7e:	4619      	mov	r1, r3
    ce80:	69f8      	ldr	r0, [r7, #28]
    ce82:	4b0c      	ldr	r3, [pc, #48]	; (ceb4 <_usb_d_dev_handle_trfail+0x1b4>)
    ce84:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ce86:	78fb      	ldrb	r3, [r7, #3]
    ce88:	f107 0220 	add.w	r2, r7, #32
    ce8c:	4413      	add	r3, r2
    ce8e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ce92:	7efb      	ldrb	r3, [r7, #27]
    ce94:	4619      	mov	r1, r3
    ce96:	69f8      	ldr	r0, [r7, #28]
    ce98:	4b07      	ldr	r3, [pc, #28]	; (ceb8 <_usb_d_dev_handle_trfail+0x1b8>)
    ce9a:	4798      	blx	r3
}
    ce9c:	bf00      	nop
    ce9e:	3720      	adds	r7, #32
    cea0:	46bd      	mov	sp, r7
    cea2:	bd80      	pop	{r7, pc}
    cea4:	0001ae24 	.word	0x0001ae24
    cea8:	200036e0 	.word	0x200036e0
    ceac:	0000ba69 	.word	0x0000ba69
    ceb0:	0000ba39 	.word	0x0000ba39
    ceb4:	0000b90d 	.word	0x0000b90d
    ceb8:	0000ba0d 	.word	0x0000ba0d
    cebc:	0000da79 	.word	0x0000da79
    cec0:	0000c2f5 	.word	0x0000c2f5

0000cec4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    cec4:	b580      	push	{r7, lr}
    cec6:	b082      	sub	sp, #8
    cec8:	af00      	add	r7, sp, #0
    ceca:	6078      	str	r0, [r7, #4]
    cecc:	460b      	mov	r3, r1
    cece:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ced0:	78fb      	ldrb	r3, [r7, #3]
    ced2:	f003 0310 	and.w	r3, r3, #16
    ced6:	2b00      	cmp	r3, #0
    ced8:	d003      	beq.n	cee2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    ceda:	6878      	ldr	r0, [r7, #4]
    cedc:	4b0c      	ldr	r3, [pc, #48]	; (cf10 <_usb_d_dev_trans_setup_isr+0x4c>)
    cede:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    cee0:	e012      	b.n	cf08 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    cee2:	78fb      	ldrb	r3, [r7, #3]
    cee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cee8:	2b00      	cmp	r3, #0
    ceea:	d004      	beq.n	cef6 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    ceec:	2101      	movs	r1, #1
    ceee:	6878      	ldr	r0, [r7, #4]
    cef0:	4b08      	ldr	r3, [pc, #32]	; (cf14 <_usb_d_dev_trans_setup_isr+0x50>)
    cef2:	4798      	blx	r3
}
    cef4:	e008      	b.n	cf08 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    cef6:	78fb      	ldrb	r3, [r7, #3]
    cef8:	f003 0320 	and.w	r3, r3, #32
    cefc:	2b00      	cmp	r3, #0
    cefe:	d003      	beq.n	cf08 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    cf00:	2100      	movs	r1, #0
    cf02:	6878      	ldr	r0, [r7, #4]
    cf04:	4b03      	ldr	r3, [pc, #12]	; (cf14 <_usb_d_dev_trans_setup_isr+0x50>)
    cf06:	4798      	blx	r3
}
    cf08:	bf00      	nop
    cf0a:	3708      	adds	r7, #8
    cf0c:	46bd      	mov	sp, r7
    cf0e:	bd80      	pop	{r7, pc}
    cf10:	0000cbe5 	.word	0x0000cbe5
    cf14:	0000ccbd 	.word	0x0000ccbd

0000cf18 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    cf18:	b580      	push	{r7, lr}
    cf1a:	b082      	sub	sp, #8
    cf1c:	af00      	add	r7, sp, #0
    cf1e:	6078      	str	r0, [r7, #4]
    cf20:	460b      	mov	r3, r1
    cf22:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    cf24:	78fb      	ldrb	r3, [r7, #3]
    cf26:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d004      	beq.n	cf38 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    cf2e:	2101      	movs	r1, #1
    cf30:	6878      	ldr	r0, [r7, #4]
    cf32:	4b1a      	ldr	r3, [pc, #104]	; (cf9c <_usb_d_dev_trans_in_isr+0x84>)
    cf34:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    cf36:	e02c      	b.n	cf92 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    cf38:	78fb      	ldrb	r3, [r7, #3]
    cf3a:	f003 0308 	and.w	r3, r3, #8
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d004      	beq.n	cf4c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    cf42:	2101      	movs	r1, #1
    cf44:	6878      	ldr	r0, [r7, #4]
    cf46:	4b16      	ldr	r3, [pc, #88]	; (cfa0 <_usb_d_dev_trans_in_isr+0x88>)
    cf48:	4798      	blx	r3
}
    cf4a:	e022      	b.n	cf92 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    cf4c:	78fb      	ldrb	r3, [r7, #3]
    cf4e:	f003 0302 	and.w	r3, r3, #2
    cf52:	2b00      	cmp	r3, #0
    cf54:	d004      	beq.n	cf60 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    cf56:	2101      	movs	r1, #1
    cf58:	6878      	ldr	r0, [r7, #4]
    cf5a:	4b12      	ldr	r3, [pc, #72]	; (cfa4 <_usb_d_dev_trans_in_isr+0x8c>)
    cf5c:	4798      	blx	r3
}
    cf5e:	e018      	b.n	cf92 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    cf60:	687b      	ldr	r3, [r7, #4]
    cf62:	7cdb      	ldrb	r3, [r3, #19]
    cf64:	f003 0307 	and.w	r3, r3, #7
    cf68:	b2db      	uxtb	r3, r3
    cf6a:	2b01      	cmp	r3, #1
    cf6c:	d111      	bne.n	cf92 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    cf6e:	78fb      	ldrb	r3, [r7, #3]
    cf70:	f003 0304 	and.w	r3, r3, #4
    cf74:	2b00      	cmp	r3, #0
    cf76:	d004      	beq.n	cf82 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    cf78:	2100      	movs	r1, #0
    cf7a:	6878      	ldr	r0, [r7, #4]
    cf7c:	4b08      	ldr	r3, [pc, #32]	; (cfa0 <_usb_d_dev_trans_in_isr+0x88>)
    cf7e:	4798      	blx	r3
}
    cf80:	e007      	b.n	cf92 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cf82:	78fb      	ldrb	r3, [r7, #3]
    cf84:	f003 0310 	and.w	r3, r3, #16
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d002      	beq.n	cf92 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    cf8c:	6878      	ldr	r0, [r7, #4]
    cf8e:	4b06      	ldr	r3, [pc, #24]	; (cfa8 <_usb_d_dev_trans_in_isr+0x90>)
    cf90:	4798      	blx	r3
}
    cf92:	bf00      	nop
    cf94:	3708      	adds	r7, #8
    cf96:	46bd      	mov	sp, r7
    cf98:	bd80      	pop	{r7, pc}
    cf9a:	bf00      	nop
    cf9c:	0000ccbd 	.word	0x0000ccbd
    cfa0:	0000cd01 	.word	0x0000cd01
    cfa4:	0000c709 	.word	0x0000c709
    cfa8:	0000cbe5 	.word	0x0000cbe5

0000cfac <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    cfac:	b580      	push	{r7, lr}
    cfae:	b082      	sub	sp, #8
    cfb0:	af00      	add	r7, sp, #0
    cfb2:	6078      	str	r0, [r7, #4]
    cfb4:	460b      	mov	r3, r1
    cfb6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    cfb8:	78fb      	ldrb	r3, [r7, #3]
    cfba:	f003 0320 	and.w	r3, r3, #32
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d004      	beq.n	cfcc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    cfc2:	2100      	movs	r1, #0
    cfc4:	6878      	ldr	r0, [r7, #4]
    cfc6:	4b1a      	ldr	r3, [pc, #104]	; (d030 <_usb_d_dev_trans_out_isr+0x84>)
    cfc8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    cfca:	e02c      	b.n	d026 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    cfcc:	78fb      	ldrb	r3, [r7, #3]
    cfce:	f003 0304 	and.w	r3, r3, #4
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d004      	beq.n	cfe0 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    cfd6:	2100      	movs	r1, #0
    cfd8:	6878      	ldr	r0, [r7, #4]
    cfda:	4b16      	ldr	r3, [pc, #88]	; (d034 <_usb_d_dev_trans_out_isr+0x88>)
    cfdc:	4798      	blx	r3
}
    cfde:	e022      	b.n	d026 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    cfe0:	78fb      	ldrb	r3, [r7, #3]
    cfe2:	f003 0301 	and.w	r3, r3, #1
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d004      	beq.n	cff4 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    cfea:	2101      	movs	r1, #1
    cfec:	6878      	ldr	r0, [r7, #4]
    cfee:	4b12      	ldr	r3, [pc, #72]	; (d038 <_usb_d_dev_trans_out_isr+0x8c>)
    cff0:	4798      	blx	r3
}
    cff2:	e018      	b.n	d026 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    cff4:	687b      	ldr	r3, [r7, #4]
    cff6:	7cdb      	ldrb	r3, [r3, #19]
    cff8:	f003 0307 	and.w	r3, r3, #7
    cffc:	b2db      	uxtb	r3, r3
    cffe:	2b01      	cmp	r3, #1
    d000:	d111      	bne.n	d026 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d002:	78fb      	ldrb	r3, [r7, #3]
    d004:	f003 0308 	and.w	r3, r3, #8
    d008:	2b00      	cmp	r3, #0
    d00a:	d004      	beq.n	d016 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    d00c:	2101      	movs	r1, #1
    d00e:	6878      	ldr	r0, [r7, #4]
    d010:	4b08      	ldr	r3, [pc, #32]	; (d034 <_usb_d_dev_trans_out_isr+0x88>)
    d012:	4798      	blx	r3
}
    d014:	e007      	b.n	d026 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d016:	78fb      	ldrb	r3, [r7, #3]
    d018:	f003 0310 	and.w	r3, r3, #16
    d01c:	2b00      	cmp	r3, #0
    d01e:	d002      	beq.n	d026 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d020:	6878      	ldr	r0, [r7, #4]
    d022:	4b06      	ldr	r3, [pc, #24]	; (d03c <_usb_d_dev_trans_out_isr+0x90>)
    d024:	4798      	blx	r3
}
    d026:	bf00      	nop
    d028:	3708      	adds	r7, #8
    d02a:	46bd      	mov	sp, r7
    d02c:	bd80      	pop	{r7, pc}
    d02e:	bf00      	nop
    d030:	0000ccbd 	.word	0x0000ccbd
    d034:	0000cd01 	.word	0x0000cd01
    d038:	0000c921 	.word	0x0000c921
    d03c:	0000cbe5 	.word	0x0000cbe5

0000d040 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    d040:	b580      	push	{r7, lr}
    d042:	b084      	sub	sp, #16
    d044:	af00      	add	r7, sp, #0
    d046:	6078      	str	r0, [r7, #4]
    d048:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    d04a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d04e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d050:	683b      	ldr	r3, [r7, #0]
    d052:	7c9b      	ldrb	r3, [r3, #18]
    d054:	f003 030f 	and.w	r3, r3, #15
    d058:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    d05a:	7afb      	ldrb	r3, [r7, #11]
    d05c:	2201      	movs	r2, #1
    d05e:	409a      	lsls	r2, r3
    d060:	687b      	ldr	r3, [r7, #4]
    d062:	4013      	ands	r3, r2
    d064:	2b00      	cmp	r3, #0
    d066:	d03d      	beq.n	d0e4 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    d068:	7afb      	ldrb	r3, [r7, #11]
    d06a:	68fa      	ldr	r2, [r7, #12]
    d06c:	3308      	adds	r3, #8
    d06e:	015b      	lsls	r3, r3, #5
    d070:	4413      	add	r3, r2
    d072:	3307      	adds	r3, #7
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    d078:	7afb      	ldrb	r3, [r7, #11]
    d07a:	68fa      	ldr	r2, [r7, #12]
    d07c:	015b      	lsls	r3, r3, #5
    d07e:	4413      	add	r3, r2
    d080:	f203 1309 	addw	r3, r3, #265	; 0x109
    d084:	781b      	ldrb	r3, [r3, #0]
    d086:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    d088:	7aba      	ldrb	r2, [r7, #10]
    d08a:	7a7b      	ldrb	r3, [r7, #9]
    d08c:	4013      	ands	r3, r2
    d08e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    d090:	7abb      	ldrb	r3, [r7, #10]
    d092:	2b00      	cmp	r3, #0
    d094:	d027      	beq.n	d0e6 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    d096:	683b      	ldr	r3, [r7, #0]
    d098:	7cdb      	ldrb	r3, [r3, #19]
    d09a:	f003 0307 	and.w	r3, r3, #7
    d09e:	b2db      	uxtb	r3, r3
    d0a0:	2b01      	cmp	r3, #1
    d0a2:	d10c      	bne.n	d0be <_usb_d_dev_handle_eps+0x7e>
    d0a4:	683b      	ldr	r3, [r7, #0]
    d0a6:	7cdb      	ldrb	r3, [r3, #19]
    d0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d0ac:	b2db      	uxtb	r3, r3
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d105      	bne.n	d0be <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    d0b2:	7abb      	ldrb	r3, [r7, #10]
    d0b4:	4619      	mov	r1, r3
    d0b6:	6838      	ldr	r0, [r7, #0]
    d0b8:	4b0c      	ldr	r3, [pc, #48]	; (d0ec <_usb_d_dev_handle_eps+0xac>)
    d0ba:	4798      	blx	r3
    d0bc:	e013      	b.n	d0e6 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    d0be:	683b      	ldr	r3, [r7, #0]
    d0c0:	7cdb      	ldrb	r3, [r3, #19]
    d0c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d0c6:	b2db      	uxtb	r3, r3
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d005      	beq.n	d0d8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    d0cc:	7abb      	ldrb	r3, [r7, #10]
    d0ce:	4619      	mov	r1, r3
    d0d0:	6838      	ldr	r0, [r7, #0]
    d0d2:	4b07      	ldr	r3, [pc, #28]	; (d0f0 <_usb_d_dev_handle_eps+0xb0>)
    d0d4:	4798      	blx	r3
    d0d6:	e006      	b.n	d0e6 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    d0d8:	7abb      	ldrb	r3, [r7, #10]
    d0da:	4619      	mov	r1, r3
    d0dc:	6838      	ldr	r0, [r7, #0]
    d0de:	4b05      	ldr	r3, [pc, #20]	; (d0f4 <_usb_d_dev_handle_eps+0xb4>)
    d0e0:	4798      	blx	r3
    d0e2:	e000      	b.n	d0e6 <_usb_d_dev_handle_eps+0xa6>
		return;
    d0e4:	bf00      	nop
		}
	}
}
    d0e6:	3710      	adds	r7, #16
    d0e8:	46bd      	mov	sp, r7
    d0ea:	bd80      	pop	{r7, pc}
    d0ec:	0000cec5 	.word	0x0000cec5
    d0f0:	0000cf19 	.word	0x0000cf19
    d0f4:	0000cfad 	.word	0x0000cfad

0000d0f8 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b084      	sub	sp, #16
    d0fc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d0fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d102:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    d104:	68bb      	ldr	r3, [r7, #8]
    d106:	8c1b      	ldrh	r3, [r3, #32]
    d108:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    d10a:	88fb      	ldrh	r3, [r7, #6]
    d10c:	2b00      	cmp	r3, #0
    d10e:	d104      	bne.n	d11a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    d110:	4b13      	ldr	r3, [pc, #76]	; (d160 <_usb_d_dev_handler+0x68>)
    d112:	4798      	blx	r3
    d114:	4603      	mov	r3, r0
    d116:	2b00      	cmp	r3, #0
    d118:	d11e      	bne.n	d158 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    d11a:	2300      	movs	r3, #0
    d11c:	73fb      	strb	r3, [r7, #15]
    d11e:	e017      	b.n	d150 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    d120:	7bfa      	ldrb	r2, [r7, #15]
    d122:	4613      	mov	r3, r2
    d124:	009b      	lsls	r3, r3, #2
    d126:	4413      	add	r3, r2
    d128:	009b      	lsls	r3, r3, #2
    d12a:	3310      	adds	r3, #16
    d12c:	4a0d      	ldr	r2, [pc, #52]	; (d164 <_usb_d_dev_handler+0x6c>)
    d12e:	4413      	add	r3, r2
    d130:	3304      	adds	r3, #4
    d132:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    d134:	683b      	ldr	r3, [r7, #0]
    d136:	7c9b      	ldrb	r3, [r3, #18]
    d138:	2bff      	cmp	r3, #255	; 0xff
    d13a:	d005      	beq.n	d148 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    d13c:	88fb      	ldrh	r3, [r7, #6]
    d13e:	6839      	ldr	r1, [r7, #0]
    d140:	4618      	mov	r0, r3
    d142:	4b09      	ldr	r3, [pc, #36]	; (d168 <_usb_d_dev_handler+0x70>)
    d144:	4798      	blx	r3
    d146:	e000      	b.n	d14a <_usb_d_dev_handler+0x52>
			continue;
    d148:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    d14a:	7bfb      	ldrb	r3, [r7, #15]
    d14c:	3301      	adds	r3, #1
    d14e:	73fb      	strb	r3, [r7, #15]
    d150:	7bfb      	ldrb	r3, [r7, #15]
    d152:	2b08      	cmp	r3, #8
    d154:	d9e4      	bls.n	d120 <_usb_d_dev_handler+0x28>
    d156:	e000      	b.n	d15a <_usb_d_dev_handler+0x62>
			return;
    d158:	bf00      	nop
	}
}
    d15a:	3710      	adds	r7, #16
    d15c:	46bd      	mov	sp, r7
    d15e:	bd80      	pop	{r7, pc}
    d160:	0000c651 	.word	0x0000c651
    d164:	20003618 	.word	0x20003618
    d168:	0000d041 	.word	0x0000d041

0000d16c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    d16c:	b580      	push	{r7, lr}
    d16e:	b082      	sub	sp, #8
    d170:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    d172:	2300      	movs	r3, #0
    d174:	71fb      	strb	r3, [r7, #7]
    d176:	e023      	b.n	d1c0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    d178:	79fa      	ldrb	r2, [r7, #7]
    d17a:	4613      	mov	r3, r2
    d17c:	009b      	lsls	r3, r3, #2
    d17e:	4413      	add	r3, r2
    d180:	009b      	lsls	r3, r3, #2
    d182:	3310      	adds	r3, #16
    d184:	4a14      	ldr	r2, [pc, #80]	; (d1d8 <_usb_d_dev_reset_epts+0x6c>)
    d186:	4413      	add	r3, r2
    d188:	3304      	adds	r3, #4
    d18a:	2103      	movs	r1, #3
    d18c:	4618      	mov	r0, r3
    d18e:	4b13      	ldr	r3, [pc, #76]	; (d1dc <_usb_d_dev_reset_epts+0x70>)
    d190:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    d192:	79fa      	ldrb	r2, [r7, #7]
    d194:	4910      	ldr	r1, [pc, #64]	; (d1d8 <_usb_d_dev_reset_epts+0x6c>)
    d196:	4613      	mov	r3, r2
    d198:	009b      	lsls	r3, r3, #2
    d19a:	4413      	add	r3, r2
    d19c:	009b      	lsls	r3, r3, #2
    d19e:	440b      	add	r3, r1
    d1a0:	3326      	adds	r3, #38	; 0x26
    d1a2:	22ff      	movs	r2, #255	; 0xff
    d1a4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    d1a6:	79fa      	ldrb	r2, [r7, #7]
    d1a8:	490b      	ldr	r1, [pc, #44]	; (d1d8 <_usb_d_dev_reset_epts+0x6c>)
    d1aa:	4613      	mov	r3, r2
    d1ac:	009b      	lsls	r3, r3, #2
    d1ae:	4413      	add	r3, r2
    d1b0:	009b      	lsls	r3, r3, #2
    d1b2:	440b      	add	r3, r1
    d1b4:	3327      	adds	r3, #39	; 0x27
    d1b6:	2200      	movs	r2, #0
    d1b8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    d1ba:	79fb      	ldrb	r3, [r7, #7]
    d1bc:	3301      	adds	r3, #1
    d1be:	71fb      	strb	r3, [r7, #7]
    d1c0:	79fb      	ldrb	r3, [r7, #7]
    d1c2:	2b08      	cmp	r3, #8
    d1c4:	d9d8      	bls.n	d178 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    d1c6:	22a0      	movs	r2, #160	; 0xa0
    d1c8:	2100      	movs	r1, #0
    d1ca:	4805      	ldr	r0, [pc, #20]	; (d1e0 <_usb_d_dev_reset_epts+0x74>)
    d1cc:	4b05      	ldr	r3, [pc, #20]	; (d1e4 <_usb_d_dev_reset_epts+0x78>)
    d1ce:	4798      	blx	r3
}
    d1d0:	bf00      	nop
    d1d2:	3708      	adds	r7, #8
    d1d4:	46bd      	mov	sp, r7
    d1d6:	bd80      	pop	{r7, pc}
    d1d8:	20003618 	.word	0x20003618
    d1dc:	0000da31 	.word	0x0000da31
    d1e0:	200036e0 	.word	0x200036e0
    d1e4:	00016869 	.word	0x00016869

0000d1e8 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    d1e8:	b580      	push	{r7, lr}
    d1ea:	b084      	sub	sp, #16
    d1ec:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    d1ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d1f2:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    d1f4:	2301      	movs	r3, #1
    d1f6:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    d1f8:	2304      	movs	r3, #4
    d1fa:	713b      	strb	r3, [r7, #4]
    d1fc:	2300      	movs	r3, #0
    d1fe:	717b      	strb	r3, [r7, #5]
    d200:	2300      	movs	r3, #0
    d202:	71bb      	strb	r3, [r7, #6]
    d204:	2300      	movs	r3, #0
    d206:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    d208:	2101      	movs	r1, #1
    d20a:	68f8      	ldr	r0, [r7, #12]
    d20c:	4b26      	ldr	r3, [pc, #152]	; (d2a8 <_usb_d_dev_init+0xc0>)
    d20e:	4798      	blx	r3
    d210:	4603      	mov	r3, r0
    d212:	f083 0301 	eor.w	r3, r3, #1
    d216:	b2db      	uxtb	r3, r3
    d218:	2b00      	cmp	r3, #0
    d21a:	d011      	beq.n	d240 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    d21c:	2102      	movs	r1, #2
    d21e:	68f8      	ldr	r0, [r7, #12]
    d220:	4b22      	ldr	r3, [pc, #136]	; (d2ac <_usb_d_dev_init+0xc4>)
    d222:	4798      	blx	r3
    d224:	4603      	mov	r3, r0
    d226:	2b00      	cmp	r3, #0
    d228:	d006      	beq.n	d238 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    d22a:	68f8      	ldr	r0, [r7, #12]
    d22c:	4b20      	ldr	r3, [pc, #128]	; (d2b0 <_usb_d_dev_init+0xc8>)
    d22e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    d230:	2102      	movs	r1, #2
    d232:	68f8      	ldr	r0, [r7, #12]
    d234:	4b1f      	ldr	r3, [pc, #124]	; (d2b4 <_usb_d_dev_init+0xcc>)
    d236:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    d238:	2101      	movs	r1, #1
    d23a:	68f8      	ldr	r0, [r7, #12]
    d23c:	4b1e      	ldr	r3, [pc, #120]	; (d2b8 <_usb_d_dev_init+0xd0>)
    d23e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    d240:	2101      	movs	r1, #1
    d242:	68f8      	ldr	r0, [r7, #12]
    d244:	4b1b      	ldr	r3, [pc, #108]	; (d2b4 <_usb_d_dev_init+0xcc>)
    d246:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    d248:	4b1c      	ldr	r3, [pc, #112]	; (d2bc <_usb_d_dev_init+0xd4>)
    d24a:	4a1d      	ldr	r2, [pc, #116]	; (d2c0 <_usb_d_dev_init+0xd8>)
    d24c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    d24e:	4b1b      	ldr	r3, [pc, #108]	; (d2bc <_usb_d_dev_init+0xd4>)
    d250:	4a1b      	ldr	r2, [pc, #108]	; (d2c0 <_usb_d_dev_init+0xd8>)
    d252:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    d254:	4b19      	ldr	r3, [pc, #100]	; (d2bc <_usb_d_dev_init+0xd4>)
    d256:	4a1a      	ldr	r2, [pc, #104]	; (d2c0 <_usb_d_dev_init+0xd8>)
    d258:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    d25a:	4b18      	ldr	r3, [pc, #96]	; (d2bc <_usb_d_dev_init+0xd4>)
    d25c:	4a18      	ldr	r2, [pc, #96]	; (d2c0 <_usb_d_dev_init+0xd8>)
    d25e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    d260:	4b16      	ldr	r3, [pc, #88]	; (d2bc <_usb_d_dev_init+0xd4>)
    d262:	4a17      	ldr	r2, [pc, #92]	; (d2c0 <_usb_d_dev_init+0xd8>)
    d264:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    d266:	4b17      	ldr	r3, [pc, #92]	; (d2c4 <_usb_d_dev_init+0xdc>)
    d268:	4798      	blx	r3

	_usb_load_calib();
    d26a:	4b17      	ldr	r3, [pc, #92]	; (d2c8 <_usb_d_dev_init+0xe0>)
    d26c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    d26e:	2104      	movs	r1, #4
    d270:	68f8      	ldr	r0, [r7, #12]
    d272:	4b11      	ldr	r3, [pc, #68]	; (d2b8 <_usb_d_dev_init+0xd0>)
    d274:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    d276:	4b15      	ldr	r3, [pc, #84]	; (d2cc <_usb_d_dev_init+0xe4>)
    d278:	4619      	mov	r1, r3
    d27a:	68f8      	ldr	r0, [r7, #12]
    d27c:	4b14      	ldr	r3, [pc, #80]	; (d2d0 <_usb_d_dev_init+0xe8>)
    d27e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    d280:	7afb      	ldrb	r3, [r7, #11]
    d282:	f107 0210 	add.w	r2, r7, #16
    d286:	4413      	add	r3, r2
    d288:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    d28c:	f043 0301 	orr.w	r3, r3, #1
    d290:	b2db      	uxtb	r3, r3
    d292:	b29b      	uxth	r3, r3
    d294:	4619      	mov	r1, r3
    d296:	68f8      	ldr	r0, [r7, #12]
    d298:	4b0e      	ldr	r3, [pc, #56]	; (d2d4 <_usb_d_dev_init+0xec>)
    d29a:	4798      	blx	r3

	return ERR_NONE;
    d29c:	2300      	movs	r3, #0
}
    d29e:	4618      	mov	r0, r3
    d2a0:	3710      	adds	r7, #16
    d2a2:	46bd      	mov	sp, r7
    d2a4:	bd80      	pop	{r7, pc}
    d2a6:	bf00      	nop
    d2a8:	0000b881 	.word	0x0000b881
    d2ac:	0000bbd1 	.word	0x0000bbd1
    d2b0:	0000bba5 	.word	0x0000bba5
    d2b4:	0000b857 	.word	0x0000b857
    d2b8:	0000bc01 	.word	0x0000bc01
    d2bc:	20003618 	.word	0x20003618
    d2c0:	0000bcc9 	.word	0x0000bcc9
    d2c4:	0000d16d 	.word	0x0000d16d
    d2c8:	0000bce1 	.word	0x0000bce1
    d2cc:	200036e0 	.word	0x200036e0
    d2d0:	0000bcad 	.word	0x0000bcad
    d2d4:	0000bc71 	.word	0x0000bc71

0000d2d8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    d2d8:	b580      	push	{r7, lr}
    d2da:	b082      	sub	sp, #8
    d2dc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d2de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d2e2:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    d2e4:	2103      	movs	r1, #3
    d2e6:	6878      	ldr	r0, [r7, #4]
    d2e8:	4b17      	ldr	r3, [pc, #92]	; (d348 <_usb_d_dev_enable+0x70>)
    d2ea:	4798      	blx	r3
    d2ec:	4603      	mov	r3, r0
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d002      	beq.n	d2f8 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    d2f2:	f06f 0310 	mvn.w	r3, #16
    d2f6:	e023      	b.n	d340 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    d2f8:	6878      	ldr	r0, [r7, #4]
    d2fa:	4b14      	ldr	r3, [pc, #80]	; (d34c <_usb_d_dev_enable+0x74>)
    d2fc:	4798      	blx	r3
    d2fe:	4603      	mov	r3, r0
    d300:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    d302:	78fb      	ldrb	r3, [r7, #3]
    d304:	f003 0302 	and.w	r3, r3, #2
    d308:	2b00      	cmp	r3, #0
    d30a:	d107      	bne.n	d31c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    d30c:	78fb      	ldrb	r3, [r7, #3]
    d30e:	f043 0302 	orr.w	r3, r3, #2
    d312:	b2db      	uxtb	r3, r3
    d314:	4619      	mov	r1, r3
    d316:	6878      	ldr	r0, [r7, #4]
    d318:	4b0d      	ldr	r3, [pc, #52]	; (d350 <_usb_d_dev_enable+0x78>)
    d31a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    d31c:	2050      	movs	r0, #80	; 0x50
    d31e:	4b0d      	ldr	r3, [pc, #52]	; (d354 <_usb_d_dev_enable+0x7c>)
    d320:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    d322:	2051      	movs	r0, #81	; 0x51
    d324:	4b0b      	ldr	r3, [pc, #44]	; (d354 <_usb_d_dev_enable+0x7c>)
    d326:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    d328:	2052      	movs	r0, #82	; 0x52
    d32a:	4b0a      	ldr	r3, [pc, #40]	; (d354 <_usb_d_dev_enable+0x7c>)
    d32c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    d32e:	2053      	movs	r0, #83	; 0x53
    d330:	4b08      	ldr	r3, [pc, #32]	; (d354 <_usb_d_dev_enable+0x7c>)
    d332:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    d334:	f240 218d 	movw	r1, #653	; 0x28d
    d338:	6878      	ldr	r0, [r7, #4]
    d33a:	4b07      	ldr	r3, [pc, #28]	; (d358 <_usb_d_dev_enable+0x80>)
    d33c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    d33e:	2300      	movs	r3, #0
}
    d340:	4618      	mov	r0, r3
    d342:	3708      	adds	r7, #8
    d344:	46bd      	mov	sp, r7
    d346:	bd80      	pop	{r7, pc}
    d348:	0000bb7b 	.word	0x0000bb7b
    d34c:	0000bc29 	.word	0x0000bc29
    d350:	0000bc01 	.word	0x0000bc01
    d354:	0000b78d 	.word	0x0000b78d
    d358:	0000bb25 	.word	0x0000bb25

0000d35c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    d35c:	b580      	push	{r7, lr}
    d35e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    d360:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d364:	4b01      	ldr	r3, [pc, #4]	; (d36c <_usb_d_dev_attach+0x10>)
    d366:	4798      	blx	r3
}
    d368:	bf00      	nop
    d36a:	bd80      	pop	{r7, pc}
    d36c:	0000bc4d 	.word	0x0000bc4d

0000d370 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    d370:	b580      	push	{r7, lr}
    d372:	b082      	sub	sp, #8
    d374:	af00      	add	r7, sp, #0
    d376:	4603      	mov	r3, r0
    d378:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    d37a:	79fb      	ldrb	r3, [r7, #7]
    d37c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d380:	b2db      	uxtb	r3, r3
    d382:	4619      	mov	r1, r3
    d384:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d388:	4b02      	ldr	r3, [pc, #8]	; (d394 <_usb_d_dev_set_address+0x24>)
    d38a:	4798      	blx	r3
}
    d38c:	bf00      	nop
    d38e:	3708      	adds	r7, #8
    d390:	46bd      	mov	sp, r7
    d392:	bd80      	pop	{r7, pc}
    d394:	0000bc8f 	.word	0x0000bc8f

0000d398 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    d398:	b590      	push	{r4, r7, lr}
    d39a:	b085      	sub	sp, #20
    d39c:	af00      	add	r7, sp, #0
    d39e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    d3a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d3a4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	7c9b      	ldrb	r3, [r3, #18]
    d3aa:	f003 030f 	and.w	r3, r3, #15
    d3ae:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	68db      	ldr	r3, [r3, #12]
    d3b4:	461a      	mov	r2, r3
    d3b6:	7afb      	ldrb	r3, [r7, #11]
    d3b8:	2100      	movs	r1, #0
    d3ba:	4618      	mov	r0, r3
    d3bc:	4b0f      	ldr	r3, [pc, #60]	; (d3fc <_usb_d_dev_trans_setup+0x64>)
    d3be:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d3c0:	687b      	ldr	r3, [r7, #4]
    d3c2:	8a1b      	ldrh	r3, [r3, #16]
    d3c4:	461a      	mov	r2, r3
    d3c6:	7af8      	ldrb	r0, [r7, #11]
    d3c8:	2300      	movs	r3, #0
    d3ca:	2100      	movs	r1, #0
    d3cc:	4c0c      	ldr	r4, [pc, #48]	; (d400 <_usb_d_dev_trans_setup+0x68>)
    d3ce:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    d3d0:	7afb      	ldrb	r3, [r7, #11]
    d3d2:	22b0      	movs	r2, #176	; 0xb0
    d3d4:	4619      	mov	r1, r3
    d3d6:	68f8      	ldr	r0, [r7, #12]
    d3d8:	4b0a      	ldr	r3, [pc, #40]	; (d404 <_usb_d_dev_trans_setup+0x6c>)
    d3da:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    d3dc:	7afb      	ldrb	r3, [r7, #11]
    d3de:	2200      	movs	r2, #0
    d3e0:	2100      	movs	r1, #0
    d3e2:	4618      	mov	r0, r3
    d3e4:	4b08      	ldr	r3, [pc, #32]	; (d408 <_usb_d_dev_trans_setup+0x70>)
    d3e6:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    d3e8:	7afb      	ldrb	r3, [r7, #11]
    d3ea:	2210      	movs	r2, #16
    d3ec:	4619      	mov	r1, r3
    d3ee:	68f8      	ldr	r0, [r7, #12]
    d3f0:	4b06      	ldr	r3, [pc, #24]	; (d40c <_usb_d_dev_trans_setup+0x74>)
    d3f2:	4798      	blx	r3
}
    d3f4:	bf00      	nop
    d3f6:	3714      	adds	r7, #20
    d3f8:	46bd      	mov	sp, r7
    d3fa:	bd90      	pop	{r4, r7, pc}
    d3fc:	0000c12d 	.word	0x0000c12d
    d400:	0000c2b5 	.word	0x0000c2b5
    d404:	0000b98d 	.word	0x0000b98d
    d408:	0000c385 	.word	0x0000c385
    d40c:	0000b9e1 	.word	0x0000b9e1

0000d410 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    d410:	b580      	push	{r7, lr}
    d412:	b088      	sub	sp, #32
    d414:	af00      	add	r7, sp, #0
    d416:	4603      	mov	r3, r0
    d418:	71fb      	strb	r3, [r7, #7]
    d41a:	460b      	mov	r3, r1
    d41c:	71bb      	strb	r3, [r7, #6]
    d41e:	4613      	mov	r3, r2
    d420:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    d422:	79fb      	ldrb	r3, [r7, #7]
    d424:	f003 030f 	and.w	r3, r3, #15
    d428:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    d42a:	79fb      	ldrb	r3, [r7, #7]
    d42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d430:	2b00      	cmp	r3, #0
    d432:	bf14      	ite	ne
    d434:	2301      	movne	r3, #1
    d436:	2300      	moveq	r3, #0
    d438:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d43a:	7fba      	ldrb	r2, [r7, #30]
    d43c:	7ffb      	ldrb	r3, [r7, #31]
    d43e:	4611      	mov	r1, r2
    d440:	4618      	mov	r0, r3
    d442:	4b3e      	ldr	r3, [pc, #248]	; (d53c <_usb_d_dev_ep_init+0x12c>)
    d444:	4798      	blx	r3
    d446:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    d448:	79bb      	ldrb	r3, [r7, #6]
    d44a:	f003 0303 	and.w	r3, r3, #3
    d44e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    d450:	7ffa      	ldrb	r2, [r7, #31]
    d452:	4613      	mov	r3, r2
    d454:	005b      	lsls	r3, r3, #1
    d456:	4413      	add	r3, r2
    d458:	009b      	lsls	r3, r3, #2
    d45a:	4a39      	ldr	r2, [pc, #228]	; (d540 <_usb_d_dev_ep_init+0x130>)
    d45c:	4413      	add	r3, r2
    d45e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    d460:	7ffb      	ldrb	r3, [r7, #31]
    d462:	2b04      	cmp	r3, #4
    d464:	d902      	bls.n	d46c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    d466:	f06f 0311 	mvn.w	r3, #17
    d46a:	e063      	b.n	d534 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    d46c:	69bb      	ldr	r3, [r7, #24]
    d46e:	7c9b      	ldrb	r3, [r3, #18]
    d470:	2bff      	cmp	r3, #255	; 0xff
    d472:	d002      	beq.n	d47a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    d474:	f06f 0313 	mvn.w	r3, #19
    d478:	e05c      	b.n	d534 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    d47a:	7dfb      	ldrb	r3, [r7, #23]
    d47c:	2b00      	cmp	r3, #0
    d47e:	d11f      	bne.n	d4c0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    d480:	7fbb      	ldrb	r3, [r7, #30]
    d482:	2b00      	cmp	r3, #0
    d484:	bf14      	ite	ne
    d486:	2301      	movne	r3, #1
    d488:	2300      	moveq	r3, #0
    d48a:	b2db      	uxtb	r3, r3
    d48c:	f083 0301 	eor.w	r3, r3, #1
    d490:	b2db      	uxtb	r3, r3
    d492:	f003 0301 	and.w	r3, r3, #1
    d496:	b2da      	uxtb	r2, r3
    d498:	7ffb      	ldrb	r3, [r7, #31]
    d49a:	4611      	mov	r1, r2
    d49c:	4618      	mov	r0, r3
    d49e:	4b27      	ldr	r3, [pc, #156]	; (d53c <_usb_d_dev_ep_init+0x12c>)
    d4a0:	4798      	blx	r3
    d4a2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    d4a4:	68fb      	ldr	r3, [r7, #12]
    d4a6:	7c9b      	ldrb	r3, [r3, #18]
    d4a8:	2bff      	cmp	r3, #255	; 0xff
    d4aa:	d002      	beq.n	d4b2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    d4ac:	f06f 0313 	mvn.w	r3, #19
    d4b0:	e040      	b.n	d534 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    d4b2:	693b      	ldr	r3, [r7, #16]
    d4b4:	681b      	ldr	r3, [r3, #0]
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d102      	bne.n	d4c0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    d4ba:	f06f 0312 	mvn.w	r3, #18
    d4be:	e039      	b.n	d534 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    d4c0:	7fbb      	ldrb	r3, [r7, #30]
    d4c2:	2b00      	cmp	r3, #0
    d4c4:	d007      	beq.n	d4d6 <_usb_d_dev_ep_init+0xc6>
    d4c6:	693b      	ldr	r3, [r7, #16]
    d4c8:	685b      	ldr	r3, [r3, #4]
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	bf14      	ite	ne
    d4ce:	2301      	movne	r3, #1
    d4d0:	2300      	moveq	r3, #0
    d4d2:	b2db      	uxtb	r3, r3
    d4d4:	e006      	b.n	d4e4 <_usb_d_dev_ep_init+0xd4>
    d4d6:	693b      	ldr	r3, [r7, #16]
    d4d8:	681b      	ldr	r3, [r3, #0]
    d4da:	2b00      	cmp	r3, #0
    d4dc:	bf14      	ite	ne
    d4de:	2301      	movne	r3, #1
    d4e0:	2300      	moveq	r3, #0
    d4e2:	b2db      	uxtb	r3, r3
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d00f      	beq.n	d508 <_usb_d_dev_ep_init+0xf8>
    d4e8:	7fbb      	ldrb	r3, [r7, #30]
    d4ea:	2b00      	cmp	r3, #0
    d4ec:	d003      	beq.n	d4f6 <_usb_d_dev_ep_init+0xe6>
    d4ee:	693b      	ldr	r3, [r7, #16]
    d4f0:	895b      	ldrh	r3, [r3, #10]
    d4f2:	461a      	mov	r2, r3
    d4f4:	e002      	b.n	d4fc <_usb_d_dev_ep_init+0xec>
    d4f6:	693b      	ldr	r3, [r7, #16]
    d4f8:	891b      	ldrh	r3, [r3, #8]
    d4fa:	461a      	mov	r2, r3
    d4fc:	88bb      	ldrh	r3, [r7, #4]
    d4fe:	429a      	cmp	r2, r3
    d500:	da02      	bge.n	d508 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    d502:	f06f 0312 	mvn.w	r3, #18
    d506:	e015      	b.n	d534 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    d508:	7fbb      	ldrb	r3, [r7, #30]
    d50a:	2b00      	cmp	r3, #0
    d50c:	d002      	beq.n	d514 <_usb_d_dev_ep_init+0x104>
    d50e:	693b      	ldr	r3, [r7, #16]
    d510:	685b      	ldr	r3, [r3, #4]
    d512:	e001      	b.n	d518 <_usb_d_dev_ep_init+0x108>
    d514:	693b      	ldr	r3, [r7, #16]
    d516:	681b      	ldr	r3, [r3, #0]
    d518:	69ba      	ldr	r2, [r7, #24]
    d51a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    d51c:	69bb      	ldr	r3, [r7, #24]
    d51e:	88ba      	ldrh	r2, [r7, #4]
    d520:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    d522:	7dfb      	ldrb	r3, [r7, #23]
    d524:	3301      	adds	r3, #1
    d526:	b2da      	uxtb	r2, r3
    d528:	69bb      	ldr	r3, [r7, #24]
    d52a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    d52c:	69bb      	ldr	r3, [r7, #24]
    d52e:	79fa      	ldrb	r2, [r7, #7]
    d530:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    d532:	2300      	movs	r3, #0
}
    d534:	4618      	mov	r0, r3
    d536:	3720      	adds	r7, #32
    d538:	46bd      	mov	sp, r7
    d53a:	bd80      	pop	{r7, pc}
    d53c:	0000c441 	.word	0x0000c441
    d540:	0001ade8 	.word	0x0001ade8

0000d544 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    d544:	b580      	push	{r7, lr}
    d546:	b086      	sub	sp, #24
    d548:	af00      	add	r7, sp, #0
    d54a:	4603      	mov	r3, r0
    d54c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    d54e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d552:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    d554:	79fb      	ldrb	r3, [r7, #7]
    d556:	f003 030f 	and.w	r3, r3, #15
    d55a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d55c:	79fb      	ldrb	r3, [r7, #7]
    d55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d562:	2b00      	cmp	r3, #0
    d564:	bf14      	ite	ne
    d566:	2301      	movne	r3, #1
    d568:	2300      	moveq	r3, #0
    d56a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d56c:	7cba      	ldrb	r2, [r7, #18]
    d56e:	7cfb      	ldrb	r3, [r7, #19]
    d570:	4611      	mov	r1, r2
    d572:	4618      	mov	r0, r3
    d574:	4b2a      	ldr	r3, [pc, #168]	; (d620 <_usb_d_dev_ep_deinit+0xdc>)
    d576:	4798      	blx	r3
    d578:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d57a:	7cfb      	ldrb	r3, [r7, #19]
    d57c:	2b04      	cmp	r3, #4
    d57e:	d84a      	bhi.n	d616 <_usb_d_dev_ep_deinit+0xd2>
    d580:	68fb      	ldr	r3, [r7, #12]
    d582:	7c9b      	ldrb	r3, [r3, #18]
    d584:	2bff      	cmp	r3, #255	; 0xff
    d586:	d046      	beq.n	d616 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    d588:	7cbb      	ldrb	r3, [r7, #18]
    d58a:	2203      	movs	r2, #3
    d58c:	4619      	mov	r1, r3
    d58e:	68f8      	ldr	r0, [r7, #12]
    d590:	4b24      	ldr	r3, [pc, #144]	; (d624 <_usb_d_dev_ep_deinit+0xe0>)
    d592:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d594:	68fb      	ldr	r3, [r7, #12]
    d596:	7cdb      	ldrb	r3, [r3, #19]
    d598:	f003 0307 	and.w	r3, r3, #7
    d59c:	b2db      	uxtb	r3, r3
    d59e:	2b01      	cmp	r3, #1
    d5a0:	d107      	bne.n	d5b2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    d5a2:	79fb      	ldrb	r3, [r7, #7]
    d5a4:	697a      	ldr	r2, [r7, #20]
    d5a6:	3308      	adds	r3, #8
    d5a8:	015b      	lsls	r3, r3, #5
    d5aa:	4413      	add	r3, r2
    d5ac:	2200      	movs	r2, #0
    d5ae:	701a      	strb	r2, [r3, #0]
    d5b0:	e02a      	b.n	d608 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    d5b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	da15      	bge.n	d5e6 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    d5ba:	79fb      	ldrb	r3, [r7, #7]
    d5bc:	f003 030f 	and.w	r3, r3, #15
    d5c0:	79fa      	ldrb	r2, [r7, #7]
    d5c2:	f002 020f 	and.w	r2, r2, #15
    d5c6:	6979      	ldr	r1, [r7, #20]
    d5c8:	3208      	adds	r2, #8
    d5ca:	0152      	lsls	r2, r2, #5
    d5cc:	440a      	add	r2, r1
    d5ce:	7812      	ldrb	r2, [r2, #0]
    d5d0:	b2d2      	uxtb	r2, r2
    d5d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    d5d6:	b2d1      	uxtb	r1, r2
    d5d8:	697a      	ldr	r2, [r7, #20]
    d5da:	3308      	adds	r3, #8
    d5dc:	015b      	lsls	r3, r3, #5
    d5de:	4413      	add	r3, r2
    d5e0:	460a      	mov	r2, r1
    d5e2:	701a      	strb	r2, [r3, #0]
    d5e4:	e010      	b.n	d608 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    d5e6:	79fb      	ldrb	r3, [r7, #7]
    d5e8:	79fa      	ldrb	r2, [r7, #7]
    d5ea:	6979      	ldr	r1, [r7, #20]
    d5ec:	3208      	adds	r2, #8
    d5ee:	0152      	lsls	r2, r2, #5
    d5f0:	440a      	add	r2, r1
    d5f2:	7812      	ldrb	r2, [r2, #0]
    d5f4:	b2d2      	uxtb	r2, r2
    d5f6:	f022 0207 	bic.w	r2, r2, #7
    d5fa:	b2d1      	uxtb	r1, r2
    d5fc:	697a      	ldr	r2, [r7, #20]
    d5fe:	3308      	adds	r3, #8
    d600:	015b      	lsls	r3, r3, #5
    d602:	4413      	add	r3, r2
    d604:	460a      	mov	r2, r1
    d606:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    d608:	68fb      	ldr	r3, [r7, #12]
    d60a:	2200      	movs	r2, #0
    d60c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    d60e:	68fb      	ldr	r3, [r7, #12]
    d610:	22ff      	movs	r2, #255	; 0xff
    d612:	749a      	strb	r2, [r3, #18]
    d614:	e000      	b.n	d618 <_usb_d_dev_ep_deinit+0xd4>
		return;
    d616:	bf00      	nop
}
    d618:	3718      	adds	r7, #24
    d61a:	46bd      	mov	sp, r7
    d61c:	bd80      	pop	{r7, pc}
    d61e:	bf00      	nop
    d620:	0000c441 	.word	0x0000c441
    d624:	0000da79 	.word	0x0000da79

0000d628 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    d628:	b5b0      	push	{r4, r5, r7, lr}
    d62a:	b088      	sub	sp, #32
    d62c:	af00      	add	r7, sp, #0
    d62e:	4603      	mov	r3, r0
    d630:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    d632:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d636:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    d638:	79fb      	ldrb	r3, [r7, #7]
    d63a:	f003 030f 	and.w	r3, r3, #15
    d63e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    d640:	79fb      	ldrb	r3, [r7, #7]
    d642:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d646:	2b00      	cmp	r3, #0
    d648:	bf14      	ite	ne
    d64a:	2301      	movne	r3, #1
    d64c:	2300      	moveq	r3, #0
    d64e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    d650:	7eba      	ldrb	r2, [r7, #26]
    d652:	7efb      	ldrb	r3, [r7, #27]
    d654:	4611      	mov	r1, r2
    d656:	4618      	mov	r0, r3
    d658:	4b70      	ldr	r3, [pc, #448]	; (d81c <_usb_d_dev_ep_enable+0x1f4>)
    d65a:	4798      	blx	r3
    d65c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    d65e:	7efb      	ldrb	r3, [r7, #27]
    d660:	4619      	mov	r1, r3
    d662:	69f8      	ldr	r0, [r7, #28]
    d664:	4b6e      	ldr	r3, [pc, #440]	; (d820 <_usb_d_dev_ep_enable+0x1f8>)
    d666:	4798      	blx	r3
    d668:	4603      	mov	r3, r0
    d66a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d66c:	7efb      	ldrb	r3, [r7, #27]
    d66e:	2b04      	cmp	r3, #4
    d670:	d803      	bhi.n	d67a <_usb_d_dev_ep_enable+0x52>
    d672:	697b      	ldr	r3, [r7, #20]
    d674:	7c9b      	ldrb	r3, [r3, #18]
    d676:	2bff      	cmp	r3, #255	; 0xff
    d678:	d102      	bne.n	d680 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    d67a:	f06f 0311 	mvn.w	r3, #17
    d67e:	e0c8      	b.n	d812 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    d680:	7efb      	ldrb	r3, [r7, #27]
    d682:	015b      	lsls	r3, r3, #5
    d684:	4a67      	ldr	r2, [pc, #412]	; (d824 <_usb_d_dev_ep_enable+0x1fc>)
    d686:	4413      	add	r3, r2
    d688:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    d68a:	697b      	ldr	r3, [r7, #20]
    d68c:	7cdb      	ldrb	r3, [r3, #19]
    d68e:	f003 0307 	and.w	r3, r3, #7
    d692:	b2db      	uxtb	r3, r3
    d694:	2b01      	cmp	r3, #1
    d696:	d14b      	bne.n	d730 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    d698:	7cfb      	ldrb	r3, [r7, #19]
    d69a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    d69e:	2b00      	cmp	r3, #0
    d6a0:	d002      	beq.n	d6a8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    d6a2:	f06f 0313 	mvn.w	r3, #19
    d6a6:	e0b4      	b.n	d812 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    d6a8:	7efb      	ldrb	r3, [r7, #27]
    d6aa:	2211      	movs	r2, #17
    d6ac:	4619      	mov	r1, r3
    d6ae:	69f8      	ldr	r0, [r7, #28]
    d6b0:	4b5d      	ldr	r3, [pc, #372]	; (d828 <_usb_d_dev_ep_enable+0x200>)
    d6b2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d6b4:	697b      	ldr	r3, [r7, #20]
    d6b6:	8a1b      	ldrh	r3, [r3, #16]
    d6b8:	039b      	lsls	r3, r3, #14
    d6ba:	4c5c      	ldr	r4, [pc, #368]	; (d82c <_usb_d_dev_ep_enable+0x204>)
    d6bc:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d6be:	697b      	ldr	r3, [r7, #20]
    d6c0:	8a1b      	ldrh	r3, [r3, #16]
    d6c2:	4618      	mov	r0, r3
    d6c4:	4b5a      	ldr	r3, [pc, #360]	; (d830 <_usb_d_dev_ep_enable+0x208>)
    d6c6:	4798      	blx	r3
    d6c8:	4603      	mov	r3, r0
    d6ca:	071b      	lsls	r3, r3, #28
    d6cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d6d0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d6d4:	68fb      	ldr	r3, [r7, #12]
    d6d6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    d6d8:	68fb      	ldr	r3, [r7, #12]
    d6da:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d6de:	697b      	ldr	r3, [r7, #20]
    d6e0:	8a1b      	ldrh	r3, [r3, #16]
    d6e2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d6e6:	697b      	ldr	r3, [r7, #20]
    d6e8:	8a1b      	ldrh	r3, [r3, #16]
    d6ea:	4618      	mov	r0, r3
    d6ec:	4b50      	ldr	r3, [pc, #320]	; (d830 <_usb_d_dev_ep_enable+0x208>)
    d6ee:	4798      	blx	r3
    d6f0:	4603      	mov	r3, r0
    d6f2:	071b      	lsls	r3, r3, #28
    d6f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d6f8:	432b      	orrs	r3, r5
    d6fa:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d6fc:	7efb      	ldrb	r3, [r7, #27]
    d6fe:	2200      	movs	r2, #0
    d700:	2100      	movs	r1, #0
    d702:	4618      	mov	r0, r3
    d704:	4b4b      	ldr	r3, [pc, #300]	; (d834 <_usb_d_dev_ep_enable+0x20c>)
    d706:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    d708:	7efb      	ldrb	r3, [r7, #27]
    d70a:	2200      	movs	r2, #0
    d70c:	2101      	movs	r1, #1
    d70e:	4618      	mov	r0, r3
    d710:	4b49      	ldr	r3, [pc, #292]	; (d838 <_usb_d_dev_ep_enable+0x210>)
    d712:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    d714:	7efb      	ldrb	r3, [r7, #27]
    d716:	2100      	movs	r1, #0
    d718:	4618      	mov	r0, r3
    d71a:	4b48      	ldr	r3, [pc, #288]	; (d83c <_usb_d_dev_ep_enable+0x214>)
    d71c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d71e:	7efb      	ldrb	r3, [r7, #27]
    d720:	2101      	movs	r1, #1
    d722:	4618      	mov	r0, r3
    d724:	4b45      	ldr	r3, [pc, #276]	; (d83c <_usb_d_dev_ep_enable+0x214>)
    d726:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    d728:	6978      	ldr	r0, [r7, #20]
    d72a:	4b45      	ldr	r3, [pc, #276]	; (d840 <_usb_d_dev_ep_enable+0x218>)
    d72c:	4798      	blx	r3
    d72e:	e06f      	b.n	d810 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    d730:	7ebb      	ldrb	r3, [r7, #26]
    d732:	2b00      	cmp	r3, #0
    d734:	d038      	beq.n	d7a8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    d736:	7cfb      	ldrb	r3, [r7, #19]
    d738:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d73c:	2b00      	cmp	r3, #0
    d73e:	d002      	beq.n	d746 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    d740:	f06f 0313 	mvn.w	r3, #19
    d744:	e065      	b.n	d812 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    d746:	697b      	ldr	r3, [r7, #20]
    d748:	7cdb      	ldrb	r3, [r3, #19]
    d74a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d74e:	b2db      	uxtb	r3, r3
    d750:	011b      	lsls	r3, r3, #4
    d752:	b2db      	uxtb	r3, r3
    d754:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d758:	b2da      	uxtb	r2, r3
    d75a:	7cfb      	ldrb	r3, [r7, #19]
    d75c:	4313      	orrs	r3, r2
    d75e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d760:	7cfa      	ldrb	r2, [r7, #19]
    d762:	7efb      	ldrb	r3, [r7, #27]
    d764:	4619      	mov	r1, r3
    d766:	69f8      	ldr	r0, [r7, #28]
    d768:	4b2f      	ldr	r3, [pc, #188]	; (d828 <_usb_d_dev_ep_enable+0x200>)
    d76a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d772:	697b      	ldr	r3, [r7, #20]
    d774:	8a1b      	ldrh	r3, [r3, #16]
    d776:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d77a:	697b      	ldr	r3, [r7, #20]
    d77c:	8a1b      	ldrh	r3, [r3, #16]
    d77e:	4618      	mov	r0, r3
    d780:	4b2b      	ldr	r3, [pc, #172]	; (d830 <_usb_d_dev_ep_enable+0x208>)
    d782:	4798      	blx	r3
    d784:	4603      	mov	r3, r0
    d786:	071b      	lsls	r3, r3, #28
    d788:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d78c:	432b      	orrs	r3, r5
    d78e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d790:	7efb      	ldrb	r3, [r7, #27]
    d792:	2200      	movs	r2, #0
    d794:	2101      	movs	r1, #1
    d796:	4618      	mov	r0, r3
    d798:	4b27      	ldr	r3, [pc, #156]	; (d838 <_usb_d_dev_ep_enable+0x210>)
    d79a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d79c:	7efb      	ldrb	r3, [r7, #27]
    d79e:	2101      	movs	r1, #1
    d7a0:	4618      	mov	r0, r3
    d7a2:	4b26      	ldr	r3, [pc, #152]	; (d83c <_usb_d_dev_ep_enable+0x214>)
    d7a4:	4798      	blx	r3
    d7a6:	e033      	b.n	d810 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    d7a8:	7cfb      	ldrb	r3, [r7, #19]
    d7aa:	f003 0307 	and.w	r3, r3, #7
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	d002      	beq.n	d7b8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    d7b2:	f06f 0313 	mvn.w	r3, #19
    d7b6:	e02c      	b.n	d812 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    d7b8:	697b      	ldr	r3, [r7, #20]
    d7ba:	7cdb      	ldrb	r3, [r3, #19]
    d7bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7c0:	b2db      	uxtb	r3, r3
    d7c2:	461a      	mov	r2, r3
    d7c4:	7cfb      	ldrb	r3, [r7, #19]
    d7c6:	4313      	orrs	r3, r2
    d7c8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d7ca:	7cfa      	ldrb	r2, [r7, #19]
    d7cc:	7efb      	ldrb	r3, [r7, #27]
    d7ce:	4619      	mov	r1, r3
    d7d0:	69f8      	ldr	r0, [r7, #28]
    d7d2:	4b15      	ldr	r3, [pc, #84]	; (d828 <_usb_d_dev_ep_enable+0x200>)
    d7d4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d7d6:	697b      	ldr	r3, [r7, #20]
    d7d8:	8a1b      	ldrh	r3, [r3, #16]
    d7da:	039b      	lsls	r3, r3, #14
    d7dc:	4c13      	ldr	r4, [pc, #76]	; (d82c <_usb_d_dev_ep_enable+0x204>)
    d7de:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d7e0:	697b      	ldr	r3, [r7, #20]
    d7e2:	8a1b      	ldrh	r3, [r3, #16]
    d7e4:	4618      	mov	r0, r3
    d7e6:	4b12      	ldr	r3, [pc, #72]	; (d830 <_usb_d_dev_ep_enable+0x208>)
    d7e8:	4798      	blx	r3
    d7ea:	4603      	mov	r3, r0
    d7ec:	071b      	lsls	r3, r3, #28
    d7ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d7f2:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d7f6:	68fb      	ldr	r3, [r7, #12]
    d7f8:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d7fa:	7efb      	ldrb	r3, [r7, #27]
    d7fc:	2200      	movs	r2, #0
    d7fe:	2100      	movs	r1, #0
    d800:	4618      	mov	r0, r3
    d802:	4b0c      	ldr	r3, [pc, #48]	; (d834 <_usb_d_dev_ep_enable+0x20c>)
    d804:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    d806:	7efb      	ldrb	r3, [r7, #27]
    d808:	2100      	movs	r1, #0
    d80a:	4618      	mov	r0, r3
    d80c:	4b0b      	ldr	r3, [pc, #44]	; (d83c <_usb_d_dev_ep_enable+0x214>)
    d80e:	4798      	blx	r3
	}

	return USB_OK;
    d810:	2300      	movs	r3, #0
}
    d812:	4618      	mov	r0, r3
    d814:	3720      	adds	r7, #32
    d816:	46bd      	mov	sp, r7
    d818:	bdb0      	pop	{r4, r5, r7, pc}
    d81a:	bf00      	nop
    d81c:	0000c441 	.word	0x0000c441
    d820:	0000bac7 	.word	0x0000bac7
    d824:	200036e0 	.word	0x200036e0
    d828:	0000ba9d 	.word	0x0000ba9d
    d82c:	0fffc000 	.word	0x0fffc000
    d830:	0000c3dd 	.word	0x0000c3dd
    d834:	0000c385 	.word	0x0000c385
    d838:	0000c32d 	.word	0x0000c32d
    d83c:	0000c2f5 	.word	0x0000c2f5
    d840:	0000d399 	.word	0x0000d399

0000d844 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    d844:	b580      	push	{r7, lr}
    d846:	b084      	sub	sp, #16
    d848:	af00      	add	r7, sp, #0
    d84a:	6078      	str	r0, [r7, #4]
    d84c:	460b      	mov	r3, r1
    d84e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	7c9b      	ldrb	r3, [r3, #18]
    d854:	f003 030f 	and.w	r3, r3, #15
    d858:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    d85a:	78fa      	ldrb	r2, [r7, #3]
    d85c:	7bfb      	ldrb	r3, [r7, #15]
    d85e:	4611      	mov	r1, r2
    d860:	4618      	mov	r0, r3
    d862:	4b03      	ldr	r3, [pc, #12]	; (d870 <_usb_d_dev_ep_stall_get+0x2c>)
    d864:	4798      	blx	r3
    d866:	4603      	mov	r3, r0
}
    d868:	4618      	mov	r0, r3
    d86a:	3710      	adds	r7, #16
    d86c:	46bd      	mov	sp, r7
    d86e:	bd80      	pop	{r7, pc}
    d870:	0000bf35 	.word	0x0000bf35

0000d874 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    d874:	b580      	push	{r7, lr}
    d876:	b084      	sub	sp, #16
    d878:	af00      	add	r7, sp, #0
    d87a:	6078      	str	r0, [r7, #4]
    d87c:	460b      	mov	r3, r1
    d87e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	7c9b      	ldrb	r3, [r3, #18]
    d884:	f003 030f 	and.w	r3, r3, #15
    d888:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    d88a:	78f9      	ldrb	r1, [r7, #3]
    d88c:	7bfb      	ldrb	r3, [r7, #15]
    d88e:	2201      	movs	r2, #1
    d890:	4618      	mov	r0, r3
    d892:	4b0a      	ldr	r3, [pc, #40]	; (d8bc <_usb_d_dev_ep_stall_set+0x48>)
    d894:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d896:	78fb      	ldrb	r3, [r7, #3]
    d898:	2220      	movs	r2, #32
    d89a:	409a      	lsls	r2, r3
    d89c:	7bfb      	ldrb	r3, [r7, #15]
    d89e:	4611      	mov	r1, r2
    d8a0:	4618      	mov	r0, r3
    d8a2:	4b07      	ldr	r3, [pc, #28]	; (d8c0 <_usb_d_dev_ep_stall_set+0x4c>)
    d8a4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    d8a6:	687a      	ldr	r2, [r7, #4]
    d8a8:	7cd3      	ldrb	r3, [r2, #19]
    d8aa:	f043 0308 	orr.w	r3, r3, #8
    d8ae:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    d8b0:	2300      	movs	r3, #0
}
    d8b2:	4618      	mov	r0, r3
    d8b4:	3710      	adds	r7, #16
    d8b6:	46bd      	mov	sp, r7
    d8b8:	bd80      	pop	{r7, pc}
    d8ba:	bf00      	nop
    d8bc:	0000bedd 	.word	0x0000bedd
    d8c0:	0000be5d 	.word	0x0000be5d

0000d8c4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    d8c4:	b580      	push	{r7, lr}
    d8c6:	b084      	sub	sp, #16
    d8c8:	af00      	add	r7, sp, #0
    d8ca:	6078      	str	r0, [r7, #4]
    d8cc:	460b      	mov	r3, r1
    d8ce:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    d8d0:	687b      	ldr	r3, [r7, #4]
    d8d2:	7c9b      	ldrb	r3, [r3, #18]
    d8d4:	f003 030f 	and.w	r3, r3, #15
    d8d8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    d8da:	78fa      	ldrb	r2, [r7, #3]
    d8dc:	7bfb      	ldrb	r3, [r7, #15]
    d8de:	4611      	mov	r1, r2
    d8e0:	4618      	mov	r0, r3
    d8e2:	4b28      	ldr	r3, [pc, #160]	; (d984 <_usb_d_dev_ep_stall_clr+0xc0>)
    d8e4:	4798      	blx	r3
    d8e6:	4603      	mov	r3, r0
    d8e8:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    d8ea:	7bbb      	ldrb	r3, [r7, #14]
    d8ec:	f083 0301 	eor.w	r3, r3, #1
    d8f0:	b2db      	uxtb	r3, r3
    d8f2:	2b00      	cmp	r3, #0
    d8f4:	d001      	beq.n	d8fa <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    d8f6:	2300      	movs	r3, #0
    d8f8:	e040      	b.n	d97c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    d8fa:	78f9      	ldrb	r1, [r7, #3]
    d8fc:	7bfb      	ldrb	r3, [r7, #15]
    d8fe:	2200      	movs	r2, #0
    d900:	4618      	mov	r0, r3
    d902:	4b21      	ldr	r3, [pc, #132]	; (d988 <_usb_d_dev_ep_stall_clr+0xc4>)
    d904:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d906:	78fb      	ldrb	r3, [r7, #3]
    d908:	2220      	movs	r2, #32
    d90a:	409a      	lsls	r2, r3
    d90c:	7bfb      	ldrb	r3, [r7, #15]
    d90e:	4611      	mov	r1, r2
    d910:	4618      	mov	r0, r3
    d912:	4b1e      	ldr	r3, [pc, #120]	; (d98c <_usb_d_dev_ep_stall_clr+0xc8>)
    d914:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    d916:	78fa      	ldrb	r2, [r7, #3]
    d918:	7bfb      	ldrb	r3, [r7, #15]
    d91a:	4611      	mov	r1, r2
    d91c:	4618      	mov	r0, r3
    d91e:	4b1c      	ldr	r3, [pc, #112]	; (d990 <_usb_d_dev_ep_stall_clr+0xcc>)
    d920:	4798      	blx	r3
    d922:	4603      	mov	r3, r0
    d924:	2b00      	cmp	r3, #0
    d926:	d00b      	beq.n	d940 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    d928:	78fa      	ldrb	r2, [r7, #3]
    d92a:	7bfb      	ldrb	r3, [r7, #15]
    d92c:	4611      	mov	r1, r2
    d92e:	4618      	mov	r0, r3
    d930:	4b18      	ldr	r3, [pc, #96]	; (d994 <_usb_d_dev_ep_stall_clr+0xd0>)
    d932:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    d934:	78f9      	ldrb	r1, [r7, #3]
    d936:	7bfb      	ldrb	r3, [r7, #15]
    d938:	2200      	movs	r2, #0
    d93a:	4618      	mov	r0, r3
    d93c:	4b16      	ldr	r3, [pc, #88]	; (d998 <_usb_d_dev_ep_stall_clr+0xd4>)
    d93e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d940:	687b      	ldr	r3, [r7, #4]
    d942:	7cdb      	ldrb	r3, [r3, #19]
    d944:	f003 0307 	and.w	r3, r3, #7
    d948:	b2db      	uxtb	r3, r3
    d94a:	2b01      	cmp	r3, #1
    d94c:	d110      	bne.n	d970 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    d94e:	7bfb      	ldrb	r3, [r7, #15]
    d950:	4619      	mov	r1, r3
    d952:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d956:	4b11      	ldr	r3, [pc, #68]	; (d99c <_usb_d_dev_ep_stall_clr+0xd8>)
    d958:	4798      	blx	r3
    d95a:	4603      	mov	r3, r0
    d95c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d960:	2b00      	cmp	r3, #0
    d962:	d10a      	bne.n	d97a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    d964:	687a      	ldr	r2, [r7, #4]
    d966:	7cd3      	ldrb	r3, [r2, #19]
    d968:	f36f 03c3 	bfc	r3, #3, #1
    d96c:	74d3      	strb	r3, [r2, #19]
    d96e:	e004      	b.n	d97a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    d970:	687a      	ldr	r2, [r7, #4]
    d972:	7cd3      	ldrb	r3, [r2, #19]
    d974:	f36f 03c3 	bfc	r3, #3, #1
    d978:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    d97a:	2300      	movs	r3, #0
}
    d97c:	4618      	mov	r0, r3
    d97e:	3710      	adds	r7, #16
    d980:	46bd      	mov	sp, r7
    d982:	bd80      	pop	{r7, pc}
    d984:	0000bf35 	.word	0x0000bf35
    d988:	0000bedd 	.word	0x0000bedd
    d98c:	0000be85 	.word	0x0000be85
    d990:	0000bf79 	.word	0x0000bf79
    d994:	0000bfbd 	.word	0x0000bfbd
    d998:	0000c0a9 	.word	0x0000c0a9
    d99c:	0000b965 	.word	0x0000b965

0000d9a0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    d9a0:	b580      	push	{r7, lr}
    d9a2:	b086      	sub	sp, #24
    d9a4:	af00      	add	r7, sp, #0
    d9a6:	4603      	mov	r3, r0
    d9a8:	460a      	mov	r2, r1
    d9aa:	71fb      	strb	r3, [r7, #7]
    d9ac:	4613      	mov	r3, r2
    d9ae:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    d9b0:	79fb      	ldrb	r3, [r7, #7]
    d9b2:	f003 030f 	and.w	r3, r3, #15
    d9b6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d9b8:	79fb      	ldrb	r3, [r7, #7]
    d9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d9be:	2b00      	cmp	r3, #0
    d9c0:	bf14      	ite	ne
    d9c2:	2301      	movne	r3, #1
    d9c4:	2300      	moveq	r3, #0
    d9c6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d9c8:	7cba      	ldrb	r2, [r7, #18]
    d9ca:	7cfb      	ldrb	r3, [r7, #19]
    d9cc:	4611      	mov	r1, r2
    d9ce:	4618      	mov	r0, r3
    d9d0:	4b13      	ldr	r3, [pc, #76]	; (da20 <_usb_d_dev_ep_stall+0x80>)
    d9d2:	4798      	blx	r3
    d9d4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d9d6:	7cfb      	ldrb	r3, [r7, #19]
    d9d8:	2b04      	cmp	r3, #4
    d9da:	d902      	bls.n	d9e2 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    d9dc:	f06f 0311 	mvn.w	r3, #17
    d9e0:	e01a      	b.n	da18 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    d9e2:	79bb      	ldrb	r3, [r7, #6]
    d9e4:	2b01      	cmp	r3, #1
    d9e6:	d106      	bne.n	d9f6 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    d9e8:	7cbb      	ldrb	r3, [r7, #18]
    d9ea:	4619      	mov	r1, r3
    d9ec:	68f8      	ldr	r0, [r7, #12]
    d9ee:	4b0d      	ldr	r3, [pc, #52]	; (da24 <_usb_d_dev_ep_stall+0x84>)
    d9f0:	4798      	blx	r3
    d9f2:	6178      	str	r0, [r7, #20]
    d9f4:	e00f      	b.n	da16 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    d9f6:	79bb      	ldrb	r3, [r7, #6]
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	d106      	bne.n	da0a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    d9fc:	7cbb      	ldrb	r3, [r7, #18]
    d9fe:	4619      	mov	r1, r3
    da00:	68f8      	ldr	r0, [r7, #12]
    da02:	4b09      	ldr	r3, [pc, #36]	; (da28 <_usb_d_dev_ep_stall+0x88>)
    da04:	4798      	blx	r3
    da06:	6178      	str	r0, [r7, #20]
    da08:	e005      	b.n	da16 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    da0a:	7cbb      	ldrb	r3, [r7, #18]
    da0c:	4619      	mov	r1, r3
    da0e:	68f8      	ldr	r0, [r7, #12]
    da10:	4b06      	ldr	r3, [pc, #24]	; (da2c <_usb_d_dev_ep_stall+0x8c>)
    da12:	4798      	blx	r3
    da14:	6178      	str	r0, [r7, #20]
	}
	return rc;
    da16:	697b      	ldr	r3, [r7, #20]
}
    da18:	4618      	mov	r0, r3
    da1a:	3718      	adds	r7, #24
    da1c:	46bd      	mov	sp, r7
    da1e:	bd80      	pop	{r7, pc}
    da20:	0000c441 	.word	0x0000c441
    da24:	0000d875 	.word	0x0000d875
    da28:	0000d8c5 	.word	0x0000d8c5
    da2c:	0000d845 	.word	0x0000d845

0000da30 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    da30:	b580      	push	{r7, lr}
    da32:	b082      	sub	sp, #8
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
    da38:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    da3a:	687b      	ldr	r3, [r7, #4]
    da3c:	7c9b      	ldrb	r3, [r3, #18]
    da3e:	2bff      	cmp	r3, #255	; 0xff
    da40:	d014      	beq.n	da6c <_usb_d_dev_trans_done+0x3c>
    da42:	687b      	ldr	r3, [r7, #4]
    da44:	7cdb      	ldrb	r3, [r3, #19]
    da46:	f003 0340 	and.w	r3, r3, #64	; 0x40
    da4a:	b2db      	uxtb	r3, r3
    da4c:	2b00      	cmp	r3, #0
    da4e:	d00d      	beq.n	da6c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    da50:	687a      	ldr	r2, [r7, #4]
    da52:	7cd3      	ldrb	r3, [r2, #19]
    da54:	f36f 1386 	bfc	r3, #6, #1
    da58:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    da5a:	4b06      	ldr	r3, [pc, #24]	; (da74 <_usb_d_dev_trans_done+0x44>)
    da5c:	691b      	ldr	r3, [r3, #16]
    da5e:	687a      	ldr	r2, [r7, #4]
    da60:	7c90      	ldrb	r0, [r2, #18]
    da62:	687a      	ldr	r2, [r7, #4]
    da64:	6892      	ldr	r2, [r2, #8]
    da66:	6839      	ldr	r1, [r7, #0]
    da68:	4798      	blx	r3
    da6a:	e000      	b.n	da6e <_usb_d_dev_trans_done+0x3e>
		return;
    da6c:	bf00      	nop
}
    da6e:	3708      	adds	r7, #8
    da70:	46bd      	mov	sp, r7
    da72:	bd80      	pop	{r7, pc}
    da74:	20003618 	.word	0x20003618

0000da78 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    da78:	b580      	push	{r7, lr}
    da7a:	b086      	sub	sp, #24
    da7c:	af00      	add	r7, sp, #0
    da7e:	60f8      	str	r0, [r7, #12]
    da80:	460b      	mov	r3, r1
    da82:	607a      	str	r2, [r7, #4]
    da84:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    da86:	68fb      	ldr	r3, [r7, #12]
    da88:	7c9b      	ldrb	r3, [r3, #18]
    da8a:	f003 030f 	and.w	r3, r3, #15
    da8e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    da90:	4b1f      	ldr	r3, [pc, #124]	; (db10 <_usb_d_dev_trans_stop+0x98>)
    da92:	881b      	ldrh	r3, [r3, #0]
    da94:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    da96:	68fb      	ldr	r3, [r7, #12]
    da98:	7c9b      	ldrb	r3, [r3, #18]
    da9a:	2bff      	cmp	r3, #255	; 0xff
    da9c:	d033      	beq.n	db06 <_usb_d_dev_trans_stop+0x8e>
    da9e:	68fb      	ldr	r3, [r7, #12]
    daa0:	7cdb      	ldrb	r3, [r3, #19]
    daa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    daa6:	b2db      	uxtb	r3, r3
    daa8:	2b00      	cmp	r3, #0
    daaa:	d02c      	beq.n	db06 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    daac:	7afb      	ldrb	r3, [r7, #11]
    daae:	2b00      	cmp	r3, #0
    dab0:	d006      	beq.n	dac0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    dab2:	7dfb      	ldrb	r3, [r7, #23]
    dab4:	2200      	movs	r2, #0
    dab6:	2101      	movs	r1, #1
    dab8:	4618      	mov	r0, r3
    daba:	4b16      	ldr	r3, [pc, #88]	; (db14 <_usb_d_dev_trans_stop+0x9c>)
    dabc:	4798      	blx	r3
    dabe:	e005      	b.n	dacc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    dac0:	7dfb      	ldrb	r3, [r7, #23]
    dac2:	2200      	movs	r2, #0
    dac4:	2100      	movs	r1, #0
    dac6:	4618      	mov	r0, r3
    dac8:	4b13      	ldr	r3, [pc, #76]	; (db18 <_usb_d_dev_trans_stop+0xa0>)
    daca:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    dacc:	7afb      	ldrb	r3, [r7, #11]
    dace:	f107 0218 	add.w	r2, r7, #24
    dad2:	4413      	add	r3, r2
    dad4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    dad8:	461a      	mov	r2, r3
    dada:	7dfb      	ldrb	r3, [r7, #23]
    dadc:	4611      	mov	r1, r2
    dade:	4618      	mov	r0, r3
    dae0:	4b0e      	ldr	r3, [pc, #56]	; (db1c <_usb_d_dev_trans_stop+0xa4>)
    dae2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    dae4:	7afb      	ldrb	r3, [r7, #11]
    dae6:	f107 0218 	add.w	r2, r7, #24
    daea:	4413      	add	r3, r2
    daec:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    daf0:	461a      	mov	r2, r3
    daf2:	7dfb      	ldrb	r3, [r7, #23]
    daf4:	4611      	mov	r1, r2
    daf6:	4618      	mov	r0, r3
    daf8:	4b09      	ldr	r3, [pc, #36]	; (db20 <_usb_d_dev_trans_stop+0xa8>)
    dafa:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    dafc:	6879      	ldr	r1, [r7, #4]
    dafe:	68f8      	ldr	r0, [r7, #12]
    db00:	4b08      	ldr	r3, [pc, #32]	; (db24 <_usb_d_dev_trans_stop+0xac>)
    db02:	4798      	blx	r3
    db04:	e000      	b.n	db08 <_usb_d_dev_trans_stop+0x90>
		return;
    db06:	bf00      	nop
}
    db08:	3718      	adds	r7, #24
    db0a:	46bd      	mov	sp, r7
    db0c:	bd80      	pop	{r7, pc}
    db0e:	bf00      	nop
    db10:	0001ae28 	.word	0x0001ae28
    db14:	0000c32d 	.word	0x0000c32d
    db18:	0000c385 	.word	0x0000c385
    db1c:	0000be35 	.word	0x0000be35
    db20:	0000be85 	.word	0x0000be85
    db24:	0000da31 	.word	0x0000da31

0000db28 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    db28:	b580      	push	{r7, lr}
    db2a:	b086      	sub	sp, #24
    db2c:	af00      	add	r7, sp, #0
    db2e:	4603      	mov	r3, r0
    db30:	6039      	str	r1, [r7, #0]
    db32:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    db34:	79fb      	ldrb	r3, [r7, #7]
    db36:	f003 030f 	and.w	r3, r3, #15
    db3a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    db3c:	7dfb      	ldrb	r3, [r7, #23]
    db3e:	015b      	lsls	r3, r3, #5
    db40:	4a1e      	ldr	r2, [pc, #120]	; (dbbc <_usb_d_dev_ep_read_req+0x94>)
    db42:	4413      	add	r3, r2
    db44:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    db46:	693b      	ldr	r3, [r7, #16]
    db48:	681b      	ldr	r3, [r3, #0]
    db4a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    db4c:	693b      	ldr	r3, [r7, #16]
    db4e:	685b      	ldr	r3, [r3, #4]
    db50:	f3c3 030d 	ubfx	r3, r3, #0, #14
    db54:	b29b      	uxth	r3, r3
    db56:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    db58:	7dfb      	ldrb	r3, [r7, #23]
    db5a:	2b04      	cmp	r3, #4
    db5c:	d802      	bhi.n	db64 <_usb_d_dev_ep_read_req+0x3c>
    db5e:	683b      	ldr	r3, [r7, #0]
    db60:	2b00      	cmp	r3, #0
    db62:	d102      	bne.n	db6a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    db64:	f06f 0311 	mvn.w	r3, #17
    db68:	e023      	b.n	dbb2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    db6a:	7dfb      	ldrb	r3, [r7, #23]
    db6c:	4618      	mov	r0, r3
    db6e:	4b14      	ldr	r3, [pc, #80]	; (dbc0 <_usb_d_dev_ep_read_req+0x98>)
    db70:	4798      	blx	r3
    db72:	4603      	mov	r3, r0
    db74:	f083 0301 	eor.w	r3, r3, #1
    db78:	b2db      	uxtb	r3, r3
    db7a:	2b00      	cmp	r3, #0
    db7c:	d002      	beq.n	db84 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    db7e:	f06f 0312 	mvn.w	r3, #18
    db82:	e016      	b.n	dbb2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    db84:	7dfb      	ldrb	r3, [r7, #23]
    db86:	4618      	mov	r0, r3
    db88:	4b0e      	ldr	r3, [pc, #56]	; (dbc4 <_usb_d_dev_ep_read_req+0x9c>)
    db8a:	4798      	blx	r3
    db8c:	4603      	mov	r3, r0
    db8e:	f083 0301 	eor.w	r3, r3, #1
    db92:	b2db      	uxtb	r3, r3
    db94:	2b00      	cmp	r3, #0
    db96:	d001      	beq.n	db9c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    db98:	2300      	movs	r3, #0
    db9a:	e00a      	b.n	dbb2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    db9c:	68fb      	ldr	r3, [r7, #12]
    db9e:	2208      	movs	r2, #8
    dba0:	4619      	mov	r1, r3
    dba2:	6838      	ldr	r0, [r7, #0]
    dba4:	4b08      	ldr	r3, [pc, #32]	; (dbc8 <_usb_d_dev_ep_read_req+0xa0>)
    dba6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    dba8:	7dfb      	ldrb	r3, [r7, #23]
    dbaa:	4618      	mov	r0, r3
    dbac:	4b07      	ldr	r3, [pc, #28]	; (dbcc <_usb_d_dev_ep_read_req+0xa4>)
    dbae:	4798      	blx	r3

	return bytes;
    dbb0:	897b      	ldrh	r3, [r7, #10]
}
    dbb2:	4618      	mov	r0, r3
    dbb4:	3718      	adds	r7, #24
    dbb6:	46bd      	mov	sp, r7
    dbb8:	bd80      	pop	{r7, pc}
    dbba:	bf00      	nop
    dbbc:	200036e0 	.word	0x200036e0
    dbc0:	0000bead 	.word	0x0000bead
    dbc4:	0000c059 	.word	0x0000c059
    dbc8:	00016735 	.word	0x00016735
    dbcc:	0000c089 	.word	0x0000c089

0000dbd0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    dbd0:	b580      	push	{r7, lr}
    dbd2:	b086      	sub	sp, #24
    dbd4:	af00      	add	r7, sp, #0
    dbd6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    dbd8:	687b      	ldr	r3, [r7, #4]
    dbda:	7a1b      	ldrb	r3, [r3, #8]
    dbdc:	f003 030f 	and.w	r3, r3, #15
    dbe0:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    dbe2:	687b      	ldr	r3, [r7, #4]
    dbe4:	7a1b      	ldrb	r3, [r3, #8]
    dbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dbea:	2b00      	cmp	r3, #0
    dbec:	bf14      	ite	ne
    dbee:	2301      	movne	r3, #1
    dbf0:	2300      	moveq	r3, #0
    dbf2:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dbf4:	7d7a      	ldrb	r2, [r7, #21]
    dbf6:	7dbb      	ldrb	r3, [r7, #22]
    dbf8:	4611      	mov	r1, r2
    dbfa:	4618      	mov	r0, r3
    dbfc:	4b5f      	ldr	r3, [pc, #380]	; (dd7c <_usb_d_dev_ep_trans+0x1ac>)
    dbfe:	4798      	blx	r3
    dc00:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    dc02:	693b      	ldr	r3, [r7, #16]
    dc04:	8a1b      	ldrh	r3, [r3, #16]
    dc06:	f240 32ff 	movw	r2, #1023	; 0x3ff
    dc0a:	4293      	cmp	r3, r2
    dc0c:	d004      	beq.n	dc18 <_usb_d_dev_ep_trans+0x48>
    dc0e:	693b      	ldr	r3, [r7, #16]
    dc10:	8a1b      	ldrh	r3, [r3, #16]
    dc12:	3b01      	subs	r3, #1
    dc14:	b29b      	uxth	r3, r3
    dc16:	e001      	b.n	dc1c <_usb_d_dev_ep_trans+0x4c>
    dc18:	f240 33ff 	movw	r3, #1023	; 0x3ff
    dc1c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    dc1e:	687b      	ldr	r3, [r7, #4]
    dc20:	685a      	ldr	r2, [r3, #4]
    dc22:	89fb      	ldrh	r3, [r7, #14]
    dc24:	4013      	ands	r3, r2
    dc26:	2b00      	cmp	r3, #0
    dc28:	bf14      	ite	ne
    dc2a:	2301      	movne	r3, #1
    dc2c:	2300      	moveq	r3, #0
    dc2e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    dc30:	2300      	movs	r3, #0
    dc32:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    dc34:	7dbb      	ldrb	r3, [r7, #22]
    dc36:	2b04      	cmp	r3, #4
    dc38:	d902      	bls.n	dc40 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    dc3a:	f06f 0311 	mvn.w	r3, #17
    dc3e:	e098      	b.n	dd72 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	681b      	ldr	r3, [r3, #0]
    dc44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    dc48:	d31a      	bcc.n	dc80 <_usb_d_dev_ep_trans+0xb0>
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	681b      	ldr	r3, [r3, #0]
    dc4e:	461a      	mov	r2, r3
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	685b      	ldr	r3, [r3, #4]
    dc54:	4413      	add	r3, r2
    dc56:	4a4a      	ldr	r2, [pc, #296]	; (dd80 <_usb_d_dev_ep_trans+0x1b0>)
    dc58:	4293      	cmp	r3, r2
    dc5a:	d811      	bhi.n	dc80 <_usb_d_dev_ep_trans+0xb0>
    dc5c:	687b      	ldr	r3, [r7, #4]
    dc5e:	681b      	ldr	r3, [r3, #0]
    dc60:	f003 0303 	and.w	r3, r3, #3
    dc64:	2b00      	cmp	r3, #0
    dc66:	d10b      	bne.n	dc80 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    dc68:	7d7b      	ldrb	r3, [r7, #21]
    dc6a:	f083 0301 	eor.w	r3, r3, #1
    dc6e:	b2db      	uxtb	r3, r3
    dc70:	2b00      	cmp	r3, #0
    dc72:	d00e      	beq.n	dc92 <_usb_d_dev_ep_trans+0xc2>
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	685b      	ldr	r3, [r3, #4]
    dc78:	693a      	ldr	r2, [r7, #16]
    dc7a:	8a12      	ldrh	r2, [r2, #16]
    dc7c:	4293      	cmp	r3, r2
    dc7e:	d208      	bcs.n	dc92 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    dc80:	693b      	ldr	r3, [r7, #16]
    dc82:	68db      	ldr	r3, [r3, #12]
    dc84:	2b00      	cmp	r3, #0
    dc86:	d102      	bne.n	dc8e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    dc88:	f06f 0312 	mvn.w	r3, #18
    dc8c:	e071      	b.n	dd72 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    dc8e:	2301      	movs	r3, #1
    dc90:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    dc92:	7d7b      	ldrb	r3, [r7, #21]
    dc94:	f083 0301 	eor.w	r3, r3, #1
    dc98:	b2db      	uxtb	r3, r3
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d009      	beq.n	dcb2 <_usb_d_dev_ep_trans+0xe2>
    dc9e:	7b7b      	ldrb	r3, [r7, #13]
    dca0:	2b00      	cmp	r3, #0
    dca2:	d006      	beq.n	dcb2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    dca4:	693b      	ldr	r3, [r7, #16]
    dca6:	68db      	ldr	r3, [r3, #12]
    dca8:	2b00      	cmp	r3, #0
    dcaa:	d102      	bne.n	dcb2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    dcac:	f06f 0311 	mvn.w	r3, #17
    dcb0:	e05f      	b.n	dd72 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    dcb2:	693b      	ldr	r3, [r7, #16]
    dcb4:	7cdb      	ldrb	r3, [r3, #19]
    dcb6:	f003 0308 	and.w	r3, r3, #8
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d001      	beq.n	dcc4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    dcc0:	2302      	movs	r3, #2
    dcc2:	e056      	b.n	dd72 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    dcc4:	f107 0308 	add.w	r3, r7, #8
    dcc8:	4618      	mov	r0, r3
    dcca:	4b2e      	ldr	r3, [pc, #184]	; (dd84 <_usb_d_dev_ep_trans+0x1b4>)
    dccc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    dcce:	693b      	ldr	r3, [r7, #16]
    dcd0:	7cdb      	ldrb	r3, [r3, #19]
    dcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dcd6:	b2db      	uxtb	r3, r3
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d006      	beq.n	dcea <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    dcdc:	f107 0308 	add.w	r3, r7, #8
    dce0:	4618      	mov	r0, r3
    dce2:	4b29      	ldr	r3, [pc, #164]	; (dd88 <_usb_d_dev_ep_trans+0x1b8>)
    dce4:	4798      	blx	r3
		return USB_BUSY;
    dce6:	2301      	movs	r3, #1
    dce8:	e043      	b.n	dd72 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    dcea:	693a      	ldr	r2, [r7, #16]
    dcec:	7cd3      	ldrb	r3, [r2, #19]
    dcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dcf2:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    dcf4:	f107 0308 	add.w	r3, r7, #8
    dcf8:	4618      	mov	r0, r3
    dcfa:	4b23      	ldr	r3, [pc, #140]	; (dd88 <_usb_d_dev_ep_trans+0x1b8>)
    dcfc:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    dcfe:	687b      	ldr	r3, [r7, #4]
    dd00:	681a      	ldr	r2, [r3, #0]
    dd02:	693b      	ldr	r3, [r7, #16]
    dd04:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    dd06:	687b      	ldr	r3, [r7, #4]
    dd08:	685a      	ldr	r2, [r3, #4]
    dd0a:	693b      	ldr	r3, [r7, #16]
    dd0c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    dd0e:	693b      	ldr	r3, [r7, #16]
    dd10:	2200      	movs	r2, #0
    dd12:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    dd14:	693a      	ldr	r2, [r7, #16]
    dd16:	7cd3      	ldrb	r3, [r2, #19]
    dd18:	7d79      	ldrb	r1, [r7, #21]
    dd1a:	f361 13c7 	bfi	r3, r1, #7, #1
    dd1e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    dd20:	693a      	ldr	r2, [r7, #16]
    dd22:	7cd3      	ldrb	r3, [r2, #19]
    dd24:	7df9      	ldrb	r1, [r7, #23]
    dd26:	f361 1345 	bfi	r3, r1, #5, #1
    dd2a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	7a5b      	ldrb	r3, [r3, #9]
    dd30:	2b00      	cmp	r3, #0
    dd32:	d007      	beq.n	dd44 <_usb_d_dev_ep_trans+0x174>
    dd34:	7b7b      	ldrb	r3, [r7, #13]
    dd36:	f083 0301 	eor.w	r3, r3, #1
    dd3a:	b2db      	uxtb	r3, r3
    dd3c:	2b00      	cmp	r3, #0
    dd3e:	d001      	beq.n	dd44 <_usb_d_dev_ep_trans+0x174>
    dd40:	2301      	movs	r3, #1
    dd42:	e000      	b.n	dd46 <_usb_d_dev_ep_trans+0x176>
    dd44:	2300      	movs	r3, #0
    dd46:	b2db      	uxtb	r3, r3
    dd48:	f003 0301 	and.w	r3, r3, #1
    dd4c:	b2d9      	uxtb	r1, r3
    dd4e:	693a      	ldr	r2, [r7, #16]
    dd50:	7cd3      	ldrb	r3, [r2, #19]
    dd52:	f361 1304 	bfi	r3, r1, #4, #1
    dd56:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    dd58:	7d7b      	ldrb	r3, [r7, #21]
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	d004      	beq.n	dd68 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    dd5e:	2100      	movs	r1, #0
    dd60:	6938      	ldr	r0, [r7, #16]
    dd62:	4b0a      	ldr	r3, [pc, #40]	; (dd8c <_usb_d_dev_ep_trans+0x1bc>)
    dd64:	4798      	blx	r3
    dd66:	e003      	b.n	dd70 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    dd68:	2100      	movs	r1, #0
    dd6a:	6938      	ldr	r0, [r7, #16]
    dd6c:	4b08      	ldr	r3, [pc, #32]	; (dd90 <_usb_d_dev_ep_trans+0x1c0>)
    dd6e:	4798      	blx	r3
	}

	return ERR_NONE;
    dd70:	2300      	movs	r3, #0
}
    dd72:	4618      	mov	r0, r3
    dd74:	3718      	adds	r7, #24
    dd76:	46bd      	mov	sp, r7
    dd78:	bd80      	pop	{r7, pc}
    dd7a:	bf00      	nop
    dd7c:	0000c441 	.word	0x0000c441
    dd80:	20041fff 	.word	0x20041fff
    dd84:	0000e59d 	.word	0x0000e59d
    dd88:	0000e5c3 	.word	0x0000e5c3
    dd8c:	0000c709 	.word	0x0000c709
    dd90:	0000c921 	.word	0x0000c921

0000dd94 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    dd94:	b580      	push	{r7, lr}
    dd96:	b084      	sub	sp, #16
    dd98:	af00      	add	r7, sp, #0
    dd9a:	4603      	mov	r3, r0
    dd9c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    dd9e:	79fb      	ldrb	r3, [r7, #7]
    dda0:	f003 030f 	and.w	r3, r3, #15
    dda4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    dda6:	79fb      	ldrb	r3, [r7, #7]
    dda8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ddac:	2b00      	cmp	r3, #0
    ddae:	bf14      	ite	ne
    ddb0:	2301      	movne	r3, #1
    ddb2:	2300      	moveq	r3, #0
    ddb4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ddb6:	7bba      	ldrb	r2, [r7, #14]
    ddb8:	7bfb      	ldrb	r3, [r7, #15]
    ddba:	4611      	mov	r1, r2
    ddbc:	4618      	mov	r0, r3
    ddbe:	4b08      	ldr	r3, [pc, #32]	; (dde0 <_usb_d_dev_ep_abort+0x4c>)
    ddc0:	4798      	blx	r3
    ddc2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ddc4:	7bfb      	ldrb	r3, [r7, #15]
    ddc6:	2b04      	cmp	r3, #4
    ddc8:	d806      	bhi.n	ddd8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ddca:	7bbb      	ldrb	r3, [r7, #14]
    ddcc:	2202      	movs	r2, #2
    ddce:	4619      	mov	r1, r3
    ddd0:	68b8      	ldr	r0, [r7, #8]
    ddd2:	4b04      	ldr	r3, [pc, #16]	; (dde4 <_usb_d_dev_ep_abort+0x50>)
    ddd4:	4798      	blx	r3
    ddd6:	e000      	b.n	ddda <_usb_d_dev_ep_abort+0x46>
		return;
    ddd8:	bf00      	nop
}
    ddda:	3710      	adds	r7, #16
    dddc:	46bd      	mov	sp, r7
    ddde:	bd80      	pop	{r7, pc}
    dde0:	0000c441 	.word	0x0000c441
    dde4:	0000da79 	.word	0x0000da79

0000dde8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    dde8:	b480      	push	{r7}
    ddea:	b085      	sub	sp, #20
    ddec:	af00      	add	r7, sp, #0
    ddee:	4603      	mov	r3, r0
    ddf0:	6039      	str	r1, [r7, #0]
    ddf2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ddf4:	683b      	ldr	r3, [r7, #0]
    ddf6:	2b00      	cmp	r3, #0
    ddf8:	d001      	beq.n	ddfe <_usb_d_dev_register_callback+0x16>
    ddfa:	683b      	ldr	r3, [r7, #0]
    ddfc:	e000      	b.n	de00 <_usb_d_dev_register_callback+0x18>
    ddfe:	4b0a      	ldr	r3, [pc, #40]	; (de28 <_usb_d_dev_register_callback+0x40>)
    de00:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    de02:	79fb      	ldrb	r3, [r7, #7]
    de04:	2b01      	cmp	r3, #1
    de06:	d103      	bne.n	de10 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    de08:	4a08      	ldr	r2, [pc, #32]	; (de2c <_usb_d_dev_register_callback+0x44>)
    de0a:	68fb      	ldr	r3, [r7, #12]
    de0c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    de0e:	e005      	b.n	de1c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    de10:	79fb      	ldrb	r3, [r7, #7]
    de12:	2b00      	cmp	r3, #0
    de14:	d102      	bne.n	de1c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    de16:	4a05      	ldr	r2, [pc, #20]	; (de2c <_usb_d_dev_register_callback+0x44>)
    de18:	68fb      	ldr	r3, [r7, #12]
    de1a:	6013      	str	r3, [r2, #0]
}
    de1c:	bf00      	nop
    de1e:	3714      	adds	r7, #20
    de20:	46bd      	mov	sp, r7
    de22:	f85d 7b04 	ldr.w	r7, [sp], #4
    de26:	4770      	bx	lr
    de28:	0000bcc9 	.word	0x0000bcc9
    de2c:	20003618 	.word	0x20003618

0000de30 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    de30:	b480      	push	{r7}
    de32:	b085      	sub	sp, #20
    de34:	af00      	add	r7, sp, #0
    de36:	4603      	mov	r3, r0
    de38:	6039      	str	r1, [r7, #0]
    de3a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    de3c:	683b      	ldr	r3, [r7, #0]
    de3e:	2b00      	cmp	r3, #0
    de40:	d001      	beq.n	de46 <_usb_d_dev_register_ep_callback+0x16>
    de42:	683b      	ldr	r3, [r7, #0]
    de44:	e000      	b.n	de48 <_usb_d_dev_register_ep_callback+0x18>
    de46:	4b0e      	ldr	r3, [pc, #56]	; (de80 <_usb_d_dev_register_ep_callback+0x50>)
    de48:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    de4a:	79fb      	ldrb	r3, [r7, #7]
    de4c:	2b00      	cmp	r3, #0
    de4e:	d103      	bne.n	de58 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    de50:	4a0c      	ldr	r2, [pc, #48]	; (de84 <_usb_d_dev_register_ep_callback+0x54>)
    de52:	68fb      	ldr	r3, [r7, #12]
    de54:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    de56:	e00c      	b.n	de72 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    de58:	79fb      	ldrb	r3, [r7, #7]
    de5a:	2b01      	cmp	r3, #1
    de5c:	d103      	bne.n	de66 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    de5e:	4a09      	ldr	r2, [pc, #36]	; (de84 <_usb_d_dev_register_ep_callback+0x54>)
    de60:	68fb      	ldr	r3, [r7, #12]
    de62:	60d3      	str	r3, [r2, #12]
}
    de64:	e005      	b.n	de72 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    de66:	79fb      	ldrb	r3, [r7, #7]
    de68:	2b02      	cmp	r3, #2
    de6a:	d102      	bne.n	de72 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    de6c:	4a05      	ldr	r2, [pc, #20]	; (de84 <_usb_d_dev_register_ep_callback+0x54>)
    de6e:	68fb      	ldr	r3, [r7, #12]
    de70:	6113      	str	r3, [r2, #16]
}
    de72:	bf00      	nop
    de74:	3714      	adds	r7, #20
    de76:	46bd      	mov	sp, r7
    de78:	f85d 7b04 	ldr.w	r7, [sp], #4
    de7c:	4770      	bx	lr
    de7e:	bf00      	nop
    de80:	0000bcc9 	.word	0x0000bcc9
    de84:	20003618 	.word	0x20003618

0000de88 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    de88:	b580      	push	{r7, lr}
    de8a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de8c:	4b01      	ldr	r3, [pc, #4]	; (de94 <USB_0_Handler+0xc>)
    de8e:	4798      	blx	r3
}
    de90:	bf00      	nop
    de92:	bd80      	pop	{r7, pc}
    de94:	0000d0f9 	.word	0x0000d0f9

0000de98 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    de98:	b580      	push	{r7, lr}
    de9a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de9c:	4b01      	ldr	r3, [pc, #4]	; (dea4 <USB_1_Handler+0xc>)
    de9e:	4798      	blx	r3
}
    dea0:	bf00      	nop
    dea2:	bd80      	pop	{r7, pc}
    dea4:	0000d0f9 	.word	0x0000d0f9

0000dea8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    dea8:	b580      	push	{r7, lr}
    deaa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    deac:	4b01      	ldr	r3, [pc, #4]	; (deb4 <USB_2_Handler+0xc>)
    deae:	4798      	blx	r3
}
    deb0:	bf00      	nop
    deb2:	bd80      	pop	{r7, pc}
    deb4:	0000d0f9 	.word	0x0000d0f9

0000deb8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    deb8:	b580      	push	{r7, lr}
    deba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    debc:	4b01      	ldr	r3, [pc, #4]	; (dec4 <USB_3_Handler+0xc>)
    debe:	4798      	blx	r3
}
    dec0:	bf00      	nop
    dec2:	bd80      	pop	{r7, pc}
    dec4:	0000d0f9 	.word	0x0000d0f9

0000dec8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    dec8:	b480      	push	{r7}
    deca:	b083      	sub	sp, #12
    decc:	af00      	add	r7, sp, #0
    dece:	6078      	str	r0, [r7, #4]
    ded0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ded2:	bf00      	nop
    ded4:	687b      	ldr	r3, [r7, #4]
    ded6:	689a      	ldr	r2, [r3, #8]
    ded8:	683b      	ldr	r3, [r7, #0]
    deda:	4013      	ands	r3, r2
    dedc:	2b00      	cmp	r3, #0
    dede:	d1f9      	bne.n	ded4 <hri_wdt_wait_for_sync+0xc>
	};
}
    dee0:	bf00      	nop
    dee2:	370c      	adds	r7, #12
    dee4:	46bd      	mov	sp, r7
    dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    deea:	4770      	bx	lr

0000deec <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    deec:	b580      	push	{r7, lr}
    deee:	b084      	sub	sp, #16
    def0:	af00      	add	r7, sp, #0
    def2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    def4:	210e      	movs	r1, #14
    def6:	6878      	ldr	r0, [r7, #4]
    def8:	4b0a      	ldr	r3, [pc, #40]	; (df24 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    defa:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    df02:	7bfb      	ldrb	r3, [r7, #15]
    df04:	085b      	lsrs	r3, r3, #1
    df06:	b2db      	uxtb	r3, r3
    df08:	f003 0301 	and.w	r3, r3, #1
    df0c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    df0e:	7bfb      	ldrb	r3, [r7, #15]
    df10:	2b00      	cmp	r3, #0
    df12:	bf14      	ite	ne
    df14:	2301      	movne	r3, #1
    df16:	2300      	moveq	r3, #0
    df18:	b2db      	uxtb	r3, r3
}
    df1a:	4618      	mov	r0, r3
    df1c:	3710      	adds	r7, #16
    df1e:	46bd      	mov	sp, r7
    df20:	bd80      	pop	{r7, pc}
    df22:	bf00      	nop
    df24:	0000dec9 	.word	0x0000dec9

0000df28 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    df28:	b580      	push	{r7, lr}
    df2a:	b082      	sub	sp, #8
    df2c:	af00      	add	r7, sp, #0
    df2e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	781b      	ldrb	r3, [r3, #0]
    df34:	b2db      	uxtb	r3, r3
    df36:	f023 0304 	bic.w	r3, r3, #4
    df3a:	b2da      	uxtb	r2, r3
    df3c:	687b      	ldr	r3, [r7, #4]
    df3e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    df40:	210e      	movs	r1, #14
    df42:	6878      	ldr	r0, [r7, #4]
    df44:	4b02      	ldr	r3, [pc, #8]	; (df50 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    df46:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    df48:	bf00      	nop
    df4a:	3708      	adds	r7, #8
    df4c:	46bd      	mov	sp, r7
    df4e:	bd80      	pop	{r7, pc}
    df50:	0000dec9 	.word	0x0000dec9

0000df54 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    df54:	b580      	push	{r7, lr}
    df56:	b084      	sub	sp, #16
    df58:	af00      	add	r7, sp, #0
    df5a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    df5c:	210e      	movs	r1, #14
    df5e:	6878      	ldr	r0, [r7, #4]
    df60:	4b08      	ldr	r3, [pc, #32]	; (df84 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    df62:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    df64:	687b      	ldr	r3, [r7, #4]
    df66:	781b      	ldrb	r3, [r3, #0]
    df68:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    df6a:	7bfb      	ldrb	r3, [r7, #15]
    df6c:	09db      	lsrs	r3, r3, #7
    df6e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    df70:	7bfb      	ldrb	r3, [r7, #15]
    df72:	2b00      	cmp	r3, #0
    df74:	bf14      	ite	ne
    df76:	2301      	movne	r3, #1
    df78:	2300      	moveq	r3, #0
    df7a:	b2db      	uxtb	r3, r3
}
    df7c:	4618      	mov	r0, r3
    df7e:	3710      	adds	r7, #16
    df80:	46bd      	mov	sp, r7
    df82:	bd80      	pop	{r7, pc}
    df84:	0000dec9 	.word	0x0000dec9

0000df88 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    df88:	b480      	push	{r7}
    df8a:	b085      	sub	sp, #20
    df8c:	af00      	add	r7, sp, #0
    df8e:	6078      	str	r0, [r7, #4]
    df90:	460b      	mov	r3, r1
    df92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	785b      	ldrb	r3, [r3, #1]
    df98:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    df9a:	7bfb      	ldrb	r3, [r7, #15]
    df9c:	f023 030f 	bic.w	r3, r3, #15
    dfa0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    dfa2:	78fb      	ldrb	r3, [r7, #3]
    dfa4:	f003 030f 	and.w	r3, r3, #15
    dfa8:	b2da      	uxtb	r2, r3
    dfaa:	7bfb      	ldrb	r3, [r7, #15]
    dfac:	4313      	orrs	r3, r2
    dfae:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    dfb0:	687b      	ldr	r3, [r7, #4]
    dfb2:	7bfa      	ldrb	r2, [r7, #15]
    dfb4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    dfb6:	bf00      	nop
    dfb8:	3714      	adds	r7, #20
    dfba:	46bd      	mov	sp, r7
    dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfc0:	4770      	bx	lr
	...

0000dfc4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    dfc4:	b580      	push	{r7, lr}
    dfc6:	b082      	sub	sp, #8
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    dfcc:	687b      	ldr	r3, [r7, #4]
    dfce:	2b00      	cmp	r3, #0
    dfd0:	d005      	beq.n	dfde <_wdt_init+0x1a>
    dfd2:	687b      	ldr	r3, [r7, #4]
    dfd4:	681b      	ldr	r3, [r3, #0]
    dfd6:	2b00      	cmp	r3, #0
    dfd8:	d001      	beq.n	dfde <_wdt_init+0x1a>
    dfda:	2301      	movs	r3, #1
    dfdc:	e000      	b.n	dfe0 <_wdt_init+0x1c>
    dfde:	2300      	movs	r3, #0
    dfe0:	f003 0301 	and.w	r3, r3, #1
    dfe4:	b2db      	uxtb	r3, r3
    dfe6:	2250      	movs	r2, #80	; 0x50
    dfe8:	4913      	ldr	r1, [pc, #76]	; (e038 <_wdt_init+0x74>)
    dfea:	4618      	mov	r0, r3
    dfec:	4b13      	ldr	r3, [pc, #76]	; (e03c <_wdt_init+0x78>)
    dfee:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    dff0:	687b      	ldr	r3, [r7, #4]
    dff2:	681b      	ldr	r3, [r3, #0]
    dff4:	4618      	mov	r0, r3
    dff6:	4b12      	ldr	r3, [pc, #72]	; (e040 <_wdt_init+0x7c>)
    dff8:	4798      	blx	r3
    dffa:	4603      	mov	r3, r0
    dffc:	2b00      	cmp	r3, #0
    dffe:	d107      	bne.n	e010 <_wdt_init+0x4c>
    e000:	687b      	ldr	r3, [r7, #4]
    e002:	681b      	ldr	r3, [r3, #0]
    e004:	4618      	mov	r0, r3
    e006:	4b0f      	ldr	r3, [pc, #60]	; (e044 <_wdt_init+0x80>)
    e008:	4798      	blx	r3
    e00a:	4603      	mov	r3, r0
    e00c:	2b00      	cmp	r3, #0
    e00e:	d002      	beq.n	e016 <_wdt_init+0x52>
		return ERR_DENIED;
    e010:	f06f 0310 	mvn.w	r3, #16
    e014:	e00b      	b.n	e02e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    e016:	687b      	ldr	r3, [r7, #4]
    e018:	681b      	ldr	r3, [r3, #0]
    e01a:	4618      	mov	r0, r3
    e01c:	4b0a      	ldr	r3, [pc, #40]	; (e048 <_wdt_init+0x84>)
    e01e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    e020:	687b      	ldr	r3, [r7, #4]
    e022:	681b      	ldr	r3, [r3, #0]
    e024:	210b      	movs	r1, #11
    e026:	4618      	mov	r0, r3
    e028:	4b08      	ldr	r3, [pc, #32]	; (e04c <_wdt_init+0x88>)
    e02a:	4798      	blx	r3
	}

	return ERR_NONE;
    e02c:	2300      	movs	r3, #0
}
    e02e:	4618      	mov	r0, r3
    e030:	3708      	adds	r7, #8
    e032:	46bd      	mov	sp, r7
    e034:	bd80      	pop	{r7, pc}
    e036:	bf00      	nop
    e038:	0001ae2c 	.word	0x0001ae2c
    e03c:	000062c5 	.word	0x000062c5
    e040:	0000df55 	.word	0x0000df55
    e044:	0000deed 	.word	0x0000deed
    e048:	0000df29 	.word	0x0000df29
    e04c:	0000df89 	.word	0x0000df89

0000e050 <hri_port_set_DIR_reg>:
{
    e050:	b480      	push	{r7}
    e052:	b085      	sub	sp, #20
    e054:	af00      	add	r7, sp, #0
    e056:	60f8      	str	r0, [r7, #12]
    e058:	460b      	mov	r3, r1
    e05a:	607a      	str	r2, [r7, #4]
    e05c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    e05e:	7afb      	ldrb	r3, [r7, #11]
    e060:	68fa      	ldr	r2, [r7, #12]
    e062:	01db      	lsls	r3, r3, #7
    e064:	4413      	add	r3, r2
    e066:	3308      	adds	r3, #8
    e068:	687a      	ldr	r2, [r7, #4]
    e06a:	601a      	str	r2, [r3, #0]
}
    e06c:	bf00      	nop
    e06e:	3714      	adds	r7, #20
    e070:	46bd      	mov	sp, r7
    e072:	f85d 7b04 	ldr.w	r7, [sp], #4
    e076:	4770      	bx	lr

0000e078 <hri_port_clear_DIR_reg>:
{
    e078:	b480      	push	{r7}
    e07a:	b085      	sub	sp, #20
    e07c:	af00      	add	r7, sp, #0
    e07e:	60f8      	str	r0, [r7, #12]
    e080:	460b      	mov	r3, r1
    e082:	607a      	str	r2, [r7, #4]
    e084:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    e086:	7afb      	ldrb	r3, [r7, #11]
    e088:	68fa      	ldr	r2, [r7, #12]
    e08a:	01db      	lsls	r3, r3, #7
    e08c:	4413      	add	r3, r2
    e08e:	3304      	adds	r3, #4
    e090:	687a      	ldr	r2, [r7, #4]
    e092:	601a      	str	r2, [r3, #0]
}
    e094:	bf00      	nop
    e096:	3714      	adds	r7, #20
    e098:	46bd      	mov	sp, r7
    e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e09e:	4770      	bx	lr

0000e0a0 <hri_port_set_OUT_reg>:
{
    e0a0:	b480      	push	{r7}
    e0a2:	b085      	sub	sp, #20
    e0a4:	af00      	add	r7, sp, #0
    e0a6:	60f8      	str	r0, [r7, #12]
    e0a8:	460b      	mov	r3, r1
    e0aa:	607a      	str	r2, [r7, #4]
    e0ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e0ae:	7afb      	ldrb	r3, [r7, #11]
    e0b0:	68fa      	ldr	r2, [r7, #12]
    e0b2:	01db      	lsls	r3, r3, #7
    e0b4:	4413      	add	r3, r2
    e0b6:	3318      	adds	r3, #24
    e0b8:	687a      	ldr	r2, [r7, #4]
    e0ba:	601a      	str	r2, [r3, #0]
}
    e0bc:	bf00      	nop
    e0be:	3714      	adds	r7, #20
    e0c0:	46bd      	mov	sp, r7
    e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0c6:	4770      	bx	lr

0000e0c8 <hri_port_clear_OUT_reg>:
{
    e0c8:	b480      	push	{r7}
    e0ca:	b085      	sub	sp, #20
    e0cc:	af00      	add	r7, sp, #0
    e0ce:	60f8      	str	r0, [r7, #12]
    e0d0:	460b      	mov	r3, r1
    e0d2:	607a      	str	r2, [r7, #4]
    e0d4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e0d6:	7afb      	ldrb	r3, [r7, #11]
    e0d8:	68fa      	ldr	r2, [r7, #12]
    e0da:	01db      	lsls	r3, r3, #7
    e0dc:	4413      	add	r3, r2
    e0de:	3314      	adds	r3, #20
    e0e0:	687a      	ldr	r2, [r7, #4]
    e0e2:	601a      	str	r2, [r3, #0]
}
    e0e4:	bf00      	nop
    e0e6:	3714      	adds	r7, #20
    e0e8:	46bd      	mov	sp, r7
    e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0ee:	4770      	bx	lr

0000e0f0 <hri_port_write_PMUX_PMUXE_bf>:
{
    e0f0:	b480      	push	{r7}
    e0f2:	b085      	sub	sp, #20
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	6078      	str	r0, [r7, #4]
    e0f8:	4608      	mov	r0, r1
    e0fa:	4611      	mov	r1, r2
    e0fc:	461a      	mov	r2, r3
    e0fe:	4603      	mov	r3, r0
    e100:	70fb      	strb	r3, [r7, #3]
    e102:	460b      	mov	r3, r1
    e104:	70bb      	strb	r3, [r7, #2]
    e106:	4613      	mov	r3, r2
    e108:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e10a:	78fa      	ldrb	r2, [r7, #3]
    e10c:	78bb      	ldrb	r3, [r7, #2]
    e10e:	6879      	ldr	r1, [r7, #4]
    e110:	01d2      	lsls	r2, r2, #7
    e112:	440a      	add	r2, r1
    e114:	4413      	add	r3, r2
    e116:	3330      	adds	r3, #48	; 0x30
    e118:	781b      	ldrb	r3, [r3, #0]
    e11a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    e11c:	7bfb      	ldrb	r3, [r7, #15]
    e11e:	f023 030f 	bic.w	r3, r3, #15
    e122:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    e124:	787b      	ldrb	r3, [r7, #1]
    e126:	f003 030f 	and.w	r3, r3, #15
    e12a:	b2da      	uxtb	r2, r3
    e12c:	7bfb      	ldrb	r3, [r7, #15]
    e12e:	4313      	orrs	r3, r2
    e130:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e132:	78fa      	ldrb	r2, [r7, #3]
    e134:	78bb      	ldrb	r3, [r7, #2]
    e136:	6879      	ldr	r1, [r7, #4]
    e138:	01d2      	lsls	r2, r2, #7
    e13a:	440a      	add	r2, r1
    e13c:	4413      	add	r3, r2
    e13e:	3330      	adds	r3, #48	; 0x30
    e140:	7bfa      	ldrb	r2, [r7, #15]
    e142:	701a      	strb	r2, [r3, #0]
}
    e144:	bf00      	nop
    e146:	3714      	adds	r7, #20
    e148:	46bd      	mov	sp, r7
    e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e14e:	4770      	bx	lr

0000e150 <hri_port_write_PMUX_PMUXO_bf>:
{
    e150:	b480      	push	{r7}
    e152:	b085      	sub	sp, #20
    e154:	af00      	add	r7, sp, #0
    e156:	6078      	str	r0, [r7, #4]
    e158:	4608      	mov	r0, r1
    e15a:	4611      	mov	r1, r2
    e15c:	461a      	mov	r2, r3
    e15e:	4603      	mov	r3, r0
    e160:	70fb      	strb	r3, [r7, #3]
    e162:	460b      	mov	r3, r1
    e164:	70bb      	strb	r3, [r7, #2]
    e166:	4613      	mov	r3, r2
    e168:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e16a:	78fa      	ldrb	r2, [r7, #3]
    e16c:	78bb      	ldrb	r3, [r7, #2]
    e16e:	6879      	ldr	r1, [r7, #4]
    e170:	01d2      	lsls	r2, r2, #7
    e172:	440a      	add	r2, r1
    e174:	4413      	add	r3, r2
    e176:	3330      	adds	r3, #48	; 0x30
    e178:	781b      	ldrb	r3, [r3, #0]
    e17a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    e17c:	7bfb      	ldrb	r3, [r7, #15]
    e17e:	f003 030f 	and.w	r3, r3, #15
    e182:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    e184:	787b      	ldrb	r3, [r7, #1]
    e186:	011b      	lsls	r3, r3, #4
    e188:	b2da      	uxtb	r2, r3
    e18a:	7bfb      	ldrb	r3, [r7, #15]
    e18c:	4313      	orrs	r3, r2
    e18e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e190:	78fa      	ldrb	r2, [r7, #3]
    e192:	78bb      	ldrb	r3, [r7, #2]
    e194:	6879      	ldr	r1, [r7, #4]
    e196:	01d2      	lsls	r2, r2, #7
    e198:	440a      	add	r2, r1
    e19a:	4413      	add	r3, r2
    e19c:	3330      	adds	r3, #48	; 0x30
    e19e:	7bfa      	ldrb	r2, [r7, #15]
    e1a0:	701a      	strb	r2, [r3, #0]
}
    e1a2:	bf00      	nop
    e1a4:	3714      	adds	r7, #20
    e1a6:	46bd      	mov	sp, r7
    e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1ac:	4770      	bx	lr

0000e1ae <hri_port_write_PINCFG_PMUXEN_bit>:
{
    e1ae:	b480      	push	{r7}
    e1b0:	b085      	sub	sp, #20
    e1b2:	af00      	add	r7, sp, #0
    e1b4:	6078      	str	r0, [r7, #4]
    e1b6:	4608      	mov	r0, r1
    e1b8:	4611      	mov	r1, r2
    e1ba:	461a      	mov	r2, r3
    e1bc:	4603      	mov	r3, r0
    e1be:	70fb      	strb	r3, [r7, #3]
    e1c0:	460b      	mov	r3, r1
    e1c2:	70bb      	strb	r3, [r7, #2]
    e1c4:	4613      	mov	r3, r2
    e1c6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    e1c8:	78fa      	ldrb	r2, [r7, #3]
    e1ca:	78bb      	ldrb	r3, [r7, #2]
    e1cc:	6879      	ldr	r1, [r7, #4]
    e1ce:	01d2      	lsls	r2, r2, #7
    e1d0:	440a      	add	r2, r1
    e1d2:	4413      	add	r3, r2
    e1d4:	3340      	adds	r3, #64	; 0x40
    e1d6:	781b      	ldrb	r3, [r3, #0]
    e1d8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    e1da:	7bfb      	ldrb	r3, [r7, #15]
    e1dc:	f023 0301 	bic.w	r3, r3, #1
    e1e0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    e1e2:	787a      	ldrb	r2, [r7, #1]
    e1e4:	7bfb      	ldrb	r3, [r7, #15]
    e1e6:	4313      	orrs	r3, r2
    e1e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    e1ea:	78fa      	ldrb	r2, [r7, #3]
    e1ec:	78bb      	ldrb	r3, [r7, #2]
    e1ee:	6879      	ldr	r1, [r7, #4]
    e1f0:	01d2      	lsls	r2, r2, #7
    e1f2:	440a      	add	r2, r1
    e1f4:	4413      	add	r3, r2
    e1f6:	3340      	adds	r3, #64	; 0x40
    e1f8:	7bfa      	ldrb	r2, [r7, #15]
    e1fa:	701a      	strb	r2, [r3, #0]
}
    e1fc:	bf00      	nop
    e1fe:	3714      	adds	r7, #20
    e200:	46bd      	mov	sp, r7
    e202:	f85d 7b04 	ldr.w	r7, [sp], #4
    e206:	4770      	bx	lr

0000e208 <hri_port_write_WRCONFIG_reg>:
{
    e208:	b480      	push	{r7}
    e20a:	b085      	sub	sp, #20
    e20c:	af00      	add	r7, sp, #0
    e20e:	60f8      	str	r0, [r7, #12]
    e210:	460b      	mov	r3, r1
    e212:	607a      	str	r2, [r7, #4]
    e214:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    e216:	7afb      	ldrb	r3, [r7, #11]
    e218:	68fa      	ldr	r2, [r7, #12]
    e21a:	01db      	lsls	r3, r3, #7
    e21c:	4413      	add	r3, r2
    e21e:	3328      	adds	r3, #40	; 0x28
    e220:	687a      	ldr	r2, [r7, #4]
    e222:	601a      	str	r2, [r3, #0]
}
    e224:	bf00      	nop
    e226:	3714      	adds	r7, #20
    e228:	46bd      	mov	sp, r7
    e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e22e:	4770      	bx	lr

0000e230 <_gpio_set_direction>:
{
    e230:	b580      	push	{r7, lr}
    e232:	b082      	sub	sp, #8
    e234:	af00      	add	r7, sp, #0
    e236:	4603      	mov	r3, r0
    e238:	6039      	str	r1, [r7, #0]
    e23a:	71fb      	strb	r3, [r7, #7]
    e23c:	4613      	mov	r3, r2
    e23e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    e240:	79bb      	ldrb	r3, [r7, #6]
    e242:	2b01      	cmp	r3, #1
    e244:	d01c      	beq.n	e280 <_gpio_set_direction+0x50>
    e246:	2b02      	cmp	r3, #2
    e248:	d037      	beq.n	e2ba <_gpio_set_direction+0x8a>
    e24a:	2b00      	cmp	r3, #0
    e24c:	d14e      	bne.n	e2ec <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e24e:	79fb      	ldrb	r3, [r7, #7]
    e250:	683a      	ldr	r2, [r7, #0]
    e252:	4619      	mov	r1, r3
    e254:	482a      	ldr	r0, [pc, #168]	; (e300 <_gpio_set_direction+0xd0>)
    e256:	4b2b      	ldr	r3, [pc, #172]	; (e304 <_gpio_set_direction+0xd4>)
    e258:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e25a:	683b      	ldr	r3, [r7, #0]
    e25c:	b29b      	uxth	r3, r3
    e25e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e262:	79fb      	ldrb	r3, [r7, #7]
    e264:	4619      	mov	r1, r3
    e266:	4826      	ldr	r0, [pc, #152]	; (e300 <_gpio_set_direction+0xd0>)
    e268:	4b27      	ldr	r3, [pc, #156]	; (e308 <_gpio_set_direction+0xd8>)
    e26a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e26c:	683b      	ldr	r3, [r7, #0]
    e26e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e270:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e274:	79fb      	ldrb	r3, [r7, #7]
    e276:	4619      	mov	r1, r3
    e278:	4821      	ldr	r0, [pc, #132]	; (e300 <_gpio_set_direction+0xd0>)
    e27a:	4b23      	ldr	r3, [pc, #140]	; (e308 <_gpio_set_direction+0xd8>)
    e27c:	4798      	blx	r3
		break;
    e27e:	e03a      	b.n	e2f6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e280:	79fb      	ldrb	r3, [r7, #7]
    e282:	683a      	ldr	r2, [r7, #0]
    e284:	4619      	mov	r1, r3
    e286:	481e      	ldr	r0, [pc, #120]	; (e300 <_gpio_set_direction+0xd0>)
    e288:	4b1e      	ldr	r3, [pc, #120]	; (e304 <_gpio_set_direction+0xd4>)
    e28a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    e28c:	683b      	ldr	r3, [r7, #0]
    e28e:	b29b      	uxth	r3, r3
    e290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e298:	79f9      	ldrb	r1, [r7, #7]
    e29a:	461a      	mov	r2, r3
    e29c:	4818      	ldr	r0, [pc, #96]	; (e300 <_gpio_set_direction+0xd0>)
    e29e:	4b1a      	ldr	r3, [pc, #104]	; (e308 <_gpio_set_direction+0xd8>)
    e2a0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    e2a2:	683b      	ldr	r3, [r7, #0]
    e2a4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    e2a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    e2aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e2ae:	79f9      	ldrb	r1, [r7, #7]
    e2b0:	461a      	mov	r2, r3
    e2b2:	4813      	ldr	r0, [pc, #76]	; (e300 <_gpio_set_direction+0xd0>)
    e2b4:	4b14      	ldr	r3, [pc, #80]	; (e308 <_gpio_set_direction+0xd8>)
    e2b6:	4798      	blx	r3
		break;
    e2b8:	e01d      	b.n	e2f6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    e2ba:	79fb      	ldrb	r3, [r7, #7]
    e2bc:	683a      	ldr	r2, [r7, #0]
    e2be:	4619      	mov	r1, r3
    e2c0:	480f      	ldr	r0, [pc, #60]	; (e300 <_gpio_set_direction+0xd0>)
    e2c2:	4b12      	ldr	r3, [pc, #72]	; (e30c <_gpio_set_direction+0xdc>)
    e2c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e2c6:	683b      	ldr	r3, [r7, #0]
    e2c8:	b29b      	uxth	r3, r3
    e2ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e2ce:	79fb      	ldrb	r3, [r7, #7]
    e2d0:	4619      	mov	r1, r3
    e2d2:	480b      	ldr	r0, [pc, #44]	; (e300 <_gpio_set_direction+0xd0>)
    e2d4:	4b0c      	ldr	r3, [pc, #48]	; (e308 <_gpio_set_direction+0xd8>)
    e2d6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e2d8:	683b      	ldr	r3, [r7, #0]
    e2da:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e2dc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e2e0:	79fb      	ldrb	r3, [r7, #7]
    e2e2:	4619      	mov	r1, r3
    e2e4:	4806      	ldr	r0, [pc, #24]	; (e300 <_gpio_set_direction+0xd0>)
    e2e6:	4b08      	ldr	r3, [pc, #32]	; (e308 <_gpio_set_direction+0xd8>)
    e2e8:	4798      	blx	r3
		break;
    e2ea:	e004      	b.n	e2f6 <_gpio_set_direction+0xc6>
		ASSERT(false);
    e2ec:	2246      	movs	r2, #70	; 0x46
    e2ee:	4908      	ldr	r1, [pc, #32]	; (e310 <_gpio_set_direction+0xe0>)
    e2f0:	2000      	movs	r0, #0
    e2f2:	4b08      	ldr	r3, [pc, #32]	; (e314 <_gpio_set_direction+0xe4>)
    e2f4:	4798      	blx	r3
}
    e2f6:	bf00      	nop
    e2f8:	3708      	adds	r7, #8
    e2fa:	46bd      	mov	sp, r7
    e2fc:	bd80      	pop	{r7, pc}
    e2fe:	bf00      	nop
    e300:	41008000 	.word	0x41008000
    e304:	0000e079 	.word	0x0000e079
    e308:	0000e209 	.word	0x0000e209
    e30c:	0000e051 	.word	0x0000e051
    e310:	0001ae44 	.word	0x0001ae44
    e314:	000062c5 	.word	0x000062c5

0000e318 <_gpio_set_level>:
{
    e318:	b580      	push	{r7, lr}
    e31a:	b082      	sub	sp, #8
    e31c:	af00      	add	r7, sp, #0
    e31e:	4603      	mov	r3, r0
    e320:	6039      	str	r1, [r7, #0]
    e322:	71fb      	strb	r3, [r7, #7]
    e324:	4613      	mov	r3, r2
    e326:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e328:	79bb      	ldrb	r3, [r7, #6]
    e32a:	2b00      	cmp	r3, #0
    e32c:	d006      	beq.n	e33c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e32e:	79fb      	ldrb	r3, [r7, #7]
    e330:	683a      	ldr	r2, [r7, #0]
    e332:	4619      	mov	r1, r3
    e334:	4806      	ldr	r0, [pc, #24]	; (e350 <_gpio_set_level+0x38>)
    e336:	4b07      	ldr	r3, [pc, #28]	; (e354 <_gpio_set_level+0x3c>)
    e338:	4798      	blx	r3
}
    e33a:	e005      	b.n	e348 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e33c:	79fb      	ldrb	r3, [r7, #7]
    e33e:	683a      	ldr	r2, [r7, #0]
    e340:	4619      	mov	r1, r3
    e342:	4803      	ldr	r0, [pc, #12]	; (e350 <_gpio_set_level+0x38>)
    e344:	4b04      	ldr	r3, [pc, #16]	; (e358 <_gpio_set_level+0x40>)
    e346:	4798      	blx	r3
}
    e348:	bf00      	nop
    e34a:	3708      	adds	r7, #8
    e34c:	46bd      	mov	sp, r7
    e34e:	bd80      	pop	{r7, pc}
    e350:	41008000 	.word	0x41008000
    e354:	0000e0a1 	.word	0x0000e0a1
    e358:	0000e0c9 	.word	0x0000e0c9

0000e35c <_gpio_set_pin_function>:
{
    e35c:	b590      	push	{r4, r7, lr}
    e35e:	b085      	sub	sp, #20
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
    e364:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    e366:	687b      	ldr	r3, [r7, #4]
    e368:	095b      	lsrs	r3, r3, #5
    e36a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    e36c:	687b      	ldr	r3, [r7, #4]
    e36e:	b2db      	uxtb	r3, r3
    e370:	f003 031f 	and.w	r3, r3, #31
    e374:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    e376:	683b      	ldr	r3, [r7, #0]
    e378:	f1b3 3fff 	cmp.w	r3, #4294967295
    e37c:	d106      	bne.n	e38c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    e37e:	7bba      	ldrb	r2, [r7, #14]
    e380:	7bf9      	ldrb	r1, [r7, #15]
    e382:	2300      	movs	r3, #0
    e384:	4812      	ldr	r0, [pc, #72]	; (e3d0 <_gpio_set_pin_function+0x74>)
    e386:	4c13      	ldr	r4, [pc, #76]	; (e3d4 <_gpio_set_pin_function+0x78>)
    e388:	47a0      	blx	r4
}
    e38a:	e01d      	b.n	e3c8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    e38c:	7bba      	ldrb	r2, [r7, #14]
    e38e:	7bf9      	ldrb	r1, [r7, #15]
    e390:	2301      	movs	r3, #1
    e392:	480f      	ldr	r0, [pc, #60]	; (e3d0 <_gpio_set_pin_function+0x74>)
    e394:	4c0f      	ldr	r4, [pc, #60]	; (e3d4 <_gpio_set_pin_function+0x78>)
    e396:	47a0      	blx	r4
		if (pin & 1) {
    e398:	7bbb      	ldrb	r3, [r7, #14]
    e39a:	f003 0301 	and.w	r3, r3, #1
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d009      	beq.n	e3b6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    e3a2:	7bbb      	ldrb	r3, [r7, #14]
    e3a4:	085b      	lsrs	r3, r3, #1
    e3a6:	b2da      	uxtb	r2, r3
    e3a8:	683b      	ldr	r3, [r7, #0]
    e3aa:	b2db      	uxtb	r3, r3
    e3ac:	7bf9      	ldrb	r1, [r7, #15]
    e3ae:	4808      	ldr	r0, [pc, #32]	; (e3d0 <_gpio_set_pin_function+0x74>)
    e3b0:	4c09      	ldr	r4, [pc, #36]	; (e3d8 <_gpio_set_pin_function+0x7c>)
    e3b2:	47a0      	blx	r4
}
    e3b4:	e008      	b.n	e3c8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    e3b6:	7bbb      	ldrb	r3, [r7, #14]
    e3b8:	085b      	lsrs	r3, r3, #1
    e3ba:	b2da      	uxtb	r2, r3
    e3bc:	683b      	ldr	r3, [r7, #0]
    e3be:	b2db      	uxtb	r3, r3
    e3c0:	7bf9      	ldrb	r1, [r7, #15]
    e3c2:	4803      	ldr	r0, [pc, #12]	; (e3d0 <_gpio_set_pin_function+0x74>)
    e3c4:	4c05      	ldr	r4, [pc, #20]	; (e3dc <_gpio_set_pin_function+0x80>)
    e3c6:	47a0      	blx	r4
}
    e3c8:	bf00      	nop
    e3ca:	3714      	adds	r7, #20
    e3cc:	46bd      	mov	sp, r7
    e3ce:	bd90      	pop	{r4, r7, pc}
    e3d0:	41008000 	.word	0x41008000
    e3d4:	0000e1af 	.word	0x0000e1af
    e3d8:	0000e151 	.word	0x0000e151
    e3dc:	0000e0f1 	.word	0x0000e0f1

0000e3e0 <gpio_set_pin_function>:
{
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b082      	sub	sp, #8
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	6078      	str	r0, [r7, #4]
    e3e8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    e3ea:	6839      	ldr	r1, [r7, #0]
    e3ec:	6878      	ldr	r0, [r7, #4]
    e3ee:	4b03      	ldr	r3, [pc, #12]	; (e3fc <gpio_set_pin_function+0x1c>)
    e3f0:	4798      	blx	r3
}
    e3f2:	bf00      	nop
    e3f4:	3708      	adds	r7, #8
    e3f6:	46bd      	mov	sp, r7
    e3f8:	bd80      	pop	{r7, pc}
    e3fa:	bf00      	nop
    e3fc:	0000e35d 	.word	0x0000e35d

0000e400 <gpio_set_pin_direction>:
{
    e400:	b580      	push	{r7, lr}
    e402:	b082      	sub	sp, #8
    e404:	af00      	add	r7, sp, #0
    e406:	4603      	mov	r3, r0
    e408:	460a      	mov	r2, r1
    e40a:	71fb      	strb	r3, [r7, #7]
    e40c:	4613      	mov	r3, r2
    e40e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    e410:	79fb      	ldrb	r3, [r7, #7]
    e412:	095b      	lsrs	r3, r3, #5
    e414:	b2d8      	uxtb	r0, r3
    e416:	79fb      	ldrb	r3, [r7, #7]
    e418:	f003 031f 	and.w	r3, r3, #31
    e41c:	2201      	movs	r2, #1
    e41e:	fa02 f303 	lsl.w	r3, r2, r3
    e422:	79ba      	ldrb	r2, [r7, #6]
    e424:	4619      	mov	r1, r3
    e426:	4b03      	ldr	r3, [pc, #12]	; (e434 <gpio_set_pin_direction+0x34>)
    e428:	4798      	blx	r3
}
    e42a:	bf00      	nop
    e42c:	3708      	adds	r7, #8
    e42e:	46bd      	mov	sp, r7
    e430:	bd80      	pop	{r7, pc}
    e432:	bf00      	nop
    e434:	0000e231 	.word	0x0000e231

0000e438 <gpio_set_pin_level>:
{
    e438:	b580      	push	{r7, lr}
    e43a:	b082      	sub	sp, #8
    e43c:	af00      	add	r7, sp, #0
    e43e:	4603      	mov	r3, r0
    e440:	460a      	mov	r2, r1
    e442:	71fb      	strb	r3, [r7, #7]
    e444:	4613      	mov	r3, r2
    e446:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e448:	79fb      	ldrb	r3, [r7, #7]
    e44a:	095b      	lsrs	r3, r3, #5
    e44c:	b2d8      	uxtb	r0, r3
    e44e:	79fb      	ldrb	r3, [r7, #7]
    e450:	f003 031f 	and.w	r3, r3, #31
    e454:	2201      	movs	r2, #1
    e456:	fa02 f303 	lsl.w	r3, r2, r3
    e45a:	79ba      	ldrb	r2, [r7, #6]
    e45c:	4619      	mov	r1, r3
    e45e:	4b03      	ldr	r3, [pc, #12]	; (e46c <gpio_set_pin_level+0x34>)
    e460:	4798      	blx	r3
}
    e462:	bf00      	nop
    e464:	3708      	adds	r7, #8
    e466:	46bd      	mov	sp, r7
    e468:	bd80      	pop	{r7, pc}
    e46a:	bf00      	nop
    e46c:	0000e319 	.word	0x0000e319

0000e470 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    e470:	b580      	push	{r7, lr}
    e472:	b082      	sub	sp, #8
    e474:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    e476:	2100      	movs	r1, #0
    e478:	2008      	movs	r0, #8
    e47a:	4b24      	ldr	r3, [pc, #144]	; (e50c <QSPI_N25Q256_exit_xip+0x9c>)
    e47c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    e47e:	2100      	movs	r1, #0
    e480:	202b      	movs	r0, #43	; 0x2b
    e482:	4b22      	ldr	r3, [pc, #136]	; (e50c <QSPI_N25Q256_exit_xip+0x9c>)
    e484:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    e486:	2100      	movs	r1, #0
    e488:	202a      	movs	r0, #42	; 0x2a
    e48a:	4b20      	ldr	r3, [pc, #128]	; (e50c <QSPI_N25Q256_exit_xip+0x9c>)
    e48c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    e48e:	2102      	movs	r1, #2
    e490:	2008      	movs	r0, #8
    e492:	4b1f      	ldr	r3, [pc, #124]	; (e510 <QSPI_N25Q256_exit_xip+0xa0>)
    e494:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    e496:	2102      	movs	r1, #2
    e498:	202b      	movs	r0, #43	; 0x2b
    e49a:	4b1d      	ldr	r3, [pc, #116]	; (e510 <QSPI_N25Q256_exit_xip+0xa0>)
    e49c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    e49e:	2102      	movs	r1, #2
    e4a0:	202a      	movs	r0, #42	; 0x2a
    e4a2:	4b1b      	ldr	r3, [pc, #108]	; (e510 <QSPI_N25Q256_exit_xip+0xa0>)
    e4a4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    e4a6:	2101      	movs	r1, #1
    e4a8:	2008      	movs	r0, #8
    e4aa:	4b1a      	ldr	r3, [pc, #104]	; (e514 <QSPI_N25Q256_exit_xip+0xa4>)
    e4ac:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    e4ae:	2100      	movs	r1, #0
    e4b0:	202b      	movs	r0, #43	; 0x2b
    e4b2:	4b18      	ldr	r3, [pc, #96]	; (e514 <QSPI_N25Q256_exit_xip+0xa4>)
    e4b4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    e4b6:	2100      	movs	r1, #0
    e4b8:	202a      	movs	r0, #42	; 0x2a
    e4ba:	4b16      	ldr	r3, [pc, #88]	; (e514 <QSPI_N25Q256_exit_xip+0xa4>)
    e4bc:	4798      	blx	r3

	delay_us(1);
    e4be:	2001      	movs	r0, #1
    e4c0:	4b15      	ldr	r3, [pc, #84]	; (e518 <QSPI_N25Q256_exit_xip+0xa8>)
    e4c2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    e4c4:	2300      	movs	r3, #0
    e4c6:	607b      	str	r3, [r7, #4]
    e4c8:	e010      	b.n	e4ec <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    e4ca:	2101      	movs	r1, #1
    e4cc:	202a      	movs	r0, #42	; 0x2a
    e4ce:	4b11      	ldr	r3, [pc, #68]	; (e514 <QSPI_N25Q256_exit_xip+0xa4>)
    e4d0:	4798      	blx	r3
		delay_us(1);
    e4d2:	2001      	movs	r0, #1
    e4d4:	4b10      	ldr	r3, [pc, #64]	; (e518 <QSPI_N25Q256_exit_xip+0xa8>)
    e4d6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    e4d8:	2100      	movs	r1, #0
    e4da:	202a      	movs	r0, #42	; 0x2a
    e4dc:	4b0d      	ldr	r3, [pc, #52]	; (e514 <QSPI_N25Q256_exit_xip+0xa4>)
    e4de:	4798      	blx	r3
		delay_us(1);
    e4e0:	2001      	movs	r0, #1
    e4e2:	4b0d      	ldr	r3, [pc, #52]	; (e518 <QSPI_N25Q256_exit_xip+0xa8>)
    e4e4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	3301      	adds	r3, #1
    e4ea:	607b      	str	r3, [r7, #4]
    e4ec:	687b      	ldr	r3, [r7, #4]
    e4ee:	2b06      	cmp	r3, #6
    e4f0:	ddeb      	ble.n	e4ca <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    e4f2:	2101      	movs	r1, #1
    e4f4:	202b      	movs	r0, #43	; 0x2b
    e4f6:	4b07      	ldr	r3, [pc, #28]	; (e514 <QSPI_N25Q256_exit_xip+0xa4>)
    e4f8:	4798      	blx	r3
	delay_us(1);
    e4fa:	2001      	movs	r0, #1
    e4fc:	4b06      	ldr	r3, [pc, #24]	; (e518 <QSPI_N25Q256_exit_xip+0xa8>)
    e4fe:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    e500:	4b06      	ldr	r3, [pc, #24]	; (e51c <QSPI_N25Q256_exit_xip+0xac>)
    e502:	4798      	blx	r3
}
    e504:	bf00      	nop
    e506:	3708      	adds	r7, #8
    e508:	46bd      	mov	sp, r7
    e50a:	bd80      	pop	{r7, pc}
    e50c:	0000e3e1 	.word	0x0000e3e1
    e510:	0000e401 	.word	0x0000e401
    e514:	0000e439 	.word	0x0000e439
    e518:	000046cd 	.word	0x000046cd
    e51c:	00003729 	.word	0x00003729

0000e520 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    e520:	b598      	push	{r3, r4, r7, lr}
    e522:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    e524:	4806      	ldr	r0, [pc, #24]	; (e540 <spi_nor_flash_init+0x20>)
    e526:	4b07      	ldr	r3, [pc, #28]	; (e544 <spi_nor_flash_init+0x24>)
    e528:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    e52a:	2300      	movs	r3, #0
    e52c:	4a06      	ldr	r2, [pc, #24]	; (e548 <spi_nor_flash_init+0x28>)
    e52e:	4904      	ldr	r1, [pc, #16]	; (e540 <spi_nor_flash_init+0x20>)
    e530:	4806      	ldr	r0, [pc, #24]	; (e54c <spi_nor_flash_init+0x2c>)
    e532:	4c07      	ldr	r4, [pc, #28]	; (e550 <spi_nor_flash_init+0x30>)
    e534:	47a0      	blx	r4
    e536:	4602      	mov	r2, r0
    e538:	4b06      	ldr	r3, [pc, #24]	; (e554 <spi_nor_flash_init+0x34>)
    e53a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    e53c:	bf00      	nop
    e53e:	bd98      	pop	{r3, r4, r7, pc}
    e540:	20004fc8 	.word	0x20004fc8
    e544:	00004d9d 	.word	0x00004d9d
    e548:	0000e471 	.word	0x0000e471
    e54c:	20003780 	.word	0x20003780
    e550:	0000e98d 	.word	0x0000e98d
    e554:	20005168 	.word	0x20005168

0000e558 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    e558:	b580      	push	{r7, lr}
    e55a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    e55c:	4805      	ldr	r0, [pc, #20]	; (e574 <cdc_device_acm_init+0x1c>)
    e55e:	4b06      	ldr	r3, [pc, #24]	; (e578 <cdc_device_acm_init+0x20>)
    e560:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    e562:	4b06      	ldr	r3, [pc, #24]	; (e57c <cdc_device_acm_init+0x24>)
    e564:	4798      	blx	r3

	usbdc_start(single_desc);
    e566:	4806      	ldr	r0, [pc, #24]	; (e580 <cdc_device_acm_init+0x28>)
    e568:	4b06      	ldr	r3, [pc, #24]	; (e584 <cdc_device_acm_init+0x2c>)
    e56a:	4798      	blx	r3
	usbdc_attach();
    e56c:	4b06      	ldr	r3, [pc, #24]	; (e588 <cdc_device_acm_init+0x30>)
    e56e:	4798      	blx	r3
}
    e570:	bf00      	nop
    e572:	bd80      	pop	{r7, pc}
    e574:	200037d0 	.word	0x200037d0
    e578:	000100b5 	.word	0x000100b5
    e57c:	0000f32d 	.word	0x0000f32d
    e580:	20000168 	.word	0x20000168
    e584:	00010151 	.word	0x00010151
    e588:	000101a1 	.word	0x000101a1

0000e58c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    e58c:	b580      	push	{r7, lr}
    e58e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    e590:	4b01      	ldr	r3, [pc, #4]	; (e598 <usb_init+0xc>)
    e592:	4798      	blx	r3
}
    e594:	bf00      	nop
    e596:	bd80      	pop	{r7, pc}
    e598:	0000e559 	.word	0x0000e559

0000e59c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    e59c:	b480      	push	{r7}
    e59e:	b085      	sub	sp, #20
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e5a4:	f3ef 8310 	mrs	r3, PRIMASK
    e5a8:	60fb      	str	r3, [r7, #12]
  return(result);
    e5aa:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    e5ac:	687b      	ldr	r3, [r7, #4]
    e5ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    e5b0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e5b2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    e5b6:	bf00      	nop
    e5b8:	3714      	adds	r7, #20
    e5ba:	46bd      	mov	sp, r7
    e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5c0:	4770      	bx	lr

0000e5c2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    e5c2:	b480      	push	{r7}
    e5c4:	b085      	sub	sp, #20
    e5c6:	af00      	add	r7, sp, #0
    e5c8:	6078      	str	r0, [r7, #4]
    e5ca:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    e5ce:	687b      	ldr	r3, [r7, #4]
    e5d0:	681b      	ldr	r3, [r3, #0]
    e5d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e5d4:	68fb      	ldr	r3, [r7, #12]
    e5d6:	f383 8810 	msr	PRIMASK, r3
}
    e5da:	bf00      	nop
    e5dc:	3714      	adds	r7, #20
    e5de:	46bd      	mov	sp, r7
    e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5e4:	4770      	bx	lr
	...

0000e5e8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    e5e8:	b580      	push	{r7, lr}
    e5ea:	b08c      	sub	sp, #48	; 0x30
    e5ec:	af00      	add	r7, sp, #0
    e5ee:	6078      	str	r0, [r7, #4]
    e5f0:	460b      	mov	r3, r1
    e5f2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e5f4:	687b      	ldr	r3, [r7, #4]
    e5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	681b      	ldr	r3, [r3, #0]
    e5fc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    e5fe:	f107 030c 	add.w	r3, r7, #12
    e602:	2200      	movs	r2, #0
    e604:	601a      	str	r2, [r3, #0]
    e606:	605a      	str	r2, [r3, #4]
    e608:	609a      	str	r2, [r3, #8]
    e60a:	60da      	str	r2, [r3, #12]
    e60c:	611a      	str	r2, [r3, #16]
    e60e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e612:	7b1b      	ldrb	r3, [r3, #12]
    e614:	2b00      	cmp	r3, #0
    e616:	d001      	beq.n	e61c <n25q256a_xip_confirm+0x34>
    e618:	2206      	movs	r2, #6
    e61a:	e000      	b.n	e61e <n25q256a_xip_confirm+0x36>
    e61c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e61e:	7b3b      	ldrb	r3, [r7, #12]
    e620:	f362 0302 	bfi	r3, r2, #0, #3
    e624:	733b      	strb	r3, [r7, #12]
    e626:	7b3b      	ldrb	r3, [r7, #12]
    e628:	f043 0310 	orr.w	r3, r3, #16
    e62c:	733b      	strb	r3, [r7, #12]
    e62e:	7b3b      	ldrb	r3, [r7, #12]
    e630:	f043 0320 	orr.w	r3, r3, #32
    e634:	733b      	strb	r3, [r7, #12]
    e636:	7b3b      	ldrb	r3, [r7, #12]
    e638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e63c:	733b      	strb	r3, [r7, #12]
    e63e:	7b3b      	ldrb	r3, [r7, #12]
    e640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e644:	733b      	strb	r3, [r7, #12]
    e646:	7b7b      	ldrb	r3, [r7, #13]
    e648:	f043 0303 	orr.w	r3, r3, #3
    e64c:	737b      	strb	r3, [r7, #13]
    e64e:	7b7b      	ldrb	r3, [r7, #13]
    e650:	2201      	movs	r2, #1
    e652:	f362 1305 	bfi	r3, r2, #4, #2
    e656:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    e658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e65a:	7b1b      	ldrb	r3, [r3, #12]
    e65c:	2b00      	cmp	r3, #0
    e65e:	d001      	beq.n	e664 <n25q256a_xip_confirm+0x7c>
    e660:	2208      	movs	r2, #8
    e662:	e000      	b.n	e666 <n25q256a_xip_confirm+0x7e>
    e664:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e666:	7bbb      	ldrb	r3, [r7, #14]
    e668:	f362 0304 	bfi	r3, r2, #0, #5
    e66c:	73bb      	strb	r3, [r7, #14]
    e66e:	230b      	movs	r3, #11
    e670:	743b      	strb	r3, [r7, #16]
    e672:	78fb      	ldrb	r3, [r7, #3]
    e674:	2b00      	cmp	r3, #0
    e676:	d001      	beq.n	e67c <n25q256a_xip_confirm+0x94>
    e678:	2300      	movs	r3, #0
    e67a:	e000      	b.n	e67e <n25q256a_xip_confirm+0x96>
    e67c:	23ff      	movs	r3, #255	; 0xff
    e67e:	747b      	strb	r3, [r7, #17]
    e680:	2301      	movs	r3, #1
    e682:	61bb      	str	r3, [r7, #24]
    e684:	f107 0327 	add.w	r3, r7, #39	; 0x27
    e688:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    e68a:	f107 030c 	add.w	r3, r7, #12
    e68e:	4619      	mov	r1, r3
    e690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e692:	4b07      	ldr	r3, [pc, #28]	; (e6b0 <n25q256a_xip_confirm+0xc8>)
    e694:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    e696:	78fb      	ldrb	r3, [r7, #3]
    e698:	2b00      	cmp	r3, #0
    e69a:	d001      	beq.n	e6a0 <n25q256a_xip_confirm+0xb8>
    e69c:	2202      	movs	r2, #2
    e69e:	e000      	b.n	e6a2 <n25q256a_xip_confirm+0xba>
    e6a0:	2201      	movs	r2, #1
    e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6a4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    e6a6:	2300      	movs	r3, #0
}
    e6a8:	4618      	mov	r0, r3
    e6aa:	3730      	adds	r7, #48	; 0x30
    e6ac:	46bd      	mov	sp, r7
    e6ae:	bd80      	pop	{r7, pc}
    e6b0:	00004e15 	.word	0x00004e15

0000e6b4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    e6b4:	b580      	push	{r7, lr}
    e6b6:	b08c      	sub	sp, #48	; 0x30
    e6b8:	af00      	add	r7, sp, #0
    e6ba:	6078      	str	r0, [r7, #4]
    e6bc:	460b      	mov	r3, r1
    e6be:	70fb      	strb	r3, [r7, #3]
    e6c0:	4613      	mov	r3, r2
    e6c2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    e6c4:	2300      	movs	r3, #0
    e6c6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    e6c8:	687b      	ldr	r3, [r7, #4]
    e6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    e6cc:	687b      	ldr	r3, [r7, #4]
    e6ce:	681b      	ldr	r3, [r3, #0]
    e6d0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    e6d2:	f107 030c 	add.w	r3, r7, #12
    e6d6:	2200      	movs	r2, #0
    e6d8:	601a      	str	r2, [r3, #0]
    e6da:	605a      	str	r2, [r3, #4]
    e6dc:	609a      	str	r2, [r3, #8]
    e6de:	60da      	str	r2, [r3, #12]
    e6e0:	611a      	str	r2, [r3, #16]
    e6e2:	615a      	str	r2, [r3, #20]
    e6e4:	78fb      	ldrb	r3, [r7, #3]
    e6e6:	f003 0307 	and.w	r3, r3, #7
    e6ea:	b2da      	uxtb	r2, r3
    e6ec:	7b3b      	ldrb	r3, [r7, #12]
    e6ee:	f362 0302 	bfi	r3, r2, #0, #3
    e6f2:	733b      	strb	r3, [r7, #12]
    e6f4:	7b3b      	ldrb	r3, [r7, #12]
    e6f6:	f043 0310 	orr.w	r3, r3, #16
    e6fa:	733b      	strb	r3, [r7, #12]
    e6fc:	7b3b      	ldrb	r3, [r7, #12]
    e6fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e702:	733b      	strb	r3, [r7, #12]
    e704:	78bb      	ldrb	r3, [r7, #2]
    e706:	743b      	strb	r3, [r7, #16]
    e708:	2301      	movs	r3, #1
    e70a:	61bb      	str	r3, [r7, #24]
    e70c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    e710:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e714:	7b5b      	ldrb	r3, [r3, #13]
    e716:	2b00      	cmp	r3, #0
    e718:	d003      	beq.n	e722 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    e71a:	2100      	movs	r1, #0
    e71c:	6878      	ldr	r0, [r7, #4]
    e71e:	4b0a      	ldr	r3, [pc, #40]	; (e748 <n25q256a_read_reg+0x94>)
    e720:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e722:	f107 030c 	add.w	r3, r7, #12
    e726:	4619      	mov	r1, r3
    e728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e72a:	4b08      	ldr	r3, [pc, #32]	; (e74c <n25q256a_read_reg+0x98>)
    e72c:	4798      	blx	r3
	if (n25q->xip_mode) {
    e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e730:	7b5b      	ldrb	r3, [r3, #13]
    e732:	2b00      	cmp	r3, #0
    e734:	d003      	beq.n	e73e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    e736:	2101      	movs	r1, #1
    e738:	6878      	ldr	r0, [r7, #4]
    e73a:	4b03      	ldr	r3, [pc, #12]	; (e748 <n25q256a_read_reg+0x94>)
    e73c:	4798      	blx	r3
	}
	return status;
    e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    e740:	4618      	mov	r0, r3
    e742:	3730      	adds	r7, #48	; 0x30
    e744:	46bd      	mov	sp, r7
    e746:	bd80      	pop	{r7, pc}
    e748:	0000e5e9 	.word	0x0000e5e9
    e74c:	00004e15 	.word	0x00004e15

0000e750 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    e750:	b580      	push	{r7, lr}
    e752:	b08c      	sub	sp, #48	; 0x30
    e754:	af00      	add	r7, sp, #0
    e756:	60f8      	str	r0, [r7, #12]
    e758:	607b      	str	r3, [r7, #4]
    e75a:	460b      	mov	r3, r1
    e75c:	72fb      	strb	r3, [r7, #11]
    e75e:	4613      	mov	r3, r2
    e760:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e762:	68fb      	ldr	r3, [r7, #12]
    e764:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e766:	68fb      	ldr	r3, [r7, #12]
    e768:	681b      	ldr	r3, [r3, #0]
    e76a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    e76c:	f107 0310 	add.w	r3, r7, #16
    e770:	2200      	movs	r2, #0
    e772:	601a      	str	r2, [r3, #0]
    e774:	605a      	str	r2, [r3, #4]
    e776:	609a      	str	r2, [r3, #8]
    e778:	60da      	str	r2, [r3, #12]
    e77a:	611a      	str	r2, [r3, #16]
    e77c:	615a      	str	r2, [r3, #20]
    e77e:	7afb      	ldrb	r3, [r7, #11]
    e780:	f003 0307 	and.w	r3, r3, #7
    e784:	b2da      	uxtb	r2, r3
    e786:	7c3b      	ldrb	r3, [r7, #16]
    e788:	f362 0302 	bfi	r3, r2, #0, #3
    e78c:	743b      	strb	r3, [r7, #16]
    e78e:	7c3b      	ldrb	r3, [r7, #16]
    e790:	f043 0310 	orr.w	r3, r3, #16
    e794:	743b      	strb	r3, [r7, #16]
    e796:	7c3b      	ldrb	r3, [r7, #16]
    e798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e79c:	743b      	strb	r3, [r7, #16]
    e79e:	7c7b      	ldrb	r3, [r7, #17]
    e7a0:	2202      	movs	r2, #2
    e7a2:	f362 1305 	bfi	r3, r2, #4, #2
    e7a6:	747b      	strb	r3, [r7, #17]
    e7a8:	7abb      	ldrb	r3, [r7, #10]
    e7aa:	753b      	strb	r3, [r7, #20]
    e7ac:	2301      	movs	r3, #1
    e7ae:	61fb      	str	r3, [r7, #28]
    e7b0:	1d3b      	adds	r3, r7, #4
    e7b2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    e7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e7b6:	7b5b      	ldrb	r3, [r3, #13]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d003      	beq.n	e7c4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    e7bc:	2100      	movs	r1, #0
    e7be:	68f8      	ldr	r0, [r7, #12]
    e7c0:	4b09      	ldr	r3, [pc, #36]	; (e7e8 <n25q256a_write_reg+0x98>)
    e7c2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e7c4:	f107 0310 	add.w	r3, r7, #16
    e7c8:	4619      	mov	r1, r3
    e7ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e7cc:	4b07      	ldr	r3, [pc, #28]	; (e7ec <n25q256a_write_reg+0x9c>)
    e7ce:	4798      	blx	r3
	if (n25q->xip_mode) {
    e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e7d2:	7b5b      	ldrb	r3, [r3, #13]
    e7d4:	2b00      	cmp	r3, #0
    e7d6:	d003      	beq.n	e7e0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    e7d8:	2101      	movs	r1, #1
    e7da:	68f8      	ldr	r0, [r7, #12]
    e7dc:	4b02      	ldr	r3, [pc, #8]	; (e7e8 <n25q256a_write_reg+0x98>)
    e7de:	4798      	blx	r3
	}
}
    e7e0:	bf00      	nop
    e7e2:	3730      	adds	r7, #48	; 0x30
    e7e4:	46bd      	mov	sp, r7
    e7e6:	bd80      	pop	{r7, pc}
    e7e8:	0000e5e9 	.word	0x0000e5e9
    e7ec:	00004e15 	.word	0x00004e15

0000e7f0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b090      	sub	sp, #64	; 0x40
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
    e7f8:	460b      	mov	r3, r1
    e7fa:	70fb      	strb	r3, [r7, #3]
    e7fc:	4613      	mov	r3, r2
    e7fe:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e800:	687b      	ldr	r3, [r7, #4]
    e802:	681b      	ldr	r3, [r3, #0]
    e804:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    e806:	78bb      	ldrb	r3, [r7, #2]
    e808:	2b00      	cmp	r3, #0
    e80a:	d001      	beq.n	e810 <n25q256a_write_enable+0x20>
    e80c:	2306      	movs	r3, #6
    e80e:	e000      	b.n	e812 <n25q256a_write_enable+0x22>
    e810:	2304      	movs	r3, #4
    e812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    e816:	f107 0320 	add.w	r3, r7, #32
    e81a:	2200      	movs	r2, #0
    e81c:	601a      	str	r2, [r3, #0]
    e81e:	605a      	str	r2, [r3, #4]
    e820:	609a      	str	r2, [r3, #8]
    e822:	60da      	str	r2, [r3, #12]
    e824:	611a      	str	r2, [r3, #16]
    e826:	615a      	str	r2, [r3, #20]
    e828:	78fb      	ldrb	r3, [r7, #3]
    e82a:	f003 0307 	and.w	r3, r3, #7
    e82e:	b2da      	uxtb	r2, r3
    e830:	f897 3020 	ldrb.w	r3, [r7, #32]
    e834:	f362 0302 	bfi	r3, r2, #0, #3
    e838:	f887 3020 	strb.w	r3, [r7, #32]
    e83c:	f897 3020 	ldrb.w	r3, [r7, #32]
    e840:	f043 0310 	orr.w	r3, r3, #16
    e844:	f887 3020 	strb.w	r3, [r7, #32]
    e848:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    e84c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    e850:	f107 0308 	add.w	r3, r7, #8
    e854:	2200      	movs	r2, #0
    e856:	601a      	str	r2, [r3, #0]
    e858:	605a      	str	r2, [r3, #4]
    e85a:	609a      	str	r2, [r3, #8]
    e85c:	60da      	str	r2, [r3, #12]
    e85e:	611a      	str	r2, [r3, #16]
    e860:	615a      	str	r2, [r3, #20]
    e862:	78fb      	ldrb	r3, [r7, #3]
    e864:	f003 0307 	and.w	r3, r3, #7
    e868:	b2da      	uxtb	r2, r3
    e86a:	7a3b      	ldrb	r3, [r7, #8]
    e86c:	f362 0302 	bfi	r3, r2, #0, #3
    e870:	723b      	strb	r3, [r7, #8]
    e872:	7a3b      	ldrb	r3, [r7, #8]
    e874:	f043 0310 	orr.w	r3, r3, #16
    e878:	723b      	strb	r3, [r7, #8]
    e87a:	7a3b      	ldrb	r3, [r7, #8]
    e87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e880:	723b      	strb	r3, [r7, #8]
    e882:	2305      	movs	r3, #5
    e884:	733b      	strb	r3, [r7, #12]
    e886:	2301      	movs	r3, #1
    e888:	617b      	str	r3, [r7, #20]
    e88a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    e88e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    e890:	f107 0320 	add.w	r3, r7, #32
    e894:	4619      	mov	r1, r3
    e896:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e898:	4b08      	ldr	r3, [pc, #32]	; (e8bc <n25q256a_write_enable+0xcc>)
    e89a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    e89c:	f107 0308 	add.w	r3, r7, #8
    e8a0:	4619      	mov	r1, r3
    e8a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e8a4:	4b05      	ldr	r3, [pc, #20]	; (e8bc <n25q256a_write_enable+0xcc>)
    e8a6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    e8a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    e8ac:	f003 0302 	and.w	r3, r3, #2
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	d0ed      	beq.n	e890 <n25q256a_write_enable+0xa0>
}
    e8b4:	bf00      	nop
    e8b6:	3740      	adds	r7, #64	; 0x40
    e8b8:	46bd      	mov	sp, r7
    e8ba:	bd80      	pop	{r7, pc}
    e8bc:	00004e15 	.word	0x00004e15

0000e8c0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    e8c0:	b590      	push	{r4, r7, lr}
    e8c2:	b087      	sub	sp, #28
    e8c4:	af00      	add	r7, sp, #0
    e8c6:	6078      	str	r0, [r7, #4]
    e8c8:	460b      	mov	r3, r1
    e8ca:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    e8cc:	687b      	ldr	r3, [r7, #4]
    e8ce:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e8d0:	68fb      	ldr	r3, [r7, #12]
    e8d2:	7b1b      	ldrb	r3, [r3, #12]
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d001      	beq.n	e8dc <n25q256a_switch_mode+0x1c>
    e8d8:	2306      	movs	r3, #6
    e8da:	e000      	b.n	e8de <n25q256a_switch_mode+0x1e>
    e8dc:	2300      	movs	r3, #0
    e8de:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e8e0:	7afb      	ldrb	r3, [r7, #11]
    e8e2:	2265      	movs	r2, #101	; 0x65
    e8e4:	4619      	mov	r1, r3
    e8e6:	6878      	ldr	r0, [r7, #4]
    e8e8:	4b25      	ldr	r3, [pc, #148]	; (e980 <n25q256a_switch_mode+0xc0>)
    e8ea:	4798      	blx	r3
    e8ec:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    e8ee:	2300      	movs	r3, #0
    e8f0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    e8f2:	68fb      	ldr	r3, [r7, #12]
    e8f4:	7b1b      	ldrb	r3, [r3, #12]
    e8f6:	78fa      	ldrb	r2, [r7, #3]
    e8f8:	429a      	cmp	r2, r3
    e8fa:	d03d      	beq.n	e978 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    e8fc:	78fb      	ldrb	r3, [r7, #3]
    e8fe:	2b00      	cmp	r3, #0
    e900:	d00b      	beq.n	e91a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    e902:	697b      	ldr	r3, [r7, #20]
    e904:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e908:	2b00      	cmp	r3, #0
    e90a:	d011      	beq.n	e930 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    e90c:	697b      	ldr	r3, [r7, #20]
    e90e:	f003 031f 	and.w	r3, r3, #31
    e912:	617b      	str	r3, [r7, #20]
			modify = 1;
    e914:	2301      	movs	r3, #1
    e916:	74fb      	strb	r3, [r7, #19]
    e918:	e00a      	b.n	e930 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    e91a:	697b      	ldr	r3, [r7, #20]
    e91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e920:	2b00      	cmp	r3, #0
    e922:	d105      	bne.n	e930 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    e924:	697b      	ldr	r3, [r7, #20]
    e926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    e92a:	617b      	str	r3, [r7, #20]
			modify = 1;
    e92c:	2301      	movs	r3, #1
    e92e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    e930:	7cfb      	ldrb	r3, [r7, #19]
    e932:	2b00      	cmp	r3, #0
    e934:	d021      	beq.n	e97a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    e936:	68fb      	ldr	r3, [r7, #12]
    e938:	78fa      	ldrb	r2, [r7, #3]
    e93a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    e93c:	7afb      	ldrb	r3, [r7, #11]
    e93e:	2201      	movs	r2, #1
    e940:	4619      	mov	r1, r3
    e942:	6878      	ldr	r0, [r7, #4]
    e944:	4b0f      	ldr	r3, [pc, #60]	; (e984 <n25q256a_switch_mode+0xc4>)
    e946:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    e948:	7af9      	ldrb	r1, [r7, #11]
    e94a:	697b      	ldr	r3, [r7, #20]
    e94c:	2261      	movs	r2, #97	; 0x61
    e94e:	6878      	ldr	r0, [r7, #4]
    e950:	4c0d      	ldr	r4, [pc, #52]	; (e988 <n25q256a_switch_mode+0xc8>)
    e952:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e954:	78fb      	ldrb	r3, [r7, #3]
    e956:	2b00      	cmp	r3, #0
    e958:	d001      	beq.n	e95e <n25q256a_switch_mode+0x9e>
    e95a:	2306      	movs	r3, #6
    e95c:	e000      	b.n	e960 <n25q256a_switch_mode+0xa0>
    e95e:	2300      	movs	r3, #0
    e960:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e962:	7afb      	ldrb	r3, [r7, #11]
    e964:	2265      	movs	r2, #101	; 0x65
    e966:	4619      	mov	r1, r3
    e968:	6878      	ldr	r0, [r7, #4]
    e96a:	4b05      	ldr	r3, [pc, #20]	; (e980 <n25q256a_switch_mode+0xc0>)
    e96c:	4798      	blx	r3
    e96e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    e970:	68fb      	ldr	r3, [r7, #12]
    e972:	78fa      	ldrb	r2, [r7, #3]
    e974:	731a      	strb	r2, [r3, #12]
    e976:	e000      	b.n	e97a <n25q256a_switch_mode+0xba>
		return;
    e978:	bf00      	nop
	}
}
    e97a:	371c      	adds	r7, #28
    e97c:	46bd      	mov	sp, r7
    e97e:	bd90      	pop	{r4, r7, pc}
    e980:	0000e6b5 	.word	0x0000e6b5
    e984:	0000e7f1 	.word	0x0000e7f1
    e988:	0000e751 	.word	0x0000e751

0000e98c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    e98c:	b580      	push	{r7, lr}
    e98e:	b086      	sub	sp, #24
    e990:	af00      	add	r7, sp, #0
    e992:	60f8      	str	r0, [r7, #12]
    e994:	60b9      	str	r1, [r7, #8]
    e996:	607a      	str	r2, [r7, #4]
    e998:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    e99a:	68fb      	ldr	r3, [r7, #12]
    e99c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    e99e:	4a0c      	ldr	r2, [pc, #48]	; (e9d0 <n25q256a_construct+0x44>)
    e9a0:	68b9      	ldr	r1, [r7, #8]
    e9a2:	68f8      	ldr	r0, [r7, #12]
    e9a4:	4b0b      	ldr	r3, [pc, #44]	; (e9d4 <n25q256a_construct+0x48>)
    e9a6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    e9a8:	697b      	ldr	r3, [r7, #20]
    e9aa:	2200      	movs	r2, #0
    e9ac:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    e9ae:	697b      	ldr	r3, [r7, #20]
    e9b0:	2200      	movs	r2, #0
    e9b2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    e9b4:	697b      	ldr	r3, [r7, #20]
    e9b6:	687a      	ldr	r2, [r7, #4]
    e9b8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    e9ba:	78fb      	ldrb	r3, [r7, #3]
    e9bc:	4619      	mov	r1, r3
    e9be:	68f8      	ldr	r0, [r7, #12]
    e9c0:	4b05      	ldr	r3, [pc, #20]	; (e9d8 <n25q256a_construct+0x4c>)
    e9c2:	4798      	blx	r3
	return me;
    e9c4:	68fb      	ldr	r3, [r7, #12]
}
    e9c6:	4618      	mov	r0, r3
    e9c8:	3718      	adds	r7, #24
    e9ca:	46bd      	mov	sp, r7
    e9cc:	bd80      	pop	{r7, pc}
    e9ce:	bf00      	nop
    e9d0:	0001ae60 	.word	0x0001ae60
    e9d4:	0000ee69 	.word	0x0000ee69
    e9d8:	0000e8c1 	.word	0x0000e8c1

0000e9dc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    e9dc:	b580      	push	{r7, lr}
    e9de:	b08c      	sub	sp, #48	; 0x30
    e9e0:	af00      	add	r7, sp, #0
    e9e2:	60f8      	str	r0, [r7, #12]
    e9e4:	60b9      	str	r1, [r7, #8]
    e9e6:	607a      	str	r2, [r7, #4]
    e9e8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e9ea:	68fb      	ldr	r3, [r7, #12]
    e9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e9ee:	68fb      	ldr	r3, [r7, #12]
    e9f0:	681b      	ldr	r3, [r3, #0]
    e9f2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    e9f4:	f107 0310 	add.w	r3, r7, #16
    e9f8:	2200      	movs	r2, #0
    e9fa:	601a      	str	r2, [r3, #0]
    e9fc:	605a      	str	r2, [r3, #4]
    e9fe:	609a      	str	r2, [r3, #8]
    ea00:	60da      	str	r2, [r3, #12]
    ea02:	611a      	str	r2, [r3, #16]
    ea04:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea08:	7b1b      	ldrb	r3, [r3, #12]
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d001      	beq.n	ea12 <n25q256a_read+0x36>
    ea0e:	2206      	movs	r2, #6
    ea10:	e000      	b.n	ea14 <n25q256a_read+0x38>
    ea12:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ea14:	7c3b      	ldrb	r3, [r7, #16]
    ea16:	f362 0302 	bfi	r3, r2, #0, #3
    ea1a:	743b      	strb	r3, [r7, #16]
    ea1c:	7c3b      	ldrb	r3, [r7, #16]
    ea1e:	f043 0310 	orr.w	r3, r3, #16
    ea22:	743b      	strb	r3, [r7, #16]
    ea24:	7c3b      	ldrb	r3, [r7, #16]
    ea26:	f043 0320 	orr.w	r3, r3, #32
    ea2a:	743b      	strb	r3, [r7, #16]
    ea2c:	7c3b      	ldrb	r3, [r7, #16]
    ea2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ea32:	743b      	strb	r3, [r7, #16]
    ea34:	7c7b      	ldrb	r3, [r7, #17]
    ea36:	2201      	movs	r2, #1
    ea38:	f362 1305 	bfi	r3, r2, #4, #2
    ea3c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea40:	7b1b      	ldrb	r3, [r3, #12]
    ea42:	2b00      	cmp	r3, #0
    ea44:	d001      	beq.n	ea4a <n25q256a_read+0x6e>
    ea46:	220a      	movs	r2, #10
    ea48:	e000      	b.n	ea4c <n25q256a_read+0x70>
    ea4a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ea4c:	7cbb      	ldrb	r3, [r7, #18]
    ea4e:	f362 0304 	bfi	r3, r2, #0, #5
    ea52:	74bb      	strb	r3, [r7, #18]
    ea54:	230b      	movs	r3, #11
    ea56:	753b      	strb	r3, [r7, #20]
    ea58:	687b      	ldr	r3, [r7, #4]
    ea5a:	61bb      	str	r3, [r7, #24]
    ea5c:	683b      	ldr	r3, [r7, #0]
    ea5e:	61fb      	str	r3, [r7, #28]
    ea60:	68bb      	ldr	r3, [r7, #8]
    ea62:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ea64:	f107 0310 	add.w	r3, r7, #16
    ea68:	4619      	mov	r1, r3
    ea6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea6c:	4b03      	ldr	r3, [pc, #12]	; (ea7c <n25q256a_read+0xa0>)
    ea6e:	4798      	blx	r3
	return ERR_NONE;
    ea70:	2300      	movs	r3, #0
}
    ea72:	4618      	mov	r0, r3
    ea74:	3730      	adds	r7, #48	; 0x30
    ea76:	46bd      	mov	sp, r7
    ea78:	bd80      	pop	{r7, pc}
    ea7a:	bf00      	nop
    ea7c:	00004e15 	.word	0x00004e15

0000ea80 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ea80:	b580      	push	{r7, lr}
    ea82:	b08c      	sub	sp, #48	; 0x30
    ea84:	af00      	add	r7, sp, #0
    ea86:	60f8      	str	r0, [r7, #12]
    ea88:	60b9      	str	r1, [r7, #8]
    ea8a:	607a      	str	r2, [r7, #4]
    ea8c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ea8e:	68fb      	ldr	r3, [r7, #12]
    ea90:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ea92:	68fb      	ldr	r3, [r7, #12]
    ea94:	681b      	ldr	r3, [r3, #0]
    ea96:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ea98:	f107 0310 	add.w	r3, r7, #16
    ea9c:	2200      	movs	r2, #0
    ea9e:	601a      	str	r2, [r3, #0]
    eaa0:	605a      	str	r2, [r3, #4]
    eaa2:	609a      	str	r2, [r3, #8]
    eaa4:	60da      	str	r2, [r3, #12]
    eaa6:	611a      	str	r2, [r3, #16]
    eaa8:	615a      	str	r2, [r3, #20]
    eaaa:	7c3b      	ldrb	r3, [r7, #16]
    eaac:	f043 0310 	orr.w	r3, r3, #16
    eab0:	743b      	strb	r3, [r7, #16]
    eab2:	7c3b      	ldrb	r3, [r7, #16]
    eab4:	f043 0320 	orr.w	r3, r3, #32
    eab8:	743b      	strb	r3, [r7, #16]
    eaba:	7c3b      	ldrb	r3, [r7, #16]
    eabc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    eac0:	743b      	strb	r3, [r7, #16]
    eac2:	7c7b      	ldrb	r3, [r7, #17]
    eac4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    eac8:	747b      	strb	r3, [r7, #17]
    eaca:	2302      	movs	r3, #2
    eacc:	753b      	strb	r3, [r7, #20]
    eace:	687b      	ldr	r3, [r7, #4]
    ead0:	61bb      	str	r3, [r7, #24]
    ead2:	683b      	ldr	r3, [r7, #0]
    ead4:	61fb      	str	r3, [r7, #28]
    ead6:	68bb      	ldr	r3, [r7, #8]
    ead8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    eada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eadc:	7b1b      	ldrb	r3, [r3, #12]
    eade:	2b00      	cmp	r3, #0
    eae0:	d001      	beq.n	eae6 <n25q256a_write+0x66>
    eae2:	2206      	movs	r2, #6
    eae4:	e000      	b.n	eae8 <n25q256a_write+0x68>
    eae6:	2200      	movs	r2, #0
    eae8:	7c3b      	ldrb	r3, [r7, #16]
    eaea:	f362 0302 	bfi	r3, r2, #0, #3
    eaee:	743b      	strb	r3, [r7, #16]
	while (length) {
    eaf0:	e035      	b.n	eb5e <n25q256a_write+0xde>
		cmd.address = address;
    eaf2:	687b      	ldr	r3, [r7, #4]
    eaf4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    eaf6:	683b      	ldr	r3, [r7, #0]
    eaf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    eafc:	d802      	bhi.n	eb04 <n25q256a_write+0x84>
			cmd.buf_len = length;
    eafe:	683b      	ldr	r3, [r7, #0]
    eb00:	61fb      	str	r3, [r7, #28]
    eb02:	e002      	b.n	eb0a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    eb04:	f44f 7380 	mov.w	r3, #256	; 0x100
    eb08:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    eb0a:	7c3b      	ldrb	r3, [r7, #16]
    eb0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eb10:	b2db      	uxtb	r3, r3
    eb12:	2201      	movs	r2, #1
    eb14:	4619      	mov	r1, r3
    eb16:	68f8      	ldr	r0, [r7, #12]
    eb18:	4b19      	ldr	r3, [pc, #100]	; (eb80 <n25q256a_write+0x100>)
    eb1a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    eb1c:	f107 0310 	add.w	r3, r7, #16
    eb20:	4619      	mov	r1, r3
    eb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    eb24:	4b17      	ldr	r3, [pc, #92]	; (eb84 <n25q256a_write+0x104>)
    eb26:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    eb28:	bf00      	nop
    eb2a:	7c3b      	ldrb	r3, [r7, #16]
    eb2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eb30:	b2db      	uxtb	r3, r3
    eb32:	2270      	movs	r2, #112	; 0x70
    eb34:	4619      	mov	r1, r3
    eb36:	68f8      	ldr	r0, [r7, #12]
    eb38:	4b13      	ldr	r3, [pc, #76]	; (eb88 <n25q256a_write+0x108>)
    eb3a:	4798      	blx	r3
    eb3c:	4603      	mov	r3, r0
    eb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eb42:	2b00      	cmp	r3, #0
    eb44:	d0f1      	beq.n	eb2a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    eb46:	6a3a      	ldr	r2, [r7, #32]
    eb48:	69fb      	ldr	r3, [r7, #28]
    eb4a:	4413      	add	r3, r2
    eb4c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    eb4e:	69fb      	ldr	r3, [r7, #28]
    eb50:	683a      	ldr	r2, [r7, #0]
    eb52:	1ad3      	subs	r3, r2, r3
    eb54:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    eb56:	69fb      	ldr	r3, [r7, #28]
    eb58:	687a      	ldr	r2, [r7, #4]
    eb5a:	4413      	add	r3, r2
    eb5c:	607b      	str	r3, [r7, #4]
	while (length) {
    eb5e:	683b      	ldr	r3, [r7, #0]
    eb60:	2b00      	cmp	r3, #0
    eb62:	d1c6      	bne.n	eaf2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb66:	7b5b      	ldrb	r3, [r3, #13]
    eb68:	2b00      	cmp	r3, #0
    eb6a:	d003      	beq.n	eb74 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    eb6c:	2101      	movs	r1, #1
    eb6e:	68f8      	ldr	r0, [r7, #12]
    eb70:	4b06      	ldr	r3, [pc, #24]	; (eb8c <n25q256a_write+0x10c>)
    eb72:	4798      	blx	r3
	}
	return ERR_NONE;
    eb74:	2300      	movs	r3, #0
}
    eb76:	4618      	mov	r0, r3
    eb78:	3730      	adds	r7, #48	; 0x30
    eb7a:	46bd      	mov	sp, r7
    eb7c:	bd80      	pop	{r7, pc}
    eb7e:	bf00      	nop
    eb80:	0000e7f1 	.word	0x0000e7f1
    eb84:	00004e15 	.word	0x00004e15
    eb88:	0000e6b5 	.word	0x0000e6b5
    eb8c:	0000e5e9 	.word	0x0000e5e9

0000eb90 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    eb90:	b580      	push	{r7, lr}
    eb92:	b090      	sub	sp, #64	; 0x40
    eb94:	af00      	add	r7, sp, #0
    eb96:	60f8      	str	r0, [r7, #12]
    eb98:	60b9      	str	r1, [r7, #8]
    eb9a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    eb9c:	68fb      	ldr	r3, [r7, #12]
    eb9e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    eba0:	68fb      	ldr	r3, [r7, #12]
    eba2:	681b      	ldr	r3, [r3, #0]
    eba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    eba6:	f107 0314 	add.w	r3, r7, #20
    ebaa:	2200      	movs	r2, #0
    ebac:	601a      	str	r2, [r3, #0]
    ebae:	605a      	str	r2, [r3, #4]
    ebb0:	609a      	str	r2, [r3, #8]
    ebb2:	60da      	str	r2, [r3, #12]
    ebb4:	611a      	str	r2, [r3, #16]
    ebb6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ebb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ebba:	7b1b      	ldrb	r3, [r3, #12]
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	d001      	beq.n	ebc4 <n25q256a_erase+0x34>
    ebc0:	2206      	movs	r2, #6
    ebc2:	e000      	b.n	ebc6 <n25q256a_erase+0x36>
    ebc4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    ebc6:	7d3b      	ldrb	r3, [r7, #20]
    ebc8:	f362 0302 	bfi	r3, r2, #0, #3
    ebcc:	753b      	strb	r3, [r7, #20]
    ebce:	7d3b      	ldrb	r3, [r7, #20]
    ebd0:	f043 0310 	orr.w	r3, r3, #16
    ebd4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    ebd6:	687b      	ldr	r3, [r7, #4]
    ebd8:	4a56      	ldr	r2, [pc, #344]	; (ed34 <n25q256a_erase+0x1a4>)
    ebda:	4293      	cmp	r3, r2
    ebdc:	bf94      	ite	ls
    ebde:	2301      	movls	r3, #1
    ebe0:	2300      	movhi	r3, #0
    ebe2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    ebe4:	7d3b      	ldrb	r3, [r7, #20]
    ebe6:	f362 1345 	bfi	r3, r2, #5, #1
    ebea:	753b      	strb	r3, [r7, #20]
    ebec:	7d7b      	ldrb	r3, [r7, #21]
    ebee:	2202      	movs	r2, #2
    ebf0:	f362 1305 	bfi	r3, r2, #4, #2
    ebf4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    ebf6:	68bb      	ldr	r3, [r7, #8]
    ebf8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    ebfa:	687b      	ldr	r3, [r7, #4]
    ebfc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    ebfe:	2300      	movs	r3, #0
    ec00:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    ec02:	687b      	ldr	r3, [r7, #4]
    ec04:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d104      	bne.n	ec16 <n25q256a_erase+0x86>
    ec0c:	68bb      	ldr	r3, [r7, #8]
    ec0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ec12:	2b00      	cmp	r3, #0
    ec14:	d002      	beq.n	ec1c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ec16:	f06f 030c 	mvn.w	r3, #12
    ec1a:	e087      	b.n	ed2c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ec1c:	687b      	ldr	r3, [r7, #4]
    ec1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ec22:	d368      	bcc.n	ecf6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ec24:	23c7      	movs	r3, #199	; 0xc7
    ec26:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ec28:	7d3b      	ldrb	r3, [r7, #20]
    ec2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec2e:	b2db      	uxtb	r3, r3
    ec30:	2201      	movs	r2, #1
    ec32:	4619      	mov	r1, r3
    ec34:	68f8      	ldr	r0, [r7, #12]
    ec36:	4b40      	ldr	r3, [pc, #256]	; (ed38 <n25q256a_erase+0x1a8>)
    ec38:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ec3a:	f107 0314 	add.w	r3, r7, #20
    ec3e:	4619      	mov	r1, r3
    ec40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ec42:	4b3e      	ldr	r3, [pc, #248]	; (ed3c <n25q256a_erase+0x1ac>)
    ec44:	4798      	blx	r3
    ec46:	e059      	b.n	ecfc <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ec48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec4a:	b29b      	uxth	r3, r3
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	d11f      	bne.n	ec90 <n25q256a_erase+0x100>
    ec50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ec56:	d31b      	bcc.n	ec90 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ec58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec5a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ec5c:	23d8      	movs	r3, #216	; 0xd8
    ec5e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ec60:	7d3b      	ldrb	r3, [r7, #20]
    ec62:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec66:	b2db      	uxtb	r3, r3
    ec68:	2201      	movs	r2, #1
    ec6a:	4619      	mov	r1, r3
    ec6c:	68f8      	ldr	r0, [r7, #12]
    ec6e:	4b32      	ldr	r3, [pc, #200]	; (ed38 <n25q256a_erase+0x1a8>)
    ec70:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ec72:	f107 0314 	add.w	r3, r7, #20
    ec76:	4619      	mov	r1, r3
    ec78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ec7a:	4b30      	ldr	r3, [pc, #192]	; (ed3c <n25q256a_erase+0x1ac>)
    ec7c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ec7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec80:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ec84:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec88:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ec8c:	63bb      	str	r3, [r7, #56]	; 0x38
    ec8e:	e023      	b.n	ecd8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ec90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ec96:	d31b      	bcc.n	ecd0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ec98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec9a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ec9c:	2320      	movs	r3, #32
    ec9e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    eca0:	7d3b      	ldrb	r3, [r7, #20]
    eca2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eca6:	b2db      	uxtb	r3, r3
    eca8:	2201      	movs	r2, #1
    ecaa:	4619      	mov	r1, r3
    ecac:	68f8      	ldr	r0, [r7, #12]
    ecae:	4b22      	ldr	r3, [pc, #136]	; (ed38 <n25q256a_erase+0x1a8>)
    ecb0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ecb2:	f107 0314 	add.w	r3, r7, #20
    ecb6:	4619      	mov	r1, r3
    ecb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ecba:	4b20      	ldr	r3, [pc, #128]	; (ed3c <n25q256a_erase+0x1ac>)
    ecbc:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    ecbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ecc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ecc4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ecc8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    eccc:	63bb      	str	r3, [r7, #56]	; 0x38
    ecce:	e003      	b.n	ecd8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    ecd0:	f06f 030c 	mvn.w	r3, #12
    ecd4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    ecd6:	e011      	b.n	ecfc <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ecd8:	bf00      	nop
    ecda:	7d3b      	ldrb	r3, [r7, #20]
    ecdc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ece0:	b2db      	uxtb	r3, r3
    ece2:	2270      	movs	r2, #112	; 0x70
    ece4:	4619      	mov	r1, r3
    ece6:	68f8      	ldr	r0, [r7, #12]
    ece8:	4b15      	ldr	r3, [pc, #84]	; (ed40 <n25q256a_erase+0x1b0>)
    ecea:	4798      	blx	r3
    ecec:	4603      	mov	r3, r0
    ecee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d0f1      	beq.n	ecda <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	d1a5      	bne.n	ec48 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ecfc:	bf00      	nop
    ecfe:	7d3b      	ldrb	r3, [r7, #20]
    ed00:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ed04:	b2db      	uxtb	r3, r3
    ed06:	2270      	movs	r2, #112	; 0x70
    ed08:	4619      	mov	r1, r3
    ed0a:	68f8      	ldr	r0, [r7, #12]
    ed0c:	4b0c      	ldr	r3, [pc, #48]	; (ed40 <n25q256a_erase+0x1b0>)
    ed0e:	4798      	blx	r3
    ed10:	4603      	mov	r3, r0
    ed12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ed16:	2b00      	cmp	r3, #0
    ed18:	d0f1      	beq.n	ecfe <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ed1c:	7b5b      	ldrb	r3, [r3, #13]
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d003      	beq.n	ed2a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    ed22:	2101      	movs	r1, #1
    ed24:	68f8      	ldr	r0, [r7, #12]
    ed26:	4b07      	ldr	r3, [pc, #28]	; (ed44 <n25q256a_erase+0x1b4>)
    ed28:	4798      	blx	r3
	}
	return rc;
    ed2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ed2c:	4618      	mov	r0, r3
    ed2e:	3740      	adds	r7, #64	; 0x40
    ed30:	46bd      	mov	sp, r7
    ed32:	bd80      	pop	{r7, pc}
    ed34:	001fffff 	.word	0x001fffff
    ed38:	0000e7f1 	.word	0x0000e7f1
    ed3c:	00004e15 	.word	0x00004e15
    ed40:	0000e6b5 	.word	0x0000e6b5
    ed44:	0000e5e9 	.word	0x0000e5e9

0000ed48 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    ed48:	b590      	push	{r4, r7, lr}
    ed4a:	b085      	sub	sp, #20
    ed4c:	af00      	add	r7, sp, #0
    ed4e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    ed50:	687b      	ldr	r3, [r7, #4]
    ed52:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ed54:	68fb      	ldr	r3, [r7, #12]
    ed56:	7b1b      	ldrb	r3, [r3, #12]
    ed58:	2b00      	cmp	r3, #0
    ed5a:	d001      	beq.n	ed60 <n25q256a_enable_xip+0x18>
    ed5c:	2306      	movs	r3, #6
    ed5e:	e000      	b.n	ed62 <n25q256a_enable_xip+0x1a>
    ed60:	2300      	movs	r3, #0
    ed62:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ed64:	68fb      	ldr	r3, [r7, #12]
    ed66:	7b5b      	ldrb	r3, [r3, #13]
    ed68:	2b00      	cmp	r3, #0
    ed6a:	d129      	bne.n	edc0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ed6c:	7afb      	ldrb	r3, [r7, #11]
    ed6e:	2285      	movs	r2, #133	; 0x85
    ed70:	4619      	mov	r1, r3
    ed72:	6878      	ldr	r0, [r7, #4]
    ed74:	4b15      	ldr	r3, [pc, #84]	; (edcc <n25q256a_enable_xip+0x84>)
    ed76:	4798      	blx	r3
    ed78:	4603      	mov	r3, r0
    ed7a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    ed7c:	7abb      	ldrb	r3, [r7, #10]
    ed7e:	f003 0308 	and.w	r3, r3, #8
    ed82:	2b00      	cmp	r3, #0
    ed84:	d015      	beq.n	edb2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    ed86:	7abb      	ldrb	r3, [r7, #10]
    ed88:	f023 0308 	bic.w	r3, r3, #8
    ed8c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    ed8e:	7abb      	ldrb	r3, [r7, #10]
    ed90:	7af9      	ldrb	r1, [r7, #11]
    ed92:	2281      	movs	r2, #129	; 0x81
    ed94:	6878      	ldr	r0, [r7, #4]
    ed96:	4c0e      	ldr	r4, [pc, #56]	; (edd0 <n25q256a_enable_xip+0x88>)
    ed98:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ed9a:	bf00      	nop
    ed9c:	7afb      	ldrb	r3, [r7, #11]
    ed9e:	2270      	movs	r2, #112	; 0x70
    eda0:	4619      	mov	r1, r3
    eda2:	6878      	ldr	r0, [r7, #4]
    eda4:	4b09      	ldr	r3, [pc, #36]	; (edcc <n25q256a_enable_xip+0x84>)
    eda6:	4798      	blx	r3
    eda8:	4603      	mov	r3, r0
    edaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    edae:	2b00      	cmp	r3, #0
    edb0:	d0f4      	beq.n	ed9c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    edb2:	68fb      	ldr	r3, [r7, #12]
    edb4:	2201      	movs	r2, #1
    edb6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    edb8:	2101      	movs	r1, #1
    edba:	6878      	ldr	r0, [r7, #4]
    edbc:	4b05      	ldr	r3, [pc, #20]	; (edd4 <n25q256a_enable_xip+0x8c>)
    edbe:	4798      	blx	r3
	}
	return ERR_NONE;
    edc0:	2300      	movs	r3, #0
}
    edc2:	4618      	mov	r0, r3
    edc4:	3714      	adds	r7, #20
    edc6:	46bd      	mov	sp, r7
    edc8:	bd90      	pop	{r4, r7, pc}
    edca:	bf00      	nop
    edcc:	0000e6b5 	.word	0x0000e6b5
    edd0:	0000e751 	.word	0x0000e751
    edd4:	0000e5e9 	.word	0x0000e5e9

0000edd8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    edd8:	b580      	push	{r7, lr}
    edda:	b086      	sub	sp, #24
    eddc:	af00      	add	r7, sp, #0
    edde:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ede0:	687b      	ldr	r3, [r7, #4]
    ede2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ede4:	687b      	ldr	r3, [r7, #4]
    ede6:	681b      	ldr	r3, [r3, #0]
    ede8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    edea:	697b      	ldr	r3, [r7, #20]
    edec:	7b1b      	ldrb	r3, [r3, #12]
    edee:	2b00      	cmp	r3, #0
    edf0:	d001      	beq.n	edf6 <n25q256a_disable_xip+0x1e>
    edf2:	2306      	movs	r3, #6
    edf4:	e000      	b.n	edf8 <n25q256a_disable_xip+0x20>
    edf6:	2300      	movs	r3, #0
    edf8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    edfa:	2100      	movs	r1, #0
    edfc:	6878      	ldr	r0, [r7, #4]
    edfe:	4b15      	ldr	r3, [pc, #84]	; (ee54 <n25q256a_disable_xip+0x7c>)
    ee00:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ee02:	7bfb      	ldrb	r3, [r7, #15]
    ee04:	2285      	movs	r2, #133	; 0x85
    ee06:	4619      	mov	r1, r3
    ee08:	6878      	ldr	r0, [r7, #4]
    ee0a:	4b13      	ldr	r3, [pc, #76]	; (ee58 <n25q256a_disable_xip+0x80>)
    ee0c:	4798      	blx	r3
    ee0e:	4603      	mov	r3, r0
    ee10:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    ee12:	7bbb      	ldrb	r3, [r7, #14]
    ee14:	f003 0308 	and.w	r3, r3, #8
    ee18:	2b00      	cmp	r3, #0
    ee1a:	d113      	bne.n	ee44 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    ee1c:	697b      	ldr	r3, [r7, #20]
    ee1e:	689b      	ldr	r3, [r3, #8]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d00f      	beq.n	ee44 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    ee24:	693b      	ldr	r3, [r7, #16]
    ee26:	681b      	ldr	r3, [r3, #0]
    ee28:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    ee2a:	6938      	ldr	r0, [r7, #16]
    ee2c:	4b0b      	ldr	r3, [pc, #44]	; (ee5c <n25q256a_disable_xip+0x84>)
    ee2e:	4798      	blx	r3
			n25q->pin_exit_xip();
    ee30:	697b      	ldr	r3, [r7, #20]
    ee32:	689b      	ldr	r3, [r3, #8]
    ee34:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    ee36:	68b9      	ldr	r1, [r7, #8]
    ee38:	6938      	ldr	r0, [r7, #16]
    ee3a:	4b09      	ldr	r3, [pc, #36]	; (ee60 <n25q256a_disable_xip+0x88>)
    ee3c:	4798      	blx	r3
			qspi_sync_enable(descr);
    ee3e:	6938      	ldr	r0, [r7, #16]
    ee40:	4b08      	ldr	r3, [pc, #32]	; (ee64 <n25q256a_disable_xip+0x8c>)
    ee42:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    ee44:	697b      	ldr	r3, [r7, #20]
    ee46:	2200      	movs	r2, #0
    ee48:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ee4a:	2300      	movs	r3, #0
}
    ee4c:	4618      	mov	r0, r3
    ee4e:	3718      	adds	r7, #24
    ee50:	46bd      	mov	sp, r7
    ee52:	bd80      	pop	{r7, pc}
    ee54:	0000e5e9 	.word	0x0000e5e9
    ee58:	0000e6b5 	.word	0x0000e6b5
    ee5c:	00004dd9 	.word	0x00004dd9
    ee60:	00004d51 	.word	0x00004d51
    ee64:	00004d9d 	.word	0x00004d9d

0000ee68 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ee68:	b480      	push	{r7}
    ee6a:	b085      	sub	sp, #20
    ee6c:	af00      	add	r7, sp, #0
    ee6e:	60f8      	str	r0, [r7, #12]
    ee70:	60b9      	str	r1, [r7, #8]
    ee72:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ee74:	68fb      	ldr	r3, [r7, #12]
    ee76:	68ba      	ldr	r2, [r7, #8]
    ee78:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ee7a:	68fb      	ldr	r3, [r7, #12]
    ee7c:	687a      	ldr	r2, [r7, #4]
    ee7e:	605a      	str	r2, [r3, #4]

	return me;
    ee80:	68fb      	ldr	r3, [r7, #12]
}
    ee82:	4618      	mov	r0, r3
    ee84:	3714      	adds	r7, #20
    ee86:	46bd      	mov	sp, r7
    ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee8c:	4770      	bx	lr

0000ee8e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ee8e:	b480      	push	{r7}
    ee90:	b083      	sub	sp, #12
    ee92:	af00      	add	r7, sp, #0
    ee94:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ee96:	687b      	ldr	r3, [r7, #4]
    ee98:	781b      	ldrb	r3, [r3, #0]
    ee9a:	b29a      	uxth	r2, r3
    ee9c:	687b      	ldr	r3, [r7, #4]
    ee9e:	3301      	adds	r3, #1
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	b29b      	uxth	r3, r3
    eea4:	021b      	lsls	r3, r3, #8
    eea6:	b29b      	uxth	r3, r3
    eea8:	4413      	add	r3, r2
    eeaa:	b29b      	uxth	r3, r3
}
    eeac:	4618      	mov	r0, r3
    eeae:	370c      	adds	r7, #12
    eeb0:	46bd      	mov	sp, r7
    eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    eeb6:	4770      	bx	lr

0000eeb8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    eeb8:	b480      	push	{r7}
    eeba:	b083      	sub	sp, #12
    eebc:	af00      	add	r7, sp, #0
    eebe:	6078      	str	r0, [r7, #4]
	return desc[0];
    eec0:	687b      	ldr	r3, [r7, #4]
    eec2:	781b      	ldrb	r3, [r3, #0]
}
    eec4:	4618      	mov	r0, r3
    eec6:	370c      	adds	r7, #12
    eec8:	46bd      	mov	sp, r7
    eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
    eece:	4770      	bx	lr

0000eed0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    eed0:	b580      	push	{r7, lr}
    eed2:	b082      	sub	sp, #8
    eed4:	af00      	add	r7, sp, #0
    eed6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    eed8:	6878      	ldr	r0, [r7, #4]
    eeda:	4b05      	ldr	r3, [pc, #20]	; (eef0 <usb_desc_next+0x20>)
    eedc:	4798      	blx	r3
    eede:	4603      	mov	r3, r0
    eee0:	461a      	mov	r2, r3
    eee2:	687b      	ldr	r3, [r7, #4]
    eee4:	4413      	add	r3, r2
}
    eee6:	4618      	mov	r0, r3
    eee8:	3708      	adds	r7, #8
    eeea:	46bd      	mov	sp, r7
    eeec:	bd80      	pop	{r7, pc}
    eeee:	bf00      	nop
    eef0:	0000eeb9 	.word	0x0000eeb9

0000eef4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    eef4:	b580      	push	{r7, lr}
    eef6:	b08c      	sub	sp, #48	; 0x30
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
    eefc:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    eefe:	687b      	ldr	r3, [r7, #4]
    ef00:	689b      	ldr	r3, [r3, #8]
    ef02:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    ef04:	683b      	ldr	r3, [r7, #0]
    ef06:	681b      	ldr	r3, [r3, #0]
    ef08:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    ef0a:	2300      	movs	r3, #0
    ef0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ef10:	e08f      	b.n	f032 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef14:	2b00      	cmp	r3, #0
    ef16:	d102      	bne.n	ef1e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    ef18:	f06f 0309 	mvn.w	r3, #9
    ef1c:	e092      	b.n	f044 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    ef1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef20:	789b      	ldrb	r3, [r3, #2]
    ef22:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef26:	795b      	ldrb	r3, [r3, #5]
    ef28:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    ef2a:	7c7b      	ldrb	r3, [r7, #17]
    ef2c:	2b02      	cmp	r3, #2
    ef2e:	d002      	beq.n	ef36 <cdcdf_acm_enable+0x42>
    ef30:	7c7b      	ldrb	r3, [r7, #17]
    ef32:	2b0a      	cmp	r3, #10
    ef34:	d121      	bne.n	ef7a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ef36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef3a:	6a3a      	ldr	r2, [r7, #32]
    ef3c:	5cd2      	ldrb	r2, [r2, r3]
    ef3e:	7bbb      	ldrb	r3, [r7, #14]
    ef40:	429a      	cmp	r2, r3
    ef42:	d102      	bne.n	ef4a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    ef44:	f06f 0311 	mvn.w	r3, #17
    ef48:	e07c      	b.n	f044 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    ef4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef4e:	6a3a      	ldr	r2, [r7, #32]
    ef50:	5cd3      	ldrb	r3, [r2, r3]
    ef52:	2bff      	cmp	r3, #255	; 0xff
    ef54:	d002      	beq.n	ef5c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    ef56:	f06f 031b 	mvn.w	r3, #27
    ef5a:	e073      	b.n	f044 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    ef5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef60:	7bb9      	ldrb	r1, [r7, #14]
    ef62:	6a3a      	ldr	r2, [r7, #32]
    ef64:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ef66:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    ef68:	683b      	ldr	r3, [r7, #0]
    ef6a:	685b      	ldr	r3, [r3, #4]
    ef6c:	2205      	movs	r2, #5
    ef6e:	4619      	mov	r1, r3
    ef70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ef72:	4b36      	ldr	r3, [pc, #216]	; (f04c <cdcdf_acm_enable+0x158>)
    ef74:	4798      	blx	r3
    ef76:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    ef78:	e047      	b.n	f00a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    ef7a:	f06f 0309 	mvn.w	r3, #9
    ef7e:	e061      	b.n	f044 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    ef80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef82:	789b      	ldrb	r3, [r3, #2]
    ef84:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    ef86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef88:	78db      	ldrb	r3, [r3, #3]
    ef8a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    ef8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef8e:	3304      	adds	r3, #4
    ef90:	4618      	mov	r0, r3
    ef92:	4b2f      	ldr	r3, [pc, #188]	; (f050 <cdcdf_acm_enable+0x15c>)
    ef94:	4798      	blx	r3
    ef96:	4603      	mov	r3, r0
    ef98:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ef9a:	7ebb      	ldrb	r3, [r7, #26]
    ef9c:	7ef9      	ldrb	r1, [r7, #27]
    ef9e:	8bba      	ldrh	r2, [r7, #28]
    efa0:	4618      	mov	r0, r3
    efa2:	4b2c      	ldr	r3, [pc, #176]	; (f054 <cdcdf_acm_enable+0x160>)
    efa4:	4798      	blx	r3
    efa6:	4603      	mov	r3, r0
    efa8:	2b00      	cmp	r3, #0
    efaa:	d002      	beq.n	efb2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    efac:	f06f 0313 	mvn.w	r3, #19
    efb0:	e048      	b.n	f044 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    efb2:	7ebb      	ldrb	r3, [r7, #26]
    efb4:	b25b      	sxtb	r3, r3
    efb6:	2b00      	cmp	r3, #0
    efb8:	da0f      	bge.n	efda <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    efba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    efbe:	7eb9      	ldrb	r1, [r7, #26]
    efc0:	6a3a      	ldr	r2, [r7, #32]
    efc2:	4413      	add	r3, r2
    efc4:	460a      	mov	r2, r1
    efc6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    efc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    efcc:	6a3a      	ldr	r2, [r7, #32]
    efce:	4413      	add	r3, r2
    efd0:	789b      	ldrb	r3, [r3, #2]
    efd2:	4618      	mov	r0, r3
    efd4:	4b20      	ldr	r3, [pc, #128]	; (f058 <cdcdf_acm_enable+0x164>)
    efd6:	4798      	blx	r3
    efd8:	e007      	b.n	efea <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    efda:	7eba      	ldrb	r2, [r7, #26]
    efdc:	6a3b      	ldr	r3, [r7, #32]
    efde:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    efe0:	6a3b      	ldr	r3, [r7, #32]
    efe2:	791b      	ldrb	r3, [r3, #4]
    efe4:	4618      	mov	r0, r3
    efe6:	4b1c      	ldr	r3, [pc, #112]	; (f058 <cdcdf_acm_enable+0x164>)
    efe8:	4798      	blx	r3
			}
			desc->sod = ep;
    efea:	683b      	ldr	r3, [r7, #0]
    efec:	6aba      	ldr	r2, [r7, #40]	; 0x28
    efee:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    eff0:	683b      	ldr	r3, [r7, #0]
    eff2:	681b      	ldr	r3, [r3, #0]
    eff4:	4618      	mov	r0, r3
    eff6:	4b19      	ldr	r3, [pc, #100]	; (f05c <cdcdf_acm_enable+0x168>)
    eff8:	4798      	blx	r3
    effa:	4602      	mov	r2, r0
    effc:	683b      	ldr	r3, [r7, #0]
    effe:	685b      	ldr	r3, [r3, #4]
    f000:	4619      	mov	r1, r3
    f002:	4610      	mov	r0, r2
    f004:	4b16      	ldr	r3, [pc, #88]	; (f060 <cdcdf_acm_enable+0x16c>)
    f006:	4798      	blx	r3
    f008:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    f00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f00c:	2b00      	cmp	r3, #0
    f00e:	d1b7      	bne.n	ef80 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    f010:	683b      	ldr	r3, [r7, #0]
    f012:	681b      	ldr	r3, [r3, #0]
    f014:	4618      	mov	r0, r3
    f016:	4b11      	ldr	r3, [pc, #68]	; (f05c <cdcdf_acm_enable+0x168>)
    f018:	4798      	blx	r3
    f01a:	683b      	ldr	r3, [r7, #0]
    f01c:	685b      	ldr	r3, [r3, #4]
    f01e:	2204      	movs	r2, #4
    f020:	4619      	mov	r1, r3
    f022:	4b0a      	ldr	r3, [pc, #40]	; (f04c <cdcdf_acm_enable+0x158>)
    f024:	4798      	blx	r3
    f026:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    f028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f02c:	3301      	adds	r3, #1
    f02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f036:	2b01      	cmp	r3, #1
    f038:	f67f af6b 	bls.w	ef12 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    f03c:	4b09      	ldr	r3, [pc, #36]	; (f064 <cdcdf_acm_enable+0x170>)
    f03e:	2201      	movs	r2, #1
    f040:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f042:	2300      	movs	r3, #0
}
    f044:	4618      	mov	r0, r3
    f046:	3730      	adds	r7, #48	; 0x30
    f048:	46bd      	mov	sp, r7
    f04a:	bd80      	pop	{r7, pc}
    f04c:	000102b5 	.word	0x000102b5
    f050:	0000ee8f 	.word	0x0000ee8f
    f054:	00005e59 	.word	0x00005e59
    f058:	00005f45 	.word	0x00005f45
    f05c:	0000eed1 	.word	0x0000eed1
    f060:	00010311 	.word	0x00010311
    f064:	2000381c 	.word	0x2000381c

0000f068 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f068:	b580      	push	{r7, lr}
    f06a:	b088      	sub	sp, #32
    f06c:	af00      	add	r7, sp, #0
    f06e:	6078      	str	r0, [r7, #4]
    f070:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f072:	687b      	ldr	r3, [r7, #4]
    f074:	689b      	ldr	r3, [r3, #8]
    f076:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    f078:	683b      	ldr	r3, [r7, #0]
    f07a:	2b00      	cmp	r3, #0
    f07c:	d00c      	beq.n	f098 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    f07e:	683b      	ldr	r3, [r7, #0]
    f080:	681b      	ldr	r3, [r3, #0]
    f082:	795b      	ldrb	r3, [r3, #5]
    f084:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    f086:	7c7b      	ldrb	r3, [r7, #17]
    f088:	2b02      	cmp	r3, #2
    f08a:	d005      	beq.n	f098 <cdcdf_acm_disable+0x30>
    f08c:	7c7b      	ldrb	r3, [r7, #17]
    f08e:	2b0a      	cmp	r3, #10
    f090:	d002      	beq.n	f098 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    f092:	f06f 0309 	mvn.w	r3, #9
    f096:	e035      	b.n	f104 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    f098:	2300      	movs	r3, #0
    f09a:	77fb      	strb	r3, [r7, #31]
    f09c:	e01f      	b.n	f0de <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    f09e:	7ffb      	ldrb	r3, [r7, #31]
    f0a0:	69ba      	ldr	r2, [r7, #24]
    f0a2:	5cd3      	ldrb	r3, [r2, r3]
    f0a4:	2bff      	cmp	r3, #255	; 0xff
    f0a6:	d016      	beq.n	f0d6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    f0a8:	7ffb      	ldrb	r3, [r7, #31]
    f0aa:	69ba      	ldr	r2, [r7, #24]
    f0ac:	21ff      	movs	r1, #255	; 0xff
    f0ae:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    f0b0:	7ffb      	ldrb	r3, [r7, #31]
    f0b2:	69ba      	ldr	r2, [r7, #24]
    f0b4:	4413      	add	r3, r2
    f0b6:	789b      	ldrb	r3, [r3, #2]
    f0b8:	2bff      	cmp	r3, #255	; 0xff
    f0ba:	d00d      	beq.n	f0d8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    f0bc:	7ffb      	ldrb	r3, [r7, #31]
    f0be:	69ba      	ldr	r2, [r7, #24]
    f0c0:	4413      	add	r3, r2
    f0c2:	789b      	ldrb	r3, [r3, #2]
    f0c4:	4618      	mov	r0, r3
    f0c6:	4b11      	ldr	r3, [pc, #68]	; (f10c <cdcdf_acm_disable+0xa4>)
    f0c8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    f0ca:	7ffb      	ldrb	r3, [r7, #31]
    f0cc:	69ba      	ldr	r2, [r7, #24]
    f0ce:	4413      	add	r3, r2
    f0d0:	22ff      	movs	r2, #255	; 0xff
    f0d2:	709a      	strb	r2, [r3, #2]
    f0d4:	e000      	b.n	f0d8 <cdcdf_acm_disable+0x70>
			continue;
    f0d6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    f0d8:	7ffb      	ldrb	r3, [r7, #31]
    f0da:	3301      	adds	r3, #1
    f0dc:	77fb      	strb	r3, [r7, #31]
    f0de:	7ffb      	ldrb	r3, [r7, #31]
    f0e0:	2b01      	cmp	r3, #1
    f0e2:	d9dc      	bls.n	f09e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    f0e4:	69bb      	ldr	r3, [r7, #24]
    f0e6:	791b      	ldrb	r3, [r3, #4]
    f0e8:	2bff      	cmp	r3, #255	; 0xff
    f0ea:	d007      	beq.n	f0fc <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    f0ec:	69bb      	ldr	r3, [r7, #24]
    f0ee:	791b      	ldrb	r3, [r3, #4]
    f0f0:	4618      	mov	r0, r3
    f0f2:	4b06      	ldr	r3, [pc, #24]	; (f10c <cdcdf_acm_disable+0xa4>)
    f0f4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    f0f6:	69bb      	ldr	r3, [r7, #24]
    f0f8:	22ff      	movs	r2, #255	; 0xff
    f0fa:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    f0fc:	4b04      	ldr	r3, [pc, #16]	; (f110 <cdcdf_acm_disable+0xa8>)
    f0fe:	2200      	movs	r2, #0
    f100:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f102:	2300      	movs	r3, #0
}
    f104:	4618      	mov	r0, r3
    f106:	3720      	adds	r7, #32
    f108:	46bd      	mov	sp, r7
    f10a:	bd80      	pop	{r7, pc}
    f10c:	00005ef5 	.word	0x00005ef5
    f110:	2000381c 	.word	0x2000381c

0000f114 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    f114:	b580      	push	{r7, lr}
    f116:	b084      	sub	sp, #16
    f118:	af00      	add	r7, sp, #0
    f11a:	60f8      	str	r0, [r7, #12]
    f11c:	460b      	mov	r3, r1
    f11e:	607a      	str	r2, [r7, #4]
    f120:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    f122:	7afb      	ldrb	r3, [r7, #11]
    f124:	2b01      	cmp	r3, #1
    f126:	d009      	beq.n	f13c <cdcdf_acm_ctrl+0x28>
    f128:	2b02      	cmp	r3, #2
    f12a:	d00d      	beq.n	f148 <cdcdf_acm_ctrl+0x34>
    f12c:	2b00      	cmp	r3, #0
    f12e:	d10e      	bne.n	f14e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    f130:	6879      	ldr	r1, [r7, #4]
    f132:	68f8      	ldr	r0, [r7, #12]
    f134:	4b09      	ldr	r3, [pc, #36]	; (f15c <cdcdf_acm_ctrl+0x48>)
    f136:	4798      	blx	r3
    f138:	4603      	mov	r3, r0
    f13a:	e00a      	b.n	f152 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    f13c:	6879      	ldr	r1, [r7, #4]
    f13e:	68f8      	ldr	r0, [r7, #12]
    f140:	4b07      	ldr	r3, [pc, #28]	; (f160 <cdcdf_acm_ctrl+0x4c>)
    f142:	4798      	blx	r3
    f144:	4603      	mov	r3, r0
    f146:	e004      	b.n	f152 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    f148:	f06f 031a 	mvn.w	r3, #26
    f14c:	e001      	b.n	f152 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    f14e:	f06f 030c 	mvn.w	r3, #12
	}
}
    f152:	4618      	mov	r0, r3
    f154:	3710      	adds	r7, #16
    f156:	46bd      	mov	sp, r7
    f158:	bd80      	pop	{r7, pc}
    f15a:	bf00      	nop
    f15c:	0000eef5 	.word	0x0000eef5
    f160:	0000f069 	.word	0x0000f069

0000f164 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f164:	b590      	push	{r4, r7, lr}
    f166:	b087      	sub	sp, #28
    f168:	af00      	add	r7, sp, #0
    f16a:	4603      	mov	r3, r0
    f16c:	6039      	str	r1, [r7, #0]
    f16e:	71fb      	strb	r3, [r7, #7]
    f170:	4613      	mov	r3, r2
    f172:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    f174:	683b      	ldr	r3, [r7, #0]
    f176:	799a      	ldrb	r2, [r3, #6]
    f178:	79db      	ldrb	r3, [r3, #7]
    f17a:	021b      	lsls	r3, r3, #8
    f17c:	4313      	orrs	r3, r2
    f17e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    f180:	4b2b      	ldr	r3, [pc, #172]	; (f230 <cdcdf_acm_set_req+0xcc>)
    f182:	4798      	blx	r3
    f184:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    f186:	683b      	ldr	r3, [r7, #0]
    f188:	785b      	ldrb	r3, [r3, #1]
    f18a:	2b20      	cmp	r3, #32
    f18c:	d002      	beq.n	f194 <cdcdf_acm_set_req+0x30>
    f18e:	2b22      	cmp	r3, #34	; 0x22
    f190:	d034      	beq.n	f1fc <cdcdf_acm_set_req+0x98>
    f192:	e046      	b.n	f222 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f194:	8afb      	ldrh	r3, [r7, #22]
    f196:	2b07      	cmp	r3, #7
    f198:	d002      	beq.n	f1a0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    f19a:	f04f 33ff 	mov.w	r3, #4294967295
    f19e:	e042      	b.n	f226 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    f1a0:	79bb      	ldrb	r3, [r7, #6]
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	d107      	bne.n	f1b6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    f1a6:	8afa      	ldrh	r2, [r7, #22]
    f1a8:	79f8      	ldrb	r0, [r7, #7]
    f1aa:	2300      	movs	r3, #0
    f1ac:	6939      	ldr	r1, [r7, #16]
    f1ae:	4c21      	ldr	r4, [pc, #132]	; (f234 <cdcdf_acm_set_req+0xd0>)
    f1b0:	47a0      	blx	r4
    f1b2:	4603      	mov	r3, r0
    f1b4:	e037      	b.n	f226 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    f1b6:	693a      	ldr	r2, [r7, #16]
    f1b8:	f107 0308 	add.w	r3, r7, #8
    f1bc:	6810      	ldr	r0, [r2, #0]
    f1be:	6018      	str	r0, [r3, #0]
    f1c0:	8891      	ldrh	r1, [r2, #4]
    f1c2:	7992      	ldrb	r2, [r2, #6]
    f1c4:	8099      	strh	r1, [r3, #4]
    f1c6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    f1c8:	4b1b      	ldr	r3, [pc, #108]	; (f238 <cdcdf_acm_set_req+0xd4>)
    f1ca:	681b      	ldr	r3, [r3, #0]
    f1cc:	2b00      	cmp	r3, #0
    f1ce:	d008      	beq.n	f1e2 <cdcdf_acm_set_req+0x7e>
    f1d0:	4b19      	ldr	r3, [pc, #100]	; (f238 <cdcdf_acm_set_req+0xd4>)
    f1d2:	681b      	ldr	r3, [r3, #0]
    f1d4:	f107 0208 	add.w	r2, r7, #8
    f1d8:	4610      	mov	r0, r2
    f1da:	4798      	blx	r3
    f1dc:	4603      	mov	r3, r0
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d00a      	beq.n	f1f8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    f1e2:	4b16      	ldr	r3, [pc, #88]	; (f23c <cdcdf_acm_set_req+0xd8>)
    f1e4:	f107 0208 	add.w	r2, r7, #8
    f1e8:	e892 0003 	ldmia.w	r2, {r0, r1}
    f1ec:	6018      	str	r0, [r3, #0]
    f1ee:	3304      	adds	r3, #4
    f1f0:	8019      	strh	r1, [r3, #0]
    f1f2:	3302      	adds	r3, #2
    f1f4:	0c0a      	lsrs	r2, r1, #16
    f1f6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    f1f8:	2300      	movs	r3, #0
    f1fa:	e014      	b.n	f226 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    f1fc:	2300      	movs	r3, #0
    f1fe:	2200      	movs	r2, #0
    f200:	2100      	movs	r1, #0
    f202:	2000      	movs	r0, #0
    f204:	4c0b      	ldr	r4, [pc, #44]	; (f234 <cdcdf_acm_set_req+0xd0>)
    f206:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    f208:	4b0d      	ldr	r3, [pc, #52]	; (f240 <cdcdf_acm_set_req+0xdc>)
    f20a:	681b      	ldr	r3, [r3, #0]
    f20c:	2b00      	cmp	r3, #0
    f20e:	d006      	beq.n	f21e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    f210:	4b0b      	ldr	r3, [pc, #44]	; (f240 <cdcdf_acm_set_req+0xdc>)
    f212:	681b      	ldr	r3, [r3, #0]
    f214:	683a      	ldr	r2, [r7, #0]
    f216:	8852      	ldrh	r2, [r2, #2]
    f218:	b292      	uxth	r2, r2
    f21a:	4610      	mov	r0, r2
    f21c:	4798      	blx	r3
		}
		return ERR_NONE;
    f21e:	2300      	movs	r3, #0
    f220:	e001      	b.n	f226 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    f222:	f06f 030c 	mvn.w	r3, #12
	}
}
    f226:	4618      	mov	r0, r3
    f228:	371c      	adds	r7, #28
    f22a:	46bd      	mov	sp, r7
    f22c:	bd90      	pop	{r4, r7, pc}
    f22e:	bf00      	nop
    f230:	000101b1 	.word	0x000101b1
    f234:	00010025 	.word	0x00010025
    f238:	20003830 	.word	0x20003830
    f23c:	20003824 	.word	0x20003824
    f240:	2000382c 	.word	0x2000382c

0000f244 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f244:	b590      	push	{r4, r7, lr}
    f246:	b085      	sub	sp, #20
    f248:	af00      	add	r7, sp, #0
    f24a:	4603      	mov	r3, r0
    f24c:	6039      	str	r1, [r7, #0]
    f24e:	71fb      	strb	r3, [r7, #7]
    f250:	4613      	mov	r3, r2
    f252:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    f254:	683b      	ldr	r3, [r7, #0]
    f256:	799a      	ldrb	r2, [r3, #6]
    f258:	79db      	ldrb	r3, [r3, #7]
    f25a:	021b      	lsls	r3, r3, #8
    f25c:	4313      	orrs	r3, r2
    f25e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    f260:	79bb      	ldrb	r3, [r7, #6]
    f262:	2b01      	cmp	r3, #1
    f264:	d101      	bne.n	f26a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    f266:	2300      	movs	r3, #0
    f268:	e013      	b.n	f292 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    f26a:	683b      	ldr	r3, [r7, #0]
    f26c:	785b      	ldrb	r3, [r3, #1]
    f26e:	2b21      	cmp	r3, #33	; 0x21
    f270:	d10d      	bne.n	f28e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f272:	89fb      	ldrh	r3, [r7, #14]
    f274:	2b07      	cmp	r3, #7
    f276:	d002      	beq.n	f27e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    f278:	f04f 33ff 	mov.w	r3, #4294967295
    f27c:	e009      	b.n	f292 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    f27e:	89fa      	ldrh	r2, [r7, #14]
    f280:	79f8      	ldrb	r0, [r7, #7]
    f282:	2300      	movs	r3, #0
    f284:	4905      	ldr	r1, [pc, #20]	; (f29c <cdcdf_acm_get_req+0x58>)
    f286:	4c06      	ldr	r4, [pc, #24]	; (f2a0 <cdcdf_acm_get_req+0x5c>)
    f288:	47a0      	blx	r4
    f28a:	4603      	mov	r3, r0
    f28c:	e001      	b.n	f292 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    f28e:	f06f 030c 	mvn.w	r3, #12
	}
}
    f292:	4618      	mov	r0, r3
    f294:	3714      	adds	r7, #20
    f296:	46bd      	mov	sp, r7
    f298:	bd90      	pop	{r4, r7, pc}
    f29a:	bf00      	nop
    f29c:	20003824 	.word	0x20003824
    f2a0:	00010025 	.word	0x00010025

0000f2a4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f2a4:	b580      	push	{r7, lr}
    f2a6:	b082      	sub	sp, #8
    f2a8:	af00      	add	r7, sp, #0
    f2aa:	4603      	mov	r3, r0
    f2ac:	6039      	str	r1, [r7, #0]
    f2ae:	71fb      	strb	r3, [r7, #7]
    f2b0:	4613      	mov	r3, r2
    f2b2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    f2b4:	683b      	ldr	r3, [r7, #0]
    f2b6:	781b      	ldrb	r3, [r3, #0]
    f2b8:	095b      	lsrs	r3, r3, #5
    f2ba:	b2db      	uxtb	r3, r3
    f2bc:	f003 0303 	and.w	r3, r3, #3
    f2c0:	2b01      	cmp	r3, #1
    f2c2:	d002      	beq.n	f2ca <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    f2c4:	f06f 0309 	mvn.w	r3, #9
    f2c8:	e026      	b.n	f318 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    f2ca:	683b      	ldr	r3, [r7, #0]
    f2cc:	889b      	ldrh	r3, [r3, #4]
    f2ce:	b29a      	uxth	r2, r3
    f2d0:	4b13      	ldr	r3, [pc, #76]	; (f320 <cdcdf_acm_req+0x7c>)
    f2d2:	781b      	ldrb	r3, [r3, #0]
    f2d4:	b29b      	uxth	r3, r3
    f2d6:	429a      	cmp	r2, r3
    f2d8:	d007      	beq.n	f2ea <cdcdf_acm_req+0x46>
    f2da:	683b      	ldr	r3, [r7, #0]
    f2dc:	889b      	ldrh	r3, [r3, #4]
    f2de:	b29a      	uxth	r2, r3
    f2e0:	4b0f      	ldr	r3, [pc, #60]	; (f320 <cdcdf_acm_req+0x7c>)
    f2e2:	785b      	ldrb	r3, [r3, #1]
    f2e4:	b29b      	uxth	r3, r3
    f2e6:	429a      	cmp	r2, r3
    f2e8:	d114      	bne.n	f314 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    f2ea:	683b      	ldr	r3, [r7, #0]
    f2ec:	781b      	ldrb	r3, [r3, #0]
    f2ee:	b25b      	sxtb	r3, r3
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	da07      	bge.n	f304 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    f2f4:	79ba      	ldrb	r2, [r7, #6]
    f2f6:	79fb      	ldrb	r3, [r7, #7]
    f2f8:	6839      	ldr	r1, [r7, #0]
    f2fa:	4618      	mov	r0, r3
    f2fc:	4b09      	ldr	r3, [pc, #36]	; (f324 <cdcdf_acm_req+0x80>)
    f2fe:	4798      	blx	r3
    f300:	4603      	mov	r3, r0
    f302:	e009      	b.n	f318 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    f304:	79ba      	ldrb	r2, [r7, #6]
    f306:	79fb      	ldrb	r3, [r7, #7]
    f308:	6839      	ldr	r1, [r7, #0]
    f30a:	4618      	mov	r0, r3
    f30c:	4b06      	ldr	r3, [pc, #24]	; (f328 <cdcdf_acm_req+0x84>)
    f30e:	4798      	blx	r3
    f310:	4603      	mov	r3, r0
    f312:	e001      	b.n	f318 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    f314:	f06f 0309 	mvn.w	r3, #9
	}
}
    f318:	4618      	mov	r0, r3
    f31a:	3708      	adds	r7, #8
    f31c:	46bd      	mov	sp, r7
    f31e:	bd80      	pop	{r7, pc}
    f320:	2000381c 	.word	0x2000381c
    f324:	0000f245 	.word	0x0000f245
    f328:	0000f165 	.word	0x0000f165

0000f32c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    f32c:	b580      	push	{r7, lr}
    f32e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    f330:	4b0b      	ldr	r3, [pc, #44]	; (f360 <cdcdf_acm_init+0x34>)
    f332:	4798      	blx	r3
    f334:	4603      	mov	r3, r0
    f336:	2b01      	cmp	r3, #1
    f338:	d902      	bls.n	f340 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    f33a:	f06f 0310 	mvn.w	r3, #16
    f33e:	e00d      	b.n	f35c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    f340:	4b08      	ldr	r3, [pc, #32]	; (f364 <cdcdf_acm_init+0x38>)
    f342:	4a09      	ldr	r2, [pc, #36]	; (f368 <cdcdf_acm_init+0x3c>)
    f344:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    f346:	4b07      	ldr	r3, [pc, #28]	; (f364 <cdcdf_acm_init+0x38>)
    f348:	4a08      	ldr	r2, [pc, #32]	; (f36c <cdcdf_acm_init+0x40>)
    f34a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    f34c:	4805      	ldr	r0, [pc, #20]	; (f364 <cdcdf_acm_init+0x38>)
    f34e:	4b08      	ldr	r3, [pc, #32]	; (f370 <cdcdf_acm_init+0x44>)
    f350:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    f352:	4908      	ldr	r1, [pc, #32]	; (f374 <cdcdf_acm_init+0x48>)
    f354:	2001      	movs	r0, #1
    f356:	4b08      	ldr	r3, [pc, #32]	; (f378 <cdcdf_acm_init+0x4c>)
    f358:	4798      	blx	r3
	return ERR_NONE;
    f35a:	2300      	movs	r3, #0
}
    f35c:	4618      	mov	r0, r3
    f35e:	bd80      	pop	{r7, pc}
    f360:	000101c9 	.word	0x000101c9
    f364:	20003810 	.word	0x20003810
    f368:	0000f115 	.word	0x0000f115
    f36c:	2000381c 	.word	0x2000381c
    f370:	00010131 	.word	0x00010131
    f374:	20000170 	.word	0x20000170
    f378:	00010061 	.word	0x00010061

0000f37c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    f37c:	b590      	push	{r4, r7, lr}
    f37e:	b083      	sub	sp, #12
    f380:	af00      	add	r7, sp, #0
    f382:	6078      	str	r0, [r7, #4]
    f384:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f386:	4b0b      	ldr	r3, [pc, #44]	; (f3b4 <cdcdf_acm_read+0x38>)
    f388:	4798      	blx	r3
    f38a:	4603      	mov	r3, r0
    f38c:	f083 0301 	eor.w	r3, r3, #1
    f390:	b2db      	uxtb	r3, r3
    f392:	2b00      	cmp	r3, #0
    f394:	d002      	beq.n	f39c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    f396:	f06f 0310 	mvn.w	r3, #16
    f39a:	e007      	b.n	f3ac <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    f39c:	4b06      	ldr	r3, [pc, #24]	; (f3b8 <cdcdf_acm_read+0x3c>)
    f39e:	7918      	ldrb	r0, [r3, #4]
    f3a0:	2300      	movs	r3, #0
    f3a2:	683a      	ldr	r2, [r7, #0]
    f3a4:	6879      	ldr	r1, [r7, #4]
    f3a6:	4c05      	ldr	r4, [pc, #20]	; (f3bc <cdcdf_acm_read+0x40>)
    f3a8:	47a0      	blx	r4
    f3aa:	4603      	mov	r3, r0
}
    f3ac:	4618      	mov	r0, r3
    f3ae:	370c      	adds	r7, #12
    f3b0:	46bd      	mov	sp, r7
    f3b2:	bd90      	pop	{r4, r7, pc}
    f3b4:	0000f4a1 	.word	0x0000f4a1
    f3b8:	2000381c 	.word	0x2000381c
    f3bc:	00010025 	.word	0x00010025

0000f3c0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    f3c0:	b590      	push	{r4, r7, lr}
    f3c2:	b083      	sub	sp, #12
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	6078      	str	r0, [r7, #4]
    f3c8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f3ca:	4b0b      	ldr	r3, [pc, #44]	; (f3f8 <cdcdf_acm_write+0x38>)
    f3cc:	4798      	blx	r3
    f3ce:	4603      	mov	r3, r0
    f3d0:	f083 0301 	eor.w	r3, r3, #1
    f3d4:	b2db      	uxtb	r3, r3
    f3d6:	2b00      	cmp	r3, #0
    f3d8:	d002      	beq.n	f3e0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    f3da:	f06f 0310 	mvn.w	r3, #16
    f3de:	e007      	b.n	f3f0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    f3e0:	4b06      	ldr	r3, [pc, #24]	; (f3fc <cdcdf_acm_write+0x3c>)
    f3e2:	78d8      	ldrb	r0, [r3, #3]
    f3e4:	2301      	movs	r3, #1
    f3e6:	683a      	ldr	r2, [r7, #0]
    f3e8:	6879      	ldr	r1, [r7, #4]
    f3ea:	4c05      	ldr	r4, [pc, #20]	; (f400 <cdcdf_acm_write+0x40>)
    f3ec:	47a0      	blx	r4
    f3ee:	4603      	mov	r3, r0
}
    f3f0:	4618      	mov	r0, r3
    f3f2:	370c      	adds	r7, #12
    f3f4:	46bd      	mov	sp, r7
    f3f6:	bd90      	pop	{r4, r7, pc}
    f3f8:	0000f4a1 	.word	0x0000f4a1
    f3fc:	2000381c 	.word	0x2000381c
    f400:	00010025 	.word	0x00010025

0000f404 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    f404:	b580      	push	{r7, lr}
    f406:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    f408:	4b05      	ldr	r3, [pc, #20]	; (f420 <cdcdf_acm_stop_xfer+0x1c>)
    f40a:	78db      	ldrb	r3, [r3, #3]
    f40c:	4618      	mov	r0, r3
    f40e:	4b05      	ldr	r3, [pc, #20]	; (f424 <cdcdf_acm_stop_xfer+0x20>)
    f410:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    f412:	4b03      	ldr	r3, [pc, #12]	; (f420 <cdcdf_acm_stop_xfer+0x1c>)
    f414:	791b      	ldrb	r3, [r3, #4]
    f416:	4618      	mov	r0, r3
    f418:	4b02      	ldr	r3, [pc, #8]	; (f424 <cdcdf_acm_stop_xfer+0x20>)
    f41a:	4798      	blx	r3
}
    f41c:	bf00      	nop
    f41e:	bd80      	pop	{r7, pc}
    f420:	2000381c 	.word	0x2000381c
    f424:	0000611d 	.word	0x0000611d

0000f428 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    f428:	b580      	push	{r7, lr}
    f42a:	b082      	sub	sp, #8
    f42c:	af00      	add	r7, sp, #0
    f42e:	4603      	mov	r3, r0
    f430:	6039      	str	r1, [r7, #0]
    f432:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    f434:	79fb      	ldrb	r3, [r7, #7]
    f436:	2b03      	cmp	r3, #3
    f438:	d822      	bhi.n	f480 <cdcdf_acm_register_callback+0x58>
    f43a:	a201      	add	r2, pc, #4	; (adr r2, f440 <cdcdf_acm_register_callback+0x18>)
    f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f440:	0000f451 	.word	0x0000f451
    f444:	0000f461 	.word	0x0000f461
    f448:	0000f471 	.word	0x0000f471
    f44c:	0000f479 	.word	0x0000f479
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    f450:	4b0f      	ldr	r3, [pc, #60]	; (f490 <cdcdf_acm_register_callback+0x68>)
    f452:	791b      	ldrb	r3, [r3, #4]
    f454:	683a      	ldr	r2, [r7, #0]
    f456:	2102      	movs	r1, #2
    f458:	4618      	mov	r0, r3
    f45a:	4b0e      	ldr	r3, [pc, #56]	; (f494 <cdcdf_acm_register_callback+0x6c>)
    f45c:	4798      	blx	r3
		break;
    f45e:	e012      	b.n	f486 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    f460:	4b0b      	ldr	r3, [pc, #44]	; (f490 <cdcdf_acm_register_callback+0x68>)
    f462:	78db      	ldrb	r3, [r3, #3]
    f464:	683a      	ldr	r2, [r7, #0]
    f466:	2102      	movs	r1, #2
    f468:	4618      	mov	r0, r3
    f46a:	4b0a      	ldr	r3, [pc, #40]	; (f494 <cdcdf_acm_register_callback+0x6c>)
    f46c:	4798      	blx	r3
		break;
    f46e:	e00a      	b.n	f486 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    f470:	4a09      	ldr	r2, [pc, #36]	; (f498 <cdcdf_acm_register_callback+0x70>)
    f472:	683b      	ldr	r3, [r7, #0]
    f474:	6013      	str	r3, [r2, #0]
		break;
    f476:	e006      	b.n	f486 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    f478:	4a08      	ldr	r2, [pc, #32]	; (f49c <cdcdf_acm_register_callback+0x74>)
    f47a:	683b      	ldr	r3, [r7, #0]
    f47c:	6013      	str	r3, [r2, #0]
		break;
    f47e:	e002      	b.n	f486 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    f480:	f06f 030c 	mvn.w	r3, #12
    f484:	e000      	b.n	f488 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    f486:	2300      	movs	r3, #0
}
    f488:	4618      	mov	r0, r3
    f48a:	3708      	adds	r7, #8
    f48c:	46bd      	mov	sp, r7
    f48e:	bd80      	pop	{r7, pc}
    f490:	2000381c 	.word	0x2000381c
    f494:	00006249 	.word	0x00006249
    f498:	20003830 	.word	0x20003830
    f49c:	2000382c 	.word	0x2000382c

0000f4a0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    f4a0:	b480      	push	{r7}
    f4a2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    f4a4:	4b03      	ldr	r3, [pc, #12]	; (f4b4 <cdcdf_acm_is_enabled+0x14>)
    f4a6:	795b      	ldrb	r3, [r3, #5]
}
    f4a8:	4618      	mov	r0, r3
    f4aa:	46bd      	mov	sp, r7
    f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    f4b0:	4770      	bx	lr
    f4b2:	bf00      	nop
    f4b4:	2000381c 	.word	0x2000381c

0000f4b8 <usb_get_u16>:
{
    f4b8:	b480      	push	{r7}
    f4ba:	b083      	sub	sp, #12
    f4bc:	af00      	add	r7, sp, #0
    f4be:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f4c0:	687b      	ldr	r3, [r7, #4]
    f4c2:	781b      	ldrb	r3, [r3, #0]
    f4c4:	b29a      	uxth	r2, r3
    f4c6:	687b      	ldr	r3, [r7, #4]
    f4c8:	3301      	adds	r3, #1
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	b29b      	uxth	r3, r3
    f4ce:	021b      	lsls	r3, r3, #8
    f4d0:	b29b      	uxth	r3, r3
    f4d2:	4413      	add	r3, r2
    f4d4:	b29b      	uxth	r3, r3
}
    f4d6:	4618      	mov	r0, r3
    f4d8:	370c      	adds	r7, #12
    f4da:	46bd      	mov	sp, r7
    f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    f4e0:	4770      	bx	lr

0000f4e2 <usb_desc_len>:
{
    f4e2:	b480      	push	{r7}
    f4e4:	b083      	sub	sp, #12
    f4e6:	af00      	add	r7, sp, #0
    f4e8:	6078      	str	r0, [r7, #4]
	return desc[0];
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	781b      	ldrb	r3, [r3, #0]
}
    f4ee:	4618      	mov	r0, r3
    f4f0:	370c      	adds	r7, #12
    f4f2:	46bd      	mov	sp, r7
    f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    f4f8:	4770      	bx	lr
	...

0000f4fc <usb_desc_next>:
{
    f4fc:	b580      	push	{r7, lr}
    f4fe:	b082      	sub	sp, #8
    f500:	af00      	add	r7, sp, #0
    f502:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f504:	6878      	ldr	r0, [r7, #4]
    f506:	4b05      	ldr	r3, [pc, #20]	; (f51c <usb_desc_next+0x20>)
    f508:	4798      	blx	r3
    f50a:	4603      	mov	r3, r0
    f50c:	461a      	mov	r2, r3
    f50e:	687b      	ldr	r3, [r7, #4]
    f510:	4413      	add	r3, r2
}
    f512:	4618      	mov	r0, r3
    f514:	3708      	adds	r7, #8
    f516:	46bd      	mov	sp, r7
    f518:	bd80      	pop	{r7, pc}
    f51a:	bf00      	nop
    f51c:	0000f4e3 	.word	0x0000f4e3

0000f520 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    f520:	b580      	push	{r7, lr}
    f522:	b082      	sub	sp, #8
    f524:	af00      	add	r7, sp, #0
    f526:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f528:	687b      	ldr	r3, [r7, #4]
    f52a:	3302      	adds	r3, #2
    f52c:	4618      	mov	r0, r3
    f52e:	4b03      	ldr	r3, [pc, #12]	; (f53c <usb_cfg_desc_total_len+0x1c>)
    f530:	4798      	blx	r3
    f532:	4603      	mov	r3, r0
}
    f534:	4618      	mov	r0, r3
    f536:	3708      	adds	r7, #8
    f538:	46bd      	mov	sp, r7
    f53a:	bd80      	pop	{r7, pc}
    f53c:	0000f4b9 	.word	0x0000f4b9

0000f540 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    f540:	b590      	push	{r4, r7, lr}
    f542:	b085      	sub	sp, #20
    f544:	af00      	add	r7, sp, #0
    f546:	4603      	mov	r3, r0
    f548:	6039      	str	r1, [r7, #0]
    f54a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    f54c:	2300      	movs	r3, #0
    f54e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    f550:	683b      	ldr	r3, [r7, #0]
    f552:	799a      	ldrb	r2, [r3, #6]
    f554:	79db      	ldrb	r3, [r3, #7]
    f556:	021b      	lsls	r3, r3, #8
    f558:	4313      	orrs	r3, r2
    f55a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    f55c:	897b      	ldrh	r3, [r7, #10]
    f55e:	2b12      	cmp	r3, #18
    f560:	d901      	bls.n	f566 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    f562:	2312      	movs	r3, #18
    f564:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    f566:	68fb      	ldr	r3, [r7, #12]
    f568:	2b00      	cmp	r3, #0
    f56a:	d10a      	bne.n	f582 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    f56c:	4b0f      	ldr	r3, [pc, #60]	; (f5ac <usbdc_get_dev_desc+0x6c>)
    f56e:	681b      	ldr	r3, [r3, #0]
    f570:	6818      	ldr	r0, [r3, #0]
    f572:	4b0e      	ldr	r3, [pc, #56]	; (f5ac <usbdc_get_dev_desc+0x6c>)
    f574:	681b      	ldr	r3, [r3, #0]
    f576:	685b      	ldr	r3, [r3, #4]
    f578:	2201      	movs	r2, #1
    f57a:	4619      	mov	r1, r3
    f57c:	4b0c      	ldr	r3, [pc, #48]	; (f5b0 <usbdc_get_dev_desc+0x70>)
    f57e:	4798      	blx	r3
    f580:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    f582:	68fb      	ldr	r3, [r7, #12]
    f584:	2b00      	cmp	r3, #0
    f586:	d101      	bne.n	f58c <usbdc_get_dev_desc+0x4c>
		return false;
    f588:	2300      	movs	r3, #0
    f58a:	e00b      	b.n	f5a4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    f58c:	897a      	ldrh	r2, [r7, #10]
    f58e:	79f8      	ldrb	r0, [r7, #7]
    f590:	2300      	movs	r3, #0
    f592:	68f9      	ldr	r1, [r7, #12]
    f594:	4c07      	ldr	r4, [pc, #28]	; (f5b4 <usbdc_get_dev_desc+0x74>)
    f596:	47a0      	blx	r4
    f598:	4603      	mov	r3, r0
    f59a:	2b00      	cmp	r3, #0
    f59c:	d001      	beq.n	f5a2 <usbdc_get_dev_desc+0x62>
		return false;
    f59e:	2300      	movs	r3, #0
    f5a0:	e000      	b.n	f5a4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    f5a2:	2301      	movs	r3, #1
}
    f5a4:	4618      	mov	r0, r3
    f5a6:	3714      	adds	r7, #20
    f5a8:	46bd      	mov	sp, r7
    f5aa:	bd90      	pop	{r4, r7, pc}
    f5ac:	20003834 	.word	0x20003834
    f5b0:	000102b5 	.word	0x000102b5
    f5b4:	00010025 	.word	0x00010025

0000f5b8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    f5b8:	b590      	push	{r4, r7, lr}
    f5ba:	b087      	sub	sp, #28
    f5bc:	af00      	add	r7, sp, #0
    f5be:	4603      	mov	r3, r0
    f5c0:	6039      	str	r1, [r7, #0]
    f5c2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    f5c4:	2300      	movs	r3, #0
    f5c6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    f5c8:	683b      	ldr	r3, [r7, #0]
    f5ca:	799a      	ldrb	r2, [r3, #6]
    f5cc:	79db      	ldrb	r3, [r3, #7]
    f5ce:	021b      	lsls	r3, r3, #8
    f5d0:	4313      	orrs	r3, r2
    f5d2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    f5d4:	683b      	ldr	r3, [r7, #0]
    f5d6:	885b      	ldrh	r3, [r3, #2]
    f5d8:	b29b      	uxth	r3, r3
    f5da:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f5dc:	8a7a      	ldrh	r2, [r7, #18]
    f5de:	4b1e      	ldr	r3, [pc, #120]	; (f658 <usbdc_get_cfg_desc+0xa0>)
    f5e0:	7f1b      	ldrb	r3, [r3, #28]
    f5e2:	3b01      	subs	r3, #1
    f5e4:	4013      	ands	r3, r2
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	bf0c      	ite	eq
    f5ea:	2301      	moveq	r3, #1
    f5ec:	2300      	movne	r3, #0
    f5ee:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f5f0:	697b      	ldr	r3, [r7, #20]
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	d10c      	bne.n	f610 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    f5f6:	4b18      	ldr	r3, [pc, #96]	; (f658 <usbdc_get_cfg_desc+0xa0>)
    f5f8:	681b      	ldr	r3, [r3, #0]
    f5fa:	6818      	ldr	r0, [r3, #0]
    f5fc:	4b16      	ldr	r3, [pc, #88]	; (f658 <usbdc_get_cfg_desc+0xa0>)
    f5fe:	681b      	ldr	r3, [r3, #0]
    f600:	6859      	ldr	r1, [r3, #4]
    f602:	7c3b      	ldrb	r3, [r7, #16]
    f604:	3301      	adds	r3, #1
    f606:	b2db      	uxtb	r3, r3
    f608:	461a      	mov	r2, r3
    f60a:	4b14      	ldr	r3, [pc, #80]	; (f65c <usbdc_get_cfg_desc+0xa4>)
    f60c:	4798      	blx	r3
    f60e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    f610:	697b      	ldr	r3, [r7, #20]
    f612:	2b00      	cmp	r3, #0
    f614:	d101      	bne.n	f61a <usbdc_get_cfg_desc+0x62>
		return false;
    f616:	2300      	movs	r3, #0
    f618:	e019      	b.n	f64e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    f61a:	6978      	ldr	r0, [r7, #20]
    f61c:	4b10      	ldr	r3, [pc, #64]	; (f660 <usbdc_get_cfg_desc+0xa8>)
    f61e:	4798      	blx	r3
    f620:	4603      	mov	r3, r0
    f622:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    f624:	8a7a      	ldrh	r2, [r7, #18]
    f626:	89fb      	ldrh	r3, [r7, #14]
    f628:	429a      	cmp	r2, r3
    f62a:	d802      	bhi.n	f632 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    f62c:	2300      	movs	r3, #0
    f62e:	747b      	strb	r3, [r7, #17]
    f630:	e001      	b.n	f636 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    f632:	89fb      	ldrh	r3, [r7, #14]
    f634:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    f636:	8a7a      	ldrh	r2, [r7, #18]
    f638:	7c7b      	ldrb	r3, [r7, #17]
    f63a:	79f8      	ldrb	r0, [r7, #7]
    f63c:	6979      	ldr	r1, [r7, #20]
    f63e:	4c09      	ldr	r4, [pc, #36]	; (f664 <usbdc_get_cfg_desc+0xac>)
    f640:	47a0      	blx	r4
    f642:	4603      	mov	r3, r0
    f644:	2b00      	cmp	r3, #0
    f646:	d001      	beq.n	f64c <usbdc_get_cfg_desc+0x94>
		return false;
    f648:	2300      	movs	r3, #0
    f64a:	e000      	b.n	f64e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    f64c:	2301      	movs	r3, #1
}
    f64e:	4618      	mov	r0, r3
    f650:	371c      	adds	r7, #28
    f652:	46bd      	mov	sp, r7
    f654:	bd90      	pop	{r4, r7, pc}
    f656:	bf00      	nop
    f658:	20003834 	.word	0x20003834
    f65c:	00010375 	.word	0x00010375
    f660:	0000f521 	.word	0x0000f521
    f664:	00010025 	.word	0x00010025

0000f668 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    f668:	b590      	push	{r4, r7, lr}
    f66a:	b085      	sub	sp, #20
    f66c:	af00      	add	r7, sp, #0
    f66e:	4603      	mov	r3, r0
    f670:	6039      	str	r1, [r7, #0]
    f672:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    f674:	683b      	ldr	r3, [r7, #0]
    f676:	799a      	ldrb	r2, [r3, #6]
    f678:	79db      	ldrb	r3, [r3, #7]
    f67a:	021b      	lsls	r3, r3, #8
    f67c:	4313      	orrs	r3, r2
    f67e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    f680:	683b      	ldr	r3, [r7, #0]
    f682:	885b      	ldrh	r3, [r3, #2]
    f684:	b29b      	uxth	r3, r3
    f686:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f688:	89fa      	ldrh	r2, [r7, #14]
    f68a:	4b1a      	ldr	r3, [pc, #104]	; (f6f4 <usbdc_get_str_desc+0x8c>)
    f68c:	7f1b      	ldrb	r3, [r3, #28]
    f68e:	3b01      	subs	r3, #1
    f690:	4013      	ands	r3, r2
    f692:	2b00      	cmp	r3, #0
    f694:	bf0c      	ite	eq
    f696:	2301      	moveq	r3, #1
    f698:	2300      	movne	r3, #0
    f69a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    f69c:	4b15      	ldr	r3, [pc, #84]	; (f6f4 <usbdc_get_str_desc+0x8c>)
    f69e:	681b      	ldr	r3, [r3, #0]
    f6a0:	6818      	ldr	r0, [r3, #0]
    f6a2:	4b14      	ldr	r3, [pc, #80]	; (f6f4 <usbdc_get_str_desc+0x8c>)
    f6a4:	681b      	ldr	r3, [r3, #0]
    f6a6:	685b      	ldr	r3, [r3, #4]
    f6a8:	7b3a      	ldrb	r2, [r7, #12]
    f6aa:	4619      	mov	r1, r3
    f6ac:	4b12      	ldr	r3, [pc, #72]	; (f6f8 <usbdc_get_str_desc+0x90>)
    f6ae:	4798      	blx	r3
    f6b0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    f6b2:	68bb      	ldr	r3, [r7, #8]
    f6b4:	2b00      	cmp	r3, #0
    f6b6:	d101      	bne.n	f6bc <usbdc_get_str_desc+0x54>
		return false;
    f6b8:	2300      	movs	r3, #0
    f6ba:	e017      	b.n	f6ec <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    f6bc:	68bb      	ldr	r3, [r7, #8]
    f6be:	781b      	ldrb	r3, [r3, #0]
    f6c0:	b29b      	uxth	r3, r3
    f6c2:	89fa      	ldrh	r2, [r7, #14]
    f6c4:	429a      	cmp	r2, r3
    f6c6:	d802      	bhi.n	f6ce <usbdc_get_str_desc+0x66>
		need_zlp = false;
    f6c8:	2300      	movs	r3, #0
    f6ca:	737b      	strb	r3, [r7, #13]
    f6cc:	e002      	b.n	f6d4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    f6ce:	68bb      	ldr	r3, [r7, #8]
    f6d0:	781b      	ldrb	r3, [r3, #0]
    f6d2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    f6d4:	89fa      	ldrh	r2, [r7, #14]
    f6d6:	7b7b      	ldrb	r3, [r7, #13]
    f6d8:	79f8      	ldrb	r0, [r7, #7]
    f6da:	68b9      	ldr	r1, [r7, #8]
    f6dc:	4c07      	ldr	r4, [pc, #28]	; (f6fc <usbdc_get_str_desc+0x94>)
    f6de:	47a0      	blx	r4
    f6e0:	4603      	mov	r3, r0
    f6e2:	2b00      	cmp	r3, #0
    f6e4:	d001      	beq.n	f6ea <usbdc_get_str_desc+0x82>
		return false;
    f6e6:	2300      	movs	r3, #0
    f6e8:	e000      	b.n	f6ec <usbdc_get_str_desc+0x84>
	}
	return true;
    f6ea:	2301      	movs	r3, #1
}
    f6ec:	4618      	mov	r0, r3
    f6ee:	3714      	adds	r7, #20
    f6f0:	46bd      	mov	sp, r7
    f6f2:	bd90      	pop	{r4, r7, pc}
    f6f4:	20003834 	.word	0x20003834
    f6f8:	000103ed 	.word	0x000103ed
    f6fc:	00010025 	.word	0x00010025

0000f700 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    f700:	b580      	push	{r7, lr}
    f702:	b084      	sub	sp, #16
    f704:	af00      	add	r7, sp, #0
    f706:	4603      	mov	r3, r0
    f708:	6039      	str	r1, [r7, #0]
    f70a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    f70c:	683b      	ldr	r3, [r7, #0]
    f70e:	885b      	ldrh	r3, [r3, #2]
    f710:	b29b      	uxth	r3, r3
    f712:	0a1b      	lsrs	r3, r3, #8
    f714:	b29b      	uxth	r3, r3
    f716:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    f718:	7bfb      	ldrb	r3, [r7, #15]
    f71a:	2b02      	cmp	r3, #2
    f71c:	d00d      	beq.n	f73a <usbdc_get_desc_req+0x3a>
    f71e:	2b03      	cmp	r3, #3
    f720:	d012      	beq.n	f748 <usbdc_get_desc_req+0x48>
    f722:	2b01      	cmp	r3, #1
    f724:	d002      	beq.n	f72c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    f726:	bf00      	nop
	}
	return false;
    f728:	2300      	movs	r3, #0
    f72a:	e013      	b.n	f754 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    f72c:	79fb      	ldrb	r3, [r7, #7]
    f72e:	6839      	ldr	r1, [r7, #0]
    f730:	4618      	mov	r0, r3
    f732:	4b0a      	ldr	r3, [pc, #40]	; (f75c <usbdc_get_desc_req+0x5c>)
    f734:	4798      	blx	r3
    f736:	4603      	mov	r3, r0
    f738:	e00c      	b.n	f754 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    f73a:	79fb      	ldrb	r3, [r7, #7]
    f73c:	6839      	ldr	r1, [r7, #0]
    f73e:	4618      	mov	r0, r3
    f740:	4b07      	ldr	r3, [pc, #28]	; (f760 <usbdc_get_desc_req+0x60>)
    f742:	4798      	blx	r3
    f744:	4603      	mov	r3, r0
    f746:	e005      	b.n	f754 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    f748:	79fb      	ldrb	r3, [r7, #7]
    f74a:	6839      	ldr	r1, [r7, #0]
    f74c:	4618      	mov	r0, r3
    f74e:	4b05      	ldr	r3, [pc, #20]	; (f764 <usbdc_get_desc_req+0x64>)
    f750:	4798      	blx	r3
    f752:	4603      	mov	r3, r0
}
    f754:	4618      	mov	r0, r3
    f756:	3710      	adds	r7, #16
    f758:	46bd      	mov	sp, r7
    f75a:	bd80      	pop	{r7, pc}
    f75c:	0000f541 	.word	0x0000f541
    f760:	0000f5b9 	.word	0x0000f5b9
    f764:	0000f669 	.word	0x0000f669

0000f768 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    f768:	b590      	push	{r4, r7, lr}
    f76a:	b085      	sub	sp, #20
    f76c:	af00      	add	r7, sp, #0
    f76e:	4603      	mov	r3, r0
    f770:	6039      	str	r1, [r7, #0]
    f772:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f774:	683b      	ldr	r3, [r7, #0]
    f776:	781b      	ldrb	r3, [r3, #0]
    f778:	f003 031f 	and.w	r3, r3, #31
    f77c:	2b00      	cmp	r3, #0
    f77e:	db1b      	blt.n	f7b8 <usbdc_get_status_req+0x50>
    f780:	2b01      	cmp	r3, #1
    f782:	dd02      	ble.n	f78a <usbdc_get_status_req+0x22>
    f784:	2b02      	cmp	r3, #2
    f786:	d003      	beq.n	f790 <usbdc_get_status_req+0x28>
    f788:	e016      	b.n	f7b8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    f78a:	2300      	movs	r3, #0
    f78c:	60fb      	str	r3, [r7, #12]
		break;
    f78e:	e015      	b.n	f7bc <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    f790:	683b      	ldr	r3, [r7, #0]
    f792:	889b      	ldrh	r3, [r3, #4]
    f794:	b29b      	uxth	r3, r3
    f796:	b2db      	uxtb	r3, r3
    f798:	2102      	movs	r1, #2
    f79a:	4618      	mov	r0, r3
    f79c:	4b0f      	ldr	r3, [pc, #60]	; (f7dc <usbdc_get_status_req+0x74>)
    f79e:	4798      	blx	r3
    f7a0:	4603      	mov	r3, r0
    f7a2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    f7a4:	68fb      	ldr	r3, [r7, #12]
    f7a6:	2b00      	cmp	r3, #0
    f7a8:	da01      	bge.n	f7ae <usbdc_get_status_req+0x46>
			return false;
    f7aa:	2300      	movs	r3, #0
    f7ac:	e012      	b.n	f7d4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    f7ae:	68fb      	ldr	r3, [r7, #12]
    f7b0:	f003 0301 	and.w	r3, r3, #1
    f7b4:	60fb      	str	r3, [r7, #12]
		break;
    f7b6:	e001      	b.n	f7bc <usbdc_get_status_req+0x54>
	default:
		return false;
    f7b8:	2300      	movs	r3, #0
    f7ba:	e00b      	b.n	f7d4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    f7bc:	4b08      	ldr	r3, [pc, #32]	; (f7e0 <usbdc_get_status_req+0x78>)
    f7be:	695b      	ldr	r3, [r3, #20]
    f7c0:	89ba      	ldrh	r2, [r7, #12]
    f7c2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    f7c4:	4b06      	ldr	r3, [pc, #24]	; (f7e0 <usbdc_get_status_req+0x78>)
    f7c6:	6959      	ldr	r1, [r3, #20]
    f7c8:	79f8      	ldrb	r0, [r7, #7]
    f7ca:	2300      	movs	r3, #0
    f7cc:	2202      	movs	r2, #2
    f7ce:	4c05      	ldr	r4, [pc, #20]	; (f7e4 <usbdc_get_status_req+0x7c>)
    f7d0:	47a0      	blx	r4
	return true;
    f7d2:	2301      	movs	r3, #1
}
    f7d4:	4618      	mov	r0, r3
    f7d6:	3714      	adds	r7, #20
    f7d8:	46bd      	mov	sp, r7
    f7da:	bd90      	pop	{r4, r7, pc}
    f7dc:	000061f5 	.word	0x000061f5
    f7e0:	20003834 	.word	0x20003834
    f7e4:	00010025 	.word	0x00010025

0000f7e8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    f7e8:	b590      	push	{r4, r7, lr}
    f7ea:	b085      	sub	sp, #20
    f7ec:	af00      	add	r7, sp, #0
    f7ee:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f7f0:	4b1f      	ldr	r3, [pc, #124]	; (f870 <usbdc_get_interface+0x88>)
    f7f2:	691b      	ldr	r3, [r3, #16]
    f7f4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    f7f6:	4b1e      	ldr	r3, [pc, #120]	; (f870 <usbdc_get_interface+0x88>)
    f7f8:	7f5b      	ldrb	r3, [r3, #29]
    f7fa:	461a      	mov	r2, r3
    f7fc:	687b      	ldr	r3, [r7, #4]
    f7fe:	889b      	ldrh	r3, [r3, #4]
    f800:	b29b      	uxth	r3, r3
    f802:	fa42 f303 	asr.w	r3, r2, r3
    f806:	f003 0301 	and.w	r3, r3, #1
    f80a:	2b00      	cmp	r3, #0
    f80c:	d128      	bne.n	f860 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    f80e:	4b18      	ldr	r3, [pc, #96]	; (f870 <usbdc_get_interface+0x88>)
    f810:	695b      	ldr	r3, [r3, #20]
    f812:	2200      	movs	r2, #0
    f814:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f816:	4b16      	ldr	r3, [pc, #88]	; (f870 <usbdc_get_interface+0x88>)
    f818:	6959      	ldr	r1, [r3, #20]
    f81a:	2300      	movs	r3, #0
    f81c:	2201      	movs	r2, #1
    f81e:	2000      	movs	r0, #0
    f820:	4c14      	ldr	r4, [pc, #80]	; (f874 <usbdc_get_interface+0x8c>)
    f822:	47a0      	blx	r4
		return true;
    f824:	2301      	movs	r3, #1
    f826:	e01f      	b.n	f868 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    f828:	68fb      	ldr	r3, [r7, #12]
    f82a:	685b      	ldr	r3, [r3, #4]
    f82c:	687a      	ldr	r2, [r7, #4]
    f82e:	2102      	movs	r1, #2
    f830:	68f8      	ldr	r0, [r7, #12]
    f832:	4798      	blx	r3
    f834:	60b8      	str	r0, [r7, #8]
    f836:	68bb      	ldr	r3, [r7, #8]
    f838:	2b00      	cmp	r3, #0
    f83a:	da03      	bge.n	f844 <usbdc_get_interface+0x5c>
			func = func->next;
    f83c:	68fb      	ldr	r3, [r7, #12]
    f83e:	681b      	ldr	r3, [r3, #0]
    f840:	60fb      	str	r3, [r7, #12]
    f842:	e00d      	b.n	f860 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    f844:	4b0a      	ldr	r3, [pc, #40]	; (f870 <usbdc_get_interface+0x88>)
    f846:	695b      	ldr	r3, [r3, #20]
    f848:	68ba      	ldr	r2, [r7, #8]
    f84a:	b2d2      	uxtb	r2, r2
    f84c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f84e:	4b08      	ldr	r3, [pc, #32]	; (f870 <usbdc_get_interface+0x88>)
    f850:	6959      	ldr	r1, [r3, #20]
    f852:	2300      	movs	r3, #0
    f854:	2201      	movs	r2, #1
    f856:	2000      	movs	r0, #0
    f858:	4c06      	ldr	r4, [pc, #24]	; (f874 <usbdc_get_interface+0x8c>)
    f85a:	47a0      	blx	r4
			return true;
    f85c:	2301      	movs	r3, #1
    f85e:	e003      	b.n	f868 <usbdc_get_interface+0x80>
	while (NULL != func) {
    f860:	68fb      	ldr	r3, [r7, #12]
    f862:	2b00      	cmp	r3, #0
    f864:	d1e0      	bne.n	f828 <usbdc_get_interface+0x40>
		}
	}
	return false;
    f866:	2300      	movs	r3, #0
}
    f868:	4618      	mov	r0, r3
    f86a:	3714      	adds	r7, #20
    f86c:	46bd      	mov	sp, r7
    f86e:	bd90      	pop	{r4, r7, pc}
    f870:	20003834 	.word	0x20003834
    f874:	00010025 	.word	0x00010025

0000f878 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    f878:	b590      	push	{r4, r7, lr}
    f87a:	b083      	sub	sp, #12
    f87c:	af00      	add	r7, sp, #0
    f87e:	4603      	mov	r3, r0
    f880:	6039      	str	r1, [r7, #0]
    f882:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f884:	683b      	ldr	r3, [r7, #0]
    f886:	785b      	ldrb	r3, [r3, #1]
    f888:	2b0a      	cmp	r3, #10
    f88a:	d83a      	bhi.n	f902 <usbdc_get_req+0x8a>
    f88c:	a201      	add	r2, pc, #4	; (adr r2, f894 <usbdc_get_req+0x1c>)
    f88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f892:	bf00      	nop
    f894:	0000f8eb 	.word	0x0000f8eb
    f898:	0000f903 	.word	0x0000f903
    f89c:	0000f903 	.word	0x0000f903
    f8a0:	0000f903 	.word	0x0000f903
    f8a4:	0000f903 	.word	0x0000f903
    f8a8:	0000f903 	.word	0x0000f903
    f8ac:	0000f8c1 	.word	0x0000f8c1
    f8b0:	0000f903 	.word	0x0000f903
    f8b4:	0000f8cf 	.word	0x0000f8cf
    f8b8:	0000f903 	.word	0x0000f903
    f8bc:	0000f8f9 	.word	0x0000f8f9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    f8c0:	79fb      	ldrb	r3, [r7, #7]
    f8c2:	6839      	ldr	r1, [r7, #0]
    f8c4:	4618      	mov	r0, r3
    f8c6:	4b11      	ldr	r3, [pc, #68]	; (f90c <usbdc_get_req+0x94>)
    f8c8:	4798      	blx	r3
    f8ca:	4603      	mov	r3, r0
    f8cc:	e01a      	b.n	f904 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    f8ce:	4b10      	ldr	r3, [pc, #64]	; (f910 <usbdc_get_req+0x98>)
    f8d0:	695b      	ldr	r3, [r3, #20]
    f8d2:	4a0f      	ldr	r2, [pc, #60]	; (f910 <usbdc_get_req+0x98>)
    f8d4:	7ed2      	ldrb	r2, [r2, #27]
    f8d6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    f8d8:	4b0d      	ldr	r3, [pc, #52]	; (f910 <usbdc_get_req+0x98>)
    f8da:	6959      	ldr	r1, [r3, #20]
    f8dc:	79f8      	ldrb	r0, [r7, #7]
    f8de:	2300      	movs	r3, #0
    f8e0:	2201      	movs	r2, #1
    f8e2:	4c0c      	ldr	r4, [pc, #48]	; (f914 <usbdc_get_req+0x9c>)
    f8e4:	47a0      	blx	r4
		return true;
    f8e6:	2301      	movs	r3, #1
    f8e8:	e00c      	b.n	f904 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    f8ea:	79fb      	ldrb	r3, [r7, #7]
    f8ec:	6839      	ldr	r1, [r7, #0]
    f8ee:	4618      	mov	r0, r3
    f8f0:	4b09      	ldr	r3, [pc, #36]	; (f918 <usbdc_get_req+0xa0>)
    f8f2:	4798      	blx	r3
    f8f4:	4603      	mov	r3, r0
    f8f6:	e005      	b.n	f904 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    f8f8:	6838      	ldr	r0, [r7, #0]
    f8fa:	4b08      	ldr	r3, [pc, #32]	; (f91c <usbdc_get_req+0xa4>)
    f8fc:	4798      	blx	r3
    f8fe:	4603      	mov	r3, r0
    f900:	e000      	b.n	f904 <usbdc_get_req+0x8c>
	default:
		return false;
    f902:	2300      	movs	r3, #0
	}
}
    f904:	4618      	mov	r0, r3
    f906:	370c      	adds	r7, #12
    f908:	46bd      	mov	sp, r7
    f90a:	bd90      	pop	{r4, r7, pc}
    f90c:	0000f701 	.word	0x0000f701
    f910:	20003834 	.word	0x20003834
    f914:	00010025 	.word	0x00010025
    f918:	0000f769 	.word	0x0000f769
    f91c:	0000f7e9 	.word	0x0000f7e9

0000f920 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f920:	b590      	push	{r4, r7, lr}
    f922:	b083      	sub	sp, #12
    f924:	af00      	add	r7, sp, #0
    f926:	4603      	mov	r3, r0
    f928:	6039      	str	r1, [r7, #0]
    f92a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f92c:	683b      	ldr	r3, [r7, #0]
    f92e:	781b      	ldrb	r3, [r3, #0]
    f930:	f003 031f 	and.w	r3, r3, #31
    f934:	2b02      	cmp	r3, #2
    f936:	d116      	bne.n	f966 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f938:	683b      	ldr	r3, [r7, #0]
    f93a:	88db      	ldrh	r3, [r3, #6]
    f93c:	b29b      	uxth	r3, r3
    f93e:	2b00      	cmp	r3, #0
    f940:	d001      	beq.n	f946 <usbdc_clear_ftr_req+0x26>
			return false;
    f942:	2300      	movs	r3, #0
    f944:	e010      	b.n	f968 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    f946:	683b      	ldr	r3, [r7, #0]
    f948:	889b      	ldrh	r3, [r3, #4]
    f94a:	b29b      	uxth	r3, r3
    f94c:	b2db      	uxtb	r3, r3
    f94e:	2100      	movs	r1, #0
    f950:	4618      	mov	r0, r3
    f952:	4b07      	ldr	r3, [pc, #28]	; (f970 <usbdc_clear_ftr_req+0x50>)
    f954:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f956:	79f8      	ldrb	r0, [r7, #7]
    f958:	2301      	movs	r3, #1
    f95a:	2200      	movs	r2, #0
    f95c:	2100      	movs	r1, #0
    f95e:	4c05      	ldr	r4, [pc, #20]	; (f974 <usbdc_clear_ftr_req+0x54>)
    f960:	47a0      	blx	r4
		return true;
    f962:	2301      	movs	r3, #1
    f964:	e000      	b.n	f968 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    f966:	2300      	movs	r3, #0
	}
}
    f968:	4618      	mov	r0, r3
    f96a:	370c      	adds	r7, #12
    f96c:	46bd      	mov	sp, r7
    f96e:	bd90      	pop	{r4, r7, pc}
    f970:	000061f5 	.word	0x000061f5
    f974:	00010025 	.word	0x00010025

0000f978 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f978:	b590      	push	{r4, r7, lr}
    f97a:	b083      	sub	sp, #12
    f97c:	af00      	add	r7, sp, #0
    f97e:	4603      	mov	r3, r0
    f980:	6039      	str	r1, [r7, #0]
    f982:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f984:	683b      	ldr	r3, [r7, #0]
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	f003 031f 	and.w	r3, r3, #31
    f98c:	2b02      	cmp	r3, #2
    f98e:	d116      	bne.n	f9be <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f990:	683b      	ldr	r3, [r7, #0]
    f992:	88db      	ldrh	r3, [r3, #6]
    f994:	b29b      	uxth	r3, r3
    f996:	2b00      	cmp	r3, #0
    f998:	d001      	beq.n	f99e <usbdc_set_ftr_req+0x26>
			return false;
    f99a:	2300      	movs	r3, #0
    f99c:	e010      	b.n	f9c0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    f99e:	683b      	ldr	r3, [r7, #0]
    f9a0:	889b      	ldrh	r3, [r3, #4]
    f9a2:	b29b      	uxth	r3, r3
    f9a4:	b2db      	uxtb	r3, r3
    f9a6:	2101      	movs	r1, #1
    f9a8:	4618      	mov	r0, r3
    f9aa:	4b07      	ldr	r3, [pc, #28]	; (f9c8 <usbdc_set_ftr_req+0x50>)
    f9ac:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f9ae:	79f8      	ldrb	r0, [r7, #7]
    f9b0:	2301      	movs	r3, #1
    f9b2:	2200      	movs	r2, #0
    f9b4:	2100      	movs	r1, #0
    f9b6:	4c05      	ldr	r4, [pc, #20]	; (f9cc <usbdc_set_ftr_req+0x54>)
    f9b8:	47a0      	blx	r4
		return true;
    f9ba:	2301      	movs	r3, #1
    f9bc:	e000      	b.n	f9c0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    f9be:	2300      	movs	r3, #0
	}
}
    f9c0:	4618      	mov	r0, r3
    f9c2:	370c      	adds	r7, #12
    f9c4:	46bd      	mov	sp, r7
    f9c6:	bd90      	pop	{r4, r7, pc}
    f9c8:	000061f5 	.word	0x000061f5
    f9cc:	00010025 	.word	0x00010025

0000f9d0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    f9d0:	b580      	push	{r7, lr}
    f9d2:	b082      	sub	sp, #8
    f9d4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f9d6:	4b0a      	ldr	r3, [pc, #40]	; (fa00 <usbdc_unconfig+0x30>)
    f9d8:	691b      	ldr	r3, [r3, #16]
    f9da:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f9dc:	e008      	b.n	f9f0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    f9de:	687b      	ldr	r3, [r7, #4]
    f9e0:	685b      	ldr	r3, [r3, #4]
    f9e2:	2200      	movs	r2, #0
    f9e4:	2101      	movs	r1, #1
    f9e6:	6878      	ldr	r0, [r7, #4]
    f9e8:	4798      	blx	r3
		func = func->next;
    f9ea:	687b      	ldr	r3, [r7, #4]
    f9ec:	681b      	ldr	r3, [r3, #0]
    f9ee:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f9f0:	687b      	ldr	r3, [r7, #4]
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d1f3      	bne.n	f9de <usbdc_unconfig+0xe>
	}
}
    f9f6:	bf00      	nop
    f9f8:	3708      	adds	r7, #8
    f9fa:	46bd      	mov	sp, r7
    f9fc:	bd80      	pop	{r7, pc}
    f9fe:	bf00      	nop
    fa00:	20003834 	.word	0x20003834

0000fa04 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    fa04:	b580      	push	{r7, lr}
    fa06:	b088      	sub	sp, #32
    fa08:	af00      	add	r7, sp, #0
    fa0a:	4603      	mov	r3, r0
    fa0c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    fa0e:	2300      	movs	r3, #0
    fa10:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    fa12:	23ff      	movs	r3, #255	; 0xff
    fa14:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    fa16:	79fb      	ldrb	r3, [r7, #7]
    fa18:	2b00      	cmp	r3, #0
    fa1a:	d103      	bne.n	fa24 <usbdc_set_config+0x20>
		usbdc_unconfig();
    fa1c:	4b2e      	ldr	r3, [pc, #184]	; (fad8 <usbdc_set_config+0xd4>)
    fa1e:	4798      	blx	r3
		return true;
    fa20:	2301      	movs	r3, #1
    fa22:	e055      	b.n	fad0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    fa24:	69bb      	ldr	r3, [r7, #24]
    fa26:	2b00      	cmp	r3, #0
    fa28:	d10a      	bne.n	fa40 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    fa2a:	4b2c      	ldr	r3, [pc, #176]	; (fadc <usbdc_set_config+0xd8>)
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	6818      	ldr	r0, [r3, #0]
    fa30:	4b2a      	ldr	r3, [pc, #168]	; (fadc <usbdc_set_config+0xd8>)
    fa32:	681b      	ldr	r3, [r3, #0]
    fa34:	685b      	ldr	r3, [r3, #4]
    fa36:	79fa      	ldrb	r2, [r7, #7]
    fa38:	4619      	mov	r1, r3
    fa3a:	4b29      	ldr	r3, [pc, #164]	; (fae0 <usbdc_set_config+0xdc>)
    fa3c:	4798      	blx	r3
    fa3e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    fa40:	69bb      	ldr	r3, [r7, #24]
    fa42:	2b00      	cmp	r3, #0
    fa44:	d101      	bne.n	fa4a <usbdc_set_config+0x46>
		return false;
    fa46:	2300      	movs	r3, #0
    fa48:	e042      	b.n	fad0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    fa4a:	69b8      	ldr	r0, [r7, #24]
    fa4c:	4b25      	ldr	r3, [pc, #148]	; (fae4 <usbdc_set_config+0xe0>)
    fa4e:	4798      	blx	r3
    fa50:	4603      	mov	r3, r0
    fa52:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    fa54:	8abb      	ldrh	r3, [r7, #20]
    fa56:	69ba      	ldr	r2, [r7, #24]
    fa58:	4413      	add	r3, r2
    fa5a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    fa5c:	693b      	ldr	r3, [r7, #16]
    fa5e:	2204      	movs	r2, #4
    fa60:	4619      	mov	r1, r3
    fa62:	69b8      	ldr	r0, [r7, #24]
    fa64:	4b20      	ldr	r3, [pc, #128]	; (fae8 <usbdc_set_config+0xe4>)
    fa66:	4798      	blx	r3
    fa68:	4603      	mov	r3, r0
    fa6a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    fa6c:	e02c      	b.n	fac8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    fa6e:	68fb      	ldr	r3, [r7, #12]
    fa70:	3302      	adds	r3, #2
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	7dfa      	ldrb	r2, [r7, #23]
    fa76:	429a      	cmp	r2, r3
    fa78:	d018      	beq.n	faac <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    fa7a:	68fb      	ldr	r3, [r7, #12]
    fa7c:	789b      	ldrb	r3, [r3, #2]
    fa7e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    fa80:	4b16      	ldr	r3, [pc, #88]	; (fadc <usbdc_set_config+0xd8>)
    fa82:	691b      	ldr	r3, [r3, #16]
    fa84:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fa86:	e00c      	b.n	faa2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    fa88:	69fb      	ldr	r3, [r7, #28]
    fa8a:	685b      	ldr	r3, [r3, #4]
    fa8c:	f107 020c 	add.w	r2, r7, #12
    fa90:	2100      	movs	r1, #0
    fa92:	69f8      	ldr	r0, [r7, #28]
    fa94:	4798      	blx	r3
    fa96:	4603      	mov	r3, r0
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d006      	beq.n	faaa <usbdc_set_config+0xa6>
					func = func->next;
    fa9c:	69fb      	ldr	r3, [r7, #28]
    fa9e:	681b      	ldr	r3, [r3, #0]
    faa0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    faa2:	69fb      	ldr	r3, [r7, #28]
    faa4:	2b00      	cmp	r3, #0
    faa6:	d1ef      	bne.n	fa88 <usbdc_set_config+0x84>
    faa8:	e000      	b.n	faac <usbdc_set_config+0xa8>
				} else {
					break;
    faaa:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    faac:	68fb      	ldr	r3, [r7, #12]
    faae:	4618      	mov	r0, r3
    fab0:	4b0e      	ldr	r3, [pc, #56]	; (faec <usbdc_set_config+0xe8>)
    fab2:	4798      	blx	r3
    fab4:	4603      	mov	r3, r0
    fab6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fab8:	68fb      	ldr	r3, [r7, #12]
    faba:	6939      	ldr	r1, [r7, #16]
    fabc:	2204      	movs	r2, #4
    fabe:	4618      	mov	r0, r3
    fac0:	4b09      	ldr	r3, [pc, #36]	; (fae8 <usbdc_set_config+0xe4>)
    fac2:	4798      	blx	r3
    fac4:	4603      	mov	r3, r0
    fac6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    fac8:	68fb      	ldr	r3, [r7, #12]
    faca:	2b00      	cmp	r3, #0
    facc:	d1cf      	bne.n	fa6e <usbdc_set_config+0x6a>
	}
	return true;
    face:	2301      	movs	r3, #1
}
    fad0:	4618      	mov	r0, r3
    fad2:	3720      	adds	r7, #32
    fad4:	46bd      	mov	sp, r7
    fad6:	bd80      	pop	{r7, pc}
    fad8:	0000f9d1 	.word	0x0000f9d1
    fadc:	20003834 	.word	0x20003834
    fae0:	00010375 	.word	0x00010375
    fae4:	0000f521 	.word	0x0000f521
    fae8:	000102b5 	.word	0x000102b5
    faec:	0000f4fd 	.word	0x0000f4fd

0000faf0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    faf0:	b580      	push	{r7, lr}
    faf2:	b082      	sub	sp, #8
    faf4:	af00      	add	r7, sp, #0
    faf6:	4603      	mov	r3, r0
    faf8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    fafa:	79fb      	ldrb	r3, [r7, #7]
    fafc:	4618      	mov	r0, r3
    fafe:	4b03      	ldr	r3, [pc, #12]	; (fb0c <usbdc_set_address+0x1c>)
    fb00:	4798      	blx	r3
}
    fb02:	bf00      	nop
    fb04:	3708      	adds	r7, #8
    fb06:	46bd      	mov	sp, r7
    fb08:	bd80      	pop	{r7, pc}
    fb0a:	bf00      	nop
    fb0c:	00005e11 	.word	0x00005e11

0000fb10 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    fb10:	b590      	push	{r4, r7, lr}
    fb12:	b087      	sub	sp, #28
    fb14:	af00      	add	r7, sp, #0
    fb16:	4603      	mov	r3, r0
    fb18:	460a      	mov	r2, r1
    fb1a:	80fb      	strh	r3, [r7, #6]
    fb1c:	4613      	mov	r3, r2
    fb1e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    fb20:	2300      	movs	r3, #0
    fb22:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    fb24:	693b      	ldr	r3, [r7, #16]
    fb26:	2b00      	cmp	r3, #0
    fb28:	d10b      	bne.n	fb42 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    fb2a:	4b43      	ldr	r3, [pc, #268]	; (fc38 <usbdc_set_interface+0x128>)
    fb2c:	681b      	ldr	r3, [r3, #0]
    fb2e:	6818      	ldr	r0, [r3, #0]
    fb30:	4b41      	ldr	r3, [pc, #260]	; (fc38 <usbdc_set_interface+0x128>)
    fb32:	681b      	ldr	r3, [r3, #0]
    fb34:	6859      	ldr	r1, [r3, #4]
    fb36:	4b40      	ldr	r3, [pc, #256]	; (fc38 <usbdc_set_interface+0x128>)
    fb38:	7edb      	ldrb	r3, [r3, #27]
    fb3a:	461a      	mov	r2, r3
    fb3c:	4b3f      	ldr	r3, [pc, #252]	; (fc3c <usbdc_set_interface+0x12c>)
    fb3e:	4798      	blx	r3
    fb40:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    fb42:	693b      	ldr	r3, [r7, #16]
    fb44:	2b00      	cmp	r3, #0
    fb46:	d101      	bne.n	fb4c <usbdc_set_interface+0x3c>
		return false;
    fb48:	2300      	movs	r3, #0
    fb4a:	e071      	b.n	fc30 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    fb4c:	693b      	ldr	r3, [r7, #16]
    fb4e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    fb50:	6938      	ldr	r0, [r7, #16]
    fb52:	4b3b      	ldr	r3, [pc, #236]	; (fc40 <usbdc_set_interface+0x130>)
    fb54:	4798      	blx	r3
    fb56:	4603      	mov	r3, r0
    fb58:	461a      	mov	r2, r3
    fb5a:	693b      	ldr	r3, [r7, #16]
    fb5c:	4413      	add	r3, r2
    fb5e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    fb60:	68bb      	ldr	r3, [r7, #8]
    fb62:	68f9      	ldr	r1, [r7, #12]
    fb64:	2204      	movs	r2, #4
    fb66:	4618      	mov	r0, r3
    fb68:	4b36      	ldr	r3, [pc, #216]	; (fc44 <usbdc_set_interface+0x134>)
    fb6a:	4798      	blx	r3
    fb6c:	6138      	str	r0, [r7, #16]
    fb6e:	693b      	ldr	r3, [r7, #16]
    fb70:	2b00      	cmp	r3, #0
    fb72:	d113      	bne.n	fb9c <usbdc_set_interface+0x8c>
		return false;
    fb74:	2300      	movs	r3, #0
    fb76:	e05b      	b.n	fc30 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    fb78:	68bb      	ldr	r3, [r7, #8]
    fb7a:	4618      	mov	r0, r3
    fb7c:	4b32      	ldr	r3, [pc, #200]	; (fc48 <usbdc_set_interface+0x138>)
    fb7e:	4798      	blx	r3
    fb80:	4603      	mov	r3, r0
    fb82:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fb84:	68bb      	ldr	r3, [r7, #8]
    fb86:	68f9      	ldr	r1, [r7, #12]
    fb88:	2204      	movs	r2, #4
    fb8a:	4618      	mov	r0, r3
    fb8c:	4b2d      	ldr	r3, [pc, #180]	; (fc44 <usbdc_set_interface+0x134>)
    fb8e:	4798      	blx	r3
    fb90:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    fb92:	693b      	ldr	r3, [r7, #16]
    fb94:	2b00      	cmp	r3, #0
    fb96:	d101      	bne.n	fb9c <usbdc_set_interface+0x8c>
			return false;
    fb98:	2300      	movs	r3, #0
    fb9a:	e049      	b.n	fc30 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    fb9c:	693b      	ldr	r3, [r7, #16]
    fb9e:	3302      	adds	r3, #2
    fba0:	781b      	ldrb	r3, [r3, #0]
    fba2:	b29b      	uxth	r3, r3
    fba4:	88ba      	ldrh	r2, [r7, #4]
    fba6:	429a      	cmp	r2, r3
    fba8:	d1e6      	bne.n	fb78 <usbdc_set_interface+0x68>
    fbaa:	693b      	ldr	r3, [r7, #16]
    fbac:	3303      	adds	r3, #3
    fbae:	781b      	ldrb	r3, [r3, #0]
    fbb0:	b29b      	uxth	r3, r3
    fbb2:	88fa      	ldrh	r2, [r7, #6]
    fbb4:	429a      	cmp	r2, r3
    fbb6:	d1df      	bne.n	fb78 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    fbb8:	693b      	ldr	r3, [r7, #16]
    fbba:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    fbbc:	4b1e      	ldr	r3, [pc, #120]	; (fc38 <usbdc_set_interface+0x128>)
    fbbe:	691b      	ldr	r3, [r3, #16]
    fbc0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    fbc2:	e031      	b.n	fc28 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    fbc4:	697b      	ldr	r3, [r7, #20]
    fbc6:	685b      	ldr	r3, [r3, #4]
    fbc8:	f107 0208 	add.w	r2, r7, #8
    fbcc:	2101      	movs	r1, #1
    fbce:	6978      	ldr	r0, [r7, #20]
    fbd0:	4798      	blx	r3
    fbd2:	4603      	mov	r3, r0
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d003      	beq.n	fbe0 <usbdc_set_interface+0xd0>
			func = func->next;
    fbd8:	697b      	ldr	r3, [r7, #20]
    fbda:	681b      	ldr	r3, [r3, #0]
    fbdc:	617b      	str	r3, [r7, #20]
    fbde:	e023      	b.n	fc28 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    fbe0:	697b      	ldr	r3, [r7, #20]
    fbe2:	685b      	ldr	r3, [r3, #4]
    fbe4:	f107 0208 	add.w	r2, r7, #8
    fbe8:	2100      	movs	r1, #0
    fbea:	6978      	ldr	r0, [r7, #20]
    fbec:	4798      	blx	r3
    fbee:	4603      	mov	r3, r0
    fbf0:	2b00      	cmp	r3, #0
    fbf2:	d117      	bne.n	fc24 <usbdc_set_interface+0x114>
			if (alt_set) {
    fbf4:	88fb      	ldrh	r3, [r7, #6]
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d00c      	beq.n	fc14 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    fbfa:	4b0f      	ldr	r3, [pc, #60]	; (fc38 <usbdc_set_interface+0x128>)
    fbfc:	7f5b      	ldrb	r3, [r3, #29]
    fbfe:	b25a      	sxtb	r2, r3
    fc00:	88bb      	ldrh	r3, [r7, #4]
    fc02:	2101      	movs	r1, #1
    fc04:	fa01 f303 	lsl.w	r3, r1, r3
    fc08:	b25b      	sxtb	r3, r3
    fc0a:	4313      	orrs	r3, r2
    fc0c:	b25b      	sxtb	r3, r3
    fc0e:	b2da      	uxtb	r2, r3
    fc10:	4b09      	ldr	r3, [pc, #36]	; (fc38 <usbdc_set_interface+0x128>)
    fc12:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    fc14:	2300      	movs	r3, #0
    fc16:	2200      	movs	r2, #0
    fc18:	2100      	movs	r1, #0
    fc1a:	2000      	movs	r0, #0
    fc1c:	4c0b      	ldr	r4, [pc, #44]	; (fc4c <usbdc_set_interface+0x13c>)
    fc1e:	47a0      	blx	r4
			return true;
    fc20:	2301      	movs	r3, #1
    fc22:	e005      	b.n	fc30 <usbdc_set_interface+0x120>
		} else {
			return false;
    fc24:	2300      	movs	r3, #0
    fc26:	e003      	b.n	fc30 <usbdc_set_interface+0x120>
	while (NULL != func) {
    fc28:	697b      	ldr	r3, [r7, #20]
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d1ca      	bne.n	fbc4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    fc2e:	2300      	movs	r3, #0
}
    fc30:	4618      	mov	r0, r3
    fc32:	371c      	adds	r7, #28
    fc34:	46bd      	mov	sp, r7
    fc36:	bd90      	pop	{r4, r7, pc}
    fc38:	20003834 	.word	0x20003834
    fc3c:	00010375 	.word	0x00010375
    fc40:	0000f521 	.word	0x0000f521
    fc44:	000102b5 	.word	0x000102b5
    fc48:	0000f4fd 	.word	0x0000f4fd
    fc4c:	00010025 	.word	0x00010025

0000fc50 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    fc50:	b590      	push	{r4, r7, lr}
    fc52:	b083      	sub	sp, #12
    fc54:	af00      	add	r7, sp, #0
    fc56:	4603      	mov	r3, r0
    fc58:	6039      	str	r1, [r7, #0]
    fc5a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    fc5c:	683b      	ldr	r3, [r7, #0]
    fc5e:	785b      	ldrb	r3, [r3, #1]
    fc60:	3b01      	subs	r3, #1
    fc62:	2b0a      	cmp	r3, #10
    fc64:	d85b      	bhi.n	fd1e <usbdc_set_req+0xce>
    fc66:	a201      	add	r2, pc, #4	; (adr r2, fc6c <usbdc_set_req+0x1c>)
    fc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fc6c:	0000fceb 	.word	0x0000fceb
    fc70:	0000fd1f 	.word	0x0000fd1f
    fc74:	0000fcf9 	.word	0x0000fcf9
    fc78:	0000fd1f 	.word	0x0000fd1f
    fc7c:	0000fc99 	.word	0x0000fc99
    fc80:	0000fd1f 	.word	0x0000fd1f
    fc84:	0000fd1f 	.word	0x0000fd1f
    fc88:	0000fd1f 	.word	0x0000fd1f
    fc8c:	0000fcb3 	.word	0x0000fcb3
    fc90:	0000fd1f 	.word	0x0000fd1f
    fc94:	0000fd07 	.word	0x0000fd07
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fc98:	79f8      	ldrb	r0, [r7, #7]
    fc9a:	2301      	movs	r3, #1
    fc9c:	2200      	movs	r2, #0
    fc9e:	2100      	movs	r1, #0
    fca0:	4c21      	ldr	r4, [pc, #132]	; (fd28 <usbdc_set_req+0xd8>)
    fca2:	47a0      	blx	r4
    fca4:	4603      	mov	r3, r0
    fca6:	2b00      	cmp	r3, #0
    fca8:	bf0c      	ite	eq
    fcaa:	2301      	moveq	r3, #1
    fcac:	2300      	movne	r3, #0
    fcae:	b2db      	uxtb	r3, r3
    fcb0:	e036      	b.n	fd20 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    fcb2:	683b      	ldr	r3, [r7, #0]
    fcb4:	885b      	ldrh	r3, [r3, #2]
    fcb6:	b29b      	uxth	r3, r3
    fcb8:	b2db      	uxtb	r3, r3
    fcba:	4618      	mov	r0, r3
    fcbc:	4b1b      	ldr	r3, [pc, #108]	; (fd2c <usbdc_set_req+0xdc>)
    fcbe:	4798      	blx	r3
    fcc0:	4603      	mov	r3, r0
    fcc2:	f083 0301 	eor.w	r3, r3, #1
    fcc6:	b2db      	uxtb	r3, r3
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d001      	beq.n	fcd0 <usbdc_set_req+0x80>
			return false;
    fccc:	2300      	movs	r3, #0
    fcce:	e027      	b.n	fd20 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fcd0:	79f8      	ldrb	r0, [r7, #7]
    fcd2:	2301      	movs	r3, #1
    fcd4:	2200      	movs	r2, #0
    fcd6:	2100      	movs	r1, #0
    fcd8:	4c13      	ldr	r4, [pc, #76]	; (fd28 <usbdc_set_req+0xd8>)
    fcda:	47a0      	blx	r4
    fcdc:	4603      	mov	r3, r0
    fcde:	2b00      	cmp	r3, #0
    fce0:	bf0c      	ite	eq
    fce2:	2301      	moveq	r3, #1
    fce4:	2300      	movne	r3, #0
    fce6:	b2db      	uxtb	r3, r3
    fce8:	e01a      	b.n	fd20 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    fcea:	79fb      	ldrb	r3, [r7, #7]
    fcec:	6839      	ldr	r1, [r7, #0]
    fcee:	4618      	mov	r0, r3
    fcf0:	4b0f      	ldr	r3, [pc, #60]	; (fd30 <usbdc_set_req+0xe0>)
    fcf2:	4798      	blx	r3
    fcf4:	4603      	mov	r3, r0
    fcf6:	e013      	b.n	fd20 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    fcf8:	79fb      	ldrb	r3, [r7, #7]
    fcfa:	6839      	ldr	r1, [r7, #0]
    fcfc:	4618      	mov	r0, r3
    fcfe:	4b0d      	ldr	r3, [pc, #52]	; (fd34 <usbdc_set_req+0xe4>)
    fd00:	4798      	blx	r3
    fd02:	4603      	mov	r3, r0
    fd04:	e00c      	b.n	fd20 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    fd06:	683b      	ldr	r3, [r7, #0]
    fd08:	885b      	ldrh	r3, [r3, #2]
    fd0a:	b29a      	uxth	r2, r3
    fd0c:	683b      	ldr	r3, [r7, #0]
    fd0e:	889b      	ldrh	r3, [r3, #4]
    fd10:	b29b      	uxth	r3, r3
    fd12:	4619      	mov	r1, r3
    fd14:	4610      	mov	r0, r2
    fd16:	4b08      	ldr	r3, [pc, #32]	; (fd38 <usbdc_set_req+0xe8>)
    fd18:	4798      	blx	r3
    fd1a:	4603      	mov	r3, r0
    fd1c:	e000      	b.n	fd20 <usbdc_set_req+0xd0>
	default:
		return false;
    fd1e:	2300      	movs	r3, #0
	}
}
    fd20:	4618      	mov	r0, r3
    fd22:	370c      	adds	r7, #12
    fd24:	46bd      	mov	sp, r7
    fd26:	bd90      	pop	{r4, r7, pc}
    fd28:	00010025 	.word	0x00010025
    fd2c:	0000fa05 	.word	0x0000fa05
    fd30:	0000f921 	.word	0x0000f921
    fd34:	0000f979 	.word	0x0000f979
    fd38:	0000fb11 	.word	0x0000fb11

0000fd3c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    fd3c:	b580      	push	{r7, lr}
    fd3e:	b082      	sub	sp, #8
    fd40:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    fd42:	4b0a      	ldr	r3, [pc, #40]	; (fd6c <usbdc_sof_notify+0x30>)
    fd44:	685b      	ldr	r3, [r3, #4]
    fd46:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    fd48:	e009      	b.n	fd5e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    fd4a:	687b      	ldr	r3, [r7, #4]
    fd4c:	685b      	ldr	r3, [r3, #4]
    fd4e:	2b00      	cmp	r3, #0
    fd50:	d002      	beq.n	fd58 <usbdc_sof_notify+0x1c>
			sof->cb();
    fd52:	687b      	ldr	r3, [r7, #4]
    fd54:	685b      	ldr	r3, [r3, #4]
    fd56:	4798      	blx	r3
		}
		sof = sof->next;
    fd58:	687b      	ldr	r3, [r7, #4]
    fd5a:	681b      	ldr	r3, [r3, #0]
    fd5c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    fd5e:	687b      	ldr	r3, [r7, #4]
    fd60:	2b00      	cmp	r3, #0
    fd62:	d1f2      	bne.n	fd4a <usbdc_sof_notify+0xe>
	}
}
    fd64:	bf00      	nop
    fd66:	3708      	adds	r7, #8
    fd68:	46bd      	mov	sp, r7
    fd6a:	bd80      	pop	{r7, pc}
    fd6c:	20003834 	.word	0x20003834

0000fd70 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    fd70:	b580      	push	{r7, lr}
    fd72:	b084      	sub	sp, #16
    fd74:	af00      	add	r7, sp, #0
    fd76:	4603      	mov	r3, r0
    fd78:	6039      	str	r1, [r7, #0]
    fd7a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    fd7c:	4b0b      	ldr	r3, [pc, #44]	; (fdac <usbdc_change_notify+0x3c>)
    fd7e:	68db      	ldr	r3, [r3, #12]
    fd80:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    fd82:	e00c      	b.n	fd9e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    fd84:	68fb      	ldr	r3, [r7, #12]
    fd86:	685b      	ldr	r3, [r3, #4]
    fd88:	2b00      	cmp	r3, #0
    fd8a:	d005      	beq.n	fd98 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    fd8c:	68fb      	ldr	r3, [r7, #12]
    fd8e:	685b      	ldr	r3, [r3, #4]
    fd90:	79fa      	ldrb	r2, [r7, #7]
    fd92:	6839      	ldr	r1, [r7, #0]
    fd94:	4610      	mov	r0, r2
    fd96:	4798      	blx	r3
		}
		cg = cg->next;
    fd98:	68fb      	ldr	r3, [r7, #12]
    fd9a:	681b      	ldr	r3, [r3, #0]
    fd9c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    fd9e:	68fb      	ldr	r3, [r7, #12]
    fda0:	2b00      	cmp	r3, #0
    fda2:	d1ef      	bne.n	fd84 <usbdc_change_notify+0x14>
	}
}
    fda4:	bf00      	nop
    fda6:	3710      	adds	r7, #16
    fda8:	46bd      	mov	sp, r7
    fdaa:	bd80      	pop	{r7, pc}
    fdac:	20003834 	.word	0x20003834

0000fdb0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fdb0:	b580      	push	{r7, lr}
    fdb2:	b084      	sub	sp, #16
    fdb4:	af00      	add	r7, sp, #0
    fdb6:	4603      	mov	r3, r0
    fdb8:	6039      	str	r1, [r7, #0]
    fdba:	71fb      	strb	r3, [r7, #7]
    fdbc:	4613      	mov	r3, r2
    fdbe:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    fdc0:	4b12      	ldr	r3, [pc, #72]	; (fe0c <usbdc_request_handler+0x5c>)
    fdc2:	689b      	ldr	r3, [r3, #8]
    fdc4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    fdc6:	e019      	b.n	fdfc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    fdc8:	68fb      	ldr	r3, [r7, #12]
    fdca:	685b      	ldr	r3, [r3, #4]
    fdcc:	2b00      	cmp	r3, #0
    fdce:	d012      	beq.n	fdf6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    fdd0:	68fb      	ldr	r3, [r7, #12]
    fdd2:	685b      	ldr	r3, [r3, #4]
    fdd4:	79ba      	ldrb	r2, [r7, #6]
    fdd6:	79f8      	ldrb	r0, [r7, #7]
    fdd8:	6839      	ldr	r1, [r7, #0]
    fdda:	4798      	blx	r3
    fddc:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    fdde:	68bb      	ldr	r3, [r7, #8]
    fde0:	2b00      	cmp	r3, #0
    fde2:	d101      	bne.n	fde8 <usbdc_request_handler+0x38>
				return true;
    fde4:	2301      	movs	r3, #1
    fde6:	e00d      	b.n	fe04 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    fde8:	68bb      	ldr	r3, [r7, #8]
    fdea:	f113 0f0a 	cmn.w	r3, #10
    fdee:	d002      	beq.n	fdf6 <usbdc_request_handler+0x46>
				return -1;
    fdf0:	f04f 33ff 	mov.w	r3, #4294967295
    fdf4:	e006      	b.n	fe04 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    fdf6:	68fb      	ldr	r3, [r7, #12]
    fdf8:	681b      	ldr	r3, [r3, #0]
    fdfa:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    fdfc:	68fb      	ldr	r3, [r7, #12]
    fdfe:	2b00      	cmp	r3, #0
    fe00:	d1e2      	bne.n	fdc8 <usbdc_request_handler+0x18>
	}
	return false;
    fe02:	2300      	movs	r3, #0
}
    fe04:	4618      	mov	r0, r3
    fe06:	3710      	adds	r7, #16
    fe08:	46bd      	mov	sp, r7
    fe0a:	bd80      	pop	{r7, pc}
    fe0c:	20003834 	.word	0x20003834

0000fe10 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    fe10:	b580      	push	{r7, lr}
    fe12:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    fe14:	4b01      	ldr	r3, [pc, #4]	; (fe1c <usbd_sof_cb+0xc>)
    fe16:	4798      	blx	r3
}
    fe18:	bf00      	nop
    fe1a:	bd80      	pop	{r7, pc}
    fe1c:	0000fd3d 	.word	0x0000fd3d

0000fe20 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    fe20:	b580      	push	{r7, lr}
    fe22:	b082      	sub	sp, #8
    fe24:	af00      	add	r7, sp, #0
    fe26:	4603      	mov	r3, r0
    fe28:	6039      	str	r1, [r7, #0]
    fe2a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    fe2c:	79fb      	ldrb	r3, [r7, #7]
    fe2e:	2200      	movs	r2, #0
    fe30:	6839      	ldr	r1, [r7, #0]
    fe32:	4618      	mov	r0, r3
    fe34:	4b14      	ldr	r3, [pc, #80]	; (fe88 <usbdc_cb_ctl_req+0x68>)
    fe36:	4798      	blx	r3
    fe38:	4603      	mov	r3, r0
    fe3a:	f1b3 3fff 	cmp.w	r3, #4294967295
    fe3e:	d00b      	beq.n	fe58 <usbdc_cb_ctl_req+0x38>
    fe40:	2b01      	cmp	r3, #1
    fe42:	d007      	beq.n	fe54 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    fe44:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    fe46:	683b      	ldr	r3, [r7, #0]
    fe48:	781b      	ldrb	r3, [r3, #0]
    fe4a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    fe4e:	2b00      	cmp	r3, #0
    fe50:	d007      	beq.n	fe62 <usbdc_cb_ctl_req+0x42>
    fe52:	e003      	b.n	fe5c <usbdc_cb_ctl_req+0x3c>
		return true;
    fe54:	2301      	movs	r3, #1
    fe56:	e013      	b.n	fe80 <usbdc_cb_ctl_req+0x60>
		return false;
    fe58:	2300      	movs	r3, #0
    fe5a:	e011      	b.n	fe80 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    fe5c:	2b80      	cmp	r3, #128	; 0x80
    fe5e:	d007      	beq.n	fe70 <usbdc_cb_ctl_req+0x50>
    fe60:	e00d      	b.n	fe7e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    fe62:	79fb      	ldrb	r3, [r7, #7]
    fe64:	6839      	ldr	r1, [r7, #0]
    fe66:	4618      	mov	r0, r3
    fe68:	4b08      	ldr	r3, [pc, #32]	; (fe8c <usbdc_cb_ctl_req+0x6c>)
    fe6a:	4798      	blx	r3
    fe6c:	4603      	mov	r3, r0
    fe6e:	e007      	b.n	fe80 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    fe70:	79fb      	ldrb	r3, [r7, #7]
    fe72:	6839      	ldr	r1, [r7, #0]
    fe74:	4618      	mov	r0, r3
    fe76:	4b06      	ldr	r3, [pc, #24]	; (fe90 <usbdc_cb_ctl_req+0x70>)
    fe78:	4798      	blx	r3
    fe7a:	4603      	mov	r3, r0
    fe7c:	e000      	b.n	fe80 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    fe7e:	2300      	movs	r3, #0
	}
}
    fe80:	4618      	mov	r0, r3
    fe82:	3708      	adds	r7, #8
    fe84:	46bd      	mov	sp, r7
    fe86:	bd80      	pop	{r7, pc}
    fe88:	0000fdb1 	.word	0x0000fdb1
    fe8c:	0000fc51 	.word	0x0000fc51
    fe90:	0000f879 	.word	0x0000f879

0000fe94 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    fe94:	b580      	push	{r7, lr}
    fe96:	b082      	sub	sp, #8
    fe98:	af00      	add	r7, sp, #0
    fe9a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    fe9c:	687b      	ldr	r3, [r7, #4]
    fe9e:	781b      	ldrb	r3, [r3, #0]
    fea0:	2b00      	cmp	r3, #0
    fea2:	d135      	bne.n	ff10 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    fea4:	687b      	ldr	r3, [r7, #4]
    fea6:	785b      	ldrb	r3, [r3, #1]
    fea8:	2b05      	cmp	r3, #5
    feaa:	d019      	beq.n	fee0 <usbdc_ctrl_status_end+0x4c>
    feac:	2b09      	cmp	r3, #9
    feae:	d000      	beq.n	feb2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    feb0:	e02f      	b.n	ff12 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    feb2:	687b      	ldr	r3, [r7, #4]
    feb4:	885b      	ldrh	r3, [r3, #2]
    feb6:	b29b      	uxth	r3, r3
    feb8:	b2da      	uxtb	r2, r3
    feba:	4b17      	ldr	r3, [pc, #92]	; (ff18 <usbdc_ctrl_status_end+0x84>)
    febc:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    febe:	687b      	ldr	r3, [r7, #4]
    fec0:	885b      	ldrh	r3, [r3, #2]
    fec2:	b29b      	uxth	r3, r3
    fec4:	2b00      	cmp	r3, #0
    fec6:	d001      	beq.n	fecc <usbdc_ctrl_status_end+0x38>
    fec8:	2204      	movs	r2, #4
    feca:	e000      	b.n	fece <usbdc_ctrl_status_end+0x3a>
    fecc:	2203      	movs	r2, #3
    fece:	4b12      	ldr	r3, [pc, #72]	; (ff18 <usbdc_ctrl_status_end+0x84>)
    fed0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    fed2:	4b11      	ldr	r3, [pc, #68]	; (ff18 <usbdc_ctrl_status_end+0x84>)
    fed4:	7e9b      	ldrb	r3, [r3, #26]
    fed6:	4619      	mov	r1, r3
    fed8:	2001      	movs	r0, #1
    feda:	4b10      	ldr	r3, [pc, #64]	; (ff1c <usbdc_ctrl_status_end+0x88>)
    fedc:	4798      	blx	r3
		break;
    fede:	e018      	b.n	ff12 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    fee0:	687b      	ldr	r3, [r7, #4]
    fee2:	885b      	ldrh	r3, [r3, #2]
    fee4:	b29b      	uxth	r3, r3
    fee6:	b2db      	uxtb	r3, r3
    fee8:	4618      	mov	r0, r3
    feea:	4b0d      	ldr	r3, [pc, #52]	; (ff20 <usbdc_ctrl_status_end+0x8c>)
    feec:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    feee:	687b      	ldr	r3, [r7, #4]
    fef0:	885b      	ldrh	r3, [r3, #2]
    fef2:	b29b      	uxth	r3, r3
    fef4:	2b00      	cmp	r3, #0
    fef6:	d001      	beq.n	fefc <usbdc_ctrl_status_end+0x68>
    fef8:	2203      	movs	r2, #3
    fefa:	e000      	b.n	fefe <usbdc_ctrl_status_end+0x6a>
    fefc:	2202      	movs	r2, #2
    fefe:	4b06      	ldr	r3, [pc, #24]	; (ff18 <usbdc_ctrl_status_end+0x84>)
    ff00:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ff02:	4b05      	ldr	r3, [pc, #20]	; (ff18 <usbdc_ctrl_status_end+0x84>)
    ff04:	7e9b      	ldrb	r3, [r3, #26]
    ff06:	4619      	mov	r1, r3
    ff08:	2001      	movs	r0, #1
    ff0a:	4b04      	ldr	r3, [pc, #16]	; (ff1c <usbdc_ctrl_status_end+0x88>)
    ff0c:	4798      	blx	r3
		break;
    ff0e:	e000      	b.n	ff12 <usbdc_ctrl_status_end+0x7e>
		return;
    ff10:	bf00      	nop
	}
}
    ff12:	3708      	adds	r7, #8
    ff14:	46bd      	mov	sp, r7
    ff16:	bd80      	pop	{r7, pc}
    ff18:	20003834 	.word	0x20003834
    ff1c:	0000fd71 	.word	0x0000fd71
    ff20:	0000faf1 	.word	0x0000faf1

0000ff24 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ff24:	b580      	push	{r7, lr}
    ff26:	b082      	sub	sp, #8
    ff28:	af00      	add	r7, sp, #0
    ff2a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ff2c:	2201      	movs	r2, #1
    ff2e:	6879      	ldr	r1, [r7, #4]
    ff30:	2000      	movs	r0, #0
    ff32:	4b03      	ldr	r3, [pc, #12]	; (ff40 <usbdc_ctrl_data_end+0x1c>)
    ff34:	4798      	blx	r3
	return false;
    ff36:	2300      	movs	r3, #0
}
    ff38:	4618      	mov	r0, r3
    ff3a:	3708      	adds	r7, #8
    ff3c:	46bd      	mov	sp, r7
    ff3e:	bd80      	pop	{r7, pc}
    ff40:	0000fdb1 	.word	0x0000fdb1

0000ff44 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ff44:	b580      	push	{r7, lr}
    ff46:	b082      	sub	sp, #8
    ff48:	af00      	add	r7, sp, #0
    ff4a:	4603      	mov	r3, r0
    ff4c:	603a      	str	r2, [r7, #0]
    ff4e:	71fb      	strb	r3, [r7, #7]
    ff50:	460b      	mov	r3, r1
    ff52:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ff54:	79bb      	ldrb	r3, [r7, #6]
    ff56:	2b00      	cmp	r3, #0
    ff58:	d002      	beq.n	ff60 <usbdc_cb_ctl_done+0x1c>
    ff5a:	2b01      	cmp	r3, #1
    ff5c:	d004      	beq.n	ff68 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    ff5e:	e008      	b.n	ff72 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ff60:	6838      	ldr	r0, [r7, #0]
    ff62:	4b06      	ldr	r3, [pc, #24]	; (ff7c <usbdc_cb_ctl_done+0x38>)
    ff64:	4798      	blx	r3
		break;
    ff66:	e004      	b.n	ff72 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ff68:	6838      	ldr	r0, [r7, #0]
    ff6a:	4b05      	ldr	r3, [pc, #20]	; (ff80 <usbdc_cb_ctl_done+0x3c>)
    ff6c:	4798      	blx	r3
    ff6e:	4603      	mov	r3, r0
    ff70:	e000      	b.n	ff74 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ff72:	2300      	movs	r3, #0
}
    ff74:	4618      	mov	r0, r3
    ff76:	3708      	adds	r7, #8
    ff78:	46bd      	mov	sp, r7
    ff7a:	bd80      	pop	{r7, pc}
    ff7c:	0000fe95 	.word	0x0000fe95
    ff80:	0000ff25 	.word	0x0000ff25

0000ff84 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ff84:	b580      	push	{r7, lr}
    ff86:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ff88:	4b10      	ldr	r3, [pc, #64]	; (ffcc <usbdc_reset+0x48>)
    ff8a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ff8c:	4b10      	ldr	r3, [pc, #64]	; (ffd0 <usbdc_reset+0x4c>)
    ff8e:	2202      	movs	r2, #2
    ff90:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ff92:	4b0f      	ldr	r3, [pc, #60]	; (ffd0 <usbdc_reset+0x4c>)
    ff94:	2200      	movs	r2, #0
    ff96:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    ff98:	4b0d      	ldr	r3, [pc, #52]	; (ffd0 <usbdc_reset+0x4c>)
    ff9a:	2200      	movs	r2, #0
    ff9c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ff9e:	2000      	movs	r0, #0
    ffa0:	4b0c      	ldr	r3, [pc, #48]	; (ffd4 <usbdc_reset+0x50>)
    ffa2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ffa4:	4b0a      	ldr	r3, [pc, #40]	; (ffd0 <usbdc_reset+0x4c>)
    ffa6:	7f1b      	ldrb	r3, [r3, #28]
    ffa8:	4618      	mov	r0, r3
    ffaa:	4b0b      	ldr	r3, [pc, #44]	; (ffd8 <usbdc_reset+0x54>)
    ffac:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ffae:	4a0b      	ldr	r2, [pc, #44]	; (ffdc <usbdc_reset+0x58>)
    ffb0:	2100      	movs	r1, #0
    ffb2:	2000      	movs	r0, #0
    ffb4:	4b0a      	ldr	r3, [pc, #40]	; (ffe0 <usbdc_reset+0x5c>)
    ffb6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ffb8:	4a0a      	ldr	r2, [pc, #40]	; (ffe4 <usbdc_reset+0x60>)
    ffba:	2102      	movs	r1, #2
    ffbc:	2000      	movs	r0, #0
    ffbe:	4b08      	ldr	r3, [pc, #32]	; (ffe0 <usbdc_reset+0x5c>)
    ffc0:	4798      	blx	r3
	usb_d_ep_enable(0);
    ffc2:	2000      	movs	r0, #0
    ffc4:	4b08      	ldr	r3, [pc, #32]	; (ffe8 <usbdc_reset+0x64>)
    ffc6:	4798      	blx	r3
}
    ffc8:	bf00      	nop
    ffca:	bd80      	pop	{r7, pc}
    ffcc:	0000f9d1 	.word	0x0000f9d1
    ffd0:	20003834 	.word	0x20003834
    ffd4:	00005ef5 	.word	0x00005ef5
    ffd8:	00005e31 	.word	0x00005e31
    ffdc:	0000fe21 	.word	0x0000fe21
    ffe0:	00006249 	.word	0x00006249
    ffe4:	0000ff45 	.word	0x0000ff45
    ffe8:	00005f45 	.word	0x00005f45

0000ffec <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ffec:	b580      	push	{r7, lr}
    ffee:	b082      	sub	sp, #8
    fff0:	af00      	add	r7, sp, #0
    fff2:	4603      	mov	r3, r0
    fff4:	6039      	str	r1, [r7, #0]
    fff6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    fff8:	79fb      	ldrb	r3, [r7, #7]
    fffa:	2b00      	cmp	r3, #0
    fffc:	d002      	beq.n	10004 <STACK_SIZE+0x4>
    fffe:	2b01      	cmp	r3, #1
   10000:	d005      	beq.n	1000e <STACK_SIZE+0xe>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   10002:	e007      	b.n	10014 <STACK_SIZE+0x14>
		usbdc_change_notify(USBDC_C_CONN, param);
   10004:	6839      	ldr	r1, [r7, #0]
   10006:	2000      	movs	r0, #0
   10008:	4b04      	ldr	r3, [pc, #16]	; (1001c <STACK_SIZE+0x1c>)
   1000a:	4798      	blx	r3
		break;
   1000c:	e002      	b.n	10014 <STACK_SIZE+0x14>
		usbdc_reset();
   1000e:	4b04      	ldr	r3, [pc, #16]	; (10020 <STACK_SIZE+0x20>)
   10010:	4798      	blx	r3
		break;
   10012:	bf00      	nop
	}
}
   10014:	bf00      	nop
   10016:	3708      	adds	r7, #8
   10018:	46bd      	mov	sp, r7
   1001a:	bd80      	pop	{r7, pc}
   1001c:	0000fd71 	.word	0x0000fd71
   10020:	0000ff85 	.word	0x0000ff85

00010024 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   10024:	b580      	push	{r7, lr}
   10026:	b088      	sub	sp, #32
   10028:	af00      	add	r7, sp, #0
   1002a:	60b9      	str	r1, [r7, #8]
   1002c:	607a      	str	r2, [r7, #4]
   1002e:	461a      	mov	r2, r3
   10030:	4603      	mov	r3, r0
   10032:	73fb      	strb	r3, [r7, #15]
   10034:	4613      	mov	r3, r2
   10036:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   10038:	68bb      	ldr	r3, [r7, #8]
   1003a:	617b      	str	r3, [r7, #20]
   1003c:	687b      	ldr	r3, [r7, #4]
   1003e:	61bb      	str	r3, [r7, #24]
   10040:	7bfb      	ldrb	r3, [r7, #15]
   10042:	773b      	strb	r3, [r7, #28]
   10044:	7bbb      	ldrb	r3, [r7, #14]
   10046:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   10048:	f107 0314 	add.w	r3, r7, #20
   1004c:	4618      	mov	r0, r3
   1004e:	4b03      	ldr	r3, [pc, #12]	; (1005c <usbdc_xfer+0x38>)
   10050:	4798      	blx	r3
   10052:	4603      	mov	r3, r0
}
   10054:	4618      	mov	r0, r3
   10056:	3720      	adds	r7, #32
   10058:	46bd      	mov	sp, r7
   1005a:	bd80      	pop	{r7, pc}
   1005c:	00005fb5 	.word	0x00005fb5

00010060 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   10060:	b580      	push	{r7, lr}
   10062:	b082      	sub	sp, #8
   10064:	af00      	add	r7, sp, #0
   10066:	4603      	mov	r3, r0
   10068:	6039      	str	r1, [r7, #0]
   1006a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   1006c:	79fb      	ldrb	r3, [r7, #7]
   1006e:	2b01      	cmp	r3, #1
   10070:	d009      	beq.n	10086 <usbdc_register_handler+0x26>
   10072:	2b02      	cmp	r3, #2
   10074:	d00c      	beq.n	10090 <usbdc_register_handler+0x30>
   10076:	2b00      	cmp	r3, #0
   10078:	d000      	beq.n	1007c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   1007a:	e00e      	b.n	1009a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1007c:	6839      	ldr	r1, [r7, #0]
   1007e:	4809      	ldr	r0, [pc, #36]	; (100a4 <usbdc_register_handler+0x44>)
   10080:	4b09      	ldr	r3, [pc, #36]	; (100a8 <usbdc_register_handler+0x48>)
   10082:	4798      	blx	r3
		break;
   10084:	e009      	b.n	1009a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10086:	6839      	ldr	r1, [r7, #0]
   10088:	4808      	ldr	r0, [pc, #32]	; (100ac <usbdc_register_handler+0x4c>)
   1008a:	4b07      	ldr	r3, [pc, #28]	; (100a8 <usbdc_register_handler+0x48>)
   1008c:	4798      	blx	r3
		break;
   1008e:	e004      	b.n	1009a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10090:	6839      	ldr	r1, [r7, #0]
   10092:	4807      	ldr	r0, [pc, #28]	; (100b0 <usbdc_register_handler+0x50>)
   10094:	4b04      	ldr	r3, [pc, #16]	; (100a8 <usbdc_register_handler+0x48>)
   10096:	4798      	blx	r3
		break;
   10098:	bf00      	nop
	}
}
   1009a:	bf00      	nop
   1009c:	3708      	adds	r7, #8
   1009e:	46bd      	mov	sp, r7
   100a0:	bd80      	pop	{r7, pc}
   100a2:	bf00      	nop
   100a4:	20003838 	.word	0x20003838
   100a8:	000063a1 	.word	0x000063a1
   100ac:	2000383c 	.word	0x2000383c
   100b0:	20003840 	.word	0x20003840

000100b4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   100b4:	b580      	push	{r7, lr}
   100b6:	b084      	sub	sp, #16
   100b8:	af00      	add	r7, sp, #0
   100ba:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   100bc:	687b      	ldr	r3, [r7, #4]
   100be:	2b00      	cmp	r3, #0
   100c0:	bf14      	ite	ne
   100c2:	2301      	movne	r3, #1
   100c4:	2300      	moveq	r3, #0
   100c6:	b2db      	uxtb	r3, r3
   100c8:	f240 3255 	movw	r2, #853	; 0x355
   100cc:	4910      	ldr	r1, [pc, #64]	; (10110 <usbdc_init+0x5c>)
   100ce:	4618      	mov	r0, r3
   100d0:	4b10      	ldr	r3, [pc, #64]	; (10114 <usbdc_init+0x60>)
   100d2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   100d4:	4b10      	ldr	r3, [pc, #64]	; (10118 <usbdc_init+0x64>)
   100d6:	4798      	blx	r3
   100d8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   100da:	68fb      	ldr	r3, [r7, #12]
   100dc:	2b00      	cmp	r3, #0
   100de:	da01      	bge.n	100e4 <usbdc_init+0x30>
		return rc;
   100e0:	68fb      	ldr	r3, [r7, #12]
   100e2:	e010      	b.n	10106 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   100e4:	2220      	movs	r2, #32
   100e6:	2100      	movs	r1, #0
   100e8:	480c      	ldr	r0, [pc, #48]	; (1011c <usbdc_init+0x68>)
   100ea:	4b0d      	ldr	r3, [pc, #52]	; (10120 <usbdc_init+0x6c>)
   100ec:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   100ee:	4a0b      	ldr	r2, [pc, #44]	; (1011c <usbdc_init+0x68>)
   100f0:	687b      	ldr	r3, [r7, #4]
   100f2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   100f4:	490b      	ldr	r1, [pc, #44]	; (10124 <usbdc_init+0x70>)
   100f6:	2000      	movs	r0, #0
   100f8:	4b0b      	ldr	r3, [pc, #44]	; (10128 <usbdc_init+0x74>)
   100fa:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   100fc:	490b      	ldr	r1, [pc, #44]	; (1012c <usbdc_init+0x78>)
   100fe:	2001      	movs	r0, #1
   10100:	4b09      	ldr	r3, [pc, #36]	; (10128 <usbdc_init+0x74>)
   10102:	4798      	blx	r3

	return 0;
   10104:	2300      	movs	r3, #0
}
   10106:	4618      	mov	r0, r3
   10108:	3710      	adds	r7, #16
   1010a:	46bd      	mov	sp, r7
   1010c:	bd80      	pop	{r7, pc}
   1010e:	bf00      	nop
   10110:	0001ae74 	.word	0x0001ae74
   10114:	000062c5 	.word	0x000062c5
   10118:	00005d1d 	.word	0x00005d1d
   1011c:	20003834 	.word	0x20003834
   10120:	00016869 	.word	0x00016869
   10124:	0000fe11 	.word	0x0000fe11
   10128:	00005dc9 	.word	0x00005dc9
   1012c:	0000ffed 	.word	0x0000ffed

00010130 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   10130:	b580      	push	{r7, lr}
   10132:	b082      	sub	sp, #8
   10134:	af00      	add	r7, sp, #0
   10136:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   10138:	6879      	ldr	r1, [r7, #4]
   1013a:	4803      	ldr	r0, [pc, #12]	; (10148 <usbdc_register_function+0x18>)
   1013c:	4b03      	ldr	r3, [pc, #12]	; (1014c <usbdc_register_function+0x1c>)
   1013e:	4798      	blx	r3
}
   10140:	bf00      	nop
   10142:	3708      	adds	r7, #8
   10144:	46bd      	mov	sp, r7
   10146:	bd80      	pop	{r7, pc}
   10148:	20003844 	.word	0x20003844
   1014c:	000063a1 	.word	0x000063a1

00010150 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   10150:	b580      	push	{r7, lr}
   10152:	b082      	sub	sp, #8
   10154:	af00      	add	r7, sp, #0
   10156:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   10158:	4b0f      	ldr	r3, [pc, #60]	; (10198 <usbdc_start+0x48>)
   1015a:	7e9b      	ldrb	r3, [r3, #26]
   1015c:	2b00      	cmp	r3, #0
   1015e:	d002      	beq.n	10166 <usbdc_start+0x16>
		return ERR_BUSY;
   10160:	f06f 0303 	mvn.w	r3, #3
   10164:	e013      	b.n	1018e <usbdc_start+0x3e>
	}

	if (desces) {
   10166:	687b      	ldr	r3, [r7, #4]
   10168:	2b00      	cmp	r3, #0
   1016a:	d00e      	beq.n	1018a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   1016c:	4a0a      	ldr	r2, [pc, #40]	; (10198 <usbdc_start+0x48>)
   1016e:	687b      	ldr	r3, [r7, #4]
   10170:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   10172:	687b      	ldr	r3, [r7, #4]
   10174:	681b      	ldr	r3, [r3, #0]
   10176:	79da      	ldrb	r2, [r3, #7]
   10178:	4b07      	ldr	r3, [pc, #28]	; (10198 <usbdc_start+0x48>)
   1017a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1017c:	4b06      	ldr	r3, [pc, #24]	; (10198 <usbdc_start+0x48>)
   1017e:	2201      	movs	r2, #1
   10180:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10182:	4b06      	ldr	r3, [pc, #24]	; (1019c <usbdc_start+0x4c>)
   10184:	4798      	blx	r3
	return ERR_NONE;
   10186:	2300      	movs	r3, #0
   10188:	e001      	b.n	1018e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1018a:	f06f 0308 	mvn.w	r3, #8
}
   1018e:	4618      	mov	r0, r3
   10190:	3708      	adds	r7, #8
   10192:	46bd      	mov	sp, r7
   10194:	bd80      	pop	{r7, pc}
   10196:	bf00      	nop
   10198:	20003834 	.word	0x20003834
   1019c:	00005ded 	.word	0x00005ded

000101a0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   101a0:	b580      	push	{r7, lr}
   101a2:	af00      	add	r7, sp, #0
	usb_d_attach();
   101a4:	4b01      	ldr	r3, [pc, #4]	; (101ac <usbdc_attach+0xc>)
   101a6:	4798      	blx	r3
}
   101a8:	bf00      	nop
   101aa:	bd80      	pop	{r7, pc}
   101ac:	00005e01 	.word	0x00005e01

000101b0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   101b0:	b480      	push	{r7}
   101b2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   101b4:	4b03      	ldr	r3, [pc, #12]	; (101c4 <usbdc_get_ctrl_buffer+0x14>)
   101b6:	695b      	ldr	r3, [r3, #20]
}
   101b8:	4618      	mov	r0, r3
   101ba:	46bd      	mov	sp, r7
   101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   101c0:	4770      	bx	lr
   101c2:	bf00      	nop
   101c4:	20003834 	.word	0x20003834

000101c8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   101c8:	b480      	push	{r7}
   101ca:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   101cc:	4b07      	ldr	r3, [pc, #28]	; (101ec <usbdc_get_state+0x24>)
   101ce:	7e9b      	ldrb	r3, [r3, #26]
   101d0:	f003 0310 	and.w	r3, r3, #16
   101d4:	2b00      	cmp	r3, #0
   101d6:	d001      	beq.n	101dc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   101d8:	2310      	movs	r3, #16
   101da:	e001      	b.n	101e0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   101dc:	4b03      	ldr	r3, [pc, #12]	; (101ec <usbdc_get_state+0x24>)
   101de:	7e9b      	ldrb	r3, [r3, #26]
}
   101e0:	4618      	mov	r0, r3
   101e2:	46bd      	mov	sp, r7
   101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   101e8:	4770      	bx	lr
   101ea:	bf00      	nop
   101ec:	20003834 	.word	0x20003834

000101f0 <usb_get_u16>:
{
   101f0:	b480      	push	{r7}
   101f2:	b083      	sub	sp, #12
   101f4:	af00      	add	r7, sp, #0
   101f6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   101f8:	687b      	ldr	r3, [r7, #4]
   101fa:	781b      	ldrb	r3, [r3, #0]
   101fc:	b29a      	uxth	r2, r3
   101fe:	687b      	ldr	r3, [r7, #4]
   10200:	3301      	adds	r3, #1
   10202:	781b      	ldrb	r3, [r3, #0]
   10204:	b29b      	uxth	r3, r3
   10206:	021b      	lsls	r3, r3, #8
   10208:	b29b      	uxth	r3, r3
   1020a:	4413      	add	r3, r2
   1020c:	b29b      	uxth	r3, r3
}
   1020e:	4618      	mov	r0, r3
   10210:	370c      	adds	r7, #12
   10212:	46bd      	mov	sp, r7
   10214:	f85d 7b04 	ldr.w	r7, [sp], #4
   10218:	4770      	bx	lr

0001021a <usb_desc_len>:
{
   1021a:	b480      	push	{r7}
   1021c:	b083      	sub	sp, #12
   1021e:	af00      	add	r7, sp, #0
   10220:	6078      	str	r0, [r7, #4]
	return desc[0];
   10222:	687b      	ldr	r3, [r7, #4]
   10224:	781b      	ldrb	r3, [r3, #0]
}
   10226:	4618      	mov	r0, r3
   10228:	370c      	adds	r7, #12
   1022a:	46bd      	mov	sp, r7
   1022c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10230:	4770      	bx	lr

00010232 <usb_desc_type>:
{
   10232:	b480      	push	{r7}
   10234:	b083      	sub	sp, #12
   10236:	af00      	add	r7, sp, #0
   10238:	6078      	str	r0, [r7, #4]
	return desc[1];
   1023a:	687b      	ldr	r3, [r7, #4]
   1023c:	3301      	adds	r3, #1
   1023e:	781b      	ldrb	r3, [r3, #0]
}
   10240:	4618      	mov	r0, r3
   10242:	370c      	adds	r7, #12
   10244:	46bd      	mov	sp, r7
   10246:	f85d 7b04 	ldr.w	r7, [sp], #4
   1024a:	4770      	bx	lr

0001024c <usb_desc_next>:
{
   1024c:	b580      	push	{r7, lr}
   1024e:	b082      	sub	sp, #8
   10250:	af00      	add	r7, sp, #0
   10252:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10254:	6878      	ldr	r0, [r7, #4]
   10256:	4b05      	ldr	r3, [pc, #20]	; (1026c <usb_desc_next+0x20>)
   10258:	4798      	blx	r3
   1025a:	4603      	mov	r3, r0
   1025c:	461a      	mov	r2, r3
   1025e:	687b      	ldr	r3, [r7, #4]
   10260:	4413      	add	r3, r2
}
   10262:	4618      	mov	r0, r3
   10264:	3708      	adds	r7, #8
   10266:	46bd      	mov	sp, r7
   10268:	bd80      	pop	{r7, pc}
   1026a:	bf00      	nop
   1026c:	0001021b 	.word	0x0001021b

00010270 <usb_cfg_desc_total_len>:
{
   10270:	b580      	push	{r7, lr}
   10272:	b082      	sub	sp, #8
   10274:	af00      	add	r7, sp, #0
   10276:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10278:	687b      	ldr	r3, [r7, #4]
   1027a:	3302      	adds	r3, #2
   1027c:	4618      	mov	r0, r3
   1027e:	4b03      	ldr	r3, [pc, #12]	; (1028c <usb_cfg_desc_total_len+0x1c>)
   10280:	4798      	blx	r3
   10282:	4603      	mov	r3, r0
}
   10284:	4618      	mov	r0, r3
   10286:	3708      	adds	r7, #8
   10288:	46bd      	mov	sp, r7
   1028a:	bd80      	pop	{r7, pc}
   1028c:	000101f1 	.word	0x000101f1

00010290 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10290:	b580      	push	{r7, lr}
   10292:	b082      	sub	sp, #8
   10294:	af00      	add	r7, sp, #0
   10296:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10298:	6878      	ldr	r0, [r7, #4]
   1029a:	4b05      	ldr	r3, [pc, #20]	; (102b0 <usb_cfg_desc_next+0x20>)
   1029c:	4798      	blx	r3
   1029e:	4603      	mov	r3, r0
   102a0:	461a      	mov	r2, r3
   102a2:	687b      	ldr	r3, [r7, #4]
   102a4:	4413      	add	r3, r2
}
   102a6:	4618      	mov	r0, r3
   102a8:	3708      	adds	r7, #8
   102aa:	46bd      	mov	sp, r7
   102ac:	bd80      	pop	{r7, pc}
   102ae:	bf00      	nop
   102b0:	00010271 	.word	0x00010271

000102b4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   102b4:	b580      	push	{r7, lr}
   102b6:	b084      	sub	sp, #16
   102b8:	af00      	add	r7, sp, #0
   102ba:	60f8      	str	r0, [r7, #12]
   102bc:	60b9      	str	r1, [r7, #8]
   102be:	4613      	mov	r3, r2
   102c0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   102c2:	e015      	b.n	102f0 <usb_find_desc+0x3c>
		_desc_len_check();
   102c4:	68f8      	ldr	r0, [r7, #12]
   102c6:	4b0f      	ldr	r3, [pc, #60]	; (10304 <usb_find_desc+0x50>)
   102c8:	4798      	blx	r3
   102ca:	4603      	mov	r3, r0
   102cc:	2b01      	cmp	r3, #1
   102ce:	d801      	bhi.n	102d4 <usb_find_desc+0x20>
   102d0:	2300      	movs	r3, #0
   102d2:	e012      	b.n	102fa <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   102d4:	68f8      	ldr	r0, [r7, #12]
   102d6:	4b0c      	ldr	r3, [pc, #48]	; (10308 <usb_find_desc+0x54>)
   102d8:	4798      	blx	r3
   102da:	4603      	mov	r3, r0
   102dc:	461a      	mov	r2, r3
   102de:	79fb      	ldrb	r3, [r7, #7]
   102e0:	4293      	cmp	r3, r2
   102e2:	d101      	bne.n	102e8 <usb_find_desc+0x34>
			return desc;
   102e4:	68fb      	ldr	r3, [r7, #12]
   102e6:	e008      	b.n	102fa <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   102e8:	68f8      	ldr	r0, [r7, #12]
   102ea:	4b08      	ldr	r3, [pc, #32]	; (1030c <usb_find_desc+0x58>)
   102ec:	4798      	blx	r3
   102ee:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   102f0:	68fa      	ldr	r2, [r7, #12]
   102f2:	68bb      	ldr	r3, [r7, #8]
   102f4:	429a      	cmp	r2, r3
   102f6:	d3e5      	bcc.n	102c4 <usb_find_desc+0x10>
	}
	return NULL;
   102f8:	2300      	movs	r3, #0
}
   102fa:	4618      	mov	r0, r3
   102fc:	3710      	adds	r7, #16
   102fe:	46bd      	mov	sp, r7
   10300:	bd80      	pop	{r7, pc}
   10302:	bf00      	nop
   10304:	0001021b 	.word	0x0001021b
   10308:	00010233 	.word	0x00010233
   1030c:	0001024d 	.word	0x0001024d

00010310 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   10310:	b580      	push	{r7, lr}
   10312:	b082      	sub	sp, #8
   10314:	af00      	add	r7, sp, #0
   10316:	6078      	str	r0, [r7, #4]
   10318:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   1031a:	e019      	b.n	10350 <usb_find_ep_desc+0x40>
		_desc_len_check();
   1031c:	6878      	ldr	r0, [r7, #4]
   1031e:	4b12      	ldr	r3, [pc, #72]	; (10368 <usb_find_ep_desc+0x58>)
   10320:	4798      	blx	r3
   10322:	4603      	mov	r3, r0
   10324:	2b01      	cmp	r3, #1
   10326:	d801      	bhi.n	1032c <usb_find_ep_desc+0x1c>
   10328:	2300      	movs	r3, #0
   1032a:	e018      	b.n	1035e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   1032c:	6878      	ldr	r0, [r7, #4]
   1032e:	4b0f      	ldr	r3, [pc, #60]	; (1036c <usb_find_ep_desc+0x5c>)
   10330:	4798      	blx	r3
   10332:	4603      	mov	r3, r0
   10334:	2b04      	cmp	r3, #4
   10336:	d010      	beq.n	1035a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   10338:	6878      	ldr	r0, [r7, #4]
   1033a:	4b0c      	ldr	r3, [pc, #48]	; (1036c <usb_find_ep_desc+0x5c>)
   1033c:	4798      	blx	r3
   1033e:	4603      	mov	r3, r0
   10340:	2b05      	cmp	r3, #5
   10342:	d101      	bne.n	10348 <usb_find_ep_desc+0x38>
			return desc;
   10344:	687b      	ldr	r3, [r7, #4]
   10346:	e00a      	b.n	1035e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   10348:	6878      	ldr	r0, [r7, #4]
   1034a:	4b09      	ldr	r3, [pc, #36]	; (10370 <usb_find_ep_desc+0x60>)
   1034c:	4798      	blx	r3
   1034e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   10350:	687a      	ldr	r2, [r7, #4]
   10352:	683b      	ldr	r3, [r7, #0]
   10354:	429a      	cmp	r2, r3
   10356:	d3e1      	bcc.n	1031c <usb_find_ep_desc+0xc>
   10358:	e000      	b.n	1035c <usb_find_ep_desc+0x4c>
			break;
   1035a:	bf00      	nop
	}
	return NULL;
   1035c:	2300      	movs	r3, #0
}
   1035e:	4618      	mov	r0, r3
   10360:	3708      	adds	r7, #8
   10362:	46bd      	mov	sp, r7
   10364:	bd80      	pop	{r7, pc}
   10366:	bf00      	nop
   10368:	0001021b 	.word	0x0001021b
   1036c:	00010233 	.word	0x00010233
   10370:	0001024d 	.word	0x0001024d

00010374 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   10374:	b580      	push	{r7, lr}
   10376:	b084      	sub	sp, #16
   10378:	af00      	add	r7, sp, #0
   1037a:	60f8      	str	r0, [r7, #12]
   1037c:	60b9      	str	r1, [r7, #8]
   1037e:	4613      	mov	r3, r2
   10380:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   10382:	2202      	movs	r2, #2
   10384:	68b9      	ldr	r1, [r7, #8]
   10386:	68f8      	ldr	r0, [r7, #12]
   10388:	4b15      	ldr	r3, [pc, #84]	; (103e0 <usb_find_cfg_desc+0x6c>)
   1038a:	4798      	blx	r3
   1038c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   1038e:	68fb      	ldr	r3, [r7, #12]
   10390:	2b00      	cmp	r3, #0
   10392:	d11a      	bne.n	103ca <usb_find_cfg_desc+0x56>
		return NULL;
   10394:	2300      	movs	r3, #0
   10396:	e01f      	b.n	103d8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   10398:	68f8      	ldr	r0, [r7, #12]
   1039a:	4b12      	ldr	r3, [pc, #72]	; (103e4 <usb_find_cfg_desc+0x70>)
   1039c:	4798      	blx	r3
   1039e:	4603      	mov	r3, r0
   103a0:	2b01      	cmp	r3, #1
   103a2:	d801      	bhi.n	103a8 <usb_find_cfg_desc+0x34>
   103a4:	2300      	movs	r3, #0
   103a6:	e017      	b.n	103d8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   103a8:	68fb      	ldr	r3, [r7, #12]
   103aa:	3301      	adds	r3, #1
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	2b02      	cmp	r3, #2
   103b0:	d110      	bne.n	103d4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   103b2:	68fb      	ldr	r3, [r7, #12]
   103b4:	3305      	adds	r3, #5
   103b6:	781b      	ldrb	r3, [r3, #0]
   103b8:	79fa      	ldrb	r2, [r7, #7]
   103ba:	429a      	cmp	r2, r3
   103bc:	d101      	bne.n	103c2 <usb_find_cfg_desc+0x4e>
			return desc;
   103be:	68fb      	ldr	r3, [r7, #12]
   103c0:	e00a      	b.n	103d8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   103c2:	68f8      	ldr	r0, [r7, #12]
   103c4:	4b08      	ldr	r3, [pc, #32]	; (103e8 <usb_find_cfg_desc+0x74>)
   103c6:	4798      	blx	r3
   103c8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   103ca:	68fa      	ldr	r2, [r7, #12]
   103cc:	68bb      	ldr	r3, [r7, #8]
   103ce:	429a      	cmp	r2, r3
   103d0:	d3e2      	bcc.n	10398 <usb_find_cfg_desc+0x24>
   103d2:	e000      	b.n	103d6 <usb_find_cfg_desc+0x62>
			break;
   103d4:	bf00      	nop
	}
	return NULL;
   103d6:	2300      	movs	r3, #0
}
   103d8:	4618      	mov	r0, r3
   103da:	3710      	adds	r7, #16
   103dc:	46bd      	mov	sp, r7
   103de:	bd80      	pop	{r7, pc}
   103e0:	000102b5 	.word	0x000102b5
   103e4:	0001021b 	.word	0x0001021b
   103e8:	00010291 	.word	0x00010291

000103ec <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   103ec:	b580      	push	{r7, lr}
   103ee:	b086      	sub	sp, #24
   103f0:	af00      	add	r7, sp, #0
   103f2:	60f8      	str	r0, [r7, #12]
   103f4:	60b9      	str	r1, [r7, #8]
   103f6:	4613      	mov	r3, r2
   103f8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   103fa:	2300      	movs	r3, #0
   103fc:	75fb      	strb	r3, [r7, #23]
   103fe:	e020      	b.n	10442 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   10400:	2203      	movs	r2, #3
   10402:	68b9      	ldr	r1, [r7, #8]
   10404:	68f8      	ldr	r0, [r7, #12]
   10406:	4b13      	ldr	r3, [pc, #76]	; (10454 <usb_find_str_desc+0x68>)
   10408:	4798      	blx	r3
   1040a:	60f8      	str	r0, [r7, #12]
		if (desc) {
   1040c:	68fb      	ldr	r3, [r7, #12]
   1040e:	2b00      	cmp	r3, #0
   10410:	d015      	beq.n	1043e <usb_find_str_desc+0x52>
			_desc_len_check();
   10412:	68f8      	ldr	r0, [r7, #12]
   10414:	4b10      	ldr	r3, [pc, #64]	; (10458 <usb_find_str_desc+0x6c>)
   10416:	4798      	blx	r3
   10418:	4603      	mov	r3, r0
   1041a:	2b01      	cmp	r3, #1
   1041c:	d801      	bhi.n	10422 <usb_find_str_desc+0x36>
   1041e:	2300      	movs	r3, #0
   10420:	e014      	b.n	1044c <usb_find_str_desc+0x60>
			if (i == str_index) {
   10422:	7dfa      	ldrb	r2, [r7, #23]
   10424:	79fb      	ldrb	r3, [r7, #7]
   10426:	429a      	cmp	r2, r3
   10428:	d101      	bne.n	1042e <usb_find_str_desc+0x42>
				return desc;
   1042a:	68fb      	ldr	r3, [r7, #12]
   1042c:	e00e      	b.n	1044c <usb_find_str_desc+0x60>
			}
			i++;
   1042e:	7dfb      	ldrb	r3, [r7, #23]
   10430:	3301      	adds	r3, #1
   10432:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   10434:	68f8      	ldr	r0, [r7, #12]
   10436:	4b09      	ldr	r3, [pc, #36]	; (1045c <usb_find_str_desc+0x70>)
   10438:	4798      	blx	r3
   1043a:	60f8      	str	r0, [r7, #12]
   1043c:	e001      	b.n	10442 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   1043e:	2300      	movs	r3, #0
   10440:	e004      	b.n	1044c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   10442:	68fa      	ldr	r2, [r7, #12]
   10444:	68bb      	ldr	r3, [r7, #8]
   10446:	429a      	cmp	r2, r3
   10448:	d3da      	bcc.n	10400 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   1044a:	2300      	movs	r3, #0
}
   1044c:	4618      	mov	r0, r3
   1044e:	3718      	adds	r7, #24
   10450:	46bd      	mov	sp, r7
   10452:	bd80      	pop	{r7, pc}
   10454:	000102b5 	.word	0x000102b5
   10458:	0001021b 	.word	0x0001021b
   1045c:	0001024d 	.word	0x0001024d

00010460 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   10460:	b480      	push	{r7}
   10462:	b083      	sub	sp, #12
   10464:	af00      	add	r7, sp, #0
   10466:	6078      	str	r0, [r7, #4]
   10468:	4a04      	ldr	r2, [pc, #16]	; (1047c <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   1046a:	687b      	ldr	r3, [r7, #4]
   1046c:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   1046e:	687b      	ldr	r3, [r7, #4]
   10470:	4618      	mov	r0, r3
   10472:	370c      	adds	r7, #12
   10474:	46bd      	mov	sp, r7
   10476:	bc80      	pop	{r7}
   10478:	4770      	bx	lr
   1047a:	bf00      	nop
   1047c:	0001ae94 	.word	0x0001ae94

00010480 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   10480:	b480      	push	{r7}
   10482:	b083      	sub	sp, #12
   10484:	af00      	add	r7, sp, #0
   10486:	6078      	str	r0, [r7, #4]
   10488:	4a04      	ldr	r2, [pc, #16]	; (1049c <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   1048a:	687b      	ldr	r3, [r7, #4]
   1048c:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   1048e:	687b      	ldr	r3, [r7, #4]
   10490:	4618      	mov	r0, r3
   10492:	370c      	adds	r7, #12
   10494:	46bd      	mov	sp, r7
   10496:	bc80      	pop	{r7}
   10498:	4770      	bx	lr
   1049a:	bf00      	nop
   1049c:	0001ae94 	.word	0x0001ae94

000104a0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   104a0:	b5b0      	push	{r4, r5, r7, lr}
   104a2:	b082      	sub	sp, #8
   104a4:	af00      	add	r7, sp, #0
   104a6:	6078      	str	r0, [r7, #4]
   104a8:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   104aa:	4b0a      	ldr	r3, [pc, #40]	; (104d4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   104ac:	6878      	ldr	r0, [r7, #4]
   104ae:	4798      	blx	r3
   104b0:	4604      	mov	r4, r0
   104b2:	460d      	mov	r5, r1
   104b4:	4b07      	ldr	r3, [pc, #28]	; (104d4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   104b6:	6838      	ldr	r0, [r7, #0]
   104b8:	4798      	blx	r3
   104ba:	4602      	mov	r2, r0
   104bc:	460b      	mov	r3, r1
   104be:	4620      	mov	r0, r4
   104c0:	4629      	mov	r1, r5
   104c2:	4c05      	ldr	r4, [pc, #20]	; (104d8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   104c4:	47a0      	blx	r4
   104c6:	4603      	mov	r3, r0
   104c8:	460c      	mov	r4, r1
    }
   104ca:	4618      	mov	r0, r3
   104cc:	4621      	mov	r1, r4
   104ce:	3708      	adds	r7, #8
   104d0:	46bd      	mov	sp, r7
   104d2:	bdb0      	pop	{r4, r5, r7, pc}
   104d4:	00015a91 	.word	0x00015a91
   104d8:	000146a1 	.word	0x000146a1

000104dc <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   104dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   104e0:	b085      	sub	sp, #20
   104e2:	af00      	add	r7, sp, #0
   104e4:	6078      	str	r0, [r7, #4]
   104e6:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   104e8:	2300      	movs	r3, #0
   104ea:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   104ec:	2300      	movs	r3, #0
   104ee:	73bb      	strb	r3, [r7, #14]
   104f0:	7bbb      	ldrb	r3, [r7, #14]
   104f2:	2b02      	cmp	r3, #2
   104f4:	d86d      	bhi.n	105d2 <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   104f6:	7bbb      	ldrb	r3, [r7, #14]
   104f8:	f1c3 0402 	rsb	r4, r3, #2
   104fc:	4b3c      	ldr	r3, [pc, #240]	; (105f0 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   104fe:	6838      	ldr	r0, [r7, #0]
   10500:	4798      	blx	r3
   10502:	4680      	mov	r8, r0
   10504:	4689      	mov	r9, r1
   10506:	7bbb      	ldrb	r3, [r7, #14]
   10508:	f1c3 0302 	rsb	r3, r3, #2
   1050c:	4619      	mov	r1, r3
   1050e:	200a      	movs	r0, #10
   10510:	4b38      	ldr	r3, [pc, #224]	; (105f4 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10512:	4798      	blx	r3
   10514:	4602      	mov	r2, r0
   10516:	460b      	mov	r3, r1
   10518:	4d37      	ldr	r5, [pc, #220]	; (105f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   1051a:	4640      	mov	r0, r8
   1051c:	4649      	mov	r1, r9
   1051e:	47a8      	blx	r5
   10520:	4602      	mov	r2, r0
   10522:	460b      	mov	r3, r1
   10524:	4611      	mov	r1, r2
   10526:	461a      	mov	r2, r3
   10528:	4b34      	ldr	r3, [pc, #208]	; (105fc <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   1052a:	4608      	mov	r0, r1
   1052c:	4611      	mov	r1, r2
   1052e:	4798      	blx	r3
   10530:	4603      	mov	r3, r0
   10532:	b2da      	uxtb	r2, r3
   10534:	f107 0310 	add.w	r3, r7, #16
   10538:	4423      	add	r3, r4
   1053a:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   1053e:	7bbb      	ldrb	r3, [r7, #14]
   10540:	f1c3 0302 	rsb	r3, r3, #2
   10544:	f107 0210 	add.w	r2, r7, #16
   10548:	4413      	add	r3, r2
   1054a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1054e:	461a      	mov	r2, r3
   10550:	4b2b      	ldr	r3, [pc, #172]	; (10600 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   10552:	4610      	mov	r0, r2
   10554:	4798      	blx	r3
   10556:	4605      	mov	r5, r0
   10558:	460e      	mov	r6, r1
   1055a:	7bbb      	ldrb	r3, [r7, #14]
   1055c:	f1c3 0302 	rsb	r3, r3, #2
   10560:	4619      	mov	r1, r3
   10562:	200a      	movs	r0, #10
   10564:	4b23      	ldr	r3, [pc, #140]	; (105f4 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10566:	4798      	blx	r3
   10568:	4602      	mov	r2, r0
   1056a:	460b      	mov	r3, r1
   1056c:	4c25      	ldr	r4, [pc, #148]	; (10604 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   1056e:	4628      	mov	r0, r5
   10570:	4631      	mov	r1, r6
   10572:	47a0      	blx	r4
   10574:	4603      	mov	r3, r0
   10576:	460c      	mov	r4, r1
   10578:	461d      	mov	r5, r3
   1057a:	4626      	mov	r6, r4
   1057c:	4b1c      	ldr	r3, [pc, #112]	; (105f0 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1057e:	6838      	ldr	r0, [r7, #0]
   10580:	4798      	blx	r3
   10582:	4c21      	ldr	r4, [pc, #132]	; (10608 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   10584:	462a      	mov	r2, r5
   10586:	4633      	mov	r3, r6
   10588:	47a0      	blx	r4
   1058a:	4603      	mov	r3, r0
   1058c:	460c      	mov	r4, r1
   1058e:	4619      	mov	r1, r3
   10590:	4622      	mov	r2, r4
   10592:	4b1a      	ldr	r3, [pc, #104]	; (105fc <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   10594:	4608      	mov	r0, r1
   10596:	4611      	mov	r1, r2
   10598:	4798      	blx	r3
   1059a:	4603      	mov	r3, r0
   1059c:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   1059e:	7bbb      	ldrb	r3, [r7, #14]
   105a0:	f1c3 0302 	rsb	r3, r3, #2
   105a4:	f107 0210 	add.w	r2, r7, #16
   105a8:	4413      	add	r3, r2
   105aa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   105ae:	461a      	mov	r2, r3
   105b0:	7bbb      	ldrb	r3, [r7, #14]
   105b2:	4619      	mov	r1, r3
   105b4:	009b      	lsls	r3, r3, #2
   105b6:	1acb      	subs	r3, r1, r3
   105b8:	3306      	adds	r3, #6
   105ba:	fa02 f303 	lsl.w	r3, r2, r3
   105be:	b25a      	sxtb	r2, r3
   105c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   105c4:	4313      	orrs	r3, r2
   105c6:	b25b      	sxtb	r3, r3
   105c8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   105ca:	7bbb      	ldrb	r3, [r7, #14]
   105cc:	3301      	adds	r3, #1
   105ce:	73bb      	strb	r3, [r7, #14]
   105d0:	e78e      	b.n	104f0 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   105d2:	687b      	ldr	r3, [r7, #4]
   105d4:	681b      	ldr	r3, [r3, #0]
   105d6:	681b      	ldr	r3, [r3, #0]
   105d8:	7bfa      	ldrb	r2, [r7, #15]
   105da:	4611      	mov	r1, r2
   105dc:	6878      	ldr	r0, [r7, #4]
   105de:	4798      	blx	r3
   105e0:	4603      	mov	r3, r0
   105e2:	73fb      	strb	r3, [r7, #15]
	return result;
   105e4:	7bfb      	ldrb	r3, [r7, #15]
	
}
   105e6:	4618      	mov	r0, r3
   105e8:	3714      	adds	r7, #20
   105ea:	46bd      	mov	sp, r7
   105ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   105f0:	00015a71 	.word	0x00015a71
   105f4:	000104a1 	.word	0x000104a1
   105f8:	00015db1 	.word	0x00015db1
   105fc:	000160bd 	.word	0x000160bd
   10600:	00015a91 	.word	0x00015a91
   10604:	00015b5d 	.word	0x00015b5d
   10608:	000157f5 	.word	0x000157f5

0001060c <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   1060c:	b480      	push	{r7}
   1060e:	b085      	sub	sp, #20
   10610:	af00      	add	r7, sp, #0
   10612:	6078      	str	r0, [r7, #4]
   10614:	460b      	mov	r3, r1
   10616:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   10618:	2300      	movs	r3, #0
   1061a:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   1061c:	2300      	movs	r3, #0
   1061e:	60bb      	str	r3, [r7, #8]
   10620:	68bb      	ldr	r3, [r7, #8]
   10622:	2b07      	cmp	r3, #7
   10624:	dc13      	bgt.n	1064e <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   10626:	7bfb      	ldrb	r3, [r7, #15]
   10628:	005b      	lsls	r3, r3, #1
   1062a:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   1062c:	78fa      	ldrb	r2, [r7, #3]
   1062e:	68bb      	ldr	r3, [r7, #8]
   10630:	fa42 f303 	asr.w	r3, r2, r3
   10634:	b25b      	sxtb	r3, r3
   10636:	f003 0301 	and.w	r3, r3, #1
   1063a:	b25a      	sxtb	r2, r3
   1063c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10640:	4313      	orrs	r3, r2
   10642:	b25b      	sxtb	r3, r3
   10644:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10646:	68bb      	ldr	r3, [r7, #8]
   10648:	3301      	adds	r3, #1
   1064a:	60bb      	str	r3, [r7, #8]
   1064c:	e7e8      	b.n	10620 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   1064e:	7bfb      	ldrb	r3, [r7, #15]
   10650:	4618      	mov	r0, r3
   10652:	3714      	adds	r7, #20
   10654:	46bd      	mov	sp, r7
   10656:	bc80      	pop	{r7}
   10658:	4770      	bx	lr

0001065a <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   1065a:	b480      	push	{r7}
   1065c:	b085      	sub	sp, #20
   1065e:	af00      	add	r7, sp, #0
   10660:	60f8      	str	r0, [r7, #12]
   10662:	460b      	mov	r3, r1
   10664:	607a      	str	r2, [r7, #4]
   10666:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   10668:	7afb      	ldrb	r3, [r7, #11]
   1066a:	68fa      	ldr	r2, [r7, #12]
   1066c:	01db      	lsls	r3, r3, #7
   1066e:	4413      	add	r3, r2
   10670:	331c      	adds	r3, #28
   10672:	687a      	ldr	r2, [r7, #4]
   10674:	601a      	str	r2, [r3, #0]
}
   10676:	bf00      	nop
   10678:	3714      	adds	r7, #20
   1067a:	46bd      	mov	sp, r7
   1067c:	bc80      	pop	{r7}
   1067e:	4770      	bx	lr

00010680 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   10680:	b580      	push	{r7, lr}
   10682:	b082      	sub	sp, #8
   10684:	af00      	add	r7, sp, #0
   10686:	4603      	mov	r3, r0
   10688:	6039      	str	r1, [r7, #0]
   1068a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   1068c:	79fb      	ldrb	r3, [r7, #7]
   1068e:	683a      	ldr	r2, [r7, #0]
   10690:	4619      	mov	r1, r3
   10692:	4803      	ldr	r0, [pc, #12]	; (106a0 <_gpio_toggle_level+0x20>)
   10694:	4b03      	ldr	r3, [pc, #12]	; (106a4 <_gpio_toggle_level+0x24>)
   10696:	4798      	blx	r3
}
   10698:	bf00      	nop
   1069a:	3708      	adds	r7, #8
   1069c:	46bd      	mov	sp, r7
   1069e:	bd80      	pop	{r7, pc}
   106a0:	41008000 	.word	0x41008000
   106a4:	0001065b 	.word	0x0001065b

000106a8 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   106a8:	b580      	push	{r7, lr}
   106aa:	b082      	sub	sp, #8
   106ac:	af00      	add	r7, sp, #0
   106ae:	4603      	mov	r3, r0
   106b0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   106b2:	79fb      	ldrb	r3, [r7, #7]
   106b4:	115b      	asrs	r3, r3, #5
   106b6:	b2d8      	uxtb	r0, r3
   106b8:	79fb      	ldrb	r3, [r7, #7]
   106ba:	f003 031f 	and.w	r3, r3, #31
   106be:	2201      	movs	r2, #1
   106c0:	fa02 f303 	lsl.w	r3, r2, r3
   106c4:	4619      	mov	r1, r3
   106c6:	4b03      	ldr	r3, [pc, #12]	; (106d4 <gpio_toggle_pin_level+0x2c>)
   106c8:	4798      	blx	r3
}
   106ca:	bf00      	nop
   106cc:	3708      	adds	r7, #8
   106ce:	46bd      	mov	sp, r7
   106d0:	bd80      	pop	{r7, pc}
   106d2:	bf00      	nop
   106d4:	00010681 	.word	0x00010681

000106d8 <_ZL10blink_LED0v>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(void){
   106d8:	b580      	push	{r7, lr}
   106da:	af00      	add	r7, sp, #0
	gpio_toggle_pin_level(LED0);
   106dc:	2052      	movs	r0, #82	; 0x52
   106de:	4b02      	ldr	r3, [pc, #8]	; (106e8 <_ZL10blink_LED0v+0x10>)
   106e0:	4798      	blx	r3
}
   106e2:	bf00      	nop
   106e4:	bd80      	pop	{r7, pc}
   106e6:	bf00      	nop
   106e8:	000106a9 	.word	0x000106a9

000106ec <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   106ec:	b480      	push	{r7}
   106ee:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   106f0:	4b03      	ldr	r3, [pc, #12]	; (10700 <_ZL12Receiver1Intv+0x14>)
   106f2:	681b      	ldr	r3, [r3, #0]
   106f4:	2201      	movs	r2, #1
   106f6:	741a      	strb	r2, [r3, #16]
}
   106f8:	bf00      	nop
   106fa:	46bd      	mov	sp, r7
   106fc:	bc80      	pop	{r7}
   106fe:	4770      	bx	lr
   10700:	20003854 	.word	0x20003854

00010704 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
   10704:	b480      	push	{r7}
   10706:	b083      	sub	sp, #12
   10708:	af00      	add	r7, sp, #0
   1070a:	6078      	str	r0, [r7, #4]
   1070c:	6039      	str	r1, [r7, #0]
   1070e:	683b      	ldr	r3, [r7, #0]
   10710:	681a      	ldr	r2, [r3, #0]
   10712:	687b      	ldr	r3, [r7, #4]
   10714:	601a      	str	r2, [r3, #0]
   10716:	687b      	ldr	r3, [r7, #4]
   10718:	681b      	ldr	r3, [r3, #0]
   1071a:	3b14      	subs	r3, #20
   1071c:	681b      	ldr	r3, [r3, #0]
   1071e:	461a      	mov	r2, r3
   10720:	687b      	ldr	r3, [r7, #4]
   10722:	4413      	add	r3, r2
   10724:	683a      	ldr	r2, [r7, #0]
   10726:	6852      	ldr	r2, [r2, #4]
   10728:	601a      	str	r2, [r3, #0]
   1072a:	687b      	ldr	r3, [r7, #4]
   1072c:	4618      	mov	r0, r3
   1072e:	370c      	adds	r7, #12
   10730:	46bd      	mov	sp, r7
   10732:	bc80      	pop	{r7}
   10734:	4770      	bx	lr
	...

00010738 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   10738:	b580      	push	{r7, lr}
   1073a:	b082      	sub	sp, #8
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
   10740:	6039      	str	r1, [r7, #0]
   10742:	687a      	ldr	r2, [r7, #4]
   10744:	683b      	ldr	r3, [r7, #0]
   10746:	3304      	adds	r3, #4
   10748:	4619      	mov	r1, r3
   1074a:	4610      	mov	r0, r2
   1074c:	4b11      	ldr	r3, [pc, #68]	; (10794 <_ZN15ARINC_InterfaceC2Ev+0x5c>)
   1074e:	4798      	blx	r3
   10750:	683b      	ldr	r3, [r7, #0]
   10752:	681a      	ldr	r2, [r3, #0]
   10754:	687b      	ldr	r3, [r7, #4]
   10756:	601a      	str	r2, [r3, #0]
   10758:	687b      	ldr	r3, [r7, #4]
   1075a:	681b      	ldr	r3, [r3, #0]
   1075c:	3b14      	subs	r3, #20
   1075e:	681b      	ldr	r3, [r3, #0]
   10760:	461a      	mov	r2, r3
   10762:	687b      	ldr	r3, [r7, #4]
   10764:	4413      	add	r3, r2
   10766:	683a      	ldr	r2, [r7, #0]
   10768:	68d2      	ldr	r2, [r2, #12]
   1076a:	601a      	str	r2, [r3, #0]
   1076c:	687b      	ldr	r3, [r7, #4]
   1076e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   10772:	4618      	mov	r0, r3
   10774:	4b08      	ldr	r3, [pc, #32]	; (10798 <_ZN15ARINC_InterfaceC2Ev+0x60>)
   10776:	4798      	blx	r3
   10778:	687b      	ldr	r3, [r7, #4]
   1077a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1077e:	4618      	mov	r0, r3
   10780:	4b06      	ldr	r3, [pc, #24]	; (1079c <_ZN15ARINC_InterfaceC2Ev+0x64>)
   10782:	4798      	blx	r3
{
	ptrARINCInterface=this;
   10784:	4a06      	ldr	r2, [pc, #24]	; (107a0 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   10786:	687b      	ldr	r3, [r7, #4]
   10788:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   1078a:	687b      	ldr	r3, [r7, #4]
   1078c:	4618      	mov	r0, r3
   1078e:	3708      	adds	r7, #8
   10790:	46bd      	mov	sp, r7
   10792:	bd80      	pop	{r7, pc}
   10794:	00010705 	.word	0x00010705
   10798:	00013419 	.word	0x00013419
   1079c:	00010c45 	.word	0x00010c45
   107a0:	20003854 	.word	0x20003854

000107a4 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   107a4:	b580      	push	{r7, lr}
   107a6:	b082      	sub	sp, #8
   107a8:	af00      	add	r7, sp, #0
   107aa:	6078      	str	r0, [r7, #4]
   107ac:	687b      	ldr	r3, [r7, #4]
   107ae:	4618      	mov	r0, r3
   107b0:	4b10      	ldr	r3, [pc, #64]	; (107f4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
   107b2:	4798      	blx	r3
   107b4:	687b      	ldr	r3, [r7, #4]
   107b6:	4a10      	ldr	r2, [pc, #64]	; (107f8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
   107b8:	4611      	mov	r1, r2
   107ba:	4618      	mov	r0, r3
   107bc:	4b0f      	ldr	r3, [pc, #60]	; (107fc <_ZN15ARINC_InterfaceC1Ev+0x58>)
   107be:	4798      	blx	r3
   107c0:	4a0f      	ldr	r2, [pc, #60]	; (10800 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   107c2:	687b      	ldr	r3, [r7, #4]
   107c4:	601a      	str	r2, [r3, #0]
   107c6:	4a0e      	ldr	r2, [pc, #56]	; (10800 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   107c8:	687b      	ldr	r3, [r7, #4]
   107ca:	601a      	str	r2, [r3, #0]
   107cc:	687b      	ldr	r3, [r7, #4]
   107ce:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   107d2:	4618      	mov	r0, r3
   107d4:	4b0b      	ldr	r3, [pc, #44]	; (10804 <_ZN15ARINC_InterfaceC1Ev+0x60>)
   107d6:	4798      	blx	r3
   107d8:	687b      	ldr	r3, [r7, #4]
   107da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   107de:	4618      	mov	r0, r3
   107e0:	4b09      	ldr	r3, [pc, #36]	; (10808 <_ZN15ARINC_InterfaceC1Ev+0x64>)
   107e2:	4798      	blx	r3
	ptrARINCInterface=this;
   107e4:	4a09      	ldr	r2, [pc, #36]	; (1080c <_ZN15ARINC_InterfaceC1Ev+0x68>)
   107e6:	687b      	ldr	r3, [r7, #4]
   107e8:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   107ea:	687b      	ldr	r3, [r7, #4]
   107ec:	4618      	mov	r0, r3
   107ee:	3708      	adds	r7, #8
   107f0:	46bd      	mov	sp, r7
   107f2:	bd80      	pop	{r7, pc}
   107f4:	00010461 	.word	0x00010461
   107f8:	0001b8c8 	.word	0x0001b8c8
   107fc:	00010705 	.word	0x00010705
   10800:	0001b8b0 	.word	0x0001b8b0
   10804:	00013419 	.word	0x00013419
   10808:	00010c45 	.word	0x00010c45
   1080c:	20003854 	.word	0x20003854

00010810 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   10810:	b580      	push	{r7, lr}
   10812:	b082      	sub	sp, #8
   10814:	af00      	add	r7, sp, #0
   10816:	6078      	str	r0, [r7, #4]
   10818:	6039      	str	r1, [r7, #0]
   1081a:	683b      	ldr	r3, [r7, #0]
   1081c:	681a      	ldr	r2, [r3, #0]
   1081e:	687b      	ldr	r3, [r7, #4]
   10820:	601a      	str	r2, [r3, #0]
   10822:	687b      	ldr	r3, [r7, #4]
   10824:	681b      	ldr	r3, [r3, #0]
   10826:	3b14      	subs	r3, #20
   10828:	681b      	ldr	r3, [r3, #0]
   1082a:	461a      	mov	r2, r3
   1082c:	687b      	ldr	r3, [r7, #4]
   1082e:	4413      	add	r3, r2
   10830:	683a      	ldr	r2, [r7, #0]
   10832:	68d2      	ldr	r2, [r2, #12]
   10834:	601a      	str	r2, [r3, #0]
   10836:	687b      	ldr	r3, [r7, #4]
   10838:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1083c:	4618      	mov	r0, r3
   1083e:	4b0a      	ldr	r3, [pc, #40]	; (10868 <_ZN15ARINC_InterfaceD2Ev+0x58>)
   10840:	4798      	blx	r3
   10842:	687b      	ldr	r3, [r7, #4]
   10844:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   10848:	4618      	mov	r0, r3
   1084a:	4b08      	ldr	r3, [pc, #32]	; (1086c <_ZN15ARINC_InterfaceD2Ev+0x5c>)
   1084c:	4798      	blx	r3
   1084e:	687a      	ldr	r2, [r7, #4]
   10850:	683b      	ldr	r3, [r7, #0]
   10852:	3304      	adds	r3, #4
   10854:	4619      	mov	r1, r3
   10856:	4610      	mov	r0, r2
   10858:	4b05      	ldr	r3, [pc, #20]	; (10870 <_ZN15ARINC_InterfaceD2Ev+0x60>)
   1085a:	4798      	blx	r3
{
} //~ARINC_Interface
   1085c:	687b      	ldr	r3, [r7, #4]
   1085e:	4618      	mov	r0, r3
   10860:	3708      	adds	r7, #8
   10862:	46bd      	mov	sp, r7
   10864:	bd80      	pop	{r7, pc}
   10866:	bf00      	nop
   10868:	00010c65 	.word	0x00010c65
   1086c:	000134ad 	.word	0x000134ad
   10870:	00011289 	.word	0x00011289

00010874 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   10874:	b580      	push	{r7, lr}
   10876:	b082      	sub	sp, #8
   10878:	af00      	add	r7, sp, #0
   1087a:	6078      	str	r0, [r7, #4]
   1087c:	4a10      	ldr	r2, [pc, #64]	; (108c0 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	601a      	str	r2, [r3, #0]
   10882:	4a0f      	ldr	r2, [pc, #60]	; (108c0 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   10884:	687b      	ldr	r3, [r7, #4]
   10886:	601a      	str	r2, [r3, #0]
   10888:	687b      	ldr	r3, [r7, #4]
   1088a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1088e:	4618      	mov	r0, r3
   10890:	4b0c      	ldr	r3, [pc, #48]	; (108c4 <_ZN15ARINC_InterfaceD1Ev+0x50>)
   10892:	4798      	blx	r3
   10894:	687b      	ldr	r3, [r7, #4]
   10896:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   1089a:	4618      	mov	r0, r3
   1089c:	4b0a      	ldr	r3, [pc, #40]	; (108c8 <_ZN15ARINC_InterfaceD1Ev+0x54>)
   1089e:	4798      	blx	r3
   108a0:	687b      	ldr	r3, [r7, #4]
   108a2:	4a0a      	ldr	r2, [pc, #40]	; (108cc <_ZN15ARINC_InterfaceD1Ev+0x58>)
   108a4:	4611      	mov	r1, r2
   108a6:	4618      	mov	r0, r3
   108a8:	4b09      	ldr	r3, [pc, #36]	; (108d0 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
   108aa:	4798      	blx	r3
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	4618      	mov	r0, r3
   108b0:	4b08      	ldr	r3, [pc, #32]	; (108d4 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   108b2:	4798      	blx	r3
} //~ARINC_Interface
   108b4:	687b      	ldr	r3, [r7, #4]
   108b6:	4618      	mov	r0, r3
   108b8:	3708      	adds	r7, #8
   108ba:	46bd      	mov	sp, r7
   108bc:	bd80      	pop	{r7, pc}
   108be:	bf00      	nop
   108c0:	0001b8b0 	.word	0x0001b8b0
   108c4:	00010c65 	.word	0x00010c65
   108c8:	000134ad 	.word	0x000134ad
   108cc:	0001b8c8 	.word	0x0001b8c8
   108d0:	00011289 	.word	0x00011289
   108d4:	00010481 	.word	0x00010481

000108d8 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   108d8:	b580      	push	{r7, lr}
   108da:	b082      	sub	sp, #8
   108dc:	af00      	add	r7, sp, #0
   108de:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   108e0:	6878      	ldr	r0, [r7, #4]
   108e2:	4b06      	ldr	r3, [pc, #24]	; (108fc <_ZN15ARINC_InterfaceD0Ev+0x24>)
   108e4:	4798      	blx	r3
   108e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   108ea:	6878      	ldr	r0, [r7, #4]
   108ec:	4b04      	ldr	r3, [pc, #16]	; (10900 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   108ee:	4798      	blx	r3
   108f0:	687b      	ldr	r3, [r7, #4]
   108f2:	4618      	mov	r0, r3
   108f4:	3708      	adds	r7, #8
   108f6:	46bd      	mov	sp, r7
   108f8:	bd80      	pop	{r7, pc}
   108fa:	bf00      	nop
   108fc:	00010875 	.word	0x00010875
   10900:	00014585 	.word	0x00014585

00010904 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   10904:	b590      	push	{r4, r7, lr}
   10906:	b083      	sub	sp, #12
   10908:	af00      	add	r7, sp, #0
   1090a:	6078      	str	r0, [r7, #4]
	BITRATE0=false;
   1090c:	687b      	ldr	r3, [r7, #4]
   1090e:	2200      	movs	r2, #0
   10910:	731a      	strb	r2, [r3, #12]
	BITRATE1=false;
   10912:	687b      	ldr	r3, [r7, #4]
   10914:	2200      	movs	r2, #0
   10916:	735a      	strb	r2, [r3, #13]
	BITRATE2=false;
   10918:	687b      	ldr	r3, [r7, #4]
   1091a:	2200      	movs	r2, #0
   1091c:	739a      	strb	r2, [r3, #14]

	PARITY=false;
   1091e:	687b      	ldr	r3, [r7, #4]
   10920:	2200      	movs	r2, #0
   10922:	73da      	strb	r2, [r3, #15]
	HW_RESET();
   10924:	6878      	ldr	r0, [r7, #4]
   10926:	4b4f      	ldr	r3, [pc, #316]	; (10a64 <_ZN15ARINC_Interface4InitEv+0x160>)
   10928:	4798      	blx	r3
	statusHolt=HI3593.Init();
   1092a:	687b      	ldr	r3, [r7, #4]
   1092c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   10930:	4618      	mov	r0, r3
   10932:	4b4d      	ldr	r3, [pc, #308]	; (10a68 <_ZN15ARINC_Interface4InitEv+0x164>)
   10934:	4798      	blx	r3
   10936:	4603      	mov	r3, r0
   10938:	461a      	mov	r2, r3
   1093a:	687b      	ldr	r3, [r7, #4]
   1093c:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	if (statusHolt!=TSR_Default){
   10940:	687b      	ldr	r3, [r7, #4]
   10942:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
   10946:	2b01      	cmp	r3, #1
   10948:	d008      	beq.n	1095c <_ZN15ARINC_Interface4InitEv+0x58>
		usb.println("\n\rHI-3593 failed to initilize\n\r");
   1094a:	4948      	ldr	r1, [pc, #288]	; (10a6c <_ZN15ARINC_Interface4InitEv+0x168>)
   1094c:	4848      	ldr	r0, [pc, #288]	; (10a70 <_ZN15ARINC_Interface4InitEv+0x16c>)
   1094e:	4b49      	ldr	r3, [pc, #292]	; (10a74 <_ZN15ARINC_Interface4InitEv+0x170>)
   10950:	4798      	blx	r3
		isOK=false;
   10952:	687b      	ldr	r3, [r7, #4]
   10954:	2200      	movs	r2, #0
   10956:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
   1095a:	e069      	b.n	10a30 <_ZN15ARINC_Interface4InitEv+0x12c>
	}else{
		isOK=true;
   1095c:	687b      	ldr	r3, [r7, #4]
   1095e:	2201      	movs	r2, #1
   10960:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		newMessageR1=false;
   10964:	687b      	ldr	r3, [r7, #4]
   10966:	2200      	movs	r2, #0
   10968:	741a      	strb	r2, [r3, #16]
			BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   1096a:	687b      	ldr	r3, [r7, #4]
   1096c:	2200      	movs	r2, #0
   1096e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			MessageCount=0;
   10972:	687b      	ldr	r3, [r7, #4]
   10974:	2200      	movs	r2, #0
   10976:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			ARINCLabel = 0x1D;         // Write ARINC Label
   1097a:	687b      	ldr	r3, [r7, #4]
   1097c:	221d      	movs	r2, #29
   1097e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			Arate=0;
   10982:	687b      	ldr	r3, [r7, #4]
   10984:	2200      	movs	r2, #0
   10986:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
			(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   1098a:	687b      	ldr	r3, [r7, #4]
   1098c:	3311      	adds	r3, #17
   1098e:	2210      	movs	r2, #16
   10990:	2100      	movs	r1, #0
   10992:	4618      	mov	r0, r3
   10994:	4b38      	ldr	r3, [pc, #224]	; (10a78 <_ZN15ARINC_Interface4InitEv+0x174>)
   10996:	4798      	blx	r3
			
			// Setup the Labels
			HI3593.initReceiver1Labels();     // initial Rec1 labels
   10998:	687b      	ldr	r3, [r7, #4]
   1099a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   1099e:	4618      	mov	r0, r3
   109a0:	4b36      	ldr	r3, [pc, #216]	; (10a7c <_ZN15ARINC_Interface4InitEv+0x178>)
   109a2:	4798      	blx	r3
			HI3593.initReceiver2Labels();     // initial Rec2 labels
   109a4:	687b      	ldr	r3, [r7, #4]
   109a6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
   109aa:	4618      	mov	r0, r3
   109ac:	4b34      	ldr	r3, [pc, #208]	; (10a80 <_ZN15ARINC_Interface4InitEv+0x17c>)
   109ae:	4798      	blx	r3
			HI3593.MultiByteRead(REC1MEMORY, 32, LabelsAr1); // read in all Rec-1 labels into the passed array
   109b0:	687b      	ldr	r3, [r7, #4]
   109b2:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   109b6:	687b      	ldr	r3, [r7, #4]
   109b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   109bc:	2220      	movs	r2, #32
   109be:	2198      	movs	r1, #152	; 0x98
   109c0:	4c30      	ldr	r4, [pc, #192]	; (10a84 <_ZN15ARINC_Interface4InitEv+0x180>)
   109c2:	47a0      	blx	r4
			HI3593.MultiByteRead(REC2MEMORY, 32, LabelsAr2); // read in all Rec-2 labels into the passed array
   109c4:	687b      	ldr	r3, [r7, #4]
   109c6:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   109ca:	687b      	ldr	r3, [r7, #4]
   109cc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
   109d0:	2220      	movs	r2, #32
   109d2:	21b8      	movs	r1, #184	; 0xb8
   109d4:	4c2b      	ldr	r4, [pc, #172]	; (10a84 <_ZN15ARINC_Interface4InitEv+0x180>)
   109d6:	47a0      	blx	r4

			Rec1Parity =0;
   109d8:	687b      	ldr	r3, [r7, #4]
   109da:	2200      	movs	r2, #0
   109dc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
			Rec2Parity =0;
   109e0:	687b      	ldr	r3, [r7, #4]
   109e2:	2200      	movs	r2, #0
   109e4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b


			HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
   109e8:	687b      	ldr	r3, [r7, #4]
   109ea:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   109ee:	687b      	ldr	r3, [r7, #4]
   109f0:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
   109f4:	687b      	ldr	r3, [r7, #4]
   109f6:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
   109fa:	4313      	orrs	r3, r2
   109fc:	b2db      	uxtb	r3, r3
   109fe:	f063 0379 	orn	r3, r3, #121	; 0x79
   10a02:	b2db      	uxtb	r3, r3
   10a04:	461a      	mov	r2, r3
   10a06:	2110      	movs	r1, #16
   10a08:	4b1f      	ldr	r3, [pc, #124]	; (10a88 <_ZN15ARINC_Interface4InitEv+0x184>)
   10a0a:	4798      	blx	r3
			HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
   10a0c:	687b      	ldr	r3, [r7, #4]
   10a0e:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
   10a12:	687b      	ldr	r3, [r7, #4]
   10a14:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
   10a18:	687b      	ldr	r3, [r7, #4]
   10a1a:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
   10a1e:	4313      	orrs	r3, r2
   10a20:	b2db      	uxtb	r3, r3
   10a22:	f063 0379 	orn	r3, r3, #121	; 0x79
   10a26:	b2db      	uxtb	r3, r3
   10a28:	461a      	mov	r2, r3
   10a2a:	2124      	movs	r1, #36	; 0x24
   10a2c:	4b16      	ldr	r3, [pc, #88]	; (10a88 <_ZN15ARINC_Interface4InitEv+0x184>)
   10a2e:	4798      	blx	r3
	}
	
	timer.Init(&TIMER_ARINC);
   10a30:	687b      	ldr	r3, [r7, #4]
   10a32:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   10a36:	4915      	ldr	r1, [pc, #84]	; (10a8c <_ZN15ARINC_Interface4InitEv+0x188>)
   10a38:	4618      	mov	r0, r3
   10a3a:	4b15      	ldr	r3, [pc, #84]	; (10a90 <_ZN15ARINC_Interface4InitEv+0x18c>)
   10a3c:	4798      	blx	r3
	timer.add_periodic_task(blink_LED0,1);
   10a3e:	687b      	ldr	r3, [r7, #4]
   10a40:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
   10a44:	2201      	movs	r2, #1
   10a46:	4913      	ldr	r1, [pc, #76]	; (10a94 <_ZN15ARINC_Interface4InitEv+0x190>)
   10a48:	4618      	mov	r0, r3
   10a4a:	4b13      	ldr	r3, [pc, #76]	; (10a98 <_ZN15ARINC_Interface4InitEv+0x194>)
   10a4c:	4798      	blx	r3
	ext_irq_register(R1Int, Receiver1Int);
   10a4e:	4913      	ldr	r1, [pc, #76]	; (10a9c <_ZN15ARINC_Interface4InitEv+0x198>)
   10a50:	2057      	movs	r0, #87	; 0x57
   10a52:	4b13      	ldr	r3, [pc, #76]	; (10aa0 <_ZN15ARINC_Interface4InitEv+0x19c>)
   10a54:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   10a56:	687b      	ldr	r3, [r7, #4]
   10a58:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
}
   10a5c:	4618      	mov	r0, r3
   10a5e:	370c      	adds	r7, #12
   10a60:	46bd      	mov	sp, r7
   10a62:	bd90      	pop	{r4, r7, pc}
   10a64:	00010b05 	.word	0x00010b05
   10a68:	00010c85 	.word	0x00010c85
   10a6c:	0001aed4 	.word	0x0001aed4
   10a70:	20004e74 	.word	0x20004e74
   10a74:	00013cdd 	.word	0x00013cdd
   10a78:	00016869 	.word	0x00016869
   10a7c:	00010e99 	.word	0x00010e99
   10a80:	00011001 	.word	0x00011001
   10a84:	0001106d 	.word	0x0001106d
   10a88:	00011195 	.word	0x00011195
   10a8c:	20005048 	.word	0x20005048
   10a90:	000134c9 	.word	0x000134c9
   10a94:	000106d9 	.word	0x000106d9
   10a98:	0001356d 	.word	0x0001356d
   10a9c:	000106ed 	.word	0x000106ed
   10aa0:	00004795 	.word	0x00004795

00010aa4 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   10aa4:	b480      	push	{r7}
   10aa6:	b085      	sub	sp, #20
   10aa8:	af00      	add	r7, sp, #0
   10aaa:	6078      	str	r0, [r7, #4]
   10aac:	460b      	mov	r3, r1
   10aae:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10ab0:	2300      	movs	r3, #0
   10ab2:	73fb      	strb	r3, [r7, #15]
   10ab4:	7bfb      	ldrb	r3, [r7, #15]
   10ab6:	2b3f      	cmp	r3, #63	; 0x3f
   10ab8:	dc1e      	bgt.n	10af8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   10aba:	687b      	ldr	r3, [r7, #4]
   10abc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   10ac0:	7bfb      	ldrb	r3, [r7, #15]
   10ac2:	4413      	add	r3, r2
   10ac4:	b2db      	uxtb	r3, r3
   10ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10aca:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   10acc:	7bbb      	ldrb	r3, [r7, #14]
   10ace:	687a      	ldr	r2, [r7, #4]
   10ad0:	009b      	lsls	r3, r3, #2
   10ad2:	4413      	add	r3, r2
   10ad4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   10ad8:	78fa      	ldrb	r2, [r7, #3]
   10ada:	429a      	cmp	r2, r3
   10adc:	d108      	bne.n	10af0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
   10ade:	7bbb      	ldrb	r3, [r7, #14]
   10ae0:	3310      	adds	r3, #16
   10ae2:	009b      	lsls	r3, r3, #2
   10ae4:	687a      	ldr	r2, [r7, #4]
   10ae6:	4413      	add	r3, r2
   10ae8:	60bb      	str	r3, [r7, #8]
			return *data;
   10aea:	68bb      	ldr	r3, [r7, #8]
   10aec:	681b      	ldr	r3, [r3, #0]
   10aee:	e004      	b.n	10afa <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10af0:	7bfb      	ldrb	r3, [r7, #15]
   10af2:	3301      	adds	r3, #1
   10af4:	73fb      	strb	r3, [r7, #15]
   10af6:	e7dd      	b.n	10ab4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   10af8:	2300      	movs	r3, #0
}
   10afa:	4618      	mov	r0, r3
   10afc:	3714      	adds	r7, #20
   10afe:	46bd      	mov	sp, r7
   10b00:	bc80      	pop	{r7}
   10b02:	4770      	bx	lr

00010b04 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   10b04:	b580      	push	{r7, lr}
   10b06:	b082      	sub	sp, #8
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   10b0c:	2001      	movs	r0, #1
   10b0e:	4b03      	ldr	r3, [pc, #12]	; (10b1c <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   10b10:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   10b12:	bf00      	nop
   10b14:	3708      	adds	r7, #8
   10b16:	46bd      	mov	sp, r7
   10b18:	bd80      	pop	{r7, pc}
   10b1a:	bf00      	nop
   10b1c:	000046cd 	.word	0x000046cd

00010b20 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

   10b20:	b580      	push	{r7, lr}
   10b22:	b082      	sub	sp, #8
   10b24:	af00      	add	r7, sp, #0
   10b26:	6078      	str	r0, [r7, #4]
   10b28:	6039      	str	r1, [r7, #0]
   10b2a:	687b      	ldr	r3, [r7, #4]
   10b2c:	2b01      	cmp	r3, #1
   10b2e:	d10c      	bne.n	10b4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10b30:	683b      	ldr	r3, [r7, #0]
   10b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b36:	4293      	cmp	r3, r2
   10b38:	d107      	bne.n	10b4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10b3a:	4806      	ldr	r0, [pc, #24]	; (10b54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10b3c:	4b06      	ldr	r3, [pc, #24]	; (10b58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10b3e:	4798      	blx	r3
   10b40:	4a06      	ldr	r2, [pc, #24]	; (10b5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10b42:	4907      	ldr	r1, [pc, #28]	; (10b60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10b44:	4803      	ldr	r0, [pc, #12]	; (10b54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10b46:	4b07      	ldr	r3, [pc, #28]	; (10b64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10b48:	4798      	blx	r3
   10b4a:	bf00      	nop
   10b4c:	3708      	adds	r7, #8
   10b4e:	46bd      	mov	sp, r7
   10b50:	bd80      	pop	{r7, pc}
   10b52:	bf00      	nop
   10b54:	20003858 	.word	0x20003858
   10b58:	000107a5 	.word	0x000107a5
   10b5c:	20000000 	.word	0x20000000
   10b60:	00010875 	.word	0x00010875
   10b64:	00014579 	.word	0x00014579

00010b68 <_GLOBAL__sub_I_HexSymbols>:
   10b68:	b580      	push	{r7, lr}
   10b6a:	af00      	add	r7, sp, #0
   10b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10b70:	2001      	movs	r0, #1
   10b72:	4b01      	ldr	r3, [pc, #4]	; (10b78 <_GLOBAL__sub_I_HexSymbols+0x10>)
   10b74:	4798      	blx	r3
   10b76:	bd80      	pop	{r7, pc}
   10b78:	00010b21 	.word	0x00010b21

00010b7c <hri_port_set_OUT_reg>:
{
   10b7c:	b480      	push	{r7}
   10b7e:	b085      	sub	sp, #20
   10b80:	af00      	add	r7, sp, #0
   10b82:	60f8      	str	r0, [r7, #12]
   10b84:	460b      	mov	r3, r1
   10b86:	607a      	str	r2, [r7, #4]
   10b88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10b8a:	7afb      	ldrb	r3, [r7, #11]
   10b8c:	68fa      	ldr	r2, [r7, #12]
   10b8e:	01db      	lsls	r3, r3, #7
   10b90:	4413      	add	r3, r2
   10b92:	3318      	adds	r3, #24
   10b94:	687a      	ldr	r2, [r7, #4]
   10b96:	601a      	str	r2, [r3, #0]
}
   10b98:	bf00      	nop
   10b9a:	3714      	adds	r7, #20
   10b9c:	46bd      	mov	sp, r7
   10b9e:	bc80      	pop	{r7}
   10ba0:	4770      	bx	lr

00010ba2 <hri_port_clear_OUT_reg>:
{
   10ba2:	b480      	push	{r7}
   10ba4:	b085      	sub	sp, #20
   10ba6:	af00      	add	r7, sp, #0
   10ba8:	60f8      	str	r0, [r7, #12]
   10baa:	460b      	mov	r3, r1
   10bac:	607a      	str	r2, [r7, #4]
   10bae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10bb0:	7afb      	ldrb	r3, [r7, #11]
   10bb2:	68fa      	ldr	r2, [r7, #12]
   10bb4:	01db      	lsls	r3, r3, #7
   10bb6:	4413      	add	r3, r2
   10bb8:	3314      	adds	r3, #20
   10bba:	687a      	ldr	r2, [r7, #4]
   10bbc:	601a      	str	r2, [r3, #0]
}
   10bbe:	bf00      	nop
   10bc0:	3714      	adds	r7, #20
   10bc2:	46bd      	mov	sp, r7
   10bc4:	bc80      	pop	{r7}
   10bc6:	4770      	bx	lr

00010bc8 <_gpio_set_level>:
{
   10bc8:	b580      	push	{r7, lr}
   10bca:	b082      	sub	sp, #8
   10bcc:	af00      	add	r7, sp, #0
   10bce:	4603      	mov	r3, r0
   10bd0:	6039      	str	r1, [r7, #0]
   10bd2:	71fb      	strb	r3, [r7, #7]
   10bd4:	4613      	mov	r3, r2
   10bd6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10bd8:	79bb      	ldrb	r3, [r7, #6]
   10bda:	2b00      	cmp	r3, #0
   10bdc:	d006      	beq.n	10bec <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10bde:	79fb      	ldrb	r3, [r7, #7]
   10be0:	683a      	ldr	r2, [r7, #0]
   10be2:	4619      	mov	r1, r3
   10be4:	4806      	ldr	r0, [pc, #24]	; (10c00 <_gpio_set_level+0x38>)
   10be6:	4b07      	ldr	r3, [pc, #28]	; (10c04 <_gpio_set_level+0x3c>)
   10be8:	4798      	blx	r3
}
   10bea:	e005      	b.n	10bf8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10bec:	79fb      	ldrb	r3, [r7, #7]
   10bee:	683a      	ldr	r2, [r7, #0]
   10bf0:	4619      	mov	r1, r3
   10bf2:	4803      	ldr	r0, [pc, #12]	; (10c00 <_gpio_set_level+0x38>)
   10bf4:	4b04      	ldr	r3, [pc, #16]	; (10c08 <_gpio_set_level+0x40>)
   10bf6:	4798      	blx	r3
}
   10bf8:	bf00      	nop
   10bfa:	3708      	adds	r7, #8
   10bfc:	46bd      	mov	sp, r7
   10bfe:	bd80      	pop	{r7, pc}
   10c00:	41008000 	.word	0x41008000
   10c04:	00010b7d 	.word	0x00010b7d
   10c08:	00010ba3 	.word	0x00010ba3

00010c0c <gpio_set_pin_level>:
{
   10c0c:	b580      	push	{r7, lr}
   10c0e:	b082      	sub	sp, #8
   10c10:	af00      	add	r7, sp, #0
   10c12:	4603      	mov	r3, r0
   10c14:	460a      	mov	r2, r1
   10c16:	71fb      	strb	r3, [r7, #7]
   10c18:	4613      	mov	r3, r2
   10c1a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10c1c:	79fb      	ldrb	r3, [r7, #7]
   10c1e:	115b      	asrs	r3, r3, #5
   10c20:	b2d8      	uxtb	r0, r3
   10c22:	79fb      	ldrb	r3, [r7, #7]
   10c24:	f003 031f 	and.w	r3, r3, #31
   10c28:	2201      	movs	r2, #1
   10c2a:	fa02 f303 	lsl.w	r3, r2, r3
   10c2e:	79ba      	ldrb	r2, [r7, #6]
   10c30:	4619      	mov	r1, r3
   10c32:	4b03      	ldr	r3, [pc, #12]	; (10c40 <gpio_set_pin_level+0x34>)
   10c34:	4798      	blx	r3
}
   10c36:	bf00      	nop
   10c38:	3708      	adds	r7, #8
   10c3a:	46bd      	mov	sp, r7
   10c3c:	bd80      	pop	{r7, pc}
   10c3e:	bf00      	nop
   10c40:	00010bc9 	.word	0x00010bc9

00010c44 <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   10c44:	b580      	push	{r7, lr}
   10c46:	b082      	sub	sp, #8
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
   10c4c:	687b      	ldr	r3, [r7, #4]
   10c4e:	4618      	mov	r0, r3
   10c50:	4b03      	ldr	r3, [pc, #12]	; (10c60 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   10c52:	4798      	blx	r3
{
} //Holt_3593_Class
   10c54:	687b      	ldr	r3, [r7, #4]
   10c56:	4618      	mov	r0, r3
   10c58:	3708      	adds	r7, #8
   10c5a:	46bd      	mov	sp, r7
   10c5c:	bd80      	pop	{r7, pc}
   10c5e:	bf00      	nop
   10c60:	00011a0d 	.word	0x00011a0d

00010c64 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   10c64:	b580      	push	{r7, lr}
   10c66:	b082      	sub	sp, #8
   10c68:	af00      	add	r7, sp, #0
   10c6a:	6078      	str	r0, [r7, #4]
   10c6c:	687b      	ldr	r3, [r7, #4]
   10c6e:	4618      	mov	r0, r3
   10c70:	4b03      	ldr	r3, [pc, #12]	; (10c80 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   10c72:	4798      	blx	r3
{
} //~Holt_3593_Class
   10c74:	687b      	ldr	r3, [r7, #4]
   10c76:	4618      	mov	r0, r3
   10c78:	3708      	adds	r7, #8
   10c7a:	46bd      	mov	sp, r7
   10c7c:	bd80      	pop	{r7, pc}
   10c7e:	bf00      	nop
   10c80:	00011a2d 	.word	0x00011a2d

00010c84 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   10c84:	b590      	push	{r4, r7, lr}
   10c86:	b089      	sub	sp, #36	; 0x24
   10c88:	af02      	add	r7, sp, #8
   10c8a:	6078      	str	r0, [r7, #4]
	 
	 spi.setDescriptor(&SPI_HI3593);
   10c8c:	687b      	ldr	r3, [r7, #4]
   10c8e:	492d      	ldr	r1, [pc, #180]	; (10d44 <_ZN15Holt_3593_Class4InitEv+0xc0>)
   10c90:	4618      	mov	r0, r3
   10c92:	4b2d      	ldr	r3, [pc, #180]	; (10d48 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   10c94:	4798      	blx	r3
	  spi.init();
   10c96:	687b      	ldr	r3, [r7, #4]
   10c98:	4618      	mov	r0, r3
   10c9a:	4b2c      	ldr	r3, [pc, #176]	; (10d4c <_ZN15Holt_3593_Class4InitEv+0xc8>)
   10c9c:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   10c9e:	2340      	movs	r3, #64	; 0x40
   10ca0:	9301      	str	r3, [sp, #4]
   10ca2:	2300      	movs	r3, #0
   10ca4:	9300      	str	r3, [sp, #0]
   10ca6:	2300      	movs	r3, #0
   10ca8:	2201      	movs	r2, #1
   10caa:	2104      	movs	r1, #4
   10cac:	6878      	ldr	r0, [r7, #4]
   10cae:	4c28      	ldr	r4, [pc, #160]	; (10d50 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   10cb0:	47a0      	blx	r4
   10cb2:	4603      	mov	r3, r0
   10cb4:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   10cb6:	2300      	movs	r3, #0
   10cb8:	617b      	str	r3, [r7, #20]
   10cba:	697b      	ldr	r3, [r7, #20]
   10cbc:	2b1f      	cmp	r3, #31
   10cbe:	dc1b      	bgt.n	10cf8 <_ZN15Holt_3593_Class4InitEv+0x74>
	{
		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
   10cc0:	4a24      	ldr	r2, [pc, #144]	; (10d54 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   10cc2:	697b      	ldr	r3, [r7, #20]
   10cc4:	4413      	add	r3, r2
   10cc6:	781b      	ldrb	r3, [r3, #0]
   10cc8:	4619      	mov	r1, r3
   10cca:	6878      	ldr	r0, [r7, #4]
   10ccc:	4b22      	ldr	r3, [pc, #136]	; (10d58 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   10cce:	4798      	blx	r3
   10cd0:	4603      	mov	r3, r0
   10cd2:	4619      	mov	r1, r3
   10cd4:	4a21      	ldr	r2, [pc, #132]	; (10d5c <_ZN15Holt_3593_Class4InitEv+0xd8>)
   10cd6:	697b      	ldr	r3, [r7, #20]
   10cd8:	4413      	add	r3, r2
   10cda:	460a      	mov	r2, r1
   10cdc:	701a      	strb	r2, [r3, #0]
		LabelArray_1[i]=LabelArray_2[i];
   10cde:	4a1f      	ldr	r2, [pc, #124]	; (10d5c <_ZN15Holt_3593_Class4InitEv+0xd8>)
   10ce0:	697b      	ldr	r3, [r7, #20]
   10ce2:	4413      	add	r3, r2
   10ce4:	7819      	ldrb	r1, [r3, #0]
   10ce6:	4a1b      	ldr	r2, [pc, #108]	; (10d54 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   10ce8:	697b      	ldr	r3, [r7, #20]
   10cea:	4413      	add	r3, r2
   10cec:	460a      	mov	r2, r1
   10cee:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   10cf0:	697b      	ldr	r3, [r7, #20]
   10cf2:	3301      	adds	r3, #1
   10cf4:	617b      	str	r3, [r7, #20]
   10cf6:	e7e0      	b.n	10cba <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   10cf8:	2300      	movs	r3, #0
   10cfa:	613b      	str	r3, [r7, #16]
   10cfc:	693b      	ldr	r3, [r7, #16]
   10cfe:	2b02      	cmp	r3, #2
   10d00:	dc1b      	bgt.n	10d3a <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		LabelPriority2[i]=FlipByte(LabelPriority1[i]);
   10d02:	4a17      	ldr	r2, [pc, #92]	; (10d60 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   10d04:	693b      	ldr	r3, [r7, #16]
   10d06:	4413      	add	r3, r2
   10d08:	781b      	ldrb	r3, [r3, #0]
   10d0a:	4619      	mov	r1, r3
   10d0c:	6878      	ldr	r0, [r7, #4]
   10d0e:	4b12      	ldr	r3, [pc, #72]	; (10d58 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   10d10:	4798      	blx	r3
   10d12:	4603      	mov	r3, r0
   10d14:	4619      	mov	r1, r3
   10d16:	4a13      	ldr	r2, [pc, #76]	; (10d64 <_ZN15Holt_3593_Class4InitEv+0xe0>)
   10d18:	693b      	ldr	r3, [r7, #16]
   10d1a:	4413      	add	r3, r2
   10d1c:	460a      	mov	r2, r1
   10d1e:	701a      	strb	r2, [r3, #0]
		LabelPriority1[i]=LabelPriority2[i];
   10d20:	4a10      	ldr	r2, [pc, #64]	; (10d64 <_ZN15Holt_3593_Class4InitEv+0xe0>)
   10d22:	693b      	ldr	r3, [r7, #16]
   10d24:	4413      	add	r3, r2
   10d26:	7819      	ldrb	r1, [r3, #0]
   10d28:	4a0d      	ldr	r2, [pc, #52]	; (10d60 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   10d2a:	693b      	ldr	r3, [r7, #16]
   10d2c:	4413      	add	r3, r2
   10d2e:	460a      	mov	r2, r1
   10d30:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   10d32:	693b      	ldr	r3, [r7, #16]
   10d34:	3301      	adds	r3, #1
   10d36:	613b      	str	r3, [r7, #16]
   10d38:	e7e0      	b.n	10cfc <_ZN15Holt_3593_Class4InitEv+0x78>
	}
	return	status;
   10d3a:	7bfb      	ldrb	r3, [r7, #15]
 } 
   10d3c:	4618      	mov	r0, r3
   10d3e:	371c      	adds	r7, #28
   10d40:	46bd      	mov	sp, r7
   10d42:	bd90      	pop	{r4, r7, pc}
   10d44:	20004f68 	.word	0x20004f68
   10d48:	00011a79 	.word	0x00011a79
   10d4c:	00011a41 	.word	0x00011a41
   10d50:	00010d69 	.word	0x00010d69
   10d54:	20000178 	.word	0x20000178
   10d58:	00010f05 	.word	0x00010f05
   10d5c:	20003a4c 	.word	0x20003a4c
   10d60:	20000198 	.word	0x20000198
   10d64:	20003a6c 	.word	0x20003a6c

00010d68 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   10d68:	b580      	push	{r7, lr}
   10d6a:	b084      	sub	sp, #16
   10d6c:	af00      	add	r7, sp, #0
   10d6e:	6078      	str	r0, [r7, #4]
   10d70:	4608      	mov	r0, r1
   10d72:	4611      	mov	r1, r2
   10d74:	461a      	mov	r2, r3
   10d76:	4603      	mov	r3, r0
   10d78:	70fb      	strb	r3, [r7, #3]
   10d7a:	460b      	mov	r3, r1
   10d7c:	70bb      	strb	r3, [r7, #2]
   10d7e:	4613      	mov	r3, r2
   10d80:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   10d82:	2300      	movs	r3, #0
   10d84:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   10d86:	2104      	movs	r1, #4
   10d88:	6878      	ldr	r0, [r7, #4]
   10d8a:	4b18      	ldr	r3, [pc, #96]	; (10dec <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   10d8c:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   10d8e:	78fb      	ldrb	r3, [r7, #3]
   10d90:	461a      	mov	r2, r3
   10d92:	2138      	movs	r1, #56	; 0x38
   10d94:	6878      	ldr	r0, [r7, #4]
   10d96:	4b16      	ldr	r3, [pc, #88]	; (10df0 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   10d98:	4798      	blx	r3
	 cmd =  arate;
   10d9a:	7e3b      	ldrb	r3, [r7, #24]
   10d9c:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   10d9e:	787b      	ldrb	r3, [r7, #1]
   10da0:	011b      	lsls	r3, r3, #4
   10da2:	b25a      	sxtb	r2, r3
   10da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10da8:	4313      	orrs	r3, r2
   10daa:	b25b      	sxtb	r3, r3
   10dac:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   10dae:	78bb      	ldrb	r3, [r7, #2]
   10db0:	015b      	lsls	r3, r3, #5
   10db2:	b25a      	sxtb	r2, r3
   10db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10db8:	4313      	orrs	r3, r2
   10dba:	b25b      	sxtb	r3, r3
   10dbc:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   10dbe:	7f3b      	ldrb	r3, [r7, #28]
   10dc0:	019b      	lsls	r3, r3, #6
   10dc2:	b25a      	sxtb	r2, r3
   10dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10dc8:	4313      	orrs	r3, r2
   10dca:	b25b      	sxtb	r3, r3
   10dcc:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   10dce:	7bfb      	ldrb	r3, [r7, #15]
   10dd0:	461a      	mov	r2, r3
   10dd2:	2108      	movs	r1, #8
   10dd4:	6878      	ldr	r0, [r7, #4]
   10dd6:	4b06      	ldr	r3, [pc, #24]	; (10df0 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   10dd8:	4798      	blx	r3
	 return R_Register (R_TSR);
   10dda:	2180      	movs	r1, #128	; 0x80
   10ddc:	6878      	ldr	r0, [r7, #4]
   10dde:	4b05      	ldr	r3, [pc, #20]	; (10df4 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   10de0:	4798      	blx	r3
   10de2:	4603      	mov	r3, r0
	 
	 
 }
   10de4:	4618      	mov	r0, r3
   10de6:	3710      	adds	r7, #16
   10de8:	46bd      	mov	sp, r7
   10dea:	bd80      	pop	{r7, pc}
   10dec:	00011141 	.word	0x00011141
   10df0:	00011195 	.word	0x00011195
   10df4:	00011209 	.word	0x00011209

00010df8 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   10df8:	b580      	push	{r7, lr}
   10dfa:	b082      	sub	sp, #8
   10dfc:	af00      	add	r7, sp, #0
   10dfe:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   10e00:	687b      	ldr	r3, [r7, #4]
   10e02:	4618      	mov	r0, r3
   10e04:	4b04      	ldr	r3, [pc, #16]	; (10e18 <_ZN15Holt_3593_Class4openEv+0x20>)
   10e06:	4798      	blx	r3
		 SS_Low();
   10e08:	6878      	ldr	r0, [r7, #4]
   10e0a:	4b04      	ldr	r3, [pc, #16]	; (10e1c <_ZN15Holt_3593_Class4openEv+0x24>)
   10e0c:	4798      	blx	r3
 }
   10e0e:	bf00      	nop
   10e10:	3708      	adds	r7, #8
   10e12:	46bd      	mov	sp, r7
   10e14:	bd80      	pop	{r7, pc}
   10e16:	bf00      	nop
   10e18:	00011a9d 	.word	0x00011a9d
   10e1c:	00011251 	.word	0x00011251

00010e20 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   10e20:	b580      	push	{r7, lr}
   10e22:	b082      	sub	sp, #8
   10e24:	af00      	add	r7, sp, #0
   10e26:	6078      	str	r0, [r7, #4]
	    SS_High();
   10e28:	6878      	ldr	r0, [r7, #4]
   10e2a:	4b05      	ldr	r3, [pc, #20]	; (10e40 <_ZN15Holt_3593_Class5closeEv+0x20>)
   10e2c:	4798      	blx	r3
	  spi.disable();
   10e2e:	687b      	ldr	r3, [r7, #4]
   10e30:	4618      	mov	r0, r3
   10e32:	4b04      	ldr	r3, [pc, #16]	; (10e44 <_ZN15Holt_3593_Class5closeEv+0x24>)
   10e34:	4798      	blx	r3
	
  }
   10e36:	bf00      	nop
   10e38:	3708      	adds	r7, #8
   10e3a:	46bd      	mov	sp, r7
   10e3c:	bd80      	pop	{r7, pc}
   10e3e:	bf00      	nop
   10e40:	0001126d 	.word	0x0001126d
   10e44:	00011b61 	.word	0x00011b61

00010e48 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   10e48:	b580      	push	{r7, lr}
   10e4a:	b084      	sub	sp, #16
   10e4c:	af00      	add	r7, sp, #0
   10e4e:	6078      	str	r0, [r7, #4]
   10e50:	460b      	mov	r3, r1
   10e52:	70fb      	strb	r3, [r7, #3]
   10e54:	4613      	mov	r3, r2
   10e56:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   10e58:	78fb      	ldrb	r3, [r7, #3]
   10e5a:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   10e5c:	7bfb      	ldrb	r3, [r7, #15]
   10e5e:	4619      	mov	r1, r3
   10e60:	6878      	ldr	r0, [r7, #4]
   10e62:	4b0b      	ldr	r3, [pc, #44]	; (10e90 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   10e64:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   10e66:	78bb      	ldrb	r3, [r7, #2]
   10e68:	2b00      	cmp	r3, #0
   10e6a:	d00a      	beq.n	10e82 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   10e6c:	687b      	ldr	r3, [r7, #4]
   10e6e:	4618      	mov	r0, r3
   10e70:	4b08      	ldr	r3, [pc, #32]	; (10e94 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   10e72:	4798      	blx	r3
   10e74:	4603      	mov	r3, r0
   10e76:	f083 0301 	eor.w	r3, r3, #1
   10e7a:	b2db      	uxtb	r3, r3
   10e7c:	2b00      	cmp	r3, #0
   10e7e:	d000      	beq.n	10e82 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   10e80:	e7f4      	b.n	10e6c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   10e82:	78fb      	ldrb	r3, [r7, #3]
   10e84:	73bb      	strb	r3, [r7, #14]
   10e86:	7bbb      	ldrb	r3, [r7, #14]
  
}
   10e88:	4618      	mov	r0, r3
   10e8a:	3710      	adds	r7, #16
   10e8c:	46bd      	mov	sp, r7
   10e8e:	bd80      	pop	{r7, pc}
   10e90:	00010f55 	.word	0x00010f55
   10e94:	00011b81 	.word	0x00011b81

00010e98 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
   10e98:	b580      	push	{r7, lr}
   10e9a:	b084      	sub	sp, #16
   10e9c:	af00      	add	r7, sp, #0
   10e9e:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   10ea0:	6878      	ldr	r0, [r7, #4]
   10ea2:	4b14      	ldr	r3, [pc, #80]	; (10ef4 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
   10ea4:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   10ea6:	2201      	movs	r2, #1
   10ea8:	2114      	movs	r1, #20
   10eaa:	6878      	ldr	r0, [r7, #4]
   10eac:	4b12      	ldr	r3, [pc, #72]	; (10ef8 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   10eae:	4798      	blx	r3
   10eb0:	4603      	mov	r3, r0
   10eb2:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   10eb4:	231f      	movs	r3, #31
   10eb6:	73fb      	strb	r3, [r7, #15]
   10eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	db11      	blt.n	10ee4 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   10ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10ec4:	4a0d      	ldr	r2, [pc, #52]	; (10efc <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
   10ec6:	5cd3      	ldrb	r3, [r2, r3]
   10ec8:	2201      	movs	r2, #1
   10eca:	4619      	mov	r1, r3
   10ecc:	6878      	ldr	r0, [r7, #4]
   10ece:	4b0a      	ldr	r3, [pc, #40]	; (10ef8 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   10ed0:	4798      	blx	r3
   10ed2:	4603      	mov	r3, r0
   10ed4:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   10ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10eda:	b2db      	uxtb	r3, r3
   10edc:	3b01      	subs	r3, #1
   10ede:	b2db      	uxtb	r3, r3
   10ee0:	73fb      	strb	r3, [r7, #15]
   10ee2:	e7e9      	b.n	10eb8 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   10ee4:	6878      	ldr	r0, [r7, #4]
   10ee6:	4b06      	ldr	r3, [pc, #24]	; (10f00 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
   10ee8:	4798      	blx	r3
}
   10eea:	bf00      	nop
   10eec:	3710      	adds	r7, #16
   10eee:	46bd      	mov	sp, r7
   10ef0:	bd80      	pop	{r7, pc}
   10ef2:	bf00      	nop
   10ef4:	00010df9 	.word	0x00010df9
   10ef8:	00010e49 	.word	0x00010e49
   10efc:	20000178 	.word	0x20000178
   10f00:	00010e21 	.word	0x00010e21

00010f04 <_ZN15Holt_3593_Class8FlipByteEh>:
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
}

unsigned char Holt_3593_Class::FlipByte(unsigned char byte){
   10f04:	b480      	push	{r7}
   10f06:	b085      	sub	sp, #20
   10f08:	af00      	add	r7, sp, #0
   10f0a:	6078      	str	r0, [r7, #4]
   10f0c:	460b      	mov	r3, r1
   10f0e:	70fb      	strb	r3, [r7, #3]
	unsigned char rev=0;
   10f10:	2300      	movs	r3, #0
   10f12:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10f14:	2300      	movs	r3, #0
   10f16:	60bb      	str	r3, [r7, #8]
   10f18:	68bb      	ldr	r3, [r7, #8]
   10f1a:	2b07      	cmp	r3, #7
   10f1c:	dc13      	bgt.n	10f46 <_ZN15Holt_3593_Class8FlipByteEh+0x42>
	{
		rev=rev<<1;
   10f1e:	7bfb      	ldrb	r3, [r7, #15]
   10f20:	005b      	lsls	r3, r3, #1
   10f22:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   10f24:	78fa      	ldrb	r2, [r7, #3]
   10f26:	68bb      	ldr	r3, [r7, #8]
   10f28:	fa42 f303 	asr.w	r3, r2, r3
   10f2c:	b25b      	sxtb	r3, r3
   10f2e:	f003 0301 	and.w	r3, r3, #1
   10f32:	b25a      	sxtb	r2, r3
   10f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10f38:	4313      	orrs	r3, r2
   10f3a:	b25b      	sxtb	r3, r3
   10f3c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10f3e:	68bb      	ldr	r3, [r7, #8]
   10f40:	3301      	adds	r3, #1
   10f42:	60bb      	str	r3, [r7, #8]
   10f44:	e7e8      	b.n	10f18 <_ZN15Holt_3593_Class8FlipByteEh+0x14>
	}
	return rev;
   10f46:	7bfb      	ldrb	r3, [r7, #15]
}
   10f48:	4618      	mov	r0, r3
   10f4a:	3714      	adds	r7, #20
   10f4c:	46bd      	mov	sp, r7
   10f4e:	bc80      	pop	{r7}
   10f50:	4770      	bx	lr
	...

00010f54 <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   10f54:	b580      	push	{r7, lr}
   10f56:	b082      	sub	sp, #8
   10f58:	af00      	add	r7, sp, #0
   10f5a:	6078      	str	r0, [r7, #4]
   10f5c:	460b      	mov	r3, r1
   10f5e:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   10f60:	687b      	ldr	r3, [r7, #4]
   10f62:	4618      	mov	r0, r3
   10f64:	4b0f      	ldr	r3, [pc, #60]	; (10fa4 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   10f66:	4798      	blx	r3
   10f68:	4603      	mov	r3, r0
   10f6a:	f083 0301 	eor.w	r3, r3, #1
   10f6e:	b2db      	uxtb	r3, r3
   10f70:	2b00      	cmp	r3, #0
   10f72:	d000      	beq.n	10f76 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   10f74:	e7f4      	b.n	10f60 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   10f76:	687b      	ldr	r3, [r7, #4]
   10f78:	1cf9      	adds	r1, r7, #3
   10f7a:	2201      	movs	r2, #1
   10f7c:	4618      	mov	r0, r3
   10f7e:	4b0a      	ldr	r3, [pc, #40]	; (10fa8 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   10f80:	4798      	blx	r3
	while (!spi.isSPIReady());  
   10f82:	687b      	ldr	r3, [r7, #4]
   10f84:	4618      	mov	r0, r3
   10f86:	4b07      	ldr	r3, [pc, #28]	; (10fa4 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   10f88:	4798      	blx	r3
   10f8a:	4603      	mov	r3, r0
   10f8c:	f083 0301 	eor.w	r3, r3, #1
   10f90:	b2db      	uxtb	r3, r3
   10f92:	2b00      	cmp	r3, #0
   10f94:	d000      	beq.n	10f98 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   10f96:	e7f4      	b.n	10f82 <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   10f98:	78fb      	ldrb	r3, [r7, #3]
}
   10f9a:	4618      	mov	r0, r3
   10f9c:	3708      	adds	r7, #8
   10f9e:	46bd      	mov	sp, r7
   10fa0:	bd80      	pop	{r7, pc}
   10fa2:	bf00      	nop
   10fa4:	00011b81 	.word	0x00011b81
   10fa8:	00011ad9 	.word	0x00011ad9

00010fac <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   10fac:	b580      	push	{r7, lr}
   10fae:	b084      	sub	sp, #16
   10fb0:	af00      	add	r7, sp, #0
   10fb2:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   10fb4:	687b      	ldr	r3, [r7, #4]
   10fb6:	4618      	mov	r0, r3
   10fb8:	4b0f      	ldr	r3, [pc, #60]	; (10ff8 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   10fba:	4798      	blx	r3
   10fbc:	4603      	mov	r3, r0
   10fbe:	f083 0301 	eor.w	r3, r3, #1
   10fc2:	b2db      	uxtb	r3, r3
   10fc4:	2b00      	cmp	r3, #0
   10fc6:	d000      	beq.n	10fca <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   10fc8:	e7f4      	b.n	10fb4 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   10fca:	687b      	ldr	r3, [r7, #4]
   10fcc:	f107 010f 	add.w	r1, r7, #15
   10fd0:	2201      	movs	r2, #1
   10fd2:	4618      	mov	r0, r3
   10fd4:	4b09      	ldr	r3, [pc, #36]	; (10ffc <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   10fd6:	4798      	blx	r3
	while (!spi.isSPIReady());
   10fd8:	687b      	ldr	r3, [r7, #4]
   10fda:	4618      	mov	r0, r3
   10fdc:	4b06      	ldr	r3, [pc, #24]	; (10ff8 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   10fde:	4798      	blx	r3
   10fe0:	4603      	mov	r3, r0
   10fe2:	f083 0301 	eor.w	r3, r3, #1
   10fe6:	b2db      	uxtb	r3, r3
   10fe8:	2b00      	cmp	r3, #0
   10fea:	d000      	beq.n	10fee <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   10fec:	e7f4      	b.n	10fd8 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   10fee:	7bfb      	ldrb	r3, [r7, #15]
}	
   10ff0:	4618      	mov	r0, r3
   10ff2:	3710      	adds	r7, #16
   10ff4:	46bd      	mov	sp, r7
   10ff6:	bd80      	pop	{r7, pc}
   10ff8:	00011b81 	.word	0x00011b81
   10ffc:	00011b1d 	.word	0x00011b1d

00011000 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   11000:	b580      	push	{r7, lr}
   11002:	b084      	sub	sp, #16
   11004:	af00      	add	r7, sp, #0
   11006:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   11008:	6878      	ldr	r0, [r7, #4]
   1100a:	4b14      	ldr	r3, [pc, #80]	; (1105c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   1100c:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   1100e:	2201      	movs	r2, #1
   11010:	2128      	movs	r1, #40	; 0x28
   11012:	6878      	ldr	r0, [r7, #4]
   11014:	4b12      	ldr	r3, [pc, #72]	; (11060 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   11016:	4798      	blx	r3
   11018:	4603      	mov	r3, r0
   1101a:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   1101c:	231f      	movs	r3, #31
   1101e:	73fb      	strb	r3, [r7, #15]
   11020:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11024:	2b00      	cmp	r3, #0
   11026:	db11      	blt.n	1104c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   11028:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1102c:	4a0d      	ldr	r2, [pc, #52]	; (11064 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   1102e:	5cd3      	ldrb	r3, [r2, r3]
   11030:	2201      	movs	r2, #1
   11032:	4619      	mov	r1, r3
   11034:	6878      	ldr	r0, [r7, #4]
   11036:	4b0a      	ldr	r3, [pc, #40]	; (11060 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   11038:	4798      	blx	r3
   1103a:	4603      	mov	r3, r0
   1103c:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   1103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
   11042:	b2db      	uxtb	r3, r3
   11044:	3b01      	subs	r3, #1
   11046:	b2db      	uxtb	r3, r3
   11048:	73fb      	strb	r3, [r7, #15]
   1104a:	e7e9      	b.n	11020 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   1104c:	6878      	ldr	r0, [r7, #4]
   1104e:	4b06      	ldr	r3, [pc, #24]	; (11068 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   11050:	4798      	blx	r3
}
   11052:	bf00      	nop
   11054:	3710      	adds	r7, #16
   11056:	46bd      	mov	sp, r7
   11058:	bd80      	pop	{r7, pc}
   1105a:	bf00      	nop
   1105c:	00010df9 	.word	0x00010df9
   11060:	00010e49 	.word	0x00010e49
   11064:	20003a4c 	.word	0x20003a4c
   11068:	00010e21 	.word	0x00010e21

0001106c <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
   1106c:	b580      	push	{r7, lr}
   1106e:	b086      	sub	sp, #24
   11070:	af00      	add	r7, sp, #0
   11072:	60f8      	str	r0, [r7, #12]
   11074:	607b      	str	r3, [r7, #4]
   11076:	460b      	mov	r3, r1
   11078:	72fb      	strb	r3, [r7, #11]
   1107a:	4613      	mov	r3, r2
   1107c:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   open();
   1107e:	68f8      	ldr	r0, [r7, #12]
   11080:	4b16      	ldr	r3, [pc, #88]	; (110dc <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
   11082:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
   11084:	7afb      	ldrb	r3, [r7, #11]
   11086:	4619      	mov	r1, r3
   11088:	68f8      	ldr	r0, [r7, #12]
   1108a:	4b15      	ldr	r3, [pc, #84]	; (110e0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
   1108c:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
   1108e:	68fb      	ldr	r3, [r7, #12]
   11090:	4618      	mov	r0, r3
   11092:	4b14      	ldr	r3, [pc, #80]	; (110e4 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
   11094:	4798      	blx	r3
   11096:	4603      	mov	r3, r0
   11098:	f083 0301 	eor.w	r3, r3, #1
   1109c:	b2db      	uxtb	r3, r3
   1109e:	2b00      	cmp	r3, #0
   110a0:	d000      	beq.n	110a4 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
   110a2:	e7f4      	b.n	1108e <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   110a4:	2300      	movs	r3, #0
   110a6:	75fb      	strb	r3, [r7, #23]
   110a8:	7dfa      	ldrb	r2, [r7, #23]
   110aa:	7abb      	ldrb	r3, [r7, #10]
   110ac:	429a      	cmp	r2, r3
   110ae:	da0d      	bge.n	110cc <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
   110b0:	68f8      	ldr	r0, [r7, #12]
   110b2:	4b0d      	ldr	r3, [pc, #52]	; (110e8 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
   110b4:	4798      	blx	r3
   110b6:	4603      	mov	r3, r0
   110b8:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
   110ba:	7dfb      	ldrb	r3, [r7, #23]
   110bc:	687a      	ldr	r2, [r7, #4]
   110be:	4413      	add	r3, r2
   110c0:	7dba      	ldrb	r2, [r7, #22]
   110c2:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   110c4:	7dfb      	ldrb	r3, [r7, #23]
   110c6:	3301      	adds	r3, #1
   110c8:	75fb      	strb	r3, [r7, #23]
   110ca:	e7ed      	b.n	110a8 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
   110cc:	68f8      	ldr	r0, [r7, #12]
   110ce:	4b07      	ldr	r3, [pc, #28]	; (110ec <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
   110d0:	4798      	blx	r3
  
}
   110d2:	bf00      	nop
   110d4:	3718      	adds	r7, #24
   110d6:	46bd      	mov	sp, r7
   110d8:	bd80      	pop	{r7, pc}
   110da:	bf00      	nop
   110dc:	00010df9 	.word	0x00010df9
   110e0:	00010f55 	.word	0x00010f55
   110e4:	00011b81 	.word	0x00011b81
   110e8:	00010fad 	.word	0x00010fad
   110ec:	00010e21 	.word	0x00010e21

000110f0 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   110f0:	b580      	push	{r7, lr}
   110f2:	b084      	sub	sp, #16
   110f4:	af00      	add	r7, sp, #0
   110f6:	6078      	str	r0, [r7, #4]
   110f8:	460b      	mov	r3, r1
   110fa:	70fb      	strb	r3, [r7, #3]
   110fc:	4613      	mov	r3, r2
   110fe:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   11100:	78fb      	ldrb	r3, [r7, #3]
   11102:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   11104:	7bfb      	ldrb	r3, [r7, #15]
   11106:	4619      	mov	r1, r3
   11108:	6878      	ldr	r0, [r7, #4]
   1110a:	4b0b      	ldr	r3, [pc, #44]	; (11138 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   1110c:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   1110e:	78bb      	ldrb	r3, [r7, #2]
   11110:	2b00      	cmp	r3, #0
   11112:	d00a      	beq.n	1112a <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   11114:	687b      	ldr	r3, [r7, #4]
   11116:	4618      	mov	r0, r3
   11118:	4b08      	ldr	r3, [pc, #32]	; (1113c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   1111a:	4798      	blx	r3
   1111c:	4603      	mov	r3, r0
   1111e:	f083 0301 	eor.w	r3, r3, #1
   11122:	b2db      	uxtb	r3, r3
   11124:	2b00      	cmp	r3, #0
   11126:	d000      	beq.n	1112a <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   11128:	e7f4      	b.n	11114 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   1112a:	78fb      	ldrb	r3, [r7, #3]
   1112c:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   1112e:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   11130:	4618      	mov	r0, r3
   11132:	3710      	adds	r7, #16
   11134:	46bd      	mov	sp, r7
   11136:	bd80      	pop	{r7, pc}
   11138:	00010f55 	.word	0x00010f55
   1113c:	00011b81 	.word	0x00011b81

00011140 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   11140:	b580      	push	{r7, lr}
   11142:	b084      	sub	sp, #16
   11144:	af00      	add	r7, sp, #0
   11146:	6078      	str	r0, [r7, #4]
   11148:	460b      	mov	r3, r1
   1114a:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   1114c:	78fb      	ldrb	r3, [r7, #3]
   1114e:	73fb      	strb	r3, [r7, #15]
  open();
   11150:	6878      	ldr	r0, [r7, #4]
   11152:	4b0c      	ldr	r3, [pc, #48]	; (11184 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   11154:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   11156:	7bfb      	ldrb	r3, [r7, #15]
   11158:	4619      	mov	r1, r3
   1115a:	6878      	ldr	r0, [r7, #4]
   1115c:	4b0a      	ldr	r3, [pc, #40]	; (11188 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   1115e:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   11160:	687b      	ldr	r3, [r7, #4]
   11162:	4618      	mov	r0, r3
   11164:	4b09      	ldr	r3, [pc, #36]	; (1118c <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   11166:	4798      	blx	r3
   11168:	4603      	mov	r3, r0
   1116a:	f083 0301 	eor.w	r3, r3, #1
   1116e:	b2db      	uxtb	r3, r3
   11170:	2b00      	cmp	r3, #0
   11172:	d000      	beq.n	11176 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   11174:	e7f4      	b.n	11160 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   11176:	6878      	ldr	r0, [r7, #4]
   11178:	4b05      	ldr	r3, [pc, #20]	; (11190 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   1117a:	4798      	blx	r3
}
   1117c:	bf00      	nop
   1117e:	3710      	adds	r7, #16
   11180:	46bd      	mov	sp, r7
   11182:	bd80      	pop	{r7, pc}
   11184:	00010df9 	.word	0x00010df9
   11188:	00010f55 	.word	0x00010f55
   1118c:	00011b81 	.word	0x00011b81
   11190:	00010e21 	.word	0x00010e21

00011194 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   11194:	b580      	push	{r7, lr}
   11196:	b082      	sub	sp, #8
   11198:	af00      	add	r7, sp, #0
   1119a:	6078      	str	r0, [r7, #4]
   1119c:	460b      	mov	r3, r1
   1119e:	70fb      	strb	r3, [r7, #3]
   111a0:	4613      	mov	r3, r2
   111a2:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   111a4:	6878      	ldr	r0, [r7, #4]
   111a6:	4b14      	ldr	r3, [pc, #80]	; (111f8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   111a8:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   111aa:	78fb      	ldrb	r3, [r7, #3]
   111ac:	4619      	mov	r1, r3
   111ae:	6878      	ldr	r0, [r7, #4]
   111b0:	4b12      	ldr	r3, [pc, #72]	; (111fc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   111b2:	4798      	blx	r3
  while (!spi.isSPIReady());    
   111b4:	687b      	ldr	r3, [r7, #4]
   111b6:	4618      	mov	r0, r3
   111b8:	4b11      	ldr	r3, [pc, #68]	; (11200 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   111ba:	4798      	blx	r3
   111bc:	4603      	mov	r3, r0
   111be:	f083 0301 	eor.w	r3, r3, #1
   111c2:	b2db      	uxtb	r3, r3
   111c4:	2b00      	cmp	r3, #0
   111c6:	d000      	beq.n	111ca <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   111c8:	e7f4      	b.n	111b4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   111ca:	78bb      	ldrb	r3, [r7, #2]
   111cc:	4619      	mov	r1, r3
   111ce:	6878      	ldr	r0, [r7, #4]
   111d0:	4b0a      	ldr	r3, [pc, #40]	; (111fc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   111d2:	4798      	blx	r3
  while (!spi.isSPIReady());    
   111d4:	687b      	ldr	r3, [r7, #4]
   111d6:	4618      	mov	r0, r3
   111d8:	4b09      	ldr	r3, [pc, #36]	; (11200 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   111da:	4798      	blx	r3
   111dc:	4603      	mov	r3, r0
   111de:	f083 0301 	eor.w	r3, r3, #1
   111e2:	b2db      	uxtb	r3, r3
   111e4:	2b00      	cmp	r3, #0
   111e6:	d000      	beq.n	111ea <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   111e8:	e7f4      	b.n	111d4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   111ea:	6878      	ldr	r0, [r7, #4]
   111ec:	4b05      	ldr	r3, [pc, #20]	; (11204 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   111ee:	4798      	blx	r3
}
   111f0:	bf00      	nop
   111f2:	3708      	adds	r7, #8
   111f4:	46bd      	mov	sp, r7
   111f6:	bd80      	pop	{r7, pc}
   111f8:	00010df9 	.word	0x00010df9
   111fc:	00010f55 	.word	0x00010f55
   11200:	00011b81 	.word	0x00011b81
   11204:	00010e21 	.word	0x00010e21

00011208 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   11208:	b580      	push	{r7, lr}
   1120a:	b084      	sub	sp, #16
   1120c:	af00      	add	r7, sp, #0
   1120e:	6078      	str	r0, [r7, #4]
   11210:	460b      	mov	r3, r1
   11212:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   11214:	6878      	ldr	r0, [r7, #4]
   11216:	4b0a      	ldr	r3, [pc, #40]	; (11240 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   11218:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   1121a:	78fb      	ldrb	r3, [r7, #3]
   1121c:	2201      	movs	r2, #1
   1121e:	4619      	mov	r1, r3
   11220:	6878      	ldr	r0, [r7, #4]
   11222:	4b08      	ldr	r3, [pc, #32]	; (11244 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   11224:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   11226:	6878      	ldr	r0, [r7, #4]
   11228:	4b07      	ldr	r3, [pc, #28]	; (11248 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   1122a:	4798      	blx	r3
   1122c:	4603      	mov	r3, r0
   1122e:	73fb      	strb	r3, [r7, #15]
         
  close();
   11230:	6878      	ldr	r0, [r7, #4]
   11232:	4b06      	ldr	r3, [pc, #24]	; (1124c <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   11234:	4798      	blx	r3
  return R_Reg;
   11236:	7bfb      	ldrb	r3, [r7, #15]
}
   11238:	4618      	mov	r0, r3
   1123a:	3710      	adds	r7, #16
   1123c:	46bd      	mov	sp, r7
   1123e:	bd80      	pop	{r7, pc}
   11240:	00010df9 	.word	0x00010df9
   11244:	000110f1 	.word	0x000110f1
   11248:	00010fad 	.word	0x00010fad
   1124c:	00010e21 	.word	0x00010e21

00011250 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   11250:	b580      	push	{r7, lr}
   11252:	b082      	sub	sp, #8
   11254:	af00      	add	r7, sp, #0
   11256:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   11258:	2100      	movs	r1, #0
   1125a:	204e      	movs	r0, #78	; 0x4e
   1125c:	4b02      	ldr	r3, [pc, #8]	; (11268 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   1125e:	4798      	blx	r3
}
   11260:	bf00      	nop
   11262:	3708      	adds	r7, #8
   11264:	46bd      	mov	sp, r7
   11266:	bd80      	pop	{r7, pc}
   11268:	00010c0d 	.word	0x00010c0d

0001126c <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   1126c:	b580      	push	{r7, lr}
   1126e:	b082      	sub	sp, #8
   11270:	af00      	add	r7, sp, #0
   11272:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   11274:	2101      	movs	r1, #1
   11276:	204e      	movs	r0, #78	; 0x4e
   11278:	4b02      	ldr	r3, [pc, #8]	; (11284 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   1127a:	4798      	blx	r3
}
   1127c:	bf00      	nop
   1127e:	3708      	adds	r7, #8
   11280:	46bd      	mov	sp, r7
   11282:	bd80      	pop	{r7, pc}
   11284:	00010c0d 	.word	0x00010c0d

00011288 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   11288:	b480      	push	{r7}
   1128a:	b083      	sub	sp, #12
   1128c:	af00      	add	r7, sp, #0
   1128e:	6078      	str	r0, [r7, #4]
   11290:	6039      	str	r1, [r7, #0]
   11292:	683b      	ldr	r3, [r7, #0]
   11294:	681a      	ldr	r2, [r3, #0]
   11296:	687b      	ldr	r3, [r7, #4]
   11298:	601a      	str	r2, [r3, #0]
   1129a:	687b      	ldr	r3, [r7, #4]
   1129c:	681b      	ldr	r3, [r3, #0]
   1129e:	3b14      	subs	r3, #20
   112a0:	681b      	ldr	r3, [r3, #0]
   112a2:	461a      	mov	r2, r3
   112a4:	687b      	ldr	r3, [r7, #4]
   112a6:	4413      	add	r3, r2
   112a8:	683a      	ldr	r2, [r7, #0]
   112aa:	6852      	ldr	r2, [r2, #4]
   112ac:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   112ae:	687b      	ldr	r3, [r7, #4]
   112b0:	4618      	mov	r0, r3
   112b2:	370c      	adds	r7, #12
   112b4:	46bd      	mov	sp, r7
   112b6:	bc80      	pop	{r7}
   112b8:	4770      	bx	lr

000112ba <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   112ba:	b590      	push	{r4, r7, lr}
   112bc:	b085      	sub	sp, #20
   112be:	af00      	add	r7, sp, #0
   112c0:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   112c2:	687b      	ldr	r3, [r7, #4]
   112c4:	681b      	ldr	r3, [r3, #0]
   112c6:	3310      	adds	r3, #16
   112c8:	681c      	ldr	r4, [r3, #0]
   112ca:	687b      	ldr	r3, [r7, #4]
   112cc:	681b      	ldr	r3, [r3, #0]
   112ce:	3b14      	subs	r3, #20
   112d0:	681b      	ldr	r3, [r3, #0]
   112d2:	461a      	mov	r2, r3
   112d4:	687b      	ldr	r3, [r7, #4]
   112d6:	4413      	add	r3, r2
   112d8:	681b      	ldr	r3, [r3, #0]
   112da:	3304      	adds	r3, #4
   112dc:	681b      	ldr	r3, [r3, #0]
   112de:	687a      	ldr	r2, [r7, #4]
   112e0:	6812      	ldr	r2, [r2, #0]
   112e2:	3a14      	subs	r2, #20
   112e4:	6812      	ldr	r2, [r2, #0]
   112e6:	4611      	mov	r1, r2
   112e8:	687a      	ldr	r2, [r7, #4]
   112ea:	440a      	add	r2, r1
   112ec:	f44f 7187 	mov.w	r1, #270	; 0x10e
   112f0:	4610      	mov	r0, r2
   112f2:	4798      	blx	r3
   112f4:	4603      	mov	r3, r0
   112f6:	4619      	mov	r1, r3
   112f8:	6878      	ldr	r0, [r7, #4]
   112fa:	47a0      	blx	r4
   112fc:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   112fe:	68fb      	ldr	r3, [r7, #12]
   11300:	0c9b      	lsrs	r3, r3, #18
   11302:	b2db      	uxtb	r3, r3
   11304:	f003 0303 	and.w	r3, r3, #3
   11308:	72fb      	strb	r3, [r7, #11]

	return key;
   1130a:	7afb      	ldrb	r3, [r7, #11]
}
   1130c:	4618      	mov	r0, r3
   1130e:	3714      	adds	r7, #20
   11310:	46bd      	mov	sp, r7
   11312:	bd90      	pop	{r4, r7, pc}

00011314 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   11314:	b480      	push	{r7}
   11316:	b083      	sub	sp, #12
   11318:	af00      	add	r7, sp, #0
   1131a:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1131c:	2300      	movs	r3, #0
	}
   1131e:	4618      	mov	r0, r3
   11320:	370c      	adds	r7, #12
   11322:	46bd      	mov	sp, r7
   11324:	bc80      	pop	{r7}
   11326:	4770      	bx	lr

00011328 <free>:
//............................................................................
extern "C" void free(void *)
	{
   11328:	b480      	push	{r7}
   1132a:	b083      	sub	sp, #12
   1132c:	af00      	add	r7, sp, #0
   1132e:	6078      	str	r0, [r7, #4]
	}
   11330:	bf00      	nop
   11332:	370c      	adds	r7, #12
   11334:	46bd      	mov	sp, r7
   11336:	bc80      	pop	{r7}
   11338:	4770      	bx	lr

0001133a <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   1133a:	b480      	push	{r7}
   1133c:	b083      	sub	sp, #12
   1133e:	af00      	add	r7, sp, #0
   11340:	6078      	str	r0, [r7, #4]
    return (void *)0;
   11342:	2300      	movs	r3, #0
	}
   11344:	4618      	mov	r0, r3
   11346:	370c      	adds	r7, #12
   11348:	46bd      	mov	sp, r7
   1134a:	bc80      	pop	{r7}
   1134c:	4770      	bx	lr

0001134e <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   1134e:	b480      	push	{r7}
   11350:	af00      	add	r7, sp, #0
		}
   11352:	bf00      	nop
   11354:	46bd      	mov	sp, r7
   11356:	bc80      	pop	{r7}
   11358:	4770      	bx	lr
	...

0001135c <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   1135c:	b580      	push	{r7, lr}
   1135e:	b082      	sub	sp, #8
   11360:	af00      	add	r7, sp, #0
   11362:	6078      	str	r0, [r7, #4]
	free(p);
   11364:	6878      	ldr	r0, [r7, #4]
   11366:	4b03      	ldr	r3, [pc, #12]	; (11374 <_ZdlPv+0x18>)
   11368:	4798      	blx	r3
	}
   1136a:	bf00      	nop
   1136c:	3708      	adds	r7, #8
   1136e:	46bd      	mov	sp, r7
   11370:	bd80      	pop	{r7, pc}
   11372:	bf00      	nop
   11374:	00011329 	.word	0x00011329

00011378 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   11378:	b480      	push	{r7}
   1137a:	b083      	sub	sp, #12
   1137c:	af00      	add	r7, sp, #0
   1137e:	6078      	str	r0, [r7, #4]
   11380:	687b      	ldr	r3, [r7, #4]
   11382:	4618      	mov	r0, r3
   11384:	370c      	adds	r7, #12
   11386:	46bd      	mov	sp, r7
   11388:	bc80      	pop	{r7}
   1138a:	4770      	bx	lr

0001138c <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   1138c:	b480      	push	{r7}
   1138e:	b083      	sub	sp, #12
   11390:	af00      	add	r7, sp, #0
   11392:	6078      	str	r0, [r7, #4]
   11394:	687b      	ldr	r3, [r7, #4]
   11396:	4618      	mov	r0, r3
   11398:	370c      	adds	r7, #12
   1139a:	46bd      	mov	sp, r7
   1139c:	bc80      	pop	{r7}
   1139e:	4770      	bx	lr

000113a0 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   113a0:	b580      	push	{r7, lr}
   113a2:	b084      	sub	sp, #16
   113a4:	af00      	add	r7, sp, #0
   113a6:	6078      	str	r0, [r7, #4]
   113a8:	460b      	mov	r3, r1
   113aa:	70fb      	strb	r3, [r7, #3]
   113ac:	4613      	mov	r3, r2
   113ae:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   113b0:	687b      	ldr	r3, [r7, #4]
   113b2:	78fa      	ldrb	r2, [r7, #3]
   113b4:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   113b6:	78bb      	ldrb	r3, [r7, #2]
   113b8:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   113ba:	7bfb      	ldrb	r3, [r7, #15]
   113bc:	2b00      	cmp	r3, #0
   113be:	f000 80ba 	beq.w	11536 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   113c2:	78fb      	ldrb	r3, [r7, #3]
   113c4:	2b14      	cmp	r3, #20
   113c6:	f200 80a2 	bhi.w	1150e <_ZN11Diagnostics12troubleshootEhb+0x16e>
   113ca:	a201      	add	r2, pc, #4	; (adr r2, 113d0 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   113cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   113d0:	00011425 	.word	0x00011425
   113d4:	00011439 	.word	0x00011439
   113d8:	00011443 	.word	0x00011443
   113dc:	0001144d 	.word	0x0001144d
   113e0:	00011457 	.word	0x00011457
   113e4:	00011469 	.word	0x00011469
   113e8:	00011473 	.word	0x00011473
   113ec:	00011485 	.word	0x00011485
   113f0:	00011497 	.word	0x00011497
   113f4:	000114ab 	.word	0x000114ab
   113f8:	000114b5 	.word	0x000114b5
   113fc:	0001142f 	.word	0x0001142f
   11400:	000114a1 	.word	0x000114a1
   11404:	000114bf 	.word	0x000114bf
   11408:	000114c9 	.word	0x000114c9
   1140c:	000114d3 	.word	0x000114d3
   11410:	000114dd 	.word	0x000114dd
   11414:	000114e7 	.word	0x000114e7
   11418:	000114f1 	.word	0x000114f1
   1141c:	000114fb 	.word	0x000114fb
   11420:	00011505 	.word	0x00011505
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   11424:	4946      	ldr	r1, [pc, #280]	; (11540 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   11426:	4847      	ldr	r0, [pc, #284]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11428:	4b47      	ldr	r3, [pc, #284]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1142a:	4798      	blx	r3
      break;
   1142c:	e074      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   1142e:	4947      	ldr	r1, [pc, #284]	; (1154c <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   11430:	4844      	ldr	r0, [pc, #272]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11432:	4b45      	ldr	r3, [pc, #276]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11434:	4798      	blx	r3
      break;
   11436:	e06f      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   11438:	4945      	ldr	r1, [pc, #276]	; (11550 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   1143a:	4842      	ldr	r0, [pc, #264]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1143c:	4b42      	ldr	r3, [pc, #264]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1143e:	4798      	blx	r3
      break;
   11440:	e06a      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   11442:	4944      	ldr	r1, [pc, #272]	; (11554 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   11444:	483f      	ldr	r0, [pc, #252]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11446:	4b40      	ldr	r3, [pc, #256]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11448:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   1144a:	e065      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   1144c:	4942      	ldr	r1, [pc, #264]	; (11558 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   1144e:	483d      	ldr	r0, [pc, #244]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11450:	4b3d      	ldr	r3, [pc, #244]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11452:	4798      	blx	r3
      break;
   11454:	e060      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   11456:	4941      	ldr	r1, [pc, #260]	; (1155c <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   11458:	483a      	ldr	r0, [pc, #232]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1145a:	4b3b      	ldr	r3, [pc, #236]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1145c:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   1145e:	4940      	ldr	r1, [pc, #256]	; (11560 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   11460:	4838      	ldr	r0, [pc, #224]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11462:	4b39      	ldr	r3, [pc, #228]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11464:	4798      	blx	r3
      break;
   11466:	e057      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   11468:	493e      	ldr	r1, [pc, #248]	; (11564 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   1146a:	4836      	ldr	r0, [pc, #216]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1146c:	4b36      	ldr	r3, [pc, #216]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1146e:	4798      	blx	r3
      break;
   11470:	e052      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   11472:	493d      	ldr	r1, [pc, #244]	; (11568 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   11474:	4833      	ldr	r0, [pc, #204]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11476:	4b34      	ldr	r3, [pc, #208]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11478:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   1147a:	493c      	ldr	r1, [pc, #240]	; (1156c <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   1147c:	4831      	ldr	r0, [pc, #196]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1147e:	4b32      	ldr	r3, [pc, #200]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11480:	4798      	blx	r3
      break;
   11482:	e049      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   11484:	493a      	ldr	r1, [pc, #232]	; (11570 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   11486:	482f      	ldr	r0, [pc, #188]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11488:	4b2f      	ldr	r3, [pc, #188]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1148a:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   1148c:	4939      	ldr	r1, [pc, #228]	; (11574 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   1148e:	482d      	ldr	r0, [pc, #180]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11490:	4b2d      	ldr	r3, [pc, #180]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11492:	4798      	blx	r3
      break;
   11494:	e040      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   11496:	4938      	ldr	r1, [pc, #224]	; (11578 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   11498:	482a      	ldr	r0, [pc, #168]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1149a:	4b2b      	ldr	r3, [pc, #172]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1149c:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   1149e:	e03b      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   114a0:	4936      	ldr	r1, [pc, #216]	; (1157c <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   114a2:	4828      	ldr	r0, [pc, #160]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114a4:	4b28      	ldr	r3, [pc, #160]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114a6:	4798      	blx	r3
      break;
   114a8:	e036      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   114aa:	4935      	ldr	r1, [pc, #212]	; (11580 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   114ac:	4825      	ldr	r0, [pc, #148]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114ae:	4b26      	ldr	r3, [pc, #152]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114b0:	4798      	blx	r3
      break;
   114b2:	e031      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   114b4:	4933      	ldr	r1, [pc, #204]	; (11584 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   114b6:	4823      	ldr	r0, [pc, #140]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114b8:	4b23      	ldr	r3, [pc, #140]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114ba:	4798      	blx	r3
      break;
   114bc:	e02c      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   114be:	4932      	ldr	r1, [pc, #200]	; (11588 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   114c0:	4820      	ldr	r0, [pc, #128]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114c2:	4b21      	ldr	r3, [pc, #132]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114c4:	4798      	blx	r3
      break;
   114c6:	e027      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   114c8:	4930      	ldr	r1, [pc, #192]	; (1158c <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   114ca:	481e      	ldr	r0, [pc, #120]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114cc:	4b1e      	ldr	r3, [pc, #120]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114ce:	4798      	blx	r3
      break;
   114d0:	e022      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   114d2:	492f      	ldr	r1, [pc, #188]	; (11590 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   114d4:	481b      	ldr	r0, [pc, #108]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114d6:	4b1c      	ldr	r3, [pc, #112]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114d8:	4798      	blx	r3
      break;
   114da:	e01d      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   114dc:	492d      	ldr	r1, [pc, #180]	; (11594 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   114de:	4819      	ldr	r0, [pc, #100]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114e0:	4b19      	ldr	r3, [pc, #100]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114e2:	4798      	blx	r3
      break;
   114e4:	e018      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   114e6:	492c      	ldr	r1, [pc, #176]	; (11598 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   114e8:	4816      	ldr	r0, [pc, #88]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114ea:	4b17      	ldr	r3, [pc, #92]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114ec:	4798      	blx	r3
      break;
   114ee:	e013      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   114f0:	492a      	ldr	r1, [pc, #168]	; (1159c <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   114f2:	4814      	ldr	r0, [pc, #80]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114f4:	4b14      	ldr	r3, [pc, #80]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114f6:	4798      	blx	r3
      break;
   114f8:	e00e      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   114fa:	4929      	ldr	r1, [pc, #164]	; (115a0 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   114fc:	4811      	ldr	r0, [pc, #68]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114fe:	4b12      	ldr	r3, [pc, #72]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11500:	4798      	blx	r3
      break;
   11502:	e009      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   11504:	4927      	ldr	r1, [pc, #156]	; (115a4 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   11506:	480f      	ldr	r0, [pc, #60]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11508:	4b0f      	ldr	r3, [pc, #60]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1150a:	4798      	blx	r3
      break;
   1150c:	e004      	b.n	11518 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   1150e:	4926      	ldr	r1, [pc, #152]	; (115a8 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   11510:	480c      	ldr	r0, [pc, #48]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11512:	4b0d      	ldr	r3, [pc, #52]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11514:	4798      	blx	r3
      break;
   11516:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   11518:	78fb      	ldrb	r3, [r7, #3]
   1151a:	2b0a      	cmp	r3, #10
   1151c:	d008      	beq.n	11530 <_ZN11Diagnostics12troubleshootEhb+0x190>
   1151e:	78fb      	ldrb	r3, [r7, #3]
   11520:	2b06      	cmp	r3, #6
   11522:	d005      	beq.n	11530 <_ZN11Diagnostics12troubleshootEhb+0x190>
   11524:	78fb      	ldrb	r3, [r7, #3]
   11526:	2b02      	cmp	r3, #2
   11528:	d002      	beq.n	11530 <_ZN11Diagnostics12troubleshootEhb+0x190>
   1152a:	78fb      	ldrb	r3, [r7, #3]
   1152c:	2b0b      	cmp	r3, #11
   1152e:	d102      	bne.n	11536 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   11530:	6878      	ldr	r0, [r7, #4]
   11532:	4b1e      	ldr	r3, [pc, #120]	; (115ac <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   11534:	4798      	blx	r3
    }
  #endif
  }
}
   11536:	bf00      	nop
   11538:	3710      	adds	r7, #16
   1153a:	46bd      	mov	sp, r7
   1153c:	bd80      	pop	{r7, pc}
   1153e:	bf00      	nop
   11540:	0001b8fc 	.word	0x0001b8fc
   11544:	20004e74 	.word	0x20004e74
   11548:	00013c85 	.word	0x00013c85
   1154c:	0001b91c 	.word	0x0001b91c
   11550:	0001b950 	.word	0x0001b950
   11554:	0001b990 	.word	0x0001b990
   11558:	0001b9d0 	.word	0x0001b9d0
   1155c:	0001ba68 	.word	0x0001ba68
   11560:	0001ba78 	.word	0x0001ba78
   11564:	0001baa8 	.word	0x0001baa8
   11568:	0001baf4 	.word	0x0001baf4
   1156c:	0001bb18 	.word	0x0001bb18
   11570:	0001bb5c 	.word	0x0001bb5c
   11574:	0001bb80 	.word	0x0001bb80
   11578:	0001bbbc 	.word	0x0001bbbc
   1157c:	0001bc0c 	.word	0x0001bc0c
   11580:	0001bc4c 	.word	0x0001bc4c
   11584:	0001bc70 	.word	0x0001bc70
   11588:	0001bc98 	.word	0x0001bc98
   1158c:	0001bcbc 	.word	0x0001bcbc
   11590:	0001bce4 	.word	0x0001bce4
   11594:	0001bd08 	.word	0x0001bd08
   11598:	0001bd30 	.word	0x0001bd30
   1159c:	0001bd7c 	.word	0x0001bd7c
   115a0:	0001bdcc 	.word	0x0001bdcc
   115a4:	0001be1c 	.word	0x0001be1c
   115a8:	0001be50 	.word	0x0001be50
   115ac:	000115b1 	.word	0x000115b1

000115b0 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   115b0:	b580      	push	{r7, lr}
   115b2:	b082      	sub	sp, #8
   115b4:	af00      	add	r7, sp, #0
   115b6:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   115b8:	4905      	ldr	r1, [pc, #20]	; (115d0 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   115ba:	4806      	ldr	r0, [pc, #24]	; (115d4 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   115bc:	4b06      	ldr	r3, [pc, #24]	; (115d8 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   115be:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   115c0:	4906      	ldr	r1, [pc, #24]	; (115dc <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   115c2:	4804      	ldr	r0, [pc, #16]	; (115d4 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   115c4:	4b06      	ldr	r3, [pc, #24]	; (115e0 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   115c6:	4798      	blx	r3
}
   115c8:	bf00      	nop
   115ca:	3708      	adds	r7, #8
   115cc:	46bd      	mov	sp, r7
   115ce:	bd80      	pop	{r7, pc}
   115d0:	0001be74 	.word	0x0001be74
   115d4:	20004e74 	.word	0x20004e74
   115d8:	00013bb5 	.word	0x00013bb5
   115dc:	0001bea8 	.word	0x0001bea8
   115e0:	00013c85 	.word	0x00013c85

000115e4 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   115e4:	b580      	push	{r7, lr}
   115e6:	b082      	sub	sp, #8
   115e8:	af00      	add	r7, sp, #0
   115ea:	6078      	str	r0, [r7, #4]
   115ec:	6039      	str	r1, [r7, #0]
   115ee:	687b      	ldr	r3, [r7, #4]
   115f0:	2b01      	cmp	r3, #1
   115f2:	d10c      	bne.n	1160e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   115f4:	683b      	ldr	r3, [r7, #0]
   115f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   115fa:	4293      	cmp	r3, r2
   115fc:	d107      	bne.n	1160e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   115fe:	4806      	ldr	r0, [pc, #24]	; (11618 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11600:	4b06      	ldr	r3, [pc, #24]	; (1161c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11602:	4798      	blx	r3
   11604:	4a06      	ldr	r2, [pc, #24]	; (11620 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11606:	4907      	ldr	r1, [pc, #28]	; (11624 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11608:	4803      	ldr	r0, [pc, #12]	; (11618 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1160a:	4b07      	ldr	r3, [pc, #28]	; (11628 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1160c:	4798      	blx	r3
   1160e:	bf00      	nop
   11610:	3708      	adds	r7, #8
   11612:	46bd      	mov	sp, r7
   11614:	bd80      	pop	{r7, pc}
   11616:	bf00      	nop
   11618:	20003a74 	.word	0x20003a74
   1161c:	00011379 	.word	0x00011379
   11620:	20000000 	.word	0x20000000
   11624:	0001138d 	.word	0x0001138d
   11628:	00014579 	.word	0x00014579

0001162c <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   1162c:	b580      	push	{r7, lr}
   1162e:	af00      	add	r7, sp, #0
   11630:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11634:	2001      	movs	r0, #1
   11636:	4b01      	ldr	r3, [pc, #4]	; (1163c <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   11638:	4798      	blx	r3
   1163a:	bd80      	pop	{r7, pc}
   1163c:	000115e5 	.word	0x000115e5

00011640 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   11640:	b480      	push	{r7}
   11642:	b083      	sub	sp, #12
   11644:	af00      	add	r7, sp, #0
   11646:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   11648:	4b04      	ldr	r3, [pc, #16]	; (1165c <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   1164a:	681b      	ldr	r3, [r3, #0]
   1164c:	2201      	movs	r2, #1
   1164e:	701a      	strb	r2, [r3, #0]
}
   11650:	bf00      	nop
   11652:	370c      	adds	r7, #12
   11654:	46bd      	mov	sp, r7
   11656:	bc80      	pop	{r7}
   11658:	4770      	bx	lr
   1165a:	bf00      	nop
   1165c:	20004a80 	.word	0x20004a80

00011660 <_ZN18EventHandler_ClassC1Ev>:


// default constructor
EventHandler_Class::EventHandler_Class()
   11660:	b480      	push	{r7}
   11662:	b083      	sub	sp, #12
   11664:	af00      	add	r7, sp, #0
   11666:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   11668:	4a04      	ldr	r2, [pc, #16]	; (1167c <_ZN18EventHandler_ClassC1Ev+0x1c>)
   1166a:	687b      	ldr	r3, [r7, #4]
   1166c:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
   1166e:	687b      	ldr	r3, [r7, #4]
   11670:	4618      	mov	r0, r3
   11672:	370c      	adds	r7, #12
   11674:	46bd      	mov	sp, r7
   11676:	bc80      	pop	{r7}
   11678:	4770      	bx	lr
   1167a:	bf00      	nop
   1167c:	20004a80 	.word	0x20004a80

00011680 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   11680:	b480      	push	{r7}
   11682:	b083      	sub	sp, #12
   11684:	af00      	add	r7, sp, #0
   11686:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   11688:	4a04      	ldr	r2, [pc, #16]	; (1169c <_ZN18EventHandler_ClassD1Ev+0x1c>)
   1168a:	687b      	ldr	r3, [r7, #4]
   1168c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   1168e:	687b      	ldr	r3, [r7, #4]
   11690:	4618      	mov	r0, r3
   11692:	370c      	adds	r7, #12
   11694:	46bd      	mov	sp, r7
   11696:	bc80      	pop	{r7}
   11698:	4770      	bx	lr
   1169a:	bf00      	nop
   1169c:	20004a80 	.word	0x20004a80

000116a0 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
}
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   116a0:	b590      	push	{r4, r7, lr}
   116a2:	b087      	sub	sp, #28
   116a4:	af02      	add	r7, sp, #8
   116a6:	60f8      	str	r0, [r7, #12]
   116a8:	60b9      	str	r1, [r7, #8]
   116aa:	4611      	mov	r1, r2
   116ac:	461a      	mov	r2, r3
   116ae:	460b      	mov	r3, r1
   116b0:	80fb      	strh	r3, [r7, #6]
   116b2:	4613      	mov	r3, r2
   116b4:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   116b6:	88b9      	ldrh	r1, [r7, #4]
   116b8:	88fa      	ldrh	r2, [r7, #6]
   116ba:	6a3b      	ldr	r3, [r7, #32]
   116bc:	9300      	str	r3, [sp, #0]
   116be:	460b      	mov	r3, r1
   116c0:	68b9      	ldr	r1, [r7, #8]
   116c2:	68f8      	ldr	r0, [r7, #12]
   116c4:	4c03      	ldr	r4, [pc, #12]	; (116d4 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   116c6:	47a0      	blx	r4
   116c8:	4603      	mov	r3, r0
}
   116ca:	4618      	mov	r0, r3
   116cc:	3714      	adds	r7, #20
   116ce:	46bd      	mov	sp, r7
   116d0:	bd90      	pop	{r4, r7, pc}
   116d2:	bf00      	nop
   116d4:	000116d9 	.word	0x000116d9

000116d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   116d8:	b590      	push	{r4, r7, lr}
   116da:	b08b      	sub	sp, #44	; 0x2c
   116dc:	af00      	add	r7, sp, #0
   116de:	60f8      	str	r0, [r7, #12]
   116e0:	60b9      	str	r1, [r7, #8]
   116e2:	4611      	mov	r1, r2
   116e4:	461a      	mov	r2, r3
   116e6:	460b      	mov	r3, r1
   116e8:	80fb      	strh	r3, [r7, #6]
   116ea:	4613      	mov	r3, r2
   116ec:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   116ee:	2300      	movs	r3, #0
   116f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	event*	queue;
	event*	queuePrev(NULL);
   116f4:	2300      	movs	r3, #0
   116f6:	61fb      	str	r3, [r7, #28]
	
	
	e.eventClass = eventClass;
   116f8:	68bb      	ldr	r3, [r7, #8]
   116fa:	88fa      	ldrh	r2, [r7, #6]
   116fc:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   116fe:	68bb      	ldr	r3, [r7, #8]
   11700:	88ba      	ldrh	r2, [r7, #4]
   11702:	805a      	strh	r2, [r3, #2]

	tick_t	timeoutTime;
	
	if (timeout != forever)
   11704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11706:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1170a:	4293      	cmp	r3, r2
   1170c:	d007      	beq.n	1171e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x46>
	timeoutTime = (eventTimer.get_ticks() + timeout);
   1170e:	4853      	ldr	r0, [pc, #332]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11710:	4b53      	ldr	r3, [pc, #332]	; (11860 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11712:	4798      	blx	r3
   11714:	4602      	mov	r2, r0
   11716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11718:	4413      	add	r3, r2
   1171a:	61bb      	str	r3, [r7, #24]
   1171c:	e002      	b.n	11724 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
	else
	timeoutTime = forever;
   1171e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11722:	61bb      	str	r3, [r7, #24]

	while (!result && (eventTimer.get_ticks() < timeoutTime))
   11724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11728:	f083 0301 	eor.w	r3, r3, #1
   1172c:	b2db      	uxtb	r3, r3
   1172e:	2b00      	cmp	r3, #0
   11730:	d008      	beq.n	11744 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   11732:	484a      	ldr	r0, [pc, #296]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11734:	4b4a      	ldr	r3, [pc, #296]	; (11860 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11736:	4798      	blx	r3
   11738:	4602      	mov	r2, r0
   1173a:	69bb      	ldr	r3, [r7, #24]
   1173c:	429a      	cmp	r2, r3
   1173e:	d201      	bcs.n	11744 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   11740:	2301      	movs	r3, #1
   11742:	e000      	b.n	11746 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6e>
   11744:	2300      	movs	r3, #0
   11746:	2b00      	cmp	r3, #0
   11748:	f000 8081 	beq.w	1184e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x176>
	{
		if (eventHandler)
   1174c:	68fb      	ldr	r3, [r7, #12]
   1174e:	685b      	ldr	r3, [r3, #4]
   11750:	2b00      	cmp	r3, #0
   11752:	d002      	beq.n	1175a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x82>
		{
			eventHandler();
   11754:	68fb      	ldr	r3, [r7, #12]
   11756:	685b      	ldr	r3, [r3, #4]
   11758:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   1175a:	4b42      	ldr	r3, [pc, #264]	; (11864 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   1175c:	681b      	ldr	r3, [r3, #0]
   1175e:	623b      	str	r3, [r7, #32]

		while (queue)
   11760:	6a3b      	ldr	r3, [r7, #32]
   11762:	2b00      	cmp	r3, #0
   11764:	d041      	beq.n	117ea <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (
			((e.eventClass == kAnyEventClass) ||
   11766:	68bb      	ldr	r3, [r7, #8]
   11768:	881b      	ldrh	r3, [r3, #0]
			if (
   1176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1176e:	4293      	cmp	r3, r2
   11770:	d005      	beq.n	1177e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xa6>
			(queue->eventClass == e.eventClass))
   11772:	6a3b      	ldr	r3, [r7, #32]
   11774:	881a      	ldrh	r2, [r3, #0]
   11776:	68bb      	ldr	r3, [r7, #8]
   11778:	881b      	ldrh	r3, [r3, #0]
			((e.eventClass == kAnyEventClass) ||
   1177a:	429a      	cmp	r2, r3
   1177c:	d12f      	bne.n	117de <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			&&
			((e.eventType == kAnyEventType) ||
   1177e:	68bb      	ldr	r3, [r7, #8]
   11780:	885b      	ldrh	r3, [r3, #2]
			&&
   11782:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11786:	4293      	cmp	r3, r2
   11788:	d005      	beq.n	11796 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xbe>
			(queue->eventType == e.eventType))
   1178a:	6a3b      	ldr	r3, [r7, #32]
   1178c:	885a      	ldrh	r2, [r3, #2]
   1178e:	68bb      	ldr	r3, [r7, #8]
   11790:	885b      	ldrh	r3, [r3, #2]
			((e.eventType == kAnyEventType) ||
   11792:	429a      	cmp	r2, r3
   11794:	d123      	bne.n	117de <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			)
			{
				if (queuePrev)
   11796:	69fb      	ldr	r3, [r7, #28]
   11798:	2b00      	cmp	r3, #0
   1179a:	d004      	beq.n	117a6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xce>
				{
					queuePrev->next = queue->next;
   1179c:	6a3b      	ldr	r3, [r7, #32]
   1179e:	68da      	ldr	r2, [r3, #12]
   117a0:	69fb      	ldr	r3, [r7, #28]
   117a2:	60da      	str	r2, [r3, #12]
   117a4:	e003      	b.n	117ae <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd6>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   117a6:	6a3b      	ldr	r3, [r7, #32]
   117a8:	68db      	ldr	r3, [r3, #12]
   117aa:	4a2e      	ldr	r2, [pc, #184]	; (11864 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   117ac:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   117ae:	68ba      	ldr	r2, [r7, #8]
   117b0:	6a3b      	ldr	r3, [r7, #32]
   117b2:	4614      	mov	r4, r2
   117b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   117b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   117ba:	4b2b      	ldr	r3, [pc, #172]	; (11868 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   117bc:	681a      	ldr	r2, [r3, #0]
   117be:	6a3b      	ldr	r3, [r7, #32]
   117c0:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   117c2:	4a29      	ldr	r2, [pc, #164]	; (11868 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   117c4:	6a3b      	ldr	r3, [r7, #32]
   117c6:	6013      	str	r3, [r2, #0]
				
				eventsInUse--;
   117c8:	68fb      	ldr	r3, [r7, #12]
   117ca:	689b      	ldr	r3, [r3, #8]
   117cc:	1e5a      	subs	r2, r3, #1
   117ce:	68fb      	ldr	r3, [r7, #12]
   117d0:	609a      	str	r2, [r3, #8]

				queue = NULL;
   117d2:	2300      	movs	r3, #0
   117d4:	623b      	str	r3, [r7, #32]
				result = true;
   117d6:	2301      	movs	r3, #1
   117d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   117dc:	e004      	b.n	117e8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
			}
			else
			{
				queuePrev = queue;
   117de:	6a3b      	ldr	r3, [r7, #32]
   117e0:	61fb      	str	r3, [r7, #28]
				queue = queue->next;
   117e2:	6a3b      	ldr	r3, [r7, #32]
   117e4:	68db      	ldr	r3, [r3, #12]
   117e6:	623b      	str	r3, [r7, #32]
		while (queue)
   117e8:	e7ba      	b.n	11760 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x88>
			}
		}

		if (result)
   117ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   117ee:	2b00      	cmp	r3, #0
   117f0:	d198      	bne.n	11724 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
		
			#endif
		}
		else
		{
			tick_t	timeRemaining(timeoutTime - eventTimer.get_ticks());
   117f2:	69bc      	ldr	r4, [r7, #24]
   117f4:	4819      	ldr	r0, [pc, #100]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117f6:	4b1a      	ldr	r3, [pc, #104]	; (11860 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   117f8:	4798      	blx	r3
   117fa:	4603      	mov	r3, r0
   117fc:	1ae3      	subs	r3, r4, r3
   117fe:	617b      	str	r3, [r7, #20]
			eventTimeout=false;
   11800:	68fb      	ldr	r3, [r7, #12]
   11802:	2200      	movs	r2, #0
   11804:	701a      	strb	r2, [r3, #0]
			if (timeRemaining > CHECK_EVENT_PERIOD){
   11806:	697b      	ldr	r3, [r7, #20]
   11808:	2b32      	cmp	r3, #50	; 0x32
   1180a:	dd05      	ble.n	11818 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x140>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   1180c:	2232      	movs	r2, #50	; 0x32
   1180e:	4917      	ldr	r1, [pc, #92]	; (1186c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   11810:	4812      	ldr	r0, [pc, #72]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11812:	4b17      	ldr	r3, [pc, #92]	; (11870 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   11814:	4798      	blx	r3
   11816:	e00d      	b.n	11834 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
			}else if (timeRemaining > 0){
   11818:	697b      	ldr	r3, [r7, #20]
   1181a:	2b00      	cmp	r3, #0
   1181c:	dd0a      	ble.n	11834 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,timeoutTime - eventTimer.get_ticks());
   1181e:	69bc      	ldr	r4, [r7, #24]
   11820:	480e      	ldr	r0, [pc, #56]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11822:	4b0f      	ldr	r3, [pc, #60]	; (11860 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   11824:	4798      	blx	r3
   11826:	4603      	mov	r3, r0
   11828:	1ae3      	subs	r3, r4, r3
   1182a:	461a      	mov	r2, r3
   1182c:	490f      	ldr	r1, [pc, #60]	; (1186c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   1182e:	480b      	ldr	r0, [pc, #44]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11830:	4b0f      	ldr	r3, [pc, #60]	; (11870 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   11832:	4798      	blx	r3
			}
			eventTimer.start();
   11834:	4809      	ldr	r0, [pc, #36]	; (1185c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   11836:	4b0f      	ldr	r3, [pc, #60]	; (11874 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x19c>)
   11838:	4798      	blx	r3
			while (!eventTimeout);
   1183a:	68fb      	ldr	r3, [r7, #12]
   1183c:	781b      	ldrb	r3, [r3, #0]
   1183e:	b2db      	uxtb	r3, r3
   11840:	f083 0301 	eor.w	r3, r3, #1
   11844:	b2db      	uxtb	r3, r3
   11846:	2b00      	cmp	r3, #0
   11848:	f43f af6c 	beq.w	11724 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
   1184c:	e7f5      	b.n	1183a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x162>
		
		}
	}

	return result;
   1184e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   11852:	4618      	mov	r0, r3
   11854:	372c      	adds	r7, #44	; 0x2c
   11856:	46bd      	mov	sp, r7
   11858:	bd90      	pop	{r4, r7, pc}
   1185a:	bf00      	nop
   1185c:	20004dec 	.word	0x20004dec
   11860:	000135cd 	.word	0x000135cd
   11864:	20004a7c 	.word	0x20004a7c
   11868:	20004a78 	.word	0x20004a78
   1186c:	00011641 	.word	0x00011641
   11870:	00013595 	.word	0x00013595
   11874:	000134ed 	.word	0x000134ed

00011878 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   11878:	b580      	push	{r7, lr}
   1187a:	b084      	sub	sp, #16
   1187c:	af00      	add	r7, sp, #0
   1187e:	6078      	str	r0, [r7, #4]
   11880:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   11882:	4b22      	ldr	r3, [pc, #136]	; (1190c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11884:	681b      	ldr	r3, [r3, #0]
   11886:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   11888:	68bb      	ldr	r3, [r7, #8]
   1188a:	2b00      	cmp	r3, #0
   1188c:	d035      	beq.n	118fa <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   1188e:	4b1f      	ldr	r3, [pc, #124]	; (1190c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11890:	681b      	ldr	r3, [r3, #0]
   11892:	68db      	ldr	r3, [r3, #12]
   11894:	4a1d      	ldr	r2, [pc, #116]	; (1190c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11896:	6013      	str	r3, [r2, #0]
		theEvent->next = NULL;
   11898:	68bb      	ldr	r3, [r7, #8]
   1189a:	2200      	movs	r2, #0
   1189c:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   1189e:	687b      	ldr	r3, [r7, #4]
   118a0:	689b      	ldr	r3, [r3, #8]
   118a2:	1c5a      	adds	r2, r3, #1
   118a4:	687b      	ldr	r3, [r7, #4]
   118a6:	609a      	str	r2, [r3, #8]

		event*	threadQueue((event*)mainThreadEventQueue);
   118a8:	4b19      	ldr	r3, [pc, #100]	; (11910 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   118aa:	681b      	ldr	r3, [r3, #0]
   118ac:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   118ae:	68fb      	ldr	r3, [r7, #12]
   118b0:	2b00      	cmp	r3, #0
   118b2:	d103      	bne.n	118bc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   118b4:	4a16      	ldr	r2, [pc, #88]	; (11910 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   118b6:	68bb      	ldr	r3, [r7, #8]
   118b8:	6013      	str	r3, [r2, #0]
   118ba:	e00a      	b.n	118d2 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   118bc:	68fb      	ldr	r3, [r7, #12]
   118be:	68db      	ldr	r3, [r3, #12]
   118c0:	2b00      	cmp	r3, #0
   118c2:	d003      	beq.n	118cc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   118c4:	68fb      	ldr	r3, [r7, #12]
   118c6:	68db      	ldr	r3, [r3, #12]
   118c8:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   118ca:	e7f7      	b.n	118bc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   118cc:	68fb      	ldr	r3, [r7, #12]
   118ce:	68ba      	ldr	r2, [r7, #8]
   118d0:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   118d2:	683b      	ldr	r3, [r7, #0]
   118d4:	881a      	ldrh	r2, [r3, #0]
   118d6:	68bb      	ldr	r3, [r7, #8]
   118d8:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   118da:	683b      	ldr	r3, [r7, #0]
   118dc:	885a      	ldrh	r2, [r3, #2]
   118de:	68bb      	ldr	r3, [r7, #8]
   118e0:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   118e2:	68bb      	ldr	r3, [r7, #8]
   118e4:	683a      	ldr	r2, [r7, #0]
   118e6:	6892      	ldr	r2, [r2, #8]
   118e8:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.get_ticks();
   118ea:	480a      	ldr	r0, [pc, #40]	; (11914 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   118ec:	4b0a      	ldr	r3, [pc, #40]	; (11918 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa0>)
   118ee:	4798      	blx	r3
   118f0:	4603      	mov	r3, r0
   118f2:	461a      	mov	r2, r3
   118f4:	68bb      	ldr	r3, [r7, #8]
   118f6:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   118f8:	e004      	b.n	11904 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   118fa:	687b      	ldr	r3, [r7, #4]
   118fc:	699b      	ldr	r3, [r3, #24]
   118fe:	1c5a      	adds	r2, r3, #1
   11900:	687b      	ldr	r3, [r7, #4]
   11902:	619a      	str	r2, [r3, #24]
}
   11904:	bf00      	nop
   11906:	3710      	adds	r7, #16
   11908:	46bd      	mov	sp, r7
   1190a:	bd80      	pop	{r7, pc}
   1190c:	20004a78 	.word	0x20004a78
   11910:	20004a7c 	.word	0x20004a7c
   11914:	20004dec 	.word	0x20004dec
   11918:	000135cd 	.word	0x000135cd

0001191c <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   1191c:	b580      	push	{r7, lr}
   1191e:	b088      	sub	sp, #32
   11920:	af00      	add	r7, sp, #0
   11922:	60f8      	str	r0, [r7, #12]
   11924:	460b      	mov	r3, r1
   11926:	607a      	str	r2, [r7, #4]
   11928:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   1192a:	f107 0310 	add.w	r3, r7, #16
   1192e:	4618      	mov	r0, r3
   11930:	4b09      	ldr	r3, [pc, #36]	; (11958 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   11932:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   11934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11938:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   1193a:	897b      	ldrh	r3, [r7, #10]
   1193c:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   1193e:	687b      	ldr	r3, [r7, #4]
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   11944:	f107 0310 	add.w	r3, r7, #16
   11948:	4619      	mov	r1, r3
   1194a:	68f8      	ldr	r0, [r7, #12]
   1194c:	4b03      	ldr	r3, [pc, #12]	; (1195c <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   1194e:	4798      	blx	r3
}
   11950:	bf00      	nop
   11952:	3720      	adds	r7, #32
   11954:	46bd      	mov	sp, r7
   11956:	bd80      	pop	{r7, pc}
   11958:	00002005 	.word	0x00002005
   1195c:	00011879 	.word	0x00011879

00011960 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   11960:	b580      	push	{r7, lr}
   11962:	b08a      	sub	sp, #40	; 0x28
   11964:	af00      	add	r7, sp, #0
   11966:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   11968:	f04f 0300 	mov.w	r3, #0
   1196c:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   1196e:	f04f 0300 	mov.w	r3, #0
   11972:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   11974:	f04f 0300 	mov.w	r3, #0
   11978:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   1197a:	f107 030c 	add.w	r3, r7, #12
   1197e:	4618      	mov	r0, r3
   11980:	4b03      	ldr	r3, [pc, #12]	; (11990 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   11982:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   11984:	687b      	ldr	r3, [r7, #4]
   11986:	689b      	ldr	r3, [r3, #8]
	
}
   11988:	4618      	mov	r0, r3
   1198a:	3728      	adds	r7, #40	; 0x28
   1198c:	46bd      	mov	sp, r7
   1198e:	bd80      	pop	{r7, pc}
   11990:	00002005 	.word	0x00002005

00011994 <_Z41__static_initialization_and_destruction_0ii>:


   11994:	b5b0      	push	{r4, r5, r7, lr}
   11996:	b082      	sub	sp, #8
   11998:	af00      	add	r7, sp, #0
   1199a:	6078      	str	r0, [r7, #4]
   1199c:	6039      	str	r1, [r7, #0]
   1199e:	687b      	ldr	r3, [r7, #4]
   119a0:	2b01      	cmp	r3, #1
   119a2:	d117      	bne.n	119d4 <_Z41__static_initialization_and_destruction_0ii+0x40>
   119a4:	683b      	ldr	r3, [r7, #0]
   119a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   119aa:	4293      	cmp	r3, r2
   119ac:	d112      	bne.n	119d4 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   119ae:	4b0b      	ldr	r3, [pc, #44]	; (119dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   119b0:	24ff      	movs	r4, #255	; 0xff
   119b2:	461d      	mov	r5, r3
   119b4:	2c00      	cmp	r4, #0
   119b6:	db05      	blt.n	119c4 <_Z41__static_initialization_and_destruction_0ii+0x30>
   119b8:	4628      	mov	r0, r5
   119ba:	4b09      	ldr	r3, [pc, #36]	; (119e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   119bc:	4798      	blx	r3
   119be:	3510      	adds	r5, #16
   119c0:	3c01      	subs	r4, #1
   119c2:	e7f7      	b.n	119b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
   119c4:	4807      	ldr	r0, [pc, #28]	; (119e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   119c6:	4b08      	ldr	r3, [pc, #32]	; (119e8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   119c8:	4798      	blx	r3
   119ca:	4a08      	ldr	r2, [pc, #32]	; (119ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
   119cc:	4908      	ldr	r1, [pc, #32]	; (119f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   119ce:	4805      	ldr	r0, [pc, #20]	; (119e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   119d0:	4b08      	ldr	r3, [pc, #32]	; (119f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   119d2:	4798      	blx	r3
   119d4:	bf00      	nop
   119d6:	3708      	adds	r7, #8
   119d8:	46bd      	mov	sp, r7
   119da:	bdb0      	pop	{r4, r5, r7, pc}
   119dc:	20003a78 	.word	0x20003a78
   119e0:	00002005 	.word	0x00002005
   119e4:	20004a90 	.word	0x20004a90
   119e8:	00011661 	.word	0x00011661
   119ec:	20000000 	.word	0x20000000
   119f0:	00011681 	.word	0x00011681
   119f4:	00014579 	.word	0x00014579

000119f8 <_GLOBAL__sub_I_maxEventCount>:
   119f8:	b580      	push	{r7, lr}
   119fa:	af00      	add	r7, sp, #0
   119fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11a00:	2001      	movs	r0, #1
   11a02:	4b01      	ldr	r3, [pc, #4]	; (11a08 <_GLOBAL__sub_I_maxEventCount+0x10>)
   11a04:	4798      	blx	r3
   11a06:	bd80      	pop	{r7, pc}
   11a08:	00011995 	.word	0x00011995

00011a0c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   11a0c:	b480      	push	{r7}
   11a0e:	b083      	sub	sp, #12
   11a10:	af00      	add	r7, sp, #0
   11a12:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   11a14:	4a04      	ldr	r2, [pc, #16]	; (11a28 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   11a16:	687b      	ldr	r3, [r7, #4]
   11a18:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   11a1a:	687b      	ldr	r3, [r7, #4]
   11a1c:	4618      	mov	r0, r3
   11a1e:	370c      	adds	r7, #12
   11a20:	46bd      	mov	sp, r7
   11a22:	bc80      	pop	{r7}
   11a24:	4770      	bx	lr
   11a26:	bf00      	nop
   11a28:	20004aac 	.word	0x20004aac

00011a2c <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   11a2c:	b480      	push	{r7}
   11a2e:	b083      	sub	sp, #12
   11a30:	af00      	add	r7, sp, #0
   11a32:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   11a34:	687b      	ldr	r3, [r7, #4]
   11a36:	4618      	mov	r0, r3
   11a38:	370c      	adds	r7, #12
   11a3a:	46bd      	mov	sp, r7
   11a3c:	bc80      	pop	{r7}
   11a3e:	4770      	bx	lr

00011a40 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   11a40:	b580      	push	{r7, lr}
   11a42:	b082      	sub	sp, #8
   11a44:	af00      	add	r7, sp, #0
   11a46:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11a48:	687b      	ldr	r3, [r7, #4]
   11a4a:	685a      	ldr	r2, [r3, #4]
   11a4c:	687b      	ldr	r3, [r7, #4]
   11a4e:	3308      	adds	r3, #8
   11a50:	4619      	mov	r1, r3
   11a52:	4610      	mov	r0, r2
   11a54:	4b06      	ldr	r3, [pc, #24]	; (11a70 <_ZN13SPI_Syn_Class4initEv+0x30>)
   11a56:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   11a58:	687b      	ldr	r3, [r7, #4]
   11a5a:	685b      	ldr	r3, [r3, #4]
   11a5c:	4618      	mov	r0, r3
   11a5e:	4b05      	ldr	r3, [pc, #20]	; (11a74 <_ZN13SPI_Syn_Class4initEv+0x34>)
   11a60:	4798      	blx	r3
	
	ready=true;
   11a62:	687b      	ldr	r3, [r7, #4]
   11a64:	2201      	movs	r2, #1
   11a66:	701a      	strb	r2, [r3, #0]
	
}
   11a68:	bf00      	nop
   11a6a:	3708      	adds	r7, #8
   11a6c:	46bd      	mov	sp, r7
   11a6e:	bd80      	pop	{r7, pc}
   11a70:	00005439 	.word	0x00005439
   11a74:	000052ad 	.word	0x000052ad

00011a78 <_ZN13SPI_Syn_Class13setDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::setDescriptor(spi_m_sync_descriptor *spiDesc){
   11a78:	b480      	push	{r7}
   11a7a:	b083      	sub	sp, #12
   11a7c:	af00      	add	r7, sp, #0
   11a7e:	6078      	str	r0, [r7, #4]
   11a80:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   11a82:	4a05      	ldr	r2, [pc, #20]	; (11a98 <_ZN13SPI_Syn_Class13setDescriptorEP21spi_m_sync_descriptor+0x20>)
   11a84:	687b      	ldr	r3, [r7, #4]
   11a86:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   11a88:	687b      	ldr	r3, [r7, #4]
   11a8a:	683a      	ldr	r2, [r7, #0]
   11a8c:	605a      	str	r2, [r3, #4]
}
   11a8e:	bf00      	nop
   11a90:	370c      	adds	r7, #12
   11a92:	46bd      	mov	sp, r7
   11a94:	bc80      	pop	{r7}
   11a96:	4770      	bx	lr
   11a98:	20004aac 	.word	0x20004aac

00011a9c <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   11a9c:	b580      	push	{r7, lr}
   11a9e:	b082      	sub	sp, #8
   11aa0:	af00      	add	r7, sp, #0
   11aa2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11aa4:	687b      	ldr	r3, [r7, #4]
   11aa6:	685a      	ldr	r2, [r3, #4]
   11aa8:	687b      	ldr	r3, [r7, #4]
   11aaa:	3308      	adds	r3, #8
   11aac:	4619      	mov	r1, r3
   11aae:	4610      	mov	r0, r2
   11ab0:	4b07      	ldr	r3, [pc, #28]	; (11ad0 <_ZN13SPI_Syn_Class6enableEv+0x34>)
   11ab2:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   11ab4:	687b      	ldr	r3, [r7, #4]
   11ab6:	685b      	ldr	r3, [r3, #4]
   11ab8:	4618      	mov	r0, r3
   11aba:	4b06      	ldr	r3, [pc, #24]	; (11ad4 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   11abc:	4798      	blx	r3
	ready=true;
   11abe:	687b      	ldr	r3, [r7, #4]
   11ac0:	2201      	movs	r2, #1
   11ac2:	701a      	strb	r2, [r3, #0]
	return 0;
   11ac4:	2300      	movs	r3, #0
}
   11ac6:	4618      	mov	r0, r3
   11ac8:	3708      	adds	r7, #8
   11aca:	46bd      	mov	sp, r7
   11acc:	bd80      	pop	{r7, pc}
   11ace:	bf00      	nop
   11ad0:	00005439 	.word	0x00005439
   11ad4:	000052ad 	.word	0x000052ad

00011ad8 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   11ad8:	b580      	push	{r7, lr}
   11ada:	b086      	sub	sp, #24
   11adc:	af00      	add	r7, sp, #0
   11ade:	60f8      	str	r0, [r7, #12]
   11ae0:	60b9      	str	r1, [r7, #8]
   11ae2:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   11ae4:	68fb      	ldr	r3, [r7, #12]
   11ae6:	2201      	movs	r2, #1
   11ae8:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   11aea:	68fb      	ldr	r3, [r7, #12]
   11aec:	689b      	ldr	r3, [r3, #8]
   11aee:	687a      	ldr	r2, [r7, #4]
   11af0:	b292      	uxth	r2, r2
   11af2:	68b9      	ldr	r1, [r7, #8]
   11af4:	4618      	mov	r0, r3
   11af6:	4b08      	ldr	r3, [pc, #32]	; (11b18 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   11af8:	4798      	blx	r3
   11afa:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   11afc:	697b      	ldr	r3, [r7, #20]
   11afe:	2b00      	cmp	r3, #0
   11b00:	bf14      	ite	ne
   11b02:	2301      	movne	r3, #1
   11b04:	2300      	moveq	r3, #0
   11b06:	b2da      	uxtb	r2, r3
   11b08:	68fb      	ldr	r3, [r7, #12]
   11b0a:	741a      	strb	r2, [r3, #16]
	 return w;
   11b0c:	697b      	ldr	r3, [r7, #20]
	
}
   11b0e:	4618      	mov	r0, r3
   11b10:	3718      	adds	r7, #24
   11b12:	46bd      	mov	sp, r7
   11b14:	bd80      	pop	{r7, pc}
   11b16:	bf00      	nop
   11b18:	000144d9 	.word	0x000144d9

00011b1c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   11b1c:	b580      	push	{r7, lr}
   11b1e:	b086      	sub	sp, #24
   11b20:	af00      	add	r7, sp, #0
   11b22:	60f8      	str	r0, [r7, #12]
   11b24:	60b9      	str	r1, [r7, #8]
   11b26:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   11b28:	68fb      	ldr	r3, [r7, #12]
   11b2a:	2201      	movs	r2, #1
   11b2c:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   11b2e:	68fb      	ldr	r3, [r7, #12]
   11b30:	689b      	ldr	r3, [r3, #8]
   11b32:	687a      	ldr	r2, [r7, #4]
   11b34:	b292      	uxth	r2, r2
   11b36:	68b9      	ldr	r1, [r7, #8]
   11b38:	4618      	mov	r0, r3
   11b3a:	4b08      	ldr	r3, [pc, #32]	; (11b5c <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   11b3c:	4798      	blx	r3
   11b3e:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   11b40:	697b      	ldr	r3, [r7, #20]
   11b42:	2b00      	cmp	r3, #0
   11b44:	bf14      	ite	ne
   11b46:	2301      	movne	r3, #1
   11b48:	2300      	moveq	r3, #0
   11b4a:	b2da      	uxtb	r2, r3
   11b4c:	68fb      	ldr	r3, [r7, #12]
   11b4e:	745a      	strb	r2, [r3, #17]
	return  r;
   11b50:	697b      	ldr	r3, [r7, #20]
}
   11b52:	4618      	mov	r0, r3
   11b54:	3718      	adds	r7, #24
   11b56:	46bd      	mov	sp, r7
   11b58:	bd80      	pop	{r7, pc}
   11b5a:	bf00      	nop
   11b5c:	00014529 	.word	0x00014529

00011b60 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   11b60:	b580      	push	{r7, lr}
   11b62:	b082      	sub	sp, #8
   11b64:	af00      	add	r7, sp, #0
   11b66:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   11b68:	687b      	ldr	r3, [r7, #4]
   11b6a:	685b      	ldr	r3, [r3, #4]
   11b6c:	4618      	mov	r0, r3
   11b6e:	4b03      	ldr	r3, [pc, #12]	; (11b7c <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   11b70:	4798      	blx	r3
	
}
   11b72:	bf00      	nop
   11b74:	3708      	adds	r7, #8
   11b76:	46bd      	mov	sp, r7
   11b78:	bd80      	pop	{r7, pc}
   11b7a:	bf00      	nop
   11b7c:	000052e9 	.word	0x000052e9

00011b80 <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   11b80:	b480      	push	{r7}
   11b82:	b083      	sub	sp, #12
   11b84:	af00      	add	r7, sp, #0
   11b86:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   11b88:	687b      	ldr	r3, [r7, #4]
   11b8a:	7c5b      	ldrb	r3, [r3, #17]
   11b8c:	b2db      	uxtb	r3, r3
   11b8e:	2b00      	cmp	r3, #0
   11b90:	d103      	bne.n	11b9a <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   11b92:	687b      	ldr	r3, [r7, #4]
   11b94:	7c1b      	ldrb	r3, [r3, #16]
   11b96:	b2db      	uxtb	r3, r3
   11b98:	2b00      	cmp	r3, #0
   11b9a:	687b      	ldr	r3, [r7, #4]
   11b9c:	2201      	movs	r2, #1
   11b9e:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   11ba0:	687b      	ldr	r3, [r7, #4]
   11ba2:	781b      	ldrb	r3, [r3, #0]
   11ba4:	b2db      	uxtb	r3, r3
   11ba6:	2b00      	cmp	r3, #0
   11ba8:	d001      	beq.n	11bae <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   11baa:	2301      	movs	r3, #1
   11bac:	e000      	b.n	11bb0 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   11bae:	2300      	movs	r3, #0
	}
	return ready;
	
}
   11bb0:	4618      	mov	r0, r3
   11bb2:	370c      	adds	r7, #12
   11bb4:	46bd      	mov	sp, r7
   11bb6:	bc80      	pop	{r7}
   11bb8:	4770      	bx	lr
	...

00011bbc <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   11bbc:	b580      	push	{r7, lr}
   11bbe:	b082      	sub	sp, #8
   11bc0:	af00      	add	r7, sp, #0
   11bc2:	6078      	str	r0, [r7, #4]
   11bc4:	6039      	str	r1, [r7, #0]
   11bc6:	687b      	ldr	r3, [r7, #4]
   11bc8:	3308      	adds	r3, #8
   11bca:	4618      	mov	r0, r3
   11bcc:	4b06      	ldr	r3, [pc, #24]	; (11be8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   11bce:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   11bd0:	687b      	ldr	r3, [r7, #4]
   11bd2:	683a      	ldr	r2, [r7, #0]
   11bd4:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   11bd6:	4a05      	ldr	r2, [pc, #20]	; (11bec <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
   11bd8:	687b      	ldr	r3, [r7, #4]
   11bda:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   11bdc:	687b      	ldr	r3, [r7, #4]
   11bde:	4618      	mov	r0, r3
   11be0:	3708      	adds	r7, #8
   11be2:	46bd      	mov	sp, r7
   11be4:	bd80      	pop	{r7, pc}
   11be6:	bf00      	nop
   11be8:	00014309 	.word	0x00014309
   11bec:	20004ab0 	.word	0x20004ab0

00011bf0 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
   11bf0:	b580      	push	{r7, lr}
   11bf2:	b082      	sub	sp, #8
   11bf4:	af00      	add	r7, sp, #0
   11bf6:	6078      	str	r0, [r7, #4]
   11bf8:	687b      	ldr	r3, [r7, #4]
   11bfa:	3308      	adds	r3, #8
   11bfc:	4618      	mov	r0, r3
   11bfe:	4b03      	ldr	r3, [pc, #12]	; (11c0c <_ZN13AT24MAC_ClassD1Ev+0x1c>)
   11c00:	4798      	blx	r3
{
} //~AT24MAC_Class
   11c02:	687b      	ldr	r3, [r7, #4]
   11c04:	4618      	mov	r0, r3
   11c06:	3708      	adds	r7, #8
   11c08:	46bd      	mov	sp, r7
   11c0a:	bd80      	pop	{r7, pc}
   11c0c:	00014331 	.word	0x00014331

00011c10 <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
   11c10:	b580      	push	{r7, lr}
   11c12:	b082      	sub	sp, #8
   11c14:	af00      	add	r7, sp, #0
   11c16:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   11c18:	2156      	movs	r1, #86	; 0x56
   11c1a:	6878      	ldr	r0, [r7, #4]
   11c1c:	4b04      	ldr	r3, [pc, #16]	; (11c30 <_ZN13AT24MAC_Class4InitEv+0x20>)
   11c1e:	4798      	blx	r3
	return SelfTest();
   11c20:	6878      	ldr	r0, [r7, #4]
   11c22:	4b04      	ldr	r3, [pc, #16]	; (11c34 <_ZN13AT24MAC_Class4InitEv+0x24>)
   11c24:	4798      	blx	r3
   11c26:	4603      	mov	r3, r0
}
   11c28:	4618      	mov	r0, r3
   11c2a:	3708      	adds	r7, #8
   11c2c:	46bd      	mov	sp, r7
   11c2e:	bd80      	pop	{r7, pc}
   11c30:	00011c39 	.word	0x00011c39
   11c34:	00011f19 	.word	0x00011f19

00011c38 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   11c38:	b580      	push	{r7, lr}
   11c3a:	b082      	sub	sp, #8
   11c3c:	af00      	add	r7, sp, #0
   11c3e:	6078      	str	r0, [r7, #4]
   11c40:	460b      	mov	r3, r1
   11c42:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	78fa      	ldrb	r2, [r7, #3]
   11c48:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
   11c4a:	687b      	ldr	r3, [r7, #4]
   11c4c:	f103 0208 	add.w	r2, r3, #8
   11c50:	687b      	ldr	r3, [r7, #4]
   11c52:	685b      	ldr	r3, [r3, #4]
   11c54:	4619      	mov	r1, r3
   11c56:	4610      	mov	r0, r2
   11c58:	4b0a      	ldr	r3, [pc, #40]	; (11c84 <_ZN13AT24MAC_Class4InitEh+0x4c>)
   11c5a:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   11c5c:	687b      	ldr	r3, [r7, #4]
   11c5e:	3308      	adds	r3, #8
   11c60:	78fa      	ldrb	r2, [r7, #3]
   11c62:	4611      	mov	r1, r2
   11c64:	4618      	mov	r0, r3
   11c66:	4b08      	ldr	r3, [pc, #32]	; (11c88 <_ZN13AT24MAC_Class4InitEh+0x50>)
   11c68:	4798      	blx	r3
   11c6a:	4603      	mov	r3, r0
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	bf0c      	ite	eq
   11c70:	2301      	moveq	r3, #1
   11c72:	2300      	movne	r3, #0
   11c74:	b2da      	uxtb	r2, r3
   11c76:	687b      	ldr	r3, [r7, #4]
   11c78:	701a      	strb	r2, [r3, #0]
}
   11c7a:	bf00      	nop
   11c7c:	3708      	adds	r7, #8
   11c7e:	46bd      	mov	sp, r7
   11c80:	bd80      	pop	{r7, pc}
   11c82:	bf00      	nop
   11c84:	00014345 	.word	0x00014345
   11c88:	000143e9 	.word	0x000143e9

00011c8c <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
   11c8c:	b580      	push	{r7, lr}
   11c8e:	b084      	sub	sp, #16
   11c90:	af00      	add	r7, sp, #0
   11c92:	6078      	str	r0, [r7, #4]
   11c94:	460b      	mov	r3, r1
   11c96:	70fb      	strb	r3, [r7, #3]
   11c98:	4613      	mov	r3, r2
   11c9a:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	2200      	movs	r2, #0
   11ca0:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
   11ca2:	78fb      	ldrb	r3, [r7, #3]
   11ca4:	723b      	strb	r3, [r7, #8]
	array[1]=value;
   11ca6:	78bb      	ldrb	r3, [r7, #2]
   11ca8:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
   11caa:	687b      	ldr	r3, [r7, #4]
   11cac:	3308      	adds	r3, #8
   11cae:	f107 0108 	add.w	r1, r7, #8
   11cb2:	2202      	movs	r2, #2
   11cb4:	4618      	mov	r0, r3
   11cb6:	4b09      	ldr	r3, [pc, #36]	; (11cdc <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
   11cb8:	4798      	blx	r3
   11cba:	4603      	mov	r3, r0
   11cbc:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
   11cbe:	687b      	ldr	r3, [r7, #4]
   11cc0:	7a1b      	ldrb	r3, [r3, #8]
   11cc2:	b2db      	uxtb	r3, r3
   11cc4:	f083 0301 	eor.w	r3, r3, #1
   11cc8:	b2db      	uxtb	r3, r3
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d000      	beq.n	11cd0 <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
   11cce:	e7f6      	b.n	11cbe <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
   11cd0:	68fb      	ldr	r3, [r7, #12]
}
   11cd2:	4618      	mov	r0, r3
   11cd4:	3710      	adds	r7, #16
   11cd6:	46bd      	mov	sp, r7
   11cd8:	bd80      	pop	{r7, pc}
   11cda:	bf00      	nop
   11cdc:	00014431 	.word	0x00014431

00011ce0 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   11ce0:	b580      	push	{r7, lr}
   11ce2:	b086      	sub	sp, #24
   11ce4:	af00      	add	r7, sp, #0
   11ce6:	60f8      	str	r0, [r7, #12]
   11ce8:	60b9      	str	r1, [r7, #8]
   11cea:	4611      	mov	r1, r2
   11cec:	461a      	mov	r2, r3
   11cee:	460b      	mov	r3, r1
   11cf0:	71fb      	strb	r3, [r7, #7]
   11cf2:	4613      	mov	r3, r2
   11cf4:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
   11cf6:	2300      	movs	r3, #0
   11cf8:	613b      	str	r3, [r7, #16]
   11cfa:	79ba      	ldrb	r2, [r7, #6]
   11cfc:	693b      	ldr	r3, [r7, #16]
   11cfe:	429a      	cmp	r2, r3
   11d00:	dd2a      	ble.n	11d58 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
   11d02:	68f8      	ldr	r0, [r7, #12]
   11d04:	4b17      	ldr	r3, [pc, #92]	; (11d64 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
   11d06:	4798      	blx	r3
   11d08:	4603      	mov	r3, r0
   11d0a:	f083 0301 	eor.w	r3, r3, #1
   11d0e:	b2db      	uxtb	r3, r3
   11d10:	2b00      	cmp	r3, #0
   11d12:	d000      	beq.n	11d16 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
   11d14:	e7f5      	b.n	11d02 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
   11d16:	693b      	ldr	r3, [r7, #16]
   11d18:	b2da      	uxtb	r2, r3
   11d1a:	79fb      	ldrb	r3, [r7, #7]
   11d1c:	4413      	add	r3, r2
   11d1e:	b2d9      	uxtb	r1, r3
   11d20:	68bb      	ldr	r3, [r7, #8]
   11d22:	781b      	ldrb	r3, [r3, #0]
   11d24:	461a      	mov	r2, r3
   11d26:	68f8      	ldr	r0, [r7, #12]
   11d28:	4b0f      	ldr	r3, [pc, #60]	; (11d68 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
   11d2a:	4798      	blx	r3
   11d2c:	4603      	mov	r3, r0
   11d2e:	617b      	str	r3, [r7, #20]
		p++;
   11d30:	68bb      	ldr	r3, [r7, #8]
   11d32:	3301      	adds	r3, #1
   11d34:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
   11d36:	2002      	movs	r0, #2
   11d38:	4b0c      	ldr	r3, [pc, #48]	; (11d6c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
   11d3a:	4798      	blx	r3
		while(!AcknolledgePolling());
   11d3c:	68f8      	ldr	r0, [r7, #12]
   11d3e:	4b0c      	ldr	r3, [pc, #48]	; (11d70 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
   11d40:	4798      	blx	r3
   11d42:	4603      	mov	r3, r0
   11d44:	f083 0301 	eor.w	r3, r3, #1
   11d48:	b2db      	uxtb	r3, r3
   11d4a:	2b00      	cmp	r3, #0
   11d4c:	d000      	beq.n	11d50 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
   11d4e:	e7f5      	b.n	11d3c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
   11d50:	693b      	ldr	r3, [r7, #16]
   11d52:	3301      	adds	r3, #1
   11d54:	613b      	str	r3, [r7, #16]
   11d56:	e7d0      	b.n	11cfa <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
   11d58:	697b      	ldr	r3, [r7, #20]
}
   11d5a:	4618      	mov	r0, r3
   11d5c:	3718      	adds	r7, #24
   11d5e:	46bd      	mov	sp, r7
   11d60:	bd80      	pop	{r7, pc}
   11d62:	bf00      	nop
   11d64:	00012011 	.word	0x00012011
   11d68:	00011c8d 	.word	0x00011c8d
   11d6c:	00004701 	.word	0x00004701
   11d70:	00011ee1 	.word	0x00011ee1

00011d74 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   11d74:	b590      	push	{r4, r7, lr}
   11d76:	b087      	sub	sp, #28
   11d78:	af00      	add	r7, sp, #0
   11d7a:	60f8      	str	r0, [r7, #12]
   11d7c:	60b9      	str	r1, [r7, #8]
   11d7e:	4611      	mov	r1, r2
   11d80:	461a      	mov	r2, r3
   11d82:	460b      	mov	r3, r1
   11d84:	80fb      	strh	r3, [r7, #6]
   11d86:	4613      	mov	r3, r2
   11d88:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   11d8a:	88fb      	ldrh	r3, [r7, #6]
   11d8c:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   11d8e:	797b      	ldrb	r3, [r7, #5]
   11d90:	7dfa      	ldrb	r2, [r7, #23]
   11d92:	68b9      	ldr	r1, [r7, #8]
   11d94:	68f8      	ldr	r0, [r7, #12]
   11d96:	4c03      	ldr	r4, [pc, #12]	; (11da4 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   11d98:	47a0      	blx	r4
   11d9a:	4603      	mov	r3, r0
}
   11d9c:	4618      	mov	r0, r3
   11d9e:	371c      	adds	r7, #28
   11da0:	46bd      	mov	sp, r7
   11da2:	bd90      	pop	{r4, r7, pc}
   11da4:	00011ce1 	.word	0x00011ce1

00011da8 <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
   11da8:	b580      	push	{r7, lr}
   11daa:	b084      	sub	sp, #16
   11dac:	af00      	add	r7, sp, #0
   11dae:	6078      	str	r0, [r7, #4]
   11db0:	460b      	mov	r3, r1
   11db2:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   11db4:	687b      	ldr	r3, [r7, #4]
   11db6:	3308      	adds	r3, #8
   11db8:	1cf9      	adds	r1, r7, #3
   11dba:	2201      	movs	r2, #1
   11dbc:	4618      	mov	r0, r3
   11dbe:	4b10      	ldr	r3, [pc, #64]	; (11e00 <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
   11dc0:	4798      	blx	r3
	while(!i2ca.txReady);
   11dc2:	687b      	ldr	r3, [r7, #4]
   11dc4:	7a1b      	ldrb	r3, [r3, #8]
   11dc6:	b2db      	uxtb	r3, r3
   11dc8:	f083 0301 	eor.w	r3, r3, #1
   11dcc:	b2db      	uxtb	r3, r3
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d000      	beq.n	11dd4 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
   11dd2:	e7f6      	b.n	11dc2 <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
   11dd4:	687b      	ldr	r3, [r7, #4]
   11dd6:	3308      	adds	r3, #8
   11dd8:	f107 010f 	add.w	r1, r7, #15
   11ddc:	2201      	movs	r2, #1
   11dde:	4618      	mov	r0, r3
   11de0:	4b08      	ldr	r3, [pc, #32]	; (11e04 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
   11de2:	4798      	blx	r3
	while(!i2ca.rxReady);
   11de4:	687b      	ldr	r3, [r7, #4]
   11de6:	7a5b      	ldrb	r3, [r3, #9]
   11de8:	b2db      	uxtb	r3, r3
   11dea:	f083 0301 	eor.w	r3, r3, #1
   11dee:	b2db      	uxtb	r3, r3
   11df0:	2b00      	cmp	r3, #0
   11df2:	d000      	beq.n	11df6 <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
   11df4:	e7f6      	b.n	11de4 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
   11df6:	7bfb      	ldrb	r3, [r7, #15]
}
   11df8:	4618      	mov	r0, r3
   11dfa:	3710      	adds	r7, #16
   11dfc:	46bd      	mov	sp, r7
   11dfe:	bd80      	pop	{r7, pc}
   11e00:	00014431 	.word	0x00014431
   11e04:	00014475 	.word	0x00014475

00011e08 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   11e08:	b580      	push	{r7, lr}
   11e0a:	b086      	sub	sp, #24
   11e0c:	af00      	add	r7, sp, #0
   11e0e:	60f8      	str	r0, [r7, #12]
   11e10:	60b9      	str	r1, [r7, #8]
   11e12:	4611      	mov	r1, r2
   11e14:	461a      	mov	r2, r3
   11e16:	460b      	mov	r3, r1
   11e18:	71fb      	strb	r3, [r7, #7]
   11e1a:	4613      	mov	r3, r2
   11e1c:	71bb      	strb	r3, [r7, #6]
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   11e1e:	68fb      	ldr	r3, [r7, #12]
   11e20:	3308      	adds	r3, #8
   11e22:	1df9      	adds	r1, r7, #7
   11e24:	2201      	movs	r2, #1
   11e26:	4618      	mov	r0, r3
   11e28:	4b11      	ldr	r3, [pc, #68]	; (11e70 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
   11e2a:	4798      	blx	r3
	while(!i2ca.txReady);
   11e2c:	68fb      	ldr	r3, [r7, #12]
   11e2e:	7a1b      	ldrb	r3, [r3, #8]
   11e30:	b2db      	uxtb	r3, r3
   11e32:	f083 0301 	eor.w	r3, r3, #1
   11e36:	b2db      	uxtb	r3, r3
   11e38:	2b00      	cmp	r3, #0
   11e3a:	d000      	beq.n	11e3e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
   11e3c:	e7f6      	b.n	11e2c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	uint32_t r= i2ca.Read(p,size);
   11e3e:	68fb      	ldr	r3, [r7, #12]
   11e40:	3308      	adds	r3, #8
   11e42:	79ba      	ldrb	r2, [r7, #6]
   11e44:	b292      	uxth	r2, r2
   11e46:	68b9      	ldr	r1, [r7, #8]
   11e48:	4618      	mov	r0, r3
   11e4a:	4b0a      	ldr	r3, [pc, #40]	; (11e74 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
   11e4c:	4798      	blx	r3
   11e4e:	4603      	mov	r3, r0
   11e50:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   11e52:	68fb      	ldr	r3, [r7, #12]
   11e54:	7a5b      	ldrb	r3, [r3, #9]
   11e56:	b2db      	uxtb	r3, r3
   11e58:	f083 0301 	eor.w	r3, r3, #1
   11e5c:	b2db      	uxtb	r3, r3
   11e5e:	2b00      	cmp	r3, #0
   11e60:	d000      	beq.n	11e64 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
   11e62:	e7f6      	b.n	11e52 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
	return r;
   11e64:	697b      	ldr	r3, [r7, #20]
}
   11e66:	4618      	mov	r0, r3
   11e68:	3718      	adds	r7, #24
   11e6a:	46bd      	mov	sp, r7
   11e6c:	bd80      	pop	{r7, pc}
   11e6e:	bf00      	nop
   11e70:	00014431 	.word	0x00014431
   11e74:	00014475 	.word	0x00014475

00011e78 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   11e78:	b590      	push	{r4, r7, lr}
   11e7a:	b087      	sub	sp, #28
   11e7c:	af00      	add	r7, sp, #0
   11e7e:	60f8      	str	r0, [r7, #12]
   11e80:	60b9      	str	r1, [r7, #8]
   11e82:	4611      	mov	r1, r2
   11e84:	461a      	mov	r2, r3
   11e86:	460b      	mov	r3, r1
   11e88:	80fb      	strh	r3, [r7, #6]
   11e8a:	4613      	mov	r3, r2
   11e8c:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   11e8e:	88fb      	ldrh	r3, [r7, #6]
   11e90:	75fb      	strb	r3, [r7, #23]
	
	return ReadAddress(p,add,size);
   11e92:	797b      	ldrb	r3, [r7, #5]
   11e94:	7dfa      	ldrb	r2, [r7, #23]
   11e96:	68b9      	ldr	r1, [r7, #8]
   11e98:	68f8      	ldr	r0, [r7, #12]
   11e9a:	4c03      	ldr	r4, [pc, #12]	; (11ea8 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x30>)
   11e9c:	47a0      	blx	r4
   11e9e:	4603      	mov	r3, r0
}
   11ea0:	4618      	mov	r0, r3
   11ea2:	371c      	adds	r7, #28
   11ea4:	46bd      	mov	sp, r7
   11ea6:	bd90      	pop	{r4, r7, pc}
   11ea8:	00011e09 	.word	0x00011e09

00011eac <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
bool	AT24MAC_Class::GetAcknowledge(void){
   11eac:	b580      	push	{r7, lr}
   11eae:	b082      	sub	sp, #8
   11eb0:	af00      	add	r7, sp, #0
   11eb2:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
   11eb4:	2100      	movs	r1, #0
   11eb6:	6878      	ldr	r0, [r7, #4]
   11eb8:	4b08      	ldr	r3, [pc, #32]	; (11edc <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x30>)
   11eba:	4798      	blx	r3
   11ebc:	4603      	mov	r3, r0
   11ebe:	461a      	mov	r2, r3
   11ec0:	687b      	ldr	r3, [r7, #4]
   11ec2:	765a      	strb	r2, [r3, #25]
	return	byte>0;
   11ec4:	687b      	ldr	r3, [r7, #4]
   11ec6:	7e5b      	ldrb	r3, [r3, #25]
   11ec8:	2b00      	cmp	r3, #0
   11eca:	bfcc      	ite	gt
   11ecc:	2301      	movgt	r3, #1
   11ece:	2300      	movle	r3, #0
   11ed0:	b2db      	uxtb	r3, r3
}
   11ed2:	4618      	mov	r0, r3
   11ed4:	3708      	adds	r7, #8
   11ed6:	46bd      	mov	sp, r7
   11ed8:	bd80      	pop	{r7, pc}
   11eda:	bf00      	nop
   11edc:	00011da9 	.word	0x00011da9

00011ee0 <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
   11ee0:	b580      	push	{r7, lr}
   11ee2:	b082      	sub	sp, #8
   11ee4:	af00      	add	r7, sp, #0
   11ee6:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
   11ee8:	6878      	ldr	r0, [r7, #4]
   11eea:	4b09      	ldr	r3, [pc, #36]	; (11f10 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
   11eec:	4798      	blx	r3
	} while (!IsReady());
   11eee:	6878      	ldr	r0, [r7, #4]
   11ef0:	4b08      	ldr	r3, [pc, #32]	; (11f14 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
   11ef2:	4798      	blx	r3
   11ef4:	4603      	mov	r3, r0
	do 
   11ef6:	f083 0301 	eor.w	r3, r3, #1
   11efa:	b2db      	uxtb	r3, r3
   11efc:	2b00      	cmp	r3, #0
   11efe:	d000      	beq.n	11f02 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
   11f00:	e7f2      	b.n	11ee8 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
   11f02:	687b      	ldr	r3, [r7, #4]
   11f04:	781b      	ldrb	r3, [r3, #0]
   11f06:	b2db      	uxtb	r3, r3
}
   11f08:	4618      	mov	r0, r3
   11f0a:	3708      	adds	r7, #8
   11f0c:	46bd      	mov	sp, r7
   11f0e:	bd80      	pop	{r7, pc}
   11f10:	00011ead 	.word	0x00011ead
   11f14:	00012011 	.word	0x00012011

00011f18 <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
   11f18:	b590      	push	{r4, r7, lr}
   11f1a:	b085      	sub	sp, #20
   11f1c:	af00      	add	r7, sp, #0
   11f1e:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE;
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	22f0      	movs	r2, #240	; 0xf0
   11f24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   11f28:	2300      	movs	r3, #0
   11f2a:	60fb      	str	r3, [r7, #12]
   11f2c:	68fb      	ldr	r3, [r7, #12]
   11f2e:	2b0f      	cmp	r3, #15
   11f30:	dc18      	bgt.n	11f64 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   11f32:	4b33      	ldr	r3, [pc, #204]	; (12000 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   11f34:	4798      	blx	r3
   11f36:	4603      	mov	r3, r0
   11f38:	b2d9      	uxtb	r1, r3
   11f3a:	687a      	ldr	r2, [r7, #4]
   11f3c:	68fb      	ldr	r3, [r7, #12]
   11f3e:	4413      	add	r3, r2
   11f40:	331a      	adds	r3, #26
   11f42:	460a      	mov	r2, r1
   11f44:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   11f46:	68fb      	ldr	r3, [r7, #12]
   11f48:	b2db      	uxtb	r3, r3
   11f4a:	f1c3 0310 	rsb	r3, r3, #16
   11f4e:	b2d9      	uxtb	r1, r3
   11f50:	687a      	ldr	r2, [r7, #4]
   11f52:	68fb      	ldr	r3, [r7, #12]
   11f54:	4413      	add	r3, r2
   11f56:	332a      	adds	r3, #42	; 0x2a
   11f58:	460a      	mov	r2, r1
   11f5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   11f5c:	68fb      	ldr	r3, [r7, #12]
   11f5e:	3301      	adds	r3, #1
   11f60:	60fb      	str	r3, [r7, #12]
   11f62:	e7e3      	b.n	11f2c <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   11f64:	6878      	ldr	r0, [r7, #4]
   11f66:	4b27      	ldr	r3, [pc, #156]	; (12004 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   11f68:	4798      	blx	r3
   11f6a:	4603      	mov	r3, r0
   11f6c:	f083 0301 	eor.w	r3, r3, #1
   11f70:	b2db      	uxtb	r3, r3
   11f72:	2b00      	cmp	r3, #0
   11f74:	d000      	beq.n	11f78 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   11f76:	e7f5      	b.n	11f64 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   11f78:	687b      	ldr	r3, [r7, #4]
   11f7a:	f103 011a 	add.w	r1, r3, #26
   11f7e:	687b      	ldr	r3, [r7, #4]
   11f80:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   11f84:	2310      	movs	r3, #16
   11f86:	6878      	ldr	r0, [r7, #4]
   11f88:	4c1f      	ldr	r4, [pc, #124]	; (12008 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   11f8a:	47a0      	blx	r4
	while(!IsReady());
   11f8c:	6878      	ldr	r0, [r7, #4]
   11f8e:	4b1d      	ldr	r3, [pc, #116]	; (12004 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   11f90:	4798      	blx	r3
   11f92:	4603      	mov	r3, r0
   11f94:	f083 0301 	eor.w	r3, r3, #1
   11f98:	b2db      	uxtb	r3, r3
   11f9a:	2b00      	cmp	r3, #0
   11f9c:	d000      	beq.n	11fa0 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   11f9e:	e7f5      	b.n	11f8c <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
   11fa6:	687b      	ldr	r3, [r7, #4]
   11fa8:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   11fac:	2310      	movs	r3, #16
   11fae:	6878      	ldr	r0, [r7, #4]
   11fb0:	4c16      	ldr	r4, [pc, #88]	; (1200c <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   11fb2:	47a0      	blx	r4
	isOK = true;
   11fb4:	687b      	ldr	r3, [r7, #4]
   11fb6:	2201      	movs	r2, #1
   11fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   11fbc:	2300      	movs	r3, #0
   11fbe:	60bb      	str	r3, [r7, #8]
   11fc0:	68bb      	ldr	r3, [r7, #8]
   11fc2:	2b0f      	cmp	r3, #15
   11fc4:	dc14      	bgt.n	11ff0 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   11fc6:	687a      	ldr	r2, [r7, #4]
   11fc8:	68bb      	ldr	r3, [r7, #8]
   11fca:	4413      	add	r3, r2
   11fcc:	331a      	adds	r3, #26
   11fce:	781a      	ldrb	r2, [r3, #0]
   11fd0:	6879      	ldr	r1, [r7, #4]
   11fd2:	68bb      	ldr	r3, [r7, #8]
   11fd4:	440b      	add	r3, r1
   11fd6:	332a      	adds	r3, #42	; 0x2a
   11fd8:	781b      	ldrb	r3, [r3, #0]
   11fda:	429a      	cmp	r2, r3
   11fdc:	d004      	beq.n	11fe8 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	2200      	movs	r2, #0
   11fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   11fe6:	e003      	b.n	11ff0 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   11fe8:	68bb      	ldr	r3, [r7, #8]
   11fea:	3301      	adds	r3, #1
   11fec:	60bb      	str	r3, [r7, #8]
   11fee:	e7e7      	b.n	11fc0 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   11ff0:	687b      	ldr	r3, [r7, #4]
   11ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   11ff6:	4618      	mov	r0, r3
   11ff8:	3714      	adds	r7, #20
   11ffa:	46bd      	mov	sp, r7
   11ffc:	bd90      	pop	{r4, r7, pc}
   11ffe:	bf00      	nop
   12000:	00016905 	.word	0x00016905
   12004:	00012011 	.word	0x00012011
   12008:	00011ce1 	.word	0x00011ce1
   1200c:	00011e09 	.word	0x00011e09

00012010 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   12010:	b480      	push	{r7}
   12012:	b083      	sub	sp, #12
   12014:	af00      	add	r7, sp, #0
   12016:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
   12018:	687b      	ldr	r3, [r7, #4]
   1201a:	7a1b      	ldrb	r3, [r3, #8]
   1201c:	b2db      	uxtb	r3, r3
   1201e:	2b00      	cmp	r3, #0
   12020:	d006      	beq.n	12030 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   12022:	687b      	ldr	r3, [r7, #4]
   12024:	7a5b      	ldrb	r3, [r3, #9]
   12026:	b2db      	uxtb	r3, r3
   12028:	2b00      	cmp	r3, #0
   1202a:	d001      	beq.n	12030 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   1202c:	2301      	movs	r3, #1
   1202e:	e000      	b.n	12032 <_ZN13AT24MAC_Class7IsReadyEv+0x22>
   12030:	2300      	movs	r3, #0
   12032:	2b00      	cmp	r3, #0
   12034:	d003      	beq.n	1203e <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
   12036:	687b      	ldr	r3, [r7, #4]
   12038:	2201      	movs	r2, #1
   1203a:	701a      	strb	r2, [r3, #0]
   1203c:	e002      	b.n	12044 <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
   1203e:	687b      	ldr	r3, [r7, #4]
   12040:	2200      	movs	r2, #0
   12042:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   12044:	687b      	ldr	r3, [r7, #4]
   12046:	781b      	ldrb	r3, [r3, #0]
   12048:	b2db      	uxtb	r3, r3
}
   1204a:	4618      	mov	r0, r3
   1204c:	370c      	adds	r7, #12
   1204e:	46bd      	mov	sp, r7
   12050:	bc80      	pop	{r7}
   12052:	4770      	bx	lr

00012054 <_Z41__static_initialization_and_destruction_0ii>:

   12054:	b580      	push	{r7, lr}
   12056:	b082      	sub	sp, #8
   12058:	af00      	add	r7, sp, #0
   1205a:	6078      	str	r0, [r7, #4]
   1205c:	6039      	str	r1, [r7, #0]
   1205e:	687b      	ldr	r3, [r7, #4]
   12060:	2b01      	cmp	r3, #1
   12062:	d10d      	bne.n	12080 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12064:	683b      	ldr	r3, [r7, #0]
   12066:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1206a:	4293      	cmp	r3, r2
   1206c:	d108      	bne.n	12080 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1206e:	4906      	ldr	r1, [pc, #24]	; (12088 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12070:	4806      	ldr	r0, [pc, #24]	; (1208c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12072:	4b07      	ldr	r3, [pc, #28]	; (12090 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12074:	4798      	blx	r3
   12076:	4a07      	ldr	r2, [pc, #28]	; (12094 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12078:	4907      	ldr	r1, [pc, #28]	; (12098 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1207a:	4804      	ldr	r0, [pc, #16]	; (1208c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1207c:	4b07      	ldr	r3, [pc, #28]	; (1209c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1207e:	4798      	blx	r3
   12080:	bf00      	nop
   12082:	3708      	adds	r7, #8
   12084:	46bd      	mov	sp, r7
   12086:	bd80      	pop	{r7, pc}
   12088:	200050c0 	.word	0x200050c0
   1208c:	20004ab4 	.word	0x20004ab4
   12090:	00011bbd 	.word	0x00011bbd
   12094:	20000000 	.word	0x20000000
   12098:	00011bf1 	.word	0x00011bf1
   1209c:	00014579 	.word	0x00014579

000120a0 <_GLOBAL__sub_I_ptrAT24MACClass>:
   120a0:	b580      	push	{r7, lr}
   120a2:	af00      	add	r7, sp, #0
   120a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   120a8:	2001      	movs	r0, #1
   120aa:	4b01      	ldr	r3, [pc, #4]	; (120b0 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   120ac:	4798      	blx	r3
   120ae:	bd80      	pop	{r7, pc}
   120b0:	00012055 	.word	0x00012055

000120b4 <hri_port_set_DIR_reg>:
{
   120b4:	b480      	push	{r7}
   120b6:	b085      	sub	sp, #20
   120b8:	af00      	add	r7, sp, #0
   120ba:	60f8      	str	r0, [r7, #12]
   120bc:	460b      	mov	r3, r1
   120be:	607a      	str	r2, [r7, #4]
   120c0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   120c2:	7afb      	ldrb	r3, [r7, #11]
   120c4:	68fa      	ldr	r2, [r7, #12]
   120c6:	01db      	lsls	r3, r3, #7
   120c8:	4413      	add	r3, r2
   120ca:	3308      	adds	r3, #8
   120cc:	687a      	ldr	r2, [r7, #4]
   120ce:	601a      	str	r2, [r3, #0]
}
   120d0:	bf00      	nop
   120d2:	3714      	adds	r7, #20
   120d4:	46bd      	mov	sp, r7
   120d6:	bc80      	pop	{r7}
   120d8:	4770      	bx	lr

000120da <hri_port_clear_DIR_reg>:
{
   120da:	b480      	push	{r7}
   120dc:	b085      	sub	sp, #20
   120de:	af00      	add	r7, sp, #0
   120e0:	60f8      	str	r0, [r7, #12]
   120e2:	460b      	mov	r3, r1
   120e4:	607a      	str	r2, [r7, #4]
   120e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   120e8:	7afb      	ldrb	r3, [r7, #11]
   120ea:	68fa      	ldr	r2, [r7, #12]
   120ec:	01db      	lsls	r3, r3, #7
   120ee:	4413      	add	r3, r2
   120f0:	3304      	adds	r3, #4
   120f2:	687a      	ldr	r2, [r7, #4]
   120f4:	601a      	str	r2, [r3, #0]
}
   120f6:	bf00      	nop
   120f8:	3714      	adds	r7, #20
   120fa:	46bd      	mov	sp, r7
   120fc:	bc80      	pop	{r7}
   120fe:	4770      	bx	lr

00012100 <hri_port_set_OUT_reg>:
{
   12100:	b480      	push	{r7}
   12102:	b085      	sub	sp, #20
   12104:	af00      	add	r7, sp, #0
   12106:	60f8      	str	r0, [r7, #12]
   12108:	460b      	mov	r3, r1
   1210a:	607a      	str	r2, [r7, #4]
   1210c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1210e:	7afb      	ldrb	r3, [r7, #11]
   12110:	68fa      	ldr	r2, [r7, #12]
   12112:	01db      	lsls	r3, r3, #7
   12114:	4413      	add	r3, r2
   12116:	3318      	adds	r3, #24
   12118:	687a      	ldr	r2, [r7, #4]
   1211a:	601a      	str	r2, [r3, #0]
}
   1211c:	bf00      	nop
   1211e:	3714      	adds	r7, #20
   12120:	46bd      	mov	sp, r7
   12122:	bc80      	pop	{r7}
   12124:	4770      	bx	lr

00012126 <hri_port_clear_OUT_reg>:
{
   12126:	b480      	push	{r7}
   12128:	b085      	sub	sp, #20
   1212a:	af00      	add	r7, sp, #0
   1212c:	60f8      	str	r0, [r7, #12]
   1212e:	460b      	mov	r3, r1
   12130:	607a      	str	r2, [r7, #4]
   12132:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12134:	7afb      	ldrb	r3, [r7, #11]
   12136:	68fa      	ldr	r2, [r7, #12]
   12138:	01db      	lsls	r3, r3, #7
   1213a:	4413      	add	r3, r2
   1213c:	3314      	adds	r3, #20
   1213e:	687a      	ldr	r2, [r7, #4]
   12140:	601a      	str	r2, [r3, #0]
}
   12142:	bf00      	nop
   12144:	3714      	adds	r7, #20
   12146:	46bd      	mov	sp, r7
   12148:	bc80      	pop	{r7}
   1214a:	4770      	bx	lr

0001214c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1214c:	b480      	push	{r7}
   1214e:	b085      	sub	sp, #20
   12150:	af00      	add	r7, sp, #0
   12152:	6078      	str	r0, [r7, #4]
   12154:	4608      	mov	r0, r1
   12156:	4611      	mov	r1, r2
   12158:	461a      	mov	r2, r3
   1215a:	4603      	mov	r3, r0
   1215c:	70fb      	strb	r3, [r7, #3]
   1215e:	460b      	mov	r3, r1
   12160:	70bb      	strb	r3, [r7, #2]
   12162:	4613      	mov	r3, r2
   12164:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12166:	78fa      	ldrb	r2, [r7, #3]
   12168:	78bb      	ldrb	r3, [r7, #2]
   1216a:	6879      	ldr	r1, [r7, #4]
   1216c:	01d2      	lsls	r2, r2, #7
   1216e:	440a      	add	r2, r1
   12170:	4413      	add	r3, r2
   12172:	3330      	adds	r3, #48	; 0x30
   12174:	781b      	ldrb	r3, [r3, #0]
   12176:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   12178:	7bfb      	ldrb	r3, [r7, #15]
   1217a:	f023 030f 	bic.w	r3, r3, #15
   1217e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   12180:	787b      	ldrb	r3, [r7, #1]
   12182:	f003 030f 	and.w	r3, r3, #15
   12186:	b2da      	uxtb	r2, r3
   12188:	7bfb      	ldrb	r3, [r7, #15]
   1218a:	4313      	orrs	r3, r2
   1218c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1218e:	78fa      	ldrb	r2, [r7, #3]
   12190:	78bb      	ldrb	r3, [r7, #2]
   12192:	6879      	ldr	r1, [r7, #4]
   12194:	01d2      	lsls	r2, r2, #7
   12196:	440a      	add	r2, r1
   12198:	4413      	add	r3, r2
   1219a:	3330      	adds	r3, #48	; 0x30
   1219c:	7bfa      	ldrb	r2, [r7, #15]
   1219e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   121a0:	bf00      	nop
   121a2:	3714      	adds	r7, #20
   121a4:	46bd      	mov	sp, r7
   121a6:	bc80      	pop	{r7}
   121a8:	4770      	bx	lr

000121aa <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   121aa:	b480      	push	{r7}
   121ac:	b085      	sub	sp, #20
   121ae:	af00      	add	r7, sp, #0
   121b0:	6078      	str	r0, [r7, #4]
   121b2:	4608      	mov	r0, r1
   121b4:	4611      	mov	r1, r2
   121b6:	461a      	mov	r2, r3
   121b8:	4603      	mov	r3, r0
   121ba:	70fb      	strb	r3, [r7, #3]
   121bc:	460b      	mov	r3, r1
   121be:	70bb      	strb	r3, [r7, #2]
   121c0:	4613      	mov	r3, r2
   121c2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   121c4:	78fa      	ldrb	r2, [r7, #3]
   121c6:	78bb      	ldrb	r3, [r7, #2]
   121c8:	6879      	ldr	r1, [r7, #4]
   121ca:	01d2      	lsls	r2, r2, #7
   121cc:	440a      	add	r2, r1
   121ce:	4413      	add	r3, r2
   121d0:	3330      	adds	r3, #48	; 0x30
   121d2:	781b      	ldrb	r3, [r3, #0]
   121d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   121d6:	7bfb      	ldrb	r3, [r7, #15]
   121d8:	f003 030f 	and.w	r3, r3, #15
   121dc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   121de:	787b      	ldrb	r3, [r7, #1]
   121e0:	011b      	lsls	r3, r3, #4
   121e2:	b2da      	uxtb	r2, r3
   121e4:	7bfb      	ldrb	r3, [r7, #15]
   121e6:	4313      	orrs	r3, r2
   121e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   121ea:	78fa      	ldrb	r2, [r7, #3]
   121ec:	78bb      	ldrb	r3, [r7, #2]
   121ee:	6879      	ldr	r1, [r7, #4]
   121f0:	01d2      	lsls	r2, r2, #7
   121f2:	440a      	add	r2, r1
   121f4:	4413      	add	r3, r2
   121f6:	3330      	adds	r3, #48	; 0x30
   121f8:	7bfa      	ldrb	r2, [r7, #15]
   121fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   121fc:	bf00      	nop
   121fe:	3714      	adds	r7, #20
   12200:	46bd      	mov	sp, r7
   12202:	bc80      	pop	{r7}
   12204:	4770      	bx	lr

00012206 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   12206:	b480      	push	{r7}
   12208:	b085      	sub	sp, #20
   1220a:	af00      	add	r7, sp, #0
   1220c:	6078      	str	r0, [r7, #4]
   1220e:	4608      	mov	r0, r1
   12210:	4611      	mov	r1, r2
   12212:	461a      	mov	r2, r3
   12214:	4603      	mov	r3, r0
   12216:	70fb      	strb	r3, [r7, #3]
   12218:	460b      	mov	r3, r1
   1221a:	70bb      	strb	r3, [r7, #2]
   1221c:	4613      	mov	r3, r2
   1221e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   12220:	78fa      	ldrb	r2, [r7, #3]
   12222:	78bb      	ldrb	r3, [r7, #2]
   12224:	6879      	ldr	r1, [r7, #4]
   12226:	01d2      	lsls	r2, r2, #7
   12228:	440a      	add	r2, r1
   1222a:	4413      	add	r3, r2
   1222c:	3340      	adds	r3, #64	; 0x40
   1222e:	781b      	ldrb	r3, [r3, #0]
   12230:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   12232:	7bfb      	ldrb	r3, [r7, #15]
   12234:	f023 0301 	bic.w	r3, r3, #1
   12238:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   1223a:	787a      	ldrb	r2, [r7, #1]
   1223c:	7bfb      	ldrb	r3, [r7, #15]
   1223e:	4313      	orrs	r3, r2
   12240:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   12242:	78fa      	ldrb	r2, [r7, #3]
   12244:	78bb      	ldrb	r3, [r7, #2]
   12246:	6879      	ldr	r1, [r7, #4]
   12248:	01d2      	lsls	r2, r2, #7
   1224a:	440a      	add	r2, r1
   1224c:	4413      	add	r3, r2
   1224e:	3340      	adds	r3, #64	; 0x40
   12250:	7bfa      	ldrb	r2, [r7, #15]
   12252:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12254:	bf00      	nop
   12256:	3714      	adds	r7, #20
   12258:	46bd      	mov	sp, r7
   1225a:	bc80      	pop	{r7}
   1225c:	4770      	bx	lr

0001225e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1225e:	b480      	push	{r7}
   12260:	b085      	sub	sp, #20
   12262:	af00      	add	r7, sp, #0
   12264:	60f8      	str	r0, [r7, #12]
   12266:	460b      	mov	r3, r1
   12268:	607a      	str	r2, [r7, #4]
   1226a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1226c:	7afb      	ldrb	r3, [r7, #11]
   1226e:	68fa      	ldr	r2, [r7, #12]
   12270:	01db      	lsls	r3, r3, #7
   12272:	4413      	add	r3, r2
   12274:	3328      	adds	r3, #40	; 0x28
   12276:	687a      	ldr	r2, [r7, #4]
   12278:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1227a:	bf00      	nop
   1227c:	3714      	adds	r7, #20
   1227e:	46bd      	mov	sp, r7
   12280:	bc80      	pop	{r7}
   12282:	4770      	bx	lr

00012284 <_gpio_set_direction>:
{
   12284:	b580      	push	{r7, lr}
   12286:	b082      	sub	sp, #8
   12288:	af00      	add	r7, sp, #0
   1228a:	4603      	mov	r3, r0
   1228c:	6039      	str	r1, [r7, #0]
   1228e:	71fb      	strb	r3, [r7, #7]
   12290:	4613      	mov	r3, r2
   12292:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   12294:	79bb      	ldrb	r3, [r7, #6]
   12296:	2b01      	cmp	r3, #1
   12298:	d01c      	beq.n	122d4 <_gpio_set_direction+0x50>
   1229a:	2b02      	cmp	r3, #2
   1229c:	d037      	beq.n	1230e <_gpio_set_direction+0x8a>
   1229e:	2b00      	cmp	r3, #0
   122a0:	d14e      	bne.n	12340 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   122a2:	79fb      	ldrb	r3, [r7, #7]
   122a4:	683a      	ldr	r2, [r7, #0]
   122a6:	4619      	mov	r1, r3
   122a8:	482a      	ldr	r0, [pc, #168]	; (12354 <_gpio_set_direction+0xd0>)
   122aa:	4b2b      	ldr	r3, [pc, #172]	; (12358 <_gpio_set_direction+0xd4>)
   122ac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   122ae:	683b      	ldr	r3, [r7, #0]
   122b0:	b29b      	uxth	r3, r3
   122b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   122b6:	79fb      	ldrb	r3, [r7, #7]
   122b8:	4619      	mov	r1, r3
   122ba:	4826      	ldr	r0, [pc, #152]	; (12354 <_gpio_set_direction+0xd0>)
   122bc:	4b27      	ldr	r3, [pc, #156]	; (1235c <_gpio_set_direction+0xd8>)
   122be:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   122c0:	683b      	ldr	r3, [r7, #0]
   122c2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   122c4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   122c8:	79fb      	ldrb	r3, [r7, #7]
   122ca:	4619      	mov	r1, r3
   122cc:	4821      	ldr	r0, [pc, #132]	; (12354 <_gpio_set_direction+0xd0>)
   122ce:	4b23      	ldr	r3, [pc, #140]	; (1235c <_gpio_set_direction+0xd8>)
   122d0:	4798      	blx	r3
		break;
   122d2:	e03a      	b.n	1234a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   122d4:	79fb      	ldrb	r3, [r7, #7]
   122d6:	683a      	ldr	r2, [r7, #0]
   122d8:	4619      	mov	r1, r3
   122da:	481e      	ldr	r0, [pc, #120]	; (12354 <_gpio_set_direction+0xd0>)
   122dc:	4b1e      	ldr	r3, [pc, #120]	; (12358 <_gpio_set_direction+0xd4>)
   122de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   122e0:	683b      	ldr	r3, [r7, #0]
   122e2:	b29b      	uxth	r3, r3
   122e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   122e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   122ec:	79f9      	ldrb	r1, [r7, #7]
   122ee:	461a      	mov	r2, r3
   122f0:	4818      	ldr	r0, [pc, #96]	; (12354 <_gpio_set_direction+0xd0>)
   122f2:	4b1a      	ldr	r3, [pc, #104]	; (1235c <_gpio_set_direction+0xd8>)
   122f4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   122f6:	683b      	ldr	r3, [r7, #0]
   122f8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   122fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   122fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   12302:	79f9      	ldrb	r1, [r7, #7]
   12304:	461a      	mov	r2, r3
   12306:	4813      	ldr	r0, [pc, #76]	; (12354 <_gpio_set_direction+0xd0>)
   12308:	4b14      	ldr	r3, [pc, #80]	; (1235c <_gpio_set_direction+0xd8>)
   1230a:	4798      	blx	r3
		break;
   1230c:	e01d      	b.n	1234a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   1230e:	79fb      	ldrb	r3, [r7, #7]
   12310:	683a      	ldr	r2, [r7, #0]
   12312:	4619      	mov	r1, r3
   12314:	480f      	ldr	r0, [pc, #60]	; (12354 <_gpio_set_direction+0xd0>)
   12316:	4b12      	ldr	r3, [pc, #72]	; (12360 <_gpio_set_direction+0xdc>)
   12318:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1231a:	683b      	ldr	r3, [r7, #0]
   1231c:	b29b      	uxth	r3, r3
   1231e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12322:	79fb      	ldrb	r3, [r7, #7]
   12324:	4619      	mov	r1, r3
   12326:	480b      	ldr	r0, [pc, #44]	; (12354 <_gpio_set_direction+0xd0>)
   12328:	4b0c      	ldr	r3, [pc, #48]	; (1235c <_gpio_set_direction+0xd8>)
   1232a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1232c:	683b      	ldr	r3, [r7, #0]
   1232e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12330:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12334:	79fb      	ldrb	r3, [r7, #7]
   12336:	4619      	mov	r1, r3
   12338:	4806      	ldr	r0, [pc, #24]	; (12354 <_gpio_set_direction+0xd0>)
   1233a:	4b08      	ldr	r3, [pc, #32]	; (1235c <_gpio_set_direction+0xd8>)
   1233c:	4798      	blx	r3
		break;
   1233e:	e004      	b.n	1234a <_gpio_set_direction+0xc6>
		ASSERT(false);
   12340:	2246      	movs	r2, #70	; 0x46
   12342:	4908      	ldr	r1, [pc, #32]	; (12364 <_gpio_set_direction+0xe0>)
   12344:	2000      	movs	r0, #0
   12346:	4b08      	ldr	r3, [pc, #32]	; (12368 <_gpio_set_direction+0xe4>)
   12348:	4798      	blx	r3
}
   1234a:	bf00      	nop
   1234c:	3708      	adds	r7, #8
   1234e:	46bd      	mov	sp, r7
   12350:	bd80      	pop	{r7, pc}
   12352:	bf00      	nop
   12354:	41008000 	.word	0x41008000
   12358:	000120db 	.word	0x000120db
   1235c:	0001225f 	.word	0x0001225f
   12360:	000120b5 	.word	0x000120b5
   12364:	0001bf40 	.word	0x0001bf40
   12368:	000062c5 	.word	0x000062c5

0001236c <_gpio_set_level>:
{
   1236c:	b580      	push	{r7, lr}
   1236e:	b082      	sub	sp, #8
   12370:	af00      	add	r7, sp, #0
   12372:	4603      	mov	r3, r0
   12374:	6039      	str	r1, [r7, #0]
   12376:	71fb      	strb	r3, [r7, #7]
   12378:	4613      	mov	r3, r2
   1237a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1237c:	79bb      	ldrb	r3, [r7, #6]
   1237e:	2b00      	cmp	r3, #0
   12380:	d006      	beq.n	12390 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12382:	79fb      	ldrb	r3, [r7, #7]
   12384:	683a      	ldr	r2, [r7, #0]
   12386:	4619      	mov	r1, r3
   12388:	4806      	ldr	r0, [pc, #24]	; (123a4 <_gpio_set_level+0x38>)
   1238a:	4b07      	ldr	r3, [pc, #28]	; (123a8 <_gpio_set_level+0x3c>)
   1238c:	4798      	blx	r3
}
   1238e:	e005      	b.n	1239c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12390:	79fb      	ldrb	r3, [r7, #7]
   12392:	683a      	ldr	r2, [r7, #0]
   12394:	4619      	mov	r1, r3
   12396:	4803      	ldr	r0, [pc, #12]	; (123a4 <_gpio_set_level+0x38>)
   12398:	4b04      	ldr	r3, [pc, #16]	; (123ac <_gpio_set_level+0x40>)
   1239a:	4798      	blx	r3
}
   1239c:	bf00      	nop
   1239e:	3708      	adds	r7, #8
   123a0:	46bd      	mov	sp, r7
   123a2:	bd80      	pop	{r7, pc}
   123a4:	41008000 	.word	0x41008000
   123a8:	00012101 	.word	0x00012101
   123ac:	00012127 	.word	0x00012127

000123b0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   123b0:	b590      	push	{r4, r7, lr}
   123b2:	b085      	sub	sp, #20
   123b4:	af00      	add	r7, sp, #0
   123b6:	6078      	str	r0, [r7, #4]
   123b8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   123ba:	687b      	ldr	r3, [r7, #4]
   123bc:	095b      	lsrs	r3, r3, #5
   123be:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   123c0:	687b      	ldr	r3, [r7, #4]
   123c2:	b2db      	uxtb	r3, r3
   123c4:	f003 031f 	and.w	r3, r3, #31
   123c8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   123ca:	683b      	ldr	r3, [r7, #0]
   123cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   123d0:	d106      	bne.n	123e0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   123d2:	7bba      	ldrb	r2, [r7, #14]
   123d4:	7bf9      	ldrb	r1, [r7, #15]
   123d6:	2300      	movs	r3, #0
   123d8:	4812      	ldr	r0, [pc, #72]	; (12424 <_gpio_set_pin_function+0x74>)
   123da:	4c13      	ldr	r4, [pc, #76]	; (12428 <_gpio_set_pin_function+0x78>)
   123dc:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   123de:	e01d      	b.n	1241c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   123e0:	7bba      	ldrb	r2, [r7, #14]
   123e2:	7bf9      	ldrb	r1, [r7, #15]
   123e4:	2301      	movs	r3, #1
   123e6:	480f      	ldr	r0, [pc, #60]	; (12424 <_gpio_set_pin_function+0x74>)
   123e8:	4c0f      	ldr	r4, [pc, #60]	; (12428 <_gpio_set_pin_function+0x78>)
   123ea:	47a0      	blx	r4
		if (pin & 1) {
   123ec:	7bbb      	ldrb	r3, [r7, #14]
   123ee:	f003 0301 	and.w	r3, r3, #1
   123f2:	2b00      	cmp	r3, #0
   123f4:	d009      	beq.n	1240a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   123f6:	7bbb      	ldrb	r3, [r7, #14]
   123f8:	105b      	asrs	r3, r3, #1
   123fa:	b2da      	uxtb	r2, r3
   123fc:	683b      	ldr	r3, [r7, #0]
   123fe:	b2db      	uxtb	r3, r3
   12400:	7bf9      	ldrb	r1, [r7, #15]
   12402:	4808      	ldr	r0, [pc, #32]	; (12424 <_gpio_set_pin_function+0x74>)
   12404:	4c09      	ldr	r4, [pc, #36]	; (1242c <_gpio_set_pin_function+0x7c>)
   12406:	47a0      	blx	r4
}
   12408:	e008      	b.n	1241c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   1240a:	7bbb      	ldrb	r3, [r7, #14]
   1240c:	105b      	asrs	r3, r3, #1
   1240e:	b2da      	uxtb	r2, r3
   12410:	683b      	ldr	r3, [r7, #0]
   12412:	b2db      	uxtb	r3, r3
   12414:	7bf9      	ldrb	r1, [r7, #15]
   12416:	4803      	ldr	r0, [pc, #12]	; (12424 <_gpio_set_pin_function+0x74>)
   12418:	4c05      	ldr	r4, [pc, #20]	; (12430 <_gpio_set_pin_function+0x80>)
   1241a:	47a0      	blx	r4
}
   1241c:	bf00      	nop
   1241e:	3714      	adds	r7, #20
   12420:	46bd      	mov	sp, r7
   12422:	bd90      	pop	{r4, r7, pc}
   12424:	41008000 	.word	0x41008000
   12428:	00012207 	.word	0x00012207
   1242c:	000121ab 	.word	0x000121ab
   12430:	0001214d 	.word	0x0001214d

00012434 <gpio_set_pin_function>:
{
   12434:	b580      	push	{r7, lr}
   12436:	b082      	sub	sp, #8
   12438:	af00      	add	r7, sp, #0
   1243a:	6078      	str	r0, [r7, #4]
   1243c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   1243e:	6839      	ldr	r1, [r7, #0]
   12440:	6878      	ldr	r0, [r7, #4]
   12442:	4b03      	ldr	r3, [pc, #12]	; (12450 <gpio_set_pin_function+0x1c>)
   12444:	4798      	blx	r3
}
   12446:	bf00      	nop
   12448:	3708      	adds	r7, #8
   1244a:	46bd      	mov	sp, r7
   1244c:	bd80      	pop	{r7, pc}
   1244e:	bf00      	nop
   12450:	000123b1 	.word	0x000123b1

00012454 <gpio_set_pin_direction>:
{
   12454:	b580      	push	{r7, lr}
   12456:	b082      	sub	sp, #8
   12458:	af00      	add	r7, sp, #0
   1245a:	4603      	mov	r3, r0
   1245c:	460a      	mov	r2, r1
   1245e:	71fb      	strb	r3, [r7, #7]
   12460:	4613      	mov	r3, r2
   12462:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   12464:	79fb      	ldrb	r3, [r7, #7]
   12466:	115b      	asrs	r3, r3, #5
   12468:	b2d8      	uxtb	r0, r3
   1246a:	79fb      	ldrb	r3, [r7, #7]
   1246c:	f003 031f 	and.w	r3, r3, #31
   12470:	2201      	movs	r2, #1
   12472:	fa02 f303 	lsl.w	r3, r2, r3
   12476:	79ba      	ldrb	r2, [r7, #6]
   12478:	4619      	mov	r1, r3
   1247a:	4b03      	ldr	r3, [pc, #12]	; (12488 <gpio_set_pin_direction+0x34>)
   1247c:	4798      	blx	r3
}
   1247e:	bf00      	nop
   12480:	3708      	adds	r7, #8
   12482:	46bd      	mov	sp, r7
   12484:	bd80      	pop	{r7, pc}
   12486:	bf00      	nop
   12488:	00012285 	.word	0x00012285

0001248c <gpio_set_pin_level>:
{
   1248c:	b580      	push	{r7, lr}
   1248e:	b082      	sub	sp, #8
   12490:	af00      	add	r7, sp, #0
   12492:	4603      	mov	r3, r0
   12494:	460a      	mov	r2, r1
   12496:	71fb      	strb	r3, [r7, #7]
   12498:	4613      	mov	r3, r2
   1249a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1249c:	79fb      	ldrb	r3, [r7, #7]
   1249e:	115b      	asrs	r3, r3, #5
   124a0:	b2d8      	uxtb	r0, r3
   124a2:	79fb      	ldrb	r3, [r7, #7]
   124a4:	f003 031f 	and.w	r3, r3, #31
   124a8:	2201      	movs	r2, #1
   124aa:	fa02 f303 	lsl.w	r3, r2, r3
   124ae:	79ba      	ldrb	r2, [r7, #6]
   124b0:	4619      	mov	r1, r3
   124b2:	4b03      	ldr	r3, [pc, #12]	; (124c0 <gpio_set_pin_level+0x34>)
   124b4:	4798      	blx	r3
}
   124b6:	bf00      	nop
   124b8:	3708      	adds	r7, #8
   124ba:	46bd      	mov	sp, r7
   124bc:	bd80      	pop	{r7, pc}
   124be:	bf00      	nop
   124c0:	0001236d 	.word	0x0001236d

000124c4 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   124c4:	b580      	push	{r7, lr}
   124c6:	b082      	sub	sp, #8
   124c8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   124ca:	2100      	movs	r1, #0
   124cc:	2008      	movs	r0, #8
   124ce:	4b24      	ldr	r3, [pc, #144]	; (12560 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   124d0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   124d2:	2100      	movs	r1, #0
   124d4:	202b      	movs	r0, #43	; 0x2b
   124d6:	4b22      	ldr	r3, [pc, #136]	; (12560 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   124d8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   124da:	2100      	movs	r1, #0
   124dc:	202a      	movs	r0, #42	; 0x2a
   124de:	4b20      	ldr	r3, [pc, #128]	; (12560 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   124e0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   124e2:	2102      	movs	r1, #2
   124e4:	2008      	movs	r0, #8
   124e6:	4b1f      	ldr	r3, [pc, #124]	; (12564 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   124e8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   124ea:	2102      	movs	r1, #2
   124ec:	202b      	movs	r0, #43	; 0x2b
   124ee:	4b1d      	ldr	r3, [pc, #116]	; (12564 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   124f0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   124f2:	2102      	movs	r1, #2
   124f4:	202a      	movs	r0, #42	; 0x2a
   124f6:	4b1b      	ldr	r3, [pc, #108]	; (12564 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   124f8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   124fa:	2101      	movs	r1, #1
   124fc:	2008      	movs	r0, #8
   124fe:	4b1a      	ldr	r3, [pc, #104]	; (12568 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12500:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   12502:	2100      	movs	r1, #0
   12504:	202b      	movs	r0, #43	; 0x2b
   12506:	4b18      	ldr	r3, [pc, #96]	; (12568 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12508:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   1250a:	2100      	movs	r1, #0
   1250c:	202a      	movs	r0, #42	; 0x2a
   1250e:	4b16      	ldr	r3, [pc, #88]	; (12568 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12510:	4798      	blx	r3

	delay_us(1);
   12512:	2001      	movs	r0, #1
   12514:	4b15      	ldr	r3, [pc, #84]	; (1256c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12516:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   12518:	2300      	movs	r3, #0
   1251a:	607b      	str	r3, [r7, #4]
   1251c:	687b      	ldr	r3, [r7, #4]
   1251e:	2b06      	cmp	r3, #6
   12520:	dc11      	bgt.n	12546 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   12522:	2101      	movs	r1, #1
   12524:	202a      	movs	r0, #42	; 0x2a
   12526:	4b10      	ldr	r3, [pc, #64]	; (12568 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12528:	4798      	blx	r3
		delay_us(1);
   1252a:	2001      	movs	r0, #1
   1252c:	4b0f      	ldr	r3, [pc, #60]	; (1256c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1252e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   12530:	2100      	movs	r1, #0
   12532:	202a      	movs	r0, #42	; 0x2a
   12534:	4b0c      	ldr	r3, [pc, #48]	; (12568 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12536:	4798      	blx	r3
		delay_us(1);
   12538:	2001      	movs	r0, #1
   1253a:	4b0c      	ldr	r3, [pc, #48]	; (1256c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1253c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1253e:	687b      	ldr	r3, [r7, #4]
   12540:	3301      	adds	r3, #1
   12542:	607b      	str	r3, [r7, #4]
   12544:	e7ea      	b.n	1251c <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   12546:	2101      	movs	r1, #1
   12548:	202b      	movs	r0, #43	; 0x2b
   1254a:	4b07      	ldr	r3, [pc, #28]	; (12568 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1254c:	4798      	blx	r3
	delay_us(1);
   1254e:	2001      	movs	r0, #1
   12550:	4b06      	ldr	r3, [pc, #24]	; (1256c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12552:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   12554:	4b06      	ldr	r3, [pc, #24]	; (12570 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   12556:	4798      	blx	r3
}
   12558:	bf00      	nop
   1255a:	3708      	adds	r7, #8
   1255c:	46bd      	mov	sp, r7
   1255e:	bd80      	pop	{r7, pc}
   12560:	00012435 	.word	0x00012435
   12564:	00012455 	.word	0x00012455
   12568:	0001248d 	.word	0x0001248d
   1256c:	000046cd 	.word	0x000046cd
   12570:	00003729 	.word	0x00003729

00012574 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   12574:	b480      	push	{r7}
   12576:	b083      	sub	sp, #12
   12578:	af00      	add	r7, sp, #0
   1257a:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   1257c:	687b      	ldr	r3, [r7, #4]
   1257e:	4618      	mov	r0, r3
   12580:	370c      	adds	r7, #12
   12582:	46bd      	mov	sp, r7
   12584:	bc80      	pop	{r7}
   12586:	4770      	bx	lr

00012588 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   12588:	b480      	push	{r7}
   1258a:	b083      	sub	sp, #12
   1258c:	af00      	add	r7, sp, #0
   1258e:	6078      	str	r0, [r7, #4]
   12590:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   12592:	687b      	ldr	r3, [r7, #4]
   12594:	683a      	ldr	r2, [r7, #0]
   12596:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   12598:	687b      	ldr	r3, [r7, #4]
   1259a:	4a04      	ldr	r2, [pc, #16]	; (125ac <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   1259c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   125a0:	687b      	ldr	r3, [r7, #4]
   125a2:	4618      	mov	r0, r3
   125a4:	370c      	adds	r7, #12
   125a6:	46bd      	mov	sp, r7
   125a8:	bc80      	pop	{r7}
   125aa:	4770      	bx	lr
   125ac:	001fff00 	.word	0x001fff00

000125b0 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   125b0:	b480      	push	{r7}
   125b2:	b083      	sub	sp, #12
   125b4:	af00      	add	r7, sp, #0
   125b6:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   125b8:	687b      	ldr	r3, [r7, #4]
   125ba:	4618      	mov	r0, r3
   125bc:	370c      	adds	r7, #12
   125be:	46bd      	mov	sp, r7
   125c0:	bc80      	pop	{r7}
   125c2:	4770      	bx	lr

000125c4 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   125c4:	b580      	push	{r7, lr}
   125c6:	b082      	sub	sp, #8
   125c8:	af00      	add	r7, sp, #0
   125ca:	6078      	str	r0, [r7, #4]
	xferDone=false;
   125cc:	687b      	ldr	r3, [r7, #4]
   125ce:	2200      	movs	r2, #0
   125d0:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   125d2:	6878      	ldr	r0, [r7, #4]
   125d4:	4b04      	ldr	r3, [pc, #16]	; (125e8 <_ZN13N25Q256_Class4InitEv+0x24>)
   125d6:	4798      	blx	r3
	return SelfTest();
   125d8:	6878      	ldr	r0, [r7, #4]
   125da:	4b04      	ldr	r3, [pc, #16]	; (125ec <_ZN13N25Q256_Class4InitEv+0x28>)
   125dc:	4798      	blx	r3
   125de:	4603      	mov	r3, r0
}
   125e0:	4618      	mov	r0, r3
   125e2:	3708      	adds	r7, #8
   125e4:	46bd      	mov	sp, r7
   125e6:	bd80      	pop	{r7, pc}
   125e8:	000125f1 	.word	0x000125f1
   125ec:	000127a5 	.word	0x000127a5

000125f0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   125f0:	b590      	push	{r4, r7, lr}
   125f2:	b083      	sub	sp, #12
   125f4:	af00      	add	r7, sp, #0
   125f6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   125f8:	687b      	ldr	r3, [r7, #4]
   125fa:	685b      	ldr	r3, [r3, #4]
   125fc:	4618      	mov	r0, r3
   125fe:	4b08      	ldr	r3, [pc, #32]	; (12620 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   12600:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   12602:	687b      	ldr	r3, [r7, #4]
   12604:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   12606:	2300      	movs	r3, #0
   12608:	4a06      	ldr	r2, [pc, #24]	; (12624 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   1260a:	4807      	ldr	r0, [pc, #28]	; (12628 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   1260c:	4c07      	ldr	r4, [pc, #28]	; (1262c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1260e:	47a0      	blx	r4
   12610:	4602      	mov	r2, r0
   12612:	687b      	ldr	r3, [r7, #4]
   12614:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   12618:	bf00      	nop
   1261a:	370c      	adds	r7, #12
   1261c:	46bd      	mov	sp, r7
   1261e:	bd90      	pop	{r4, r7, pc}
   12620:	00004d9d 	.word	0x00004d9d
   12624:	000124c5 	.word	0x000124c5
   12628:	20004af8 	.word	0x20004af8
   1262c:	0000e98d 	.word	0x0000e98d

00012630 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   12630:	b580      	push	{r7, lr}
   12632:	b084      	sub	sp, #16
   12634:	af00      	add	r7, sp, #0
   12636:	6078      	str	r0, [r7, #4]
   12638:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   1263a:	687b      	ldr	r3, [r7, #4]
   1263c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12640:	685b      	ldr	r3, [r3, #4]
   12642:	689b      	ldr	r3, [r3, #8]
   12644:	687a      	ldr	r2, [r7, #4]
   12646:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   1264a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1264e:	6839      	ldr	r1, [r7, #0]
   12650:	4798      	blx	r3
   12652:	4603      	mov	r3, r0
   12654:	60fb      	str	r3, [r7, #12]
	return	e;
   12656:	68fb      	ldr	r3, [r7, #12]
}
   12658:	4618      	mov	r0, r3
   1265a:	3710      	adds	r7, #16
   1265c:	46bd      	mov	sp, r7
   1265e:	bd80      	pop	{r7, pc}

00012660 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12660:	b590      	push	{r4, r7, lr}
   12662:	b087      	sub	sp, #28
   12664:	af00      	add	r7, sp, #0
   12666:	60f8      	str	r0, [r7, #12]
   12668:	60b9      	str	r1, [r7, #8]
   1266a:	607a      	str	r2, [r7, #4]
   1266c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   1266e:	68fb      	ldr	r3, [r7, #12]
   12670:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12674:	685b      	ldr	r3, [r3, #4]
   12676:	685c      	ldr	r4, [r3, #4]
   12678:	68fb      	ldr	r3, [r7, #12]
   1267a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1267e:	683b      	ldr	r3, [r7, #0]
   12680:	687a      	ldr	r2, [r7, #4]
   12682:	68b9      	ldr	r1, [r7, #8]
   12684:	47a0      	blx	r4
   12686:	4603      	mov	r3, r0
   12688:	617b      	str	r3, [r7, #20]
	return	w;
   1268a:	697b      	ldr	r3, [r7, #20]
}
   1268c:	4618      	mov	r0, r3
   1268e:	371c      	adds	r7, #28
   12690:	46bd      	mov	sp, r7
   12692:	bd90      	pop	{r4, r7, pc}

00012694 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12694:	b590      	push	{r4, r7, lr}
   12696:	b087      	sub	sp, #28
   12698:	af00      	add	r7, sp, #0
   1269a:	60f8      	str	r0, [r7, #12]
   1269c:	60b9      	str	r1, [r7, #8]
   1269e:	607a      	str	r2, [r7, #4]
   126a0:	603b      	str	r3, [r7, #0]
	xferDone=false;
   126a2:	68fb      	ldr	r3, [r7, #12]
   126a4:	2200      	movs	r2, #0
   126a6:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   126a8:	68fb      	ldr	r3, [r7, #12]
   126aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   126ae:	685b      	ldr	r3, [r3, #4]
   126b0:	681c      	ldr	r4, [r3, #0]
   126b2:	68fb      	ldr	r3, [r7, #12]
   126b4:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   126b8:	683b      	ldr	r3, [r7, #0]
   126ba:	687a      	ldr	r2, [r7, #4]
   126bc:	68b9      	ldr	r1, [r7, #8]
   126be:	47a0      	blx	r4
   126c0:	4603      	mov	r3, r0
   126c2:	617b      	str	r3, [r7, #20]
	return	r;
   126c4:	697b      	ldr	r3, [r7, #20]
}
   126c6:	4618      	mov	r0, r3
   126c8:	371c      	adds	r7, #28
   126ca:	46bd      	mov	sp, r7
   126cc:	bd90      	pop	{r4, r7, pc}
	...

000126d0 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   126d0:	b580      	push	{r7, lr}
   126d2:	b082      	sub	sp, #8
   126d4:	af00      	add	r7, sp, #0
   126d6:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   126d8:	687a      	ldr	r2, [r7, #4]
   126da:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   126de:	f043 0310 	orr.w	r3, r3, #16
   126e2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   126e6:	687a      	ldr	r2, [r7, #4]
   126e8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   126ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   126f0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   126f4:	687a      	ldr	r2, [r7, #4]
   126f6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   126fa:	f36f 1305 	bfc	r3, #4, #2
   126fe:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   12702:	687b      	ldr	r3, [r7, #4]
   12704:	2205      	movs	r2, #5
   12706:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   1270a:	687b      	ldr	r3, [r7, #4]
   1270c:	2201      	movs	r2, #1
   1270e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   12712:	687b      	ldr	r3, [r7, #4]
   12714:	f203 2212 	addw	r2, r3, #530	; 0x212
   12718:	687b      	ldr	r3, [r7, #4]
   1271a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1271e:	687b      	ldr	r3, [r7, #4]
   12720:	685a      	ldr	r2, [r3, #4]
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	f503 7305 	add.w	r3, r3, #532	; 0x214
   12728:	4619      	mov	r1, r3
   1272a:	4610      	mov	r0, r2
   1272c:	4b04      	ldr	r3, [pc, #16]	; (12740 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1272e:	4798      	blx	r3
		return status;
   12730:	687b      	ldr	r3, [r7, #4]
   12732:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   12736:	4618      	mov	r0, r3
   12738:	3708      	adds	r7, #8
   1273a:	46bd      	mov	sp, r7
   1273c:	bd80      	pop	{r7, pc}
   1273e:	bf00      	nop
   12740:	00004e15 	.word	0x00004e15

00012744 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   12744:	b480      	push	{r7}
   12746:	b083      	sub	sp, #12
   12748:	af00      	add	r7, sp, #0
   1274a:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   12752:	4618      	mov	r0, r3
   12754:	370c      	adds	r7, #12
   12756:	46bd      	mov	sp, r7
   12758:	bc80      	pop	{r7}
   1275a:	4770      	bx	lr

0001275c <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1275c:	b580      	push	{r7, lr}
   1275e:	b082      	sub	sp, #8
   12760:	af00      	add	r7, sp, #0
   12762:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   12764:	6878      	ldr	r0, [r7, #4]
   12766:	4b0e      	ldr	r3, [pc, #56]	; (127a0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   12768:	4798      	blx	r3
   1276a:	4603      	mov	r3, r0
   1276c:	461a      	mov	r2, r3
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   12774:	687b      	ldr	r3, [r7, #4]
   12776:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1277a:	f003 0301 	and.w	r3, r3, #1
   1277e:	2b00      	cmp	r3, #0
   12780:	d000      	beq.n	12784 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   12782:	e7ef      	b.n	12764 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   12784:	687b      	ldr	r3, [r7, #4]
   12786:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1278a:	f003 0301 	and.w	r3, r3, #1
   1278e:	2b00      	cmp	r3, #0
   12790:	bf0c      	ite	eq
   12792:	2301      	moveq	r3, #1
   12794:	2300      	movne	r3, #0
   12796:	b2db      	uxtb	r3, r3
}
   12798:	4618      	mov	r0, r3
   1279a:	3708      	adds	r7, #8
   1279c:	46bd      	mov	sp, r7
   1279e:	bd80      	pop	{r7, pc}
   127a0:	000126d1 	.word	0x000126d1

000127a4 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   127a4:	b590      	push	{r4, r7, lr}
   127a6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   127aa:	b085      	sub	sp, #20
   127ac:	af00      	add	r7, sp, #0
   127ae:	f107 0310 	add.w	r3, r7, #16
   127b2:	3b0c      	subs	r3, #12
   127b4:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   127b6:	f107 0310 	add.w	r3, r7, #16
   127ba:	3b0c      	subs	r3, #12
   127bc:	681b      	ldr	r3, [r3, #0]
   127be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   127c2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   127c6:	f107 0310 	add.w	r3, r7, #16
   127ca:	3b0c      	subs	r3, #12
   127cc:	681b      	ldr	r3, [r3, #0]
   127ce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   127d2:	f107 0110 	add.w	r1, r7, #16
   127d6:	3904      	subs	r1, #4
   127d8:	f107 0010 	add.w	r0, r7, #16
   127dc:	380c      	subs	r0, #12
   127de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   127e2:	6800      	ldr	r0, [r0, #0]
   127e4:	4c45      	ldr	r4, [pc, #276]	; (128fc <_ZN13N25Q256_Class8SelfTestEv+0x158>)
   127e6:	47a0      	blx	r4
	flash.WaitOnBusy();
   127e8:	4845      	ldr	r0, [pc, #276]	; (12900 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
   127ea:	4b46      	ldr	r3, [pc, #280]	; (12904 <_ZN13N25Q256_Class8SelfTestEv+0x160>)
   127ec:	4798      	blx	r3
	Erase(currentAddress);
   127ee:	f107 0310 	add.w	r3, r7, #16
   127f2:	3b0c      	subs	r3, #12
   127f4:	681b      	ldr	r3, [r3, #0]
   127f6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   127fa:	f107 0310 	add.w	r3, r7, #16
   127fe:	3b0c      	subs	r3, #12
   12800:	4611      	mov	r1, r2
   12802:	6818      	ldr	r0, [r3, #0]
   12804:	4b40      	ldr	r3, [pc, #256]	; (12908 <_ZN13N25Q256_Class8SelfTestEv+0x164>)
   12806:	4798      	blx	r3
	flash.WaitOnBusy();
   12808:	483d      	ldr	r0, [pc, #244]	; (12900 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
   1280a:	4b3e      	ldr	r3, [pc, #248]	; (12904 <_ZN13N25Q256_Class8SelfTestEv+0x160>)
   1280c:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1280e:	f107 0310 	add.w	r3, r7, #16
   12812:	3b0c      	subs	r3, #12
   12814:	681b      	ldr	r3, [r3, #0]
   12816:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1281a:	f107 0110 	add.w	r1, r7, #16
   1281e:	3904      	subs	r1, #4
   12820:	f107 0010 	add.w	r0, r7, #16
   12824:	380c      	subs	r0, #12
   12826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1282a:	6800      	ldr	r0, [r0, #0]
   1282c:	4c37      	ldr	r4, [pc, #220]	; (1290c <_ZN13N25Q256_Class8SelfTestEv+0x168>)
   1282e:	47a0      	blx	r4
	flash.WaitOnBusy();
   12830:	4833      	ldr	r0, [pc, #204]	; (12900 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
   12832:	4b34      	ldr	r3, [pc, #208]	; (12904 <_ZN13N25Q256_Class8SelfTestEv+0x160>)
   12834:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   12836:	f107 0310 	add.w	r3, r7, #16
   1283a:	3b0c      	subs	r3, #12
   1283c:	681b      	ldr	r3, [r3, #0]
   1283e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12842:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   12846:	f101 0110 	add.w	r1, r1, #16
   1284a:	3904      	subs	r1, #4
   1284c:	f107 0010 	add.w	r0, r7, #16
   12850:	380c      	subs	r0, #12
   12852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12856:	6800      	ldr	r0, [r0, #0]
   12858:	4c28      	ldr	r4, [pc, #160]	; (128fc <_ZN13N25Q256_Class8SelfTestEv+0x158>)
   1285a:	47a0      	blx	r4
	flash.WaitOnBusy();
   1285c:	4828      	ldr	r0, [pc, #160]	; (12900 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
   1285e:	4b29      	ldr	r3, [pc, #164]	; (12904 <_ZN13N25Q256_Class8SelfTestEv+0x160>)
   12860:	4798      	blx	r3
	isOK	 = true;
   12862:	f107 0310 	add.w	r3, r7, #16
   12866:	3b0c      	subs	r3, #12
   12868:	681b      	ldr	r3, [r3, #0]
   1286a:	2201      	movs	r2, #1
   1286c:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12870:	2300      	movs	r3, #0
   12872:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12876:	f102 020c 	add.w	r2, r2, #12
   1287a:	6013      	str	r3, [r2, #0]
   1287c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12880:	f103 030c 	add.w	r3, r3, #12
   12884:	681b      	ldr	r3, [r3, #0]
   12886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1288a:	da2b      	bge.n	128e4 <_ZN13N25Q256_Class8SelfTestEv+0x140>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1288c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   12890:	f103 0310 	add.w	r3, r3, #16
   12894:	3b04      	subs	r3, #4
   12896:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1289a:	f102 020c 	add.w	r2, r2, #12
   1289e:	6812      	ldr	r2, [r2, #0]
   128a0:	4413      	add	r3, r2
   128a2:	781a      	ldrb	r2, [r3, #0]
   128a4:	f107 0310 	add.w	r3, r7, #16
   128a8:	3b04      	subs	r3, #4
   128aa:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   128ae:	f101 010c 	add.w	r1, r1, #12
   128b2:	6809      	ldr	r1, [r1, #0]
   128b4:	440b      	add	r3, r1
   128b6:	781b      	ldrb	r3, [r3, #0]
   128b8:	429a      	cmp	r2, r3
   128ba:	d007      	beq.n	128cc <_ZN13N25Q256_Class8SelfTestEv+0x128>
			isOK = false;
   128bc:	f107 0310 	add.w	r3, r7, #16
   128c0:	3b0c      	subs	r3, #12
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	2200      	movs	r2, #0
   128c6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   128ca:	e00b      	b.n	128e4 <_ZN13N25Q256_Class8SelfTestEv+0x140>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   128cc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   128d0:	f103 030c 	add.w	r3, r3, #12
   128d4:	681b      	ldr	r3, [r3, #0]
   128d6:	3301      	adds	r3, #1
   128d8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   128dc:	f102 020c 	add.w	r2, r2, #12
   128e0:	6013      	str	r3, [r2, #0]
   128e2:	e7cb      	b.n	1287c <_ZN13N25Q256_Class8SelfTestEv+0xd8>
		}
					
	}
	return	isOK;
   128e4:	f107 0310 	add.w	r3, r7, #16
   128e8:	3b0c      	subs	r3, #12
   128ea:	681b      	ldr	r3, [r3, #0]
   128ec:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   128f0:	4618      	mov	r0, r3
   128f2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   128f6:	3714      	adds	r7, #20
   128f8:	46bd      	mov	sp, r7
   128fa:	bd90      	pop	{r4, r7, pc}
   128fc:	00012695 	.word	0x00012695
   12900:	20004b08 	.word	0x20004b08
   12904:	0001275d 	.word	0x0001275d
   12908:	00012631 	.word	0x00012631
   1290c:	00012661 	.word	0x00012661

00012910 <_Z41__static_initialization_and_destruction_0ii>:
   12910:	b580      	push	{r7, lr}
   12912:	b082      	sub	sp, #8
   12914:	af00      	add	r7, sp, #0
   12916:	6078      	str	r0, [r7, #4]
   12918:	6039      	str	r1, [r7, #0]
   1291a:	687b      	ldr	r3, [r7, #4]
   1291c:	2b01      	cmp	r3, #1
   1291e:	d10d      	bne.n	1293c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12920:	683b      	ldr	r3, [r7, #0]
   12922:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12926:	4293      	cmp	r3, r2
   12928:	d108      	bne.n	1293c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1292a:	4906      	ldr	r1, [pc, #24]	; (12944 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1292c:	4806      	ldr	r0, [pc, #24]	; (12948 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1292e:	4b07      	ldr	r3, [pc, #28]	; (1294c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12930:	4798      	blx	r3
   12932:	4a07      	ldr	r2, [pc, #28]	; (12950 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12934:	4907      	ldr	r1, [pc, #28]	; (12954 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12936:	4804      	ldr	r0, [pc, #16]	; (12948 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12938:	4b07      	ldr	r3, [pc, #28]	; (12958 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1293a:	4798      	blx	r3
   1293c:	bf00      	nop
   1293e:	3708      	adds	r7, #8
   12940:	46bd      	mov	sp, r7
   12942:	bd80      	pop	{r7, pc}
   12944:	20004fc8 	.word	0x20004fc8
   12948:	20004b08 	.word	0x20004b08
   1294c:	00012589 	.word	0x00012589
   12950:	20000000 	.word	0x20000000
   12954:	000125b1 	.word	0x000125b1
   12958:	00014579 	.word	0x00014579

0001295c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1295c:	b580      	push	{r7, lr}
   1295e:	af00      	add	r7, sp, #0
   12960:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12964:	2001      	movs	r0, #1
   12966:	4b01      	ldr	r3, [pc, #4]	; (1296c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   12968:	4798      	blx	r3
   1296a:	bd80      	pop	{r7, pc}
   1296c:	00012911 	.word	0x00012911

00012970 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   12970:	b580      	push	{r7, lr}
   12972:	b082      	sub	sp, #8
   12974:	af00      	add	r7, sp, #0
   12976:	6078      	str	r0, [r7, #4]
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	4618      	mov	r0, r3
   1297c:	4b06      	ldr	r3, [pc, #24]	; (12998 <_ZN14Calendar_ClassC1Ev+0x28>)
   1297e:	4798      	blx	r3
   12980:	4a06      	ldr	r2, [pc, #24]	; (1299c <_ZN14Calendar_ClassC1Ev+0x2c>)
   12982:	687b      	ldr	r3, [r7, #4]
   12984:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   12986:	4a06      	ldr	r2, [pc, #24]	; (129a0 <_ZN14Calendar_ClassC1Ev+0x30>)
   12988:	687b      	ldr	r3, [r7, #4]
   1298a:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	4618      	mov	r0, r3
   12990:	3708      	adds	r7, #8
   12992:	46bd      	mov	sp, r7
   12994:	bd80      	pop	{r7, pc}
   12996:	bf00      	nop
   12998:	000130cd 	.word	0x000130cd
   1299c:	0001bf80 	.word	0x0001bf80
   129a0:	20004d38 	.word	0x20004d38

000129a4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   129a4:	b580      	push	{r7, lr}
   129a6:	b082      	sub	sp, #8
   129a8:	af00      	add	r7, sp, #0
   129aa:	6078      	str	r0, [r7, #4]
   129ac:	6039      	str	r1, [r7, #0]
   129ae:	687b      	ldr	r3, [r7, #4]
   129b0:	4618      	mov	r0, r3
   129b2:	4b08      	ldr	r3, [pc, #32]	; (129d4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   129b4:	4798      	blx	r3
   129b6:	4a08      	ldr	r2, [pc, #32]	; (129d8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   129b8:	687b      	ldr	r3, [r7, #4]
   129ba:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   129bc:	687b      	ldr	r3, [r7, #4]
   129be:	683a      	ldr	r2, [r7, #0]
   129c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   129c4:	4a05      	ldr	r2, [pc, #20]	; (129dc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   129c6:	687b      	ldr	r3, [r7, #4]
   129c8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   129ca:	687b      	ldr	r3, [r7, #4]
   129cc:	4618      	mov	r0, r3
   129ce:	3708      	adds	r7, #8
   129d0:	46bd      	mov	sp, r7
   129d2:	bd80      	pop	{r7, pc}
   129d4:	000130cd 	.word	0x000130cd
   129d8:	0001bf80 	.word	0x0001bf80
   129dc:	20004d38 	.word	0x20004d38

000129e0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   129e0:	b580      	push	{r7, lr}
   129e2:	b082      	sub	sp, #8
   129e4:	af00      	add	r7, sp, #0
   129e6:	6078      	str	r0, [r7, #4]
   129e8:	4a05      	ldr	r2, [pc, #20]	; (12a00 <_ZN14Calendar_ClassD1Ev+0x20>)
   129ea:	687b      	ldr	r3, [r7, #4]
   129ec:	601a      	str	r2, [r3, #0]
   129ee:	687b      	ldr	r3, [r7, #4]
   129f0:	4618      	mov	r0, r3
   129f2:	4b04      	ldr	r3, [pc, #16]	; (12a04 <_ZN14Calendar_ClassD1Ev+0x24>)
   129f4:	4798      	blx	r3
{
} //~Calendar_Class
   129f6:	687b      	ldr	r3, [r7, #4]
   129f8:	4618      	mov	r0, r3
   129fa:	3708      	adds	r7, #8
   129fc:	46bd      	mov	sp, r7
   129fe:	bd80      	pop	{r7, pc}
   12a00:	0001bf80 	.word	0x0001bf80
   12a04:	000130ed 	.word	0x000130ed

00012a08 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   12a08:	b580      	push	{r7, lr}
   12a0a:	b082      	sub	sp, #8
   12a0c:	af00      	add	r7, sp, #0
   12a0e:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   12a10:	687b      	ldr	r3, [r7, #4]
   12a12:	4a53      	ldr	r2, [pc, #332]	; (12b60 <_ZN14Calendar_Class4InitEv+0x158>)
   12a14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   12a18:	687b      	ldr	r3, [r7, #4]
   12a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12a1e:	4618      	mov	r0, r3
   12a20:	4b50      	ldr	r3, [pc, #320]	; (12b64 <_ZN14Calendar_Class4InitEv+0x15c>)
   12a22:	4798      	blx	r3
	ptrMemory->Init();
   12a24:	687b      	ldr	r3, [r7, #4]
   12a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   12a2a:	4618      	mov	r0, r3
   12a2c:	4b4e      	ldr	r3, [pc, #312]	; (12b68 <_ZN14Calendar_Class4InitEv+0x160>)
   12a2e:	4798      	blx	r3
	InitMaxDate();
   12a30:	6878      	ldr	r0, [r7, #4]
   12a32:	4b4e      	ldr	r3, [pc, #312]	; (12b6c <_ZN14Calendar_Class4InitEv+0x164>)
   12a34:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   12a36:	687b      	ldr	r3, [r7, #4]
   12a38:	4618      	mov	r0, r3
   12a3a:	4b4d      	ldr	r3, [pc, #308]	; (12b70 <_ZN14Calendar_Class4InitEv+0x168>)
   12a3c:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   12a3e:	687b      	ldr	r3, [r7, #4]
   12a40:	681b      	ldr	r3, [r3, #0]
   12a42:	3304      	adds	r3, #4
   12a44:	681b      	ldr	r3, [r3, #0]
   12a46:	687a      	ldr	r2, [r7, #4]
   12a48:	3260      	adds	r2, #96	; 0x60
   12a4a:	4611      	mov	r1, r2
   12a4c:	6878      	ldr	r0, [r7, #4]
   12a4e:	4798      	blx	r3
   12a50:	4602      	mov	r2, r0
   12a52:	687b      	ldr	r3, [r7, #4]
   12a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   12a58:	687b      	ldr	r3, [r7, #4]
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	3304      	adds	r3, #4
   12a5e:	681b      	ldr	r3, [r3, #0]
   12a60:	687a      	ldr	r2, [r7, #4]
   12a62:	326c      	adds	r2, #108	; 0x6c
   12a64:	4611      	mov	r1, r2
   12a66:	6878      	ldr	r0, [r7, #4]
   12a68:	4798      	blx	r3
   12a6a:	4602      	mov	r2, r0
   12a6c:	687b      	ldr	r3, [r7, #4]
   12a6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   12a72:	687b      	ldr	r3, [r7, #4]
   12a74:	681b      	ldr	r3, [r3, #0]
   12a76:	3304      	adds	r3, #4
   12a78:	681b      	ldr	r3, [r3, #0]
   12a7a:	687a      	ldr	r2, [r7, #4]
   12a7c:	327c      	adds	r2, #124	; 0x7c
   12a7e:	4611      	mov	r1, r2
   12a80:	6878      	ldr	r0, [r7, #4]
   12a82:	4798      	blx	r3
   12a84:	4602      	mov	r2, r0
   12a86:	687b      	ldr	r3, [r7, #4]
   12a88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   12a8c:	687b      	ldr	r3, [r7, #4]
   12a8e:	681b      	ldr	r3, [r3, #0]
   12a90:	3304      	adds	r3, #4
   12a92:	681b      	ldr	r3, [r3, #0]
   12a94:	687a      	ldr	r2, [r7, #4]
   12a96:	3284      	adds	r2, #132	; 0x84
   12a98:	4611      	mov	r1, r2
   12a9a:	6878      	ldr	r0, [r7, #4]
   12a9c:	4798      	blx	r3
   12a9e:	4602      	mov	r2, r0
   12aa0:	687b      	ldr	r3, [r7, #4]
   12aa2:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   12aa4:	6878      	ldr	r0, [r7, #4]
   12aa6:	4b33      	ldr	r3, [pc, #204]	; (12b74 <_ZN14Calendar_Class4InitEv+0x16c>)
   12aa8:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   12aaa:	687b      	ldr	r3, [r7, #4]
   12aac:	681b      	ldr	r3, [r3, #0]
   12aae:	3304      	adds	r3, #4
   12ab0:	681b      	ldr	r3, [r3, #0]
   12ab2:	687a      	ldr	r2, [r7, #4]
   12ab4:	3274      	adds	r2, #116	; 0x74
   12ab6:	4611      	mov	r1, r2
   12ab8:	6878      	ldr	r0, [r7, #4]
   12aba:	4798      	blx	r3
   12abc:	4602      	mov	r2, r0
   12abe:	687b      	ldr	r3, [r7, #4]
   12ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12aca:	687b      	ldr	r3, [r7, #4]
   12acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   12ad0:	429a      	cmp	r2, r3
   12ad2:	d80e      	bhi.n	12af2 <_ZN14Calendar_Class4InitEv+0xea>
   12ad4:	687b      	ldr	r3, [r7, #4]
   12ad6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   12ae0:	429a      	cmp	r2, r3
   12ae2:	d006      	beq.n	12af2 <_ZN14Calendar_Class4InitEv+0xea>
   12ae4:	687b      	ldr	r3, [r7, #4]
   12ae6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12aea:	687b      	ldr	r3, [r7, #4]
   12aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   12aee:	429a      	cmp	r2, r3
   12af0:	d106      	bne.n	12b00 <_ZN14Calendar_Class4InitEv+0xf8>
	{
		SetDateTime(&compilationDateTime);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	3374      	adds	r3, #116	; 0x74
   12af6:	4619      	mov	r1, r3
   12af8:	6878      	ldr	r0, [r7, #4]
   12afa:	4b1f      	ldr	r3, [pc, #124]	; (12b78 <_ZN14Calendar_Class4InitEv+0x170>)
   12afc:	4798      	blx	r3
   12afe:	e022      	b.n	12b46 <_ZN14Calendar_Class4InitEv+0x13e>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   12b00:	687b      	ldr	r3, [r7, #4]
   12b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12b06:	687b      	ldr	r3, [r7, #4]
   12b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   12b0c:	429a      	cmp	r2, r3
   12b0e:	d206      	bcs.n	12b1e <_ZN14Calendar_Class4InitEv+0x116>
		{
			SetDateTime(&compilationDateTime);
   12b10:	687b      	ldr	r3, [r7, #4]
   12b12:	3374      	adds	r3, #116	; 0x74
   12b14:	4619      	mov	r1, r3
   12b16:	6878      	ldr	r0, [r7, #4]
   12b18:	4b17      	ldr	r3, [pc, #92]	; (12b78 <_ZN14Calendar_Class4InitEv+0x170>)
   12b1a:	4798      	blx	r3
   12b1c:	e013      	b.n	12b46 <_ZN14Calendar_Class4InitEv+0x13e>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12b24:	687b      	ldr	r3, [r7, #4]
   12b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   12b28:	429a      	cmp	r2, r3
   12b2a:	d106      	bne.n	12b3a <_ZN14Calendar_Class4InitEv+0x132>
			{
				SetDateTime(&compilationDateTime);
   12b2c:	687b      	ldr	r3, [r7, #4]
   12b2e:	3374      	adds	r3, #116	; 0x74
   12b30:	4619      	mov	r1, r3
   12b32:	6878      	ldr	r0, [r7, #4]
   12b34:	4b10      	ldr	r3, [pc, #64]	; (12b78 <_ZN14Calendar_Class4InitEv+0x170>)
   12b36:	4798      	blx	r3
   12b38:	e005      	b.n	12b46 <_ZN14Calendar_Class4InitEv+0x13e>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	3360      	adds	r3, #96	; 0x60
   12b3e:	4619      	mov	r1, r3
   12b40:	6878      	ldr	r0, [r7, #4]
   12b42:	4b0d      	ldr	r3, [pc, #52]	; (12b78 <_ZN14Calendar_Class4InitEv+0x170>)
   12b44:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   12b46:	687b      	ldr	r3, [r7, #4]
   12b48:	2200      	movs	r2, #0
   12b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   12b4e:	687b      	ldr	r3, [r7, #4]
   12b50:	4618      	mov	r0, r3
   12b52:	4b0a      	ldr	r3, [pc, #40]	; (12b7c <_ZN14Calendar_Class4InitEv+0x174>)
   12b54:	4798      	blx	r3
	
}
   12b56:	bf00      	nop
   12b58:	3708      	adds	r7, #8
   12b5a:	46bd      	mov	sp, r7
   12b5c:	bd80      	pop	{r7, pc}
   12b5e:	bf00      	nop
   12b60:	20004ab4 	.word	0x20004ab4
   12b64:	00004359 	.word	0x00004359
   12b68:	00011c11 	.word	0x00011c11
   12b6c:	00012b81 	.word	0x00012b81
   12b70:	000133a1 	.word	0x000133a1
   12b74:	00012c27 	.word	0x00012c27
   12b78:	00012e1d 	.word	0x00012e1d
   12b7c:	00013331 	.word	0x00013331

00012b80 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   12b80:	b480      	push	{r7}
   12b82:	b083      	sub	sp, #12
   12b84:	af00      	add	r7, sp, #0
   12b86:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   12b88:	687b      	ldr	r3, [r7, #4]
   12b8a:	f640 0202 	movw	r2, #2050	; 0x802
   12b8e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   12b92:	687b      	ldr	r3, [r7, #4]
   12b94:	220c      	movs	r2, #12
   12b96:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   12b9a:	687b      	ldr	r3, [r7, #4]
   12b9c:	221f      	movs	r2, #31
   12b9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   12ba2:	687b      	ldr	r3, [r7, #4]
   12ba4:	220c      	movs	r2, #12
   12ba6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	223b      	movs	r2, #59	; 0x3b
   12bae:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	223b      	movs	r2, #59	; 0x3b
   12bb6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   12bba:	687b      	ldr	r3, [r7, #4]
   12bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12bc0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   12bc4:	687b      	ldr	r3, [r7, #4]
   12bc6:	22ff      	movs	r2, #255	; 0xff
   12bc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   12bcc:	687b      	ldr	r3, [r7, #4]
   12bce:	22ff      	movs	r2, #255	; 0xff
   12bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   12bd4:	687b      	ldr	r3, [r7, #4]
   12bd6:	22ff      	movs	r2, #255	; 0xff
   12bd8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   12bdc:	687b      	ldr	r3, [r7, #4]
   12bde:	22ff      	movs	r2, #255	; 0xff
   12be0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   12be4:	687b      	ldr	r3, [r7, #4]
   12be6:	22ff      	movs	r2, #255	; 0xff
   12be8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   12bec:	687b      	ldr	r3, [r7, #4]
   12bee:	2200      	movs	r2, #0
   12bf0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   12bf4:	687b      	ldr	r3, [r7, #4]
   12bf6:	2200      	movs	r2, #0
   12bf8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   12bfc:	687b      	ldr	r3, [r7, #4]
   12bfe:	2200      	movs	r2, #0
   12c00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	2200      	movs	r2, #0
   12c08:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   12c0c:	687b      	ldr	r3, [r7, #4]
   12c0e:	2200      	movs	r2, #0
   12c10:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   12c14:	687b      	ldr	r3, [r7, #4]
   12c16:	2200      	movs	r2, #0
   12c18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   12c1c:	bf00      	nop
   12c1e:	370c      	adds	r7, #12
   12c20:	46bd      	mov	sp, r7
   12c22:	bc80      	pop	{r7}
   12c24:	4770      	bx	lr

00012c26 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   12c26:	b480      	push	{r7}
   12c28:	b083      	sub	sp, #12
   12c2a:	af00      	add	r7, sp, #0
   12c2c:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   12c2e:	2332      	movs	r3, #50	; 0x32
   12c30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   12c34:	4613      	mov	r3, r2
   12c36:	009b      	lsls	r3, r3, #2
   12c38:	4413      	add	r3, r2
   12c3a:	005b      	lsls	r3, r3, #1
   12c3c:	461a      	mov	r2, r3
   12c3e:	2330      	movs	r3, #48	; 0x30
   12c40:	3b30      	subs	r3, #48	; 0x30
   12c42:	441a      	add	r2, r3
   12c44:	4613      	mov	r3, r2
   12c46:	009b      	lsls	r3, r3, #2
   12c48:	4413      	add	r3, r2
   12c4a:	005b      	lsls	r3, r3, #1
   12c4c:	461a      	mov	r2, r3
   12c4e:	2332      	movs	r3, #50	; 0x32
   12c50:	3b30      	subs	r3, #48	; 0x30
   12c52:	4413      	add	r3, r2
   12c54:	b29b      	uxth	r3, r3
   12c56:	461a      	mov	r2, r3
   12c58:	0092      	lsls	r2, r2, #2
   12c5a:	4413      	add	r3, r2
   12c5c:	005b      	lsls	r3, r3, #1
   12c5e:	b29a      	uxth	r2, r3
   12c60:	2330      	movs	r3, #48	; 0x30
   12c62:	b29b      	uxth	r3, r3
   12c64:	4413      	add	r3, r2
   12c66:	b29b      	uxth	r3, r3
   12c68:	3b30      	subs	r3, #48	; 0x30
   12c6a:	b29a      	uxth	r2, r3
   12c6c:	687b      	ldr	r3, [r7, #4]
   12c6e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   12c72:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12c74:	2b6e      	cmp	r3, #110	; 0x6e
   12c76:	d106      	bne.n	12c86 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   12c78:	2375      	movs	r3, #117	; 0x75
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12c7a:	2b61      	cmp	r3, #97	; 0x61
   12c7c:	d101      	bne.n	12c82 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   12c7e:	2301      	movs	r3, #1
   12c80:	e02f      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12c82:	2306      	movs	r3, #6
   12c84:	e02d      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   12c86:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12c88:	2b62      	cmp	r3, #98	; 0x62
   12c8a:	d029      	beq.n	12ce0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   12c8c:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12c8e:	2b72      	cmp	r3, #114	; 0x72
   12c90:	d106      	bne.n	12ca0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   12c92:	234a      	movs	r3, #74	; 0x4a
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12c94:	2b4d      	cmp	r3, #77	; 0x4d
   12c96:	d101      	bne.n	12c9c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   12c98:	2303      	movs	r3, #3
   12c9a:	e022      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12c9c:	2304      	movs	r3, #4
   12c9e:	e020      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   12ca0:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12ca2:	2b79      	cmp	r3, #121	; 0x79
   12ca4:	d01a      	beq.n	12cdc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   12ca6:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12ca8:	2b6c      	cmp	r3, #108	; 0x6c
   12caa:	d015      	beq.n	12cd8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   12cac:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12cae:	2b67      	cmp	r3, #103	; 0x67
   12cb0:	d010      	beq.n	12cd4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   12cb2:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12cb4:	2b70      	cmp	r3, #112	; 0x70
   12cb6:	d00b      	beq.n	12cd0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   12cb8:	236c      	movs	r3, #108	; 0x6c
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   12cba:	2b74      	cmp	r3, #116	; 0x74
   12cbc:	d006      	beq.n	12ccc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   12cbe:	236c      	movs	r3, #108	; 0x6c
   12cc0:	2b76      	cmp	r3, #118	; 0x76
   12cc2:	d101      	bne.n	12cc8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   12cc4:	230b      	movs	r3, #11
   12cc6:	e00c      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12cc8:	230c      	movs	r3, #12
   12cca:	e00a      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12ccc:	230a      	movs	r3, #10
   12cce:	e008      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12cd0:	2309      	movs	r3, #9
   12cd2:	e006      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12cd4:	2308      	movs	r3, #8
   12cd6:	e004      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12cd8:	2307      	movs	r3, #7
   12cda:	e002      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12cdc:	2305      	movs	r3, #5
   12cde:	e000      	b.n	12ce2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   12ce0:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   12ce2:	687a      	ldr	r2, [r7, #4]
   12ce4:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   12ce8:	2333      	movs	r3, #51	; 0x33
   12cea:	2b20      	cmp	r3, #32
   12cec:	d008      	beq.n	12d00 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   12cee:	2333      	movs	r3, #51	; 0x33
   12cf0:	3b30      	subs	r3, #48	; 0x30
   12cf2:	b2db      	uxtb	r3, r3
   12cf4:	461a      	mov	r2, r3
   12cf6:	0092      	lsls	r2, r2, #2
   12cf8:	4413      	add	r3, r2
   12cfa:	005b      	lsls	r3, r3, #1
   12cfc:	b2db      	uxtb	r3, r3
   12cfe:	e000      	b.n	12d02 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   12d00:	2300      	movs	r3, #0
   12d02:	2231      	movs	r2, #49	; 0x31
   12d04:	4413      	add	r3, r2
   12d06:	b2db      	uxtb	r3, r3
   12d08:	3b30      	subs	r3, #48	; 0x30
   12d0a:	b2da      	uxtb	r2, r3
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   12d12:	2331      	movs	r3, #49	; 0x31
   12d14:	3b30      	subs	r3, #48	; 0x30
   12d16:	b2db      	uxtb	r3, r3
   12d18:	461a      	mov	r2, r3
   12d1a:	0092      	lsls	r2, r2, #2
   12d1c:	4413      	add	r3, r2
   12d1e:	005b      	lsls	r3, r3, #1
   12d20:	b2db      	uxtb	r3, r3
   12d22:	2230      	movs	r2, #48	; 0x30
   12d24:	4413      	add	r3, r2
   12d26:	b2db      	uxtb	r3, r3
   12d28:	3b30      	subs	r3, #48	; 0x30
   12d2a:	b2da      	uxtb	r2, r3
   12d2c:	687b      	ldr	r3, [r7, #4]
   12d2e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   12d32:	2331      	movs	r3, #49	; 0x31
   12d34:	3b30      	subs	r3, #48	; 0x30
   12d36:	b2db      	uxtb	r3, r3
   12d38:	461a      	mov	r2, r3
   12d3a:	0092      	lsls	r2, r2, #2
   12d3c:	4413      	add	r3, r2
   12d3e:	005b      	lsls	r3, r3, #1
   12d40:	b2db      	uxtb	r3, r3
   12d42:	2237      	movs	r2, #55	; 0x37
   12d44:	4413      	add	r3, r2
   12d46:	b2db      	uxtb	r3, r3
   12d48:	3b30      	subs	r3, #48	; 0x30
   12d4a:	b2da      	uxtb	r2, r3
   12d4c:	687b      	ldr	r3, [r7, #4]
   12d4e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   12d52:	2334      	movs	r3, #52	; 0x34
   12d54:	3b30      	subs	r3, #48	; 0x30
   12d56:	b2db      	uxtb	r3, r3
   12d58:	461a      	mov	r2, r3
   12d5a:	0092      	lsls	r2, r2, #2
   12d5c:	4413      	add	r3, r2
   12d5e:	005b      	lsls	r3, r3, #1
   12d60:	b2db      	uxtb	r3, r3
   12d62:	2230      	movs	r2, #48	; 0x30
   12d64:	4413      	add	r3, r2
   12d66:	b2db      	uxtb	r3, r3
   12d68:	3b30      	subs	r3, #48	; 0x30
   12d6a:	b2da      	uxtb	r2, r3
   12d6c:	687b      	ldr	r3, [r7, #4]
   12d6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   12d72:	bf00      	nop
   12d74:	370c      	adds	r7, #12
   12d76:	46bd      	mov	sp, r7
   12d78:	bc80      	pop	{r7}
   12d7a:	4770      	bx	lr

00012d7c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   12d7c:	b580      	push	{r7, lr}
   12d7e:	b082      	sub	sp, #8
   12d80:	af00      	add	r7, sp, #0
   12d82:	6078      	str	r0, [r7, #4]
   12d84:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   12d86:	687b      	ldr	r3, [r7, #4]
   12d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12d8c:	6839      	ldr	r1, [r7, #0]
   12d8e:	4618      	mov	r0, r3
   12d90:	4b03      	ldr	r3, [pc, #12]	; (12da0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   12d92:	4798      	blx	r3
   12d94:	4603      	mov	r3, r0
}
   12d96:	4618      	mov	r0, r3
   12d98:	3708      	adds	r7, #8
   12d9a:	46bd      	mov	sp, r7
   12d9c:	bd80      	pop	{r7, pc}
   12d9e:	bf00      	nop
   12da0:	000044a9 	.word	0x000044a9

00012da4 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   12da4:	b480      	push	{r7}
   12da6:	b083      	sub	sp, #12
   12da8:	af00      	add	r7, sp, #0
   12daa:	6078      	str	r0, [r7, #4]
   12dac:	460b      	mov	r3, r1
   12dae:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   12db0:	887b      	ldrh	r3, [r7, #2]
   12db2:	f003 0303 	and.w	r3, r3, #3
   12db6:	2b00      	cmp	r3, #0
   12db8:	d001      	beq.n	12dbe <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   12dba:	2300      	movs	r3, #0
   12dbc:	e000      	b.n	12dc0 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   12dbe:	2301      	movs	r3, #1
	}
}
   12dc0:	4618      	mov	r0, r3
   12dc2:	370c      	adds	r7, #12
   12dc4:	46bd      	mov	sp, r7
   12dc6:	bc80      	pop	{r7}
   12dc8:	4770      	bx	lr
	...

00012dcc <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   12dcc:	b580      	push	{r7, lr}
   12dce:	b082      	sub	sp, #8
   12dd0:	af00      	add	r7, sp, #0
   12dd2:	6078      	str	r0, [r7, #4]
   12dd4:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12ddc:	6839      	ldr	r1, [r7, #0]
   12dde:	4618      	mov	r0, r3
   12de0:	4b03      	ldr	r3, [pc, #12]	; (12df0 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   12de2:	4798      	blx	r3
   12de4:	4603      	mov	r3, r0
}
   12de6:	4618      	mov	r0, r3
   12de8:	3708      	adds	r7, #8
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	bf00      	nop
   12df0:	00004399 	.word	0x00004399

00012df4 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   12df4:	b580      	push	{r7, lr}
   12df6:	b082      	sub	sp, #8
   12df8:	af00      	add	r7, sp, #0
   12dfa:	6078      	str	r0, [r7, #4]
   12dfc:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   12dfe:	687b      	ldr	r3, [r7, #4]
   12e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12e04:	6839      	ldr	r1, [r7, #0]
   12e06:	4618      	mov	r0, r3
   12e08:	4b03      	ldr	r3, [pc, #12]	; (12e18 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   12e0a:	4798      	blx	r3
   12e0c:	4603      	mov	r3, r0
}
   12e0e:	4618      	mov	r0, r3
   12e10:	3708      	adds	r7, #8
   12e12:	46bd      	mov	sp, r7
   12e14:	bd80      	pop	{r7, pc}
   12e16:	bf00      	nop
   12e18:	00004421 	.word	0x00004421

00012e1c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   12e1c:	b580      	push	{r7, lr}
   12e1e:	b084      	sub	sp, #16
   12e20:	af00      	add	r7, sp, #0
   12e22:	6078      	str	r0, [r7, #4]
   12e24:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   12e26:	683a      	ldr	r2, [r7, #0]
   12e28:	f107 030c 	add.w	r3, r7, #12
   12e2c:	3204      	adds	r2, #4
   12e2e:	6810      	ldr	r0, [r2, #0]
   12e30:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   12e32:	f107 030c 	add.w	r3, r7, #12
   12e36:	4619      	mov	r1, r3
   12e38:	6878      	ldr	r0, [r7, #4]
   12e3a:	4b0a      	ldr	r3, [pc, #40]	; (12e64 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   12e3c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   12e3e:	683a      	ldr	r2, [r7, #0]
   12e40:	f107 0308 	add.w	r3, r7, #8
   12e44:	8811      	ldrh	r1, [r2, #0]
   12e46:	7892      	ldrb	r2, [r2, #2]
   12e48:	8019      	strh	r1, [r3, #0]
   12e4a:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   12e4c:	f107 0308 	add.w	r3, r7, #8
   12e50:	4619      	mov	r1, r3
   12e52:	6878      	ldr	r0, [r7, #4]
   12e54:	4b04      	ldr	r3, [pc, #16]	; (12e68 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   12e56:	4798      	blx	r3
   12e58:	4603      	mov	r3, r0
			
}
   12e5a:	4618      	mov	r0, r3
   12e5c:	3710      	adds	r7, #16
   12e5e:	46bd      	mov	sp, r7
   12e60:	bd80      	pop	{r7, pc}
   12e62:	bf00      	nop
   12e64:	00012df5 	.word	0x00012df5
   12e68:	00012dcd 	.word	0x00012dcd

00012e6c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   12e6c:	b580      	push	{r7, lr}
   12e6e:	b086      	sub	sp, #24
   12e70:	af00      	add	r7, sp, #0
   12e72:	6078      	str	r0, [r7, #4]
   12e74:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   12e76:	2300      	movs	r3, #0
   12e78:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   12e7a:	2300      	movs	r3, #0
   12e7c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   12e7e:	683b      	ldr	r3, [r7, #0]
   12e80:	88db      	ldrh	r3, [r3, #6]
   12e82:	b2da      	uxtb	r2, r3
   12e84:	687b      	ldr	r3, [r7, #4]
   12e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12e8a:	699b      	ldr	r3, [r3, #24]
   12e8c:	b2db      	uxtb	r3, r3
   12e8e:	1ad3      	subs	r3, r2, r3
   12e90:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   12e92:	683b      	ldr	r3, [r7, #0]
   12e94:	795b      	ldrb	r3, [r3, #5]
   12e96:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   12e98:	683b      	ldr	r3, [r7, #0]
   12e9a:	791b      	ldrb	r3, [r3, #4]
   12e9c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   12e9e:	683b      	ldr	r3, [r7, #0]
   12ea0:	789b      	ldrb	r3, [r3, #2]
   12ea2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   12ea4:	683b      	ldr	r3, [r7, #0]
   12ea6:	785b      	ldrb	r3, [r3, #1]
   12ea8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   12eaa:	683b      	ldr	r3, [r7, #0]
   12eac:	781b      	ldrb	r3, [r3, #0]
   12eae:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   12eb0:	2300      	movs	r3, #0
   12eb2:	613b      	str	r3, [r7, #16]
   12eb4:	7bfa      	ldrb	r2, [r7, #15]
   12eb6:	693b      	ldr	r3, [r7, #16]
   12eb8:	429a      	cmp	r2, r3
   12eba:	d91e      	bls.n	12efa <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   12ebc:	687b      	ldr	r3, [r7, #4]
   12ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12ec2:	699b      	ldr	r3, [r3, #24]
   12ec4:	b29a      	uxth	r2, r3
   12ec6:	693b      	ldr	r3, [r7, #16]
   12ec8:	b29b      	uxth	r3, r3
   12eca:	4413      	add	r3, r2
   12ecc:	b29b      	uxth	r3, r3
   12ece:	4619      	mov	r1, r3
   12ed0:	6878      	ldr	r0, [r7, #4]
   12ed2:	4b27      	ldr	r3, [pc, #156]	; (12f70 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   12ed4:	4798      	blx	r3
   12ed6:	4603      	mov	r3, r0
   12ed8:	2b00      	cmp	r3, #0
   12eda:	d006      	beq.n	12eea <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   12edc:	697b      	ldr	r3, [r7, #20]
   12ede:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   12ee2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   12ee6:	617b      	str	r3, [r7, #20]
   12ee8:	e003      	b.n	12ef2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   12eea:	697a      	ldr	r2, [r7, #20]
   12eec:	4b21      	ldr	r3, [pc, #132]	; (12f74 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   12eee:	4413      	add	r3, r2
   12ef0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   12ef2:	693b      	ldr	r3, [r7, #16]
   12ef4:	3301      	adds	r3, #1
   12ef6:	613b      	str	r3, [r7, #16]
   12ef8:	e7dc      	b.n	12eb4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   12efa:	2301      	movs	r3, #1
   12efc:	613b      	str	r3, [r7, #16]
   12efe:	7bba      	ldrb	r2, [r7, #14]
   12f00:	693b      	ldr	r3, [r7, #16]
   12f02:	429a      	cmp	r2, r3
   12f04:	d910      	bls.n	12f28 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   12f06:	683b      	ldr	r3, [r7, #0]
   12f08:	88db      	ldrh	r3, [r3, #6]
   12f0a:	4619      	mov	r1, r3
   12f0c:	693b      	ldr	r3, [r7, #16]
   12f0e:	b2db      	uxtb	r3, r3
   12f10:	461a      	mov	r2, r3
   12f12:	6878      	ldr	r0, [r7, #4]
   12f14:	4b18      	ldr	r3, [pc, #96]	; (12f78 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   12f16:	4798      	blx	r3
   12f18:	4602      	mov	r2, r0
   12f1a:	697b      	ldr	r3, [r7, #20]
   12f1c:	4413      	add	r3, r2
   12f1e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   12f20:	693b      	ldr	r3, [r7, #16]
   12f22:	3301      	adds	r3, #1
   12f24:	613b      	str	r3, [r7, #16]
   12f26:	e7ea      	b.n	12efe <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   12f28:	7b7b      	ldrb	r3, [r7, #13]
   12f2a:	3b01      	subs	r3, #1
   12f2c:	4a13      	ldr	r2, [pc, #76]	; (12f7c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   12f2e:	fb02 f303 	mul.w	r3, r2, r3
   12f32:	461a      	mov	r2, r3
   12f34:	697b      	ldr	r3, [r7, #20]
   12f36:	4413      	add	r3, r2
   12f38:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   12f3a:	7b3b      	ldrb	r3, [r7, #12]
   12f3c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   12f40:	fb02 f303 	mul.w	r3, r2, r3
   12f44:	461a      	mov	r2, r3
   12f46:	697b      	ldr	r3, [r7, #20]
   12f48:	4413      	add	r3, r2
   12f4a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   12f4c:	7afa      	ldrb	r2, [r7, #11]
   12f4e:	4613      	mov	r3, r2
   12f50:	011b      	lsls	r3, r3, #4
   12f52:	1a9b      	subs	r3, r3, r2
   12f54:	009b      	lsls	r3, r3, #2
   12f56:	461a      	mov	r2, r3
   12f58:	697b      	ldr	r3, [r7, #20]
   12f5a:	4413      	add	r3, r2
   12f5c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   12f5e:	7abb      	ldrb	r3, [r7, #10]
   12f60:	697a      	ldr	r2, [r7, #20]
   12f62:	4413      	add	r3, r2
   12f64:	617b      	str	r3, [r7, #20]

	return tmp;
   12f66:	697b      	ldr	r3, [r7, #20]
}
   12f68:	4618      	mov	r0, r3
   12f6a:	3718      	adds	r7, #24
   12f6c:	46bd      	mov	sp, r7
   12f6e:	bd80      	pop	{r7, pc}
   12f70:	00012da5 	.word	0x00012da5
   12f74:	01e13380 	.word	0x01e13380
   12f78:	00012f81 	.word	0x00012f81
   12f7c:	00015180 	.word	0x00015180

00012f80 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   12f80:	b580      	push	{r7, lr}
   12f82:	b086      	sub	sp, #24
   12f84:	af00      	add	r7, sp, #0
   12f86:	60f8      	str	r0, [r7, #12]
   12f88:	60b9      	str	r1, [r7, #8]
   12f8a:	4613      	mov	r3, r2
   12f8c:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   12f8e:	2300      	movs	r3, #0
   12f90:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   12f92:	68bb      	ldr	r3, [r7, #8]
   12f94:	b29b      	uxth	r3, r3
   12f96:	4619      	mov	r1, r3
   12f98:	68f8      	ldr	r0, [r7, #12]
   12f9a:	4b2f      	ldr	r3, [pc, #188]	; (13058 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   12f9c:	4798      	blx	r3
   12f9e:	4603      	mov	r3, r0
   12fa0:	2b00      	cmp	r3, #0
   12fa2:	d028      	beq.n	12ff6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   12fa4:	79fb      	ldrb	r3, [r7, #7]
   12fa6:	3b01      	subs	r3, #1
   12fa8:	2b0b      	cmp	r3, #11
   12faa:	d84c      	bhi.n	13046 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   12fac:	a201      	add	r2, pc, #4	; (adr r2, 12fb4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   12fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12fb2:	bf00      	nop
   12fb4:	00012fe5 	.word	0x00012fe5
   12fb8:	00012feb 	.word	0x00012feb
   12fbc:	00012fe5 	.word	0x00012fe5
   12fc0:	00012ff1 	.word	0x00012ff1
   12fc4:	00012fe5 	.word	0x00012fe5
   12fc8:	00012ff1 	.word	0x00012ff1
   12fcc:	00012fe5 	.word	0x00012fe5
   12fd0:	00012fe5 	.word	0x00012fe5
   12fd4:	00012ff1 	.word	0x00012ff1
   12fd8:	00012fe5 	.word	0x00012fe5
   12fdc:	00012ff1 	.word	0x00012ff1
   12fe0:	00012fe5 	.word	0x00012fe5
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   12fe4:	4b1d      	ldr	r3, [pc, #116]	; (1305c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   12fe6:	617b      	str	r3, [r7, #20]
			break;
   12fe8:	e030      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   12fea:	4b1d      	ldr	r3, [pc, #116]	; (13060 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   12fec:	617b      	str	r3, [r7, #20]
			break;
   12fee:	e02d      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   12ff0:	4b1c      	ldr	r3, [pc, #112]	; (13064 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   12ff2:	617b      	str	r3, [r7, #20]
			break;
   12ff4:	e02a      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   12ff6:	79fb      	ldrb	r3, [r7, #7]
   12ff8:	3b01      	subs	r3, #1
   12ffa:	2b0b      	cmp	r3, #11
   12ffc:	d825      	bhi.n	1304a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   12ffe:	a201      	add	r2, pc, #4	; (adr r2, 13004 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   13000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13004:	00013035 	.word	0x00013035
   13008:	0001303b 	.word	0x0001303b
   1300c:	00013035 	.word	0x00013035
   13010:	00013041 	.word	0x00013041
   13014:	00013035 	.word	0x00013035
   13018:	00013041 	.word	0x00013041
   1301c:	00013035 	.word	0x00013035
   13020:	00013035 	.word	0x00013035
   13024:	00013041 	.word	0x00013041
   13028:	00013035 	.word	0x00013035
   1302c:	00013041 	.word	0x00013041
   13030:	00013035 	.word	0x00013035
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   13034:	4b09      	ldr	r3, [pc, #36]	; (1305c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   13036:	617b      	str	r3, [r7, #20]
			break;
   13038:	e008      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1303a:	4b0b      	ldr	r3, [pc, #44]	; (13068 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1303c:	617b      	str	r3, [r7, #20]
			break;
   1303e:	e005      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   13040:	4b08      	ldr	r3, [pc, #32]	; (13064 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   13042:	617b      	str	r3, [r7, #20]
			break;
   13044:	e002      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   13046:	bf00      	nop
   13048:	e000      	b.n	1304c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1304a:	bf00      	nop
		}
	}

	return sec_in_month;
   1304c:	697b      	ldr	r3, [r7, #20]
}
   1304e:	4618      	mov	r0, r3
   13050:	3718      	adds	r7, #24
   13052:	46bd      	mov	sp, r7
   13054:	bd80      	pop	{r7, pc}
   13056:	bf00      	nop
   13058:	00012da5 	.word	0x00012da5
   1305c:	0028de80 	.word	0x0028de80
   13060:	00263b80 	.word	0x00263b80
   13064:	00278d00 	.word	0x00278d00
   13068:	0024ea00 	.word	0x0024ea00

0001306c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
   1306c:	b580      	push	{r7, lr}
   1306e:	b082      	sub	sp, #8
   13070:	af00      	add	r7, sp, #0
   13072:	6078      	str	r0, [r7, #4]
   13074:	6039      	str	r1, [r7, #0]
   13076:	687b      	ldr	r3, [r7, #4]
   13078:	2b01      	cmp	r3, #1
   1307a:	d10d      	bne.n	13098 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1307c:	683b      	ldr	r3, [r7, #0]
   1307e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13082:	4293      	cmp	r3, r2
   13084:	d108      	bne.n	13098 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13086:	4906      	ldr	r1, [pc, #24]	; (130a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13088:	4806      	ldr	r0, [pc, #24]	; (130a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1308a:	4b07      	ldr	r3, [pc, #28]	; (130a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1308c:	4798      	blx	r3
   1308e:	4a07      	ldr	r2, [pc, #28]	; (130ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13090:	4907      	ldr	r1, [pc, #28]	; (130b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13092:	4804      	ldr	r0, [pc, #16]	; (130a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13094:	4b07      	ldr	r3, [pc, #28]	; (130b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13096:	4798      	blx	r3
   13098:	bf00      	nop
   1309a:	3708      	adds	r7, #8
   1309c:	46bd      	mov	sp, r7
   1309e:	bd80      	pop	{r7, pc}
   130a0:	20005100 	.word	0x20005100
   130a4:	20004d40 	.word	0x20004d40
   130a8:	000129a5 	.word	0x000129a5
   130ac:	20000000 	.word	0x20000000
   130b0:	000129e1 	.word	0x000129e1
   130b4:	00014579 	.word	0x00014579

000130b8 <_GLOBAL__sub_I_ptrCalendarClass>:
   130b8:	b580      	push	{r7, lr}
   130ba:	af00      	add	r7, sp, #0
   130bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   130c0:	2001      	movs	r0, #1
   130c2:	4b01      	ldr	r3, [pc, #4]	; (130c8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   130c4:	4798      	blx	r3
   130c6:	bd80      	pop	{r7, pc}
   130c8:	0001306d 	.word	0x0001306d

000130cc <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   130cc:	b480      	push	{r7}
   130ce:	b083      	sub	sp, #12
   130d0:	af00      	add	r7, sp, #0
   130d2:	6078      	str	r0, [r7, #4]
   130d4:	4a04      	ldr	r2, [pc, #16]	; (130e8 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   130d6:	687b      	ldr	r3, [r7, #4]
   130d8:	601a      	str	r2, [r3, #0]
{
} //~D
   130da:	687b      	ldr	r3, [r7, #4]
   130dc:	4618      	mov	r0, r3
   130de:	370c      	adds	r7, #12
   130e0:	46bd      	mov	sp, r7
   130e2:	bc80      	pop	{r7}
   130e4:	4770      	bx	lr
   130e6:	bf00      	nop
   130e8:	0001bf90 	.word	0x0001bf90

000130ec <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   130ec:	b480      	push	{r7}
   130ee:	b083      	sub	sp, #12
   130f0:	af00      	add	r7, sp, #0
   130f2:	6078      	str	r0, [r7, #4]
   130f4:	4a04      	ldr	r2, [pc, #16]	; (13108 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   130f6:	687b      	ldr	r3, [r7, #4]
   130f8:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   130fa:	687b      	ldr	r3, [r7, #4]
   130fc:	4618      	mov	r0, r3
   130fe:	370c      	adds	r7, #12
   13100:	46bd      	mov	sp, r7
   13102:	bc80      	pop	{r7}
   13104:	4770      	bx	lr
   13106:	bf00      	nop
   13108:	0001bf90 	.word	0x0001bf90

0001310c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   1310c:	b590      	push	{r4, r7, lr}
   1310e:	b085      	sub	sp, #20
   13110:	af00      	add	r7, sp, #0
   13112:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   13114:	687b      	ldr	r3, [r7, #4]
   13116:	681b      	ldr	r3, [r3, #0]
   13118:	681b      	ldr	r3, [r3, #0]
   1311a:	687a      	ldr	r2, [r7, #4]
   1311c:	3226      	adds	r2, #38	; 0x26
   1311e:	4611      	mov	r1, r2
   13120:	6878      	ldr	r0, [r7, #4]
   13122:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	681b      	ldr	r3, [r3, #0]
   13128:	3304      	adds	r3, #4
   1312a:	681b      	ldr	r3, [r3, #0]
   1312c:	687a      	ldr	r2, [r7, #4]
   1312e:	3226      	adds	r2, #38	; 0x26
   13130:	4611      	mov	r1, r2
   13132:	6878      	ldr	r0, [r7, #4]
   13134:	4798      	blx	r3
   13136:	4602      	mov	r2, r0
   13138:	687b      	ldr	r3, [r7, #4]
   1313a:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   1313c:	6878      	ldr	r0, [r7, #4]
   1313e:	4b1a      	ldr	r3, [pc, #104]	; (131a8 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   13140:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   13142:	687b      	ldr	r3, [r7, #4]
   13144:	681b      	ldr	r3, [r3, #0]
   13146:	3304      	adds	r3, #4
   13148:	681b      	ldr	r3, [r3, #0]
   1314a:	687a      	ldr	r2, [r7, #4]
   1314c:	322e      	adds	r2, #46	; 0x2e
   1314e:	4611      	mov	r1, r2
   13150:	6878      	ldr	r0, [r7, #4]
   13152:	4798      	blx	r3
   13154:	4602      	mov	r2, r0
   13156:	687b      	ldr	r3, [r7, #4]
   13158:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   1315a:	687b      	ldr	r3, [r7, #4]
   1315c:	68da      	ldr	r2, [r3, #12]
   1315e:	4b13      	ldr	r3, [pc, #76]	; (131ac <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   13160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   13162:	429a      	cmp	r2, r3
   13164:	d103      	bne.n	1316e <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   13166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1316a:	60fb      	str	r3, [r7, #12]
   1316c:	e016      	b.n	1319c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   1316e:	687b      	ldr	r3, [r7, #4]
   13170:	689b      	ldr	r3, [r3, #8]
   13172:	461a      	mov	r2, r3
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	68db      	ldr	r3, [r3, #12]
   13178:	4619      	mov	r1, r3
   1317a:	4610      	mov	r0, r2
   1317c:	4b0c      	ldr	r3, [pc, #48]	; (131b0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   1317e:	4798      	blx	r3
   13180:	4603      	mov	r3, r0
   13182:	460c      	mov	r4, r1
   13184:	687a      	ldr	r2, [r7, #4]
   13186:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   1318a:	687b      	ldr	r3, [r7, #4]
   1318c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   13190:	4a08      	ldr	r2, [pc, #32]	; (131b4 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   13192:	4618      	mov	r0, r3
   13194:	4621      	mov	r1, r4
   13196:	4790      	blx	r2
   13198:	4603      	mov	r3, r0
   1319a:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   1319c:	68fb      	ldr	r3, [r7, #12]
}
   1319e:	4618      	mov	r0, r3
   131a0:	3714      	adds	r7, #20
   131a2:	46bd      	mov	sp, r7
   131a4:	bd90      	pop	{r4, r7, pc}
   131a6:	bf00      	nop
   131a8:	000133a1 	.word	0x000133a1
   131ac:	20004d40 	.word	0x20004d40
   131b0:	00016469 	.word	0x00016469
   131b4:	000160bd 	.word	0x000160bd

000131b8 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   131b8:	b5b0      	push	{r4, r5, r7, lr}
   131ba:	b082      	sub	sp, #8
   131bc:	af00      	add	r7, sp, #0
   131be:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   131c0:	4b07      	ldr	r3, [pc, #28]	; (131e0 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   131c2:	6878      	ldr	r0, [r7, #4]
   131c4:	4798      	blx	r3
   131c6:	4602      	mov	r2, r0
   131c8:	460b      	mov	r3, r1
   131ca:	4614      	mov	r4, r2
   131cc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   131d0:	4623      	mov	r3, r4
   131d2:	462c      	mov	r4, r5
   131d4:	4618      	mov	r0, r3
   131d6:	4621      	mov	r1, r4
   131d8:	3708      	adds	r7, #8
   131da:	46bd      	mov	sp, r7
   131dc:	bdb0      	pop	{r4, r5, r7, pc}
   131de:	bf00      	nop
   131e0:	00015a91 	.word	0x00015a91

000131e4 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   131e4:	b5b0      	push	{r4, r5, r7, lr}
   131e6:	b082      	sub	sp, #8
   131e8:	af00      	add	r7, sp, #0
   131ea:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   131ec:	6878      	ldr	r0, [r7, #4]
   131ee:	4b12      	ldr	r3, [pc, #72]	; (13238 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   131f0:	4798      	blx	r3
   131f2:	4603      	mov	r3, r0
   131f4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   131f8:	4618      	mov	r0, r3
   131fa:	4b10      	ldr	r3, [pc, #64]	; (1323c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   131fc:	4798      	blx	r3
   131fe:	2301      	movs	r3, #1
   13200:	461d      	mov	r5, r3
   13202:	4c0f      	ldr	r4, [pc, #60]	; (13240 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   13204:	f04f 0200 	mov.w	r2, #0
   13208:	4b0e      	ldr	r3, [pc, #56]	; (13244 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   1320a:	47a0      	blx	r4
   1320c:	4603      	mov	r3, r0
   1320e:	2b00      	cmp	r3, #0
   13210:	d101      	bne.n	13216 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   13212:	2300      	movs	r3, #0
   13214:	461d      	mov	r5, r3
   13216:	b2eb      	uxtb	r3, r5
   13218:	2b00      	cmp	r3, #0
   1321a:	d003      	beq.n	13224 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	2201      	movs	r2, #1
   13220:	711a      	strb	r2, [r3, #4]
   13222:	e002      	b.n	1322a <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2200      	movs	r2, #0
   13228:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   1322a:	687b      	ldr	r3, [r7, #4]
   1322c:	791b      	ldrb	r3, [r3, #4]
   1322e:	b2db      	uxtb	r3, r3
}
   13230:	4618      	mov	r0, r3
   13232:	3708      	adds	r7, #8
   13234:	46bd      	mov	sp, r7
   13236:	bdb0      	pop	{r4, r5, r7, pc}
   13238:	0001310d 	.word	0x0001310d
   1323c:	000131b9 	.word	0x000131b9
   13240:	0001607d 	.word	0x0001607d
   13244:	40490000 	.word	0x40490000

00013248 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   13248:	b590      	push	{r4, r7, lr}
   1324a:	b085      	sub	sp, #20
   1324c:	af00      	add	r7, sp, #0
   1324e:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   13250:	687b      	ldr	r3, [r7, #4]
   13252:	f103 0122 	add.w	r1, r3, #34	; 0x22
   13256:	687b      	ldr	r3, [r7, #4]
   13258:	8c1a      	ldrh	r2, [r3, #32]
   1325a:	2301      	movs	r3, #1
   1325c:	480c      	ldr	r0, [pc, #48]	; (13290 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1325e:	4c0d      	ldr	r4, [pc, #52]	; (13294 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   13260:	47a0      	blx	r4
   13262:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   13264:	6878      	ldr	r0, [r7, #4]
   13266:	4b0c      	ldr	r3, [pc, #48]	; (13298 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   13268:	4798      	blx	r3
   1326a:	4603      	mov	r3, r0
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	f103 0122 	add.w	r1, r3, #34	; 0x22
   13278:	687b      	ldr	r3, [r7, #4]
   1327a:	8c1a      	ldrh	r2, [r3, #32]
   1327c:	2301      	movs	r3, #1
   1327e:	4804      	ldr	r0, [pc, #16]	; (13290 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   13280:	4c06      	ldr	r4, [pc, #24]	; (1329c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   13282:	47a0      	blx	r4
   13284:	60f8      	str	r0, [r7, #12]
	return r;
   13286:	68fb      	ldr	r3, [r7, #12]
}
   13288:	4618      	mov	r0, r3
   1328a:	3714      	adds	r7, #20
   1328c:	46bd      	mov	sp, r7
   1328e:	bd90      	pop	{r4, r7, pc}
   13290:	20004ab4 	.word	0x20004ab4
   13294:	00011e79 	.word	0x00011e79
   13298:	000132a1 	.word	0x000132a1
   1329c:	00011d75 	.word	0x00011d75

000132a0 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   132a0:	b480      	push	{r7}
   132a2:	b083      	sub	sp, #12
   132a4:	af00      	add	r7, sp, #0
   132a6:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   132a8:	687b      	ldr	r3, [r7, #4]
   132aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   132ac:	b2db      	uxtb	r3, r3
   132ae:	3301      	adds	r3, #1
   132b0:	b2db      	uxtb	r3, r3
   132b2:	f003 030f 	and.w	r3, r3, #15
   132b6:	b2db      	uxtb	r3, r3
 }
   132b8:	4618      	mov	r0, r3
   132ba:	370c      	adds	r7, #12
   132bc:	46bd      	mov	sp, r7
   132be:	bc80      	pop	{r7}
   132c0:	4770      	bx	lr
	...

000132c4 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   132c4:	b590      	push	{r4, r7, lr}
   132c6:	b085      	sub	sp, #20
   132c8:	af00      	add	r7, sp, #0
   132ca:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   132cc:	687b      	ldr	r3, [r7, #4]
   132ce:	8c1a      	ldrh	r2, [r3, #32]
   132d0:	f107 010f 	add.w	r1, r7, #15
   132d4:	2301      	movs	r3, #1
   132d6:	4804      	ldr	r0, [pc, #16]	; (132e8 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   132d8:	4c04      	ldr	r4, [pc, #16]	; (132ec <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   132da:	47a0      	blx	r4
	 return	s;
   132dc:	7bfb      	ldrb	r3, [r7, #15]
 }
   132de:	4618      	mov	r0, r3
   132e0:	3714      	adds	r7, #20
   132e2:	46bd      	mov	sp, r7
   132e4:	bd90      	pop	{r4, r7, pc}
   132e6:	bf00      	nop
   132e8:	20004ab4 	.word	0x20004ab4
   132ec:	00011e79 	.word	0x00011e79

000132f0 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   132f0:	b480      	push	{r7}
   132f2:	b083      	sub	sp, #12
   132f4:	af00      	add	r7, sp, #0
   132f6:	6078      	str	r0, [r7, #4]
   132f8:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   132fa:	683b      	ldr	r3, [r7, #0]
   132fc:	b29a      	uxth	r2, r3
   132fe:	687b      	ldr	r3, [r7, #4]
   13300:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	8c1b      	ldrh	r3, [r3, #32]
 }
   13306:	4618      	mov	r0, r3
   13308:	370c      	adds	r7, #12
   1330a:	46bd      	mov	sp, r7
   1330c:	bc80      	pop	{r7}
   1330e:	4770      	bx	lr

00013310 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   13310:	b480      	push	{r7}
   13312:	b083      	sub	sp, #12
   13314:	af00      	add	r7, sp, #0
   13316:	6078      	str	r0, [r7, #4]
   13318:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   1331a:	683b      	ldr	r3, [r7, #0]
   1331c:	b29a      	uxth	r2, r3
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   13322:	687b      	ldr	r3, [r7, #4]
   13324:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   13326:	4618      	mov	r0, r3
   13328:	370c      	adds	r7, #12
   1332a:	46bd      	mov	sp, r7
   1332c:	bc80      	pop	{r7}
   1332e:	4770      	bx	lr

00013330 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   13330:	b590      	push	{r4, r7, lr}
   13332:	b085      	sub	sp, #20
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   13338:	6878      	ldr	r0, [r7, #4]
   1333a:	4b15      	ldr	r3, [pc, #84]	; (13390 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   1333c:	4798      	blx	r3
   1333e:	4603      	mov	r3, r0
   13340:	b29a      	uxth	r2, r3
   13342:	687b      	ldr	r3, [r7, #4]
   13344:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   13346:	687b      	ldr	r3, [r7, #4]
   13348:	681b      	ldr	r3, [r3, #0]
   1334a:	681b      	ldr	r3, [r3, #0]
   1334c:	687a      	ldr	r2, [r7, #4]
   1334e:	3226      	adds	r2, #38	; 0x26
   13350:	4611      	mov	r1, r2
   13352:	6878      	ldr	r0, [r7, #4]
   13354:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   13356:	687b      	ldr	r3, [r7, #4]
   13358:	3326      	adds	r3, #38	; 0x26
   1335a:	461a      	mov	r2, r3
   1335c:	687b      	ldr	r3, [r7, #4]
   1335e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	6b99      	ldr	r1, [r3, #56]	; 0x38
   13364:	687b      	ldr	r3, [r7, #4]
   13366:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13368:	b2da      	uxtb	r2, r3
   1336a:	687b      	ldr	r3, [r7, #4]
   1336c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1336e:	b2db      	uxtb	r3, r3
   13370:	4413      	add	r3, r2
   13372:	b2da      	uxtb	r2, r3
   13374:	2308      	movs	r3, #8
   13376:	4807      	ldr	r0, [pc, #28]	; (13394 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   13378:	4c07      	ldr	r4, [pc, #28]	; (13398 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   1337a:	47a0      	blx	r4
   1337c:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   1337e:	6878      	ldr	r0, [r7, #4]
   13380:	4b06      	ldr	r3, [pc, #24]	; (1339c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   13382:	4798      	blx	r3
	return	w;
   13384:	68fb      	ldr	r3, [r7, #12]
}
   13386:	4618      	mov	r0, r3
   13388:	3714      	adds	r7, #20
   1338a:	46bd      	mov	sp, r7
   1338c:	bd90      	pop	{r4, r7, pc}
   1338e:	bf00      	nop
   13390:	000132c5 	.word	0x000132c5
   13394:	20004ab4 	.word	0x20004ab4
   13398:	00011ce1 	.word	0x00011ce1
   1339c:	00013249 	.word	0x00013249

000133a0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   133a0:	b590      	push	{r4, r7, lr}
   133a2:	b085      	sub	sp, #20
   133a4:	af00      	add	r7, sp, #0
   133a6:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   133a8:	6878      	ldr	r0, [r7, #4]
   133aa:	4b0f      	ldr	r3, [pc, #60]	; (133e8 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   133ac:	4798      	blx	r3
   133ae:	4603      	mov	r3, r0
   133b0:	b29a      	uxth	r2, r3
   133b2:	687b      	ldr	r3, [r7, #4]
   133b4:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   133b6:	687b      	ldr	r3, [r7, #4]
   133b8:	332e      	adds	r3, #46	; 0x2e
   133ba:	461a      	mov	r2, r3
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   133c0:	687b      	ldr	r3, [r7, #4]
   133c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   133c8:	b2da      	uxtb	r2, r3
   133ca:	687b      	ldr	r3, [r7, #4]
   133cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   133ce:	b2db      	uxtb	r3, r3
   133d0:	4413      	add	r3, r2
   133d2:	b2da      	uxtb	r2, r3
   133d4:	2308      	movs	r3, #8
   133d6:	4805      	ldr	r0, [pc, #20]	; (133ec <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   133d8:	4c05      	ldr	r4, [pc, #20]	; (133f0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   133da:	47a0      	blx	r4
   133dc:	60f8      	str	r0, [r7, #12]
	return	r;
   133de:	68fb      	ldr	r3, [r7, #12]
}
   133e0:	4618      	mov	r0, r3
   133e2:	3714      	adds	r7, #20
   133e4:	46bd      	mov	sp, r7
   133e6:	bd90      	pop	{r4, r7, pc}
   133e8:	000132c5 	.word	0x000132c5
   133ec:	20004ab4 	.word	0x20004ab4
   133f0:	00011e09 	.word	0x00011e09

000133f4 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   133f4:	b580      	push	{r7, lr}
   133f6:	b082      	sub	sp, #8
   133f8:	af00      	add	r7, sp, #0
   133fa:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
   133fc:	4b04      	ldr	r3, [pc, #16]	; (13410 <_ZL7task_cbPK10timer_task+0x1c>)
   133fe:	681b      	ldr	r3, [r3, #0]
   13400:	4618      	mov	r0, r3
   13402:	4b04      	ldr	r3, [pc, #16]	; (13414 <_ZL7task_cbPK10timer_task+0x20>)
   13404:	4798      	blx	r3
}
   13406:	bf00      	nop
   13408:	3708      	adds	r7, #8
   1340a:	46bd      	mov	sp, r7
   1340c:	bd80      	pop	{r7, pc}
   1340e:	bf00      	nop
   13410:	20004de8 	.word	0x20004de8
   13414:	00013511 	.word	0x00013511

00013418 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
   13418:	b480      	push	{r7}
   1341a:	b083      	sub	sp, #12
   1341c:	af00      	add	r7, sp, #0
   1341e:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
   13420:	687b      	ldr	r3, [r7, #4]
   13422:	687a      	ldr	r2, [r7, #4]
   13424:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   13426:	4a08      	ldr	r2, [pc, #32]	; (13448 <_ZN11Timer_ClassC1Ev+0x30>)
   13428:	687b      	ldr	r3, [r7, #4]
   1342a:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1342c:	687b      	ldr	r3, [r7, #4]
   1342e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13432:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   13434:	687b      	ldr	r3, [r7, #4]
   13436:	4a05      	ldr	r2, [pc, #20]	; (1344c <_ZN11Timer_ClassC1Ev+0x34>)
   13438:	621a      	str	r2, [r3, #32]
} //Timer_Class
   1343a:	687b      	ldr	r3, [r7, #4]
   1343c:	4618      	mov	r0, r3
   1343e:	370c      	adds	r7, #12
   13440:	46bd      	mov	sp, r7
   13442:	bc80      	pop	{r7}
   13444:	4770      	bx	lr
   13446:	bf00      	nop
   13448:	20004de8 	.word	0x20004de8
   1344c:	000133f5 	.word	0x000133f5

00013450 <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   13450:	b480      	push	{r7}
   13452:	b083      	sub	sp, #12
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	683a      	ldr	r2, [r7, #0]
   1345e:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
   13460:	4a07      	ldr	r2, [pc, #28]	; (13480 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
   13462:	687b      	ldr	r3, [r7, #4]
   13464:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   13466:	687b      	ldr	r3, [r7, #4]
   13468:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1346c:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	4a04      	ldr	r2, [pc, #16]	; (13484 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   13472:	621a      	str	r2, [r3, #32]
} //Timer_Class
   13474:	687b      	ldr	r3, [r7, #4]
   13476:	4618      	mov	r0, r3
   13478:	370c      	adds	r7, #12
   1347a:	46bd      	mov	sp, r7
   1347c:	bc80      	pop	{r7}
   1347e:	4770      	bx	lr
   13480:	20004de8 	.word	0x20004de8
   13484:	000133f5 	.word	0x000133f5

00013488 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor>:
void	Timer_Class::set_descriptor(timer_descriptor * descr){
   13488:	b480      	push	{r7}
   1348a:	b083      	sub	sp, #12
   1348c:	af00      	add	r7, sp, #0
   1348e:	6078      	str	r0, [r7, #4]
   13490:	6039      	str	r1, [r7, #0]
		timer_descr=descr;
   13492:	687b      	ldr	r3, [r7, #4]
   13494:	683a      	ldr	r2, [r7, #0]
   13496:	609a      	str	r2, [r3, #8]
		ptrTimerClass=this;
   13498:	4a03      	ldr	r2, [pc, #12]	; (134a8 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor+0x20>)
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	6013      	str	r3, [r2, #0]
}
   1349e:	bf00      	nop
   134a0:	370c      	adds	r7, #12
   134a2:	46bd      	mov	sp, r7
   134a4:	bc80      	pop	{r7}
   134a6:	4770      	bx	lr
   134a8:	20004de8 	.word	0x20004de8

000134ac <_ZN11Timer_ClassD1Ev>:

// default destructor
Timer_Class::~Timer_Class()
   134ac:	b480      	push	{r7}
   134ae:	b083      	sub	sp, #12
   134b0:	af00      	add	r7, sp, #0
   134b2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   134b4:	687b      	ldr	r3, [r7, #4]
   134b6:	2200      	movs	r2, #0
   134b8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   134ba:	687b      	ldr	r3, [r7, #4]
   134bc:	4618      	mov	r0, r3
   134be:	370c      	adds	r7, #12
   134c0:	46bd      	mov	sp, r7
   134c2:	bc80      	pop	{r7}
   134c4:	4770      	bx	lr
	...

000134c8 <_ZN11Timer_Class4InitEP16timer_descriptor>:



void Timer_Class::Init(timer_descriptor * descr){
   134c8:	b580      	push	{r7, lr}
   134ca:	b082      	sub	sp, #8
   134cc:	af00      	add	r7, sp, #0
   134ce:	6078      	str	r0, [r7, #4]
   134d0:	6039      	str	r1, [r7, #0]
	set_descriptor(descr);
   134d2:	6839      	ldr	r1, [r7, #0]
   134d4:	6878      	ldr	r0, [r7, #4]
   134d6:	4b04      	ldr	r3, [pc, #16]	; (134e8 <_ZN11Timer_Class4InitEP16timer_descriptor+0x20>)
   134d8:	4798      	blx	r3
	ticks=0;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2200      	movs	r2, #0
   134de:	629a      	str	r2, [r3, #40]	; 0x28
}
   134e0:	bf00      	nop
   134e2:	3708      	adds	r7, #8
   134e4:	46bd      	mov	sp, r7
   134e6:	bd80      	pop	{r7, pc}
   134e8:	00013489 	.word	0x00013489

000134ec <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   134ec:	b580      	push	{r7, lr}
   134ee:	b084      	sub	sp, #16
   134f0:	af00      	add	r7, sp, #0
   134f2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	689b      	ldr	r3, [r3, #8]
   134f8:	4618      	mov	r0, r3
   134fa:	4b04      	ldr	r3, [pc, #16]	; (1350c <_ZN11Timer_Class5startEv+0x20>)
   134fc:	4798      	blx	r3
   134fe:	60f8      	str	r0, [r7, #12]
	return status;
   13500:	68fb      	ldr	r3, [r7, #12]
	
}
   13502:	4618      	mov	r0, r3
   13504:	3710      	adds	r7, #16
   13506:	46bd      	mov	sp, r7
   13508:	bd80      	pop	{r7, pc}
   1350a:	bf00      	nop
   1350c:	0000551d 	.word	0x0000551d

00013510 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
   13510:	b480      	push	{r7}
   13512:	b083      	sub	sp, #12
   13514:	af00      	add	r7, sp, #0
   13516:	6078      	str	r0, [r7, #4]
	timeout=1;
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	2201      	movs	r2, #1
   1351c:	705a      	strb	r2, [r3, #1]
}
   1351e:	bf00      	nop
   13520:	370c      	adds	r7, #12
   13522:	46bd      	mov	sp, r7
   13524:	bc80      	pop	{r7}
   13526:	4770      	bx	lr

00013528 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   13528:	b580      	push	{r7, lr}
   1352a:	b086      	sub	sp, #24
   1352c:	af00      	add	r7, sp, #0
   1352e:	60f8      	str	r0, [r7, #12]
   13530:	60b9      	str	r1, [r7, #8]
   13532:	607a      	str	r2, [r7, #4]
   13534:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
   13536:	68fb      	ldr	r3, [r7, #12]
   13538:	687a      	ldr	r2, [r7, #4]
   1353a:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
   1353c:	68fb      	ldr	r3, [r7, #12]
   1353e:	68ba      	ldr	r2, [r7, #8]
   13540:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
   13542:	68fb      	ldr	r3, [r7, #12]
   13544:	78fa      	ldrb	r2, [r7, #3]
   13546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
   1354a:	68fb      	ldr	r3, [r7, #12]
   1354c:	689a      	ldr	r2, [r3, #8]
   1354e:	68fb      	ldr	r3, [r7, #12]
   13550:	3314      	adds	r3, #20
   13552:	4619      	mov	r1, r3
   13554:	4610      	mov	r0, r2
   13556:	4b04      	ldr	r3, [pc, #16]	; (13568 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x40>)
   13558:	4798      	blx	r3
   1355a:	6178      	str	r0, [r7, #20]
	
	return status;
   1355c:	697b      	ldr	r3, [r7, #20]
}
   1355e:	4618      	mov	r0, r3
   13560:	3718      	adds	r7, #24
   13562:	46bd      	mov	sp, r7
   13564:	bd80      	pop	{r7, pc}
   13566:	bf00      	nop
   13568:	000055cd 	.word	0x000055cd

0001356c <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
   1356c:	b590      	push	{r4, r7, lr}
   1356e:	b087      	sub	sp, #28
   13570:	af00      	add	r7, sp, #0
   13572:	60f8      	str	r0, [r7, #12]
   13574:	60b9      	str	r1, [r7, #8]
   13576:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
   13578:	2301      	movs	r3, #1
   1357a:	687a      	ldr	r2, [r7, #4]
   1357c:	68b9      	ldr	r1, [r7, #8]
   1357e:	68f8      	ldr	r0, [r7, #12]
   13580:	4c03      	ldr	r4, [pc, #12]	; (13590 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x24>)
   13582:	47a0      	blx	r4
   13584:	6178      	str	r0, [r7, #20]
		return status;
   13586:	697b      	ldr	r3, [r7, #20]
}
   13588:	4618      	mov	r0, r3
   1358a:	371c      	adds	r7, #28
   1358c:	46bd      	mov	sp, r7
   1358e:	bd90      	pop	{r4, r7, pc}
   13590:	00013529 	.word	0x00013529

00013594 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
   13594:	b590      	push	{r4, r7, lr}
   13596:	b087      	sub	sp, #28
   13598:	af00      	add	r7, sp, #0
   1359a:	60f8      	str	r0, [r7, #12]
   1359c:	60b9      	str	r1, [r7, #8]
   1359e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
   135a0:	2300      	movs	r3, #0
   135a2:	687a      	ldr	r2, [r7, #4]
   135a4:	68b9      	ldr	r1, [r7, #8]
   135a6:	68f8      	ldr	r0, [r7, #12]
   135a8:	4c06      	ldr	r4, [pc, #24]	; (135c4 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
   135aa:	47a0      	blx	r4
   135ac:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   135ae:	68fb      	ldr	r3, [r7, #12]
   135b0:	689b      	ldr	r3, [r3, #8]
   135b2:	4618      	mov	r0, r3
   135b4:	4b04      	ldr	r3, [pc, #16]	; (135c8 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
   135b6:	4798      	blx	r3
   135b8:	6178      	str	r0, [r7, #20]
	return status;
   135ba:	697b      	ldr	r3, [r7, #20]
}
   135bc:	4618      	mov	r0, r3
   135be:	371c      	adds	r7, #28
   135c0:	46bd      	mov	sp, r7
   135c2:	bd90      	pop	{r4, r7, pc}
   135c4:	00013529 	.word	0x00013529
   135c8:	0000551d 	.word	0x0000551d

000135cc <_ZN11Timer_Class9get_ticksEv>:
	timer_remove_task(timer_descr, &task);
}



uint32_t	Timer_Class::get_ticks(void){
   135cc:	b580      	push	{r7, lr}
   135ce:	b082      	sub	sp, #8
   135d0:	af00      	add	r7, sp, #0
   135d2:	6078      	str	r0, [r7, #4]
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	689a      	ldr	r2, [r3, #8]
   135d8:	687b      	ldr	r3, [r7, #4]
   135da:	3328      	adds	r3, #40	; 0x28
   135dc:	4619      	mov	r1, r3
   135de:	4610      	mov	r0, r2
   135e0:	4b03      	ldr	r3, [pc, #12]	; (135f0 <_ZN11Timer_Class9get_ticksEv+0x24>)
   135e2:	4798      	blx	r3
	return ticks;
   135e4:	687b      	ldr	r3, [r7, #4]
   135e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
   135e8:	4618      	mov	r0, r3
   135ea:	3708      	adds	r7, #8
   135ec:	46bd      	mov	sp, r7
   135ee:	bd80      	pop	{r7, pc}
   135f0:	000057b5 	.word	0x000057b5

000135f4 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
   135f4:	b580      	push	{r7, lr}
   135f6:	b082      	sub	sp, #8
   135f8:	af00      	add	r7, sp, #0
   135fa:	6078      	str	r0, [r7, #4]
   135fc:	6039      	str	r1, [r7, #0]
   135fe:	687b      	ldr	r3, [r7, #4]
   13600:	2b01      	cmp	r3, #1
   13602:	d11f      	bne.n	13644 <_Z41__static_initialization_and_destruction_0ii+0x50>
   13604:	683b      	ldr	r3, [r7, #0]
   13606:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1360a:	4293      	cmp	r3, r2
   1360c:	d11a      	bne.n	13644 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
   1360e:	490f      	ldr	r1, [pc, #60]	; (1364c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   13610:	480f      	ldr	r0, [pc, #60]	; (13650 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   13612:	4b10      	ldr	r3, [pc, #64]	; (13654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13614:	4798      	blx	r3
   13616:	4a10      	ldr	r2, [pc, #64]	; (13658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   13618:	4910      	ldr	r1, [pc, #64]	; (1365c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1361a:	480d      	ldr	r0, [pc, #52]	; (13650 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1361c:	4b10      	ldr	r3, [pc, #64]	; (13660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1361e:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   13620:	4910      	ldr	r1, [pc, #64]	; (13664 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13622:	4811      	ldr	r0, [pc, #68]	; (13668 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   13624:	4b0b      	ldr	r3, [pc, #44]	; (13654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13626:	4798      	blx	r3
   13628:	4a0b      	ldr	r2, [pc, #44]	; (13658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1362a:	490c      	ldr	r1, [pc, #48]	; (1365c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1362c:	480e      	ldr	r0, [pc, #56]	; (13668 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1362e:	4b0c      	ldr	r3, [pc, #48]	; (13660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13630:	4798      	blx	r3
   13632:	490e      	ldr	r1, [pc, #56]	; (1366c <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13634:	480e      	ldr	r0, [pc, #56]	; (13670 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13636:	4b07      	ldr	r3, [pc, #28]	; (13654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13638:	4798      	blx	r3
   1363a:	4a07      	ldr	r2, [pc, #28]	; (13658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1363c:	4907      	ldr	r1, [pc, #28]	; (1365c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1363e:	480c      	ldr	r0, [pc, #48]	; (13670 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13640:	4b07      	ldr	r3, [pc, #28]	; (13660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13642:	4798      	blx	r3
   13644:	bf00      	nop
   13646:	3708      	adds	r7, #8
   13648:	46bd      	mov	sp, r7
   1364a:	bd80      	pop	{r7, pc}
   1364c:	20004fcc 	.word	0x20004fcc
   13650:	20004dec 	.word	0x20004dec
   13654:	00013451 	.word	0x00013451
   13658:	20000000 	.word	0x20000000
   1365c:	000134ad 	.word	0x000134ad
   13660:	00014579 	.word	0x00014579
   13664:	200050a4 	.word	0x200050a4
   13668:	20004e18 	.word	0x20004e18
   1366c:	20004fe8 	.word	0x20004fe8
   13670:	20004e44 	.word	0x20004e44

00013674 <_GLOBAL__sub_I_ptrTimerClass>:
   13674:	b580      	push	{r7, lr}
   13676:	af00      	add	r7, sp, #0
   13678:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1367c:	2001      	movs	r0, #1
   1367e:	4b01      	ldr	r3, [pc, #4]	; (13684 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   13680:	4798      	blx	r3
   13682:	bd80      	pop	{r7, pc}
   13684:	000135f5 	.word	0x000135f5

00013688 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   13688:	b480      	push	{r7}
   1368a:	b083      	sub	sp, #12
   1368c:	af00      	add	r7, sp, #0
   1368e:	6078      	str	r0, [r7, #4]
   13690:	4a05      	ldr	r2, [pc, #20]	; (136a8 <_ZN5PrintC1Ev+0x20>)
   13692:	687b      	ldr	r3, [r7, #4]
   13694:	601a      	str	r2, [r3, #0]
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	2200      	movs	r2, #0
   1369a:	605a      	str	r2, [r3, #4]
   1369c:	687b      	ldr	r3, [r7, #4]
   1369e:	4618      	mov	r0, r3
   136a0:	370c      	adds	r7, #12
   136a2:	46bd      	mov	sp, r7
   136a4:	bc80      	pop	{r7}
   136a6:	4770      	bx	lr
   136a8:	0001c00c 	.word	0x0001c00c

000136ac <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   136ac:	b480      	push	{r7}
   136ae:	b083      	sub	sp, #12
   136b0:	af00      	add	r7, sp, #0
   136b2:	6078      	str	r0, [r7, #4]
   136b4:	2300      	movs	r3, #0
   136b6:	4618      	mov	r0, r3
   136b8:	370c      	adds	r7, #12
   136ba:	46bd      	mov	sp, r7
   136bc:	bc80      	pop	{r7}
   136be:	4770      	bx	lr

000136c0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   136c0:	b480      	push	{r7}
   136c2:	b083      	sub	sp, #12
   136c4:	af00      	add	r7, sp, #0
   136c6:	6078      	str	r0, [r7, #4]
   136c8:	bf00      	nop
   136ca:	370c      	adds	r7, #12
   136cc:	46bd      	mov	sp, r7
   136ce:	bc80      	pop	{r7}
   136d0:	4770      	bx	lr
	...

000136d4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   136d4:	b580      	push	{r7, lr}
   136d6:	b082      	sub	sp, #8
   136d8:	af00      	add	r7, sp, #0
   136da:	6078      	str	r0, [r7, #4]
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	4618      	mov	r0, r3
   136e0:	4b06      	ldr	r3, [pc, #24]	; (136fc <_ZN6StreamC1Ev+0x28>)
   136e2:	4798      	blx	r3
   136e4:	4a06      	ldr	r2, [pc, #24]	; (13700 <_ZN6StreamC1Ev+0x2c>)
   136e6:	687b      	ldr	r3, [r7, #4]
   136e8:	601a      	str	r2, [r3, #0]
   136ea:	687b      	ldr	r3, [r7, #4]
   136ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   136f0:	609a      	str	r2, [r3, #8]
   136f2:	687b      	ldr	r3, [r7, #4]
   136f4:	4618      	mov	r0, r3
   136f6:	3708      	adds	r7, #8
   136f8:	46bd      	mov	sp, r7
   136fa:	bd80      	pop	{r7, pc}
   136fc:	00013689 	.word	0x00013689
   13700:	0001bfd0 	.word	0x0001bfd0

00013704 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   13704:	b480      	push	{r7}
   13706:	b083      	sub	sp, #12
   13708:	af00      	add	r7, sp, #0
   1370a:	4603      	mov	r3, r0
   1370c:	603a      	str	r2, [r7, #0]
   1370e:	71fb      	strb	r3, [r7, #7]
   13710:	460b      	mov	r3, r1
   13712:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   13714:	4b08      	ldr	r3, [pc, #32]	; (13738 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13716:	681b      	ldr	r3, [r3, #0]
   13718:	2201      	movs	r2, #1
   1371a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
   1371c:	4b06      	ldr	r3, [pc, #24]	; (13738 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1371e:	681b      	ldr	r3, [r3, #0]
   13720:	2201      	movs	r2, #1
   13722:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
   13724:	4b04      	ldr	r3, [pc, #16]	; (13738 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13726:	681b      	ldr	r3, [r3, #0]
   13728:	2201      	movs	r2, #1
   1372a:	741a      	strb	r2, [r3, #16]


	return false;
   1372c:	2300      	movs	r3, #0
}
   1372e:	4618      	mov	r0, r3
   13730:	370c      	adds	r7, #12
   13732:	46bd      	mov	sp, r7
   13734:	bc80      	pop	{r7}
   13736:	4770      	bx	lr
   13738:	20004e70 	.word	0x20004e70

0001373c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1373c:	b480      	push	{r7}
   1373e:	b083      	sub	sp, #12
   13740:	af00      	add	r7, sp, #0
   13742:	4603      	mov	r3, r0
   13744:	603a      	str	r2, [r7, #0]
   13746:	71fb      	strb	r3, [r7, #7]
   13748:	460b      	mov	r3, r1
   1374a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1374c:	4b08      	ldr	r3, [pc, #32]	; (13770 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1374e:	681b      	ldr	r3, [r3, #0]
   13750:	2201      	movs	r2, #1
   13752:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
   13754:	4b06      	ldr	r3, [pc, #24]	; (13770 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	2201      	movs	r2, #1
   1375a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
   1375c:	4b04      	ldr	r3, [pc, #16]	; (13770 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1375e:	681b      	ldr	r3, [r3, #0]
   13760:	2201      	movs	r2, #1
   13762:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   13764:	2300      	movs	r3, #0
}
   13766:	4618      	mov	r0, r3
   13768:	370c      	adds	r7, #12
   1376a:	46bd      	mov	sp, r7
   1376c:	bc80      	pop	{r7}
   1376e:	4770      	bx	lr
   13770:	20004e70 	.word	0x20004e70

00013774 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   13774:	b580      	push	{r7, lr}
   13776:	b082      	sub	sp, #8
   13778:	af00      	add	r7, sp, #0
   1377a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1377c:	793b      	ldrb	r3, [r7, #4]
   1377e:	f003 0301 	and.w	r3, r3, #1
   13782:	b2db      	uxtb	r3, r3
   13784:	2b00      	cmp	r3, #0
   13786:	d013      	beq.n	137b0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   13788:	490c      	ldr	r1, [pc, #48]	; (137bc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   1378a:	2000      	movs	r0, #0
   1378c:	4b0c      	ldr	r3, [pc, #48]	; (137c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1378e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   13790:	490c      	ldr	r1, [pc, #48]	; (137c4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   13792:	2001      	movs	r0, #1
   13794:	4b0a      	ldr	r3, [pc, #40]	; (137c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   13796:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   13798:	4b0b      	ldr	r3, [pc, #44]	; (137c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1379a:	681b      	ldr	r3, [r3, #0]
   1379c:	2201      	movs	r2, #1
   1379e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   137a0:	4b09      	ldr	r3, [pc, #36]	; (137c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   137a2:	681b      	ldr	r3, [r3, #0]
   137a4:	2201      	movs	r2, #1
   137a6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
   137a8:	4b07      	ldr	r3, [pc, #28]	; (137c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   137aa:	681b      	ldr	r3, [r3, #0]
   137ac:	2201      	movs	r2, #1
   137ae:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   137b0:	2300      	movs	r3, #0
}
   137b2:	4618      	mov	r0, r3
   137b4:	3708      	adds	r7, #8
   137b6:	46bd      	mov	sp, r7
   137b8:	bd80      	pop	{r7, pc}
   137ba:	bf00      	nop
   137bc:	00013705 	.word	0x00013705
   137c0:	0000f429 	.word	0x0000f429
   137c4:	0001373d 	.word	0x0001373d
   137c8:	20004e70 	.word	0x20004e70

000137cc <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   137cc:	b580      	push	{r7, lr}
   137ce:	b082      	sub	sp, #8
   137d0:	af00      	add	r7, sp, #0
   137d2:	6078      	str	r0, [r7, #4]
   137d4:	687b      	ldr	r3, [r7, #4]
   137d6:	4618      	mov	r0, r3
   137d8:	4b0a      	ldr	r3, [pc, #40]	; (13804 <_ZN9CDC_ClassC1Ev+0x38>)
   137da:	4798      	blx	r3
   137dc:	687b      	ldr	r3, [r7, #4]
   137de:	3310      	adds	r3, #16
   137e0:	4618      	mov	r0, r3
   137e2:	4b09      	ldr	r3, [pc, #36]	; (13808 <_ZN9CDC_ClassC1Ev+0x3c>)
   137e4:	4798      	blx	r3
   137e6:	4a09      	ldr	r2, [pc, #36]	; (1380c <_ZN9CDC_ClassC1Ev+0x40>)
   137e8:	687b      	ldr	r3, [r7, #4]
   137ea:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   137ec:	687b      	ldr	r3, [r7, #4]
   137ee:	f04f 32ff 	mov.w	r2, #4294967295
   137f2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   137f4:	4a06      	ldr	r2, [pc, #24]	; (13810 <_ZN9CDC_ClassC1Ev+0x44>)
   137f6:	687b      	ldr	r3, [r7, #4]
   137f8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   137fa:	687b      	ldr	r3, [r7, #4]
   137fc:	4618      	mov	r0, r3
   137fe:	3708      	adds	r7, #8
   13800:	46bd      	mov	sp, r7
   13802:	bd80      	pop	{r7, pc}
   13804:	000136d5 	.word	0x000136d5
   13808:	00013ed5 	.word	0x00013ed5
   1380c:	0001bfa0 	.word	0x0001bfa0
   13810:	20004e70 	.word	0x20004e70

00013814 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   13814:	b580      	push	{r7, lr}
   13816:	b082      	sub	sp, #8
   13818:	af00      	add	r7, sp, #0
   1381a:	6078      	str	r0, [r7, #4]
   1381c:	4a06      	ldr	r2, [pc, #24]	; (13838 <_ZN9CDC_ClassD1Ev+0x24>)
   1381e:	687b      	ldr	r3, [r7, #4]
   13820:	601a      	str	r2, [r3, #0]
   13822:	687b      	ldr	r3, [r7, #4]
   13824:	3310      	adds	r3, #16
   13826:	4618      	mov	r0, r3
   13828:	4b04      	ldr	r3, [pc, #16]	; (1383c <_ZN9CDC_ClassD1Ev+0x28>)
   1382a:	4798      	blx	r3
{
} //~CDC_Class
   1382c:	687b      	ldr	r3, [r7, #4]
   1382e:	4618      	mov	r0, r3
   13830:	3708      	adds	r7, #8
   13832:	46bd      	mov	sp, r7
   13834:	bd80      	pop	{r7, pc}
   13836:	bf00      	nop
   13838:	0001bfa0 	.word	0x0001bfa0
   1383c:	00013ef5 	.word	0x00013ef5

00013840 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   13840:	b580      	push	{r7, lr}
   13842:	b082      	sub	sp, #8
   13844:	af00      	add	r7, sp, #0
   13846:	6078      	str	r0, [r7, #4]
	
	OnInit();
   13848:	687b      	ldr	r3, [r7, #4]
   1384a:	3310      	adds	r3, #16
   1384c:	4618      	mov	r0, r3
   1384e:	4b06      	ldr	r3, [pc, #24]	; (13868 <_ZN9CDC_Class4InitEv+0x28>)
   13850:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   13852:	4906      	ldr	r1, [pc, #24]	; (1386c <_ZN9CDC_Class4InitEv+0x2c>)
   13854:	2003      	movs	r0, #3
   13856:	4b06      	ldr	r3, [pc, #24]	; (13870 <_ZN9CDC_Class4InitEv+0x30>)
   13858:	4798      	blx	r3
	
		
	if (plugged)
   1385a:	687b      	ldr	r3, [r7, #4]
   1385c:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
   1385e:	bf00      	nop
   13860:	3708      	adds	r7, #8
   13862:	46bd      	mov	sp, r7
   13864:	bd80      	pop	{r7, pc}
   13866:	bf00      	nop
   13868:	00013f09 	.word	0x00013f09
   1386c:	00013775 	.word	0x00013775
   13870:	0000f429 	.word	0x0000f429

00013874 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   13874:	b580      	push	{r7, lr}
   13876:	b082      	sub	sp, #8
   13878:	af00      	add	r7, sp, #0
   1387a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   1387c:	4b03      	ldr	r3, [pc, #12]	; (1388c <_ZN9CDC_Class9IsEnabledEv+0x18>)
   1387e:	4798      	blx	r3
   13880:	4603      	mov	r3, r0
	
}
   13882:	4618      	mov	r0, r3
   13884:	3708      	adds	r7, #8
   13886:	46bd      	mov	sp, r7
   13888:	bd80      	pop	{r7, pc}
   1388a:	bf00      	nop
   1388c:	0000f4a1 	.word	0x0000f4a1

00013890 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   13890:	b580      	push	{r7, lr}
   13892:	b084      	sub	sp, #16
   13894:	af00      	add	r7, sp, #0
   13896:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	699b      	ldr	r3, [r3, #24]
   1389c:	f1b3 3fff 	cmp.w	r3, #4294967295
   138a0:	bf14      	ite	ne
   138a2:	2301      	movne	r3, #1
   138a4:	2300      	moveq	r3, #0
   138a6:	b2db      	uxtb	r3, r3
   138a8:	2b00      	cmp	r3, #0
   138aa:	d002      	beq.n	138b2 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   138ac:	687b      	ldr	r3, [r7, #4]
   138ae:	699b      	ldr	r3, [r3, #24]
   138b0:	e011      	b.n	138d6 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   138b2:	687b      	ldr	r3, [r7, #4]
   138b4:	681b      	ldr	r3, [r3, #0]
   138b6:	331c      	adds	r3, #28
   138b8:	681b      	ldr	r3, [r3, #0]
   138ba:	f107 010f 	add.w	r1, r7, #15
   138be:	2201      	movs	r2, #1
   138c0:	6878      	ldr	r0, [r7, #4]
   138c2:	4798      	blx	r3
   138c4:	4602      	mov	r2, r0
   138c6:	687b      	ldr	r3, [r7, #4]
   138c8:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   138ca:	7bfb      	ldrb	r3, [r7, #15]
   138cc:	461a      	mov	r2, r3
   138ce:	687b      	ldr	r3, [r7, #4]
   138d0:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   138d2:	687b      	ldr	r3, [r7, #4]
   138d4:	699b      	ldr	r3, [r3, #24]
}
   138d6:	4618      	mov	r0, r3
   138d8:	3710      	adds	r7, #16
   138da:	46bd      	mov	sp, r7
   138dc:	bd80      	pop	{r7, pc}
	...

000138e0 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   138e0:	b580      	push	{r7, lr}
   138e2:	b086      	sub	sp, #24
   138e4:	af00      	add	r7, sp, #0
   138e6:	60f8      	str	r0, [r7, #12]
   138e8:	60b9      	str	r1, [r7, #8]
   138ea:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
   138ec:	68fb      	ldr	r3, [r7, #12]
   138ee:	2200      	movs	r2, #0
   138f0:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   138f2:	687b      	ldr	r3, [r7, #4]
   138f4:	4619      	mov	r1, r3
   138f6:	68b8      	ldr	r0, [r7, #8]
   138f8:	4b08      	ldr	r3, [pc, #32]	; (1391c <_ZN9CDC_Class8readDataEPvl+0x3c>)
   138fa:	4798      	blx	r3
   138fc:	4603      	mov	r3, r0
   138fe:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
   13900:	68fb      	ldr	r3, [r7, #12]
   13902:	7d5b      	ldrb	r3, [r3, #21]
   13904:	b2db      	uxtb	r3, r3
   13906:	f083 0301 	eor.w	r3, r3, #1
   1390a:	b2db      	uxtb	r3, r3
   1390c:	2b00      	cmp	r3, #0
   1390e:	d000      	beq.n	13912 <_ZN9CDC_Class8readDataEPvl+0x32>
   13910:	e7f6      	b.n	13900 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
   13912:	7dfb      	ldrb	r3, [r7, #23]
}
   13914:	4618      	mov	r0, r3
   13916:	3718      	adds	r7, #24
   13918:	46bd      	mov	sp, r7
   1391a:	bd80      	pop	{r7, pc}
   1391c:	0000f37d 	.word	0x0000f37d

00013920 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   13920:	b580      	push	{r7, lr}
   13922:	b084      	sub	sp, #16
   13924:	af00      	add	r7, sp, #0
   13926:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   13928:	687b      	ldr	r3, [r7, #4]
   1392a:	2200      	movs	r2, #0
   1392c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   1392e:	f107 030f 	add.w	r3, r7, #15
   13932:	2101      	movs	r1, #1
   13934:	4618      	mov	r0, r3
   13936:	4b08      	ldr	r3, [pc, #32]	; (13958 <_ZN9CDC_Class4readEv+0x38>)
   13938:	4798      	blx	r3
	while(!rxReady);
   1393a:	687b      	ldr	r3, [r7, #4]
   1393c:	7d5b      	ldrb	r3, [r3, #21]
   1393e:	b2db      	uxtb	r3, r3
   13940:	f083 0301 	eor.w	r3, r3, #1
   13944:	b2db      	uxtb	r3, r3
   13946:	2b00      	cmp	r3, #0
   13948:	d000      	beq.n	1394c <_ZN9CDC_Class4readEv+0x2c>
   1394a:	e7f6      	b.n	1393a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   1394c:	7bfb      	ldrb	r3, [r7, #15]
}
   1394e:	4618      	mov	r0, r3
   13950:	3710      	adds	r7, #16
   13952:	46bd      	mov	sp, r7
   13954:	bd80      	pop	{r7, pc}
   13956:	bf00      	nop
   13958:	0000f37d 	.word	0x0000f37d

0001395c <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
   1395c:	b580      	push	{r7, lr}
   1395e:	b082      	sub	sp, #8
   13960:	af00      	add	r7, sp, #0
   13962:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	331c      	adds	r3, #28
   13968:	2140      	movs	r1, #64	; 0x40
   1396a:	4618      	mov	r0, r3
   1396c:	4b02      	ldr	r3, [pc, #8]	; (13978 <_ZN9CDC_Class5flushEv+0x1c>)
   1396e:	4798      	blx	r3
}
   13970:	bf00      	nop
   13972:	3708      	adds	r7, #8
   13974:	46bd      	mov	sp, r7
   13976:	bd80      	pop	{r7, pc}
   13978:	0000f3c1 	.word	0x0000f3c1

0001397c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   1397c:	b580      	push	{r7, lr}
   1397e:	b082      	sub	sp, #8
   13980:	af00      	add	r7, sp, #0
   13982:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   13984:	4b02      	ldr	r3, [pc, #8]	; (13990 <_ZN9CDC_Class5clearEv+0x14>)
   13986:	4798      	blx	r3
}
   13988:	bf00      	nop
   1398a:	3708      	adds	r7, #8
   1398c:	46bd      	mov	sp, r7
   1398e:	bd80      	pop	{r7, pc}
   13990:	0000f405 	.word	0x0000f405

00013994 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   13994:	b580      	push	{r7, lr}
   13996:	b082      	sub	sp, #8
   13998:	af00      	add	r7, sp, #0
   1399a:	6078      	str	r0, [r7, #4]
   1399c:	460b      	mov	r3, r1
   1399e:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	7d1b      	ldrb	r3, [r3, #20]
   139a4:	b2db      	uxtb	r3, r3
   139a6:	f083 0301 	eor.w	r3, r3, #1
   139aa:	b2db      	uxtb	r3, r3
   139ac:	2b00      	cmp	r3, #0
   139ae:	d000      	beq.n	139b2 <_ZN9CDC_Class5writeEh+0x1e>
   139b0:	e7f6      	b.n	139a0 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
   139b2:	687b      	ldr	r3, [r7, #4]
   139b4:	681b      	ldr	r3, [r3, #0]
   139b6:	3324      	adds	r3, #36	; 0x24
   139b8:	681b      	ldr	r3, [r3, #0]
   139ba:	1cf9      	adds	r1, r7, #3
   139bc:	2201      	movs	r2, #1
   139be:	6878      	ldr	r0, [r7, #4]
   139c0:	4798      	blx	r3
   139c2:	4603      	mov	r3, r0
}
   139c4:	4618      	mov	r0, r3
   139c6:	3708      	adds	r7, #8
   139c8:	46bd      	mov	sp, r7
   139ca:	bd80      	pop	{r7, pc}

000139cc <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   139cc:	b580      	push	{r7, lr}
   139ce:	b086      	sub	sp, #24
   139d0:	af00      	add	r7, sp, #0
   139d2:	60f8      	str	r0, [r7, #12]
   139d4:	60b9      	str	r1, [r7, #8]
   139d6:	607a      	str	r2, [r7, #4]
	
	txReady=false;
   139d8:	68fb      	ldr	r3, [r7, #12]
   139da:	2200      	movs	r2, #0
   139dc:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
   139de:	68fb      	ldr	r3, [r7, #12]
   139e0:	3310      	adds	r3, #16
   139e2:	4618      	mov	r0, r3
   139e4:	4b14      	ldr	r3, [pc, #80]	; (13a38 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
   139e6:	4798      	blx	r3
   139e8:	4603      	mov	r3, r0
   139ea:	2b00      	cmp	r3, #0
   139ec:	d01e      	beq.n	13a2c <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   139ee:	687b      	ldr	r3, [r7, #4]
   139f0:	4619      	mov	r1, r3
   139f2:	68b8      	ldr	r0, [r7, #8]
   139f4:	4b11      	ldr	r3, [pc, #68]	; (13a3c <_ZN9CDC_Class9writeDataEPKvl+0x70>)
   139f6:	4798      	blx	r3
   139f8:	4603      	mov	r3, r0
   139fa:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
   139fc:	68fb      	ldr	r3, [r7, #12]
   139fe:	7d1b      	ldrb	r3, [r3, #20]
   13a00:	b2db      	uxtb	r3, r3
   13a02:	f083 0301 	eor.w	r3, r3, #1
   13a06:	b2db      	uxtb	r3, r3
   13a08:	2b00      	cmp	r3, #0
   13a0a:	d006      	beq.n	13a1a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
   13a0c:	68fb      	ldr	r3, [r7, #12]
   13a0e:	7c5b      	ldrb	r3, [r3, #17]
   13a10:	b2db      	uxtb	r3, r3
   13a12:	2b00      	cmp	r3, #0
   13a14:	d001      	beq.n	13a1a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
   13a16:	2301      	movs	r3, #1
   13a18:	e000      	b.n	13a1c <_ZN9CDC_Class9writeDataEPKvl+0x50>
   13a1a:	2300      	movs	r3, #0
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d000      	beq.n	13a22 <_ZN9CDC_Class9writeDataEPKvl+0x56>
   13a20:	e7ec      	b.n	139fc <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
   13a22:	4807      	ldr	r0, [pc, #28]	; (13a40 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
   13a24:	4b07      	ldr	r3, [pc, #28]	; (13a44 <_ZN9CDC_Class9writeDataEPKvl+0x78>)
   13a26:	4798      	blx	r3
		return r;
   13a28:	697b      	ldr	r3, [r7, #20]
   13a2a:	e000      	b.n	13a2e <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
   13a2c:	2300      	movs	r3, #0
	}
	

}
   13a2e:	4618      	mov	r0, r3
   13a30:	3718      	adds	r7, #24
   13a32:	46bd      	mov	sp, r7
   13a34:	bd80      	pop	{r7, pc}
   13a36:	bf00      	nop
   13a38:	00013fa5 	.word	0x00013fa5
   13a3c:	0000f3c1 	.word	0x0000f3c1
   13a40:	20004edc 	.word	0x20004edc
   13a44:	00014165 	.word	0x00014165

00013a48 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   13a48:	b580      	push	{r7, lr}
   13a4a:	b086      	sub	sp, #24
   13a4c:	af00      	add	r7, sp, #0
   13a4e:	60f8      	str	r0, [r7, #12]
   13a50:	60b9      	str	r1, [r7, #8]
   13a52:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   13a54:	68fb      	ldr	r3, [r7, #12]
   13a56:	2200      	movs	r2, #0
   13a58:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
   13a5a:	68fb      	ldr	r3, [r7, #12]
   13a5c:	3310      	adds	r3, #16
   13a5e:	6879      	ldr	r1, [r7, #4]
   13a60:	4618      	mov	r0, r3
   13a62:	4b14      	ldr	r3, [pc, #80]	; (13ab4 <_ZN9CDC_Class5writeEPKhj+0x6c>)
   13a64:	4798      	blx	r3
   13a66:	4603      	mov	r3, r0
   13a68:	2b00      	cmp	r3, #0
   13a6a:	d01c      	beq.n	13aa6 <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   13a6c:	6879      	ldr	r1, [r7, #4]
   13a6e:	68b8      	ldr	r0, [r7, #8]
   13a70:	4b11      	ldr	r3, [pc, #68]	; (13ab8 <_ZN9CDC_Class5writeEPKhj+0x70>)
   13a72:	4798      	blx	r3
   13a74:	4603      	mov	r3, r0
   13a76:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
   13a78:	68fb      	ldr	r3, [r7, #12]
   13a7a:	7d1b      	ldrb	r3, [r3, #20]
   13a7c:	b2db      	uxtb	r3, r3
   13a7e:	f083 0301 	eor.w	r3, r3, #1
   13a82:	b2db      	uxtb	r3, r3
   13a84:	2b00      	cmp	r3, #0
   13a86:	d006      	beq.n	13a96 <_ZN9CDC_Class5writeEPKhj+0x4e>
   13a88:	68fb      	ldr	r3, [r7, #12]
   13a8a:	7c5b      	ldrb	r3, [r3, #17]
   13a8c:	b2db      	uxtb	r3, r3
   13a8e:	2b00      	cmp	r3, #0
   13a90:	d001      	beq.n	13a96 <_ZN9CDC_Class5writeEPKhj+0x4e>
   13a92:	2301      	movs	r3, #1
   13a94:	e000      	b.n	13a98 <_ZN9CDC_Class5writeEPKhj+0x50>
   13a96:	2300      	movs	r3, #0
   13a98:	2b00      	cmp	r3, #0
   13a9a:	d000      	beq.n	13a9e <_ZN9CDC_Class5writeEPKhj+0x56>
   13a9c:	e7ec      	b.n	13a78 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
   13a9e:	4807      	ldr	r0, [pc, #28]	; (13abc <_ZN9CDC_Class5writeEPKhj+0x74>)
   13aa0:	4b07      	ldr	r3, [pc, #28]	; (13ac0 <_ZN9CDC_Class5writeEPKhj+0x78>)
   13aa2:	4798      	blx	r3
   13aa4:	e001      	b.n	13aaa <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
   13aa6:	2300      	movs	r3, #0
   13aa8:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   13aaa:	697b      	ldr	r3, [r7, #20]
}
   13aac:	4618      	mov	r0, r3
   13aae:	3718      	adds	r7, #24
   13ab0:	46bd      	mov	sp, r7
   13ab2:	bd80      	pop	{r7, pc}
   13ab4:	0001401d 	.word	0x0001401d
   13ab8:	0000f3c1 	.word	0x0000f3c1
   13abc:	20004edc 	.word	0x20004edc
   13ac0:	00014165 	.word	0x00014165

00013ac4 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   13ac4:	b480      	push	{r7}
   13ac6:	b083      	sub	sp, #12
   13ac8:	af00      	add	r7, sp, #0
   13aca:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   13acc:	687b      	ldr	r3, [r7, #4]
   13ace:	7d5b      	ldrb	r3, [r3, #21]
   13ad0:	b2db      	uxtb	r3, r3
   13ad2:	2b00      	cmp	r3, #0
   13ad4:	d006      	beq.n	13ae4 <_ZN9CDC_Class9availableEv+0x20>
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	7d1b      	ldrb	r3, [r3, #20]
   13ada:	b2db      	uxtb	r3, r3
   13adc:	2b00      	cmp	r3, #0
   13ade:	d001      	beq.n	13ae4 <_ZN9CDC_Class9availableEv+0x20>
   13ae0:	2301      	movs	r3, #1
   13ae2:	e000      	b.n	13ae6 <_ZN9CDC_Class9availableEv+0x22>
   13ae4:	2300      	movs	r3, #0
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	d001      	beq.n	13aee <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   13aea:	2301      	movs	r3, #1
   13aec:	e000      	b.n	13af0 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   13aee:	2300      	movs	r3, #0
	}
	
}
   13af0:	4618      	mov	r0, r3
   13af2:	370c      	adds	r7, #12
   13af4:	46bd      	mov	sp, r7
   13af6:	bc80      	pop	{r7}
   13af8:	4770      	bx	lr
	...

00013afc <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   13afc:	b580      	push	{r7, lr}
   13afe:	b082      	sub	sp, #8
   13b00:	af00      	add	r7, sp, #0
   13b02:	6078      	str	r0, [r7, #4]
   13b04:	6039      	str	r1, [r7, #0]
   13b06:	687b      	ldr	r3, [r7, #4]
   13b08:	2b01      	cmp	r3, #1
   13b0a:	d10c      	bne.n	13b26 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13b0c:	683b      	ldr	r3, [r7, #0]
   13b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13b12:	4293      	cmp	r3, r2
   13b14:	d107      	bne.n	13b26 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13b16:	4806      	ldr	r0, [pc, #24]	; (13b30 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13b18:	4b06      	ldr	r3, [pc, #24]	; (13b34 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13b1a:	4798      	blx	r3
   13b1c:	4a06      	ldr	r2, [pc, #24]	; (13b38 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13b1e:	4907      	ldr	r1, [pc, #28]	; (13b3c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13b20:	4803      	ldr	r0, [pc, #12]	; (13b30 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13b22:	4b07      	ldr	r3, [pc, #28]	; (13b40 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13b24:	4798      	blx	r3
   13b26:	bf00      	nop
   13b28:	3708      	adds	r7, #8
   13b2a:	46bd      	mov	sp, r7
   13b2c:	bd80      	pop	{r7, pc}
   13b2e:	bf00      	nop
   13b30:	20004e74 	.word	0x20004e74
   13b34:	000137cd 	.word	0x000137cd
   13b38:	20000000 	.word	0x20000000
   13b3c:	00013815 	.word	0x00013815
   13b40:	00014579 	.word	0x00014579

00013b44 <_GLOBAL__sub_I_ptrCDCClass>:
   13b44:	b580      	push	{r7, lr}
   13b46:	af00      	add	r7, sp, #0
   13b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13b4c:	2001      	movs	r0, #1
   13b4e:	4b01      	ldr	r3, [pc, #4]	; (13b54 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   13b50:	4798      	blx	r3
   13b52:	bd80      	pop	{r7, pc}
   13b54:	00013afd 	.word	0x00013afd

00013b58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   13b58:	b580      	push	{r7, lr}
   13b5a:	b086      	sub	sp, #24
   13b5c:	af00      	add	r7, sp, #0
   13b5e:	60f8      	str	r0, [r7, #12]
   13b60:	60b9      	str	r1, [r7, #8]
   13b62:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   13b64:	2300      	movs	r3, #0
   13b66:	617b      	str	r3, [r7, #20]
  while (size--) {
   13b68:	687b      	ldr	r3, [r7, #4]
   13b6a:	1e5a      	subs	r2, r3, #1
   13b6c:	607a      	str	r2, [r7, #4]
   13b6e:	2b00      	cmp	r3, #0
   13b70:	bf14      	ite	ne
   13b72:	2301      	movne	r3, #1
   13b74:	2300      	moveq	r3, #0
   13b76:	b2db      	uxtb	r3, r3
   13b78:	2b00      	cmp	r3, #0
   13b7a:	d016      	beq.n	13baa <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   13b7c:	68fb      	ldr	r3, [r7, #12]
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	681a      	ldr	r2, [r3, #0]
   13b82:	68bb      	ldr	r3, [r7, #8]
   13b84:	1c59      	adds	r1, r3, #1
   13b86:	60b9      	str	r1, [r7, #8]
   13b88:	781b      	ldrb	r3, [r3, #0]
   13b8a:	4619      	mov	r1, r3
   13b8c:	68f8      	ldr	r0, [r7, #12]
   13b8e:	4790      	blx	r2
   13b90:	4603      	mov	r3, r0
   13b92:	2b00      	cmp	r3, #0
   13b94:	bf14      	ite	ne
   13b96:	2301      	movne	r3, #1
   13b98:	2300      	moveq	r3, #0
   13b9a:	b2db      	uxtb	r3, r3
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	d003      	beq.n	13ba8 <_ZN5Print5writeEPKhj+0x50>
   13ba0:	697b      	ldr	r3, [r7, #20]
   13ba2:	3301      	adds	r3, #1
   13ba4:	617b      	str	r3, [r7, #20]
  while (size--) {
   13ba6:	e7df      	b.n	13b68 <_ZN5Print5writeEPKhj+0x10>
    else break;
   13ba8:	bf00      	nop
  }
  return n;
   13baa:	697b      	ldr	r3, [r7, #20]
}
   13bac:	4618      	mov	r0, r3
   13bae:	3718      	adds	r7, #24
   13bb0:	46bd      	mov	sp, r7
   13bb2:	bd80      	pop	{r7, pc}

00013bb4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   13bb4:	b580      	push	{r7, lr}
   13bb6:	b082      	sub	sp, #8
   13bb8:	af00      	add	r7, sp, #0
   13bba:	6078      	str	r0, [r7, #4]
   13bbc:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   13bbe:	6839      	ldr	r1, [r7, #0]
   13bc0:	6878      	ldr	r0, [r7, #4]
   13bc2:	4b03      	ldr	r3, [pc, #12]	; (13bd0 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   13bc4:	4798      	blx	r3
   13bc6:	4603      	mov	r3, r0
}
   13bc8:	4618      	mov	r0, r3
   13bca:	3708      	adds	r7, #8
   13bcc:	46bd      	mov	sp, r7
   13bce:	bd80      	pop	{r7, pc}
   13bd0:	00013bd5 	.word	0x00013bd5

00013bd4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   13bd4:	b580      	push	{r7, lr}
   13bd6:	b082      	sub	sp, #8
   13bd8:	af00      	add	r7, sp, #0
   13bda:	6078      	str	r0, [r7, #4]
   13bdc:	6039      	str	r1, [r7, #0]
  return write(str);
   13bde:	6839      	ldr	r1, [r7, #0]
   13be0:	6878      	ldr	r0, [r7, #4]
   13be2:	4b03      	ldr	r3, [pc, #12]	; (13bf0 <_ZN5Print5printEPKc+0x1c>)
   13be4:	4798      	blx	r3
   13be6:	4603      	mov	r3, r0
}
   13be8:	4618      	mov	r0, r3
   13bea:	3708      	adds	r7, #8
   13bec:	46bd      	mov	sp, r7
   13bee:	bd80      	pop	{r7, pc}
   13bf0:	00002045 	.word	0x00002045

00013bf4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
   13bf4:	b580      	push	{r7, lr}
   13bf6:	b082      	sub	sp, #8
   13bf8:	af00      	add	r7, sp, #0
   13bfa:	6078      	str	r0, [r7, #4]
   13bfc:	460b      	mov	r3, r1
   13bfe:	70fb      	strb	r3, [r7, #3]
  return write(c);
   13c00:	687b      	ldr	r3, [r7, #4]
   13c02:	681b      	ldr	r3, [r3, #0]
   13c04:	681b      	ldr	r3, [r3, #0]
   13c06:	78fa      	ldrb	r2, [r7, #3]
   13c08:	4611      	mov	r1, r2
   13c0a:	6878      	ldr	r0, [r7, #4]
   13c0c:	4798      	blx	r3
   13c0e:	4603      	mov	r3, r0
}
   13c10:	4618      	mov	r0, r3
   13c12:	3708      	adds	r7, #8
   13c14:	46bd      	mov	sp, r7
   13c16:	bd80      	pop	{r7, pc}

00013c18 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   13c18:	b580      	push	{r7, lr}
   13c1a:	b084      	sub	sp, #16
   13c1c:	af00      	add	r7, sp, #0
   13c1e:	60f8      	str	r0, [r7, #12]
   13c20:	460b      	mov	r3, r1
   13c22:	607a      	str	r2, [r7, #4]
   13c24:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   13c26:	7afb      	ldrb	r3, [r7, #11]
   13c28:	687a      	ldr	r2, [r7, #4]
   13c2a:	4619      	mov	r1, r3
   13c2c:	68f8      	ldr	r0, [r7, #12]
   13c2e:	4b03      	ldr	r3, [pc, #12]	; (13c3c <_ZN5Print5printEhi+0x24>)
   13c30:	4798      	blx	r3
   13c32:	4603      	mov	r3, r0
}
   13c34:	4618      	mov	r0, r3
   13c36:	3710      	adds	r7, #16
   13c38:	46bd      	mov	sp, r7
   13c3a:	bd80      	pop	{r7, pc}
   13c3c:	00013c41 	.word	0x00013c41

00013c40 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   13c40:	b580      	push	{r7, lr}
   13c42:	b084      	sub	sp, #16
   13c44:	af00      	add	r7, sp, #0
   13c46:	60f8      	str	r0, [r7, #12]
   13c48:	60b9      	str	r1, [r7, #8]
   13c4a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   13c4c:	687b      	ldr	r3, [r7, #4]
   13c4e:	2b00      	cmp	r3, #0
   13c50:	d109      	bne.n	13c66 <_ZN5Print5printEmi+0x26>
   13c52:	68fb      	ldr	r3, [r7, #12]
   13c54:	681b      	ldr	r3, [r3, #0]
   13c56:	681b      	ldr	r3, [r3, #0]
   13c58:	68ba      	ldr	r2, [r7, #8]
   13c5a:	b2d2      	uxtb	r2, r2
   13c5c:	4611      	mov	r1, r2
   13c5e:	68f8      	ldr	r0, [r7, #12]
   13c60:	4798      	blx	r3
   13c62:	4603      	mov	r3, r0
   13c64:	e007      	b.n	13c76 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   13c66:	687b      	ldr	r3, [r7, #4]
   13c68:	b2db      	uxtb	r3, r3
   13c6a:	461a      	mov	r2, r3
   13c6c:	68b9      	ldr	r1, [r7, #8]
   13c6e:	68f8      	ldr	r0, [r7, #12]
   13c70:	4b03      	ldr	r3, [pc, #12]	; (13c80 <_ZN5Print5printEmi+0x40>)
   13c72:	4798      	blx	r3
   13c74:	4603      	mov	r3, r0
}
   13c76:	4618      	mov	r0, r3
   13c78:	3710      	adds	r7, #16
   13c7a:	46bd      	mov	sp, r7
   13c7c:	bd80      	pop	{r7, pc}
   13c7e:	bf00      	nop
   13c80:	00013d11 	.word	0x00013d11

00013c84 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   13c84:	b580      	push	{r7, lr}
   13c86:	b084      	sub	sp, #16
   13c88:	af00      	add	r7, sp, #0
   13c8a:	6078      	str	r0, [r7, #4]
   13c8c:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   13c8e:	6839      	ldr	r1, [r7, #0]
   13c90:	6878      	ldr	r0, [r7, #4]
   13c92:	4b07      	ldr	r3, [pc, #28]	; (13cb0 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   13c94:	4798      	blx	r3
   13c96:	60f8      	str	r0, [r7, #12]
  n += println();
   13c98:	6878      	ldr	r0, [r7, #4]
   13c9a:	4b06      	ldr	r3, [pc, #24]	; (13cb4 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   13c9c:	4798      	blx	r3
   13c9e:	4602      	mov	r2, r0
   13ca0:	68fb      	ldr	r3, [r7, #12]
   13ca2:	4413      	add	r3, r2
   13ca4:	60fb      	str	r3, [r7, #12]
  return n;
   13ca6:	68fb      	ldr	r3, [r7, #12]
}
   13ca8:	4618      	mov	r0, r3
   13caa:	3710      	adds	r7, #16
   13cac:	46bd      	mov	sp, r7
   13cae:	bd80      	pop	{r7, pc}
   13cb0:	00013bb5 	.word	0x00013bb5
   13cb4:	00013cb9 	.word	0x00013cb9

00013cb8 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   13cb8:	b580      	push	{r7, lr}
   13cba:	b082      	sub	sp, #8
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   13cc0:	4904      	ldr	r1, [pc, #16]	; (13cd4 <_ZN5Print7printlnEv+0x1c>)
   13cc2:	6878      	ldr	r0, [r7, #4]
   13cc4:	4b04      	ldr	r3, [pc, #16]	; (13cd8 <_ZN5Print7printlnEv+0x20>)
   13cc6:	4798      	blx	r3
   13cc8:	4603      	mov	r3, r0
}
   13cca:	4618      	mov	r0, r3
   13ccc:	3708      	adds	r7, #8
   13cce:	46bd      	mov	sp, r7
   13cd0:	bd80      	pop	{r7, pc}
   13cd2:	bf00      	nop
   13cd4:	0001bff4 	.word	0x0001bff4
   13cd8:	00002045 	.word	0x00002045

00013cdc <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   13cdc:	b580      	push	{r7, lr}
   13cde:	b084      	sub	sp, #16
   13ce0:	af00      	add	r7, sp, #0
   13ce2:	6078      	str	r0, [r7, #4]
   13ce4:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   13ce6:	6839      	ldr	r1, [r7, #0]
   13ce8:	6878      	ldr	r0, [r7, #4]
   13cea:	4b07      	ldr	r3, [pc, #28]	; (13d08 <_ZN5Print7printlnEPKc+0x2c>)
   13cec:	4798      	blx	r3
   13cee:	60f8      	str	r0, [r7, #12]
  n += println();
   13cf0:	6878      	ldr	r0, [r7, #4]
   13cf2:	4b06      	ldr	r3, [pc, #24]	; (13d0c <_ZN5Print7printlnEPKc+0x30>)
   13cf4:	4798      	blx	r3
   13cf6:	4602      	mov	r2, r0
   13cf8:	68fb      	ldr	r3, [r7, #12]
   13cfa:	4413      	add	r3, r2
   13cfc:	60fb      	str	r3, [r7, #12]
  return n;
   13cfe:	68fb      	ldr	r3, [r7, #12]
}
   13d00:	4618      	mov	r0, r3
   13d02:	3710      	adds	r7, #16
   13d04:	46bd      	mov	sp, r7
   13d06:	bd80      	pop	{r7, pc}
   13d08:	00013bd5 	.word	0x00013bd5
   13d0c:	00013cb9 	.word	0x00013cb9

00013d10 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   13d10:	b580      	push	{r7, lr}
   13d12:	b08e      	sub	sp, #56	; 0x38
   13d14:	af00      	add	r7, sp, #0
   13d16:	60f8      	str	r0, [r7, #12]
   13d18:	60b9      	str	r1, [r7, #8]
   13d1a:	4613      	mov	r3, r2
   13d1c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   13d1e:	f107 0310 	add.w	r3, r7, #16
   13d22:	3320      	adds	r3, #32
   13d24:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   13d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d28:	2200      	movs	r2, #0
   13d2a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   13d2c:	79fb      	ldrb	r3, [r7, #7]
   13d2e:	2b01      	cmp	r3, #1
   13d30:	dc01      	bgt.n	13d36 <_ZN5Print11printNumberEmh+0x26>
   13d32:	230a      	movs	r3, #10
   13d34:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   13d36:	79fa      	ldrb	r2, [r7, #7]
   13d38:	68bb      	ldr	r3, [r7, #8]
   13d3a:	fbb3 f1f2 	udiv	r1, r3, r2
   13d3e:	fb02 f201 	mul.w	r2, r2, r1
   13d42:	1a9b      	subs	r3, r3, r2
   13d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   13d48:	79fb      	ldrb	r3, [r7, #7]
   13d4a:	68ba      	ldr	r2, [r7, #8]
   13d4c:	fbb2 f3f3 	udiv	r3, r2, r3
   13d50:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   13d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d54:	3b01      	subs	r3, #1
   13d56:	637b      	str	r3, [r7, #52]	; 0x34
   13d58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13d5c:	2b09      	cmp	r3, #9
   13d5e:	dc04      	bgt.n	13d6a <_ZN5Print11printNumberEmh+0x5a>
   13d60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13d64:	3330      	adds	r3, #48	; 0x30
   13d66:	b2db      	uxtb	r3, r3
   13d68:	e003      	b.n	13d72 <_ZN5Print11printNumberEmh+0x62>
   13d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13d6e:	3337      	adds	r3, #55	; 0x37
   13d70:	b2db      	uxtb	r3, r3
   13d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   13d74:	7013      	strb	r3, [r2, #0]
  } while(n);
   13d76:	68bb      	ldr	r3, [r7, #8]
   13d78:	2b00      	cmp	r3, #0
   13d7a:	d000      	beq.n	13d7e <_ZN5Print11printNumberEmh+0x6e>
  do {
   13d7c:	e7db      	b.n	13d36 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   13d7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   13d80:	68f8      	ldr	r0, [r7, #12]
   13d82:	4b03      	ldr	r3, [pc, #12]	; (13d90 <_ZN5Print11printNumberEmh+0x80>)
   13d84:	4798      	blx	r3
   13d86:	4603      	mov	r3, r0
}
   13d88:	4618      	mov	r0, r3
   13d8a:	3738      	adds	r7, #56	; 0x38
   13d8c:	46bd      	mov	sp, r7
   13d8e:	bd80      	pop	{r7, pc}
   13d90:	00002045 	.word	0x00002045

00013d94 <hri_port_read_DIR_reg>:
{
   13d94:	b480      	push	{r7}
   13d96:	b083      	sub	sp, #12
   13d98:	af00      	add	r7, sp, #0
   13d9a:	6078      	str	r0, [r7, #4]
   13d9c:	460b      	mov	r3, r1
   13d9e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   13da0:	78fb      	ldrb	r3, [r7, #3]
   13da2:	687a      	ldr	r2, [r7, #4]
   13da4:	01db      	lsls	r3, r3, #7
   13da6:	4413      	add	r3, r2
   13da8:	681b      	ldr	r3, [r3, #0]
}
   13daa:	4618      	mov	r0, r3
   13dac:	370c      	adds	r7, #12
   13dae:	46bd      	mov	sp, r7
   13db0:	bc80      	pop	{r7}
   13db2:	4770      	bx	lr

00013db4 <hri_port_read_OUT_reg>:
{
   13db4:	b480      	push	{r7}
   13db6:	b083      	sub	sp, #12
   13db8:	af00      	add	r7, sp, #0
   13dba:	6078      	str	r0, [r7, #4]
   13dbc:	460b      	mov	r3, r1
   13dbe:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   13dc0:	78fb      	ldrb	r3, [r7, #3]
   13dc2:	687a      	ldr	r2, [r7, #4]
   13dc4:	01db      	lsls	r3, r3, #7
   13dc6:	4413      	add	r3, r2
   13dc8:	3310      	adds	r3, #16
   13dca:	681b      	ldr	r3, [r3, #0]
}
   13dcc:	4618      	mov	r0, r3
   13dce:	370c      	adds	r7, #12
   13dd0:	46bd      	mov	sp, r7
   13dd2:	bc80      	pop	{r7}
   13dd4:	4770      	bx	lr

00013dd6 <hri_port_read_IN_reg>:
{
   13dd6:	b480      	push	{r7}
   13dd8:	b083      	sub	sp, #12
   13dda:	af00      	add	r7, sp, #0
   13ddc:	6078      	str	r0, [r7, #4]
   13dde:	460b      	mov	r3, r1
   13de0:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   13de2:	78fb      	ldrb	r3, [r7, #3]
   13de4:	687a      	ldr	r2, [r7, #4]
   13de6:	01db      	lsls	r3, r3, #7
   13de8:	4413      	add	r3, r2
   13dea:	3320      	adds	r3, #32
   13dec:	681b      	ldr	r3, [r3, #0]
}
   13dee:	4618      	mov	r0, r3
   13df0:	370c      	adds	r7, #12
   13df2:	46bd      	mov	sp, r7
   13df4:	bc80      	pop	{r7}
   13df6:	4770      	bx	lr

00013df8 <_gpio_get_level>:
{
   13df8:	b580      	push	{r7, lr}
   13dfa:	b086      	sub	sp, #24
   13dfc:	af00      	add	r7, sp, #0
   13dfe:	4603      	mov	r3, r0
   13e00:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   13e02:	f107 030c 	add.w	r3, r7, #12
   13e06:	4618      	mov	r0, r3
   13e08:	4b13      	ldr	r3, [pc, #76]	; (13e58 <_gpio_get_level+0x60>)
   13e0a:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   13e0c:	79fb      	ldrb	r3, [r7, #7]
   13e0e:	4619      	mov	r1, r3
   13e10:	4812      	ldr	r0, [pc, #72]	; (13e5c <_gpio_get_level+0x64>)
   13e12:	4b13      	ldr	r3, [pc, #76]	; (13e60 <_gpio_get_level+0x68>)
   13e14:	4798      	blx	r3
   13e16:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   13e18:	79fb      	ldrb	r3, [r7, #7]
   13e1a:	4619      	mov	r1, r3
   13e1c:	480f      	ldr	r0, [pc, #60]	; (13e5c <_gpio_get_level+0x64>)
   13e1e:	4b11      	ldr	r3, [pc, #68]	; (13e64 <_gpio_get_level+0x6c>)
   13e20:	4798      	blx	r3
   13e22:	4602      	mov	r2, r0
   13e24:	697b      	ldr	r3, [r7, #20]
   13e26:	43db      	mvns	r3, r3
   13e28:	4013      	ands	r3, r2
   13e2a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   13e2c:	79fb      	ldrb	r3, [r7, #7]
   13e2e:	4619      	mov	r1, r3
   13e30:	480a      	ldr	r0, [pc, #40]	; (13e5c <_gpio_get_level+0x64>)
   13e32:	4b0d      	ldr	r3, [pc, #52]	; (13e68 <_gpio_get_level+0x70>)
   13e34:	4798      	blx	r3
   13e36:	4602      	mov	r2, r0
   13e38:	697b      	ldr	r3, [r7, #20]
   13e3a:	4013      	ands	r3, r2
   13e3c:	693a      	ldr	r2, [r7, #16]
   13e3e:	4313      	orrs	r3, r2
   13e40:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   13e42:	f107 030c 	add.w	r3, r7, #12
   13e46:	4618      	mov	r0, r3
   13e48:	4b08      	ldr	r3, [pc, #32]	; (13e6c <_gpio_get_level+0x74>)
   13e4a:	4798      	blx	r3
	return tmp;
   13e4c:	693b      	ldr	r3, [r7, #16]
}
   13e4e:	4618      	mov	r0, r3
   13e50:	3718      	adds	r7, #24
   13e52:	46bd      	mov	sp, r7
   13e54:	bd80      	pop	{r7, pc}
   13e56:	bf00      	nop
   13e58:	0000e59d 	.word	0x0000e59d
   13e5c:	41008000 	.word	0x41008000
   13e60:	00013d95 	.word	0x00013d95
   13e64:	00013dd7 	.word	0x00013dd7
   13e68:	00013db5 	.word	0x00013db5
   13e6c:	0000e5c3 	.word	0x0000e5c3

00013e70 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   13e70:	b580      	push	{r7, lr}
   13e72:	b082      	sub	sp, #8
   13e74:	af00      	add	r7, sp, #0
   13e76:	4603      	mov	r3, r0
   13e78:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   13e7a:	79fb      	ldrb	r3, [r7, #7]
   13e7c:	115b      	asrs	r3, r3, #5
   13e7e:	b2db      	uxtb	r3, r3
   13e80:	4618      	mov	r0, r3
   13e82:	4b09      	ldr	r3, [pc, #36]	; (13ea8 <gpio_get_pin_level+0x38>)
   13e84:	4798      	blx	r3
   13e86:	4601      	mov	r1, r0
   13e88:	79fb      	ldrb	r3, [r7, #7]
   13e8a:	f003 031f 	and.w	r3, r3, #31
   13e8e:	2201      	movs	r2, #1
   13e90:	fa02 f303 	lsl.w	r3, r2, r3
   13e94:	400b      	ands	r3, r1
   13e96:	2b00      	cmp	r3, #0
   13e98:	bf14      	ite	ne
   13e9a:	2301      	movne	r3, #1
   13e9c:	2300      	moveq	r3, #0
   13e9e:	b2db      	uxtb	r3, r3
}
   13ea0:	4618      	mov	r0, r3
   13ea2:	3708      	adds	r7, #8
   13ea4:	46bd      	mov	sp, r7
   13ea6:	bd80      	pop	{r7, pc}
   13ea8:	00013df9 	.word	0x00013df9

00013eac <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   13eac:	b480      	push	{r7}
   13eae:	b083      	sub	sp, #12
   13eb0:	af00      	add	r7, sp, #0
   13eb2:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   13eb4:	4b06      	ldr	r3, [pc, #24]	; (13ed0 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   13eb6:	681b      	ldr	r3, [r3, #0]
   13eb8:	2201      	movs	r2, #1
   13eba:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
   13ebc:	4b04      	ldr	r3, [pc, #16]	; (13ed0 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   13ebe:	681b      	ldr	r3, [r3, #0]
   13ec0:	2200      	movs	r2, #0
   13ec2:	705a      	strb	r2, [r3, #1]
}
   13ec4:	bf00      	nop
   13ec6:	370c      	adds	r7, #12
   13ec8:	46bd      	mov	sp, r7
   13eca:	bc80      	pop	{r7}
   13ecc:	4770      	bx	lr
   13ece:	bf00      	nop
   13ed0:	20004ed4 	.word	0x20004ed4

00013ed4 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   13ed4:	b480      	push	{r7}
   13ed6:	b083      	sub	sp, #12
   13ed8:	af00      	add	r7, sp, #0
   13eda:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   13edc:	4a04      	ldr	r2, [pc, #16]	; (13ef0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   13ede:	687b      	ldr	r3, [r7, #4]
   13ee0:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
   13ee2:	687b      	ldr	r3, [r7, #4]
   13ee4:	4618      	mov	r0, r3
   13ee6:	370c      	adds	r7, #12
   13ee8:	46bd      	mov	sp, r7
   13eea:	bc80      	pop	{r7}
   13eec:	4770      	bx	lr
   13eee:	bf00      	nop
   13ef0:	20004ed4 	.word	0x20004ed4

00013ef4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   13ef4:	b480      	push	{r7}
   13ef6:	b083      	sub	sp, #12
   13ef8:	af00      	add	r7, sp, #0
   13efa:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   13efc:	687b      	ldr	r3, [r7, #4]
   13efe:	4618      	mov	r0, r3
   13f00:	370c      	adds	r7, #12
   13f02:	46bd      	mov	sp, r7
   13f04:	bc80      	pop	{r7}
   13f06:	4770      	bx	lr

00013f08 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   13f08:	b580      	push	{r7, lr}
   13f0a:	b082      	sub	sp, #8
   13f0c:	af00      	add	r7, sp, #0
   13f0e:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   13f10:	2040      	movs	r0, #64	; 0x40
   13f12:	4b1c      	ldr	r3, [pc, #112]	; (13f84 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
   13f14:	4798      	blx	r3
   13f16:	4603      	mov	r3, r0
   13f18:	461a      	mov	r2, r3
   13f1a:	687b      	ldr	r3, [r7, #4]
   13f1c:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   13f1e:	687b      	ldr	r3, [r7, #4]
   13f20:	78db      	ldrb	r3, [r3, #3]
   13f22:	2b00      	cmp	r3, #0
   13f24:	d024      	beq.n	13f70 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
   13f26:	687b      	ldr	r3, [r7, #4]
   13f28:	2200      	movs	r2, #0
   13f2a:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
   13f2c:	687b      	ldr	r3, [r7, #4]
   13f2e:	2201      	movs	r2, #1
   13f30:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   13f32:	f44f 7216 	mov.w	r2, #600	; 0x258
   13f36:	4914      	ldr	r1, [pc, #80]	; (13f88 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
   13f38:	4814      	ldr	r0, [pc, #80]	; (13f8c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   13f3a:	4b15      	ldr	r3, [pc, #84]	; (13f90 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   13f3c:	4798      	blx	r3
			usbTimer.Start();
   13f3e:	4813      	ldr	r0, [pc, #76]	; (13f8c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   13f40:	4b14      	ldr	r3, [pc, #80]	; (13f94 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   13f42:	4798      	blx	r3
			while (!usb.IsEnabled()){
   13f44:	4814      	ldr	r0, [pc, #80]	; (13f98 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   13f46:	4b15      	ldr	r3, [pc, #84]	; (13f9c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   13f48:	4798      	blx	r3
   13f4a:	4603      	mov	r3, r0
   13f4c:	f083 0301 	eor.w	r3, r3, #1
   13f50:	b2db      	uxtb	r3, r3
   13f52:	2b00      	cmp	r3, #0
   13f54:	d008      	beq.n	13f68 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
   13f56:	687b      	ldr	r3, [r7, #4]
   13f58:	789b      	ldrb	r3, [r3, #2]
   13f5a:	b2db      	uxtb	r3, r3
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d0f1      	beq.n	13f44 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
   13f60:	687b      	ldr	r3, [r7, #4]
   13f62:	2200      	movs	r2, #0
   13f64:	701a      	strb	r2, [r3, #0]
					return;
   13f66:	e009      	b.n	13f7c <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
   13f68:	4808      	ldr	r0, [pc, #32]	; (13f8c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   13f6a:	4b0d      	ldr	r3, [pc, #52]	; (13fa0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   13f6c:	4798      	blx	r3
   13f6e:	e005      	b.n	13f7c <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	2200      	movs	r2, #0
   13f74:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
   13f76:	687b      	ldr	r3, [r7, #4]
   13f78:	2200      	movs	r2, #0
   13f7a:	705a      	strb	r2, [r3, #1]
		}
		
}
   13f7c:	3708      	adds	r7, #8
   13f7e:	46bd      	mov	sp, r7
   13f80:	bd80      	pop	{r7, pc}
   13f82:	bf00      	nop
   13f84:	00013e71 	.word	0x00013e71
   13f88:	00013ead 	.word	0x00013ead
   13f8c:	20004edc 	.word	0x20004edc
   13f90:	000141e9 	.word	0x000141e9
   13f94:	00014141 	.word	0x00014141
   13f98:	20004e74 	.word	0x20004e74
   13f9c:	00013875 	.word	0x00013875
   13fa0:	00014165 	.word	0x00014165

00013fa4 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
   13fa4:	b580      	push	{r7, lr}
   13fa6:	b082      	sub	sp, #8
   13fa8:	af00      	add	r7, sp, #0
   13faa:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
   13fac:	687b      	ldr	r3, [r7, #4]
   13fae:	785b      	ldrb	r3, [r3, #1]
   13fb0:	b2db      	uxtb	r3, r3
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	d01f      	beq.n	13ff6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
   13fb6:	687b      	ldr	r3, [r7, #4]
   13fb8:	781b      	ldrb	r3, [r3, #0]
   13fba:	b2db      	uxtb	r3, r3
   13fbc:	2b00      	cmp	r3, #0
   13fbe:	d105      	bne.n	13fcc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
   13fc0:	4812      	ldr	r0, [pc, #72]	; (1400c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
   13fc2:	4b13      	ldr	r3, [pc, #76]	; (14010 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
   13fc4:	4798      	blx	r3
   13fc6:	4603      	mov	r3, r0
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d001      	beq.n	13fd0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
   13fcc:	2301      	movs	r3, #1
   13fce:	e000      	b.n	13fd2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
   13fd0:	2300      	movs	r3, #0
   13fd2:	2b00      	cmp	r3, #0
   13fd4:	d00b      	beq.n	13fee <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
   13fd6:	480f      	ldr	r0, [pc, #60]	; (14014 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
   13fd8:	4b0f      	ldr	r3, [pc, #60]	; (14018 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
   13fda:	4798      	blx	r3
   13fdc:	4603      	mov	r3, r0
   13fde:	2b00      	cmp	r3, #0
   13fe0:	bf0c      	ite	eq
   13fe2:	2301      	moveq	r3, #1
   13fe4:	2300      	movne	r3, #0
   13fe6:	b2da      	uxtb	r2, r3
   13fe8:	687b      	ldr	r3, [r7, #4]
   13fea:	705a      	strb	r2, [r3, #1]
   13fec:	e007      	b.n	13ffe <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
   13fee:	687b      	ldr	r3, [r7, #4]
   13ff0:	2200      	movs	r2, #0
   13ff2:	705a      	strb	r2, [r3, #1]
   13ff4:	e003      	b.n	13ffe <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
   13ff6:	687b      	ldr	r3, [r7, #4]
   13ff8:	785b      	ldrb	r3, [r3, #1]
   13ffa:	b2db      	uxtb	r3, r3
   13ffc:	e002      	b.n	14004 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	785b      	ldrb	r3, [r3, #1]
   14002:	b2db      	uxtb	r3, r3
}
   14004:	4618      	mov	r0, r3
   14006:	3708      	adds	r7, #8
   14008:	46bd      	mov	sp, r7
   1400a:	bd80      	pop	{r7, pc}
   1400c:	20004e74 	.word	0x20004e74
   14010:	00013875 	.word	0x00013875
   14014:	20004edc 	.word	0x20004edc
   14018:	00014141 	.word	0x00014141

0001401c <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
   1401c:	b580      	push	{r7, lr}
   1401e:	b082      	sub	sp, #8
   14020:	af00      	add	r7, sp, #0
   14022:	6078      	str	r0, [r7, #4]
   14024:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
   14026:	687b      	ldr	r3, [r7, #4]
   14028:	785b      	ldrb	r3, [r3, #1]
   1402a:	b2db      	uxtb	r3, r3
   1402c:	2b00      	cmp	r3, #0
   1402e:	d02f      	beq.n	14090 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
   14030:	687b      	ldr	r3, [r7, #4]
   14032:	781b      	ldrb	r3, [r3, #0]
   14034:	b2db      	uxtb	r3, r3
   14036:	2b00      	cmp	r3, #0
   14038:	d105      	bne.n	14046 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
   1403a:	481b      	ldr	r0, [pc, #108]	; (140a8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
   1403c:	4b1b      	ldr	r3, [pc, #108]	; (140ac <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
   1403e:	4798      	blx	r3
   14040:	4603      	mov	r3, r0
   14042:	2b00      	cmp	r3, #0
   14044:	d001      	beq.n	1404a <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
   14046:	2301      	movs	r3, #1
   14048:	e000      	b.n	1404c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
   1404a:	2300      	movs	r3, #0
   1404c:	2b00      	cmp	r3, #0
   1404e:	d01b      	beq.n	14088 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
   14050:	4817      	ldr	r0, [pc, #92]	; (140b0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   14052:	4b18      	ldr	r3, [pc, #96]	; (140b4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
   14054:	4798      	blx	r3
			usbTimer.Remove_task();
   14056:	4816      	ldr	r0, [pc, #88]	; (140b0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   14058:	4b17      	ldr	r3, [pc, #92]	; (140b8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
   1405a:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
   1405c:	683a      	ldr	r2, [r7, #0]
   1405e:	4613      	mov	r3, r2
   14060:	009b      	lsls	r3, r3, #2
   14062:	4413      	add	r3, r2
   14064:	005b      	lsls	r3, r3, #1
   14066:	461a      	mov	r2, r3
   14068:	4914      	ldr	r1, [pc, #80]	; (140bc <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
   1406a:	4811      	ldr	r0, [pc, #68]	; (140b0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   1406c:	4b14      	ldr	r3, [pc, #80]	; (140c0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
   1406e:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
   14070:	480f      	ldr	r0, [pc, #60]	; (140b0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
   14072:	4b14      	ldr	r3, [pc, #80]	; (140c4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
   14074:	4798      	blx	r3
   14076:	4603      	mov	r3, r0
   14078:	2b00      	cmp	r3, #0
   1407a:	bf0c      	ite	eq
   1407c:	2301      	moveq	r3, #1
   1407e:	2300      	movne	r3, #0
   14080:	b2da      	uxtb	r2, r3
   14082:	687b      	ldr	r3, [r7, #4]
   14084:	705a      	strb	r2, [r3, #1]
   14086:	e007      	b.n	14098 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
   14088:	687b      	ldr	r3, [r7, #4]
   1408a:	2200      	movs	r2, #0
   1408c:	705a      	strb	r2, [r3, #1]
   1408e:	e003      	b.n	14098 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	785b      	ldrb	r3, [r3, #1]
   14094:	b2db      	uxtb	r3, r3
   14096:	e002      	b.n	1409e <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
   14098:	687b      	ldr	r3, [r7, #4]
   1409a:	785b      	ldrb	r3, [r3, #1]
   1409c:	b2db      	uxtb	r3, r3
   1409e:	4618      	mov	r0, r3
   140a0:	3708      	adds	r7, #8
   140a2:	46bd      	mov	sp, r7
   140a4:	bd80      	pop	{r7, pc}
   140a6:	bf00      	nop
   140a8:	20004e74 	.word	0x20004e74
   140ac:	00013875 	.word	0x00013875
   140b0:	20004edc 	.word	0x20004edc
   140b4:	00014165 	.word	0x00014165
   140b8:	00014211 	.word	0x00014211
   140bc:	00013ead 	.word	0x00013ead
   140c0:	000141e9 	.word	0x000141e9
   140c4:	00014141 	.word	0x00014141

000140c8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   140c8:	b580      	push	{r7, lr}
   140ca:	b082      	sub	sp, #8
   140cc:	af00      	add	r7, sp, #0
   140ce:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   140d0:	4b04      	ldr	r3, [pc, #16]	; (140e4 <_ZL7task_cbPK10timer_task+0x1c>)
   140d2:	681b      	ldr	r3, [r3, #0]
   140d4:	4618      	mov	r0, r3
   140d6:	4b04      	ldr	r3, [pc, #16]	; (140e8 <_ZL7task_cbPK10timer_task+0x20>)
   140d8:	4798      	blx	r3
}
   140da:	bf00      	nop
   140dc:	3708      	adds	r7, #8
   140de:	46bd      	mov	sp, r7
   140e0:	bd80      	pop	{r7, pc}
   140e2:	bf00      	nop
   140e4:	20004ed8 	.word	0x20004ed8
   140e8:	0001418d 	.word	0x0001418d

000140ec <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   140ec:	b480      	push	{r7}
   140ee:	b083      	sub	sp, #12
   140f0:	af00      	add	r7, sp, #0
   140f2:	6078      	str	r0, [r7, #4]
   140f4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   140f6:	687b      	ldr	r3, [r7, #4]
   140f8:	683a      	ldr	r2, [r7, #0]
   140fa:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
   140fc:	4a07      	ldr	r2, [pc, #28]	; (1411c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
   140fe:	687b      	ldr	r3, [r7, #4]
   14100:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14108:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   1410a:	687b      	ldr	r3, [r7, #4]
   1410c:	4a04      	ldr	r2, [pc, #16]	; (14120 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   1410e:	621a      	str	r2, [r3, #32]
} //Timer_Class
   14110:	687b      	ldr	r3, [r7, #4]
   14112:	4618      	mov	r0, r3
   14114:	370c      	adds	r7, #12
   14116:	46bd      	mov	sp, r7
   14118:	bc80      	pop	{r7}
   1411a:	4770      	bx	lr
   1411c:	20004ed8 	.word	0x20004ed8
   14120:	000140c9 	.word	0x000140c9

00014124 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   14124:	b480      	push	{r7}
   14126:	b083      	sub	sp, #12
   14128:	af00      	add	r7, sp, #0
   1412a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   1412c:	687b      	ldr	r3, [r7, #4]
   1412e:	2200      	movs	r2, #0
   14130:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   14132:	687b      	ldr	r3, [r7, #4]
   14134:	4618      	mov	r0, r3
   14136:	370c      	adds	r7, #12
   14138:	46bd      	mov	sp, r7
   1413a:	bc80      	pop	{r7}
   1413c:	4770      	bx	lr
	...

00014140 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   14140:	b580      	push	{r7, lr}
   14142:	b084      	sub	sp, #16
   14144:	af00      	add	r7, sp, #0
   14146:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   14148:	687b      	ldr	r3, [r7, #4]
   1414a:	689b      	ldr	r3, [r3, #8]
   1414c:	4618      	mov	r0, r3
   1414e:	4b04      	ldr	r3, [pc, #16]	; (14160 <_ZN17TimerSerial_Class5StartEv+0x20>)
   14150:	4798      	blx	r3
   14152:	60f8      	str	r0, [r7, #12]
	return status;
   14154:	68fb      	ldr	r3, [r7, #12]
	
}
   14156:	4618      	mov	r0, r3
   14158:	3710      	adds	r7, #16
   1415a:	46bd      	mov	sp, r7
   1415c:	bd80      	pop	{r7, pc}
   1415e:	bf00      	nop
   14160:	0000551d 	.word	0x0000551d

00014164 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   14164:	b580      	push	{r7, lr}
   14166:	b084      	sub	sp, #16
   14168:	af00      	add	r7, sp, #0
   1416a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   1416c:	687b      	ldr	r3, [r7, #4]
   1416e:	689b      	ldr	r3, [r3, #8]
   14170:	4618      	mov	r0, r3
   14172:	4b05      	ldr	r3, [pc, #20]	; (14188 <_ZN17TimerSerial_Class4StopEv+0x24>)
   14174:	4798      	blx	r3
   14176:	60f8      	str	r0, [r7, #12]
	timeout=0;
   14178:	687b      	ldr	r3, [r7, #4]
   1417a:	2200      	movs	r2, #0
   1417c:	705a      	strb	r2, [r3, #1]
	return status;
   1417e:	68fb      	ldr	r3, [r7, #12]
}
   14180:	4618      	mov	r0, r3
   14182:	3710      	adds	r7, #16
   14184:	46bd      	mov	sp, r7
   14186:	bd80      	pop	{r7, pc}
   14188:	00005571 	.word	0x00005571

0001418c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
   1418c:	b480      	push	{r7}
   1418e:	b083      	sub	sp, #12
   14190:	af00      	add	r7, sp, #0
   14192:	6078      	str	r0, [r7, #4]
	timeout=1;
   14194:	687b      	ldr	r3, [r7, #4]
   14196:	2201      	movs	r2, #1
   14198:	705a      	strb	r2, [r3, #1]
}
   1419a:	bf00      	nop
   1419c:	370c      	adds	r7, #12
   1419e:	46bd      	mov	sp, r7
   141a0:	bc80      	pop	{r7}
   141a2:	4770      	bx	lr

000141a4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   141a4:	b580      	push	{r7, lr}
   141a6:	b086      	sub	sp, #24
   141a8:	af00      	add	r7, sp, #0
   141aa:	60f8      	str	r0, [r7, #12]
   141ac:	60b9      	str	r1, [r7, #8]
   141ae:	607a      	str	r2, [r7, #4]
   141b0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
   141b2:	68fb      	ldr	r3, [r7, #12]
   141b4:	687a      	ldr	r2, [r7, #4]
   141b6:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
   141b8:	68fb      	ldr	r3, [r7, #12]
   141ba:	68ba      	ldr	r2, [r7, #8]
   141bc:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
   141be:	68fb      	ldr	r3, [r7, #12]
   141c0:	78fa      	ldrb	r2, [r7, #3]
   141c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
   141c6:	68fb      	ldr	r3, [r7, #12]
   141c8:	689a      	ldr	r2, [r3, #8]
   141ca:	68fb      	ldr	r3, [r7, #12]
   141cc:	3314      	adds	r3, #20
   141ce:	4619      	mov	r1, r3
   141d0:	4610      	mov	r0, r2
   141d2:	4b04      	ldr	r3, [pc, #16]	; (141e4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
   141d4:	4798      	blx	r3
   141d6:	6178      	str	r0, [r7, #20]
	
	return status;
   141d8:	697b      	ldr	r3, [r7, #20]
}
   141da:	4618      	mov	r0, r3
   141dc:	3718      	adds	r7, #24
   141de:	46bd      	mov	sp, r7
   141e0:	bd80      	pop	{r7, pc}
   141e2:	bf00      	nop
   141e4:	000055cd 	.word	0x000055cd

000141e8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   141e8:	b590      	push	{r4, r7, lr}
   141ea:	b087      	sub	sp, #28
   141ec:	af00      	add	r7, sp, #0
   141ee:	60f8      	str	r0, [r7, #12]
   141f0:	60b9      	str	r1, [r7, #8]
   141f2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   141f4:	2300      	movs	r3, #0
   141f6:	687a      	ldr	r2, [r7, #4]
   141f8:	68b9      	ldr	r1, [r7, #8]
   141fa:	68f8      	ldr	r0, [r7, #12]
   141fc:	4c03      	ldr	r4, [pc, #12]	; (1420c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   141fe:	47a0      	blx	r4
   14200:	6178      	str	r0, [r7, #20]
	return status;
   14202:	697b      	ldr	r3, [r7, #20]
}
   14204:	4618      	mov	r0, r3
   14206:	371c      	adds	r7, #28
   14208:	46bd      	mov	sp, r7
   1420a:	bd90      	pop	{r4, r7, pc}
   1420c:	000141a5 	.word	0x000141a5

00014210 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
   14210:	b580      	push	{r7, lr}
   14212:	b082      	sub	sp, #8
   14214:	af00      	add	r7, sp, #0
   14216:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
   14218:	687b      	ldr	r3, [r7, #4]
   1421a:	689a      	ldr	r2, [r3, #8]
   1421c:	687b      	ldr	r3, [r7, #4]
   1421e:	3314      	adds	r3, #20
   14220:	4619      	mov	r1, r3
   14222:	4610      	mov	r0, r2
   14224:	4b02      	ldr	r3, [pc, #8]	; (14230 <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
   14226:	4798      	blx	r3
}
   14228:	bf00      	nop
   1422a:	3708      	adds	r7, #8
   1422c:	46bd      	mov	sp, r7
   1422e:	bd80      	pop	{r7, pc}
   14230:	000056c5 	.word	0x000056c5

00014234 <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
   14234:	b580      	push	{r7, lr}
   14236:	b082      	sub	sp, #8
   14238:	af00      	add	r7, sp, #0
   1423a:	6078      	str	r0, [r7, #4]
   1423c:	6039      	str	r1, [r7, #0]
   1423e:	687b      	ldr	r3, [r7, #4]
   14240:	2b01      	cmp	r3, #1
   14242:	d10d      	bne.n	14260 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14244:	683b      	ldr	r3, [r7, #0]
   14246:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1424a:	4293      	cmp	r3, r2
   1424c:	d108      	bne.n	14260 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1424e:	4906      	ldr	r1, [pc, #24]	; (14268 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14250:	4806      	ldr	r0, [pc, #24]	; (1426c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14252:	4b07      	ldr	r3, [pc, #28]	; (14270 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14254:	4798      	blx	r3
   14256:	4a07      	ldr	r2, [pc, #28]	; (14274 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14258:	4907      	ldr	r1, [pc, #28]	; (14278 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1425a:	4804      	ldr	r0, [pc, #16]	; (1426c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1425c:	4b07      	ldr	r3, [pc, #28]	; (1427c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1425e:	4798      	blx	r3
   14260:	bf00      	nop
   14262:	3708      	adds	r7, #8
   14264:	46bd      	mov	sp, r7
   14266:	bd80      	pop	{r7, pc}
   14268:	20004fe8 	.word	0x20004fe8
   1426c:	20004edc 	.word	0x20004edc
   14270:	000140ed 	.word	0x000140ed
   14274:	20000000 	.word	0x20000000
   14278:	00014125 	.word	0x00014125
   1427c:	00014579 	.word	0x00014579

00014280 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   14280:	b580      	push	{r7, lr}
   14282:	af00      	add	r7, sp, #0
   14284:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14288:	2001      	movs	r0, #1
   1428a:	4b01      	ldr	r3, [pc, #4]	; (14290 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   1428c:	4798      	blx	r3
   1428e:	bd80      	pop	{r7, pc}
   14290:	00014235 	.word	0x00014235

00014294 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   14294:	b480      	push	{r7}
   14296:	b083      	sub	sp, #12
   14298:	af00      	add	r7, sp, #0
   1429a:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
   1429c:	4b04      	ldr	r3, [pc, #16]	; (142b0 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	2201      	movs	r2, #1
   142a2:	701a      	strb	r2, [r3, #0]

}
   142a4:	bf00      	nop
   142a6:	370c      	adds	r7, #12
   142a8:	46bd      	mov	sp, r7
   142aa:	bc80      	pop	{r7}
   142ac:	4770      	bx	lr
   142ae:	bf00      	nop
   142b0:	20004f08 	.word	0x20004f08

000142b4 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   142b4:	b480      	push	{r7}
   142b6:	b083      	sub	sp, #12
   142b8:	af00      	add	r7, sp, #0
   142ba:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
   142bc:	4b04      	ldr	r3, [pc, #16]	; (142d0 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
   142be:	681b      	ldr	r3, [r3, #0]
   142c0:	2201      	movs	r2, #1
   142c2:	705a      	strb	r2, [r3, #1]
}
   142c4:	bf00      	nop
   142c6:	370c      	adds	r7, #12
   142c8:	46bd      	mov	sp, r7
   142ca:	bc80      	pop	{r7}
   142cc:	4770      	bx	lr
   142ce:	bf00      	nop
   142d0:	20004f08 	.word	0x20004f08

000142d4 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   142d4:	b580      	push	{r7, lr}
   142d6:	b082      	sub	sp, #8
   142d8:	af00      	add	r7, sp, #0
   142da:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
   142dc:	4b08      	ldr	r3, [pc, #32]	; (14300 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   142de:	681b      	ldr	r3, [r3, #0]
   142e0:	4618      	mov	r0, r3
   142e2:	4b08      	ldr	r3, [pc, #32]	; (14304 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   142e4:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   142e6:	4b06      	ldr	r3, [pc, #24]	; (14300 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   142e8:	681b      	ldr	r3, [r3, #0]
   142ea:	2201      	movs	r2, #1
   142ec:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
   142ee:	4b04      	ldr	r3, [pc, #16]	; (14300 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   142f0:	681b      	ldr	r3, [r3, #0]
   142f2:	2201      	movs	r2, #1
   142f4:	705a      	strb	r2, [r3, #1]
 }
   142f6:	bf00      	nop
   142f8:	3708      	adds	r7, #8
   142fa:	46bd      	mov	sp, r7
   142fc:	bd80      	pop	{r7, pc}
   142fe:	bf00      	nop
   14300:	20004f08 	.word	0x20004f08
   14304:	000144b9 	.word	0x000144b9

00014308 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   14308:	b480      	push	{r7}
   1430a:	b083      	sub	sp, #12
   1430c:	af00      	add	r7, sp, #0
   1430e:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
   14310:	687b      	ldr	r3, [r7, #4]
   14312:	4a05      	ldr	r2, [pc, #20]	; (14328 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
   14314:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
   14316:	4a05      	ldr	r2, [pc, #20]	; (1432c <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
   14318:	687b      	ldr	r3, [r7, #4]
   1431a:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   1431c:	687b      	ldr	r3, [r7, #4]
   1431e:	4618      	mov	r0, r3
   14320:	370c      	adds	r7, #12
   14322:	46bd      	mov	sp, r7
   14324:	bc80      	pop	{r7}
   14326:	4770      	bx	lr
   14328:	200050c0 	.word	0x200050c0
   1432c:	20004f08 	.word	0x20004f08

00014330 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   14330:	b480      	push	{r7}
   14332:	b083      	sub	sp, #12
   14334:	af00      	add	r7, sp, #0
   14336:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
   14338:	687b      	ldr	r3, [r7, #4]
   1433a:	4618      	mov	r0, r3
   1433c:	370c      	adds	r7, #12
   1433e:	46bd      	mov	sp, r7
   14340:	bc80      	pop	{r7}
   14342:	4770      	bx	lr

00014344 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   14344:	b480      	push	{r7}
   14346:	b083      	sub	sp, #12
   14348:	af00      	add	r7, sp, #0
   1434a:	6078      	str	r0, [r7, #4]
   1434c:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   1434e:	687b      	ldr	r3, [r7, #4]
   14350:	683a      	ldr	r2, [r7, #0]
   14352:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
   14354:	4a03      	ldr	r2, [pc, #12]	; (14364 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
   14356:	687b      	ldr	r3, [r7, #4]
   14358:	6013      	str	r3, [r2, #0]
}
   1435a:	bf00      	nop
   1435c:	370c      	adds	r7, #12
   1435e:	46bd      	mov	sp, r7
   14360:	bc80      	pop	{r7}
   14362:	4770      	bx	lr
   14364:	20004f08 	.word	0x20004f08

00014368 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
   14368:	b580      	push	{r7, lr}
   1436a:	b084      	sub	sp, #16
   1436c:	af00      	add	r7, sp, #0
   1436e:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   14370:	687b      	ldr	r3, [r7, #4]
   14372:	689a      	ldr	r2, [r3, #8]
   14374:	687b      	ldr	r3, [r7, #4]
   14376:	3304      	adds	r3, #4
   14378:	4619      	mov	r1, r3
   1437a:	4610      	mov	r0, r2
   1437c:	4b14      	ldr	r3, [pc, #80]	; (143d0 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
   1437e:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   14380:	687b      	ldr	r3, [r7, #4]
   14382:	689b      	ldr	r3, [r3, #8]
   14384:	4618      	mov	r0, r3
   14386:	4b13      	ldr	r3, [pc, #76]	; (143d4 <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
   14388:	4798      	blx	r3
   1438a:	4603      	mov	r3, r0
   1438c:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   1438e:	687b      	ldr	r3, [r7, #4]
   14390:	689b      	ldr	r3, [r3, #8]
   14392:	4a11      	ldr	r2, [pc, #68]	; (143d8 <_ZN14I2C_Asyn_Class4InitEv+0x70>)
   14394:	2101      	movs	r1, #1
   14396:	4618      	mov	r0, r3
   14398:	4b10      	ldr	r3, [pc, #64]	; (143dc <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   1439a:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   1439c:	687b      	ldr	r3, [r7, #4]
   1439e:	689b      	ldr	r3, [r3, #8]
   143a0:	4a0f      	ldr	r2, [pc, #60]	; (143e0 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
   143a2:	2102      	movs	r1, #2
   143a4:	4618      	mov	r0, r3
   143a6:	4b0d      	ldr	r3, [pc, #52]	; (143dc <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   143a8:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   143aa:	687b      	ldr	r3, [r7, #4]
   143ac:	689b      	ldr	r3, [r3, #8]
   143ae:	4a0d      	ldr	r2, [pc, #52]	; (143e4 <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
   143b0:	2100      	movs	r1, #0
   143b2:	4618      	mov	r0, r3
   143b4:	4b09      	ldr	r3, [pc, #36]	; (143dc <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   143b6:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
   143b8:	687b      	ldr	r3, [r7, #4]
   143ba:	2201      	movs	r2, #1
   143bc:	701a      	strb	r2, [r3, #0]
	rxReady=true;
   143be:	687b      	ldr	r3, [r7, #4]
   143c0:	2201      	movs	r2, #1
   143c2:	705a      	strb	r2, [r3, #1]
	return ena;
   143c4:	7bfb      	ldrb	r3, [r7, #15]
	
}
   143c6:	4618      	mov	r0, r3
   143c8:	3710      	adds	r7, #16
   143ca:	46bd      	mov	sp, r7
   143cc:	bd80      	pop	{r7, pc}
   143ce:	bf00      	nop
   143d0:	00004c2f 	.word	0x00004c2f
   143d4:	00004b41 	.word	0x00004b41
   143d8:	00014295 	.word	0x00014295
   143dc:	00004be7 	.word	0x00004be7
   143e0:	000142b5 	.word	0x000142b5
   143e4:	000142d5 	.word	0x000142d5

000143e8 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
   143e8:	b580      	push	{r7, lr}
   143ea:	b084      	sub	sp, #16
   143ec:	af00      	add	r7, sp, #0
   143ee:	6078      	str	r0, [r7, #4]
   143f0:	460b      	mov	r3, r1
   143f2:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
   143f4:	6878      	ldr	r0, [r7, #4]
   143f6:	4b0c      	ldr	r3, [pc, #48]	; (14428 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
   143f8:	4798      	blx	r3
   143fa:	4603      	mov	r3, r0
   143fc:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   143fe:	687b      	ldr	r3, [r7, #4]
   14400:	689b      	ldr	r3, [r3, #8]
   14402:	78fa      	ldrb	r2, [r7, #3]
   14404:	b211      	sxth	r1, r2
   14406:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1440a:	4618      	mov	r0, r3
   1440c:	4b07      	ldr	r3, [pc, #28]	; (1442c <_ZN14I2C_Asyn_Class4InitEh+0x44>)
   1440e:	4798      	blx	r3
	txReady=true;
   14410:	687b      	ldr	r3, [r7, #4]
   14412:	2201      	movs	r2, #1
   14414:	701a      	strb	r2, [r3, #0]
	rxReady=true;
   14416:	687b      	ldr	r3, [r7, #4]
   14418:	2201      	movs	r2, #1
   1441a:	705a      	strb	r2, [r3, #1]
	return ena;
   1441c:	7bfb      	ldrb	r3, [r7, #15]
}
   1441e:	4618      	mov	r0, r3
   14420:	3710      	adds	r7, #16
   14422:	46bd      	mov	sp, r7
   14424:	bd80      	pop	{r7, pc}
   14426:	bf00      	nop
   14428:	00014369 	.word	0x00014369
   1442c:	00004bad 	.word	0x00004bad

00014430 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   14430:	b580      	push	{r7, lr}
   14432:	b084      	sub	sp, #16
   14434:	af00      	add	r7, sp, #0
   14436:	60f8      	str	r0, [r7, #12]
   14438:	60b9      	str	r1, [r7, #8]
   1443a:	4613      	mov	r3, r2
   1443c:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   1443e:	68fb      	ldr	r3, [r7, #12]
   14440:	781b      	ldrb	r3, [r3, #0]
   14442:	b2db      	uxtb	r3, r3
   14444:	f083 0301 	eor.w	r3, r3, #1
   14448:	b2db      	uxtb	r3, r3
   1444a:	2b00      	cmp	r3, #0
   1444c:	d000      	beq.n	14450 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   1444e:	e7f6      	b.n	1443e <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   14450:	68fb      	ldr	r3, [r7, #12]
   14452:	2200      	movs	r2, #0
   14454:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
   14456:	68fb      	ldr	r3, [r7, #12]
   14458:	685b      	ldr	r3, [r3, #4]
   1445a:	88fa      	ldrh	r2, [r7, #6]
   1445c:	68b9      	ldr	r1, [r7, #8]
   1445e:	4618      	mov	r0, r3
   14460:	4b03      	ldr	r3, [pc, #12]	; (14470 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   14462:	4798      	blx	r3
   14464:	4603      	mov	r3, r0
}
   14466:	4618      	mov	r0, r3
   14468:	3710      	adds	r7, #16
   1446a:	46bd      	mov	sp, r7
   1446c:	bd80      	pop	{r7, pc}
   1446e:	bf00      	nop
   14470:	000144d9 	.word	0x000144d9

00014474 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   14474:	b580      	push	{r7, lr}
   14476:	b084      	sub	sp, #16
   14478:	af00      	add	r7, sp, #0
   1447a:	60f8      	str	r0, [r7, #12]
   1447c:	60b9      	str	r1, [r7, #8]
   1447e:	4613      	mov	r3, r2
   14480:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   14482:	68fb      	ldr	r3, [r7, #12]
   14484:	785b      	ldrb	r3, [r3, #1]
   14486:	b2db      	uxtb	r3, r3
   14488:	f083 0301 	eor.w	r3, r3, #1
   1448c:	b2db      	uxtb	r3, r3
   1448e:	2b00      	cmp	r3, #0
   14490:	d000      	beq.n	14494 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   14492:	e7f6      	b.n	14482 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   14494:	68fb      	ldr	r3, [r7, #12]
   14496:	2200      	movs	r2, #0
   14498:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
   1449a:	68fb      	ldr	r3, [r7, #12]
   1449c:	685b      	ldr	r3, [r3, #4]
   1449e:	88fa      	ldrh	r2, [r7, #6]
   144a0:	68b9      	ldr	r1, [r7, #8]
   144a2:	4618      	mov	r0, r3
   144a4:	4b03      	ldr	r3, [pc, #12]	; (144b4 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   144a6:	4798      	blx	r3
   144a8:	4603      	mov	r3, r0
}
   144aa:	4618      	mov	r0, r3
   144ac:	3710      	adds	r7, #16
   144ae:	46bd      	mov	sp, r7
   144b0:	bd80      	pop	{r7, pc}
   144b2:	bf00      	nop
   144b4:	00014529 	.word	0x00014529

000144b8 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   144b8:	b480      	push	{r7}
   144ba:	b083      	sub	sp, #12
   144bc:	af00      	add	r7, sp, #0
   144be:	6078      	str	r0, [r7, #4]
	 ack=false;
   144c0:	687b      	ldr	r3, [r7, #4]
   144c2:	2200      	movs	r2, #0
   144c4:	709a      	strb	r2, [r3, #2]
	 return ack;
   144c6:	687b      	ldr	r3, [r7, #4]
   144c8:	789b      	ldrb	r3, [r3, #2]
   144ca:	b2db      	uxtb	r3, r3
   144cc:	4618      	mov	r0, r3
   144ce:	370c      	adds	r7, #12
   144d0:	46bd      	mov	sp, r7
   144d2:	bc80      	pop	{r7}
   144d4:	4770      	bx	lr
	...

000144d8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   144d8:	b580      	push	{r7, lr}
   144da:	b084      	sub	sp, #16
   144dc:	af00      	add	r7, sp, #0
   144de:	60f8      	str	r0, [r7, #12]
   144e0:	60b9      	str	r1, [r7, #8]
   144e2:	4613      	mov	r3, r2
   144e4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   144e6:	68fb      	ldr	r3, [r7, #12]
   144e8:	2b00      	cmp	r3, #0
   144ea:	d004      	beq.n	144f6 <io_write+0x1e>
   144ec:	68bb      	ldr	r3, [r7, #8]
   144ee:	2b00      	cmp	r3, #0
   144f0:	d001      	beq.n	144f6 <io_write+0x1e>
   144f2:	2301      	movs	r3, #1
   144f4:	e000      	b.n	144f8 <io_write+0x20>
   144f6:	2300      	movs	r3, #0
   144f8:	f003 0301 	and.w	r3, r3, #1
   144fc:	b2db      	uxtb	r3, r3
   144fe:	2234      	movs	r2, #52	; 0x34
   14500:	4907      	ldr	r1, [pc, #28]	; (14520 <io_write+0x48>)
   14502:	4618      	mov	r0, r3
   14504:	4b07      	ldr	r3, [pc, #28]	; (14524 <io_write+0x4c>)
   14506:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   14508:	68fb      	ldr	r3, [r7, #12]
   1450a:	681b      	ldr	r3, [r3, #0]
   1450c:	88fa      	ldrh	r2, [r7, #6]
   1450e:	68b9      	ldr	r1, [r7, #8]
   14510:	68f8      	ldr	r0, [r7, #12]
   14512:	4798      	blx	r3
   14514:	4603      	mov	r3, r0
}
   14516:	4618      	mov	r0, r3
   14518:	3710      	adds	r7, #16
   1451a:	46bd      	mov	sp, r7
   1451c:	bd80      	pop	{r7, pc}
   1451e:	bf00      	nop
   14520:	0001c01c 	.word	0x0001c01c
   14524:	000062c5 	.word	0x000062c5

00014528 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   14528:	b580      	push	{r7, lr}
   1452a:	b084      	sub	sp, #16
   1452c:	af00      	add	r7, sp, #0
   1452e:	60f8      	str	r0, [r7, #12]
   14530:	60b9      	str	r1, [r7, #8]
   14532:	4613      	mov	r3, r2
   14534:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   14536:	68fb      	ldr	r3, [r7, #12]
   14538:	2b00      	cmp	r3, #0
   1453a:	d004      	beq.n	14546 <io_read+0x1e>
   1453c:	68bb      	ldr	r3, [r7, #8]
   1453e:	2b00      	cmp	r3, #0
   14540:	d001      	beq.n	14546 <io_read+0x1e>
   14542:	2301      	movs	r3, #1
   14544:	e000      	b.n	14548 <io_read+0x20>
   14546:	2300      	movs	r3, #0
   14548:	f003 0301 	and.w	r3, r3, #1
   1454c:	b2db      	uxtb	r3, r3
   1454e:	223d      	movs	r2, #61	; 0x3d
   14550:	4907      	ldr	r1, [pc, #28]	; (14570 <io_read+0x48>)
   14552:	4618      	mov	r0, r3
   14554:	4b07      	ldr	r3, [pc, #28]	; (14574 <io_read+0x4c>)
   14556:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   14558:	68fb      	ldr	r3, [r7, #12]
   1455a:	685b      	ldr	r3, [r3, #4]
   1455c:	88fa      	ldrh	r2, [r7, #6]
   1455e:	68b9      	ldr	r1, [r7, #8]
   14560:	68f8      	ldr	r0, [r7, #12]
   14562:	4798      	blx	r3
   14564:	4603      	mov	r3, r0
}
   14566:	4618      	mov	r0, r3
   14568:	3710      	adds	r7, #16
   1456a:	46bd      	mov	sp, r7
   1456c:	bd80      	pop	{r7, pc}
   1456e:	bf00      	nop
   14570:	0001c01c 	.word	0x0001c01c
   14574:	000062c5 	.word	0x000062c5

00014578 <__aeabi_atexit>:
   14578:	460b      	mov	r3, r1
   1457a:	4601      	mov	r1, r0
   1457c:	4618      	mov	r0, r3
   1457e:	f001 bf6d 	b.w	1645c <__cxa_atexit>
   14582:	bf00      	nop

00014584 <_ZdlPvj>:
   14584:	f7fc beea 	b.w	1135c <_ZdlPv>

00014588 <floor>:
   14588:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1458c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14590:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   14594:	2e13      	cmp	r6, #19
   14596:	460b      	mov	r3, r1
   14598:	460d      	mov	r5, r1
   1459a:	4604      	mov	r4, r0
   1459c:	4688      	mov	r8, r1
   1459e:	4607      	mov	r7, r0
   145a0:	dc1d      	bgt.n	145de <floor+0x56>
   145a2:	2e00      	cmp	r6, #0
   145a4:	db40      	blt.n	14628 <floor+0xa0>
   145a6:	4a3c      	ldr	r2, [pc, #240]	; (14698 <floor+0x110>)
   145a8:	fa42 f906 	asr.w	r9, r2, r6
   145ac:	ea01 0209 	and.w	r2, r1, r9
   145b0:	4302      	orrs	r2, r0
   145b2:	4686      	mov	lr, r0
   145b4:	d018      	beq.n	145e8 <floor+0x60>
   145b6:	a336      	add	r3, pc, #216	; (adr r3, 14690 <floor+0x108>)
   145b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   145bc:	f001 f91c 	bl	157f8 <__adddf3>
   145c0:	2200      	movs	r2, #0
   145c2:	2300      	movs	r3, #0
   145c4:	f001 fd5a 	bl	1607c <__aeabi_dcmpgt>
   145c8:	b120      	cbz	r0, 145d4 <floor+0x4c>
   145ca:	2d00      	cmp	r5, #0
   145cc:	db42      	blt.n	14654 <floor+0xcc>
   145ce:	ea28 0509 	bic.w	r5, r8, r9
   145d2:	2700      	movs	r7, #0
   145d4:	463c      	mov	r4, r7
   145d6:	4629      	mov	r1, r5
   145d8:	4620      	mov	r0, r4
   145da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145de:	2e33      	cmp	r6, #51	; 0x33
   145e0:	dd06      	ble.n	145f0 <floor+0x68>
   145e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   145e6:	d02f      	beq.n	14648 <floor+0xc0>
   145e8:	4619      	mov	r1, r3
   145ea:	4620      	mov	r0, r4
   145ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145f0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   145f4:	f04f 39ff 	mov.w	r9, #4294967295
   145f8:	fa29 f902 	lsr.w	r9, r9, r2
   145fc:	ea10 0f09 	tst.w	r0, r9
   14600:	d0f2      	beq.n	145e8 <floor+0x60>
   14602:	a323      	add	r3, pc, #140	; (adr r3, 14690 <floor+0x108>)
   14604:	e9d3 2300 	ldrd	r2, r3, [r3]
   14608:	f001 f8f6 	bl	157f8 <__adddf3>
   1460c:	2200      	movs	r2, #0
   1460e:	2300      	movs	r3, #0
   14610:	f001 fd34 	bl	1607c <__aeabi_dcmpgt>
   14614:	2800      	cmp	r0, #0
   14616:	d0dd      	beq.n	145d4 <floor+0x4c>
   14618:	2d00      	cmp	r5, #0
   1461a:	db21      	blt.n	14660 <floor+0xd8>
   1461c:	4645      	mov	r5, r8
   1461e:	ea27 0709 	bic.w	r7, r7, r9
   14622:	463c      	mov	r4, r7
   14624:	4629      	mov	r1, r5
   14626:	e7d7      	b.n	145d8 <floor+0x50>
   14628:	a319      	add	r3, pc, #100	; (adr r3, 14690 <floor+0x108>)
   1462a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1462e:	f001 f8e3 	bl	157f8 <__adddf3>
   14632:	2200      	movs	r2, #0
   14634:	2300      	movs	r3, #0
   14636:	f001 fd21 	bl	1607c <__aeabi_dcmpgt>
   1463a:	2800      	cmp	r0, #0
   1463c:	d0ca      	beq.n	145d4 <floor+0x4c>
   1463e:	2d00      	cmp	r5, #0
   14640:	db19      	blt.n	14676 <floor+0xee>
   14642:	2700      	movs	r7, #0
   14644:	463d      	mov	r5, r7
   14646:	e7c5      	b.n	145d4 <floor+0x4c>
   14648:	4602      	mov	r2, r0
   1464a:	460b      	mov	r3, r1
   1464c:	f001 f8d4 	bl	157f8 <__adddf3>
   14650:	4604      	mov	r4, r0
   14652:	e7ca      	b.n	145ea <floor+0x62>
   14654:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   14658:	fa43 f606 	asr.w	r6, r3, r6
   1465c:	44b0      	add	r8, r6
   1465e:	e7b6      	b.n	145ce <floor+0x46>
   14660:	2e14      	cmp	r6, #20
   14662:	d010      	beq.n	14686 <floor+0xfe>
   14664:	2301      	movs	r3, #1
   14666:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   1466a:	fa03 f606 	lsl.w	r6, r3, r6
   1466e:	1937      	adds	r7, r6, r4
   14670:	bf28      	it	cs
   14672:	4498      	addcs	r8, r3
   14674:	e7d2      	b.n	1461c <floor+0x94>
   14676:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   1467a:	4b08      	ldr	r3, [pc, #32]	; (1469c <floor+0x114>)
   1467c:	4322      	orrs	r2, r4
   1467e:	bf18      	it	ne
   14680:	461d      	movne	r5, r3
   14682:	2700      	movs	r7, #0
   14684:	e7a6      	b.n	145d4 <floor+0x4c>
   14686:	f105 0801 	add.w	r8, r5, #1
   1468a:	e7c7      	b.n	1461c <floor+0x94>
   1468c:	f3af 8000 	nop.w
   14690:	8800759c 	.word	0x8800759c
   14694:	7e37e43c 	.word	0x7e37e43c
   14698:	000fffff 	.word	0x000fffff
   1469c:	bff00000 	.word	0xbff00000

000146a0 <pow>:
   146a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146a4:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 14998 <pow+0x2f8>
   146a8:	b08d      	sub	sp, #52	; 0x34
   146aa:	4606      	mov	r6, r0
   146ac:	460f      	mov	r7, r1
   146ae:	4614      	mov	r4, r2
   146b0:	461d      	mov	r5, r3
   146b2:	f000 f975 	bl	149a0 <__ieee754_pow>
   146b6:	f999 8000 	ldrsb.w	r8, [r9]
   146ba:	f1b8 3fff 	cmp.w	r8, #4294967295
   146be:	e9cd 0100 	strd	r0, r1, [sp]
   146c2:	d036      	beq.n	14732 <pow+0x92>
   146c4:	4622      	mov	r2, r4
   146c6:	462b      	mov	r3, r5
   146c8:	4620      	mov	r0, r4
   146ca:	4629      	mov	r1, r5
   146cc:	f001 fce0 	bl	16090 <__aeabi_dcmpun>
   146d0:	4683      	mov	fp, r0
   146d2:	bb70      	cbnz	r0, 14732 <pow+0x92>
   146d4:	4632      	mov	r2, r6
   146d6:	463b      	mov	r3, r7
   146d8:	4630      	mov	r0, r6
   146da:	4639      	mov	r1, r7
   146dc:	f001 fcd8 	bl	16090 <__aeabi_dcmpun>
   146e0:	2200      	movs	r2, #0
   146e2:	4682      	mov	sl, r0
   146e4:	2300      	movs	r3, #0
   146e6:	2800      	cmp	r0, #0
   146e8:	f040 80a0 	bne.w	1482c <pow+0x18c>
   146ec:	4630      	mov	r0, r6
   146ee:	4639      	mov	r1, r7
   146f0:	f001 fc9c 	bl	1602c <__aeabi_dcmpeq>
   146f4:	b310      	cbz	r0, 1473c <pow+0x9c>
   146f6:	2200      	movs	r2, #0
   146f8:	2300      	movs	r3, #0
   146fa:	4620      	mov	r0, r4
   146fc:	4629      	mov	r1, r5
   146fe:	f001 fc95 	bl	1602c <__aeabi_dcmpeq>
   14702:	4683      	mov	fp, r0
   14704:	2800      	cmp	r0, #0
   14706:	d06a      	beq.n	147de <pow+0x13e>
   14708:	2201      	movs	r2, #1
   1470a:	4b9c      	ldr	r3, [pc, #624]	; (1497c <pow+0x2dc>)
   1470c:	9202      	str	r2, [sp, #8]
   1470e:	2100      	movs	r1, #0
   14710:	2200      	movs	r2, #0
   14712:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   14716:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1471a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1471e:	e9cd 1208 	strd	r1, r2, [sp, #32]
   14722:	9303      	str	r3, [sp, #12]
   14724:	f1b8 0f00 	cmp.w	r8, #0
   14728:	d045      	beq.n	147b6 <pow+0x116>
   1472a:	4c95      	ldr	r4, [pc, #596]	; (14980 <pow+0x2e0>)
   1472c:	2300      	movs	r3, #0
   1472e:	e9cd 3400 	strd	r3, r4, [sp]
   14732:	e9dd 0100 	ldrd	r0, r1, [sp]
   14736:	b00d      	add	sp, #52	; 0x34
   14738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1473c:	e9dd 0100 	ldrd	r0, r1, [sp]
   14740:	f000 ff34 	bl	155ac <finite>
   14744:	4680      	mov	r8, r0
   14746:	2800      	cmp	r0, #0
   14748:	f000 808b 	beq.w	14862 <pow+0x1c2>
   1474c:	f04f 0a00 	mov.w	sl, #0
   14750:	f04f 0b00 	mov.w	fp, #0
   14754:	4652      	mov	r2, sl
   14756:	465b      	mov	r3, fp
   14758:	e9dd 0100 	ldrd	r0, r1, [sp]
   1475c:	f001 fc66 	bl	1602c <__aeabi_dcmpeq>
   14760:	2800      	cmp	r0, #0
   14762:	d0e6      	beq.n	14732 <pow+0x92>
   14764:	4630      	mov	r0, r6
   14766:	4639      	mov	r1, r7
   14768:	f000 ff20 	bl	155ac <finite>
   1476c:	2800      	cmp	r0, #0
   1476e:	d0e0      	beq.n	14732 <pow+0x92>
   14770:	4620      	mov	r0, r4
   14772:	4629      	mov	r1, r5
   14774:	f000 ff1a 	bl	155ac <finite>
   14778:	2800      	cmp	r0, #0
   1477a:	d0da      	beq.n	14732 <pow+0x92>
   1477c:	f999 3000 	ldrsb.w	r3, [r9]
   14780:	4a7e      	ldr	r2, [pc, #504]	; (1497c <pow+0x2dc>)
   14782:	9203      	str	r2, [sp, #12]
   14784:	2104      	movs	r1, #4
   14786:	2200      	movs	r2, #0
   14788:	2b02      	cmp	r3, #2
   1478a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1478e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14792:	e9cd ab08 	strd	sl, fp, [sp, #32]
   14796:	9102      	str	r1, [sp, #8]
   14798:	920a      	str	r2, [sp, #40]	; 0x28
   1479a:	d003      	beq.n	147a4 <pow+0x104>
   1479c:	a802      	add	r0, sp, #8
   1479e:	f000 ff0b 	bl	155b8 <matherr>
   147a2:	b968      	cbnz	r0, 147c0 <pow+0x120>
   147a4:	f001 fe66 	bl	16474 <__errno>
   147a8:	2322      	movs	r3, #34	; 0x22
   147aa:	6003      	str	r3, [r0, #0]
   147ac:	e008      	b.n	147c0 <pow+0x120>
   147ae:	2300      	movs	r3, #0
   147b0:	2400      	movs	r4, #0
   147b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
   147b6:	a802      	add	r0, sp, #8
   147b8:	f000 fefe 	bl	155b8 <matherr>
   147bc:	2800      	cmp	r0, #0
   147be:	d030      	beq.n	14822 <pow+0x182>
   147c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   147c2:	b11b      	cbz	r3, 147cc <pow+0x12c>
   147c4:	f001 fe56 	bl	16474 <__errno>
   147c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   147ca:	6003      	str	r3, [r0, #0]
   147cc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   147d0:	e9cd 3400 	strd	r3, r4, [sp]
   147d4:	e9dd 0100 	ldrd	r0, r1, [sp]
   147d8:	b00d      	add	sp, #52	; 0x34
   147da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147de:	4620      	mov	r0, r4
   147e0:	4629      	mov	r1, r5
   147e2:	f000 fee3 	bl	155ac <finite>
   147e6:	2800      	cmp	r0, #0
   147e8:	d0a3      	beq.n	14732 <pow+0x92>
   147ea:	2200      	movs	r2, #0
   147ec:	2300      	movs	r3, #0
   147ee:	4620      	mov	r0, r4
   147f0:	4629      	mov	r1, r5
   147f2:	f001 fc25 	bl	16040 <__aeabi_dcmplt>
   147f6:	2800      	cmp	r0, #0
   147f8:	d09b      	beq.n	14732 <pow+0x92>
   147fa:	f999 3000 	ldrsb.w	r3, [r9]
   147fe:	4a5f      	ldr	r2, [pc, #380]	; (1497c <pow+0x2dc>)
   14800:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   14804:	2101      	movs	r1, #1
   14806:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1480a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1480e:	9102      	str	r1, [sp, #8]
   14810:	9203      	str	r2, [sp, #12]
   14812:	2b00      	cmp	r3, #0
   14814:	d0cb      	beq.n	147ae <pow+0x10e>
   14816:	495b      	ldr	r1, [pc, #364]	; (14984 <pow+0x2e4>)
   14818:	2000      	movs	r0, #0
   1481a:	2b02      	cmp	r3, #2
   1481c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   14820:	d1c9      	bne.n	147b6 <pow+0x116>
   14822:	f001 fe27 	bl	16474 <__errno>
   14826:	2321      	movs	r3, #33	; 0x21
   14828:	6003      	str	r3, [r0, #0]
   1482a:	e7c9      	b.n	147c0 <pow+0x120>
   1482c:	4620      	mov	r0, r4
   1482e:	4629      	mov	r1, r5
   14830:	f001 fbfc 	bl	1602c <__aeabi_dcmpeq>
   14834:	2800      	cmp	r0, #0
   14836:	f43f af7c 	beq.w	14732 <pow+0x92>
   1483a:	4b51      	ldr	r3, [pc, #324]	; (14980 <pow+0x2e0>)
   1483c:	494f      	ldr	r1, [pc, #316]	; (1497c <pow+0x2dc>)
   1483e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   14842:	2001      	movs	r0, #1
   14844:	2200      	movs	r2, #0
   14846:	f1b8 0f02 	cmp.w	r8, #2
   1484a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1484e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14852:	9002      	str	r0, [sp, #8]
   14854:	9103      	str	r1, [sp, #12]
   14856:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1485a:	d1ac      	bne.n	147b6 <pow+0x116>
   1485c:	e9cd 2300 	strd	r2, r3, [sp]
   14860:	e767      	b.n	14732 <pow+0x92>
   14862:	4630      	mov	r0, r6
   14864:	4639      	mov	r1, r7
   14866:	f000 fea1 	bl	155ac <finite>
   1486a:	2800      	cmp	r0, #0
   1486c:	f43f af6e 	beq.w	1474c <pow+0xac>
   14870:	4620      	mov	r0, r4
   14872:	4629      	mov	r1, r5
   14874:	f000 fe9a 	bl	155ac <finite>
   14878:	2800      	cmp	r0, #0
   1487a:	f43f af67 	beq.w	1474c <pow+0xac>
   1487e:	e9dd 2300 	ldrd	r2, r3, [sp]
   14882:	4610      	mov	r0, r2
   14884:	4619      	mov	r1, r3
   14886:	f001 fc03 	bl	16090 <__aeabi_dcmpun>
   1488a:	2800      	cmp	r0, #0
   1488c:	d158      	bne.n	14940 <pow+0x2a0>
   1488e:	2303      	movs	r3, #3
   14890:	f999 8000 	ldrsb.w	r8, [r9]
   14894:	9302      	str	r3, [sp, #8]
   14896:	4b39      	ldr	r3, [pc, #228]	; (1497c <pow+0x2dc>)
   14898:	900a      	str	r0, [sp, #40]	; 0x28
   1489a:	9303      	str	r3, [sp, #12]
   1489c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   148a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   148a4:	2200      	movs	r2, #0
   148a6:	2300      	movs	r3, #0
   148a8:	4630      	mov	r0, r6
   148aa:	4639      	mov	r1, r7
   148ac:	f1b8 0f00 	cmp.w	r8, #0
   148b0:	d126      	bne.n	14900 <pow+0x260>
   148b2:	4f35      	ldr	r7, [pc, #212]	; (14988 <pow+0x2e8>)
   148b4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   148b8:	e9cd 6708 	strd	r6, r7, [sp, #32]
   148bc:	f001 fbc0 	bl	16040 <__aeabi_dcmplt>
   148c0:	2800      	cmp	r0, #0
   148c2:	f43f af6b 	beq.w	1479c <pow+0xfc>
   148c6:	2200      	movs	r2, #0
   148c8:	4b30      	ldr	r3, [pc, #192]	; (1498c <pow+0x2ec>)
   148ca:	4620      	mov	r0, r4
   148cc:	4629      	mov	r1, r5
   148ce:	f001 f945 	bl	15b5c <__aeabi_dmul>
   148d2:	4604      	mov	r4, r0
   148d4:	460d      	mov	r5, r1
   148d6:	f000 fe77 	bl	155c8 <rint>
   148da:	4602      	mov	r2, r0
   148dc:	460b      	mov	r3, r1
   148de:	4620      	mov	r0, r4
   148e0:	4629      	mov	r1, r5
   148e2:	f001 fba3 	bl	1602c <__aeabi_dcmpeq>
   148e6:	bb40      	cbnz	r0, 1493a <pow+0x29a>
   148e8:	4b29      	ldr	r3, [pc, #164]	; (14990 <pow+0x2f0>)
   148ea:	f999 8000 	ldrsb.w	r8, [r9]
   148ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   148f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   148f6:	f1b8 0f02 	cmp.w	r8, #2
   148fa:	f47f af4f 	bne.w	1479c <pow+0xfc>
   148fe:	e751      	b.n	147a4 <pow+0x104>
   14900:	4f24      	ldr	r7, [pc, #144]	; (14994 <pow+0x2f4>)
   14902:	2600      	movs	r6, #0
   14904:	e9cd 6708 	strd	r6, r7, [sp, #32]
   14908:	f001 fb9a 	bl	16040 <__aeabi_dcmplt>
   1490c:	2800      	cmp	r0, #0
   1490e:	d0f2      	beq.n	148f6 <pow+0x256>
   14910:	2200      	movs	r2, #0
   14912:	4b1e      	ldr	r3, [pc, #120]	; (1498c <pow+0x2ec>)
   14914:	4620      	mov	r0, r4
   14916:	4629      	mov	r1, r5
   14918:	f001 f920 	bl	15b5c <__aeabi_dmul>
   1491c:	4604      	mov	r4, r0
   1491e:	460d      	mov	r5, r1
   14920:	f000 fe52 	bl	155c8 <rint>
   14924:	4602      	mov	r2, r0
   14926:	460b      	mov	r3, r1
   14928:	4620      	mov	r0, r4
   1492a:	4629      	mov	r1, r5
   1492c:	f001 fb7e 	bl	1602c <__aeabi_dcmpeq>
   14930:	b918      	cbnz	r0, 1493a <pow+0x29a>
   14932:	4b14      	ldr	r3, [pc, #80]	; (14984 <pow+0x2e4>)
   14934:	2200      	movs	r2, #0
   14936:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1493a:	f999 8000 	ldrsb.w	r8, [r9]
   1493e:	e7da      	b.n	148f6 <pow+0x256>
   14940:	f999 9000 	ldrsb.w	r9, [r9]
   14944:	4b0d      	ldr	r3, [pc, #52]	; (1497c <pow+0x2dc>)
   14946:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1494a:	2201      	movs	r2, #1
   1494c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14950:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14954:	9202      	str	r2, [sp, #8]
   14956:	9303      	str	r3, [sp, #12]
   14958:	f1b9 0f00 	cmp.w	r9, #0
   1495c:	f43f af27 	beq.w	147ae <pow+0x10e>
   14960:	2200      	movs	r2, #0
   14962:	2300      	movs	r3, #0
   14964:	4610      	mov	r0, r2
   14966:	4619      	mov	r1, r3
   14968:	f001 fa22 	bl	15db0 <__aeabi_ddiv>
   1496c:	f1b9 0f02 	cmp.w	r9, #2
   14970:	e9cd 0108 	strd	r0, r1, [sp, #32]
   14974:	f43f af55 	beq.w	14822 <pow+0x182>
   14978:	e71d      	b.n	147b6 <pow+0x116>
   1497a:	bf00      	nop
   1497c:	0001c030 	.word	0x0001c030
   14980:	3ff00000 	.word	0x3ff00000
   14984:	fff00000 	.word	0xfff00000
   14988:	47efffff 	.word	0x47efffff
   1498c:	3fe00000 	.word	0x3fe00000
   14990:	c7efffff 	.word	0xc7efffff
   14994:	7ff00000 	.word	0x7ff00000
   14998:	2000019b 	.word	0x2000019b
   1499c:	00000000 	.word	0x00000000

000149a0 <__ieee754_pow>:
   149a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   149a8:	ea57 0402 	orrs.w	r4, r7, r2
   149ac:	b093      	sub	sp, #76	; 0x4c
   149ae:	d037      	beq.n	14a20 <__ieee754_pow+0x80>
   149b0:	4c67      	ldr	r4, [pc, #412]	; (14b50 <__ieee754_pow+0x1b0>)
   149b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   149b6:	42a6      	cmp	r6, r4
   149b8:	4683      	mov	fp, r0
   149ba:	460d      	mov	r5, r1
   149bc:	dc29      	bgt.n	14a12 <__ieee754_pow+0x72>
   149be:	469a      	mov	sl, r3
   149c0:	4696      	mov	lr, r2
   149c2:	d025      	beq.n	14a10 <__ieee754_pow+0x70>
   149c4:	42a7      	cmp	r7, r4
   149c6:	dc24      	bgt.n	14a12 <__ieee754_pow+0x72>
   149c8:	4c61      	ldr	r4, [pc, #388]	; (14b50 <__ieee754_pow+0x1b0>)
   149ca:	42a7      	cmp	r7, r4
   149cc:	d079      	beq.n	14ac2 <__ieee754_pow+0x122>
   149ce:	2d00      	cmp	r5, #0
   149d0:	4689      	mov	r9, r1
   149d2:	4680      	mov	r8, r0
   149d4:	e9cd 2300 	strd	r2, r3, [sp]
   149d8:	db77      	blt.n	14aca <__ieee754_pow+0x12a>
   149da:	2400      	movs	r4, #0
   149dc:	f1be 0f00 	cmp.w	lr, #0
   149e0:	d12c      	bne.n	14a3c <__ieee754_pow+0x9c>
   149e2:	4b5b      	ldr	r3, [pc, #364]	; (14b50 <__ieee754_pow+0x1b0>)
   149e4:	429f      	cmp	r7, r3
   149e6:	f000 808b 	beq.w	14b00 <__ieee754_pow+0x160>
   149ea:	4b5a      	ldr	r3, [pc, #360]	; (14b54 <__ieee754_pow+0x1b4>)
   149ec:	429f      	cmp	r7, r3
   149ee:	d061      	beq.n	14ab4 <__ieee754_pow+0x114>
   149f0:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   149f4:	f000 83ba 	beq.w	1516c <__ieee754_pow+0x7cc>
   149f8:	4b57      	ldr	r3, [pc, #348]	; (14b58 <__ieee754_pow+0x1b8>)
   149fa:	459a      	cmp	sl, r3
   149fc:	d11e      	bne.n	14a3c <__ieee754_pow+0x9c>
   149fe:	2d00      	cmp	r5, #0
   14a00:	db1c      	blt.n	14a3c <__ieee754_pow+0x9c>
   14a02:	4640      	mov	r0, r8
   14a04:	4649      	mov	r1, r9
   14a06:	b013      	add	sp, #76	; 0x4c
   14a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a0c:	f000 bd0e 	b.w	1542c <__ieee754_sqrt>
   14a10:	b158      	cbz	r0, 14a2a <__ieee754_pow+0x8a>
   14a12:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   14a16:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   14a1a:	ea56 030b 	orrs.w	r3, r6, fp
   14a1e:	d106      	bne.n	14a2e <__ieee754_pow+0x8e>
   14a20:	494c      	ldr	r1, [pc, #304]	; (14b54 <__ieee754_pow+0x1b4>)
   14a22:	2000      	movs	r0, #0
   14a24:	b013      	add	sp, #76	; 0x4c
   14a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a2a:	42b7      	cmp	r7, r6
   14a2c:	ddcc      	ble.n	149c8 <__ieee754_pow+0x28>
   14a2e:	484b      	ldr	r0, [pc, #300]	; (14b5c <__ieee754_pow+0x1bc>)
   14a30:	b013      	add	sp, #76	; 0x4c
   14a32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a36:	f000 bdc1 	b.w	155bc <nan>
   14a3a:	2400      	movs	r4, #0
   14a3c:	4640      	mov	r0, r8
   14a3e:	4649      	mov	r1, r9
   14a40:	f000 fdb0 	bl	155a4 <fabs>
   14a44:	f1bb 0f00 	cmp.w	fp, #0
   14a48:	d119      	bne.n	14a7e <__ieee754_pow+0xde>
   14a4a:	b126      	cbz	r6, 14a56 <__ieee754_pow+0xb6>
   14a4c:	4b41      	ldr	r3, [pc, #260]	; (14b54 <__ieee754_pow+0x1b4>)
   14a4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   14a52:	429a      	cmp	r2, r3
   14a54:	d113      	bne.n	14a7e <__ieee754_pow+0xde>
   14a56:	f1ba 0f00 	cmp.w	sl, #0
   14a5a:	f2c0 83bc 	blt.w	151d6 <__ieee754_pow+0x836>
   14a5e:	2d00      	cmp	r5, #0
   14a60:	dae0      	bge.n	14a24 <__ieee754_pow+0x84>
   14a62:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   14a66:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   14a6a:	ea56 0304 	orrs.w	r3, r6, r4
   14a6e:	f000 848f 	beq.w	15390 <__ieee754_pow+0x9f0>
   14a72:	2c01      	cmp	r4, #1
   14a74:	d1d6      	bne.n	14a24 <__ieee754_pow+0x84>
   14a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   14a7a:	4619      	mov	r1, r3
   14a7c:	e7d2      	b.n	14a24 <__ieee754_pow+0x84>
   14a7e:	0fed      	lsrs	r5, r5, #31
   14a80:	3d01      	subs	r5, #1
   14a82:	ea54 0305 	orrs.w	r3, r4, r5
   14a86:	d04e      	beq.n	14b26 <__ieee754_pow+0x186>
   14a88:	4b35      	ldr	r3, [pc, #212]	; (14b60 <__ieee754_pow+0x1c0>)
   14a8a:	429f      	cmp	r7, r3
   14a8c:	dd6e      	ble.n	14b6c <__ieee754_pow+0x1cc>
   14a8e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   14a92:	429f      	cmp	r7, r3
   14a94:	f340 83e8 	ble.w	15268 <__ieee754_pow+0x8c8>
   14a98:	4b32      	ldr	r3, [pc, #200]	; (14b64 <__ieee754_pow+0x1c4>)
   14a9a:	429e      	cmp	r6, r3
   14a9c:	dd4e      	ble.n	14b3c <__ieee754_pow+0x19c>
   14a9e:	f1ba 0f00 	cmp.w	sl, #0
   14aa2:	dd4e      	ble.n	14b42 <__ieee754_pow+0x1a2>
   14aa4:	a328      	add	r3, pc, #160	; (adr r3, 14b48 <__ieee754_pow+0x1a8>)
   14aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14aaa:	4610      	mov	r0, r2
   14aac:	4619      	mov	r1, r3
   14aae:	f001 f855 	bl	15b5c <__aeabi_dmul>
   14ab2:	e7b7      	b.n	14a24 <__ieee754_pow+0x84>
   14ab4:	f1ba 0f00 	cmp.w	sl, #0
   14ab8:	f2c0 843c 	blt.w	15334 <__ieee754_pow+0x994>
   14abc:	4640      	mov	r0, r8
   14abe:	4649      	mov	r1, r9
   14ac0:	e7b0      	b.n	14a24 <__ieee754_pow+0x84>
   14ac2:	f1be 0f00 	cmp.w	lr, #0
   14ac6:	d082      	beq.n	149ce <__ieee754_pow+0x2e>
   14ac8:	e7a3      	b.n	14a12 <__ieee754_pow+0x72>
   14aca:	4b27      	ldr	r3, [pc, #156]	; (14b68 <__ieee754_pow+0x1c8>)
   14acc:	429f      	cmp	r7, r3
   14ace:	dc28      	bgt.n	14b22 <__ieee754_pow+0x182>
   14ad0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   14ad4:	429f      	cmp	r7, r3
   14ad6:	dd80      	ble.n	149da <__ieee754_pow+0x3a>
   14ad8:	153b      	asrs	r3, r7, #20
   14ada:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   14ade:	2b14      	cmp	r3, #20
   14ae0:	f340 843e 	ble.w	15360 <__ieee754_pow+0x9c0>
   14ae4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   14ae8:	fa2e f203 	lsr.w	r2, lr, r3
   14aec:	fa02 f303 	lsl.w	r3, r2, r3
   14af0:	459e      	cmp	lr, r3
   14af2:	f47f af72 	bne.w	149da <__ieee754_pow+0x3a>
   14af6:	f002 0201 	and.w	r2, r2, #1
   14afa:	f1c2 0402 	rsb	r4, r2, #2
   14afe:	e76d      	b.n	149dc <__ieee754_pow+0x3c>
   14b00:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   14b04:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   14b08:	ea53 030b 	orrs.w	r3, r3, fp
   14b0c:	d088      	beq.n	14a20 <__ieee754_pow+0x80>
   14b0e:	4b15      	ldr	r3, [pc, #84]	; (14b64 <__ieee754_pow+0x1c4>)
   14b10:	429e      	cmp	r6, r3
   14b12:	f340 8332 	ble.w	1517a <__ieee754_pow+0x7da>
   14b16:	f1ba 0f00 	cmp.w	sl, #0
   14b1a:	db12      	blt.n	14b42 <__ieee754_pow+0x1a2>
   14b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
   14b20:	e780      	b.n	14a24 <__ieee754_pow+0x84>
   14b22:	2402      	movs	r4, #2
   14b24:	e75a      	b.n	149dc <__ieee754_pow+0x3c>
   14b26:	4642      	mov	r2, r8
   14b28:	464b      	mov	r3, r9
   14b2a:	4640      	mov	r0, r8
   14b2c:	4649      	mov	r1, r9
   14b2e:	f000 fe61 	bl	157f4 <__aeabi_dsub>
   14b32:	4602      	mov	r2, r0
   14b34:	460b      	mov	r3, r1
   14b36:	f001 f93b 	bl	15db0 <__aeabi_ddiv>
   14b3a:	e773      	b.n	14a24 <__ieee754_pow+0x84>
   14b3c:	f1ba 0f00 	cmp.w	sl, #0
   14b40:	dbb0      	blt.n	14aa4 <__ieee754_pow+0x104>
   14b42:	2000      	movs	r0, #0
   14b44:	2100      	movs	r1, #0
   14b46:	e76d      	b.n	14a24 <__ieee754_pow+0x84>
   14b48:	8800759c 	.word	0x8800759c
   14b4c:	7e37e43c 	.word	0x7e37e43c
   14b50:	7ff00000 	.word	0x7ff00000
   14b54:	3ff00000 	.word	0x3ff00000
   14b58:	3fe00000 	.word	0x3fe00000
   14b5c:	0001c16c 	.word	0x0001c16c
   14b60:	41e00000 	.word	0x41e00000
   14b64:	3fefffff 	.word	0x3fefffff
   14b68:	433fffff 	.word	0x433fffff
   14b6c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   14b70:	f04f 0200 	mov.w	r2, #0
   14b74:	da05      	bge.n	14b82 <__ieee754_pow+0x1e2>
   14b76:	4bd4      	ldr	r3, [pc, #848]	; (14ec8 <__ieee754_pow+0x528>)
   14b78:	f000 fff0 	bl	15b5c <__aeabi_dmul>
   14b7c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   14b80:	460e      	mov	r6, r1
   14b82:	1533      	asrs	r3, r6, #20
   14b84:	4fd1      	ldr	r7, [pc, #836]	; (14ecc <__ieee754_pow+0x52c>)
   14b86:	f3c6 0613 	ubfx	r6, r6, #0, #20
   14b8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   14b8e:	4413      	add	r3, r2
   14b90:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   14b94:	42be      	cmp	r6, r7
   14b96:	461a      	mov	r2, r3
   14b98:	930d      	str	r3, [sp, #52]	; 0x34
   14b9a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   14b9e:	f340 8321 	ble.w	151e4 <__ieee754_pow+0x844>
   14ba2:	4bcb      	ldr	r3, [pc, #812]	; (14ed0 <__ieee754_pow+0x530>)
   14ba4:	429e      	cmp	r6, r3
   14ba6:	f340 83fd 	ble.w	153a4 <__ieee754_pow+0xa04>
   14baa:	4613      	mov	r3, r2
   14bac:	3301      	adds	r3, #1
   14bae:	930d      	str	r3, [sp, #52]	; 0x34
   14bb0:	4bc8      	ldr	r3, [pc, #800]	; (14ed4 <__ieee754_pow+0x534>)
   14bb2:	2200      	movs	r2, #0
   14bb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14bb8:	2700      	movs	r7, #0
   14bba:	2600      	movs	r6, #0
   14bbc:	e9cd 6708 	strd	r6, r7, [sp, #32]
   14bc0:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   14bc4:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   14bc8:	2700      	movs	r7, #0
   14bca:	4602      	mov	r2, r0
   14bcc:	4653      	mov	r3, sl
   14bce:	4651      	mov	r1, sl
   14bd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   14bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14bd8:	f000 fe0c 	bl	157f4 <__aeabi_dsub>
   14bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14be0:	4680      	mov	r8, r0
   14be2:	4689      	mov	r9, r1
   14be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   14be8:	f000 fe06 	bl	157f8 <__adddf3>
   14bec:	4602      	mov	r2, r0
   14bee:	460b      	mov	r3, r1
   14bf0:	2000      	movs	r0, #0
   14bf2:	49b8      	ldr	r1, [pc, #736]	; (14ed4 <__ieee754_pow+0x534>)
   14bf4:	f001 f8dc 	bl	15db0 <__aeabi_ddiv>
   14bf8:	460a      	mov	r2, r1
   14bfa:	4601      	mov	r1, r0
   14bfc:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   14c00:	4613      	mov	r3, r2
   14c02:	4649      	mov	r1, r9
   14c04:	4602      	mov	r2, r0
   14c06:	4640      	mov	r0, r8
   14c08:	f000 ffa8 	bl	15b5c <__aeabi_dmul>
   14c0c:	ea4f 036a 	mov.w	r3, sl, asr #1
   14c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   14c14:	468c      	mov	ip, r1
   14c16:	4683      	mov	fp, r0
   14c18:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   14c1c:	e9cd bc04 	strd	fp, ip, [sp, #16]
   14c20:	46da      	mov	sl, fp
   14c22:	468b      	mov	fp, r1
   14c24:	19d9      	adds	r1, r3, r7
   14c26:	2300      	movs	r3, #0
   14c28:	e9cd ab02 	strd	sl, fp, [sp, #8]
   14c2c:	9302      	str	r3, [sp, #8]
   14c2e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   14c32:	2000      	movs	r0, #0
   14c34:	4606      	mov	r6, r0
   14c36:	460f      	mov	r7, r1
   14c38:	4602      	mov	r2, r0
   14c3a:	460b      	mov	r3, r1
   14c3c:	4650      	mov	r0, sl
   14c3e:	4659      	mov	r1, fp
   14c40:	f000 ff8c 	bl	15b5c <__aeabi_dmul>
   14c44:	4602      	mov	r2, r0
   14c46:	460b      	mov	r3, r1
   14c48:	4640      	mov	r0, r8
   14c4a:	4649      	mov	r1, r9
   14c4c:	f000 fdd2 	bl	157f4 <__aeabi_dsub>
   14c50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14c54:	4680      	mov	r8, r0
   14c56:	4689      	mov	r9, r1
   14c58:	4630      	mov	r0, r6
   14c5a:	4639      	mov	r1, r7
   14c5c:	f000 fdca 	bl	157f4 <__aeabi_dsub>
   14c60:	4602      	mov	r2, r0
   14c62:	460b      	mov	r3, r1
   14c64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   14c68:	f000 fdc4 	bl	157f4 <__aeabi_dsub>
   14c6c:	4652      	mov	r2, sl
   14c6e:	465b      	mov	r3, fp
   14c70:	f000 ff74 	bl	15b5c <__aeabi_dmul>
   14c74:	4602      	mov	r2, r0
   14c76:	460b      	mov	r3, r1
   14c78:	4640      	mov	r0, r8
   14c7a:	4649      	mov	r1, r9
   14c7c:	f000 fdba 	bl	157f4 <__aeabi_dsub>
   14c80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   14c84:	f000 ff6a 	bl	15b5c <__aeabi_dmul>
   14c88:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   14c8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   14c90:	4632      	mov	r2, r6
   14c92:	463b      	mov	r3, r7
   14c94:	4630      	mov	r0, r6
   14c96:	4639      	mov	r1, r7
   14c98:	f000 ff60 	bl	15b5c <__aeabi_dmul>
   14c9c:	a378      	add	r3, pc, #480	; (adr r3, 14e80 <__ieee754_pow+0x4e0>)
   14c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ca2:	4606      	mov	r6, r0
   14ca4:	460f      	mov	r7, r1
   14ca6:	f000 ff59 	bl	15b5c <__aeabi_dmul>
   14caa:	a377      	add	r3, pc, #476	; (adr r3, 14e88 <__ieee754_pow+0x4e8>)
   14cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cb0:	f000 fda2 	bl	157f8 <__adddf3>
   14cb4:	4632      	mov	r2, r6
   14cb6:	463b      	mov	r3, r7
   14cb8:	f000 ff50 	bl	15b5c <__aeabi_dmul>
   14cbc:	a374      	add	r3, pc, #464	; (adr r3, 14e90 <__ieee754_pow+0x4f0>)
   14cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cc2:	f000 fd99 	bl	157f8 <__adddf3>
   14cc6:	4632      	mov	r2, r6
   14cc8:	463b      	mov	r3, r7
   14cca:	f000 ff47 	bl	15b5c <__aeabi_dmul>
   14cce:	a372      	add	r3, pc, #456	; (adr r3, 14e98 <__ieee754_pow+0x4f8>)
   14cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cd4:	f000 fd90 	bl	157f8 <__adddf3>
   14cd8:	4632      	mov	r2, r6
   14cda:	463b      	mov	r3, r7
   14cdc:	f000 ff3e 	bl	15b5c <__aeabi_dmul>
   14ce0:	a36f      	add	r3, pc, #444	; (adr r3, 14ea0 <__ieee754_pow+0x500>)
   14ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ce6:	f000 fd87 	bl	157f8 <__adddf3>
   14cea:	4632      	mov	r2, r6
   14cec:	463b      	mov	r3, r7
   14cee:	f000 ff35 	bl	15b5c <__aeabi_dmul>
   14cf2:	a36d      	add	r3, pc, #436	; (adr r3, 14ea8 <__ieee754_pow+0x508>)
   14cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cf8:	f000 fd7e 	bl	157f8 <__adddf3>
   14cfc:	4632      	mov	r2, r6
   14cfe:	4680      	mov	r8, r0
   14d00:	4689      	mov	r9, r1
   14d02:	463b      	mov	r3, r7
   14d04:	4630      	mov	r0, r6
   14d06:	4639      	mov	r1, r7
   14d08:	f000 ff28 	bl	15b5c <__aeabi_dmul>
   14d0c:	4602      	mov	r2, r0
   14d0e:	460b      	mov	r3, r1
   14d10:	4640      	mov	r0, r8
   14d12:	4649      	mov	r1, r9
   14d14:	f000 ff22 	bl	15b5c <__aeabi_dmul>
   14d18:	4652      	mov	r2, sl
   14d1a:	4606      	mov	r6, r0
   14d1c:	460f      	mov	r7, r1
   14d1e:	465b      	mov	r3, fp
   14d20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   14d24:	f000 fd68 	bl	157f8 <__adddf3>
   14d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14d2c:	f000 ff16 	bl	15b5c <__aeabi_dmul>
   14d30:	4632      	mov	r2, r6
   14d32:	463b      	mov	r3, r7
   14d34:	f000 fd60 	bl	157f8 <__adddf3>
   14d38:	4652      	mov	r2, sl
   14d3a:	4680      	mov	r8, r0
   14d3c:	4689      	mov	r9, r1
   14d3e:	465b      	mov	r3, fp
   14d40:	4650      	mov	r0, sl
   14d42:	4659      	mov	r1, fp
   14d44:	f000 ff0a 	bl	15b5c <__aeabi_dmul>
   14d48:	2200      	movs	r2, #0
   14d4a:	4b63      	ldr	r3, [pc, #396]	; (14ed8 <__ieee754_pow+0x538>)
   14d4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   14d50:	f000 fd52 	bl	157f8 <__adddf3>
   14d54:	4642      	mov	r2, r8
   14d56:	464b      	mov	r3, r9
   14d58:	f000 fd4e 	bl	157f8 <__adddf3>
   14d5c:	9802      	ldr	r0, [sp, #8]
   14d5e:	460f      	mov	r7, r1
   14d60:	4606      	mov	r6, r0
   14d62:	4632      	mov	r2, r6
   14d64:	463b      	mov	r3, r7
   14d66:	4650      	mov	r0, sl
   14d68:	4659      	mov	r1, fp
   14d6a:	f000 fef7 	bl	15b5c <__aeabi_dmul>
   14d6e:	2200      	movs	r2, #0
   14d70:	4682      	mov	sl, r0
   14d72:	468b      	mov	fp, r1
   14d74:	4b58      	ldr	r3, [pc, #352]	; (14ed8 <__ieee754_pow+0x538>)
   14d76:	4630      	mov	r0, r6
   14d78:	4639      	mov	r1, r7
   14d7a:	f000 fd3b 	bl	157f4 <__aeabi_dsub>
   14d7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   14d82:	f000 fd37 	bl	157f4 <__aeabi_dsub>
   14d86:	4602      	mov	r2, r0
   14d88:	460b      	mov	r3, r1
   14d8a:	4640      	mov	r0, r8
   14d8c:	4649      	mov	r1, r9
   14d8e:	f000 fd31 	bl	157f4 <__aeabi_dsub>
   14d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14d96:	f000 fee1 	bl	15b5c <__aeabi_dmul>
   14d9a:	4632      	mov	r2, r6
   14d9c:	4680      	mov	r8, r0
   14d9e:	4689      	mov	r9, r1
   14da0:	463b      	mov	r3, r7
   14da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   14da6:	f000 fed9 	bl	15b5c <__aeabi_dmul>
   14daa:	4602      	mov	r2, r0
   14dac:	460b      	mov	r3, r1
   14dae:	4640      	mov	r0, r8
   14db0:	4649      	mov	r1, r9
   14db2:	f000 fd21 	bl	157f8 <__adddf3>
   14db6:	4680      	mov	r8, r0
   14db8:	4689      	mov	r9, r1
   14dba:	4602      	mov	r2, r0
   14dbc:	460b      	mov	r3, r1
   14dbe:	4650      	mov	r0, sl
   14dc0:	4659      	mov	r1, fp
   14dc2:	e9cd ab04 	strd	sl, fp, [sp, #16]
   14dc6:	f000 fd17 	bl	157f8 <__adddf3>
   14dca:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   14dce:	a338      	add	r3, pc, #224	; (adr r3, 14eb0 <__ieee754_pow+0x510>)
   14dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dd4:	4650      	mov	r0, sl
   14dd6:	460f      	mov	r7, r1
   14dd8:	f000 fec0 	bl	15b5c <__aeabi_dmul>
   14ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14de4:	4639      	mov	r1, r7
   14de6:	4650      	mov	r0, sl
   14de8:	f000 fd04 	bl	157f4 <__aeabi_dsub>
   14dec:	4602      	mov	r2, r0
   14dee:	460b      	mov	r3, r1
   14df0:	4640      	mov	r0, r8
   14df2:	4649      	mov	r1, r9
   14df4:	f000 fcfe 	bl	157f4 <__aeabi_dsub>
   14df8:	a32f      	add	r3, pc, #188	; (adr r3, 14eb8 <__ieee754_pow+0x518>)
   14dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dfe:	f000 fead 	bl	15b5c <__aeabi_dmul>
   14e02:	a32f      	add	r3, pc, #188	; (adr r3, 14ec0 <__ieee754_pow+0x520>)
   14e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e08:	4680      	mov	r8, r0
   14e0a:	4689      	mov	r9, r1
   14e0c:	4650      	mov	r0, sl
   14e0e:	4639      	mov	r1, r7
   14e10:	f000 fea4 	bl	15b5c <__aeabi_dmul>
   14e14:	4602      	mov	r2, r0
   14e16:	460b      	mov	r3, r1
   14e18:	4640      	mov	r0, r8
   14e1a:	4649      	mov	r1, r9
   14e1c:	f000 fcec 	bl	157f8 <__adddf3>
   14e20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   14e24:	f000 fce8 	bl	157f8 <__adddf3>
   14e28:	4680      	mov	r8, r0
   14e2a:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e2c:	4689      	mov	r9, r1
   14e2e:	f000 fe2f 	bl	15a90 <__aeabi_i2d>
   14e32:	4642      	mov	r2, r8
   14e34:	4606      	mov	r6, r0
   14e36:	460f      	mov	r7, r1
   14e38:	464b      	mov	r3, r9
   14e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14e3e:	f000 fcdb 	bl	157f8 <__adddf3>
   14e42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   14e46:	f000 fcd7 	bl	157f8 <__adddf3>
   14e4a:	4632      	mov	r2, r6
   14e4c:	463b      	mov	r3, r7
   14e4e:	f000 fcd3 	bl	157f8 <__adddf3>
   14e52:	4632      	mov	r2, r6
   14e54:	463b      	mov	r3, r7
   14e56:	4650      	mov	r0, sl
   14e58:	468b      	mov	fp, r1
   14e5a:	f000 fccb 	bl	157f4 <__aeabi_dsub>
   14e5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   14e62:	f000 fcc7 	bl	157f4 <__aeabi_dsub>
   14e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14e6a:	f000 fcc3 	bl	157f4 <__aeabi_dsub>
   14e6e:	4602      	mov	r2, r0
   14e70:	460b      	mov	r3, r1
   14e72:	4640      	mov	r0, r8
   14e74:	4649      	mov	r1, r9
   14e76:	f000 fcbd 	bl	157f4 <__aeabi_dsub>
   14e7a:	4680      	mov	r8, r0
   14e7c:	e02e      	b.n	14edc <__ieee754_pow+0x53c>
   14e7e:	bf00      	nop
   14e80:	4a454eef 	.word	0x4a454eef
   14e84:	3fca7e28 	.word	0x3fca7e28
   14e88:	93c9db65 	.word	0x93c9db65
   14e8c:	3fcd864a 	.word	0x3fcd864a
   14e90:	a91d4101 	.word	0xa91d4101
   14e94:	3fd17460 	.word	0x3fd17460
   14e98:	518f264d 	.word	0x518f264d
   14e9c:	3fd55555 	.word	0x3fd55555
   14ea0:	db6fabff 	.word	0xdb6fabff
   14ea4:	3fdb6db6 	.word	0x3fdb6db6
   14ea8:	33333303 	.word	0x33333303
   14eac:	3fe33333 	.word	0x3fe33333
   14eb0:	e0000000 	.word	0xe0000000
   14eb4:	3feec709 	.word	0x3feec709
   14eb8:	dc3a03fd 	.word	0xdc3a03fd
   14ebc:	3feec709 	.word	0x3feec709
   14ec0:	145b01f5 	.word	0x145b01f5
   14ec4:	be3e2fe0 	.word	0xbe3e2fe0
   14ec8:	43400000 	.word	0x43400000
   14ecc:	0003988e 	.word	0x0003988e
   14ed0:	000bb679 	.word	0x000bb679
   14ed4:	3ff00000 	.word	0x3ff00000
   14ed8:	40080000 	.word	0x40080000
   14edc:	4689      	mov	r9, r1
   14ede:	3c01      	subs	r4, #1
   14ee0:	ea54 0305 	orrs.w	r3, r4, r5
   14ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
   14ee8:	bf14      	ite	ne
   14eea:	4cd9      	ldrne	r4, [pc, #868]	; (15250 <__ieee754_pow+0x8b0>)
   14eec:	4cd9      	ldreq	r4, [pc, #868]	; (15254 <__ieee754_pow+0x8b4>)
   14eee:	2300      	movs	r3, #0
   14ef0:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14ef4:	4603      	mov	r3, r0
   14ef6:	460c      	mov	r4, r1
   14ef8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   14efc:	2300      	movs	r3, #0
   14efe:	9302      	str	r3, [sp, #8]
   14f00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   14f04:	4622      	mov	r2, r4
   14f06:	462b      	mov	r3, r5
   14f08:	f000 fc74 	bl	157f4 <__aeabi_dsub>
   14f0c:	4652      	mov	r2, sl
   14f0e:	465b      	mov	r3, fp
   14f10:	f000 fe24 	bl	15b5c <__aeabi_dmul>
   14f14:	e9dd 2300 	ldrd	r2, r3, [sp]
   14f18:	4606      	mov	r6, r0
   14f1a:	460f      	mov	r7, r1
   14f1c:	4640      	mov	r0, r8
   14f1e:	4649      	mov	r1, r9
   14f20:	f000 fe1c 	bl	15b5c <__aeabi_dmul>
   14f24:	4602      	mov	r2, r0
   14f26:	460b      	mov	r3, r1
   14f28:	4630      	mov	r0, r6
   14f2a:	4639      	mov	r1, r7
   14f2c:	f000 fc64 	bl	157f8 <__adddf3>
   14f30:	4622      	mov	r2, r4
   14f32:	4680      	mov	r8, r0
   14f34:	4689      	mov	r9, r1
   14f36:	462b      	mov	r3, r5
   14f38:	4650      	mov	r0, sl
   14f3a:	4659      	mov	r1, fp
   14f3c:	e9cd 8900 	strd	r8, r9, [sp]
   14f40:	f000 fe0c 	bl	15b5c <__aeabi_dmul>
   14f44:	460b      	mov	r3, r1
   14f46:	4602      	mov	r2, r0
   14f48:	4606      	mov	r6, r0
   14f4a:	460f      	mov	r7, r1
   14f4c:	4640      	mov	r0, r8
   14f4e:	4649      	mov	r1, r9
   14f50:	f000 fc52 	bl	157f8 <__adddf3>
   14f54:	4bc0      	ldr	r3, [pc, #768]	; (15258 <__ieee754_pow+0x8b8>)
   14f56:	4299      	cmp	r1, r3
   14f58:	4604      	mov	r4, r0
   14f5a:	460d      	mov	r5, r1
   14f5c:	468a      	mov	sl, r1
   14f5e:	f340 8116 	ble.w	1518e <__ieee754_pow+0x7ee>
   14f62:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   14f66:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   14f6a:	4303      	orrs	r3, r0
   14f6c:	f040 81ea 	bne.w	15344 <__ieee754_pow+0x9a4>
   14f70:	a3a3      	add	r3, pc, #652	; (adr r3, 15200 <__ieee754_pow+0x860>)
   14f72:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f76:	e9dd 0100 	ldrd	r0, r1, [sp]
   14f7a:	f000 fc3d 	bl	157f8 <__adddf3>
   14f7e:	4632      	mov	r2, r6
   14f80:	4680      	mov	r8, r0
   14f82:	4689      	mov	r9, r1
   14f84:	463b      	mov	r3, r7
   14f86:	4620      	mov	r0, r4
   14f88:	4629      	mov	r1, r5
   14f8a:	f000 fc33 	bl	157f4 <__aeabi_dsub>
   14f8e:	4602      	mov	r2, r0
   14f90:	460b      	mov	r3, r1
   14f92:	4640      	mov	r0, r8
   14f94:	4649      	mov	r1, r9
   14f96:	f001 f871 	bl	1607c <__aeabi_dcmpgt>
   14f9a:	2800      	cmp	r0, #0
   14f9c:	f040 81d2 	bne.w	15344 <__ieee754_pow+0x9a4>
   14fa0:	46a8      	mov	r8, r5
   14fa2:	ea4f 5328 	mov.w	r3, r8, asr #20
   14fa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   14faa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   14fae:	fa42 f303 	asr.w	r3, r2, r3
   14fb2:	4453      	add	r3, sl
   14fb4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   14fb8:	4da8      	ldr	r5, [pc, #672]	; (1525c <__ieee754_pow+0x8bc>)
   14fba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   14fbe:	4115      	asrs	r5, r2
   14fc0:	f3c3 0413 	ubfx	r4, r3, #0, #20
   14fc4:	ea23 0105 	bic.w	r1, r3, r5
   14fc8:	2000      	movs	r0, #0
   14fca:	f1c2 0b14 	rsb	fp, r2, #20
   14fce:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   14fd2:	f1ba 0f00 	cmp.w	sl, #0
   14fd6:	4602      	mov	r2, r0
   14fd8:	460b      	mov	r3, r1
   14fda:	fa44 fb0b 	asr.w	fp, r4, fp
   14fde:	4630      	mov	r0, r6
   14fe0:	4639      	mov	r1, r7
   14fe2:	bfb8      	it	lt
   14fe4:	f1cb 0b00 	rsblt	fp, fp, #0
   14fe8:	f000 fc04 	bl	157f4 <__aeabi_dsub>
   14fec:	4602      	mov	r2, r0
   14fee:	460b      	mov	r3, r1
   14ff0:	4606      	mov	r6, r0
   14ff2:	460f      	mov	r7, r1
   14ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
   14ff8:	f000 fbfe 	bl	157f8 <__adddf3>
   14ffc:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   15000:	460d      	mov	r5, r1
   15002:	2400      	movs	r4, #0
   15004:	a380      	add	r3, pc, #512	; (adr r3, 15208 <__ieee754_pow+0x868>)
   15006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1500a:	4620      	mov	r0, r4
   1500c:	4629      	mov	r1, r5
   1500e:	f000 fda5 	bl	15b5c <__aeabi_dmul>
   15012:	4632      	mov	r2, r6
   15014:	4680      	mov	r8, r0
   15016:	4689      	mov	r9, r1
   15018:	463b      	mov	r3, r7
   1501a:	4620      	mov	r0, r4
   1501c:	4629      	mov	r1, r5
   1501e:	f000 fbe9 	bl	157f4 <__aeabi_dsub>
   15022:	4602      	mov	r2, r0
   15024:	460b      	mov	r3, r1
   15026:	e9dd 0100 	ldrd	r0, r1, [sp]
   1502a:	f000 fbe3 	bl	157f4 <__aeabi_dsub>
   1502e:	a378      	add	r3, pc, #480	; (adr r3, 15210 <__ieee754_pow+0x870>)
   15030:	e9d3 2300 	ldrd	r2, r3, [r3]
   15034:	f000 fd92 	bl	15b5c <__aeabi_dmul>
   15038:	a377      	add	r3, pc, #476	; (adr r3, 15218 <__ieee754_pow+0x878>)
   1503a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1503e:	4606      	mov	r6, r0
   15040:	460f      	mov	r7, r1
   15042:	4620      	mov	r0, r4
   15044:	4629      	mov	r1, r5
   15046:	f000 fd89 	bl	15b5c <__aeabi_dmul>
   1504a:	4602      	mov	r2, r0
   1504c:	460b      	mov	r3, r1
   1504e:	4630      	mov	r0, r6
   15050:	4639      	mov	r1, r7
   15052:	f000 fbd1 	bl	157f8 <__adddf3>
   15056:	4606      	mov	r6, r0
   15058:	460f      	mov	r7, r1
   1505a:	4602      	mov	r2, r0
   1505c:	460b      	mov	r3, r1
   1505e:	4640      	mov	r0, r8
   15060:	4649      	mov	r1, r9
   15062:	f000 fbc9 	bl	157f8 <__adddf3>
   15066:	4642      	mov	r2, r8
   15068:	464b      	mov	r3, r9
   1506a:	4604      	mov	r4, r0
   1506c:	460d      	mov	r5, r1
   1506e:	f000 fbc1 	bl	157f4 <__aeabi_dsub>
   15072:	4602      	mov	r2, r0
   15074:	460b      	mov	r3, r1
   15076:	4630      	mov	r0, r6
   15078:	4639      	mov	r1, r7
   1507a:	f000 fbbb 	bl	157f4 <__aeabi_dsub>
   1507e:	4622      	mov	r2, r4
   15080:	4680      	mov	r8, r0
   15082:	4689      	mov	r9, r1
   15084:	462b      	mov	r3, r5
   15086:	4620      	mov	r0, r4
   15088:	4629      	mov	r1, r5
   1508a:	f000 fd67 	bl	15b5c <__aeabi_dmul>
   1508e:	a364      	add	r3, pc, #400	; (adr r3, 15220 <__ieee754_pow+0x880>)
   15090:	e9d3 2300 	ldrd	r2, r3, [r3]
   15094:	4606      	mov	r6, r0
   15096:	460f      	mov	r7, r1
   15098:	f000 fd60 	bl	15b5c <__aeabi_dmul>
   1509c:	a362      	add	r3, pc, #392	; (adr r3, 15228 <__ieee754_pow+0x888>)
   1509e:	e9d3 2300 	ldrd	r2, r3, [r3]
   150a2:	f000 fba7 	bl	157f4 <__aeabi_dsub>
   150a6:	4632      	mov	r2, r6
   150a8:	463b      	mov	r3, r7
   150aa:	f000 fd57 	bl	15b5c <__aeabi_dmul>
   150ae:	a360      	add	r3, pc, #384	; (adr r3, 15230 <__ieee754_pow+0x890>)
   150b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   150b4:	f000 fba0 	bl	157f8 <__adddf3>
   150b8:	4632      	mov	r2, r6
   150ba:	463b      	mov	r3, r7
   150bc:	f000 fd4e 	bl	15b5c <__aeabi_dmul>
   150c0:	a35d      	add	r3, pc, #372	; (adr r3, 15238 <__ieee754_pow+0x898>)
   150c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   150c6:	f000 fb95 	bl	157f4 <__aeabi_dsub>
   150ca:	4632      	mov	r2, r6
   150cc:	463b      	mov	r3, r7
   150ce:	f000 fd45 	bl	15b5c <__aeabi_dmul>
   150d2:	a35b      	add	r3, pc, #364	; (adr r3, 15240 <__ieee754_pow+0x8a0>)
   150d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   150d8:	f000 fb8e 	bl	157f8 <__adddf3>
   150dc:	4632      	mov	r2, r6
   150de:	463b      	mov	r3, r7
   150e0:	f000 fd3c 	bl	15b5c <__aeabi_dmul>
   150e4:	4602      	mov	r2, r0
   150e6:	460b      	mov	r3, r1
   150e8:	4620      	mov	r0, r4
   150ea:	4629      	mov	r1, r5
   150ec:	f000 fb82 	bl	157f4 <__aeabi_dsub>
   150f0:	4606      	mov	r6, r0
   150f2:	460f      	mov	r7, r1
   150f4:	4602      	mov	r2, r0
   150f6:	460b      	mov	r3, r1
   150f8:	4620      	mov	r0, r4
   150fa:	4629      	mov	r1, r5
   150fc:	f000 fd2e 	bl	15b5c <__aeabi_dmul>
   15100:	2200      	movs	r2, #0
   15102:	e9cd 0100 	strd	r0, r1, [sp]
   15106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1510a:	4630      	mov	r0, r6
   1510c:	4639      	mov	r1, r7
   1510e:	f000 fb71 	bl	157f4 <__aeabi_dsub>
   15112:	4602      	mov	r2, r0
   15114:	460b      	mov	r3, r1
   15116:	e9dd 0100 	ldrd	r0, r1, [sp]
   1511a:	f000 fe49 	bl	15db0 <__aeabi_ddiv>
   1511e:	4642      	mov	r2, r8
   15120:	4606      	mov	r6, r0
   15122:	460f      	mov	r7, r1
   15124:	464b      	mov	r3, r9
   15126:	4620      	mov	r0, r4
   15128:	4629      	mov	r1, r5
   1512a:	f000 fd17 	bl	15b5c <__aeabi_dmul>
   1512e:	4642      	mov	r2, r8
   15130:	464b      	mov	r3, r9
   15132:	f000 fb61 	bl	157f8 <__adddf3>
   15136:	4602      	mov	r2, r0
   15138:	460b      	mov	r3, r1
   1513a:	4630      	mov	r0, r6
   1513c:	4639      	mov	r1, r7
   1513e:	f000 fb59 	bl	157f4 <__aeabi_dsub>
   15142:	4622      	mov	r2, r4
   15144:	462b      	mov	r3, r5
   15146:	f000 fb55 	bl	157f4 <__aeabi_dsub>
   1514a:	4602      	mov	r2, r0
   1514c:	460b      	mov	r3, r1
   1514e:	2000      	movs	r0, #0
   15150:	493f      	ldr	r1, [pc, #252]	; (15250 <__ieee754_pow+0x8b0>)
   15152:	f000 fb4f 	bl	157f4 <__aeabi_dsub>
   15156:	448a      	add	sl, r1
   15158:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1515c:	f2c0 8133 	blt.w	153c6 <__ieee754_pow+0xa26>
   15160:	4651      	mov	r1, sl
   15162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15166:	f000 fcf9 	bl	15b5c <__aeabi_dmul>
   1516a:	e45b      	b.n	14a24 <__ieee754_pow+0x84>
   1516c:	4642      	mov	r2, r8
   1516e:	4640      	mov	r0, r8
   15170:	464b      	mov	r3, r9
   15172:	4649      	mov	r1, r9
   15174:	f000 fcf2 	bl	15b5c <__aeabi_dmul>
   15178:	e454      	b.n	14a24 <__ieee754_pow+0x84>
   1517a:	f1ba 0f00 	cmp.w	sl, #0
   1517e:	f6bf ace0 	bge.w	14b42 <__ieee754_pow+0x1a2>
   15182:	e9dd 3400 	ldrd	r3, r4, [sp]
   15186:	4618      	mov	r0, r3
   15188:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1518c:	e44a      	b.n	14a24 <__ieee754_pow+0x84>
   1518e:	4b34      	ldr	r3, [pc, #208]	; (15260 <__ieee754_pow+0x8c0>)
   15190:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   15194:	4598      	cmp	r8, r3
   15196:	f340 80f2 	ble.w	1537e <__ieee754_pow+0x9de>
   1519a:	4b32      	ldr	r3, [pc, #200]	; (15264 <__ieee754_pow+0x8c4>)
   1519c:	440b      	add	r3, r1
   1519e:	4303      	orrs	r3, r0
   151a0:	d10c      	bne.n	151bc <__ieee754_pow+0x81c>
   151a2:	4632      	mov	r2, r6
   151a4:	463b      	mov	r3, r7
   151a6:	f000 fb25 	bl	157f4 <__aeabi_dsub>
   151aa:	4602      	mov	r2, r0
   151ac:	460b      	mov	r3, r1
   151ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   151b2:	f000 ff4f 	bl	16054 <__aeabi_dcmple>
   151b6:	2800      	cmp	r0, #0
   151b8:	f43f aef3 	beq.w	14fa2 <__ieee754_pow+0x602>
   151bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   151c0:	a321      	add	r3, pc, #132	; (adr r3, 15248 <__ieee754_pow+0x8a8>)
   151c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   151c6:	f000 fcc9 	bl	15b5c <__aeabi_dmul>
   151ca:	a31f      	add	r3, pc, #124	; (adr r3, 15248 <__ieee754_pow+0x8a8>)
   151cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   151d0:	f000 fcc4 	bl	15b5c <__aeabi_dmul>
   151d4:	e426      	b.n	14a24 <__ieee754_pow+0x84>
   151d6:	4602      	mov	r2, r0
   151d8:	460b      	mov	r3, r1
   151da:	2000      	movs	r0, #0
   151dc:	491c      	ldr	r1, [pc, #112]	; (15250 <__ieee754_pow+0x8b0>)
   151de:	f000 fde7 	bl	15db0 <__aeabi_ddiv>
   151e2:	e43c      	b.n	14a5e <__ieee754_pow+0xbe>
   151e4:	2200      	movs	r2, #0
   151e6:	2300      	movs	r3, #0
   151e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   151ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   151f0:	4b17      	ldr	r3, [pc, #92]	; (15250 <__ieee754_pow+0x8b0>)
   151f2:	2200      	movs	r2, #0
   151f4:	2700      	movs	r7, #0
   151f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   151fa:	e4e6      	b.n	14bca <__ieee754_pow+0x22a>
   151fc:	f3af 8000 	nop.w
   15200:	652b82fe 	.word	0x652b82fe
   15204:	3c971547 	.word	0x3c971547
   15208:	00000000 	.word	0x00000000
   1520c:	3fe62e43 	.word	0x3fe62e43
   15210:	fefa39ef 	.word	0xfefa39ef
   15214:	3fe62e42 	.word	0x3fe62e42
   15218:	0ca86c39 	.word	0x0ca86c39
   1521c:	be205c61 	.word	0xbe205c61
   15220:	72bea4d0 	.word	0x72bea4d0
   15224:	3e663769 	.word	0x3e663769
   15228:	c5d26bf1 	.word	0xc5d26bf1
   1522c:	3ebbbd41 	.word	0x3ebbbd41
   15230:	af25de2c 	.word	0xaf25de2c
   15234:	3f11566a 	.word	0x3f11566a
   15238:	16bebd93 	.word	0x16bebd93
   1523c:	3f66c16c 	.word	0x3f66c16c
   15240:	5555553e 	.word	0x5555553e
   15244:	3fc55555 	.word	0x3fc55555
   15248:	c2f8f359 	.word	0xc2f8f359
   1524c:	01a56e1f 	.word	0x01a56e1f
   15250:	3ff00000 	.word	0x3ff00000
   15254:	bff00000 	.word	0xbff00000
   15258:	408fffff 	.word	0x408fffff
   1525c:	000fffff 	.word	0x000fffff
   15260:	4090cbff 	.word	0x4090cbff
   15264:	3f6f3400 	.word	0x3f6f3400
   15268:	4b6b      	ldr	r3, [pc, #428]	; (15418 <__ieee754_pow+0xa78>)
   1526a:	429e      	cmp	r6, r3
   1526c:	f77f ac66 	ble.w	14b3c <__ieee754_pow+0x19c>
   15270:	4b6a      	ldr	r3, [pc, #424]	; (1541c <__ieee754_pow+0xa7c>)
   15272:	429e      	cmp	r6, r3
   15274:	f73f ac13 	bgt.w	14a9e <__ieee754_pow+0xfe>
   15278:	2200      	movs	r2, #0
   1527a:	4b68      	ldr	r3, [pc, #416]	; (1541c <__ieee754_pow+0xa7c>)
   1527c:	f000 faba 	bl	157f4 <__aeabi_dsub>
   15280:	a357      	add	r3, pc, #348	; (adr r3, 153e0 <__ieee754_pow+0xa40>)
   15282:	e9d3 2300 	ldrd	r2, r3, [r3]
   15286:	4606      	mov	r6, r0
   15288:	460f      	mov	r7, r1
   1528a:	f000 fc67 	bl	15b5c <__aeabi_dmul>
   1528e:	a356      	add	r3, pc, #344	; (adr r3, 153e8 <__ieee754_pow+0xa48>)
   15290:	e9d3 2300 	ldrd	r2, r3, [r3]
   15294:	4680      	mov	r8, r0
   15296:	4689      	mov	r9, r1
   15298:	4630      	mov	r0, r6
   1529a:	4639      	mov	r1, r7
   1529c:	f000 fc5e 	bl	15b5c <__aeabi_dmul>
   152a0:	2200      	movs	r2, #0
   152a2:	4682      	mov	sl, r0
   152a4:	468b      	mov	fp, r1
   152a6:	4b5e      	ldr	r3, [pc, #376]	; (15420 <__ieee754_pow+0xa80>)
   152a8:	4630      	mov	r0, r6
   152aa:	4639      	mov	r1, r7
   152ac:	f000 fc56 	bl	15b5c <__aeabi_dmul>
   152b0:	4602      	mov	r2, r0
   152b2:	460b      	mov	r3, r1
   152b4:	a14e      	add	r1, pc, #312	; (adr r1, 153f0 <__ieee754_pow+0xa50>)
   152b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   152ba:	f000 fa9b 	bl	157f4 <__aeabi_dsub>
   152be:	4632      	mov	r2, r6
   152c0:	463b      	mov	r3, r7
   152c2:	f000 fc4b 	bl	15b5c <__aeabi_dmul>
   152c6:	4602      	mov	r2, r0
   152c8:	460b      	mov	r3, r1
   152ca:	2000      	movs	r0, #0
   152cc:	4955      	ldr	r1, [pc, #340]	; (15424 <__ieee754_pow+0xa84>)
   152ce:	f000 fa91 	bl	157f4 <__aeabi_dsub>
   152d2:	4632      	mov	r2, r6
   152d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   152d8:	463b      	mov	r3, r7
   152da:	4630      	mov	r0, r6
   152dc:	4639      	mov	r1, r7
   152de:	f000 fc3d 	bl	15b5c <__aeabi_dmul>
   152e2:	4602      	mov	r2, r0
   152e4:	460b      	mov	r3, r1
   152e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   152ea:	f000 fc37 	bl	15b5c <__aeabi_dmul>
   152ee:	a342      	add	r3, pc, #264	; (adr r3, 153f8 <__ieee754_pow+0xa58>)
   152f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   152f4:	f000 fc32 	bl	15b5c <__aeabi_dmul>
   152f8:	4602      	mov	r2, r0
   152fa:	460b      	mov	r3, r1
   152fc:	4650      	mov	r0, sl
   152fe:	4659      	mov	r1, fp
   15300:	f000 fa78 	bl	157f4 <__aeabi_dsub>
   15304:	4602      	mov	r2, r0
   15306:	460b      	mov	r3, r1
   15308:	4606      	mov	r6, r0
   1530a:	460f      	mov	r7, r1
   1530c:	4640      	mov	r0, r8
   1530e:	4649      	mov	r1, r9
   15310:	f000 fa72 	bl	157f8 <__adddf3>
   15314:	4642      	mov	r2, r8
   15316:	464b      	mov	r3, r9
   15318:	2000      	movs	r0, #0
   1531a:	4682      	mov	sl, r0
   1531c:	468b      	mov	fp, r1
   1531e:	f000 fa69 	bl	157f4 <__aeabi_dsub>
   15322:	4602      	mov	r2, r0
   15324:	460b      	mov	r3, r1
   15326:	4630      	mov	r0, r6
   15328:	4639      	mov	r1, r7
   1532a:	f000 fa63 	bl	157f4 <__aeabi_dsub>
   1532e:	4680      	mov	r8, r0
   15330:	4689      	mov	r9, r1
   15332:	e5d4      	b.n	14ede <__ieee754_pow+0x53e>
   15334:	4642      	mov	r2, r8
   15336:	464b      	mov	r3, r9
   15338:	2000      	movs	r0, #0
   1533a:	4938      	ldr	r1, [pc, #224]	; (1541c <__ieee754_pow+0xa7c>)
   1533c:	f000 fd38 	bl	15db0 <__aeabi_ddiv>
   15340:	f7ff bb70 	b.w	14a24 <__ieee754_pow+0x84>
   15344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   15348:	a32d      	add	r3, pc, #180	; (adr r3, 15400 <__ieee754_pow+0xa60>)
   1534a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1534e:	f000 fc05 	bl	15b5c <__aeabi_dmul>
   15352:	a32b      	add	r3, pc, #172	; (adr r3, 15400 <__ieee754_pow+0xa60>)
   15354:	e9d3 2300 	ldrd	r2, r3, [r3]
   15358:	f000 fc00 	bl	15b5c <__aeabi_dmul>
   1535c:	f7ff bb62 	b.w	14a24 <__ieee754_pow+0x84>
   15360:	f1be 0f00 	cmp.w	lr, #0
   15364:	f47f ab69 	bne.w	14a3a <__ieee754_pow+0x9a>
   15368:	f1c3 0314 	rsb	r3, r3, #20
   1536c:	fa47 f203 	asr.w	r2, r7, r3
   15370:	fa02 f303 	lsl.w	r3, r2, r3
   15374:	429f      	cmp	r7, r3
   15376:	d02a      	beq.n	153ce <__ieee754_pow+0xa2e>
   15378:	4674      	mov	r4, lr
   1537a:	f7ff bb36 	b.w	149ea <__ieee754_pow+0x4a>
   1537e:	4b29      	ldr	r3, [pc, #164]	; (15424 <__ieee754_pow+0xa84>)
   15380:	4598      	cmp	r8, r3
   15382:	f73f ae0e 	bgt.w	14fa2 <__ieee754_pow+0x602>
   15386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1538a:	4692      	mov	sl, r2
   1538c:	4693      	mov	fp, r2
   1538e:	e638      	b.n	15002 <__ieee754_pow+0x662>
   15390:	4602      	mov	r2, r0
   15392:	460b      	mov	r3, r1
   15394:	f000 fa2e 	bl	157f4 <__aeabi_dsub>
   15398:	4602      	mov	r2, r0
   1539a:	460b      	mov	r3, r1
   1539c:	f000 fd08 	bl	15db0 <__aeabi_ddiv>
   153a0:	f7ff bb40 	b.w	14a24 <__ieee754_pow+0x84>
   153a4:	a318      	add	r3, pc, #96	; (adr r3, 15408 <__ieee754_pow+0xa68>)
   153a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   153aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
   153ae:	a318      	add	r3, pc, #96	; (adr r3, 15410 <__ieee754_pow+0xa70>)
   153b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   153b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   153b8:	4b1b      	ldr	r3, [pc, #108]	; (15428 <__ieee754_pow+0xa88>)
   153ba:	2200      	movs	r2, #0
   153bc:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   153c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   153c4:	e401      	b.n	14bca <__ieee754_pow+0x22a>
   153c6:	465a      	mov	r2, fp
   153c8:	f000 f98a 	bl	156e0 <scalbn>
   153cc:	e6c9      	b.n	15162 <__ieee754_pow+0x7c2>
   153ce:	f002 0201 	and.w	r2, r2, #1
   153d2:	f1c2 0402 	rsb	r4, r2, #2
   153d6:	f7ff bb08 	b.w	149ea <__ieee754_pow+0x4a>
   153da:	bf00      	nop
   153dc:	f3af 8000 	nop.w
   153e0:	60000000 	.word	0x60000000
   153e4:	3ff71547 	.word	0x3ff71547
   153e8:	f85ddf44 	.word	0xf85ddf44
   153ec:	3e54ae0b 	.word	0x3e54ae0b
   153f0:	55555555 	.word	0x55555555
   153f4:	3fd55555 	.word	0x3fd55555
   153f8:	652b82fe 	.word	0x652b82fe
   153fc:	3ff71547 	.word	0x3ff71547
   15400:	8800759c 	.word	0x8800759c
   15404:	7e37e43c 	.word	0x7e37e43c
   15408:	40000000 	.word	0x40000000
   1540c:	3fe2b803 	.word	0x3fe2b803
   15410:	43cfd006 	.word	0x43cfd006
   15414:	3e4cfdeb 	.word	0x3e4cfdeb
   15418:	3feffffe 	.word	0x3feffffe
   1541c:	3ff00000 	.word	0x3ff00000
   15420:	3fd00000 	.word	0x3fd00000
   15424:	3fe00000 	.word	0x3fe00000
   15428:	3ff80000 	.word	0x3ff80000

0001542c <__ieee754_sqrt>:
   1542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15430:	4f5b      	ldr	r7, [pc, #364]	; (155a0 <__ieee754_sqrt+0x174>)
   15432:	438f      	bics	r7, r1
   15434:	4605      	mov	r5, r0
   15436:	460c      	mov	r4, r1
   15438:	f000 8092 	beq.w	15560 <__ieee754_sqrt+0x134>
   1543c:	2900      	cmp	r1, #0
   1543e:	460b      	mov	r3, r1
   15440:	4602      	mov	r2, r0
   15442:	dd6f      	ble.n	15524 <__ieee754_sqrt+0xf8>
   15444:	150f      	asrs	r7, r1, #20
   15446:	d07b      	beq.n	15540 <__ieee754_sqrt+0x114>
   15448:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1544c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   15450:	07f8      	lsls	r0, r7, #31
   15452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15456:	d45c      	bmi.n	15512 <__ieee754_sqrt+0xe6>
   15458:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1545c:	2600      	movs	r6, #0
   1545e:	440b      	add	r3, r1
   15460:	107f      	asrs	r7, r7, #1
   15462:	0052      	lsls	r2, r2, #1
   15464:	46b6      	mov	lr, r6
   15466:	2016      	movs	r0, #22
   15468:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1546c:	eb0e 0401 	add.w	r4, lr, r1
   15470:	429c      	cmp	r4, r3
   15472:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   15476:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1547a:	dc03      	bgt.n	15484 <__ieee754_sqrt+0x58>
   1547c:	1b1b      	subs	r3, r3, r4
   1547e:	eb04 0e01 	add.w	lr, r4, r1
   15482:	440e      	add	r6, r1
   15484:	3801      	subs	r0, #1
   15486:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1548a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1548e:	d1ed      	bne.n	1546c <__ieee754_sqrt+0x40>
   15490:	4684      	mov	ip, r0
   15492:	2420      	movs	r4, #32
   15494:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   15498:	e009      	b.n	154ae <__ieee754_sqrt+0x82>
   1549a:	d020      	beq.n	154de <__ieee754_sqrt+0xb2>
   1549c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   154a0:	3c01      	subs	r4, #1
   154a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   154a6:	442b      	add	r3, r5
   154a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   154ac:	d020      	beq.n	154f0 <__ieee754_sqrt+0xc4>
   154ae:	4573      	cmp	r3, lr
   154b0:	eb01 050c 	add.w	r5, r1, ip
   154b4:	ddf1      	ble.n	1549a <__ieee754_sqrt+0x6e>
   154b6:	2d00      	cmp	r5, #0
   154b8:	eb05 0c01 	add.w	ip, r5, r1
   154bc:	db09      	blt.n	154d2 <__ieee754_sqrt+0xa6>
   154be:	46f0      	mov	r8, lr
   154c0:	4295      	cmp	r5, r2
   154c2:	eba3 030e 	sub.w	r3, r3, lr
   154c6:	d900      	bls.n	154ca <__ieee754_sqrt+0x9e>
   154c8:	3b01      	subs	r3, #1
   154ca:	1b52      	subs	r2, r2, r5
   154cc:	4408      	add	r0, r1
   154ce:	46c6      	mov	lr, r8
   154d0:	e7e4      	b.n	1549c <__ieee754_sqrt+0x70>
   154d2:	f1bc 0f00 	cmp.w	ip, #0
   154d6:	dbf2      	blt.n	154be <__ieee754_sqrt+0x92>
   154d8:	f10e 0801 	add.w	r8, lr, #1
   154dc:	e7f0      	b.n	154c0 <__ieee754_sqrt+0x94>
   154de:	4295      	cmp	r5, r2
   154e0:	d8dc      	bhi.n	1549c <__ieee754_sqrt+0x70>
   154e2:	2d00      	cmp	r5, #0
   154e4:	eb05 0c01 	add.w	ip, r5, r1
   154e8:	db44      	blt.n	15574 <__ieee754_sqrt+0x148>
   154ea:	4698      	mov	r8, r3
   154ec:	2300      	movs	r3, #0
   154ee:	e7ec      	b.n	154ca <__ieee754_sqrt+0x9e>
   154f0:	4313      	orrs	r3, r2
   154f2:	d113      	bne.n	1551c <__ieee754_sqrt+0xf0>
   154f4:	0840      	lsrs	r0, r0, #1
   154f6:	1073      	asrs	r3, r6, #1
   154f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   154fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   15500:	07f2      	lsls	r2, r6, #31
   15502:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   15506:	bf48      	it	mi
   15508:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1550c:	4649      	mov	r1, r9
   1550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15512:	005b      	lsls	r3, r3, #1
   15514:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   15518:	0052      	lsls	r2, r2, #1
   1551a:	e79d      	b.n	15458 <__ieee754_sqrt+0x2c>
   1551c:	1c41      	adds	r1, r0, #1
   1551e:	d02d      	beq.n	1557c <__ieee754_sqrt+0x150>
   15520:	3001      	adds	r0, #1
   15522:	e7e7      	b.n	154f4 <__ieee754_sqrt+0xc8>
   15524:	4606      	mov	r6, r0
   15526:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1552a:	433e      	orrs	r6, r7
   1552c:	d0ef      	beq.n	1550e <__ieee754_sqrt+0xe2>
   1552e:	bb69      	cbnz	r1, 1558c <__ieee754_sqrt+0x160>
   15530:	460f      	mov	r7, r1
   15532:	0ad3      	lsrs	r3, r2, #11
   15534:	3f15      	subs	r7, #21
   15536:	0552      	lsls	r2, r2, #21
   15538:	2b00      	cmp	r3, #0
   1553a:	d0fa      	beq.n	15532 <__ieee754_sqrt+0x106>
   1553c:	02de      	lsls	r6, r3, #11
   1553e:	d420      	bmi.n	15582 <__ieee754_sqrt+0x156>
   15540:	2400      	movs	r4, #0
   15542:	e000      	b.n	15546 <__ieee754_sqrt+0x11a>
   15544:	4604      	mov	r4, r0
   15546:	005b      	lsls	r3, r3, #1
   15548:	02dd      	lsls	r5, r3, #11
   1554a:	f104 0001 	add.w	r0, r4, #1
   1554e:	d5f9      	bpl.n	15544 <__ieee754_sqrt+0x118>
   15550:	f1c0 0120 	rsb	r1, r0, #32
   15554:	fa22 f101 	lsr.w	r1, r2, r1
   15558:	430b      	orrs	r3, r1
   1555a:	1b3f      	subs	r7, r7, r4
   1555c:	4082      	lsls	r2, r0
   1555e:	e773      	b.n	15448 <__ieee754_sqrt+0x1c>
   15560:	4602      	mov	r2, r0
   15562:	460b      	mov	r3, r1
   15564:	f000 fafa 	bl	15b5c <__aeabi_dmul>
   15568:	462a      	mov	r2, r5
   1556a:	4623      	mov	r3, r4
   1556c:	f000 f944 	bl	157f8 <__adddf3>
   15570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15574:	f1bc 0f00 	cmp.w	ip, #0
   15578:	daae      	bge.n	154d8 <__ieee754_sqrt+0xac>
   1557a:	e7b6      	b.n	154ea <__ieee754_sqrt+0xbe>
   1557c:	3601      	adds	r6, #1
   1557e:	4620      	mov	r0, r4
   15580:	e7b9      	b.n	154f6 <__ieee754_sqrt+0xca>
   15582:	2000      	movs	r0, #0
   15584:	2120      	movs	r1, #32
   15586:	f04f 34ff 	mov.w	r4, #4294967295
   1558a:	e7e3      	b.n	15554 <__ieee754_sqrt+0x128>
   1558c:	4602      	mov	r2, r0
   1558e:	460b      	mov	r3, r1
   15590:	f000 f930 	bl	157f4 <__aeabi_dsub>
   15594:	4602      	mov	r2, r0
   15596:	460b      	mov	r3, r1
   15598:	f000 fc0a 	bl	15db0 <__aeabi_ddiv>
   1559c:	e7b7      	b.n	1550e <__ieee754_sqrt+0xe2>
   1559e:	bf00      	nop
   155a0:	7ff00000 	.word	0x7ff00000

000155a4 <fabs>:
   155a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   155a8:	4770      	bx	lr
   155aa:	bf00      	nop

000155ac <finite>:
   155ac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   155b0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   155b4:	0fc0      	lsrs	r0, r0, #31
   155b6:	4770      	bx	lr

000155b8 <matherr>:
   155b8:	2000      	movs	r0, #0
   155ba:	4770      	bx	lr

000155bc <nan>:
   155bc:	2000      	movs	r0, #0
   155be:	4901      	ldr	r1, [pc, #4]	; (155c4 <nan+0x8>)
   155c0:	4770      	bx	lr
   155c2:	bf00      	nop
   155c4:	7ff80000 	.word	0x7ff80000

000155c8 <rint>:
   155c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   155ca:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   155ce:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   155d2:	2e13      	cmp	r6, #19
   155d4:	b083      	sub	sp, #12
   155d6:	4602      	mov	r2, r0
   155d8:	460b      	mov	r3, r1
   155da:	460c      	mov	r4, r1
   155dc:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   155e0:	4607      	mov	r7, r0
   155e2:	dc2e      	bgt.n	15642 <rint+0x7a>
   155e4:	2e00      	cmp	r6, #0
   155e6:	db49      	blt.n	1567c <rint+0xb4>
   155e8:	493a      	ldr	r1, [pc, #232]	; (156d4 <rint+0x10c>)
   155ea:	4131      	asrs	r1, r6
   155ec:	ea03 0001 	and.w	r0, r3, r1
   155f0:	4310      	orrs	r0, r2
   155f2:	d02b      	beq.n	1564c <rint+0x84>
   155f4:	0849      	lsrs	r1, r1, #1
   155f6:	400b      	ands	r3, r1
   155f8:	ea53 0702 	orrs.w	r7, r3, r2
   155fc:	d00c      	beq.n	15618 <rint+0x50>
   155fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   15602:	2e13      	cmp	r6, #19
   15604:	ea24 0101 	bic.w	r1, r4, r1
   15608:	fa43 f406 	asr.w	r4, r3, r6
   1560c:	ea44 0401 	orr.w	r4, r4, r1
   15610:	bf0c      	ite	eq
   15612:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   15616:	2700      	movne	r7, #0
   15618:	4b2f      	ldr	r3, [pc, #188]	; (156d8 <rint+0x110>)
   1561a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1561e:	4621      	mov	r1, r4
   15620:	e9d5 4500 	ldrd	r4, r5, [r5]
   15624:	4638      	mov	r0, r7
   15626:	4622      	mov	r2, r4
   15628:	462b      	mov	r3, r5
   1562a:	f000 f8e5 	bl	157f8 <__adddf3>
   1562e:	e9cd 0100 	strd	r0, r1, [sp]
   15632:	4622      	mov	r2, r4
   15634:	462b      	mov	r3, r5
   15636:	e9dd 0100 	ldrd	r0, r1, [sp]
   1563a:	f000 f8db 	bl	157f4 <__aeabi_dsub>
   1563e:	b003      	add	sp, #12
   15640:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15642:	2e33      	cmp	r6, #51	; 0x33
   15644:	dd06      	ble.n	15654 <rint+0x8c>
   15646:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1564a:	d040      	beq.n	156ce <rint+0x106>
   1564c:	4610      	mov	r0, r2
   1564e:	4619      	mov	r1, r3
   15650:	b003      	add	sp, #12
   15652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15654:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   15658:	f04f 31ff 	mov.w	r1, #4294967295
   1565c:	fa21 f10e 	lsr.w	r1, r1, lr
   15660:	4208      	tst	r0, r1
   15662:	d0f3      	beq.n	1564c <rint+0x84>
   15664:	0849      	lsrs	r1, r1, #1
   15666:	4208      	tst	r0, r1
   15668:	d0d6      	beq.n	15618 <rint+0x50>
   1566a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1566e:	ea20 0101 	bic.w	r1, r0, r1
   15672:	fa43 fe0e 	asr.w	lr, r3, lr
   15676:	ea4e 0701 	orr.w	r7, lr, r1
   1567a:	e7cd      	b.n	15618 <rint+0x50>
   1567c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15680:	4301      	orrs	r1, r0
   15682:	d0e3      	beq.n	1564c <rint+0x84>
   15684:	f3c3 0113 	ubfx	r1, r3, #0, #20
   15688:	4e13      	ldr	r6, [pc, #76]	; (156d8 <rint+0x110>)
   1568a:	4301      	orrs	r1, r0
   1568c:	f1c1 0c00 	rsb	ip, r1, #0
   15690:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   15694:	e9d6 6700 	ldrd	r6, r7, [r6]
   15698:	ea4c 0c01 	orr.w	ip, ip, r1
   1569c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   156a0:	0c5c      	lsrs	r4, r3, #17
   156a2:	0464      	lsls	r4, r4, #17
   156a4:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   156a8:	ea43 0104 	orr.w	r1, r3, r4
   156ac:	4632      	mov	r2, r6
   156ae:	463b      	mov	r3, r7
   156b0:	f000 f8a2 	bl	157f8 <__adddf3>
   156b4:	e9cd 0100 	strd	r0, r1, [sp]
   156b8:	4632      	mov	r2, r6
   156ba:	463b      	mov	r3, r7
   156bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   156c0:	f000 f898 	bl	157f4 <__aeabi_dsub>
   156c4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   156c8:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   156cc:	e7c0      	b.n	15650 <rint+0x88>
   156ce:	f000 f893 	bl	157f8 <__adddf3>
   156d2:	e7bd      	b.n	15650 <rint+0x88>
   156d4:	000fffff 	.word	0x000fffff
   156d8:	0001c038 	.word	0x0001c038
   156dc:	00000000 	.word	0x00000000

000156e0 <scalbn>:
   156e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
   156e6:	4604      	mov	r4, r0
   156e8:	460d      	mov	r5, r1
   156ea:	460b      	mov	r3, r1
   156ec:	4617      	mov	r7, r2
   156ee:	bb0e      	cbnz	r6, 15734 <scalbn+0x54>
   156f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   156f4:	4303      	orrs	r3, r0
   156f6:	4686      	mov	lr, r0
   156f8:	d025      	beq.n	15746 <scalbn+0x66>
   156fa:	2200      	movs	r2, #0
   156fc:	4b34      	ldr	r3, [pc, #208]	; (157d0 <scalbn+0xf0>)
   156fe:	f000 fa2d 	bl	15b5c <__aeabi_dmul>
   15702:	4a34      	ldr	r2, [pc, #208]	; (157d4 <scalbn+0xf4>)
   15704:	4297      	cmp	r7, r2
   15706:	4604      	mov	r4, r0
   15708:	460d      	mov	r5, r1
   1570a:	460b      	mov	r3, r1
   1570c:	db2a      	blt.n	15764 <scalbn+0x84>
   1570e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   15712:	3e36      	subs	r6, #54	; 0x36
   15714:	443e      	add	r6, r7
   15716:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1571a:	4296      	cmp	r6, r2
   1571c:	dc28      	bgt.n	15770 <scalbn+0x90>
   1571e:	2e00      	cmp	r6, #0
   15720:	dd12      	ble.n	15748 <scalbn+0x68>
   15722:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   15726:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1572a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1572e:	4620      	mov	r0, r4
   15730:	4629      	mov	r1, r5
   15732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15734:	f240 72ff 	movw	r2, #2047	; 0x7ff
   15738:	4296      	cmp	r6, r2
   1573a:	d1eb      	bne.n	15714 <scalbn+0x34>
   1573c:	4602      	mov	r2, r0
   1573e:	460b      	mov	r3, r1
   15740:	f000 f85a 	bl	157f8 <__adddf3>
   15744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15748:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1574c:	da1d      	bge.n	1578a <scalbn+0xaa>
   1574e:	f24c 3350 	movw	r3, #50000	; 0xc350
   15752:	429f      	cmp	r7, r3
   15754:	4622      	mov	r2, r4
   15756:	462b      	mov	r3, r5
   15758:	dc25      	bgt.n	157a6 <scalbn+0xc6>
   1575a:	a119      	add	r1, pc, #100	; (adr r1, 157c0 <scalbn+0xe0>)
   1575c:	e9d1 0100 	ldrd	r0, r1, [r1]
   15760:	f000 f83c 	bl	157dc <copysign>
   15764:	a316      	add	r3, pc, #88	; (adr r3, 157c0 <scalbn+0xe0>)
   15766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1576a:	f000 f9f7 	bl	15b5c <__aeabi_dmul>
   1576e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15770:	4622      	mov	r2, r4
   15772:	462b      	mov	r3, r5
   15774:	a114      	add	r1, pc, #80	; (adr r1, 157c8 <scalbn+0xe8>)
   15776:	e9d1 0100 	ldrd	r0, r1, [r1]
   1577a:	f000 f82f 	bl	157dc <copysign>
   1577e:	a312      	add	r3, pc, #72	; (adr r3, 157c8 <scalbn+0xe8>)
   15780:	e9d3 2300 	ldrd	r2, r3, [r3]
   15784:	f000 f9ea 	bl	15b5c <__aeabi_dmul>
   15788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1578a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1578e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   15792:	3636      	adds	r6, #54	; 0x36
   15794:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   15798:	4620      	mov	r0, r4
   1579a:	4629      	mov	r1, r5
   1579c:	2200      	movs	r2, #0
   1579e:	4b0e      	ldr	r3, [pc, #56]	; (157d8 <scalbn+0xf8>)
   157a0:	f000 f9dc 	bl	15b5c <__aeabi_dmul>
   157a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157a6:	a108      	add	r1, pc, #32	; (adr r1, 157c8 <scalbn+0xe8>)
   157a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   157ac:	f000 f816 	bl	157dc <copysign>
   157b0:	a305      	add	r3, pc, #20	; (adr r3, 157c8 <scalbn+0xe8>)
   157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   157b6:	f000 f9d1 	bl	15b5c <__aeabi_dmul>
   157ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157bc:	f3af 8000 	nop.w
   157c0:	c2f8f359 	.word	0xc2f8f359
   157c4:	01a56e1f 	.word	0x01a56e1f
   157c8:	8800759c 	.word	0x8800759c
   157cc:	7e37e43c 	.word	0x7e37e43c
   157d0:	43500000 	.word	0x43500000
   157d4:	ffff3cb0 	.word	0xffff3cb0
   157d8:	3c900000 	.word	0x3c900000

000157dc <copysign>:
   157dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   157e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   157e4:	ea42 0103 	orr.w	r1, r2, r3
   157e8:	4770      	bx	lr
   157ea:	bf00      	nop

000157ec <__aeabi_drsub>:
   157ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   157f0:	e002      	b.n	157f8 <__adddf3>
   157f2:	bf00      	nop

000157f4 <__aeabi_dsub>:
   157f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000157f8 <__adddf3>:
   157f8:	b530      	push	{r4, r5, lr}
   157fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   157fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   15802:	ea94 0f05 	teq	r4, r5
   15806:	bf08      	it	eq
   15808:	ea90 0f02 	teqeq	r0, r2
   1580c:	bf1f      	itttt	ne
   1580e:	ea54 0c00 	orrsne.w	ip, r4, r0
   15812:	ea55 0c02 	orrsne.w	ip, r5, r2
   15816:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1581a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1581e:	f000 80e2 	beq.w	159e6 <__adddf3+0x1ee>
   15822:	ea4f 5454 	mov.w	r4, r4, lsr #21
   15826:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1582a:	bfb8      	it	lt
   1582c:	426d      	neglt	r5, r5
   1582e:	dd0c      	ble.n	1584a <__adddf3+0x52>
   15830:	442c      	add	r4, r5
   15832:	ea80 0202 	eor.w	r2, r0, r2
   15836:	ea81 0303 	eor.w	r3, r1, r3
   1583a:	ea82 0000 	eor.w	r0, r2, r0
   1583e:	ea83 0101 	eor.w	r1, r3, r1
   15842:	ea80 0202 	eor.w	r2, r0, r2
   15846:	ea81 0303 	eor.w	r3, r1, r3
   1584a:	2d36      	cmp	r5, #54	; 0x36
   1584c:	bf88      	it	hi
   1584e:	bd30      	pophi	{r4, r5, pc}
   15850:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15854:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15858:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1585c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   15860:	d002      	beq.n	15868 <__adddf3+0x70>
   15862:	4240      	negs	r0, r0
   15864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15868:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1586c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15870:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   15874:	d002      	beq.n	1587c <__adddf3+0x84>
   15876:	4252      	negs	r2, r2
   15878:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1587c:	ea94 0f05 	teq	r4, r5
   15880:	f000 80a7 	beq.w	159d2 <__adddf3+0x1da>
   15884:	f1a4 0401 	sub.w	r4, r4, #1
   15888:	f1d5 0e20 	rsbs	lr, r5, #32
   1588c:	db0d      	blt.n	158aa <__adddf3+0xb2>
   1588e:	fa02 fc0e 	lsl.w	ip, r2, lr
   15892:	fa22 f205 	lsr.w	r2, r2, r5
   15896:	1880      	adds	r0, r0, r2
   15898:	f141 0100 	adc.w	r1, r1, #0
   1589c:	fa03 f20e 	lsl.w	r2, r3, lr
   158a0:	1880      	adds	r0, r0, r2
   158a2:	fa43 f305 	asr.w	r3, r3, r5
   158a6:	4159      	adcs	r1, r3
   158a8:	e00e      	b.n	158c8 <__adddf3+0xd0>
   158aa:	f1a5 0520 	sub.w	r5, r5, #32
   158ae:	f10e 0e20 	add.w	lr, lr, #32
   158b2:	2a01      	cmp	r2, #1
   158b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   158b8:	bf28      	it	cs
   158ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   158be:	fa43 f305 	asr.w	r3, r3, r5
   158c2:	18c0      	adds	r0, r0, r3
   158c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   158c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   158cc:	d507      	bpl.n	158de <__adddf3+0xe6>
   158ce:	f04f 0e00 	mov.w	lr, #0
   158d2:	f1dc 0c00 	rsbs	ip, ip, #0
   158d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   158da:	eb6e 0101 	sbc.w	r1, lr, r1
   158de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   158e2:	d31b      	bcc.n	1591c <__adddf3+0x124>
   158e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   158e8:	d30c      	bcc.n	15904 <__adddf3+0x10c>
   158ea:	0849      	lsrs	r1, r1, #1
   158ec:	ea5f 0030 	movs.w	r0, r0, rrx
   158f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   158f4:	f104 0401 	add.w	r4, r4, #1
   158f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   158fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   15900:	f080 809a 	bcs.w	15a38 <__adddf3+0x240>
   15904:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   15908:	bf08      	it	eq
   1590a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1590e:	f150 0000 	adcs.w	r0, r0, #0
   15912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15916:	ea41 0105 	orr.w	r1, r1, r5
   1591a:	bd30      	pop	{r4, r5, pc}
   1591c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15920:	4140      	adcs	r0, r0
   15922:	eb41 0101 	adc.w	r1, r1, r1
   15926:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1592a:	f1a4 0401 	sub.w	r4, r4, #1
   1592e:	d1e9      	bne.n	15904 <__adddf3+0x10c>
   15930:	f091 0f00 	teq	r1, #0
   15934:	bf04      	itt	eq
   15936:	4601      	moveq	r1, r0
   15938:	2000      	moveq	r0, #0
   1593a:	fab1 f381 	clz	r3, r1
   1593e:	bf08      	it	eq
   15940:	3320      	addeq	r3, #32
   15942:	f1a3 030b 	sub.w	r3, r3, #11
   15946:	f1b3 0220 	subs.w	r2, r3, #32
   1594a:	da0c      	bge.n	15966 <__adddf3+0x16e>
   1594c:	320c      	adds	r2, #12
   1594e:	dd08      	ble.n	15962 <__adddf3+0x16a>
   15950:	f102 0c14 	add.w	ip, r2, #20
   15954:	f1c2 020c 	rsb	r2, r2, #12
   15958:	fa01 f00c 	lsl.w	r0, r1, ip
   1595c:	fa21 f102 	lsr.w	r1, r1, r2
   15960:	e00c      	b.n	1597c <__adddf3+0x184>
   15962:	f102 0214 	add.w	r2, r2, #20
   15966:	bfd8      	it	le
   15968:	f1c2 0c20 	rsble	ip, r2, #32
   1596c:	fa01 f102 	lsl.w	r1, r1, r2
   15970:	fa20 fc0c 	lsr.w	ip, r0, ip
   15974:	bfdc      	itt	le
   15976:	ea41 010c 	orrle.w	r1, r1, ip
   1597a:	4090      	lslle	r0, r2
   1597c:	1ae4      	subs	r4, r4, r3
   1597e:	bfa2      	ittt	ge
   15980:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   15984:	4329      	orrge	r1, r5
   15986:	bd30      	popge	{r4, r5, pc}
   15988:	ea6f 0404 	mvn.w	r4, r4
   1598c:	3c1f      	subs	r4, #31
   1598e:	da1c      	bge.n	159ca <__adddf3+0x1d2>
   15990:	340c      	adds	r4, #12
   15992:	dc0e      	bgt.n	159b2 <__adddf3+0x1ba>
   15994:	f104 0414 	add.w	r4, r4, #20
   15998:	f1c4 0220 	rsb	r2, r4, #32
   1599c:	fa20 f004 	lsr.w	r0, r0, r4
   159a0:	fa01 f302 	lsl.w	r3, r1, r2
   159a4:	ea40 0003 	orr.w	r0, r0, r3
   159a8:	fa21 f304 	lsr.w	r3, r1, r4
   159ac:	ea45 0103 	orr.w	r1, r5, r3
   159b0:	bd30      	pop	{r4, r5, pc}
   159b2:	f1c4 040c 	rsb	r4, r4, #12
   159b6:	f1c4 0220 	rsb	r2, r4, #32
   159ba:	fa20 f002 	lsr.w	r0, r0, r2
   159be:	fa01 f304 	lsl.w	r3, r1, r4
   159c2:	ea40 0003 	orr.w	r0, r0, r3
   159c6:	4629      	mov	r1, r5
   159c8:	bd30      	pop	{r4, r5, pc}
   159ca:	fa21 f004 	lsr.w	r0, r1, r4
   159ce:	4629      	mov	r1, r5
   159d0:	bd30      	pop	{r4, r5, pc}
   159d2:	f094 0f00 	teq	r4, #0
   159d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   159da:	bf06      	itte	eq
   159dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   159e0:	3401      	addeq	r4, #1
   159e2:	3d01      	subne	r5, #1
   159e4:	e74e      	b.n	15884 <__adddf3+0x8c>
   159e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   159ea:	bf18      	it	ne
   159ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   159f0:	d029      	beq.n	15a46 <__adddf3+0x24e>
   159f2:	ea94 0f05 	teq	r4, r5
   159f6:	bf08      	it	eq
   159f8:	ea90 0f02 	teqeq	r0, r2
   159fc:	d005      	beq.n	15a0a <__adddf3+0x212>
   159fe:	ea54 0c00 	orrs.w	ip, r4, r0
   15a02:	bf04      	itt	eq
   15a04:	4619      	moveq	r1, r3
   15a06:	4610      	moveq	r0, r2
   15a08:	bd30      	pop	{r4, r5, pc}
   15a0a:	ea91 0f03 	teq	r1, r3
   15a0e:	bf1e      	ittt	ne
   15a10:	2100      	movne	r1, #0
   15a12:	2000      	movne	r0, #0
   15a14:	bd30      	popne	{r4, r5, pc}
   15a16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   15a1a:	d105      	bne.n	15a28 <__adddf3+0x230>
   15a1c:	0040      	lsls	r0, r0, #1
   15a1e:	4149      	adcs	r1, r1
   15a20:	bf28      	it	cs
   15a22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15a26:	bd30      	pop	{r4, r5, pc}
   15a28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   15a2c:	bf3c      	itt	cc
   15a2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15a32:	bd30      	popcc	{r4, r5, pc}
   15a34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15a38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   15a3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15a40:	f04f 0000 	mov.w	r0, #0
   15a44:	bd30      	pop	{r4, r5, pc}
   15a46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15a4a:	bf1a      	itte	ne
   15a4c:	4619      	movne	r1, r3
   15a4e:	4610      	movne	r0, r2
   15a50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   15a54:	bf1c      	itt	ne
   15a56:	460b      	movne	r3, r1
   15a58:	4602      	movne	r2, r0
   15a5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15a5e:	bf06      	itte	eq
   15a60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   15a64:	ea91 0f03 	teqeq	r1, r3
   15a68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   15a6c:	bd30      	pop	{r4, r5, pc}
   15a6e:	bf00      	nop

00015a70 <__aeabi_ui2d>:
   15a70:	f090 0f00 	teq	r0, #0
   15a74:	bf04      	itt	eq
   15a76:	2100      	moveq	r1, #0
   15a78:	4770      	bxeq	lr
   15a7a:	b530      	push	{r4, r5, lr}
   15a7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15a80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15a84:	f04f 0500 	mov.w	r5, #0
   15a88:	f04f 0100 	mov.w	r1, #0
   15a8c:	e750      	b.n	15930 <__adddf3+0x138>
   15a8e:	bf00      	nop

00015a90 <__aeabi_i2d>:
   15a90:	f090 0f00 	teq	r0, #0
   15a94:	bf04      	itt	eq
   15a96:	2100      	moveq	r1, #0
   15a98:	4770      	bxeq	lr
   15a9a:	b530      	push	{r4, r5, lr}
   15a9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15aa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15aa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15aa8:	bf48      	it	mi
   15aaa:	4240      	negmi	r0, r0
   15aac:	f04f 0100 	mov.w	r1, #0
   15ab0:	e73e      	b.n	15930 <__adddf3+0x138>
   15ab2:	bf00      	nop

00015ab4 <__aeabi_f2d>:
   15ab4:	0042      	lsls	r2, r0, #1
   15ab6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   15aba:	ea4f 0131 	mov.w	r1, r1, rrx
   15abe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15ac2:	bf1f      	itttt	ne
   15ac4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   15ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15acc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15ad0:	4770      	bxne	lr
   15ad2:	f092 0f00 	teq	r2, #0
   15ad6:	bf14      	ite	ne
   15ad8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15adc:	4770      	bxeq	lr
   15ade:	b530      	push	{r4, r5, lr}
   15ae0:	f44f 7460 	mov.w	r4, #896	; 0x380
   15ae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15ae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15aec:	e720      	b.n	15930 <__adddf3+0x138>
   15aee:	bf00      	nop

00015af0 <__aeabi_ul2d>:
   15af0:	ea50 0201 	orrs.w	r2, r0, r1
   15af4:	bf08      	it	eq
   15af6:	4770      	bxeq	lr
   15af8:	b530      	push	{r4, r5, lr}
   15afa:	f04f 0500 	mov.w	r5, #0
   15afe:	e00a      	b.n	15b16 <__aeabi_l2d+0x16>

00015b00 <__aeabi_l2d>:
   15b00:	ea50 0201 	orrs.w	r2, r0, r1
   15b04:	bf08      	it	eq
   15b06:	4770      	bxeq	lr
   15b08:	b530      	push	{r4, r5, lr}
   15b0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15b0e:	d502      	bpl.n	15b16 <__aeabi_l2d+0x16>
   15b10:	4240      	negs	r0, r0
   15b12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15b16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15b1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15b1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   15b22:	f43f aedc 	beq.w	158de <__adddf3+0xe6>
   15b26:	f04f 0203 	mov.w	r2, #3
   15b2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15b2e:	bf18      	it	ne
   15b30:	3203      	addne	r2, #3
   15b32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15b36:	bf18      	it	ne
   15b38:	3203      	addne	r2, #3
   15b3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   15b3e:	f1c2 0320 	rsb	r3, r2, #32
   15b42:	fa00 fc03 	lsl.w	ip, r0, r3
   15b46:	fa20 f002 	lsr.w	r0, r0, r2
   15b4a:	fa01 fe03 	lsl.w	lr, r1, r3
   15b4e:	ea40 000e 	orr.w	r0, r0, lr
   15b52:	fa21 f102 	lsr.w	r1, r1, r2
   15b56:	4414      	add	r4, r2
   15b58:	e6c1      	b.n	158de <__adddf3+0xe6>
   15b5a:	bf00      	nop

00015b5c <__aeabi_dmul>:
   15b5c:	b570      	push	{r4, r5, r6, lr}
   15b5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15b62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   15b66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   15b6a:	bf1d      	ittte	ne
   15b6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15b70:	ea94 0f0c 	teqne	r4, ip
   15b74:	ea95 0f0c 	teqne	r5, ip
   15b78:	f000 f8de 	bleq	15d38 <__aeabi_dmul+0x1dc>
   15b7c:	442c      	add	r4, r5
   15b7e:	ea81 0603 	eor.w	r6, r1, r3
   15b82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   15b86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   15b8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   15b8e:	bf18      	it	ne
   15b90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   15b94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15b9c:	d038      	beq.n	15c10 <__aeabi_dmul+0xb4>
   15b9e:	fba0 ce02 	umull	ip, lr, r0, r2
   15ba2:	f04f 0500 	mov.w	r5, #0
   15ba6:	fbe1 e502 	umlal	lr, r5, r1, r2
   15baa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   15bae:	fbe0 e503 	umlal	lr, r5, r0, r3
   15bb2:	f04f 0600 	mov.w	r6, #0
   15bb6:	fbe1 5603 	umlal	r5, r6, r1, r3
   15bba:	f09c 0f00 	teq	ip, #0
   15bbe:	bf18      	it	ne
   15bc0:	f04e 0e01 	orrne.w	lr, lr, #1
   15bc4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   15bc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   15bcc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   15bd0:	d204      	bcs.n	15bdc <__aeabi_dmul+0x80>
   15bd2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   15bd6:	416d      	adcs	r5, r5
   15bd8:	eb46 0606 	adc.w	r6, r6, r6
   15bdc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   15be0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   15be4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   15be8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   15bec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   15bf0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15bf4:	bf88      	it	hi
   15bf6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   15bfa:	d81e      	bhi.n	15c3a <__aeabi_dmul+0xde>
   15bfc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   15c00:	bf08      	it	eq
   15c02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   15c06:	f150 0000 	adcs.w	r0, r0, #0
   15c0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15c0e:	bd70      	pop	{r4, r5, r6, pc}
   15c10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   15c14:	ea46 0101 	orr.w	r1, r6, r1
   15c18:	ea40 0002 	orr.w	r0, r0, r2
   15c1c:	ea81 0103 	eor.w	r1, r1, r3
   15c20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   15c24:	bfc2      	ittt	gt
   15c26:	ebd4 050c 	rsbsgt	r5, r4, ip
   15c2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15c2e:	bd70      	popgt	{r4, r5, r6, pc}
   15c30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15c34:	f04f 0e00 	mov.w	lr, #0
   15c38:	3c01      	subs	r4, #1
   15c3a:	f300 80ab 	bgt.w	15d94 <__aeabi_dmul+0x238>
   15c3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   15c42:	bfde      	ittt	le
   15c44:	2000      	movle	r0, #0
   15c46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   15c4a:	bd70      	pople	{r4, r5, r6, pc}
   15c4c:	f1c4 0400 	rsb	r4, r4, #0
   15c50:	3c20      	subs	r4, #32
   15c52:	da35      	bge.n	15cc0 <__aeabi_dmul+0x164>
   15c54:	340c      	adds	r4, #12
   15c56:	dc1b      	bgt.n	15c90 <__aeabi_dmul+0x134>
   15c58:	f104 0414 	add.w	r4, r4, #20
   15c5c:	f1c4 0520 	rsb	r5, r4, #32
   15c60:	fa00 f305 	lsl.w	r3, r0, r5
   15c64:	fa20 f004 	lsr.w	r0, r0, r4
   15c68:	fa01 f205 	lsl.w	r2, r1, r5
   15c6c:	ea40 0002 	orr.w	r0, r0, r2
   15c70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   15c74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15c78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   15c7c:	fa21 f604 	lsr.w	r6, r1, r4
   15c80:	eb42 0106 	adc.w	r1, r2, r6
   15c84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15c88:	bf08      	it	eq
   15c8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   15c8e:	bd70      	pop	{r4, r5, r6, pc}
   15c90:	f1c4 040c 	rsb	r4, r4, #12
   15c94:	f1c4 0520 	rsb	r5, r4, #32
   15c98:	fa00 f304 	lsl.w	r3, r0, r4
   15c9c:	fa20 f005 	lsr.w	r0, r0, r5
   15ca0:	fa01 f204 	lsl.w	r2, r1, r4
   15ca4:	ea40 0002 	orr.w	r0, r0, r2
   15ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15cac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   15cb0:	f141 0100 	adc.w	r1, r1, #0
   15cb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15cb8:	bf08      	it	eq
   15cba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   15cbe:	bd70      	pop	{r4, r5, r6, pc}
   15cc0:	f1c4 0520 	rsb	r5, r4, #32
   15cc4:	fa00 f205 	lsl.w	r2, r0, r5
   15cc8:	ea4e 0e02 	orr.w	lr, lr, r2
   15ccc:	fa20 f304 	lsr.w	r3, r0, r4
   15cd0:	fa01 f205 	lsl.w	r2, r1, r5
   15cd4:	ea43 0302 	orr.w	r3, r3, r2
   15cd8:	fa21 f004 	lsr.w	r0, r1, r4
   15cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15ce0:	fa21 f204 	lsr.w	r2, r1, r4
   15ce4:	ea20 0002 	bic.w	r0, r0, r2
   15ce8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   15cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15cf0:	bf08      	it	eq
   15cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   15cf6:	bd70      	pop	{r4, r5, r6, pc}
   15cf8:	f094 0f00 	teq	r4, #0
   15cfc:	d10f      	bne.n	15d1e <__aeabi_dmul+0x1c2>
   15cfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   15d02:	0040      	lsls	r0, r0, #1
   15d04:	eb41 0101 	adc.w	r1, r1, r1
   15d08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15d0c:	bf08      	it	eq
   15d0e:	3c01      	subeq	r4, #1
   15d10:	d0f7      	beq.n	15d02 <__aeabi_dmul+0x1a6>
   15d12:	ea41 0106 	orr.w	r1, r1, r6
   15d16:	f095 0f00 	teq	r5, #0
   15d1a:	bf18      	it	ne
   15d1c:	4770      	bxne	lr
   15d1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   15d22:	0052      	lsls	r2, r2, #1
   15d24:	eb43 0303 	adc.w	r3, r3, r3
   15d28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   15d2c:	bf08      	it	eq
   15d2e:	3d01      	subeq	r5, #1
   15d30:	d0f7      	beq.n	15d22 <__aeabi_dmul+0x1c6>
   15d32:	ea43 0306 	orr.w	r3, r3, r6
   15d36:	4770      	bx	lr
   15d38:	ea94 0f0c 	teq	r4, ip
   15d3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   15d40:	bf18      	it	ne
   15d42:	ea95 0f0c 	teqne	r5, ip
   15d46:	d00c      	beq.n	15d62 <__aeabi_dmul+0x206>
   15d48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   15d4c:	bf18      	it	ne
   15d4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   15d52:	d1d1      	bne.n	15cf8 <__aeabi_dmul+0x19c>
   15d54:	ea81 0103 	eor.w	r1, r1, r3
   15d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15d5c:	f04f 0000 	mov.w	r0, #0
   15d60:	bd70      	pop	{r4, r5, r6, pc}
   15d62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   15d66:	bf06      	itte	eq
   15d68:	4610      	moveq	r0, r2
   15d6a:	4619      	moveq	r1, r3
   15d6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   15d70:	d019      	beq.n	15da6 <__aeabi_dmul+0x24a>
   15d72:	ea94 0f0c 	teq	r4, ip
   15d76:	d102      	bne.n	15d7e <__aeabi_dmul+0x222>
   15d78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   15d7c:	d113      	bne.n	15da6 <__aeabi_dmul+0x24a>
   15d7e:	ea95 0f0c 	teq	r5, ip
   15d82:	d105      	bne.n	15d90 <__aeabi_dmul+0x234>
   15d84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   15d88:	bf1c      	itt	ne
   15d8a:	4610      	movne	r0, r2
   15d8c:	4619      	movne	r1, r3
   15d8e:	d10a      	bne.n	15da6 <__aeabi_dmul+0x24a>
   15d90:	ea81 0103 	eor.w	r1, r1, r3
   15d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15d98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15d9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15da0:	f04f 0000 	mov.w	r0, #0
   15da4:	bd70      	pop	{r4, r5, r6, pc}
   15da6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15daa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   15dae:	bd70      	pop	{r4, r5, r6, pc}

00015db0 <__aeabi_ddiv>:
   15db0:	b570      	push	{r4, r5, r6, lr}
   15db2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15db6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   15dba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   15dbe:	bf1d      	ittte	ne
   15dc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15dc4:	ea94 0f0c 	teqne	r4, ip
   15dc8:	ea95 0f0c 	teqne	r5, ip
   15dcc:	f000 f8a7 	bleq	15f1e <__aeabi_ddiv+0x16e>
   15dd0:	eba4 0405 	sub.w	r4, r4, r5
   15dd4:	ea81 0e03 	eor.w	lr, r1, r3
   15dd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   15ddc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15de0:	f000 8088 	beq.w	15ef4 <__aeabi_ddiv+0x144>
   15de4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15de8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   15dec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   15df0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   15df4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   15df8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   15dfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   15e00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   15e04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   15e08:	429d      	cmp	r5, r3
   15e0a:	bf08      	it	eq
   15e0c:	4296      	cmpeq	r6, r2
   15e0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   15e12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   15e16:	d202      	bcs.n	15e1e <__aeabi_ddiv+0x6e>
   15e18:	085b      	lsrs	r3, r3, #1
   15e1a:	ea4f 0232 	mov.w	r2, r2, rrx
   15e1e:	1ab6      	subs	r6, r6, r2
   15e20:	eb65 0503 	sbc.w	r5, r5, r3
   15e24:	085b      	lsrs	r3, r3, #1
   15e26:	ea4f 0232 	mov.w	r2, r2, rrx
   15e2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   15e2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   15e32:	ebb6 0e02 	subs.w	lr, r6, r2
   15e36:	eb75 0e03 	sbcs.w	lr, r5, r3
   15e3a:	bf22      	ittt	cs
   15e3c:	1ab6      	subcs	r6, r6, r2
   15e3e:	4675      	movcs	r5, lr
   15e40:	ea40 000c 	orrcs.w	r0, r0, ip
   15e44:	085b      	lsrs	r3, r3, #1
   15e46:	ea4f 0232 	mov.w	r2, r2, rrx
   15e4a:	ebb6 0e02 	subs.w	lr, r6, r2
   15e4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   15e52:	bf22      	ittt	cs
   15e54:	1ab6      	subcs	r6, r6, r2
   15e56:	4675      	movcs	r5, lr
   15e58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   15e5c:	085b      	lsrs	r3, r3, #1
   15e5e:	ea4f 0232 	mov.w	r2, r2, rrx
   15e62:	ebb6 0e02 	subs.w	lr, r6, r2
   15e66:	eb75 0e03 	sbcs.w	lr, r5, r3
   15e6a:	bf22      	ittt	cs
   15e6c:	1ab6      	subcs	r6, r6, r2
   15e6e:	4675      	movcs	r5, lr
   15e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   15e74:	085b      	lsrs	r3, r3, #1
   15e76:	ea4f 0232 	mov.w	r2, r2, rrx
   15e7a:	ebb6 0e02 	subs.w	lr, r6, r2
   15e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   15e82:	bf22      	ittt	cs
   15e84:	1ab6      	subcs	r6, r6, r2
   15e86:	4675      	movcs	r5, lr
   15e88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   15e8c:	ea55 0e06 	orrs.w	lr, r5, r6
   15e90:	d018      	beq.n	15ec4 <__aeabi_ddiv+0x114>
   15e92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   15e96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   15e9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   15e9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   15ea2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   15ea6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   15eaa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   15eae:	d1c0      	bne.n	15e32 <__aeabi_ddiv+0x82>
   15eb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15eb4:	d10b      	bne.n	15ece <__aeabi_ddiv+0x11e>
   15eb6:	ea41 0100 	orr.w	r1, r1, r0
   15eba:	f04f 0000 	mov.w	r0, #0
   15ebe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   15ec2:	e7b6      	b.n	15e32 <__aeabi_ddiv+0x82>
   15ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15ec8:	bf04      	itt	eq
   15eca:	4301      	orreq	r1, r0
   15ecc:	2000      	moveq	r0, #0
   15ece:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15ed2:	bf88      	it	hi
   15ed4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   15ed8:	f63f aeaf 	bhi.w	15c3a <__aeabi_dmul+0xde>
   15edc:	ebb5 0c03 	subs.w	ip, r5, r3
   15ee0:	bf04      	itt	eq
   15ee2:	ebb6 0c02 	subseq.w	ip, r6, r2
   15ee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15eea:	f150 0000 	adcs.w	r0, r0, #0
   15eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15ef2:	bd70      	pop	{r4, r5, r6, pc}
   15ef4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   15ef8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   15efc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   15f00:	bfc2      	ittt	gt
   15f02:	ebd4 050c 	rsbsgt	r5, r4, ip
   15f06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15f0a:	bd70      	popgt	{r4, r5, r6, pc}
   15f0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15f10:	f04f 0e00 	mov.w	lr, #0
   15f14:	3c01      	subs	r4, #1
   15f16:	e690      	b.n	15c3a <__aeabi_dmul+0xde>
   15f18:	ea45 0e06 	orr.w	lr, r5, r6
   15f1c:	e68d      	b.n	15c3a <__aeabi_dmul+0xde>
   15f1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   15f22:	ea94 0f0c 	teq	r4, ip
   15f26:	bf08      	it	eq
   15f28:	ea95 0f0c 	teqeq	r5, ip
   15f2c:	f43f af3b 	beq.w	15da6 <__aeabi_dmul+0x24a>
   15f30:	ea94 0f0c 	teq	r4, ip
   15f34:	d10a      	bne.n	15f4c <__aeabi_ddiv+0x19c>
   15f36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15f3a:	f47f af34 	bne.w	15da6 <__aeabi_dmul+0x24a>
   15f3e:	ea95 0f0c 	teq	r5, ip
   15f42:	f47f af25 	bne.w	15d90 <__aeabi_dmul+0x234>
   15f46:	4610      	mov	r0, r2
   15f48:	4619      	mov	r1, r3
   15f4a:	e72c      	b.n	15da6 <__aeabi_dmul+0x24a>
   15f4c:	ea95 0f0c 	teq	r5, ip
   15f50:	d106      	bne.n	15f60 <__aeabi_ddiv+0x1b0>
   15f52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   15f56:	f43f aefd 	beq.w	15d54 <__aeabi_dmul+0x1f8>
   15f5a:	4610      	mov	r0, r2
   15f5c:	4619      	mov	r1, r3
   15f5e:	e722      	b.n	15da6 <__aeabi_dmul+0x24a>
   15f60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   15f64:	bf18      	it	ne
   15f66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   15f6a:	f47f aec5 	bne.w	15cf8 <__aeabi_dmul+0x19c>
   15f6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   15f72:	f47f af0d 	bne.w	15d90 <__aeabi_dmul+0x234>
   15f76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   15f7a:	f47f aeeb 	bne.w	15d54 <__aeabi_dmul+0x1f8>
   15f7e:	e712      	b.n	15da6 <__aeabi_dmul+0x24a>

00015f80 <__gedf2>:
   15f80:	f04f 3cff 	mov.w	ip, #4294967295
   15f84:	e006      	b.n	15f94 <__cmpdf2+0x4>
   15f86:	bf00      	nop

00015f88 <__ledf2>:
   15f88:	f04f 0c01 	mov.w	ip, #1
   15f8c:	e002      	b.n	15f94 <__cmpdf2+0x4>
   15f8e:	bf00      	nop

00015f90 <__cmpdf2>:
   15f90:	f04f 0c01 	mov.w	ip, #1
   15f94:	f84d cd04 	str.w	ip, [sp, #-4]!
   15f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   15f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   15fa4:	bf18      	it	ne
   15fa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   15faa:	d01b      	beq.n	15fe4 <__cmpdf2+0x54>
   15fac:	b001      	add	sp, #4
   15fae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   15fb2:	bf0c      	ite	eq
   15fb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   15fb8:	ea91 0f03 	teqne	r1, r3
   15fbc:	bf02      	ittt	eq
   15fbe:	ea90 0f02 	teqeq	r0, r2
   15fc2:	2000      	moveq	r0, #0
   15fc4:	4770      	bxeq	lr
   15fc6:	f110 0f00 	cmn.w	r0, #0
   15fca:	ea91 0f03 	teq	r1, r3
   15fce:	bf58      	it	pl
   15fd0:	4299      	cmppl	r1, r3
   15fd2:	bf08      	it	eq
   15fd4:	4290      	cmpeq	r0, r2
   15fd6:	bf2c      	ite	cs
   15fd8:	17d8      	asrcs	r0, r3, #31
   15fda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   15fde:	f040 0001 	orr.w	r0, r0, #1
   15fe2:	4770      	bx	lr
   15fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   15fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15fec:	d102      	bne.n	15ff4 <__cmpdf2+0x64>
   15fee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   15ff2:	d107      	bne.n	16004 <__cmpdf2+0x74>
   15ff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   15ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15ffc:	d1d6      	bne.n	15fac <__cmpdf2+0x1c>
   15ffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   16002:	d0d3      	beq.n	15fac <__cmpdf2+0x1c>
   16004:	f85d 0b04 	ldr.w	r0, [sp], #4
   16008:	4770      	bx	lr
   1600a:	bf00      	nop

0001600c <__aeabi_cdrcmple>:
   1600c:	4684      	mov	ip, r0
   1600e:	4610      	mov	r0, r2
   16010:	4662      	mov	r2, ip
   16012:	468c      	mov	ip, r1
   16014:	4619      	mov	r1, r3
   16016:	4663      	mov	r3, ip
   16018:	e000      	b.n	1601c <__aeabi_cdcmpeq>
   1601a:	bf00      	nop

0001601c <__aeabi_cdcmpeq>:
   1601c:	b501      	push	{r0, lr}
   1601e:	f7ff ffb7 	bl	15f90 <__cmpdf2>
   16022:	2800      	cmp	r0, #0
   16024:	bf48      	it	mi
   16026:	f110 0f00 	cmnmi.w	r0, #0
   1602a:	bd01      	pop	{r0, pc}

0001602c <__aeabi_dcmpeq>:
   1602c:	f84d ed08 	str.w	lr, [sp, #-8]!
   16030:	f7ff fff4 	bl	1601c <__aeabi_cdcmpeq>
   16034:	bf0c      	ite	eq
   16036:	2001      	moveq	r0, #1
   16038:	2000      	movne	r0, #0
   1603a:	f85d fb08 	ldr.w	pc, [sp], #8
   1603e:	bf00      	nop

00016040 <__aeabi_dcmplt>:
   16040:	f84d ed08 	str.w	lr, [sp, #-8]!
   16044:	f7ff ffea 	bl	1601c <__aeabi_cdcmpeq>
   16048:	bf34      	ite	cc
   1604a:	2001      	movcc	r0, #1
   1604c:	2000      	movcs	r0, #0
   1604e:	f85d fb08 	ldr.w	pc, [sp], #8
   16052:	bf00      	nop

00016054 <__aeabi_dcmple>:
   16054:	f84d ed08 	str.w	lr, [sp, #-8]!
   16058:	f7ff ffe0 	bl	1601c <__aeabi_cdcmpeq>
   1605c:	bf94      	ite	ls
   1605e:	2001      	movls	r0, #1
   16060:	2000      	movhi	r0, #0
   16062:	f85d fb08 	ldr.w	pc, [sp], #8
   16066:	bf00      	nop

00016068 <__aeabi_dcmpge>:
   16068:	f84d ed08 	str.w	lr, [sp, #-8]!
   1606c:	f7ff ffce 	bl	1600c <__aeabi_cdrcmple>
   16070:	bf94      	ite	ls
   16072:	2001      	movls	r0, #1
   16074:	2000      	movhi	r0, #0
   16076:	f85d fb08 	ldr.w	pc, [sp], #8
   1607a:	bf00      	nop

0001607c <__aeabi_dcmpgt>:
   1607c:	f84d ed08 	str.w	lr, [sp, #-8]!
   16080:	f7ff ffc4 	bl	1600c <__aeabi_cdrcmple>
   16084:	bf34      	ite	cc
   16086:	2001      	movcc	r0, #1
   16088:	2000      	movcs	r0, #0
   1608a:	f85d fb08 	ldr.w	pc, [sp], #8
   1608e:	bf00      	nop

00016090 <__aeabi_dcmpun>:
   16090:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   16094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16098:	d102      	bne.n	160a0 <__aeabi_dcmpun+0x10>
   1609a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1609e:	d10a      	bne.n	160b6 <__aeabi_dcmpun+0x26>
   160a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   160a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   160a8:	d102      	bne.n	160b0 <__aeabi_dcmpun+0x20>
   160aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   160ae:	d102      	bne.n	160b6 <__aeabi_dcmpun+0x26>
   160b0:	f04f 0000 	mov.w	r0, #0
   160b4:	4770      	bx	lr
   160b6:	f04f 0001 	mov.w	r0, #1
   160ba:	4770      	bx	lr

000160bc <__aeabi_d2uiz>:
   160bc:	004a      	lsls	r2, r1, #1
   160be:	d211      	bcs.n	160e4 <__aeabi_d2uiz+0x28>
   160c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   160c4:	d211      	bcs.n	160ea <__aeabi_d2uiz+0x2e>
   160c6:	d50d      	bpl.n	160e4 <__aeabi_d2uiz+0x28>
   160c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   160cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   160d0:	d40e      	bmi.n	160f0 <__aeabi_d2uiz+0x34>
   160d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   160d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   160da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   160de:	fa23 f002 	lsr.w	r0, r3, r2
   160e2:	4770      	bx	lr
   160e4:	f04f 0000 	mov.w	r0, #0
   160e8:	4770      	bx	lr
   160ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   160ee:	d102      	bne.n	160f6 <__aeabi_d2uiz+0x3a>
   160f0:	f04f 30ff 	mov.w	r0, #4294967295
   160f4:	4770      	bx	lr
   160f6:	f04f 0000 	mov.w	r0, #0
   160fa:	4770      	bx	lr

000160fc <__aeabi_f2uiz>:
   160fc:	0042      	lsls	r2, r0, #1
   160fe:	d20e      	bcs.n	1611e <__aeabi_f2uiz+0x22>
   16100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   16104:	d30b      	bcc.n	1611e <__aeabi_f2uiz+0x22>
   16106:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1610a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1610e:	d409      	bmi.n	16124 <__aeabi_f2uiz+0x28>
   16110:	ea4f 2300 	mov.w	r3, r0, lsl #8
   16114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16118:	fa23 f002 	lsr.w	r0, r3, r2
   1611c:	4770      	bx	lr
   1611e:	f04f 0000 	mov.w	r0, #0
   16122:	4770      	bx	lr
   16124:	f112 0f61 	cmn.w	r2, #97	; 0x61
   16128:	d101      	bne.n	1612e <__aeabi_f2uiz+0x32>
   1612a:	0242      	lsls	r2, r0, #9
   1612c:	d102      	bne.n	16134 <__aeabi_f2uiz+0x38>
   1612e:	f04f 30ff 	mov.w	r0, #4294967295
   16132:	4770      	bx	lr
   16134:	f04f 0000 	mov.w	r0, #0
   16138:	4770      	bx	lr
   1613a:	bf00      	nop

0001613c <__aeabi_uldivmod>:
   1613c:	b953      	cbnz	r3, 16154 <__aeabi_uldivmod+0x18>
   1613e:	b94a      	cbnz	r2, 16154 <__aeabi_uldivmod+0x18>
   16140:	2900      	cmp	r1, #0
   16142:	bf08      	it	eq
   16144:	2800      	cmpeq	r0, #0
   16146:	bf1c      	itt	ne
   16148:	f04f 31ff 	movne.w	r1, #4294967295
   1614c:	f04f 30ff 	movne.w	r0, #4294967295
   16150:	f000 b97a 	b.w	16448 <__aeabi_idiv0>
   16154:	f1ad 0c08 	sub.w	ip, sp, #8
   16158:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1615c:	f000 f806 	bl	1616c <__udivmoddi4>
   16160:	f8dd e004 	ldr.w	lr, [sp, #4]
   16164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16168:	b004      	add	sp, #16
   1616a:	4770      	bx	lr

0001616c <__udivmoddi4>:
   1616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16170:	468c      	mov	ip, r1
   16172:	460d      	mov	r5, r1
   16174:	4604      	mov	r4, r0
   16176:	9e08      	ldr	r6, [sp, #32]
   16178:	2b00      	cmp	r3, #0
   1617a:	d151      	bne.n	16220 <__udivmoddi4+0xb4>
   1617c:	428a      	cmp	r2, r1
   1617e:	4617      	mov	r7, r2
   16180:	d96d      	bls.n	1625e <__udivmoddi4+0xf2>
   16182:	fab2 fe82 	clz	lr, r2
   16186:	f1be 0f00 	cmp.w	lr, #0
   1618a:	d00b      	beq.n	161a4 <__udivmoddi4+0x38>
   1618c:	f1ce 0c20 	rsb	ip, lr, #32
   16190:	fa01 f50e 	lsl.w	r5, r1, lr
   16194:	fa20 fc0c 	lsr.w	ip, r0, ip
   16198:	fa02 f70e 	lsl.w	r7, r2, lr
   1619c:	ea4c 0c05 	orr.w	ip, ip, r5
   161a0:	fa00 f40e 	lsl.w	r4, r0, lr
   161a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   161a8:	0c25      	lsrs	r5, r4, #16
   161aa:	fbbc f8fa 	udiv	r8, ip, sl
   161ae:	fa1f f987 	uxth.w	r9, r7
   161b2:	fb0a cc18 	mls	ip, sl, r8, ip
   161b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   161ba:	fb08 f309 	mul.w	r3, r8, r9
   161be:	42ab      	cmp	r3, r5
   161c0:	d90a      	bls.n	161d8 <__udivmoddi4+0x6c>
   161c2:	19ed      	adds	r5, r5, r7
   161c4:	f108 32ff 	add.w	r2, r8, #4294967295
   161c8:	f080 8123 	bcs.w	16412 <__udivmoddi4+0x2a6>
   161cc:	42ab      	cmp	r3, r5
   161ce:	f240 8120 	bls.w	16412 <__udivmoddi4+0x2a6>
   161d2:	f1a8 0802 	sub.w	r8, r8, #2
   161d6:	443d      	add	r5, r7
   161d8:	1aed      	subs	r5, r5, r3
   161da:	b2a4      	uxth	r4, r4
   161dc:	fbb5 f0fa 	udiv	r0, r5, sl
   161e0:	fb0a 5510 	mls	r5, sl, r0, r5
   161e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   161e8:	fb00 f909 	mul.w	r9, r0, r9
   161ec:	45a1      	cmp	r9, r4
   161ee:	d909      	bls.n	16204 <__udivmoddi4+0x98>
   161f0:	19e4      	adds	r4, r4, r7
   161f2:	f100 33ff 	add.w	r3, r0, #4294967295
   161f6:	f080 810a 	bcs.w	1640e <__udivmoddi4+0x2a2>
   161fa:	45a1      	cmp	r9, r4
   161fc:	f240 8107 	bls.w	1640e <__udivmoddi4+0x2a2>
   16200:	3802      	subs	r0, #2
   16202:	443c      	add	r4, r7
   16204:	eba4 0409 	sub.w	r4, r4, r9
   16208:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1620c:	2100      	movs	r1, #0
   1620e:	2e00      	cmp	r6, #0
   16210:	d061      	beq.n	162d6 <__udivmoddi4+0x16a>
   16212:	fa24 f40e 	lsr.w	r4, r4, lr
   16216:	2300      	movs	r3, #0
   16218:	6034      	str	r4, [r6, #0]
   1621a:	6073      	str	r3, [r6, #4]
   1621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16220:	428b      	cmp	r3, r1
   16222:	d907      	bls.n	16234 <__udivmoddi4+0xc8>
   16224:	2e00      	cmp	r6, #0
   16226:	d054      	beq.n	162d2 <__udivmoddi4+0x166>
   16228:	2100      	movs	r1, #0
   1622a:	e886 0021 	stmia.w	r6, {r0, r5}
   1622e:	4608      	mov	r0, r1
   16230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16234:	fab3 f183 	clz	r1, r3
   16238:	2900      	cmp	r1, #0
   1623a:	f040 808e 	bne.w	1635a <__udivmoddi4+0x1ee>
   1623e:	42ab      	cmp	r3, r5
   16240:	d302      	bcc.n	16248 <__udivmoddi4+0xdc>
   16242:	4282      	cmp	r2, r0
   16244:	f200 80fa 	bhi.w	1643c <__udivmoddi4+0x2d0>
   16248:	1a84      	subs	r4, r0, r2
   1624a:	eb65 0503 	sbc.w	r5, r5, r3
   1624e:	2001      	movs	r0, #1
   16250:	46ac      	mov	ip, r5
   16252:	2e00      	cmp	r6, #0
   16254:	d03f      	beq.n	162d6 <__udivmoddi4+0x16a>
   16256:	e886 1010 	stmia.w	r6, {r4, ip}
   1625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1625e:	b912      	cbnz	r2, 16266 <__udivmoddi4+0xfa>
   16260:	2701      	movs	r7, #1
   16262:	fbb7 f7f2 	udiv	r7, r7, r2
   16266:	fab7 fe87 	clz	lr, r7
   1626a:	f1be 0f00 	cmp.w	lr, #0
   1626e:	d134      	bne.n	162da <__udivmoddi4+0x16e>
   16270:	1beb      	subs	r3, r5, r7
   16272:	0c3a      	lsrs	r2, r7, #16
   16274:	fa1f fc87 	uxth.w	ip, r7
   16278:	2101      	movs	r1, #1
   1627a:	fbb3 f8f2 	udiv	r8, r3, r2
   1627e:	0c25      	lsrs	r5, r4, #16
   16280:	fb02 3318 	mls	r3, r2, r8, r3
   16284:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   16288:	fb0c f308 	mul.w	r3, ip, r8
   1628c:	42ab      	cmp	r3, r5
   1628e:	d907      	bls.n	162a0 <__udivmoddi4+0x134>
   16290:	19ed      	adds	r5, r5, r7
   16292:	f108 30ff 	add.w	r0, r8, #4294967295
   16296:	d202      	bcs.n	1629e <__udivmoddi4+0x132>
   16298:	42ab      	cmp	r3, r5
   1629a:	f200 80d1 	bhi.w	16440 <__udivmoddi4+0x2d4>
   1629e:	4680      	mov	r8, r0
   162a0:	1aed      	subs	r5, r5, r3
   162a2:	b2a3      	uxth	r3, r4
   162a4:	fbb5 f0f2 	udiv	r0, r5, r2
   162a8:	fb02 5510 	mls	r5, r2, r0, r5
   162ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   162b0:	fb0c fc00 	mul.w	ip, ip, r0
   162b4:	45a4      	cmp	ip, r4
   162b6:	d907      	bls.n	162c8 <__udivmoddi4+0x15c>
   162b8:	19e4      	adds	r4, r4, r7
   162ba:	f100 33ff 	add.w	r3, r0, #4294967295
   162be:	d202      	bcs.n	162c6 <__udivmoddi4+0x15a>
   162c0:	45a4      	cmp	ip, r4
   162c2:	f200 80b8 	bhi.w	16436 <__udivmoddi4+0x2ca>
   162c6:	4618      	mov	r0, r3
   162c8:	eba4 040c 	sub.w	r4, r4, ip
   162cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   162d0:	e79d      	b.n	1620e <__udivmoddi4+0xa2>
   162d2:	4631      	mov	r1, r6
   162d4:	4630      	mov	r0, r6
   162d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162da:	f1ce 0420 	rsb	r4, lr, #32
   162de:	fa05 f30e 	lsl.w	r3, r5, lr
   162e2:	fa07 f70e 	lsl.w	r7, r7, lr
   162e6:	fa20 f804 	lsr.w	r8, r0, r4
   162ea:	0c3a      	lsrs	r2, r7, #16
   162ec:	fa25 f404 	lsr.w	r4, r5, r4
   162f0:	ea48 0803 	orr.w	r8, r8, r3
   162f4:	fbb4 f1f2 	udiv	r1, r4, r2
   162f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
   162fc:	fb02 4411 	mls	r4, r2, r1, r4
   16300:	fa1f fc87 	uxth.w	ip, r7
   16304:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   16308:	fb01 f30c 	mul.w	r3, r1, ip
   1630c:	42ab      	cmp	r3, r5
   1630e:	fa00 f40e 	lsl.w	r4, r0, lr
   16312:	d909      	bls.n	16328 <__udivmoddi4+0x1bc>
   16314:	19ed      	adds	r5, r5, r7
   16316:	f101 30ff 	add.w	r0, r1, #4294967295
   1631a:	f080 808a 	bcs.w	16432 <__udivmoddi4+0x2c6>
   1631e:	42ab      	cmp	r3, r5
   16320:	f240 8087 	bls.w	16432 <__udivmoddi4+0x2c6>
   16324:	3902      	subs	r1, #2
   16326:	443d      	add	r5, r7
   16328:	1aeb      	subs	r3, r5, r3
   1632a:	fa1f f588 	uxth.w	r5, r8
   1632e:	fbb3 f0f2 	udiv	r0, r3, r2
   16332:	fb02 3310 	mls	r3, r2, r0, r3
   16336:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1633a:	fb00 f30c 	mul.w	r3, r0, ip
   1633e:	42ab      	cmp	r3, r5
   16340:	d907      	bls.n	16352 <__udivmoddi4+0x1e6>
   16342:	19ed      	adds	r5, r5, r7
   16344:	f100 38ff 	add.w	r8, r0, #4294967295
   16348:	d26f      	bcs.n	1642a <__udivmoddi4+0x2be>
   1634a:	42ab      	cmp	r3, r5
   1634c:	d96d      	bls.n	1642a <__udivmoddi4+0x2be>
   1634e:	3802      	subs	r0, #2
   16350:	443d      	add	r5, r7
   16352:	1aeb      	subs	r3, r5, r3
   16354:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   16358:	e78f      	b.n	1627a <__udivmoddi4+0x10e>
   1635a:	f1c1 0720 	rsb	r7, r1, #32
   1635e:	fa22 f807 	lsr.w	r8, r2, r7
   16362:	408b      	lsls	r3, r1
   16364:	fa05 f401 	lsl.w	r4, r5, r1
   16368:	ea48 0303 	orr.w	r3, r8, r3
   1636c:	fa20 fe07 	lsr.w	lr, r0, r7
   16370:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   16374:	40fd      	lsrs	r5, r7
   16376:	ea4e 0e04 	orr.w	lr, lr, r4
   1637a:	fbb5 f9fc 	udiv	r9, r5, ip
   1637e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   16382:	fb0c 5519 	mls	r5, ip, r9, r5
   16386:	fa1f f883 	uxth.w	r8, r3
   1638a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1638e:	fb09 f408 	mul.w	r4, r9, r8
   16392:	42ac      	cmp	r4, r5
   16394:	fa02 f201 	lsl.w	r2, r2, r1
   16398:	fa00 fa01 	lsl.w	sl, r0, r1
   1639c:	d908      	bls.n	163b0 <__udivmoddi4+0x244>
   1639e:	18ed      	adds	r5, r5, r3
   163a0:	f109 30ff 	add.w	r0, r9, #4294967295
   163a4:	d243      	bcs.n	1642e <__udivmoddi4+0x2c2>
   163a6:	42ac      	cmp	r4, r5
   163a8:	d941      	bls.n	1642e <__udivmoddi4+0x2c2>
   163aa:	f1a9 0902 	sub.w	r9, r9, #2
   163ae:	441d      	add	r5, r3
   163b0:	1b2d      	subs	r5, r5, r4
   163b2:	fa1f fe8e 	uxth.w	lr, lr
   163b6:	fbb5 f0fc 	udiv	r0, r5, ip
   163ba:	fb0c 5510 	mls	r5, ip, r0, r5
   163be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   163c2:	fb00 f808 	mul.w	r8, r0, r8
   163c6:	45a0      	cmp	r8, r4
   163c8:	d907      	bls.n	163da <__udivmoddi4+0x26e>
   163ca:	18e4      	adds	r4, r4, r3
   163cc:	f100 35ff 	add.w	r5, r0, #4294967295
   163d0:	d229      	bcs.n	16426 <__udivmoddi4+0x2ba>
   163d2:	45a0      	cmp	r8, r4
   163d4:	d927      	bls.n	16426 <__udivmoddi4+0x2ba>
   163d6:	3802      	subs	r0, #2
   163d8:	441c      	add	r4, r3
   163da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   163de:	eba4 0408 	sub.w	r4, r4, r8
   163e2:	fba0 8902 	umull	r8, r9, r0, r2
   163e6:	454c      	cmp	r4, r9
   163e8:	46c6      	mov	lr, r8
   163ea:	464d      	mov	r5, r9
   163ec:	d315      	bcc.n	1641a <__udivmoddi4+0x2ae>
   163ee:	d012      	beq.n	16416 <__udivmoddi4+0x2aa>
   163f0:	b156      	cbz	r6, 16408 <__udivmoddi4+0x29c>
   163f2:	ebba 030e 	subs.w	r3, sl, lr
   163f6:	eb64 0405 	sbc.w	r4, r4, r5
   163fa:	fa04 f707 	lsl.w	r7, r4, r7
   163fe:	40cb      	lsrs	r3, r1
   16400:	431f      	orrs	r7, r3
   16402:	40cc      	lsrs	r4, r1
   16404:	6037      	str	r7, [r6, #0]
   16406:	6074      	str	r4, [r6, #4]
   16408:	2100      	movs	r1, #0
   1640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1640e:	4618      	mov	r0, r3
   16410:	e6f8      	b.n	16204 <__udivmoddi4+0x98>
   16412:	4690      	mov	r8, r2
   16414:	e6e0      	b.n	161d8 <__udivmoddi4+0x6c>
   16416:	45c2      	cmp	sl, r8
   16418:	d2ea      	bcs.n	163f0 <__udivmoddi4+0x284>
   1641a:	ebb8 0e02 	subs.w	lr, r8, r2
   1641e:	eb69 0503 	sbc.w	r5, r9, r3
   16422:	3801      	subs	r0, #1
   16424:	e7e4      	b.n	163f0 <__udivmoddi4+0x284>
   16426:	4628      	mov	r0, r5
   16428:	e7d7      	b.n	163da <__udivmoddi4+0x26e>
   1642a:	4640      	mov	r0, r8
   1642c:	e791      	b.n	16352 <__udivmoddi4+0x1e6>
   1642e:	4681      	mov	r9, r0
   16430:	e7be      	b.n	163b0 <__udivmoddi4+0x244>
   16432:	4601      	mov	r1, r0
   16434:	e778      	b.n	16328 <__udivmoddi4+0x1bc>
   16436:	3802      	subs	r0, #2
   16438:	443c      	add	r4, r7
   1643a:	e745      	b.n	162c8 <__udivmoddi4+0x15c>
   1643c:	4608      	mov	r0, r1
   1643e:	e708      	b.n	16252 <__udivmoddi4+0xe6>
   16440:	f1a8 0802 	sub.w	r8, r8, #2
   16444:	443d      	add	r5, r7
   16446:	e72b      	b.n	162a0 <__udivmoddi4+0x134>

00016448 <__aeabi_idiv0>:
   16448:	4770      	bx	lr
   1644a:	bf00      	nop

0001644c <ctime>:
   1644c:	b508      	push	{r3, lr}
   1644e:	f000 f84d 	bl	164ec <localtime>
   16452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16456:	f000 bdd7 	b.w	17008 <asctime>
   1645a:	bf00      	nop

0001645c <__cxa_atexit>:
   1645c:	4613      	mov	r3, r2
   1645e:	460a      	mov	r2, r1
   16460:	4601      	mov	r1, r0
   16462:	2002      	movs	r0, #2
   16464:	f000 bd64 	b.w	16f30 <__register_exitproc>

00016468 <difftime>:
   16468:	b508      	push	{r3, lr}
   1646a:	1a40      	subs	r0, r0, r1
   1646c:	f7ff fb10 	bl	15a90 <__aeabi_i2d>
   16470:	bd08      	pop	{r3, pc}
   16472:	bf00      	nop

00016474 <__errno>:
   16474:	4b01      	ldr	r3, [pc, #4]	; (1647c <__errno+0x8>)
   16476:	6818      	ldr	r0, [r3, #0]
   16478:	4770      	bx	lr
   1647a:	bf00      	nop
   1647c:	2000019c 	.word	0x2000019c

00016480 <ffs>:
   16480:	b140      	cbz	r0, 16494 <ffs+0x14>
   16482:	2300      	movs	r3, #0
   16484:	fa40 f103 	asr.w	r1, r0, r3
   16488:	1c5a      	adds	r2, r3, #1
   1648a:	07c9      	lsls	r1, r1, #31
   1648c:	4613      	mov	r3, r2
   1648e:	d5f9      	bpl.n	16484 <ffs+0x4>
   16490:	4610      	mov	r0, r2
   16492:	4770      	bx	lr
   16494:	4602      	mov	r2, r0
   16496:	4610      	mov	r0, r2
   16498:	4770      	bx	lr
   1649a:	bf00      	nop

0001649c <__libc_init_array>:
   1649c:	b570      	push	{r4, r5, r6, lr}
   1649e:	4e0f      	ldr	r6, [pc, #60]	; (164dc <__libc_init_array+0x40>)
   164a0:	4d0f      	ldr	r5, [pc, #60]	; (164e0 <__libc_init_array+0x44>)
   164a2:	1b76      	subs	r6, r6, r5
   164a4:	10b6      	asrs	r6, r6, #2
   164a6:	bf18      	it	ne
   164a8:	2400      	movne	r4, #0
   164aa:	d005      	beq.n	164b8 <__libc_init_array+0x1c>
   164ac:	3401      	adds	r4, #1
   164ae:	f855 3b04 	ldr.w	r3, [r5], #4
   164b2:	4798      	blx	r3
   164b4:	42a6      	cmp	r6, r4
   164b6:	d1f9      	bne.n	164ac <__libc_init_array+0x10>
   164b8:	4e0a      	ldr	r6, [pc, #40]	; (164e4 <__libc_init_array+0x48>)
   164ba:	4d0b      	ldr	r5, [pc, #44]	; (164e8 <__libc_init_array+0x4c>)
   164bc:	1b76      	subs	r6, r6, r5
   164be:	f005 ff11 	bl	1c2e4 <_init>
   164c2:	10b6      	asrs	r6, r6, #2
   164c4:	bf18      	it	ne
   164c6:	2400      	movne	r4, #0
   164c8:	d006      	beq.n	164d8 <__libc_init_array+0x3c>
   164ca:	3401      	adds	r4, #1
   164cc:	f855 3b04 	ldr.w	r3, [r5], #4
   164d0:	4798      	blx	r3
   164d2:	42a6      	cmp	r6, r4
   164d4:	d1f9      	bne.n	164ca <__libc_init_array+0x2e>
   164d6:	bd70      	pop	{r4, r5, r6, pc}
   164d8:	bd70      	pop	{r4, r5, r6, pc}
   164da:	bf00      	nop
   164dc:	0001c2f0 	.word	0x0001c2f0
   164e0:	0001c2f0 	.word	0x0001c2f0
   164e4:	0001c33c 	.word	0x0001c33c
   164e8:	0001c2f0 	.word	0x0001c2f0

000164ec <localtime>:
   164ec:	4b02      	ldr	r3, [pc, #8]	; (164f8 <localtime+0xc>)
   164ee:	6819      	ldr	r1, [r3, #0]
   164f0:	317c      	adds	r1, #124	; 0x7c
   164f2:	f000 b803 	b.w	164fc <localtime_r>
   164f6:	bf00      	nop
   164f8:	2000019c 	.word	0x2000019c

000164fc <localtime_r>:
   164fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16500:	460c      	mov	r4, r1
   16502:	4607      	mov	r7, r0
   16504:	f000 fe14 	bl	17130 <__gettzinfo>
   16508:	4621      	mov	r1, r4
   1650a:	4680      	mov	r8, r0
   1650c:	4638      	mov	r0, r7
   1650e:	f000 fe13 	bl	17138 <gmtime_r>
   16512:	6946      	ldr	r6, [r0, #20]
   16514:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   16518:	07b1      	lsls	r1, r6, #30
   1651a:	4604      	mov	r4, r0
   1651c:	f000 80b9 	beq.w	16692 <localtime_r+0x196>
   16520:	17f5      	asrs	r5, r6, #31
   16522:	4b7f      	ldr	r3, [pc, #508]	; (16720 <localtime_r+0x224>)
   16524:	fb83 2306 	smull	r2, r3, r3, r6
   16528:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1652c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   16530:	fb03 6515 	mls	r5, r3, r5, r6
   16534:	2d00      	cmp	r5, #0
   16536:	bf0c      	ite	eq
   16538:	2530      	moveq	r5, #48	; 0x30
   1653a:	2500      	movne	r5, #0
   1653c:	4b79      	ldr	r3, [pc, #484]	; (16724 <localtime_r+0x228>)
   1653e:	441d      	add	r5, r3
   16540:	f000 fb4e 	bl	16be0 <__tz_lock>
   16544:	f000 fb58 	bl	16bf8 <_tzset_unlocked>
   16548:	4b77      	ldr	r3, [pc, #476]	; (16728 <localtime_r+0x22c>)
   1654a:	681b      	ldr	r3, [r3, #0]
   1654c:	b343      	cbz	r3, 165a0 <localtime_r+0xa4>
   1654e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16552:	429e      	cmp	r6, r3
   16554:	d005      	beq.n	16562 <localtime_r+0x66>
   16556:	4630      	mov	r0, r6
   16558:	f000 fa80 	bl	16a5c <__tzcalc_limits>
   1655c:	2800      	cmp	r0, #0
   1655e:	f000 80a6 	beq.w	166ae <localtime_r+0x1b2>
   16562:	f8d8 3000 	ldr.w	r3, [r8]
   16566:	b983      	cbnz	r3, 1658a <localtime_r+0x8e>
   16568:	683b      	ldr	r3, [r7, #0]
   1656a:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1656e:	4293      	cmp	r3, r2
   16570:	f280 80a1 	bge.w	166b6 <localtime_r+0x1ba>
   16574:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   16578:	4293      	cmp	r3, r2
   1657a:	bfb4      	ite	lt
   1657c:	2301      	movlt	r3, #1
   1657e:	2300      	movge	r3, #0
   16580:	6223      	str	r3, [r4, #32]
   16582:	da0e      	bge.n	165a2 <localtime_r+0xa6>
   16584:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   16588:	e00d      	b.n	165a6 <localtime_r+0xaa>
   1658a:	683b      	ldr	r3, [r7, #0]
   1658c:	f8d8 201c 	ldr.w	r2, [r8, #28]
   16590:	4293      	cmp	r3, r2
   16592:	db04      	blt.n	1659e <localtime_r+0xa2>
   16594:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   16598:	4293      	cmp	r3, r2
   1659a:	f2c0 808c 	blt.w	166b6 <localtime_r+0x1ba>
   1659e:	2300      	movs	r3, #0
   165a0:	6223      	str	r3, [r4, #32]
   165a2:	f8d8 6020 	ldr.w	r6, [r8, #32]
   165a6:	4a61      	ldr	r2, [pc, #388]	; (1672c <localtime_r+0x230>)
   165a8:	4f61      	ldr	r7, [pc, #388]	; (16730 <localtime_r+0x234>)
   165aa:	68a1      	ldr	r1, [r4, #8]
   165ac:	fb82 3206 	smull	r3, r2, r2, r6
   165b0:	4432      	add	r2, r6
   165b2:	17f3      	asrs	r3, r6, #31
   165b4:	12d2      	asrs	r2, r2, #11
   165b6:	1ad0      	subs	r0, r2, r3
   165b8:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   165bc:	fb0e 6010 	mls	r0, lr, r0, r6
   165c0:	fb87 6700 	smull	r6, r7, r7, r0
   165c4:	183e      	adds	r6, r7, r0
   165c6:	17c7      	asrs	r7, r0, #31
   165c8:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   165cc:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   165d0:	6826      	ldr	r6, [r4, #0]
   165d2:	1ad3      	subs	r3, r2, r3
   165d4:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   165d8:	6862      	ldr	r2, [r4, #4]
   165da:	1a30      	subs	r0, r6, r0
   165dc:	1acb      	subs	r3, r1, r3
   165de:	1bd2      	subs	r2, r2, r7
   165e0:	283b      	cmp	r0, #59	; 0x3b
   165e2:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   165e6:	dd4d      	ble.n	16684 <localtime_r+0x188>
   165e8:	3201      	adds	r2, #1
   165ea:	383c      	subs	r0, #60	; 0x3c
   165ec:	e884 0005 	stmia.w	r4, {r0, r2}
   165f0:	2a3b      	cmp	r2, #59	; 0x3b
   165f2:	dd40      	ble.n	16676 <localtime_r+0x17a>
   165f4:	3301      	adds	r3, #1
   165f6:	3a3c      	subs	r2, #60	; 0x3c
   165f8:	60a3      	str	r3, [r4, #8]
   165fa:	6062      	str	r2, [r4, #4]
   165fc:	2b17      	cmp	r3, #23
   165fe:	dd1d      	ble.n	1663c <localtime_r+0x140>
   16600:	69a2      	ldr	r2, [r4, #24]
   16602:	69e1      	ldr	r1, [r4, #28]
   16604:	3201      	adds	r2, #1
   16606:	2a06      	cmp	r2, #6
   16608:	bfc8      	it	gt
   1660a:	2200      	movgt	r2, #0
   1660c:	61a2      	str	r2, [r4, #24]
   1660e:	68e2      	ldr	r2, [r4, #12]
   16610:	3101      	adds	r1, #1
   16612:	61e1      	str	r1, [r4, #28]
   16614:	3b18      	subs	r3, #24
   16616:	3201      	adds	r2, #1
   16618:	6921      	ldr	r1, [r4, #16]
   1661a:	60a3      	str	r3, [r4, #8]
   1661c:	60e2      	str	r2, [r4, #12]
   1661e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   16622:	429a      	cmp	r2, r3
   16624:	dd05      	ble.n	16632 <localtime_r+0x136>
   16626:	3101      	adds	r1, #1
   16628:	1ad2      	subs	r2, r2, r3
   1662a:	290c      	cmp	r1, #12
   1662c:	60e2      	str	r2, [r4, #12]
   1662e:	d045      	beq.n	166bc <localtime_r+0x1c0>
   16630:	6121      	str	r1, [r4, #16]
   16632:	f000 fadb 	bl	16bec <__tz_unlock>
   16636:	4620      	mov	r0, r4
   16638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1663c:	2b00      	cmp	r3, #0
   1663e:	daf8      	bge.n	16632 <localtime_r+0x136>
   16640:	69a2      	ldr	r2, [r4, #24]
   16642:	69e1      	ldr	r1, [r4, #28]
   16644:	3a01      	subs	r2, #1
   16646:	bf48      	it	mi
   16648:	2206      	movmi	r2, #6
   1664a:	61a2      	str	r2, [r4, #24]
   1664c:	68e2      	ldr	r2, [r4, #12]
   1664e:	3901      	subs	r1, #1
   16650:	3318      	adds	r3, #24
   16652:	3a01      	subs	r2, #1
   16654:	61e1      	str	r1, [r4, #28]
   16656:	60a3      	str	r3, [r4, #8]
   16658:	60e2      	str	r2, [r4, #12]
   1665a:	2a00      	cmp	r2, #0
   1665c:	d1e9      	bne.n	16632 <localtime_r+0x136>
   1665e:	6923      	ldr	r3, [r4, #16]
   16660:	3b01      	subs	r3, #1
   16662:	d432      	bmi.n	166ca <localtime_r+0x1ce>
   16664:	6123      	str	r3, [r4, #16]
   16666:	009b      	lsls	r3, r3, #2
   16668:	58eb      	ldr	r3, [r5, r3]
   1666a:	60e3      	str	r3, [r4, #12]
   1666c:	f000 fabe 	bl	16bec <__tz_unlock>
   16670:	4620      	mov	r0, r4
   16672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16676:	2a00      	cmp	r2, #0
   16678:	dac0      	bge.n	165fc <localtime_r+0x100>
   1667a:	3b01      	subs	r3, #1
   1667c:	323c      	adds	r2, #60	; 0x3c
   1667e:	60a3      	str	r3, [r4, #8]
   16680:	6062      	str	r2, [r4, #4]
   16682:	e7bb      	b.n	165fc <localtime_r+0x100>
   16684:	2800      	cmp	r0, #0
   16686:	dab3      	bge.n	165f0 <localtime_r+0xf4>
   16688:	3a01      	subs	r2, #1
   1668a:	303c      	adds	r0, #60	; 0x3c
   1668c:	e884 0005 	stmia.w	r4, {r0, r2}
   16690:	e7ae      	b.n	165f0 <localtime_r+0xf4>
   16692:	4b23      	ldr	r3, [pc, #140]	; (16720 <localtime_r+0x224>)
   16694:	17f5      	asrs	r5, r6, #31
   16696:	fb83 2306 	smull	r2, r3, r3, r6
   1669a:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1669e:	2264      	movs	r2, #100	; 0x64
   166a0:	fb02 6313 	mls	r3, r2, r3, r6
   166a4:	2b00      	cmp	r3, #0
   166a6:	f43f af3c 	beq.w	16522 <localtime_r+0x26>
   166aa:	2530      	movs	r5, #48	; 0x30
   166ac:	e746      	b.n	1653c <localtime_r+0x40>
   166ae:	f04f 33ff 	mov.w	r3, #4294967295
   166b2:	6223      	str	r3, [r4, #32]
   166b4:	e775      	b.n	165a2 <localtime_r+0xa6>
   166b6:	2301      	movs	r3, #1
   166b8:	6223      	str	r3, [r4, #32]
   166ba:	e763      	b.n	16584 <localtime_r+0x88>
   166bc:	6963      	ldr	r3, [r4, #20]
   166be:	2200      	movs	r2, #0
   166c0:	3301      	adds	r3, #1
   166c2:	6163      	str	r3, [r4, #20]
   166c4:	6122      	str	r2, [r4, #16]
   166c6:	61e2      	str	r2, [r4, #28]
   166c8:	e7b3      	b.n	16632 <localtime_r+0x136>
   166ca:	6963      	ldr	r3, [r4, #20]
   166cc:	1e5a      	subs	r2, r3, #1
   166ce:	210b      	movs	r1, #11
   166d0:	6162      	str	r2, [r4, #20]
   166d2:	0792      	lsls	r2, r2, #30
   166d4:	6121      	str	r1, [r4, #16]
   166d6:	d013      	beq.n	16700 <localtime_r+0x204>
   166d8:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   166dc:	17d3      	asrs	r3, r2, #31
   166de:	4910      	ldr	r1, [pc, #64]	; (16720 <localtime_r+0x224>)
   166e0:	fb81 0102 	smull	r0, r1, r1, r2
   166e4:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   166e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   166ec:	fb01 2313 	mls	r3, r1, r3, r2
   166f0:	fab3 f383 	clz	r3, r3
   166f4:	095b      	lsrs	r3, r3, #5
   166f6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   166fa:	61e3      	str	r3, [r4, #28]
   166fc:	232c      	movs	r3, #44	; 0x2c
   166fe:	e7b3      	b.n	16668 <localtime_r+0x16c>
   16700:	4907      	ldr	r1, [pc, #28]	; (16720 <localtime_r+0x224>)
   16702:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   16706:	fb81 3102 	smull	r3, r1, r1, r2
   1670a:	17d3      	asrs	r3, r2, #31
   1670c:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   16710:	2064      	movs	r0, #100	; 0x64
   16712:	fb00 2111 	mls	r1, r0, r1, r2
   16716:	2900      	cmp	r1, #0
   16718:	d0e1      	beq.n	166de <localtime_r+0x1e2>
   1671a:	f240 136d 	movw	r3, #365	; 0x16d
   1671e:	e7ec      	b.n	166fa <localtime_r+0x1fe>
   16720:	51eb851f 	.word	0x51eb851f
   16724:	0001c04c 	.word	0x0001c04c
   16728:	20004f28 	.word	0x20004f28
   1672c:	91a2b3c5 	.word	0x91a2b3c5
   16730:	88888889 	.word	0x88888889

00016734 <memcpy>:
   16734:	4684      	mov	ip, r0
   16736:	ea41 0300 	orr.w	r3, r1, r0
   1673a:	f013 0303 	ands.w	r3, r3, #3
   1673e:	d16d      	bne.n	1681c <memcpy+0xe8>
   16740:	3a40      	subs	r2, #64	; 0x40
   16742:	d341      	bcc.n	167c8 <memcpy+0x94>
   16744:	f851 3b04 	ldr.w	r3, [r1], #4
   16748:	f840 3b04 	str.w	r3, [r0], #4
   1674c:	f851 3b04 	ldr.w	r3, [r1], #4
   16750:	f840 3b04 	str.w	r3, [r0], #4
   16754:	f851 3b04 	ldr.w	r3, [r1], #4
   16758:	f840 3b04 	str.w	r3, [r0], #4
   1675c:	f851 3b04 	ldr.w	r3, [r1], #4
   16760:	f840 3b04 	str.w	r3, [r0], #4
   16764:	f851 3b04 	ldr.w	r3, [r1], #4
   16768:	f840 3b04 	str.w	r3, [r0], #4
   1676c:	f851 3b04 	ldr.w	r3, [r1], #4
   16770:	f840 3b04 	str.w	r3, [r0], #4
   16774:	f851 3b04 	ldr.w	r3, [r1], #4
   16778:	f840 3b04 	str.w	r3, [r0], #4
   1677c:	f851 3b04 	ldr.w	r3, [r1], #4
   16780:	f840 3b04 	str.w	r3, [r0], #4
   16784:	f851 3b04 	ldr.w	r3, [r1], #4
   16788:	f840 3b04 	str.w	r3, [r0], #4
   1678c:	f851 3b04 	ldr.w	r3, [r1], #4
   16790:	f840 3b04 	str.w	r3, [r0], #4
   16794:	f851 3b04 	ldr.w	r3, [r1], #4
   16798:	f840 3b04 	str.w	r3, [r0], #4
   1679c:	f851 3b04 	ldr.w	r3, [r1], #4
   167a0:	f840 3b04 	str.w	r3, [r0], #4
   167a4:	f851 3b04 	ldr.w	r3, [r1], #4
   167a8:	f840 3b04 	str.w	r3, [r0], #4
   167ac:	f851 3b04 	ldr.w	r3, [r1], #4
   167b0:	f840 3b04 	str.w	r3, [r0], #4
   167b4:	f851 3b04 	ldr.w	r3, [r1], #4
   167b8:	f840 3b04 	str.w	r3, [r0], #4
   167bc:	f851 3b04 	ldr.w	r3, [r1], #4
   167c0:	f840 3b04 	str.w	r3, [r0], #4
   167c4:	3a40      	subs	r2, #64	; 0x40
   167c6:	d2bd      	bcs.n	16744 <memcpy+0x10>
   167c8:	3230      	adds	r2, #48	; 0x30
   167ca:	d311      	bcc.n	167f0 <memcpy+0xbc>
   167cc:	f851 3b04 	ldr.w	r3, [r1], #4
   167d0:	f840 3b04 	str.w	r3, [r0], #4
   167d4:	f851 3b04 	ldr.w	r3, [r1], #4
   167d8:	f840 3b04 	str.w	r3, [r0], #4
   167dc:	f851 3b04 	ldr.w	r3, [r1], #4
   167e0:	f840 3b04 	str.w	r3, [r0], #4
   167e4:	f851 3b04 	ldr.w	r3, [r1], #4
   167e8:	f840 3b04 	str.w	r3, [r0], #4
   167ec:	3a10      	subs	r2, #16
   167ee:	d2ed      	bcs.n	167cc <memcpy+0x98>
   167f0:	320c      	adds	r2, #12
   167f2:	d305      	bcc.n	16800 <memcpy+0xcc>
   167f4:	f851 3b04 	ldr.w	r3, [r1], #4
   167f8:	f840 3b04 	str.w	r3, [r0], #4
   167fc:	3a04      	subs	r2, #4
   167fe:	d2f9      	bcs.n	167f4 <memcpy+0xc0>
   16800:	3204      	adds	r2, #4
   16802:	d008      	beq.n	16816 <memcpy+0xe2>
   16804:	07d2      	lsls	r2, r2, #31
   16806:	bf1c      	itt	ne
   16808:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1680c:	f800 3b01 	strbne.w	r3, [r0], #1
   16810:	d301      	bcc.n	16816 <memcpy+0xe2>
   16812:	880b      	ldrh	r3, [r1, #0]
   16814:	8003      	strh	r3, [r0, #0]
   16816:	4660      	mov	r0, ip
   16818:	4770      	bx	lr
   1681a:	bf00      	nop
   1681c:	2a08      	cmp	r2, #8
   1681e:	d313      	bcc.n	16848 <memcpy+0x114>
   16820:	078b      	lsls	r3, r1, #30
   16822:	d08d      	beq.n	16740 <memcpy+0xc>
   16824:	f010 0303 	ands.w	r3, r0, #3
   16828:	d08a      	beq.n	16740 <memcpy+0xc>
   1682a:	f1c3 0304 	rsb	r3, r3, #4
   1682e:	1ad2      	subs	r2, r2, r3
   16830:	07db      	lsls	r3, r3, #31
   16832:	bf1c      	itt	ne
   16834:	f811 3b01 	ldrbne.w	r3, [r1], #1
   16838:	f800 3b01 	strbne.w	r3, [r0], #1
   1683c:	d380      	bcc.n	16740 <memcpy+0xc>
   1683e:	f831 3b02 	ldrh.w	r3, [r1], #2
   16842:	f820 3b02 	strh.w	r3, [r0], #2
   16846:	e77b      	b.n	16740 <memcpy+0xc>
   16848:	3a04      	subs	r2, #4
   1684a:	d3d9      	bcc.n	16800 <memcpy+0xcc>
   1684c:	3a01      	subs	r2, #1
   1684e:	f811 3b01 	ldrb.w	r3, [r1], #1
   16852:	f800 3b01 	strb.w	r3, [r0], #1
   16856:	d2f9      	bcs.n	1684c <memcpy+0x118>
   16858:	780b      	ldrb	r3, [r1, #0]
   1685a:	7003      	strb	r3, [r0, #0]
   1685c:	784b      	ldrb	r3, [r1, #1]
   1685e:	7043      	strb	r3, [r0, #1]
   16860:	788b      	ldrb	r3, [r1, #2]
   16862:	7083      	strb	r3, [r0, #2]
   16864:	4660      	mov	r0, ip
   16866:	4770      	bx	lr

00016868 <memset>:
   16868:	b470      	push	{r4, r5, r6}
   1686a:	0786      	lsls	r6, r0, #30
   1686c:	d046      	beq.n	168fc <memset+0x94>
   1686e:	1e54      	subs	r4, r2, #1
   16870:	2a00      	cmp	r2, #0
   16872:	d041      	beq.n	168f8 <memset+0x90>
   16874:	b2ca      	uxtb	r2, r1
   16876:	4603      	mov	r3, r0
   16878:	e002      	b.n	16880 <memset+0x18>
   1687a:	f114 34ff 	adds.w	r4, r4, #4294967295
   1687e:	d33b      	bcc.n	168f8 <memset+0x90>
   16880:	f803 2b01 	strb.w	r2, [r3], #1
   16884:	079d      	lsls	r5, r3, #30
   16886:	d1f8      	bne.n	1687a <memset+0x12>
   16888:	2c03      	cmp	r4, #3
   1688a:	d92e      	bls.n	168ea <memset+0x82>
   1688c:	b2cd      	uxtb	r5, r1
   1688e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   16892:	2c0f      	cmp	r4, #15
   16894:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   16898:	d919      	bls.n	168ce <memset+0x66>
   1689a:	f103 0210 	add.w	r2, r3, #16
   1689e:	4626      	mov	r6, r4
   168a0:	3e10      	subs	r6, #16
   168a2:	2e0f      	cmp	r6, #15
   168a4:	f842 5c10 	str.w	r5, [r2, #-16]
   168a8:	f842 5c0c 	str.w	r5, [r2, #-12]
   168ac:	f842 5c08 	str.w	r5, [r2, #-8]
   168b0:	f842 5c04 	str.w	r5, [r2, #-4]
   168b4:	f102 0210 	add.w	r2, r2, #16
   168b8:	d8f2      	bhi.n	168a0 <memset+0x38>
   168ba:	f1a4 0210 	sub.w	r2, r4, #16
   168be:	f022 020f 	bic.w	r2, r2, #15
   168c2:	f004 040f 	and.w	r4, r4, #15
   168c6:	3210      	adds	r2, #16
   168c8:	2c03      	cmp	r4, #3
   168ca:	4413      	add	r3, r2
   168cc:	d90d      	bls.n	168ea <memset+0x82>
   168ce:	461e      	mov	r6, r3
   168d0:	4622      	mov	r2, r4
   168d2:	3a04      	subs	r2, #4
   168d4:	2a03      	cmp	r2, #3
   168d6:	f846 5b04 	str.w	r5, [r6], #4
   168da:	d8fa      	bhi.n	168d2 <memset+0x6a>
   168dc:	1f22      	subs	r2, r4, #4
   168de:	f022 0203 	bic.w	r2, r2, #3
   168e2:	3204      	adds	r2, #4
   168e4:	4413      	add	r3, r2
   168e6:	f004 0403 	and.w	r4, r4, #3
   168ea:	b12c      	cbz	r4, 168f8 <memset+0x90>
   168ec:	b2c9      	uxtb	r1, r1
   168ee:	441c      	add	r4, r3
   168f0:	f803 1b01 	strb.w	r1, [r3], #1
   168f4:	429c      	cmp	r4, r3
   168f6:	d1fb      	bne.n	168f0 <memset+0x88>
   168f8:	bc70      	pop	{r4, r5, r6}
   168fa:	4770      	bx	lr
   168fc:	4614      	mov	r4, r2
   168fe:	4603      	mov	r3, r0
   16900:	e7c2      	b.n	16888 <memset+0x20>
   16902:	bf00      	nop

00016904 <rand>:
   16904:	b410      	push	{r4}
   16906:	4b0c      	ldr	r3, [pc, #48]	; (16938 <rand+0x34>)
   16908:	480c      	ldr	r0, [pc, #48]	; (1693c <rand+0x38>)
   1690a:	6819      	ldr	r1, [r3, #0]
   1690c:	4c0c      	ldr	r4, [pc, #48]	; (16940 <rand+0x3c>)
   1690e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   16912:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   16916:	fb00 f002 	mul.w	r0, r0, r2
   1691a:	fb04 0003 	mla	r0, r4, r3, r0
   1691e:	fba2 2304 	umull	r2, r3, r2, r4
   16922:	4403      	add	r3, r0
   16924:	3201      	adds	r2, #1
   16926:	f143 0300 	adc.w	r3, r3, #0
   1692a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1692e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   16932:	bc10      	pop	{r4}
   16934:	4770      	bx	lr
   16936:	bf00      	nop
   16938:	2000019c 	.word	0x2000019c
   1693c:	5851f42d 	.word	0x5851f42d
   16940:	4c957f2d 	.word	0x4c957f2d
	...

00016980 <strlen>:
   16980:	f890 f000 	pld	[r0]
   16984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   16988:	f020 0107 	bic.w	r1, r0, #7
   1698c:	f06f 0c00 	mvn.w	ip, #0
   16990:	f010 0407 	ands.w	r4, r0, #7
   16994:	f891 f020 	pld	[r1, #32]
   16998:	f040 8049 	bne.w	16a2e <strlen+0xae>
   1699c:	f04f 0400 	mov.w	r4, #0
   169a0:	f06f 0007 	mvn.w	r0, #7
   169a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   169a8:	f891 f040 	pld	[r1, #64]	; 0x40
   169ac:	f100 0008 	add.w	r0, r0, #8
   169b0:	fa82 f24c 	uadd8	r2, r2, ip
   169b4:	faa4 f28c 	sel	r2, r4, ip
   169b8:	fa83 f34c 	uadd8	r3, r3, ip
   169bc:	faa2 f38c 	sel	r3, r2, ip
   169c0:	bb4b      	cbnz	r3, 16a16 <strlen+0x96>
   169c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   169c6:	fa82 f24c 	uadd8	r2, r2, ip
   169ca:	f100 0008 	add.w	r0, r0, #8
   169ce:	faa4 f28c 	sel	r2, r4, ip
   169d2:	fa83 f34c 	uadd8	r3, r3, ip
   169d6:	faa2 f38c 	sel	r3, r2, ip
   169da:	b9e3      	cbnz	r3, 16a16 <strlen+0x96>
   169dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   169e0:	fa82 f24c 	uadd8	r2, r2, ip
   169e4:	f100 0008 	add.w	r0, r0, #8
   169e8:	faa4 f28c 	sel	r2, r4, ip
   169ec:	fa83 f34c 	uadd8	r3, r3, ip
   169f0:	faa2 f38c 	sel	r3, r2, ip
   169f4:	b97b      	cbnz	r3, 16a16 <strlen+0x96>
   169f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   169fa:	f101 0120 	add.w	r1, r1, #32
   169fe:	fa82 f24c 	uadd8	r2, r2, ip
   16a02:	f100 0008 	add.w	r0, r0, #8
   16a06:	faa4 f28c 	sel	r2, r4, ip
   16a0a:	fa83 f34c 	uadd8	r3, r3, ip
   16a0e:	faa2 f38c 	sel	r3, r2, ip
   16a12:	2b00      	cmp	r3, #0
   16a14:	d0c6      	beq.n	169a4 <strlen+0x24>
   16a16:	2a00      	cmp	r2, #0
   16a18:	bf04      	itt	eq
   16a1a:	3004      	addeq	r0, #4
   16a1c:	461a      	moveq	r2, r3
   16a1e:	ba12      	rev	r2, r2
   16a20:	fab2 f282 	clz	r2, r2
   16a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   16a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   16a2c:	4770      	bx	lr
   16a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   16a32:	f004 0503 	and.w	r5, r4, #3
   16a36:	f1c4 0000 	rsb	r0, r4, #0
   16a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   16a3e:	f014 0f04 	tst.w	r4, #4
   16a42:	f891 f040 	pld	[r1, #64]	; 0x40
   16a46:	fa0c f505 	lsl.w	r5, ip, r5
   16a4a:	ea62 0205 	orn	r2, r2, r5
   16a4e:	bf1c      	itt	ne
   16a50:	ea63 0305 	ornne	r3, r3, r5
   16a54:	4662      	movne	r2, ip
   16a56:	f04f 0400 	mov.w	r4, #0
   16a5a:	e7a9      	b.n	169b0 <strlen+0x30>

00016a5c <__tzcalc_limits>:
   16a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a60:	b083      	sub	sp, #12
   16a62:	4605      	mov	r5, r0
   16a64:	f000 fb64 	bl	17130 <__gettzinfo>
   16a68:	f240 73b1 	movw	r3, #1969	; 0x7b1
   16a6c:	429d      	cmp	r5, r3
   16a6e:	f340 8093 	ble.w	16b98 <__tzcalc_limits+0x13c>
   16a72:	4c57      	ldr	r4, [pc, #348]	; (16bd0 <__tzcalc_limits+0x174>)
   16a74:	f8df 8164 	ldr.w	r8, [pc, #356]	; 16bdc <__tzcalc_limits+0x180>
   16a78:	6045      	str	r5, [r0, #4]
   16a7a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   16a7e:	18ee      	adds	r6, r5, r3
   16a80:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   16a84:	fb84 3102 	smull	r3, r1, r4, r2
   16a88:	10b7      	asrs	r7, r6, #2
   16a8a:	f240 1e6d 	movw	lr, #365	; 0x16d
   16a8e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   16a92:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   16a96:	17d2      	asrs	r2, r2, #31
   16a98:	eb05 030c 	add.w	r3, r5, ip
   16a9c:	fb0e 7606 	mla	r6, lr, r6, r7
   16aa0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   16aa4:	17ef      	asrs	r7, r5, #31
   16aa6:	fb84 c105 	smull	ip, r1, r4, r5
   16aaa:	4416      	add	r6, r2
   16aac:	fb84 e403 	smull	lr, r4, r4, r3
   16ab0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   16ab4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   16ab8:	17db      	asrs	r3, r3, #31
   16aba:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   16abe:	fb02 5e1e 	mls	lr, r2, lr, r5
   16ac2:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   16ac6:	2264      	movs	r2, #100	; 0x64
   16ac8:	441e      	add	r6, r3
   16aca:	f1be 0f00 	cmp.w	lr, #0
   16ace:	bf0c      	ite	eq
   16ad0:	2330      	moveq	r3, #48	; 0x30
   16ad2:	2300      	movne	r3, #0
   16ad4:	fb02 5717 	mls	r7, r2, r7, r5
   16ad8:	9301      	str	r3, [sp, #4]
   16ada:	f005 0503 	and.w	r5, r5, #3
   16ade:	4604      	mov	r4, r0
   16ae0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   16ae4:	7a23      	ldrb	r3, [r4, #8]
   16ae6:	2b4a      	cmp	r3, #74	; 0x4a
   16ae8:	d05a      	beq.n	16ba0 <__tzcalc_limits+0x144>
   16aea:	2b44      	cmp	r3, #68	; 0x44
   16aec:	d068      	beq.n	16bc0 <__tzcalc_limits+0x164>
   16aee:	2d00      	cmp	r5, #0
   16af0:	d04b      	beq.n	16b8a <__tzcalc_limits+0x12e>
   16af2:	f8dd 9004 	ldr.w	r9, [sp, #4]
   16af6:	68e3      	ldr	r3, [r4, #12]
   16af8:	4a36      	ldr	r2, [pc, #216]	; (16bd4 <__tzcalc_limits+0x178>)
   16afa:	2b01      	cmp	r3, #1
   16afc:	4491      	add	r9, r2
   16afe:	dd62      	ble.n	16bc6 <__tzcalc_limits+0x16a>
   16b00:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   16b04:	f1ab 0b02 	sub.w	fp, fp, #2
   16b08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   16b0c:	eb09 0a0b 	add.w	sl, r9, fp
   16b10:	f1a9 0304 	sub.w	r3, r9, #4
   16b14:	4632      	mov	r2, r6
   16b16:	f853 1f04 	ldr.w	r1, [r3, #4]!
   16b1a:	459a      	cmp	sl, r3
   16b1c:	440a      	add	r2, r1
   16b1e:	d1fa      	bne.n	16b16 <__tzcalc_limits+0xba>
   16b20:	f10b 0b04 	add.w	fp, fp, #4
   16b24:	4b2c      	ldr	r3, [pc, #176]	; (16bd8 <__tzcalc_limits+0x17c>)
   16b26:	f859 900b 	ldr.w	r9, [r9, fp]
   16b2a:	1d11      	adds	r1, r2, #4
   16b2c:	fb83 a301 	smull	sl, r3, r3, r1
   16b30:	440b      	add	r3, r1
   16b32:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   16b36:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   16b3a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   16b3e:	6963      	ldr	r3, [r4, #20]
   16b40:	eba1 010a 	sub.w	r1, r1, sl
   16b44:	1a59      	subs	r1, r3, r1
   16b46:	6923      	ldr	r3, [r4, #16]
   16b48:	f103 33ff 	add.w	r3, r3, #4294967295
   16b4c:	bf48      	it	mi
   16b4e:	3107      	addmi	r1, #7
   16b50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   16b54:	440b      	add	r3, r1
   16b56:	454b      	cmp	r3, r9
   16b58:	db02      	blt.n	16b60 <__tzcalc_limits+0x104>
   16b5a:	3b07      	subs	r3, #7
   16b5c:	454b      	cmp	r3, r9
   16b5e:	dafc      	bge.n	16b5a <__tzcalc_limits+0xfe>
   16b60:	441a      	add	r2, r3
   16b62:	69a1      	ldr	r1, [r4, #24]
   16b64:	6a23      	ldr	r3, [r4, #32]
   16b66:	fb08 1102 	mla	r1, r8, r2, r1
   16b6a:	440b      	add	r3, r1
   16b6c:	f844 3f1c 	str.w	r3, [r4, #28]!
   16b70:	45a4      	cmp	ip, r4
   16b72:	d1b7      	bne.n	16ae4 <__tzcalc_limits+0x88>
   16b74:	69c3      	ldr	r3, [r0, #28]
   16b76:	6b82      	ldr	r2, [r0, #56]	; 0x38
   16b78:	4293      	cmp	r3, r2
   16b7a:	bfac      	ite	ge
   16b7c:	2300      	movge	r3, #0
   16b7e:	2301      	movlt	r3, #1
   16b80:	6003      	str	r3, [r0, #0]
   16b82:	2001      	movs	r0, #1
   16b84:	b003      	add	sp, #12
   16b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b8a:	9b01      	ldr	r3, [sp, #4]
   16b8c:	2f00      	cmp	r7, #0
   16b8e:	bf0c      	ite	eq
   16b90:	4699      	moveq	r9, r3
   16b92:	f04f 0930 	movne.w	r9, #48	; 0x30
   16b96:	e7ae      	b.n	16af6 <__tzcalc_limits+0x9a>
   16b98:	2000      	movs	r0, #0
   16b9a:	b003      	add	sp, #12
   16b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba0:	6962      	ldr	r2, [r4, #20]
   16ba2:	18b1      	adds	r1, r6, r2
   16ba4:	b93d      	cbnz	r5, 16bb6 <__tzcalc_limits+0x15a>
   16ba6:	b137      	cbz	r7, 16bb6 <__tzcalc_limits+0x15a>
   16ba8:	2a3b      	cmp	r2, #59	; 0x3b
   16baa:	bfd4      	ite	le
   16bac:	2200      	movle	r2, #0
   16bae:	2201      	movgt	r2, #1
   16bb0:	440a      	add	r2, r1
   16bb2:	3a01      	subs	r2, #1
   16bb4:	e7d5      	b.n	16b62 <__tzcalc_limits+0x106>
   16bb6:	f1be 0f00 	cmp.w	lr, #0
   16bba:	d0f5      	beq.n	16ba8 <__tzcalc_limits+0x14c>
   16bbc:	2200      	movs	r2, #0
   16bbe:	e7f7      	b.n	16bb0 <__tzcalc_limits+0x154>
   16bc0:	6962      	ldr	r2, [r4, #20]
   16bc2:	4432      	add	r2, r6
   16bc4:	e7cd      	b.n	16b62 <__tzcalc_limits+0x106>
   16bc6:	4632      	mov	r2, r6
   16bc8:	f04f 0b00 	mov.w	fp, #0
   16bcc:	e7aa      	b.n	16b24 <__tzcalc_limits+0xc8>
   16bce:	bf00      	nop
   16bd0:	51eb851f 	.word	0x51eb851f
   16bd4:	0001c04c 	.word	0x0001c04c
   16bd8:	92492493 	.word	0x92492493
   16bdc:	00015180 	.word	0x00015180

00016be0 <__tz_lock>:
   16be0:	4801      	ldr	r0, [pc, #4]	; (16be8 <__tz_lock+0x8>)
   16be2:	f000 bb93 	b.w	1730c <__retarget_lock_acquire>
   16be6:	bf00      	nop
   16be8:	20005188 	.word	0x20005188

00016bec <__tz_unlock>:
   16bec:	4801      	ldr	r0, [pc, #4]	; (16bf4 <__tz_unlock+0x8>)
   16bee:	f000 bb91 	b.w	17314 <__retarget_lock_release>
   16bf2:	bf00      	nop
   16bf4:	20005188 	.word	0x20005188

00016bf8 <_tzset_unlocked>:
   16bf8:	4b01      	ldr	r3, [pc, #4]	; (16c00 <_tzset_unlocked+0x8>)
   16bfa:	6818      	ldr	r0, [r3, #0]
   16bfc:	f000 b802 	b.w	16c04 <_tzset_unlocked_r>
   16c00:	2000019c 	.word	0x2000019c

00016c04 <_tzset_unlocked_r>:
   16c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c08:	b08b      	sub	sp, #44	; 0x2c
   16c0a:	4607      	mov	r7, r0
   16c0c:	f000 fa90 	bl	17130 <__gettzinfo>
   16c10:	49bb      	ldr	r1, [pc, #748]	; (16f00 <_tzset_unlocked_r+0x2fc>)
   16c12:	4dbc      	ldr	r5, [pc, #752]	; (16f04 <_tzset_unlocked_r+0x300>)
   16c14:	4606      	mov	r6, r0
   16c16:	4638      	mov	r0, r7
   16c18:	f000 fa82 	bl	17120 <_getenv_r>
   16c1c:	4604      	mov	r4, r0
   16c1e:	2800      	cmp	r0, #0
   16c20:	f000 80f7 	beq.w	16e12 <_tzset_unlocked_r+0x20e>
   16c24:	6829      	ldr	r1, [r5, #0]
   16c26:	b131      	cbz	r1, 16c36 <_tzset_unlocked_r+0x32>
   16c28:	f000 fefe 	bl	17a28 <strcmp>
   16c2c:	b910      	cbnz	r0, 16c34 <_tzset_unlocked_r+0x30>
   16c2e:	b00b      	add	sp, #44	; 0x2c
   16c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c34:	6829      	ldr	r1, [r5, #0]
   16c36:	4608      	mov	r0, r1
   16c38:	f7fa fb76 	bl	11328 <free>
   16c3c:	4620      	mov	r0, r4
   16c3e:	f7ff fe9f 	bl	16980 <strlen>
   16c42:	1c41      	adds	r1, r0, #1
   16c44:	4638      	mov	r0, r7
   16c46:	f000 fb69 	bl	1731c <_malloc_r>
   16c4a:	6028      	str	r0, [r5, #0]
   16c4c:	b110      	cbz	r0, 16c54 <_tzset_unlocked_r+0x50>
   16c4e:	4621      	mov	r1, r4
   16c50:	f001 f854 	bl	17cfc <strcpy>
   16c54:	7823      	ldrb	r3, [r4, #0]
   16c56:	4aac      	ldr	r2, [pc, #688]	; (16f08 <_tzset_unlocked_r+0x304>)
   16c58:	49ac      	ldr	r1, [pc, #688]	; (16f0c <_tzset_unlocked_r+0x308>)
   16c5a:	2b3a      	cmp	r3, #58	; 0x3a
   16c5c:	bf08      	it	eq
   16c5e:	3401      	addeq	r4, #1
   16c60:	ad08      	add	r5, sp, #32
   16c62:	462b      	mov	r3, r5
   16c64:	4620      	mov	r0, r4
   16c66:	f000 fe9f 	bl	179a8 <siscanf>
   16c6a:	2800      	cmp	r0, #0
   16c6c:	dddf      	ble.n	16c2e <_tzset_unlocked_r+0x2a>
   16c6e:	9b08      	ldr	r3, [sp, #32]
   16c70:	5ce2      	ldrb	r2, [r4, r3]
   16c72:	2a2d      	cmp	r2, #45	; 0x2d
   16c74:	441c      	add	r4, r3
   16c76:	f000 80c8 	beq.w	16e0a <_tzset_unlocked_r+0x206>
   16c7a:	2a2b      	cmp	r2, #43	; 0x2b
   16c7c:	bf08      	it	eq
   16c7e:	3401      	addeq	r4, #1
   16c80:	f04f 0801 	mov.w	r8, #1
   16c84:	ab06      	add	r3, sp, #24
   16c86:	9302      	str	r3, [sp, #8]
   16c88:	f10d 0316 	add.w	r3, sp, #22
   16c8c:	2700      	movs	r7, #0
   16c8e:	9300      	str	r3, [sp, #0]
   16c90:	9503      	str	r5, [sp, #12]
   16c92:	9501      	str	r5, [sp, #4]
   16c94:	aa05      	add	r2, sp, #20
   16c96:	462b      	mov	r3, r5
   16c98:	499d      	ldr	r1, [pc, #628]	; (16f10 <_tzset_unlocked_r+0x30c>)
   16c9a:	f8ad 7016 	strh.w	r7, [sp, #22]
   16c9e:	4620      	mov	r0, r4
   16ca0:	f8ad 7018 	strh.w	r7, [sp, #24]
   16ca4:	f000 fe80 	bl	179a8 <siscanf>
   16ca8:	42b8      	cmp	r0, r7
   16caa:	ddc0      	ble.n	16c2e <_tzset_unlocked_r+0x2a>
   16cac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   16cb0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   16cb4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   16cb8:	9808      	ldr	r0, [sp, #32]
   16cba:	f8df a26c 	ldr.w	sl, [pc, #620]	; 16f28 <_tzset_unlocked_r+0x324>
   16cbe:	f8df 925c 	ldr.w	r9, [pc, #604]	; 16f1c <_tzset_unlocked_r+0x318>
   16cc2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   16cc6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   16cca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   16cce:	fb01 3302 	mla	r3, r1, r2, r3
   16cd2:	fb08 f303 	mul.w	r3, r8, r3
   16cd6:	6233      	str	r3, [r6, #32]
   16cd8:	4404      	add	r4, r0
   16cda:	4b8b      	ldr	r3, [pc, #556]	; (16f08 <_tzset_unlocked_r+0x304>)
   16cdc:	f8c9 3000 	str.w	r3, [r9]
   16ce0:	4620      	mov	r0, r4
   16ce2:	4652      	mov	r2, sl
   16ce4:	4989      	ldr	r1, [pc, #548]	; (16f0c <_tzset_unlocked_r+0x308>)
   16ce6:	462b      	mov	r3, r5
   16ce8:	f000 fe5e 	bl	179a8 <siscanf>
   16cec:	42b8      	cmp	r0, r7
   16cee:	f340 8082 	ble.w	16df6 <_tzset_unlocked_r+0x1f2>
   16cf2:	9808      	ldr	r0, [sp, #32]
   16cf4:	f8c9 a004 	str.w	sl, [r9, #4]
   16cf8:	5c23      	ldrb	r3, [r4, r0]
   16cfa:	2b2d      	cmp	r3, #45	; 0x2d
   16cfc:	4404      	add	r4, r0
   16cfe:	f000 8095 	beq.w	16e2c <_tzset_unlocked_r+0x228>
   16d02:	2b2b      	cmp	r3, #43	; 0x2b
   16d04:	bf08      	it	eq
   16d06:	3401      	addeq	r4, #1
   16d08:	f04f 0801 	mov.w	r8, #1
   16d0c:	ab06      	add	r3, sp, #24
   16d0e:	9302      	str	r3, [sp, #8]
   16d10:	f10d 0316 	add.w	r3, sp, #22
   16d14:	2700      	movs	r7, #0
   16d16:	9300      	str	r3, [sp, #0]
   16d18:	9503      	str	r5, [sp, #12]
   16d1a:	9501      	str	r5, [sp, #4]
   16d1c:	462b      	mov	r3, r5
   16d1e:	aa05      	add	r2, sp, #20
   16d20:	497b      	ldr	r1, [pc, #492]	; (16f10 <_tzset_unlocked_r+0x30c>)
   16d22:	f8ad 7014 	strh.w	r7, [sp, #20]
   16d26:	4620      	mov	r0, r4
   16d28:	f8ad 7016 	strh.w	r7, [sp, #22]
   16d2c:	f8ad 7018 	strh.w	r7, [sp, #24]
   16d30:	9708      	str	r7, [sp, #32]
   16d32:	f000 fe39 	bl	179a8 <siscanf>
   16d36:	42b8      	cmp	r0, r7
   16d38:	dd7c      	ble.n	16e34 <_tzset_unlocked_r+0x230>
   16d3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   16d3e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   16d42:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   16d46:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   16d4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   16d4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   16d52:	fb01 3302 	mla	r3, r1, r2, r3
   16d56:	fb08 f303 	mul.w	r3, r8, r3
   16d5a:	63f3      	str	r3, [r6, #60]	; 0x3c
   16d5c:	9b08      	ldr	r3, [sp, #32]
   16d5e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 16f2c <_tzset_unlocked_r+0x328>
   16d62:	441c      	add	r4, r3
   16d64:	46b0      	mov	r8, r6
   16d66:	f04f 0a00 	mov.w	sl, #0
   16d6a:	7827      	ldrb	r7, [r4, #0]
   16d6c:	2f2c      	cmp	r7, #44	; 0x2c
   16d6e:	bf04      	itt	eq
   16d70:	7867      	ldrbeq	r7, [r4, #1]
   16d72:	3401      	addeq	r4, #1
   16d74:	2f4d      	cmp	r7, #77	; 0x4d
   16d76:	d062      	beq.n	16e3e <_tzset_unlocked_r+0x23a>
   16d78:	2f4a      	cmp	r7, #74	; 0x4a
   16d7a:	bf08      	it	eq
   16d7c:	3401      	addeq	r4, #1
   16d7e:	f04f 020a 	mov.w	r2, #10
   16d82:	a909      	add	r1, sp, #36	; 0x24
   16d84:	4620      	mov	r0, r4
   16d86:	bf18      	it	ne
   16d88:	2744      	movne	r7, #68	; 0x44
   16d8a:	f001 f91d 	bl	17fc8 <strtoul>
   16d8e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   16d92:	f8ad 001e 	strh.w	r0, [sp, #30]
   16d96:	454c      	cmp	r4, r9
   16d98:	f000 809c 	beq.w	16ed4 <_tzset_unlocked_r+0x2d0>
   16d9c:	b280      	uxth	r0, r0
   16d9e:	f8c8 0014 	str.w	r0, [r8, #20]
   16da2:	f888 7008 	strb.w	r7, [r8, #8]
   16da6:	2400      	movs	r4, #0
   16da8:	2302      	movs	r3, #2
   16daa:	f8ad 3014 	strh.w	r3, [sp, #20]
   16dae:	f8ad 4016 	strh.w	r4, [sp, #22]
   16db2:	f8ad 4018 	strh.w	r4, [sp, #24]
   16db6:	9408      	str	r4, [sp, #32]
   16db8:	f899 3000 	ldrb.w	r3, [r9]
   16dbc:	2b2f      	cmp	r3, #47	; 0x2f
   16dbe:	d06c      	beq.n	16e9a <_tzset_unlocked_r+0x296>
   16dc0:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   16dc4:	f10a 0a01 	add.w	sl, sl, #1
   16dc8:	f1ba 0f02 	cmp.w	sl, #2
   16dcc:	f8c8 3018 	str.w	r3, [r8, #24]
   16dd0:	444c      	add	r4, r9
   16dd2:	f108 081c 	add.w	r8, r8, #28
   16dd6:	d1c8      	bne.n	16d6a <_tzset_unlocked_r+0x166>
   16dd8:	6870      	ldr	r0, [r6, #4]
   16dda:	f7ff fe3f 	bl	16a5c <__tzcalc_limits>
   16dde:	6a32      	ldr	r2, [r6, #32]
   16de0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   16de2:	484c      	ldr	r0, [pc, #304]	; (16f14 <_tzset_unlocked_r+0x310>)
   16de4:	494c      	ldr	r1, [pc, #304]	; (16f18 <_tzset_unlocked_r+0x314>)
   16de6:	1a9b      	subs	r3, r3, r2
   16de8:	bf18      	it	ne
   16dea:	2301      	movne	r3, #1
   16dec:	6003      	str	r3, [r0, #0]
   16dee:	600a      	str	r2, [r1, #0]
   16df0:	b00b      	add	sp, #44	; 0x2c
   16df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df6:	4948      	ldr	r1, [pc, #288]	; (16f18 <_tzset_unlocked_r+0x314>)
   16df8:	4a46      	ldr	r2, [pc, #280]	; (16f14 <_tzset_unlocked_r+0x310>)
   16dfa:	6a30      	ldr	r0, [r6, #32]
   16dfc:	f8d9 3000 	ldr.w	r3, [r9]
   16e00:	6008      	str	r0, [r1, #0]
   16e02:	6017      	str	r7, [r2, #0]
   16e04:	f8c9 3004 	str.w	r3, [r9, #4]
   16e08:	e711      	b.n	16c2e <_tzset_unlocked_r+0x2a>
   16e0a:	3401      	adds	r4, #1
   16e0c:	f04f 38ff 	mov.w	r8, #4294967295
   16e10:	e738      	b.n	16c84 <_tzset_unlocked_r+0x80>
   16e12:	4b42      	ldr	r3, [pc, #264]	; (16f1c <_tzset_unlocked_r+0x318>)
   16e14:	493f      	ldr	r1, [pc, #252]	; (16f14 <_tzset_unlocked_r+0x310>)
   16e16:	4e40      	ldr	r6, [pc, #256]	; (16f18 <_tzset_unlocked_r+0x314>)
   16e18:	4a41      	ldr	r2, [pc, #260]	; (16f20 <_tzset_unlocked_r+0x31c>)
   16e1a:	6828      	ldr	r0, [r5, #0]
   16e1c:	6034      	str	r4, [r6, #0]
   16e1e:	600c      	str	r4, [r1, #0]
   16e20:	601a      	str	r2, [r3, #0]
   16e22:	605a      	str	r2, [r3, #4]
   16e24:	f7fa fa80 	bl	11328 <free>
   16e28:	602c      	str	r4, [r5, #0]
   16e2a:	e700      	b.n	16c2e <_tzset_unlocked_r+0x2a>
   16e2c:	3401      	adds	r4, #1
   16e2e:	f04f 38ff 	mov.w	r8, #4294967295
   16e32:	e76b      	b.n	16d0c <_tzset_unlocked_r+0x108>
   16e34:	6a33      	ldr	r3, [r6, #32]
   16e36:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   16e3a:	63f3      	str	r3, [r6, #60]	; 0x3c
   16e3c:	e78e      	b.n	16d5c <_tzset_unlocked_r+0x158>
   16e3e:	f10d 021e 	add.w	r2, sp, #30
   16e42:	ab07      	add	r3, sp, #28
   16e44:	9202      	str	r2, [sp, #8]
   16e46:	9300      	str	r3, [sp, #0]
   16e48:	9503      	str	r5, [sp, #12]
   16e4a:	9501      	str	r5, [sp, #4]
   16e4c:	462b      	mov	r3, r5
   16e4e:	f10d 021a 	add.w	r2, sp, #26
   16e52:	4659      	mov	r1, fp
   16e54:	4620      	mov	r0, r4
   16e56:	f000 fda7 	bl	179a8 <siscanf>
   16e5a:	2803      	cmp	r0, #3
   16e5c:	f47f aee7 	bne.w	16c2e <_tzset_unlocked_r+0x2a>
   16e60:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   16e64:	1e5a      	subs	r2, r3, #1
   16e66:	2a0b      	cmp	r2, #11
   16e68:	f63f aee1 	bhi.w	16c2e <_tzset_unlocked_r+0x2a>
   16e6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   16e70:	1e51      	subs	r1, r2, #1
   16e72:	2904      	cmp	r1, #4
   16e74:	f63f aedb 	bhi.w	16c2e <_tzset_unlocked_r+0x2a>
   16e78:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   16e7c:	2906      	cmp	r1, #6
   16e7e:	f63f aed6 	bhi.w	16c2e <_tzset_unlocked_r+0x2a>
   16e82:	f888 7008 	strb.w	r7, [r8, #8]
   16e86:	f8c8 300c 	str.w	r3, [r8, #12]
   16e8a:	f8c8 2010 	str.w	r2, [r8, #16]
   16e8e:	f8c8 1014 	str.w	r1, [r8, #20]
   16e92:	9b08      	ldr	r3, [sp, #32]
   16e94:	eb04 0903 	add.w	r9, r4, r3
   16e98:	e785      	b.n	16da6 <_tzset_unlocked_r+0x1a2>
   16e9a:	ab06      	add	r3, sp, #24
   16e9c:	9302      	str	r3, [sp, #8]
   16e9e:	f10d 0316 	add.w	r3, sp, #22
   16ea2:	9300      	str	r3, [sp, #0]
   16ea4:	aa05      	add	r2, sp, #20
   16ea6:	462b      	mov	r3, r5
   16ea8:	491e      	ldr	r1, [pc, #120]	; (16f24 <_tzset_unlocked_r+0x320>)
   16eaa:	9503      	str	r5, [sp, #12]
   16eac:	9501      	str	r5, [sp, #4]
   16eae:	4648      	mov	r0, r9
   16eb0:	f000 fd7a 	bl	179a8 <siscanf>
   16eb4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   16eb8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   16ebc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   16ec0:	9c08      	ldr	r4, [sp, #32]
   16ec2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   16ec6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   16eca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   16ece:	fb01 2303 	mla	r3, r1, r3, r2
   16ed2:	e777      	b.n	16dc4 <_tzset_unlocked_r+0x1c0>
   16ed4:	f1ba 0f00 	cmp.w	sl, #0
   16ed8:	d009      	beq.n	16eee <_tzset_unlocked_r+0x2ea>
   16eda:	224d      	movs	r2, #77	; 0x4d
   16edc:	230b      	movs	r3, #11
   16ede:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   16ee2:	62b3      	str	r3, [r6, #40]	; 0x28
   16ee4:	2201      	movs	r2, #1
   16ee6:	2300      	movs	r3, #0
   16ee8:	62f2      	str	r2, [r6, #44]	; 0x2c
   16eea:	6333      	str	r3, [r6, #48]	; 0x30
   16eec:	e75b      	b.n	16da6 <_tzset_unlocked_r+0x1a2>
   16eee:	234d      	movs	r3, #77	; 0x4d
   16ef0:	2203      	movs	r2, #3
   16ef2:	7233      	strb	r3, [r6, #8]
   16ef4:	2302      	movs	r3, #2
   16ef6:	f8c6 a014 	str.w	sl, [r6, #20]
   16efa:	60f2      	str	r2, [r6, #12]
   16efc:	6133      	str	r3, [r6, #16]
   16efe:	e752      	b.n	16da6 <_tzset_unlocked_r+0x1a2>
   16f00:	0001c0ac 	.word	0x0001c0ac
   16f04:	20004f24 	.word	0x20004f24
   16f08:	20004f18 	.word	0x20004f18
   16f0c:	0001c0b4 	.word	0x0001c0b4
   16f10:	0001c0c4 	.word	0x0001c0c4
   16f14:	20004f28 	.word	0x20004f28
   16f18:	20004f2c 	.word	0x20004f2c
   16f1c:	200005c8 	.word	0x200005c8
   16f20:	0001c0b0 	.word	0x0001c0b0
   16f24:	0001c0ec 	.word	0x0001c0ec
   16f28:	20004f0c 	.word	0x20004f0c
   16f2c:	0001c0d8 	.word	0x0001c0d8

00016f30 <__register_exitproc>:
   16f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16f34:	4d2c      	ldr	r5, [pc, #176]	; (16fe8 <__register_exitproc+0xb8>)
   16f36:	4606      	mov	r6, r0
   16f38:	6828      	ldr	r0, [r5, #0]
   16f3a:	4698      	mov	r8, r3
   16f3c:	460f      	mov	r7, r1
   16f3e:	4691      	mov	r9, r2
   16f40:	f000 f9e6 	bl	17310 <__retarget_lock_acquire_recursive>
   16f44:	4b29      	ldr	r3, [pc, #164]	; (16fec <__register_exitproc+0xbc>)
   16f46:	681c      	ldr	r4, [r3, #0]
   16f48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	d03e      	beq.n	16fce <__register_exitproc+0x9e>
   16f50:	685a      	ldr	r2, [r3, #4]
   16f52:	2a1f      	cmp	r2, #31
   16f54:	dc1c      	bgt.n	16f90 <__register_exitproc+0x60>
   16f56:	f102 0e01 	add.w	lr, r2, #1
   16f5a:	b176      	cbz	r6, 16f7a <__register_exitproc+0x4a>
   16f5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   16f60:	2401      	movs	r4, #1
   16f62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   16f66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   16f6a:	4094      	lsls	r4, r2
   16f6c:	4320      	orrs	r0, r4
   16f6e:	2e02      	cmp	r6, #2
   16f70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   16f74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   16f78:	d023      	beq.n	16fc2 <__register_exitproc+0x92>
   16f7a:	3202      	adds	r2, #2
   16f7c:	f8c3 e004 	str.w	lr, [r3, #4]
   16f80:	6828      	ldr	r0, [r5, #0]
   16f82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   16f86:	f000 f9c7 	bl	17318 <__retarget_lock_release_recursive>
   16f8a:	2000      	movs	r0, #0
   16f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16f90:	4b17      	ldr	r3, [pc, #92]	; (16ff0 <__register_exitproc+0xc0>)
   16f92:	b30b      	cbz	r3, 16fd8 <__register_exitproc+0xa8>
   16f94:	f44f 70c8 	mov.w	r0, #400	; 0x190
   16f98:	f7fa f9bc 	bl	11314 <malloc>
   16f9c:	4603      	mov	r3, r0
   16f9e:	b1d8      	cbz	r0, 16fd8 <__register_exitproc+0xa8>
   16fa0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   16fa4:	6002      	str	r2, [r0, #0]
   16fa6:	2100      	movs	r1, #0
   16fa8:	6041      	str	r1, [r0, #4]
   16faa:	460a      	mov	r2, r1
   16fac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   16fb0:	f04f 0e01 	mov.w	lr, #1
   16fb4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   16fb8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   16fbc:	2e00      	cmp	r6, #0
   16fbe:	d0dc      	beq.n	16f7a <__register_exitproc+0x4a>
   16fc0:	e7cc      	b.n	16f5c <__register_exitproc+0x2c>
   16fc2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   16fc6:	430c      	orrs	r4, r1
   16fc8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   16fcc:	e7d5      	b.n	16f7a <__register_exitproc+0x4a>
   16fce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   16fd2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   16fd6:	e7bb      	b.n	16f50 <__register_exitproc+0x20>
   16fd8:	6828      	ldr	r0, [r5, #0]
   16fda:	f000 f99d 	bl	17318 <__retarget_lock_release_recursive>
   16fde:	f04f 30ff 	mov.w	r0, #4294967295
   16fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16fe6:	bf00      	nop
   16fe8:	200005d0 	.word	0x200005d0
   16fec:	0001c048 	.word	0x0001c048
   16ff0:	00011315 	.word	0x00011315

00016ff4 <register_fini>:
   16ff4:	4b02      	ldr	r3, [pc, #8]	; (17000 <register_fini+0xc>)
   16ff6:	b113      	cbz	r3, 16ffe <register_fini+0xa>
   16ff8:	4802      	ldr	r0, [pc, #8]	; (17004 <register_fini+0x10>)
   16ffa:	f000 b833 	b.w	17064 <atexit>
   16ffe:	4770      	bx	lr
   17000:	00000000 	.word	0x00000000
   17004:	00017071 	.word	0x00017071

00017008 <asctime>:
   17008:	4b02      	ldr	r3, [pc, #8]	; (17014 <asctime+0xc>)
   1700a:	6819      	ldr	r1, [r3, #0]
   1700c:	3160      	adds	r1, #96	; 0x60
   1700e:	f000 b803 	b.w	17018 <asctime_r>
   17012:	bf00      	nop
   17014:	2000019c 	.word	0x2000019c

00017018 <asctime_r>:
   17018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1701a:	6946      	ldr	r6, [r0, #20]
   1701c:	6807      	ldr	r7, [r0, #0]
   1701e:	6905      	ldr	r5, [r0, #16]
   17020:	6984      	ldr	r4, [r0, #24]
   17022:	4b0d      	ldr	r3, [pc, #52]	; (17058 <asctime_r+0x40>)
   17024:	4a0d      	ldr	r2, [pc, #52]	; (1705c <asctime_r+0x44>)
   17026:	b087      	sub	sp, #28
   17028:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1702c:	9703      	str	r7, [sp, #12]
   1702e:	460f      	mov	r7, r1
   17030:	6841      	ldr	r1, [r0, #4]
   17032:	9604      	str	r6, [sp, #16]
   17034:	6886      	ldr	r6, [r0, #8]
   17036:	68c0      	ldr	r0, [r0, #12]
   17038:	9102      	str	r1, [sp, #8]
   1703a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1703e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   17042:	e88d 0041 	stmia.w	sp, {r0, r6}
   17046:	442b      	add	r3, r5
   17048:	4422      	add	r2, r4
   1704a:	4638      	mov	r0, r7
   1704c:	4904      	ldr	r1, [pc, #16]	; (17060 <asctime_r+0x48>)
   1704e:	f000 fc85 	bl	1795c <siprintf>
   17052:	4638      	mov	r0, r7
   17054:	b007      	add	sp, #28
   17056:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17058:	0001c138 	.word	0x0001c138
   1705c:	0001c120 	.word	0x0001c120
   17060:	0001c100 	.word	0x0001c100

00017064 <atexit>:
   17064:	2300      	movs	r3, #0
   17066:	4601      	mov	r1, r0
   17068:	461a      	mov	r2, r3
   1706a:	4618      	mov	r0, r3
   1706c:	f7ff bf60 	b.w	16f30 <__register_exitproc>

00017070 <__libc_fini_array>:
   17070:	b538      	push	{r3, r4, r5, lr}
   17072:	4c0a      	ldr	r4, [pc, #40]	; (1709c <__libc_fini_array+0x2c>)
   17074:	4d0a      	ldr	r5, [pc, #40]	; (170a0 <__libc_fini_array+0x30>)
   17076:	1b64      	subs	r4, r4, r5
   17078:	10a4      	asrs	r4, r4, #2
   1707a:	d00a      	beq.n	17092 <__libc_fini_array+0x22>
   1707c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   17080:	3b01      	subs	r3, #1
   17082:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   17086:	3c01      	subs	r4, #1
   17088:	f855 3904 	ldr.w	r3, [r5], #-4
   1708c:	4798      	blx	r3
   1708e:	2c00      	cmp	r4, #0
   17090:	d1f9      	bne.n	17086 <__libc_fini_array+0x16>
   17092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17096:	f005 b951 	b.w	1c33c <_fini>
   1709a:	bf00      	nop
   1709c:	0001c34c 	.word	0x0001c34c
   170a0:	0001c348 	.word	0x0001c348

000170a4 <_findenv_r>:
   170a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   170a8:	4f1c      	ldr	r7, [pc, #112]	; (1711c <_findenv_r+0x78>)
   170aa:	460e      	mov	r6, r1
   170ac:	4691      	mov	r9, r2
   170ae:	4680      	mov	r8, r0
   170b0:	f002 faf2 	bl	19698 <__env_lock>
   170b4:	683d      	ldr	r5, [r7, #0]
   170b6:	b1f5      	cbz	r5, 170f6 <_findenv_r+0x52>
   170b8:	7834      	ldrb	r4, [r6, #0]
   170ba:	b15c      	cbz	r4, 170d4 <_findenv_r+0x30>
   170bc:	2c3d      	cmp	r4, #61	; 0x3d
   170be:	bf18      	it	ne
   170c0:	4634      	movne	r4, r6
   170c2:	d102      	bne.n	170ca <_findenv_r+0x26>
   170c4:	e017      	b.n	170f6 <_findenv_r+0x52>
   170c6:	2b3d      	cmp	r3, #61	; 0x3d
   170c8:	d015      	beq.n	170f6 <_findenv_r+0x52>
   170ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   170ce:	2b00      	cmp	r3, #0
   170d0:	d1f9      	bne.n	170c6 <_findenv_r+0x22>
   170d2:	1ba4      	subs	r4, r4, r6
   170d4:	6828      	ldr	r0, [r5, #0]
   170d6:	b170      	cbz	r0, 170f6 <_findenv_r+0x52>
   170d8:	4622      	mov	r2, r4
   170da:	4631      	mov	r1, r6
   170dc:	f000 fe6c 	bl	17db8 <strncmp>
   170e0:	b928      	cbnz	r0, 170ee <_findenv_r+0x4a>
   170e2:	6828      	ldr	r0, [r5, #0]
   170e4:	5d03      	ldrb	r3, [r0, r4]
   170e6:	2b3d      	cmp	r3, #61	; 0x3d
   170e8:	eb00 0a04 	add.w	sl, r0, r4
   170ec:	d009      	beq.n	17102 <_findenv_r+0x5e>
   170ee:	f855 0f04 	ldr.w	r0, [r5, #4]!
   170f2:	2800      	cmp	r0, #0
   170f4:	d1f0      	bne.n	170d8 <_findenv_r+0x34>
   170f6:	4640      	mov	r0, r8
   170f8:	f002 fad4 	bl	196a4 <__env_unlock>
   170fc:	2000      	movs	r0, #0
   170fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17102:	683b      	ldr	r3, [r7, #0]
   17104:	1aed      	subs	r5, r5, r3
   17106:	10ad      	asrs	r5, r5, #2
   17108:	4640      	mov	r0, r8
   1710a:	f8c9 5000 	str.w	r5, [r9]
   1710e:	f002 fac9 	bl	196a4 <__env_unlock>
   17112:	f10a 0001 	add.w	r0, sl, #1
   17116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1711a:	bf00      	nop
   1711c:	20000a24 	.word	0x20000a24

00017120 <_getenv_r>:
   17120:	b500      	push	{lr}
   17122:	b083      	sub	sp, #12
   17124:	aa01      	add	r2, sp, #4
   17126:	f7ff ffbd 	bl	170a4 <_findenv_r>
   1712a:	b003      	add	sp, #12
   1712c:	f85d fb04 	ldr.w	pc, [sp], #4

00017130 <__gettzinfo>:
   17130:	4800      	ldr	r0, [pc, #0]	; (17134 <__gettzinfo+0x4>)
   17132:	4770      	bx	lr
   17134:	200005d4 	.word	0x200005d4

00017138 <gmtime_r>:
   17138:	6800      	ldr	r0, [r0, #0]
   1713a:	4b65      	ldr	r3, [pc, #404]	; (172d0 <gmtime_r+0x198>)
   1713c:	fb83 2300 	smull	r2, r3, r3, r0
   17140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17144:	4403      	add	r3, r0
   17146:	4d63      	ldr	r5, [pc, #396]	; (172d4 <gmtime_r+0x19c>)
   17148:	17c2      	asrs	r2, r0, #31
   1714a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1714e:	fb05 0513 	mls	r5, r5, r3, r0
   17152:	2d00      	cmp	r5, #0
   17154:	f2c0 80b3 	blt.w	172be <gmtime_r+0x186>
   17158:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1715c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   17160:	4e5d      	ldr	r6, [pc, #372]	; (172d8 <gmtime_r+0x1a0>)
   17162:	485e      	ldr	r0, [pc, #376]	; (172dc <gmtime_r+0x1a4>)
   17164:	4a5e      	ldr	r2, [pc, #376]	; (172e0 <gmtime_r+0x1a8>)
   17166:	4c5f      	ldr	r4, [pc, #380]	; (172e4 <gmtime_r+0x1ac>)
   17168:	f8df c18c 	ldr.w	ip, [pc, #396]	; 172f8 <gmtime_r+0x1c0>
   1716c:	f8df e18c 	ldr.w	lr, [pc, #396]	; 172fc <gmtime_r+0x1c4>
   17170:	fb86 7603 	smull	r7, r6, r6, r3
   17174:	17df      	asrs	r7, r3, #31
   17176:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1717a:	fb00 3006 	mla	r0, r0, r6, r3
   1717e:	0887      	lsrs	r7, r0, #2
   17180:	fba2 8207 	umull	r8, r2, r2, r7
   17184:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   17188:	fba4 8707 	umull	r8, r7, r4, r7
   1718c:	ea4f 1810 	mov.w	r8, r0, lsr #4
   17190:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   17194:	fbac c708 	umull	ip, r7, ip, r8
   17198:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1719c:	f8df c160 	ldr.w	ip, [pc, #352]	; 17300 <gmtime_r+0x1c8>
   171a0:	4f51      	ldr	r7, [pc, #324]	; (172e8 <gmtime_r+0x1b0>)
   171a2:	fbae 8e02 	umull	r8, lr, lr, r2
   171a6:	fbac 9c02 	umull	r9, ip, ip, r2
   171aa:	eba2 080e 	sub.w	r8, r2, lr
   171ae:	0892      	lsrs	r2, r2, #2
   171b0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   171b4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   171b8:	fba4 4202 	umull	r4, r2, r4, r2
   171bc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   171c0:	ea4f 241e 	mov.w	r4, lr, lsr #8
   171c4:	f240 106d 	movw	r0, #365	; 0x16d
   171c8:	fb00 2214 	mls	r2, r0, r4, r2
   171cc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 17304 <gmtime_r+0x1cc>
   171d0:	fb87 0e05 	smull	r0, lr, r7, r5
   171d4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   171d8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   171dc:	44ae      	add	lr, r5
   171de:	3002      	adds	r0, #2
   171e0:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   171e4:	4f41      	ldr	r7, [pc, #260]	; (172ec <gmtime_r+0x1b4>)
   171e6:	f8c1 e008 	str.w	lr, [r1, #8]
   171ea:	f103 0c03 	add.w	ip, r3, #3
   171ee:	fba8 3000 	umull	r3, r0, r8, r0
   171f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   171f6:	fb03 551e 	mls	r5, r3, lr, r5
   171fa:	4b3d      	ldr	r3, [pc, #244]	; (172f0 <gmtime_r+0x1b8>)
   171fc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 17308 <gmtime_r+0x1d0>
   17200:	fb87 e705 	smull	lr, r7, r7, r5
   17204:	fb83 390c 	smull	r3, r9, r3, ip
   17208:	197b      	adds	r3, r7, r5
   1720a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1720e:	fb07 4606 	mla	r6, r7, r6, r4
   17212:	17ef      	asrs	r7, r5, #31
   17214:	44e1      	add	r9, ip
   17216:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1721a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1721e:	09c0      	lsrs	r0, r0, #7
   17220:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   17224:	2809      	cmp	r0, #9
   17226:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1722a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1722e:	ebac 0707 	sub.w	r7, ip, r7
   17232:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   17236:	bf8c      	ite	hi
   17238:	f06f 0c09 	mvnhi.w	ip, #9
   1723c:	f04f 0c02 	movls.w	ip, #2
   17240:	4460      	add	r0, ip
   17242:	f10e 0e02 	add.w	lr, lr, #2
   17246:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1724a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1724e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   17252:	f102 0801 	add.w	r8, r2, #1
   17256:	2801      	cmp	r0, #1
   17258:	bf98      	it	ls
   1725a:	3601      	addls	r6, #1
   1725c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   17260:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   17264:	604b      	str	r3, [r1, #4]
   17266:	600d      	str	r5, [r1, #0]
   17268:	618f      	str	r7, [r1, #24]
   1726a:	d225      	bcs.n	172b8 <gmtime_r+0x180>
   1726c:	07a3      	lsls	r3, r4, #30
   1726e:	d018      	beq.n	172a2 <gmtime_r+0x16a>
   17270:	4b20      	ldr	r3, [pc, #128]	; (172f4 <gmtime_r+0x1bc>)
   17272:	fba3 5304 	umull	r5, r3, r3, r4
   17276:	09db      	lsrs	r3, r3, #7
   17278:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1727c:	fb05 4413 	mls	r4, r5, r3, r4
   17280:	fab4 f484 	clz	r4, r4
   17284:	0964      	lsrs	r4, r4, #5
   17286:	323b      	adds	r2, #59	; 0x3b
   17288:	4422      	add	r2, r4
   1728a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1728e:	2300      	movs	r3, #0
   17290:	6108      	str	r0, [r1, #16]
   17292:	614e      	str	r6, [r1, #20]
   17294:	61ca      	str	r2, [r1, #28]
   17296:	f8c1 e00c 	str.w	lr, [r1, #12]
   1729a:	620b      	str	r3, [r1, #32]
   1729c:	4608      	mov	r0, r1
   1729e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   172a2:	4b14      	ldr	r3, [pc, #80]	; (172f4 <gmtime_r+0x1bc>)
   172a4:	fba3 5304 	umull	r5, r3, r3, r4
   172a8:	095b      	lsrs	r3, r3, #5
   172aa:	2564      	movs	r5, #100	; 0x64
   172ac:	fb05 4313 	mls	r3, r5, r3, r4
   172b0:	2b00      	cmp	r3, #0
   172b2:	d0dd      	beq.n	17270 <gmtime_r+0x138>
   172b4:	2401      	movs	r4, #1
   172b6:	e7e6      	b.n	17286 <gmtime_r+0x14e>
   172b8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   172bc:	e7e5      	b.n	1728a <gmtime_r+0x152>
   172be:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   172c2:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   172c6:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   172ca:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   172ce:	e747      	b.n	17160 <gmtime_r+0x28>
   172d0:	c22e4507 	.word	0xc22e4507
   172d4:	00015180 	.word	0x00015180
   172d8:	396b06bd 	.word	0x396b06bd
   172dc:	fffdc54f 	.word	0xfffdc54f
   172e0:	396b207f 	.word	0x396b207f
   172e4:	59c67cd9 	.word	0x59c67cd9
   172e8:	91a2b3c5 	.word	0x91a2b3c5
   172ec:	88888889 	.word	0x88888889
   172f0:	92492493 	.word	0x92492493
   172f4:	51eb851f 	.word	0x51eb851f
   172f8:	0072d641 	.word	0x0072d641
   172fc:	6719f361 	.word	0x6719f361
   17300:	e5d32b1f 	.word	0xe5d32b1f
   17304:	d62b80d7 	.word	0xd62b80d7
   17308:	cccccccd 	.word	0xcccccccd

0001730c <__retarget_lock_acquire>:
   1730c:	4770      	bx	lr
   1730e:	bf00      	nop

00017310 <__retarget_lock_acquire_recursive>:
   17310:	4770      	bx	lr
   17312:	bf00      	nop

00017314 <__retarget_lock_release>:
   17314:	4770      	bx	lr
   17316:	bf00      	nop

00017318 <__retarget_lock_release_recursive>:
   17318:	4770      	bx	lr
   1731a:	bf00      	nop

0001731c <_malloc_r>:
   1731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17320:	f101 060b 	add.w	r6, r1, #11
   17324:	2e16      	cmp	r6, #22
   17326:	b083      	sub	sp, #12
   17328:	4605      	mov	r5, r0
   1732a:	f240 809e 	bls.w	1746a <_malloc_r+0x14e>
   1732e:	f036 0607 	bics.w	r6, r6, #7
   17332:	f100 80bd 	bmi.w	174b0 <_malloc_r+0x194>
   17336:	42b1      	cmp	r1, r6
   17338:	f200 80ba 	bhi.w	174b0 <_malloc_r+0x194>
   1733c:	f000 faf0 	bl	17920 <__malloc_lock>
   17340:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   17344:	f0c0 8293 	bcc.w	1786e <_malloc_r+0x552>
   17348:	0a73      	lsrs	r3, r6, #9
   1734a:	f000 80b8 	beq.w	174be <_malloc_r+0x1a2>
   1734e:	2b04      	cmp	r3, #4
   17350:	f200 8179 	bhi.w	17646 <_malloc_r+0x32a>
   17354:	09b3      	lsrs	r3, r6, #6
   17356:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1735a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1735e:	00c3      	lsls	r3, r0, #3
   17360:	4fbf      	ldr	r7, [pc, #764]	; (17660 <_malloc_r+0x344>)
   17362:	443b      	add	r3, r7
   17364:	f1a3 0108 	sub.w	r1, r3, #8
   17368:	685c      	ldr	r4, [r3, #4]
   1736a:	42a1      	cmp	r1, r4
   1736c:	d106      	bne.n	1737c <_malloc_r+0x60>
   1736e:	e00c      	b.n	1738a <_malloc_r+0x6e>
   17370:	2a00      	cmp	r2, #0
   17372:	f280 80aa 	bge.w	174ca <_malloc_r+0x1ae>
   17376:	68e4      	ldr	r4, [r4, #12]
   17378:	42a1      	cmp	r1, r4
   1737a:	d006      	beq.n	1738a <_malloc_r+0x6e>
   1737c:	6863      	ldr	r3, [r4, #4]
   1737e:	f023 0303 	bic.w	r3, r3, #3
   17382:	1b9a      	subs	r2, r3, r6
   17384:	2a0f      	cmp	r2, #15
   17386:	ddf3      	ble.n	17370 <_malloc_r+0x54>
   17388:	4670      	mov	r0, lr
   1738a:	693c      	ldr	r4, [r7, #16]
   1738c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 17674 <_malloc_r+0x358>
   17390:	4574      	cmp	r4, lr
   17392:	f000 81ab 	beq.w	176ec <_malloc_r+0x3d0>
   17396:	6863      	ldr	r3, [r4, #4]
   17398:	f023 0303 	bic.w	r3, r3, #3
   1739c:	1b9a      	subs	r2, r3, r6
   1739e:	2a0f      	cmp	r2, #15
   173a0:	f300 8190 	bgt.w	176c4 <_malloc_r+0x3a8>
   173a4:	2a00      	cmp	r2, #0
   173a6:	f8c7 e014 	str.w	lr, [r7, #20]
   173aa:	f8c7 e010 	str.w	lr, [r7, #16]
   173ae:	f280 809d 	bge.w	174ec <_malloc_r+0x1d0>
   173b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   173b6:	f080 8161 	bcs.w	1767c <_malloc_r+0x360>
   173ba:	08db      	lsrs	r3, r3, #3
   173bc:	f103 0c01 	add.w	ip, r3, #1
   173c0:	1099      	asrs	r1, r3, #2
   173c2:	687a      	ldr	r2, [r7, #4]
   173c4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   173c8:	f8c4 8008 	str.w	r8, [r4, #8]
   173cc:	2301      	movs	r3, #1
   173ce:	408b      	lsls	r3, r1
   173d0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   173d4:	4313      	orrs	r3, r2
   173d6:	3908      	subs	r1, #8
   173d8:	60e1      	str	r1, [r4, #12]
   173da:	607b      	str	r3, [r7, #4]
   173dc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   173e0:	f8c8 400c 	str.w	r4, [r8, #12]
   173e4:	1082      	asrs	r2, r0, #2
   173e6:	2401      	movs	r4, #1
   173e8:	4094      	lsls	r4, r2
   173ea:	429c      	cmp	r4, r3
   173ec:	f200 808b 	bhi.w	17506 <_malloc_r+0x1ea>
   173f0:	421c      	tst	r4, r3
   173f2:	d106      	bne.n	17402 <_malloc_r+0xe6>
   173f4:	f020 0003 	bic.w	r0, r0, #3
   173f8:	0064      	lsls	r4, r4, #1
   173fa:	421c      	tst	r4, r3
   173fc:	f100 0004 	add.w	r0, r0, #4
   17400:	d0fa      	beq.n	173f8 <_malloc_r+0xdc>
   17402:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   17406:	46cc      	mov	ip, r9
   17408:	4680      	mov	r8, r0
   1740a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1740e:	459c      	cmp	ip, r3
   17410:	d107      	bne.n	17422 <_malloc_r+0x106>
   17412:	e16d      	b.n	176f0 <_malloc_r+0x3d4>
   17414:	2a00      	cmp	r2, #0
   17416:	f280 817b 	bge.w	17710 <_malloc_r+0x3f4>
   1741a:	68db      	ldr	r3, [r3, #12]
   1741c:	459c      	cmp	ip, r3
   1741e:	f000 8167 	beq.w	176f0 <_malloc_r+0x3d4>
   17422:	6859      	ldr	r1, [r3, #4]
   17424:	f021 0103 	bic.w	r1, r1, #3
   17428:	1b8a      	subs	r2, r1, r6
   1742a:	2a0f      	cmp	r2, #15
   1742c:	ddf2      	ble.n	17414 <_malloc_r+0xf8>
   1742e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   17432:	f8d3 8008 	ldr.w	r8, [r3, #8]
   17436:	9300      	str	r3, [sp, #0]
   17438:	199c      	adds	r4, r3, r6
   1743a:	4628      	mov	r0, r5
   1743c:	f046 0601 	orr.w	r6, r6, #1
   17440:	f042 0501 	orr.w	r5, r2, #1
   17444:	605e      	str	r6, [r3, #4]
   17446:	f8c8 c00c 	str.w	ip, [r8, #12]
   1744a:	f8cc 8008 	str.w	r8, [ip, #8]
   1744e:	617c      	str	r4, [r7, #20]
   17450:	613c      	str	r4, [r7, #16]
   17452:	f8c4 e00c 	str.w	lr, [r4, #12]
   17456:	f8c4 e008 	str.w	lr, [r4, #8]
   1745a:	6065      	str	r5, [r4, #4]
   1745c:	505a      	str	r2, [r3, r1]
   1745e:	f000 fa65 	bl	1792c <__malloc_unlock>
   17462:	9b00      	ldr	r3, [sp, #0]
   17464:	f103 0408 	add.w	r4, r3, #8
   17468:	e01e      	b.n	174a8 <_malloc_r+0x18c>
   1746a:	2910      	cmp	r1, #16
   1746c:	d820      	bhi.n	174b0 <_malloc_r+0x194>
   1746e:	f000 fa57 	bl	17920 <__malloc_lock>
   17472:	2610      	movs	r6, #16
   17474:	2318      	movs	r3, #24
   17476:	2002      	movs	r0, #2
   17478:	4f79      	ldr	r7, [pc, #484]	; (17660 <_malloc_r+0x344>)
   1747a:	443b      	add	r3, r7
   1747c:	f1a3 0208 	sub.w	r2, r3, #8
   17480:	685c      	ldr	r4, [r3, #4]
   17482:	4294      	cmp	r4, r2
   17484:	f000 813d 	beq.w	17702 <_malloc_r+0x3e6>
   17488:	6863      	ldr	r3, [r4, #4]
   1748a:	68e1      	ldr	r1, [r4, #12]
   1748c:	68a6      	ldr	r6, [r4, #8]
   1748e:	f023 0303 	bic.w	r3, r3, #3
   17492:	4423      	add	r3, r4
   17494:	4628      	mov	r0, r5
   17496:	685a      	ldr	r2, [r3, #4]
   17498:	60f1      	str	r1, [r6, #12]
   1749a:	f042 0201 	orr.w	r2, r2, #1
   1749e:	608e      	str	r6, [r1, #8]
   174a0:	605a      	str	r2, [r3, #4]
   174a2:	f000 fa43 	bl	1792c <__malloc_unlock>
   174a6:	3408      	adds	r4, #8
   174a8:	4620      	mov	r0, r4
   174aa:	b003      	add	sp, #12
   174ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b0:	2400      	movs	r4, #0
   174b2:	230c      	movs	r3, #12
   174b4:	4620      	mov	r0, r4
   174b6:	602b      	str	r3, [r5, #0]
   174b8:	b003      	add	sp, #12
   174ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174be:	2040      	movs	r0, #64	; 0x40
   174c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   174c4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   174c8:	e74a      	b.n	17360 <_malloc_r+0x44>
   174ca:	4423      	add	r3, r4
   174cc:	68e1      	ldr	r1, [r4, #12]
   174ce:	685a      	ldr	r2, [r3, #4]
   174d0:	68a6      	ldr	r6, [r4, #8]
   174d2:	f042 0201 	orr.w	r2, r2, #1
   174d6:	60f1      	str	r1, [r6, #12]
   174d8:	4628      	mov	r0, r5
   174da:	608e      	str	r6, [r1, #8]
   174dc:	605a      	str	r2, [r3, #4]
   174de:	f000 fa25 	bl	1792c <__malloc_unlock>
   174e2:	3408      	adds	r4, #8
   174e4:	4620      	mov	r0, r4
   174e6:	b003      	add	sp, #12
   174e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174ec:	4423      	add	r3, r4
   174ee:	4628      	mov	r0, r5
   174f0:	685a      	ldr	r2, [r3, #4]
   174f2:	f042 0201 	orr.w	r2, r2, #1
   174f6:	605a      	str	r2, [r3, #4]
   174f8:	f000 fa18 	bl	1792c <__malloc_unlock>
   174fc:	3408      	adds	r4, #8
   174fe:	4620      	mov	r0, r4
   17500:	b003      	add	sp, #12
   17502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17506:	68bc      	ldr	r4, [r7, #8]
   17508:	6863      	ldr	r3, [r4, #4]
   1750a:	f023 0803 	bic.w	r8, r3, #3
   1750e:	45b0      	cmp	r8, r6
   17510:	d304      	bcc.n	1751c <_malloc_r+0x200>
   17512:	eba8 0306 	sub.w	r3, r8, r6
   17516:	2b0f      	cmp	r3, #15
   17518:	f300 8085 	bgt.w	17626 <_malloc_r+0x30a>
   1751c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 17678 <_malloc_r+0x35c>
   17520:	4b50      	ldr	r3, [pc, #320]	; (17664 <_malloc_r+0x348>)
   17522:	f8d9 2000 	ldr.w	r2, [r9]
   17526:	681b      	ldr	r3, [r3, #0]
   17528:	3201      	adds	r2, #1
   1752a:	4433      	add	r3, r6
   1752c:	eb04 0a08 	add.w	sl, r4, r8
   17530:	f000 8155 	beq.w	177de <_malloc_r+0x4c2>
   17534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   17538:	330f      	adds	r3, #15
   1753a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1753e:	f02b 0b0f 	bic.w	fp, fp, #15
   17542:	4659      	mov	r1, fp
   17544:	4628      	mov	r0, r5
   17546:	f000 f9f7 	bl	17938 <_sbrk_r>
   1754a:	1c41      	adds	r1, r0, #1
   1754c:	4602      	mov	r2, r0
   1754e:	f000 80fc 	beq.w	1774a <_malloc_r+0x42e>
   17552:	4582      	cmp	sl, r0
   17554:	f200 80f7 	bhi.w	17746 <_malloc_r+0x42a>
   17558:	4b43      	ldr	r3, [pc, #268]	; (17668 <_malloc_r+0x34c>)
   1755a:	6819      	ldr	r1, [r3, #0]
   1755c:	4459      	add	r1, fp
   1755e:	6019      	str	r1, [r3, #0]
   17560:	f000 814d 	beq.w	177fe <_malloc_r+0x4e2>
   17564:	f8d9 0000 	ldr.w	r0, [r9]
   17568:	3001      	adds	r0, #1
   1756a:	bf1b      	ittet	ne
   1756c:	eba2 0a0a 	subne.w	sl, r2, sl
   17570:	4451      	addne	r1, sl
   17572:	f8c9 2000 	streq.w	r2, [r9]
   17576:	6019      	strne	r1, [r3, #0]
   17578:	f012 0107 	ands.w	r1, r2, #7
   1757c:	f000 8115 	beq.w	177aa <_malloc_r+0x48e>
   17580:	f1c1 0008 	rsb	r0, r1, #8
   17584:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   17588:	4402      	add	r2, r0
   1758a:	3108      	adds	r1, #8
   1758c:	eb02 090b 	add.w	r9, r2, fp
   17590:	f3c9 090b 	ubfx	r9, r9, #0, #12
   17594:	eba1 0909 	sub.w	r9, r1, r9
   17598:	4649      	mov	r1, r9
   1759a:	4628      	mov	r0, r5
   1759c:	9301      	str	r3, [sp, #4]
   1759e:	9200      	str	r2, [sp, #0]
   175a0:	f000 f9ca 	bl	17938 <_sbrk_r>
   175a4:	1c43      	adds	r3, r0, #1
   175a6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   175aa:	f000 8143 	beq.w	17834 <_malloc_r+0x518>
   175ae:	1a80      	subs	r0, r0, r2
   175b0:	4448      	add	r0, r9
   175b2:	f040 0001 	orr.w	r0, r0, #1
   175b6:	6819      	ldr	r1, [r3, #0]
   175b8:	60ba      	str	r2, [r7, #8]
   175ba:	4449      	add	r1, r9
   175bc:	42bc      	cmp	r4, r7
   175be:	6050      	str	r0, [r2, #4]
   175c0:	6019      	str	r1, [r3, #0]
   175c2:	d017      	beq.n	175f4 <_malloc_r+0x2d8>
   175c4:	f1b8 0f0f 	cmp.w	r8, #15
   175c8:	f240 80fb 	bls.w	177c2 <_malloc_r+0x4a6>
   175cc:	6860      	ldr	r0, [r4, #4]
   175ce:	f1a8 020c 	sub.w	r2, r8, #12
   175d2:	f022 0207 	bic.w	r2, r2, #7
   175d6:	eb04 0e02 	add.w	lr, r4, r2
   175da:	f000 0001 	and.w	r0, r0, #1
   175de:	f04f 0c05 	mov.w	ip, #5
   175e2:	4310      	orrs	r0, r2
   175e4:	2a0f      	cmp	r2, #15
   175e6:	6060      	str	r0, [r4, #4]
   175e8:	f8ce c004 	str.w	ip, [lr, #4]
   175ec:	f8ce c008 	str.w	ip, [lr, #8]
   175f0:	f200 8117 	bhi.w	17822 <_malloc_r+0x506>
   175f4:	4b1d      	ldr	r3, [pc, #116]	; (1766c <_malloc_r+0x350>)
   175f6:	68bc      	ldr	r4, [r7, #8]
   175f8:	681a      	ldr	r2, [r3, #0]
   175fa:	4291      	cmp	r1, r2
   175fc:	bf88      	it	hi
   175fe:	6019      	strhi	r1, [r3, #0]
   17600:	4b1b      	ldr	r3, [pc, #108]	; (17670 <_malloc_r+0x354>)
   17602:	681a      	ldr	r2, [r3, #0]
   17604:	4291      	cmp	r1, r2
   17606:	6862      	ldr	r2, [r4, #4]
   17608:	bf88      	it	hi
   1760a:	6019      	strhi	r1, [r3, #0]
   1760c:	f022 0203 	bic.w	r2, r2, #3
   17610:	4296      	cmp	r6, r2
   17612:	eba2 0306 	sub.w	r3, r2, r6
   17616:	d801      	bhi.n	1761c <_malloc_r+0x300>
   17618:	2b0f      	cmp	r3, #15
   1761a:	dc04      	bgt.n	17626 <_malloc_r+0x30a>
   1761c:	4628      	mov	r0, r5
   1761e:	f000 f985 	bl	1792c <__malloc_unlock>
   17622:	2400      	movs	r4, #0
   17624:	e740      	b.n	174a8 <_malloc_r+0x18c>
   17626:	19a2      	adds	r2, r4, r6
   17628:	f043 0301 	orr.w	r3, r3, #1
   1762c:	f046 0601 	orr.w	r6, r6, #1
   17630:	6066      	str	r6, [r4, #4]
   17632:	4628      	mov	r0, r5
   17634:	60ba      	str	r2, [r7, #8]
   17636:	6053      	str	r3, [r2, #4]
   17638:	f000 f978 	bl	1792c <__malloc_unlock>
   1763c:	3408      	adds	r4, #8
   1763e:	4620      	mov	r0, r4
   17640:	b003      	add	sp, #12
   17642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17646:	2b14      	cmp	r3, #20
   17648:	d971      	bls.n	1772e <_malloc_r+0x412>
   1764a:	2b54      	cmp	r3, #84	; 0x54
   1764c:	f200 80a3 	bhi.w	17796 <_malloc_r+0x47a>
   17650:	0b33      	lsrs	r3, r6, #12
   17652:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   17656:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1765a:	00c3      	lsls	r3, r0, #3
   1765c:	e680      	b.n	17360 <_malloc_r+0x44>
   1765e:	bf00      	nop
   17660:	20000614 	.word	0x20000614
   17664:	20004f60 	.word	0x20004f60
   17668:	20004f30 	.word	0x20004f30
   1766c:	20004f58 	.word	0x20004f58
   17670:	20004f5c 	.word	0x20004f5c
   17674:	2000061c 	.word	0x2000061c
   17678:	20000a1c 	.word	0x20000a1c
   1767c:	0a5a      	lsrs	r2, r3, #9
   1767e:	2a04      	cmp	r2, #4
   17680:	d95b      	bls.n	1773a <_malloc_r+0x41e>
   17682:	2a14      	cmp	r2, #20
   17684:	f200 80ae 	bhi.w	177e4 <_malloc_r+0x4c8>
   17688:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1768c:	00c9      	lsls	r1, r1, #3
   1768e:	325b      	adds	r2, #91	; 0x5b
   17690:	eb07 0c01 	add.w	ip, r7, r1
   17694:	5879      	ldr	r1, [r7, r1]
   17696:	f1ac 0c08 	sub.w	ip, ip, #8
   1769a:	458c      	cmp	ip, r1
   1769c:	f000 8088 	beq.w	177b0 <_malloc_r+0x494>
   176a0:	684a      	ldr	r2, [r1, #4]
   176a2:	f022 0203 	bic.w	r2, r2, #3
   176a6:	4293      	cmp	r3, r2
   176a8:	d273      	bcs.n	17792 <_malloc_r+0x476>
   176aa:	6889      	ldr	r1, [r1, #8]
   176ac:	458c      	cmp	ip, r1
   176ae:	d1f7      	bne.n	176a0 <_malloc_r+0x384>
   176b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   176b4:	687b      	ldr	r3, [r7, #4]
   176b6:	60e2      	str	r2, [r4, #12]
   176b8:	f8c4 c008 	str.w	ip, [r4, #8]
   176bc:	6094      	str	r4, [r2, #8]
   176be:	f8cc 400c 	str.w	r4, [ip, #12]
   176c2:	e68f      	b.n	173e4 <_malloc_r+0xc8>
   176c4:	19a1      	adds	r1, r4, r6
   176c6:	f046 0c01 	orr.w	ip, r6, #1
   176ca:	f042 0601 	orr.w	r6, r2, #1
   176ce:	f8c4 c004 	str.w	ip, [r4, #4]
   176d2:	4628      	mov	r0, r5
   176d4:	6179      	str	r1, [r7, #20]
   176d6:	6139      	str	r1, [r7, #16]
   176d8:	f8c1 e00c 	str.w	lr, [r1, #12]
   176dc:	f8c1 e008 	str.w	lr, [r1, #8]
   176e0:	604e      	str	r6, [r1, #4]
   176e2:	50e2      	str	r2, [r4, r3]
   176e4:	f000 f922 	bl	1792c <__malloc_unlock>
   176e8:	3408      	adds	r4, #8
   176ea:	e6dd      	b.n	174a8 <_malloc_r+0x18c>
   176ec:	687b      	ldr	r3, [r7, #4]
   176ee:	e679      	b.n	173e4 <_malloc_r+0xc8>
   176f0:	f108 0801 	add.w	r8, r8, #1
   176f4:	f018 0f03 	tst.w	r8, #3
   176f8:	f10c 0c08 	add.w	ip, ip, #8
   176fc:	f47f ae85 	bne.w	1740a <_malloc_r+0xee>
   17700:	e02d      	b.n	1775e <_malloc_r+0x442>
   17702:	68dc      	ldr	r4, [r3, #12]
   17704:	42a3      	cmp	r3, r4
   17706:	bf08      	it	eq
   17708:	3002      	addeq	r0, #2
   1770a:	f43f ae3e 	beq.w	1738a <_malloc_r+0x6e>
   1770e:	e6bb      	b.n	17488 <_malloc_r+0x16c>
   17710:	4419      	add	r1, r3
   17712:	461c      	mov	r4, r3
   17714:	684a      	ldr	r2, [r1, #4]
   17716:	68db      	ldr	r3, [r3, #12]
   17718:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1771c:	f042 0201 	orr.w	r2, r2, #1
   17720:	604a      	str	r2, [r1, #4]
   17722:	4628      	mov	r0, r5
   17724:	60f3      	str	r3, [r6, #12]
   17726:	609e      	str	r6, [r3, #8]
   17728:	f000 f900 	bl	1792c <__malloc_unlock>
   1772c:	e6bc      	b.n	174a8 <_malloc_r+0x18c>
   1772e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   17732:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   17736:	00c3      	lsls	r3, r0, #3
   17738:	e612      	b.n	17360 <_malloc_r+0x44>
   1773a:	099a      	lsrs	r2, r3, #6
   1773c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   17740:	00c9      	lsls	r1, r1, #3
   17742:	3238      	adds	r2, #56	; 0x38
   17744:	e7a4      	b.n	17690 <_malloc_r+0x374>
   17746:	42bc      	cmp	r4, r7
   17748:	d054      	beq.n	177f4 <_malloc_r+0x4d8>
   1774a:	68bc      	ldr	r4, [r7, #8]
   1774c:	6862      	ldr	r2, [r4, #4]
   1774e:	f022 0203 	bic.w	r2, r2, #3
   17752:	e75d      	b.n	17610 <_malloc_r+0x2f4>
   17754:	f859 3908 	ldr.w	r3, [r9], #-8
   17758:	4599      	cmp	r9, r3
   1775a:	f040 8086 	bne.w	1786a <_malloc_r+0x54e>
   1775e:	f010 0f03 	tst.w	r0, #3
   17762:	f100 30ff 	add.w	r0, r0, #4294967295
   17766:	d1f5      	bne.n	17754 <_malloc_r+0x438>
   17768:	687b      	ldr	r3, [r7, #4]
   1776a:	ea23 0304 	bic.w	r3, r3, r4
   1776e:	607b      	str	r3, [r7, #4]
   17770:	0064      	lsls	r4, r4, #1
   17772:	429c      	cmp	r4, r3
   17774:	f63f aec7 	bhi.w	17506 <_malloc_r+0x1ea>
   17778:	2c00      	cmp	r4, #0
   1777a:	f43f aec4 	beq.w	17506 <_malloc_r+0x1ea>
   1777e:	421c      	tst	r4, r3
   17780:	4640      	mov	r0, r8
   17782:	f47f ae3e 	bne.w	17402 <_malloc_r+0xe6>
   17786:	0064      	lsls	r4, r4, #1
   17788:	421c      	tst	r4, r3
   1778a:	f100 0004 	add.w	r0, r0, #4
   1778e:	d0fa      	beq.n	17786 <_malloc_r+0x46a>
   17790:	e637      	b.n	17402 <_malloc_r+0xe6>
   17792:	468c      	mov	ip, r1
   17794:	e78c      	b.n	176b0 <_malloc_r+0x394>
   17796:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1779a:	d815      	bhi.n	177c8 <_malloc_r+0x4ac>
   1779c:	0bf3      	lsrs	r3, r6, #15
   1779e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   177a2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   177a6:	00c3      	lsls	r3, r0, #3
   177a8:	e5da      	b.n	17360 <_malloc_r+0x44>
   177aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   177ae:	e6ed      	b.n	1758c <_malloc_r+0x270>
   177b0:	687b      	ldr	r3, [r7, #4]
   177b2:	1092      	asrs	r2, r2, #2
   177b4:	2101      	movs	r1, #1
   177b6:	fa01 f202 	lsl.w	r2, r1, r2
   177ba:	4313      	orrs	r3, r2
   177bc:	607b      	str	r3, [r7, #4]
   177be:	4662      	mov	r2, ip
   177c0:	e779      	b.n	176b6 <_malloc_r+0x39a>
   177c2:	2301      	movs	r3, #1
   177c4:	6053      	str	r3, [r2, #4]
   177c6:	e729      	b.n	1761c <_malloc_r+0x300>
   177c8:	f240 5254 	movw	r2, #1364	; 0x554
   177cc:	4293      	cmp	r3, r2
   177ce:	d822      	bhi.n	17816 <_malloc_r+0x4fa>
   177d0:	0cb3      	lsrs	r3, r6, #18
   177d2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   177d6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   177da:	00c3      	lsls	r3, r0, #3
   177dc:	e5c0      	b.n	17360 <_malloc_r+0x44>
   177de:	f103 0b10 	add.w	fp, r3, #16
   177e2:	e6ae      	b.n	17542 <_malloc_r+0x226>
   177e4:	2a54      	cmp	r2, #84	; 0x54
   177e6:	d829      	bhi.n	1783c <_malloc_r+0x520>
   177e8:	0b1a      	lsrs	r2, r3, #12
   177ea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   177ee:	00c9      	lsls	r1, r1, #3
   177f0:	326e      	adds	r2, #110	; 0x6e
   177f2:	e74d      	b.n	17690 <_malloc_r+0x374>
   177f4:	4b20      	ldr	r3, [pc, #128]	; (17878 <_malloc_r+0x55c>)
   177f6:	6819      	ldr	r1, [r3, #0]
   177f8:	4459      	add	r1, fp
   177fa:	6019      	str	r1, [r3, #0]
   177fc:	e6b2      	b.n	17564 <_malloc_r+0x248>
   177fe:	f3ca 000b 	ubfx	r0, sl, #0, #12
   17802:	2800      	cmp	r0, #0
   17804:	f47f aeae 	bne.w	17564 <_malloc_r+0x248>
   17808:	eb08 030b 	add.w	r3, r8, fp
   1780c:	68ba      	ldr	r2, [r7, #8]
   1780e:	f043 0301 	orr.w	r3, r3, #1
   17812:	6053      	str	r3, [r2, #4]
   17814:	e6ee      	b.n	175f4 <_malloc_r+0x2d8>
   17816:	207f      	movs	r0, #127	; 0x7f
   17818:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1781c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   17820:	e59e      	b.n	17360 <_malloc_r+0x44>
   17822:	f104 0108 	add.w	r1, r4, #8
   17826:	4628      	mov	r0, r5
   17828:	9300      	str	r3, [sp, #0]
   1782a:	f001 ff91 	bl	19750 <_free_r>
   1782e:	9b00      	ldr	r3, [sp, #0]
   17830:	6819      	ldr	r1, [r3, #0]
   17832:	e6df      	b.n	175f4 <_malloc_r+0x2d8>
   17834:	2001      	movs	r0, #1
   17836:	f04f 0900 	mov.w	r9, #0
   1783a:	e6bc      	b.n	175b6 <_malloc_r+0x29a>
   1783c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   17840:	d805      	bhi.n	1784e <_malloc_r+0x532>
   17842:	0bda      	lsrs	r2, r3, #15
   17844:	f102 0178 	add.w	r1, r2, #120	; 0x78
   17848:	00c9      	lsls	r1, r1, #3
   1784a:	3277      	adds	r2, #119	; 0x77
   1784c:	e720      	b.n	17690 <_malloc_r+0x374>
   1784e:	f240 5154 	movw	r1, #1364	; 0x554
   17852:	428a      	cmp	r2, r1
   17854:	d805      	bhi.n	17862 <_malloc_r+0x546>
   17856:	0c9a      	lsrs	r2, r3, #18
   17858:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1785c:	00c9      	lsls	r1, r1, #3
   1785e:	327c      	adds	r2, #124	; 0x7c
   17860:	e716      	b.n	17690 <_malloc_r+0x374>
   17862:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   17866:	227e      	movs	r2, #126	; 0x7e
   17868:	e712      	b.n	17690 <_malloc_r+0x374>
   1786a:	687b      	ldr	r3, [r7, #4]
   1786c:	e780      	b.n	17770 <_malloc_r+0x454>
   1786e:	08f0      	lsrs	r0, r6, #3
   17870:	f106 0308 	add.w	r3, r6, #8
   17874:	e600      	b.n	17478 <_malloc_r+0x15c>
   17876:	bf00      	nop
   17878:	20004f30 	.word	0x20004f30
   1787c:	00000000 	.word	0x00000000

00017880 <memchr>:
   17880:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   17884:	2a10      	cmp	r2, #16
   17886:	db2b      	blt.n	178e0 <memchr+0x60>
   17888:	f010 0f07 	tst.w	r0, #7
   1788c:	d008      	beq.n	178a0 <memchr+0x20>
   1788e:	f810 3b01 	ldrb.w	r3, [r0], #1
   17892:	3a01      	subs	r2, #1
   17894:	428b      	cmp	r3, r1
   17896:	d02d      	beq.n	178f4 <memchr+0x74>
   17898:	f010 0f07 	tst.w	r0, #7
   1789c:	b342      	cbz	r2, 178f0 <memchr+0x70>
   1789e:	d1f6      	bne.n	1788e <memchr+0xe>
   178a0:	b4f0      	push	{r4, r5, r6, r7}
   178a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   178a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   178aa:	f022 0407 	bic.w	r4, r2, #7
   178ae:	f07f 0700 	mvns.w	r7, #0
   178b2:	2300      	movs	r3, #0
   178b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   178b8:	3c08      	subs	r4, #8
   178ba:	ea85 0501 	eor.w	r5, r5, r1
   178be:	ea86 0601 	eor.w	r6, r6, r1
   178c2:	fa85 f547 	uadd8	r5, r5, r7
   178c6:	faa3 f587 	sel	r5, r3, r7
   178ca:	fa86 f647 	uadd8	r6, r6, r7
   178ce:	faa5 f687 	sel	r6, r5, r7
   178d2:	b98e      	cbnz	r6, 178f8 <memchr+0x78>
   178d4:	d1ee      	bne.n	178b4 <memchr+0x34>
   178d6:	bcf0      	pop	{r4, r5, r6, r7}
   178d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   178dc:	f002 0207 	and.w	r2, r2, #7
   178e0:	b132      	cbz	r2, 178f0 <memchr+0x70>
   178e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   178e6:	3a01      	subs	r2, #1
   178e8:	ea83 0301 	eor.w	r3, r3, r1
   178ec:	b113      	cbz	r3, 178f4 <memchr+0x74>
   178ee:	d1f8      	bne.n	178e2 <memchr+0x62>
   178f0:	2000      	movs	r0, #0
   178f2:	4770      	bx	lr
   178f4:	3801      	subs	r0, #1
   178f6:	4770      	bx	lr
   178f8:	2d00      	cmp	r5, #0
   178fa:	bf06      	itte	eq
   178fc:	4635      	moveq	r5, r6
   178fe:	3803      	subeq	r0, #3
   17900:	3807      	subne	r0, #7
   17902:	f015 0f01 	tst.w	r5, #1
   17906:	d107      	bne.n	17918 <memchr+0x98>
   17908:	3001      	adds	r0, #1
   1790a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1790e:	bf02      	ittt	eq
   17910:	3001      	addeq	r0, #1
   17912:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   17916:	3001      	addeq	r0, #1
   17918:	bcf0      	pop	{r4, r5, r6, r7}
   1791a:	3801      	subs	r0, #1
   1791c:	4770      	bx	lr
   1791e:	bf00      	nop

00017920 <__malloc_lock>:
   17920:	4801      	ldr	r0, [pc, #4]	; (17928 <__malloc_lock+0x8>)
   17922:	f7ff bcf5 	b.w	17310 <__retarget_lock_acquire_recursive>
   17926:	bf00      	nop
   17928:	2000517c 	.word	0x2000517c

0001792c <__malloc_unlock>:
   1792c:	4801      	ldr	r0, [pc, #4]	; (17934 <__malloc_unlock+0x8>)
   1792e:	f7ff bcf3 	b.w	17318 <__retarget_lock_release_recursive>
   17932:	bf00      	nop
   17934:	2000517c 	.word	0x2000517c

00017938 <_sbrk_r>:
   17938:	b538      	push	{r3, r4, r5, lr}
   1793a:	4c07      	ldr	r4, [pc, #28]	; (17958 <_sbrk_r+0x20>)
   1793c:	2300      	movs	r3, #0
   1793e:	4605      	mov	r5, r0
   17940:	4608      	mov	r0, r1
   17942:	6023      	str	r3, [r4, #0]
   17944:	f7f9 fcf9 	bl	1133a <_sbrk>
   17948:	1c43      	adds	r3, r0, #1
   1794a:	d000      	beq.n	1794e <_sbrk_r+0x16>
   1794c:	bd38      	pop	{r3, r4, r5, pc}
   1794e:	6823      	ldr	r3, [r4, #0]
   17950:	2b00      	cmp	r3, #0
   17952:	d0fb      	beq.n	1794c <_sbrk_r+0x14>
   17954:	602b      	str	r3, [r5, #0]
   17956:	bd38      	pop	{r3, r4, r5, pc}
   17958:	20005190 	.word	0x20005190

0001795c <siprintf>:
   1795c:	b40e      	push	{r1, r2, r3}
   1795e:	b5f0      	push	{r4, r5, r6, r7, lr}
   17960:	b09c      	sub	sp, #112	; 0x70
   17962:	ab21      	add	r3, sp, #132	; 0x84
   17964:	490f      	ldr	r1, [pc, #60]	; (179a4 <siprintf+0x48>)
   17966:	f853 2b04 	ldr.w	r2, [r3], #4
   1796a:	9301      	str	r3, [sp, #4]
   1796c:	4605      	mov	r5, r0
   1796e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   17972:	6808      	ldr	r0, [r1, #0]
   17974:	9502      	str	r5, [sp, #8]
   17976:	f44f 7702 	mov.w	r7, #520	; 0x208
   1797a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1797e:	a902      	add	r1, sp, #8
   17980:	9506      	str	r5, [sp, #24]
   17982:	f8ad 7014 	strh.w	r7, [sp, #20]
   17986:	9404      	str	r4, [sp, #16]
   17988:	9407      	str	r4, [sp, #28]
   1798a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1798e:	f000 fbaf 	bl	180f0 <_svfiprintf_r>
   17992:	9b02      	ldr	r3, [sp, #8]
   17994:	2200      	movs	r2, #0
   17996:	701a      	strb	r2, [r3, #0]
   17998:	b01c      	add	sp, #112	; 0x70
   1799a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1799e:	b003      	add	sp, #12
   179a0:	4770      	bx	lr
   179a2:	bf00      	nop
   179a4:	2000019c 	.word	0x2000019c

000179a8 <siscanf>:
   179a8:	b40e      	push	{r1, r2, r3}
   179aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   179ac:	b09c      	sub	sp, #112	; 0x70
   179ae:	ac21      	add	r4, sp, #132	; 0x84
   179b0:	f44f 7201 	mov.w	r2, #516	; 0x204
   179b4:	f854 6b04 	ldr.w	r6, [r4], #4
   179b8:	f8ad 2014 	strh.w	r2, [sp, #20]
   179bc:	9002      	str	r0, [sp, #8]
   179be:	9006      	str	r0, [sp, #24]
   179c0:	f7fe ffde 	bl	16980 <strlen>
   179c4:	4b0c      	ldr	r3, [pc, #48]	; (179f8 <siscanf+0x50>)
   179c6:	9401      	str	r4, [sp, #4]
   179c8:	4605      	mov	r5, r0
   179ca:	4632      	mov	r2, r6
   179cc:	4f0b      	ldr	r7, [pc, #44]	; (179fc <siscanf+0x54>)
   179ce:	6818      	ldr	r0, [r3, #0]
   179d0:	9503      	str	r5, [sp, #12]
   179d2:	4623      	mov	r3, r4
   179d4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   179d8:	2400      	movs	r4, #0
   179da:	a902      	add	r1, sp, #8
   179dc:	9507      	str	r5, [sp, #28]
   179de:	970a      	str	r7, [sp, #40]	; 0x28
   179e0:	940e      	str	r4, [sp, #56]	; 0x38
   179e2:	9413      	str	r4, [sp, #76]	; 0x4c
   179e4:	f8ad 6016 	strh.w	r6, [sp, #22]
   179e8:	f001 f94a 	bl	18c80 <__ssvfiscanf_r>
   179ec:	b01c      	add	sp, #112	; 0x70
   179ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   179f2:	b003      	add	sp, #12
   179f4:	4770      	bx	lr
   179f6:	bf00      	nop
   179f8:	2000019c 	.word	0x2000019c
   179fc:	00017a01 	.word	0x00017a01

00017a00 <__seofread>:
   17a00:	2000      	movs	r0, #0
   17a02:	4770      	bx	lr
	...
   17a20:	eba2 0003 	sub.w	r0, r2, r3
   17a24:	4770      	bx	lr
   17a26:	bf00      	nop

00017a28 <strcmp>:
   17a28:	7802      	ldrb	r2, [r0, #0]
   17a2a:	780b      	ldrb	r3, [r1, #0]
   17a2c:	2a01      	cmp	r2, #1
   17a2e:	bf28      	it	cs
   17a30:	429a      	cmpcs	r2, r3
   17a32:	d1f5      	bne.n	17a20 <__seofread+0x20>
   17a34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   17a38:	ea40 0401 	orr.w	r4, r0, r1
   17a3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   17a40:	f06f 0c00 	mvn.w	ip, #0
   17a44:	ea4f 7244 	mov.w	r2, r4, lsl #29
   17a48:	b312      	cbz	r2, 17a90 <strcmp+0x68>
   17a4a:	ea80 0401 	eor.w	r4, r0, r1
   17a4e:	f014 0f07 	tst.w	r4, #7
   17a52:	d16a      	bne.n	17b2a <strcmp+0x102>
   17a54:	f000 0407 	and.w	r4, r0, #7
   17a58:	f020 0007 	bic.w	r0, r0, #7
   17a5c:	f004 0503 	and.w	r5, r4, #3
   17a60:	f021 0107 	bic.w	r1, r1, #7
   17a64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   17a68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   17a6c:	f014 0f04 	tst.w	r4, #4
   17a70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   17a74:	fa0c f405 	lsl.w	r4, ip, r5
   17a78:	ea62 0204 	orn	r2, r2, r4
   17a7c:	ea66 0604 	orn	r6, r6, r4
   17a80:	d00a      	beq.n	17a98 <strcmp+0x70>
   17a82:	ea63 0304 	orn	r3, r3, r4
   17a86:	4662      	mov	r2, ip
   17a88:	ea67 0704 	orn	r7, r7, r4
   17a8c:	4666      	mov	r6, ip
   17a8e:	e003      	b.n	17a98 <strcmp+0x70>
   17a90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   17a94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   17a98:	fa82 f54c 	uadd8	r5, r2, ip
   17a9c:	ea82 0406 	eor.w	r4, r2, r6
   17aa0:	faa4 f48c 	sel	r4, r4, ip
   17aa4:	bb6c      	cbnz	r4, 17b02 <strcmp+0xda>
   17aa6:	fa83 f54c 	uadd8	r5, r3, ip
   17aaa:	ea83 0507 	eor.w	r5, r3, r7
   17aae:	faa5 f58c 	sel	r5, r5, ip
   17ab2:	b995      	cbnz	r5, 17ada <strcmp+0xb2>
   17ab4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   17ab8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   17abc:	fa82 f54c 	uadd8	r5, r2, ip
   17ac0:	ea82 0406 	eor.w	r4, r2, r6
   17ac4:	faa4 f48c 	sel	r4, r4, ip
   17ac8:	fa83 f54c 	uadd8	r5, r3, ip
   17acc:	ea83 0507 	eor.w	r5, r3, r7
   17ad0:	faa5 f58c 	sel	r5, r5, ip
   17ad4:	4325      	orrs	r5, r4
   17ad6:	d0db      	beq.n	17a90 <strcmp+0x68>
   17ad8:	b99c      	cbnz	r4, 17b02 <strcmp+0xda>
   17ada:	ba2d      	rev	r5, r5
   17adc:	fab5 f485 	clz	r4, r5
   17ae0:	f024 0407 	bic.w	r4, r4, #7
   17ae4:	fa27 f104 	lsr.w	r1, r7, r4
   17ae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   17aec:	fa23 f304 	lsr.w	r3, r3, r4
   17af0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   17af4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   17af8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17afc:	eba0 0001 	sub.w	r0, r0, r1
   17b00:	4770      	bx	lr
   17b02:	ba24      	rev	r4, r4
   17b04:	fab4 f484 	clz	r4, r4
   17b08:	f024 0407 	bic.w	r4, r4, #7
   17b0c:	fa26 f104 	lsr.w	r1, r6, r4
   17b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   17b14:	fa22 f204 	lsr.w	r2, r2, r4
   17b18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   17b1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   17b20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17b24:	eba0 0001 	sub.w	r0, r0, r1
   17b28:	4770      	bx	lr
   17b2a:	f014 0f03 	tst.w	r4, #3
   17b2e:	d13c      	bne.n	17baa <strcmp+0x182>
   17b30:	f010 0403 	ands.w	r4, r0, #3
   17b34:	d128      	bne.n	17b88 <strcmp+0x160>
   17b36:	f850 2b08 	ldr.w	r2, [r0], #8
   17b3a:	f851 3b08 	ldr.w	r3, [r1], #8
   17b3e:	fa82 f54c 	uadd8	r5, r2, ip
   17b42:	ea82 0503 	eor.w	r5, r2, r3
   17b46:	faa5 f58c 	sel	r5, r5, ip
   17b4a:	b95d      	cbnz	r5, 17b64 <strcmp+0x13c>
   17b4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   17b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
   17b54:	fa82 f54c 	uadd8	r5, r2, ip
   17b58:	ea82 0503 	eor.w	r5, r2, r3
   17b5c:	faa5 f58c 	sel	r5, r5, ip
   17b60:	2d00      	cmp	r5, #0
   17b62:	d0e8      	beq.n	17b36 <strcmp+0x10e>
   17b64:	ba2d      	rev	r5, r5
   17b66:	fab5 f485 	clz	r4, r5
   17b6a:	f024 0407 	bic.w	r4, r4, #7
   17b6e:	fa23 f104 	lsr.w	r1, r3, r4
   17b72:	fa22 f204 	lsr.w	r2, r2, r4
   17b76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   17b7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   17b7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17b82:	eba0 0001 	sub.w	r0, r0, r1
   17b86:	4770      	bx	lr
   17b88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   17b8c:	f020 0003 	bic.w	r0, r0, #3
   17b90:	f850 2b08 	ldr.w	r2, [r0], #8
   17b94:	f021 0103 	bic.w	r1, r1, #3
   17b98:	f851 3b08 	ldr.w	r3, [r1], #8
   17b9c:	fa0c f404 	lsl.w	r4, ip, r4
   17ba0:	ea62 0204 	orn	r2, r2, r4
   17ba4:	ea63 0304 	orn	r3, r3, r4
   17ba8:	e7c9      	b.n	17b3e <strcmp+0x116>
   17baa:	f010 0403 	ands.w	r4, r0, #3
   17bae:	d01a      	beq.n	17be6 <strcmp+0x1be>
   17bb0:	eba1 0104 	sub.w	r1, r1, r4
   17bb4:	f020 0003 	bic.w	r0, r0, #3
   17bb8:	07e4      	lsls	r4, r4, #31
   17bba:	f850 2b04 	ldr.w	r2, [r0], #4
   17bbe:	d006      	beq.n	17bce <strcmp+0x1a6>
   17bc0:	d20f      	bcs.n	17be2 <strcmp+0x1ba>
   17bc2:	788b      	ldrb	r3, [r1, #2]
   17bc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   17bc8:	1ae4      	subs	r4, r4, r3
   17bca:	d106      	bne.n	17bda <strcmp+0x1b2>
   17bcc:	b12b      	cbz	r3, 17bda <strcmp+0x1b2>
   17bce:	78cb      	ldrb	r3, [r1, #3]
   17bd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   17bd4:	1ae4      	subs	r4, r4, r3
   17bd6:	d100      	bne.n	17bda <strcmp+0x1b2>
   17bd8:	b91b      	cbnz	r3, 17be2 <strcmp+0x1ba>
   17bda:	4620      	mov	r0, r4
   17bdc:	f85d 4b10 	ldr.w	r4, [sp], #16
   17be0:	4770      	bx	lr
   17be2:	f101 0104 	add.w	r1, r1, #4
   17be6:	f850 2b04 	ldr.w	r2, [r0], #4
   17bea:	07cc      	lsls	r4, r1, #31
   17bec:	f021 0103 	bic.w	r1, r1, #3
   17bf0:	f851 3b04 	ldr.w	r3, [r1], #4
   17bf4:	d848      	bhi.n	17c88 <strcmp+0x260>
   17bf6:	d224      	bcs.n	17c42 <strcmp+0x21a>
   17bf8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   17bfc:	fa82 f54c 	uadd8	r5, r2, ip
   17c00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   17c04:	faa5 f58c 	sel	r5, r5, ip
   17c08:	d10a      	bne.n	17c20 <strcmp+0x1f8>
   17c0a:	b965      	cbnz	r5, 17c26 <strcmp+0x1fe>
   17c0c:	f851 3b04 	ldr.w	r3, [r1], #4
   17c10:	ea84 0402 	eor.w	r4, r4, r2
   17c14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   17c18:	d10e      	bne.n	17c38 <strcmp+0x210>
   17c1a:	f850 2b04 	ldr.w	r2, [r0], #4
   17c1e:	e7eb      	b.n	17bf8 <strcmp+0x1d0>
   17c20:	ea4f 2313 	mov.w	r3, r3, lsr #8
   17c24:	e055      	b.n	17cd2 <strcmp+0x2aa>
   17c26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   17c2a:	d14d      	bne.n	17cc8 <strcmp+0x2a0>
   17c2c:	7808      	ldrb	r0, [r1, #0]
   17c2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17c32:	f1c0 0000 	rsb	r0, r0, #0
   17c36:	4770      	bx	lr
   17c38:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17c3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   17c40:	e047      	b.n	17cd2 <strcmp+0x2aa>
   17c42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   17c46:	fa82 f54c 	uadd8	r5, r2, ip
   17c4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   17c4e:	faa5 f58c 	sel	r5, r5, ip
   17c52:	d10a      	bne.n	17c6a <strcmp+0x242>
   17c54:	b965      	cbnz	r5, 17c70 <strcmp+0x248>
   17c56:	f851 3b04 	ldr.w	r3, [r1], #4
   17c5a:	ea84 0402 	eor.w	r4, r4, r2
   17c5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   17c62:	d10c      	bne.n	17c7e <strcmp+0x256>
   17c64:	f850 2b04 	ldr.w	r2, [r0], #4
   17c68:	e7eb      	b.n	17c42 <strcmp+0x21a>
   17c6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   17c6e:	e030      	b.n	17cd2 <strcmp+0x2aa>
   17c70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   17c74:	d128      	bne.n	17cc8 <strcmp+0x2a0>
   17c76:	880b      	ldrh	r3, [r1, #0]
   17c78:	ea4f 4212 	mov.w	r2, r2, lsr #16
   17c7c:	e029      	b.n	17cd2 <strcmp+0x2aa>
   17c7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   17c82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   17c86:	e024      	b.n	17cd2 <strcmp+0x2aa>
   17c88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   17c8c:	fa82 f54c 	uadd8	r5, r2, ip
   17c90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   17c94:	faa5 f58c 	sel	r5, r5, ip
   17c98:	d10a      	bne.n	17cb0 <strcmp+0x288>
   17c9a:	b965      	cbnz	r5, 17cb6 <strcmp+0x28e>
   17c9c:	f851 3b04 	ldr.w	r3, [r1], #4
   17ca0:	ea84 0402 	eor.w	r4, r4, r2
   17ca4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   17ca8:	d109      	bne.n	17cbe <strcmp+0x296>
   17caa:	f850 2b04 	ldr.w	r2, [r0], #4
   17cae:	e7eb      	b.n	17c88 <strcmp+0x260>
   17cb0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   17cb4:	e00d      	b.n	17cd2 <strcmp+0x2aa>
   17cb6:	f015 0fff 	tst.w	r5, #255	; 0xff
   17cba:	d105      	bne.n	17cc8 <strcmp+0x2a0>
   17cbc:	680b      	ldr	r3, [r1, #0]
   17cbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   17cc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   17cc6:	e004      	b.n	17cd2 <strcmp+0x2aa>
   17cc8:	f04f 0000 	mov.w	r0, #0
   17ccc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17cd0:	4770      	bx	lr
   17cd2:	ba12      	rev	r2, r2
   17cd4:	ba1b      	rev	r3, r3
   17cd6:	fa82 f44c 	uadd8	r4, r2, ip
   17cda:	ea82 0403 	eor.w	r4, r2, r3
   17cde:	faa4 f58c 	sel	r5, r4, ip
   17ce2:	fab5 f485 	clz	r4, r5
   17ce6:	fa02 f204 	lsl.w	r2, r2, r4
   17cea:	fa03 f304 	lsl.w	r3, r3, r4
   17cee:	ea4f 6012 	mov.w	r0, r2, lsr #24
   17cf2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   17cf6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   17cfa:	4770      	bx	lr

00017cfc <strcpy>:
   17cfc:	ea80 0201 	eor.w	r2, r0, r1
   17d00:	4684      	mov	ip, r0
   17d02:	f012 0f03 	tst.w	r2, #3
   17d06:	d14f      	bne.n	17da8 <strcpy+0xac>
   17d08:	f011 0f03 	tst.w	r1, #3
   17d0c:	d132      	bne.n	17d74 <strcpy+0x78>
   17d0e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   17d12:	f011 0f04 	tst.w	r1, #4
   17d16:	f851 3b04 	ldr.w	r3, [r1], #4
   17d1a:	d00b      	beq.n	17d34 <strcpy+0x38>
   17d1c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   17d20:	439a      	bics	r2, r3
   17d22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   17d26:	bf04      	itt	eq
   17d28:	f84c 3b04 	streq.w	r3, [ip], #4
   17d2c:	f851 3b04 	ldreq.w	r3, [r1], #4
   17d30:	d116      	bne.n	17d60 <strcpy+0x64>
   17d32:	bf00      	nop
   17d34:	f851 4b04 	ldr.w	r4, [r1], #4
   17d38:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   17d3c:	439a      	bics	r2, r3
   17d3e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   17d42:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   17d46:	d10b      	bne.n	17d60 <strcpy+0x64>
   17d48:	f84c 3b04 	str.w	r3, [ip], #4
   17d4c:	43a2      	bics	r2, r4
   17d4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   17d52:	bf04      	itt	eq
   17d54:	f851 3b04 	ldreq.w	r3, [r1], #4
   17d58:	f84c 4b04 	streq.w	r4, [ip], #4
   17d5c:	d0ea      	beq.n	17d34 <strcpy+0x38>
   17d5e:	4623      	mov	r3, r4
   17d60:	f80c 3b01 	strb.w	r3, [ip], #1
   17d64:	f013 0fff 	tst.w	r3, #255	; 0xff
   17d68:	ea4f 2333 	mov.w	r3, r3, ror #8
   17d6c:	d1f8      	bne.n	17d60 <strcpy+0x64>
   17d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   17d72:	4770      	bx	lr
   17d74:	f011 0f01 	tst.w	r1, #1
   17d78:	d006      	beq.n	17d88 <strcpy+0x8c>
   17d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   17d7e:	f80c 2b01 	strb.w	r2, [ip], #1
   17d82:	2a00      	cmp	r2, #0
   17d84:	bf08      	it	eq
   17d86:	4770      	bxeq	lr
   17d88:	f011 0f02 	tst.w	r1, #2
   17d8c:	d0bf      	beq.n	17d0e <strcpy+0x12>
   17d8e:	f831 2b02 	ldrh.w	r2, [r1], #2
   17d92:	f012 0fff 	tst.w	r2, #255	; 0xff
   17d96:	bf16      	itet	ne
   17d98:	f82c 2b02 	strhne.w	r2, [ip], #2
   17d9c:	f88c 2000 	strbeq.w	r2, [ip]
   17da0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   17da4:	d1b3      	bne.n	17d0e <strcpy+0x12>
   17da6:	4770      	bx	lr
   17da8:	f811 2b01 	ldrb.w	r2, [r1], #1
   17dac:	f80c 2b01 	strb.w	r2, [ip], #1
   17db0:	2a00      	cmp	r2, #0
   17db2:	d1f9      	bne.n	17da8 <strcpy+0xac>
   17db4:	4770      	bx	lr
   17db6:	bf00      	nop

00017db8 <strncmp>:
   17db8:	2a00      	cmp	r2, #0
   17dba:	d041      	beq.n	17e40 <strncmp+0x88>
   17dbc:	ea40 0301 	orr.w	r3, r0, r1
   17dc0:	f013 0303 	ands.w	r3, r3, #3
   17dc4:	b4f0      	push	{r4, r5, r6, r7}
   17dc6:	d125      	bne.n	17e14 <strncmp+0x5c>
   17dc8:	2a03      	cmp	r2, #3
   17dca:	d923      	bls.n	17e14 <strncmp+0x5c>
   17dcc:	6804      	ldr	r4, [r0, #0]
   17dce:	680d      	ldr	r5, [r1, #0]
   17dd0:	42ac      	cmp	r4, r5
   17dd2:	d11f      	bne.n	17e14 <strncmp+0x5c>
   17dd4:	3a04      	subs	r2, #4
   17dd6:	d038      	beq.n	17e4a <strncmp+0x92>
   17dd8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   17ddc:	ea25 0404 	bic.w	r4, r5, r4
   17de0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   17de4:	d12e      	bne.n	17e44 <strncmp+0x8c>
   17de6:	3004      	adds	r0, #4
   17de8:	3104      	adds	r1, #4
   17dea:	e00f      	b.n	17e0c <strncmp+0x54>
   17dec:	f850 3b04 	ldr.w	r3, [r0], #4
   17df0:	680e      	ldr	r6, [r1, #0]
   17df2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   17df6:	42b3      	cmp	r3, r6
   17df8:	ea24 0403 	bic.w	r4, r4, r3
   17dfc:	f101 0104 	add.w	r1, r1, #4
   17e00:	d126      	bne.n	17e50 <strncmp+0x98>
   17e02:	3a04      	subs	r2, #4
   17e04:	d021      	beq.n	17e4a <strncmp+0x92>
   17e06:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   17e0a:	d11b      	bne.n	17e44 <strncmp+0x8c>
   17e0c:	2a03      	cmp	r2, #3
   17e0e:	4607      	mov	r7, r0
   17e10:	460d      	mov	r5, r1
   17e12:	d8eb      	bhi.n	17dec <strncmp+0x34>
   17e14:	7805      	ldrb	r5, [r0, #0]
   17e16:	780c      	ldrb	r4, [r1, #0]
   17e18:	42ac      	cmp	r4, r5
   17e1a:	f102 33ff 	add.w	r3, r2, #4294967295
   17e1e:	d11a      	bne.n	17e56 <strncmp+0x9e>
   17e20:	b183      	cbz	r3, 17e44 <strncmp+0x8c>
   17e22:	b914      	cbnz	r4, 17e2a <strncmp+0x72>
   17e24:	e00e      	b.n	17e44 <strncmp+0x8c>
   17e26:	b16b      	cbz	r3, 17e44 <strncmp+0x8c>
   17e28:	b17a      	cbz	r2, 17e4a <strncmp+0x92>
   17e2a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   17e2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   17e32:	42a2      	cmp	r2, r4
   17e34:	f103 33ff 	add.w	r3, r3, #4294967295
   17e38:	d0f5      	beq.n	17e26 <strncmp+0x6e>
   17e3a:	1b10      	subs	r0, r2, r4
   17e3c:	bcf0      	pop	{r4, r5, r6, r7}
   17e3e:	4770      	bx	lr
   17e40:	4610      	mov	r0, r2
   17e42:	4770      	bx	lr
   17e44:	2000      	movs	r0, #0
   17e46:	bcf0      	pop	{r4, r5, r6, r7}
   17e48:	4770      	bx	lr
   17e4a:	4610      	mov	r0, r2
   17e4c:	bcf0      	pop	{r4, r5, r6, r7}
   17e4e:	4770      	bx	lr
   17e50:	4629      	mov	r1, r5
   17e52:	4638      	mov	r0, r7
   17e54:	e7de      	b.n	17e14 <strncmp+0x5c>
   17e56:	462a      	mov	r2, r5
   17e58:	e7ef      	b.n	17e3a <strncmp+0x82>
   17e5a:	bf00      	nop

00017e5c <_strtoul_l.isra.0>:
   17e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   17e64:	460e      	mov	r6, r1
   17e66:	4607      	mov	r7, r0
   17e68:	4615      	mov	r5, r2
   17e6a:	4698      	mov	r8, r3
   17e6c:	468a      	mov	sl, r1
   17e6e:	e000      	b.n	17e72 <_strtoul_l.isra.0+0x16>
   17e70:	46a2      	mov	sl, r4
   17e72:	4654      	mov	r4, sl
   17e74:	4648      	mov	r0, r9
   17e76:	f814 bb01 	ldrb.w	fp, [r4], #1
   17e7a:	f001 fd6b 	bl	19954 <__locale_ctype_ptr_l>
   17e7e:	4458      	add	r0, fp
   17e80:	7840      	ldrb	r0, [r0, #1]
   17e82:	f010 0008 	ands.w	r0, r0, #8
   17e86:	d1f3      	bne.n	17e70 <_strtoul_l.isra.0+0x14>
   17e88:	4659      	mov	r1, fp
   17e8a:	292d      	cmp	r1, #45	; 0x2d
   17e8c:	d059      	beq.n	17f42 <_strtoul_l.isra.0+0xe6>
   17e8e:	292b      	cmp	r1, #43	; 0x2b
   17e90:	bf04      	itt	eq
   17e92:	7821      	ldrbeq	r1, [r4, #0]
   17e94:	f10a 0402 	addeq.w	r4, sl, #2
   17e98:	f1b8 0f00 	cmp.w	r8, #0
   17e9c:	d00c      	beq.n	17eb8 <_strtoul_l.isra.0+0x5c>
   17e9e:	f1b8 0f10 	cmp.w	r8, #16
   17ea2:	d053      	beq.n	17f4c <_strtoul_l.isra.0+0xf0>
   17ea4:	f04f 3cff 	mov.w	ip, #4294967295
   17ea8:	fbbc fcf8 	udiv	ip, ip, r8
   17eac:	fb08 fa0c 	mul.w	sl, r8, ip
   17eb0:	ea6f 0a0a 	mvn.w	sl, sl
   17eb4:	46c1      	mov	r9, r8
   17eb6:	e008      	b.n	17eca <_strtoul_l.isra.0+0x6e>
   17eb8:	2930      	cmp	r1, #48	; 0x30
   17eba:	d058      	beq.n	17f6e <_strtoul_l.isra.0+0x112>
   17ebc:	f04f 080a 	mov.w	r8, #10
   17ec0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 17fa0 <_strtoul_l.isra.0+0x144>
   17ec4:	46c1      	mov	r9, r8
   17ec6:	f04f 0a05 	mov.w	sl, #5
   17eca:	2300      	movs	r3, #0
   17ecc:	469e      	mov	lr, r3
   17ece:	e005      	b.n	17edc <_strtoul_l.isra.0+0x80>
   17ed0:	d02a      	beq.n	17f28 <_strtoul_l.isra.0+0xcc>
   17ed2:	fb09 2e0e 	mla	lr, r9, lr, r2
   17ed6:	2301      	movs	r3, #1
   17ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
   17edc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   17ee0:	2a09      	cmp	r2, #9
   17ee2:	d905      	bls.n	17ef0 <_strtoul_l.isra.0+0x94>
   17ee4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   17ee8:	2a19      	cmp	r2, #25
   17eea:	d80a      	bhi.n	17f02 <_strtoul_l.isra.0+0xa6>
   17eec:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   17ef0:	4590      	cmp	r8, r2
   17ef2:	dd0e      	ble.n	17f12 <_strtoul_l.isra.0+0xb6>
   17ef4:	2b00      	cmp	r3, #0
   17ef6:	db01      	blt.n	17efc <_strtoul_l.isra.0+0xa0>
   17ef8:	45e6      	cmp	lr, ip
   17efa:	d9e9      	bls.n	17ed0 <_strtoul_l.isra.0+0x74>
   17efc:	f04f 33ff 	mov.w	r3, #4294967295
   17f00:	e7ea      	b.n	17ed8 <_strtoul_l.isra.0+0x7c>
   17f02:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   17f06:	2a19      	cmp	r2, #25
   17f08:	d803      	bhi.n	17f12 <_strtoul_l.isra.0+0xb6>
   17f0a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   17f0e:	4590      	cmp	r8, r2
   17f10:	dcf0      	bgt.n	17ef4 <_strtoul_l.isra.0+0x98>
   17f12:	2b00      	cmp	r3, #0
   17f14:	db0d      	blt.n	17f32 <_strtoul_l.isra.0+0xd6>
   17f16:	b108      	cbz	r0, 17f1c <_strtoul_l.isra.0+0xc0>
   17f18:	f1ce 0e00 	rsb	lr, lr, #0
   17f1c:	b10d      	cbz	r5, 17f22 <_strtoul_l.isra.0+0xc6>
   17f1e:	b973      	cbnz	r3, 17f3e <_strtoul_l.isra.0+0xe2>
   17f20:	602e      	str	r6, [r5, #0]
   17f22:	4670      	mov	r0, lr
   17f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f28:	4552      	cmp	r2, sl
   17f2a:	ddd2      	ble.n	17ed2 <_strtoul_l.isra.0+0x76>
   17f2c:	f04f 33ff 	mov.w	r3, #4294967295
   17f30:	e7d2      	b.n	17ed8 <_strtoul_l.isra.0+0x7c>
   17f32:	2322      	movs	r3, #34	; 0x22
   17f34:	603b      	str	r3, [r7, #0]
   17f36:	f04f 3eff 	mov.w	lr, #4294967295
   17f3a:	2d00      	cmp	r5, #0
   17f3c:	d0f1      	beq.n	17f22 <_strtoul_l.isra.0+0xc6>
   17f3e:	1e66      	subs	r6, r4, #1
   17f40:	e7ee      	b.n	17f20 <_strtoul_l.isra.0+0xc4>
   17f42:	7821      	ldrb	r1, [r4, #0]
   17f44:	2001      	movs	r0, #1
   17f46:	f10a 0402 	add.w	r4, sl, #2
   17f4a:	e7a5      	b.n	17e98 <_strtoul_l.isra.0+0x3c>
   17f4c:	2930      	cmp	r1, #48	; 0x30
   17f4e:	d11b      	bne.n	17f88 <_strtoul_l.isra.0+0x12c>
   17f50:	7823      	ldrb	r3, [r4, #0]
   17f52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17f56:	2b58      	cmp	r3, #88	; 0x58
   17f58:	d11c      	bne.n	17f94 <_strtoul_l.isra.0+0x138>
   17f5a:	f04f 0910 	mov.w	r9, #16
   17f5e:	7861      	ldrb	r1, [r4, #1]
   17f60:	46c8      	mov	r8, r9
   17f62:	f04f 0a0f 	mov.w	sl, #15
   17f66:	3402      	adds	r4, #2
   17f68:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   17f6c:	e7ad      	b.n	17eca <_strtoul_l.isra.0+0x6e>
   17f6e:	7823      	ldrb	r3, [r4, #0]
   17f70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17f74:	2b58      	cmp	r3, #88	; 0x58
   17f76:	d0f0      	beq.n	17f5a <_strtoul_l.isra.0+0xfe>
   17f78:	f04f 0808 	mov.w	r8, #8
   17f7c:	46c1      	mov	r9, r8
   17f7e:	f04f 0a07 	mov.w	sl, #7
   17f82:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   17f86:	e7a0      	b.n	17eca <_strtoul_l.isra.0+0x6e>
   17f88:	f04f 0a0f 	mov.w	sl, #15
   17f8c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   17f90:	46c1      	mov	r9, r8
   17f92:	e79a      	b.n	17eca <_strtoul_l.isra.0+0x6e>
   17f94:	46c1      	mov	r9, r8
   17f96:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   17f9a:	f04f 0a0f 	mov.w	sl, #15
   17f9e:	e794      	b.n	17eca <_strtoul_l.isra.0+0x6e>
   17fa0:	19999999 	.word	0x19999999

00017fa4 <_strtoul_r>:
   17fa4:	b530      	push	{r4, r5, lr}
   17fa6:	4c06      	ldr	r4, [pc, #24]	; (17fc0 <_strtoul_r+0x1c>)
   17fa8:	4d06      	ldr	r5, [pc, #24]	; (17fc4 <_strtoul_r+0x20>)
   17faa:	6824      	ldr	r4, [r4, #0]
   17fac:	6b64      	ldr	r4, [r4, #52]	; 0x34
   17fae:	b083      	sub	sp, #12
   17fb0:	2c00      	cmp	r4, #0
   17fb2:	bf08      	it	eq
   17fb4:	462c      	moveq	r4, r5
   17fb6:	9400      	str	r4, [sp, #0]
   17fb8:	f7ff ff50 	bl	17e5c <_strtoul_l.isra.0>
   17fbc:	b003      	add	sp, #12
   17fbe:	bd30      	pop	{r4, r5, pc}
   17fc0:	2000019c 	.word	0x2000019c
   17fc4:	20000a28 	.word	0x20000a28

00017fc8 <strtoul>:
   17fc8:	b530      	push	{r4, r5, lr}
   17fca:	4c08      	ldr	r4, [pc, #32]	; (17fec <strtoul+0x24>)
   17fcc:	4b08      	ldr	r3, [pc, #32]	; (17ff0 <strtoul+0x28>)
   17fce:	6825      	ldr	r5, [r4, #0]
   17fd0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   17fd2:	b083      	sub	sp, #12
   17fd4:	2c00      	cmp	r4, #0
   17fd6:	bf08      	it	eq
   17fd8:	461c      	moveq	r4, r3
   17fda:	9400      	str	r4, [sp, #0]
   17fdc:	4613      	mov	r3, r2
   17fde:	460a      	mov	r2, r1
   17fe0:	4601      	mov	r1, r0
   17fe2:	4628      	mov	r0, r5
   17fe4:	f7ff ff3a 	bl	17e5c <_strtoul_l.isra.0>
   17fe8:	b003      	add	sp, #12
   17fea:	bd30      	pop	{r4, r5, pc}
   17fec:	2000019c 	.word	0x2000019c
   17ff0:	20000a28 	.word	0x20000a28

00017ff4 <__ssprint_r>:
   17ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ff8:	6893      	ldr	r3, [r2, #8]
   17ffa:	b083      	sub	sp, #12
   17ffc:	4690      	mov	r8, r2
   17ffe:	2b00      	cmp	r3, #0
   18000:	d070      	beq.n	180e4 <__ssprint_r+0xf0>
   18002:	4682      	mov	sl, r0
   18004:	460c      	mov	r4, r1
   18006:	6817      	ldr	r7, [r2, #0]
   18008:	688d      	ldr	r5, [r1, #8]
   1800a:	6808      	ldr	r0, [r1, #0]
   1800c:	e042      	b.n	18094 <__ssprint_r+0xa0>
   1800e:	89a3      	ldrh	r3, [r4, #12]
   18010:	f413 6f90 	tst.w	r3, #1152	; 0x480
   18014:	d02e      	beq.n	18074 <__ssprint_r+0x80>
   18016:	6965      	ldr	r5, [r4, #20]
   18018:	6921      	ldr	r1, [r4, #16]
   1801a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1801e:	eba0 0b01 	sub.w	fp, r0, r1
   18022:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   18026:	f10b 0001 	add.w	r0, fp, #1
   1802a:	106d      	asrs	r5, r5, #1
   1802c:	4430      	add	r0, r6
   1802e:	42a8      	cmp	r0, r5
   18030:	462a      	mov	r2, r5
   18032:	bf84      	itt	hi
   18034:	4605      	movhi	r5, r0
   18036:	462a      	movhi	r2, r5
   18038:	055b      	lsls	r3, r3, #21
   1803a:	d538      	bpl.n	180ae <__ssprint_r+0xba>
   1803c:	4611      	mov	r1, r2
   1803e:	4650      	mov	r0, sl
   18040:	f7ff f96c 	bl	1731c <_malloc_r>
   18044:	2800      	cmp	r0, #0
   18046:	d03c      	beq.n	180c2 <__ssprint_r+0xce>
   18048:	465a      	mov	r2, fp
   1804a:	6921      	ldr	r1, [r4, #16]
   1804c:	9001      	str	r0, [sp, #4]
   1804e:	f7fe fb71 	bl	16734 <memcpy>
   18052:	89a2      	ldrh	r2, [r4, #12]
   18054:	9b01      	ldr	r3, [sp, #4]
   18056:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1805a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1805e:	81a2      	strh	r2, [r4, #12]
   18060:	eba5 020b 	sub.w	r2, r5, fp
   18064:	eb03 000b 	add.w	r0, r3, fp
   18068:	6165      	str	r5, [r4, #20]
   1806a:	6123      	str	r3, [r4, #16]
   1806c:	6020      	str	r0, [r4, #0]
   1806e:	60a2      	str	r2, [r4, #8]
   18070:	4635      	mov	r5, r6
   18072:	46b3      	mov	fp, r6
   18074:	465a      	mov	r2, fp
   18076:	4649      	mov	r1, r9
   18078:	f001 fcc2 	bl	19a00 <memmove>
   1807c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   18080:	68a2      	ldr	r2, [r4, #8]
   18082:	6820      	ldr	r0, [r4, #0]
   18084:	1b55      	subs	r5, r2, r5
   18086:	4458      	add	r0, fp
   18088:	1b9e      	subs	r6, r3, r6
   1808a:	60a5      	str	r5, [r4, #8]
   1808c:	6020      	str	r0, [r4, #0]
   1808e:	f8c8 6008 	str.w	r6, [r8, #8]
   18092:	b33e      	cbz	r6, 180e4 <__ssprint_r+0xf0>
   18094:	687e      	ldr	r6, [r7, #4]
   18096:	463b      	mov	r3, r7
   18098:	3708      	adds	r7, #8
   1809a:	2e00      	cmp	r6, #0
   1809c:	d0fa      	beq.n	18094 <__ssprint_r+0xa0>
   1809e:	42ae      	cmp	r6, r5
   180a0:	f8d3 9000 	ldr.w	r9, [r3]
   180a4:	46ab      	mov	fp, r5
   180a6:	d2b2      	bcs.n	1800e <__ssprint_r+0x1a>
   180a8:	4635      	mov	r5, r6
   180aa:	46b3      	mov	fp, r6
   180ac:	e7e2      	b.n	18074 <__ssprint_r+0x80>
   180ae:	4650      	mov	r0, sl
   180b0:	f001 fd0a 	bl	19ac8 <_realloc_r>
   180b4:	4603      	mov	r3, r0
   180b6:	2800      	cmp	r0, #0
   180b8:	d1d2      	bne.n	18060 <__ssprint_r+0x6c>
   180ba:	6921      	ldr	r1, [r4, #16]
   180bc:	4650      	mov	r0, sl
   180be:	f001 fb47 	bl	19750 <_free_r>
   180c2:	230c      	movs	r3, #12
   180c4:	f8ca 3000 	str.w	r3, [sl]
   180c8:	89a3      	ldrh	r3, [r4, #12]
   180ca:	2200      	movs	r2, #0
   180cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   180d0:	f04f 30ff 	mov.w	r0, #4294967295
   180d4:	81a3      	strh	r3, [r4, #12]
   180d6:	f8c8 2008 	str.w	r2, [r8, #8]
   180da:	f8c8 2004 	str.w	r2, [r8, #4]
   180de:	b003      	add	sp, #12
   180e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180e4:	2000      	movs	r0, #0
   180e6:	f8c8 0004 	str.w	r0, [r8, #4]
   180ea:	b003      	add	sp, #12
   180ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000180f0 <_svfiprintf_r>:
   180f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180f4:	b0ad      	sub	sp, #180	; 0xb4
   180f6:	460c      	mov	r4, r1
   180f8:	9105      	str	r1, [sp, #20]
   180fa:	8989      	ldrh	r1, [r1, #12]
   180fc:	9307      	str	r3, [sp, #28]
   180fe:	060d      	lsls	r5, r1, #24
   18100:	900a      	str	r0, [sp, #40]	; 0x28
   18102:	d503      	bpl.n	1810c <_svfiprintf_r+0x1c>
   18104:	6923      	ldr	r3, [r4, #16]
   18106:	2b00      	cmp	r3, #0
   18108:	f000 84d6 	beq.w	18ab8 <_svfiprintf_r+0x9c8>
   1810c:	2300      	movs	r3, #0
   1810e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   18112:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   18114:	930b      	str	r3, [sp, #44]	; 0x2c
   18116:	4693      	mov	fp, r2
   18118:	9311      	str	r3, [sp, #68]	; 0x44
   1811a:	9310      	str	r3, [sp, #64]	; 0x40
   1811c:	9302      	str	r3, [sp, #8]
   1811e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   18122:	46d1      	mov	r9, sl
   18124:	f89b 3000 	ldrb.w	r3, [fp]
   18128:	465c      	mov	r4, fp
   1812a:	b1eb      	cbz	r3, 18168 <_svfiprintf_r+0x78>
   1812c:	2b25      	cmp	r3, #37	; 0x25
   1812e:	d102      	bne.n	18136 <_svfiprintf_r+0x46>
   18130:	e01a      	b.n	18168 <_svfiprintf_r+0x78>
   18132:	2b25      	cmp	r3, #37	; 0x25
   18134:	d003      	beq.n	1813e <_svfiprintf_r+0x4e>
   18136:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1813a:	2b00      	cmp	r3, #0
   1813c:	d1f9      	bne.n	18132 <_svfiprintf_r+0x42>
   1813e:	eba4 050b 	sub.w	r5, r4, fp
   18142:	b18d      	cbz	r5, 18168 <_svfiprintf_r+0x78>
   18144:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18146:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18148:	f8c9 b000 	str.w	fp, [r9]
   1814c:	3301      	adds	r3, #1
   1814e:	442a      	add	r2, r5
   18150:	2b07      	cmp	r3, #7
   18152:	f8c9 5004 	str.w	r5, [r9, #4]
   18156:	9211      	str	r2, [sp, #68]	; 0x44
   18158:	9310      	str	r3, [sp, #64]	; 0x40
   1815a:	f300 83c3 	bgt.w	188e4 <_svfiprintf_r+0x7f4>
   1815e:	f109 0908 	add.w	r9, r9, #8
   18162:	9b02      	ldr	r3, [sp, #8]
   18164:	442b      	add	r3, r5
   18166:	9302      	str	r3, [sp, #8]
   18168:	7823      	ldrb	r3, [r4, #0]
   1816a:	2b00      	cmp	r3, #0
   1816c:	f000 834b 	beq.w	18806 <_svfiprintf_r+0x716>
   18170:	2000      	movs	r0, #0
   18172:	f04f 0300 	mov.w	r3, #0
   18176:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1817a:	f104 0b01 	add.w	fp, r4, #1
   1817e:	7862      	ldrb	r2, [r4, #1]
   18180:	4605      	mov	r5, r0
   18182:	4603      	mov	r3, r0
   18184:	f04f 38ff 	mov.w	r8, #4294967295
   18188:	4604      	mov	r4, r0
   1818a:	f10b 0b01 	add.w	fp, fp, #1
   1818e:	f1a2 0120 	sub.w	r1, r2, #32
   18192:	2958      	cmp	r1, #88	; 0x58
   18194:	f200 826b 	bhi.w	1866e <_svfiprintf_r+0x57e>
   18198:	e8df f011 	tbh	[pc, r1, lsl #1]
   1819c:	026900bd 	.word	0x026900bd
   181a0:	00b80269 	.word	0x00b80269
   181a4:	02690269 	.word	0x02690269
   181a8:	02690269 	.word	0x02690269
   181ac:	02690269 	.word	0x02690269
   181b0:	00b30059 	.word	0x00b30059
   181b4:	00630269 	.word	0x00630269
   181b8:	026901c0 	.word	0x026901c0
   181bc:	01ad01bb 	.word	0x01ad01bb
   181c0:	01ad01ad 	.word	0x01ad01ad
   181c4:	01ad01ad 	.word	0x01ad01ad
   181c8:	01ad01ad 	.word	0x01ad01ad
   181cc:	01ad01ad 	.word	0x01ad01ad
   181d0:	02690269 	.word	0x02690269
   181d4:	02690269 	.word	0x02690269
   181d8:	02690269 	.word	0x02690269
   181dc:	02690269 	.word	0x02690269
   181e0:	02690269 	.word	0x02690269
   181e4:	0269015f 	.word	0x0269015f
   181e8:	02690269 	.word	0x02690269
   181ec:	02690269 	.word	0x02690269
   181f0:	02690269 	.word	0x02690269
   181f4:	02690269 	.word	0x02690269
   181f8:	014d0269 	.word	0x014d0269
   181fc:	02690269 	.word	0x02690269
   18200:	02690269 	.word	0x02690269
   18204:	013c0269 	.word	0x013c0269
   18208:	02690269 	.word	0x02690269
   1820c:	02690125 	.word	0x02690125
   18210:	02690269 	.word	0x02690269
   18214:	02690269 	.word	0x02690269
   18218:	02690269 	.word	0x02690269
   1821c:	02690269 	.word	0x02690269
   18220:	00c50269 	.word	0x00c50269
   18224:	02690200 	.word	0x02690200
   18228:	02690269 	.word	0x02690269
   1822c:	020001fb 	.word	0x020001fb
   18230:	02690269 	.word	0x02690269
   18234:	026901ee 	.word	0x026901ee
   18238:	007a01da 	.word	0x007a01da
   1823c:	02310236 	.word	0x02310236
   18240:	020e0269 	.word	0x020e0269
   18244:	00680269 	.word	0x00680269
   18248:	02690269 	.word	0x02690269
   1824c:	008f      	.short	0x008f
   1824e:	9907      	ldr	r1, [sp, #28]
   18250:	680c      	ldr	r4, [r1, #0]
   18252:	460a      	mov	r2, r1
   18254:	2c00      	cmp	r4, #0
   18256:	f102 0204 	add.w	r2, r2, #4
   1825a:	f280 83c9 	bge.w	189f0 <_svfiprintf_r+0x900>
   1825e:	4264      	negs	r4, r4
   18260:	9207      	str	r2, [sp, #28]
   18262:	f043 0304 	orr.w	r3, r3, #4
   18266:	f89b 2000 	ldrb.w	r2, [fp]
   1826a:	e78e      	b.n	1818a <_svfiprintf_r+0x9a>
   1826c:	9406      	str	r4, [sp, #24]
   1826e:	069c      	lsls	r4, r3, #26
   18270:	f100 80d6 	bmi.w	18420 <_svfiprintf_r+0x330>
   18274:	9907      	ldr	r1, [sp, #28]
   18276:	06d8      	lsls	r0, r3, #27
   18278:	460a      	mov	r2, r1
   1827a:	f100 820a 	bmi.w	18692 <_svfiprintf_r+0x5a2>
   1827e:	065e      	lsls	r6, r3, #25
   18280:	f140 8207 	bpl.w	18692 <_svfiprintf_r+0x5a2>
   18284:	880c      	ldrh	r4, [r1, #0]
   18286:	3104      	adds	r1, #4
   18288:	2500      	movs	r5, #0
   1828a:	2201      	movs	r2, #1
   1828c:	9107      	str	r1, [sp, #28]
   1828e:	e1cc      	b.n	1862a <_svfiprintf_r+0x53a>
   18290:	f013 0220 	ands.w	r2, r3, #32
   18294:	9406      	str	r4, [sp, #24]
   18296:	f040 80d5 	bne.w	18444 <_svfiprintf_r+0x354>
   1829a:	f013 0110 	ands.w	r1, r3, #16
   1829e:	f040 81fe 	bne.w	1869e <_svfiprintf_r+0x5ae>
   182a2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   182a6:	f000 81fa 	beq.w	1869e <_svfiprintf_r+0x5ae>
   182aa:	9807      	ldr	r0, [sp, #28]
   182ac:	460a      	mov	r2, r1
   182ae:	4601      	mov	r1, r0
   182b0:	3104      	adds	r1, #4
   182b2:	8804      	ldrh	r4, [r0, #0]
   182b4:	9107      	str	r1, [sp, #28]
   182b6:	2500      	movs	r5, #0
   182b8:	e1b7      	b.n	1862a <_svfiprintf_r+0x53a>
   182ba:	9406      	str	r4, [sp, #24]
   182bc:	2800      	cmp	r0, #0
   182be:	f040 8431 	bne.w	18b24 <_svfiprintf_r+0xa34>
   182c2:	49ba      	ldr	r1, [pc, #744]	; (185ac <_svfiprintf_r+0x4bc>)
   182c4:	910b      	str	r1, [sp, #44]	; 0x2c
   182c6:	069d      	lsls	r5, r3, #26
   182c8:	f100 8096 	bmi.w	183f8 <_svfiprintf_r+0x308>
   182cc:	9807      	ldr	r0, [sp, #28]
   182ce:	06dc      	lsls	r4, r3, #27
   182d0:	4601      	mov	r1, r0
   182d2:	d402      	bmi.n	182da <_svfiprintf_r+0x1ea>
   182d4:	0658      	lsls	r0, r3, #25
   182d6:	f100 83a9 	bmi.w	18a2c <_svfiprintf_r+0x93c>
   182da:	680c      	ldr	r4, [r1, #0]
   182dc:	3104      	adds	r1, #4
   182de:	9107      	str	r1, [sp, #28]
   182e0:	2500      	movs	r5, #0
   182e2:	07d9      	lsls	r1, r3, #31
   182e4:	f140 8094 	bpl.w	18410 <_svfiprintf_r+0x320>
   182e8:	ea54 0105 	orrs.w	r1, r4, r5
   182ec:	f000 8090 	beq.w	18410 <_svfiprintf_r+0x320>
   182f0:	2130      	movs	r1, #48	; 0x30
   182f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   182f6:	f043 0302 	orr.w	r3, r3, #2
   182fa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   182fe:	2202      	movs	r2, #2
   18300:	e193      	b.n	1862a <_svfiprintf_r+0x53a>
   18302:	f89b 2000 	ldrb.w	r2, [fp]
   18306:	2001      	movs	r0, #1
   18308:	252b      	movs	r5, #43	; 0x2b
   1830a:	e73e      	b.n	1818a <_svfiprintf_r+0x9a>
   1830c:	f043 0301 	orr.w	r3, r3, #1
   18310:	f89b 2000 	ldrb.w	r2, [fp]
   18314:	e739      	b.n	1818a <_svfiprintf_r+0x9a>
   18316:	f89b 2000 	ldrb.w	r2, [fp]
   1831a:	2d00      	cmp	r5, #0
   1831c:	f47f af35 	bne.w	1818a <_svfiprintf_r+0x9a>
   18320:	2001      	movs	r0, #1
   18322:	2520      	movs	r5, #32
   18324:	e731      	b.n	1818a <_svfiprintf_r+0x9a>
   18326:	9907      	ldr	r1, [sp, #28]
   18328:	9406      	str	r4, [sp, #24]
   1832a:	680a      	ldr	r2, [r1, #0]
   1832c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   18330:	f04f 0000 	mov.w	r0, #0
   18334:	460a      	mov	r2, r1
   18336:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1833a:	3204      	adds	r2, #4
   1833c:	2001      	movs	r0, #1
   1833e:	9000      	str	r0, [sp, #0]
   18340:	9207      	str	r2, [sp, #28]
   18342:	9004      	str	r0, [sp, #16]
   18344:	ae12      	add	r6, sp, #72	; 0x48
   18346:	9301      	str	r3, [sp, #4]
   18348:	f04f 0800 	mov.w	r8, #0
   1834c:	9b01      	ldr	r3, [sp, #4]
   1834e:	f013 0302 	ands.w	r3, r3, #2
   18352:	9308      	str	r3, [sp, #32]
   18354:	d002      	beq.n	1835c <_svfiprintf_r+0x26c>
   18356:	9b00      	ldr	r3, [sp, #0]
   18358:	3302      	adds	r3, #2
   1835a:	9300      	str	r3, [sp, #0]
   1835c:	9b01      	ldr	r3, [sp, #4]
   1835e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   18362:	9309      	str	r3, [sp, #36]	; 0x24
   18364:	f040 81a2 	bne.w	186ac <_svfiprintf_r+0x5bc>
   18368:	9b06      	ldr	r3, [sp, #24]
   1836a:	9a00      	ldr	r2, [sp, #0]
   1836c:	1a9c      	subs	r4, r3, r2
   1836e:	2c00      	cmp	r4, #0
   18370:	f340 819c 	ble.w	186ac <_svfiprintf_r+0x5bc>
   18374:	2c10      	cmp	r4, #16
   18376:	9911      	ldr	r1, [sp, #68]	; 0x44
   18378:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1837a:	4d8d      	ldr	r5, [pc, #564]	; (185b0 <_svfiprintf_r+0x4c0>)
   1837c:	dd25      	ble.n	183ca <_svfiprintf_r+0x2da>
   1837e:	4648      	mov	r0, r9
   18380:	2310      	movs	r3, #16
   18382:	46c1      	mov	r9, r8
   18384:	46b0      	mov	r8, r6
   18386:	9e05      	ldr	r6, [sp, #20]
   18388:	e004      	b.n	18394 <_svfiprintf_r+0x2a4>
   1838a:	3c10      	subs	r4, #16
   1838c:	2c10      	cmp	r4, #16
   1838e:	f100 0008 	add.w	r0, r0, #8
   18392:	dd17      	ble.n	183c4 <_svfiprintf_r+0x2d4>
   18394:	3201      	adds	r2, #1
   18396:	3110      	adds	r1, #16
   18398:	2a07      	cmp	r2, #7
   1839a:	9111      	str	r1, [sp, #68]	; 0x44
   1839c:	9210      	str	r2, [sp, #64]	; 0x40
   1839e:	6005      	str	r5, [r0, #0]
   183a0:	6043      	str	r3, [r0, #4]
   183a2:	ddf2      	ble.n	1838a <_svfiprintf_r+0x29a>
   183a4:	aa0f      	add	r2, sp, #60	; 0x3c
   183a6:	4631      	mov	r1, r6
   183a8:	4638      	mov	r0, r7
   183aa:	9303      	str	r3, [sp, #12]
   183ac:	f7ff fe22 	bl	17ff4 <__ssprint_r>
   183b0:	2800      	cmp	r0, #0
   183b2:	f040 822f 	bne.w	18814 <_svfiprintf_r+0x724>
   183b6:	3c10      	subs	r4, #16
   183b8:	2c10      	cmp	r4, #16
   183ba:	9911      	ldr	r1, [sp, #68]	; 0x44
   183bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   183be:	9b03      	ldr	r3, [sp, #12]
   183c0:	4650      	mov	r0, sl
   183c2:	dce7      	bgt.n	18394 <_svfiprintf_r+0x2a4>
   183c4:	4646      	mov	r6, r8
   183c6:	46c8      	mov	r8, r9
   183c8:	4681      	mov	r9, r0
   183ca:	1c53      	adds	r3, r2, #1
   183cc:	4421      	add	r1, r4
   183ce:	2b07      	cmp	r3, #7
   183d0:	9111      	str	r1, [sp, #68]	; 0x44
   183d2:	9310      	str	r3, [sp, #64]	; 0x40
   183d4:	f8c9 5000 	str.w	r5, [r9]
   183d8:	f8c9 4004 	str.w	r4, [r9, #4]
   183dc:	f300 82f2 	bgt.w	189c4 <_svfiprintf_r+0x8d4>
   183e0:	f109 0908 	add.w	r9, r9, #8
   183e4:	e164      	b.n	186b0 <_svfiprintf_r+0x5c0>
   183e6:	9406      	str	r4, [sp, #24]
   183e8:	2800      	cmp	r0, #0
   183ea:	f040 83a5 	bne.w	18b38 <_svfiprintf_r+0xa48>
   183ee:	4971      	ldr	r1, [pc, #452]	; (185b4 <_svfiprintf_r+0x4c4>)
   183f0:	910b      	str	r1, [sp, #44]	; 0x2c
   183f2:	069d      	lsls	r5, r3, #26
   183f4:	f57f af6a 	bpl.w	182cc <_svfiprintf_r+0x1dc>
   183f8:	9c07      	ldr	r4, [sp, #28]
   183fa:	3407      	adds	r4, #7
   183fc:	f024 0107 	bic.w	r1, r4, #7
   18400:	f101 0008 	add.w	r0, r1, #8
   18404:	e9d1 4500 	ldrd	r4, r5, [r1]
   18408:	07d9      	lsls	r1, r3, #31
   1840a:	9007      	str	r0, [sp, #28]
   1840c:	f53f af6c 	bmi.w	182e8 <_svfiprintf_r+0x1f8>
   18410:	2202      	movs	r2, #2
   18412:	e10a      	b.n	1862a <_svfiprintf_r+0x53a>
   18414:	f043 0310 	orr.w	r3, r3, #16
   18418:	9406      	str	r4, [sp, #24]
   1841a:	069c      	lsls	r4, r3, #26
   1841c:	f57f af2a 	bpl.w	18274 <_svfiprintf_r+0x184>
   18420:	9c07      	ldr	r4, [sp, #28]
   18422:	3407      	adds	r4, #7
   18424:	f024 0207 	bic.w	r2, r4, #7
   18428:	f102 0108 	add.w	r1, r2, #8
   1842c:	e9d2 4500 	ldrd	r4, r5, [r2]
   18430:	9107      	str	r1, [sp, #28]
   18432:	2201      	movs	r2, #1
   18434:	e0f9      	b.n	1862a <_svfiprintf_r+0x53a>
   18436:	f043 0310 	orr.w	r3, r3, #16
   1843a:	f013 0220 	ands.w	r2, r3, #32
   1843e:	9406      	str	r4, [sp, #24]
   18440:	f43f af2b 	beq.w	1829a <_svfiprintf_r+0x1aa>
   18444:	9c07      	ldr	r4, [sp, #28]
   18446:	3407      	adds	r4, #7
   18448:	f024 0207 	bic.w	r2, r4, #7
   1844c:	f102 0108 	add.w	r1, r2, #8
   18450:	e9d2 4500 	ldrd	r4, r5, [r2]
   18454:	9107      	str	r1, [sp, #28]
   18456:	2200      	movs	r2, #0
   18458:	e0e7      	b.n	1862a <_svfiprintf_r+0x53a>
   1845a:	9406      	str	r4, [sp, #24]
   1845c:	2800      	cmp	r0, #0
   1845e:	f040 8365 	bne.w	18b2c <_svfiprintf_r+0xa3c>
   18462:	f043 0310 	orr.w	r3, r3, #16
   18466:	069c      	lsls	r4, r3, #26
   18468:	f100 82fa 	bmi.w	18a60 <_svfiprintf_r+0x970>
   1846c:	06d8      	lsls	r0, r3, #27
   1846e:	d402      	bmi.n	18476 <_svfiprintf_r+0x386>
   18470:	0659      	lsls	r1, r3, #25
   18472:	f100 82c4 	bmi.w	189fe <_svfiprintf_r+0x90e>
   18476:	9907      	ldr	r1, [sp, #28]
   18478:	680c      	ldr	r4, [r1, #0]
   1847a:	460a      	mov	r2, r1
   1847c:	17e5      	asrs	r5, r4, #31
   1847e:	3204      	adds	r2, #4
   18480:	9207      	str	r2, [sp, #28]
   18482:	4620      	mov	r0, r4
   18484:	4629      	mov	r1, r5
   18486:	2800      	cmp	r0, #0
   18488:	f171 0200 	sbcs.w	r2, r1, #0
   1848c:	f2c0 82c5 	blt.w	18a1a <_svfiprintf_r+0x92a>
   18490:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   18494:	9203      	str	r2, [sp, #12]
   18496:	f1b8 3fff 	cmp.w	r8, #4294967295
   1849a:	f04f 0201 	mov.w	r2, #1
   1849e:	f040 80ce 	bne.w	1863e <_svfiprintf_r+0x54e>
   184a2:	ea54 0105 	orrs.w	r1, r4, r5
   184a6:	f000 820d 	beq.w	188c4 <_svfiprintf_r+0x7d4>
   184aa:	9301      	str	r3, [sp, #4]
   184ac:	2a01      	cmp	r2, #1
   184ae:	f000 826b 	beq.w	18988 <_svfiprintf_r+0x898>
   184b2:	2a02      	cmp	r2, #2
   184b4:	f040 822d 	bne.w	18912 <_svfiprintf_r+0x822>
   184b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   184ba:	4656      	mov	r6, sl
   184bc:	0923      	lsrs	r3, r4, #4
   184be:	f004 010f 	and.w	r1, r4, #15
   184c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   184c6:	092a      	lsrs	r2, r5, #4
   184c8:	461c      	mov	r4, r3
   184ca:	4615      	mov	r5, r2
   184cc:	5c43      	ldrb	r3, [r0, r1]
   184ce:	f806 3d01 	strb.w	r3, [r6, #-1]!
   184d2:	ea54 0305 	orrs.w	r3, r4, r5
   184d6:	d1f1      	bne.n	184bc <_svfiprintf_r+0x3cc>
   184d8:	ebaa 0306 	sub.w	r3, sl, r6
   184dc:	9304      	str	r3, [sp, #16]
   184de:	9b04      	ldr	r3, [sp, #16]
   184e0:	9a03      	ldr	r2, [sp, #12]
   184e2:	4543      	cmp	r3, r8
   184e4:	bfb8      	it	lt
   184e6:	4643      	movlt	r3, r8
   184e8:	9300      	str	r3, [sp, #0]
   184ea:	2a00      	cmp	r2, #0
   184ec:	f43f af2e 	beq.w	1834c <_svfiprintf_r+0x25c>
   184f0:	3301      	adds	r3, #1
   184f2:	9300      	str	r3, [sp, #0]
   184f4:	e72a      	b.n	1834c <_svfiprintf_r+0x25c>
   184f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   184fa:	2400      	movs	r4, #0
   184fc:	f81b 2b01 	ldrb.w	r2, [fp], #1
   18500:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   18504:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   18508:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1850c:	2909      	cmp	r1, #9
   1850e:	d9f5      	bls.n	184fc <_svfiprintf_r+0x40c>
   18510:	e63d      	b.n	1818e <_svfiprintf_r+0x9e>
   18512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18516:	f89b 2000 	ldrb.w	r2, [fp]
   1851a:	e636      	b.n	1818a <_svfiprintf_r+0x9a>
   1851c:	f89b 2000 	ldrb.w	r2, [fp]
   18520:	2a2a      	cmp	r2, #42	; 0x2a
   18522:	f10b 0601 	add.w	r6, fp, #1
   18526:	f000 82e7 	beq.w	18af8 <_svfiprintf_r+0xa08>
   1852a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1852e:	2909      	cmp	r1, #9
   18530:	46b3      	mov	fp, r6
   18532:	f04f 0800 	mov.w	r8, #0
   18536:	f63f ae2a 	bhi.w	1818e <_svfiprintf_r+0x9e>
   1853a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1853e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   18542:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   18546:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1854a:	2909      	cmp	r1, #9
   1854c:	d9f5      	bls.n	1853a <_svfiprintf_r+0x44a>
   1854e:	e61e      	b.n	1818e <_svfiprintf_r+0x9e>
   18550:	2800      	cmp	r0, #0
   18552:	f040 82dd 	bne.w	18b10 <_svfiprintf_r+0xa20>
   18556:	069a      	lsls	r2, r3, #26
   18558:	f100 8276 	bmi.w	18a48 <_svfiprintf_r+0x958>
   1855c:	06de      	lsls	r6, r3, #27
   1855e:	f100 8297 	bmi.w	18a90 <_svfiprintf_r+0x9a0>
   18562:	065d      	lsls	r5, r3, #25
   18564:	f140 8294 	bpl.w	18a90 <_svfiprintf_r+0x9a0>
   18568:	9a07      	ldr	r2, [sp, #28]
   1856a:	6813      	ldr	r3, [r2, #0]
   1856c:	3204      	adds	r2, #4
   1856e:	9207      	str	r2, [sp, #28]
   18570:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   18574:	801a      	strh	r2, [r3, #0]
   18576:	e5d5      	b.n	18124 <_svfiprintf_r+0x34>
   18578:	f89b 2000 	ldrb.w	r2, [fp]
   1857c:	2a6c      	cmp	r2, #108	; 0x6c
   1857e:	bf03      	ittte	eq
   18580:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   18584:	f043 0320 	orreq.w	r3, r3, #32
   18588:	f10b 0b01 	addeq.w	fp, fp, #1
   1858c:	f043 0310 	orrne.w	r3, r3, #16
   18590:	e5fb      	b.n	1818a <_svfiprintf_r+0x9a>
   18592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18596:	f89b 2000 	ldrb.w	r2, [fp]
   1859a:	e5f6      	b.n	1818a <_svfiprintf_r+0x9a>
   1859c:	9406      	str	r4, [sp, #24]
   1859e:	2800      	cmp	r0, #0
   185a0:	f43f af61 	beq.w	18466 <_svfiprintf_r+0x376>
   185a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   185a8:	e75d      	b.n	18466 <_svfiprintf_r+0x376>
   185aa:	bf00      	nop
   185ac:	0001c170 	.word	0x0001c170
   185b0:	0001c18c 	.word	0x0001c18c
   185b4:	0001c15c 	.word	0x0001c15c
   185b8:	9907      	ldr	r1, [sp, #28]
   185ba:	9406      	str	r4, [sp, #24]
   185bc:	680e      	ldr	r6, [r1, #0]
   185be:	f04f 0200 	mov.w	r2, #0
   185c2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   185c6:	1d0c      	adds	r4, r1, #4
   185c8:	2e00      	cmp	r6, #0
   185ca:	f000 8283 	beq.w	18ad4 <_svfiprintf_r+0x9e4>
   185ce:	f1b8 3fff 	cmp.w	r8, #4294967295
   185d2:	f000 8265 	beq.w	18aa0 <_svfiprintf_r+0x9b0>
   185d6:	4642      	mov	r2, r8
   185d8:	2100      	movs	r1, #0
   185da:	4630      	mov	r0, r6
   185dc:	9300      	str	r3, [sp, #0]
   185de:	f7ff f94f 	bl	17880 <memchr>
   185e2:	9b00      	ldr	r3, [sp, #0]
   185e4:	2800      	cmp	r0, #0
   185e6:	f000 827e 	beq.w	18ae6 <_svfiprintf_r+0x9f6>
   185ea:	1b82      	subs	r2, r0, r6
   185ec:	9301      	str	r3, [sp, #4]
   185ee:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   185f2:	9204      	str	r2, [sp, #16]
   185f4:	9407      	str	r4, [sp, #28]
   185f6:	9303      	str	r3, [sp, #12]
   185f8:	f04f 0800 	mov.w	r8, #0
   185fc:	e76f      	b.n	184de <_svfiprintf_r+0x3ee>
   185fe:	f043 0320 	orr.w	r3, r3, #32
   18602:	f89b 2000 	ldrb.w	r2, [fp]
   18606:	e5c0      	b.n	1818a <_svfiprintf_r+0x9a>
   18608:	9807      	ldr	r0, [sp, #28]
   1860a:	4ab3      	ldr	r2, [pc, #716]	; (188d8 <_svfiprintf_r+0x7e8>)
   1860c:	9406      	str	r4, [sp, #24]
   1860e:	920b      	str	r2, [sp, #44]	; 0x2c
   18610:	6804      	ldr	r4, [r0, #0]
   18612:	2278      	movs	r2, #120	; 0x78
   18614:	2130      	movs	r1, #48	; 0x30
   18616:	3004      	adds	r0, #4
   18618:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1861c:	f043 0302 	orr.w	r3, r3, #2
   18620:	9007      	str	r0, [sp, #28]
   18622:	2500      	movs	r5, #0
   18624:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   18628:	2202      	movs	r2, #2
   1862a:	f04f 0100 	mov.w	r1, #0
   1862e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   18632:	2100      	movs	r1, #0
   18634:	9103      	str	r1, [sp, #12]
   18636:	f1b8 3fff 	cmp.w	r8, #4294967295
   1863a:	f43f af32 	beq.w	184a2 <_svfiprintf_r+0x3b2>
   1863e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   18642:	9101      	str	r1, [sp, #4]
   18644:	ea54 0105 	orrs.w	r1, r4, r5
   18648:	f47f af30 	bne.w	184ac <_svfiprintf_r+0x3bc>
   1864c:	f1b8 0f00 	cmp.w	r8, #0
   18650:	f040 8137 	bne.w	188c2 <_svfiprintf_r+0x7d2>
   18654:	2a00      	cmp	r2, #0
   18656:	f040 81b1 	bne.w	189bc <_svfiprintf_r+0x8cc>
   1865a:	f013 0301 	ands.w	r3, r3, #1
   1865e:	9304      	str	r3, [sp, #16]
   18660:	f000 81cb 	beq.w	189fa <_svfiprintf_r+0x90a>
   18664:	ae2c      	add	r6, sp, #176	; 0xb0
   18666:	2330      	movs	r3, #48	; 0x30
   18668:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1866c:	e737      	b.n	184de <_svfiprintf_r+0x3ee>
   1866e:	9406      	str	r4, [sp, #24]
   18670:	2800      	cmp	r0, #0
   18672:	f040 825e 	bne.w	18b32 <_svfiprintf_r+0xa42>
   18676:	2a00      	cmp	r2, #0
   18678:	f000 80c5 	beq.w	18806 <_svfiprintf_r+0x716>
   1867c:	2101      	movs	r1, #1
   1867e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   18682:	f04f 0200 	mov.w	r2, #0
   18686:	9100      	str	r1, [sp, #0]
   18688:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1868c:	9104      	str	r1, [sp, #16]
   1868e:	ae12      	add	r6, sp, #72	; 0x48
   18690:	e659      	b.n	18346 <_svfiprintf_r+0x256>
   18692:	3104      	adds	r1, #4
   18694:	6814      	ldr	r4, [r2, #0]
   18696:	9107      	str	r1, [sp, #28]
   18698:	2201      	movs	r2, #1
   1869a:	2500      	movs	r5, #0
   1869c:	e7c5      	b.n	1862a <_svfiprintf_r+0x53a>
   1869e:	9807      	ldr	r0, [sp, #28]
   186a0:	4601      	mov	r1, r0
   186a2:	3104      	adds	r1, #4
   186a4:	6804      	ldr	r4, [r0, #0]
   186a6:	9107      	str	r1, [sp, #28]
   186a8:	2500      	movs	r5, #0
   186aa:	e7be      	b.n	1862a <_svfiprintf_r+0x53a>
   186ac:	9911      	ldr	r1, [sp, #68]	; 0x44
   186ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   186b0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   186b4:	b16a      	cbz	r2, 186d2 <_svfiprintf_r+0x5e2>
   186b6:	3301      	adds	r3, #1
   186b8:	3101      	adds	r1, #1
   186ba:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   186be:	2201      	movs	r2, #1
   186c0:	2b07      	cmp	r3, #7
   186c2:	9111      	str	r1, [sp, #68]	; 0x44
   186c4:	9310      	str	r3, [sp, #64]	; 0x40
   186c6:	e889 0005 	stmia.w	r9, {r0, r2}
   186ca:	f300 8145 	bgt.w	18958 <_svfiprintf_r+0x868>
   186ce:	f109 0908 	add.w	r9, r9, #8
   186d2:	9a08      	ldr	r2, [sp, #32]
   186d4:	b162      	cbz	r2, 186f0 <_svfiprintf_r+0x600>
   186d6:	3301      	adds	r3, #1
   186d8:	3102      	adds	r1, #2
   186da:	a80e      	add	r0, sp, #56	; 0x38
   186dc:	2202      	movs	r2, #2
   186de:	2b07      	cmp	r3, #7
   186e0:	9111      	str	r1, [sp, #68]	; 0x44
   186e2:	9310      	str	r3, [sp, #64]	; 0x40
   186e4:	e889 0005 	stmia.w	r9, {r0, r2}
   186e8:	f300 8142 	bgt.w	18970 <_svfiprintf_r+0x880>
   186ec:	f109 0908 	add.w	r9, r9, #8
   186f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   186f2:	2a80      	cmp	r2, #128	; 0x80
   186f4:	f000 809b 	beq.w	1882e <_svfiprintf_r+0x73e>
   186f8:	9a04      	ldr	r2, [sp, #16]
   186fa:	eba8 0502 	sub.w	r5, r8, r2
   186fe:	2d00      	cmp	r5, #0
   18700:	dd31      	ble.n	18766 <_svfiprintf_r+0x676>
   18702:	2d10      	cmp	r5, #16
   18704:	4c75      	ldr	r4, [pc, #468]	; (188dc <_svfiprintf_r+0x7ec>)
   18706:	dd23      	ble.n	18750 <_svfiprintf_r+0x660>
   18708:	464a      	mov	r2, r9
   1870a:	f04f 0810 	mov.w	r8, #16
   1870e:	46b1      	mov	r9, r6
   18710:	4626      	mov	r6, r4
   18712:	9c05      	ldr	r4, [sp, #20]
   18714:	e004      	b.n	18720 <_svfiprintf_r+0x630>
   18716:	3d10      	subs	r5, #16
   18718:	2d10      	cmp	r5, #16
   1871a:	f102 0208 	add.w	r2, r2, #8
   1871e:	dd14      	ble.n	1874a <_svfiprintf_r+0x65a>
   18720:	3301      	adds	r3, #1
   18722:	3110      	adds	r1, #16
   18724:	2b07      	cmp	r3, #7
   18726:	9111      	str	r1, [sp, #68]	; 0x44
   18728:	9310      	str	r3, [sp, #64]	; 0x40
   1872a:	e882 0140 	stmia.w	r2, {r6, r8}
   1872e:	ddf2      	ble.n	18716 <_svfiprintf_r+0x626>
   18730:	aa0f      	add	r2, sp, #60	; 0x3c
   18732:	4621      	mov	r1, r4
   18734:	4638      	mov	r0, r7
   18736:	f7ff fc5d 	bl	17ff4 <__ssprint_r>
   1873a:	2800      	cmp	r0, #0
   1873c:	d16a      	bne.n	18814 <_svfiprintf_r+0x724>
   1873e:	3d10      	subs	r5, #16
   18740:	2d10      	cmp	r5, #16
   18742:	9911      	ldr	r1, [sp, #68]	; 0x44
   18744:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18746:	4652      	mov	r2, sl
   18748:	dcea      	bgt.n	18720 <_svfiprintf_r+0x630>
   1874a:	4634      	mov	r4, r6
   1874c:	464e      	mov	r6, r9
   1874e:	4691      	mov	r9, r2
   18750:	3301      	adds	r3, #1
   18752:	4429      	add	r1, r5
   18754:	2b07      	cmp	r3, #7
   18756:	9111      	str	r1, [sp, #68]	; 0x44
   18758:	9310      	str	r3, [sp, #64]	; 0x40
   1875a:	e889 0030 	stmia.w	r9, {r4, r5}
   1875e:	f300 80ca 	bgt.w	188f6 <_svfiprintf_r+0x806>
   18762:	f109 0908 	add.w	r9, r9, #8
   18766:	9804      	ldr	r0, [sp, #16]
   18768:	f8c9 6000 	str.w	r6, [r9]
   1876c:	3301      	adds	r3, #1
   1876e:	4401      	add	r1, r0
   18770:	2b07      	cmp	r3, #7
   18772:	9111      	str	r1, [sp, #68]	; 0x44
   18774:	9310      	str	r3, [sp, #64]	; 0x40
   18776:	f8c9 0004 	str.w	r0, [r9, #4]
   1877a:	f300 8090 	bgt.w	1889e <_svfiprintf_r+0x7ae>
   1877e:	f109 0908 	add.w	r9, r9, #8
   18782:	9b01      	ldr	r3, [sp, #4]
   18784:	075b      	lsls	r3, r3, #29
   18786:	d530      	bpl.n	187ea <_svfiprintf_r+0x6fa>
   18788:	9b06      	ldr	r3, [sp, #24]
   1878a:	9a00      	ldr	r2, [sp, #0]
   1878c:	1a9c      	subs	r4, r3, r2
   1878e:	2c00      	cmp	r4, #0
   18790:	dd2b      	ble.n	187ea <_svfiprintf_r+0x6fa>
   18792:	2c10      	cmp	r4, #16
   18794:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18796:	4d52      	ldr	r5, [pc, #328]	; (188e0 <_svfiprintf_r+0x7f0>)
   18798:	dd1c      	ble.n	187d4 <_svfiprintf_r+0x6e4>
   1879a:	2610      	movs	r6, #16
   1879c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   187a0:	e004      	b.n	187ac <_svfiprintf_r+0x6bc>
   187a2:	3c10      	subs	r4, #16
   187a4:	2c10      	cmp	r4, #16
   187a6:	f109 0908 	add.w	r9, r9, #8
   187aa:	dd13      	ble.n	187d4 <_svfiprintf_r+0x6e4>
   187ac:	3301      	adds	r3, #1
   187ae:	3110      	adds	r1, #16
   187b0:	2b07      	cmp	r3, #7
   187b2:	9111      	str	r1, [sp, #68]	; 0x44
   187b4:	9310      	str	r3, [sp, #64]	; 0x40
   187b6:	e889 0060 	stmia.w	r9, {r5, r6}
   187ba:	ddf2      	ble.n	187a2 <_svfiprintf_r+0x6b2>
   187bc:	aa0f      	add	r2, sp, #60	; 0x3c
   187be:	4641      	mov	r1, r8
   187c0:	4638      	mov	r0, r7
   187c2:	f7ff fc17 	bl	17ff4 <__ssprint_r>
   187c6:	bb28      	cbnz	r0, 18814 <_svfiprintf_r+0x724>
   187c8:	3c10      	subs	r4, #16
   187ca:	2c10      	cmp	r4, #16
   187cc:	9911      	ldr	r1, [sp, #68]	; 0x44
   187ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   187d0:	46d1      	mov	r9, sl
   187d2:	dceb      	bgt.n	187ac <_svfiprintf_r+0x6bc>
   187d4:	3301      	adds	r3, #1
   187d6:	4421      	add	r1, r4
   187d8:	2b07      	cmp	r3, #7
   187da:	9111      	str	r1, [sp, #68]	; 0x44
   187dc:	9310      	str	r3, [sp, #64]	; 0x40
   187de:	f8c9 5000 	str.w	r5, [r9]
   187e2:	f8c9 4004 	str.w	r4, [r9, #4]
   187e6:	f300 80f9 	bgt.w	189dc <_svfiprintf_r+0x8ec>
   187ea:	9b02      	ldr	r3, [sp, #8]
   187ec:	9a06      	ldr	r2, [sp, #24]
   187ee:	9800      	ldr	r0, [sp, #0]
   187f0:	4282      	cmp	r2, r0
   187f2:	bfac      	ite	ge
   187f4:	189b      	addge	r3, r3, r2
   187f6:	181b      	addlt	r3, r3, r0
   187f8:	9302      	str	r3, [sp, #8]
   187fa:	2900      	cmp	r1, #0
   187fc:	d159      	bne.n	188b2 <_svfiprintf_r+0x7c2>
   187fe:	2300      	movs	r3, #0
   18800:	9310      	str	r3, [sp, #64]	; 0x40
   18802:	46d1      	mov	r9, sl
   18804:	e48e      	b.n	18124 <_svfiprintf_r+0x34>
   18806:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18808:	b123      	cbz	r3, 18814 <_svfiprintf_r+0x724>
   1880a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1880c:	9905      	ldr	r1, [sp, #20]
   1880e:	aa0f      	add	r2, sp, #60	; 0x3c
   18810:	f7ff fbf0 	bl	17ff4 <__ssprint_r>
   18814:	9b05      	ldr	r3, [sp, #20]
   18816:	899b      	ldrh	r3, [r3, #12]
   18818:	f013 0f40 	tst.w	r3, #64	; 0x40
   1881c:	9b02      	ldr	r3, [sp, #8]
   1881e:	bf18      	it	ne
   18820:	f04f 33ff 	movne.w	r3, #4294967295
   18824:	9302      	str	r3, [sp, #8]
   18826:	9802      	ldr	r0, [sp, #8]
   18828:	b02d      	add	sp, #180	; 0xb4
   1882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1882e:	9a06      	ldr	r2, [sp, #24]
   18830:	9800      	ldr	r0, [sp, #0]
   18832:	1a15      	subs	r5, r2, r0
   18834:	2d00      	cmp	r5, #0
   18836:	f77f af5f 	ble.w	186f8 <_svfiprintf_r+0x608>
   1883a:	2d10      	cmp	r5, #16
   1883c:	4c27      	ldr	r4, [pc, #156]	; (188dc <_svfiprintf_r+0x7ec>)
   1883e:	dd22      	ble.n	18886 <_svfiprintf_r+0x796>
   18840:	464a      	mov	r2, r9
   18842:	46b1      	mov	r9, r6
   18844:	4626      	mov	r6, r4
   18846:	9c05      	ldr	r4, [sp, #20]
   18848:	e004      	b.n	18854 <_svfiprintf_r+0x764>
   1884a:	3d10      	subs	r5, #16
   1884c:	2d10      	cmp	r5, #16
   1884e:	f102 0208 	add.w	r2, r2, #8
   18852:	dd15      	ble.n	18880 <_svfiprintf_r+0x790>
   18854:	3301      	adds	r3, #1
   18856:	3110      	adds	r1, #16
   18858:	2010      	movs	r0, #16
   1885a:	2b07      	cmp	r3, #7
   1885c:	9111      	str	r1, [sp, #68]	; 0x44
   1885e:	9310      	str	r3, [sp, #64]	; 0x40
   18860:	6016      	str	r6, [r2, #0]
   18862:	6050      	str	r0, [r2, #4]
   18864:	ddf1      	ble.n	1884a <_svfiprintf_r+0x75a>
   18866:	aa0f      	add	r2, sp, #60	; 0x3c
   18868:	4621      	mov	r1, r4
   1886a:	4638      	mov	r0, r7
   1886c:	f7ff fbc2 	bl	17ff4 <__ssprint_r>
   18870:	2800      	cmp	r0, #0
   18872:	d1cf      	bne.n	18814 <_svfiprintf_r+0x724>
   18874:	3d10      	subs	r5, #16
   18876:	2d10      	cmp	r5, #16
   18878:	9911      	ldr	r1, [sp, #68]	; 0x44
   1887a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1887c:	4652      	mov	r2, sl
   1887e:	dce9      	bgt.n	18854 <_svfiprintf_r+0x764>
   18880:	4634      	mov	r4, r6
   18882:	464e      	mov	r6, r9
   18884:	4691      	mov	r9, r2
   18886:	3301      	adds	r3, #1
   18888:	4429      	add	r1, r5
   1888a:	2b07      	cmp	r3, #7
   1888c:	9111      	str	r1, [sp, #68]	; 0x44
   1888e:	9310      	str	r3, [sp, #64]	; 0x40
   18890:	e889 0030 	stmia.w	r9, {r4, r5}
   18894:	f300 80f0 	bgt.w	18a78 <_svfiprintf_r+0x988>
   18898:	f109 0908 	add.w	r9, r9, #8
   1889c:	e72c      	b.n	186f8 <_svfiprintf_r+0x608>
   1889e:	aa0f      	add	r2, sp, #60	; 0x3c
   188a0:	9905      	ldr	r1, [sp, #20]
   188a2:	4638      	mov	r0, r7
   188a4:	f7ff fba6 	bl	17ff4 <__ssprint_r>
   188a8:	2800      	cmp	r0, #0
   188aa:	d1b3      	bne.n	18814 <_svfiprintf_r+0x724>
   188ac:	9911      	ldr	r1, [sp, #68]	; 0x44
   188ae:	46d1      	mov	r9, sl
   188b0:	e767      	b.n	18782 <_svfiprintf_r+0x692>
   188b2:	aa0f      	add	r2, sp, #60	; 0x3c
   188b4:	9905      	ldr	r1, [sp, #20]
   188b6:	4638      	mov	r0, r7
   188b8:	f7ff fb9c 	bl	17ff4 <__ssprint_r>
   188bc:	2800      	cmp	r0, #0
   188be:	d09e      	beq.n	187fe <_svfiprintf_r+0x70e>
   188c0:	e7a8      	b.n	18814 <_svfiprintf_r+0x724>
   188c2:	9b01      	ldr	r3, [sp, #4]
   188c4:	2a01      	cmp	r2, #1
   188c6:	f000 80b7 	beq.w	18a38 <_svfiprintf_r+0x948>
   188ca:	2a02      	cmp	r2, #2
   188cc:	d11e      	bne.n	1890c <_svfiprintf_r+0x81c>
   188ce:	9301      	str	r3, [sp, #4]
   188d0:	2400      	movs	r4, #0
   188d2:	2500      	movs	r5, #0
   188d4:	e5f0      	b.n	184b8 <_svfiprintf_r+0x3c8>
   188d6:	bf00      	nop
   188d8:	0001c170 	.word	0x0001c170
   188dc:	0001c19c 	.word	0x0001c19c
   188e0:	0001c18c 	.word	0x0001c18c
   188e4:	aa0f      	add	r2, sp, #60	; 0x3c
   188e6:	9905      	ldr	r1, [sp, #20]
   188e8:	4638      	mov	r0, r7
   188ea:	f7ff fb83 	bl	17ff4 <__ssprint_r>
   188ee:	2800      	cmp	r0, #0
   188f0:	d190      	bne.n	18814 <_svfiprintf_r+0x724>
   188f2:	46d1      	mov	r9, sl
   188f4:	e435      	b.n	18162 <_svfiprintf_r+0x72>
   188f6:	aa0f      	add	r2, sp, #60	; 0x3c
   188f8:	9905      	ldr	r1, [sp, #20]
   188fa:	4638      	mov	r0, r7
   188fc:	f7ff fb7a 	bl	17ff4 <__ssprint_r>
   18900:	2800      	cmp	r0, #0
   18902:	d187      	bne.n	18814 <_svfiprintf_r+0x724>
   18904:	9911      	ldr	r1, [sp, #68]	; 0x44
   18906:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18908:	46d1      	mov	r9, sl
   1890a:	e72c      	b.n	18766 <_svfiprintf_r+0x676>
   1890c:	9301      	str	r3, [sp, #4]
   1890e:	2400      	movs	r4, #0
   18910:	2500      	movs	r5, #0
   18912:	4651      	mov	r1, sl
   18914:	e000      	b.n	18918 <_svfiprintf_r+0x828>
   18916:	4631      	mov	r1, r6
   18918:	08e2      	lsrs	r2, r4, #3
   1891a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1891e:	08e8      	lsrs	r0, r5, #3
   18920:	f004 0307 	and.w	r3, r4, #7
   18924:	4605      	mov	r5, r0
   18926:	4614      	mov	r4, r2
   18928:	3330      	adds	r3, #48	; 0x30
   1892a:	ea54 0205 	orrs.w	r2, r4, r5
   1892e:	f801 3c01 	strb.w	r3, [r1, #-1]
   18932:	f101 36ff 	add.w	r6, r1, #4294967295
   18936:	d1ee      	bne.n	18916 <_svfiprintf_r+0x826>
   18938:	9a01      	ldr	r2, [sp, #4]
   1893a:	07d2      	lsls	r2, r2, #31
   1893c:	f57f adcc 	bpl.w	184d8 <_svfiprintf_r+0x3e8>
   18940:	2b30      	cmp	r3, #48	; 0x30
   18942:	f43f adc9 	beq.w	184d8 <_svfiprintf_r+0x3e8>
   18946:	3902      	subs	r1, #2
   18948:	2330      	movs	r3, #48	; 0x30
   1894a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1894e:	ebaa 0301 	sub.w	r3, sl, r1
   18952:	9304      	str	r3, [sp, #16]
   18954:	460e      	mov	r6, r1
   18956:	e5c2      	b.n	184de <_svfiprintf_r+0x3ee>
   18958:	aa0f      	add	r2, sp, #60	; 0x3c
   1895a:	9905      	ldr	r1, [sp, #20]
   1895c:	4638      	mov	r0, r7
   1895e:	f7ff fb49 	bl	17ff4 <__ssprint_r>
   18962:	2800      	cmp	r0, #0
   18964:	f47f af56 	bne.w	18814 <_svfiprintf_r+0x724>
   18968:	9911      	ldr	r1, [sp, #68]	; 0x44
   1896a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1896c:	46d1      	mov	r9, sl
   1896e:	e6b0      	b.n	186d2 <_svfiprintf_r+0x5e2>
   18970:	aa0f      	add	r2, sp, #60	; 0x3c
   18972:	9905      	ldr	r1, [sp, #20]
   18974:	4638      	mov	r0, r7
   18976:	f7ff fb3d 	bl	17ff4 <__ssprint_r>
   1897a:	2800      	cmp	r0, #0
   1897c:	f47f af4a 	bne.w	18814 <_svfiprintf_r+0x724>
   18980:	9911      	ldr	r1, [sp, #68]	; 0x44
   18982:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18984:	46d1      	mov	r9, sl
   18986:	e6b3      	b.n	186f0 <_svfiprintf_r+0x600>
   18988:	2d00      	cmp	r5, #0
   1898a:	bf08      	it	eq
   1898c:	2c0a      	cmpeq	r4, #10
   1898e:	d352      	bcc.n	18a36 <_svfiprintf_r+0x946>
   18990:	4656      	mov	r6, sl
   18992:	4620      	mov	r0, r4
   18994:	4629      	mov	r1, r5
   18996:	220a      	movs	r2, #10
   18998:	2300      	movs	r3, #0
   1899a:	f7fd fbcf 	bl	1613c <__aeabi_uldivmod>
   1899e:	3230      	adds	r2, #48	; 0x30
   189a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   189a4:	4620      	mov	r0, r4
   189a6:	4629      	mov	r1, r5
   189a8:	2300      	movs	r3, #0
   189aa:	220a      	movs	r2, #10
   189ac:	f7fd fbc6 	bl	1613c <__aeabi_uldivmod>
   189b0:	4604      	mov	r4, r0
   189b2:	460d      	mov	r5, r1
   189b4:	ea54 0305 	orrs.w	r3, r4, r5
   189b8:	d1eb      	bne.n	18992 <_svfiprintf_r+0x8a2>
   189ba:	e58d      	b.n	184d8 <_svfiprintf_r+0x3e8>
   189bc:	f8cd 8010 	str.w	r8, [sp, #16]
   189c0:	4656      	mov	r6, sl
   189c2:	e58c      	b.n	184de <_svfiprintf_r+0x3ee>
   189c4:	aa0f      	add	r2, sp, #60	; 0x3c
   189c6:	9905      	ldr	r1, [sp, #20]
   189c8:	4638      	mov	r0, r7
   189ca:	f7ff fb13 	bl	17ff4 <__ssprint_r>
   189ce:	2800      	cmp	r0, #0
   189d0:	f47f af20 	bne.w	18814 <_svfiprintf_r+0x724>
   189d4:	9911      	ldr	r1, [sp, #68]	; 0x44
   189d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   189d8:	46d1      	mov	r9, sl
   189da:	e669      	b.n	186b0 <_svfiprintf_r+0x5c0>
   189dc:	aa0f      	add	r2, sp, #60	; 0x3c
   189de:	9905      	ldr	r1, [sp, #20]
   189e0:	4638      	mov	r0, r7
   189e2:	f7ff fb07 	bl	17ff4 <__ssprint_r>
   189e6:	2800      	cmp	r0, #0
   189e8:	f47f af14 	bne.w	18814 <_svfiprintf_r+0x724>
   189ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   189ee:	e6fc      	b.n	187ea <_svfiprintf_r+0x6fa>
   189f0:	9207      	str	r2, [sp, #28]
   189f2:	f89b 2000 	ldrb.w	r2, [fp]
   189f6:	f7ff bbc8 	b.w	1818a <_svfiprintf_r+0x9a>
   189fa:	4656      	mov	r6, sl
   189fc:	e56f      	b.n	184de <_svfiprintf_r+0x3ee>
   189fe:	9e07      	ldr	r6, [sp, #28]
   18a00:	f9b6 4000 	ldrsh.w	r4, [r6]
   18a04:	4632      	mov	r2, r6
   18a06:	17e5      	asrs	r5, r4, #31
   18a08:	4620      	mov	r0, r4
   18a0a:	3204      	adds	r2, #4
   18a0c:	4629      	mov	r1, r5
   18a0e:	2800      	cmp	r0, #0
   18a10:	9207      	str	r2, [sp, #28]
   18a12:	f171 0200 	sbcs.w	r2, r1, #0
   18a16:	f6bf ad3b 	bge.w	18490 <_svfiprintf_r+0x3a0>
   18a1a:	222d      	movs	r2, #45	; 0x2d
   18a1c:	4264      	negs	r4, r4
   18a1e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   18a22:	9203      	str	r2, [sp, #12]
   18a24:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   18a28:	2201      	movs	r2, #1
   18a2a:	e604      	b.n	18636 <_svfiprintf_r+0x546>
   18a2c:	880c      	ldrh	r4, [r1, #0]
   18a2e:	3104      	adds	r1, #4
   18a30:	2500      	movs	r5, #0
   18a32:	9107      	str	r1, [sp, #28]
   18a34:	e455      	b.n	182e2 <_svfiprintf_r+0x1f2>
   18a36:	9b01      	ldr	r3, [sp, #4]
   18a38:	9301      	str	r3, [sp, #4]
   18a3a:	ae2c      	add	r6, sp, #176	; 0xb0
   18a3c:	3430      	adds	r4, #48	; 0x30
   18a3e:	2301      	movs	r3, #1
   18a40:	f806 4d41 	strb.w	r4, [r6, #-65]!
   18a44:	9304      	str	r3, [sp, #16]
   18a46:	e54a      	b.n	184de <_svfiprintf_r+0x3ee>
   18a48:	9a07      	ldr	r2, [sp, #28]
   18a4a:	9902      	ldr	r1, [sp, #8]
   18a4c:	6813      	ldr	r3, [r2, #0]
   18a4e:	17cd      	asrs	r5, r1, #31
   18a50:	4608      	mov	r0, r1
   18a52:	3204      	adds	r2, #4
   18a54:	4629      	mov	r1, r5
   18a56:	9207      	str	r2, [sp, #28]
   18a58:	e9c3 0100 	strd	r0, r1, [r3]
   18a5c:	f7ff bb62 	b.w	18124 <_svfiprintf_r+0x34>
   18a60:	9c07      	ldr	r4, [sp, #28]
   18a62:	3407      	adds	r4, #7
   18a64:	f024 0407 	bic.w	r4, r4, #7
   18a68:	e9d4 0100 	ldrd	r0, r1, [r4]
   18a6c:	f104 0208 	add.w	r2, r4, #8
   18a70:	9207      	str	r2, [sp, #28]
   18a72:	4604      	mov	r4, r0
   18a74:	460d      	mov	r5, r1
   18a76:	e506      	b.n	18486 <_svfiprintf_r+0x396>
   18a78:	aa0f      	add	r2, sp, #60	; 0x3c
   18a7a:	9905      	ldr	r1, [sp, #20]
   18a7c:	4638      	mov	r0, r7
   18a7e:	f7ff fab9 	bl	17ff4 <__ssprint_r>
   18a82:	2800      	cmp	r0, #0
   18a84:	f47f aec6 	bne.w	18814 <_svfiprintf_r+0x724>
   18a88:	9911      	ldr	r1, [sp, #68]	; 0x44
   18a8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18a8c:	46d1      	mov	r9, sl
   18a8e:	e633      	b.n	186f8 <_svfiprintf_r+0x608>
   18a90:	9a07      	ldr	r2, [sp, #28]
   18a92:	6813      	ldr	r3, [r2, #0]
   18a94:	3204      	adds	r2, #4
   18a96:	9207      	str	r2, [sp, #28]
   18a98:	9a02      	ldr	r2, [sp, #8]
   18a9a:	601a      	str	r2, [r3, #0]
   18a9c:	f7ff bb42 	b.w	18124 <_svfiprintf_r+0x34>
   18aa0:	4630      	mov	r0, r6
   18aa2:	9301      	str	r3, [sp, #4]
   18aa4:	9407      	str	r4, [sp, #28]
   18aa6:	f7fd ff6b 	bl	16980 <strlen>
   18aaa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   18aae:	9004      	str	r0, [sp, #16]
   18ab0:	9303      	str	r3, [sp, #12]
   18ab2:	f04f 0800 	mov.w	r8, #0
   18ab6:	e512      	b.n	184de <_svfiprintf_r+0x3ee>
   18ab8:	2140      	movs	r1, #64	; 0x40
   18aba:	9200      	str	r2, [sp, #0]
   18abc:	f7fe fc2e 	bl	1731c <_malloc_r>
   18ac0:	9a05      	ldr	r2, [sp, #20]
   18ac2:	6010      	str	r0, [r2, #0]
   18ac4:	6110      	str	r0, [r2, #16]
   18ac6:	9a00      	ldr	r2, [sp, #0]
   18ac8:	b328      	cbz	r0, 18b16 <_svfiprintf_r+0xa26>
   18aca:	9905      	ldr	r1, [sp, #20]
   18acc:	2340      	movs	r3, #64	; 0x40
   18ace:	614b      	str	r3, [r1, #20]
   18ad0:	f7ff bb1c 	b.w	1810c <_svfiprintf_r+0x1c>
   18ad4:	4642      	mov	r2, r8
   18ad6:	2a06      	cmp	r2, #6
   18ad8:	bf28      	it	cs
   18ada:	2206      	movcs	r2, #6
   18adc:	9204      	str	r2, [sp, #16]
   18ade:	9407      	str	r4, [sp, #28]
   18ae0:	9200      	str	r2, [sp, #0]
   18ae2:	4e17      	ldr	r6, [pc, #92]	; (18b40 <_svfiprintf_r+0xa50>)
   18ae4:	e42f      	b.n	18346 <_svfiprintf_r+0x256>
   18ae6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   18aea:	f8cd 8010 	str.w	r8, [sp, #16]
   18aee:	9203      	str	r2, [sp, #12]
   18af0:	9407      	str	r4, [sp, #28]
   18af2:	9301      	str	r3, [sp, #4]
   18af4:	4680      	mov	r8, r0
   18af6:	e4f2      	b.n	184de <_svfiprintf_r+0x3ee>
   18af8:	9a07      	ldr	r2, [sp, #28]
   18afa:	6811      	ldr	r1, [r2, #0]
   18afc:	f89b 2001 	ldrb.w	r2, [fp, #1]
   18b00:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   18b04:	9907      	ldr	r1, [sp, #28]
   18b06:	3104      	adds	r1, #4
   18b08:	46b3      	mov	fp, r6
   18b0a:	9107      	str	r1, [sp, #28]
   18b0c:	f7ff bb3d 	b.w	1818a <_svfiprintf_r+0x9a>
   18b10:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18b14:	e51f      	b.n	18556 <_svfiprintf_r+0x466>
   18b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18b18:	230c      	movs	r3, #12
   18b1a:	6013      	str	r3, [r2, #0]
   18b1c:	f04f 33ff 	mov.w	r3, #4294967295
   18b20:	9302      	str	r3, [sp, #8]
   18b22:	e680      	b.n	18826 <_svfiprintf_r+0x736>
   18b24:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18b28:	f7ff bbcb 	b.w	182c2 <_svfiprintf_r+0x1d2>
   18b2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18b30:	e497      	b.n	18462 <_svfiprintf_r+0x372>
   18b32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18b36:	e59e      	b.n	18676 <_svfiprintf_r+0x586>
   18b38:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18b3c:	e457      	b.n	183ee <_svfiprintf_r+0x2fe>
   18b3e:	bf00      	nop
   18b40:	0001c184 	.word	0x0001c184

00018b44 <_sungetc_r>:
   18b44:	b538      	push	{r3, r4, r5, lr}
   18b46:	1c4b      	adds	r3, r1, #1
   18b48:	d01a      	beq.n	18b80 <_sungetc_r+0x3c>
   18b4a:	8993      	ldrh	r3, [r2, #12]
   18b4c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   18b4e:	f023 0320 	bic.w	r3, r3, #32
   18b52:	b2cd      	uxtb	r5, r1
   18b54:	8193      	strh	r3, [r2, #12]
   18b56:	b1b4      	cbz	r4, 18b86 <_sungetc_r+0x42>
   18b58:	4614      	mov	r4, r2
   18b5a:	6852      	ldr	r2, [r2, #4]
   18b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18b5e:	429a      	cmp	r2, r3
   18b60:	da09      	bge.n	18b76 <_sungetc_r+0x32>
   18b62:	6823      	ldr	r3, [r4, #0]
   18b64:	1e5a      	subs	r2, r3, #1
   18b66:	6022      	str	r2, [r4, #0]
   18b68:	f803 5c01 	strb.w	r5, [r3, #-1]
   18b6c:	6863      	ldr	r3, [r4, #4]
   18b6e:	3301      	adds	r3, #1
   18b70:	6063      	str	r3, [r4, #4]
   18b72:	4628      	mov	r0, r5
   18b74:	bd38      	pop	{r3, r4, r5, pc}
   18b76:	4621      	mov	r1, r4
   18b78:	f000 fd52 	bl	19620 <__submore>
   18b7c:	2800      	cmp	r0, #0
   18b7e:	d0f0      	beq.n	18b62 <_sungetc_r+0x1e>
   18b80:	f04f 35ff 	mov.w	r5, #4294967295
   18b84:	e7f5      	b.n	18b72 <_sungetc_r+0x2e>
   18b86:	6911      	ldr	r1, [r2, #16]
   18b88:	6813      	ldr	r3, [r2, #0]
   18b8a:	b129      	cbz	r1, 18b98 <_sungetc_r+0x54>
   18b8c:	4299      	cmp	r1, r3
   18b8e:	d203      	bcs.n	18b98 <_sungetc_r+0x54>
   18b90:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   18b94:	428d      	cmp	r5, r1
   18b96:	d00f      	beq.n	18bb8 <_sungetc_r+0x74>
   18b98:	6393      	str	r3, [r2, #56]	; 0x38
   18b9a:	4613      	mov	r3, r2
   18b9c:	6854      	ldr	r4, [r2, #4]
   18b9e:	63d4      	str	r4, [r2, #60]	; 0x3c
   18ba0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   18ba4:	2103      	movs	r1, #3
   18ba6:	6310      	str	r0, [r2, #48]	; 0x30
   18ba8:	6351      	str	r1, [r2, #52]	; 0x34
   18baa:	f803 5f42 	strb.w	r5, [r3, #66]!
   18bae:	2101      	movs	r1, #1
   18bb0:	6013      	str	r3, [r2, #0]
   18bb2:	6051      	str	r1, [r2, #4]
   18bb4:	4628      	mov	r0, r5
   18bb6:	bd38      	pop	{r3, r4, r5, pc}
   18bb8:	6851      	ldr	r1, [r2, #4]
   18bba:	3b01      	subs	r3, #1
   18bbc:	3101      	adds	r1, #1
   18bbe:	6013      	str	r3, [r2, #0]
   18bc0:	6051      	str	r1, [r2, #4]
   18bc2:	e7d6      	b.n	18b72 <_sungetc_r+0x2e>

00018bc4 <__ssrefill_r>:
   18bc4:	b510      	push	{r4, lr}
   18bc6:	460c      	mov	r4, r1
   18bc8:	6b09      	ldr	r1, [r1, #48]	; 0x30
   18bca:	b169      	cbz	r1, 18be8 <__ssrefill_r+0x24>
   18bcc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18bd0:	4299      	cmp	r1, r3
   18bd2:	d001      	beq.n	18bd8 <__ssrefill_r+0x14>
   18bd4:	f000 fdbc 	bl	19750 <_free_r>
   18bd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18bda:	6063      	str	r3, [r4, #4]
   18bdc:	2000      	movs	r0, #0
   18bde:	6320      	str	r0, [r4, #48]	; 0x30
   18be0:	b113      	cbz	r3, 18be8 <__ssrefill_r+0x24>
   18be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18be4:	6023      	str	r3, [r4, #0]
   18be6:	bd10      	pop	{r4, pc}
   18be8:	89a3      	ldrh	r3, [r4, #12]
   18bea:	6922      	ldr	r2, [r4, #16]
   18bec:	6022      	str	r2, [r4, #0]
   18bee:	f043 0320 	orr.w	r3, r3, #32
   18bf2:	2200      	movs	r2, #0
   18bf4:	81a3      	strh	r3, [r4, #12]
   18bf6:	6062      	str	r2, [r4, #4]
   18bf8:	f04f 30ff 	mov.w	r0, #4294967295
   18bfc:	bd10      	pop	{r4, pc}
   18bfe:	bf00      	nop

00018c00 <_sfread_r>:
   18c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c04:	b083      	sub	sp, #12
   18c06:	fb02 f903 	mul.w	r9, r2, r3
   18c0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18c0c:	f1b9 0f00 	cmp.w	r9, #0
   18c10:	d028      	beq.n	18c64 <_sfread_r+0x64>
   18c12:	4607      	mov	r7, r0
   18c14:	469a      	mov	sl, r3
   18c16:	9201      	str	r2, [sp, #4]
   18c18:	460d      	mov	r5, r1
   18c1a:	464e      	mov	r6, r9
   18c1c:	f04f 0800 	mov.w	r8, #0
   18c20:	e00f      	b.n	18c42 <_sfread_r+0x42>
   18c22:	6821      	ldr	r1, [r4, #0]
   18c24:	f7fd fd86 	bl	16734 <memcpy>
   18c28:	6822      	ldr	r2, [r4, #0]
   18c2a:	f8c4 8004 	str.w	r8, [r4, #4]
   18c2e:	445a      	add	r2, fp
   18c30:	6022      	str	r2, [r4, #0]
   18c32:	4621      	mov	r1, r4
   18c34:	4638      	mov	r0, r7
   18c36:	445d      	add	r5, fp
   18c38:	eba6 060b 	sub.w	r6, r6, fp
   18c3c:	f7ff ffc2 	bl	18bc4 <__ssrefill_r>
   18c40:	b9a0      	cbnz	r0, 18c6c <_sfread_r+0x6c>
   18c42:	f8d4 b004 	ldr.w	fp, [r4, #4]
   18c46:	455e      	cmp	r6, fp
   18c48:	4628      	mov	r0, r5
   18c4a:	465a      	mov	r2, fp
   18c4c:	d8e9      	bhi.n	18c22 <_sfread_r+0x22>
   18c4e:	4632      	mov	r2, r6
   18c50:	6821      	ldr	r1, [r4, #0]
   18c52:	f7fd fd6f 	bl	16734 <memcpy>
   18c56:	6862      	ldr	r2, [r4, #4]
   18c58:	6823      	ldr	r3, [r4, #0]
   18c5a:	1b92      	subs	r2, r2, r6
   18c5c:	441e      	add	r6, r3
   18c5e:	46d1      	mov	r9, sl
   18c60:	6062      	str	r2, [r4, #4]
   18c62:	6026      	str	r6, [r4, #0]
   18c64:	4648      	mov	r0, r9
   18c66:	b003      	add	sp, #12
   18c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c6c:	9b01      	ldr	r3, [sp, #4]
   18c6e:	eba9 0906 	sub.w	r9, r9, r6
   18c72:	fbb9 f9f3 	udiv	r9, r9, r3
   18c76:	4648      	mov	r0, r9
   18c78:	b003      	add	sp, #12
   18c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c7e:	bf00      	nop

00018c80 <__ssvfiscanf_r>:
   18c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c84:	468b      	mov	fp, r1
   18c86:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   18c8a:	b0d9      	sub	sp, #356	; 0x164
   18c8c:	4607      	mov	r7, r0
   18c8e:	0488      	lsls	r0, r1, #18
   18c90:	9306      	str	r3, [sp, #24]
   18c92:	d409      	bmi.n	18ca8 <__ssvfiscanf_r+0x28>
   18c94:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   18c98:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   18c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18ca0:	f8ab 100c 	strh.w	r1, [fp, #12]
   18ca4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   18ca8:	4614      	mov	r4, r2
   18caa:	4626      	mov	r6, r4
   18cac:	2300      	movs	r3, #0
   18cae:	9307      	str	r3, [sp, #28]
   18cb0:	9304      	str	r3, [sp, #16]
   18cb2:	469a      	mov	sl, r3
   18cb4:	9305      	str	r3, [sp, #20]
   18cb6:	f816 3b01 	ldrb.w	r3, [r6], #1
   18cba:	930b      	str	r3, [sp, #44]	; 0x2c
   18cbc:	b363      	cbz	r3, 18d18 <__ssvfiscanf_r+0x98>
   18cbe:	f000 fe4d 	bl	1995c <__locale_ctype_ptr>
   18cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18cc4:	4418      	add	r0, r3
   18cc6:	7845      	ldrb	r5, [r0, #1]
   18cc8:	f015 0508 	ands.w	r5, r5, #8
   18ccc:	d028      	beq.n	18d20 <__ssvfiscanf_r+0xa0>
   18cce:	f8db 2004 	ldr.w	r2, [fp, #4]
   18cd2:	e012      	b.n	18cfa <__ssvfiscanf_r+0x7a>
   18cd4:	f000 fe42 	bl	1995c <__locale_ctype_ptr>
   18cd8:	f8db 3000 	ldr.w	r3, [fp]
   18cdc:	781a      	ldrb	r2, [r3, #0]
   18cde:	4410      	add	r0, r2
   18ce0:	3301      	adds	r3, #1
   18ce2:	7842      	ldrb	r2, [r0, #1]
   18ce4:	0712      	lsls	r2, r2, #28
   18ce6:	d510      	bpl.n	18d0a <__ssvfiscanf_r+0x8a>
   18ce8:	f8db 2004 	ldr.w	r2, [fp, #4]
   18cec:	f8cb 3000 	str.w	r3, [fp]
   18cf0:	3a01      	subs	r2, #1
   18cf2:	f10a 0a01 	add.w	sl, sl, #1
   18cf6:	f8cb 2004 	str.w	r2, [fp, #4]
   18cfa:	2a00      	cmp	r2, #0
   18cfc:	dcea      	bgt.n	18cd4 <__ssvfiscanf_r+0x54>
   18cfe:	4659      	mov	r1, fp
   18d00:	4638      	mov	r0, r7
   18d02:	f7ff ff5f 	bl	18bc4 <__ssrefill_r>
   18d06:	2800      	cmp	r0, #0
   18d08:	d0e4      	beq.n	18cd4 <__ssvfiscanf_r+0x54>
   18d0a:	4634      	mov	r4, r6
   18d0c:	4626      	mov	r6, r4
   18d0e:	f816 3b01 	ldrb.w	r3, [r6], #1
   18d12:	930b      	str	r3, [sp, #44]	; 0x2c
   18d14:	2b00      	cmp	r3, #0
   18d16:	d1d2      	bne.n	18cbe <__ssvfiscanf_r+0x3e>
   18d18:	9805      	ldr	r0, [sp, #20]
   18d1a:	b059      	add	sp, #356	; 0x164
   18d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d20:	2b25      	cmp	r3, #37	; 0x25
   18d22:	f040 8084 	bne.w	18e2e <__ssvfiscanf_r+0x1ae>
   18d26:	f894 8001 	ldrb.w	r8, [r4, #1]
   18d2a:	462c      	mov	r4, r5
   18d2c:	1c73      	adds	r3, r6, #1
   18d2e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   18d32:	f200 8187 	bhi.w	19044 <__ssvfiscanf_r+0x3c4>
   18d36:	e8df f018 	tbh	[pc, r8, lsl #1]
   18d3a:	0093      	.short	0x0093
   18d3c:	01850185 	.word	0x01850185
   18d40:	01850185 	.word	0x01850185
   18d44:	01850185 	.word	0x01850185
   18d48:	01850185 	.word	0x01850185
   18d4c:	01850185 	.word	0x01850185
   18d50:	01850185 	.word	0x01850185
   18d54:	01850185 	.word	0x01850185
   18d58:	01850185 	.word	0x01850185
   18d5c:	01850185 	.word	0x01850185
   18d60:	01850185 	.word	0x01850185
   18d64:	01850185 	.word	0x01850185
   18d68:	01850185 	.word	0x01850185
   18d6c:	01850185 	.word	0x01850185
   18d70:	01850185 	.word	0x01850185
   18d74:	01850185 	.word	0x01850185
   18d78:	01850185 	.word	0x01850185
   18d7c:	01850185 	.word	0x01850185
   18d80:	01850185 	.word	0x01850185
   18d84:	01850079 	.word	0x01850079
   18d88:	01850185 	.word	0x01850185
   18d8c:	017f0185 	.word	0x017f0185
   18d90:	01850185 	.word	0x01850185
   18d94:	01850185 	.word	0x01850185
   18d98:	01760185 	.word	0x01760185
   18d9c:	01760176 	.word	0x01760176
   18da0:	01760176 	.word	0x01760176
   18da4:	01760176 	.word	0x01760176
   18da8:	01760176 	.word	0x01760176
   18dac:	01850176 	.word	0x01850176
   18db0:	01850185 	.word	0x01850185
   18db4:	01850185 	.word	0x01850185
   18db8:	01850185 	.word	0x01850185
   18dbc:	01850185 	.word	0x01850185
   18dc0:	01720185 	.word	0x01720185
   18dc4:	01850185 	.word	0x01850185
   18dc8:	01850185 	.word	0x01850185
   18dcc:	01850185 	.word	0x01850185
   18dd0:	016c0185 	.word	0x016c0185
   18dd4:	01850185 	.word	0x01850185
   18dd8:	01850168 	.word	0x01850168
   18ddc:	01850185 	.word	0x01850185
   18de0:	01850185 	.word	0x01850185
   18de4:	01850185 	.word	0x01850185
   18de8:	01640185 	.word	0x01640185
   18dec:	01850185 	.word	0x01850185
   18df0:	0185015b 	.word	0x0185015b
   18df4:	01850185 	.word	0x01850185
   18df8:	01850185 	.word	0x01850185
   18dfc:	01850185 	.word	0x01850185
   18e00:	01030115 	.word	0x01030115
   18e04:	01850185 	.word	0x01850185
   18e08:	011a0185 	.word	0x011a0185
   18e0c:	0185009a 	.word	0x0185009a
   18e10:	01510185 	.word	0x01510185
   18e14:	013a0185 	.word	0x013a0185
   18e18:	012a0133 	.word	0x012a0133
   18e1c:	01850185 	.word	0x01850185
   18e20:	01850127 	.word	0x01850127
   18e24:	01850120 	.word	0x01850120
   18e28:	01640185 	.word	0x01640185
   18e2c:	461e      	mov	r6, r3
   18e2e:	f8db 3004 	ldr.w	r3, [fp, #4]
   18e32:	2b00      	cmp	r3, #0
   18e34:	f340 8375 	ble.w	19522 <__ssvfiscanf_r+0x8a2>
   18e38:	f8db 3000 	ldr.w	r3, [fp]
   18e3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   18e40:	7819      	ldrb	r1, [r3, #0]
   18e42:	4291      	cmp	r1, r2
   18e44:	f47f af68 	bne.w	18d18 <__ssvfiscanf_r+0x98>
   18e48:	f8db 2004 	ldr.w	r2, [fp, #4]
   18e4c:	3301      	adds	r3, #1
   18e4e:	3a01      	subs	r2, #1
   18e50:	f8cb 3000 	str.w	r3, [fp]
   18e54:	f10a 0a01 	add.w	sl, sl, #1
   18e58:	f8cb 2004 	str.w	r2, [fp, #4]
   18e5c:	4634      	mov	r4, r6
   18e5e:	e755      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   18e60:	f04f 33ff 	mov.w	r3, #4294967295
   18e64:	9305      	str	r3, [sp, #20]
   18e66:	9805      	ldr	r0, [sp, #20]
   18e68:	b059      	add	sp, #356	; 0x164
   18e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e6e:	9303      	str	r3, [sp, #12]
   18e70:	4ba7      	ldr	r3, [pc, #668]	; (19110 <__ssvfiscanf_r+0x490>)
   18e72:	9307      	str	r3, [sp, #28]
   18e74:	2300      	movs	r3, #0
   18e76:	9304      	str	r3, [sp, #16]
   18e78:	2603      	movs	r6, #3
   18e7a:	f8db 3004 	ldr.w	r3, [fp, #4]
   18e7e:	2b00      	cmp	r3, #0
   18e80:	dd69      	ble.n	18f56 <__ssvfiscanf_r+0x2d6>
   18e82:	0669      	lsls	r1, r5, #25
   18e84:	d533      	bpl.n	18eee <__ssvfiscanf_r+0x26e>
   18e86:	2e02      	cmp	r6, #2
   18e88:	f000 81f7 	beq.w	1927a <__ssvfiscanf_r+0x5fa>
   18e8c:	2e03      	cmp	r6, #3
   18e8e:	f000 8143 	beq.w	19118 <__ssvfiscanf_r+0x498>
   18e92:	2e01      	cmp	r6, #1
   18e94:	f000 810a 	beq.w	190ac <__ssvfiscanf_r+0x42c>
   18e98:	2c00      	cmp	r4, #0
   18e9a:	bf08      	it	eq
   18e9c:	2401      	moveq	r4, #1
   18e9e:	f015 0301 	ands.w	r3, r5, #1
   18ea2:	f040 8247 	bne.w	19334 <__ssvfiscanf_r+0x6b4>
   18ea6:	06ed      	lsls	r5, r5, #27
   18ea8:	f140 831c 	bpl.w	194e4 <__ssvfiscanf_r+0x864>
   18eac:	461d      	mov	r5, r3
   18eae:	e009      	b.n	18ec4 <__ssvfiscanf_r+0x244>
   18eb0:	4413      	add	r3, r2
   18eb2:	f8cb 3000 	str.w	r3, [fp]
   18eb6:	4415      	add	r5, r2
   18eb8:	1aa4      	subs	r4, r4, r2
   18eba:	f7ff fe83 	bl	18bc4 <__ssrefill_r>
   18ebe:	2800      	cmp	r0, #0
   18ec0:	f040 82d6 	bne.w	19470 <__ssvfiscanf_r+0x7f0>
   18ec4:	f8db 2004 	ldr.w	r2, [fp, #4]
   18ec8:	f8db 3000 	ldr.w	r3, [fp]
   18ecc:	42a2      	cmp	r2, r4
   18ece:	4659      	mov	r1, fp
   18ed0:	4638      	mov	r0, r7
   18ed2:	dbed      	blt.n	18eb0 <__ssvfiscanf_r+0x230>
   18ed4:	1b12      	subs	r2, r2, r4
   18ed6:	4423      	add	r3, r4
   18ed8:	f8cb 2004 	str.w	r2, [fp, #4]
   18edc:	4425      	add	r5, r4
   18ede:	f8cb 3000 	str.w	r3, [fp]
   18ee2:	9e03      	ldr	r6, [sp, #12]
   18ee4:	44aa      	add	sl, r5
   18ee6:	4634      	mov	r4, r6
   18ee8:	e710      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   18eea:	f8cb 3000 	str.w	r3, [fp]
   18eee:	f000 fd35 	bl	1995c <__locale_ctype_ptr>
   18ef2:	f8db 3000 	ldr.w	r3, [fp]
   18ef6:	781a      	ldrb	r2, [r3, #0]
   18ef8:	4410      	add	r0, r2
   18efa:	3301      	adds	r3, #1
   18efc:	7842      	ldrb	r2, [r0, #1]
   18efe:	0712      	lsls	r2, r2, #28
   18f00:	d5c1      	bpl.n	18e86 <__ssvfiscanf_r+0x206>
   18f02:	f8db 2004 	ldr.w	r2, [fp, #4]
   18f06:	3a01      	subs	r2, #1
   18f08:	2a00      	cmp	r2, #0
   18f0a:	f10a 0a01 	add.w	sl, sl, #1
   18f0e:	f8cb 2004 	str.w	r2, [fp, #4]
   18f12:	dcea      	bgt.n	18eea <__ssvfiscanf_r+0x26a>
   18f14:	4659      	mov	r1, fp
   18f16:	4638      	mov	r0, r7
   18f18:	f7ff fe54 	bl	18bc4 <__ssrefill_r>
   18f1c:	2800      	cmp	r0, #0
   18f1e:	d0e6      	beq.n	18eee <__ssvfiscanf_r+0x26e>
   18f20:	9a05      	ldr	r2, [sp, #20]
   18f22:	2a00      	cmp	r2, #0
   18f24:	d09c      	beq.n	18e60 <__ssvfiscanf_r+0x1e0>
   18f26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   18f2a:	f013 0f40 	tst.w	r3, #64	; 0x40
   18f2e:	4613      	mov	r3, r2
   18f30:	bf18      	it	ne
   18f32:	f04f 33ff 	movne.w	r3, #4294967295
   18f36:	9305      	str	r3, [sp, #20]
   18f38:	9805      	ldr	r0, [sp, #20]
   18f3a:	b059      	add	sp, #356	; 0x164
   18f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f40:	9303      	str	r3, [sp, #12]
   18f42:	4b73      	ldr	r3, [pc, #460]	; (19110 <__ssvfiscanf_r+0x490>)
   18f44:	9307      	str	r3, [sp, #28]
   18f46:	230a      	movs	r3, #10
   18f48:	9304      	str	r3, [sp, #16]
   18f4a:	f8db 3004 	ldr.w	r3, [fp, #4]
   18f4e:	2b00      	cmp	r3, #0
   18f50:	f04f 0603 	mov.w	r6, #3
   18f54:	dc95      	bgt.n	18e82 <__ssvfiscanf_r+0x202>
   18f56:	4659      	mov	r1, fp
   18f58:	4638      	mov	r0, r7
   18f5a:	f7ff fe33 	bl	18bc4 <__ssrefill_r>
   18f5e:	2800      	cmp	r0, #0
   18f60:	d08f      	beq.n	18e82 <__ssvfiscanf_r+0x202>
   18f62:	e7dd      	b.n	18f20 <__ssvfiscanf_r+0x2a0>
   18f64:	9303      	str	r3, [sp, #12]
   18f66:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   18f6a:	2600      	movs	r6, #0
   18f6c:	e785      	b.n	18e7a <__ssvfiscanf_r+0x1fa>
   18f6e:	f896 8001 	ldrb.w	r8, [r6, #1]
   18f72:	f045 0504 	orr.w	r5, r5, #4
   18f76:	461e      	mov	r6, r3
   18f78:	e6d8      	b.n	18d2c <__ssvfiscanf_r+0xac>
   18f7a:	9303      	str	r3, [sp, #12]
   18f7c:	4b65      	ldr	r3, [pc, #404]	; (19114 <__ssvfiscanf_r+0x494>)
   18f7e:	9307      	str	r3, [sp, #28]
   18f80:	230a      	movs	r3, #10
   18f82:	9304      	str	r3, [sp, #16]
   18f84:	2603      	movs	r6, #3
   18f86:	e778      	b.n	18e7a <__ssvfiscanf_r+0x1fa>
   18f88:	9303      	str	r3, [sp, #12]
   18f8a:	2602      	movs	r6, #2
   18f8c:	e775      	b.n	18e7a <__ssvfiscanf_r+0x1fa>
   18f8e:	9303      	str	r3, [sp, #12]
   18f90:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   18f94:	4b5f      	ldr	r3, [pc, #380]	; (19114 <__ssvfiscanf_r+0x494>)
   18f96:	9307      	str	r3, [sp, #28]
   18f98:	2310      	movs	r3, #16
   18f9a:	9304      	str	r3, [sp, #16]
   18f9c:	2603      	movs	r6, #3
   18f9e:	e76c      	b.n	18e7a <__ssvfiscanf_r+0x1fa>
   18fa0:	9303      	str	r3, [sp, #12]
   18fa2:	4b5c      	ldr	r3, [pc, #368]	; (19114 <__ssvfiscanf_r+0x494>)
   18fa4:	9307      	str	r3, [sp, #28]
   18fa6:	2308      	movs	r3, #8
   18fa8:	9304      	str	r3, [sp, #16]
   18faa:	2603      	movs	r6, #3
   18fac:	e765      	b.n	18e7a <__ssvfiscanf_r+0x1fa>
   18fae:	9303      	str	r3, [sp, #12]
   18fb0:	06eb      	lsls	r3, r5, #27
   18fb2:	d478      	bmi.n	190a6 <__ssvfiscanf_r+0x426>
   18fb4:	076e      	lsls	r6, r5, #29
   18fb6:	f100 82d4 	bmi.w	19562 <__ssvfiscanf_r+0x8e2>
   18fba:	07ec      	lsls	r4, r5, #31
   18fbc:	f100 82c0 	bmi.w	19540 <__ssvfiscanf_r+0x8c0>
   18fc0:	07a8      	lsls	r0, r5, #30
   18fc2:	f140 82bd 	bpl.w	19540 <__ssvfiscanf_r+0x8c0>
   18fc6:	9a06      	ldr	r2, [sp, #24]
   18fc8:	9e03      	ldr	r6, [sp, #12]
   18fca:	6813      	ldr	r3, [r2, #0]
   18fcc:	4650      	mov	r0, sl
   18fce:	17c1      	asrs	r1, r0, #31
   18fd0:	3204      	adds	r2, #4
   18fd2:	9206      	str	r2, [sp, #24]
   18fd4:	e9c3 0100 	strd	r0, r1, [r3]
   18fd8:	4634      	mov	r4, r6
   18fda:	e697      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   18fdc:	f896 8001 	ldrb.w	r8, [r6, #1]
   18fe0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   18fe4:	f000 82a5 	beq.w	19532 <__ssvfiscanf_r+0x8b2>
   18fe8:	f045 0501 	orr.w	r5, r5, #1
   18fec:	461e      	mov	r6, r3
   18fee:	e69d      	b.n	18d2c <__ssvfiscanf_r+0xac>
   18ff0:	4619      	mov	r1, r3
   18ff2:	a818      	add	r0, sp, #96	; 0x60
   18ff4:	f000 ff0e 	bl	19e14 <__sccl>
   18ff8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   18ffc:	9003      	str	r0, [sp, #12]
   18ffe:	2601      	movs	r6, #1
   19000:	e73b      	b.n	18e7a <__ssvfiscanf_r+0x1fa>
   19002:	9303      	str	r3, [sp, #12]
   19004:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   19008:	e7c4      	b.n	18f94 <__ssvfiscanf_r+0x314>
   1900a:	9303      	str	r3, [sp, #12]
   1900c:	f045 0501 	orr.w	r5, r5, #1
   19010:	e7c7      	b.n	18fa2 <__ssvfiscanf_r+0x322>
   19012:	f896 8001 	ldrb.w	r8, [r6, #1]
   19016:	f045 0502 	orr.w	r5, r5, #2
   1901a:	461e      	mov	r6, r3
   1901c:	e686      	b.n	18d2c <__ssvfiscanf_r+0xac>
   1901e:	9303      	str	r3, [sp, #12]
   19020:	f045 0501 	orr.w	r5, r5, #1
   19024:	e78d      	b.n	18f42 <__ssvfiscanf_r+0x2c2>
   19026:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1902a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1902e:	3c30      	subs	r4, #48	; 0x30
   19030:	f896 8001 	ldrb.w	r8, [r6, #1]
   19034:	461e      	mov	r6, r3
   19036:	e679      	b.n	18d2c <__ssvfiscanf_r+0xac>
   19038:	f896 8001 	ldrb.w	r8, [r6, #1]
   1903c:	f045 0510 	orr.w	r5, r5, #16
   19040:	461e      	mov	r6, r3
   19042:	e673      	b.n	18d2c <__ssvfiscanf_r+0xac>
   19044:	9303      	str	r3, [sp, #12]
   19046:	f000 fc89 	bl	1995c <__locale_ctype_ptr>
   1904a:	4440      	add	r0, r8
   1904c:	7843      	ldrb	r3, [r0, #1]
   1904e:	f003 0303 	and.w	r3, r3, #3
   19052:	2b01      	cmp	r3, #1
   19054:	f47f af75 	bne.w	18f42 <__ssvfiscanf_r+0x2c2>
   19058:	f045 0501 	orr.w	r5, r5, #1
   1905c:	e771      	b.n	18f42 <__ssvfiscanf_r+0x2c2>
   1905e:	ab0c      	add	r3, sp, #48	; 0x30
   19060:	4618      	mov	r0, r3
   19062:	2208      	movs	r2, #8
   19064:	2100      	movs	r1, #0
   19066:	9308      	str	r3, [sp, #32]
   19068:	f7fd fbfe 	bl	16868 <memset>
   1906c:	f015 0310 	ands.w	r3, r5, #16
   19070:	9309      	str	r3, [sp, #36]	; 0x24
   19072:	f000 81e1 	beq.w	19438 <__ssvfiscanf_r+0x7b8>
   19076:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1907a:	2600      	movs	r6, #0
   1907c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   19080:	f000 fc6c 	bl	1995c <__locale_ctype_ptr>
   19084:	f8db 3000 	ldr.w	r3, [fp]
   19088:	781b      	ldrb	r3, [r3, #0]
   1908a:	4403      	add	r3, r0
   1908c:	785b      	ldrb	r3, [r3, #1]
   1908e:	071a      	lsls	r2, r3, #28
   19090:	d402      	bmi.n	19098 <__ssvfiscanf_r+0x418>
   19092:	2c00      	cmp	r4, #0
   19094:	f040 8270 	bne.w	19578 <__ssvfiscanf_r+0x8f8>
   19098:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1909a:	b923      	cbnz	r3, 190a6 <__ssvfiscanf_r+0x426>
   1909c:	f8c9 3000 	str.w	r3, [r9]
   190a0:	9b05      	ldr	r3, [sp, #20]
   190a2:	3301      	adds	r3, #1
   190a4:	9305      	str	r3, [sp, #20]
   190a6:	9e03      	ldr	r6, [sp, #12]
   190a8:	4634      	mov	r4, r6
   190aa:	e62f      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   190ac:	2c00      	cmp	r4, #0
   190ae:	bf08      	it	eq
   190b0:	f04f 34ff 	moveq.w	r4, #4294967295
   190b4:	06e8      	lsls	r0, r5, #27
   190b6:	f140 810b 	bpl.w	192d0 <__ssvfiscanf_r+0x650>
   190ba:	f8db 2000 	ldr.w	r2, [fp]
   190be:	2500      	movs	r5, #0
   190c0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   190c4:	7813      	ldrb	r3, [r2, #0]
   190c6:	f818 3003 	ldrb.w	r3, [r8, r3]
   190ca:	3201      	adds	r2, #1
   190cc:	b1db      	cbz	r3, 19106 <__ssvfiscanf_r+0x486>
   190ce:	f8db 3004 	ldr.w	r3, [fp, #4]
   190d2:	f8cb 2000 	str.w	r2, [fp]
   190d6:	3501      	adds	r5, #1
   190d8:	3b01      	subs	r3, #1
   190da:	42ac      	cmp	r4, r5
   190dc:	f8cb 3004 	str.w	r3, [fp, #4]
   190e0:	f43f aeff 	beq.w	18ee2 <__ssvfiscanf_r+0x262>
   190e4:	2b00      	cmp	r3, #0
   190e6:	dced      	bgt.n	190c4 <__ssvfiscanf_r+0x444>
   190e8:	4659      	mov	r1, fp
   190ea:	4638      	mov	r0, r7
   190ec:	f7ff fd6a 	bl	18bc4 <__ssrefill_r>
   190f0:	2800      	cmp	r0, #0
   190f2:	f47f aef6 	bne.w	18ee2 <__ssvfiscanf_r+0x262>
   190f6:	f8db 2000 	ldr.w	r2, [fp]
   190fa:	7813      	ldrb	r3, [r2, #0]
   190fc:	f818 3003 	ldrb.w	r3, [r8, r3]
   19100:	3201      	adds	r2, #1
   19102:	2b00      	cmp	r3, #0
   19104:	d1e3      	bne.n	190ce <__ssvfiscanf_r+0x44e>
   19106:	2d00      	cmp	r5, #0
   19108:	f47f aeeb 	bne.w	18ee2 <__ssvfiscanf_r+0x262>
   1910c:	e604      	b.n	18d18 <__ssvfiscanf_r+0x98>
   1910e:	bf00      	nop
   19110:	00019fb1 	.word	0x00019fb1
   19114:	00017fa5 	.word	0x00017fa5
   19118:	1e63      	subs	r3, r4, #1
   1911a:	2b26      	cmp	r3, #38	; 0x26
   1911c:	bf8c      	ite	hi
   1911e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   19122:	2200      	movls	r2, #0
   19124:	f04f 0900 	mov.w	r9, #0
   19128:	4611      	mov	r1, r2
   1912a:	ae0e      	add	r6, sp, #56	; 0x38
   1912c:	464b      	mov	r3, r9
   1912e:	46b9      	mov	r9, r7
   19130:	9f04      	ldr	r7, [sp, #16]
   19132:	4652      	mov	r2, sl
   19134:	bf88      	it	hi
   19136:	2427      	movhi	r4, #39	; 0x27
   19138:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1913c:	46b0      	mov	r8, r6
   1913e:	468a      	mov	sl, r1
   19140:	f8db 0000 	ldr.w	r0, [fp]
   19144:	f890 e000 	ldrb.w	lr, [r0]
   19148:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1914c:	294d      	cmp	r1, #77	; 0x4d
   1914e:	d842      	bhi.n	191d6 <__ssvfiscanf_r+0x556>
   19150:	e8df f001 	tbb	[pc, r1]
   19154:	418e418e 	.word	0x418e418e
   19158:	5d5d6341 	.word	0x5d5d6341
   1915c:	5d5d5d5d 	.word	0x5d5d5d5d
   19160:	4188885d 	.word	0x4188885d
   19164:	41414141 	.word	0x41414141
   19168:	58584141 	.word	0x58584141
   1916c:	58585858 	.word	0x58585858
   19170:	41414141 	.word	0x41414141
   19174:	41414141 	.word	0x41414141
   19178:	41414141 	.word	0x41414141
   1917c:	41414141 	.word	0x41414141
   19180:	41412741 	.word	0x41412741
   19184:	41414141 	.word	0x41414141
   19188:	58584141 	.word	0x58584141
   1918c:	58585858 	.word	0x58585858
   19190:	41414141 	.word	0x41414141
   19194:	41414141 	.word	0x41414141
   19198:	41414141 	.word	0x41414141
   1919c:	41414141 	.word	0x41414141
   191a0:	2741      	.short	0x2741
   191a2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   191a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   191aa:	d114      	bne.n	191d6 <__ssvfiscanf_r+0x556>
   191ac:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   191b0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   191b4:	2710      	movs	r7, #16
   191b6:	f8db 1004 	ldr.w	r1, [fp, #4]
   191ba:	f888 e000 	strb.w	lr, [r8]
   191be:	3901      	subs	r1, #1
   191c0:	2900      	cmp	r1, #0
   191c2:	f108 0801 	add.w	r8, r8, #1
   191c6:	f8cb 1004 	str.w	r1, [fp, #4]
   191ca:	dd40      	ble.n	1924e <__ssvfiscanf_r+0x5ce>
   191cc:	3001      	adds	r0, #1
   191ce:	f8cb 0000 	str.w	r0, [fp]
   191d2:	3c01      	subs	r4, #1
   191d4:	d1b4      	bne.n	19140 <__ssvfiscanf_r+0x4c0>
   191d6:	05e8      	lsls	r0, r5, #23
   191d8:	9704      	str	r7, [sp, #16]
   191da:	4692      	mov	sl, r2
   191dc:	464f      	mov	r7, r9
   191de:	4699      	mov	r9, r3
   191e0:	d505      	bpl.n	191ee <__ssvfiscanf_r+0x56e>
   191e2:	45b0      	cmp	r8, r6
   191e4:	f200 8194 	bhi.w	19510 <__ssvfiscanf_r+0x890>
   191e8:	45b0      	cmp	r8, r6
   191ea:	f43f ad95 	beq.w	18d18 <__ssvfiscanf_r+0x98>
   191ee:	f015 0410 	ands.w	r4, r5, #16
   191f2:	f000 80e5 	beq.w	193c0 <__ssvfiscanf_r+0x740>
   191f6:	eba8 0606 	sub.w	r6, r8, r6
   191fa:	44b1      	add	r9, r6
   191fc:	9e03      	ldr	r6, [sp, #12]
   191fe:	44ca      	add	sl, r9
   19200:	4634      	mov	r4, r6
   19202:	e583      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   19204:	2f0a      	cmp	r7, #10
   19206:	dde6      	ble.n	191d6 <__ssvfiscanf_r+0x556>
   19208:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1920c:	e7d3      	b.n	191b6 <__ssvfiscanf_r+0x536>
   1920e:	49b3      	ldr	r1, [pc, #716]	; (194dc <__ssvfiscanf_r+0x85c>)
   19210:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   19214:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   19218:	e7cd      	b.n	191b6 <__ssvfiscanf_r+0x536>
   1921a:	0529      	lsls	r1, r5, #20
   1921c:	d5cb      	bpl.n	191b6 <__ssvfiscanf_r+0x536>
   1921e:	b917      	cbnz	r7, 19226 <__ssvfiscanf_r+0x5a6>
   19220:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   19224:	2708      	movs	r7, #8
   19226:	0569      	lsls	r1, r5, #21
   19228:	f100 80fa 	bmi.w	19420 <__ssvfiscanf_r+0x7a0>
   1922c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   19230:	f1ba 0f00 	cmp.w	sl, #0
   19234:	d002      	beq.n	1923c <__ssvfiscanf_r+0x5bc>
   19236:	f10a 3aff 	add.w	sl, sl, #4294967295
   1923a:	3401      	adds	r4, #1
   1923c:	f8db 1004 	ldr.w	r1, [fp, #4]
   19240:	3901      	subs	r1, #1
   19242:	2900      	cmp	r1, #0
   19244:	f103 0301 	add.w	r3, r3, #1
   19248:	f8cb 1004 	str.w	r1, [fp, #4]
   1924c:	dcbe      	bgt.n	191cc <__ssvfiscanf_r+0x54c>
   1924e:	4659      	mov	r1, fp
   19250:	4648      	mov	r0, r9
   19252:	9308      	str	r3, [sp, #32]
   19254:	9204      	str	r2, [sp, #16]
   19256:	f7ff fcb5 	bl	18bc4 <__ssrefill_r>
   1925a:	9a04      	ldr	r2, [sp, #16]
   1925c:	9b08      	ldr	r3, [sp, #32]
   1925e:	2800      	cmp	r0, #0
   19260:	d0b7      	beq.n	191d2 <__ssvfiscanf_r+0x552>
   19262:	e7b8      	b.n	191d6 <__ssvfiscanf_r+0x556>
   19264:	499d      	ldr	r1, [pc, #628]	; (194dc <__ssvfiscanf_r+0x85c>)
   19266:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1926a:	2f08      	cmp	r7, #8
   1926c:	dccc      	bgt.n	19208 <__ssvfiscanf_r+0x588>
   1926e:	e7b2      	b.n	191d6 <__ssvfiscanf_r+0x556>
   19270:	0629      	lsls	r1, r5, #24
   19272:	d5b0      	bpl.n	191d6 <__ssvfiscanf_r+0x556>
   19274:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   19278:	e79d      	b.n	191b6 <__ssvfiscanf_r+0x536>
   1927a:	2c00      	cmp	r4, #0
   1927c:	bf08      	it	eq
   1927e:	f04f 34ff 	moveq.w	r4, #4294967295
   19282:	f015 0601 	ands.w	r6, r5, #1
   19286:	f47f aeea 	bne.w	1905e <__ssvfiscanf_r+0x3de>
   1928a:	06eb      	lsls	r3, r5, #27
   1928c:	f140 80f4 	bpl.w	19478 <__ssvfiscanf_r+0x7f8>
   19290:	f000 fb64 	bl	1995c <__locale_ctype_ptr>
   19294:	f8db 3000 	ldr.w	r3, [fp]
   19298:	781a      	ldrb	r2, [r3, #0]
   1929a:	4410      	add	r0, r2
   1929c:	3301      	adds	r3, #1
   1929e:	7842      	ldrb	r2, [r0, #1]
   192a0:	0715      	lsls	r5, r2, #28
   192a2:	d411      	bmi.n	192c8 <__ssvfiscanf_r+0x648>
   192a4:	f8db 2004 	ldr.w	r2, [fp, #4]
   192a8:	f8cb 3000 	str.w	r3, [fp]
   192ac:	3601      	adds	r6, #1
   192ae:	3a01      	subs	r2, #1
   192b0:	42b4      	cmp	r4, r6
   192b2:	f8cb 2004 	str.w	r2, [fp, #4]
   192b6:	d007      	beq.n	192c8 <__ssvfiscanf_r+0x648>
   192b8:	2a00      	cmp	r2, #0
   192ba:	dce9      	bgt.n	19290 <__ssvfiscanf_r+0x610>
   192bc:	4659      	mov	r1, fp
   192be:	4638      	mov	r0, r7
   192c0:	f7ff fc80 	bl	18bc4 <__ssrefill_r>
   192c4:	2800      	cmp	r0, #0
   192c6:	d0e3      	beq.n	19290 <__ssvfiscanf_r+0x610>
   192c8:	44b2      	add	sl, r6
   192ca:	9e03      	ldr	r6, [sp, #12]
   192cc:	4634      	mov	r4, r6
   192ce:	e51d      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   192d0:	9a06      	ldr	r2, [sp, #24]
   192d2:	6815      	ldr	r5, [r2, #0]
   192d4:	1d16      	adds	r6, r2, #4
   192d6:	46a9      	mov	r9, r5
   192d8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   192dc:	f8db 3000 	ldr.w	r3, [fp]
   192e0:	781a      	ldrb	r2, [r3, #0]
   192e2:	f818 2002 	ldrb.w	r2, [r8, r2]
   192e6:	1c59      	adds	r1, r3, #1
   192e8:	b1c2      	cbz	r2, 1931c <__ssvfiscanf_r+0x69c>
   192ea:	f8db 2004 	ldr.w	r2, [fp, #4]
   192ee:	f8cb 1000 	str.w	r1, [fp]
   192f2:	3a01      	subs	r2, #1
   192f4:	f8cb 2004 	str.w	r2, [fp, #4]
   192f8:	781b      	ldrb	r3, [r3, #0]
   192fa:	f809 3b01 	strb.w	r3, [r9], #1
   192fe:	3c01      	subs	r4, #1
   19300:	d00c      	beq.n	1931c <__ssvfiscanf_r+0x69c>
   19302:	f8db 3004 	ldr.w	r3, [fp, #4]
   19306:	2b00      	cmp	r3, #0
   19308:	dce8      	bgt.n	192dc <__ssvfiscanf_r+0x65c>
   1930a:	4659      	mov	r1, fp
   1930c:	4638      	mov	r0, r7
   1930e:	f7ff fc59 	bl	18bc4 <__ssrefill_r>
   19312:	2800      	cmp	r0, #0
   19314:	d0e2      	beq.n	192dc <__ssvfiscanf_r+0x65c>
   19316:	454d      	cmp	r5, r9
   19318:	f43f ae02 	beq.w	18f20 <__ssvfiscanf_r+0x2a0>
   1931c:	ebb9 0505 	subs.w	r5, r9, r5
   19320:	f43f acfa 	beq.w	18d18 <__ssvfiscanf_r+0x98>
   19324:	9a05      	ldr	r2, [sp, #20]
   19326:	9606      	str	r6, [sp, #24]
   19328:	2300      	movs	r3, #0
   1932a:	3201      	adds	r2, #1
   1932c:	9205      	str	r2, [sp, #20]
   1932e:	f889 3000 	strb.w	r3, [r9]
   19332:	e5d6      	b.n	18ee2 <__ssvfiscanf_r+0x262>
   19334:	ab0c      	add	r3, sp, #48	; 0x30
   19336:	4618      	mov	r0, r3
   19338:	2208      	movs	r2, #8
   1933a:	2100      	movs	r1, #0
   1933c:	9308      	str	r3, [sp, #32]
   1933e:	f7fd fa93 	bl	16868 <memset>
   19342:	f015 0310 	ands.w	r3, r5, #16
   19346:	9309      	str	r3, [sp, #36]	; 0x24
   19348:	d06d      	beq.n	19426 <__ssvfiscanf_r+0x7a6>
   1934a:	f04f 0900 	mov.w	r9, #0
   1934e:	2c00      	cmp	r4, #0
   19350:	f43f aea9 	beq.w	190a6 <__ssvfiscanf_r+0x426>
   19354:	2500      	movs	r5, #0
   19356:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1935a:	f000 faed 	bl	19938 <__locale_mb_cur_max>
   1935e:	4285      	cmp	r5, r0
   19360:	f43f adde 	beq.w	18f20 <__ssvfiscanf_r+0x2a0>
   19364:	e89b 000c 	ldmia.w	fp, {r2, r3}
   19368:	f812 0b01 	ldrb.w	r0, [r2], #1
   1936c:	f8cb 2000 	str.w	r2, [fp]
   19370:	3b01      	subs	r3, #1
   19372:	9a08      	ldr	r2, [sp, #32]
   19374:	9200      	str	r2, [sp, #0]
   19376:	1c6e      	adds	r6, r5, #1
   19378:	f8cb 3004 	str.w	r3, [fp, #4]
   1937c:	f808 0005 	strb.w	r0, [r8, r5]
   19380:	4633      	mov	r3, r6
   19382:	4642      	mov	r2, r8
   19384:	4649      	mov	r1, r9
   19386:	4638      	mov	r0, r7
   19388:	f000 faf6 	bl	19978 <_mbrtowc_r>
   1938c:	1c43      	adds	r3, r0, #1
   1938e:	f43f adc7 	beq.w	18f20 <__ssvfiscanf_r+0x2a0>
   19392:	2800      	cmp	r0, #0
   19394:	d15d      	bne.n	19452 <__ssvfiscanf_r+0x7d2>
   19396:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19398:	2b00      	cmp	r3, #0
   1939a:	d15e      	bne.n	1945a <__ssvfiscanf_r+0x7da>
   1939c:	f8c9 3000 	str.w	r3, [r9]
   193a0:	44b2      	add	sl, r6
   193a2:	3c01      	subs	r4, #1
   193a4:	f109 0904 	add.w	r9, r9, #4
   193a8:	2500      	movs	r5, #0
   193aa:	f8db 3004 	ldr.w	r3, [fp, #4]
   193ae:	2b00      	cmp	r3, #0
   193b0:	dd2d      	ble.n	1940e <__ssvfiscanf_r+0x78e>
   193b2:	2c00      	cmp	r4, #0
   193b4:	d1d1      	bne.n	1935a <__ssvfiscanf_r+0x6da>
   193b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   193b8:	2b00      	cmp	r3, #0
   193ba:	f43f ae71 	beq.w	190a0 <__ssvfiscanf_r+0x420>
   193be:	e672      	b.n	190a6 <__ssvfiscanf_r+0x426>
   193c0:	4622      	mov	r2, r4
   193c2:	4631      	mov	r1, r6
   193c4:	f888 4000 	strb.w	r4, [r8]
   193c8:	9b04      	ldr	r3, [sp, #16]
   193ca:	9c07      	ldr	r4, [sp, #28]
   193cc:	4638      	mov	r0, r7
   193ce:	47a0      	blx	r4
   193d0:	06a9      	lsls	r1, r5, #26
   193d2:	d438      	bmi.n	19446 <__ssvfiscanf_r+0x7c6>
   193d4:	076a      	lsls	r2, r5, #29
   193d6:	f100 80be 	bmi.w	19556 <__ssvfiscanf_r+0x8d6>
   193da:	f015 0201 	ands.w	r2, r5, #1
   193de:	d132      	bne.n	19446 <__ssvfiscanf_r+0x7c6>
   193e0:	07ab      	lsls	r3, r5, #30
   193e2:	d530      	bpl.n	19446 <__ssvfiscanf_r+0x7c6>
   193e4:	9b07      	ldr	r3, [sp, #28]
   193e6:	4619      	mov	r1, r3
   193e8:	4b3d      	ldr	r3, [pc, #244]	; (194e0 <__ssvfiscanf_r+0x860>)
   193ea:	4299      	cmp	r1, r3
   193ec:	4638      	mov	r0, r7
   193ee:	9b04      	ldr	r3, [sp, #16]
   193f0:	4631      	mov	r1, r6
   193f2:	f000 8105 	beq.w	19600 <__ssvfiscanf_r+0x980>
   193f6:	f000 febb 	bl	1a170 <_strtoll_r>
   193fa:	9a06      	ldr	r2, [sp, #24]
   193fc:	6813      	ldr	r3, [r2, #0]
   193fe:	e9c3 0100 	strd	r0, r1, [r3]
   19402:	3204      	adds	r2, #4
   19404:	9206      	str	r2, [sp, #24]
   19406:	9b05      	ldr	r3, [sp, #20]
   19408:	3301      	adds	r3, #1
   1940a:	9305      	str	r3, [sp, #20]
   1940c:	e6f3      	b.n	191f6 <__ssvfiscanf_r+0x576>
   1940e:	4659      	mov	r1, fp
   19410:	4638      	mov	r0, r7
   19412:	f7ff fbd7 	bl	18bc4 <__ssrefill_r>
   19416:	2800      	cmp	r0, #0
   19418:	d0cb      	beq.n	193b2 <__ssvfiscanf_r+0x732>
   1941a:	2d00      	cmp	r5, #0
   1941c:	d0cb      	beq.n	193b6 <__ssvfiscanf_r+0x736>
   1941e:	e57f      	b.n	18f20 <__ssvfiscanf_r+0x2a0>
   19420:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   19424:	e6c7      	b.n	191b6 <__ssvfiscanf_r+0x536>
   19426:	9a06      	ldr	r2, [sp, #24]
   19428:	4613      	mov	r3, r2
   1942a:	3304      	adds	r3, #4
   1942c:	f8d2 9000 	ldr.w	r9, [r2]
   19430:	9306      	str	r3, [sp, #24]
   19432:	2c00      	cmp	r4, #0
   19434:	d18e      	bne.n	19354 <__ssvfiscanf_r+0x6d4>
   19436:	e633      	b.n	190a0 <__ssvfiscanf_r+0x420>
   19438:	9a06      	ldr	r2, [sp, #24]
   1943a:	4613      	mov	r3, r2
   1943c:	3304      	adds	r3, #4
   1943e:	f8d2 9000 	ldr.w	r9, [r2]
   19442:	9306      	str	r3, [sp, #24]
   19444:	e619      	b.n	1907a <__ssvfiscanf_r+0x3fa>
   19446:	9a06      	ldr	r2, [sp, #24]
   19448:	6813      	ldr	r3, [r2, #0]
   1944a:	3204      	adds	r2, #4
   1944c:	9206      	str	r2, [sp, #24]
   1944e:	6018      	str	r0, [r3, #0]
   19450:	e7d9      	b.n	19406 <__ssvfiscanf_r+0x786>
   19452:	3002      	adds	r0, #2
   19454:	d105      	bne.n	19462 <__ssvfiscanf_r+0x7e2>
   19456:	4635      	mov	r5, r6
   19458:	e7a7      	b.n	193aa <__ssvfiscanf_r+0x72a>
   1945a:	44b2      	add	sl, r6
   1945c:	3c01      	subs	r4, #1
   1945e:	4605      	mov	r5, r0
   19460:	e7a3      	b.n	193aa <__ssvfiscanf_r+0x72a>
   19462:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19464:	44b2      	add	sl, r6
   19466:	3c01      	subs	r4, #1
   19468:	2b00      	cmp	r3, #0
   1946a:	d09b      	beq.n	193a4 <__ssvfiscanf_r+0x724>
   1946c:	2500      	movs	r5, #0
   1946e:	e79c      	b.n	193aa <__ssvfiscanf_r+0x72a>
   19470:	2d00      	cmp	r5, #0
   19472:	f47f ad36 	bne.w	18ee2 <__ssvfiscanf_r+0x262>
   19476:	e553      	b.n	18f20 <__ssvfiscanf_r+0x2a0>
   19478:	9a06      	ldr	r2, [sp, #24]
   1947a:	6816      	ldr	r6, [r2, #0]
   1947c:	f102 0804 	add.w	r8, r2, #4
   19480:	4635      	mov	r5, r6
   19482:	f000 fa6b 	bl	1995c <__locale_ctype_ptr>
   19486:	f8db 2000 	ldr.w	r2, [fp]
   1948a:	7813      	ldrb	r3, [r2, #0]
   1948c:	4418      	add	r0, r3
   1948e:	1c51      	adds	r1, r2, #1
   19490:	7843      	ldrb	r3, [r0, #1]
   19492:	0718      	lsls	r0, r3, #28
   19494:	d415      	bmi.n	194c2 <__ssvfiscanf_r+0x842>
   19496:	f8db 3004 	ldr.w	r3, [fp, #4]
   1949a:	f8cb 1000 	str.w	r1, [fp]
   1949e:	3b01      	subs	r3, #1
   194a0:	f8cb 3004 	str.w	r3, [fp, #4]
   194a4:	7813      	ldrb	r3, [r2, #0]
   194a6:	f805 3b01 	strb.w	r3, [r5], #1
   194aa:	3c01      	subs	r4, #1
   194ac:	d009      	beq.n	194c2 <__ssvfiscanf_r+0x842>
   194ae:	f8db 3004 	ldr.w	r3, [fp, #4]
   194b2:	2b00      	cmp	r3, #0
   194b4:	dce5      	bgt.n	19482 <__ssvfiscanf_r+0x802>
   194b6:	4659      	mov	r1, fp
   194b8:	4638      	mov	r0, r7
   194ba:	f7ff fb83 	bl	18bc4 <__ssrefill_r>
   194be:	2800      	cmp	r0, #0
   194c0:	d0df      	beq.n	19482 <__ssvfiscanf_r+0x802>
   194c2:	1bae      	subs	r6, r5, r6
   194c4:	9a05      	ldr	r2, [sp, #20]
   194c6:	f8cd 8018 	str.w	r8, [sp, #24]
   194ca:	44b2      	add	sl, r6
   194cc:	9e03      	ldr	r6, [sp, #12]
   194ce:	2300      	movs	r3, #0
   194d0:	3201      	adds	r2, #1
   194d2:	9205      	str	r2, [sp, #20]
   194d4:	702b      	strb	r3, [r5, #0]
   194d6:	4634      	mov	r4, r6
   194d8:	e418      	b.n	18d0c <__ssvfiscanf_r+0x8c>
   194da:	bf00      	nop
   194dc:	0001c1ac 	.word	0x0001c1ac
   194e0:	00017fa5 	.word	0x00017fa5
   194e4:	9d06      	ldr	r5, [sp, #24]
   194e6:	4623      	mov	r3, r4
   194e8:	6829      	ldr	r1, [r5, #0]
   194ea:	f8cd b000 	str.w	fp, [sp]
   194ee:	2201      	movs	r2, #1
   194f0:	4638      	mov	r0, r7
   194f2:	f7ff fb85 	bl	18c00 <_sfread_r>
   194f6:	1d2e      	adds	r6, r5, #4
   194f8:	2800      	cmp	r0, #0
   194fa:	f43f ad11 	beq.w	18f20 <__ssvfiscanf_r+0x2a0>
   194fe:	9b05      	ldr	r3, [sp, #20]
   19500:	9606      	str	r6, [sp, #24]
   19502:	9e03      	ldr	r6, [sp, #12]
   19504:	3301      	adds	r3, #1
   19506:	4482      	add	sl, r0
   19508:	9305      	str	r3, [sp, #20]
   1950a:	4634      	mov	r4, r6
   1950c:	f7ff bbfe 	b.w	18d0c <__ssvfiscanf_r+0x8c>
   19510:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   19514:	465a      	mov	r2, fp
   19516:	4638      	mov	r0, r7
   19518:	f7ff fb14 	bl	18b44 <_sungetc_r>
   1951c:	f108 38ff 	add.w	r8, r8, #4294967295
   19520:	e662      	b.n	191e8 <__ssvfiscanf_r+0x568>
   19522:	4659      	mov	r1, fp
   19524:	4638      	mov	r0, r7
   19526:	f7ff fb4d 	bl	18bc4 <__ssrefill_r>
   1952a:	2800      	cmp	r0, #0
   1952c:	f43f ac84 	beq.w	18e38 <__ssvfiscanf_r+0x1b8>
   19530:	e4f6      	b.n	18f20 <__ssvfiscanf_r+0x2a0>
   19532:	f896 8002 	ldrb.w	r8, [r6, #2]
   19536:	f045 0502 	orr.w	r5, r5, #2
   1953a:	3602      	adds	r6, #2
   1953c:	f7ff bbf6 	b.w	18d2c <__ssvfiscanf_r+0xac>
   19540:	9a06      	ldr	r2, [sp, #24]
   19542:	9e03      	ldr	r6, [sp, #12]
   19544:	6813      	ldr	r3, [r2, #0]
   19546:	f8c3 a000 	str.w	sl, [r3]
   1954a:	4613      	mov	r3, r2
   1954c:	3304      	adds	r3, #4
   1954e:	9306      	str	r3, [sp, #24]
   19550:	4634      	mov	r4, r6
   19552:	f7ff bbdb 	b.w	18d0c <__ssvfiscanf_r+0x8c>
   19556:	9a06      	ldr	r2, [sp, #24]
   19558:	6813      	ldr	r3, [r2, #0]
   1955a:	3204      	adds	r2, #4
   1955c:	9206      	str	r2, [sp, #24]
   1955e:	8018      	strh	r0, [r3, #0]
   19560:	e751      	b.n	19406 <__ssvfiscanf_r+0x786>
   19562:	9a06      	ldr	r2, [sp, #24]
   19564:	9e03      	ldr	r6, [sp, #12]
   19566:	6813      	ldr	r3, [r2, #0]
   19568:	f8a3 a000 	strh.w	sl, [r3]
   1956c:	4613      	mov	r3, r2
   1956e:	3304      	adds	r3, #4
   19570:	9306      	str	r3, [sp, #24]
   19572:	4634      	mov	r4, r6
   19574:	f7ff bbca 	b.w	18d0c <__ssvfiscanf_r+0x8c>
   19578:	f000 f9de 	bl	19938 <__locale_mb_cur_max>
   1957c:	4286      	cmp	r6, r0
   1957e:	f43f accf 	beq.w	18f20 <__ssvfiscanf_r+0x2a0>
   19582:	e89b 000c 	ldmia.w	fp, {r2, r3}
   19586:	f812 0b01 	ldrb.w	r0, [r2], #1
   1958a:	f8cb 2000 	str.w	r2, [fp]
   1958e:	3b01      	subs	r3, #1
   19590:	9a08      	ldr	r2, [sp, #32]
   19592:	9200      	str	r2, [sp, #0]
   19594:	1c75      	adds	r5, r6, #1
   19596:	f8cb 3004 	str.w	r3, [fp, #4]
   1959a:	4649      	mov	r1, r9
   1959c:	f808 0006 	strb.w	r0, [r8, r6]
   195a0:	462b      	mov	r3, r5
   195a2:	4642      	mov	r2, r8
   195a4:	4638      	mov	r0, r7
   195a6:	f000 f9e7 	bl	19978 <_mbrtowc_r>
   195aa:	1c41      	adds	r1, r0, #1
   195ac:	f43f acb8 	beq.w	18f20 <__ssvfiscanf_r+0x2a0>
   195b0:	b198      	cbz	r0, 195da <__ssvfiscanf_r+0x95a>
   195b2:	3002      	adds	r0, #2
   195b4:	bf08      	it	eq
   195b6:	462e      	moveq	r6, r5
   195b8:	d12e      	bne.n	19618 <__ssvfiscanf_r+0x998>
   195ba:	f8db 3004 	ldr.w	r3, [fp, #4]
   195be:	2b00      	cmp	r3, #0
   195c0:	f73f ad5e 	bgt.w	19080 <__ssvfiscanf_r+0x400>
   195c4:	4659      	mov	r1, fp
   195c6:	4638      	mov	r0, r7
   195c8:	f7ff fafc 	bl	18bc4 <__ssrefill_r>
   195cc:	2800      	cmp	r0, #0
   195ce:	f43f ad57 	beq.w	19080 <__ssvfiscanf_r+0x400>
   195d2:	2e00      	cmp	r6, #0
   195d4:	f47f aca4 	bne.w	18f20 <__ssvfiscanf_r+0x2a0>
   195d8:	e55e      	b.n	19098 <__ssvfiscanf_r+0x418>
   195da:	f8c9 0000 	str.w	r0, [r9]
   195de:	f000 f99d 	bl	1991c <iswspace>
   195e2:	4606      	mov	r6, r0
   195e4:	b178      	cbz	r0, 19606 <__ssvfiscanf_r+0x986>
   195e6:	2d00      	cmp	r5, #0
   195e8:	f43f ad56 	beq.w	19098 <__ssvfiscanf_r+0x418>
   195ec:	4445      	add	r5, r8
   195ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   195f2:	465a      	mov	r2, fp
   195f4:	4638      	mov	r0, r7
   195f6:	f7ff faa5 	bl	18b44 <_sungetc_r>
   195fa:	4545      	cmp	r5, r8
   195fc:	d1f7      	bne.n	195ee <__ssvfiscanf_r+0x96e>
   195fe:	e54b      	b.n	19098 <__ssvfiscanf_r+0x418>
   19600:	f000 fea6 	bl	1a350 <_strtoull_r>
   19604:	e6f9      	b.n	193fa <__ssvfiscanf_r+0x77a>
   19606:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19608:	44aa      	add	sl, r5
   1960a:	3c01      	subs	r4, #1
   1960c:	2b00      	cmp	r3, #0
   1960e:	d1d4      	bne.n	195ba <__ssvfiscanf_r+0x93a>
   19610:	f109 0904 	add.w	r9, r9, #4
   19614:	461e      	mov	r6, r3
   19616:	e7d0      	b.n	195ba <__ssvfiscanf_r+0x93a>
   19618:	f8d9 0000 	ldr.w	r0, [r9]
   1961c:	e7df      	b.n	195de <__ssvfiscanf_r+0x95e>
   1961e:	bf00      	nop

00019620 <__submore>:
   19620:	f101 0340 	add.w	r3, r1, #64	; 0x40
   19624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19628:	460c      	mov	r4, r1
   1962a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1962c:	4299      	cmp	r1, r3
   1962e:	d014      	beq.n	1965a <__submore+0x3a>
   19630:	6b66      	ldr	r6, [r4, #52]	; 0x34
   19632:	0077      	lsls	r7, r6, #1
   19634:	463a      	mov	r2, r7
   19636:	f000 fa47 	bl	19ac8 <_realloc_r>
   1963a:	4605      	mov	r5, r0
   1963c:	b340      	cbz	r0, 19690 <__submore+0x70>
   1963e:	eb00 0806 	add.w	r8, r0, r6
   19642:	4632      	mov	r2, r6
   19644:	4640      	mov	r0, r8
   19646:	4629      	mov	r1, r5
   19648:	f7fd f874 	bl	16734 <memcpy>
   1964c:	f8c4 8000 	str.w	r8, [r4]
   19650:	6325      	str	r5, [r4, #48]	; 0x30
   19652:	6367      	str	r7, [r4, #52]	; 0x34
   19654:	2000      	movs	r0, #0
   19656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1965a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1965e:	f7fd fe5d 	bl	1731c <_malloc_r>
   19662:	b1a8      	cbz	r0, 19690 <__submore+0x70>
   19664:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   19668:	6320      	str	r0, [r4, #48]	; 0x30
   1966a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1966e:	6362      	str	r2, [r4, #52]	; 0x34
   19670:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   19674:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   19678:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1967c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   19680:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   19684:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   19688:	6020      	str	r0, [r4, #0]
   1968a:	2000      	movs	r0, #0
   1968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19690:	f04f 30ff 	mov.w	r0, #4294967295
   19694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019698 <__env_lock>:
   19698:	4801      	ldr	r0, [pc, #4]	; (196a0 <__env_lock+0x8>)
   1969a:	f7fd be39 	b.w	17310 <__retarget_lock_acquire_recursive>
   1969e:	bf00      	nop
   196a0:	20005174 	.word	0x20005174

000196a4 <__env_unlock>:
   196a4:	4801      	ldr	r0, [pc, #4]	; (196ac <__env_unlock+0x8>)
   196a6:	f7fd be37 	b.w	17318 <__retarget_lock_release_recursive>
   196aa:	bf00      	nop
   196ac:	20005174 	.word	0x20005174

000196b0 <_malloc_trim_r>:
   196b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196b2:	4f24      	ldr	r7, [pc, #144]	; (19744 <_malloc_trim_r+0x94>)
   196b4:	460c      	mov	r4, r1
   196b6:	4606      	mov	r6, r0
   196b8:	f7fe f932 	bl	17920 <__malloc_lock>
   196bc:	68bb      	ldr	r3, [r7, #8]
   196be:	685d      	ldr	r5, [r3, #4]
   196c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   196c4:	310f      	adds	r1, #15
   196c6:	f025 0503 	bic.w	r5, r5, #3
   196ca:	4429      	add	r1, r5
   196cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   196d0:	f021 010f 	bic.w	r1, r1, #15
   196d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   196d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   196dc:	db07      	blt.n	196ee <_malloc_trim_r+0x3e>
   196de:	2100      	movs	r1, #0
   196e0:	4630      	mov	r0, r6
   196e2:	f7fe f929 	bl	17938 <_sbrk_r>
   196e6:	68bb      	ldr	r3, [r7, #8]
   196e8:	442b      	add	r3, r5
   196ea:	4298      	cmp	r0, r3
   196ec:	d004      	beq.n	196f8 <_malloc_trim_r+0x48>
   196ee:	4630      	mov	r0, r6
   196f0:	f7fe f91c 	bl	1792c <__malloc_unlock>
   196f4:	2000      	movs	r0, #0
   196f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196f8:	4261      	negs	r1, r4
   196fa:	4630      	mov	r0, r6
   196fc:	f7fe f91c 	bl	17938 <_sbrk_r>
   19700:	3001      	adds	r0, #1
   19702:	d00d      	beq.n	19720 <_malloc_trim_r+0x70>
   19704:	4b10      	ldr	r3, [pc, #64]	; (19748 <_malloc_trim_r+0x98>)
   19706:	68ba      	ldr	r2, [r7, #8]
   19708:	6819      	ldr	r1, [r3, #0]
   1970a:	1b2d      	subs	r5, r5, r4
   1970c:	f045 0501 	orr.w	r5, r5, #1
   19710:	4630      	mov	r0, r6
   19712:	1b09      	subs	r1, r1, r4
   19714:	6055      	str	r5, [r2, #4]
   19716:	6019      	str	r1, [r3, #0]
   19718:	f7fe f908 	bl	1792c <__malloc_unlock>
   1971c:	2001      	movs	r0, #1
   1971e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19720:	2100      	movs	r1, #0
   19722:	4630      	mov	r0, r6
   19724:	f7fe f908 	bl	17938 <_sbrk_r>
   19728:	68ba      	ldr	r2, [r7, #8]
   1972a:	1a83      	subs	r3, r0, r2
   1972c:	2b0f      	cmp	r3, #15
   1972e:	ddde      	ble.n	196ee <_malloc_trim_r+0x3e>
   19730:	4c06      	ldr	r4, [pc, #24]	; (1974c <_malloc_trim_r+0x9c>)
   19732:	4905      	ldr	r1, [pc, #20]	; (19748 <_malloc_trim_r+0x98>)
   19734:	6824      	ldr	r4, [r4, #0]
   19736:	f043 0301 	orr.w	r3, r3, #1
   1973a:	1b00      	subs	r0, r0, r4
   1973c:	6053      	str	r3, [r2, #4]
   1973e:	6008      	str	r0, [r1, #0]
   19740:	e7d5      	b.n	196ee <_malloc_trim_r+0x3e>
   19742:	bf00      	nop
   19744:	20000614 	.word	0x20000614
   19748:	20004f30 	.word	0x20004f30
   1974c:	20000a1c 	.word	0x20000a1c

00019750 <_free_r>:
   19750:	2900      	cmp	r1, #0
   19752:	d044      	beq.n	197de <_free_r+0x8e>
   19754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19758:	460d      	mov	r5, r1
   1975a:	4680      	mov	r8, r0
   1975c:	f7fe f8e0 	bl	17920 <__malloc_lock>
   19760:	f855 7c04 	ldr.w	r7, [r5, #-4]
   19764:	4969      	ldr	r1, [pc, #420]	; (1990c <_free_r+0x1bc>)
   19766:	f027 0301 	bic.w	r3, r7, #1
   1976a:	f1a5 0408 	sub.w	r4, r5, #8
   1976e:	18e2      	adds	r2, r4, r3
   19770:	688e      	ldr	r6, [r1, #8]
   19772:	6850      	ldr	r0, [r2, #4]
   19774:	42b2      	cmp	r2, r6
   19776:	f020 0003 	bic.w	r0, r0, #3
   1977a:	d05e      	beq.n	1983a <_free_r+0xea>
   1977c:	07fe      	lsls	r6, r7, #31
   1977e:	6050      	str	r0, [r2, #4]
   19780:	d40b      	bmi.n	1979a <_free_r+0x4a>
   19782:	f855 7c08 	ldr.w	r7, [r5, #-8]
   19786:	1be4      	subs	r4, r4, r7
   19788:	f101 0e08 	add.w	lr, r1, #8
   1978c:	68a5      	ldr	r5, [r4, #8]
   1978e:	4575      	cmp	r5, lr
   19790:	443b      	add	r3, r7
   19792:	d06d      	beq.n	19870 <_free_r+0x120>
   19794:	68e7      	ldr	r7, [r4, #12]
   19796:	60ef      	str	r7, [r5, #12]
   19798:	60bd      	str	r5, [r7, #8]
   1979a:	1815      	adds	r5, r2, r0
   1979c:	686d      	ldr	r5, [r5, #4]
   1979e:	07ed      	lsls	r5, r5, #31
   197a0:	d53e      	bpl.n	19820 <_free_r+0xd0>
   197a2:	f043 0201 	orr.w	r2, r3, #1
   197a6:	6062      	str	r2, [r4, #4]
   197a8:	50e3      	str	r3, [r4, r3]
   197aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   197ae:	d217      	bcs.n	197e0 <_free_r+0x90>
   197b0:	08db      	lsrs	r3, r3, #3
   197b2:	1c58      	adds	r0, r3, #1
   197b4:	109a      	asrs	r2, r3, #2
   197b6:	684d      	ldr	r5, [r1, #4]
   197b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   197bc:	60a7      	str	r7, [r4, #8]
   197be:	2301      	movs	r3, #1
   197c0:	4093      	lsls	r3, r2
   197c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   197c6:	432b      	orrs	r3, r5
   197c8:	3a08      	subs	r2, #8
   197ca:	60e2      	str	r2, [r4, #12]
   197cc:	604b      	str	r3, [r1, #4]
   197ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   197d2:	60fc      	str	r4, [r7, #12]
   197d4:	4640      	mov	r0, r8
   197d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   197da:	f7fe b8a7 	b.w	1792c <__malloc_unlock>
   197de:	4770      	bx	lr
   197e0:	0a5a      	lsrs	r2, r3, #9
   197e2:	2a04      	cmp	r2, #4
   197e4:	d852      	bhi.n	1988c <_free_r+0x13c>
   197e6:	099a      	lsrs	r2, r3, #6
   197e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   197ec:	00ff      	lsls	r7, r7, #3
   197ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
   197f2:	19c8      	adds	r0, r1, r7
   197f4:	59ca      	ldr	r2, [r1, r7]
   197f6:	3808      	subs	r0, #8
   197f8:	4290      	cmp	r0, r2
   197fa:	d04f      	beq.n	1989c <_free_r+0x14c>
   197fc:	6851      	ldr	r1, [r2, #4]
   197fe:	f021 0103 	bic.w	r1, r1, #3
   19802:	428b      	cmp	r3, r1
   19804:	d232      	bcs.n	1986c <_free_r+0x11c>
   19806:	6892      	ldr	r2, [r2, #8]
   19808:	4290      	cmp	r0, r2
   1980a:	d1f7      	bne.n	197fc <_free_r+0xac>
   1980c:	68c3      	ldr	r3, [r0, #12]
   1980e:	60a0      	str	r0, [r4, #8]
   19810:	60e3      	str	r3, [r4, #12]
   19812:	609c      	str	r4, [r3, #8]
   19814:	60c4      	str	r4, [r0, #12]
   19816:	4640      	mov	r0, r8
   19818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1981c:	f7fe b886 	b.w	1792c <__malloc_unlock>
   19820:	6895      	ldr	r5, [r2, #8]
   19822:	4f3b      	ldr	r7, [pc, #236]	; (19910 <_free_r+0x1c0>)
   19824:	42bd      	cmp	r5, r7
   19826:	4403      	add	r3, r0
   19828:	d040      	beq.n	198ac <_free_r+0x15c>
   1982a:	68d0      	ldr	r0, [r2, #12]
   1982c:	60e8      	str	r0, [r5, #12]
   1982e:	f043 0201 	orr.w	r2, r3, #1
   19832:	6085      	str	r5, [r0, #8]
   19834:	6062      	str	r2, [r4, #4]
   19836:	50e3      	str	r3, [r4, r3]
   19838:	e7b7      	b.n	197aa <_free_r+0x5a>
   1983a:	07ff      	lsls	r7, r7, #31
   1983c:	4403      	add	r3, r0
   1983e:	d407      	bmi.n	19850 <_free_r+0x100>
   19840:	f855 2c08 	ldr.w	r2, [r5, #-8]
   19844:	1aa4      	subs	r4, r4, r2
   19846:	4413      	add	r3, r2
   19848:	68a0      	ldr	r0, [r4, #8]
   1984a:	68e2      	ldr	r2, [r4, #12]
   1984c:	60c2      	str	r2, [r0, #12]
   1984e:	6090      	str	r0, [r2, #8]
   19850:	4a30      	ldr	r2, [pc, #192]	; (19914 <_free_r+0x1c4>)
   19852:	6812      	ldr	r2, [r2, #0]
   19854:	f043 0001 	orr.w	r0, r3, #1
   19858:	4293      	cmp	r3, r2
   1985a:	6060      	str	r0, [r4, #4]
   1985c:	608c      	str	r4, [r1, #8]
   1985e:	d3b9      	bcc.n	197d4 <_free_r+0x84>
   19860:	4b2d      	ldr	r3, [pc, #180]	; (19918 <_free_r+0x1c8>)
   19862:	4640      	mov	r0, r8
   19864:	6819      	ldr	r1, [r3, #0]
   19866:	f7ff ff23 	bl	196b0 <_malloc_trim_r>
   1986a:	e7b3      	b.n	197d4 <_free_r+0x84>
   1986c:	4610      	mov	r0, r2
   1986e:	e7cd      	b.n	1980c <_free_r+0xbc>
   19870:	1811      	adds	r1, r2, r0
   19872:	6849      	ldr	r1, [r1, #4]
   19874:	07c9      	lsls	r1, r1, #31
   19876:	d444      	bmi.n	19902 <_free_r+0x1b2>
   19878:	6891      	ldr	r1, [r2, #8]
   1987a:	68d2      	ldr	r2, [r2, #12]
   1987c:	60ca      	str	r2, [r1, #12]
   1987e:	4403      	add	r3, r0
   19880:	f043 0001 	orr.w	r0, r3, #1
   19884:	6091      	str	r1, [r2, #8]
   19886:	6060      	str	r0, [r4, #4]
   19888:	50e3      	str	r3, [r4, r3]
   1988a:	e7a3      	b.n	197d4 <_free_r+0x84>
   1988c:	2a14      	cmp	r2, #20
   1988e:	d816      	bhi.n	198be <_free_r+0x16e>
   19890:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   19894:	00ff      	lsls	r7, r7, #3
   19896:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1989a:	e7aa      	b.n	197f2 <_free_r+0xa2>
   1989c:	10aa      	asrs	r2, r5, #2
   1989e:	2301      	movs	r3, #1
   198a0:	684d      	ldr	r5, [r1, #4]
   198a2:	4093      	lsls	r3, r2
   198a4:	432b      	orrs	r3, r5
   198a6:	604b      	str	r3, [r1, #4]
   198a8:	4603      	mov	r3, r0
   198aa:	e7b0      	b.n	1980e <_free_r+0xbe>
   198ac:	f043 0201 	orr.w	r2, r3, #1
   198b0:	614c      	str	r4, [r1, #20]
   198b2:	610c      	str	r4, [r1, #16]
   198b4:	60e5      	str	r5, [r4, #12]
   198b6:	60a5      	str	r5, [r4, #8]
   198b8:	6062      	str	r2, [r4, #4]
   198ba:	50e3      	str	r3, [r4, r3]
   198bc:	e78a      	b.n	197d4 <_free_r+0x84>
   198be:	2a54      	cmp	r2, #84	; 0x54
   198c0:	d806      	bhi.n	198d0 <_free_r+0x180>
   198c2:	0b1a      	lsrs	r2, r3, #12
   198c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   198c8:	00ff      	lsls	r7, r7, #3
   198ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   198ce:	e790      	b.n	197f2 <_free_r+0xa2>
   198d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   198d4:	d806      	bhi.n	198e4 <_free_r+0x194>
   198d6:	0bda      	lsrs	r2, r3, #15
   198d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   198dc:	00ff      	lsls	r7, r7, #3
   198de:	f102 0577 	add.w	r5, r2, #119	; 0x77
   198e2:	e786      	b.n	197f2 <_free_r+0xa2>
   198e4:	f240 5054 	movw	r0, #1364	; 0x554
   198e8:	4282      	cmp	r2, r0
   198ea:	d806      	bhi.n	198fa <_free_r+0x1aa>
   198ec:	0c9a      	lsrs	r2, r3, #18
   198ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   198f2:	00ff      	lsls	r7, r7, #3
   198f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   198f8:	e77b      	b.n	197f2 <_free_r+0xa2>
   198fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   198fe:	257e      	movs	r5, #126	; 0x7e
   19900:	e777      	b.n	197f2 <_free_r+0xa2>
   19902:	f043 0101 	orr.w	r1, r3, #1
   19906:	6061      	str	r1, [r4, #4]
   19908:	6013      	str	r3, [r2, #0]
   1990a:	e763      	b.n	197d4 <_free_r+0x84>
   1990c:	20000614 	.word	0x20000614
   19910:	2000061c 	.word	0x2000061c
   19914:	20000a20 	.word	0x20000a20
   19918:	20004f60 	.word	0x20004f60

0001991c <iswspace>:
   1991c:	28ff      	cmp	r0, #255	; 0xff
   1991e:	d901      	bls.n	19924 <iswspace+0x8>
   19920:	2000      	movs	r0, #0
   19922:	4770      	bx	lr
   19924:	b510      	push	{r4, lr}
   19926:	4604      	mov	r4, r0
   19928:	f000 f818 	bl	1995c <__locale_ctype_ptr>
   1992c:	4420      	add	r0, r4
   1992e:	7840      	ldrb	r0, [r0, #1]
   19930:	f000 0008 	and.w	r0, r0, #8
   19934:	bd10      	pop	{r4, pc}
   19936:	bf00      	nop

00019938 <__locale_mb_cur_max>:
   19938:	4b04      	ldr	r3, [pc, #16]	; (1994c <__locale_mb_cur_max+0x14>)
   1993a:	4a05      	ldr	r2, [pc, #20]	; (19950 <__locale_mb_cur_max+0x18>)
   1993c:	681b      	ldr	r3, [r3, #0]
   1993e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19940:	2b00      	cmp	r3, #0
   19942:	bf08      	it	eq
   19944:	4613      	moveq	r3, r2
   19946:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1994a:	4770      	bx	lr
   1994c:	2000019c 	.word	0x2000019c
   19950:	20000a28 	.word	0x20000a28

00019954 <__locale_ctype_ptr_l>:
   19954:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   19958:	4770      	bx	lr
   1995a:	bf00      	nop

0001995c <__locale_ctype_ptr>:
   1995c:	4b04      	ldr	r3, [pc, #16]	; (19970 <__locale_ctype_ptr+0x14>)
   1995e:	4a05      	ldr	r2, [pc, #20]	; (19974 <__locale_ctype_ptr+0x18>)
   19960:	681b      	ldr	r3, [r3, #0]
   19962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19964:	2b00      	cmp	r3, #0
   19966:	bf08      	it	eq
   19968:	4613      	moveq	r3, r2
   1996a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1996e:	4770      	bx	lr
   19970:	2000019c 	.word	0x2000019c
   19974:	20000a28 	.word	0x20000a28

00019978 <_mbrtowc_r>:
   19978:	b5f0      	push	{r4, r5, r6, r7, lr}
   1997a:	b083      	sub	sp, #12
   1997c:	4607      	mov	r7, r0
   1997e:	9d08      	ldr	r5, [sp, #32]
   19980:	b192      	cbz	r2, 199a8 <_mbrtowc_r+0x30>
   19982:	4c11      	ldr	r4, [pc, #68]	; (199c8 <_mbrtowc_r+0x50>)
   19984:	4e11      	ldr	r6, [pc, #68]	; (199cc <_mbrtowc_r+0x54>)
   19986:	6824      	ldr	r4, [r4, #0]
   19988:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1998a:	9500      	str	r5, [sp, #0]
   1998c:	2c00      	cmp	r4, #0
   1998e:	bf08      	it	eq
   19990:	4634      	moveq	r4, r6
   19992:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   19996:	47a0      	blx	r4
   19998:	1c43      	adds	r3, r0, #1
   1999a:	d103      	bne.n	199a4 <_mbrtowc_r+0x2c>
   1999c:	2200      	movs	r2, #0
   1999e:	238a      	movs	r3, #138	; 0x8a
   199a0:	602a      	str	r2, [r5, #0]
   199a2:	603b      	str	r3, [r7, #0]
   199a4:	b003      	add	sp, #12
   199a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   199a8:	4b07      	ldr	r3, [pc, #28]	; (199c8 <_mbrtowc_r+0x50>)
   199aa:	4908      	ldr	r1, [pc, #32]	; (199cc <_mbrtowc_r+0x54>)
   199ac:	681b      	ldr	r3, [r3, #0]
   199ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   199b0:	9500      	str	r5, [sp, #0]
   199b2:	2b00      	cmp	r3, #0
   199b4:	bf08      	it	eq
   199b6:	460b      	moveq	r3, r1
   199b8:	4614      	mov	r4, r2
   199ba:	4621      	mov	r1, r4
   199bc:	4a04      	ldr	r2, [pc, #16]	; (199d0 <_mbrtowc_r+0x58>)
   199be:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   199c2:	2301      	movs	r3, #1
   199c4:	47a0      	blx	r4
   199c6:	e7e7      	b.n	19998 <_mbrtowc_r+0x20>
   199c8:	2000019c 	.word	0x2000019c
   199cc:	20000a28 	.word	0x20000a28
   199d0:	0001c16c 	.word	0x0001c16c

000199d4 <__ascii_mbtowc>:
   199d4:	b082      	sub	sp, #8
   199d6:	b149      	cbz	r1, 199ec <__ascii_mbtowc+0x18>
   199d8:	b15a      	cbz	r2, 199f2 <__ascii_mbtowc+0x1e>
   199da:	b16b      	cbz	r3, 199f8 <__ascii_mbtowc+0x24>
   199dc:	7813      	ldrb	r3, [r2, #0]
   199de:	600b      	str	r3, [r1, #0]
   199e0:	7812      	ldrb	r2, [r2, #0]
   199e2:	1c10      	adds	r0, r2, #0
   199e4:	bf18      	it	ne
   199e6:	2001      	movne	r0, #1
   199e8:	b002      	add	sp, #8
   199ea:	4770      	bx	lr
   199ec:	a901      	add	r1, sp, #4
   199ee:	2a00      	cmp	r2, #0
   199f0:	d1f3      	bne.n	199da <__ascii_mbtowc+0x6>
   199f2:	4610      	mov	r0, r2
   199f4:	b002      	add	sp, #8
   199f6:	4770      	bx	lr
   199f8:	f06f 0001 	mvn.w	r0, #1
   199fc:	e7f4      	b.n	199e8 <__ascii_mbtowc+0x14>
   199fe:	bf00      	nop

00019a00 <memmove>:
   19a00:	4288      	cmp	r0, r1
   19a02:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a04:	d90d      	bls.n	19a22 <memmove+0x22>
   19a06:	188b      	adds	r3, r1, r2
   19a08:	4298      	cmp	r0, r3
   19a0a:	d20a      	bcs.n	19a22 <memmove+0x22>
   19a0c:	1884      	adds	r4, r0, r2
   19a0e:	2a00      	cmp	r2, #0
   19a10:	d051      	beq.n	19ab6 <memmove+0xb6>
   19a12:	4622      	mov	r2, r4
   19a14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   19a18:	f802 4d01 	strb.w	r4, [r2, #-1]!
   19a1c:	4299      	cmp	r1, r3
   19a1e:	d1f9      	bne.n	19a14 <memmove+0x14>
   19a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a22:	2a0f      	cmp	r2, #15
   19a24:	d948      	bls.n	19ab8 <memmove+0xb8>
   19a26:	ea41 0300 	orr.w	r3, r1, r0
   19a2a:	079b      	lsls	r3, r3, #30
   19a2c:	d146      	bne.n	19abc <memmove+0xbc>
   19a2e:	f100 0410 	add.w	r4, r0, #16
   19a32:	f101 0310 	add.w	r3, r1, #16
   19a36:	4615      	mov	r5, r2
   19a38:	f853 6c10 	ldr.w	r6, [r3, #-16]
   19a3c:	f844 6c10 	str.w	r6, [r4, #-16]
   19a40:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   19a44:	f844 6c0c 	str.w	r6, [r4, #-12]
   19a48:	f853 6c08 	ldr.w	r6, [r3, #-8]
   19a4c:	f844 6c08 	str.w	r6, [r4, #-8]
   19a50:	3d10      	subs	r5, #16
   19a52:	f853 6c04 	ldr.w	r6, [r3, #-4]
   19a56:	f844 6c04 	str.w	r6, [r4, #-4]
   19a5a:	2d0f      	cmp	r5, #15
   19a5c:	f103 0310 	add.w	r3, r3, #16
   19a60:	f104 0410 	add.w	r4, r4, #16
   19a64:	d8e8      	bhi.n	19a38 <memmove+0x38>
   19a66:	f1a2 0310 	sub.w	r3, r2, #16
   19a6a:	f023 030f 	bic.w	r3, r3, #15
   19a6e:	f002 0e0f 	and.w	lr, r2, #15
   19a72:	3310      	adds	r3, #16
   19a74:	f1be 0f03 	cmp.w	lr, #3
   19a78:	4419      	add	r1, r3
   19a7a:	4403      	add	r3, r0
   19a7c:	d921      	bls.n	19ac2 <memmove+0xc2>
   19a7e:	1f1e      	subs	r6, r3, #4
   19a80:	460d      	mov	r5, r1
   19a82:	4674      	mov	r4, lr
   19a84:	3c04      	subs	r4, #4
   19a86:	f855 7b04 	ldr.w	r7, [r5], #4
   19a8a:	f846 7f04 	str.w	r7, [r6, #4]!
   19a8e:	2c03      	cmp	r4, #3
   19a90:	d8f8      	bhi.n	19a84 <memmove+0x84>
   19a92:	f1ae 0404 	sub.w	r4, lr, #4
   19a96:	f024 0403 	bic.w	r4, r4, #3
   19a9a:	3404      	adds	r4, #4
   19a9c:	4421      	add	r1, r4
   19a9e:	4423      	add	r3, r4
   19aa0:	f002 0203 	and.w	r2, r2, #3
   19aa4:	b162      	cbz	r2, 19ac0 <memmove+0xc0>
   19aa6:	3b01      	subs	r3, #1
   19aa8:	440a      	add	r2, r1
   19aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   19aae:	f803 4f01 	strb.w	r4, [r3, #1]!
   19ab2:	428a      	cmp	r2, r1
   19ab4:	d1f9      	bne.n	19aaa <memmove+0xaa>
   19ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ab8:	4603      	mov	r3, r0
   19aba:	e7f3      	b.n	19aa4 <memmove+0xa4>
   19abc:	4603      	mov	r3, r0
   19abe:	e7f2      	b.n	19aa6 <memmove+0xa6>
   19ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ac2:	4672      	mov	r2, lr
   19ac4:	e7ee      	b.n	19aa4 <memmove+0xa4>
   19ac6:	bf00      	nop

00019ac8 <_realloc_r>:
   19ac8:	2900      	cmp	r1, #0
   19aca:	f000 8095 	beq.w	19bf8 <_realloc_r+0x130>
   19ace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ad2:	460d      	mov	r5, r1
   19ad4:	4616      	mov	r6, r2
   19ad6:	b083      	sub	sp, #12
   19ad8:	4680      	mov	r8, r0
   19ada:	f106 070b 	add.w	r7, r6, #11
   19ade:	f7fd ff1f 	bl	17920 <__malloc_lock>
   19ae2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   19ae6:	2f16      	cmp	r7, #22
   19ae8:	f02e 0403 	bic.w	r4, lr, #3
   19aec:	f1a5 0908 	sub.w	r9, r5, #8
   19af0:	d83c      	bhi.n	19b6c <_realloc_r+0xa4>
   19af2:	2210      	movs	r2, #16
   19af4:	4617      	mov	r7, r2
   19af6:	42be      	cmp	r6, r7
   19af8:	d83d      	bhi.n	19b76 <_realloc_r+0xae>
   19afa:	4294      	cmp	r4, r2
   19afc:	da43      	bge.n	19b86 <_realloc_r+0xbe>
   19afe:	4bc4      	ldr	r3, [pc, #784]	; (19e10 <_realloc_r+0x348>)
   19b00:	6899      	ldr	r1, [r3, #8]
   19b02:	eb09 0004 	add.w	r0, r9, r4
   19b06:	4288      	cmp	r0, r1
   19b08:	f000 80b4 	beq.w	19c74 <_realloc_r+0x1ac>
   19b0c:	6843      	ldr	r3, [r0, #4]
   19b0e:	f023 0101 	bic.w	r1, r3, #1
   19b12:	4401      	add	r1, r0
   19b14:	6849      	ldr	r1, [r1, #4]
   19b16:	07c9      	lsls	r1, r1, #31
   19b18:	d54c      	bpl.n	19bb4 <_realloc_r+0xec>
   19b1a:	f01e 0f01 	tst.w	lr, #1
   19b1e:	f000 809b 	beq.w	19c58 <_realloc_r+0x190>
   19b22:	4631      	mov	r1, r6
   19b24:	4640      	mov	r0, r8
   19b26:	f7fd fbf9 	bl	1731c <_malloc_r>
   19b2a:	4606      	mov	r6, r0
   19b2c:	2800      	cmp	r0, #0
   19b2e:	d03a      	beq.n	19ba6 <_realloc_r+0xde>
   19b30:	f855 3c04 	ldr.w	r3, [r5, #-4]
   19b34:	f023 0301 	bic.w	r3, r3, #1
   19b38:	444b      	add	r3, r9
   19b3a:	f1a0 0208 	sub.w	r2, r0, #8
   19b3e:	429a      	cmp	r2, r3
   19b40:	f000 8121 	beq.w	19d86 <_realloc_r+0x2be>
   19b44:	1f22      	subs	r2, r4, #4
   19b46:	2a24      	cmp	r2, #36	; 0x24
   19b48:	f200 8107 	bhi.w	19d5a <_realloc_r+0x292>
   19b4c:	2a13      	cmp	r2, #19
   19b4e:	f200 80db 	bhi.w	19d08 <_realloc_r+0x240>
   19b52:	4603      	mov	r3, r0
   19b54:	462a      	mov	r2, r5
   19b56:	6811      	ldr	r1, [r2, #0]
   19b58:	6019      	str	r1, [r3, #0]
   19b5a:	6851      	ldr	r1, [r2, #4]
   19b5c:	6059      	str	r1, [r3, #4]
   19b5e:	6892      	ldr	r2, [r2, #8]
   19b60:	609a      	str	r2, [r3, #8]
   19b62:	4629      	mov	r1, r5
   19b64:	4640      	mov	r0, r8
   19b66:	f7ff fdf3 	bl	19750 <_free_r>
   19b6a:	e01c      	b.n	19ba6 <_realloc_r+0xde>
   19b6c:	f027 0707 	bic.w	r7, r7, #7
   19b70:	2f00      	cmp	r7, #0
   19b72:	463a      	mov	r2, r7
   19b74:	dabf      	bge.n	19af6 <_realloc_r+0x2e>
   19b76:	2600      	movs	r6, #0
   19b78:	230c      	movs	r3, #12
   19b7a:	4630      	mov	r0, r6
   19b7c:	f8c8 3000 	str.w	r3, [r8]
   19b80:	b003      	add	sp, #12
   19b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b86:	462e      	mov	r6, r5
   19b88:	1be3      	subs	r3, r4, r7
   19b8a:	2b0f      	cmp	r3, #15
   19b8c:	d81e      	bhi.n	19bcc <_realloc_r+0x104>
   19b8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19b92:	f003 0301 	and.w	r3, r3, #1
   19b96:	4323      	orrs	r3, r4
   19b98:	444c      	add	r4, r9
   19b9a:	f8c9 3004 	str.w	r3, [r9, #4]
   19b9e:	6863      	ldr	r3, [r4, #4]
   19ba0:	f043 0301 	orr.w	r3, r3, #1
   19ba4:	6063      	str	r3, [r4, #4]
   19ba6:	4640      	mov	r0, r8
   19ba8:	f7fd fec0 	bl	1792c <__malloc_unlock>
   19bac:	4630      	mov	r0, r6
   19bae:	b003      	add	sp, #12
   19bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bb4:	f023 0303 	bic.w	r3, r3, #3
   19bb8:	18e1      	adds	r1, r4, r3
   19bba:	4291      	cmp	r1, r2
   19bbc:	db1f      	blt.n	19bfe <_realloc_r+0x136>
   19bbe:	68c3      	ldr	r3, [r0, #12]
   19bc0:	6882      	ldr	r2, [r0, #8]
   19bc2:	462e      	mov	r6, r5
   19bc4:	60d3      	str	r3, [r2, #12]
   19bc6:	460c      	mov	r4, r1
   19bc8:	609a      	str	r2, [r3, #8]
   19bca:	e7dd      	b.n	19b88 <_realloc_r+0xc0>
   19bcc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   19bd0:	eb09 0107 	add.w	r1, r9, r7
   19bd4:	f002 0201 	and.w	r2, r2, #1
   19bd8:	444c      	add	r4, r9
   19bda:	f043 0301 	orr.w	r3, r3, #1
   19bde:	4317      	orrs	r7, r2
   19be0:	f8c9 7004 	str.w	r7, [r9, #4]
   19be4:	604b      	str	r3, [r1, #4]
   19be6:	6863      	ldr	r3, [r4, #4]
   19be8:	f043 0301 	orr.w	r3, r3, #1
   19bec:	3108      	adds	r1, #8
   19bee:	6063      	str	r3, [r4, #4]
   19bf0:	4640      	mov	r0, r8
   19bf2:	f7ff fdad 	bl	19750 <_free_r>
   19bf6:	e7d6      	b.n	19ba6 <_realloc_r+0xde>
   19bf8:	4611      	mov	r1, r2
   19bfa:	f7fd bb8f 	b.w	1731c <_malloc_r>
   19bfe:	f01e 0f01 	tst.w	lr, #1
   19c02:	d18e      	bne.n	19b22 <_realloc_r+0x5a>
   19c04:	f855 1c08 	ldr.w	r1, [r5, #-8]
   19c08:	eba9 0a01 	sub.w	sl, r9, r1
   19c0c:	f8da 1004 	ldr.w	r1, [sl, #4]
   19c10:	f021 0103 	bic.w	r1, r1, #3
   19c14:	440b      	add	r3, r1
   19c16:	4423      	add	r3, r4
   19c18:	4293      	cmp	r3, r2
   19c1a:	db25      	blt.n	19c68 <_realloc_r+0x1a0>
   19c1c:	68c2      	ldr	r2, [r0, #12]
   19c1e:	6881      	ldr	r1, [r0, #8]
   19c20:	4656      	mov	r6, sl
   19c22:	60ca      	str	r2, [r1, #12]
   19c24:	6091      	str	r1, [r2, #8]
   19c26:	f8da 100c 	ldr.w	r1, [sl, #12]
   19c2a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   19c2e:	1f22      	subs	r2, r4, #4
   19c30:	2a24      	cmp	r2, #36	; 0x24
   19c32:	60c1      	str	r1, [r0, #12]
   19c34:	6088      	str	r0, [r1, #8]
   19c36:	f200 8094 	bhi.w	19d62 <_realloc_r+0x29a>
   19c3a:	2a13      	cmp	r2, #19
   19c3c:	d96f      	bls.n	19d1e <_realloc_r+0x256>
   19c3e:	6829      	ldr	r1, [r5, #0]
   19c40:	f8ca 1008 	str.w	r1, [sl, #8]
   19c44:	6869      	ldr	r1, [r5, #4]
   19c46:	f8ca 100c 	str.w	r1, [sl, #12]
   19c4a:	2a1b      	cmp	r2, #27
   19c4c:	f200 80a2 	bhi.w	19d94 <_realloc_r+0x2cc>
   19c50:	3508      	adds	r5, #8
   19c52:	f10a 0210 	add.w	r2, sl, #16
   19c56:	e063      	b.n	19d20 <_realloc_r+0x258>
   19c58:	f855 3c08 	ldr.w	r3, [r5, #-8]
   19c5c:	eba9 0a03 	sub.w	sl, r9, r3
   19c60:	f8da 1004 	ldr.w	r1, [sl, #4]
   19c64:	f021 0103 	bic.w	r1, r1, #3
   19c68:	1863      	adds	r3, r4, r1
   19c6a:	4293      	cmp	r3, r2
   19c6c:	f6ff af59 	blt.w	19b22 <_realloc_r+0x5a>
   19c70:	4656      	mov	r6, sl
   19c72:	e7d8      	b.n	19c26 <_realloc_r+0x15e>
   19c74:	6841      	ldr	r1, [r0, #4]
   19c76:	f021 0b03 	bic.w	fp, r1, #3
   19c7a:	44a3      	add	fp, r4
   19c7c:	f107 0010 	add.w	r0, r7, #16
   19c80:	4583      	cmp	fp, r0
   19c82:	da56      	bge.n	19d32 <_realloc_r+0x26a>
   19c84:	f01e 0f01 	tst.w	lr, #1
   19c88:	f47f af4b 	bne.w	19b22 <_realloc_r+0x5a>
   19c8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   19c90:	eba9 0a01 	sub.w	sl, r9, r1
   19c94:	f8da 1004 	ldr.w	r1, [sl, #4]
   19c98:	f021 0103 	bic.w	r1, r1, #3
   19c9c:	448b      	add	fp, r1
   19c9e:	4558      	cmp	r0, fp
   19ca0:	dce2      	bgt.n	19c68 <_realloc_r+0x1a0>
   19ca2:	4656      	mov	r6, sl
   19ca4:	f8da 100c 	ldr.w	r1, [sl, #12]
   19ca8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   19cac:	1f22      	subs	r2, r4, #4
   19cae:	2a24      	cmp	r2, #36	; 0x24
   19cb0:	60c1      	str	r1, [r0, #12]
   19cb2:	6088      	str	r0, [r1, #8]
   19cb4:	f200 808f 	bhi.w	19dd6 <_realloc_r+0x30e>
   19cb8:	2a13      	cmp	r2, #19
   19cba:	f240 808a 	bls.w	19dd2 <_realloc_r+0x30a>
   19cbe:	6829      	ldr	r1, [r5, #0]
   19cc0:	f8ca 1008 	str.w	r1, [sl, #8]
   19cc4:	6869      	ldr	r1, [r5, #4]
   19cc6:	f8ca 100c 	str.w	r1, [sl, #12]
   19cca:	2a1b      	cmp	r2, #27
   19ccc:	f200 808a 	bhi.w	19de4 <_realloc_r+0x31c>
   19cd0:	3508      	adds	r5, #8
   19cd2:	f10a 0210 	add.w	r2, sl, #16
   19cd6:	6829      	ldr	r1, [r5, #0]
   19cd8:	6011      	str	r1, [r2, #0]
   19cda:	6869      	ldr	r1, [r5, #4]
   19cdc:	6051      	str	r1, [r2, #4]
   19cde:	68a9      	ldr	r1, [r5, #8]
   19ce0:	6091      	str	r1, [r2, #8]
   19ce2:	eb0a 0107 	add.w	r1, sl, r7
   19ce6:	ebab 0207 	sub.w	r2, fp, r7
   19cea:	f042 0201 	orr.w	r2, r2, #1
   19cee:	6099      	str	r1, [r3, #8]
   19cf0:	604a      	str	r2, [r1, #4]
   19cf2:	f8da 3004 	ldr.w	r3, [sl, #4]
   19cf6:	f003 0301 	and.w	r3, r3, #1
   19cfa:	431f      	orrs	r7, r3
   19cfc:	4640      	mov	r0, r8
   19cfe:	f8ca 7004 	str.w	r7, [sl, #4]
   19d02:	f7fd fe13 	bl	1792c <__malloc_unlock>
   19d06:	e751      	b.n	19bac <_realloc_r+0xe4>
   19d08:	682b      	ldr	r3, [r5, #0]
   19d0a:	6003      	str	r3, [r0, #0]
   19d0c:	686b      	ldr	r3, [r5, #4]
   19d0e:	6043      	str	r3, [r0, #4]
   19d10:	2a1b      	cmp	r2, #27
   19d12:	d82d      	bhi.n	19d70 <_realloc_r+0x2a8>
   19d14:	f100 0308 	add.w	r3, r0, #8
   19d18:	f105 0208 	add.w	r2, r5, #8
   19d1c:	e71b      	b.n	19b56 <_realloc_r+0x8e>
   19d1e:	4632      	mov	r2, r6
   19d20:	6829      	ldr	r1, [r5, #0]
   19d22:	6011      	str	r1, [r2, #0]
   19d24:	6869      	ldr	r1, [r5, #4]
   19d26:	6051      	str	r1, [r2, #4]
   19d28:	68a9      	ldr	r1, [r5, #8]
   19d2a:	6091      	str	r1, [r2, #8]
   19d2c:	461c      	mov	r4, r3
   19d2e:	46d1      	mov	r9, sl
   19d30:	e72a      	b.n	19b88 <_realloc_r+0xc0>
   19d32:	eb09 0107 	add.w	r1, r9, r7
   19d36:	ebab 0b07 	sub.w	fp, fp, r7
   19d3a:	f04b 0201 	orr.w	r2, fp, #1
   19d3e:	6099      	str	r1, [r3, #8]
   19d40:	604a      	str	r2, [r1, #4]
   19d42:	f855 3c04 	ldr.w	r3, [r5, #-4]
   19d46:	f003 0301 	and.w	r3, r3, #1
   19d4a:	431f      	orrs	r7, r3
   19d4c:	4640      	mov	r0, r8
   19d4e:	f845 7c04 	str.w	r7, [r5, #-4]
   19d52:	f7fd fdeb 	bl	1792c <__malloc_unlock>
   19d56:	462e      	mov	r6, r5
   19d58:	e728      	b.n	19bac <_realloc_r+0xe4>
   19d5a:	4629      	mov	r1, r5
   19d5c:	f7ff fe50 	bl	19a00 <memmove>
   19d60:	e6ff      	b.n	19b62 <_realloc_r+0x9a>
   19d62:	4629      	mov	r1, r5
   19d64:	4630      	mov	r0, r6
   19d66:	461c      	mov	r4, r3
   19d68:	46d1      	mov	r9, sl
   19d6a:	f7ff fe49 	bl	19a00 <memmove>
   19d6e:	e70b      	b.n	19b88 <_realloc_r+0xc0>
   19d70:	68ab      	ldr	r3, [r5, #8]
   19d72:	6083      	str	r3, [r0, #8]
   19d74:	68eb      	ldr	r3, [r5, #12]
   19d76:	60c3      	str	r3, [r0, #12]
   19d78:	2a24      	cmp	r2, #36	; 0x24
   19d7a:	d017      	beq.n	19dac <_realloc_r+0x2e4>
   19d7c:	f100 0310 	add.w	r3, r0, #16
   19d80:	f105 0210 	add.w	r2, r5, #16
   19d84:	e6e7      	b.n	19b56 <_realloc_r+0x8e>
   19d86:	f850 3c04 	ldr.w	r3, [r0, #-4]
   19d8a:	f023 0303 	bic.w	r3, r3, #3
   19d8e:	441c      	add	r4, r3
   19d90:	462e      	mov	r6, r5
   19d92:	e6f9      	b.n	19b88 <_realloc_r+0xc0>
   19d94:	68a9      	ldr	r1, [r5, #8]
   19d96:	f8ca 1010 	str.w	r1, [sl, #16]
   19d9a:	68e9      	ldr	r1, [r5, #12]
   19d9c:	f8ca 1014 	str.w	r1, [sl, #20]
   19da0:	2a24      	cmp	r2, #36	; 0x24
   19da2:	d00c      	beq.n	19dbe <_realloc_r+0x2f6>
   19da4:	3510      	adds	r5, #16
   19da6:	f10a 0218 	add.w	r2, sl, #24
   19daa:	e7b9      	b.n	19d20 <_realloc_r+0x258>
   19dac:	692b      	ldr	r3, [r5, #16]
   19dae:	6103      	str	r3, [r0, #16]
   19db0:	696b      	ldr	r3, [r5, #20]
   19db2:	6143      	str	r3, [r0, #20]
   19db4:	f105 0218 	add.w	r2, r5, #24
   19db8:	f100 0318 	add.w	r3, r0, #24
   19dbc:	e6cb      	b.n	19b56 <_realloc_r+0x8e>
   19dbe:	692a      	ldr	r2, [r5, #16]
   19dc0:	f8ca 2018 	str.w	r2, [sl, #24]
   19dc4:	696a      	ldr	r2, [r5, #20]
   19dc6:	f8ca 201c 	str.w	r2, [sl, #28]
   19dca:	3518      	adds	r5, #24
   19dcc:	f10a 0220 	add.w	r2, sl, #32
   19dd0:	e7a6      	b.n	19d20 <_realloc_r+0x258>
   19dd2:	4632      	mov	r2, r6
   19dd4:	e77f      	b.n	19cd6 <_realloc_r+0x20e>
   19dd6:	4629      	mov	r1, r5
   19dd8:	4630      	mov	r0, r6
   19dda:	9301      	str	r3, [sp, #4]
   19ddc:	f7ff fe10 	bl	19a00 <memmove>
   19de0:	9b01      	ldr	r3, [sp, #4]
   19de2:	e77e      	b.n	19ce2 <_realloc_r+0x21a>
   19de4:	68a9      	ldr	r1, [r5, #8]
   19de6:	f8ca 1010 	str.w	r1, [sl, #16]
   19dea:	68e9      	ldr	r1, [r5, #12]
   19dec:	f8ca 1014 	str.w	r1, [sl, #20]
   19df0:	2a24      	cmp	r2, #36	; 0x24
   19df2:	d003      	beq.n	19dfc <_realloc_r+0x334>
   19df4:	3510      	adds	r5, #16
   19df6:	f10a 0218 	add.w	r2, sl, #24
   19dfa:	e76c      	b.n	19cd6 <_realloc_r+0x20e>
   19dfc:	692a      	ldr	r2, [r5, #16]
   19dfe:	f8ca 2018 	str.w	r2, [sl, #24]
   19e02:	696a      	ldr	r2, [r5, #20]
   19e04:	f8ca 201c 	str.w	r2, [sl, #28]
   19e08:	3518      	adds	r5, #24
   19e0a:	f10a 0220 	add.w	r2, sl, #32
   19e0e:	e762      	b.n	19cd6 <_realloc_r+0x20e>
   19e10:	20000614 	.word	0x20000614

00019e14 <__sccl>:
   19e14:	b470      	push	{r4, r5, r6}
   19e16:	780c      	ldrb	r4, [r1, #0]
   19e18:	2c5e      	cmp	r4, #94	; 0x5e
   19e1a:	d02f      	beq.n	19e7c <__sccl+0x68>
   19e1c:	2200      	movs	r2, #0
   19e1e:	1c4d      	adds	r5, r1, #1
   19e20:	4616      	mov	r6, r2
   19e22:	1e43      	subs	r3, r0, #1
   19e24:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   19e28:	f803 2f01 	strb.w	r2, [r3, #1]!
   19e2c:	428b      	cmp	r3, r1
   19e2e:	d1fb      	bne.n	19e28 <__sccl+0x14>
   19e30:	b174      	cbz	r4, 19e50 <__sccl+0x3c>
   19e32:	f086 0201 	eor.w	r2, r6, #1
   19e36:	5502      	strb	r2, [r0, r4]
   19e38:	1c6e      	adds	r6, r5, #1
   19e3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   19e3e:	2b2d      	cmp	r3, #45	; 0x2d
   19e40:	4631      	mov	r1, r6
   19e42:	d00d      	beq.n	19e60 <__sccl+0x4c>
   19e44:	2b5d      	cmp	r3, #93	; 0x5d
   19e46:	d004      	beq.n	19e52 <__sccl+0x3e>
   19e48:	b133      	cbz	r3, 19e58 <__sccl+0x44>
   19e4a:	461c      	mov	r4, r3
   19e4c:	4635      	mov	r5, r6
   19e4e:	e7f2      	b.n	19e36 <__sccl+0x22>
   19e50:	1e69      	subs	r1, r5, #1
   19e52:	4608      	mov	r0, r1
   19e54:	bc70      	pop	{r4, r5, r6}
   19e56:	4770      	bx	lr
   19e58:	4629      	mov	r1, r5
   19e5a:	4608      	mov	r0, r1
   19e5c:	bc70      	pop	{r4, r5, r6}
   19e5e:	4770      	bx	lr
   19e60:	7869      	ldrb	r1, [r5, #1]
   19e62:	295d      	cmp	r1, #93	; 0x5d
   19e64:	d0f1      	beq.n	19e4a <__sccl+0x36>
   19e66:	428c      	cmp	r4, r1
   19e68:	dcef      	bgt.n	19e4a <__sccl+0x36>
   19e6a:	3502      	adds	r5, #2
   19e6c:	1903      	adds	r3, r0, r4
   19e6e:	3401      	adds	r4, #1
   19e70:	42a1      	cmp	r1, r4
   19e72:	f803 2f01 	strb.w	r2, [r3, #1]!
   19e76:	dcfa      	bgt.n	19e6e <__sccl+0x5a>
   19e78:	3602      	adds	r6, #2
   19e7a:	e7de      	b.n	19e3a <__sccl+0x26>
   19e7c:	2201      	movs	r2, #1
   19e7e:	784c      	ldrb	r4, [r1, #1]
   19e80:	4616      	mov	r6, r2
   19e82:	1c8d      	adds	r5, r1, #2
   19e84:	e7cd      	b.n	19e22 <__sccl+0xe>
   19e86:	bf00      	nop

00019e88 <_strtol_l.isra.0>:
   19e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e8c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   19e90:	460f      	mov	r7, r1
   19e92:	4680      	mov	r8, r0
   19e94:	4616      	mov	r6, r2
   19e96:	461d      	mov	r5, r3
   19e98:	468a      	mov	sl, r1
   19e9a:	e000      	b.n	19e9e <_strtol_l.isra.0+0x16>
   19e9c:	46a2      	mov	sl, r4
   19e9e:	4654      	mov	r4, sl
   19ea0:	4648      	mov	r0, r9
   19ea2:	f814 bb01 	ldrb.w	fp, [r4], #1
   19ea6:	f7ff fd55 	bl	19954 <__locale_ctype_ptr_l>
   19eaa:	4458      	add	r0, fp
   19eac:	7842      	ldrb	r2, [r0, #1]
   19eae:	f012 0208 	ands.w	r2, r2, #8
   19eb2:	d1f3      	bne.n	19e9c <_strtol_l.isra.0+0x14>
   19eb4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   19eb8:	d04f      	beq.n	19f5a <_strtol_l.isra.0+0xd2>
   19eba:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   19ebe:	bf04      	itt	eq
   19ec0:	f894 b000 	ldrbeq.w	fp, [r4]
   19ec4:	f10a 0402 	addeq.w	r4, sl, #2
   19ec8:	b11d      	cbz	r5, 19ed2 <_strtol_l.isra.0+0x4a>
   19eca:	2d10      	cmp	r5, #16
   19ecc:	d056      	beq.n	19f7c <_strtol_l.isra.0+0xf4>
   19ece:	46ac      	mov	ip, r5
   19ed0:	e004      	b.n	19edc <_strtol_l.isra.0+0x54>
   19ed2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   19ed6:	d060      	beq.n	19f9a <_strtol_l.isra.0+0x112>
   19ed8:	250a      	movs	r5, #10
   19eda:	46ac      	mov	ip, r5
   19edc:	2a00      	cmp	r2, #0
   19ede:	bf0c      	ite	eq
   19ee0:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   19ee4:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   19ee8:	2100      	movs	r1, #0
   19eea:	fbb9 fefc 	udiv	lr, r9, ip
   19eee:	4608      	mov	r0, r1
   19ef0:	fb0c 9a1e 	mls	sl, ip, lr, r9
   19ef4:	e005      	b.n	19f02 <_strtol_l.isra.0+0x7a>
   19ef6:	d029      	beq.n	19f4c <_strtol_l.isra.0+0xc4>
   19ef8:	fb0c 3000 	mla	r0, ip, r0, r3
   19efc:	2101      	movs	r1, #1
   19efe:	f814 bb01 	ldrb.w	fp, [r4], #1
   19f02:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   19f06:	2b09      	cmp	r3, #9
   19f08:	d905      	bls.n	19f16 <_strtol_l.isra.0+0x8e>
   19f0a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   19f0e:	2b19      	cmp	r3, #25
   19f10:	d80b      	bhi.n	19f2a <_strtol_l.isra.0+0xa2>
   19f12:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   19f16:	429d      	cmp	r5, r3
   19f18:	dd0f      	ble.n	19f3a <_strtol_l.isra.0+0xb2>
   19f1a:	f1b1 3fff 	cmp.w	r1, #4294967295
   19f1e:	d0ee      	beq.n	19efe <_strtol_l.isra.0+0x76>
   19f20:	4586      	cmp	lr, r0
   19f22:	d2e8      	bcs.n	19ef6 <_strtol_l.isra.0+0x6e>
   19f24:	f04f 31ff 	mov.w	r1, #4294967295
   19f28:	e7e9      	b.n	19efe <_strtol_l.isra.0+0x76>
   19f2a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   19f2e:	2b19      	cmp	r3, #25
   19f30:	d803      	bhi.n	19f3a <_strtol_l.isra.0+0xb2>
   19f32:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   19f36:	429d      	cmp	r5, r3
   19f38:	dcef      	bgt.n	19f1a <_strtol_l.isra.0+0x92>
   19f3a:	1c4b      	adds	r3, r1, #1
   19f3c:	d013      	beq.n	19f66 <_strtol_l.isra.0+0xde>
   19f3e:	b102      	cbz	r2, 19f42 <_strtol_l.isra.0+0xba>
   19f40:	4240      	negs	r0, r0
   19f42:	b146      	cbz	r6, 19f56 <_strtol_l.isra.0+0xce>
   19f44:	b9c1      	cbnz	r1, 19f78 <_strtol_l.isra.0+0xf0>
   19f46:	6037      	str	r7, [r6, #0]
   19f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f4c:	459a      	cmp	sl, r3
   19f4e:	dad3      	bge.n	19ef8 <_strtol_l.isra.0+0x70>
   19f50:	f04f 31ff 	mov.w	r1, #4294967295
   19f54:	e7d3      	b.n	19efe <_strtol_l.isra.0+0x76>
   19f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f5a:	f894 b000 	ldrb.w	fp, [r4]
   19f5e:	2201      	movs	r2, #1
   19f60:	f10a 0402 	add.w	r4, sl, #2
   19f64:	e7b0      	b.n	19ec8 <_strtol_l.isra.0+0x40>
   19f66:	2322      	movs	r3, #34	; 0x22
   19f68:	f8c8 3000 	str.w	r3, [r8]
   19f6c:	b1ee      	cbz	r6, 19faa <_strtol_l.isra.0+0x122>
   19f6e:	1e67      	subs	r7, r4, #1
   19f70:	4648      	mov	r0, r9
   19f72:	6037      	str	r7, [r6, #0]
   19f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f78:	4681      	mov	r9, r0
   19f7a:	e7f8      	b.n	19f6e <_strtol_l.isra.0+0xe6>
   19f7c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   19f80:	d1a5      	bne.n	19ece <_strtol_l.isra.0+0x46>
   19f82:	7823      	ldrb	r3, [r4, #0]
   19f84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19f88:	2b58      	cmp	r3, #88	; 0x58
   19f8a:	d1a0      	bne.n	19ece <_strtol_l.isra.0+0x46>
   19f8c:	f04f 0c10 	mov.w	ip, #16
   19f90:	f894 b001 	ldrb.w	fp, [r4, #1]
   19f94:	4665      	mov	r5, ip
   19f96:	3402      	adds	r4, #2
   19f98:	e7a0      	b.n	19edc <_strtol_l.isra.0+0x54>
   19f9a:	7823      	ldrb	r3, [r4, #0]
   19f9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19fa0:	2b58      	cmp	r3, #88	; 0x58
   19fa2:	d0f3      	beq.n	19f8c <_strtol_l.isra.0+0x104>
   19fa4:	2508      	movs	r5, #8
   19fa6:	46ac      	mov	ip, r5
   19fa8:	e798      	b.n	19edc <_strtol_l.isra.0+0x54>
   19faa:	4648      	mov	r0, r9
   19fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019fb0 <_strtol_r>:
   19fb0:	b530      	push	{r4, r5, lr}
   19fb2:	4c06      	ldr	r4, [pc, #24]	; (19fcc <_strtol_r+0x1c>)
   19fb4:	4d06      	ldr	r5, [pc, #24]	; (19fd0 <_strtol_r+0x20>)
   19fb6:	6824      	ldr	r4, [r4, #0]
   19fb8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   19fba:	b083      	sub	sp, #12
   19fbc:	2c00      	cmp	r4, #0
   19fbe:	bf08      	it	eq
   19fc0:	462c      	moveq	r4, r5
   19fc2:	9400      	str	r4, [sp, #0]
   19fc4:	f7ff ff60 	bl	19e88 <_strtol_l.isra.0>
   19fc8:	b003      	add	sp, #12
   19fca:	bd30      	pop	{r4, r5, pc}
   19fcc:	2000019c 	.word	0x2000019c
   19fd0:	20000a28 	.word	0x20000a28

00019fd4 <_strtoll_l.isra.0>:
   19fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd8:	b085      	sub	sp, #20
   19fda:	461e      	mov	r6, r3
   19fdc:	9102      	str	r1, [sp, #8]
   19fde:	9003      	str	r0, [sp, #12]
   19fe0:	9200      	str	r2, [sp, #0]
   19fe2:	4688      	mov	r8, r1
   19fe4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   19fe6:	e000      	b.n	19fea <_strtoll_l.isra.0+0x16>
   19fe8:	46a8      	mov	r8, r5
   19fea:	4645      	mov	r5, r8
   19fec:	4638      	mov	r0, r7
   19fee:	f815 4b01 	ldrb.w	r4, [r5], #1
   19ff2:	f7ff fcaf 	bl	19954 <__locale_ctype_ptr_l>
   19ff6:	4420      	add	r0, r4
   19ff8:	7843      	ldrb	r3, [r0, #1]
   19ffa:	f013 0308 	ands.w	r3, r3, #8
   19ffe:	d1f3      	bne.n	19fe8 <_strtoll_l.isra.0+0x14>
   1a000:	2c2d      	cmp	r4, #45	; 0x2d
   1a002:	f000 8081 	beq.w	1a108 <_strtoll_l.isra.0+0x134>
   1a006:	2c2b      	cmp	r4, #43	; 0x2b
   1a008:	bf03      	ittte	eq
   1a00a:	782c      	ldrbeq	r4, [r5, #0]
   1a00c:	9301      	streq	r3, [sp, #4]
   1a00e:	f108 0502 	addeq.w	r5, r8, #2
   1a012:	9301      	strne	r3, [sp, #4]
   1a014:	b166      	cbz	r6, 1a030 <_strtoll_l.isra.0+0x5c>
   1a016:	2e10      	cmp	r6, #16
   1a018:	f000 8088 	beq.w	1a12c <_strtoll_l.isra.0+0x158>
   1a01c:	9b01      	ldr	r3, [sp, #4]
   1a01e:	46b0      	mov	r8, r6
   1a020:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1a024:	b97b      	cbnz	r3, 1a046 <_strtoll_l.isra.0+0x72>
   1a026:	f04f 3aff 	mov.w	sl, #4294967295
   1a02a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1a02e:	e00e      	b.n	1a04e <_strtoll_l.isra.0+0x7a>
   1a030:	2c30      	cmp	r4, #48	; 0x30
   1a032:	f000 808a 	beq.w	1a14a <_strtoll_l.isra.0+0x176>
   1a036:	f04f 080a 	mov.w	r8, #10
   1a03a:	f04f 0900 	mov.w	r9, #0
   1a03e:	260a      	movs	r6, #10
   1a040:	9b01      	ldr	r3, [sp, #4]
   1a042:	2b00      	cmp	r3, #0
   1a044:	d0ef      	beq.n	1a026 <_strtoll_l.isra.0+0x52>
   1a046:	f04f 0a00 	mov.w	sl, #0
   1a04a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1a04e:	4642      	mov	r2, r8
   1a050:	464b      	mov	r3, r9
   1a052:	4650      	mov	r0, sl
   1a054:	4639      	mov	r1, r7
   1a056:	f7fc f871 	bl	1613c <__aeabi_uldivmod>
   1a05a:	464b      	mov	r3, r9
   1a05c:	4693      	mov	fp, r2
   1a05e:	4650      	mov	r0, sl
   1a060:	4642      	mov	r2, r8
   1a062:	4639      	mov	r1, r7
   1a064:	f7fc f86a 	bl	1613c <__aeabi_uldivmod>
   1a068:	f04f 0e00 	mov.w	lr, #0
   1a06c:	2200      	movs	r2, #0
   1a06e:	2300      	movs	r3, #0
   1a070:	e00f      	b.n	1a092 <_strtoll_l.isra.0+0xbe>
   1a072:	d044      	beq.n	1a0fe <_strtoll_l.isra.0+0x12a>
   1a074:	fb02 f409 	mul.w	r4, r2, r9
   1a078:	fb08 4403 	mla	r4, r8, r3, r4
   1a07c:	fba2 2308 	umull	r2, r3, r2, r8
   1a080:	4423      	add	r3, r4
   1a082:	eb12 020c 	adds.w	r2, r2, ip
   1a086:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1a08a:	f04f 0e01 	mov.w	lr, #1
   1a08e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1a092:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1a096:	f1bc 0f09 	cmp.w	ip, #9
   1a09a:	d906      	bls.n	1a0aa <_strtoll_l.isra.0+0xd6>
   1a09c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1a0a0:	f1bc 0f19 	cmp.w	ip, #25
   1a0a4:	d80d      	bhi.n	1a0c2 <_strtoll_l.isra.0+0xee>
   1a0a6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1a0aa:	4566      	cmp	r6, ip
   1a0ac:	dd12      	ble.n	1a0d4 <_strtoll_l.isra.0+0x100>
   1a0ae:	f1be 3fff 	cmp.w	lr, #4294967295
   1a0b2:	d0ec      	beq.n	1a08e <_strtoll_l.isra.0+0xba>
   1a0b4:	4299      	cmp	r1, r3
   1a0b6:	bf08      	it	eq
   1a0b8:	4290      	cmpeq	r0, r2
   1a0ba:	d2da      	bcs.n	1a072 <_strtoll_l.isra.0+0x9e>
   1a0bc:	f04f 3eff 	mov.w	lr, #4294967295
   1a0c0:	e7e5      	b.n	1a08e <_strtoll_l.isra.0+0xba>
   1a0c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1a0c6:	f1bc 0f19 	cmp.w	ip, #25
   1a0ca:	d803      	bhi.n	1a0d4 <_strtoll_l.isra.0+0x100>
   1a0cc:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1a0d0:	4566      	cmp	r6, ip
   1a0d2:	dcec      	bgt.n	1a0ae <_strtoll_l.isra.0+0xda>
   1a0d4:	f1be 3fff 	cmp.w	lr, #4294967295
   1a0d8:	d01c      	beq.n	1a114 <_strtoll_l.isra.0+0x140>
   1a0da:	9901      	ldr	r1, [sp, #4]
   1a0dc:	b111      	cbz	r1, 1a0e4 <_strtoll_l.isra.0+0x110>
   1a0de:	4252      	negs	r2, r2
   1a0e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1a0e4:	9900      	ldr	r1, [sp, #0]
   1a0e6:	b129      	cbz	r1, 1a0f4 <_strtoll_l.isra.0+0x120>
   1a0e8:	f1be 0f00 	cmp.w	lr, #0
   1a0ec:	d11b      	bne.n	1a126 <_strtoll_l.isra.0+0x152>
   1a0ee:	9d02      	ldr	r5, [sp, #8]
   1a0f0:	9900      	ldr	r1, [sp, #0]
   1a0f2:	600d      	str	r5, [r1, #0]
   1a0f4:	4610      	mov	r0, r2
   1a0f6:	4619      	mov	r1, r3
   1a0f8:	b005      	add	sp, #20
   1a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0fe:	45e3      	cmp	fp, ip
   1a100:	dab8      	bge.n	1a074 <_strtoll_l.isra.0+0xa0>
   1a102:	f04f 3eff 	mov.w	lr, #4294967295
   1a106:	e7c2      	b.n	1a08e <_strtoll_l.isra.0+0xba>
   1a108:	2301      	movs	r3, #1
   1a10a:	782c      	ldrb	r4, [r5, #0]
   1a10c:	9301      	str	r3, [sp, #4]
   1a10e:	f108 0502 	add.w	r5, r8, #2
   1a112:	e77f      	b.n	1a014 <_strtoll_l.isra.0+0x40>
   1a114:	9a03      	ldr	r2, [sp, #12]
   1a116:	2322      	movs	r3, #34	; 0x22
   1a118:	6013      	str	r3, [r2, #0]
   1a11a:	9b00      	ldr	r3, [sp, #0]
   1a11c:	b32b      	cbz	r3, 1a16a <_strtoll_l.isra.0+0x196>
   1a11e:	4652      	mov	r2, sl
   1a120:	463b      	mov	r3, r7
   1a122:	3d01      	subs	r5, #1
   1a124:	e7e4      	b.n	1a0f0 <_strtoll_l.isra.0+0x11c>
   1a126:	4692      	mov	sl, r2
   1a128:	461f      	mov	r7, r3
   1a12a:	e7f8      	b.n	1a11e <_strtoll_l.isra.0+0x14a>
   1a12c:	2c30      	cmp	r4, #48	; 0x30
   1a12e:	d117      	bne.n	1a160 <_strtoll_l.isra.0+0x18c>
   1a130:	782b      	ldrb	r3, [r5, #0]
   1a132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a136:	2b58      	cmp	r3, #88	; 0x58
   1a138:	d112      	bne.n	1a160 <_strtoll_l.isra.0+0x18c>
   1a13a:	786c      	ldrb	r4, [r5, #1]
   1a13c:	f04f 0810 	mov.w	r8, #16
   1a140:	f04f 0900 	mov.w	r9, #0
   1a144:	3502      	adds	r5, #2
   1a146:	2610      	movs	r6, #16
   1a148:	e77a      	b.n	1a040 <_strtoll_l.isra.0+0x6c>
   1a14a:	782b      	ldrb	r3, [r5, #0]
   1a14c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a150:	2b58      	cmp	r3, #88	; 0x58
   1a152:	d0f2      	beq.n	1a13a <_strtoll_l.isra.0+0x166>
   1a154:	f04f 0808 	mov.w	r8, #8
   1a158:	f04f 0900 	mov.w	r9, #0
   1a15c:	2608      	movs	r6, #8
   1a15e:	e76f      	b.n	1a040 <_strtoll_l.isra.0+0x6c>
   1a160:	f04f 0810 	mov.w	r8, #16
   1a164:	f04f 0900 	mov.w	r9, #0
   1a168:	e76a      	b.n	1a040 <_strtoll_l.isra.0+0x6c>
   1a16a:	4652      	mov	r2, sl
   1a16c:	463b      	mov	r3, r7
   1a16e:	e7c1      	b.n	1a0f4 <_strtoll_l.isra.0+0x120>

0001a170 <_strtoll_r>:
   1a170:	b530      	push	{r4, r5, lr}
   1a172:	4c06      	ldr	r4, [pc, #24]	; (1a18c <_strtoll_r+0x1c>)
   1a174:	4d06      	ldr	r5, [pc, #24]	; (1a190 <_strtoll_r+0x20>)
   1a176:	6824      	ldr	r4, [r4, #0]
   1a178:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1a17a:	b083      	sub	sp, #12
   1a17c:	2c00      	cmp	r4, #0
   1a17e:	bf08      	it	eq
   1a180:	462c      	moveq	r4, r5
   1a182:	9400      	str	r4, [sp, #0]
   1a184:	f7ff ff26 	bl	19fd4 <_strtoll_l.isra.0>
   1a188:	b003      	add	sp, #12
   1a18a:	bd30      	pop	{r4, r5, pc}
   1a18c:	2000019c 	.word	0x2000019c
   1a190:	20000a28 	.word	0x20000a28

0001a194 <_strtoull_l.isra.0>:
   1a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a198:	b085      	sub	sp, #20
   1a19a:	4693      	mov	fp, r2
   1a19c:	9102      	str	r1, [sp, #8]
   1a19e:	9003      	str	r0, [sp, #12]
   1a1a0:	469a      	mov	sl, r3
   1a1a2:	460f      	mov	r7, r1
   1a1a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1a1a6:	e000      	b.n	1a1aa <_strtoull_l.isra.0+0x16>
   1a1a8:	462f      	mov	r7, r5
   1a1aa:	463d      	mov	r5, r7
   1a1ac:	4630      	mov	r0, r6
   1a1ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   1a1b2:	f7ff fbcf 	bl	19954 <__locale_ctype_ptr_l>
   1a1b6:	4420      	add	r0, r4
   1a1b8:	7843      	ldrb	r3, [r0, #1]
   1a1ba:	f013 0308 	ands.w	r3, r3, #8
   1a1be:	d1f3      	bne.n	1a1a8 <_strtoull_l.isra.0+0x14>
   1a1c0:	2c2d      	cmp	r4, #45	; 0x2d
   1a1c2:	f000 8089 	beq.w	1a2d8 <_strtoull_l.isra.0+0x144>
   1a1c6:	2c2b      	cmp	r4, #43	; 0x2b
   1a1c8:	bf03      	ittte	eq
   1a1ca:	782c      	ldrbeq	r4, [r5, #0]
   1a1cc:	9301      	streq	r3, [sp, #4]
   1a1ce:	1cbd      	addeq	r5, r7, #2
   1a1d0:	9301      	strne	r3, [sp, #4]
   1a1d2:	f1ba 0f00 	cmp.w	sl, #0
   1a1d6:	d019      	beq.n	1a20c <_strtoull_l.isra.0+0x78>
   1a1d8:	f1ba 0f10 	cmp.w	sl, #16
   1a1dc:	f000 8081 	beq.w	1a2e2 <_strtoull_l.isra.0+0x14e>
   1a1e0:	46d0      	mov	r8, sl
   1a1e2:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1a1e6:	4642      	mov	r2, r8
   1a1e8:	464b      	mov	r3, r9
   1a1ea:	f04f 30ff 	mov.w	r0, #4294967295
   1a1ee:	f04f 31ff 	mov.w	r1, #4294967295
   1a1f2:	f7fb ffa3 	bl	1613c <__aeabi_uldivmod>
   1a1f6:	4642      	mov	r2, r8
   1a1f8:	4606      	mov	r6, r0
   1a1fa:	460f      	mov	r7, r1
   1a1fc:	464b      	mov	r3, r9
   1a1fe:	f04f 30ff 	mov.w	r0, #4294967295
   1a202:	f04f 31ff 	mov.w	r1, #4294967295
   1a206:	f7fb ff99 	bl	1613c <__aeabi_uldivmod>
   1a20a:	e00b      	b.n	1a224 <_strtoull_l.isra.0+0x90>
   1a20c:	2c30      	cmp	r4, #48	; 0x30
   1a20e:	d07d      	beq.n	1a30c <_strtoull_l.isra.0+0x178>
   1a210:	4f4e      	ldr	r7, [pc, #312]	; (1a34c <_strtoull_l.isra.0+0x1b8>)
   1a212:	2205      	movs	r2, #5
   1a214:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1a218:	f04f 080a 	mov.w	r8, #10
   1a21c:	f04f 0900 	mov.w	r9, #0
   1a220:	f04f 0a0a 	mov.w	sl, #10
   1a224:	f04f 0e00 	mov.w	lr, #0
   1a228:	2000      	movs	r0, #0
   1a22a:	2100      	movs	r1, #0
   1a22c:	e011      	b.n	1a252 <_strtoull_l.isra.0+0xbe>
   1a22e:	42b9      	cmp	r1, r7
   1a230:	bf08      	it	eq
   1a232:	42b0      	cmpeq	r0, r6
   1a234:	d03f      	beq.n	1a2b6 <_strtoull_l.isra.0+0x122>
   1a236:	fb00 f409 	mul.w	r4, r0, r9
   1a23a:	fb08 4401 	mla	r4, r8, r1, r4
   1a23e:	fba0 0108 	umull	r0, r1, r0, r8
   1a242:	4421      	add	r1, r4
   1a244:	18c0      	adds	r0, r0, r3
   1a246:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1a24a:	f04f 0e01 	mov.w	lr, #1
   1a24e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1a252:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a256:	2b09      	cmp	r3, #9
   1a258:	d905      	bls.n	1a266 <_strtoull_l.isra.0+0xd2>
   1a25a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1a25e:	2b19      	cmp	r3, #25
   1a260:	d80d      	bhi.n	1a27e <_strtoull_l.isra.0+0xea>
   1a262:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1a266:	459a      	cmp	sl, r3
   1a268:	dd11      	ble.n	1a28e <_strtoull_l.isra.0+0xfa>
   1a26a:	f1be 0f00 	cmp.w	lr, #0
   1a26e:	db03      	blt.n	1a278 <_strtoull_l.isra.0+0xe4>
   1a270:	428f      	cmp	r7, r1
   1a272:	bf08      	it	eq
   1a274:	4286      	cmpeq	r6, r0
   1a276:	d2da      	bcs.n	1a22e <_strtoull_l.isra.0+0x9a>
   1a278:	f04f 3eff 	mov.w	lr, #4294967295
   1a27c:	e7e7      	b.n	1a24e <_strtoull_l.isra.0+0xba>
   1a27e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1a282:	2b19      	cmp	r3, #25
   1a284:	d803      	bhi.n	1a28e <_strtoull_l.isra.0+0xfa>
   1a286:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1a28a:	459a      	cmp	sl, r3
   1a28c:	dced      	bgt.n	1a26a <_strtoull_l.isra.0+0xd6>
   1a28e:	f1be 0f00 	cmp.w	lr, #0
   1a292:	db15      	blt.n	1a2c0 <_strtoull_l.isra.0+0x12c>
   1a294:	9b01      	ldr	r3, [sp, #4]
   1a296:	b113      	cbz	r3, 1a29e <_strtoull_l.isra.0+0x10a>
   1a298:	4240      	negs	r0, r0
   1a29a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a29e:	f1bb 0f00 	cmp.w	fp, #0
   1a2a2:	d005      	beq.n	1a2b0 <_strtoull_l.isra.0+0x11c>
   1a2a4:	f1be 0f00 	cmp.w	lr, #0
   1a2a8:	d114      	bne.n	1a2d4 <_strtoull_l.isra.0+0x140>
   1a2aa:	9d02      	ldr	r5, [sp, #8]
   1a2ac:	f8cb 5000 	str.w	r5, [fp]
   1a2b0:	b005      	add	sp, #20
   1a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2b6:	4293      	cmp	r3, r2
   1a2b8:	ddbd      	ble.n	1a236 <_strtoull_l.isra.0+0xa2>
   1a2ba:	f04f 3eff 	mov.w	lr, #4294967295
   1a2be:	e7c6      	b.n	1a24e <_strtoull_l.isra.0+0xba>
   1a2c0:	9a03      	ldr	r2, [sp, #12]
   1a2c2:	2322      	movs	r3, #34	; 0x22
   1a2c4:	6013      	str	r3, [r2, #0]
   1a2c6:	f04f 30ff 	mov.w	r0, #4294967295
   1a2ca:	f04f 31ff 	mov.w	r1, #4294967295
   1a2ce:	f1bb 0f00 	cmp.w	fp, #0
   1a2d2:	d0ed      	beq.n	1a2b0 <_strtoull_l.isra.0+0x11c>
   1a2d4:	3d01      	subs	r5, #1
   1a2d6:	e7e9      	b.n	1a2ac <_strtoull_l.isra.0+0x118>
   1a2d8:	2301      	movs	r3, #1
   1a2da:	782c      	ldrb	r4, [r5, #0]
   1a2dc:	9301      	str	r3, [sp, #4]
   1a2de:	1cbd      	adds	r5, r7, #2
   1a2e0:	e777      	b.n	1a1d2 <_strtoull_l.isra.0+0x3e>
   1a2e2:	2c30      	cmp	r4, #48	; 0x30
   1a2e4:	d123      	bne.n	1a32e <_strtoull_l.isra.0+0x19a>
   1a2e6:	782b      	ldrb	r3, [r5, #0]
   1a2e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a2ec:	2b58      	cmp	r3, #88	; 0x58
   1a2ee:	d128      	bne.n	1a342 <_strtoull_l.isra.0+0x1ae>
   1a2f0:	786c      	ldrb	r4, [r5, #1]
   1a2f2:	220f      	movs	r2, #15
   1a2f4:	3502      	adds	r5, #2
   1a2f6:	f04f 36ff 	mov.w	r6, #4294967295
   1a2fa:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1a2fe:	f04f 0810 	mov.w	r8, #16
   1a302:	f04f 0900 	mov.w	r9, #0
   1a306:	f04f 0a10 	mov.w	sl, #16
   1a30a:	e78b      	b.n	1a224 <_strtoull_l.isra.0+0x90>
   1a30c:	782b      	ldrb	r3, [r5, #0]
   1a30e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a312:	2b58      	cmp	r3, #88	; 0x58
   1a314:	d0ec      	beq.n	1a2f0 <_strtoull_l.isra.0+0x15c>
   1a316:	2207      	movs	r2, #7
   1a318:	f04f 36ff 	mov.w	r6, #4294967295
   1a31c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   1a320:	f04f 0808 	mov.w	r8, #8
   1a324:	f04f 0900 	mov.w	r9, #0
   1a328:	f04f 0a08 	mov.w	sl, #8
   1a32c:	e77a      	b.n	1a224 <_strtoull_l.isra.0+0x90>
   1a32e:	220f      	movs	r2, #15
   1a330:	f04f 36ff 	mov.w	r6, #4294967295
   1a334:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1a338:	f04f 0810 	mov.w	r8, #16
   1a33c:	f04f 0900 	mov.w	r9, #0
   1a340:	e770      	b.n	1a224 <_strtoull_l.isra.0+0x90>
   1a342:	f04f 0810 	mov.w	r8, #16
   1a346:	f04f 0900 	mov.w	r9, #0
   1a34a:	e74c      	b.n	1a1e6 <_strtoull_l.isra.0+0x52>
   1a34c:	19999999 	.word	0x19999999

0001a350 <_strtoull_r>:
   1a350:	b530      	push	{r4, r5, lr}
   1a352:	4c06      	ldr	r4, [pc, #24]	; (1a36c <_strtoull_r+0x1c>)
   1a354:	4d06      	ldr	r5, [pc, #24]	; (1a370 <_strtoull_r+0x20>)
   1a356:	6824      	ldr	r4, [r4, #0]
   1a358:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1a35a:	b083      	sub	sp, #12
   1a35c:	2c00      	cmp	r4, #0
   1a35e:	bf08      	it	eq
   1a360:	462c      	moveq	r4, r5
   1a362:	9400      	str	r4, [sp, #0]
   1a364:	f7ff ff16 	bl	1a194 <_strtoull_l.isra.0>
   1a368:	b003      	add	sp, #12
   1a36a:	bd30      	pop	{r4, r5, pc}
   1a36c:	2000019c 	.word	0x2000019c
   1a370:	20000a28 	.word	0x20000a28

0001a374 <__ascii_wctomb>:
   1a374:	b121      	cbz	r1, 1a380 <__ascii_wctomb+0xc>
   1a376:	2aff      	cmp	r2, #255	; 0xff
   1a378:	d804      	bhi.n	1a384 <__ascii_wctomb+0x10>
   1a37a:	700a      	strb	r2, [r1, #0]
   1a37c:	2001      	movs	r0, #1
   1a37e:	4770      	bx	lr
   1a380:	4608      	mov	r0, r1
   1a382:	4770      	bx	lr
   1a384:	238a      	movs	r3, #138	; 0x8a
   1a386:	6003      	str	r3, [r0, #0]
   1a388:	f04f 30ff 	mov.w	r0, #4294967295
   1a38c:	4770      	bx	lr
   1a38e:	bf00      	nop
   1a390:	2e2f2e2e 	.word	0x2e2f2e2e
   1a394:	2e2e2f2e 	.word	0x2e2e2f2e
   1a398:	554c412f 	.word	0x554c412f
   1a39c:	6972445f 	.word	0x6972445f
   1a3a0:	2f726576 	.word	0x2f726576
   1a3a4:	5f554c41 	.word	0x5f554c41
   1a3a8:	76697244 	.word	0x76697244
   1a3ac:	682f7265 	.word	0x682f7265
   1a3b0:	692f6c61 	.word	0x692f6c61
   1a3b4:	756c636e 	.word	0x756c636e
   1a3b8:	682f6564 	.word	0x682f6564
   1a3bc:	775f6c61 	.word	0x775f6c61
   1a3c0:	682e7464 	.word	0x682e7464
   1a3c4:	00000000 	.word	0x00000000
   1a3c8:	656c6553 	.word	0x656c6553
   1a3cc:	64657463 	.word	0x64657463
   1a3d0:	6e696c20 	.word	0x6e696c20
   1a3d4:	00003a65 	.word	0x00003a65
   1a3d8:	00000a0d 	.word	0x00000a0d
   1a3dc:	2a2a2a2a 	.word	0x2a2a2a2a
   1a3e0:	66694c20 	.word	0x66694c20
   1a3e4:	75502065 	.word	0x75502065
   1a3e8:	2065736c 	.word	0x2065736c
   1a3ec:	69746341 	.word	0x69746341
   1a3f0:	65746176 	.word	0x65746176
   1a3f4:	2a2a2a64 	.word	0x2a2a2a64
   1a3f8:	0000002a 	.word	0x0000002a

0001a3fc <_ZTV10AMMC_Class>:
	...
   1a410:	0001060d 000104dd 0000071d 00000761     ............a...
   1a420:	00010aa5                                ....

0001a424 <_ZTT10AMMC_Class>:
   1a424:	0001a410 0001a450 0001a478 0001a478     ....P...x...x...
   1a434:	0001a450 0001a410                       P.......

0001a43c <_ZTC10AMMC_Class0_15ARINC_Interface>:
	...
   1a450:	0001060d 000104dd 00000000 00000000     ................
   1a460:	00010aa5                                ....

0001a464 <_ZTC10AMMC_Class0_14Protocol_Class>:
	...
   1a478:	0001060d 000104dd 00000000 00000000     ................
   1a488:	0001134f                                O...

0001a48c <factoryDefaultsConfiguration>:
   1a48c:	000000ac 00000004 0000070c 00000000     ................
   1a49c:	00000000 00000001 000003e8 000003e8     ................
   1a4ac:	000003e8 00000000 00000000 00000000     ................
   1a4bc:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   1a4cc:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   1a4dc:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   1a4ec:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   1a4fc:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   1a50c:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   1a51c:	41200000 41200000 00000014 00000078     .. A.. A....x...
   1a52c:	be23d70a 41d00000 00000078              ..#....Ax...

0001a538 <factoryDefaultsCycles>:
   1a538:	000001c0 00000005 0000000c 00000024     ............$...
   1a548:	756e614d 00006c61 00000000 00000000     Manual..........
   1a558:	00000000 00000001 00000258 0000000f     ........X.......
   1a568:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   1a580:	00000001 00000258 0000001e 0000012c     ....X.......,...
   1a590:	2030332b 73636573 00000000 00000000     +30 secs........
   1a5a0:	00000000 00000001 000000f0 0000001e     ................
   1a5b0:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   1a5d8:	73657250 32207465 00000000 00000000     Preset 2........
	...
   1a5fc:	73657250 33207465 00000000 00000000     Preset 3........
	...
   1a620:	73657250 34207465 00000000 00000000     Preset 4........
	...
   1a644:	73657250 35207465 00000000 00000000     Preset 5........
	...
   1a668:	73657250 36207465 00000000 00000000     Preset 6........
	...
   1a68c:	73657250 37207465 00000000 00000000     Preset 7........
	...
   1a6b0:	73657250 38207465 00000000 00000000     Preset 8........
	...
   1a6d4:	73657250 39207465 00000000 00000000     Preset 9........
	...
   1a6f8:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   1a708:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   1a718:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   1a728:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   1a738:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   1a748:	79646165 00000000 616c6544 00646579     eady....Delayed.
   1a758:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   1a768:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   1a778:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1a788:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1a798:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1a7a8:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1a7b8:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1a7c8:	61647055 00006574 72727543 20746e65     Update..Current 
   1a7d8:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1a7e8:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1a7f8:	69542067 0000656d 67726154 50207465     g Time..Target P
   1a808:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1a818:	00000063 00203a20 00007830 00000a0d     c... : .0x......

0001a828 <_ZTV17ConfigState_Class>:
	...
   1a830:	0001134f                                O...

0001a834 <_ZTV14DateTime_Class>:
	...
   1a83c:	00012d7d 00012e6d 49505351 6f725020     }-..m...QSPI Pro
   1a84c:	6d617267 61745320 64657472 00000d0a     gram Started....
   1a85c:	73616c46 61642068 76206174 66697265     Flash data verif
   1a86c:	74616369 206e6f69 6c696166 0a2e6465     ication failed..
   1a87c:	0000000d 74696220 00003a20 00000a0d     .... bit :......
   1a88c:	74697257 202d2065 64616552 20736920     Write - Read is 
   1a89c:	63637573 66737365 69206c75 5351206e     successful in QS
   1a8ac:	46204950 6873616c 6d656d20 2079726f     PI Flash memory 
   1a8bc:	00000000 202a2a2a 72617453 20705574     ....*** StartUp 
   1a8cc:	6f676c41 68746972 206e656d 74736554     Algorithmen Test
   1a8dc:	2a2a2a20 00000000 202a2a2a 65746144      ***....*** Date
   1a8ec:	0020203a 206c754a 32203133 00303230     :  .Jul 31 2020.
   1a8fc:	6d695420 00203a65 313a3531 35343a30      Time: .15:10:45
   1a90c:	00000000 202a2a2a 20554c41 74696e69     ....*** ALU init
   1a91c:	65746169 2a2a2064 0000002a 69746341     iated ***...Acti
   1a92c:	6c206576 3a656e69 00000020 73616c46     ve line: ...Flas
   1a93c:	654d2068 79726f6d 6c655320 73655466     h Memory SelfTes
   1a94c:	41502074 44455353 00000000 00000a0d     t PASSED........
   1a95c:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   1a96c:	73655466 41462074 44454c49 00000000     fTest FAILED....
   1a97c:	52504545 4d204d4f 726f6d65 65532079     EEPROM Memory Se
   1a98c:	6554666c 50207473 45535341 00000044     lfTest PASSED...
   1a99c:	52504545 4d204d4f 726f6d65 65532079     EEPROM Memory Se
   1a9ac:	6554666c 46207473 454c4941 00000044     lfTest FAILED...
   1a9bc:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   1a9cc:	65636572 64657669 7773203a 68637469     received: switch
   1a9dc:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   1a9ec:	00000000 6c662820 20736761 00203d3d     .... (flags == .
   1a9fc:	00000a0d 646e6168 7453656c 49657461     ....handleStateI
   1aa0c:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   1aa1c:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   1aa2c:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   1aa3c:	646e6168 7453656c 53657461 646e6174     handleStateStand
   1aa4c:	464f7962 00000046 646e6168 7453656c     byOFF...handleSt
   1aa5c:	50657461 61706572 74536572 62646e61     atePrepareStandb
   1aa6c:	004e4f79                                yON.

0001aa70 <_ZTV12States_Class>:
	...
   1aa78:	00002c0d 682f2e2e 702f6c70 2f74726f     .,..../hpl/port/
   1aa88:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   1aa98:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
   1aaa8:	775f6c61 682e7464 00000000 682f2e2e     al_wdt.h....../h
   1aab8:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
   1aac8:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
   1aad8:	682f6372 635f6c61 615f6e61 636e7973     rc/hal_can_async
   1aae8:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1aaf8:	635f6c61 735f6372 2e636e79 00000063     al_crc_sync.c...
   1ab08:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1ab18:	6d5f6332 7973615f 632e636e 00000000     2c_m_async.c....
   1ab28:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   1ab38:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   1ab48:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   1ab58:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   1ab68:	735f6c61 6d5f6970 7973615f 632e636e     al_spi_m_async.c
   1ab78:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1ab88:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   1ab98:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   1aba8:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   1abb8:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   1abc8:	2e747369 00000063                       ist.c...

0001abd0 <_map>:
   1abd0:	00000004 00000004 00000005 00000005     ................
   1abe0:	00000006 00000056 00000007 00000057     ....V.......W...
   1abf0:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   1ac00:	632e6369 00000000                       ic.c....

0001ac08 <user_mux_confs>:
   1ac08:	00000100 00000000 00000000 00000000     ................
	...

0001ac4c <channel_confs>:
   1ac4c:	0000065e 00000000 00000000 00000000     ^...............
	...

0001ac8c <interrupt_cfg>:
	...
   1ad0c:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1ad1c:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1ad2c:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1ad3c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1ad4c:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1ad5c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1ad6c:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1ad7c:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1ad8c:	43000c00                                ...C

0001ad90 <sercomspi_regs>:
   1ad90:	0020000c 00020000 00000000 01ff004f     .. .........O...
   1ada0:	30000c04 02000000 00000000 ff004f00     ...0.........O..
   1adb0:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1adc0:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1add0:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1ade0:	43001400 43001800                       ...C...C

0001ade8 <_usb_ep_cfgs>:
   1ade8:	200033d8 00000000 00000040 20003418     .3. ....@....4. 
   1adf8:	20003458 00400040 20003498 200034d8     X4. @.@..4. .4. 
   1ae08:	00400040 20003518 20003558 00400040     @.@..5. X5. @.@.
   1ae18:	20003598 200035d8 00400040 00000804     .5. .5. @.@.....
   1ae28:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1ae38:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1ae48:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1ae58:	7361625f 00682e65                       _base.h.

0001ae60 <n25q256a_interface>:
   1ae60:	0000e9dd 0000ea81 0000eb91 0000ed49     ............I...
   1ae70:	0000edd9 752f2e2e 642f6273 63697665     ....../usb/devic
   1ae80:	73752f65 2e636462 00000063              e/usbdc.c...

0001ae8c <_ZTV17ARINC_Conversions>:
	...
   1ae94:	0001060d 000104dd                       ........

0001ae9c <_ZL5Mesg1>:
   1ae9c:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

0001aeac <_ZL5Mesg2>:
   1aeac:	61746144 0000203a                       Data: ..

0001aeb4 <_ZL10HexToAscii>:
   1aeb4:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001aec4 <_ZL11HistoryMesg>:
   1aec4:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   1aed4:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   1aee4:	206f7420 74696e69 7a696c69 000d0a65      to initilize...
   1aef4:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   1af04:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   1af14:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   1af24:	67617373 2d2d2165 00002d2d 72540d0a     ssage!----....Tr
   1af34:	6d736e61 26207469 63655220 65766965     ansmit & Receive
   1af44:	74695720 614c2068 736c6562 646f4d20      With Labels Mod
   1af54:	000d0a65 45530d0a 542d464c 2c545345     e.....SELF-TEST,
   1af64:	746e4920 616e7265 6944206c 61746967      Internal Digita
   1af74:	6f4c206c 622d706f 2c6b6361 206f4e20     l Loop-back, No 
   1af84:	61746164 20736920 6e617274 74696d73     data is transmit
   1af94:	20646574 65747865 6c616e72 0d0a796c     ted externally..
   1afa4:	00000000 6f200d0a 6154206e 20656c62     ...... on Table 
   1afb4:	6562616c 6120736c 45206572 6c62616e     labels are Enabl
   1afc4:	00006465 500a0d0a 73736572 2d575320     ed.....Press SW-
   1afd4:	6f742031 61747320 69207472 6974696e     1 to start initi
   1afe4:	796c6c61 000a0d0a 202d2d2d 74747542     ally....--- Butt
   1aff4:	43206e6f 616d6d6f 2073646e 0a2d2d2d     on Commands ---.
   1b004:	0000000d 70532020 20656361 20726142     ....  Space Bar 
   1b014:	44206f74 6c707369 53207961 75746174     to Display Statu
   1b024:	6e612073 6f432064 6f72746e 6552206c     s and Control Re
   1b034:	74736967 0a737265 0000000d 20702020     gisters.....  p 
   1b044:	50206f74 65737561 00000d0a 206d2020     to Pause....  m 
   1b054:	44206f74 6c707369 4c207961 6c656261     to Display Label
   1b064:	6d654d20 0079726f 003e0d0a 72540d0a      Memory...>...Tr
   1b074:	6d736e61 69747469 0d0a676e 0000003e     ansmitting..>...
   1b084:	49480d0a 3935332d 74532033 73757461     ..HI-3593 Status
   1b094:	6f43202c 6f72746e 6552206c 74736967     , Control Regist
   1b0a4:	0d737265 0000000a 20090d0a 2a2a2a20     ers........  ***
   1b0b4:	50202a2a 73736572 70732020 62656361     ** Press  spaceb
   1b0c4:	74207261 6f63206f 6e69746e 2a206575     ar to continue *
   1b0d4:	2a2a2a2a 0000002a 540d0a0a 736e6172     *****......Trans
   1b0e4:	2074696d 73756150 0d0a6465 00000000     mit Paused......
   1b0f4:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   1b104:	2d4e4f54 6f742032 61727420 696d736e     TON-2 to transmi
   1b114:	6e6f2074 72662065 20656d61 20646e61     t one frame and 
   1b124:	73756170 000d0a65 72500d0a 20737365     pause.....Press 
   1b134:	44454c4f 5455425f 2d4e4f54 6f742033     OLED_BUTTON-3 to
   1b144:	73655220 0a656d75 0000000d 72540d0a      Resume.......Tr
   1b154:	6d736e61 65747469 65522072 656d7573     ansmitter Resume
   1b164:	2e2e2e64 00000d0a 65520d0a 76696563     d.........Receiv
   1b174:	31207265 62614c20 0a736c65 0000000d     er 1 Labels.....
   1b184:	65520d0a 76696563 32207265 62614c20     ..Receiver 2 Lab
   1b194:	0a736c65 0000000d 72540d0a 6d736e61     els.......Transm
   1b1a4:	26207469 63655220 65766965 68634520     it & Receive Ech
   1b1b4:	6f4d206f 0d0a6564 00000000 6c530d0a     o Mode........Sl
   1b1c4:	5320776f 64656570 00000000 61460d0a     ow Speed......Fa
   1b1d4:	53207473 64656570 00000000 72540d0a     st Speed......Tr
   1b1e4:	6d736e61 65747469 61502072 79746972     ansmitter Parity
   1b1f4:	616e4520 64656c62 00000000 61540d0a      Enabled......Ta
   1b204:	20656c62 6562616c 6120736c 45206572     ble labels are E
   1b214:	6c62616e 00006465 2d0a0d0a 43202d2d     nabled.....--- C
   1b224:	6f736e6f 4320656c 616d6d6f 2073646e     onsole Commands 
   1b234:	706c6548 2d2d2d20 00000000 20502020     Help ---....  P 
   1b244:	6150203d 79746972 676f5420 20656c67     = Parity Toggle 
   1b254:	6f2f6e6f 00006666 20542020 4654203d     on/off..  T = TF
   1b264:	2050494c 676f5420 20656c67 6f2f6e6f     LIP  Toggle on/o
   1b274:	00006666 20522020 4652203d 2050494c     ff..  R = RFLIP 
   1b284:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   1b294:	20532020 4453203d 202c4e4f 2c394453       S = SDON, SD9,
   1b2a4:	31445320 6f542030 656c6767 2f6e6f20      SD10 Toggle on/
   1b2b4:	0066666f 20482020 6854203d 48207369     off.  H = This H
   1b2c4:	20706c65 65676150 00000000 70532020     elp Page....  Sp
   1b2d4:	20656361 20726142 6944203d 616c7073     ace Bar = Displa
   1b2e4:	74532079 73757461 646e6120 6e6f4320     y Status and Con
   1b2f4:	6c6f7274 67657220 00000073 20492020     trol regs...  I 
   1b304:	6e49203d 6d657263 20746e65 7373654d     = Increment Mess
   1b314:	20656761 20646e61 6e617254 74696d73     age and Transmit
   1b324:	7845202e 726f6c70 4d207265 2065646f     . Explorer Mode 
   1b334:	4f202d20 21594c4e 00000000 204d2020      - ONLY!....  M 
   1b344:	6e45203d 20726574 74737543 4d206d6f     = Enter Custom M
   1b354:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   1b364:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   1b374:	4e452020 3d524554 61725420 696d736e       ENTER= Transmi
   1b384:	656e2074 6d207478 61737365 202e6567     t next message. 
   1b394:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   1b3a4:	4c4e4f20 00002159 00207830 30307826      ONLY!..0x .&x00
   1b3b4:	00002030 50205854 74697261 4e4f2079     0 ..TX Parity ON
   1b3c4:	003e0d0a 50205854 74697261 464f2079     ..>.TX Parity OF
   1b3d4:	3e0d0a46 00000000 494c4654 65532050     F..>....TFLIP Se
   1b3e4:	3e0d0a74 00000000 494c4654 6c432050     t..>....TFLIP Cl
   1b3f4:	65726165 3e0d0a64 00000000 2d434552     eared..>....REC-
   1b404:	46522031 2050494c 0a746553 00003e0d     1 RFLIP Set..>..
   1b414:	2d434552 46522031 2050494c 61656c43     REC-1 RFLIP Clea
   1b424:	0a646572 00003e0d 2d434552 46522032     red..>..REC-2 RF
   1b434:	2050494c 0a746553 00003e0d 2d434552     LIP Set..>..REC-
   1b444:	46522032 2050494c 61656c43 0a646572     2 RFLIP Cleared.
   1b454:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   1b464:	61203944 5320646e 20303144 0a746553     D9 and SD10 Set.
   1b474:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   1b484:	61203944 5320646e 20303144 61656c43     D9 and SD10 Clea
   1b494:	0a646572 00003e0d 2d434552 44532032     red..>..REC-2 SD
   1b4a4:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   1b4b4:	0a746553 00003e0d 2d434552 44532032     Set..>..REC-2 SD
   1b4c4:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   1b4d4:	61656c43 0a646572 00003e0d 500a0d0a     Cleared..>.....P
   1b4e4:	73736572 61705320 42206563 6f207261     ress Space Bar o
   1b4f4:	57532072 7420342d 6572206f 656d7573     r SW-4 to resume
   1b504:	00000000 6562614c 2020736c 202d2030     ....Labels  0 - 
   1b514:	203a3336 00000020 00000020 614c0d0a     63:  ... .....La
   1b524:	736c6562 34362020 3732312d 0020203a     bels  64-127:  .
   1b534:	614c0d0a 736c6562 38323120 3139312d     ..Labels 128-191
   1b544:	0020203a 614c0d0a 736c6562 32393120     :  ...Labels 192
   1b554:	3535322d 0020203a 614c0d0a 736c6562     -255:  ...Labels
   1b564:	20302020 3336202d 0020203a 543e0d0a       0 - 63:  ...>T
   1b574:	20202058 74614420 00003a61 6562614c     X    Data:..Labe
   1b584:	00003a6c 0000003e 2d636552 61442031     l:..>...Rec-1 Da
   1b594:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   1b5a4:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   1b5b4:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   1b5c4:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   1b5d4:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   1b5e4:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   1b5f4:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   1b604:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   1b614:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   1b624:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   1b634:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   1b644:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   1b654:	70736944 2079616c 74617453 61207375     Display Status a
   1b664:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   1b674:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   1b684:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   1b694:	6e6f2074 656d2065 67617373 72662065     t one message fr
   1b6a4:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   1b6b4:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   1b6c4:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   1b6d4:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   1b6e4:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   1b6f4:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   1b704:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   1b714:	74737563 6d206d6f 61737365 00006567     custom message..
   1b724:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   1b734:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   1b744:	00000065 73657250 70732073 62656361     e...Press spaceb
   1b754:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   1b764:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   1b774:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   1b784:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   1b794:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   1b7a4:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   1b7b4:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   1b7c4:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   1b7d4:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   1b7e4:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   1b7f4:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   1b804:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   1b814:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   1b824:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   1b834:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   1b844:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   1b854:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   1b864:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   1b874:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   1b884:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   1b894:	3e0d0a61 00000000                       a..>....

0001b89c <_ZTV15ARINC_Interface>:
	...
   1b8b0:	0001060d 000104dd 00010875 000108d9     ........u.......
   1b8c0:	00010aa5                                ....

0001b8c4 <_ZTT15ARINC_Interface>:
   1b8c4:	0001b8b0 0001b8e8 0001b8e8 0001b8b0     ................

0001b8d4 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   1b8e8:	0001060d 000104dd 00000000 00000000     ................
   1b8f8:	0001134f 636e7546 6e6f6974 65786520     O...Function exe
   1b908:	65747563 75732064 73656363 6c756673     cuted successful
   1b918:	0000796c 63656843 6f79206b 77207275     ly..Check your w
   1b928:	6e697269 46202e67 6873616c 69686320     iring. Flash chi
   1b938:	73692070 6e6f6e20 7365722d 736e6f70     p is non-respons
   1b948:	2e657669 00000000 6e6f632a 75727473     ive.....*constru
   1b958:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
   1b968:	69676562 2029286e 20736177 20746f6e     begin() was not 
   1b978:	6c6c6163 69206465 6f76206e 73206469     called in void s
   1b988:	70757465 00002928 62616e55 7420656c     etup()..Unable t
   1b998:	6469206f 69746e65 63207966 2e706968     o identify chip.
   1b9a8:	65724120 756f7920 72757320 68742065      Are you sure th
   1b9b8:	63207369 20706968 73207369 6f707075     is chip is suppo
   1b9c8:	64657472 0000003f 62616e55 7420656c     rted?...Unable t
   1b9d8:	6469206f 69746e65 63207966 63617061     o identify capac
   1b9e8:	2e797469 20734920 73696874 69686320     ity. Is this chi
   1b9f8:	666f2070 69636966 796c6c61 70757320     p officially sup
   1ba08:	74726f70 203f6465 6e206649 202c746f     ported? If not, 
   1ba18:	61656c70 64206573 6e696665 20612065     please define a 
   1ba28:	50414360 54494341 63206059 74736e6f     `CAPACITY` const
   1ba38:	20746e61 20646e61 6c636e69 20656475     ant and include 
   1ba48:	69207469 6c66206e 2e687361 69676562     it in flash.begi
   1ba58:	4143286e 49434150 2e295954 00000000     n(CAPACITY).....
   1ba68:	70696843 20736920 79737562 0000002e     Chip is busy....
   1ba78:	656b614d 72757320 6c612065 6970206c     Make sure all pi
   1ba88:	6820736e 20657661 6e656562 6e6f6320     ns have been con
   1ba98:	7463656e 70206465 65706f72 00796c72     nected properly.
   1baa8:	65676150 65766f20 6f6c6672 61682077     Page overflow ha
   1bab8:	65622073 64206e65 62617369 2064656c     s been disabled 
   1bac8:	20646e61 20656874 72646461 20737365     and the address 
   1bad8:	6c6c6163 65206465 65656378 74207364     called exceeds t
   1bae8:	6d206568 726f6d65 00000079 62616e55     he memory...Unab
   1baf8:	7420656c 6e45206f 656c6261 69725720     le to Enable Wri
   1bb08:	676e6974 206f7420 70696863 0000002e     ting to chip....
   1bb18:	61656c50 6d206573 20656b61 65727573     Please make sure
   1bb28:	65687420 4c4f4820 20262044 54495257      the HOLD & WRIT
   1bb38:	4f525045 54434554 6e697020 72612073     EPROTECT pins ar
   1bb48:	75702065 64656c6c 20707520 56206f74     e pulled up to V
   1bb58:	00004343 73696854 63657320 20726f74     CC..This sector 
   1bb68:	65726c61 20796461 746e6f63 736e6961     already contains
   1bb78:	74616420 00002e61 61656c50 6d206573      data...Please m
   1bb88:	20656b61 65727573 65687420 63657320     ake sure the sec
   1bb98:	73726f74 69656220 7720676e 74746972     tors being writt
   1bba8:	74206e65 7261206f 72652065 64657361     en to are erased
   1bbb8:	0000002e 20756f59 20657261 6e6e7572     ....You are runn
   1bbc8:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
   1bbd8:	656c5020 20657361 6974706f 6573696d      Please optimise
   1bbe8:	756f7920 72702072 6172676f 6f66206d      your program fo
   1bbf8:	65622072 72657474 4d415220 61737520     r better RAM usa
   1bc08:	00006567 73696854 6e756620 6f697463     ge..This functio
   1bc18:	7369206e 746f6e20 70757320 74726f70     n is not support
   1bc28:	62206465 68742079 6c662065 20687361     ed by the flash 
   1bc38:	6f6d656d 68207972 77647261 2e657261     memory hardware.
   1bc48:	00000000 62616e55 7420656c 7573206f     ....Unable to su
   1bc58:	6e657073 65722f64 656d7573 65706f20     spend/resume ope
   1bc68:	69746172 002e6e6f 74697257 75462065     ration..Write Fu
   1bc78:	6974636e 68206e6f 66207361 656c6961     nction has faile
   1bc88:	72652064 63726f72 6b636568 0000002e     d errorcheck....
   1bc98:	62616e55 7420656c 6e65206f 656c6261     Unable to enable
   1bca8:	622d3420 20657479 72646461 69737365      4-byte addressi
   1bcb8:	002e676e 62616e55 7420656c 6964206f     ng..Unable to di
   1bcc8:	6c626173 2d342065 65747962 64646120     sable 4-byte add
   1bcd8:	73736572 2e676e69 00000000 20656854     ressing.....The 
   1bce8:	70696863 20736920 72727563 6c746e65     chip is currentl
   1bcf8:	6f702079 65726577 6f642064 002e6e77     y powered down..
   1bd08:	20656854 73616c46 68632068 64207069     The Flash chip d
   1bd18:	2073656f 20746f6e 70707573 2074726f     oes not support 
   1bd28:	50444653 0000002e 62616e55 7420656c     SFDP....Unable t
   1bd38:	6572206f 45206461 65736172 72615020     o read Erase Par
   1bd48:	74656d61 20737265 6d6f7266 69686320     ameters from chi
   1bd58:	52202e70 72657665 676e6974 206f7420     p. Reverting to 
   1bd68:	7262696c 20797261 61666564 73746c75     library defaults
   1bd78:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   1bd88:	65206461 65736172 6d697420 66207365     ad erase times f
   1bd98:	206d6f72 73616c66 656d2068 79726f6d     rom flash memory
   1bda8:	6552202e 74726576 20676e69 6c206f74     . Reverting to l
   1bdb8:	61726269 64207972 75616665 2e73746c     ibrary defaults.
   1bdc8:	00000000 62616e55 7420656c 6572206f     ....Unable to re
   1bdd8:	70206461 72676f72 74206d61 73656d69     ad program times
   1bde8:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
   1bdf8:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
   1be08:	62696c20 79726172 66656420 746c7561      library default
   1be18:	00002e73 43206f4e 20706968 656c6553     s...No Chip Sele
   1be28:	70207463 64206e69 6e696665 69206465     ct pin defined i
   1be38:	6874206e 75632065 6d6f7473 49505320     n the custom SPI
   1be48:	72724120 002e7961 6e6b6e55 206e776f      Array..Unknown 
   1be58:	6f727265 00000072 6f727245 6f632072     error...Error co
   1be68:	203a6564 00007830 00000030 74206649     de: 0x..0...If t
   1be78:	20736968 73656f64 746f6e20 6c656820     his does not hel
   1be88:	65722070 766c6f73 6c632f65 66697261     p resolve/clarif
   1be98:	68742079 69207369 65757373 0000202c     y this issue, ..
   1bea8:	61656c70 72206573 65736961 206e6120     please raise an 
   1beb8:	75737369 74612065 74746820 2f2f3a70     issue at http://
   1bec8:	2e777777 2d327368 69676e65 7265656e     www.hs2-engineer
   1bed8:	2e676e69 692f6564 7865646e 7068702e     ing.de/index.php
   1bee8:	6e6f632f 74636174 6d74682e 6977206c     /contact.html wi
   1bef8:	74206874 64206568 69617465 6f20736c     th the details o
   1bf08:	68772066 79207461 2072756f 65726577     f what your were
   1bf18:	696f6420 7720676e 206e6568 73696874      doing when this
   1bf28:	72726520 6f20726f 72756363 00646572      error occurred.

0001bf38 <maxEventCount>:
   1bf38:	01000010                                         ..

0001bf3a <sizeOfEventQueue>:
   1bf3a:	ffff0100                                         ..

0001bf3c <forever>:
   1bf3c:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   1bf4c:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   1bf5c:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   1bf6c:	6f697067 7361625f 00682e65              gpio_base.h.

0001bf78 <_ZTV14Calendar_Class>:
	...
   1bf80:	00012d7d 00012e6d                       }-..m...

0001bf88 <_ZTV17DateTimeLog_Class>:
	...
   1bf90:	0001134f 0001134f                       O...O...

0001bf98 <_ZTV9CDC_Class>:
	...
   1bfa0:	00013995 00013a49 000136ad 0001395d     .9..I:...6..]9..
   1bfb0:	00013ac5 00013921 00013891 000138e1     .:..!9...8...8..
   1bfc0:	0001397d 000139cd                       }9...9..

0001bfc8 <_ZTV6Stream>:
	...
   1bfd0:	0001134f 00013b59 000136ad 000136c1     O...Y;...6...6..
   1bfe0:	0001134f 0001134f 0001134f 2e257830     O...O...O...0x%.
   1bff0:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1c000:	0066766f                                ovf.

0001c004 <_ZTV5Print>:
	...
   1c00c:	0001134f 00013b59 000136ad 000136c1     O...Y;...6...6..
   1c01c:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1c02c:	00632e6f 00776f70 00000000              o.c.pow.....

0001c038 <TWO52>:
   1c038:	00000000 43300000 00000000 c3300000     ......0C......0.

0001c048 <_global_impure_ptr>:
   1c048:	200001a0                                ... 

0001c04c <__month_lengths>:
   1c04c:	0000001f 0000001c 0000001f 0000001e     ................
   1c05c:	0000001f 0000001e 0000001f 0000001f     ................
   1c06c:	0000001e 0000001f 0000001e 0000001f     ................
   1c07c:	0000001f 0000001d 0000001f 0000001e     ................
   1c08c:	0000001f 0000001e 0000001f 0000001f     ................
   1c09c:	0000001e 0000001f 0000001e 0000001f     ................
   1c0ac:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   1c0bc:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   1c0cc:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   1c0dc:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   1c0ec:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   1c0fc:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   1c10c:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   1c11c:	000a6425                                %d..

0001c120 <day_name.4727>:
   1c120:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   1c130:	61536972 00000074                       riSat...

0001c138 <mon_name.4728>:
   1c138:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   1c148:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   1c158:	63654476 33323130 37363534 42413938     vDec0123456789AB
   1c168:	46454443 00000000 33323130 37363534     CDEF....01234567
   1c178:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   1c188:	0000296c                                l)..

0001c18c <blanks.7203>:
   1c18c:	20202020 20202020 20202020 20202020                     

0001c19c <zeroes.7204>:
   1c19c:	30303030 30303030 30303030 30303030     0000000000000000

0001c1ac <basefix.6796>:
   1c1ac:	0001000a 00030002 00050004 00070006     ................
   1c1bc:	00090008 000b000a 000d000c 000f000e     ................
   1c1cc:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   1c1dc:	0000002e                                ....

0001c1e0 <_ctype_>:
   1c1e0:	20202000 20202020 28282020 20282828     .         ((((( 
   1c1f0:	20202020 20202020 20202020 20202020                     
   1c200:	10108820 10101010 10101010 10101010      ...............
   1c210:	04040410 04040404 10040404 10101010     ................
   1c220:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1c230:	01010101 01010101 01010101 10101010     ................
   1c240:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1c250:	02020202 02020202 02020202 10101010     ................
   1c260:	00000020 00000000 00000000 00000000      ...............
	...

0001c2e4 <_init>:
   1c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2e6:	bf00      	nop
   1c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c2ea:	bc08      	pop	{r3}
   1c2ec:	469e      	mov	lr, r3
   1c2ee:	4770      	bx	lr

0001c2f0 <__init_array_start>:
   1c2f0:	00016ff5 	.word	0x00016ff5

0001c2f4 <__frame_dummy_init_array_entry>:
   1c2f4:	00000289 000006c5 000007e9 00000885     ................
   1c304:	00000f01 000012bd 000018d1 00001cf5     ................
   1c314:	00002d51 00010b69 0001162d 000119f9     Q-..i...-.......
   1c324:	000120a1 0001295d 000130b9 00013675     . ..])...0..u6..
   1c334:	00013b45 00014281                       E;...B..

0001c33c <_fini>:
   1c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c33e:	bf00      	nop
   1c340:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c342:	bc08      	pop	{r3}
   1c344:	469e      	mov	lr, r3
   1c346:	4770      	bx	lr

0001c348 <__fini_array_start>:
   1c348:	00000265 	.word	0x00000265
