
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00018684  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00018684  00018684  00028684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000005f4  20000000  0001868c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000305f4  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000305f4  2**0
                  CONTENTS
  5 .bss          00004b50  200005f8  00018c88  000305f8  2**3
                  ALLOC
  6 .stack        00010000  20005148  0001d7d8  000305f8  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  000305f4  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030622  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c5d39  00000000  00000000  0003067b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010aca  00000000  00000000  000f63b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000248e7  00000000  00000000  00106e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000041c0  00000000  00000000  0012b765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003cb8  00000000  00000000  0012f925  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005e97c  00000000  00000000  001335dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005aa8c  00000000  00000000  00191f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00148016  00000000  00000000  001ec9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011778  00000000  00000000  003349fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 51 01 20 65 0d 00 00 e9 0d 00 00 e9 0d 00 00     HQ. e...........
      10:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 00 00 00 00     ................
	...
      2c:	e9 0d 00 00 e9 0d 00 00 00 00 00 00 e9 0d 00 00     ................
      3c:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      4c:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      5c:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      6c:	a9 8c 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      7c:	e9 0d 00 00 dd 76 00 00 ed 76 00 00 fd 76 00 00     .....v...v...v..
      8c:	0d 77 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     .w..............
      9c:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      ac:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      bc:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      cc:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
      dc:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 00 00 00 00     ................
	...
      f4:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     104:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     114:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     124:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     134:	e9 0d 00 00 75 a1 00 00 91 a1 00 00 ad a1 00 00     ....u...........
     144:	c9 a1 00 00 e5 a1 00 00 01 a2 00 00 1d a2 00 00     ................
     154:	39 a2 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     9...............
     164:	e9 0d 00 00 55 a2 00 00 71 a2 00 00 8d a2 00 00     ....U...q.......
     174:	a9 a2 00 00 e9 0d 00 00 31 69 00 00 29 de 00 00     ........1i..)...
     184:	39 de 00 00 49 de 00 00 59 de 00 00 e9 0d 00 00     9...I...Y.......
     194:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     1a4:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     1b4:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     1c4:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     1d4:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     1e4:	e9 0d 00 00 e9 0d 00 00 f5 b4 00 00 11 b5 00 00     ................
     1f4:	2d b5 00 00 49 b5 00 00 65 b5 00 00 81 b5 00 00     -...I...e.......
     204:	e9 0d 00 00 9d b5 00 00 e9 0d 00 00 e9 0d 00 00     ................
     214:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     224:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     234:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     244:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................
     254:	e9 0d 00 00 e9 0d 00 00 e9 0d 00 00 e9 0d 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005f8 	.word	0x200005f8
     280:	00000000 	.word	0x00000000
     284:	0001868c 	.word	0x0001868c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001868c 	.word	0x0001868c
     2c4:	200005fc 	.word	0x200005fc
     2c8:	0001868c 	.word	0x0001868c
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZN9ALU_ClassC1Ev>:
#include "DateTime_Class.h"
#include "N25Q256_Class.h"


// default constructor
ALU_Class::ALU_Class()
     2ec:	b480      	push	{r7}
     2ee:	b083      	sub	sp, #12
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
{
	ptrPbit=&pBIT;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	4a04      	ldr	r2, [pc, #16]	; (308 <_ZN9ALU_ClassC1Ev+0x1c>)
     2f8:	611a      	str	r2, [r3, #16]
} //ALU_Class
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	4618      	mov	r0, r3
     2fe:	370c      	adds	r7, #12
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	200029c8 	.word	0x200029c8

0000030c <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
{
} //~ALU_Class
     314:	687b      	ldr	r3, [r7, #4]
     316:	4618      	mov	r0, r3
     318:	370c      	adds	r7, #12
     31a:	46bd      	mov	sp, r7
     31c:	bc80      	pop	{r7}
     31e:	4770      	bx	lr

00000320 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     320:	b580      	push	{r7, lr}
     322:	b086      	sub	sp, #24
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	StartLivePulse();
     328:	6878      	ldr	r0, [r7, #4]
     32a:	4b2a      	ldr	r3, [pc, #168]	; (3d4 <_ZN9ALU_Class4InitEv+0xb4>)
     32c:	4798      	blx	r3
	cBit.statusBits.hvacOK=hvac.Init();
     32e:	482a      	ldr	r0, [pc, #168]	; (3d8 <_ZN9ALU_Class4InitEv+0xb8>)
     330:	4b2a      	ldr	r3, [pc, #168]	; (3dc <_ZN9ALU_Class4InitEv+0xbc>)
     332:	4798      	blx	r3
     334:	4603      	mov	r3, r0
     336:	461a      	mov	r2, r3
     338:	4b29      	ldr	r3, [pc, #164]	; (3e0 <_ZN9ALU_Class4InitEv+0xc0>)
     33a:	701a      	strb	r2, [r3, #0]
	hvac.SetCRCConfigData();
     33c:	4826      	ldr	r0, [pc, #152]	; (3d8 <_ZN9ALU_Class4InitEv+0xb8>)
     33e:	4b29      	ldr	r3, [pc, #164]	; (3e4 <_ZN9ALU_Class4InitEv+0xc4>)
     340:	4798      	blx	r3
	SetInitialConfiguration(configuration);
     342:	687b      	ldr	r3, [r7, #4]
     344:	3318      	adds	r3, #24
     346:	4619      	mov	r1, r3
     348:	6878      	ldr	r0, [r7, #4]
     34a:	4b27      	ldr	r3, [pc, #156]	; (3e8 <_ZN9ALU_Class4InitEv+0xc8>)
     34c:	4798      	blx	r3
	memory.WriteDefaultState();
     34e:	4827      	ldr	r0, [pc, #156]	; (3ec <_ZN9ALU_Class4InitEv+0xcc>)
     350:	4b27      	ldr	r3, [pc, #156]	; (3f0 <_ZN9ALU_Class4InitEv+0xd0>)
     352:	4798      	blx	r3
	hvac.SetInitialState();
     354:	4820      	ldr	r0, [pc, #128]	; (3d8 <_ZN9ALU_Class4InitEv+0xb8>)
     356:	4b27      	ldr	r3, [pc, #156]	; (3f4 <_ZN9ALU_Class4InitEv+0xd4>)
     358:	4798      	blx	r3
	uhr.Init();
     35a:	4827      	ldr	r0, [pc, #156]	; (3f8 <_ZN9ALU_Class4InitEv+0xd8>)
     35c:	4b27      	ldr	r3, [pc, #156]	; (3fc <_ZN9ALU_Class4InitEv+0xdc>)
     35e:	4798      	blx	r3
	hvac.saveCurrentState();
     360:	481d      	ldr	r0, [pc, #116]	; (3d8 <_ZN9ALU_Class4InitEv+0xb8>)
     362:	4b27      	ldr	r3, [pc, #156]	; (400 <_ZN9ALU_Class4InitEv+0xe0>)
     364:	4798      	blx	r3
	s=arinc.Init();
     366:	4827      	ldr	r0, [pc, #156]	; (404 <_ZN9ALU_Class4InitEv+0xe4>)
     368:	4b27      	ldr	r3, [pc, #156]	; (408 <_ZN9ALU_Class4InitEv+0xe8>)
     36a:	4798      	blx	r3
     36c:	4603      	mov	r3, r0
     36e:	617b      	str	r3, [r7, #20]
	if (s!=0x01)
     370:	697b      	ldr	r3, [r7, #20]
     372:	2b01      	cmp	r3, #1
     374:	d00e      	beq.n	394 <_ZN9ALU_Class4InitEv+0x74>
	{	
		NotifyError(kARINCINnterfaceError,s);
     376:	f107 030c 	add.w	r3, r7, #12
     37a:	6979      	ldr	r1, [r7, #20]
     37c:	4618      	mov	r0, r3
     37e:	4b23      	ldr	r3, [pc, #140]	; (40c <_ZN9ALU_Class4InitEv+0xec>)
     380:	4798      	blx	r3
     382:	f107 030c 	add.w	r3, r7, #12
     386:	461a      	mov	r2, r3
     388:	2100      	movs	r1, #0
     38a:	6878      	ldr	r0, [r7, #4]
     38c:	4b20      	ldr	r3, [pc, #128]	; (410 <_ZN9ALU_Class4InitEv+0xf0>)
     38e:	4798      	blx	r3
		return s;
     390:	697b      	ldr	r3, [r7, #20]
     392:	e01a      	b.n	3ca <_ZN9ALU_Class4InitEv+0xaa>
	} 
	else
	{
		s=pBIT.CheckCurrentStatus(status);
     394:	687b      	ldr	r3, [r7, #4]
     396:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     39a:	4619      	mov	r1, r3
     39c:	481d      	ldr	r0, [pc, #116]	; (414 <_ZN9ALU_Class4InitEv+0xf4>)
     39e:	4b1e      	ldr	r3, [pc, #120]	; (418 <_ZN9ALU_Class4InitEv+0xf8>)
     3a0:	4798      	blx	r3
     3a2:	6178      	str	r0, [r7, #20]
		if (s>0)
     3a4:	697b      	ldr	r3, [r7, #20]
     3a6:	2b00      	cmp	r3, #0
     3a8:	d00e      	beq.n	3c8 <_ZN9ALU_Class4InitEv+0xa8>
		{
			NotifyError(kpBITError,s);
     3aa:	f107 0310 	add.w	r3, r7, #16
     3ae:	6979      	ldr	r1, [r7, #20]
     3b0:	4618      	mov	r0, r3
     3b2:	4b16      	ldr	r3, [pc, #88]	; (40c <_ZN9ALU_Class4InitEv+0xec>)
     3b4:	4798      	blx	r3
     3b6:	f107 0310 	add.w	r3, r7, #16
     3ba:	461a      	mov	r2, r3
     3bc:	2101      	movs	r1, #1
     3be:	6878      	ldr	r0, [r7, #4]
     3c0:	4b13      	ldr	r3, [pc, #76]	; (410 <_ZN9ALU_Class4InitEv+0xf0>)
     3c2:	4798      	blx	r3
			return s;
     3c4:	697b      	ldr	r3, [r7, #20]
     3c6:	e000      	b.n	3ca <_ZN9ALU_Class4InitEv+0xaa>
		{
			
		}
	}
	  
	return s;
     3c8:	697b      	ldr	r3, [r7, #20]
}
     3ca:	4618      	mov	r0, r3
     3cc:	3718      	adds	r7, #24
     3ce:	46bd      	mov	sp, r7
     3d0:	bd80      	pop	{r7, pc}
     3d2:	bf00      	nop
     3d4:	00000481 	.word	0x00000481
     3d8:	200029dc 	.word	0x200029dc
     3dc:	00001f9d 	.word	0x00001f9d
     3e0:	20000d84 	.word	0x20000d84
     3e4:	00002aa5 	.word	0x00002aa5
     3e8:	000004cd 	.word	0x000004cd
     3ec:	20001578 	.word	0x20001578
     3f0:	00001939 	.word	0x00001939
     3f4:	00000985 	.word	0x00000985
     3f8:	20000d88 	.word	0x20000d88
     3fc:	00000cbd 	.word	0x00000cbd
     400:	000029ad 	.word	0x000029ad
     404:	20003574 	.word	0x20003574
     408:	000108a5 	.word	0x000108a5
     40c:	000002d1 	.word	0x000002d1
     410:	000005f5 	.word	0x000005f5
     414:	200029c8 	.word	0x200029c8
     418:	00001ad9 	.word	0x00001ad9

0000041c <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     41c:	b580      	push	{r7, lr}
     41e:	b082      	sub	sp, #8
     420:	af00      	add	r7, sp, #0
     422:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     424:	4811      	ldr	r0, [pc, #68]	; (46c <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     426:	4b12      	ldr	r3, [pc, #72]	; (470 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     428:	4798      	blx	r3
     42a:	4603      	mov	r3, r0
     42c:	461a      	mov	r2, r3
     42e:	687b      	ldr	r3, [r7, #4]
     430:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
		switch (activeLine)
     434:	687b      	ldr	r3, [r7, #4]
     436:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
     43a:	2b01      	cmp	r3, #1
     43c:	d002      	beq.n	444 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     43e:	2b02      	cmp	r3, #2
     440:	d004      	beq.n	44c <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     442:	e007      	b.n	454 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     444:	4b0b      	ldr	r3, [pc, #44]	; (474 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     446:	4a0c      	ldr	r2, [pc, #48]	; (478 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     448:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     44a:	e007      	b.n	45c <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     44c:	4b09      	ldr	r3, [pc, #36]	; (474 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     44e:	4a0b      	ldr	r2, [pc, #44]	; (47c <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     450:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     452:	e003      	b.n	45c <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     454:	4b07      	ldr	r3, [pc, #28]	; (474 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     456:	4a08      	ldr	r2, [pc, #32]	; (478 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     458:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     45a:	bf00      	nop
		}
	return activeLine;	
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
}
     462:	4618      	mov	r0, r3
     464:	3708      	adds	r7, #8
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}
     46a:	bf00      	nop
     46c:	20003574 	.word	0x20003574
     470:	00011273 	.word	0x00011273
     474:	20000d80 	.word	0x20000d80
     478:	20000760 	.word	0x20000760
     47c:	20000a70 	.word	0x20000a70

00000480 <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     480:	b580      	push	{r7, lr}
     482:	b084      	sub	sp, #16
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     488:	4909      	ldr	r1, [pc, #36]	; (4b0 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     48a:	480a      	ldr	r0, [pc, #40]	; (4b4 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     48c:	4b0a      	ldr	r3, [pc, #40]	; (4b8 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     48e:	4798      	blx	r3
     490:	4603      	mov	r3, r0
     492:	490a      	ldr	r1, [pc, #40]	; (4bc <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     494:	4618      	mov	r0, r3
     496:	4b0a      	ldr	r3, [pc, #40]	; (4c0 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     498:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     49a:	480a      	ldr	r0, [pc, #40]	; (4c4 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     49c:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     49e:	4798      	blx	r3
     4a0:	4603      	mov	r3, r0
     4a2:	60fb      	str	r3, [r7, #12]
	return p;
     4a4:	68fb      	ldr	r3, [r7, #12]
     4a6:	b2db      	uxtb	r3, r3
}
     4a8:	4618      	mov	r0, r3
     4aa:	3710      	adds	r7, #16
     4ac:	46bd      	mov	sp, r7
     4ae:	bd80      	pop	{r7, pc}
     4b0:	00016988 	.word	0x00016988
     4b4:	20004d34 	.word	0x20004d34
     4b8:	00000669 	.word	0x00000669
     4bc:	00016984 	.word	0x00016984
     4c0:	00000649 	.word	0x00000649
     4c4:	20004f50 	.word	0x20004f50
     4c8:	00004d31 	.word	0x00004d31

000004cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     4cc:	b580      	push	{r7, lr}
     4ce:	b088      	sub	sp, #32
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
     4d4:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     4d6:	2300      	movs	r3, #0
     4d8:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     4da:	6839      	ldr	r1, [r7, #0]
     4dc:	4835      	ldr	r0, [pc, #212]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     4de:	4b36      	ldr	r3, [pc, #216]	; (5b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xec>)
     4e0:	4798      	blx	r3
     4e2:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     4e4:	4835      	ldr	r0, [pc, #212]	; (5bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     4e6:	4b36      	ldr	r3, [pc, #216]	; (5c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf4>)
     4e8:	4798      	blx	r3
     4ea:	4603      	mov	r3, r0
     4ec:	2b00      	cmp	r3, #0
     4ee:	d007      	beq.n	500 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	3318      	adds	r3, #24
     4f4:	4619      	mov	r1, r3
     4f6:	482f      	ldr	r0, [pc, #188]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     4f8:	4b32      	ldr	r3, [pc, #200]	; (5c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf8>)
     4fa:	4798      	blx	r3
     4fc:	61f8      	str	r0, [r7, #28]
     4fe:	e04d      	b.n	59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     500:	22ac      	movs	r2, #172	; 0xac
     502:	6839      	ldr	r1, [r7, #0]
     504:	482d      	ldr	r0, [pc, #180]	; (5bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     506:	4b30      	ldr	r3, [pc, #192]	; (5c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     508:	4798      	blx	r3
     50a:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     50c:	4829      	ldr	r0, [pc, #164]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     50e:	4b2f      	ldr	r3, [pc, #188]	; (5cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x100>)
     510:	4798      	blx	r3
     512:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     514:	697a      	ldr	r2, [r7, #20]
     516:	693b      	ldr	r3, [r7, #16]
     518:	429a      	cmp	r2, r3
     51a:	d108      	bne.n	52e <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	683a      	ldr	r2, [r7, #0]
     520:	3318      	adds	r3, #24
     522:	4611      	mov	r1, r2
     524:	22ac      	movs	r2, #172	; 0xac
     526:	4618      	mov	r0, r3
     528:	4b29      	ldr	r3, [pc, #164]	; (5d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     52a:	4798      	blx	r3
     52c:	e036      	b.n	59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     52e:	687b      	ldr	r3, [r7, #4]
     530:	3318      	adds	r3, #24
     532:	4619      	mov	r1, r3
     534:	481f      	ldr	r0, [pc, #124]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     536:	4b27      	ldr	r3, [pc, #156]	; (5d4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     538:	4798      	blx	r3
     53a:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	3318      	adds	r3, #24
     540:	22ac      	movs	r2, #172	; 0xac
     542:	4619      	mov	r1, r3
     544:	481d      	ldr	r0, [pc, #116]	; (5bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf0>)
     546:	4b20      	ldr	r3, [pc, #128]	; (5c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xfc>)
     548:	4798      	blx	r3
     54a:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     54c:	4b22      	ldr	r3, [pc, #136]	; (5d8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     54e:	f8d3 256c 	ldr.w	r2, [r3, #1388]	; 0x56c
     552:	697b      	ldr	r3, [r7, #20]
     554:	429a      	cmp	r2, r3
     556:	d105      	bne.n	564 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     558:	6979      	ldr	r1, [r7, #20]
     55a:	4816      	ldr	r0, [pc, #88]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     55c:	4b1f      	ldr	r3, [pc, #124]	; (5dc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     55e:	4798      	blx	r3
     560:	61b8      	str	r0, [r7, #24]
     562:	e01b      	b.n	59c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xd0>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     564:	687b      	ldr	r3, [r7, #4]
     566:	4a1e      	ldr	r2, [pc, #120]	; (5e0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     568:	3318      	adds	r3, #24
     56a:	4611      	mov	r1, r2
     56c:	22ac      	movs	r2, #172	; 0xac
     56e:	4618      	mov	r0, r3
     570:	4b17      	ldr	r3, [pc, #92]	; (5d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x104>)
     572:	4798      	blx	r3
				e=qspiFlash.Erase(0);
     574:	2100      	movs	r1, #0
     576:	481b      	ldr	r0, [pc, #108]	; (5e4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     578:	4b1b      	ldr	r3, [pc, #108]	; (5e8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     57a:	4798      	blx	r3
     57c:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration(configuration);
     57e:	687b      	ldr	r3, [r7, #4]
     580:	3318      	adds	r3, #24
     582:	4619      	mov	r1, r3
     584:	480b      	ldr	r0, [pc, #44]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     586:	4b19      	ldr	r3, [pc, #100]	; (5ec <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     588:	4798      	blx	r3
     58a:	61b8      	str	r0, [r7, #24]
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     58c:	4b12      	ldr	r3, [pc, #72]	; (5d8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     58e:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
     592:	4619      	mov	r1, r3
     594:	4807      	ldr	r0, [pc, #28]	; (5b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xe8>)
     596:	4b11      	ldr	r3, [pc, #68]	; (5dc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     598:	4798      	blx	r3
     59a:	61b8      	str	r0, [r7, #24]
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	3318      	adds	r3, #24
     5a0:	4619      	mov	r1, r3
     5a2:	480d      	ldr	r0, [pc, #52]	; (5d8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     5a4:	4b12      	ldr	r3, [pc, #72]	; (5f0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     5a6:	4798      	blx	r3
	return r;
     5a8:	69fb      	ldr	r3, [r7, #28]
};
     5aa:	4618      	mov	r0, r3
     5ac:	3720      	adds	r7, #32
     5ae:	46bd      	mov	sp, r7
     5b0:	bd80      	pop	{r7, pc}
     5b2:	bf00      	nop
     5b4:	20001578 	.word	0x20001578
     5b8:	000017c9 	.word	0x000017c9
     5bc:	200013bc 	.word	0x200013bc
     5c0:	00001d0d 	.word	0x00001d0d
     5c4:	000017f9 	.word	0x000017f9
     5c8:	00000b31 	.word	0x00000b31
     5cc:	00001861 	.word	0x00001861
     5d0:	0001652d 	.word	0x0001652d
     5d4:	00001799 	.word	0x00001799
     5d8:	200029dc 	.word	0x200029dc
     5dc:	0000199d 	.word	0x0000199d
     5e0:	00016a38 	.word	0x00016a38
     5e4:	200049c8 	.word	0x200049c8
     5e8:	000129fd 	.word	0x000129fd
     5ec:	00001909 	.word	0x00001909
     5f0:	00002a55 	.word	0x00002a55

000005f4 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     5f4:	b580      	push	{r7, lr}
     5f6:	b084      	sub	sp, #16
     5f8:	af00      	add	r7, sp, #0
     5fa:	60f8      	str	r0, [r7, #12]
     5fc:	460b      	mov	r3, r1
     5fe:	607a      	str	r2, [r7, #4]
     600:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     602:	7afb      	ldrb	r3, [r7, #11]
     604:	b29b      	uxth	r3, r3
     606:	687a      	ldr	r2, [r7, #4]
     608:	4619      	mov	r1, r3
     60a:	4803      	ldr	r0, [pc, #12]	; (618 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     60c:	4b03      	ldr	r3, [pc, #12]	; (61c <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     60e:	4798      	blx	r3
}
     610:	bf00      	nop
     612:	3710      	adds	r7, #16
     614:	46bd      	mov	sp, r7
     616:	bd80      	pop	{r7, pc}
     618:	200048c4 	.word	0x200048c4
     61c:	000118c1 	.word	0x000118c1

00000620 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     620:	b580      	push	{r7, lr}
     622:	b082      	sub	sp, #8
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
     628:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     62a:	683b      	ldr	r3, [r7, #0]
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	220a      	movs	r2, #10
     630:	4619      	mov	r1, r3
     632:	6878      	ldr	r0, [r7, #4]
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <_ZlsIhER5PrintS1_RKT_+0x24>)
     636:	4798      	blx	r3
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	3708      	adds	r7, #8
     63e:	46bd      	mov	sp, r7
     640:	bd80      	pop	{r7, pc}
     642:	bf00      	nop
     644:	00013ff5 	.word	0x00013ff5

00000648 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
     650:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     652:	6839      	ldr	r1, [r7, #0]
     654:	6878      	ldr	r0, [r7, #4]
     656:	4b03      	ldr	r3, [pc, #12]	; (664 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     658:	4798      	blx	r3
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	4618      	mov	r0, r3
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	00013fb1 	.word	0x00013fb1

00000668 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     668:	b580      	push	{r7, lr}
     66a:	b082      	sub	sp, #8
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
     670:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     672:	6839      	ldr	r1, [r7, #0]
     674:	6878      	ldr	r0, [r7, #4]
     676:	4b03      	ldr	r3, [pc, #12]	; (684 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     678:	4798      	blx	r3
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	4618      	mov	r0, r3
     67e:	3708      	adds	r7, #8
     680:	46bd      	mov	sp, r7
     682:	bd80      	pop	{r7, pc}
     684:	00013fb1 	.word	0x00013fb1

00000688 <_Z41__static_initialization_and_destruction_0ii>:
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     688:	b580      	push	{r7, lr}
     68a:	b082      	sub	sp, #8
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
     690:	6039      	str	r1, [r7, #0]
     692:	687b      	ldr	r3, [r7, #4]
     694:	2b01      	cmp	r3, #1
     696:	d10c      	bne.n	6b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     698:	683b      	ldr	r3, [r7, #0]
     69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     69e:	4293      	cmp	r3, r2
     6a0:	d107      	bne.n	6b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     6a2:	4806      	ldr	r0, [pc, #24]	; (6bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
     6a4:	4b06      	ldr	r3, [pc, #24]	; (6c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     6a6:	4798      	blx	r3
     6a8:	4a06      	ldr	r2, [pc, #24]	; (6c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     6aa:	4907      	ldr	r1, [pc, #28]	; (6c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     6ac:	4803      	ldr	r0, [pc, #12]	; (6bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
     6ae:	4b07      	ldr	r3, [pc, #28]	; (6cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     6b0:	4798      	blx	r3
     6b2:	bf00      	nop
     6b4:	3708      	adds	r7, #8
     6b6:	46bd      	mov	sp, r7
     6b8:	bd80      	pop	{r7, pc}
     6ba:	bf00      	nop
     6bc:	20000614 	.word	0x20000614
     6c0:	000002ed 	.word	0x000002ed
     6c4:	20000000 	.word	0x20000000
     6c8:	0000030d 	.word	0x0000030d
     6cc:	00014919 	.word	0x00014919

000006d0 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev>:
     6d0:	b580      	push	{r7, lr}
     6d2:	af00      	add	r7, sp, #0
     6d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     6d8:	2001      	movs	r0, #1
     6da:	4b01      	ldr	r3, [pc, #4]	; (6e0 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x10>)
     6dc:	4798      	blx	r3
     6de:	bd80      	pop	{r7, pc}
     6e0:	00000689 	.word	0x00000689

000006e4 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     6e4:	b580      	push	{r7, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	4618      	mov	r0, r3
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <_ZN10AMMC_ClassC1Ev+0x34>)
     6f2:	4798      	blx	r3
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	4a09      	ldr	r2, [pc, #36]	; (71c <_ZN10AMMC_ClassC1Ev+0x38>)
     6f8:	4611      	mov	r1, r2
     6fa:	4618      	mov	r0, r3
     6fc:	4b08      	ldr	r3, [pc, #32]	; (720 <_ZN10AMMC_ClassC1Ev+0x3c>)
     6fe:	4798      	blx	r3
     700:	4a08      	ldr	r2, [pc, #32]	; (724 <_ZN10AMMC_ClassC1Ev+0x40>)
     702:	687b      	ldr	r3, [r7, #4]
     704:	601a      	str	r2, [r3, #0]
     706:	4a07      	ldr	r2, [pc, #28]	; (724 <_ZN10AMMC_ClassC1Ev+0x40>)
     708:	687b      	ldr	r3, [r7, #4]
     70a:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	4618      	mov	r0, r3
     710:	3708      	adds	r7, #8
     712:	46bd      	mov	sp, r7
     714:	bd80      	pop	{r7, pc}
     716:	bf00      	nop
     718:	00010401 	.word	0x00010401
     71c:	000169d4 	.word	0x000169d4
     720:	000106d9 	.word	0x000106d9
     724:	000169bc 	.word	0x000169bc

00000728 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	4a0a      	ldr	r2, [pc, #40]	; (75c <_ZN10AMMC_ClassD1Ev+0x34>)
     732:	687b      	ldr	r3, [r7, #4]
     734:	601a      	str	r2, [r3, #0]
     736:	4a09      	ldr	r2, [pc, #36]	; (75c <_ZN10AMMC_ClassD1Ev+0x34>)
     738:	687b      	ldr	r3, [r7, #4]
     73a:	601a      	str	r2, [r3, #0]
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	4a08      	ldr	r2, [pc, #32]	; (760 <_ZN10AMMC_ClassD1Ev+0x38>)
     740:	4611      	mov	r1, r2
     742:	4618      	mov	r0, r3
     744:	4b07      	ldr	r3, [pc, #28]	; (764 <_ZN10AMMC_ClassD1Ev+0x3c>)
     746:	4798      	blx	r3
     748:	687b      	ldr	r3, [r7, #4]
     74a:	4618      	mov	r0, r3
     74c:	4b06      	ldr	r3, [pc, #24]	; (768 <_ZN10AMMC_ClassD1Ev+0x40>)
     74e:	4798      	blx	r3
{
} //~AMMC_Class
     750:	687b      	ldr	r3, [r7, #4]
     752:	4618      	mov	r0, r3
     754:	3708      	adds	r7, #8
     756:	46bd      	mov	sp, r7
     758:	bd80      	pop	{r7, pc}
     75a:	bf00      	nop
     75c:	000169bc 	.word	0x000169bc
     760:	000169d4 	.word	0x000169d4
     764:	000107b1 	.word	0x000107b1
     768:	00010421 	.word	0x00010421

0000076c <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     774:	6878      	ldr	r0, [r7, #4]
     776:	4b06      	ldr	r3, [pc, #24]	; (790 <_ZN10AMMC_ClassD0Ev+0x24>)
     778:	4798      	blx	r3
     77a:	f44f 7144 	mov.w	r1, #784	; 0x310
     77e:	6878      	ldr	r0, [r7, #4]
     780:	4b04      	ldr	r3, [pc, #16]	; (794 <_ZN10AMMC_ClassD0Ev+0x28>)
     782:	4798      	blx	r3
     784:	687b      	ldr	r3, [r7, #4]
     786:	4618      	mov	r0, r3
     788:	3708      	adds	r7, #8
     78a:	46bd      	mov	sp, r7
     78c:	bd80      	pop	{r7, pc}
     78e:	bf00      	nop
     790:	00000729 	.word	0x00000729
     794:	00014925 	.word	0x00014925

00000798 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     798:	b580      	push	{r7, lr}
     79a:	b082      	sub	sp, #8
     79c:	af00      	add	r7, sp, #0
     79e:	6078      	str	r0, [r7, #4]
     7a0:	6039      	str	r1, [r7, #0]
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	2b01      	cmp	r3, #1
     7a6:	d114      	bne.n	7d2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     7a8:	683b      	ldr	r3, [r7, #0]
     7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     7ae:	4293      	cmp	r3, r2
     7b0:	d10f      	bne.n	7d2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     7b2:	480a      	ldr	r0, [pc, #40]	; (7dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     7b4:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     7b6:	4798      	blx	r3
     7b8:	4a0a      	ldr	r2, [pc, #40]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     7ba:	490b      	ldr	r1, [pc, #44]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     7bc:	4807      	ldr	r0, [pc, #28]	; (7dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     7be:	4b0b      	ldr	r3, [pc, #44]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0x54>)
     7c0:	4798      	blx	r3
AMMC_Class	ammc2;
     7c2:	480b      	ldr	r0, [pc, #44]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     7c6:	4798      	blx	r3
     7c8:	4a06      	ldr	r2, [pc, #24]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     7ca:	4907      	ldr	r1, [pc, #28]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     7cc:	4808      	ldr	r0, [pc, #32]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     7ce:	4b07      	ldr	r3, [pc, #28]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0x54>)
     7d0:	4798      	blx	r3
     7d2:	bf00      	nop
     7d4:	3708      	adds	r7, #8
     7d6:	46bd      	mov	sp, r7
     7d8:	bd80      	pop	{r7, pc}
     7da:	bf00      	nop
     7dc:	20000760 	.word	0x20000760
     7e0:	000006e5 	.word	0x000006e5
     7e4:	20000000 	.word	0x20000000
     7e8:	00000729 	.word	0x00000729
     7ec:	00014919 	.word	0x00014919
     7f0:	20000a70 	.word	0x20000a70

000007f4 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     7f4:	b580      	push	{r7, lr}
     7f6:	af00      	add	r7, sp, #0
     7f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     7fc:	2001      	movs	r0, #1
     7fe:	4b01      	ldr	r3, [pc, #4]	; (804 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     800:	4798      	blx	r3
     802:	bd80      	pop	{r7, pc}
     804:	00000799 	.word	0x00000799

00000808 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     808:	b480      	push	{r7}
     80a:	b083      	sub	sp, #12
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
{
} //CBIT_Class
     810:	687b      	ldr	r3, [r7, #4]
     812:	4618      	mov	r0, r3
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	bc80      	pop	{r7}
     81a:	4770      	bx	lr

0000081c <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     81c:	b480      	push	{r7}
     81e:	b083      	sub	sp, #12
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     824:	687b      	ldr	r3, [r7, #4]
     826:	4618      	mov	r0, r3
     828:	370c      	adds	r7, #12
     82a:	46bd      	mov	sp, r7
     82c:	bc80      	pop	{r7}
     82e:	4770      	bx	lr

00000830 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     830:	b480      	push	{r7}
     832:	b083      	sub	sp, #12
     834:	af00      	add	r7, sp, #0
     836:	6078      	str	r0, [r7, #4]
	return	isOK;
     838:	687b      	ldr	r3, [r7, #4]
     83a:	785b      	ldrb	r3, [r3, #1]
     83c:	b2db      	uxtb	r3, r3
}
     83e:	4618      	mov	r0, r3
     840:	370c      	adds	r7, #12
     842:	46bd      	mov	sp, r7
     844:	bc80      	pop	{r7}
     846:	4770      	bx	lr

00000848 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}

     848:	b580      	push	{r7, lr}
     84a:	b082      	sub	sp, #8
     84c:	af00      	add	r7, sp, #0
     84e:	6078      	str	r0, [r7, #4]
     850:	6039      	str	r1, [r7, #0]
     852:	687b      	ldr	r3, [r7, #4]
     854:	2b01      	cmp	r3, #1
     856:	d10c      	bne.n	872 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     858:	683b      	ldr	r3, [r7, #0]
     85a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     85e:	4293      	cmp	r3, r2
     860:	d107      	bne.n	872 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     862:	4806      	ldr	r0, [pc, #24]	; (87c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     864:	4b06      	ldr	r3, [pc, #24]	; (880 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     866:	4798      	blx	r3
     868:	4a06      	ldr	r2, [pc, #24]	; (884 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     86a:	4907      	ldr	r1, [pc, #28]	; (888 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     86c:	4803      	ldr	r0, [pc, #12]	; (87c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     86e:	4b07      	ldr	r3, [pc, #28]	; (88c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     870:	4798      	blx	r3
     872:	bf00      	nop
     874:	3708      	adds	r7, #8
     876:	46bd      	mov	sp, r7
     878:	bd80      	pop	{r7, pc}
     87a:	bf00      	nop
     87c:	20000d84 	.word	0x20000d84
     880:	00000809 	.word	0x00000809
     884:	20000000 	.word	0x20000000
     888:	0000081d 	.word	0x0000081d
     88c:	00014919 	.word	0x00014919

00000890 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     890:	b580      	push	{r7, lr}
     892:	af00      	add	r7, sp, #0
     894:	f64f 71ff 	movw	r1, #65535	; 0xffff
     898:	2001      	movs	r0, #1
     89a:	4b01      	ldr	r3, [pc, #4]	; (8a0 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     89c:	4798      	blx	r3
     89e:	bd80      	pop	{r7, pc}
     8a0:	00000849 	.word	0x00000849

000008a4 <_ZN17ConfigState_ClassC1Ev>:
	
};


// default constructor
ConfigState_Class::ConfigState_Class()
     8a4:	b480      	push	{r7}
     8a6:	b083      	sub	sp, #12
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	4a14      	ldr	r2, [pc, #80]	; (900 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kGAINStateReset;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	2200      	movs	r2, #0
     8b6:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kGAINStateReset;
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2200      	movs	r2, #0
     8bc:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	2200      	movs	r2, #0
     8c2:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.targetUDC = 0.0;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	f04f 0200 	mov.w	r2, #0
     8ca:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.cycleDuration = 0;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	2200      	movs	r2, #0
     8d0:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.inStateTime = 0;
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	2200      	movs	r2, #0
     8d6:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.remainingTime = 0;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	2200      	movs	r2, #0
     8dc:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.waitingExceededTime = 0;
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	2200      	movs	r2, #0
     8e2:	65da      	str	r2, [r3, #92]	; 0x5c
	defaultState.fansOnAfterCateringCycleTime = forever;
     8e4:	4b07      	ldr	r3, [pc, #28]	; (904 <_ZN17ConfigState_ClassC1Ev+0x60>)
     8e6:	681a      	ldr	r2, [r3, #0]
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	661a      	str	r2, [r3, #96]	; 0x60
	defaultState.magic=0xCAFEBABE;
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	4a06      	ldr	r2, [pc, #24]	; (908 <_ZN17ConfigState_ClassC1Ev+0x64>)
     8f0:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	4618      	mov	r0, r3
     8f6:	370c      	adds	r7, #12
     8f8:	46bd      	mov	sp, r7
     8fa:	bc80      	pop	{r7}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	00016ddc 	.word	0x00016ddc
     904:	000184f8 	.word	0x000184f8
     908:	cafebabe 	.word	0xcafebabe

0000090c <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     90c:	b480      	push	{r7}
     90e:	b083      	sub	sp, #12
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
     914:	4a04      	ldr	r2, [pc, #16]	; (928 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     916:	687b      	ldr	r3, [r7, #4]
     918:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	4618      	mov	r0, r3
     91e:	370c      	adds	r7, #12
     920:	46bd      	mov	sp, r7
     922:	bc80      	pop	{r7}
     924:	4770      	bx	lr
     926:	bf00      	nop
     928:	00016ddc 	.word	0x00016ddc

0000092c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     92c:	b580      	push	{r7, lr}
     92e:	b084      	sub	sp, #16
     930:	af00      	add	r7, sp, #0
     932:	60f8      	str	r0, [r7, #12]
     934:	60b9      	str	r1, [r7, #8]
     936:	4611      	mov	r1, r2
     938:	461a      	mov	r2, r3
     93a:	460b      	mov	r3, r1
     93c:	71fb      	strb	r3, [r7, #7]
     93e:	4613      	mov	r3, r2
     940:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     942:	79fb      	ldrb	r3, [r7, #7]
     944:	2b00      	cmp	r3, #0
     946:	d010      	beq.n	96a <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3e>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	3380      	adds	r3, #128	; 0x80
     94c:	22ac      	movs	r2, #172	; 0xac
     94e:	4909      	ldr	r1, [pc, #36]	; (974 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     950:	4618      	mov	r0, r3
     952:	4b09      	ldr	r3, [pc, #36]	; (978 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     954:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     956:	68fb      	ldr	r3, [r7, #12]
     958:	68ba      	ldr	r2, [r7, #8]
     95a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		memory.writeConfigurationDataArea(configuration);
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	3380      	adds	r3, #128	; 0x80
     962:	4619      	mov	r1, r3
     964:	4805      	ldr	r0, [pc, #20]	; (97c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     966:	4b06      	ldr	r3, [pc, #24]	; (980 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x54>)
     968:	4798      	blx	r3
	}
	
	
}
     96a:	bf00      	nop
     96c:	3710      	adds	r7, #16
     96e:	46bd      	mov	sp, r7
     970:	bd80      	pop	{r7, pc}
     972:	bf00      	nop
     974:	00016a38 	.word	0x00016a38
     978:	0001652d 	.word	0x0001652d
     97c:	200013bc 	.word	0x200013bc
     980:	00001bbd 	.word	0x00001bbd

00000984 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     984:	b580      	push	{r7, lr}
     986:	b084      	sub	sp, #16
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastState);
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     992:	4619      	mov	r1, r3
     994:	4823      	ldr	r0, [pc, #140]	; (a24 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
     996:	4b24      	ldr	r3, [pc, #144]	; (a28 <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
     998:	4798      	blx	r3
     99a:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastState))
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9a2:	4619      	mov	r1, r3
     9a4:	4821      	ldr	r0, [pc, #132]	; (a2c <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     9a6:	4b22      	ldr	r3, [pc, #136]	; (a30 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
     9a8:	4798      	blx	r3
     9aa:	4603      	mov	r3, r0
     9ac:	2b00      	cmp	r3, #0
     9ae:	d007      	beq.n	9c0 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastState);
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9b6:	4619      	mov	r1, r3
     9b8:	481e      	ldr	r0, [pc, #120]	; (a34 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     9ba:	4b1f      	ldr	r3, [pc, #124]	; (a38 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     9bc:	4798      	blx	r3
     9be:	e02b      	b.n	a18 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastState);
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9c6:	4619      	mov	r1, r3
     9c8:	481c      	ldr	r0, [pc, #112]	; (a3c <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     9ca:	4b1d      	ldr	r3, [pc, #116]	; (a40 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
     9cc:	4798      	blx	r3
     9ce:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastState))
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9d6:	4619      	mov	r1, r3
     9d8:	4814      	ldr	r0, [pc, #80]	; (a2c <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     9da:	4b1a      	ldr	r3, [pc, #104]	; (a44 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
     9dc:	4798      	blx	r3
     9de:	4603      	mov	r3, r0
     9e0:	2b00      	cmp	r3, #0
     9e2:	d00e      	beq.n	a02 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastState);
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9ea:	4619      	mov	r1, r3
     9ec:	4811      	ldr	r0, [pc, #68]	; (a34 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     9ee:	4b12      	ldr	r3, [pc, #72]	; (a38 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     9f0:	4798      	blx	r3
				memory.SaveApplicationState(lastState);
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
     9f8:	4619      	mov	r1, r3
     9fa:	4813      	ldr	r0, [pc, #76]	; (a48 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     9fc:	4b13      	ldr	r3, [pc, #76]	; (a4c <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
     9fe:	4798      	blx	r3
     a00:	e00a      	b.n	a18 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
     a02:	480c      	ldr	r0, [pc, #48]	; (a34 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     a04:	4b12      	ldr	r3, [pc, #72]	; (a50 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
     a06:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
     a08:	4912      	ldr	r1, [pc, #72]	; (a54 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     a0a:	480f      	ldr	r0, [pc, #60]	; (a48 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     a0c:	4b12      	ldr	r3, [pc, #72]	; (a58 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
     a0e:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
     a10:	4910      	ldr	r1, [pc, #64]	; (a54 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     a12:	480a      	ldr	r0, [pc, #40]	; (a3c <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     a14:	4b11      	ldr	r3, [pc, #68]	; (a5c <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
     a16:	4798      	blx	r3
			}
					
		
		}

		return r;
     a18:	68fb      	ldr	r3, [r7, #12]
	};
     a1a:	4618      	mov	r0, r3
     a1c:	3710      	adds	r7, #16
     a1e:	46bd      	mov	sp, r7
     a20:	bd80      	pop	{r7, pc}
     a22:	bf00      	nop
     a24:	20001578 	.word	0x20001578
     a28:	00001a0d 	.word	0x00001a0d
     a2c:	200013bc 	.word	0x200013bc
     a30:	00001dc1 	.word	0x00001dc1
     a34:	200029dc 	.word	0x200029dc
     a38:	00002a7d 	.word	0x00002a7d
     a3c:	20001568 	.word	0x20001568
     a40:	00000e59 	.word	0x00000e59
     a44:	00001e05 	.word	0x00001e05
     a48:	20000ed0 	.word	0x20000ed0
     a4c:	00001669 	.word	0x00001669
     a50:	00000a61 	.word	0x00000a61
     a54:	200029e0 	.word	0x200029e0
     a58:	000015c9 	.word	0x000015c9
     a5c:	00000ea1 	.word	0x00000ea1

00000a60 <_ZN17ConfigState_Class15SetDefaultStateEv>:
		usb<<NEWLINE;
			
	}
	
}
void	ConfigState_Class::SetDefaultState(void){
     a60:	b580      	push	{r7, lr}
     a62:	b082      	sub	sp, #8
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	3304      	adds	r3, #4
     a6c:	4619      	mov	r1, r3
     a6e:	4803      	ldr	r0, [pc, #12]	; (a7c <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
     a70:	4b03      	ldr	r3, [pc, #12]	; (a80 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
     a72:	4798      	blx	r3

}
     a74:	bf00      	nop
     a76:	3708      	adds	r7, #8
     a78:	46bd      	mov	sp, r7
     a7a:	bd80      	pop	{r7, pc}
     a7c:	200029dc 	.word	0x200029dc
     a80:	00002a7d 	.word	0x00002a7d

00000a84 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
     a8c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	220a      	movs	r2, #10
     a94:	4619      	mov	r1, r3
     a96:	6878      	ldr	r0, [r7, #4]
     a98:	4b03      	ldr	r3, [pc, #12]	; (aa8 <_ZlsImER5PrintS1_RKT_+0x24>)
     a9a:	4798      	blx	r3
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	4618      	mov	r0, r3
     aa0:	3708      	adds	r7, #8
     aa2:	46bd      	mov	sp, r7
     aa4:	bd80      	pop	{r7, pc}
     aa6:	bf00      	nop
     aa8:	0001401d 	.word	0x0001401d

00000aac <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
     aac:	b480      	push	{r7}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	4618      	mov	r0, r3
     ab8:	370c      	adds	r7, #12
     aba:	46bd      	mov	sp, r7
     abc:	bc80      	pop	{r7}
     abe:	4770      	bx	lr

00000ac0 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
     ac0:	b480      	push	{r7}
     ac2:	b083      	sub	sp, #12
     ac4:	af00      	add	r7, sp, #0
     ac6:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	4618      	mov	r0, r3
     acc:	370c      	adds	r7, #12
     ace:	46bd      	mov	sp, r7
     ad0:	bc80      	pop	{r7}
     ad2:	4770      	bx	lr

00000ad4 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
     ad4:	b580      	push	{r7, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	af00      	add	r7, sp, #0
     ada:	6078      	str	r0, [r7, #4]
     adc:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
     ade:	4806      	ldr	r0, [pc, #24]	; (af8 <_ZN11CRC32_Class4InitEm+0x24>)
     ae0:	4b06      	ldr	r3, [pc, #24]	; (afc <_ZN11CRC32_Class4InitEm+0x28>)
     ae2:	4798      	blx	r3
	refCRC32=refCRC;
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	683a      	ldr	r2, [r7, #0]
     ae8:	601a      	str	r2, [r3, #0]
	return	refCRC32;
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	681b      	ldr	r3, [r3, #0]
}
     aee:	4618      	mov	r0, r3
     af0:	3708      	adds	r7, #8
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	bf00      	nop
     af8:	2000508c 	.word	0x2000508c
     afc:	000046ad 	.word	0x000046ad

00000b00 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
     b00:	b590      	push	{r4, r7, lr}
     b02:	b083      	sub	sp, #12
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
     b08:	4b07      	ldr	r3, [pc, #28]	; (b28 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
     b0a:	6878      	ldr	r0, [r7, #4]
     b0c:	4798      	blx	r3
     b0e:	4603      	mov	r3, r0
     b10:	460c      	mov	r4, r1
     b12:	4618      	mov	r0, r3
     b14:	4621      	mov	r1, r4
     b16:	4b05      	ldr	r3, [pc, #20]	; (b2c <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
     b18:	4798      	blx	r3
     b1a:	4603      	mov	r3, r0
     b1c:	460c      	mov	r4, r1
     b1e:	4618      	mov	r0, r3
     b20:	4621      	mov	r1, r4
     b22:	370c      	adds	r7, #12
     b24:	46bd      	mov	sp, r7
     b26:	bd90      	pop	{r4, r7, pc}
     b28:	00015e11 	.word	0x00015e11
     b2c:	00014929 	.word	0x00014929

00000b30 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
     b30:	b590      	push	{r4, r7, lr}
     b32:	b087      	sub	sp, #28
     b34:	af00      	add	r7, sp, #0
     b36:	60f8      	str	r0, [r7, #12]
     b38:	60b9      	str	r1, [r7, #8]
     b3a:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	089b      	lsrs	r3, r3, #2
     b40:	4618      	mov	r0, r3
     b42:	4b0f      	ldr	r3, [pc, #60]	; (b80 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
     b44:	4798      	blx	r3
     b46:	460a      	mov	r2, r1
     b48:	4601      	mov	r1, r0
     b4a:	4b0e      	ldr	r3, [pc, #56]	; (b84 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
     b4c:	4608      	mov	r0, r1
     b4e:	4611      	mov	r1, r2
     b50:	4798      	blx	r3
     b52:	4603      	mov	r3, r0
     b54:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
     b56:	f04f 31ff 	mov.w	r1, #4294967295
     b5a:	68f8      	ldr	r0, [r7, #12]
     b5c:	4b0a      	ldr	r3, [pc, #40]	; (b88 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
     b5e:	4798      	blx	r3
     b60:	4603      	mov	r3, r0
     b62:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
     b64:	f107 0310 	add.w	r3, r7, #16
     b68:	697a      	ldr	r2, [r7, #20]
     b6a:	68b9      	ldr	r1, [r7, #8]
     b6c:	4807      	ldr	r0, [pc, #28]	; (b8c <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
     b6e:	4c08      	ldr	r4, [pc, #32]	; (b90 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
     b70:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
     b72:	693b      	ldr	r3, [r7, #16]
     b74:	43db      	mvns	r3, r3
     b76:	4618      	mov	r0, r3
     b78:	371c      	adds	r7, #28
     b7a:	46bd      	mov	sp, r7
     b7c:	bd90      	pop	{r4, r7, pc}
     b7e:	bf00      	nop
     b80:	00000b01 	.word	0x00000b01
     b84:	0001645d 	.word	0x0001645d
     b88:	00000ad5 	.word	0x00000ad5
     b8c:	2000508c 	.word	0x2000508c
     b90:	000046e9 	.word	0x000046e9

00000b94 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     b94:	b580      	push	{r7, lr}
     b96:	b082      	sub	sp, #8
     b98:	af00      	add	r7, sp, #0
     b9a:	6078      	str	r0, [r7, #4]
     b9c:	687b      	ldr	r3, [r7, #4]
     b9e:	4618      	mov	r0, r3
     ba0:	4b06      	ldr	r3, [pc, #24]	; (bbc <_ZN15DataLoger_ClassC1Ev+0x28>)
     ba2:	4798      	blx	r3
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
     baa:	4618      	mov	r0, r3
     bac:	4b04      	ldr	r3, [pc, #16]	; (bc0 <_ZN15DataLoger_ClassC1Ev+0x2c>)
     bae:	4798      	blx	r3
{
} //DataLoger_Class
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	4618      	mov	r0, r3
     bb4:	3708      	adds	r7, #8
     bb6:	46bd      	mov	sp, r7
     bb8:	bd80      	pop	{r7, pc}
     bba:	bf00      	nop
     bbc:	00012941 	.word	0x00012941
     bc0:	00000bf9 	.word	0x00000bf9

00000bc4 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     bc4:	b580      	push	{r7, lr}
     bc6:	b082      	sub	sp, #8
     bc8:	af00      	add	r7, sp, #0
     bca:	6078      	str	r0, [r7, #4]
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	4618      	mov	r0, r3
     bd0:	4b03      	ldr	r3, [pc, #12]	; (be0 <_ZN15DataLoger_ClassD1Ev+0x1c>)
     bd2:	4798      	blx	r3
{
} //~DataLoger_Class
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	4618      	mov	r0, r3
     bd8:	3708      	adds	r7, #8
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	bf00      	nop
     be0:	0001297d 	.word	0x0001297d

00000be4 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
     be4:	b480      	push	{r7}
     be6:	b083      	sub	sp, #12
     be8:	af00      	add	r7, sp, #0
     bea:	6078      	str	r0, [r7, #4]
	return 0;
     bec:	2300      	movs	r3, #0
     bee:	4618      	mov	r0, r3
     bf0:	370c      	adds	r7, #12
     bf2:	46bd      	mov	sp, r7
     bf4:	bc80      	pop	{r7}
     bf6:	4770      	bx	lr

00000bf8 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
     bf8:	b580      	push	{r7, lr}
     bfa:	b082      	sub	sp, #8
     bfc:	af00      	add	r7, sp, #0
     bfe:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	f44f 7200 	mov.w	r2, #512	; 0x200
     c06:	2100      	movs	r1, #0
     c08:	4618      	mov	r0, r3
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
     c0c:	4798      	blx	r3
    clear();
     c0e:	6878      	ldr	r0, [r7, #4]
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
     c12:	4798      	blx	r3
}
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	4618      	mov	r0, r3
     c18:	3708      	adds	r7, #8
     c1a:	46bd      	mov	sp, r7
     c1c:	bd80      	pop	{r7, pc}
     c1e:	bf00      	nop
     c20:	00016661 	.word	0x00016661
     c24:	00000c29 	.word	0x00000c29

00000c28 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
     c28:	b480      	push	{r7}
     c2a:	b083      	sub	sp, #12
     c2c:	af00      	add	r7, sp, #0
     c2e:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	2200      	movs	r2, #0
     c34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
     c38:	687b      	ldr	r3, [r7, #4]
     c3a:	2200      	movs	r2, #0
     c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
     c40:	bf00      	nop
     c42:	370c      	adds	r7, #12
     c44:	46bd      	mov	sp, r7
     c46:	bc80      	pop	{r7}
     c48:	4770      	bx	lr
	...

00000c4c <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
     c4c:	b580      	push	{r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	33a8      	adds	r3, #168	; 0xa8
     c58:	4618      	mov	r0, r3
     c5a:	4b07      	ldr	r3, [pc, #28]	; (c78 <_ZN14DateTime_ClassC1Ev+0x2c>)
     c5c:	4798      	blx	r3
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	4618      	mov	r0, r3
     c62:	4b06      	ldr	r3, [pc, #24]	; (c7c <_ZN14DateTime_ClassC1Ev+0x30>)
     c64:	4798      	blx	r3
     c66:	4a06      	ldr	r2, [pc, #24]	; (c80 <_ZN14DateTime_ClassC1Ev+0x34>)
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
     c6c:	687b      	ldr	r3, [r7, #4]
     c6e:	4618      	mov	r0, r3
     c70:	3708      	adds	r7, #8
     c72:	46bd      	mov	sp, r7
     c74:	bd80      	pop	{r7, pc}
     c76:	bf00      	nop
     c78:	00000def 	.word	0x00000def
     c7c:	00012d51 	.word	0x00012d51
     c80:	00016de8 	.word	0x00016de8

00000c84 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
     c84:	b580      	push	{r7, lr}
     c86:	b082      	sub	sp, #8
     c88:	af00      	add	r7, sp, #0
     c8a:	6078      	str	r0, [r7, #4]
     c8c:	4a08      	ldr	r2, [pc, #32]	; (cb0 <_ZN14DateTime_ClassD1Ev+0x2c>)
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	601a      	str	r2, [r3, #0]
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	4618      	mov	r0, r3
     c96:	4b07      	ldr	r3, [pc, #28]	; (cb4 <_ZN14DateTime_ClassD1Ev+0x30>)
     c98:	4798      	blx	r3
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	33a8      	adds	r3, #168	; 0xa8
     c9e:	4618      	mov	r0, r3
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <_ZN14DateTime_ClassD1Ev+0x34>)
     ca2:	4798      	blx	r3
{
} //~DateTime_Class
     ca4:	687b      	ldr	r3, [r7, #4]
     ca6:	4618      	mov	r0, r3
     ca8:	3708      	adds	r7, #8
     caa:	46bd      	mov	sp, r7
     cac:	bd80      	pop	{r7, pc}
     cae:	bf00      	nop
     cb0:	00016de8 	.word	0x00016de8
     cb4:	00012dc1 	.word	0x00012dc1
     cb8:	00000e03 	.word	0x00000e03

00000cbc <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
     cbc:	b580      	push	{r7, lr}
     cbe:	b084      	sub	sp, #16
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
     cc4:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <_ZN14DateTime_Class4InitEv+0x38>)
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	3390      	adds	r3, #144	; 0x90
     cca:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
     ccc:	68f9      	ldr	r1, [r7, #12]
     cce:	480a      	ldr	r0, [pc, #40]	; (cf8 <_ZN14DateTime_Class4InitEv+0x3c>)
     cd0:	4b0a      	ldr	r3, [pc, #40]	; (cfc <_ZN14DateTime_Class4InitEv+0x40>)
     cd2:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
     cd4:	4b07      	ldr	r3, [pc, #28]	; (cf4 <_ZN14DateTime_Class4InitEv+0x38>)
     cd6:	681b      	ldr	r3, [r3, #0]
     cd8:	3394      	adds	r3, #148	; 0x94
     cda:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
     cdc:	68b9      	ldr	r1, [r7, #8]
     cde:	4806      	ldr	r0, [pc, #24]	; (cf8 <_ZN14DateTime_Class4InitEv+0x3c>)
     ce0:	4b07      	ldr	r3, [pc, #28]	; (d00 <_ZN14DateTime_Class4InitEv+0x44>)
     ce2:	4798      	blx	r3
	calendar.Init();
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <_ZN14DateTime_Class4InitEv+0x3c>)
     ce6:	4b07      	ldr	r3, [pc, #28]	; (d04 <_ZN14DateTime_Class4InitEv+0x48>)
     ce8:	4798      	blx	r3
	
}
     cea:	bf00      	nop
     cec:	3710      	adds	r7, #16
     cee:	46bd      	mov	sp, r7
     cf0:	bd80      	pop	{r7, pc}
     cf2:	bf00      	nop
     cf4:	20000e40 	.word	0x20000e40
     cf8:	20004c00 	.word	0x20004c00
     cfc:	000136d1 	.word	0x000136d1
     d00:	000136f1 	.word	0x000136f1
     d04:	00012de9 	.word	0x00012de9

00000d08 <_Z41__static_initialization_and_destruction_0ii>:

     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
     d10:	6039      	str	r1, [r7, #0]
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	2b01      	cmp	r3, #1
     d16:	d10c      	bne.n	d32 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d18:	683b      	ldr	r3, [r7, #0]
     d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d1e:	4293      	cmp	r3, r2
     d20:	d107      	bne.n	d32 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d22:	4806      	ldr	r0, [pc, #24]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     d26:	4798      	blx	r3
     d28:	4a06      	ldr	r2, [pc, #24]	; (d44 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     d2a:	4907      	ldr	r1, [pc, #28]	; (d48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     d2c:	4803      	ldr	r0, [pc, #12]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     d2e:	4b07      	ldr	r3, [pc, #28]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     d30:	4798      	blx	r3
     d32:	bf00      	nop
     d34:	3708      	adds	r7, #8
     d36:	46bd      	mov	sp, r7
     d38:	bd80      	pop	{r7, pc}
     d3a:	bf00      	nop
     d3c:	20000d88 	.word	0x20000d88
     d40:	00000c4d 	.word	0x00000c4d
     d44:	20000000 	.word	0x20000000
     d48:	00000c85 	.word	0x00000c85
     d4c:	00014919 	.word	0x00014919

00000d50 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
     d50:	b580      	push	{r7, lr}
     d52:	af00      	add	r7, sp, #0
     d54:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d58:	2001      	movs	r0, #1
     d5a:	4b01      	ldr	r3, [pc, #4]	; (d60 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
     d5c:	4798      	blx	r3
     d5e:	bd80      	pop	{r7, pc}
     d60:	00000d09 	.word	0x00000d09

00000d64 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     d64:	b580      	push	{r7, lr}
     d66:	b082      	sub	sp, #8
     d68:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     d6a:	4b16      	ldr	r3, [pc, #88]	; (dc4 <Reset_Handler+0x60>)
     d6c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     d6e:	4b16      	ldr	r3, [pc, #88]	; (dc8 <Reset_Handler+0x64>)
     d70:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     d72:	687a      	ldr	r2, [r7, #4]
     d74:	683b      	ldr	r3, [r7, #0]
     d76:	429a      	cmp	r2, r3
     d78:	d00c      	beq.n	d94 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     d7a:	e007      	b.n	d8c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     d7c:	683b      	ldr	r3, [r7, #0]
     d7e:	1d1a      	adds	r2, r3, #4
     d80:	603a      	str	r2, [r7, #0]
     d82:	687a      	ldr	r2, [r7, #4]
     d84:	1d11      	adds	r1, r2, #4
     d86:	6079      	str	r1, [r7, #4]
     d88:	6812      	ldr	r2, [r2, #0]
     d8a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     d8c:	683b      	ldr	r3, [r7, #0]
     d8e:	4a0f      	ldr	r2, [pc, #60]	; (dcc <Reset_Handler+0x68>)
     d90:	4293      	cmp	r3, r2
     d92:	d3f3      	bcc.n	d7c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     d94:	4b0e      	ldr	r3, [pc, #56]	; (dd0 <Reset_Handler+0x6c>)
     d96:	603b      	str	r3, [r7, #0]
     d98:	e004      	b.n	da4 <Reset_Handler+0x40>
                *pDest++ = 0;
     d9a:	683b      	ldr	r3, [r7, #0]
     d9c:	1d1a      	adds	r2, r3, #4
     d9e:	603a      	str	r2, [r7, #0]
     da0:	2200      	movs	r2, #0
     da2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     da4:	683b      	ldr	r3, [r7, #0]
     da6:	4a0b      	ldr	r2, [pc, #44]	; (dd4 <Reset_Handler+0x70>)
     da8:	4293      	cmp	r3, r2
     daa:	d3f6      	bcc.n	d9a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     dac:	4b0a      	ldr	r3, [pc, #40]	; (dd8 <Reset_Handler+0x74>)
     dae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     db0:	4a0a      	ldr	r2, [pc, #40]	; (ddc <Reset_Handler+0x78>)
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     db8:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     dba:	4b09      	ldr	r3, [pc, #36]	; (de0 <Reset_Handler+0x7c>)
     dbc:	4798      	blx	r3

        /* Branch to main function */
        main();
     dbe:	4b09      	ldr	r3, [pc, #36]	; (de4 <Reset_Handler+0x80>)
     dc0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     dc2:	e7fe      	b.n	dc2 <Reset_Handler+0x5e>
     dc4:	0001868c 	.word	0x0001868c
     dc8:	20000000 	.word	0x20000000
     dcc:	200005f4 	.word	0x200005f4
     dd0:	200005f8 	.word	0x200005f8
     dd4:	20005148 	.word	0x20005148
     dd8:	00000000 	.word	0x00000000
     ddc:	e000ed00 	.word	0xe000ed00
     de0:	000164dd 	.word	0x000164dd
     de4:	0000115d 	.word	0x0000115d

00000de8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     de8:	b480      	push	{r7}
     dea:	af00      	add	r7, sp, #0
        while (1) {
     dec:	e7fe      	b.n	dec <Dummy_Handler+0x4>

00000dee <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
     dee:	b480      	push	{r7}
     df0:	b083      	sub	sp, #12
     df2:	af00      	add	r7, sp, #0
     df4:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	4618      	mov	r0, r3
     dfa:	370c      	adds	r7, #12
     dfc:	46bd      	mov	sp, r7
     dfe:	bc80      	pop	{r7}
     e00:	4770      	bx	lr

00000e02 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
     e02:	b480      	push	{r7}
     e04:	b083      	sub	sp, #12
     e06:	af00      	add	r7, sp, #0
     e08:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	4618      	mov	r0, r3
     e0e:	370c      	adds	r7, #12
     e10:	46bd      	mov	sp, r7
     e12:	bc80      	pop	{r7}
     e14:	4770      	bx	lr
	...

00000e18 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
     e18:	b590      	push	{r4, r7, lr}
     e1a:	b087      	sub	sp, #28
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
     e20:	4b0a      	ldr	r3, [pc, #40]	; (e4c <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	3310      	adds	r3, #16
     e26:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
     e28:	697b      	ldr	r3, [r7, #20]
     e2a:	b29a      	uxth	r2, r3
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	899a      	ldrh	r2, [r3, #12]
     e34:	f107 010c 	add.w	r1, r7, #12
     e38:	2304      	movs	r3, #4
     e3a:	4805      	ldr	r0, [pc, #20]	; (e50 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
     e3c:	4c05      	ldr	r4, [pc, #20]	; (e54 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
     e3e:	47a0      	blx	r4
     e40:	6138      	str	r0, [r7, #16]
	return	crc;
     e42:	68fb      	ldr	r3, [r7, #12]
}
     e44:	4618      	mov	r0, r3
     e46:	371c      	adds	r7, #28
     e48:	46bd      	mov	sp, r7
     e4a:	bd90      	pop	{r4, r7, pc}
     e4c:	20000e40 	.word	0x20000e40
     e50:	20004974 	.word	0x20004974
     e54:	00012245 	.word	0x00012245

00000e58 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
     e58:	b590      	push	{r4, r7, lr}
     e5a:	b085      	sub	sp, #20
     e5c:	af00      	add	r7, sp, #0
     e5e:	6078      	str	r0, [r7, #4]
     e60:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
     e62:	4b0c      	ldr	r3, [pc, #48]	; (e94 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	3314      	adds	r3, #20
     e68:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
     e6a:	68fb      	ldr	r3, [r7, #12]
     e6c:	b29a      	uxth	r2, r3
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
     e72:	683a      	ldr	r2, [r7, #0]
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	6819      	ldr	r1, [r3, #0]
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	899a      	ldrh	r2, [r3, #12]
     e80:	237c      	movs	r3, #124	; 0x7c
     e82:	4805      	ldr	r0, [pc, #20]	; (e98 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
     e84:	4c05      	ldr	r4, [pc, #20]	; (e9c <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
     e86:	47a0      	blx	r4
     e88:	60b8      	str	r0, [r7, #8]
	return	r;
     e8a:	68bb      	ldr	r3, [r7, #8]
}
     e8c:	4618      	mov	r0, r3
     e8e:	3714      	adds	r7, #20
     e90:	46bd      	mov	sp, r7
     e92:	bd90      	pop	{r4, r7, pc}
     e94:	20000e40 	.word	0x20000e40
     e98:	20004974 	.word	0x20004974
     e9c:	00012245 	.word	0x00012245

00000ea0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
     ea0:	b580      	push	{r7, lr}
     ea2:	b084      	sub	sp, #16
     ea4:	af00      	add	r7, sp, #0
     ea6:	6078      	str	r0, [r7, #4]
     ea8:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
     eaa:	4b12      	ldr	r3, [pc, #72]	; (ef4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	3314      	adds	r3, #20
     eb0:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
     eb2:	68fb      	ldr	r3, [r7, #12]
     eb4:	b29a      	uxth	r2, r3
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	899b      	ldrh	r3, [r3, #12]
     ebe:	461a      	mov	r2, r3
     ec0:	6839      	ldr	r1, [r7, #0]
     ec2:	6878      	ldr	r0, [r7, #4]
     ec4:	4b0c      	ldr	r3, [pc, #48]	; (ef8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
     ec6:	4798      	blx	r3
     ec8:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
     eca:	227c      	movs	r2, #124	; 0x7c
     ecc:	6839      	ldr	r1, [r7, #0]
     ece:	480b      	ldr	r0, [pc, #44]	; (efc <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
     ed0:	4b0b      	ldr	r3, [pc, #44]	; (f00 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
     ed2:	4798      	blx	r3
     ed4:	4602      	mov	r2, r0
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	689b      	ldr	r3, [r3, #8]
     ede:	4619      	mov	r1, r3
     ee0:	6878      	ldr	r0, [r7, #4]
     ee2:	4b08      	ldr	r3, [pc, #32]	; (f04 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
     ee4:	4798      	blx	r3
     ee6:	60b8      	str	r0, [r7, #8]
	return	w;
     ee8:	68bb      	ldr	r3, [r7, #8]
}
     eea:	4618      	mov	r0, r3
     eec:	3710      	adds	r7, #16
     eee:	46bd      	mov	sp, r7
     ef0:	bd80      	pop	{r7, pc}
     ef2:	bf00      	nop
     ef4:	20000e40 	.word	0x20000e40
     ef8:	00000f09 	.word	0x00000f09
     efc:	200013bc 	.word	0x200013bc
     f00:	00000b31 	.word	0x00000b31
     f04:	00000f41 	.word	0x00000f41

00000f08 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
     f08:	b590      	push	{r4, r7, lr}
     f0a:	b087      	sub	sp, #28
     f0c:	af00      	add	r7, sp, #0
     f0e:	60f8      	str	r0, [r7, #12]
     f10:	60b9      	str	r1, [r7, #8]
     f12:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
     f14:	68ba      	ldr	r2, [r7, #8]
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
     f1a:	68fb      	ldr	r3, [r7, #12]
     f1c:	6819      	ldr	r1, [r3, #0]
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	b29a      	uxth	r2, r3
     f22:	237c      	movs	r3, #124	; 0x7c
     f24:	4804      	ldr	r0, [pc, #16]	; (f38 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
     f26:	4c05      	ldr	r4, [pc, #20]	; (f3c <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
     f28:	47a0      	blx	r4
     f2a:	6178      	str	r0, [r7, #20]
	return	w;
     f2c:	697b      	ldr	r3, [r7, #20]
}
     f2e:	4618      	mov	r0, r3
     f30:	371c      	adds	r7, #28
     f32:	46bd      	mov	sp, r7
     f34:	bd90      	pop	{r4, r7, pc}
     f36:	bf00      	nop
     f38:	20004974 	.word	0x20004974
     f3c:	00012141 	.word	0x00012141

00000f40 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
     f40:	b590      	push	{r4, r7, lr}
     f42:	b085      	sub	sp, #20
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
     f48:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
     f4a:	4b08      	ldr	r3, [pc, #32]	; (f6c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	3310      	adds	r3, #16
     f50:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
     f52:	89fa      	ldrh	r2, [r7, #14]
     f54:	4639      	mov	r1, r7
     f56:	2304      	movs	r3, #4
     f58:	4805      	ldr	r0, [pc, #20]	; (f70 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
     f5a:	4c06      	ldr	r4, [pc, #24]	; (f74 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
     f5c:	47a0      	blx	r4
     f5e:	60b8      	str	r0, [r7, #8]
	return	w;
     f60:	68bb      	ldr	r3, [r7, #8]
     f62:	4618      	mov	r0, r3
     f64:	3714      	adds	r7, #20
     f66:	46bd      	mov	sp, r7
     f68:	bd90      	pop	{r4, r7, pc}
     f6a:	bf00      	nop
     f6c:	20000e40 	.word	0x20000e40
     f70:	20004974 	.word	0x20004974
     f74:	00012141 	.word	0x00012141

00000f78 <_ZN18FlapperValve_ClassC1Ev>:

#include "FlapperValve_Class.h"
#include "MCP23017_Class.h"

// default constructor
FlapperValve_Class::FlapperValve_Class()
     f78:	b480      	push	{r7}
     f7a:	b083      	sub	sp, #12
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
{
} //FlapperValve_Class
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	4618      	mov	r0, r3
     f84:	370c      	adds	r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	bc80      	pop	{r7}
     f8a:	4770      	bx	lr

00000f8c <_ZN18FlapperValve_ClassD1Ev>:

// default destructor
FlapperValve_Class::~FlapperValve_Class()
     f8c:	b480      	push	{r7}
     f8e:	b083      	sub	sp, #12
     f90:	af00      	add	r7, sp, #0
     f92:	6078      	str	r0, [r7, #4]
{
} //~FlapperValve_Class
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	4618      	mov	r0, r3
     f98:	370c      	adds	r7, #12
     f9a:	46bd      	mov	sp, r7
     f9c:	bc80      	pop	{r7}
     f9e:	4770      	bx	lr

00000fa0 <_ZN18FlapperValve_Class4InitEv>:
bool	FlapperValve_Class::Init(void){
     fa0:	b580      	push	{r7, lr}
     fa2:	b082      	sub	sp, #8
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
		return	mcp.Init();
     fa8:	4803      	ldr	r0, [pc, #12]	; (fb8 <_ZN18FlapperValve_Class4InitEv+0x18>)
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <_ZN18FlapperValve_Class4InitEv+0x1c>)
     fac:	4798      	blx	r3
     fae:	4603      	mov	r3, r0
}
     fb0:	4618      	mov	r0, r3
     fb2:	3708      	adds	r7, #8
     fb4:	46bd      	mov	sp, r7
     fb6:	bd80      	pop	{r7, pc}
     fb8:	200048e4 	.word	0x200048e4
     fbc:	00011a59 	.word	0x00011a59

00000fc0 <_Z41__static_initialization_and_destruction_0ii>:
     fc0:	b580      	push	{r7, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	af00      	add	r7, sp, #0
     fc6:	6078      	str	r0, [r7, #4]
     fc8:	6039      	str	r1, [r7, #0]
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2b01      	cmp	r3, #1
     fce:	d10c      	bne.n	fea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     fd0:	683b      	ldr	r3, [r7, #0]
     fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     fd6:	4293      	cmp	r3, r2
     fd8:	d107      	bne.n	fea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     fda:	4806      	ldr	r0, [pc, #24]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     fdc:	4b06      	ldr	r3, [pc, #24]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     fde:	4798      	blx	r3
     fe0:	4a06      	ldr	r2, [pc, #24]	; (ffc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     fe2:	4907      	ldr	r1, [pc, #28]	; (1000 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     fe4:	4803      	ldr	r0, [pc, #12]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     fe6:	4b07      	ldr	r3, [pc, #28]	; (1004 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     fe8:	4798      	blx	r3
     fea:	bf00      	nop
     fec:	3708      	adds	r7, #8
     fee:	46bd      	mov	sp, r7
     ff0:	bd80      	pop	{r7, pc}
     ff2:	bf00      	nop
     ff4:	20000e44 	.word	0x20000e44
     ff8:	00000f79 	.word	0x00000f79
     ffc:	20000000 	.word	0x20000000
    1000:	00000f8d 	.word	0x00000f8d
    1004:	00014919 	.word	0x00014919

00001008 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev>:
    1008:	b580      	push	{r7, lr}
    100a:	af00      	add	r7, sp, #0
    100c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1010:	2001      	movs	r0, #1
    1012:	4b01      	ldr	r3, [pc, #4]	; (1018 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev+0x10>)
    1014:	4798      	blx	r3
    1016:	bd80      	pop	{r7, pc}
    1018:	00000fc1 	.word	0x00000fc1

0000101c <_ZN16Interfaces_ClassC1Ev>:
#include "ARINC_Interface.h"
#include "LTC2983_Class.h"
#include "MCP23017_Class.h"

// default constructor
Interfaces_Class::Interfaces_Class()
    101c:	b480      	push	{r7}
    101e:	b083      	sub	sp, #12
    1020:	af00      	add	r7, sp, #0
    1022:	6078      	str	r0, [r7, #4]
{
} //Interfaces_Class
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	4618      	mov	r0, r3
    1028:	370c      	adds	r7, #12
    102a:	46bd      	mov	sp, r7
    102c:	bc80      	pop	{r7}
    102e:	4770      	bx	lr

00001030 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1030:	b480      	push	{r7}
    1032:	b083      	sub	sp, #12
    1034:	af00      	add	r7, sp, #0
    1036:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	4618      	mov	r0, r3
    103c:	370c      	adds	r7, #12
    103e:	46bd      	mov	sp, r7
    1040:	bc80      	pop	{r7}
    1042:	4770      	bx	lr

00001044 <_ZN16Interfaces_Class18CheckCommunicationEv>:

uint32_t Interfaces_Class::CheckCommunication(void)
{
    1044:	b580      	push	{r7, lr}
    1046:	b084      	sub	sp, #16
    1048:	af00      	add	r7, sp, #0
    104a:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    104c:	2300      	movs	r3, #0
    104e:	60fb      	str	r3, [r7, #12]
	r=(uint32_t)CheckI2CExpander(1);
    1050:	2101      	movs	r1, #1
    1052:	6878      	ldr	r0, [r7, #4]
    1054:	4b04      	ldr	r3, [pc, #16]	; (1068 <_ZN16Interfaces_Class18CheckCommunicationEv+0x24>)
    1056:	4798      	blx	r3
    1058:	4603      	mov	r3, r0
    105a:	60fb      	str	r3, [r7, #12]
	
	


	
	return	0;
    105c:	2300      	movs	r3, #0
}
    105e:	4618      	mov	r0, r3
    1060:	3710      	adds	r7, #16
    1062:	46bd      	mov	sp, r7
    1064:	bd80      	pop	{r7, pc}
    1066:	bf00      	nop
    1068:	0000106d 	.word	0x0000106d

0000106c <_ZN16Interfaces_Class16CheckI2CExpanderEh>:
bool	Interfaces_Class::CheckI2CExpander(uint8_t add){
    106c:	b580      	push	{r7, lr}
    106e:	b082      	sub	sp, #8
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
    1074:	460b      	mov	r3, r1
    1076:	70fb      	strb	r3, [r7, #3]
		if (mcp.hasChanged)
    1078:	4b08      	ldr	r3, [pc, #32]	; (109c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    107a:	785b      	ldrb	r3, [r3, #1]
    107c:	b2db      	uxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	d005      	beq.n	108e <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x22>
		{
			mcp.SavePorts();
    1082:	4806      	ldr	r0, [pc, #24]	; (109c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1084:	4b06      	ldr	r3, [pc, #24]	; (10a0 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x34>)
    1086:	4798      	blx	r3
			mcp.hasChanged=false;
    1088:	4b04      	ldr	r3, [pc, #16]	; (109c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    108a:	2200      	movs	r2, #0
    108c:	705a      	strb	r2, [r3, #1]
		}
		return	mcp.hasChanged;
    108e:	4b03      	ldr	r3, [pc, #12]	; (109c <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1090:	785b      	ldrb	r3, [r3, #1]
    1092:	b2db      	uxtb	r3, r3
}
    1094:	4618      	mov	r0, r3
    1096:	3708      	adds	r7, #8
    1098:	46bd      	mov	sp, r7
    109a:	bd80      	pop	{r7, pc}
    109c:	200048e4 	.word	0x200048e4
    10a0:	00011b75 	.word	0x00011b75

000010a4 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    10a4:	b480      	push	{r7}
    10a6:	b085      	sub	sp, #20
    10a8:	af00      	add	r7, sp, #0
    10aa:	6078      	str	r0, [r7, #4]
    10ac:	6039      	str	r1, [r7, #0]
	s=status;
    10ae:	683a      	ldr	r2, [r7, #0]
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	337c      	adds	r3, #124	; 0x7c
    10b4:	e893 0003 	ldmia.w	r3, {r0, r1}
    10b8:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    10bc:	683b      	ldr	r3, [r7, #0]
    10be:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    10c0:	2300      	movs	r3, #0
    10c2:	60bb      	str	r3, [r7, #8]
    10c4:	68bb      	ldr	r3, [r7, #8]
    10c6:	2b03      	cmp	r3, #3
    10c8:	d812      	bhi.n	10f0 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    10ca:	683b      	ldr	r3, [r7, #0]
    10cc:	685a      	ldr	r2, [r3, #4]
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	681b      	ldr	r3, [r3, #0]
    10d2:	2001      	movs	r0, #1
    10d4:	68b9      	ldr	r1, [r7, #8]
    10d6:	fa00 f101 	lsl.w	r1, r0, r1
    10da:	400b      	ands	r3, r1
    10dc:	441a      	add	r2, r3
    10de:	683b      	ldr	r3, [r7, #0]
    10e0:	605a      	str	r2, [r3, #4]
		p++;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	3304      	adds	r3, #4
    10e6:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    10e8:	68bb      	ldr	r3, [r7, #8]
    10ea:	3301      	adds	r3, #1
    10ec:	60bb      	str	r3, [r7, #8]
    10ee:	e7e9      	b.n	10c4 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
    10f6:	4618      	mov	r0, r3
    10f8:	3714      	adds	r7, #20
    10fa:	46bd      	mov	sp, r7
    10fc:	bc80      	pop	{r7}
    10fe:	4770      	bx	lr

00001100 <_Z41__static_initialization_and_destruction_0ii>:

    1100:	b580      	push	{r7, lr}
    1102:	b082      	sub	sp, #8
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
    1108:	6039      	str	r1, [r7, #0]
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	2b01      	cmp	r3, #1
    110e:	d10c      	bne.n	112a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1110:	683b      	ldr	r3, [r7, #0]
    1112:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1116:	4293      	cmp	r3, r2
    1118:	d107      	bne.n	112a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    111a:	4806      	ldr	r0, [pc, #24]	; (1134 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    111c:	4b06      	ldr	r3, [pc, #24]	; (1138 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    111e:	4798      	blx	r3
    1120:	4a06      	ldr	r2, [pc, #24]	; (113c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1122:	4907      	ldr	r1, [pc, #28]	; (1140 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1124:	4803      	ldr	r0, [pc, #12]	; (1134 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1126:	4b07      	ldr	r3, [pc, #28]	; (1144 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1128:	4798      	blx	r3
    112a:	bf00      	nop
    112c:	3708      	adds	r7, #8
    112e:	46bd      	mov	sp, r7
    1130:	bd80      	pop	{r7, pc}
    1132:	bf00      	nop
    1134:	20000e48 	.word	0x20000e48
    1138:	0000101d 	.word	0x0000101d
    113c:	20000000 	.word	0x20000000
    1140:	00001031 	.word	0x00001031
    1144:	00014919 	.word	0x00014919

00001148 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    1148:	b580      	push	{r7, lr}
    114a:	af00      	add	r7, sp, #0
    114c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1150:	2001      	movs	r0, #1
    1152:	4b01      	ldr	r3, [pc, #4]	; (1158 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    1154:	4798      	blx	r3
    1156:	bd80      	pop	{r7, pc}
    1158:	00001101 	.word	0x00001101

0000115c <main>:
		
	}
}

int main(void)
{
    115c:	b580      	push	{r7, lr}
    115e:	b082      	sub	sp, #8
    1160:	af00      	add	r7, sp, #0
	atmel_start_init();
    1162:	4b3e      	ldr	r3, [pc, #248]	; (125c <main+0x100>)
    1164:	4798      	blx	r3
	
	usb.Init();
    1166:	483e      	ldr	r0, [pc, #248]	; (1260 <main+0x104>)
    1168:	4b3e      	ldr	r3, [pc, #248]	; (1264 <main+0x108>)
    116a:	4798      	blx	r3
	delay_ms(100);
    116c:	2064      	movs	r0, #100	; 0x64
    116e:	4b3e      	ldr	r3, [pc, #248]	; (1268 <main+0x10c>)
    1170:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    1172:	493e      	ldr	r1, [pc, #248]	; (126c <main+0x110>)
    1174:	483a      	ldr	r0, [pc, #232]	; (1260 <main+0x104>)
    1176:	4b3e      	ldr	r3, [pc, #248]	; (1270 <main+0x114>)
    1178:	4798      	blx	r3
    117a:	4603      	mov	r3, r0
    117c:	493b      	ldr	r1, [pc, #236]	; (126c <main+0x110>)
    117e:	4618      	mov	r0, r3
    1180:	4b3b      	ldr	r3, [pc, #236]	; (1270 <main+0x114>)
    1182:	4798      	blx	r3
    1184:	4603      	mov	r3, r0
    1186:	493b      	ldr	r1, [pc, #236]	; (1274 <main+0x118>)
    1188:	4618      	mov	r0, r3
    118a:	4b3b      	ldr	r3, [pc, #236]	; (1278 <main+0x11c>)
    118c:	4798      	blx	r3
    118e:	4603      	mov	r3, r0
    1190:	4936      	ldr	r1, [pc, #216]	; (126c <main+0x110>)
    1192:	4618      	mov	r0, r3
    1194:	4b36      	ldr	r3, [pc, #216]	; (1270 <main+0x114>)
    1196:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    1198:	4938      	ldr	r1, [pc, #224]	; (127c <main+0x120>)
    119a:	4831      	ldr	r0, [pc, #196]	; (1260 <main+0x104>)
    119c:	4b38      	ldr	r3, [pc, #224]	; (1280 <main+0x124>)
    119e:	4798      	blx	r3
    11a0:	4603      	mov	r3, r0
    11a2:	4938      	ldr	r1, [pc, #224]	; (1284 <main+0x128>)
    11a4:	4618      	mov	r0, r3
    11a6:	4b36      	ldr	r3, [pc, #216]	; (1280 <main+0x124>)
    11a8:	4798      	blx	r3
    11aa:	4603      	mov	r3, r0
    11ac:	4936      	ldr	r1, [pc, #216]	; (1288 <main+0x12c>)
    11ae:	4618      	mov	r0, r3
    11b0:	4b36      	ldr	r3, [pc, #216]	; (128c <main+0x130>)
    11b2:	4798      	blx	r3
    11b4:	4603      	mov	r3, r0
    11b6:	4936      	ldr	r1, [pc, #216]	; (1290 <main+0x134>)
    11b8:	4618      	mov	r0, r3
    11ba:	4b36      	ldr	r3, [pc, #216]	; (1294 <main+0x138>)
    11bc:	4798      	blx	r3
    11be:	4603      	mov	r3, r0
    11c0:	492a      	ldr	r1, [pc, #168]	; (126c <main+0x110>)
    11c2:	4618      	mov	r0, r3
    11c4:	4b2a      	ldr	r3, [pc, #168]	; (1270 <main+0x114>)
    11c6:	4798      	blx	r3
    11c8:	4603      	mov	r3, r0
    11ca:	4928      	ldr	r1, [pc, #160]	; (126c <main+0x110>)
    11cc:	4618      	mov	r0, r3
    11ce:	4b28      	ldr	r3, [pc, #160]	; (1270 <main+0x114>)
    11d0:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    11d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    11d6:	4830      	ldr	r0, [pc, #192]	; (1298 <main+0x13c>)
    11d8:	4b30      	ldr	r3, [pc, #192]	; (129c <main+0x140>)
    11da:	4798      	blx	r3
	alu.Init();
    11dc:	4830      	ldr	r0, [pc, #192]	; (12a0 <main+0x144>)
    11de:	4b31      	ldr	r3, [pc, #196]	; (12a4 <main+0x148>)
    11e0:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    11e2:	4931      	ldr	r1, [pc, #196]	; (12a8 <main+0x14c>)
    11e4:	481e      	ldr	r0, [pc, #120]	; (1260 <main+0x104>)
    11e6:	4b31      	ldr	r3, [pc, #196]	; (12ac <main+0x150>)
    11e8:	4798      	blx	r3
    11ea:	4603      	mov	r3, r0
    11ec:	491f      	ldr	r1, [pc, #124]	; (126c <main+0x110>)
    11ee:	4618      	mov	r0, r3
    11f0:	4b1f      	ldr	r3, [pc, #124]	; (1270 <main+0x114>)
    11f2:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    11f4:	482a      	ldr	r0, [pc, #168]	; (12a0 <main+0x144>)
    11f6:	4b2e      	ldr	r3, [pc, #184]	; (12b0 <main+0x154>)
    11f8:	4798      	blx	r3
    11fa:	4603      	mov	r3, r0
    11fc:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    11fe:	492d      	ldr	r1, [pc, #180]	; (12b4 <main+0x158>)
    1200:	4817      	ldr	r0, [pc, #92]	; (1260 <main+0x104>)
    1202:	4b2d      	ldr	r3, [pc, #180]	; (12b8 <main+0x15c>)
    1204:	4798      	blx	r3
    1206:	4602      	mov	r2, r0
    1208:	1dfb      	adds	r3, r7, #7
    120a:	4619      	mov	r1, r3
    120c:	4610      	mov	r0, r2
    120e:	4b2b      	ldr	r3, [pc, #172]	; (12bc <main+0x160>)
    1210:	4798      	blx	r3
    1212:	4603      	mov	r3, r0
    1214:	4915      	ldr	r1, [pc, #84]	; (126c <main+0x110>)
    1216:	4618      	mov	r0, r3
    1218:	4b15      	ldr	r3, [pc, #84]	; (1270 <main+0x114>)
    121a:	4798      	blx	r3
	if (!pBIT)
    121c:	4828      	ldr	r0, [pc, #160]	; (12c0 <main+0x164>)
    121e:	4b29      	ldr	r3, [pc, #164]	; (12c4 <main+0x168>)
    1220:	4798      	blx	r3
    1222:	4603      	mov	r3, r0
    1224:	f083 0301 	eor.w	r3, r3, #1
    1228:	b2db      	uxtb	r3, r3
    122a:	2b00      	cmp	r3, #0
    122c:	d004      	beq.n	1238 <main+0xdc>
	{
		hvac.Stop();
    122e:	2100      	movs	r1, #0
    1230:	4825      	ldr	r0, [pc, #148]	; (12c8 <main+0x16c>)
    1232:	4b26      	ldr	r3, [pc, #152]	; (12cc <main+0x170>)
    1234:	4798      	blx	r3
    1236:	e003      	b.n	1240 <main+0xe4>
	} 
	else
	{
		hvac.Start();
    1238:	2100      	movs	r1, #0
    123a:	4823      	ldr	r0, [pc, #140]	; (12c8 <main+0x16c>)
    123c:	4b24      	ldr	r3, [pc, #144]	; (12d0 <main+0x174>)
    123e:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    1240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1244:	4b08      	ldr	r3, [pc, #32]	; (1268 <main+0x10c>)
    1246:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    1248:	490a      	ldr	r1, [pc, #40]	; (1274 <main+0x118>)
    124a:	4805      	ldr	r0, [pc, #20]	; (1260 <main+0x104>)
    124c:	4b0a      	ldr	r3, [pc, #40]	; (1278 <main+0x11c>)
    124e:	4798      	blx	r3
    1250:	4603      	mov	r3, r0
    1252:	4906      	ldr	r1, [pc, #24]	; (126c <main+0x110>)
    1254:	4618      	mov	r0, r3
    1256:	4b06      	ldr	r3, [pc, #24]	; (1270 <main+0x114>)
    1258:	4798      	blx	r3
		delay_ms(1000);
    125a:	e7f1      	b.n	1240 <main+0xe4>
    125c:	00002bd5 	.word	0x00002bd5
    1260:	20004d34 	.word	0x20004d34
    1264:	00013c21 	.word	0x00013c21
    1268:	0000477d 	.word	0x0000477d
    126c:	00016e34 	.word	0x00016e34
    1270:	00000649 	.word	0x00000649
    1274:	00016e6c 	.word	0x00016e6c
    1278:	000012d5 	.word	0x000012d5
    127c:	00016e90 	.word	0x00016e90
    1280:	000012f5 	.word	0x000012f5
    1284:	00016e9c 	.word	0x00016e9c
    1288:	00016ea8 	.word	0x00016ea8
    128c:	00001315 	.word	0x00001315
    1290:	00016eb0 	.word	0x00016eb0
    1294:	00001335 	.word	0x00001335
    1298:	20000ed0 	.word	0x20000ed0
    129c:	00001485 	.word	0x00001485
    12a0:	20000614 	.word	0x20000614
    12a4:	00000321 	.word	0x00000321
    12a8:	00016ebc 	.word	0x00016ebc
    12ac:	00001355 	.word	0x00001355
    12b0:	0000041d 	.word	0x0000041d
    12b4:	00016ed4 	.word	0x00016ed4
    12b8:	00001375 	.word	0x00001375
    12bc:	00000621 	.word	0x00000621
    12c0:	200029c8 	.word	0x200029c8
    12c4:	00001ac1 	.word	0x00001ac1
    12c8:	200029dc 	.word	0x200029dc
    12cc:	00002a3d 	.word	0x00002a3d
    12d0:	00001fbd 	.word	0x00001fbd

000012d4 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    12d4:	b580      	push	{r7, lr}
    12d6:	b082      	sub	sp, #8
    12d8:	af00      	add	r7, sp, #0
    12da:	6078      	str	r0, [r7, #4]
    12dc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    12de:	6839      	ldr	r1, [r7, #0]
    12e0:	6878      	ldr	r0, [r7, #4]
    12e2:	4b03      	ldr	r3, [pc, #12]	; (12f0 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    12e4:	4798      	blx	r3
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	4618      	mov	r0, r3
    12ea:	3708      	adds	r7, #8
    12ec:	46bd      	mov	sp, r7
    12ee:	bd80      	pop	{r7, pc}
    12f0:	00013fb1 	.word	0x00013fb1

000012f4 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    12f4:	b580      	push	{r7, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	af00      	add	r7, sp, #0
    12fa:	6078      	str	r0, [r7, #4]
    12fc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    12fe:	6839      	ldr	r1, [r7, #0]
    1300:	6878      	ldr	r0, [r7, #4]
    1302:	4b03      	ldr	r3, [pc, #12]	; (1310 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    1304:	4798      	blx	r3
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	4618      	mov	r0, r3
    130a:	3708      	adds	r7, #8
    130c:	46bd      	mov	sp, r7
    130e:	bd80      	pop	{r7, pc}
    1310:	00013fb1 	.word	0x00013fb1

00001314 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1314:	b580      	push	{r7, lr}
    1316:	b082      	sub	sp, #8
    1318:	af00      	add	r7, sp, #0
    131a:	6078      	str	r0, [r7, #4]
    131c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    131e:	6839      	ldr	r1, [r7, #0]
    1320:	6878      	ldr	r0, [r7, #4]
    1322:	4b03      	ldr	r3, [pc, #12]	; (1330 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    1324:	4798      	blx	r3
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	4618      	mov	r0, r3
    132a:	3708      	adds	r7, #8
    132c:	46bd      	mov	sp, r7
    132e:	bd80      	pop	{r7, pc}
    1330:	00013fb1 	.word	0x00013fb1

00001334 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1334:	b580      	push	{r7, lr}
    1336:	b082      	sub	sp, #8
    1338:	af00      	add	r7, sp, #0
    133a:	6078      	str	r0, [r7, #4]
    133c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    133e:	6839      	ldr	r1, [r7, #0]
    1340:	6878      	ldr	r0, [r7, #4]
    1342:	4b03      	ldr	r3, [pc, #12]	; (1350 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    1344:	4798      	blx	r3
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	4618      	mov	r0, r3
    134a:	3708      	adds	r7, #8
    134c:	46bd      	mov	sp, r7
    134e:	bd80      	pop	{r7, pc}
    1350:	00013fb1 	.word	0x00013fb1

00001354 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1354:	b580      	push	{r7, lr}
    1356:	b082      	sub	sp, #8
    1358:	af00      	add	r7, sp, #0
    135a:	6078      	str	r0, [r7, #4]
    135c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    135e:	6839      	ldr	r1, [r7, #0]
    1360:	6878      	ldr	r0, [r7, #4]
    1362:	4b03      	ldr	r3, [pc, #12]	; (1370 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    1364:	4798      	blx	r3
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	4618      	mov	r0, r3
    136a:	3708      	adds	r7, #8
    136c:	46bd      	mov	sp, r7
    136e:	bd80      	pop	{r7, pc}
    1370:	00013fb1 	.word	0x00013fb1

00001374 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1374:	b580      	push	{r7, lr}
    1376:	b082      	sub	sp, #8
    1378:	af00      	add	r7, sp, #0
    137a:	6078      	str	r0, [r7, #4]
    137c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    137e:	6839      	ldr	r1, [r7, #0]
    1380:	6878      	ldr	r0, [r7, #4]
    1382:	4b03      	ldr	r3, [pc, #12]	; (1390 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    1384:	4798      	blx	r3
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	4618      	mov	r0, r3
    138a:	3708      	adds	r7, #8
    138c:	46bd      	mov	sp, r7
    138e:	bd80      	pop	{r7, pc}
    1390:	00013fb1 	.word	0x00013fb1

00001394 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    1394:	b580      	push	{r7, lr}
    1396:	b082      	sub	sp, #8
    1398:	af00      	add	r7, sp, #0
    139a:	6078      	str	r0, [r7, #4]
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	4618      	mov	r0, r3
    13a0:	4b03      	ldr	r3, [pc, #12]	; (13b0 <_ZN19PersistenceServicesD1Ev+0x1c>)
    13a2:	4798      	blx	r3
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	4618      	mov	r0, r3
    13a8:	3708      	adds	r7, #8
    13aa:	46bd      	mov	sp, r7
    13ac:	bd80      	pop	{r7, pc}
    13ae:	bf00      	nop
    13b0:	00000ac1 	.word	0x00000ac1

000013b4 <_ZN21MemoryManagment_ClassC1Ev>:
#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"
#include "CDC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    13b4:	b580      	push	{r7, lr}
    13b6:	b082      	sub	sp, #8
    13b8:	af00      	add	r7, sp, #0
    13ba:	6078      	str	r0, [r7, #4]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	4618      	mov	r0, r3
    13c0:	4b17      	ldr	r3, [pc, #92]	; (1420 <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
    13c2:	4798      	blx	r3
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    13ca:	4618      	mov	r0, r3
    13cc:	4b15      	ldr	r3, [pc, #84]	; (1424 <_ZN21MemoryManagment_ClassC1Ev+0x70>)
    13ce:	4798      	blx	r3
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
    13d6:	4618      	mov	r0, r3
    13d8:	4b13      	ldr	r3, [pc, #76]	; (1428 <_ZN21MemoryManagment_ClassC1Ev+0x74>)
    13da:	4798      	blx	r3
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
    13e2:	4618      	mov	r0, r3
    13e4:	4b11      	ldr	r3, [pc, #68]	; (142c <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    13e6:	4798      	blx	r3
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	f203 7364 	addw	r3, r3, #1892	; 0x764
    13ee:	4618      	mov	r0, r3
    13f0:	4b0f      	ldr	r3, [pc, #60]	; (1430 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    13f2:	4798      	blx	r3
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	2200      	movs	r2, #0
    13f8:	f8c3 2998 	str.w	r2, [r3, #2456]	; 0x998
{
	_currentAddress=0;
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	2200      	movs	r2, #0
    1400:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
	head=512;
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	f44f 7200 	mov.w	r2, #512	; 0x200
    140a:	f8c3 299c 	str.w	r2, [r3, #2460]	; 0x99c
	tail=0;
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	2200      	movs	r2, #0
    1412:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0

	
} //MemoryManagment_Class
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	4618      	mov	r0, r3
    141a:	3708      	adds	r7, #8
    141c:	46bd      	mov	sp, r7
    141e:	bd80      	pop	{r7, pc}
    1420:	00000b95 	.word	0x00000b95
    1424:	00001b95 	.word	0x00001b95
    1428:	00000def 	.word	0x00000def
    142c:	00001771 	.word	0x00001771
    1430:	00000bf9 	.word	0x00000bf9

00001434 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    1434:	b580      	push	{r7, lr}
    1436:	b082      	sub	sp, #8
    1438:	af00      	add	r7, sp, #0
    143a:	6078      	str	r0, [r7, #4]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
    1442:	4618      	mov	r0, r3
    1444:	4b0b      	ldr	r3, [pc, #44]	; (1474 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    1446:	4798      	blx	r3
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
    144e:	4618      	mov	r0, r3
    1450:	4b09      	ldr	r3, [pc, #36]	; (1478 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    1452:	4798      	blx	r3
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    145a:	4618      	mov	r0, r3
    145c:	4b07      	ldr	r3, [pc, #28]	; (147c <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    145e:	4798      	blx	r3
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	4618      	mov	r0, r3
    1464:	4b06      	ldr	r3, [pc, #24]	; (1480 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    1466:	4798      	blx	r3
{
} //~MemoryManagment_Class
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	4618      	mov	r0, r3
    146c:	3708      	adds	r7, #8
    146e:	46bd      	mov	sp, r7
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	00001785 	.word	0x00001785
    1478:	00000e03 	.word	0x00000e03
    147c:	00001395 	.word	0x00001395
    1480:	00000bc5 	.word	0x00000bc5

00001484 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    1484:	b580      	push	{r7, lr}
    1486:	b082      	sub	sp, #8
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
    148c:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    148e:	481d      	ldr	r0, [pc, #116]	; (1504 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    1490:	4b1d      	ldr	r3, [pc, #116]	; (1508 <_ZN21MemoryManagment_Class4InitEm+0x84>)
    1492:	4798      	blx	r3
    1494:	4603      	mov	r3, r0
    1496:	2b00      	cmp	r3, #0
    1498:	d009      	beq.n	14ae <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    149a:	491c      	ldr	r1, [pc, #112]	; (150c <_ZN21MemoryManagment_Class4InitEm+0x88>)
    149c:	481c      	ldr	r0, [pc, #112]	; (1510 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    149e:	4b1d      	ldr	r3, [pc, #116]	; (1514 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    14a0:	4798      	blx	r3
    14a2:	4603      	mov	r3, r0
    14a4:	491c      	ldr	r1, [pc, #112]	; (1518 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    14a6:	4618      	mov	r0, r3
    14a8:	4b1c      	ldr	r3, [pc, #112]	; (151c <_ZN21MemoryManagment_Class4InitEm+0x98>)
    14aa:	4798      	blx	r3
    14ac:	e008      	b.n	14c0 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    14ae:	491c      	ldr	r1, [pc, #112]	; (1520 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    14b0:	4817      	ldr	r0, [pc, #92]	; (1510 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    14b2:	4b18      	ldr	r3, [pc, #96]	; (1514 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    14b4:	4798      	blx	r3
    14b6:	4603      	mov	r3, r0
    14b8:	4917      	ldr	r1, [pc, #92]	; (1518 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    14ba:	4618      	mov	r0, r3
    14bc:	4b17      	ldr	r3, [pc, #92]	; (151c <_ZN21MemoryManagment_Class4InitEm+0x98>)
    14be:	4798      	blx	r3
		}
		if (eeprom.Init())
    14c0:	4818      	ldr	r0, [pc, #96]	; (1524 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    14c2:	4b19      	ldr	r3, [pc, #100]	; (1528 <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    14c4:	4798      	blx	r3
    14c6:	4603      	mov	r3, r0
    14c8:	2b00      	cmp	r3, #0
    14ca:	d009      	beq.n	14e0 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    14cc:	4917      	ldr	r1, [pc, #92]	; (152c <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    14ce:	4810      	ldr	r0, [pc, #64]	; (1510 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    14d0:	4b17      	ldr	r3, [pc, #92]	; (1530 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    14d2:	4798      	blx	r3
    14d4:	4603      	mov	r3, r0
    14d6:	4910      	ldr	r1, [pc, #64]	; (1518 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    14d8:	4618      	mov	r0, r3
    14da:	4b10      	ldr	r3, [pc, #64]	; (151c <_ZN21MemoryManagment_Class4InitEm+0x98>)
    14dc:	4798      	blx	r3
    14de:	e008      	b.n	14f2 <_ZN21MemoryManagment_Class4InitEm+0x6e>
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    14e0:	4914      	ldr	r1, [pc, #80]	; (1534 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    14e2:	480b      	ldr	r0, [pc, #44]	; (1510 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    14e4:	4b12      	ldr	r3, [pc, #72]	; (1530 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    14e6:	4798      	blx	r3
    14e8:	4603      	mov	r3, r0
    14ea:	490b      	ldr	r1, [pc, #44]	; (1518 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    14ec:	4618      	mov	r0, r3
    14ee:	4b0b      	ldr	r3, [pc, #44]	; (151c <_ZN21MemoryManagment_Class4InitEm+0x98>)
    14f0:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    14f2:	6839      	ldr	r1, [r7, #0]
    14f4:	6878      	ldr	r0, [r7, #4]
    14f6:	4b10      	ldr	r3, [pc, #64]	; (1538 <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    14f8:	4798      	blx	r3
}
    14fa:	bf00      	nop
    14fc:	4618      	mov	r0, r3
    14fe:	3708      	adds	r7, #8
    1500:	46bd      	mov	sp, r7
    1502:	bd80      	pop	{r7, pc}
    1504:	200049c8 	.word	0x200049c8
    1508:	00012991 	.word	0x00012991
    150c:	00016ee4 	.word	0x00016ee4
    1510:	20004d34 	.word	0x20004d34
    1514:	000016f5 	.word	0x000016f5
    1518:	00016f04 	.word	0x00016f04
    151c:	00000649 	.word	0x00000649
    1520:	00016f08 	.word	0x00016f08
    1524:	20004974 	.word	0x20004974
    1528:	00011fdd 	.word	0x00011fdd
    152c:	00016f28 	.word	0x00016f28
    1530:	00000669 	.word	0x00000669
    1534:	00016f48 	.word	0x00016f48
    1538:	00001569 	.word	0x00001569

0000153c <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    153c:	b580      	push	{r7, lr}
    153e:	b082      	sub	sp, #8
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
    1544:	460b      	mov	r3, r1
    1546:	70fb      	strb	r3, [r7, #3]
    1548:	4613      	mov	r3, r2
    154a:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    154c:	78ba      	ldrb	r2, [r7, #2]
    154e:	78fb      	ldrb	r3, [r7, #3]
    1550:	4619      	mov	r1, r3
    1552:	4803      	ldr	r0, [pc, #12]	; (1560 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    1554:	4b03      	ldr	r3, [pc, #12]	; (1564 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    1556:	4798      	blx	r3
  }
    1558:	bf00      	nop
    155a:	3708      	adds	r7, #8
    155c:	46bd      	mov	sp, r7
    155e:	bd80      	pop	{r7, pc}
    1560:	200038a8 	.word	0x200038a8
    1564:	00011345 	.word	0x00011345

00001568 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    1568:	b580      	push	{r7, lr}
    156a:	b082      	sub	sp, #8
    156c:	af00      	add	r7, sp, #0
    156e:	6078      	str	r0, [r7, #4]
    1570:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	4618      	mov	r0, r3
    1576:	4b12      	ldr	r3, [pc, #72]	; (15c0 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    1578:	4798      	blx	r3
    157a:	4602      	mov	r2, r0
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990


	 if (!logArea.capacity) {
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	f8d3 3990 	ldr.w	r3, [r3, #2448]	; 0x990
    1588:	2b00      	cmp	r3, #0
    158a:	d113      	bne.n	15b4 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    158c:	683b      	ldr	r3, [r7, #0]
    158e:	2b00      	cmp	r3, #0
    1590:	d009      	beq.n	15a6 <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	683a      	ldr	r2, [r7, #0]
    1596:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
			 logArea.supported = false;
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	2200      	movs	r2, #0
    159e:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
			 return true;
    15a2:	2301      	movs	r3, #1
    15a4:	e007      	b.n	15b6 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    15a6:	2200      	movs	r2, #0
    15a8:	2103      	movs	r1, #3
    15aa:	6878      	ldr	r0, [r7, #4]
    15ac:	4b05      	ldr	r3, [pc, #20]	; (15c4 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    15ae:	4798      	blx	r3
			 return false;
    15b0:	2300      	movs	r3, #0
    15b2:	e000      	b.n	15b6 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    15b4:	2301      	movs	r3, #1
 }
    15b6:	4618      	mov	r0, r3
    15b8:	3708      	adds	r7, #8
    15ba:	46bd      	mov	sp, r7
    15bc:	bd80      	pop	{r7, pc}
    15be:	bf00      	nop
    15c0:	00012b11 	.word	0x00012b11
    15c4:	0000153d 	.word	0x0000153d

000015c8 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    15c8:	b580      	push	{r7, lr}
    15ca:	b084      	sub	sp, #16
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
    15d8:	6839      	ldr	r1, [r7, #0]
    15da:	4618      	mov	r0, r3
    15dc:	4b0f      	ldr	r3, [pc, #60]	; (161c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x54>)
    15de:	4798      	blx	r3
    15e0:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    15e8:	227c      	movs	r2, #124	; 0x7c
    15ea:	6839      	ldr	r1, [r7, #0]
    15ec:	4618      	mov	r0, r3
    15ee:	4b0c      	ldr	r3, [pc, #48]	; (1620 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x58>)
    15f0:	4798      	blx	r3
    15f2:	4602      	mov	r2, r0
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
	w=WriteCRCAppState(crc32);
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	f503 62d5 	add.w	r2, r3, #1704	; 0x6a8
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
    1606:	4619      	mov	r1, r3
    1608:	4610      	mov	r0, r2
    160a:	4b06      	ldr	r3, [pc, #24]	; (1624 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    160c:	4798      	blx	r3
    160e:	60f8      	str	r0, [r7, #12]
	return	w;
    1610:	68fb      	ldr	r3, [r7, #12]
 }
    1612:	4618      	mov	r0, r3
    1614:	3710      	adds	r7, #16
    1616:	46bd      	mov	sp, r7
    1618:	bd80      	pop	{r7, pc}
    161a:	bf00      	nop
    161c:	0000196d 	.word	0x0000196d
    1620:	00000b31 	.word	0x00000b31
    1624:	000019d5 	.word	0x000019d5

00001628 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    1628:	b580      	push	{r7, lr}
    162a:	b084      	sub	sp, #16
    162c:	af00      	add	r7, sp, #0
    162e:	6078      	str	r0, [r7, #4]
    1630:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacState;
    1632:	4b0b      	ldr	r3, [pc, #44]	; (1660 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x38>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	33cc      	adds	r3, #204	; 0xcc
    1638:	60fb      	str	r3, [r7, #12]
	 uint32_t	bufferAddres=((uint32_t)&flashBuffer);
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
    1640:	60bb      	str	r3, [r7, #8]
	 bufferAddres+=add;
    1642:	68ba      	ldr	r2, [r7, #8]
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	4413      	add	r3, r2
    1648:	60bb      	str	r3, [r7, #8]
	 memcpy((void*)bufferAddres,&hs,sizeof(HVACState));
    164a:	68bb      	ldr	r3, [r7, #8]
    164c:	227c      	movs	r2, #124	; 0x7c
    164e:	6839      	ldr	r1, [r7, #0]
    1650:	4618      	mov	r0, r3
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x3c>)
    1654:	4798      	blx	r3
	 return	bufferAddres;
    1656:	68bb      	ldr	r3, [r7, #8]
 }
    1658:	4618      	mov	r0, r3
    165a:	3710      	adds	r7, #16
    165c:	46bd      	mov	sp, r7
    165e:	bd80      	pop	{r7, pc}
    1660:	200029c4 	.word	0x200029c4
    1664:	0001652d 	.word	0x0001652d

00001668 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    1668:	b580      	push	{r7, lr}
    166a:	b084      	sub	sp, #16
    166c:	af00      	add	r7, sp, #0
    166e:	6078      	str	r0, [r7, #4]
    1670:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    1672:	6839      	ldr	r1, [r7, #0]
    1674:	6878      	ldr	r0, [r7, #4]
    1676:	4b0e      	ldr	r3, [pc, #56]	; (16b0 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x48>)
    1678:	4798      	blx	r3
    167a:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    1682:	227c      	movs	r2, #124	; 0x7c
    1684:	6839      	ldr	r1, [r7, #0]
    1686:	4618      	mov	r0, r3
    1688:	4b0a      	ldr	r3, [pc, #40]	; (16b4 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x4c>)
    168a:	4798      	blx	r3
    168c:	4602      	mov	r2, r0
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
	  w=SaveCRCAppState(crc32);
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
    169a:	4619      	mov	r1, r3
    169c:	6878      	ldr	r0, [r7, #4]
    169e:	4b06      	ldr	r3, [pc, #24]	; (16b8 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    16a0:	4798      	blx	r3
    16a2:	60f8      	str	r0, [r7, #12]
	  return	w;
    16a4:	68fb      	ldr	r3, [r7, #12]
  }
    16a6:	4618      	mov	r0, r3
    16a8:	3710      	adds	r7, #16
    16aa:	46bd      	mov	sp, r7
    16ac:	bd80      	pop	{r7, pc}
    16ae:	bf00      	nop
    16b0:	00001629 	.word	0x00001629
    16b4:	00000b31 	.word	0x00000b31
    16b8:	000016bd 	.word	0x000016bd

000016bc <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    16bc:	b480      	push	{r7}
    16be:	b085      	sub	sp, #20
    16c0:	af00      	add	r7, sp, #0
    16c2:	6078      	str	r0, [r7, #4]
    16c4:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    16c6:	4b0a      	ldr	r3, [pc, #40]	; (16f0 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x34>)
    16c8:	681b      	ldr	r3, [r3, #0]
    16ca:	33cc      	adds	r3, #204	; 0xcc
    16cc:	60fb      	str	r3, [r7, #12]
	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
    16d4:	461a      	mov	r2, r3
    16d6:	68fb      	ldr	r3, [r7, #12]
    16d8:	4413      	add	r3, r2
    16da:	60bb      	str	r3, [r7, #8]
	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
    16dc:	68bb      	ldr	r3, [r7, #8]
    16de:	683a      	ldr	r2, [r7, #0]
    16e0:	601a      	str	r2, [r3, #0]
	return	bufferAddres;
    16e2:	68bb      	ldr	r3, [r7, #8]
}
    16e4:	4618      	mov	r0, r3
    16e6:	3714      	adds	r7, #20
    16e8:	46bd      	mov	sp, r7
    16ea:	bc80      	pop	{r7}
    16ec:	4770      	bx	lr
    16ee:	bf00      	nop
    16f0:	200029c4 	.word	0x200029c4

000016f4 <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    16f4:	b580      	push	{r7, lr}
    16f6:	b082      	sub	sp, #8
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
    16fc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    16fe:	6839      	ldr	r1, [r7, #0]
    1700:	6878      	ldr	r0, [r7, #4]
    1702:	4b03      	ldr	r3, [pc, #12]	; (1710 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    1704:	4798      	blx	r3
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	4618      	mov	r0, r3
    170a:	3708      	adds	r7, #8
    170c:	46bd      	mov	sp, r7
    170e:	bd80      	pop	{r7, pc}
    1710:	00013fb1 	.word	0x00013fb1

00001714 <_Z41__static_initialization_and_destruction_0ii>:
 
    1714:	b580      	push	{r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	af00      	add	r7, sp, #0
    171a:	6078      	str	r0, [r7, #4]
    171c:	6039      	str	r1, [r7, #0]
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	2b01      	cmp	r3, #1
    1722:	d10c      	bne.n	173e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1724:	683b      	ldr	r3, [r7, #0]
    1726:	f64f 72ff 	movw	r2, #65535	; 0xffff
    172a:	4293      	cmp	r3, r2
    172c:	d107      	bne.n	173e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    172e:	4806      	ldr	r0, [pc, #24]	; (1748 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1732:	4798      	blx	r3
    1734:	4a06      	ldr	r2, [pc, #24]	; (1750 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1736:	4907      	ldr	r1, [pc, #28]	; (1754 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1738:	4803      	ldr	r0, [pc, #12]	; (1748 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    173a:	4b07      	ldr	r3, [pc, #28]	; (1758 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    173c:	4798      	blx	r3
    173e:	bf00      	nop
    1740:	3708      	adds	r7, #8
    1742:	46bd      	mov	sp, r7
    1744:	bd80      	pop	{r7, pc}
    1746:	bf00      	nop
    1748:	20000ed0 	.word	0x20000ed0
    174c:	000013b5 	.word	0x000013b5
    1750:	20000000 	.word	0x20000000
    1754:	00001435 	.word	0x00001435
    1758:	00014919 	.word	0x00014919

0000175c <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    175c:	b580      	push	{r7, lr}
    175e:	af00      	add	r7, sp, #0
    1760:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1764:	2001      	movs	r0, #1
    1766:	4b01      	ldr	r3, [pc, #4]	; (176c <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    1768:	4798      	blx	r3
    176a:	bd80      	pop	{r7, pc}
    176c:	00001715 	.word	0x00001715

00001770 <_ZN18MemoryStruct_ClassC1Ev>:
#include "MemoryManagment_Class.h"

MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
    1770:	b480      	push	{r7}
    1772:	b083      	sub	sp, #12
    1774:	af00      	add	r7, sp, #0
    1776:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	4618      	mov	r0, r3
    177c:	370c      	adds	r7, #12
    177e:	46bd      	mov	sp, r7
    1780:	bc80      	pop	{r7}
    1782:	4770      	bx	lr

00001784 <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
    1784:	b480      	push	{r7}
    1786:	b083      	sub	sp, #12
    1788:	af00      	add	r7, sp, #0
    178a:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	4618      	mov	r0, r3
    1790:	370c      	adds	r7, #12
    1792:	46bd      	mov	sp, r7
    1794:	bc80      	pop	{r7}
    1796:	4770      	bx	lr

00001798 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	MemoryStruct_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    1798:	b580      	push	{r7, lr}
    179a:	b084      	sub	sp, #16
    179c:	af00      	add	r7, sp, #0
    179e:	6078      	str	r0, [r7, #4]
    17a0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    17a2:	4b07      	ldr	r3, [pc, #28]	; (17c0 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x28>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	3310      	adds	r3, #16
    17a8:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    17aa:	68fa      	ldr	r2, [r7, #12]
    17ac:	6839      	ldr	r1, [r7, #0]
    17ae:	6878      	ldr	r0, [r7, #4]
    17b0:	4b04      	ldr	r3, [pc, #16]	; (17c4 <_ZN18MemoryStruct_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    17b2:	4798      	blx	r3
    17b4:	60b8      	str	r0, [r7, #8]
	return	r;
    17b6:	68bb      	ldr	r3, [r7, #8]
}
    17b8:	4618      	mov	r0, r3
    17ba:	3710      	adds	r7, #16
    17bc:	46bd      	mov	sp, r7
    17be:	bd80      	pop	{r7, pc}
    17c0:	200029c4 	.word	0x200029c4
    17c4:	00001829 	.word	0x00001829

000017c8 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadLastConfigurationData(ConfigurationData& cd){
    17c8:	b580      	push	{r7, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	af00      	add	r7, sp, #0
    17ce:	6078      	str	r0, [r7, #4]
    17d0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
    17d2:	4b07      	ldr	r3, [pc, #28]	; (17f0 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x28>)
    17d4:	681b      	ldr	r3, [r3, #0]
    17d6:	3310      	adds	r3, #16
    17d8:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    17da:	68fa      	ldr	r2, [r7, #12]
    17dc:	6839      	ldr	r1, [r7, #0]
    17de:	6878      	ldr	r0, [r7, #4]
    17e0:	4b04      	ldr	r3, [pc, #16]	; (17f4 <_ZN18MemoryStruct_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    17e2:	4798      	blx	r3
    17e4:	60b8      	str	r0, [r7, #8]
	return	r;
    17e6:	68bb      	ldr	r3, [r7, #8]
}
    17e8:	4618      	mov	r0, r3
    17ea:	3710      	adds	r7, #16
    17ec:	46bd      	mov	sp, r7
    17ee:	bd80      	pop	{r7, pc}
    17f0:	200029c4 	.word	0x200029c4
    17f4:	00001829 	.word	0x00001829

000017f8 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	MemoryStruct_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    17f8:	b580      	push	{r7, lr}
    17fa:	b084      	sub	sp, #16
    17fc:	af00      	add	r7, sp, #0
    17fe:	6078      	str	r0, [r7, #4]
    1800:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->updatedConfiguration;
    1802:	4b07      	ldr	r3, [pc, #28]	; (1820 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x28>)
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	3310      	adds	r3, #16
    1808:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    180a:	68fa      	ldr	r2, [r7, #12]
    180c:	6839      	ldr	r1, [r7, #0]
    180e:	6878      	ldr	r0, [r7, #4]
    1810:	4b04      	ldr	r3, [pc, #16]	; (1824 <_ZN18MemoryStruct_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    1812:	4798      	blx	r3
    1814:	60b8      	str	r0, [r7, #8]
	return	r;
    1816:	68bb      	ldr	r3, [r7, #8]
}
    1818:	4618      	mov	r0, r3
    181a:	3710      	adds	r7, #16
    181c:	46bd      	mov	sp, r7
    181e:	bd80      	pop	{r7, pc}
    1820:	200029c4 	.word	0x200029c4
    1824:	00001829 	.word	0x00001829

00001828 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	MemoryStruct_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    1828:	b590      	push	{r4, r7, lr}
    182a:	b087      	sub	sp, #28
    182c:	af00      	add	r7, sp, #0
    182e:	60f8      	str	r0, [r7, #12]
    1830:	60b9      	str	r1, [r7, #8]
    1832:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    1834:	68ba      	ldr	r2, [r7, #8]
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    183c:	68fb      	ldr	r3, [r7, #12]
    183e:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    1842:	23ac      	movs	r3, #172	; 0xac
    1844:	687a      	ldr	r2, [r7, #4]
    1846:	4804      	ldr	r0, [pc, #16]	; (1858 <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    1848:	4c04      	ldr	r4, [pc, #16]	; (185c <_ZN18MemoryStruct_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    184a:	47a0      	blx	r4
    184c:	6178      	str	r0, [r7, #20]
	return	r;
    184e:	697b      	ldr	r3, [r7, #20]
}
    1850:	4618      	mov	r0, r3
    1852:	371c      	adds	r7, #28
    1854:	46bd      	mov	sp, r7
    1856:	bd90      	pop	{r4, r7, pc}
    1858:	200049c8 	.word	0x200049c8
    185c:	00012a61 	.word	0x00012a61

00001860 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv>:

uint32_t	MemoryStruct_Class::ReadCRCConfigurationData(void){
    1860:	b590      	push	{r4, r7, lr}
    1862:	b087      	sub	sp, #28
    1864:	af00      	add	r7, sp, #0
    1866:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    1868:	4b08      	ldr	r3, [pc, #32]	; (188c <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x2c>)
    186a:	681b      	ldr	r3, [r3, #0]
    186c:	3310      	adds	r3, #16
    186e:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    1870:	f107 010c 	add.w	r1, r7, #12
    1874:	2304      	movs	r3, #4
    1876:	697a      	ldr	r2, [r7, #20]
    1878:	4805      	ldr	r0, [pc, #20]	; (1890 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x30>)
    187a:	4c06      	ldr	r4, [pc, #24]	; (1894 <_ZN18MemoryStruct_Class24ReadCRCConfigurationDataEv+0x34>)
    187c:	47a0      	blx	r4
    187e:	6138      	str	r0, [r7, #16]
	return	crc;
    1880:	68fb      	ldr	r3, [r7, #12]
}
    1882:	4618      	mov	r0, r3
    1884:	371c      	adds	r7, #28
    1886:	46bd      	mov	sp, r7
    1888:	bd90      	pop	{r4, r7, pc}
    188a:	bf00      	nop
    188c:	200029c4 	.word	0x200029c4
    1890:	200049c8 	.word	0x200049c8
    1894:	00012a61 	.word	0x00012a61

00001898 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	MemoryStruct_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    1898:	b590      	push	{r4, r7, lr}
    189a:	b087      	sub	sp, #28
    189c:	af00      	add	r7, sp, #0
    189e:	60f8      	str	r0, [r7, #12]
    18a0:	60b9      	str	r1, [r7, #8]
    18a2:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    18a4:	68ba      	ldr	r2, [r7, #8]
    18a6:	68fb      	ldr	r3, [r7, #12]
    18a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    18ac:	68fb      	ldr	r3, [r7, #12]
    18ae:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    18b2:	23ac      	movs	r3, #172	; 0xac
    18b4:	687a      	ldr	r2, [r7, #4]
    18b6:	4804      	ldr	r0, [pc, #16]	; (18c8 <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    18b8:	4c04      	ldr	r4, [pc, #16]	; (18cc <_ZN18MemoryStruct_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    18ba:	47a0      	blx	r4
    18bc:	6178      	str	r0, [r7, #20]
	return	w;
    18be:	697b      	ldr	r3, [r7, #20]
}
    18c0:	4618      	mov	r0, r3
    18c2:	371c      	adds	r7, #28
    18c4:	46bd      	mov	sp, r7
    18c6:	bd90      	pop	{r4, r7, pc}
    18c8:	200049c8 	.word	0x200049c8
    18cc:	00012a2d 	.word	0x00012a2d

000018d0 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	MemoryStruct_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    18d0:	b590      	push	{r4, r7, lr}
    18d2:	b087      	sub	sp, #28
    18d4:	af00      	add	r7, sp, #0
    18d6:	60f8      	str	r0, [r7, #12]
    18d8:	60b9      	str	r1, [r7, #8]
    18da:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    18dc:	68ba      	ldr	r2, [r7, #8]
    18de:	68fb      	ldr	r3, [r7, #12]
    18e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    18ea:	237c      	movs	r3, #124	; 0x7c
    18ec:	687a      	ldr	r2, [r7, #4]
    18ee:	4804      	ldr	r0, [pc, #16]	; (1900 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x30>)
    18f0:	4c04      	ldr	r4, [pc, #16]	; (1904 <_ZN18MemoryStruct_Class21WriteApplicationStateER9HVACStatem+0x34>)
    18f2:	47a0      	blx	r4
    18f4:	6178      	str	r0, [r7, #20]
	return	w;
    18f6:	697b      	ldr	r3, [r7, #20]
}
    18f8:	4618      	mov	r0, r3
    18fa:	371c      	adds	r7, #28
    18fc:	46bd      	mov	sp, r7
    18fe:	bd90      	pop	{r4, r7, pc}
    1900:	200049c8 	.word	0x200049c8
    1904:	00012a2d 	.word	0x00012a2d

00001908 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData>:
uint32_t	MemoryStruct_Class::WriteDefaultConfiguration(ConfigurationData& cd){
    1908:	b580      	push	{r7, lr}
    190a:	b084      	sub	sp, #16
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
    1910:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->defaultConfiguration;
    1912:	4b07      	ldr	r3, [pc, #28]	; (1930 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x28>)
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	3310      	adds	r3, #16
    1918:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteConfigurationData(cd,add);
    191a:	68fa      	ldr	r2, [r7, #12]
    191c:	6839      	ldr	r1, [r7, #0]
    191e:	6878      	ldr	r0, [r7, #4]
    1920:	4b04      	ldr	r3, [pc, #16]	; (1934 <_ZN18MemoryStruct_Class25WriteDefaultConfigurationER17ConfigurationData+0x2c>)
    1922:	4798      	blx	r3
    1924:	60b8      	str	r0, [r7, #8]
	return	w;
    1926:	68bb      	ldr	r3, [r7, #8]
}
    1928:	4618      	mov	r0, r3
    192a:	3710      	adds	r7, #16
    192c:	46bd      	mov	sp, r7
    192e:	bd80      	pop	{r7, pc}
    1930:	200029c4 	.word	0x200029c4
    1934:	00001899 	.word	0x00001899

00001938 <_ZN18MemoryStruct_Class17WriteDefaultStateEv>:
uint32_t	MemoryStruct_Class::WriteDefaultState(void){
    1938:	b580      	push	{r7, lr}
    193a:	b084      	sub	sp, #16
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&flashMap->hvacDefaultState;
    1940:	4b07      	ldr	r3, [pc, #28]	; (1960 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x28>)
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	33cc      	adds	r3, #204	; 0xcc
    1946:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hvac.defaultState,add);
    1948:	68fa      	ldr	r2, [r7, #12]
    194a:	4906      	ldr	r1, [pc, #24]	; (1964 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x2c>)
    194c:	6878      	ldr	r0, [r7, #4]
    194e:	4b06      	ldr	r3, [pc, #24]	; (1968 <_ZN18MemoryStruct_Class17WriteDefaultStateEv+0x30>)
    1950:	4798      	blx	r3
    1952:	60b8      	str	r0, [r7, #8]
	return	w;
    1954:	68bb      	ldr	r3, [r7, #8]
}
    1956:	4618      	mov	r0, r3
    1958:	3710      	adds	r7, #16
    195a:	46bd      	mov	sp, r7
    195c:	bd80      	pop	{r7, pc}
    195e:	bf00      	nop
    1960:	200029c4 	.word	0x200029c4
    1964:	200029e0 	.word	0x200029e0
    1968:	000018d1 	.word	0x000018d1

0000196c <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState>:

uint32_t	MemoryStruct_Class::WriteCurrentState(HVACState& hs){
    196c:	b580      	push	{r7, lr}
    196e:	b084      	sub	sp, #16
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
    1974:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacState;
    1976:	4b07      	ldr	r3, [pc, #28]	; (1994 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x28>)
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	33cc      	adds	r3, #204	; 0xcc
    197c:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    197e:	68fa      	ldr	r2, [r7, #12]
    1980:	6839      	ldr	r1, [r7, #0]
    1982:	6878      	ldr	r0, [r7, #4]
    1984:	4b04      	ldr	r3, [pc, #16]	; (1998 <_ZN18MemoryStruct_Class17WriteCurrentStateER9HVACState+0x2c>)
    1986:	4798      	blx	r3
    1988:	60b8      	str	r0, [r7, #8]
	return	w;
    198a:	68bb      	ldr	r3, [r7, #8]
}
    198c:	4618      	mov	r0, r3
    198e:	3710      	adds	r7, #16
    1990:	46bd      	mov	sp, r7
    1992:	bd80      	pop	{r7, pc}
    1994:	200029c4 	.word	0x200029c4
    1998:	000018d1 	.word	0x000018d1

0000199c <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm>:

uint32_t	MemoryStruct_Class::WriteCRCConfigurationData(uint32_t crc){
    199c:	b590      	push	{r4, r7, lr}
    199e:	b085      	sub	sp, #20
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
    19a4:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcConfigData;
    19a6:	4b08      	ldr	r3, [pc, #32]	; (19c8 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x2c>)
    19a8:	681b      	ldr	r3, [r3, #0]
    19aa:	3310      	adds	r3, #16
    19ac:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    19ae:	4639      	mov	r1, r7
    19b0:	2304      	movs	r3, #4
    19b2:	68fa      	ldr	r2, [r7, #12]
    19b4:	4805      	ldr	r0, [pc, #20]	; (19cc <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x30>)
    19b6:	4c06      	ldr	r4, [pc, #24]	; (19d0 <_ZN18MemoryStruct_Class25WriteCRCConfigurationDataEm+0x34>)
    19b8:	47a0      	blx	r4
    19ba:	60b8      	str	r0, [r7, #8]
	return	w;
    19bc:	68bb      	ldr	r3, [r7, #8]
}
    19be:	4618      	mov	r0, r3
    19c0:	3714      	adds	r7, #20
    19c2:	46bd      	mov	sp, r7
    19c4:	bd90      	pop	{r4, r7, pc}
    19c6:	bf00      	nop
    19c8:	200029c4 	.word	0x200029c4
    19cc:	200049c8 	.word	0x200049c8
    19d0:	00012a2d 	.word	0x00012a2d

000019d4 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm>:
uint32_t	MemoryStruct_Class::WriteCRCAppState(uint32_t crc){
    19d4:	b590      	push	{r4, r7, lr}
    19d6:	b085      	sub	sp, #20
    19d8:	af00      	add	r7, sp, #0
    19da:	6078      	str	r0, [r7, #4]
    19dc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->crcAppState;
    19de:	4b08      	ldr	r3, [pc, #32]	; (1a00 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x2c>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	33cc      	adds	r3, #204	; 0xcc
    19e4:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    19e6:	4639      	mov	r1, r7
    19e8:	2304      	movs	r3, #4
    19ea:	68fa      	ldr	r2, [r7, #12]
    19ec:	4805      	ldr	r0, [pc, #20]	; (1a04 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x30>)
    19ee:	4c06      	ldr	r4, [pc, #24]	; (1a08 <_ZN18MemoryStruct_Class16WriteCRCAppStateEm+0x34>)
    19f0:	47a0      	blx	r4
    19f2:	60b8      	str	r0, [r7, #8]
	return	w;
    19f4:	68bb      	ldr	r3, [r7, #8]
}
    19f6:	4618      	mov	r0, r3
    19f8:	3714      	adds	r7, #20
    19fa:	46bd      	mov	sp, r7
    19fc:	bd90      	pop	{r4, r7, pc}
    19fe:	bf00      	nop
    1a00:	200029c4 	.word	0x200029c4
    1a04:	200049c8 	.word	0x200049c8
    1a08:	00012a2d 	.word	0x00012a2d

00001a0c <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState>:
uint32_t	MemoryStruct_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	MemoryStruct_Class::ReadApplicationState(HVACState& as){
    1a0c:	b590      	push	{r4, r7, lr}
    1a0e:	b085      	sub	sp, #20
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
    1a14:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacState;
    1a16:	4b0d      	ldr	r3, [pc, #52]	; (1a4c <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x40>)
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	33cc      	adds	r3, #204	; 0xcc
    1a1c:	461a      	mov	r2, r3
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    1a24:	683a      	ldr	r2, [r7, #0]
    1a26:	687b      	ldr	r3, [r7, #4]
    1a28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1a38:	237c      	movs	r3, #124	; 0x7c
    1a3a:	4805      	ldr	r0, [pc, #20]	; (1a50 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x44>)
    1a3c:	4c05      	ldr	r4, [pc, #20]	; (1a54 <_ZN18MemoryStruct_Class20ReadApplicationStateER9HVACState+0x48>)
    1a3e:	47a0      	blx	r4
    1a40:	60f8      	str	r0, [r7, #12]
	return	r;
    1a42:	68fb      	ldr	r3, [r7, #12]
}
    1a44:	4618      	mov	r0, r3
    1a46:	3714      	adds	r7, #20
    1a48:	46bd      	mov	sp, r7
    1a4a:	bd90      	pop	{r4, r7, pc}
    1a4c:	200029c4 	.word	0x200029c4
    1a50:	200049c8 	.word	0x200049c8
    1a54:	00012a61 	.word	0x00012a61

00001a58 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv>:
uint32_t	MemoryStruct_Class::ReadCRCApplicationState(void){
    1a58:	b590      	push	{r4, r7, lr}
    1a5a:	b085      	sub	sp, #20
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->crcAppState;
    1a60:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x34>)
    1a62:	681b      	ldr	r3, [r3, #0]
    1a64:	33cc      	adds	r3, #204	; 0xcc
    1a66:	461a      	mov	r2, r3
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    1a74:	f107 0108 	add.w	r1, r7, #8
    1a78:	2304      	movs	r3, #4
    1a7a:	4805      	ldr	r0, [pc, #20]	; (1a90 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x38>)
    1a7c:	4c05      	ldr	r4, [pc, #20]	; (1a94 <_ZN18MemoryStruct_Class23ReadCRCApplicationStateEv+0x3c>)
    1a7e:	47a0      	blx	r4
    1a80:	60f8      	str	r0, [r7, #12]
	return	crc;
    1a82:	68bb      	ldr	r3, [r7, #8]
    1a84:	4618      	mov	r0, r3
    1a86:	3714      	adds	r7, #20
    1a88:	46bd      	mov	sp, r7
    1a8a:	bd90      	pop	{r4, r7, pc}
    1a8c:	200029c4 	.word	0x200029c4
    1a90:	200049c8 	.word	0x200049c8
    1a94:	00012a61 	.word	0x00012a61

00001a98 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    1a98:	b480      	push	{r7}
    1a9a:	b083      	sub	sp, #12
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	4618      	mov	r0, r3
    1aa4:	370c      	adds	r7, #12
    1aa6:	46bd      	mov	sp, r7
    1aa8:	bc80      	pop	{r7}
    1aaa:	4770      	bx	lr

00001aac <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    1aac:	b480      	push	{r7}
    1aae:	b083      	sub	sp, #12
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	4618      	mov	r0, r3
    1ab8:	370c      	adds	r7, #12
    1aba:	46bd      	mov	sp, r7
    1abc:	bc80      	pop	{r7}
    1abe:	4770      	bx	lr

00001ac0 <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    1ac0:	b480      	push	{r7}
    1ac2:	b083      	sub	sp, #12
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
	return	isOK;
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	b2db      	uxtb	r3, r3
}
    1ace:	4618      	mov	r0, r3
    1ad0:	370c      	adds	r7, #12
    1ad2:	46bd      	mov	sp, r7
    1ad4:	bc80      	pop	{r7}
    1ad6:	4770      	bx	lr

00001ad8 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    1ad8:	b580      	push	{r7, lr}
    1ada:	b086      	sub	sp, #24
    1adc:	af00      	add	r7, sp, #0
    1ade:	6078      	str	r0, [r7, #4]
    1ae0:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    1ae2:	6839      	ldr	r1, [r7, #0]
    1ae4:	4812      	ldr	r0, [pc, #72]	; (1b30 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    1ae6:	4b13      	ldr	r3, [pc, #76]	; (1b34 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    1ae8:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    1aea:	683b      	ldr	r3, [r7, #0]
    1aec:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    1aee:	693b      	ldr	r3, [r7, #16]
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    1af4:	2300      	movs	r3, #0
    1af6:	617b      	str	r3, [r7, #20]
    1af8:	697b      	ldr	r3, [r7, #20]
    1afa:	2b1f      	cmp	r3, #31
    1afc:	dc0d      	bgt.n	1b1a <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    1afe:	2201      	movs	r2, #1
    1b00:	697b      	ldr	r3, [r7, #20]
    1b02:	fa02 f303 	lsl.w	r3, r2, r3
    1b06:	461a      	mov	r2, r3
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	401a      	ands	r2, r3
    1b0c:	68fb      	ldr	r3, [r7, #12]
    1b0e:	4413      	add	r3, r2
    1b10:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    1b12:	697b      	ldr	r3, [r7, #20]
    1b14:	3301      	adds	r3, #1
    1b16:	617b      	str	r3, [r7, #20]
    1b18:	e7ee      	b.n	1af8 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    1b1a:	68fb      	ldr	r3, [r7, #12]
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d102      	bne.n	1b26 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	2201      	movs	r2, #1
    1b24:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    1b26:	68fb      	ldr	r3, [r7, #12]
}
    1b28:	4618      	mov	r0, r3
    1b2a:	3718      	adds	r7, #24
    1b2c:	46bd      	mov	sp, r7
    1b2e:	bd80      	pop	{r7, pc}
    1b30:	20000e48 	.word	0x20000e48
    1b34:	000010a5 	.word	0x000010a5

00001b38 <_Z41__static_initialization_and_destruction_0ii>:

    1b38:	b580      	push	{r7, lr}
    1b3a:	b082      	sub	sp, #8
    1b3c:	af00      	add	r7, sp, #0
    1b3e:	6078      	str	r0, [r7, #4]
    1b40:	6039      	str	r1, [r7, #0]
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2b01      	cmp	r3, #1
    1b46:	d10c      	bne.n	1b62 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1b48:	683b      	ldr	r3, [r7, #0]
    1b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1b4e:	4293      	cmp	r3, r2
    1b50:	d107      	bne.n	1b62 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1b52:	4806      	ldr	r0, [pc, #24]	; (1b6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1b54:	4b06      	ldr	r3, [pc, #24]	; (1b70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1b56:	4798      	blx	r3
    1b58:	4a06      	ldr	r2, [pc, #24]	; (1b74 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1b5a:	4907      	ldr	r1, [pc, #28]	; (1b78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1b5c:	4803      	ldr	r0, [pc, #12]	; (1b6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1b5e:	4b07      	ldr	r3, [pc, #28]	; (1b7c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1b60:	4798      	blx	r3
    1b62:	bf00      	nop
    1b64:	3708      	adds	r7, #8
    1b66:	46bd      	mov	sp, r7
    1b68:	bd80      	pop	{r7, pc}
    1b6a:	bf00      	nop
    1b6c:	200029c8 	.word	0x200029c8
    1b70:	00001a99 	.word	0x00001a99
    1b74:	20000000 	.word	0x20000000
    1b78:	00001aad 	.word	0x00001aad
    1b7c:	00014919 	.word	0x00014919

00001b80 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    1b80:	b580      	push	{r7, lr}
    1b82:	af00      	add	r7, sp, #0
    1b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1b88:	2001      	movs	r0, #1
    1b8a:	4b01      	ldr	r3, [pc, #4]	; (1b90 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    1b8c:	4798      	blx	r3
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	00001b39 	.word	0x00001b39

00001b94 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    1b94:	b580      	push	{r7, lr}
    1b96:	b082      	sub	sp, #8
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	4618      	mov	r0, r3
    1ba0:	4b05      	ldr	r3, [pc, #20]	; (1bb8 <_ZN19PersistenceServicesC1Ev+0x24>)
    1ba2:	4798      	blx	r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	2200      	movs	r2, #0
    1ba8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	{
	}
    1bac:	687b      	ldr	r3, [r7, #4]
    1bae:	4618      	mov	r0, r3
    1bb0:	3708      	adds	r7, #8
    1bb2:	46bd      	mov	sp, r7
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	bf00      	nop
    1bb8:	00000aad 	.word	0x00000aad

00001bbc <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    1bbc:	b480      	push	{r7}
    1bbe:	b085      	sub	sp, #20
    1bc0:	af00      	add	r7, sp, #0
    1bc2:	6078      	str	r0, [r7, #4]
    1bc4:	6039      	str	r1, [r7, #0]
	bool	result(true);
    1bc6:	2301      	movs	r3, #1
    1bc8:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    1bca:	683b      	ldr	r3, [r7, #0]
    1bcc:	2204      	movs	r2, #4
    1bce:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    1bd0:	683b      	ldr	r3, [r7, #0]
    1bd2:	22ac      	movs	r2, #172	; 0xac
    1bd4:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    1bd6:	683b      	ldr	r3, [r7, #0]
    1bd8:	f240 720c 	movw	r2, #1804	; 0x70c
    1bdc:	609a      	str	r2, [r3, #8]



	

	return result;
    1bde:	7bfb      	ldrb	r3, [r7, #15]
	}
    1be0:	4618      	mov	r0, r3
    1be2:	3714      	adds	r7, #20
    1be4:	46bd      	mov	sp, r7
    1be6:	bc80      	pop	{r7}
    1be8:	4770      	bx	lr

00001bea <_ZN19PersistenceServices20readCycleDescriptionER16CycleDescriptionh>:
	
	return result;
	}

bool PersistenceServices::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    1bea:	b480      	push	{r7}
    1bec:	b087      	sub	sp, #28
    1bee:	af00      	add	r7, sp, #0
    1bf0:	60f8      	str	r0, [r7, #12]
    1bf2:	60b9      	str	r1, [r7, #8]
    1bf4:	4613      	mov	r3, r2
    1bf6:	71fb      	strb	r3, [r7, #7]
	bool		result(false);
    1bf8:	2300      	movs	r3, #0
    1bfa:	75fb      	strb	r3, [r7, #23]
		{


		}

	return result;
    1bfc:	7dfb      	ldrb	r3, [r7, #23]
	}
    1bfe:	4618      	mov	r0, r3
    1c00:	371c      	adds	r7, #28
    1c02:	46bd      	mov	sp, r7
    1c04:	bc80      	pop	{r7}
    1c06:	4770      	bx	lr

00001c08 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData>:
	invalidatePersistentArea(kNVM2,FRAMProxy.persistentConfigurationArea.header);

	}

bool PersistenceServices::readPersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1c08:	b590      	push	{r4, r7, lr}
    1c0a:	b085      	sub	sp, #20
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
    1c10:	6039      	str	r1, [r7, #0]
	bool		result;

	result = isPersistentAreaValid(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1c12:	2300      	movs	r3, #0
    1c14:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1c18:	2344      	movs	r3, #68	; 0x44
    1c1a:	2102      	movs	r1, #2
    1c1c:	6878      	ldr	r0, [r7, #4]
    1c1e:	4c1e      	ldr	r4, [pc, #120]	; (1c98 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x90>)
    1c20:	47a0      	blx	r4
    1c22:	4603      	mov	r3, r0
    1c24:	73fb      	strb	r3, [r7, #15]
	if (result)
    1c26:	7bfb      	ldrb	r3, [r7, #15]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d003      	beq.n	1c34 <_ZN19PersistenceServices35readPersistentConfigurationDataAreaER27PersistentConfigurationData+0x2c>
		{
		int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1c2c:	2300      	movs	r3, #0
    1c2e:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1c32:	60bb      	str	r3, [r7, #8]
	
		}

	result &= (data.version == kPersistentConfigurationDataVersion);
    1c34:	7bfb      	ldrb	r3, [r7, #15]
    1c36:	683a      	ldr	r2, [r7, #0]
    1c38:	6852      	ldr	r2, [r2, #4]
    1c3a:	2a02      	cmp	r2, #2
    1c3c:	bf0c      	ite	eq
    1c3e:	2201      	moveq	r2, #1
    1c40:	2200      	movne	r2, #0
    1c42:	b2d2      	uxtb	r2, r2
    1c44:	4013      	ands	r3, r2
    1c46:	2b00      	cmp	r3, #0
    1c48:	bf14      	ite	ne
    1c4a:	2301      	movne	r3, #1
    1c4c:	2300      	moveq	r3, #0
    1c4e:	73fb      	strb	r3, [r7, #15]
	result &= (data.size == kPersistentConfigurationDataSize);
    1c50:	7bfb      	ldrb	r3, [r7, #15]
    1c52:	683a      	ldr	r2, [r7, #0]
    1c54:	6812      	ldr	r2, [r2, #0]
    1c56:	2a38      	cmp	r2, #56	; 0x38
    1c58:	bf0c      	ite	eq
    1c5a:	2201      	moveq	r2, #1
    1c5c:	2200      	movne	r2, #0
    1c5e:	b2d2      	uxtb	r2, r2
    1c60:	4013      	ands	r3, r2
    1c62:	2b00      	cmp	r3, #0
    1c64:	bf14      	ite	ne
    1c66:	2301      	movne	r3, #1
    1c68:	2300      	moveq	r3, #0
    1c6a:	73fb      	strb	r3, [r7, #15]
	result &= (data.partNumber == PARTNUMBER);
    1c6c:	7bfb      	ldrb	r3, [r7, #15]
    1c6e:	683a      	ldr	r2, [r7, #0]
    1c70:	6892      	ldr	r2, [r2, #8]
    1c72:	f240 710c 	movw	r1, #1804	; 0x70c
    1c76:	428a      	cmp	r2, r1
    1c78:	bf0c      	ite	eq
    1c7a:	2201      	moveq	r2, #1
    1c7c:	2200      	movne	r2, #0
    1c7e:	b2d2      	uxtb	r2, r2
    1c80:	4013      	ands	r3, r2
    1c82:	2b00      	cmp	r3, #0
    1c84:	bf14      	ite	ne
    1c86:	2301      	movne	r3, #1
    1c88:	2300      	moveq	r3, #0
    1c8a:	73fb      	strb	r3, [r7, #15]
	return result;
    1c8c:	7bfb      	ldrb	r3, [r7, #15]
	}
    1c8e:	4618      	mov	r0, r3
    1c90:	3714      	adds	r7, #20
    1c92:	46bd      	mov	sp, r7
    1c94:	bd90      	pop	{r4, r7, pc}
    1c96:	bf00      	nop
    1c98:	00001d89 	.word	0x00001d89

00001c9c <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData>:
	
bool PersistenceServices::writePersistentConfigurationDataArea(PersistentConfigurationData& data)
	{
    1c9c:	b590      	push	{r4, r7, lr}
    1c9e:	b085      	sub	sp, #20
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	6078      	str	r0, [r7, #4]
    1ca4:	6039      	str	r1, [r7, #0]
	bool		result(true);
    1ca6:	2301      	movs	r3, #1
    1ca8:	73fb      	strb	r3, [r7, #15]

	data.version = kPersistentConfigurationDataVersion;
    1caa:	683b      	ldr	r3, [r7, #0]
    1cac:	2202      	movs	r2, #2
    1cae:	605a      	str	r2, [r3, #4]
	data.size = kPersistentConfigurationDataSize;
    1cb0:	683b      	ldr	r3, [r7, #0]
    1cb2:	2238      	movs	r2, #56	; 0x38
    1cb4:	601a      	str	r2, [r3, #0]
	data.partNumber = PARTNUMBER;
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	f240 720c 	movw	r2, #1804	; 0x70c
    1cbc:	609a      	str	r2, [r3, #8]

	int32	address((int32)&FRAMProxy.persistentConfigurationArea.configuration);
    1cbe:	2300      	movs	r3, #0
    1cc0:	f203 5314 	addw	r3, r3, #1300	; 0x514
    1cc4:	60bb      	str	r3, [r7, #8]

    invalidatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header);
    1cc6:	2300      	movs	r3, #0
    1cc8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1ccc:	461a      	mov	r2, r3
    1cce:	2102      	movs	r1, #2
    1cd0:	6878      	ldr	r0, [r7, #4]
    1cd2:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x54>)
    1cd4:	4798      	blx	r3
	 validatePersistentArea(kNVM2, FRAMProxy.persistentConfigurationArea.header, sizeof(PersistentConfigurationDataArea));
    1cd6:	2300      	movs	r3, #0
    1cd8:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
    1cdc:	2344      	movs	r3, #68	; 0x44
    1cde:	2102      	movs	r1, #2
    1ce0:	6878      	ldr	r0, [r7, #4]
    1ce2:	4c04      	ldr	r4, [pc, #16]	; (1cf4 <_ZN19PersistenceServices36writePersistentConfigurationDataAreaER27PersistentConfigurationData+0x58>)
    1ce4:	47a0      	blx	r4


	return result;
    1ce6:	7bfb      	ldrb	r3, [r7, #15]
	}
    1ce8:	4618      	mov	r0, r3
    1cea:	3714      	adds	r7, #20
    1cec:	46bd      	mov	sp, r7
    1cee:	bd90      	pop	{r4, r7, pc}
    1cf0:	00001e49 	.word	0x00001e49
    1cf4:	00001e69 	.word	0x00001e69

00001cf8 <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:


	}

void PersistenceServices::restoreWorkingStateForGAIN(HVACState& v)
	{
    1cf8:	b480      	push	{r7}
    1cfa:	b083      	sub	sp, #12
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	6078      	str	r0, [r7, #4]
    1d00:	6039      	str	r1, [r7, #0]
	int32	address;
	


	}
    1d02:	bf00      	nop
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	bc80      	pop	{r7}
    1d0a:	4770      	bx	lr

00001d0c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b086      	sub	sp, #24
    1d10:	af00      	add	r7, sp, #0
    1d12:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    1d14:	4b17      	ldr	r3, [pc, #92]	; (1d74 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    1d16:	685b      	ldr	r3, [r3, #4]
    1d18:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	33fc      	adds	r3, #252	; 0xfc
    1d1e:	4619      	mov	r1, r3
    1d20:	4815      	ldr	r0, [pc, #84]	; (1d78 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1d22:	4b16      	ldr	r3, [pc, #88]	; (1d7c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    1d24:	4798      	blx	r3
    1d26:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    1d28:	693b      	ldr	r3, [r7, #16]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d001      	beq.n	1d32 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    1d2e:	2300      	movs	r3, #0
    1d30:	e01c      	b.n	1d6c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    1d32:	4811      	ldr	r0, [pc, #68]	; (1d78 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    1d34:	4b12      	ldr	r3, [pc, #72]	; (1d80 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    1d36:	4798      	blx	r3
    1d38:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    1d3a:	6878      	ldr	r0, [r7, #4]
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	33fc      	adds	r3, #252	; 0xfc
    1d40:	22ac      	movs	r2, #172	; 0xac
    1d42:	4619      	mov	r1, r3
    1d44:	4b0f      	ldr	r3, [pc, #60]	; (1d84 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    1d46:	4798      	blx	r3
    1d48:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    1d4a:	68fa      	ldr	r2, [r7, #12]
    1d4c:	68bb      	ldr	r3, [r7, #8]
    1d4e:	429a      	cmp	r2, r3
    1d50:	d10b      	bne.n	1d6a <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1d58:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    1d5a:	693a      	ldr	r2, [r7, #16]
    1d5c:	697b      	ldr	r3, [r7, #20]
    1d5e:	429a      	cmp	r2, r3
    1d60:	bf8c      	ite	hi
    1d62:	2301      	movhi	r3, #1
    1d64:	2300      	movls	r3, #0
    1d66:	b2db      	uxtb	r3, r3
    1d68:	e000      	b.n	1d6c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    1d6a:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    1d6c:	4618      	mov	r0, r3
    1d6e:	3718      	adds	r7, #24
    1d70:	46bd      	mov	sp, r7
    1d72:	bd80      	pop	{r7, pc}
    1d74:	00016a38 	.word	0x00016a38
    1d78:	20001578 	.word	0x20001578
    1d7c:	000017f9 	.word	0x000017f9
    1d80:	00001861 	.word	0x00001861
    1d84:	00000b31 	.word	0x00000b31

00001d88 <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm>:
    }
#endif


bool PersistenceServices::isPersistentAreaValid(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1d88:	b480      	push	{r7}
    1d8a:	b089      	sub	sp, #36	; 0x24
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	60f8      	str	r0, [r7, #12]
    1d90:	607a      	str	r2, [r7, #4]
    1d92:	603b      	str	r3, [r7, #0]
    1d94:	460b      	mov	r3, r1
    1d96:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;
	bool		result;


	result = (header.magic == validMagic) && (header.size == size);
    1d98:	693b      	ldr	r3, [r7, #16]
    1d9a:	4a08      	ldr	r2, [pc, #32]	; (1dbc <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x34>)
    1d9c:	4293      	cmp	r3, r2
    1d9e:	d105      	bne.n	1dac <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1da0:	697a      	ldr	r2, [r7, #20]
    1da2:	683b      	ldr	r3, [r7, #0]
    1da4:	429a      	cmp	r2, r3
    1da6:	d101      	bne.n	1dac <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x24>
    1da8:	2301      	movs	r3, #1
    1daa:	e000      	b.n	1dae <_ZN19PersistenceServices21isPersistentAreaValidEhR9NVMHeaderm+0x26>
    1dac:	2300      	movs	r3, #0
    1dae:	77fb      	strb	r3, [r7, #31]
	

	return result;
    1db0:	7ffb      	ldrb	r3, [r7, #31]
	}
    1db2:	4618      	mov	r0, r3
    1db4:	3724      	adds	r7, #36	; 0x24
    1db6:	46bd      	mov	sp, r7
    1db8:	bc80      	pop	{r7}
    1dba:	4770      	bx	lr
    1dbc:	14031869 	.word	0x14031869

00001dc0 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b084      	sub	sp, #16
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
    1dc8:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    1dca:	480b      	ldr	r0, [pc, #44]	; (1df8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    1dcc:	4b0b      	ldr	r3, [pc, #44]	; (1dfc <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    1dce:	4798      	blx	r3
    1dd0:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	227c      	movs	r2, #124	; 0x7c
    1dd6:	6839      	ldr	r1, [r7, #0]
    1dd8:	4618      	mov	r0, r3
    1dda:	4b09      	ldr	r3, [pc, #36]	; (1e00 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    1ddc:	4798      	blx	r3
    1dde:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    1de0:	68fa      	ldr	r2, [r7, #12]
    1de2:	68bb      	ldr	r3, [r7, #8]
    1de4:	429a      	cmp	r2, r3
    1de6:	bf0c      	ite	eq
    1de8:	2301      	moveq	r3, #1
    1dea:	2300      	movne	r3, #0
    1dec:	b2db      	uxtb	r3, r3
}
    1dee:	4618      	mov	r0, r3
    1df0:	3710      	adds	r7, #16
    1df2:	46bd      	mov	sp, r7
    1df4:	bd80      	pop	{r7, pc}
    1df6:	bf00      	nop
    1df8:	20001578 	.word	0x20001578
    1dfc:	00001a59 	.word	0x00001a59
    1e00:	00000b31 	.word	0x00000b31

00001e04 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b084      	sub	sp, #16
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
    1e0c:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    1e0e:	480b      	ldr	r0, [pc, #44]	; (1e3c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    1e10:	4b0b      	ldr	r3, [pc, #44]	; (1e40 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    1e12:	4798      	blx	r3
    1e14:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	227c      	movs	r2, #124	; 0x7c
    1e1a:	6839      	ldr	r1, [r7, #0]
    1e1c:	4618      	mov	r0, r3
    1e1e:	4b09      	ldr	r3, [pc, #36]	; (1e44 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    1e20:	4798      	blx	r3
    1e22:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    1e24:	68fa      	ldr	r2, [r7, #12]
    1e26:	68bb      	ldr	r3, [r7, #8]
    1e28:	429a      	cmp	r2, r3
    1e2a:	bf0c      	ite	eq
    1e2c:	2301      	moveq	r3, #1
    1e2e:	2300      	movne	r3, #0
    1e30:	b2db      	uxtb	r3, r3
}
    1e32:	4618      	mov	r0, r3
    1e34:	3710      	adds	r7, #16
    1e36:	46bd      	mov	sp, r7
    1e38:	bd80      	pop	{r7, pc}
    1e3a:	bf00      	nop
    1e3c:	20001568 	.word	0x20001568
    1e40:	00000e19 	.word	0x00000e19
    1e44:	00000b31 	.word	0x00000b31

00001e48 <_ZN19PersistenceServices24invalidatePersistentAreaEhR9NVMHeader>:

void PersistenceServices::invalidatePersistentArea(uint8 nvm, NVMHeader& adr)
	{
    1e48:	b480      	push	{r7}
    1e4a:	b089      	sub	sp, #36	; 0x24
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	60f8      	str	r0, [r7, #12]
    1e50:	460b      	mov	r3, r1
    1e52:	607a      	str	r2, [r7, #4]
    1e54:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = 0;
    1e56:	2300      	movs	r3, #0
    1e58:	617b      	str	r3, [r7, #20]
	header.size = 0;
    1e5a:	2300      	movs	r3, #0
    1e5c:	61bb      	str	r3, [r7, #24]

	}
    1e5e:	bf00      	nop
    1e60:	3724      	adds	r7, #36	; 0x24
    1e62:	46bd      	mov	sp, r7
    1e64:	bc80      	pop	{r7}
    1e66:	4770      	bx	lr

00001e68 <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm>:

void PersistenceServices::validatePersistentArea(uint8 nvm, NVMHeader& adr, uint32 size)
	{
    1e68:	b480      	push	{r7}
    1e6a:	b089      	sub	sp, #36	; 0x24
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	60f8      	str	r0, [r7, #12]
    1e70:	607a      	str	r2, [r7, #4]
    1e72:	603b      	str	r3, [r7, #0]
    1e74:	460b      	mov	r3, r1
    1e76:	72fb      	strb	r3, [r7, #11]
	NVMHeader	header;

	header.magic = validMagic;
    1e78:	4b04      	ldr	r3, [pc, #16]	; (1e8c <_ZN19PersistenceServices22validatePersistentAreaEhR9NVMHeaderm+0x24>)
    1e7a:	617b      	str	r3, [r7, #20]
	header.size = size;
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	61bb      	str	r3, [r7, #24]


	

	}
    1e80:	bf00      	nop
    1e82:	3724      	adds	r7, #36	; 0x24
    1e84:	46bd      	mov	sp, r7
    1e86:	bc80      	pop	{r7}
    1e88:	4770      	bx	lr
    1e8a:	bf00      	nop
    1e8c:	14031869 	.word	0x14031869

00001e90 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
    1e90:	b580      	push	{r7, lr}
    1e92:	b082      	sub	sp, #8
    1e94:	af00      	add	r7, sp, #0
    1e96:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
    1e98:	687b      	ldr	r3, [r7, #4]
    1e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1e9e:	801a      	strh	r2, [r3, #0]
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1ea6:	805a      	strh	r2, [r3, #2]
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	2200      	movs	r2, #0
    1eac:	605a      	str	r2, [r3, #4]
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	3308      	adds	r3, #8
    1eb2:	2100      	movs	r1, #0
    1eb4:	4618      	mov	r0, r3
    1eb6:	4b05      	ldr	r3, [pc, #20]	; (1ecc <_ZN5eventC1Ev+0x3c>)
    1eb8:	4798      	blx	r3
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	2200      	movs	r2, #0
    1ebe:	60da      	str	r2, [r3, #12]
	{
	}
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	4618      	mov	r0, r3
    1ec4:	3708      	adds	r7, #8
    1ec6:	46bd      	mov	sp, r7
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	bf00      	nop
    1ecc:	000002d1 	.word	0x000002d1

00001ed0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1ed0:	b590      	push	{r4, r7, lr}
    1ed2:	b083      	sub	sp, #12
    1ed4:	af00      	add	r7, sp, #0
    1ed6:	6078      	str	r0, [r7, #4]
    1ed8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    1eda:	683b      	ldr	r3, [r7, #0]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d101      	bne.n	1ee4 <_ZN5Print5writeEPKc+0x14>
    1ee0:	2300      	movs	r3, #0
    1ee2:	e00c      	b.n	1efe <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	3304      	adds	r3, #4
    1eea:	681c      	ldr	r4, [r3, #0]
    1eec:	6838      	ldr	r0, [r7, #0]
    1eee:	4b06      	ldr	r3, [pc, #24]	; (1f08 <_ZN5Print5writeEPKc+0x38>)
    1ef0:	4798      	blx	r3
    1ef2:	4603      	mov	r3, r0
    1ef4:	461a      	mov	r2, r3
    1ef6:	6839      	ldr	r1, [r7, #0]
    1ef8:	6878      	ldr	r0, [r7, #4]
    1efa:	47a0      	blx	r4
    1efc:	4603      	mov	r3, r0
    }
    1efe:	4618      	mov	r0, r3
    1f00:	370c      	adds	r7, #12
    1f02:	46bd      	mov	sp, r7
    1f04:	bd90      	pop	{r4, r7, pc}
    1f06:	bf00      	nop
    1f08:	00016741 	.word	0x00016741

00001f0c <_ZN12States_ClassC1Ev>:
#include "ALU_Class.h"
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"

	// default constructor
States_Class::States_Class(void)
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	4618      	mov	r0, r3
    1f18:	4b0d      	ldr	r3, [pc, #52]	; (1f50 <_ZN12States_ClassC1Ev+0x44>)
    1f1a:	4798      	blx	r3
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
    1f22:	4618      	mov	r0, r3
    1f24:	4b0b      	ldr	r3, [pc, #44]	; (1f54 <_ZN12States_ClassC1Ev+0x48>)
    1f26:	4798      	blx	r3
    1f28:	4a0b      	ldr	r2, [pc, #44]	; (1f58 <_ZN12States_ClassC1Ev+0x4c>)
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	601a      	str	r2, [r3, #0]
	{
	listener.eventHandler = NULL;
    1f2e:	4b0b      	ldr	r3, [pc, #44]	; (1f5c <_ZN12States_ClassC1Ev+0x50>)
    1f30:	2200      	movs	r2, #0
    1f32:	605a      	str	r2, [r3, #4]
state=defaultState;
    1f34:	687a      	ldr	r2, [r7, #4]
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	f502 7070 	add.w	r0, r2, #960	; 0x3c0
    1f3c:	3304      	adds	r3, #4
    1f3e:	227c      	movs	r2, #124	; 0x7c
    1f40:	4619      	mov	r1, r3
    1f42:	4b07      	ldr	r3, [pc, #28]	; (1f60 <_ZN12States_ClassC1Ev+0x54>)
    1f44:	4798      	blx	r3
	}
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	4618      	mov	r0, r3
    1f4a:	3708      	adds	r7, #8
    1f4c:	46bd      	mov	sp, r7
    1f4e:	bd80      	pop	{r7, pc}
    1f50:	000008a5 	.word	0x000008a5
    1f54:	0000101d 	.word	0x0000101d
    1f58:	00017024 	.word	0x00017024
    1f5c:	200048c4 	.word	0x200048c4
    1f60:	0001652d 	.word	0x0001652d

00001f64 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    1f64:	b580      	push	{r7, lr}
    1f66:	b082      	sub	sp, #8
    1f68:	af00      	add	r7, sp, #0
    1f6a:	6078      	str	r0, [r7, #4]
    1f6c:	4a08      	ldr	r2, [pc, #32]	; (1f90 <_ZN12States_ClassD1Ev+0x2c>)
    1f6e:	687b      	ldr	r3, [r7, #4]
    1f70:	601a      	str	r2, [r3, #0]
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
    1f78:	4618      	mov	r0, r3
    1f7a:	4b06      	ldr	r3, [pc, #24]	; (1f94 <_ZN12States_ClassD1Ev+0x30>)
    1f7c:	4798      	blx	r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	4618      	mov	r0, r3
    1f82:	4b05      	ldr	r3, [pc, #20]	; (1f98 <_ZN12States_ClassD1Ev+0x34>)
    1f84:	4798      	blx	r3
{
} //~States_Class
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	4618      	mov	r0, r3
    1f8a:	3708      	adds	r7, #8
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bd80      	pop	{r7, pc}
    1f90:	00017024 	.word	0x00017024
    1f94:	00001031 	.word	0x00001031
    1f98:	0000090d 	.word	0x0000090d

00001f9c <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    1f9c:	b580      	push	{r7, lr}
    1f9e:	b082      	sub	sp, #8
    1fa0:	af00      	add	r7, sp, #0
    1fa2:	6078      	str	r0, [r7, #4]
	return fv1.Init();
    1fa4:	4803      	ldr	r0, [pc, #12]	; (1fb4 <_ZN12States_Class4InitEv+0x18>)
    1fa6:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <_ZN12States_Class4InitEv+0x1c>)
    1fa8:	4798      	blx	r3
    1faa:	4603      	mov	r3, r0
	
}
    1fac:	4618      	mov	r0, r3
    1fae:	3708      	adds	r7, #8
    1fb0:	46bd      	mov	sp, r7
    1fb2:	bd80      	pop	{r7, pc}
    1fb4:	20000e44 	.word	0x20000e44
    1fb8:	00000fa1 	.word	0x00000fa1

00001fbc <_ZN12States_Class5StartEh>:
void States_Class::Start(uint8_t	operationMode)
	{
    1fbc:	b590      	push	{r4, r7, lr}
    1fbe:	b08b      	sub	sp, #44	; 0x2c
    1fc0:	af02      	add	r7, sp, #8
    1fc2:	6078      	str	r0, [r7, #4]
    1fc4:	460b      	mov	r3, r1
    1fc6:	70fb      	strb	r3, [r7, #3]
	event	e;
    1fc8:	f107 0308 	add.w	r3, r7, #8
    1fcc:	4618      	mov	r0, r3
    1fce:	4b52      	ldr	r3, [pc, #328]	; (2118 <_ZN12States_Class5StartEh+0x15c>)
    1fd0:	4798      	blx	r3
    tick_t	timerValue = 0L;
    1fd2:	2300      	movs	r3, #0
    1fd4:	61fb      	str	r3, [r7, #28]
    bool	isCurrentStateValid = false;
    1fd6:	2300      	movs	r3, #0
    1fd8:	76fb      	strb	r3, [r7, #27]
	memory.ReadFastApplicationState(lastState);
    1fda:	687b      	ldr	r3, [r7, #4]
    1fdc:	f203 433c 	addw	r3, r3, #1084	; 0x43c
    1fe0:	4619      	mov	r1, r3
    1fe2:	484e      	ldr	r0, [pc, #312]	; (211c <_ZN12States_Class5StartEh+0x160>)
    1fe4:	4b4e      	ldr	r3, [pc, #312]	; (2120 <_ZN12States_Class5StartEh+0x164>)
    1fe6:	4798      	blx	r3
	state.currentState = kGAINStateReset;
    1fe8:	687b      	ldr	r3, [r7, #4]
    1fea:	2200      	movs	r2, #0
    1fec:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
	if (calendar.WasInterrupted())
    1ff0:	484c      	ldr	r0, [pc, #304]	; (2124 <_ZN12States_Class5StartEh+0x168>)
    1ff2:	4b4d      	ldr	r3, [pc, #308]	; (2128 <_ZN12States_Class5StartEh+0x16c>)
    1ff4:	4798      	blx	r3
    1ff6:	4603      	mov	r3, r0
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d019      	beq.n	2030 <_ZN12States_Class5StartEh+0x74>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    1ffc:	4849      	ldr	r0, [pc, #292]	; (2124 <_ZN12States_Class5StartEh+0x168>)
    1ffe:	4b4b      	ldr	r3, [pc, #300]	; (212c <_ZN12States_Class5StartEh+0x170>)
    2000:	4798      	blx	r3
    2002:	4602      	mov	r2, r0
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    200a:	687b      	ldr	r3, [r7, #4]
    200c:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
    2010:	2b00      	cmp	r3, #0
    2012:	db08      	blt.n	2026 <_ZN12States_Class5StartEh+0x6a>
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
    201a:	f241 3287 	movw	r2, #4999	; 0x1387
    201e:	4293      	cmp	r3, r2
    2020:	dc01      	bgt.n	2026 <_ZN12States_Class5StartEh+0x6a>
    2022:	2201      	movs	r2, #1
    2024:	e000      	b.n	2028 <_ZN12States_Class5StartEh+0x6c>
    2026:	2200      	movs	r2, #0
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    202e:	e002      	b.n	2036 <_ZN12States_Class5StartEh+0x7a>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    2030:	483f      	ldr	r0, [pc, #252]	; (2130 <_ZN12States_Class5StartEh+0x174>)
    2032:	4b40      	ldr	r3, [pc, #256]	; (2134 <_ZN12States_Class5StartEh+0x178>)
    2034:	4798      	blx	r3
	}

	

	//	Check persistent memory
	if (SetInitialState()<0){
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	4618      	mov	r0, r3
    203a:	4b3f      	ldr	r3, [pc, #252]	; (2138 <_ZN12States_Class5StartEh+0x17c>)
    203c:	4798      	blx	r3
    203e:	2300      	movs	r3, #0
    2040:	2b00      	cmp	r3, #0
    2042:	d003      	beq.n	204c <_ZN12States_Class5StartEh+0x90>
		SetDefaultState();
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	4618      	mov	r0, r3
    2048:	4b3c      	ldr	r3, [pc, #240]	; (213c <_ZN12States_Class5StartEh+0x180>)
    204a:	4798      	blx	r3
	}



	readResult=memory.ReadLastConfigurationData(configuration);
    204c:	687b      	ldr	r3, [r7, #4]
    204e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
    2052:	4619      	mov	r1, r3
    2054:	483a      	ldr	r0, [pc, #232]	; (2140 <_ZN12States_Class5StartEh+0x184>)
    2056:	4b3b      	ldr	r3, [pc, #236]	; (2144 <_ZN12States_Class5StartEh+0x188>)
    2058:	4798      	blx	r3
    205a:	4602      	mov	r2, r0
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
	if (readResult>0)
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
    2068:	2b00      	cmp	r3, #0
    206a:	d005      	beq.n	2078 <_ZN12States_Class5StartEh+0xbc>
		{
	#if __DEBUG__ > 3
		usb << "readConfigurationDataArea failed!" << newline;
	#endif
		SetFactoryDefaults(0, true, false);
    206c:	6878      	ldr	r0, [r7, #4]
    206e:	2300      	movs	r3, #0
    2070:	2201      	movs	r2, #1
    2072:	2100      	movs	r1, #0
    2074:	4c34      	ldr	r4, [pc, #208]	; (2148 <_ZN12States_Class5StartEh+0x18c>)
    2076:	47a0      	blx	r4
		usb << "configuration.m == " << configuration.m << newline;
		usb << "configuration.zA0 == " << configuration.zA0 << newline;
		}
#endif

	if (!memory.readPersistentConfigurationDataArea(persistentConfiguration))
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	f503 7360 	add.w	r3, r3, #896	; 0x380
    207e:	4619      	mov	r1, r3
    2080:	4832      	ldr	r0, [pc, #200]	; (214c <_ZN12States_Class5StartEh+0x190>)
    2082:	4b33      	ldr	r3, [pc, #204]	; (2150 <_ZN12States_Class5StartEh+0x194>)
    2084:	4798      	blx	r3
    2086:	4603      	mov	r3, r0
    2088:	f083 0301 	eor.w	r3, r3, #1
    208c:	b2db      	uxtb	r3, r3
    208e:	2b00      	cmp	r3, #0
    2090:	d002      	beq.n	2098 <_ZN12States_Class5StartEh+0xdc>
		{
	#if __DEBUG__ > 2
		usb << "readPersistentConfigurationDataArea failed!" << memory.getUptime() << newline;
	#endif
		setPersistentConfigurationDefaults();
    2092:	6878      	ldr	r0, [r7, #4]
    2094:	4b2f      	ldr	r3, [pc, #188]	; (2154 <_ZN12States_Class5StartEh+0x198>)
    2096:	4798      	blx	r3
					<< ", duration == " << persistentConfiguration.cycle.duration << ", maximum time == " << persistentConfiguration.cycle.maximumDuration
					<< ", flags == " << persistentConfiguration.cycle.cycleFlags << newline;
#endif
	

	interfaces.CheckCommunication();
    2098:	482f      	ldr	r0, [pc, #188]	; (2158 <_ZN12States_Class5StartEh+0x19c>)
    209a:	4b30      	ldr	r3, [pc, #192]	; (215c <_ZN12States_Class5StartEh+0x1a0>)
    209c:	4798      	blx	r3

	if (isCurrentStateValid)
    209e:	7efb      	ldrb	r3, [r7, #27]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d007      	beq.n	20b4 <_ZN12States_Class5StartEh+0xf8>
    {
		prepareStateChangeEvent(e, kGAINStateResume);
    20a4:	f107 0108 	add.w	r1, r7, #8
    20a8:	2300      	movs	r3, #0
    20aa:	2202      	movs	r2, #2
    20ac:	6878      	ldr	r0, [r7, #4]
    20ae:	4c2c      	ldr	r4, [pc, #176]	; (2160 <_ZN12States_Class5StartEh+0x1a4>)
    20b0:	47a0      	blx	r4
    20b2:	e006      	b.n	20c2 <_ZN12States_Class5StartEh+0x106>
    }else{
		prepareStateChangeEvent(e, kGAINStateInitialize);
    20b4:	f107 0108 	add.w	r1, r7, #8
    20b8:	2300      	movs	r3, #0
    20ba:	2201      	movs	r2, #1
    20bc:	6878      	ldr	r0, [r7, #4]
    20be:	4c28      	ldr	r4, [pc, #160]	; (2160 <_ZN12States_Class5StartEh+0x1a4>)
    20c0:	47a0      	blx	r4
    }

	listener.SendEventSelf(e);
    20c2:	f107 0308 	add.w	r3, r7, #8
    20c6:	4619      	mov	r1, r3
    20c8:	4826      	ldr	r0, [pc, #152]	; (2164 <_ZN12States_Class5StartEh+0x1a8>)
    20ca:	4b27      	ldr	r3, [pc, #156]	; (2168 <_ZN12States_Class5StartEh+0x1ac>)
    20cc:	4798      	blx	r3



    while (cBit.IsOK())
    20ce:	4827      	ldr	r0, [pc, #156]	; (216c <_ZN12States_Class5StartEh+0x1b0>)
    20d0:	4b27      	ldr	r3, [pc, #156]	; (2170 <_ZN12States_Class5StartEh+0x1b4>)
    20d2:	4798      	blx	r3
    20d4:	4603      	mov	r3, r0
    20d6:	2b00      	cmp	r3, #0
    20d8:	d015      	beq.n	2106 <_ZN12States_Class5StartEh+0x14a>
		{
		if (listener.WaitForEvent(e, kGAINEventClass, kGAINSwitchStateEvent))
    20da:	4b26      	ldr	r3, [pc, #152]	; (2174 <_ZN12States_Class5StartEh+0x1b8>)
    20dc:	681b      	ldr	r3, [r3, #0]
    20de:	f107 0108 	add.w	r1, r7, #8
    20e2:	9300      	str	r3, [sp, #0]
    20e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    20e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    20ec:	481d      	ldr	r0, [pc, #116]	; (2164 <_ZN12States_Class5StartEh+0x1a8>)
    20ee:	4c22      	ldr	r4, [pc, #136]	; (2178 <_ZN12States_Class5StartEh+0x1bc>)
    20f0:	47a0      	blx	r4
    20f2:	4603      	mov	r3, r0
    20f4:	2b00      	cmp	r3, #0
    20f6:	d0ea      	beq.n	20ce <_ZN12States_Class5StartEh+0x112>
			{
			handleHVACEvent(e);
    20f8:	f107 0308 	add.w	r3, r7, #8
    20fc:	4619      	mov	r1, r3
    20fe:	6878      	ldr	r0, [r7, #4]
    2100:	4b1e      	ldr	r3, [pc, #120]	; (217c <_ZN12States_Class5StartEh+0x1c0>)
    2102:	4798      	blx	r3
    while (cBit.IsOK())
    2104:	e7e3      	b.n	20ce <_ZN12States_Class5StartEh+0x112>
			}
        else{

        }
		}
		Stop(0);
    2106:	2100      	movs	r1, #0
    2108:	6878      	ldr	r0, [r7, #4]
    210a:	4b1d      	ldr	r3, [pc, #116]	; (2180 <_ZN12States_Class5StartEh+0x1c4>)
    210c:	4798      	blx	r3
	}
    210e:	bf00      	nop
    2110:	3724      	adds	r7, #36	; 0x24
    2112:	46bd      	mov	sp, r7
    2114:	bd90      	pop	{r4, r7, pc}
    2116:	bf00      	nop
    2118:	00001e91 	.word	0x00001e91
    211c:	20001568 	.word	0x20001568
    2120:	00000e59 	.word	0x00000e59
    2124:	20004c00 	.word	0x20004c00
    2128:	000135c5 	.word	0x000135c5
    212c:	000134ed 	.word	0x000134ed
    2130:	20000ed0 	.word	0x20000ed0
    2134:	00000be5 	.word	0x00000be5
    2138:	00000985 	.word	0x00000985
    213c:	00000a61 	.word	0x00000a61
    2140:	20001578 	.word	0x20001578
    2144:	000017c9 	.word	0x000017c9
    2148:	0000092d 	.word	0x0000092d
    214c:	200013bc 	.word	0x200013bc
    2150:	00001c09 	.word	0x00001c09
    2154:	00002185 	.word	0x00002185
    2158:	20000e48 	.word	0x20000e48
    215c:	00001045 	.word	0x00001045
    2160:	0000294d 	.word	0x0000294d
    2164:	200048c4 	.word	0x200048c4
    2168:	0001181d 	.word	0x0001181d
    216c:	20000d84 	.word	0x20000d84
    2170:	00000831 	.word	0x00000831
    2174:	000184f8 	.word	0x000184f8
    2178:	00011645 	.word	0x00011645
    217c:	00002229 	.word	0x00002229
    2180:	00002a3d 	.word	0x00002a3d

00002184 <_ZN12States_Class34setPersistentConfigurationDefaultsEv>:


void States_Class::setPersistentConfigurationDefaults(void)
	{
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
	setPersistentConfiguration(0);
    218c:	2100      	movs	r1, #0
    218e:	6878      	ldr	r0, [r7, #4]
    2190:	4b02      	ldr	r3, [pc, #8]	; (219c <_ZN12States_Class34setPersistentConfigurationDefaultsEv+0x18>)
    2192:	4798      	blx	r3
	}
    2194:	bf00      	nop
    2196:	3708      	adds	r7, #8
    2198:	46bd      	mov	sp, r7
    219a:	bd80      	pop	{r7, pc}
    219c:	000021a1 	.word	0x000021a1

000021a0 <_ZN12States_Class26setPersistentConfigurationEh>:

void States_Class::setPersistentConfiguration(uint8 cycleID)
	{
    21a0:	b580      	push	{r7, lr}
    21a2:	b082      	sub	sp, #8
    21a4:	af00      	add	r7, sp, #0
    21a6:	6078      	str	r0, [r7, #4]
    21a8:	460b      	mov	r3, r1
    21aa:	70fb      	strb	r3, [r7, #3]
	persistentConfiguration.cycleDescriptionID = cycleID;
    21ac:	78fa      	ldrb	r2, [r7, #3]
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
	readCycleDescription(persistentConfiguration.cycle, persistentConfiguration.cycleDescriptionID);
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	f503 7164 	add.w	r1, r3, #912	; 0x390
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
    21c0:	b2db      	uxtb	r3, r3
    21c2:	461a      	mov	r2, r3
    21c4:	6878      	ldr	r0, [r7, #4]
    21c6:	4b09      	ldr	r3, [pc, #36]	; (21ec <_ZN12States_Class26setPersistentConfigurationEh+0x4c>)
    21c8:	4798      	blx	r3
   writeResult=memory.writePersistentConfigurationDataArea(persistentConfiguration);
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	f503 7360 	add.w	r3, r3, #896	; 0x380
    21d0:	4619      	mov	r1, r3
    21d2:	4807      	ldr	r0, [pc, #28]	; (21f0 <_ZN12States_Class26setPersistentConfigurationEh+0x50>)
    21d4:	4b07      	ldr	r3, [pc, #28]	; (21f4 <_ZN12States_Class26setPersistentConfigurationEh+0x54>)
    21d6:	4798      	blx	r3
    21d8:	4603      	mov	r3, r0
    21da:	461a      	mov	r2, r3
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
	} 	
    21e2:	bf00      	nop
    21e4:	3708      	adds	r7, #8
    21e6:	46bd      	mov	sp, r7
    21e8:	bd80      	pop	{r7, pc}
    21ea:	bf00      	nop
    21ec:	000021f9 	.word	0x000021f9
    21f0:	200013bc 	.word	0x200013bc
    21f4:	00001c9d 	.word	0x00001c9d

000021f8 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh>:



bool States_Class::readCycleDescription(CycleDescription& cycle, uint8 id)
	{
    21f8:	b580      	push	{r7, lr}
    21fa:	b086      	sub	sp, #24
    21fc:	af00      	add	r7, sp, #0
    21fe:	60f8      	str	r0, [r7, #12]
    2200:	60b9      	str	r1, [r7, #8]
    2202:	4613      	mov	r3, r2
    2204:	71fb      	strb	r3, [r7, #7]
	bool	result(memory.readCycleDescription(cycle, id));
    2206:	79fb      	ldrb	r3, [r7, #7]
    2208:	461a      	mov	r2, r3
    220a:	68b9      	ldr	r1, [r7, #8]
    220c:	4804      	ldr	r0, [pc, #16]	; (2220 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x28>)
    220e:	4b05      	ldr	r3, [pc, #20]	; (2224 <_ZN12States_Class20readCycleDescriptionER16CycleDescriptionh+0x2c>)
    2210:	4798      	blx	r3
    2212:	4603      	mov	r3, r0
    2214:	75fb      	strb	r3, [r7, #23]

	return result;
    2216:	7dfb      	ldrb	r3, [r7, #23]
	}
    2218:	4618      	mov	r0, r3
    221a:	3718      	adds	r7, #24
    221c:	46bd      	mov	sp, r7
    221e:	bd80      	pop	{r7, pc}
    2220:	200013bc 	.word	0x200013bc
    2224:	00001beb 	.word	0x00001beb

00002228 <_ZN12States_Class15handleHVACEventER5event>:


void States_Class::handleHVACEvent(event& e)
	{
    2228:	b580      	push	{r7, lr}
    222a:	b084      	sub	sp, #16
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
    2230:	6039      	str	r1, [r7, #0]
	if (state.currentState != kGAINStateResume)
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    2238:	2b02      	cmp	r3, #2
    223a:	d005      	beq.n	2248 <_ZN12States_Class15handleHVACEventER5event+0x20>
		state.callingState = state.currentState;
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	f8d3 23e4 	ldr.w	r2, [r3, #996]	; 0x3e4
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	state.currentState = e.data.wordData[0];
    2248:	683b      	ldr	r3, [r7, #0]
    224a:	891b      	ldrh	r3, [r3, #8]
    224c:	461a      	mov	r2, r3
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
	state.stateFlags = e.data.wordData[1];
    2254:	683b      	ldr	r3, [r7, #0]
    2256:	895b      	ldrh	r3, [r3, #10]
    2258:	461a      	mov	r2, r3
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	state.stateEntryTime = hvacTimer.get_ticks();
    2260:	486a      	ldr	r0, [pc, #424]	; (240c <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    2262:	4b6b      	ldr	r3, [pc, #428]	; (2410 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    2264:	4798      	blx	r3
    2266:	4603      	mov	r3, r0
    2268:	461a      	mov	r2, r3
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    2270:	4968      	ldr	r1, [pc, #416]	; (2414 <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    2272:	4869      	ldr	r0, [pc, #420]	; (2418 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2274:	4b69      	ldr	r3, [pc, #420]	; (241c <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    2276:	4798      	blx	r3
	usb.write(gainStateDescription[state.callingState]);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
    227e:	4a68      	ldr	r2, [pc, #416]	; (2420 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    2280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2284:	4619      	mov	r1, r3
    2286:	4864      	ldr	r0, [pc, #400]	; (2418 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2288:	4b66      	ldr	r3, [pc, #408]	; (2424 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    228a:	4798      	blx	r3
	usb << " to ";
    228c:	4966      	ldr	r1, [pc, #408]	; (2428 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    228e:	4862      	ldr	r0, [pc, #392]	; (2418 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    2290:	4b66      	ldr	r3, [pc, #408]	; (242c <_ZN12States_Class15handleHVACEventER5event+0x204>)
    2292:	4798      	blx	r3
	usb.write(gainStateDescription[state.currentState]);
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    229a:	4a61      	ldr	r2, [pc, #388]	; (2420 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22a0:	4619      	mov	r1, r3
    22a2:	485d      	ldr	r0, [pc, #372]	; (2418 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    22a4:	4b5f      	ldr	r3, [pc, #380]	; (2424 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    22a6:	4798      	blx	r3
	usb << " (flags == " << state.stateFlags << ')' << NEWLINE;
    22a8:	4961      	ldr	r1, [pc, #388]	; (2430 <_ZN12States_Class15handleHVACEventER5event+0x208>)
    22aa:	485b      	ldr	r0, [pc, #364]	; (2418 <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    22ac:	4b61      	ldr	r3, [pc, #388]	; (2434 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    22ae:	4798      	blx	r3
    22b0:	4602      	mov	r2, r0
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
    22b8:	4619      	mov	r1, r3
    22ba:	4610      	mov	r0, r2
    22bc:	4b5e      	ldr	r3, [pc, #376]	; (2438 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    22be:	4798      	blx	r3
    22c0:	4602      	mov	r2, r0
    22c2:	2329      	movs	r3, #41	; 0x29
    22c4:	73fb      	strb	r3, [r7, #15]
    22c6:	f107 030f 	add.w	r3, r7, #15
    22ca:	4619      	mov	r1, r3
    22cc:	4610      	mov	r0, r2
    22ce:	4b5b      	ldr	r3, [pc, #364]	; (243c <_ZN12States_Class15handleHVACEventER5event+0x214>)
    22d0:	4798      	blx	r3
    22d2:	4603      	mov	r3, r0
    22d4:	495a      	ldr	r1, [pc, #360]	; (2440 <_ZN12States_Class15handleHVACEventER5event+0x218>)
    22d6:	4618      	mov	r0, r3
    22d8:	4b5a      	ldr	r3, [pc, #360]	; (2444 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    22da:	4798      	blx	r3
	
#endif

	saveCurrentState();
    22dc:	6878      	ldr	r0, [r7, #4]
    22de:	4b5a      	ldr	r3, [pc, #360]	; (2448 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    22e0:	4798      	blx	r3

	switch (state.currentState)
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    22e8:	3b01      	subs	r3, #1
    22ea:	2b0f      	cmp	r3, #15
    22ec:	f200 8084 	bhi.w	23f8 <_ZN12States_Class15handleHVACEventER5event+0x1d0>
    22f0:	a201      	add	r2, pc, #4	; (adr r2, 22f8 <_ZN12States_Class15handleHVACEventER5event+0xd0>)
    22f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    22f6:	bf00      	nop
    22f8:	00002339 	.word	0x00002339
    22fc:	00002349 	.word	0x00002349
    2300:	00002359 	.word	0x00002359
    2304:	00002369 	.word	0x00002369
    2308:	00002379 	.word	0x00002379
    230c:	00002389 	.word	0x00002389
    2310:	000023f9 	.word	0x000023f9
    2314:	000023f9 	.word	0x000023f9
    2318:	00002399 	.word	0x00002399
    231c:	000023b9 	.word	0x000023b9
    2320:	000023f9 	.word	0x000023f9
    2324:	000023a9 	.word	0x000023a9
    2328:	000023f9 	.word	0x000023f9
    232c:	000023c9 	.word	0x000023c9
    2330:	000023d9 	.word	0x000023d9
    2334:	000023e9 	.word	0x000023e9
		{
		case kGAINStateInitialize:
			handleStateInitialize(state.stateFlags);
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    233e:	4619      	mov	r1, r3
    2340:	6878      	ldr	r0, [r7, #4]
    2342:	4b42      	ldr	r3, [pc, #264]	; (244c <_ZN12States_Class15handleHVACEventER5event+0x224>)
    2344:	4798      	blx	r3
			break;
    2346:	e05c      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateResume:
			handleStateResume(state.stateFlags);
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    234e:	4619      	mov	r1, r3
    2350:	6878      	ldr	r0, [r7, #4]
    2352:	4b3f      	ldr	r3, [pc, #252]	; (2450 <_ZN12States_Class15handleHVACEventER5event+0x228>)
    2354:	4798      	blx	r3
			break;
    2356:	e054      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyOFF:
			handleStateStandbyOFF(state.stateFlags);
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    235e:	4619      	mov	r1, r3
    2360:	6878      	ldr	r0, [r7, #4]
    2362:	4b3c      	ldr	r3, [pc, #240]	; (2454 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    2364:	4798      	blx	r3
			break;
    2366:	e04c      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStatePrepareStandbyON:
			handleStatePrepareStandbyON(state.stateFlags);
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    236e:	4619      	mov	r1, r3
    2370:	6878      	ldr	r0, [r7, #4]
    2372:	4b39      	ldr	r3, [pc, #228]	; (2458 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    2374:	4798      	blx	r3
			break;
    2376:	e044      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyON:
			handleStateStandbyON(state.stateFlags);
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    237e:	4619      	mov	r1, r3
    2380:	6878      	ldr	r0, [r7, #4]
    2382:	4b36      	ldr	r3, [pc, #216]	; (245c <_ZN12States_Class15handleHVACEventER5event+0x234>)
    2384:	4798      	blx	r3
			break;
    2386:	e03c      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStandbyReady:
			handleStateStandbyReady(state.stateFlags);
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    238e:	4619      	mov	r1, r3
    2390:	6878      	ldr	r0, [r7, #4]
    2392:	4b33      	ldr	r3, [pc, #204]	; (2460 <_ZN12States_Class15handleHVACEventER5event+0x238>)
    2394:	4798      	blx	r3
			break;
    2396:	e034      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateON:
			handleStateON(state.stateFlags);
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    239e:	4619      	mov	r1, r3
    23a0:	6878      	ldr	r0, [r7, #4]
    23a2:	4b30      	ldr	r3, [pc, #192]	; (2464 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    23a4:	4798      	blx	r3
			break;
    23a6:	e02c      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateFinished:
			handleStateFinished(state.stateFlags);
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    23ae:	4619      	mov	r1, r3
    23b0:	6878      	ldr	r0, [r7, #4]
    23b2:	4b2d      	ldr	r3, [pc, #180]	; (2468 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    23b4:	4798      	blx	r3
			break;
    23b6:	e024      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateStoppedProcess:
			handleStateStoppedProcess(state.stateFlags);
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    23be:	4619      	mov	r1, r3
    23c0:	6878      	ldr	r0, [r7, #4]
    23c2:	4b2a      	ldr	r3, [pc, #168]	; (246c <_ZN12States_Class15handleHVACEventER5event+0x244>)
    23c4:	4798      	blx	r3
			break;
    23c6:	e01c      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateSelfProtect:
			handleStateSelfProtect(state.stateFlags);
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    23ce:	4619      	mov	r1, r3
    23d0:	6878      	ldr	r0, [r7, #4]
    23d2:	4b27      	ldr	r3, [pc, #156]	; (2470 <_ZN12States_Class15handleHVACEventER5event+0x248>)
    23d4:	4798      	blx	r3
			break;
    23d6:	e014      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateError:
			handleStateError(state.stateFlags);
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    23de:	4619      	mov	r1, r3
    23e0:	6878      	ldr	r0, [r7, #4]
    23e2:	4b24      	ldr	r3, [pc, #144]	; (2474 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    23e4:	4798      	blx	r3
			break;
    23e6:	e00c      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		case kGAINStateMaintenance:
			handleStateMaintenance(state.stateFlags);
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
    23ee:	4619      	mov	r1, r3
    23f0:	6878      	ldr	r0, [r7, #4]
    23f2:	4b21      	ldr	r3, [pc, #132]	; (2478 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    23f4:	4798      	blx	r3
			break;
    23f6:	e004      	b.n	2402 <_ZN12States_Class15handleHVACEventER5event+0x1da>

		default:
			handleStateError(kGAINErrorIllegalStateTransition);
    23f8:	2102      	movs	r1, #2
    23fa:	6878      	ldr	r0, [r7, #4]
    23fc:	4b1d      	ldr	r3, [pc, #116]	; (2474 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    23fe:	4798      	blx	r3
			break;
    2400:	bf00      	nop
		}
	}
    2402:	bf00      	nop
    2404:	3710      	adds	r7, #16
    2406:	46bd      	mov	sp, r7
    2408:	bd80      	pop	{r7, pc}
    240a:	bf00      	nop
    240c:	20004cd8 	.word	0x20004cd8
    2410:	000139ad 	.word	0x000139ad
    2414:	00016f68 	.word	0x00016f68
    2418:	20004d34 	.word	0x20004d34
    241c:	00002ad5 	.word	0x00002ad5
    2420:	20000004 	.word	0x20000004
    2424:	00001ed1 	.word	0x00001ed1
    2428:	00016f94 	.word	0x00016f94
    242c:	00002af5 	.word	0x00002af5
    2430:	00016f9c 	.word	0x00016f9c
    2434:	000012f5 	.word	0x000012f5
    2438:	00000a85 	.word	0x00000a85
    243c:	00002b15 	.word	0x00002b15
    2440:	00016fa8 	.word	0x00016fa8
    2444:	00000649 	.word	0x00000649
    2448:	000029ad 	.word	0x000029ad
    244c:	0000247d 	.word	0x0000247d
    2450:	00002559 	.word	0x00002559
    2454:	00002619 	.word	0x00002619
    2458:	000026b1 	.word	0x000026b1
    245c:	00002741 	.word	0x00002741
    2460:	000027a9 	.word	0x000027a9
    2464:	000027e1 	.word	0x000027e1
    2468:	0000282d 	.word	0x0000282d
    246c:	00002865 	.word	0x00002865
    2470:	000028a5 	.word	0x000028a5
    2474:	000028dd 	.word	0x000028dd
    2478:	00002915 	.word	0x00002915

0000247c <_ZN12States_Class21handleStateInitializeEm>:


void States_Class::handleStateInitialize(uint32 flags)
	{
    247c:	b590      	push	{r4, r7, lr}
    247e:	b089      	sub	sp, #36	; 0x24
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	6039      	str	r1, [r7, #0]
	event	e;
    2486:	f107 030c 	add.w	r3, r7, #12
    248a:	4618      	mov	r0, r3
    248c:	4b22      	ldr	r3, [pc, #136]	; (2518 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    248e:	4798      	blx	r3
   	uint16	selfTestResult(kGAINNoError);
    2490:	2300      	movs	r3, #0
    2492:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    2494:	4921      	ldr	r1, [pc, #132]	; (251c <_ZN12States_Class21handleStateInitializeEm+0xa0>)
    2496:	4822      	ldr	r0, [pc, #136]	; (2520 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    2498:	4b22      	ldr	r3, [pc, #136]	; (2524 <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    249a:	4798      	blx	r3
    249c:	4602      	mov	r2, r0
    249e:	463b      	mov	r3, r7
    24a0:	4619      	mov	r1, r3
    24a2:	4610      	mov	r0, r2
    24a4:	4b20      	ldr	r3, [pc, #128]	; (2528 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    24a6:	4798      	blx	r3
    24a8:	4603      	mov	r3, r0
    24aa:	4920      	ldr	r1, [pc, #128]	; (252c <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    24ac:	4618      	mov	r0, r3
    24ae:	4b20      	ldr	r3, [pc, #128]	; (2530 <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    24b0:	4798      	blx	r3
		
#endif
	
	
	listener.CheckEvent();
    24b2:	4820      	ldr	r0, [pc, #128]	; (2534 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    24b4:	4b20      	ldr	r3, [pc, #128]	; (2538 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    24b6:	4798      	blx	r3
	if (pBIT.isOK)
    24b8:	4b20      	ldr	r3, [pc, #128]	; (253c <_ZN12States_Class21handleStateInitializeEm+0xc0>)
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	b2db      	uxtb	r3, r3
    24be:	2b00      	cmp	r3, #0
    24c0:	d021      	beq.n	2506 <_ZN12States_Class21handleStateInitializeEm+0x8a>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    24c2:	491f      	ldr	r1, [pc, #124]	; (2540 <_ZN12States_Class21handleStateInitializeEm+0xc4>)
    24c4:	4816      	ldr	r0, [pc, #88]	; (2520 <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    24c6:	4b1f      	ldr	r3, [pc, #124]	; (2544 <_ZN12States_Class21handleStateInitializeEm+0xc8>)
    24c8:	4798      	blx	r3
    24ca:	4603      	mov	r3, r0
    24cc:	4917      	ldr	r1, [pc, #92]	; (252c <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    24ce:	4618      	mov	r0, r3
    24d0:	4b17      	ldr	r3, [pc, #92]	; (2530 <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    24d2:	4798      	blx	r3

		#ifdef _OFFLINE
		prepareStateChangeEvent(e, kGAINStateInterrupted);
		listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    24d4:	6878      	ldr	r0, [r7, #4]
    24d6:	4b1c      	ldr	r3, [pc, #112]	; (2548 <_ZN12States_Class21handleStateInitializeEm+0xcc>)
    24d8:	4798      	blx	r3
    24da:	4603      	mov	r3, r0
    24dc:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kGAINNoError)
    24de:	8bfb      	ldrh	r3, [r7, #30]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d10c      	bne.n	24fe <_ZN12States_Class21handleStateInitializeEm+0x82>
		{
			prepareStateChangeEvent(e, kGAINStateStandbyOFF);
    24e4:	f107 010c 	add.w	r1, r7, #12
    24e8:	2300      	movs	r3, #0
    24ea:	2203      	movs	r2, #3
    24ec:	6878      	ldr	r0, [r7, #4]
    24ee:	4c17      	ldr	r4, [pc, #92]	; (254c <_ZN12States_Class21handleStateInitializeEm+0xd0>)
    24f0:	47a0      	blx	r4
			listener.SendEventSelf(e);
    24f2:	f107 030c 	add.w	r3, r7, #12
    24f6:	4619      	mov	r1, r3
    24f8:	480e      	ldr	r0, [pc, #56]	; (2534 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    24fa:	4b15      	ldr	r3, [pc, #84]	; (2550 <_ZN12States_Class21handleStateInitializeEm+0xd4>)
    24fc:	4798      	blx	r3
		}
		#endif

		listener.CheckEvent();
    24fe:	480d      	ldr	r0, [pc, #52]	; (2534 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    2500:	4b0d      	ldr	r3, [pc, #52]	; (2538 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    2502:	4798      	blx	r3
	}



	
	}
    2504:	e003      	b.n	250e <_ZN12States_Class21handleStateInitializeEm+0x92>
		Stop();
    2506:	2100      	movs	r1, #0
    2508:	6878      	ldr	r0, [r7, #4]
    250a:	4b12      	ldr	r3, [pc, #72]	; (2554 <_ZN12States_Class21handleStateInitializeEm+0xd8>)
    250c:	4798      	blx	r3
	}
    250e:	bf00      	nop
    2510:	3724      	adds	r7, #36	; 0x24
    2512:	46bd      	mov	sp, r7
    2514:	bd90      	pop	{r4, r7, pc}
    2516:	bf00      	nop
    2518:	00001e91 	.word	0x00001e91
    251c:	00016fac 	.word	0x00016fac
    2520:	20004d34 	.word	0x20004d34
    2524:	00002b39 	.word	0x00002b39
    2528:	00000a85 	.word	0x00000a85
    252c:	00016fa8 	.word	0x00016fa8
    2530:	00000649 	.word	0x00000649
    2534:	200048c4 	.word	0x200048c4
    2538:	00011905 	.word	0x00011905
    253c:	200029c8 	.word	0x200029c8
    2540:	00016fd0 	.word	0x00016fd0
    2544:	00001355 	.word	0x00001355
    2548:	00002989 	.word	0x00002989
    254c:	0000294d 	.word	0x0000294d
    2550:	0001181d 	.word	0x0001181d
    2554:	00002a3d 	.word	0x00002a3d

00002558 <_ZN12States_Class17handleStateResumeEm>:


void States_Class::handleStateResume(uint32 flags)
	{
    2558:	b590      	push	{r4, r7, lr}
    255a:	b089      	sub	sp, #36	; 0x24
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	6039      	str	r1, [r7, #0]
	event	e;
    2562:	f107 030c 	add.w	r3, r7, #12
    2566:	4618      	mov	r0, r3
    2568:	4b24      	ldr	r3, [pc, #144]	; (25fc <_ZN12States_Class17handleStateResumeEm+0xa4>)
    256a:	4798      	blx	r3
	uint8	currentState(state.currentState);
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    2572:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kGAINNoError);
    2574:	2300      	movs	r3, #0
    2576:	83bb      	strh	r3, [r7, #28]
#endif

#if __DEBUG__ > 3
	usb << "state.currentState (before) " << state.currentState << newline;
#endif
	memory.restoreWorkingStateForGAIN(state);
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
    257e:	4619      	mov	r1, r3
    2580:	481f      	ldr	r0, [pc, #124]	; (2600 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    2582:	4b20      	ldr	r3, [pc, #128]	; (2604 <_ZN12States_Class17handleStateResumeEm+0xac>)
    2584:	4798      	blx	r3
	usb << "state.currentState (after) " << state.currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kGAINNoError)
    2586:	8bbb      	ldrh	r3, [r7, #28]
    2588:	2b00      	cmp	r3, #0
    258a:	d125      	bne.n	25d8 <_ZN12States_Class17handleStateResumeEm+0x80>
    {
        switch (state.currentState)
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    2592:	2b09      	cmp	r3, #9
    2594:	d002      	beq.n	259c <_ZN12States_Class17handleStateResumeEm+0x44>
    2596:	2b0a      	cmp	r3, #10
    2598:	d00b      	beq.n	25b2 <_ZN12States_Class17handleStateResumeEm+0x5a>
    259a:	e012      	b.n	25c2 <_ZN12States_Class17handleStateResumeEm+0x6a>
        {
        case kGAINStateON:
            prepareStateChangeEvent(e, state.currentState, true);
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    25a2:	b29a      	uxth	r2, r3
    25a4:	f107 010c 	add.w	r1, r7, #12
    25a8:	2301      	movs	r3, #1
    25aa:	6878      	ldr	r0, [r7, #4]
    25ac:	4c16      	ldr	r4, [pc, #88]	; (2608 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    25ae:	47a0      	blx	r4
            break;
    25b0:	e012      	b.n	25d8 <_ZN12States_Class17handleStateResumeEm+0x80>

        case kGAINStateStoppedProcess:
            prepareStateChangeEvent(e, kGAINStateStoppedProcess);
    25b2:	f107 010c 	add.w	r1, r7, #12
    25b6:	2300      	movs	r3, #0
    25b8:	220a      	movs	r2, #10
    25ba:	6878      	ldr	r0, [r7, #4]
    25bc:	4c12      	ldr	r4, [pc, #72]	; (2608 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    25be:	47a0      	blx	r4
            break;
    25c0:	e00a      	b.n	25d8 <_ZN12States_Class17handleStateResumeEm+0x80>

        default:
            prepareStateChangeEvent(e, state.currentState);
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    25c8:	b29a      	uxth	r2, r3
    25ca:	f107 010c 	add.w	r1, r7, #12
    25ce:	2300      	movs	r3, #0
    25d0:	6878      	ldr	r0, [r7, #4]
    25d2:	4c0d      	ldr	r4, [pc, #52]	; (2608 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    25d4:	47a0      	blx	r4
            break;
    25d6:	bf00      	nop
        }
    }

	state.currentState = currentState;
    25d8:	7ffa      	ldrb	r2, [r7, #31]
    25da:	687b      	ldr	r3, [r7, #4]
    25dc:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4

	listener.CheckEvent();
    25e0:	480a      	ldr	r0, [pc, #40]	; (260c <_ZN12States_Class17handleStateResumeEm+0xb4>)
    25e2:	4b0b      	ldr	r3, [pc, #44]	; (2610 <_ZN12States_Class17handleStateResumeEm+0xb8>)
    25e4:	4798      	blx	r3
	listener.SendEventSelf(e);
    25e6:	f107 030c 	add.w	r3, r7, #12
    25ea:	4619      	mov	r1, r3
    25ec:	4807      	ldr	r0, [pc, #28]	; (260c <_ZN12States_Class17handleStateResumeEm+0xb4>)
    25ee:	4b09      	ldr	r3, [pc, #36]	; (2614 <_ZN12States_Class17handleStateResumeEm+0xbc>)
    25f0:	4798      	blx	r3
	}
    25f2:	bf00      	nop
    25f4:	3724      	adds	r7, #36	; 0x24
    25f6:	46bd      	mov	sp, r7
    25f8:	bd90      	pop	{r4, r7, pc}
    25fa:	bf00      	nop
    25fc:	00001e91 	.word	0x00001e91
    2600:	200013bc 	.word	0x200013bc
    2604:	00001cf9 	.word	0x00001cf9
    2608:	0000294d 	.word	0x0000294d
    260c:	200048c4 	.word	0x200048c4
    2610:	00011905 	.word	0x00011905
    2614:	0001181d 	.word	0x0001181d

00002618 <_ZN12States_Class21handleStateStandbyOFFEm>:
				
void States_Class::handleStateStandbyOFF(uint32 flags)
	{
    2618:	b580      	push	{r7, lr}
    261a:	b088      	sub	sp, #32
    261c:	af00      	add	r7, sp, #0
    261e:	6078      	str	r0, [r7, #4]
    2620:	6039      	str	r1, [r7, #0]
	event	e;
    2622:	f107 030c 	add.w	r3, r7, #12
    2626:	4618      	mov	r0, r3
    2628:	4b18      	ldr	r3, [pc, #96]	; (268c <_ZN12States_Class21handleStateStandbyOFFEm+0x74>)
    262a:	4798      	blx	r3
	bool	done(false);
    262c:	2300      	movs	r3, #0
    262e:	77fb      	strb	r3, [r7, #31]
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    2630:	4917      	ldr	r1, [pc, #92]	; (2690 <_ZN12States_Class21handleStateStandbyOFFEm+0x78>)
    2632:	4818      	ldr	r0, [pc, #96]	; (2694 <_ZN12States_Class21handleStateStandbyOFFEm+0x7c>)
    2634:	4b18      	ldr	r3, [pc, #96]	; (2698 <_ZN12States_Class21handleStateStandbyOFFEm+0x80>)
    2636:	4798      	blx	r3
    2638:	4603      	mov	r3, r0
    263a:	4918      	ldr	r1, [pc, #96]	; (269c <_ZN12States_Class21handleStateStandbyOFFEm+0x84>)
    263c:	4618      	mov	r0, r3
    263e:	4b18      	ldr	r3, [pc, #96]	; (26a0 <_ZN12States_Class21handleStateStandbyOFFEm+0x88>)
    2640:	4798      	blx	r3
		
#endif

	state.smpsTemperatureOutOfRangeEventSent = false;
    2642:	687a      	ldr	r2, [r7, #4]
    2644:	f892 3438 	ldrb.w	r3, [r2, #1080]	; 0x438
    2648:	f36f 0382 	bfc	r3, #2, #1
    264c:	f882 3438 	strb.w	r3, [r2, #1080]	; 0x438
	state.magnetronTemperatureOutOfRangeEventSent = false;
    2650:	687a      	ldr	r2, [r7, #4]
    2652:	f892 3438 	ldrb.w	r3, [r2, #1080]	; 0x438
    2656:	f36f 1386 	bfc	r3, #6, #1
    265a:	f882 3438 	strb.w	r3, [r2, #1080]	; 0x438
	state.exhaustTemperatureOutOfRangeEventSent = false;
    265e:	687a      	ldr	r2, [r7, #4]
    2660:	f892 3438 	ldrb.w	r3, [r2, #1080]	; 0x438
    2664:	f36f 1304 	bfc	r3, #4, #1
    2668:	f882 3438 	strb.w	r3, [r2, #1080]	; 0x438

	state.magnetronFanFailureDetectionTime = forever;
    266c:	4b0d      	ldr	r3, [pc, #52]	; (26a4 <_ZN12States_Class21handleStateStandbyOFFEm+0x8c>)
    266e:	681a      	ldr	r2, [r3, #0]
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428




	listener.SendEventSelf(e);
    2676:	f107 030c 	add.w	r3, r7, #12
    267a:	4619      	mov	r1, r3
    267c:	480a      	ldr	r0, [pc, #40]	; (26a8 <_ZN12States_Class21handleStateStandbyOFFEm+0x90>)
    267e:	4b0b      	ldr	r3, [pc, #44]	; (26ac <_ZN12States_Class21handleStateStandbyOFFEm+0x94>)
    2680:	4798      	blx	r3
	}
    2682:	bf00      	nop
    2684:	3720      	adds	r7, #32
    2686:	46bd      	mov	sp, r7
    2688:	bd80      	pop	{r7, pc}
    268a:	bf00      	nop
    268c:	00001e91 	.word	0x00001e91
    2690:	00016fe8 	.word	0x00016fe8
    2694:	20004d34 	.word	0x20004d34
    2698:	00001355 	.word	0x00001355
    269c:	00016fa8 	.word	0x00016fa8
    26a0:	00000649 	.word	0x00000649
    26a4:	000184f8 	.word	0x000184f8
    26a8:	200048c4 	.word	0x200048c4
    26ac:	0001181d 	.word	0x0001181d

000026b0 <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    26b0:	b580      	push	{r7, lr}
    26b2:	b08a      	sub	sp, #40	; 0x28
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
    26b8:	6039      	str	r1, [r7, #0]
	event	e;
    26ba:	f107 030c 	add.w	r3, r7, #12
    26be:	4618      	mov	r0, r3
    26c0:	4b15      	ldr	r3, [pc, #84]	; (2718 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x68>)
    26c2:	4798      	blx	r3
	bool	done(false);
    26c4:	2300      	movs	r3, #0
    26c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(state.alarmState?kConnectFlagsAlarmOn:0);
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
    26d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    26d4:	b2db      	uxtb	r3, r3
    26d6:	2b00      	cmp	r3, #0
    26d8:	d001      	beq.n	26de <_ZN12States_Class27handleStatePrepareStandbyONEm+0x2e>
    26da:	2301      	movs	r3, #1
    26dc:	e000      	b.n	26e0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x30>
    26de:	2300      	movs	r3, #0
    26e0:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    26e2:	490e      	ldr	r1, [pc, #56]	; (271c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    26e4:	480e      	ldr	r0, [pc, #56]	; (2720 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    26e6:	4b0f      	ldr	r3, [pc, #60]	; (2724 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    26e8:	4798      	blx	r3
    26ea:	4603      	mov	r3, r0
    26ec:	490e      	ldr	r1, [pc, #56]	; (2728 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    26ee:	4618      	mov	r0, r3
    26f0:	4b0e      	ldr	r3, [pc, #56]	; (272c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    26f2:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.get_ticks() + 4000;
    26f4:	480e      	ldr	r0, [pc, #56]	; (2730 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    26f6:	4b0f      	ldr	r3, [pc, #60]	; (2734 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    26f8:	4798      	blx	r3
    26fa:	4603      	mov	r3, r0
    26fc:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    2700:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    2702:	f107 030c 	add.w	r3, r7, #12
    2706:	4619      	mov	r1, r3
    2708:	480b      	ldr	r0, [pc, #44]	; (2738 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    270a:	4b0c      	ldr	r3, [pc, #48]	; (273c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    270c:	4798      	blx	r3
	}
    270e:	bf00      	nop
    2710:	3728      	adds	r7, #40	; 0x28
    2712:	46bd      	mov	sp, r7
    2714:	bd80      	pop	{r7, pc}
    2716:	bf00      	nop
    2718:	00001e91 	.word	0x00001e91
    271c:	00017000 	.word	0x00017000
    2720:	20004d34 	.word	0x20004d34
    2724:	00002b59 	.word	0x00002b59
    2728:	00016fa8 	.word	0x00016fa8
    272c:	00000649 	.word	0x00000649
    2730:	20004cd8 	.word	0x20004cd8
    2734:	000139ad 	.word	0x000139ad
    2738:	200048c4 	.word	0x200048c4
    273c:	0001181d 	.word	0x0001181d

00002740 <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    2740:	b580      	push	{r7, lr}
    2742:	b088      	sub	sp, #32
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
    2748:	6039      	str	r1, [r7, #0]
	event	e;
    274a:	f107 030c 	add.w	r3, r7, #12
    274e:	4618      	mov	r0, r3
    2750:	4b12      	ldr	r3, [pc, #72]	; (279c <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    2752:	4798      	blx	r3
	bool	done(false);
    2754:	2300      	movs	r3, #0
    2756:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	state.latchClosedConfirmPending = false;
    2758:	687a      	ldr	r2, [r7, #4]
    275a:	f892 3439 	ldrb.w	r3, [r2, #1081]	; 0x439
    275e:	f36f 03c3 	bfc	r3, #3, #1
    2762:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
    state.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
    276c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2770:	fb02 f203 	mul.w	r2, r2, r3
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	
	state.reedRelayOpen = false;
    277a:	687a      	ldr	r2, [r7, #4]
    277c:	f892 3439 	ldrb.w	r3, [r2, #1081]	; 0x439
    2780:	f36f 0382 	bfc	r3, #2, #1
    2784:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
	
	listener.SendEventSelf(e);
    2788:	f107 030c 	add.w	r3, r7, #12
    278c:	4619      	mov	r1, r3
    278e:	4804      	ldr	r0, [pc, #16]	; (27a0 <_ZN12States_Class20handleStateStandbyONEm+0x60>)
    2790:	4b04      	ldr	r3, [pc, #16]	; (27a4 <_ZN12States_Class20handleStateStandbyONEm+0x64>)
    2792:	4798      	blx	r3
	}
    2794:	bf00      	nop
    2796:	3720      	adds	r7, #32
    2798:	46bd      	mov	sp, r7
    279a:	bd80      	pop	{r7, pc}
    279c:	00001e91 	.word	0x00001e91
    27a0:	200048c4 	.word	0x200048c4
    27a4:	0001181d 	.word	0x0001181d

000027a8 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    27a8:	b580      	push	{r7, lr}
    27aa:	b088      	sub	sp, #32
    27ac:	af00      	add	r7, sp, #0
    27ae:	6078      	str	r0, [r7, #4]
    27b0:	6039      	str	r1, [r7, #0]
	event	e;
    27b2:	f107 030c 	add.w	r3, r7, #12
    27b6:	4618      	mov	r0, r3
    27b8:	4b06      	ldr	r3, [pc, #24]	; (27d4 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    27ba:	4798      	blx	r3
	bool	done(false);
    27bc:	2300      	movs	r3, #0
    27be:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    27c0:	f107 030c 	add.w	r3, r7, #12
    27c4:	4619      	mov	r1, r3
    27c6:	4804      	ldr	r0, [pc, #16]	; (27d8 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    27c8:	4b04      	ldr	r3, [pc, #16]	; (27dc <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    27ca:	4798      	blx	r3
	}
    27cc:	bf00      	nop
    27ce:	3720      	adds	r7, #32
    27d0:	46bd      	mov	sp, r7
    27d2:	bd80      	pop	{r7, pc}
    27d4:	00001e91 	.word	0x00001e91
    27d8:	200048c4 	.word	0x200048c4
    27dc:	0001181d 	.word	0x0001181d

000027e0 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    27e0:	b580      	push	{r7, lr}
    27e2:	b088      	sub	sp, #32
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
    27e8:	6039      	str	r1, [r7, #0]
	event	e;
    27ea:	f107 030c 	add.w	r3, r7, #12
    27ee:	4618      	mov	r0, r3
    27f0:	4b0b      	ldr	r3, [pc, #44]	; (2820 <_ZN12States_Class13handleStateONEm+0x40>)
    27f2:	4798      	blx	r3
	bool	done(false);
    27f4:	2300      	movs	r3, #0
    27f6:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    27f8:	2301      	movs	r3, #1
    27fa:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    27fc:	2301      	movs	r3, #1
    27fe:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    2800:	683b      	ldr	r3, [r7, #0]
    2802:	2b00      	cmp	r3, #0
    2804:	bf14      	ite	ne
    2806:	2301      	movne	r3, #1
    2808:	2300      	moveq	r3, #0
    280a:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    280c:	f107 030c 	add.w	r3, r7, #12
    2810:	4619      	mov	r1, r3
    2812:	4804      	ldr	r0, [pc, #16]	; (2824 <_ZN12States_Class13handleStateONEm+0x44>)
    2814:	4b04      	ldr	r3, [pc, #16]	; (2828 <_ZN12States_Class13handleStateONEm+0x48>)
    2816:	4798      	blx	r3
	}
    2818:	bf00      	nop
    281a:	3720      	adds	r7, #32
    281c:	46bd      	mov	sp, r7
    281e:	bd80      	pop	{r7, pc}
    2820:	00001e91 	.word	0x00001e91
    2824:	200048c4 	.word	0x200048c4
    2828:	0001181d 	.word	0x0001181d

0000282c <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    282c:	b580      	push	{r7, lr}
    282e:	b088      	sub	sp, #32
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
    2834:	6039      	str	r1, [r7, #0]
	event	e;
    2836:	f107 030c 	add.w	r3, r7, #12
    283a:	4618      	mov	r0, r3
    283c:	4b06      	ldr	r3, [pc, #24]	; (2858 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    283e:	4798      	blx	r3
	bool	done(false);
    2840:	2300      	movs	r3, #0
    2842:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    2844:	f107 030c 	add.w	r3, r7, #12
    2848:	4619      	mov	r1, r3
    284a:	4804      	ldr	r0, [pc, #16]	; (285c <_ZN12States_Class19handleStateFinishedEm+0x30>)
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    284e:	4798      	blx	r3
	}
    2850:	bf00      	nop
    2852:	3720      	adds	r7, #32
    2854:	46bd      	mov	sp, r7
    2856:	bd80      	pop	{r7, pc}
    2858:	00001e91 	.word	0x00001e91
    285c:	200048c4 	.word	0x200048c4
    2860:	0001181d 	.word	0x0001181d

00002864 <_ZN12States_Class25handleStateStoppedProcessEm>:

void States_Class::handleStateStoppedProcess(uint32 flags)
	{
    2864:	b580      	push	{r7, lr}
    2866:	b088      	sub	sp, #32
    2868:	af00      	add	r7, sp, #0
    286a:	6078      	str	r0, [r7, #4]
    286c:	6039      	str	r1, [r7, #0]
	event	e;
    286e:	f107 030c 	add.w	r3, r7, #12
    2872:	4618      	mov	r0, r3
    2874:	4b08      	ldr	r3, [pc, #32]	; (2898 <_ZN12States_Class25handleStateStoppedProcessEm+0x34>)
    2876:	4798      	blx	r3
 	bool	done(false);
    2878:	2300      	movs	r3, #0
    287a:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    287c:	2301      	movs	r3, #1
    287e:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    2880:	683b      	ldr	r3, [r7, #0]
    2882:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    2884:	f107 030c 	add.w	r3, r7, #12
    2888:	4619      	mov	r1, r3
    288a:	4804      	ldr	r0, [pc, #16]	; (289c <_ZN12States_Class25handleStateStoppedProcessEm+0x38>)
    288c:	4b04      	ldr	r3, [pc, #16]	; (28a0 <_ZN12States_Class25handleStateStoppedProcessEm+0x3c>)
    288e:	4798      	blx	r3
	}
    2890:	bf00      	nop
    2892:	3720      	adds	r7, #32
    2894:	46bd      	mov	sp, r7
    2896:	bd80      	pop	{r7, pc}
    2898:	00001e91 	.word	0x00001e91
    289c:	200048c4 	.word	0x200048c4
    28a0:	0001181d 	.word	0x0001181d

000028a4 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    28a4:	b580      	push	{r7, lr}
    28a6:	b088      	sub	sp, #32
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
    28ac:	6039      	str	r1, [r7, #0]
	event	e;
    28ae:	f107 030c 	add.w	r3, r7, #12
    28b2:	4618      	mov	r0, r3
    28b4:	4b06      	ldr	r3, [pc, #24]	; (28d0 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    28b6:	4798      	blx	r3
	bool	done(false);
    28b8:	2300      	movs	r3, #0
    28ba:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    28bc:	f107 030c 	add.w	r3, r7, #12
    28c0:	4619      	mov	r1, r3
    28c2:	4804      	ldr	r0, [pc, #16]	; (28d4 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    28c4:	4b04      	ldr	r3, [pc, #16]	; (28d8 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    28c6:	4798      	blx	r3
	}
    28c8:	bf00      	nop
    28ca:	3720      	adds	r7, #32
    28cc:	46bd      	mov	sp, r7
    28ce:	bd80      	pop	{r7, pc}
    28d0:	00001e91 	.word	0x00001e91
    28d4:	200048c4 	.word	0x200048c4
    28d8:	0001181d 	.word	0x0001181d

000028dc <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    28dc:	b580      	push	{r7, lr}
    28de:	b088      	sub	sp, #32
    28e0:	af00      	add	r7, sp, #0
    28e2:	6078      	str	r0, [r7, #4]
    28e4:	6039      	str	r1, [r7, #0]
	event	e;
    28e6:	f107 030c 	add.w	r3, r7, #12
    28ea:	4618      	mov	r0, r3
    28ec:	4b06      	ldr	r3, [pc, #24]	; (2908 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    28ee:	4798      	blx	r3
	bool	done(false);
    28f0:	2300      	movs	r3, #0
    28f2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    28f4:	f107 030c 	add.w	r3, r7, #12
    28f8:	4619      	mov	r1, r3
    28fa:	4804      	ldr	r0, [pc, #16]	; (290c <_ZN12States_Class16handleStateErrorEm+0x30>)
    28fc:	4b04      	ldr	r3, [pc, #16]	; (2910 <_ZN12States_Class16handleStateErrorEm+0x34>)
    28fe:	4798      	blx	r3
	}
    2900:	bf00      	nop
    2902:	3720      	adds	r7, #32
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}
    2908:	00001e91 	.word	0x00001e91
    290c:	200048c4 	.word	0x200048c4
    2910:	0001181d 	.word	0x0001181d

00002914 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    2914:	b580      	push	{r7, lr}
    2916:	b088      	sub	sp, #32
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
    291c:	6039      	str	r1, [r7, #0]
	event	e;
    291e:	f107 030c 	add.w	r3, r7, #12
    2922:	4618      	mov	r0, r3
    2924:	4b06      	ldr	r3, [pc, #24]	; (2940 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    2926:	4798      	blx	r3
	bool	done(false);
    2928:	2300      	movs	r3, #0
    292a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    292c:	f107 030c 	add.w	r3, r7, #12
    2930:	4619      	mov	r1, r3
    2932:	4804      	ldr	r0, [pc, #16]	; (2944 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    2934:	4b04      	ldr	r3, [pc, #16]	; (2948 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    2936:	4798      	blx	r3
	}
    2938:	bf00      	nop
    293a:	3720      	adds	r7, #32
    293c:	46bd      	mov	sp, r7
    293e:	bd80      	pop	{r7, pc}
    2940:	00001e91 	.word	0x00001e91
    2944:	200048c4 	.word	0x200048c4
    2948:	0001181d 	.word	0x0001181d

0000294c <_ZN12States_Class23prepareStateChangeEventER5eventtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(event& e, uint16 newState, uint16 data)
	{
    294c:	b480      	push	{r7}
    294e:	b085      	sub	sp, #20
    2950:	af00      	add	r7, sp, #0
    2952:	60f8      	str	r0, [r7, #12]
    2954:	60b9      	str	r1, [r7, #8]
    2956:	4611      	mov	r1, r2
    2958:	461a      	mov	r2, r3
    295a:	460b      	mov	r3, r1
    295c:	80fb      	strh	r3, [r7, #6]
    295e:	4613      	mov	r3, r2
    2960:	80bb      	strh	r3, [r7, #4]
	e.eventClass =(EventClass)kGAINEventClass;
    2962:	68bb      	ldr	r3, [r7, #8]
    2964:	f44f 7200 	mov.w	r2, #512	; 0x200
    2968:	801a      	strh	r2, [r3, #0]
	e.eventType = (EventType)kGAINSwitchStateEvent;
    296a:	68bb      	ldr	r3, [r7, #8]
    296c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2970:	805a      	strh	r2, [r3, #2]
	e.data.wordData[0] = newState;
    2972:	68bb      	ldr	r3, [r7, #8]
    2974:	88fa      	ldrh	r2, [r7, #6]
    2976:	811a      	strh	r2, [r3, #8]
	e.data.wordData[1] = data;
    2978:	68bb      	ldr	r3, [r7, #8]
    297a:	88ba      	ldrh	r2, [r7, #4]
    297c:	815a      	strh	r2, [r3, #10]
	}
    297e:	bf00      	nop
    2980:	3714      	adds	r7, #20
    2982:	46bd      	mov	sp, r7
    2984:	bc80      	pop	{r7}
    2986:	4770      	bx	lr

00002988 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    2988:	b580      	push	{r7, lr}
    298a:	b088      	sub	sp, #32
    298c:	af00      	add	r7, sp, #0
    298e:	6078      	str	r0, [r7, #4]
	event	e;
    2990:	f107 030c 	add.w	r3, r7, #12
    2994:	4618      	mov	r0, r3
    2996:	4b04      	ldr	r3, [pc, #16]	; (29a8 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    2998:	4798      	blx	r3
	uint16	selfTestResult(kGAINNoError);
    299a:	2300      	movs	r3, #0
    299c:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    299e:	8bfb      	ldrh	r3, [r7, #30]
	}
    29a0:	4618      	mov	r0, r3
    29a2:	3720      	adds	r7, #32
    29a4:	46bd      	mov	sp, r7
    29a6:	bd80      	pop	{r7, pc}
    29a8:	00001e91 	.word	0x00001e91

000029ac <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    29ac:	b580      	push	{r7, lr}
    29ae:	b084      	sub	sp, #16
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    29b4:	f107 0308 	add.w	r3, r7, #8
    29b8:	4619      	mov	r1, r3
    29ba:	4819      	ldr	r0, [pc, #100]	; (2a20 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    29bc:	4b19      	ldr	r3, [pc, #100]	; (2a24 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    29be:	4798      	blx	r3
		state.dateTime=cdt;
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
    29c6:	f107 0208 	add.w	r2, r7, #8
    29ca:	e892 0003 	ldmia.w	r2, {r0, r1}
    29ce:	e883 0003 	stmia.w	r3, {r0, r1}
		state.now = calendar.convert_datetime_to_timestamp(&cdt);
    29d2:	f107 0308 	add.w	r3, r7, #8
    29d6:	4619      	mov	r1, r3
    29d8:	4811      	ldr	r0, [pc, #68]	; (2a20 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    29da:	4b13      	ldr	r3, [pc, #76]	; (2a28 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    29dc:	4798      	blx	r3
    29de:	4603      	mov	r3, r0
    29e0:	461a      	mov	r2, r3
    29e2:	687b      	ldr	r3, [r7, #4]
    29e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
	if (state.currentState!=kGAINStateMaintenance){
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    29ee:	2b10      	cmp	r3, #16
    29f0:	d012      	beq.n	2a18 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		memory.WriteFastCurrentState(state);
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
    29f8:	4619      	mov	r1, r3
    29fa:	480c      	ldr	r0, [pc, #48]	; (2a2c <_ZN12States_Class16saveCurrentStateEv+0x80>)
    29fc:	4b0c      	ldr	r3, [pc, #48]	; (2a30 <_ZN12States_Class16saveCurrentStateEv+0x84>)
    29fe:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (state.currentState==0)
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
    2a06:	2b00      	cmp	r3, #0
    2a08:	d106      	bne.n	2a18 <_ZN12States_Class16saveCurrentStateEv+0x6c>
		{
			memory.SaveApplicationState(state);
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
    2a10:	4619      	mov	r1, r3
    2a12:	4808      	ldr	r0, [pc, #32]	; (2a34 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    2a14:	4b08      	ldr	r3, [pc, #32]	; (2a38 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    2a16:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    2a18:	bf00      	nop
    2a1a:	3710      	adds	r7, #16
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}
    2a20:	20004c00 	.word	0x20004c00
    2a24:	0001315d 	.word	0x0001315d
    2a28:	0001324d 	.word	0x0001324d
    2a2c:	20001568 	.word	0x20001568
    2a30:	00000ea1 	.word	0x00000ea1
    2a34:	20000ed0 	.word	0x20000ed0
    2a38:	00001669 	.word	0x00001669

00002a3c <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    2a3c:	b480      	push	{r7}
    2a3e:	b083      	sub	sp, #12
    2a40:	af00      	add	r7, sp, #0
    2a42:	6078      	str	r0, [r7, #4]
    2a44:	460b      	mov	r3, r1
    2a46:	70fb      	strb	r3, [r7, #3]
	return	layer;
    2a48:	78fb      	ldrb	r3, [r7, #3]
}
    2a4a:	4618      	mov	r0, r3
    2a4c:	370c      	adds	r7, #12
    2a4e:	46bd      	mov	sp, r7
    2a50:	bc80      	pop	{r7}
    2a52:	4770      	bx	lr

00002a54 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
	hs=state;
}
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
    2a5a:	6078      	str	r0, [r7, #4]
    2a5c:	6039      	str	r1, [r7, #0]
	configuration=cd;
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	683a      	ldr	r2, [r7, #0]
    2a62:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
    2a66:	4611      	mov	r1, r2
    2a68:	22ac      	movs	r2, #172	; 0xac
    2a6a:	4618      	mov	r0, r3
    2a6c:	4b02      	ldr	r3, [pc, #8]	; (2a78 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    2a6e:	4798      	blx	r3
}
    2a70:	bf00      	nop
    2a72:	3708      	adds	r7, #8
    2a74:	46bd      	mov	sp, r7
    2a76:	bd80      	pop	{r7, pc}
    2a78:	0001652d 	.word	0x0001652d

00002a7c <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b082      	sub	sp, #8
    2a80:	af00      	add	r7, sp, #0
    2a82:	6078      	str	r0, [r7, #4]
    2a84:	6039      	str	r1, [r7, #0]
	state=hs;
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	683a      	ldr	r2, [r7, #0]
    2a8a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
    2a8e:	4611      	mov	r1, r2
    2a90:	227c      	movs	r2, #124	; 0x7c
    2a92:	4618      	mov	r0, r3
    2a94:	4b02      	ldr	r3, [pc, #8]	; (2aa0 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    2a96:	4798      	blx	r3
}
    2a98:	bf00      	nop
    2a9a:	3708      	adds	r7, #8
    2a9c:	46bd      	mov	sp, r7
    2a9e:	bd80      	pop	{r7, pc}
    2aa0:	0001652d 	.word	0x0001652d

00002aa4 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b082      	sub	sp, #8
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    2aac:	22ac      	movs	r2, #172	; 0xac
    2aae:	4906      	ldr	r1, [pc, #24]	; (2ac8 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    2ab0:	4806      	ldr	r0, [pc, #24]	; (2acc <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    2ab2:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    2ab4:	4798      	blx	r3
    2ab6:	4602      	mov	r2, r0
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
}
    2abe:	bf00      	nop
    2ac0:	3708      	adds	r7, #8
    2ac2:	46bd      	mov	sp, r7
    2ac4:	bd80      	pop	{r7, pc}
    2ac6:	bf00      	nop
    2ac8:	00016a38 	.word	0x00016a38
    2acc:	200013bc 	.word	0x200013bc
    2ad0:	00000b31 	.word	0x00000b31

00002ad4 <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b082      	sub	sp, #8
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
    2adc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2ade:	6839      	ldr	r1, [r7, #0]
    2ae0:	6878      	ldr	r0, [r7, #4]
    2ae2:	4b03      	ldr	r3, [pc, #12]	; (2af0 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    2ae4:	4798      	blx	r3
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	4618      	mov	r0, r3
    2aea:	3708      	adds	r7, #8
    2aec:	46bd      	mov	sp, r7
    2aee:	bd80      	pop	{r7, pc}
    2af0:	00013fb1 	.word	0x00013fb1

00002af4 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2af4:	b580      	push	{r7, lr}
    2af6:	b082      	sub	sp, #8
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
    2afc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2afe:	6839      	ldr	r1, [r7, #0]
    2b00:	6878      	ldr	r0, [r7, #4]
    2b02:	4b03      	ldr	r3, [pc, #12]	; (2b10 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    2b04:	4798      	blx	r3
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	4618      	mov	r0, r3
    2b0a:	3708      	adds	r7, #8
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	00013fb1 	.word	0x00013fb1

00002b14 <_ZlsIcER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2b14:	b580      	push	{r7, lr}
    2b16:	b082      	sub	sp, #8
    2b18:	af00      	add	r7, sp, #0
    2b1a:	6078      	str	r0, [r7, #4]
    2b1c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2b1e:	683b      	ldr	r3, [r7, #0]
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	4619      	mov	r1, r3
    2b24:	6878      	ldr	r0, [r7, #4]
    2b26:	4b03      	ldr	r3, [pc, #12]	; (2b34 <_ZlsIcER5PrintS1_RKT_+0x20>)
    2b28:	4798      	blx	r3
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	4618      	mov	r0, r3
    2b2e:	3708      	adds	r7, #8
    2b30:	46bd      	mov	sp, r7
    2b32:	bd80      	pop	{r7, pc}
    2b34:	00013fd1 	.word	0x00013fd1

00002b38 <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2b38:	b580      	push	{r7, lr}
    2b3a:	b082      	sub	sp, #8
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	6078      	str	r0, [r7, #4]
    2b40:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2b42:	6839      	ldr	r1, [r7, #0]
    2b44:	6878      	ldr	r0, [r7, #4]
    2b46:	4b03      	ldr	r3, [pc, #12]	; (2b54 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    2b48:	4798      	blx	r3
    2b4a:	687b      	ldr	r3, [r7, #4]
    2b4c:	4618      	mov	r0, r3
    2b4e:	3708      	adds	r7, #8
    2b50:	46bd      	mov	sp, r7
    2b52:	bd80      	pop	{r7, pc}
    2b54:	00013fb1 	.word	0x00013fb1

00002b58 <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2b58:	b580      	push	{r7, lr}
    2b5a:	b082      	sub	sp, #8
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
    2b60:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2b62:	6839      	ldr	r1, [r7, #0]
    2b64:	6878      	ldr	r0, [r7, #4]
    2b66:	4b03      	ldr	r3, [pc, #12]	; (2b74 <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    2b68:	4798      	blx	r3
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	4618      	mov	r0, r3
    2b6e:	3708      	adds	r7, #8
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}
    2b74:	00013fb1 	.word	0x00013fb1

00002b78 <_Z41__static_initialization_and_destruction_0ii>:
	s=state.status;
	return	state.status.rawStatus;
}


    2b78:	b580      	push	{r7, lr}
    2b7a:	b082      	sub	sp, #8
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	6078      	str	r0, [r7, #4]
    2b80:	6039      	str	r1, [r7, #0]
    2b82:	687b      	ldr	r3, [r7, #4]
    2b84:	2b01      	cmp	r3, #1
    2b86:	d10c      	bne.n	2ba2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2b88:	683b      	ldr	r3, [r7, #0]
    2b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2b8e:	4293      	cmp	r3, r2
    2b90:	d107      	bne.n	2ba2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2b92:	4806      	ldr	r0, [pc, #24]	; (2bac <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2b94:	4b06      	ldr	r3, [pc, #24]	; (2bb0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2b96:	4798      	blx	r3
    2b98:	4a06      	ldr	r2, [pc, #24]	; (2bb4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2b9a:	4907      	ldr	r1, [pc, #28]	; (2bb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2b9c:	4803      	ldr	r0, [pc, #12]	; (2bac <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2b9e:	4b07      	ldr	r3, [pc, #28]	; (2bbc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2ba0:	4798      	blx	r3
    2ba2:	bf00      	nop
    2ba4:	3708      	adds	r7, #8
    2ba6:	46bd      	mov	sp, r7
    2ba8:	bd80      	pop	{r7, pc}
    2baa:	bf00      	nop
    2bac:	200029dc 	.word	0x200029dc
    2bb0:	00001f0d 	.word	0x00001f0d
    2bb4:	20000000 	.word	0x20000000
    2bb8:	00001f65 	.word	0x00001f65
    2bbc:	00014919 	.word	0x00014919

00002bc0 <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
    2bc0:	b580      	push	{r7, lr}
    2bc2:	af00      	add	r7, sp, #0
    2bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2bc8:	2001      	movs	r0, #1
    2bca:	4b01      	ldr	r3, [pc, #4]	; (2bd0 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x10>)
    2bcc:	4798      	blx	r3
    2bce:	bd80      	pop	{r7, pc}
    2bd0:	00002b79 	.word	0x00002b79

00002bd4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	af00      	add	r7, sp, #0
	system_init();
    2bd8:	4b03      	ldr	r3, [pc, #12]	; (2be8 <atmel_start_init+0x14>)
    2bda:	4798      	blx	r3
	usb_init();
    2bdc:	4b03      	ldr	r3, [pc, #12]	; (2bec <atmel_start_init+0x18>)
    2bde:	4798      	blx	r3
	spi_nor_flash_init();
    2be0:	4b03      	ldr	r3, [pc, #12]	; (2bf0 <atmel_start_init+0x1c>)
    2be2:	4798      	blx	r3
}
    2be4:	bf00      	nop
    2be6:	bd80      	pop	{r7, pc}
    2be8:	00003e79 	.word	0x00003e79
    2bec:	0000e52d 	.word	0x0000e52d
    2bf0:	0000e4c1 	.word	0x0000e4c1

00002bf4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2bf4:	b480      	push	{r7}
    2bf6:	b085      	sub	sp, #20
    2bf8:	af00      	add	r7, sp, #0
    2bfa:	60f8      	str	r0, [r7, #12]
    2bfc:	460b      	mov	r3, r1
    2bfe:	607a      	str	r2, [r7, #4]
    2c00:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2c02:	7afa      	ldrb	r2, [r7, #11]
    2c04:	68fb      	ldr	r3, [r7, #12]
    2c06:	3220      	adds	r2, #32
    2c08:	6879      	ldr	r1, [r7, #4]
    2c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2c0e:	bf00      	nop
    2c10:	3714      	adds	r7, #20
    2c12:	46bd      	mov	sp, r7
    2c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c18:	4770      	bx	lr

00002c1a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2c1a:	b480      	push	{r7}
    2c1c:	b083      	sub	sp, #12
    2c1e:	af00      	add	r7, sp, #0
    2c20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	691b      	ldr	r3, [r3, #16]
    2c26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c2e:	bf00      	nop
    2c30:	370c      	adds	r7, #12
    2c32:	46bd      	mov	sp, r7
    2c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c38:	4770      	bx	lr

00002c3a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2c3a:	b480      	push	{r7}
    2c3c:	b083      	sub	sp, #12
    2c3e:	af00      	add	r7, sp, #0
    2c40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	691b      	ldr	r3, [r3, #16]
    2c46:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c4e:	bf00      	nop
    2c50:	370c      	adds	r7, #12
    2c52:	46bd      	mov	sp, r7
    2c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c58:	4770      	bx	lr

00002c5a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2c5a:	b480      	push	{r7}
    2c5c:	b083      	sub	sp, #12
    2c5e:	af00      	add	r7, sp, #0
    2c60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	691b      	ldr	r3, [r3, #16]
    2c66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c6e:	bf00      	nop
    2c70:	370c      	adds	r7, #12
    2c72:	46bd      	mov	sp, r7
    2c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c78:	4770      	bx	lr

00002c7a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2c7a:	b480      	push	{r7}
    2c7c:	b083      	sub	sp, #12
    2c7e:	af00      	add	r7, sp, #0
    2c80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	691b      	ldr	r3, [r3, #16]
    2c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2c8a:	687b      	ldr	r3, [r7, #4]
    2c8c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c8e:	bf00      	nop
    2c90:	370c      	adds	r7, #12
    2c92:	46bd      	mov	sp, r7
    2c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c98:	4770      	bx	lr

00002c9a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2c9a:	b480      	push	{r7}
    2c9c:	b083      	sub	sp, #12
    2c9e:	af00      	add	r7, sp, #0
    2ca0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	695b      	ldr	r3, [r3, #20]
    2ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cae:	bf00      	nop
    2cb0:	370c      	adds	r7, #12
    2cb2:	46bd      	mov	sp, r7
    2cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cb8:	4770      	bx	lr

00002cba <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2cba:	b480      	push	{r7}
    2cbc:	b083      	sub	sp, #12
    2cbe:	af00      	add	r7, sp, #0
    2cc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	695b      	ldr	r3, [r3, #20]
    2cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cce:	bf00      	nop
    2cd0:	370c      	adds	r7, #12
    2cd2:	46bd      	mov	sp, r7
    2cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cd8:	4770      	bx	lr

00002cda <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2cda:	b480      	push	{r7}
    2cdc:	b083      	sub	sp, #12
    2cde:	af00      	add	r7, sp, #0
    2ce0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	695b      	ldr	r3, [r3, #20]
    2ce6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cee:	bf00      	nop
    2cf0:	370c      	adds	r7, #12
    2cf2:	46bd      	mov	sp, r7
    2cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cf8:	4770      	bx	lr

00002cfa <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
    2cfa:	b480      	push	{r7}
    2cfc:	b083      	sub	sp, #12
    2cfe:	af00      	add	r7, sp, #0
    2d00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	695b      	ldr	r3, [r3, #20]
    2d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d0e:	bf00      	nop
    2d10:	370c      	adds	r7, #12
    2d12:	46bd      	mov	sp, r7
    2d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d18:	4770      	bx	lr

00002d1a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    2d1a:	b480      	push	{r7}
    2d1c:	b083      	sub	sp, #12
    2d1e:	af00      	add	r7, sp, #0
    2d20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	695b      	ldr	r3, [r3, #20]
    2d26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d2e:	bf00      	nop
    2d30:	370c      	adds	r7, #12
    2d32:	46bd      	mov	sp, r7
    2d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d38:	4770      	bx	lr

00002d3a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2d3a:	b480      	push	{r7}
    2d3c:	b083      	sub	sp, #12
    2d3e:	af00      	add	r7, sp, #0
    2d40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2d42:	687b      	ldr	r3, [r7, #4]
    2d44:	695b      	ldr	r3, [r3, #20]
    2d46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d4e:	bf00      	nop
    2d50:	370c      	adds	r7, #12
    2d52:	46bd      	mov	sp, r7
    2d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d58:	4770      	bx	lr

00002d5a <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    2d5a:	b480      	push	{r7}
    2d5c:	b083      	sub	sp, #12
    2d5e:	af00      	add	r7, sp, #0
    2d60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2d62:	687b      	ldr	r3, [r7, #4]
    2d64:	695b      	ldr	r3, [r3, #20]
    2d66:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d6e:	bf00      	nop
    2d70:	370c      	adds	r7, #12
    2d72:	46bd      	mov	sp, r7
    2d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d78:	4770      	bx	lr

00002d7a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    2d7a:	b480      	push	{r7}
    2d7c:	b083      	sub	sp, #12
    2d7e:	af00      	add	r7, sp, #0
    2d80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	699b      	ldr	r3, [r3, #24]
    2d86:	f043 0201 	orr.w	r2, r3, #1
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d8e:	bf00      	nop
    2d90:	370c      	adds	r7, #12
    2d92:	46bd      	mov	sp, r7
    2d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d98:	4770      	bx	lr

00002d9a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2d9a:	b480      	push	{r7}
    2d9c:	b083      	sub	sp, #12
    2d9e:	af00      	add	r7, sp, #0
    2da0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	699b      	ldr	r3, [r3, #24]
    2da6:	f043 0202 	orr.w	r2, r3, #2
    2daa:	687b      	ldr	r3, [r7, #4]
    2dac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dae:	bf00      	nop
    2db0:	370c      	adds	r7, #12
    2db2:	46bd      	mov	sp, r7
    2db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2db8:	4770      	bx	lr

00002dba <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2dba:	b480      	push	{r7}
    2dbc:	b083      	sub	sp, #12
    2dbe:	af00      	add	r7, sp, #0
    2dc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	699b      	ldr	r3, [r3, #24]
    2dc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dce:	bf00      	nop
    2dd0:	370c      	adds	r7, #12
    2dd2:	46bd      	mov	sp, r7
    2dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dd8:	4770      	bx	lr

00002dda <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2dda:	b480      	push	{r7}
    2ddc:	b083      	sub	sp, #12
    2dde:	af00      	add	r7, sp, #0
    2de0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	699b      	ldr	r3, [r3, #24]
    2de6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dee:	bf00      	nop
    2df0:	370c      	adds	r7, #12
    2df2:	46bd      	mov	sp, r7
    2df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2df8:	4770      	bx	lr

00002dfa <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2dfa:	b480      	push	{r7}
    2dfc:	b083      	sub	sp, #12
    2dfe:	af00      	add	r7, sp, #0
    2e00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	699b      	ldr	r3, [r3, #24]
    2e06:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e0e:	bf00      	nop
    2e10:	370c      	adds	r7, #12
    2e12:	46bd      	mov	sp, r7
    2e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e18:	4770      	bx	lr

00002e1a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    2e1a:	b480      	push	{r7}
    2e1c:	b083      	sub	sp, #12
    2e1e:	af00      	add	r7, sp, #0
    2e20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	69db      	ldr	r3, [r3, #28]
    2e26:	f043 0220 	orr.w	r2, r3, #32
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e2e:	bf00      	nop
    2e30:	370c      	adds	r7, #12
    2e32:	46bd      	mov	sp, r7
    2e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e38:	4770      	bx	lr

00002e3a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    2e3a:	b480      	push	{r7}
    2e3c:	b083      	sub	sp, #12
    2e3e:	af00      	add	r7, sp, #0
    2e40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	69db      	ldr	r3, [r3, #28]
    2e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e4e:	bf00      	nop
    2e50:	370c      	adds	r7, #12
    2e52:	46bd      	mov	sp, r7
    2e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e58:	4770      	bx	lr

00002e5a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2e5a:	b480      	push	{r7}
    2e5c:	b083      	sub	sp, #12
    2e5e:	af00      	add	r7, sp, #0
    2e60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	69db      	ldr	r3, [r3, #28]
    2e66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e6e:	bf00      	nop
    2e70:	370c      	adds	r7, #12
    2e72:	46bd      	mov	sp, r7
    2e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e78:	4770      	bx	lr

00002e7a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2e7a:	b480      	push	{r7}
    2e7c:	b083      	sub	sp, #12
    2e7e:	af00      	add	r7, sp, #0
    2e80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	6a1b      	ldr	r3, [r3, #32]
    2e86:	f043 0201 	orr.w	r2, r3, #1
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e8e:	bf00      	nop
    2e90:	370c      	adds	r7, #12
    2e92:	46bd      	mov	sp, r7
    2e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e98:	4770      	bx	lr

00002e9a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2e9a:	b480      	push	{r7}
    2e9c:	b083      	sub	sp, #12
    2e9e:	af00      	add	r7, sp, #0
    2ea0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	6a1b      	ldr	r3, [r3, #32]
    2ea6:	f043 0202 	orr.w	r2, r3, #2
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2eae:	bf00      	nop
    2eb0:	370c      	adds	r7, #12
    2eb2:	46bd      	mov	sp, r7
    2eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eb8:	4770      	bx	lr

00002eba <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2eba:	b480      	push	{r7}
    2ebc:	b083      	sub	sp, #12
    2ebe:	af00      	add	r7, sp, #0
    2ec0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	6a1b      	ldr	r3, [r3, #32]
    2ec6:	f043 0208 	orr.w	r2, r3, #8
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ece:	bf00      	nop
    2ed0:	370c      	adds	r7, #12
    2ed2:	46bd      	mov	sp, r7
    2ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ed8:	4770      	bx	lr

00002eda <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2eda:	b480      	push	{r7}
    2edc:	b083      	sub	sp, #12
    2ede:	af00      	add	r7, sp, #0
    2ee0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	6a1b      	ldr	r3, [r3, #32]
    2ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2eee:	bf00      	nop
    2ef0:	370c      	adds	r7, #12
    2ef2:	46bd      	mov	sp, r7
    2ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ef8:	4770      	bx	lr

00002efa <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2efa:	b480      	push	{r7}
    2efc:	b085      	sub	sp, #20
    2efe:	af00      	add	r7, sp, #0
    2f00:	60f8      	str	r0, [r7, #12]
    2f02:	460b      	mov	r3, r1
    2f04:	607a      	str	r2, [r7, #4]
    2f06:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f08:	7afb      	ldrb	r3, [r7, #11]
    2f0a:	68fa      	ldr	r2, [r7, #12]
    2f0c:	01db      	lsls	r3, r3, #7
    2f0e:	4413      	add	r3, r2
    2f10:	3308      	adds	r3, #8
    2f12:	687a      	ldr	r2, [r7, #4]
    2f14:	601a      	str	r2, [r3, #0]
}
    2f16:	bf00      	nop
    2f18:	3714      	adds	r7, #20
    2f1a:	46bd      	mov	sp, r7
    2f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f20:	4770      	bx	lr

00002f22 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2f22:	b480      	push	{r7}
    2f24:	b085      	sub	sp, #20
    2f26:	af00      	add	r7, sp, #0
    2f28:	60f8      	str	r0, [r7, #12]
    2f2a:	460b      	mov	r3, r1
    2f2c:	607a      	str	r2, [r7, #4]
    2f2e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f30:	7afb      	ldrb	r3, [r7, #11]
    2f32:	68fa      	ldr	r2, [r7, #12]
    2f34:	01db      	lsls	r3, r3, #7
    2f36:	4413      	add	r3, r2
    2f38:	3304      	adds	r3, #4
    2f3a:	687a      	ldr	r2, [r7, #4]
    2f3c:	601a      	str	r2, [r3, #0]
}
    2f3e:	bf00      	nop
    2f40:	3714      	adds	r7, #20
    2f42:	46bd      	mov	sp, r7
    2f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f48:	4770      	bx	lr

00002f4a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2f4a:	b480      	push	{r7}
    2f4c:	b085      	sub	sp, #20
    2f4e:	af00      	add	r7, sp, #0
    2f50:	60f8      	str	r0, [r7, #12]
    2f52:	460b      	mov	r3, r1
    2f54:	607a      	str	r2, [r7, #4]
    2f56:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f58:	7afb      	ldrb	r3, [r7, #11]
    2f5a:	68fa      	ldr	r2, [r7, #12]
    2f5c:	01db      	lsls	r3, r3, #7
    2f5e:	4413      	add	r3, r2
    2f60:	3318      	adds	r3, #24
    2f62:	687a      	ldr	r2, [r7, #4]
    2f64:	601a      	str	r2, [r3, #0]
}
    2f66:	bf00      	nop
    2f68:	3714      	adds	r7, #20
    2f6a:	46bd      	mov	sp, r7
    2f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f70:	4770      	bx	lr

00002f72 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2f72:	b480      	push	{r7}
    2f74:	b085      	sub	sp, #20
    2f76:	af00      	add	r7, sp, #0
    2f78:	60f8      	str	r0, [r7, #12]
    2f7a:	460b      	mov	r3, r1
    2f7c:	607a      	str	r2, [r7, #4]
    2f7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f80:	7afb      	ldrb	r3, [r7, #11]
    2f82:	68fa      	ldr	r2, [r7, #12]
    2f84:	01db      	lsls	r3, r3, #7
    2f86:	4413      	add	r3, r2
    2f88:	3314      	adds	r3, #20
    2f8a:	687a      	ldr	r2, [r7, #4]
    2f8c:	601a      	str	r2, [r3, #0]
}
    2f8e:	bf00      	nop
    2f90:	3714      	adds	r7, #20
    2f92:	46bd      	mov	sp, r7
    2f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f98:	4770      	bx	lr

00002f9a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2f9a:	b480      	push	{r7}
    2f9c:	b085      	sub	sp, #20
    2f9e:	af00      	add	r7, sp, #0
    2fa0:	6078      	str	r0, [r7, #4]
    2fa2:	4608      	mov	r0, r1
    2fa4:	4611      	mov	r1, r2
    2fa6:	461a      	mov	r2, r3
    2fa8:	4603      	mov	r3, r0
    2faa:	70fb      	strb	r3, [r7, #3]
    2fac:	460b      	mov	r3, r1
    2fae:	70bb      	strb	r3, [r7, #2]
    2fb0:	4613      	mov	r3, r2
    2fb2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2fb4:	78fa      	ldrb	r2, [r7, #3]
    2fb6:	78bb      	ldrb	r3, [r7, #2]
    2fb8:	6879      	ldr	r1, [r7, #4]
    2fba:	01d2      	lsls	r2, r2, #7
    2fbc:	440a      	add	r2, r1
    2fbe:	4413      	add	r3, r2
    2fc0:	3330      	adds	r3, #48	; 0x30
    2fc2:	781b      	ldrb	r3, [r3, #0]
    2fc4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2fc6:	7bfb      	ldrb	r3, [r7, #15]
    2fc8:	f023 030f 	bic.w	r3, r3, #15
    2fcc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    2fce:	787b      	ldrb	r3, [r7, #1]
    2fd0:	f003 030f 	and.w	r3, r3, #15
    2fd4:	b2da      	uxtb	r2, r3
    2fd6:	7bfb      	ldrb	r3, [r7, #15]
    2fd8:	4313      	orrs	r3, r2
    2fda:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2fdc:	78fa      	ldrb	r2, [r7, #3]
    2fde:	78bb      	ldrb	r3, [r7, #2]
    2fe0:	6879      	ldr	r1, [r7, #4]
    2fe2:	01d2      	lsls	r2, r2, #7
    2fe4:	440a      	add	r2, r1
    2fe6:	4413      	add	r3, r2
    2fe8:	3330      	adds	r3, #48	; 0x30
    2fea:	7bfa      	ldrb	r2, [r7, #15]
    2fec:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2fee:	bf00      	nop
    2ff0:	3714      	adds	r7, #20
    2ff2:	46bd      	mov	sp, r7
    2ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ff8:	4770      	bx	lr

00002ffa <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2ffa:	b480      	push	{r7}
    2ffc:	b085      	sub	sp, #20
    2ffe:	af00      	add	r7, sp, #0
    3000:	6078      	str	r0, [r7, #4]
    3002:	4608      	mov	r0, r1
    3004:	4611      	mov	r1, r2
    3006:	461a      	mov	r2, r3
    3008:	4603      	mov	r3, r0
    300a:	70fb      	strb	r3, [r7, #3]
    300c:	460b      	mov	r3, r1
    300e:	70bb      	strb	r3, [r7, #2]
    3010:	4613      	mov	r3, r2
    3012:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3014:	78fa      	ldrb	r2, [r7, #3]
    3016:	78bb      	ldrb	r3, [r7, #2]
    3018:	6879      	ldr	r1, [r7, #4]
    301a:	01d2      	lsls	r2, r2, #7
    301c:	440a      	add	r2, r1
    301e:	4413      	add	r3, r2
    3020:	3330      	adds	r3, #48	; 0x30
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3026:	7bfb      	ldrb	r3, [r7, #15]
    3028:	f003 030f 	and.w	r3, r3, #15
    302c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    302e:	787b      	ldrb	r3, [r7, #1]
    3030:	011b      	lsls	r3, r3, #4
    3032:	b2da      	uxtb	r2, r3
    3034:	7bfb      	ldrb	r3, [r7, #15]
    3036:	4313      	orrs	r3, r2
    3038:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    303a:	78fa      	ldrb	r2, [r7, #3]
    303c:	78bb      	ldrb	r3, [r7, #2]
    303e:	6879      	ldr	r1, [r7, #4]
    3040:	01d2      	lsls	r2, r2, #7
    3042:	440a      	add	r2, r1
    3044:	4413      	add	r3, r2
    3046:	3330      	adds	r3, #48	; 0x30
    3048:	7bfa      	ldrb	r2, [r7, #15]
    304a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    304c:	bf00      	nop
    304e:	3714      	adds	r7, #20
    3050:	46bd      	mov	sp, r7
    3052:	f85d 7b04 	ldr.w	r7, [sp], #4
    3056:	4770      	bx	lr

00003058 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    3058:	b480      	push	{r7}
    305a:	b085      	sub	sp, #20
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
    3060:	4608      	mov	r0, r1
    3062:	4611      	mov	r1, r2
    3064:	461a      	mov	r2, r3
    3066:	4603      	mov	r3, r0
    3068:	70fb      	strb	r3, [r7, #3]
    306a:	460b      	mov	r3, r1
    306c:	70bb      	strb	r3, [r7, #2]
    306e:	4613      	mov	r3, r2
    3070:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3072:	78fa      	ldrb	r2, [r7, #3]
    3074:	78bb      	ldrb	r3, [r7, #2]
    3076:	6879      	ldr	r1, [r7, #4]
    3078:	01d2      	lsls	r2, r2, #7
    307a:	440a      	add	r2, r1
    307c:	4413      	add	r3, r2
    307e:	3340      	adds	r3, #64	; 0x40
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3084:	7bfb      	ldrb	r3, [r7, #15]
    3086:	f023 0301 	bic.w	r3, r3, #1
    308a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    308c:	787a      	ldrb	r2, [r7, #1]
    308e:	7bfb      	ldrb	r3, [r7, #15]
    3090:	4313      	orrs	r3, r2
    3092:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3094:	78fa      	ldrb	r2, [r7, #3]
    3096:	78bb      	ldrb	r3, [r7, #2]
    3098:	6879      	ldr	r1, [r7, #4]
    309a:	01d2      	lsls	r2, r2, #7
    309c:	440a      	add	r2, r1
    309e:	4413      	add	r3, r2
    30a0:	3340      	adds	r3, #64	; 0x40
    30a2:	7bfa      	ldrb	r2, [r7, #15]
    30a4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    30a6:	bf00      	nop
    30a8:	3714      	adds	r7, #20
    30aa:	46bd      	mov	sp, r7
    30ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    30b0:	4770      	bx	lr

000030b2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    30b2:	b490      	push	{r4, r7}
    30b4:	b082      	sub	sp, #8
    30b6:	af00      	add	r7, sp, #0
    30b8:	6078      	str	r0, [r7, #4]
    30ba:	460b      	mov	r3, r1
    30bc:	70fb      	strb	r3, [r7, #3]
    30be:	4613      	mov	r3, r2
    30c0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    30c2:	78fa      	ldrb	r2, [r7, #3]
    30c4:	78bb      	ldrb	r3, [r7, #2]
    30c6:	78f8      	ldrb	r0, [r7, #3]
    30c8:	78b9      	ldrb	r1, [r7, #2]
    30ca:	687c      	ldr	r4, [r7, #4]
    30cc:	01c0      	lsls	r0, r0, #7
    30ce:	4420      	add	r0, r4
    30d0:	4401      	add	r1, r0
    30d2:	3140      	adds	r1, #64	; 0x40
    30d4:	7809      	ldrb	r1, [r1, #0]
    30d6:	b2c9      	uxtb	r1, r1
    30d8:	f041 0104 	orr.w	r1, r1, #4
    30dc:	b2c8      	uxtb	r0, r1
    30de:	6879      	ldr	r1, [r7, #4]
    30e0:	01d2      	lsls	r2, r2, #7
    30e2:	440a      	add	r2, r1
    30e4:	4413      	add	r3, r2
    30e6:	3340      	adds	r3, #64	; 0x40
    30e8:	4602      	mov	r2, r0
    30ea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    30ec:	bf00      	nop
    30ee:	3708      	adds	r7, #8
    30f0:	46bd      	mov	sp, r7
    30f2:	bc90      	pop	{r4, r7}
    30f4:	4770      	bx	lr

000030f6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    30f6:	b490      	push	{r4, r7}
    30f8:	b082      	sub	sp, #8
    30fa:	af00      	add	r7, sp, #0
    30fc:	6078      	str	r0, [r7, #4]
    30fe:	460b      	mov	r3, r1
    3100:	70fb      	strb	r3, [r7, #3]
    3102:	4613      	mov	r3, r2
    3104:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3106:	78fa      	ldrb	r2, [r7, #3]
    3108:	78bb      	ldrb	r3, [r7, #2]
    310a:	78f8      	ldrb	r0, [r7, #3]
    310c:	78b9      	ldrb	r1, [r7, #2]
    310e:	687c      	ldr	r4, [r7, #4]
    3110:	01c0      	lsls	r0, r0, #7
    3112:	4420      	add	r0, r4
    3114:	4401      	add	r1, r0
    3116:	3140      	adds	r1, #64	; 0x40
    3118:	7809      	ldrb	r1, [r1, #0]
    311a:	b2c9      	uxtb	r1, r1
    311c:	f021 0104 	bic.w	r1, r1, #4
    3120:	b2c8      	uxtb	r0, r1
    3122:	6879      	ldr	r1, [r7, #4]
    3124:	01d2      	lsls	r2, r2, #7
    3126:	440a      	add	r2, r1
    3128:	4413      	add	r3, r2
    312a:	3340      	adds	r3, #64	; 0x40
    312c:	4602      	mov	r2, r0
    312e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3130:	bf00      	nop
    3132:	3708      	adds	r7, #8
    3134:	46bd      	mov	sp, r7
    3136:	bc90      	pop	{r4, r7}
    3138:	4770      	bx	lr

0000313a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    313a:	b480      	push	{r7}
    313c:	b085      	sub	sp, #20
    313e:	af00      	add	r7, sp, #0
    3140:	60f8      	str	r0, [r7, #12]
    3142:	460b      	mov	r3, r1
    3144:	607a      	str	r2, [r7, #4]
    3146:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3148:	7afb      	ldrb	r3, [r7, #11]
    314a:	68fa      	ldr	r2, [r7, #12]
    314c:	01db      	lsls	r3, r3, #7
    314e:	4413      	add	r3, r2
    3150:	3328      	adds	r3, #40	; 0x28
    3152:	687a      	ldr	r2, [r7, #4]
    3154:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3156:	bf00      	nop
    3158:	3714      	adds	r7, #20
    315a:	46bd      	mov	sp, r7
    315c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3160:	4770      	bx	lr
	...

00003164 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    3164:	b580      	push	{r7, lr}
    3166:	b082      	sub	sp, #8
    3168:	af00      	add	r7, sp, #0
    316a:	4603      	mov	r3, r0
    316c:	6039      	str	r1, [r7, #0]
    316e:	71fb      	strb	r3, [r7, #7]
    3170:	4613      	mov	r3, r2
    3172:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    3174:	79bb      	ldrb	r3, [r7, #6]
    3176:	2b01      	cmp	r3, #1
    3178:	d01c      	beq.n	31b4 <_gpio_set_direction+0x50>
    317a:	2b02      	cmp	r3, #2
    317c:	d037      	beq.n	31ee <_gpio_set_direction+0x8a>
    317e:	2b00      	cmp	r3, #0
    3180:	d14e      	bne.n	3220 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3182:	79fb      	ldrb	r3, [r7, #7]
    3184:	683a      	ldr	r2, [r7, #0]
    3186:	4619      	mov	r1, r3
    3188:	482a      	ldr	r0, [pc, #168]	; (3234 <_gpio_set_direction+0xd0>)
    318a:	4b2b      	ldr	r3, [pc, #172]	; (3238 <_gpio_set_direction+0xd4>)
    318c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    318e:	683b      	ldr	r3, [r7, #0]
    3190:	b29b      	uxth	r3, r3
    3192:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3196:	79fb      	ldrb	r3, [r7, #7]
    3198:	4619      	mov	r1, r3
    319a:	4826      	ldr	r0, [pc, #152]	; (3234 <_gpio_set_direction+0xd0>)
    319c:	4b27      	ldr	r3, [pc, #156]	; (323c <_gpio_set_direction+0xd8>)
    319e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    31a0:	683b      	ldr	r3, [r7, #0]
    31a2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    31a4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    31a8:	79fb      	ldrb	r3, [r7, #7]
    31aa:	4619      	mov	r1, r3
    31ac:	4821      	ldr	r0, [pc, #132]	; (3234 <_gpio_set_direction+0xd0>)
    31ae:	4b23      	ldr	r3, [pc, #140]	; (323c <_gpio_set_direction+0xd8>)
    31b0:	4798      	blx	r3
		break;
    31b2:	e03a      	b.n	322a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    31b4:	79fb      	ldrb	r3, [r7, #7]
    31b6:	683a      	ldr	r2, [r7, #0]
    31b8:	4619      	mov	r1, r3
    31ba:	481e      	ldr	r0, [pc, #120]	; (3234 <_gpio_set_direction+0xd0>)
    31bc:	4b1e      	ldr	r3, [pc, #120]	; (3238 <_gpio_set_direction+0xd4>)
    31be:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    31c0:	683b      	ldr	r3, [r7, #0]
    31c2:	b29b      	uxth	r3, r3
    31c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    31c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    31cc:	79f9      	ldrb	r1, [r7, #7]
    31ce:	461a      	mov	r2, r3
    31d0:	4818      	ldr	r0, [pc, #96]	; (3234 <_gpio_set_direction+0xd0>)
    31d2:	4b1a      	ldr	r3, [pc, #104]	; (323c <_gpio_set_direction+0xd8>)
    31d4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    31d6:	683b      	ldr	r3, [r7, #0]
    31d8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    31da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    31de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    31e2:	79f9      	ldrb	r1, [r7, #7]
    31e4:	461a      	mov	r2, r3
    31e6:	4813      	ldr	r0, [pc, #76]	; (3234 <_gpio_set_direction+0xd0>)
    31e8:	4b14      	ldr	r3, [pc, #80]	; (323c <_gpio_set_direction+0xd8>)
    31ea:	4798      	blx	r3
		break;
    31ec:	e01d      	b.n	322a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    31ee:	79fb      	ldrb	r3, [r7, #7]
    31f0:	683a      	ldr	r2, [r7, #0]
    31f2:	4619      	mov	r1, r3
    31f4:	480f      	ldr	r0, [pc, #60]	; (3234 <_gpio_set_direction+0xd0>)
    31f6:	4b12      	ldr	r3, [pc, #72]	; (3240 <_gpio_set_direction+0xdc>)
    31f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    31fa:	683b      	ldr	r3, [r7, #0]
    31fc:	b29b      	uxth	r3, r3
    31fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3202:	79fb      	ldrb	r3, [r7, #7]
    3204:	4619      	mov	r1, r3
    3206:	480b      	ldr	r0, [pc, #44]	; (3234 <_gpio_set_direction+0xd0>)
    3208:	4b0c      	ldr	r3, [pc, #48]	; (323c <_gpio_set_direction+0xd8>)
    320a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    320c:	683b      	ldr	r3, [r7, #0]
    320e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3210:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3214:	79fb      	ldrb	r3, [r7, #7]
    3216:	4619      	mov	r1, r3
    3218:	4806      	ldr	r0, [pc, #24]	; (3234 <_gpio_set_direction+0xd0>)
    321a:	4b08      	ldr	r3, [pc, #32]	; (323c <_gpio_set_direction+0xd8>)
    321c:	4798      	blx	r3
		break;
    321e:	e004      	b.n	322a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    3220:	2246      	movs	r2, #70	; 0x46
    3222:	4908      	ldr	r1, [pc, #32]	; (3244 <_gpio_set_direction+0xe0>)
    3224:	2000      	movs	r0, #0
    3226:	4b08      	ldr	r3, [pc, #32]	; (3248 <_gpio_set_direction+0xe4>)
    3228:	4798      	blx	r3
	}
}
    322a:	bf00      	nop
    322c:	3708      	adds	r7, #8
    322e:	46bd      	mov	sp, r7
    3230:	bd80      	pop	{r7, pc}
    3232:	bf00      	nop
    3234:	41008000 	.word	0x41008000
    3238:	00002f23 	.word	0x00002f23
    323c:	0000313b 	.word	0x0000313b
    3240:	00002efb 	.word	0x00002efb
    3244:	00017028 	.word	0x00017028
    3248:	00006251 	.word	0x00006251

0000324c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    324c:	b580      	push	{r7, lr}
    324e:	b082      	sub	sp, #8
    3250:	af00      	add	r7, sp, #0
    3252:	4603      	mov	r3, r0
    3254:	6039      	str	r1, [r7, #0]
    3256:	71fb      	strb	r3, [r7, #7]
    3258:	4613      	mov	r3, r2
    325a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    325c:	79bb      	ldrb	r3, [r7, #6]
    325e:	2b00      	cmp	r3, #0
    3260:	d006      	beq.n	3270 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3262:	79fb      	ldrb	r3, [r7, #7]
    3264:	683a      	ldr	r2, [r7, #0]
    3266:	4619      	mov	r1, r3
    3268:	4806      	ldr	r0, [pc, #24]	; (3284 <_gpio_set_level+0x38>)
    326a:	4b07      	ldr	r3, [pc, #28]	; (3288 <_gpio_set_level+0x3c>)
    326c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    326e:	e005      	b.n	327c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    3270:	79fb      	ldrb	r3, [r7, #7]
    3272:	683a      	ldr	r2, [r7, #0]
    3274:	4619      	mov	r1, r3
    3276:	4803      	ldr	r0, [pc, #12]	; (3284 <_gpio_set_level+0x38>)
    3278:	4b04      	ldr	r3, [pc, #16]	; (328c <_gpio_set_level+0x40>)
    327a:	4798      	blx	r3
}
    327c:	bf00      	nop
    327e:	3708      	adds	r7, #8
    3280:	46bd      	mov	sp, r7
    3282:	bd80      	pop	{r7, pc}
    3284:	41008000 	.word	0x41008000
    3288:	00002f4b 	.word	0x00002f4b
    328c:	00002f73 	.word	0x00002f73

00003290 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    3290:	b580      	push	{r7, lr}
    3292:	b082      	sub	sp, #8
    3294:	af00      	add	r7, sp, #0
    3296:	4603      	mov	r3, r0
    3298:	71fb      	strb	r3, [r7, #7]
    329a:	460b      	mov	r3, r1
    329c:	71bb      	strb	r3, [r7, #6]
    329e:	4613      	mov	r3, r2
    32a0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    32a2:	797b      	ldrb	r3, [r7, #5]
    32a4:	2b01      	cmp	r3, #1
    32a6:	d00a      	beq.n	32be <_gpio_set_pin_pull_mode+0x2e>
    32a8:	2b02      	cmp	r3, #2
    32aa:	d01f      	beq.n	32ec <_gpio_set_pin_pull_mode+0x5c>
    32ac:	2b00      	cmp	r3, #0
    32ae:	d134      	bne.n	331a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    32b0:	79ba      	ldrb	r2, [r7, #6]
    32b2:	79fb      	ldrb	r3, [r7, #7]
    32b4:	4619      	mov	r1, r3
    32b6:	481e      	ldr	r0, [pc, #120]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    32b8:	4b1e      	ldr	r3, [pc, #120]	; (3334 <_gpio_set_pin_pull_mode+0xa4>)
    32ba:	4798      	blx	r3
		break;
    32bc:	e033      	b.n	3326 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    32be:	79bb      	ldrb	r3, [r7, #6]
    32c0:	2201      	movs	r2, #1
    32c2:	409a      	lsls	r2, r3
    32c4:	79fb      	ldrb	r3, [r7, #7]
    32c6:	4619      	mov	r1, r3
    32c8:	4819      	ldr	r0, [pc, #100]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    32ca:	4b1b      	ldr	r3, [pc, #108]	; (3338 <_gpio_set_pin_pull_mode+0xa8>)
    32cc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    32ce:	79ba      	ldrb	r2, [r7, #6]
    32d0:	79fb      	ldrb	r3, [r7, #7]
    32d2:	4619      	mov	r1, r3
    32d4:	4816      	ldr	r0, [pc, #88]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    32d6:	4b19      	ldr	r3, [pc, #100]	; (333c <_gpio_set_pin_pull_mode+0xac>)
    32d8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    32da:	79bb      	ldrb	r3, [r7, #6]
    32dc:	2201      	movs	r2, #1
    32de:	409a      	lsls	r2, r3
    32e0:	79fb      	ldrb	r3, [r7, #7]
    32e2:	4619      	mov	r1, r3
    32e4:	4812      	ldr	r0, [pc, #72]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    32e6:	4b16      	ldr	r3, [pc, #88]	; (3340 <_gpio_set_pin_pull_mode+0xb0>)
    32e8:	4798      	blx	r3
		break;
    32ea:	e01c      	b.n	3326 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    32ec:	79bb      	ldrb	r3, [r7, #6]
    32ee:	2201      	movs	r2, #1
    32f0:	409a      	lsls	r2, r3
    32f2:	79fb      	ldrb	r3, [r7, #7]
    32f4:	4619      	mov	r1, r3
    32f6:	480e      	ldr	r0, [pc, #56]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    32f8:	4b0f      	ldr	r3, [pc, #60]	; (3338 <_gpio_set_pin_pull_mode+0xa8>)
    32fa:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    32fc:	79ba      	ldrb	r2, [r7, #6]
    32fe:	79fb      	ldrb	r3, [r7, #7]
    3300:	4619      	mov	r1, r3
    3302:	480b      	ldr	r0, [pc, #44]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    3304:	4b0d      	ldr	r3, [pc, #52]	; (333c <_gpio_set_pin_pull_mode+0xac>)
    3306:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    3308:	79bb      	ldrb	r3, [r7, #6]
    330a:	2201      	movs	r2, #1
    330c:	409a      	lsls	r2, r3
    330e:	79fb      	ldrb	r3, [r7, #7]
    3310:	4619      	mov	r1, r3
    3312:	4807      	ldr	r0, [pc, #28]	; (3330 <_gpio_set_pin_pull_mode+0xa0>)
    3314:	4b0b      	ldr	r3, [pc, #44]	; (3344 <_gpio_set_pin_pull_mode+0xb4>)
    3316:	4798      	blx	r3
		break;
    3318:	e005      	b.n	3326 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    331a:	2289      	movs	r2, #137	; 0x89
    331c:	490a      	ldr	r1, [pc, #40]	; (3348 <_gpio_set_pin_pull_mode+0xb8>)
    331e:	2000      	movs	r0, #0
    3320:	4b0a      	ldr	r3, [pc, #40]	; (334c <_gpio_set_pin_pull_mode+0xbc>)
    3322:	4798      	blx	r3
		break;
    3324:	bf00      	nop
	}
}
    3326:	bf00      	nop
    3328:	3708      	adds	r7, #8
    332a:	46bd      	mov	sp, r7
    332c:	bd80      	pop	{r7, pc}
    332e:	bf00      	nop
    3330:	41008000 	.word	0x41008000
    3334:	000030f7 	.word	0x000030f7
    3338:	00002f23 	.word	0x00002f23
    333c:	000030b3 	.word	0x000030b3
    3340:	00002f4b 	.word	0x00002f4b
    3344:	00002f73 	.word	0x00002f73
    3348:	00017028 	.word	0x00017028
    334c:	00006251 	.word	0x00006251

00003350 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3350:	b590      	push	{r4, r7, lr}
    3352:	b085      	sub	sp, #20
    3354:	af00      	add	r7, sp, #0
    3356:	6078      	str	r0, [r7, #4]
    3358:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	095b      	lsrs	r3, r3, #5
    335e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	b2db      	uxtb	r3, r3
    3364:	f003 031f 	and.w	r3, r3, #31
    3368:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    336a:	683b      	ldr	r3, [r7, #0]
    336c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3370:	d106      	bne.n	3380 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3372:	7bba      	ldrb	r2, [r7, #14]
    3374:	7bf9      	ldrb	r1, [r7, #15]
    3376:	2300      	movs	r3, #0
    3378:	4812      	ldr	r0, [pc, #72]	; (33c4 <_gpio_set_pin_function+0x74>)
    337a:	4c13      	ldr	r4, [pc, #76]	; (33c8 <_gpio_set_pin_function+0x78>)
    337c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    337e:	e01d      	b.n	33bc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3380:	7bba      	ldrb	r2, [r7, #14]
    3382:	7bf9      	ldrb	r1, [r7, #15]
    3384:	2301      	movs	r3, #1
    3386:	480f      	ldr	r0, [pc, #60]	; (33c4 <_gpio_set_pin_function+0x74>)
    3388:	4c0f      	ldr	r4, [pc, #60]	; (33c8 <_gpio_set_pin_function+0x78>)
    338a:	47a0      	blx	r4
		if (pin & 1) {
    338c:	7bbb      	ldrb	r3, [r7, #14]
    338e:	f003 0301 	and.w	r3, r3, #1
    3392:	2b00      	cmp	r3, #0
    3394:	d009      	beq.n	33aa <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3396:	7bbb      	ldrb	r3, [r7, #14]
    3398:	085b      	lsrs	r3, r3, #1
    339a:	b2da      	uxtb	r2, r3
    339c:	683b      	ldr	r3, [r7, #0]
    339e:	b2db      	uxtb	r3, r3
    33a0:	7bf9      	ldrb	r1, [r7, #15]
    33a2:	4808      	ldr	r0, [pc, #32]	; (33c4 <_gpio_set_pin_function+0x74>)
    33a4:	4c09      	ldr	r4, [pc, #36]	; (33cc <_gpio_set_pin_function+0x7c>)
    33a6:	47a0      	blx	r4
}
    33a8:	e008      	b.n	33bc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    33aa:	7bbb      	ldrb	r3, [r7, #14]
    33ac:	085b      	lsrs	r3, r3, #1
    33ae:	b2da      	uxtb	r2, r3
    33b0:	683b      	ldr	r3, [r7, #0]
    33b2:	b2db      	uxtb	r3, r3
    33b4:	7bf9      	ldrb	r1, [r7, #15]
    33b6:	4803      	ldr	r0, [pc, #12]	; (33c4 <_gpio_set_pin_function+0x74>)
    33b8:	4c05      	ldr	r4, [pc, #20]	; (33d0 <_gpio_set_pin_function+0x80>)
    33ba:	47a0      	blx	r4
}
    33bc:	bf00      	nop
    33be:	3714      	adds	r7, #20
    33c0:	46bd      	mov	sp, r7
    33c2:	bd90      	pop	{r4, r7, pc}
    33c4:	41008000 	.word	0x41008000
    33c8:	00003059 	.word	0x00003059
    33cc:	00002ffb 	.word	0x00002ffb
    33d0:	00002f9b 	.word	0x00002f9b

000033d4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b082      	sub	sp, #8
    33d8:	af00      	add	r7, sp, #0
    33da:	4603      	mov	r3, r0
    33dc:	460a      	mov	r2, r1
    33de:	71fb      	strb	r3, [r7, #7]
    33e0:	4613      	mov	r3, r2
    33e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    33e4:	79fb      	ldrb	r3, [r7, #7]
    33e6:	095b      	lsrs	r3, r3, #5
    33e8:	b2d8      	uxtb	r0, r3
    33ea:	79fb      	ldrb	r3, [r7, #7]
    33ec:	f003 031f 	and.w	r3, r3, #31
    33f0:	b2db      	uxtb	r3, r3
    33f2:	79ba      	ldrb	r2, [r7, #6]
    33f4:	4619      	mov	r1, r3
    33f6:	4b03      	ldr	r3, [pc, #12]	; (3404 <gpio_set_pin_pull_mode+0x30>)
    33f8:	4798      	blx	r3
}
    33fa:	bf00      	nop
    33fc:	3708      	adds	r7, #8
    33fe:	46bd      	mov	sp, r7
    3400:	bd80      	pop	{r7, pc}
    3402:	bf00      	nop
    3404:	00003291 	.word	0x00003291

00003408 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3408:	b580      	push	{r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
    3410:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3412:	6839      	ldr	r1, [r7, #0]
    3414:	6878      	ldr	r0, [r7, #4]
    3416:	4b03      	ldr	r3, [pc, #12]	; (3424 <gpio_set_pin_function+0x1c>)
    3418:	4798      	blx	r3
}
    341a:	bf00      	nop
    341c:	3708      	adds	r7, #8
    341e:	46bd      	mov	sp, r7
    3420:	bd80      	pop	{r7, pc}
    3422:	bf00      	nop
    3424:	00003351 	.word	0x00003351

00003428 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3428:	b580      	push	{r7, lr}
    342a:	b082      	sub	sp, #8
    342c:	af00      	add	r7, sp, #0
    342e:	4603      	mov	r3, r0
    3430:	460a      	mov	r2, r1
    3432:	71fb      	strb	r3, [r7, #7]
    3434:	4613      	mov	r3, r2
    3436:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3438:	79fb      	ldrb	r3, [r7, #7]
    343a:	095b      	lsrs	r3, r3, #5
    343c:	b2d8      	uxtb	r0, r3
    343e:	79fb      	ldrb	r3, [r7, #7]
    3440:	f003 031f 	and.w	r3, r3, #31
    3444:	2201      	movs	r2, #1
    3446:	fa02 f303 	lsl.w	r3, r2, r3
    344a:	79ba      	ldrb	r2, [r7, #6]
    344c:	4619      	mov	r1, r3
    344e:	4b03      	ldr	r3, [pc, #12]	; (345c <gpio_set_pin_direction+0x34>)
    3450:	4798      	blx	r3
}
    3452:	bf00      	nop
    3454:	3708      	adds	r7, #8
    3456:	46bd      	mov	sp, r7
    3458:	bd80      	pop	{r7, pc}
    345a:	bf00      	nop
    345c:	00003165 	.word	0x00003165

00003460 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3460:	b580      	push	{r7, lr}
    3462:	b082      	sub	sp, #8
    3464:	af00      	add	r7, sp, #0
    3466:	4603      	mov	r3, r0
    3468:	460a      	mov	r2, r1
    346a:	71fb      	strb	r3, [r7, #7]
    346c:	4613      	mov	r3, r2
    346e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3470:	79fb      	ldrb	r3, [r7, #7]
    3472:	095b      	lsrs	r3, r3, #5
    3474:	b2d8      	uxtb	r0, r3
    3476:	79fb      	ldrb	r3, [r7, #7]
    3478:	f003 031f 	and.w	r3, r3, #31
    347c:	2201      	movs	r2, #1
    347e:	fa02 f303 	lsl.w	r3, r2, r3
    3482:	79ba      	ldrb	r2, [r7, #6]
    3484:	4619      	mov	r1, r3
    3486:	4b03      	ldr	r3, [pc, #12]	; (3494 <gpio_set_pin_level+0x34>)
    3488:	4798      	blx	r3
}
    348a:	bf00      	nop
    348c:	3708      	adds	r7, #8
    348e:	46bd      	mov	sp, r7
    3490:	bd80      	pop	{r7, pc}
    3492:	bf00      	nop
    3494:	0000324d 	.word	0x0000324d

00003498 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    3498:	b580      	push	{r7, lr}
    349a:	af00      	add	r7, sp, #0
	_init_chip();
    349c:	4b01      	ldr	r3, [pc, #4]	; (34a4 <init_mcu+0xc>)
    349e:	4798      	blx	r3
}
    34a0:	bf00      	nop
    34a2:	bd80      	pop	{r7, pc}
    34a4:	00006df1 	.word	0x00006df1

000034a8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    34a8:	b580      	push	{r7, lr}
    34aa:	b082      	sub	sp, #8
    34ac:	af00      	add	r7, sp, #0
    34ae:	6078      	str	r0, [r7, #4]
    34b0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d004      	beq.n	34c2 <wdt_init+0x1a>
    34b8:	683b      	ldr	r3, [r7, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d001      	beq.n	34c2 <wdt_init+0x1a>
    34be:	2301      	movs	r3, #1
    34c0:	e000      	b.n	34c4 <wdt_init+0x1c>
    34c2:	2300      	movs	r3, #0
    34c4:	f003 0301 	and.w	r3, r3, #1
    34c8:	b2db      	uxtb	r3, r3
    34ca:	2248      	movs	r2, #72	; 0x48
    34cc:	4907      	ldr	r1, [pc, #28]	; (34ec <wdt_init+0x44>)
    34ce:	4618      	mov	r0, r3
    34d0:	4b07      	ldr	r3, [pc, #28]	; (34f0 <wdt_init+0x48>)
    34d2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	683a      	ldr	r2, [r7, #0]
    34d8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	4618      	mov	r0, r3
    34de:	4b05      	ldr	r3, [pc, #20]	; (34f4 <wdt_init+0x4c>)
    34e0:	4798      	blx	r3
    34e2:	4603      	mov	r3, r0
}
    34e4:	4618      	mov	r0, r3
    34e6:	3708      	adds	r7, #8
    34e8:	46bd      	mov	sp, r7
    34ea:	bd80      	pop	{r7, pc}
    34ec:	00017044 	.word	0x00017044
    34f0:	00006251 	.word	0x00006251
    34f4:	0000df65 	.word	0x0000df65

000034f8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    34fc:	4804      	ldr	r0, [pc, #16]	; (3510 <CRC_CALC_init+0x18>)
    34fe:	4b05      	ldr	r3, [pc, #20]	; (3514 <CRC_CALC_init+0x1c>)
    3500:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3502:	4905      	ldr	r1, [pc, #20]	; (3518 <CRC_CALC_init+0x20>)
    3504:	4805      	ldr	r0, [pc, #20]	; (351c <CRC_CALC_init+0x24>)
    3506:	4b06      	ldr	r3, [pc, #24]	; (3520 <CRC_CALC_init+0x28>)
    3508:	4798      	blx	r3
}
    350a:	bf00      	nop
    350c:	bd80      	pop	{r7, pc}
    350e:	bf00      	nop
    3510:	40000800 	.word	0x40000800
    3514:	00002d9b 	.word	0x00002d9b
    3518:	41002000 	.word	0x41002000
    351c:	2000508c 	.word	0x2000508c
    3520:	00004661 	.word	0x00004661

00003524 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3524:	b580      	push	{r7, lr}
    3526:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3528:	2244      	movs	r2, #68	; 0x44
    352a:	2104      	movs	r1, #4
    352c:	481e      	ldr	r0, [pc, #120]	; (35a8 <EXTERNAL_IRQ_0_init+0x84>)
    352e:	4b1f      	ldr	r3, [pc, #124]	; (35ac <EXTERNAL_IRQ_0_init+0x88>)
    3530:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3532:	481f      	ldr	r0, [pc, #124]	; (35b0 <EXTERNAL_IRQ_0_init+0x8c>)
    3534:	4b1f      	ldr	r3, [pc, #124]	; (35b4 <EXTERNAL_IRQ_0_init+0x90>)
    3536:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    3538:	2101      	movs	r1, #1
    353a:	2004      	movs	r0, #4
    353c:	4b1e      	ldr	r3, [pc, #120]	; (35b8 <EXTERNAL_IRQ_0_init+0x94>)
    353e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    3540:	2102      	movs	r1, #2
    3542:	2004      	movs	r0, #4
    3544:	4b1d      	ldr	r3, [pc, #116]	; (35bc <EXTERNAL_IRQ_0_init+0x98>)
    3546:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    3548:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    354c:	2004      	movs	r0, #4
    354e:	4b1c      	ldr	r3, [pc, #112]	; (35c0 <EXTERNAL_IRQ_0_init+0x9c>)
    3550:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    3552:	2101      	movs	r1, #1
    3554:	2005      	movs	r0, #5
    3556:	4b18      	ldr	r3, [pc, #96]	; (35b8 <EXTERNAL_IRQ_0_init+0x94>)
    3558:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    355a:	2102      	movs	r1, #2
    355c:	2005      	movs	r0, #5
    355e:	4b17      	ldr	r3, [pc, #92]	; (35bc <EXTERNAL_IRQ_0_init+0x98>)
    3560:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    3562:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3566:	2005      	movs	r0, #5
    3568:	4b15      	ldr	r3, [pc, #84]	; (35c0 <EXTERNAL_IRQ_0_init+0x9c>)
    356a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    356c:	2101      	movs	r1, #1
    356e:	2056      	movs	r0, #86	; 0x56
    3570:	4b11      	ldr	r3, [pc, #68]	; (35b8 <EXTERNAL_IRQ_0_init+0x94>)
    3572:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    3574:	2102      	movs	r1, #2
    3576:	2056      	movs	r0, #86	; 0x56
    3578:	4b10      	ldr	r3, [pc, #64]	; (35bc <EXTERNAL_IRQ_0_init+0x98>)
    357a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    357c:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    3580:	2056      	movs	r0, #86	; 0x56
    3582:	4b0f      	ldr	r3, [pc, #60]	; (35c0 <EXTERNAL_IRQ_0_init+0x9c>)
    3584:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    3586:	2101      	movs	r1, #1
    3588:	2057      	movs	r0, #87	; 0x57
    358a:	4b0b      	ldr	r3, [pc, #44]	; (35b8 <EXTERNAL_IRQ_0_init+0x94>)
    358c:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    358e:	2102      	movs	r1, #2
    3590:	2057      	movs	r0, #87	; 0x57
    3592:	4b0a      	ldr	r3, [pc, #40]	; (35bc <EXTERNAL_IRQ_0_init+0x98>)
    3594:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    3596:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    359a:	2057      	movs	r0, #87	; 0x57
    359c:	4b08      	ldr	r3, [pc, #32]	; (35c0 <EXTERNAL_IRQ_0_init+0x9c>)
    359e:	4798      	blx	r3

	ext_irq_init();
    35a0:	4b08      	ldr	r3, [pc, #32]	; (35c4 <EXTERNAL_IRQ_0_init+0xa0>)
    35a2:	4798      	blx	r3
}
    35a4:	bf00      	nop
    35a6:	bd80      	pop	{r7, pc}
    35a8:	40001c00 	.word	0x40001c00
    35ac:	00002bf5 	.word	0x00002bf5
    35b0:	40000800 	.word	0x40000800
    35b4:	00002cdb 	.word	0x00002cdb
    35b8:	00003429 	.word	0x00003429
    35bc:	000033d5 	.word	0x000033d5
    35c0:	00003409 	.word	0x00003409
    35c4:	000047c5 	.word	0x000047c5

000035c8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    35c8:	b580      	push	{r7, lr}
    35ca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    35cc:	2244      	movs	r2, #68	; 0x44
    35ce:	210b      	movs	r1, #11
    35d0:	4804      	ldr	r0, [pc, #16]	; (35e4 <EVENT_SYSTEM_0_init+0x1c>)
    35d2:	4b05      	ldr	r3, [pc, #20]	; (35e8 <EVENT_SYSTEM_0_init+0x20>)
    35d4:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    35d6:	4805      	ldr	r0, [pc, #20]	; (35ec <EVENT_SYSTEM_0_init+0x24>)
    35d8:	4b05      	ldr	r3, [pc, #20]	; (35f0 <EVENT_SYSTEM_0_init+0x28>)
    35da:	4798      	blx	r3

	event_system_init();
    35dc:	4b05      	ldr	r3, [pc, #20]	; (35f4 <EVENT_SYSTEM_0_init+0x2c>)
    35de:	4798      	blx	r3
}
    35e0:	bf00      	nop
    35e2:	bd80      	pop	{r7, pc}
    35e4:	40001c00 	.word	0x40001c00
    35e8:	00002bf5 	.word	0x00002bf5
    35ec:	40000800 	.word	0x40000800
    35f0:	00002dbb 	.word	0x00002dbb
    35f4:	000047b1 	.word	0x000047b1

000035f8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    35f8:	b580      	push	{r7, lr}
    35fa:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    35fc:	2101      	movs	r1, #1
    35fe:	202b      	movs	r0, #43	; 0x2b
    3600:	4b2b      	ldr	r3, [pc, #172]	; (36b0 <QSPI_N25Q256_PORT_init+0xb8>)
    3602:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3604:	2100      	movs	r1, #0
    3606:	202b      	movs	r0, #43	; 0x2b
    3608:	4b2a      	ldr	r3, [pc, #168]	; (36b4 <QSPI_N25Q256_PORT_init+0xbc>)
    360a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    360c:	492a      	ldr	r1, [pc, #168]	; (36b8 <QSPI_N25Q256_PORT_init+0xc0>)
    360e:	202b      	movs	r0, #43	; 0x2b
    3610:	4b2a      	ldr	r3, [pc, #168]	; (36bc <QSPI_N25Q256_PORT_init+0xc4>)
    3612:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3614:	2102      	movs	r1, #2
    3616:	2008      	movs	r0, #8
    3618:	4b25      	ldr	r3, [pc, #148]	; (36b0 <QSPI_N25Q256_PORT_init+0xb8>)
    361a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    361c:	2100      	movs	r1, #0
    361e:	2008      	movs	r0, #8
    3620:	4b27      	ldr	r3, [pc, #156]	; (36c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3622:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3624:	2100      	movs	r1, #0
    3626:	2008      	movs	r0, #8
    3628:	4b22      	ldr	r3, [pc, #136]	; (36b4 <QSPI_N25Q256_PORT_init+0xbc>)
    362a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    362c:	4925      	ldr	r1, [pc, #148]	; (36c4 <QSPI_N25Q256_PORT_init+0xcc>)
    362e:	2008      	movs	r0, #8
    3630:	4b22      	ldr	r3, [pc, #136]	; (36bc <QSPI_N25Q256_PORT_init+0xc4>)
    3632:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3634:	2102      	movs	r1, #2
    3636:	2009      	movs	r0, #9
    3638:	4b1d      	ldr	r3, [pc, #116]	; (36b0 <QSPI_N25Q256_PORT_init+0xb8>)
    363a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    363c:	2100      	movs	r1, #0
    363e:	2009      	movs	r0, #9
    3640:	4b1f      	ldr	r3, [pc, #124]	; (36c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3642:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3644:	2100      	movs	r1, #0
    3646:	2009      	movs	r0, #9
    3648:	4b1a      	ldr	r3, [pc, #104]	; (36b4 <QSPI_N25Q256_PORT_init+0xbc>)
    364a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    364c:	491e      	ldr	r1, [pc, #120]	; (36c8 <QSPI_N25Q256_PORT_init+0xd0>)
    364e:	2009      	movs	r0, #9
    3650:	4b1a      	ldr	r3, [pc, #104]	; (36bc <QSPI_N25Q256_PORT_init+0xc4>)
    3652:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3654:	2102      	movs	r1, #2
    3656:	200a      	movs	r0, #10
    3658:	4b15      	ldr	r3, [pc, #84]	; (36b0 <QSPI_N25Q256_PORT_init+0xb8>)
    365a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    365c:	2100      	movs	r1, #0
    365e:	200a      	movs	r0, #10
    3660:	4b17      	ldr	r3, [pc, #92]	; (36c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3662:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3664:	2100      	movs	r1, #0
    3666:	200a      	movs	r0, #10
    3668:	4b12      	ldr	r3, [pc, #72]	; (36b4 <QSPI_N25Q256_PORT_init+0xbc>)
    366a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    366c:	4917      	ldr	r1, [pc, #92]	; (36cc <QSPI_N25Q256_PORT_init+0xd4>)
    366e:	200a      	movs	r0, #10
    3670:	4b12      	ldr	r3, [pc, #72]	; (36bc <QSPI_N25Q256_PORT_init+0xc4>)
    3672:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    3674:	2102      	movs	r1, #2
    3676:	200b      	movs	r0, #11
    3678:	4b0d      	ldr	r3, [pc, #52]	; (36b0 <QSPI_N25Q256_PORT_init+0xb8>)
    367a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    367c:	2100      	movs	r1, #0
    367e:	200b      	movs	r0, #11
    3680:	4b0f      	ldr	r3, [pc, #60]	; (36c0 <QSPI_N25Q256_PORT_init+0xc8>)
    3682:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    3684:	2100      	movs	r1, #0
    3686:	200b      	movs	r0, #11
    3688:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <QSPI_N25Q256_PORT_init+0xbc>)
    368a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    368c:	4910      	ldr	r1, [pc, #64]	; (36d0 <QSPI_N25Q256_PORT_init+0xd8>)
    368e:	200b      	movs	r0, #11
    3690:	4b0a      	ldr	r3, [pc, #40]	; (36bc <QSPI_N25Q256_PORT_init+0xc4>)
    3692:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    3694:	2101      	movs	r1, #1
    3696:	202a      	movs	r0, #42	; 0x2a
    3698:	4b05      	ldr	r3, [pc, #20]	; (36b0 <QSPI_N25Q256_PORT_init+0xb8>)
    369a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    369c:	2100      	movs	r1, #0
    369e:	202a      	movs	r0, #42	; 0x2a
    36a0:	4b04      	ldr	r3, [pc, #16]	; (36b4 <QSPI_N25Q256_PORT_init+0xbc>)
    36a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    36a4:	490b      	ldr	r1, [pc, #44]	; (36d4 <QSPI_N25Q256_PORT_init+0xdc>)
    36a6:	202a      	movs	r0, #42	; 0x2a
    36a8:	4b04      	ldr	r3, [pc, #16]	; (36bc <QSPI_N25Q256_PORT_init+0xc4>)
    36aa:	4798      	blx	r3
}
    36ac:	bf00      	nop
    36ae:	bd80      	pop	{r7, pc}
    36b0:	00003429 	.word	0x00003429
    36b4:	000033d5 	.word	0x000033d5
    36b8:	002b0007 	.word	0x002b0007
    36bc:	00003409 	.word	0x00003409
    36c0:	00003461 	.word	0x00003461
    36c4:	00080007 	.word	0x00080007
    36c8:	00090007 	.word	0x00090007
    36cc:	000a0007 	.word	0x000a0007
    36d0:	000b0007 	.word	0x000b0007
    36d4:	002a0007 	.word	0x002a0007

000036d8 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    36d8:	b580      	push	{r7, lr}
    36da:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    36dc:	4805      	ldr	r0, [pc, #20]	; (36f4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    36de:	4b06      	ldr	r3, [pc, #24]	; (36f8 <QSPI_N25Q256_CLOCK_init+0x20>)
    36e0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    36e2:	4804      	ldr	r0, [pc, #16]	; (36f4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    36e4:	4b05      	ldr	r3, [pc, #20]	; (36fc <QSPI_N25Q256_CLOCK_init+0x24>)
    36e6:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    36e8:	4802      	ldr	r0, [pc, #8]	; (36f4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    36ea:	4b05      	ldr	r3, [pc, #20]	; (3700 <QSPI_N25Q256_CLOCK_init+0x28>)
    36ec:	4798      	blx	r3
}
    36ee:	bf00      	nop
    36f0:	bd80      	pop	{r7, pc}
    36f2:	bf00      	nop
    36f4:	40000800 	.word	0x40000800
    36f8:	00002c3b 	.word	0x00002c3b
    36fc:	00002c7b 	.word	0x00002c7b
    3700:	00002e5b 	.word	0x00002e5b

00003704 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3704:	b580      	push	{r7, lr}
    3706:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3708:	4b04      	ldr	r3, [pc, #16]	; (371c <QSPI_N25Q256_init+0x18>)
    370a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    370c:	4904      	ldr	r1, [pc, #16]	; (3720 <QSPI_N25Q256_init+0x1c>)
    370e:	4805      	ldr	r0, [pc, #20]	; (3724 <QSPI_N25Q256_init+0x20>)
    3710:	4b05      	ldr	r3, [pc, #20]	; (3728 <QSPI_N25Q256_init+0x24>)
    3712:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3714:	4b05      	ldr	r3, [pc, #20]	; (372c <QSPI_N25Q256_init+0x28>)
    3716:	4798      	blx	r3
}
    3718:	bf00      	nop
    371a:	bd80      	pop	{r7, pc}
    371c:	000036d9 	.word	0x000036d9
    3720:	42003400 	.word	0x42003400
    3724:	20004f14 	.word	0x20004f14
    3728:	00004dcd 	.word	0x00004dcd
    372c:	000035f9 	.word	0x000035f9

00003730 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3730:	b580      	push	{r7, lr}
    3732:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3734:	4802      	ldr	r0, [pc, #8]	; (3740 <DATETIME_CLOCK_CLOCK_init+0x10>)
    3736:	4b03      	ldr	r3, [pc, #12]	; (3744 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3738:	4798      	blx	r3
}
    373a:	bf00      	nop
    373c:	bd80      	pop	{r7, pc}
    373e:	bf00      	nop
    3740:	40000800 	.word	0x40000800
    3744:	00002cbb 	.word	0x00002cbb

00003748 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3748:	b580      	push	{r7, lr}
    374a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    374c:	4b03      	ldr	r3, [pc, #12]	; (375c <DATETIME_CLOCK_init+0x14>)
    374e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3750:	4903      	ldr	r1, [pc, #12]	; (3760 <DATETIME_CLOCK_init+0x18>)
    3752:	4804      	ldr	r0, [pc, #16]	; (3764 <DATETIME_CLOCK_init+0x1c>)
    3754:	4b04      	ldr	r3, [pc, #16]	; (3768 <DATETIME_CLOCK_init+0x20>)
    3756:	4798      	blx	r3
}
    3758:	bf00      	nop
    375a:	bd80      	pop	{r7, pc}
    375c:	00003731 	.word	0x00003731
    3760:	40002400 	.word	0x40002400
    3764:	20005068 	.word	0x20005068
    3768:	00004365 	.word	0x00004365

0000376c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    376c:	b580      	push	{r7, lr}
    376e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    3770:	2100      	movs	r1, #0
    3772:	2051      	movs	r0, #81	; 0x51
    3774:	4b11      	ldr	r3, [pc, #68]	; (37bc <SPI_HI3593_PORT_init+0x50>)
    3776:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    3778:	2102      	movs	r1, #2
    377a:	2051      	movs	r0, #81	; 0x51
    377c:	4b10      	ldr	r3, [pc, #64]	; (37c0 <SPI_HI3593_PORT_init+0x54>)
    377e:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    3780:	4910      	ldr	r1, [pc, #64]	; (37c4 <SPI_HI3593_PORT_init+0x58>)
    3782:	2051      	movs	r0, #81	; 0x51
    3784:	4b10      	ldr	r3, [pc, #64]	; (37c8 <SPI_HI3593_PORT_init+0x5c>)
    3786:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    3788:	2100      	movs	r1, #0
    378a:	2050      	movs	r0, #80	; 0x50
    378c:	4b0b      	ldr	r3, [pc, #44]	; (37bc <SPI_HI3593_PORT_init+0x50>)
    378e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    3790:	2102      	movs	r1, #2
    3792:	2050      	movs	r0, #80	; 0x50
    3794:	4b0a      	ldr	r3, [pc, #40]	; (37c0 <SPI_HI3593_PORT_init+0x54>)
    3796:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    3798:	490c      	ldr	r1, [pc, #48]	; (37cc <SPI_HI3593_PORT_init+0x60>)
    379a:	2050      	movs	r0, #80	; 0x50
    379c:	4b0a      	ldr	r3, [pc, #40]	; (37c8 <SPI_HI3593_PORT_init+0x5c>)
    379e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    37a0:	2101      	movs	r1, #1
    37a2:	2006      	movs	r0, #6
    37a4:	4b06      	ldr	r3, [pc, #24]	; (37c0 <SPI_HI3593_PORT_init+0x54>)
    37a6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    37a8:	2100      	movs	r1, #0
    37aa:	2006      	movs	r0, #6
    37ac:	4b08      	ldr	r3, [pc, #32]	; (37d0 <SPI_HI3593_PORT_init+0x64>)
    37ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    37b0:	4908      	ldr	r1, [pc, #32]	; (37d4 <SPI_HI3593_PORT_init+0x68>)
    37b2:	2006      	movs	r0, #6
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <SPI_HI3593_PORT_init+0x5c>)
    37b6:	4798      	blx	r3
}
    37b8:	bf00      	nop
    37ba:	bd80      	pop	{r7, pc}
    37bc:	00003461 	.word	0x00003461
    37c0:	00003429 	.word	0x00003429
    37c4:	00510003 	.word	0x00510003
    37c8:	00003409 	.word	0x00003409
    37cc:	00500003 	.word	0x00500003
    37d0:	000033d5 	.word	0x000033d5
    37d4:	00060003 	.word	0x00060003

000037d8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    37d8:	b580      	push	{r7, lr}
    37da:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    37dc:	2240      	movs	r2, #64	; 0x40
    37de:	2107      	movs	r1, #7
    37e0:	4806      	ldr	r0, [pc, #24]	; (37fc <SPI_HI3593_CLOCK_init+0x24>)
    37e2:	4b07      	ldr	r3, [pc, #28]	; (3800 <SPI_HI3593_CLOCK_init+0x28>)
    37e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    37e6:	2243      	movs	r2, #67	; 0x43
    37e8:	2103      	movs	r1, #3
    37ea:	4804      	ldr	r0, [pc, #16]	; (37fc <SPI_HI3593_CLOCK_init+0x24>)
    37ec:	4b04      	ldr	r3, [pc, #16]	; (3800 <SPI_HI3593_CLOCK_init+0x28>)
    37ee:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    37f0:	4804      	ldr	r0, [pc, #16]	; (3804 <SPI_HI3593_CLOCK_init+0x2c>)
    37f2:	4b05      	ldr	r3, [pc, #20]	; (3808 <SPI_HI3593_CLOCK_init+0x30>)
    37f4:	4798      	blx	r3
}
    37f6:	bf00      	nop
    37f8:	bd80      	pop	{r7, pc}
    37fa:	bf00      	nop
    37fc:	40001c00 	.word	0x40001c00
    3800:	00002bf5 	.word	0x00002bf5
    3804:	40000800 	.word	0x40000800
    3808:	00002cfb 	.word	0x00002cfb

0000380c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    380c:	b580      	push	{r7, lr}
    380e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3810:	4b04      	ldr	r3, [pc, #16]	; (3824 <SPI_HI3593_init+0x18>)
    3812:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    3814:	4904      	ldr	r1, [pc, #16]	; (3828 <SPI_HI3593_init+0x1c>)
    3816:	4805      	ldr	r0, [pc, #20]	; (382c <SPI_HI3593_init+0x20>)
    3818:	4b05      	ldr	r3, [pc, #20]	; (3830 <SPI_HI3593_init+0x24>)
    381a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    381c:	4b05      	ldr	r3, [pc, #20]	; (3834 <SPI_HI3593_init+0x28>)
    381e:	4798      	blx	r3
}
    3820:	bf00      	nop
    3822:	bd80      	pop	{r7, pc}
    3824:	000037d9 	.word	0x000037d9
    3828:	40003000 	.word	0x40003000
    382c:	20004e98 	.word	0x20004e98
    3830:	000052a9 	.word	0x000052a9
    3834:	0000376d 	.word	0x0000376d

00003838 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    3838:	b580      	push	{r7, lr}
    383a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    383c:	2100      	movs	r1, #0
    383e:	2010      	movs	r0, #16
    3840:	4b11      	ldr	r3, [pc, #68]	; (3888 <SPI_MEMORIES_PORT_init+0x50>)
    3842:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    3844:	2102      	movs	r1, #2
    3846:	2010      	movs	r0, #16
    3848:	4b10      	ldr	r3, [pc, #64]	; (388c <SPI_MEMORIES_PORT_init+0x54>)
    384a:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    384c:	4910      	ldr	r1, [pc, #64]	; (3890 <SPI_MEMORIES_PORT_init+0x58>)
    384e:	2010      	movs	r0, #16
    3850:	4b10      	ldr	r3, [pc, #64]	; (3894 <SPI_MEMORIES_PORT_init+0x5c>)
    3852:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    3854:	2100      	movs	r1, #0
    3856:	2011      	movs	r0, #17
    3858:	4b0b      	ldr	r3, [pc, #44]	; (3888 <SPI_MEMORIES_PORT_init+0x50>)
    385a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    385c:	2102      	movs	r1, #2
    385e:	2011      	movs	r0, #17
    3860:	4b0a      	ldr	r3, [pc, #40]	; (388c <SPI_MEMORIES_PORT_init+0x54>)
    3862:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    3864:	490c      	ldr	r1, [pc, #48]	; (3898 <SPI_MEMORIES_PORT_init+0x60>)
    3866:	2011      	movs	r0, #17
    3868:	4b0a      	ldr	r3, [pc, #40]	; (3894 <SPI_MEMORIES_PORT_init+0x5c>)
    386a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    386c:	2101      	movs	r1, #1
    386e:	2012      	movs	r0, #18
    3870:	4b06      	ldr	r3, [pc, #24]	; (388c <SPI_MEMORIES_PORT_init+0x54>)
    3872:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    3874:	2100      	movs	r1, #0
    3876:	2012      	movs	r0, #18
    3878:	4b08      	ldr	r3, [pc, #32]	; (389c <SPI_MEMORIES_PORT_init+0x64>)
    387a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    387c:	4908      	ldr	r1, [pc, #32]	; (38a0 <SPI_MEMORIES_PORT_init+0x68>)
    387e:	2012      	movs	r0, #18
    3880:	4b04      	ldr	r3, [pc, #16]	; (3894 <SPI_MEMORIES_PORT_init+0x5c>)
    3882:	4798      	blx	r3
}
    3884:	bf00      	nop
    3886:	bd80      	pop	{r7, pc}
    3888:	00003461 	.word	0x00003461
    388c:	00003429 	.word	0x00003429
    3890:	00100002 	.word	0x00100002
    3894:	00003409 	.word	0x00003409
    3898:	00110002 	.word	0x00110002
    389c:	000033d5 	.word	0x000033d5
    38a0:	00120002 	.word	0x00120002

000038a4 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    38a4:	b580      	push	{r7, lr}
    38a6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38a8:	2240      	movs	r2, #64	; 0x40
    38aa:	2108      	movs	r1, #8
    38ac:	4806      	ldr	r0, [pc, #24]	; (38c8 <SPI_MEMORIES_CLOCK_init+0x24>)
    38ae:	4b07      	ldr	r3, [pc, #28]	; (38cc <SPI_MEMORIES_CLOCK_init+0x28>)
    38b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38b2:	2243      	movs	r2, #67	; 0x43
    38b4:	2103      	movs	r1, #3
    38b6:	4804      	ldr	r0, [pc, #16]	; (38c8 <SPI_MEMORIES_CLOCK_init+0x24>)
    38b8:	4b04      	ldr	r3, [pc, #16]	; (38cc <SPI_MEMORIES_CLOCK_init+0x28>)
    38ba:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    38bc:	4804      	ldr	r0, [pc, #16]	; (38d0 <SPI_MEMORIES_CLOCK_init+0x2c>)
    38be:	4b05      	ldr	r3, [pc, #20]	; (38d4 <SPI_MEMORIES_CLOCK_init+0x30>)
    38c0:	4798      	blx	r3
}
    38c2:	bf00      	nop
    38c4:	bd80      	pop	{r7, pc}
    38c6:	bf00      	nop
    38c8:	40001c00 	.word	0x40001c00
    38cc:	00002bf5 	.word	0x00002bf5
    38d0:	40000800 	.word	0x40000800
    38d4:	00002d1b 	.word	0x00002d1b

000038d8 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    38d8:	b580      	push	{r7, lr}
    38da:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    38dc:	4b04      	ldr	r3, [pc, #16]	; (38f0 <SPI_MEMORIES_init+0x18>)
    38de:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    38e0:	4904      	ldr	r1, [pc, #16]	; (38f4 <SPI_MEMORIES_init+0x1c>)
    38e2:	4805      	ldr	r0, [pc, #20]	; (38f8 <SPI_MEMORIES_init+0x20>)
    38e4:	4b05      	ldr	r3, [pc, #20]	; (38fc <SPI_MEMORIES_init+0x24>)
    38e6:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    38e8:	4b05      	ldr	r3, [pc, #20]	; (3900 <SPI_MEMORIES_init+0x28>)
    38ea:	4798      	blx	r3
}
    38ec:	bf00      	nop
    38ee:	bd80      	pop	{r7, pc}
    38f0:	000038a5 	.word	0x000038a5
    38f4:	40003400 	.word	0x40003400
    38f8:	20004e80 	.word	0x20004e80
    38fc:	000052a9 	.word	0x000052a9
    3900:	00003839 	.word	0x00003839

00003904 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3904:	b580      	push	{r7, lr}
    3906:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3908:	2100      	movs	r1, #0
    390a:	203b      	movs	r0, #59	; 0x3b
    390c:	4b11      	ldr	r3, [pc, #68]	; (3954 <SPI_TEMP_PORT_init+0x50>)
    390e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3910:	2102      	movs	r1, #2
    3912:	203b      	movs	r0, #59	; 0x3b
    3914:	4b10      	ldr	r3, [pc, #64]	; (3958 <SPI_TEMP_PORT_init+0x54>)
    3916:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3918:	4910      	ldr	r1, [pc, #64]	; (395c <SPI_TEMP_PORT_init+0x58>)
    391a:	203b      	movs	r0, #59	; 0x3b
    391c:	4b10      	ldr	r3, [pc, #64]	; (3960 <SPI_TEMP_PORT_init+0x5c>)
    391e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    3920:	2100      	movs	r1, #0
    3922:	203a      	movs	r0, #58	; 0x3a
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <SPI_TEMP_PORT_init+0x50>)
    3926:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3928:	2102      	movs	r1, #2
    392a:	203a      	movs	r0, #58	; 0x3a
    392c:	4b0a      	ldr	r3, [pc, #40]	; (3958 <SPI_TEMP_PORT_init+0x54>)
    392e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    3930:	490c      	ldr	r1, [pc, #48]	; (3964 <SPI_TEMP_PORT_init+0x60>)
    3932:	203a      	movs	r0, #58	; 0x3a
    3934:	4b0a      	ldr	r3, [pc, #40]	; (3960 <SPI_TEMP_PORT_init+0x5c>)
    3936:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3938:	2101      	movs	r1, #1
    393a:	203c      	movs	r0, #60	; 0x3c
    393c:	4b06      	ldr	r3, [pc, #24]	; (3958 <SPI_TEMP_PORT_init+0x54>)
    393e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    3940:	2100      	movs	r1, #0
    3942:	203c      	movs	r0, #60	; 0x3c
    3944:	4b08      	ldr	r3, [pc, #32]	; (3968 <SPI_TEMP_PORT_init+0x64>)
    3946:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    3948:	4908      	ldr	r1, [pc, #32]	; (396c <SPI_TEMP_PORT_init+0x68>)
    394a:	203c      	movs	r0, #60	; 0x3c
    394c:	4b04      	ldr	r3, [pc, #16]	; (3960 <SPI_TEMP_PORT_init+0x5c>)
    394e:	4798      	blx	r3
}
    3950:	bf00      	nop
    3952:	bd80      	pop	{r7, pc}
    3954:	00003461 	.word	0x00003461
    3958:	00003429 	.word	0x00003429
    395c:	003b0003 	.word	0x003b0003
    3960:	00003409 	.word	0x00003409
    3964:	003a0003 	.word	0x003a0003
    3968:	000033d5 	.word	0x000033d5
    396c:	003c0003 	.word	0x003c0003

00003970 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3970:	b580      	push	{r7, lr}
    3972:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3974:	2240      	movs	r2, #64	; 0x40
    3976:	2122      	movs	r1, #34	; 0x22
    3978:	4806      	ldr	r0, [pc, #24]	; (3994 <SPI_TEMP_CLOCK_init+0x24>)
    397a:	4b07      	ldr	r3, [pc, #28]	; (3998 <SPI_TEMP_CLOCK_init+0x28>)
    397c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    397e:	2243      	movs	r2, #67	; 0x43
    3980:	2103      	movs	r1, #3
    3982:	4804      	ldr	r0, [pc, #16]	; (3994 <SPI_TEMP_CLOCK_init+0x24>)
    3984:	4b04      	ldr	r3, [pc, #16]	; (3998 <SPI_TEMP_CLOCK_init+0x28>)
    3986:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3988:	4804      	ldr	r0, [pc, #16]	; (399c <SPI_TEMP_CLOCK_init+0x2c>)
    398a:	4b05      	ldr	r3, [pc, #20]	; (39a0 <SPI_TEMP_CLOCK_init+0x30>)
    398c:	4798      	blx	r3
}
    398e:	bf00      	nop
    3990:	bd80      	pop	{r7, pc}
    3992:	bf00      	nop
    3994:	40001c00 	.word	0x40001c00
    3998:	00002bf5 	.word	0x00002bf5
    399c:	40000800 	.word	0x40000800
    39a0:	00002e7b 	.word	0x00002e7b

000039a4 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    39a4:	b580      	push	{r7, lr}
    39a6:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    39a8:	4b05      	ldr	r3, [pc, #20]	; (39c0 <SPI_TEMP_init+0x1c>)
    39aa:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    39ac:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    39b0:	4804      	ldr	r0, [pc, #16]	; (39c4 <SPI_TEMP_init+0x20>)
    39b2:	4b05      	ldr	r3, [pc, #20]	; (39c8 <SPI_TEMP_init+0x24>)
    39b4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    39b6:	4b05      	ldr	r3, [pc, #20]	; (39cc <SPI_TEMP_init+0x28>)
    39b8:	4798      	blx	r3
}
    39ba:	bf00      	nop
    39bc:	bd80      	pop	{r7, pc}
    39be:	bf00      	nop
    39c0:	00003971 	.word	0x00003971
    39c4:	20004eb0 	.word	0x20004eb0
    39c8:	000050f5 	.word	0x000050f5
    39cc:	00003905 	.word	0x00003905

000039d0 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    39d0:	b580      	push	{r7, lr}
    39d2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    39d4:	2100      	movs	r1, #0
    39d6:	2017      	movs	r0, #23
    39d8:	4b07      	ldr	r3, [pc, #28]	; (39f8 <I2C_EXPANDER_PORT_init+0x28>)
    39da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    39dc:	4907      	ldr	r1, [pc, #28]	; (39fc <I2C_EXPANDER_PORT_init+0x2c>)
    39de:	2017      	movs	r0, #23
    39e0:	4b07      	ldr	r3, [pc, #28]	; (3a00 <I2C_EXPANDER_PORT_init+0x30>)
    39e2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    39e4:	2100      	movs	r1, #0
    39e6:	2016      	movs	r0, #22
    39e8:	4b03      	ldr	r3, [pc, #12]	; (39f8 <I2C_EXPANDER_PORT_init+0x28>)
    39ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    39ec:	4905      	ldr	r1, [pc, #20]	; (3a04 <I2C_EXPANDER_PORT_init+0x34>)
    39ee:	2016      	movs	r0, #22
    39f0:	4b03      	ldr	r3, [pc, #12]	; (3a00 <I2C_EXPANDER_PORT_init+0x30>)
    39f2:	4798      	blx	r3
}
    39f4:	bf00      	nop
    39f6:	bd80      	pop	{r7, pc}
    39f8:	000033d5 	.word	0x000033d5
    39fc:	00170003 	.word	0x00170003
    3a00:	00003409 	.word	0x00003409
    3a04:	00160003 	.word	0x00160003

00003a08 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    3a08:	b580      	push	{r7, lr}
    3a0a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a0c:	2242      	movs	r2, #66	; 0x42
    3a0e:	2123      	movs	r1, #35	; 0x23
    3a10:	4806      	ldr	r0, [pc, #24]	; (3a2c <I2C_EXPANDER_CLOCK_init+0x24>)
    3a12:	4b07      	ldr	r3, [pc, #28]	; (3a30 <I2C_EXPANDER_CLOCK_init+0x28>)
    3a14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a16:	2246      	movs	r2, #70	; 0x46
    3a18:	2103      	movs	r1, #3
    3a1a:	4804      	ldr	r0, [pc, #16]	; (3a2c <I2C_EXPANDER_CLOCK_init+0x24>)
    3a1c:	4b04      	ldr	r3, [pc, #16]	; (3a30 <I2C_EXPANDER_CLOCK_init+0x28>)
    3a1e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    3a20:	4804      	ldr	r0, [pc, #16]	; (3a34 <I2C_EXPANDER_CLOCK_init+0x2c>)
    3a22:	4b05      	ldr	r3, [pc, #20]	; (3a38 <I2C_EXPANDER_CLOCK_init+0x30>)
    3a24:	4798      	blx	r3
}
    3a26:	bf00      	nop
    3a28:	bd80      	pop	{r7, pc}
    3a2a:	bf00      	nop
    3a2c:	40001c00 	.word	0x40001c00
    3a30:	00002bf5 	.word	0x00002bf5
    3a34:	40000800 	.word	0x40000800
    3a38:	00002e9b 	.word	0x00002e9b

00003a3c <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    3a40:	4b04      	ldr	r3, [pc, #16]	; (3a54 <I2C_EXPANDER_init+0x18>)
    3a42:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    3a44:	4904      	ldr	r1, [pc, #16]	; (3a58 <I2C_EXPANDER_init+0x1c>)
    3a46:	4805      	ldr	r0, [pc, #20]	; (3a5c <I2C_EXPANDER_init+0x20>)
    3a48:	4b05      	ldr	r3, [pc, #20]	; (3a60 <I2C_EXPANDER_init+0x24>)
    3a4a:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    3a4c:	4b05      	ldr	r3, [pc, #20]	; (3a64 <I2C_EXPANDER_init+0x28>)
    3a4e:	4798      	blx	r3
}
    3a50:	bf00      	nop
    3a52:	bd80      	pop	{r7, pc}
    3a54:	00003a09 	.word	0x00003a09
    3a58:	43000400 	.word	0x43000400
    3a5c:	20004fcc 	.word	0x20004fcc
    3a60:	00004b29 	.word	0x00004b29
    3a64:	000039d1 	.word	0x000039d1

00003a68 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    3a68:	b580      	push	{r7, lr}
    3a6a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3a6c:	2100      	movs	r1, #0
    3a6e:	2068      	movs	r0, #104	; 0x68
    3a70:	4b07      	ldr	r3, [pc, #28]	; (3a90 <I2C_EEPROM_PORT_init+0x28>)
    3a72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    3a74:	4907      	ldr	r1, [pc, #28]	; (3a94 <I2C_EEPROM_PORT_init+0x2c>)
    3a76:	2068      	movs	r0, #104	; 0x68
    3a78:	4b07      	ldr	r3, [pc, #28]	; (3a98 <I2C_EEPROM_PORT_init+0x30>)
    3a7a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3a7c:	2100      	movs	r1, #0
    3a7e:	2069      	movs	r0, #105	; 0x69
    3a80:	4b03      	ldr	r3, [pc, #12]	; (3a90 <I2C_EEPROM_PORT_init+0x28>)
    3a82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3a84:	4905      	ldr	r1, [pc, #20]	; (3a9c <I2C_EEPROM_PORT_init+0x34>)
    3a86:	2069      	movs	r0, #105	; 0x69
    3a88:	4b03      	ldr	r3, [pc, #12]	; (3a98 <I2C_EEPROM_PORT_init+0x30>)
    3a8a:	4798      	blx	r3
}
    3a8c:	bf00      	nop
    3a8e:	bd80      	pop	{r7, pc}
    3a90:	000033d5 	.word	0x000033d5
    3a94:	00680002 	.word	0x00680002
    3a98:	00003409 	.word	0x00003409
    3a9c:	00690002 	.word	0x00690002

00003aa0 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3aa0:	b580      	push	{r7, lr}
    3aa2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3aa4:	2242      	movs	r2, #66	; 0x42
    3aa6:	2125      	movs	r1, #37	; 0x25
    3aa8:	4806      	ldr	r0, [pc, #24]	; (3ac4 <I2C_EEPROM_CLOCK_init+0x24>)
    3aaa:	4b07      	ldr	r3, [pc, #28]	; (3ac8 <I2C_EEPROM_CLOCK_init+0x28>)
    3aac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3aae:	2243      	movs	r2, #67	; 0x43
    3ab0:	2103      	movs	r1, #3
    3ab2:	4804      	ldr	r0, [pc, #16]	; (3ac4 <I2C_EEPROM_CLOCK_init+0x24>)
    3ab4:	4b04      	ldr	r3, [pc, #16]	; (3ac8 <I2C_EEPROM_CLOCK_init+0x28>)
    3ab6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    3ab8:	4804      	ldr	r0, [pc, #16]	; (3acc <I2C_EEPROM_CLOCK_init+0x2c>)
    3aba:	4b05      	ldr	r3, [pc, #20]	; (3ad0 <I2C_EEPROM_CLOCK_init+0x30>)
    3abc:	4798      	blx	r3
}
    3abe:	bf00      	nop
    3ac0:	bd80      	pop	{r7, pc}
    3ac2:	bf00      	nop
    3ac4:	40001c00 	.word	0x40001c00
    3ac8:	00002bf5 	.word	0x00002bf5
    3acc:	40000800 	.word	0x40000800
    3ad0:	00002ebb 	.word	0x00002ebb

00003ad4 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    3ad8:	4b04      	ldr	r3, [pc, #16]	; (3aec <I2C_EEPROM_init+0x18>)
    3ada:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3adc:	4904      	ldr	r1, [pc, #16]	; (3af0 <I2C_EEPROM_init+0x1c>)
    3ade:	4805      	ldr	r0, [pc, #20]	; (3af4 <I2C_EEPROM_init+0x20>)
    3ae0:	4b05      	ldr	r3, [pc, #20]	; (3af8 <I2C_EEPROM_init+0x24>)
    3ae2:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3ae4:	4b05      	ldr	r3, [pc, #20]	; (3afc <I2C_EEPROM_init+0x28>)
    3ae6:	4798      	blx	r3
}
    3ae8:	bf00      	nop
    3aea:	bd80      	pop	{r7, pc}
    3aec:	00003aa1 	.word	0x00003aa1
    3af0:	43000c00 	.word	0x43000c00
    3af4:	20005028 	.word	0x20005028
    3af8:	00004b29 	.word	0x00004b29
    3afc:	00003a69 	.word	0x00003a69

00003b00 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3b04:	4808      	ldr	r0, [pc, #32]	; (3b28 <TIMER_USB_init+0x28>)
    3b06:	4b09      	ldr	r3, [pc, #36]	; (3b2c <TIMER_USB_init+0x2c>)
    3b08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b0a:	2243      	movs	r2, #67	; 0x43
    3b0c:	2109      	movs	r1, #9
    3b0e:	4808      	ldr	r0, [pc, #32]	; (3b30 <TIMER_USB_init+0x30>)
    3b10:	4b08      	ldr	r3, [pc, #32]	; (3b34 <TIMER_USB_init+0x34>)
    3b12:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    3b14:	4b08      	ldr	r3, [pc, #32]	; (3b38 <TIMER_USB_init+0x38>)
    3b16:	4798      	blx	r3
    3b18:	4603      	mov	r3, r0
    3b1a:	461a      	mov	r2, r3
    3b1c:	4907      	ldr	r1, [pc, #28]	; (3b3c <TIMER_USB_init+0x3c>)
    3b1e:	4808      	ldr	r0, [pc, #32]	; (3b40 <TIMER_USB_init+0x40>)
    3b20:	4b08      	ldr	r3, [pc, #32]	; (3b44 <TIMER_USB_init+0x44>)
    3b22:	4798      	blx	r3
}
    3b24:	bf00      	nop
    3b26:	bd80      	pop	{r7, pc}
    3b28:	40000800 	.word	0x40000800
    3b2c:	00002d3b 	.word	0x00002d3b
    3b30:	40001c00 	.word	0x40001c00
    3b34:	00002bf5 	.word	0x00002bf5
    3b38:	0000b3d1 	.word	0x0000b3d1
    3b3c:	40003800 	.word	0x40003800
    3b40:	20004fb0 	.word	0x20004fb0
    3b44:	00005539 	.word	0x00005539

00003b48 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    3b4c:	4808      	ldr	r0, [pc, #32]	; (3b70 <TIMER_EVENT_init+0x28>)
    3b4e:	4b09      	ldr	r3, [pc, #36]	; (3b74 <TIMER_EVENT_init+0x2c>)
    3b50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b52:	2245      	movs	r2, #69	; 0x45
    3b54:	2109      	movs	r1, #9
    3b56:	4808      	ldr	r0, [pc, #32]	; (3b78 <TIMER_EVENT_init+0x30>)
    3b58:	4b08      	ldr	r3, [pc, #32]	; (3b7c <TIMER_EVENT_init+0x34>)
    3b5a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    3b5c:	4b08      	ldr	r3, [pc, #32]	; (3b80 <TIMER_EVENT_init+0x38>)
    3b5e:	4798      	blx	r3
    3b60:	4603      	mov	r3, r0
    3b62:	461a      	mov	r2, r3
    3b64:	4907      	ldr	r1, [pc, #28]	; (3b84 <TIMER_EVENT_init+0x3c>)
    3b66:	4808      	ldr	r0, [pc, #32]	; (3b88 <TIMER_EVENT_init+0x40>)
    3b68:	4b08      	ldr	r3, [pc, #32]	; (3b8c <TIMER_EVENT_init+0x44>)
    3b6a:	4798      	blx	r3
}
    3b6c:	bf00      	nop
    3b6e:	bd80      	pop	{r7, pc}
    3b70:	40000800 	.word	0x40000800
    3b74:	00002d5b 	.word	0x00002d5b
    3b78:	40001c00 	.word	0x40001c00
    3b7c:	00002bf5 	.word	0x00002bf5
    3b80:	0000b3d1 	.word	0x0000b3d1
    3b84:	40003c00 	.word	0x40003c00
    3b88:	20004f18 	.word	0x20004f18
    3b8c:	00005539 	.word	0x00005539

00003b90 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3b94:	4808      	ldr	r0, [pc, #32]	; (3bb8 <TIMER_ARINC_init+0x28>)
    3b96:	4b09      	ldr	r3, [pc, #36]	; (3bbc <TIMER_ARINC_init+0x2c>)
    3b98:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b9a:	2244      	movs	r2, #68	; 0x44
    3b9c:	211a      	movs	r1, #26
    3b9e:	4808      	ldr	r0, [pc, #32]	; (3bc0 <TIMER_ARINC_init+0x30>)
    3ba0:	4b08      	ldr	r3, [pc, #32]	; (3bc4 <TIMER_ARINC_init+0x34>)
    3ba2:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3ba4:	4b08      	ldr	r3, [pc, #32]	; (3bc8 <TIMER_ARINC_init+0x38>)
    3ba6:	4798      	blx	r3
    3ba8:	4603      	mov	r3, r0
    3baa:	461a      	mov	r2, r3
    3bac:	4907      	ldr	r1, [pc, #28]	; (3bcc <TIMER_ARINC_init+0x3c>)
    3bae:	4808      	ldr	r0, [pc, #32]	; (3bd0 <TIMER_ARINC_init+0x40>)
    3bb0:	4b08      	ldr	r3, [pc, #32]	; (3bd4 <TIMER_ARINC_init+0x44>)
    3bb2:	4798      	blx	r3
}
    3bb4:	bf00      	nop
    3bb6:	bd80      	pop	{r7, pc}
    3bb8:	40000800 	.word	0x40000800
    3bbc:	00002ddb 	.word	0x00002ddb
    3bc0:	40001c00 	.word	0x40001c00
    3bc4:	00002bf5 	.word	0x00002bf5
    3bc8:	0000b3d1 	.word	0x0000b3d1
    3bcc:	4101a000 	.word	0x4101a000
    3bd0:	20004f94 	.word	0x20004f94
    3bd4:	00005539 	.word	0x00005539

00003bd8 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3bdc:	4808      	ldr	r0, [pc, #32]	; (3c00 <TIMER_HVAC_init+0x28>)
    3bde:	4b09      	ldr	r3, [pc, #36]	; (3c04 <TIMER_HVAC_init+0x2c>)
    3be0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3be2:	2245      	movs	r2, #69	; 0x45
    3be4:	211a      	movs	r1, #26
    3be6:	4808      	ldr	r0, [pc, #32]	; (3c08 <TIMER_HVAC_init+0x30>)
    3be8:	4b08      	ldr	r3, [pc, #32]	; (3c0c <TIMER_HVAC_init+0x34>)
    3bea:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3bec:	4b08      	ldr	r3, [pc, #32]	; (3c10 <TIMER_HVAC_init+0x38>)
    3bee:	4798      	blx	r3
    3bf0:	4603      	mov	r3, r0
    3bf2:	461a      	mov	r2, r3
    3bf4:	4907      	ldr	r1, [pc, #28]	; (3c14 <TIMER_HVAC_init+0x3c>)
    3bf6:	4808      	ldr	r0, [pc, #32]	; (3c18 <TIMER_HVAC_init+0x40>)
    3bf8:	4b08      	ldr	r3, [pc, #32]	; (3c1c <TIMER_HVAC_init+0x44>)
    3bfa:	4798      	blx	r3
}
    3bfc:	bf00      	nop
    3bfe:	bd80      	pop	{r7, pc}
    3c00:	40000800 	.word	0x40000800
    3c04:	00002dfb 	.word	0x00002dfb
    3c08:	40001c00 	.word	0x40001c00
    3c0c:	00002bf5 	.word	0x00002bf5
    3c10:	0000b3d1 	.word	0x0000b3d1
    3c14:	4101c000 	.word	0x4101c000
    3c18:	2000500c 	.word	0x2000500c
    3c1c:	00005539 	.word	0x00005539

00003c20 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    3c20:	b580      	push	{r7, lr}
    3c22:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    3c24:	4808      	ldr	r0, [pc, #32]	; (3c48 <TIMER_MAINTENANCE_init+0x28>)
    3c26:	4b09      	ldr	r3, [pc, #36]	; (3c4c <TIMER_MAINTENANCE_init+0x2c>)
    3c28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c2a:	2246      	movs	r2, #70	; 0x46
    3c2c:	211e      	movs	r1, #30
    3c2e:	4808      	ldr	r0, [pc, #32]	; (3c50 <TIMER_MAINTENANCE_init+0x30>)
    3c30:	4b08      	ldr	r3, [pc, #32]	; (3c54 <TIMER_MAINTENANCE_init+0x34>)
    3c32:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    3c34:	4b08      	ldr	r3, [pc, #32]	; (3c58 <TIMER_MAINTENANCE_init+0x38>)
    3c36:	4798      	blx	r3
    3c38:	4603      	mov	r3, r0
    3c3a:	461a      	mov	r2, r3
    3c3c:	4907      	ldr	r1, [pc, #28]	; (3c5c <TIMER_MAINTENANCE_init+0x3c>)
    3c3e:	4808      	ldr	r0, [pc, #32]	; (3c60 <TIMER_MAINTENANCE_init+0x40>)
    3c40:	4b08      	ldr	r3, [pc, #32]	; (3c64 <TIMER_MAINTENANCE_init+0x44>)
    3c42:	4798      	blx	r3
}
    3c44:	bf00      	nop
    3c46:	bd80      	pop	{r7, pc}
    3c48:	40000800 	.word	0x40000800
    3c4c:	00002e1b 	.word	0x00002e1b
    3c50:	40001c00 	.word	0x40001c00
    3c54:	00002bf5 	.word	0x00002bf5
    3c58:	0000b3d1 	.word	0x0000b3d1
    3c5c:	42001400 	.word	0x42001400
    3c60:	20004ef8 	.word	0x20004ef8
    3c64:	00005539 	.word	0x00005539

00003c68 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    3c6c:	4808      	ldr	r0, [pc, #32]	; (3c90 <TIMER_INTERFACE_init+0x28>)
    3c6e:	4b09      	ldr	r3, [pc, #36]	; (3c94 <TIMER_INTERFACE_init+0x2c>)
    3c70:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c72:	2246      	movs	r2, #70	; 0x46
    3c74:	211e      	movs	r1, #30
    3c76:	4808      	ldr	r0, [pc, #32]	; (3c98 <TIMER_INTERFACE_init+0x30>)
    3c78:	4b08      	ldr	r3, [pc, #32]	; (3c9c <TIMER_INTERFACE_init+0x34>)
    3c7a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    3c7c:	4b08      	ldr	r3, [pc, #32]	; (3ca0 <TIMER_INTERFACE_init+0x38>)
    3c7e:	4798      	blx	r3
    3c80:	4603      	mov	r3, r0
    3c82:	461a      	mov	r2, r3
    3c84:	4907      	ldr	r1, [pc, #28]	; (3ca4 <TIMER_INTERFACE_init+0x3c>)
    3c86:	4808      	ldr	r0, [pc, #32]	; (3ca8 <TIMER_INTERFACE_init+0x40>)
    3c88:	4b08      	ldr	r3, [pc, #32]	; (3cac <TIMER_INTERFACE_init+0x44>)
    3c8a:	4798      	blx	r3
}
    3c8c:	bf00      	nop
    3c8e:	bd80      	pop	{r7, pc}
    3c90:	40000800 	.word	0x40000800
    3c94:	00002e3b 	.word	0x00002e3b
    3c98:	40001c00 	.word	0x40001c00
    3c9c:	00002bf5 	.word	0x00002bf5
    3ca0:	0000b3d1 	.word	0x0000b3d1
    3ca4:	42001800 	.word	0x42001800
    3ca8:	20004f34 	.word	0x20004f34
    3cac:	00005539 	.word	0x00005539

00003cb0 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3cb0:	b480      	push	{r7}
    3cb2:	af00      	add	r7, sp, #0
}
    3cb4:	bf00      	nop
    3cb6:	46bd      	mov	sp, r7
    3cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbc:	4770      	bx	lr
	...

00003cc0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3cc4:	4804      	ldr	r0, [pc, #16]	; (3cd8 <LIVE_PULSE_CLOCK_init+0x18>)
    3cc6:	4b05      	ldr	r3, [pc, #20]	; (3cdc <LIVE_PULSE_CLOCK_init+0x1c>)
    3cc8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3cca:	224b      	movs	r2, #75	; 0x4b
    3ccc:	2127      	movs	r1, #39	; 0x27
    3cce:	4804      	ldr	r0, [pc, #16]	; (3ce0 <LIVE_PULSE_CLOCK_init+0x20>)
    3cd0:	4b04      	ldr	r3, [pc, #16]	; (3ce4 <LIVE_PULSE_CLOCK_init+0x24>)
    3cd2:	4798      	blx	r3
}
    3cd4:	bf00      	nop
    3cd6:	bd80      	pop	{r7, pc}
    3cd8:	40000800 	.word	0x40000800
    3cdc:	00002edb 	.word	0x00002edb
    3ce0:	40001c00 	.word	0x40001c00
    3ce4:	00002bf5 	.word	0x00002bf5

00003ce8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3cec:	4b06      	ldr	r3, [pc, #24]	; (3d08 <LIVE_PULSE_init+0x20>)
    3cee:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3cf0:	4b06      	ldr	r3, [pc, #24]	; (3d0c <LIVE_PULSE_init+0x24>)
    3cf2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3cf4:	4b06      	ldr	r3, [pc, #24]	; (3d10 <LIVE_PULSE_init+0x28>)
    3cf6:	4798      	blx	r3
    3cf8:	4603      	mov	r3, r0
    3cfa:	461a      	mov	r2, r3
    3cfc:	4905      	ldr	r1, [pc, #20]	; (3d14 <LIVE_PULSE_init+0x2c>)
    3cfe:	4806      	ldr	r0, [pc, #24]	; (3d18 <LIVE_PULSE_init+0x30>)
    3d00:	4b06      	ldr	r3, [pc, #24]	; (3d1c <LIVE_PULSE_init+0x34>)
    3d02:	4798      	blx	r3
}
    3d04:	bf00      	nop
    3d06:	bd80      	pop	{r7, pc}
    3d08:	00003cc1 	.word	0x00003cc1
    3d0c:	00003cb1 	.word	0x00003cb1
    3d10:	0000b3e1 	.word	0x0000b3e1
    3d14:	43001800 	.word	0x43001800
    3d18:	20004f50 	.word	0x20004f50
    3d1c:	00004ccd 	.word	0x00004ccd

00003d20 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3d20:	b580      	push	{r7, lr}
    3d22:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3d24:	2102      	movs	r1, #2
    3d26:	2018      	movs	r0, #24
    3d28:	4b0f      	ldr	r3, [pc, #60]	; (3d68 <CDCUSB_PORT_init+0x48>)
    3d2a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3d2c:	2100      	movs	r1, #0
    3d2e:	2018      	movs	r0, #24
    3d30:	4b0e      	ldr	r3, [pc, #56]	; (3d6c <CDCUSB_PORT_init+0x4c>)
    3d32:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3d34:	2100      	movs	r1, #0
    3d36:	2018      	movs	r0, #24
    3d38:	4b0d      	ldr	r3, [pc, #52]	; (3d70 <CDCUSB_PORT_init+0x50>)
    3d3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3d3c:	490d      	ldr	r1, [pc, #52]	; (3d74 <CDCUSB_PORT_init+0x54>)
    3d3e:	2018      	movs	r0, #24
    3d40:	4b0d      	ldr	r3, [pc, #52]	; (3d78 <CDCUSB_PORT_init+0x58>)
    3d42:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3d44:	2102      	movs	r1, #2
    3d46:	2019      	movs	r0, #25
    3d48:	4b07      	ldr	r3, [pc, #28]	; (3d68 <CDCUSB_PORT_init+0x48>)
    3d4a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3d4c:	2100      	movs	r1, #0
    3d4e:	2019      	movs	r0, #25
    3d50:	4b06      	ldr	r3, [pc, #24]	; (3d6c <CDCUSB_PORT_init+0x4c>)
    3d52:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3d54:	2100      	movs	r1, #0
    3d56:	2019      	movs	r0, #25
    3d58:	4b05      	ldr	r3, [pc, #20]	; (3d70 <CDCUSB_PORT_init+0x50>)
    3d5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3d5c:	4907      	ldr	r1, [pc, #28]	; (3d7c <CDCUSB_PORT_init+0x5c>)
    3d5e:	2019      	movs	r0, #25
    3d60:	4b05      	ldr	r3, [pc, #20]	; (3d78 <CDCUSB_PORT_init+0x58>)
    3d62:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3d64:	bf00      	nop
    3d66:	bd80      	pop	{r7, pc}
    3d68:	00003429 	.word	0x00003429
    3d6c:	00003461 	.word	0x00003461
    3d70:	000033d5 	.word	0x000033d5
    3d74:	00180007 	.word	0x00180007
    3d78:	00003409 	.word	0x00003409
    3d7c:	00190007 	.word	0x00190007

00003d80 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3d80:	b580      	push	{r7, lr}
    3d82:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3d84:	2242      	movs	r2, #66	; 0x42
    3d86:	210a      	movs	r1, #10
    3d88:	4805      	ldr	r0, [pc, #20]	; (3da0 <CDCUSB_CLOCK_init+0x20>)
    3d8a:	4b06      	ldr	r3, [pc, #24]	; (3da4 <CDCUSB_CLOCK_init+0x24>)
    3d8c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3d8e:	4806      	ldr	r0, [pc, #24]	; (3da8 <CDCUSB_CLOCK_init+0x28>)
    3d90:	4b06      	ldr	r3, [pc, #24]	; (3dac <CDCUSB_CLOCK_init+0x2c>)
    3d92:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3d94:	4804      	ldr	r0, [pc, #16]	; (3da8 <CDCUSB_CLOCK_init+0x28>)
    3d96:	4b06      	ldr	r3, [pc, #24]	; (3db0 <CDCUSB_CLOCK_init+0x30>)
    3d98:	4798      	blx	r3
}
    3d9a:	bf00      	nop
    3d9c:	bd80      	pop	{r7, pc}
    3d9e:	bf00      	nop
    3da0:	40001c00 	.word	0x40001c00
    3da4:	00002bf5 	.word	0x00002bf5
    3da8:	40000800 	.word	0x40000800
    3dac:	00002c1b 	.word	0x00002c1b
    3db0:	00002d7b 	.word	0x00002d7b

00003db4 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3db4:	b580      	push	{r7, lr}
    3db6:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3db8:	4b03      	ldr	r3, [pc, #12]	; (3dc8 <CDCUSB_init+0x14>)
    3dba:	4798      	blx	r3
	usb_d_init();
    3dbc:	4b03      	ldr	r3, [pc, #12]	; (3dcc <CDCUSB_init+0x18>)
    3dbe:	4798      	blx	r3
	CDCUSB_PORT_init();
    3dc0:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <CDCUSB_init+0x1c>)
    3dc2:	4798      	blx	r3
}
    3dc4:	bf00      	nop
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	00003d81 	.word	0x00003d81
    3dcc:	00005ca9 	.word	0x00005ca9
    3dd0:	00003d21 	.word	0x00003d21

00003dd4 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3dd8:	4802      	ldr	r0, [pc, #8]	; (3de4 <WATCHDOG_CLOCK_init+0x10>)
    3dda:	4b03      	ldr	r3, [pc, #12]	; (3de8 <WATCHDOG_CLOCK_init+0x14>)
    3ddc:	4798      	blx	r3
}
    3dde:	bf00      	nop
    3de0:	bd80      	pop	{r7, pc}
    3de2:	bf00      	nop
    3de4:	40000800 	.word	0x40000800
    3de8:	00002c9b 	.word	0x00002c9b

00003dec <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3df0:	4b03      	ldr	r3, [pc, #12]	; (3e00 <WATCHDOG_init+0x14>)
    3df2:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3df4:	4903      	ldr	r1, [pc, #12]	; (3e04 <WATCHDOG_init+0x18>)
    3df6:	4804      	ldr	r0, [pc, #16]	; (3e08 <WATCHDOG_init+0x1c>)
    3df8:	4b04      	ldr	r3, [pc, #16]	; (3e0c <WATCHDOG_init+0x20>)
    3dfa:	4798      	blx	r3
}
    3dfc:	bf00      	nop
    3dfe:	bd80      	pop	{r7, pc}
    3e00:	00003dd5 	.word	0x00003dd5
    3e04:	40002000 	.word	0x40002000
    3e08:	20005088 	.word	0x20005088
    3e0c:	000034a9 	.word	0x000034a9

00003e10 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3e14:	4904      	ldr	r1, [pc, #16]	; (3e28 <CAN_CCU_PORT_init+0x18>)
    3e16:	202d      	movs	r0, #45	; 0x2d
    3e18:	4b04      	ldr	r3, [pc, #16]	; (3e2c <CAN_CCU_PORT_init+0x1c>)
    3e1a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3e1c:	4904      	ldr	r1, [pc, #16]	; (3e30 <CAN_CCU_PORT_init+0x20>)
    3e1e:	202c      	movs	r0, #44	; 0x2c
    3e20:	4b02      	ldr	r3, [pc, #8]	; (3e2c <CAN_CCU_PORT_init+0x1c>)
    3e22:	4798      	blx	r3
}
    3e24:	bf00      	nop
    3e26:	bd80      	pop	{r7, pc}
    3e28:	002d0007 	.word	0x002d0007
    3e2c:	00003409 	.word	0x00003409
    3e30:	002c0007 	.word	0x002c0007

00003e34 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3e34:	b580      	push	{r7, lr}
    3e36:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3e38:	4807      	ldr	r0, [pc, #28]	; (3e58 <CAN_CCU_init+0x24>)
    3e3a:	4b08      	ldr	r3, [pc, #32]	; (3e5c <CAN_CCU_init+0x28>)
    3e3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e3e:	2243      	movs	r2, #67	; 0x43
    3e40:	211c      	movs	r1, #28
    3e42:	4807      	ldr	r0, [pc, #28]	; (3e60 <CAN_CCU_init+0x2c>)
    3e44:	4b07      	ldr	r3, [pc, #28]	; (3e64 <CAN_CCU_init+0x30>)
    3e46:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3e48:	4907      	ldr	r1, [pc, #28]	; (3e68 <CAN_CCU_init+0x34>)
    3e4a:	4808      	ldr	r0, [pc, #32]	; (3e6c <CAN_CCU_init+0x38>)
    3e4c:	4b08      	ldr	r3, [pc, #32]	; (3e70 <CAN_CCU_init+0x3c>)
    3e4e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3e50:	4b08      	ldr	r3, [pc, #32]	; (3e74 <CAN_CCU_init+0x40>)
    3e52:	4798      	blx	r3
}
    3e54:	bf00      	nop
    3e56:	bd80      	pop	{r7, pc}
    3e58:	40000800 	.word	0x40000800
    3e5c:	00002c5b 	.word	0x00002c5b
    3e60:	40001c00 	.word	0x40001c00
    3e64:	00002bf5 	.word	0x00002bf5
    3e68:	42000400 	.word	0x42000400
    3e6c:	20004f6c 	.word	0x20004f6c
    3e70:	00004575 	.word	0x00004575
    3e74:	00003e11 	.word	0x00003e11

00003e78 <system_init>:

void system_init(void)
{
    3e78:	b580      	push	{r7, lr}
    3e7a:	af00      	add	r7, sp, #0
	init_mcu();
    3e7c:	4b56      	ldr	r3, [pc, #344]	; (3fd8 <system_init+0x160>)
    3e7e:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    3e80:	2101      	movs	r1, #1
    3e82:	200f      	movs	r0, #15
    3e84:	4b55      	ldr	r3, [pc, #340]	; (3fdc <system_init+0x164>)
    3e86:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    3e88:	2102      	movs	r1, #2
    3e8a:	200f      	movs	r0, #15
    3e8c:	4b54      	ldr	r3, [pc, #336]	; (3fe0 <system_init+0x168>)
    3e8e:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    3e90:	f04f 31ff 	mov.w	r1, #4294967295
    3e94:	200f      	movs	r0, #15
    3e96:	4b53      	ldr	r3, [pc, #332]	; (3fe4 <system_init+0x16c>)
    3e98:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    3e9a:	2101      	movs	r1, #1
    3e9c:	2013      	movs	r0, #19
    3e9e:	4b4f      	ldr	r3, [pc, #316]	; (3fdc <system_init+0x164>)
    3ea0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    3ea2:	2102      	movs	r1, #2
    3ea4:	2013      	movs	r0, #19
    3ea6:	4b4e      	ldr	r3, [pc, #312]	; (3fe0 <system_init+0x168>)
    3ea8:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3eaa:	f04f 31ff 	mov.w	r1, #4294967295
    3eae:	2013      	movs	r0, #19
    3eb0:	4b4c      	ldr	r3, [pc, #304]	; (3fe4 <system_init+0x16c>)
    3eb2:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3eb4:	2101      	movs	r1, #1
    3eb6:	2027      	movs	r0, #39	; 0x27
    3eb8:	4b49      	ldr	r3, [pc, #292]	; (3fe0 <system_init+0x168>)
    3eba:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3ebc:	2102      	movs	r1, #2
    3ebe:	2027      	movs	r0, #39	; 0x27
    3ec0:	4b49      	ldr	r3, [pc, #292]	; (3fe8 <system_init+0x170>)
    3ec2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3ec4:	f04f 31ff 	mov.w	r1, #4294967295
    3ec8:	2027      	movs	r0, #39	; 0x27
    3eca:	4b46      	ldr	r3, [pc, #280]	; (3fe4 <system_init+0x16c>)
    3ecc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3ece:	2101      	movs	r1, #1
    3ed0:	203d      	movs	r0, #61	; 0x3d
    3ed2:	4b42      	ldr	r3, [pc, #264]	; (3fdc <system_init+0x164>)
    3ed4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    3ed6:	2102      	movs	r1, #2
    3ed8:	203d      	movs	r0, #61	; 0x3d
    3eda:	4b41      	ldr	r3, [pc, #260]	; (3fe0 <system_init+0x168>)
    3edc:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    3ede:	f04f 31ff 	mov.w	r1, #4294967295
    3ee2:	203d      	movs	r0, #61	; 0x3d
    3ee4:	4b3f      	ldr	r3, [pc, #252]	; (3fe4 <system_init+0x16c>)
    3ee6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3ee8:	2101      	movs	r1, #1
    3eea:	203f      	movs	r0, #63	; 0x3f
    3eec:	4b3c      	ldr	r3, [pc, #240]	; (3fe0 <system_init+0x168>)
    3eee:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3ef0:	2101      	movs	r1, #1
    3ef2:	203f      	movs	r0, #63	; 0x3f
    3ef4:	4b3c      	ldr	r3, [pc, #240]	; (3fe8 <system_init+0x170>)
    3ef6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3ef8:	f04f 31ff 	mov.w	r1, #4294967295
    3efc:	203f      	movs	r0, #63	; 0x3f
    3efe:	4b39      	ldr	r3, [pc, #228]	; (3fe4 <system_init+0x16c>)
    3f00:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    3f02:	2101      	movs	r1, #1
    3f04:	2040      	movs	r0, #64	; 0x40
    3f06:	4b36      	ldr	r3, [pc, #216]	; (3fe0 <system_init+0x168>)
    3f08:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3f0a:	2102      	movs	r1, #2
    3f0c:	2040      	movs	r0, #64	; 0x40
    3f0e:	4b36      	ldr	r3, [pc, #216]	; (3fe8 <system_init+0x170>)
    3f10:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    3f12:	f04f 31ff 	mov.w	r1, #4294967295
    3f16:	2040      	movs	r0, #64	; 0x40
    3f18:	4b32      	ldr	r3, [pc, #200]	; (3fe4 <system_init+0x16c>)
    3f1a:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    3f1c:	2100      	movs	r1, #0
    3f1e:	204d      	movs	r0, #77	; 0x4d
    3f20:	4b2e      	ldr	r3, [pc, #184]	; (3fdc <system_init+0x164>)
    3f22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    3f24:	2102      	movs	r1, #2
    3f26:	204d      	movs	r0, #77	; 0x4d
    3f28:	4b2d      	ldr	r3, [pc, #180]	; (3fe0 <system_init+0x168>)
    3f2a:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    3f2c:	f04f 31ff 	mov.w	r1, #4294967295
    3f30:	204d      	movs	r0, #77	; 0x4d
    3f32:	4b2c      	ldr	r3, [pc, #176]	; (3fe4 <system_init+0x16c>)
    3f34:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    3f36:	2101      	movs	r1, #1
    3f38:	204e      	movs	r0, #78	; 0x4e
    3f3a:	4b28      	ldr	r3, [pc, #160]	; (3fdc <system_init+0x164>)
    3f3c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3f3e:	2102      	movs	r1, #2
    3f40:	204e      	movs	r0, #78	; 0x4e
    3f42:	4b27      	ldr	r3, [pc, #156]	; (3fe0 <system_init+0x168>)
    3f44:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    3f46:	f04f 31ff 	mov.w	r1, #4294967295
    3f4a:	204e      	movs	r0, #78	; 0x4e
    3f4c:	4b25      	ldr	r3, [pc, #148]	; (3fe4 <system_init+0x16c>)
    3f4e:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3f50:	2100      	movs	r1, #0
    3f52:	204f      	movs	r0, #79	; 0x4f
    3f54:	4b21      	ldr	r3, [pc, #132]	; (3fdc <system_init+0x164>)
    3f56:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3f58:	2102      	movs	r1, #2
    3f5a:	204f      	movs	r0, #79	; 0x4f
    3f5c:	4b20      	ldr	r3, [pc, #128]	; (3fe0 <system_init+0x168>)
    3f5e:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3f60:	f04f 31ff 	mov.w	r1, #4294967295
    3f64:	204f      	movs	r0, #79	; 0x4f
    3f66:	4b1f      	ldr	r3, [pc, #124]	; (3fe4 <system_init+0x16c>)
    3f68:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3f6a:	2100      	movs	r1, #0
    3f6c:	2052      	movs	r0, #82	; 0x52
    3f6e:	4b1b      	ldr	r3, [pc, #108]	; (3fdc <system_init+0x164>)
    3f70:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3f72:	2102      	movs	r1, #2
    3f74:	2052      	movs	r0, #82	; 0x52
    3f76:	4b1a      	ldr	r3, [pc, #104]	; (3fe0 <system_init+0x168>)
    3f78:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3f7a:	f04f 31ff 	mov.w	r1, #4294967295
    3f7e:	2052      	movs	r0, #82	; 0x52
    3f80:	4b18      	ldr	r3, [pc, #96]	; (3fe4 <system_init+0x16c>)
    3f82:	4798      	blx	r3

	CRC_CALC_init();
    3f84:	4b19      	ldr	r3, [pc, #100]	; (3fec <system_init+0x174>)
    3f86:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3f88:	4b19      	ldr	r3, [pc, #100]	; (3ff0 <system_init+0x178>)
    3f8a:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3f8c:	4b19      	ldr	r3, [pc, #100]	; (3ff4 <system_init+0x17c>)
    3f8e:	4798      	blx	r3

	QSPI_N25Q256_init();
    3f90:	4b19      	ldr	r3, [pc, #100]	; (3ff8 <system_init+0x180>)
    3f92:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3f94:	4b19      	ldr	r3, [pc, #100]	; (3ffc <system_init+0x184>)
    3f96:	4798      	blx	r3

	SPI_HI3593_init();
    3f98:	4b19      	ldr	r3, [pc, #100]	; (4000 <system_init+0x188>)
    3f9a:	4798      	blx	r3

	SPI_MEMORIES_init();
    3f9c:	4b19      	ldr	r3, [pc, #100]	; (4004 <system_init+0x18c>)
    3f9e:	4798      	blx	r3

	SPI_TEMP_init();
    3fa0:	4b19      	ldr	r3, [pc, #100]	; (4008 <system_init+0x190>)
    3fa2:	4798      	blx	r3

	I2C_EXPANDER_init();
    3fa4:	4b19      	ldr	r3, [pc, #100]	; (400c <system_init+0x194>)
    3fa6:	4798      	blx	r3

	I2C_EEPROM_init();
    3fa8:	4b19      	ldr	r3, [pc, #100]	; (4010 <system_init+0x198>)
    3faa:	4798      	blx	r3

	TIMER_USB_init();
    3fac:	4b19      	ldr	r3, [pc, #100]	; (4014 <system_init+0x19c>)
    3fae:	4798      	blx	r3
	TIMER_EVENT_init();
    3fb0:	4b19      	ldr	r3, [pc, #100]	; (4018 <system_init+0x1a0>)
    3fb2:	4798      	blx	r3
	TIMER_ARINC_init();
    3fb4:	4b19      	ldr	r3, [pc, #100]	; (401c <system_init+0x1a4>)
    3fb6:	4798      	blx	r3
	TIMER_HVAC_init();
    3fb8:	4b19      	ldr	r3, [pc, #100]	; (4020 <system_init+0x1a8>)
    3fba:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    3fbc:	4b19      	ldr	r3, [pc, #100]	; (4024 <system_init+0x1ac>)
    3fbe:	4798      	blx	r3
	TIMER_INTERFACE_init();
    3fc0:	4b19      	ldr	r3, [pc, #100]	; (4028 <system_init+0x1b0>)
    3fc2:	4798      	blx	r3
	LIVE_PULSE_init();
    3fc4:	4b19      	ldr	r3, [pc, #100]	; (402c <system_init+0x1b4>)
    3fc6:	4798      	blx	r3

	CDCUSB_init();
    3fc8:	4b19      	ldr	r3, [pc, #100]	; (4030 <system_init+0x1b8>)
    3fca:	4798      	blx	r3

	WATCHDOG_init();
    3fcc:	4b19      	ldr	r3, [pc, #100]	; (4034 <system_init+0x1bc>)
    3fce:	4798      	blx	r3
	CAN_CCU_init();
    3fd0:	4b19      	ldr	r3, [pc, #100]	; (4038 <system_init+0x1c0>)
    3fd2:	4798      	blx	r3
}
    3fd4:	bf00      	nop
    3fd6:	bd80      	pop	{r7, pc}
    3fd8:	00003499 	.word	0x00003499
    3fdc:	00003461 	.word	0x00003461
    3fe0:	00003429 	.word	0x00003429
    3fe4:	00003409 	.word	0x00003409
    3fe8:	000033d5 	.word	0x000033d5
    3fec:	000034f9 	.word	0x000034f9
    3ff0:	00003525 	.word	0x00003525
    3ff4:	000035c9 	.word	0x000035c9
    3ff8:	00003705 	.word	0x00003705
    3ffc:	00003749 	.word	0x00003749
    4000:	0000380d 	.word	0x0000380d
    4004:	000038d9 	.word	0x000038d9
    4008:	000039a5 	.word	0x000039a5
    400c:	00003a3d 	.word	0x00003a3d
    4010:	00003ad5 	.word	0x00003ad5
    4014:	00003b01 	.word	0x00003b01
    4018:	00003b49 	.word	0x00003b49
    401c:	00003b91 	.word	0x00003b91
    4020:	00003bd9 	.word	0x00003bd9
    4024:	00003c21 	.word	0x00003c21
    4028:	00003c69 	.word	0x00003c69
    402c:	00003ce9 	.word	0x00003ce9
    4030:	00003db5 	.word	0x00003db5
    4034:	00003ded 	.word	0x00003ded
    4038:	00003e35 	.word	0x00003e35

0000403c <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    403c:	b480      	push	{r7}
    403e:	b083      	sub	sp, #12
    4040:	af00      	add	r7, sp, #0
    4042:	4603      	mov	r3, r0
    4044:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    4046:	88fb      	ldrh	r3, [r7, #6]
    4048:	f003 0303 	and.w	r3, r3, #3
    404c:	2b00      	cmp	r3, #0
    404e:	d001      	beq.n	4054 <leap_year+0x18>
		return false;
    4050:	2300      	movs	r3, #0
    4052:	e000      	b.n	4056 <leap_year+0x1a>
	} else {
		return true;
    4054:	2301      	movs	r3, #1
	}
}
    4056:	4618      	mov	r0, r3
    4058:	370c      	adds	r7, #12
    405a:	46bd      	mov	sp, r7
    405c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4060:	4770      	bx	lr
	...

00004064 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    4064:	b580      	push	{r7, lr}
    4066:	b084      	sub	sp, #16
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
    406c:	460b      	mov	r3, r1
    406e:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    4070:	2300      	movs	r3, #0
    4072:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	b29b      	uxth	r3, r3
    4078:	4618      	mov	r0, r3
    407a:	4b2f      	ldr	r3, [pc, #188]	; (4138 <get_secs_in_month+0xd4>)
    407c:	4798      	blx	r3
    407e:	4603      	mov	r3, r0
    4080:	2b00      	cmp	r3, #0
    4082:	d028      	beq.n	40d6 <get_secs_in_month+0x72>
		switch (month) {
    4084:	78fb      	ldrb	r3, [r7, #3]
    4086:	3b01      	subs	r3, #1
    4088:	2b0b      	cmp	r3, #11
    408a:	d84c      	bhi.n	4126 <get_secs_in_month+0xc2>
    408c:	a201      	add	r2, pc, #4	; (adr r2, 4094 <get_secs_in_month+0x30>)
    408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4092:	bf00      	nop
    4094:	000040c5 	.word	0x000040c5
    4098:	000040cb 	.word	0x000040cb
    409c:	000040c5 	.word	0x000040c5
    40a0:	000040d1 	.word	0x000040d1
    40a4:	000040c5 	.word	0x000040c5
    40a8:	000040d1 	.word	0x000040d1
    40ac:	000040c5 	.word	0x000040c5
    40b0:	000040c5 	.word	0x000040c5
    40b4:	000040d1 	.word	0x000040d1
    40b8:	000040c5 	.word	0x000040c5
    40bc:	000040d1 	.word	0x000040d1
    40c0:	000040c5 	.word	0x000040c5
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    40c4:	4b1d      	ldr	r3, [pc, #116]	; (413c <get_secs_in_month+0xd8>)
    40c6:	60fb      	str	r3, [r7, #12]
			break;
    40c8:	e030      	b.n	412c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    40ca:	4b1d      	ldr	r3, [pc, #116]	; (4140 <get_secs_in_month+0xdc>)
    40cc:	60fb      	str	r3, [r7, #12]
			break;
    40ce:	e02d      	b.n	412c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    40d0:	4b1c      	ldr	r3, [pc, #112]	; (4144 <get_secs_in_month+0xe0>)
    40d2:	60fb      	str	r3, [r7, #12]
			break;
    40d4:	e02a      	b.n	412c <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    40d6:	78fb      	ldrb	r3, [r7, #3]
    40d8:	3b01      	subs	r3, #1
    40da:	2b0b      	cmp	r3, #11
    40dc:	d825      	bhi.n	412a <get_secs_in_month+0xc6>
    40de:	a201      	add	r2, pc, #4	; (adr r2, 40e4 <get_secs_in_month+0x80>)
    40e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    40e4:	00004115 	.word	0x00004115
    40e8:	0000411b 	.word	0x0000411b
    40ec:	00004115 	.word	0x00004115
    40f0:	00004121 	.word	0x00004121
    40f4:	00004115 	.word	0x00004115
    40f8:	00004121 	.word	0x00004121
    40fc:	00004115 	.word	0x00004115
    4100:	00004115 	.word	0x00004115
    4104:	00004121 	.word	0x00004121
    4108:	00004115 	.word	0x00004115
    410c:	00004121 	.word	0x00004121
    4110:	00004115 	.word	0x00004115
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4114:	4b09      	ldr	r3, [pc, #36]	; (413c <get_secs_in_month+0xd8>)
    4116:	60fb      	str	r3, [r7, #12]
			break;
    4118:	e008      	b.n	412c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    411a:	4b0b      	ldr	r3, [pc, #44]	; (4148 <get_secs_in_month+0xe4>)
    411c:	60fb      	str	r3, [r7, #12]
			break;
    411e:	e005      	b.n	412c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4120:	4b08      	ldr	r3, [pc, #32]	; (4144 <get_secs_in_month+0xe0>)
    4122:	60fb      	str	r3, [r7, #12]
			break;
    4124:	e002      	b.n	412c <get_secs_in_month+0xc8>
			break;
    4126:	bf00      	nop
    4128:	e000      	b.n	412c <get_secs_in_month+0xc8>
		default:
			break;
    412a:	bf00      	nop
		}
	}

	return sec_in_month;
    412c:	68fb      	ldr	r3, [r7, #12]
}
    412e:	4618      	mov	r0, r3
    4130:	3710      	adds	r7, #16
    4132:	46bd      	mov	sp, r7
    4134:	bd80      	pop	{r7, pc}
    4136:	bf00      	nop
    4138:	0000403d 	.word	0x0000403d
    413c:	0028de80 	.word	0x0028de80
    4140:	00263b80 	.word	0x00263b80
    4144:	00278d00 	.word	0x00278d00
    4148:	0024ea00 	.word	0x0024ea00

0000414c <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    414c:	b580      	push	{r7, lr}
    414e:	b08a      	sub	sp, #40	; 0x28
    4150:	af00      	add	r7, sp, #0
    4152:	60f8      	str	r0, [r7, #12]
    4154:	60b9      	str	r1, [r7, #8]
    4156:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4158:	68fb      	ldr	r3, [r7, #12]
    415a:	699b      	ldr	r3, [r3, #24]
    415c:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    415e:	2301      	movs	r3, #1
    4160:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    4162:	2301      	movs	r3, #1
    4164:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4166:	2300      	movs	r3, #0
    4168:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    416a:	2300      	movs	r3, #0
    416c:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    416e:	68bb      	ldr	r3, [r7, #8]
    4170:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    4172:	6a3b      	ldr	r3, [r7, #32]
    4174:	b29b      	uxth	r3, r3
    4176:	4618      	mov	r0, r3
    4178:	4b32      	ldr	r3, [pc, #200]	; (4244 <convert_timestamp_to_datetime+0xf8>)
    417a:	4798      	blx	r3
    417c:	4603      	mov	r3, r0
    417e:	2b00      	cmp	r3, #0
    4180:	d001      	beq.n	4186 <convert_timestamp_to_datetime+0x3a>
    4182:	4b31      	ldr	r3, [pc, #196]	; (4248 <convert_timestamp_to_datetime+0xfc>)
    4184:	e000      	b.n	4188 <convert_timestamp_to_datetime+0x3c>
    4186:	4b31      	ldr	r3, [pc, #196]	; (424c <convert_timestamp_to_datetime+0x100>)
    4188:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    418c:	69bb      	ldr	r3, [r7, #24]
    418e:	429a      	cmp	r2, r3
    4190:	d307      	bcc.n	41a2 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    4192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4194:	69bb      	ldr	r3, [r7, #24]
    4196:	1ad3      	subs	r3, r2, r3
    4198:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    419a:	6a3b      	ldr	r3, [r7, #32]
    419c:	3301      	adds	r3, #1
    419e:	623b      	str	r3, [r7, #32]
    41a0:	e7e7      	b.n	4172 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    41a2:	7ffb      	ldrb	r3, [r7, #31]
    41a4:	4619      	mov	r1, r3
    41a6:	6a38      	ldr	r0, [r7, #32]
    41a8:	4b29      	ldr	r3, [pc, #164]	; (4250 <convert_timestamp_to_datetime+0x104>)
    41aa:	4798      	blx	r3
    41ac:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    41ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    41b0:	697b      	ldr	r3, [r7, #20]
    41b2:	429a      	cmp	r2, r3
    41b4:	d307      	bcc.n	41c6 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    41b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	1ad3      	subs	r3, r2, r3
    41bc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    41be:	7ffb      	ldrb	r3, [r7, #31]
    41c0:	3301      	adds	r3, #1
    41c2:	77fb      	strb	r3, [r7, #31]
    41c4:	e7ed      	b.n	41a2 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    41c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41c8:	4a22      	ldr	r2, [pc, #136]	; (4254 <convert_timestamp_to_datetime+0x108>)
    41ca:	4293      	cmp	r3, r2
    41cc:	d909      	bls.n	41e2 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    41ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41d0:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    41d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    41d8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    41da:	7fbb      	ldrb	r3, [r7, #30]
    41dc:	3301      	adds	r3, #1
    41de:	77bb      	strb	r3, [r7, #30]
    41e0:	e7f1      	b.n	41c6 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    41e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41e4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    41e8:	d307      	bcc.n	41fa <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    41ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41ec:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    41f0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    41f2:	7f7b      	ldrb	r3, [r7, #29]
    41f4:	3301      	adds	r3, #1
    41f6:	777b      	strb	r3, [r7, #29]
    41f8:	e7f3      	b.n	41e2 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    41fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41fc:	2b3b      	cmp	r3, #59	; 0x3b
    41fe:	d906      	bls.n	420e <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    4200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4202:	3b3c      	subs	r3, #60	; 0x3c
    4204:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    4206:	7f3b      	ldrb	r3, [r7, #28]
    4208:	3301      	adds	r3, #1
    420a:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    420c:	e7f5      	b.n	41fa <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    420e:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    4210:	6a3b      	ldr	r3, [r7, #32]
    4212:	b29a      	uxth	r2, r3
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	7ffa      	ldrb	r2, [r7, #31]
    421c:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	7fba      	ldrb	r2, [r7, #30]
    4222:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	7f7a      	ldrb	r2, [r7, #29]
    4228:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	7f3a      	ldrb	r2, [r7, #28]
    422e:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    4230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4232:	b2da      	uxtb	r2, r3
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    4238:	2300      	movs	r3, #0
}
    423a:	4618      	mov	r0, r3
    423c:	3728      	adds	r7, #40	; 0x28
    423e:	46bd      	mov	sp, r7
    4240:	bd80      	pop	{r7, pc}
    4242:	bf00      	nop
    4244:	0000403d 	.word	0x0000403d
    4248:	01e28500 	.word	0x01e28500
    424c:	01e13380 	.word	0x01e13380
    4250:	00004065 	.word	0x00004065
    4254:	0001517f 	.word	0x0001517f

00004258 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    4258:	b580      	push	{r7, lr}
    425a:	b086      	sub	sp, #24
    425c:	af00      	add	r7, sp, #0
    425e:	6078      	str	r0, [r7, #4]
    4260:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    4262:	2300      	movs	r3, #0
    4264:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    4266:	2300      	movs	r3, #0
    4268:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    426a:	683b      	ldr	r3, [r7, #0]
    426c:	88db      	ldrh	r3, [r3, #6]
    426e:	b2da      	uxtb	r2, r3
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	699b      	ldr	r3, [r3, #24]
    4274:	b2db      	uxtb	r3, r3
    4276:	1ad3      	subs	r3, r2, r3
    4278:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    427a:	683b      	ldr	r3, [r7, #0]
    427c:	795b      	ldrb	r3, [r3, #5]
    427e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    4280:	683b      	ldr	r3, [r7, #0]
    4282:	791b      	ldrb	r3, [r3, #4]
    4284:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	789b      	ldrb	r3, [r3, #2]
    428a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    428c:	683b      	ldr	r3, [r7, #0]
    428e:	785b      	ldrb	r3, [r3, #1]
    4290:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    4292:	683b      	ldr	r3, [r7, #0]
    4294:	781b      	ldrb	r3, [r3, #0]
    4296:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    4298:	2300      	movs	r3, #0
    429a:	613b      	str	r3, [r7, #16]
    429c:	e01a      	b.n	42d4 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	699b      	ldr	r3, [r3, #24]
    42a2:	b29a      	uxth	r2, r3
    42a4:	693b      	ldr	r3, [r7, #16]
    42a6:	b29b      	uxth	r3, r3
    42a8:	4413      	add	r3, r2
    42aa:	b29b      	uxth	r3, r3
    42ac:	4618      	mov	r0, r3
    42ae:	4b29      	ldr	r3, [pc, #164]	; (4354 <convert_datetime_to_timestamp+0xfc>)
    42b0:	4798      	blx	r3
    42b2:	4603      	mov	r3, r0
    42b4:	2b00      	cmp	r3, #0
    42b6:	d006      	beq.n	42c6 <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    42b8:	697b      	ldr	r3, [r7, #20]
    42ba:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    42be:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    42c2:	617b      	str	r3, [r7, #20]
    42c4:	e003      	b.n	42ce <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    42c6:	697a      	ldr	r2, [r7, #20]
    42c8:	4b23      	ldr	r3, [pc, #140]	; (4358 <convert_datetime_to_timestamp+0x100>)
    42ca:	4413      	add	r3, r2
    42cc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    42ce:	693b      	ldr	r3, [r7, #16]
    42d0:	3301      	adds	r3, #1
    42d2:	613b      	str	r3, [r7, #16]
    42d4:	7bfa      	ldrb	r2, [r7, #15]
    42d6:	693b      	ldr	r3, [r7, #16]
    42d8:	429a      	cmp	r2, r3
    42da:	d8e0      	bhi.n	429e <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    42dc:	2301      	movs	r3, #1
    42de:	613b      	str	r3, [r7, #16]
    42e0:	e00f      	b.n	4302 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    42e2:	683b      	ldr	r3, [r7, #0]
    42e4:	88db      	ldrh	r3, [r3, #6]
    42e6:	461a      	mov	r2, r3
    42e8:	693b      	ldr	r3, [r7, #16]
    42ea:	b2db      	uxtb	r3, r3
    42ec:	4619      	mov	r1, r3
    42ee:	4610      	mov	r0, r2
    42f0:	4b1a      	ldr	r3, [pc, #104]	; (435c <convert_datetime_to_timestamp+0x104>)
    42f2:	4798      	blx	r3
    42f4:	4602      	mov	r2, r0
    42f6:	697b      	ldr	r3, [r7, #20]
    42f8:	4413      	add	r3, r2
    42fa:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    42fc:	693b      	ldr	r3, [r7, #16]
    42fe:	3301      	adds	r3, #1
    4300:	613b      	str	r3, [r7, #16]
    4302:	7bba      	ldrb	r2, [r7, #14]
    4304:	693b      	ldr	r3, [r7, #16]
    4306:	429a      	cmp	r2, r3
    4308:	d8eb      	bhi.n	42e2 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    430a:	7b7b      	ldrb	r3, [r7, #13]
    430c:	3b01      	subs	r3, #1
    430e:	4a14      	ldr	r2, [pc, #80]	; (4360 <convert_datetime_to_timestamp+0x108>)
    4310:	fb02 f303 	mul.w	r3, r2, r3
    4314:	461a      	mov	r2, r3
    4316:	697b      	ldr	r3, [r7, #20]
    4318:	4413      	add	r3, r2
    431a:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    431c:	7b3b      	ldrb	r3, [r7, #12]
    431e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    4322:	fb02 f303 	mul.w	r3, r2, r3
    4326:	461a      	mov	r2, r3
    4328:	697b      	ldr	r3, [r7, #20]
    432a:	4413      	add	r3, r2
    432c:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    432e:	7afa      	ldrb	r2, [r7, #11]
    4330:	4613      	mov	r3, r2
    4332:	011b      	lsls	r3, r3, #4
    4334:	1a9b      	subs	r3, r3, r2
    4336:	009b      	lsls	r3, r3, #2
    4338:	461a      	mov	r2, r3
    433a:	697b      	ldr	r3, [r7, #20]
    433c:	4413      	add	r3, r2
    433e:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    4340:	7abb      	ldrb	r3, [r7, #10]
    4342:	697a      	ldr	r2, [r7, #20]
    4344:	4413      	add	r3, r2
    4346:	617b      	str	r3, [r7, #20]

	return tmp;
    4348:	697b      	ldr	r3, [r7, #20]
}
    434a:	4618      	mov	r0, r3
    434c:	3718      	adds	r7, #24
    434e:	46bd      	mov	sp, r7
    4350:	bd80      	pop	{r7, pc}
    4352:	bf00      	nop
    4354:	0000403d 	.word	0x0000403d
    4358:	01e13380 	.word	0x01e13380
    435c:	00004065 	.word	0x00004065
    4360:	00015180 	.word	0x00015180

00004364 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4364:	b580      	push	{r7, lr}
    4366:	b084      	sub	sp, #16
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
    436c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    436e:	2300      	movs	r3, #0
    4370:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	2b00      	cmp	r3, #0
    4376:	bf14      	ite	ne
    4378:	2301      	movne	r3, #1
    437a:	2300      	moveq	r3, #0
    437c:	b2db      	uxtb	r3, r3
    437e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4382:	4911      	ldr	r1, [pc, #68]	; (43c8 <calendar_init+0x64>)
    4384:	4618      	mov	r0, r3
    4386:	4b11      	ldr	r3, [pc, #68]	; (43cc <calendar_init+0x68>)
    4388:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	681a      	ldr	r2, [r3, #0]
    438e:	683b      	ldr	r3, [r7, #0]
    4390:	429a      	cmp	r2, r3
    4392:	d101      	bne.n	4398 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4394:	2300      	movs	r3, #0
    4396:	e013      	b.n	43c0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	681b      	ldr	r3, [r3, #0]
    439c:	2b00      	cmp	r3, #0
    439e:	d002      	beq.n	43a6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    43a0:	f06f 0311 	mvn.w	r3, #17
    43a4:	e00c      	b.n	43c0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	683a      	ldr	r2, [r7, #0]
    43aa:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	4618      	mov	r0, r3
    43b0:	4b07      	ldr	r3, [pc, #28]	; (43d0 <calendar_init+0x6c>)
    43b2:	4798      	blx	r3
    43b4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    43b6:	687b      	ldr	r3, [r7, #4]
    43b8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    43bc:	619a      	str	r2, [r3, #24]

	return ret;
    43be:	68fb      	ldr	r3, [r7, #12]
}
    43c0:	4618      	mov	r0, r3
    43c2:	3710      	adds	r7, #16
    43c4:	46bd      	mov	sp, r7
    43c6:	bd80      	pop	{r7, pc}
    43c8:	00017060 	.word	0x00017060
    43cc:	00006251 	.word	0x00006251
    43d0:	00008a85 	.word	0x00008a85

000043d4 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b082      	sub	sp, #8
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	2b00      	cmp	r3, #0
    43e0:	bf14      	ite	ne
    43e2:	2301      	movne	r3, #1
    43e4:	2300      	moveq	r3, #0
    43e6:	b2db      	uxtb	r3, r3
    43e8:	f240 12e5 	movw	r2, #485	; 0x1e5
    43ec:	4906      	ldr	r1, [pc, #24]	; (4408 <calendar_enable+0x34>)
    43ee:	4618      	mov	r0, r3
    43f0:	4b06      	ldr	r3, [pc, #24]	; (440c <calendar_enable+0x38>)
    43f2:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	4618      	mov	r0, r3
    43f8:	4b05      	ldr	r3, [pc, #20]	; (4410 <calendar_enable+0x3c>)
    43fa:	4798      	blx	r3

	return ERR_NONE;
    43fc:	2300      	movs	r3, #0
}
    43fe:	4618      	mov	r0, r3
    4400:	3708      	adds	r7, #8
    4402:	46bd      	mov	sp, r7
    4404:	bd80      	pop	{r7, pc}
    4406:	bf00      	nop
    4408:	00017060 	.word	0x00017060
    440c:	00006251 	.word	0x00006251
    4410:	00008b3d 	.word	0x00008b3d

00004414 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    4414:	b580      	push	{r7, lr}
    4416:	b086      	sub	sp, #24
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	2b00      	cmp	r3, #0
    4422:	bf14      	ite	ne
    4424:	2301      	movne	r3, #1
    4426:	2300      	moveq	r3, #0
    4428:	b2db      	uxtb	r3, r3
    442a:	f44f 7203 	mov.w	r2, #524	; 0x20c
    442e:	4915      	ldr	r1, [pc, #84]	; (4484 <calendar_set_time+0x70>)
    4430:	4618      	mov	r0, r3
    4432:	4b15      	ldr	r3, [pc, #84]	; (4488 <calendar_set_time+0x74>)
    4434:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	4618      	mov	r0, r3
    443a:	4b14      	ldr	r3, [pc, #80]	; (448c <calendar_set_time+0x78>)
    443c:	4798      	blx	r3
    443e:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    4440:	f107 0308 	add.w	r3, r7, #8
    4444:	461a      	mov	r2, r3
    4446:	6979      	ldr	r1, [r7, #20]
    4448:	6878      	ldr	r0, [r7, #4]
    444a:	4b11      	ldr	r3, [pc, #68]	; (4490 <calendar_set_time+0x7c>)
    444c:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    444e:	683b      	ldr	r3, [r7, #0]
    4450:	781b      	ldrb	r3, [r3, #0]
    4452:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    4454:	683b      	ldr	r3, [r7, #0]
    4456:	785b      	ldrb	r3, [r3, #1]
    4458:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    445a:	683b      	ldr	r3, [r7, #0]
    445c:	789b      	ldrb	r3, [r3, #2]
    445e:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    4460:	f107 0308 	add.w	r3, r7, #8
    4464:	4619      	mov	r1, r3
    4466:	6878      	ldr	r0, [r7, #4]
    4468:	4b0a      	ldr	r3, [pc, #40]	; (4494 <calendar_set_time+0x80>)
    446a:	4798      	blx	r3
    446c:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    446e:	687b      	ldr	r3, [r7, #4]
    4470:	6939      	ldr	r1, [r7, #16]
    4472:	4618      	mov	r0, r3
    4474:	4b08      	ldr	r3, [pc, #32]	; (4498 <calendar_set_time+0x84>)
    4476:	4798      	blx	r3

	return ERR_NONE;
    4478:	2300      	movs	r3, #0
}
    447a:	4618      	mov	r0, r3
    447c:	3718      	adds	r7, #24
    447e:	46bd      	mov	sp, r7
    4480:	bd80      	pop	{r7, pc}
    4482:	bf00      	nop
    4484:	00017060 	.word	0x00017060
    4488:	00006251 	.word	0x00006251
    448c:	00008bd9 	.word	0x00008bd9
    4490:	0000414d 	.word	0x0000414d
    4494:	00004259 	.word	0x00004259
    4498:	00008b89 	.word	0x00008b89

0000449c <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    449c:	b580      	push	{r7, lr}
    449e:	b086      	sub	sp, #24
    44a0:	af00      	add	r7, sp, #0
    44a2:	6078      	str	r0, [r7, #4]
    44a4:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	2b00      	cmp	r3, #0
    44aa:	bf14      	ite	ne
    44ac:	2301      	movne	r3, #1
    44ae:	2300      	moveq	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	f44f 7209 	mov.w	r2, #548	; 0x224
    44b6:	4915      	ldr	r1, [pc, #84]	; (450c <calendar_set_date+0x70>)
    44b8:	4618      	mov	r0, r3
    44ba:	4b15      	ldr	r3, [pc, #84]	; (4510 <calendar_set_date+0x74>)
    44bc:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	4618      	mov	r0, r3
    44c2:	4b14      	ldr	r3, [pc, #80]	; (4514 <calendar_set_date+0x78>)
    44c4:	4798      	blx	r3
    44c6:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    44c8:	f107 0308 	add.w	r3, r7, #8
    44cc:	461a      	mov	r2, r3
    44ce:	6979      	ldr	r1, [r7, #20]
    44d0:	6878      	ldr	r0, [r7, #4]
    44d2:	4b11      	ldr	r3, [pc, #68]	; (4518 <calendar_set_date+0x7c>)
    44d4:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    44d6:	683b      	ldr	r3, [r7, #0]
    44d8:	781b      	ldrb	r3, [r3, #0]
    44da:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    44dc:	683b      	ldr	r3, [r7, #0]
    44de:	785b      	ldrb	r3, [r3, #1]
    44e0:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    44e2:	683b      	ldr	r3, [r7, #0]
    44e4:	885b      	ldrh	r3, [r3, #2]
    44e6:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    44e8:	f107 0308 	add.w	r3, r7, #8
    44ec:	4619      	mov	r1, r3
    44ee:	6878      	ldr	r0, [r7, #4]
    44f0:	4b0a      	ldr	r3, [pc, #40]	; (451c <calendar_set_date+0x80>)
    44f2:	4798      	blx	r3
    44f4:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	6939      	ldr	r1, [r7, #16]
    44fa:	4618      	mov	r0, r3
    44fc:	4b08      	ldr	r3, [pc, #32]	; (4520 <calendar_set_date+0x84>)
    44fe:	4798      	blx	r3

	return ERR_NONE;
    4500:	2300      	movs	r3, #0
}
    4502:	4618      	mov	r0, r3
    4504:	3718      	adds	r7, #24
    4506:	46bd      	mov	sp, r7
    4508:	bd80      	pop	{r7, pc}
    450a:	bf00      	nop
    450c:	00017060 	.word	0x00017060
    4510:	00006251 	.word	0x00006251
    4514:	00008bd9 	.word	0x00008bd9
    4518:	0000414d 	.word	0x0000414d
    451c:	00004259 	.word	0x00004259
    4520:	00008b89 	.word	0x00008b89

00004524 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    4524:	b580      	push	{r7, lr}
    4526:	b084      	sub	sp, #16
    4528:	af00      	add	r7, sp, #0
    452a:	6078      	str	r0, [r7, #4]
    452c:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	2b00      	cmp	r3, #0
    4532:	bf14      	ite	ne
    4534:	2301      	movne	r3, #1
    4536:	2300      	moveq	r3, #0
    4538:	b2db      	uxtb	r3, r3
    453a:	f240 223b 	movw	r2, #571	; 0x23b
    453e:	4909      	ldr	r1, [pc, #36]	; (4564 <calendar_get_date_time+0x40>)
    4540:	4618      	mov	r0, r3
    4542:	4b09      	ldr	r3, [pc, #36]	; (4568 <calendar_get_date_time+0x44>)
    4544:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    4546:	687b      	ldr	r3, [r7, #4]
    4548:	4618      	mov	r0, r3
    454a:	4b08      	ldr	r3, [pc, #32]	; (456c <calendar_get_date_time+0x48>)
    454c:	4798      	blx	r3
    454e:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    4550:	683a      	ldr	r2, [r7, #0]
    4552:	68f9      	ldr	r1, [r7, #12]
    4554:	6878      	ldr	r0, [r7, #4]
    4556:	4b06      	ldr	r3, [pc, #24]	; (4570 <calendar_get_date_time+0x4c>)
    4558:	4798      	blx	r3

	return ERR_NONE;
    455a:	2300      	movs	r3, #0
}
    455c:	4618      	mov	r0, r3
    455e:	3710      	adds	r7, #16
    4560:	46bd      	mov	sp, r7
    4562:	bd80      	pop	{r7, pc}
    4564:	00017060 	.word	0x00017060
    4568:	00006251 	.word	0x00006251
    456c:	00008bd9 	.word	0x00008bd9
    4570:	0000414d 	.word	0x0000414d

00004574 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    4574:	b580      	push	{r7, lr}
    4576:	b084      	sub	sp, #16
    4578:	af00      	add	r7, sp, #0
    457a:	6078      	str	r0, [r7, #4]
    457c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	2b00      	cmp	r3, #0
    4582:	d004      	beq.n	458e <can_async_init+0x1a>
    4584:	683b      	ldr	r3, [r7, #0]
    4586:	2b00      	cmp	r3, #0
    4588:	d001      	beq.n	458e <can_async_init+0x1a>
    458a:	2301      	movs	r3, #1
    458c:	e000      	b.n	4590 <can_async_init+0x1c>
    458e:	2300      	movs	r3, #0
    4590:	f003 0301 	and.w	r3, r3, #1
    4594:	b2db      	uxtb	r3, r3
    4596:	2241      	movs	r2, #65	; 0x41
    4598:	490e      	ldr	r1, [pc, #56]	; (45d4 <can_async_init+0x60>)
    459a:	4618      	mov	r0, r3
    459c:	4b0e      	ldr	r3, [pc, #56]	; (45d8 <can_async_init+0x64>)
    459e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	6839      	ldr	r1, [r7, #0]
    45a4:	4618      	mov	r0, r3
    45a6:	4b0d      	ldr	r3, [pc, #52]	; (45dc <can_async_init+0x68>)
    45a8:	4798      	blx	r3
    45aa:	60f8      	str	r0, [r7, #12]
	if (rc) {
    45ac:	68fb      	ldr	r3, [r7, #12]
    45ae:	2b00      	cmp	r3, #0
    45b0:	d001      	beq.n	45b6 <can_async_init+0x42>
		return rc;
    45b2:	68fb      	ldr	r3, [r7, #12]
    45b4:	e009      	b.n	45ca <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	4a09      	ldr	r2, [pc, #36]	; (45e0 <can_async_init+0x6c>)
    45ba:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	4a09      	ldr	r2, [pc, #36]	; (45e4 <can_async_init+0x70>)
    45c0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	4a08      	ldr	r2, [pc, #32]	; (45e8 <can_async_init+0x74>)
    45c6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    45c8:	2300      	movs	r3, #0
}
    45ca:	4618      	mov	r0, r3
    45cc:	3710      	adds	r7, #16
    45ce:	46bd      	mov	sp, r7
    45d0:	bd80      	pop	{r7, pc}
    45d2:	bf00      	nop
    45d4:	0001707c 	.word	0x0001707c
    45d8:	00006251 	.word	0x00006251
    45dc:	00006745 	.word	0x00006745
    45e0:	000045ed 	.word	0x000045ed
    45e4:	00004611 	.word	0x00004611
    45e8:	00004635 	.word	0x00004635

000045ec <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b084      	sub	sp, #16
    45f0:	af00      	add	r7, sp, #0
    45f2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    45f8:	68fb      	ldr	r3, [r7, #12]
    45fa:	69db      	ldr	r3, [r3, #28]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d003      	beq.n	4608 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	69db      	ldr	r3, [r3, #28]
    4604:	68f8      	ldr	r0, [r7, #12]
    4606:	4798      	blx	r3
	}
}
    4608:	bf00      	nop
    460a:	3710      	adds	r7, #16
    460c:	46bd      	mov	sp, r7
    460e:	bd80      	pop	{r7, pc}

00004610 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4610:	b580      	push	{r7, lr}
    4612:	b084      	sub	sp, #16
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	6a1b      	ldr	r3, [r3, #32]
    4620:	2b00      	cmp	r3, #0
    4622:	d003      	beq.n	462c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	6a1b      	ldr	r3, [r3, #32]
    4628:	68f8      	ldr	r0, [r7, #12]
    462a:	4798      	blx	r3
	}
}
    462c:	bf00      	nop
    462e:	3710      	adds	r7, #16
    4630:	46bd      	mov	sp, r7
    4632:	bd80      	pop	{r7, pc}

00004634 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    4634:	b580      	push	{r7, lr}
    4636:	b084      	sub	sp, #16
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
    463c:	460b      	mov	r3, r1
    463e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    4644:	68fb      	ldr	r3, [r7, #12]
    4646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4648:	2b00      	cmp	r3, #0
    464a:	d005      	beq.n	4658 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4650:	78fa      	ldrb	r2, [r7, #3]
    4652:	4611      	mov	r1, r2
    4654:	68f8      	ldr	r0, [r7, #12]
    4656:	4798      	blx	r3
	}
}
    4658:	bf00      	nop
    465a:	3710      	adds	r7, #16
    465c:	46bd      	mov	sp, r7
    465e:	bd80      	pop	{r7, pc}

00004660 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4660:	b580      	push	{r7, lr}
    4662:	b082      	sub	sp, #8
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
    4668:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	2b00      	cmp	r3, #0
    466e:	d004      	beq.n	467a <crc_sync_init+0x1a>
    4670:	683b      	ldr	r3, [r7, #0]
    4672:	2b00      	cmp	r3, #0
    4674:	d001      	beq.n	467a <crc_sync_init+0x1a>
    4676:	2301      	movs	r3, #1
    4678:	e000      	b.n	467c <crc_sync_init+0x1c>
    467a:	2300      	movs	r3, #0
    467c:	f003 0301 	and.w	r3, r3, #1
    4680:	b2db      	uxtb	r3, r3
    4682:	222b      	movs	r2, #43	; 0x2b
    4684:	4906      	ldr	r1, [pc, #24]	; (46a0 <crc_sync_init+0x40>)
    4686:	4618      	mov	r0, r3
    4688:	4b06      	ldr	r3, [pc, #24]	; (46a4 <crc_sync_init+0x44>)
    468a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	6839      	ldr	r1, [r7, #0]
    4690:	4618      	mov	r0, r3
    4692:	4b05      	ldr	r3, [pc, #20]	; (46a8 <crc_sync_init+0x48>)
    4694:	4798      	blx	r3
    4696:	4603      	mov	r3, r0
}
    4698:	4618      	mov	r0, r3
    469a:	3708      	adds	r7, #8
    469c:	46bd      	mov	sp, r7
    469e:	bd80      	pop	{r7, pc}
    46a0:	00017098 	.word	0x00017098
    46a4:	00006251 	.word	0x00006251
    46a8:	00006f6d 	.word	0x00006f6d

000046ac <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    46ac:	b580      	push	{r7, lr}
    46ae:	b082      	sub	sp, #8
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	2b00      	cmp	r3, #0
    46b8:	bf14      	ite	ne
    46ba:	2301      	movne	r3, #1
    46bc:	2300      	moveq	r3, #0
    46be:	b2db      	uxtb	r3, r3
    46c0:	223f      	movs	r2, #63	; 0x3f
    46c2:	4906      	ldr	r1, [pc, #24]	; (46dc <crc_sync_enable+0x30>)
    46c4:	4618      	mov	r0, r3
    46c6:	4b06      	ldr	r3, [pc, #24]	; (46e0 <crc_sync_enable+0x34>)
    46c8:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    46ca:	687b      	ldr	r3, [r7, #4]
    46cc:	4618      	mov	r0, r3
    46ce:	4b05      	ldr	r3, [pc, #20]	; (46e4 <crc_sync_enable+0x38>)
    46d0:	4798      	blx	r3
    46d2:	4603      	mov	r3, r0
}
    46d4:	4618      	mov	r0, r3
    46d6:	3708      	adds	r7, #8
    46d8:	46bd      	mov	sp, r7
    46da:	bd80      	pop	{r7, pc}
    46dc:	00017098 	.word	0x00017098
    46e0:	00006251 	.word	0x00006251
    46e4:	00006f8b 	.word	0x00006f8b

000046e8 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    46e8:	b590      	push	{r4, r7, lr}
    46ea:	b085      	sub	sp, #20
    46ec:	af00      	add	r7, sp, #0
    46ee:	60f8      	str	r0, [r7, #12]
    46f0:	60b9      	str	r1, [r7, #8]
    46f2:	607a      	str	r2, [r7, #4]
    46f4:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d00a      	beq.n	4712 <crc_sync_crc32+0x2a>
    46fc:	68bb      	ldr	r3, [r7, #8]
    46fe:	2b00      	cmp	r3, #0
    4700:	d007      	beq.n	4712 <crc_sync_crc32+0x2a>
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	2b00      	cmp	r3, #0
    4706:	d004      	beq.n	4712 <crc_sync_crc32+0x2a>
    4708:	683b      	ldr	r3, [r7, #0]
    470a:	2b00      	cmp	r3, #0
    470c:	d001      	beq.n	4712 <crc_sync_crc32+0x2a>
    470e:	2301      	movs	r3, #1
    4710:	e000      	b.n	4714 <crc_sync_crc32+0x2c>
    4712:	2300      	movs	r3, #0
    4714:	f003 0301 	and.w	r3, r3, #1
    4718:	b2db      	uxtb	r3, r3
    471a:	2253      	movs	r2, #83	; 0x53
    471c:	4907      	ldr	r1, [pc, #28]	; (473c <crc_sync_crc32+0x54>)
    471e:	4618      	mov	r0, r3
    4720:	4b07      	ldr	r3, [pc, #28]	; (4740 <crc_sync_crc32+0x58>)
    4722:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    4724:	68f8      	ldr	r0, [r7, #12]
    4726:	683b      	ldr	r3, [r7, #0]
    4728:	687a      	ldr	r2, [r7, #4]
    472a:	68b9      	ldr	r1, [r7, #8]
    472c:	4c05      	ldr	r4, [pc, #20]	; (4744 <crc_sync_crc32+0x5c>)
    472e:	47a0      	blx	r4
    4730:	4603      	mov	r3, r0
}
    4732:	4618      	mov	r0, r3
    4734:	3714      	adds	r7, #20
    4736:	46bd      	mov	sp, r7
    4738:	bd90      	pop	{r4, r7, pc}
    473a:	bf00      	nop
    473c:	00017098 	.word	0x00017098
    4740:	00006251 	.word	0x00006251
    4744:	00006fa1 	.word	0x00006fa1

00004748 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4748:	b590      	push	{r4, r7, lr}
    474a:	b083      	sub	sp, #12
    474c:	af00      	add	r7, sp, #0
    474e:	4603      	mov	r3, r0
    4750:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4752:	4b07      	ldr	r3, [pc, #28]	; (4770 <delay_us+0x28>)
    4754:	681c      	ldr	r4, [r3, #0]
    4756:	88fb      	ldrh	r3, [r7, #6]
    4758:	4618      	mov	r0, r3
    475a:	4b06      	ldr	r3, [pc, #24]	; (4774 <delay_us+0x2c>)
    475c:	4798      	blx	r3
    475e:	4603      	mov	r3, r0
    4760:	4619      	mov	r1, r3
    4762:	4620      	mov	r0, r4
    4764:	4b04      	ldr	r3, [pc, #16]	; (4778 <delay_us+0x30>)
    4766:	4798      	blx	r3
}
    4768:	bf00      	nop
    476a:	370c      	adds	r7, #12
    476c:	46bd      	mov	sp, r7
    476e:	bd90      	pop	{r4, r7, pc}
    4770:	20002f54 	.word	0x20002f54
    4774:	00006b9d 	.word	0x00006b9d
    4778:	00006d31 	.word	0x00006d31

0000477c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    477c:	b590      	push	{r4, r7, lr}
    477e:	b083      	sub	sp, #12
    4780:	af00      	add	r7, sp, #0
    4782:	4603      	mov	r3, r0
    4784:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4786:	4b07      	ldr	r3, [pc, #28]	; (47a4 <delay_ms+0x28>)
    4788:	681c      	ldr	r4, [r3, #0]
    478a:	88fb      	ldrh	r3, [r7, #6]
    478c:	4618      	mov	r0, r3
    478e:	4b06      	ldr	r3, [pc, #24]	; (47a8 <delay_ms+0x2c>)
    4790:	4798      	blx	r3
    4792:	4603      	mov	r3, r0
    4794:	4619      	mov	r1, r3
    4796:	4620      	mov	r0, r4
    4798:	4b04      	ldr	r3, [pc, #16]	; (47ac <delay_ms+0x30>)
    479a:	4798      	blx	r3
}
    479c:	bf00      	nop
    479e:	370c      	adds	r7, #12
    47a0:	46bd      	mov	sp, r7
    47a2:	bd90      	pop	{r4, r7, pc}
    47a4:	20002f54 	.word	0x20002f54
    47a8:	00006d09 	.word	0x00006d09
    47ac:	00006d31 	.word	0x00006d31

000047b0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    47b0:	b580      	push	{r7, lr}
    47b2:	af00      	add	r7, sp, #0
	return _event_system_init();
    47b4:	4b02      	ldr	r3, [pc, #8]	; (47c0 <event_system_init+0x10>)
    47b6:	4798      	blx	r3
    47b8:	4603      	mov	r3, r0
}
    47ba:	4618      	mov	r0, r3
    47bc:	bd80      	pop	{r7, pc}
    47be:	bf00      	nop
    47c0:	000077a9 	.word	0x000077a9

000047c4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    47c4:	b580      	push	{r7, lr}
    47c6:	b082      	sub	sp, #8
    47c8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    47ca:	2300      	movs	r3, #0
    47cc:	80fb      	strh	r3, [r7, #6]
    47ce:	e00e      	b.n	47ee <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    47d0:	88fb      	ldrh	r3, [r7, #6]
    47d2:	4a0c      	ldr	r2, [pc, #48]	; (4804 <ext_irq_init+0x40>)
    47d4:	00db      	lsls	r3, r3, #3
    47d6:	4413      	add	r3, r2
    47d8:	f04f 32ff 	mov.w	r2, #4294967295
    47dc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    47de:	88fb      	ldrh	r3, [r7, #6]
    47e0:	4a08      	ldr	r2, [pc, #32]	; (4804 <ext_irq_init+0x40>)
    47e2:	2100      	movs	r1, #0
    47e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    47e8:	88fb      	ldrh	r3, [r7, #6]
    47ea:	3301      	adds	r3, #1
    47ec:	80fb      	strh	r3, [r7, #6]
    47ee:	88fb      	ldrh	r3, [r7, #6]
    47f0:	2b03      	cmp	r3, #3
    47f2:	d9ed      	bls.n	47d0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    47f4:	4804      	ldr	r0, [pc, #16]	; (4808 <ext_irq_init+0x44>)
    47f6:	4b05      	ldr	r3, [pc, #20]	; (480c <ext_irq_init+0x48>)
    47f8:	4798      	blx	r3
    47fa:	4603      	mov	r3, r0
}
    47fc:	4618      	mov	r0, r3
    47fe:	3708      	adds	r7, #8
    4800:	46bd      	mov	sp, r7
    4802:	bd80      	pop	{r7, pc}
    4804:	20002f58 	.word	0x20002f58
    4808:	00004969 	.word	0x00004969
    480c:	000073dd 	.word	0x000073dd

00004810 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4810:	b580      	push	{r7, lr}
    4812:	b086      	sub	sp, #24
    4814:	af00      	add	r7, sp, #0
    4816:	6078      	str	r0, [r7, #4]
    4818:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    481a:	2300      	movs	r3, #0
    481c:	75fb      	strb	r3, [r7, #23]
    481e:	2300      	movs	r3, #0
    4820:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    4822:	2300      	movs	r3, #0
    4824:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    4826:	e012      	b.n	484e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    4828:	7dfb      	ldrb	r3, [r7, #23]
    482a:	4a4d      	ldr	r2, [pc, #308]	; (4960 <ext_irq_register+0x150>)
    482c:	00db      	lsls	r3, r3, #3
    482e:	4413      	add	r3, r2
    4830:	685a      	ldr	r2, [r3, #4]
    4832:	687b      	ldr	r3, [r7, #4]
    4834:	429a      	cmp	r2, r3
    4836:	d107      	bne.n	4848 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    4838:	7dfb      	ldrb	r3, [r7, #23]
    483a:	4949      	ldr	r1, [pc, #292]	; (4960 <ext_irq_register+0x150>)
    483c:	683a      	ldr	r2, [r7, #0]
    483e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4842:	2301      	movs	r3, #1
    4844:	757b      	strb	r3, [r7, #21]
			break;
    4846:	e005      	b.n	4854 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    4848:	7dfb      	ldrb	r3, [r7, #23]
    484a:	3301      	adds	r3, #1
    484c:	75fb      	strb	r3, [r7, #23]
    484e:	7dfb      	ldrb	r3, [r7, #23]
    4850:	2b03      	cmp	r3, #3
    4852:	d9e9      	bls.n	4828 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4854:	683b      	ldr	r3, [r7, #0]
    4856:	2b00      	cmp	r3, #0
    4858:	d10e      	bne.n	4878 <ext_irq_register+0x68>
		if (!found) {
    485a:	7d7b      	ldrb	r3, [r7, #21]
    485c:	f083 0301 	eor.w	r3, r3, #1
    4860:	b2db      	uxtb	r3, r3
    4862:	2b00      	cmp	r3, #0
    4864:	d002      	beq.n	486c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    4866:	f06f 030c 	mvn.w	r3, #12
    486a:	e074      	b.n	4956 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    486c:	2100      	movs	r1, #0
    486e:	6878      	ldr	r0, [r7, #4]
    4870:	4b3c      	ldr	r3, [pc, #240]	; (4964 <ext_irq_register+0x154>)
    4872:	4798      	blx	r3
    4874:	4603      	mov	r3, r0
    4876:	e06e      	b.n	4956 <ext_irq_register+0x146>
	}

	if (!found) {
    4878:	7d7b      	ldrb	r3, [r7, #21]
    487a:	f083 0301 	eor.w	r3, r3, #1
    487e:	b2db      	uxtb	r3, r3
    4880:	2b00      	cmp	r3, #0
    4882:	d05a      	beq.n	493a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4884:	2300      	movs	r3, #0
    4886:	75fb      	strb	r3, [r7, #23]
    4888:	e016      	b.n	48b8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    488a:	7dfb      	ldrb	r3, [r7, #23]
    488c:	4a34      	ldr	r2, [pc, #208]	; (4960 <ext_irq_register+0x150>)
    488e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4892:	2b00      	cmp	r3, #0
    4894:	d10d      	bne.n	48b2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    4896:	7dfb      	ldrb	r3, [r7, #23]
    4898:	4931      	ldr	r1, [pc, #196]	; (4960 <ext_irq_register+0x150>)
    489a:	683a      	ldr	r2, [r7, #0]
    489c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    48a0:	7dfb      	ldrb	r3, [r7, #23]
    48a2:	4a2f      	ldr	r2, [pc, #188]	; (4960 <ext_irq_register+0x150>)
    48a4:	00db      	lsls	r3, r3, #3
    48a6:	4413      	add	r3, r2
    48a8:	687a      	ldr	r2, [r7, #4]
    48aa:	605a      	str	r2, [r3, #4]
				found           = true;
    48ac:	2301      	movs	r3, #1
    48ae:	757b      	strb	r3, [r7, #21]
				break;
    48b0:	e005      	b.n	48be <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    48b2:	7dfb      	ldrb	r3, [r7, #23]
    48b4:	3301      	adds	r3, #1
    48b6:	75fb      	strb	r3, [r7, #23]
    48b8:	7dfb      	ldrb	r3, [r7, #23]
    48ba:	2b03      	cmp	r3, #3
    48bc:	d9e5      	bls.n	488a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    48be:	e036      	b.n	492e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    48c0:	7dfb      	ldrb	r3, [r7, #23]
    48c2:	4a27      	ldr	r2, [pc, #156]	; (4960 <ext_irq_register+0x150>)
    48c4:	00db      	lsls	r3, r3, #3
    48c6:	4413      	add	r3, r2
    48c8:	685a      	ldr	r2, [r3, #4]
    48ca:	7dbb      	ldrb	r3, [r7, #22]
    48cc:	4924      	ldr	r1, [pc, #144]	; (4960 <ext_irq_register+0x150>)
    48ce:	00db      	lsls	r3, r3, #3
    48d0:	440b      	add	r3, r1
    48d2:	685b      	ldr	r3, [r3, #4]
    48d4:	429a      	cmp	r2, r3
    48d6:	d227      	bcs.n	4928 <ext_irq_register+0x118>
    48d8:	7dbb      	ldrb	r3, [r7, #22]
    48da:	4a21      	ldr	r2, [pc, #132]	; (4960 <ext_irq_register+0x150>)
    48dc:	00db      	lsls	r3, r3, #3
    48de:	4413      	add	r3, r2
    48e0:	685b      	ldr	r3, [r3, #4]
    48e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    48e6:	d01f      	beq.n	4928 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    48e8:	7dbb      	ldrb	r3, [r7, #22]
    48ea:	491d      	ldr	r1, [pc, #116]	; (4960 <ext_irq_register+0x150>)
    48ec:	f107 020c 	add.w	r2, r7, #12
    48f0:	00db      	lsls	r3, r3, #3
    48f2:	440b      	add	r3, r1
    48f4:	e893 0003 	ldmia.w	r3, {r0, r1}
    48f8:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    48fc:	7dbb      	ldrb	r3, [r7, #22]
    48fe:	7dfa      	ldrb	r2, [r7, #23]
    4900:	4817      	ldr	r0, [pc, #92]	; (4960 <ext_irq_register+0x150>)
    4902:	4917      	ldr	r1, [pc, #92]	; (4960 <ext_irq_register+0x150>)
    4904:	00db      	lsls	r3, r3, #3
    4906:	4403      	add	r3, r0
    4908:	00d2      	lsls	r2, r2, #3
    490a:	440a      	add	r2, r1
    490c:	e892 0003 	ldmia.w	r2, {r0, r1}
    4910:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4914:	7dfb      	ldrb	r3, [r7, #23]
    4916:	4a12      	ldr	r2, [pc, #72]	; (4960 <ext_irq_register+0x150>)
    4918:	00db      	lsls	r3, r3, #3
    491a:	4413      	add	r3, r2
    491c:	f107 020c 	add.w	r2, r7, #12
    4920:	e892 0003 	ldmia.w	r2, {r0, r1}
    4924:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4928:	7dbb      	ldrb	r3, [r7, #22]
    492a:	3301      	adds	r3, #1
    492c:	75bb      	strb	r3, [r7, #22]
    492e:	7dbb      	ldrb	r3, [r7, #22]
    4930:	2b03      	cmp	r3, #3
    4932:	d802      	bhi.n	493a <ext_irq_register+0x12a>
    4934:	7dfb      	ldrb	r3, [r7, #23]
    4936:	2b03      	cmp	r3, #3
    4938:	d9c2      	bls.n	48c0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    493a:	7d7b      	ldrb	r3, [r7, #21]
    493c:	f083 0301 	eor.w	r3, r3, #1
    4940:	b2db      	uxtb	r3, r3
    4942:	2b00      	cmp	r3, #0
    4944:	d002      	beq.n	494c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    4946:	f06f 030c 	mvn.w	r3, #12
    494a:	e004      	b.n	4956 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    494c:	2101      	movs	r1, #1
    494e:	6878      	ldr	r0, [r7, #4]
    4950:	4b04      	ldr	r3, [pc, #16]	; (4964 <ext_irq_register+0x154>)
    4952:	4798      	blx	r3
    4954:	4603      	mov	r3, r0
}
    4956:	4618      	mov	r0, r3
    4958:	3718      	adds	r7, #24
    495a:	46bd      	mov	sp, r7
    495c:	bd80      	pop	{r7, pc}
    495e:	bf00      	nop
    4960:	20002f58 	.word	0x20002f58
    4964:	00007511 	.word	0x00007511

00004968 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    4968:	b580      	push	{r7, lr}
    496a:	b084      	sub	sp, #16
    496c:	af00      	add	r7, sp, #0
    496e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4970:	2300      	movs	r3, #0
    4972:	73fb      	strb	r3, [r7, #15]
    4974:	2304      	movs	r3, #4
    4976:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    4978:	e02a      	b.n	49d0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    497a:	7bba      	ldrb	r2, [r7, #14]
    497c:	7bfb      	ldrb	r3, [r7, #15]
    497e:	4413      	add	r3, r2
    4980:	105b      	asrs	r3, r3, #1
    4982:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4984:	7b7b      	ldrb	r3, [r7, #13]
    4986:	2b03      	cmp	r3, #3
    4988:	d827      	bhi.n	49da <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    498a:	7b7b      	ldrb	r3, [r7, #13]
    498c:	4a16      	ldr	r2, [pc, #88]	; (49e8 <process_ext_irq+0x80>)
    498e:	00db      	lsls	r3, r3, #3
    4990:	4413      	add	r3, r2
    4992:	685a      	ldr	r2, [r3, #4]
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	429a      	cmp	r2, r3
    4998:	d10b      	bne.n	49b2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    499a:	7b7b      	ldrb	r3, [r7, #13]
    499c:	4a12      	ldr	r2, [pc, #72]	; (49e8 <process_ext_irq+0x80>)
    499e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d01b      	beq.n	49de <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    49a6:	7b7b      	ldrb	r3, [r7, #13]
    49a8:	4a0f      	ldr	r2, [pc, #60]	; (49e8 <process_ext_irq+0x80>)
    49aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    49ae:	4798      	blx	r3
			}
			return;
    49b0:	e015      	b.n	49de <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    49b2:	7b7b      	ldrb	r3, [r7, #13]
    49b4:	4a0c      	ldr	r2, [pc, #48]	; (49e8 <process_ext_irq+0x80>)
    49b6:	00db      	lsls	r3, r3, #3
    49b8:	4413      	add	r3, r2
    49ba:	685a      	ldr	r2, [r3, #4]
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	429a      	cmp	r2, r3
    49c0:	d203      	bcs.n	49ca <process_ext_irq+0x62>
			lower = middle + 1;
    49c2:	7b7b      	ldrb	r3, [r7, #13]
    49c4:	3301      	adds	r3, #1
    49c6:	73fb      	strb	r3, [r7, #15]
    49c8:	e002      	b.n	49d0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    49ca:	7b7b      	ldrb	r3, [r7, #13]
    49cc:	3b01      	subs	r3, #1
    49ce:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    49d0:	7bba      	ldrb	r2, [r7, #14]
    49d2:	7bfb      	ldrb	r3, [r7, #15]
    49d4:	429a      	cmp	r2, r3
    49d6:	d2d0      	bcs.n	497a <process_ext_irq+0x12>
    49d8:	e002      	b.n	49e0 <process_ext_irq+0x78>
			return;
    49da:	bf00      	nop
    49dc:	e000      	b.n	49e0 <process_ext_irq+0x78>
			return;
    49de:	bf00      	nop
		}
	}
}
    49e0:	3710      	adds	r7, #16
    49e2:	46bd      	mov	sp, r7
    49e4:	bd80      	pop	{r7, pc}
    49e6:	bf00      	nop
    49e8:	20002f58 	.word	0x20002f58

000049ec <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    49ec:	b580      	push	{r7, lr}
    49ee:	b084      	sub	sp, #16
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	885b      	ldrh	r3, [r3, #2]
    49fc:	b29b      	uxth	r3, r3
    49fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a02:	2b00      	cmp	r3, #0
    4a04:	d107      	bne.n	4a16 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    4a06:	68fb      	ldr	r3, [r7, #12]
    4a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d003      	beq.n	4a16 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    4a0e:	68fb      	ldr	r3, [r7, #12]
    4a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4a12:	68f8      	ldr	r0, [r7, #12]
    4a14:	4798      	blx	r3
		}
	}
}
    4a16:	bf00      	nop
    4a18:	3710      	adds	r7, #16
    4a1a:	46bd      	mov	sp, r7
    4a1c:	bd80      	pop	{r7, pc}

00004a1e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4a1e:	b580      	push	{r7, lr}
    4a20:	b084      	sub	sp, #16
    4a22:	af00      	add	r7, sp, #0
    4a24:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4a26:	687b      	ldr	r3, [r7, #4]
    4a28:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	885b      	ldrh	r3, [r3, #2]
    4a2e:	b29b      	uxth	r3, r3
    4a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a34:	2b00      	cmp	r3, #0
    4a36:	d107      	bne.n	4a48 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    4a38:	68fb      	ldr	r3, [r7, #12]
    4a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d003      	beq.n	4a48 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    4a40:	68fb      	ldr	r3, [r7, #12]
    4a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a44:	68f8      	ldr	r0, [r7, #12]
    4a46:	4798      	blx	r3
		}
	}
}
    4a48:	bf00      	nop
    4a4a:	3710      	adds	r7, #16
    4a4c:	46bd      	mov	sp, r7
    4a4e:	bd80      	pop	{r7, pc}

00004a50 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4a50:	b580      	push	{r7, lr}
    4a52:	b084      	sub	sp, #16
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
    4a58:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4a5e:	687b      	ldr	r3, [r7, #4]
    4a60:	885b      	ldrh	r3, [r3, #2]
    4a62:	b29b      	uxth	r3, r3
    4a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d108      	bne.n	4a7e <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    4a6c:	68fb      	ldr	r3, [r7, #12]
    4a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a70:	2b00      	cmp	r3, #0
    4a72:	d004      	beq.n	4a7e <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    4a74:	68fb      	ldr	r3, [r7, #12]
    4a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a78:	6839      	ldr	r1, [r7, #0]
    4a7a:	68f8      	ldr	r0, [r7, #12]
    4a7c:	4798      	blx	r3
		}
	}
}
    4a7e:	bf00      	nop
    4a80:	3710      	adds	r7, #16
    4a82:	46bd      	mov	sp, r7
    4a84:	bd80      	pop	{r7, pc}
	...

00004a88 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b08a      	sub	sp, #40	; 0x28
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	60f8      	str	r0, [r7, #12]
    4a90:	60b9      	str	r1, [r7, #8]
    4a92:	4613      	mov	r3, r2
    4a94:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4a96:	68fb      	ldr	r3, [r7, #12]
    4a98:	3b28      	subs	r3, #40	; 0x28
    4a9a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4aa0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4aa2:	88fb      	ldrh	r3, [r7, #6]
    4aa4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4aa6:	f248 0301 	movw	r3, #32769	; 0x8001
    4aaa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    4aac:	68bb      	ldr	r3, [r7, #8]
    4aae:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ab2:	f107 0214 	add.w	r2, r7, #20
    4ab6:	4611      	mov	r1, r2
    4ab8:	4618      	mov	r0, r3
    4aba:	4b06      	ldr	r3, [pc, #24]	; (4ad4 <i2c_m_async_read+0x4c>)
    4abc:	4798      	blx	r3
    4abe:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4ac0:	6a3b      	ldr	r3, [r7, #32]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d001      	beq.n	4aca <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    4ac6:	6a3b      	ldr	r3, [r7, #32]
    4ac8:	e000      	b.n	4acc <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    4aca:	88fb      	ldrh	r3, [r7, #6]
}
    4acc:	4618      	mov	r0, r3
    4ace:	3728      	adds	r7, #40	; 0x28
    4ad0:	46bd      	mov	sp, r7
    4ad2:	bd80      	pop	{r7, pc}
    4ad4:	00009b81 	.word	0x00009b81

00004ad8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4ad8:	b580      	push	{r7, lr}
    4ada:	b08a      	sub	sp, #40	; 0x28
    4adc:	af00      	add	r7, sp, #0
    4ade:	60f8      	str	r0, [r7, #12]
    4ae0:	60b9      	str	r1, [r7, #8]
    4ae2:	4613      	mov	r3, r2
    4ae4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	3b28      	subs	r3, #40	; 0x28
    4aea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4aee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4af0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4af2:	88fb      	ldrh	r3, [r7, #6]
    4af4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    4af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4afa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4afc:	68bb      	ldr	r3, [r7, #8]
    4afe:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b02:	f107 0214 	add.w	r2, r7, #20
    4b06:	4611      	mov	r1, r2
    4b08:	4618      	mov	r0, r3
    4b0a:	4b06      	ldr	r3, [pc, #24]	; (4b24 <i2c_m_async_write+0x4c>)
    4b0c:	4798      	blx	r3
    4b0e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4b10:	6a3b      	ldr	r3, [r7, #32]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d001      	beq.n	4b1a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    4b16:	6a3b      	ldr	r3, [r7, #32]
    4b18:	e000      	b.n	4b1c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    4b1a:	88fb      	ldrh	r3, [r7, #6]
}
    4b1c:	4618      	mov	r0, r3
    4b1e:	3728      	adds	r7, #40	; 0x28
    4b20:	46bd      	mov	sp, r7
    4b22:	bd80      	pop	{r7, pc}
    4b24:	00009b81 	.word	0x00009b81

00004b28 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b084      	sub	sp, #16
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    4b32:	687b      	ldr	r3, [r7, #4]
    4b34:	2b00      	cmp	r3, #0
    4b36:	bf14      	ite	ne
    4b38:	2301      	movne	r3, #1
    4b3a:	2300      	moveq	r3, #0
    4b3c:	b2db      	uxtb	r3, r3
    4b3e:	2289      	movs	r2, #137	; 0x89
    4b40:	4915      	ldr	r1, [pc, #84]	; (4b98 <i2c_m_async_init+0x70>)
    4b42:	4618      	mov	r0, r3
    4b44:	4b15      	ldr	r3, [pc, #84]	; (4b9c <i2c_m_async_init+0x74>)
    4b46:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	6839      	ldr	r1, [r7, #0]
    4b4c:	4618      	mov	r0, r3
    4b4e:	4b14      	ldr	r3, [pc, #80]	; (4ba0 <i2c_m_async_init+0x78>)
    4b50:	4798      	blx	r3
    4b52:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4b54:	68fb      	ldr	r3, [r7, #12]
    4b56:	2b00      	cmp	r3, #0
    4b58:	d001      	beq.n	4b5e <i2c_m_async_init+0x36>
		return init_status;
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	e018      	b.n	4b90 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	4a10      	ldr	r2, [pc, #64]	; (4ba4 <i2c_m_async_init+0x7c>)
    4b62:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	4a10      	ldr	r2, [pc, #64]	; (4ba8 <i2c_m_async_init+0x80>)
    4b68:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	4a0f      	ldr	r2, [pc, #60]	; (4bac <i2c_m_async_init+0x84>)
    4b6e:	2101      	movs	r1, #1
    4b70:	4618      	mov	r0, r3
    4b72:	4b0f      	ldr	r3, [pc, #60]	; (4bb0 <i2c_m_async_init+0x88>)
    4b74:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4b76:	687b      	ldr	r3, [r7, #4]
    4b78:	4a0e      	ldr	r2, [pc, #56]	; (4bb4 <i2c_m_async_init+0x8c>)
    4b7a:	2102      	movs	r1, #2
    4b7c:	4618      	mov	r0, r3
    4b7e:	4b0c      	ldr	r3, [pc, #48]	; (4bb0 <i2c_m_async_init+0x88>)
    4b80:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	4a0c      	ldr	r2, [pc, #48]	; (4bb8 <i2c_m_async_init+0x90>)
    4b86:	2100      	movs	r1, #0
    4b88:	4618      	mov	r0, r3
    4b8a:	4b09      	ldr	r3, [pc, #36]	; (4bb0 <i2c_m_async_init+0x88>)
    4b8c:	4798      	blx	r3

	return ERR_NONE;
    4b8e:	2300      	movs	r3, #0
}
    4b90:	4618      	mov	r0, r3
    4b92:	3710      	adds	r7, #16
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}
    4b98:	000170b4 	.word	0x000170b4
    4b9c:	00006251 	.word	0x00006251
    4ba0:	000099d1 	.word	0x000099d1
    4ba4:	00004a89 	.word	0x00004a89
    4ba8:	00004ad9 	.word	0x00004ad9
    4bac:	000049ed 	.word	0x000049ed
    4bb0:	00009c55 	.word	0x00009c55
    4bb4:	00004a1f 	.word	0x00004a1f
    4bb8:	00004a51 	.word	0x00004a51

00004bbc <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    4bbc:	b580      	push	{r7, lr}
    4bbe:	b084      	sub	sp, #16
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	bf14      	ite	ne
    4bca:	2301      	movne	r3, #1
    4bcc:	2300      	moveq	r3, #0
    4bce:	b2db      	uxtb	r3, r3
    4bd0:	22b9      	movs	r2, #185	; 0xb9
    4bd2:	4911      	ldr	r1, [pc, #68]	; (4c18 <i2c_m_async_enable+0x5c>)
    4bd4:	4618      	mov	r0, r3
    4bd6:	4b11      	ldr	r3, [pc, #68]	; (4c1c <i2c_m_async_enable+0x60>)
    4bd8:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	4618      	mov	r0, r3
    4bde:	4b10      	ldr	r3, [pc, #64]	; (4c20 <i2c_m_async_enable+0x64>)
    4be0:	4798      	blx	r3
    4be2:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    4be4:	68fb      	ldr	r3, [r7, #12]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d111      	bne.n	4c0e <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	2201      	movs	r2, #1
    4bee:	2101      	movs	r1, #1
    4bf0:	4618      	mov	r0, r3
    4bf2:	4b0c      	ldr	r3, [pc, #48]	; (4c24 <i2c_m_async_enable+0x68>)
    4bf4:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    4bf6:	687b      	ldr	r3, [r7, #4]
    4bf8:	2201      	movs	r2, #1
    4bfa:	2102      	movs	r1, #2
    4bfc:	4618      	mov	r0, r3
    4bfe:	4b09      	ldr	r3, [pc, #36]	; (4c24 <i2c_m_async_enable+0x68>)
    4c00:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	2201      	movs	r2, #1
    4c06:	2100      	movs	r1, #0
    4c08:	4618      	mov	r0, r3
    4c0a:	4b06      	ldr	r3, [pc, #24]	; (4c24 <i2c_m_async_enable+0x68>)
    4c0c:	4798      	blx	r3
	}
	return rc;
    4c0e:	68fb      	ldr	r3, [r7, #12]
}
    4c10:	4618      	mov	r0, r3
    4c12:	3710      	adds	r7, #16
    4c14:	46bd      	mov	sp, r7
    4c16:	bd80      	pop	{r7, pc}
    4c18:	000170b4 	.word	0x000170b4
    4c1c:	00006251 	.word	0x00006251
    4c20:	0000996d 	.word	0x0000996d
    4c24:	00009c99 	.word	0x00009c99

00004c28 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    4c28:	b480      	push	{r7}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	60f8      	str	r0, [r7, #12]
    4c30:	460b      	mov	r3, r1
    4c32:	607a      	str	r2, [r7, #4]
    4c34:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    4c36:	897b      	ldrh	r3, [r7, #10]
    4c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4c3c:	b21a      	sxth	r2, r3
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	b21b      	sxth	r3, r3
    4c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4c46:	b21b      	sxth	r3, r3
    4c48:	4313      	orrs	r3, r2
    4c4a:	b21b      	sxth	r3, r3
    4c4c:	b29a      	uxth	r2, r3
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	879a      	strh	r2, [r3, #60]	; 0x3c
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    4c56:	4618      	mov	r0, r3
    4c58:	3714      	adds	r7, #20
    4c5a:	46bd      	mov	sp, r7
    4c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c60:	4770      	bx	lr

00004c62 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    4c62:	b480      	push	{r7}
    4c64:	b085      	sub	sp, #20
    4c66:	af00      	add	r7, sp, #0
    4c68:	60f8      	str	r0, [r7, #12]
    4c6a:	460b      	mov	r3, r1
    4c6c:	607a      	str	r2, [r7, #4]
    4c6e:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    4c70:	7afb      	ldrb	r3, [r7, #11]
    4c72:	2b01      	cmp	r3, #1
    4c74:	d007      	beq.n	4c86 <i2c_m_async_register_callback+0x24>
    4c76:	2b02      	cmp	r3, #2
    4c78:	d009      	beq.n	4c8e <i2c_m_async_register_callback+0x2c>
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d10b      	bne.n	4c96 <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    4c7e:	68fb      	ldr	r3, [r7, #12]
    4c80:	687a      	ldr	r2, [r7, #4]
    4c82:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    4c84:	e00a      	b.n	4c9c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    4c86:	68fb      	ldr	r3, [r7, #12]
    4c88:	687a      	ldr	r2, [r7, #4]
    4c8a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    4c8c:	e006      	b.n	4c9c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    4c8e:	68fb      	ldr	r3, [r7, #12]
    4c90:	687a      	ldr	r2, [r7, #4]
    4c92:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    4c94:	e002      	b.n	4c9c <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    4c96:	f06f 030c 	mvn.w	r3, #12
    4c9a:	e000      	b.n	4c9e <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    4c9c:	2300      	movs	r3, #0
}
    4c9e:	4618      	mov	r0, r3
    4ca0:	3714      	adds	r7, #20
    4ca2:	46bd      	mov	sp, r7
    4ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ca8:	4770      	bx	lr

00004caa <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    4caa:	b480      	push	{r7}
    4cac:	b083      	sub	sp, #12
    4cae:	af00      	add	r7, sp, #0
    4cb0:	6078      	str	r0, [r7, #4]
    4cb2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4cba:	683b      	ldr	r3, [r7, #0]
    4cbc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4cbe:	2300      	movs	r3, #0
}
    4cc0:	4618      	mov	r0, r3
    4cc2:	370c      	adds	r7, #12
    4cc4:	46bd      	mov	sp, r7
    4cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cca:	4770      	bx	lr

00004ccc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4ccc:	b580      	push	{r7, lr}
    4cce:	b084      	sub	sp, #16
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	60f8      	str	r0, [r7, #12]
    4cd4:	60b9      	str	r1, [r7, #8]
    4cd6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4cd8:	68fb      	ldr	r3, [r7, #12]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d004      	beq.n	4ce8 <pwm_init+0x1c>
    4cde:	68bb      	ldr	r3, [r7, #8]
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d001      	beq.n	4ce8 <pwm_init+0x1c>
    4ce4:	2301      	movs	r3, #1
    4ce6:	e000      	b.n	4cea <pwm_init+0x1e>
    4ce8:	2300      	movs	r3, #0
    4cea:	f003 0301 	and.w	r3, r3, #1
    4cee:	b2db      	uxtb	r3, r3
    4cf0:	2233      	movs	r2, #51	; 0x33
    4cf2:	490a      	ldr	r1, [pc, #40]	; (4d1c <pwm_init+0x50>)
    4cf4:	4618      	mov	r0, r3
    4cf6:	4b0a      	ldr	r3, [pc, #40]	; (4d20 <pwm_init+0x54>)
    4cf8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4cfa:	68fb      	ldr	r3, [r7, #12]
    4cfc:	68b9      	ldr	r1, [r7, #8]
    4cfe:	4618      	mov	r0, r3
    4d00:	4b08      	ldr	r3, [pc, #32]	; (4d24 <pwm_init+0x58>)
    4d02:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	4a08      	ldr	r2, [pc, #32]	; (4d28 <pwm_init+0x5c>)
    4d08:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    4d0a:	68fb      	ldr	r3, [r7, #12]
    4d0c:	4a07      	ldr	r2, [pc, #28]	; (4d2c <pwm_init+0x60>)
    4d0e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4d10:	2300      	movs	r3, #0
}
    4d12:	4618      	mov	r0, r3
    4d14:	3710      	adds	r7, #16
    4d16:	46bd      	mov	sp, r7
    4d18:	bd80      	pop	{r7, pc}
    4d1a:	bf00      	nop
    4d1c:	000170d4 	.word	0x000170d4
    4d20:	00006251 	.word	0x00006251
    4d24:	0000b0a5 	.word	0x0000b0a5
    4d28:	00004d85 	.word	0x00004d85
    4d2c:	00004da9 	.word	0x00004da9

00004d30 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b082      	sub	sp, #8
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	bf14      	ite	ne
    4d3e:	2301      	movne	r3, #1
    4d40:	2300      	moveq	r3, #0
    4d42:	b2db      	uxtb	r3, r3
    4d44:	224a      	movs	r2, #74	; 0x4a
    4d46:	490b      	ldr	r1, [pc, #44]	; (4d74 <pwm_enable+0x44>)
    4d48:	4618      	mov	r0, r3
    4d4a:	4b0b      	ldr	r3, [pc, #44]	; (4d78 <pwm_enable+0x48>)
    4d4c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	4618      	mov	r0, r3
    4d52:	4b0a      	ldr	r3, [pc, #40]	; (4d7c <pwm_enable+0x4c>)
    4d54:	4798      	blx	r3
    4d56:	4603      	mov	r3, r0
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d002      	beq.n	4d62 <pwm_enable+0x32>
		return ERR_DENIED;
    4d5c:	f06f 0310 	mvn.w	r3, #16
    4d60:	e004      	b.n	4d6c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	4618      	mov	r0, r3
    4d66:	4b06      	ldr	r3, [pc, #24]	; (4d80 <pwm_enable+0x50>)
    4d68:	4798      	blx	r3

	return ERR_NONE;
    4d6a:	2300      	movs	r3, #0
}
    4d6c:	4618      	mov	r0, r3
    4d6e:	3708      	adds	r7, #8
    4d70:	46bd      	mov	sp, r7
    4d72:	bd80      	pop	{r7, pc}
    4d74:	000170d4 	.word	0x000170d4
    4d78:	00006251 	.word	0x00006251
    4d7c:	0000b3b1 	.word	0x0000b3b1
    4d80:	0000b2e1 	.word	0x0000b2e1

00004d84 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4d84:	b580      	push	{r7, lr}
    4d86:	b084      	sub	sp, #16
    4d88:	af00      	add	r7, sp, #0
    4d8a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4d90:	68fb      	ldr	r3, [r7, #12]
    4d92:	695b      	ldr	r3, [r3, #20]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d003      	beq.n	4da0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    4d98:	68fb      	ldr	r3, [r7, #12]
    4d9a:	695b      	ldr	r3, [r3, #20]
    4d9c:	68f8      	ldr	r0, [r7, #12]
    4d9e:	4798      	blx	r3
	}
}
    4da0:	bf00      	nop
    4da2:	3710      	adds	r7, #16
    4da4:	46bd      	mov	sp, r7
    4da6:	bd80      	pop	{r7, pc}

00004da8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4db4:	68fb      	ldr	r3, [r7, #12]
    4db6:	699b      	ldr	r3, [r3, #24]
    4db8:	2b00      	cmp	r3, #0
    4dba:	d003      	beq.n	4dc4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	699b      	ldr	r3, [r3, #24]
    4dc0:	68f8      	ldr	r0, [r7, #12]
    4dc2:	4798      	blx	r3
	}
}
    4dc4:	bf00      	nop
    4dc6:	3710      	adds	r7, #16
    4dc8:	46bd      	mov	sp, r7
    4dca:	bd80      	pop	{r7, pc}

00004dcc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b082      	sub	sp, #8
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
    4dd4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d004      	beq.n	4de6 <qspi_sync_init+0x1a>
    4ddc:	683b      	ldr	r3, [r7, #0]
    4dde:	2b00      	cmp	r3, #0
    4de0:	d001      	beq.n	4de6 <qspi_sync_init+0x1a>
    4de2:	2301      	movs	r3, #1
    4de4:	e000      	b.n	4de8 <qspi_sync_init+0x1c>
    4de6:	2300      	movs	r3, #0
    4de8:	f003 0301 	and.w	r3, r3, #1
    4dec:	b2db      	uxtb	r3, r3
    4dee:	2231      	movs	r2, #49	; 0x31
    4df0:	4906      	ldr	r1, [pc, #24]	; (4e0c <qspi_sync_init+0x40>)
    4df2:	4618      	mov	r0, r3
    4df4:	4b06      	ldr	r3, [pc, #24]	; (4e10 <qspi_sync_init+0x44>)
    4df6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	6839      	ldr	r1, [r7, #0]
    4dfc:	4618      	mov	r0, r3
    4dfe:	4b05      	ldr	r3, [pc, #20]	; (4e14 <qspi_sync_init+0x48>)
    4e00:	4798      	blx	r3
    4e02:	4603      	mov	r3, r0
}
    4e04:	4618      	mov	r0, r3
    4e06:	3708      	adds	r7, #8
    4e08:	46bd      	mov	sp, r7
    4e0a:	bd80      	pop	{r7, pc}
    4e0c:	000170ec 	.word	0x000170ec
    4e10:	00006251 	.word	0x00006251
    4e14:	0000864d 	.word	0x0000864d

00004e18 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4e18:	b580      	push	{r7, lr}
    4e1a:	b082      	sub	sp, #8
    4e1c:	af00      	add	r7, sp, #0
    4e1e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	2b00      	cmp	r3, #0
    4e24:	bf14      	ite	ne
    4e26:	2301      	movne	r3, #1
    4e28:	2300      	moveq	r3, #0
    4e2a:	b2db      	uxtb	r3, r3
    4e2c:	223f      	movs	r2, #63	; 0x3f
    4e2e:	4906      	ldr	r1, [pc, #24]	; (4e48 <qspi_sync_enable+0x30>)
    4e30:	4618      	mov	r0, r3
    4e32:	4b06      	ldr	r3, [pc, #24]	; (4e4c <qspi_sync_enable+0x34>)
    4e34:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	4618      	mov	r0, r3
    4e3a:	4b05      	ldr	r3, [pc, #20]	; (4e50 <qspi_sync_enable+0x38>)
    4e3c:	4798      	blx	r3
    4e3e:	4603      	mov	r3, r0
}
    4e40:	4618      	mov	r0, r3
    4e42:	3708      	adds	r7, #8
    4e44:	46bd      	mov	sp, r7
    4e46:	bd80      	pop	{r7, pc}
    4e48:	000170ec 	.word	0x000170ec
    4e4c:	00006251 	.word	0x00006251
    4e50:	000086c1 	.word	0x000086c1

00004e54 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4e54:	b580      	push	{r7, lr}
    4e56:	b082      	sub	sp, #8
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	2b00      	cmp	r3, #0
    4e60:	bf14      	ite	ne
    4e62:	2301      	movne	r3, #1
    4e64:	2300      	moveq	r3, #0
    4e66:	b2db      	uxtb	r3, r3
    4e68:	2246      	movs	r2, #70	; 0x46
    4e6a:	4906      	ldr	r1, [pc, #24]	; (4e84 <qspi_sync_disable+0x30>)
    4e6c:	4618      	mov	r0, r3
    4e6e:	4b06      	ldr	r3, [pc, #24]	; (4e88 <qspi_sync_disable+0x34>)
    4e70:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	4618      	mov	r0, r3
    4e76:	4b05      	ldr	r3, [pc, #20]	; (4e8c <qspi_sync_disable+0x38>)
    4e78:	4798      	blx	r3
    4e7a:	4603      	mov	r3, r0
}
    4e7c:	4618      	mov	r0, r3
    4e7e:	3708      	adds	r7, #8
    4e80:	46bd      	mov	sp, r7
    4e82:	bd80      	pop	{r7, pc}
    4e84:	000170ec 	.word	0x000170ec
    4e88:	00006251 	.word	0x00006251
    4e8c:	000086e5 	.word	0x000086e5

00004e90 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4e90:	b580      	push	{r7, lr}
    4e92:	b082      	sub	sp, #8
    4e94:	af00      	add	r7, sp, #0
    4e96:	6078      	str	r0, [r7, #4]
    4e98:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d004      	beq.n	4eaa <qspi_sync_serial_run_command+0x1a>
    4ea0:	683b      	ldr	r3, [r7, #0]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d001      	beq.n	4eaa <qspi_sync_serial_run_command+0x1a>
    4ea6:	2301      	movs	r3, #1
    4ea8:	e000      	b.n	4eac <qspi_sync_serial_run_command+0x1c>
    4eaa:	2300      	movs	r3, #0
    4eac:	f003 0301 	and.w	r3, r3, #1
    4eb0:	b2db      	uxtb	r3, r3
    4eb2:	224d      	movs	r2, #77	; 0x4d
    4eb4:	4906      	ldr	r1, [pc, #24]	; (4ed0 <qspi_sync_serial_run_command+0x40>)
    4eb6:	4618      	mov	r0, r3
    4eb8:	4b06      	ldr	r3, [pc, #24]	; (4ed4 <qspi_sync_serial_run_command+0x44>)
    4eba:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	6839      	ldr	r1, [r7, #0]
    4ec0:	4618      	mov	r0, r3
    4ec2:	4b05      	ldr	r3, [pc, #20]	; (4ed8 <qspi_sync_serial_run_command+0x48>)
    4ec4:	4798      	blx	r3
    4ec6:	4603      	mov	r3, r0
}
    4ec8:	4618      	mov	r0, r3
    4eca:	3708      	adds	r7, #8
    4ecc:	46bd      	mov	sp, r7
    4ece:	bd80      	pop	{r7, pc}
    4ed0:	000170ec 	.word	0x000170ec
    4ed4:	00006251 	.word	0x00006251
    4ed8:	00008831 	.word	0x00008831

00004edc <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    4edc:	b580      	push	{r7, lr}
    4ede:	b084      	sub	sp, #16
    4ee0:	af00      	add	r7, sp, #0
    4ee2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	3b04      	subs	r3, #4
    4ee8:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	791b      	ldrb	r3, [r3, #4]
    4eee:	2b01      	cmp	r3, #1
    4ef0:	d80e      	bhi.n	4f10 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4ef2:	68fb      	ldr	r3, [r7, #12]
    4ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ef6:	68fb      	ldr	r3, [r7, #12]
    4ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4efa:	1c58      	adds	r0, r3, #1
    4efc:	68f9      	ldr	r1, [r7, #12]
    4efe:	6448      	str	r0, [r1, #68]	; 0x44
    4f00:	4413      	add	r3, r2
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	b29b      	uxth	r3, r3
    4f06:	4619      	mov	r1, r3
    4f08:	6878      	ldr	r0, [r7, #4]
    4f0a:	4b11      	ldr	r3, [pc, #68]	; (4f50 <_spi_dev_tx+0x74>)
    4f0c:	4798      	blx	r3
    4f0e:	e00d      	b.n	4f2c <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4f10:	68fb      	ldr	r3, [r7, #12]
    4f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4f14:	68fb      	ldr	r3, [r7, #12]
    4f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f18:	1c58      	adds	r0, r3, #1
    4f1a:	68f9      	ldr	r1, [r7, #12]
    4f1c:	6448      	str	r0, [r1, #68]	; 0x44
    4f1e:	005b      	lsls	r3, r3, #1
    4f20:	4413      	add	r3, r2
    4f22:	881b      	ldrh	r3, [r3, #0]
    4f24:	4619      	mov	r1, r3
    4f26:	6878      	ldr	r0, [r7, #4]
    4f28:	4b09      	ldr	r3, [pc, #36]	; (4f50 <_spi_dev_tx+0x74>)
    4f2a:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4f2c:	68fb      	ldr	r3, [r7, #12]
    4f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4f30:	68fb      	ldr	r3, [r7, #12]
    4f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4f34:	429a      	cmp	r2, r3
    4f36:	d107      	bne.n	4f48 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    4f38:	2100      	movs	r1, #0
    4f3a:	6878      	ldr	r0, [r7, #4]
    4f3c:	4b05      	ldr	r3, [pc, #20]	; (4f54 <_spi_dev_tx+0x78>)
    4f3e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4f40:	2101      	movs	r1, #1
    4f42:	6878      	ldr	r0, [r7, #4]
    4f44:	4b04      	ldr	r3, [pc, #16]	; (4f58 <_spi_dev_tx+0x7c>)
    4f46:	4798      	blx	r3
	}
}
    4f48:	bf00      	nop
    4f4a:	3710      	adds	r7, #16
    4f4c:	46bd      	mov	sp, r7
    4f4e:	bd80      	pop	{r7, pc}
    4f50:	0000a8ad 	.word	0x0000a8ad
    4f54:	0000a771 	.word	0x0000a771
    4f58:	0000a845 	.word	0x0000a845

00004f5c <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    4f5c:	b590      	push	{r4, r7, lr}
    4f5e:	b085      	sub	sp, #20
    4f60:	af00      	add	r7, sp, #0
    4f62:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	3b04      	subs	r3, #4
    4f68:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    4f6a:	68fb      	ldr	r3, [r7, #12]
    4f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4f6e:	2b00      	cmp	r3, #0
    4f70:	d021      	beq.n	4fb6 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	791b      	ldrb	r3, [r3, #4]
    4f76:	2b01      	cmp	r3, #1
    4f78:	d80e      	bhi.n	4f98 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4f7a:	68fb      	ldr	r3, [r7, #12]
    4f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4f7e:	68fb      	ldr	r3, [r7, #12]
    4f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f82:	1c58      	adds	r0, r3, #1
    4f84:	68f9      	ldr	r1, [r7, #12]
    4f86:	6448      	str	r0, [r1, #68]	; 0x44
    4f88:	18d4      	adds	r4, r2, r3
    4f8a:	6878      	ldr	r0, [r7, #4]
    4f8c:	4b2e      	ldr	r3, [pc, #184]	; (5048 <_spi_dev_rx+0xec>)
    4f8e:	4798      	blx	r3
    4f90:	4603      	mov	r3, r0
    4f92:	b2db      	uxtb	r3, r3
    4f94:	7023      	strb	r3, [r4, #0]
    4f96:	e016      	b.n	4fc6 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4f98:	68fb      	ldr	r3, [r7, #12]
    4f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4f9c:	68fb      	ldr	r3, [r7, #12]
    4f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fa0:	1c58      	adds	r0, r3, #1
    4fa2:	68f9      	ldr	r1, [r7, #12]
    4fa4:	6448      	str	r0, [r1, #68]	; 0x44
    4fa6:	005b      	lsls	r3, r3, #1
    4fa8:	18d4      	adds	r4, r2, r3
    4faa:	6878      	ldr	r0, [r7, #4]
    4fac:	4b26      	ldr	r3, [pc, #152]	; (5048 <_spi_dev_rx+0xec>)
    4fae:	4798      	blx	r3
    4fb0:	4603      	mov	r3, r0
    4fb2:	8023      	strh	r3, [r4, #0]
    4fb4:	e007      	b.n	4fc6 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    4fb6:	6878      	ldr	r0, [r7, #4]
    4fb8:	4b23      	ldr	r3, [pc, #140]	; (5048 <_spi_dev_rx+0xec>)
    4fba:	4798      	blx	r3
		spi->xfercnt++;
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fc0:	1c5a      	adds	r2, r3, #1
    4fc2:	68fb      	ldr	r3, [r7, #12]
    4fc4:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    4fc6:	68fb      	ldr	r3, [r7, #12]
    4fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4fca:	68fb      	ldr	r3, [r7, #12]
    4fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4fce:	429a      	cmp	r2, r3
    4fd0:	d226      	bcs.n	5020 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    4fd2:	68fb      	ldr	r3, [r7, #12]
    4fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d01b      	beq.n	5012 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	791b      	ldrb	r3, [r3, #4]
    4fde:	2b01      	cmp	r3, #1
    4fe0:	d80b      	bhi.n	4ffa <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4fe2:	68fb      	ldr	r3, [r7, #12]
    4fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fea:	4413      	add	r3, r2
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	b29b      	uxth	r3, r3
    4ff0:	4619      	mov	r1, r3
    4ff2:	6878      	ldr	r0, [r7, #4]
    4ff4:	4b15      	ldr	r3, [pc, #84]	; (504c <_spi_dev_rx+0xf0>)
    4ff6:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    4ff8:	e022      	b.n	5040 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4ffa:	68fb      	ldr	r3, [r7, #12]
    4ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ffe:	68fb      	ldr	r3, [r7, #12]
    5000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5002:	005b      	lsls	r3, r3, #1
    5004:	4413      	add	r3, r2
    5006:	881b      	ldrh	r3, [r3, #0]
    5008:	4619      	mov	r1, r3
    500a:	6878      	ldr	r0, [r7, #4]
    500c:	4b0f      	ldr	r3, [pc, #60]	; (504c <_spi_dev_rx+0xf0>)
    500e:	4798      	blx	r3
}
    5010:	e016      	b.n	5040 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    5012:	687b      	ldr	r3, [r7, #4]
    5014:	88db      	ldrh	r3, [r3, #6]
    5016:	4619      	mov	r1, r3
    5018:	6878      	ldr	r0, [r7, #4]
    501a:	4b0c      	ldr	r3, [pc, #48]	; (504c <_spi_dev_rx+0xf0>)
    501c:	4798      	blx	r3
}
    501e:	e00f      	b.n	5040 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    5020:	2100      	movs	r1, #0
    5022:	6878      	ldr	r0, [r7, #4]
    5024:	4b0a      	ldr	r3, [pc, #40]	; (5050 <_spi_dev_rx+0xf4>)
    5026:	4798      	blx	r3
		spi->stat = 0;
    5028:	68fb      	ldr	r3, [r7, #12]
    502a:	2200      	movs	r2, #0
    502c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    5030:	68fb      	ldr	r3, [r7, #12]
    5032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5034:	2b00      	cmp	r3, #0
    5036:	d003      	beq.n	5040 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    5038:	68fb      	ldr	r3, [r7, #12]
    503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    503c:	68f8      	ldr	r0, [r7, #12]
    503e:	4798      	blx	r3
}
    5040:	bf00      	nop
    5042:	3714      	adds	r7, #20
    5044:	46bd      	mov	sp, r7
    5046:	bd90      	pop	{r4, r7, pc}
    5048:	0000a905 	.word	0x0000a905
    504c:	0000a8ad 	.word	0x0000a8ad
    5050:	0000a7d5 	.word	0x0000a7d5

00005054 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    5054:	b580      	push	{r7, lr}
    5056:	b084      	sub	sp, #16
    5058:	af00      	add	r7, sp, #0
    505a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	3b04      	subs	r3, #4
    5060:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    5062:	68fb      	ldr	r3, [r7, #12]
    5064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5066:	68fb      	ldr	r3, [r7, #12]
    5068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    506a:	429a      	cmp	r2, r3
    506c:	d30f      	bcc.n	508e <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    506e:	2100      	movs	r1, #0
    5070:	6878      	ldr	r0, [r7, #4]
    5072:	4b09      	ldr	r3, [pc, #36]	; (5098 <_spi_dev_complete+0x44>)
    5074:	4798      	blx	r3
		spi->stat = 0;
    5076:	68fb      	ldr	r3, [r7, #12]
    5078:	2200      	movs	r2, #0
    507a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    507e:	68fb      	ldr	r3, [r7, #12]
    5080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5082:	2b00      	cmp	r3, #0
    5084:	d003      	beq.n	508e <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    5086:	68fb      	ldr	r3, [r7, #12]
    5088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    508a:	68f8      	ldr	r0, [r7, #12]
    508c:	4798      	blx	r3
		}
	}
}
    508e:	bf00      	nop
    5090:	3710      	adds	r7, #16
    5092:	46bd      	mov	sp, r7
    5094:	bd80      	pop	{r7, pc}
    5096:	bf00      	nop
    5098:	0000a845 	.word	0x0000a845

0000509c <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    509c:	b580      	push	{r7, lr}
    509e:	b084      	sub	sp, #16
    50a0:	af00      	add	r7, sp, #0
    50a2:	6078      	str	r0, [r7, #4]
    50a4:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    50a6:	687b      	ldr	r3, [r7, #4]
    50a8:	3b04      	subs	r3, #4
    50aa:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    50ac:	2100      	movs	r1, #0
    50ae:	6878      	ldr	r0, [r7, #4]
    50b0:	4b0d      	ldr	r3, [pc, #52]	; (50e8 <_spi_dev_error+0x4c>)
    50b2:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    50b4:	2100      	movs	r1, #0
    50b6:	6878      	ldr	r0, [r7, #4]
    50b8:	4b0c      	ldr	r3, [pc, #48]	; (50ec <_spi_dev_error+0x50>)
    50ba:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    50bc:	2100      	movs	r1, #0
    50be:	6878      	ldr	r0, [r7, #4]
    50c0:	4b0b      	ldr	r3, [pc, #44]	; (50f0 <_spi_dev_error+0x54>)
    50c2:	4798      	blx	r3
	spi->stat = 0;
    50c4:	68fb      	ldr	r3, [r7, #12]
    50c6:	2200      	movs	r2, #0
    50c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50d0:	2b00      	cmp	r3, #0
    50d2:	d004      	beq.n	50de <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    50d4:	68fb      	ldr	r3, [r7, #12]
    50d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50d8:	6839      	ldr	r1, [r7, #0]
    50da:	68f8      	ldr	r0, [r7, #12]
    50dc:	4798      	blx	r3
	}
}
    50de:	bf00      	nop
    50e0:	3710      	adds	r7, #16
    50e2:	46bd      	mov	sp, r7
    50e4:	bd80      	pop	{r7, pc}
    50e6:	bf00      	nop
    50e8:	0000a771 	.word	0x0000a771
    50ec:	0000a7d5 	.word	0x0000a7d5
    50f0:	0000a845 	.word	0x0000a845

000050f4 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b084      	sub	sp, #16
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
    50fc:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    50fe:	2300      	movs	r3, #0
    5100:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    5102:	687b      	ldr	r3, [r7, #4]
    5104:	2b00      	cmp	r3, #0
    5106:	d004      	beq.n	5112 <spi_m_async_init+0x1e>
    5108:	683b      	ldr	r3, [r7, #0]
    510a:	2b00      	cmp	r3, #0
    510c:	d001      	beq.n	5112 <spi_m_async_init+0x1e>
    510e:	2301      	movs	r3, #1
    5110:	e000      	b.n	5114 <spi_m_async_init+0x20>
    5112:	2300      	movs	r3, #0
    5114:	f003 0301 	and.w	r3, r3, #1
    5118:	b2db      	uxtb	r3, r3
    511a:	22a5      	movs	r2, #165	; 0xa5
    511c:	491c      	ldr	r1, [pc, #112]	; (5190 <spi_m_async_init+0x9c>)
    511e:	4618      	mov	r0, r3
    5120:	4b1c      	ldr	r3, [pc, #112]	; (5194 <spi_m_async_init+0xa0>)
    5122:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5124:	687b      	ldr	r3, [r7, #4]
    5126:	683a      	ldr	r2, [r7, #0]
    5128:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	3304      	adds	r3, #4
    512e:	6839      	ldr	r1, [r7, #0]
    5130:	4618      	mov	r0, r3
    5132:	4b19      	ldr	r3, [pc, #100]	; (5198 <spi_m_async_init+0xa4>)
    5134:	4798      	blx	r3
    5136:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    5138:	68fb      	ldr	r3, [r7, #12]
    513a:	2b00      	cmp	r3, #0
    513c:	db23      	blt.n	5186 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    513e:	687b      	ldr	r3, [r7, #4]
    5140:	3304      	adds	r3, #4
    5142:	4a16      	ldr	r2, [pc, #88]	; (519c <spi_m_async_init+0xa8>)
    5144:	2100      	movs	r1, #0
    5146:	4618      	mov	r0, r3
    5148:	4b15      	ldr	r3, [pc, #84]	; (51a0 <spi_m_async_init+0xac>)
    514a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	3304      	adds	r3, #4
    5150:	4a14      	ldr	r2, [pc, #80]	; (51a4 <spi_m_async_init+0xb0>)
    5152:	2101      	movs	r1, #1
    5154:	4618      	mov	r0, r3
    5156:	4b12      	ldr	r3, [pc, #72]	; (51a0 <spi_m_async_init+0xac>)
    5158:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	3304      	adds	r3, #4
    515e:	4a12      	ldr	r2, [pc, #72]	; (51a8 <spi_m_async_init+0xb4>)
    5160:	2102      	movs	r1, #2
    5162:	4618      	mov	r0, r3
    5164:	4b0e      	ldr	r3, [pc, #56]	; (51a0 <spi_m_async_init+0xac>)
    5166:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	3304      	adds	r3, #4
    516c:	4a0f      	ldr	r2, [pc, #60]	; (51ac <spi_m_async_init+0xb8>)
    516e:	2103      	movs	r1, #3
    5170:	4618      	mov	r0, r3
    5172:	4b0b      	ldr	r3, [pc, #44]	; (51a0 <spi_m_async_init+0xac>)
    5174:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    5176:	687b      	ldr	r3, [r7, #4]
    5178:	4a0d      	ldr	r2, [pc, #52]	; (51b0 <spi_m_async_init+0xbc>)
    517a:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	4a0d      	ldr	r2, [pc, #52]	; (51b4 <spi_m_async_init+0xc0>)
    5180:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    5182:	2300      	movs	r3, #0
    5184:	e000      	b.n	5188 <spi_m_async_init+0x94>
		return rc;
    5186:	68fb      	ldr	r3, [r7, #12]
}
    5188:	4618      	mov	r0, r3
    518a:	3710      	adds	r7, #16
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}
    5190:	00017108 	.word	0x00017108
    5194:	00006251 	.word	0x00006251
    5198:	0000a3d1 	.word	0x0000a3d1
    519c:	00004edd 	.word	0x00004edd
    51a0:	0000a955 	.word	0x0000a955
    51a4:	00004f5d 	.word	0x00004f5d
    51a8:	00005055 	.word	0x00005055
    51ac:	0000509d 	.word	0x0000509d
    51b0:	000051b9 	.word	0x000051b9
    51b4:	00005239 	.word	0x00005239

000051b8 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    51b8:	b580      	push	{r7, lr}
    51ba:	b086      	sub	sp, #24
    51bc:	af00      	add	r7, sp, #0
    51be:	60f8      	str	r0, [r7, #12]
    51c0:	60b9      	str	r1, [r7, #8]
    51c2:	4613      	mov	r3, r2
    51c4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    51c6:	68fb      	ldr	r3, [r7, #12]
    51c8:	2b00      	cmp	r3, #0
    51ca:	bf14      	ite	ne
    51cc:	2301      	movne	r3, #1
    51ce:	2300      	moveq	r3, #0
    51d0:	b2db      	uxtb	r3, r3
    51d2:	f240 1205 	movw	r2, #261	; 0x105
    51d6:	4914      	ldr	r1, [pc, #80]	; (5228 <_spi_m_async_io_read+0x70>)
    51d8:	4618      	mov	r0, r3
    51da:	4b14      	ldr	r3, [pc, #80]	; (522c <_spi_m_async_io_read+0x74>)
    51dc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    51de:	68fb      	ldr	r3, [r7, #12]
    51e0:	3b24      	subs	r3, #36	; 0x24
    51e2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    51e4:	697b      	ldr	r3, [r7, #20]
    51e6:	68ba      	ldr	r2, [r7, #8]
    51e8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    51ea:	697b      	ldr	r3, [r7, #20]
    51ec:	2200      	movs	r2, #0
    51ee:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    51f0:	88fa      	ldrh	r2, [r7, #6]
    51f2:	697b      	ldr	r3, [r7, #20]
    51f4:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    51f6:	697b      	ldr	r3, [r7, #20]
    51f8:	2200      	movs	r2, #0
    51fa:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    51fc:	697b      	ldr	r3, [r7, #20]
    51fe:	2210      	movs	r2, #16
    5200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    5204:	697b      	ldr	r3, [r7, #20]
    5206:	3304      	adds	r3, #4
    5208:	2101      	movs	r1, #1
    520a:	4618      	mov	r0, r3
    520c:	4b08      	ldr	r3, [pc, #32]	; (5230 <_spi_m_async_io_read+0x78>)
    520e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5210:	697b      	ldr	r3, [r7, #20]
    5212:	3304      	adds	r3, #4
    5214:	f240 11ff 	movw	r1, #511	; 0x1ff
    5218:	4618      	mov	r0, r3
    521a:	4b06      	ldr	r3, [pc, #24]	; (5234 <_spi_m_async_io_read+0x7c>)
    521c:	4798      	blx	r3

	return ERR_NONE;
    521e:	2300      	movs	r3, #0
}
    5220:	4618      	mov	r0, r3
    5222:	3718      	adds	r7, #24
    5224:	46bd      	mov	sp, r7
    5226:	bd80      	pop	{r7, pc}
    5228:	00017108 	.word	0x00017108
    522c:	00006251 	.word	0x00006251
    5230:	0000a7d5 	.word	0x0000a7d5
    5234:	0000a8ad 	.word	0x0000a8ad

00005238 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5238:	b580      	push	{r7, lr}
    523a:	b086      	sub	sp, #24
    523c:	af00      	add	r7, sp, #0
    523e:	60f8      	str	r0, [r7, #12]
    5240:	60b9      	str	r1, [r7, #8]
    5242:	4613      	mov	r3, r2
    5244:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5246:	68fb      	ldr	r3, [r7, #12]
    5248:	2b00      	cmp	r3, #0
    524a:	bf14      	ite	ne
    524c:	2301      	movne	r3, #1
    524e:	2300      	moveq	r3, #0
    5250:	b2db      	uxtb	r3, r3
    5252:	f240 1227 	movw	r2, #295	; 0x127
    5256:	4911      	ldr	r1, [pc, #68]	; (529c <_spi_m_async_io_write+0x64>)
    5258:	4618      	mov	r0, r3
    525a:	4b11      	ldr	r3, [pc, #68]	; (52a0 <_spi_m_async_io_write+0x68>)
    525c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    525e:	68fb      	ldr	r3, [r7, #12]
    5260:	3b24      	subs	r3, #36	; 0x24
    5262:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    5264:	697b      	ldr	r3, [r7, #20]
    5266:	2200      	movs	r2, #0
    5268:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    526a:	697b      	ldr	r3, [r7, #20]
    526c:	68ba      	ldr	r2, [r7, #8]
    526e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5270:	88fa      	ldrh	r2, [r7, #6]
    5272:	697b      	ldr	r3, [r7, #20]
    5274:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    5276:	697b      	ldr	r3, [r7, #20]
    5278:	2200      	movs	r2, #0
    527a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    527c:	697b      	ldr	r3, [r7, #20]
    527e:	2210      	movs	r2, #16
    5280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    5284:	697b      	ldr	r3, [r7, #20]
    5286:	3304      	adds	r3, #4
    5288:	2101      	movs	r1, #1
    528a:	4618      	mov	r0, r3
    528c:	4b05      	ldr	r3, [pc, #20]	; (52a4 <_spi_m_async_io_write+0x6c>)
    528e:	4798      	blx	r3

	return ERR_NONE;
    5290:	2300      	movs	r3, #0
}
    5292:	4618      	mov	r0, r3
    5294:	3718      	adds	r7, #24
    5296:	46bd      	mov	sp, r7
    5298:	bd80      	pop	{r7, pc}
    529a:	bf00      	nop
    529c:	00017108 	.word	0x00017108
    52a0:	00006251 	.word	0x00006251
    52a4:	0000a771 	.word	0x0000a771

000052a8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    52a8:	b580      	push	{r7, lr}
    52aa:	b084      	sub	sp, #16
    52ac:	af00      	add	r7, sp, #0
    52ae:	6078      	str	r0, [r7, #4]
    52b0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    52b2:	2300      	movs	r3, #0
    52b4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    52b6:	687b      	ldr	r3, [r7, #4]
    52b8:	2b00      	cmp	r3, #0
    52ba:	d004      	beq.n	52c6 <spi_m_sync_init+0x1e>
    52bc:	683b      	ldr	r3, [r7, #0]
    52be:	2b00      	cmp	r3, #0
    52c0:	d001      	beq.n	52c6 <spi_m_sync_init+0x1e>
    52c2:	2301      	movs	r3, #1
    52c4:	e000      	b.n	52c8 <spi_m_sync_init+0x20>
    52c6:	2300      	movs	r3, #0
    52c8:	f003 0301 	and.w	r3, r3, #1
    52cc:	b2db      	uxtb	r3, r3
    52ce:	2240      	movs	r2, #64	; 0x40
    52d0:	4910      	ldr	r1, [pc, #64]	; (5314 <spi_m_sync_init+0x6c>)
    52d2:	4618      	mov	r0, r3
    52d4:	4b10      	ldr	r3, [pc, #64]	; (5318 <spi_m_sync_init+0x70>)
    52d6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	683a      	ldr	r2, [r7, #0]
    52dc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	3304      	adds	r3, #4
    52e2:	6839      	ldr	r1, [r7, #0]
    52e4:	4618      	mov	r0, r3
    52e6:	4b0d      	ldr	r3, [pc, #52]	; (531c <spi_m_sync_init+0x74>)
    52e8:	4798      	blx	r3
    52ea:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    52ec:	68fb      	ldr	r3, [r7, #12]
    52ee:	2b00      	cmp	r3, #0
    52f0:	da01      	bge.n	52f6 <spi_m_sync_init+0x4e>
		return rc;
    52f2:	68fb      	ldr	r3, [r7, #12]
    52f4:	e00a      	b.n	530c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    52fc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    52fe:	687b      	ldr	r3, [r7, #4]
    5300:	4a07      	ldr	r2, [pc, #28]	; (5320 <spi_m_sync_init+0x78>)
    5302:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	4a07      	ldr	r2, [pc, #28]	; (5324 <spi_m_sync_init+0x7c>)
    5308:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    530a:	2300      	movs	r3, #0
}
    530c:	4618      	mov	r0, r3
    530e:	3710      	adds	r7, #16
    5310:	46bd      	mov	sp, r7
    5312:	bd80      	pop	{r7, pc}
    5314:	00017128 	.word	0x00017128
    5318:	00006251 	.word	0x00006251
    531c:	0000a2c5 	.word	0x0000a2c5
    5320:	000053a1 	.word	0x000053a1
    5324:	000053f9 	.word	0x000053f9

00005328 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    5328:	b580      	push	{r7, lr}
    532a:	b082      	sub	sp, #8
    532c:	af00      	add	r7, sp, #0
    532e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    5330:	687b      	ldr	r3, [r7, #4]
    5332:	2b00      	cmp	r3, #0
    5334:	bf14      	ite	ne
    5336:	2301      	movne	r3, #1
    5338:	2300      	moveq	r3, #0
    533a:	b2db      	uxtb	r3, r3
    533c:	2257      	movs	r2, #87	; 0x57
    533e:	4906      	ldr	r1, [pc, #24]	; (5358 <spi_m_sync_enable+0x30>)
    5340:	4618      	mov	r0, r3
    5342:	4b06      	ldr	r3, [pc, #24]	; (535c <spi_m_sync_enable+0x34>)
    5344:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    5346:	687b      	ldr	r3, [r7, #4]
    5348:	3304      	adds	r3, #4
    534a:	4618      	mov	r0, r3
    534c:	4b04      	ldr	r3, [pc, #16]	; (5360 <spi_m_sync_enable+0x38>)
    534e:	4798      	blx	r3
}
    5350:	bf00      	nop
    5352:	3708      	adds	r7, #8
    5354:	46bd      	mov	sp, r7
    5356:	bd80      	pop	{r7, pc}
    5358:	00017128 	.word	0x00017128
    535c:	00006251 	.word	0x00006251
    5360:	0000a461 	.word	0x0000a461

00005364 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    5364:	b580      	push	{r7, lr}
    5366:	b082      	sub	sp, #8
    5368:	af00      	add	r7, sp, #0
    536a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    536c:	687b      	ldr	r3, [r7, #4]
    536e:	2b00      	cmp	r3, #0
    5370:	bf14      	ite	ne
    5372:	2301      	movne	r3, #1
    5374:	2300      	moveq	r3, #0
    5376:	b2db      	uxtb	r3, r3
    5378:	225d      	movs	r2, #93	; 0x5d
    537a:	4906      	ldr	r1, [pc, #24]	; (5394 <spi_m_sync_disable+0x30>)
    537c:	4618      	mov	r0, r3
    537e:	4b06      	ldr	r3, [pc, #24]	; (5398 <spi_m_sync_disable+0x34>)
    5380:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	3304      	adds	r3, #4
    5386:	4618      	mov	r0, r3
    5388:	4b04      	ldr	r3, [pc, #16]	; (539c <spi_m_sync_disable+0x38>)
    538a:	4798      	blx	r3
}
    538c:	bf00      	nop
    538e:	3708      	adds	r7, #8
    5390:	46bd      	mov	sp, r7
    5392:	bd80      	pop	{r7, pc}
    5394:	00017128 	.word	0x00017128
    5398:	00006251 	.word	0x00006251
    539c:	0000a4b1 	.word	0x0000a4b1

000053a0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	b088      	sub	sp, #32
    53a4:	af00      	add	r7, sp, #0
    53a6:	60f8      	str	r0, [r7, #12]
    53a8:	60b9      	str	r1, [r7, #8]
    53aa:	4613      	mov	r3, r2
    53ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	2b00      	cmp	r3, #0
    53b2:	bf14      	ite	ne
    53b4:	2301      	movne	r3, #1
    53b6:	2300      	moveq	r3, #0
    53b8:	b2db      	uxtb	r3, r3
    53ba:	2287      	movs	r2, #135	; 0x87
    53bc:	490b      	ldr	r1, [pc, #44]	; (53ec <_spi_m_sync_io_read+0x4c>)
    53be:	4618      	mov	r0, r3
    53c0:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <_spi_m_sync_io_read+0x50>)
    53c2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	3b0c      	subs	r3, #12
    53c8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    53ca:	68bb      	ldr	r3, [r7, #8]
    53cc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    53ce:	2300      	movs	r3, #0
    53d0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    53d2:	88fb      	ldrh	r3, [r7, #6]
    53d4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    53d6:	f107 0310 	add.w	r3, r7, #16
    53da:	4619      	mov	r1, r3
    53dc:	69f8      	ldr	r0, [r7, #28]
    53de:	4b05      	ldr	r3, [pc, #20]	; (53f4 <_spi_m_sync_io_read+0x54>)
    53e0:	4798      	blx	r3
    53e2:	4603      	mov	r3, r0
}
    53e4:	4618      	mov	r0, r3
    53e6:	3720      	adds	r7, #32
    53e8:	46bd      	mov	sp, r7
    53ea:	bd80      	pop	{r7, pc}
    53ec:	00017128 	.word	0x00017128
    53f0:	00006251 	.word	0x00006251
    53f4:	00005451 	.word	0x00005451

000053f8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b088      	sub	sp, #32
    53fc:	af00      	add	r7, sp, #0
    53fe:	60f8      	str	r0, [r7, #12]
    5400:	60b9      	str	r1, [r7, #8]
    5402:	4613      	mov	r3, r2
    5404:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	2b00      	cmp	r3, #0
    540a:	bf14      	ite	ne
    540c:	2301      	movne	r3, #1
    540e:	2300      	moveq	r3, #0
    5410:	b2db      	uxtb	r3, r3
    5412:	22a3      	movs	r2, #163	; 0xa3
    5414:	490b      	ldr	r1, [pc, #44]	; (5444 <_spi_m_sync_io_write+0x4c>)
    5416:	4618      	mov	r0, r3
    5418:	4b0b      	ldr	r3, [pc, #44]	; (5448 <_spi_m_sync_io_write+0x50>)
    541a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    541c:	68fb      	ldr	r3, [r7, #12]
    541e:	3b0c      	subs	r3, #12
    5420:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    5422:	2300      	movs	r3, #0
    5424:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    5426:	68bb      	ldr	r3, [r7, #8]
    5428:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    542a:	88fb      	ldrh	r3, [r7, #6]
    542c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    542e:	f107 0310 	add.w	r3, r7, #16
    5432:	4619      	mov	r1, r3
    5434:	69f8      	ldr	r0, [r7, #28]
    5436:	4b05      	ldr	r3, [pc, #20]	; (544c <_spi_m_sync_io_write+0x54>)
    5438:	4798      	blx	r3
    543a:	4603      	mov	r3, r0
}
    543c:	4618      	mov	r0, r3
    543e:	3720      	adds	r7, #32
    5440:	46bd      	mov	sp, r7
    5442:	bd80      	pop	{r7, pc}
    5444:	00017128 	.word	0x00017128
    5448:	00006251 	.word	0x00006251
    544c:	00005451 	.word	0x00005451

00005450 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    5450:	b580      	push	{r7, lr}
    5452:	b086      	sub	sp, #24
    5454:	af00      	add	r7, sp, #0
    5456:	6078      	str	r0, [r7, #4]
    5458:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    545a:	687b      	ldr	r3, [r7, #4]
    545c:	2b00      	cmp	r3, #0
    545e:	d004      	beq.n	546a <spi_m_sync_transfer+0x1a>
    5460:	683b      	ldr	r3, [r7, #0]
    5462:	2b00      	cmp	r3, #0
    5464:	d001      	beq.n	546a <spi_m_sync_transfer+0x1a>
    5466:	2301      	movs	r3, #1
    5468:	e000      	b.n	546c <spi_m_sync_transfer+0x1c>
    546a:	2300      	movs	r3, #0
    546c:	f003 0301 	and.w	r3, r3, #1
    5470:	b2db      	uxtb	r3, r3
    5472:	22b3      	movs	r2, #179	; 0xb3
    5474:	490c      	ldr	r1, [pc, #48]	; (54a8 <spi_m_sync_transfer+0x58>)
    5476:	4618      	mov	r0, r3
    5478:	4b0c      	ldr	r3, [pc, #48]	; (54ac <spi_m_sync_transfer+0x5c>)
    547a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    547c:	683b      	ldr	r3, [r7, #0]
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    5482:	683b      	ldr	r3, [r7, #0]
    5484:	685b      	ldr	r3, [r3, #4]
    5486:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    5488:	683b      	ldr	r3, [r7, #0]
    548a:	689b      	ldr	r3, [r3, #8]
    548c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	3304      	adds	r3, #4
    5492:	f107 020c 	add.w	r2, r7, #12
    5496:	4611      	mov	r1, r2
    5498:	4618      	mov	r0, r3
    549a:	4b05      	ldr	r3, [pc, #20]	; (54b0 <spi_m_sync_transfer+0x60>)
    549c:	4798      	blx	r3
    549e:	4603      	mov	r3, r0
}
    54a0:	4618      	mov	r0, r3
    54a2:	3718      	adds	r7, #24
    54a4:	46bd      	mov	sp, r7
    54a6:	bd80      	pop	{r7, pc}
    54a8:	00017128 	.word	0x00017128
    54ac:	00006251 	.word	0x00006251
    54b0:	0000a655 	.word	0x0000a655

000054b4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    54b4:	b580      	push	{r7, lr}
    54b6:	b082      	sub	sp, #8
    54b8:	af00      	add	r7, sp, #0
    54ba:	6078      	str	r0, [r7, #4]
    54bc:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d004      	beq.n	54ce <spi_m_sync_get_io_descriptor+0x1a>
    54c4:	683b      	ldr	r3, [r7, #0]
    54c6:	2b00      	cmp	r3, #0
    54c8:	d001      	beq.n	54ce <spi_m_sync_get_io_descriptor+0x1a>
    54ca:	2301      	movs	r3, #1
    54cc:	e000      	b.n	54d0 <spi_m_sync_get_io_descriptor+0x1c>
    54ce:	2300      	movs	r3, #0
    54d0:	f003 0301 	and.w	r3, r3, #1
    54d4:	b2db      	uxtb	r3, r3
    54d6:	22bd      	movs	r2, #189	; 0xbd
    54d8:	4906      	ldr	r1, [pc, #24]	; (54f4 <spi_m_sync_get_io_descriptor+0x40>)
    54da:	4618      	mov	r0, r3
    54dc:	4b06      	ldr	r3, [pc, #24]	; (54f8 <spi_m_sync_get_io_descriptor+0x44>)
    54de:	4798      	blx	r3
	*io = &spi->io;
    54e0:	687b      	ldr	r3, [r7, #4]
    54e2:	f103 020c 	add.w	r2, r3, #12
    54e6:	683b      	ldr	r3, [r7, #0]
    54e8:	601a      	str	r2, [r3, #0]
	return 0;
    54ea:	2300      	movs	r3, #0
}
    54ec:	4618      	mov	r0, r3
    54ee:	3708      	adds	r7, #8
    54f0:	46bd      	mov	sp, r7
    54f2:	bd80      	pop	{r7, pc}
    54f4:	00017128 	.word	0x00017128
    54f8:	00006251 	.word	0x00006251

000054fc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    54fc:	b480      	push	{r7}
    54fe:	b083      	sub	sp, #12
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	681b      	ldr	r3, [r3, #0]
}
    5508:	4618      	mov	r0, r3
    550a:	370c      	adds	r7, #12
    550c:	46bd      	mov	sp, r7
    550e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5512:	4770      	bx	lr

00005514 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    5514:	b480      	push	{r7}
    5516:	b083      	sub	sp, #12
    5518:	af00      	add	r7, sp, #0
    551a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    551c:	687b      	ldr	r3, [r7, #4]
    551e:	2b00      	cmp	r3, #0
    5520:	d002      	beq.n	5528 <list_get_next_element+0x14>
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	e000      	b.n	552a <list_get_next_element+0x16>
    5528:	2300      	movs	r3, #0
}
    552a:	4618      	mov	r0, r3
    552c:	370c      	adds	r7, #12
    552e:	46bd      	mov	sp, r7
    5530:	f85d 7b04 	ldr.w	r7, [sp], #4
    5534:	4770      	bx	lr
	...

00005538 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    5538:	b580      	push	{r7, lr}
    553a:	b084      	sub	sp, #16
    553c:	af00      	add	r7, sp, #0
    553e:	60f8      	str	r0, [r7, #12]
    5540:	60b9      	str	r1, [r7, #8]
    5542:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    5544:	68fb      	ldr	r3, [r7, #12]
    5546:	2b00      	cmp	r3, #0
    5548:	d004      	beq.n	5554 <timer_init+0x1c>
    554a:	68bb      	ldr	r3, [r7, #8]
    554c:	2b00      	cmp	r3, #0
    554e:	d001      	beq.n	5554 <timer_init+0x1c>
    5550:	2301      	movs	r3, #1
    5552:	e000      	b.n	5556 <timer_init+0x1e>
    5554:	2300      	movs	r3, #0
    5556:	f003 0301 	and.w	r3, r3, #1
    555a:	b2db      	uxtb	r3, r3
    555c:	223b      	movs	r2, #59	; 0x3b
    555e:	490a      	ldr	r1, [pc, #40]	; (5588 <timer_init+0x50>)
    5560:	4618      	mov	r0, r3
    5562:	4b0a      	ldr	r3, [pc, #40]	; (558c <timer_init+0x54>)
    5564:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    5566:	68fb      	ldr	r3, [r7, #12]
    5568:	68b9      	ldr	r1, [r7, #8]
    556a:	4618      	mov	r0, r3
    556c:	4b08      	ldr	r3, [pc, #32]	; (5590 <timer_init+0x58>)
    556e:	4798      	blx	r3
	descr->time                           = 0;
    5570:	68fb      	ldr	r3, [r7, #12]
    5572:	2200      	movs	r2, #0
    5574:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    5576:	68fb      	ldr	r3, [r7, #12]
    5578:	4a06      	ldr	r2, [pc, #24]	; (5594 <timer_init+0x5c>)
    557a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    557c:	2300      	movs	r3, #0
}
    557e:	4618      	mov	r0, r3
    5580:	3710      	adds	r7, #16
    5582:	46bd      	mov	sp, r7
    5584:	bd80      	pop	{r7, pc}
    5586:	bf00      	nop
    5588:	00017144 	.word	0x00017144
    558c:	00006251 	.word	0x00006251
    5590:	0000adf5 	.word	0x0000adf5
    5594:	00005841 	.word	0x00005841

00005598 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    5598:	b580      	push	{r7, lr}
    559a:	b082      	sub	sp, #8
    559c:	af00      	add	r7, sp, #0
    559e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	2b00      	cmp	r3, #0
    55a4:	bf14      	ite	ne
    55a6:	2301      	movne	r3, #1
    55a8:	2300      	moveq	r3, #0
    55aa:	b2db      	uxtb	r3, r3
    55ac:	2253      	movs	r2, #83	; 0x53
    55ae:	490b      	ldr	r1, [pc, #44]	; (55dc <timer_start+0x44>)
    55b0:	4618      	mov	r0, r3
    55b2:	4b0b      	ldr	r3, [pc, #44]	; (55e0 <timer_start+0x48>)
    55b4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    55b6:	687b      	ldr	r3, [r7, #4]
    55b8:	4618      	mov	r0, r3
    55ba:	4b0a      	ldr	r3, [pc, #40]	; (55e4 <timer_start+0x4c>)
    55bc:	4798      	blx	r3
    55be:	4603      	mov	r3, r0
    55c0:	2b00      	cmp	r3, #0
    55c2:	d002      	beq.n	55ca <timer_start+0x32>
		return ERR_DENIED;
    55c4:	f06f 0310 	mvn.w	r3, #16
    55c8:	e004      	b.n	55d4 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    55ca:	687b      	ldr	r3, [r7, #4]
    55cc:	4618      	mov	r0, r3
    55ce:	4b06      	ldr	r3, [pc, #24]	; (55e8 <timer_start+0x50>)
    55d0:	4798      	blx	r3

	return ERR_NONE;
    55d2:	2300      	movs	r3, #0
}
    55d4:	4618      	mov	r0, r3
    55d6:	3708      	adds	r7, #8
    55d8:	46bd      	mov	sp, r7
    55da:	bd80      	pop	{r7, pc}
    55dc:	00017144 	.word	0x00017144
    55e0:	00006251 	.word	0x00006251
    55e4:	0000b391 	.word	0x0000b391
    55e8:	0000b2c1 	.word	0x0000b2c1

000055ec <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    55ec:	b580      	push	{r7, lr}
    55ee:	b082      	sub	sp, #8
    55f0:	af00      	add	r7, sp, #0
    55f2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	2b00      	cmp	r3, #0
    55f8:	bf14      	ite	ne
    55fa:	2301      	movne	r3, #1
    55fc:	2300      	moveq	r3, #0
    55fe:	b2db      	uxtb	r3, r3
    5600:	2261      	movs	r2, #97	; 0x61
    5602:	490d      	ldr	r1, [pc, #52]	; (5638 <timer_stop+0x4c>)
    5604:	4618      	mov	r0, r3
    5606:	4b0d      	ldr	r3, [pc, #52]	; (563c <timer_stop+0x50>)
    5608:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    560a:	687b      	ldr	r3, [r7, #4]
    560c:	4618      	mov	r0, r3
    560e:	4b0c      	ldr	r3, [pc, #48]	; (5640 <timer_stop+0x54>)
    5610:	4798      	blx	r3
    5612:	4603      	mov	r3, r0
    5614:	f083 0301 	eor.w	r3, r3, #1
    5618:	b2db      	uxtb	r3, r3
    561a:	2b00      	cmp	r3, #0
    561c:	d002      	beq.n	5624 <timer_stop+0x38>
		return ERR_DENIED;
    561e:	f06f 0310 	mvn.w	r3, #16
    5622:	e004      	b.n	562e <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	4618      	mov	r0, r3
    5628:	4b06      	ldr	r3, [pc, #24]	; (5644 <timer_stop+0x58>)
    562a:	4798      	blx	r3

	return ERR_NONE;
    562c:	2300      	movs	r3, #0
}
    562e:	4618      	mov	r0, r3
    5630:	3708      	adds	r7, #8
    5632:	46bd      	mov	sp, r7
    5634:	bd80      	pop	{r7, pc}
    5636:	bf00      	nop
    5638:	00017144 	.word	0x00017144
    563c:	00006251 	.word	0x00006251
    5640:	0000b391 	.word	0x0000b391
    5644:	0000b301 	.word	0x0000b301

00005648 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    5648:	b580      	push	{r7, lr}
    564a:	b084      	sub	sp, #16
    564c:	af00      	add	r7, sp, #0
    564e:	6078      	str	r0, [r7, #4]
    5650:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	2b00      	cmp	r3, #0
    5656:	d004      	beq.n	5662 <timer_add_task+0x1a>
    5658:	683b      	ldr	r3, [r7, #0]
    565a:	2b00      	cmp	r3, #0
    565c:	d001      	beq.n	5662 <timer_add_task+0x1a>
    565e:	2301      	movs	r3, #1
    5660:	e000      	b.n	5664 <timer_add_task+0x1c>
    5662:	2300      	movs	r3, #0
    5664:	f003 0301 	and.w	r3, r3, #1
    5668:	b2db      	uxtb	r3, r3
    566a:	227a      	movs	r2, #122	; 0x7a
    566c:	492d      	ldr	r1, [pc, #180]	; (5724 <timer_add_task+0xdc>)
    566e:	4618      	mov	r0, r3
    5670:	4b2d      	ldr	r3, [pc, #180]	; (5728 <timer_add_task+0xe0>)
    5672:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5674:	687b      	ldr	r3, [r7, #4]
    5676:	7e1b      	ldrb	r3, [r3, #24]
    5678:	b2db      	uxtb	r3, r3
    567a:	f043 0301 	orr.w	r3, r3, #1
    567e:	b2da      	uxtb	r2, r3
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	3314      	adds	r3, #20
    5688:	6839      	ldr	r1, [r7, #0]
    568a:	4618      	mov	r0, r3
    568c:	4b27      	ldr	r3, [pc, #156]	; (572c <timer_add_task+0xe4>)
    568e:	4798      	blx	r3
    5690:	4603      	mov	r3, r0
    5692:	2b00      	cmp	r3, #0
    5694:	d00f      	beq.n	56b6 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	7e1b      	ldrb	r3, [r3, #24]
    569a:	b2db      	uxtb	r3, r3
    569c:	f023 0301 	bic.w	r3, r3, #1
    56a0:	b2da      	uxtb	r2, r3
    56a2:	687b      	ldr	r3, [r7, #4]
    56a4:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    56a6:	227f      	movs	r2, #127	; 0x7f
    56a8:	491e      	ldr	r1, [pc, #120]	; (5724 <timer_add_task+0xdc>)
    56aa:	2000      	movs	r0, #0
    56ac:	4b1e      	ldr	r3, [pc, #120]	; (5728 <timer_add_task+0xe0>)
    56ae:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    56b0:	f06f 0311 	mvn.w	r3, #17
    56b4:	e032      	b.n	571c <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	691a      	ldr	r2, [r3, #16]
    56ba:	683b      	ldr	r3, [r7, #0]
    56bc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	f103 0014 	add.w	r0, r3, #20
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	691b      	ldr	r3, [r3, #16]
    56c8:	461a      	mov	r2, r3
    56ca:	6839      	ldr	r1, [r7, #0]
    56cc:	4b18      	ldr	r3, [pc, #96]	; (5730 <timer_add_task+0xe8>)
    56ce:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	7e1b      	ldrb	r3, [r3, #24]
    56d4:	b2db      	uxtb	r3, r3
    56d6:	f023 0301 	bic.w	r3, r3, #1
    56da:	b2da      	uxtb	r2, r3
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	7e1b      	ldrb	r3, [r3, #24]
    56e4:	b2db      	uxtb	r3, r3
    56e6:	f003 0302 	and.w	r3, r3, #2
    56ea:	2b00      	cmp	r3, #0
    56ec:	d015      	beq.n	571a <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    56ee:	f107 030c 	add.w	r3, r7, #12
    56f2:	4618      	mov	r0, r3
    56f4:	4b0f      	ldr	r3, [pc, #60]	; (5734 <timer_add_task+0xec>)
    56f6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	7e1b      	ldrb	r3, [r3, #24]
    56fc:	b2db      	uxtb	r3, r3
    56fe:	f023 0302 	bic.w	r3, r3, #2
    5702:	b2da      	uxtb	r2, r3
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	4618      	mov	r0, r3
    570c:	4b0a      	ldr	r3, [pc, #40]	; (5738 <timer_add_task+0xf0>)
    570e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5710:	f107 030c 	add.w	r3, r7, #12
    5714:	4618      	mov	r0, r3
    5716:	4b09      	ldr	r3, [pc, #36]	; (573c <timer_add_task+0xf4>)
    5718:	4798      	blx	r3
	}

	return ERR_NONE;
    571a:	2300      	movs	r3, #0
}
    571c:	4618      	mov	r0, r3
    571e:	3710      	adds	r7, #16
    5720:	46bd      	mov	sp, r7
    5722:	bd80      	pop	{r7, pc}
    5724:	00017144 	.word	0x00017144
    5728:	00006251 	.word	0x00006251
    572c:	00006279 	.word	0x00006279
    5730:	00005791 	.word	0x00005791
    5734:	0000e53d 	.word	0x0000e53d
    5738:	0000b3f1 	.word	0x0000b3f1
    573c:	0000e563 	.word	0x0000e563

00005740 <timer_get_clock_cycles_in_tick>:

/**
 * \brief Retrieve the amount of clock cycles in a tick
 */
int32_t timer_get_clock_cycles_in_tick(const struct timer_descriptor *const descr, uint32_t *const cycles)
{
    5740:	b580      	push	{r7, lr}
    5742:	b082      	sub	sp, #8
    5744:	af00      	add	r7, sp, #0
    5746:	6078      	str	r0, [r7, #4]
    5748:	6039      	str	r1, [r7, #0]
	ASSERT(descr && cycles);
    574a:	687b      	ldr	r3, [r7, #4]
    574c:	2b00      	cmp	r3, #0
    574e:	d004      	beq.n	575a <timer_get_clock_cycles_in_tick+0x1a>
    5750:	683b      	ldr	r3, [r7, #0]
    5752:	2b00      	cmp	r3, #0
    5754:	d001      	beq.n	575a <timer_get_clock_cycles_in_tick+0x1a>
    5756:	2301      	movs	r3, #1
    5758:	e000      	b.n	575c <timer_get_clock_cycles_in_tick+0x1c>
    575a:	2300      	movs	r3, #0
    575c:	f003 0301 	and.w	r3, r3, #1
    5760:	b2db      	uxtb	r3, r3
    5762:	22af      	movs	r2, #175	; 0xaf
    5764:	4907      	ldr	r1, [pc, #28]	; (5784 <timer_get_clock_cycles_in_tick+0x44>)
    5766:	4618      	mov	r0, r3
    5768:	4b07      	ldr	r3, [pc, #28]	; (5788 <timer_get_clock_cycles_in_tick+0x48>)
    576a:	4798      	blx	r3
	*cycles = _timer_get_period(&descr->device);
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	4618      	mov	r0, r3
    5770:	4b06      	ldr	r3, [pc, #24]	; (578c <timer_get_clock_cycles_in_tick+0x4c>)
    5772:	4798      	blx	r3
    5774:	4602      	mov	r2, r0
    5776:	683b      	ldr	r3, [r7, #0]
    5778:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    577a:	2300      	movs	r3, #0
}
    577c:	4618      	mov	r0, r3
    577e:	3708      	adds	r7, #8
    5780:	46bd      	mov	sp, r7
    5782:	bd80      	pop	{r7, pc}
    5784:	00017144 	.word	0x00017144
    5788:	00006251 	.word	0x00006251
    578c:	0000b321 	.word	0x0000b321

00005790 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5790:	b580      	push	{r7, lr}
    5792:	b088      	sub	sp, #32
    5794:	af00      	add	r7, sp, #0
    5796:	60f8      	str	r0, [r7, #12]
    5798:	60b9      	str	r1, [r7, #8]
    579a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    579c:	2300      	movs	r3, #0
    579e:	61bb      	str	r3, [r7, #24]
    57a0:	68f8      	ldr	r0, [r7, #12]
    57a2:	4b23      	ldr	r3, [pc, #140]	; (5830 <timer_add_timer_task+0xa0>)
    57a4:	4798      	blx	r3
    57a6:	6138      	str	r0, [r7, #16]

	if (!head) {
    57a8:	693b      	ldr	r3, [r7, #16]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d104      	bne.n	57b8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    57ae:	68b9      	ldr	r1, [r7, #8]
    57b0:	68f8      	ldr	r0, [r7, #12]
    57b2:	4b20      	ldr	r3, [pc, #128]	; (5834 <timer_add_timer_task+0xa4>)
    57b4:	4798      	blx	r3
		return;
    57b6:	e037      	b.n	5828 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    57b8:	693b      	ldr	r3, [r7, #16]
    57ba:	61fb      	str	r3, [r7, #28]
    57bc:	e022      	b.n	5804 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    57be:	69fb      	ldr	r3, [r7, #28]
    57c0:	685a      	ldr	r2, [r3, #4]
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	429a      	cmp	r2, r3
    57c6:	d808      	bhi.n	57da <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    57c8:	69fb      	ldr	r3, [r7, #28]
    57ca:	689a      	ldr	r2, [r3, #8]
    57cc:	69fb      	ldr	r3, [r7, #28]
    57ce:	6859      	ldr	r1, [r3, #4]
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	1acb      	subs	r3, r1, r3
    57d4:	4413      	add	r3, r2
    57d6:	617b      	str	r3, [r7, #20]
    57d8:	e009      	b.n	57ee <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    57da:	69fb      	ldr	r3, [r7, #28]
    57dc:	689a      	ldr	r2, [r3, #8]
    57de:	69fb      	ldr	r3, [r7, #28]
    57e0:	685b      	ldr	r3, [r3, #4]
    57e2:	441a      	add	r2, r3
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	425b      	negs	r3, r3
    57e8:	4413      	add	r3, r2
    57ea:	3301      	adds	r3, #1
    57ec:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    57ee:	68bb      	ldr	r3, [r7, #8]
    57f0:	689a      	ldr	r2, [r3, #8]
    57f2:	697b      	ldr	r3, [r7, #20]
    57f4:	429a      	cmp	r2, r3
    57f6:	d909      	bls.n	580c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    57f8:	69fb      	ldr	r3, [r7, #28]
    57fa:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    57fc:	69f8      	ldr	r0, [r7, #28]
    57fe:	4b0e      	ldr	r3, [pc, #56]	; (5838 <timer_add_timer_task+0xa8>)
    5800:	4798      	blx	r3
    5802:	61f8      	str	r0, [r7, #28]
    5804:	69fb      	ldr	r3, [r7, #28]
    5806:	2b00      	cmp	r3, #0
    5808:	d1d9      	bne.n	57be <timer_add_timer_task+0x2e>
    580a:	e000      	b.n	580e <timer_add_timer_task+0x7e>
			break;
    580c:	bf00      	nop
	}

	if (it == head) {
    580e:	69fa      	ldr	r2, [r7, #28]
    5810:	693b      	ldr	r3, [r7, #16]
    5812:	429a      	cmp	r2, r3
    5814:	d104      	bne.n	5820 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    5816:	68b9      	ldr	r1, [r7, #8]
    5818:	68f8      	ldr	r0, [r7, #12]
    581a:	4b06      	ldr	r3, [pc, #24]	; (5834 <timer_add_timer_task+0xa4>)
    581c:	4798      	blx	r3
    581e:	e003      	b.n	5828 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    5820:	68b9      	ldr	r1, [r7, #8]
    5822:	69b8      	ldr	r0, [r7, #24]
    5824:	4b05      	ldr	r3, [pc, #20]	; (583c <timer_add_timer_task+0xac>)
    5826:	4798      	blx	r3
	}
}
    5828:	3720      	adds	r7, #32
    582a:	46bd      	mov	sp, r7
    582c:	bd80      	pop	{r7, pc}
    582e:	bf00      	nop
    5830:	000054fd 	.word	0x000054fd
    5834:	000062b1 	.word	0x000062b1
    5838:	00005515 	.word	0x00005515
    583c:	00006309 	.word	0x00006309

00005840 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5840:	b580      	push	{r7, lr}
    5842:	b086      	sub	sp, #24
    5844:	af00      	add	r7, sp, #0
    5846:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    584c:	693b      	ldr	r3, [r7, #16]
    584e:	3314      	adds	r3, #20
    5850:	4618      	mov	r0, r3
    5852:	4b27      	ldr	r3, [pc, #156]	; (58f0 <timer_process_counted+0xb0>)
    5854:	4798      	blx	r3
    5856:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    5858:	693b      	ldr	r3, [r7, #16]
    585a:	691b      	ldr	r3, [r3, #16]
    585c:	1c5a      	adds	r2, r3, #1
    585e:	693b      	ldr	r3, [r7, #16]
    5860:	611a      	str	r2, [r3, #16]
    5862:	693b      	ldr	r3, [r7, #16]
    5864:	691b      	ldr	r3, [r3, #16]
    5866:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5868:	693b      	ldr	r3, [r7, #16]
    586a:	7e1b      	ldrb	r3, [r3, #24]
    586c:	b2db      	uxtb	r3, r3
    586e:	f003 0301 	and.w	r3, r3, #1
    5872:	2b00      	cmp	r3, #0
    5874:	d106      	bne.n	5884 <timer_process_counted+0x44>
    5876:	693b      	ldr	r3, [r7, #16]
    5878:	7e1b      	ldrb	r3, [r3, #24]
    587a:	b2db      	uxtb	r3, r3
    587c:	f003 0302 	and.w	r3, r3, #2
    5880:	2b00      	cmp	r3, #0
    5882:	d027      	beq.n	58d4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5884:	693b      	ldr	r3, [r7, #16]
    5886:	7e1b      	ldrb	r3, [r3, #24]
    5888:	b2db      	uxtb	r3, r3
    588a:	f043 0302 	orr.w	r3, r3, #2
    588e:	b2da      	uxtb	r2, r3
    5890:	693b      	ldr	r3, [r7, #16]
    5892:	761a      	strb	r2, [r3, #24]
		return;
    5894:	e029      	b.n	58ea <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    5896:	697b      	ldr	r3, [r7, #20]
    5898:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    589a:	693b      	ldr	r3, [r7, #16]
    589c:	3314      	adds	r3, #20
    589e:	4618      	mov	r0, r3
    58a0:	4b14      	ldr	r3, [pc, #80]	; (58f4 <timer_process_counted+0xb4>)
    58a2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    58a4:	68bb      	ldr	r3, [r7, #8]
    58a6:	7c1b      	ldrb	r3, [r3, #16]
    58a8:	2b01      	cmp	r3, #1
    58aa:	d109      	bne.n	58c0 <timer_process_counted+0x80>
			tmp->time_label = time;
    58ac:	68bb      	ldr	r3, [r7, #8]
    58ae:	68fa      	ldr	r2, [r7, #12]
    58b0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    58b2:	693b      	ldr	r3, [r7, #16]
    58b4:	3314      	adds	r3, #20
    58b6:	68fa      	ldr	r2, [r7, #12]
    58b8:	68b9      	ldr	r1, [r7, #8]
    58ba:	4618      	mov	r0, r3
    58bc:	4b0e      	ldr	r3, [pc, #56]	; (58f8 <timer_process_counted+0xb8>)
    58be:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    58c0:	693b      	ldr	r3, [r7, #16]
    58c2:	3314      	adds	r3, #20
    58c4:	4618      	mov	r0, r3
    58c6:	4b0a      	ldr	r3, [pc, #40]	; (58f0 <timer_process_counted+0xb0>)
    58c8:	4798      	blx	r3
    58ca:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    58cc:	68bb      	ldr	r3, [r7, #8]
    58ce:	68db      	ldr	r3, [r3, #12]
    58d0:	68b8      	ldr	r0, [r7, #8]
    58d2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    58d4:	697b      	ldr	r3, [r7, #20]
    58d6:	2b00      	cmp	r3, #0
    58d8:	d007      	beq.n	58ea <timer_process_counted+0xaa>
    58da:	697b      	ldr	r3, [r7, #20]
    58dc:	685b      	ldr	r3, [r3, #4]
    58de:	68fa      	ldr	r2, [r7, #12]
    58e0:	1ad2      	subs	r2, r2, r3
    58e2:	697b      	ldr	r3, [r7, #20]
    58e4:	689b      	ldr	r3, [r3, #8]
    58e6:	429a      	cmp	r2, r3
    58e8:	d2d5      	bcs.n	5896 <timer_process_counted+0x56>
	}
}
    58ea:	3718      	adds	r7, #24
    58ec:	46bd      	mov	sp, r7
    58ee:	bd80      	pop	{r7, pc}
    58f0:	000054fd 	.word	0x000054fd
    58f4:	000063a9 	.word	0x000063a9
    58f8:	00005791 	.word	0x00005791

000058fc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    58fc:	b480      	push	{r7}
    58fe:	b085      	sub	sp, #20
    5900:	af00      	add	r7, sp, #0
    5902:	4603      	mov	r3, r0
    5904:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5906:	2300      	movs	r3, #0
    5908:	73fb      	strb	r3, [r7, #15]
    590a:	e029      	b.n	5960 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    590c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5910:	4a19      	ldr	r2, [pc, #100]	; (5978 <_usb_d_find_ep+0x7c>)
    5912:	015b      	lsls	r3, r3, #5
    5914:	4413      	add	r3, r2
    5916:	3301      	adds	r3, #1
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	79fa      	ldrb	r2, [r7, #7]
    591c:	429a      	cmp	r2, r3
    591e:	d102      	bne.n	5926 <_usb_d_find_ep+0x2a>
			return i;
    5920:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5924:	e022      	b.n	596c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5926:	f997 300f 	ldrsb.w	r3, [r7, #15]
    592a:	4a13      	ldr	r2, [pc, #76]	; (5978 <_usb_d_find_ep+0x7c>)
    592c:	015b      	lsls	r3, r3, #5
    592e:	4413      	add	r3, r2
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	2b00      	cmp	r3, #0
    5934:	d10e      	bne.n	5954 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5936:	79fb      	ldrb	r3, [r7, #7]
    5938:	f003 030f 	and.w	r3, r3, #15
    593c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    5940:	490d      	ldr	r1, [pc, #52]	; (5978 <_usb_d_find_ep+0x7c>)
    5942:	0152      	lsls	r2, r2, #5
    5944:	440a      	add	r2, r1
    5946:	3201      	adds	r2, #1
    5948:	7812      	ldrb	r2, [r2, #0]
    594a:	4293      	cmp	r3, r2
    594c:	d102      	bne.n	5954 <_usb_d_find_ep+0x58>
			return i;
    594e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5952:	e00b      	b.n	596c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5954:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5958:	b2db      	uxtb	r3, r3
    595a:	3301      	adds	r3, #1
    595c:	b2db      	uxtb	r3, r3
    595e:	73fb      	strb	r3, [r7, #15]
    5960:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5964:	2b03      	cmp	r3, #3
    5966:	ddd1      	ble.n	590c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    5968:	f04f 33ff 	mov.w	r3, #4294967295
}
    596c:	4618      	mov	r0, r3
    596e:	3714      	adds	r7, #20
    5970:	46bd      	mov	sp, r7
    5972:	f85d 7b04 	ldr.w	r7, [sp], #4
    5976:	4770      	bx	lr
    5978:	20002f78 	.word	0x20002f78

0000597c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    597c:	b580      	push	{r7, lr}
    597e:	b088      	sub	sp, #32
    5980:	af00      	add	r7, sp, #0
    5982:	60ba      	str	r2, [r7, #8]
    5984:	607b      	str	r3, [r7, #4]
    5986:	4603      	mov	r3, r0
    5988:	73fb      	strb	r3, [r7, #15]
    598a:	460b      	mov	r3, r1
    598c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    598e:	68bb      	ldr	r3, [r7, #8]
    5990:	617b      	str	r3, [r7, #20]
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	61bb      	str	r3, [r7, #24]
    5996:	7bbb      	ldrb	r3, [r7, #14]
    5998:	2b00      	cmp	r3, #0
    599a:	d004      	beq.n	59a6 <_usb_d_trans+0x2a>
    599c:	7bfb      	ldrb	r3, [r7, #15]
    599e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    59a2:	b2db      	uxtb	r3, r3
    59a4:	e003      	b.n	59ae <_usb_d_trans+0x32>
    59a6:	7bfb      	ldrb	r3, [r7, #15]
    59a8:	f003 030f 	and.w	r3, r3, #15
    59ac:	b2db      	uxtb	r3, r3
    59ae:	773b      	strb	r3, [r7, #28]
    59b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    59b4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    59b6:	f107 0314 	add.w	r3, r7, #20
    59ba:	4618      	mov	r0, r3
    59bc:	4b03      	ldr	r3, [pc, #12]	; (59cc <_usb_d_trans+0x50>)
    59be:	4798      	blx	r3
    59c0:	4603      	mov	r3, r0
}
    59c2:	4618      	mov	r0, r3
    59c4:	3720      	adds	r7, #32
    59c6:	46bd      	mov	sp, r7
    59c8:	bd80      	pop	{r7, pc}
    59ca:	bf00      	nop
    59cc:	0000db71 	.word	0x0000db71

000059d0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    59d0:	b480      	push	{r7}
    59d2:	b085      	sub	sp, #20
    59d4:	af00      	add	r7, sp, #0
    59d6:	60f8      	str	r0, [r7, #12]
    59d8:	60b9      	str	r1, [r7, #8]
    59da:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    59dc:	2300      	movs	r3, #0
}
    59de:	4618      	mov	r0, r3
    59e0:	3714      	adds	r7, #20
    59e2:	46bd      	mov	sp, r7
    59e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e8:	4770      	bx	lr
	...

000059ec <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    59ec:	b580      	push	{r7, lr}
    59ee:	b086      	sub	sp, #24
    59f0:	af00      	add	r7, sp, #0
    59f2:	4603      	mov	r3, r0
    59f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    59f6:	79fb      	ldrb	r3, [r7, #7]
    59f8:	4618      	mov	r0, r3
    59fa:	4b2a      	ldr	r3, [pc, #168]	; (5aa4 <usb_d_cb_trans_setup+0xb8>)
    59fc:	4798      	blx	r3
    59fe:	4603      	mov	r3, r0
    5a00:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5a06:	015b      	lsls	r3, r3, #5
    5a08:	4a27      	ldr	r2, [pc, #156]	; (5aa8 <usb_d_cb_trans_setup+0xbc>)
    5a0a:	4413      	add	r3, r2
    5a0c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    5a0e:	693b      	ldr	r3, [r7, #16]
    5a10:	330c      	adds	r3, #12
    5a12:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5a14:	79fb      	ldrb	r3, [r7, #7]
    5a16:	68f9      	ldr	r1, [r7, #12]
    5a18:	4618      	mov	r0, r3
    5a1a:	4b24      	ldr	r3, [pc, #144]	; (5aac <usb_d_cb_trans_setup+0xc0>)
    5a1c:	4798      	blx	r3
    5a1e:	4603      	mov	r3, r0
    5a20:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    5a22:	7afb      	ldrb	r3, [r7, #11]
    5a24:	2b08      	cmp	r3, #8
    5a26:	d00d      	beq.n	5a44 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a28:	79fb      	ldrb	r3, [r7, #7]
    5a2a:	2101      	movs	r1, #1
    5a2c:	4618      	mov	r0, r3
    5a2e:	4b20      	ldr	r3, [pc, #128]	; (5ab0 <usb_d_cb_trans_setup+0xc4>)
    5a30:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5a32:	79fb      	ldrb	r3, [r7, #7]
    5a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a38:	b2db      	uxtb	r3, r3
    5a3a:	2101      	movs	r1, #1
    5a3c:	4618      	mov	r0, r3
    5a3e:	4b1c      	ldr	r3, [pc, #112]	; (5ab0 <usb_d_cb_trans_setup+0xc4>)
    5a40:	4798      	blx	r3
		return;
    5a42:	e02b      	b.n	5a9c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5a44:	79fb      	ldrb	r3, [r7, #7]
    5a46:	2100      	movs	r1, #0
    5a48:	4618      	mov	r0, r3
    5a4a:	4b19      	ldr	r3, [pc, #100]	; (5ab0 <usb_d_cb_trans_setup+0xc4>)
    5a4c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5a4e:	79fb      	ldrb	r3, [r7, #7]
    5a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a54:	b2db      	uxtb	r3, r3
    5a56:	2100      	movs	r1, #0
    5a58:	4618      	mov	r0, r3
    5a5a:	4b15      	ldr	r3, [pc, #84]	; (5ab0 <usb_d_cb_trans_setup+0xc4>)
    5a5c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5a5e:	693b      	ldr	r3, [r7, #16]
    5a60:	2201      	movs	r2, #1
    5a62:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5a64:	693b      	ldr	r3, [r7, #16]
    5a66:	695b      	ldr	r3, [r3, #20]
    5a68:	79fa      	ldrb	r2, [r7, #7]
    5a6a:	68f9      	ldr	r1, [r7, #12]
    5a6c:	4610      	mov	r0, r2
    5a6e:	4798      	blx	r3
    5a70:	4603      	mov	r3, r0
    5a72:	f083 0301 	eor.w	r3, r3, #1
    5a76:	b2db      	uxtb	r3, r3
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d00f      	beq.n	5a9c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5a7c:	693b      	ldr	r3, [r7, #16]
    5a7e:	2205      	movs	r2, #5
    5a80:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a82:	79fb      	ldrb	r3, [r7, #7]
    5a84:	2101      	movs	r1, #1
    5a86:	4618      	mov	r0, r3
    5a88:	4b09      	ldr	r3, [pc, #36]	; (5ab0 <usb_d_cb_trans_setup+0xc4>)
    5a8a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5a8c:	79fb      	ldrb	r3, [r7, #7]
    5a8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a92:	b2db      	uxtb	r3, r3
    5a94:	2101      	movs	r1, #1
    5a96:	4618      	mov	r0, r3
    5a98:	4b05      	ldr	r3, [pc, #20]	; (5ab0 <usb_d_cb_trans_setup+0xc4>)
    5a9a:	4798      	blx	r3
	}
}
    5a9c:	3718      	adds	r7, #24
    5a9e:	46bd      	mov	sp, r7
    5aa0:	bd80      	pop	{r7, pc}
    5aa2:	bf00      	nop
    5aa4:	000058fd 	.word	0x000058fd
    5aa8:	20002f78 	.word	0x20002f78
    5aac:	0000dac9 	.word	0x0000dac9
    5ab0:	0000d941 	.word	0x0000d941

00005ab4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b084      	sub	sp, #16
    5ab8:	af00      	add	r7, sp, #0
    5aba:	4603      	mov	r3, r0
    5abc:	6039      	str	r1, [r7, #0]
    5abe:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5ac0:	79fb      	ldrb	r3, [r7, #7]
    5ac2:	4618      	mov	r0, r3
    5ac4:	4b0d      	ldr	r3, [pc, #52]	; (5afc <usb_d_cb_trans_more+0x48>)
    5ac6:	4798      	blx	r3
    5ac8:	4603      	mov	r3, r0
    5aca:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5ad0:	015b      	lsls	r3, r3, #5
    5ad2:	4a0b      	ldr	r2, [pc, #44]	; (5b00 <usb_d_cb_trans_more+0x4c>)
    5ad4:	4413      	add	r3, r2
    5ad6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5ad8:	68bb      	ldr	r3, [r7, #8]
    5ada:	789b      	ldrb	r3, [r3, #2]
    5adc:	2b03      	cmp	r3, #3
    5ade:	d107      	bne.n	5af0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5ae0:	68bb      	ldr	r3, [r7, #8]
    5ae2:	699b      	ldr	r3, [r3, #24]
    5ae4:	79fa      	ldrb	r2, [r7, #7]
    5ae6:	6839      	ldr	r1, [r7, #0]
    5ae8:	4610      	mov	r0, r2
    5aea:	4798      	blx	r3
    5aec:	4603      	mov	r3, r0
    5aee:	e000      	b.n	5af2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5af0:	2300      	movs	r3, #0
}
    5af2:	4618      	mov	r0, r3
    5af4:	3710      	adds	r7, #16
    5af6:	46bd      	mov	sp, r7
    5af8:	bd80      	pop	{r7, pc}
    5afa:	bf00      	nop
    5afc:	000058fd 	.word	0x000058fd
    5b00:	20002f78 	.word	0x20002f78

00005b04 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    5b04:	b590      	push	{r4, r7, lr}
    5b06:	b087      	sub	sp, #28
    5b08:	af02      	add	r7, sp, #8
    5b0a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	789b      	ldrb	r3, [r3, #2]
    5b10:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	7b1b      	ldrb	r3, [r3, #12]
    5b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	bf14      	ite	ne
    5b1e:	2301      	movne	r3, #1
    5b20:	2300      	moveq	r3, #0
    5b22:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    5b24:	7bfb      	ldrb	r3, [r7, #15]
    5b26:	2b03      	cmp	r3, #3
    5b28:	d13a      	bne.n	5ba0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	69db      	ldr	r3, [r3, #28]
    5b2e:	687a      	ldr	r2, [r7, #4]
    5b30:	7850      	ldrb	r0, [r2, #1]
    5b32:	687a      	ldr	r2, [r7, #4]
    5b34:	320c      	adds	r2, #12
    5b36:	2101      	movs	r1, #1
    5b38:	4798      	blx	r3
    5b3a:	4603      	mov	r3, r0
    5b3c:	737b      	strb	r3, [r7, #13]
		if (err) {
    5b3e:	7b7b      	ldrb	r3, [r7, #13]
    5b40:	2b00      	cmp	r3, #0
    5b42:	d015      	beq.n	5b70 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	2205      	movs	r2, #5
    5b48:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	2202      	movs	r2, #2
    5b4e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5b50:	7bbb      	ldrb	r3, [r7, #14]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d002      	beq.n	5b5c <usb_d_ctrl_trans_done+0x58>
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	785b      	ldrb	r3, [r3, #1]
    5b5a:	e004      	b.n	5b66 <usb_d_ctrl_trans_done+0x62>
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	785b      	ldrb	r3, [r3, #1]
    5b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b64:	b2db      	uxtb	r3, r3
    5b66:	2101      	movs	r1, #1
    5b68:	4618      	mov	r0, r3
    5b6a:	4b15      	ldr	r3, [pc, #84]	; (5bc0 <usb_d_ctrl_trans_done+0xbc>)
    5b6c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    5b6e:	e022      	b.n	5bb6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	2204      	movs	r2, #4
    5b74:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5b76:	687b      	ldr	r3, [r7, #4]
    5b78:	7858      	ldrb	r0, [r3, #1]
    5b7a:	7bbb      	ldrb	r3, [r7, #14]
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	bf14      	ite	ne
    5b80:	2301      	movne	r3, #1
    5b82:	2300      	moveq	r3, #0
    5b84:	b2db      	uxtb	r3, r3
    5b86:	f083 0301 	eor.w	r3, r3, #1
    5b8a:	b2db      	uxtb	r3, r3
    5b8c:	f003 0301 	and.w	r3, r3, #1
    5b90:	b2d9      	uxtb	r1, r3
    5b92:	2301      	movs	r3, #1
    5b94:	9300      	str	r3, [sp, #0]
    5b96:	2300      	movs	r3, #0
    5b98:	2200      	movs	r2, #0
    5b9a:	4c0a      	ldr	r4, [pc, #40]	; (5bc4 <usb_d_ctrl_trans_done+0xc0>)
    5b9c:	47a0      	blx	r4
}
    5b9e:	e00a      	b.n	5bb6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	69db      	ldr	r3, [r3, #28]
    5ba4:	687a      	ldr	r2, [r7, #4]
    5ba6:	7850      	ldrb	r0, [r2, #1]
    5ba8:	687a      	ldr	r2, [r7, #4]
    5baa:	320c      	adds	r2, #12
    5bac:	2100      	movs	r1, #0
    5bae:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	2202      	movs	r2, #2
    5bb4:	709a      	strb	r2, [r3, #2]
}
    5bb6:	bf00      	nop
    5bb8:	3714      	adds	r7, #20
    5bba:	46bd      	mov	sp, r7
    5bbc:	bd90      	pop	{r4, r7, pc}
    5bbe:	bf00      	nop
    5bc0:	0000d941 	.word	0x0000d941
    5bc4:	0000597d 	.word	0x0000597d

00005bc8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b086      	sub	sp, #24
    5bcc:	af00      	add	r7, sp, #0
    5bce:	4603      	mov	r3, r0
    5bd0:	60b9      	str	r1, [r7, #8]
    5bd2:	607a      	str	r2, [r7, #4]
    5bd4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5bd6:	7bfb      	ldrb	r3, [r7, #15]
    5bd8:	4618      	mov	r0, r3
    5bda:	4b2f      	ldr	r3, [pc, #188]	; (5c98 <_usb_d_cb_trans_done+0xd0>)
    5bdc:	4798      	blx	r3
    5bde:	4603      	mov	r3, r0
    5be0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5be6:	015b      	lsls	r3, r3, #5
    5be8:	4a2c      	ldr	r2, [pc, #176]	; (5c9c <_usb_d_cb_trans_done+0xd4>)
    5bea:	4413      	add	r3, r2
    5bec:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5bee:	68bb      	ldr	r3, [r7, #8]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	d10e      	bne.n	5c12 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5bf4:	693b      	ldr	r3, [r7, #16]
    5bf6:	2200      	movs	r2, #0
    5bf8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5bfa:	693b      	ldr	r3, [r7, #16]
    5bfc:	781b      	ldrb	r3, [r3, #0]
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d103      	bne.n	5c0a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    5c02:	6938      	ldr	r0, [r7, #16]
    5c04:	4b26      	ldr	r3, [pc, #152]	; (5ca0 <_usb_d_cb_trans_done+0xd8>)
    5c06:	4798      	blx	r3
			return;
    5c08:	e043      	b.n	5c92 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5c0a:	693b      	ldr	r3, [r7, #16]
    5c0c:	2201      	movs	r2, #1
    5c0e:	709a      	strb	r2, [r3, #2]
    5c10:	e038      	b.n	5c84 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    5c12:	68bb      	ldr	r3, [r7, #8]
    5c14:	2b01      	cmp	r3, #1
    5c16:	d113      	bne.n	5c40 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5c18:	693b      	ldr	r3, [r7, #16]
    5c1a:	2202      	movs	r2, #2
    5c1c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c1e:	693b      	ldr	r3, [r7, #16]
    5c20:	781b      	ldrb	r3, [r3, #0]
    5c22:	2b00      	cmp	r3, #0
    5c24:	d108      	bne.n	5c38 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5c26:	693b      	ldr	r3, [r7, #16]
    5c28:	2202      	movs	r2, #2
    5c2a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5c2c:	7bfb      	ldrb	r3, [r7, #15]
    5c2e:	2100      	movs	r1, #0
    5c30:	4618      	mov	r0, r3
    5c32:	4b1c      	ldr	r3, [pc, #112]	; (5ca4 <_usb_d_cb_trans_done+0xdc>)
    5c34:	4798      	blx	r3
    5c36:	e025      	b.n	5c84 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5c38:	693b      	ldr	r3, [r7, #16]
    5c3a:	2205      	movs	r2, #5
    5c3c:	709a      	strb	r2, [r3, #2]
    5c3e:	e021      	b.n	5c84 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    5c40:	68bb      	ldr	r3, [r7, #8]
    5c42:	2b02      	cmp	r3, #2
    5c44:	d10e      	bne.n	5c64 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5c46:	693b      	ldr	r3, [r7, #16]
    5c48:	2204      	movs	r2, #4
    5c4a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c4c:	693b      	ldr	r3, [r7, #16]
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	2b00      	cmp	r3, #0
    5c52:	d103      	bne.n	5c5c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5c54:	693b      	ldr	r3, [r7, #16]
    5c56:	2202      	movs	r2, #2
    5c58:	709a      	strb	r2, [r3, #2]
			return;
    5c5a:	e01a      	b.n	5c92 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5c5c:	693b      	ldr	r3, [r7, #16]
    5c5e:	2201      	movs	r2, #1
    5c60:	709a      	strb	r2, [r3, #2]
    5c62:	e00f      	b.n	5c84 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    5c64:	68bb      	ldr	r3, [r7, #8]
    5c66:	2b03      	cmp	r3, #3
    5c68:	d106      	bne.n	5c78 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5c6a:	693b      	ldr	r3, [r7, #16]
    5c6c:	2200      	movs	r2, #0
    5c6e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5c70:	693b      	ldr	r3, [r7, #16]
    5c72:	2205      	movs	r2, #5
    5c74:	70da      	strb	r2, [r3, #3]
    5c76:	e005      	b.n	5c84 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5c78:	693b      	ldr	r3, [r7, #16]
    5c7a:	2206      	movs	r2, #6
    5c7c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5c7e:	693b      	ldr	r3, [r7, #16]
    5c80:	2206      	movs	r2, #6
    5c82:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5c84:	693b      	ldr	r3, [r7, #16]
    5c86:	69db      	ldr	r3, [r3, #28]
    5c88:	693a      	ldr	r2, [r7, #16]
    5c8a:	78d1      	ldrb	r1, [r2, #3]
    5c8c:	687a      	ldr	r2, [r7, #4]
    5c8e:	7bf8      	ldrb	r0, [r7, #15]
    5c90:	4798      	blx	r3
}
    5c92:	3718      	adds	r7, #24
    5c94:	46bd      	mov	sp, r7
    5c96:	bd80      	pop	{r7, pc}
    5c98:	000058fd 	.word	0x000058fd
    5c9c:	20002f78 	.word	0x20002f78
    5ca0:	00005b05 	.word	0x00005b05
    5ca4:	0000d941 	.word	0x0000d941

00005ca8 <usb_d_init>:

int32_t usb_d_init(void)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    5cae:	4b21      	ldr	r3, [pc, #132]	; (5d34 <usb_d_init+0x8c>)
    5cb0:	4798      	blx	r3
    5cb2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    5cb4:	683b      	ldr	r3, [r7, #0]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	da01      	bge.n	5cbe <usb_d_init+0x16>
		return rc;
    5cba:	683b      	ldr	r3, [r7, #0]
    5cbc:	e036      	b.n	5d2c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5cbe:	2280      	movs	r2, #128	; 0x80
    5cc0:	2100      	movs	r1, #0
    5cc2:	481d      	ldr	r0, [pc, #116]	; (5d38 <usb_d_init+0x90>)
    5cc4:	4b1d      	ldr	r3, [pc, #116]	; (5d3c <usb_d_init+0x94>)
    5cc6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5cc8:	2300      	movs	r3, #0
    5cca:	71fb      	strb	r3, [r7, #7]
    5ccc:	e01e      	b.n	5d0c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5cce:	79fb      	ldrb	r3, [r7, #7]
    5cd0:	4a19      	ldr	r2, [pc, #100]	; (5d38 <usb_d_init+0x90>)
    5cd2:	015b      	lsls	r3, r3, #5
    5cd4:	4413      	add	r3, r2
    5cd6:	3301      	adds	r3, #1
    5cd8:	22ff      	movs	r2, #255	; 0xff
    5cda:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5cdc:	79fb      	ldrb	r3, [r7, #7]
    5cde:	4a16      	ldr	r2, [pc, #88]	; (5d38 <usb_d_init+0x90>)
    5ce0:	015b      	lsls	r3, r3, #5
    5ce2:	4413      	add	r3, r2
    5ce4:	3314      	adds	r3, #20
    5ce6:	4a16      	ldr	r2, [pc, #88]	; (5d40 <usb_d_init+0x98>)
    5ce8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5cea:	79fb      	ldrb	r3, [r7, #7]
    5cec:	4a12      	ldr	r2, [pc, #72]	; (5d38 <usb_d_init+0x90>)
    5cee:	015b      	lsls	r3, r3, #5
    5cf0:	4413      	add	r3, r2
    5cf2:	3318      	adds	r3, #24
    5cf4:	4a12      	ldr	r2, [pc, #72]	; (5d40 <usb_d_init+0x98>)
    5cf6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5cf8:	79fb      	ldrb	r3, [r7, #7]
    5cfa:	4a0f      	ldr	r2, [pc, #60]	; (5d38 <usb_d_init+0x90>)
    5cfc:	015b      	lsls	r3, r3, #5
    5cfe:	4413      	add	r3, r2
    5d00:	331c      	adds	r3, #28
    5d02:	4a0f      	ldr	r2, [pc, #60]	; (5d40 <usb_d_init+0x98>)
    5d04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5d06:	79fb      	ldrb	r3, [r7, #7]
    5d08:	3301      	adds	r3, #1
    5d0a:	71fb      	strb	r3, [r7, #7]
    5d0c:	79fb      	ldrb	r3, [r7, #7]
    5d0e:	2b03      	cmp	r3, #3
    5d10:	d9dd      	bls.n	5cce <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5d12:	490c      	ldr	r1, [pc, #48]	; (5d44 <usb_d_init+0x9c>)
    5d14:	2000      	movs	r0, #0
    5d16:	4b0c      	ldr	r3, [pc, #48]	; (5d48 <usb_d_init+0xa0>)
    5d18:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5d1a:	490c      	ldr	r1, [pc, #48]	; (5d4c <usb_d_init+0xa4>)
    5d1c:	2001      	movs	r0, #1
    5d1e:	4b0a      	ldr	r3, [pc, #40]	; (5d48 <usb_d_init+0xa0>)
    5d20:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5d22:	490b      	ldr	r1, [pc, #44]	; (5d50 <usb_d_init+0xa8>)
    5d24:	2002      	movs	r0, #2
    5d26:	4b08      	ldr	r3, [pc, #32]	; (5d48 <usb_d_init+0xa0>)
    5d28:	4798      	blx	r3
	return ERR_NONE;
    5d2a:	2300      	movs	r3, #0
}
    5d2c:	4618      	mov	r0, r3
    5d2e:	3708      	adds	r7, #8
    5d30:	46bd      	mov	sp, r7
    5d32:	bd80      	pop	{r7, pc}
    5d34:	0000d189 	.word	0x0000d189
    5d38:	20002f78 	.word	0x20002f78
    5d3c:	00016661 	.word	0x00016661
    5d40:	000059d1 	.word	0x000059d1
    5d44:	000059ed 	.word	0x000059ed
    5d48:	0000ddd1 	.word	0x0000ddd1
    5d4c:	00005ab5 	.word	0x00005ab5
    5d50:	00005bc9 	.word	0x00005bc9

00005d54 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	b082      	sub	sp, #8
    5d58:	af00      	add	r7, sp, #0
    5d5a:	4603      	mov	r3, r0
    5d5c:	6039      	str	r1, [r7, #0]
    5d5e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5d60:	79fb      	ldrb	r3, [r7, #7]
    5d62:	6839      	ldr	r1, [r7, #0]
    5d64:	4618      	mov	r0, r3
    5d66:	4b03      	ldr	r3, [pc, #12]	; (5d74 <usb_d_register_callback+0x20>)
    5d68:	4798      	blx	r3
}
    5d6a:	bf00      	nop
    5d6c:	3708      	adds	r7, #8
    5d6e:	46bd      	mov	sp, r7
    5d70:	bd80      	pop	{r7, pc}
    5d72:	bf00      	nop
    5d74:	0000dd89 	.word	0x0000dd89

00005d78 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5d7c:	4b02      	ldr	r3, [pc, #8]	; (5d88 <usb_d_enable+0x10>)
    5d7e:	4798      	blx	r3
    5d80:	4603      	mov	r3, r0
}
    5d82:	4618      	mov	r0, r3
    5d84:	bd80      	pop	{r7, pc}
    5d86:	bf00      	nop
    5d88:	0000d279 	.word	0x0000d279

00005d8c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5d8c:	b580      	push	{r7, lr}
    5d8e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5d90:	4b01      	ldr	r3, [pc, #4]	; (5d98 <usb_d_attach+0xc>)
    5d92:	4798      	blx	r3
}
    5d94:	bf00      	nop
    5d96:	bd80      	pop	{r7, pc}
    5d98:	0000d2fd 	.word	0x0000d2fd

00005d9c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5d9c:	b580      	push	{r7, lr}
    5d9e:	b082      	sub	sp, #8
    5da0:	af00      	add	r7, sp, #0
    5da2:	4603      	mov	r3, r0
    5da4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    5da6:	79fb      	ldrb	r3, [r7, #7]
    5da8:	4618      	mov	r0, r3
    5daa:	4b03      	ldr	r3, [pc, #12]	; (5db8 <usb_d_set_address+0x1c>)
    5dac:	4798      	blx	r3
}
    5dae:	bf00      	nop
    5db0:	3708      	adds	r7, #8
    5db2:	46bd      	mov	sp, r7
    5db4:	bd80      	pop	{r7, pc}
    5db6:	bf00      	nop
    5db8:	0000d311 	.word	0x0000d311

00005dbc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b082      	sub	sp, #8
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	4603      	mov	r3, r0
    5dc4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5dc6:	79fb      	ldrb	r3, [r7, #7]
    5dc8:	b29b      	uxth	r3, r3
    5dca:	461a      	mov	r2, r3
    5dcc:	2100      	movs	r1, #0
    5dce:	2000      	movs	r0, #0
    5dd0:	4b03      	ldr	r3, [pc, #12]	; (5de0 <usb_d_ep0_init+0x24>)
    5dd2:	4798      	blx	r3
    5dd4:	4603      	mov	r3, r0
}
    5dd6:	4618      	mov	r0, r3
    5dd8:	3708      	adds	r7, #8
    5dda:	46bd      	mov	sp, r7
    5ddc:	bd80      	pop	{r7, pc}
    5dde:	bf00      	nop
    5de0:	00005de5 	.word	0x00005de5

00005de4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	b086      	sub	sp, #24
    5de8:	af00      	add	r7, sp, #0
    5dea:	4603      	mov	r3, r0
    5dec:	71fb      	strb	r3, [r7, #7]
    5dee:	460b      	mov	r3, r1
    5df0:	71bb      	strb	r3, [r7, #6]
    5df2:	4613      	mov	r3, r2
    5df4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5df6:	79fb      	ldrb	r3, [r7, #7]
    5df8:	4618      	mov	r0, r3
    5dfa:	4b1e      	ldr	r3, [pc, #120]	; (5e74 <usb_d_ep_init+0x90>)
    5dfc:	4798      	blx	r3
    5dfe:	4603      	mov	r3, r0
    5e00:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e06:	015b      	lsls	r3, r3, #5
    5e08:	4a1b      	ldr	r2, [pc, #108]	; (5e78 <usb_d_ep_init+0x94>)
    5e0a:	4413      	add	r3, r2
    5e0c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e12:	2b00      	cmp	r3, #0
    5e14:	db02      	blt.n	5e1c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    5e16:	f06f 0313 	mvn.w	r3, #19
    5e1a:	e027      	b.n	5e6c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5e1c:	20ff      	movs	r0, #255	; 0xff
    5e1e:	4b15      	ldr	r3, [pc, #84]	; (5e74 <usb_d_ep_init+0x90>)
    5e20:	4798      	blx	r3
    5e22:	4603      	mov	r3, r0
    5e24:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    5e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	da02      	bge.n	5e34 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5e2e:	f06f 0314 	mvn.w	r3, #20
    5e32:	e01b      	b.n	5e6c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e38:	015b      	lsls	r3, r3, #5
    5e3a:	4a0f      	ldr	r2, [pc, #60]	; (5e78 <usb_d_ep_init+0x94>)
    5e3c:	4413      	add	r3, r2
    5e3e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5e40:	88ba      	ldrh	r2, [r7, #4]
    5e42:	79b9      	ldrb	r1, [r7, #6]
    5e44:	79fb      	ldrb	r3, [r7, #7]
    5e46:	4618      	mov	r0, r3
    5e48:	4b0c      	ldr	r3, [pc, #48]	; (5e7c <usb_d_ep_init+0x98>)
    5e4a:	4798      	blx	r3
    5e4c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5e4e:	68fb      	ldr	r3, [r7, #12]
    5e50:	2b00      	cmp	r3, #0
    5e52:	da01      	bge.n	5e58 <usb_d_ep_init+0x74>
		return rc;
    5e54:	68fb      	ldr	r3, [r7, #12]
    5e56:	e009      	b.n	5e6c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    5e58:	693b      	ldr	r3, [r7, #16]
    5e5a:	79fa      	ldrb	r2, [r7, #7]
    5e5c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5e5e:	79bb      	ldrb	r3, [r7, #6]
    5e60:	f003 0303 	and.w	r3, r3, #3
    5e64:	b2da      	uxtb	r2, r3
    5e66:	693b      	ldr	r3, [r7, #16]
    5e68:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    5e6a:	2300      	movs	r3, #0
}
    5e6c:	4618      	mov	r0, r3
    5e6e:	3718      	adds	r7, #24
    5e70:	46bd      	mov	sp, r7
    5e72:	bd80      	pop	{r7, pc}
    5e74:	000058fd 	.word	0x000058fd
    5e78:	20002f78 	.word	0x20002f78
    5e7c:	0000d3b1 	.word	0x0000d3b1

00005e80 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b084      	sub	sp, #16
    5e84:	af00      	add	r7, sp, #0
    5e86:	4603      	mov	r3, r0
    5e88:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e8a:	79fb      	ldrb	r3, [r7, #7]
    5e8c:	4618      	mov	r0, r3
    5e8e:	4b0d      	ldr	r3, [pc, #52]	; (5ec4 <usb_d_ep_deinit+0x44>)
    5e90:	4798      	blx	r3
    5e92:	4603      	mov	r3, r0
    5e94:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5e9a:	015b      	lsls	r3, r3, #5
    5e9c:	4a0a      	ldr	r2, [pc, #40]	; (5ec8 <usb_d_ep_deinit+0x48>)
    5e9e:	4413      	add	r3, r2
    5ea0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5ea6:	2b00      	cmp	r3, #0
    5ea8:	db07      	blt.n	5eba <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5eaa:	79fb      	ldrb	r3, [r7, #7]
    5eac:	4618      	mov	r0, r3
    5eae:	4b07      	ldr	r3, [pc, #28]	; (5ecc <usb_d_ep_deinit+0x4c>)
    5eb0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5eb2:	68bb      	ldr	r3, [r7, #8]
    5eb4:	22ff      	movs	r2, #255	; 0xff
    5eb6:	705a      	strb	r2, [r3, #1]
    5eb8:	e000      	b.n	5ebc <usb_d_ep_deinit+0x3c>
		return;
    5eba:	bf00      	nop
}
    5ebc:	3710      	adds	r7, #16
    5ebe:	46bd      	mov	sp, r7
    5ec0:	bd80      	pop	{r7, pc}
    5ec2:	bf00      	nop
    5ec4:	000058fd 	.word	0x000058fd
    5ec8:	20002f78 	.word	0x20002f78
    5ecc:	0000d4e5 	.word	0x0000d4e5

00005ed0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5ed0:	b580      	push	{r7, lr}
    5ed2:	b086      	sub	sp, #24
    5ed4:	af00      	add	r7, sp, #0
    5ed6:	4603      	mov	r3, r0
    5ed8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5eda:	79fb      	ldrb	r3, [r7, #7]
    5edc:	4618      	mov	r0, r3
    5ede:	4b15      	ldr	r3, [pc, #84]	; (5f34 <usb_d_ep_enable+0x64>)
    5ee0:	4798      	blx	r3
    5ee2:	4603      	mov	r3, r0
    5ee4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5eea:	015b      	lsls	r3, r3, #5
    5eec:	4a12      	ldr	r2, [pc, #72]	; (5f38 <usb_d_ep_enable+0x68>)
    5eee:	4413      	add	r3, r2
    5ef0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	da02      	bge.n	5f00 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    5efa:	f06f 0311 	mvn.w	r3, #17
    5efe:	e014      	b.n	5f2a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5f00:	693b      	ldr	r3, [r7, #16]
    5f02:	781b      	ldrb	r3, [r3, #0]
    5f04:	2b00      	cmp	r3, #0
    5f06:	d101      	bne.n	5f0c <usb_d_ep_enable+0x3c>
    5f08:	2202      	movs	r2, #2
    5f0a:	e000      	b.n	5f0e <usb_d_ep_enable+0x3e>
    5f0c:	2201      	movs	r2, #1
    5f0e:	693b      	ldr	r3, [r7, #16]
    5f10:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5f12:	79fb      	ldrb	r3, [r7, #7]
    5f14:	4618      	mov	r0, r3
    5f16:	4b09      	ldr	r3, [pc, #36]	; (5f3c <usb_d_ep_enable+0x6c>)
    5f18:	4798      	blx	r3
    5f1a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5f1c:	68fb      	ldr	r3, [r7, #12]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	da02      	bge.n	5f28 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5f22:	693b      	ldr	r3, [r7, #16]
    5f24:	2200      	movs	r2, #0
    5f26:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    5f28:	68fb      	ldr	r3, [r7, #12]
}
    5f2a:	4618      	mov	r0, r3
    5f2c:	3718      	adds	r7, #24
    5f2e:	46bd      	mov	sp, r7
    5f30:	bd80      	pop	{r7, pc}
    5f32:	bf00      	nop
    5f34:	000058fd 	.word	0x000058fd
    5f38:	20002f78 	.word	0x20002f78
    5f3c:	0000d5c9 	.word	0x0000d5c9

00005f40 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5f40:	b590      	push	{r4, r7, lr}
    5f42:	b08d      	sub	sp, #52	; 0x34
    5f44:	af02      	add	r7, sp, #8
    5f46:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	7a1b      	ldrb	r3, [r3, #8]
    5f4c:	4618      	mov	r0, r3
    5f4e:	4b51      	ldr	r3, [pc, #324]	; (6094 <usb_d_ep_transfer+0x154>)
    5f50:	4798      	blx	r3
    5f52:	4603      	mov	r3, r0
    5f54:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    5f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5f5a:	015b      	lsls	r3, r3, #5
    5f5c:	4a4e      	ldr	r2, [pc, #312]	; (6098 <usb_d_ep_transfer+0x158>)
    5f5e:	4413      	add	r3, r2
    5f60:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5f62:	687b      	ldr	r3, [r7, #4]
    5f64:	7a1b      	ldrb	r3, [r3, #8]
    5f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	bf14      	ite	ne
    5f6e:	2301      	movne	r3, #1
    5f70:	2300      	moveq	r3, #0
    5f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	7a5b      	ldrb	r3, [r3, #9]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	bf14      	ite	ne
    5f7e:	2301      	movne	r3, #1
    5f80:	2300      	moveq	r3, #0
    5f82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	685b      	ldr	r3, [r3, #4]
    5f8a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5f8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5f90:	2b00      	cmp	r3, #0
    5f92:	da02      	bge.n	5f9a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    5f94:	f06f 0311 	mvn.w	r3, #17
    5f98:	e077      	b.n	608a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    5f9a:	f107 0308 	add.w	r3, r7, #8
    5f9e:	4618      	mov	r0, r3
    5fa0:	4b3e      	ldr	r3, [pc, #248]	; (609c <usb_d_ep_transfer+0x15c>)
    5fa2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5fa4:	69bb      	ldr	r3, [r7, #24]
    5fa6:	789b      	ldrb	r3, [r3, #2]
    5fa8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    5faa:	7bfb      	ldrb	r3, [r7, #15]
    5fac:	b2db      	uxtb	r3, r3
    5fae:	2b01      	cmp	r3, #1
    5fb0:	d10c      	bne.n	5fcc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5fb2:	69bb      	ldr	r3, [r7, #24]
    5fb4:	2203      	movs	r2, #3
    5fb6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5fb8:	f107 0308 	add.w	r3, r7, #8
    5fbc:	4618      	mov	r0, r3
    5fbe:	4b38      	ldr	r3, [pc, #224]	; (60a0 <usb_d_ep_transfer+0x160>)
    5fc0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5fc2:	69bb      	ldr	r3, [r7, #24]
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d151      	bne.n	606e <usb_d_ep_transfer+0x12e>
    5fca:	e017      	b.n	5ffc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5fcc:	f107 0308 	add.w	r3, r7, #8
    5fd0:	4618      	mov	r0, r3
    5fd2:	4b33      	ldr	r3, [pc, #204]	; (60a0 <usb_d_ep_transfer+0x160>)
    5fd4:	4798      	blx	r3
		switch (state) {
    5fd6:	7bfb      	ldrb	r3, [r7, #15]
    5fd8:	b2db      	uxtb	r3, r3
    5fda:	2b05      	cmp	r3, #5
    5fdc:	d004      	beq.n	5fe8 <usb_d_ep_transfer+0xa8>
    5fde:	2b06      	cmp	r3, #6
    5fe0:	d004      	beq.n	5fec <usb_d_ep_transfer+0xac>
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d005      	beq.n	5ff2 <usb_d_ep_transfer+0xb2>
    5fe6:	e007      	b.n	5ff8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    5fe8:	2302      	movs	r3, #2
    5fea:	e04e      	b.n	608a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5fec:	f06f 030f 	mvn.w	r3, #15
    5ff0:	e04b      	b.n	608a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    5ff2:	f06f 0312 	mvn.w	r3, #18
    5ff6:	e048      	b.n	608a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    5ff8:	2301      	movs	r3, #1
    5ffa:	e046      	b.n	608a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	7c9b      	ldrb	r3, [r3, #18]
    6000:	b29a      	uxth	r2, r3
    6002:	69bb      	ldr	r3, [r7, #24]
    6004:	7cdb      	ldrb	r3, [r3, #19]
    6006:	b29b      	uxth	r3, r3
    6008:	021b      	lsls	r3, r3, #8
    600a:	b29b      	uxth	r3, r3
    600c:	4413      	add	r3, r2
    600e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6010:	8afb      	ldrh	r3, [r7, #22]
    6012:	2b00      	cmp	r3, #0
    6014:	d10b      	bne.n	602e <usb_d_ep_transfer+0xee>
			dir                 = true;
    6016:	2301      	movs	r3, #1
    6018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    601c:	2300      	movs	r3, #0
    601e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    6020:	2301      	movs	r3, #1
    6022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6026:	69bb      	ldr	r3, [r7, #24]
    6028:	2204      	movs	r2, #4
    602a:	709a      	strb	r2, [r3, #2]
    602c:	e01f      	b.n	606e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    602e:	69bb      	ldr	r3, [r7, #24]
    6030:	7b1b      	ldrb	r3, [r3, #12]
    6032:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6036:	2b00      	cmp	r3, #0
    6038:	bf14      	ite	ne
    603a:	2301      	movne	r3, #1
    603c:	2300      	moveq	r3, #0
    603e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    6042:	8afa      	ldrh	r2, [r7, #22]
    6044:	6a3b      	ldr	r3, [r7, #32]
    6046:	429a      	cmp	r2, r3
    6048:	d201      	bcs.n	604e <usb_d_ep_transfer+0x10e>
				len = req_len;
    604a:	8afb      	ldrh	r3, [r7, #22]
    604c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    604e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    6052:	2b00      	cmp	r3, #0
    6054:	d008      	beq.n	6068 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    6056:	8afa      	ldrh	r2, [r7, #22]
    6058:	6a3b      	ldr	r3, [r7, #32]
    605a:	429a      	cmp	r2, r3
    605c:	bf8c      	ite	hi
    605e:	2301      	movhi	r3, #1
    6060:	2300      	movls	r3, #0
    6062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    6066:	e002      	b.n	606e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    6068:	2300      	movs	r3, #0
    606a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	7a18      	ldrb	r0, [r3, #8]
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	681a      	ldr	r2, [r3, #0]
    6076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    607a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    607e:	9300      	str	r3, [sp, #0]
    6080:	6a3b      	ldr	r3, [r7, #32]
    6082:	4c08      	ldr	r4, [pc, #32]	; (60a4 <usb_d_ep_transfer+0x164>)
    6084:	47a0      	blx	r4
    6086:	6138      	str	r0, [r7, #16]
	return rc;
    6088:	693b      	ldr	r3, [r7, #16]
}
    608a:	4618      	mov	r0, r3
    608c:	372c      	adds	r7, #44	; 0x2c
    608e:	46bd      	mov	sp, r7
    6090:	bd90      	pop	{r4, r7, pc}
    6092:	bf00      	nop
    6094:	000058fd 	.word	0x000058fd
    6098:	20002f78 	.word	0x20002f78
    609c:	0000e53d 	.word	0x0000e53d
    60a0:	0000e563 	.word	0x0000e563
    60a4:	0000597d 	.word	0x0000597d

000060a8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    60a8:	b580      	push	{r7, lr}
    60aa:	b084      	sub	sp, #16
    60ac:	af00      	add	r7, sp, #0
    60ae:	4603      	mov	r3, r0
    60b0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    60b2:	79fb      	ldrb	r3, [r7, #7]
    60b4:	4618      	mov	r0, r3
    60b6:	4b0e      	ldr	r3, [pc, #56]	; (60f0 <usb_d_ep_abort+0x48>)
    60b8:	4798      	blx	r3
    60ba:	4603      	mov	r3, r0
    60bc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    60be:	f997 300f 	ldrsb.w	r3, [r7, #15]
    60c2:	015b      	lsls	r3, r3, #5
    60c4:	4a0b      	ldr	r2, [pc, #44]	; (60f4 <usb_d_ep_abort+0x4c>)
    60c6:	4413      	add	r3, r2
    60c8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    60ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    60ce:	2b00      	cmp	r3, #0
    60d0:	db0a      	blt.n	60e8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    60d2:	79fb      	ldrb	r3, [r7, #7]
    60d4:	4618      	mov	r0, r3
    60d6:	4b08      	ldr	r3, [pc, #32]	; (60f8 <usb_d_ep_abort+0x50>)
    60d8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    60da:	68bb      	ldr	r3, [r7, #8]
    60dc:	2201      	movs	r2, #1
    60de:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    60e0:	68bb      	ldr	r3, [r7, #8]
    60e2:	2204      	movs	r2, #4
    60e4:	70da      	strb	r2, [r3, #3]
    60e6:	e000      	b.n	60ea <usb_d_ep_abort+0x42>
		return;
    60e8:	bf00      	nop
}
    60ea:	3710      	adds	r7, #16
    60ec:	46bd      	mov	sp, r7
    60ee:	bd80      	pop	{r7, pc}
    60f0:	000058fd 	.word	0x000058fd
    60f4:	20002f78 	.word	0x20002f78
    60f8:	0000dd35 	.word	0x0000dd35

000060fc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    60fc:	b580      	push	{r7, lr}
    60fe:	b086      	sub	sp, #24
    6100:	af00      	add	r7, sp, #0
    6102:	4603      	mov	r3, r0
    6104:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6106:	79fb      	ldrb	r3, [r7, #7]
    6108:	4618      	mov	r0, r3
    610a:	4b1a      	ldr	r3, [pc, #104]	; (6174 <_usb_d_ep_halt_clr+0x78>)
    610c:	4798      	blx	r3
    610e:	4603      	mov	r3, r0
    6110:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6112:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6116:	015b      	lsls	r3, r3, #5
    6118:	4a17      	ldr	r2, [pc, #92]	; (6178 <_usb_d_ep_halt_clr+0x7c>)
    611a:	4413      	add	r3, r2
    611c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    611e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6122:	2b00      	cmp	r3, #0
    6124:	da02      	bge.n	612c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    6126:	f06f 0311 	mvn.w	r3, #17
    612a:	e01f      	b.n	616c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    612c:	79fb      	ldrb	r3, [r7, #7]
    612e:	2102      	movs	r1, #2
    6130:	4618      	mov	r0, r3
    6132:	4b12      	ldr	r3, [pc, #72]	; (617c <_usb_d_ep_halt_clr+0x80>)
    6134:	4798      	blx	r3
    6136:	4603      	mov	r3, r0
    6138:	2b00      	cmp	r3, #0
    613a:	d016      	beq.n	616a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    613c:	79fb      	ldrb	r3, [r7, #7]
    613e:	2100      	movs	r1, #0
    6140:	4618      	mov	r0, r3
    6142:	4b0e      	ldr	r3, [pc, #56]	; (617c <_usb_d_ep_halt_clr+0x80>)
    6144:	4798      	blx	r3
    6146:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    6148:	68fb      	ldr	r3, [r7, #12]
    614a:	2b00      	cmp	r3, #0
    614c:	da01      	bge.n	6152 <_usb_d_ep_halt_clr+0x56>
			return rc;
    614e:	68fb      	ldr	r3, [r7, #12]
    6150:	e00c      	b.n	616c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6152:	693b      	ldr	r3, [r7, #16]
    6154:	2201      	movs	r2, #1
    6156:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6158:	693b      	ldr	r3, [r7, #16]
    615a:	2203      	movs	r2, #3
    615c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    615e:	693b      	ldr	r3, [r7, #16]
    6160:	69db      	ldr	r3, [r3, #28]
    6162:	79f8      	ldrb	r0, [r7, #7]
    6164:	2200      	movs	r2, #0
    6166:	2103      	movs	r1, #3
    6168:	4798      	blx	r3
	}
	return ERR_NONE;
    616a:	2300      	movs	r3, #0
}
    616c:	4618      	mov	r0, r3
    616e:	3718      	adds	r7, #24
    6170:	46bd      	mov	sp, r7
    6172:	bd80      	pop	{r7, pc}
    6174:	000058fd 	.word	0x000058fd
    6178:	20002f78 	.word	0x20002f78
    617c:	0000d941 	.word	0x0000d941

00006180 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6180:	b580      	push	{r7, lr}
    6182:	b082      	sub	sp, #8
    6184:	af00      	add	r7, sp, #0
    6186:	4603      	mov	r3, r0
    6188:	460a      	mov	r2, r1
    618a:	71fb      	strb	r3, [r7, #7]
    618c:	4613      	mov	r3, r2
    618e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    6190:	79bb      	ldrb	r3, [r7, #6]
    6192:	2b00      	cmp	r3, #0
    6194:	d105      	bne.n	61a2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    6196:	79fb      	ldrb	r3, [r7, #7]
    6198:	4618      	mov	r0, r3
    619a:	4b0c      	ldr	r3, [pc, #48]	; (61cc <usb_d_ep_halt+0x4c>)
    619c:	4798      	blx	r3
    619e:	4603      	mov	r3, r0
    61a0:	e00f      	b.n	61c2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    61a2:	79bb      	ldrb	r3, [r7, #6]
    61a4:	2b01      	cmp	r3, #1
    61a6:	d106      	bne.n	61b6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    61a8:	79fb      	ldrb	r3, [r7, #7]
    61aa:	2101      	movs	r1, #1
    61ac:	4618      	mov	r0, r3
    61ae:	4b08      	ldr	r3, [pc, #32]	; (61d0 <usb_d_ep_halt+0x50>)
    61b0:	4798      	blx	r3
    61b2:	4603      	mov	r3, r0
    61b4:	e005      	b.n	61c2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    61b6:	79fb      	ldrb	r3, [r7, #7]
    61b8:	2102      	movs	r1, #2
    61ba:	4618      	mov	r0, r3
    61bc:	4b04      	ldr	r3, [pc, #16]	; (61d0 <usb_d_ep_halt+0x50>)
    61be:	4798      	blx	r3
    61c0:	4603      	mov	r3, r0
	}
}
    61c2:	4618      	mov	r0, r3
    61c4:	3708      	adds	r7, #8
    61c6:	46bd      	mov	sp, r7
    61c8:	bd80      	pop	{r7, pc}
    61ca:	bf00      	nop
    61cc:	000060fd 	.word	0x000060fd
    61d0:	0000d941 	.word	0x0000d941

000061d4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    61d4:	b580      	push	{r7, lr}
    61d6:	b086      	sub	sp, #24
    61d8:	af00      	add	r7, sp, #0
    61da:	4603      	mov	r3, r0
    61dc:	603a      	str	r2, [r7, #0]
    61de:	71fb      	strb	r3, [r7, #7]
    61e0:	460b      	mov	r3, r1
    61e2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    61e4:	79fb      	ldrb	r3, [r7, #7]
    61e6:	4618      	mov	r0, r3
    61e8:	4b16      	ldr	r3, [pc, #88]	; (6244 <usb_d_ep_register_callback+0x70>)
    61ea:	4798      	blx	r3
    61ec:	4603      	mov	r3, r0
    61ee:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    61f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    61f4:	015b      	lsls	r3, r3, #5
    61f6:	4a14      	ldr	r2, [pc, #80]	; (6248 <usb_d_ep_register_callback+0x74>)
    61f8:	4413      	add	r3, r2
    61fa:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    61fc:	683b      	ldr	r3, [r7, #0]
    61fe:	2b00      	cmp	r3, #0
    6200:	d001      	beq.n	6206 <usb_d_ep_register_callback+0x32>
    6202:	683b      	ldr	r3, [r7, #0]
    6204:	e000      	b.n	6208 <usb_d_ep_register_callback+0x34>
    6206:	4b11      	ldr	r3, [pc, #68]	; (624c <usb_d_ep_register_callback+0x78>)
    6208:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    620a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    620e:	2b00      	cmp	r3, #0
    6210:	db13      	blt.n	623a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    6212:	79bb      	ldrb	r3, [r7, #6]
    6214:	2b01      	cmp	r3, #1
    6216:	d008      	beq.n	622a <usb_d_ep_register_callback+0x56>
    6218:	2b02      	cmp	r3, #2
    621a:	d00a      	beq.n	6232 <usb_d_ep_register_callback+0x5e>
    621c:	2b00      	cmp	r3, #0
    621e:	d000      	beq.n	6222 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    6220:	e00c      	b.n	623c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6222:	693b      	ldr	r3, [r7, #16]
    6224:	68fa      	ldr	r2, [r7, #12]
    6226:	615a      	str	r2, [r3, #20]
		break;
    6228:	e008      	b.n	623c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    622a:	693b      	ldr	r3, [r7, #16]
    622c:	68fa      	ldr	r2, [r7, #12]
    622e:	619a      	str	r2, [r3, #24]
		break;
    6230:	e004      	b.n	623c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6232:	693b      	ldr	r3, [r7, #16]
    6234:	68fa      	ldr	r2, [r7, #12]
    6236:	61da      	str	r2, [r3, #28]
		break;
    6238:	e000      	b.n	623c <usb_d_ep_register_callback+0x68>
		return;
    623a:	bf00      	nop
	}
}
    623c:	3718      	adds	r7, #24
    623e:	46bd      	mov	sp, r7
    6240:	bd80      	pop	{r7, pc}
    6242:	bf00      	nop
    6244:	000058fd 	.word	0x000058fd
    6248:	20002f78 	.word	0x20002f78
    624c:	000059d1 	.word	0x000059d1

00006250 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    6250:	b480      	push	{r7}
    6252:	b085      	sub	sp, #20
    6254:	af00      	add	r7, sp, #0
    6256:	4603      	mov	r3, r0
    6258:	60b9      	str	r1, [r7, #8]
    625a:	607a      	str	r2, [r7, #4]
    625c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    625e:	7bfb      	ldrb	r3, [r7, #15]
    6260:	f083 0301 	eor.w	r3, r3, #1
    6264:	b2db      	uxtb	r3, r3
    6266:	2b00      	cmp	r3, #0
    6268:	d000      	beq.n	626c <assert+0x1c>
		__asm("BKPT #0");
    626a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    626c:	bf00      	nop
    626e:	3714      	adds	r7, #20
    6270:	46bd      	mov	sp, r7
    6272:	f85d 7b04 	ldr.w	r7, [sp], #4
    6276:	4770      	bx	lr

00006278 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    6278:	b480      	push	{r7}
    627a:	b085      	sub	sp, #20
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
    6280:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	681b      	ldr	r3, [r3, #0]
    6286:	60fb      	str	r3, [r7, #12]
    6288:	e008      	b.n	629c <is_list_element+0x24>
		if (it == element) {
    628a:	68fa      	ldr	r2, [r7, #12]
    628c:	683b      	ldr	r3, [r7, #0]
    628e:	429a      	cmp	r2, r3
    6290:	d101      	bne.n	6296 <is_list_element+0x1e>
			return true;
    6292:	2301      	movs	r3, #1
    6294:	e006      	b.n	62a4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    6296:	68fb      	ldr	r3, [r7, #12]
    6298:	681b      	ldr	r3, [r3, #0]
    629a:	60fb      	str	r3, [r7, #12]
    629c:	68fb      	ldr	r3, [r7, #12]
    629e:	2b00      	cmp	r3, #0
    62a0:	d1f3      	bne.n	628a <is_list_element+0x12>
		}
	}

	return false;
    62a2:	2300      	movs	r3, #0
}
    62a4:	4618      	mov	r0, r3
    62a6:	3714      	adds	r7, #20
    62a8:	46bd      	mov	sp, r7
    62aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ae:	4770      	bx	lr

000062b0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    62b0:	b580      	push	{r7, lr}
    62b2:	b082      	sub	sp, #8
    62b4:	af00      	add	r7, sp, #0
    62b6:	6078      	str	r0, [r7, #4]
    62b8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    62ba:	6839      	ldr	r1, [r7, #0]
    62bc:	6878      	ldr	r0, [r7, #4]
    62be:	4b0f      	ldr	r3, [pc, #60]	; (62fc <list_insert_as_head+0x4c>)
    62c0:	4798      	blx	r3
    62c2:	4603      	mov	r3, r0
    62c4:	2b00      	cmp	r3, #0
    62c6:	bf14      	ite	ne
    62c8:	2301      	movne	r3, #1
    62ca:	2300      	moveq	r3, #0
    62cc:	b2db      	uxtb	r3, r3
    62ce:	f083 0301 	eor.w	r3, r3, #1
    62d2:	b2db      	uxtb	r3, r3
    62d4:	f003 0301 	and.w	r3, r3, #1
    62d8:	b2db      	uxtb	r3, r3
    62da:	2239      	movs	r2, #57	; 0x39
    62dc:	4908      	ldr	r1, [pc, #32]	; (6300 <list_insert_as_head+0x50>)
    62de:	4618      	mov	r0, r3
    62e0:	4b08      	ldr	r3, [pc, #32]	; (6304 <list_insert_as_head+0x54>)
    62e2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	681a      	ldr	r2, [r3, #0]
    62e8:	683b      	ldr	r3, [r7, #0]
    62ea:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	683a      	ldr	r2, [r7, #0]
    62f0:	601a      	str	r2, [r3, #0]
}
    62f2:	bf00      	nop
    62f4:	3708      	adds	r7, #8
    62f6:	46bd      	mov	sp, r7
    62f8:	bd80      	pop	{r7, pc}
    62fa:	bf00      	nop
    62fc:	00006279 	.word	0x00006279
    6300:	0001715c 	.word	0x0001715c
    6304:	00006251 	.word	0x00006251

00006308 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    6308:	b480      	push	{r7}
    630a:	b083      	sub	sp, #12
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
    6310:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	681a      	ldr	r2, [r3, #0]
    6316:	683b      	ldr	r3, [r7, #0]
    6318:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	683a      	ldr	r2, [r7, #0]
    631e:	601a      	str	r2, [r3, #0]
}
    6320:	bf00      	nop
    6322:	370c      	adds	r7, #12
    6324:	46bd      	mov	sp, r7
    6326:	f85d 7b04 	ldr.w	r7, [sp], #4
    632a:	4770      	bx	lr

0000632c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    632c:	b580      	push	{r7, lr}
    632e:	b084      	sub	sp, #16
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
    6334:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    633c:	6839      	ldr	r1, [r7, #0]
    633e:	6878      	ldr	r0, [r7, #4]
    6340:	4b16      	ldr	r3, [pc, #88]	; (639c <list_insert_at_end+0x70>)
    6342:	4798      	blx	r3
    6344:	4603      	mov	r3, r0
    6346:	2b00      	cmp	r3, #0
    6348:	bf14      	ite	ne
    634a:	2301      	movne	r3, #1
    634c:	2300      	moveq	r3, #0
    634e:	b2db      	uxtb	r3, r3
    6350:	f083 0301 	eor.w	r3, r3, #1
    6354:	b2db      	uxtb	r3, r3
    6356:	f003 0301 	and.w	r3, r3, #1
    635a:	b2db      	uxtb	r3, r3
    635c:	224f      	movs	r2, #79	; 0x4f
    635e:	4910      	ldr	r1, [pc, #64]	; (63a0 <list_insert_at_end+0x74>)
    6360:	4618      	mov	r0, r3
    6362:	4b10      	ldr	r3, [pc, #64]	; (63a4 <list_insert_at_end+0x78>)
    6364:	4798      	blx	r3

	if (!list->head) {
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	2b00      	cmp	r3, #0
    636c:	d109      	bne.n	6382 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	683a      	ldr	r2, [r7, #0]
    6372:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    6374:	683b      	ldr	r3, [r7, #0]
    6376:	2200      	movs	r2, #0
    6378:	601a      	str	r2, [r3, #0]
		return;
    637a:	e00c      	b.n	6396 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    637c:	68fb      	ldr	r3, [r7, #12]
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    6382:	68fb      	ldr	r3, [r7, #12]
    6384:	681b      	ldr	r3, [r3, #0]
    6386:	2b00      	cmp	r3, #0
    6388:	d1f8      	bne.n	637c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    638a:	68fb      	ldr	r3, [r7, #12]
    638c:	683a      	ldr	r2, [r7, #0]
    638e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6390:	683b      	ldr	r3, [r7, #0]
    6392:	2200      	movs	r2, #0
    6394:	601a      	str	r2, [r3, #0]
}
    6396:	3710      	adds	r7, #16
    6398:	46bd      	mov	sp, r7
    639a:	bd80      	pop	{r7, pc}
    639c:	00006279 	.word	0x00006279
    63a0:	0001715c 	.word	0x0001715c
    63a4:	00006251 	.word	0x00006251

000063a8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    63a8:	b480      	push	{r7}
    63aa:	b085      	sub	sp, #20
    63ac:	af00      	add	r7, sp, #0
    63ae:	6078      	str	r0, [r7, #4]
	if (list->head) {
    63b0:	687b      	ldr	r3, [r7, #4]
    63b2:	681b      	ldr	r3, [r3, #0]
    63b4:	2b00      	cmp	r3, #0
    63b6:	d009      	beq.n	63cc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	681b      	ldr	r3, [r3, #0]
    63c2:	681a      	ldr	r2, [r3, #0]
    63c4:	687b      	ldr	r3, [r7, #4]
    63c6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    63c8:	68fb      	ldr	r3, [r7, #12]
    63ca:	e000      	b.n	63ce <list_remove_head+0x26>
	}

	return NULL;
    63cc:	2300      	movs	r3, #0
}
    63ce:	4618      	mov	r0, r3
    63d0:	3714      	adds	r7, #20
    63d2:	46bd      	mov	sp, r7
    63d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d8:	4770      	bx	lr
	...

000063dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    63dc:	b480      	push	{r7}
    63de:	b083      	sub	sp, #12
    63e0:	af00      	add	r7, sp, #0
    63e2:	4603      	mov	r3, r0
    63e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    63e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    63ea:	2b00      	cmp	r3, #0
    63ec:	db0b      	blt.n	6406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63ee:	4909      	ldr	r1, [pc, #36]	; (6414 <__NVIC_EnableIRQ+0x38>)
    63f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    63f4:	095b      	lsrs	r3, r3, #5
    63f6:	88fa      	ldrh	r2, [r7, #6]
    63f8:	f002 021f 	and.w	r2, r2, #31
    63fc:	2001      	movs	r0, #1
    63fe:	fa00 f202 	lsl.w	r2, r0, r2
    6402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6406:	bf00      	nop
    6408:	370c      	adds	r7, #12
    640a:	46bd      	mov	sp, r7
    640c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6410:	4770      	bx	lr
    6412:	bf00      	nop
    6414:	e000e100 	.word	0xe000e100

00006418 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    6418:	b480      	push	{r7}
    641a:	b083      	sub	sp, #12
    641c:	af00      	add	r7, sp, #0
    641e:	4603      	mov	r3, r0
    6420:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6426:	2b00      	cmp	r3, #0
    6428:	db10      	blt.n	644c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    642a:	490b      	ldr	r1, [pc, #44]	; (6458 <__NVIC_DisableIRQ+0x40>)
    642c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6430:	095b      	lsrs	r3, r3, #5
    6432:	88fa      	ldrh	r2, [r7, #6]
    6434:	f002 021f 	and.w	r2, r2, #31
    6438:	2001      	movs	r0, #1
    643a:	fa00 f202 	lsl.w	r2, r0, r2
    643e:	3320      	adds	r3, #32
    6440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6444:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6448:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    644c:	bf00      	nop
    644e:	370c      	adds	r7, #12
    6450:	46bd      	mov	sp, r7
    6452:	f85d 7b04 	ldr.w	r7, [sp], #4
    6456:	4770      	bx	lr
    6458:	e000e100 	.word	0xe000e100

0000645c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    645c:	b480      	push	{r7}
    645e:	b083      	sub	sp, #12
    6460:	af00      	add	r7, sp, #0
    6462:	4603      	mov	r3, r0
    6464:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    646a:	2b00      	cmp	r3, #0
    646c:	db0c      	blt.n	6488 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    646e:	4909      	ldr	r1, [pc, #36]	; (6494 <__NVIC_ClearPendingIRQ+0x38>)
    6470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6474:	095b      	lsrs	r3, r3, #5
    6476:	88fa      	ldrh	r2, [r7, #6]
    6478:	f002 021f 	and.w	r2, r2, #31
    647c:	2001      	movs	r0, #1
    647e:	fa00 f202 	lsl.w	r2, r0, r2
    6482:	3360      	adds	r3, #96	; 0x60
    6484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6488:	bf00      	nop
    648a:	370c      	adds	r7, #12
    648c:	46bd      	mov	sp, r7
    648e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6492:	4770      	bx	lr
    6494:	e000e100 	.word	0xe000e100

00006498 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6498:	b480      	push	{r7}
    649a:	b083      	sub	sp, #12
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    64a4:	095b      	lsrs	r3, r3, #5
    64a6:	f003 0301 	and.w	r3, r3, #1
    64aa:	2b00      	cmp	r3, #0
    64ac:	bf14      	ite	ne
    64ae:	2301      	movne	r3, #1
    64b0:	2300      	moveq	r3, #0
    64b2:	b2db      	uxtb	r3, r3
}
    64b4:	4618      	mov	r0, r3
    64b6:	370c      	adds	r7, #12
    64b8:	46bd      	mov	sp, r7
    64ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    64be:	4770      	bx	lr

000064c0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    64c0:	b480      	push	{r7}
    64c2:	b083      	sub	sp, #12
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
    64c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	683a      	ldr	r2, [r7, #0]
    64ce:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    64d0:	bf00      	nop
    64d2:	370c      	adds	r7, #12
    64d4:	46bd      	mov	sp, r7
    64d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64da:	4770      	bx	lr

000064dc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    64dc:	b480      	push	{r7}
    64de:	b083      	sub	sp, #12
    64e0:	af00      	add	r7, sp, #0
    64e2:	6078      	str	r0, [r7, #4]
    64e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    64e6:	687b      	ldr	r3, [r7, #4]
    64e8:	683a      	ldr	r2, [r7, #0]
    64ea:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    64ec:	bf00      	nop
    64ee:	370c      	adds	r7, #12
    64f0:	46bd      	mov	sp, r7
    64f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    64f6:	4770      	bx	lr

000064f8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    64f8:	b480      	push	{r7}
    64fa:	b083      	sub	sp, #12
    64fc:	af00      	add	r7, sp, #0
    64fe:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    6500:	687b      	ldr	r3, [r7, #4]
    6502:	699b      	ldr	r3, [r3, #24]
    6504:	f043 0201 	orr.w	r2, r3, #1
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    650c:	bf00      	nop
    650e:	370c      	adds	r7, #12
    6510:	46bd      	mov	sp, r7
    6512:	f85d 7b04 	ldr.w	r7, [sp], #4
    6516:	4770      	bx	lr

00006518 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    6518:	b480      	push	{r7}
    651a:	b085      	sub	sp, #20
    651c:	af00      	add	r7, sp, #0
    651e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	699b      	ldr	r3, [r3, #24]
    6524:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    6526:	68fb      	ldr	r3, [r7, #12]
    6528:	f003 0301 	and.w	r3, r3, #1
    652c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    652e:	68fb      	ldr	r3, [r7, #12]
    6530:	2b00      	cmp	r3, #0
    6532:	bf14      	ite	ne
    6534:	2301      	movne	r3, #1
    6536:	2300      	moveq	r3, #0
    6538:	b2db      	uxtb	r3, r3
}
    653a:	4618      	mov	r0, r3
    653c:	3714      	adds	r7, #20
    653e:	46bd      	mov	sp, r7
    6540:	f85d 7b04 	ldr.w	r7, [sp], #4
    6544:	4770      	bx	lr

00006546 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    6546:	b480      	push	{r7}
    6548:	b083      	sub	sp, #12
    654a:	af00      	add	r7, sp, #0
    654c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	699b      	ldr	r3, [r3, #24]
    6552:	f023 0201 	bic.w	r2, r3, #1
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    655a:	bf00      	nop
    655c:	370c      	adds	r7, #12
    655e:	46bd      	mov	sp, r7
    6560:	f85d 7b04 	ldr.w	r7, [sp], #4
    6564:	4770      	bx	lr

00006566 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6566:	b480      	push	{r7}
    6568:	b083      	sub	sp, #12
    656a:	af00      	add	r7, sp, #0
    656c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	699b      	ldr	r3, [r3, #24]
    6572:	f043 0202 	orr.w	r2, r3, #2
    6576:	687b      	ldr	r3, [r7, #4]
    6578:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    657a:	bf00      	nop
    657c:	370c      	adds	r7, #12
    657e:	46bd      	mov	sp, r7
    6580:	f85d 7b04 	ldr.w	r7, [sp], #4
    6584:	4770      	bx	lr

00006586 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6586:	b480      	push	{r7}
    6588:	b083      	sub	sp, #12
    658a:	af00      	add	r7, sp, #0
    658c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	699b      	ldr	r3, [r3, #24]
    6592:	f023 0202 	bic.w	r2, r3, #2
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    659a:	bf00      	nop
    659c:	370c      	adds	r7, #12
    659e:	46bd      	mov	sp, r7
    65a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a4:	4770      	bx	lr

000065a6 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    65a6:	b480      	push	{r7}
    65a8:	b083      	sub	sp, #12
    65aa:	af00      	add	r7, sp, #0
    65ac:	6078      	str	r0, [r7, #4]
    65ae:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	699a      	ldr	r2, [r3, #24]
    65b4:	683b      	ldr	r3, [r7, #0]
    65b6:	431a      	orrs	r2, r3
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65bc:	bf00      	nop
    65be:	370c      	adds	r7, #12
    65c0:	46bd      	mov	sp, r7
    65c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65c6:	4770      	bx	lr

000065c8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    65c8:	b480      	push	{r7}
    65ca:	b083      	sub	sp, #12
    65cc:	af00      	add	r7, sp, #0
    65ce:	6078      	str	r0, [r7, #4]
    65d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	683a      	ldr	r2, [r7, #0]
    65d6:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    65d8:	bf00      	nop
    65da:	370c      	adds	r7, #12
    65dc:	46bd      	mov	sp, r7
    65de:	f85d 7b04 	ldr.w	r7, [sp], #4
    65e2:	4770      	bx	lr

000065e4 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    65e4:	b480      	push	{r7}
    65e6:	b083      	sub	sp, #12
    65e8:	af00      	add	r7, sp, #0
    65ea:	6078      	str	r0, [r7, #4]
    65ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	683a      	ldr	r2, [r7, #0]
    65f2:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    65f4:	bf00      	nop
    65f6:	370c      	adds	r7, #12
    65f8:	46bd      	mov	sp, r7
    65fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fe:	4770      	bx	lr

00006600 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    6600:	b480      	push	{r7}
    6602:	b083      	sub	sp, #12
    6604:	af00      	add	r7, sp, #0
    6606:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    660c:	4618      	mov	r0, r3
    660e:	370c      	adds	r7, #12
    6610:	46bd      	mov	sp, r7
    6612:	f85d 7b04 	ldr.w	r7, [sp], #4
    6616:	4770      	bx	lr

00006618 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    6618:	b480      	push	{r7}
    661a:	b083      	sub	sp, #12
    661c:	af00      	add	r7, sp, #0
    661e:	6078      	str	r0, [r7, #4]
    6620:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    6622:	687b      	ldr	r3, [r7, #4]
    6624:	683a      	ldr	r2, [r7, #0]
    6626:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6628:	bf00      	nop
    662a:	370c      	adds	r7, #12
    662c:	46bd      	mov	sp, r7
    662e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6632:	4770      	bx	lr

00006634 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    6634:	b480      	push	{r7}
    6636:	b083      	sub	sp, #12
    6638:	af00      	add	r7, sp, #0
    663a:	6078      	str	r0, [r7, #4]
    663c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	683a      	ldr	r2, [r7, #0]
    6642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    6646:	bf00      	nop
    6648:	370c      	adds	r7, #12
    664a:	46bd      	mov	sp, r7
    664c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6650:	4770      	bx	lr

00006652 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    6652:	b480      	push	{r7}
    6654:	b083      	sub	sp, #12
    6656:	af00      	add	r7, sp, #0
    6658:	6078      	str	r0, [r7, #4]
    665a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	683a      	ldr	r2, [r7, #0]
    6660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6664:	bf00      	nop
    6666:	370c      	adds	r7, #12
    6668:	46bd      	mov	sp, r7
    666a:	f85d 7b04 	ldr.w	r7, [sp], #4
    666e:	4770      	bx	lr

00006670 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    6670:	b480      	push	{r7}
    6672:	b083      	sub	sp, #12
    6674:	af00      	add	r7, sp, #0
    6676:	6078      	str	r0, [r7, #4]
    6678:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    667a:	687b      	ldr	r3, [r7, #4]
    667c:	683a      	ldr	r2, [r7, #0]
    667e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    6682:	bf00      	nop
    6684:	370c      	adds	r7, #12
    6686:	46bd      	mov	sp, r7
    6688:	f85d 7b04 	ldr.w	r7, [sp], #4
    668c:	4770      	bx	lr

0000668e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    668e:	b480      	push	{r7}
    6690:	b083      	sub	sp, #12
    6692:	af00      	add	r7, sp, #0
    6694:	6078      	str	r0, [r7, #4]
    6696:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	683a      	ldr	r2, [r7, #0]
    669c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    66a0:	bf00      	nop
    66a2:	370c      	adds	r7, #12
    66a4:	46bd      	mov	sp, r7
    66a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66aa:	4770      	bx	lr

000066ac <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    66ac:	b480      	push	{r7}
    66ae:	b083      	sub	sp, #12
    66b0:	af00      	add	r7, sp, #0
    66b2:	6078      	str	r0, [r7, #4]
    66b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	683a      	ldr	r2, [r7, #0]
    66ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    66be:	bf00      	nop
    66c0:	370c      	adds	r7, #12
    66c2:	46bd      	mov	sp, r7
    66c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c8:	4770      	bx	lr

000066ca <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    66ca:	b480      	push	{r7}
    66cc:	b083      	sub	sp, #12
    66ce:	af00      	add	r7, sp, #0
    66d0:	6078      	str	r0, [r7, #4]
    66d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	683a      	ldr	r2, [r7, #0]
    66d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    66dc:	bf00      	nop
    66de:	370c      	adds	r7, #12
    66e0:	46bd      	mov	sp, r7
    66e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    66e6:	4770      	bx	lr

000066e8 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    66e8:	b480      	push	{r7}
    66ea:	b083      	sub	sp, #12
    66ec:	af00      	add	r7, sp, #0
    66ee:	6078      	str	r0, [r7, #4]
    66f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	683a      	ldr	r2, [r7, #0]
    66f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    66fa:	bf00      	nop
    66fc:	370c      	adds	r7, #12
    66fe:	46bd      	mov	sp, r7
    6700:	f85d 7b04 	ldr.w	r7, [sp], #4
    6704:	4770      	bx	lr

00006706 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    6706:	b480      	push	{r7}
    6708:	b083      	sub	sp, #12
    670a:	af00      	add	r7, sp, #0
    670c:	6078      	str	r0, [r7, #4]
    670e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	683a      	ldr	r2, [r7, #0]
    6714:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6718:	bf00      	nop
    671a:	370c      	adds	r7, #12
    671c:	46bd      	mov	sp, r7
    671e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6722:	4770      	bx	lr

00006724 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6724:	b480      	push	{r7}
    6726:	b083      	sub	sp, #12
    6728:	af00      	add	r7, sp, #0
    672a:	6078      	str	r0, [r7, #4]
    672c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	683a      	ldr	r2, [r7, #0]
    6732:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6736:	bf00      	nop
    6738:	370c      	adds	r7, #12
    673a:	46bd      	mov	sp, r7
    673c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6740:	4770      	bx	lr
	...

00006744 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6744:	b580      	push	{r7, lr}
    6746:	b082      	sub	sp, #8
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
    674c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    674e:	687b      	ldr	r3, [r7, #4]
    6750:	683a      	ldr	r2, [r7, #0]
    6752:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	4618      	mov	r0, r3
    675a:	4b55      	ldr	r3, [pc, #340]	; (68b0 <_can_async_init+0x16c>)
    675c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    675e:	bf00      	nop
    6760:	687b      	ldr	r3, [r7, #4]
    6762:	681b      	ldr	r3, [r3, #0]
    6764:	4618      	mov	r0, r3
    6766:	4b53      	ldr	r3, [pc, #332]	; (68b4 <_can_async_init+0x170>)
    6768:	4798      	blx	r3
    676a:	4603      	mov	r3, r0
    676c:	f083 0301 	eor.w	r3, r3, #1
    6770:	b2db      	uxtb	r3, r3
    6772:	2b00      	cmp	r3, #0
    6774:	d1f4      	bne.n	6760 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6776:	687b      	ldr	r3, [r7, #4]
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	4618      	mov	r0, r3
    677c:	4b4e      	ldr	r3, [pc, #312]	; (68b8 <_can_async_init+0x174>)
    677e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    6780:	683b      	ldr	r3, [r7, #0]
    6782:	4a4e      	ldr	r2, [pc, #312]	; (68bc <_can_async_init+0x178>)
    6784:	4293      	cmp	r3, r2
    6786:	d17a      	bne.n	687e <_can_async_init+0x13a>
		_can1_dev    = dev;
    6788:	4a4d      	ldr	r2, [pc, #308]	; (68c0 <_can_async_init+0x17c>)
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	4a4c      	ldr	r2, [pc, #304]	; (68c4 <_can_async_init+0x180>)
    6792:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	681b      	ldr	r3, [r3, #0]
    6798:	f44f 7140 	mov.w	r1, #768	; 0x300
    679c:	4618      	mov	r0, r3
    679e:	4b4a      	ldr	r3, [pc, #296]	; (68c8 <_can_async_init+0x184>)
    67a0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	681b      	ldr	r3, [r3, #0]
    67a6:	2102      	movs	r1, #2
    67a8:	4618      	mov	r0, r3
    67aa:	4b48      	ldr	r3, [pc, #288]	; (68cc <_can_async_init+0x188>)
    67ac:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	4947      	ldr	r1, [pc, #284]	; (68d0 <_can_async_init+0x18c>)
    67b4:	4618      	mov	r0, r3
    67b6:	4b47      	ldr	r3, [pc, #284]	; (68d4 <_can_async_init+0x190>)
    67b8:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    67ba:	687b      	ldr	r3, [r7, #4]
    67bc:	681b      	ldr	r3, [r3, #0]
    67be:	4946      	ldr	r1, [pc, #280]	; (68d8 <_can_async_init+0x194>)
    67c0:	4618      	mov	r0, r3
    67c2:	4b46      	ldr	r3, [pc, #280]	; (68dc <_can_async_init+0x198>)
    67c4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    67c6:	687b      	ldr	r3, [r7, #4]
    67c8:	681a      	ldr	r2, [r3, #0]
    67ca:	4b45      	ldr	r3, [pc, #276]	; (68e0 <_can_async_init+0x19c>)
    67cc:	b29b      	uxth	r3, r3
    67ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    67d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    67d6:	4619      	mov	r1, r3
    67d8:	4610      	mov	r0, r2
    67da:	4b42      	ldr	r3, [pc, #264]	; (68e4 <_can_async_init+0x1a0>)
    67dc:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    67de:	687b      	ldr	r3, [r7, #4]
    67e0:	681b      	ldr	r3, [r3, #0]
    67e2:	2107      	movs	r1, #7
    67e4:	4618      	mov	r0, r3
    67e6:	4b40      	ldr	r3, [pc, #256]	; (68e8 <_can_async_init+0x1a4>)
    67e8:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    67ea:	687b      	ldr	r3, [r7, #4]
    67ec:	681b      	ldr	r3, [r3, #0]
    67ee:	2107      	movs	r1, #7
    67f0:	4618      	mov	r0, r3
    67f2:	4b3e      	ldr	r3, [pc, #248]	; (68ec <_can_async_init+0x1a8>)
    67f4:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	681a      	ldr	r2, [r3, #0]
    67fa:	4b3d      	ldr	r3, [pc, #244]	; (68f0 <_can_async_init+0x1ac>)
    67fc:	b29b      	uxth	r3, r3
    67fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6802:	4619      	mov	r1, r3
    6804:	4610      	mov	r0, r2
    6806:	4b3b      	ldr	r3, [pc, #236]	; (68f4 <_can_async_init+0x1b0>)
    6808:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	681a      	ldr	r2, [r3, #0]
    680e:	4b3a      	ldr	r3, [pc, #232]	; (68f8 <_can_async_init+0x1b4>)
    6810:	b29b      	uxth	r3, r3
    6812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6816:	4619      	mov	r1, r3
    6818:	4610      	mov	r0, r2
    681a:	4b38      	ldr	r3, [pc, #224]	; (68fc <_can_async_init+0x1b8>)
    681c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    681e:	687b      	ldr	r3, [r7, #4]
    6820:	681b      	ldr	r3, [r3, #0]
    6822:	2108      	movs	r1, #8
    6824:	4618      	mov	r0, r3
    6826:	4b36      	ldr	r3, [pc, #216]	; (6900 <_can_async_init+0x1bc>)
    6828:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	681a      	ldr	r2, [r3, #0]
    682e:	4b35      	ldr	r3, [pc, #212]	; (6904 <_can_async_init+0x1c0>)
    6830:	b29b      	uxth	r3, r3
    6832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    6836:	4619      	mov	r1, r3
    6838:	4610      	mov	r0, r2
    683a:	4b33      	ldr	r3, [pc, #204]	; (6908 <_can_async_init+0x1c4>)
    683c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	681a      	ldr	r2, [r3, #0]
    6842:	4b32      	ldr	r3, [pc, #200]	; (690c <_can_async_init+0x1c8>)
    6844:	b29b      	uxth	r3, r3
    6846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    684a:	4619      	mov	r1, r3
    684c:	4610      	mov	r0, r2
    684e:	4b30      	ldr	r3, [pc, #192]	; (6910 <_can_async_init+0x1cc>)
    6850:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	681b      	ldr	r3, [r3, #0]
    6856:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    685a:	4618      	mov	r0, r3
    685c:	4b2d      	ldr	r3, [pc, #180]	; (6914 <_can_async_init+0x1d0>)
    685e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    6860:	204f      	movs	r0, #79	; 0x4f
    6862:	4b2d      	ldr	r3, [pc, #180]	; (6918 <_can_async_init+0x1d4>)
    6864:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    6866:	204f      	movs	r0, #79	; 0x4f
    6868:	4b2c      	ldr	r3, [pc, #176]	; (691c <_can_async_init+0x1d8>)
    686a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    686c:	204f      	movs	r0, #79	; 0x4f
    686e:	4b2c      	ldr	r3, [pc, #176]	; (6920 <_can_async_init+0x1dc>)
    6870:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    6872:	687b      	ldr	r3, [r7, #4]
    6874:	681b      	ldr	r3, [r3, #0]
    6876:	2101      	movs	r1, #1
    6878:	4618      	mov	r0, r3
    687a:	4b2a      	ldr	r3, [pc, #168]	; (6924 <_can_async_init+0x1e0>)
    687c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    687e:	687b      	ldr	r3, [r7, #4]
    6880:	681b      	ldr	r3, [r3, #0]
    6882:	4618      	mov	r0, r3
    6884:	4b28      	ldr	r3, [pc, #160]	; (6928 <_can_async_init+0x1e4>)
    6886:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	681b      	ldr	r3, [r3, #0]
    688c:	4618      	mov	r0, r3
    688e:	4b27      	ldr	r3, [pc, #156]	; (692c <_can_async_init+0x1e8>)
    6890:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    6892:	bf00      	nop
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	681b      	ldr	r3, [r3, #0]
    6898:	4618      	mov	r0, r3
    689a:	4b06      	ldr	r3, [pc, #24]	; (68b4 <_can_async_init+0x170>)
    689c:	4798      	blx	r3
    689e:	4603      	mov	r3, r0
    68a0:	2b00      	cmp	r3, #0
    68a2:	d1f7      	bne.n	6894 <_can_async_init+0x150>
	};

	return ERR_NONE;
    68a4:	2300      	movs	r3, #0
}
    68a6:	4618      	mov	r0, r3
    68a8:	3708      	adds	r7, #8
    68aa:	46bd      	mov	sp, r7
    68ac:	bd80      	pop	{r7, pc}
    68ae:	bf00      	nop
    68b0:	000064f9 	.word	0x000064f9
    68b4:	00006519 	.word	0x00006519
    68b8:	00006567 	.word	0x00006567
    68bc:	42000400 	.word	0x42000400
    68c0:	20003098 	.word	0x20003098
    68c4:	20000068 	.word	0x20000068
    68c8:	000065a7 	.word	0x000065a7
    68cc:	000064c1 	.word	0x000064c1
    68d0:	00010c01 	.word	0x00010c01
    68d4:	000065c9 	.word	0x000065c9
    68d8:	00010c10 	.word	0x00010c10
    68dc:	000064dd 	.word	0x000064dd
    68e0:	200050d8 	.word	0x200050d8
    68e4:	000066ad 	.word	0x000066ad
    68e8:	000066cb 	.word	0x000066cb
    68ec:	00006707 	.word	0x00006707
    68f0:	20005090 	.word	0x20005090
    68f4:	000066e9 	.word	0x000066e9
    68f8:	20002ff8 	.word	0x20002ff8
    68fc:	00006725 	.word	0x00006725
    6900:	00006635 	.word	0x00006635
    6904:	20003008 	.word	0x20003008
    6908:	00006653 	.word	0x00006653
    690c:	20003088 	.word	0x20003088
    6910:	00006671 	.word	0x00006671
    6914:	0000668f 	.word	0x0000668f
    6918:	00006419 	.word	0x00006419
    691c:	0000645d 	.word	0x0000645d
    6920:	000063dd 	.word	0x000063dd
    6924:	00006619 	.word	0x00006619
    6928:	00006587 	.word	0x00006587
    692c:	00006547 	.word	0x00006547

00006930 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    6930:	b590      	push	{r4, r7, lr}
    6932:	b083      	sub	sp, #12
    6934:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    6936:	4b2c      	ldr	r3, [pc, #176]	; (69e8 <CAN1_Handler+0xb8>)
    6938:	681b      	ldr	r3, [r3, #0]
    693a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	4618      	mov	r0, r3
    6942:	4b2a      	ldr	r3, [pc, #168]	; (69ec <CAN1_Handler+0xbc>)
    6944:	4798      	blx	r3
    6946:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    6948:	683b      	ldr	r3, [r7, #0]
    694a:	f003 0301 	and.w	r3, r3, #1
    694e:	2b00      	cmp	r3, #0
    6950:	d003      	beq.n	695a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	689b      	ldr	r3, [r3, #8]
    6956:	6878      	ldr	r0, [r7, #4]
    6958:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    695a:	683b      	ldr	r3, [r7, #0]
    695c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    6960:	2b00      	cmp	r3, #0
    6962:	d003      	beq.n	696c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	685b      	ldr	r3, [r3, #4]
    6968:	6878      	ldr	r0, [r7, #4]
    696a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    696c:	683b      	ldr	r3, [r7, #0]
    696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    6972:	2b00      	cmp	r3, #0
    6974:	d004      	beq.n	6980 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    6976:	687b      	ldr	r3, [r7, #4]
    6978:	68db      	ldr	r3, [r3, #12]
    697a:	2103      	movs	r1, #3
    697c:	6878      	ldr	r0, [r7, #4]
    697e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    6980:	683b      	ldr	r3, [r7, #0]
    6982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6986:	2b00      	cmp	r3, #0
    6988:	d004      	beq.n	6994 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	68db      	ldr	r3, [r3, #12]
    698e:	2100      	movs	r1, #0
    6990:	6878      	ldr	r0, [r7, #4]
    6992:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    6994:	683b      	ldr	r3, [r7, #0]
    6996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    699a:	2b00      	cmp	r3, #0
    699c:	d00f      	beq.n	69be <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	68dc      	ldr	r4, [r3, #12]
    69a2:	687b      	ldr	r3, [r7, #4]
    69a4:	681b      	ldr	r3, [r3, #0]
    69a6:	4618      	mov	r0, r3
    69a8:	4b11      	ldr	r3, [pc, #68]	; (69f0 <CAN1_Handler+0xc0>)
    69aa:	4798      	blx	r3
    69ac:	4603      	mov	r3, r0
    69ae:	2b00      	cmp	r3, #0
    69b0:	d001      	beq.n	69b6 <CAN1_Handler+0x86>
    69b2:	2302      	movs	r3, #2
    69b4:	e000      	b.n	69b8 <CAN1_Handler+0x88>
    69b6:	2301      	movs	r3, #1
    69b8:	4619      	mov	r1, r3
    69ba:	6878      	ldr	r0, [r7, #4]
    69bc:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    69be:	683b      	ldr	r3, [r7, #0]
    69c0:	f003 0308 	and.w	r3, r3, #8
    69c4:	2b00      	cmp	r3, #0
    69c6:	d004      	beq.n	69d2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	68db      	ldr	r3, [r3, #12]
    69cc:	2104      	movs	r1, #4
    69ce:	6878      	ldr	r0, [r7, #4]
    69d0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	681b      	ldr	r3, [r3, #0]
    69d6:	6839      	ldr	r1, [r7, #0]
    69d8:	4618      	mov	r0, r3
    69da:	4b06      	ldr	r3, [pc, #24]	; (69f4 <CAN1_Handler+0xc4>)
    69dc:	4798      	blx	r3
}
    69de:	bf00      	nop
    69e0:	370c      	adds	r7, #12
    69e2:	46bd      	mov	sp, r7
    69e4:	bd90      	pop	{r4, r7, pc}
    69e6:	bf00      	nop
    69e8:	20003098 	.word	0x20003098
    69ec:	00006601 	.word	0x00006601
    69f0:	00006499 	.word	0x00006499
    69f4:	000065e5 	.word	0x000065e5

000069f8 <__NVIC_SetPendingIRQ>:
{
    69f8:	b480      	push	{r7}
    69fa:	b083      	sub	sp, #12
    69fc:	af00      	add	r7, sp, #0
    69fe:	4603      	mov	r3, r0
    6a00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a06:	2b00      	cmp	r3, #0
    6a08:	db0c      	blt.n	6a24 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a0a:	4909      	ldr	r1, [pc, #36]	; (6a30 <__NVIC_SetPendingIRQ+0x38>)
    6a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a10:	095b      	lsrs	r3, r3, #5
    6a12:	88fa      	ldrh	r2, [r7, #6]
    6a14:	f002 021f 	and.w	r2, r2, #31
    6a18:	2001      	movs	r0, #1
    6a1a:	fa00 f202 	lsl.w	r2, r0, r2
    6a1e:	3340      	adds	r3, #64	; 0x40
    6a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a24:	bf00      	nop
    6a26:	370c      	adds	r7, #12
    6a28:	46bd      	mov	sp, r7
    6a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a2e:	4770      	bx	lr
    6a30:	e000e100 	.word	0xe000e100

00006a34 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    6a34:	b580      	push	{r7, lr}
    6a36:	b082      	sub	sp, #8
    6a38:	af00      	add	r7, sp, #0
    6a3a:	4603      	mov	r3, r0
    6a3c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    6a3e:	79fb      	ldrb	r3, [r7, #7]
    6a40:	b21b      	sxth	r3, r3
    6a42:	4618      	mov	r0, r3
    6a44:	4b02      	ldr	r3, [pc, #8]	; (6a50 <_irq_set+0x1c>)
    6a46:	4798      	blx	r3
}
    6a48:	bf00      	nop
    6a4a:	3708      	adds	r7, #8
    6a4c:	46bd      	mov	sp, r7
    6a4e:	bd80      	pop	{r7, pc}
    6a50:	000069f9 	.word	0x000069f9

00006a54 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    6a54:	b480      	push	{r7}
    6a56:	b083      	sub	sp, #12
    6a58:	af00      	add	r7, sp, #0
    6a5a:	4603      	mov	r3, r0
    6a5c:	6039      	str	r1, [r7, #0]
    6a5e:	80fb      	strh	r3, [r7, #6]
    6a60:	4613      	mov	r3, r2
    6a62:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6a64:	797b      	ldrb	r3, [r7, #5]
    6a66:	3b04      	subs	r3, #4
    6a68:	2b05      	cmp	r3, #5
    6a6a:	d86b      	bhi.n	6b44 <_get_cycles_for_us_internal+0xf0>
    6a6c:	a201      	add	r2, pc, #4	; (adr r2, 6a74 <_get_cycles_for_us_internal+0x20>)
    6a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6a72:	bf00      	nop
    6a74:	00006b23 	.word	0x00006b23
    6a78:	00006b03 	.word	0x00006b03
    6a7c:	00006ae5 	.word	0x00006ae5
    6a80:	00006ac7 	.word	0x00006ac7
    6a84:	00006aa9 	.word	0x00006aa9
    6a88:	00006a8d 	.word	0x00006a8d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6a8c:	88fb      	ldrh	r3, [r7, #6]
    6a8e:	683a      	ldr	r2, [r7, #0]
    6a90:	4935      	ldr	r1, [pc, #212]	; (6b68 <_get_cycles_for_us_internal+0x114>)
    6a92:	fba1 1202 	umull	r1, r2, r1, r2
    6a96:	0c92      	lsrs	r2, r2, #18
    6a98:	fb02 f303 	mul.w	r3, r2, r3
    6a9c:	3302      	adds	r3, #2
    6a9e:	4a33      	ldr	r2, [pc, #204]	; (6b6c <_get_cycles_for_us_internal+0x118>)
    6aa0:	fba2 2303 	umull	r2, r3, r2, r3
    6aa4:	085b      	lsrs	r3, r3, #1
    6aa6:	e059      	b.n	6b5c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6aa8:	88fb      	ldrh	r3, [r7, #6]
    6aaa:	683a      	ldr	r2, [r7, #0]
    6aac:	0952      	lsrs	r2, r2, #5
    6aae:	4930      	ldr	r1, [pc, #192]	; (6b70 <_get_cycles_for_us_internal+0x11c>)
    6ab0:	fba1 1202 	umull	r1, r2, r1, r2
    6ab4:	09d2      	lsrs	r2, r2, #7
    6ab6:	fb02 f303 	mul.w	r3, r2, r3
    6aba:	331d      	adds	r3, #29
    6abc:	4a2d      	ldr	r2, [pc, #180]	; (6b74 <_get_cycles_for_us_internal+0x120>)
    6abe:	fba2 2303 	umull	r2, r3, r2, r3
    6ac2:	091b      	lsrs	r3, r3, #4
    6ac4:	e04a      	b.n	6b5c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    6ac6:	88fb      	ldrh	r3, [r7, #6]
    6ac8:	683a      	ldr	r2, [r7, #0]
    6aca:	492b      	ldr	r1, [pc, #172]	; (6b78 <_get_cycles_for_us_internal+0x124>)
    6acc:	fba1 1202 	umull	r1, r2, r1, r2
    6ad0:	0b52      	lsrs	r2, r2, #13
    6ad2:	fb02 f303 	mul.w	r3, r2, r3
    6ad6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6ada:	4a28      	ldr	r2, [pc, #160]	; (6b7c <_get_cycles_for_us_internal+0x128>)
    6adc:	fba2 2303 	umull	r2, r3, r2, r3
    6ae0:	095b      	lsrs	r3, r3, #5
    6ae2:	e03b      	b.n	6b5c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    6ae4:	88fb      	ldrh	r3, [r7, #6]
    6ae6:	683a      	ldr	r2, [r7, #0]
    6ae8:	4925      	ldr	r1, [pc, #148]	; (6b80 <_get_cycles_for_us_internal+0x12c>)
    6aea:	fba1 1202 	umull	r1, r2, r1, r2
    6aee:	0992      	lsrs	r2, r2, #6
    6af0:	fb02 f303 	mul.w	r3, r2, r3
    6af4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6af8:	4a22      	ldr	r2, [pc, #136]	; (6b84 <_get_cycles_for_us_internal+0x130>)
    6afa:	fba2 2303 	umull	r2, r3, r2, r3
    6afe:	099b      	lsrs	r3, r3, #6
    6b00:	e02c      	b.n	6b5c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    6b02:	88fb      	ldrh	r3, [r7, #6]
    6b04:	683a      	ldr	r2, [r7, #0]
    6b06:	4920      	ldr	r1, [pc, #128]	; (6b88 <_get_cycles_for_us_internal+0x134>)
    6b08:	fba1 1202 	umull	r1, r2, r1, r2
    6b0c:	0952      	lsrs	r2, r2, #5
    6b0e:	fb02 f303 	mul.w	r3, r2, r3
    6b12:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    6b16:	332f      	adds	r3, #47	; 0x2f
    6b18:	4a1c      	ldr	r2, [pc, #112]	; (6b8c <_get_cycles_for_us_internal+0x138>)
    6b1a:	fba2 2303 	umull	r2, r3, r2, r3
    6b1e:	0b5b      	lsrs	r3, r3, #13
    6b20:	e01c      	b.n	6b5c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    6b22:	88fb      	ldrh	r3, [r7, #6]
    6b24:	683a      	ldr	r2, [r7, #0]
    6b26:	491a      	ldr	r1, [pc, #104]	; (6b90 <_get_cycles_for_us_internal+0x13c>)
    6b28:	fba1 1202 	umull	r1, r2, r1, r2
    6b2c:	08d2      	lsrs	r2, r2, #3
    6b2e:	fb02 f303 	mul.w	r3, r2, r3
    6b32:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    6b36:	f203 33df 	addw	r3, r3, #991	; 0x3df
    6b3a:	4a16      	ldr	r2, [pc, #88]	; (6b94 <_get_cycles_for_us_internal+0x140>)
    6b3c:	fba2 2303 	umull	r2, r3, r2, r3
    6b40:	0c5b      	lsrs	r3, r3, #17
    6b42:	e00b      	b.n	6b5c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    6b44:	88fb      	ldrh	r3, [r7, #6]
    6b46:	683a      	ldr	r2, [r7, #0]
    6b48:	fb02 f303 	mul.w	r3, r2, r3
    6b4c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    6b50:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    6b54:	4a10      	ldr	r2, [pc, #64]	; (6b98 <_get_cycles_for_us_internal+0x144>)
    6b56:	fba2 2303 	umull	r2, r3, r2, r3
    6b5a:	0c9b      	lsrs	r3, r3, #18
	}
}
    6b5c:	4618      	mov	r0, r3
    6b5e:	370c      	adds	r7, #12
    6b60:	46bd      	mov	sp, r7
    6b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b66:	4770      	bx	lr
    6b68:	431bde83 	.word	0x431bde83
    6b6c:	aaaaaaab 	.word	0xaaaaaaab
    6b70:	0a7c5ac5 	.word	0x0a7c5ac5
    6b74:	88888889 	.word	0x88888889
    6b78:	d1b71759 	.word	0xd1b71759
    6b7c:	1b4e81b5 	.word	0x1b4e81b5
    6b80:	10624dd3 	.word	0x10624dd3
    6b84:	057619f1 	.word	0x057619f1
    6b88:	51eb851f 	.word	0x51eb851f
    6b8c:	45e7b273 	.word	0x45e7b273
    6b90:	cccccccd 	.word	0xcccccccd
    6b94:	6fd91d85 	.word	0x6fd91d85
    6b98:	165e9f81 	.word	0x165e9f81

00006b9c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    6b9c:	b580      	push	{r7, lr}
    6b9e:	b082      	sub	sp, #8
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	4603      	mov	r3, r0
    6ba4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6ba6:	88fb      	ldrh	r3, [r7, #6]
    6ba8:	2209      	movs	r2, #9
    6baa:	4904      	ldr	r1, [pc, #16]	; (6bbc <_get_cycles_for_us+0x20>)
    6bac:	4618      	mov	r0, r3
    6bae:	4b04      	ldr	r3, [pc, #16]	; (6bc0 <_get_cycles_for_us+0x24>)
    6bb0:	4798      	blx	r3
    6bb2:	4603      	mov	r3, r0
}
    6bb4:	4618      	mov	r0, r3
    6bb6:	3708      	adds	r7, #8
    6bb8:	46bd      	mov	sp, r7
    6bba:	bd80      	pop	{r7, pc}
    6bbc:	07270e00 	.word	0x07270e00
    6bc0:	00006a55 	.word	0x00006a55

00006bc4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    6bc4:	b480      	push	{r7}
    6bc6:	b083      	sub	sp, #12
    6bc8:	af00      	add	r7, sp, #0
    6bca:	4603      	mov	r3, r0
    6bcc:	6039      	str	r1, [r7, #0]
    6bce:	80fb      	strh	r3, [r7, #6]
    6bd0:	4613      	mov	r3, r2
    6bd2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6bd4:	797b      	ldrb	r3, [r7, #5]
    6bd6:	3b04      	subs	r3, #4
    6bd8:	2b05      	cmp	r3, #5
    6bda:	d870      	bhi.n	6cbe <_get_cycles_for_ms_internal+0xfa>
    6bdc:	a201      	add	r2, pc, #4	; (adr r2, 6be4 <_get_cycles_for_ms_internal+0x20>)
    6bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6be2:	bf00      	nop
    6be4:	00006ca1 	.word	0x00006ca1
    6be8:	00006c85 	.word	0x00006c85
    6bec:	00006c69 	.word	0x00006c69
    6bf0:	00006c45 	.word	0x00006c45
    6bf4:	00006c21 	.word	0x00006c21
    6bf8:	00006bfd 	.word	0x00006bfd
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    6bfc:	88fb      	ldrh	r3, [r7, #6]
    6bfe:	683a      	ldr	r2, [r7, #0]
    6c00:	4937      	ldr	r1, [pc, #220]	; (6ce0 <_get_cycles_for_ms_internal+0x11c>)
    6c02:	fba1 1202 	umull	r1, r2, r1, r2
    6c06:	0c92      	lsrs	r2, r2, #18
    6c08:	fb02 f303 	mul.w	r3, r2, r3
    6c0c:	3302      	adds	r3, #2
    6c0e:	4a35      	ldr	r2, [pc, #212]	; (6ce4 <_get_cycles_for_ms_internal+0x120>)
    6c10:	fba2 2303 	umull	r2, r3, r2, r3
    6c14:	085b      	lsrs	r3, r3, #1
    6c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c1a:	fb02 f303 	mul.w	r3, r2, r3
    6c1e:	e058      	b.n	6cd2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    6c20:	88fb      	ldrh	r3, [r7, #6]
    6c22:	683a      	ldr	r2, [r7, #0]
    6c24:	0952      	lsrs	r2, r2, #5
    6c26:	4930      	ldr	r1, [pc, #192]	; (6ce8 <_get_cycles_for_ms_internal+0x124>)
    6c28:	fba1 1202 	umull	r1, r2, r1, r2
    6c2c:	09d2      	lsrs	r2, r2, #7
    6c2e:	fb02 f303 	mul.w	r3, r2, r3
    6c32:	3302      	adds	r3, #2
    6c34:	4a2b      	ldr	r2, [pc, #172]	; (6ce4 <_get_cycles_for_ms_internal+0x120>)
    6c36:	fba2 2303 	umull	r2, r3, r2, r3
    6c3a:	085b      	lsrs	r3, r3, #1
    6c3c:	2264      	movs	r2, #100	; 0x64
    6c3e:	fb02 f303 	mul.w	r3, r2, r3
    6c42:	e046      	b.n	6cd2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    6c44:	88fb      	ldrh	r3, [r7, #6]
    6c46:	683a      	ldr	r2, [r7, #0]
    6c48:	4928      	ldr	r1, [pc, #160]	; (6cec <_get_cycles_for_ms_internal+0x128>)
    6c4a:	fba1 1202 	umull	r1, r2, r1, r2
    6c4e:	0b52      	lsrs	r2, r2, #13
    6c50:	fb02 f303 	mul.w	r3, r2, r3
    6c54:	3302      	adds	r3, #2
    6c56:	4a23      	ldr	r2, [pc, #140]	; (6ce4 <_get_cycles_for_ms_internal+0x120>)
    6c58:	fba2 2303 	umull	r2, r3, r2, r3
    6c5c:	085a      	lsrs	r2, r3, #1
    6c5e:	4613      	mov	r3, r2
    6c60:	009b      	lsls	r3, r3, #2
    6c62:	4413      	add	r3, r2
    6c64:	005b      	lsls	r3, r3, #1
    6c66:	e034      	b.n	6cd2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6c68:	88fb      	ldrh	r3, [r7, #6]
    6c6a:	683a      	ldr	r2, [r7, #0]
    6c6c:	4920      	ldr	r1, [pc, #128]	; (6cf0 <_get_cycles_for_ms_internal+0x12c>)
    6c6e:	fba1 1202 	umull	r1, r2, r1, r2
    6c72:	0992      	lsrs	r2, r2, #6
    6c74:	fb02 f303 	mul.w	r3, r2, r3
    6c78:	3302      	adds	r3, #2
    6c7a:	4a1a      	ldr	r2, [pc, #104]	; (6ce4 <_get_cycles_for_ms_internal+0x120>)
    6c7c:	fba2 2303 	umull	r2, r3, r2, r3
    6c80:	085b      	lsrs	r3, r3, #1
    6c82:	e026      	b.n	6cd2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6c84:	88fb      	ldrh	r3, [r7, #6]
    6c86:	683a      	ldr	r2, [r7, #0]
    6c88:	491a      	ldr	r1, [pc, #104]	; (6cf4 <_get_cycles_for_ms_internal+0x130>)
    6c8a:	fba1 1202 	umull	r1, r2, r1, r2
    6c8e:	0952      	lsrs	r2, r2, #5
    6c90:	fb02 f303 	mul.w	r3, r2, r3
    6c94:	331d      	adds	r3, #29
    6c96:	4a18      	ldr	r2, [pc, #96]	; (6cf8 <_get_cycles_for_ms_internal+0x134>)
    6c98:	fba2 2303 	umull	r2, r3, r2, r3
    6c9c:	091b      	lsrs	r3, r3, #4
    6c9e:	e018      	b.n	6cd2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    6ca0:	88fb      	ldrh	r3, [r7, #6]
    6ca2:	683a      	ldr	r2, [r7, #0]
    6ca4:	4915      	ldr	r1, [pc, #84]	; (6cfc <_get_cycles_for_ms_internal+0x138>)
    6ca6:	fba1 1202 	umull	r1, r2, r1, r2
    6caa:	08d2      	lsrs	r2, r2, #3
    6cac:	fb02 f303 	mul.w	r3, r2, r3
    6cb0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6cb4:	4a12      	ldr	r2, [pc, #72]	; (6d00 <_get_cycles_for_ms_internal+0x13c>)
    6cb6:	fba2 2303 	umull	r2, r3, r2, r3
    6cba:	095b      	lsrs	r3, r3, #5
    6cbc:	e009      	b.n	6cd2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    6cbe:	88fb      	ldrh	r3, [r7, #6]
    6cc0:	683a      	ldr	r2, [r7, #0]
    6cc2:	fb02 f303 	mul.w	r3, r2, r3
    6cc6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6cca:	4a0e      	ldr	r2, [pc, #56]	; (6d04 <_get_cycles_for_ms_internal+0x140>)
    6ccc:	fba2 2303 	umull	r2, r3, r2, r3
    6cd0:	099b      	lsrs	r3, r3, #6
	}
}
    6cd2:	4618      	mov	r0, r3
    6cd4:	370c      	adds	r7, #12
    6cd6:	46bd      	mov	sp, r7
    6cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cdc:	4770      	bx	lr
    6cde:	bf00      	nop
    6ce0:	431bde83 	.word	0x431bde83
    6ce4:	aaaaaaab 	.word	0xaaaaaaab
    6ce8:	0a7c5ac5 	.word	0x0a7c5ac5
    6cec:	d1b71759 	.word	0xd1b71759
    6cf0:	10624dd3 	.word	0x10624dd3
    6cf4:	51eb851f 	.word	0x51eb851f
    6cf8:	88888889 	.word	0x88888889
    6cfc:	cccccccd 	.word	0xcccccccd
    6d00:	1b4e81b5 	.word	0x1b4e81b5
    6d04:	057619f1 	.word	0x057619f1

00006d08 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b082      	sub	sp, #8
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	4603      	mov	r3, r0
    6d10:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6d12:	88fb      	ldrh	r3, [r7, #6]
    6d14:	2209      	movs	r2, #9
    6d16:	4904      	ldr	r1, [pc, #16]	; (6d28 <_get_cycles_for_ms+0x20>)
    6d18:	4618      	mov	r0, r3
    6d1a:	4b04      	ldr	r3, [pc, #16]	; (6d2c <_get_cycles_for_ms+0x24>)
    6d1c:	4798      	blx	r3
    6d1e:	4603      	mov	r3, r0
}
    6d20:	4618      	mov	r0, r3
    6d22:	3708      	adds	r7, #8
    6d24:	46bd      	mov	sp, r7
    6d26:	bd80      	pop	{r7, pc}
    6d28:	07270e00 	.word	0x07270e00
    6d2c:	00006bc5 	.word	0x00006bc5

00006d30 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6d30:	b480      	push	{r7}
    6d32:	b083      	sub	sp, #12
    6d34:	af00      	add	r7, sp, #0
    6d36:	6078      	str	r0, [r7, #4]
    6d38:	6039      	str	r1, [r7, #0]
    6d3a:	bf00      	nop
    6d3c:	f3af 8000 	nop.w

00006d40 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6d40:	3901      	subs	r1, #1
    6d42:	d8fd      	bhi.n	6d40 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6d44:	bf00      	nop
    6d46:	370c      	adds	r7, #12
    6d48:	46bd      	mov	sp, r7
    6d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d4e:	4770      	bx	lr

00006d50 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    6d50:	b480      	push	{r7}
    6d52:	b083      	sub	sp, #12
    6d54:	af00      	add	r7, sp, #0
    6d56:	6078      	str	r0, [r7, #4]
    6d58:	460b      	mov	r3, r1
    6d5a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	881b      	ldrh	r3, [r3, #0]
    6d60:	b29a      	uxth	r2, r3
    6d62:	887b      	ldrh	r3, [r7, #2]
    6d64:	021b      	lsls	r3, r3, #8
    6d66:	b29b      	uxth	r3, r3
    6d68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6d6c:	b29b      	uxth	r3, r3
    6d6e:	4313      	orrs	r3, r2
    6d70:	b29a      	uxth	r2, r3
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    6d76:	bf00      	nop
    6d78:	370c      	adds	r7, #12
    6d7a:	46bd      	mov	sp, r7
    6d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d80:	4770      	bx	lr

00006d82 <hri_port_set_EVCTRL_reg>:
{
    6d82:	b480      	push	{r7}
    6d84:	b085      	sub	sp, #20
    6d86:	af00      	add	r7, sp, #0
    6d88:	60f8      	str	r0, [r7, #12]
    6d8a:	460b      	mov	r3, r1
    6d8c:	607a      	str	r2, [r7, #4]
    6d8e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6d90:	7afb      	ldrb	r3, [r7, #11]
    6d92:	7afa      	ldrb	r2, [r7, #11]
    6d94:	68f9      	ldr	r1, [r7, #12]
    6d96:	01d2      	lsls	r2, r2, #7
    6d98:	440a      	add	r2, r1
    6d9a:	322c      	adds	r2, #44	; 0x2c
    6d9c:	6811      	ldr	r1, [r2, #0]
    6d9e:	687a      	ldr	r2, [r7, #4]
    6da0:	430a      	orrs	r2, r1
    6da2:	68f9      	ldr	r1, [r7, #12]
    6da4:	01db      	lsls	r3, r3, #7
    6da6:	440b      	add	r3, r1
    6da8:	332c      	adds	r3, #44	; 0x2c
    6daa:	601a      	str	r2, [r3, #0]
}
    6dac:	bf00      	nop
    6dae:	3714      	adds	r7, #20
    6db0:	46bd      	mov	sp, r7
    6db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6db6:	4770      	bx	lr

00006db8 <_port_event_init>:

static inline void _port_event_init()
{
    6db8:	b580      	push	{r7, lr}
    6dba:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    6dbc:	2200      	movs	r2, #0
    6dbe:	2100      	movs	r1, #0
    6dc0:	4809      	ldr	r0, [pc, #36]	; (6de8 <_port_event_init+0x30>)
    6dc2:	4b0a      	ldr	r3, [pc, #40]	; (6dec <_port_event_init+0x34>)
    6dc4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6dc6:	2200      	movs	r2, #0
    6dc8:	2101      	movs	r1, #1
    6dca:	4807      	ldr	r0, [pc, #28]	; (6de8 <_port_event_init+0x30>)
    6dcc:	4b07      	ldr	r3, [pc, #28]	; (6dec <_port_event_init+0x34>)
    6dce:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6dd0:	22ef      	movs	r2, #239	; 0xef
    6dd2:	2102      	movs	r1, #2
    6dd4:	4804      	ldr	r0, [pc, #16]	; (6de8 <_port_event_init+0x30>)
    6dd6:	4b05      	ldr	r3, [pc, #20]	; (6dec <_port_event_init+0x34>)
    6dd8:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    6dda:	2200      	movs	r2, #0
    6ddc:	2103      	movs	r1, #3
    6dde:	4802      	ldr	r0, [pc, #8]	; (6de8 <_port_event_init+0x30>)
    6de0:	4b02      	ldr	r3, [pc, #8]	; (6dec <_port_event_init+0x34>)
    6de2:	4798      	blx	r3
}
    6de4:	bf00      	nop
    6de6:	bd80      	pop	{r7, pc}
    6de8:	41008000 	.word	0x41008000
    6dec:	00006d83 	.word	0x00006d83

00006df0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6df4:	2104      	movs	r1, #4
    6df6:	480b      	ldr	r0, [pc, #44]	; (6e24 <_init_chip+0x34>)
    6df8:	4b0b      	ldr	r3, [pc, #44]	; (6e28 <_init_chip+0x38>)
    6dfa:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6dfc:	4b0b      	ldr	r3, [pc, #44]	; (6e2c <_init_chip+0x3c>)
    6dfe:	4798      	blx	r3
	_oscctrl_init_sources();
    6e00:	4b0b      	ldr	r3, [pc, #44]	; (6e30 <_init_chip+0x40>)
    6e02:	4798      	blx	r3
	_mclk_init();
    6e04:	4b0b      	ldr	r3, [pc, #44]	; (6e34 <_init_chip+0x44>)
    6e06:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6e08:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6e0c:	4b0a      	ldr	r3, [pc, #40]	; (6e38 <_init_chip+0x48>)
    6e0e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6e10:	4b0a      	ldr	r3, [pc, #40]	; (6e3c <_init_chip+0x4c>)
    6e12:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6e14:	f640 30df 	movw	r0, #3039	; 0xbdf
    6e18:	4b07      	ldr	r3, [pc, #28]	; (6e38 <_init_chip+0x48>)
    6e1a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    6e1c:	4b08      	ldr	r3, [pc, #32]	; (6e40 <_init_chip+0x50>)
    6e1e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6e20:	bf00      	nop
    6e22:	bd80      	pop	{r7, pc}
    6e24:	41004000 	.word	0x41004000
    6e28:	00006d51 	.word	0x00006d51
    6e2c:	00007a79 	.word	0x00007a79
    6e30:	00007f41 	.word	0x00007f41
    6e34:	00007999 	.word	0x00007999
    6e38:	00007889 	.word	0x00007889
    6e3c:	00007f81 	.word	0x00007f81
    6e40:	00006db9 	.word	0x00006db9

00006e44 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    6e44:	b480      	push	{r7}
    6e46:	b083      	sub	sp, #12
    6e48:	af00      	add	r7, sp, #0
    6e4a:	6078      	str	r0, [r7, #4]
    6e4c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	683a      	ldr	r2, [r7, #0]
    6e52:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6e54:	bf00      	nop
    6e56:	370c      	adds	r7, #12
    6e58:	46bd      	mov	sp, r7
    6e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e5e:	4770      	bx	lr

00006e60 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    6e60:	b480      	push	{r7}
    6e62:	b085      	sub	sp, #20
    6e64:	af00      	add	r7, sp, #0
    6e66:	6078      	str	r0, [r7, #4]
    6e68:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	689b      	ldr	r3, [r3, #8]
    6e6e:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    6e70:	68fb      	ldr	r3, [r7, #12]
    6e72:	f003 0303 	and.w	r3, r3, #3
    6e76:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    6e78:	683b      	ldr	r3, [r7, #0]
    6e7a:	009b      	lsls	r3, r3, #2
    6e7c:	68fa      	ldr	r2, [r7, #12]
    6e7e:	4313      	orrs	r3, r2
    6e80:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	68fa      	ldr	r2, [r7, #12]
    6e86:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6e88:	bf00      	nop
    6e8a:	3714      	adds	r7, #20
    6e8c:	46bd      	mov	sp, r7
    6e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e92:	4770      	bx	lr

00006e94 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    6e94:	b480      	push	{r7}
    6e96:	b083      	sub	sp, #12
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	683a      	ldr	r2, [r7, #0]
    6ea2:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6ea4:	bf00      	nop
    6ea6:	370c      	adds	r7, #12
    6ea8:	46bd      	mov	sp, r7
    6eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eae:	4770      	bx	lr

00006eb0 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    6eb0:	b480      	push	{r7}
    6eb2:	b083      	sub	sp, #12
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	68db      	ldr	r3, [r3, #12]
}
    6ebc:	4618      	mov	r0, r3
    6ebe:	370c      	adds	r7, #12
    6ec0:	46bd      	mov	sp, r7
    6ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec6:	4770      	bx	lr

00006ec8 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    6ec8:	b480      	push	{r7}
    6eca:	b083      	sub	sp, #12
    6ecc:	af00      	add	r7, sp, #0
    6ece:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	785b      	ldrb	r3, [r3, #1]
    6ed4:	b2db      	uxtb	r3, r3
    6ed6:	f003 0301 	and.w	r3, r3, #1
    6eda:	2b00      	cmp	r3, #0
    6edc:	bf14      	ite	ne
    6ede:	2301      	movne	r3, #1
    6ee0:	2300      	moveq	r3, #0
    6ee2:	b2db      	uxtb	r3, r3
}
    6ee4:	4618      	mov	r0, r3
    6ee6:	370c      	adds	r7, #12
    6ee8:	46bd      	mov	sp, r7
    6eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eee:	4770      	bx	lr

00006ef0 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    6ef0:	b480      	push	{r7}
    6ef2:	b083      	sub	sp, #12
    6ef4:	af00      	add	r7, sp, #0
    6ef6:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    6ef8:	687b      	ldr	r3, [r7, #4]
    6efa:	2201      	movs	r2, #1
    6efc:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6efe:	bf00      	nop
    6f00:	370c      	adds	r7, #12
    6f02:	46bd      	mov	sp, r7
    6f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f08:	4770      	bx	lr

00006f0a <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    6f0a:	b480      	push	{r7}
    6f0c:	b083      	sub	sp, #12
    6f0e:	af00      	add	r7, sp, #0
    6f10:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    6f12:	687b      	ldr	r3, [r7, #4]
    6f14:	785b      	ldrb	r3, [r3, #1]
    6f16:	b2db      	uxtb	r3, r3
    6f18:	089b      	lsrs	r3, r3, #2
    6f1a:	f003 0301 	and.w	r3, r3, #1
    6f1e:	2b00      	cmp	r3, #0
    6f20:	bf14      	ite	ne
    6f22:	2301      	movne	r3, #1
    6f24:	2300      	moveq	r3, #0
    6f26:	b2db      	uxtb	r3, r3
}
    6f28:	4618      	mov	r0, r3
    6f2a:	370c      	adds	r7, #12
    6f2c:	46bd      	mov	sp, r7
    6f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f32:	4770      	bx	lr

00006f34 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    6f34:	b480      	push	{r7}
    6f36:	b083      	sub	sp, #12
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	2204      	movs	r2, #4
    6f40:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f42:	bf00      	nop
    6f44:	370c      	adds	r7, #12
    6f46:	46bd      	mov	sp, r7
    6f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f4c:	4770      	bx	lr

00006f4e <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    6f4e:	b480      	push	{r7}
    6f50:	b083      	sub	sp, #12
    6f52:	af00      	add	r7, sp, #0
    6f54:	6078      	str	r0, [r7, #4]
    6f56:	460b      	mov	r3, r1
    6f58:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    6f5a:	687b      	ldr	r3, [r7, #4]
    6f5c:	78fa      	ldrb	r2, [r7, #3]
    6f5e:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    6f60:	bf00      	nop
    6f62:	370c      	adds	r7, #12
    6f64:	46bd      	mov	sp, r7
    6f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f6a:	4770      	bx	lr

00006f6c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    6f6c:	b480      	push	{r7}
    6f6e:	b083      	sub	sp, #12
    6f70:	af00      	add	r7, sp, #0
    6f72:	6078      	str	r0, [r7, #4]
    6f74:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	683a      	ldr	r2, [r7, #0]
    6f7a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6f7c:	2300      	movs	r3, #0
}
    6f7e:	4618      	mov	r0, r3
    6f80:	370c      	adds	r7, #12
    6f82:	46bd      	mov	sp, r7
    6f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f88:	4770      	bx	lr

00006f8a <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    6f8a:	b480      	push	{r7}
    6f8c:	b083      	sub	sp, #12
    6f8e:	af00      	add	r7, sp, #0
    6f90:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    6f92:	2300      	movs	r3, #0
}
    6f94:	4618      	mov	r0, r3
    6f96:	370c      	adds	r7, #12
    6f98:	46bd      	mov	sp, r7
    6f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f9e:	4770      	bx	lr

00006fa0 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    6fa0:	b580      	push	{r7, lr}
    6fa2:	b086      	sub	sp, #24
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	60f8      	str	r0, [r7, #12]
    6fa8:	60b9      	str	r1, [r7, #8]
    6faa:	607a      	str	r2, [r7, #4]
    6fac:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    6fae:	2300      	movs	r3, #0
    6fb0:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    6fb2:	68bb      	ldr	r3, [r7, #8]
    6fb4:	f003 0303 	and.w	r3, r3, #3
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d002      	beq.n	6fc2 <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    6fbc:	f06f 030c 	mvn.w	r3, #12
    6fc0:	e05e      	b.n	7080 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    6fc2:	f107 0310 	add.w	r3, r7, #16
    6fc6:	4618      	mov	r0, r3
    6fc8:	4b2f      	ldr	r3, [pc, #188]	; (7088 <_crc_sync_crc32+0xe8>)
    6fca:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    6fcc:	68fb      	ldr	r3, [r7, #12]
    6fce:	681b      	ldr	r3, [r3, #0]
    6fd0:	4618      	mov	r0, r3
    6fd2:	4b2e      	ldr	r3, [pc, #184]	; (708c <_crc_sync_crc32+0xec>)
    6fd4:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    6fd6:	68fb      	ldr	r3, [r7, #12]
    6fd8:	681b      	ldr	r3, [r3, #0]
    6fda:	68ba      	ldr	r2, [r7, #8]
    6fdc:	4611      	mov	r1, r2
    6fde:	4618      	mov	r0, r3
    6fe0:	4b2b      	ldr	r3, [pc, #172]	; (7090 <_crc_sync_crc32+0xf0>)
    6fe2:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	681b      	ldr	r3, [r3, #0]
    6fe8:	6879      	ldr	r1, [r7, #4]
    6fea:	4618      	mov	r0, r3
    6fec:	4b29      	ldr	r3, [pc, #164]	; (7094 <_crc_sync_crc32+0xf4>)
    6fee:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    6ff0:	68fb      	ldr	r3, [r7, #12]
    6ff2:	681a      	ldr	r2, [r3, #0]
    6ff4:	683b      	ldr	r3, [r7, #0]
    6ff6:	681b      	ldr	r3, [r3, #0]
    6ff8:	4619      	mov	r1, r3
    6ffa:	4610      	mov	r0, r2
    6ffc:	4b26      	ldr	r3, [pc, #152]	; (7098 <_crc_sync_crc32+0xf8>)
    6ffe:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    7000:	68fb      	ldr	r3, [r7, #12]
    7002:	681b      	ldr	r3, [r3, #0]
    7004:	2104      	movs	r1, #4
    7006:	4618      	mov	r0, r3
    7008:	4b24      	ldr	r3, [pc, #144]	; (709c <_crc_sync_crc32+0xfc>)
    700a:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    700c:	bf00      	nop
    700e:	68fb      	ldr	r3, [r7, #12]
    7010:	681b      	ldr	r3, [r3, #0]
    7012:	4618      	mov	r0, r3
    7014:	4b22      	ldr	r3, [pc, #136]	; (70a0 <_crc_sync_crc32+0x100>)
    7016:	4798      	blx	r3
    7018:	4603      	mov	r3, r0
    701a:	f083 0301 	eor.w	r3, r3, #1
    701e:	b2db      	uxtb	r3, r3
    7020:	2b00      	cmp	r3, #0
    7022:	d1f4      	bne.n	700e <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    7024:	68fb      	ldr	r3, [r7, #12]
    7026:	681b      	ldr	r3, [r3, #0]
    7028:	4618      	mov	r0, r3
    702a:	4b1e      	ldr	r3, [pc, #120]	; (70a4 <_crc_sync_crc32+0x104>)
    702c:	4798      	blx	r3
    702e:	4603      	mov	r3, r0
    7030:	2b00      	cmp	r3, #0
    7032:	d00d      	beq.n	7050 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    7034:	68fb      	ldr	r3, [r7, #12]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	4618      	mov	r0, r3
    703a:	4b1b      	ldr	r3, [pc, #108]	; (70a8 <_crc_sync_crc32+0x108>)
    703c:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    703e:	68fb      	ldr	r3, [r7, #12]
    7040:	681b      	ldr	r3, [r3, #0]
    7042:	4618      	mov	r0, r3
    7044:	4b19      	ldr	r3, [pc, #100]	; (70ac <_crc_sync_crc32+0x10c>)
    7046:	4798      	blx	r3
		rc = ERR_IO;
    7048:	f06f 0305 	mvn.w	r3, #5
    704c:	617b      	str	r3, [r7, #20]
    704e:	e007      	b.n	7060 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    7050:	68fb      	ldr	r3, [r7, #12]
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	4618      	mov	r0, r3
    7056:	4b16      	ldr	r3, [pc, #88]	; (70b0 <_crc_sync_crc32+0x110>)
    7058:	4798      	blx	r3
    705a:	4602      	mov	r2, r0
    705c:	683b      	ldr	r3, [r7, #0]
    705e:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    7060:	68fb      	ldr	r3, [r7, #12]
    7062:	681b      	ldr	r3, [r3, #0]
    7064:	4618      	mov	r0, r3
    7066:	4b11      	ldr	r3, [pc, #68]	; (70ac <_crc_sync_crc32+0x10c>)
    7068:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    706a:	68fb      	ldr	r3, [r7, #12]
    706c:	681b      	ldr	r3, [r3, #0]
    706e:	4618      	mov	r0, r3
    7070:	4b10      	ldr	r3, [pc, #64]	; (70b4 <_crc_sync_crc32+0x114>)
    7072:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    7074:	f107 0310 	add.w	r3, r7, #16
    7078:	4618      	mov	r0, r3
    707a:	4b0f      	ldr	r3, [pc, #60]	; (70b8 <_crc_sync_crc32+0x118>)
    707c:	4798      	blx	r3

	return rc;
    707e:	697b      	ldr	r3, [r7, #20]
}
    7080:	4618      	mov	r0, r3
    7082:	3718      	adds	r7, #24
    7084:	46bd      	mov	sp, r7
    7086:	bd80      	pop	{r7, pc}
    7088:	0000e53d 	.word	0x0000e53d
    708c:	00008321 	.word	0x00008321
    7090:	00006e45 	.word	0x00006e45
    7094:	00006e61 	.word	0x00006e61
    7098:	00006e95 	.word	0x00006e95
    709c:	00006f4f 	.word	0x00006f4f
    70a0:	00006ec9 	.word	0x00006ec9
    70a4:	00006f0b 	.word	0x00006f0b
    70a8:	00006f35 	.word	0x00006f35
    70ac:	00006ef1 	.word	0x00006ef1
    70b0:	00006eb1 	.word	0x00006eb1
    70b4:	00008295 	.word	0x00008295
    70b8:	0000e563 	.word	0x0000e563

000070bc <__NVIC_EnableIRQ>:
{
    70bc:	b480      	push	{r7}
    70be:	b083      	sub	sp, #12
    70c0:	af00      	add	r7, sp, #0
    70c2:	4603      	mov	r3, r0
    70c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    70c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70ca:	2b00      	cmp	r3, #0
    70cc:	db0b      	blt.n	70e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70ce:	4909      	ldr	r1, [pc, #36]	; (70f4 <__NVIC_EnableIRQ+0x38>)
    70d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70d4:	095b      	lsrs	r3, r3, #5
    70d6:	88fa      	ldrh	r2, [r7, #6]
    70d8:	f002 021f 	and.w	r2, r2, #31
    70dc:	2001      	movs	r0, #1
    70de:	fa00 f202 	lsl.w	r2, r0, r2
    70e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70e6:	bf00      	nop
    70e8:	370c      	adds	r7, #12
    70ea:	46bd      	mov	sp, r7
    70ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    70f0:	4770      	bx	lr
    70f2:	bf00      	nop
    70f4:	e000e100 	.word	0xe000e100

000070f8 <__NVIC_DisableIRQ>:
{
    70f8:	b480      	push	{r7}
    70fa:	b083      	sub	sp, #12
    70fc:	af00      	add	r7, sp, #0
    70fe:	4603      	mov	r3, r0
    7100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7106:	2b00      	cmp	r3, #0
    7108:	db10      	blt.n	712c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    710a:	490b      	ldr	r1, [pc, #44]	; (7138 <__NVIC_DisableIRQ+0x40>)
    710c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7110:	095b      	lsrs	r3, r3, #5
    7112:	88fa      	ldrh	r2, [r7, #6]
    7114:	f002 021f 	and.w	r2, r2, #31
    7118:	2001      	movs	r0, #1
    711a:	fa00 f202 	lsl.w	r2, r0, r2
    711e:	3320      	adds	r3, #32
    7120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7128:	f3bf 8f6f 	isb	sy
}
    712c:	bf00      	nop
    712e:	370c      	adds	r7, #12
    7130:	46bd      	mov	sp, r7
    7132:	f85d 7b04 	ldr.w	r7, [sp], #4
    7136:	4770      	bx	lr
    7138:	e000e100 	.word	0xe000e100

0000713c <__NVIC_ClearPendingIRQ>:
{
    713c:	b480      	push	{r7}
    713e:	b083      	sub	sp, #12
    7140:	af00      	add	r7, sp, #0
    7142:	4603      	mov	r3, r0
    7144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    714a:	2b00      	cmp	r3, #0
    714c:	db0c      	blt.n	7168 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    714e:	4909      	ldr	r1, [pc, #36]	; (7174 <__NVIC_ClearPendingIRQ+0x38>)
    7150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7154:	095b      	lsrs	r3, r3, #5
    7156:	88fa      	ldrh	r2, [r7, #6]
    7158:	f002 021f 	and.w	r2, r2, #31
    715c:	2001      	movs	r0, #1
    715e:	fa00 f202 	lsl.w	r2, r0, r2
    7162:	3360      	adds	r3, #96	; 0x60
    7164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7168:	bf00      	nop
    716a:	370c      	adds	r7, #12
    716c:	46bd      	mov	sp, r7
    716e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7172:	4770      	bx	lr
    7174:	e000e100 	.word	0xe000e100

00007178 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    7178:	b480      	push	{r7}
    717a:	b083      	sub	sp, #12
    717c:	af00      	add	r7, sp, #0
    717e:	6078      	str	r0, [r7, #4]
    7180:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    7182:	bf00      	nop
    7184:	687b      	ldr	r3, [r7, #4]
    7186:	685a      	ldr	r2, [r3, #4]
    7188:	683b      	ldr	r3, [r7, #0]
    718a:	4013      	ands	r3, r2
    718c:	2b00      	cmp	r3, #0
    718e:	d1f9      	bne.n	7184 <hri_eic_wait_for_sync+0xc>
	};
}
    7190:	bf00      	nop
    7192:	370c      	adds	r7, #12
    7194:	46bd      	mov	sp, r7
    7196:	f85d 7b04 	ldr.w	r7, [sp], #4
    719a:	4770      	bx	lr

0000719c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    719c:	b480      	push	{r7}
    719e:	b083      	sub	sp, #12
    71a0:	af00      	add	r7, sp, #0
    71a2:	6078      	str	r0, [r7, #4]
    71a4:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	685a      	ldr	r2, [r3, #4]
    71aa:	683b      	ldr	r3, [r7, #0]
    71ac:	4013      	ands	r3, r2
    71ae:	2b00      	cmp	r3, #0
    71b0:	bf14      	ite	ne
    71b2:	2301      	movne	r3, #1
    71b4:	2300      	moveq	r3, #0
    71b6:	b2db      	uxtb	r3, r3
}
    71b8:	4618      	mov	r0, r3
    71ba:	370c      	adds	r7, #12
    71bc:	46bd      	mov	sp, r7
    71be:	f85d 7b04 	ldr.w	r7, [sp], #4
    71c2:	4770      	bx	lr

000071c4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    71c4:	b480      	push	{r7}
    71c6:	b083      	sub	sp, #12
    71c8:	af00      	add	r7, sp, #0
    71ca:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	695b      	ldr	r3, [r3, #20]
}
    71d0:	4618      	mov	r0, r3
    71d2:	370c      	adds	r7, #12
    71d4:	46bd      	mov	sp, r7
    71d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71da:	4770      	bx	lr

000071dc <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    71dc:	b480      	push	{r7}
    71de:	b083      	sub	sp, #12
    71e0:	af00      	add	r7, sp, #0
    71e2:	6078      	str	r0, [r7, #4]
    71e4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    71e6:	687b      	ldr	r3, [r7, #4]
    71e8:	683a      	ldr	r2, [r7, #0]
    71ea:	615a      	str	r2, [r3, #20]
}
    71ec:	bf00      	nop
    71ee:	370c      	adds	r7, #12
    71f0:	46bd      	mov	sp, r7
    71f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71f6:	4770      	bx	lr

000071f8 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    71f8:	b480      	push	{r7}
    71fa:	b083      	sub	sp, #12
    71fc:	af00      	add	r7, sp, #0
    71fe:	6078      	str	r0, [r7, #4]
    7200:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	683a      	ldr	r2, [r7, #0]
    7206:	611a      	str	r2, [r3, #16]
}
    7208:	bf00      	nop
    720a:	370c      	adds	r7, #12
    720c:	46bd      	mov	sp, r7
    720e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7212:	4770      	bx	lr

00007214 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    7214:	b480      	push	{r7}
    7216:	b083      	sub	sp, #12
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
    721c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	683a      	ldr	r2, [r7, #0]
    7222:	60da      	str	r2, [r3, #12]
}
    7224:	bf00      	nop
    7226:	370c      	adds	r7, #12
    7228:	46bd      	mov	sp, r7
    722a:	f85d 7b04 	ldr.w	r7, [sp], #4
    722e:	4770      	bx	lr

00007230 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7230:	b580      	push	{r7, lr}
    7232:	b082      	sub	sp, #8
    7234:	af00      	add	r7, sp, #0
    7236:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    7238:	687b      	ldr	r3, [r7, #4]
    723a:	781b      	ldrb	r3, [r3, #0]
    723c:	b2db      	uxtb	r3, r3
    723e:	f043 0302 	orr.w	r3, r3, #2
    7242:	b2da      	uxtb	r2, r3
    7244:	687b      	ldr	r3, [r7, #4]
    7246:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7248:	2103      	movs	r1, #3
    724a:	6878      	ldr	r0, [r7, #4]
    724c:	4b02      	ldr	r3, [pc, #8]	; (7258 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    724e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7250:	bf00      	nop
    7252:	3708      	adds	r7, #8
    7254:	46bd      	mov	sp, r7
    7256:	bd80      	pop	{r7, pc}
    7258:	00007179 	.word	0x00007179

0000725c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    725c:	b580      	push	{r7, lr}
    725e:	b082      	sub	sp, #8
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	b2db      	uxtb	r3, r3
    726a:	f023 0302 	bic.w	r3, r3, #2
    726e:	b2da      	uxtb	r2, r3
    7270:	687b      	ldr	r3, [r7, #4]
    7272:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7274:	2103      	movs	r1, #3
    7276:	6878      	ldr	r0, [r7, #4]
    7278:	4b02      	ldr	r3, [pc, #8]	; (7284 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    727a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    727c:	bf00      	nop
    727e:	3708      	adds	r7, #8
    7280:	46bd      	mov	sp, r7
    7282:	bd80      	pop	{r7, pc}
    7284:	00007179 	.word	0x00007179

00007288 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    7288:	b580      	push	{r7, lr}
    728a:	b084      	sub	sp, #16
    728c:	af00      	add	r7, sp, #0
    728e:	6078      	str	r0, [r7, #4]
    7290:	460b      	mov	r3, r1
    7292:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    729a:	7bfb      	ldrb	r3, [r7, #15]
    729c:	f023 0310 	bic.w	r3, r3, #16
    72a0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    72a2:	78fb      	ldrb	r3, [r7, #3]
    72a4:	011b      	lsls	r3, r3, #4
    72a6:	b25a      	sxtb	r2, r3
    72a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    72ac:	4313      	orrs	r3, r2
    72ae:	b25b      	sxtb	r3, r3
    72b0:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    72b2:	687b      	ldr	r3, [r7, #4]
    72b4:	7bfa      	ldrb	r2, [r7, #15]
    72b6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    72b8:	2103      	movs	r1, #3
    72ba:	6878      	ldr	r0, [r7, #4]
    72bc:	4b02      	ldr	r3, [pc, #8]	; (72c8 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    72be:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    72c0:	bf00      	nop
    72c2:	3710      	adds	r7, #16
    72c4:	46bd      	mov	sp, r7
    72c6:	bd80      	pop	{r7, pc}
    72c8:	00007179 	.word	0x00007179

000072cc <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    72cc:	b580      	push	{r7, lr}
    72ce:	b084      	sub	sp, #16
    72d0:	af00      	add	r7, sp, #0
    72d2:	6078      	str	r0, [r7, #4]
    72d4:	460b      	mov	r3, r1
    72d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    72d8:	2103      	movs	r1, #3
    72da:	6878      	ldr	r0, [r7, #4]
    72dc:	4b06      	ldr	r3, [pc, #24]	; (72f8 <hri_eic_get_CTRLA_reg+0x2c>)
    72de:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	781b      	ldrb	r3, [r3, #0]
    72e4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    72e6:	7bfa      	ldrb	r2, [r7, #15]
    72e8:	78fb      	ldrb	r3, [r7, #3]
    72ea:	4013      	ands	r3, r2
    72ec:	73fb      	strb	r3, [r7, #15]
	return tmp;
    72ee:	7bfb      	ldrb	r3, [r7, #15]
}
    72f0:	4618      	mov	r0, r3
    72f2:	3710      	adds	r7, #16
    72f4:	46bd      	mov	sp, r7
    72f6:	bd80      	pop	{r7, pc}
    72f8:	00007179 	.word	0x00007179

000072fc <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    72fc:	b580      	push	{r7, lr}
    72fe:	b082      	sub	sp, #8
    7300:	af00      	add	r7, sp, #0
    7302:	6078      	str	r0, [r7, #4]
    7304:	460b      	mov	r3, r1
    7306:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	78fa      	ldrb	r2, [r7, #3]
    730c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    730e:	2103      	movs	r1, #3
    7310:	6878      	ldr	r0, [r7, #4]
    7312:	4b03      	ldr	r3, [pc, #12]	; (7320 <hri_eic_write_CTRLA_reg+0x24>)
    7314:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7316:	bf00      	nop
    7318:	3708      	adds	r7, #8
    731a:	46bd      	mov	sp, r7
    731c:	bd80      	pop	{r7, pc}
    731e:	bf00      	nop
    7320:	00007179 	.word	0x00007179

00007324 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    7324:	b480      	push	{r7}
    7326:	b083      	sub	sp, #12
    7328:	af00      	add	r7, sp, #0
    732a:	6078      	str	r0, [r7, #4]
    732c:	460b      	mov	r3, r1
    732e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	78fa      	ldrb	r2, [r7, #3]
    7334:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7336:	bf00      	nop
    7338:	370c      	adds	r7, #12
    733a:	46bd      	mov	sp, r7
    733c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7340:	4770      	bx	lr

00007342 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    7342:	b480      	push	{r7}
    7344:	b083      	sub	sp, #12
    7346:	af00      	add	r7, sp, #0
    7348:	6078      	str	r0, [r7, #4]
    734a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	683a      	ldr	r2, [r7, #0]
    7350:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7352:	bf00      	nop
    7354:	370c      	adds	r7, #12
    7356:	46bd      	mov	sp, r7
    7358:	f85d 7b04 	ldr.w	r7, [sp], #4
    735c:	4770      	bx	lr

0000735e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    735e:	b480      	push	{r7}
    7360:	b083      	sub	sp, #12
    7362:	af00      	add	r7, sp, #0
    7364:	6078      	str	r0, [r7, #4]
    7366:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    7368:	687b      	ldr	r3, [r7, #4]
    736a:	683a      	ldr	r2, [r7, #0]
    736c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    736e:	bf00      	nop
    7370:	370c      	adds	r7, #12
    7372:	46bd      	mov	sp, r7
    7374:	f85d 7b04 	ldr.w	r7, [sp], #4
    7378:	4770      	bx	lr

0000737a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    737a:	b480      	push	{r7}
    737c:	b085      	sub	sp, #20
    737e:	af00      	add	r7, sp, #0
    7380:	60f8      	str	r0, [r7, #12]
    7382:	460b      	mov	r3, r1
    7384:	607a      	str	r2, [r7, #4]
    7386:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    7388:	7afb      	ldrb	r3, [r7, #11]
    738a:	68fa      	ldr	r2, [r7, #12]
    738c:	3306      	adds	r3, #6
    738e:	009b      	lsls	r3, r3, #2
    7390:	4413      	add	r3, r2
    7392:	687a      	ldr	r2, [r7, #4]
    7394:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7396:	bf00      	nop
    7398:	3714      	adds	r7, #20
    739a:	46bd      	mov	sp, r7
    739c:	f85d 7b04 	ldr.w	r7, [sp], #4
    73a0:	4770      	bx	lr

000073a2 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    73a2:	b480      	push	{r7}
    73a4:	b083      	sub	sp, #12
    73a6:	af00      	add	r7, sp, #0
    73a8:	6078      	str	r0, [r7, #4]
    73aa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	683a      	ldr	r2, [r7, #0]
    73b0:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    73b2:	bf00      	nop
    73b4:	370c      	adds	r7, #12
    73b6:	46bd      	mov	sp, r7
    73b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    73bc:	4770      	bx	lr

000073be <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    73be:	b480      	push	{r7}
    73c0:	b083      	sub	sp, #12
    73c2:	af00      	add	r7, sp, #0
    73c4:	6078      	str	r0, [r7, #4]
    73c6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	683a      	ldr	r2, [r7, #0]
    73cc:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    73ce:	bf00      	nop
    73d0:	370c      	adds	r7, #12
    73d2:	46bd      	mov	sp, r7
    73d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73d8:	4770      	bx	lr
	...

000073dc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    73dc:	b580      	push	{r7, lr}
    73de:	b082      	sub	sp, #8
    73e0:	af00      	add	r7, sp, #0
    73e2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    73e4:	2101      	movs	r1, #1
    73e6:	4838      	ldr	r0, [pc, #224]	; (74c8 <_ext_irq_init+0xec>)
    73e8:	4b38      	ldr	r3, [pc, #224]	; (74cc <_ext_irq_init+0xf0>)
    73ea:	4798      	blx	r3
    73ec:	4603      	mov	r3, r0
    73ee:	f083 0301 	eor.w	r3, r3, #1
    73f2:	b2db      	uxtb	r3, r3
    73f4:	2b00      	cmp	r3, #0
    73f6:	d011      	beq.n	741c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    73f8:	2102      	movs	r1, #2
    73fa:	4833      	ldr	r0, [pc, #204]	; (74c8 <_ext_irq_init+0xec>)
    73fc:	4b34      	ldr	r3, [pc, #208]	; (74d0 <_ext_irq_init+0xf4>)
    73fe:	4798      	blx	r3
    7400:	4603      	mov	r3, r0
    7402:	2b00      	cmp	r3, #0
    7404:	d006      	beq.n	7414 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    7406:	4830      	ldr	r0, [pc, #192]	; (74c8 <_ext_irq_init+0xec>)
    7408:	4b32      	ldr	r3, [pc, #200]	; (74d4 <_ext_irq_init+0xf8>)
    740a:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    740c:	2102      	movs	r1, #2
    740e:	482e      	ldr	r0, [pc, #184]	; (74c8 <_ext_irq_init+0xec>)
    7410:	4b31      	ldr	r3, [pc, #196]	; (74d8 <_ext_irq_init+0xfc>)
    7412:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    7414:	2101      	movs	r1, #1
    7416:	482c      	ldr	r0, [pc, #176]	; (74c8 <_ext_irq_init+0xec>)
    7418:	4b30      	ldr	r3, [pc, #192]	; (74dc <_ext_irq_init+0x100>)
    741a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    741c:	2101      	movs	r1, #1
    741e:	482a      	ldr	r0, [pc, #168]	; (74c8 <_ext_irq_init+0xec>)
    7420:	4b2d      	ldr	r3, [pc, #180]	; (74d8 <_ext_irq_init+0xfc>)
    7422:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    7424:	2100      	movs	r1, #0
    7426:	4828      	ldr	r0, [pc, #160]	; (74c8 <_ext_irq_init+0xec>)
    7428:	4b2d      	ldr	r3, [pc, #180]	; (74e0 <_ext_irq_init+0x104>)
    742a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    742c:	2100      	movs	r1, #0
    742e:	4826      	ldr	r0, [pc, #152]	; (74c8 <_ext_irq_init+0xec>)
    7430:	4b2c      	ldr	r3, [pc, #176]	; (74e4 <_ext_irq_init+0x108>)
    7432:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    7434:	2100      	movs	r1, #0
    7436:	4824      	ldr	r0, [pc, #144]	; (74c8 <_ext_irq_init+0xec>)
    7438:	4b2b      	ldr	r3, [pc, #172]	; (74e8 <_ext_irq_init+0x10c>)
    743a:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    743c:	2130      	movs	r1, #48	; 0x30
    743e:	4822      	ldr	r0, [pc, #136]	; (74c8 <_ext_irq_init+0xec>)
    7440:	4b2a      	ldr	r3, [pc, #168]	; (74ec <_ext_irq_init+0x110>)
    7442:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    7444:	2130      	movs	r1, #48	; 0x30
    7446:	4820      	ldr	r0, [pc, #128]	; (74c8 <_ext_irq_init+0xec>)
    7448:	4b29      	ldr	r3, [pc, #164]	; (74f0 <_ext_irq_init+0x114>)
    744a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    744c:	2100      	movs	r1, #0
    744e:	481e      	ldr	r0, [pc, #120]	; (74c8 <_ext_irq_init+0xec>)
    7450:	4b28      	ldr	r3, [pc, #160]	; (74f4 <_ext_irq_init+0x118>)
    7452:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7454:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    7458:	2100      	movs	r1, #0
    745a:	481b      	ldr	r0, [pc, #108]	; (74c8 <_ext_irq_init+0xec>)
    745c:	4b26      	ldr	r3, [pc, #152]	; (74f8 <_ext_irq_init+0x11c>)
    745e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7460:	2200      	movs	r2, #0
    7462:	2101      	movs	r1, #1
    7464:	4818      	ldr	r0, [pc, #96]	; (74c8 <_ext_irq_init+0xec>)
    7466:	4b24      	ldr	r3, [pc, #144]	; (74f8 <_ext_irq_init+0x11c>)
    7468:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    746a:	4817      	ldr	r0, [pc, #92]	; (74c8 <_ext_irq_init+0xec>)
    746c:	4b23      	ldr	r3, [pc, #140]	; (74fc <_ext_irq_init+0x120>)
    746e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    7470:	2010      	movs	r0, #16
    7472:	4b23      	ldr	r3, [pc, #140]	; (7500 <_ext_irq_init+0x124>)
    7474:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    7476:	2010      	movs	r0, #16
    7478:	4b22      	ldr	r3, [pc, #136]	; (7504 <_ext_irq_init+0x128>)
    747a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    747c:	2010      	movs	r0, #16
    747e:	4b22      	ldr	r3, [pc, #136]	; (7508 <_ext_irq_init+0x12c>)
    7480:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    7482:	2011      	movs	r0, #17
    7484:	4b1e      	ldr	r3, [pc, #120]	; (7500 <_ext_irq_init+0x124>)
    7486:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    7488:	2011      	movs	r0, #17
    748a:	4b1e      	ldr	r3, [pc, #120]	; (7504 <_ext_irq_init+0x128>)
    748c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    748e:	2011      	movs	r0, #17
    7490:	4b1d      	ldr	r3, [pc, #116]	; (7508 <_ext_irq_init+0x12c>)
    7492:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    7494:	2012      	movs	r0, #18
    7496:	4b1a      	ldr	r3, [pc, #104]	; (7500 <_ext_irq_init+0x124>)
    7498:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    749a:	2012      	movs	r0, #18
    749c:	4b19      	ldr	r3, [pc, #100]	; (7504 <_ext_irq_init+0x128>)
    749e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    74a0:	2012      	movs	r0, #18
    74a2:	4b19      	ldr	r3, [pc, #100]	; (7508 <_ext_irq_init+0x12c>)
    74a4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    74a6:	2013      	movs	r0, #19
    74a8:	4b15      	ldr	r3, [pc, #84]	; (7500 <_ext_irq_init+0x124>)
    74aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    74ac:	2013      	movs	r0, #19
    74ae:	4b15      	ldr	r3, [pc, #84]	; (7504 <_ext_irq_init+0x128>)
    74b0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    74b2:	2013      	movs	r0, #19
    74b4:	4b14      	ldr	r3, [pc, #80]	; (7508 <_ext_irq_init+0x12c>)
    74b6:	4798      	blx	r3

	callback = cb;
    74b8:	4a14      	ldr	r2, [pc, #80]	; (750c <_ext_irq_init+0x130>)
    74ba:	687b      	ldr	r3, [r7, #4]
    74bc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    74be:	2300      	movs	r3, #0
}
    74c0:	4618      	mov	r0, r3
    74c2:	3708      	adds	r7, #8
    74c4:	46bd      	mov	sp, r7
    74c6:	bd80      	pop	{r7, pc}
    74c8:	40002800 	.word	0x40002800
    74cc:	0000719d 	.word	0x0000719d
    74d0:	000072cd 	.word	0x000072cd
    74d4:	0000725d 	.word	0x0000725d
    74d8:	00007179 	.word	0x00007179
    74dc:	000072fd 	.word	0x000072fd
    74e0:	00007289 	.word	0x00007289
    74e4:	00007325 	.word	0x00007325
    74e8:	00007343 	.word	0x00007343
    74ec:	0000735f 	.word	0x0000735f
    74f0:	000073a3 	.word	0x000073a3
    74f4:	000073bf 	.word	0x000073bf
    74f8:	0000737b 	.word	0x0000737b
    74fc:	00007231 	.word	0x00007231
    7500:	000070f9 	.word	0x000070f9
    7504:	0000713d 	.word	0x0000713d
    7508:	000070bd 	.word	0x000070bd
    750c:	2000309c 	.word	0x2000309c

00007510 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    7510:	b580      	push	{r7, lr}
    7512:	b084      	sub	sp, #16
    7514:	af00      	add	r7, sp, #0
    7516:	6078      	str	r0, [r7, #4]
    7518:	460b      	mov	r3, r1
    751a:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    751c:	23ff      	movs	r3, #255	; 0xff
    751e:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    7520:	2300      	movs	r3, #0
    7522:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    7524:	e010      	b.n	7548 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    7526:	7bbb      	ldrb	r3, [r7, #14]
    7528:	4a1c      	ldr	r2, [pc, #112]	; (759c <_ext_irq_enable+0x8c>)
    752a:	00db      	lsls	r3, r3, #3
    752c:	4413      	add	r3, r2
    752e:	685a      	ldr	r2, [r3, #4]
    7530:	687b      	ldr	r3, [r7, #4]
    7532:	429a      	cmp	r2, r3
    7534:	d105      	bne.n	7542 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    7536:	7bbb      	ldrb	r3, [r7, #14]
    7538:	4a18      	ldr	r2, [pc, #96]	; (759c <_ext_irq_enable+0x8c>)
    753a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    753e:	73fb      	strb	r3, [r7, #15]
			break;
    7540:	e005      	b.n	754e <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    7542:	7bbb      	ldrb	r3, [r7, #14]
    7544:	3301      	adds	r3, #1
    7546:	73bb      	strb	r3, [r7, #14]
    7548:	7bbb      	ldrb	r3, [r7, #14]
    754a:	2b03      	cmp	r3, #3
    754c:	d9eb      	bls.n	7526 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    754e:	7bfb      	ldrb	r3, [r7, #15]
    7550:	2bff      	cmp	r3, #255	; 0xff
    7552:	d102      	bne.n	755a <_ext_irq_enable+0x4a>
		return -1;
    7554:	f04f 33ff 	mov.w	r3, #4294967295
    7558:	e01c      	b.n	7594 <_ext_irq_enable+0x84>
	}

	if (enable) {
    755a:	78fb      	ldrb	r3, [r7, #3]
    755c:	2b00      	cmp	r3, #0
    755e:	d008      	beq.n	7572 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    7560:	7bfb      	ldrb	r3, [r7, #15]
    7562:	2201      	movs	r2, #1
    7564:	fa02 f303 	lsl.w	r3, r2, r3
    7568:	4619      	mov	r1, r3
    756a:	480d      	ldr	r0, [pc, #52]	; (75a0 <_ext_irq_enable+0x90>)
    756c:	4b0d      	ldr	r3, [pc, #52]	; (75a4 <_ext_irq_enable+0x94>)
    756e:	4798      	blx	r3
    7570:	e00f      	b.n	7592 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    7572:	7bfb      	ldrb	r3, [r7, #15]
    7574:	2201      	movs	r2, #1
    7576:	fa02 f303 	lsl.w	r3, r2, r3
    757a:	4619      	mov	r1, r3
    757c:	4808      	ldr	r0, [pc, #32]	; (75a0 <_ext_irq_enable+0x90>)
    757e:	4b0a      	ldr	r3, [pc, #40]	; (75a8 <_ext_irq_enable+0x98>)
    7580:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    7582:	7bfb      	ldrb	r3, [r7, #15]
    7584:	2201      	movs	r2, #1
    7586:	fa02 f303 	lsl.w	r3, r2, r3
    758a:	4619      	mov	r1, r3
    758c:	4804      	ldr	r0, [pc, #16]	; (75a0 <_ext_irq_enable+0x90>)
    758e:	4b07      	ldr	r3, [pc, #28]	; (75ac <_ext_irq_enable+0x9c>)
    7590:	4798      	blx	r3
	}

	return ERR_NONE;
    7592:	2300      	movs	r3, #0
}
    7594:	4618      	mov	r0, r3
    7596:	3710      	adds	r7, #16
    7598:	46bd      	mov	sp, r7
    759a:	bd80      	pop	{r7, pc}
    759c:	0001717c 	.word	0x0001717c
    75a0:	40002800 	.word	0x40002800
    75a4:	000071f9 	.word	0x000071f9
    75a8:	00007215 	.word	0x00007215
    75ac:	000071dd 	.word	0x000071dd

000075b0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    75b0:	b580      	push	{r7, lr}
    75b2:	b084      	sub	sp, #16
    75b4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    75b6:	4841      	ldr	r0, [pc, #260]	; (76bc <_ext_irq_handler+0x10c>)
    75b8:	4b41      	ldr	r3, [pc, #260]	; (76c0 <_ext_irq_handler+0x110>)
    75ba:	4798      	blx	r3
    75bc:	4603      	mov	r3, r0
    75be:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    75c0:	f04f 33ff 	mov.w	r3, #4294967295
    75c4:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    75c6:	683b      	ldr	r3, [r7, #0]
    75c8:	4619      	mov	r1, r3
    75ca:	483c      	ldr	r0, [pc, #240]	; (76bc <_ext_irq_handler+0x10c>)
    75cc:	4b3d      	ldr	r3, [pc, #244]	; (76c4 <_ext_irq_handler+0x114>)
    75ce:	4798      	blx	r3

	ASSERT(callback);
    75d0:	4b3d      	ldr	r3, [pc, #244]	; (76c8 <_ext_irq_handler+0x118>)
    75d2:	681b      	ldr	r3, [r3, #0]
    75d4:	2b00      	cmp	r3, #0
    75d6:	bf14      	ite	ne
    75d8:	2301      	movne	r3, #1
    75da:	2300      	moveq	r3, #0
    75dc:	b2db      	uxtb	r3, r3
    75de:	22f4      	movs	r2, #244	; 0xf4
    75e0:	493a      	ldr	r1, [pc, #232]	; (76cc <_ext_irq_handler+0x11c>)
    75e2:	4618      	mov	r0, r3
    75e4:	4b3a      	ldr	r3, [pc, #232]	; (76d0 <_ext_irq_handler+0x120>)
    75e6:	4798      	blx	r3

	while (flags) {
    75e8:	e060      	b.n	76ac <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    75ea:	683b      	ldr	r3, [r7, #0]
    75ec:	4618      	mov	r0, r3
    75ee:	4b39      	ldr	r3, [pc, #228]	; (76d4 <_ext_irq_handler+0x124>)
    75f0:	4798      	blx	r3
    75f2:	4603      	mov	r3, r0
    75f4:	b2db      	uxtb	r3, r3
    75f6:	3b01      	subs	r3, #1
    75f8:	b2db      	uxtb	r3, r3
    75fa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    75fc:	e047      	b.n	768e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    75fe:	2300      	movs	r3, #0
    7600:	71fb      	strb	r3, [r7, #7]
    7602:	2304      	movs	r3, #4
    7604:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    7606:	e024      	b.n	7652 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    7608:	79ba      	ldrb	r2, [r7, #6]
    760a:	79fb      	ldrb	r3, [r7, #7]
    760c:	4413      	add	r3, r2
    760e:	105b      	asrs	r3, r3, #1
    7610:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    7612:	797b      	ldrb	r3, [r7, #5]
    7614:	4a30      	ldr	r2, [pc, #192]	; (76d8 <_ext_irq_handler+0x128>)
    7616:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    761a:	461a      	mov	r2, r3
    761c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7620:	429a      	cmp	r2, r3
    7622:	d106      	bne.n	7632 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    7624:	797b      	ldrb	r3, [r7, #5]
    7626:	4a2c      	ldr	r2, [pc, #176]	; (76d8 <_ext_irq_handler+0x128>)
    7628:	00db      	lsls	r3, r3, #3
    762a:	4413      	add	r3, r2
    762c:	685b      	ldr	r3, [r3, #4]
    762e:	60bb      	str	r3, [r7, #8]
					break;
    7630:	e013      	b.n	765a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7632:	797b      	ldrb	r3, [r7, #5]
    7634:	4a28      	ldr	r2, [pc, #160]	; (76d8 <_ext_irq_handler+0x128>)
    7636:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    763a:	461a      	mov	r2, r3
    763c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7640:	429a      	cmp	r2, r3
    7642:	da03      	bge.n	764c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    7644:	797b      	ldrb	r3, [r7, #5]
    7646:	3301      	adds	r3, #1
    7648:	71fb      	strb	r3, [r7, #7]
    764a:	e002      	b.n	7652 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    764c:	797b      	ldrb	r3, [r7, #5]
    764e:	3b01      	subs	r3, #1
    7650:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    7652:	79ba      	ldrb	r2, [r7, #6]
    7654:	79fb      	ldrb	r3, [r7, #7]
    7656:	429a      	cmp	r2, r3
    7658:	d2d6      	bcs.n	7608 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    765a:	68bb      	ldr	r3, [r7, #8]
    765c:	f1b3 3fff 	cmp.w	r3, #4294967295
    7660:	d003      	beq.n	766a <_ext_irq_handler+0xba>
				callback(pin);
    7662:	4b19      	ldr	r3, [pc, #100]	; (76c8 <_ext_irq_handler+0x118>)
    7664:	681b      	ldr	r3, [r3, #0]
    7666:	68b8      	ldr	r0, [r7, #8]
    7668:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    766a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    766e:	2201      	movs	r2, #1
    7670:	fa02 f303 	lsl.w	r3, r2, r3
    7674:	43da      	mvns	r2, r3
    7676:	683b      	ldr	r3, [r7, #0]
    7678:	4013      	ands	r3, r2
    767a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    767c:	683b      	ldr	r3, [r7, #0]
    767e:	4618      	mov	r0, r3
    7680:	4b14      	ldr	r3, [pc, #80]	; (76d4 <_ext_irq_handler+0x124>)
    7682:	4798      	blx	r3
    7684:	4603      	mov	r3, r0
    7686:	b2db      	uxtb	r3, r3
    7688:	3b01      	subs	r3, #1
    768a:	b2db      	uxtb	r3, r3
    768c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    768e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7692:	f1b3 3fff 	cmp.w	r3, #4294967295
    7696:	d1b2      	bne.n	75fe <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    7698:	4808      	ldr	r0, [pc, #32]	; (76bc <_ext_irq_handler+0x10c>)
    769a:	4b09      	ldr	r3, [pc, #36]	; (76c0 <_ext_irq_handler+0x110>)
    769c:	4798      	blx	r3
    769e:	4603      	mov	r3, r0
    76a0:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    76a2:	683b      	ldr	r3, [r7, #0]
    76a4:	4619      	mov	r1, r3
    76a6:	4805      	ldr	r0, [pc, #20]	; (76bc <_ext_irq_handler+0x10c>)
    76a8:	4b06      	ldr	r3, [pc, #24]	; (76c4 <_ext_irq_handler+0x114>)
    76aa:	4798      	blx	r3
	while (flags) {
    76ac:	683b      	ldr	r3, [r7, #0]
    76ae:	2b00      	cmp	r3, #0
    76b0:	d19b      	bne.n	75ea <_ext_irq_handler+0x3a>
	}
}
    76b2:	bf00      	nop
    76b4:	3710      	adds	r7, #16
    76b6:	46bd      	mov	sp, r7
    76b8:	bd80      	pop	{r7, pc}
    76ba:	bf00      	nop
    76bc:	40002800 	.word	0x40002800
    76c0:	000071c5 	.word	0x000071c5
    76c4:	000071dd 	.word	0x000071dd
    76c8:	2000309c 	.word	0x2000309c
    76cc:	0001719c 	.word	0x0001719c
    76d0:	00006251 	.word	0x00006251
    76d4:	000164c1 	.word	0x000164c1
    76d8:	0001717c 	.word	0x0001717c

000076dc <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    76dc:	b580      	push	{r7, lr}
    76de:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    76e0:	4b01      	ldr	r3, [pc, #4]	; (76e8 <EIC_4_Handler+0xc>)
    76e2:	4798      	blx	r3
} /**
    76e4:	bf00      	nop
    76e6:	bd80      	pop	{r7, pc}
    76e8:	000075b1 	.word	0x000075b1

000076ec <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    76ec:	b580      	push	{r7, lr}
    76ee:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    76f0:	4b01      	ldr	r3, [pc, #4]	; (76f8 <EIC_5_Handler+0xc>)
    76f2:	4798      	blx	r3
} /**
    76f4:	bf00      	nop
    76f6:	bd80      	pop	{r7, pc}
    76f8:	000075b1 	.word	0x000075b1

000076fc <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7700:	4b01      	ldr	r3, [pc, #4]	; (7708 <EIC_6_Handler+0xc>)
    7702:	4798      	blx	r3
} /**
    7704:	bf00      	nop
    7706:	bd80      	pop	{r7, pc}
    7708:	000075b1 	.word	0x000075b1

0000770c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    770c:	b580      	push	{r7, lr}
    770e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7710:	4b01      	ldr	r3, [pc, #4]	; (7718 <EIC_7_Handler+0xc>)
    7712:	4798      	blx	r3
}
    7714:	bf00      	nop
    7716:	bd80      	pop	{r7, pc}
    7718:	000075b1 	.word	0x000075b1

0000771c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    771c:	b480      	push	{r7}
    771e:	b085      	sub	sp, #20
    7720:	af00      	add	r7, sp, #0
    7722:	60f8      	str	r0, [r7, #12]
    7724:	460b      	mov	r3, r1
    7726:	607a      	str	r2, [r7, #4]
    7728:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    772a:	7afa      	ldrb	r2, [r7, #11]
    772c:	68fb      	ldr	r3, [r7, #12]
    772e:	3248      	adds	r2, #72	; 0x48
    7730:	6879      	ldr	r1, [r7, #4]
    7732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7736:	bf00      	nop
    7738:	3714      	adds	r7, #20
    773a:	46bd      	mov	sp, r7
    773c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7740:	4770      	bx	lr

00007742 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7742:	b480      	push	{r7}
    7744:	b083      	sub	sp, #12
    7746:	af00      	add	r7, sp, #0
    7748:	6078      	str	r0, [r7, #4]
    774a:	460b      	mov	r3, r1
    774c:	70fb      	strb	r3, [r7, #3]
    774e:	4613      	mov	r3, r2
    7750:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7752:	78fb      	ldrb	r3, [r7, #3]
    7754:	687a      	ldr	r2, [r7, #4]
    7756:	3304      	adds	r3, #4
    7758:	00db      	lsls	r3, r3, #3
    775a:	4413      	add	r3, r2
    775c:	78ba      	ldrb	r2, [r7, #2]
    775e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7760:	78fb      	ldrb	r3, [r7, #3]
    7762:	78ba      	ldrb	r2, [r7, #2]
    7764:	43d2      	mvns	r2, r2
    7766:	b2d1      	uxtb	r1, r2
    7768:	687a      	ldr	r2, [r7, #4]
    776a:	3304      	adds	r3, #4
    776c:	00db      	lsls	r3, r3, #3
    776e:	4413      	add	r3, r2
    7770:	460a      	mov	r2, r1
    7772:	711a      	strb	r2, [r3, #4]
}
    7774:	bf00      	nop
    7776:	370c      	adds	r7, #12
    7778:	46bd      	mov	sp, r7
    777a:	f85d 7b04 	ldr.w	r7, [sp], #4
    777e:	4770      	bx	lr

00007780 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    7780:	b480      	push	{r7}
    7782:	b085      	sub	sp, #20
    7784:	af00      	add	r7, sp, #0
    7786:	60f8      	str	r0, [r7, #12]
    7788:	460b      	mov	r3, r1
    778a:	607a      	str	r2, [r7, #4]
    778c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    778e:	7afa      	ldrb	r2, [r7, #11]
    7790:	68fb      	ldr	r3, [r7, #12]
    7792:	3204      	adds	r2, #4
    7794:	6879      	ldr	r1, [r7, #4]
    7796:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    779a:	bf00      	nop
    779c:	3714      	adds	r7, #20
    779e:	46bd      	mov	sp, r7
    77a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    77a4:	4770      	bx	lr
	...

000077a8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b082      	sub	sp, #8
    77ac:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    77ae:	2300      	movs	r3, #0
    77b0:	71fb      	strb	r3, [r7, #7]
    77b2:	e00b      	b.n	77cc <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    77b4:	79fb      	ldrb	r3, [r7, #7]
    77b6:	4a18      	ldr	r2, [pc, #96]	; (7818 <_event_system_init+0x70>)
    77b8:	5cd3      	ldrb	r3, [r2, r3]
    77ba:	461a      	mov	r2, r3
    77bc:	79fb      	ldrb	r3, [r7, #7]
    77be:	4619      	mov	r1, r3
    77c0:	4816      	ldr	r0, [pc, #88]	; (781c <_event_system_init+0x74>)
    77c2:	4b17      	ldr	r3, [pc, #92]	; (7820 <_event_system_init+0x78>)
    77c4:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    77c6:	79fb      	ldrb	r3, [r7, #7]
    77c8:	3301      	adds	r3, #1
    77ca:	71fb      	strb	r3, [r7, #7]
    77cc:	79fb      	ldrb	r3, [r7, #7]
    77ce:	2b42      	cmp	r3, #66	; 0x42
    77d0:	d9f0      	bls.n	77b4 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    77d2:	2300      	movs	r3, #0
    77d4:	71fb      	strb	r3, [r7, #7]
    77d6:	e016      	b.n	7806 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    77d8:	79fb      	ldrb	r3, [r7, #7]
    77da:	4a12      	ldr	r2, [pc, #72]	; (7824 <_event_system_init+0x7c>)
    77dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    77e0:	461a      	mov	r2, r3
    77e2:	79fb      	ldrb	r3, [r7, #7]
    77e4:	4619      	mov	r1, r3
    77e6:	480d      	ldr	r0, [pc, #52]	; (781c <_event_system_init+0x74>)
    77e8:	4b0f      	ldr	r3, [pc, #60]	; (7828 <_event_system_init+0x80>)
    77ea:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    77ec:	79fb      	ldrb	r3, [r7, #7]
    77ee:	4a0f      	ldr	r2, [pc, #60]	; (782c <_event_system_init+0x84>)
    77f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f4:	b2da      	uxtb	r2, r3
    77f6:	79fb      	ldrb	r3, [r7, #7]
    77f8:	4619      	mov	r1, r3
    77fa:	4808      	ldr	r0, [pc, #32]	; (781c <_event_system_init+0x74>)
    77fc:	4b0c      	ldr	r3, [pc, #48]	; (7830 <_event_system_init+0x88>)
    77fe:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7800:	79fb      	ldrb	r3, [r7, #7]
    7802:	3301      	adds	r3, #1
    7804:	71fb      	strb	r3, [r7, #7]
    7806:	79fb      	ldrb	r3, [r7, #7]
    7808:	2b1f      	cmp	r3, #31
    780a:	d9e5      	bls.n	77d8 <_event_system_init+0x30>
	}

	return ERR_NONE;
    780c:	2300      	movs	r3, #0
}
    780e:	4618      	mov	r0, r3
    7810:	3708      	adds	r7, #8
    7812:	46bd      	mov	sp, r7
    7814:	bd80      	pop	{r7, pc}
    7816:	bf00      	nop
    7818:	000171b4 	.word	0x000171b4
    781c:	4100e000 	.word	0x4100e000
    7820:	0000771d 	.word	0x0000771d
    7824:	000171f8 	.word	0x000171f8
    7828:	00007781 	.word	0x00007781
    782c:	00017238 	.word	0x00017238
    7830:	00007743 	.word	0x00007743

00007834 <hri_gclk_wait_for_sync>:
{
    7834:	b480      	push	{r7}
    7836:	b083      	sub	sp, #12
    7838:	af00      	add	r7, sp, #0
    783a:	6078      	str	r0, [r7, #4]
    783c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    783e:	bf00      	nop
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	685a      	ldr	r2, [r3, #4]
    7844:	683b      	ldr	r3, [r7, #0]
    7846:	4013      	ands	r3, r2
    7848:	2b00      	cmp	r3, #0
    784a:	d1f9      	bne.n	7840 <hri_gclk_wait_for_sync+0xc>
}
    784c:	bf00      	nop
    784e:	370c      	adds	r7, #12
    7850:	46bd      	mov	sp, r7
    7852:	f85d 7b04 	ldr.w	r7, [sp], #4
    7856:	4770      	bx	lr

00007858 <hri_gclk_write_GENCTRL_reg>:
{
    7858:	b580      	push	{r7, lr}
    785a:	b084      	sub	sp, #16
    785c:	af00      	add	r7, sp, #0
    785e:	60f8      	str	r0, [r7, #12]
    7860:	460b      	mov	r3, r1
    7862:	607a      	str	r2, [r7, #4]
    7864:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7866:	7afa      	ldrb	r2, [r7, #11]
    7868:	68fb      	ldr	r3, [r7, #12]
    786a:	3208      	adds	r2, #8
    786c:	6879      	ldr	r1, [r7, #4]
    786e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7872:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7876:	68f8      	ldr	r0, [r7, #12]
    7878:	4b02      	ldr	r3, [pc, #8]	; (7884 <hri_gclk_write_GENCTRL_reg+0x2c>)
    787a:	4798      	blx	r3
}
    787c:	bf00      	nop
    787e:	3710      	adds	r7, #16
    7880:	46bd      	mov	sp, r7
    7882:	bd80      	pop	{r7, pc}
    7884:	00007835 	.word	0x00007835

00007888 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    7888:	b580      	push	{r7, lr}
    788a:	b082      	sub	sp, #8
    788c:	af00      	add	r7, sp, #0
    788e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	f003 0301 	and.w	r3, r3, #1
    7896:	2b00      	cmp	r3, #0
    7898:	d004      	beq.n	78a4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    789a:	4a2c      	ldr	r2, [pc, #176]	; (794c <_gclk_init_generators_by_fref+0xc4>)
    789c:	2100      	movs	r1, #0
    789e:	482c      	ldr	r0, [pc, #176]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    78a0:	4b2c      	ldr	r3, [pc, #176]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    78a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	f003 0302 	and.w	r3, r3, #2
    78aa:	2b00      	cmp	r3, #0
    78ac:	d004      	beq.n	78b8 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    78ae:	4a2a      	ldr	r2, [pc, #168]	; (7958 <_gclk_init_generators_by_fref+0xd0>)
    78b0:	2101      	movs	r1, #1
    78b2:	4827      	ldr	r0, [pc, #156]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    78b4:	4b27      	ldr	r3, [pc, #156]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    78b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    78b8:	687b      	ldr	r3, [r7, #4]
    78ba:	f003 0304 	and.w	r3, r3, #4
    78be:	2b00      	cmp	r3, #0
    78c0:	d004      	beq.n	78cc <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    78c2:	4a26      	ldr	r2, [pc, #152]	; (795c <_gclk_init_generators_by_fref+0xd4>)
    78c4:	2102      	movs	r1, #2
    78c6:	4822      	ldr	r0, [pc, #136]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    78c8:	4b22      	ldr	r3, [pc, #136]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    78ca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    78cc:	687b      	ldr	r3, [r7, #4]
    78ce:	f003 0308 	and.w	r3, r3, #8
    78d2:	2b00      	cmp	r3, #0
    78d4:	d004      	beq.n	78e0 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    78d6:	4a22      	ldr	r2, [pc, #136]	; (7960 <_gclk_init_generators_by_fref+0xd8>)
    78d8:	2103      	movs	r1, #3
    78da:	481d      	ldr	r0, [pc, #116]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    78dc:	4b1d      	ldr	r3, [pc, #116]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    78de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	f003 0310 	and.w	r3, r3, #16
    78e6:	2b00      	cmp	r3, #0
    78e8:	d004      	beq.n	78f4 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    78ea:	4a1e      	ldr	r2, [pc, #120]	; (7964 <_gclk_init_generators_by_fref+0xdc>)
    78ec:	2104      	movs	r1, #4
    78ee:	4818      	ldr	r0, [pc, #96]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    78f0:	4b18      	ldr	r3, [pc, #96]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    78f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    78f4:	687b      	ldr	r3, [r7, #4]
    78f6:	f003 0320 	and.w	r3, r3, #32
    78fa:	2b00      	cmp	r3, #0
    78fc:	d004      	beq.n	7908 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    78fe:	4a1a      	ldr	r2, [pc, #104]	; (7968 <_gclk_init_generators_by_fref+0xe0>)
    7900:	2105      	movs	r1, #5
    7902:	4813      	ldr	r0, [pc, #76]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    7904:	4b13      	ldr	r3, [pc, #76]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    7906:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    790e:	2b00      	cmp	r3, #0
    7910:	d004      	beq.n	791c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    7912:	4a16      	ldr	r2, [pc, #88]	; (796c <_gclk_init_generators_by_fref+0xe4>)
    7914:	2106      	movs	r1, #6
    7916:	480e      	ldr	r0, [pc, #56]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    7918:	4b0e      	ldr	r3, [pc, #56]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    791a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7922:	2b00      	cmp	r3, #0
    7924:	d004      	beq.n	7930 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    7926:	4a12      	ldr	r2, [pc, #72]	; (7970 <_gclk_init_generators_by_fref+0xe8>)
    7928:	210a      	movs	r1, #10
    792a:	4809      	ldr	r0, [pc, #36]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    792c:	4b09      	ldr	r3, [pc, #36]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    792e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    7936:	2b00      	cmp	r3, #0
    7938:	d004      	beq.n	7944 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    793a:	4a0e      	ldr	r2, [pc, #56]	; (7974 <_gclk_init_generators_by_fref+0xec>)
    793c:	210b      	movs	r1, #11
    793e:	4804      	ldr	r0, [pc, #16]	; (7950 <_gclk_init_generators_by_fref+0xc8>)
    7940:	4b04      	ldr	r3, [pc, #16]	; (7954 <_gclk_init_generators_by_fref+0xcc>)
    7942:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    7944:	bf00      	nop
    7946:	3708      	adds	r7, #8
    7948:	46bd      	mov	sp, r7
    794a:	bd80      	pop	{r7, pc}
    794c:	00010107 	.word	0x00010107
    7950:	40001c00 	.word	0x40001c00
    7954:	00007859 	.word	0x00007859
    7958:	00010907 	.word	0x00010907
    795c:	00010906 	.word	0x00010906
    7960:	00020908 	.word	0x00020908
    7964:	00010901 	.word	0x00010901
    7968:	00062901 	.word	0x00062901
    796c:	000c2901 	.word	0x000c2901
    7970:	00010905 	.word	0x00010905
    7974:	00041905 	.word	0x00041905

00007978 <hri_mclk_write_CPUDIV_reg>:
{
    7978:	b480      	push	{r7}
    797a:	b083      	sub	sp, #12
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	460b      	mov	r3, r1
    7982:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7984:	687b      	ldr	r3, [r7, #4]
    7986:	78fa      	ldrb	r2, [r7, #3]
    7988:	715a      	strb	r2, [r3, #5]
}
    798a:	bf00      	nop
    798c:	370c      	adds	r7, #12
    798e:	46bd      	mov	sp, r7
    7990:	f85d 7b04 	ldr.w	r7, [sp], #4
    7994:	4770      	bx	lr
	...

00007998 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7998:	b580      	push	{r7, lr}
    799a:	b082      	sub	sp, #8
    799c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    799e:	4b05      	ldr	r3, [pc, #20]	; (79b4 <_mclk_init+0x1c>)
    79a0:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    79a2:	2101      	movs	r1, #1
    79a4:	6878      	ldr	r0, [r7, #4]
    79a6:	4b04      	ldr	r3, [pc, #16]	; (79b8 <_mclk_init+0x20>)
    79a8:	4798      	blx	r3
}
    79aa:	bf00      	nop
    79ac:	3708      	adds	r7, #8
    79ae:	46bd      	mov	sp, r7
    79b0:	bd80      	pop	{r7, pc}
    79b2:	bf00      	nop
    79b4:	40000800 	.word	0x40000800
    79b8:	00007979 	.word	0x00007979

000079bc <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    79bc:	b480      	push	{r7}
    79be:	b083      	sub	sp, #12
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	460b      	mov	r3, r1
    79c6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	78fa      	ldrb	r2, [r7, #3]
    79cc:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    79ce:	bf00      	nop
    79d0:	370c      	adds	r7, #12
    79d2:	46bd      	mov	sp, r7
    79d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d8:	4770      	bx	lr

000079da <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    79da:	b480      	push	{r7}
    79dc:	b083      	sub	sp, #12
    79de:	af00      	add	r7, sp, #0
    79e0:	6078      	str	r0, [r7, #4]
    79e2:	460b      	mov	r3, r1
    79e4:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	887a      	ldrh	r2, [r7, #2]
    79ea:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    79ec:	bf00      	nop
    79ee:	370c      	adds	r7, #12
    79f0:	46bd      	mov	sp, r7
    79f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f6:	4770      	bx	lr

000079f8 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    79f8:	b480      	push	{r7}
    79fa:	b083      	sub	sp, #12
    79fc:	af00      	add	r7, sp, #0
    79fe:	6078      	str	r0, [r7, #4]
    7a00:	460b      	mov	r3, r1
    7a02:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	78fa      	ldrb	r2, [r7, #3]
    7a08:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a0a:	bf00      	nop
    7a0c:	370c      	adds	r7, #12
    7a0e:	46bd      	mov	sp, r7
    7a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a14:	4770      	bx	lr

00007a16 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    7a16:	b480      	push	{r7}
    7a18:	b083      	sub	sp, #12
    7a1a:	af00      	add	r7, sp, #0
    7a1c:	6078      	str	r0, [r7, #4]
    7a1e:	460b      	mov	r3, r1
    7a20:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	78fa      	ldrb	r2, [r7, #3]
    7a26:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a28:	bf00      	nop
    7a2a:	370c      	adds	r7, #12
    7a2c:	46bd      	mov	sp, r7
    7a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a32:	4770      	bx	lr

00007a34 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    7a34:	b480      	push	{r7}
    7a36:	b085      	sub	sp, #20
    7a38:	af00      	add	r7, sp, #0
    7a3a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	69db      	ldr	r3, [r3, #28]
    7a40:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    7a42:	68fb      	ldr	r3, [r7, #12]
    7a44:	0a1b      	lsrs	r3, r3, #8
    7a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a4a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a4c:	68fb      	ldr	r3, [r7, #12]
}
    7a4e:	4618      	mov	r0, r3
    7a50:	3714      	adds	r7, #20
    7a52:	46bd      	mov	sp, r7
    7a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a58:	4770      	bx	lr

00007a5a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    7a5a:	b480      	push	{r7}
    7a5c:	b083      	sub	sp, #12
    7a5e:	af00      	add	r7, sp, #0
    7a60:	6078      	str	r0, [r7, #4]
    7a62:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	683a      	ldr	r2, [r7, #0]
    7a68:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7a6a:	bf00      	nop
    7a6c:	370c      	adds	r7, #12
    7a6e:	46bd      	mov	sp, r7
    7a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a74:	4770      	bx	lr
	...

00007a78 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7a78:	b580      	push	{r7, lr}
    7a7a:	b082      	sub	sp, #8
    7a7c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    7a7e:	4b13      	ldr	r3, [pc, #76]	; (7acc <_osc32kctrl_init_sources+0x54>)
    7a80:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    7a82:	2300      	movs	r3, #0
    7a84:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7a86:	f242 018e 	movw	r1, #8334	; 0x208e
    7a8a:	6878      	ldr	r0, [r7, #4]
    7a8c:	4b10      	ldr	r3, [pc, #64]	; (7ad0 <_osc32kctrl_init_sources+0x58>)
    7a8e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    7a90:	2100      	movs	r1, #0
    7a92:	6878      	ldr	r0, [r7, #4]
    7a94:	4b0f      	ldr	r3, [pc, #60]	; (7ad4 <_osc32kctrl_init_sources+0x5c>)
    7a96:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7a98:	2100      	movs	r1, #0
    7a9a:	6878      	ldr	r0, [r7, #4]
    7a9c:	4b0e      	ldr	r3, [pc, #56]	; (7ad8 <_osc32kctrl_init_sources+0x60>)
    7a9e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    7aa0:	6878      	ldr	r0, [r7, #4]
    7aa2:	4b0e      	ldr	r3, [pc, #56]	; (7adc <_osc32kctrl_init_sources+0x64>)
    7aa4:	4798      	blx	r3
    7aa6:	4603      	mov	r3, r0
    7aa8:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7aaa:	887b      	ldrh	r3, [r7, #2]
    7aac:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    7aae:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    7ab2:	4619      	mov	r1, r3
    7ab4:	6878      	ldr	r0, [r7, #4]
    7ab6:	4b0a      	ldr	r3, [pc, #40]	; (7ae0 <_osc32kctrl_init_sources+0x68>)
    7ab8:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    7aba:	2100      	movs	r1, #0
    7abc:	6878      	ldr	r0, [r7, #4]
    7abe:	4b09      	ldr	r3, [pc, #36]	; (7ae4 <_osc32kctrl_init_sources+0x6c>)
    7ac0:	4798      	blx	r3
	(void)calib;
}
    7ac2:	bf00      	nop
    7ac4:	3708      	adds	r7, #8
    7ac6:	46bd      	mov	sp, r7
    7ac8:	bd80      	pop	{r7, pc}
    7aca:	bf00      	nop
    7acc:	40001400 	.word	0x40001400
    7ad0:	000079db 	.word	0x000079db
    7ad4:	000079f9 	.word	0x000079f9
    7ad8:	00007a17 	.word	0x00007a17
    7adc:	00007a35 	.word	0x00007a35
    7ae0:	00007a5b 	.word	0x00007a5b
    7ae4:	000079bd 	.word	0x000079bd

00007ae8 <hri_gclk_wait_for_sync>:
{
    7ae8:	b480      	push	{r7}
    7aea:	b083      	sub	sp, #12
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
    7af0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7af2:	bf00      	nop
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	685a      	ldr	r2, [r3, #4]
    7af8:	683b      	ldr	r3, [r7, #0]
    7afa:	4013      	ands	r3, r2
    7afc:	2b00      	cmp	r3, #0
    7afe:	d1f9      	bne.n	7af4 <hri_gclk_wait_for_sync+0xc>
}
    7b00:	bf00      	nop
    7b02:	370c      	adds	r7, #12
    7b04:	46bd      	mov	sp, r7
    7b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b0a:	4770      	bx	lr

00007b0c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    7b0c:	b480      	push	{r7}
    7b0e:	b083      	sub	sp, #12
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	685b      	ldr	r3, [r3, #4]
    7b18:	089b      	lsrs	r3, r3, #2
    7b1a:	f003 0301 	and.w	r3, r3, #1
    7b1e:	2b00      	cmp	r3, #0
    7b20:	bf14      	ite	ne
    7b22:	2301      	movne	r3, #1
    7b24:	2300      	moveq	r3, #0
    7b26:	b2db      	uxtb	r3, r3
}
    7b28:	4618      	mov	r0, r3
    7b2a:	370c      	adds	r7, #12
    7b2c:	46bd      	mov	sp, r7
    7b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b32:	4770      	bx	lr

00007b34 <hri_gclk_read_SYNCBUSY_reg>:
{
    7b34:	b480      	push	{r7}
    7b36:	b083      	sub	sp, #12
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	685b      	ldr	r3, [r3, #4]
}
    7b40:	4618      	mov	r0, r3
    7b42:	370c      	adds	r7, #12
    7b44:	46bd      	mov	sp, r7
    7b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b4a:	4770      	bx	lr

00007b4c <hri_gclk_write_GENCTRL_SRC_bf>:
{
    7b4c:	b580      	push	{r7, lr}
    7b4e:	b086      	sub	sp, #24
    7b50:	af00      	add	r7, sp, #0
    7b52:	60f8      	str	r0, [r7, #12]
    7b54:	460b      	mov	r3, r1
    7b56:	607a      	str	r2, [r7, #4]
    7b58:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7b5a:	7afa      	ldrb	r2, [r7, #11]
    7b5c:	68fb      	ldr	r3, [r7, #12]
    7b5e:	3208      	adds	r2, #8
    7b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b64:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7b66:	697b      	ldr	r3, [r7, #20]
    7b68:	f023 030f 	bic.w	r3, r3, #15
    7b6c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	f003 030f 	and.w	r3, r3, #15
    7b74:	697a      	ldr	r2, [r7, #20]
    7b76:	4313      	orrs	r3, r2
    7b78:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7b7a:	7afa      	ldrb	r2, [r7, #11]
    7b7c:	68fb      	ldr	r3, [r7, #12]
    7b7e:	3208      	adds	r2, #8
    7b80:	6979      	ldr	r1, [r7, #20]
    7b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7b86:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7b8a:	68f8      	ldr	r0, [r7, #12]
    7b8c:	4b02      	ldr	r3, [pc, #8]	; (7b98 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    7b8e:	4798      	blx	r3
}
    7b90:	bf00      	nop
    7b92:	3718      	adds	r7, #24
    7b94:	46bd      	mov	sp, r7
    7b96:	bd80      	pop	{r7, pc}
    7b98:	00007ae9 	.word	0x00007ae9

00007b9c <hri_gclk_write_PCHCTRL_reg>:
{
    7b9c:	b480      	push	{r7}
    7b9e:	b085      	sub	sp, #20
    7ba0:	af00      	add	r7, sp, #0
    7ba2:	60f8      	str	r0, [r7, #12]
    7ba4:	460b      	mov	r3, r1
    7ba6:	607a      	str	r2, [r7, #4]
    7ba8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    7baa:	7afa      	ldrb	r2, [r7, #11]
    7bac:	68fb      	ldr	r3, [r7, #12]
    7bae:	3220      	adds	r2, #32
    7bb0:	6879      	ldr	r1, [r7, #4]
    7bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7bb6:	bf00      	nop
    7bb8:	3714      	adds	r7, #20
    7bba:	46bd      	mov	sp, r7
    7bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc0:	4770      	bx	lr

00007bc2 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    7bc2:	b480      	push	{r7}
    7bc4:	b085      	sub	sp, #20
    7bc6:	af00      	add	r7, sp, #0
    7bc8:	60f8      	str	r0, [r7, #12]
    7bca:	460b      	mov	r3, r1
    7bcc:	607a      	str	r2, [r7, #4]
    7bce:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7bd0:	bf00      	nop
    7bd2:	7afa      	ldrb	r2, [r7, #11]
    7bd4:	68f9      	ldr	r1, [r7, #12]
    7bd6:	4613      	mov	r3, r2
    7bd8:	009b      	lsls	r3, r3, #2
    7bda:	4413      	add	r3, r2
    7bdc:	009b      	lsls	r3, r3, #2
    7bde:	440b      	add	r3, r1
    7be0:	333c      	adds	r3, #60	; 0x3c
    7be2:	681a      	ldr	r2, [r3, #0]
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	4013      	ands	r3, r2
    7be8:	2b00      	cmp	r3, #0
    7bea:	d1f2      	bne.n	7bd2 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    7bec:	bf00      	nop
    7bee:	3714      	adds	r7, #20
    7bf0:	46bd      	mov	sp, r7
    7bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf6:	4770      	bx	lr

00007bf8 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    7bf8:	b480      	push	{r7}
    7bfa:	b083      	sub	sp, #12
    7bfc:	af00      	add	r7, sp, #0
    7bfe:	6078      	str	r0, [r7, #4]
    7c00:	460b      	mov	r3, r1
    7c02:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    7c04:	78fa      	ldrb	r2, [r7, #3]
    7c06:	6879      	ldr	r1, [r7, #4]
    7c08:	4613      	mov	r3, r2
    7c0a:	009b      	lsls	r3, r3, #2
    7c0c:	4413      	add	r3, r2
    7c0e:	009b      	lsls	r3, r3, #2
    7c10:	440b      	add	r3, r1
    7c12:	3340      	adds	r3, #64	; 0x40
    7c14:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    7c16:	f003 0301 	and.w	r3, r3, #1
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	bf14      	ite	ne
    7c1e:	2301      	movne	r3, #1
    7c20:	2300      	moveq	r3, #0
    7c22:	b2db      	uxtb	r3, r3
}
    7c24:	4618      	mov	r0, r3
    7c26:	370c      	adds	r7, #12
    7c28:	46bd      	mov	sp, r7
    7c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c2e:	4770      	bx	lr

00007c30 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    7c30:	b480      	push	{r7}
    7c32:	b083      	sub	sp, #12
    7c34:	af00      	add	r7, sp, #0
    7c36:	6078      	str	r0, [r7, #4]
    7c38:	460b      	mov	r3, r1
    7c3a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    7c3c:	78fa      	ldrb	r2, [r7, #3]
    7c3e:	6879      	ldr	r1, [r7, #4]
    7c40:	4613      	mov	r3, r2
    7c42:	009b      	lsls	r3, r3, #2
    7c44:	4413      	add	r3, r2
    7c46:	009b      	lsls	r3, r3, #2
    7c48:	440b      	add	r3, r1
    7c4a:	3340      	adds	r3, #64	; 0x40
    7c4c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    7c4e:	085b      	lsrs	r3, r3, #1
    7c50:	f003 0301 	and.w	r3, r3, #1
    7c54:	2b00      	cmp	r3, #0
    7c56:	bf14      	ite	ne
    7c58:	2301      	movne	r3, #1
    7c5a:	2300      	moveq	r3, #0
    7c5c:	b2db      	uxtb	r3, r3
}
    7c5e:	4618      	mov	r0, r3
    7c60:	370c      	adds	r7, #12
    7c62:	46bd      	mov	sp, r7
    7c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c68:	4770      	bx	lr
	...

00007c6c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    7c6c:	b580      	push	{r7, lr}
    7c6e:	b082      	sub	sp, #8
    7c70:	af00      	add	r7, sp, #0
    7c72:	6078      	str	r0, [r7, #4]
    7c74:	460b      	mov	r3, r1
    7c76:	70fb      	strb	r3, [r7, #3]
    7c78:	4613      	mov	r3, r2
    7c7a:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    7c7c:	78fa      	ldrb	r2, [r7, #3]
    7c7e:	6879      	ldr	r1, [r7, #4]
    7c80:	4613      	mov	r3, r2
    7c82:	009b      	lsls	r3, r3, #2
    7c84:	4413      	add	r3, r2
    7c86:	009b      	lsls	r3, r3, #2
    7c88:	440b      	add	r3, r1
    7c8a:	3330      	adds	r3, #48	; 0x30
    7c8c:	78ba      	ldrb	r2, [r7, #2]
    7c8e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    7c90:	78fb      	ldrb	r3, [r7, #3]
    7c92:	2202      	movs	r2, #2
    7c94:	4619      	mov	r1, r3
    7c96:	6878      	ldr	r0, [r7, #4]
    7c98:	4b02      	ldr	r3, [pc, #8]	; (7ca4 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    7c9a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7c9c:	bf00      	nop
    7c9e:	3708      	adds	r7, #8
    7ca0:	46bd      	mov	sp, r7
    7ca2:	bd80      	pop	{r7, pc}
    7ca4:	00007bc3 	.word	0x00007bc3

00007ca8 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    7ca8:	b580      	push	{r7, lr}
    7caa:	b084      	sub	sp, #16
    7cac:	af00      	add	r7, sp, #0
    7cae:	60f8      	str	r0, [r7, #12]
    7cb0:	460b      	mov	r3, r1
    7cb2:	607a      	str	r2, [r7, #4]
    7cb4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7cb6:	7afa      	ldrb	r2, [r7, #11]
    7cb8:	68f9      	ldr	r1, [r7, #12]
    7cba:	4613      	mov	r3, r2
    7cbc:	009b      	lsls	r3, r3, #2
    7cbe:	4413      	add	r3, r2
    7cc0:	009b      	lsls	r3, r3, #2
    7cc2:	440b      	add	r3, r1
    7cc4:	3334      	adds	r3, #52	; 0x34
    7cc6:	687a      	ldr	r2, [r7, #4]
    7cc8:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    7cca:	7afb      	ldrb	r3, [r7, #11]
    7ccc:	2206      	movs	r2, #6
    7cce:	4619      	mov	r1, r3
    7cd0:	68f8      	ldr	r0, [r7, #12]
    7cd2:	4b03      	ldr	r3, [pc, #12]	; (7ce0 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    7cd4:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7cd6:	bf00      	nop
    7cd8:	3710      	adds	r7, #16
    7cda:	46bd      	mov	sp, r7
    7cdc:	bd80      	pop	{r7, pc}
    7cde:	bf00      	nop
    7ce0:	00007bc3 	.word	0x00007bc3

00007ce4 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    7ce4:	b480      	push	{r7}
    7ce6:	b085      	sub	sp, #20
    7ce8:	af00      	add	r7, sp, #0
    7cea:	60f8      	str	r0, [r7, #12]
    7cec:	460b      	mov	r3, r1
    7cee:	607a      	str	r2, [r7, #4]
    7cf0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7cf2:	7afa      	ldrb	r2, [r7, #11]
    7cf4:	68f9      	ldr	r1, [r7, #12]
    7cf6:	4613      	mov	r3, r2
    7cf8:	009b      	lsls	r3, r3, #2
    7cfa:	4413      	add	r3, r2
    7cfc:	009b      	lsls	r3, r3, #2
    7cfe:	440b      	add	r3, r1
    7d00:	3338      	adds	r3, #56	; 0x38
    7d02:	687a      	ldr	r2, [r7, #4]
    7d04:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7d06:	bf00      	nop
    7d08:	3714      	adds	r7, #20
    7d0a:	46bd      	mov	sp, r7
    7d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d10:	4770      	bx	lr

00007d12 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    7d12:	b480      	push	{r7}
    7d14:	b083      	sub	sp, #12
    7d16:	af00      	add	r7, sp, #0
    7d18:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    7d1a:	687b      	ldr	r3, [r7, #4]
    7d1c:	691b      	ldr	r3, [r3, #16]
    7d1e:	085b      	lsrs	r3, r3, #1
    7d20:	f003 0301 	and.w	r3, r3, #1
    7d24:	2b00      	cmp	r3, #0
    7d26:	bf14      	ite	ne
    7d28:	2301      	movne	r3, #1
    7d2a:	2300      	moveq	r3, #0
    7d2c:	b2db      	uxtb	r3, r3
}
    7d2e:	4618      	mov	r0, r3
    7d30:	370c      	adds	r7, #12
    7d32:	46bd      	mov	sp, r7
    7d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d38:	4770      	bx	lr

00007d3a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    7d3a:	b480      	push	{r7}
    7d3c:	b083      	sub	sp, #12
    7d3e:	af00      	add	r7, sp, #0
    7d40:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	691b      	ldr	r3, [r3, #16]
    7d46:	0a1b      	lsrs	r3, r3, #8
    7d48:	f003 0301 	and.w	r3, r3, #1
    7d4c:	2b00      	cmp	r3, #0
    7d4e:	bf14      	ite	ne
    7d50:	2301      	movne	r3, #1
    7d52:	2300      	moveq	r3, #0
    7d54:	b2db      	uxtb	r3, r3
}
    7d56:	4618      	mov	r0, r3
    7d58:	370c      	adds	r7, #12
    7d5a:	46bd      	mov	sp, r7
    7d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d60:	4770      	bx	lr

00007d62 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    7d62:	b480      	push	{r7}
    7d64:	b085      	sub	sp, #20
    7d66:	af00      	add	r7, sp, #0
    7d68:	6078      	str	r0, [r7, #4]
    7d6a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	691b      	ldr	r3, [r3, #16]
    7d70:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7d72:	68fa      	ldr	r2, [r7, #12]
    7d74:	683b      	ldr	r3, [r7, #0]
    7d76:	4013      	ands	r3, r2
    7d78:	60fb      	str	r3, [r7, #12]
	return tmp;
    7d7a:	68fb      	ldr	r3, [r7, #12]
}
    7d7c:	4618      	mov	r0, r3
    7d7e:	3714      	adds	r7, #20
    7d80:	46bd      	mov	sp, r7
    7d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d86:	4770      	bx	lr

00007d88 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    7d88:	b480      	push	{r7}
    7d8a:	b085      	sub	sp, #20
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	60f8      	str	r0, [r7, #12]
    7d90:	460b      	mov	r3, r1
    7d92:	607a      	str	r2, [r7, #4]
    7d94:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    7d96:	7afb      	ldrb	r3, [r7, #11]
    7d98:	68fa      	ldr	r2, [r7, #12]
    7d9a:	3304      	adds	r3, #4
    7d9c:	009b      	lsls	r3, r3, #2
    7d9e:	4413      	add	r3, r2
    7da0:	687a      	ldr	r2, [r7, #4]
    7da2:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7da4:	bf00      	nop
    7da6:	3714      	adds	r7, #20
    7da8:	46bd      	mov	sp, r7
    7daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dae:	4770      	bx	lr

00007db0 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    7db0:	b480      	push	{r7}
    7db2:	b083      	sub	sp, #12
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
    7db8:	460b      	mov	r3, r1
    7dba:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7dbc:	687b      	ldr	r3, [r7, #4]
    7dbe:	78fa      	ldrb	r2, [r7, #3]
    7dc0:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7dc2:	bf00      	nop
    7dc4:	370c      	adds	r7, #12
    7dc6:	46bd      	mov	sp, r7
    7dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dcc:	4770      	bx	lr

00007dce <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    7dce:	b480      	push	{r7}
    7dd0:	b085      	sub	sp, #20
    7dd2:	af00      	add	r7, sp, #0
    7dd4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
    7ddc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7dde:	7bfb      	ldrb	r3, [r7, #15]
    7de0:	f003 0301 	and.w	r3, r3, #1
    7de4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7de6:	7bfb      	ldrb	r3, [r7, #15]
    7de8:	2b00      	cmp	r3, #0
    7dea:	bf14      	ite	ne
    7dec:	2301      	movne	r3, #1
    7dee:	2300      	moveq	r3, #0
    7df0:	b2db      	uxtb	r3, r3
}
    7df2:	4618      	mov	r0, r3
    7df4:	3714      	adds	r7, #20
    7df6:	46bd      	mov	sp, r7
    7df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dfc:	4770      	bx	lr

00007dfe <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    7dfe:	b480      	push	{r7}
    7e00:	b083      	sub	sp, #12
    7e02:	af00      	add	r7, sp, #0
    7e04:	6078      	str	r0, [r7, #4]
    7e06:	460b      	mov	r3, r1
    7e08:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7e0a:	687b      	ldr	r3, [r7, #4]
    7e0c:	78fa      	ldrb	r2, [r7, #3]
    7e0e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e12:	bf00      	nop
    7e14:	370c      	adds	r7, #12
    7e16:	46bd      	mov	sp, r7
    7e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e1c:	4770      	bx	lr

00007e1e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    7e1e:	b480      	push	{r7}
    7e20:	b083      	sub	sp, #12
    7e22:	af00      	add	r7, sp, #0
    7e24:	6078      	str	r0, [r7, #4]
    7e26:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7e28:	687b      	ldr	r3, [r7, #4]
    7e2a:	683a      	ldr	r2, [r7, #0]
    7e2c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e2e:	bf00      	nop
    7e30:	370c      	adds	r7, #12
    7e32:	46bd      	mov	sp, r7
    7e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e38:	4770      	bx	lr

00007e3a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    7e3a:	b480      	push	{r7}
    7e3c:	b083      	sub	sp, #12
    7e3e:	af00      	add	r7, sp, #0
    7e40:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7e42:	687b      	ldr	r3, [r7, #4]
    7e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7e46:	4618      	mov	r0, r3
    7e48:	370c      	adds	r7, #12
    7e4a:	46bd      	mov	sp, r7
    7e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e50:	4770      	bx	lr

00007e52 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    7e52:	b480      	push	{r7}
    7e54:	b083      	sub	sp, #12
    7e56:	af00      	add	r7, sp, #0
    7e58:	6078      	str	r0, [r7, #4]
    7e5a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	683a      	ldr	r2, [r7, #0]
    7e60:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7e62:	bf00      	nop
    7e64:	370c      	adds	r7, #12
    7e66:	46bd      	mov	sp, r7
    7e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e6c:	4770      	bx	lr

00007e6e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    7e6e:	b480      	push	{r7}
    7e70:	b085      	sub	sp, #20
    7e72:	af00      	add	r7, sp, #0
    7e74:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7e7c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    7e7e:	7bfb      	ldrb	r3, [r7, #15]
    7e80:	085b      	lsrs	r3, r3, #1
    7e82:	b2db      	uxtb	r3, r3
    7e84:	f003 0301 	and.w	r3, r3, #1
    7e88:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7e8a:	7bfb      	ldrb	r3, [r7, #15]
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	bf14      	ite	ne
    7e90:	2301      	movne	r3, #1
    7e92:	2300      	moveq	r3, #0
    7e94:	b2db      	uxtb	r3, r3
}
    7e96:	4618      	mov	r0, r3
    7e98:	3714      	adds	r7, #20
    7e9a:	46bd      	mov	sp, r7
    7e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea0:	4770      	bx	lr

00007ea2 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7ea2:	b480      	push	{r7}
    7ea4:	b085      	sub	sp, #20
    7ea6:	af00      	add	r7, sp, #0
    7ea8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7eaa:	687b      	ldr	r3, [r7, #4]
    7eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7eb0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    7eb2:	7bfb      	ldrb	r3, [r7, #15]
    7eb4:	089b      	lsrs	r3, r3, #2
    7eb6:	b2db      	uxtb	r3, r3
    7eb8:	f003 0301 	and.w	r3, r3, #1
    7ebc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7ebe:	7bfb      	ldrb	r3, [r7, #15]
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	bf14      	ite	ne
    7ec4:	2301      	movne	r3, #1
    7ec6:	2300      	moveq	r3, #0
    7ec8:	b2db      	uxtb	r3, r3
}
    7eca:	4618      	mov	r0, r3
    7ecc:	3714      	adds	r7, #20
    7ece:	46bd      	mov	sp, r7
    7ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed4:	4770      	bx	lr

00007ed6 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    7ed6:	b480      	push	{r7}
    7ed8:	b085      	sub	sp, #20
    7eda:	af00      	add	r7, sp, #0
    7edc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7ede:	687b      	ldr	r3, [r7, #4]
    7ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7ee4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    7ee6:	7bfb      	ldrb	r3, [r7, #15]
    7ee8:	08db      	lsrs	r3, r3, #3
    7eea:	b2db      	uxtb	r3, r3
    7eec:	f003 0301 	and.w	r3, r3, #1
    7ef0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7ef2:	7bfb      	ldrb	r3, [r7, #15]
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	bf14      	ite	ne
    7ef8:	2301      	movne	r3, #1
    7efa:	2300      	moveq	r3, #0
    7efc:	b2db      	uxtb	r3, r3
}
    7efe:	4618      	mov	r0, r3
    7f00:	3714      	adds	r7, #20
    7f02:	46bd      	mov	sp, r7
    7f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f08:	4770      	bx	lr

00007f0a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    7f0a:	b480      	push	{r7}
    7f0c:	b085      	sub	sp, #20
    7f0e:	af00      	add	r7, sp, #0
    7f10:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7f18:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    7f1a:	7bfb      	ldrb	r3, [r7, #15]
    7f1c:	091b      	lsrs	r3, r3, #4
    7f1e:	b2db      	uxtb	r3, r3
    7f20:	f003 0301 	and.w	r3, r3, #1
    7f24:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7f26:	7bfb      	ldrb	r3, [r7, #15]
    7f28:	2b00      	cmp	r3, #0
    7f2a:	bf14      	ite	ne
    7f2c:	2301      	movne	r3, #1
    7f2e:	2300      	moveq	r3, #0
    7f30:	b2db      	uxtb	r3, r3
}
    7f32:	4618      	mov	r0, r3
    7f34:	3714      	adds	r7, #20
    7f36:	46bd      	mov	sp, r7
    7f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f3c:	4770      	bx	lr
	...

00007f40 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7f40:	b580      	push	{r7, lr}
    7f42:	b082      	sub	sp, #8
    7f44:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7f46:	4b0a      	ldr	r3, [pc, #40]	; (7f70 <_oscctrl_init_sources+0x30>)
    7f48:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    7f4a:	4a0a      	ldr	r2, [pc, #40]	; (7f74 <_oscctrl_init_sources+0x34>)
    7f4c:	2101      	movs	r1, #1
    7f4e:	6878      	ldr	r0, [r7, #4]
    7f50:	4b09      	ldr	r3, [pc, #36]	; (7f78 <_oscctrl_init_sources+0x38>)
    7f52:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    7f54:	bf00      	nop
    7f56:	6878      	ldr	r0, [r7, #4]
    7f58:	4b08      	ldr	r3, [pc, #32]	; (7f7c <_oscctrl_init_sources+0x3c>)
    7f5a:	4798      	blx	r3
    7f5c:	4603      	mov	r3, r0
    7f5e:	f083 0301 	eor.w	r3, r3, #1
    7f62:	b2db      	uxtb	r3, r3
    7f64:	2b00      	cmp	r3, #0
    7f66:	d1f6      	bne.n	7f56 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    7f68:	bf00      	nop
    7f6a:	3708      	adds	r7, #8
    7f6c:	46bd      	mov	sp, r7
    7f6e:	bd80      	pop	{r7, pc}
    7f70:	40001000 	.word	0x40001000
    7f74:	03002606 	.word	0x03002606
    7f78:	00007d89 	.word	0x00007d89
    7f7c:	00007d13 	.word	0x00007d13

00007f80 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    7f80:	b580      	push	{r7, lr}
    7f82:	b084      	sub	sp, #16
    7f84:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7f86:	4b6b      	ldr	r3, [pc, #428]	; (8134 <_oscctrl_init_referenced_generators+0x1b4>)
    7f88:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    7f8a:	2204      	movs	r2, #4
    7f8c:	2100      	movs	r1, #0
    7f8e:	486a      	ldr	r0, [pc, #424]	; (8138 <_oscctrl_init_referenced_generators+0x1b8>)
    7f90:	4b6a      	ldr	r3, [pc, #424]	; (813c <_oscctrl_init_referenced_generators+0x1bc>)
    7f92:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7f94:	bf00      	nop
    7f96:	4868      	ldr	r0, [pc, #416]	; (8138 <_oscctrl_init_referenced_generators+0x1b8>)
    7f98:	4b69      	ldr	r3, [pc, #420]	; (8140 <_oscctrl_init_referenced_generators+0x1c0>)
    7f9a:	4798      	blx	r3
    7f9c:	4603      	mov	r3, r0
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d1f9      	bne.n	7f96 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    7fa2:	2100      	movs	r1, #0
    7fa4:	68f8      	ldr	r0, [r7, #12]
    7fa6:	4b67      	ldr	r3, [pc, #412]	; (8144 <_oscctrl_init_referenced_generators+0x1c4>)
    7fa8:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    7faa:	4967      	ldr	r1, [pc, #412]	; (8148 <_oscctrl_init_referenced_generators+0x1c8>)
    7fac:	68f8      	ldr	r0, [r7, #12]
    7fae:	4b67      	ldr	r3, [pc, #412]	; (814c <_oscctrl_init_referenced_generators+0x1cc>)
    7fb0:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7fb2:	bf00      	nop
    7fb4:	68f8      	ldr	r0, [r7, #12]
    7fb6:	4b66      	ldr	r3, [pc, #408]	; (8150 <_oscctrl_init_referenced_generators+0x1d0>)
    7fb8:	4798      	blx	r3
    7fba:	4603      	mov	r3, r0
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d1f9      	bne.n	7fb4 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7fc0:	2100      	movs	r1, #0
    7fc2:	68f8      	ldr	r0, [r7, #12]
    7fc4:	4b63      	ldr	r3, [pc, #396]	; (8154 <_oscctrl_init_referenced_generators+0x1d4>)
    7fc6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7fc8:	bf00      	nop
    7fca:	68f8      	ldr	r0, [r7, #12]
    7fcc:	4b62      	ldr	r3, [pc, #392]	; (8158 <_oscctrl_init_referenced_generators+0x1d8>)
    7fce:	4798      	blx	r3
    7fd0:	4603      	mov	r3, r0
    7fd2:	2b00      	cmp	r3, #0
    7fd4:	d1f9      	bne.n	7fca <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    7fd6:	2302      	movs	r3, #2
    7fd8:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    7fda:	7afb      	ldrb	r3, [r7, #11]
    7fdc:	4619      	mov	r1, r3
    7fde:	68f8      	ldr	r0, [r7, #12]
    7fe0:	4b58      	ldr	r3, [pc, #352]	; (8144 <_oscctrl_init_referenced_generators+0x1c4>)
    7fe2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7fe4:	bf00      	nop
    7fe6:	68f8      	ldr	r0, [r7, #12]
    7fe8:	4b5c      	ldr	r3, [pc, #368]	; (815c <_oscctrl_init_referenced_generators+0x1dc>)
    7fea:	4798      	blx	r3
    7fec:	4603      	mov	r3, r0
    7fee:	2b00      	cmp	r3, #0
    7ff0:	d1f9      	bne.n	7fe6 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    7ff2:	68f8      	ldr	r0, [r7, #12]
    7ff4:	4b5a      	ldr	r3, [pc, #360]	; (8160 <_oscctrl_init_referenced_generators+0x1e0>)
    7ff6:	4798      	blx	r3
    7ff8:	4603      	mov	r3, r0
    7ffa:	4619      	mov	r1, r3
    7ffc:	68f8      	ldr	r0, [r7, #12]
    7ffe:	4b59      	ldr	r3, [pc, #356]	; (8164 <_oscctrl_init_referenced_generators+0x1e4>)
    8000:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    8002:	bf00      	nop
    8004:	68f8      	ldr	r0, [r7, #12]
    8006:	4b58      	ldr	r3, [pc, #352]	; (8168 <_oscctrl_init_referenced_generators+0x1e8>)
    8008:	4798      	blx	r3
    800a:	4603      	mov	r3, r0
    800c:	2b00      	cmp	r3, #0
    800e:	d1f9      	bne.n	8004 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    8010:	2319      	movs	r3, #25
    8012:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    8014:	7afb      	ldrb	r3, [r7, #11]
    8016:	4619      	mov	r1, r3
    8018:	68f8      	ldr	r0, [r7, #12]
    801a:	4b4e      	ldr	r3, [pc, #312]	; (8154 <_oscctrl_init_referenced_generators+0x1d4>)
    801c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    801e:	bf00      	nop
    8020:	68f8      	ldr	r0, [r7, #12]
    8022:	4b4d      	ldr	r3, [pc, #308]	; (8158 <_oscctrl_init_referenced_generators+0x1d8>)
    8024:	4798      	blx	r3
    8026:	4603      	mov	r3, r0
    8028:	2b00      	cmp	r3, #0
    802a:	d1f9      	bne.n	8020 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    802c:	2245      	movs	r2, #69	; 0x45
    802e:	2101      	movs	r1, #1
    8030:	4841      	ldr	r0, [pc, #260]	; (8138 <_oscctrl_init_referenced_generators+0x1b8>)
    8032:	4b4e      	ldr	r3, [pc, #312]	; (816c <_oscctrl_init_referenced_generators+0x1ec>)
    8034:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    8036:	223b      	movs	r2, #59	; 0x3b
    8038:	2100      	movs	r1, #0
    803a:	68f8      	ldr	r0, [r7, #12]
    803c:	4b4c      	ldr	r3, [pc, #304]	; (8170 <_oscctrl_init_referenced_generators+0x1f0>)
    803e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8040:	f44f 6201 	mov.w	r2, #2064	; 0x810
    8044:	2100      	movs	r1, #0
    8046:	68f8      	ldr	r0, [r7, #12]
    8048:	4b4a      	ldr	r3, [pc, #296]	; (8174 <_oscctrl_init_referenced_generators+0x1f4>)
    804a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    804c:	2242      	movs	r2, #66	; 0x42
    804e:	2100      	movs	r1, #0
    8050:	68f8      	ldr	r0, [r7, #12]
    8052:	4b49      	ldr	r3, [pc, #292]	; (8178 <_oscctrl_init_referenced_generators+0x1f8>)
    8054:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    8056:	4a49      	ldr	r2, [pc, #292]	; (817c <_oscctrl_init_referenced_generators+0x1fc>)
    8058:	2101      	movs	r1, #1
    805a:	68f8      	ldr	r0, [r7, #12]
    805c:	4b44      	ldr	r3, [pc, #272]	; (8170 <_oscctrl_init_referenced_generators+0x1f0>)
    805e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    8060:	f44f 6203 	mov.w	r2, #2096	; 0x830
    8064:	2101      	movs	r1, #1
    8066:	68f8      	ldr	r0, [r7, #12]
    8068:	4b42      	ldr	r3, [pc, #264]	; (8174 <_oscctrl_init_referenced_generators+0x1f4>)
    806a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    806c:	2202      	movs	r2, #2
    806e:	2101      	movs	r1, #1
    8070:	68f8      	ldr	r0, [r7, #12]
    8072:	4b41      	ldr	r3, [pc, #260]	; (8178 <_oscctrl_init_referenced_generators+0x1f8>)
    8074:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    8076:	68f8      	ldr	r0, [r7, #12]
    8078:	4b41      	ldr	r3, [pc, #260]	; (8180 <_oscctrl_init_referenced_generators+0x200>)
    807a:	4798      	blx	r3
    807c:	4603      	mov	r3, r0
    807e:	2b00      	cmp	r3, #0
    8080:	d00c      	beq.n	809c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    8082:	f44f 6310 	mov.w	r3, #2304	; 0x900
    8086:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    8088:	bf00      	nop
    808a:	6879      	ldr	r1, [r7, #4]
    808c:	68f8      	ldr	r0, [r7, #12]
    808e:	4b3d      	ldr	r3, [pc, #244]	; (8184 <_oscctrl_init_referenced_generators+0x204>)
    8090:	4798      	blx	r3
    8092:	4602      	mov	r2, r0
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	429a      	cmp	r2, r3
    8098:	d1f7      	bne.n	808a <_oscctrl_init_referenced_generators+0x10a>
    809a:	e009      	b.n	80b0 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    809c:	bf00      	nop
    809e:	68f8      	ldr	r0, [r7, #12]
    80a0:	4b39      	ldr	r3, [pc, #228]	; (8188 <_oscctrl_init_referenced_generators+0x208>)
    80a2:	4798      	blx	r3
    80a4:	4603      	mov	r3, r0
    80a6:	f083 0301 	eor.w	r3, r3, #1
    80aa:	b2db      	uxtb	r3, r3
    80ac:	2b00      	cmp	r3, #0
    80ae:	d1f6      	bne.n	809e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    80b0:	bf00      	nop
    80b2:	2100      	movs	r1, #0
    80b4:	68f8      	ldr	r0, [r7, #12]
    80b6:	4b35      	ldr	r3, [pc, #212]	; (818c <_oscctrl_init_referenced_generators+0x20c>)
    80b8:	4798      	blx	r3
    80ba:	4603      	mov	r3, r0
    80bc:	f083 0301 	eor.w	r3, r3, #1
    80c0:	b2db      	uxtb	r3, r3
    80c2:	2b00      	cmp	r3, #0
    80c4:	d009      	beq.n	80da <_oscctrl_init_referenced_generators+0x15a>
    80c6:	2100      	movs	r1, #0
    80c8:	68f8      	ldr	r0, [r7, #12]
    80ca:	4b31      	ldr	r3, [pc, #196]	; (8190 <_oscctrl_init_referenced_generators+0x210>)
    80cc:	4798      	blx	r3
    80ce:	4603      	mov	r3, r0
    80d0:	f083 0301 	eor.w	r3, r3, #1
    80d4:	b2db      	uxtb	r3, r3
    80d6:	2b00      	cmp	r3, #0
    80d8:	d1eb      	bne.n	80b2 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    80da:	bf00      	nop
    80dc:	2101      	movs	r1, #1
    80de:	68f8      	ldr	r0, [r7, #12]
    80e0:	4b2a      	ldr	r3, [pc, #168]	; (818c <_oscctrl_init_referenced_generators+0x20c>)
    80e2:	4798      	blx	r3
    80e4:	4603      	mov	r3, r0
    80e6:	f083 0301 	eor.w	r3, r3, #1
    80ea:	b2db      	uxtb	r3, r3
    80ec:	2b00      	cmp	r3, #0
    80ee:	d009      	beq.n	8104 <_oscctrl_init_referenced_generators+0x184>
    80f0:	2101      	movs	r1, #1
    80f2:	68f8      	ldr	r0, [r7, #12]
    80f4:	4b26      	ldr	r3, [pc, #152]	; (8190 <_oscctrl_init_referenced_generators+0x210>)
    80f6:	4798      	blx	r3
    80f8:	4603      	mov	r3, r0
    80fa:	f083 0301 	eor.w	r3, r3, #1
    80fe:	b2db      	uxtb	r3, r3
    8100:	2b00      	cmp	r3, #0
    8102:	d1eb      	bne.n	80dc <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    8104:	bf00      	nop
    8106:	480c      	ldr	r0, [pc, #48]	; (8138 <_oscctrl_init_referenced_generators+0x1b8>)
    8108:	4b22      	ldr	r3, [pc, #136]	; (8194 <_oscctrl_init_referenced_generators+0x214>)
    810a:	4798      	blx	r3
    810c:	4603      	mov	r3, r0
    810e:	2b00      	cmp	r3, #0
    8110:	d1f9      	bne.n	8106 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    8112:	2207      	movs	r2, #7
    8114:	2100      	movs	r1, #0
    8116:	4808      	ldr	r0, [pc, #32]	; (8138 <_oscctrl_init_referenced_generators+0x1b8>)
    8118:	4b08      	ldr	r3, [pc, #32]	; (813c <_oscctrl_init_referenced_generators+0x1bc>)
    811a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    811c:	bf00      	nop
    811e:	4806      	ldr	r0, [pc, #24]	; (8138 <_oscctrl_init_referenced_generators+0x1b8>)
    8120:	4b07      	ldr	r3, [pc, #28]	; (8140 <_oscctrl_init_referenced_generators+0x1c0>)
    8122:	4798      	blx	r3
    8124:	4603      	mov	r3, r0
    8126:	2b00      	cmp	r3, #0
    8128:	d1f9      	bne.n	811e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    812a:	bf00      	nop
    812c:	3710      	adds	r7, #16
    812e:	46bd      	mov	sp, r7
    8130:	bd80      	pop	{r7, pc}
    8132:	bf00      	nop
    8134:	40001000 	.word	0x40001000
    8138:	40001c00 	.word	0x40001c00
    813c:	00007b4d 	.word	0x00007b4d
    8140:	00007b0d 	.word	0x00007b0d
    8144:	00007db1 	.word	0x00007db1
    8148:	0401bb80 	.word	0x0401bb80
    814c:	00007e53 	.word	0x00007e53
    8150:	00007f0b 	.word	0x00007f0b
    8154:	00007dff 	.word	0x00007dff
    8158:	00007ea3 	.word	0x00007ea3
    815c:	00007e6f 	.word	0x00007e6f
    8160:	00007e3b 	.word	0x00007e3b
    8164:	00007e1f 	.word	0x00007e1f
    8168:	00007ed7 	.word	0x00007ed7
    816c:	00007b9d 	.word	0x00007b9d
    8170:	00007ca9 	.word	0x00007ca9
    8174:	00007ce5 	.word	0x00007ce5
    8178:	00007c6d 	.word	0x00007c6d
    817c:	000407a0 	.word	0x000407a0
    8180:	00007dcf 	.word	0x00007dcf
    8184:	00007d63 	.word	0x00007d63
    8188:	00007d3b 	.word	0x00007d3b
    818c:	00007bf9 	.word	0x00007bf9
    8190:	00007c31 	.word	0x00007c31
    8194:	00007b35 	.word	0x00007b35

00008198 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    8198:	b480      	push	{r7}
    819a:	b085      	sub	sp, #20
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
    81a0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    81a2:	687b      	ldr	r3, [r7, #4]
    81a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    81a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    81a8:	68fa      	ldr	r2, [r7, #12]
    81aa:	683b      	ldr	r3, [r7, #0]
    81ac:	4013      	ands	r3, r2
    81ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    81b0:	68fb      	ldr	r3, [r7, #12]
}
    81b2:	4618      	mov	r0, r3
    81b4:	3714      	adds	r7, #20
    81b6:	46bd      	mov	sp, r7
    81b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81bc:	4770      	bx	lr

000081be <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    81be:	b480      	push	{r7}
    81c0:	b085      	sub	sp, #20
    81c2:	af00      	add	r7, sp, #0
    81c4:	6078      	str	r0, [r7, #4]
    81c6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    81cc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    81ce:	68fa      	ldr	r2, [r7, #12]
    81d0:	683b      	ldr	r3, [r7, #0]
    81d2:	4013      	ands	r3, r2
    81d4:	60fb      	str	r3, [r7, #12]
	return tmp;
    81d6:	68fb      	ldr	r3, [r7, #12]
}
    81d8:	4618      	mov	r0, r3
    81da:	3714      	adds	r7, #20
    81dc:	46bd      	mov	sp, r7
    81de:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e2:	4770      	bx	lr

000081e4 <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    81e4:	b480      	push	{r7}
    81e6:	b085      	sub	sp, #20
    81e8:	af00      	add	r7, sp, #0
    81ea:	6078      	str	r0, [r7, #4]
    81ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    81ee:	687b      	ldr	r3, [r7, #4]
    81f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    81f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    81f4:	68fa      	ldr	r2, [r7, #12]
    81f6:	683b      	ldr	r3, [r7, #0]
    81f8:	4013      	ands	r3, r2
    81fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    81fc:	68fb      	ldr	r3, [r7, #12]
}
    81fe:	4618      	mov	r0, r3
    8200:	3714      	adds	r7, #20
    8202:	46bd      	mov	sp, r7
    8204:	f85d 7b04 	ldr.w	r7, [sp], #4
    8208:	4770      	bx	lr

0000820a <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    820a:	b480      	push	{r7}
    820c:	b085      	sub	sp, #20
    820e:	af00      	add	r7, sp, #0
    8210:	6078      	str	r0, [r7, #4]
    8212:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8218:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    821a:	68fa      	ldr	r2, [r7, #12]
    821c:	683b      	ldr	r3, [r7, #0]
    821e:	4013      	ands	r3, r2
    8220:	60fb      	str	r3, [r7, #12]
	return tmp;
    8222:	68fb      	ldr	r3, [r7, #12]
}
    8224:	4618      	mov	r0, r3
    8226:	3714      	adds	r7, #20
    8228:	46bd      	mov	sp, r7
    822a:	f85d 7b04 	ldr.w	r7, [sp], #4
    822e:	4770      	bx	lr

00008230 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    8230:	b480      	push	{r7}
    8232:	b083      	sub	sp, #12
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
    8238:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    823a:	687b      	ldr	r3, [r7, #4]
    823c:	683a      	ldr	r2, [r7, #0]
    823e:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    8240:	bf00      	nop
    8242:	370c      	adds	r7, #12
    8244:	46bd      	mov	sp, r7
    8246:	f85d 7b04 	ldr.w	r7, [sp], #4
    824a:	4770      	bx	lr

0000824c <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    824c:	b480      	push	{r7}
    824e:	b085      	sub	sp, #20
    8250:	af00      	add	r7, sp, #0
    8252:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    8254:	230a      	movs	r3, #10
    8256:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    825e:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    8262:	d101      	bne.n	8268 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    8264:	230d      	movs	r3, #13
    8266:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	0e1b      	lsrs	r3, r3, #24
    826c:	f003 030f 	and.w	r3, r3, #15
    8270:	015a      	lsls	r2, r3, #5
    8272:	6879      	ldr	r1, [r7, #4]
    8274:	4b06      	ldr	r3, [pc, #24]	; (8290 <_pac_get_peripheral_id+0x44>)
    8276:	400b      	ands	r3, r1
    8278:	68f9      	ldr	r1, [r7, #12]
    827a:	40cb      	lsrs	r3, r1
    827c:	4413      	add	r3, r2
    827e:	60fb      	str	r3, [r7, #12]

	return peripheral;
    8280:	68fb      	ldr	r3, [r7, #12]
}
    8282:	4618      	mov	r0, r3
    8284:	3714      	adds	r7, #20
    8286:	46bd      	mov	sp, r7
    8288:	f85d 7b04 	ldr.w	r7, [sp], #4
    828c:	4770      	bx	lr
    828e:	bf00      	nop
    8290:	000fff00 	.word	0x000fff00

00008294 <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    8294:	b580      	push	{r7, lr}
    8296:	b086      	sub	sp, #24
    8298:	af00      	add	r7, sp, #0
    829a:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    82a2:	bf8c      	ite	hi
    82a4:	2301      	movhi	r3, #1
    82a6:	2300      	movls	r3, #0
    82a8:	b2db      	uxtb	r3, r3
    82aa:	2239      	movs	r2, #57	; 0x39
    82ac:	4917      	ldr	r1, [pc, #92]	; (830c <_periph_lock+0x78>)
    82ae:	4618      	mov	r0, r3
    82b0:	4b17      	ldr	r3, [pc, #92]	; (8310 <_periph_lock+0x7c>)
    82b2:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    82b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    82b8:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    82ba:	6878      	ldr	r0, [r7, #4]
    82bc:	4b15      	ldr	r3, [pc, #84]	; (8314 <_periph_lock+0x80>)
    82be:	4798      	blx	r3
    82c0:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    82c2:	693b      	ldr	r3, [r7, #16]
    82c4:	b29b      	uxth	r3, r3
    82c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    82ca:	4619      	mov	r1, r3
    82cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    82d0:	4b11      	ldr	r3, [pc, #68]	; (8318 <_periph_lock+0x84>)
    82d2:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    82d4:	f107 030f 	add.w	r3, r7, #15
    82d8:	4619      	mov	r1, r3
    82da:	6878      	ldr	r0, [r7, #4]
    82dc:	4b0f      	ldr	r3, [pc, #60]	; (831c <_periph_lock+0x88>)
    82de:	4798      	blx	r3
	} while (!stat && timeout--);
    82e0:	7bfb      	ldrb	r3, [r7, #15]
    82e2:	f083 0301 	eor.w	r3, r3, #1
    82e6:	b2db      	uxtb	r3, r3
    82e8:	2b00      	cmp	r3, #0
    82ea:	d004      	beq.n	82f6 <_periph_lock+0x62>
    82ec:	697b      	ldr	r3, [r7, #20]
    82ee:	1e5a      	subs	r2, r3, #1
    82f0:	617a      	str	r2, [r7, #20]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d1ee      	bne.n	82d4 <_periph_lock+0x40>

	if (timeout < 0) {
    82f6:	697b      	ldr	r3, [r7, #20]
    82f8:	2b00      	cmp	r3, #0
    82fa:	da02      	bge.n	8302 <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    82fc:	f06f 0307 	mvn.w	r3, #7
    8300:	e000      	b.n	8304 <_periph_lock+0x70>
	}

	return ERR_NONE;
    8302:	2300      	movs	r3, #0
}
    8304:	4618      	mov	r0, r3
    8306:	3718      	adds	r7, #24
    8308:	46bd      	mov	sp, r7
    830a:	bd80      	pop	{r7, pc}
    830c:	000172b8 	.word	0x000172b8
    8310:	00006251 	.word	0x00006251
    8314:	0000824d 	.word	0x0000824d
    8318:	00008231 	.word	0x00008231
    831c:	000083a9 	.word	0x000083a9

00008320 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    8320:	b580      	push	{r7, lr}
    8322:	b086      	sub	sp, #24
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    832e:	bf8c      	ite	hi
    8330:	2301      	movhi	r3, #1
    8332:	2300      	movls	r3, #0
    8334:	b2db      	uxtb	r3, r3
    8336:	2253      	movs	r2, #83	; 0x53
    8338:	4916      	ldr	r1, [pc, #88]	; (8394 <_periph_unlock+0x74>)
    833a:	4618      	mov	r0, r3
    833c:	4b16      	ldr	r3, [pc, #88]	; (8398 <_periph_unlock+0x78>)
    833e:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    8340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8344:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    8346:	6878      	ldr	r0, [r7, #4]
    8348:	4b14      	ldr	r3, [pc, #80]	; (839c <_periph_unlock+0x7c>)
    834a:	4798      	blx	r3
    834c:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    834e:	693b      	ldr	r3, [r7, #16]
    8350:	b29b      	uxth	r3, r3
    8352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8356:	4619      	mov	r1, r3
    8358:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    835c:	4b10      	ldr	r3, [pc, #64]	; (83a0 <_periph_unlock+0x80>)
    835e:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    8360:	f107 030f 	add.w	r3, r7, #15
    8364:	4619      	mov	r1, r3
    8366:	6878      	ldr	r0, [r7, #4]
    8368:	4b0e      	ldr	r3, [pc, #56]	; (83a4 <_periph_unlock+0x84>)
    836a:	4798      	blx	r3
	} while (stat && timeout--);
    836c:	7bfb      	ldrb	r3, [r7, #15]
    836e:	2b00      	cmp	r3, #0
    8370:	d004      	beq.n	837c <_periph_unlock+0x5c>
    8372:	697b      	ldr	r3, [r7, #20]
    8374:	1e5a      	subs	r2, r3, #1
    8376:	617a      	str	r2, [r7, #20]
    8378:	2b00      	cmp	r3, #0
    837a:	d1f1      	bne.n	8360 <_periph_unlock+0x40>

	if (timeout < 0) {
    837c:	697b      	ldr	r3, [r7, #20]
    837e:	2b00      	cmp	r3, #0
    8380:	da02      	bge.n	8388 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    8382:	f06f 0307 	mvn.w	r3, #7
    8386:	e000      	b.n	838a <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    8388:	2300      	movs	r3, #0
}
    838a:	4618      	mov	r0, r3
    838c:	3718      	adds	r7, #24
    838e:	46bd      	mov	sp, r7
    8390:	bd80      	pop	{r7, pc}
    8392:	bf00      	nop
    8394:	000172b8 	.word	0x000172b8
    8398:	00006251 	.word	0x00006251
    839c:	0000824d 	.word	0x0000824d
    83a0:	00008231 	.word	0x00008231
    83a4:	000083a9 	.word	0x000083a9

000083a8 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    83a8:	b580      	push	{r7, lr}
    83aa:	b084      	sub	sp, #16
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
    83b0:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    83b8:	bf8c      	ite	hi
    83ba:	2301      	movhi	r3, #1
    83bc:	2300      	movls	r3, #0
    83be:	b2db      	uxtb	r3, r3
    83c0:	226d      	movs	r2, #109	; 0x6d
    83c2:	4931      	ldr	r1, [pc, #196]	; (8488 <_periph_get_lock_state+0xe0>)
    83c4:	4618      	mov	r0, r3
    83c6:	4b31      	ldr	r3, [pc, #196]	; (848c <_periph_get_lock_state+0xe4>)
    83c8:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    83ca:	6878      	ldr	r0, [r7, #4]
    83cc:	4b30      	ldr	r3, [pc, #192]	; (8490 <_periph_get_lock_state+0xe8>)
    83ce:	4798      	blx	r3
    83d0:	4603      	mov	r3, r0
    83d2:	f003 031f 	and.w	r3, r3, #31
    83d6:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    83d8:	687b      	ldr	r3, [r7, #4]
    83da:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    83de:	d211      	bcs.n	8404 <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    83e0:	2201      	movs	r2, #1
    83e2:	68fb      	ldr	r3, [r7, #12]
    83e4:	fa02 f303 	lsl.w	r3, r2, r3
    83e8:	4619      	mov	r1, r3
    83ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    83ee:	4b29      	ldr	r3, [pc, #164]	; (8494 <_periph_get_lock_state+0xec>)
    83f0:	4798      	blx	r3
    83f2:	4603      	mov	r3, r0
    83f4:	2b00      	cmp	r3, #0
    83f6:	bf14      	ite	ne
    83f8:	2301      	movne	r3, #1
    83fa:	2300      	moveq	r3, #0
    83fc:	b2da      	uxtb	r2, r3
    83fe:	683b      	ldr	r3, [r7, #0]
    8400:	701a      	strb	r2, [r3, #0]
    8402:	e03c      	b.n	847e <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    840a:	d211      	bcs.n	8430 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    840c:	2201      	movs	r2, #1
    840e:	68fb      	ldr	r3, [r7, #12]
    8410:	fa02 f303 	lsl.w	r3, r2, r3
    8414:	4619      	mov	r1, r3
    8416:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    841a:	4b1f      	ldr	r3, [pc, #124]	; (8498 <_periph_get_lock_state+0xf0>)
    841c:	4798      	blx	r3
    841e:	4603      	mov	r3, r0
    8420:	2b00      	cmp	r3, #0
    8422:	bf14      	ite	ne
    8424:	2301      	movne	r3, #1
    8426:	2300      	moveq	r3, #0
    8428:	b2da      	uxtb	r2, r3
    842a:	683b      	ldr	r3, [r7, #0]
    842c:	701a      	strb	r2, [r3, #0]
    842e:	e026      	b.n	847e <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    8436:	d211      	bcs.n	845c <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    8438:	2201      	movs	r2, #1
    843a:	68fb      	ldr	r3, [r7, #12]
    843c:	fa02 f303 	lsl.w	r3, r2, r3
    8440:	4619      	mov	r1, r3
    8442:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8446:	4b15      	ldr	r3, [pc, #84]	; (849c <_periph_get_lock_state+0xf4>)
    8448:	4798      	blx	r3
    844a:	4603      	mov	r3, r0
    844c:	2b00      	cmp	r3, #0
    844e:	bf14      	ite	ne
    8450:	2301      	movne	r3, #1
    8452:	2300      	moveq	r3, #0
    8454:	b2da      	uxtb	r2, r3
    8456:	683b      	ldr	r3, [r7, #0]
    8458:	701a      	strb	r2, [r3, #0]
    845a:	e010      	b.n	847e <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    845c:	2201      	movs	r2, #1
    845e:	68fb      	ldr	r3, [r7, #12]
    8460:	fa02 f303 	lsl.w	r3, r2, r3
    8464:	4619      	mov	r1, r3
    8466:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    846a:	4b0d      	ldr	r3, [pc, #52]	; (84a0 <_periph_get_lock_state+0xf8>)
    846c:	4798      	blx	r3
    846e:	4603      	mov	r3, r0
    8470:	2b00      	cmp	r3, #0
    8472:	bf14      	ite	ne
    8474:	2301      	movne	r3, #1
    8476:	2300      	moveq	r3, #0
    8478:	b2da      	uxtb	r2, r3
    847a:	683b      	ldr	r3, [r7, #0]
    847c:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    847e:	2300      	movs	r3, #0
}
    8480:	4618      	mov	r0, r3
    8482:	3710      	adds	r7, #16
    8484:	46bd      	mov	sp, r7
    8486:	bd80      	pop	{r7, pc}
    8488:	000172b8 	.word	0x000172b8
    848c:	00006251 	.word	0x00006251
    8490:	0000824d 	.word	0x0000824d
    8494:	00008199 	.word	0x00008199
    8498:	000081bf 	.word	0x000081bf
    849c:	000081e5 	.word	0x000081e5
    84a0:	0000820b 	.word	0x0000820b

000084a4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    84a4:	b480      	push	{r7}
    84a6:	b083      	sub	sp, #12
    84a8:	af00      	add	r7, sp, #0
    84aa:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    84ac:	687b      	ldr	r3, [r7, #4]
    84ae:	69db      	ldr	r3, [r3, #28]
    84b0:	0a9b      	lsrs	r3, r3, #10
    84b2:	f003 0301 	and.w	r3, r3, #1
    84b6:	2b00      	cmp	r3, #0
    84b8:	bf14      	ite	ne
    84ba:	2301      	movne	r3, #1
    84bc:	2300      	moveq	r3, #0
    84be:	b2db      	uxtb	r3, r3
}
    84c0:	4618      	mov	r0, r3
    84c2:	370c      	adds	r7, #12
    84c4:	46bd      	mov	sp, r7
    84c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ca:	4770      	bx	lr

000084cc <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    84cc:	b480      	push	{r7}
    84ce:	b083      	sub	sp, #12
    84d0:	af00      	add	r7, sp, #0
    84d2:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    84da:	61da      	str	r2, [r3, #28]
}
    84dc:	bf00      	nop
    84de:	370c      	adds	r7, #12
    84e0:	46bd      	mov	sp, r7
    84e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e6:	4770      	bx	lr

000084e8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    84e8:	b480      	push	{r7}
    84ea:	b083      	sub	sp, #12
    84ec:	af00      	add	r7, sp, #0
    84ee:	6078      	str	r0, [r7, #4]
    84f0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	683a      	ldr	r2, [r7, #0]
    84f6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    84f8:	bf00      	nop
    84fa:	370c      	adds	r7, #12
    84fc:	46bd      	mov	sp, r7
    84fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8502:	4770      	bx	lr

00008504 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    8504:	b480      	push	{r7}
    8506:	b083      	sub	sp, #12
    8508:	af00      	add	r7, sp, #0
    850a:	6078      	str	r0, [r7, #4]
    850c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    850e:	687b      	ldr	r3, [r7, #4]
    8510:	683a      	ldr	r2, [r7, #0]
    8512:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8514:	bf00      	nop
    8516:	370c      	adds	r7, #12
    8518:	46bd      	mov	sp, r7
    851a:	f85d 7b04 	ldr.w	r7, [sp], #4
    851e:	4770      	bx	lr

00008520 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    8520:	b480      	push	{r7}
    8522:	b083      	sub	sp, #12
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
    8528:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	683a      	ldr	r2, [r7, #0]
    852e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8530:	bf00      	nop
    8532:	370c      	adds	r7, #12
    8534:	46bd      	mov	sp, r7
    8536:	f85d 7b04 	ldr.w	r7, [sp], #4
    853a:	4770      	bx	lr

0000853c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    853c:	b480      	push	{r7}
    853e:	b083      	sub	sp, #12
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
    8544:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	683a      	ldr	r2, [r7, #0]
    854a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    854c:	bf00      	nop
    854e:	370c      	adds	r7, #12
    8550:	46bd      	mov	sp, r7
    8552:	f85d 7b04 	ldr.w	r7, [sp], #4
    8556:	4770      	bx	lr

00008558 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    8558:	b480      	push	{r7}
    855a:	b085      	sub	sp, #20
    855c:	af00      	add	r7, sp, #0
    855e:	6078      	str	r0, [r7, #4]
    8560:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8566:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    8568:	68fb      	ldr	r3, [r7, #12]
    856a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    856e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    8570:	683b      	ldr	r3, [r7, #0]
    8572:	b2db      	uxtb	r3, r3
    8574:	68fa      	ldr	r2, [r7, #12]
    8576:	4313      	orrs	r3, r2
    8578:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    857a:	687b      	ldr	r3, [r7, #4]
    857c:	68fa      	ldr	r2, [r7, #12]
    857e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8580:	bf00      	nop
    8582:	3714      	adds	r7, #20
    8584:	46bd      	mov	sp, r7
    8586:	f85d 7b04 	ldr.w	r7, [sp], #4
    858a:	4770      	bx	lr

0000858c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    858c:	b480      	push	{r7}
    858e:	b085      	sub	sp, #20
    8590:	af00      	add	r7, sp, #0
    8592:	6078      	str	r0, [r7, #4]
    8594:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    8596:	687b      	ldr	r3, [r7, #4]
    8598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    859a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    859c:	68fb      	ldr	r3, [r7, #12]
    859e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    85a2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    85a4:	683b      	ldr	r3, [r7, #0]
    85a6:	041b      	lsls	r3, r3, #16
    85a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    85ac:	68fa      	ldr	r2, [r7, #12]
    85ae:	4313      	orrs	r3, r2
    85b0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	68fa      	ldr	r2, [r7, #12]
    85b6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85b8:	bf00      	nop
    85ba:	3714      	adds	r7, #20
    85bc:	46bd      	mov	sp, r7
    85be:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c2:	4770      	bx	lr

000085c4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    85c4:	b480      	push	{r7}
    85c6:	b083      	sub	sp, #12
    85c8:	af00      	add	r7, sp, #0
    85ca:	6078      	str	r0, [r7, #4]
    85cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    85ce:	687b      	ldr	r3, [r7, #4]
    85d0:	683a      	ldr	r2, [r7, #0]
    85d2:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    85d4:	bf00      	nop
    85d6:	370c      	adds	r7, #12
    85d8:	46bd      	mov	sp, r7
    85da:	f85d 7b04 	ldr.w	r7, [sp], #4
    85de:	4770      	bx	lr

000085e0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    85e0:	b480      	push	{r7}
    85e2:	b083      	sub	sp, #12
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    85e8:	687b      	ldr	r3, [r7, #4]
    85ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    85ec:	4618      	mov	r0, r3
    85ee:	370c      	adds	r7, #12
    85f0:	46bd      	mov	sp, r7
    85f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f6:	4770      	bx	lr

000085f8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    85f8:	b480      	push	{r7}
    85fa:	b085      	sub	sp, #20
    85fc:	af00      	add	r7, sp, #0
    85fe:	60f8      	str	r0, [r7, #12]
    8600:	60b9      	str	r1, [r7, #8]
    8602:	607a      	str	r2, [r7, #4]
	while (count--) {
    8604:	e007      	b.n	8616 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    8606:	68fb      	ldr	r3, [r7, #12]
    8608:	1c5a      	adds	r2, r3, #1
    860a:	60fa      	str	r2, [r7, #12]
    860c:	68ba      	ldr	r2, [r7, #8]
    860e:	1c51      	adds	r1, r2, #1
    8610:	60b9      	str	r1, [r7, #8]
    8612:	7812      	ldrb	r2, [r2, #0]
    8614:	701a      	strb	r2, [r3, #0]
	while (count--) {
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	1e5a      	subs	r2, r3, #1
    861a:	607a      	str	r2, [r7, #4]
    861c:	2b00      	cmp	r3, #0
    861e:	d1f2      	bne.n	8606 <_qspi_memcpy+0xe>
	}
}
    8620:	bf00      	nop
    8622:	3714      	adds	r7, #20
    8624:	46bd      	mov	sp, r7
    8626:	f85d 7b04 	ldr.w	r7, [sp], #4
    862a:	4770      	bx	lr

0000862c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    862c:	b580      	push	{r7, lr}
    862e:	b082      	sub	sp, #8
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    8634:	4903      	ldr	r1, [pc, #12]	; (8644 <_qspi_end_transfer+0x18>)
    8636:	6878      	ldr	r0, [r7, #4]
    8638:	4b03      	ldr	r3, [pc, #12]	; (8648 <_qspi_end_transfer+0x1c>)
    863a:	4798      	blx	r3
}
    863c:	bf00      	nop
    863e:	3708      	adds	r7, #8
    8640:	46bd      	mov	sp, r7
    8642:	bd80      	pop	{r7, pc}
    8644:	01000002 	.word	0x01000002
    8648:	000084e9 	.word	0x000084e9

0000864c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    864c:	b580      	push	{r7, lr}
    864e:	b082      	sub	sp, #8
    8650:	af00      	add	r7, sp, #0
    8652:	6078      	str	r0, [r7, #4]
    8654:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	2b00      	cmp	r3, #0
    865a:	d004      	beq.n	8666 <_qspi_sync_init+0x1a>
    865c:	683b      	ldr	r3, [r7, #0]
    865e:	2b00      	cmp	r3, #0
    8660:	d001      	beq.n	8666 <_qspi_sync_init+0x1a>
    8662:	2301      	movs	r3, #1
    8664:	e000      	b.n	8668 <_qspi_sync_init+0x1c>
    8666:	2300      	movs	r3, #0
    8668:	f003 0301 	and.w	r3, r3, #1
    866c:	b2db      	uxtb	r3, r3
    866e:	2240      	movs	r2, #64	; 0x40
    8670:	490c      	ldr	r1, [pc, #48]	; (86a4 <_qspi_sync_init+0x58>)
    8672:	4618      	mov	r0, r3
    8674:	4b0c      	ldr	r3, [pc, #48]	; (86a8 <_qspi_sync_init+0x5c>)
    8676:	4798      	blx	r3
	dev->prvt = hw;
    8678:	687b      	ldr	r3, [r7, #4]
    867a:	683a      	ldr	r2, [r7, #0]
    867c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	681b      	ldr	r3, [r3, #0]
    8682:	2101      	movs	r1, #1
    8684:	4618      	mov	r0, r3
    8686:	4b09      	ldr	r3, [pc, #36]	; (86ac <_qspi_sync_init+0x60>)
    8688:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    868a:	4909      	ldr	r1, [pc, #36]	; (86b0 <_qspi_sync_init+0x64>)
    868c:	6838      	ldr	r0, [r7, #0]
    868e:	4b09      	ldr	r3, [pc, #36]	; (86b4 <_qspi_sync_init+0x68>)
    8690:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    8692:	4909      	ldr	r1, [pc, #36]	; (86b8 <_qspi_sync_init+0x6c>)
    8694:	6838      	ldr	r0, [r7, #0]
    8696:	4b09      	ldr	r3, [pc, #36]	; (86bc <_qspi_sync_init+0x70>)
    8698:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    869a:	2300      	movs	r3, #0
}
    869c:	4618      	mov	r0, r3
    869e:	3708      	adds	r7, #8
    86a0:	46bd      	mov	sp, r7
    86a2:	bd80      	pop	{r7, pc}
    86a4:	000172d0 	.word	0x000172d0
    86a8:	00006251 	.word	0x00006251
    86ac:	000084e9 	.word	0x000084e9
    86b0:	06000011 	.word	0x06000011
    86b4:	00008505 	.word	0x00008505
    86b8:	00241300 	.word	0x00241300
    86bc:	00008521 	.word	0x00008521

000086c0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    86c0:	b580      	push	{r7, lr}
    86c2:	b082      	sub	sp, #8
    86c4:	af00      	add	r7, sp, #0
    86c6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    86c8:	687b      	ldr	r3, [r7, #4]
    86ca:	681b      	ldr	r3, [r3, #0]
    86cc:	2102      	movs	r1, #2
    86ce:	4618      	mov	r0, r3
    86d0:	4b03      	ldr	r3, [pc, #12]	; (86e0 <_qspi_sync_enable+0x20>)
    86d2:	4798      	blx	r3
	return ERR_NONE;
    86d4:	2300      	movs	r3, #0
}
    86d6:	4618      	mov	r0, r3
    86d8:	3708      	adds	r7, #8
    86da:	46bd      	mov	sp, r7
    86dc:	bd80      	pop	{r7, pc}
    86de:	bf00      	nop
    86e0:	000084e9 	.word	0x000084e9

000086e4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    86e4:	b580      	push	{r7, lr}
    86e6:	b082      	sub	sp, #8
    86e8:	af00      	add	r7, sp, #0
    86ea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    86ec:	687b      	ldr	r3, [r7, #4]
    86ee:	681b      	ldr	r3, [r3, #0]
    86f0:	2100      	movs	r1, #0
    86f2:	4618      	mov	r0, r3
    86f4:	4b03      	ldr	r3, [pc, #12]	; (8704 <_qspi_sync_disable+0x20>)
    86f6:	4798      	blx	r3
	return ERR_NONE;
    86f8:	2300      	movs	r3, #0
}
    86fa:	4618      	mov	r0, r3
    86fc:	3708      	adds	r7, #8
    86fe:	46bd      	mov	sp, r7
    8700:	bd80      	pop	{r7, pc}
    8702:	bf00      	nop
    8704:	000084e9 	.word	0x000084e9

00008708 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8708:	b580      	push	{r7, lr}
    870a:	b084      	sub	sp, #16
    870c:	af00      	add	r7, sp, #0
    870e:	6078      	str	r0, [r7, #4]
    8710:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    8712:	687b      	ldr	r3, [r7, #4]
    8714:	681b      	ldr	r3, [r3, #0]
    8716:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    8718:	683b      	ldr	r3, [r7, #0]
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	f003 0320 	and.w	r3, r3, #32
    8720:	b2db      	uxtb	r3, r3
    8722:	2b00      	cmp	r3, #0
    8724:	d005      	beq.n	8732 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    8726:	683b      	ldr	r3, [r7, #0]
    8728:	689b      	ldr	r3, [r3, #8]
    872a:	4619      	mov	r1, r3
    872c:	68f8      	ldr	r0, [r7, #12]
    872e:	4b13      	ldr	r3, [pc, #76]	; (877c <_qspi_sync_command_set_ifr+0x74>)
    8730:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    8732:	683b      	ldr	r3, [r7, #0]
    8734:	781b      	ldrb	r3, [r3, #0]
    8736:	f003 0310 	and.w	r3, r3, #16
    873a:	b2db      	uxtb	r3, r3
    873c:	2b00      	cmp	r3, #0
    873e:	d005      	beq.n	874c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    8740:	683b      	ldr	r3, [r7, #0]
    8742:	791b      	ldrb	r3, [r3, #4]
    8744:	4619      	mov	r1, r3
    8746:	68f8      	ldr	r0, [r7, #12]
    8748:	4b0d      	ldr	r3, [pc, #52]	; (8780 <_qspi_sync_command_set_ifr+0x78>)
    874a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    874c:	683b      	ldr	r3, [r7, #0]
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8754:	b2db      	uxtb	r3, r3
    8756:	2b00      	cmp	r3, #0
    8758:	d005      	beq.n	8766 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    875a:	683b      	ldr	r3, [r7, #0]
    875c:	795b      	ldrb	r3, [r3, #5]
    875e:	4619      	mov	r1, r3
    8760:	68f8      	ldr	r0, [r7, #12]
    8762:	4b08      	ldr	r3, [pc, #32]	; (8784 <_qspi_sync_command_set_ifr+0x7c>)
    8764:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    8766:	683b      	ldr	r3, [r7, #0]
    8768:	681b      	ldr	r3, [r3, #0]
    876a:	4619      	mov	r1, r3
    876c:	68f8      	ldr	r0, [r7, #12]
    876e:	4b06      	ldr	r3, [pc, #24]	; (8788 <_qspi_sync_command_set_ifr+0x80>)
    8770:	4798      	blx	r3
}
    8772:	bf00      	nop
    8774:	3710      	adds	r7, #16
    8776:	46bd      	mov	sp, r7
    8778:	bd80      	pop	{r7, pc}
    877a:	bf00      	nop
    877c:	0000853d 	.word	0x0000853d
    8780:	00008559 	.word	0x00008559
    8784:	0000858d 	.word	0x0000858d
    8788:	000085c5 	.word	0x000085c5

0000878c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
    8794:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	681b      	ldr	r3, [r3, #0]
    879a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    879c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    87a0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    87a2:	683b      	ldr	r3, [r7, #0]
    87a4:	781b      	ldrb	r3, [r3, #0]
    87a6:	f003 0320 	and.w	r3, r3, #32
    87aa:	b2db      	uxtb	r3, r3
    87ac:	2b00      	cmp	r3, #0
    87ae:	d004      	beq.n	87ba <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    87b0:	683b      	ldr	r3, [r7, #0]
    87b2:	689b      	ldr	r3, [r3, #8]
    87b4:	68fa      	ldr	r2, [r7, #12]
    87b6:	4413      	add	r3, r2
    87b8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    87ba:	68b8      	ldr	r0, [r7, #8]
    87bc:	4b18      	ldr	r3, [pc, #96]	; (8820 <_qspi_sync_run_transfer+0x94>)
    87be:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    87c0:	683b      	ldr	r3, [r7, #0]
    87c2:	691b      	ldr	r3, [r3, #16]
    87c4:	2b00      	cmp	r3, #0
    87c6:	d103      	bne.n	87d0 <_qspi_sync_run_transfer+0x44>
    87c8:	683b      	ldr	r3, [r7, #0]
    87ca:	695b      	ldr	r3, [r3, #20]
    87cc:	2b00      	cmp	r3, #0
    87ce:	d001      	beq.n	87d4 <_qspi_sync_run_transfer+0x48>
    87d0:	2301      	movs	r3, #1
    87d2:	e000      	b.n	87d6 <_qspi_sync_run_transfer+0x4a>
    87d4:	2300      	movs	r3, #0
    87d6:	f003 0301 	and.w	r3, r3, #1
    87da:	b2db      	uxtb	r3, r3
    87dc:	2282      	movs	r2, #130	; 0x82
    87de:	4911      	ldr	r1, [pc, #68]	; (8824 <_qspi_sync_run_transfer+0x98>)
    87e0:	4618      	mov	r0, r3
    87e2:	4b11      	ldr	r3, [pc, #68]	; (8828 <_qspi_sync_run_transfer+0x9c>)
    87e4:	4798      	blx	r3

	if (cmd->tx_buf) {
    87e6:	683b      	ldr	r3, [r7, #0]
    87e8:	691b      	ldr	r3, [r3, #16]
    87ea:	2b00      	cmp	r3, #0
    87ec:	d008      	beq.n	8800 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    87ee:	683b      	ldr	r3, [r7, #0]
    87f0:	6919      	ldr	r1, [r3, #16]
    87f2:	683b      	ldr	r3, [r7, #0]
    87f4:	68db      	ldr	r3, [r3, #12]
    87f6:	461a      	mov	r2, r3
    87f8:	68f8      	ldr	r0, [r7, #12]
    87fa:	4b0c      	ldr	r3, [pc, #48]	; (882c <_qspi_sync_run_transfer+0xa0>)
    87fc:	4798      	blx	r3
    87fe:	e007      	b.n	8810 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    8800:	683b      	ldr	r3, [r7, #0]
    8802:	6958      	ldr	r0, [r3, #20]
    8804:	683b      	ldr	r3, [r7, #0]
    8806:	68db      	ldr	r3, [r3, #12]
    8808:	461a      	mov	r2, r3
    880a:	68f9      	ldr	r1, [r7, #12]
    880c:	4b07      	ldr	r3, [pc, #28]	; (882c <_qspi_sync_run_transfer+0xa0>)
    880e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    8810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8814:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    8818:	bf00      	nop
    881a:	3710      	adds	r7, #16
    881c:	46bd      	mov	sp, r7
    881e:	bd80      	pop	{r7, pc}
    8820:	000085e1 	.word	0x000085e1
    8824:	000172d0 	.word	0x000172d0
    8828:	00006251 	.word	0x00006251
    882c:	000085f9 	.word	0x000085f9

00008830 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	6078      	str	r0, [r7, #4]
    8838:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    883a:	6839      	ldr	r1, [r7, #0]
    883c:	6878      	ldr	r0, [r7, #4]
    883e:	4b14      	ldr	r3, [pc, #80]	; (8890 <_qspi_sync_serial_run_command+0x60>)
    8840:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    8842:	683b      	ldr	r3, [r7, #0]
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    884a:	b2db      	uxtb	r3, r3
    884c:	2b00      	cmp	r3, #0
    884e:	d003      	beq.n	8858 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    8850:	6839      	ldr	r1, [r7, #0]
    8852:	6878      	ldr	r0, [r7, #4]
    8854:	4b0f      	ldr	r3, [pc, #60]	; (8894 <_qspi_sync_serial_run_command+0x64>)
    8856:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	681b      	ldr	r3, [r3, #0]
    885c:	4618      	mov	r0, r3
    885e:	4b0e      	ldr	r3, [pc, #56]	; (8898 <_qspi_sync_serial_run_command+0x68>)
    8860:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    8862:	bf00      	nop
    8864:	687b      	ldr	r3, [r7, #4]
    8866:	681b      	ldr	r3, [r3, #0]
    8868:	4618      	mov	r0, r3
    886a:	4b0c      	ldr	r3, [pc, #48]	; (889c <_qspi_sync_serial_run_command+0x6c>)
    886c:	4798      	blx	r3
    886e:	4603      	mov	r3, r0
    8870:	f083 0301 	eor.w	r3, r3, #1
    8874:	b2db      	uxtb	r3, r3
    8876:	2b00      	cmp	r3, #0
    8878:	d1f4      	bne.n	8864 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    887a:	687b      	ldr	r3, [r7, #4]
    887c:	681b      	ldr	r3, [r3, #0]
    887e:	4618      	mov	r0, r3
    8880:	4b07      	ldr	r3, [pc, #28]	; (88a0 <_qspi_sync_serial_run_command+0x70>)
    8882:	4798      	blx	r3
	return ERR_NONE;
    8884:	2300      	movs	r3, #0
}
    8886:	4618      	mov	r0, r3
    8888:	3708      	adds	r7, #8
    888a:	46bd      	mov	sp, r7
    888c:	bd80      	pop	{r7, pc}
    888e:	bf00      	nop
    8890:	00008709 	.word	0x00008709
    8894:	0000878d 	.word	0x0000878d
    8898:	0000862d 	.word	0x0000862d
    889c:	000084a5 	.word	0x000084a5
    88a0:	000084cd 	.word	0x000084cd

000088a4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    88a4:	b480      	push	{r7}
    88a6:	b083      	sub	sp, #12
    88a8:	af00      	add	r7, sp, #0
    88aa:	6078      	str	r0, [r7, #4]
    88ac:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    88ae:	bf00      	nop
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	691a      	ldr	r2, [r3, #16]
    88b4:	683b      	ldr	r3, [r7, #0]
    88b6:	4013      	ands	r3, r2
    88b8:	2b00      	cmp	r3, #0
    88ba:	d1f9      	bne.n	88b0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    88bc:	bf00      	nop
    88be:	370c      	adds	r7, #12
    88c0:	46bd      	mov	sp, r7
    88c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88c6:	4770      	bx	lr

000088c8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    88c8:	b480      	push	{r7}
    88ca:	b083      	sub	sp, #12
    88cc:	af00      	add	r7, sp, #0
    88ce:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    88d0:	687b      	ldr	r3, [r7, #4]
    88d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    88d6:	819a      	strh	r2, [r3, #12]
}
    88d8:	bf00      	nop
    88da:	370c      	adds	r7, #12
    88dc:	46bd      	mov	sp, r7
    88de:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e2:	4770      	bx	lr

000088e4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    88e4:	b480      	push	{r7}
    88e6:	b083      	sub	sp, #12
    88e8:	af00      	add	r7, sp, #0
    88ea:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    88ec:	687b      	ldr	r3, [r7, #4]
    88ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    88f2:	819a      	strh	r2, [r3, #12]
}
    88f4:	bf00      	nop
    88f6:	370c      	adds	r7, #12
    88f8:	46bd      	mov	sp, r7
    88fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    88fe:	4770      	bx	lr

00008900 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    8900:	b480      	push	{r7}
    8902:	b083      	sub	sp, #12
    8904:	af00      	add	r7, sp, #0
    8906:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    8908:	687b      	ldr	r3, [r7, #4]
    890a:	899b      	ldrh	r3, [r3, #12]
    890c:	b29b      	uxth	r3, r3
}
    890e:	4618      	mov	r0, r3
    8910:	370c      	adds	r7, #12
    8912:	46bd      	mov	sp, r7
    8914:	f85d 7b04 	ldr.w	r7, [sp], #4
    8918:	4770      	bx	lr

0000891a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    891a:	b480      	push	{r7}
    891c:	b083      	sub	sp, #12
    891e:	af00      	add	r7, sp, #0
    8920:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    8922:	687b      	ldr	r3, [r7, #4]
    8924:	895b      	ldrh	r3, [r3, #10]
    8926:	b29b      	uxth	r3, r3
}
    8928:	4618      	mov	r0, r3
    892a:	370c      	adds	r7, #12
    892c:	46bd      	mov	sp, r7
    892e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8932:	4770      	bx	lr

00008934 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    8934:	b580      	push	{r7, lr}
    8936:	b082      	sub	sp, #8
    8938:	af00      	add	r7, sp, #0
    893a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	881b      	ldrh	r3, [r3, #0]
    8940:	b29b      	uxth	r3, r3
    8942:	f043 0301 	orr.w	r3, r3, #1
    8946:	b29a      	uxth	r2, r3
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    894c:	2101      	movs	r1, #1
    894e:	6878      	ldr	r0, [r7, #4]
    8950:	4b02      	ldr	r3, [pc, #8]	; (895c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    8952:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8954:	bf00      	nop
    8956:	3708      	adds	r7, #8
    8958:	46bd      	mov	sp, r7
    895a:	bd80      	pop	{r7, pc}
    895c:	000088a5 	.word	0x000088a5

00008960 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8960:	b580      	push	{r7, lr}
    8962:	b082      	sub	sp, #8
    8964:	af00      	add	r7, sp, #0
    8966:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	881b      	ldrh	r3, [r3, #0]
    896c:	b29b      	uxth	r3, r3
    896e:	f043 0302 	orr.w	r3, r3, #2
    8972:	b29a      	uxth	r2, r3
    8974:	687b      	ldr	r3, [r7, #4]
    8976:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8978:	f248 0103 	movw	r1, #32771	; 0x8003
    897c:	6878      	ldr	r0, [r7, #4]
    897e:	4b03      	ldr	r3, [pc, #12]	; (898c <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    8980:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8982:	bf00      	nop
    8984:	3708      	adds	r7, #8
    8986:	46bd      	mov	sp, r7
    8988:	bd80      	pop	{r7, pc}
    898a:	bf00      	nop
    898c:	000088a5 	.word	0x000088a5

00008990 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8990:	b580      	push	{r7, lr}
    8992:	b084      	sub	sp, #16
    8994:	af00      	add	r7, sp, #0
    8996:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8998:	f248 0103 	movw	r1, #32771	; 0x8003
    899c:	6878      	ldr	r0, [r7, #4]
    899e:	4b0a      	ldr	r3, [pc, #40]	; (89c8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    89a0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	881b      	ldrh	r3, [r3, #0]
    89a6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    89a8:	89fb      	ldrh	r3, [r7, #14]
    89aa:	085b      	lsrs	r3, r3, #1
    89ac:	b29b      	uxth	r3, r3
    89ae:	f003 0301 	and.w	r3, r3, #1
    89b2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    89b4:	89fb      	ldrh	r3, [r7, #14]
    89b6:	2b00      	cmp	r3, #0
    89b8:	bf14      	ite	ne
    89ba:	2301      	movne	r3, #1
    89bc:	2300      	moveq	r3, #0
    89be:	b2db      	uxtb	r3, r3
}
    89c0:	4618      	mov	r0, r3
    89c2:	3710      	adds	r7, #16
    89c4:	46bd      	mov	sp, r7
    89c6:	bd80      	pop	{r7, pc}
    89c8:	000088a5 	.word	0x000088a5

000089cc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    89d4:	687b      	ldr	r3, [r7, #4]
    89d6:	881b      	ldrh	r3, [r3, #0]
    89d8:	b29b      	uxth	r3, r3
    89da:	f023 0302 	bic.w	r3, r3, #2
    89de:	b29a      	uxth	r2, r3
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    89e4:	f248 0103 	movw	r1, #32771	; 0x8003
    89e8:	6878      	ldr	r0, [r7, #4]
    89ea:	4b03      	ldr	r3, [pc, #12]	; (89f8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    89ec:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    89ee:	bf00      	nop
    89f0:	3708      	adds	r7, #8
    89f2:	46bd      	mov	sp, r7
    89f4:	bd80      	pop	{r7, pc}
    89f6:	bf00      	nop
    89f8:	000088a5 	.word	0x000088a5

000089fc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
    8a04:	460b      	mov	r3, r1
    8a06:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    8a08:	687b      	ldr	r3, [r7, #4]
    8a0a:	887a      	ldrh	r2, [r7, #2]
    8a0c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8a0e:	f248 0103 	movw	r1, #32771	; 0x8003
    8a12:	6878      	ldr	r0, [r7, #4]
    8a14:	4b02      	ldr	r3, [pc, #8]	; (8a20 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    8a16:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a18:	bf00      	nop
    8a1a:	3708      	adds	r7, #8
    8a1c:	46bd      	mov	sp, r7
    8a1e:	bd80      	pop	{r7, pc}
    8a20:	000088a5 	.word	0x000088a5

00008a24 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    8a24:	b580      	push	{r7, lr}
    8a26:	b082      	sub	sp, #8
    8a28:	af00      	add	r7, sp, #0
    8a2a:	6078      	str	r0, [r7, #4]
    8a2c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    8a2e:	687b      	ldr	r3, [r7, #4]
    8a30:	683a      	ldr	r2, [r7, #0]
    8a32:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8a34:	2108      	movs	r1, #8
    8a36:	6878      	ldr	r0, [r7, #4]
    8a38:	4b02      	ldr	r3, [pc, #8]	; (8a44 <hri_rtcmode0_write_COUNT_reg+0x20>)
    8a3a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a3c:	bf00      	nop
    8a3e:	3708      	adds	r7, #8
    8a40:	46bd      	mov	sp, r7
    8a42:	bd80      	pop	{r7, pc}
    8a44:	000088a5 	.word	0x000088a5

00008a48 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    8a48:	b580      	push	{r7, lr}
    8a4a:	b082      	sub	sp, #8
    8a4c:	af00      	add	r7, sp, #0
    8a4e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8a50:	2108      	movs	r1, #8
    8a52:	6878      	ldr	r0, [r7, #4]
    8a54:	4b03      	ldr	r3, [pc, #12]	; (8a64 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    8a56:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	699b      	ldr	r3, [r3, #24]
}
    8a5c:	4618      	mov	r0, r3
    8a5e:	3708      	adds	r7, #8
    8a60:	46bd      	mov	sp, r7
    8a62:	bd80      	pop	{r7, pc}
    8a64:	000088a5 	.word	0x000088a5

00008a68 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    8a68:	b480      	push	{r7}
    8a6a:	b083      	sub	sp, #12
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	6078      	str	r0, [r7, #4]
    8a70:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	683a      	ldr	r2, [r7, #0]
    8a76:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    8a78:	bf00      	nop
    8a7a:	370c      	adds	r7, #12
    8a7c:	46bd      	mov	sp, r7
    8a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a82:	4770      	bx	lr

00008a84 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    8a84:	b580      	push	{r7, lr}
    8a86:	b082      	sub	sp, #8
    8a88:	af00      	add	r7, sp, #0
    8a8a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8a8c:	687b      	ldr	r3, [r7, #4]
    8a8e:	2b00      	cmp	r3, #0
    8a90:	d005      	beq.n	8a9e <_calendar_init+0x1a>
    8a92:	687b      	ldr	r3, [r7, #4]
    8a94:	681b      	ldr	r3, [r3, #0]
    8a96:	2b00      	cmp	r3, #0
    8a98:	d001      	beq.n	8a9e <_calendar_init+0x1a>
    8a9a:	2301      	movs	r3, #1
    8a9c:	e000      	b.n	8aa0 <_calendar_init+0x1c>
    8a9e:	2300      	movs	r3, #0
    8aa0:	f003 0301 	and.w	r3, r3, #1
    8aa4:	b2db      	uxtb	r3, r3
    8aa6:	222f      	movs	r2, #47	; 0x2f
    8aa8:	491b      	ldr	r1, [pc, #108]	; (8b18 <_calendar_init+0x94>)
    8aaa:	4618      	mov	r0, r3
    8aac:	4b1b      	ldr	r3, [pc, #108]	; (8b1c <_calendar_init+0x98>)
    8aae:	4798      	blx	r3

	_rtc_dev = dev;
    8ab0:	4a1b      	ldr	r2, [pc, #108]	; (8b20 <_calendar_init+0x9c>)
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	681b      	ldr	r3, [r3, #0]
    8aba:	4618      	mov	r0, r3
    8abc:	4b19      	ldr	r3, [pc, #100]	; (8b24 <_calendar_init+0xa0>)
    8abe:	4798      	blx	r3
    8ac0:	4603      	mov	r3, r0
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d00a      	beq.n	8adc <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8ac6:	687b      	ldr	r3, [r7, #4]
    8ac8:	681b      	ldr	r3, [r3, #0]
    8aca:	4618      	mov	r0, r3
    8acc:	4b16      	ldr	r3, [pc, #88]	; (8b28 <_calendar_init+0xa4>)
    8ace:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8ad0:	687b      	ldr	r3, [r7, #4]
    8ad2:	681b      	ldr	r3, [r3, #0]
    8ad4:	2102      	movs	r1, #2
    8ad6:	4618      	mov	r0, r3
    8ad8:	4b14      	ldr	r3, [pc, #80]	; (8b2c <_calendar_init+0xa8>)
    8ada:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    8adc:	687b      	ldr	r3, [r7, #4]
    8ade:	681b      	ldr	r3, [r3, #0]
    8ae0:	4618      	mov	r0, r3
    8ae2:	4b13      	ldr	r3, [pc, #76]	; (8b30 <_calendar_init+0xac>)
    8ae4:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8ae6:	687b      	ldr	r3, [r7, #4]
    8ae8:	681b      	ldr	r3, [r3, #0]
    8aea:	2101      	movs	r1, #1
    8aec:	4618      	mov	r0, r3
    8aee:	4b0f      	ldr	r3, [pc, #60]	; (8b2c <_calendar_init+0xa8>)
    8af0:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8af2:	687b      	ldr	r3, [r7, #4]
    8af4:	681b      	ldr	r3, [r3, #0]
    8af6:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    8afa:	4618      	mov	r0, r3
    8afc:	4b0d      	ldr	r3, [pc, #52]	; (8b34 <_calendar_init+0xb0>)
    8afe:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8b00:	687b      	ldr	r3, [r7, #4]
    8b02:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8b04:	2100      	movs	r1, #0
    8b06:	4618      	mov	r0, r3
    8b08:	4b0b      	ldr	r3, [pc, #44]	; (8b38 <_calendar_init+0xb4>)
    8b0a:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    8b0c:	2300      	movs	r3, #0
}
    8b0e:	4618      	mov	r0, r3
    8b10:	3708      	adds	r7, #8
    8b12:	46bd      	mov	sp, r7
    8b14:	bd80      	pop	{r7, pc}
    8b16:	bf00      	nop
    8b18:	000172e8 	.word	0x000172e8
    8b1c:	00006251 	.word	0x00006251
    8b20:	200030a0 	.word	0x200030a0
    8b24:	00008991 	.word	0x00008991
    8b28:	000089cd 	.word	0x000089cd
    8b2c:	000088a5 	.word	0x000088a5
    8b30:	00008935 	.word	0x00008935
    8b34:	000089fd 	.word	0x000089fd
    8b38:	00008a69 	.word	0x00008a69

00008b3c <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b082      	sub	sp, #8
    8b40:	af00      	add	r7, sp, #0
    8b42:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	2b00      	cmp	r3, #0
    8b48:	d005      	beq.n	8b56 <_calendar_enable+0x1a>
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	681b      	ldr	r3, [r3, #0]
    8b4e:	2b00      	cmp	r3, #0
    8b50:	d001      	beq.n	8b56 <_calendar_enable+0x1a>
    8b52:	2301      	movs	r3, #1
    8b54:	e000      	b.n	8b58 <_calendar_enable+0x1c>
    8b56:	2300      	movs	r3, #0
    8b58:	f003 0301 	and.w	r3, r3, #1
    8b5c:	b2db      	uxtb	r3, r3
    8b5e:	2275      	movs	r2, #117	; 0x75
    8b60:	4906      	ldr	r1, [pc, #24]	; (8b7c <_calendar_enable+0x40>)
    8b62:	4618      	mov	r0, r3
    8b64:	4b06      	ldr	r3, [pc, #24]	; (8b80 <_calendar_enable+0x44>)
    8b66:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	681b      	ldr	r3, [r3, #0]
    8b6c:	4618      	mov	r0, r3
    8b6e:	4b05      	ldr	r3, [pc, #20]	; (8b84 <_calendar_enable+0x48>)
    8b70:	4798      	blx	r3

	return ERR_NONE;
    8b72:	2300      	movs	r3, #0
}
    8b74:	4618      	mov	r0, r3
    8b76:	3708      	adds	r7, #8
    8b78:	46bd      	mov	sp, r7
    8b7a:	bd80      	pop	{r7, pc}
    8b7c:	000172e8 	.word	0x000172e8
    8b80:	00006251 	.word	0x00006251
    8b84:	00008961 	.word	0x00008961

00008b88 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b082      	sub	sp, #8
    8b8c:	af00      	add	r7, sp, #0
    8b8e:	6078      	str	r0, [r7, #4]
    8b90:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	2b00      	cmp	r3, #0
    8b96:	d005      	beq.n	8ba4 <_calendar_set_counter+0x1c>
    8b98:	687b      	ldr	r3, [r7, #4]
    8b9a:	681b      	ldr	r3, [r3, #0]
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d001      	beq.n	8ba4 <_calendar_set_counter+0x1c>
    8ba0:	2301      	movs	r3, #1
    8ba2:	e000      	b.n	8ba6 <_calendar_set_counter+0x1e>
    8ba4:	2300      	movs	r3, #0
    8ba6:	f003 0301 	and.w	r3, r3, #1
    8baa:	b2db      	uxtb	r3, r3
    8bac:	228d      	movs	r2, #141	; 0x8d
    8bae:	4907      	ldr	r1, [pc, #28]	; (8bcc <_calendar_set_counter+0x44>)
    8bb0:	4618      	mov	r0, r3
    8bb2:	4b07      	ldr	r3, [pc, #28]	; (8bd0 <_calendar_set_counter+0x48>)
    8bb4:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    8bb6:	687b      	ldr	r3, [r7, #4]
    8bb8:	681b      	ldr	r3, [r3, #0]
    8bba:	6839      	ldr	r1, [r7, #0]
    8bbc:	4618      	mov	r0, r3
    8bbe:	4b05      	ldr	r3, [pc, #20]	; (8bd4 <_calendar_set_counter+0x4c>)
    8bc0:	4798      	blx	r3

	return ERR_NONE;
    8bc2:	2300      	movs	r3, #0
}
    8bc4:	4618      	mov	r0, r3
    8bc6:	3708      	adds	r7, #8
    8bc8:	46bd      	mov	sp, r7
    8bca:	bd80      	pop	{r7, pc}
    8bcc:	000172e8 	.word	0x000172e8
    8bd0:	00006251 	.word	0x00006251
    8bd4:	00008a25 	.word	0x00008a25

00008bd8 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    8bd8:	b580      	push	{r7, lr}
    8bda:	b082      	sub	sp, #8
    8bdc:	af00      	add	r7, sp, #0
    8bde:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8be0:	687b      	ldr	r3, [r7, #4]
    8be2:	2b00      	cmp	r3, #0
    8be4:	d005      	beq.n	8bf2 <_calendar_get_counter+0x1a>
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	681b      	ldr	r3, [r3, #0]
    8bea:	2b00      	cmp	r3, #0
    8bec:	d001      	beq.n	8bf2 <_calendar_get_counter+0x1a>
    8bee:	2301      	movs	r3, #1
    8bf0:	e000      	b.n	8bf4 <_calendar_get_counter+0x1c>
    8bf2:	2300      	movs	r3, #0
    8bf4:	f003 0301 	and.w	r3, r3, #1
    8bf8:	b2db      	uxtb	r3, r3
    8bfa:	2299      	movs	r2, #153	; 0x99
    8bfc:	4906      	ldr	r1, [pc, #24]	; (8c18 <_calendar_get_counter+0x40>)
    8bfe:	4618      	mov	r0, r3
    8c00:	4b06      	ldr	r3, [pc, #24]	; (8c1c <_calendar_get_counter+0x44>)
    8c02:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	681b      	ldr	r3, [r3, #0]
    8c08:	4618      	mov	r0, r3
    8c0a:	4b05      	ldr	r3, [pc, #20]	; (8c20 <_calendar_get_counter+0x48>)
    8c0c:	4798      	blx	r3
    8c0e:	4603      	mov	r3, r0
}
    8c10:	4618      	mov	r0, r3
    8c12:	3708      	adds	r7, #8
    8c14:	46bd      	mov	sp, r7
    8c16:	bd80      	pop	{r7, pc}
    8c18:	000172e8 	.word	0x000172e8
    8c1c:	00006251 	.word	0x00006251
    8c20:	00008a49 	.word	0x00008a49

00008c24 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b084      	sub	sp, #16
    8c28:	af00      	add	r7, sp, #0
    8c2a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	681b      	ldr	r3, [r3, #0]
    8c30:	4618      	mov	r0, r3
    8c32:	4b19      	ldr	r3, [pc, #100]	; (8c98 <_rtc_interrupt_handler+0x74>)
    8c34:	4798      	blx	r3
    8c36:	4603      	mov	r3, r0
    8c38:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	681b      	ldr	r3, [r3, #0]
    8c3e:	4618      	mov	r0, r3
    8c40:	4b16      	ldr	r3, [pc, #88]	; (8c9c <_rtc_interrupt_handler+0x78>)
    8c42:	4798      	blx	r3
    8c44:	4603      	mov	r3, r0
    8c46:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    8c48:	89fa      	ldrh	r2, [r7, #14]
    8c4a:	89bb      	ldrh	r3, [r7, #12]
    8c4c:	4013      	ands	r3, r2
    8c4e:	b29b      	uxth	r3, r3
    8c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8c54:	2b00      	cmp	r3, #0
    8c56:	d009      	beq.n	8c6c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	685b      	ldr	r3, [r3, #4]
    8c5c:	6878      	ldr	r0, [r7, #4]
    8c5e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	681b      	ldr	r3, [r3, #0]
    8c64:	4618      	mov	r0, r3
    8c66:	4b0e      	ldr	r3, [pc, #56]	; (8ca0 <_rtc_interrupt_handler+0x7c>)
    8c68:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    8c6a:	e010      	b.n	8c8e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    8c6c:	89fa      	ldrh	r2, [r7, #14]
    8c6e:	89bb      	ldrh	r3, [r7, #12]
    8c70:	4013      	ands	r3, r2
    8c72:	b29b      	uxth	r3, r3
    8c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d008      	beq.n	8c8e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	689b      	ldr	r3, [r3, #8]
    8c80:	6878      	ldr	r0, [r7, #4]
    8c82:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8c84:	687b      	ldr	r3, [r7, #4]
    8c86:	681b      	ldr	r3, [r3, #0]
    8c88:	4618      	mov	r0, r3
    8c8a:	4b06      	ldr	r3, [pc, #24]	; (8ca4 <_rtc_interrupt_handler+0x80>)
    8c8c:	4798      	blx	r3
}
    8c8e:	bf00      	nop
    8c90:	3710      	adds	r7, #16
    8c92:	46bd      	mov	sp, r7
    8c94:	bd80      	pop	{r7, pc}
    8c96:	bf00      	nop
    8c98:	00008901 	.word	0x00008901
    8c9c:	0000891b 	.word	0x0000891b
    8ca0:	000088c9 	.word	0x000088c9
    8ca4:	000088e5 	.word	0x000088e5

00008ca8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    8ca8:	b580      	push	{r7, lr}
    8caa:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    8cac:	4b03      	ldr	r3, [pc, #12]	; (8cbc <RTC_Handler+0x14>)
    8cae:	681b      	ldr	r3, [r3, #0]
    8cb0:	4618      	mov	r0, r3
    8cb2:	4b03      	ldr	r3, [pc, #12]	; (8cc0 <RTC_Handler+0x18>)
    8cb4:	4798      	blx	r3
}
    8cb6:	bf00      	nop
    8cb8:	bd80      	pop	{r7, pc}
    8cba:	bf00      	nop
    8cbc:	200030a0 	.word	0x200030a0
    8cc0:	00008c25 	.word	0x00008c25

00008cc4 <__NVIC_EnableIRQ>:
{
    8cc4:	b480      	push	{r7}
    8cc6:	b083      	sub	sp, #12
    8cc8:	af00      	add	r7, sp, #0
    8cca:	4603      	mov	r3, r0
    8ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	db0b      	blt.n	8cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cd6:	4909      	ldr	r1, [pc, #36]	; (8cfc <__NVIC_EnableIRQ+0x38>)
    8cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cdc:	095b      	lsrs	r3, r3, #5
    8cde:	88fa      	ldrh	r2, [r7, #6]
    8ce0:	f002 021f 	and.w	r2, r2, #31
    8ce4:	2001      	movs	r0, #1
    8ce6:	fa00 f202 	lsl.w	r2, r0, r2
    8cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8cee:	bf00      	nop
    8cf0:	370c      	adds	r7, #12
    8cf2:	46bd      	mov	sp, r7
    8cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf8:	4770      	bx	lr
    8cfa:	bf00      	nop
    8cfc:	e000e100 	.word	0xe000e100

00008d00 <__NVIC_DisableIRQ>:
{
    8d00:	b480      	push	{r7}
    8d02:	b083      	sub	sp, #12
    8d04:	af00      	add	r7, sp, #0
    8d06:	4603      	mov	r3, r0
    8d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d0e:	2b00      	cmp	r3, #0
    8d10:	db10      	blt.n	8d34 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d12:	490b      	ldr	r1, [pc, #44]	; (8d40 <__NVIC_DisableIRQ+0x40>)
    8d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d18:	095b      	lsrs	r3, r3, #5
    8d1a:	88fa      	ldrh	r2, [r7, #6]
    8d1c:	f002 021f 	and.w	r2, r2, #31
    8d20:	2001      	movs	r0, #1
    8d22:	fa00 f202 	lsl.w	r2, r0, r2
    8d26:	3320      	adds	r3, #32
    8d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8d30:	f3bf 8f6f 	isb	sy
}
    8d34:	bf00      	nop
    8d36:	370c      	adds	r7, #12
    8d38:	46bd      	mov	sp, r7
    8d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d3e:	4770      	bx	lr
    8d40:	e000e100 	.word	0xe000e100

00008d44 <__NVIC_ClearPendingIRQ>:
{
    8d44:	b480      	push	{r7}
    8d46:	b083      	sub	sp, #12
    8d48:	af00      	add	r7, sp, #0
    8d4a:	4603      	mov	r3, r0
    8d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d52:	2b00      	cmp	r3, #0
    8d54:	db0c      	blt.n	8d70 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d56:	4909      	ldr	r1, [pc, #36]	; (8d7c <__NVIC_ClearPendingIRQ+0x38>)
    8d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d5c:	095b      	lsrs	r3, r3, #5
    8d5e:	88fa      	ldrh	r2, [r7, #6]
    8d60:	f002 021f 	and.w	r2, r2, #31
    8d64:	2001      	movs	r0, #1
    8d66:	fa00 f202 	lsl.w	r2, r0, r2
    8d6a:	3360      	adds	r3, #96	; 0x60
    8d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d70:	bf00      	nop
    8d72:	370c      	adds	r7, #12
    8d74:	46bd      	mov	sp, r7
    8d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d7a:	4770      	bx	lr
    8d7c:	e000e100 	.word	0xe000e100

00008d80 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8d80:	b480      	push	{r7}
    8d82:	b083      	sub	sp, #12
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
    8d88:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8d8a:	bf00      	nop
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	69da      	ldr	r2, [r3, #28]
    8d90:	683b      	ldr	r3, [r7, #0]
    8d92:	4013      	ands	r3, r2
    8d94:	2b00      	cmp	r3, #0
    8d96:	d1f9      	bne.n	8d8c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    8d98:	bf00      	nop
    8d9a:	370c      	adds	r7, #12
    8d9c:	46bd      	mov	sp, r7
    8d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8da2:	4770      	bx	lr

00008da4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8da4:	b480      	push	{r7}
    8da6:	b083      	sub	sp, #12
    8da8:	af00      	add	r7, sp, #0
    8daa:	6078      	str	r0, [r7, #4]
    8dac:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8dae:	687b      	ldr	r3, [r7, #4]
    8db0:	69da      	ldr	r2, [r3, #28]
    8db2:	683b      	ldr	r3, [r7, #0]
    8db4:	4013      	ands	r3, r2
    8db6:	2b00      	cmp	r3, #0
    8db8:	bf14      	ite	ne
    8dba:	2301      	movne	r3, #1
    8dbc:	2300      	moveq	r3, #0
    8dbe:	b2db      	uxtb	r3, r3
}
    8dc0:	4618      	mov	r0, r3
    8dc2:	370c      	adds	r7, #12
    8dc4:	46bd      	mov	sp, r7
    8dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dca:	4770      	bx	lr

00008dcc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8dcc:	b480      	push	{r7}
    8dce:	b083      	sub	sp, #12
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
    8dd4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8dd6:	bf00      	nop
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	69da      	ldr	r2, [r3, #28]
    8ddc:	683b      	ldr	r3, [r7, #0]
    8dde:	4013      	ands	r3, r2
    8de0:	2b00      	cmp	r3, #0
    8de2:	d1f9      	bne.n	8dd8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    8de4:	bf00      	nop
    8de6:	370c      	adds	r7, #12
    8de8:	46bd      	mov	sp, r7
    8dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dee:	4770      	bx	lr

00008df0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8df0:	b480      	push	{r7}
    8df2:	b083      	sub	sp, #12
    8df4:	af00      	add	r7, sp, #0
    8df6:	6078      	str	r0, [r7, #4]
    8df8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8dfa:	687b      	ldr	r3, [r7, #4]
    8dfc:	69da      	ldr	r2, [r3, #28]
    8dfe:	683b      	ldr	r3, [r7, #0]
    8e00:	4013      	ands	r3, r2
    8e02:	2b00      	cmp	r3, #0
    8e04:	bf14      	ite	ne
    8e06:	2301      	movne	r3, #1
    8e08:	2300      	moveq	r3, #0
    8e0a:	b2db      	uxtb	r3, r3
}
    8e0c:	4618      	mov	r0, r3
    8e0e:	370c      	adds	r7, #12
    8e10:	46bd      	mov	sp, r7
    8e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e16:	4770      	bx	lr

00008e18 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    8e18:	b480      	push	{r7}
    8e1a:	b083      	sub	sp, #12
    8e1c:	af00      	add	r7, sp, #0
    8e1e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	2201      	movs	r2, #1
    8e24:	761a      	strb	r2, [r3, #24]
}
    8e26:	bf00      	nop
    8e28:	370c      	adds	r7, #12
    8e2a:	46bd      	mov	sp, r7
    8e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e30:	4770      	bx	lr

00008e32 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    8e32:	b480      	push	{r7}
    8e34:	b083      	sub	sp, #12
    8e36:	af00      	add	r7, sp, #0
    8e38:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    8e3a:	687b      	ldr	r3, [r7, #4]
    8e3c:	2202      	movs	r2, #2
    8e3e:	761a      	strb	r2, [r3, #24]
}
    8e40:	bf00      	nop
    8e42:	370c      	adds	r7, #12
    8e44:	46bd      	mov	sp, r7
    8e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e4a:	4770      	bx	lr

00008e4c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    8e4c:	b480      	push	{r7}
    8e4e:	b083      	sub	sp, #12
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8e54:	687b      	ldr	r3, [r7, #4]
    8e56:	7e1b      	ldrb	r3, [r3, #24]
    8e58:	b2db      	uxtb	r3, r3
}
    8e5a:	4618      	mov	r0, r3
    8e5c:	370c      	adds	r7, #12
    8e5e:	46bd      	mov	sp, r7
    8e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e64:	4770      	bx	lr

00008e66 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    8e66:	b480      	push	{r7}
    8e68:	b083      	sub	sp, #12
    8e6a:	af00      	add	r7, sp, #0
    8e6c:	6078      	str	r0, [r7, #4]
    8e6e:	460b      	mov	r3, r1
    8e70:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    8e72:	687b      	ldr	r3, [r7, #4]
    8e74:	78fa      	ldrb	r2, [r7, #3]
    8e76:	761a      	strb	r2, [r3, #24]
}
    8e78:	bf00      	nop
    8e7a:	370c      	adds	r7, #12
    8e7c:	46bd      	mov	sp, r7
    8e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e82:	4770      	bx	lr

00008e84 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    8e84:	b480      	push	{r7}
    8e86:	b085      	sub	sp, #20
    8e88:	af00      	add	r7, sp, #0
    8e8a:	6078      	str	r0, [r7, #4]
    8e8c:	460b      	mov	r3, r1
    8e8e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	7e1b      	ldrb	r3, [r3, #24]
    8e94:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8e96:	7bfa      	ldrb	r2, [r7, #15]
    8e98:	78fb      	ldrb	r3, [r7, #3]
    8e9a:	4013      	ands	r3, r2
    8e9c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8e9e:	7bfb      	ldrb	r3, [r7, #15]
}
    8ea0:	4618      	mov	r0, r3
    8ea2:	3714      	adds	r7, #20
    8ea4:	46bd      	mov	sp, r7
    8ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eaa:	4770      	bx	lr

00008eac <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    8eac:	b480      	push	{r7}
    8eae:	b083      	sub	sp, #12
    8eb0:	af00      	add	r7, sp, #0
    8eb2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	7e1b      	ldrb	r3, [r3, #24]
    8eb8:	b2db      	uxtb	r3, r3
}
    8eba:	4618      	mov	r0, r3
    8ebc:	370c      	adds	r7, #12
    8ebe:	46bd      	mov	sp, r7
    8ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ec4:	4770      	bx	lr

00008ec6 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    8ec6:	b480      	push	{r7}
    8ec8:	b083      	sub	sp, #12
    8eca:	af00      	add	r7, sp, #0
    8ecc:	6078      	str	r0, [r7, #4]
    8ece:	460b      	mov	r3, r1
    8ed0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	78fa      	ldrb	r2, [r7, #3]
    8ed6:	761a      	strb	r2, [r3, #24]
}
    8ed8:	bf00      	nop
    8eda:	370c      	adds	r7, #12
    8edc:	46bd      	mov	sp, r7
    8ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ee2:	4770      	bx	lr

00008ee4 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    8ee4:	b480      	push	{r7}
    8ee6:	b083      	sub	sp, #12
    8ee8:	af00      	add	r7, sp, #0
    8eea:	6078      	str	r0, [r7, #4]
    8eec:	460b      	mov	r3, r1
    8eee:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8ef0:	78fb      	ldrb	r3, [r7, #3]
    8ef2:	f083 0301 	eor.w	r3, r3, #1
    8ef6:	b2db      	uxtb	r3, r3
    8ef8:	2b00      	cmp	r3, #0
    8efa:	d003      	beq.n	8f04 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	2201      	movs	r2, #1
    8f00:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    8f02:	e002      	b.n	8f0a <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	2201      	movs	r2, #1
    8f08:	759a      	strb	r2, [r3, #22]
}
    8f0a:	bf00      	nop
    8f0c:	370c      	adds	r7, #12
    8f0e:	46bd      	mov	sp, r7
    8f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f14:	4770      	bx	lr

00008f16 <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    8f16:	b480      	push	{r7}
    8f18:	b083      	sub	sp, #12
    8f1a:	af00      	add	r7, sp, #0
    8f1c:	6078      	str	r0, [r7, #4]
    8f1e:	460b      	mov	r3, r1
    8f20:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8f22:	78fb      	ldrb	r3, [r7, #3]
    8f24:	f083 0301 	eor.w	r3, r3, #1
    8f28:	b2db      	uxtb	r3, r3
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d003      	beq.n	8f36 <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	2202      	movs	r2, #2
    8f32:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    8f34:	e002      	b.n	8f3c <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    8f36:	687b      	ldr	r3, [r7, #4]
    8f38:	2202      	movs	r2, #2
    8f3a:	759a      	strb	r2, [r3, #22]
}
    8f3c:	bf00      	nop
    8f3e:	370c      	adds	r7, #12
    8f40:	46bd      	mov	sp, r7
    8f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f46:	4770      	bx	lr

00008f48 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    8f48:	b480      	push	{r7}
    8f4a:	b083      	sub	sp, #12
    8f4c:	af00      	add	r7, sp, #0
    8f4e:	6078      	str	r0, [r7, #4]
    8f50:	460b      	mov	r3, r1
    8f52:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8f54:	78fb      	ldrb	r3, [r7, #3]
    8f56:	f083 0301 	eor.w	r3, r3, #1
    8f5a:	b2db      	uxtb	r3, r3
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d003      	beq.n	8f68 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    8f60:	687b      	ldr	r3, [r7, #4]
    8f62:	2280      	movs	r2, #128	; 0x80
    8f64:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    8f66:	e002      	b.n	8f6e <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	2280      	movs	r2, #128	; 0x80
    8f6c:	759a      	strb	r2, [r3, #22]
}
    8f6e:	bf00      	nop
    8f70:	370c      	adds	r7, #12
    8f72:	46bd      	mov	sp, r7
    8f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f78:	4770      	bx	lr

00008f7a <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    8f7a:	b480      	push	{r7}
    8f7c:	b083      	sub	sp, #12
    8f7e:	af00      	add	r7, sp, #0
    8f80:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	2201      	movs	r2, #1
    8f86:	759a      	strb	r2, [r3, #22]
}
    8f88:	bf00      	nop
    8f8a:	370c      	adds	r7, #12
    8f8c:	46bd      	mov	sp, r7
    8f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f92:	4770      	bx	lr

00008f94 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    8f94:	b480      	push	{r7}
    8f96:	b083      	sub	sp, #12
    8f98:	af00      	add	r7, sp, #0
    8f9a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	2201      	movs	r2, #1
    8fa0:	751a      	strb	r2, [r3, #20]
}
    8fa2:	bf00      	nop
    8fa4:	370c      	adds	r7, #12
    8fa6:	46bd      	mov	sp, r7
    8fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fac:	4770      	bx	lr

00008fae <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    8fae:	b480      	push	{r7}
    8fb0:	b083      	sub	sp, #12
    8fb2:	af00      	add	r7, sp, #0
    8fb4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    8fb6:	687b      	ldr	r3, [r7, #4]
    8fb8:	2202      	movs	r2, #2
    8fba:	759a      	strb	r2, [r3, #22]
}
    8fbc:	bf00      	nop
    8fbe:	370c      	adds	r7, #12
    8fc0:	46bd      	mov	sp, r7
    8fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fc6:	4770      	bx	lr

00008fc8 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    8fc8:	b480      	push	{r7}
    8fca:	b083      	sub	sp, #12
    8fcc:	af00      	add	r7, sp, #0
    8fce:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	2202      	movs	r2, #2
    8fd4:	751a      	strb	r2, [r3, #20]
}
    8fd6:	bf00      	nop
    8fd8:	370c      	adds	r7, #12
    8fda:	46bd      	mov	sp, r7
    8fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fe0:	4770      	bx	lr

00008fe2 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    8fe2:	b480      	push	{r7}
    8fe4:	b083      	sub	sp, #12
    8fe6:	af00      	add	r7, sp, #0
    8fe8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    8fea:	687b      	ldr	r3, [r7, #4]
    8fec:	2204      	movs	r2, #4
    8fee:	759a      	strb	r2, [r3, #22]
}
    8ff0:	bf00      	nop
    8ff2:	370c      	adds	r7, #12
    8ff4:	46bd      	mov	sp, r7
    8ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ffa:	4770      	bx	lr

00008ffc <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    8ffc:	b480      	push	{r7}
    8ffe:	b083      	sub	sp, #12
    9000:	af00      	add	r7, sp, #0
    9002:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    9004:	687b      	ldr	r3, [r7, #4]
    9006:	2204      	movs	r2, #4
    9008:	751a      	strb	r2, [r3, #20]
}
    900a:	bf00      	nop
    900c:	370c      	adds	r7, #12
    900e:	46bd      	mov	sp, r7
    9010:	f85d 7b04 	ldr.w	r7, [sp], #4
    9014:	4770      	bx	lr

00009016 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    9016:	b480      	push	{r7}
    9018:	b083      	sub	sp, #12
    901a:	af00      	add	r7, sp, #0
    901c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    901e:	687b      	ldr	r3, [r7, #4]
    9020:	7d9b      	ldrb	r3, [r3, #22]
    9022:	b2db      	uxtb	r3, r3
}
    9024:	4618      	mov	r0, r3
    9026:	370c      	adds	r7, #12
    9028:	46bd      	mov	sp, r7
    902a:	f85d 7b04 	ldr.w	r7, [sp], #4
    902e:	4770      	bx	lr

00009030 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9030:	b580      	push	{r7, lr}
    9032:	b082      	sub	sp, #8
    9034:	af00      	add	r7, sp, #0
    9036:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    9038:	687b      	ldr	r3, [r7, #4]
    903a:	681b      	ldr	r3, [r3, #0]
    903c:	f043 0202 	orr.w	r2, r3, #2
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9044:	2103      	movs	r1, #3
    9046:	6878      	ldr	r0, [r7, #4]
    9048:	4b02      	ldr	r3, [pc, #8]	; (9054 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    904a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    904c:	bf00      	nop
    904e:	3708      	adds	r7, #8
    9050:	46bd      	mov	sp, r7
    9052:	bd80      	pop	{r7, pc}
    9054:	00008d81 	.word	0x00008d81

00009058 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9058:	b580      	push	{r7, lr}
    905a:	b082      	sub	sp, #8
    905c:	af00      	add	r7, sp, #0
    905e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9060:	687b      	ldr	r3, [r7, #4]
    9062:	681b      	ldr	r3, [r3, #0]
    9064:	f023 0202 	bic.w	r2, r3, #2
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    906c:	2103      	movs	r1, #3
    906e:	6878      	ldr	r0, [r7, #4]
    9070:	4b02      	ldr	r3, [pc, #8]	; (907c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    9072:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9074:	bf00      	nop
    9076:	3708      	adds	r7, #8
    9078:	46bd      	mov	sp, r7
    907a:	bd80      	pop	{r7, pc}
    907c:	00008d81 	.word	0x00008d81

00009080 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    9080:	b480      	push	{r7}
    9082:	b085      	sub	sp, #20
    9084:	af00      	add	r7, sp, #0
    9086:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	681b      	ldr	r3, [r3, #0]
    908c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    908e:	68fb      	ldr	r3, [r7, #12]
    9090:	0edb      	lsrs	r3, r3, #27
    9092:	f003 0301 	and.w	r3, r3, #1
    9096:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9098:	68fb      	ldr	r3, [r7, #12]
    909a:	2b00      	cmp	r3, #0
    909c:	bf14      	ite	ne
    909e:	2301      	movne	r3, #1
    90a0:	2300      	moveq	r3, #0
    90a2:	b2db      	uxtb	r3, r3
}
    90a4:	4618      	mov	r0, r3
    90a6:	3714      	adds	r7, #20
    90a8:	46bd      	mov	sp, r7
    90aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ae:	4770      	bx	lr

000090b0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    90b0:	b580      	push	{r7, lr}
    90b2:	b084      	sub	sp, #16
    90b4:	af00      	add	r7, sp, #0
    90b6:	6078      	str	r0, [r7, #4]
    90b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    90ba:	2103      	movs	r1, #3
    90bc:	6878      	ldr	r0, [r7, #4]
    90be:	4b07      	ldr	r3, [pc, #28]	; (90dc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    90c0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    90c2:	687b      	ldr	r3, [r7, #4]
    90c4:	681b      	ldr	r3, [r3, #0]
    90c6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    90c8:	68fa      	ldr	r2, [r7, #12]
    90ca:	683b      	ldr	r3, [r7, #0]
    90cc:	4013      	ands	r3, r2
    90ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    90d0:	68fb      	ldr	r3, [r7, #12]
}
    90d2:	4618      	mov	r0, r3
    90d4:	3710      	adds	r7, #16
    90d6:	46bd      	mov	sp, r7
    90d8:	bd80      	pop	{r7, pc}
    90da:	bf00      	nop
    90dc:	00008d81 	.word	0x00008d81

000090e0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    90e0:	b580      	push	{r7, lr}
    90e2:	b082      	sub	sp, #8
    90e4:	af00      	add	r7, sp, #0
    90e6:	6078      	str	r0, [r7, #4]
    90e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	683a      	ldr	r2, [r7, #0]
    90ee:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    90f0:	2103      	movs	r1, #3
    90f2:	6878      	ldr	r0, [r7, #4]
    90f4:	4b02      	ldr	r3, [pc, #8]	; (9100 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    90f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    90f8:	bf00      	nop
    90fa:	3708      	adds	r7, #8
    90fc:	46bd      	mov	sp, r7
    90fe:	bd80      	pop	{r7, pc}
    9100:	00008d81 	.word	0x00008d81

00009104 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9104:	b580      	push	{r7, lr}
    9106:	b082      	sub	sp, #8
    9108:	af00      	add	r7, sp, #0
    910a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	681b      	ldr	r3, [r3, #0]
    9110:	f043 0202 	orr.w	r2, r3, #2
    9114:	687b      	ldr	r3, [r7, #4]
    9116:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9118:	2103      	movs	r1, #3
    911a:	6878      	ldr	r0, [r7, #4]
    911c:	4b02      	ldr	r3, [pc, #8]	; (9128 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    911e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9120:	bf00      	nop
    9122:	3708      	adds	r7, #8
    9124:	46bd      	mov	sp, r7
    9126:	bd80      	pop	{r7, pc}
    9128:	00008dcd 	.word	0x00008dcd

0000912c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    912c:	b580      	push	{r7, lr}
    912e:	b084      	sub	sp, #16
    9130:	af00      	add	r7, sp, #0
    9132:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9134:	2103      	movs	r1, #3
    9136:	6878      	ldr	r0, [r7, #4]
    9138:	4b09      	ldr	r3, [pc, #36]	; (9160 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    913a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	681b      	ldr	r3, [r3, #0]
    9140:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    9142:	68fb      	ldr	r3, [r7, #12]
    9144:	085b      	lsrs	r3, r3, #1
    9146:	f003 0301 	and.w	r3, r3, #1
    914a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    914c:	68fb      	ldr	r3, [r7, #12]
    914e:	2b00      	cmp	r3, #0
    9150:	bf14      	ite	ne
    9152:	2301      	movne	r3, #1
    9154:	2300      	moveq	r3, #0
    9156:	b2db      	uxtb	r3, r3
}
    9158:	4618      	mov	r0, r3
    915a:	3710      	adds	r7, #16
    915c:	46bd      	mov	sp, r7
    915e:	bd80      	pop	{r7, pc}
    9160:	00008dcd 	.word	0x00008dcd

00009164 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9164:	b580      	push	{r7, lr}
    9166:	b082      	sub	sp, #8
    9168:	af00      	add	r7, sp, #0
    916a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	681b      	ldr	r3, [r3, #0]
    9170:	f023 0202 	bic.w	r2, r3, #2
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9178:	2103      	movs	r1, #3
    917a:	6878      	ldr	r0, [r7, #4]
    917c:	4b02      	ldr	r3, [pc, #8]	; (9188 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    917e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9180:	bf00      	nop
    9182:	3708      	adds	r7, #8
    9184:	46bd      	mov	sp, r7
    9186:	bd80      	pop	{r7, pc}
    9188:	00008dcd 	.word	0x00008dcd

0000918c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    918c:	b580      	push	{r7, lr}
    918e:	b084      	sub	sp, #16
    9190:	af00      	add	r7, sp, #0
    9192:	6078      	str	r0, [r7, #4]
    9194:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9196:	2103      	movs	r1, #3
    9198:	6878      	ldr	r0, [r7, #4]
    919a:	4b07      	ldr	r3, [pc, #28]	; (91b8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    919c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	681b      	ldr	r3, [r3, #0]
    91a2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    91a4:	68fa      	ldr	r2, [r7, #12]
    91a6:	683b      	ldr	r3, [r7, #0]
    91a8:	4013      	ands	r3, r2
    91aa:	60fb      	str	r3, [r7, #12]
	return tmp;
    91ac:	68fb      	ldr	r3, [r7, #12]
}
    91ae:	4618      	mov	r0, r3
    91b0:	3710      	adds	r7, #16
    91b2:	46bd      	mov	sp, r7
    91b4:	bd80      	pop	{r7, pc}
    91b6:	bf00      	nop
    91b8:	00008dcd 	.word	0x00008dcd

000091bc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    91bc:	b580      	push	{r7, lr}
    91be:	b082      	sub	sp, #8
    91c0:	af00      	add	r7, sp, #0
    91c2:	6078      	str	r0, [r7, #4]
    91c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	683a      	ldr	r2, [r7, #0]
    91ca:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    91cc:	2103      	movs	r1, #3
    91ce:	6878      	ldr	r0, [r7, #4]
    91d0:	4b02      	ldr	r3, [pc, #8]	; (91dc <hri_sercomspi_write_CTRLA_reg+0x20>)
    91d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    91d4:	bf00      	nop
    91d6:	3708      	adds	r7, #8
    91d8:	46bd      	mov	sp, r7
    91da:	bd80      	pop	{r7, pc}
    91dc:	00008dcd 	.word	0x00008dcd

000091e0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    91e0:	b580      	push	{r7, lr}
    91e2:	b082      	sub	sp, #8
    91e4:	af00      	add	r7, sp, #0
    91e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    91e8:	687b      	ldr	r3, [r7, #4]
    91ea:	685b      	ldr	r3, [r3, #4]
    91ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    91f0:	687b      	ldr	r3, [r7, #4]
    91f2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    91f4:	2104      	movs	r1, #4
    91f6:	6878      	ldr	r0, [r7, #4]
    91f8:	4b02      	ldr	r3, [pc, #8]	; (9204 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    91fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    91fc:	bf00      	nop
    91fe:	3708      	adds	r7, #8
    9200:	46bd      	mov	sp, r7
    9202:	bd80      	pop	{r7, pc}
    9204:	00008d81 	.word	0x00008d81

00009208 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    9208:	b580      	push	{r7, lr}
    920a:	b082      	sub	sp, #8
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    9210:	687b      	ldr	r3, [r7, #4]
    9212:	685b      	ldr	r3, [r3, #4]
    9214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    921c:	2104      	movs	r1, #4
    921e:	6878      	ldr	r0, [r7, #4]
    9220:	4b02      	ldr	r3, [pc, #8]	; (922c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    9222:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9224:	bf00      	nop
    9226:	3708      	adds	r7, #8
    9228:	46bd      	mov	sp, r7
    922a:	bd80      	pop	{r7, pc}
    922c:	00008d81 	.word	0x00008d81

00009230 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    9230:	b580      	push	{r7, lr}
    9232:	b082      	sub	sp, #8
    9234:	af00      	add	r7, sp, #0
    9236:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	685b      	ldr	r3, [r3, #4]
    923c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9244:	2104      	movs	r1, #4
    9246:	6878      	ldr	r0, [r7, #4]
    9248:	4b02      	ldr	r3, [pc, #8]	; (9254 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    924a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    924c:	bf00      	nop
    924e:	3708      	adds	r7, #8
    9250:	46bd      	mov	sp, r7
    9252:	bd80      	pop	{r7, pc}
    9254:	00008d81 	.word	0x00008d81

00009258 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    9258:	b580      	push	{r7, lr}
    925a:	b082      	sub	sp, #8
    925c:	af00      	add	r7, sp, #0
    925e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9260:	687b      	ldr	r3, [r7, #4]
    9262:	685b      	ldr	r3, [r3, #4]
    9264:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    9268:	687b      	ldr	r3, [r7, #4]
    926a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    926c:	2104      	movs	r1, #4
    926e:	6878      	ldr	r0, [r7, #4]
    9270:	4b02      	ldr	r3, [pc, #8]	; (927c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    9272:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9274:	bf00      	nop
    9276:	3708      	adds	r7, #8
    9278:	46bd      	mov	sp, r7
    927a:	bd80      	pop	{r7, pc}
    927c:	00008d81 	.word	0x00008d81

00009280 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    9280:	b580      	push	{r7, lr}
    9282:	b082      	sub	sp, #8
    9284:	af00      	add	r7, sp, #0
    9286:	6078      	str	r0, [r7, #4]
    9288:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	685a      	ldr	r2, [r3, #4]
    928e:	683b      	ldr	r3, [r7, #0]
    9290:	041b      	lsls	r3, r3, #16
    9292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    9296:	431a      	orrs	r2, r3
    9298:	687b      	ldr	r3, [r7, #4]
    929a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    929c:	2104      	movs	r1, #4
    929e:	6878      	ldr	r0, [r7, #4]
    92a0:	4b02      	ldr	r3, [pc, #8]	; (92ac <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    92a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92a4:	bf00      	nop
    92a6:	3708      	adds	r7, #8
    92a8:	46bd      	mov	sp, r7
    92aa:	bd80      	pop	{r7, pc}
    92ac:	00008d81 	.word	0x00008d81

000092b0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    92b0:	b580      	push	{r7, lr}
    92b2:	b082      	sub	sp, #8
    92b4:	af00      	add	r7, sp, #0
    92b6:	6078      	str	r0, [r7, #4]
    92b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    92ba:	687b      	ldr	r3, [r7, #4]
    92bc:	683a      	ldr	r2, [r7, #0]
    92be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    92c0:	2104      	movs	r1, #4
    92c2:	6878      	ldr	r0, [r7, #4]
    92c4:	4b02      	ldr	r3, [pc, #8]	; (92d0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    92c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92c8:	bf00      	nop
    92ca:	3708      	adds	r7, #8
    92cc:	46bd      	mov	sp, r7
    92ce:	bd80      	pop	{r7, pc}
    92d0:	00008d81 	.word	0x00008d81

000092d4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	b082      	sub	sp, #8
    92d8:	af00      	add	r7, sp, #0
    92da:	6078      	str	r0, [r7, #4]
    92dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    92de:	687b      	ldr	r3, [r7, #4]
    92e0:	683a      	ldr	r2, [r7, #0]
    92e2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    92e4:	2117      	movs	r1, #23
    92e6:	6878      	ldr	r0, [r7, #4]
    92e8:	4b02      	ldr	r3, [pc, #8]	; (92f4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    92ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92ec:	bf00      	nop
    92ee:	3708      	adds	r7, #8
    92f0:	46bd      	mov	sp, r7
    92f2:	bd80      	pop	{r7, pc}
    92f4:	00008dcd 	.word	0x00008dcd

000092f8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    92f8:	b480      	push	{r7}
    92fa:	b083      	sub	sp, #12
    92fc:	af00      	add	r7, sp, #0
    92fe:	6078      	str	r0, [r7, #4]
    9300:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	683a      	ldr	r2, [r7, #0]
    9306:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9308:	bf00      	nop
    930a:	370c      	adds	r7, #12
    930c:	46bd      	mov	sp, r7
    930e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9312:	4770      	bx	lr

00009314 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    9314:	b480      	push	{r7}
    9316:	b083      	sub	sp, #12
    9318:	af00      	add	r7, sp, #0
    931a:	6078      	str	r0, [r7, #4]
    931c:	460b      	mov	r3, r1
    931e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9320:	687b      	ldr	r3, [r7, #4]
    9322:	78fa      	ldrb	r2, [r7, #3]
    9324:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9326:	bf00      	nop
    9328:	370c      	adds	r7, #12
    932a:	46bd      	mov	sp, r7
    932c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9330:	4770      	bx	lr
	...

00009334 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    9334:	b580      	push	{r7, lr}
    9336:	b084      	sub	sp, #16
    9338:	af00      	add	r7, sp, #0
    933a:	6078      	str	r0, [r7, #4]
    933c:	460b      	mov	r3, r1
    933e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9340:	687b      	ldr	r3, [r7, #4]
    9342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9344:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    9346:	68fb      	ldr	r3, [r7, #12]
    9348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    934c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    934e:	78fb      	ldrb	r3, [r7, #3]
    9350:	039b      	lsls	r3, r3, #14
    9352:	461a      	mov	r2, r3
    9354:	68fb      	ldr	r3, [r7, #12]
    9356:	4313      	orrs	r3, r2
    9358:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	68fa      	ldr	r2, [r7, #12]
    935e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9360:	2104      	movs	r1, #4
    9362:	6878      	ldr	r0, [r7, #4]
    9364:	4b02      	ldr	r3, [pc, #8]	; (9370 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    9366:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9368:	bf00      	nop
    936a:	3710      	adds	r7, #16
    936c:	46bd      	mov	sp, r7
    936e:	bd80      	pop	{r7, pc}
    9370:	00008d81 	.word	0x00008d81

00009374 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    9374:	b580      	push	{r7, lr}
    9376:	b082      	sub	sp, #8
    9378:	af00      	add	r7, sp, #0
    937a:	6078      	str	r0, [r7, #4]
    937c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	683a      	ldr	r2, [r7, #0]
    9382:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9384:	2104      	movs	r1, #4
    9386:	6878      	ldr	r0, [r7, #4]
    9388:	4b02      	ldr	r3, [pc, #8]	; (9394 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    938a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    938c:	bf00      	nop
    938e:	3708      	adds	r7, #8
    9390:	46bd      	mov	sp, r7
    9392:	bd80      	pop	{r7, pc}
    9394:	00008d81 	.word	0x00008d81

00009398 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    9398:	b580      	push	{r7, lr}
    939a:	b082      	sub	sp, #8
    939c:	af00      	add	r7, sp, #0
    939e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93a0:	2104      	movs	r1, #4
    93a2:	6878      	ldr	r0, [r7, #4]
    93a4:	4b03      	ldr	r3, [pc, #12]	; (93b4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    93a6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    93ac:	4618      	mov	r0, r3
    93ae:	3708      	adds	r7, #8
    93b0:	46bd      	mov	sp, r7
    93b2:	bd80      	pop	{r7, pc}
    93b4:	00008d81 	.word	0x00008d81

000093b8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    93b8:	b480      	push	{r7}
    93ba:	b083      	sub	sp, #12
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
    93c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	683a      	ldr	r2, [r7, #0]
    93c6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93c8:	bf00      	nop
    93ca:	370c      	adds	r7, #12
    93cc:	46bd      	mov	sp, r7
    93ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    93d2:	4770      	bx	lr

000093d4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    93d4:	b580      	push	{r7, lr}
    93d6:	b082      	sub	sp, #8
    93d8:	af00      	add	r7, sp, #0
    93da:	6078      	str	r0, [r7, #4]
    93dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	683a      	ldr	r2, [r7, #0]
    93e2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93e4:	2104      	movs	r1, #4
    93e6:	6878      	ldr	r0, [r7, #4]
    93e8:	4b02      	ldr	r3, [pc, #8]	; (93f4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    93ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93ec:	bf00      	nop
    93ee:	3708      	adds	r7, #8
    93f0:	46bd      	mov	sp, r7
    93f2:	bd80      	pop	{r7, pc}
    93f4:	00008d81 	.word	0x00008d81

000093f8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    93f8:	b580      	push	{r7, lr}
    93fa:	b082      	sub	sp, #8
    93fc:	af00      	add	r7, sp, #0
    93fe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9400:	2104      	movs	r1, #4
    9402:	6878      	ldr	r0, [r7, #4]
    9404:	4b03      	ldr	r3, [pc, #12]	; (9414 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    9406:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    9408:	687b      	ldr	r3, [r7, #4]
    940a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    940c:	4618      	mov	r0, r3
    940e:	3708      	adds	r7, #8
    9410:	46bd      	mov	sp, r7
    9412:	bd80      	pop	{r7, pc}
    9414:	00008d81 	.word	0x00008d81

00009418 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    9418:	b480      	push	{r7}
    941a:	b083      	sub	sp, #12
    941c:	af00      	add	r7, sp, #0
    941e:	6078      	str	r0, [r7, #4]
    9420:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	683a      	ldr	r2, [r7, #0]
    9426:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9428:	bf00      	nop
    942a:	370c      	adds	r7, #12
    942c:	46bd      	mov	sp, r7
    942e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9432:	4770      	bx	lr

00009434 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    9434:	b480      	push	{r7}
    9436:	b083      	sub	sp, #12
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    943c:	687b      	ldr	r3, [r7, #4]
    943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9440:	4618      	mov	r0, r3
    9442:	370c      	adds	r7, #12
    9444:	46bd      	mov	sp, r7
    9446:	f85d 7b04 	ldr.w	r7, [sp], #4
    944a:	4770      	bx	lr

0000944c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    944c:	b480      	push	{r7}
    944e:	b083      	sub	sp, #12
    9450:	af00      	add	r7, sp, #0
    9452:	6078      	str	r0, [r7, #4]
    9454:	460b      	mov	r3, r1
    9456:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	78fa      	ldrb	r2, [r7, #3]
    945c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9460:	bf00      	nop
    9462:	370c      	adds	r7, #12
    9464:	46bd      	mov	sp, r7
    9466:	f85d 7b04 	ldr.w	r7, [sp], #4
    946a:	4770      	bx	lr

0000946c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    946c:	b480      	push	{r7}
    946e:	b083      	sub	sp, #12
    9470:	af00      	add	r7, sp, #0
    9472:	6078      	str	r0, [r7, #4]
    9474:	460b      	mov	r3, r1
    9476:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    9478:	687b      	ldr	r3, [r7, #4]
    947a:	887a      	ldrh	r2, [r7, #2]
    947c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    947e:	bf00      	nop
    9480:	370c      	adds	r7, #12
    9482:	46bd      	mov	sp, r7
    9484:	f85d 7b04 	ldr.w	r7, [sp], #4
    9488:	4770      	bx	lr
	...

0000948c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    948c:	b580      	push	{r7, lr}
    948e:	b082      	sub	sp, #8
    9490:	af00      	add	r7, sp, #0
    9492:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9494:	2104      	movs	r1, #4
    9496:	6878      	ldr	r0, [r7, #4]
    9498:	4b06      	ldr	r3, [pc, #24]	; (94b4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    949a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	8b5b      	ldrh	r3, [r3, #26]
    94a0:	b29b      	uxth	r3, r3
    94a2:	091b      	lsrs	r3, r3, #4
    94a4:	b29b      	uxth	r3, r3
    94a6:	f003 0303 	and.w	r3, r3, #3
    94aa:	b29b      	uxth	r3, r3
}
    94ac:	4618      	mov	r0, r3
    94ae:	3708      	adds	r7, #8
    94b0:	46bd      	mov	sp, r7
    94b2:	bd80      	pop	{r7, pc}
    94b4:	00008d81 	.word	0x00008d81

000094b8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    94b8:	b580      	push	{r7, lr}
    94ba:	b082      	sub	sp, #8
    94bc:	af00      	add	r7, sp, #0
    94be:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    94c0:	2104      	movs	r1, #4
    94c2:	6878      	ldr	r0, [r7, #4]
    94c4:	4b04      	ldr	r3, [pc, #16]	; (94d8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    94c6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    94c8:	687b      	ldr	r3, [r7, #4]
    94ca:	8b5b      	ldrh	r3, [r3, #26]
    94cc:	b29b      	uxth	r3, r3
}
    94ce:	4618      	mov	r0, r3
    94d0:	3708      	adds	r7, #8
    94d2:	46bd      	mov	sp, r7
    94d4:	bd80      	pop	{r7, pc}
    94d6:	bf00      	nop
    94d8:	00008d81 	.word	0x00008d81

000094dc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    94dc:	b580      	push	{r7, lr}
    94de:	b082      	sub	sp, #8
    94e0:	af00      	add	r7, sp, #0
    94e2:	6078      	str	r0, [r7, #4]
    94e4:	460b      	mov	r3, r1
    94e6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    94e8:	687b      	ldr	r3, [r7, #4]
    94ea:	887a      	ldrh	r2, [r7, #2]
    94ec:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    94ee:	2104      	movs	r1, #4
    94f0:	6878      	ldr	r0, [r7, #4]
    94f2:	4b03      	ldr	r3, [pc, #12]	; (9500 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    94f4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94f6:	bf00      	nop
    94f8:	3708      	adds	r7, #8
    94fa:	46bd      	mov	sp, r7
    94fc:	bd80      	pop	{r7, pc}
    94fe:	bf00      	nop
    9500:	00008d81 	.word	0x00008d81

00009504 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    9504:	b4b0      	push	{r4, r5, r7}
    9506:	b08d      	sub	sp, #52	; 0x34
    9508:	af00      	add	r7, sp, #0
    950a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    950c:	4b13      	ldr	r3, [pc, #76]	; (955c <_sercom_get_hardware_index+0x58>)
    950e:	f107 040c 	add.w	r4, r7, #12
    9512:	461d      	mov	r5, r3
    9514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    951c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9520:	2300      	movs	r3, #0
    9522:	62fb      	str	r3, [r7, #44]	; 0x2c
    9524:	e010      	b.n	9548 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    9526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9528:	009b      	lsls	r3, r3, #2
    952a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    952e:	4413      	add	r3, r2
    9530:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9534:	461a      	mov	r2, r3
    9536:	687b      	ldr	r3, [r7, #4]
    9538:	429a      	cmp	r2, r3
    953a:	d102      	bne.n	9542 <_sercom_get_hardware_index+0x3e>
			return i;
    953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    953e:	b2db      	uxtb	r3, r3
    9540:	e006      	b.n	9550 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9544:	3301      	adds	r3, #1
    9546:	62fb      	str	r3, [r7, #44]	; 0x2c
    9548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    954a:	2b07      	cmp	r3, #7
    954c:	d9eb      	bls.n	9526 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    954e:	2300      	movs	r3, #0
}
    9550:	4618      	mov	r0, r3
    9552:	3734      	adds	r7, #52	; 0x34
    9554:	46bd      	mov	sp, r7
    9556:	bcb0      	pop	{r4, r5, r7}
    9558:	4770      	bx	lr
    955a:	bf00      	nop
    955c:	0001731c 	.word	0x0001731c

00009560 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    9560:	b480      	push	{r7}
    9562:	b083      	sub	sp, #12
    9564:	af00      	add	r7, sp, #0
    9566:	6078      	str	r0, [r7, #4]
    9568:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    956a:	687b      	ldr	r3, [r7, #4]
    956c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    9570:	d102      	bne.n	9578 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    9572:	4a0b      	ldr	r2, [pc, #44]	; (95a0 <_sercom_init_irq_param+0x40>)
    9574:	683b      	ldr	r3, [r7, #0]
    9576:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    9578:	687b      	ldr	r3, [r7, #4]
    957a:	4a0a      	ldr	r2, [pc, #40]	; (95a4 <_sercom_init_irq_param+0x44>)
    957c:	4293      	cmp	r3, r2
    957e:	d102      	bne.n	9586 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    9580:	4a09      	ldr	r2, [pc, #36]	; (95a8 <_sercom_init_irq_param+0x48>)
    9582:	683b      	ldr	r3, [r7, #0]
    9584:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    9586:	687b      	ldr	r3, [r7, #4]
    9588:	4a08      	ldr	r2, [pc, #32]	; (95ac <_sercom_init_irq_param+0x4c>)
    958a:	4293      	cmp	r3, r2
    958c:	d102      	bne.n	9594 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    958e:	4a08      	ldr	r2, [pc, #32]	; (95b0 <_sercom_init_irq_param+0x50>)
    9590:	683b      	ldr	r3, [r7, #0]
    9592:	6013      	str	r3, [r2, #0]
	}
}
    9594:	bf00      	nop
    9596:	370c      	adds	r7, #12
    9598:	46bd      	mov	sp, r7
    959a:	f85d 7b04 	ldr.w	r7, [sp], #4
    959e:	4770      	bx	lr
    95a0:	200030bc 	.word	0x200030bc
    95a4:	43000400 	.word	0x43000400
    95a8:	200030c0 	.word	0x200030c0
    95ac:	43000c00 	.word	0x43000c00
    95b0:	200030c4 	.word	0x200030c4

000095b4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    95b4:	b580      	push	{r7, lr}
    95b6:	b084      	sub	sp, #16
    95b8:	af00      	add	r7, sp, #0
    95ba:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    95bc:	6878      	ldr	r0, [r7, #4]
    95be:	4b13      	ldr	r3, [pc, #76]	; (960c <_get_i2cm_index+0x58>)
    95c0:	4798      	blx	r3
    95c2:	4603      	mov	r3, r0
    95c4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    95c6:	2300      	movs	r3, #0
    95c8:	73fb      	strb	r3, [r7, #15]
    95ca:	e010      	b.n	95ee <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    95cc:	7bfa      	ldrb	r2, [r7, #15]
    95ce:	4910      	ldr	r1, [pc, #64]	; (9610 <_get_i2cm_index+0x5c>)
    95d0:	4613      	mov	r3, r2
    95d2:	005b      	lsls	r3, r3, #1
    95d4:	4413      	add	r3, r2
    95d6:	00db      	lsls	r3, r3, #3
    95d8:	440b      	add	r3, r1
    95da:	781b      	ldrb	r3, [r3, #0]
    95dc:	7bba      	ldrb	r2, [r7, #14]
    95de:	429a      	cmp	r2, r3
    95e0:	d102      	bne.n	95e8 <_get_i2cm_index+0x34>
			return i;
    95e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    95e6:	e00d      	b.n	9604 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    95e8:	7bfb      	ldrb	r3, [r7, #15]
    95ea:	3301      	adds	r3, #1
    95ec:	73fb      	strb	r3, [r7, #15]
    95ee:	7bfb      	ldrb	r3, [r7, #15]
    95f0:	2b01      	cmp	r3, #1
    95f2:	d9eb      	bls.n	95cc <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    95f4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    95f8:	4906      	ldr	r1, [pc, #24]	; (9614 <_get_i2cm_index+0x60>)
    95fa:	2000      	movs	r0, #0
    95fc:	4b06      	ldr	r3, [pc, #24]	; (9618 <_get_i2cm_index+0x64>)
    95fe:	4798      	blx	r3
	return -1;
    9600:	f04f 33ff 	mov.w	r3, #4294967295
}
    9604:	4618      	mov	r0, r3
    9606:	3710      	adds	r7, #16
    9608:	46bd      	mov	sp, r7
    960a:	bd80      	pop	{r7, pc}
    960c:	00009505 	.word	0x00009505
    9610:	2000007c 	.word	0x2000007c
    9614:	00017300 	.word	0x00017300
    9618:	00006251 	.word	0x00006251

0000961c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    961c:	b580      	push	{r7, lr}
    961e:	b082      	sub	sp, #8
    9620:	af00      	add	r7, sp, #0
    9622:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    9624:	2103      	movs	r1, #3
    9626:	6878      	ldr	r0, [r7, #4]
    9628:	4b02      	ldr	r3, [pc, #8]	; (9634 <_sercom_i2c_send_stop+0x18>)
    962a:	4798      	blx	r3
}
    962c:	bf00      	nop
    962e:	3708      	adds	r7, #8
    9630:	46bd      	mov	sp, r7
    9632:	bd80      	pop	{r7, pc}
    9634:	00009281 	.word	0x00009281

00009638 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    9638:	b590      	push	{r4, r7, lr}
    963a:	b087      	sub	sp, #28
    963c:	af00      	add	r7, sp, #0
    963e:	60f8      	str	r0, [r7, #12]
    9640:	60b9      	str	r1, [r7, #8]
    9642:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9644:	68f8      	ldr	r0, [r7, #12]
    9646:	4b7d      	ldr	r3, [pc, #500]	; (983c <_sercom_i2c_sync_analyse_flags+0x204>)
    9648:	4798      	blx	r3
    964a:	4603      	mov	r3, r0
    964c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    964e:	68f8      	ldr	r0, [r7, #12]
    9650:	4b7b      	ldr	r3, [pc, #492]	; (9840 <_sercom_i2c_sync_analyse_flags+0x208>)
    9652:	4798      	blx	r3
    9654:	4603      	mov	r3, r0
    9656:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    9658:	68bb      	ldr	r3, [r7, #8]
    965a:	f003 0301 	and.w	r3, r3, #1
    965e:	2b00      	cmp	r3, #0
    9660:	f000 8095 	beq.w	978e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    9664:	8a7b      	ldrh	r3, [r7, #18]
    9666:	f003 0302 	and.w	r3, r3, #2
    966a:	2b00      	cmp	r3, #0
    966c:	d01d      	beq.n	96aa <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    966e:	68f8      	ldr	r0, [r7, #12]
    9670:	4b74      	ldr	r3, [pc, #464]	; (9844 <_sercom_i2c_sync_analyse_flags+0x20c>)
    9672:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    9674:	687b      	ldr	r3, [r7, #4]
    9676:	885b      	ldrh	r3, [r3, #2]
    9678:	b29b      	uxth	r3, r3
    967a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    967e:	b29a      	uxth	r2, r3
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	885b      	ldrh	r3, [r3, #2]
    9688:	b29b      	uxth	r3, r3
    968a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    968e:	b29a      	uxth	r2, r3
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    9694:	8a7b      	ldrh	r3, [r7, #18]
    9696:	f003 0301 	and.w	r3, r3, #1
    969a:	2b00      	cmp	r3, #0
    969c:	d002      	beq.n	96a4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    969e:	f06f 0304 	mvn.w	r3, #4
    96a2:	e0c6      	b.n	9832 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    96a4:	f06f 0303 	mvn.w	r3, #3
    96a8:	e0c3      	b.n	9832 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    96aa:	8a7b      	ldrh	r3, [r7, #18]
    96ac:	f003 0304 	and.w	r3, r3, #4
    96b0:	2b00      	cmp	r3, #0
    96b2:	d01f      	beq.n	96f4 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	685b      	ldr	r3, [r3, #4]
    96b8:	2b00      	cmp	r3, #0
    96ba:	dd07      	ble.n	96cc <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    96bc:	687b      	ldr	r3, [r7, #4]
    96be:	885b      	ldrh	r3, [r3, #2]
    96c0:	b29b      	uxth	r3, r3
    96c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    96c6:	b29a      	uxth	r2, r3
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    96cc:	687b      	ldr	r3, [r7, #4]
    96ce:	885b      	ldrh	r3, [r3, #2]
    96d0:	b29b      	uxth	r3, r3
    96d2:	b21b      	sxth	r3, r3
    96d4:	2b00      	cmp	r3, #0
    96d6:	da02      	bge.n	96de <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    96d8:	68f8      	ldr	r0, [r7, #12]
    96da:	4b5b      	ldr	r3, [pc, #364]	; (9848 <_sercom_i2c_sync_analyse_flags+0x210>)
    96dc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    96de:	687b      	ldr	r3, [r7, #4]
    96e0:	885b      	ldrh	r3, [r3, #2]
    96e2:	b29b      	uxth	r3, r3
    96e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    96e8:	b29a      	uxth	r2, r3
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    96ee:	f06f 0301 	mvn.w	r3, #1
    96f2:	e09e      	b.n	9832 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    96f4:	687b      	ldr	r3, [r7, #4]
    96f6:	885b      	ldrh	r3, [r3, #2]
    96f8:	b29b      	uxth	r3, r3
    96fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    96fe:	2b00      	cmp	r3, #0
    9700:	d01c      	beq.n	973c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	881b      	ldrh	r3, [r3, #0]
    9706:	121b      	asrs	r3, r3, #8
    9708:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    970a:	f003 0406 	and.w	r4, r3, #6
    970e:	68f8      	ldr	r0, [r7, #12]
    9710:	4b4e      	ldr	r3, [pc, #312]	; (984c <_sercom_i2c_sync_analyse_flags+0x214>)
    9712:	4798      	blx	r3
    9714:	4603      	mov	r3, r0
    9716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    971a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    971c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    9720:	4619      	mov	r1, r3
    9722:	68f8      	ldr	r0, [r7, #12]
    9724:	4b4a      	ldr	r3, [pc, #296]	; (9850 <_sercom_i2c_sync_analyse_flags+0x218>)
    9726:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    9728:	687b      	ldr	r3, [r7, #4]
    972a:	885b      	ldrh	r3, [r3, #2]
    972c:	b29b      	uxth	r3, r3
    972e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    9732:	b29a      	uxth	r2, r3
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    9738:	2300      	movs	r3, #0
    973a:	e07a      	b.n	9832 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	685b      	ldr	r3, [r3, #4]
    9740:	2b00      	cmp	r3, #0
    9742:	d111      	bne.n	9768 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    9744:	687b      	ldr	r3, [r7, #4]
    9746:	885b      	ldrh	r3, [r3, #2]
    9748:	b29b      	uxth	r3, r3
    974a:	b21b      	sxth	r3, r3
    974c:	2b00      	cmp	r3, #0
    974e:	da02      	bge.n	9756 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    9750:	68f8      	ldr	r0, [r7, #12]
    9752:	4b3d      	ldr	r3, [pc, #244]	; (9848 <_sercom_i2c_sync_analyse_flags+0x210>)
    9754:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9756:	687b      	ldr	r3, [r7, #4]
    9758:	885b      	ldrh	r3, [r3, #2]
    975a:	b29b      	uxth	r3, r3
    975c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9760:	b29a      	uxth	r2, r3
    9762:	687b      	ldr	r3, [r7, #4]
    9764:	805a      	strh	r2, [r3, #2]
    9766:	e010      	b.n	978a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    9768:	687b      	ldr	r3, [r7, #4]
    976a:	689b      	ldr	r3, [r3, #8]
    976c:	781b      	ldrb	r3, [r3, #0]
    976e:	4619      	mov	r1, r3
    9770:	68f8      	ldr	r0, [r7, #12]
    9772:	4b38      	ldr	r3, [pc, #224]	; (9854 <_sercom_i2c_sync_analyse_flags+0x21c>)
    9774:	4798      	blx	r3
				msg->buffer++;
    9776:	687b      	ldr	r3, [r7, #4]
    9778:	689b      	ldr	r3, [r3, #8]
    977a:	1c5a      	adds	r2, r3, #1
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	609a      	str	r2, [r3, #8]
				msg->len--;
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	685b      	ldr	r3, [r3, #4]
    9784:	1e5a      	subs	r2, r3, #1
    9786:	687b      	ldr	r3, [r7, #4]
    9788:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    978a:	2300      	movs	r3, #0
    978c:	e051      	b.n	9832 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    978e:	68bb      	ldr	r3, [r7, #8]
    9790:	f003 0302 	and.w	r3, r3, #2
    9794:	2b00      	cmp	r3, #0
    9796:	d04b      	beq.n	9830 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	685b      	ldr	r3, [r3, #4]
    979c:	2b00      	cmp	r3, #0
    979e:	d041      	beq.n	9824 <_sercom_i2c_sync_analyse_flags+0x1ec>
    97a0:	8a7b      	ldrh	r3, [r7, #18]
    97a2:	f003 0304 	and.w	r3, r3, #4
    97a6:	2b00      	cmp	r3, #0
    97a8:	d13c      	bne.n	9824 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    97aa:	687b      	ldr	r3, [r7, #4]
    97ac:	685b      	ldr	r3, [r3, #4]
    97ae:	1e5a      	subs	r2, r3, #1
    97b0:	687b      	ldr	r3, [r7, #4]
    97b2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    97b4:	687b      	ldr	r3, [r7, #4]
    97b6:	685b      	ldr	r3, [r3, #4]
    97b8:	2b00      	cmp	r3, #0
    97ba:	d102      	bne.n	97c2 <_sercom_i2c_sync_analyse_flags+0x18a>
    97bc:	697b      	ldr	r3, [r7, #20]
    97be:	2b00      	cmp	r3, #0
    97c0:	d006      	beq.n	97d0 <_sercom_i2c_sync_analyse_flags+0x198>
    97c2:	687b      	ldr	r3, [r7, #4]
    97c4:	685b      	ldr	r3, [r3, #4]
    97c6:	2b01      	cmp	r3, #1
    97c8:	d105      	bne.n	97d6 <_sercom_i2c_sync_analyse_flags+0x19e>
    97ca:	697b      	ldr	r3, [r7, #20]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d002      	beq.n	97d6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    97d0:	68f8      	ldr	r0, [r7, #12]
    97d2:	4b21      	ldr	r3, [pc, #132]	; (9858 <_sercom_i2c_sync_analyse_flags+0x220>)
    97d4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	685b      	ldr	r3, [r3, #4]
    97da:	2b00      	cmp	r3, #0
    97dc:	d113      	bne.n	9806 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    97de:	687b      	ldr	r3, [r7, #4]
    97e0:	885b      	ldrh	r3, [r3, #2]
    97e2:	b29b      	uxth	r3, r3
    97e4:	b21b      	sxth	r3, r3
    97e6:	2b00      	cmp	r3, #0
    97e8:	da05      	bge.n	97f6 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    97ea:	68f8      	ldr	r0, [r7, #12]
    97ec:	4b1b      	ldr	r3, [pc, #108]	; (985c <_sercom_i2c_sync_analyse_flags+0x224>)
    97ee:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    97f0:	68f8      	ldr	r0, [r7, #12]
    97f2:	4b15      	ldr	r3, [pc, #84]	; (9848 <_sercom_i2c_sync_analyse_flags+0x210>)
    97f4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	885b      	ldrh	r3, [r3, #2]
    97fa:	b29b      	uxth	r3, r3
    97fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9800:	b29a      	uxth	r2, r3
    9802:	687b      	ldr	r3, [r7, #4]
    9804:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    9806:	687b      	ldr	r3, [r7, #4]
    9808:	689c      	ldr	r4, [r3, #8]
    980a:	1c62      	adds	r2, r4, #1
    980c:	687b      	ldr	r3, [r7, #4]
    980e:	609a      	str	r2, [r3, #8]
    9810:	68f8      	ldr	r0, [r7, #12]
    9812:	4b13      	ldr	r3, [pc, #76]	; (9860 <_sercom_i2c_sync_analyse_flags+0x228>)
    9814:	4798      	blx	r3
    9816:	4603      	mov	r3, r0
    9818:	b2db      	uxtb	r3, r3
    981a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    981c:	68f8      	ldr	r0, [r7, #12]
    981e:	4b11      	ldr	r3, [pc, #68]	; (9864 <_sercom_i2c_sync_analyse_flags+0x22c>)
    9820:	4798      	blx	r3
    9822:	e005      	b.n	9830 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    9824:	68f8      	ldr	r0, [r7, #12]
    9826:	4b0f      	ldr	r3, [pc, #60]	; (9864 <_sercom_i2c_sync_analyse_flags+0x22c>)
    9828:	4798      	blx	r3
			return I2C_NACK;
    982a:	f06f 0301 	mvn.w	r3, #1
    982e:	e000      	b.n	9832 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    9830:	2300      	movs	r3, #0
}
    9832:	4618      	mov	r0, r3
    9834:	371c      	adds	r7, #28
    9836:	46bd      	mov	sp, r7
    9838:	bd90      	pop	{r4, r7, pc}
    983a:	bf00      	nop
    983c:	00009081 	.word	0x00009081
    9840:	000094b9 	.word	0x000094b9
    9844:	00008e19 	.word	0x00008e19
    9848:	0000961d 	.word	0x0000961d
    984c:	00009399 	.word	0x00009399
    9850:	00009375 	.word	0x00009375
    9854:	000093d5 	.word	0x000093d5
    9858:	00009231 	.word	0x00009231
    985c:	00009209 	.word	0x00009209
    9860:	000093f9 	.word	0x000093f9
    9864:	00008e33 	.word	0x00008e33

00009868 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    9868:	b580      	push	{r7, lr}
    986a:	b086      	sub	sp, #24
    986c:	af00      	add	r7, sp, #0
    986e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    9870:	687b      	ldr	r3, [r7, #4]
    9872:	691b      	ldr	r3, [r3, #16]
    9874:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    9876:	6938      	ldr	r0, [r7, #16]
    9878:	4b37      	ldr	r3, [pc, #220]	; (9958 <_sercom_i2c_m_irq_handler+0xf0>)
    987a:	4798      	blx	r3
    987c:	4603      	mov	r3, r0
    987e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    9880:	2300      	movs	r3, #0
    9882:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    9884:	687b      	ldr	r3, [r7, #4]
    9886:	2b00      	cmp	r3, #0
    9888:	bf14      	ite	ne
    988a:	2301      	movne	r3, #1
    988c:	2300      	moveq	r3, #0
    988e:	b2db      	uxtb	r3, r3
    9890:	f240 422a 	movw	r2, #1066	; 0x42a
    9894:	4931      	ldr	r1, [pc, #196]	; (995c <_sercom_i2c_m_irq_handler+0xf4>)
    9896:	4618      	mov	r0, r3
    9898:	4b31      	ldr	r3, [pc, #196]	; (9960 <_sercom_i2c_m_irq_handler+0xf8>)
    989a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    989c:	687b      	ldr	r3, [r7, #4]
    989e:	691b      	ldr	r3, [r3, #16]
    98a0:	2b00      	cmp	r3, #0
    98a2:	bf14      	ite	ne
    98a4:	2301      	movne	r3, #1
    98a6:	2300      	moveq	r3, #0
    98a8:	b2db      	uxtb	r3, r3
    98aa:	f240 422b 	movw	r2, #1067	; 0x42b
    98ae:	492b      	ldr	r1, [pc, #172]	; (995c <_sercom_i2c_m_irq_handler+0xf4>)
    98b0:	4618      	mov	r0, r3
    98b2:	4b2b      	ldr	r3, [pc, #172]	; (9960 <_sercom_i2c_m_irq_handler+0xf8>)
    98b4:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    98b6:	bf00      	nop
    98b8:	68fb      	ldr	r3, [r7, #12]
    98ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    98be:	2b00      	cmp	r3, #0
    98c0:	d126      	bne.n	9910 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    98c2:	687b      	ldr	r3, [r7, #4]
    98c4:	461a      	mov	r2, r3
    98c6:	68f9      	ldr	r1, [r7, #12]
    98c8:	6938      	ldr	r0, [r7, #16]
    98ca:	4b26      	ldr	r3, [pc, #152]	; (9964 <_sercom_i2c_m_irq_handler+0xfc>)
    98cc:	4798      	blx	r3
    98ce:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    98d0:	697b      	ldr	r3, [r7, #20]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d11b      	bne.n	990e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    98d6:	68fb      	ldr	r3, [r7, #12]
    98d8:	f003 0301 	and.w	r3, r3, #1
    98dc:	2b00      	cmp	r3, #0
    98de:	d008      	beq.n	98f2 <_sercom_i2c_m_irq_handler+0x8a>
    98e0:	687b      	ldr	r3, [r7, #4]
    98e2:	699b      	ldr	r3, [r3, #24]
    98e4:	2b00      	cmp	r3, #0
    98e6:	d004      	beq.n	98f2 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    98e8:	687b      	ldr	r3, [r7, #4]
    98ea:	699b      	ldr	r3, [r3, #24]
    98ec:	6878      	ldr	r0, [r7, #4]
    98ee:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    98f0:	e02e      	b.n	9950 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    98f2:	68fb      	ldr	r3, [r7, #12]
    98f4:	f003 0302 	and.w	r3, r3, #2
    98f8:	2b00      	cmp	r3, #0
    98fa:	d029      	beq.n	9950 <_sercom_i2c_m_irq_handler+0xe8>
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	69db      	ldr	r3, [r3, #28]
    9900:	2b00      	cmp	r3, #0
    9902:	d025      	beq.n	9950 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	69db      	ldr	r3, [r3, #28]
    9908:	6878      	ldr	r0, [r7, #4]
    990a:	4798      	blx	r3
		return;
    990c:	e020      	b.n	9950 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    990e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	885b      	ldrh	r3, [r3, #2]
    9914:	b29b      	uxth	r3, r3
    9916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    991a:	b29a      	uxth	r2, r3
    991c:	687b      	ldr	r3, [r7, #4]
    991e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	695b      	ldr	r3, [r3, #20]
    9924:	2b00      	cmp	r3, #0
    9926:	d014      	beq.n	9952 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    9928:	697b      	ldr	r3, [r7, #20]
    992a:	2b00      	cmp	r3, #0
    992c:	d005      	beq.n	993a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	695b      	ldr	r3, [r3, #20]
    9932:	6979      	ldr	r1, [r7, #20]
    9934:	6878      	ldr	r0, [r7, #4]
    9936:	4798      	blx	r3
    9938:	e005      	b.n	9946 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	695b      	ldr	r3, [r3, #20]
    993e:	f06f 0104 	mvn.w	r1, #4
    9942:	6878      	ldr	r0, [r7, #4]
    9944:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    9946:	2180      	movs	r1, #128	; 0x80
    9948:	6938      	ldr	r0, [r7, #16]
    994a:	4b07      	ldr	r3, [pc, #28]	; (9968 <_sercom_i2c_m_irq_handler+0x100>)
    994c:	4798      	blx	r3
    994e:	e000      	b.n	9952 <_sercom_i2c_m_irq_handler+0xea>
		return;
    9950:	bf00      	nop
	}
}
    9952:	3718      	adds	r7, #24
    9954:	46bd      	mov	sp, r7
    9956:	bd80      	pop	{r7, pc}
    9958:	00008e4d 	.word	0x00008e4d
    995c:	00017300 	.word	0x00017300
    9960:	00006251 	.word	0x00006251
    9964:	00009639 	.word	0x00009639
    9968:	00008e67 	.word	0x00008e67

0000996c <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    996c:	b580      	push	{r7, lr}
    996e:	b082      	sub	sp, #8
    9970:	af00      	add	r7, sp, #0
    9972:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    9974:	687b      	ldr	r3, [r7, #4]
    9976:	2b00      	cmp	r3, #0
    9978:	bf14      	ite	ne
    997a:	2301      	movne	r3, #1
    997c:	2300      	moveq	r3, #0
    997e:	b2db      	uxtb	r3, r3
    9980:	f44f 628a 	mov.w	r2, #1104	; 0x450
    9984:	4906      	ldr	r1, [pc, #24]	; (99a0 <_i2c_m_async_enable+0x34>)
    9986:	4618      	mov	r0, r3
    9988:	4b06      	ldr	r3, [pc, #24]	; (99a4 <_i2c_m_async_enable+0x38>)
    998a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	691b      	ldr	r3, [r3, #16]
    9990:	4618      	mov	r0, r3
    9992:	4b05      	ldr	r3, [pc, #20]	; (99a8 <_i2c_m_async_enable+0x3c>)
    9994:	4798      	blx	r3
    9996:	4603      	mov	r3, r0
}
    9998:	4618      	mov	r0, r3
    999a:	3708      	adds	r7, #8
    999c:	46bd      	mov	sp, r7
    999e:	bd80      	pop	{r7, pc}
    99a0:	00017300 	.word	0x00017300
    99a4:	00006251 	.word	0x00006251
    99a8:	00009cfd 	.word	0x00009cfd

000099ac <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    99ac:	b580      	push	{r7, lr}
    99ae:	b082      	sub	sp, #8
    99b0:	af00      	add	r7, sp, #0
    99b2:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    99b4:	6878      	ldr	r0, [r7, #4]
    99b6:	4b05      	ldr	r3, [pc, #20]	; (99cc <_sercom_get_irq_num+0x20>)
    99b8:	4798      	blx	r3
    99ba:	4603      	mov	r3, r0
    99bc:	009b      	lsls	r3, r3, #2
    99be:	b2db      	uxtb	r3, r3
    99c0:	332e      	adds	r3, #46	; 0x2e
    99c2:	b2db      	uxtb	r3, r3
}
    99c4:	4618      	mov	r0, r3
    99c6:	3708      	adds	r7, #8
    99c8:	46bd      	mov	sp, r7
    99ca:	bd80      	pop	{r7, pc}
    99cc:	00009505 	.word	0x00009505

000099d0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    99d0:	b580      	push	{r7, lr}
    99d2:	b086      	sub	sp, #24
    99d4:	af00      	add	r7, sp, #0
    99d6:	6078      	str	r0, [r7, #4]
    99d8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	2b00      	cmp	r3, #0
    99de:	bf14      	ite	ne
    99e0:	2301      	movne	r3, #1
    99e2:	2300      	moveq	r3, #0
    99e4:	b2db      	uxtb	r3, r3
    99e6:	f240 429e 	movw	r2, #1182	; 0x49e
    99ea:	491d      	ldr	r1, [pc, #116]	; (9a60 <_i2c_m_async_init+0x90>)
    99ec:	4618      	mov	r0, r3
    99ee:	4b1d      	ldr	r3, [pc, #116]	; (9a64 <_i2c_m_async_init+0x94>)
    99f0:	4798      	blx	r3

	i2c_dev->hw = hw;
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	683a      	ldr	r2, [r7, #0]
    99f6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    99f8:	687b      	ldr	r3, [r7, #4]
    99fa:	6839      	ldr	r1, [r7, #0]
    99fc:	4618      	mov	r0, r3
    99fe:	4b1a      	ldr	r3, [pc, #104]	; (9a68 <_i2c_m_async_init+0x98>)
    9a00:	4798      	blx	r3
    9a02:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    9a04:	68fb      	ldr	r3, [r7, #12]
    9a06:	2b00      	cmp	r3, #0
    9a08:	d001      	beq.n	9a0e <_i2c_m_async_init+0x3e>
		return init_status;
    9a0a:	68fb      	ldr	r3, [r7, #12]
    9a0c:	e024      	b.n	9a58 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    9a0e:	6879      	ldr	r1, [r7, #4]
    9a10:	6838      	ldr	r0, [r7, #0]
    9a12:	4b16      	ldr	r3, [pc, #88]	; (9a6c <_i2c_m_async_init+0x9c>)
    9a14:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    9a16:	6838      	ldr	r0, [r7, #0]
    9a18:	4b15      	ldr	r3, [pc, #84]	; (9a70 <_i2c_m_async_init+0xa0>)
    9a1a:	4798      	blx	r3
    9a1c:	4603      	mov	r3, r0
    9a1e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9a20:	2300      	movs	r3, #0
    9a22:	613b      	str	r3, [r7, #16]
    9a24:	e014      	b.n	9a50 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9a26:	7dfb      	ldrb	r3, [r7, #23]
    9a28:	b21b      	sxth	r3, r3
    9a2a:	4618      	mov	r0, r3
    9a2c:	4b11      	ldr	r3, [pc, #68]	; (9a74 <_i2c_m_async_init+0xa4>)
    9a2e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9a30:	7dfb      	ldrb	r3, [r7, #23]
    9a32:	b21b      	sxth	r3, r3
    9a34:	4618      	mov	r0, r3
    9a36:	4b10      	ldr	r3, [pc, #64]	; (9a78 <_i2c_m_async_init+0xa8>)
    9a38:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    9a3a:	7dfb      	ldrb	r3, [r7, #23]
    9a3c:	b21b      	sxth	r3, r3
    9a3e:	4618      	mov	r0, r3
    9a40:	4b0e      	ldr	r3, [pc, #56]	; (9a7c <_i2c_m_async_init+0xac>)
    9a42:	4798      	blx	r3
		irq++;
    9a44:	7dfb      	ldrb	r3, [r7, #23]
    9a46:	3301      	adds	r3, #1
    9a48:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9a4a:	693b      	ldr	r3, [r7, #16]
    9a4c:	3301      	adds	r3, #1
    9a4e:	613b      	str	r3, [r7, #16]
    9a50:	693b      	ldr	r3, [r7, #16]
    9a52:	2b03      	cmp	r3, #3
    9a54:	d9e7      	bls.n	9a26 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    9a56:	2300      	movs	r3, #0
}
    9a58:	4618      	mov	r0, r3
    9a5a:	3718      	adds	r7, #24
    9a5c:	46bd      	mov	sp, r7
    9a5e:	bd80      	pop	{r7, pc}
    9a60:	00017300 	.word	0x00017300
    9a64:	00006251 	.word	0x00006251
    9a68:	00009d89 	.word	0x00009d89
    9a6c:	00009561 	.word	0x00009561
    9a70:	000099ad 	.word	0x000099ad
    9a74:	00008d01 	.word	0x00008d01
    9a78:	00008d45 	.word	0x00008d45
    9a7c:	00008cc5 	.word	0x00008cc5

00009a80 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    9a80:	b590      	push	{r4, r7, lr}
    9a82:	b087      	sub	sp, #28
    9a84:	af00      	add	r7, sp, #0
    9a86:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	691b      	ldr	r3, [r3, #16]
    9a8c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9a92:	6978      	ldr	r0, [r7, #20]
    9a94:	4b33      	ldr	r3, [pc, #204]	; (9b64 <_sercom_i2c_send_address+0xe4>)
    9a96:	4798      	blx	r3
    9a98:	4603      	mov	r3, r0
    9a9a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	bf14      	ite	ne
    9aa2:	2301      	movne	r3, #1
    9aa4:	2300      	moveq	r3, #0
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9aac:	492e      	ldr	r1, [pc, #184]	; (9b68 <_sercom_i2c_send_address+0xe8>)
    9aae:	4618      	mov	r0, r3
    9ab0:	4b2e      	ldr	r3, [pc, #184]	; (9b6c <_sercom_i2c_send_address+0xec>)
    9ab2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9ab4:	693b      	ldr	r3, [r7, #16]
    9ab6:	685b      	ldr	r3, [r3, #4]
    9ab8:	2b01      	cmp	r3, #1
    9aba:	d106      	bne.n	9aca <_sercom_i2c_send_address+0x4a>
    9abc:	68fb      	ldr	r3, [r7, #12]
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d003      	beq.n	9aca <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9ac2:	6978      	ldr	r0, [r7, #20]
    9ac4:	4b2a      	ldr	r3, [pc, #168]	; (9b70 <_sercom_i2c_send_address+0xf0>)
    9ac6:	4798      	blx	r3
    9ac8:	e002      	b.n	9ad0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9aca:	6978      	ldr	r0, [r7, #20]
    9acc:	4b29      	ldr	r3, [pc, #164]	; (9b74 <_sercom_i2c_send_address+0xf4>)
    9ace:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    9ad0:	693b      	ldr	r3, [r7, #16]
    9ad2:	881b      	ldrh	r3, [r3, #0]
    9ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d022      	beq.n	9b22 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9adc:	693b      	ldr	r3, [r7, #16]
    9ade:	885b      	ldrh	r3, [r3, #2]
    9ae0:	b29b      	uxth	r3, r3
    9ae2:	f003 0301 	and.w	r3, r3, #1
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d007      	beq.n	9afa <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9aea:	693b      	ldr	r3, [r7, #16]
    9aec:	885b      	ldrh	r3, [r3, #2]
    9aee:	b29b      	uxth	r3, r3
    9af0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9af4:	b29a      	uxth	r2, r3
    9af6:	693b      	ldr	r3, [r7, #16]
    9af8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9afa:	693b      	ldr	r3, [r7, #16]
    9afc:	881b      	ldrh	r3, [r3, #0]
    9afe:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9b00:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9b04:	401c      	ands	r4, r3
    9b06:	6978      	ldr	r0, [r7, #20]
    9b08:	4b1b      	ldr	r3, [pc, #108]	; (9b78 <_sercom_i2c_send_address+0xf8>)
    9b0a:	4798      	blx	r3
    9b0c:	4603      	mov	r3, r0
    9b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9b12:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9b18:	4619      	mov	r1, r3
    9b1a:	6978      	ldr	r0, [r7, #20]
    9b1c:	4b17      	ldr	r3, [pc, #92]	; (9b7c <_sercom_i2c_send_address+0xfc>)
    9b1e:	4798      	blx	r3
    9b20:	e01a      	b.n	9b58 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    9b22:	693b      	ldr	r3, [r7, #16]
    9b24:	881b      	ldrh	r3, [r3, #0]
    9b26:	005b      	lsls	r3, r3, #1
    9b28:	b2db      	uxtb	r3, r3
    9b2a:	693a      	ldr	r2, [r7, #16]
    9b2c:	8852      	ldrh	r2, [r2, #2]
    9b2e:	b292      	uxth	r2, r2
    9b30:	f002 0201 	and.w	r2, r2, #1
    9b34:	2a00      	cmp	r2, #0
    9b36:	bf14      	ite	ne
    9b38:	2201      	movne	r2, #1
    9b3a:	2200      	moveq	r2, #0
    9b3c:	b2d2      	uxtb	r2, r2
    9b3e:	4313      	orrs	r3, r2
    9b40:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9b42:	6978      	ldr	r0, [r7, #20]
    9b44:	4b0c      	ldr	r3, [pc, #48]	; (9b78 <_sercom_i2c_send_address+0xf8>)
    9b46:	4798      	blx	r3
    9b48:	4603      	mov	r3, r0
    9b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    9b4e:	4323      	orrs	r3, r4
    9b50:	4619      	mov	r1, r3
    9b52:	6978      	ldr	r0, [r7, #20]
    9b54:	4b09      	ldr	r3, [pc, #36]	; (9b7c <_sercom_i2c_send_address+0xfc>)
    9b56:	4798      	blx	r3
	}

	return ERR_NONE;
    9b58:	2300      	movs	r3, #0
}
    9b5a:	4618      	mov	r0, r3
    9b5c:	371c      	adds	r7, #28
    9b5e:	46bd      	mov	sp, r7
    9b60:	bd90      	pop	{r4, r7, pc}
    9b62:	bf00      	nop
    9b64:	00009081 	.word	0x00009081
    9b68:	00017300 	.word	0x00017300
    9b6c:	00006251 	.word	0x00006251
    9b70:	00009231 	.word	0x00009231
    9b74:	00009259 	.word	0x00009259
    9b78:	00009399 	.word	0x00009399
    9b7c:	00009375 	.word	0x00009375

00009b80 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    9b80:	b580      	push	{r7, lr}
    9b82:	b084      	sub	sp, #16
    9b84:	af00      	add	r7, sp, #0
    9b86:	6078      	str	r0, [r7, #4]
    9b88:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9b8a:	687b      	ldr	r3, [r7, #4]
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	bf14      	ite	ne
    9b90:	2301      	movne	r3, #1
    9b92:	2300      	moveq	r3, #0
    9b94:	b2db      	uxtb	r3, r3
    9b96:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9b9a:	492a      	ldr	r1, [pc, #168]	; (9c44 <_i2c_m_async_transfer+0xc4>)
    9b9c:	4618      	mov	r0, r3
    9b9e:	4b2a      	ldr	r3, [pc, #168]	; (9c48 <_i2c_m_async_transfer+0xc8>)
    9ba0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	691b      	ldr	r3, [r3, #16]
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	bf14      	ite	ne
    9baa:	2301      	movne	r3, #1
    9bac:	2300      	moveq	r3, #0
    9bae:	b2db      	uxtb	r3, r3
    9bb0:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9bb4:	4923      	ldr	r1, [pc, #140]	; (9c44 <_i2c_m_async_transfer+0xc4>)
    9bb6:	4618      	mov	r0, r3
    9bb8:	4b23      	ldr	r3, [pc, #140]	; (9c48 <_i2c_m_async_transfer+0xc8>)
    9bba:	4798      	blx	r3
	ASSERT(msg);
    9bbc:	683b      	ldr	r3, [r7, #0]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	bf14      	ite	ne
    9bc2:	2301      	movne	r3, #1
    9bc4:	2300      	moveq	r3, #0
    9bc6:	b2db      	uxtb	r3, r3
    9bc8:	f240 42f6 	movw	r2, #1270	; 0x4f6
    9bcc:	491d      	ldr	r1, [pc, #116]	; (9c44 <_i2c_m_async_transfer+0xc4>)
    9bce:	4618      	mov	r0, r3
    9bd0:	4b1d      	ldr	r3, [pc, #116]	; (9c48 <_i2c_m_async_transfer+0xc8>)
    9bd2:	4798      	blx	r3

	if (msg->len == 0) {
    9bd4:	683b      	ldr	r3, [r7, #0]
    9bd6:	685b      	ldr	r3, [r3, #4]
    9bd8:	2b00      	cmp	r3, #0
    9bda:	d101      	bne.n	9be0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    9bdc:	2300      	movs	r3, #0
    9bde:	e02d      	b.n	9c3c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	885b      	ldrh	r3, [r3, #2]
    9be4:	b29b      	uxth	r3, r3
    9be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9bea:	2b00      	cmp	r3, #0
    9bec:	d002      	beq.n	9bf4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    9bee:	f06f 0303 	mvn.w	r3, #3
    9bf2:	e023      	b.n	9c3c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    9bf4:	683b      	ldr	r3, [r7, #0]
    9bf6:	885b      	ldrh	r3, [r3, #2]
    9bf8:	b29b      	uxth	r3, r3
    9bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9bfe:	b29a      	uxth	r2, r3
    9c00:	683b      	ldr	r3, [r7, #0]
    9c02:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    9c04:	687b      	ldr	r3, [r7, #4]
    9c06:	683a      	ldr	r2, [r7, #0]
    9c08:	ca07      	ldmia	r2, {r0, r1, r2}
    9c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    9c0e:	687b      	ldr	r3, [r7, #4]
    9c10:	691b      	ldr	r3, [r3, #16]
    9c12:	4618      	mov	r0, r3
    9c14:	4b0d      	ldr	r3, [pc, #52]	; (9c4c <_i2c_m_async_transfer+0xcc>)
    9c16:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    9c18:	6878      	ldr	r0, [r7, #4]
    9c1a:	4b0d      	ldr	r3, [pc, #52]	; (9c50 <_i2c_m_async_transfer+0xd0>)
    9c1c:	4798      	blx	r3
    9c1e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    9c20:	68fb      	ldr	r3, [r7, #12]
    9c22:	2b00      	cmp	r3, #0
    9c24:	d009      	beq.n	9c3a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	885b      	ldrh	r3, [r3, #2]
    9c2a:	b29b      	uxth	r3, r3
    9c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9c30:	b29a      	uxth	r2, r3
    9c32:	687b      	ldr	r3, [r7, #4]
    9c34:	805a      	strh	r2, [r3, #2]

		return ret;
    9c36:	68fb      	ldr	r3, [r7, #12]
    9c38:	e000      	b.n	9c3c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    9c3a:	2300      	movs	r3, #0
}
    9c3c:	4618      	mov	r0, r3
    9c3e:	3710      	adds	r7, #16
    9c40:	46bd      	mov	sp, r7
    9c42:	bd80      	pop	{r7, pc}
    9c44:	00017300 	.word	0x00017300
    9c48:	00006251 	.word	0x00006251
    9c4c:	000091e1 	.word	0x000091e1
    9c50:	00009a81 	.word	0x00009a81

00009c54 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    9c54:	b480      	push	{r7}
    9c56:	b085      	sub	sp, #20
    9c58:	af00      	add	r7, sp, #0
    9c5a:	60f8      	str	r0, [r7, #12]
    9c5c:	460b      	mov	r3, r1
    9c5e:	607a      	str	r2, [r7, #4]
    9c60:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    9c62:	7afb      	ldrb	r3, [r7, #11]
    9c64:	2b01      	cmp	r3, #1
    9c66:	d008      	beq.n	9c7a <_i2c_m_async_register_callback+0x26>
    9c68:	2b02      	cmp	r3, #2
    9c6a:	d00a      	beq.n	9c82 <_i2c_m_async_register_callback+0x2e>
    9c6c:	2b00      	cmp	r3, #0
    9c6e:	d000      	beq.n	9c72 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    9c70:	e00b      	b.n	9c8a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    9c72:	68fb      	ldr	r3, [r7, #12]
    9c74:	687a      	ldr	r2, [r7, #4]
    9c76:	615a      	str	r2, [r3, #20]
		break;
    9c78:	e007      	b.n	9c8a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    9c7a:	68fb      	ldr	r3, [r7, #12]
    9c7c:	687a      	ldr	r2, [r7, #4]
    9c7e:	619a      	str	r2, [r3, #24]
		break;
    9c80:	e003      	b.n	9c8a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    9c82:	68fb      	ldr	r3, [r7, #12]
    9c84:	687a      	ldr	r2, [r7, #4]
    9c86:	61da      	str	r2, [r3, #28]
		break;
    9c88:	bf00      	nop
	}

	return ERR_NONE;
    9c8a:	2300      	movs	r3, #0
}
    9c8c:	4618      	mov	r0, r3
    9c8e:	3714      	adds	r7, #20
    9c90:	46bd      	mov	sp, r7
    9c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c96:	4770      	bx	lr

00009c98 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    9c98:	b580      	push	{r7, lr}
    9c9a:	b082      	sub	sp, #8
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	6078      	str	r0, [r7, #4]
    9ca0:	460b      	mov	r3, r1
    9ca2:	70fb      	strb	r3, [r7, #3]
    9ca4:	4613      	mov	r3, r2
    9ca6:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    9ca8:	78fb      	ldrb	r3, [r7, #3]
    9caa:	2b01      	cmp	r3, #1
    9cac:	d002      	beq.n	9cb4 <_i2c_m_async_set_irq_state+0x1c>
    9cae:	78fb      	ldrb	r3, [r7, #3]
    9cb0:	2b02      	cmp	r3, #2
    9cb2:	d10e      	bne.n	9cd2 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    9cb4:	687b      	ldr	r3, [r7, #4]
    9cb6:	691b      	ldr	r3, [r3, #16]
    9cb8:	78ba      	ldrb	r2, [r7, #2]
    9cba:	4611      	mov	r1, r2
    9cbc:	4618      	mov	r0, r3
    9cbe:	4b0c      	ldr	r3, [pc, #48]	; (9cf0 <_i2c_m_async_set_irq_state+0x58>)
    9cc0:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    9cc2:	687b      	ldr	r3, [r7, #4]
    9cc4:	691b      	ldr	r3, [r3, #16]
    9cc6:	78ba      	ldrb	r2, [r7, #2]
    9cc8:	4611      	mov	r1, r2
    9cca:	4618      	mov	r0, r3
    9ccc:	4b09      	ldr	r3, [pc, #36]	; (9cf4 <_i2c_m_async_set_irq_state+0x5c>)
    9cce:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    9cd0:	e009      	b.n	9ce6 <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    9cd2:	78fb      	ldrb	r3, [r7, #3]
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	d106      	bne.n	9ce6 <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	691b      	ldr	r3, [r3, #16]
    9cdc:	78ba      	ldrb	r2, [r7, #2]
    9cde:	4611      	mov	r1, r2
    9ce0:	4618      	mov	r0, r3
    9ce2:	4b05      	ldr	r3, [pc, #20]	; (9cf8 <_i2c_m_async_set_irq_state+0x60>)
    9ce4:	4798      	blx	r3
}
    9ce6:	bf00      	nop
    9ce8:	3708      	adds	r7, #8
    9cea:	46bd      	mov	sp, r7
    9cec:	bd80      	pop	{r7, pc}
    9cee:	bf00      	nop
    9cf0:	00008f17 	.word	0x00008f17
    9cf4:	00008ee5 	.word	0x00008ee5
    9cf8:	00008f49 	.word	0x00008f49

00009cfc <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    9cfc:	b580      	push	{r7, lr}
    9cfe:	b084      	sub	sp, #16
    9d00:	af00      	add	r7, sp, #0
    9d02:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    9d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9d08:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    9d0a:	2304      	movs	r3, #4
    9d0c:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    9d0e:	687b      	ldr	r3, [r7, #4]
    9d10:	2b00      	cmp	r3, #0
    9d12:	bf14      	ite	ne
    9d14:	2301      	movne	r3, #1
    9d16:	2300      	moveq	r3, #0
    9d18:	b2db      	uxtb	r3, r3
    9d1a:	f240 6241 	movw	r2, #1601	; 0x641
    9d1e:	4915      	ldr	r1, [pc, #84]	; (9d74 <_i2c_m_enable_implementation+0x78>)
    9d20:	4618      	mov	r0, r3
    9d22:	4b15      	ldr	r3, [pc, #84]	; (9d78 <_i2c_m_enable_implementation+0x7c>)
    9d24:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    9d26:	6878      	ldr	r0, [r7, #4]
    9d28:	4b14      	ldr	r3, [pc, #80]	; (9d7c <_i2c_m_enable_implementation+0x80>)
    9d2a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9d2c:	e016      	b.n	9d5c <_i2c_m_enable_implementation+0x60>
		timeout--;
    9d2e:	68fb      	ldr	r3, [r7, #12]
    9d30:	3b01      	subs	r3, #1
    9d32:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    9d34:	68fb      	ldr	r3, [r7, #12]
    9d36:	2b00      	cmp	r3, #0
    9d38:	dc10      	bgt.n	9d5c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    9d3a:	68bb      	ldr	r3, [r7, #8]
    9d3c:	3b01      	subs	r3, #1
    9d3e:	60bb      	str	r3, [r7, #8]
    9d40:	68bb      	ldr	r3, [r7, #8]
    9d42:	2b00      	cmp	r3, #0
    9d44:	d007      	beq.n	9d56 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    9d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9d4a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    9d4c:	2110      	movs	r1, #16
    9d4e:	6878      	ldr	r0, [r7, #4]
    9d50:	4b0b      	ldr	r3, [pc, #44]	; (9d80 <_i2c_m_enable_implementation+0x84>)
    9d52:	4798      	blx	r3
    9d54:	e002      	b.n	9d5c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    9d56:	f06f 0305 	mvn.w	r3, #5
    9d5a:	e006      	b.n	9d6a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9d5c:	6878      	ldr	r0, [r7, #4]
    9d5e:	4b09      	ldr	r3, [pc, #36]	; (9d84 <_i2c_m_enable_implementation+0x88>)
    9d60:	4798      	blx	r3
    9d62:	4603      	mov	r3, r0
    9d64:	2b01      	cmp	r3, #1
    9d66:	d1e2      	bne.n	9d2e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    9d68:	2300      	movs	r3, #0
}
    9d6a:	4618      	mov	r0, r3
    9d6c:	3710      	adds	r7, #16
    9d6e:	46bd      	mov	sp, r7
    9d70:	bd80      	pop	{r7, pc}
    9d72:	bf00      	nop
    9d74:	00017300 	.word	0x00017300
    9d78:	00006251 	.word	0x00006251
    9d7c:	00009031 	.word	0x00009031
    9d80:	000094dd 	.word	0x000094dd
    9d84:	0000948d 	.word	0x0000948d

00009d88 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    9d88:	b580      	push	{r7, lr}
    9d8a:	b084      	sub	sp, #16
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	6078      	str	r0, [r7, #4]
    9d90:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    9d92:	6838      	ldr	r0, [r7, #0]
    9d94:	4b42      	ldr	r3, [pc, #264]	; (9ea0 <_i2c_m_sync_init_impl+0x118>)
    9d96:	4798      	blx	r3
    9d98:	4603      	mov	r3, r0
    9d9a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    9d9c:	2101      	movs	r1, #1
    9d9e:	6838      	ldr	r0, [r7, #0]
    9da0:	4b40      	ldr	r3, [pc, #256]	; (9ea4 <_i2c_m_sync_init_impl+0x11c>)
    9da2:	4798      	blx	r3
    9da4:	4603      	mov	r3, r0
    9da6:	f083 0301 	eor.w	r3, r3, #1
    9daa:	b2db      	uxtb	r3, r3
    9dac:	2b00      	cmp	r3, #0
    9dae:	d020      	beq.n	9df2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    9db0:	7bfa      	ldrb	r2, [r7, #15]
    9db2:	493d      	ldr	r1, [pc, #244]	; (9ea8 <_i2c_m_sync_init_impl+0x120>)
    9db4:	4613      	mov	r3, r2
    9db6:	005b      	lsls	r3, r3, #1
    9db8:	4413      	add	r3, r2
    9dba:	00db      	lsls	r3, r3, #3
    9dbc:	440b      	add	r3, r1
    9dbe:	3304      	adds	r3, #4
    9dc0:	681b      	ldr	r3, [r3, #0]
    9dc2:	f003 031c 	and.w	r3, r3, #28
    9dc6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    9dc8:	2102      	movs	r1, #2
    9dca:	6838      	ldr	r0, [r7, #0]
    9dcc:	4b37      	ldr	r3, [pc, #220]	; (9eac <_i2c_m_sync_init_impl+0x124>)
    9dce:	4798      	blx	r3
    9dd0:	4603      	mov	r3, r0
    9dd2:	2b00      	cmp	r3, #0
    9dd4:	d006      	beq.n	9de4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    9dd6:	6838      	ldr	r0, [r7, #0]
    9dd8:	4b35      	ldr	r3, [pc, #212]	; (9eb0 <_i2c_m_sync_init_impl+0x128>)
    9dda:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    9ddc:	2102      	movs	r1, #2
    9dde:	6838      	ldr	r0, [r7, #0]
    9de0:	4b34      	ldr	r3, [pc, #208]	; (9eb4 <_i2c_m_sync_init_impl+0x12c>)
    9de2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    9de4:	68bb      	ldr	r3, [r7, #8]
    9de6:	f043 0301 	orr.w	r3, r3, #1
    9dea:	4619      	mov	r1, r3
    9dec:	6838      	ldr	r0, [r7, #0]
    9dee:	4b32      	ldr	r3, [pc, #200]	; (9eb8 <_i2c_m_sync_init_impl+0x130>)
    9df0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    9df2:	2101      	movs	r1, #1
    9df4:	6838      	ldr	r0, [r7, #0]
    9df6:	4b2f      	ldr	r3, [pc, #188]	; (9eb4 <_i2c_m_sync_init_impl+0x12c>)
    9df8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    9dfa:	7bfa      	ldrb	r2, [r7, #15]
    9dfc:	492a      	ldr	r1, [pc, #168]	; (9ea8 <_i2c_m_sync_init_impl+0x120>)
    9dfe:	4613      	mov	r3, r2
    9e00:	005b      	lsls	r3, r3, #1
    9e02:	4413      	add	r3, r2
    9e04:	00db      	lsls	r3, r3, #3
    9e06:	440b      	add	r3, r1
    9e08:	3304      	adds	r3, #4
    9e0a:	681b      	ldr	r3, [r3, #0]
    9e0c:	4619      	mov	r1, r3
    9e0e:	6838      	ldr	r0, [r7, #0]
    9e10:	4b29      	ldr	r3, [pc, #164]	; (9eb8 <_i2c_m_sync_init_impl+0x130>)
    9e12:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    9e14:	7bfa      	ldrb	r2, [r7, #15]
    9e16:	4924      	ldr	r1, [pc, #144]	; (9ea8 <_i2c_m_sync_init_impl+0x120>)
    9e18:	4613      	mov	r3, r2
    9e1a:	005b      	lsls	r3, r3, #1
    9e1c:	4413      	add	r3, r2
    9e1e:	00db      	lsls	r3, r3, #3
    9e20:	440b      	add	r3, r1
    9e22:	3308      	adds	r3, #8
    9e24:	681b      	ldr	r3, [r3, #0]
    9e26:	4619      	mov	r1, r3
    9e28:	6838      	ldr	r0, [r7, #0]
    9e2a:	4b24      	ldr	r3, [pc, #144]	; (9ebc <_i2c_m_sync_init_impl+0x134>)
    9e2c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    9e2e:	7bfa      	ldrb	r2, [r7, #15]
    9e30:	491d      	ldr	r1, [pc, #116]	; (9ea8 <_i2c_m_sync_init_impl+0x120>)
    9e32:	4613      	mov	r3, r2
    9e34:	005b      	lsls	r3, r3, #1
    9e36:	4413      	add	r3, r2
    9e38:	00db      	lsls	r3, r3, #3
    9e3a:	440b      	add	r3, r1
    9e3c:	330c      	adds	r3, #12
    9e3e:	681b      	ldr	r3, [r3, #0]
    9e40:	4619      	mov	r1, r3
    9e42:	6838      	ldr	r0, [r7, #0]
    9e44:	4b1e      	ldr	r3, [pc, #120]	; (9ec0 <_i2c_m_sync_init_impl+0x138>)
    9e46:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    9e48:	7bfa      	ldrb	r2, [r7, #15]
    9e4a:	4917      	ldr	r1, [pc, #92]	; (9ea8 <_i2c_m_sync_init_impl+0x120>)
    9e4c:	4613      	mov	r3, r2
    9e4e:	005b      	lsls	r3, r3, #1
    9e50:	4413      	add	r3, r2
    9e52:	00db      	lsls	r3, r3, #3
    9e54:	440b      	add	r3, r1
    9e56:	3304      	adds	r3, #4
    9e58:	681b      	ldr	r3, [r3, #0]
    9e5a:	0e1b      	lsrs	r3, r3, #24
    9e5c:	b29b      	uxth	r3, r3
    9e5e:	f003 0303 	and.w	r3, r3, #3
    9e62:	b29a      	uxth	r2, r3
    9e64:	687b      	ldr	r3, [r7, #4]
    9e66:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    9e68:	687b      	ldr	r3, [r7, #4]
    9e6a:	899b      	ldrh	r3, [r3, #12]
    9e6c:	2b01      	cmp	r3, #1
    9e6e:	bf8c      	ite	hi
    9e70:	2301      	movhi	r3, #1
    9e72:	2300      	movls	r3, #0
    9e74:	b2db      	uxtb	r3, r3
    9e76:	4619      	mov	r1, r3
    9e78:	6838      	ldr	r0, [r7, #0]
    9e7a:	4b12      	ldr	r3, [pc, #72]	; (9ec4 <_i2c_m_sync_init_impl+0x13c>)
    9e7c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    9e7e:	7bfa      	ldrb	r2, [r7, #15]
    9e80:	4909      	ldr	r1, [pc, #36]	; (9ea8 <_i2c_m_sync_init_impl+0x120>)
    9e82:	4613      	mov	r3, r2
    9e84:	005b      	lsls	r3, r3, #1
    9e86:	4413      	add	r3, r2
    9e88:	00db      	lsls	r3, r3, #3
    9e8a:	440b      	add	r3, r1
    9e8c:	3312      	adds	r3, #18
    9e8e:	881a      	ldrh	r2, [r3, #0]
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    9e94:	2300      	movs	r3, #0
}
    9e96:	4618      	mov	r0, r3
    9e98:	3710      	adds	r7, #16
    9e9a:	46bd      	mov	sp, r7
    9e9c:	bd80      	pop	{r7, pc}
    9e9e:	bf00      	nop
    9ea0:	000095b5 	.word	0x000095b5
    9ea4:	00008da5 	.word	0x00008da5
    9ea8:	2000007c 	.word	0x2000007c
    9eac:	000090b1 	.word	0x000090b1
    9eb0:	00009059 	.word	0x00009059
    9eb4:	00008d81 	.word	0x00008d81
    9eb8:	000090e1 	.word	0x000090e1
    9ebc:	000092b1 	.word	0x000092b1
    9ec0:	000092f9 	.word	0x000092f9
    9ec4:	00009335 	.word	0x00009335

00009ec8 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	b082      	sub	sp, #8
    9ecc:	af00      	add	r7, sp, #0
    9ece:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9ed0:	2101      	movs	r1, #1
    9ed2:	6878      	ldr	r0, [r7, #4]
    9ed4:	4b07      	ldr	r3, [pc, #28]	; (9ef4 <_spi_sync_enable+0x2c>)
    9ed6:	4798      	blx	r3
    9ed8:	4603      	mov	r3, r0
    9eda:	2b00      	cmp	r3, #0
    9edc:	d002      	beq.n	9ee4 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    9ede:	f06f 0303 	mvn.w	r3, #3
    9ee2:	e003      	b.n	9eec <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    9ee4:	6878      	ldr	r0, [r7, #4]
    9ee6:	4b04      	ldr	r3, [pc, #16]	; (9ef8 <_spi_sync_enable+0x30>)
    9ee8:	4798      	blx	r3

	return ERR_NONE;
    9eea:	2300      	movs	r3, #0
}
    9eec:	4618      	mov	r0, r3
    9eee:	3708      	adds	r7, #8
    9ef0:	46bd      	mov	sp, r7
    9ef2:	bd80      	pop	{r7, pc}
    9ef4:	00008df1 	.word	0x00008df1
    9ef8:	00009105 	.word	0x00009105

00009efc <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    9efc:	b580      	push	{r7, lr}
    9efe:	b082      	sub	sp, #8
    9f00:	af00      	add	r7, sp, #0
    9f02:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9f04:	2101      	movs	r1, #1
    9f06:	6878      	ldr	r0, [r7, #4]
    9f08:	4b07      	ldr	r3, [pc, #28]	; (9f28 <_spi_sync_disable+0x2c>)
    9f0a:	4798      	blx	r3
    9f0c:	4603      	mov	r3, r0
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d002      	beq.n	9f18 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    9f12:	f06f 0303 	mvn.w	r3, #3
    9f16:	e003      	b.n	9f20 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    9f18:	6878      	ldr	r0, [r7, #4]
    9f1a:	4b04      	ldr	r3, [pc, #16]	; (9f2c <_spi_sync_disable+0x30>)
    9f1c:	4798      	blx	r3

	return ERR_NONE;
    9f1e:	2300      	movs	r3, #0
}
    9f20:	4618      	mov	r0, r3
    9f22:	3708      	adds	r7, #8
    9f24:	46bd      	mov	sp, r7
    9f26:	bd80      	pop	{r7, pc}
    9f28:	00008df1 	.word	0x00008df1
    9f2c:	00009165 	.word	0x00009165

00009f30 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9f30:	b580      	push	{r7, lr}
    9f32:	b082      	sub	sp, #8
    9f34:	af00      	add	r7, sp, #0
    9f36:	6078      	str	r0, [r7, #4]
    9f38:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    9f3a:	687b      	ldr	r3, [r7, #4]
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d004      	beq.n	9f4a <_spi_load_regs_master+0x1a>
    9f40:	683b      	ldr	r3, [r7, #0]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d001      	beq.n	9f4a <_spi_load_regs_master+0x1a>
    9f46:	2301      	movs	r3, #1
    9f48:	e000      	b.n	9f4c <_spi_load_regs_master+0x1c>
    9f4a:	2300      	movs	r3, #0
    9f4c:	f003 0301 	and.w	r3, r3, #1
    9f50:	b2db      	uxtb	r3, r3
    9f52:	f640 1245 	movw	r2, #2373	; 0x945
    9f56:	4915      	ldr	r1, [pc, #84]	; (9fac <_spi_load_regs_master+0x7c>)
    9f58:	4618      	mov	r0, r3
    9f5a:	4b15      	ldr	r3, [pc, #84]	; (9fb0 <_spi_load_regs_master+0x80>)
    9f5c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9f5e:	683b      	ldr	r3, [r7, #0]
    9f60:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    9f62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    9f66:	f023 0301 	bic.w	r3, r3, #1
    9f6a:	4619      	mov	r1, r3
    9f6c:	6878      	ldr	r0, [r7, #4]
    9f6e:	4b11      	ldr	r3, [pc, #68]	; (9fb4 <_spi_load_regs_master+0x84>)
    9f70:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    9f72:	683b      	ldr	r3, [r7, #0]
    9f74:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    9f76:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    9f7a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    9f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9f82:	4619      	mov	r1, r3
    9f84:	6878      	ldr	r0, [r7, #4]
    9f86:	4b0c      	ldr	r3, [pc, #48]	; (9fb8 <_spi_load_regs_master+0x88>)
    9f88:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    9f8a:	683b      	ldr	r3, [r7, #0]
    9f8c:	7b1b      	ldrb	r3, [r3, #12]
    9f8e:	4619      	mov	r1, r3
    9f90:	6878      	ldr	r0, [r7, #4]
    9f92:	4b0a      	ldr	r3, [pc, #40]	; (9fbc <_spi_load_regs_master+0x8c>)
    9f94:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9f96:	683b      	ldr	r3, [r7, #0]
    9f98:	7b5b      	ldrb	r3, [r3, #13]
    9f9a:	4619      	mov	r1, r3
    9f9c:	6878      	ldr	r0, [r7, #4]
    9f9e:	4b08      	ldr	r3, [pc, #32]	; (9fc0 <_spi_load_regs_master+0x90>)
    9fa0:	4798      	blx	r3
}
    9fa2:	bf00      	nop
    9fa4:	3708      	adds	r7, #8
    9fa6:	46bd      	mov	sp, r7
    9fa8:	bd80      	pop	{r7, pc}
    9faa:	bf00      	nop
    9fac:	00017300 	.word	0x00017300
    9fb0:	00006251 	.word	0x00006251
    9fb4:	000091bd 	.word	0x000091bd
    9fb8:	000092d5 	.word	0x000092d5
    9fbc:	00009315 	.word	0x00009315
    9fc0:	0000944d 	.word	0x0000944d

00009fc4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9fc4:	b580      	push	{r7, lr}
    9fc6:	b082      	sub	sp, #8
    9fc8:	af00      	add	r7, sp, #0
    9fca:	6078      	str	r0, [r7, #4]
    9fcc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    9fce:	687b      	ldr	r3, [r7, #4]
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	d004      	beq.n	9fde <_spi_load_regs_slave+0x1a>
    9fd4:	683b      	ldr	r3, [r7, #0]
    9fd6:	2b00      	cmp	r3, #0
    9fd8:	d001      	beq.n	9fde <_spi_load_regs_slave+0x1a>
    9fda:	2301      	movs	r3, #1
    9fdc:	e000      	b.n	9fe0 <_spi_load_regs_slave+0x1c>
    9fde:	2300      	movs	r3, #0
    9fe0:	f003 0301 	and.w	r3, r3, #1
    9fe4:	b2db      	uxtb	r3, r3
    9fe6:	f640 1259 	movw	r2, #2393	; 0x959
    9fea:	491a      	ldr	r1, [pc, #104]	; (a054 <_spi_load_regs_slave+0x90>)
    9fec:	4618      	mov	r0, r3
    9fee:	4b1a      	ldr	r3, [pc, #104]	; (a058 <_spi_load_regs_slave+0x94>)
    9ff0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9ff2:	683b      	ldr	r3, [r7, #0]
    9ff4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    9ff6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    9ffa:	f023 0301 	bic.w	r3, r3, #1
    9ffe:	4619      	mov	r1, r3
    a000:	6878      	ldr	r0, [r7, #4]
    a002:	4b16      	ldr	r3, [pc, #88]	; (a05c <_spi_load_regs_slave+0x98>)
    a004:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    a006:	683b      	ldr	r3, [r7, #0]
    a008:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    a00a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    a00e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    a012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a016:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    a01a:	4619      	mov	r1, r3
    a01c:	6878      	ldr	r0, [r7, #4]
    a01e:	4b10      	ldr	r3, [pc, #64]	; (a060 <_spi_load_regs_slave+0x9c>)
    a020:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    a022:	683b      	ldr	r3, [r7, #0]
    a024:	689b      	ldr	r3, [r3, #8]
    a026:	4619      	mov	r1, r3
    a028:	6878      	ldr	r0, [r7, #4]
    a02a:	4b0e      	ldr	r3, [pc, #56]	; (a064 <_spi_load_regs_slave+0xa0>)
    a02c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a02e:	683b      	ldr	r3, [r7, #0]
    a030:	7b5b      	ldrb	r3, [r3, #13]
    a032:	4619      	mov	r1, r3
    a034:	6878      	ldr	r0, [r7, #4]
    a036:	4b0c      	ldr	r3, [pc, #48]	; (a068 <_spi_load_regs_slave+0xa4>)
    a038:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    a03a:	bf00      	nop
    a03c:	f04f 31ff 	mov.w	r1, #4294967295
    a040:	6878      	ldr	r0, [r7, #4]
    a042:	4b0a      	ldr	r3, [pc, #40]	; (a06c <_spi_load_regs_slave+0xa8>)
    a044:	4798      	blx	r3
    a046:	4603      	mov	r3, r0
    a048:	2b00      	cmp	r3, #0
    a04a:	d1f7      	bne.n	a03c <_spi_load_regs_slave+0x78>
		;
}
    a04c:	bf00      	nop
    a04e:	3708      	adds	r7, #8
    a050:	46bd      	mov	sp, r7
    a052:	bd80      	pop	{r7, pc}
    a054:	00017300 	.word	0x00017300
    a058:	00006251 	.word	0x00006251
    a05c:	000091bd 	.word	0x000091bd
    a060:	000092d5 	.word	0x000092d5
    a064:	000093b9 	.word	0x000093b9
    a068:	0000944d 	.word	0x0000944d
    a06c:	00008df1 	.word	0x00008df1

0000a070 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    a070:	b580      	push	{r7, lr}
    a072:	b084      	sub	sp, #16
    a074:	af00      	add	r7, sp, #0
    a076:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	4618      	mov	r0, r3
    a07c:	4b11      	ldr	r3, [pc, #68]	; (a0c4 <_spi_get_regs+0x54>)
    a07e:	4798      	blx	r3
    a080:	4603      	mov	r3, r0
    a082:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a084:	2300      	movs	r3, #0
    a086:	73fb      	strb	r3, [r7, #15]
    a088:	e014      	b.n	a0b4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    a08a:	7bfa      	ldrb	r2, [r7, #15]
    a08c:	490e      	ldr	r1, [pc, #56]	; (a0c8 <_spi_get_regs+0x58>)
    a08e:	4613      	mov	r3, r2
    a090:	011b      	lsls	r3, r3, #4
    a092:	4413      	add	r3, r2
    a094:	440b      	add	r3, r1
    a096:	3310      	adds	r3, #16
    a098:	781b      	ldrb	r3, [r3, #0]
    a09a:	7bba      	ldrb	r2, [r7, #14]
    a09c:	429a      	cmp	r2, r3
    a09e:	d106      	bne.n	a0ae <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    a0a0:	7bfa      	ldrb	r2, [r7, #15]
    a0a2:	4613      	mov	r3, r2
    a0a4:	011b      	lsls	r3, r3, #4
    a0a6:	4413      	add	r3, r2
    a0a8:	4a07      	ldr	r2, [pc, #28]	; (a0c8 <_spi_get_regs+0x58>)
    a0aa:	4413      	add	r3, r2
    a0ac:	e006      	b.n	a0bc <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a0ae:	7bfb      	ldrb	r3, [r7, #15]
    a0b0:	3301      	adds	r3, #1
    a0b2:	73fb      	strb	r3, [r7, #15]
    a0b4:	7bfb      	ldrb	r3, [r7, #15]
    a0b6:	2b02      	cmp	r3, #2
    a0b8:	d9e7      	bls.n	a08a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    a0ba:	2300      	movs	r3, #0
}
    a0bc:	4618      	mov	r0, r3
    a0be:	3710      	adds	r7, #16
    a0c0:	46bd      	mov	sp, r7
    a0c2:	bd80      	pop	{r7, pc}
    a0c4:	00009505 	.word	0x00009505
    a0c8:	0001733c 	.word	0x0001733c

0000a0cc <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    a0cc:	b580      	push	{r7, lr}
    a0ce:	b084      	sub	sp, #16
    a0d0:	af00      	add	r7, sp, #0
    a0d2:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    a0da:	68f8      	ldr	r0, [r7, #12]
    a0dc:	4b21      	ldr	r3, [pc, #132]	; (a164 <_spi_handler+0x98>)
    a0de:	4798      	blx	r3
    a0e0:	4603      	mov	r3, r0
    a0e2:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    a0e4:	68f8      	ldr	r0, [r7, #12]
    a0e6:	4b20      	ldr	r3, [pc, #128]	; (a168 <_spi_handler+0x9c>)
    a0e8:	4798      	blx	r3
    a0ea:	4603      	mov	r3, r0
    a0ec:	461a      	mov	r2, r3
    a0ee:	7afb      	ldrb	r3, [r7, #11]
    a0f0:	4013      	ands	r3, r2
    a0f2:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    a0f4:	7afb      	ldrb	r3, [r7, #11]
    a0f6:	f003 0301 	and.w	r3, r3, #1
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d004      	beq.n	a108 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    a0fe:	687b      	ldr	r3, [r7, #4]
    a100:	689b      	ldr	r3, [r3, #8]
    a102:	6878      	ldr	r0, [r7, #4]
    a104:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    a106:	e029      	b.n	a15c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    a108:	7afb      	ldrb	r3, [r7, #11]
    a10a:	f003 0304 	and.w	r3, r3, #4
    a10e:	2b00      	cmp	r3, #0
    a110:	d004      	beq.n	a11c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    a112:	687b      	ldr	r3, [r7, #4]
    a114:	68db      	ldr	r3, [r3, #12]
    a116:	6878      	ldr	r0, [r7, #4]
    a118:	4798      	blx	r3
}
    a11a:	e01f      	b.n	a15c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    a11c:	7afb      	ldrb	r3, [r7, #11]
    a11e:	f003 0302 	and.w	r3, r3, #2
    a122:	2b00      	cmp	r3, #0
    a124:	d008      	beq.n	a138 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    a126:	2102      	movs	r1, #2
    a128:	68f8      	ldr	r0, [r7, #12]
    a12a:	4b10      	ldr	r3, [pc, #64]	; (a16c <_spi_handler+0xa0>)
    a12c:	4798      	blx	r3
		dev->callbacks.complete(dev);
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	691b      	ldr	r3, [r3, #16]
    a132:	6878      	ldr	r0, [r7, #4]
    a134:	4798      	blx	r3
}
    a136:	e011      	b.n	a15c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    a138:	f997 300b 	ldrsb.w	r3, [r7, #11]
    a13c:	2b00      	cmp	r3, #0
    a13e:	da0d      	bge.n	a15c <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    a140:	2104      	movs	r1, #4
    a142:	68f8      	ldr	r0, [r7, #12]
    a144:	4b0a      	ldr	r3, [pc, #40]	; (a170 <_spi_handler+0xa4>)
    a146:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a148:	2180      	movs	r1, #128	; 0x80
    a14a:	68f8      	ldr	r0, [r7, #12]
    a14c:	4b07      	ldr	r3, [pc, #28]	; (a16c <_spi_handler+0xa0>)
    a14e:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	695b      	ldr	r3, [r3, #20]
    a154:	f06f 0112 	mvn.w	r1, #18
    a158:	6878      	ldr	r0, [r7, #4]
    a15a:	4798      	blx	r3
}
    a15c:	bf00      	nop
    a15e:	3710      	adds	r7, #16
    a160:	46bd      	mov	sp, r7
    a162:	bd80      	pop	{r7, pc}
    a164:	00008ead 	.word	0x00008ead
    a168:	00009017 	.word	0x00009017
    a16c:	00008ec7 	.word	0x00008ec7
    a170:	0000946d 	.word	0x0000946d

0000a174 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    a174:	b580      	push	{r7, lr}
    a176:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a178:	4b03      	ldr	r3, [pc, #12]	; (a188 <SERCOM4_0_Handler+0x14>)
    a17a:	681b      	ldr	r3, [r3, #0]
    a17c:	4618      	mov	r0, r3
    a17e:	4b03      	ldr	r3, [pc, #12]	; (a18c <SERCOM4_0_Handler+0x18>)
    a180:	4798      	blx	r3
}
    a182:	bf00      	nop
    a184:	bd80      	pop	{r7, pc}
    a186:	bf00      	nop
    a188:	200030bc 	.word	0x200030bc
    a18c:	0000a0cd 	.word	0x0000a0cd

0000a190 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    a190:	b580      	push	{r7, lr}
    a192:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a194:	4b03      	ldr	r3, [pc, #12]	; (a1a4 <SERCOM4_1_Handler+0x14>)
    a196:	681b      	ldr	r3, [r3, #0]
    a198:	4618      	mov	r0, r3
    a19a:	4b03      	ldr	r3, [pc, #12]	; (a1a8 <SERCOM4_1_Handler+0x18>)
    a19c:	4798      	blx	r3
}
    a19e:	bf00      	nop
    a1a0:	bd80      	pop	{r7, pc}
    a1a2:	bf00      	nop
    a1a4:	200030bc 	.word	0x200030bc
    a1a8:	0000a0cd 	.word	0x0000a0cd

0000a1ac <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    a1ac:	b580      	push	{r7, lr}
    a1ae:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a1b0:	4b03      	ldr	r3, [pc, #12]	; (a1c0 <SERCOM4_2_Handler+0x14>)
    a1b2:	681b      	ldr	r3, [r3, #0]
    a1b4:	4618      	mov	r0, r3
    a1b6:	4b03      	ldr	r3, [pc, #12]	; (a1c4 <SERCOM4_2_Handler+0x18>)
    a1b8:	4798      	blx	r3
}
    a1ba:	bf00      	nop
    a1bc:	bd80      	pop	{r7, pc}
    a1be:	bf00      	nop
    a1c0:	200030bc 	.word	0x200030bc
    a1c4:	0000a0cd 	.word	0x0000a0cd

0000a1c8 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    a1c8:	b580      	push	{r7, lr}
    a1ca:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a1cc:	4b03      	ldr	r3, [pc, #12]	; (a1dc <SERCOM4_3_Handler+0x14>)
    a1ce:	681b      	ldr	r3, [r3, #0]
    a1d0:	4618      	mov	r0, r3
    a1d2:	4b03      	ldr	r3, [pc, #12]	; (a1e0 <SERCOM4_3_Handler+0x18>)
    a1d4:	4798      	blx	r3
}
    a1d6:	bf00      	nop
    a1d8:	bd80      	pop	{r7, pc}
    a1da:	bf00      	nop
    a1dc:	200030bc 	.word	0x200030bc
    a1e0:	0000a0cd 	.word	0x0000a0cd

0000a1e4 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    a1e4:	b580      	push	{r7, lr}
    a1e6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a1e8:	4b03      	ldr	r3, [pc, #12]	; (a1f8 <SERCOM5_0_Handler+0x14>)
    a1ea:	681b      	ldr	r3, [r3, #0]
    a1ec:	4618      	mov	r0, r3
    a1ee:	4b03      	ldr	r3, [pc, #12]	; (a1fc <SERCOM5_0_Handler+0x18>)
    a1f0:	4798      	blx	r3
}
    a1f2:	bf00      	nop
    a1f4:	bd80      	pop	{r7, pc}
    a1f6:	bf00      	nop
    a1f8:	200030c0 	.word	0x200030c0
    a1fc:	00009869 	.word	0x00009869

0000a200 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    a200:	b580      	push	{r7, lr}
    a202:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a204:	4b03      	ldr	r3, [pc, #12]	; (a214 <SERCOM5_1_Handler+0x14>)
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	4618      	mov	r0, r3
    a20a:	4b03      	ldr	r3, [pc, #12]	; (a218 <SERCOM5_1_Handler+0x18>)
    a20c:	4798      	blx	r3
}
    a20e:	bf00      	nop
    a210:	bd80      	pop	{r7, pc}
    a212:	bf00      	nop
    a214:	200030c0 	.word	0x200030c0
    a218:	00009869 	.word	0x00009869

0000a21c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    a21c:	b580      	push	{r7, lr}
    a21e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a220:	4b03      	ldr	r3, [pc, #12]	; (a230 <SERCOM5_2_Handler+0x14>)
    a222:	681b      	ldr	r3, [r3, #0]
    a224:	4618      	mov	r0, r3
    a226:	4b03      	ldr	r3, [pc, #12]	; (a234 <SERCOM5_2_Handler+0x18>)
    a228:	4798      	blx	r3
}
    a22a:	bf00      	nop
    a22c:	bd80      	pop	{r7, pc}
    a22e:	bf00      	nop
    a230:	200030c0 	.word	0x200030c0
    a234:	00009869 	.word	0x00009869

0000a238 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    a238:	b580      	push	{r7, lr}
    a23a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a23c:	4b03      	ldr	r3, [pc, #12]	; (a24c <SERCOM5_3_Handler+0x14>)
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	4618      	mov	r0, r3
    a242:	4b03      	ldr	r3, [pc, #12]	; (a250 <SERCOM5_3_Handler+0x18>)
    a244:	4798      	blx	r3
}
    a246:	bf00      	nop
    a248:	bd80      	pop	{r7, pc}
    a24a:	bf00      	nop
    a24c:	200030c0 	.word	0x200030c0
    a250:	00009869 	.word	0x00009869

0000a254 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    a254:	b580      	push	{r7, lr}
    a256:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a258:	4b03      	ldr	r3, [pc, #12]	; (a268 <SERCOM7_0_Handler+0x14>)
    a25a:	681b      	ldr	r3, [r3, #0]
    a25c:	4618      	mov	r0, r3
    a25e:	4b03      	ldr	r3, [pc, #12]	; (a26c <SERCOM7_0_Handler+0x18>)
    a260:	4798      	blx	r3
}
    a262:	bf00      	nop
    a264:	bd80      	pop	{r7, pc}
    a266:	bf00      	nop
    a268:	200030c4 	.word	0x200030c4
    a26c:	00009869 	.word	0x00009869

0000a270 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    a270:	b580      	push	{r7, lr}
    a272:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a274:	4b03      	ldr	r3, [pc, #12]	; (a284 <SERCOM7_1_Handler+0x14>)
    a276:	681b      	ldr	r3, [r3, #0]
    a278:	4618      	mov	r0, r3
    a27a:	4b03      	ldr	r3, [pc, #12]	; (a288 <SERCOM7_1_Handler+0x18>)
    a27c:	4798      	blx	r3
}
    a27e:	bf00      	nop
    a280:	bd80      	pop	{r7, pc}
    a282:	bf00      	nop
    a284:	200030c4 	.word	0x200030c4
    a288:	00009869 	.word	0x00009869

0000a28c <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a290:	4b03      	ldr	r3, [pc, #12]	; (a2a0 <SERCOM7_2_Handler+0x14>)
    a292:	681b      	ldr	r3, [r3, #0]
    a294:	4618      	mov	r0, r3
    a296:	4b03      	ldr	r3, [pc, #12]	; (a2a4 <SERCOM7_2_Handler+0x18>)
    a298:	4798      	blx	r3
}
    a29a:	bf00      	nop
    a29c:	bd80      	pop	{r7, pc}
    a29e:	bf00      	nop
    a2a0:	200030c4 	.word	0x200030c4
    a2a4:	00009869 	.word	0x00009869

0000a2a8 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    a2a8:	b580      	push	{r7, lr}
    a2aa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a2ac:	4b03      	ldr	r3, [pc, #12]	; (a2bc <SERCOM7_3_Handler+0x14>)
    a2ae:	681b      	ldr	r3, [r3, #0]
    a2b0:	4618      	mov	r0, r3
    a2b2:	4b03      	ldr	r3, [pc, #12]	; (a2c0 <SERCOM7_3_Handler+0x18>)
    a2b4:	4798      	blx	r3
}
    a2b6:	bf00      	nop
    a2b8:	bd80      	pop	{r7, pc}
    a2ba:	bf00      	nop
    a2bc:	200030c4 	.word	0x200030c4
    a2c0:	00009869 	.word	0x00009869

0000a2c4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    a2c4:	b580      	push	{r7, lr}
    a2c6:	b084      	sub	sp, #16
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	6078      	str	r0, [r7, #4]
    a2cc:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    a2ce:	683b      	ldr	r3, [r7, #0]
    a2d0:	4618      	mov	r0, r3
    a2d2:	4b35      	ldr	r3, [pc, #212]	; (a3a8 <_spi_m_sync_init+0xe4>)
    a2d4:	4798      	blx	r3
    a2d6:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d004      	beq.n	a2e8 <_spi_m_sync_init+0x24>
    a2de:	683b      	ldr	r3, [r7, #0]
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d001      	beq.n	a2e8 <_spi_m_sync_init+0x24>
    a2e4:	2301      	movs	r3, #1
    a2e6:	e000      	b.n	a2ea <_spi_m_sync_init+0x26>
    a2e8:	2300      	movs	r3, #0
    a2ea:	f003 0301 	and.w	r3, r3, #1
    a2ee:	b2db      	uxtb	r3, r3
    a2f0:	f640 12ec 	movw	r2, #2540	; 0x9ec
    a2f4:	492d      	ldr	r1, [pc, #180]	; (a3ac <_spi_m_sync_init+0xe8>)
    a2f6:	4618      	mov	r0, r3
    a2f8:	4b2d      	ldr	r3, [pc, #180]	; (a3b0 <_spi_m_sync_init+0xec>)
    a2fa:	4798      	blx	r3

	if (regs == NULL) {
    a2fc:	68fb      	ldr	r3, [r7, #12]
    a2fe:	2b00      	cmp	r3, #0
    a300:	d102      	bne.n	a308 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    a302:	f06f 030c 	mvn.w	r3, #12
    a306:	e04a      	b.n	a39e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a308:	2101      	movs	r1, #1
    a30a:	6838      	ldr	r0, [r7, #0]
    a30c:	4b29      	ldr	r3, [pc, #164]	; (a3b4 <_spi_m_sync_init+0xf0>)
    a30e:	4798      	blx	r3
    a310:	4603      	mov	r3, r0
    a312:	f083 0301 	eor.w	r3, r3, #1
    a316:	b2db      	uxtb	r3, r3
    a318:	2b00      	cmp	r3, #0
    a31a:	d019      	beq.n	a350 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    a31c:	68fb      	ldr	r3, [r7, #12]
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	f003 031c 	and.w	r3, r3, #28
    a324:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    a326:	2102      	movs	r1, #2
    a328:	6838      	ldr	r0, [r7, #0]
    a32a:	4b23      	ldr	r3, [pc, #140]	; (a3b8 <_spi_m_sync_init+0xf4>)
    a32c:	4798      	blx	r3
    a32e:	4603      	mov	r3, r0
    a330:	2b00      	cmp	r3, #0
    a332:	d006      	beq.n	a342 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    a334:	6838      	ldr	r0, [r7, #0]
    a336:	4b21      	ldr	r3, [pc, #132]	; (a3bc <_spi_m_sync_init+0xf8>)
    a338:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    a33a:	2102      	movs	r1, #2
    a33c:	6838      	ldr	r0, [r7, #0]
    a33e:	4b20      	ldr	r3, [pc, #128]	; (a3c0 <_spi_m_sync_init+0xfc>)
    a340:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    a342:	68bb      	ldr	r3, [r7, #8]
    a344:	f043 0301 	orr.w	r3, r3, #1
    a348:	4619      	mov	r1, r3
    a34a:	6838      	ldr	r0, [r7, #0]
    a34c:	4b1d      	ldr	r3, [pc, #116]	; (a3c4 <_spi_m_sync_init+0x100>)
    a34e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    a350:	2101      	movs	r1, #1
    a352:	6838      	ldr	r0, [r7, #0]
    a354:	4b1a      	ldr	r3, [pc, #104]	; (a3c0 <_spi_m_sync_init+0xfc>)
    a356:	4798      	blx	r3

	dev->prvt = hw;
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	683a      	ldr	r2, [r7, #0]
    a35c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    a35e:	68fb      	ldr	r3, [r7, #12]
    a360:	681b      	ldr	r3, [r3, #0]
    a362:	f003 031c 	and.w	r3, r3, #28
    a366:	2b08      	cmp	r3, #8
    a368:	d104      	bne.n	a374 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    a36a:	68f9      	ldr	r1, [r7, #12]
    a36c:	6838      	ldr	r0, [r7, #0]
    a36e:	4b16      	ldr	r3, [pc, #88]	; (a3c8 <_spi_m_sync_init+0x104>)
    a370:	4798      	blx	r3
    a372:	e003      	b.n	a37c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    a374:	68f9      	ldr	r1, [r7, #12]
    a376:	6838      	ldr	r0, [r7, #0]
    a378:	4b14      	ldr	r3, [pc, #80]	; (a3cc <_spi_m_sync_init+0x108>)
    a37a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    a37c:	68fb      	ldr	r3, [r7, #12]
    a37e:	685b      	ldr	r3, [r3, #4]
    a380:	f003 0307 	and.w	r3, r3, #7
    a384:	2b00      	cmp	r3, #0
    a386:	d101      	bne.n	a38c <_spi_m_sync_init+0xc8>
    a388:	2201      	movs	r2, #1
    a38a:	e000      	b.n	a38e <_spi_m_sync_init+0xca>
    a38c:	2202      	movs	r2, #2
    a38e:	687b      	ldr	r3, [r7, #4]
    a390:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    a392:	68fb      	ldr	r3, [r7, #12]
    a394:	89db      	ldrh	r3, [r3, #14]
    a396:	b29a      	uxth	r2, r3
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    a39c:	2300      	movs	r3, #0
}
    a39e:	4618      	mov	r0, r3
    a3a0:	3710      	adds	r7, #16
    a3a2:	46bd      	mov	sp, r7
    a3a4:	bd80      	pop	{r7, pc}
    a3a6:	bf00      	nop
    a3a8:	0000a071 	.word	0x0000a071
    a3ac:	00017300 	.word	0x00017300
    a3b0:	00006251 	.word	0x00006251
    a3b4:	00008df1 	.word	0x00008df1
    a3b8:	0000918d 	.word	0x0000918d
    a3bc:	00009165 	.word	0x00009165
    a3c0:	00008dcd 	.word	0x00008dcd
    a3c4:	000091bd 	.word	0x000091bd
    a3c8:	00009fc5 	.word	0x00009fc5
    a3cc:	00009f31 	.word	0x00009f31

0000a3d0 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    a3d0:	b580      	push	{r7, lr}
    a3d2:	b086      	sub	sp, #24
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	6078      	str	r0, [r7, #4]
    a3d8:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    a3da:	687b      	ldr	r3, [r7, #4]
    a3dc:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    a3de:	6839      	ldr	r1, [r7, #0]
    a3e0:	6878      	ldr	r0, [r7, #4]
    a3e2:	4b1a      	ldr	r3, [pc, #104]	; (a44c <_spi_m_async_init+0x7c>)
    a3e4:	4798      	blx	r3
    a3e6:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    a3e8:	68bb      	ldr	r3, [r7, #8]
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	da01      	bge.n	a3f2 <_spi_m_async_init+0x22>
		return rc;
    a3ee:	68bb      	ldr	r3, [r7, #8]
    a3f0:	e028      	b.n	a444 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    a3f2:	6879      	ldr	r1, [r7, #4]
    a3f4:	6838      	ldr	r0, [r7, #0]
    a3f6:	4b16      	ldr	r3, [pc, #88]	; (a450 <_spi_m_async_init+0x80>)
    a3f8:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    a3fa:	68fb      	ldr	r3, [r7, #12]
    a3fc:	2200      	movs	r2, #0
    a3fe:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    a400:	68fb      	ldr	r3, [r7, #12]
    a402:	2200      	movs	r2, #0
    a404:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    a406:	68fb      	ldr	r3, [r7, #12]
    a408:	2200      	movs	r2, #0
    a40a:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    a40c:	6838      	ldr	r0, [r7, #0]
    a40e:	4b11      	ldr	r3, [pc, #68]	; (a454 <_spi_m_async_init+0x84>)
    a410:	4798      	blx	r3
    a412:	4603      	mov	r3, r0
    a414:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a416:	2300      	movs	r3, #0
    a418:	613b      	str	r3, [r7, #16]
    a41a:	e00f      	b.n	a43c <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    a41c:	7dfb      	ldrb	r3, [r7, #23]
    a41e:	b21b      	sxth	r3, r3
    a420:	4618      	mov	r0, r3
    a422:	4b0d      	ldr	r3, [pc, #52]	; (a458 <_spi_m_async_init+0x88>)
    a424:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    a426:	7dfb      	ldrb	r3, [r7, #23]
    a428:	b21b      	sxth	r3, r3
    a42a:	4618      	mov	r0, r3
    a42c:	4b0b      	ldr	r3, [pc, #44]	; (a45c <_spi_m_async_init+0x8c>)
    a42e:	4798      	blx	r3
		irq++;
    a430:	7dfb      	ldrb	r3, [r7, #23]
    a432:	3301      	adds	r3, #1
    a434:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a436:	693b      	ldr	r3, [r7, #16]
    a438:	3301      	adds	r3, #1
    a43a:	613b      	str	r3, [r7, #16]
    a43c:	693b      	ldr	r3, [r7, #16]
    a43e:	2b03      	cmp	r3, #3
    a440:	d9ec      	bls.n	a41c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    a442:	2300      	movs	r3, #0
}
    a444:	4618      	mov	r0, r3
    a446:	3718      	adds	r7, #24
    a448:	46bd      	mov	sp, r7
    a44a:	bd80      	pop	{r7, pc}
    a44c:	0000a2c5 	.word	0x0000a2c5
    a450:	00009561 	.word	0x00009561
    a454:	000099ad 	.word	0x000099ad
    a458:	00008d01 	.word	0x00008d01
    a45c:	00008d45 	.word	0x00008d45

0000a460 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    a460:	b580      	push	{r7, lr}
    a462:	b082      	sub	sp, #8
    a464:	af00      	add	r7, sp, #0
    a466:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a468:	687b      	ldr	r3, [r7, #4]
    a46a:	2b00      	cmp	r3, #0
    a46c:	d005      	beq.n	a47a <_spi_m_sync_enable+0x1a>
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	681b      	ldr	r3, [r3, #0]
    a472:	2b00      	cmp	r3, #0
    a474:	d001      	beq.n	a47a <_spi_m_sync_enable+0x1a>
    a476:	2301      	movs	r3, #1
    a478:	e000      	b.n	a47c <_spi_m_sync_enable+0x1c>
    a47a:	2300      	movs	r3, #0
    a47c:	f003 0301 	and.w	r3, r3, #1
    a480:	b2db      	uxtb	r3, r3
    a482:	f640 224b 	movw	r2, #2635	; 0xa4b
    a486:	4907      	ldr	r1, [pc, #28]	; (a4a4 <_spi_m_sync_enable+0x44>)
    a488:	4618      	mov	r0, r3
    a48a:	4b07      	ldr	r3, [pc, #28]	; (a4a8 <_spi_m_sync_enable+0x48>)
    a48c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    a48e:	687b      	ldr	r3, [r7, #4]
    a490:	681b      	ldr	r3, [r3, #0]
    a492:	4618      	mov	r0, r3
    a494:	4b05      	ldr	r3, [pc, #20]	; (a4ac <_spi_m_sync_enable+0x4c>)
    a496:	4798      	blx	r3
    a498:	4603      	mov	r3, r0
}
    a49a:	4618      	mov	r0, r3
    a49c:	3708      	adds	r7, #8
    a49e:	46bd      	mov	sp, r7
    a4a0:	bd80      	pop	{r7, pc}
    a4a2:	bf00      	nop
    a4a4:	00017300 	.word	0x00017300
    a4a8:	00006251 	.word	0x00006251
    a4ac:	00009ec9 	.word	0x00009ec9

0000a4b0 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    a4b0:	b580      	push	{r7, lr}
    a4b2:	b082      	sub	sp, #8
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d005      	beq.n	a4ca <_spi_m_sync_disable+0x1a>
    a4be:	687b      	ldr	r3, [r7, #4]
    a4c0:	681b      	ldr	r3, [r3, #0]
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d001      	beq.n	a4ca <_spi_m_sync_disable+0x1a>
    a4c6:	2301      	movs	r3, #1
    a4c8:	e000      	b.n	a4cc <_spi_m_sync_disable+0x1c>
    a4ca:	2300      	movs	r3, #0
    a4cc:	f003 0301 	and.w	r3, r3, #1
    a4d0:	b2db      	uxtb	r3, r3
    a4d2:	f640 2267 	movw	r2, #2663	; 0xa67
    a4d6:	4907      	ldr	r1, [pc, #28]	; (a4f4 <_spi_m_sync_disable+0x44>)
    a4d8:	4618      	mov	r0, r3
    a4da:	4b07      	ldr	r3, [pc, #28]	; (a4f8 <_spi_m_sync_disable+0x48>)
    a4dc:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    a4de:	687b      	ldr	r3, [r7, #4]
    a4e0:	681b      	ldr	r3, [r3, #0]
    a4e2:	4618      	mov	r0, r3
    a4e4:	4b05      	ldr	r3, [pc, #20]	; (a4fc <_spi_m_sync_disable+0x4c>)
    a4e6:	4798      	blx	r3
    a4e8:	4603      	mov	r3, r0
}
    a4ea:	4618      	mov	r0, r3
    a4ec:	3708      	adds	r7, #8
    a4ee:	46bd      	mov	sp, r7
    a4f0:	bd80      	pop	{r7, pc}
    a4f2:	bf00      	nop
    a4f4:	00017300 	.word	0x00017300
    a4f8:	00006251 	.word	0x00006251
    a4fc:	00009efd 	.word	0x00009efd

0000a500 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    a500:	b580      	push	{r7, lr}
    a502:	b082      	sub	sp, #8
    a504:	af00      	add	r7, sp, #0
    a506:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    a508:	bf00      	nop
    a50a:	2103      	movs	r1, #3
    a50c:	6878      	ldr	r0, [r7, #4]
    a50e:	4b06      	ldr	r3, [pc, #24]	; (a528 <_spi_wait_bus_idle+0x28>)
    a510:	4798      	blx	r3
    a512:	4603      	mov	r3, r0
    a514:	2b00      	cmp	r3, #0
    a516:	d0f8      	beq.n	a50a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    a518:	2103      	movs	r1, #3
    a51a:	6878      	ldr	r0, [r7, #4]
    a51c:	4b03      	ldr	r3, [pc, #12]	; (a52c <_spi_wait_bus_idle+0x2c>)
    a51e:	4798      	blx	r3
}
    a520:	bf00      	nop
    a522:	3708      	adds	r7, #8
    a524:	46bd      	mov	sp, r7
    a526:	bd80      	pop	{r7, pc}
    a528:	00008e85 	.word	0x00008e85
    a52c:	00008ec7 	.word	0x00008ec7

0000a530 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    a530:	b580      	push	{r7, lr}
    a532:	b086      	sub	sp, #24
    a534:	af00      	add	r7, sp, #0
    a536:	60f8      	str	r0, [r7, #12]
    a538:	60b9      	str	r1, [r7, #8]
    a53a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    a53c:	68bb      	ldr	r3, [r7, #8]
    a53e:	f003 0304 	and.w	r3, r3, #4
    a542:	2b00      	cmp	r3, #0
    a544:	d101      	bne.n	a54a <_spi_rx_check_and_receive+0x1a>
		return false;
    a546:	2300      	movs	r3, #0
    a548:	e022      	b.n	a590 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    a54a:	68f8      	ldr	r0, [r7, #12]
    a54c:	4b12      	ldr	r3, [pc, #72]	; (a598 <_spi_rx_check_and_receive+0x68>)
    a54e:	4798      	blx	r3
    a550:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	685b      	ldr	r3, [r3, #4]
    a556:	2b00      	cmp	r3, #0
    a558:	d014      	beq.n	a584 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	685b      	ldr	r3, [r3, #4]
    a55e:	1c59      	adds	r1, r3, #1
    a560:	687a      	ldr	r2, [r7, #4]
    a562:	6051      	str	r1, [r2, #4]
    a564:	697a      	ldr	r2, [r7, #20]
    a566:	b2d2      	uxtb	r2, r2
    a568:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	7c1b      	ldrb	r3, [r3, #16]
    a56e:	2b01      	cmp	r3, #1
    a570:	d908      	bls.n	a584 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    a572:	687b      	ldr	r3, [r7, #4]
    a574:	685b      	ldr	r3, [r3, #4]
    a576:	1c59      	adds	r1, r3, #1
    a578:	687a      	ldr	r2, [r7, #4]
    a57a:	6051      	str	r1, [r2, #4]
    a57c:	697a      	ldr	r2, [r7, #20]
    a57e:	0a12      	lsrs	r2, r2, #8
    a580:	b2d2      	uxtb	r2, r2
    a582:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	68db      	ldr	r3, [r3, #12]
    a588:	1c5a      	adds	r2, r3, #1
    a58a:	687b      	ldr	r3, [r7, #4]
    a58c:	60da      	str	r2, [r3, #12]

	return true;
    a58e:	2301      	movs	r3, #1
}
    a590:	4618      	mov	r0, r3
    a592:	3718      	adds	r7, #24
    a594:	46bd      	mov	sp, r7
    a596:	bd80      	pop	{r7, pc}
    a598:	00009435 	.word	0x00009435

0000a59c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    a59c:	b580      	push	{r7, lr}
    a59e:	b086      	sub	sp, #24
    a5a0:	af00      	add	r7, sp, #0
    a5a2:	60f8      	str	r0, [r7, #12]
    a5a4:	60b9      	str	r1, [r7, #8]
    a5a6:	607a      	str	r2, [r7, #4]
    a5a8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a5aa:	68bb      	ldr	r3, [r7, #8]
    a5ac:	f003 0301 	and.w	r3, r3, #1
    a5b0:	2b00      	cmp	r3, #0
    a5b2:	d028      	beq.n	a606 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    a5b4:	687b      	ldr	r3, [r7, #4]
    a5b6:	681b      	ldr	r3, [r3, #0]
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	d018      	beq.n	a5ee <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	681b      	ldr	r3, [r3, #0]
    a5c0:	1c59      	adds	r1, r3, #1
    a5c2:	687a      	ldr	r2, [r7, #4]
    a5c4:	6011      	str	r1, [r2, #0]
    a5c6:	781b      	ldrb	r3, [r3, #0]
    a5c8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    a5ca:	687b      	ldr	r3, [r7, #4]
    a5cc:	7c1b      	ldrb	r3, [r3, #16]
    a5ce:	2b01      	cmp	r3, #1
    a5d0:	d90f      	bls.n	a5f2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    a5d2:	687b      	ldr	r3, [r7, #4]
    a5d4:	681b      	ldr	r3, [r3, #0]
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	021b      	lsls	r3, r3, #8
    a5da:	461a      	mov	r2, r3
    a5dc:	697b      	ldr	r3, [r7, #20]
    a5de:	4313      	orrs	r3, r2
    a5e0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    a5e2:	687b      	ldr	r3, [r7, #4]
    a5e4:	681b      	ldr	r3, [r3, #0]
    a5e6:	1c5a      	adds	r2, r3, #1
    a5e8:	687b      	ldr	r3, [r7, #4]
    a5ea:	601a      	str	r2, [r3, #0]
    a5ec:	e001      	b.n	a5f2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    a5ee:	887b      	ldrh	r3, [r7, #2]
    a5f0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    a5f2:	687b      	ldr	r3, [r7, #4]
    a5f4:	689b      	ldr	r3, [r3, #8]
    a5f6:	1c5a      	adds	r2, r3, #1
    a5f8:	687b      	ldr	r3, [r7, #4]
    a5fa:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    a5fc:	6979      	ldr	r1, [r7, #20]
    a5fe:	68f8      	ldr	r0, [r7, #12]
    a600:	4b03      	ldr	r3, [pc, #12]	; (a610 <_spi_tx_check_and_send+0x74>)
    a602:	4798      	blx	r3
    a604:	e000      	b.n	a608 <_spi_tx_check_and_send+0x6c>
		return;
    a606:	bf00      	nop
}
    a608:	3718      	adds	r7, #24
    a60a:	46bd      	mov	sp, r7
    a60c:	bd80      	pop	{r7, pc}
    a60e:	bf00      	nop
    a610:	00009419 	.word	0x00009419

0000a614 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    a614:	b580      	push	{r7, lr}
    a616:	b082      	sub	sp, #8
    a618:	af00      	add	r7, sp, #0
    a61a:	6078      	str	r0, [r7, #4]
    a61c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    a61e:	687b      	ldr	r3, [r7, #4]
    a620:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a624:	2b00      	cmp	r3, #0
    a626:	d00b      	beq.n	a640 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    a628:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a62c:	6838      	ldr	r0, [r7, #0]
    a62e:	4b07      	ldr	r3, [pc, #28]	; (a64c <_spi_err_check+0x38>)
    a630:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a632:	2180      	movs	r1, #128	; 0x80
    a634:	6838      	ldr	r0, [r7, #0]
    a636:	4b06      	ldr	r3, [pc, #24]	; (a650 <_spi_err_check+0x3c>)
    a638:	4798      	blx	r3
		return ERR_OVERFLOW;
    a63a:	f06f 0312 	mvn.w	r3, #18
    a63e:	e000      	b.n	a642 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    a640:	2300      	movs	r3, #0
}
    a642:	4618      	mov	r0, r3
    a644:	3708      	adds	r7, #8
    a646:	46bd      	mov	sp, r7
    a648:	bd80      	pop	{r7, pc}
    a64a:	bf00      	nop
    a64c:	0000946d 	.word	0x0000946d
    a650:	00008ec7 	.word	0x00008ec7

0000a654 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    a654:	b590      	push	{r4, r7, lr}
    a656:	b08b      	sub	sp, #44	; 0x2c
    a658:	af00      	add	r7, sp, #0
    a65a:	6078      	str	r0, [r7, #4]
    a65c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    a65e:	687b      	ldr	r3, [r7, #4]
    a660:	681b      	ldr	r3, [r3, #0]
    a662:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    a664:	2300      	movs	r3, #0
    a666:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    a668:	683b      	ldr	r3, [r7, #0]
    a66a:	681b      	ldr	r3, [r3, #0]
    a66c:	60bb      	str	r3, [r7, #8]
    a66e:	683b      	ldr	r3, [r7, #0]
    a670:	685b      	ldr	r3, [r3, #4]
    a672:	60fb      	str	r3, [r7, #12]
    a674:	2300      	movs	r3, #0
    a676:	613b      	str	r3, [r7, #16]
    a678:	2300      	movs	r3, #0
    a67a:	617b      	str	r3, [r7, #20]
    a67c:	687b      	ldr	r3, [r7, #4]
    a67e:	791b      	ldrb	r3, [r3, #4]
    a680:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    a682:	687b      	ldr	r3, [r7, #4]
    a684:	2b00      	cmp	r3, #0
    a686:	d004      	beq.n	a692 <_spi_m_sync_trans+0x3e>
    a688:	6a3b      	ldr	r3, [r7, #32]
    a68a:	2b00      	cmp	r3, #0
    a68c:	d001      	beq.n	a692 <_spi_m_sync_trans+0x3e>
    a68e:	2301      	movs	r3, #1
    a690:	e000      	b.n	a694 <_spi_m_sync_trans+0x40>
    a692:	2300      	movs	r3, #0
    a694:	f003 0301 	and.w	r3, r3, #1
    a698:	b2db      	uxtb	r3, r3
    a69a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    a69e:	492b      	ldr	r1, [pc, #172]	; (a74c <_spi_m_sync_trans+0xf8>)
    a6a0:	4618      	mov	r0, r3
    a6a2:	4b2b      	ldr	r3, [pc, #172]	; (a750 <_spi_m_sync_trans+0xfc>)
    a6a4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    a6a6:	2107      	movs	r1, #7
    a6a8:	6a38      	ldr	r0, [r7, #32]
    a6aa:	4b2a      	ldr	r3, [pc, #168]	; (a754 <_spi_m_sync_trans+0x100>)
    a6ac:	4798      	blx	r3
    a6ae:	4603      	mov	r3, r0
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d002      	beq.n	a6ba <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    a6b4:	f06f 0303 	mvn.w	r3, #3
    a6b8:	e043      	b.n	a742 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    a6ba:	6a38      	ldr	r0, [r7, #32]
    a6bc:	4b26      	ldr	r3, [pc, #152]	; (a758 <_spi_m_sync_trans+0x104>)
    a6be:	4798      	blx	r3
    a6c0:	4603      	mov	r3, r0
    a6c2:	f083 0301 	eor.w	r3, r3, #1
    a6c6:	b2db      	uxtb	r3, r3
    a6c8:	2b00      	cmp	r3, #0
    a6ca:	d002      	beq.n	a6d2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    a6cc:	f06f 0313 	mvn.w	r3, #19
    a6d0:	e037      	b.n	a742 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    a6d2:	6a38      	ldr	r0, [r7, #32]
    a6d4:	4b21      	ldr	r3, [pc, #132]	; (a75c <_spi_m_sync_trans+0x108>)
    a6d6:	4798      	blx	r3
    a6d8:	4603      	mov	r3, r0
    a6da:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    a6dc:	f107 0308 	add.w	r3, r7, #8
    a6e0:	461a      	mov	r2, r3
    a6e2:	69f9      	ldr	r1, [r7, #28]
    a6e4:	6a38      	ldr	r0, [r7, #32]
    a6e6:	4b1e      	ldr	r3, [pc, #120]	; (a760 <_spi_m_sync_trans+0x10c>)
    a6e8:	4798      	blx	r3
    a6ea:	4603      	mov	r3, r0
    a6ec:	f083 0301 	eor.w	r3, r3, #1
    a6f0:	b2db      	uxtb	r3, r3
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d00b      	beq.n	a70e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    a6f6:	697a      	ldr	r2, [r7, #20]
    a6f8:	693b      	ldr	r3, [r7, #16]
    a6fa:	429a      	cmp	r2, r3
    a6fc:	d307      	bcc.n	a70e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	88db      	ldrh	r3, [r3, #6]
    a702:	f107 0208 	add.w	r2, r7, #8
    a706:	69f9      	ldr	r1, [r7, #28]
    a708:	6a38      	ldr	r0, [r7, #32]
    a70a:	4c16      	ldr	r4, [pc, #88]	; (a764 <_spi_m_sync_trans+0x110>)
    a70c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    a70e:	6a39      	ldr	r1, [r7, #32]
    a710:	69f8      	ldr	r0, [r7, #28]
    a712:	4b15      	ldr	r3, [pc, #84]	; (a768 <_spi_m_sync_trans+0x114>)
    a714:	4798      	blx	r3
    a716:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a71a:	2b00      	cmp	r3, #0
    a71c:	db0c      	blt.n	a738 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    a71e:	693a      	ldr	r2, [r7, #16]
    a720:	683b      	ldr	r3, [r7, #0]
    a722:	689b      	ldr	r3, [r3, #8]
    a724:	429a      	cmp	r2, r3
    a726:	d3d4      	bcc.n	a6d2 <_spi_m_sync_trans+0x7e>
    a728:	697a      	ldr	r2, [r7, #20]
    a72a:	683b      	ldr	r3, [r7, #0]
    a72c:	689b      	ldr	r3, [r3, #8]
    a72e:	429a      	cmp	r2, r3
    a730:	d3cf      	bcc.n	a6d2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    a732:	693b      	ldr	r3, [r7, #16]
    a734:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    a736:	e000      	b.n	a73a <_spi_m_sync_trans+0xe6>
			break;
    a738:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    a73a:	6a38      	ldr	r0, [r7, #32]
    a73c:	4b0b      	ldr	r3, [pc, #44]	; (a76c <_spi_m_sync_trans+0x118>)
    a73e:	4798      	blx	r3

	return rc;
    a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a742:	4618      	mov	r0, r3
    a744:	372c      	adds	r7, #44	; 0x2c
    a746:	46bd      	mov	sp, r7
    a748:	bd90      	pop	{r4, r7, pc}
    a74a:	bf00      	nop
    a74c:	00017300 	.word	0x00017300
    a750:	00006251 	.word	0x00006251
    a754:	00008df1 	.word	0x00008df1
    a758:	0000912d 	.word	0x0000912d
    a75c:	00008ead 	.word	0x00008ead
    a760:	0000a531 	.word	0x0000a531
    a764:	0000a59d 	.word	0x0000a59d
    a768:	0000a615 	.word	0x0000a615
    a76c:	0000a501 	.word	0x0000a501

0000a770 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    a770:	b580      	push	{r7, lr}
    a772:	b084      	sub	sp, #16
    a774:	af00      	add	r7, sp, #0
    a776:	6078      	str	r0, [r7, #4]
    a778:	460b      	mov	r3, r1
    a77a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	2b00      	cmp	r3, #0
    a786:	d004      	beq.n	a792 <_spi_m_async_enable_tx+0x22>
    a788:	68fb      	ldr	r3, [r7, #12]
    a78a:	2b00      	cmp	r3, #0
    a78c:	d001      	beq.n	a792 <_spi_m_async_enable_tx+0x22>
    a78e:	2301      	movs	r3, #1
    a790:	e000      	b.n	a794 <_spi_m_async_enable_tx+0x24>
    a792:	2300      	movs	r3, #0
    a794:	f003 0301 	and.w	r3, r3, #1
    a798:	b2db      	uxtb	r3, r3
    a79a:	f640 327c 	movw	r2, #2940	; 0xb7c
    a79e:	4909      	ldr	r1, [pc, #36]	; (a7c4 <_spi_m_async_enable_tx+0x54>)
    a7a0:	4618      	mov	r0, r3
    a7a2:	4b09      	ldr	r3, [pc, #36]	; (a7c8 <_spi_m_async_enable_tx+0x58>)
    a7a4:	4798      	blx	r3

	if (state) {
    a7a6:	78fb      	ldrb	r3, [r7, #3]
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d003      	beq.n	a7b4 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    a7ac:	68f8      	ldr	r0, [r7, #12]
    a7ae:	4b07      	ldr	r3, [pc, #28]	; (a7cc <_spi_m_async_enable_tx+0x5c>)
    a7b0:	4798      	blx	r3
    a7b2:	e002      	b.n	a7ba <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    a7b4:	68f8      	ldr	r0, [r7, #12]
    a7b6:	4b06      	ldr	r3, [pc, #24]	; (a7d0 <_spi_m_async_enable_tx+0x60>)
    a7b8:	4798      	blx	r3
	}

	return ERR_NONE;
    a7ba:	2300      	movs	r3, #0
}
    a7bc:	4618      	mov	r0, r3
    a7be:	3710      	adds	r7, #16
    a7c0:	46bd      	mov	sp, r7
    a7c2:	bd80      	pop	{r7, pc}
    a7c4:	00017300 	.word	0x00017300
    a7c8:	00006251 	.word	0x00006251
    a7cc:	00008f7b 	.word	0x00008f7b
    a7d0:	00008f95 	.word	0x00008f95

0000a7d4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b084      	sub	sp, #16
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
    a7dc:	460b      	mov	r3, r1
    a7de:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	681b      	ldr	r3, [r3, #0]
    a7e4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	bf14      	ite	ne
    a7ec:	2301      	movne	r3, #1
    a7ee:	2300      	moveq	r3, #0
    a7f0:	b2db      	uxtb	r3, r3
    a7f2:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    a7f6:	490f      	ldr	r1, [pc, #60]	; (a834 <_spi_m_async_enable_rx+0x60>)
    a7f8:	4618      	mov	r0, r3
    a7fa:	4b0f      	ldr	r3, [pc, #60]	; (a838 <_spi_m_async_enable_rx+0x64>)
    a7fc:	4798      	blx	r3
	ASSERT(hw);
    a7fe:	68fb      	ldr	r3, [r7, #12]
    a800:	2b00      	cmp	r3, #0
    a802:	bf14      	ite	ne
    a804:	2301      	movne	r3, #1
    a806:	2300      	moveq	r3, #0
    a808:	b2db      	uxtb	r3, r3
    a80a:	f640 3291 	movw	r2, #2961	; 0xb91
    a80e:	4909      	ldr	r1, [pc, #36]	; (a834 <_spi_m_async_enable_rx+0x60>)
    a810:	4618      	mov	r0, r3
    a812:	4b09      	ldr	r3, [pc, #36]	; (a838 <_spi_m_async_enable_rx+0x64>)
    a814:	4798      	blx	r3

	if (state) {
    a816:	78fb      	ldrb	r3, [r7, #3]
    a818:	2b00      	cmp	r3, #0
    a81a:	d003      	beq.n	a824 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    a81c:	68f8      	ldr	r0, [r7, #12]
    a81e:	4b07      	ldr	r3, [pc, #28]	; (a83c <_spi_m_async_enable_rx+0x68>)
    a820:	4798      	blx	r3
    a822:	e002      	b.n	a82a <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    a824:	68f8      	ldr	r0, [r7, #12]
    a826:	4b06      	ldr	r3, [pc, #24]	; (a840 <_spi_m_async_enable_rx+0x6c>)
    a828:	4798      	blx	r3
	}

	return ERR_NONE;
    a82a:	2300      	movs	r3, #0
}
    a82c:	4618      	mov	r0, r3
    a82e:	3710      	adds	r7, #16
    a830:	46bd      	mov	sp, r7
    a832:	bd80      	pop	{r7, pc}
    a834:	00017300 	.word	0x00017300
    a838:	00006251 	.word	0x00006251
    a83c:	00008fe3 	.word	0x00008fe3
    a840:	00008ffd 	.word	0x00008ffd

0000a844 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    a844:	b580      	push	{r7, lr}
    a846:	b082      	sub	sp, #8
    a848:	af00      	add	r7, sp, #0
    a84a:	6078      	str	r0, [r7, #4]
    a84c:	460b      	mov	r3, r1
    a84e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	2b00      	cmp	r3, #0
    a854:	d005      	beq.n	a862 <_spi_m_async_enable_tx_complete+0x1e>
    a856:	687b      	ldr	r3, [r7, #4]
    a858:	681b      	ldr	r3, [r3, #0]
    a85a:	2b00      	cmp	r3, #0
    a85c:	d001      	beq.n	a862 <_spi_m_async_enable_tx_complete+0x1e>
    a85e:	2301      	movs	r3, #1
    a860:	e000      	b.n	a864 <_spi_m_async_enable_tx_complete+0x20>
    a862:	2300      	movs	r3, #0
    a864:	f003 0301 	and.w	r3, r3, #1
    a868:	b2db      	uxtb	r3, r3
    a86a:	f640 32a3 	movw	r2, #2979	; 0xba3
    a86e:	490b      	ldr	r1, [pc, #44]	; (a89c <_spi_m_async_enable_tx_complete+0x58>)
    a870:	4618      	mov	r0, r3
    a872:	4b0b      	ldr	r3, [pc, #44]	; (a8a0 <_spi_m_async_enable_tx_complete+0x5c>)
    a874:	4798      	blx	r3

	if (state) {
    a876:	78fb      	ldrb	r3, [r7, #3]
    a878:	2b00      	cmp	r3, #0
    a87a:	d005      	beq.n	a888 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	681b      	ldr	r3, [r3, #0]
    a880:	4618      	mov	r0, r3
    a882:	4b08      	ldr	r3, [pc, #32]	; (a8a4 <_spi_m_async_enable_tx_complete+0x60>)
    a884:	4798      	blx	r3
    a886:	e004      	b.n	a892 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    a888:	687b      	ldr	r3, [r7, #4]
    a88a:	681b      	ldr	r3, [r3, #0]
    a88c:	4618      	mov	r0, r3
    a88e:	4b06      	ldr	r3, [pc, #24]	; (a8a8 <_spi_m_async_enable_tx_complete+0x64>)
    a890:	4798      	blx	r3
	}

	return ERR_NONE;
    a892:	2300      	movs	r3, #0
}
    a894:	4618      	mov	r0, r3
    a896:	3708      	adds	r7, #8
    a898:	46bd      	mov	sp, r7
    a89a:	bd80      	pop	{r7, pc}
    a89c:	00017300 	.word	0x00017300
    a8a0:	00006251 	.word	0x00006251
    a8a4:	00008faf 	.word	0x00008faf
    a8a8:	00008fc9 	.word	0x00008fc9

0000a8ac <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b082      	sub	sp, #8
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	6078      	str	r0, [r7, #4]
    a8b4:	460b      	mov	r3, r1
    a8b6:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d005      	beq.n	a8ca <_spi_m_async_write_one+0x1e>
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	681b      	ldr	r3, [r3, #0]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d001      	beq.n	a8ca <_spi_m_async_write_one+0x1e>
    a8c6:	2301      	movs	r3, #1
    a8c8:	e000      	b.n	a8cc <_spi_m_async_write_one+0x20>
    a8ca:	2300      	movs	r3, #0
    a8cc:	f003 0301 	and.w	r3, r3, #1
    a8d0:	b2db      	uxtb	r3, r3
    a8d2:	f640 32b5 	movw	r2, #2997	; 0xbb5
    a8d6:	4908      	ldr	r1, [pc, #32]	; (a8f8 <_spi_m_async_write_one+0x4c>)
    a8d8:	4618      	mov	r0, r3
    a8da:	4b08      	ldr	r3, [pc, #32]	; (a8fc <_spi_m_async_write_one+0x50>)
    a8dc:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    a8de:	687b      	ldr	r3, [r7, #4]
    a8e0:	681b      	ldr	r3, [r3, #0]
    a8e2:	887a      	ldrh	r2, [r7, #2]
    a8e4:	4611      	mov	r1, r2
    a8e6:	4618      	mov	r0, r3
    a8e8:	4b05      	ldr	r3, [pc, #20]	; (a900 <_spi_m_async_write_one+0x54>)
    a8ea:	4798      	blx	r3

	return ERR_NONE;
    a8ec:	2300      	movs	r3, #0
}
    a8ee:	4618      	mov	r0, r3
    a8f0:	3708      	adds	r7, #8
    a8f2:	46bd      	mov	sp, r7
    a8f4:	bd80      	pop	{r7, pc}
    a8f6:	bf00      	nop
    a8f8:	00017300 	.word	0x00017300
    a8fc:	00006251 	.word	0x00006251
    a900:	00009419 	.word	0x00009419

0000a904 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    a904:	b580      	push	{r7, lr}
    a906:	b082      	sub	sp, #8
    a908:	af00      	add	r7, sp, #0
    a90a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a90c:	687b      	ldr	r3, [r7, #4]
    a90e:	2b00      	cmp	r3, #0
    a910:	d005      	beq.n	a91e <_spi_m_async_read_one+0x1a>
    a912:	687b      	ldr	r3, [r7, #4]
    a914:	681b      	ldr	r3, [r3, #0]
    a916:	2b00      	cmp	r3, #0
    a918:	d001      	beq.n	a91e <_spi_m_async_read_one+0x1a>
    a91a:	2301      	movs	r3, #1
    a91c:	e000      	b.n	a920 <_spi_m_async_read_one+0x1c>
    a91e:	2300      	movs	r3, #0
    a920:	f003 0301 	and.w	r3, r3, #1
    a924:	b2db      	uxtb	r3, r3
    a926:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    a92a:	4907      	ldr	r1, [pc, #28]	; (a948 <_spi_m_async_read_one+0x44>)
    a92c:	4618      	mov	r0, r3
    a92e:	4b07      	ldr	r3, [pc, #28]	; (a94c <_spi_m_async_read_one+0x48>)
    a930:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    a932:	687b      	ldr	r3, [r7, #4]
    a934:	681b      	ldr	r3, [r3, #0]
    a936:	4618      	mov	r0, r3
    a938:	4b05      	ldr	r3, [pc, #20]	; (a950 <_spi_m_async_read_one+0x4c>)
    a93a:	4798      	blx	r3
    a93c:	4603      	mov	r3, r0
    a93e:	b29b      	uxth	r3, r3
}
    a940:	4618      	mov	r0, r3
    a942:	3708      	adds	r7, #8
    a944:	46bd      	mov	sp, r7
    a946:	bd80      	pop	{r7, pc}
    a948:	00017300 	.word	0x00017300
    a94c:	00006251 	.word	0x00006251
    a950:	00009435 	.word	0x00009435

0000a954 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    a954:	b580      	push	{r7, lr}
    a956:	b086      	sub	sp, #24
    a958:	af00      	add	r7, sp, #0
    a95a:	60f8      	str	r0, [r7, #12]
    a95c:	460b      	mov	r3, r1
    a95e:	607a      	str	r2, [r7, #4]
    a960:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    a962:	68fb      	ldr	r3, [r7, #12]
    a964:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    a966:	68fb      	ldr	r3, [r7, #12]
    a968:	2b00      	cmp	r3, #0
    a96a:	d004      	beq.n	a976 <_spi_m_async_register_callback+0x22>
    a96c:	7afb      	ldrb	r3, [r7, #11]
    a96e:	2b03      	cmp	r3, #3
    a970:	d801      	bhi.n	a976 <_spi_m_async_register_callback+0x22>
    a972:	2301      	movs	r3, #1
    a974:	e000      	b.n	a978 <_spi_m_async_register_callback+0x24>
    a976:	2300      	movs	r3, #0
    a978:	f003 0301 	and.w	r3, r3, #1
    a97c:	b2db      	uxtb	r3, r3
    a97e:	f640 32e9 	movw	r2, #3049	; 0xbe9
    a982:	4909      	ldr	r1, [pc, #36]	; (a9a8 <_spi_m_async_register_callback+0x54>)
    a984:	4618      	mov	r0, r3
    a986:	4b09      	ldr	r3, [pc, #36]	; (a9ac <_spi_m_async_register_callback+0x58>)
    a988:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    a98a:	697b      	ldr	r3, [r7, #20]
    a98c:	3308      	adds	r3, #8
    a98e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    a990:	7afb      	ldrb	r3, [r7, #11]
    a992:	009b      	lsls	r3, r3, #2
    a994:	693a      	ldr	r2, [r7, #16]
    a996:	4413      	add	r3, r2
    a998:	687a      	ldr	r2, [r7, #4]
    a99a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    a99c:	2300      	movs	r3, #0
}
    a99e:	4618      	mov	r0, r3
    a9a0:	3718      	adds	r7, #24
    a9a2:	46bd      	mov	sp, r7
    a9a4:	bd80      	pop	{r7, pc}
    a9a6:	bf00      	nop
    a9a8:	00017300 	.word	0x00017300
    a9ac:	00006251 	.word	0x00006251

0000a9b0 <__NVIC_EnableIRQ>:
{
    a9b0:	b480      	push	{r7}
    a9b2:	b083      	sub	sp, #12
    a9b4:	af00      	add	r7, sp, #0
    a9b6:	4603      	mov	r3, r0
    a9b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a9ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9be:	2b00      	cmp	r3, #0
    a9c0:	db0b      	blt.n	a9da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a9c2:	4909      	ldr	r1, [pc, #36]	; (a9e8 <__NVIC_EnableIRQ+0x38>)
    a9c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9c8:	095b      	lsrs	r3, r3, #5
    a9ca:	88fa      	ldrh	r2, [r7, #6]
    a9cc:	f002 021f 	and.w	r2, r2, #31
    a9d0:	2001      	movs	r0, #1
    a9d2:	fa00 f202 	lsl.w	r2, r0, r2
    a9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9da:	bf00      	nop
    a9dc:	370c      	adds	r7, #12
    a9de:	46bd      	mov	sp, r7
    a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9e4:	4770      	bx	lr
    a9e6:	bf00      	nop
    a9e8:	e000e100 	.word	0xe000e100

0000a9ec <__NVIC_DisableIRQ>:
{
    a9ec:	b480      	push	{r7}
    a9ee:	b083      	sub	sp, #12
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	4603      	mov	r3, r0
    a9f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a9f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	db10      	blt.n	aa20 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a9fe:	490b      	ldr	r1, [pc, #44]	; (aa2c <__NVIC_DisableIRQ+0x40>)
    aa00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa04:	095b      	lsrs	r3, r3, #5
    aa06:	88fa      	ldrh	r2, [r7, #6]
    aa08:	f002 021f 	and.w	r2, r2, #31
    aa0c:	2001      	movs	r0, #1
    aa0e:	fa00 f202 	lsl.w	r2, r0, r2
    aa12:	3320      	adds	r3, #32
    aa14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    aa18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aa1c:	f3bf 8f6f 	isb	sy
}
    aa20:	bf00      	nop
    aa22:	370c      	adds	r7, #12
    aa24:	46bd      	mov	sp, r7
    aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa2a:	4770      	bx	lr
    aa2c:	e000e100 	.word	0xe000e100

0000aa30 <__NVIC_ClearPendingIRQ>:
{
    aa30:	b480      	push	{r7}
    aa32:	b083      	sub	sp, #12
    aa34:	af00      	add	r7, sp, #0
    aa36:	4603      	mov	r3, r0
    aa38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aa3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa3e:	2b00      	cmp	r3, #0
    aa40:	db0c      	blt.n	aa5c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa42:	4909      	ldr	r1, [pc, #36]	; (aa68 <__NVIC_ClearPendingIRQ+0x38>)
    aa44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa48:	095b      	lsrs	r3, r3, #5
    aa4a:	88fa      	ldrh	r2, [r7, #6]
    aa4c:	f002 021f 	and.w	r2, r2, #31
    aa50:	2001      	movs	r0, #1
    aa52:	fa00 f202 	lsl.w	r2, r0, r2
    aa56:	3360      	adds	r3, #96	; 0x60
    aa58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa5c:	bf00      	nop
    aa5e:	370c      	adds	r7, #12
    aa60:	46bd      	mov	sp, r7
    aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa66:	4770      	bx	lr
    aa68:	e000e100 	.word	0xe000e100

0000aa6c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    aa6c:	b480      	push	{r7}
    aa6e:	b083      	sub	sp, #12
    aa70:	af00      	add	r7, sp, #0
    aa72:	6078      	str	r0, [r7, #4]
    aa74:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aa76:	bf00      	nop
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	691a      	ldr	r2, [r3, #16]
    aa7c:	683b      	ldr	r3, [r7, #0]
    aa7e:	4013      	ands	r3, r2
    aa80:	2b00      	cmp	r3, #0
    aa82:	d1f9      	bne.n	aa78 <hri_tc_wait_for_sync+0xc>
	};
}
    aa84:	bf00      	nop
    aa86:	370c      	adds	r7, #12
    aa88:	46bd      	mov	sp, r7
    aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa8e:	4770      	bx	lr

0000aa90 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    aa90:	b480      	push	{r7}
    aa92:	b083      	sub	sp, #12
    aa94:	af00      	add	r7, sp, #0
    aa96:	6078      	str	r0, [r7, #4]
    aa98:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    aa9a:	687b      	ldr	r3, [r7, #4]
    aa9c:	691a      	ldr	r2, [r3, #16]
    aa9e:	683b      	ldr	r3, [r7, #0]
    aaa0:	4013      	ands	r3, r2
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	bf14      	ite	ne
    aaa6:	2301      	movne	r3, #1
    aaa8:	2300      	moveq	r3, #0
    aaaa:	b2db      	uxtb	r3, r3
}
    aaac:	4618      	mov	r0, r3
    aaae:	370c      	adds	r7, #12
    aab0:	46bd      	mov	sp, r7
    aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aab6:	4770      	bx	lr

0000aab8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    aab8:	b480      	push	{r7}
    aaba:	b083      	sub	sp, #12
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    aac0:	687b      	ldr	r3, [r7, #4]
    aac2:	7a9b      	ldrb	r3, [r3, #10]
    aac4:	b2db      	uxtb	r3, r3
    aac6:	f003 0301 	and.w	r3, r3, #1
    aaca:	2b00      	cmp	r3, #0
    aacc:	bf14      	ite	ne
    aace:	2301      	movne	r3, #1
    aad0:	2300      	moveq	r3, #0
    aad2:	b2db      	uxtb	r3, r3
}
    aad4:	4618      	mov	r0, r3
    aad6:	370c      	adds	r7, #12
    aad8:	46bd      	mov	sp, r7
    aada:	f85d 7b04 	ldr.w	r7, [sp], #4
    aade:	4770      	bx	lr

0000aae0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    aae0:	b480      	push	{r7}
    aae2:	b083      	sub	sp, #12
    aae4:	af00      	add	r7, sp, #0
    aae6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	2201      	movs	r2, #1
    aaec:	729a      	strb	r2, [r3, #10]
}
    aaee:	bf00      	nop
    aaf0:	370c      	adds	r7, #12
    aaf2:	46bd      	mov	sp, r7
    aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaf8:	4770      	bx	lr

0000aafa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    aafa:	b480      	push	{r7}
    aafc:	b083      	sub	sp, #12
    aafe:	af00      	add	r7, sp, #0
    ab00:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    ab02:	687b      	ldr	r3, [r7, #4]
    ab04:	2202      	movs	r2, #2
    ab06:	729a      	strb	r2, [r3, #10]
}
    ab08:	bf00      	nop
    ab0a:	370c      	adds	r7, #12
    ab0c:	46bd      	mov	sp, r7
    ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab12:	4770      	bx	lr

0000ab14 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    ab14:	b480      	push	{r7}
    ab16:	b083      	sub	sp, #12
    ab18:	af00      	add	r7, sp, #0
    ab1a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    ab1c:	687b      	ldr	r3, [r7, #4]
    ab1e:	2201      	movs	r2, #1
    ab20:	725a      	strb	r2, [r3, #9]
}
    ab22:	bf00      	nop
    ab24:	370c      	adds	r7, #12
    ab26:	46bd      	mov	sp, r7
    ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab2c:	4770      	bx	lr

0000ab2e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    ab2e:	b480      	push	{r7}
    ab30:	b083      	sub	sp, #12
    ab32:	af00      	add	r7, sp, #0
    ab34:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    ab36:	687b      	ldr	r3, [r7, #4]
    ab38:	7a5b      	ldrb	r3, [r3, #9]
    ab3a:	b2db      	uxtb	r3, r3
    ab3c:	085b      	lsrs	r3, r3, #1
    ab3e:	f003 0301 	and.w	r3, r3, #1
    ab42:	2b00      	cmp	r3, #0
    ab44:	bf14      	ite	ne
    ab46:	2301      	movne	r3, #1
    ab48:	2300      	moveq	r3, #0
    ab4a:	b2db      	uxtb	r3, r3
}
    ab4c:	4618      	mov	r0, r3
    ab4e:	370c      	adds	r7, #12
    ab50:	46bd      	mov	sp, r7
    ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab56:	4770      	bx	lr

0000ab58 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ab58:	b580      	push	{r7, lr}
    ab5a:	b082      	sub	sp, #8
    ab5c:	af00      	add	r7, sp, #0
    ab5e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    ab60:	687b      	ldr	r3, [r7, #4]
    ab62:	681b      	ldr	r3, [r3, #0]
    ab64:	f043 0202 	orr.w	r2, r3, #2
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ab6c:	2103      	movs	r1, #3
    ab6e:	6878      	ldr	r0, [r7, #4]
    ab70:	4b02      	ldr	r3, [pc, #8]	; (ab7c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    ab72:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ab74:	bf00      	nop
    ab76:	3708      	adds	r7, #8
    ab78:	46bd      	mov	sp, r7
    ab7a:	bd80      	pop	{r7, pc}
    ab7c:	0000aa6d 	.word	0x0000aa6d

0000ab80 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ab80:	b580      	push	{r7, lr}
    ab82:	b084      	sub	sp, #16
    ab84:	af00      	add	r7, sp, #0
    ab86:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ab88:	2103      	movs	r1, #3
    ab8a:	6878      	ldr	r0, [r7, #4]
    ab8c:	4b09      	ldr	r3, [pc, #36]	; (abb4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    ab8e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ab90:	687b      	ldr	r3, [r7, #4]
    ab92:	681b      	ldr	r3, [r3, #0]
    ab94:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    ab96:	68fb      	ldr	r3, [r7, #12]
    ab98:	085b      	lsrs	r3, r3, #1
    ab9a:	f003 0301 	and.w	r3, r3, #1
    ab9e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    aba0:	68fb      	ldr	r3, [r7, #12]
    aba2:	2b00      	cmp	r3, #0
    aba4:	bf14      	ite	ne
    aba6:	2301      	movne	r3, #1
    aba8:	2300      	moveq	r3, #0
    abaa:	b2db      	uxtb	r3, r3
}
    abac:	4618      	mov	r0, r3
    abae:	3710      	adds	r7, #16
    abb0:	46bd      	mov	sp, r7
    abb2:	bd80      	pop	{r7, pc}
    abb4:	0000aa6d 	.word	0x0000aa6d

0000abb8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    abb8:	b580      	push	{r7, lr}
    abba:	b082      	sub	sp, #8
    abbc:	af00      	add	r7, sp, #0
    abbe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    abc0:	687b      	ldr	r3, [r7, #4]
    abc2:	681b      	ldr	r3, [r3, #0]
    abc4:	f023 0202 	bic.w	r2, r3, #2
    abc8:	687b      	ldr	r3, [r7, #4]
    abca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    abcc:	2103      	movs	r1, #3
    abce:	6878      	ldr	r0, [r7, #4]
    abd0:	4b02      	ldr	r3, [pc, #8]	; (abdc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    abd2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    abd4:	bf00      	nop
    abd6:	3708      	adds	r7, #8
    abd8:	46bd      	mov	sp, r7
    abda:	bd80      	pop	{r7, pc}
    abdc:	0000aa6d 	.word	0x0000aa6d

0000abe0 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    abe0:	b480      	push	{r7}
    abe2:	b085      	sub	sp, #20
    abe4:	af00      	add	r7, sp, #0
    abe6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    abee:	68fb      	ldr	r3, [r7, #12]
    abf0:	089b      	lsrs	r3, r3, #2
    abf2:	f003 0303 	and.w	r3, r3, #3
    abf6:	60fb      	str	r3, [r7, #12]
	return tmp;
    abf8:	68fb      	ldr	r3, [r7, #12]
}
    abfa:	4618      	mov	r0, r3
    abfc:	3714      	adds	r7, #20
    abfe:	46bd      	mov	sp, r7
    ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac04:	4770      	bx	lr
	...

0000ac08 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    ac08:	b580      	push	{r7, lr}
    ac0a:	b084      	sub	sp, #16
    ac0c:	af00      	add	r7, sp, #0
    ac0e:	6078      	str	r0, [r7, #4]
    ac10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac12:	2103      	movs	r1, #3
    ac14:	6878      	ldr	r0, [r7, #4]
    ac16:	4b07      	ldr	r3, [pc, #28]	; (ac34 <hri_tc_get_CTRLA_reg+0x2c>)
    ac18:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ac1a:	687b      	ldr	r3, [r7, #4]
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ac20:	68fa      	ldr	r2, [r7, #12]
    ac22:	683b      	ldr	r3, [r7, #0]
    ac24:	4013      	ands	r3, r2
    ac26:	60fb      	str	r3, [r7, #12]
	return tmp;
    ac28:	68fb      	ldr	r3, [r7, #12]
}
    ac2a:	4618      	mov	r0, r3
    ac2c:	3710      	adds	r7, #16
    ac2e:	46bd      	mov	sp, r7
    ac30:	bd80      	pop	{r7, pc}
    ac32:	bf00      	nop
    ac34:	0000aa6d 	.word	0x0000aa6d

0000ac38 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    ac38:	b580      	push	{r7, lr}
    ac3a:	b082      	sub	sp, #8
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	6078      	str	r0, [r7, #4]
    ac40:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    ac42:	687b      	ldr	r3, [r7, #4]
    ac44:	683a      	ldr	r2, [r7, #0]
    ac46:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ac48:	2103      	movs	r1, #3
    ac4a:	6878      	ldr	r0, [r7, #4]
    ac4c:	4b02      	ldr	r3, [pc, #8]	; (ac58 <hri_tc_write_CTRLA_reg+0x20>)
    ac4e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ac50:	bf00      	nop
    ac52:	3708      	adds	r7, #8
    ac54:	46bd      	mov	sp, r7
    ac56:	bd80      	pop	{r7, pc}
    ac58:	0000aa6d 	.word	0x0000aa6d

0000ac5c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    ac5c:	b480      	push	{r7}
    ac5e:	b083      	sub	sp, #12
    ac60:	af00      	add	r7, sp, #0
    ac62:	6078      	str	r0, [r7, #4]
    ac64:	460b      	mov	r3, r1
    ac66:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	887a      	ldrh	r2, [r7, #2]
    ac6c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    ac6e:	bf00      	nop
    ac70:	370c      	adds	r7, #12
    ac72:	46bd      	mov	sp, r7
    ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac78:	4770      	bx	lr

0000ac7a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    ac7a:	b480      	push	{r7}
    ac7c:	b083      	sub	sp, #12
    ac7e:	af00      	add	r7, sp, #0
    ac80:	6078      	str	r0, [r7, #4]
    ac82:	460b      	mov	r3, r1
    ac84:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    ac86:	687b      	ldr	r3, [r7, #4]
    ac88:	78fa      	ldrb	r2, [r7, #3]
    ac8a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    ac8c:	bf00      	nop
    ac8e:	370c      	adds	r7, #12
    ac90:	46bd      	mov	sp, r7
    ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac96:	4770      	bx	lr

0000ac98 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    ac98:	b480      	push	{r7}
    ac9a:	b083      	sub	sp, #12
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	6078      	str	r0, [r7, #4]
    aca0:	460b      	mov	r3, r1
    aca2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	78fa      	ldrb	r2, [r7, #3]
    aca8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    acaa:	bf00      	nop
    acac:	370c      	adds	r7, #12
    acae:	46bd      	mov	sp, r7
    acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    acb4:	4770      	bx	lr
	...

0000acb8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    acb8:	b580      	push	{r7, lr}
    acba:	b082      	sub	sp, #8
    acbc:	af00      	add	r7, sp, #0
    acbe:	6078      	str	r0, [r7, #4]
    acc0:	460b      	mov	r3, r1
    acc2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	78fa      	ldrb	r2, [r7, #3]
    acc8:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    acca:	2120      	movs	r1, #32
    accc:	6878      	ldr	r0, [r7, #4]
    acce:	4b03      	ldr	r3, [pc, #12]	; (acdc <hri_tccount8_write_PER_reg+0x24>)
    acd0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    acd2:	bf00      	nop
    acd4:	3708      	adds	r7, #8
    acd6:	46bd      	mov	sp, r7
    acd8:	bd80      	pop	{r7, pc}
    acda:	bf00      	nop
    acdc:	0000aa6d 	.word	0x0000aa6d

0000ace0 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    ace0:	b580      	push	{r7, lr}
    ace2:	b082      	sub	sp, #8
    ace4:	af00      	add	r7, sp, #0
    ace6:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ace8:	2120      	movs	r1, #32
    acea:	6878      	ldr	r0, [r7, #4]
    acec:	4b04      	ldr	r3, [pc, #16]	; (ad00 <hri_tccount8_read_PER_reg+0x20>)
    acee:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    acf0:	687b      	ldr	r3, [r7, #4]
    acf2:	7edb      	ldrb	r3, [r3, #27]
    acf4:	b2db      	uxtb	r3, r3
}
    acf6:	4618      	mov	r0, r3
    acf8:	3708      	adds	r7, #8
    acfa:	46bd      	mov	sp, r7
    acfc:	bd80      	pop	{r7, pc}
    acfe:	bf00      	nop
    ad00:	0000aa6d 	.word	0x0000aa6d

0000ad04 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    ad04:	b580      	push	{r7, lr}
    ad06:	b082      	sub	sp, #8
    ad08:	af00      	add	r7, sp, #0
    ad0a:	6078      	str	r0, [r7, #4]
    ad0c:	460b      	mov	r3, r1
    ad0e:	70fb      	strb	r3, [r7, #3]
    ad10:	4613      	mov	r3, r2
    ad12:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    ad14:	78fb      	ldrb	r3, [r7, #3]
    ad16:	687a      	ldr	r2, [r7, #4]
    ad18:	4413      	add	r3, r2
    ad1a:	78ba      	ldrb	r2, [r7, #2]
    ad1c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ad1e:	21c0      	movs	r1, #192	; 0xc0
    ad20:	6878      	ldr	r0, [r7, #4]
    ad22:	4b03      	ldr	r3, [pc, #12]	; (ad30 <hri_tccount8_write_CC_reg+0x2c>)
    ad24:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad26:	bf00      	nop
    ad28:	3708      	adds	r7, #8
    ad2a:	46bd      	mov	sp, r7
    ad2c:	bd80      	pop	{r7, pc}
    ad2e:	bf00      	nop
    ad30:	0000aa6d 	.word	0x0000aa6d

0000ad34 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    ad34:	b580      	push	{r7, lr}
    ad36:	b082      	sub	sp, #8
    ad38:	af00      	add	r7, sp, #0
    ad3a:	6078      	str	r0, [r7, #4]
    ad3c:	460b      	mov	r3, r1
    ad3e:	70fb      	strb	r3, [r7, #3]
    ad40:	4613      	mov	r3, r2
    ad42:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    ad44:	78fb      	ldrb	r3, [r7, #3]
    ad46:	687a      	ldr	r2, [r7, #4]
    ad48:	330c      	adds	r3, #12
    ad4a:	005b      	lsls	r3, r3, #1
    ad4c:	4413      	add	r3, r2
    ad4e:	883a      	ldrh	r2, [r7, #0]
    ad50:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ad52:	21c0      	movs	r1, #192	; 0xc0
    ad54:	6878      	ldr	r0, [r7, #4]
    ad56:	4b03      	ldr	r3, [pc, #12]	; (ad64 <hri_tccount16_write_CC_reg+0x30>)
    ad58:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ad5a:	bf00      	nop
    ad5c:	3708      	adds	r7, #8
    ad5e:	46bd      	mov	sp, r7
    ad60:	bd80      	pop	{r7, pc}
    ad62:	bf00      	nop
    ad64:	0000aa6d 	.word	0x0000aa6d

0000ad68 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    ad68:	b580      	push	{r7, lr}
    ad6a:	b082      	sub	sp, #8
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	6078      	str	r0, [r7, #4]
    ad70:	460b      	mov	r3, r1
    ad72:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ad74:	21c0      	movs	r1, #192	; 0xc0
    ad76:	6878      	ldr	r0, [r7, #4]
    ad78:	4b06      	ldr	r3, [pc, #24]	; (ad94 <hri_tccount16_read_CC_reg+0x2c>)
    ad7a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    ad7c:	78fb      	ldrb	r3, [r7, #3]
    ad7e:	687a      	ldr	r2, [r7, #4]
    ad80:	330c      	adds	r3, #12
    ad82:	005b      	lsls	r3, r3, #1
    ad84:	4413      	add	r3, r2
    ad86:	889b      	ldrh	r3, [r3, #4]
    ad88:	b29b      	uxth	r3, r3
}
    ad8a:	4618      	mov	r0, r3
    ad8c:	3708      	adds	r7, #8
    ad8e:	46bd      	mov	sp, r7
    ad90:	bd80      	pop	{r7, pc}
    ad92:	bf00      	nop
    ad94:	0000aa6d 	.word	0x0000aa6d

0000ad98 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    ad98:	b580      	push	{r7, lr}
    ad9a:	b084      	sub	sp, #16
    ad9c:	af00      	add	r7, sp, #0
    ad9e:	60f8      	str	r0, [r7, #12]
    ada0:	460b      	mov	r3, r1
    ada2:	607a      	str	r2, [r7, #4]
    ada4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    ada6:	7afb      	ldrb	r3, [r7, #11]
    ada8:	68fa      	ldr	r2, [r7, #12]
    adaa:	3306      	adds	r3, #6
    adac:	009b      	lsls	r3, r3, #2
    adae:	4413      	add	r3, r2
    adb0:	687a      	ldr	r2, [r7, #4]
    adb2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    adb4:	21c0      	movs	r1, #192	; 0xc0
    adb6:	68f8      	ldr	r0, [r7, #12]
    adb8:	4b02      	ldr	r3, [pc, #8]	; (adc4 <hri_tccount32_write_CC_reg+0x2c>)
    adba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    adbc:	bf00      	nop
    adbe:	3710      	adds	r7, #16
    adc0:	46bd      	mov	sp, r7
    adc2:	bd80      	pop	{r7, pc}
    adc4:	0000aa6d 	.word	0x0000aa6d

0000adc8 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b082      	sub	sp, #8
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
    add0:	460b      	mov	r3, r1
    add2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    add4:	21c0      	movs	r1, #192	; 0xc0
    add6:	6878      	ldr	r0, [r7, #4]
    add8:	4b05      	ldr	r3, [pc, #20]	; (adf0 <hri_tccount32_read_CC_reg+0x28>)
    adda:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    addc:	78fb      	ldrb	r3, [r7, #3]
    adde:	687a      	ldr	r2, [r7, #4]
    ade0:	3306      	adds	r3, #6
    ade2:	009b      	lsls	r3, r3, #2
    ade4:	4413      	add	r3, r2
    ade6:	685b      	ldr	r3, [r3, #4]
}
    ade8:	4618      	mov	r0, r3
    adea:	3708      	adds	r7, #8
    adec:	46bd      	mov	sp, r7
    adee:	bd80      	pop	{r7, pc}
    adf0:	0000aa6d 	.word	0x0000aa6d

0000adf4 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    adf4:	b580      	push	{r7, lr}
    adf6:	b084      	sub	sp, #16
    adf8:	af00      	add	r7, sp, #0
    adfa:	6078      	str	r0, [r7, #4]
    adfc:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    adfe:	6838      	ldr	r0, [r7, #0]
    ae00:	4b93      	ldr	r3, [pc, #588]	; (b050 <_timer_init+0x25c>)
    ae02:	4798      	blx	r3
    ae04:	4603      	mov	r3, r0
    ae06:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	683a      	ldr	r2, [r7, #0]
    ae0c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    ae0e:	2299      	movs	r2, #153	; 0x99
    ae10:	4990      	ldr	r1, [pc, #576]	; (b054 <_timer_init+0x260>)
    ae12:	2001      	movs	r0, #1
    ae14:	4b90      	ldr	r3, [pc, #576]	; (b058 <_timer_init+0x264>)
    ae16:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    ae18:	2101      	movs	r1, #1
    ae1a:	6838      	ldr	r0, [r7, #0]
    ae1c:	4b8f      	ldr	r3, [pc, #572]	; (b05c <_timer_init+0x268>)
    ae1e:	4798      	blx	r3
    ae20:	4603      	mov	r3, r0
    ae22:	f083 0301 	eor.w	r3, r3, #1
    ae26:	b2db      	uxtb	r3, r3
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d011      	beq.n	ae50 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    ae2c:	2102      	movs	r1, #2
    ae2e:	6838      	ldr	r0, [r7, #0]
    ae30:	4b8b      	ldr	r3, [pc, #556]	; (b060 <_timer_init+0x26c>)
    ae32:	4798      	blx	r3
    ae34:	4603      	mov	r3, r0
    ae36:	2b00      	cmp	r3, #0
    ae38:	d006      	beq.n	ae48 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    ae3a:	6838      	ldr	r0, [r7, #0]
    ae3c:	4b89      	ldr	r3, [pc, #548]	; (b064 <_timer_init+0x270>)
    ae3e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    ae40:	2102      	movs	r1, #2
    ae42:	6838      	ldr	r0, [r7, #0]
    ae44:	4b88      	ldr	r3, [pc, #544]	; (b068 <_timer_init+0x274>)
    ae46:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    ae48:	2101      	movs	r1, #1
    ae4a:	6838      	ldr	r0, [r7, #0]
    ae4c:	4b87      	ldr	r3, [pc, #540]	; (b06c <_timer_init+0x278>)
    ae4e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    ae50:	2101      	movs	r1, #1
    ae52:	6838      	ldr	r0, [r7, #0]
    ae54:	4b84      	ldr	r3, [pc, #528]	; (b068 <_timer_init+0x274>)
    ae56:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    ae58:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ae5c:	4984      	ldr	r1, [pc, #528]	; (b070 <_timer_init+0x27c>)
    ae5e:	4613      	mov	r3, r2
    ae60:	009b      	lsls	r3, r3, #2
    ae62:	4413      	add	r3, r2
    ae64:	009b      	lsls	r3, r3, #2
    ae66:	440b      	add	r3, r1
    ae68:	3304      	adds	r3, #4
    ae6a:	681b      	ldr	r3, [r3, #0]
    ae6c:	4619      	mov	r1, r3
    ae6e:	6838      	ldr	r0, [r7, #0]
    ae70:	4b7e      	ldr	r3, [pc, #504]	; (b06c <_timer_init+0x278>)
    ae72:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    ae74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ae78:	497d      	ldr	r1, [pc, #500]	; (b070 <_timer_init+0x27c>)
    ae7a:	4613      	mov	r3, r2
    ae7c:	009b      	lsls	r3, r3, #2
    ae7e:	4413      	add	r3, r2
    ae80:	009b      	lsls	r3, r3, #2
    ae82:	440b      	add	r3, r1
    ae84:	330a      	adds	r3, #10
    ae86:	781b      	ldrb	r3, [r3, #0]
    ae88:	4619      	mov	r1, r3
    ae8a:	6838      	ldr	r0, [r7, #0]
    ae8c:	4b79      	ldr	r3, [pc, #484]	; (b074 <_timer_init+0x280>)
    ae8e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    ae90:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ae94:	4976      	ldr	r1, [pc, #472]	; (b070 <_timer_init+0x27c>)
    ae96:	4613      	mov	r3, r2
    ae98:	009b      	lsls	r3, r3, #2
    ae9a:	4413      	add	r3, r2
    ae9c:	009b      	lsls	r3, r3, #2
    ae9e:	440b      	add	r3, r1
    aea0:	3308      	adds	r3, #8
    aea2:	881b      	ldrh	r3, [r3, #0]
    aea4:	4619      	mov	r1, r3
    aea6:	6838      	ldr	r0, [r7, #0]
    aea8:	4b73      	ldr	r3, [pc, #460]	; (b078 <_timer_init+0x284>)
    aeaa:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    aeac:	2101      	movs	r1, #1
    aeae:	6838      	ldr	r0, [r7, #0]
    aeb0:	4b72      	ldr	r3, [pc, #456]	; (b07c <_timer_init+0x288>)
    aeb2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    aeb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aeb8:	496d      	ldr	r1, [pc, #436]	; (b070 <_timer_init+0x27c>)
    aeba:	4613      	mov	r3, r2
    aebc:	009b      	lsls	r3, r3, #2
    aebe:	4413      	add	r3, r2
    aec0:	009b      	lsls	r3, r3, #2
    aec2:	440b      	add	r3, r1
    aec4:	3304      	adds	r3, #4
    aec6:	681b      	ldr	r3, [r3, #0]
    aec8:	f003 030c 	and.w	r3, r3, #12
    aecc:	2b08      	cmp	r3, #8
    aece:	d11e      	bne.n	af0e <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    aed0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aed4:	4966      	ldr	r1, [pc, #408]	; (b070 <_timer_init+0x27c>)
    aed6:	4613      	mov	r3, r2
    aed8:	009b      	lsls	r3, r3, #2
    aeda:	4413      	add	r3, r2
    aedc:	009b      	lsls	r3, r3, #2
    aede:	440b      	add	r3, r1
    aee0:	330c      	adds	r3, #12
    aee2:	681b      	ldr	r3, [r3, #0]
    aee4:	461a      	mov	r2, r3
    aee6:	2100      	movs	r1, #0
    aee8:	6838      	ldr	r0, [r7, #0]
    aeea:	4b65      	ldr	r3, [pc, #404]	; (b080 <_timer_init+0x28c>)
    aeec:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    aeee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aef2:	495f      	ldr	r1, [pc, #380]	; (b070 <_timer_init+0x27c>)
    aef4:	4613      	mov	r3, r2
    aef6:	009b      	lsls	r3, r3, #2
    aef8:	4413      	add	r3, r2
    aefa:	009b      	lsls	r3, r3, #2
    aefc:	440b      	add	r3, r1
    aefe:	3310      	adds	r3, #16
    af00:	681b      	ldr	r3, [r3, #0]
    af02:	461a      	mov	r2, r3
    af04:	2101      	movs	r1, #1
    af06:	6838      	ldr	r0, [r7, #0]
    af08:	4b5d      	ldr	r3, [pc, #372]	; (b080 <_timer_init+0x28c>)
    af0a:	4798      	blx	r3
    af0c:	e06a      	b.n	afe4 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    af0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af12:	4957      	ldr	r1, [pc, #348]	; (b070 <_timer_init+0x27c>)
    af14:	4613      	mov	r3, r2
    af16:	009b      	lsls	r3, r3, #2
    af18:	4413      	add	r3, r2
    af1a:	009b      	lsls	r3, r3, #2
    af1c:	440b      	add	r3, r1
    af1e:	3304      	adds	r3, #4
    af20:	681b      	ldr	r3, [r3, #0]
    af22:	f003 030c 	and.w	r3, r3, #12
    af26:	2b00      	cmp	r3, #0
    af28:	d120      	bne.n	af6c <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    af2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af2e:	4950      	ldr	r1, [pc, #320]	; (b070 <_timer_init+0x27c>)
    af30:	4613      	mov	r3, r2
    af32:	009b      	lsls	r3, r3, #2
    af34:	4413      	add	r3, r2
    af36:	009b      	lsls	r3, r3, #2
    af38:	440b      	add	r3, r1
    af3a:	330c      	adds	r3, #12
    af3c:	681b      	ldr	r3, [r3, #0]
    af3e:	b29b      	uxth	r3, r3
    af40:	461a      	mov	r2, r3
    af42:	2100      	movs	r1, #0
    af44:	6838      	ldr	r0, [r7, #0]
    af46:	4b4f      	ldr	r3, [pc, #316]	; (b084 <_timer_init+0x290>)
    af48:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    af4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af4e:	4948      	ldr	r1, [pc, #288]	; (b070 <_timer_init+0x27c>)
    af50:	4613      	mov	r3, r2
    af52:	009b      	lsls	r3, r3, #2
    af54:	4413      	add	r3, r2
    af56:	009b      	lsls	r3, r3, #2
    af58:	440b      	add	r3, r1
    af5a:	3310      	adds	r3, #16
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	b29b      	uxth	r3, r3
    af60:	461a      	mov	r2, r3
    af62:	2101      	movs	r1, #1
    af64:	6838      	ldr	r0, [r7, #0]
    af66:	4b47      	ldr	r3, [pc, #284]	; (b084 <_timer_init+0x290>)
    af68:	4798      	blx	r3
    af6a:	e03b      	b.n	afe4 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    af6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af70:	493f      	ldr	r1, [pc, #252]	; (b070 <_timer_init+0x27c>)
    af72:	4613      	mov	r3, r2
    af74:	009b      	lsls	r3, r3, #2
    af76:	4413      	add	r3, r2
    af78:	009b      	lsls	r3, r3, #2
    af7a:	440b      	add	r3, r1
    af7c:	3304      	adds	r3, #4
    af7e:	681b      	ldr	r3, [r3, #0]
    af80:	f003 030c 	and.w	r3, r3, #12
    af84:	2b04      	cmp	r3, #4
    af86:	d12d      	bne.n	afe4 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    af88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    af8c:	4938      	ldr	r1, [pc, #224]	; (b070 <_timer_init+0x27c>)
    af8e:	4613      	mov	r3, r2
    af90:	009b      	lsls	r3, r3, #2
    af92:	4413      	add	r3, r2
    af94:	009b      	lsls	r3, r3, #2
    af96:	440b      	add	r3, r1
    af98:	330c      	adds	r3, #12
    af9a:	681b      	ldr	r3, [r3, #0]
    af9c:	b2db      	uxtb	r3, r3
    af9e:	461a      	mov	r2, r3
    afa0:	2100      	movs	r1, #0
    afa2:	6838      	ldr	r0, [r7, #0]
    afa4:	4b38      	ldr	r3, [pc, #224]	; (b088 <_timer_init+0x294>)
    afa6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    afa8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    afac:	4930      	ldr	r1, [pc, #192]	; (b070 <_timer_init+0x27c>)
    afae:	4613      	mov	r3, r2
    afb0:	009b      	lsls	r3, r3, #2
    afb2:	4413      	add	r3, r2
    afb4:	009b      	lsls	r3, r3, #2
    afb6:	440b      	add	r3, r1
    afb8:	3310      	adds	r3, #16
    afba:	681b      	ldr	r3, [r3, #0]
    afbc:	b2db      	uxtb	r3, r3
    afbe:	461a      	mov	r2, r3
    afc0:	2101      	movs	r1, #1
    afc2:	6838      	ldr	r0, [r7, #0]
    afc4:	4b30      	ldr	r3, [pc, #192]	; (b088 <_timer_init+0x294>)
    afc6:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    afc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    afcc:	4928      	ldr	r1, [pc, #160]	; (b070 <_timer_init+0x27c>)
    afce:	4613      	mov	r3, r2
    afd0:	009b      	lsls	r3, r3, #2
    afd2:	4413      	add	r3, r2
    afd4:	009b      	lsls	r3, r3, #2
    afd6:	440b      	add	r3, r1
    afd8:	330b      	adds	r3, #11
    afda:	781b      	ldrb	r3, [r3, #0]
    afdc:	4619      	mov	r1, r3
    afde:	6838      	ldr	r0, [r7, #0]
    afe0:	4b2a      	ldr	r3, [pc, #168]	; (b08c <_timer_init+0x298>)
    afe2:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    afe4:	6838      	ldr	r0, [r7, #0]
    afe6:	4b2a      	ldr	r3, [pc, #168]	; (b090 <_timer_init+0x29c>)
    afe8:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    afea:	6879      	ldr	r1, [r7, #4]
    afec:	6838      	ldr	r0, [r7, #0]
    afee:	4b29      	ldr	r3, [pc, #164]	; (b094 <_timer_init+0x2a0>)
    aff0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    aff2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aff6:	491e      	ldr	r1, [pc, #120]	; (b070 <_timer_init+0x27c>)
    aff8:	4613      	mov	r3, r2
    affa:	009b      	lsls	r3, r3, #2
    affc:	4413      	add	r3, r2
    affe:	009b      	lsls	r3, r3, #2
    b000:	440b      	add	r3, r1
    b002:	3302      	adds	r3, #2
    b004:	f9b3 3000 	ldrsh.w	r3, [r3]
    b008:	4618      	mov	r0, r3
    b00a:	4b23      	ldr	r3, [pc, #140]	; (b098 <_timer_init+0x2a4>)
    b00c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b00e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b012:	4917      	ldr	r1, [pc, #92]	; (b070 <_timer_init+0x27c>)
    b014:	4613      	mov	r3, r2
    b016:	009b      	lsls	r3, r3, #2
    b018:	4413      	add	r3, r2
    b01a:	009b      	lsls	r3, r3, #2
    b01c:	440b      	add	r3, r1
    b01e:	3302      	adds	r3, #2
    b020:	f9b3 3000 	ldrsh.w	r3, [r3]
    b024:	4618      	mov	r0, r3
    b026:	4b1d      	ldr	r3, [pc, #116]	; (b09c <_timer_init+0x2a8>)
    b028:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b02a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b02e:	4910      	ldr	r1, [pc, #64]	; (b070 <_timer_init+0x27c>)
    b030:	4613      	mov	r3, r2
    b032:	009b      	lsls	r3, r3, #2
    b034:	4413      	add	r3, r2
    b036:	009b      	lsls	r3, r3, #2
    b038:	440b      	add	r3, r1
    b03a:	3302      	adds	r3, #2
    b03c:	f9b3 3000 	ldrsh.w	r3, [r3]
    b040:	4618      	mov	r0, r3
    b042:	4b17      	ldr	r3, [pc, #92]	; (b0a0 <_timer_init+0x2ac>)
    b044:	4798      	blx	r3

	return ERR_NONE;
    b046:	2300      	movs	r3, #0
}
    b048:	4618      	mov	r0, r3
    b04a:	3710      	adds	r7, #16
    b04c:	46bd      	mov	sp, r7
    b04e:	bd80      	pop	{r7, pc}
    b050:	0000b5b9 	.word	0x0000b5b9
    b054:	00017370 	.word	0x00017370
    b058:	00006251 	.word	0x00006251
    b05c:	0000aa91 	.word	0x0000aa91
    b060:	0000ac09 	.word	0x0000ac09
    b064:	0000abb9 	.word	0x0000abb9
    b068:	0000aa6d 	.word	0x0000aa6d
    b06c:	0000ac39 	.word	0x0000ac39
    b070:	200000ac 	.word	0x200000ac
    b074:	0000ac99 	.word	0x0000ac99
    b078:	0000ac5d 	.word	0x0000ac5d
    b07c:	0000ac7b 	.word	0x0000ac7b
    b080:	0000ad99 	.word	0x0000ad99
    b084:	0000ad35 	.word	0x0000ad35
    b088:	0000ad05 	.word	0x0000ad05
    b08c:	0000acb9 	.word	0x0000acb9
    b090:	0000ab15 	.word	0x0000ab15
    b094:	0000b621 	.word	0x0000b621
    b098:	0000a9ed 	.word	0x0000a9ed
    b09c:	0000aa31 	.word	0x0000aa31
    b0a0:	0000a9b1 	.word	0x0000a9b1

0000b0a4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    b0a4:	b580      	push	{r7, lr}
    b0a6:	b084      	sub	sp, #16
    b0a8:	af00      	add	r7, sp, #0
    b0aa:	6078      	str	r0, [r7, #4]
    b0ac:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    b0ae:	6838      	ldr	r0, [r7, #0]
    b0b0:	4b73      	ldr	r3, [pc, #460]	; (b280 <_pwm_init+0x1dc>)
    b0b2:	4798      	blx	r3
    b0b4:	4603      	mov	r3, r0
    b0b6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	683a      	ldr	r2, [r7, #0]
    b0bc:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b0be:	2101      	movs	r1, #1
    b0c0:	6838      	ldr	r0, [r7, #0]
    b0c2:	4b70      	ldr	r3, [pc, #448]	; (b284 <_pwm_init+0x1e0>)
    b0c4:	4798      	blx	r3
    b0c6:	4603      	mov	r3, r0
    b0c8:	f083 0301 	eor.w	r3, r3, #1
    b0cc:	b2db      	uxtb	r3, r3
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d011      	beq.n	b0f6 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b0d2:	2102      	movs	r1, #2
    b0d4:	6838      	ldr	r0, [r7, #0]
    b0d6:	4b6c      	ldr	r3, [pc, #432]	; (b288 <_pwm_init+0x1e4>)
    b0d8:	4798      	blx	r3
    b0da:	4603      	mov	r3, r0
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d006      	beq.n	b0ee <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b0e0:	6838      	ldr	r0, [r7, #0]
    b0e2:	4b6a      	ldr	r3, [pc, #424]	; (b28c <_pwm_init+0x1e8>)
    b0e4:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b0e6:	2102      	movs	r1, #2
    b0e8:	6838      	ldr	r0, [r7, #0]
    b0ea:	4b69      	ldr	r3, [pc, #420]	; (b290 <_pwm_init+0x1ec>)
    b0ec:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b0ee:	2101      	movs	r1, #1
    b0f0:	6838      	ldr	r0, [r7, #0]
    b0f2:	4b68      	ldr	r3, [pc, #416]	; (b294 <_pwm_init+0x1f0>)
    b0f4:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b0f6:	2101      	movs	r1, #1
    b0f8:	6838      	ldr	r0, [r7, #0]
    b0fa:	4b65      	ldr	r3, [pc, #404]	; (b290 <_pwm_init+0x1ec>)
    b0fc:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b0fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b102:	4965      	ldr	r1, [pc, #404]	; (b298 <_pwm_init+0x1f4>)
    b104:	4613      	mov	r3, r2
    b106:	009b      	lsls	r3, r3, #2
    b108:	4413      	add	r3, r2
    b10a:	009b      	lsls	r3, r3, #2
    b10c:	440b      	add	r3, r1
    b10e:	3304      	adds	r3, #4
    b110:	681b      	ldr	r3, [r3, #0]
    b112:	4619      	mov	r1, r3
    b114:	6838      	ldr	r0, [r7, #0]
    b116:	4b5f      	ldr	r3, [pc, #380]	; (b294 <_pwm_init+0x1f0>)
    b118:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b11a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b11e:	495e      	ldr	r1, [pc, #376]	; (b298 <_pwm_init+0x1f4>)
    b120:	4613      	mov	r3, r2
    b122:	009b      	lsls	r3, r3, #2
    b124:	4413      	add	r3, r2
    b126:	009b      	lsls	r3, r3, #2
    b128:	440b      	add	r3, r1
    b12a:	330a      	adds	r3, #10
    b12c:	781b      	ldrb	r3, [r3, #0]
    b12e:	4619      	mov	r1, r3
    b130:	6838      	ldr	r0, [r7, #0]
    b132:	4b5a      	ldr	r3, [pc, #360]	; (b29c <_pwm_init+0x1f8>)
    b134:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b136:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b13a:	4957      	ldr	r1, [pc, #348]	; (b298 <_pwm_init+0x1f4>)
    b13c:	4613      	mov	r3, r2
    b13e:	009b      	lsls	r3, r3, #2
    b140:	4413      	add	r3, r2
    b142:	009b      	lsls	r3, r3, #2
    b144:	440b      	add	r3, r1
    b146:	3308      	adds	r3, #8
    b148:	881b      	ldrh	r3, [r3, #0]
    b14a:	4619      	mov	r1, r3
    b14c:	6838      	ldr	r0, [r7, #0]
    b14e:	4b54      	ldr	r3, [pc, #336]	; (b2a0 <_pwm_init+0x1fc>)
    b150:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    b152:	2103      	movs	r1, #3
    b154:	6838      	ldr	r0, [r7, #0]
    b156:	4b53      	ldr	r3, [pc, #332]	; (b2a4 <_pwm_init+0x200>)
    b158:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b15a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b15e:	494e      	ldr	r1, [pc, #312]	; (b298 <_pwm_init+0x1f4>)
    b160:	4613      	mov	r3, r2
    b162:	009b      	lsls	r3, r3, #2
    b164:	4413      	add	r3, r2
    b166:	009b      	lsls	r3, r3, #2
    b168:	440b      	add	r3, r1
    b16a:	3304      	adds	r3, #4
    b16c:	681b      	ldr	r3, [r3, #0]
    b16e:	f003 030c 	and.w	r3, r3, #12
    b172:	2b08      	cmp	r3, #8
    b174:	d11e      	bne.n	b1b4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b176:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b17a:	4947      	ldr	r1, [pc, #284]	; (b298 <_pwm_init+0x1f4>)
    b17c:	4613      	mov	r3, r2
    b17e:	009b      	lsls	r3, r3, #2
    b180:	4413      	add	r3, r2
    b182:	009b      	lsls	r3, r3, #2
    b184:	440b      	add	r3, r1
    b186:	330c      	adds	r3, #12
    b188:	681b      	ldr	r3, [r3, #0]
    b18a:	461a      	mov	r2, r3
    b18c:	2100      	movs	r1, #0
    b18e:	6838      	ldr	r0, [r7, #0]
    b190:	4b45      	ldr	r3, [pc, #276]	; (b2a8 <_pwm_init+0x204>)
    b192:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b194:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b198:	493f      	ldr	r1, [pc, #252]	; (b298 <_pwm_init+0x1f4>)
    b19a:	4613      	mov	r3, r2
    b19c:	009b      	lsls	r3, r3, #2
    b19e:	4413      	add	r3, r2
    b1a0:	009b      	lsls	r3, r3, #2
    b1a2:	440b      	add	r3, r1
    b1a4:	3310      	adds	r3, #16
    b1a6:	681b      	ldr	r3, [r3, #0]
    b1a8:	461a      	mov	r2, r3
    b1aa:	2101      	movs	r1, #1
    b1ac:	6838      	ldr	r0, [r7, #0]
    b1ae:	4b3e      	ldr	r3, [pc, #248]	; (b2a8 <_pwm_init+0x204>)
    b1b0:	4798      	blx	r3
    b1b2:	e031      	b.n	b218 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b1b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1b8:	4937      	ldr	r1, [pc, #220]	; (b298 <_pwm_init+0x1f4>)
    b1ba:	4613      	mov	r3, r2
    b1bc:	009b      	lsls	r3, r3, #2
    b1be:	4413      	add	r3, r2
    b1c0:	009b      	lsls	r3, r3, #2
    b1c2:	440b      	add	r3, r1
    b1c4:	3304      	adds	r3, #4
    b1c6:	681b      	ldr	r3, [r3, #0]
    b1c8:	f003 030c 	and.w	r3, r3, #12
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	d120      	bne.n	b212 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b1d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1d4:	4930      	ldr	r1, [pc, #192]	; (b298 <_pwm_init+0x1f4>)
    b1d6:	4613      	mov	r3, r2
    b1d8:	009b      	lsls	r3, r3, #2
    b1da:	4413      	add	r3, r2
    b1dc:	009b      	lsls	r3, r3, #2
    b1de:	440b      	add	r3, r1
    b1e0:	330c      	adds	r3, #12
    b1e2:	681b      	ldr	r3, [r3, #0]
    b1e4:	b29b      	uxth	r3, r3
    b1e6:	461a      	mov	r2, r3
    b1e8:	2100      	movs	r1, #0
    b1ea:	6838      	ldr	r0, [r7, #0]
    b1ec:	4b2f      	ldr	r3, [pc, #188]	; (b2ac <_pwm_init+0x208>)
    b1ee:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b1f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1f4:	4928      	ldr	r1, [pc, #160]	; (b298 <_pwm_init+0x1f4>)
    b1f6:	4613      	mov	r3, r2
    b1f8:	009b      	lsls	r3, r3, #2
    b1fa:	4413      	add	r3, r2
    b1fc:	009b      	lsls	r3, r3, #2
    b1fe:	440b      	add	r3, r1
    b200:	3310      	adds	r3, #16
    b202:	681b      	ldr	r3, [r3, #0]
    b204:	b29b      	uxth	r3, r3
    b206:	461a      	mov	r2, r3
    b208:	2101      	movs	r1, #1
    b20a:	6838      	ldr	r0, [r7, #0]
    b20c:	4b27      	ldr	r3, [pc, #156]	; (b2ac <_pwm_init+0x208>)
    b20e:	4798      	blx	r3
    b210:	e002      	b.n	b218 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    b212:	f04f 33ff 	mov.w	r3, #4294967295
    b216:	e02e      	b.n	b276 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    b218:	6879      	ldr	r1, [r7, #4]
    b21a:	6838      	ldr	r0, [r7, #0]
    b21c:	4b24      	ldr	r3, [pc, #144]	; (b2b0 <_pwm_init+0x20c>)
    b21e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b220:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b224:	491c      	ldr	r1, [pc, #112]	; (b298 <_pwm_init+0x1f4>)
    b226:	4613      	mov	r3, r2
    b228:	009b      	lsls	r3, r3, #2
    b22a:	4413      	add	r3, r2
    b22c:	009b      	lsls	r3, r3, #2
    b22e:	440b      	add	r3, r1
    b230:	3302      	adds	r3, #2
    b232:	f9b3 3000 	ldrsh.w	r3, [r3]
    b236:	4618      	mov	r0, r3
    b238:	4b1e      	ldr	r3, [pc, #120]	; (b2b4 <_pwm_init+0x210>)
    b23a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b23c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b240:	4915      	ldr	r1, [pc, #84]	; (b298 <_pwm_init+0x1f4>)
    b242:	4613      	mov	r3, r2
    b244:	009b      	lsls	r3, r3, #2
    b246:	4413      	add	r3, r2
    b248:	009b      	lsls	r3, r3, #2
    b24a:	440b      	add	r3, r1
    b24c:	3302      	adds	r3, #2
    b24e:	f9b3 3000 	ldrsh.w	r3, [r3]
    b252:	4618      	mov	r0, r3
    b254:	4b18      	ldr	r3, [pc, #96]	; (b2b8 <_pwm_init+0x214>)
    b256:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b258:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b25c:	490e      	ldr	r1, [pc, #56]	; (b298 <_pwm_init+0x1f4>)
    b25e:	4613      	mov	r3, r2
    b260:	009b      	lsls	r3, r3, #2
    b262:	4413      	add	r3, r2
    b264:	009b      	lsls	r3, r3, #2
    b266:	440b      	add	r3, r1
    b268:	3302      	adds	r3, #2
    b26a:	f9b3 3000 	ldrsh.w	r3, [r3]
    b26e:	4618      	mov	r0, r3
    b270:	4b12      	ldr	r3, [pc, #72]	; (b2bc <_pwm_init+0x218>)
    b272:	4798      	blx	r3

	return 0;
    b274:	2300      	movs	r3, #0
}
    b276:	4618      	mov	r0, r3
    b278:	3710      	adds	r7, #16
    b27a:	46bd      	mov	sp, r7
    b27c:	bd80      	pop	{r7, pc}
    b27e:	bf00      	nop
    b280:	0000b5b9 	.word	0x0000b5b9
    b284:	0000aa91 	.word	0x0000aa91
    b288:	0000ac09 	.word	0x0000ac09
    b28c:	0000abb9 	.word	0x0000abb9
    b290:	0000aa6d 	.word	0x0000aa6d
    b294:	0000ac39 	.word	0x0000ac39
    b298:	200000ac 	.word	0x200000ac
    b29c:	0000ac99 	.word	0x0000ac99
    b2a0:	0000ac5d 	.word	0x0000ac5d
    b2a4:	0000ac7b 	.word	0x0000ac7b
    b2a8:	0000ad99 	.word	0x0000ad99
    b2ac:	0000ad35 	.word	0x0000ad35
    b2b0:	0000b621 	.word	0x0000b621
    b2b4:	0000a9ed 	.word	0x0000a9ed
    b2b8:	0000aa31 	.word	0x0000aa31
    b2bc:	0000a9b1 	.word	0x0000a9b1

0000b2c0 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    b2c0:	b580      	push	{r7, lr}
    b2c2:	b082      	sub	sp, #8
    b2c4:	af00      	add	r7, sp, #0
    b2c6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b2c8:	687b      	ldr	r3, [r7, #4]
    b2ca:	68db      	ldr	r3, [r3, #12]
    b2cc:	4618      	mov	r0, r3
    b2ce:	4b03      	ldr	r3, [pc, #12]	; (b2dc <_timer_start+0x1c>)
    b2d0:	4798      	blx	r3
}
    b2d2:	bf00      	nop
    b2d4:	3708      	adds	r7, #8
    b2d6:	46bd      	mov	sp, r7
    b2d8:	bd80      	pop	{r7, pc}
    b2da:	bf00      	nop
    b2dc:	0000ab59 	.word	0x0000ab59

0000b2e0 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    b2e0:	b580      	push	{r7, lr}
    b2e2:	b082      	sub	sp, #8
    b2e4:	af00      	add	r7, sp, #0
    b2e6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	691b      	ldr	r3, [r3, #16]
    b2ec:	4618      	mov	r0, r3
    b2ee:	4b03      	ldr	r3, [pc, #12]	; (b2fc <_pwm_enable+0x1c>)
    b2f0:	4798      	blx	r3
}
    b2f2:	bf00      	nop
    b2f4:	3708      	adds	r7, #8
    b2f6:	46bd      	mov	sp, r7
    b2f8:	bd80      	pop	{r7, pc}
    b2fa:	bf00      	nop
    b2fc:	0000ab59 	.word	0x0000ab59

0000b300 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    b300:	b580      	push	{r7, lr}
    b302:	b082      	sub	sp, #8
    b304:	af00      	add	r7, sp, #0
    b306:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	68db      	ldr	r3, [r3, #12]
    b30c:	4618      	mov	r0, r3
    b30e:	4b03      	ldr	r3, [pc, #12]	; (b31c <_timer_stop+0x1c>)
    b310:	4798      	blx	r3
}
    b312:	bf00      	nop
    b314:	3708      	adds	r7, #8
    b316:	46bd      	mov	sp, r7
    b318:	bd80      	pop	{r7, pc}
    b31a:	bf00      	nop
    b31c:	0000abb9 	.word	0x0000abb9

0000b320 <_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _timer_get_period(const struct _timer_device *const device)
{
    b320:	b580      	push	{r7, lr}
    b322:	b084      	sub	sp, #16
    b324:	af00      	add	r7, sp, #0
    b326:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b328:	687b      	ldr	r3, [r7, #4]
    b32a:	68db      	ldr	r3, [r3, #12]
    b32c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b32e:	68f8      	ldr	r0, [r7, #12]
    b330:	4b13      	ldr	r3, [pc, #76]	; (b380 <_timer_get_period+0x60>)
    b332:	4798      	blx	r3
    b334:	4603      	mov	r3, r0
    b336:	2b02      	cmp	r3, #2
    b338:	d105      	bne.n	b346 <_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    b33a:	2100      	movs	r1, #0
    b33c:	68f8      	ldr	r0, [r7, #12]
    b33e:	4b11      	ldr	r3, [pc, #68]	; (b384 <_timer_get_period+0x64>)
    b340:	4798      	blx	r3
    b342:	4603      	mov	r3, r0
    b344:	e017      	b.n	b376 <_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b346:	68f8      	ldr	r0, [r7, #12]
    b348:	4b0d      	ldr	r3, [pc, #52]	; (b380 <_timer_get_period+0x60>)
    b34a:	4798      	blx	r3
    b34c:	4603      	mov	r3, r0
    b34e:	2b00      	cmp	r3, #0
    b350:	d105      	bne.n	b35e <_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    b352:	2100      	movs	r1, #0
    b354:	68f8      	ldr	r0, [r7, #12]
    b356:	4b0c      	ldr	r3, [pc, #48]	; (b388 <_timer_get_period+0x68>)
    b358:	4798      	blx	r3
    b35a:	4603      	mov	r3, r0
    b35c:	e00b      	b.n	b376 <_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    b35e:	68f8      	ldr	r0, [r7, #12]
    b360:	4b07      	ldr	r3, [pc, #28]	; (b380 <_timer_get_period+0x60>)
    b362:	4798      	blx	r3
    b364:	4603      	mov	r3, r0
    b366:	2b01      	cmp	r3, #1
    b368:	d104      	bne.n	b374 <_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    b36a:	68f8      	ldr	r0, [r7, #12]
    b36c:	4b07      	ldr	r3, [pc, #28]	; (b38c <_timer_get_period+0x6c>)
    b36e:	4798      	blx	r3
    b370:	4603      	mov	r3, r0
    b372:	e000      	b.n	b376 <_timer_get_period+0x56>
	}

	return 0;
    b374:	2300      	movs	r3, #0
}
    b376:	4618      	mov	r0, r3
    b378:	3710      	adds	r7, #16
    b37a:	46bd      	mov	sp, r7
    b37c:	bd80      	pop	{r7, pc}
    b37e:	bf00      	nop
    b380:	0000abe1 	.word	0x0000abe1
    b384:	0000adc9 	.word	0x0000adc9
    b388:	0000ad69 	.word	0x0000ad69
    b38c:	0000ace1 	.word	0x0000ace1

0000b390 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    b390:	b580      	push	{r7, lr}
    b392:	b082      	sub	sp, #8
    b394:	af00      	add	r7, sp, #0
    b396:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b398:	687b      	ldr	r3, [r7, #4]
    b39a:	68db      	ldr	r3, [r3, #12]
    b39c:	4618      	mov	r0, r3
    b39e:	4b03      	ldr	r3, [pc, #12]	; (b3ac <_timer_is_started+0x1c>)
    b3a0:	4798      	blx	r3
    b3a2:	4603      	mov	r3, r0
}
    b3a4:	4618      	mov	r0, r3
    b3a6:	3708      	adds	r7, #8
    b3a8:	46bd      	mov	sp, r7
    b3aa:	bd80      	pop	{r7, pc}
    b3ac:	0000ab81 	.word	0x0000ab81

0000b3b0 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    b3b0:	b580      	push	{r7, lr}
    b3b2:	b082      	sub	sp, #8
    b3b4:	af00      	add	r7, sp, #0
    b3b6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	691b      	ldr	r3, [r3, #16]
    b3bc:	4618      	mov	r0, r3
    b3be:	4b03      	ldr	r3, [pc, #12]	; (b3cc <_pwm_is_enabled+0x1c>)
    b3c0:	4798      	blx	r3
    b3c2:	4603      	mov	r3, r0
}
    b3c4:	4618      	mov	r0, r3
    b3c6:	3708      	adds	r7, #8
    b3c8:	46bd      	mov	sp, r7
    b3ca:	bd80      	pop	{r7, pc}
    b3cc:	0000ab81 	.word	0x0000ab81

0000b3d0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    b3d0:	b480      	push	{r7}
    b3d2:	af00      	add	r7, sp, #0
	return NULL;
    b3d4:	2300      	movs	r3, #0
}
    b3d6:	4618      	mov	r0, r3
    b3d8:	46bd      	mov	sp, r7
    b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3de:	4770      	bx	lr

0000b3e0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    b3e0:	b480      	push	{r7}
    b3e2:	af00      	add	r7, sp, #0
	return NULL;
    b3e4:	2300      	movs	r3, #0
}
    b3e6:	4618      	mov	r0, r3
    b3e8:	46bd      	mov	sp, r7
    b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ee:	4770      	bx	lr

0000b3f0 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    b3f0:	b580      	push	{r7, lr}
    b3f2:	b084      	sub	sp, #16
    b3f4:	af00      	add	r7, sp, #0
    b3f6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b3f8:	687b      	ldr	r3, [r7, #4]
    b3fa:	68db      	ldr	r3, [r3, #12]
    b3fc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    b3fe:	68f8      	ldr	r0, [r7, #12]
    b400:	4b0e      	ldr	r3, [pc, #56]	; (b43c <_timer_set_irq+0x4c>)
    b402:	4798      	blx	r3
    b404:	4603      	mov	r3, r0
    b406:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    b408:	f240 12a7 	movw	r2, #423	; 0x1a7
    b40c:	490c      	ldr	r1, [pc, #48]	; (b440 <_timer_set_irq+0x50>)
    b40e:	2001      	movs	r0, #1
    b410:	4b0c      	ldr	r3, [pc, #48]	; (b444 <_timer_set_irq+0x54>)
    b412:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    b414:	f997 200b 	ldrsb.w	r2, [r7, #11]
    b418:	490b      	ldr	r1, [pc, #44]	; (b448 <_timer_set_irq+0x58>)
    b41a:	4613      	mov	r3, r2
    b41c:	009b      	lsls	r3, r3, #2
    b41e:	4413      	add	r3, r2
    b420:	009b      	lsls	r3, r3, #2
    b422:	440b      	add	r3, r1
    b424:	3302      	adds	r3, #2
    b426:	f9b3 3000 	ldrsh.w	r3, [r3]
    b42a:	b2db      	uxtb	r3, r3
    b42c:	4618      	mov	r0, r3
    b42e:	4b07      	ldr	r3, [pc, #28]	; (b44c <_timer_set_irq+0x5c>)
    b430:	4798      	blx	r3
}
    b432:	bf00      	nop
    b434:	3710      	adds	r7, #16
    b436:	46bd      	mov	sp, r7
    b438:	bd80      	pop	{r7, pc}
    b43a:	bf00      	nop
    b43c:	0000b5b9 	.word	0x0000b5b9
    b440:	00017370 	.word	0x00017370
    b444:	00006251 	.word	0x00006251
    b448:	200000ac 	.word	0x200000ac
    b44c:	00006a35 	.word	0x00006a35

0000b450 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    b450:	b580      	push	{r7, lr}
    b452:	b084      	sub	sp, #16
    b454:	af00      	add	r7, sp, #0
    b456:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b458:	687b      	ldr	r3, [r7, #4]
    b45a:	68db      	ldr	r3, [r3, #12]
    b45c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b45e:	68f8      	ldr	r0, [r7, #12]
    b460:	4b07      	ldr	r3, [pc, #28]	; (b480 <tc_interrupt_handler+0x30>)
    b462:	4798      	blx	r3
    b464:	4603      	mov	r3, r0
    b466:	2b00      	cmp	r3, #0
    b468:	d006      	beq.n	b478 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b46a:	68f8      	ldr	r0, [r7, #12]
    b46c:	4b05      	ldr	r3, [pc, #20]	; (b484 <tc_interrupt_handler+0x34>)
    b46e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b470:	687b      	ldr	r3, [r7, #4]
    b472:	681b      	ldr	r3, [r3, #0]
    b474:	6878      	ldr	r0, [r7, #4]
    b476:	4798      	blx	r3
	}
}
    b478:	bf00      	nop
    b47a:	3710      	adds	r7, #16
    b47c:	46bd      	mov	sp, r7
    b47e:	bd80      	pop	{r7, pc}
    b480:	0000aab9 	.word	0x0000aab9
    b484:	0000aae1 	.word	0x0000aae1

0000b488 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    b488:	b580      	push	{r7, lr}
    b48a:	b084      	sub	sp, #16
    b48c:	af00      	add	r7, sp, #0
    b48e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b490:	687b      	ldr	r3, [r7, #4]
    b492:	691b      	ldr	r3, [r3, #16]
    b494:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b496:	68f8      	ldr	r0, [r7, #12]
    b498:	4b12      	ldr	r3, [pc, #72]	; (b4e4 <tc_pwm_interrupt_handler+0x5c>)
    b49a:	4798      	blx	r3
    b49c:	4603      	mov	r3, r0
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d00a      	beq.n	b4b8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b4a2:	68f8      	ldr	r0, [r7, #12]
    b4a4:	4b10      	ldr	r3, [pc, #64]	; (b4e8 <tc_pwm_interrupt_handler+0x60>)
    b4a6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    b4a8:	687b      	ldr	r3, [r7, #4]
    b4aa:	681b      	ldr	r3, [r3, #0]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d003      	beq.n	b4b8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    b4b0:	687b      	ldr	r3, [r7, #4]
    b4b2:	681b      	ldr	r3, [r3, #0]
    b4b4:	6878      	ldr	r0, [r7, #4]
    b4b6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    b4b8:	68f8      	ldr	r0, [r7, #12]
    b4ba:	4b0c      	ldr	r3, [pc, #48]	; (b4ec <tc_pwm_interrupt_handler+0x64>)
    b4bc:	4798      	blx	r3
    b4be:	4603      	mov	r3, r0
    b4c0:	2b00      	cmp	r3, #0
    b4c2:	d00a      	beq.n	b4da <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    b4c4:	68f8      	ldr	r0, [r7, #12]
    b4c6:	4b0a      	ldr	r3, [pc, #40]	; (b4f0 <tc_pwm_interrupt_handler+0x68>)
    b4c8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	685b      	ldr	r3, [r3, #4]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d003      	beq.n	b4da <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	685b      	ldr	r3, [r3, #4]
    b4d6:	6878      	ldr	r0, [r7, #4]
    b4d8:	4798      	blx	r3
		}
	}
}
    b4da:	bf00      	nop
    b4dc:	3710      	adds	r7, #16
    b4de:	46bd      	mov	sp, r7
    b4e0:	bd80      	pop	{r7, pc}
    b4e2:	bf00      	nop
    b4e4:	0000aab9 	.word	0x0000aab9
    b4e8:	0000aae1 	.word	0x0000aae1
    b4ec:	0000ab2f 	.word	0x0000ab2f
    b4f0:	0000aafb 	.word	0x0000aafb

0000b4f4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    b4f4:	b580      	push	{r7, lr}
    b4f6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    b4f8:	4b03      	ldr	r3, [pc, #12]	; (b508 <TC0_Handler+0x14>)
    b4fa:	681b      	ldr	r3, [r3, #0]
    b4fc:	4618      	mov	r0, r3
    b4fe:	4b03      	ldr	r3, [pc, #12]	; (b50c <TC0_Handler+0x18>)
    b500:	4798      	blx	r3
}
    b502:	bf00      	nop
    b504:	bd80      	pop	{r7, pc}
    b506:	bf00      	nop
    b508:	200030d8 	.word	0x200030d8
    b50c:	0000b451 	.word	0x0000b451

0000b510 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    b510:	b580      	push	{r7, lr}
    b512:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    b514:	4b03      	ldr	r3, [pc, #12]	; (b524 <TC1_Handler+0x14>)
    b516:	681b      	ldr	r3, [r3, #0]
    b518:	4618      	mov	r0, r3
    b51a:	4b03      	ldr	r3, [pc, #12]	; (b528 <TC1_Handler+0x18>)
    b51c:	4798      	blx	r3
}
    b51e:	bf00      	nop
    b520:	bd80      	pop	{r7, pc}
    b522:	bf00      	nop
    b524:	200030dc 	.word	0x200030dc
    b528:	0000b451 	.word	0x0000b451

0000b52c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    b52c:	b580      	push	{r7, lr}
    b52e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    b530:	4b03      	ldr	r3, [pc, #12]	; (b540 <TC2_Handler+0x14>)
    b532:	681b      	ldr	r3, [r3, #0]
    b534:	4618      	mov	r0, r3
    b536:	4b03      	ldr	r3, [pc, #12]	; (b544 <TC2_Handler+0x18>)
    b538:	4798      	blx	r3
}
    b53a:	bf00      	nop
    b53c:	bd80      	pop	{r7, pc}
    b53e:	bf00      	nop
    b540:	200030e0 	.word	0x200030e0
    b544:	0000b451 	.word	0x0000b451

0000b548 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    b548:	b580      	push	{r7, lr}
    b54a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    b54c:	4b03      	ldr	r3, [pc, #12]	; (b55c <TC3_Handler+0x14>)
    b54e:	681b      	ldr	r3, [r3, #0]
    b550:	4618      	mov	r0, r3
    b552:	4b03      	ldr	r3, [pc, #12]	; (b560 <TC3_Handler+0x18>)
    b554:	4798      	blx	r3
}
    b556:	bf00      	nop
    b558:	bd80      	pop	{r7, pc}
    b55a:	bf00      	nop
    b55c:	200030e4 	.word	0x200030e4
    b560:	0000b451 	.word	0x0000b451

0000b564 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    b564:	b580      	push	{r7, lr}
    b566:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    b568:	4b03      	ldr	r3, [pc, #12]	; (b578 <TC4_Handler+0x14>)
    b56a:	681b      	ldr	r3, [r3, #0]
    b56c:	4618      	mov	r0, r3
    b56e:	4b03      	ldr	r3, [pc, #12]	; (b57c <TC4_Handler+0x18>)
    b570:	4798      	blx	r3
}
    b572:	bf00      	nop
    b574:	bd80      	pop	{r7, pc}
    b576:	bf00      	nop
    b578:	200030e8 	.word	0x200030e8
    b57c:	0000b451 	.word	0x0000b451

0000b580 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    b580:	b580      	push	{r7, lr}
    b582:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    b584:	4b03      	ldr	r3, [pc, #12]	; (b594 <TC5_Handler+0x14>)
    b586:	681b      	ldr	r3, [r3, #0]
    b588:	4618      	mov	r0, r3
    b58a:	4b03      	ldr	r3, [pc, #12]	; (b598 <TC5_Handler+0x18>)
    b58c:	4798      	blx	r3
}
    b58e:	bf00      	nop
    b590:	bd80      	pop	{r7, pc}
    b592:	bf00      	nop
    b594:	200030ec 	.word	0x200030ec
    b598:	0000b451 	.word	0x0000b451

0000b59c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    b59c:	b580      	push	{r7, lr}
    b59e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    b5a0:	4b03      	ldr	r3, [pc, #12]	; (b5b0 <TC7_Handler+0x14>)
    b5a2:	681b      	ldr	r3, [r3, #0]
    b5a4:	4618      	mov	r0, r3
    b5a6:	4b03      	ldr	r3, [pc, #12]	; (b5b4 <TC7_Handler+0x18>)
    b5a8:	4798      	blx	r3
}
    b5aa:	bf00      	nop
    b5ac:	bd80      	pop	{r7, pc}
    b5ae:	bf00      	nop
    b5b0:	200030f0 	.word	0x200030f0
    b5b4:	0000b489 	.word	0x0000b489

0000b5b8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	b084      	sub	sp, #16
    b5bc:	af00      	add	r7, sp, #0
    b5be:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    b5c0:	6878      	ldr	r0, [r7, #4]
    b5c2:	4b13      	ldr	r3, [pc, #76]	; (b610 <get_tc_index+0x58>)
    b5c4:	4798      	blx	r3
    b5c6:	4603      	mov	r3, r0
    b5c8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b5ca:	2300      	movs	r3, #0
    b5cc:	73fb      	strb	r3, [r7, #15]
    b5ce:	e010      	b.n	b5f2 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    b5d0:	7bfa      	ldrb	r2, [r7, #15]
    b5d2:	4910      	ldr	r1, [pc, #64]	; (b614 <get_tc_index+0x5c>)
    b5d4:	4613      	mov	r3, r2
    b5d6:	009b      	lsls	r3, r3, #2
    b5d8:	4413      	add	r3, r2
    b5da:	009b      	lsls	r3, r3, #2
    b5dc:	440b      	add	r3, r1
    b5de:	781b      	ldrb	r3, [r3, #0]
    b5e0:	7bba      	ldrb	r2, [r7, #14]
    b5e2:	429a      	cmp	r2, r3
    b5e4:	d102      	bne.n	b5ec <get_tc_index+0x34>
			return i;
    b5e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b5ea:	e00d      	b.n	b608 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b5ec:	7bfb      	ldrb	r3, [r7, #15]
    b5ee:	3301      	adds	r3, #1
    b5f0:	73fb      	strb	r3, [r7, #15]
    b5f2:	7bfb      	ldrb	r3, [r7, #15]
    b5f4:	2b06      	cmp	r3, #6
    b5f6:	d9eb      	bls.n	b5d0 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    b5f8:	f240 221a 	movw	r2, #538	; 0x21a
    b5fc:	4906      	ldr	r1, [pc, #24]	; (b618 <get_tc_index+0x60>)
    b5fe:	2000      	movs	r0, #0
    b600:	4b06      	ldr	r3, [pc, #24]	; (b61c <get_tc_index+0x64>)
    b602:	4798      	blx	r3
	return -1;
    b604:	f04f 33ff 	mov.w	r3, #4294967295
}
    b608:	4618      	mov	r0, r3
    b60a:	3710      	adds	r7, #16
    b60c:	46bd      	mov	sp, r7
    b60e:	bd80      	pop	{r7, pc}
    b610:	0000b6d1 	.word	0x0000b6d1
    b614:	200000ac 	.word	0x200000ac
    b618:	00017370 	.word	0x00017370
    b61c:	00006251 	.word	0x00006251

0000b620 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    b620:	b480      	push	{r7}
    b622:	b083      	sub	sp, #12
    b624:	af00      	add	r7, sp, #0
    b626:	6078      	str	r0, [r7, #4]
    b628:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    b62a:	687b      	ldr	r3, [r7, #4]
    b62c:	4a1a      	ldr	r2, [pc, #104]	; (b698 <_tc_init_irq_param+0x78>)
    b62e:	4293      	cmp	r3, r2
    b630:	d102      	bne.n	b638 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    b632:	4a1a      	ldr	r2, [pc, #104]	; (b69c <_tc_init_irq_param+0x7c>)
    b634:	683b      	ldr	r3, [r7, #0]
    b636:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    b638:	687b      	ldr	r3, [r7, #4]
    b63a:	4a19      	ldr	r2, [pc, #100]	; (b6a0 <_tc_init_irq_param+0x80>)
    b63c:	4293      	cmp	r3, r2
    b63e:	d102      	bne.n	b646 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    b640:	4a18      	ldr	r2, [pc, #96]	; (b6a4 <_tc_init_irq_param+0x84>)
    b642:	683b      	ldr	r3, [r7, #0]
    b644:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	4a17      	ldr	r2, [pc, #92]	; (b6a8 <_tc_init_irq_param+0x88>)
    b64a:	4293      	cmp	r3, r2
    b64c:	d102      	bne.n	b654 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    b64e:	4a17      	ldr	r2, [pc, #92]	; (b6ac <_tc_init_irq_param+0x8c>)
    b650:	683b      	ldr	r3, [r7, #0]
    b652:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    b654:	687b      	ldr	r3, [r7, #4]
    b656:	4a16      	ldr	r2, [pc, #88]	; (b6b0 <_tc_init_irq_param+0x90>)
    b658:	4293      	cmp	r3, r2
    b65a:	d102      	bne.n	b662 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    b65c:	4a15      	ldr	r2, [pc, #84]	; (b6b4 <_tc_init_irq_param+0x94>)
    b65e:	683b      	ldr	r3, [r7, #0]
    b660:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    b662:	687b      	ldr	r3, [r7, #4]
    b664:	4a14      	ldr	r2, [pc, #80]	; (b6b8 <_tc_init_irq_param+0x98>)
    b666:	4293      	cmp	r3, r2
    b668:	d102      	bne.n	b670 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    b66a:	4a14      	ldr	r2, [pc, #80]	; (b6bc <_tc_init_irq_param+0x9c>)
    b66c:	683b      	ldr	r3, [r7, #0]
    b66e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    b670:	687b      	ldr	r3, [r7, #4]
    b672:	4a13      	ldr	r2, [pc, #76]	; (b6c0 <_tc_init_irq_param+0xa0>)
    b674:	4293      	cmp	r3, r2
    b676:	d102      	bne.n	b67e <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    b678:	4a12      	ldr	r2, [pc, #72]	; (b6c4 <_tc_init_irq_param+0xa4>)
    b67a:	683b      	ldr	r3, [r7, #0]
    b67c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    b67e:	687b      	ldr	r3, [r7, #4]
    b680:	4a11      	ldr	r2, [pc, #68]	; (b6c8 <_tc_init_irq_param+0xa8>)
    b682:	4293      	cmp	r3, r2
    b684:	d102      	bne.n	b68c <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    b686:	4a11      	ldr	r2, [pc, #68]	; (b6cc <_tc_init_irq_param+0xac>)
    b688:	683b      	ldr	r3, [r7, #0]
    b68a:	6013      	str	r3, [r2, #0]
	}
}
    b68c:	bf00      	nop
    b68e:	370c      	adds	r7, #12
    b690:	46bd      	mov	sp, r7
    b692:	f85d 7b04 	ldr.w	r7, [sp], #4
    b696:	4770      	bx	lr
    b698:	40003800 	.word	0x40003800
    b69c:	200030d8 	.word	0x200030d8
    b6a0:	40003c00 	.word	0x40003c00
    b6a4:	200030dc 	.word	0x200030dc
    b6a8:	4101a000 	.word	0x4101a000
    b6ac:	200030e0 	.word	0x200030e0
    b6b0:	4101c000 	.word	0x4101c000
    b6b4:	200030e4 	.word	0x200030e4
    b6b8:	42001400 	.word	0x42001400
    b6bc:	200030e8 	.word	0x200030e8
    b6c0:	42001800 	.word	0x42001800
    b6c4:	200030ec 	.word	0x200030ec
    b6c8:	43001800 	.word	0x43001800
    b6cc:	200030f0 	.word	0x200030f0

0000b6d0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    b6d0:	b4b0      	push	{r4, r5, r7}
    b6d2:	b08d      	sub	sp, #52	; 0x34
    b6d4:	af00      	add	r7, sp, #0
    b6d6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    b6d8:	4b13      	ldr	r3, [pc, #76]	; (b728 <_get_hardware_offset+0x58>)
    b6da:	f107 040c 	add.w	r4, r7, #12
    b6de:	461d      	mov	r5, r3
    b6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b6e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b6e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b6ec:	2300      	movs	r3, #0
    b6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    b6f0:	e010      	b.n	b714 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6f4:	009b      	lsls	r3, r3, #2
    b6f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b6fa:	4413      	add	r3, r2
    b6fc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b700:	461a      	mov	r2, r3
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	429a      	cmp	r2, r3
    b706:	d102      	bne.n	b70e <_get_hardware_offset+0x3e>
			return i;
    b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b70a:	b2db      	uxtb	r3, r3
    b70c:	e006      	b.n	b71c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b710:	3301      	adds	r3, #1
    b712:	62fb      	str	r3, [r7, #44]	; 0x2c
    b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b716:	2b07      	cmp	r3, #7
    b718:	d9eb      	bls.n	b6f2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    b71a:	2300      	movs	r3, #0
}
    b71c:	4618      	mov	r0, r3
    b71e:	3734      	adds	r7, #52	; 0x34
    b720:	46bd      	mov	sp, r7
    b722:	bcb0      	pop	{r4, r5, r7}
    b724:	4770      	bx	lr
    b726:	bf00      	nop
    b728:	00017384 	.word	0x00017384

0000b72c <__NVIC_EnableIRQ>:
{
    b72c:	b480      	push	{r7}
    b72e:	b083      	sub	sp, #12
    b730:	af00      	add	r7, sp, #0
    b732:	4603      	mov	r3, r0
    b734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b73a:	2b00      	cmp	r3, #0
    b73c:	db0b      	blt.n	b756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b73e:	4909      	ldr	r1, [pc, #36]	; (b764 <__NVIC_EnableIRQ+0x38>)
    b740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b744:	095b      	lsrs	r3, r3, #5
    b746:	88fa      	ldrh	r2, [r7, #6]
    b748:	f002 021f 	and.w	r2, r2, #31
    b74c:	2001      	movs	r0, #1
    b74e:	fa00 f202 	lsl.w	r2, r0, r2
    b752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b756:	bf00      	nop
    b758:	370c      	adds	r7, #12
    b75a:	46bd      	mov	sp, r7
    b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b760:	4770      	bx	lr
    b762:	bf00      	nop
    b764:	e000e100 	.word	0xe000e100

0000b768 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    b768:	b480      	push	{r7}
    b76a:	b087      	sub	sp, #28
    b76c:	af00      	add	r7, sp, #0
    b76e:	60f8      	str	r0, [r7, #12]
    b770:	460b      	mov	r3, r1
    b772:	607a      	str	r2, [r7, #4]
    b774:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    b776:	7afa      	ldrb	r2, [r7, #11]
    b778:	68f9      	ldr	r1, [r7, #12]
    b77a:	4613      	mov	r3, r2
    b77c:	009b      	lsls	r3, r3, #2
    b77e:	4413      	add	r3, r2
    b780:	009b      	lsls	r3, r3, #2
    b782:	440b      	add	r3, r1
    b784:	3340      	adds	r3, #64	; 0x40
    b786:	681b      	ldr	r3, [r3, #0]
    b788:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    b78a:	697a      	ldr	r2, [r7, #20]
    b78c:	687b      	ldr	r3, [r7, #4]
    b78e:	4013      	ands	r3, r2
    b790:	617b      	str	r3, [r7, #20]
	return tmp;
    b792:	697b      	ldr	r3, [r7, #20]
}
    b794:	4618      	mov	r0, r3
    b796:	371c      	adds	r7, #28
    b798:	46bd      	mov	sp, r7
    b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b79e:	4770      	bx	lr

0000b7a0 <hri_oscctrl_get_STATUS_reg>:
{
    b7a0:	b480      	push	{r7}
    b7a2:	b085      	sub	sp, #20
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	6078      	str	r0, [r7, #4]
    b7a8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b7aa:	687b      	ldr	r3, [r7, #4]
    b7ac:	691b      	ldr	r3, [r3, #16]
    b7ae:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b7b0:	68fa      	ldr	r2, [r7, #12]
    b7b2:	683b      	ldr	r3, [r7, #0]
    b7b4:	4013      	ands	r3, r2
    b7b6:	60fb      	str	r3, [r7, #12]
	return tmp;
    b7b8:	68fb      	ldr	r3, [r7, #12]
}
    b7ba:	4618      	mov	r0, r3
    b7bc:	3714      	adds	r7, #20
    b7be:	46bd      	mov	sp, r7
    b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7c4:	4770      	bx	lr

0000b7c6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    b7c6:	b480      	push	{r7}
    b7c8:	b085      	sub	sp, #20
    b7ca:	af00      	add	r7, sp, #0
    b7cc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    b7ce:	687b      	ldr	r3, [r7, #4]
    b7d0:	f893 3020 	ldrb.w	r3, [r3, #32]
    b7d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    b7d6:	7bfb      	ldrb	r3, [r7, #15]
    b7d8:	f003 0301 	and.w	r3, r3, #1
    b7dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b7de:	7bfb      	ldrb	r3, [r7, #15]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	bf14      	ite	ne
    b7e4:	2301      	movne	r3, #1
    b7e6:	2300      	moveq	r3, #0
    b7e8:	b2db      	uxtb	r3, r3
}
    b7ea:	4618      	mov	r0, r3
    b7ec:	3714      	adds	r7, #20
    b7ee:	46bd      	mov	sp, r7
    b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7f4:	4770      	bx	lr

0000b7f6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    b7f6:	b480      	push	{r7}
    b7f8:	b083      	sub	sp, #12
    b7fa:	af00      	add	r7, sp, #0
    b7fc:	6078      	str	r0, [r7, #4]
    b7fe:	460b      	mov	r3, r1
    b800:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b802:	bf00      	nop
    b804:	687b      	ldr	r3, [r7, #4]
    b806:	789b      	ldrb	r3, [r3, #2]
    b808:	b2da      	uxtb	r2, r3
    b80a:	78fb      	ldrb	r3, [r7, #3]
    b80c:	4013      	ands	r3, r2
    b80e:	b2db      	uxtb	r3, r3
    b810:	2b00      	cmp	r3, #0
    b812:	d1f7      	bne.n	b804 <hri_usb_wait_for_sync+0xe>
	};
}
    b814:	bf00      	nop
    b816:	370c      	adds	r7, #12
    b818:	46bd      	mov	sp, r7
    b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81e:	4770      	bx	lr

0000b820 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    b820:	b480      	push	{r7}
    b822:	b083      	sub	sp, #12
    b824:	af00      	add	r7, sp, #0
    b826:	6078      	str	r0, [r7, #4]
    b828:	460b      	mov	r3, r1
    b82a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	789b      	ldrb	r3, [r3, #2]
    b830:	b2da      	uxtb	r2, r3
    b832:	78fb      	ldrb	r3, [r7, #3]
    b834:	4013      	ands	r3, r2
    b836:	b2db      	uxtb	r3, r3
    b838:	2b00      	cmp	r3, #0
    b83a:	bf14      	ite	ne
    b83c:	2301      	movne	r3, #1
    b83e:	2300      	moveq	r3, #0
    b840:	b2db      	uxtb	r3, r3
}
    b842:	4618      	mov	r0, r3
    b844:	370c      	adds	r7, #12
    b846:	46bd      	mov	sp, r7
    b848:	f85d 7b04 	ldr.w	r7, [sp], #4
    b84c:	4770      	bx	lr

0000b84e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    b84e:	b480      	push	{r7}
    b850:	b085      	sub	sp, #20
    b852:	af00      	add	r7, sp, #0
    b854:	6078      	str	r0, [r7, #4]
    b856:	460b      	mov	r3, r1
    b858:	70fb      	strb	r3, [r7, #3]
    b85a:	4613      	mov	r3, r2
    b85c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b85e:	78fb      	ldrb	r3, [r7, #3]
    b860:	687a      	ldr	r2, [r7, #4]
    b862:	3308      	adds	r3, #8
    b864:	015b      	lsls	r3, r3, #5
    b866:	4413      	add	r3, r2
    b868:	3307      	adds	r3, #7
    b86a:	781b      	ldrb	r3, [r3, #0]
    b86c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b86e:	7bfa      	ldrb	r2, [r7, #15]
    b870:	78bb      	ldrb	r3, [r7, #2]
    b872:	4013      	ands	r3, r2
    b874:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b876:	7bfb      	ldrb	r3, [r7, #15]
}
    b878:	4618      	mov	r0, r3
    b87a:	3714      	adds	r7, #20
    b87c:	46bd      	mov	sp, r7
    b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b882:	4770      	bx	lr

0000b884 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    b884:	b480      	push	{r7}
    b886:	b083      	sub	sp, #12
    b888:	af00      	add	r7, sp, #0
    b88a:	6078      	str	r0, [r7, #4]
    b88c:	460b      	mov	r3, r1
    b88e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b890:	78fb      	ldrb	r3, [r7, #3]
    b892:	687a      	ldr	r2, [r7, #4]
    b894:	3308      	adds	r3, #8
    b896:	015b      	lsls	r3, r3, #5
    b898:	4413      	add	r3, r2
    b89a:	3307      	adds	r3, #7
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	b2db      	uxtb	r3, r3
}
    b8a0:	4618      	mov	r0, r3
    b8a2:	370c      	adds	r7, #12
    b8a4:	46bd      	mov	sp, r7
    b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8aa:	4770      	bx	lr

0000b8ac <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    b8ac:	b480      	push	{r7}
    b8ae:	b083      	sub	sp, #12
    b8b0:	af00      	add	r7, sp, #0
    b8b2:	6078      	str	r0, [r7, #4]
    b8b4:	460b      	mov	r3, r1
    b8b6:	70fb      	strb	r3, [r7, #3]
    b8b8:	4613      	mov	r3, r2
    b8ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b8bc:	78fb      	ldrb	r3, [r7, #3]
    b8be:	687a      	ldr	r2, [r7, #4]
    b8c0:	3308      	adds	r3, #8
    b8c2:	015b      	lsls	r3, r3, #5
    b8c4:	4413      	add	r3, r2
    b8c6:	3307      	adds	r3, #7
    b8c8:	78ba      	ldrb	r2, [r7, #2]
    b8ca:	701a      	strb	r2, [r3, #0]
}
    b8cc:	bf00      	nop
    b8ce:	370c      	adds	r7, #12
    b8d0:	46bd      	mov	sp, r7
    b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8d6:	4770      	bx	lr

0000b8d8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    b8d8:	b480      	push	{r7}
    b8da:	b083      	sub	sp, #12
    b8dc:	af00      	add	r7, sp, #0
    b8de:	6078      	str	r0, [r7, #4]
    b8e0:	460b      	mov	r3, r1
    b8e2:	70fb      	strb	r3, [r7, #3]
    b8e4:	4613      	mov	r3, r2
    b8e6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b8e8:	78fb      	ldrb	r3, [r7, #3]
    b8ea:	687a      	ldr	r2, [r7, #4]
    b8ec:	3308      	adds	r3, #8
    b8ee:	015b      	lsls	r3, r3, #5
    b8f0:	4413      	add	r3, r2
    b8f2:	3305      	adds	r3, #5
    b8f4:	78ba      	ldrb	r2, [r7, #2]
    b8f6:	701a      	strb	r2, [r3, #0]
}
    b8f8:	bf00      	nop
    b8fa:	370c      	adds	r7, #12
    b8fc:	46bd      	mov	sp, r7
    b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    b902:	4770      	bx	lr

0000b904 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    b904:	b480      	push	{r7}
    b906:	b083      	sub	sp, #12
    b908:	af00      	add	r7, sp, #0
    b90a:	6078      	str	r0, [r7, #4]
    b90c:	460b      	mov	r3, r1
    b90e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b910:	78fb      	ldrb	r3, [r7, #3]
    b912:	687a      	ldr	r2, [r7, #4]
    b914:	3308      	adds	r3, #8
    b916:	015b      	lsls	r3, r3, #5
    b918:	4413      	add	r3, r2
    b91a:	3306      	adds	r3, #6
    b91c:	781b      	ldrb	r3, [r3, #0]
    b91e:	b2db      	uxtb	r3, r3
}
    b920:	4618      	mov	r0, r3
    b922:	370c      	adds	r7, #12
    b924:	46bd      	mov	sp, r7
    b926:	f85d 7b04 	ldr.w	r7, [sp], #4
    b92a:	4770      	bx	lr

0000b92c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    b92c:	b480      	push	{r7}
    b92e:	b083      	sub	sp, #12
    b930:	af00      	add	r7, sp, #0
    b932:	6078      	str	r0, [r7, #4]
    b934:	460b      	mov	r3, r1
    b936:	70fb      	strb	r3, [r7, #3]
    b938:	4613      	mov	r3, r2
    b93a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b93c:	78fb      	ldrb	r3, [r7, #3]
    b93e:	687a      	ldr	r2, [r7, #4]
    b940:	3308      	adds	r3, #8
    b942:	015b      	lsls	r3, r3, #5
    b944:	4413      	add	r3, r2
    b946:	3304      	adds	r3, #4
    b948:	78ba      	ldrb	r2, [r7, #2]
    b94a:	701a      	strb	r2, [r3, #0]
}
    b94c:	bf00      	nop
    b94e:	370c      	adds	r7, #12
    b950:	46bd      	mov	sp, r7
    b952:	f85d 7b04 	ldr.w	r7, [sp], #4
    b956:	4770      	bx	lr

0000b958 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    b958:	b480      	push	{r7}
    b95a:	b083      	sub	sp, #12
    b95c:	af00      	add	r7, sp, #0
    b95e:	6078      	str	r0, [r7, #4]
    b960:	460b      	mov	r3, r1
    b962:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    b964:	78fb      	ldrb	r3, [r7, #3]
    b966:	687a      	ldr	r2, [r7, #4]
    b968:	015b      	lsls	r3, r3, #5
    b96a:	4413      	add	r3, r2
    b96c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b970:	2210      	movs	r2, #16
    b972:	701a      	strb	r2, [r3, #0]
}
    b974:	bf00      	nop
    b976:	370c      	adds	r7, #12
    b978:	46bd      	mov	sp, r7
    b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b97e:	4770      	bx	lr

0000b980 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    b980:	b480      	push	{r7}
    b982:	b083      	sub	sp, #12
    b984:	af00      	add	r7, sp, #0
    b986:	6078      	str	r0, [r7, #4]
    b988:	460b      	mov	r3, r1
    b98a:	70fb      	strb	r3, [r7, #3]
    b98c:	4613      	mov	r3, r2
    b98e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b990:	78fb      	ldrb	r3, [r7, #3]
    b992:	687a      	ldr	r2, [r7, #4]
    b994:	015b      	lsls	r3, r3, #5
    b996:	4413      	add	r3, r2
    b998:	f203 1309 	addw	r3, r3, #265	; 0x109
    b99c:	78ba      	ldrb	r2, [r7, #2]
    b99e:	701a      	strb	r2, [r3, #0]
}
    b9a0:	bf00      	nop
    b9a2:	370c      	adds	r7, #12
    b9a4:	46bd      	mov	sp, r7
    b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9aa:	4770      	bx	lr

0000b9ac <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    b9ac:	b480      	push	{r7}
    b9ae:	b083      	sub	sp, #12
    b9b0:	af00      	add	r7, sp, #0
    b9b2:	6078      	str	r0, [r7, #4]
    b9b4:	460b      	mov	r3, r1
    b9b6:	70fb      	strb	r3, [r7, #3]
    b9b8:	4613      	mov	r3, r2
    b9ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    b9bc:	78fb      	ldrb	r3, [r7, #3]
    b9be:	687a      	ldr	r2, [r7, #4]
    b9c0:	015b      	lsls	r3, r3, #5
    b9c2:	4413      	add	r3, r2
    b9c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b9c8:	78ba      	ldrb	r2, [r7, #2]
    b9ca:	701a      	strb	r2, [r3, #0]
}
    b9cc:	bf00      	nop
    b9ce:	370c      	adds	r7, #12
    b9d0:	46bd      	mov	sp, r7
    b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9d6:	4770      	bx	lr

0000b9d8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    b9d8:	b480      	push	{r7}
    b9da:	b085      	sub	sp, #20
    b9dc:	af00      	add	r7, sp, #0
    b9de:	6078      	str	r0, [r7, #4]
    b9e0:	460b      	mov	r3, r1
    b9e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b9e4:	78fb      	ldrb	r3, [r7, #3]
    b9e6:	687a      	ldr	r2, [r7, #4]
    b9e8:	3308      	adds	r3, #8
    b9ea:	015b      	lsls	r3, r3, #5
    b9ec:	4413      	add	r3, r2
    b9ee:	781b      	ldrb	r3, [r3, #0]
    b9f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    b9f2:	7bfb      	ldrb	r3, [r7, #15]
    b9f4:	f003 0307 	and.w	r3, r3, #7
    b9f8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
    b9fc:	4618      	mov	r0, r3
    b9fe:	3714      	adds	r7, #20
    ba00:	46bd      	mov	sp, r7
    ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba06:	4770      	bx	lr

0000ba08 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ba08:	b480      	push	{r7}
    ba0a:	b085      	sub	sp, #20
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	6078      	str	r0, [r7, #4]
    ba10:	460b      	mov	r3, r1
    ba12:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ba14:	78fb      	ldrb	r3, [r7, #3]
    ba16:	687a      	ldr	r2, [r7, #4]
    ba18:	3308      	adds	r3, #8
    ba1a:	015b      	lsls	r3, r3, #5
    ba1c:	4413      	add	r3, r2
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    ba22:	7bfb      	ldrb	r3, [r7, #15]
    ba24:	091b      	lsrs	r3, r3, #4
    ba26:	b2db      	uxtb	r3, r3
    ba28:	f003 0307 	and.w	r3, r3, #7
    ba2c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ba2e:	7bfb      	ldrb	r3, [r7, #15]
}
    ba30:	4618      	mov	r0, r3
    ba32:	3714      	adds	r7, #20
    ba34:	46bd      	mov	sp, r7
    ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba3a:	4770      	bx	lr

0000ba3c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    ba3c:	b480      	push	{r7}
    ba3e:	b083      	sub	sp, #12
    ba40:	af00      	add	r7, sp, #0
    ba42:	6078      	str	r0, [r7, #4]
    ba44:	460b      	mov	r3, r1
    ba46:	70fb      	strb	r3, [r7, #3]
    ba48:	4613      	mov	r3, r2
    ba4a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    ba4c:	78fb      	ldrb	r3, [r7, #3]
    ba4e:	687a      	ldr	r2, [r7, #4]
    ba50:	3308      	adds	r3, #8
    ba52:	015b      	lsls	r3, r3, #5
    ba54:	4413      	add	r3, r2
    ba56:	78ba      	ldrb	r2, [r7, #2]
    ba58:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    ba5a:	bf00      	nop
    ba5c:	370c      	adds	r7, #12
    ba5e:	46bd      	mov	sp, r7
    ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba64:	4770      	bx	lr

0000ba66 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    ba66:	b480      	push	{r7}
    ba68:	b083      	sub	sp, #12
    ba6a:	af00      	add	r7, sp, #0
    ba6c:	6078      	str	r0, [r7, #4]
    ba6e:	460b      	mov	r3, r1
    ba70:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ba72:	78fb      	ldrb	r3, [r7, #3]
    ba74:	687a      	ldr	r2, [r7, #4]
    ba76:	3308      	adds	r3, #8
    ba78:	015b      	lsls	r3, r3, #5
    ba7a:	4413      	add	r3, r2
    ba7c:	781b      	ldrb	r3, [r3, #0]
    ba7e:	b2db      	uxtb	r3, r3
}
    ba80:	4618      	mov	r0, r3
    ba82:	370c      	adds	r7, #12
    ba84:	46bd      	mov	sp, r7
    ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba8a:	4770      	bx	lr

0000ba8c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    ba8c:	b480      	push	{r7}
    ba8e:	b083      	sub	sp, #12
    ba90:	af00      	add	r7, sp, #0
    ba92:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    ba94:	687b      	ldr	r3, [r7, #4]
    ba96:	8b9b      	ldrh	r3, [r3, #28]
    ba98:	b29b      	uxth	r3, r3
}
    ba9a:	4618      	mov	r0, r3
    ba9c:	370c      	adds	r7, #12
    ba9e:	46bd      	mov	sp, r7
    baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    baa4:	4770      	bx	lr

0000baa6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    baa6:	b480      	push	{r7}
    baa8:	b083      	sub	sp, #12
    baaa:	af00      	add	r7, sp, #0
    baac:	6078      	str	r0, [r7, #4]
    baae:	460b      	mov	r3, r1
    bab0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bab2:	687b      	ldr	r3, [r7, #4]
    bab4:	887a      	ldrh	r2, [r7, #2]
    bab6:	839a      	strh	r2, [r3, #28]
}
    bab8:	bf00      	nop
    baba:	370c      	adds	r7, #12
    babc:	46bd      	mov	sp, r7
    babe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac2:	4770      	bx	lr

0000bac4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bac4:	b480      	push	{r7}
    bac6:	b083      	sub	sp, #12
    bac8:	af00      	add	r7, sp, #0
    baca:	6078      	str	r0, [r7, #4]
    bacc:	460b      	mov	r3, r1
    bace:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bad0:	687b      	ldr	r3, [r7, #4]
    bad2:	887a      	ldrh	r2, [r7, #2]
    bad4:	831a      	strh	r2, [r3, #24]
}
    bad6:	bf00      	nop
    bad8:	370c      	adds	r7, #12
    bada:	46bd      	mov	sp, r7
    badc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bae0:	4770      	bx	lr

0000bae2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    bae2:	b480      	push	{r7}
    bae4:	b083      	sub	sp, #12
    bae6:	af00      	add	r7, sp, #0
    bae8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	8b1b      	ldrh	r3, [r3, #24]
    baee:	b29b      	uxth	r3, r3
}
    baf0:	4618      	mov	r0, r3
    baf2:	370c      	adds	r7, #12
    baf4:	46bd      	mov	sp, r7
    baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bafa:	4770      	bx	lr

0000bafc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bafc:	b480      	push	{r7}
    bafe:	b083      	sub	sp, #12
    bb00:	af00      	add	r7, sp, #0
    bb02:	6078      	str	r0, [r7, #4]
    bb04:	460b      	mov	r3, r1
    bb06:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bb08:	687b      	ldr	r3, [r7, #4]
    bb0a:	887a      	ldrh	r2, [r7, #2]
    bb0c:	829a      	strh	r2, [r3, #20]
}
    bb0e:	bf00      	nop
    bb10:	370c      	adds	r7, #12
    bb12:	46bd      	mov	sp, r7
    bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb18:	4770      	bx	lr

0000bb1a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    bb1a:	b480      	push	{r7}
    bb1c:	b085      	sub	sp, #20
    bb1e:	af00      	add	r7, sp, #0
    bb20:	6078      	str	r0, [r7, #4]
    bb22:	460b      	mov	r3, r1
    bb24:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    bb26:	687b      	ldr	r3, [r7, #4]
    bb28:	789b      	ldrb	r3, [r3, #2]
    bb2a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bb2c:	7bfa      	ldrb	r2, [r7, #15]
    bb2e:	78fb      	ldrb	r3, [r7, #3]
    bb30:	4013      	ands	r3, r2
    bb32:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bb34:	7bfb      	ldrb	r3, [r7, #15]
}
    bb36:	4618      	mov	r0, r3
    bb38:	3714      	adds	r7, #20
    bb3a:	46bd      	mov	sp, r7
    bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb40:	4770      	bx	lr
	...

0000bb44 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    bb44:	b580      	push	{r7, lr}
    bb46:	b082      	sub	sp, #8
    bb48:	af00      	add	r7, sp, #0
    bb4a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	781b      	ldrb	r3, [r3, #0]
    bb50:	b2db      	uxtb	r3, r3
    bb52:	f023 0302 	bic.w	r3, r3, #2
    bb56:	b2da      	uxtb	r2, r3
    bb58:	687b      	ldr	r3, [r7, #4]
    bb5a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    bb5c:	2103      	movs	r1, #3
    bb5e:	6878      	ldr	r0, [r7, #4]
    bb60:	4b02      	ldr	r3, [pc, #8]	; (bb6c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    bb62:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bb64:	bf00      	nop
    bb66:	3708      	adds	r7, #8
    bb68:	46bd      	mov	sp, r7
    bb6a:	bd80      	pop	{r7, pc}
    bb6c:	0000b7f7 	.word	0x0000b7f7

0000bb70 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b084      	sub	sp, #16
    bb74:	af00      	add	r7, sp, #0
    bb76:	6078      	str	r0, [r7, #4]
    bb78:	460b      	mov	r3, r1
    bb7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bb7c:	2103      	movs	r1, #3
    bb7e:	6878      	ldr	r0, [r7, #4]
    bb80:	4b06      	ldr	r3, [pc, #24]	; (bb9c <hri_usb_get_CTRLA_reg+0x2c>)
    bb82:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    bb84:	687b      	ldr	r3, [r7, #4]
    bb86:	781b      	ldrb	r3, [r3, #0]
    bb88:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bb8a:	7bfa      	ldrb	r2, [r7, #15]
    bb8c:	78fb      	ldrb	r3, [r7, #3]
    bb8e:	4013      	ands	r3, r2
    bb90:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bb92:	7bfb      	ldrb	r3, [r7, #15]
}
    bb94:	4618      	mov	r0, r3
    bb96:	3710      	adds	r7, #16
    bb98:	46bd      	mov	sp, r7
    bb9a:	bd80      	pop	{r7, pc}
    bb9c:	0000b7f7 	.word	0x0000b7f7

0000bba0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    bba0:	b580      	push	{r7, lr}
    bba2:	b082      	sub	sp, #8
    bba4:	af00      	add	r7, sp, #0
    bba6:	6078      	str	r0, [r7, #4]
    bba8:	460b      	mov	r3, r1
    bbaa:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    bbac:	687b      	ldr	r3, [r7, #4]
    bbae:	78fa      	ldrb	r2, [r7, #3]
    bbb0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bbb2:	2103      	movs	r1, #3
    bbb4:	6878      	ldr	r0, [r7, #4]
    bbb6:	4b03      	ldr	r3, [pc, #12]	; (bbc4 <hri_usb_write_CTRLA_reg+0x24>)
    bbb8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bbba:	bf00      	nop
    bbbc:	3708      	adds	r7, #8
    bbbe:	46bd      	mov	sp, r7
    bbc0:	bd80      	pop	{r7, pc}
    bbc2:	bf00      	nop
    bbc4:	0000b7f7 	.word	0x0000b7f7

0000bbc8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    bbc8:	b580      	push	{r7, lr}
    bbca:	b082      	sub	sp, #8
    bbcc:	af00      	add	r7, sp, #0
    bbce:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bbd0:	2103      	movs	r1, #3
    bbd2:	6878      	ldr	r0, [r7, #4]
    bbd4:	4b04      	ldr	r3, [pc, #16]	; (bbe8 <hri_usb_read_CTRLA_reg+0x20>)
    bbd6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    bbd8:	687b      	ldr	r3, [r7, #4]
    bbda:	781b      	ldrb	r3, [r3, #0]
    bbdc:	b2db      	uxtb	r3, r3
}
    bbde:	4618      	mov	r0, r3
    bbe0:	3708      	adds	r7, #8
    bbe2:	46bd      	mov	sp, r7
    bbe4:	bd80      	pop	{r7, pc}
    bbe6:	bf00      	nop
    bbe8:	0000b7f7 	.word	0x0000b7f7

0000bbec <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    bbec:	b480      	push	{r7}
    bbee:	b083      	sub	sp, #12
    bbf0:	af00      	add	r7, sp, #0
    bbf2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    bbf4:	687b      	ldr	r3, [r7, #4]
    bbf6:	891b      	ldrh	r3, [r3, #8]
    bbf8:	b29b      	uxth	r3, r3
    bbfa:	f023 0301 	bic.w	r3, r3, #1
    bbfe:	b29a      	uxth	r2, r3
    bc00:	687b      	ldr	r3, [r7, #4]
    bc02:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc04:	bf00      	nop
    bc06:	370c      	adds	r7, #12
    bc08:	46bd      	mov	sp, r7
    bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc0e:	4770      	bx	lr

0000bc10 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    bc10:	b480      	push	{r7}
    bc12:	b083      	sub	sp, #12
    bc14:	af00      	add	r7, sp, #0
    bc16:	6078      	str	r0, [r7, #4]
    bc18:	460b      	mov	r3, r1
    bc1a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    bc1c:	687b      	ldr	r3, [r7, #4]
    bc1e:	887a      	ldrh	r2, [r7, #2]
    bc20:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc22:	bf00      	nop
    bc24:	370c      	adds	r7, #12
    bc26:	46bd      	mov	sp, r7
    bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc2c:	4770      	bx	lr

0000bc2e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    bc2e:	b480      	push	{r7}
    bc30:	b083      	sub	sp, #12
    bc32:	af00      	add	r7, sp, #0
    bc34:	6078      	str	r0, [r7, #4]
    bc36:	460b      	mov	r3, r1
    bc38:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    bc3a:	687b      	ldr	r3, [r7, #4]
    bc3c:	78fa      	ldrb	r2, [r7, #3]
    bc3e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc40:	bf00      	nop
    bc42:	370c      	adds	r7, #12
    bc44:	46bd      	mov	sp, r7
    bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc4a:	4770      	bx	lr

0000bc4c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    bc4c:	b480      	push	{r7}
    bc4e:	b083      	sub	sp, #12
    bc50:	af00      	add	r7, sp, #0
    bc52:	6078      	str	r0, [r7, #4]
    bc54:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    bc56:	687b      	ldr	r3, [r7, #4]
    bc58:	683a      	ldr	r2, [r7, #0]
    bc5a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    bc5c:	bf00      	nop
    bc5e:	370c      	adds	r7, #12
    bc60:	46bd      	mov	sp, r7
    bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc66:	4770      	bx	lr

0000bc68 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    bc68:	b480      	push	{r7}
    bc6a:	b083      	sub	sp, #12
    bc6c:	af00      	add	r7, sp, #0
    bc6e:	6078      	str	r0, [r7, #4]
    bc70:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    bc72:	2300      	movs	r3, #0
}
    bc74:	4618      	mov	r0, r3
    bc76:	370c      	adds	r7, #12
    bc78:	46bd      	mov	sp, r7
    bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc7e:	4770      	bx	lr

0000bc80 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    bc80:	b480      	push	{r7}
    bc82:	b085      	sub	sp, #20
    bc84:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    bc86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc8a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    bc8c:	4b28      	ldr	r3, [pc, #160]	; (bd30 <_usb_load_calib+0xb0>)
    bc8e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    bc90:	f003 031f 	and.w	r3, r3, #31
    bc94:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    bc96:	4b26      	ldr	r3, [pc, #152]	; (bd30 <_usb_load_calib+0xb0>)
    bc98:	681b      	ldr	r3, [r3, #0]
    bc9a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    bc9c:	f003 031f 	and.w	r3, r3, #31
    bca0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    bca2:	4b23      	ldr	r3, [pc, #140]	; (bd30 <_usb_load_calib+0xb0>)
    bca4:	681b      	ldr	r3, [r3, #0]
    bca6:	0a9b      	lsrs	r3, r3, #10
    bca8:	f003 0307 	and.w	r3, r3, #7
    bcac:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    bcae:	68fb      	ldr	r3, [r7, #12]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d002      	beq.n	bcba <_usb_load_calib+0x3a>
    bcb4:	68fb      	ldr	r3, [r7, #12]
    bcb6:	2b1f      	cmp	r3, #31
    bcb8:	d101      	bne.n	bcbe <_usb_load_calib+0x3e>
		pad_transn = 9;
    bcba:	2309      	movs	r3, #9
    bcbc:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    bcbe:	68bb      	ldr	r3, [r7, #8]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d002      	beq.n	bcca <_usb_load_calib+0x4a>
    bcc4:	68bb      	ldr	r3, [r7, #8]
    bcc6:	2b1f      	cmp	r3, #31
    bcc8:	d101      	bne.n	bcce <_usb_load_calib+0x4e>
		pad_transp = 25;
    bcca:	2319      	movs	r3, #25
    bccc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    bcce:	687b      	ldr	r3, [r7, #4]
    bcd0:	2b00      	cmp	r3, #0
    bcd2:	d002      	beq.n	bcda <_usb_load_calib+0x5a>
    bcd4:	687b      	ldr	r3, [r7, #4]
    bcd6:	2b07      	cmp	r3, #7
    bcd8:	d101      	bne.n	bcde <_usb_load_calib+0x5e>
		pad_trim = 6;
    bcda:	2306      	movs	r3, #6
    bcdc:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    bcde:	68fb      	ldr	r3, [r7, #12]
    bce0:	b29b      	uxth	r3, r3
    bce2:	019b      	lsls	r3, r3, #6
    bce4:	b29b      	uxth	r3, r3
    bce6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    bcea:	b29a      	uxth	r2, r3
    bcec:	68bb      	ldr	r3, [r7, #8]
    bcee:	b29b      	uxth	r3, r3
    bcf0:	f003 031f 	and.w	r3, r3, #31
    bcf4:	b29b      	uxth	r3, r3
    bcf6:	4313      	orrs	r3, r2
    bcf8:	b29a      	uxth	r2, r3
    bcfa:	687b      	ldr	r3, [r7, #4]
    bcfc:	b29b      	uxth	r3, r3
    bcfe:	031b      	lsls	r3, r3, #12
    bd00:	b29b      	uxth	r3, r3
    bd02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    bd06:	b29b      	uxth	r3, r3
    bd08:	4313      	orrs	r3, r2
    bd0a:	b29a      	uxth	r2, r3
    bd0c:	683b      	ldr	r3, [r7, #0]
    bd0e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    bd10:	683a      	ldr	r2, [r7, #0]
    bd12:	78d3      	ldrb	r3, [r2, #3]
    bd14:	f043 0303 	orr.w	r3, r3, #3
    bd18:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    bd1a:	683a      	ldr	r2, [r7, #0]
    bd1c:	78d3      	ldrb	r3, [r2, #3]
    bd1e:	f043 030c 	orr.w	r3, r3, #12
    bd22:	70d3      	strb	r3, [r2, #3]
}
    bd24:	bf00      	nop
    bd26:	3714      	adds	r7, #20
    bd28:	46bd      	mov	sp, r7
    bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd2e:	4770      	bx	lr
    bd30:	00800084 	.word	0x00800084

0000bd34 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    bd34:	b580      	push	{r7, lr}
    bd36:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    bd38:	bf00      	nop
    bd3a:	2203      	movs	r2, #3
    bd3c:	2100      	movs	r1, #0
    bd3e:	4804      	ldr	r0, [pc, #16]	; (bd50 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    bd40:	4b04      	ldr	r3, [pc, #16]	; (bd54 <_usb_d_dev_wait_dpll_rdy+0x20>)
    bd42:	4798      	blx	r3
    bd44:	4603      	mov	r3, r0
    bd46:	2b03      	cmp	r3, #3
    bd48:	d1f7      	bne.n	bd3a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    bd4a:	bf00      	nop
    bd4c:	bd80      	pop	{r7, pc}
    bd4e:	bf00      	nop
    bd50:	40001000 	.word	0x40001000
    bd54:	0000b769 	.word	0x0000b769

0000bd58 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    bd58:	b580      	push	{r7, lr}
    bd5a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    bd5c:	480e      	ldr	r0, [pc, #56]	; (bd98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bd5e:	4b0f      	ldr	r3, [pc, #60]	; (bd9c <_usb_d_dev_wait_dfll_rdy+0x44>)
    bd60:	4798      	blx	r3
    bd62:	4603      	mov	r3, r0
    bd64:	2b00      	cmp	r3, #0
    bd66:	d00a      	beq.n	bd7e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    bd68:	bf00      	nop
    bd6a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    bd6e:	480a      	ldr	r0, [pc, #40]	; (bd98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bd70:	4b0b      	ldr	r3, [pc, #44]	; (bda0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bd72:	4798      	blx	r3
    bd74:	4603      	mov	r3, r0
    bd76:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bd7a:	d1f6      	bne.n	bd6a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    bd7c:	e009      	b.n	bd92 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    bd7e:	bf00      	nop
    bd80:	f44f 7180 	mov.w	r1, #256	; 0x100
    bd84:	4804      	ldr	r0, [pc, #16]	; (bd98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    bd86:	4b06      	ldr	r3, [pc, #24]	; (bda0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bd88:	4798      	blx	r3
    bd8a:	4603      	mov	r3, r0
    bd8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bd90:	d1f6      	bne.n	bd80 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    bd92:	bf00      	nop
    bd94:	bd80      	pop	{r7, pc}
    bd96:	bf00      	nop
    bd98:	40001000 	.word	0x40001000
    bd9c:	0000b7c7 	.word	0x0000b7c7
    bda0:	0000b7a1 	.word	0x0000b7a1

0000bda4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    bda4:	b580      	push	{r7, lr}
    bda6:	b082      	sub	sp, #8
    bda8:	af00      	add	r7, sp, #0
    bdaa:	4603      	mov	r3, r0
    bdac:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    bdae:	79fb      	ldrb	r3, [r7, #7]
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d102      	bne.n	bdba <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    bdb4:	4b05      	ldr	r3, [pc, #20]	; (bdcc <_usb_d_dev_wait_clk_rdy+0x28>)
    bdb6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    bdb8:	e004      	b.n	bdc4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    bdba:	79fb      	ldrb	r3, [r7, #7]
    bdbc:	2b01      	cmp	r3, #1
    bdbe:	d101      	bne.n	bdc4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    bdc0:	4b03      	ldr	r3, [pc, #12]	; (bdd0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    bdc2:	4798      	blx	r3
}
    bdc4:	bf00      	nop
    bdc6:	3708      	adds	r7, #8
    bdc8:	46bd      	mov	sp, r7
    bdca:	bd80      	pop	{r7, pc}
    bdcc:	0000bd59 	.word	0x0000bd59
    bdd0:	0000bd35 	.word	0x0000bd35

0000bdd4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    bdd4:	b580      	push	{r7, lr}
    bdd6:	b082      	sub	sp, #8
    bdd8:	af00      	add	r7, sp, #0
    bdda:	4603      	mov	r3, r0
    bddc:	6039      	str	r1, [r7, #0]
    bdde:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    bde0:	683b      	ldr	r3, [r7, #0]
    bde2:	b2da      	uxtb	r2, r3
    bde4:	79fb      	ldrb	r3, [r7, #7]
    bde6:	4619      	mov	r1, r3
    bde8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bdec:	4b02      	ldr	r3, [pc, #8]	; (bdf8 <_usbd_ep_int_ack+0x24>)
    bdee:	4798      	blx	r3
}
    bdf0:	bf00      	nop
    bdf2:	3708      	adds	r7, #8
    bdf4:	46bd      	mov	sp, r7
    bdf6:	bd80      	pop	{r7, pc}
    bdf8:	0000b8ad 	.word	0x0000b8ad

0000bdfc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    bdfc:	b580      	push	{r7, lr}
    bdfe:	b082      	sub	sp, #8
    be00:	af00      	add	r7, sp, #0
    be02:	4603      	mov	r3, r0
    be04:	6039      	str	r1, [r7, #0]
    be06:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    be08:	683b      	ldr	r3, [r7, #0]
    be0a:	b2da      	uxtb	r2, r3
    be0c:	79fb      	ldrb	r3, [r7, #7]
    be0e:	4619      	mov	r1, r3
    be10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be14:	4b02      	ldr	r3, [pc, #8]	; (be20 <_usbd_ep_int_en+0x24>)
    be16:	4798      	blx	r3
}
    be18:	bf00      	nop
    be1a:	3708      	adds	r7, #8
    be1c:	46bd      	mov	sp, r7
    be1e:	bd80      	pop	{r7, pc}
    be20:	0000b981 	.word	0x0000b981

0000be24 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    be24:	b580      	push	{r7, lr}
    be26:	b082      	sub	sp, #8
    be28:	af00      	add	r7, sp, #0
    be2a:	4603      	mov	r3, r0
    be2c:	6039      	str	r1, [r7, #0]
    be2e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    be30:	683b      	ldr	r3, [r7, #0]
    be32:	b2da      	uxtb	r2, r3
    be34:	79fb      	ldrb	r3, [r7, #7]
    be36:	4619      	mov	r1, r3
    be38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be3c:	4b02      	ldr	r3, [pc, #8]	; (be48 <_usbd_ep_int_dis+0x24>)
    be3e:	4798      	blx	r3
}
    be40:	bf00      	nop
    be42:	3708      	adds	r7, #8
    be44:	46bd      	mov	sp, r7
    be46:	bd80      	pop	{r7, pc}
    be48:	0000b9ad 	.word	0x0000b9ad

0000be4c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    be4c:	b580      	push	{r7, lr}
    be4e:	b082      	sub	sp, #8
    be50:	af00      	add	r7, sp, #0
    be52:	4603      	mov	r3, r0
    be54:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    be56:	79fb      	ldrb	r3, [r7, #7]
    be58:	4619      	mov	r1, r3
    be5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be5e:	4b06      	ldr	r3, [pc, #24]	; (be78 <_usbd_ep_is_ctrl+0x2c>)
    be60:	4798      	blx	r3
    be62:	4603      	mov	r3, r0
    be64:	2b11      	cmp	r3, #17
    be66:	bf0c      	ite	eq
    be68:	2301      	moveq	r3, #1
    be6a:	2300      	movne	r3, #0
    be6c:	b2db      	uxtb	r3, r3
}
    be6e:	4618      	mov	r0, r3
    be70:	3708      	adds	r7, #8
    be72:	46bd      	mov	sp, r7
    be74:	bd80      	pop	{r7, pc}
    be76:	bf00      	nop
    be78:	0000ba67 	.word	0x0000ba67

0000be7c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    be7c:	b580      	push	{r7, lr}
    be7e:	b082      	sub	sp, #8
    be80:	af00      	add	r7, sp, #0
    be82:	4603      	mov	r3, r0
    be84:	71fb      	strb	r3, [r7, #7]
    be86:	460b      	mov	r3, r1
    be88:	71bb      	strb	r3, [r7, #6]
    be8a:	4613      	mov	r3, r2
    be8c:	717b      	strb	r3, [r7, #5]
	if (st) {
    be8e:	797b      	ldrb	r3, [r7, #5]
    be90:	2b00      	cmp	r3, #0
    be92:	d00b      	beq.n	beac <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    be94:	79bb      	ldrb	r3, [r7, #6]
    be96:	2210      	movs	r2, #16
    be98:	fa02 f303 	lsl.w	r3, r2, r3
    be9c:	b2da      	uxtb	r2, r3
    be9e:	79fb      	ldrb	r3, [r7, #7]
    bea0:	4619      	mov	r1, r3
    bea2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bea6:	4b09      	ldr	r3, [pc, #36]	; (becc <_usbd_ep_set_stall+0x50>)
    bea8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    beaa:	e00a      	b.n	bec2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    beac:	79bb      	ldrb	r3, [r7, #6]
    beae:	2210      	movs	r2, #16
    beb0:	fa02 f303 	lsl.w	r3, r2, r3
    beb4:	b2da      	uxtb	r2, r3
    beb6:	79fb      	ldrb	r3, [r7, #7]
    beb8:	4619      	mov	r1, r3
    beba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bebe:	4b04      	ldr	r3, [pc, #16]	; (bed0 <_usbd_ep_set_stall+0x54>)
    bec0:	4798      	blx	r3
}
    bec2:	bf00      	nop
    bec4:	3708      	adds	r7, #8
    bec6:	46bd      	mov	sp, r7
    bec8:	bd80      	pop	{r7, pc}
    beca:	bf00      	nop
    becc:	0000b8d9 	.word	0x0000b8d9
    bed0:	0000b92d 	.word	0x0000b92d

0000bed4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    bed4:	b580      	push	{r7, lr}
    bed6:	b084      	sub	sp, #16
    bed8:	af00      	add	r7, sp, #0
    beda:	4603      	mov	r3, r0
    bedc:	460a      	mov	r2, r1
    bede:	71fb      	strb	r3, [r7, #7]
    bee0:	4613      	mov	r3, r2
    bee2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    bee4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bee8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    beea:	79fb      	ldrb	r3, [r7, #7]
    beec:	4619      	mov	r1, r3
    beee:	68f8      	ldr	r0, [r7, #12]
    bef0:	4b08      	ldr	r3, [pc, #32]	; (bf14 <_usbd_ep_is_stalled+0x40>)
    bef2:	4798      	blx	r3
    bef4:	4603      	mov	r3, r0
    bef6:	4619      	mov	r1, r3
    bef8:	79bb      	ldrb	r3, [r7, #6]
    befa:	2210      	movs	r2, #16
    befc:	fa02 f303 	lsl.w	r3, r2, r3
    bf00:	400b      	ands	r3, r1
    bf02:	2b00      	cmp	r3, #0
    bf04:	bf14      	ite	ne
    bf06:	2301      	movne	r3, #1
    bf08:	2300      	moveq	r3, #0
    bf0a:	b2db      	uxtb	r3, r3
}
    bf0c:	4618      	mov	r0, r3
    bf0e:	3710      	adds	r7, #16
    bf10:	46bd      	mov	sp, r7
    bf12:	bd80      	pop	{r7, pc}
    bf14:	0000b905 	.word	0x0000b905

0000bf18 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    bf18:	b580      	push	{r7, lr}
    bf1a:	b084      	sub	sp, #16
    bf1c:	af00      	add	r7, sp, #0
    bf1e:	4603      	mov	r3, r0
    bf20:	460a      	mov	r2, r1
    bf22:	71fb      	strb	r3, [r7, #7]
    bf24:	4613      	mov	r3, r2
    bf26:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    bf28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf2c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    bf2e:	79fb      	ldrb	r3, [r7, #7]
    bf30:	4619      	mov	r1, r3
    bf32:	68f8      	ldr	r0, [r7, #12]
    bf34:	4b08      	ldr	r3, [pc, #32]	; (bf58 <_usbd_ep_is_stall_sent+0x40>)
    bf36:	4798      	blx	r3
    bf38:	4603      	mov	r3, r0
    bf3a:	4619      	mov	r1, r3
    bf3c:	79bb      	ldrb	r3, [r7, #6]
    bf3e:	2220      	movs	r2, #32
    bf40:	fa02 f303 	lsl.w	r3, r2, r3
    bf44:	400b      	ands	r3, r1
    bf46:	2b00      	cmp	r3, #0
    bf48:	bf14      	ite	ne
    bf4a:	2301      	movne	r3, #1
    bf4c:	2300      	moveq	r3, #0
    bf4e:	b2db      	uxtb	r3, r3
}
    bf50:	4618      	mov	r0, r3
    bf52:	3710      	adds	r7, #16
    bf54:	46bd      	mov	sp, r7
    bf56:	bd80      	pop	{r7, pc}
    bf58:	0000b885 	.word	0x0000b885

0000bf5c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    bf5c:	b580      	push	{r7, lr}
    bf5e:	b082      	sub	sp, #8
    bf60:	af00      	add	r7, sp, #0
    bf62:	4603      	mov	r3, r0
    bf64:	460a      	mov	r2, r1
    bf66:	71fb      	strb	r3, [r7, #7]
    bf68:	4613      	mov	r3, r2
    bf6a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    bf6c:	79bb      	ldrb	r3, [r7, #6]
    bf6e:	2220      	movs	r2, #32
    bf70:	409a      	lsls	r2, r3
    bf72:	79fb      	ldrb	r3, [r7, #7]
    bf74:	4611      	mov	r1, r2
    bf76:	4618      	mov	r0, r3
    bf78:	4b02      	ldr	r3, [pc, #8]	; (bf84 <_usbd_ep_ack_stall+0x28>)
    bf7a:	4798      	blx	r3
}
    bf7c:	bf00      	nop
    bf7e:	3708      	adds	r7, #8
    bf80:	46bd      	mov	sp, r7
    bf82:	bd80      	pop	{r7, pc}
    bf84:	0000bdd5 	.word	0x0000bdd5

0000bf88 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    bf88:	b580      	push	{r7, lr}
    bf8a:	b082      	sub	sp, #8
    bf8c:	af00      	add	r7, sp, #0
    bf8e:	4603      	mov	r3, r0
    bf90:	71fb      	strb	r3, [r7, #7]
    bf92:	460b      	mov	r3, r1
    bf94:	71bb      	strb	r3, [r7, #6]
    bf96:	4613      	mov	r3, r2
    bf98:	717b      	strb	r3, [r7, #5]
	if (en) {
    bf9a:	797b      	ldrb	r3, [r7, #5]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d008      	beq.n	bfb2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    bfa0:	79bb      	ldrb	r3, [r7, #6]
    bfa2:	2220      	movs	r2, #32
    bfa4:	409a      	lsls	r2, r3
    bfa6:	79fb      	ldrb	r3, [r7, #7]
    bfa8:	4611      	mov	r1, r2
    bfaa:	4618      	mov	r0, r3
    bfac:	4b07      	ldr	r3, [pc, #28]	; (bfcc <_usbd_ep_int_stall_en+0x44>)
    bfae:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    bfb0:	e007      	b.n	bfc2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    bfb2:	79bb      	ldrb	r3, [r7, #6]
    bfb4:	2220      	movs	r2, #32
    bfb6:	409a      	lsls	r2, r3
    bfb8:	79fb      	ldrb	r3, [r7, #7]
    bfba:	4611      	mov	r1, r2
    bfbc:	4618      	mov	r0, r3
    bfbe:	4b04      	ldr	r3, [pc, #16]	; (bfd0 <_usbd_ep_int_stall_en+0x48>)
    bfc0:	4798      	blx	r3
}
    bfc2:	bf00      	nop
    bfc4:	3708      	adds	r7, #8
    bfc6:	46bd      	mov	sp, r7
    bfc8:	bd80      	pop	{r7, pc}
    bfca:	bf00      	nop
    bfcc:	0000bdfd 	.word	0x0000bdfd
    bfd0:	0000be25 	.word	0x0000be25

0000bfd4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b082      	sub	sp, #8
    bfd8:	af00      	add	r7, sp, #0
    bfda:	4603      	mov	r3, r0
    bfdc:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    bfde:	79fb      	ldrb	r3, [r7, #7]
    bfe0:	4619      	mov	r1, r3
    bfe2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bfe6:	4b03      	ldr	r3, [pc, #12]	; (bff4 <_usbd_ep_stop_setup+0x20>)
    bfe8:	4798      	blx	r3
}
    bfea:	bf00      	nop
    bfec:	3708      	adds	r7, #8
    bfee:	46bd      	mov	sp, r7
    bff0:	bd80      	pop	{r7, pc}
    bff2:	bf00      	nop
    bff4:	0000b959 	.word	0x0000b959

0000bff8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    bff8:	b580      	push	{r7, lr}
    bffa:	b082      	sub	sp, #8
    bffc:	af00      	add	r7, sp, #0
    bffe:	4603      	mov	r3, r0
    c000:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c002:	79fb      	ldrb	r3, [r7, #7]
    c004:	2210      	movs	r2, #16
    c006:	4619      	mov	r1, r3
    c008:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c00c:	4b05      	ldr	r3, [pc, #20]	; (c024 <_usbd_ep_is_setup+0x2c>)
    c00e:	4798      	blx	r3
    c010:	4603      	mov	r3, r0
    c012:	2b00      	cmp	r3, #0
    c014:	bf14      	ite	ne
    c016:	2301      	movne	r3, #1
    c018:	2300      	moveq	r3, #0
    c01a:	b2db      	uxtb	r3, r3
}
    c01c:	4618      	mov	r0, r3
    c01e:	3708      	adds	r7, #8
    c020:	46bd      	mov	sp, r7
    c022:	bd80      	pop	{r7, pc}
    c024:	0000b84f 	.word	0x0000b84f

0000c028 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    c028:	b580      	push	{r7, lr}
    c02a:	b082      	sub	sp, #8
    c02c:	af00      	add	r7, sp, #0
    c02e:	4603      	mov	r3, r0
    c030:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c032:	79fb      	ldrb	r3, [r7, #7]
    c034:	2110      	movs	r1, #16
    c036:	4618      	mov	r0, r3
    c038:	4b02      	ldr	r3, [pc, #8]	; (c044 <_usbd_ep_ack_setup+0x1c>)
    c03a:	4798      	blx	r3
}
    c03c:	bf00      	nop
    c03e:	3708      	adds	r7, #8
    c040:	46bd      	mov	sp, r7
    c042:	bd80      	pop	{r7, pc}
    c044:	0000bdd5 	.word	0x0000bdd5

0000c048 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    c048:	b580      	push	{r7, lr}
    c04a:	b082      	sub	sp, #8
    c04c:	af00      	add	r7, sp, #0
    c04e:	4603      	mov	r3, r0
    c050:	71fb      	strb	r3, [r7, #7]
    c052:	460b      	mov	r3, r1
    c054:	71bb      	strb	r3, [r7, #6]
    c056:	4613      	mov	r3, r2
    c058:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    c05a:	797b      	ldrb	r3, [r7, #5]
    c05c:	2b00      	cmp	r3, #0
    c05e:	d00b      	beq.n	c078 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c060:	79bb      	ldrb	r3, [r7, #6]
    c062:	2201      	movs	r2, #1
    c064:	fa02 f303 	lsl.w	r3, r2, r3
    c068:	b2da      	uxtb	r2, r3
    c06a:	79fb      	ldrb	r3, [r7, #7]
    c06c:	4619      	mov	r1, r3
    c06e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c072:	4b09      	ldr	r3, [pc, #36]	; (c098 <_usbd_ep_set_toggle+0x50>)
    c074:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    c076:	e00a      	b.n	c08e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c078:	79bb      	ldrb	r3, [r7, #6]
    c07a:	2201      	movs	r2, #1
    c07c:	fa02 f303 	lsl.w	r3, r2, r3
    c080:	b2da      	uxtb	r2, r3
    c082:	79fb      	ldrb	r3, [r7, #7]
    c084:	4619      	mov	r1, r3
    c086:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c08a:	4b04      	ldr	r3, [pc, #16]	; (c09c <_usbd_ep_set_toggle+0x54>)
    c08c:	4798      	blx	r3
}
    c08e:	bf00      	nop
    c090:	3708      	adds	r7, #8
    c092:	46bd      	mov	sp, r7
    c094:	bd80      	pop	{r7, pc}
    c096:	bf00      	nop
    c098:	0000b8d9 	.word	0x0000b8d9
    c09c:	0000b92d 	.word	0x0000b92d

0000c0a0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    c0a0:	b580      	push	{r7, lr}
    c0a2:	b082      	sub	sp, #8
    c0a4:	af00      	add	r7, sp, #0
    c0a6:	4603      	mov	r3, r0
    c0a8:	460a      	mov	r2, r1
    c0aa:	71fb      	strb	r3, [r7, #7]
    c0ac:	4613      	mov	r3, r2
    c0ae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    c0b0:	79bb      	ldrb	r3, [r7, #6]
    c0b2:	2201      	movs	r2, #1
    c0b4:	409a      	lsls	r2, r3
    c0b6:	79fb      	ldrb	r3, [r7, #7]
    c0b8:	4611      	mov	r1, r2
    c0ba:	4618      	mov	r0, r3
    c0bc:	4b02      	ldr	r3, [pc, #8]	; (c0c8 <_usbd_ep_ack_io_cpt+0x28>)
    c0be:	4798      	blx	r3
}
    c0c0:	bf00      	nop
    c0c2:	3708      	adds	r7, #8
    c0c4:	46bd      	mov	sp, r7
    c0c6:	bd80      	pop	{r7, pc}
    c0c8:	0000bdd5 	.word	0x0000bdd5

0000c0cc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    c0cc:	b480      	push	{r7}
    c0ce:	b085      	sub	sp, #20
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	4603      	mov	r3, r0
    c0d4:	603a      	str	r2, [r7, #0]
    c0d6:	71fb      	strb	r3, [r7, #7]
    c0d8:	460b      	mov	r3, r1
    c0da:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c0dc:	79fa      	ldrb	r2, [r7, #7]
    c0de:	79bb      	ldrb	r3, [r7, #6]
    c0e0:	0052      	lsls	r2, r2, #1
    c0e2:	4413      	add	r3, r2
    c0e4:	011b      	lsls	r3, r3, #4
    c0e6:	4a06      	ldr	r2, [pc, #24]	; (c100 <_usbd_ep_set_buf+0x34>)
    c0e8:	4413      	add	r3, r2
    c0ea:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    c0ec:	68fb      	ldr	r3, [r7, #12]
    c0ee:	683a      	ldr	r2, [r7, #0]
    c0f0:	601a      	str	r2, [r3, #0]
}
    c0f2:	bf00      	nop
    c0f4:	3714      	adds	r7, #20
    c0f6:	46bd      	mov	sp, r7
    c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0fc:	4770      	bx	lr
    c0fe:	bf00      	nop
    c100:	200033fc 	.word	0x200033fc

0000c104 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c104:	b480      	push	{r7}
    c106:	b085      	sub	sp, #20
    c108:	af00      	add	r7, sp, #0
    c10a:	4603      	mov	r3, r0
    c10c:	71fb      	strb	r3, [r7, #7]
    c10e:	460b      	mov	r3, r1
    c110:	71bb      	strb	r3, [r7, #6]
    c112:	4613      	mov	r3, r2
    c114:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c116:	79fa      	ldrb	r2, [r7, #7]
    c118:	79bb      	ldrb	r3, [r7, #6]
    c11a:	0052      	lsls	r2, r2, #1
    c11c:	4413      	add	r3, r2
    c11e:	011b      	lsls	r3, r3, #4
    c120:	4a08      	ldr	r2, [pc, #32]	; (c144 <_usbd_ep_set_in_count+0x40>)
    c122:	4413      	add	r3, r2
    c124:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c126:	88bb      	ldrh	r3, [r7, #4]
    c128:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c12c:	b299      	uxth	r1, r3
    c12e:	68fa      	ldr	r2, [r7, #12]
    c130:	6853      	ldr	r3, [r2, #4]
    c132:	f361 339b 	bfi	r3, r1, #14, #14
    c136:	6053      	str	r3, [r2, #4]
}
    c138:	bf00      	nop
    c13a:	3714      	adds	r7, #20
    c13c:	46bd      	mov	sp, r7
    c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c142:	4770      	bx	lr
    c144:	200033fc 	.word	0x200033fc

0000c148 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c148:	b480      	push	{r7}
    c14a:	b085      	sub	sp, #20
    c14c:	af00      	add	r7, sp, #0
    c14e:	4603      	mov	r3, r0
    c150:	71fb      	strb	r3, [r7, #7]
    c152:	460b      	mov	r3, r1
    c154:	71bb      	strb	r3, [r7, #6]
    c156:	4613      	mov	r3, r2
    c158:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c15a:	79fa      	ldrb	r2, [r7, #7]
    c15c:	79bb      	ldrb	r3, [r7, #6]
    c15e:	0052      	lsls	r2, r2, #1
    c160:	4413      	add	r3, r2
    c162:	011b      	lsls	r3, r3, #4
    c164:	4a08      	ldr	r2, [pc, #32]	; (c188 <_usbd_ep_set_in_size+0x40>)
    c166:	4413      	add	r3, r2
    c168:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c16a:	88bb      	ldrh	r3, [r7, #4]
    c16c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c170:	b299      	uxth	r1, r3
    c172:	68fa      	ldr	r2, [r7, #12]
    c174:	6853      	ldr	r3, [r2, #4]
    c176:	f361 030d 	bfi	r3, r1, #0, #14
    c17a:	6053      	str	r3, [r2, #4]
}
    c17c:	bf00      	nop
    c17e:	3714      	adds	r7, #20
    c180:	46bd      	mov	sp, r7
    c182:	f85d 7b04 	ldr.w	r7, [sp], #4
    c186:	4770      	bx	lr
    c188:	200033fc 	.word	0x200033fc

0000c18c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c18c:	b480      	push	{r7}
    c18e:	b085      	sub	sp, #20
    c190:	af00      	add	r7, sp, #0
    c192:	4603      	mov	r3, r0
    c194:	71fb      	strb	r3, [r7, #7]
    c196:	460b      	mov	r3, r1
    c198:	71bb      	strb	r3, [r7, #6]
    c19a:	4613      	mov	r3, r2
    c19c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c19e:	79fa      	ldrb	r2, [r7, #7]
    c1a0:	79bb      	ldrb	r3, [r7, #6]
    c1a2:	0052      	lsls	r2, r2, #1
    c1a4:	4413      	add	r3, r2
    c1a6:	011b      	lsls	r3, r3, #4
    c1a8:	4a08      	ldr	r2, [pc, #32]	; (c1cc <_usbd_ep_set_out_count+0x40>)
    c1aa:	4413      	add	r3, r2
    c1ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c1ae:	88bb      	ldrh	r3, [r7, #4]
    c1b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c1b4:	b299      	uxth	r1, r3
    c1b6:	68fa      	ldr	r2, [r7, #12]
    c1b8:	6853      	ldr	r3, [r2, #4]
    c1ba:	f361 030d 	bfi	r3, r1, #0, #14
    c1be:	6053      	str	r3, [r2, #4]
}
    c1c0:	bf00      	nop
    c1c2:	3714      	adds	r7, #20
    c1c4:	46bd      	mov	sp, r7
    c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ca:	4770      	bx	lr
    c1cc:	200033fc 	.word	0x200033fc

0000c1d0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c1d0:	b480      	push	{r7}
    c1d2:	b085      	sub	sp, #20
    c1d4:	af00      	add	r7, sp, #0
    c1d6:	4603      	mov	r3, r0
    c1d8:	71fb      	strb	r3, [r7, #7]
    c1da:	460b      	mov	r3, r1
    c1dc:	71bb      	strb	r3, [r7, #6]
    c1de:	4613      	mov	r3, r2
    c1e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c1e2:	79fa      	ldrb	r2, [r7, #7]
    c1e4:	79bb      	ldrb	r3, [r7, #6]
    c1e6:	0052      	lsls	r2, r2, #1
    c1e8:	4413      	add	r3, r2
    c1ea:	011b      	lsls	r3, r3, #4
    c1ec:	4a08      	ldr	r2, [pc, #32]	; (c210 <_usbd_ep_set_out_size+0x40>)
    c1ee:	4413      	add	r3, r2
    c1f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c1f2:	88bb      	ldrh	r3, [r7, #4]
    c1f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c1f8:	b299      	uxth	r1, r3
    c1fa:	68fa      	ldr	r2, [r7, #12]
    c1fc:	6853      	ldr	r3, [r2, #4]
    c1fe:	f361 339b 	bfi	r3, r1, #14, #14
    c202:	6053      	str	r3, [r2, #4]
}
    c204:	bf00      	nop
    c206:	3714      	adds	r7, #20
    c208:	46bd      	mov	sp, r7
    c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c20e:	4770      	bx	lr
    c210:	200033fc 	.word	0x200033fc

0000c214 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c214:	b580      	push	{r7, lr}
    c216:	b084      	sub	sp, #16
    c218:	af00      	add	r7, sp, #0
    c21a:	60ba      	str	r2, [r7, #8]
    c21c:	607b      	str	r3, [r7, #4]
    c21e:	4603      	mov	r3, r0
    c220:	73fb      	strb	r3, [r7, #15]
    c222:	460b      	mov	r3, r1
    c224:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    c226:	68bb      	ldr	r3, [r7, #8]
    c228:	b29a      	uxth	r2, r3
    c22a:	7bb9      	ldrb	r1, [r7, #14]
    c22c:	7bfb      	ldrb	r3, [r7, #15]
    c22e:	4618      	mov	r0, r3
    c230:	4b06      	ldr	r3, [pc, #24]	; (c24c <_usbd_ep_set_in_trans+0x38>)
    c232:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    c234:	687b      	ldr	r3, [r7, #4]
    c236:	b29a      	uxth	r2, r3
    c238:	7bb9      	ldrb	r1, [r7, #14]
    c23a:	7bfb      	ldrb	r3, [r7, #15]
    c23c:	4618      	mov	r0, r3
    c23e:	4b04      	ldr	r3, [pc, #16]	; (c250 <_usbd_ep_set_in_trans+0x3c>)
    c240:	4798      	blx	r3
}
    c242:	bf00      	nop
    c244:	3710      	adds	r7, #16
    c246:	46bd      	mov	sp, r7
    c248:	bd80      	pop	{r7, pc}
    c24a:	bf00      	nop
    c24c:	0000c149 	.word	0x0000c149
    c250:	0000c105 	.word	0x0000c105

0000c254 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c254:	b580      	push	{r7, lr}
    c256:	b084      	sub	sp, #16
    c258:	af00      	add	r7, sp, #0
    c25a:	60ba      	str	r2, [r7, #8]
    c25c:	607b      	str	r3, [r7, #4]
    c25e:	4603      	mov	r3, r0
    c260:	73fb      	strb	r3, [r7, #15]
    c262:	460b      	mov	r3, r1
    c264:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    c266:	68bb      	ldr	r3, [r7, #8]
    c268:	b29a      	uxth	r2, r3
    c26a:	7bb9      	ldrb	r1, [r7, #14]
    c26c:	7bfb      	ldrb	r3, [r7, #15]
    c26e:	4618      	mov	r0, r3
    c270:	4b06      	ldr	r3, [pc, #24]	; (c28c <_usbd_ep_set_out_trans+0x38>)
    c272:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    c274:	687b      	ldr	r3, [r7, #4]
    c276:	b29a      	uxth	r2, r3
    c278:	7bb9      	ldrb	r1, [r7, #14]
    c27a:	7bfb      	ldrb	r3, [r7, #15]
    c27c:	4618      	mov	r0, r3
    c27e:	4b04      	ldr	r3, [pc, #16]	; (c290 <_usbd_ep_set_out_trans+0x3c>)
    c280:	4798      	blx	r3
}
    c282:	bf00      	nop
    c284:	3710      	adds	r7, #16
    c286:	46bd      	mov	sp, r7
    c288:	bd80      	pop	{r7, pc}
    c28a:	bf00      	nop
    c28c:	0000c1d1 	.word	0x0000c1d1
    c290:	0000c18d 	.word	0x0000c18d

0000c294 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    c294:	b480      	push	{r7}
    c296:	b085      	sub	sp, #20
    c298:	af00      	add	r7, sp, #0
    c29a:	4603      	mov	r3, r0
    c29c:	460a      	mov	r2, r1
    c29e:	71fb      	strb	r3, [r7, #7]
    c2a0:	4613      	mov	r3, r2
    c2a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c2a4:	79fa      	ldrb	r2, [r7, #7]
    c2a6:	79bb      	ldrb	r3, [r7, #6]
    c2a8:	0052      	lsls	r2, r2, #1
    c2aa:	4413      	add	r3, r2
    c2ac:	011b      	lsls	r3, r3, #4
    c2ae:	4a06      	ldr	r2, [pc, #24]	; (c2c8 <_usbd_ep_clear_bank_status+0x34>)
    c2b0:	4413      	add	r3, r2
    c2b2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    c2b4:	68fb      	ldr	r3, [r7, #12]
    c2b6:	2200      	movs	r2, #0
    c2b8:	729a      	strb	r2, [r3, #10]
}
    c2ba:	bf00      	nop
    c2bc:	3714      	adds	r7, #20
    c2be:	46bd      	mov	sp, r7
    c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2c4:	4770      	bx	lr
    c2c6:	bf00      	nop
    c2c8:	200033fc 	.word	0x200033fc

0000c2cc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c2cc:	b580      	push	{r7, lr}
    c2ce:	b082      	sub	sp, #8
    c2d0:	af00      	add	r7, sp, #0
    c2d2:	4603      	mov	r3, r0
    c2d4:	71fb      	strb	r3, [r7, #7]
    c2d6:	460b      	mov	r3, r1
    c2d8:	71bb      	strb	r3, [r7, #6]
    c2da:	4613      	mov	r3, r2
    c2dc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c2de:	797b      	ldrb	r3, [r7, #5]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d00b      	beq.n	c2fc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c2e4:	79bb      	ldrb	r3, [r7, #6]
    c2e6:	2240      	movs	r2, #64	; 0x40
    c2e8:	fa02 f303 	lsl.w	r3, r2, r3
    c2ec:	b2da      	uxtb	r2, r3
    c2ee:	79fb      	ldrb	r3, [r7, #7]
    c2f0:	4619      	mov	r1, r3
    c2f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c2f6:	4b09      	ldr	r3, [pc, #36]	; (c31c <_usbd_ep_set_in_rdy+0x50>)
    c2f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c2fa:	e00a      	b.n	c312 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c2fc:	79bb      	ldrb	r3, [r7, #6]
    c2fe:	2240      	movs	r2, #64	; 0x40
    c300:	fa02 f303 	lsl.w	r3, r2, r3
    c304:	b2da      	uxtb	r2, r3
    c306:	79fb      	ldrb	r3, [r7, #7]
    c308:	4619      	mov	r1, r3
    c30a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c30e:	4b04      	ldr	r3, [pc, #16]	; (c320 <_usbd_ep_set_in_rdy+0x54>)
    c310:	4798      	blx	r3
}
    c312:	bf00      	nop
    c314:	3708      	adds	r7, #8
    c316:	46bd      	mov	sp, r7
    c318:	bd80      	pop	{r7, pc}
    c31a:	bf00      	nop
    c31c:	0000b8d9 	.word	0x0000b8d9
    c320:	0000b92d 	.word	0x0000b92d

0000c324 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c324:	b580      	push	{r7, lr}
    c326:	b082      	sub	sp, #8
    c328:	af00      	add	r7, sp, #0
    c32a:	4603      	mov	r3, r0
    c32c:	71fb      	strb	r3, [r7, #7]
    c32e:	460b      	mov	r3, r1
    c330:	71bb      	strb	r3, [r7, #6]
    c332:	4613      	mov	r3, r2
    c334:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c336:	797b      	ldrb	r3, [r7, #5]
    c338:	2b00      	cmp	r3, #0
    c33a:	d00b      	beq.n	c354 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c33c:	79bb      	ldrb	r3, [r7, #6]
    c33e:	2240      	movs	r2, #64	; 0x40
    c340:	fa02 f303 	lsl.w	r3, r2, r3
    c344:	b2da      	uxtb	r2, r3
    c346:	79fb      	ldrb	r3, [r7, #7]
    c348:	4619      	mov	r1, r3
    c34a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c34e:	4b09      	ldr	r3, [pc, #36]	; (c374 <_usbd_ep_set_out_rdy+0x50>)
    c350:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c352:	e00a      	b.n	c36a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c354:	79bb      	ldrb	r3, [r7, #6]
    c356:	2240      	movs	r2, #64	; 0x40
    c358:	fa02 f303 	lsl.w	r3, r2, r3
    c35c:	b2da      	uxtb	r2, r3
    c35e:	79fb      	ldrb	r3, [r7, #7]
    c360:	4619      	mov	r1, r3
    c362:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c366:	4b04      	ldr	r3, [pc, #16]	; (c378 <_usbd_ep_set_out_rdy+0x54>)
    c368:	4798      	blx	r3
}
    c36a:	bf00      	nop
    c36c:	3708      	adds	r7, #8
    c36e:	46bd      	mov	sp, r7
    c370:	bd80      	pop	{r7, pc}
    c372:	bf00      	nop
    c374:	0000b92d 	.word	0x0000b92d
    c378:	0000b8d9 	.word	0x0000b8d9

0000c37c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    c37c:	b480      	push	{r7}
    c37e:	b083      	sub	sp, #12
    c380:	af00      	add	r7, sp, #0
    c382:	4603      	mov	r3, r0
    c384:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c386:	88fb      	ldrh	r3, [r7, #6]
    c388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c38c:	d820      	bhi.n	c3d0 <_usbd_ep_pcksize_size+0x54>
    c38e:	88fb      	ldrh	r3, [r7, #6]
    c390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c394:	d81a      	bhi.n	c3cc <_usbd_ep_pcksize_size+0x50>
    c396:	88fb      	ldrh	r3, [r7, #6]
    c398:	2b80      	cmp	r3, #128	; 0x80
    c39a:	d815      	bhi.n	c3c8 <_usbd_ep_pcksize_size+0x4c>
    c39c:	88fb      	ldrh	r3, [r7, #6]
    c39e:	2b40      	cmp	r3, #64	; 0x40
    c3a0:	d810      	bhi.n	c3c4 <_usbd_ep_pcksize_size+0x48>
    c3a2:	88fb      	ldrh	r3, [r7, #6]
    c3a4:	2b20      	cmp	r3, #32
    c3a6:	d80b      	bhi.n	c3c0 <_usbd_ep_pcksize_size+0x44>
    c3a8:	88fb      	ldrh	r3, [r7, #6]
    c3aa:	2b10      	cmp	r3, #16
    c3ac:	d806      	bhi.n	c3bc <_usbd_ep_pcksize_size+0x40>
    c3ae:	88fb      	ldrh	r3, [r7, #6]
    c3b0:	2b08      	cmp	r3, #8
    c3b2:	bf8c      	ite	hi
    c3b4:	2301      	movhi	r3, #1
    c3b6:	2300      	movls	r3, #0
    c3b8:	b2db      	uxtb	r3, r3
    c3ba:	e00a      	b.n	c3d2 <_usbd_ep_pcksize_size+0x56>
    c3bc:	2302      	movs	r3, #2
    c3be:	e008      	b.n	c3d2 <_usbd_ep_pcksize_size+0x56>
    c3c0:	2303      	movs	r3, #3
    c3c2:	e006      	b.n	c3d2 <_usbd_ep_pcksize_size+0x56>
    c3c4:	2304      	movs	r3, #4
    c3c6:	e004      	b.n	c3d2 <_usbd_ep_pcksize_size+0x56>
    c3c8:	2305      	movs	r3, #5
    c3ca:	e002      	b.n	c3d2 <_usbd_ep_pcksize_size+0x56>
    c3cc:	2306      	movs	r3, #6
    c3ce:	e000      	b.n	c3d2 <_usbd_ep_pcksize_size+0x56>
    c3d0:	2307      	movs	r3, #7
}
    c3d2:	4618      	mov	r0, r3
    c3d4:	370c      	adds	r7, #12
    c3d6:	46bd      	mov	sp, r7
    c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3dc:	4770      	bx	lr
	...

0000c3e0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    c3e0:	b480      	push	{r7}
    c3e2:	b085      	sub	sp, #20
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	4603      	mov	r3, r0
    c3e8:	460a      	mov	r2, r1
    c3ea:	71fb      	strb	r3, [r7, #7]
    c3ec:	4613      	mov	r3, r2
    c3ee:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c3f0:	79fb      	ldrb	r3, [r7, #7]
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d008      	beq.n	c408 <_usb_d_dev_ept+0x28>
    c3f6:	79bb      	ldrb	r3, [r7, #6]
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	d003      	beq.n	c404 <_usb_d_dev_ept+0x24>
    c3fc:	79fb      	ldrb	r3, [r7, #7]
    c3fe:	3304      	adds	r3, #4
    c400:	b2db      	uxtb	r3, r3
    c402:	e002      	b.n	c40a <_usb_d_dev_ept+0x2a>
    c404:	79fb      	ldrb	r3, [r7, #7]
    c406:	e000      	b.n	c40a <_usb_d_dev_ept+0x2a>
    c408:	2300      	movs	r3, #0
    c40a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    c40c:	7bfa      	ldrb	r2, [r7, #15]
    c40e:	4613      	mov	r3, r2
    c410:	009b      	lsls	r3, r3, #2
    c412:	4413      	add	r3, r2
    c414:	009b      	lsls	r3, r3, #2
    c416:	3310      	adds	r3, #16
    c418:	4a04      	ldr	r2, [pc, #16]	; (c42c <_usb_d_dev_ept+0x4c>)
    c41a:	4413      	add	r3, r2
    c41c:	3304      	adds	r3, #4
}
    c41e:	4618      	mov	r0, r3
    c420:	3714      	adds	r7, #20
    c422:	46bd      	mov	sp, r7
    c424:	f85d 7b04 	ldr.w	r7, [sp], #4
    c428:	4770      	bx	lr
    c42a:	bf00      	nop
    c42c:	20003334 	.word	0x20003334

0000c430 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    c430:	b580      	push	{r7, lr}
    c432:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    c434:	2104      	movs	r1, #4
    c436:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c43a:	4b03      	ldr	r3, [pc, #12]	; (c448 <_usb_d_dev_sof+0x18>)
    c43c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    c43e:	4b03      	ldr	r3, [pc, #12]	; (c44c <_usb_d_dev_sof+0x1c>)
    c440:	681b      	ldr	r3, [r3, #0]
    c442:	4798      	blx	r3
}
    c444:	bf00      	nop
    c446:	bd80      	pop	{r7, pc}
    c448:	0000baa7 	.word	0x0000baa7
    c44c:	20003334 	.word	0x20003334

0000c450 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    c450:	b580      	push	{r7, lr}
    c452:	b084      	sub	sp, #16
    c454:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    c456:	2300      	movs	r3, #0
    c458:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c45a:	f240 2101 	movw	r1, #513	; 0x201
    c45e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c462:	4b1a      	ldr	r3, [pc, #104]	; (c4cc <_usb_d_dev_lpmsusp+0x7c>)
    c464:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c466:	f240 2101 	movw	r1, #513	; 0x201
    c46a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c46e:	4b18      	ldr	r3, [pc, #96]	; (c4d0 <_usb_d_dev_lpmsusp+0x80>)
    c470:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c472:	2170      	movs	r1, #112	; 0x70
    c474:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c478:	4b16      	ldr	r3, [pc, #88]	; (c4d4 <_usb_d_dev_lpmsusp+0x84>)
    c47a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c47c:	2300      	movs	r3, #0
    c47e:	73fb      	strb	r3, [r7, #15]
    c480:	e018      	b.n	c4b4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c482:	7bfb      	ldrb	r3, [r7, #15]
    c484:	015b      	lsls	r3, r3, #5
    c486:	4a14      	ldr	r2, [pc, #80]	; (c4d8 <_usb_d_dev_lpmsusp+0x88>)
    c488:	4413      	add	r3, r2
    c48a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c48c:	687b      	ldr	r3, [r7, #4]
    c48e:	891b      	ldrh	r3, [r3, #8]
    c490:	f3c3 0303 	ubfx	r3, r3, #0, #4
    c494:	b2db      	uxtb	r3, r3
    c496:	2b03      	cmp	r3, #3
    c498:	d109      	bne.n	c4ae <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c49a:	687b      	ldr	r3, [r7, #4]
    c49c:	891b      	ldrh	r3, [r3, #8]
    c49e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    c4a2:	b29b      	uxth	r3, r3
    c4a4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    c4a6:	687b      	ldr	r3, [r7, #4]
    c4a8:	2200      	movs	r2, #0
    c4aa:	811a      	strh	r2, [r3, #8]
			break;
    c4ac:	e005      	b.n	c4ba <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c4ae:	7bfb      	ldrb	r3, [r7, #15]
    c4b0:	3301      	adds	r3, #1
    c4b2:	73fb      	strb	r3, [r7, #15]
    c4b4:	7bfb      	ldrb	r3, [r7, #15]
    c4b6:	2b03      	cmp	r3, #3
    c4b8:	d9e3      	bls.n	c482 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c4ba:	4b08      	ldr	r3, [pc, #32]	; (c4dc <_usb_d_dev_lpmsusp+0x8c>)
    c4bc:	685b      	ldr	r3, [r3, #4]
    c4be:	68b9      	ldr	r1, [r7, #8]
    c4c0:	2003      	movs	r0, #3
    c4c2:	4798      	blx	r3
}
    c4c4:	bf00      	nop
    c4c6:	3710      	adds	r7, #16
    c4c8:	46bd      	mov	sp, r7
    c4ca:	bd80      	pop	{r7, pc}
    c4cc:	0000baa7 	.word	0x0000baa7
    c4d0:	0000bafd 	.word	0x0000bafd
    c4d4:	0000bac5 	.word	0x0000bac5
    c4d8:	200033fc 	.word	0x200033fc
    c4dc:	20003334 	.word	0x20003334

0000c4e0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    c4e0:	b580      	push	{r7, lr}
    c4e2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    c4e4:	2180      	movs	r1, #128	; 0x80
    c4e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4ea:	4b04      	ldr	r3, [pc, #16]	; (c4fc <_usb_d_dev_ramerr+0x1c>)
    c4ec:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c4ee:	4b04      	ldr	r3, [pc, #16]	; (c500 <_usb_d_dev_ramerr+0x20>)
    c4f0:	685b      	ldr	r3, [r3, #4]
    c4f2:	2100      	movs	r1, #0
    c4f4:	2005      	movs	r0, #5
    c4f6:	4798      	blx	r3
}
    c4f8:	bf00      	nop
    c4fa:	bd80      	pop	{r7, pc}
    c4fc:	0000baa7 	.word	0x0000baa7
    c500:	20003334 	.word	0x20003334

0000c504 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    c504:	b580      	push	{r7, lr}
    c506:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c508:	2170      	movs	r1, #112	; 0x70
    c50a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c50e:	4b0b      	ldr	r3, [pc, #44]	; (c53c <_usb_d_dev_wakeup+0x38>)
    c510:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c512:	2170      	movs	r1, #112	; 0x70
    c514:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c518:	4b09      	ldr	r3, [pc, #36]	; (c540 <_usb_d_dev_wakeup+0x3c>)
    c51a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c51c:	f240 2101 	movw	r1, #513	; 0x201
    c520:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c524:	4b07      	ldr	r3, [pc, #28]	; (c544 <_usb_d_dev_wakeup+0x40>)
    c526:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    c528:	2000      	movs	r0, #0
    c52a:	4b07      	ldr	r3, [pc, #28]	; (c548 <_usb_d_dev_wakeup+0x44>)
    c52c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c52e:	4b07      	ldr	r3, [pc, #28]	; (c54c <_usb_d_dev_wakeup+0x48>)
    c530:	685b      	ldr	r3, [r3, #4]
    c532:	2100      	movs	r1, #0
    c534:	2002      	movs	r0, #2
    c536:	4798      	blx	r3
}
    c538:	bf00      	nop
    c53a:	bd80      	pop	{r7, pc}
    c53c:	0000baa7 	.word	0x0000baa7
    c540:	0000bafd 	.word	0x0000bafd
    c544:	0000bac5 	.word	0x0000bac5
    c548:	0000bda5 	.word	0x0000bda5
    c54c:	20003334 	.word	0x20003334

0000c550 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    c550:	b580      	push	{r7, lr}
    c552:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    c554:	2200      	movs	r2, #0
    c556:	2100      	movs	r1, #0
    c558:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c55c:	4b0d      	ldr	r3, [pc, #52]	; (c594 <_usb_d_dev_reset+0x44>)
    c55e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    c560:	2108      	movs	r1, #8
    c562:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c566:	4b0c      	ldr	r3, [pc, #48]	; (c598 <_usb_d_dev_reset+0x48>)
    c568:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c56a:	2170      	movs	r1, #112	; 0x70
    c56c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c570:	4b0a      	ldr	r3, [pc, #40]	; (c59c <_usb_d_dev_reset+0x4c>)
    c572:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c574:	f240 2101 	movw	r1, #513	; 0x201
    c578:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c57c:	4b08      	ldr	r3, [pc, #32]	; (c5a0 <_usb_d_dev_reset+0x50>)
    c57e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    c580:	4b08      	ldr	r3, [pc, #32]	; (c5a4 <_usb_d_dev_reset+0x54>)
    c582:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c584:	4b08      	ldr	r3, [pc, #32]	; (c5a8 <_usb_d_dev_reset+0x58>)
    c586:	685b      	ldr	r3, [r3, #4]
    c588:	2100      	movs	r1, #0
    c58a:	2001      	movs	r0, #1
    c58c:	4798      	blx	r3
}
    c58e:	bf00      	nop
    c590:	bd80      	pop	{r7, pc}
    c592:	bf00      	nop
    c594:	0000ba3d 	.word	0x0000ba3d
    c598:	0000baa7 	.word	0x0000baa7
    c59c:	0000bafd 	.word	0x0000bafd
    c5a0:	0000bac5 	.word	0x0000bac5
    c5a4:	0000d10d 	.word	0x0000d10d
    c5a8:	20003334 	.word	0x20003334

0000c5ac <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    c5ac:	b580      	push	{r7, lr}
    c5ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c5b0:	f240 2101 	movw	r1, #513	; 0x201
    c5b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5b8:	4b09      	ldr	r3, [pc, #36]	; (c5e0 <_usb_d_dev_suspend+0x34>)
    c5ba:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c5bc:	f240 2101 	movw	r1, #513	; 0x201
    c5c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5c4:	4b07      	ldr	r3, [pc, #28]	; (c5e4 <_usb_d_dev_suspend+0x38>)
    c5c6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c5c8:	2170      	movs	r1, #112	; 0x70
    c5ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5ce:	4b06      	ldr	r3, [pc, #24]	; (c5e8 <_usb_d_dev_suspend+0x3c>)
    c5d0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c5d2:	4b06      	ldr	r3, [pc, #24]	; (c5ec <_usb_d_dev_suspend+0x40>)
    c5d4:	685b      	ldr	r3, [r3, #4]
    c5d6:	2100      	movs	r1, #0
    c5d8:	2004      	movs	r0, #4
    c5da:	4798      	blx	r3
}
    c5dc:	bf00      	nop
    c5de:	bd80      	pop	{r7, pc}
    c5e0:	0000baa7 	.word	0x0000baa7
    c5e4:	0000bafd 	.word	0x0000bafd
    c5e8:	0000bac5 	.word	0x0000bac5
    c5ec:	20003334 	.word	0x20003334

0000c5f0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b082      	sub	sp, #8
    c5f4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    c5f6:	2301      	movs	r3, #1
    c5f8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    c5fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5fe:	4b22      	ldr	r3, [pc, #136]	; (c688 <_usb_d_dev_handle_nep+0x98>)
    c600:	4798      	blx	r3
    c602:	4603      	mov	r3, r0
    c604:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c606:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c60a:	4b20      	ldr	r3, [pc, #128]	; (c68c <_usb_d_dev_handle_nep+0x9c>)
    c60c:	4798      	blx	r3
    c60e:	4603      	mov	r3, r0
    c610:	461a      	mov	r2, r3
    c612:	88bb      	ldrh	r3, [r7, #4]
    c614:	4013      	ands	r3, r2
    c616:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c618:	88bb      	ldrh	r3, [r7, #4]
    c61a:	f003 0304 	and.w	r3, r3, #4
    c61e:	2b00      	cmp	r3, #0
    c620:	d003      	beq.n	c62a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    c622:	4b1b      	ldr	r3, [pc, #108]	; (c690 <_usb_d_dev_handle_nep+0xa0>)
    c624:	4798      	blx	r3
		return true;
    c626:	2301      	movs	r3, #1
    c628:	e02a      	b.n	c680 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c62a:	88bb      	ldrh	r3, [r7, #4]
    c62c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c630:	2b00      	cmp	r3, #0
    c632:	d002      	beq.n	c63a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    c634:	4b17      	ldr	r3, [pc, #92]	; (c694 <_usb_d_dev_handle_nep+0xa4>)
    c636:	4798      	blx	r3
    c638:	e021      	b.n	c67e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c63a:	88bb      	ldrh	r3, [r7, #4]
    c63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c640:	2b00      	cmp	r3, #0
    c642:	d002      	beq.n	c64a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    c644:	4b14      	ldr	r3, [pc, #80]	; (c698 <_usb_d_dev_handle_nep+0xa8>)
    c646:	4798      	blx	r3
    c648:	e019      	b.n	c67e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c64a:	88bb      	ldrh	r3, [r7, #4]
    c64c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c650:	2b00      	cmp	r3, #0
    c652:	d002      	beq.n	c65a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    c654:	4b11      	ldr	r3, [pc, #68]	; (c69c <_usb_d_dev_handle_nep+0xac>)
    c656:	4798      	blx	r3
    c658:	e011      	b.n	c67e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c65a:	88bb      	ldrh	r3, [r7, #4]
    c65c:	f003 0308 	and.w	r3, r3, #8
    c660:	2b00      	cmp	r3, #0
    c662:	d002      	beq.n	c66a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    c664:	4b0e      	ldr	r3, [pc, #56]	; (c6a0 <_usb_d_dev_handle_nep+0xb0>)
    c666:	4798      	blx	r3
    c668:	e009      	b.n	c67e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c66a:	88bb      	ldrh	r3, [r7, #4]
    c66c:	f003 0301 	and.w	r3, r3, #1
    c670:	2b00      	cmp	r3, #0
    c672:	d002      	beq.n	c67a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    c674:	4b0b      	ldr	r3, [pc, #44]	; (c6a4 <_usb_d_dev_handle_nep+0xb4>)
    c676:	4798      	blx	r3
    c678:	e001      	b.n	c67e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    c67a:	2300      	movs	r3, #0
    c67c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    c67e:	79fb      	ldrb	r3, [r7, #7]
}
    c680:	4618      	mov	r0, r3
    c682:	3708      	adds	r7, #8
    c684:	46bd      	mov	sp, r7
    c686:	bd80      	pop	{r7, pc}
    c688:	0000ba8d 	.word	0x0000ba8d
    c68c:	0000bae3 	.word	0x0000bae3
    c690:	0000c431 	.word	0x0000c431
    c694:	0000c451 	.word	0x0000c451
    c698:	0000c4e1 	.word	0x0000c4e1
    c69c:	0000c505 	.word	0x0000c505
    c6a0:	0000c551 	.word	0x0000c551
    c6a4:	0000c5ad 	.word	0x0000c5ad

0000c6a8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c6a8:	b590      	push	{r4, r7, lr}
    c6aa:	b089      	sub	sp, #36	; 0x24
    c6ac:	af00      	add	r7, sp, #0
    c6ae:	6078      	str	r0, [r7, #4]
    c6b0:	460b      	mov	r3, r1
    c6b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    c6b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c6b8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c6ba:	687b      	ldr	r3, [r7, #4]
    c6bc:	7c9b      	ldrb	r3, [r3, #18]
    c6be:	f003 030f 	and.w	r3, r3, #15
    c6c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c6c4:	7dfb      	ldrb	r3, [r7, #23]
    c6c6:	015b      	lsls	r3, r3, #5
    c6c8:	4a73      	ldr	r2, [pc, #460]	; (c898 <_usb_d_dev_in_next+0x1f0>)
    c6ca:	4413      	add	r3, r2
    c6cc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c6ce:	78fb      	ldrb	r3, [r7, #3]
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d006      	beq.n	c6e2 <_usb_d_dev_in_next+0x3a>
    c6d4:	693b      	ldr	r3, [r7, #16]
    c6d6:	3310      	adds	r3, #16
    c6d8:	685b      	ldr	r3, [r3, #4]
    c6da:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c6de:	b29b      	uxth	r3, r3
    c6e0:	e000      	b.n	c6e4 <_usb_d_dev_in_next+0x3c>
    c6e2:	2300      	movs	r3, #0
    c6e4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	8a1b      	ldrh	r3, [r3, #16]
    c6ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c6ee:	4293      	cmp	r3, r2
    c6f0:	d103      	bne.n	c6fa <_usb_d_dev_in_next+0x52>
    c6f2:	687b      	ldr	r3, [r7, #4]
    c6f4:	8a1b      	ldrh	r3, [r3, #16]
    c6f6:	b21b      	sxth	r3, r3
    c6f8:	e004      	b.n	c704 <_usb_d_dev_in_next+0x5c>
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	8a1b      	ldrh	r3, [r3, #16]
    c6fe:	3b01      	subs	r3, #1
    c700:	b29b      	uxth	r3, r3
    c702:	b21b      	sxth	r3, r3
    c704:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    c708:	4013      	ands	r3, r2
    c70a:	b21b      	sxth	r3, r3
    c70c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    c70e:	2300      	movs	r3, #0
    c710:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c712:	687b      	ldr	r3, [r7, #4]
    c714:	7cdb      	ldrb	r3, [r3, #19]
    c716:	f003 0307 	and.w	r3, r3, #7
    c71a:	b2db      	uxtb	r3, r3
    c71c:	2b01      	cmp	r3, #1
    c71e:	bf0c      	ite	eq
    c720:	2301      	moveq	r3, #1
    c722:	2300      	movne	r3, #0
    c724:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    c726:	78fb      	ldrb	r3, [r7, #3]
    c728:	2b00      	cmp	r3, #0
    c72a:	d004      	beq.n	c736 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    c72c:	7dfb      	ldrb	r3, [r7, #23]
    c72e:	2101      	movs	r1, #1
    c730:	4618      	mov	r0, r3
    c732:	4b5a      	ldr	r3, [pc, #360]	; (c89c <_usb_d_dev_in_next+0x1f4>)
    c734:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    c736:	687b      	ldr	r3, [r7, #4]
    c738:	689a      	ldr	r2, [r3, #8]
    c73a:	89fb      	ldrh	r3, [r7, #14]
    c73c:	441a      	add	r2, r3
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	689a      	ldr	r2, [r3, #8]
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	685b      	ldr	r3, [r3, #4]
    c74a:	429a      	cmp	r2, r3
    c74c:	d243      	bcs.n	c7d6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    c74e:	687b      	ldr	r3, [r7, #4]
    c750:	685b      	ldr	r3, [r3, #4]
    c752:	b29a      	uxth	r2, r3
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	689b      	ldr	r3, [r3, #8]
    c758:	b29b      	uxth	r3, r3
    c75a:	1ad3      	subs	r3, r2, r3
    c75c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	7cdb      	ldrb	r3, [r3, #19]
    c762:	f003 0320 	and.w	r3, r3, #32
    c766:	b2db      	uxtb	r3, r3
    c768:	2b00      	cmp	r3, #0
    c76a:	d01b      	beq.n	c7a4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    c76c:	687b      	ldr	r3, [r7, #4]
    c76e:	8a1b      	ldrh	r3, [r3, #16]
    c770:	8bfa      	ldrh	r2, [r7, #30]
    c772:	429a      	cmp	r2, r3
    c774:	d902      	bls.n	c77c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    c776:	687b      	ldr	r3, [r7, #4]
    c778:	8a1b      	ldrh	r3, [r3, #16]
    c77a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c77c:	687b      	ldr	r3, [r7, #4]
    c77e:	68d8      	ldr	r0, [r3, #12]
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	681a      	ldr	r2, [r3, #0]
    c784:	687b      	ldr	r3, [r7, #4]
    c786:	689b      	ldr	r3, [r3, #8]
    c788:	4413      	add	r3, r2
    c78a:	8bfa      	ldrh	r2, [r7, #30]
    c78c:	4619      	mov	r1, r3
    c78e:	4b44      	ldr	r3, [pc, #272]	; (c8a0 <_usb_d_dev_in_next+0x1f8>)
    c790:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	68db      	ldr	r3, [r3, #12]
    c796:	461a      	mov	r2, r3
    c798:	7dfb      	ldrb	r3, [r7, #23]
    c79a:	2101      	movs	r1, #1
    c79c:	4618      	mov	r0, r3
    c79e:	4b41      	ldr	r3, [pc, #260]	; (c8a4 <_usb_d_dev_in_next+0x1fc>)
    c7a0:	4798      	blx	r3
    c7a2:	e011      	b.n	c7c8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    c7a4:	8bfb      	ldrh	r3, [r7, #30]
    c7a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c7aa:	d902      	bls.n	c7b2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    c7ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c7b0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	681a      	ldr	r2, [r3, #0]
    c7b6:	687b      	ldr	r3, [r7, #4]
    c7b8:	689b      	ldr	r3, [r3, #8]
    c7ba:	4413      	add	r3, r2
    c7bc:	461a      	mov	r2, r3
    c7be:	7dfb      	ldrb	r3, [r7, #23]
    c7c0:	2101      	movs	r1, #1
    c7c2:	4618      	mov	r0, r3
    c7c4:	4b37      	ldr	r3, [pc, #220]	; (c8a4 <_usb_d_dev_in_next+0x1fc>)
    c7c6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    c7c8:	8bfa      	ldrh	r2, [r7, #30]
    c7ca:	7df8      	ldrb	r0, [r7, #23]
    c7cc:	2300      	movs	r3, #0
    c7ce:	2101      	movs	r1, #1
    c7d0:	4c35      	ldr	r4, [pc, #212]	; (c8a8 <_usb_d_dev_in_next+0x200>)
    c7d2:	47a0      	blx	r4
		goto _in_tx_exec;
    c7d4:	e041      	b.n	c85a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    c7d6:	687b      	ldr	r3, [r7, #4]
    c7d8:	7cdb      	ldrb	r3, [r3, #19]
    c7da:	f003 0310 	and.w	r3, r3, #16
    c7de:	b2db      	uxtb	r3, r3
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d00b      	beq.n	c7fc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    c7e4:	687a      	ldr	r2, [r7, #4]
    c7e6:	7cd3      	ldrb	r3, [r2, #19]
    c7e8:	f36f 1304 	bfc	r3, #4, #1
    c7ec:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    c7ee:	7df8      	ldrb	r0, [r7, #23]
    c7f0:	2300      	movs	r3, #0
    c7f2:	2200      	movs	r2, #0
    c7f4:	2101      	movs	r1, #1
    c7f6:	4c2c      	ldr	r4, [pc, #176]	; (c8a8 <_usb_d_dev_in_next+0x200>)
    c7f8:	47a0      	blx	r4
		goto _in_tx_exec;
    c7fa:	e02e      	b.n	c85a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    c7fc:	7afb      	ldrb	r3, [r7, #11]
    c7fe:	2b00      	cmp	r3, #0
    c800:	d006      	beq.n	c810 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    c802:	7dfb      	ldrb	r3, [r7, #23]
    c804:	224b      	movs	r2, #75	; 0x4b
    c806:	4619      	mov	r1, r3
    c808:	69b8      	ldr	r0, [r7, #24]
    c80a:	4b28      	ldr	r3, [pc, #160]	; (c8ac <_usb_d_dev_in_next+0x204>)
    c80c:	4798      	blx	r3
    c80e:	e005      	b.n	c81c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    c810:	7dfb      	ldrb	r3, [r7, #23]
    c812:	224a      	movs	r2, #74	; 0x4a
    c814:	4619      	mov	r1, r3
    c816:	69b8      	ldr	r0, [r7, #24]
    c818:	4b24      	ldr	r3, [pc, #144]	; (c8ac <_usb_d_dev_in_next+0x204>)
    c81a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    c81c:	687b      	ldr	r3, [r7, #4]
    c81e:	8a1b      	ldrh	r3, [r3, #16]
    c820:	89ba      	ldrh	r2, [r7, #12]
    c822:	429a      	cmp	r2, r3
    c824:	d114      	bne.n	c850 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    c826:	687a      	ldr	r2, [r7, #4]
    c828:	7cd3      	ldrb	r3, [r2, #19]
    c82a:	f36f 1386 	bfc	r3, #6, #1
    c82e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    c830:	4b1f      	ldr	r3, [pc, #124]	; (c8b0 <_usb_d_dev_in_next+0x208>)
    c832:	68db      	ldr	r3, [r3, #12]
    c834:	687a      	ldr	r2, [r7, #4]
    c836:	7c90      	ldrb	r0, [r2, #18]
    c838:	687a      	ldr	r2, [r7, #4]
    c83a:	6892      	ldr	r2, [r2, #8]
    c83c:	4611      	mov	r1, r2
    c83e:	4798      	blx	r3
    c840:	4603      	mov	r3, r0
    c842:	2b00      	cmp	r3, #0
    c844:	d124      	bne.n	c890 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    c846:	687a      	ldr	r2, [r7, #4]
    c848:	7cd3      	ldrb	r3, [r2, #19]
    c84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c84e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c850:	2100      	movs	r1, #0
    c852:	6878      	ldr	r0, [r7, #4]
    c854:	4b17      	ldr	r3, [pc, #92]	; (c8b4 <_usb_d_dev_in_next+0x20c>)
    c856:	4798      	blx	r3
	return;
    c858:	e01b      	b.n	c892 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    c85a:	78fb      	ldrb	r3, [r7, #3]
    c85c:	f083 0301 	eor.w	r3, r3, #1
    c860:	b2db      	uxtb	r3, r3
    c862:	2b00      	cmp	r3, #0
    c864:	d00d      	beq.n	c882 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    c866:	7afb      	ldrb	r3, [r7, #11]
    c868:	2b00      	cmp	r3, #0
    c86a:	d002      	beq.n	c872 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    c86c:	234e      	movs	r3, #78	; 0x4e
    c86e:	777b      	strb	r3, [r7, #29]
    c870:	e001      	b.n	c876 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    c872:	234a      	movs	r3, #74	; 0x4a
    c874:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    c876:	7f7a      	ldrb	r2, [r7, #29]
    c878:	7dfb      	ldrb	r3, [r7, #23]
    c87a:	4619      	mov	r1, r3
    c87c:	69b8      	ldr	r0, [r7, #24]
    c87e:	4b0e      	ldr	r3, [pc, #56]	; (c8b8 <_usb_d_dev_in_next+0x210>)
    c880:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    c882:	7dfb      	ldrb	r3, [r7, #23]
    c884:	2201      	movs	r2, #1
    c886:	2101      	movs	r1, #1
    c888:	4618      	mov	r0, r3
    c88a:	4b0c      	ldr	r3, [pc, #48]	; (c8bc <_usb_d_dev_in_next+0x214>)
    c88c:	4798      	blx	r3
    c88e:	e000      	b.n	c892 <_usb_d_dev_in_next+0x1ea>
			return;
    c890:	bf00      	nop
}
    c892:	3724      	adds	r7, #36	; 0x24
    c894:	46bd      	mov	sp, r7
    c896:	bd90      	pop	{r4, r7, pc}
    c898:	200033fc 	.word	0x200033fc
    c89c:	0000c0a1 	.word	0x0000c0a1
    c8a0:	0001652d 	.word	0x0001652d
    c8a4:	0000c0cd 	.word	0x0000c0cd
    c8a8:	0000c215 	.word	0x0000c215
    c8ac:	0000b9ad 	.word	0x0000b9ad
    c8b0:	20003334 	.word	0x20003334
    c8b4:	0000d9d1 	.word	0x0000d9d1
    c8b8:	0000b981 	.word	0x0000b981
    c8bc:	0000c2cd 	.word	0x0000c2cd

0000c8c0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c8c0:	b590      	push	{r4, r7, lr}
    c8c2:	b08b      	sub	sp, #44	; 0x2c
    c8c4:	af00      	add	r7, sp, #0
    c8c6:	6078      	str	r0, [r7, #4]
    c8c8:	460b      	mov	r3, r1
    c8ca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    c8cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c8d0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c8d2:	687b      	ldr	r3, [r7, #4]
    c8d4:	7c9b      	ldrb	r3, [r3, #18]
    c8d6:	f003 030f 	and.w	r3, r3, #15
    c8da:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c8dc:	7ffb      	ldrb	r3, [r7, #31]
    c8de:	015b      	lsls	r3, r3, #5
    c8e0:	4a94      	ldr	r2, [pc, #592]	; (cb34 <_usb_d_dev_out_next+0x274>)
    c8e2:	4413      	add	r3, r2
    c8e4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c8e6:	78fb      	ldrb	r3, [r7, #3]
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d005      	beq.n	c8f8 <_usb_d_dev_out_next+0x38>
    c8ec:	69bb      	ldr	r3, [r7, #24]
    c8ee:	685b      	ldr	r3, [r3, #4]
    c8f0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    c8f4:	b29b      	uxth	r3, r3
    c8f6:	e000      	b.n	c8fa <_usb_d_dev_out_next+0x3a>
    c8f8:	2300      	movs	r3, #0
    c8fa:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c8fc:	78fb      	ldrb	r3, [r7, #3]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d005      	beq.n	c90e <_usb_d_dev_out_next+0x4e>
    c902:	69bb      	ldr	r3, [r7, #24]
    c904:	685b      	ldr	r3, [r3, #4]
    c906:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c90a:	b29b      	uxth	r3, r3
    c90c:	e000      	b.n	c910 <_usb_d_dev_out_next+0x50>
    c90e:	2300      	movs	r3, #0
    c910:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c912:	687b      	ldr	r3, [r7, #4]
    c914:	8a1b      	ldrh	r3, [r3, #16]
    c916:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c91a:	4293      	cmp	r3, r2
    c91c:	d004      	beq.n	c928 <_usb_d_dev_out_next+0x68>
    c91e:	687b      	ldr	r3, [r7, #4]
    c920:	8a1b      	ldrh	r3, [r3, #16]
    c922:	3b01      	subs	r3, #1
    c924:	b29b      	uxth	r3, r3
    c926:	e001      	b.n	c92c <_usb_d_dev_out_next+0x6c>
    c928:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c92c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    c92e:	8aba      	ldrh	r2, [r7, #20]
    c930:	8a7b      	ldrh	r3, [r7, #18]
    c932:	4013      	ands	r3, r2
    c934:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	7cdb      	ldrb	r3, [r3, #19]
    c93a:	f003 0307 	and.w	r3, r3, #7
    c93e:	b2db      	uxtb	r3, r3
    c940:	2b01      	cmp	r3, #1
    c942:	bf0c      	ite	eq
    c944:	2301      	moveq	r3, #1
    c946:	2300      	movne	r3, #0
    c948:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    c94a:	78fb      	ldrb	r3, [r7, #3]
    c94c:	2b00      	cmp	r3, #0
    c94e:	d004      	beq.n	c95a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    c950:	7ffb      	ldrb	r3, [r7, #31]
    c952:	2100      	movs	r1, #0
    c954:	4618      	mov	r0, r3
    c956:	4b78      	ldr	r3, [pc, #480]	; (cb38 <_usb_d_dev_out_next+0x278>)
    c958:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	7cdb      	ldrb	r3, [r3, #19]
    c95e:	f003 0320 	and.w	r3, r3, #32
    c962:	b2db      	uxtb	r3, r3
    c964:	2b00      	cmp	r3, #0
    c966:	d01c      	beq.n	c9a2 <_usb_d_dev_out_next+0xe2>
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	685b      	ldr	r3, [r3, #4]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d018      	beq.n	c9a2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c970:	687b      	ldr	r3, [r7, #4]
    c972:	685b      	ldr	r3, [r3, #4]
    c974:	b29a      	uxth	r2, r3
    c976:	687b      	ldr	r3, [r7, #4]
    c978:	689b      	ldr	r3, [r3, #8]
    c97a:	b29b      	uxth	r3, r3
    c97c:	1ad3      	subs	r3, r2, r3
    c97e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	681a      	ldr	r2, [r3, #0]
    c984:	687b      	ldr	r3, [r7, #4]
    c986:	689b      	ldr	r3, [r3, #8]
    c988:	18d0      	adds	r0, r2, r3
    c98a:	687b      	ldr	r3, [r7, #4]
    c98c:	68d9      	ldr	r1, [r3, #12]
    c98e:	89ba      	ldrh	r2, [r7, #12]
    c990:	8a3b      	ldrh	r3, [r7, #16]
    c992:	429a      	cmp	r2, r3
    c994:	d901      	bls.n	c99a <_usb_d_dev_out_next+0xda>
    c996:	8a3b      	ldrh	r3, [r7, #16]
    c998:	e000      	b.n	c99c <_usb_d_dev_out_next+0xdc>
    c99a:	89bb      	ldrh	r3, [r7, #12]
    c99c:	461a      	mov	r2, r3
    c99e:	4b67      	ldr	r3, [pc, #412]	; (cb3c <_usb_d_dev_out_next+0x27c>)
    c9a0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c9a2:	687b      	ldr	r3, [r7, #4]
    c9a4:	685b      	ldr	r3, [r3, #4]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d121      	bne.n	c9ee <_usb_d_dev_out_next+0x12e>
    c9aa:	687b      	ldr	r3, [r7, #4]
    c9ac:	7cdb      	ldrb	r3, [r3, #19]
    c9ae:	f003 0310 	and.w	r3, r3, #16
    c9b2:	b2db      	uxtb	r3, r3
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	d01a      	beq.n	c9ee <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    c9b8:	687a      	ldr	r2, [r7, #4]
    c9ba:	7cd3      	ldrb	r3, [r2, #19]
    c9bc:	f36f 1304 	bfc	r3, #4, #1
    c9c0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    c9c2:	687a      	ldr	r2, [r7, #4]
    c9c4:	7cd3      	ldrb	r3, [r2, #19]
    c9c6:	f043 0320 	orr.w	r3, r3, #32
    c9ca:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	68db      	ldr	r3, [r3, #12]
    c9d0:	461a      	mov	r2, r3
    c9d2:	7ffb      	ldrb	r3, [r7, #31]
    c9d4:	2100      	movs	r1, #0
    c9d6:	4618      	mov	r0, r3
    c9d8:	4b59      	ldr	r3, [pc, #356]	; (cb40 <_usb_d_dev_out_next+0x280>)
    c9da:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    c9dc:	687b      	ldr	r3, [r7, #4]
    c9de:	8a1b      	ldrh	r3, [r3, #16]
    c9e0:	461a      	mov	r2, r3
    c9e2:	7ff8      	ldrb	r0, [r7, #31]
    c9e4:	2300      	movs	r3, #0
    c9e6:	2100      	movs	r1, #0
    c9e8:	4c56      	ldr	r4, [pc, #344]	; (cb44 <_usb_d_dev_out_next+0x284>)
    c9ea:	47a0      	blx	r4
		goto _out_rx_exec;
    c9ec:	e090      	b.n	cb10 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    c9ee:	78fb      	ldrb	r3, [r7, #3]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d010      	beq.n	ca16 <_usb_d_dev_out_next+0x156>
    c9f4:	687b      	ldr	r3, [r7, #4]
    c9f6:	8a1b      	ldrh	r3, [r3, #16]
    c9f8:	8a3a      	ldrh	r2, [r7, #16]
    c9fa:	429a      	cmp	r2, r3
    c9fc:	d20b      	bcs.n	ca16 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    c9fe:	687a      	ldr	r2, [r7, #4]
    ca00:	7cd3      	ldrb	r3, [r2, #19]
    ca02:	f36f 1304 	bfc	r3, #4, #1
    ca06:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    ca08:	687b      	ldr	r3, [r7, #4]
    ca0a:	689a      	ldr	r2, [r3, #8]
    ca0c:	8abb      	ldrh	r3, [r7, #20]
    ca0e:	441a      	add	r2, r3
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	609a      	str	r2, [r3, #8]
    ca14:	e05c      	b.n	cad0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	689a      	ldr	r2, [r3, #8]
    ca1a:	8afb      	ldrh	r3, [r7, #22]
    ca1c:	441a      	add	r2, r3
    ca1e:	687b      	ldr	r3, [r7, #4]
    ca20:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	689a      	ldr	r2, [r3, #8]
    ca26:	687b      	ldr	r3, [r7, #4]
    ca28:	685b      	ldr	r3, [r3, #4]
    ca2a:	429a      	cmp	r2, r3
    ca2c:	d250      	bcs.n	cad0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	685b      	ldr	r3, [r3, #4]
    ca32:	b29a      	uxth	r2, r3
    ca34:	687b      	ldr	r3, [r7, #4]
    ca36:	689b      	ldr	r3, [r3, #8]
    ca38:	b29b      	uxth	r3, r3
    ca3a:	1ad3      	subs	r3, r2, r3
    ca3c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ca3e:	687b      	ldr	r3, [r7, #4]
    ca40:	7cdb      	ldrb	r3, [r3, #19]
    ca42:	f003 0320 	and.w	r3, r3, #32
    ca46:	b2db      	uxtb	r3, r3
    ca48:	2b00      	cmp	r3, #0
    ca4a:	d010      	beq.n	ca6e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    ca4c:	687b      	ldr	r3, [r7, #4]
    ca4e:	8a1b      	ldrh	r3, [r3, #16]
    ca50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca52:	429a      	cmp	r2, r3
    ca54:	d902      	bls.n	ca5c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    ca56:	687b      	ldr	r3, [r7, #4]
    ca58:	8a1b      	ldrh	r3, [r3, #16]
    ca5a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ca5c:	687b      	ldr	r3, [r7, #4]
    ca5e:	68db      	ldr	r3, [r3, #12]
    ca60:	461a      	mov	r2, r3
    ca62:	7ffb      	ldrb	r3, [r7, #31]
    ca64:	2100      	movs	r1, #0
    ca66:	4618      	mov	r0, r3
    ca68:	4b35      	ldr	r3, [pc, #212]	; (cb40 <_usb_d_dev_out_next+0x280>)
    ca6a:	4798      	blx	r3
    ca6c:	e029      	b.n	cac2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ca6e:	687b      	ldr	r3, [r7, #4]
    ca70:	8a1b      	ldrh	r3, [r3, #16]
    ca72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca74:	429a      	cmp	r2, r3
    ca76:	d90f      	bls.n	ca98 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ca78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ca7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ca7e:	d903      	bls.n	ca88 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ca80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ca84:	84fb      	strh	r3, [r7, #38]	; 0x26
    ca86:	e011      	b.n	caac <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    ca88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca8a:	8a7b      	ldrh	r3, [r7, #18]
    ca8c:	4013      	ands	r3, r2
    ca8e:	b29b      	uxth	r3, r3
    ca90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca92:	1ad3      	subs	r3, r2, r3
    ca94:	84fb      	strh	r3, [r7, #38]	; 0x26
    ca96:	e009      	b.n	caac <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    ca98:	687b      	ldr	r3, [r7, #4]
    ca9a:	8a1b      	ldrh	r3, [r3, #16]
    ca9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ca9e:	429a      	cmp	r2, r3
    caa0:	d204      	bcs.n	caac <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    caa2:	687a      	ldr	r2, [r7, #4]
    caa4:	7cd3      	ldrb	r3, [r2, #19]
    caa6:	f043 0320 	orr.w	r3, r3, #32
    caaa:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	681a      	ldr	r2, [r3, #0]
    cab0:	687b      	ldr	r3, [r7, #4]
    cab2:	689b      	ldr	r3, [r3, #8]
    cab4:	4413      	add	r3, r2
    cab6:	461a      	mov	r2, r3
    cab8:	7ffb      	ldrb	r3, [r7, #31]
    caba:	2100      	movs	r1, #0
    cabc:	4618      	mov	r0, r3
    cabe:	4b20      	ldr	r3, [pc, #128]	; (cb40 <_usb_d_dev_out_next+0x280>)
    cac0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    cac2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cac4:	7ff8      	ldrb	r0, [r7, #31]
    cac6:	2300      	movs	r3, #0
    cac8:	2100      	movs	r1, #0
    caca:	4c1e      	ldr	r4, [pc, #120]	; (cb44 <_usb_d_dev_out_next+0x284>)
    cacc:	47a0      	blx	r4
			goto _out_rx_exec;
    cace:	e01f      	b.n	cb10 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    cad0:	7bfb      	ldrb	r3, [r7, #15]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d006      	beq.n	cae4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    cad6:	7ffb      	ldrb	r3, [r7, #31]
    cad8:	222d      	movs	r2, #45	; 0x2d
    cada:	4619      	mov	r1, r3
    cadc:	6a38      	ldr	r0, [r7, #32]
    cade:	4b1a      	ldr	r3, [pc, #104]	; (cb48 <_usb_d_dev_out_next+0x288>)
    cae0:	4798      	blx	r3
    cae2:	e005      	b.n	caf0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    cae4:	7ffb      	ldrb	r3, [r7, #31]
    cae6:	2225      	movs	r2, #37	; 0x25
    cae8:	4619      	mov	r1, r3
    caea:	6a38      	ldr	r0, [r7, #32]
    caec:	4b16      	ldr	r3, [pc, #88]	; (cb48 <_usb_d_dev_out_next+0x288>)
    caee:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    caf0:	7ffb      	ldrb	r3, [r7, #31]
    caf2:	2b00      	cmp	r3, #0
    caf4:	d107      	bne.n	cb06 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    caf6:	687b      	ldr	r3, [r7, #4]
    caf8:	68db      	ldr	r3, [r3, #12]
    cafa:	461a      	mov	r2, r3
    cafc:	7ffb      	ldrb	r3, [r7, #31]
    cafe:	2100      	movs	r1, #0
    cb00:	4618      	mov	r0, r3
    cb02:	4b0f      	ldr	r3, [pc, #60]	; (cb40 <_usb_d_dev_out_next+0x280>)
    cb04:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    cb06:	2100      	movs	r1, #0
    cb08:	6878      	ldr	r0, [r7, #4]
    cb0a:	4b10      	ldr	r3, [pc, #64]	; (cb4c <_usb_d_dev_out_next+0x28c>)
    cb0c:	4798      	blx	r3
	return;
    cb0e:	e031      	b.n	cb74 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    cb10:	78fb      	ldrb	r3, [r7, #3]
    cb12:	f083 0301 	eor.w	r3, r3, #1
    cb16:	b2db      	uxtb	r3, r3
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d025      	beq.n	cb68 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    cb1c:	7bfb      	ldrb	r3, [r7, #15]
    cb1e:	2b00      	cmp	r3, #0
    cb20:	d018      	beq.n	cb54 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    cb22:	7ffb      	ldrb	r3, [r7, #31]
    cb24:	2101      	movs	r1, #1
    cb26:	4618      	mov	r0, r3
    cb28:	4b09      	ldr	r3, [pc, #36]	; (cb50 <_usb_d_dev_out_next+0x290>)
    cb2a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    cb2c:	232d      	movs	r3, #45	; 0x2d
    cb2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    cb32:	e012      	b.n	cb5a <_usb_d_dev_out_next+0x29a>
    cb34:	200033fc 	.word	0x200033fc
    cb38:	0000c0a1 	.word	0x0000c0a1
    cb3c:	0001652d 	.word	0x0001652d
    cb40:	0000c0cd 	.word	0x0000c0cd
    cb44:	0000c255 	.word	0x0000c255
    cb48:	0000b9ad 	.word	0x0000b9ad
    cb4c:	0000d9d1 	.word	0x0000d9d1
    cb50:	0000c295 	.word	0x0000c295
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    cb54:	2325      	movs	r3, #37	; 0x25
    cb56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    cb5a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    cb5e:	7ffb      	ldrb	r3, [r7, #31]
    cb60:	4619      	mov	r1, r3
    cb62:	6a38      	ldr	r0, [r7, #32]
    cb64:	4b05      	ldr	r3, [pc, #20]	; (cb7c <_usb_d_dev_out_next+0x2bc>)
    cb66:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    cb68:	7ffb      	ldrb	r3, [r7, #31]
    cb6a:	2201      	movs	r2, #1
    cb6c:	2100      	movs	r1, #0
    cb6e:	4618      	mov	r0, r3
    cb70:	4b03      	ldr	r3, [pc, #12]	; (cb80 <_usb_d_dev_out_next+0x2c0>)
    cb72:	4798      	blx	r3
}
    cb74:	372c      	adds	r7, #44	; 0x2c
    cb76:	46bd      	mov	sp, r7
    cb78:	bd90      	pop	{r4, r7, pc}
    cb7a:	bf00      	nop
    cb7c:	0000b981 	.word	0x0000b981
    cb80:	0000c325 	.word	0x0000c325

0000cb84 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    cb84:	b580      	push	{r7, lr}
    cb86:	b084      	sub	sp, #16
    cb88:	af00      	add	r7, sp, #0
    cb8a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    cb8c:	687b      	ldr	r3, [r7, #4]
    cb8e:	7c9b      	ldrb	r3, [r3, #18]
    cb90:	f003 030f 	and.w	r3, r3, #15
    cb94:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cb96:	687b      	ldr	r3, [r7, #4]
    cb98:	7cdb      	ldrb	r3, [r3, #19]
    cb9a:	f003 0307 	and.w	r3, r3, #7
    cb9e:	b2db      	uxtb	r3, r3
    cba0:	2b01      	cmp	r3, #1
    cba2:	bf0c      	ite	eq
    cba4:	2301      	moveq	r3, #1
    cba6:	2300      	movne	r3, #0
    cba8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    cbaa:	7bbb      	ldrb	r3, [r7, #14]
    cbac:	f083 0301 	eor.w	r3, r3, #1
    cbb0:	b2db      	uxtb	r3, r3
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d008      	beq.n	cbc8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    cbb6:	7bfb      	ldrb	r3, [r7, #15]
    cbb8:	4618      	mov	r0, r3
    cbba:	4b20      	ldr	r3, [pc, #128]	; (cc3c <_usb_d_dev_handle_setup+0xb8>)
    cbbc:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    cbbe:	7bfb      	ldrb	r3, [r7, #15]
    cbc0:	4618      	mov	r0, r3
    cbc2:	4b1f      	ldr	r3, [pc, #124]	; (cc40 <_usb_d_dev_handle_setup+0xbc>)
    cbc4:	4798      	blx	r3
		return;
    cbc6:	e036      	b.n	cc36 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    cbc8:	687b      	ldr	r3, [r7, #4]
    cbca:	7cdb      	ldrb	r3, [r3, #19]
    cbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cbd0:	b2db      	uxtb	r3, r3
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d010      	beq.n	cbf8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    cbd6:	687a      	ldr	r2, [r7, #4]
    cbd8:	7cd3      	ldrb	r3, [r2, #19]
    cbda:	f36f 1386 	bfc	r3, #6, #1
    cbde:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cbe0:	7bfb      	ldrb	r3, [r7, #15]
    cbe2:	2200      	movs	r2, #0
    cbe4:	2101      	movs	r1, #1
    cbe6:	4618      	mov	r0, r3
    cbe8:	4b16      	ldr	r3, [pc, #88]	; (cc44 <_usb_d_dev_handle_setup+0xc0>)
    cbea:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    cbec:	7bfb      	ldrb	r3, [r7, #15]
    cbee:	2200      	movs	r2, #0
    cbf0:	2100      	movs	r1, #0
    cbf2:	4618      	mov	r0, r3
    cbf4:	4b14      	ldr	r3, [pc, #80]	; (cc48 <_usb_d_dev_handle_setup+0xc4>)
    cbf6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    cbf8:	687a      	ldr	r2, [r7, #4]
    cbfa:	7cd3      	ldrb	r3, [r2, #19]
    cbfc:	f36f 03c3 	bfc	r3, #3, #1
    cc00:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    cc02:	7bfb      	ldrb	r3, [r7, #15]
    cc04:	2100      	movs	r1, #0
    cc06:	4618      	mov	r0, r3
    cc08:	4b10      	ldr	r3, [pc, #64]	; (cc4c <_usb_d_dev_handle_setup+0xc8>)
    cc0a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    cc0c:	7bfb      	ldrb	r3, [r7, #15]
    cc0e:	2101      	movs	r1, #1
    cc10:	4618      	mov	r0, r3
    cc12:	4b0e      	ldr	r3, [pc, #56]	; (cc4c <_usb_d_dev_handle_setup+0xc8>)
    cc14:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cc16:	7bfb      	ldrb	r3, [r7, #15]
    cc18:	216f      	movs	r1, #111	; 0x6f
    cc1a:	4618      	mov	r0, r3
    cc1c:	4b0c      	ldr	r3, [pc, #48]	; (cc50 <_usb_d_dev_handle_setup+0xcc>)
    cc1e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    cc20:	7bfb      	ldrb	r3, [r7, #15]
    cc22:	216f      	movs	r1, #111	; 0x6f
    cc24:	4618      	mov	r0, r3
    cc26:	4b0b      	ldr	r3, [pc, #44]	; (cc54 <_usb_d_dev_handle_setup+0xd0>)
    cc28:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    cc2a:	4b0b      	ldr	r3, [pc, #44]	; (cc58 <_usb_d_dev_handle_setup+0xd4>)
    cc2c:	689b      	ldr	r3, [r3, #8]
    cc2e:	687a      	ldr	r2, [r7, #4]
    cc30:	7c92      	ldrb	r2, [r2, #18]
    cc32:	4610      	mov	r0, r2
    cc34:	4798      	blx	r3
}
    cc36:	3710      	adds	r7, #16
    cc38:	46bd      	mov	sp, r7
    cc3a:	bd80      	pop	{r7, pc}
    cc3c:	0000c029 	.word	0x0000c029
    cc40:	0000bfd5 	.word	0x0000bfd5
    cc44:	0000c2cd 	.word	0x0000c2cd
    cc48:	0000c325 	.word	0x0000c325
    cc4c:	0000c295 	.word	0x0000c295
    cc50:	0000bdd5 	.word	0x0000bdd5
    cc54:	0000be25 	.word	0x0000be25
    cc58:	20003334 	.word	0x20003334

0000cc5c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cc5c:	b580      	push	{r7, lr}
    cc5e:	b084      	sub	sp, #16
    cc60:	af00      	add	r7, sp, #0
    cc62:	6078      	str	r0, [r7, #4]
    cc64:	460b      	mov	r3, r1
    cc66:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cc68:	687b      	ldr	r3, [r7, #4]
    cc6a:	7c9b      	ldrb	r3, [r3, #18]
    cc6c:	f003 030f 	and.w	r3, r3, #15
    cc70:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    cc72:	78f9      	ldrb	r1, [r7, #3]
    cc74:	7bfb      	ldrb	r3, [r7, #15]
    cc76:	2200      	movs	r2, #0
    cc78:	4618      	mov	r0, r3
    cc7a:	4b07      	ldr	r3, [pc, #28]	; (cc98 <_usb_d_dev_handle_stall+0x3c>)
    cc7c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    cc7e:	4b07      	ldr	r3, [pc, #28]	; (cc9c <_usb_d_dev_handle_stall+0x40>)
    cc80:	691b      	ldr	r3, [r3, #16]
    cc82:	687a      	ldr	r2, [r7, #4]
    cc84:	7c90      	ldrb	r0, [r2, #18]
    cc86:	687a      	ldr	r2, [r7, #4]
    cc88:	6892      	ldr	r2, [r2, #8]
    cc8a:	2101      	movs	r1, #1
    cc8c:	4798      	blx	r3
}
    cc8e:	bf00      	nop
    cc90:	3710      	adds	r7, #16
    cc92:	46bd      	mov	sp, r7
    cc94:	bd80      	pop	{r7, pc}
    cc96:	bf00      	nop
    cc98:	0000bf89 	.word	0x0000bf89
    cc9c:	20003334 	.word	0x20003334

0000cca0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cca0:	b580      	push	{r7, lr}
    cca2:	b088      	sub	sp, #32
    cca4:	af00      	add	r7, sp, #0
    cca6:	6078      	str	r0, [r7, #4]
    cca8:	460b      	mov	r3, r1
    ccaa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    ccac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ccb0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    ccb2:	687b      	ldr	r3, [r7, #4]
    ccb4:	7c9b      	ldrb	r3, [r3, #18]
    ccb6:	f003 030f 	and.w	r3, r3, #15
    ccba:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    ccbc:	4b61      	ldr	r3, [pc, #388]	; (ce44 <_usb_d_dev_handle_trfail+0x1a4>)
    ccbe:	881b      	ldrh	r3, [r3, #0]
    ccc0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    ccc2:	7efb      	ldrb	r3, [r7, #27]
    ccc4:	015b      	lsls	r3, r3, #5
    ccc6:	4a60      	ldr	r2, [pc, #384]	; (ce48 <_usb_d_dev_handle_trfail+0x1a8>)
    ccc8:	4413      	add	r3, r2
    ccca:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    cccc:	78fb      	ldrb	r3, [r7, #3]
    ccce:	2b00      	cmp	r3, #0
    ccd0:	d006      	beq.n	cce0 <_usb_d_dev_handle_trfail+0x40>
    ccd2:	7efb      	ldrb	r3, [r7, #27]
    ccd4:	4619      	mov	r1, r3
    ccd6:	69f8      	ldr	r0, [r7, #28]
    ccd8:	4b5c      	ldr	r3, [pc, #368]	; (ce4c <_usb_d_dev_handle_trfail+0x1ac>)
    ccda:	4798      	blx	r3
    ccdc:	4603      	mov	r3, r0
    ccde:	e005      	b.n	ccec <_usb_d_dev_handle_trfail+0x4c>
    cce0:	7efb      	ldrb	r3, [r7, #27]
    cce2:	4619      	mov	r1, r3
    cce4:	69f8      	ldr	r0, [r7, #28]
    cce6:	4b5a      	ldr	r3, [pc, #360]	; (ce50 <_usb_d_dev_handle_trfail+0x1b0>)
    cce8:	4798      	blx	r3
    ccea:	4603      	mov	r3, r0
    ccec:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ccee:	687b      	ldr	r3, [r7, #4]
    ccf0:	7cdb      	ldrb	r3, [r3, #19]
    ccf2:	f003 0307 	and.w	r3, r3, #7
    ccf6:	b2db      	uxtb	r3, r3
    ccf8:	2b01      	cmp	r3, #1
    ccfa:	bf0c      	ite	eq
    ccfc:	2301      	moveq	r3, #1
    ccfe:	2300      	movne	r3, #0
    cd00:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    cd02:	78fb      	ldrb	r3, [r7, #3]
    cd04:	011b      	lsls	r3, r3, #4
    cd06:	697a      	ldr	r2, [r7, #20]
    cd08:	4413      	add	r3, r2
    cd0a:	7a9b      	ldrb	r3, [r3, #10]
    cd0c:	b2db      	uxtb	r3, r3
    cd0e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    cd10:	7cfb      	ldrb	r3, [r7, #19]
    cd12:	2b02      	cmp	r3, #2
    cd14:	d12f      	bne.n	cd76 <_usb_d_dev_handle_trfail+0xd6>
    cd16:	7b3b      	ldrb	r3, [r7, #12]
    cd18:	f003 0301 	and.w	r3, r3, #1
    cd1c:	b2db      	uxtb	r3, r3
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d029      	beq.n	cd76 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    cd22:	78fb      	ldrb	r3, [r7, #3]
    cd24:	011b      	lsls	r3, r3, #4
    cd26:	697a      	ldr	r2, [r7, #20]
    cd28:	441a      	add	r2, r3
    cd2a:	7a93      	ldrb	r3, [r2, #10]
    cd2c:	f36f 0300 	bfc	r3, #0, #1
    cd30:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cd32:	78fb      	ldrb	r3, [r7, #3]
    cd34:	f107 0220 	add.w	r2, r7, #32
    cd38:	4413      	add	r3, r2
    cd3a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd3e:	7efb      	ldrb	r3, [r7, #27]
    cd40:	4619      	mov	r1, r3
    cd42:	69f8      	ldr	r0, [r7, #28]
    cd44:	4b43      	ldr	r3, [pc, #268]	; (ce54 <_usb_d_dev_handle_trfail+0x1b4>)
    cd46:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cd48:	78fb      	ldrb	r3, [r7, #3]
    cd4a:	f107 0220 	add.w	r2, r7, #32
    cd4e:	4413      	add	r3, r2
    cd50:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd54:	7efb      	ldrb	r3, [r7, #27]
    cd56:	4619      	mov	r1, r3
    cd58:	69f8      	ldr	r0, [r7, #28]
    cd5a:	4b3f      	ldr	r3, [pc, #252]	; (ce58 <_usb_d_dev_handle_trfail+0x1b8>)
    cd5c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    cd5e:	78fb      	ldrb	r3, [r7, #3]
    cd60:	2b00      	cmp	r3, #0
    cd62:	bf14      	ite	ne
    cd64:	2301      	movne	r3, #1
    cd66:	2300      	moveq	r3, #0
    cd68:	b2db      	uxtb	r3, r3
    cd6a:	2204      	movs	r2, #4
    cd6c:	4619      	mov	r1, r3
    cd6e:	6878      	ldr	r0, [r7, #4]
    cd70:	4b3a      	ldr	r3, [pc, #232]	; (ce5c <_usb_d_dev_handle_trfail+0x1bc>)
    cd72:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    cd74:	e062      	b.n	ce3c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    cd76:	7b3b      	ldrb	r3, [r7, #12]
    cd78:	f003 0302 	and.w	r3, r3, #2
    cd7c:	b2db      	uxtb	r3, r3
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d040      	beq.n	ce04 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    cd82:	78fb      	ldrb	r3, [r7, #3]
    cd84:	011b      	lsls	r3, r3, #4
    cd86:	697a      	ldr	r2, [r7, #20]
    cd88:	441a      	add	r2, r3
    cd8a:	7a93      	ldrb	r3, [r2, #10]
    cd8c:	f36f 0341 	bfc	r3, #1, #1
    cd90:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cd92:	78fb      	ldrb	r3, [r7, #3]
    cd94:	f107 0220 	add.w	r2, r7, #32
    cd98:	4413      	add	r3, r2
    cd9a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cd9e:	7efb      	ldrb	r3, [r7, #27]
    cda0:	4619      	mov	r1, r3
    cda2:	69f8      	ldr	r0, [r7, #28]
    cda4:	4b2b      	ldr	r3, [pc, #172]	; (ce54 <_usb_d_dev_handle_trfail+0x1b4>)
    cda6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cda8:	78fb      	ldrb	r3, [r7, #3]
    cdaa:	f107 0220 	add.w	r2, r7, #32
    cdae:	4413      	add	r3, r2
    cdb0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cdb4:	7efb      	ldrb	r3, [r7, #27]
    cdb6:	4619      	mov	r1, r3
    cdb8:	69f8      	ldr	r0, [r7, #28]
    cdba:	4b27      	ldr	r3, [pc, #156]	; (ce58 <_usb_d_dev_handle_trfail+0x1b8>)
    cdbc:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    cdbe:	7cbb      	ldrb	r3, [r7, #18]
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d03b      	beq.n	ce3c <_usb_d_dev_handle_trfail+0x19c>
    cdc4:	687b      	ldr	r3, [r7, #4]
    cdc6:	7cdb      	ldrb	r3, [r3, #19]
    cdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cdcc:	b2db      	uxtb	r3, r3
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d034      	beq.n	ce3c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    cdd2:	687b      	ldr	r3, [r7, #4]
    cdd4:	7cdb      	ldrb	r3, [r3, #19]
    cdd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cdda:	b2db      	uxtb	r3, r3
    cddc:	461a      	mov	r2, r3
    cdde:	78fb      	ldrb	r3, [r7, #3]
    cde0:	4293      	cmp	r3, r2
    cde2:	d02b      	beq.n	ce3c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    cde4:	687b      	ldr	r3, [r7, #4]
    cde6:	7cdb      	ldrb	r3, [r3, #19]
    cde8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cdec:	b2db      	uxtb	r3, r3
    cdee:	2b00      	cmp	r3, #0
    cdf0:	bf14      	ite	ne
    cdf2:	2301      	movne	r3, #1
    cdf4:	2300      	moveq	r3, #0
    cdf6:	b2db      	uxtb	r3, r3
    cdf8:	2200      	movs	r2, #0
    cdfa:	4619      	mov	r1, r3
    cdfc:	6878      	ldr	r0, [r7, #4]
    cdfe:	4b17      	ldr	r3, [pc, #92]	; (ce5c <_usb_d_dev_handle_trfail+0x1bc>)
    ce00:	4798      	blx	r3
}
    ce02:	e01b      	b.n	ce3c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    ce04:	78fa      	ldrb	r2, [r7, #3]
    ce06:	7efb      	ldrb	r3, [r7, #27]
    ce08:	4611      	mov	r1, r2
    ce0a:	4618      	mov	r0, r3
    ce0c:	4b14      	ldr	r3, [pc, #80]	; (ce60 <_usb_d_dev_handle_trfail+0x1c0>)
    ce0e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ce10:	78fb      	ldrb	r3, [r7, #3]
    ce12:	f107 0220 	add.w	r2, r7, #32
    ce16:	4413      	add	r3, r2
    ce18:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ce1c:	7efb      	ldrb	r3, [r7, #27]
    ce1e:	4619      	mov	r1, r3
    ce20:	69f8      	ldr	r0, [r7, #28]
    ce22:	4b0c      	ldr	r3, [pc, #48]	; (ce54 <_usb_d_dev_handle_trfail+0x1b4>)
    ce24:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ce26:	78fb      	ldrb	r3, [r7, #3]
    ce28:	f107 0220 	add.w	r2, r7, #32
    ce2c:	4413      	add	r3, r2
    ce2e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ce32:	7efb      	ldrb	r3, [r7, #27]
    ce34:	4619      	mov	r1, r3
    ce36:	69f8      	ldr	r0, [r7, #28]
    ce38:	4b07      	ldr	r3, [pc, #28]	; (ce58 <_usb_d_dev_handle_trfail+0x1b8>)
    ce3a:	4798      	blx	r3
}
    ce3c:	bf00      	nop
    ce3e:	3720      	adds	r7, #32
    ce40:	46bd      	mov	sp, r7
    ce42:	bd80      	pop	{r7, pc}
    ce44:	000173e0 	.word	0x000173e0
    ce48:	200033fc 	.word	0x200033fc
    ce4c:	0000ba09 	.word	0x0000ba09
    ce50:	0000b9d9 	.word	0x0000b9d9
    ce54:	0000b8ad 	.word	0x0000b8ad
    ce58:	0000b9ad 	.word	0x0000b9ad
    ce5c:	0000da19 	.word	0x0000da19
    ce60:	0000c295 	.word	0x0000c295

0000ce64 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ce64:	b580      	push	{r7, lr}
    ce66:	b082      	sub	sp, #8
    ce68:	af00      	add	r7, sp, #0
    ce6a:	6078      	str	r0, [r7, #4]
    ce6c:	460b      	mov	r3, r1
    ce6e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ce70:	78fb      	ldrb	r3, [r7, #3]
    ce72:	f003 0310 	and.w	r3, r3, #16
    ce76:	2b00      	cmp	r3, #0
    ce78:	d003      	beq.n	ce82 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    ce7a:	6878      	ldr	r0, [r7, #4]
    ce7c:	4b0c      	ldr	r3, [pc, #48]	; (ceb0 <_usb_d_dev_trans_setup_isr+0x4c>)
    ce7e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    ce80:	e012      	b.n	cea8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ce82:	78fb      	ldrb	r3, [r7, #3]
    ce84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d004      	beq.n	ce96 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    ce8c:	2101      	movs	r1, #1
    ce8e:	6878      	ldr	r0, [r7, #4]
    ce90:	4b08      	ldr	r3, [pc, #32]	; (ceb4 <_usb_d_dev_trans_setup_isr+0x50>)
    ce92:	4798      	blx	r3
}
    ce94:	e008      	b.n	cea8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ce96:	78fb      	ldrb	r3, [r7, #3]
    ce98:	f003 0320 	and.w	r3, r3, #32
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d003      	beq.n	cea8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    cea0:	2100      	movs	r1, #0
    cea2:	6878      	ldr	r0, [r7, #4]
    cea4:	4b03      	ldr	r3, [pc, #12]	; (ceb4 <_usb_d_dev_trans_setup_isr+0x50>)
    cea6:	4798      	blx	r3
}
    cea8:	bf00      	nop
    ceaa:	3708      	adds	r7, #8
    ceac:	46bd      	mov	sp, r7
    ceae:	bd80      	pop	{r7, pc}
    ceb0:	0000cb85 	.word	0x0000cb85
    ceb4:	0000cc5d 	.word	0x0000cc5d

0000ceb8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ceb8:	b580      	push	{r7, lr}
    ceba:	b082      	sub	sp, #8
    cebc:	af00      	add	r7, sp, #0
    cebe:	6078      	str	r0, [r7, #4]
    cec0:	460b      	mov	r3, r1
    cec2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    cec4:	78fb      	ldrb	r3, [r7, #3]
    cec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ceca:	2b00      	cmp	r3, #0
    cecc:	d004      	beq.n	ced8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    cece:	2101      	movs	r1, #1
    ced0:	6878      	ldr	r0, [r7, #4]
    ced2:	4b1a      	ldr	r3, [pc, #104]	; (cf3c <_usb_d_dev_trans_in_isr+0x84>)
    ced4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ced6:	e02c      	b.n	cf32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ced8:	78fb      	ldrb	r3, [r7, #3]
    ceda:	f003 0308 	and.w	r3, r3, #8
    cede:	2b00      	cmp	r3, #0
    cee0:	d004      	beq.n	ceec <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    cee2:	2101      	movs	r1, #1
    cee4:	6878      	ldr	r0, [r7, #4]
    cee6:	4b16      	ldr	r3, [pc, #88]	; (cf40 <_usb_d_dev_trans_in_isr+0x88>)
    cee8:	4798      	blx	r3
}
    ceea:	e022      	b.n	cf32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ceec:	78fb      	ldrb	r3, [r7, #3]
    ceee:	f003 0302 	and.w	r3, r3, #2
    cef2:	2b00      	cmp	r3, #0
    cef4:	d004      	beq.n	cf00 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    cef6:	2101      	movs	r1, #1
    cef8:	6878      	ldr	r0, [r7, #4]
    cefa:	4b12      	ldr	r3, [pc, #72]	; (cf44 <_usb_d_dev_trans_in_isr+0x8c>)
    cefc:	4798      	blx	r3
}
    cefe:	e018      	b.n	cf32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    cf00:	687b      	ldr	r3, [r7, #4]
    cf02:	7cdb      	ldrb	r3, [r3, #19]
    cf04:	f003 0307 	and.w	r3, r3, #7
    cf08:	b2db      	uxtb	r3, r3
    cf0a:	2b01      	cmp	r3, #1
    cf0c:	d111      	bne.n	cf32 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    cf0e:	78fb      	ldrb	r3, [r7, #3]
    cf10:	f003 0304 	and.w	r3, r3, #4
    cf14:	2b00      	cmp	r3, #0
    cf16:	d004      	beq.n	cf22 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    cf18:	2100      	movs	r1, #0
    cf1a:	6878      	ldr	r0, [r7, #4]
    cf1c:	4b08      	ldr	r3, [pc, #32]	; (cf40 <_usb_d_dev_trans_in_isr+0x88>)
    cf1e:	4798      	blx	r3
}
    cf20:	e007      	b.n	cf32 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cf22:	78fb      	ldrb	r3, [r7, #3]
    cf24:	f003 0310 	and.w	r3, r3, #16
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d002      	beq.n	cf32 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    cf2c:	6878      	ldr	r0, [r7, #4]
    cf2e:	4b06      	ldr	r3, [pc, #24]	; (cf48 <_usb_d_dev_trans_in_isr+0x90>)
    cf30:	4798      	blx	r3
}
    cf32:	bf00      	nop
    cf34:	3708      	adds	r7, #8
    cf36:	46bd      	mov	sp, r7
    cf38:	bd80      	pop	{r7, pc}
    cf3a:	bf00      	nop
    cf3c:	0000cc5d 	.word	0x0000cc5d
    cf40:	0000cca1 	.word	0x0000cca1
    cf44:	0000c6a9 	.word	0x0000c6a9
    cf48:	0000cb85 	.word	0x0000cb85

0000cf4c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    cf4c:	b580      	push	{r7, lr}
    cf4e:	b082      	sub	sp, #8
    cf50:	af00      	add	r7, sp, #0
    cf52:	6078      	str	r0, [r7, #4]
    cf54:	460b      	mov	r3, r1
    cf56:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    cf58:	78fb      	ldrb	r3, [r7, #3]
    cf5a:	f003 0320 	and.w	r3, r3, #32
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d004      	beq.n	cf6c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    cf62:	2100      	movs	r1, #0
    cf64:	6878      	ldr	r0, [r7, #4]
    cf66:	4b1a      	ldr	r3, [pc, #104]	; (cfd0 <_usb_d_dev_trans_out_isr+0x84>)
    cf68:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    cf6a:	e02c      	b.n	cfc6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    cf6c:	78fb      	ldrb	r3, [r7, #3]
    cf6e:	f003 0304 	and.w	r3, r3, #4
    cf72:	2b00      	cmp	r3, #0
    cf74:	d004      	beq.n	cf80 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    cf76:	2100      	movs	r1, #0
    cf78:	6878      	ldr	r0, [r7, #4]
    cf7a:	4b16      	ldr	r3, [pc, #88]	; (cfd4 <_usb_d_dev_trans_out_isr+0x88>)
    cf7c:	4798      	blx	r3
}
    cf7e:	e022      	b.n	cfc6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    cf80:	78fb      	ldrb	r3, [r7, #3]
    cf82:	f003 0301 	and.w	r3, r3, #1
    cf86:	2b00      	cmp	r3, #0
    cf88:	d004      	beq.n	cf94 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    cf8a:	2101      	movs	r1, #1
    cf8c:	6878      	ldr	r0, [r7, #4]
    cf8e:	4b12      	ldr	r3, [pc, #72]	; (cfd8 <_usb_d_dev_trans_out_isr+0x8c>)
    cf90:	4798      	blx	r3
}
    cf92:	e018      	b.n	cfc6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    cf94:	687b      	ldr	r3, [r7, #4]
    cf96:	7cdb      	ldrb	r3, [r3, #19]
    cf98:	f003 0307 	and.w	r3, r3, #7
    cf9c:	b2db      	uxtb	r3, r3
    cf9e:	2b01      	cmp	r3, #1
    cfa0:	d111      	bne.n	cfc6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    cfa2:	78fb      	ldrb	r3, [r7, #3]
    cfa4:	f003 0308 	and.w	r3, r3, #8
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d004      	beq.n	cfb6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    cfac:	2101      	movs	r1, #1
    cfae:	6878      	ldr	r0, [r7, #4]
    cfb0:	4b08      	ldr	r3, [pc, #32]	; (cfd4 <_usb_d_dev_trans_out_isr+0x88>)
    cfb2:	4798      	blx	r3
}
    cfb4:	e007      	b.n	cfc6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cfb6:	78fb      	ldrb	r3, [r7, #3]
    cfb8:	f003 0310 	and.w	r3, r3, #16
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d002      	beq.n	cfc6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    cfc0:	6878      	ldr	r0, [r7, #4]
    cfc2:	4b06      	ldr	r3, [pc, #24]	; (cfdc <_usb_d_dev_trans_out_isr+0x90>)
    cfc4:	4798      	blx	r3
}
    cfc6:	bf00      	nop
    cfc8:	3708      	adds	r7, #8
    cfca:	46bd      	mov	sp, r7
    cfcc:	bd80      	pop	{r7, pc}
    cfce:	bf00      	nop
    cfd0:	0000cc5d 	.word	0x0000cc5d
    cfd4:	0000cca1 	.word	0x0000cca1
    cfd8:	0000c8c1 	.word	0x0000c8c1
    cfdc:	0000cb85 	.word	0x0000cb85

0000cfe0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    cfe0:	b580      	push	{r7, lr}
    cfe2:	b084      	sub	sp, #16
    cfe4:	af00      	add	r7, sp, #0
    cfe6:	6078      	str	r0, [r7, #4]
    cfe8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    cfea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cfee:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cff0:	683b      	ldr	r3, [r7, #0]
    cff2:	7c9b      	ldrb	r3, [r3, #18]
    cff4:	f003 030f 	and.w	r3, r3, #15
    cff8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    cffa:	7afb      	ldrb	r3, [r7, #11]
    cffc:	2201      	movs	r2, #1
    cffe:	409a      	lsls	r2, r3
    d000:	687b      	ldr	r3, [r7, #4]
    d002:	4013      	ands	r3, r2
    d004:	2b00      	cmp	r3, #0
    d006:	d03d      	beq.n	d084 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    d008:	7afb      	ldrb	r3, [r7, #11]
    d00a:	68fa      	ldr	r2, [r7, #12]
    d00c:	3308      	adds	r3, #8
    d00e:	015b      	lsls	r3, r3, #5
    d010:	4413      	add	r3, r2
    d012:	3307      	adds	r3, #7
    d014:	781b      	ldrb	r3, [r3, #0]
    d016:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    d018:	7afb      	ldrb	r3, [r7, #11]
    d01a:	68fa      	ldr	r2, [r7, #12]
    d01c:	015b      	lsls	r3, r3, #5
    d01e:	4413      	add	r3, r2
    d020:	f203 1309 	addw	r3, r3, #265	; 0x109
    d024:	781b      	ldrb	r3, [r3, #0]
    d026:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    d028:	7aba      	ldrb	r2, [r7, #10]
    d02a:	7a7b      	ldrb	r3, [r7, #9]
    d02c:	4013      	ands	r3, r2
    d02e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    d030:	7abb      	ldrb	r3, [r7, #10]
    d032:	2b00      	cmp	r3, #0
    d034:	d027      	beq.n	d086 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    d036:	683b      	ldr	r3, [r7, #0]
    d038:	7cdb      	ldrb	r3, [r3, #19]
    d03a:	f003 0307 	and.w	r3, r3, #7
    d03e:	b2db      	uxtb	r3, r3
    d040:	2b01      	cmp	r3, #1
    d042:	d10c      	bne.n	d05e <_usb_d_dev_handle_eps+0x7e>
    d044:	683b      	ldr	r3, [r7, #0]
    d046:	7cdb      	ldrb	r3, [r3, #19]
    d048:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d04c:	b2db      	uxtb	r3, r3
    d04e:	2b00      	cmp	r3, #0
    d050:	d105      	bne.n	d05e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    d052:	7abb      	ldrb	r3, [r7, #10]
    d054:	4619      	mov	r1, r3
    d056:	6838      	ldr	r0, [r7, #0]
    d058:	4b0c      	ldr	r3, [pc, #48]	; (d08c <_usb_d_dev_handle_eps+0xac>)
    d05a:	4798      	blx	r3
    d05c:	e013      	b.n	d086 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    d05e:	683b      	ldr	r3, [r7, #0]
    d060:	7cdb      	ldrb	r3, [r3, #19]
    d062:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d066:	b2db      	uxtb	r3, r3
    d068:	2b00      	cmp	r3, #0
    d06a:	d005      	beq.n	d078 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    d06c:	7abb      	ldrb	r3, [r7, #10]
    d06e:	4619      	mov	r1, r3
    d070:	6838      	ldr	r0, [r7, #0]
    d072:	4b07      	ldr	r3, [pc, #28]	; (d090 <_usb_d_dev_handle_eps+0xb0>)
    d074:	4798      	blx	r3
    d076:	e006      	b.n	d086 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    d078:	7abb      	ldrb	r3, [r7, #10]
    d07a:	4619      	mov	r1, r3
    d07c:	6838      	ldr	r0, [r7, #0]
    d07e:	4b05      	ldr	r3, [pc, #20]	; (d094 <_usb_d_dev_handle_eps+0xb4>)
    d080:	4798      	blx	r3
    d082:	e000      	b.n	d086 <_usb_d_dev_handle_eps+0xa6>
		return;
    d084:	bf00      	nop
		}
	}
}
    d086:	3710      	adds	r7, #16
    d088:	46bd      	mov	sp, r7
    d08a:	bd80      	pop	{r7, pc}
    d08c:	0000ce65 	.word	0x0000ce65
    d090:	0000ceb9 	.word	0x0000ceb9
    d094:	0000cf4d 	.word	0x0000cf4d

0000d098 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    d098:	b580      	push	{r7, lr}
    d09a:	b084      	sub	sp, #16
    d09c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d09e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d0a2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    d0a4:	68bb      	ldr	r3, [r7, #8]
    d0a6:	8c1b      	ldrh	r3, [r3, #32]
    d0a8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    d0aa:	88fb      	ldrh	r3, [r7, #6]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d104      	bne.n	d0ba <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    d0b0:	4b13      	ldr	r3, [pc, #76]	; (d100 <_usb_d_dev_handler+0x68>)
    d0b2:	4798      	blx	r3
    d0b4:	4603      	mov	r3, r0
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d11e      	bne.n	d0f8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    d0ba:	2300      	movs	r3, #0
    d0bc:	73fb      	strb	r3, [r7, #15]
    d0be:	e017      	b.n	d0f0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    d0c0:	7bfa      	ldrb	r2, [r7, #15]
    d0c2:	4613      	mov	r3, r2
    d0c4:	009b      	lsls	r3, r3, #2
    d0c6:	4413      	add	r3, r2
    d0c8:	009b      	lsls	r3, r3, #2
    d0ca:	3310      	adds	r3, #16
    d0cc:	4a0d      	ldr	r2, [pc, #52]	; (d104 <_usb_d_dev_handler+0x6c>)
    d0ce:	4413      	add	r3, r2
    d0d0:	3304      	adds	r3, #4
    d0d2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    d0d4:	683b      	ldr	r3, [r7, #0]
    d0d6:	7c9b      	ldrb	r3, [r3, #18]
    d0d8:	2bff      	cmp	r3, #255	; 0xff
    d0da:	d005      	beq.n	d0e8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    d0dc:	88fb      	ldrh	r3, [r7, #6]
    d0de:	6839      	ldr	r1, [r7, #0]
    d0e0:	4618      	mov	r0, r3
    d0e2:	4b09      	ldr	r3, [pc, #36]	; (d108 <_usb_d_dev_handler+0x70>)
    d0e4:	4798      	blx	r3
    d0e6:	e000      	b.n	d0ea <_usb_d_dev_handler+0x52>
			continue;
    d0e8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    d0ea:	7bfb      	ldrb	r3, [r7, #15]
    d0ec:	3301      	adds	r3, #1
    d0ee:	73fb      	strb	r3, [r7, #15]
    d0f0:	7bfb      	ldrb	r3, [r7, #15]
    d0f2:	2b08      	cmp	r3, #8
    d0f4:	d9e4      	bls.n	d0c0 <_usb_d_dev_handler+0x28>
    d0f6:	e000      	b.n	d0fa <_usb_d_dev_handler+0x62>
			return;
    d0f8:	bf00      	nop
	}
}
    d0fa:	3710      	adds	r7, #16
    d0fc:	46bd      	mov	sp, r7
    d0fe:	bd80      	pop	{r7, pc}
    d100:	0000c5f1 	.word	0x0000c5f1
    d104:	20003334 	.word	0x20003334
    d108:	0000cfe1 	.word	0x0000cfe1

0000d10c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    d10c:	b580      	push	{r7, lr}
    d10e:	b082      	sub	sp, #8
    d110:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    d112:	2300      	movs	r3, #0
    d114:	71fb      	strb	r3, [r7, #7]
    d116:	e023      	b.n	d160 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    d118:	79fa      	ldrb	r2, [r7, #7]
    d11a:	4613      	mov	r3, r2
    d11c:	009b      	lsls	r3, r3, #2
    d11e:	4413      	add	r3, r2
    d120:	009b      	lsls	r3, r3, #2
    d122:	3310      	adds	r3, #16
    d124:	4a14      	ldr	r2, [pc, #80]	; (d178 <_usb_d_dev_reset_epts+0x6c>)
    d126:	4413      	add	r3, r2
    d128:	3304      	adds	r3, #4
    d12a:	2103      	movs	r1, #3
    d12c:	4618      	mov	r0, r3
    d12e:	4b13      	ldr	r3, [pc, #76]	; (d17c <_usb_d_dev_reset_epts+0x70>)
    d130:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    d132:	79fa      	ldrb	r2, [r7, #7]
    d134:	4910      	ldr	r1, [pc, #64]	; (d178 <_usb_d_dev_reset_epts+0x6c>)
    d136:	4613      	mov	r3, r2
    d138:	009b      	lsls	r3, r3, #2
    d13a:	4413      	add	r3, r2
    d13c:	009b      	lsls	r3, r3, #2
    d13e:	440b      	add	r3, r1
    d140:	3326      	adds	r3, #38	; 0x26
    d142:	22ff      	movs	r2, #255	; 0xff
    d144:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    d146:	79fa      	ldrb	r2, [r7, #7]
    d148:	490b      	ldr	r1, [pc, #44]	; (d178 <_usb_d_dev_reset_epts+0x6c>)
    d14a:	4613      	mov	r3, r2
    d14c:	009b      	lsls	r3, r3, #2
    d14e:	4413      	add	r3, r2
    d150:	009b      	lsls	r3, r3, #2
    d152:	440b      	add	r3, r1
    d154:	3327      	adds	r3, #39	; 0x27
    d156:	2200      	movs	r2, #0
    d158:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    d15a:	79fb      	ldrb	r3, [r7, #7]
    d15c:	3301      	adds	r3, #1
    d15e:	71fb      	strb	r3, [r7, #7]
    d160:	79fb      	ldrb	r3, [r7, #7]
    d162:	2b08      	cmp	r3, #8
    d164:	d9d8      	bls.n	d118 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    d166:	22a0      	movs	r2, #160	; 0xa0
    d168:	2100      	movs	r1, #0
    d16a:	4805      	ldr	r0, [pc, #20]	; (d180 <_usb_d_dev_reset_epts+0x74>)
    d16c:	4b05      	ldr	r3, [pc, #20]	; (d184 <_usb_d_dev_reset_epts+0x78>)
    d16e:	4798      	blx	r3
}
    d170:	bf00      	nop
    d172:	3708      	adds	r7, #8
    d174:	46bd      	mov	sp, r7
    d176:	bd80      	pop	{r7, pc}
    d178:	20003334 	.word	0x20003334
    d17c:	0000d9d1 	.word	0x0000d9d1
    d180:	200033fc 	.word	0x200033fc
    d184:	00016661 	.word	0x00016661

0000d188 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    d188:	b580      	push	{r7, lr}
    d18a:	b084      	sub	sp, #16
    d18c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    d18e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d192:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    d194:	2301      	movs	r3, #1
    d196:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    d198:	2304      	movs	r3, #4
    d19a:	713b      	strb	r3, [r7, #4]
    d19c:	2300      	movs	r3, #0
    d19e:	717b      	strb	r3, [r7, #5]
    d1a0:	2300      	movs	r3, #0
    d1a2:	71bb      	strb	r3, [r7, #6]
    d1a4:	2300      	movs	r3, #0
    d1a6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    d1a8:	2101      	movs	r1, #1
    d1aa:	68f8      	ldr	r0, [r7, #12]
    d1ac:	4b26      	ldr	r3, [pc, #152]	; (d248 <_usb_d_dev_init+0xc0>)
    d1ae:	4798      	blx	r3
    d1b0:	4603      	mov	r3, r0
    d1b2:	f083 0301 	eor.w	r3, r3, #1
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d011      	beq.n	d1e0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    d1bc:	2102      	movs	r1, #2
    d1be:	68f8      	ldr	r0, [r7, #12]
    d1c0:	4b22      	ldr	r3, [pc, #136]	; (d24c <_usb_d_dev_init+0xc4>)
    d1c2:	4798      	blx	r3
    d1c4:	4603      	mov	r3, r0
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d006      	beq.n	d1d8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    d1ca:	68f8      	ldr	r0, [r7, #12]
    d1cc:	4b20      	ldr	r3, [pc, #128]	; (d250 <_usb_d_dev_init+0xc8>)
    d1ce:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    d1d0:	2102      	movs	r1, #2
    d1d2:	68f8      	ldr	r0, [r7, #12]
    d1d4:	4b1f      	ldr	r3, [pc, #124]	; (d254 <_usb_d_dev_init+0xcc>)
    d1d6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    d1d8:	2101      	movs	r1, #1
    d1da:	68f8      	ldr	r0, [r7, #12]
    d1dc:	4b1e      	ldr	r3, [pc, #120]	; (d258 <_usb_d_dev_init+0xd0>)
    d1de:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    d1e0:	2101      	movs	r1, #1
    d1e2:	68f8      	ldr	r0, [r7, #12]
    d1e4:	4b1b      	ldr	r3, [pc, #108]	; (d254 <_usb_d_dev_init+0xcc>)
    d1e6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    d1e8:	4b1c      	ldr	r3, [pc, #112]	; (d25c <_usb_d_dev_init+0xd4>)
    d1ea:	4a1d      	ldr	r2, [pc, #116]	; (d260 <_usb_d_dev_init+0xd8>)
    d1ec:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    d1ee:	4b1b      	ldr	r3, [pc, #108]	; (d25c <_usb_d_dev_init+0xd4>)
    d1f0:	4a1b      	ldr	r2, [pc, #108]	; (d260 <_usb_d_dev_init+0xd8>)
    d1f2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    d1f4:	4b19      	ldr	r3, [pc, #100]	; (d25c <_usb_d_dev_init+0xd4>)
    d1f6:	4a1a      	ldr	r2, [pc, #104]	; (d260 <_usb_d_dev_init+0xd8>)
    d1f8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    d1fa:	4b18      	ldr	r3, [pc, #96]	; (d25c <_usb_d_dev_init+0xd4>)
    d1fc:	4a18      	ldr	r2, [pc, #96]	; (d260 <_usb_d_dev_init+0xd8>)
    d1fe:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    d200:	4b16      	ldr	r3, [pc, #88]	; (d25c <_usb_d_dev_init+0xd4>)
    d202:	4a17      	ldr	r2, [pc, #92]	; (d260 <_usb_d_dev_init+0xd8>)
    d204:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    d206:	4b17      	ldr	r3, [pc, #92]	; (d264 <_usb_d_dev_init+0xdc>)
    d208:	4798      	blx	r3

	_usb_load_calib();
    d20a:	4b17      	ldr	r3, [pc, #92]	; (d268 <_usb_d_dev_init+0xe0>)
    d20c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    d20e:	2104      	movs	r1, #4
    d210:	68f8      	ldr	r0, [r7, #12]
    d212:	4b11      	ldr	r3, [pc, #68]	; (d258 <_usb_d_dev_init+0xd0>)
    d214:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    d216:	4b15      	ldr	r3, [pc, #84]	; (d26c <_usb_d_dev_init+0xe4>)
    d218:	4619      	mov	r1, r3
    d21a:	68f8      	ldr	r0, [r7, #12]
    d21c:	4b14      	ldr	r3, [pc, #80]	; (d270 <_usb_d_dev_init+0xe8>)
    d21e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    d220:	7afb      	ldrb	r3, [r7, #11]
    d222:	f107 0210 	add.w	r2, r7, #16
    d226:	4413      	add	r3, r2
    d228:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    d22c:	f043 0301 	orr.w	r3, r3, #1
    d230:	b2db      	uxtb	r3, r3
    d232:	b29b      	uxth	r3, r3
    d234:	4619      	mov	r1, r3
    d236:	68f8      	ldr	r0, [r7, #12]
    d238:	4b0e      	ldr	r3, [pc, #56]	; (d274 <_usb_d_dev_init+0xec>)
    d23a:	4798      	blx	r3

	return ERR_NONE;
    d23c:	2300      	movs	r3, #0
}
    d23e:	4618      	mov	r0, r3
    d240:	3710      	adds	r7, #16
    d242:	46bd      	mov	sp, r7
    d244:	bd80      	pop	{r7, pc}
    d246:	bf00      	nop
    d248:	0000b821 	.word	0x0000b821
    d24c:	0000bb71 	.word	0x0000bb71
    d250:	0000bb45 	.word	0x0000bb45
    d254:	0000b7f7 	.word	0x0000b7f7
    d258:	0000bba1 	.word	0x0000bba1
    d25c:	20003334 	.word	0x20003334
    d260:	0000bc69 	.word	0x0000bc69
    d264:	0000d10d 	.word	0x0000d10d
    d268:	0000bc81 	.word	0x0000bc81
    d26c:	200033fc 	.word	0x200033fc
    d270:	0000bc4d 	.word	0x0000bc4d
    d274:	0000bc11 	.word	0x0000bc11

0000d278 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    d278:	b580      	push	{r7, lr}
    d27a:	b082      	sub	sp, #8
    d27c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d27e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d282:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    d284:	2103      	movs	r1, #3
    d286:	6878      	ldr	r0, [r7, #4]
    d288:	4b17      	ldr	r3, [pc, #92]	; (d2e8 <_usb_d_dev_enable+0x70>)
    d28a:	4798      	blx	r3
    d28c:	4603      	mov	r3, r0
    d28e:	2b00      	cmp	r3, #0
    d290:	d002      	beq.n	d298 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    d292:	f06f 0310 	mvn.w	r3, #16
    d296:	e023      	b.n	d2e0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    d298:	6878      	ldr	r0, [r7, #4]
    d29a:	4b14      	ldr	r3, [pc, #80]	; (d2ec <_usb_d_dev_enable+0x74>)
    d29c:	4798      	blx	r3
    d29e:	4603      	mov	r3, r0
    d2a0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    d2a2:	78fb      	ldrb	r3, [r7, #3]
    d2a4:	f003 0302 	and.w	r3, r3, #2
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d107      	bne.n	d2bc <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    d2ac:	78fb      	ldrb	r3, [r7, #3]
    d2ae:	f043 0302 	orr.w	r3, r3, #2
    d2b2:	b2db      	uxtb	r3, r3
    d2b4:	4619      	mov	r1, r3
    d2b6:	6878      	ldr	r0, [r7, #4]
    d2b8:	4b0d      	ldr	r3, [pc, #52]	; (d2f0 <_usb_d_dev_enable+0x78>)
    d2ba:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    d2bc:	2050      	movs	r0, #80	; 0x50
    d2be:	4b0d      	ldr	r3, [pc, #52]	; (d2f4 <_usb_d_dev_enable+0x7c>)
    d2c0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    d2c2:	2051      	movs	r0, #81	; 0x51
    d2c4:	4b0b      	ldr	r3, [pc, #44]	; (d2f4 <_usb_d_dev_enable+0x7c>)
    d2c6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    d2c8:	2052      	movs	r0, #82	; 0x52
    d2ca:	4b0a      	ldr	r3, [pc, #40]	; (d2f4 <_usb_d_dev_enable+0x7c>)
    d2cc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    d2ce:	2053      	movs	r0, #83	; 0x53
    d2d0:	4b08      	ldr	r3, [pc, #32]	; (d2f4 <_usb_d_dev_enable+0x7c>)
    d2d2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    d2d4:	f240 218d 	movw	r1, #653	; 0x28d
    d2d8:	6878      	ldr	r0, [r7, #4]
    d2da:	4b07      	ldr	r3, [pc, #28]	; (d2f8 <_usb_d_dev_enable+0x80>)
    d2dc:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    d2de:	2300      	movs	r3, #0
}
    d2e0:	4618      	mov	r0, r3
    d2e2:	3708      	adds	r7, #8
    d2e4:	46bd      	mov	sp, r7
    d2e6:	bd80      	pop	{r7, pc}
    d2e8:	0000bb1b 	.word	0x0000bb1b
    d2ec:	0000bbc9 	.word	0x0000bbc9
    d2f0:	0000bba1 	.word	0x0000bba1
    d2f4:	0000b72d 	.word	0x0000b72d
    d2f8:	0000bac5 	.word	0x0000bac5

0000d2fc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    d2fc:	b580      	push	{r7, lr}
    d2fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    d300:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d304:	4b01      	ldr	r3, [pc, #4]	; (d30c <_usb_d_dev_attach+0x10>)
    d306:	4798      	blx	r3
}
    d308:	bf00      	nop
    d30a:	bd80      	pop	{r7, pc}
    d30c:	0000bbed 	.word	0x0000bbed

0000d310 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    d310:	b580      	push	{r7, lr}
    d312:	b082      	sub	sp, #8
    d314:	af00      	add	r7, sp, #0
    d316:	4603      	mov	r3, r0
    d318:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    d31a:	79fb      	ldrb	r3, [r7, #7]
    d31c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d320:	b2db      	uxtb	r3, r3
    d322:	4619      	mov	r1, r3
    d324:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d328:	4b02      	ldr	r3, [pc, #8]	; (d334 <_usb_d_dev_set_address+0x24>)
    d32a:	4798      	blx	r3
}
    d32c:	bf00      	nop
    d32e:	3708      	adds	r7, #8
    d330:	46bd      	mov	sp, r7
    d332:	bd80      	pop	{r7, pc}
    d334:	0000bc2f 	.word	0x0000bc2f

0000d338 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    d338:	b590      	push	{r4, r7, lr}
    d33a:	b085      	sub	sp, #20
    d33c:	af00      	add	r7, sp, #0
    d33e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    d340:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d344:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d346:	687b      	ldr	r3, [r7, #4]
    d348:	7c9b      	ldrb	r3, [r3, #18]
    d34a:	f003 030f 	and.w	r3, r3, #15
    d34e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d350:	687b      	ldr	r3, [r7, #4]
    d352:	68db      	ldr	r3, [r3, #12]
    d354:	461a      	mov	r2, r3
    d356:	7afb      	ldrb	r3, [r7, #11]
    d358:	2100      	movs	r1, #0
    d35a:	4618      	mov	r0, r3
    d35c:	4b0f      	ldr	r3, [pc, #60]	; (d39c <_usb_d_dev_trans_setup+0x64>)
    d35e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d360:	687b      	ldr	r3, [r7, #4]
    d362:	8a1b      	ldrh	r3, [r3, #16]
    d364:	461a      	mov	r2, r3
    d366:	7af8      	ldrb	r0, [r7, #11]
    d368:	2300      	movs	r3, #0
    d36a:	2100      	movs	r1, #0
    d36c:	4c0c      	ldr	r4, [pc, #48]	; (d3a0 <_usb_d_dev_trans_setup+0x68>)
    d36e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    d370:	7afb      	ldrb	r3, [r7, #11]
    d372:	22b0      	movs	r2, #176	; 0xb0
    d374:	4619      	mov	r1, r3
    d376:	68f8      	ldr	r0, [r7, #12]
    d378:	4b0a      	ldr	r3, [pc, #40]	; (d3a4 <_usb_d_dev_trans_setup+0x6c>)
    d37a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    d37c:	7afb      	ldrb	r3, [r7, #11]
    d37e:	2200      	movs	r2, #0
    d380:	2100      	movs	r1, #0
    d382:	4618      	mov	r0, r3
    d384:	4b08      	ldr	r3, [pc, #32]	; (d3a8 <_usb_d_dev_trans_setup+0x70>)
    d386:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    d388:	7afb      	ldrb	r3, [r7, #11]
    d38a:	2210      	movs	r2, #16
    d38c:	4619      	mov	r1, r3
    d38e:	68f8      	ldr	r0, [r7, #12]
    d390:	4b06      	ldr	r3, [pc, #24]	; (d3ac <_usb_d_dev_trans_setup+0x74>)
    d392:	4798      	blx	r3
}
    d394:	bf00      	nop
    d396:	3714      	adds	r7, #20
    d398:	46bd      	mov	sp, r7
    d39a:	bd90      	pop	{r4, r7, pc}
    d39c:	0000c0cd 	.word	0x0000c0cd
    d3a0:	0000c255 	.word	0x0000c255
    d3a4:	0000b92d 	.word	0x0000b92d
    d3a8:	0000c325 	.word	0x0000c325
    d3ac:	0000b981 	.word	0x0000b981

0000d3b0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    d3b0:	b580      	push	{r7, lr}
    d3b2:	b088      	sub	sp, #32
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	4603      	mov	r3, r0
    d3b8:	71fb      	strb	r3, [r7, #7]
    d3ba:	460b      	mov	r3, r1
    d3bc:	71bb      	strb	r3, [r7, #6]
    d3be:	4613      	mov	r3, r2
    d3c0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    d3c2:	79fb      	ldrb	r3, [r7, #7]
    d3c4:	f003 030f 	and.w	r3, r3, #15
    d3c8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    d3ca:	79fb      	ldrb	r3, [r7, #7]
    d3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	bf14      	ite	ne
    d3d4:	2301      	movne	r3, #1
    d3d6:	2300      	moveq	r3, #0
    d3d8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d3da:	7fba      	ldrb	r2, [r7, #30]
    d3dc:	7ffb      	ldrb	r3, [r7, #31]
    d3de:	4611      	mov	r1, r2
    d3e0:	4618      	mov	r0, r3
    d3e2:	4b3e      	ldr	r3, [pc, #248]	; (d4dc <_usb_d_dev_ep_init+0x12c>)
    d3e4:	4798      	blx	r3
    d3e6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    d3e8:	79bb      	ldrb	r3, [r7, #6]
    d3ea:	f003 0303 	and.w	r3, r3, #3
    d3ee:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    d3f0:	7ffa      	ldrb	r2, [r7, #31]
    d3f2:	4613      	mov	r3, r2
    d3f4:	005b      	lsls	r3, r3, #1
    d3f6:	4413      	add	r3, r2
    d3f8:	009b      	lsls	r3, r3, #2
    d3fa:	4a39      	ldr	r2, [pc, #228]	; (d4e0 <_usb_d_dev_ep_init+0x130>)
    d3fc:	4413      	add	r3, r2
    d3fe:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    d400:	7ffb      	ldrb	r3, [r7, #31]
    d402:	2b04      	cmp	r3, #4
    d404:	d902      	bls.n	d40c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    d406:	f06f 0311 	mvn.w	r3, #17
    d40a:	e063      	b.n	d4d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    d40c:	69bb      	ldr	r3, [r7, #24]
    d40e:	7c9b      	ldrb	r3, [r3, #18]
    d410:	2bff      	cmp	r3, #255	; 0xff
    d412:	d002      	beq.n	d41a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    d414:	f06f 0313 	mvn.w	r3, #19
    d418:	e05c      	b.n	d4d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    d41a:	7dfb      	ldrb	r3, [r7, #23]
    d41c:	2b00      	cmp	r3, #0
    d41e:	d11f      	bne.n	d460 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    d420:	7fbb      	ldrb	r3, [r7, #30]
    d422:	2b00      	cmp	r3, #0
    d424:	bf14      	ite	ne
    d426:	2301      	movne	r3, #1
    d428:	2300      	moveq	r3, #0
    d42a:	b2db      	uxtb	r3, r3
    d42c:	f083 0301 	eor.w	r3, r3, #1
    d430:	b2db      	uxtb	r3, r3
    d432:	f003 0301 	and.w	r3, r3, #1
    d436:	b2da      	uxtb	r2, r3
    d438:	7ffb      	ldrb	r3, [r7, #31]
    d43a:	4611      	mov	r1, r2
    d43c:	4618      	mov	r0, r3
    d43e:	4b27      	ldr	r3, [pc, #156]	; (d4dc <_usb_d_dev_ep_init+0x12c>)
    d440:	4798      	blx	r3
    d442:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    d444:	68fb      	ldr	r3, [r7, #12]
    d446:	7c9b      	ldrb	r3, [r3, #18]
    d448:	2bff      	cmp	r3, #255	; 0xff
    d44a:	d002      	beq.n	d452 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    d44c:	f06f 0313 	mvn.w	r3, #19
    d450:	e040      	b.n	d4d4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    d452:	693b      	ldr	r3, [r7, #16]
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	2b00      	cmp	r3, #0
    d458:	d102      	bne.n	d460 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    d45a:	f06f 0312 	mvn.w	r3, #18
    d45e:	e039      	b.n	d4d4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    d460:	7fbb      	ldrb	r3, [r7, #30]
    d462:	2b00      	cmp	r3, #0
    d464:	d007      	beq.n	d476 <_usb_d_dev_ep_init+0xc6>
    d466:	693b      	ldr	r3, [r7, #16]
    d468:	685b      	ldr	r3, [r3, #4]
    d46a:	2b00      	cmp	r3, #0
    d46c:	bf14      	ite	ne
    d46e:	2301      	movne	r3, #1
    d470:	2300      	moveq	r3, #0
    d472:	b2db      	uxtb	r3, r3
    d474:	e006      	b.n	d484 <_usb_d_dev_ep_init+0xd4>
    d476:	693b      	ldr	r3, [r7, #16]
    d478:	681b      	ldr	r3, [r3, #0]
    d47a:	2b00      	cmp	r3, #0
    d47c:	bf14      	ite	ne
    d47e:	2301      	movne	r3, #1
    d480:	2300      	moveq	r3, #0
    d482:	b2db      	uxtb	r3, r3
    d484:	2b00      	cmp	r3, #0
    d486:	d00f      	beq.n	d4a8 <_usb_d_dev_ep_init+0xf8>
    d488:	7fbb      	ldrb	r3, [r7, #30]
    d48a:	2b00      	cmp	r3, #0
    d48c:	d003      	beq.n	d496 <_usb_d_dev_ep_init+0xe6>
    d48e:	693b      	ldr	r3, [r7, #16]
    d490:	895b      	ldrh	r3, [r3, #10]
    d492:	461a      	mov	r2, r3
    d494:	e002      	b.n	d49c <_usb_d_dev_ep_init+0xec>
    d496:	693b      	ldr	r3, [r7, #16]
    d498:	891b      	ldrh	r3, [r3, #8]
    d49a:	461a      	mov	r2, r3
    d49c:	88bb      	ldrh	r3, [r7, #4]
    d49e:	429a      	cmp	r2, r3
    d4a0:	da02      	bge.n	d4a8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    d4a2:	f06f 0312 	mvn.w	r3, #18
    d4a6:	e015      	b.n	d4d4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    d4a8:	7fbb      	ldrb	r3, [r7, #30]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d002      	beq.n	d4b4 <_usb_d_dev_ep_init+0x104>
    d4ae:	693b      	ldr	r3, [r7, #16]
    d4b0:	685b      	ldr	r3, [r3, #4]
    d4b2:	e001      	b.n	d4b8 <_usb_d_dev_ep_init+0x108>
    d4b4:	693b      	ldr	r3, [r7, #16]
    d4b6:	681b      	ldr	r3, [r3, #0]
    d4b8:	69ba      	ldr	r2, [r7, #24]
    d4ba:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    d4bc:	69bb      	ldr	r3, [r7, #24]
    d4be:	88ba      	ldrh	r2, [r7, #4]
    d4c0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    d4c2:	7dfb      	ldrb	r3, [r7, #23]
    d4c4:	3301      	adds	r3, #1
    d4c6:	b2da      	uxtb	r2, r3
    d4c8:	69bb      	ldr	r3, [r7, #24]
    d4ca:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    d4cc:	69bb      	ldr	r3, [r7, #24]
    d4ce:	79fa      	ldrb	r2, [r7, #7]
    d4d0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    d4d2:	2300      	movs	r3, #0
}
    d4d4:	4618      	mov	r0, r3
    d4d6:	3720      	adds	r7, #32
    d4d8:	46bd      	mov	sp, r7
    d4da:	bd80      	pop	{r7, pc}
    d4dc:	0000c3e1 	.word	0x0000c3e1
    d4e0:	000173a4 	.word	0x000173a4

0000d4e4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    d4e4:	b580      	push	{r7, lr}
    d4e6:	b086      	sub	sp, #24
    d4e8:	af00      	add	r7, sp, #0
    d4ea:	4603      	mov	r3, r0
    d4ec:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    d4ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d4f2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    d4f4:	79fb      	ldrb	r3, [r7, #7]
    d4f6:	f003 030f 	and.w	r3, r3, #15
    d4fa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d4fc:	79fb      	ldrb	r3, [r7, #7]
    d4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d502:	2b00      	cmp	r3, #0
    d504:	bf14      	ite	ne
    d506:	2301      	movne	r3, #1
    d508:	2300      	moveq	r3, #0
    d50a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d50c:	7cba      	ldrb	r2, [r7, #18]
    d50e:	7cfb      	ldrb	r3, [r7, #19]
    d510:	4611      	mov	r1, r2
    d512:	4618      	mov	r0, r3
    d514:	4b2a      	ldr	r3, [pc, #168]	; (d5c0 <_usb_d_dev_ep_deinit+0xdc>)
    d516:	4798      	blx	r3
    d518:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d51a:	7cfb      	ldrb	r3, [r7, #19]
    d51c:	2b04      	cmp	r3, #4
    d51e:	d84a      	bhi.n	d5b6 <_usb_d_dev_ep_deinit+0xd2>
    d520:	68fb      	ldr	r3, [r7, #12]
    d522:	7c9b      	ldrb	r3, [r3, #18]
    d524:	2bff      	cmp	r3, #255	; 0xff
    d526:	d046      	beq.n	d5b6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    d528:	7cbb      	ldrb	r3, [r7, #18]
    d52a:	2203      	movs	r2, #3
    d52c:	4619      	mov	r1, r3
    d52e:	68f8      	ldr	r0, [r7, #12]
    d530:	4b24      	ldr	r3, [pc, #144]	; (d5c4 <_usb_d_dev_ep_deinit+0xe0>)
    d532:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d534:	68fb      	ldr	r3, [r7, #12]
    d536:	7cdb      	ldrb	r3, [r3, #19]
    d538:	f003 0307 	and.w	r3, r3, #7
    d53c:	b2db      	uxtb	r3, r3
    d53e:	2b01      	cmp	r3, #1
    d540:	d107      	bne.n	d552 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    d542:	79fb      	ldrb	r3, [r7, #7]
    d544:	697a      	ldr	r2, [r7, #20]
    d546:	3308      	adds	r3, #8
    d548:	015b      	lsls	r3, r3, #5
    d54a:	4413      	add	r3, r2
    d54c:	2200      	movs	r2, #0
    d54e:	701a      	strb	r2, [r3, #0]
    d550:	e02a      	b.n	d5a8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    d552:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d556:	2b00      	cmp	r3, #0
    d558:	da15      	bge.n	d586 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    d55a:	79fb      	ldrb	r3, [r7, #7]
    d55c:	f003 030f 	and.w	r3, r3, #15
    d560:	79fa      	ldrb	r2, [r7, #7]
    d562:	f002 020f 	and.w	r2, r2, #15
    d566:	6979      	ldr	r1, [r7, #20]
    d568:	3208      	adds	r2, #8
    d56a:	0152      	lsls	r2, r2, #5
    d56c:	440a      	add	r2, r1
    d56e:	7812      	ldrb	r2, [r2, #0]
    d570:	b2d2      	uxtb	r2, r2
    d572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    d576:	b2d1      	uxtb	r1, r2
    d578:	697a      	ldr	r2, [r7, #20]
    d57a:	3308      	adds	r3, #8
    d57c:	015b      	lsls	r3, r3, #5
    d57e:	4413      	add	r3, r2
    d580:	460a      	mov	r2, r1
    d582:	701a      	strb	r2, [r3, #0]
    d584:	e010      	b.n	d5a8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    d586:	79fb      	ldrb	r3, [r7, #7]
    d588:	79fa      	ldrb	r2, [r7, #7]
    d58a:	6979      	ldr	r1, [r7, #20]
    d58c:	3208      	adds	r2, #8
    d58e:	0152      	lsls	r2, r2, #5
    d590:	440a      	add	r2, r1
    d592:	7812      	ldrb	r2, [r2, #0]
    d594:	b2d2      	uxtb	r2, r2
    d596:	f022 0207 	bic.w	r2, r2, #7
    d59a:	b2d1      	uxtb	r1, r2
    d59c:	697a      	ldr	r2, [r7, #20]
    d59e:	3308      	adds	r3, #8
    d5a0:	015b      	lsls	r3, r3, #5
    d5a2:	4413      	add	r3, r2
    d5a4:	460a      	mov	r2, r1
    d5a6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    d5a8:	68fb      	ldr	r3, [r7, #12]
    d5aa:	2200      	movs	r2, #0
    d5ac:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    d5ae:	68fb      	ldr	r3, [r7, #12]
    d5b0:	22ff      	movs	r2, #255	; 0xff
    d5b2:	749a      	strb	r2, [r3, #18]
    d5b4:	e000      	b.n	d5b8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    d5b6:	bf00      	nop
}
    d5b8:	3718      	adds	r7, #24
    d5ba:	46bd      	mov	sp, r7
    d5bc:	bd80      	pop	{r7, pc}
    d5be:	bf00      	nop
    d5c0:	0000c3e1 	.word	0x0000c3e1
    d5c4:	0000da19 	.word	0x0000da19

0000d5c8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    d5c8:	b5b0      	push	{r4, r5, r7, lr}
    d5ca:	b088      	sub	sp, #32
    d5cc:	af00      	add	r7, sp, #0
    d5ce:	4603      	mov	r3, r0
    d5d0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    d5d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d5d6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    d5d8:	79fb      	ldrb	r3, [r7, #7]
    d5da:	f003 030f 	and.w	r3, r3, #15
    d5de:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    d5e0:	79fb      	ldrb	r3, [r7, #7]
    d5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	bf14      	ite	ne
    d5ea:	2301      	movne	r3, #1
    d5ec:	2300      	moveq	r3, #0
    d5ee:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    d5f0:	7eba      	ldrb	r2, [r7, #26]
    d5f2:	7efb      	ldrb	r3, [r7, #27]
    d5f4:	4611      	mov	r1, r2
    d5f6:	4618      	mov	r0, r3
    d5f8:	4b70      	ldr	r3, [pc, #448]	; (d7bc <_usb_d_dev_ep_enable+0x1f4>)
    d5fa:	4798      	blx	r3
    d5fc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    d5fe:	7efb      	ldrb	r3, [r7, #27]
    d600:	4619      	mov	r1, r3
    d602:	69f8      	ldr	r0, [r7, #28]
    d604:	4b6e      	ldr	r3, [pc, #440]	; (d7c0 <_usb_d_dev_ep_enable+0x1f8>)
    d606:	4798      	blx	r3
    d608:	4603      	mov	r3, r0
    d60a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d60c:	7efb      	ldrb	r3, [r7, #27]
    d60e:	2b04      	cmp	r3, #4
    d610:	d803      	bhi.n	d61a <_usb_d_dev_ep_enable+0x52>
    d612:	697b      	ldr	r3, [r7, #20]
    d614:	7c9b      	ldrb	r3, [r3, #18]
    d616:	2bff      	cmp	r3, #255	; 0xff
    d618:	d102      	bne.n	d620 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    d61a:	f06f 0311 	mvn.w	r3, #17
    d61e:	e0c8      	b.n	d7b2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    d620:	7efb      	ldrb	r3, [r7, #27]
    d622:	015b      	lsls	r3, r3, #5
    d624:	4a67      	ldr	r2, [pc, #412]	; (d7c4 <_usb_d_dev_ep_enable+0x1fc>)
    d626:	4413      	add	r3, r2
    d628:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    d62a:	697b      	ldr	r3, [r7, #20]
    d62c:	7cdb      	ldrb	r3, [r3, #19]
    d62e:	f003 0307 	and.w	r3, r3, #7
    d632:	b2db      	uxtb	r3, r3
    d634:	2b01      	cmp	r3, #1
    d636:	d14b      	bne.n	d6d0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    d638:	7cfb      	ldrb	r3, [r7, #19]
    d63a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    d63e:	2b00      	cmp	r3, #0
    d640:	d002      	beq.n	d648 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    d642:	f06f 0313 	mvn.w	r3, #19
    d646:	e0b4      	b.n	d7b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    d648:	7efb      	ldrb	r3, [r7, #27]
    d64a:	2211      	movs	r2, #17
    d64c:	4619      	mov	r1, r3
    d64e:	69f8      	ldr	r0, [r7, #28]
    d650:	4b5d      	ldr	r3, [pc, #372]	; (d7c8 <_usb_d_dev_ep_enable+0x200>)
    d652:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d654:	697b      	ldr	r3, [r7, #20]
    d656:	8a1b      	ldrh	r3, [r3, #16]
    d658:	039b      	lsls	r3, r3, #14
    d65a:	4c5c      	ldr	r4, [pc, #368]	; (d7cc <_usb_d_dev_ep_enable+0x204>)
    d65c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d65e:	697b      	ldr	r3, [r7, #20]
    d660:	8a1b      	ldrh	r3, [r3, #16]
    d662:	4618      	mov	r0, r3
    d664:	4b5a      	ldr	r3, [pc, #360]	; (d7d0 <_usb_d_dev_ep_enable+0x208>)
    d666:	4798      	blx	r3
    d668:	4603      	mov	r3, r0
    d66a:	071b      	lsls	r3, r3, #28
    d66c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d670:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d674:	68fb      	ldr	r3, [r7, #12]
    d676:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    d678:	68fb      	ldr	r3, [r7, #12]
    d67a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d67e:	697b      	ldr	r3, [r7, #20]
    d680:	8a1b      	ldrh	r3, [r3, #16]
    d682:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d686:	697b      	ldr	r3, [r7, #20]
    d688:	8a1b      	ldrh	r3, [r3, #16]
    d68a:	4618      	mov	r0, r3
    d68c:	4b50      	ldr	r3, [pc, #320]	; (d7d0 <_usb_d_dev_ep_enable+0x208>)
    d68e:	4798      	blx	r3
    d690:	4603      	mov	r3, r0
    d692:	071b      	lsls	r3, r3, #28
    d694:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d698:	432b      	orrs	r3, r5
    d69a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d69c:	7efb      	ldrb	r3, [r7, #27]
    d69e:	2200      	movs	r2, #0
    d6a0:	2100      	movs	r1, #0
    d6a2:	4618      	mov	r0, r3
    d6a4:	4b4b      	ldr	r3, [pc, #300]	; (d7d4 <_usb_d_dev_ep_enable+0x20c>)
    d6a6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    d6a8:	7efb      	ldrb	r3, [r7, #27]
    d6aa:	2200      	movs	r2, #0
    d6ac:	2101      	movs	r1, #1
    d6ae:	4618      	mov	r0, r3
    d6b0:	4b49      	ldr	r3, [pc, #292]	; (d7d8 <_usb_d_dev_ep_enable+0x210>)
    d6b2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    d6b4:	7efb      	ldrb	r3, [r7, #27]
    d6b6:	2100      	movs	r1, #0
    d6b8:	4618      	mov	r0, r3
    d6ba:	4b48      	ldr	r3, [pc, #288]	; (d7dc <_usb_d_dev_ep_enable+0x214>)
    d6bc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d6be:	7efb      	ldrb	r3, [r7, #27]
    d6c0:	2101      	movs	r1, #1
    d6c2:	4618      	mov	r0, r3
    d6c4:	4b45      	ldr	r3, [pc, #276]	; (d7dc <_usb_d_dev_ep_enable+0x214>)
    d6c6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    d6c8:	6978      	ldr	r0, [r7, #20]
    d6ca:	4b45      	ldr	r3, [pc, #276]	; (d7e0 <_usb_d_dev_ep_enable+0x218>)
    d6cc:	4798      	blx	r3
    d6ce:	e06f      	b.n	d7b0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    d6d0:	7ebb      	ldrb	r3, [r7, #26]
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	d038      	beq.n	d748 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    d6d6:	7cfb      	ldrb	r3, [r7, #19]
    d6d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d002      	beq.n	d6e6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    d6e0:	f06f 0313 	mvn.w	r3, #19
    d6e4:	e065      	b.n	d7b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    d6e6:	697b      	ldr	r3, [r7, #20]
    d6e8:	7cdb      	ldrb	r3, [r3, #19]
    d6ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6ee:	b2db      	uxtb	r3, r3
    d6f0:	011b      	lsls	r3, r3, #4
    d6f2:	b2db      	uxtb	r3, r3
    d6f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d6f8:	b2da      	uxtb	r2, r3
    d6fa:	7cfb      	ldrb	r3, [r7, #19]
    d6fc:	4313      	orrs	r3, r2
    d6fe:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d700:	7cfa      	ldrb	r2, [r7, #19]
    d702:	7efb      	ldrb	r3, [r7, #27]
    d704:	4619      	mov	r1, r3
    d706:	69f8      	ldr	r0, [r7, #28]
    d708:	4b2f      	ldr	r3, [pc, #188]	; (d7c8 <_usb_d_dev_ep_enable+0x200>)
    d70a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    d70c:	68fb      	ldr	r3, [r7, #12]
    d70e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d712:	697b      	ldr	r3, [r7, #20]
    d714:	8a1b      	ldrh	r3, [r3, #16]
    d716:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d71a:	697b      	ldr	r3, [r7, #20]
    d71c:	8a1b      	ldrh	r3, [r3, #16]
    d71e:	4618      	mov	r0, r3
    d720:	4b2b      	ldr	r3, [pc, #172]	; (d7d0 <_usb_d_dev_ep_enable+0x208>)
    d722:	4798      	blx	r3
    d724:	4603      	mov	r3, r0
    d726:	071b      	lsls	r3, r3, #28
    d728:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d72c:	432b      	orrs	r3, r5
    d72e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d730:	7efb      	ldrb	r3, [r7, #27]
    d732:	2200      	movs	r2, #0
    d734:	2101      	movs	r1, #1
    d736:	4618      	mov	r0, r3
    d738:	4b27      	ldr	r3, [pc, #156]	; (d7d8 <_usb_d_dev_ep_enable+0x210>)
    d73a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d73c:	7efb      	ldrb	r3, [r7, #27]
    d73e:	2101      	movs	r1, #1
    d740:	4618      	mov	r0, r3
    d742:	4b26      	ldr	r3, [pc, #152]	; (d7dc <_usb_d_dev_ep_enable+0x214>)
    d744:	4798      	blx	r3
    d746:	e033      	b.n	d7b0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    d748:	7cfb      	ldrb	r3, [r7, #19]
    d74a:	f003 0307 	and.w	r3, r3, #7
    d74e:	2b00      	cmp	r3, #0
    d750:	d002      	beq.n	d758 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    d752:	f06f 0313 	mvn.w	r3, #19
    d756:	e02c      	b.n	d7b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    d758:	697b      	ldr	r3, [r7, #20]
    d75a:	7cdb      	ldrb	r3, [r3, #19]
    d75c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d760:	b2db      	uxtb	r3, r3
    d762:	461a      	mov	r2, r3
    d764:	7cfb      	ldrb	r3, [r7, #19]
    d766:	4313      	orrs	r3, r2
    d768:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d76a:	7cfa      	ldrb	r2, [r7, #19]
    d76c:	7efb      	ldrb	r3, [r7, #27]
    d76e:	4619      	mov	r1, r3
    d770:	69f8      	ldr	r0, [r7, #28]
    d772:	4b15      	ldr	r3, [pc, #84]	; (d7c8 <_usb_d_dev_ep_enable+0x200>)
    d774:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d776:	697b      	ldr	r3, [r7, #20]
    d778:	8a1b      	ldrh	r3, [r3, #16]
    d77a:	039b      	lsls	r3, r3, #14
    d77c:	4c13      	ldr	r4, [pc, #76]	; (d7cc <_usb_d_dev_ep_enable+0x204>)
    d77e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d780:	697b      	ldr	r3, [r7, #20]
    d782:	8a1b      	ldrh	r3, [r3, #16]
    d784:	4618      	mov	r0, r3
    d786:	4b12      	ldr	r3, [pc, #72]	; (d7d0 <_usb_d_dev_ep_enable+0x208>)
    d788:	4798      	blx	r3
    d78a:	4603      	mov	r3, r0
    d78c:	071b      	lsls	r3, r3, #28
    d78e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d792:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d796:	68fb      	ldr	r3, [r7, #12]
    d798:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d79a:	7efb      	ldrb	r3, [r7, #27]
    d79c:	2200      	movs	r2, #0
    d79e:	2100      	movs	r1, #0
    d7a0:	4618      	mov	r0, r3
    d7a2:	4b0c      	ldr	r3, [pc, #48]	; (d7d4 <_usb_d_dev_ep_enable+0x20c>)
    d7a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    d7a6:	7efb      	ldrb	r3, [r7, #27]
    d7a8:	2100      	movs	r1, #0
    d7aa:	4618      	mov	r0, r3
    d7ac:	4b0b      	ldr	r3, [pc, #44]	; (d7dc <_usb_d_dev_ep_enable+0x214>)
    d7ae:	4798      	blx	r3
	}

	return USB_OK;
    d7b0:	2300      	movs	r3, #0
}
    d7b2:	4618      	mov	r0, r3
    d7b4:	3720      	adds	r7, #32
    d7b6:	46bd      	mov	sp, r7
    d7b8:	bdb0      	pop	{r4, r5, r7, pc}
    d7ba:	bf00      	nop
    d7bc:	0000c3e1 	.word	0x0000c3e1
    d7c0:	0000ba67 	.word	0x0000ba67
    d7c4:	200033fc 	.word	0x200033fc
    d7c8:	0000ba3d 	.word	0x0000ba3d
    d7cc:	0fffc000 	.word	0x0fffc000
    d7d0:	0000c37d 	.word	0x0000c37d
    d7d4:	0000c325 	.word	0x0000c325
    d7d8:	0000c2cd 	.word	0x0000c2cd
    d7dc:	0000c295 	.word	0x0000c295
    d7e0:	0000d339 	.word	0x0000d339

0000d7e4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b084      	sub	sp, #16
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	6078      	str	r0, [r7, #4]
    d7ec:	460b      	mov	r3, r1
    d7ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d7f0:	687b      	ldr	r3, [r7, #4]
    d7f2:	7c9b      	ldrb	r3, [r3, #18]
    d7f4:	f003 030f 	and.w	r3, r3, #15
    d7f8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    d7fa:	78fa      	ldrb	r2, [r7, #3]
    d7fc:	7bfb      	ldrb	r3, [r7, #15]
    d7fe:	4611      	mov	r1, r2
    d800:	4618      	mov	r0, r3
    d802:	4b03      	ldr	r3, [pc, #12]	; (d810 <_usb_d_dev_ep_stall_get+0x2c>)
    d804:	4798      	blx	r3
    d806:	4603      	mov	r3, r0
}
    d808:	4618      	mov	r0, r3
    d80a:	3710      	adds	r7, #16
    d80c:	46bd      	mov	sp, r7
    d80e:	bd80      	pop	{r7, pc}
    d810:	0000bed5 	.word	0x0000bed5

0000d814 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    d814:	b580      	push	{r7, lr}
    d816:	b084      	sub	sp, #16
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
    d81c:	460b      	mov	r3, r1
    d81e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d820:	687b      	ldr	r3, [r7, #4]
    d822:	7c9b      	ldrb	r3, [r3, #18]
    d824:	f003 030f 	and.w	r3, r3, #15
    d828:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    d82a:	78f9      	ldrb	r1, [r7, #3]
    d82c:	7bfb      	ldrb	r3, [r7, #15]
    d82e:	2201      	movs	r2, #1
    d830:	4618      	mov	r0, r3
    d832:	4b0a      	ldr	r3, [pc, #40]	; (d85c <_usb_d_dev_ep_stall_set+0x48>)
    d834:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d836:	78fb      	ldrb	r3, [r7, #3]
    d838:	2220      	movs	r2, #32
    d83a:	409a      	lsls	r2, r3
    d83c:	7bfb      	ldrb	r3, [r7, #15]
    d83e:	4611      	mov	r1, r2
    d840:	4618      	mov	r0, r3
    d842:	4b07      	ldr	r3, [pc, #28]	; (d860 <_usb_d_dev_ep_stall_set+0x4c>)
    d844:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    d846:	687a      	ldr	r2, [r7, #4]
    d848:	7cd3      	ldrb	r3, [r2, #19]
    d84a:	f043 0308 	orr.w	r3, r3, #8
    d84e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    d850:	2300      	movs	r3, #0
}
    d852:	4618      	mov	r0, r3
    d854:	3710      	adds	r7, #16
    d856:	46bd      	mov	sp, r7
    d858:	bd80      	pop	{r7, pc}
    d85a:	bf00      	nop
    d85c:	0000be7d 	.word	0x0000be7d
    d860:	0000bdfd 	.word	0x0000bdfd

0000d864 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    d864:	b580      	push	{r7, lr}
    d866:	b084      	sub	sp, #16
    d868:	af00      	add	r7, sp, #0
    d86a:	6078      	str	r0, [r7, #4]
    d86c:	460b      	mov	r3, r1
    d86e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    d870:	687b      	ldr	r3, [r7, #4]
    d872:	7c9b      	ldrb	r3, [r3, #18]
    d874:	f003 030f 	and.w	r3, r3, #15
    d878:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    d87a:	78fa      	ldrb	r2, [r7, #3]
    d87c:	7bfb      	ldrb	r3, [r7, #15]
    d87e:	4611      	mov	r1, r2
    d880:	4618      	mov	r0, r3
    d882:	4b28      	ldr	r3, [pc, #160]	; (d924 <_usb_d_dev_ep_stall_clr+0xc0>)
    d884:	4798      	blx	r3
    d886:	4603      	mov	r3, r0
    d888:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    d88a:	7bbb      	ldrb	r3, [r7, #14]
    d88c:	f083 0301 	eor.w	r3, r3, #1
    d890:	b2db      	uxtb	r3, r3
    d892:	2b00      	cmp	r3, #0
    d894:	d001      	beq.n	d89a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    d896:	2300      	movs	r3, #0
    d898:	e040      	b.n	d91c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    d89a:	78f9      	ldrb	r1, [r7, #3]
    d89c:	7bfb      	ldrb	r3, [r7, #15]
    d89e:	2200      	movs	r2, #0
    d8a0:	4618      	mov	r0, r3
    d8a2:	4b21      	ldr	r3, [pc, #132]	; (d928 <_usb_d_dev_ep_stall_clr+0xc4>)
    d8a4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d8a6:	78fb      	ldrb	r3, [r7, #3]
    d8a8:	2220      	movs	r2, #32
    d8aa:	409a      	lsls	r2, r3
    d8ac:	7bfb      	ldrb	r3, [r7, #15]
    d8ae:	4611      	mov	r1, r2
    d8b0:	4618      	mov	r0, r3
    d8b2:	4b1e      	ldr	r3, [pc, #120]	; (d92c <_usb_d_dev_ep_stall_clr+0xc8>)
    d8b4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    d8b6:	78fa      	ldrb	r2, [r7, #3]
    d8b8:	7bfb      	ldrb	r3, [r7, #15]
    d8ba:	4611      	mov	r1, r2
    d8bc:	4618      	mov	r0, r3
    d8be:	4b1c      	ldr	r3, [pc, #112]	; (d930 <_usb_d_dev_ep_stall_clr+0xcc>)
    d8c0:	4798      	blx	r3
    d8c2:	4603      	mov	r3, r0
    d8c4:	2b00      	cmp	r3, #0
    d8c6:	d00b      	beq.n	d8e0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    d8c8:	78fa      	ldrb	r2, [r7, #3]
    d8ca:	7bfb      	ldrb	r3, [r7, #15]
    d8cc:	4611      	mov	r1, r2
    d8ce:	4618      	mov	r0, r3
    d8d0:	4b18      	ldr	r3, [pc, #96]	; (d934 <_usb_d_dev_ep_stall_clr+0xd0>)
    d8d2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    d8d4:	78f9      	ldrb	r1, [r7, #3]
    d8d6:	7bfb      	ldrb	r3, [r7, #15]
    d8d8:	2200      	movs	r2, #0
    d8da:	4618      	mov	r0, r3
    d8dc:	4b16      	ldr	r3, [pc, #88]	; (d938 <_usb_d_dev_ep_stall_clr+0xd4>)
    d8de:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d8e0:	687b      	ldr	r3, [r7, #4]
    d8e2:	7cdb      	ldrb	r3, [r3, #19]
    d8e4:	f003 0307 	and.w	r3, r3, #7
    d8e8:	b2db      	uxtb	r3, r3
    d8ea:	2b01      	cmp	r3, #1
    d8ec:	d110      	bne.n	d910 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    d8ee:	7bfb      	ldrb	r3, [r7, #15]
    d8f0:	4619      	mov	r1, r3
    d8f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d8f6:	4b11      	ldr	r3, [pc, #68]	; (d93c <_usb_d_dev_ep_stall_clr+0xd8>)
    d8f8:	4798      	blx	r3
    d8fa:	4603      	mov	r3, r0
    d8fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d900:	2b00      	cmp	r3, #0
    d902:	d10a      	bne.n	d91a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    d904:	687a      	ldr	r2, [r7, #4]
    d906:	7cd3      	ldrb	r3, [r2, #19]
    d908:	f36f 03c3 	bfc	r3, #3, #1
    d90c:	74d3      	strb	r3, [r2, #19]
    d90e:	e004      	b.n	d91a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    d910:	687a      	ldr	r2, [r7, #4]
    d912:	7cd3      	ldrb	r3, [r2, #19]
    d914:	f36f 03c3 	bfc	r3, #3, #1
    d918:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    d91a:	2300      	movs	r3, #0
}
    d91c:	4618      	mov	r0, r3
    d91e:	3710      	adds	r7, #16
    d920:	46bd      	mov	sp, r7
    d922:	bd80      	pop	{r7, pc}
    d924:	0000bed5 	.word	0x0000bed5
    d928:	0000be7d 	.word	0x0000be7d
    d92c:	0000be25 	.word	0x0000be25
    d930:	0000bf19 	.word	0x0000bf19
    d934:	0000bf5d 	.word	0x0000bf5d
    d938:	0000c049 	.word	0x0000c049
    d93c:	0000b905 	.word	0x0000b905

0000d940 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    d940:	b580      	push	{r7, lr}
    d942:	b086      	sub	sp, #24
    d944:	af00      	add	r7, sp, #0
    d946:	4603      	mov	r3, r0
    d948:	460a      	mov	r2, r1
    d94a:	71fb      	strb	r3, [r7, #7]
    d94c:	4613      	mov	r3, r2
    d94e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    d950:	79fb      	ldrb	r3, [r7, #7]
    d952:	f003 030f 	and.w	r3, r3, #15
    d956:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d958:	79fb      	ldrb	r3, [r7, #7]
    d95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d95e:	2b00      	cmp	r3, #0
    d960:	bf14      	ite	ne
    d962:	2301      	movne	r3, #1
    d964:	2300      	moveq	r3, #0
    d966:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d968:	7cba      	ldrb	r2, [r7, #18]
    d96a:	7cfb      	ldrb	r3, [r7, #19]
    d96c:	4611      	mov	r1, r2
    d96e:	4618      	mov	r0, r3
    d970:	4b13      	ldr	r3, [pc, #76]	; (d9c0 <_usb_d_dev_ep_stall+0x80>)
    d972:	4798      	blx	r3
    d974:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d976:	7cfb      	ldrb	r3, [r7, #19]
    d978:	2b04      	cmp	r3, #4
    d97a:	d902      	bls.n	d982 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    d97c:	f06f 0311 	mvn.w	r3, #17
    d980:	e01a      	b.n	d9b8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    d982:	79bb      	ldrb	r3, [r7, #6]
    d984:	2b01      	cmp	r3, #1
    d986:	d106      	bne.n	d996 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    d988:	7cbb      	ldrb	r3, [r7, #18]
    d98a:	4619      	mov	r1, r3
    d98c:	68f8      	ldr	r0, [r7, #12]
    d98e:	4b0d      	ldr	r3, [pc, #52]	; (d9c4 <_usb_d_dev_ep_stall+0x84>)
    d990:	4798      	blx	r3
    d992:	6178      	str	r0, [r7, #20]
    d994:	e00f      	b.n	d9b6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    d996:	79bb      	ldrb	r3, [r7, #6]
    d998:	2b00      	cmp	r3, #0
    d99a:	d106      	bne.n	d9aa <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    d99c:	7cbb      	ldrb	r3, [r7, #18]
    d99e:	4619      	mov	r1, r3
    d9a0:	68f8      	ldr	r0, [r7, #12]
    d9a2:	4b09      	ldr	r3, [pc, #36]	; (d9c8 <_usb_d_dev_ep_stall+0x88>)
    d9a4:	4798      	blx	r3
    d9a6:	6178      	str	r0, [r7, #20]
    d9a8:	e005      	b.n	d9b6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    d9aa:	7cbb      	ldrb	r3, [r7, #18]
    d9ac:	4619      	mov	r1, r3
    d9ae:	68f8      	ldr	r0, [r7, #12]
    d9b0:	4b06      	ldr	r3, [pc, #24]	; (d9cc <_usb_d_dev_ep_stall+0x8c>)
    d9b2:	4798      	blx	r3
    d9b4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    d9b6:	697b      	ldr	r3, [r7, #20]
}
    d9b8:	4618      	mov	r0, r3
    d9ba:	3718      	adds	r7, #24
    d9bc:	46bd      	mov	sp, r7
    d9be:	bd80      	pop	{r7, pc}
    d9c0:	0000c3e1 	.word	0x0000c3e1
    d9c4:	0000d815 	.word	0x0000d815
    d9c8:	0000d865 	.word	0x0000d865
    d9cc:	0000d7e5 	.word	0x0000d7e5

0000d9d0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    d9d0:	b580      	push	{r7, lr}
    d9d2:	b082      	sub	sp, #8
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	6078      	str	r0, [r7, #4]
    d9d8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	7c9b      	ldrb	r3, [r3, #18]
    d9de:	2bff      	cmp	r3, #255	; 0xff
    d9e0:	d014      	beq.n	da0c <_usb_d_dev_trans_done+0x3c>
    d9e2:	687b      	ldr	r3, [r7, #4]
    d9e4:	7cdb      	ldrb	r3, [r3, #19]
    d9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d9ea:	b2db      	uxtb	r3, r3
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	d00d      	beq.n	da0c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    d9f0:	687a      	ldr	r2, [r7, #4]
    d9f2:	7cd3      	ldrb	r3, [r2, #19]
    d9f4:	f36f 1386 	bfc	r3, #6, #1
    d9f8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    d9fa:	4b06      	ldr	r3, [pc, #24]	; (da14 <_usb_d_dev_trans_done+0x44>)
    d9fc:	691b      	ldr	r3, [r3, #16]
    d9fe:	687a      	ldr	r2, [r7, #4]
    da00:	7c90      	ldrb	r0, [r2, #18]
    da02:	687a      	ldr	r2, [r7, #4]
    da04:	6892      	ldr	r2, [r2, #8]
    da06:	6839      	ldr	r1, [r7, #0]
    da08:	4798      	blx	r3
    da0a:	e000      	b.n	da0e <_usb_d_dev_trans_done+0x3e>
		return;
    da0c:	bf00      	nop
}
    da0e:	3708      	adds	r7, #8
    da10:	46bd      	mov	sp, r7
    da12:	bd80      	pop	{r7, pc}
    da14:	20003334 	.word	0x20003334

0000da18 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    da18:	b580      	push	{r7, lr}
    da1a:	b086      	sub	sp, #24
    da1c:	af00      	add	r7, sp, #0
    da1e:	60f8      	str	r0, [r7, #12]
    da20:	460b      	mov	r3, r1
    da22:	607a      	str	r2, [r7, #4]
    da24:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    da26:	68fb      	ldr	r3, [r7, #12]
    da28:	7c9b      	ldrb	r3, [r3, #18]
    da2a:	f003 030f 	and.w	r3, r3, #15
    da2e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    da30:	4b1f      	ldr	r3, [pc, #124]	; (dab0 <_usb_d_dev_trans_stop+0x98>)
    da32:	881b      	ldrh	r3, [r3, #0]
    da34:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    da36:	68fb      	ldr	r3, [r7, #12]
    da38:	7c9b      	ldrb	r3, [r3, #18]
    da3a:	2bff      	cmp	r3, #255	; 0xff
    da3c:	d033      	beq.n	daa6 <_usb_d_dev_trans_stop+0x8e>
    da3e:	68fb      	ldr	r3, [r7, #12]
    da40:	7cdb      	ldrb	r3, [r3, #19]
    da42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    da46:	b2db      	uxtb	r3, r3
    da48:	2b00      	cmp	r3, #0
    da4a:	d02c      	beq.n	daa6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    da4c:	7afb      	ldrb	r3, [r7, #11]
    da4e:	2b00      	cmp	r3, #0
    da50:	d006      	beq.n	da60 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    da52:	7dfb      	ldrb	r3, [r7, #23]
    da54:	2200      	movs	r2, #0
    da56:	2101      	movs	r1, #1
    da58:	4618      	mov	r0, r3
    da5a:	4b16      	ldr	r3, [pc, #88]	; (dab4 <_usb_d_dev_trans_stop+0x9c>)
    da5c:	4798      	blx	r3
    da5e:	e005      	b.n	da6c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    da60:	7dfb      	ldrb	r3, [r7, #23]
    da62:	2200      	movs	r2, #0
    da64:	2100      	movs	r1, #0
    da66:	4618      	mov	r0, r3
    da68:	4b13      	ldr	r3, [pc, #76]	; (dab8 <_usb_d_dev_trans_stop+0xa0>)
    da6a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    da6c:	7afb      	ldrb	r3, [r7, #11]
    da6e:	f107 0218 	add.w	r2, r7, #24
    da72:	4413      	add	r3, r2
    da74:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    da78:	461a      	mov	r2, r3
    da7a:	7dfb      	ldrb	r3, [r7, #23]
    da7c:	4611      	mov	r1, r2
    da7e:	4618      	mov	r0, r3
    da80:	4b0e      	ldr	r3, [pc, #56]	; (dabc <_usb_d_dev_trans_stop+0xa4>)
    da82:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    da84:	7afb      	ldrb	r3, [r7, #11]
    da86:	f107 0218 	add.w	r2, r7, #24
    da8a:	4413      	add	r3, r2
    da8c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    da90:	461a      	mov	r2, r3
    da92:	7dfb      	ldrb	r3, [r7, #23]
    da94:	4611      	mov	r1, r2
    da96:	4618      	mov	r0, r3
    da98:	4b09      	ldr	r3, [pc, #36]	; (dac0 <_usb_d_dev_trans_stop+0xa8>)
    da9a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    da9c:	6879      	ldr	r1, [r7, #4]
    da9e:	68f8      	ldr	r0, [r7, #12]
    daa0:	4b08      	ldr	r3, [pc, #32]	; (dac4 <_usb_d_dev_trans_stop+0xac>)
    daa2:	4798      	blx	r3
    daa4:	e000      	b.n	daa8 <_usb_d_dev_trans_stop+0x90>
		return;
    daa6:	bf00      	nop
}
    daa8:	3718      	adds	r7, #24
    daaa:	46bd      	mov	sp, r7
    daac:	bd80      	pop	{r7, pc}
    daae:	bf00      	nop
    dab0:	000173e4 	.word	0x000173e4
    dab4:	0000c2cd 	.word	0x0000c2cd
    dab8:	0000c325 	.word	0x0000c325
    dabc:	0000bdd5 	.word	0x0000bdd5
    dac0:	0000be25 	.word	0x0000be25
    dac4:	0000d9d1 	.word	0x0000d9d1

0000dac8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    dac8:	b580      	push	{r7, lr}
    daca:	b086      	sub	sp, #24
    dacc:	af00      	add	r7, sp, #0
    dace:	4603      	mov	r3, r0
    dad0:	6039      	str	r1, [r7, #0]
    dad2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    dad4:	79fb      	ldrb	r3, [r7, #7]
    dad6:	f003 030f 	and.w	r3, r3, #15
    dada:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    dadc:	7dfb      	ldrb	r3, [r7, #23]
    dade:	015b      	lsls	r3, r3, #5
    dae0:	4a1e      	ldr	r2, [pc, #120]	; (db5c <_usb_d_dev_ep_read_req+0x94>)
    dae2:	4413      	add	r3, r2
    dae4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    dae6:	693b      	ldr	r3, [r7, #16]
    dae8:	681b      	ldr	r3, [r3, #0]
    daea:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    daec:	693b      	ldr	r3, [r7, #16]
    daee:	685b      	ldr	r3, [r3, #4]
    daf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    daf4:	b29b      	uxth	r3, r3
    daf6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    daf8:	7dfb      	ldrb	r3, [r7, #23]
    dafa:	2b04      	cmp	r3, #4
    dafc:	d802      	bhi.n	db04 <_usb_d_dev_ep_read_req+0x3c>
    dafe:	683b      	ldr	r3, [r7, #0]
    db00:	2b00      	cmp	r3, #0
    db02:	d102      	bne.n	db0a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    db04:	f06f 0311 	mvn.w	r3, #17
    db08:	e023      	b.n	db52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    db0a:	7dfb      	ldrb	r3, [r7, #23]
    db0c:	4618      	mov	r0, r3
    db0e:	4b14      	ldr	r3, [pc, #80]	; (db60 <_usb_d_dev_ep_read_req+0x98>)
    db10:	4798      	blx	r3
    db12:	4603      	mov	r3, r0
    db14:	f083 0301 	eor.w	r3, r3, #1
    db18:	b2db      	uxtb	r3, r3
    db1a:	2b00      	cmp	r3, #0
    db1c:	d002      	beq.n	db24 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    db1e:	f06f 0312 	mvn.w	r3, #18
    db22:	e016      	b.n	db52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    db24:	7dfb      	ldrb	r3, [r7, #23]
    db26:	4618      	mov	r0, r3
    db28:	4b0e      	ldr	r3, [pc, #56]	; (db64 <_usb_d_dev_ep_read_req+0x9c>)
    db2a:	4798      	blx	r3
    db2c:	4603      	mov	r3, r0
    db2e:	f083 0301 	eor.w	r3, r3, #1
    db32:	b2db      	uxtb	r3, r3
    db34:	2b00      	cmp	r3, #0
    db36:	d001      	beq.n	db3c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    db38:	2300      	movs	r3, #0
    db3a:	e00a      	b.n	db52 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    db3c:	68fb      	ldr	r3, [r7, #12]
    db3e:	2208      	movs	r2, #8
    db40:	4619      	mov	r1, r3
    db42:	6838      	ldr	r0, [r7, #0]
    db44:	4b08      	ldr	r3, [pc, #32]	; (db68 <_usb_d_dev_ep_read_req+0xa0>)
    db46:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    db48:	7dfb      	ldrb	r3, [r7, #23]
    db4a:	4618      	mov	r0, r3
    db4c:	4b07      	ldr	r3, [pc, #28]	; (db6c <_usb_d_dev_ep_read_req+0xa4>)
    db4e:	4798      	blx	r3

	return bytes;
    db50:	897b      	ldrh	r3, [r7, #10]
}
    db52:	4618      	mov	r0, r3
    db54:	3718      	adds	r7, #24
    db56:	46bd      	mov	sp, r7
    db58:	bd80      	pop	{r7, pc}
    db5a:	bf00      	nop
    db5c:	200033fc 	.word	0x200033fc
    db60:	0000be4d 	.word	0x0000be4d
    db64:	0000bff9 	.word	0x0000bff9
    db68:	0001652d 	.word	0x0001652d
    db6c:	0000c029 	.word	0x0000c029

0000db70 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    db70:	b580      	push	{r7, lr}
    db72:	b086      	sub	sp, #24
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    db78:	687b      	ldr	r3, [r7, #4]
    db7a:	7a1b      	ldrb	r3, [r3, #8]
    db7c:	f003 030f 	and.w	r3, r3, #15
    db80:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    db82:	687b      	ldr	r3, [r7, #4]
    db84:	7a1b      	ldrb	r3, [r3, #8]
    db86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    db8a:	2b00      	cmp	r3, #0
    db8c:	bf14      	ite	ne
    db8e:	2301      	movne	r3, #1
    db90:	2300      	moveq	r3, #0
    db92:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    db94:	7d7a      	ldrb	r2, [r7, #21]
    db96:	7dbb      	ldrb	r3, [r7, #22]
    db98:	4611      	mov	r1, r2
    db9a:	4618      	mov	r0, r3
    db9c:	4b5f      	ldr	r3, [pc, #380]	; (dd1c <_usb_d_dev_ep_trans+0x1ac>)
    db9e:	4798      	blx	r3
    dba0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    dba2:	693b      	ldr	r3, [r7, #16]
    dba4:	8a1b      	ldrh	r3, [r3, #16]
    dba6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    dbaa:	4293      	cmp	r3, r2
    dbac:	d004      	beq.n	dbb8 <_usb_d_dev_ep_trans+0x48>
    dbae:	693b      	ldr	r3, [r7, #16]
    dbb0:	8a1b      	ldrh	r3, [r3, #16]
    dbb2:	3b01      	subs	r3, #1
    dbb4:	b29b      	uxth	r3, r3
    dbb6:	e001      	b.n	dbbc <_usb_d_dev_ep_trans+0x4c>
    dbb8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    dbbc:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    dbbe:	687b      	ldr	r3, [r7, #4]
    dbc0:	685a      	ldr	r2, [r3, #4]
    dbc2:	89fb      	ldrh	r3, [r7, #14]
    dbc4:	4013      	ands	r3, r2
    dbc6:	2b00      	cmp	r3, #0
    dbc8:	bf14      	ite	ne
    dbca:	2301      	movne	r3, #1
    dbcc:	2300      	moveq	r3, #0
    dbce:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    dbd0:	2300      	movs	r3, #0
    dbd2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    dbd4:	7dbb      	ldrb	r3, [r7, #22]
    dbd6:	2b04      	cmp	r3, #4
    dbd8:	d902      	bls.n	dbe0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    dbda:	f06f 0311 	mvn.w	r3, #17
    dbde:	e098      	b.n	dd12 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	681b      	ldr	r3, [r3, #0]
    dbe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    dbe8:	d31a      	bcc.n	dc20 <_usb_d_dev_ep_trans+0xb0>
    dbea:	687b      	ldr	r3, [r7, #4]
    dbec:	681b      	ldr	r3, [r3, #0]
    dbee:	461a      	mov	r2, r3
    dbf0:	687b      	ldr	r3, [r7, #4]
    dbf2:	685b      	ldr	r3, [r3, #4]
    dbf4:	4413      	add	r3, r2
    dbf6:	4a4a      	ldr	r2, [pc, #296]	; (dd20 <_usb_d_dev_ep_trans+0x1b0>)
    dbf8:	4293      	cmp	r3, r2
    dbfa:	d811      	bhi.n	dc20 <_usb_d_dev_ep_trans+0xb0>
    dbfc:	687b      	ldr	r3, [r7, #4]
    dbfe:	681b      	ldr	r3, [r3, #0]
    dc00:	f003 0303 	and.w	r3, r3, #3
    dc04:	2b00      	cmp	r3, #0
    dc06:	d10b      	bne.n	dc20 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    dc08:	7d7b      	ldrb	r3, [r7, #21]
    dc0a:	f083 0301 	eor.w	r3, r3, #1
    dc0e:	b2db      	uxtb	r3, r3
    dc10:	2b00      	cmp	r3, #0
    dc12:	d00e      	beq.n	dc32 <_usb_d_dev_ep_trans+0xc2>
    dc14:	687b      	ldr	r3, [r7, #4]
    dc16:	685b      	ldr	r3, [r3, #4]
    dc18:	693a      	ldr	r2, [r7, #16]
    dc1a:	8a12      	ldrh	r2, [r2, #16]
    dc1c:	4293      	cmp	r3, r2
    dc1e:	d208      	bcs.n	dc32 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    dc20:	693b      	ldr	r3, [r7, #16]
    dc22:	68db      	ldr	r3, [r3, #12]
    dc24:	2b00      	cmp	r3, #0
    dc26:	d102      	bne.n	dc2e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    dc28:	f06f 0312 	mvn.w	r3, #18
    dc2c:	e071      	b.n	dd12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    dc2e:	2301      	movs	r3, #1
    dc30:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    dc32:	7d7b      	ldrb	r3, [r7, #21]
    dc34:	f083 0301 	eor.w	r3, r3, #1
    dc38:	b2db      	uxtb	r3, r3
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d009      	beq.n	dc52 <_usb_d_dev_ep_trans+0xe2>
    dc3e:	7b7b      	ldrb	r3, [r7, #13]
    dc40:	2b00      	cmp	r3, #0
    dc42:	d006      	beq.n	dc52 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    dc44:	693b      	ldr	r3, [r7, #16]
    dc46:	68db      	ldr	r3, [r3, #12]
    dc48:	2b00      	cmp	r3, #0
    dc4a:	d102      	bne.n	dc52 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    dc4c:	f06f 0311 	mvn.w	r3, #17
    dc50:	e05f      	b.n	dd12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    dc52:	693b      	ldr	r3, [r7, #16]
    dc54:	7cdb      	ldrb	r3, [r3, #19]
    dc56:	f003 0308 	and.w	r3, r3, #8
    dc5a:	b2db      	uxtb	r3, r3
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d001      	beq.n	dc64 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    dc60:	2302      	movs	r3, #2
    dc62:	e056      	b.n	dd12 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    dc64:	f107 0308 	add.w	r3, r7, #8
    dc68:	4618      	mov	r0, r3
    dc6a:	4b2e      	ldr	r3, [pc, #184]	; (dd24 <_usb_d_dev_ep_trans+0x1b4>)
    dc6c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    dc6e:	693b      	ldr	r3, [r7, #16]
    dc70:	7cdb      	ldrb	r3, [r3, #19]
    dc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dc76:	b2db      	uxtb	r3, r3
    dc78:	2b00      	cmp	r3, #0
    dc7a:	d006      	beq.n	dc8a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    dc7c:	f107 0308 	add.w	r3, r7, #8
    dc80:	4618      	mov	r0, r3
    dc82:	4b29      	ldr	r3, [pc, #164]	; (dd28 <_usb_d_dev_ep_trans+0x1b8>)
    dc84:	4798      	blx	r3
		return USB_BUSY;
    dc86:	2301      	movs	r3, #1
    dc88:	e043      	b.n	dd12 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    dc8a:	693a      	ldr	r2, [r7, #16]
    dc8c:	7cd3      	ldrb	r3, [r2, #19]
    dc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dc92:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    dc94:	f107 0308 	add.w	r3, r7, #8
    dc98:	4618      	mov	r0, r3
    dc9a:	4b23      	ldr	r3, [pc, #140]	; (dd28 <_usb_d_dev_ep_trans+0x1b8>)
    dc9c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    dc9e:	687b      	ldr	r3, [r7, #4]
    dca0:	681a      	ldr	r2, [r3, #0]
    dca2:	693b      	ldr	r3, [r7, #16]
    dca4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    dca6:	687b      	ldr	r3, [r7, #4]
    dca8:	685a      	ldr	r2, [r3, #4]
    dcaa:	693b      	ldr	r3, [r7, #16]
    dcac:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    dcae:	693b      	ldr	r3, [r7, #16]
    dcb0:	2200      	movs	r2, #0
    dcb2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    dcb4:	693a      	ldr	r2, [r7, #16]
    dcb6:	7cd3      	ldrb	r3, [r2, #19]
    dcb8:	7d79      	ldrb	r1, [r7, #21]
    dcba:	f361 13c7 	bfi	r3, r1, #7, #1
    dcbe:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    dcc0:	693a      	ldr	r2, [r7, #16]
    dcc2:	7cd3      	ldrb	r3, [r2, #19]
    dcc4:	7df9      	ldrb	r1, [r7, #23]
    dcc6:	f361 1345 	bfi	r3, r1, #5, #1
    dcca:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    dccc:	687b      	ldr	r3, [r7, #4]
    dcce:	7a5b      	ldrb	r3, [r3, #9]
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d007      	beq.n	dce4 <_usb_d_dev_ep_trans+0x174>
    dcd4:	7b7b      	ldrb	r3, [r7, #13]
    dcd6:	f083 0301 	eor.w	r3, r3, #1
    dcda:	b2db      	uxtb	r3, r3
    dcdc:	2b00      	cmp	r3, #0
    dcde:	d001      	beq.n	dce4 <_usb_d_dev_ep_trans+0x174>
    dce0:	2301      	movs	r3, #1
    dce2:	e000      	b.n	dce6 <_usb_d_dev_ep_trans+0x176>
    dce4:	2300      	movs	r3, #0
    dce6:	b2db      	uxtb	r3, r3
    dce8:	f003 0301 	and.w	r3, r3, #1
    dcec:	b2d9      	uxtb	r1, r3
    dcee:	693a      	ldr	r2, [r7, #16]
    dcf0:	7cd3      	ldrb	r3, [r2, #19]
    dcf2:	f361 1304 	bfi	r3, r1, #4, #1
    dcf6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    dcf8:	7d7b      	ldrb	r3, [r7, #21]
    dcfa:	2b00      	cmp	r3, #0
    dcfc:	d004      	beq.n	dd08 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    dcfe:	2100      	movs	r1, #0
    dd00:	6938      	ldr	r0, [r7, #16]
    dd02:	4b0a      	ldr	r3, [pc, #40]	; (dd2c <_usb_d_dev_ep_trans+0x1bc>)
    dd04:	4798      	blx	r3
    dd06:	e003      	b.n	dd10 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    dd08:	2100      	movs	r1, #0
    dd0a:	6938      	ldr	r0, [r7, #16]
    dd0c:	4b08      	ldr	r3, [pc, #32]	; (dd30 <_usb_d_dev_ep_trans+0x1c0>)
    dd0e:	4798      	blx	r3
	}

	return ERR_NONE;
    dd10:	2300      	movs	r3, #0
}
    dd12:	4618      	mov	r0, r3
    dd14:	3718      	adds	r7, #24
    dd16:	46bd      	mov	sp, r7
    dd18:	bd80      	pop	{r7, pc}
    dd1a:	bf00      	nop
    dd1c:	0000c3e1 	.word	0x0000c3e1
    dd20:	20041fff 	.word	0x20041fff
    dd24:	0000e53d 	.word	0x0000e53d
    dd28:	0000e563 	.word	0x0000e563
    dd2c:	0000c6a9 	.word	0x0000c6a9
    dd30:	0000c8c1 	.word	0x0000c8c1

0000dd34 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    dd34:	b580      	push	{r7, lr}
    dd36:	b084      	sub	sp, #16
    dd38:	af00      	add	r7, sp, #0
    dd3a:	4603      	mov	r3, r0
    dd3c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    dd3e:	79fb      	ldrb	r3, [r7, #7]
    dd40:	f003 030f 	and.w	r3, r3, #15
    dd44:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    dd46:	79fb      	ldrb	r3, [r7, #7]
    dd48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dd4c:	2b00      	cmp	r3, #0
    dd4e:	bf14      	ite	ne
    dd50:	2301      	movne	r3, #1
    dd52:	2300      	moveq	r3, #0
    dd54:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dd56:	7bba      	ldrb	r2, [r7, #14]
    dd58:	7bfb      	ldrb	r3, [r7, #15]
    dd5a:	4611      	mov	r1, r2
    dd5c:	4618      	mov	r0, r3
    dd5e:	4b08      	ldr	r3, [pc, #32]	; (dd80 <_usb_d_dev_ep_abort+0x4c>)
    dd60:	4798      	blx	r3
    dd62:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    dd64:	7bfb      	ldrb	r3, [r7, #15]
    dd66:	2b04      	cmp	r3, #4
    dd68:	d806      	bhi.n	dd78 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    dd6a:	7bbb      	ldrb	r3, [r7, #14]
    dd6c:	2202      	movs	r2, #2
    dd6e:	4619      	mov	r1, r3
    dd70:	68b8      	ldr	r0, [r7, #8]
    dd72:	4b04      	ldr	r3, [pc, #16]	; (dd84 <_usb_d_dev_ep_abort+0x50>)
    dd74:	4798      	blx	r3
    dd76:	e000      	b.n	dd7a <_usb_d_dev_ep_abort+0x46>
		return;
    dd78:	bf00      	nop
}
    dd7a:	3710      	adds	r7, #16
    dd7c:	46bd      	mov	sp, r7
    dd7e:	bd80      	pop	{r7, pc}
    dd80:	0000c3e1 	.word	0x0000c3e1
    dd84:	0000da19 	.word	0x0000da19

0000dd88 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    dd88:	b480      	push	{r7}
    dd8a:	b085      	sub	sp, #20
    dd8c:	af00      	add	r7, sp, #0
    dd8e:	4603      	mov	r3, r0
    dd90:	6039      	str	r1, [r7, #0]
    dd92:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    dd94:	683b      	ldr	r3, [r7, #0]
    dd96:	2b00      	cmp	r3, #0
    dd98:	d001      	beq.n	dd9e <_usb_d_dev_register_callback+0x16>
    dd9a:	683b      	ldr	r3, [r7, #0]
    dd9c:	e000      	b.n	dda0 <_usb_d_dev_register_callback+0x18>
    dd9e:	4b0a      	ldr	r3, [pc, #40]	; (ddc8 <_usb_d_dev_register_callback+0x40>)
    dda0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    dda2:	79fb      	ldrb	r3, [r7, #7]
    dda4:	2b01      	cmp	r3, #1
    dda6:	d103      	bne.n	ddb0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    dda8:	4a08      	ldr	r2, [pc, #32]	; (ddcc <_usb_d_dev_register_callback+0x44>)
    ddaa:	68fb      	ldr	r3, [r7, #12]
    ddac:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ddae:	e005      	b.n	ddbc <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ddb0:	79fb      	ldrb	r3, [r7, #7]
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d102      	bne.n	ddbc <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ddb6:	4a05      	ldr	r2, [pc, #20]	; (ddcc <_usb_d_dev_register_callback+0x44>)
    ddb8:	68fb      	ldr	r3, [r7, #12]
    ddba:	6013      	str	r3, [r2, #0]
}
    ddbc:	bf00      	nop
    ddbe:	3714      	adds	r7, #20
    ddc0:	46bd      	mov	sp, r7
    ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddc6:	4770      	bx	lr
    ddc8:	0000bc69 	.word	0x0000bc69
    ddcc:	20003334 	.word	0x20003334

0000ddd0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ddd0:	b480      	push	{r7}
    ddd2:	b085      	sub	sp, #20
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	4603      	mov	r3, r0
    ddd8:	6039      	str	r1, [r7, #0]
    ddda:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    dddc:	683b      	ldr	r3, [r7, #0]
    ddde:	2b00      	cmp	r3, #0
    dde0:	d001      	beq.n	dde6 <_usb_d_dev_register_ep_callback+0x16>
    dde2:	683b      	ldr	r3, [r7, #0]
    dde4:	e000      	b.n	dde8 <_usb_d_dev_register_ep_callback+0x18>
    dde6:	4b0e      	ldr	r3, [pc, #56]	; (de20 <_usb_d_dev_register_ep_callback+0x50>)
    dde8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ddea:	79fb      	ldrb	r3, [r7, #7]
    ddec:	2b00      	cmp	r3, #0
    ddee:	d103      	bne.n	ddf8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ddf0:	4a0c      	ldr	r2, [pc, #48]	; (de24 <_usb_d_dev_register_ep_callback+0x54>)
    ddf2:	68fb      	ldr	r3, [r7, #12]
    ddf4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ddf6:	e00c      	b.n	de12 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ddf8:	79fb      	ldrb	r3, [r7, #7]
    ddfa:	2b01      	cmp	r3, #1
    ddfc:	d103      	bne.n	de06 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ddfe:	4a09      	ldr	r2, [pc, #36]	; (de24 <_usb_d_dev_register_ep_callback+0x54>)
    de00:	68fb      	ldr	r3, [r7, #12]
    de02:	60d3      	str	r3, [r2, #12]
}
    de04:	e005      	b.n	de12 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    de06:	79fb      	ldrb	r3, [r7, #7]
    de08:	2b02      	cmp	r3, #2
    de0a:	d102      	bne.n	de12 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    de0c:	4a05      	ldr	r2, [pc, #20]	; (de24 <_usb_d_dev_register_ep_callback+0x54>)
    de0e:	68fb      	ldr	r3, [r7, #12]
    de10:	6113      	str	r3, [r2, #16]
}
    de12:	bf00      	nop
    de14:	3714      	adds	r7, #20
    de16:	46bd      	mov	sp, r7
    de18:	f85d 7b04 	ldr.w	r7, [sp], #4
    de1c:	4770      	bx	lr
    de1e:	bf00      	nop
    de20:	0000bc69 	.word	0x0000bc69
    de24:	20003334 	.word	0x20003334

0000de28 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    de28:	b580      	push	{r7, lr}
    de2a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de2c:	4b01      	ldr	r3, [pc, #4]	; (de34 <USB_0_Handler+0xc>)
    de2e:	4798      	blx	r3
}
    de30:	bf00      	nop
    de32:	bd80      	pop	{r7, pc}
    de34:	0000d099 	.word	0x0000d099

0000de38 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    de38:	b580      	push	{r7, lr}
    de3a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de3c:	4b01      	ldr	r3, [pc, #4]	; (de44 <USB_1_Handler+0xc>)
    de3e:	4798      	blx	r3
}
    de40:	bf00      	nop
    de42:	bd80      	pop	{r7, pc}
    de44:	0000d099 	.word	0x0000d099

0000de48 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    de48:	b580      	push	{r7, lr}
    de4a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de4c:	4b01      	ldr	r3, [pc, #4]	; (de54 <USB_2_Handler+0xc>)
    de4e:	4798      	blx	r3
}
    de50:	bf00      	nop
    de52:	bd80      	pop	{r7, pc}
    de54:	0000d099 	.word	0x0000d099

0000de58 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    de58:	b580      	push	{r7, lr}
    de5a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    de5c:	4b01      	ldr	r3, [pc, #4]	; (de64 <USB_3_Handler+0xc>)
    de5e:	4798      	blx	r3
}
    de60:	bf00      	nop
    de62:	bd80      	pop	{r7, pc}
    de64:	0000d099 	.word	0x0000d099

0000de68 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    de68:	b480      	push	{r7}
    de6a:	b083      	sub	sp, #12
    de6c:	af00      	add	r7, sp, #0
    de6e:	6078      	str	r0, [r7, #4]
    de70:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    de72:	bf00      	nop
    de74:	687b      	ldr	r3, [r7, #4]
    de76:	689a      	ldr	r2, [r3, #8]
    de78:	683b      	ldr	r3, [r7, #0]
    de7a:	4013      	ands	r3, r2
    de7c:	2b00      	cmp	r3, #0
    de7e:	d1f9      	bne.n	de74 <hri_wdt_wait_for_sync+0xc>
	};
}
    de80:	bf00      	nop
    de82:	370c      	adds	r7, #12
    de84:	46bd      	mov	sp, r7
    de86:	f85d 7b04 	ldr.w	r7, [sp], #4
    de8a:	4770      	bx	lr

0000de8c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    de8c:	b580      	push	{r7, lr}
    de8e:	b084      	sub	sp, #16
    de90:	af00      	add	r7, sp, #0
    de92:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    de94:	210e      	movs	r1, #14
    de96:	6878      	ldr	r0, [r7, #4]
    de98:	4b0a      	ldr	r3, [pc, #40]	; (dec4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    de9a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    de9c:	687b      	ldr	r3, [r7, #4]
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    dea2:	7bfb      	ldrb	r3, [r7, #15]
    dea4:	085b      	lsrs	r3, r3, #1
    dea6:	b2db      	uxtb	r3, r3
    dea8:	f003 0301 	and.w	r3, r3, #1
    deac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    deae:	7bfb      	ldrb	r3, [r7, #15]
    deb0:	2b00      	cmp	r3, #0
    deb2:	bf14      	ite	ne
    deb4:	2301      	movne	r3, #1
    deb6:	2300      	moveq	r3, #0
    deb8:	b2db      	uxtb	r3, r3
}
    deba:	4618      	mov	r0, r3
    debc:	3710      	adds	r7, #16
    debe:	46bd      	mov	sp, r7
    dec0:	bd80      	pop	{r7, pc}
    dec2:	bf00      	nop
    dec4:	0000de69 	.word	0x0000de69

0000dec8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    dec8:	b580      	push	{r7, lr}
    deca:	b082      	sub	sp, #8
    decc:	af00      	add	r7, sp, #0
    dece:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	781b      	ldrb	r3, [r3, #0]
    ded4:	b2db      	uxtb	r3, r3
    ded6:	f023 0304 	bic.w	r3, r3, #4
    deda:	b2da      	uxtb	r2, r3
    dedc:	687b      	ldr	r3, [r7, #4]
    dede:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    dee0:	210e      	movs	r1, #14
    dee2:	6878      	ldr	r0, [r7, #4]
    dee4:	4b02      	ldr	r3, [pc, #8]	; (def0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    dee6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    dee8:	bf00      	nop
    deea:	3708      	adds	r7, #8
    deec:	46bd      	mov	sp, r7
    deee:	bd80      	pop	{r7, pc}
    def0:	0000de69 	.word	0x0000de69

0000def4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    def4:	b580      	push	{r7, lr}
    def6:	b084      	sub	sp, #16
    def8:	af00      	add	r7, sp, #0
    defa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    defc:	210e      	movs	r1, #14
    defe:	6878      	ldr	r0, [r7, #4]
    df00:	4b08      	ldr	r3, [pc, #32]	; (df24 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    df02:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    df0a:	7bfb      	ldrb	r3, [r7, #15]
    df0c:	09db      	lsrs	r3, r3, #7
    df0e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    df10:	7bfb      	ldrb	r3, [r7, #15]
    df12:	2b00      	cmp	r3, #0
    df14:	bf14      	ite	ne
    df16:	2301      	movne	r3, #1
    df18:	2300      	moveq	r3, #0
    df1a:	b2db      	uxtb	r3, r3
}
    df1c:	4618      	mov	r0, r3
    df1e:	3710      	adds	r7, #16
    df20:	46bd      	mov	sp, r7
    df22:	bd80      	pop	{r7, pc}
    df24:	0000de69 	.word	0x0000de69

0000df28 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    df28:	b480      	push	{r7}
    df2a:	b085      	sub	sp, #20
    df2c:	af00      	add	r7, sp, #0
    df2e:	6078      	str	r0, [r7, #4]
    df30:	460b      	mov	r3, r1
    df32:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	785b      	ldrb	r3, [r3, #1]
    df38:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    df3a:	7bfb      	ldrb	r3, [r7, #15]
    df3c:	f023 030f 	bic.w	r3, r3, #15
    df40:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    df42:	78fb      	ldrb	r3, [r7, #3]
    df44:	f003 030f 	and.w	r3, r3, #15
    df48:	b2da      	uxtb	r2, r3
    df4a:	7bfb      	ldrb	r3, [r7, #15]
    df4c:	4313      	orrs	r3, r2
    df4e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    df50:	687b      	ldr	r3, [r7, #4]
    df52:	7bfa      	ldrb	r2, [r7, #15]
    df54:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    df56:	bf00      	nop
    df58:	3714      	adds	r7, #20
    df5a:	46bd      	mov	sp, r7
    df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    df60:	4770      	bx	lr
	...

0000df64 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    df64:	b580      	push	{r7, lr}
    df66:	b082      	sub	sp, #8
    df68:	af00      	add	r7, sp, #0
    df6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    df6c:	687b      	ldr	r3, [r7, #4]
    df6e:	2b00      	cmp	r3, #0
    df70:	d005      	beq.n	df7e <_wdt_init+0x1a>
    df72:	687b      	ldr	r3, [r7, #4]
    df74:	681b      	ldr	r3, [r3, #0]
    df76:	2b00      	cmp	r3, #0
    df78:	d001      	beq.n	df7e <_wdt_init+0x1a>
    df7a:	2301      	movs	r3, #1
    df7c:	e000      	b.n	df80 <_wdt_init+0x1c>
    df7e:	2300      	movs	r3, #0
    df80:	f003 0301 	and.w	r3, r3, #1
    df84:	b2db      	uxtb	r3, r3
    df86:	2250      	movs	r2, #80	; 0x50
    df88:	4913      	ldr	r1, [pc, #76]	; (dfd8 <_wdt_init+0x74>)
    df8a:	4618      	mov	r0, r3
    df8c:	4b13      	ldr	r3, [pc, #76]	; (dfdc <_wdt_init+0x78>)
    df8e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    df90:	687b      	ldr	r3, [r7, #4]
    df92:	681b      	ldr	r3, [r3, #0]
    df94:	4618      	mov	r0, r3
    df96:	4b12      	ldr	r3, [pc, #72]	; (dfe0 <_wdt_init+0x7c>)
    df98:	4798      	blx	r3
    df9a:	4603      	mov	r3, r0
    df9c:	2b00      	cmp	r3, #0
    df9e:	d107      	bne.n	dfb0 <_wdt_init+0x4c>
    dfa0:	687b      	ldr	r3, [r7, #4]
    dfa2:	681b      	ldr	r3, [r3, #0]
    dfa4:	4618      	mov	r0, r3
    dfa6:	4b0f      	ldr	r3, [pc, #60]	; (dfe4 <_wdt_init+0x80>)
    dfa8:	4798      	blx	r3
    dfaa:	4603      	mov	r3, r0
    dfac:	2b00      	cmp	r3, #0
    dfae:	d002      	beq.n	dfb6 <_wdt_init+0x52>
		return ERR_DENIED;
    dfb0:	f06f 0310 	mvn.w	r3, #16
    dfb4:	e00b      	b.n	dfce <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    dfb6:	687b      	ldr	r3, [r7, #4]
    dfb8:	681b      	ldr	r3, [r3, #0]
    dfba:	4618      	mov	r0, r3
    dfbc:	4b0a      	ldr	r3, [pc, #40]	; (dfe8 <_wdt_init+0x84>)
    dfbe:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    dfc0:	687b      	ldr	r3, [r7, #4]
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	210b      	movs	r1, #11
    dfc6:	4618      	mov	r0, r3
    dfc8:	4b08      	ldr	r3, [pc, #32]	; (dfec <_wdt_init+0x88>)
    dfca:	4798      	blx	r3
	}

	return ERR_NONE;
    dfcc:	2300      	movs	r3, #0
}
    dfce:	4618      	mov	r0, r3
    dfd0:	3708      	adds	r7, #8
    dfd2:	46bd      	mov	sp, r7
    dfd4:	bd80      	pop	{r7, pc}
    dfd6:	bf00      	nop
    dfd8:	000173e8 	.word	0x000173e8
    dfdc:	00006251 	.word	0x00006251
    dfe0:	0000def5 	.word	0x0000def5
    dfe4:	0000de8d 	.word	0x0000de8d
    dfe8:	0000dec9 	.word	0x0000dec9
    dfec:	0000df29 	.word	0x0000df29

0000dff0 <hri_port_set_DIR_reg>:
{
    dff0:	b480      	push	{r7}
    dff2:	b085      	sub	sp, #20
    dff4:	af00      	add	r7, sp, #0
    dff6:	60f8      	str	r0, [r7, #12]
    dff8:	460b      	mov	r3, r1
    dffa:	607a      	str	r2, [r7, #4]
    dffc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    dffe:	7afb      	ldrb	r3, [r7, #11]
    e000:	68fa      	ldr	r2, [r7, #12]
    e002:	01db      	lsls	r3, r3, #7
    e004:	4413      	add	r3, r2
    e006:	3308      	adds	r3, #8
    e008:	687a      	ldr	r2, [r7, #4]
    e00a:	601a      	str	r2, [r3, #0]
}
    e00c:	bf00      	nop
    e00e:	3714      	adds	r7, #20
    e010:	46bd      	mov	sp, r7
    e012:	f85d 7b04 	ldr.w	r7, [sp], #4
    e016:	4770      	bx	lr

0000e018 <hri_port_clear_DIR_reg>:
{
    e018:	b480      	push	{r7}
    e01a:	b085      	sub	sp, #20
    e01c:	af00      	add	r7, sp, #0
    e01e:	60f8      	str	r0, [r7, #12]
    e020:	460b      	mov	r3, r1
    e022:	607a      	str	r2, [r7, #4]
    e024:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    e026:	7afb      	ldrb	r3, [r7, #11]
    e028:	68fa      	ldr	r2, [r7, #12]
    e02a:	01db      	lsls	r3, r3, #7
    e02c:	4413      	add	r3, r2
    e02e:	3304      	adds	r3, #4
    e030:	687a      	ldr	r2, [r7, #4]
    e032:	601a      	str	r2, [r3, #0]
}
    e034:	bf00      	nop
    e036:	3714      	adds	r7, #20
    e038:	46bd      	mov	sp, r7
    e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e03e:	4770      	bx	lr

0000e040 <hri_port_set_OUT_reg>:
{
    e040:	b480      	push	{r7}
    e042:	b085      	sub	sp, #20
    e044:	af00      	add	r7, sp, #0
    e046:	60f8      	str	r0, [r7, #12]
    e048:	460b      	mov	r3, r1
    e04a:	607a      	str	r2, [r7, #4]
    e04c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e04e:	7afb      	ldrb	r3, [r7, #11]
    e050:	68fa      	ldr	r2, [r7, #12]
    e052:	01db      	lsls	r3, r3, #7
    e054:	4413      	add	r3, r2
    e056:	3318      	adds	r3, #24
    e058:	687a      	ldr	r2, [r7, #4]
    e05a:	601a      	str	r2, [r3, #0]
}
    e05c:	bf00      	nop
    e05e:	3714      	adds	r7, #20
    e060:	46bd      	mov	sp, r7
    e062:	f85d 7b04 	ldr.w	r7, [sp], #4
    e066:	4770      	bx	lr

0000e068 <hri_port_clear_OUT_reg>:
{
    e068:	b480      	push	{r7}
    e06a:	b085      	sub	sp, #20
    e06c:	af00      	add	r7, sp, #0
    e06e:	60f8      	str	r0, [r7, #12]
    e070:	460b      	mov	r3, r1
    e072:	607a      	str	r2, [r7, #4]
    e074:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e076:	7afb      	ldrb	r3, [r7, #11]
    e078:	68fa      	ldr	r2, [r7, #12]
    e07a:	01db      	lsls	r3, r3, #7
    e07c:	4413      	add	r3, r2
    e07e:	3314      	adds	r3, #20
    e080:	687a      	ldr	r2, [r7, #4]
    e082:	601a      	str	r2, [r3, #0]
}
    e084:	bf00      	nop
    e086:	3714      	adds	r7, #20
    e088:	46bd      	mov	sp, r7
    e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e08e:	4770      	bx	lr

0000e090 <hri_port_write_PMUX_PMUXE_bf>:
{
    e090:	b480      	push	{r7}
    e092:	b085      	sub	sp, #20
    e094:	af00      	add	r7, sp, #0
    e096:	6078      	str	r0, [r7, #4]
    e098:	4608      	mov	r0, r1
    e09a:	4611      	mov	r1, r2
    e09c:	461a      	mov	r2, r3
    e09e:	4603      	mov	r3, r0
    e0a0:	70fb      	strb	r3, [r7, #3]
    e0a2:	460b      	mov	r3, r1
    e0a4:	70bb      	strb	r3, [r7, #2]
    e0a6:	4613      	mov	r3, r2
    e0a8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e0aa:	78fa      	ldrb	r2, [r7, #3]
    e0ac:	78bb      	ldrb	r3, [r7, #2]
    e0ae:	6879      	ldr	r1, [r7, #4]
    e0b0:	01d2      	lsls	r2, r2, #7
    e0b2:	440a      	add	r2, r1
    e0b4:	4413      	add	r3, r2
    e0b6:	3330      	adds	r3, #48	; 0x30
    e0b8:	781b      	ldrb	r3, [r3, #0]
    e0ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    e0bc:	7bfb      	ldrb	r3, [r7, #15]
    e0be:	f023 030f 	bic.w	r3, r3, #15
    e0c2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    e0c4:	787b      	ldrb	r3, [r7, #1]
    e0c6:	f003 030f 	and.w	r3, r3, #15
    e0ca:	b2da      	uxtb	r2, r3
    e0cc:	7bfb      	ldrb	r3, [r7, #15]
    e0ce:	4313      	orrs	r3, r2
    e0d0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e0d2:	78fa      	ldrb	r2, [r7, #3]
    e0d4:	78bb      	ldrb	r3, [r7, #2]
    e0d6:	6879      	ldr	r1, [r7, #4]
    e0d8:	01d2      	lsls	r2, r2, #7
    e0da:	440a      	add	r2, r1
    e0dc:	4413      	add	r3, r2
    e0de:	3330      	adds	r3, #48	; 0x30
    e0e0:	7bfa      	ldrb	r2, [r7, #15]
    e0e2:	701a      	strb	r2, [r3, #0]
}
    e0e4:	bf00      	nop
    e0e6:	3714      	adds	r7, #20
    e0e8:	46bd      	mov	sp, r7
    e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0ee:	4770      	bx	lr

0000e0f0 <hri_port_write_PMUX_PMUXO_bf>:
{
    e0f0:	b480      	push	{r7}
    e0f2:	b085      	sub	sp, #20
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	6078      	str	r0, [r7, #4]
    e0f8:	4608      	mov	r0, r1
    e0fa:	4611      	mov	r1, r2
    e0fc:	461a      	mov	r2, r3
    e0fe:	4603      	mov	r3, r0
    e100:	70fb      	strb	r3, [r7, #3]
    e102:	460b      	mov	r3, r1
    e104:	70bb      	strb	r3, [r7, #2]
    e106:	4613      	mov	r3, r2
    e108:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e10a:	78fa      	ldrb	r2, [r7, #3]
    e10c:	78bb      	ldrb	r3, [r7, #2]
    e10e:	6879      	ldr	r1, [r7, #4]
    e110:	01d2      	lsls	r2, r2, #7
    e112:	440a      	add	r2, r1
    e114:	4413      	add	r3, r2
    e116:	3330      	adds	r3, #48	; 0x30
    e118:	781b      	ldrb	r3, [r3, #0]
    e11a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    e11c:	7bfb      	ldrb	r3, [r7, #15]
    e11e:	f003 030f 	and.w	r3, r3, #15
    e122:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    e124:	787b      	ldrb	r3, [r7, #1]
    e126:	011b      	lsls	r3, r3, #4
    e128:	b2da      	uxtb	r2, r3
    e12a:	7bfb      	ldrb	r3, [r7, #15]
    e12c:	4313      	orrs	r3, r2
    e12e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e130:	78fa      	ldrb	r2, [r7, #3]
    e132:	78bb      	ldrb	r3, [r7, #2]
    e134:	6879      	ldr	r1, [r7, #4]
    e136:	01d2      	lsls	r2, r2, #7
    e138:	440a      	add	r2, r1
    e13a:	4413      	add	r3, r2
    e13c:	3330      	adds	r3, #48	; 0x30
    e13e:	7bfa      	ldrb	r2, [r7, #15]
    e140:	701a      	strb	r2, [r3, #0]
}
    e142:	bf00      	nop
    e144:	3714      	adds	r7, #20
    e146:	46bd      	mov	sp, r7
    e148:	f85d 7b04 	ldr.w	r7, [sp], #4
    e14c:	4770      	bx	lr

0000e14e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    e14e:	b480      	push	{r7}
    e150:	b085      	sub	sp, #20
    e152:	af00      	add	r7, sp, #0
    e154:	6078      	str	r0, [r7, #4]
    e156:	4608      	mov	r0, r1
    e158:	4611      	mov	r1, r2
    e15a:	461a      	mov	r2, r3
    e15c:	4603      	mov	r3, r0
    e15e:	70fb      	strb	r3, [r7, #3]
    e160:	460b      	mov	r3, r1
    e162:	70bb      	strb	r3, [r7, #2]
    e164:	4613      	mov	r3, r2
    e166:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    e168:	78fa      	ldrb	r2, [r7, #3]
    e16a:	78bb      	ldrb	r3, [r7, #2]
    e16c:	6879      	ldr	r1, [r7, #4]
    e16e:	01d2      	lsls	r2, r2, #7
    e170:	440a      	add	r2, r1
    e172:	4413      	add	r3, r2
    e174:	3340      	adds	r3, #64	; 0x40
    e176:	781b      	ldrb	r3, [r3, #0]
    e178:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    e17a:	7bfb      	ldrb	r3, [r7, #15]
    e17c:	f023 0301 	bic.w	r3, r3, #1
    e180:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    e182:	787a      	ldrb	r2, [r7, #1]
    e184:	7bfb      	ldrb	r3, [r7, #15]
    e186:	4313      	orrs	r3, r2
    e188:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    e18a:	78fa      	ldrb	r2, [r7, #3]
    e18c:	78bb      	ldrb	r3, [r7, #2]
    e18e:	6879      	ldr	r1, [r7, #4]
    e190:	01d2      	lsls	r2, r2, #7
    e192:	440a      	add	r2, r1
    e194:	4413      	add	r3, r2
    e196:	3340      	adds	r3, #64	; 0x40
    e198:	7bfa      	ldrb	r2, [r7, #15]
    e19a:	701a      	strb	r2, [r3, #0]
}
    e19c:	bf00      	nop
    e19e:	3714      	adds	r7, #20
    e1a0:	46bd      	mov	sp, r7
    e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1a6:	4770      	bx	lr

0000e1a8 <hri_port_write_WRCONFIG_reg>:
{
    e1a8:	b480      	push	{r7}
    e1aa:	b085      	sub	sp, #20
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	60f8      	str	r0, [r7, #12]
    e1b0:	460b      	mov	r3, r1
    e1b2:	607a      	str	r2, [r7, #4]
    e1b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    e1b6:	7afb      	ldrb	r3, [r7, #11]
    e1b8:	68fa      	ldr	r2, [r7, #12]
    e1ba:	01db      	lsls	r3, r3, #7
    e1bc:	4413      	add	r3, r2
    e1be:	3328      	adds	r3, #40	; 0x28
    e1c0:	687a      	ldr	r2, [r7, #4]
    e1c2:	601a      	str	r2, [r3, #0]
}
    e1c4:	bf00      	nop
    e1c6:	3714      	adds	r7, #20
    e1c8:	46bd      	mov	sp, r7
    e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1ce:	4770      	bx	lr

0000e1d0 <_gpio_set_direction>:
{
    e1d0:	b580      	push	{r7, lr}
    e1d2:	b082      	sub	sp, #8
    e1d4:	af00      	add	r7, sp, #0
    e1d6:	4603      	mov	r3, r0
    e1d8:	6039      	str	r1, [r7, #0]
    e1da:	71fb      	strb	r3, [r7, #7]
    e1dc:	4613      	mov	r3, r2
    e1de:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    e1e0:	79bb      	ldrb	r3, [r7, #6]
    e1e2:	2b01      	cmp	r3, #1
    e1e4:	d01c      	beq.n	e220 <_gpio_set_direction+0x50>
    e1e6:	2b02      	cmp	r3, #2
    e1e8:	d037      	beq.n	e25a <_gpio_set_direction+0x8a>
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	d14e      	bne.n	e28c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e1ee:	79fb      	ldrb	r3, [r7, #7]
    e1f0:	683a      	ldr	r2, [r7, #0]
    e1f2:	4619      	mov	r1, r3
    e1f4:	482a      	ldr	r0, [pc, #168]	; (e2a0 <_gpio_set_direction+0xd0>)
    e1f6:	4b2b      	ldr	r3, [pc, #172]	; (e2a4 <_gpio_set_direction+0xd4>)
    e1f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e1fa:	683b      	ldr	r3, [r7, #0]
    e1fc:	b29b      	uxth	r3, r3
    e1fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e202:	79fb      	ldrb	r3, [r7, #7]
    e204:	4619      	mov	r1, r3
    e206:	4826      	ldr	r0, [pc, #152]	; (e2a0 <_gpio_set_direction+0xd0>)
    e208:	4b27      	ldr	r3, [pc, #156]	; (e2a8 <_gpio_set_direction+0xd8>)
    e20a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e20c:	683b      	ldr	r3, [r7, #0]
    e20e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e210:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e214:	79fb      	ldrb	r3, [r7, #7]
    e216:	4619      	mov	r1, r3
    e218:	4821      	ldr	r0, [pc, #132]	; (e2a0 <_gpio_set_direction+0xd0>)
    e21a:	4b23      	ldr	r3, [pc, #140]	; (e2a8 <_gpio_set_direction+0xd8>)
    e21c:	4798      	blx	r3
		break;
    e21e:	e03a      	b.n	e296 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e220:	79fb      	ldrb	r3, [r7, #7]
    e222:	683a      	ldr	r2, [r7, #0]
    e224:	4619      	mov	r1, r3
    e226:	481e      	ldr	r0, [pc, #120]	; (e2a0 <_gpio_set_direction+0xd0>)
    e228:	4b1e      	ldr	r3, [pc, #120]	; (e2a4 <_gpio_set_direction+0xd4>)
    e22a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    e22c:	683b      	ldr	r3, [r7, #0]
    e22e:	b29b      	uxth	r3, r3
    e230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e238:	79f9      	ldrb	r1, [r7, #7]
    e23a:	461a      	mov	r2, r3
    e23c:	4818      	ldr	r0, [pc, #96]	; (e2a0 <_gpio_set_direction+0xd0>)
    e23e:	4b1a      	ldr	r3, [pc, #104]	; (e2a8 <_gpio_set_direction+0xd8>)
    e240:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    e242:	683b      	ldr	r3, [r7, #0]
    e244:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    e246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    e24a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e24e:	79f9      	ldrb	r1, [r7, #7]
    e250:	461a      	mov	r2, r3
    e252:	4813      	ldr	r0, [pc, #76]	; (e2a0 <_gpio_set_direction+0xd0>)
    e254:	4b14      	ldr	r3, [pc, #80]	; (e2a8 <_gpio_set_direction+0xd8>)
    e256:	4798      	blx	r3
		break;
    e258:	e01d      	b.n	e296 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    e25a:	79fb      	ldrb	r3, [r7, #7]
    e25c:	683a      	ldr	r2, [r7, #0]
    e25e:	4619      	mov	r1, r3
    e260:	480f      	ldr	r0, [pc, #60]	; (e2a0 <_gpio_set_direction+0xd0>)
    e262:	4b12      	ldr	r3, [pc, #72]	; (e2ac <_gpio_set_direction+0xdc>)
    e264:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e266:	683b      	ldr	r3, [r7, #0]
    e268:	b29b      	uxth	r3, r3
    e26a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e26e:	79fb      	ldrb	r3, [r7, #7]
    e270:	4619      	mov	r1, r3
    e272:	480b      	ldr	r0, [pc, #44]	; (e2a0 <_gpio_set_direction+0xd0>)
    e274:	4b0c      	ldr	r3, [pc, #48]	; (e2a8 <_gpio_set_direction+0xd8>)
    e276:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e278:	683b      	ldr	r3, [r7, #0]
    e27a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e27c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e280:	79fb      	ldrb	r3, [r7, #7]
    e282:	4619      	mov	r1, r3
    e284:	4806      	ldr	r0, [pc, #24]	; (e2a0 <_gpio_set_direction+0xd0>)
    e286:	4b08      	ldr	r3, [pc, #32]	; (e2a8 <_gpio_set_direction+0xd8>)
    e288:	4798      	blx	r3
		break;
    e28a:	e004      	b.n	e296 <_gpio_set_direction+0xc6>
		ASSERT(false);
    e28c:	2246      	movs	r2, #70	; 0x46
    e28e:	4908      	ldr	r1, [pc, #32]	; (e2b0 <_gpio_set_direction+0xe0>)
    e290:	2000      	movs	r0, #0
    e292:	4b08      	ldr	r3, [pc, #32]	; (e2b4 <_gpio_set_direction+0xe4>)
    e294:	4798      	blx	r3
}
    e296:	bf00      	nop
    e298:	3708      	adds	r7, #8
    e29a:	46bd      	mov	sp, r7
    e29c:	bd80      	pop	{r7, pc}
    e29e:	bf00      	nop
    e2a0:	41008000 	.word	0x41008000
    e2a4:	0000e019 	.word	0x0000e019
    e2a8:	0000e1a9 	.word	0x0000e1a9
    e2ac:	0000dff1 	.word	0x0000dff1
    e2b0:	00017400 	.word	0x00017400
    e2b4:	00006251 	.word	0x00006251

0000e2b8 <_gpio_set_level>:
{
    e2b8:	b580      	push	{r7, lr}
    e2ba:	b082      	sub	sp, #8
    e2bc:	af00      	add	r7, sp, #0
    e2be:	4603      	mov	r3, r0
    e2c0:	6039      	str	r1, [r7, #0]
    e2c2:	71fb      	strb	r3, [r7, #7]
    e2c4:	4613      	mov	r3, r2
    e2c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e2c8:	79bb      	ldrb	r3, [r7, #6]
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d006      	beq.n	e2dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e2ce:	79fb      	ldrb	r3, [r7, #7]
    e2d0:	683a      	ldr	r2, [r7, #0]
    e2d2:	4619      	mov	r1, r3
    e2d4:	4806      	ldr	r0, [pc, #24]	; (e2f0 <_gpio_set_level+0x38>)
    e2d6:	4b07      	ldr	r3, [pc, #28]	; (e2f4 <_gpio_set_level+0x3c>)
    e2d8:	4798      	blx	r3
}
    e2da:	e005      	b.n	e2e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e2dc:	79fb      	ldrb	r3, [r7, #7]
    e2de:	683a      	ldr	r2, [r7, #0]
    e2e0:	4619      	mov	r1, r3
    e2e2:	4803      	ldr	r0, [pc, #12]	; (e2f0 <_gpio_set_level+0x38>)
    e2e4:	4b04      	ldr	r3, [pc, #16]	; (e2f8 <_gpio_set_level+0x40>)
    e2e6:	4798      	blx	r3
}
    e2e8:	bf00      	nop
    e2ea:	3708      	adds	r7, #8
    e2ec:	46bd      	mov	sp, r7
    e2ee:	bd80      	pop	{r7, pc}
    e2f0:	41008000 	.word	0x41008000
    e2f4:	0000e041 	.word	0x0000e041
    e2f8:	0000e069 	.word	0x0000e069

0000e2fc <_gpio_set_pin_function>:
{
    e2fc:	b590      	push	{r4, r7, lr}
    e2fe:	b085      	sub	sp, #20
    e300:	af00      	add	r7, sp, #0
    e302:	6078      	str	r0, [r7, #4]
    e304:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    e306:	687b      	ldr	r3, [r7, #4]
    e308:	095b      	lsrs	r3, r3, #5
    e30a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    e30c:	687b      	ldr	r3, [r7, #4]
    e30e:	b2db      	uxtb	r3, r3
    e310:	f003 031f 	and.w	r3, r3, #31
    e314:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    e316:	683b      	ldr	r3, [r7, #0]
    e318:	f1b3 3fff 	cmp.w	r3, #4294967295
    e31c:	d106      	bne.n	e32c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    e31e:	7bba      	ldrb	r2, [r7, #14]
    e320:	7bf9      	ldrb	r1, [r7, #15]
    e322:	2300      	movs	r3, #0
    e324:	4812      	ldr	r0, [pc, #72]	; (e370 <_gpio_set_pin_function+0x74>)
    e326:	4c13      	ldr	r4, [pc, #76]	; (e374 <_gpio_set_pin_function+0x78>)
    e328:	47a0      	blx	r4
}
    e32a:	e01d      	b.n	e368 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    e32c:	7bba      	ldrb	r2, [r7, #14]
    e32e:	7bf9      	ldrb	r1, [r7, #15]
    e330:	2301      	movs	r3, #1
    e332:	480f      	ldr	r0, [pc, #60]	; (e370 <_gpio_set_pin_function+0x74>)
    e334:	4c0f      	ldr	r4, [pc, #60]	; (e374 <_gpio_set_pin_function+0x78>)
    e336:	47a0      	blx	r4
		if (pin & 1) {
    e338:	7bbb      	ldrb	r3, [r7, #14]
    e33a:	f003 0301 	and.w	r3, r3, #1
    e33e:	2b00      	cmp	r3, #0
    e340:	d009      	beq.n	e356 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    e342:	7bbb      	ldrb	r3, [r7, #14]
    e344:	085b      	lsrs	r3, r3, #1
    e346:	b2da      	uxtb	r2, r3
    e348:	683b      	ldr	r3, [r7, #0]
    e34a:	b2db      	uxtb	r3, r3
    e34c:	7bf9      	ldrb	r1, [r7, #15]
    e34e:	4808      	ldr	r0, [pc, #32]	; (e370 <_gpio_set_pin_function+0x74>)
    e350:	4c09      	ldr	r4, [pc, #36]	; (e378 <_gpio_set_pin_function+0x7c>)
    e352:	47a0      	blx	r4
}
    e354:	e008      	b.n	e368 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    e356:	7bbb      	ldrb	r3, [r7, #14]
    e358:	085b      	lsrs	r3, r3, #1
    e35a:	b2da      	uxtb	r2, r3
    e35c:	683b      	ldr	r3, [r7, #0]
    e35e:	b2db      	uxtb	r3, r3
    e360:	7bf9      	ldrb	r1, [r7, #15]
    e362:	4803      	ldr	r0, [pc, #12]	; (e370 <_gpio_set_pin_function+0x74>)
    e364:	4c05      	ldr	r4, [pc, #20]	; (e37c <_gpio_set_pin_function+0x80>)
    e366:	47a0      	blx	r4
}
    e368:	bf00      	nop
    e36a:	3714      	adds	r7, #20
    e36c:	46bd      	mov	sp, r7
    e36e:	bd90      	pop	{r4, r7, pc}
    e370:	41008000 	.word	0x41008000
    e374:	0000e14f 	.word	0x0000e14f
    e378:	0000e0f1 	.word	0x0000e0f1
    e37c:	0000e091 	.word	0x0000e091

0000e380 <gpio_set_pin_function>:
{
    e380:	b580      	push	{r7, lr}
    e382:	b082      	sub	sp, #8
    e384:	af00      	add	r7, sp, #0
    e386:	6078      	str	r0, [r7, #4]
    e388:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    e38a:	6839      	ldr	r1, [r7, #0]
    e38c:	6878      	ldr	r0, [r7, #4]
    e38e:	4b03      	ldr	r3, [pc, #12]	; (e39c <gpio_set_pin_function+0x1c>)
    e390:	4798      	blx	r3
}
    e392:	bf00      	nop
    e394:	3708      	adds	r7, #8
    e396:	46bd      	mov	sp, r7
    e398:	bd80      	pop	{r7, pc}
    e39a:	bf00      	nop
    e39c:	0000e2fd 	.word	0x0000e2fd

0000e3a0 <gpio_set_pin_direction>:
{
    e3a0:	b580      	push	{r7, lr}
    e3a2:	b082      	sub	sp, #8
    e3a4:	af00      	add	r7, sp, #0
    e3a6:	4603      	mov	r3, r0
    e3a8:	460a      	mov	r2, r1
    e3aa:	71fb      	strb	r3, [r7, #7]
    e3ac:	4613      	mov	r3, r2
    e3ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    e3b0:	79fb      	ldrb	r3, [r7, #7]
    e3b2:	095b      	lsrs	r3, r3, #5
    e3b4:	b2d8      	uxtb	r0, r3
    e3b6:	79fb      	ldrb	r3, [r7, #7]
    e3b8:	f003 031f 	and.w	r3, r3, #31
    e3bc:	2201      	movs	r2, #1
    e3be:	fa02 f303 	lsl.w	r3, r2, r3
    e3c2:	79ba      	ldrb	r2, [r7, #6]
    e3c4:	4619      	mov	r1, r3
    e3c6:	4b03      	ldr	r3, [pc, #12]	; (e3d4 <gpio_set_pin_direction+0x34>)
    e3c8:	4798      	blx	r3
}
    e3ca:	bf00      	nop
    e3cc:	3708      	adds	r7, #8
    e3ce:	46bd      	mov	sp, r7
    e3d0:	bd80      	pop	{r7, pc}
    e3d2:	bf00      	nop
    e3d4:	0000e1d1 	.word	0x0000e1d1

0000e3d8 <gpio_set_pin_level>:
{
    e3d8:	b580      	push	{r7, lr}
    e3da:	b082      	sub	sp, #8
    e3dc:	af00      	add	r7, sp, #0
    e3de:	4603      	mov	r3, r0
    e3e0:	460a      	mov	r2, r1
    e3e2:	71fb      	strb	r3, [r7, #7]
    e3e4:	4613      	mov	r3, r2
    e3e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e3e8:	79fb      	ldrb	r3, [r7, #7]
    e3ea:	095b      	lsrs	r3, r3, #5
    e3ec:	b2d8      	uxtb	r0, r3
    e3ee:	79fb      	ldrb	r3, [r7, #7]
    e3f0:	f003 031f 	and.w	r3, r3, #31
    e3f4:	2201      	movs	r2, #1
    e3f6:	fa02 f303 	lsl.w	r3, r2, r3
    e3fa:	79ba      	ldrb	r2, [r7, #6]
    e3fc:	4619      	mov	r1, r3
    e3fe:	4b03      	ldr	r3, [pc, #12]	; (e40c <gpio_set_pin_level+0x34>)
    e400:	4798      	blx	r3
}
    e402:	bf00      	nop
    e404:	3708      	adds	r7, #8
    e406:	46bd      	mov	sp, r7
    e408:	bd80      	pop	{r7, pc}
    e40a:	bf00      	nop
    e40c:	0000e2b9 	.word	0x0000e2b9

0000e410 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    e410:	b580      	push	{r7, lr}
    e412:	b082      	sub	sp, #8
    e414:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    e416:	2100      	movs	r1, #0
    e418:	2008      	movs	r0, #8
    e41a:	4b24      	ldr	r3, [pc, #144]	; (e4ac <QSPI_N25Q256_exit_xip+0x9c>)
    e41c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    e41e:	2100      	movs	r1, #0
    e420:	202b      	movs	r0, #43	; 0x2b
    e422:	4b22      	ldr	r3, [pc, #136]	; (e4ac <QSPI_N25Q256_exit_xip+0x9c>)
    e424:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    e426:	2100      	movs	r1, #0
    e428:	202a      	movs	r0, #42	; 0x2a
    e42a:	4b20      	ldr	r3, [pc, #128]	; (e4ac <QSPI_N25Q256_exit_xip+0x9c>)
    e42c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    e42e:	2102      	movs	r1, #2
    e430:	2008      	movs	r0, #8
    e432:	4b1f      	ldr	r3, [pc, #124]	; (e4b0 <QSPI_N25Q256_exit_xip+0xa0>)
    e434:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    e436:	2102      	movs	r1, #2
    e438:	202b      	movs	r0, #43	; 0x2b
    e43a:	4b1d      	ldr	r3, [pc, #116]	; (e4b0 <QSPI_N25Q256_exit_xip+0xa0>)
    e43c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    e43e:	2102      	movs	r1, #2
    e440:	202a      	movs	r0, #42	; 0x2a
    e442:	4b1b      	ldr	r3, [pc, #108]	; (e4b0 <QSPI_N25Q256_exit_xip+0xa0>)
    e444:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    e446:	2101      	movs	r1, #1
    e448:	2008      	movs	r0, #8
    e44a:	4b1a      	ldr	r3, [pc, #104]	; (e4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    e44c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    e44e:	2100      	movs	r1, #0
    e450:	202b      	movs	r0, #43	; 0x2b
    e452:	4b18      	ldr	r3, [pc, #96]	; (e4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    e454:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    e456:	2100      	movs	r1, #0
    e458:	202a      	movs	r0, #42	; 0x2a
    e45a:	4b16      	ldr	r3, [pc, #88]	; (e4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    e45c:	4798      	blx	r3

	delay_us(1);
    e45e:	2001      	movs	r0, #1
    e460:	4b15      	ldr	r3, [pc, #84]	; (e4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    e462:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    e464:	2300      	movs	r3, #0
    e466:	607b      	str	r3, [r7, #4]
    e468:	e010      	b.n	e48c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    e46a:	2101      	movs	r1, #1
    e46c:	202a      	movs	r0, #42	; 0x2a
    e46e:	4b11      	ldr	r3, [pc, #68]	; (e4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    e470:	4798      	blx	r3
		delay_us(1);
    e472:	2001      	movs	r0, #1
    e474:	4b10      	ldr	r3, [pc, #64]	; (e4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    e476:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    e478:	2100      	movs	r1, #0
    e47a:	202a      	movs	r0, #42	; 0x2a
    e47c:	4b0d      	ldr	r3, [pc, #52]	; (e4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    e47e:	4798      	blx	r3
		delay_us(1);
    e480:	2001      	movs	r0, #1
    e482:	4b0d      	ldr	r3, [pc, #52]	; (e4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    e484:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    e486:	687b      	ldr	r3, [r7, #4]
    e488:	3301      	adds	r3, #1
    e48a:	607b      	str	r3, [r7, #4]
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	2b06      	cmp	r3, #6
    e490:	ddeb      	ble.n	e46a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    e492:	2101      	movs	r1, #1
    e494:	202b      	movs	r0, #43	; 0x2b
    e496:	4b07      	ldr	r3, [pc, #28]	; (e4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    e498:	4798      	blx	r3
	delay_us(1);
    e49a:	2001      	movs	r0, #1
    e49c:	4b06      	ldr	r3, [pc, #24]	; (e4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    e49e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    e4a0:	4b06      	ldr	r3, [pc, #24]	; (e4bc <QSPI_N25Q256_exit_xip+0xac>)
    e4a2:	4798      	blx	r3
}
    e4a4:	bf00      	nop
    e4a6:	3708      	adds	r7, #8
    e4a8:	46bd      	mov	sp, r7
    e4aa:	bd80      	pop	{r7, pc}
    e4ac:	0000e381 	.word	0x0000e381
    e4b0:	0000e3a1 	.word	0x0000e3a1
    e4b4:	0000e3d9 	.word	0x0000e3d9
    e4b8:	00004749 	.word	0x00004749
    e4bc:	000035f9 	.word	0x000035f9

0000e4c0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    e4c0:	b598      	push	{r3, r4, r7, lr}
    e4c2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    e4c4:	4806      	ldr	r0, [pc, #24]	; (e4e0 <spi_nor_flash_init+0x20>)
    e4c6:	4b07      	ldr	r3, [pc, #28]	; (e4e4 <spi_nor_flash_init+0x24>)
    e4c8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    e4ca:	2300      	movs	r3, #0
    e4cc:	4a06      	ldr	r2, [pc, #24]	; (e4e8 <spi_nor_flash_init+0x28>)
    e4ce:	4904      	ldr	r1, [pc, #16]	; (e4e0 <spi_nor_flash_init+0x20>)
    e4d0:	4806      	ldr	r0, [pc, #24]	; (e4ec <spi_nor_flash_init+0x2c>)
    e4d2:	4c07      	ldr	r4, [pc, #28]	; (e4f0 <spi_nor_flash_init+0x30>)
    e4d4:	47a0      	blx	r4
    e4d6:	4602      	mov	r2, r0
    e4d8:	4b06      	ldr	r3, [pc, #24]	; (e4f4 <spi_nor_flash_init+0x34>)
    e4da:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    e4dc:	bf00      	nop
    e4de:	bd98      	pop	{r3, r4, r7, pc}
    e4e0:	20004f14 	.word	0x20004f14
    e4e4:	00004e19 	.word	0x00004e19
    e4e8:	0000e411 	.word	0x0000e411
    e4ec:	2000349c 	.word	0x2000349c
    e4f0:	0000e92d 	.word	0x0000e92d
    e4f4:	20005120 	.word	0x20005120

0000e4f8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    e4f8:	b580      	push	{r7, lr}
    e4fa:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    e4fc:	4805      	ldr	r0, [pc, #20]	; (e514 <cdc_device_acm_init+0x1c>)
    e4fe:	4b06      	ldr	r3, [pc, #24]	; (e518 <cdc_device_acm_init+0x20>)
    e500:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    e502:	4b06      	ldr	r3, [pc, #24]	; (e51c <cdc_device_acm_init+0x24>)
    e504:	4798      	blx	r3

	usbdc_start(single_desc);
    e506:	4806      	ldr	r0, [pc, #24]	; (e520 <cdc_device_acm_init+0x28>)
    e508:	4b06      	ldr	r3, [pc, #24]	; (e524 <cdc_device_acm_init+0x2c>)
    e50a:	4798      	blx	r3
	usbdc_attach();
    e50c:	4b06      	ldr	r3, [pc, #24]	; (e528 <cdc_device_acm_init+0x30>)
    e50e:	4798      	blx	r3
}
    e510:	bf00      	nop
    e512:	bd80      	pop	{r7, pc}
    e514:	200034ec 	.word	0x200034ec
    e518:	00010055 	.word	0x00010055
    e51c:	0000f2cd 	.word	0x0000f2cd
    e520:	20000190 	.word	0x20000190
    e524:	000100f1 	.word	0x000100f1
    e528:	00010141 	.word	0x00010141

0000e52c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    e52c:	b580      	push	{r7, lr}
    e52e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    e530:	4b01      	ldr	r3, [pc, #4]	; (e538 <usb_init+0xc>)
    e532:	4798      	blx	r3
}
    e534:	bf00      	nop
    e536:	bd80      	pop	{r7, pc}
    e538:	0000e4f9 	.word	0x0000e4f9

0000e53c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    e53c:	b480      	push	{r7}
    e53e:	b085      	sub	sp, #20
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e544:	f3ef 8310 	mrs	r3, PRIMASK
    e548:	60fb      	str	r3, [r7, #12]
  return(result);
    e54a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    e54c:	687b      	ldr	r3, [r7, #4]
    e54e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    e550:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e552:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    e556:	bf00      	nop
    e558:	3714      	adds	r7, #20
    e55a:	46bd      	mov	sp, r7
    e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e560:	4770      	bx	lr

0000e562 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    e562:	b480      	push	{r7}
    e564:	b085      	sub	sp, #20
    e566:	af00      	add	r7, sp, #0
    e568:	6078      	str	r0, [r7, #4]
    e56a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	681b      	ldr	r3, [r3, #0]
    e572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e574:	68fb      	ldr	r3, [r7, #12]
    e576:	f383 8810 	msr	PRIMASK, r3
}
    e57a:	bf00      	nop
    e57c:	3714      	adds	r7, #20
    e57e:	46bd      	mov	sp, r7
    e580:	f85d 7b04 	ldr.w	r7, [sp], #4
    e584:	4770      	bx	lr
	...

0000e588 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    e588:	b580      	push	{r7, lr}
    e58a:	b08c      	sub	sp, #48	; 0x30
    e58c:	af00      	add	r7, sp, #0
    e58e:	6078      	str	r0, [r7, #4]
    e590:	460b      	mov	r3, r1
    e592:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e594:	687b      	ldr	r3, [r7, #4]
    e596:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e598:	687b      	ldr	r3, [r7, #4]
    e59a:	681b      	ldr	r3, [r3, #0]
    e59c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    e59e:	f107 030c 	add.w	r3, r7, #12
    e5a2:	2200      	movs	r2, #0
    e5a4:	601a      	str	r2, [r3, #0]
    e5a6:	605a      	str	r2, [r3, #4]
    e5a8:	609a      	str	r2, [r3, #8]
    e5aa:	60da      	str	r2, [r3, #12]
    e5ac:	611a      	str	r2, [r3, #16]
    e5ae:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5b2:	7b1b      	ldrb	r3, [r3, #12]
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d001      	beq.n	e5bc <n25q256a_xip_confirm+0x34>
    e5b8:	2206      	movs	r2, #6
    e5ba:	e000      	b.n	e5be <n25q256a_xip_confirm+0x36>
    e5bc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e5be:	7b3b      	ldrb	r3, [r7, #12]
    e5c0:	f362 0302 	bfi	r3, r2, #0, #3
    e5c4:	733b      	strb	r3, [r7, #12]
    e5c6:	7b3b      	ldrb	r3, [r7, #12]
    e5c8:	f043 0310 	orr.w	r3, r3, #16
    e5cc:	733b      	strb	r3, [r7, #12]
    e5ce:	7b3b      	ldrb	r3, [r7, #12]
    e5d0:	f043 0320 	orr.w	r3, r3, #32
    e5d4:	733b      	strb	r3, [r7, #12]
    e5d6:	7b3b      	ldrb	r3, [r7, #12]
    e5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e5dc:	733b      	strb	r3, [r7, #12]
    e5de:	7b3b      	ldrb	r3, [r7, #12]
    e5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e5e4:	733b      	strb	r3, [r7, #12]
    e5e6:	7b7b      	ldrb	r3, [r7, #13]
    e5e8:	f043 0303 	orr.w	r3, r3, #3
    e5ec:	737b      	strb	r3, [r7, #13]
    e5ee:	7b7b      	ldrb	r3, [r7, #13]
    e5f0:	2201      	movs	r2, #1
    e5f2:	f362 1305 	bfi	r3, r2, #4, #2
    e5f6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5fa:	7b1b      	ldrb	r3, [r3, #12]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	d001      	beq.n	e604 <n25q256a_xip_confirm+0x7c>
    e600:	2208      	movs	r2, #8
    e602:	e000      	b.n	e606 <n25q256a_xip_confirm+0x7e>
    e604:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e606:	7bbb      	ldrb	r3, [r7, #14]
    e608:	f362 0304 	bfi	r3, r2, #0, #5
    e60c:	73bb      	strb	r3, [r7, #14]
    e60e:	230b      	movs	r3, #11
    e610:	743b      	strb	r3, [r7, #16]
    e612:	78fb      	ldrb	r3, [r7, #3]
    e614:	2b00      	cmp	r3, #0
    e616:	d001      	beq.n	e61c <n25q256a_xip_confirm+0x94>
    e618:	2300      	movs	r3, #0
    e61a:	e000      	b.n	e61e <n25q256a_xip_confirm+0x96>
    e61c:	23ff      	movs	r3, #255	; 0xff
    e61e:	747b      	strb	r3, [r7, #17]
    e620:	2301      	movs	r3, #1
    e622:	61bb      	str	r3, [r7, #24]
    e624:	f107 0327 	add.w	r3, r7, #39	; 0x27
    e628:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    e62a:	f107 030c 	add.w	r3, r7, #12
    e62e:	4619      	mov	r1, r3
    e630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e632:	4b07      	ldr	r3, [pc, #28]	; (e650 <n25q256a_xip_confirm+0xc8>)
    e634:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    e636:	78fb      	ldrb	r3, [r7, #3]
    e638:	2b00      	cmp	r3, #0
    e63a:	d001      	beq.n	e640 <n25q256a_xip_confirm+0xb8>
    e63c:	2202      	movs	r2, #2
    e63e:	e000      	b.n	e642 <n25q256a_xip_confirm+0xba>
    e640:	2201      	movs	r2, #1
    e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e644:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    e646:	2300      	movs	r3, #0
}
    e648:	4618      	mov	r0, r3
    e64a:	3730      	adds	r7, #48	; 0x30
    e64c:	46bd      	mov	sp, r7
    e64e:	bd80      	pop	{r7, pc}
    e650:	00004e91 	.word	0x00004e91

0000e654 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    e654:	b580      	push	{r7, lr}
    e656:	b08c      	sub	sp, #48	; 0x30
    e658:	af00      	add	r7, sp, #0
    e65a:	6078      	str	r0, [r7, #4]
    e65c:	460b      	mov	r3, r1
    e65e:	70fb      	strb	r3, [r7, #3]
    e660:	4613      	mov	r3, r2
    e662:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    e664:	2300      	movs	r3, #0
    e666:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	681b      	ldr	r3, [r3, #0]
    e670:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    e672:	f107 030c 	add.w	r3, r7, #12
    e676:	2200      	movs	r2, #0
    e678:	601a      	str	r2, [r3, #0]
    e67a:	605a      	str	r2, [r3, #4]
    e67c:	609a      	str	r2, [r3, #8]
    e67e:	60da      	str	r2, [r3, #12]
    e680:	611a      	str	r2, [r3, #16]
    e682:	615a      	str	r2, [r3, #20]
    e684:	78fb      	ldrb	r3, [r7, #3]
    e686:	f003 0307 	and.w	r3, r3, #7
    e68a:	b2da      	uxtb	r2, r3
    e68c:	7b3b      	ldrb	r3, [r7, #12]
    e68e:	f362 0302 	bfi	r3, r2, #0, #3
    e692:	733b      	strb	r3, [r7, #12]
    e694:	7b3b      	ldrb	r3, [r7, #12]
    e696:	f043 0310 	orr.w	r3, r3, #16
    e69a:	733b      	strb	r3, [r7, #12]
    e69c:	7b3b      	ldrb	r3, [r7, #12]
    e69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e6a2:	733b      	strb	r3, [r7, #12]
    e6a4:	78bb      	ldrb	r3, [r7, #2]
    e6a6:	743b      	strb	r3, [r7, #16]
    e6a8:	2301      	movs	r3, #1
    e6aa:	61bb      	str	r3, [r7, #24]
    e6ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
    e6b0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6b4:	7b5b      	ldrb	r3, [r3, #13]
    e6b6:	2b00      	cmp	r3, #0
    e6b8:	d003      	beq.n	e6c2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    e6ba:	2100      	movs	r1, #0
    e6bc:	6878      	ldr	r0, [r7, #4]
    e6be:	4b0a      	ldr	r3, [pc, #40]	; (e6e8 <n25q256a_read_reg+0x94>)
    e6c0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e6c2:	f107 030c 	add.w	r3, r7, #12
    e6c6:	4619      	mov	r1, r3
    e6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e6ca:	4b08      	ldr	r3, [pc, #32]	; (e6ec <n25q256a_read_reg+0x98>)
    e6cc:	4798      	blx	r3
	if (n25q->xip_mode) {
    e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6d0:	7b5b      	ldrb	r3, [r3, #13]
    e6d2:	2b00      	cmp	r3, #0
    e6d4:	d003      	beq.n	e6de <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    e6d6:	2101      	movs	r1, #1
    e6d8:	6878      	ldr	r0, [r7, #4]
    e6da:	4b03      	ldr	r3, [pc, #12]	; (e6e8 <n25q256a_read_reg+0x94>)
    e6dc:	4798      	blx	r3
	}
	return status;
    e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    e6e0:	4618      	mov	r0, r3
    e6e2:	3730      	adds	r7, #48	; 0x30
    e6e4:	46bd      	mov	sp, r7
    e6e6:	bd80      	pop	{r7, pc}
    e6e8:	0000e589 	.word	0x0000e589
    e6ec:	00004e91 	.word	0x00004e91

0000e6f0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    e6f0:	b580      	push	{r7, lr}
    e6f2:	b08c      	sub	sp, #48	; 0x30
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	60f8      	str	r0, [r7, #12]
    e6f8:	607b      	str	r3, [r7, #4]
    e6fa:	460b      	mov	r3, r1
    e6fc:	72fb      	strb	r3, [r7, #11]
    e6fe:	4613      	mov	r3, r2
    e700:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e702:	68fb      	ldr	r3, [r7, #12]
    e704:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e706:	68fb      	ldr	r3, [r7, #12]
    e708:	681b      	ldr	r3, [r3, #0]
    e70a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    e70c:	f107 0310 	add.w	r3, r7, #16
    e710:	2200      	movs	r2, #0
    e712:	601a      	str	r2, [r3, #0]
    e714:	605a      	str	r2, [r3, #4]
    e716:	609a      	str	r2, [r3, #8]
    e718:	60da      	str	r2, [r3, #12]
    e71a:	611a      	str	r2, [r3, #16]
    e71c:	615a      	str	r2, [r3, #20]
    e71e:	7afb      	ldrb	r3, [r7, #11]
    e720:	f003 0307 	and.w	r3, r3, #7
    e724:	b2da      	uxtb	r2, r3
    e726:	7c3b      	ldrb	r3, [r7, #16]
    e728:	f362 0302 	bfi	r3, r2, #0, #3
    e72c:	743b      	strb	r3, [r7, #16]
    e72e:	7c3b      	ldrb	r3, [r7, #16]
    e730:	f043 0310 	orr.w	r3, r3, #16
    e734:	743b      	strb	r3, [r7, #16]
    e736:	7c3b      	ldrb	r3, [r7, #16]
    e738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e73c:	743b      	strb	r3, [r7, #16]
    e73e:	7c7b      	ldrb	r3, [r7, #17]
    e740:	2202      	movs	r2, #2
    e742:	f362 1305 	bfi	r3, r2, #4, #2
    e746:	747b      	strb	r3, [r7, #17]
    e748:	7abb      	ldrb	r3, [r7, #10]
    e74a:	753b      	strb	r3, [r7, #20]
    e74c:	2301      	movs	r3, #1
    e74e:	61fb      	str	r3, [r7, #28]
    e750:	1d3b      	adds	r3, r7, #4
    e752:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e756:	7b5b      	ldrb	r3, [r3, #13]
    e758:	2b00      	cmp	r3, #0
    e75a:	d003      	beq.n	e764 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    e75c:	2100      	movs	r1, #0
    e75e:	68f8      	ldr	r0, [r7, #12]
    e760:	4b09      	ldr	r3, [pc, #36]	; (e788 <n25q256a_write_reg+0x98>)
    e762:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e764:	f107 0310 	add.w	r3, r7, #16
    e768:	4619      	mov	r1, r3
    e76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e76c:	4b07      	ldr	r3, [pc, #28]	; (e78c <n25q256a_write_reg+0x9c>)
    e76e:	4798      	blx	r3
	if (n25q->xip_mode) {
    e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e772:	7b5b      	ldrb	r3, [r3, #13]
    e774:	2b00      	cmp	r3, #0
    e776:	d003      	beq.n	e780 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    e778:	2101      	movs	r1, #1
    e77a:	68f8      	ldr	r0, [r7, #12]
    e77c:	4b02      	ldr	r3, [pc, #8]	; (e788 <n25q256a_write_reg+0x98>)
    e77e:	4798      	blx	r3
	}
}
    e780:	bf00      	nop
    e782:	3730      	adds	r7, #48	; 0x30
    e784:	46bd      	mov	sp, r7
    e786:	bd80      	pop	{r7, pc}
    e788:	0000e589 	.word	0x0000e589
    e78c:	00004e91 	.word	0x00004e91

0000e790 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    e790:	b580      	push	{r7, lr}
    e792:	b090      	sub	sp, #64	; 0x40
    e794:	af00      	add	r7, sp, #0
    e796:	6078      	str	r0, [r7, #4]
    e798:	460b      	mov	r3, r1
    e79a:	70fb      	strb	r3, [r7, #3]
    e79c:	4613      	mov	r3, r2
    e79e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e7a0:	687b      	ldr	r3, [r7, #4]
    e7a2:	681b      	ldr	r3, [r3, #0]
    e7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    e7a6:	78bb      	ldrb	r3, [r7, #2]
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	d001      	beq.n	e7b0 <n25q256a_write_enable+0x20>
    e7ac:	2306      	movs	r3, #6
    e7ae:	e000      	b.n	e7b2 <n25q256a_write_enable+0x22>
    e7b0:	2304      	movs	r3, #4
    e7b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    e7b6:	f107 0320 	add.w	r3, r7, #32
    e7ba:	2200      	movs	r2, #0
    e7bc:	601a      	str	r2, [r3, #0]
    e7be:	605a      	str	r2, [r3, #4]
    e7c0:	609a      	str	r2, [r3, #8]
    e7c2:	60da      	str	r2, [r3, #12]
    e7c4:	611a      	str	r2, [r3, #16]
    e7c6:	615a      	str	r2, [r3, #20]
    e7c8:	78fb      	ldrb	r3, [r7, #3]
    e7ca:	f003 0307 	and.w	r3, r3, #7
    e7ce:	b2da      	uxtb	r2, r3
    e7d0:	f897 3020 	ldrb.w	r3, [r7, #32]
    e7d4:	f362 0302 	bfi	r3, r2, #0, #3
    e7d8:	f887 3020 	strb.w	r3, [r7, #32]
    e7dc:	f897 3020 	ldrb.w	r3, [r7, #32]
    e7e0:	f043 0310 	orr.w	r3, r3, #16
    e7e4:	f887 3020 	strb.w	r3, [r7, #32]
    e7e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    e7ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    e7f0:	f107 0308 	add.w	r3, r7, #8
    e7f4:	2200      	movs	r2, #0
    e7f6:	601a      	str	r2, [r3, #0]
    e7f8:	605a      	str	r2, [r3, #4]
    e7fa:	609a      	str	r2, [r3, #8]
    e7fc:	60da      	str	r2, [r3, #12]
    e7fe:	611a      	str	r2, [r3, #16]
    e800:	615a      	str	r2, [r3, #20]
    e802:	78fb      	ldrb	r3, [r7, #3]
    e804:	f003 0307 	and.w	r3, r3, #7
    e808:	b2da      	uxtb	r2, r3
    e80a:	7a3b      	ldrb	r3, [r7, #8]
    e80c:	f362 0302 	bfi	r3, r2, #0, #3
    e810:	723b      	strb	r3, [r7, #8]
    e812:	7a3b      	ldrb	r3, [r7, #8]
    e814:	f043 0310 	orr.w	r3, r3, #16
    e818:	723b      	strb	r3, [r7, #8]
    e81a:	7a3b      	ldrb	r3, [r7, #8]
    e81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e820:	723b      	strb	r3, [r7, #8]
    e822:	2305      	movs	r3, #5
    e824:	733b      	strb	r3, [r7, #12]
    e826:	2301      	movs	r3, #1
    e828:	617b      	str	r3, [r7, #20]
    e82a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    e82e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    e830:	f107 0320 	add.w	r3, r7, #32
    e834:	4619      	mov	r1, r3
    e836:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e838:	4b08      	ldr	r3, [pc, #32]	; (e85c <n25q256a_write_enable+0xcc>)
    e83a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    e83c:	f107 0308 	add.w	r3, r7, #8
    e840:	4619      	mov	r1, r3
    e842:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e844:	4b05      	ldr	r3, [pc, #20]	; (e85c <n25q256a_write_enable+0xcc>)
    e846:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    e848:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    e84c:	f003 0302 	and.w	r3, r3, #2
    e850:	2b00      	cmp	r3, #0
    e852:	d0ed      	beq.n	e830 <n25q256a_write_enable+0xa0>
}
    e854:	bf00      	nop
    e856:	3740      	adds	r7, #64	; 0x40
    e858:	46bd      	mov	sp, r7
    e85a:	bd80      	pop	{r7, pc}
    e85c:	00004e91 	.word	0x00004e91

0000e860 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    e860:	b590      	push	{r4, r7, lr}
    e862:	b087      	sub	sp, #28
    e864:	af00      	add	r7, sp, #0
    e866:	6078      	str	r0, [r7, #4]
    e868:	460b      	mov	r3, r1
    e86a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    e86c:	687b      	ldr	r3, [r7, #4]
    e86e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e870:	68fb      	ldr	r3, [r7, #12]
    e872:	7b1b      	ldrb	r3, [r3, #12]
    e874:	2b00      	cmp	r3, #0
    e876:	d001      	beq.n	e87c <n25q256a_switch_mode+0x1c>
    e878:	2306      	movs	r3, #6
    e87a:	e000      	b.n	e87e <n25q256a_switch_mode+0x1e>
    e87c:	2300      	movs	r3, #0
    e87e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e880:	7afb      	ldrb	r3, [r7, #11]
    e882:	2265      	movs	r2, #101	; 0x65
    e884:	4619      	mov	r1, r3
    e886:	6878      	ldr	r0, [r7, #4]
    e888:	4b25      	ldr	r3, [pc, #148]	; (e920 <n25q256a_switch_mode+0xc0>)
    e88a:	4798      	blx	r3
    e88c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    e88e:	2300      	movs	r3, #0
    e890:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    e892:	68fb      	ldr	r3, [r7, #12]
    e894:	7b1b      	ldrb	r3, [r3, #12]
    e896:	78fa      	ldrb	r2, [r7, #3]
    e898:	429a      	cmp	r2, r3
    e89a:	d03d      	beq.n	e918 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    e89c:	78fb      	ldrb	r3, [r7, #3]
    e89e:	2b00      	cmp	r3, #0
    e8a0:	d00b      	beq.n	e8ba <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    e8a2:	697b      	ldr	r3, [r7, #20]
    e8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d011      	beq.n	e8d0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    e8ac:	697b      	ldr	r3, [r7, #20]
    e8ae:	f003 031f 	and.w	r3, r3, #31
    e8b2:	617b      	str	r3, [r7, #20]
			modify = 1;
    e8b4:	2301      	movs	r3, #1
    e8b6:	74fb      	strb	r3, [r7, #19]
    e8b8:	e00a      	b.n	e8d0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    e8ba:	697b      	ldr	r3, [r7, #20]
    e8bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d105      	bne.n	e8d0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    e8c4:	697b      	ldr	r3, [r7, #20]
    e8c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    e8ca:	617b      	str	r3, [r7, #20]
			modify = 1;
    e8cc:	2301      	movs	r3, #1
    e8ce:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    e8d0:	7cfb      	ldrb	r3, [r7, #19]
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d021      	beq.n	e91a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    e8d6:	68fb      	ldr	r3, [r7, #12]
    e8d8:	78fa      	ldrb	r2, [r7, #3]
    e8da:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    e8dc:	7afb      	ldrb	r3, [r7, #11]
    e8de:	2201      	movs	r2, #1
    e8e0:	4619      	mov	r1, r3
    e8e2:	6878      	ldr	r0, [r7, #4]
    e8e4:	4b0f      	ldr	r3, [pc, #60]	; (e924 <n25q256a_switch_mode+0xc4>)
    e8e6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    e8e8:	7af9      	ldrb	r1, [r7, #11]
    e8ea:	697b      	ldr	r3, [r7, #20]
    e8ec:	2261      	movs	r2, #97	; 0x61
    e8ee:	6878      	ldr	r0, [r7, #4]
    e8f0:	4c0d      	ldr	r4, [pc, #52]	; (e928 <n25q256a_switch_mode+0xc8>)
    e8f2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e8f4:	78fb      	ldrb	r3, [r7, #3]
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	d001      	beq.n	e8fe <n25q256a_switch_mode+0x9e>
    e8fa:	2306      	movs	r3, #6
    e8fc:	e000      	b.n	e900 <n25q256a_switch_mode+0xa0>
    e8fe:	2300      	movs	r3, #0
    e900:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e902:	7afb      	ldrb	r3, [r7, #11]
    e904:	2265      	movs	r2, #101	; 0x65
    e906:	4619      	mov	r1, r3
    e908:	6878      	ldr	r0, [r7, #4]
    e90a:	4b05      	ldr	r3, [pc, #20]	; (e920 <n25q256a_switch_mode+0xc0>)
    e90c:	4798      	blx	r3
    e90e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    e910:	68fb      	ldr	r3, [r7, #12]
    e912:	78fa      	ldrb	r2, [r7, #3]
    e914:	731a      	strb	r2, [r3, #12]
    e916:	e000      	b.n	e91a <n25q256a_switch_mode+0xba>
		return;
    e918:	bf00      	nop
	}
}
    e91a:	371c      	adds	r7, #28
    e91c:	46bd      	mov	sp, r7
    e91e:	bd90      	pop	{r4, r7, pc}
    e920:	0000e655 	.word	0x0000e655
    e924:	0000e791 	.word	0x0000e791
    e928:	0000e6f1 	.word	0x0000e6f1

0000e92c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    e92c:	b580      	push	{r7, lr}
    e92e:	b086      	sub	sp, #24
    e930:	af00      	add	r7, sp, #0
    e932:	60f8      	str	r0, [r7, #12]
    e934:	60b9      	str	r1, [r7, #8]
    e936:	607a      	str	r2, [r7, #4]
    e938:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    e93a:	68fb      	ldr	r3, [r7, #12]
    e93c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    e93e:	4a0c      	ldr	r2, [pc, #48]	; (e970 <n25q256a_construct+0x44>)
    e940:	68b9      	ldr	r1, [r7, #8]
    e942:	68f8      	ldr	r0, [r7, #12]
    e944:	4b0b      	ldr	r3, [pc, #44]	; (e974 <n25q256a_construct+0x48>)
    e946:	4798      	blx	r3
	n25q->quad_mode    = 0;
    e948:	697b      	ldr	r3, [r7, #20]
    e94a:	2200      	movs	r2, #0
    e94c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    e94e:	697b      	ldr	r3, [r7, #20]
    e950:	2200      	movs	r2, #0
    e952:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    e954:	697b      	ldr	r3, [r7, #20]
    e956:	687a      	ldr	r2, [r7, #4]
    e958:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    e95a:	78fb      	ldrb	r3, [r7, #3]
    e95c:	4619      	mov	r1, r3
    e95e:	68f8      	ldr	r0, [r7, #12]
    e960:	4b05      	ldr	r3, [pc, #20]	; (e978 <n25q256a_construct+0x4c>)
    e962:	4798      	blx	r3
	return me;
    e964:	68fb      	ldr	r3, [r7, #12]
}
    e966:	4618      	mov	r0, r3
    e968:	3718      	adds	r7, #24
    e96a:	46bd      	mov	sp, r7
    e96c:	bd80      	pop	{r7, pc}
    e96e:	bf00      	nop
    e970:	0001741c 	.word	0x0001741c
    e974:	0000ee09 	.word	0x0000ee09
    e978:	0000e861 	.word	0x0000e861

0000e97c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    e97c:	b580      	push	{r7, lr}
    e97e:	b08c      	sub	sp, #48	; 0x30
    e980:	af00      	add	r7, sp, #0
    e982:	60f8      	str	r0, [r7, #12]
    e984:	60b9      	str	r1, [r7, #8]
    e986:	607a      	str	r2, [r7, #4]
    e988:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e98a:	68fb      	ldr	r3, [r7, #12]
    e98c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e98e:	68fb      	ldr	r3, [r7, #12]
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    e994:	f107 0310 	add.w	r3, r7, #16
    e998:	2200      	movs	r2, #0
    e99a:	601a      	str	r2, [r3, #0]
    e99c:	605a      	str	r2, [r3, #4]
    e99e:	609a      	str	r2, [r3, #8]
    e9a0:	60da      	str	r2, [r3, #12]
    e9a2:	611a      	str	r2, [r3, #16]
    e9a4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e9a8:	7b1b      	ldrb	r3, [r3, #12]
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d001      	beq.n	e9b2 <n25q256a_read+0x36>
    e9ae:	2206      	movs	r2, #6
    e9b0:	e000      	b.n	e9b4 <n25q256a_read+0x38>
    e9b2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    e9b4:	7c3b      	ldrb	r3, [r7, #16]
    e9b6:	f362 0302 	bfi	r3, r2, #0, #3
    e9ba:	743b      	strb	r3, [r7, #16]
    e9bc:	7c3b      	ldrb	r3, [r7, #16]
    e9be:	f043 0310 	orr.w	r3, r3, #16
    e9c2:	743b      	strb	r3, [r7, #16]
    e9c4:	7c3b      	ldrb	r3, [r7, #16]
    e9c6:	f043 0320 	orr.w	r3, r3, #32
    e9ca:	743b      	strb	r3, [r7, #16]
    e9cc:	7c3b      	ldrb	r3, [r7, #16]
    e9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e9d2:	743b      	strb	r3, [r7, #16]
    e9d4:	7c7b      	ldrb	r3, [r7, #17]
    e9d6:	2201      	movs	r2, #1
    e9d8:	f362 1305 	bfi	r3, r2, #4, #2
    e9dc:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e9e0:	7b1b      	ldrb	r3, [r3, #12]
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	d001      	beq.n	e9ea <n25q256a_read+0x6e>
    e9e6:	220a      	movs	r2, #10
    e9e8:	e000      	b.n	e9ec <n25q256a_read+0x70>
    e9ea:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    e9ec:	7cbb      	ldrb	r3, [r7, #18]
    e9ee:	f362 0304 	bfi	r3, r2, #0, #5
    e9f2:	74bb      	strb	r3, [r7, #18]
    e9f4:	230b      	movs	r3, #11
    e9f6:	753b      	strb	r3, [r7, #20]
    e9f8:	687b      	ldr	r3, [r7, #4]
    e9fa:	61bb      	str	r3, [r7, #24]
    e9fc:	683b      	ldr	r3, [r7, #0]
    e9fe:	61fb      	str	r3, [r7, #28]
    ea00:	68bb      	ldr	r3, [r7, #8]
    ea02:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ea04:	f107 0310 	add.w	r3, r7, #16
    ea08:	4619      	mov	r1, r3
    ea0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea0c:	4b03      	ldr	r3, [pc, #12]	; (ea1c <n25q256a_read+0xa0>)
    ea0e:	4798      	blx	r3
	return ERR_NONE;
    ea10:	2300      	movs	r3, #0
}
    ea12:	4618      	mov	r0, r3
    ea14:	3730      	adds	r7, #48	; 0x30
    ea16:	46bd      	mov	sp, r7
    ea18:	bd80      	pop	{r7, pc}
    ea1a:	bf00      	nop
    ea1c:	00004e91 	.word	0x00004e91

0000ea20 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ea20:	b580      	push	{r7, lr}
    ea22:	b08c      	sub	sp, #48	; 0x30
    ea24:	af00      	add	r7, sp, #0
    ea26:	60f8      	str	r0, [r7, #12]
    ea28:	60b9      	str	r1, [r7, #8]
    ea2a:	607a      	str	r2, [r7, #4]
    ea2c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ea2e:	68fb      	ldr	r3, [r7, #12]
    ea30:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ea32:	68fb      	ldr	r3, [r7, #12]
    ea34:	681b      	ldr	r3, [r3, #0]
    ea36:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ea38:	f107 0310 	add.w	r3, r7, #16
    ea3c:	2200      	movs	r2, #0
    ea3e:	601a      	str	r2, [r3, #0]
    ea40:	605a      	str	r2, [r3, #4]
    ea42:	609a      	str	r2, [r3, #8]
    ea44:	60da      	str	r2, [r3, #12]
    ea46:	611a      	str	r2, [r3, #16]
    ea48:	615a      	str	r2, [r3, #20]
    ea4a:	7c3b      	ldrb	r3, [r7, #16]
    ea4c:	f043 0310 	orr.w	r3, r3, #16
    ea50:	743b      	strb	r3, [r7, #16]
    ea52:	7c3b      	ldrb	r3, [r7, #16]
    ea54:	f043 0320 	orr.w	r3, r3, #32
    ea58:	743b      	strb	r3, [r7, #16]
    ea5a:	7c3b      	ldrb	r3, [r7, #16]
    ea5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ea60:	743b      	strb	r3, [r7, #16]
    ea62:	7c7b      	ldrb	r3, [r7, #17]
    ea64:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ea68:	747b      	strb	r3, [r7, #17]
    ea6a:	2302      	movs	r3, #2
    ea6c:	753b      	strb	r3, [r7, #20]
    ea6e:	687b      	ldr	r3, [r7, #4]
    ea70:	61bb      	str	r3, [r7, #24]
    ea72:	683b      	ldr	r3, [r7, #0]
    ea74:	61fb      	str	r3, [r7, #28]
    ea76:	68bb      	ldr	r3, [r7, #8]
    ea78:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea7c:	7b1b      	ldrb	r3, [r3, #12]
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d001      	beq.n	ea86 <n25q256a_write+0x66>
    ea82:	2206      	movs	r2, #6
    ea84:	e000      	b.n	ea88 <n25q256a_write+0x68>
    ea86:	2200      	movs	r2, #0
    ea88:	7c3b      	ldrb	r3, [r7, #16]
    ea8a:	f362 0302 	bfi	r3, r2, #0, #3
    ea8e:	743b      	strb	r3, [r7, #16]
	while (length) {
    ea90:	e035      	b.n	eafe <n25q256a_write+0xde>
		cmd.address = address;
    ea92:	687b      	ldr	r3, [r7, #4]
    ea94:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ea96:	683b      	ldr	r3, [r7, #0]
    ea98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ea9c:	d802      	bhi.n	eaa4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ea9e:	683b      	ldr	r3, [r7, #0]
    eaa0:	61fb      	str	r3, [r7, #28]
    eaa2:	e002      	b.n	eaaa <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    eaa4:	f44f 7380 	mov.w	r3, #256	; 0x100
    eaa8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    eaaa:	7c3b      	ldrb	r3, [r7, #16]
    eaac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eab0:	b2db      	uxtb	r3, r3
    eab2:	2201      	movs	r2, #1
    eab4:	4619      	mov	r1, r3
    eab6:	68f8      	ldr	r0, [r7, #12]
    eab8:	4b19      	ldr	r3, [pc, #100]	; (eb20 <n25q256a_write+0x100>)
    eaba:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    eabc:	f107 0310 	add.w	r3, r7, #16
    eac0:	4619      	mov	r1, r3
    eac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    eac4:	4b17      	ldr	r3, [pc, #92]	; (eb24 <n25q256a_write+0x104>)
    eac6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    eac8:	bf00      	nop
    eaca:	7c3b      	ldrb	r3, [r7, #16]
    eacc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ead0:	b2db      	uxtb	r3, r3
    ead2:	2270      	movs	r2, #112	; 0x70
    ead4:	4619      	mov	r1, r3
    ead6:	68f8      	ldr	r0, [r7, #12]
    ead8:	4b13      	ldr	r3, [pc, #76]	; (eb28 <n25q256a_write+0x108>)
    eada:	4798      	blx	r3
    eadc:	4603      	mov	r3, r0
    eade:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eae2:	2b00      	cmp	r3, #0
    eae4:	d0f1      	beq.n	eaca <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    eae6:	6a3a      	ldr	r2, [r7, #32]
    eae8:	69fb      	ldr	r3, [r7, #28]
    eaea:	4413      	add	r3, r2
    eaec:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    eaee:	69fb      	ldr	r3, [r7, #28]
    eaf0:	683a      	ldr	r2, [r7, #0]
    eaf2:	1ad3      	subs	r3, r2, r3
    eaf4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    eaf6:	69fb      	ldr	r3, [r7, #28]
    eaf8:	687a      	ldr	r2, [r7, #4]
    eafa:	4413      	add	r3, r2
    eafc:	607b      	str	r3, [r7, #4]
	while (length) {
    eafe:	683b      	ldr	r3, [r7, #0]
    eb00:	2b00      	cmp	r3, #0
    eb02:	d1c6      	bne.n	ea92 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    eb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb06:	7b5b      	ldrb	r3, [r3, #13]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d003      	beq.n	eb14 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    eb0c:	2101      	movs	r1, #1
    eb0e:	68f8      	ldr	r0, [r7, #12]
    eb10:	4b06      	ldr	r3, [pc, #24]	; (eb2c <n25q256a_write+0x10c>)
    eb12:	4798      	blx	r3
	}
	return ERR_NONE;
    eb14:	2300      	movs	r3, #0
}
    eb16:	4618      	mov	r0, r3
    eb18:	3730      	adds	r7, #48	; 0x30
    eb1a:	46bd      	mov	sp, r7
    eb1c:	bd80      	pop	{r7, pc}
    eb1e:	bf00      	nop
    eb20:	0000e791 	.word	0x0000e791
    eb24:	00004e91 	.word	0x00004e91
    eb28:	0000e655 	.word	0x0000e655
    eb2c:	0000e589 	.word	0x0000e589

0000eb30 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    eb30:	b580      	push	{r7, lr}
    eb32:	b090      	sub	sp, #64	; 0x40
    eb34:	af00      	add	r7, sp, #0
    eb36:	60f8      	str	r0, [r7, #12]
    eb38:	60b9      	str	r1, [r7, #8]
    eb3a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    eb3c:	68fb      	ldr	r3, [r7, #12]
    eb3e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    eb40:	68fb      	ldr	r3, [r7, #12]
    eb42:	681b      	ldr	r3, [r3, #0]
    eb44:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    eb46:	f107 0314 	add.w	r3, r7, #20
    eb4a:	2200      	movs	r2, #0
    eb4c:	601a      	str	r2, [r3, #0]
    eb4e:	605a      	str	r2, [r3, #4]
    eb50:	609a      	str	r2, [r3, #8]
    eb52:	60da      	str	r2, [r3, #12]
    eb54:	611a      	str	r2, [r3, #16]
    eb56:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    eb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eb5a:	7b1b      	ldrb	r3, [r3, #12]
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d001      	beq.n	eb64 <n25q256a_erase+0x34>
    eb60:	2206      	movs	r2, #6
    eb62:	e000      	b.n	eb66 <n25q256a_erase+0x36>
    eb64:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    eb66:	7d3b      	ldrb	r3, [r7, #20]
    eb68:	f362 0302 	bfi	r3, r2, #0, #3
    eb6c:	753b      	strb	r3, [r7, #20]
    eb6e:	7d3b      	ldrb	r3, [r7, #20]
    eb70:	f043 0310 	orr.w	r3, r3, #16
    eb74:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    eb76:	687b      	ldr	r3, [r7, #4]
    eb78:	4a56      	ldr	r2, [pc, #344]	; (ecd4 <n25q256a_erase+0x1a4>)
    eb7a:	4293      	cmp	r3, r2
    eb7c:	bf94      	ite	ls
    eb7e:	2301      	movls	r3, #1
    eb80:	2300      	movhi	r3, #0
    eb82:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    eb84:	7d3b      	ldrb	r3, [r7, #20]
    eb86:	f362 1345 	bfi	r3, r2, #5, #1
    eb8a:	753b      	strb	r3, [r7, #20]
    eb8c:	7d7b      	ldrb	r3, [r7, #21]
    eb8e:	2202      	movs	r2, #2
    eb90:	f362 1305 	bfi	r3, r2, #4, #2
    eb94:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    eb96:	68bb      	ldr	r3, [r7, #8]
    eb98:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    eb9a:	687b      	ldr	r3, [r7, #4]
    eb9c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    eb9e:	2300      	movs	r3, #0
    eba0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    eba2:	687b      	ldr	r3, [r7, #4]
    eba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    eba8:	2b00      	cmp	r3, #0
    ebaa:	d104      	bne.n	ebb6 <n25q256a_erase+0x86>
    ebac:	68bb      	ldr	r3, [r7, #8]
    ebae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d002      	beq.n	ebbc <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ebb6:	f06f 030c 	mvn.w	r3, #12
    ebba:	e087      	b.n	eccc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ebbc:	687b      	ldr	r3, [r7, #4]
    ebbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ebc2:	d368      	bcc.n	ec96 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ebc4:	23c7      	movs	r3, #199	; 0xc7
    ebc6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ebc8:	7d3b      	ldrb	r3, [r7, #20]
    ebca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ebce:	b2db      	uxtb	r3, r3
    ebd0:	2201      	movs	r2, #1
    ebd2:	4619      	mov	r1, r3
    ebd4:	68f8      	ldr	r0, [r7, #12]
    ebd6:	4b40      	ldr	r3, [pc, #256]	; (ecd8 <n25q256a_erase+0x1a8>)
    ebd8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ebda:	f107 0314 	add.w	r3, r7, #20
    ebde:	4619      	mov	r1, r3
    ebe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ebe2:	4b3e      	ldr	r3, [pc, #248]	; (ecdc <n25q256a_erase+0x1ac>)
    ebe4:	4798      	blx	r3
    ebe6:	e059      	b.n	ec9c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ebe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ebea:	b29b      	uxth	r3, r3
    ebec:	2b00      	cmp	r3, #0
    ebee:	d11f      	bne.n	ec30 <n25q256a_erase+0x100>
    ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ebf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ebf6:	d31b      	bcc.n	ec30 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ebf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ebfa:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ebfc:	23d8      	movs	r3, #216	; 0xd8
    ebfe:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ec00:	7d3b      	ldrb	r3, [r7, #20]
    ec02:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec06:	b2db      	uxtb	r3, r3
    ec08:	2201      	movs	r2, #1
    ec0a:	4619      	mov	r1, r3
    ec0c:	68f8      	ldr	r0, [r7, #12]
    ec0e:	4b32      	ldr	r3, [pc, #200]	; (ecd8 <n25q256a_erase+0x1a8>)
    ec10:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ec12:	f107 0314 	add.w	r3, r7, #20
    ec16:	4619      	mov	r1, r3
    ec18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ec1a:	4b30      	ldr	r3, [pc, #192]	; (ecdc <n25q256a_erase+0x1ac>)
    ec1c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ec1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec20:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ec24:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec28:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ec2c:	63bb      	str	r3, [r7, #56]	; 0x38
    ec2e:	e023      	b.n	ec78 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ec30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ec36:	d31b      	bcc.n	ec70 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ec38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec3a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ec3c:	2320      	movs	r3, #32
    ec3e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ec40:	7d3b      	ldrb	r3, [r7, #20]
    ec42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec46:	b2db      	uxtb	r3, r3
    ec48:	2201      	movs	r2, #1
    ec4a:	4619      	mov	r1, r3
    ec4c:	68f8      	ldr	r0, [r7, #12]
    ec4e:	4b22      	ldr	r3, [pc, #136]	; (ecd8 <n25q256a_erase+0x1a8>)
    ec50:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ec52:	f107 0314 	add.w	r3, r7, #20
    ec56:	4619      	mov	r1, r3
    ec58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ec5a:	4b20      	ldr	r3, [pc, #128]	; (ecdc <n25q256a_erase+0x1ac>)
    ec5c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    ec5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ec64:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec68:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    ec6c:	63bb      	str	r3, [r7, #56]	; 0x38
    ec6e:	e003      	b.n	ec78 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    ec70:	f06f 030c 	mvn.w	r3, #12
    ec74:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    ec76:	e011      	b.n	ec9c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ec78:	bf00      	nop
    ec7a:	7d3b      	ldrb	r3, [r7, #20]
    ec7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ec80:	b2db      	uxtb	r3, r3
    ec82:	2270      	movs	r2, #112	; 0x70
    ec84:	4619      	mov	r1, r3
    ec86:	68f8      	ldr	r0, [r7, #12]
    ec88:	4b15      	ldr	r3, [pc, #84]	; (ece0 <n25q256a_erase+0x1b0>)
    ec8a:	4798      	blx	r3
    ec8c:	4603      	mov	r3, r0
    ec8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ec92:	2b00      	cmp	r3, #0
    ec94:	d0f1      	beq.n	ec7a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ec98:	2b00      	cmp	r3, #0
    ec9a:	d1a5      	bne.n	ebe8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ec9c:	bf00      	nop
    ec9e:	7d3b      	ldrb	r3, [r7, #20]
    eca0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eca4:	b2db      	uxtb	r3, r3
    eca6:	2270      	movs	r2, #112	; 0x70
    eca8:	4619      	mov	r1, r3
    ecaa:	68f8      	ldr	r0, [r7, #12]
    ecac:	4b0c      	ldr	r3, [pc, #48]	; (ece0 <n25q256a_erase+0x1b0>)
    ecae:	4798      	blx	r3
    ecb0:	4603      	mov	r3, r0
    ecb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	d0f1      	beq.n	ec9e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ecbc:	7b5b      	ldrb	r3, [r3, #13]
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d003      	beq.n	ecca <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    ecc2:	2101      	movs	r1, #1
    ecc4:	68f8      	ldr	r0, [r7, #12]
    ecc6:	4b07      	ldr	r3, [pc, #28]	; (ece4 <n25q256a_erase+0x1b4>)
    ecc8:	4798      	blx	r3
	}
	return rc;
    ecca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    eccc:	4618      	mov	r0, r3
    ecce:	3740      	adds	r7, #64	; 0x40
    ecd0:	46bd      	mov	sp, r7
    ecd2:	bd80      	pop	{r7, pc}
    ecd4:	001fffff 	.word	0x001fffff
    ecd8:	0000e791 	.word	0x0000e791
    ecdc:	00004e91 	.word	0x00004e91
    ece0:	0000e655 	.word	0x0000e655
    ece4:	0000e589 	.word	0x0000e589

0000ece8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    ece8:	b590      	push	{r4, r7, lr}
    ecea:	b085      	sub	sp, #20
    ecec:	af00      	add	r7, sp, #0
    ecee:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    ecf0:	687b      	ldr	r3, [r7, #4]
    ecf2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ecf4:	68fb      	ldr	r3, [r7, #12]
    ecf6:	7b1b      	ldrb	r3, [r3, #12]
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	d001      	beq.n	ed00 <n25q256a_enable_xip+0x18>
    ecfc:	2306      	movs	r3, #6
    ecfe:	e000      	b.n	ed02 <n25q256a_enable_xip+0x1a>
    ed00:	2300      	movs	r3, #0
    ed02:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ed04:	68fb      	ldr	r3, [r7, #12]
    ed06:	7b5b      	ldrb	r3, [r3, #13]
    ed08:	2b00      	cmp	r3, #0
    ed0a:	d129      	bne.n	ed60 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ed0c:	7afb      	ldrb	r3, [r7, #11]
    ed0e:	2285      	movs	r2, #133	; 0x85
    ed10:	4619      	mov	r1, r3
    ed12:	6878      	ldr	r0, [r7, #4]
    ed14:	4b15      	ldr	r3, [pc, #84]	; (ed6c <n25q256a_enable_xip+0x84>)
    ed16:	4798      	blx	r3
    ed18:	4603      	mov	r3, r0
    ed1a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    ed1c:	7abb      	ldrb	r3, [r7, #10]
    ed1e:	f003 0308 	and.w	r3, r3, #8
    ed22:	2b00      	cmp	r3, #0
    ed24:	d015      	beq.n	ed52 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    ed26:	7abb      	ldrb	r3, [r7, #10]
    ed28:	f023 0308 	bic.w	r3, r3, #8
    ed2c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    ed2e:	7abb      	ldrb	r3, [r7, #10]
    ed30:	7af9      	ldrb	r1, [r7, #11]
    ed32:	2281      	movs	r2, #129	; 0x81
    ed34:	6878      	ldr	r0, [r7, #4]
    ed36:	4c0e      	ldr	r4, [pc, #56]	; (ed70 <n25q256a_enable_xip+0x88>)
    ed38:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ed3a:	bf00      	nop
    ed3c:	7afb      	ldrb	r3, [r7, #11]
    ed3e:	2270      	movs	r2, #112	; 0x70
    ed40:	4619      	mov	r1, r3
    ed42:	6878      	ldr	r0, [r7, #4]
    ed44:	4b09      	ldr	r3, [pc, #36]	; (ed6c <n25q256a_enable_xip+0x84>)
    ed46:	4798      	blx	r3
    ed48:	4603      	mov	r3, r0
    ed4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ed4e:	2b00      	cmp	r3, #0
    ed50:	d0f4      	beq.n	ed3c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    ed52:	68fb      	ldr	r3, [r7, #12]
    ed54:	2201      	movs	r2, #1
    ed56:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    ed58:	2101      	movs	r1, #1
    ed5a:	6878      	ldr	r0, [r7, #4]
    ed5c:	4b05      	ldr	r3, [pc, #20]	; (ed74 <n25q256a_enable_xip+0x8c>)
    ed5e:	4798      	blx	r3
	}
	return ERR_NONE;
    ed60:	2300      	movs	r3, #0
}
    ed62:	4618      	mov	r0, r3
    ed64:	3714      	adds	r7, #20
    ed66:	46bd      	mov	sp, r7
    ed68:	bd90      	pop	{r4, r7, pc}
    ed6a:	bf00      	nop
    ed6c:	0000e655 	.word	0x0000e655
    ed70:	0000e6f1 	.word	0x0000e6f1
    ed74:	0000e589 	.word	0x0000e589

0000ed78 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    ed78:	b580      	push	{r7, lr}
    ed7a:	b086      	sub	sp, #24
    ed7c:	af00      	add	r7, sp, #0
    ed7e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ed84:	687b      	ldr	r3, [r7, #4]
    ed86:	681b      	ldr	r3, [r3, #0]
    ed88:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ed8a:	697b      	ldr	r3, [r7, #20]
    ed8c:	7b1b      	ldrb	r3, [r3, #12]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d001      	beq.n	ed96 <n25q256a_disable_xip+0x1e>
    ed92:	2306      	movs	r3, #6
    ed94:	e000      	b.n	ed98 <n25q256a_disable_xip+0x20>
    ed96:	2300      	movs	r3, #0
    ed98:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ed9a:	2100      	movs	r1, #0
    ed9c:	6878      	ldr	r0, [r7, #4]
    ed9e:	4b15      	ldr	r3, [pc, #84]	; (edf4 <n25q256a_disable_xip+0x7c>)
    eda0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    eda2:	7bfb      	ldrb	r3, [r7, #15]
    eda4:	2285      	movs	r2, #133	; 0x85
    eda6:	4619      	mov	r1, r3
    eda8:	6878      	ldr	r0, [r7, #4]
    edaa:	4b13      	ldr	r3, [pc, #76]	; (edf8 <n25q256a_disable_xip+0x80>)
    edac:	4798      	blx	r3
    edae:	4603      	mov	r3, r0
    edb0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    edb2:	7bbb      	ldrb	r3, [r7, #14]
    edb4:	f003 0308 	and.w	r3, r3, #8
    edb8:	2b00      	cmp	r3, #0
    edba:	d113      	bne.n	ede4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    edbc:	697b      	ldr	r3, [r7, #20]
    edbe:	689b      	ldr	r3, [r3, #8]
    edc0:	2b00      	cmp	r3, #0
    edc2:	d00f      	beq.n	ede4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    edc4:	693b      	ldr	r3, [r7, #16]
    edc6:	681b      	ldr	r3, [r3, #0]
    edc8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    edca:	6938      	ldr	r0, [r7, #16]
    edcc:	4b0b      	ldr	r3, [pc, #44]	; (edfc <n25q256a_disable_xip+0x84>)
    edce:	4798      	blx	r3
			n25q->pin_exit_xip();
    edd0:	697b      	ldr	r3, [r7, #20]
    edd2:	689b      	ldr	r3, [r3, #8]
    edd4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    edd6:	68b9      	ldr	r1, [r7, #8]
    edd8:	6938      	ldr	r0, [r7, #16]
    edda:	4b09      	ldr	r3, [pc, #36]	; (ee00 <n25q256a_disable_xip+0x88>)
    eddc:	4798      	blx	r3
			qspi_sync_enable(descr);
    edde:	6938      	ldr	r0, [r7, #16]
    ede0:	4b08      	ldr	r3, [pc, #32]	; (ee04 <n25q256a_disable_xip+0x8c>)
    ede2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    ede4:	697b      	ldr	r3, [r7, #20]
    ede6:	2200      	movs	r2, #0
    ede8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    edea:	2300      	movs	r3, #0
}
    edec:	4618      	mov	r0, r3
    edee:	3718      	adds	r7, #24
    edf0:	46bd      	mov	sp, r7
    edf2:	bd80      	pop	{r7, pc}
    edf4:	0000e589 	.word	0x0000e589
    edf8:	0000e655 	.word	0x0000e655
    edfc:	00004e55 	.word	0x00004e55
    ee00:	00004dcd 	.word	0x00004dcd
    ee04:	00004e19 	.word	0x00004e19

0000ee08 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ee08:	b480      	push	{r7}
    ee0a:	b085      	sub	sp, #20
    ee0c:	af00      	add	r7, sp, #0
    ee0e:	60f8      	str	r0, [r7, #12]
    ee10:	60b9      	str	r1, [r7, #8]
    ee12:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ee14:	68fb      	ldr	r3, [r7, #12]
    ee16:	68ba      	ldr	r2, [r7, #8]
    ee18:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ee1a:	68fb      	ldr	r3, [r7, #12]
    ee1c:	687a      	ldr	r2, [r7, #4]
    ee1e:	605a      	str	r2, [r3, #4]

	return me;
    ee20:	68fb      	ldr	r3, [r7, #12]
}
    ee22:	4618      	mov	r0, r3
    ee24:	3714      	adds	r7, #20
    ee26:	46bd      	mov	sp, r7
    ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee2c:	4770      	bx	lr

0000ee2e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ee2e:	b480      	push	{r7}
    ee30:	b083      	sub	sp, #12
    ee32:	af00      	add	r7, sp, #0
    ee34:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ee36:	687b      	ldr	r3, [r7, #4]
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	b29a      	uxth	r2, r3
    ee3c:	687b      	ldr	r3, [r7, #4]
    ee3e:	3301      	adds	r3, #1
    ee40:	781b      	ldrb	r3, [r3, #0]
    ee42:	b29b      	uxth	r3, r3
    ee44:	021b      	lsls	r3, r3, #8
    ee46:	b29b      	uxth	r3, r3
    ee48:	4413      	add	r3, r2
    ee4a:	b29b      	uxth	r3, r3
}
    ee4c:	4618      	mov	r0, r3
    ee4e:	370c      	adds	r7, #12
    ee50:	46bd      	mov	sp, r7
    ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee56:	4770      	bx	lr

0000ee58 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    ee58:	b480      	push	{r7}
    ee5a:	b083      	sub	sp, #12
    ee5c:	af00      	add	r7, sp, #0
    ee5e:	6078      	str	r0, [r7, #4]
	return desc[0];
    ee60:	687b      	ldr	r3, [r7, #4]
    ee62:	781b      	ldrb	r3, [r3, #0]
}
    ee64:	4618      	mov	r0, r3
    ee66:	370c      	adds	r7, #12
    ee68:	46bd      	mov	sp, r7
    ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee6e:	4770      	bx	lr

0000ee70 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    ee70:	b580      	push	{r7, lr}
    ee72:	b082      	sub	sp, #8
    ee74:	af00      	add	r7, sp, #0
    ee76:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ee78:	6878      	ldr	r0, [r7, #4]
    ee7a:	4b05      	ldr	r3, [pc, #20]	; (ee90 <usb_desc_next+0x20>)
    ee7c:	4798      	blx	r3
    ee7e:	4603      	mov	r3, r0
    ee80:	461a      	mov	r2, r3
    ee82:	687b      	ldr	r3, [r7, #4]
    ee84:	4413      	add	r3, r2
}
    ee86:	4618      	mov	r0, r3
    ee88:	3708      	adds	r7, #8
    ee8a:	46bd      	mov	sp, r7
    ee8c:	bd80      	pop	{r7, pc}
    ee8e:	bf00      	nop
    ee90:	0000ee59 	.word	0x0000ee59

0000ee94 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ee94:	b580      	push	{r7, lr}
    ee96:	b08c      	sub	sp, #48	; 0x30
    ee98:	af00      	add	r7, sp, #0
    ee9a:	6078      	str	r0, [r7, #4]
    ee9c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ee9e:	687b      	ldr	r3, [r7, #4]
    eea0:	689b      	ldr	r3, [r3, #8]
    eea2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    eea4:	683b      	ldr	r3, [r7, #0]
    eea6:	681b      	ldr	r3, [r3, #0]
    eea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    eeaa:	2300      	movs	r3, #0
    eeac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    eeb0:	e08f      	b.n	efd2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eeb4:	2b00      	cmp	r3, #0
    eeb6:	d102      	bne.n	eebe <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    eeb8:	f06f 0309 	mvn.w	r3, #9
    eebc:	e092      	b.n	efe4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eec0:	789b      	ldrb	r3, [r3, #2]
    eec2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eec6:	795b      	ldrb	r3, [r3, #5]
    eec8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    eeca:	7c7b      	ldrb	r3, [r7, #17]
    eecc:	2b02      	cmp	r3, #2
    eece:	d002      	beq.n	eed6 <cdcdf_acm_enable+0x42>
    eed0:	7c7b      	ldrb	r3, [r7, #17]
    eed2:	2b0a      	cmp	r3, #10
    eed4:	d121      	bne.n	ef1a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    eed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    eeda:	6a3a      	ldr	r2, [r7, #32]
    eedc:	5cd2      	ldrb	r2, [r2, r3]
    eede:	7bbb      	ldrb	r3, [r7, #14]
    eee0:	429a      	cmp	r2, r3
    eee2:	d102      	bne.n	eeea <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    eee4:	f06f 0311 	mvn.w	r3, #17
    eee8:	e07c      	b.n	efe4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    eeea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    eeee:	6a3a      	ldr	r2, [r7, #32]
    eef0:	5cd3      	ldrb	r3, [r2, r3]
    eef2:	2bff      	cmp	r3, #255	; 0xff
    eef4:	d002      	beq.n	eefc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    eef6:	f06f 031b 	mvn.w	r3, #27
    eefa:	e073      	b.n	efe4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    eefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef00:	7bb9      	ldrb	r1, [r7, #14]
    ef02:	6a3a      	ldr	r2, [r7, #32]
    ef04:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ef06:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    ef08:	683b      	ldr	r3, [r7, #0]
    ef0a:	685b      	ldr	r3, [r3, #4]
    ef0c:	2205      	movs	r2, #5
    ef0e:	4619      	mov	r1, r3
    ef10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ef12:	4b36      	ldr	r3, [pc, #216]	; (efec <cdcdf_acm_enable+0x158>)
    ef14:	4798      	blx	r3
    ef16:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    ef18:	e047      	b.n	efaa <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    ef1a:	f06f 0309 	mvn.w	r3, #9
    ef1e:	e061      	b.n	efe4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef22:	789b      	ldrb	r3, [r3, #2]
    ef24:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef28:	78db      	ldrb	r3, [r3, #3]
    ef2a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    ef2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef2e:	3304      	adds	r3, #4
    ef30:	4618      	mov	r0, r3
    ef32:	4b2f      	ldr	r3, [pc, #188]	; (eff0 <cdcdf_acm_enable+0x15c>)
    ef34:	4798      	blx	r3
    ef36:	4603      	mov	r3, r0
    ef38:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ef3a:	7ebb      	ldrb	r3, [r7, #26]
    ef3c:	7ef9      	ldrb	r1, [r7, #27]
    ef3e:	8bba      	ldrh	r2, [r7, #28]
    ef40:	4618      	mov	r0, r3
    ef42:	4b2c      	ldr	r3, [pc, #176]	; (eff4 <cdcdf_acm_enable+0x160>)
    ef44:	4798      	blx	r3
    ef46:	4603      	mov	r3, r0
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d002      	beq.n	ef52 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    ef4c:	f06f 0313 	mvn.w	r3, #19
    ef50:	e048      	b.n	efe4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ef52:	7ebb      	ldrb	r3, [r7, #26]
    ef54:	b25b      	sxtb	r3, r3
    ef56:	2b00      	cmp	r3, #0
    ef58:	da0f      	bge.n	ef7a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    ef5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef5e:	7eb9      	ldrb	r1, [r7, #26]
    ef60:	6a3a      	ldr	r2, [r7, #32]
    ef62:	4413      	add	r3, r2
    ef64:	460a      	mov	r2, r1
    ef66:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    ef68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ef6c:	6a3a      	ldr	r2, [r7, #32]
    ef6e:	4413      	add	r3, r2
    ef70:	789b      	ldrb	r3, [r3, #2]
    ef72:	4618      	mov	r0, r3
    ef74:	4b20      	ldr	r3, [pc, #128]	; (eff8 <cdcdf_acm_enable+0x164>)
    ef76:	4798      	blx	r3
    ef78:	e007      	b.n	ef8a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ef7a:	7eba      	ldrb	r2, [r7, #26]
    ef7c:	6a3b      	ldr	r3, [r7, #32]
    ef7e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ef80:	6a3b      	ldr	r3, [r7, #32]
    ef82:	791b      	ldrb	r3, [r3, #4]
    ef84:	4618      	mov	r0, r3
    ef86:	4b1c      	ldr	r3, [pc, #112]	; (eff8 <cdcdf_acm_enable+0x164>)
    ef88:	4798      	blx	r3
			}
			desc->sod = ep;
    ef8a:	683b      	ldr	r3, [r7, #0]
    ef8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ef8e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ef90:	683b      	ldr	r3, [r7, #0]
    ef92:	681b      	ldr	r3, [r3, #0]
    ef94:	4618      	mov	r0, r3
    ef96:	4b19      	ldr	r3, [pc, #100]	; (effc <cdcdf_acm_enable+0x168>)
    ef98:	4798      	blx	r3
    ef9a:	4602      	mov	r2, r0
    ef9c:	683b      	ldr	r3, [r7, #0]
    ef9e:	685b      	ldr	r3, [r3, #4]
    efa0:	4619      	mov	r1, r3
    efa2:	4610      	mov	r0, r2
    efa4:	4b16      	ldr	r3, [pc, #88]	; (f000 <cdcdf_acm_enable+0x16c>)
    efa6:	4798      	blx	r3
    efa8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    efac:	2b00      	cmp	r3, #0
    efae:	d1b7      	bne.n	ef20 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    efb0:	683b      	ldr	r3, [r7, #0]
    efb2:	681b      	ldr	r3, [r3, #0]
    efb4:	4618      	mov	r0, r3
    efb6:	4b11      	ldr	r3, [pc, #68]	; (effc <cdcdf_acm_enable+0x168>)
    efb8:	4798      	blx	r3
    efba:	683b      	ldr	r3, [r7, #0]
    efbc:	685b      	ldr	r3, [r3, #4]
    efbe:	2204      	movs	r2, #4
    efc0:	4619      	mov	r1, r3
    efc2:	4b0a      	ldr	r3, [pc, #40]	; (efec <cdcdf_acm_enable+0x158>)
    efc4:	4798      	blx	r3
    efc6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    efc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    efcc:	3301      	adds	r3, #1
    efce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    efd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    efd6:	2b01      	cmp	r3, #1
    efd8:	f67f af6b 	bls.w	eeb2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    efdc:	4b09      	ldr	r3, [pc, #36]	; (f004 <cdcdf_acm_enable+0x170>)
    efde:	2201      	movs	r2, #1
    efe0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    efe2:	2300      	movs	r3, #0
}
    efe4:	4618      	mov	r0, r3
    efe6:	3730      	adds	r7, #48	; 0x30
    efe8:	46bd      	mov	sp, r7
    efea:	bd80      	pop	{r7, pc}
    efec:	00010255 	.word	0x00010255
    eff0:	0000ee2f 	.word	0x0000ee2f
    eff4:	00005de5 	.word	0x00005de5
    eff8:	00005ed1 	.word	0x00005ed1
    effc:	0000ee71 	.word	0x0000ee71
    f000:	000102b1 	.word	0x000102b1
    f004:	20003538 	.word	0x20003538

0000f008 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f008:	b580      	push	{r7, lr}
    f00a:	b088      	sub	sp, #32
    f00c:	af00      	add	r7, sp, #0
    f00e:	6078      	str	r0, [r7, #4]
    f010:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f012:	687b      	ldr	r3, [r7, #4]
    f014:	689b      	ldr	r3, [r3, #8]
    f016:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    f018:	683b      	ldr	r3, [r7, #0]
    f01a:	2b00      	cmp	r3, #0
    f01c:	d00c      	beq.n	f038 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    f01e:	683b      	ldr	r3, [r7, #0]
    f020:	681b      	ldr	r3, [r3, #0]
    f022:	795b      	ldrb	r3, [r3, #5]
    f024:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    f026:	7c7b      	ldrb	r3, [r7, #17]
    f028:	2b02      	cmp	r3, #2
    f02a:	d005      	beq.n	f038 <cdcdf_acm_disable+0x30>
    f02c:	7c7b      	ldrb	r3, [r7, #17]
    f02e:	2b0a      	cmp	r3, #10
    f030:	d002      	beq.n	f038 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    f032:	f06f 0309 	mvn.w	r3, #9
    f036:	e035      	b.n	f0a4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    f038:	2300      	movs	r3, #0
    f03a:	77fb      	strb	r3, [r7, #31]
    f03c:	e01f      	b.n	f07e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    f03e:	7ffb      	ldrb	r3, [r7, #31]
    f040:	69ba      	ldr	r2, [r7, #24]
    f042:	5cd3      	ldrb	r3, [r2, r3]
    f044:	2bff      	cmp	r3, #255	; 0xff
    f046:	d016      	beq.n	f076 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    f048:	7ffb      	ldrb	r3, [r7, #31]
    f04a:	69ba      	ldr	r2, [r7, #24]
    f04c:	21ff      	movs	r1, #255	; 0xff
    f04e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    f050:	7ffb      	ldrb	r3, [r7, #31]
    f052:	69ba      	ldr	r2, [r7, #24]
    f054:	4413      	add	r3, r2
    f056:	789b      	ldrb	r3, [r3, #2]
    f058:	2bff      	cmp	r3, #255	; 0xff
    f05a:	d00d      	beq.n	f078 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    f05c:	7ffb      	ldrb	r3, [r7, #31]
    f05e:	69ba      	ldr	r2, [r7, #24]
    f060:	4413      	add	r3, r2
    f062:	789b      	ldrb	r3, [r3, #2]
    f064:	4618      	mov	r0, r3
    f066:	4b11      	ldr	r3, [pc, #68]	; (f0ac <cdcdf_acm_disable+0xa4>)
    f068:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    f06a:	7ffb      	ldrb	r3, [r7, #31]
    f06c:	69ba      	ldr	r2, [r7, #24]
    f06e:	4413      	add	r3, r2
    f070:	22ff      	movs	r2, #255	; 0xff
    f072:	709a      	strb	r2, [r3, #2]
    f074:	e000      	b.n	f078 <cdcdf_acm_disable+0x70>
			continue;
    f076:	bf00      	nop
	for (i = 0; i < 2; i++) {
    f078:	7ffb      	ldrb	r3, [r7, #31]
    f07a:	3301      	adds	r3, #1
    f07c:	77fb      	strb	r3, [r7, #31]
    f07e:	7ffb      	ldrb	r3, [r7, #31]
    f080:	2b01      	cmp	r3, #1
    f082:	d9dc      	bls.n	f03e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    f084:	69bb      	ldr	r3, [r7, #24]
    f086:	791b      	ldrb	r3, [r3, #4]
    f088:	2bff      	cmp	r3, #255	; 0xff
    f08a:	d007      	beq.n	f09c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    f08c:	69bb      	ldr	r3, [r7, #24]
    f08e:	791b      	ldrb	r3, [r3, #4]
    f090:	4618      	mov	r0, r3
    f092:	4b06      	ldr	r3, [pc, #24]	; (f0ac <cdcdf_acm_disable+0xa4>)
    f094:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    f096:	69bb      	ldr	r3, [r7, #24]
    f098:	22ff      	movs	r2, #255	; 0xff
    f09a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    f09c:	4b04      	ldr	r3, [pc, #16]	; (f0b0 <cdcdf_acm_disable+0xa8>)
    f09e:	2200      	movs	r2, #0
    f0a0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f0a2:	2300      	movs	r3, #0
}
    f0a4:	4618      	mov	r0, r3
    f0a6:	3720      	adds	r7, #32
    f0a8:	46bd      	mov	sp, r7
    f0aa:	bd80      	pop	{r7, pc}
    f0ac:	00005e81 	.word	0x00005e81
    f0b0:	20003538 	.word	0x20003538

0000f0b4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    f0b4:	b580      	push	{r7, lr}
    f0b6:	b084      	sub	sp, #16
    f0b8:	af00      	add	r7, sp, #0
    f0ba:	60f8      	str	r0, [r7, #12]
    f0bc:	460b      	mov	r3, r1
    f0be:	607a      	str	r2, [r7, #4]
    f0c0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    f0c2:	7afb      	ldrb	r3, [r7, #11]
    f0c4:	2b01      	cmp	r3, #1
    f0c6:	d009      	beq.n	f0dc <cdcdf_acm_ctrl+0x28>
    f0c8:	2b02      	cmp	r3, #2
    f0ca:	d00d      	beq.n	f0e8 <cdcdf_acm_ctrl+0x34>
    f0cc:	2b00      	cmp	r3, #0
    f0ce:	d10e      	bne.n	f0ee <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    f0d0:	6879      	ldr	r1, [r7, #4]
    f0d2:	68f8      	ldr	r0, [r7, #12]
    f0d4:	4b09      	ldr	r3, [pc, #36]	; (f0fc <cdcdf_acm_ctrl+0x48>)
    f0d6:	4798      	blx	r3
    f0d8:	4603      	mov	r3, r0
    f0da:	e00a      	b.n	f0f2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    f0dc:	6879      	ldr	r1, [r7, #4]
    f0de:	68f8      	ldr	r0, [r7, #12]
    f0e0:	4b07      	ldr	r3, [pc, #28]	; (f100 <cdcdf_acm_ctrl+0x4c>)
    f0e2:	4798      	blx	r3
    f0e4:	4603      	mov	r3, r0
    f0e6:	e004      	b.n	f0f2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    f0e8:	f06f 031a 	mvn.w	r3, #26
    f0ec:	e001      	b.n	f0f2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    f0ee:	f06f 030c 	mvn.w	r3, #12
	}
}
    f0f2:	4618      	mov	r0, r3
    f0f4:	3710      	adds	r7, #16
    f0f6:	46bd      	mov	sp, r7
    f0f8:	bd80      	pop	{r7, pc}
    f0fa:	bf00      	nop
    f0fc:	0000ee95 	.word	0x0000ee95
    f100:	0000f009 	.word	0x0000f009

0000f104 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f104:	b590      	push	{r4, r7, lr}
    f106:	b087      	sub	sp, #28
    f108:	af00      	add	r7, sp, #0
    f10a:	4603      	mov	r3, r0
    f10c:	6039      	str	r1, [r7, #0]
    f10e:	71fb      	strb	r3, [r7, #7]
    f110:	4613      	mov	r3, r2
    f112:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    f114:	683b      	ldr	r3, [r7, #0]
    f116:	799a      	ldrb	r2, [r3, #6]
    f118:	79db      	ldrb	r3, [r3, #7]
    f11a:	021b      	lsls	r3, r3, #8
    f11c:	4313      	orrs	r3, r2
    f11e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    f120:	4b2b      	ldr	r3, [pc, #172]	; (f1d0 <cdcdf_acm_set_req+0xcc>)
    f122:	4798      	blx	r3
    f124:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    f126:	683b      	ldr	r3, [r7, #0]
    f128:	785b      	ldrb	r3, [r3, #1]
    f12a:	2b20      	cmp	r3, #32
    f12c:	d002      	beq.n	f134 <cdcdf_acm_set_req+0x30>
    f12e:	2b22      	cmp	r3, #34	; 0x22
    f130:	d034      	beq.n	f19c <cdcdf_acm_set_req+0x98>
    f132:	e046      	b.n	f1c2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f134:	8afb      	ldrh	r3, [r7, #22]
    f136:	2b07      	cmp	r3, #7
    f138:	d002      	beq.n	f140 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    f13a:	f04f 33ff 	mov.w	r3, #4294967295
    f13e:	e042      	b.n	f1c6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    f140:	79bb      	ldrb	r3, [r7, #6]
    f142:	2b00      	cmp	r3, #0
    f144:	d107      	bne.n	f156 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    f146:	8afa      	ldrh	r2, [r7, #22]
    f148:	79f8      	ldrb	r0, [r7, #7]
    f14a:	2300      	movs	r3, #0
    f14c:	6939      	ldr	r1, [r7, #16]
    f14e:	4c21      	ldr	r4, [pc, #132]	; (f1d4 <cdcdf_acm_set_req+0xd0>)
    f150:	47a0      	blx	r4
    f152:	4603      	mov	r3, r0
    f154:	e037      	b.n	f1c6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    f156:	693a      	ldr	r2, [r7, #16]
    f158:	f107 0308 	add.w	r3, r7, #8
    f15c:	6810      	ldr	r0, [r2, #0]
    f15e:	6018      	str	r0, [r3, #0]
    f160:	8891      	ldrh	r1, [r2, #4]
    f162:	7992      	ldrb	r2, [r2, #6]
    f164:	8099      	strh	r1, [r3, #4]
    f166:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    f168:	4b1b      	ldr	r3, [pc, #108]	; (f1d8 <cdcdf_acm_set_req+0xd4>)
    f16a:	681b      	ldr	r3, [r3, #0]
    f16c:	2b00      	cmp	r3, #0
    f16e:	d008      	beq.n	f182 <cdcdf_acm_set_req+0x7e>
    f170:	4b19      	ldr	r3, [pc, #100]	; (f1d8 <cdcdf_acm_set_req+0xd4>)
    f172:	681b      	ldr	r3, [r3, #0]
    f174:	f107 0208 	add.w	r2, r7, #8
    f178:	4610      	mov	r0, r2
    f17a:	4798      	blx	r3
    f17c:	4603      	mov	r3, r0
    f17e:	2b00      	cmp	r3, #0
    f180:	d00a      	beq.n	f198 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    f182:	4b16      	ldr	r3, [pc, #88]	; (f1dc <cdcdf_acm_set_req+0xd8>)
    f184:	f107 0208 	add.w	r2, r7, #8
    f188:	e892 0003 	ldmia.w	r2, {r0, r1}
    f18c:	6018      	str	r0, [r3, #0]
    f18e:	3304      	adds	r3, #4
    f190:	8019      	strh	r1, [r3, #0]
    f192:	3302      	adds	r3, #2
    f194:	0c0a      	lsrs	r2, r1, #16
    f196:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    f198:	2300      	movs	r3, #0
    f19a:	e014      	b.n	f1c6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    f19c:	2300      	movs	r3, #0
    f19e:	2200      	movs	r2, #0
    f1a0:	2100      	movs	r1, #0
    f1a2:	2000      	movs	r0, #0
    f1a4:	4c0b      	ldr	r4, [pc, #44]	; (f1d4 <cdcdf_acm_set_req+0xd0>)
    f1a6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    f1a8:	4b0d      	ldr	r3, [pc, #52]	; (f1e0 <cdcdf_acm_set_req+0xdc>)
    f1aa:	681b      	ldr	r3, [r3, #0]
    f1ac:	2b00      	cmp	r3, #0
    f1ae:	d006      	beq.n	f1be <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    f1b0:	4b0b      	ldr	r3, [pc, #44]	; (f1e0 <cdcdf_acm_set_req+0xdc>)
    f1b2:	681b      	ldr	r3, [r3, #0]
    f1b4:	683a      	ldr	r2, [r7, #0]
    f1b6:	8852      	ldrh	r2, [r2, #2]
    f1b8:	b292      	uxth	r2, r2
    f1ba:	4610      	mov	r0, r2
    f1bc:	4798      	blx	r3
		}
		return ERR_NONE;
    f1be:	2300      	movs	r3, #0
    f1c0:	e001      	b.n	f1c6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    f1c2:	f06f 030c 	mvn.w	r3, #12
	}
}
    f1c6:	4618      	mov	r0, r3
    f1c8:	371c      	adds	r7, #28
    f1ca:	46bd      	mov	sp, r7
    f1cc:	bd90      	pop	{r4, r7, pc}
    f1ce:	bf00      	nop
    f1d0:	00010151 	.word	0x00010151
    f1d4:	0000ffc5 	.word	0x0000ffc5
    f1d8:	2000354c 	.word	0x2000354c
    f1dc:	20003540 	.word	0x20003540
    f1e0:	20003548 	.word	0x20003548

0000f1e4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f1e4:	b590      	push	{r4, r7, lr}
    f1e6:	b085      	sub	sp, #20
    f1e8:	af00      	add	r7, sp, #0
    f1ea:	4603      	mov	r3, r0
    f1ec:	6039      	str	r1, [r7, #0]
    f1ee:	71fb      	strb	r3, [r7, #7]
    f1f0:	4613      	mov	r3, r2
    f1f2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    f1f4:	683b      	ldr	r3, [r7, #0]
    f1f6:	799a      	ldrb	r2, [r3, #6]
    f1f8:	79db      	ldrb	r3, [r3, #7]
    f1fa:	021b      	lsls	r3, r3, #8
    f1fc:	4313      	orrs	r3, r2
    f1fe:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    f200:	79bb      	ldrb	r3, [r7, #6]
    f202:	2b01      	cmp	r3, #1
    f204:	d101      	bne.n	f20a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    f206:	2300      	movs	r3, #0
    f208:	e013      	b.n	f232 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    f20a:	683b      	ldr	r3, [r7, #0]
    f20c:	785b      	ldrb	r3, [r3, #1]
    f20e:	2b21      	cmp	r3, #33	; 0x21
    f210:	d10d      	bne.n	f22e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f212:	89fb      	ldrh	r3, [r7, #14]
    f214:	2b07      	cmp	r3, #7
    f216:	d002      	beq.n	f21e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    f218:	f04f 33ff 	mov.w	r3, #4294967295
    f21c:	e009      	b.n	f232 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    f21e:	89fa      	ldrh	r2, [r7, #14]
    f220:	79f8      	ldrb	r0, [r7, #7]
    f222:	2300      	movs	r3, #0
    f224:	4905      	ldr	r1, [pc, #20]	; (f23c <cdcdf_acm_get_req+0x58>)
    f226:	4c06      	ldr	r4, [pc, #24]	; (f240 <cdcdf_acm_get_req+0x5c>)
    f228:	47a0      	blx	r4
    f22a:	4603      	mov	r3, r0
    f22c:	e001      	b.n	f232 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    f22e:	f06f 030c 	mvn.w	r3, #12
	}
}
    f232:	4618      	mov	r0, r3
    f234:	3714      	adds	r7, #20
    f236:	46bd      	mov	sp, r7
    f238:	bd90      	pop	{r4, r7, pc}
    f23a:	bf00      	nop
    f23c:	20003540 	.word	0x20003540
    f240:	0000ffc5 	.word	0x0000ffc5

0000f244 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f244:	b580      	push	{r7, lr}
    f246:	b082      	sub	sp, #8
    f248:	af00      	add	r7, sp, #0
    f24a:	4603      	mov	r3, r0
    f24c:	6039      	str	r1, [r7, #0]
    f24e:	71fb      	strb	r3, [r7, #7]
    f250:	4613      	mov	r3, r2
    f252:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    f254:	683b      	ldr	r3, [r7, #0]
    f256:	781b      	ldrb	r3, [r3, #0]
    f258:	095b      	lsrs	r3, r3, #5
    f25a:	b2db      	uxtb	r3, r3
    f25c:	f003 0303 	and.w	r3, r3, #3
    f260:	2b01      	cmp	r3, #1
    f262:	d002      	beq.n	f26a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    f264:	f06f 0309 	mvn.w	r3, #9
    f268:	e026      	b.n	f2b8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    f26a:	683b      	ldr	r3, [r7, #0]
    f26c:	889b      	ldrh	r3, [r3, #4]
    f26e:	b29a      	uxth	r2, r3
    f270:	4b13      	ldr	r3, [pc, #76]	; (f2c0 <cdcdf_acm_req+0x7c>)
    f272:	781b      	ldrb	r3, [r3, #0]
    f274:	b29b      	uxth	r3, r3
    f276:	429a      	cmp	r2, r3
    f278:	d007      	beq.n	f28a <cdcdf_acm_req+0x46>
    f27a:	683b      	ldr	r3, [r7, #0]
    f27c:	889b      	ldrh	r3, [r3, #4]
    f27e:	b29a      	uxth	r2, r3
    f280:	4b0f      	ldr	r3, [pc, #60]	; (f2c0 <cdcdf_acm_req+0x7c>)
    f282:	785b      	ldrb	r3, [r3, #1]
    f284:	b29b      	uxth	r3, r3
    f286:	429a      	cmp	r2, r3
    f288:	d114      	bne.n	f2b4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    f28a:	683b      	ldr	r3, [r7, #0]
    f28c:	781b      	ldrb	r3, [r3, #0]
    f28e:	b25b      	sxtb	r3, r3
    f290:	2b00      	cmp	r3, #0
    f292:	da07      	bge.n	f2a4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    f294:	79ba      	ldrb	r2, [r7, #6]
    f296:	79fb      	ldrb	r3, [r7, #7]
    f298:	6839      	ldr	r1, [r7, #0]
    f29a:	4618      	mov	r0, r3
    f29c:	4b09      	ldr	r3, [pc, #36]	; (f2c4 <cdcdf_acm_req+0x80>)
    f29e:	4798      	blx	r3
    f2a0:	4603      	mov	r3, r0
    f2a2:	e009      	b.n	f2b8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    f2a4:	79ba      	ldrb	r2, [r7, #6]
    f2a6:	79fb      	ldrb	r3, [r7, #7]
    f2a8:	6839      	ldr	r1, [r7, #0]
    f2aa:	4618      	mov	r0, r3
    f2ac:	4b06      	ldr	r3, [pc, #24]	; (f2c8 <cdcdf_acm_req+0x84>)
    f2ae:	4798      	blx	r3
    f2b0:	4603      	mov	r3, r0
    f2b2:	e001      	b.n	f2b8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    f2b4:	f06f 0309 	mvn.w	r3, #9
	}
}
    f2b8:	4618      	mov	r0, r3
    f2ba:	3708      	adds	r7, #8
    f2bc:	46bd      	mov	sp, r7
    f2be:	bd80      	pop	{r7, pc}
    f2c0:	20003538 	.word	0x20003538
    f2c4:	0000f1e5 	.word	0x0000f1e5
    f2c8:	0000f105 	.word	0x0000f105

0000f2cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    f2cc:	b580      	push	{r7, lr}
    f2ce:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    f2d0:	4b0b      	ldr	r3, [pc, #44]	; (f300 <cdcdf_acm_init+0x34>)
    f2d2:	4798      	blx	r3
    f2d4:	4603      	mov	r3, r0
    f2d6:	2b01      	cmp	r3, #1
    f2d8:	d902      	bls.n	f2e0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    f2da:	f06f 0310 	mvn.w	r3, #16
    f2de:	e00d      	b.n	f2fc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    f2e0:	4b08      	ldr	r3, [pc, #32]	; (f304 <cdcdf_acm_init+0x38>)
    f2e2:	4a09      	ldr	r2, [pc, #36]	; (f308 <cdcdf_acm_init+0x3c>)
    f2e4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    f2e6:	4b07      	ldr	r3, [pc, #28]	; (f304 <cdcdf_acm_init+0x38>)
    f2e8:	4a08      	ldr	r2, [pc, #32]	; (f30c <cdcdf_acm_init+0x40>)
    f2ea:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    f2ec:	4805      	ldr	r0, [pc, #20]	; (f304 <cdcdf_acm_init+0x38>)
    f2ee:	4b08      	ldr	r3, [pc, #32]	; (f310 <cdcdf_acm_init+0x44>)
    f2f0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    f2f2:	4908      	ldr	r1, [pc, #32]	; (f314 <cdcdf_acm_init+0x48>)
    f2f4:	2001      	movs	r0, #1
    f2f6:	4b08      	ldr	r3, [pc, #32]	; (f318 <cdcdf_acm_init+0x4c>)
    f2f8:	4798      	blx	r3
	return ERR_NONE;
    f2fa:	2300      	movs	r3, #0
}
    f2fc:	4618      	mov	r0, r3
    f2fe:	bd80      	pop	{r7, pc}
    f300:	00010169 	.word	0x00010169
    f304:	2000352c 	.word	0x2000352c
    f308:	0000f0b5 	.word	0x0000f0b5
    f30c:	20003538 	.word	0x20003538
    f310:	000100d1 	.word	0x000100d1
    f314:	20000198 	.word	0x20000198
    f318:	00010001 	.word	0x00010001

0000f31c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    f31c:	b590      	push	{r4, r7, lr}
    f31e:	b083      	sub	sp, #12
    f320:	af00      	add	r7, sp, #0
    f322:	6078      	str	r0, [r7, #4]
    f324:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f326:	4b0b      	ldr	r3, [pc, #44]	; (f354 <cdcdf_acm_read+0x38>)
    f328:	4798      	blx	r3
    f32a:	4603      	mov	r3, r0
    f32c:	f083 0301 	eor.w	r3, r3, #1
    f330:	b2db      	uxtb	r3, r3
    f332:	2b00      	cmp	r3, #0
    f334:	d002      	beq.n	f33c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    f336:	f06f 0310 	mvn.w	r3, #16
    f33a:	e007      	b.n	f34c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    f33c:	4b06      	ldr	r3, [pc, #24]	; (f358 <cdcdf_acm_read+0x3c>)
    f33e:	7918      	ldrb	r0, [r3, #4]
    f340:	2300      	movs	r3, #0
    f342:	683a      	ldr	r2, [r7, #0]
    f344:	6879      	ldr	r1, [r7, #4]
    f346:	4c05      	ldr	r4, [pc, #20]	; (f35c <cdcdf_acm_read+0x40>)
    f348:	47a0      	blx	r4
    f34a:	4603      	mov	r3, r0
}
    f34c:	4618      	mov	r0, r3
    f34e:	370c      	adds	r7, #12
    f350:	46bd      	mov	sp, r7
    f352:	bd90      	pop	{r4, r7, pc}
    f354:	0000f441 	.word	0x0000f441
    f358:	20003538 	.word	0x20003538
    f35c:	0000ffc5 	.word	0x0000ffc5

0000f360 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    f360:	b590      	push	{r4, r7, lr}
    f362:	b083      	sub	sp, #12
    f364:	af00      	add	r7, sp, #0
    f366:	6078      	str	r0, [r7, #4]
    f368:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f36a:	4b0b      	ldr	r3, [pc, #44]	; (f398 <cdcdf_acm_write+0x38>)
    f36c:	4798      	blx	r3
    f36e:	4603      	mov	r3, r0
    f370:	f083 0301 	eor.w	r3, r3, #1
    f374:	b2db      	uxtb	r3, r3
    f376:	2b00      	cmp	r3, #0
    f378:	d002      	beq.n	f380 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    f37a:	f06f 0310 	mvn.w	r3, #16
    f37e:	e007      	b.n	f390 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    f380:	4b06      	ldr	r3, [pc, #24]	; (f39c <cdcdf_acm_write+0x3c>)
    f382:	78d8      	ldrb	r0, [r3, #3]
    f384:	2301      	movs	r3, #1
    f386:	683a      	ldr	r2, [r7, #0]
    f388:	6879      	ldr	r1, [r7, #4]
    f38a:	4c05      	ldr	r4, [pc, #20]	; (f3a0 <cdcdf_acm_write+0x40>)
    f38c:	47a0      	blx	r4
    f38e:	4603      	mov	r3, r0
}
    f390:	4618      	mov	r0, r3
    f392:	370c      	adds	r7, #12
    f394:	46bd      	mov	sp, r7
    f396:	bd90      	pop	{r4, r7, pc}
    f398:	0000f441 	.word	0x0000f441
    f39c:	20003538 	.word	0x20003538
    f3a0:	0000ffc5 	.word	0x0000ffc5

0000f3a4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    f3a4:	b580      	push	{r7, lr}
    f3a6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    f3a8:	4b05      	ldr	r3, [pc, #20]	; (f3c0 <cdcdf_acm_stop_xfer+0x1c>)
    f3aa:	78db      	ldrb	r3, [r3, #3]
    f3ac:	4618      	mov	r0, r3
    f3ae:	4b05      	ldr	r3, [pc, #20]	; (f3c4 <cdcdf_acm_stop_xfer+0x20>)
    f3b0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    f3b2:	4b03      	ldr	r3, [pc, #12]	; (f3c0 <cdcdf_acm_stop_xfer+0x1c>)
    f3b4:	791b      	ldrb	r3, [r3, #4]
    f3b6:	4618      	mov	r0, r3
    f3b8:	4b02      	ldr	r3, [pc, #8]	; (f3c4 <cdcdf_acm_stop_xfer+0x20>)
    f3ba:	4798      	blx	r3
}
    f3bc:	bf00      	nop
    f3be:	bd80      	pop	{r7, pc}
    f3c0:	20003538 	.word	0x20003538
    f3c4:	000060a9 	.word	0x000060a9

0000f3c8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    f3c8:	b580      	push	{r7, lr}
    f3ca:	b082      	sub	sp, #8
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	4603      	mov	r3, r0
    f3d0:	6039      	str	r1, [r7, #0]
    f3d2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    f3d4:	79fb      	ldrb	r3, [r7, #7]
    f3d6:	2b03      	cmp	r3, #3
    f3d8:	d822      	bhi.n	f420 <cdcdf_acm_register_callback+0x58>
    f3da:	a201      	add	r2, pc, #4	; (adr r2, f3e0 <cdcdf_acm_register_callback+0x18>)
    f3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f3e0:	0000f3f1 	.word	0x0000f3f1
    f3e4:	0000f401 	.word	0x0000f401
    f3e8:	0000f411 	.word	0x0000f411
    f3ec:	0000f419 	.word	0x0000f419
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    f3f0:	4b0f      	ldr	r3, [pc, #60]	; (f430 <cdcdf_acm_register_callback+0x68>)
    f3f2:	791b      	ldrb	r3, [r3, #4]
    f3f4:	683a      	ldr	r2, [r7, #0]
    f3f6:	2102      	movs	r1, #2
    f3f8:	4618      	mov	r0, r3
    f3fa:	4b0e      	ldr	r3, [pc, #56]	; (f434 <cdcdf_acm_register_callback+0x6c>)
    f3fc:	4798      	blx	r3
		break;
    f3fe:	e012      	b.n	f426 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    f400:	4b0b      	ldr	r3, [pc, #44]	; (f430 <cdcdf_acm_register_callback+0x68>)
    f402:	78db      	ldrb	r3, [r3, #3]
    f404:	683a      	ldr	r2, [r7, #0]
    f406:	2102      	movs	r1, #2
    f408:	4618      	mov	r0, r3
    f40a:	4b0a      	ldr	r3, [pc, #40]	; (f434 <cdcdf_acm_register_callback+0x6c>)
    f40c:	4798      	blx	r3
		break;
    f40e:	e00a      	b.n	f426 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    f410:	4a09      	ldr	r2, [pc, #36]	; (f438 <cdcdf_acm_register_callback+0x70>)
    f412:	683b      	ldr	r3, [r7, #0]
    f414:	6013      	str	r3, [r2, #0]
		break;
    f416:	e006      	b.n	f426 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    f418:	4a08      	ldr	r2, [pc, #32]	; (f43c <cdcdf_acm_register_callback+0x74>)
    f41a:	683b      	ldr	r3, [r7, #0]
    f41c:	6013      	str	r3, [r2, #0]
		break;
    f41e:	e002      	b.n	f426 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    f420:	f06f 030c 	mvn.w	r3, #12
    f424:	e000      	b.n	f428 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    f426:	2300      	movs	r3, #0
}
    f428:	4618      	mov	r0, r3
    f42a:	3708      	adds	r7, #8
    f42c:	46bd      	mov	sp, r7
    f42e:	bd80      	pop	{r7, pc}
    f430:	20003538 	.word	0x20003538
    f434:	000061d5 	.word	0x000061d5
    f438:	2000354c 	.word	0x2000354c
    f43c:	20003548 	.word	0x20003548

0000f440 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    f440:	b480      	push	{r7}
    f442:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    f444:	4b03      	ldr	r3, [pc, #12]	; (f454 <cdcdf_acm_is_enabled+0x14>)
    f446:	795b      	ldrb	r3, [r3, #5]
}
    f448:	4618      	mov	r0, r3
    f44a:	46bd      	mov	sp, r7
    f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f450:	4770      	bx	lr
    f452:	bf00      	nop
    f454:	20003538 	.word	0x20003538

0000f458 <usb_get_u16>:
{
    f458:	b480      	push	{r7}
    f45a:	b083      	sub	sp, #12
    f45c:	af00      	add	r7, sp, #0
    f45e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f460:	687b      	ldr	r3, [r7, #4]
    f462:	781b      	ldrb	r3, [r3, #0]
    f464:	b29a      	uxth	r2, r3
    f466:	687b      	ldr	r3, [r7, #4]
    f468:	3301      	adds	r3, #1
    f46a:	781b      	ldrb	r3, [r3, #0]
    f46c:	b29b      	uxth	r3, r3
    f46e:	021b      	lsls	r3, r3, #8
    f470:	b29b      	uxth	r3, r3
    f472:	4413      	add	r3, r2
    f474:	b29b      	uxth	r3, r3
}
    f476:	4618      	mov	r0, r3
    f478:	370c      	adds	r7, #12
    f47a:	46bd      	mov	sp, r7
    f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f480:	4770      	bx	lr

0000f482 <usb_desc_len>:
{
    f482:	b480      	push	{r7}
    f484:	b083      	sub	sp, #12
    f486:	af00      	add	r7, sp, #0
    f488:	6078      	str	r0, [r7, #4]
	return desc[0];
    f48a:	687b      	ldr	r3, [r7, #4]
    f48c:	781b      	ldrb	r3, [r3, #0]
}
    f48e:	4618      	mov	r0, r3
    f490:	370c      	adds	r7, #12
    f492:	46bd      	mov	sp, r7
    f494:	f85d 7b04 	ldr.w	r7, [sp], #4
    f498:	4770      	bx	lr
	...

0000f49c <usb_desc_next>:
{
    f49c:	b580      	push	{r7, lr}
    f49e:	b082      	sub	sp, #8
    f4a0:	af00      	add	r7, sp, #0
    f4a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f4a4:	6878      	ldr	r0, [r7, #4]
    f4a6:	4b05      	ldr	r3, [pc, #20]	; (f4bc <usb_desc_next+0x20>)
    f4a8:	4798      	blx	r3
    f4aa:	4603      	mov	r3, r0
    f4ac:	461a      	mov	r2, r3
    f4ae:	687b      	ldr	r3, [r7, #4]
    f4b0:	4413      	add	r3, r2
}
    f4b2:	4618      	mov	r0, r3
    f4b4:	3708      	adds	r7, #8
    f4b6:	46bd      	mov	sp, r7
    f4b8:	bd80      	pop	{r7, pc}
    f4ba:	bf00      	nop
    f4bc:	0000f483 	.word	0x0000f483

0000f4c0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    f4c0:	b580      	push	{r7, lr}
    f4c2:	b082      	sub	sp, #8
    f4c4:	af00      	add	r7, sp, #0
    f4c6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f4c8:	687b      	ldr	r3, [r7, #4]
    f4ca:	3302      	adds	r3, #2
    f4cc:	4618      	mov	r0, r3
    f4ce:	4b03      	ldr	r3, [pc, #12]	; (f4dc <usb_cfg_desc_total_len+0x1c>)
    f4d0:	4798      	blx	r3
    f4d2:	4603      	mov	r3, r0
}
    f4d4:	4618      	mov	r0, r3
    f4d6:	3708      	adds	r7, #8
    f4d8:	46bd      	mov	sp, r7
    f4da:	bd80      	pop	{r7, pc}
    f4dc:	0000f459 	.word	0x0000f459

0000f4e0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    f4e0:	b590      	push	{r4, r7, lr}
    f4e2:	b085      	sub	sp, #20
    f4e4:	af00      	add	r7, sp, #0
    f4e6:	4603      	mov	r3, r0
    f4e8:	6039      	str	r1, [r7, #0]
    f4ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    f4ec:	2300      	movs	r3, #0
    f4ee:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    f4f0:	683b      	ldr	r3, [r7, #0]
    f4f2:	799a      	ldrb	r2, [r3, #6]
    f4f4:	79db      	ldrb	r3, [r3, #7]
    f4f6:	021b      	lsls	r3, r3, #8
    f4f8:	4313      	orrs	r3, r2
    f4fa:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    f4fc:	897b      	ldrh	r3, [r7, #10]
    f4fe:	2b12      	cmp	r3, #18
    f500:	d901      	bls.n	f506 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    f502:	2312      	movs	r3, #18
    f504:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    f506:	68fb      	ldr	r3, [r7, #12]
    f508:	2b00      	cmp	r3, #0
    f50a:	d10a      	bne.n	f522 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    f50c:	4b0f      	ldr	r3, [pc, #60]	; (f54c <usbdc_get_dev_desc+0x6c>)
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	6818      	ldr	r0, [r3, #0]
    f512:	4b0e      	ldr	r3, [pc, #56]	; (f54c <usbdc_get_dev_desc+0x6c>)
    f514:	681b      	ldr	r3, [r3, #0]
    f516:	685b      	ldr	r3, [r3, #4]
    f518:	2201      	movs	r2, #1
    f51a:	4619      	mov	r1, r3
    f51c:	4b0c      	ldr	r3, [pc, #48]	; (f550 <usbdc_get_dev_desc+0x70>)
    f51e:	4798      	blx	r3
    f520:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    f522:	68fb      	ldr	r3, [r7, #12]
    f524:	2b00      	cmp	r3, #0
    f526:	d101      	bne.n	f52c <usbdc_get_dev_desc+0x4c>
		return false;
    f528:	2300      	movs	r3, #0
    f52a:	e00b      	b.n	f544 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    f52c:	897a      	ldrh	r2, [r7, #10]
    f52e:	79f8      	ldrb	r0, [r7, #7]
    f530:	2300      	movs	r3, #0
    f532:	68f9      	ldr	r1, [r7, #12]
    f534:	4c07      	ldr	r4, [pc, #28]	; (f554 <usbdc_get_dev_desc+0x74>)
    f536:	47a0      	blx	r4
    f538:	4603      	mov	r3, r0
    f53a:	2b00      	cmp	r3, #0
    f53c:	d001      	beq.n	f542 <usbdc_get_dev_desc+0x62>
		return false;
    f53e:	2300      	movs	r3, #0
    f540:	e000      	b.n	f544 <usbdc_get_dev_desc+0x64>
	}
	return true;
    f542:	2301      	movs	r3, #1
}
    f544:	4618      	mov	r0, r3
    f546:	3714      	adds	r7, #20
    f548:	46bd      	mov	sp, r7
    f54a:	bd90      	pop	{r4, r7, pc}
    f54c:	20003550 	.word	0x20003550
    f550:	00010255 	.word	0x00010255
    f554:	0000ffc5 	.word	0x0000ffc5

0000f558 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    f558:	b590      	push	{r4, r7, lr}
    f55a:	b087      	sub	sp, #28
    f55c:	af00      	add	r7, sp, #0
    f55e:	4603      	mov	r3, r0
    f560:	6039      	str	r1, [r7, #0]
    f562:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    f564:	2300      	movs	r3, #0
    f566:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    f568:	683b      	ldr	r3, [r7, #0]
    f56a:	799a      	ldrb	r2, [r3, #6]
    f56c:	79db      	ldrb	r3, [r3, #7]
    f56e:	021b      	lsls	r3, r3, #8
    f570:	4313      	orrs	r3, r2
    f572:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    f574:	683b      	ldr	r3, [r7, #0]
    f576:	885b      	ldrh	r3, [r3, #2]
    f578:	b29b      	uxth	r3, r3
    f57a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f57c:	8a7a      	ldrh	r2, [r7, #18]
    f57e:	4b1e      	ldr	r3, [pc, #120]	; (f5f8 <usbdc_get_cfg_desc+0xa0>)
    f580:	7f1b      	ldrb	r3, [r3, #28]
    f582:	3b01      	subs	r3, #1
    f584:	4013      	ands	r3, r2
    f586:	2b00      	cmp	r3, #0
    f588:	bf0c      	ite	eq
    f58a:	2301      	moveq	r3, #1
    f58c:	2300      	movne	r3, #0
    f58e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f590:	697b      	ldr	r3, [r7, #20]
    f592:	2b00      	cmp	r3, #0
    f594:	d10c      	bne.n	f5b0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    f596:	4b18      	ldr	r3, [pc, #96]	; (f5f8 <usbdc_get_cfg_desc+0xa0>)
    f598:	681b      	ldr	r3, [r3, #0]
    f59a:	6818      	ldr	r0, [r3, #0]
    f59c:	4b16      	ldr	r3, [pc, #88]	; (f5f8 <usbdc_get_cfg_desc+0xa0>)
    f59e:	681b      	ldr	r3, [r3, #0]
    f5a0:	6859      	ldr	r1, [r3, #4]
    f5a2:	7c3b      	ldrb	r3, [r7, #16]
    f5a4:	3301      	adds	r3, #1
    f5a6:	b2db      	uxtb	r3, r3
    f5a8:	461a      	mov	r2, r3
    f5aa:	4b14      	ldr	r3, [pc, #80]	; (f5fc <usbdc_get_cfg_desc+0xa4>)
    f5ac:	4798      	blx	r3
    f5ae:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    f5b0:	697b      	ldr	r3, [r7, #20]
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	d101      	bne.n	f5ba <usbdc_get_cfg_desc+0x62>
		return false;
    f5b6:	2300      	movs	r3, #0
    f5b8:	e019      	b.n	f5ee <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    f5ba:	6978      	ldr	r0, [r7, #20]
    f5bc:	4b10      	ldr	r3, [pc, #64]	; (f600 <usbdc_get_cfg_desc+0xa8>)
    f5be:	4798      	blx	r3
    f5c0:	4603      	mov	r3, r0
    f5c2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    f5c4:	8a7a      	ldrh	r2, [r7, #18]
    f5c6:	89fb      	ldrh	r3, [r7, #14]
    f5c8:	429a      	cmp	r2, r3
    f5ca:	d802      	bhi.n	f5d2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    f5cc:	2300      	movs	r3, #0
    f5ce:	747b      	strb	r3, [r7, #17]
    f5d0:	e001      	b.n	f5d6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    f5d2:	89fb      	ldrh	r3, [r7, #14]
    f5d4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    f5d6:	8a7a      	ldrh	r2, [r7, #18]
    f5d8:	7c7b      	ldrb	r3, [r7, #17]
    f5da:	79f8      	ldrb	r0, [r7, #7]
    f5dc:	6979      	ldr	r1, [r7, #20]
    f5de:	4c09      	ldr	r4, [pc, #36]	; (f604 <usbdc_get_cfg_desc+0xac>)
    f5e0:	47a0      	blx	r4
    f5e2:	4603      	mov	r3, r0
    f5e4:	2b00      	cmp	r3, #0
    f5e6:	d001      	beq.n	f5ec <usbdc_get_cfg_desc+0x94>
		return false;
    f5e8:	2300      	movs	r3, #0
    f5ea:	e000      	b.n	f5ee <usbdc_get_cfg_desc+0x96>
	}
	return true;
    f5ec:	2301      	movs	r3, #1
}
    f5ee:	4618      	mov	r0, r3
    f5f0:	371c      	adds	r7, #28
    f5f2:	46bd      	mov	sp, r7
    f5f4:	bd90      	pop	{r4, r7, pc}
    f5f6:	bf00      	nop
    f5f8:	20003550 	.word	0x20003550
    f5fc:	00010315 	.word	0x00010315
    f600:	0000f4c1 	.word	0x0000f4c1
    f604:	0000ffc5 	.word	0x0000ffc5

0000f608 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    f608:	b590      	push	{r4, r7, lr}
    f60a:	b085      	sub	sp, #20
    f60c:	af00      	add	r7, sp, #0
    f60e:	4603      	mov	r3, r0
    f610:	6039      	str	r1, [r7, #0]
    f612:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    f614:	683b      	ldr	r3, [r7, #0]
    f616:	799a      	ldrb	r2, [r3, #6]
    f618:	79db      	ldrb	r3, [r3, #7]
    f61a:	021b      	lsls	r3, r3, #8
    f61c:	4313      	orrs	r3, r2
    f61e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    f620:	683b      	ldr	r3, [r7, #0]
    f622:	885b      	ldrh	r3, [r3, #2]
    f624:	b29b      	uxth	r3, r3
    f626:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f628:	89fa      	ldrh	r2, [r7, #14]
    f62a:	4b1a      	ldr	r3, [pc, #104]	; (f694 <usbdc_get_str_desc+0x8c>)
    f62c:	7f1b      	ldrb	r3, [r3, #28]
    f62e:	3b01      	subs	r3, #1
    f630:	4013      	ands	r3, r2
    f632:	2b00      	cmp	r3, #0
    f634:	bf0c      	ite	eq
    f636:	2301      	moveq	r3, #1
    f638:	2300      	movne	r3, #0
    f63a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    f63c:	4b15      	ldr	r3, [pc, #84]	; (f694 <usbdc_get_str_desc+0x8c>)
    f63e:	681b      	ldr	r3, [r3, #0]
    f640:	6818      	ldr	r0, [r3, #0]
    f642:	4b14      	ldr	r3, [pc, #80]	; (f694 <usbdc_get_str_desc+0x8c>)
    f644:	681b      	ldr	r3, [r3, #0]
    f646:	685b      	ldr	r3, [r3, #4]
    f648:	7b3a      	ldrb	r2, [r7, #12]
    f64a:	4619      	mov	r1, r3
    f64c:	4b12      	ldr	r3, [pc, #72]	; (f698 <usbdc_get_str_desc+0x90>)
    f64e:	4798      	blx	r3
    f650:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    f652:	68bb      	ldr	r3, [r7, #8]
    f654:	2b00      	cmp	r3, #0
    f656:	d101      	bne.n	f65c <usbdc_get_str_desc+0x54>
		return false;
    f658:	2300      	movs	r3, #0
    f65a:	e017      	b.n	f68c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    f65c:	68bb      	ldr	r3, [r7, #8]
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	b29b      	uxth	r3, r3
    f662:	89fa      	ldrh	r2, [r7, #14]
    f664:	429a      	cmp	r2, r3
    f666:	d802      	bhi.n	f66e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    f668:	2300      	movs	r3, #0
    f66a:	737b      	strb	r3, [r7, #13]
    f66c:	e002      	b.n	f674 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    f66e:	68bb      	ldr	r3, [r7, #8]
    f670:	781b      	ldrb	r3, [r3, #0]
    f672:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    f674:	89fa      	ldrh	r2, [r7, #14]
    f676:	7b7b      	ldrb	r3, [r7, #13]
    f678:	79f8      	ldrb	r0, [r7, #7]
    f67a:	68b9      	ldr	r1, [r7, #8]
    f67c:	4c07      	ldr	r4, [pc, #28]	; (f69c <usbdc_get_str_desc+0x94>)
    f67e:	47a0      	blx	r4
    f680:	4603      	mov	r3, r0
    f682:	2b00      	cmp	r3, #0
    f684:	d001      	beq.n	f68a <usbdc_get_str_desc+0x82>
		return false;
    f686:	2300      	movs	r3, #0
    f688:	e000      	b.n	f68c <usbdc_get_str_desc+0x84>
	}
	return true;
    f68a:	2301      	movs	r3, #1
}
    f68c:	4618      	mov	r0, r3
    f68e:	3714      	adds	r7, #20
    f690:	46bd      	mov	sp, r7
    f692:	bd90      	pop	{r4, r7, pc}
    f694:	20003550 	.word	0x20003550
    f698:	0001038d 	.word	0x0001038d
    f69c:	0000ffc5 	.word	0x0000ffc5

0000f6a0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    f6a0:	b580      	push	{r7, lr}
    f6a2:	b084      	sub	sp, #16
    f6a4:	af00      	add	r7, sp, #0
    f6a6:	4603      	mov	r3, r0
    f6a8:	6039      	str	r1, [r7, #0]
    f6aa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    f6ac:	683b      	ldr	r3, [r7, #0]
    f6ae:	885b      	ldrh	r3, [r3, #2]
    f6b0:	b29b      	uxth	r3, r3
    f6b2:	0a1b      	lsrs	r3, r3, #8
    f6b4:	b29b      	uxth	r3, r3
    f6b6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    f6b8:	7bfb      	ldrb	r3, [r7, #15]
    f6ba:	2b02      	cmp	r3, #2
    f6bc:	d00d      	beq.n	f6da <usbdc_get_desc_req+0x3a>
    f6be:	2b03      	cmp	r3, #3
    f6c0:	d012      	beq.n	f6e8 <usbdc_get_desc_req+0x48>
    f6c2:	2b01      	cmp	r3, #1
    f6c4:	d002      	beq.n	f6cc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    f6c6:	bf00      	nop
	}
	return false;
    f6c8:	2300      	movs	r3, #0
    f6ca:	e013      	b.n	f6f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    f6cc:	79fb      	ldrb	r3, [r7, #7]
    f6ce:	6839      	ldr	r1, [r7, #0]
    f6d0:	4618      	mov	r0, r3
    f6d2:	4b0a      	ldr	r3, [pc, #40]	; (f6fc <usbdc_get_desc_req+0x5c>)
    f6d4:	4798      	blx	r3
    f6d6:	4603      	mov	r3, r0
    f6d8:	e00c      	b.n	f6f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    f6da:	79fb      	ldrb	r3, [r7, #7]
    f6dc:	6839      	ldr	r1, [r7, #0]
    f6de:	4618      	mov	r0, r3
    f6e0:	4b07      	ldr	r3, [pc, #28]	; (f700 <usbdc_get_desc_req+0x60>)
    f6e2:	4798      	blx	r3
    f6e4:	4603      	mov	r3, r0
    f6e6:	e005      	b.n	f6f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    f6e8:	79fb      	ldrb	r3, [r7, #7]
    f6ea:	6839      	ldr	r1, [r7, #0]
    f6ec:	4618      	mov	r0, r3
    f6ee:	4b05      	ldr	r3, [pc, #20]	; (f704 <usbdc_get_desc_req+0x64>)
    f6f0:	4798      	blx	r3
    f6f2:	4603      	mov	r3, r0
}
    f6f4:	4618      	mov	r0, r3
    f6f6:	3710      	adds	r7, #16
    f6f8:	46bd      	mov	sp, r7
    f6fa:	bd80      	pop	{r7, pc}
    f6fc:	0000f4e1 	.word	0x0000f4e1
    f700:	0000f559 	.word	0x0000f559
    f704:	0000f609 	.word	0x0000f609

0000f708 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    f708:	b590      	push	{r4, r7, lr}
    f70a:	b085      	sub	sp, #20
    f70c:	af00      	add	r7, sp, #0
    f70e:	4603      	mov	r3, r0
    f710:	6039      	str	r1, [r7, #0]
    f712:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f714:	683b      	ldr	r3, [r7, #0]
    f716:	781b      	ldrb	r3, [r3, #0]
    f718:	f003 031f 	and.w	r3, r3, #31
    f71c:	2b00      	cmp	r3, #0
    f71e:	db1b      	blt.n	f758 <usbdc_get_status_req+0x50>
    f720:	2b01      	cmp	r3, #1
    f722:	dd02      	ble.n	f72a <usbdc_get_status_req+0x22>
    f724:	2b02      	cmp	r3, #2
    f726:	d003      	beq.n	f730 <usbdc_get_status_req+0x28>
    f728:	e016      	b.n	f758 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    f72a:	2300      	movs	r3, #0
    f72c:	60fb      	str	r3, [r7, #12]
		break;
    f72e:	e015      	b.n	f75c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    f730:	683b      	ldr	r3, [r7, #0]
    f732:	889b      	ldrh	r3, [r3, #4]
    f734:	b29b      	uxth	r3, r3
    f736:	b2db      	uxtb	r3, r3
    f738:	2102      	movs	r1, #2
    f73a:	4618      	mov	r0, r3
    f73c:	4b0f      	ldr	r3, [pc, #60]	; (f77c <usbdc_get_status_req+0x74>)
    f73e:	4798      	blx	r3
    f740:	4603      	mov	r3, r0
    f742:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    f744:	68fb      	ldr	r3, [r7, #12]
    f746:	2b00      	cmp	r3, #0
    f748:	da01      	bge.n	f74e <usbdc_get_status_req+0x46>
			return false;
    f74a:	2300      	movs	r3, #0
    f74c:	e012      	b.n	f774 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    f74e:	68fb      	ldr	r3, [r7, #12]
    f750:	f003 0301 	and.w	r3, r3, #1
    f754:	60fb      	str	r3, [r7, #12]
		break;
    f756:	e001      	b.n	f75c <usbdc_get_status_req+0x54>
	default:
		return false;
    f758:	2300      	movs	r3, #0
    f75a:	e00b      	b.n	f774 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    f75c:	4b08      	ldr	r3, [pc, #32]	; (f780 <usbdc_get_status_req+0x78>)
    f75e:	695b      	ldr	r3, [r3, #20]
    f760:	89ba      	ldrh	r2, [r7, #12]
    f762:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    f764:	4b06      	ldr	r3, [pc, #24]	; (f780 <usbdc_get_status_req+0x78>)
    f766:	6959      	ldr	r1, [r3, #20]
    f768:	79f8      	ldrb	r0, [r7, #7]
    f76a:	2300      	movs	r3, #0
    f76c:	2202      	movs	r2, #2
    f76e:	4c05      	ldr	r4, [pc, #20]	; (f784 <usbdc_get_status_req+0x7c>)
    f770:	47a0      	blx	r4
	return true;
    f772:	2301      	movs	r3, #1
}
    f774:	4618      	mov	r0, r3
    f776:	3714      	adds	r7, #20
    f778:	46bd      	mov	sp, r7
    f77a:	bd90      	pop	{r4, r7, pc}
    f77c:	00006181 	.word	0x00006181
    f780:	20003550 	.word	0x20003550
    f784:	0000ffc5 	.word	0x0000ffc5

0000f788 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    f788:	b590      	push	{r4, r7, lr}
    f78a:	b085      	sub	sp, #20
    f78c:	af00      	add	r7, sp, #0
    f78e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f790:	4b1f      	ldr	r3, [pc, #124]	; (f810 <usbdc_get_interface+0x88>)
    f792:	691b      	ldr	r3, [r3, #16]
    f794:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    f796:	4b1e      	ldr	r3, [pc, #120]	; (f810 <usbdc_get_interface+0x88>)
    f798:	7f5b      	ldrb	r3, [r3, #29]
    f79a:	461a      	mov	r2, r3
    f79c:	687b      	ldr	r3, [r7, #4]
    f79e:	889b      	ldrh	r3, [r3, #4]
    f7a0:	b29b      	uxth	r3, r3
    f7a2:	fa42 f303 	asr.w	r3, r2, r3
    f7a6:	f003 0301 	and.w	r3, r3, #1
    f7aa:	2b00      	cmp	r3, #0
    f7ac:	d128      	bne.n	f800 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    f7ae:	4b18      	ldr	r3, [pc, #96]	; (f810 <usbdc_get_interface+0x88>)
    f7b0:	695b      	ldr	r3, [r3, #20]
    f7b2:	2200      	movs	r2, #0
    f7b4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f7b6:	4b16      	ldr	r3, [pc, #88]	; (f810 <usbdc_get_interface+0x88>)
    f7b8:	6959      	ldr	r1, [r3, #20]
    f7ba:	2300      	movs	r3, #0
    f7bc:	2201      	movs	r2, #1
    f7be:	2000      	movs	r0, #0
    f7c0:	4c14      	ldr	r4, [pc, #80]	; (f814 <usbdc_get_interface+0x8c>)
    f7c2:	47a0      	blx	r4
		return true;
    f7c4:	2301      	movs	r3, #1
    f7c6:	e01f      	b.n	f808 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    f7c8:	68fb      	ldr	r3, [r7, #12]
    f7ca:	685b      	ldr	r3, [r3, #4]
    f7cc:	687a      	ldr	r2, [r7, #4]
    f7ce:	2102      	movs	r1, #2
    f7d0:	68f8      	ldr	r0, [r7, #12]
    f7d2:	4798      	blx	r3
    f7d4:	60b8      	str	r0, [r7, #8]
    f7d6:	68bb      	ldr	r3, [r7, #8]
    f7d8:	2b00      	cmp	r3, #0
    f7da:	da03      	bge.n	f7e4 <usbdc_get_interface+0x5c>
			func = func->next;
    f7dc:	68fb      	ldr	r3, [r7, #12]
    f7de:	681b      	ldr	r3, [r3, #0]
    f7e0:	60fb      	str	r3, [r7, #12]
    f7e2:	e00d      	b.n	f800 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    f7e4:	4b0a      	ldr	r3, [pc, #40]	; (f810 <usbdc_get_interface+0x88>)
    f7e6:	695b      	ldr	r3, [r3, #20]
    f7e8:	68ba      	ldr	r2, [r7, #8]
    f7ea:	b2d2      	uxtb	r2, r2
    f7ec:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f7ee:	4b08      	ldr	r3, [pc, #32]	; (f810 <usbdc_get_interface+0x88>)
    f7f0:	6959      	ldr	r1, [r3, #20]
    f7f2:	2300      	movs	r3, #0
    f7f4:	2201      	movs	r2, #1
    f7f6:	2000      	movs	r0, #0
    f7f8:	4c06      	ldr	r4, [pc, #24]	; (f814 <usbdc_get_interface+0x8c>)
    f7fa:	47a0      	blx	r4
			return true;
    f7fc:	2301      	movs	r3, #1
    f7fe:	e003      	b.n	f808 <usbdc_get_interface+0x80>
	while (NULL != func) {
    f800:	68fb      	ldr	r3, [r7, #12]
    f802:	2b00      	cmp	r3, #0
    f804:	d1e0      	bne.n	f7c8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    f806:	2300      	movs	r3, #0
}
    f808:	4618      	mov	r0, r3
    f80a:	3714      	adds	r7, #20
    f80c:	46bd      	mov	sp, r7
    f80e:	bd90      	pop	{r4, r7, pc}
    f810:	20003550 	.word	0x20003550
    f814:	0000ffc5 	.word	0x0000ffc5

0000f818 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    f818:	b590      	push	{r4, r7, lr}
    f81a:	b083      	sub	sp, #12
    f81c:	af00      	add	r7, sp, #0
    f81e:	4603      	mov	r3, r0
    f820:	6039      	str	r1, [r7, #0]
    f822:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f824:	683b      	ldr	r3, [r7, #0]
    f826:	785b      	ldrb	r3, [r3, #1]
    f828:	2b0a      	cmp	r3, #10
    f82a:	d83a      	bhi.n	f8a2 <usbdc_get_req+0x8a>
    f82c:	a201      	add	r2, pc, #4	; (adr r2, f834 <usbdc_get_req+0x1c>)
    f82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f832:	bf00      	nop
    f834:	0000f88b 	.word	0x0000f88b
    f838:	0000f8a3 	.word	0x0000f8a3
    f83c:	0000f8a3 	.word	0x0000f8a3
    f840:	0000f8a3 	.word	0x0000f8a3
    f844:	0000f8a3 	.word	0x0000f8a3
    f848:	0000f8a3 	.word	0x0000f8a3
    f84c:	0000f861 	.word	0x0000f861
    f850:	0000f8a3 	.word	0x0000f8a3
    f854:	0000f86f 	.word	0x0000f86f
    f858:	0000f8a3 	.word	0x0000f8a3
    f85c:	0000f899 	.word	0x0000f899
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    f860:	79fb      	ldrb	r3, [r7, #7]
    f862:	6839      	ldr	r1, [r7, #0]
    f864:	4618      	mov	r0, r3
    f866:	4b11      	ldr	r3, [pc, #68]	; (f8ac <usbdc_get_req+0x94>)
    f868:	4798      	blx	r3
    f86a:	4603      	mov	r3, r0
    f86c:	e01a      	b.n	f8a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    f86e:	4b10      	ldr	r3, [pc, #64]	; (f8b0 <usbdc_get_req+0x98>)
    f870:	695b      	ldr	r3, [r3, #20]
    f872:	4a0f      	ldr	r2, [pc, #60]	; (f8b0 <usbdc_get_req+0x98>)
    f874:	7ed2      	ldrb	r2, [r2, #27]
    f876:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    f878:	4b0d      	ldr	r3, [pc, #52]	; (f8b0 <usbdc_get_req+0x98>)
    f87a:	6959      	ldr	r1, [r3, #20]
    f87c:	79f8      	ldrb	r0, [r7, #7]
    f87e:	2300      	movs	r3, #0
    f880:	2201      	movs	r2, #1
    f882:	4c0c      	ldr	r4, [pc, #48]	; (f8b4 <usbdc_get_req+0x9c>)
    f884:	47a0      	blx	r4
		return true;
    f886:	2301      	movs	r3, #1
    f888:	e00c      	b.n	f8a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    f88a:	79fb      	ldrb	r3, [r7, #7]
    f88c:	6839      	ldr	r1, [r7, #0]
    f88e:	4618      	mov	r0, r3
    f890:	4b09      	ldr	r3, [pc, #36]	; (f8b8 <usbdc_get_req+0xa0>)
    f892:	4798      	blx	r3
    f894:	4603      	mov	r3, r0
    f896:	e005      	b.n	f8a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    f898:	6838      	ldr	r0, [r7, #0]
    f89a:	4b08      	ldr	r3, [pc, #32]	; (f8bc <usbdc_get_req+0xa4>)
    f89c:	4798      	blx	r3
    f89e:	4603      	mov	r3, r0
    f8a0:	e000      	b.n	f8a4 <usbdc_get_req+0x8c>
	default:
		return false;
    f8a2:	2300      	movs	r3, #0
	}
}
    f8a4:	4618      	mov	r0, r3
    f8a6:	370c      	adds	r7, #12
    f8a8:	46bd      	mov	sp, r7
    f8aa:	bd90      	pop	{r4, r7, pc}
    f8ac:	0000f6a1 	.word	0x0000f6a1
    f8b0:	20003550 	.word	0x20003550
    f8b4:	0000ffc5 	.word	0x0000ffc5
    f8b8:	0000f709 	.word	0x0000f709
    f8bc:	0000f789 	.word	0x0000f789

0000f8c0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f8c0:	b590      	push	{r4, r7, lr}
    f8c2:	b083      	sub	sp, #12
    f8c4:	af00      	add	r7, sp, #0
    f8c6:	4603      	mov	r3, r0
    f8c8:	6039      	str	r1, [r7, #0]
    f8ca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f8cc:	683b      	ldr	r3, [r7, #0]
    f8ce:	781b      	ldrb	r3, [r3, #0]
    f8d0:	f003 031f 	and.w	r3, r3, #31
    f8d4:	2b02      	cmp	r3, #2
    f8d6:	d116      	bne.n	f906 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f8d8:	683b      	ldr	r3, [r7, #0]
    f8da:	88db      	ldrh	r3, [r3, #6]
    f8dc:	b29b      	uxth	r3, r3
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d001      	beq.n	f8e6 <usbdc_clear_ftr_req+0x26>
			return false;
    f8e2:	2300      	movs	r3, #0
    f8e4:	e010      	b.n	f908 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    f8e6:	683b      	ldr	r3, [r7, #0]
    f8e8:	889b      	ldrh	r3, [r3, #4]
    f8ea:	b29b      	uxth	r3, r3
    f8ec:	b2db      	uxtb	r3, r3
    f8ee:	2100      	movs	r1, #0
    f8f0:	4618      	mov	r0, r3
    f8f2:	4b07      	ldr	r3, [pc, #28]	; (f910 <usbdc_clear_ftr_req+0x50>)
    f8f4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f8f6:	79f8      	ldrb	r0, [r7, #7]
    f8f8:	2301      	movs	r3, #1
    f8fa:	2200      	movs	r2, #0
    f8fc:	2100      	movs	r1, #0
    f8fe:	4c05      	ldr	r4, [pc, #20]	; (f914 <usbdc_clear_ftr_req+0x54>)
    f900:	47a0      	blx	r4
		return true;
    f902:	2301      	movs	r3, #1
    f904:	e000      	b.n	f908 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    f906:	2300      	movs	r3, #0
	}
}
    f908:	4618      	mov	r0, r3
    f90a:	370c      	adds	r7, #12
    f90c:	46bd      	mov	sp, r7
    f90e:	bd90      	pop	{r4, r7, pc}
    f910:	00006181 	.word	0x00006181
    f914:	0000ffc5 	.word	0x0000ffc5

0000f918 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f918:	b590      	push	{r4, r7, lr}
    f91a:	b083      	sub	sp, #12
    f91c:	af00      	add	r7, sp, #0
    f91e:	4603      	mov	r3, r0
    f920:	6039      	str	r1, [r7, #0]
    f922:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f924:	683b      	ldr	r3, [r7, #0]
    f926:	781b      	ldrb	r3, [r3, #0]
    f928:	f003 031f 	and.w	r3, r3, #31
    f92c:	2b02      	cmp	r3, #2
    f92e:	d116      	bne.n	f95e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f930:	683b      	ldr	r3, [r7, #0]
    f932:	88db      	ldrh	r3, [r3, #6]
    f934:	b29b      	uxth	r3, r3
    f936:	2b00      	cmp	r3, #0
    f938:	d001      	beq.n	f93e <usbdc_set_ftr_req+0x26>
			return false;
    f93a:	2300      	movs	r3, #0
    f93c:	e010      	b.n	f960 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    f93e:	683b      	ldr	r3, [r7, #0]
    f940:	889b      	ldrh	r3, [r3, #4]
    f942:	b29b      	uxth	r3, r3
    f944:	b2db      	uxtb	r3, r3
    f946:	2101      	movs	r1, #1
    f948:	4618      	mov	r0, r3
    f94a:	4b07      	ldr	r3, [pc, #28]	; (f968 <usbdc_set_ftr_req+0x50>)
    f94c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f94e:	79f8      	ldrb	r0, [r7, #7]
    f950:	2301      	movs	r3, #1
    f952:	2200      	movs	r2, #0
    f954:	2100      	movs	r1, #0
    f956:	4c05      	ldr	r4, [pc, #20]	; (f96c <usbdc_set_ftr_req+0x54>)
    f958:	47a0      	blx	r4
		return true;
    f95a:	2301      	movs	r3, #1
    f95c:	e000      	b.n	f960 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    f95e:	2300      	movs	r3, #0
	}
}
    f960:	4618      	mov	r0, r3
    f962:	370c      	adds	r7, #12
    f964:	46bd      	mov	sp, r7
    f966:	bd90      	pop	{r4, r7, pc}
    f968:	00006181 	.word	0x00006181
    f96c:	0000ffc5 	.word	0x0000ffc5

0000f970 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    f970:	b580      	push	{r7, lr}
    f972:	b082      	sub	sp, #8
    f974:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f976:	4b0a      	ldr	r3, [pc, #40]	; (f9a0 <usbdc_unconfig+0x30>)
    f978:	691b      	ldr	r3, [r3, #16]
    f97a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f97c:	e008      	b.n	f990 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    f97e:	687b      	ldr	r3, [r7, #4]
    f980:	685b      	ldr	r3, [r3, #4]
    f982:	2200      	movs	r2, #0
    f984:	2101      	movs	r1, #1
    f986:	6878      	ldr	r0, [r7, #4]
    f988:	4798      	blx	r3
		func = func->next;
    f98a:	687b      	ldr	r3, [r7, #4]
    f98c:	681b      	ldr	r3, [r3, #0]
    f98e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f990:	687b      	ldr	r3, [r7, #4]
    f992:	2b00      	cmp	r3, #0
    f994:	d1f3      	bne.n	f97e <usbdc_unconfig+0xe>
	}
}
    f996:	bf00      	nop
    f998:	3708      	adds	r7, #8
    f99a:	46bd      	mov	sp, r7
    f99c:	bd80      	pop	{r7, pc}
    f99e:	bf00      	nop
    f9a0:	20003550 	.word	0x20003550

0000f9a4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    f9a4:	b580      	push	{r7, lr}
    f9a6:	b088      	sub	sp, #32
    f9a8:	af00      	add	r7, sp, #0
    f9aa:	4603      	mov	r3, r0
    f9ac:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    f9ae:	2300      	movs	r3, #0
    f9b0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    f9b2:	23ff      	movs	r3, #255	; 0xff
    f9b4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    f9b6:	79fb      	ldrb	r3, [r7, #7]
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d103      	bne.n	f9c4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    f9bc:	4b2e      	ldr	r3, [pc, #184]	; (fa78 <usbdc_set_config+0xd4>)
    f9be:	4798      	blx	r3
		return true;
    f9c0:	2301      	movs	r3, #1
    f9c2:	e055      	b.n	fa70 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f9c4:	69bb      	ldr	r3, [r7, #24]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d10a      	bne.n	f9e0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    f9ca:	4b2c      	ldr	r3, [pc, #176]	; (fa7c <usbdc_set_config+0xd8>)
    f9cc:	681b      	ldr	r3, [r3, #0]
    f9ce:	6818      	ldr	r0, [r3, #0]
    f9d0:	4b2a      	ldr	r3, [pc, #168]	; (fa7c <usbdc_set_config+0xd8>)
    f9d2:	681b      	ldr	r3, [r3, #0]
    f9d4:	685b      	ldr	r3, [r3, #4]
    f9d6:	79fa      	ldrb	r2, [r7, #7]
    f9d8:	4619      	mov	r1, r3
    f9da:	4b29      	ldr	r3, [pc, #164]	; (fa80 <usbdc_set_config+0xdc>)
    f9dc:	4798      	blx	r3
    f9de:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    f9e0:	69bb      	ldr	r3, [r7, #24]
    f9e2:	2b00      	cmp	r3, #0
    f9e4:	d101      	bne.n	f9ea <usbdc_set_config+0x46>
		return false;
    f9e6:	2300      	movs	r3, #0
    f9e8:	e042      	b.n	fa70 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    f9ea:	69b8      	ldr	r0, [r7, #24]
    f9ec:	4b25      	ldr	r3, [pc, #148]	; (fa84 <usbdc_set_config+0xe0>)
    f9ee:	4798      	blx	r3
    f9f0:	4603      	mov	r3, r0
    f9f2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    f9f4:	8abb      	ldrh	r3, [r7, #20]
    f9f6:	69ba      	ldr	r2, [r7, #24]
    f9f8:	4413      	add	r3, r2
    f9fa:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    f9fc:	693b      	ldr	r3, [r7, #16]
    f9fe:	2204      	movs	r2, #4
    fa00:	4619      	mov	r1, r3
    fa02:	69b8      	ldr	r0, [r7, #24]
    fa04:	4b20      	ldr	r3, [pc, #128]	; (fa88 <usbdc_set_config+0xe4>)
    fa06:	4798      	blx	r3
    fa08:	4603      	mov	r3, r0
    fa0a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    fa0c:	e02c      	b.n	fa68 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    fa0e:	68fb      	ldr	r3, [r7, #12]
    fa10:	3302      	adds	r3, #2
    fa12:	781b      	ldrb	r3, [r3, #0]
    fa14:	7dfa      	ldrb	r2, [r7, #23]
    fa16:	429a      	cmp	r2, r3
    fa18:	d018      	beq.n	fa4c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    fa1a:	68fb      	ldr	r3, [r7, #12]
    fa1c:	789b      	ldrb	r3, [r3, #2]
    fa1e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    fa20:	4b16      	ldr	r3, [pc, #88]	; (fa7c <usbdc_set_config+0xd8>)
    fa22:	691b      	ldr	r3, [r3, #16]
    fa24:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fa26:	e00c      	b.n	fa42 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    fa28:	69fb      	ldr	r3, [r7, #28]
    fa2a:	685b      	ldr	r3, [r3, #4]
    fa2c:	f107 020c 	add.w	r2, r7, #12
    fa30:	2100      	movs	r1, #0
    fa32:	69f8      	ldr	r0, [r7, #28]
    fa34:	4798      	blx	r3
    fa36:	4603      	mov	r3, r0
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d006      	beq.n	fa4a <usbdc_set_config+0xa6>
					func = func->next;
    fa3c:	69fb      	ldr	r3, [r7, #28]
    fa3e:	681b      	ldr	r3, [r3, #0]
    fa40:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fa42:	69fb      	ldr	r3, [r7, #28]
    fa44:	2b00      	cmp	r3, #0
    fa46:	d1ef      	bne.n	fa28 <usbdc_set_config+0x84>
    fa48:	e000      	b.n	fa4c <usbdc_set_config+0xa8>
				} else {
					break;
    fa4a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    fa4c:	68fb      	ldr	r3, [r7, #12]
    fa4e:	4618      	mov	r0, r3
    fa50:	4b0e      	ldr	r3, [pc, #56]	; (fa8c <usbdc_set_config+0xe8>)
    fa52:	4798      	blx	r3
    fa54:	4603      	mov	r3, r0
    fa56:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fa58:	68fb      	ldr	r3, [r7, #12]
    fa5a:	6939      	ldr	r1, [r7, #16]
    fa5c:	2204      	movs	r2, #4
    fa5e:	4618      	mov	r0, r3
    fa60:	4b09      	ldr	r3, [pc, #36]	; (fa88 <usbdc_set_config+0xe4>)
    fa62:	4798      	blx	r3
    fa64:	4603      	mov	r3, r0
    fa66:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    fa68:	68fb      	ldr	r3, [r7, #12]
    fa6a:	2b00      	cmp	r3, #0
    fa6c:	d1cf      	bne.n	fa0e <usbdc_set_config+0x6a>
	}
	return true;
    fa6e:	2301      	movs	r3, #1
}
    fa70:	4618      	mov	r0, r3
    fa72:	3720      	adds	r7, #32
    fa74:	46bd      	mov	sp, r7
    fa76:	bd80      	pop	{r7, pc}
    fa78:	0000f971 	.word	0x0000f971
    fa7c:	20003550 	.word	0x20003550
    fa80:	00010315 	.word	0x00010315
    fa84:	0000f4c1 	.word	0x0000f4c1
    fa88:	00010255 	.word	0x00010255
    fa8c:	0000f49d 	.word	0x0000f49d

0000fa90 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    fa90:	b580      	push	{r7, lr}
    fa92:	b082      	sub	sp, #8
    fa94:	af00      	add	r7, sp, #0
    fa96:	4603      	mov	r3, r0
    fa98:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    fa9a:	79fb      	ldrb	r3, [r7, #7]
    fa9c:	4618      	mov	r0, r3
    fa9e:	4b03      	ldr	r3, [pc, #12]	; (faac <usbdc_set_address+0x1c>)
    faa0:	4798      	blx	r3
}
    faa2:	bf00      	nop
    faa4:	3708      	adds	r7, #8
    faa6:	46bd      	mov	sp, r7
    faa8:	bd80      	pop	{r7, pc}
    faaa:	bf00      	nop
    faac:	00005d9d 	.word	0x00005d9d

0000fab0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    fab0:	b590      	push	{r4, r7, lr}
    fab2:	b087      	sub	sp, #28
    fab4:	af00      	add	r7, sp, #0
    fab6:	4603      	mov	r3, r0
    fab8:	460a      	mov	r2, r1
    faba:	80fb      	strh	r3, [r7, #6]
    fabc:	4613      	mov	r3, r2
    fabe:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    fac0:	2300      	movs	r3, #0
    fac2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    fac4:	693b      	ldr	r3, [r7, #16]
    fac6:	2b00      	cmp	r3, #0
    fac8:	d10b      	bne.n	fae2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    faca:	4b43      	ldr	r3, [pc, #268]	; (fbd8 <usbdc_set_interface+0x128>)
    facc:	681b      	ldr	r3, [r3, #0]
    face:	6818      	ldr	r0, [r3, #0]
    fad0:	4b41      	ldr	r3, [pc, #260]	; (fbd8 <usbdc_set_interface+0x128>)
    fad2:	681b      	ldr	r3, [r3, #0]
    fad4:	6859      	ldr	r1, [r3, #4]
    fad6:	4b40      	ldr	r3, [pc, #256]	; (fbd8 <usbdc_set_interface+0x128>)
    fad8:	7edb      	ldrb	r3, [r3, #27]
    fada:	461a      	mov	r2, r3
    fadc:	4b3f      	ldr	r3, [pc, #252]	; (fbdc <usbdc_set_interface+0x12c>)
    fade:	4798      	blx	r3
    fae0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    fae2:	693b      	ldr	r3, [r7, #16]
    fae4:	2b00      	cmp	r3, #0
    fae6:	d101      	bne.n	faec <usbdc_set_interface+0x3c>
		return false;
    fae8:	2300      	movs	r3, #0
    faea:	e071      	b.n	fbd0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    faec:	693b      	ldr	r3, [r7, #16]
    faee:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    faf0:	6938      	ldr	r0, [r7, #16]
    faf2:	4b3b      	ldr	r3, [pc, #236]	; (fbe0 <usbdc_set_interface+0x130>)
    faf4:	4798      	blx	r3
    faf6:	4603      	mov	r3, r0
    faf8:	461a      	mov	r2, r3
    fafa:	693b      	ldr	r3, [r7, #16]
    fafc:	4413      	add	r3, r2
    fafe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    fb00:	68bb      	ldr	r3, [r7, #8]
    fb02:	68f9      	ldr	r1, [r7, #12]
    fb04:	2204      	movs	r2, #4
    fb06:	4618      	mov	r0, r3
    fb08:	4b36      	ldr	r3, [pc, #216]	; (fbe4 <usbdc_set_interface+0x134>)
    fb0a:	4798      	blx	r3
    fb0c:	6138      	str	r0, [r7, #16]
    fb0e:	693b      	ldr	r3, [r7, #16]
    fb10:	2b00      	cmp	r3, #0
    fb12:	d113      	bne.n	fb3c <usbdc_set_interface+0x8c>
		return false;
    fb14:	2300      	movs	r3, #0
    fb16:	e05b      	b.n	fbd0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    fb18:	68bb      	ldr	r3, [r7, #8]
    fb1a:	4618      	mov	r0, r3
    fb1c:	4b32      	ldr	r3, [pc, #200]	; (fbe8 <usbdc_set_interface+0x138>)
    fb1e:	4798      	blx	r3
    fb20:	4603      	mov	r3, r0
    fb22:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fb24:	68bb      	ldr	r3, [r7, #8]
    fb26:	68f9      	ldr	r1, [r7, #12]
    fb28:	2204      	movs	r2, #4
    fb2a:	4618      	mov	r0, r3
    fb2c:	4b2d      	ldr	r3, [pc, #180]	; (fbe4 <usbdc_set_interface+0x134>)
    fb2e:	4798      	blx	r3
    fb30:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    fb32:	693b      	ldr	r3, [r7, #16]
    fb34:	2b00      	cmp	r3, #0
    fb36:	d101      	bne.n	fb3c <usbdc_set_interface+0x8c>
			return false;
    fb38:	2300      	movs	r3, #0
    fb3a:	e049      	b.n	fbd0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    fb3c:	693b      	ldr	r3, [r7, #16]
    fb3e:	3302      	adds	r3, #2
    fb40:	781b      	ldrb	r3, [r3, #0]
    fb42:	b29b      	uxth	r3, r3
    fb44:	88ba      	ldrh	r2, [r7, #4]
    fb46:	429a      	cmp	r2, r3
    fb48:	d1e6      	bne.n	fb18 <usbdc_set_interface+0x68>
    fb4a:	693b      	ldr	r3, [r7, #16]
    fb4c:	3303      	adds	r3, #3
    fb4e:	781b      	ldrb	r3, [r3, #0]
    fb50:	b29b      	uxth	r3, r3
    fb52:	88fa      	ldrh	r2, [r7, #6]
    fb54:	429a      	cmp	r2, r3
    fb56:	d1df      	bne.n	fb18 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    fb58:	693b      	ldr	r3, [r7, #16]
    fb5a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    fb5c:	4b1e      	ldr	r3, [pc, #120]	; (fbd8 <usbdc_set_interface+0x128>)
    fb5e:	691b      	ldr	r3, [r3, #16]
    fb60:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    fb62:	e031      	b.n	fbc8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    fb64:	697b      	ldr	r3, [r7, #20]
    fb66:	685b      	ldr	r3, [r3, #4]
    fb68:	f107 0208 	add.w	r2, r7, #8
    fb6c:	2101      	movs	r1, #1
    fb6e:	6978      	ldr	r0, [r7, #20]
    fb70:	4798      	blx	r3
    fb72:	4603      	mov	r3, r0
    fb74:	2b00      	cmp	r3, #0
    fb76:	d003      	beq.n	fb80 <usbdc_set_interface+0xd0>
			func = func->next;
    fb78:	697b      	ldr	r3, [r7, #20]
    fb7a:	681b      	ldr	r3, [r3, #0]
    fb7c:	617b      	str	r3, [r7, #20]
    fb7e:	e023      	b.n	fbc8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    fb80:	697b      	ldr	r3, [r7, #20]
    fb82:	685b      	ldr	r3, [r3, #4]
    fb84:	f107 0208 	add.w	r2, r7, #8
    fb88:	2100      	movs	r1, #0
    fb8a:	6978      	ldr	r0, [r7, #20]
    fb8c:	4798      	blx	r3
    fb8e:	4603      	mov	r3, r0
    fb90:	2b00      	cmp	r3, #0
    fb92:	d117      	bne.n	fbc4 <usbdc_set_interface+0x114>
			if (alt_set) {
    fb94:	88fb      	ldrh	r3, [r7, #6]
    fb96:	2b00      	cmp	r3, #0
    fb98:	d00c      	beq.n	fbb4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    fb9a:	4b0f      	ldr	r3, [pc, #60]	; (fbd8 <usbdc_set_interface+0x128>)
    fb9c:	7f5b      	ldrb	r3, [r3, #29]
    fb9e:	b25a      	sxtb	r2, r3
    fba0:	88bb      	ldrh	r3, [r7, #4]
    fba2:	2101      	movs	r1, #1
    fba4:	fa01 f303 	lsl.w	r3, r1, r3
    fba8:	b25b      	sxtb	r3, r3
    fbaa:	4313      	orrs	r3, r2
    fbac:	b25b      	sxtb	r3, r3
    fbae:	b2da      	uxtb	r2, r3
    fbb0:	4b09      	ldr	r3, [pc, #36]	; (fbd8 <usbdc_set_interface+0x128>)
    fbb2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    fbb4:	2300      	movs	r3, #0
    fbb6:	2200      	movs	r2, #0
    fbb8:	2100      	movs	r1, #0
    fbba:	2000      	movs	r0, #0
    fbbc:	4c0b      	ldr	r4, [pc, #44]	; (fbec <usbdc_set_interface+0x13c>)
    fbbe:	47a0      	blx	r4
			return true;
    fbc0:	2301      	movs	r3, #1
    fbc2:	e005      	b.n	fbd0 <usbdc_set_interface+0x120>
		} else {
			return false;
    fbc4:	2300      	movs	r3, #0
    fbc6:	e003      	b.n	fbd0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    fbc8:	697b      	ldr	r3, [r7, #20]
    fbca:	2b00      	cmp	r3, #0
    fbcc:	d1ca      	bne.n	fb64 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    fbce:	2300      	movs	r3, #0
}
    fbd0:	4618      	mov	r0, r3
    fbd2:	371c      	adds	r7, #28
    fbd4:	46bd      	mov	sp, r7
    fbd6:	bd90      	pop	{r4, r7, pc}
    fbd8:	20003550 	.word	0x20003550
    fbdc:	00010315 	.word	0x00010315
    fbe0:	0000f4c1 	.word	0x0000f4c1
    fbe4:	00010255 	.word	0x00010255
    fbe8:	0000f49d 	.word	0x0000f49d
    fbec:	0000ffc5 	.word	0x0000ffc5

0000fbf0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    fbf0:	b590      	push	{r4, r7, lr}
    fbf2:	b083      	sub	sp, #12
    fbf4:	af00      	add	r7, sp, #0
    fbf6:	4603      	mov	r3, r0
    fbf8:	6039      	str	r1, [r7, #0]
    fbfa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    fbfc:	683b      	ldr	r3, [r7, #0]
    fbfe:	785b      	ldrb	r3, [r3, #1]
    fc00:	3b01      	subs	r3, #1
    fc02:	2b0a      	cmp	r3, #10
    fc04:	d85b      	bhi.n	fcbe <usbdc_set_req+0xce>
    fc06:	a201      	add	r2, pc, #4	; (adr r2, fc0c <usbdc_set_req+0x1c>)
    fc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fc0c:	0000fc8b 	.word	0x0000fc8b
    fc10:	0000fcbf 	.word	0x0000fcbf
    fc14:	0000fc99 	.word	0x0000fc99
    fc18:	0000fcbf 	.word	0x0000fcbf
    fc1c:	0000fc39 	.word	0x0000fc39
    fc20:	0000fcbf 	.word	0x0000fcbf
    fc24:	0000fcbf 	.word	0x0000fcbf
    fc28:	0000fcbf 	.word	0x0000fcbf
    fc2c:	0000fc53 	.word	0x0000fc53
    fc30:	0000fcbf 	.word	0x0000fcbf
    fc34:	0000fca7 	.word	0x0000fca7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fc38:	79f8      	ldrb	r0, [r7, #7]
    fc3a:	2301      	movs	r3, #1
    fc3c:	2200      	movs	r2, #0
    fc3e:	2100      	movs	r1, #0
    fc40:	4c21      	ldr	r4, [pc, #132]	; (fcc8 <usbdc_set_req+0xd8>)
    fc42:	47a0      	blx	r4
    fc44:	4603      	mov	r3, r0
    fc46:	2b00      	cmp	r3, #0
    fc48:	bf0c      	ite	eq
    fc4a:	2301      	moveq	r3, #1
    fc4c:	2300      	movne	r3, #0
    fc4e:	b2db      	uxtb	r3, r3
    fc50:	e036      	b.n	fcc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    fc52:	683b      	ldr	r3, [r7, #0]
    fc54:	885b      	ldrh	r3, [r3, #2]
    fc56:	b29b      	uxth	r3, r3
    fc58:	b2db      	uxtb	r3, r3
    fc5a:	4618      	mov	r0, r3
    fc5c:	4b1b      	ldr	r3, [pc, #108]	; (fccc <usbdc_set_req+0xdc>)
    fc5e:	4798      	blx	r3
    fc60:	4603      	mov	r3, r0
    fc62:	f083 0301 	eor.w	r3, r3, #1
    fc66:	b2db      	uxtb	r3, r3
    fc68:	2b00      	cmp	r3, #0
    fc6a:	d001      	beq.n	fc70 <usbdc_set_req+0x80>
			return false;
    fc6c:	2300      	movs	r3, #0
    fc6e:	e027      	b.n	fcc0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fc70:	79f8      	ldrb	r0, [r7, #7]
    fc72:	2301      	movs	r3, #1
    fc74:	2200      	movs	r2, #0
    fc76:	2100      	movs	r1, #0
    fc78:	4c13      	ldr	r4, [pc, #76]	; (fcc8 <usbdc_set_req+0xd8>)
    fc7a:	47a0      	blx	r4
    fc7c:	4603      	mov	r3, r0
    fc7e:	2b00      	cmp	r3, #0
    fc80:	bf0c      	ite	eq
    fc82:	2301      	moveq	r3, #1
    fc84:	2300      	movne	r3, #0
    fc86:	b2db      	uxtb	r3, r3
    fc88:	e01a      	b.n	fcc0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    fc8a:	79fb      	ldrb	r3, [r7, #7]
    fc8c:	6839      	ldr	r1, [r7, #0]
    fc8e:	4618      	mov	r0, r3
    fc90:	4b0f      	ldr	r3, [pc, #60]	; (fcd0 <usbdc_set_req+0xe0>)
    fc92:	4798      	blx	r3
    fc94:	4603      	mov	r3, r0
    fc96:	e013      	b.n	fcc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    fc98:	79fb      	ldrb	r3, [r7, #7]
    fc9a:	6839      	ldr	r1, [r7, #0]
    fc9c:	4618      	mov	r0, r3
    fc9e:	4b0d      	ldr	r3, [pc, #52]	; (fcd4 <usbdc_set_req+0xe4>)
    fca0:	4798      	blx	r3
    fca2:	4603      	mov	r3, r0
    fca4:	e00c      	b.n	fcc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    fca6:	683b      	ldr	r3, [r7, #0]
    fca8:	885b      	ldrh	r3, [r3, #2]
    fcaa:	b29a      	uxth	r2, r3
    fcac:	683b      	ldr	r3, [r7, #0]
    fcae:	889b      	ldrh	r3, [r3, #4]
    fcb0:	b29b      	uxth	r3, r3
    fcb2:	4619      	mov	r1, r3
    fcb4:	4610      	mov	r0, r2
    fcb6:	4b08      	ldr	r3, [pc, #32]	; (fcd8 <usbdc_set_req+0xe8>)
    fcb8:	4798      	blx	r3
    fcba:	4603      	mov	r3, r0
    fcbc:	e000      	b.n	fcc0 <usbdc_set_req+0xd0>
	default:
		return false;
    fcbe:	2300      	movs	r3, #0
	}
}
    fcc0:	4618      	mov	r0, r3
    fcc2:	370c      	adds	r7, #12
    fcc4:	46bd      	mov	sp, r7
    fcc6:	bd90      	pop	{r4, r7, pc}
    fcc8:	0000ffc5 	.word	0x0000ffc5
    fccc:	0000f9a5 	.word	0x0000f9a5
    fcd0:	0000f8c1 	.word	0x0000f8c1
    fcd4:	0000f919 	.word	0x0000f919
    fcd8:	0000fab1 	.word	0x0000fab1

0000fcdc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    fcdc:	b580      	push	{r7, lr}
    fcde:	b082      	sub	sp, #8
    fce0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    fce2:	4b0a      	ldr	r3, [pc, #40]	; (fd0c <usbdc_sof_notify+0x30>)
    fce4:	685b      	ldr	r3, [r3, #4]
    fce6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    fce8:	e009      	b.n	fcfe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    fcea:	687b      	ldr	r3, [r7, #4]
    fcec:	685b      	ldr	r3, [r3, #4]
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d002      	beq.n	fcf8 <usbdc_sof_notify+0x1c>
			sof->cb();
    fcf2:	687b      	ldr	r3, [r7, #4]
    fcf4:	685b      	ldr	r3, [r3, #4]
    fcf6:	4798      	blx	r3
		}
		sof = sof->next;
    fcf8:	687b      	ldr	r3, [r7, #4]
    fcfa:	681b      	ldr	r3, [r3, #0]
    fcfc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    fcfe:	687b      	ldr	r3, [r7, #4]
    fd00:	2b00      	cmp	r3, #0
    fd02:	d1f2      	bne.n	fcea <usbdc_sof_notify+0xe>
	}
}
    fd04:	bf00      	nop
    fd06:	3708      	adds	r7, #8
    fd08:	46bd      	mov	sp, r7
    fd0a:	bd80      	pop	{r7, pc}
    fd0c:	20003550 	.word	0x20003550

0000fd10 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    fd10:	b580      	push	{r7, lr}
    fd12:	b084      	sub	sp, #16
    fd14:	af00      	add	r7, sp, #0
    fd16:	4603      	mov	r3, r0
    fd18:	6039      	str	r1, [r7, #0]
    fd1a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    fd1c:	4b0b      	ldr	r3, [pc, #44]	; (fd4c <usbdc_change_notify+0x3c>)
    fd1e:	68db      	ldr	r3, [r3, #12]
    fd20:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    fd22:	e00c      	b.n	fd3e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    fd24:	68fb      	ldr	r3, [r7, #12]
    fd26:	685b      	ldr	r3, [r3, #4]
    fd28:	2b00      	cmp	r3, #0
    fd2a:	d005      	beq.n	fd38 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    fd2c:	68fb      	ldr	r3, [r7, #12]
    fd2e:	685b      	ldr	r3, [r3, #4]
    fd30:	79fa      	ldrb	r2, [r7, #7]
    fd32:	6839      	ldr	r1, [r7, #0]
    fd34:	4610      	mov	r0, r2
    fd36:	4798      	blx	r3
		}
		cg = cg->next;
    fd38:	68fb      	ldr	r3, [r7, #12]
    fd3a:	681b      	ldr	r3, [r3, #0]
    fd3c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    fd3e:	68fb      	ldr	r3, [r7, #12]
    fd40:	2b00      	cmp	r3, #0
    fd42:	d1ef      	bne.n	fd24 <usbdc_change_notify+0x14>
	}
}
    fd44:	bf00      	nop
    fd46:	3710      	adds	r7, #16
    fd48:	46bd      	mov	sp, r7
    fd4a:	bd80      	pop	{r7, pc}
    fd4c:	20003550 	.word	0x20003550

0000fd50 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    fd50:	b580      	push	{r7, lr}
    fd52:	b084      	sub	sp, #16
    fd54:	af00      	add	r7, sp, #0
    fd56:	4603      	mov	r3, r0
    fd58:	6039      	str	r1, [r7, #0]
    fd5a:	71fb      	strb	r3, [r7, #7]
    fd5c:	4613      	mov	r3, r2
    fd5e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    fd60:	4b12      	ldr	r3, [pc, #72]	; (fdac <usbdc_request_handler+0x5c>)
    fd62:	689b      	ldr	r3, [r3, #8]
    fd64:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    fd66:	e019      	b.n	fd9c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    fd68:	68fb      	ldr	r3, [r7, #12]
    fd6a:	685b      	ldr	r3, [r3, #4]
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d012      	beq.n	fd96 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    fd70:	68fb      	ldr	r3, [r7, #12]
    fd72:	685b      	ldr	r3, [r3, #4]
    fd74:	79ba      	ldrb	r2, [r7, #6]
    fd76:	79f8      	ldrb	r0, [r7, #7]
    fd78:	6839      	ldr	r1, [r7, #0]
    fd7a:	4798      	blx	r3
    fd7c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    fd7e:	68bb      	ldr	r3, [r7, #8]
    fd80:	2b00      	cmp	r3, #0
    fd82:	d101      	bne.n	fd88 <usbdc_request_handler+0x38>
				return true;
    fd84:	2301      	movs	r3, #1
    fd86:	e00d      	b.n	fda4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    fd88:	68bb      	ldr	r3, [r7, #8]
    fd8a:	f113 0f0a 	cmn.w	r3, #10
    fd8e:	d002      	beq.n	fd96 <usbdc_request_handler+0x46>
				return -1;
    fd90:	f04f 33ff 	mov.w	r3, #4294967295
    fd94:	e006      	b.n	fda4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    fd96:	68fb      	ldr	r3, [r7, #12]
    fd98:	681b      	ldr	r3, [r3, #0]
    fd9a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    fd9c:	68fb      	ldr	r3, [r7, #12]
    fd9e:	2b00      	cmp	r3, #0
    fda0:	d1e2      	bne.n	fd68 <usbdc_request_handler+0x18>
	}
	return false;
    fda2:	2300      	movs	r3, #0
}
    fda4:	4618      	mov	r0, r3
    fda6:	3710      	adds	r7, #16
    fda8:	46bd      	mov	sp, r7
    fdaa:	bd80      	pop	{r7, pc}
    fdac:	20003550 	.word	0x20003550

0000fdb0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    fdb0:	b580      	push	{r7, lr}
    fdb2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    fdb4:	4b01      	ldr	r3, [pc, #4]	; (fdbc <usbd_sof_cb+0xc>)
    fdb6:	4798      	blx	r3
}
    fdb8:	bf00      	nop
    fdba:	bd80      	pop	{r7, pc}
    fdbc:	0000fcdd 	.word	0x0000fcdd

0000fdc0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    fdc0:	b580      	push	{r7, lr}
    fdc2:	b082      	sub	sp, #8
    fdc4:	af00      	add	r7, sp, #0
    fdc6:	4603      	mov	r3, r0
    fdc8:	6039      	str	r1, [r7, #0]
    fdca:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    fdcc:	79fb      	ldrb	r3, [r7, #7]
    fdce:	2200      	movs	r2, #0
    fdd0:	6839      	ldr	r1, [r7, #0]
    fdd2:	4618      	mov	r0, r3
    fdd4:	4b14      	ldr	r3, [pc, #80]	; (fe28 <usbdc_cb_ctl_req+0x68>)
    fdd6:	4798      	blx	r3
    fdd8:	4603      	mov	r3, r0
    fdda:	f1b3 3fff 	cmp.w	r3, #4294967295
    fdde:	d00b      	beq.n	fdf8 <usbdc_cb_ctl_req+0x38>
    fde0:	2b01      	cmp	r3, #1
    fde2:	d007      	beq.n	fdf4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    fde4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    fde6:	683b      	ldr	r3, [r7, #0]
    fde8:	781b      	ldrb	r3, [r3, #0]
    fdea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d007      	beq.n	fe02 <usbdc_cb_ctl_req+0x42>
    fdf2:	e003      	b.n	fdfc <usbdc_cb_ctl_req+0x3c>
		return true;
    fdf4:	2301      	movs	r3, #1
    fdf6:	e013      	b.n	fe20 <usbdc_cb_ctl_req+0x60>
		return false;
    fdf8:	2300      	movs	r3, #0
    fdfa:	e011      	b.n	fe20 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    fdfc:	2b80      	cmp	r3, #128	; 0x80
    fdfe:	d007      	beq.n	fe10 <usbdc_cb_ctl_req+0x50>
    fe00:	e00d      	b.n	fe1e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    fe02:	79fb      	ldrb	r3, [r7, #7]
    fe04:	6839      	ldr	r1, [r7, #0]
    fe06:	4618      	mov	r0, r3
    fe08:	4b08      	ldr	r3, [pc, #32]	; (fe2c <usbdc_cb_ctl_req+0x6c>)
    fe0a:	4798      	blx	r3
    fe0c:	4603      	mov	r3, r0
    fe0e:	e007      	b.n	fe20 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    fe10:	79fb      	ldrb	r3, [r7, #7]
    fe12:	6839      	ldr	r1, [r7, #0]
    fe14:	4618      	mov	r0, r3
    fe16:	4b06      	ldr	r3, [pc, #24]	; (fe30 <usbdc_cb_ctl_req+0x70>)
    fe18:	4798      	blx	r3
    fe1a:	4603      	mov	r3, r0
    fe1c:	e000      	b.n	fe20 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    fe1e:	2300      	movs	r3, #0
	}
}
    fe20:	4618      	mov	r0, r3
    fe22:	3708      	adds	r7, #8
    fe24:	46bd      	mov	sp, r7
    fe26:	bd80      	pop	{r7, pc}
    fe28:	0000fd51 	.word	0x0000fd51
    fe2c:	0000fbf1 	.word	0x0000fbf1
    fe30:	0000f819 	.word	0x0000f819

0000fe34 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    fe34:	b580      	push	{r7, lr}
    fe36:	b082      	sub	sp, #8
    fe38:	af00      	add	r7, sp, #0
    fe3a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    fe3c:	687b      	ldr	r3, [r7, #4]
    fe3e:	781b      	ldrb	r3, [r3, #0]
    fe40:	2b00      	cmp	r3, #0
    fe42:	d135      	bne.n	feb0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    fe44:	687b      	ldr	r3, [r7, #4]
    fe46:	785b      	ldrb	r3, [r3, #1]
    fe48:	2b05      	cmp	r3, #5
    fe4a:	d019      	beq.n	fe80 <usbdc_ctrl_status_end+0x4c>
    fe4c:	2b09      	cmp	r3, #9
    fe4e:	d000      	beq.n	fe52 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    fe50:	e02f      	b.n	feb2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    fe52:	687b      	ldr	r3, [r7, #4]
    fe54:	885b      	ldrh	r3, [r3, #2]
    fe56:	b29b      	uxth	r3, r3
    fe58:	b2da      	uxtb	r2, r3
    fe5a:	4b17      	ldr	r3, [pc, #92]	; (feb8 <usbdc_ctrl_status_end+0x84>)
    fe5c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    fe5e:	687b      	ldr	r3, [r7, #4]
    fe60:	885b      	ldrh	r3, [r3, #2]
    fe62:	b29b      	uxth	r3, r3
    fe64:	2b00      	cmp	r3, #0
    fe66:	d001      	beq.n	fe6c <usbdc_ctrl_status_end+0x38>
    fe68:	2204      	movs	r2, #4
    fe6a:	e000      	b.n	fe6e <usbdc_ctrl_status_end+0x3a>
    fe6c:	2203      	movs	r2, #3
    fe6e:	4b12      	ldr	r3, [pc, #72]	; (feb8 <usbdc_ctrl_status_end+0x84>)
    fe70:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    fe72:	4b11      	ldr	r3, [pc, #68]	; (feb8 <usbdc_ctrl_status_end+0x84>)
    fe74:	7e9b      	ldrb	r3, [r3, #26]
    fe76:	4619      	mov	r1, r3
    fe78:	2001      	movs	r0, #1
    fe7a:	4b10      	ldr	r3, [pc, #64]	; (febc <usbdc_ctrl_status_end+0x88>)
    fe7c:	4798      	blx	r3
		break;
    fe7e:	e018      	b.n	feb2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    fe80:	687b      	ldr	r3, [r7, #4]
    fe82:	885b      	ldrh	r3, [r3, #2]
    fe84:	b29b      	uxth	r3, r3
    fe86:	b2db      	uxtb	r3, r3
    fe88:	4618      	mov	r0, r3
    fe8a:	4b0d      	ldr	r3, [pc, #52]	; (fec0 <usbdc_ctrl_status_end+0x8c>)
    fe8c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    fe8e:	687b      	ldr	r3, [r7, #4]
    fe90:	885b      	ldrh	r3, [r3, #2]
    fe92:	b29b      	uxth	r3, r3
    fe94:	2b00      	cmp	r3, #0
    fe96:	d001      	beq.n	fe9c <usbdc_ctrl_status_end+0x68>
    fe98:	2203      	movs	r2, #3
    fe9a:	e000      	b.n	fe9e <usbdc_ctrl_status_end+0x6a>
    fe9c:	2202      	movs	r2, #2
    fe9e:	4b06      	ldr	r3, [pc, #24]	; (feb8 <usbdc_ctrl_status_end+0x84>)
    fea0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    fea2:	4b05      	ldr	r3, [pc, #20]	; (feb8 <usbdc_ctrl_status_end+0x84>)
    fea4:	7e9b      	ldrb	r3, [r3, #26]
    fea6:	4619      	mov	r1, r3
    fea8:	2001      	movs	r0, #1
    feaa:	4b04      	ldr	r3, [pc, #16]	; (febc <usbdc_ctrl_status_end+0x88>)
    feac:	4798      	blx	r3
		break;
    feae:	e000      	b.n	feb2 <usbdc_ctrl_status_end+0x7e>
		return;
    feb0:	bf00      	nop
	}
}
    feb2:	3708      	adds	r7, #8
    feb4:	46bd      	mov	sp, r7
    feb6:	bd80      	pop	{r7, pc}
    feb8:	20003550 	.word	0x20003550
    febc:	0000fd11 	.word	0x0000fd11
    fec0:	0000fa91 	.word	0x0000fa91

0000fec4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    fec4:	b580      	push	{r7, lr}
    fec6:	b082      	sub	sp, #8
    fec8:	af00      	add	r7, sp, #0
    feca:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    fecc:	2201      	movs	r2, #1
    fece:	6879      	ldr	r1, [r7, #4]
    fed0:	2000      	movs	r0, #0
    fed2:	4b03      	ldr	r3, [pc, #12]	; (fee0 <usbdc_ctrl_data_end+0x1c>)
    fed4:	4798      	blx	r3
	return false;
    fed6:	2300      	movs	r3, #0
}
    fed8:	4618      	mov	r0, r3
    feda:	3708      	adds	r7, #8
    fedc:	46bd      	mov	sp, r7
    fede:	bd80      	pop	{r7, pc}
    fee0:	0000fd51 	.word	0x0000fd51

0000fee4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    fee4:	b580      	push	{r7, lr}
    fee6:	b082      	sub	sp, #8
    fee8:	af00      	add	r7, sp, #0
    feea:	4603      	mov	r3, r0
    feec:	603a      	str	r2, [r7, #0]
    feee:	71fb      	strb	r3, [r7, #7]
    fef0:	460b      	mov	r3, r1
    fef2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    fef4:	79bb      	ldrb	r3, [r7, #6]
    fef6:	2b00      	cmp	r3, #0
    fef8:	d002      	beq.n	ff00 <usbdc_cb_ctl_done+0x1c>
    fefa:	2b01      	cmp	r3, #1
    fefc:	d004      	beq.n	ff08 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    fefe:	e008      	b.n	ff12 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ff00:	6838      	ldr	r0, [r7, #0]
    ff02:	4b06      	ldr	r3, [pc, #24]	; (ff1c <usbdc_cb_ctl_done+0x38>)
    ff04:	4798      	blx	r3
		break;
    ff06:	e004      	b.n	ff12 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ff08:	6838      	ldr	r0, [r7, #0]
    ff0a:	4b05      	ldr	r3, [pc, #20]	; (ff20 <usbdc_cb_ctl_done+0x3c>)
    ff0c:	4798      	blx	r3
    ff0e:	4603      	mov	r3, r0
    ff10:	e000      	b.n	ff14 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ff12:	2300      	movs	r3, #0
}
    ff14:	4618      	mov	r0, r3
    ff16:	3708      	adds	r7, #8
    ff18:	46bd      	mov	sp, r7
    ff1a:	bd80      	pop	{r7, pc}
    ff1c:	0000fe35 	.word	0x0000fe35
    ff20:	0000fec5 	.word	0x0000fec5

0000ff24 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ff24:	b580      	push	{r7, lr}
    ff26:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ff28:	4b10      	ldr	r3, [pc, #64]	; (ff6c <usbdc_reset+0x48>)
    ff2a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ff2c:	4b10      	ldr	r3, [pc, #64]	; (ff70 <usbdc_reset+0x4c>)
    ff2e:	2202      	movs	r2, #2
    ff30:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ff32:	4b0f      	ldr	r3, [pc, #60]	; (ff70 <usbdc_reset+0x4c>)
    ff34:	2200      	movs	r2, #0
    ff36:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    ff38:	4b0d      	ldr	r3, [pc, #52]	; (ff70 <usbdc_reset+0x4c>)
    ff3a:	2200      	movs	r2, #0
    ff3c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ff3e:	2000      	movs	r0, #0
    ff40:	4b0c      	ldr	r3, [pc, #48]	; (ff74 <usbdc_reset+0x50>)
    ff42:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ff44:	4b0a      	ldr	r3, [pc, #40]	; (ff70 <usbdc_reset+0x4c>)
    ff46:	7f1b      	ldrb	r3, [r3, #28]
    ff48:	4618      	mov	r0, r3
    ff4a:	4b0b      	ldr	r3, [pc, #44]	; (ff78 <usbdc_reset+0x54>)
    ff4c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ff4e:	4a0b      	ldr	r2, [pc, #44]	; (ff7c <usbdc_reset+0x58>)
    ff50:	2100      	movs	r1, #0
    ff52:	2000      	movs	r0, #0
    ff54:	4b0a      	ldr	r3, [pc, #40]	; (ff80 <usbdc_reset+0x5c>)
    ff56:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ff58:	4a0a      	ldr	r2, [pc, #40]	; (ff84 <usbdc_reset+0x60>)
    ff5a:	2102      	movs	r1, #2
    ff5c:	2000      	movs	r0, #0
    ff5e:	4b08      	ldr	r3, [pc, #32]	; (ff80 <usbdc_reset+0x5c>)
    ff60:	4798      	blx	r3
	usb_d_ep_enable(0);
    ff62:	2000      	movs	r0, #0
    ff64:	4b08      	ldr	r3, [pc, #32]	; (ff88 <usbdc_reset+0x64>)
    ff66:	4798      	blx	r3
}
    ff68:	bf00      	nop
    ff6a:	bd80      	pop	{r7, pc}
    ff6c:	0000f971 	.word	0x0000f971
    ff70:	20003550 	.word	0x20003550
    ff74:	00005e81 	.word	0x00005e81
    ff78:	00005dbd 	.word	0x00005dbd
    ff7c:	0000fdc1 	.word	0x0000fdc1
    ff80:	000061d5 	.word	0x000061d5
    ff84:	0000fee5 	.word	0x0000fee5
    ff88:	00005ed1 	.word	0x00005ed1

0000ff8c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ff8c:	b580      	push	{r7, lr}
    ff8e:	b082      	sub	sp, #8
    ff90:	af00      	add	r7, sp, #0
    ff92:	4603      	mov	r3, r0
    ff94:	6039      	str	r1, [r7, #0]
    ff96:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    ff98:	79fb      	ldrb	r3, [r7, #7]
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d002      	beq.n	ffa4 <usbd_event_cb+0x18>
    ff9e:	2b01      	cmp	r3, #1
    ffa0:	d005      	beq.n	ffae <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    ffa2:	e007      	b.n	ffb4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    ffa4:	6839      	ldr	r1, [r7, #0]
    ffa6:	2000      	movs	r0, #0
    ffa8:	4b04      	ldr	r3, [pc, #16]	; (ffbc <usbd_event_cb+0x30>)
    ffaa:	4798      	blx	r3
		break;
    ffac:	e002      	b.n	ffb4 <usbd_event_cb+0x28>
		usbdc_reset();
    ffae:	4b04      	ldr	r3, [pc, #16]	; (ffc0 <usbd_event_cb+0x34>)
    ffb0:	4798      	blx	r3
		break;
    ffb2:	bf00      	nop
	}
}
    ffb4:	bf00      	nop
    ffb6:	3708      	adds	r7, #8
    ffb8:	46bd      	mov	sp, r7
    ffba:	bd80      	pop	{r7, pc}
    ffbc:	0000fd11 	.word	0x0000fd11
    ffc0:	0000ff25 	.word	0x0000ff25

0000ffc4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ffc4:	b580      	push	{r7, lr}
    ffc6:	b088      	sub	sp, #32
    ffc8:	af00      	add	r7, sp, #0
    ffca:	60b9      	str	r1, [r7, #8]
    ffcc:	607a      	str	r2, [r7, #4]
    ffce:	461a      	mov	r2, r3
    ffd0:	4603      	mov	r3, r0
    ffd2:	73fb      	strb	r3, [r7, #15]
    ffd4:	4613      	mov	r3, r2
    ffd6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ffd8:	68bb      	ldr	r3, [r7, #8]
    ffda:	617b      	str	r3, [r7, #20]
    ffdc:	687b      	ldr	r3, [r7, #4]
    ffde:	61bb      	str	r3, [r7, #24]
    ffe0:	7bfb      	ldrb	r3, [r7, #15]
    ffe2:	773b      	strb	r3, [r7, #28]
    ffe4:	7bbb      	ldrb	r3, [r7, #14]
    ffe6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ffe8:	f107 0314 	add.w	r3, r7, #20
    ffec:	4618      	mov	r0, r3
    ffee:	4b03      	ldr	r3, [pc, #12]	; (fffc <usbdc_xfer+0x38>)
    fff0:	4798      	blx	r3
    fff2:	4603      	mov	r3, r0
}
    fff4:	4618      	mov	r0, r3
    fff6:	3720      	adds	r7, #32
    fff8:	46bd      	mov	sp, r7
    fffa:	bd80      	pop	{r7, pc}
    fffc:	00005f41 	.word	0x00005f41

00010000 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   10000:	b580      	push	{r7, lr}
   10002:	b082      	sub	sp, #8
   10004:	af00      	add	r7, sp, #0
   10006:	4603      	mov	r3, r0
   10008:	6039      	str	r1, [r7, #0]
   1000a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   1000c:	79fb      	ldrb	r3, [r7, #7]
   1000e:	2b01      	cmp	r3, #1
   10010:	d009      	beq.n	10026 <usbdc_register_handler+0x26>
   10012:	2b02      	cmp	r3, #2
   10014:	d00c      	beq.n	10030 <usbdc_register_handler+0x30>
   10016:	2b00      	cmp	r3, #0
   10018:	d000      	beq.n	1001c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   1001a:	e00e      	b.n	1003a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1001c:	6839      	ldr	r1, [r7, #0]
   1001e:	4809      	ldr	r0, [pc, #36]	; (10044 <STACK_SIZE+0x44>)
   10020:	4b09      	ldr	r3, [pc, #36]	; (10048 <STACK_SIZE+0x48>)
   10022:	4798      	blx	r3
		break;
   10024:	e009      	b.n	1003a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10026:	6839      	ldr	r1, [r7, #0]
   10028:	4808      	ldr	r0, [pc, #32]	; (1004c <STACK_SIZE+0x4c>)
   1002a:	4b07      	ldr	r3, [pc, #28]	; (10048 <STACK_SIZE+0x48>)
   1002c:	4798      	blx	r3
		break;
   1002e:	e004      	b.n	1003a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10030:	6839      	ldr	r1, [r7, #0]
   10032:	4807      	ldr	r0, [pc, #28]	; (10050 <STACK_SIZE+0x50>)
   10034:	4b04      	ldr	r3, [pc, #16]	; (10048 <STACK_SIZE+0x48>)
   10036:	4798      	blx	r3
		break;
   10038:	bf00      	nop
	}
}
   1003a:	bf00      	nop
   1003c:	3708      	adds	r7, #8
   1003e:	46bd      	mov	sp, r7
   10040:	bd80      	pop	{r7, pc}
   10042:	bf00      	nop
   10044:	20003554 	.word	0x20003554
   10048:	0000632d 	.word	0x0000632d
   1004c:	20003558 	.word	0x20003558
   10050:	2000355c 	.word	0x2000355c

00010054 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   10054:	b580      	push	{r7, lr}
   10056:	b084      	sub	sp, #16
   10058:	af00      	add	r7, sp, #0
   1005a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   1005c:	687b      	ldr	r3, [r7, #4]
   1005e:	2b00      	cmp	r3, #0
   10060:	bf14      	ite	ne
   10062:	2301      	movne	r3, #1
   10064:	2300      	moveq	r3, #0
   10066:	b2db      	uxtb	r3, r3
   10068:	f240 3255 	movw	r2, #853	; 0x355
   1006c:	4910      	ldr	r1, [pc, #64]	; (100b0 <usbdc_init+0x5c>)
   1006e:	4618      	mov	r0, r3
   10070:	4b10      	ldr	r3, [pc, #64]	; (100b4 <usbdc_init+0x60>)
   10072:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   10074:	4b10      	ldr	r3, [pc, #64]	; (100b8 <usbdc_init+0x64>)
   10076:	4798      	blx	r3
   10078:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   1007a:	68fb      	ldr	r3, [r7, #12]
   1007c:	2b00      	cmp	r3, #0
   1007e:	da01      	bge.n	10084 <usbdc_init+0x30>
		return rc;
   10080:	68fb      	ldr	r3, [r7, #12]
   10082:	e010      	b.n	100a6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   10084:	2220      	movs	r2, #32
   10086:	2100      	movs	r1, #0
   10088:	480c      	ldr	r0, [pc, #48]	; (100bc <usbdc_init+0x68>)
   1008a:	4b0d      	ldr	r3, [pc, #52]	; (100c0 <usbdc_init+0x6c>)
   1008c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   1008e:	4a0b      	ldr	r2, [pc, #44]	; (100bc <usbdc_init+0x68>)
   10090:	687b      	ldr	r3, [r7, #4]
   10092:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   10094:	490b      	ldr	r1, [pc, #44]	; (100c4 <usbdc_init+0x70>)
   10096:	2000      	movs	r0, #0
   10098:	4b0b      	ldr	r3, [pc, #44]	; (100c8 <usbdc_init+0x74>)
   1009a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   1009c:	490b      	ldr	r1, [pc, #44]	; (100cc <usbdc_init+0x78>)
   1009e:	2001      	movs	r0, #1
   100a0:	4b09      	ldr	r3, [pc, #36]	; (100c8 <usbdc_init+0x74>)
   100a2:	4798      	blx	r3

	return 0;
   100a4:	2300      	movs	r3, #0
}
   100a6:	4618      	mov	r0, r3
   100a8:	3710      	adds	r7, #16
   100aa:	46bd      	mov	sp, r7
   100ac:	bd80      	pop	{r7, pc}
   100ae:	bf00      	nop
   100b0:	00017430 	.word	0x00017430
   100b4:	00006251 	.word	0x00006251
   100b8:	00005ca9 	.word	0x00005ca9
   100bc:	20003550 	.word	0x20003550
   100c0:	00016661 	.word	0x00016661
   100c4:	0000fdb1 	.word	0x0000fdb1
   100c8:	00005d55 	.word	0x00005d55
   100cc:	0000ff8d 	.word	0x0000ff8d

000100d0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   100d0:	b580      	push	{r7, lr}
   100d2:	b082      	sub	sp, #8
   100d4:	af00      	add	r7, sp, #0
   100d6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   100d8:	6879      	ldr	r1, [r7, #4]
   100da:	4803      	ldr	r0, [pc, #12]	; (100e8 <usbdc_register_function+0x18>)
   100dc:	4b03      	ldr	r3, [pc, #12]	; (100ec <usbdc_register_function+0x1c>)
   100de:	4798      	blx	r3
}
   100e0:	bf00      	nop
   100e2:	3708      	adds	r7, #8
   100e4:	46bd      	mov	sp, r7
   100e6:	bd80      	pop	{r7, pc}
   100e8:	20003560 	.word	0x20003560
   100ec:	0000632d 	.word	0x0000632d

000100f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   100f0:	b580      	push	{r7, lr}
   100f2:	b082      	sub	sp, #8
   100f4:	af00      	add	r7, sp, #0
   100f6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   100f8:	4b0f      	ldr	r3, [pc, #60]	; (10138 <usbdc_start+0x48>)
   100fa:	7e9b      	ldrb	r3, [r3, #26]
   100fc:	2b00      	cmp	r3, #0
   100fe:	d002      	beq.n	10106 <usbdc_start+0x16>
		return ERR_BUSY;
   10100:	f06f 0303 	mvn.w	r3, #3
   10104:	e013      	b.n	1012e <usbdc_start+0x3e>
	}

	if (desces) {
   10106:	687b      	ldr	r3, [r7, #4]
   10108:	2b00      	cmp	r3, #0
   1010a:	d00e      	beq.n	1012a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   1010c:	4a0a      	ldr	r2, [pc, #40]	; (10138 <usbdc_start+0x48>)
   1010e:	687b      	ldr	r3, [r7, #4]
   10110:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   10112:	687b      	ldr	r3, [r7, #4]
   10114:	681b      	ldr	r3, [r3, #0]
   10116:	79da      	ldrb	r2, [r3, #7]
   10118:	4b07      	ldr	r3, [pc, #28]	; (10138 <usbdc_start+0x48>)
   1011a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1011c:	4b06      	ldr	r3, [pc, #24]	; (10138 <usbdc_start+0x48>)
   1011e:	2201      	movs	r2, #1
   10120:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10122:	4b06      	ldr	r3, [pc, #24]	; (1013c <usbdc_start+0x4c>)
   10124:	4798      	blx	r3
	return ERR_NONE;
   10126:	2300      	movs	r3, #0
   10128:	e001      	b.n	1012e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1012a:	f06f 0308 	mvn.w	r3, #8
}
   1012e:	4618      	mov	r0, r3
   10130:	3708      	adds	r7, #8
   10132:	46bd      	mov	sp, r7
   10134:	bd80      	pop	{r7, pc}
   10136:	bf00      	nop
   10138:	20003550 	.word	0x20003550
   1013c:	00005d79 	.word	0x00005d79

00010140 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   10140:	b580      	push	{r7, lr}
   10142:	af00      	add	r7, sp, #0
	usb_d_attach();
   10144:	4b01      	ldr	r3, [pc, #4]	; (1014c <usbdc_attach+0xc>)
   10146:	4798      	blx	r3
}
   10148:	bf00      	nop
   1014a:	bd80      	pop	{r7, pc}
   1014c:	00005d8d 	.word	0x00005d8d

00010150 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10150:	b480      	push	{r7}
   10152:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   10154:	4b03      	ldr	r3, [pc, #12]	; (10164 <usbdc_get_ctrl_buffer+0x14>)
   10156:	695b      	ldr	r3, [r3, #20]
}
   10158:	4618      	mov	r0, r3
   1015a:	46bd      	mov	sp, r7
   1015c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10160:	4770      	bx	lr
   10162:	bf00      	nop
   10164:	20003550 	.word	0x20003550

00010168 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10168:	b480      	push	{r7}
   1016a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   1016c:	4b07      	ldr	r3, [pc, #28]	; (1018c <usbdc_get_state+0x24>)
   1016e:	7e9b      	ldrb	r3, [r3, #26]
   10170:	f003 0310 	and.w	r3, r3, #16
   10174:	2b00      	cmp	r3, #0
   10176:	d001      	beq.n	1017c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   10178:	2310      	movs	r3, #16
   1017a:	e001      	b.n	10180 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   1017c:	4b03      	ldr	r3, [pc, #12]	; (1018c <usbdc_get_state+0x24>)
   1017e:	7e9b      	ldrb	r3, [r3, #26]
}
   10180:	4618      	mov	r0, r3
   10182:	46bd      	mov	sp, r7
   10184:	f85d 7b04 	ldr.w	r7, [sp], #4
   10188:	4770      	bx	lr
   1018a:	bf00      	nop
   1018c:	20003550 	.word	0x20003550

00010190 <usb_get_u16>:
{
   10190:	b480      	push	{r7}
   10192:	b083      	sub	sp, #12
   10194:	af00      	add	r7, sp, #0
   10196:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10198:	687b      	ldr	r3, [r7, #4]
   1019a:	781b      	ldrb	r3, [r3, #0]
   1019c:	b29a      	uxth	r2, r3
   1019e:	687b      	ldr	r3, [r7, #4]
   101a0:	3301      	adds	r3, #1
   101a2:	781b      	ldrb	r3, [r3, #0]
   101a4:	b29b      	uxth	r3, r3
   101a6:	021b      	lsls	r3, r3, #8
   101a8:	b29b      	uxth	r3, r3
   101aa:	4413      	add	r3, r2
   101ac:	b29b      	uxth	r3, r3
}
   101ae:	4618      	mov	r0, r3
   101b0:	370c      	adds	r7, #12
   101b2:	46bd      	mov	sp, r7
   101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   101b8:	4770      	bx	lr

000101ba <usb_desc_len>:
{
   101ba:	b480      	push	{r7}
   101bc:	b083      	sub	sp, #12
   101be:	af00      	add	r7, sp, #0
   101c0:	6078      	str	r0, [r7, #4]
	return desc[0];
   101c2:	687b      	ldr	r3, [r7, #4]
   101c4:	781b      	ldrb	r3, [r3, #0]
}
   101c6:	4618      	mov	r0, r3
   101c8:	370c      	adds	r7, #12
   101ca:	46bd      	mov	sp, r7
   101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   101d0:	4770      	bx	lr

000101d2 <usb_desc_type>:
{
   101d2:	b480      	push	{r7}
   101d4:	b083      	sub	sp, #12
   101d6:	af00      	add	r7, sp, #0
   101d8:	6078      	str	r0, [r7, #4]
	return desc[1];
   101da:	687b      	ldr	r3, [r7, #4]
   101dc:	3301      	adds	r3, #1
   101de:	781b      	ldrb	r3, [r3, #0]
}
   101e0:	4618      	mov	r0, r3
   101e2:	370c      	adds	r7, #12
   101e4:	46bd      	mov	sp, r7
   101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   101ea:	4770      	bx	lr

000101ec <usb_desc_next>:
{
   101ec:	b580      	push	{r7, lr}
   101ee:	b082      	sub	sp, #8
   101f0:	af00      	add	r7, sp, #0
   101f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   101f4:	6878      	ldr	r0, [r7, #4]
   101f6:	4b05      	ldr	r3, [pc, #20]	; (1020c <usb_desc_next+0x20>)
   101f8:	4798      	blx	r3
   101fa:	4603      	mov	r3, r0
   101fc:	461a      	mov	r2, r3
   101fe:	687b      	ldr	r3, [r7, #4]
   10200:	4413      	add	r3, r2
}
   10202:	4618      	mov	r0, r3
   10204:	3708      	adds	r7, #8
   10206:	46bd      	mov	sp, r7
   10208:	bd80      	pop	{r7, pc}
   1020a:	bf00      	nop
   1020c:	000101bb 	.word	0x000101bb

00010210 <usb_cfg_desc_total_len>:
{
   10210:	b580      	push	{r7, lr}
   10212:	b082      	sub	sp, #8
   10214:	af00      	add	r7, sp, #0
   10216:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10218:	687b      	ldr	r3, [r7, #4]
   1021a:	3302      	adds	r3, #2
   1021c:	4618      	mov	r0, r3
   1021e:	4b03      	ldr	r3, [pc, #12]	; (1022c <usb_cfg_desc_total_len+0x1c>)
   10220:	4798      	blx	r3
   10222:	4603      	mov	r3, r0
}
   10224:	4618      	mov	r0, r3
   10226:	3708      	adds	r7, #8
   10228:	46bd      	mov	sp, r7
   1022a:	bd80      	pop	{r7, pc}
   1022c:	00010191 	.word	0x00010191

00010230 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10230:	b580      	push	{r7, lr}
   10232:	b082      	sub	sp, #8
   10234:	af00      	add	r7, sp, #0
   10236:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10238:	6878      	ldr	r0, [r7, #4]
   1023a:	4b05      	ldr	r3, [pc, #20]	; (10250 <usb_cfg_desc_next+0x20>)
   1023c:	4798      	blx	r3
   1023e:	4603      	mov	r3, r0
   10240:	461a      	mov	r2, r3
   10242:	687b      	ldr	r3, [r7, #4]
   10244:	4413      	add	r3, r2
}
   10246:	4618      	mov	r0, r3
   10248:	3708      	adds	r7, #8
   1024a:	46bd      	mov	sp, r7
   1024c:	bd80      	pop	{r7, pc}
   1024e:	bf00      	nop
   10250:	00010211 	.word	0x00010211

00010254 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   10254:	b580      	push	{r7, lr}
   10256:	b084      	sub	sp, #16
   10258:	af00      	add	r7, sp, #0
   1025a:	60f8      	str	r0, [r7, #12]
   1025c:	60b9      	str	r1, [r7, #8]
   1025e:	4613      	mov	r3, r2
   10260:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10262:	e015      	b.n	10290 <usb_find_desc+0x3c>
		_desc_len_check();
   10264:	68f8      	ldr	r0, [r7, #12]
   10266:	4b0f      	ldr	r3, [pc, #60]	; (102a4 <usb_find_desc+0x50>)
   10268:	4798      	blx	r3
   1026a:	4603      	mov	r3, r0
   1026c:	2b01      	cmp	r3, #1
   1026e:	d801      	bhi.n	10274 <usb_find_desc+0x20>
   10270:	2300      	movs	r3, #0
   10272:	e012      	b.n	1029a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   10274:	68f8      	ldr	r0, [r7, #12]
   10276:	4b0c      	ldr	r3, [pc, #48]	; (102a8 <usb_find_desc+0x54>)
   10278:	4798      	blx	r3
   1027a:	4603      	mov	r3, r0
   1027c:	461a      	mov	r2, r3
   1027e:	79fb      	ldrb	r3, [r7, #7]
   10280:	4293      	cmp	r3, r2
   10282:	d101      	bne.n	10288 <usb_find_desc+0x34>
			return desc;
   10284:	68fb      	ldr	r3, [r7, #12]
   10286:	e008      	b.n	1029a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   10288:	68f8      	ldr	r0, [r7, #12]
   1028a:	4b08      	ldr	r3, [pc, #32]	; (102ac <usb_find_desc+0x58>)
   1028c:	4798      	blx	r3
   1028e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10290:	68fa      	ldr	r2, [r7, #12]
   10292:	68bb      	ldr	r3, [r7, #8]
   10294:	429a      	cmp	r2, r3
   10296:	d3e5      	bcc.n	10264 <usb_find_desc+0x10>
	}
	return NULL;
   10298:	2300      	movs	r3, #0
}
   1029a:	4618      	mov	r0, r3
   1029c:	3710      	adds	r7, #16
   1029e:	46bd      	mov	sp, r7
   102a0:	bd80      	pop	{r7, pc}
   102a2:	bf00      	nop
   102a4:	000101bb 	.word	0x000101bb
   102a8:	000101d3 	.word	0x000101d3
   102ac:	000101ed 	.word	0x000101ed

000102b0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   102b0:	b580      	push	{r7, lr}
   102b2:	b082      	sub	sp, #8
   102b4:	af00      	add	r7, sp, #0
   102b6:	6078      	str	r0, [r7, #4]
   102b8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   102ba:	e019      	b.n	102f0 <usb_find_ep_desc+0x40>
		_desc_len_check();
   102bc:	6878      	ldr	r0, [r7, #4]
   102be:	4b12      	ldr	r3, [pc, #72]	; (10308 <usb_find_ep_desc+0x58>)
   102c0:	4798      	blx	r3
   102c2:	4603      	mov	r3, r0
   102c4:	2b01      	cmp	r3, #1
   102c6:	d801      	bhi.n	102cc <usb_find_ep_desc+0x1c>
   102c8:	2300      	movs	r3, #0
   102ca:	e018      	b.n	102fe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   102cc:	6878      	ldr	r0, [r7, #4]
   102ce:	4b0f      	ldr	r3, [pc, #60]	; (1030c <usb_find_ep_desc+0x5c>)
   102d0:	4798      	blx	r3
   102d2:	4603      	mov	r3, r0
   102d4:	2b04      	cmp	r3, #4
   102d6:	d010      	beq.n	102fa <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   102d8:	6878      	ldr	r0, [r7, #4]
   102da:	4b0c      	ldr	r3, [pc, #48]	; (1030c <usb_find_ep_desc+0x5c>)
   102dc:	4798      	blx	r3
   102de:	4603      	mov	r3, r0
   102e0:	2b05      	cmp	r3, #5
   102e2:	d101      	bne.n	102e8 <usb_find_ep_desc+0x38>
			return desc;
   102e4:	687b      	ldr	r3, [r7, #4]
   102e6:	e00a      	b.n	102fe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   102e8:	6878      	ldr	r0, [r7, #4]
   102ea:	4b09      	ldr	r3, [pc, #36]	; (10310 <usb_find_ep_desc+0x60>)
   102ec:	4798      	blx	r3
   102ee:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   102f0:	687a      	ldr	r2, [r7, #4]
   102f2:	683b      	ldr	r3, [r7, #0]
   102f4:	429a      	cmp	r2, r3
   102f6:	d3e1      	bcc.n	102bc <usb_find_ep_desc+0xc>
   102f8:	e000      	b.n	102fc <usb_find_ep_desc+0x4c>
			break;
   102fa:	bf00      	nop
	}
	return NULL;
   102fc:	2300      	movs	r3, #0
}
   102fe:	4618      	mov	r0, r3
   10300:	3708      	adds	r7, #8
   10302:	46bd      	mov	sp, r7
   10304:	bd80      	pop	{r7, pc}
   10306:	bf00      	nop
   10308:	000101bb 	.word	0x000101bb
   1030c:	000101d3 	.word	0x000101d3
   10310:	000101ed 	.word	0x000101ed

00010314 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   10314:	b580      	push	{r7, lr}
   10316:	b084      	sub	sp, #16
   10318:	af00      	add	r7, sp, #0
   1031a:	60f8      	str	r0, [r7, #12]
   1031c:	60b9      	str	r1, [r7, #8]
   1031e:	4613      	mov	r3, r2
   10320:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   10322:	2202      	movs	r2, #2
   10324:	68b9      	ldr	r1, [r7, #8]
   10326:	68f8      	ldr	r0, [r7, #12]
   10328:	4b15      	ldr	r3, [pc, #84]	; (10380 <usb_find_cfg_desc+0x6c>)
   1032a:	4798      	blx	r3
   1032c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   1032e:	68fb      	ldr	r3, [r7, #12]
   10330:	2b00      	cmp	r3, #0
   10332:	d11a      	bne.n	1036a <usb_find_cfg_desc+0x56>
		return NULL;
   10334:	2300      	movs	r3, #0
   10336:	e01f      	b.n	10378 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   10338:	68f8      	ldr	r0, [r7, #12]
   1033a:	4b12      	ldr	r3, [pc, #72]	; (10384 <usb_find_cfg_desc+0x70>)
   1033c:	4798      	blx	r3
   1033e:	4603      	mov	r3, r0
   10340:	2b01      	cmp	r3, #1
   10342:	d801      	bhi.n	10348 <usb_find_cfg_desc+0x34>
   10344:	2300      	movs	r3, #0
   10346:	e017      	b.n	10378 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   10348:	68fb      	ldr	r3, [r7, #12]
   1034a:	3301      	adds	r3, #1
   1034c:	781b      	ldrb	r3, [r3, #0]
   1034e:	2b02      	cmp	r3, #2
   10350:	d110      	bne.n	10374 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   10352:	68fb      	ldr	r3, [r7, #12]
   10354:	3305      	adds	r3, #5
   10356:	781b      	ldrb	r3, [r3, #0]
   10358:	79fa      	ldrb	r2, [r7, #7]
   1035a:	429a      	cmp	r2, r3
   1035c:	d101      	bne.n	10362 <usb_find_cfg_desc+0x4e>
			return desc;
   1035e:	68fb      	ldr	r3, [r7, #12]
   10360:	e00a      	b.n	10378 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   10362:	68f8      	ldr	r0, [r7, #12]
   10364:	4b08      	ldr	r3, [pc, #32]	; (10388 <usb_find_cfg_desc+0x74>)
   10366:	4798      	blx	r3
   10368:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   1036a:	68fa      	ldr	r2, [r7, #12]
   1036c:	68bb      	ldr	r3, [r7, #8]
   1036e:	429a      	cmp	r2, r3
   10370:	d3e2      	bcc.n	10338 <usb_find_cfg_desc+0x24>
   10372:	e000      	b.n	10376 <usb_find_cfg_desc+0x62>
			break;
   10374:	bf00      	nop
	}
	return NULL;
   10376:	2300      	movs	r3, #0
}
   10378:	4618      	mov	r0, r3
   1037a:	3710      	adds	r7, #16
   1037c:	46bd      	mov	sp, r7
   1037e:	bd80      	pop	{r7, pc}
   10380:	00010255 	.word	0x00010255
   10384:	000101bb 	.word	0x000101bb
   10388:	00010231 	.word	0x00010231

0001038c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   1038c:	b580      	push	{r7, lr}
   1038e:	b086      	sub	sp, #24
   10390:	af00      	add	r7, sp, #0
   10392:	60f8      	str	r0, [r7, #12]
   10394:	60b9      	str	r1, [r7, #8]
   10396:	4613      	mov	r3, r2
   10398:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   1039a:	2300      	movs	r3, #0
   1039c:	75fb      	strb	r3, [r7, #23]
   1039e:	e020      	b.n	103e2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   103a0:	2203      	movs	r2, #3
   103a2:	68b9      	ldr	r1, [r7, #8]
   103a4:	68f8      	ldr	r0, [r7, #12]
   103a6:	4b13      	ldr	r3, [pc, #76]	; (103f4 <usb_find_str_desc+0x68>)
   103a8:	4798      	blx	r3
   103aa:	60f8      	str	r0, [r7, #12]
		if (desc) {
   103ac:	68fb      	ldr	r3, [r7, #12]
   103ae:	2b00      	cmp	r3, #0
   103b0:	d015      	beq.n	103de <usb_find_str_desc+0x52>
			_desc_len_check();
   103b2:	68f8      	ldr	r0, [r7, #12]
   103b4:	4b10      	ldr	r3, [pc, #64]	; (103f8 <usb_find_str_desc+0x6c>)
   103b6:	4798      	blx	r3
   103b8:	4603      	mov	r3, r0
   103ba:	2b01      	cmp	r3, #1
   103bc:	d801      	bhi.n	103c2 <usb_find_str_desc+0x36>
   103be:	2300      	movs	r3, #0
   103c0:	e014      	b.n	103ec <usb_find_str_desc+0x60>
			if (i == str_index) {
   103c2:	7dfa      	ldrb	r2, [r7, #23]
   103c4:	79fb      	ldrb	r3, [r7, #7]
   103c6:	429a      	cmp	r2, r3
   103c8:	d101      	bne.n	103ce <usb_find_str_desc+0x42>
				return desc;
   103ca:	68fb      	ldr	r3, [r7, #12]
   103cc:	e00e      	b.n	103ec <usb_find_str_desc+0x60>
			}
			i++;
   103ce:	7dfb      	ldrb	r3, [r7, #23]
   103d0:	3301      	adds	r3, #1
   103d2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   103d4:	68f8      	ldr	r0, [r7, #12]
   103d6:	4b09      	ldr	r3, [pc, #36]	; (103fc <usb_find_str_desc+0x70>)
   103d8:	4798      	blx	r3
   103da:	60f8      	str	r0, [r7, #12]
   103dc:	e001      	b.n	103e2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   103de:	2300      	movs	r3, #0
   103e0:	e004      	b.n	103ec <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   103e2:	68fa      	ldr	r2, [r7, #12]
   103e4:	68bb      	ldr	r3, [r7, #8]
   103e6:	429a      	cmp	r2, r3
   103e8:	d3da      	bcc.n	103a0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   103ea:	2300      	movs	r3, #0
}
   103ec:	4618      	mov	r0, r3
   103ee:	3718      	adds	r7, #24
   103f0:	46bd      	mov	sp, r7
   103f2:	bd80      	pop	{r7, pc}
   103f4:	00010255 	.word	0x00010255
   103f8:	000101bb 	.word	0x000101bb
   103fc:	000101ed 	.word	0x000101ed

00010400 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   10400:	b480      	push	{r7}
   10402:	b083      	sub	sp, #12
   10404:	af00      	add	r7, sp, #0
   10406:	6078      	str	r0, [r7, #4]
   10408:	4a04      	ldr	r2, [pc, #16]	; (1041c <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   1040a:	687b      	ldr	r3, [r7, #4]
   1040c:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   1040e:	687b      	ldr	r3, [r7, #4]
   10410:	4618      	mov	r0, r3
   10412:	370c      	adds	r7, #12
   10414:	46bd      	mov	sp, r7
   10416:	bc80      	pop	{r7}
   10418:	4770      	bx	lr
   1041a:	bf00      	nop
   1041c:	00017450 	.word	0x00017450

00010420 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   10420:	b480      	push	{r7}
   10422:	b083      	sub	sp, #12
   10424:	af00      	add	r7, sp, #0
   10426:	6078      	str	r0, [r7, #4]
   10428:	4a04      	ldr	r2, [pc, #16]	; (1043c <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   1042a:	687b      	ldr	r3, [r7, #4]
   1042c:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   1042e:	687b      	ldr	r3, [r7, #4]
   10430:	4618      	mov	r0, r3
   10432:	370c      	adds	r7, #12
   10434:	46bd      	mov	sp, r7
   10436:	bc80      	pop	{r7}
   10438:	4770      	bx	lr
   1043a:	bf00      	nop
   1043c:	00017450 	.word	0x00017450

00010440 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   10440:	b5b0      	push	{r4, r5, r7, lr}
   10442:	b082      	sub	sp, #8
   10444:	af00      	add	r7, sp, #0
   10446:	6078      	str	r0, [r7, #4]
   10448:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   1044a:	4b0a      	ldr	r3, [pc, #40]	; (10474 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   1044c:	6878      	ldr	r0, [r7, #4]
   1044e:	4798      	blx	r3
   10450:	4604      	mov	r4, r0
   10452:	460d      	mov	r5, r1
   10454:	4b07      	ldr	r3, [pc, #28]	; (10474 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   10456:	6838      	ldr	r0, [r7, #0]
   10458:	4798      	blx	r3
   1045a:	4602      	mov	r2, r0
   1045c:	460b      	mov	r3, r1
   1045e:	4620      	mov	r0, r4
   10460:	4629      	mov	r1, r5
   10462:	4c05      	ldr	r4, [pc, #20]	; (10478 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   10464:	47a0      	blx	r4
   10466:	4603      	mov	r3, r0
   10468:	460c      	mov	r4, r1
    }
   1046a:	4618      	mov	r0, r3
   1046c:	4621      	mov	r1, r4
   1046e:	3708      	adds	r7, #8
   10470:	46bd      	mov	sp, r7
   10472:	bdb0      	pop	{r4, r5, r7, pc}
   10474:	00015e31 	.word	0x00015e31
   10478:	00014a41 	.word	0x00014a41

0001047c <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   1047c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10480:	b085      	sub	sp, #20
   10482:	af00      	add	r7, sp, #0
   10484:	6078      	str	r0, [r7, #4]
   10486:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   10488:	2300      	movs	r3, #0
   1048a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1048c:	2300      	movs	r3, #0
   1048e:	73bb      	strb	r3, [r7, #14]
   10490:	7bbb      	ldrb	r3, [r7, #14]
   10492:	2b02      	cmp	r3, #2
   10494:	d86d      	bhi.n	10572 <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   10496:	7bbb      	ldrb	r3, [r7, #14]
   10498:	f1c3 0402 	rsb	r4, r3, #2
   1049c:	4b3c      	ldr	r3, [pc, #240]	; (10590 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1049e:	6838      	ldr	r0, [r7, #0]
   104a0:	4798      	blx	r3
   104a2:	4680      	mov	r8, r0
   104a4:	4689      	mov	r9, r1
   104a6:	7bbb      	ldrb	r3, [r7, #14]
   104a8:	f1c3 0302 	rsb	r3, r3, #2
   104ac:	4619      	mov	r1, r3
   104ae:	200a      	movs	r0, #10
   104b0:	4b38      	ldr	r3, [pc, #224]	; (10594 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   104b2:	4798      	blx	r3
   104b4:	4602      	mov	r2, r0
   104b6:	460b      	mov	r3, r1
   104b8:	4d37      	ldr	r5, [pc, #220]	; (10598 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   104ba:	4640      	mov	r0, r8
   104bc:	4649      	mov	r1, r9
   104be:	47a8      	blx	r5
   104c0:	4602      	mov	r2, r0
   104c2:	460b      	mov	r3, r1
   104c4:	4611      	mov	r1, r2
   104c6:	461a      	mov	r2, r3
   104c8:	4b34      	ldr	r3, [pc, #208]	; (1059c <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   104ca:	4608      	mov	r0, r1
   104cc:	4611      	mov	r1, r2
   104ce:	4798      	blx	r3
   104d0:	4603      	mov	r3, r0
   104d2:	b2da      	uxtb	r2, r3
   104d4:	f107 0310 	add.w	r3, r7, #16
   104d8:	4423      	add	r3, r4
   104da:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   104de:	7bbb      	ldrb	r3, [r7, #14]
   104e0:	f1c3 0302 	rsb	r3, r3, #2
   104e4:	f107 0210 	add.w	r2, r7, #16
   104e8:	4413      	add	r3, r2
   104ea:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   104ee:	461a      	mov	r2, r3
   104f0:	4b2b      	ldr	r3, [pc, #172]	; (105a0 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   104f2:	4610      	mov	r0, r2
   104f4:	4798      	blx	r3
   104f6:	4605      	mov	r5, r0
   104f8:	460e      	mov	r6, r1
   104fa:	7bbb      	ldrb	r3, [r7, #14]
   104fc:	f1c3 0302 	rsb	r3, r3, #2
   10500:	4619      	mov	r1, r3
   10502:	200a      	movs	r0, #10
   10504:	4b23      	ldr	r3, [pc, #140]	; (10594 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   10506:	4798      	blx	r3
   10508:	4602      	mov	r2, r0
   1050a:	460b      	mov	r3, r1
   1050c:	4c25      	ldr	r4, [pc, #148]	; (105a4 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   1050e:	4628      	mov	r0, r5
   10510:	4631      	mov	r1, r6
   10512:	47a0      	blx	r4
   10514:	4603      	mov	r3, r0
   10516:	460c      	mov	r4, r1
   10518:	461d      	mov	r5, r3
   1051a:	4626      	mov	r6, r4
   1051c:	4b1c      	ldr	r3, [pc, #112]	; (10590 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1051e:	6838      	ldr	r0, [r7, #0]
   10520:	4798      	blx	r3
   10522:	4c21      	ldr	r4, [pc, #132]	; (105a8 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   10524:	462a      	mov	r2, r5
   10526:	4633      	mov	r3, r6
   10528:	47a0      	blx	r4
   1052a:	4603      	mov	r3, r0
   1052c:	460c      	mov	r4, r1
   1052e:	4619      	mov	r1, r3
   10530:	4622      	mov	r2, r4
   10532:	4b1a      	ldr	r3, [pc, #104]	; (1059c <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   10534:	4608      	mov	r0, r1
   10536:	4611      	mov	r1, r2
   10538:	4798      	blx	r3
   1053a:	4603      	mov	r3, r0
   1053c:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   1053e:	7bbb      	ldrb	r3, [r7, #14]
   10540:	f1c3 0302 	rsb	r3, r3, #2
   10544:	f107 0210 	add.w	r2, r7, #16
   10548:	4413      	add	r3, r2
   1054a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1054e:	461a      	mov	r2, r3
   10550:	7bbb      	ldrb	r3, [r7, #14]
   10552:	4619      	mov	r1, r3
   10554:	009b      	lsls	r3, r3, #2
   10556:	1acb      	subs	r3, r1, r3
   10558:	3306      	adds	r3, #6
   1055a:	fa02 f303 	lsl.w	r3, r2, r3
   1055e:	b25a      	sxtb	r2, r3
   10560:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10564:	4313      	orrs	r3, r2
   10566:	b25b      	sxtb	r3, r3
   10568:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1056a:	7bbb      	ldrb	r3, [r7, #14]
   1056c:	3301      	adds	r3, #1
   1056e:	73bb      	strb	r3, [r7, #14]
   10570:	e78e      	b.n	10490 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   10572:	687b      	ldr	r3, [r7, #4]
   10574:	681b      	ldr	r3, [r3, #0]
   10576:	681b      	ldr	r3, [r3, #0]
   10578:	7bfa      	ldrb	r2, [r7, #15]
   1057a:	4611      	mov	r1, r2
   1057c:	6878      	ldr	r0, [r7, #4]
   1057e:	4798      	blx	r3
   10580:	4603      	mov	r3, r0
   10582:	73fb      	strb	r3, [r7, #15]
	return result;
   10584:	7bfb      	ldrb	r3, [r7, #15]
	
}
   10586:	4618      	mov	r0, r3
   10588:	3714      	adds	r7, #20
   1058a:	46bd      	mov	sp, r7
   1058c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10590:	00015e11 	.word	0x00015e11
   10594:	00010441 	.word	0x00010441
   10598:	00016151 	.word	0x00016151
   1059c:	0001645d 	.word	0x0001645d
   105a0:	00015e31 	.word	0x00015e31
   105a4:	00015efd 	.word	0x00015efd
   105a8:	00015b95 	.word	0x00015b95

000105ac <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   105ac:	b480      	push	{r7}
   105ae:	b085      	sub	sp, #20
   105b0:	af00      	add	r7, sp, #0
   105b2:	6078      	str	r0, [r7, #4]
   105b4:	460b      	mov	r3, r1
   105b6:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   105b8:	2300      	movs	r3, #0
   105ba:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   105bc:	2300      	movs	r3, #0
   105be:	60bb      	str	r3, [r7, #8]
   105c0:	68bb      	ldr	r3, [r7, #8]
   105c2:	2b07      	cmp	r3, #7
   105c4:	dc13      	bgt.n	105ee <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   105c6:	7bfb      	ldrb	r3, [r7, #15]
   105c8:	005b      	lsls	r3, r3, #1
   105ca:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   105cc:	78fa      	ldrb	r2, [r7, #3]
   105ce:	68bb      	ldr	r3, [r7, #8]
   105d0:	fa42 f303 	asr.w	r3, r2, r3
   105d4:	b25b      	sxtb	r3, r3
   105d6:	f003 0301 	and.w	r3, r3, #1
   105da:	b25a      	sxtb	r2, r3
   105dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   105e0:	4313      	orrs	r3, r2
   105e2:	b25b      	sxtb	r3, r3
   105e4:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   105e6:	68bb      	ldr	r3, [r7, #8]
   105e8:	3301      	adds	r3, #1
   105ea:	60bb      	str	r3, [r7, #8]
   105ec:	e7e8      	b.n	105c0 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   105ee:	7bfb      	ldrb	r3, [r7, #15]
   105f0:	4618      	mov	r0, r3
   105f2:	3714      	adds	r7, #20
   105f4:	46bd      	mov	sp, r7
   105f6:	bc80      	pop	{r7}
   105f8:	4770      	bx	lr

000105fa <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   105fa:	b480      	push	{r7}
   105fc:	b085      	sub	sp, #20
   105fe:	af00      	add	r7, sp, #0
   10600:	60f8      	str	r0, [r7, #12]
   10602:	460b      	mov	r3, r1
   10604:	607a      	str	r2, [r7, #4]
   10606:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   10608:	7afb      	ldrb	r3, [r7, #11]
   1060a:	68fa      	ldr	r2, [r7, #12]
   1060c:	01db      	lsls	r3, r3, #7
   1060e:	4413      	add	r3, r2
   10610:	331c      	adds	r3, #28
   10612:	687a      	ldr	r2, [r7, #4]
   10614:	601a      	str	r2, [r3, #0]
}
   10616:	bf00      	nop
   10618:	3714      	adds	r7, #20
   1061a:	46bd      	mov	sp, r7
   1061c:	bc80      	pop	{r7}
   1061e:	4770      	bx	lr

00010620 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   10620:	b580      	push	{r7, lr}
   10622:	b082      	sub	sp, #8
   10624:	af00      	add	r7, sp, #0
   10626:	4603      	mov	r3, r0
   10628:	6039      	str	r1, [r7, #0]
   1062a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   1062c:	79fb      	ldrb	r3, [r7, #7]
   1062e:	683a      	ldr	r2, [r7, #0]
   10630:	4619      	mov	r1, r3
   10632:	4803      	ldr	r0, [pc, #12]	; (10640 <_gpio_toggle_level+0x20>)
   10634:	4b03      	ldr	r3, [pc, #12]	; (10644 <_gpio_toggle_level+0x24>)
   10636:	4798      	blx	r3
}
   10638:	bf00      	nop
   1063a:	3708      	adds	r7, #8
   1063c:	46bd      	mov	sp, r7
   1063e:	bd80      	pop	{r7, pc}
   10640:	41008000 	.word	0x41008000
   10644:	000105fb 	.word	0x000105fb

00010648 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   10648:	b580      	push	{r7, lr}
   1064a:	b082      	sub	sp, #8
   1064c:	af00      	add	r7, sp, #0
   1064e:	4603      	mov	r3, r0
   10650:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   10652:	79fb      	ldrb	r3, [r7, #7]
   10654:	115b      	asrs	r3, r3, #5
   10656:	b2d8      	uxtb	r0, r3
   10658:	79fb      	ldrb	r3, [r7, #7]
   1065a:	f003 031f 	and.w	r3, r3, #31
   1065e:	2201      	movs	r2, #1
   10660:	fa02 f303 	lsl.w	r3, r2, r3
   10664:	4619      	mov	r1, r3
   10666:	4b03      	ldr	r3, [pc, #12]	; (10674 <gpio_toggle_pin_level+0x2c>)
   10668:	4798      	blx	r3
}
   1066a:	bf00      	nop
   1066c:	3708      	adds	r7, #8
   1066e:	46bd      	mov	sp, r7
   10670:	bd80      	pop	{r7, pc}
   10672:	bf00      	nop
   10674:	00010621 	.word	0x00010621

00010678 <_ZL10blink_LED0v>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(void){
   10678:	b580      	push	{r7, lr}
   1067a:	af00      	add	r7, sp, #0
	gpio_toggle_pin_level(LED0);
   1067c:	2052      	movs	r0, #82	; 0x52
   1067e:	4b02      	ldr	r3, [pc, #8]	; (10688 <_ZL10blink_LED0v+0x10>)
   10680:	4798      	blx	r3
}
   10682:	bf00      	nop
   10684:	bd80      	pop	{r7, pc}
   10686:	bf00      	nop
   10688:	00010649 	.word	0x00010649

0001068c <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   1068c:	b480      	push	{r7}
   1068e:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   10690:	4b03      	ldr	r3, [pc, #12]	; (106a0 <_ZL12Receiver1Intv+0x14>)
   10692:	681b      	ldr	r3, [r3, #0]
   10694:	2201      	movs	r2, #1
   10696:	741a      	strb	r2, [r3, #16]
}
   10698:	bf00      	nop
   1069a:	46bd      	mov	sp, r7
   1069c:	bc80      	pop	{r7}
   1069e:	4770      	bx	lr
   106a0:	20003570 	.word	0x20003570

000106a4 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
   106a4:	b480      	push	{r7}
   106a6:	b083      	sub	sp, #12
   106a8:	af00      	add	r7, sp, #0
   106aa:	6078      	str	r0, [r7, #4]
   106ac:	6039      	str	r1, [r7, #0]
   106ae:	683b      	ldr	r3, [r7, #0]
   106b0:	681a      	ldr	r2, [r3, #0]
   106b2:	687b      	ldr	r3, [r7, #4]
   106b4:	601a      	str	r2, [r3, #0]
   106b6:	687b      	ldr	r3, [r7, #4]
   106b8:	681b      	ldr	r3, [r3, #0]
   106ba:	3b14      	subs	r3, #20
   106bc:	681b      	ldr	r3, [r3, #0]
   106be:	461a      	mov	r2, r3
   106c0:	687b      	ldr	r3, [r7, #4]
   106c2:	4413      	add	r3, r2
   106c4:	683a      	ldr	r2, [r7, #0]
   106c6:	6852      	ldr	r2, [r2, #4]
   106c8:	601a      	str	r2, [r3, #0]
   106ca:	687b      	ldr	r3, [r7, #4]
   106cc:	4618      	mov	r0, r3
   106ce:	370c      	adds	r7, #12
   106d0:	46bd      	mov	sp, r7
   106d2:	bc80      	pop	{r7}
   106d4:	4770      	bx	lr
	...

000106d8 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   106d8:	b580      	push	{r7, lr}
   106da:	b082      	sub	sp, #8
   106dc:	af00      	add	r7, sp, #0
   106de:	6078      	str	r0, [r7, #4]
   106e0:	6039      	str	r1, [r7, #0]
   106e2:	687a      	ldr	r2, [r7, #4]
   106e4:	683b      	ldr	r3, [r7, #0]
   106e6:	3304      	adds	r3, #4
   106e8:	4619      	mov	r1, r3
   106ea:	4610      	mov	r0, r2
   106ec:	4b11      	ldr	r3, [pc, #68]	; (10734 <_ZN15ARINC_InterfaceC2Ev+0x5c>)
   106ee:	4798      	blx	r3
   106f0:	683b      	ldr	r3, [r7, #0]
   106f2:	681a      	ldr	r2, [r3, #0]
   106f4:	687b      	ldr	r3, [r7, #4]
   106f6:	601a      	str	r2, [r3, #0]
   106f8:	687b      	ldr	r3, [r7, #4]
   106fa:	681b      	ldr	r3, [r3, #0]
   106fc:	3b14      	subs	r3, #20
   106fe:	681b      	ldr	r3, [r3, #0]
   10700:	461a      	mov	r2, r3
   10702:	687b      	ldr	r3, [r7, #4]
   10704:	4413      	add	r3, r2
   10706:	683a      	ldr	r2, [r7, #0]
   10708:	68d2      	ldr	r2, [r2, #12]
   1070a:	601a      	str	r2, [r3, #0]
   1070c:	687b      	ldr	r3, [r7, #4]
   1070e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10712:	4618      	mov	r0, r3
   10714:	4b08      	ldr	r3, [pc, #32]	; (10738 <_ZN15ARINC_InterfaceC2Ev+0x60>)
   10716:	4798      	blx	r3
   10718:	687b      	ldr	r3, [r7, #4]
   1071a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   1071e:	4618      	mov	r0, r3
   10720:	4b06      	ldr	r3, [pc, #24]	; (1073c <_ZN15ARINC_InterfaceC2Ev+0x64>)
   10722:	4798      	blx	r3
{
	ptrARINCInterface=this;
   10724:	4a06      	ldr	r2, [pc, #24]	; (10740 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   10726:	687b      	ldr	r3, [r7, #4]
   10728:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   1072a:	687b      	ldr	r3, [r7, #4]
   1072c:	4618      	mov	r0, r3
   1072e:	3708      	adds	r7, #8
   10730:	46bd      	mov	sp, r7
   10732:	bd80      	pop	{r7, pc}
   10734:	000106a5 	.word	0x000106a5
   10738:	000137f9 	.word	0x000137f9
   1073c:	00010bfd 	.word	0x00010bfd
   10740:	20003570 	.word	0x20003570

00010744 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   10744:	b580      	push	{r7, lr}
   10746:	b082      	sub	sp, #8
   10748:	af00      	add	r7, sp, #0
   1074a:	6078      	str	r0, [r7, #4]
   1074c:	687b      	ldr	r3, [r7, #4]
   1074e:	4618      	mov	r0, r3
   10750:	4b10      	ldr	r3, [pc, #64]	; (10794 <_ZN15ARINC_InterfaceC1Ev+0x50>)
   10752:	4798      	blx	r3
   10754:	687b      	ldr	r3, [r7, #4]
   10756:	4a10      	ldr	r2, [pc, #64]	; (10798 <_ZN15ARINC_InterfaceC1Ev+0x54>)
   10758:	4611      	mov	r1, r2
   1075a:	4618      	mov	r0, r3
   1075c:	4b0f      	ldr	r3, [pc, #60]	; (1079c <_ZN15ARINC_InterfaceC1Ev+0x58>)
   1075e:	4798      	blx	r3
   10760:	4a0f      	ldr	r2, [pc, #60]	; (107a0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   10762:	687b      	ldr	r3, [r7, #4]
   10764:	601a      	str	r2, [r3, #0]
   10766:	4a0e      	ldr	r2, [pc, #56]	; (107a0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
   10768:	687b      	ldr	r3, [r7, #4]
   1076a:	601a      	str	r2, [r3, #0]
   1076c:	687b      	ldr	r3, [r7, #4]
   1076e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   10772:	4618      	mov	r0, r3
   10774:	4b0b      	ldr	r3, [pc, #44]	; (107a4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
   10776:	4798      	blx	r3
   10778:	687b      	ldr	r3, [r7, #4]
   1077a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   1077e:	4618      	mov	r0, r3
   10780:	4b09      	ldr	r3, [pc, #36]	; (107a8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
   10782:	4798      	blx	r3
	ptrARINCInterface=this;
   10784:	4a09      	ldr	r2, [pc, #36]	; (107ac <_ZN15ARINC_InterfaceC1Ev+0x68>)
   10786:	687b      	ldr	r3, [r7, #4]
   10788:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   1078a:	687b      	ldr	r3, [r7, #4]
   1078c:	4618      	mov	r0, r3
   1078e:	3708      	adds	r7, #8
   10790:	46bd      	mov	sp, r7
   10792:	bd80      	pop	{r7, pc}
   10794:	00010401 	.word	0x00010401
   10798:	00017e84 	.word	0x00017e84
   1079c:	000106a5 	.word	0x000106a5
   107a0:	00017e6c 	.word	0x00017e6c
   107a4:	000137f9 	.word	0x000137f9
   107a8:	00010bfd 	.word	0x00010bfd
   107ac:	20003570 	.word	0x20003570

000107b0 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   107b0:	b580      	push	{r7, lr}
   107b2:	b082      	sub	sp, #8
   107b4:	af00      	add	r7, sp, #0
   107b6:	6078      	str	r0, [r7, #4]
   107b8:	6039      	str	r1, [r7, #0]
   107ba:	683b      	ldr	r3, [r7, #0]
   107bc:	681a      	ldr	r2, [r3, #0]
   107be:	687b      	ldr	r3, [r7, #4]
   107c0:	601a      	str	r2, [r3, #0]
   107c2:	687b      	ldr	r3, [r7, #4]
   107c4:	681b      	ldr	r3, [r3, #0]
   107c6:	3b14      	subs	r3, #20
   107c8:	681b      	ldr	r3, [r3, #0]
   107ca:	461a      	mov	r2, r3
   107cc:	687b      	ldr	r3, [r7, #4]
   107ce:	4413      	add	r3, r2
   107d0:	683a      	ldr	r2, [r7, #0]
   107d2:	68d2      	ldr	r2, [r2, #12]
   107d4:	601a      	str	r2, [r3, #0]
   107d6:	687b      	ldr	r3, [r7, #4]
   107d8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   107dc:	4618      	mov	r0, r3
   107de:	4b0a      	ldr	r3, [pc, #40]	; (10808 <_ZN15ARINC_InterfaceD2Ev+0x58>)
   107e0:	4798      	blx	r3
   107e2:	687b      	ldr	r3, [r7, #4]
   107e4:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   107e8:	4618      	mov	r0, r3
   107ea:	4b08      	ldr	r3, [pc, #32]	; (1080c <_ZN15ARINC_InterfaceD2Ev+0x5c>)
   107ec:	4798      	blx	r3
   107ee:	687a      	ldr	r2, [r7, #4]
   107f0:	683b      	ldr	r3, [r7, #0]
   107f2:	3304      	adds	r3, #4
   107f4:	4619      	mov	r1, r3
   107f6:	4610      	mov	r0, r2
   107f8:	4b05      	ldr	r3, [pc, #20]	; (10810 <_ZN15ARINC_InterfaceD2Ev+0x60>)
   107fa:	4798      	blx	r3
{
} //~ARINC_Interface
   107fc:	687b      	ldr	r3, [r7, #4]
   107fe:	4618      	mov	r0, r3
   10800:	3708      	adds	r7, #8
   10802:	46bd      	mov	sp, r7
   10804:	bd80      	pop	{r7, pc}
   10806:	bf00      	nop
   10808:	00010c1d 	.word	0x00010c1d
   1080c:	0001388d 	.word	0x0001388d
   10810:	00011241 	.word	0x00011241

00010814 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   10814:	b580      	push	{r7, lr}
   10816:	b082      	sub	sp, #8
   10818:	af00      	add	r7, sp, #0
   1081a:	6078      	str	r0, [r7, #4]
   1081c:	4a10      	ldr	r2, [pc, #64]	; (10860 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   1081e:	687b      	ldr	r3, [r7, #4]
   10820:	601a      	str	r2, [r3, #0]
   10822:	4a0f      	ldr	r2, [pc, #60]	; (10860 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
   10824:	687b      	ldr	r3, [r7, #4]
   10826:	601a      	str	r2, [r3, #0]
   10828:	687b      	ldr	r3, [r7, #4]
   1082a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   1082e:	4618      	mov	r0, r3
   10830:	4b0c      	ldr	r3, [pc, #48]	; (10864 <_ZN15ARINC_InterfaceD1Ev+0x50>)
   10832:	4798      	blx	r3
   10834:	687b      	ldr	r3, [r7, #4]
   10836:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   1083a:	4618      	mov	r0, r3
   1083c:	4b0a      	ldr	r3, [pc, #40]	; (10868 <_ZN15ARINC_InterfaceD1Ev+0x54>)
   1083e:	4798      	blx	r3
   10840:	687b      	ldr	r3, [r7, #4]
   10842:	4a0a      	ldr	r2, [pc, #40]	; (1086c <_ZN15ARINC_InterfaceD1Ev+0x58>)
   10844:	4611      	mov	r1, r2
   10846:	4618      	mov	r0, r3
   10848:	4b09      	ldr	r3, [pc, #36]	; (10870 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
   1084a:	4798      	blx	r3
   1084c:	687b      	ldr	r3, [r7, #4]
   1084e:	4618      	mov	r0, r3
   10850:	4b08      	ldr	r3, [pc, #32]	; (10874 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   10852:	4798      	blx	r3
} //~ARINC_Interface
   10854:	687b      	ldr	r3, [r7, #4]
   10856:	4618      	mov	r0, r3
   10858:	3708      	adds	r7, #8
   1085a:	46bd      	mov	sp, r7
   1085c:	bd80      	pop	{r7, pc}
   1085e:	bf00      	nop
   10860:	00017e6c 	.word	0x00017e6c
   10864:	00010c1d 	.word	0x00010c1d
   10868:	0001388d 	.word	0x0001388d
   1086c:	00017e84 	.word	0x00017e84
   10870:	00011241 	.word	0x00011241
   10874:	00010421 	.word	0x00010421

00010878 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   10878:	b580      	push	{r7, lr}
   1087a:	b082      	sub	sp, #8
   1087c:	af00      	add	r7, sp, #0
   1087e:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   10880:	6878      	ldr	r0, [r7, #4]
   10882:	4b06      	ldr	r3, [pc, #24]	; (1089c <_ZN15ARINC_InterfaceD0Ev+0x24>)
   10884:	4798      	blx	r3
   10886:	f44f 7143 	mov.w	r1, #780	; 0x30c
   1088a:	6878      	ldr	r0, [r7, #4]
   1088c:	4b04      	ldr	r3, [pc, #16]	; (108a0 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   1088e:	4798      	blx	r3
   10890:	687b      	ldr	r3, [r7, #4]
   10892:	4618      	mov	r0, r3
   10894:	3708      	adds	r7, #8
   10896:	46bd      	mov	sp, r7
   10898:	bd80      	pop	{r7, pc}
   1089a:	bf00      	nop
   1089c:	00010815 	.word	0x00010815
   108a0:	00014925 	.word	0x00014925

000108a4 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   108a4:	b590      	push	{r4, r7, lr}
   108a6:	b083      	sub	sp, #12
   108a8:	af00      	add	r7, sp, #0
   108aa:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	2200      	movs	r2, #0
   108b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   108b4:	687b      	ldr	r3, [r7, #4]
   108b6:	2200      	movs	r2, #0
   108b8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
   108bc:	687b      	ldr	r3, [r7, #4]
   108be:	2200      	movs	r2, #0
   108c0:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	BITRATE0=false;
   108c4:	687b      	ldr	r3, [r7, #4]
   108c6:	2200      	movs	r2, #0
   108c8:	731a      	strb	r2, [r3, #12]
	BITRATE1=false;
   108ca:	687b      	ldr	r3, [r7, #4]
   108cc:	2200      	movs	r2, #0
   108ce:	735a      	strb	r2, [r3, #13]
	BITRATE2=false;
   108d0:	687b      	ldr	r3, [r7, #4]
   108d2:	2200      	movs	r2, #0
   108d4:	739a      	strb	r2, [r3, #14]

	PARITY=false;
   108d6:	687b      	ldr	r3, [r7, #4]
   108d8:	2200      	movs	r2, #0
   108da:	73da      	strb	r2, [r3, #15]
	HW_RESET();
   108dc:	6878      	ldr	r0, [r7, #4]
   108de:	4b4f      	ldr	r3, [pc, #316]	; (10a1c <_ZN15ARINC_Interface4InitEv+0x178>)
   108e0:	4798      	blx	r3
	statusHolt=HI3593.Init();
   108e2:	687b      	ldr	r3, [r7, #4]
   108e4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   108e8:	4618      	mov	r0, r3
   108ea:	4b4d      	ldr	r3, [pc, #308]	; (10a20 <_ZN15ARINC_Interface4InitEv+0x17c>)
   108ec:	4798      	blx	r3
   108ee:	4603      	mov	r3, r0
   108f0:	461a      	mov	r2, r3
   108f2:	687b      	ldr	r3, [r7, #4]
   108f4:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
	if (statusHolt!=TSR_Default){
   108f8:	687b      	ldr	r3, [r7, #4]
   108fa:	f893 31a3 	ldrb.w	r3, [r3, #419]	; 0x1a3
   108fe:	2b01      	cmp	r3, #1
   10900:	d008      	beq.n	10914 <_ZN15ARINC_Interface4InitEv+0x70>
		usb.println("\n\rHI-3593 failed to initilize\n\r");
   10902:	4948      	ldr	r1, [pc, #288]	; (10a24 <_ZN15ARINC_Interface4InitEv+0x180>)
   10904:	4848      	ldr	r0, [pc, #288]	; (10a28 <_ZN15ARINC_Interface4InitEv+0x184>)
   10906:	4b49      	ldr	r3, [pc, #292]	; (10a2c <_ZN15ARINC_Interface4InitEv+0x188>)
   10908:	4798      	blx	r3
		isOK=false;
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	2200      	movs	r2, #0
   1090e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
   10912:	e069      	b.n	109e8 <_ZN15ARINC_Interface4InitEv+0x144>
	}else{
		isOK=true;
   10914:	687b      	ldr	r3, [r7, #4]
   10916:	2201      	movs	r2, #1
   10918:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
		newMessageR1=false;
   1091c:	687b      	ldr	r3, [r7, #4]
   1091e:	2200      	movs	r2, #0
   10920:	741a      	strb	r2, [r3, #16]
			BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   10922:	687b      	ldr	r3, [r7, #4]
   10924:	2200      	movs	r2, #0
   10926:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
			MessageCount=0;
   1092a:	687b      	ldr	r3, [r7, #4]
   1092c:	2200      	movs	r2, #0
   1092e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			ARINCLabel = 0x1D;         // Write ARINC Label
   10932:	687b      	ldr	r3, [r7, #4]
   10934:	221d      	movs	r2, #29
   10936:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
			Arate=0;
   1093a:	687b      	ldr	r3, [r7, #4]
   1093c:	2200      	movs	r2, #0
   1093e:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   10942:	687b      	ldr	r3, [r7, #4]
   10944:	3312      	adds	r3, #18
   10946:	2210      	movs	r2, #16
   10948:	2100      	movs	r1, #0
   1094a:	4618      	mov	r0, r3
   1094c:	4b38      	ldr	r3, [pc, #224]	; (10a30 <_ZN15ARINC_Interface4InitEv+0x18c>)
   1094e:	4798      	blx	r3
			
			// Setup the Labels
			HI3593.initReceiver1Labels();     // initial Rec1 labels
   10950:	687b      	ldr	r3, [r7, #4]
   10952:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   10956:	4618      	mov	r0, r3
   10958:	4b36      	ldr	r3, [pc, #216]	; (10a34 <_ZN15ARINC_Interface4InitEv+0x190>)
   1095a:	4798      	blx	r3
			HI3593.initReceiver2Labels();     // initial Rec2 labels
   1095c:	687b      	ldr	r3, [r7, #4]
   1095e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   10962:	4618      	mov	r0, r3
   10964:	4b34      	ldr	r3, [pc, #208]	; (10a38 <_ZN15ARINC_Interface4InitEv+0x194>)
   10966:	4798      	blx	r3
			HI3593.MultiByteRead(REC1MEMORY, 32, LabelsAr1); // read in all Rec-1 labels into the passed array
   10968:	687b      	ldr	r3, [r7, #4]
   1096a:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	f503 73b1 	add.w	r3, r3, #354	; 0x162
   10974:	2220      	movs	r2, #32
   10976:	2198      	movs	r1, #152	; 0x98
   10978:	4c30      	ldr	r4, [pc, #192]	; (10a3c <_ZN15ARINC_Interface4InitEv+0x198>)
   1097a:	47a0      	blx	r4
			HI3593.MultiByteRead(REC2MEMORY, 32, LabelsAr2); // read in all Rec-2 labels into the passed array
   1097c:	687b      	ldr	r3, [r7, #4]
   1097e:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
   10982:	687b      	ldr	r3, [r7, #4]
   10984:	f503 73c1 	add.w	r3, r3, #386	; 0x182
   10988:	2220      	movs	r2, #32
   1098a:	21b8      	movs	r1, #184	; 0xb8
   1098c:	4c2b      	ldr	r4, [pc, #172]	; (10a3c <_ZN15ARINC_Interface4InitEv+0x198>)
   1098e:	47a0      	blx	r4

			Rec1Parity =0;
   10990:	687b      	ldr	r3, [r7, #4]
   10992:	2200      	movs	r2, #0
   10994:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
			Rec2Parity =0;
   10998:	687b      	ldr	r3, [r7, #4]
   1099a:	2200      	movs	r2, #0
   1099c:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af


			HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
   109a0:	687b      	ldr	r3, [r7, #4]
   109a2:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
   109a6:	687b      	ldr	r3, [r7, #4]
   109a8:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   109ac:	687b      	ldr	r3, [r7, #4]
   109ae:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   109b2:	4313      	orrs	r3, r2
   109b4:	b2db      	uxtb	r3, r3
   109b6:	f063 0379 	orn	r3, r3, #121	; 0x79
   109ba:	b2db      	uxtb	r3, r3
   109bc:	461a      	mov	r2, r3
   109be:	2110      	movs	r1, #16
   109c0:	4b1f      	ldr	r3, [pc, #124]	; (10a40 <_ZN15ARINC_Interface4InitEv+0x19c>)
   109c2:	4798      	blx	r3
			HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
   109c4:	687b      	ldr	r3, [r7, #4]
   109c6:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
   109ca:	687b      	ldr	r3, [r7, #4]
   109cc:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   109d0:	687b      	ldr	r3, [r7, #4]
   109d2:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
   109d6:	4313      	orrs	r3, r2
   109d8:	b2db      	uxtb	r3, r3
   109da:	f063 0379 	orn	r3, r3, #121	; 0x79
   109de:	b2db      	uxtb	r3, r3
   109e0:	461a      	mov	r2, r3
   109e2:	2124      	movs	r1, #36	; 0x24
   109e4:	4b16      	ldr	r3, [pc, #88]	; (10a40 <_ZN15ARINC_Interface4InitEv+0x19c>)
   109e6:	4798      	blx	r3
	}
	
	timer.Init(&TIMER_ARINC);
   109e8:	687b      	ldr	r3, [r7, #4]
   109ea:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   109ee:	4915      	ldr	r1, [pc, #84]	; (10a44 <_ZN15ARINC_Interface4InitEv+0x1a0>)
   109f0:	4618      	mov	r0, r3
   109f2:	4b15      	ldr	r3, [pc, #84]	; (10a48 <_ZN15ARINC_Interface4InitEv+0x1a4>)
   109f4:	4798      	blx	r3
	timer.add_periodic_task(blink_LED0,1);
   109f6:	687b      	ldr	r3, [r7, #4]
   109f8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
   109fc:	2201      	movs	r2, #1
   109fe:	4913      	ldr	r1, [pc, #76]	; (10a4c <_ZN15ARINC_Interface4InitEv+0x1a8>)
   10a00:	4618      	mov	r0, r3
   10a02:	4b13      	ldr	r3, [pc, #76]	; (10a50 <_ZN15ARINC_Interface4InitEv+0x1ac>)
   10a04:	4798      	blx	r3
	ext_irq_register(R1Int, Receiver1Int);
   10a06:	4913      	ldr	r1, [pc, #76]	; (10a54 <_ZN15ARINC_Interface4InitEv+0x1b0>)
   10a08:	2057      	movs	r0, #87	; 0x57
   10a0a:	4b13      	ldr	r3, [pc, #76]	; (10a58 <_ZN15ARINC_Interface4InitEv+0x1b4>)
   10a0c:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   10a0e:	687b      	ldr	r3, [r7, #4]
   10a10:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
}
   10a14:	4618      	mov	r0, r3
   10a16:	370c      	adds	r7, #12
   10a18:	46bd      	mov	sp, r7
   10a1a:	bd90      	pop	{r4, r7, pc}
   10a1c:	00010abd 	.word	0x00010abd
   10a20:	00010c3d 	.word	0x00010c3d
   10a24:	00017490 	.word	0x00017490
   10a28:	20004d34 	.word	0x20004d34
   10a2c:	000140b9 	.word	0x000140b9
   10a30:	00016661 	.word	0x00016661
   10a34:	00010e51 	.word	0x00010e51
   10a38:	00010fb9 	.word	0x00010fb9
   10a3c:	00011025 	.word	0x00011025
   10a40:	0001114d 	.word	0x0001114d
   10a44:	20004f94 	.word	0x20004f94
   10a48:	000138a9 	.word	0x000138a9
   10a4c:	00010679 	.word	0x00010679
   10a50:	0001394d 	.word	0x0001394d
   10a54:	0001068d 	.word	0x0001068d
   10a58:	00004811 	.word	0x00004811

00010a5c <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   10a5c:	b480      	push	{r7}
   10a5e:	b085      	sub	sp, #20
   10a60:	af00      	add	r7, sp, #0
   10a62:	6078      	str	r0, [r7, #4]
   10a64:	460b      	mov	r3, r1
   10a66:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10a68:	2300      	movs	r3, #0
   10a6a:	73fb      	strb	r3, [r7, #15]
   10a6c:	7bfb      	ldrb	r3, [r7, #15]
   10a6e:	2b3f      	cmp	r3, #63	; 0x3f
   10a70:	dc1e      	bgt.n	10ab0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   10a72:	687b      	ldr	r3, [r7, #4]
   10a74:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   10a78:	7bfb      	ldrb	r3, [r7, #15]
   10a7a:	4413      	add	r3, r2
   10a7c:	b2db      	uxtb	r3, r3
   10a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10a82:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   10a84:	7bbb      	ldrb	r3, [r7, #14]
   10a86:	687a      	ldr	r2, [r7, #4]
   10a88:	009b      	lsls	r3, r3, #2
   10a8a:	4413      	add	r3, r2
   10a8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   10a90:	78fa      	ldrb	r2, [r7, #3]
   10a92:	429a      	cmp	r2, r3
   10a94:	d108      	bne.n	10aa8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
   10a96:	7bbb      	ldrb	r3, [r7, #14]
   10a98:	3310      	adds	r3, #16
   10a9a:	009b      	lsls	r3, r3, #2
   10a9c:	687a      	ldr	r2, [r7, #4]
   10a9e:	4413      	add	r3, r2
   10aa0:	60bb      	str	r3, [r7, #8]
			return *data;
   10aa2:	68bb      	ldr	r3, [r7, #8]
   10aa4:	681b      	ldr	r3, [r3, #0]
   10aa6:	e004      	b.n	10ab2 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   10aa8:	7bfb      	ldrb	r3, [r7, #15]
   10aaa:	3301      	adds	r3, #1
   10aac:	73fb      	strb	r3, [r7, #15]
   10aae:	e7dd      	b.n	10a6c <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   10ab0:	2300      	movs	r3, #0
}
   10ab2:	4618      	mov	r0, r3
   10ab4:	3714      	adds	r7, #20
   10ab6:	46bd      	mov	sp, r7
   10ab8:	bc80      	pop	{r7}
   10aba:	4770      	bx	lr

00010abc <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   10abc:	b580      	push	{r7, lr}
   10abe:	b082      	sub	sp, #8
   10ac0:	af00      	add	r7, sp, #0
   10ac2:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   10ac4:	2001      	movs	r0, #1
   10ac6:	4b03      	ldr	r3, [pc, #12]	; (10ad4 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   10ac8:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   10aca:	bf00      	nop
   10acc:	3708      	adds	r7, #8
   10ace:	46bd      	mov	sp, r7
   10ad0:	bd80      	pop	{r7, pc}
   10ad2:	bf00      	nop
   10ad4:	00004749 	.word	0x00004749

00010ad8 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

   10ad8:	b580      	push	{r7, lr}
   10ada:	b082      	sub	sp, #8
   10adc:	af00      	add	r7, sp, #0
   10ade:	6078      	str	r0, [r7, #4]
   10ae0:	6039      	str	r1, [r7, #0]
   10ae2:	687b      	ldr	r3, [r7, #4]
   10ae4:	2b01      	cmp	r3, #1
   10ae6:	d10c      	bne.n	10b02 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10ae8:	683b      	ldr	r3, [r7, #0]
   10aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10aee:	4293      	cmp	r3, r2
   10af0:	d107      	bne.n	10b02 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10af2:	4806      	ldr	r0, [pc, #24]	; (10b0c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10af4:	4b06      	ldr	r3, [pc, #24]	; (10b10 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10af6:	4798      	blx	r3
   10af8:	4a06      	ldr	r2, [pc, #24]	; (10b14 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10afa:	4907      	ldr	r1, [pc, #28]	; (10b18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10afc:	4803      	ldr	r0, [pc, #12]	; (10b0c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10afe:	4b07      	ldr	r3, [pc, #28]	; (10b1c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10b00:	4798      	blx	r3
   10b02:	bf00      	nop
   10b04:	3708      	adds	r7, #8
   10b06:	46bd      	mov	sp, r7
   10b08:	bd80      	pop	{r7, pc}
   10b0a:	bf00      	nop
   10b0c:	20003574 	.word	0x20003574
   10b10:	00010745 	.word	0x00010745
   10b14:	20000000 	.word	0x20000000
   10b18:	00010815 	.word	0x00010815
   10b1c:	00014919 	.word	0x00014919

00010b20 <_GLOBAL__sub_I_HexSymbols>:
   10b20:	b580      	push	{r7, lr}
   10b22:	af00      	add	r7, sp, #0
   10b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10b28:	2001      	movs	r0, #1
   10b2a:	4b01      	ldr	r3, [pc, #4]	; (10b30 <_GLOBAL__sub_I_HexSymbols+0x10>)
   10b2c:	4798      	blx	r3
   10b2e:	bd80      	pop	{r7, pc}
   10b30:	00010ad9 	.word	0x00010ad9

00010b34 <hri_port_set_OUT_reg>:
{
   10b34:	b480      	push	{r7}
   10b36:	b085      	sub	sp, #20
   10b38:	af00      	add	r7, sp, #0
   10b3a:	60f8      	str	r0, [r7, #12]
   10b3c:	460b      	mov	r3, r1
   10b3e:	607a      	str	r2, [r7, #4]
   10b40:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10b42:	7afb      	ldrb	r3, [r7, #11]
   10b44:	68fa      	ldr	r2, [r7, #12]
   10b46:	01db      	lsls	r3, r3, #7
   10b48:	4413      	add	r3, r2
   10b4a:	3318      	adds	r3, #24
   10b4c:	687a      	ldr	r2, [r7, #4]
   10b4e:	601a      	str	r2, [r3, #0]
}
   10b50:	bf00      	nop
   10b52:	3714      	adds	r7, #20
   10b54:	46bd      	mov	sp, r7
   10b56:	bc80      	pop	{r7}
   10b58:	4770      	bx	lr

00010b5a <hri_port_clear_OUT_reg>:
{
   10b5a:	b480      	push	{r7}
   10b5c:	b085      	sub	sp, #20
   10b5e:	af00      	add	r7, sp, #0
   10b60:	60f8      	str	r0, [r7, #12]
   10b62:	460b      	mov	r3, r1
   10b64:	607a      	str	r2, [r7, #4]
   10b66:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10b68:	7afb      	ldrb	r3, [r7, #11]
   10b6a:	68fa      	ldr	r2, [r7, #12]
   10b6c:	01db      	lsls	r3, r3, #7
   10b6e:	4413      	add	r3, r2
   10b70:	3314      	adds	r3, #20
   10b72:	687a      	ldr	r2, [r7, #4]
   10b74:	601a      	str	r2, [r3, #0]
}
   10b76:	bf00      	nop
   10b78:	3714      	adds	r7, #20
   10b7a:	46bd      	mov	sp, r7
   10b7c:	bc80      	pop	{r7}
   10b7e:	4770      	bx	lr

00010b80 <_gpio_set_level>:
{
   10b80:	b580      	push	{r7, lr}
   10b82:	b082      	sub	sp, #8
   10b84:	af00      	add	r7, sp, #0
   10b86:	4603      	mov	r3, r0
   10b88:	6039      	str	r1, [r7, #0]
   10b8a:	71fb      	strb	r3, [r7, #7]
   10b8c:	4613      	mov	r3, r2
   10b8e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10b90:	79bb      	ldrb	r3, [r7, #6]
   10b92:	2b00      	cmp	r3, #0
   10b94:	d006      	beq.n	10ba4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10b96:	79fb      	ldrb	r3, [r7, #7]
   10b98:	683a      	ldr	r2, [r7, #0]
   10b9a:	4619      	mov	r1, r3
   10b9c:	4806      	ldr	r0, [pc, #24]	; (10bb8 <_gpio_set_level+0x38>)
   10b9e:	4b07      	ldr	r3, [pc, #28]	; (10bbc <_gpio_set_level+0x3c>)
   10ba0:	4798      	blx	r3
}
   10ba2:	e005      	b.n	10bb0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10ba4:	79fb      	ldrb	r3, [r7, #7]
   10ba6:	683a      	ldr	r2, [r7, #0]
   10ba8:	4619      	mov	r1, r3
   10baa:	4803      	ldr	r0, [pc, #12]	; (10bb8 <_gpio_set_level+0x38>)
   10bac:	4b04      	ldr	r3, [pc, #16]	; (10bc0 <_gpio_set_level+0x40>)
   10bae:	4798      	blx	r3
}
   10bb0:	bf00      	nop
   10bb2:	3708      	adds	r7, #8
   10bb4:	46bd      	mov	sp, r7
   10bb6:	bd80      	pop	{r7, pc}
   10bb8:	41008000 	.word	0x41008000
   10bbc:	00010b35 	.word	0x00010b35
   10bc0:	00010b5b 	.word	0x00010b5b

00010bc4 <gpio_set_pin_level>:
{
   10bc4:	b580      	push	{r7, lr}
   10bc6:	b082      	sub	sp, #8
   10bc8:	af00      	add	r7, sp, #0
   10bca:	4603      	mov	r3, r0
   10bcc:	460a      	mov	r2, r1
   10bce:	71fb      	strb	r3, [r7, #7]
   10bd0:	4613      	mov	r3, r2
   10bd2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10bd4:	79fb      	ldrb	r3, [r7, #7]
   10bd6:	115b      	asrs	r3, r3, #5
   10bd8:	b2d8      	uxtb	r0, r3
   10bda:	79fb      	ldrb	r3, [r7, #7]
   10bdc:	f003 031f 	and.w	r3, r3, #31
   10be0:	2201      	movs	r2, #1
   10be2:	fa02 f303 	lsl.w	r3, r2, r3
   10be6:	79ba      	ldrb	r2, [r7, #6]
   10be8:	4619      	mov	r1, r3
   10bea:	4b03      	ldr	r3, [pc, #12]	; (10bf8 <gpio_set_pin_level+0x34>)
   10bec:	4798      	blx	r3
}
   10bee:	bf00      	nop
   10bf0:	3708      	adds	r7, #8
   10bf2:	46bd      	mov	sp, r7
   10bf4:	bd80      	pop	{r7, pc}
   10bf6:	bf00      	nop
   10bf8:	00010b81 	.word	0x00010b81

00010bfc <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   10bfc:	b580      	push	{r7, lr}
   10bfe:	b082      	sub	sp, #8
   10c00:	af00      	add	r7, sp, #0
   10c02:	6078      	str	r0, [r7, #4]
   10c04:	687b      	ldr	r3, [r7, #4]
   10c06:	4618      	mov	r0, r3
   10c08:	4b03      	ldr	r3, [pc, #12]	; (10c18 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   10c0a:	4798      	blx	r3
{
} //Holt_3593_Class
   10c0c:	687b      	ldr	r3, [r7, #4]
   10c0e:	4618      	mov	r0, r3
   10c10:	3708      	adds	r7, #8
   10c12:	46bd      	mov	sp, r7
   10c14:	bd80      	pop	{r7, pc}
   10c16:	bf00      	nop
   10c18:	00011dd9 	.word	0x00011dd9

00010c1c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   10c1c:	b580      	push	{r7, lr}
   10c1e:	b082      	sub	sp, #8
   10c20:	af00      	add	r7, sp, #0
   10c22:	6078      	str	r0, [r7, #4]
   10c24:	687b      	ldr	r3, [r7, #4]
   10c26:	4618      	mov	r0, r3
   10c28:	4b03      	ldr	r3, [pc, #12]	; (10c38 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   10c2a:	4798      	blx	r3
{
} //~Holt_3593_Class
   10c2c:	687b      	ldr	r3, [r7, #4]
   10c2e:	4618      	mov	r0, r3
   10c30:	3708      	adds	r7, #8
   10c32:	46bd      	mov	sp, r7
   10c34:	bd80      	pop	{r7, pc}
   10c36:	bf00      	nop
   10c38:	00011df9 	.word	0x00011df9

00010c3c <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   10c3c:	b590      	push	{r4, r7, lr}
   10c3e:	b089      	sub	sp, #36	; 0x24
   10c40:	af02      	add	r7, sp, #8
   10c42:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   10c44:	687b      	ldr	r3, [r7, #4]
   10c46:	492d      	ldr	r1, [pc, #180]	; (10cfc <_ZN15Holt_3593_Class4InitEv+0xc0>)
   10c48:	4618      	mov	r0, r3
   10c4a:	4b2d      	ldr	r3, [pc, #180]	; (10d00 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   10c4c:	4798      	blx	r3
	  spi.init();
   10c4e:	687b      	ldr	r3, [r7, #4]
   10c50:	4618      	mov	r0, r3
   10c52:	4b2c      	ldr	r3, [pc, #176]	; (10d04 <_ZN15Holt_3593_Class4InitEv+0xc8>)
   10c54:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   10c56:	2340      	movs	r3, #64	; 0x40
   10c58:	9301      	str	r3, [sp, #4]
   10c5a:	2300      	movs	r3, #0
   10c5c:	9300      	str	r3, [sp, #0]
   10c5e:	2300      	movs	r3, #0
   10c60:	2201      	movs	r2, #1
   10c62:	2104      	movs	r1, #4
   10c64:	6878      	ldr	r0, [r7, #4]
   10c66:	4c28      	ldr	r4, [pc, #160]	; (10d08 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   10c68:	47a0      	blx	r4
   10c6a:	4603      	mov	r3, r0
   10c6c:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   10c6e:	2300      	movs	r3, #0
   10c70:	617b      	str	r3, [r7, #20]
   10c72:	697b      	ldr	r3, [r7, #20]
   10c74:	2b1f      	cmp	r3, #31
   10c76:	dc1b      	bgt.n	10cb0 <_ZN15Holt_3593_Class4InitEv+0x74>
	{
		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
   10c78:	4a24      	ldr	r2, [pc, #144]	; (10d0c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   10c7a:	697b      	ldr	r3, [r7, #20]
   10c7c:	4413      	add	r3, r2
   10c7e:	781b      	ldrb	r3, [r3, #0]
   10c80:	4619      	mov	r1, r3
   10c82:	6878      	ldr	r0, [r7, #4]
   10c84:	4b22      	ldr	r3, [pc, #136]	; (10d10 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   10c86:	4798      	blx	r3
   10c88:	4603      	mov	r3, r0
   10c8a:	4619      	mov	r1, r3
   10c8c:	4a21      	ldr	r2, [pc, #132]	; (10d14 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   10c8e:	697b      	ldr	r3, [r7, #20]
   10c90:	4413      	add	r3, r2
   10c92:	460a      	mov	r2, r1
   10c94:	701a      	strb	r2, [r3, #0]
		LabelArray_1[i]=LabelArray_2[i];
   10c96:	4a1f      	ldr	r2, [pc, #124]	; (10d14 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   10c98:	697b      	ldr	r3, [r7, #20]
   10c9a:	4413      	add	r3, r2
   10c9c:	7819      	ldrb	r1, [r3, #0]
   10c9e:	4a1b      	ldr	r2, [pc, #108]	; (10d0c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   10ca0:	697b      	ldr	r3, [r7, #20]
   10ca2:	4413      	add	r3, r2
   10ca4:	460a      	mov	r2, r1
   10ca6:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   10ca8:	697b      	ldr	r3, [r7, #20]
   10caa:	3301      	adds	r3, #1
   10cac:	617b      	str	r3, [r7, #20]
   10cae:	e7e0      	b.n	10c72 <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   10cb0:	2300      	movs	r3, #0
   10cb2:	613b      	str	r3, [r7, #16]
   10cb4:	693b      	ldr	r3, [r7, #16]
   10cb6:	2b02      	cmp	r3, #2
   10cb8:	dc1b      	bgt.n	10cf2 <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		LabelPriority2[i]=FlipByte(LabelPriority1[i]);
   10cba:	4a17      	ldr	r2, [pc, #92]	; (10d18 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   10cbc:	693b      	ldr	r3, [r7, #16]
   10cbe:	4413      	add	r3, r2
   10cc0:	781b      	ldrb	r3, [r3, #0]
   10cc2:	4619      	mov	r1, r3
   10cc4:	6878      	ldr	r0, [r7, #4]
   10cc6:	4b12      	ldr	r3, [pc, #72]	; (10d10 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   10cc8:	4798      	blx	r3
   10cca:	4603      	mov	r3, r0
   10ccc:	4619      	mov	r1, r3
   10cce:	4a13      	ldr	r2, [pc, #76]	; (10d1c <_ZN15Holt_3593_Class4InitEv+0xe0>)
   10cd0:	693b      	ldr	r3, [r7, #16]
   10cd2:	4413      	add	r3, r2
   10cd4:	460a      	mov	r2, r1
   10cd6:	701a      	strb	r2, [r3, #0]
		LabelPriority1[i]=LabelPriority2[i];
   10cd8:	4a10      	ldr	r2, [pc, #64]	; (10d1c <_ZN15Holt_3593_Class4InitEv+0xe0>)
   10cda:	693b      	ldr	r3, [r7, #16]
   10cdc:	4413      	add	r3, r2
   10cde:	7819      	ldrb	r1, [r3, #0]
   10ce0:	4a0d      	ldr	r2, [pc, #52]	; (10d18 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   10ce2:	693b      	ldr	r3, [r7, #16]
   10ce4:	4413      	add	r3, r2
   10ce6:	460a      	mov	r2, r1
   10ce8:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   10cea:	693b      	ldr	r3, [r7, #16]
   10cec:	3301      	adds	r3, #1
   10cee:	613b      	str	r3, [r7, #16]
   10cf0:	e7e0      	b.n	10cb4 <_ZN15Holt_3593_Class4InitEv+0x78>
	}
	return	status;
   10cf2:	7bfb      	ldrb	r3, [r7, #15]
 } 
   10cf4:	4618      	mov	r0, r3
   10cf6:	371c      	adds	r7, #28
   10cf8:	46bd      	mov	sp, r7
   10cfa:	bd90      	pop	{r4, r7, pc}
   10cfc:	20004e98 	.word	0x20004e98
   10d00:	00011e45 	.word	0x00011e45
   10d04:	00011e0d 	.word	0x00011e0d
   10d08:	00010d21 	.word	0x00010d21
   10d0c:	200001a0 	.word	0x200001a0
   10d10:	00010ebd 	.word	0x00010ebd
   10d14:	20003880 	.word	0x20003880
   10d18:	200001c0 	.word	0x200001c0
   10d1c:	200038a0 	.word	0x200038a0

00010d20 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   10d20:	b580      	push	{r7, lr}
   10d22:	b084      	sub	sp, #16
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
   10d28:	4608      	mov	r0, r1
   10d2a:	4611      	mov	r1, r2
   10d2c:	461a      	mov	r2, r3
   10d2e:	4603      	mov	r3, r0
   10d30:	70fb      	strb	r3, [r7, #3]
   10d32:	460b      	mov	r3, r1
   10d34:	70bb      	strb	r3, [r7, #2]
   10d36:	4613      	mov	r3, r2
   10d38:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   10d3a:	2300      	movs	r3, #0
   10d3c:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   10d3e:	2104      	movs	r1, #4
   10d40:	6878      	ldr	r0, [r7, #4]
   10d42:	4b18      	ldr	r3, [pc, #96]	; (10da4 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   10d44:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   10d46:	78fb      	ldrb	r3, [r7, #3]
   10d48:	461a      	mov	r2, r3
   10d4a:	2138      	movs	r1, #56	; 0x38
   10d4c:	6878      	ldr	r0, [r7, #4]
   10d4e:	4b16      	ldr	r3, [pc, #88]	; (10da8 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   10d50:	4798      	blx	r3
	 cmd =  arate;
   10d52:	7e3b      	ldrb	r3, [r7, #24]
   10d54:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   10d56:	787b      	ldrb	r3, [r7, #1]
   10d58:	011b      	lsls	r3, r3, #4
   10d5a:	b25a      	sxtb	r2, r3
   10d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10d60:	4313      	orrs	r3, r2
   10d62:	b25b      	sxtb	r3, r3
   10d64:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   10d66:	78bb      	ldrb	r3, [r7, #2]
   10d68:	015b      	lsls	r3, r3, #5
   10d6a:	b25a      	sxtb	r2, r3
   10d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10d70:	4313      	orrs	r3, r2
   10d72:	b25b      	sxtb	r3, r3
   10d74:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   10d76:	7f3b      	ldrb	r3, [r7, #28]
   10d78:	019b      	lsls	r3, r3, #6
   10d7a:	b25a      	sxtb	r2, r3
   10d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10d80:	4313      	orrs	r3, r2
   10d82:	b25b      	sxtb	r3, r3
   10d84:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   10d86:	7bfb      	ldrb	r3, [r7, #15]
   10d88:	461a      	mov	r2, r3
   10d8a:	2108      	movs	r1, #8
   10d8c:	6878      	ldr	r0, [r7, #4]
   10d8e:	4b06      	ldr	r3, [pc, #24]	; (10da8 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   10d90:	4798      	blx	r3
	 return R_Register (R_TSR);
   10d92:	2180      	movs	r1, #128	; 0x80
   10d94:	6878      	ldr	r0, [r7, #4]
   10d96:	4b05      	ldr	r3, [pc, #20]	; (10dac <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   10d98:	4798      	blx	r3
   10d9a:	4603      	mov	r3, r0
	 
	 
 }
   10d9c:	4618      	mov	r0, r3
   10d9e:	3710      	adds	r7, #16
   10da0:	46bd      	mov	sp, r7
   10da2:	bd80      	pop	{r7, pc}
   10da4:	000110f9 	.word	0x000110f9
   10da8:	0001114d 	.word	0x0001114d
   10dac:	000111c1 	.word	0x000111c1

00010db0 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   10db0:	b580      	push	{r7, lr}
   10db2:	b082      	sub	sp, #8
   10db4:	af00      	add	r7, sp, #0
   10db6:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   10db8:	687b      	ldr	r3, [r7, #4]
   10dba:	4618      	mov	r0, r3
   10dbc:	4b04      	ldr	r3, [pc, #16]	; (10dd0 <_ZN15Holt_3593_Class4openEv+0x20>)
   10dbe:	4798      	blx	r3
		 SS_Low();
   10dc0:	6878      	ldr	r0, [r7, #4]
   10dc2:	4b04      	ldr	r3, [pc, #16]	; (10dd4 <_ZN15Holt_3593_Class4openEv+0x24>)
   10dc4:	4798      	blx	r3
 }
   10dc6:	bf00      	nop
   10dc8:	3708      	adds	r7, #8
   10dca:	46bd      	mov	sp, r7
   10dcc:	bd80      	pop	{r7, pc}
   10dce:	bf00      	nop
   10dd0:	00011e69 	.word	0x00011e69
   10dd4:	00011209 	.word	0x00011209

00010dd8 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   10dd8:	b580      	push	{r7, lr}
   10dda:	b082      	sub	sp, #8
   10ddc:	af00      	add	r7, sp, #0
   10dde:	6078      	str	r0, [r7, #4]
	    SS_High();
   10de0:	6878      	ldr	r0, [r7, #4]
   10de2:	4b05      	ldr	r3, [pc, #20]	; (10df8 <_ZN15Holt_3593_Class5closeEv+0x20>)
   10de4:	4798      	blx	r3
	  spi.disable();
   10de6:	687b      	ldr	r3, [r7, #4]
   10de8:	4618      	mov	r0, r3
   10dea:	4b04      	ldr	r3, [pc, #16]	; (10dfc <_ZN15Holt_3593_Class5closeEv+0x24>)
   10dec:	4798      	blx	r3
	
  }
   10dee:	bf00      	nop
   10df0:	3708      	adds	r7, #8
   10df2:	46bd      	mov	sp, r7
   10df4:	bd80      	pop	{r7, pc}
   10df6:	bf00      	nop
   10df8:	00011225 	.word	0x00011225
   10dfc:	00011f2d 	.word	0x00011f2d

00010e00 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   10e00:	b580      	push	{r7, lr}
   10e02:	b084      	sub	sp, #16
   10e04:	af00      	add	r7, sp, #0
   10e06:	6078      	str	r0, [r7, #4]
   10e08:	460b      	mov	r3, r1
   10e0a:	70fb      	strb	r3, [r7, #3]
   10e0c:	4613      	mov	r3, r2
   10e0e:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   10e10:	78fb      	ldrb	r3, [r7, #3]
   10e12:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   10e14:	7bfb      	ldrb	r3, [r7, #15]
   10e16:	4619      	mov	r1, r3
   10e18:	6878      	ldr	r0, [r7, #4]
   10e1a:	4b0b      	ldr	r3, [pc, #44]	; (10e48 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   10e1c:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   10e1e:	78bb      	ldrb	r3, [r7, #2]
   10e20:	2b00      	cmp	r3, #0
   10e22:	d00a      	beq.n	10e3a <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   10e24:	687b      	ldr	r3, [r7, #4]
   10e26:	4618      	mov	r0, r3
   10e28:	4b08      	ldr	r3, [pc, #32]	; (10e4c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   10e2a:	4798      	blx	r3
   10e2c:	4603      	mov	r3, r0
   10e2e:	f083 0301 	eor.w	r3, r3, #1
   10e32:	b2db      	uxtb	r3, r3
   10e34:	2b00      	cmp	r3, #0
   10e36:	d000      	beq.n	10e3a <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   10e38:	e7f4      	b.n	10e24 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   10e3a:	78fb      	ldrb	r3, [r7, #3]
   10e3c:	73bb      	strb	r3, [r7, #14]
   10e3e:	7bbb      	ldrb	r3, [r7, #14]
  
}
   10e40:	4618      	mov	r0, r3
   10e42:	3710      	adds	r7, #16
   10e44:	46bd      	mov	sp, r7
   10e46:	bd80      	pop	{r7, pc}
   10e48:	00010f0d 	.word	0x00010f0d
   10e4c:	00011f4d 	.word	0x00011f4d

00010e50 <_ZN15Holt_3593_Class19initReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::initReceiver1Labels(void)
{
   10e50:	b580      	push	{r7, lr}
   10e52:	b084      	sub	sp, #16
   10e54:	af00      	add	r7, sp, #0
   10e56:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   10e58:	6878      	ldr	r0, [r7, #4]
   10e5a:	4b14      	ldr	r3, [pc, #80]	; (10eac <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x5c>)
   10e5c:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   10e5e:	2201      	movs	r2, #1
   10e60:	2114      	movs	r1, #20
   10e62:	6878      	ldr	r0, [r7, #4]
   10e64:	4b12      	ldr	r3, [pc, #72]	; (10eb0 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   10e66:	4798      	blx	r3
   10e68:	4603      	mov	r3, r0
   10e6a:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   10e6c:	231f      	movs	r3, #31
   10e6e:	73fb      	strb	r3, [r7, #15]
   10e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10e74:	2b00      	cmp	r3, #0
   10e76:	db11      	blt.n	10e9c <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   10e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10e7c:	4a0d      	ldr	r2, [pc, #52]	; (10eb4 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x64>)
   10e7e:	5cd3      	ldrb	r3, [r2, r3]
   10e80:	2201      	movs	r2, #1
   10e82:	4619      	mov	r1, r3
   10e84:	6878      	ldr	r0, [r7, #4]
   10e86:	4b0a      	ldr	r3, [pc, #40]	; (10eb0 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x60>)
   10e88:	4798      	blx	r3
   10e8a:	4603      	mov	r3, r0
   10e8c:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   10e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10e92:	b2db      	uxtb	r3, r3
   10e94:	3b01      	subs	r3, #1
   10e96:	b2db      	uxtb	r3, r3
   10e98:	73fb      	strb	r3, [r7, #15]
   10e9a:	e7e9      	b.n	10e70 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   10e9c:	6878      	ldr	r0, [r7, #4]
   10e9e:	4b06      	ldr	r3, [pc, #24]	; (10eb8 <_ZN15Holt_3593_Class19initReceiver1LabelsEv+0x68>)
   10ea0:	4798      	blx	r3
}
   10ea2:	bf00      	nop
   10ea4:	3710      	adds	r7, #16
   10ea6:	46bd      	mov	sp, r7
   10ea8:	bd80      	pop	{r7, pc}
   10eaa:	bf00      	nop
   10eac:	00010db1 	.word	0x00010db1
   10eb0:	00010e01 	.word	0x00010e01
   10eb4:	200001a0 	.word	0x200001a0
   10eb8:	00010dd9 	.word	0x00010dd9

00010ebc <_ZN15Holt_3593_Class8FlipByteEh>:
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
}

unsigned char Holt_3593_Class::FlipByte(unsigned char byte){
   10ebc:	b480      	push	{r7}
   10ebe:	b085      	sub	sp, #20
   10ec0:	af00      	add	r7, sp, #0
   10ec2:	6078      	str	r0, [r7, #4]
   10ec4:	460b      	mov	r3, r1
   10ec6:	70fb      	strb	r3, [r7, #3]
	unsigned char rev=0;
   10ec8:	2300      	movs	r3, #0
   10eca:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10ecc:	2300      	movs	r3, #0
   10ece:	60bb      	str	r3, [r7, #8]
   10ed0:	68bb      	ldr	r3, [r7, #8]
   10ed2:	2b07      	cmp	r3, #7
   10ed4:	dc13      	bgt.n	10efe <_ZN15Holt_3593_Class8FlipByteEh+0x42>
	{
		rev=rev<<1;
   10ed6:	7bfb      	ldrb	r3, [r7, #15]
   10ed8:	005b      	lsls	r3, r3, #1
   10eda:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   10edc:	78fa      	ldrb	r2, [r7, #3]
   10ede:	68bb      	ldr	r3, [r7, #8]
   10ee0:	fa42 f303 	asr.w	r3, r2, r3
   10ee4:	b25b      	sxtb	r3, r3
   10ee6:	f003 0301 	and.w	r3, r3, #1
   10eea:	b25a      	sxtb	r2, r3
   10eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10ef0:	4313      	orrs	r3, r2
   10ef2:	b25b      	sxtb	r3, r3
   10ef4:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   10ef6:	68bb      	ldr	r3, [r7, #8]
   10ef8:	3301      	adds	r3, #1
   10efa:	60bb      	str	r3, [r7, #8]
   10efc:	e7e8      	b.n	10ed0 <_ZN15Holt_3593_Class8FlipByteEh+0x14>
	}
	return rev;
   10efe:	7bfb      	ldrb	r3, [r7, #15]
}
   10f00:	4618      	mov	r0, r3
   10f02:	3714      	adds	r7, #20
   10f04:	46bd      	mov	sp, r7
   10f06:	bc80      	pop	{r7}
   10f08:	4770      	bx	lr
	...

00010f0c <_ZN15Holt_3593_Class9Send_ByteEh>:

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   10f0c:	b580      	push	{r7, lr}
   10f0e:	b082      	sub	sp, #8
   10f10:	af00      	add	r7, sp, #0
   10f12:	6078      	str	r0, [r7, #4]
   10f14:	460b      	mov	r3, r1
   10f16:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   10f18:	687b      	ldr	r3, [r7, #4]
   10f1a:	4618      	mov	r0, r3
   10f1c:	4b0f      	ldr	r3, [pc, #60]	; (10f5c <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   10f1e:	4798      	blx	r3
   10f20:	4603      	mov	r3, r0
   10f22:	f083 0301 	eor.w	r3, r3, #1
   10f26:	b2db      	uxtb	r3, r3
   10f28:	2b00      	cmp	r3, #0
   10f2a:	d000      	beq.n	10f2e <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   10f2c:	e7f4      	b.n	10f18 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   10f2e:	687b      	ldr	r3, [r7, #4]
   10f30:	1cf9      	adds	r1, r7, #3
   10f32:	2201      	movs	r2, #1
   10f34:	4618      	mov	r0, r3
   10f36:	4b0a      	ldr	r3, [pc, #40]	; (10f60 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   10f38:	4798      	blx	r3
	while (!spi.isSPIReady());  
   10f3a:	687b      	ldr	r3, [r7, #4]
   10f3c:	4618      	mov	r0, r3
   10f3e:	4b07      	ldr	r3, [pc, #28]	; (10f5c <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   10f40:	4798      	blx	r3
   10f42:	4603      	mov	r3, r0
   10f44:	f083 0301 	eor.w	r3, r3, #1
   10f48:	b2db      	uxtb	r3, r3
   10f4a:	2b00      	cmp	r3, #0
   10f4c:	d000      	beq.n	10f50 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   10f4e:	e7f4      	b.n	10f3a <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   10f50:	78fb      	ldrb	r3, [r7, #3]
}
   10f52:	4618      	mov	r0, r3
   10f54:	3708      	adds	r7, #8
   10f56:	46bd      	mov	sp, r7
   10f58:	bd80      	pop	{r7, pc}
   10f5a:	bf00      	nop
   10f5c:	00011f4d 	.word	0x00011f4d
   10f60:	00011ea5 	.word	0x00011ea5

00010f64 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   10f64:	b580      	push	{r7, lr}
   10f66:	b084      	sub	sp, #16
   10f68:	af00      	add	r7, sp, #0
   10f6a:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   10f6c:	687b      	ldr	r3, [r7, #4]
   10f6e:	4618      	mov	r0, r3
   10f70:	4b0f      	ldr	r3, [pc, #60]	; (10fb0 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   10f72:	4798      	blx	r3
   10f74:	4603      	mov	r3, r0
   10f76:	f083 0301 	eor.w	r3, r3, #1
   10f7a:	b2db      	uxtb	r3, r3
   10f7c:	2b00      	cmp	r3, #0
   10f7e:	d000      	beq.n	10f82 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   10f80:	e7f4      	b.n	10f6c <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   10f82:	687b      	ldr	r3, [r7, #4]
   10f84:	f107 010f 	add.w	r1, r7, #15
   10f88:	2201      	movs	r2, #1
   10f8a:	4618      	mov	r0, r3
   10f8c:	4b09      	ldr	r3, [pc, #36]	; (10fb4 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   10f8e:	4798      	blx	r3
	while (!spi.isSPIReady());
   10f90:	687b      	ldr	r3, [r7, #4]
   10f92:	4618      	mov	r0, r3
   10f94:	4b06      	ldr	r3, [pc, #24]	; (10fb0 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   10f96:	4798      	blx	r3
   10f98:	4603      	mov	r3, r0
   10f9a:	f083 0301 	eor.w	r3, r3, #1
   10f9e:	b2db      	uxtb	r3, r3
   10fa0:	2b00      	cmp	r3, #0
   10fa2:	d000      	beq.n	10fa6 <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   10fa4:	e7f4      	b.n	10f90 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   10fa6:	7bfb      	ldrb	r3, [r7, #15]
}	
   10fa8:	4618      	mov	r0, r3
   10faa:	3710      	adds	r7, #16
   10fac:	46bd      	mov	sp, r7
   10fae:	bd80      	pop	{r7, pc}
   10fb0:	00011f4d 	.word	0x00011f4d
   10fb4:	00011ee9 	.word	0x00011ee9

00010fb8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   10fb8:	b580      	push	{r7, lr}
   10fba:	b084      	sub	sp, #16
   10fbc:	af00      	add	r7, sp, #0
   10fbe:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   10fc0:	6878      	ldr	r0, [r7, #4]
   10fc2:	4b14      	ldr	r3, [pc, #80]	; (11014 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   10fc4:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   10fc6:	2201      	movs	r2, #1
   10fc8:	2128      	movs	r1, #40	; 0x28
   10fca:	6878      	ldr	r0, [r7, #4]
   10fcc:	4b12      	ldr	r3, [pc, #72]	; (11018 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   10fce:	4798      	blx	r3
   10fd0:	4603      	mov	r3, r0
   10fd2:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   10fd4:	231f      	movs	r3, #31
   10fd6:	73fb      	strb	r3, [r7, #15]
   10fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10fdc:	2b00      	cmp	r3, #0
   10fde:	db11      	blt.n	11004 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   10fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10fe4:	4a0d      	ldr	r2, [pc, #52]	; (1101c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   10fe6:	5cd3      	ldrb	r3, [r2, r3]
   10fe8:	2201      	movs	r2, #1
   10fea:	4619      	mov	r1, r3
   10fec:	6878      	ldr	r0, [r7, #4]
   10fee:	4b0a      	ldr	r3, [pc, #40]	; (11018 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   10ff0:	4798      	blx	r3
   10ff2:	4603      	mov	r3, r0
   10ff4:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   10ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   10ffa:	b2db      	uxtb	r3, r3
   10ffc:	3b01      	subs	r3, #1
   10ffe:	b2db      	uxtb	r3, r3
   11000:	73fb      	strb	r3, [r7, #15]
   11002:	e7e9      	b.n	10fd8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   11004:	6878      	ldr	r0, [r7, #4]
   11006:	4b06      	ldr	r3, [pc, #24]	; (11020 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   11008:	4798      	blx	r3
}
   1100a:	bf00      	nop
   1100c:	3710      	adds	r7, #16
   1100e:	46bd      	mov	sp, r7
   11010:	bd80      	pop	{r7, pc}
   11012:	bf00      	nop
   11014:	00010db1 	.word	0x00010db1
   11018:	00010e01 	.word	0x00010e01
   1101c:	20003880 	.word	0x20003880
   11020:	00010dd9 	.word	0x00010dd9

00011024 <_ZN15Holt_3593_Class13MultiByteReadEhhPh>:
//          count=number of bytes to read
//
// Output:  *passedArray = pointer to the array that gets loaded
// ------------------------------------------------------
void Holt_3593_Class::MultiByteRead(uint8_t ReadCommand, uint8_t count, unsigned char *passedArray)
{
   11024:	b580      	push	{r7, lr}
   11026:	b086      	sub	sp, #24
   11028:	af00      	add	r7, sp, #0
   1102a:	60f8      	str	r0, [r7, #12]
   1102c:	607b      	str	r3, [r7, #4]
   1102e:	460b      	mov	r3, r1
   11030:	72fb      	strb	r3, [r7, #11]
   11032:	4613      	mov	r3, r2
   11034:	72bb      	strb	r3, [r7, #10]
   uint8_t dummy, ByteCount;
   open();
   11036:	68f8      	ldr	r0, [r7, #12]
   11038:	4b16      	ldr	r3, [pc, #88]	; (11094 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x70>)
   1103a:	4798      	blx	r3
   //dummy = Get_Byte();                  // clear SPI status register    
   Send_Byte(ReadCommand);
   1103c:	7afb      	ldrb	r3, [r7, #11]
   1103e:	4619      	mov	r1, r3
   11040:	68f8      	ldr	r0, [r7, #12]
   11042:	4b15      	ldr	r3, [pc, #84]	; (11098 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x74>)
   11044:	4798      	blx	r3
     
   while (!spi.isSPIReady());            // wait for SPIF flag assertion    
   11046:	68fb      	ldr	r3, [r7, #12]
   11048:	4618      	mov	r0, r3
   1104a:	4b14      	ldr	r3, [pc, #80]	; (1109c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x78>)
   1104c:	4798      	blx	r3
   1104e:	4603      	mov	r3, r0
   11050:	f083 0301 	eor.w	r3, r3, #1
   11054:	b2db      	uxtb	r3, r3
   11056:	2b00      	cmp	r3, #0
   11058:	d000      	beq.n	1105c <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x38>
   1105a:	e7f4      	b.n	11046 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x22>
  // dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   1105c:	2300      	movs	r3, #0
   1105e:	75fb      	strb	r3, [r7, #23]
   11060:	7dfa      	ldrb	r2, [r7, #23]
   11062:	7abb      	ldrb	r3, [r7, #10]
   11064:	429a      	cmp	r2, r3
   11066:	da0d      	bge.n	11084 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x60>
      dummy =Get_Byte(); 
   11068:	68f8      	ldr	r0, [r7, #12]
   1106a:	4b0d      	ldr	r3, [pc, #52]	; (110a0 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x7c>)
   1106c:	4798      	blx	r3
   1106e:	4603      	mov	r3, r0
   11070:	75bb      	strb	r3, [r7, #22]
      passedArray[ByteCount] = dummy; 
   11072:	7dfb      	ldrb	r3, [r7, #23]
   11074:	687a      	ldr	r2, [r7, #4]
   11076:	4413      	add	r3, r2
   11078:	7dba      	ldrb	r2, [r7, #22]
   1107a:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   1107c:	7dfb      	ldrb	r3, [r7, #23]
   1107e:	3301      	adds	r3, #1
   11080:	75fb      	strb	r3, [r7, #23]
   11082:	e7ed      	b.n	11060 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x3c>
     }

  close();
   11084:	68f8      	ldr	r0, [r7, #12]
   11086:	4b07      	ldr	r3, [pc, #28]	; (110a4 <_ZN15Holt_3593_Class13MultiByteReadEhhPh+0x80>)
   11088:	4798      	blx	r3
  
}
   1108a:	bf00      	nop
   1108c:	3718      	adds	r7, #24
   1108e:	46bd      	mov	sp, r7
   11090:	bd80      	pop	{r7, pc}
   11092:	bf00      	nop
   11094:	00010db1 	.word	0x00010db1
   11098:	00010f0d 	.word	0x00010f0d
   1109c:	00011f4d 	.word	0x00011f4d
   110a0:	00010f65 	.word	0x00010f65
   110a4:	00010dd9 	.word	0x00010dd9

000110a8 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   110a8:	b580      	push	{r7, lr}
   110aa:	b084      	sub	sp, #16
   110ac:	af00      	add	r7, sp, #0
   110ae:	6078      	str	r0, [r7, #4]
   110b0:	460b      	mov	r3, r1
   110b2:	70fb      	strb	r3, [r7, #3]
   110b4:	4613      	mov	r3, r2
   110b6:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   110b8:	78fb      	ldrb	r3, [r7, #3]
   110ba:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   110bc:	7bfb      	ldrb	r3, [r7, #15]
   110be:	4619      	mov	r1, r3
   110c0:	6878      	ldr	r0, [r7, #4]
   110c2:	4b0b      	ldr	r3, [pc, #44]	; (110f0 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   110c4:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   110c6:	78bb      	ldrb	r3, [r7, #2]
   110c8:	2b00      	cmp	r3, #0
   110ca:	d00a      	beq.n	110e2 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   110cc:	687b      	ldr	r3, [r7, #4]
   110ce:	4618      	mov	r0, r3
   110d0:	4b08      	ldr	r3, [pc, #32]	; (110f4 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   110d2:	4798      	blx	r3
   110d4:	4603      	mov	r3, r0
   110d6:	f083 0301 	eor.w	r3, r3, #1
   110da:	b2db      	uxtb	r3, r3
   110dc:	2b00      	cmp	r3, #0
   110de:	d000      	beq.n	110e2 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   110e0:	e7f4      	b.n	110cc <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   110e2:	78fb      	ldrb	r3, [r7, #3]
   110e4:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   110e6:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   110e8:	4618      	mov	r0, r3
   110ea:	3710      	adds	r7, #16
   110ec:	46bd      	mov	sp, r7
   110ee:	bd80      	pop	{r7, pc}
   110f0:	00010f0d 	.word	0x00010f0d
   110f4:	00011f4d 	.word	0x00011f4d

000110f8 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   110f8:	b580      	push	{r7, lr}
   110fa:	b084      	sub	sp, #16
   110fc:	af00      	add	r7, sp, #0
   110fe:	6078      	str	r0, [r7, #4]
   11100:	460b      	mov	r3, r1
   11102:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   11104:	78fb      	ldrb	r3, [r7, #3]
   11106:	73fb      	strb	r3, [r7, #15]
  open();
   11108:	6878      	ldr	r0, [r7, #4]
   1110a:	4b0c      	ldr	r3, [pc, #48]	; (1113c <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   1110c:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   1110e:	7bfb      	ldrb	r3, [r7, #15]
   11110:	4619      	mov	r1, r3
   11112:	6878      	ldr	r0, [r7, #4]
   11114:	4b0a      	ldr	r3, [pc, #40]	; (11140 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   11116:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   11118:	687b      	ldr	r3, [r7, #4]
   1111a:	4618      	mov	r0, r3
   1111c:	4b09      	ldr	r3, [pc, #36]	; (11144 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   1111e:	4798      	blx	r3
   11120:	4603      	mov	r3, r0
   11122:	f083 0301 	eor.w	r3, r3, #1
   11126:	b2db      	uxtb	r3, r3
   11128:	2b00      	cmp	r3, #0
   1112a:	d000      	beq.n	1112e <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   1112c:	e7f4      	b.n	11118 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   1112e:	6878      	ldr	r0, [r7, #4]
   11130:	4b05      	ldr	r3, [pc, #20]	; (11148 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   11132:	4798      	blx	r3
}
   11134:	bf00      	nop
   11136:	3710      	adds	r7, #16
   11138:	46bd      	mov	sp, r7
   1113a:	bd80      	pop	{r7, pc}
   1113c:	00010db1 	.word	0x00010db1
   11140:	00010f0d 	.word	0x00010f0d
   11144:	00011f4d 	.word	0x00011f4d
   11148:	00010dd9 	.word	0x00010dd9

0001114c <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   1114c:	b580      	push	{r7, lr}
   1114e:	b082      	sub	sp, #8
   11150:	af00      	add	r7, sp, #0
   11152:	6078      	str	r0, [r7, #4]
   11154:	460b      	mov	r3, r1
   11156:	70fb      	strb	r3, [r7, #3]
   11158:	4613      	mov	r3, r2
   1115a:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   1115c:	6878      	ldr	r0, [r7, #4]
   1115e:	4b14      	ldr	r3, [pc, #80]	; (111b0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   11160:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   11162:	78fb      	ldrb	r3, [r7, #3]
   11164:	4619      	mov	r1, r3
   11166:	6878      	ldr	r0, [r7, #4]
   11168:	4b12      	ldr	r3, [pc, #72]	; (111b4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   1116a:	4798      	blx	r3
  while (!spi.isSPIReady());    
   1116c:	687b      	ldr	r3, [r7, #4]
   1116e:	4618      	mov	r0, r3
   11170:	4b11      	ldr	r3, [pc, #68]	; (111b8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   11172:	4798      	blx	r3
   11174:	4603      	mov	r3, r0
   11176:	f083 0301 	eor.w	r3, r3, #1
   1117a:	b2db      	uxtb	r3, r3
   1117c:	2b00      	cmp	r3, #0
   1117e:	d000      	beq.n	11182 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   11180:	e7f4      	b.n	1116c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   11182:	78bb      	ldrb	r3, [r7, #2]
   11184:	4619      	mov	r1, r3
   11186:	6878      	ldr	r0, [r7, #4]
   11188:	4b0a      	ldr	r3, [pc, #40]	; (111b4 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   1118a:	4798      	blx	r3
  while (!spi.isSPIReady());    
   1118c:	687b      	ldr	r3, [r7, #4]
   1118e:	4618      	mov	r0, r3
   11190:	4b09      	ldr	r3, [pc, #36]	; (111b8 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   11192:	4798      	blx	r3
   11194:	4603      	mov	r3, r0
   11196:	f083 0301 	eor.w	r3, r3, #1
   1119a:	b2db      	uxtb	r3, r3
   1119c:	2b00      	cmp	r3, #0
   1119e:	d000      	beq.n	111a2 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   111a0:	e7f4      	b.n	1118c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   111a2:	6878      	ldr	r0, [r7, #4]
   111a4:	4b05      	ldr	r3, [pc, #20]	; (111bc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   111a6:	4798      	blx	r3
}
   111a8:	bf00      	nop
   111aa:	3708      	adds	r7, #8
   111ac:	46bd      	mov	sp, r7
   111ae:	bd80      	pop	{r7, pc}
   111b0:	00010db1 	.word	0x00010db1
   111b4:	00010f0d 	.word	0x00010f0d
   111b8:	00011f4d 	.word	0x00011f4d
   111bc:	00010dd9 	.word	0x00010dd9

000111c0 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   111c0:	b580      	push	{r7, lr}
   111c2:	b084      	sub	sp, #16
   111c4:	af00      	add	r7, sp, #0
   111c6:	6078      	str	r0, [r7, #4]
   111c8:	460b      	mov	r3, r1
   111ca:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   111cc:	6878      	ldr	r0, [r7, #4]
   111ce:	4b0a      	ldr	r3, [pc, #40]	; (111f8 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   111d0:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   111d2:	78fb      	ldrb	r3, [r7, #3]
   111d4:	2201      	movs	r2, #1
   111d6:	4619      	mov	r1, r3
   111d8:	6878      	ldr	r0, [r7, #4]
   111da:	4b08      	ldr	r3, [pc, #32]	; (111fc <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   111dc:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   111de:	6878      	ldr	r0, [r7, #4]
   111e0:	4b07      	ldr	r3, [pc, #28]	; (11200 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   111e2:	4798      	blx	r3
   111e4:	4603      	mov	r3, r0
   111e6:	73fb      	strb	r3, [r7, #15]
         
  close();
   111e8:	6878      	ldr	r0, [r7, #4]
   111ea:	4b06      	ldr	r3, [pc, #24]	; (11204 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   111ec:	4798      	blx	r3
  return R_Reg;
   111ee:	7bfb      	ldrb	r3, [r7, #15]
}
   111f0:	4618      	mov	r0, r3
   111f2:	3710      	adds	r7, #16
   111f4:	46bd      	mov	sp, r7
   111f6:	bd80      	pop	{r7, pc}
   111f8:	00010db1 	.word	0x00010db1
   111fc:	000110a9 	.word	0x000110a9
   11200:	00010f65 	.word	0x00010f65
   11204:	00010dd9 	.word	0x00010dd9

00011208 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   11208:	b580      	push	{r7, lr}
   1120a:	b082      	sub	sp, #8
   1120c:	af00      	add	r7, sp, #0
   1120e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   11210:	2100      	movs	r1, #0
   11212:	204e      	movs	r0, #78	; 0x4e
   11214:	4b02      	ldr	r3, [pc, #8]	; (11220 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   11216:	4798      	blx	r3
}
   11218:	bf00      	nop
   1121a:	3708      	adds	r7, #8
   1121c:	46bd      	mov	sp, r7
   1121e:	bd80      	pop	{r7, pc}
   11220:	00010bc5 	.word	0x00010bc5

00011224 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   11224:	b580      	push	{r7, lr}
   11226:	b082      	sub	sp, #8
   11228:	af00      	add	r7, sp, #0
   1122a:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   1122c:	2101      	movs	r1, #1
   1122e:	204e      	movs	r0, #78	; 0x4e
   11230:	4b02      	ldr	r3, [pc, #8]	; (1123c <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   11232:	4798      	blx	r3
}
   11234:	bf00      	nop
   11236:	3708      	adds	r7, #8
   11238:	46bd      	mov	sp, r7
   1123a:	bd80      	pop	{r7, pc}
   1123c:	00010bc5 	.word	0x00010bc5

00011240 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   11240:	b480      	push	{r7}
   11242:	b083      	sub	sp, #12
   11244:	af00      	add	r7, sp, #0
   11246:	6078      	str	r0, [r7, #4]
   11248:	6039      	str	r1, [r7, #0]
   1124a:	683b      	ldr	r3, [r7, #0]
   1124c:	681a      	ldr	r2, [r3, #0]
   1124e:	687b      	ldr	r3, [r7, #4]
   11250:	601a      	str	r2, [r3, #0]
   11252:	687b      	ldr	r3, [r7, #4]
   11254:	681b      	ldr	r3, [r3, #0]
   11256:	3b14      	subs	r3, #20
   11258:	681b      	ldr	r3, [r3, #0]
   1125a:	461a      	mov	r2, r3
   1125c:	687b      	ldr	r3, [r7, #4]
   1125e:	4413      	add	r3, r2
   11260:	683a      	ldr	r2, [r7, #0]
   11262:	6852      	ldr	r2, [r2, #4]
   11264:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   11266:	687b      	ldr	r3, [r7, #4]
   11268:	4618      	mov	r0, r3
   1126a:	370c      	adds	r7, #12
   1126c:	46bd      	mov	sp, r7
   1126e:	bc80      	pop	{r7}
   11270:	4770      	bx	lr

00011272 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   11272:	b590      	push	{r4, r7, lr}
   11274:	b085      	sub	sp, #20
   11276:	af00      	add	r7, sp, #0
   11278:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   1127a:	687b      	ldr	r3, [r7, #4]
   1127c:	681b      	ldr	r3, [r3, #0]
   1127e:	3310      	adds	r3, #16
   11280:	681c      	ldr	r4, [r3, #0]
   11282:	687b      	ldr	r3, [r7, #4]
   11284:	681b      	ldr	r3, [r3, #0]
   11286:	3b14      	subs	r3, #20
   11288:	681b      	ldr	r3, [r3, #0]
   1128a:	461a      	mov	r2, r3
   1128c:	687b      	ldr	r3, [r7, #4]
   1128e:	4413      	add	r3, r2
   11290:	681b      	ldr	r3, [r3, #0]
   11292:	3304      	adds	r3, #4
   11294:	681b      	ldr	r3, [r3, #0]
   11296:	687a      	ldr	r2, [r7, #4]
   11298:	6812      	ldr	r2, [r2, #0]
   1129a:	3a14      	subs	r2, #20
   1129c:	6812      	ldr	r2, [r2, #0]
   1129e:	4611      	mov	r1, r2
   112a0:	687a      	ldr	r2, [r7, #4]
   112a2:	440a      	add	r2, r1
   112a4:	f44f 7187 	mov.w	r1, #270	; 0x10e
   112a8:	4610      	mov	r0, r2
   112aa:	4798      	blx	r3
   112ac:	4603      	mov	r3, r0
   112ae:	4619      	mov	r1, r3
   112b0:	6878      	ldr	r0, [r7, #4]
   112b2:	47a0      	blx	r4
   112b4:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   112b6:	68fb      	ldr	r3, [r7, #12]
   112b8:	0c9b      	lsrs	r3, r3, #18
   112ba:	b2db      	uxtb	r3, r3
   112bc:	f003 0303 	and.w	r3, r3, #3
   112c0:	72fb      	strb	r3, [r7, #11]

	return key;
   112c2:	7afb      	ldrb	r3, [r7, #11]
}
   112c4:	4618      	mov	r0, r3
   112c6:	3714      	adds	r7, #20
   112c8:	46bd      	mov	sp, r7
   112ca:	bd90      	pop	{r4, r7, pc}

000112cc <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   112cc:	b480      	push	{r7}
   112ce:	b083      	sub	sp, #12
   112d0:	af00      	add	r7, sp, #0
   112d2:	6078      	str	r0, [r7, #4]
    return (void *)0;
   112d4:	2300      	movs	r3, #0
	}
   112d6:	4618      	mov	r0, r3
   112d8:	370c      	adds	r7, #12
   112da:	46bd      	mov	sp, r7
   112dc:	bc80      	pop	{r7}
   112de:	4770      	bx	lr

000112e0 <free>:
//............................................................................
extern "C" void free(void *)
	{
   112e0:	b480      	push	{r7}
   112e2:	b083      	sub	sp, #12
   112e4:	af00      	add	r7, sp, #0
   112e6:	6078      	str	r0, [r7, #4]
	}
   112e8:	bf00      	nop
   112ea:	370c      	adds	r7, #12
   112ec:	46bd      	mov	sp, r7
   112ee:	bc80      	pop	{r7}
   112f0:	4770      	bx	lr

000112f2 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   112f2:	b480      	push	{r7}
   112f4:	af00      	add	r7, sp, #0
		}
   112f6:	bf00      	nop
   112f8:	46bd      	mov	sp, r7
   112fa:	bc80      	pop	{r7}
   112fc:	4770      	bx	lr
	...

00011300 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   11300:	b580      	push	{r7, lr}
   11302:	b082      	sub	sp, #8
   11304:	af00      	add	r7, sp, #0
   11306:	6078      	str	r0, [r7, #4]
	free(p);
   11308:	6878      	ldr	r0, [r7, #4]
   1130a:	4b03      	ldr	r3, [pc, #12]	; (11318 <_ZdlPv+0x18>)
   1130c:	4798      	blx	r3
	}
   1130e:	bf00      	nop
   11310:	3708      	adds	r7, #8
   11312:	46bd      	mov	sp, r7
   11314:	bd80      	pop	{r7, pc}
   11316:	bf00      	nop
   11318:	000112e1 	.word	0x000112e1

0001131c <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   1131c:	b480      	push	{r7}
   1131e:	b083      	sub	sp, #12
   11320:	af00      	add	r7, sp, #0
   11322:	6078      	str	r0, [r7, #4]
   11324:	687b      	ldr	r3, [r7, #4]
   11326:	4618      	mov	r0, r3
   11328:	370c      	adds	r7, #12
   1132a:	46bd      	mov	sp, r7
   1132c:	bc80      	pop	{r7}
   1132e:	4770      	bx	lr

00011330 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   11330:	b480      	push	{r7}
   11332:	b083      	sub	sp, #12
   11334:	af00      	add	r7, sp, #0
   11336:	6078      	str	r0, [r7, #4]
   11338:	687b      	ldr	r3, [r7, #4]
   1133a:	4618      	mov	r0, r3
   1133c:	370c      	adds	r7, #12
   1133e:	46bd      	mov	sp, r7
   11340:	bc80      	pop	{r7}
   11342:	4770      	bx	lr

00011344 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   11344:	b580      	push	{r7, lr}
   11346:	b084      	sub	sp, #16
   11348:	af00      	add	r7, sp, #0
   1134a:	6078      	str	r0, [r7, #4]
   1134c:	460b      	mov	r3, r1
   1134e:	70fb      	strb	r3, [r7, #3]
   11350:	4613      	mov	r3, r2
   11352:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   11354:	687b      	ldr	r3, [r7, #4]
   11356:	78fa      	ldrb	r2, [r7, #3]
   11358:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   1135a:	78bb      	ldrb	r3, [r7, #2]
   1135c:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   1135e:	7bfb      	ldrb	r3, [r7, #15]
   11360:	2b00      	cmp	r3, #0
   11362:	f000 80ba 	beq.w	114da <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   11366:	78fb      	ldrb	r3, [r7, #3]
   11368:	2b14      	cmp	r3, #20
   1136a:	f200 80a2 	bhi.w	114b2 <_ZN11Diagnostics12troubleshootEhb+0x16e>
   1136e:	a201      	add	r2, pc, #4	; (adr r2, 11374 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   11370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11374:	000113c9 	.word	0x000113c9
   11378:	000113dd 	.word	0x000113dd
   1137c:	000113e7 	.word	0x000113e7
   11380:	000113f1 	.word	0x000113f1
   11384:	000113fb 	.word	0x000113fb
   11388:	0001140d 	.word	0x0001140d
   1138c:	00011417 	.word	0x00011417
   11390:	00011429 	.word	0x00011429
   11394:	0001143b 	.word	0x0001143b
   11398:	0001144f 	.word	0x0001144f
   1139c:	00011459 	.word	0x00011459
   113a0:	000113d3 	.word	0x000113d3
   113a4:	00011445 	.word	0x00011445
   113a8:	00011463 	.word	0x00011463
   113ac:	0001146d 	.word	0x0001146d
   113b0:	00011477 	.word	0x00011477
   113b4:	00011481 	.word	0x00011481
   113b8:	0001148b 	.word	0x0001148b
   113bc:	00011495 	.word	0x00011495
   113c0:	0001149f 	.word	0x0001149f
   113c4:	000114a9 	.word	0x000114a9
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   113c8:	4946      	ldr	r1, [pc, #280]	; (114e4 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   113ca:	4847      	ldr	r0, [pc, #284]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113cc:	4b47      	ldr	r3, [pc, #284]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113ce:	4798      	blx	r3
      break;
   113d0:	e074      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   113d2:	4947      	ldr	r1, [pc, #284]	; (114f0 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   113d4:	4844      	ldr	r0, [pc, #272]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113d6:	4b45      	ldr	r3, [pc, #276]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113d8:	4798      	blx	r3
      break;
   113da:	e06f      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   113dc:	4945      	ldr	r1, [pc, #276]	; (114f4 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   113de:	4842      	ldr	r0, [pc, #264]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113e0:	4b42      	ldr	r3, [pc, #264]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113e2:	4798      	blx	r3
      break;
   113e4:	e06a      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   113e6:	4944      	ldr	r1, [pc, #272]	; (114f8 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   113e8:	483f      	ldr	r0, [pc, #252]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113ea:	4b40      	ldr	r3, [pc, #256]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113ec:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   113ee:	e065      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   113f0:	4942      	ldr	r1, [pc, #264]	; (114fc <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   113f2:	483d      	ldr	r0, [pc, #244]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113f4:	4b3d      	ldr	r3, [pc, #244]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   113f6:	4798      	blx	r3
      break;
   113f8:	e060      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   113fa:	4941      	ldr	r1, [pc, #260]	; (11500 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   113fc:	483a      	ldr	r0, [pc, #232]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   113fe:	4b3b      	ldr	r3, [pc, #236]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11400:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   11402:	4940      	ldr	r1, [pc, #256]	; (11504 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   11404:	4838      	ldr	r0, [pc, #224]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11406:	4b39      	ldr	r3, [pc, #228]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11408:	4798      	blx	r3
      break;
   1140a:	e057      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   1140c:	493e      	ldr	r1, [pc, #248]	; (11508 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   1140e:	4836      	ldr	r0, [pc, #216]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11410:	4b36      	ldr	r3, [pc, #216]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11412:	4798      	blx	r3
      break;
   11414:	e052      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   11416:	493d      	ldr	r1, [pc, #244]	; (1150c <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   11418:	4833      	ldr	r0, [pc, #204]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1141a:	4b34      	ldr	r3, [pc, #208]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1141c:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   1141e:	493c      	ldr	r1, [pc, #240]	; (11510 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   11420:	4831      	ldr	r0, [pc, #196]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11422:	4b32      	ldr	r3, [pc, #200]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11424:	4798      	blx	r3
      break;
   11426:	e049      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   11428:	493a      	ldr	r1, [pc, #232]	; (11514 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   1142a:	482f      	ldr	r0, [pc, #188]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1142c:	4b2f      	ldr	r3, [pc, #188]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1142e:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   11430:	4939      	ldr	r1, [pc, #228]	; (11518 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   11432:	482d      	ldr	r0, [pc, #180]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11434:	4b2d      	ldr	r3, [pc, #180]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11436:	4798      	blx	r3
      break;
   11438:	e040      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   1143a:	4938      	ldr	r1, [pc, #224]	; (1151c <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   1143c:	482a      	ldr	r0, [pc, #168]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1143e:	4b2b      	ldr	r3, [pc, #172]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11440:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   11442:	e03b      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   11444:	4936      	ldr	r1, [pc, #216]	; (11520 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   11446:	4828      	ldr	r0, [pc, #160]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11448:	4b28      	ldr	r3, [pc, #160]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1144a:	4798      	blx	r3
      break;
   1144c:	e036      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   1144e:	4935      	ldr	r1, [pc, #212]	; (11524 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   11450:	4825      	ldr	r0, [pc, #148]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11452:	4b26      	ldr	r3, [pc, #152]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11454:	4798      	blx	r3
      break;
   11456:	e031      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   11458:	4933      	ldr	r1, [pc, #204]	; (11528 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   1145a:	4823      	ldr	r0, [pc, #140]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1145c:	4b23      	ldr	r3, [pc, #140]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1145e:	4798      	blx	r3
      break;
   11460:	e02c      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   11462:	4932      	ldr	r1, [pc, #200]	; (1152c <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   11464:	4820      	ldr	r0, [pc, #128]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11466:	4b21      	ldr	r3, [pc, #132]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11468:	4798      	blx	r3
      break;
   1146a:	e027      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   1146c:	4930      	ldr	r1, [pc, #192]	; (11530 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   1146e:	481e      	ldr	r0, [pc, #120]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11470:	4b1e      	ldr	r3, [pc, #120]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11472:	4798      	blx	r3
      break;
   11474:	e022      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   11476:	492f      	ldr	r1, [pc, #188]	; (11534 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   11478:	481b      	ldr	r0, [pc, #108]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1147a:	4b1c      	ldr	r3, [pc, #112]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1147c:	4798      	blx	r3
      break;
   1147e:	e01d      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   11480:	492d      	ldr	r1, [pc, #180]	; (11538 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   11482:	4819      	ldr	r0, [pc, #100]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11484:	4b19      	ldr	r3, [pc, #100]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11486:	4798      	blx	r3
      break;
   11488:	e018      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   1148a:	492c      	ldr	r1, [pc, #176]	; (1153c <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   1148c:	4816      	ldr	r0, [pc, #88]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1148e:	4b17      	ldr	r3, [pc, #92]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   11490:	4798      	blx	r3
      break;
   11492:	e013      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   11494:	492a      	ldr	r1, [pc, #168]	; (11540 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   11496:	4814      	ldr	r0, [pc, #80]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   11498:	4b14      	ldr	r3, [pc, #80]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1149a:	4798      	blx	r3
      break;
   1149c:	e00e      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   1149e:	4929      	ldr	r1, [pc, #164]	; (11544 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   114a0:	4811      	ldr	r0, [pc, #68]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114a2:	4b12      	ldr	r3, [pc, #72]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114a4:	4798      	blx	r3
      break;
   114a6:	e009      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   114a8:	4927      	ldr	r1, [pc, #156]	; (11548 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   114aa:	480f      	ldr	r0, [pc, #60]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114ac:	4b0f      	ldr	r3, [pc, #60]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114ae:	4798      	blx	r3
      break;
   114b0:	e004      	b.n	114bc <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   114b2:	4926      	ldr	r1, [pc, #152]	; (1154c <_ZN11Diagnostics12troubleshootEhb+0x208>)
   114b4:	480c      	ldr	r0, [pc, #48]	; (114e8 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   114b6:	4b0d      	ldr	r3, [pc, #52]	; (114ec <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   114b8:	4798      	blx	r3
      break;
   114ba:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   114bc:	78fb      	ldrb	r3, [r7, #3]
   114be:	2b0a      	cmp	r3, #10
   114c0:	d008      	beq.n	114d4 <_ZN11Diagnostics12troubleshootEhb+0x190>
   114c2:	78fb      	ldrb	r3, [r7, #3]
   114c4:	2b06      	cmp	r3, #6
   114c6:	d005      	beq.n	114d4 <_ZN11Diagnostics12troubleshootEhb+0x190>
   114c8:	78fb      	ldrb	r3, [r7, #3]
   114ca:	2b02      	cmp	r3, #2
   114cc:	d002      	beq.n	114d4 <_ZN11Diagnostics12troubleshootEhb+0x190>
   114ce:	78fb      	ldrb	r3, [r7, #3]
   114d0:	2b0b      	cmp	r3, #11
   114d2:	d102      	bne.n	114da <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   114d4:	6878      	ldr	r0, [r7, #4]
   114d6:	4b1e      	ldr	r3, [pc, #120]	; (11550 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   114d8:	4798      	blx	r3
    }
  #endif
  }
}
   114da:	bf00      	nop
   114dc:	3710      	adds	r7, #16
   114de:	46bd      	mov	sp, r7
   114e0:	bd80      	pop	{r7, pc}
   114e2:	bf00      	nop
   114e4:	00017eb8 	.word	0x00017eb8
   114e8:	20004d34 	.word	0x20004d34
   114ec:	00014061 	.word	0x00014061
   114f0:	00017ed8 	.word	0x00017ed8
   114f4:	00017f0c 	.word	0x00017f0c
   114f8:	00017f4c 	.word	0x00017f4c
   114fc:	00017f8c 	.word	0x00017f8c
   11500:	00018024 	.word	0x00018024
   11504:	00018034 	.word	0x00018034
   11508:	00018064 	.word	0x00018064
   1150c:	000180b0 	.word	0x000180b0
   11510:	000180d4 	.word	0x000180d4
   11514:	00018118 	.word	0x00018118
   11518:	0001813c 	.word	0x0001813c
   1151c:	00018178 	.word	0x00018178
   11520:	000181c8 	.word	0x000181c8
   11524:	00018208 	.word	0x00018208
   11528:	0001822c 	.word	0x0001822c
   1152c:	00018254 	.word	0x00018254
   11530:	00018278 	.word	0x00018278
   11534:	000182a0 	.word	0x000182a0
   11538:	000182c4 	.word	0x000182c4
   1153c:	000182ec 	.word	0x000182ec
   11540:	00018338 	.word	0x00018338
   11544:	00018388 	.word	0x00018388
   11548:	000183d8 	.word	0x000183d8
   1154c:	0001840c 	.word	0x0001840c
   11550:	00011555 	.word	0x00011555

00011554 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   11554:	b580      	push	{r7, lr}
   11556:	b082      	sub	sp, #8
   11558:	af00      	add	r7, sp, #0
   1155a:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   1155c:	4905      	ldr	r1, [pc, #20]	; (11574 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   1155e:	4806      	ldr	r0, [pc, #24]	; (11578 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   11560:	4b06      	ldr	r3, [pc, #24]	; (1157c <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   11562:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   11564:	4906      	ldr	r1, [pc, #24]	; (11580 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   11566:	4804      	ldr	r0, [pc, #16]	; (11578 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   11568:	4b06      	ldr	r3, [pc, #24]	; (11584 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   1156a:	4798      	blx	r3
}
   1156c:	bf00      	nop
   1156e:	3708      	adds	r7, #8
   11570:	46bd      	mov	sp, r7
   11572:	bd80      	pop	{r7, pc}
   11574:	00018430 	.word	0x00018430
   11578:	20004d34 	.word	0x20004d34
   1157c:	00013f91 	.word	0x00013f91
   11580:	00018464 	.word	0x00018464
   11584:	00014061 	.word	0x00014061

00011588 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   11588:	b580      	push	{r7, lr}
   1158a:	b082      	sub	sp, #8
   1158c:	af00      	add	r7, sp, #0
   1158e:	6078      	str	r0, [r7, #4]
   11590:	6039      	str	r1, [r7, #0]
   11592:	687b      	ldr	r3, [r7, #4]
   11594:	2b01      	cmp	r3, #1
   11596:	d10c      	bne.n	115b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11598:	683b      	ldr	r3, [r7, #0]
   1159a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1159e:	4293      	cmp	r3, r2
   115a0:	d107      	bne.n	115b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   115a2:	4806      	ldr	r0, [pc, #24]	; (115bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   115a4:	4b06      	ldr	r3, [pc, #24]	; (115c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   115a6:	4798      	blx	r3
   115a8:	4a06      	ldr	r2, [pc, #24]	; (115c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   115aa:	4907      	ldr	r1, [pc, #28]	; (115c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   115ac:	4803      	ldr	r0, [pc, #12]	; (115bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   115ae:	4b07      	ldr	r3, [pc, #28]	; (115cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
   115b0:	4798      	blx	r3
   115b2:	bf00      	nop
   115b4:	3708      	adds	r7, #8
   115b6:	46bd      	mov	sp, r7
   115b8:	bd80      	pop	{r7, pc}
   115ba:	bf00      	nop
   115bc:	200038a8 	.word	0x200038a8
   115c0:	0001131d 	.word	0x0001131d
   115c4:	20000000 	.word	0x20000000
   115c8:	00011331 	.word	0x00011331
   115cc:	00014919 	.word	0x00014919

000115d0 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   115d0:	b580      	push	{r7, lr}
   115d2:	af00      	add	r7, sp, #0
   115d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   115d8:	2001      	movs	r0, #1
   115da:	4b01      	ldr	r3, [pc, #4]	; (115e0 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   115dc:	4798      	blx	r3
   115de:	bd80      	pop	{r7, pc}
   115e0:	00011589 	.word	0x00011589

000115e4 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   115e4:	b480      	push	{r7}
   115e6:	b083      	sub	sp, #12
   115e8:	af00      	add	r7, sp, #0
   115ea:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   115ec:	4b04      	ldr	r3, [pc, #16]	; (11600 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   115ee:	681b      	ldr	r3, [r3, #0]
   115f0:	2201      	movs	r2, #1
   115f2:	701a      	strb	r2, [r3, #0]
}
   115f4:	bf00      	nop
   115f6:	370c      	adds	r7, #12
   115f8:	46bd      	mov	sp, r7
   115fa:	bc80      	pop	{r7}
   115fc:	4770      	bx	lr
   115fe:	bf00      	nop
   11600:	200048b4 	.word	0x200048b4

00011604 <_ZN18EventHandler_ClassC1Ev>:


// default constructor
EventHandler_Class::EventHandler_Class()
   11604:	b480      	push	{r7}
   11606:	b083      	sub	sp, #12
   11608:	af00      	add	r7, sp, #0
   1160a:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   1160c:	4a04      	ldr	r2, [pc, #16]	; (11620 <_ZN18EventHandler_ClassC1Ev+0x1c>)
   1160e:	687b      	ldr	r3, [r7, #4]
   11610:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
   11612:	687b      	ldr	r3, [r7, #4]
   11614:	4618      	mov	r0, r3
   11616:	370c      	adds	r7, #12
   11618:	46bd      	mov	sp, r7
   1161a:	bc80      	pop	{r7}
   1161c:	4770      	bx	lr
   1161e:	bf00      	nop
   11620:	200048b4 	.word	0x200048b4

00011624 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   11624:	b480      	push	{r7}
   11626:	b083      	sub	sp, #12
   11628:	af00      	add	r7, sp, #0
   1162a:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   1162c:	4a04      	ldr	r2, [pc, #16]	; (11640 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   1162e:	687b      	ldr	r3, [r7, #4]
   11630:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   11632:	687b      	ldr	r3, [r7, #4]
   11634:	4618      	mov	r0, r3
   11636:	370c      	adds	r7, #12
   11638:	46bd      	mov	sp, r7
   1163a:	bc80      	pop	{r7}
   1163c:	4770      	bx	lr
   1163e:	bf00      	nop
   11640:	200048b4 	.word	0x200048b4

00011644 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
}
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   11644:	b590      	push	{r4, r7, lr}
   11646:	b087      	sub	sp, #28
   11648:	af02      	add	r7, sp, #8
   1164a:	60f8      	str	r0, [r7, #12]
   1164c:	60b9      	str	r1, [r7, #8]
   1164e:	4611      	mov	r1, r2
   11650:	461a      	mov	r2, r3
   11652:	460b      	mov	r3, r1
   11654:	80fb      	strh	r3, [r7, #6]
   11656:	4613      	mov	r3, r2
   11658:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   1165a:	88b9      	ldrh	r1, [r7, #4]
   1165c:	88fa      	ldrh	r2, [r7, #6]
   1165e:	6a3b      	ldr	r3, [r7, #32]
   11660:	9300      	str	r3, [sp, #0]
   11662:	460b      	mov	r3, r1
   11664:	68b9      	ldr	r1, [r7, #8]
   11666:	68f8      	ldr	r0, [r7, #12]
   11668:	4c03      	ldr	r4, [pc, #12]	; (11678 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   1166a:	47a0      	blx	r4
   1166c:	4603      	mov	r3, r0
}
   1166e:	4618      	mov	r0, r3
   11670:	3714      	adds	r7, #20
   11672:	46bd      	mov	sp, r7
   11674:	bd90      	pop	{r4, r7, pc}
   11676:	bf00      	nop
   11678:	0001167d 	.word	0x0001167d

0001167c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   1167c:	b590      	push	{r4, r7, lr}
   1167e:	b08b      	sub	sp, #44	; 0x2c
   11680:	af00      	add	r7, sp, #0
   11682:	60f8      	str	r0, [r7, #12]
   11684:	60b9      	str	r1, [r7, #8]
   11686:	4611      	mov	r1, r2
   11688:	461a      	mov	r2, r3
   1168a:	460b      	mov	r3, r1
   1168c:	80fb      	strh	r3, [r7, #6]
   1168e:	4613      	mov	r3, r2
   11690:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   11692:	2300      	movs	r3, #0
   11694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	event*	queue;
	event*	queuePrev(NULL);
   11698:	2300      	movs	r3, #0
   1169a:	61fb      	str	r3, [r7, #28]
	
	
	e.eventClass = eventClass;
   1169c:	68bb      	ldr	r3, [r7, #8]
   1169e:	88fa      	ldrh	r2, [r7, #6]
   116a0:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   116a2:	68bb      	ldr	r3, [r7, #8]
   116a4:	88ba      	ldrh	r2, [r7, #4]
   116a6:	805a      	strh	r2, [r3, #2]

	tick_t	timeoutTime;
	
	if (timeout != forever)
   116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   116aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   116ae:	4293      	cmp	r3, r2
   116b0:	d007      	beq.n	116c2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x46>
	timeoutTime = (eventTimer.get_ticks() + timeout);
   116b2:	4853      	ldr	r0, [pc, #332]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   116b4:	4b53      	ldr	r3, [pc, #332]	; (11804 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   116b6:	4798      	blx	r3
   116b8:	4602      	mov	r2, r0
   116ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   116bc:	4413      	add	r3, r2
   116be:	61bb      	str	r3, [r7, #24]
   116c0:	e002      	b.n	116c8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
	else
	timeoutTime = forever;
   116c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   116c6:	61bb      	str	r3, [r7, #24]

	while (!result && (eventTimer.get_ticks() < timeoutTime))
   116c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116cc:	f083 0301 	eor.w	r3, r3, #1
   116d0:	b2db      	uxtb	r3, r3
   116d2:	2b00      	cmp	r3, #0
   116d4:	d008      	beq.n	116e8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   116d6:	484a      	ldr	r0, [pc, #296]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   116d8:	4b4a      	ldr	r3, [pc, #296]	; (11804 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   116da:	4798      	blx	r3
   116dc:	4602      	mov	r2, r0
   116de:	69bb      	ldr	r3, [r7, #24]
   116e0:	429a      	cmp	r2, r3
   116e2:	d201      	bcs.n	116e8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6c>
   116e4:	2301      	movs	r3, #1
   116e6:	e000      	b.n	116ea <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x6e>
   116e8:	2300      	movs	r3, #0
   116ea:	2b00      	cmp	r3, #0
   116ec:	f000 8081 	beq.w	117f2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x176>
	{
		if (eventHandler)
   116f0:	68fb      	ldr	r3, [r7, #12]
   116f2:	685b      	ldr	r3, [r3, #4]
   116f4:	2b00      	cmp	r3, #0
   116f6:	d002      	beq.n	116fe <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x82>
		{
			eventHandler();
   116f8:	68fb      	ldr	r3, [r7, #12]
   116fa:	685b      	ldr	r3, [r3, #4]
   116fc:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   116fe:	4b42      	ldr	r3, [pc, #264]	; (11808 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   11700:	681b      	ldr	r3, [r3, #0]
   11702:	623b      	str	r3, [r7, #32]

		while (queue)
   11704:	6a3b      	ldr	r3, [r7, #32]
   11706:	2b00      	cmp	r3, #0
   11708:	d041      	beq.n	1178e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (
			((e.eventClass == kAnyEventClass) ||
   1170a:	68bb      	ldr	r3, [r7, #8]
   1170c:	881b      	ldrh	r3, [r3, #0]
			if (
   1170e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11712:	4293      	cmp	r3, r2
   11714:	d005      	beq.n	11722 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xa6>
			(queue->eventClass == e.eventClass))
   11716:	6a3b      	ldr	r3, [r7, #32]
   11718:	881a      	ldrh	r2, [r3, #0]
   1171a:	68bb      	ldr	r3, [r7, #8]
   1171c:	881b      	ldrh	r3, [r3, #0]
			((e.eventClass == kAnyEventClass) ||
   1171e:	429a      	cmp	r2, r3
   11720:	d12f      	bne.n	11782 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			&&
			((e.eventType == kAnyEventType) ||
   11722:	68bb      	ldr	r3, [r7, #8]
   11724:	885b      	ldrh	r3, [r3, #2]
			&&
   11726:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1172a:	4293      	cmp	r3, r2
   1172c:	d005      	beq.n	1173a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xbe>
			(queue->eventType == e.eventType))
   1172e:	6a3b      	ldr	r3, [r7, #32]
   11730:	885a      	ldrh	r2, [r3, #2]
   11732:	68bb      	ldr	r3, [r7, #8]
   11734:	885b      	ldrh	r3, [r3, #2]
			((e.eventType == kAnyEventType) ||
   11736:	429a      	cmp	r2, r3
   11738:	d123      	bne.n	11782 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x106>
			)
			{
				if (queuePrev)
   1173a:	69fb      	ldr	r3, [r7, #28]
   1173c:	2b00      	cmp	r3, #0
   1173e:	d004      	beq.n	1174a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xce>
				{
					queuePrev->next = queue->next;
   11740:	6a3b      	ldr	r3, [r7, #32]
   11742:	68da      	ldr	r2, [r3, #12]
   11744:	69fb      	ldr	r3, [r7, #28]
   11746:	60da      	str	r2, [r3, #12]
   11748:	e003      	b.n	11752 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd6>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   1174a:	6a3b      	ldr	r3, [r7, #32]
   1174c:	68db      	ldr	r3, [r3, #12]
   1174e:	4a2e      	ldr	r2, [pc, #184]	; (11808 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x18c>)
   11750:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   11752:	68ba      	ldr	r2, [r7, #8]
   11754:	6a3b      	ldr	r3, [r7, #32]
   11756:	4614      	mov	r4, r2
   11758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1175a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   1175e:	4b2b      	ldr	r3, [pc, #172]	; (1180c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   11760:	681a      	ldr	r2, [r3, #0]
   11762:	6a3b      	ldr	r3, [r7, #32]
   11764:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   11766:	4a29      	ldr	r2, [pc, #164]	; (1180c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x190>)
   11768:	6a3b      	ldr	r3, [r7, #32]
   1176a:	6013      	str	r3, [r2, #0]
				
				eventsInUse--;
   1176c:	68fb      	ldr	r3, [r7, #12]
   1176e:	689b      	ldr	r3, [r3, #8]
   11770:	1e5a      	subs	r2, r3, #1
   11772:	68fb      	ldr	r3, [r7, #12]
   11774:	609a      	str	r2, [r3, #8]

				queue = NULL;
   11776:	2300      	movs	r3, #0
   11778:	623b      	str	r3, [r7, #32]
				result = true;
   1177a:	2301      	movs	r3, #1
   1177c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11780:	e004      	b.n	1178c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x110>
			}
			else
			{
				queuePrev = queue;
   11782:	6a3b      	ldr	r3, [r7, #32]
   11784:	61fb      	str	r3, [r7, #28]
				queue = queue->next;
   11786:	6a3b      	ldr	r3, [r7, #32]
   11788:	68db      	ldr	r3, [r3, #12]
   1178a:	623b      	str	r3, [r7, #32]
		while (queue)
   1178c:	e7ba      	b.n	11704 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x88>
			}
		}

		if (result)
   1178e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11792:	2b00      	cmp	r3, #0
   11794:	d198      	bne.n	116c8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
		
			#endif
		}
		else
		{
			tick_t	timeRemaining(timeoutTime - eventTimer.get_ticks());
   11796:	69bc      	ldr	r4, [r7, #24]
   11798:	4819      	ldr	r0, [pc, #100]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   1179a:	4b1a      	ldr	r3, [pc, #104]	; (11804 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   1179c:	4798      	blx	r3
   1179e:	4603      	mov	r3, r0
   117a0:	1ae3      	subs	r3, r4, r3
   117a2:	617b      	str	r3, [r7, #20]
			eventTimeout=false;
   117a4:	68fb      	ldr	r3, [r7, #12]
   117a6:	2200      	movs	r2, #0
   117a8:	701a      	strb	r2, [r3, #0]
			if (timeRemaining > CHECK_EVENT_PERIOD){
   117aa:	697b      	ldr	r3, [r7, #20]
   117ac:	2b32      	cmp	r3, #50	; 0x32
   117ae:	dd05      	ble.n	117bc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x140>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   117b0:	2232      	movs	r2, #50	; 0x32
   117b2:	4917      	ldr	r1, [pc, #92]	; (11810 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   117b4:	4812      	ldr	r0, [pc, #72]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117b6:	4b17      	ldr	r3, [pc, #92]	; (11814 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   117b8:	4798      	blx	r3
   117ba:	e00d      	b.n	117d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
			}else if (timeRemaining > 0){
   117bc:	697b      	ldr	r3, [r7, #20]
   117be:	2b00      	cmp	r3, #0
   117c0:	dd0a      	ble.n	117d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x15c>
				eventTimer.add_oneShot_task((FUNC_PTR)EventTimerTask,timeoutTime - eventTimer.get_ticks());
   117c2:	69bc      	ldr	r4, [r7, #24]
   117c4:	480e      	ldr	r0, [pc, #56]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117c6:	4b0f      	ldr	r3, [pc, #60]	; (11804 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x188>)
   117c8:	4798      	blx	r3
   117ca:	4603      	mov	r3, r0
   117cc:	1ae3      	subs	r3, r4, r3
   117ce:	461a      	mov	r2, r3
   117d0:	490f      	ldr	r1, [pc, #60]	; (11810 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x194>)
   117d2:	480b      	ldr	r0, [pc, #44]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117d4:	4b0f      	ldr	r3, [pc, #60]	; (11814 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x198>)
   117d6:	4798      	blx	r3
			}
			eventTimer.start();
   117d8:	4809      	ldr	r0, [pc, #36]	; (11800 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x184>)
   117da:	4b0f      	ldr	r3, [pc, #60]	; (11818 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x19c>)
   117dc:	4798      	blx	r3
			while (!eventTimeout);
   117de:	68fb      	ldr	r3, [r7, #12]
   117e0:	781b      	ldrb	r3, [r3, #0]
   117e2:	b2db      	uxtb	r3, r3
   117e4:	f083 0301 	eor.w	r3, r3, #1
   117e8:	b2db      	uxtb	r3, r3
   117ea:	2b00      	cmp	r3, #0
   117ec:	f43f af6c 	beq.w	116c8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x4c>
   117f0:	e7f5      	b.n	117de <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x162>
		
		}
	}

	return result;
   117f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   117f6:	4618      	mov	r0, r3
   117f8:	372c      	adds	r7, #44	; 0x2c
   117fa:	46bd      	mov	sp, r7
   117fc:	bd90      	pop	{r4, r7, pc}
   117fe:	bf00      	nop
   11800:	20004cac 	.word	0x20004cac
   11804:	000139ad 	.word	0x000139ad
   11808:	200048b0 	.word	0x200048b0
   1180c:	200048ac 	.word	0x200048ac
   11810:	000115e5 	.word	0x000115e5
   11814:	00013975 	.word	0x00013975
   11818:	000138cd 	.word	0x000138cd

0001181c <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   1181c:	b580      	push	{r7, lr}
   1181e:	b084      	sub	sp, #16
   11820:	af00      	add	r7, sp, #0
   11822:	6078      	str	r0, [r7, #4]
   11824:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   11826:	4b22      	ldr	r3, [pc, #136]	; (118b0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11828:	681b      	ldr	r3, [r3, #0]
   1182a:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   1182c:	68bb      	ldr	r3, [r7, #8]
   1182e:	2b00      	cmp	r3, #0
   11830:	d035      	beq.n	1189e <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   11832:	4b1f      	ldr	r3, [pc, #124]	; (118b0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   11834:	681b      	ldr	r3, [r3, #0]
   11836:	68db      	ldr	r3, [r3, #12]
   11838:	4a1d      	ldr	r2, [pc, #116]	; (118b0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   1183a:	6013      	str	r3, [r2, #0]
		theEvent->next = NULL;
   1183c:	68bb      	ldr	r3, [r7, #8]
   1183e:	2200      	movs	r2, #0
   11840:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   11842:	687b      	ldr	r3, [r7, #4]
   11844:	689b      	ldr	r3, [r3, #8]
   11846:	1c5a      	adds	r2, r3, #1
   11848:	687b      	ldr	r3, [r7, #4]
   1184a:	609a      	str	r2, [r3, #8]

		event*	threadQueue((event*)mainThreadEventQueue);
   1184c:	4b19      	ldr	r3, [pc, #100]	; (118b4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   1184e:	681b      	ldr	r3, [r3, #0]
   11850:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   11852:	68fb      	ldr	r3, [r7, #12]
   11854:	2b00      	cmp	r3, #0
   11856:	d103      	bne.n	11860 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   11858:	4a16      	ldr	r2, [pc, #88]	; (118b4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   1185a:	68bb      	ldr	r3, [r7, #8]
   1185c:	6013      	str	r3, [r2, #0]
   1185e:	e00a      	b.n	11876 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   11860:	68fb      	ldr	r3, [r7, #12]
   11862:	68db      	ldr	r3, [r3, #12]
   11864:	2b00      	cmp	r3, #0
   11866:	d003      	beq.n	11870 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   11868:	68fb      	ldr	r3, [r7, #12]
   1186a:	68db      	ldr	r3, [r3, #12]
   1186c:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   1186e:	e7f7      	b.n	11860 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   11870:	68fb      	ldr	r3, [r7, #12]
   11872:	68ba      	ldr	r2, [r7, #8]
   11874:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   11876:	683b      	ldr	r3, [r7, #0]
   11878:	881a      	ldrh	r2, [r3, #0]
   1187a:	68bb      	ldr	r3, [r7, #8]
   1187c:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   1187e:	683b      	ldr	r3, [r7, #0]
   11880:	885a      	ldrh	r2, [r3, #2]
   11882:	68bb      	ldr	r3, [r7, #8]
   11884:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   11886:	68bb      	ldr	r3, [r7, #8]
   11888:	683a      	ldr	r2, [r7, #0]
   1188a:	6892      	ldr	r2, [r2, #8]
   1188c:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.get_ticks();
   1188e:	480a      	ldr	r0, [pc, #40]	; (118b8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   11890:	4b0a      	ldr	r3, [pc, #40]	; (118bc <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa0>)
   11892:	4798      	blx	r3
   11894:	4603      	mov	r3, r0
   11896:	461a      	mov	r2, r3
   11898:	68bb      	ldr	r3, [r7, #8]
   1189a:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   1189c:	e004      	b.n	118a8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   1189e:	687b      	ldr	r3, [r7, #4]
   118a0:	699b      	ldr	r3, [r3, #24]
   118a2:	1c5a      	adds	r2, r3, #1
   118a4:	687b      	ldr	r3, [r7, #4]
   118a6:	619a      	str	r2, [r3, #24]
}
   118a8:	bf00      	nop
   118aa:	3710      	adds	r7, #16
   118ac:	46bd      	mov	sp, r7
   118ae:	bd80      	pop	{r7, pc}
   118b0:	200048ac 	.word	0x200048ac
   118b4:	200048b0 	.word	0x200048b0
   118b8:	20004cac 	.word	0x20004cac
   118bc:	000139ad 	.word	0x000139ad

000118c0 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   118c0:	b580      	push	{r7, lr}
   118c2:	b088      	sub	sp, #32
   118c4:	af00      	add	r7, sp, #0
   118c6:	60f8      	str	r0, [r7, #12]
   118c8:	460b      	mov	r3, r1
   118ca:	607a      	str	r2, [r7, #4]
   118cc:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   118ce:	f107 0310 	add.w	r3, r7, #16
   118d2:	4618      	mov	r0, r3
   118d4:	4b09      	ldr	r3, [pc, #36]	; (118fc <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   118d6:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   118d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118dc:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   118de:	897b      	ldrh	r3, [r7, #10]
   118e0:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   118e2:	687b      	ldr	r3, [r7, #4]
   118e4:	681b      	ldr	r3, [r3, #0]
   118e6:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   118e8:	f107 0310 	add.w	r3, r7, #16
   118ec:	4619      	mov	r1, r3
   118ee:	68f8      	ldr	r0, [r7, #12]
   118f0:	4b03      	ldr	r3, [pc, #12]	; (11900 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   118f2:	4798      	blx	r3
}
   118f4:	bf00      	nop
   118f6:	3720      	adds	r7, #32
   118f8:	46bd      	mov	sp, r7
   118fa:	bd80      	pop	{r7, pc}
   118fc:	00001e91 	.word	0x00001e91
   11900:	0001181d 	.word	0x0001181d

00011904 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   11904:	b580      	push	{r7, lr}
   11906:	b08a      	sub	sp, #40	; 0x28
   11908:	af00      	add	r7, sp, #0
   1190a:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   1190c:	f04f 0300 	mov.w	r3, #0
   11910:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   11912:	f04f 0300 	mov.w	r3, #0
   11916:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   11918:	f04f 0300 	mov.w	r3, #0
   1191c:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   1191e:	f107 030c 	add.w	r3, r7, #12
   11922:	4618      	mov	r0, r3
   11924:	4b03      	ldr	r3, [pc, #12]	; (11934 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   11926:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   11928:	687b      	ldr	r3, [r7, #4]
   1192a:	689b      	ldr	r3, [r3, #8]
	
}
   1192c:	4618      	mov	r0, r3
   1192e:	3728      	adds	r7, #40	; 0x28
   11930:	46bd      	mov	sp, r7
   11932:	bd80      	pop	{r7, pc}
   11934:	00001e91 	.word	0x00001e91

00011938 <_Z41__static_initialization_and_destruction_0ii>:


   11938:	b5b0      	push	{r4, r5, r7, lr}
   1193a:	b082      	sub	sp, #8
   1193c:	af00      	add	r7, sp, #0
   1193e:	6078      	str	r0, [r7, #4]
   11940:	6039      	str	r1, [r7, #0]
   11942:	687b      	ldr	r3, [r7, #4]
   11944:	2b01      	cmp	r3, #1
   11946:	d117      	bne.n	11978 <_Z41__static_initialization_and_destruction_0ii+0x40>
   11948:	683b      	ldr	r3, [r7, #0]
   1194a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1194e:	4293      	cmp	r3, r2
   11950:	d112      	bne.n	11978 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   11952:	4b0b      	ldr	r3, [pc, #44]	; (11980 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11954:	24ff      	movs	r4, #255	; 0xff
   11956:	461d      	mov	r5, r3
   11958:	2c00      	cmp	r4, #0
   1195a:	db05      	blt.n	11968 <_Z41__static_initialization_and_destruction_0ii+0x30>
   1195c:	4628      	mov	r0, r5
   1195e:	4b09      	ldr	r3, [pc, #36]	; (11984 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   11960:	4798      	blx	r3
   11962:	3510      	adds	r5, #16
   11964:	3c01      	subs	r4, #1
   11966:	e7f7      	b.n	11958 <_Z41__static_initialization_and_destruction_0ii+0x20>
   11968:	4807      	ldr	r0, [pc, #28]	; (11988 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   1196a:	4b08      	ldr	r3, [pc, #32]	; (1198c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1196c:	4798      	blx	r3
   1196e:	4a08      	ldr	r2, [pc, #32]	; (11990 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   11970:	4908      	ldr	r1, [pc, #32]	; (11994 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   11972:	4805      	ldr	r0, [pc, #20]	; (11988 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   11974:	4b08      	ldr	r3, [pc, #32]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   11976:	4798      	blx	r3
   11978:	bf00      	nop
   1197a:	3708      	adds	r7, #8
   1197c:	46bd      	mov	sp, r7
   1197e:	bdb0      	pop	{r4, r5, r7, pc}
   11980:	200038ac 	.word	0x200038ac
   11984:	00001e91 	.word	0x00001e91
   11988:	200048c4 	.word	0x200048c4
   1198c:	00011605 	.word	0x00011605
   11990:	20000000 	.word	0x20000000
   11994:	00011625 	.word	0x00011625
   11998:	00014919 	.word	0x00014919

0001199c <_GLOBAL__sub_I_maxEventCount>:
   1199c:	b580      	push	{r7, lr}
   1199e:	af00      	add	r7, sp, #0
   119a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   119a4:	2001      	movs	r0, #1
   119a6:	4b01      	ldr	r3, [pc, #4]	; (119ac <_GLOBAL__sub_I_maxEventCount+0x10>)
   119a8:	4798      	blx	r3
   119aa:	bd80      	pop	{r7, pc}
   119ac:	00011939 	.word	0x00011939

000119b0 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
   119b0:	b580      	push	{r7, lr}
   119b2:	b082      	sub	sp, #8
   119b4:	af00      	add	r7, sp, #0
   119b6:	6078      	str	r0, [r7, #4]
   119b8:	6039      	str	r1, [r7, #0]
   119ba:	687b      	ldr	r3, [r7, #4]
   119bc:	3308      	adds	r3, #8
   119be:	4618      	mov	r0, r3
   119c0:	4b06      	ldr	r3, [pc, #24]	; (119dc <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
   119c2:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   119c4:	687b      	ldr	r3, [r7, #4]
   119c6:	683a      	ldr	r2, [r7, #0]
   119c8:	605a      	str	r2, [r3, #4]
	ptrMCP23017Class=this;
   119ca:	4a05      	ldr	r2, [pc, #20]	; (119e0 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
   119cc:	687b      	ldr	r3, [r7, #4]
   119ce:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   119d0:	687b      	ldr	r3, [r7, #4]
   119d2:	4618      	mov	r0, r3
   119d4:	3708      	adds	r7, #8
   119d6:	46bd      	mov	sp, r7
   119d8:	bd80      	pop	{r7, pc}
   119da:	bf00      	nop
   119dc:	000146a9 	.word	0x000146a9
   119e0:	200048e0 	.word	0x200048e0

000119e4 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   119e4:	b580      	push	{r7, lr}
   119e6:	b082      	sub	sp, #8
   119e8:	af00      	add	r7, sp, #0
   119ea:	6078      	str	r0, [r7, #4]
   119ec:	687b      	ldr	r3, [r7, #4]
   119ee:	3308      	adds	r3, #8
   119f0:	4618      	mov	r0, r3
   119f2:	4b03      	ldr	r3, [pc, #12]	; (11a00 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   119f4:	4798      	blx	r3
{
} //~AT24MAC_Class
   119f6:	687b      	ldr	r3, [r7, #4]
   119f8:	4618      	mov	r0, r3
   119fa:	3708      	adds	r7, #8
   119fc:	46bd      	mov	sp, r7
   119fe:	bd80      	pop	{r7, pc}
   11a00:	000146d1 	.word	0x000146d1

00011a04 <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
   11a04:	b580      	push	{r7, lr}
   11a06:	b082      	sub	sp, #8
   11a08:	af00      	add	r7, sp, #0
   11a0a:	6078      	str	r0, [r7, #4]
   11a0c:	460b      	mov	r3, r1
   11a0e:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   11a10:	687b      	ldr	r3, [r7, #4]
   11a12:	78fa      	ldrb	r2, [r7, #3]
   11a14:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
   11a16:	687b      	ldr	r3, [r7, #4]
   11a18:	f103 0208 	add.w	r2, r3, #8
   11a1c:	687b      	ldr	r3, [r7, #4]
   11a1e:	685b      	ldr	r3, [r3, #4]
   11a20:	4619      	mov	r1, r3
   11a22:	4610      	mov	r0, r2
   11a24:	4b0a      	ldr	r3, [pc, #40]	; (11a50 <_ZN14MCP23017_Class4InitEh+0x4c>)
   11a26:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   11a28:	687b      	ldr	r3, [r7, #4]
   11a2a:	3308      	adds	r3, #8
   11a2c:	78fa      	ldrb	r2, [r7, #3]
   11a2e:	4611      	mov	r1, r2
   11a30:	4618      	mov	r0, r3
   11a32:	4b08      	ldr	r3, [pc, #32]	; (11a54 <_ZN14MCP23017_Class4InitEh+0x50>)
   11a34:	4798      	blx	r3
   11a36:	4603      	mov	r3, r0
   11a38:	2b00      	cmp	r3, #0
   11a3a:	bf0c      	ite	eq
   11a3c:	2301      	moveq	r3, #1
   11a3e:	2300      	movne	r3, #0
   11a40:	b2da      	uxtb	r2, r3
   11a42:	687b      	ldr	r3, [r7, #4]
   11a44:	701a      	strb	r2, [r3, #0]
}
   11a46:	bf00      	nop
   11a48:	3708      	adds	r7, #8
   11a4a:	46bd      	mov	sp, r7
   11a4c:	bd80      	pop	{r7, pc}
   11a4e:	bf00      	nop
   11a50:	000146e5 	.word	0x000146e5
   11a54:	00014789 	.word	0x00014789

00011a58 <_ZN14MCP23017_Class4InitEv>:
}

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
   11a58:	b580      	push	{r7, lr}
   11a5a:	b082      	sub	sp, #8
   11a5c:	af00      	add	r7, sp, #0
   11a5e:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
   11a60:	2127      	movs	r1, #39	; 0x27
   11a62:	6878      	ldr	r0, [r7, #4]
   11a64:	4b04      	ldr	r3, [pc, #16]	; (11a78 <_ZN14MCP23017_Class4InitEv+0x20>)
   11a66:	4798      	blx	r3
	return	SelfTest();	
   11a68:	6878      	ldr	r0, [r7, #4]
   11a6a:	4b04      	ldr	r3, [pc, #16]	; (11a7c <_ZN14MCP23017_Class4InitEv+0x24>)
   11a6c:	4798      	blx	r3
   11a6e:	4603      	mov	r3, r0
}
   11a70:	4618      	mov	r0, r3
   11a72:	3708      	adds	r7, #8
   11a74:	46bd      	mov	sp, r7
   11a76:	bd80      	pop	{r7, pc}
   11a78:	00011a05 	.word	0x00011a05
   11a7c:	00011bad 	.word	0x00011bad

00011a80 <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
   11a80:	b580      	push	{r7, lr}
   11a82:	b082      	sub	sp, #8
   11a84:	af00      	add	r7, sp, #0
   11a86:	6078      	str	r0, [r7, #4]
   11a88:	460b      	mov	r3, r1
   11a8a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   11a8c:	687b      	ldr	r3, [r7, #4]
   11a8e:	3308      	adds	r3, #8
   11a90:	1cf9      	adds	r1, r7, #3
   11a92:	2201      	movs	r2, #1
   11a94:	4618      	mov	r0, r3
   11a96:	4b11      	ldr	r3, [pc, #68]	; (11adc <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
   11a98:	4798      	blx	r3
	while(!i2ca.txReady);
   11a9a:	687b      	ldr	r3, [r7, #4]
   11a9c:	7a1b      	ldrb	r3, [r3, #8]
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	f083 0301 	eor.w	r3, r3, #1
   11aa4:	b2db      	uxtb	r3, r3
   11aa6:	2b00      	cmp	r3, #0
   11aa8:	d000      	beq.n	11aac <_ZN14MCP23017_Class12readRegisterEh+0x2c>
   11aaa:	e7f6      	b.n	11a9a <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
   11aac:	687b      	ldr	r3, [r7, #4]
   11aae:	f103 0008 	add.w	r0, r3, #8
   11ab2:	687b      	ldr	r3, [r7, #4]
   11ab4:	3319      	adds	r3, #25
   11ab6:	2201      	movs	r2, #1
   11ab8:	4619      	mov	r1, r3
   11aba:	4b09      	ldr	r3, [pc, #36]	; (11ae0 <_ZN14MCP23017_Class12readRegisterEh+0x60>)
   11abc:	4798      	blx	r3
	while(!i2ca.rxReady);
   11abe:	687b      	ldr	r3, [r7, #4]
   11ac0:	7a5b      	ldrb	r3, [r3, #9]
   11ac2:	b2db      	uxtb	r3, r3
   11ac4:	f083 0301 	eor.w	r3, r3, #1
   11ac8:	b2db      	uxtb	r3, r3
   11aca:	2b00      	cmp	r3, #0
   11acc:	d000      	beq.n	11ad0 <_ZN14MCP23017_Class12readRegisterEh+0x50>
   11ace:	e7f6      	b.n	11abe <_ZN14MCP23017_Class12readRegisterEh+0x3e>
	return registerValue;
   11ad0:	687b      	ldr	r3, [r7, #4]
   11ad2:	7e5b      	ldrb	r3, [r3, #25]
}
   11ad4:	4618      	mov	r0, r3
   11ad6:	3708      	adds	r7, #8
   11ad8:	46bd      	mov	sp, r7
   11ada:	bd80      	pop	{r7, pc}
   11adc:	000147d1 	.word	0x000147d1
   11ae0:	00014815 	.word	0x00014815

00011ae4 <_ZN14MCP23017_Class8readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t MCP23017_Class::readGPIO(uint8_t b) {
   11ae4:	b580      	push	{r7, lr}
   11ae6:	b082      	sub	sp, #8
   11ae8:	af00      	add	r7, sp, #0
   11aea:	6078      	str	r0, [r7, #4]
   11aec:	460b      	mov	r3, r1
   11aee:	70fb      	strb	r3, [r7, #3]

	if (b == 0){
   11af0:	78fb      	ldrb	r3, [r7, #3]
   11af2:	2b00      	cmp	r3, #0
   11af4:	d10c      	bne.n	11b10 <_ZN14MCP23017_Class8readGPIOEh+0x2c>
		regAddress=MCP23017_GPIOA;
   11af6:	687b      	ldr	r3, [r7, #4]
   11af8:	2212      	movs	r2, #18
   11afa:	769a      	strb	r2, [r3, #26]
		i2ca.Write(&regAddress,1);
   11afc:	687b      	ldr	r3, [r7, #4]
   11afe:	f103 0008 	add.w	r0, r3, #8
   11b02:	687b      	ldr	r3, [r7, #4]
   11b04:	331a      	adds	r3, #26
   11b06:	2201      	movs	r2, #1
   11b08:	4619      	mov	r1, r3
   11b0a:	4b18      	ldr	r3, [pc, #96]	; (11b6c <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   11b0c:	4798      	blx	r3
   11b0e:	e00b      	b.n	11b28 <_ZN14MCP23017_Class8readGPIOEh+0x44>
	}else {
		regAddress=MCP23017_GPIOB;
   11b10:	687b      	ldr	r3, [r7, #4]
   11b12:	2213      	movs	r2, #19
   11b14:	769a      	strb	r2, [r3, #26]
		i2ca.Write(&regAddress,1);
   11b16:	687b      	ldr	r3, [r7, #4]
   11b18:	f103 0008 	add.w	r0, r3, #8
   11b1c:	687b      	ldr	r3, [r7, #4]
   11b1e:	331a      	adds	r3, #26
   11b20:	2201      	movs	r2, #1
   11b22:	4619      	mov	r1, r3
   11b24:	4b11      	ldr	r3, [pc, #68]	; (11b6c <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   11b26:	4798      	blx	r3
	}


		while(!i2ca.txReady);
   11b28:	687b      	ldr	r3, [r7, #4]
   11b2a:	7a1b      	ldrb	r3, [r3, #8]
   11b2c:	b2db      	uxtb	r3, r3
   11b2e:	f083 0301 	eor.w	r3, r3, #1
   11b32:	b2db      	uxtb	r3, r3
   11b34:	2b00      	cmp	r3, #0
   11b36:	d000      	beq.n	11b3a <_ZN14MCP23017_Class8readGPIOEh+0x56>
   11b38:	e7f6      	b.n	11b28 <_ZN14MCP23017_Class8readGPIOEh+0x44>
		i2ca.Read(&registerValue,1);
   11b3a:	687b      	ldr	r3, [r7, #4]
   11b3c:	f103 0008 	add.w	r0, r3, #8
   11b40:	687b      	ldr	r3, [r7, #4]
   11b42:	3319      	adds	r3, #25
   11b44:	2201      	movs	r2, #1
   11b46:	4619      	mov	r1, r3
   11b48:	4b09      	ldr	r3, [pc, #36]	; (11b70 <_ZN14MCP23017_Class8readGPIOEh+0x8c>)
   11b4a:	4798      	blx	r3
		while(!i2ca.rxReady);
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	7a5b      	ldrb	r3, [r3, #9]
   11b50:	b2db      	uxtb	r3, r3
   11b52:	f083 0301 	eor.w	r3, r3, #1
   11b56:	b2db      	uxtb	r3, r3
   11b58:	2b00      	cmp	r3, #0
   11b5a:	d000      	beq.n	11b5e <_ZN14MCP23017_Class8readGPIOEh+0x7a>
   11b5c:	e7f6      	b.n	11b4c <_ZN14MCP23017_Class8readGPIOEh+0x68>
		return	registerValue;
   11b5e:	687b      	ldr	r3, [r7, #4]
   11b60:	7e5b      	ldrb	r3, [r3, #25]
}
   11b62:	4618      	mov	r0, r3
   11b64:	3708      	adds	r7, #8
   11b66:	46bd      	mov	sp, r7
   11b68:	bd80      	pop	{r7, pc}
   11b6a:	bf00      	nop
   11b6c:	000147d1 	.word	0x000147d1
   11b70:	00014815 	.word	0x00014815

00011b74 <_ZN14MCP23017_Class9SavePortsEv>:
	for(int i=0;i<8;i++) if (bitRead(intf,i)) return i+8;

	return MCP23017_INT_ERR;

}
uint8_t	MCP23017_Class::SavePorts(void){
   11b74:	b580      	push	{r7, lr}
   11b76:	b082      	sub	sp, #8
   11b78:	af00      	add	r7, sp, #0
   11b7a:	6078      	str	r0, [r7, #4]
	portA=readGPIO(0);
   11b7c:	2100      	movs	r1, #0
   11b7e:	6878      	ldr	r0, [r7, #4]
   11b80:	4b09      	ldr	r3, [pc, #36]	; (11ba8 <_ZN14MCP23017_Class9SavePortsEv+0x34>)
   11b82:	4798      	blx	r3
   11b84:	4603      	mov	r3, r0
   11b86:	461a      	mov	r2, r3
   11b88:	687b      	ldr	r3, [r7, #4]
   11b8a:	779a      	strb	r2, [r3, #30]
	portB=readGPIO(1);
   11b8c:	2101      	movs	r1, #1
   11b8e:	6878      	ldr	r0, [r7, #4]
   11b90:	4b05      	ldr	r3, [pc, #20]	; (11ba8 <_ZN14MCP23017_Class9SavePortsEv+0x34>)
   11b92:	4798      	blx	r3
   11b94:	4603      	mov	r3, r0
   11b96:	461a      	mov	r2, r3
   11b98:	687b      	ldr	r3, [r7, #4]
   11b9a:	77da      	strb	r2, [r3, #31]
}
   11b9c:	bf00      	nop
   11b9e:	4618      	mov	r0, r3
   11ba0:	3708      	adds	r7, #8
   11ba2:	46bd      	mov	sp, r7
   11ba4:	bd80      	pop	{r7, pc}
   11ba6:	bf00      	nop
   11ba8:	00011ae5 	.word	0x00011ae5

00011bac <_ZN14MCP23017_Class8SelfTestEv>:
		return (readRegister(intcapreg)>>bit) & (0x01);
	}

	return MCP23017_INT_ERR;
}
bool	MCP23017_Class::SelfTest(void){
   11bac:	b580      	push	{r7, lr}
   11bae:	b082      	sub	sp, #8
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
	controlRegisterA=readRegister(MCP23017_IOCONA);
   11bb4:	210a      	movs	r1, #10
   11bb6:	6878      	ldr	r0, [r7, #4]
   11bb8:	4b11      	ldr	r3, [pc, #68]	; (11c00 <_ZN14MCP23017_Class8SelfTestEv+0x54>)
   11bba:	4798      	blx	r3
   11bbc:	4603      	mov	r3, r0
   11bbe:	461a      	mov	r2, r3
   11bc0:	687b      	ldr	r3, [r7, #4]
   11bc2:	771a      	strb	r2, [r3, #28]
	controlRegisterB=readRegister(MCP23017_IOCONB);
   11bc4:	210b      	movs	r1, #11
   11bc6:	6878      	ldr	r0, [r7, #4]
   11bc8:	4b0d      	ldr	r3, [pc, #52]	; (11c00 <_ZN14MCP23017_Class8SelfTestEv+0x54>)
   11bca:	4798      	blx	r3
   11bcc:	4603      	mov	r3, r0
   11bce:	461a      	mov	r2, r3
   11bd0:	687b      	ldr	r3, [r7, #4]
   11bd2:	775a      	strb	r2, [r3, #29]
	if (controlRegisterA==controlRegisterB)
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	7f1a      	ldrb	r2, [r3, #28]
   11bd8:	687b      	ldr	r3, [r7, #4]
   11bda:	7f5b      	ldrb	r3, [r3, #29]
   11bdc:	429a      	cmp	r2, r3
   11bde:	d104      	bne.n	11bea <_ZN14MCP23017_Class8SelfTestEv+0x3e>
		{
			isOK=true;
		} 
		else
		{
			isOK=false;
   11be0:	687b      	ldr	r3, [r7, #4]
   11be2:	2200      	movs	r2, #0
   11be4:	f883 2020 	strb.w	r2, [r3, #32]
   11be8:	e003      	b.n	11bf2 <_ZN14MCP23017_Class8SelfTestEv+0x46>
		}
	} 
	else
	{
		isOK=false;
   11bea:	687b      	ldr	r3, [r7, #4]
   11bec:	2200      	movs	r2, #0
   11bee:	f883 2020 	strb.w	r2, [r3, #32]
	}
	return isOK;
   11bf2:	687b      	ldr	r3, [r7, #4]
   11bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
}
   11bf8:	4618      	mov	r0, r3
   11bfa:	3708      	adds	r7, #8
   11bfc:	46bd      	mov	sp, r7
   11bfe:	bd80      	pop	{r7, pc}
   11c00:	00011a81 	.word	0x00011a81

00011c04 <_Z41__static_initialization_and_destruction_0ii>:
   11c04:	b580      	push	{r7, lr}
   11c06:	b082      	sub	sp, #8
   11c08:	af00      	add	r7, sp, #0
   11c0a:	6078      	str	r0, [r7, #4]
   11c0c:	6039      	str	r1, [r7, #0]
   11c0e:	687b      	ldr	r3, [r7, #4]
   11c10:	2b01      	cmp	r3, #1
   11c12:	d10d      	bne.n	11c30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11c14:	683b      	ldr	r3, [r7, #0]
   11c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11c1a:	4293      	cmp	r3, r2
   11c1c:	d108      	bne.n	11c30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11c1e:	4906      	ldr	r1, [pc, #24]	; (11c38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11c20:	4806      	ldr	r0, [pc, #24]	; (11c3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11c22:	4b07      	ldr	r3, [pc, #28]	; (11c40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11c24:	4798      	blx	r3
   11c26:	4a07      	ldr	r2, [pc, #28]	; (11c44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11c28:	4907      	ldr	r1, [pc, #28]	; (11c48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11c2a:	4804      	ldr	r0, [pc, #16]	; (11c3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11c2c:	4b07      	ldr	r3, [pc, #28]	; (11c4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11c2e:	4798      	blx	r3
   11c30:	bf00      	nop
   11c32:	3708      	adds	r7, #8
   11c34:	46bd      	mov	sp, r7
   11c36:	bd80      	pop	{r7, pc}
   11c38:	20004fcc 	.word	0x20004fcc
   11c3c:	200048e4 	.word	0x200048e4
   11c40:	000119b1 	.word	0x000119b1
   11c44:	20000000 	.word	0x20000000
   11c48:	000119e5 	.word	0x000119e5
   11c4c:	00014919 	.word	0x00014919

00011c50 <_GLOBAL__sub_I_ptrMCP23017Class>:
   11c50:	b580      	push	{r7, lr}
   11c52:	af00      	add	r7, sp, #0
   11c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11c58:	2001      	movs	r0, #1
   11c5a:	4b01      	ldr	r3, [pc, #4]	; (11c60 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   11c5c:	4798      	blx	r3
   11c5e:	bd80      	pop	{r7, pc}
   11c60:	00011c05 	.word	0x00011c05

00011c64 <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
   11c64:	b580      	push	{r7, lr}
   11c66:	b082      	sub	sp, #8
   11c68:	af00      	add	r7, sp, #0
   11c6a:	6078      	str	r0, [r7, #4]
   11c6c:	687b      	ldr	r3, [r7, #4]
   11c6e:	4618      	mov	r0, r3
   11c70:	4b03      	ldr	r3, [pc, #12]	; (11c80 <_ZN13LTC2983_ClassD1Ev+0x1c>)
   11c72:	4798      	blx	r3
{
} //~LTC2983_Class
   11c74:	687b      	ldr	r3, [r7, #4]
   11c76:	4618      	mov	r0, r3
   11c78:	3708      	adds	r7, #8
   11c7a:	46bd      	mov	sp, r7
   11c7c:	bd80      	pop	{r7, pc}
   11c7e:	bf00      	nop
   11c80:	00011d35 	.word	0x00011d35

00011c84 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
   11c84:	b580      	push	{r7, lr}
   11c86:	b082      	sub	sp, #8
   11c88:	af00      	add	r7, sp, #0
   11c8a:	6078      	str	r0, [r7, #4]
   11c8c:	6039      	str	r1, [r7, #0]
   11c8e:	687b      	ldr	r3, [r7, #4]
   11c90:	4618      	mov	r0, r3
   11c92:	4b06      	ldr	r3, [pc, #24]	; (11cac <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
   11c94:	4798      	blx	r3
	ptrLTCClass=this;
   11c96:	4a06      	ldr	r2, [pc, #24]	; (11cb0 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
   11c98:	687b      	ldr	r3, [r7, #4]
   11c9a:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	683a      	ldr	r2, [r7, #0]
   11ca0:	615a      	str	r2, [r3, #20]
	};
   11ca2:	687b      	ldr	r3, [r7, #4]
   11ca4:	4618      	mov	r0, r3
   11ca6:	3708      	adds	r7, #8
   11ca8:	46bd      	mov	sp, r7
   11caa:	bd80      	pop	{r7, pc}
   11cac:	00011d15 	.word	0x00011d15
   11cb0:	20004908 	.word	0x20004908

00011cb4 <_Z41__static_initialization_and_destruction_0ii>:
	}
	isOK=process_finished==1?true:false;
	return	isOK;
	}

LTC2983_Class	temperatures(&SPI_TEMP);
   11cb4:	b580      	push	{r7, lr}
   11cb6:	b082      	sub	sp, #8
   11cb8:	af00      	add	r7, sp, #0
   11cba:	6078      	str	r0, [r7, #4]
   11cbc:	6039      	str	r1, [r7, #0]
   11cbe:	687b      	ldr	r3, [r7, #4]
   11cc0:	2b01      	cmp	r3, #1
   11cc2:	d10d      	bne.n	11ce0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11cc4:	683b      	ldr	r3, [r7, #0]
   11cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11cca:	4293      	cmp	r3, r2
   11ccc:	d108      	bne.n	11ce0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11cce:	4906      	ldr	r1, [pc, #24]	; (11ce8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11cd0:	4806      	ldr	r0, [pc, #24]	; (11cec <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11cd2:	4b07      	ldr	r3, [pc, #28]	; (11cf0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11cd4:	4798      	blx	r3
   11cd6:	4a07      	ldr	r2, [pc, #28]	; (11cf4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11cd8:	4907      	ldr	r1, [pc, #28]	; (11cf8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11cda:	4804      	ldr	r0, [pc, #16]	; (11cec <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11cdc:	4b07      	ldr	r3, [pc, #28]	; (11cfc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11cde:	4798      	blx	r3
   11ce0:	bf00      	nop
   11ce2:	3708      	adds	r7, #8
   11ce4:	46bd      	mov	sp, r7
   11ce6:	bd80      	pop	{r7, pc}
   11ce8:	20004eb0 	.word	0x20004eb0
   11cec:	2000490c 	.word	0x2000490c
   11cf0:	00011c85 	.word	0x00011c85
   11cf4:	20000000 	.word	0x20000000
   11cf8:	00011c65 	.word	0x00011c65
   11cfc:	00014919 	.word	0x00014919

00011d00 <_GLOBAL__sub_I_ptrLTCClass>:
   11d00:	b580      	push	{r7, lr}
   11d02:	af00      	add	r7, sp, #0
   11d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11d08:	2001      	movs	r0, #1
   11d0a:	4b01      	ldr	r3, [pc, #4]	; (11d10 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   11d0c:	4798      	blx	r3
   11d0e:	bd80      	pop	{r7, pc}
   11d10:	00011cb5 	.word	0x00011cb5

00011d14 <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
   11d14:	b480      	push	{r7}
   11d16:	b083      	sub	sp, #12
   11d18:	af00      	add	r7, sp, #0
   11d1a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   11d1c:	4a04      	ldr	r2, [pc, #16]	; (11d30 <_ZN6LT_SPIC1Ev+0x1c>)
   11d1e:	687b      	ldr	r3, [r7, #4]
   11d20:	6013      	str	r3, [r2, #0]
} //LT_SPI
   11d22:	687b      	ldr	r3, [r7, #4]
   11d24:	4618      	mov	r0, r3
   11d26:	370c      	adds	r7, #12
   11d28:	46bd      	mov	sp, r7
   11d2a:	bc80      	pop	{r7}
   11d2c:	4770      	bx	lr
   11d2e:	bf00      	nop
   11d30:	20004944 	.word	0x20004944

00011d34 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   11d34:	b480      	push	{r7}
   11d36:	b083      	sub	sp, #12
   11d38:	af00      	add	r7, sp, #0
   11d3a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   11d3c:	687b      	ldr	r3, [r7, #4]
   11d3e:	4618      	mov	r0, r3
   11d40:	370c      	adds	r7, #12
   11d42:	46bd      	mov	sp, r7
   11d44:	bc80      	pop	{r7}
   11d46:	4770      	bx	lr

00011d48 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
   11d48:	b580      	push	{r7, lr}
   11d4a:	b082      	sub	sp, #8
   11d4c:	af00      	add	r7, sp, #0
   11d4e:	6078      	str	r0, [r7, #4]
   11d50:	6039      	str	r1, [r7, #0]
   11d52:	687b      	ldr	r3, [r7, #4]
   11d54:	2b01      	cmp	r3, #1
   11d56:	d10c      	bne.n	11d72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11d58:	683b      	ldr	r3, [r7, #0]
   11d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11d5e:	4293      	cmp	r3, r2
   11d60:	d107      	bne.n	11d72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
   11d62:	4806      	ldr	r0, [pc, #24]	; (11d7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11d64:	4b06      	ldr	r3, [pc, #24]	; (11d80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11d66:	4798      	blx	r3
   11d68:	4a06      	ldr	r2, [pc, #24]	; (11d84 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11d6a:	4907      	ldr	r1, [pc, #28]	; (11d88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11d6c:	4803      	ldr	r0, [pc, #12]	; (11d7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11d6e:	4b07      	ldr	r3, [pc, #28]	; (11d8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11d70:	4798      	blx	r3
}
   11d72:	bf00      	nop
   11d74:	3708      	adds	r7, #8
   11d76:	46bd      	mov	sp, r7
   11d78:	bd80      	pop	{r7, pc}
   11d7a:	bf00      	nop
   11d7c:	20004948 	.word	0x20004948
   11d80:	00011da5 	.word	0x00011da5
   11d84:	20000000 	.word	0x20000000
   11d88:	00011dc5 	.word	0x00011dc5
   11d8c:	00014919 	.word	0x00014919

00011d90 <_GLOBAL__sub_I_ptrLTSPIClass>:
   11d90:	b580      	push	{r7, lr}
   11d92:	af00      	add	r7, sp, #0
   11d94:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11d98:	2001      	movs	r0, #1
   11d9a:	4b01      	ldr	r3, [pc, #4]	; (11da0 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   11d9c:	4798      	blx	r3
   11d9e:	bd80      	pop	{r7, pc}
   11da0:	00011d49 	.word	0x00011d49

00011da4 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
   11da4:	b480      	push	{r7}
   11da6:	b083      	sub	sp, #12
   11da8:	af00      	add	r7, sp, #0
   11daa:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
   11dac:	4a04      	ldr	r2, [pc, #16]	; (11dc0 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
   11dae:	687b      	ldr	r3, [r7, #4]
   11db0:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
   11db2:	687b      	ldr	r3, [r7, #4]
   11db4:	4618      	mov	r0, r3
   11db6:	370c      	adds	r7, #12
   11db8:	46bd      	mov	sp, r7
   11dba:	bc80      	pop	{r7}
   11dbc:	4770      	bx	lr
   11dbe:	bf00      	nop
   11dc0:	20004968 	.word	0x20004968

00011dc4 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
   11dc4:	b480      	push	{r7}
   11dc6:	b083      	sub	sp, #12
   11dc8:	af00      	add	r7, sp, #0
   11dca:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
   11dcc:	687b      	ldr	r3, [r7, #4]
   11dce:	4618      	mov	r0, r3
   11dd0:	370c      	adds	r7, #12
   11dd2:	46bd      	mov	sp, r7
   11dd4:	bc80      	pop	{r7}
   11dd6:	4770      	bx	lr

00011dd8 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   11dd8:	b480      	push	{r7}
   11dda:	b083      	sub	sp, #12
   11ddc:	af00      	add	r7, sp, #0
   11dde:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   11de0:	4a04      	ldr	r2, [pc, #16]	; (11df4 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   11de2:	687b      	ldr	r3, [r7, #4]
   11de4:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	4618      	mov	r0, r3
   11dea:	370c      	adds	r7, #12
   11dec:	46bd      	mov	sp, r7
   11dee:	bc80      	pop	{r7}
   11df0:	4770      	bx	lr
   11df2:	bf00      	nop
   11df4:	2000496c 	.word	0x2000496c

00011df8 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   11df8:	b480      	push	{r7}
   11dfa:	b083      	sub	sp, #12
   11dfc:	af00      	add	r7, sp, #0
   11dfe:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   11e00:	687b      	ldr	r3, [r7, #4]
   11e02:	4618      	mov	r0, r3
   11e04:	370c      	adds	r7, #12
   11e06:	46bd      	mov	sp, r7
   11e08:	bc80      	pop	{r7}
   11e0a:	4770      	bx	lr

00011e0c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   11e0c:	b580      	push	{r7, lr}
   11e0e:	b082      	sub	sp, #8
   11e10:	af00      	add	r7, sp, #0
   11e12:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11e14:	687b      	ldr	r3, [r7, #4]
   11e16:	685a      	ldr	r2, [r3, #4]
   11e18:	687b      	ldr	r3, [r7, #4]
   11e1a:	3308      	adds	r3, #8
   11e1c:	4619      	mov	r1, r3
   11e1e:	4610      	mov	r0, r2
   11e20:	4b06      	ldr	r3, [pc, #24]	; (11e3c <_ZN13SPI_Syn_Class4initEv+0x30>)
   11e22:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   11e24:	687b      	ldr	r3, [r7, #4]
   11e26:	685b      	ldr	r3, [r3, #4]
   11e28:	4618      	mov	r0, r3
   11e2a:	4b05      	ldr	r3, [pc, #20]	; (11e40 <_ZN13SPI_Syn_Class4initEv+0x34>)
   11e2c:	4798      	blx	r3
	
	ready=true;
   11e2e:	687b      	ldr	r3, [r7, #4]
   11e30:	2201      	movs	r2, #1
   11e32:	701a      	strb	r2, [r3, #0]
	
}
   11e34:	bf00      	nop
   11e36:	3708      	adds	r7, #8
   11e38:	46bd      	mov	sp, r7
   11e3a:	bd80      	pop	{r7, pc}
   11e3c:	000054b5 	.word	0x000054b5
   11e40:	00005329 	.word	0x00005329

00011e44 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   11e44:	b480      	push	{r7}
   11e46:	b083      	sub	sp, #12
   11e48:	af00      	add	r7, sp, #0
   11e4a:	6078      	str	r0, [r7, #4]
   11e4c:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   11e4e:	4a05      	ldr	r2, [pc, #20]	; (11e64 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   11e50:	687b      	ldr	r3, [r7, #4]
   11e52:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   11e54:	687b      	ldr	r3, [r7, #4]
   11e56:	683a      	ldr	r2, [r7, #0]
   11e58:	605a      	str	r2, [r3, #4]
}
   11e5a:	bf00      	nop
   11e5c:	370c      	adds	r7, #12
   11e5e:	46bd      	mov	sp, r7
   11e60:	bc80      	pop	{r7}
   11e62:	4770      	bx	lr
   11e64:	2000496c 	.word	0x2000496c

00011e68 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   11e68:	b580      	push	{r7, lr}
   11e6a:	b082      	sub	sp, #8
   11e6c:	af00      	add	r7, sp, #0
   11e6e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11e70:	687b      	ldr	r3, [r7, #4]
   11e72:	685a      	ldr	r2, [r3, #4]
   11e74:	687b      	ldr	r3, [r7, #4]
   11e76:	3308      	adds	r3, #8
   11e78:	4619      	mov	r1, r3
   11e7a:	4610      	mov	r0, r2
   11e7c:	4b07      	ldr	r3, [pc, #28]	; (11e9c <_ZN13SPI_Syn_Class6enableEv+0x34>)
   11e7e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   11e80:	687b      	ldr	r3, [r7, #4]
   11e82:	685b      	ldr	r3, [r3, #4]
   11e84:	4618      	mov	r0, r3
   11e86:	4b06      	ldr	r3, [pc, #24]	; (11ea0 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   11e88:	4798      	blx	r3
	ready=true;
   11e8a:	687b      	ldr	r3, [r7, #4]
   11e8c:	2201      	movs	r2, #1
   11e8e:	701a      	strb	r2, [r3, #0]
	return 0;
   11e90:	2300      	movs	r3, #0
}
   11e92:	4618      	mov	r0, r3
   11e94:	3708      	adds	r7, #8
   11e96:	46bd      	mov	sp, r7
   11e98:	bd80      	pop	{r7, pc}
   11e9a:	bf00      	nop
   11e9c:	000054b5 	.word	0x000054b5
   11ea0:	00005329 	.word	0x00005329

00011ea4 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   11ea4:	b580      	push	{r7, lr}
   11ea6:	b086      	sub	sp, #24
   11ea8:	af00      	add	r7, sp, #0
   11eaa:	60f8      	str	r0, [r7, #12]
   11eac:	60b9      	str	r1, [r7, #8]
   11eae:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   11eb0:	68fb      	ldr	r3, [r7, #12]
   11eb2:	2201      	movs	r2, #1
   11eb4:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   11eb6:	68fb      	ldr	r3, [r7, #12]
   11eb8:	689b      	ldr	r3, [r3, #8]
   11eba:	687a      	ldr	r2, [r7, #4]
   11ebc:	b292      	uxth	r2, r2
   11ebe:	68b9      	ldr	r1, [r7, #8]
   11ec0:	4618      	mov	r0, r3
   11ec2:	4b08      	ldr	r3, [pc, #32]	; (11ee4 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   11ec4:	4798      	blx	r3
   11ec6:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   11ec8:	697b      	ldr	r3, [r7, #20]
   11eca:	2b00      	cmp	r3, #0
   11ecc:	bf14      	ite	ne
   11ece:	2301      	movne	r3, #1
   11ed0:	2300      	moveq	r3, #0
   11ed2:	b2da      	uxtb	r2, r3
   11ed4:	68fb      	ldr	r3, [r7, #12]
   11ed6:	741a      	strb	r2, [r3, #16]
	 return w;
   11ed8:	697b      	ldr	r3, [r7, #20]
	
}
   11eda:	4618      	mov	r0, r3
   11edc:	3718      	adds	r7, #24
   11ede:	46bd      	mov	sp, r7
   11ee0:	bd80      	pop	{r7, pc}
   11ee2:	bf00      	nop
   11ee4:	00014879 	.word	0x00014879

00011ee8 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   11ee8:	b580      	push	{r7, lr}
   11eea:	b086      	sub	sp, #24
   11eec:	af00      	add	r7, sp, #0
   11eee:	60f8      	str	r0, [r7, #12]
   11ef0:	60b9      	str	r1, [r7, #8]
   11ef2:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   11ef4:	68fb      	ldr	r3, [r7, #12]
   11ef6:	2201      	movs	r2, #1
   11ef8:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   11efa:	68fb      	ldr	r3, [r7, #12]
   11efc:	689b      	ldr	r3, [r3, #8]
   11efe:	687a      	ldr	r2, [r7, #4]
   11f00:	b292      	uxth	r2, r2
   11f02:	68b9      	ldr	r1, [r7, #8]
   11f04:	4618      	mov	r0, r3
   11f06:	4b08      	ldr	r3, [pc, #32]	; (11f28 <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   11f08:	4798      	blx	r3
   11f0a:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   11f0c:	697b      	ldr	r3, [r7, #20]
   11f0e:	2b00      	cmp	r3, #0
   11f10:	bf14      	ite	ne
   11f12:	2301      	movne	r3, #1
   11f14:	2300      	moveq	r3, #0
   11f16:	b2da      	uxtb	r2, r3
   11f18:	68fb      	ldr	r3, [r7, #12]
   11f1a:	745a      	strb	r2, [r3, #17]
	return  r;
   11f1c:	697b      	ldr	r3, [r7, #20]
}
   11f1e:	4618      	mov	r0, r3
   11f20:	3718      	adds	r7, #24
   11f22:	46bd      	mov	sp, r7
   11f24:	bd80      	pop	{r7, pc}
   11f26:	bf00      	nop
   11f28:	000148c9 	.word	0x000148c9

00011f2c <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   11f2c:	b580      	push	{r7, lr}
   11f2e:	b082      	sub	sp, #8
   11f30:	af00      	add	r7, sp, #0
   11f32:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   11f34:	687b      	ldr	r3, [r7, #4]
   11f36:	685b      	ldr	r3, [r3, #4]
   11f38:	4618      	mov	r0, r3
   11f3a:	4b03      	ldr	r3, [pc, #12]	; (11f48 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   11f3c:	4798      	blx	r3
	
}
   11f3e:	bf00      	nop
   11f40:	3708      	adds	r7, #8
   11f42:	46bd      	mov	sp, r7
   11f44:	bd80      	pop	{r7, pc}
   11f46:	bf00      	nop
   11f48:	00005365 	.word	0x00005365

00011f4c <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   11f4c:	b480      	push	{r7}
   11f4e:	b083      	sub	sp, #12
   11f50:	af00      	add	r7, sp, #0
   11f52:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   11f54:	687b      	ldr	r3, [r7, #4]
   11f56:	7c5b      	ldrb	r3, [r3, #17]
   11f58:	b2db      	uxtb	r3, r3
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d103      	bne.n	11f66 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	7c1b      	ldrb	r3, [r3, #16]
   11f62:	b2db      	uxtb	r3, r3
   11f64:	2b00      	cmp	r3, #0
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	2201      	movs	r2, #1
   11f6a:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   11f6c:	687b      	ldr	r3, [r7, #4]
   11f6e:	781b      	ldrb	r3, [r3, #0]
   11f70:	b2db      	uxtb	r3, r3
   11f72:	2b00      	cmp	r3, #0
   11f74:	d001      	beq.n	11f7a <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   11f76:	2301      	movs	r3, #1
   11f78:	e000      	b.n	11f7c <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   11f7a:	2300      	movs	r3, #0
	}
	return ready;
	
}
   11f7c:	4618      	mov	r0, r3
   11f7e:	370c      	adds	r7, #12
   11f80:	46bd      	mov	sp, r7
   11f82:	bc80      	pop	{r7}
   11f84:	4770      	bx	lr
	...

00011f88 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   11f88:	b580      	push	{r7, lr}
   11f8a:	b082      	sub	sp, #8
   11f8c:	af00      	add	r7, sp, #0
   11f8e:	6078      	str	r0, [r7, #4]
   11f90:	6039      	str	r1, [r7, #0]
   11f92:	687b      	ldr	r3, [r7, #4]
   11f94:	3308      	adds	r3, #8
   11f96:	4618      	mov	r0, r3
   11f98:	4b06      	ldr	r3, [pc, #24]	; (11fb4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   11f9a:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   11f9c:	687b      	ldr	r3, [r7, #4]
   11f9e:	683a      	ldr	r2, [r7, #0]
   11fa0:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   11fa2:	4a05      	ldr	r2, [pc, #20]	; (11fb8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
   11fa4:	687b      	ldr	r3, [r7, #4]
   11fa6:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   11fa8:	687b      	ldr	r3, [r7, #4]
   11faa:	4618      	mov	r0, r3
   11fac:	3708      	adds	r7, #8
   11fae:	46bd      	mov	sp, r7
   11fb0:	bd80      	pop	{r7, pc}
   11fb2:	bf00      	nop
   11fb4:	000146a9 	.word	0x000146a9
   11fb8:	20004970 	.word	0x20004970

00011fbc <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
   11fbc:	b580      	push	{r7, lr}
   11fbe:	b082      	sub	sp, #8
   11fc0:	af00      	add	r7, sp, #0
   11fc2:	6078      	str	r0, [r7, #4]
   11fc4:	687b      	ldr	r3, [r7, #4]
   11fc6:	3308      	adds	r3, #8
   11fc8:	4618      	mov	r0, r3
   11fca:	4b03      	ldr	r3, [pc, #12]	; (11fd8 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
   11fcc:	4798      	blx	r3
{
} //~AT24MAC_Class
   11fce:	687b      	ldr	r3, [r7, #4]
   11fd0:	4618      	mov	r0, r3
   11fd2:	3708      	adds	r7, #8
   11fd4:	46bd      	mov	sp, r7
   11fd6:	bd80      	pop	{r7, pc}
   11fd8:	000146d1 	.word	0x000146d1

00011fdc <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
   11fdc:	b580      	push	{r7, lr}
   11fde:	b082      	sub	sp, #8
   11fe0:	af00      	add	r7, sp, #0
   11fe2:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   11fe4:	2156      	movs	r1, #86	; 0x56
   11fe6:	6878      	ldr	r0, [r7, #4]
   11fe8:	4b04      	ldr	r3, [pc, #16]	; (11ffc <_ZN13AT24MAC_Class4InitEv+0x20>)
   11fea:	4798      	blx	r3
	return SelfTest();
   11fec:	6878      	ldr	r0, [r7, #4]
   11fee:	4b04      	ldr	r3, [pc, #16]	; (12000 <_ZN13AT24MAC_Class4InitEv+0x24>)
   11ff0:	4798      	blx	r3
   11ff2:	4603      	mov	r3, r0
}
   11ff4:	4618      	mov	r0, r3
   11ff6:	3708      	adds	r7, #8
   11ff8:	46bd      	mov	sp, r7
   11ffa:	bd80      	pop	{r7, pc}
   11ffc:	00012005 	.word	0x00012005
   12000:	000122e5 	.word	0x000122e5

00012004 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   12004:	b580      	push	{r7, lr}
   12006:	b082      	sub	sp, #8
   12008:	af00      	add	r7, sp, #0
   1200a:	6078      	str	r0, [r7, #4]
   1200c:	460b      	mov	r3, r1
   1200e:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   12010:	687b      	ldr	r3, [r7, #4]
   12012:	78fa      	ldrb	r2, [r7, #3]
   12014:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
   12016:	687b      	ldr	r3, [r7, #4]
   12018:	f103 0208 	add.w	r2, r3, #8
   1201c:	687b      	ldr	r3, [r7, #4]
   1201e:	685b      	ldr	r3, [r3, #4]
   12020:	4619      	mov	r1, r3
   12022:	4610      	mov	r0, r2
   12024:	4b0a      	ldr	r3, [pc, #40]	; (12050 <_ZN13AT24MAC_Class4InitEh+0x4c>)
   12026:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   12028:	687b      	ldr	r3, [r7, #4]
   1202a:	3308      	adds	r3, #8
   1202c:	78fa      	ldrb	r2, [r7, #3]
   1202e:	4611      	mov	r1, r2
   12030:	4618      	mov	r0, r3
   12032:	4b08      	ldr	r3, [pc, #32]	; (12054 <_ZN13AT24MAC_Class4InitEh+0x50>)
   12034:	4798      	blx	r3
   12036:	4603      	mov	r3, r0
   12038:	2b00      	cmp	r3, #0
   1203a:	bf0c      	ite	eq
   1203c:	2301      	moveq	r3, #1
   1203e:	2300      	movne	r3, #0
   12040:	b2da      	uxtb	r2, r3
   12042:	687b      	ldr	r3, [r7, #4]
   12044:	701a      	strb	r2, [r3, #0]
}
   12046:	bf00      	nop
   12048:	3708      	adds	r7, #8
   1204a:	46bd      	mov	sp, r7
   1204c:	bd80      	pop	{r7, pc}
   1204e:	bf00      	nop
   12050:	000146e5 	.word	0x000146e5
   12054:	00014789 	.word	0x00014789

00012058 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
   12058:	b580      	push	{r7, lr}
   1205a:	b084      	sub	sp, #16
   1205c:	af00      	add	r7, sp, #0
   1205e:	6078      	str	r0, [r7, #4]
   12060:	460b      	mov	r3, r1
   12062:	70fb      	strb	r3, [r7, #3]
   12064:	4613      	mov	r3, r2
   12066:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
   12068:	687b      	ldr	r3, [r7, #4]
   1206a:	2200      	movs	r2, #0
   1206c:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
   1206e:	78fb      	ldrb	r3, [r7, #3]
   12070:	723b      	strb	r3, [r7, #8]
	array[1]=value;
   12072:	78bb      	ldrb	r3, [r7, #2]
   12074:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
   12076:	687b      	ldr	r3, [r7, #4]
   12078:	3308      	adds	r3, #8
   1207a:	f107 0108 	add.w	r1, r7, #8
   1207e:	2202      	movs	r2, #2
   12080:	4618      	mov	r0, r3
   12082:	4b09      	ldr	r3, [pc, #36]	; (120a8 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
   12084:	4798      	blx	r3
   12086:	4603      	mov	r3, r0
   12088:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
   1208a:	687b      	ldr	r3, [r7, #4]
   1208c:	7a1b      	ldrb	r3, [r3, #8]
   1208e:	b2db      	uxtb	r3, r3
   12090:	f083 0301 	eor.w	r3, r3, #1
   12094:	b2db      	uxtb	r3, r3
   12096:	2b00      	cmp	r3, #0
   12098:	d000      	beq.n	1209c <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
   1209a:	e7f6      	b.n	1208a <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
   1209c:	68fb      	ldr	r3, [r7, #12]
}
   1209e:	4618      	mov	r0, r3
   120a0:	3710      	adds	r7, #16
   120a2:	46bd      	mov	sp, r7
   120a4:	bd80      	pop	{r7, pc}
   120a6:	bf00      	nop
   120a8:	000147d1 	.word	0x000147d1

000120ac <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   120ac:	b580      	push	{r7, lr}
   120ae:	b086      	sub	sp, #24
   120b0:	af00      	add	r7, sp, #0
   120b2:	60f8      	str	r0, [r7, #12]
   120b4:	60b9      	str	r1, [r7, #8]
   120b6:	4611      	mov	r1, r2
   120b8:	461a      	mov	r2, r3
   120ba:	460b      	mov	r3, r1
   120bc:	71fb      	strb	r3, [r7, #7]
   120be:	4613      	mov	r3, r2
   120c0:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
   120c2:	2300      	movs	r3, #0
   120c4:	613b      	str	r3, [r7, #16]
   120c6:	79ba      	ldrb	r2, [r7, #6]
   120c8:	693b      	ldr	r3, [r7, #16]
   120ca:	429a      	cmp	r2, r3
   120cc:	dd2a      	ble.n	12124 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
   120ce:	68f8      	ldr	r0, [r7, #12]
   120d0:	4b17      	ldr	r3, [pc, #92]	; (12130 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
   120d2:	4798      	blx	r3
   120d4:	4603      	mov	r3, r0
   120d6:	f083 0301 	eor.w	r3, r3, #1
   120da:	b2db      	uxtb	r3, r3
   120dc:	2b00      	cmp	r3, #0
   120de:	d000      	beq.n	120e2 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
   120e0:	e7f5      	b.n	120ce <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
   120e2:	693b      	ldr	r3, [r7, #16]
   120e4:	b2da      	uxtb	r2, r3
   120e6:	79fb      	ldrb	r3, [r7, #7]
   120e8:	4413      	add	r3, r2
   120ea:	b2d9      	uxtb	r1, r3
   120ec:	68bb      	ldr	r3, [r7, #8]
   120ee:	781b      	ldrb	r3, [r3, #0]
   120f0:	461a      	mov	r2, r3
   120f2:	68f8      	ldr	r0, [r7, #12]
   120f4:	4b0f      	ldr	r3, [pc, #60]	; (12134 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
   120f6:	4798      	blx	r3
   120f8:	4603      	mov	r3, r0
   120fa:	617b      	str	r3, [r7, #20]
		p++;
   120fc:	68bb      	ldr	r3, [r7, #8]
   120fe:	3301      	adds	r3, #1
   12100:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
   12102:	2002      	movs	r0, #2
   12104:	4b0c      	ldr	r3, [pc, #48]	; (12138 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
   12106:	4798      	blx	r3
		while(!AcknolledgePolling());
   12108:	68f8      	ldr	r0, [r7, #12]
   1210a:	4b0c      	ldr	r3, [pc, #48]	; (1213c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
   1210c:	4798      	blx	r3
   1210e:	4603      	mov	r3, r0
   12110:	f083 0301 	eor.w	r3, r3, #1
   12114:	b2db      	uxtb	r3, r3
   12116:	2b00      	cmp	r3, #0
   12118:	d000      	beq.n	1211c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
   1211a:	e7f5      	b.n	12108 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
   1211c:	693b      	ldr	r3, [r7, #16]
   1211e:	3301      	adds	r3, #1
   12120:	613b      	str	r3, [r7, #16]
   12122:	e7d0      	b.n	120c6 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
   12124:	697b      	ldr	r3, [r7, #20]
}
   12126:	4618      	mov	r0, r3
   12128:	3718      	adds	r7, #24
   1212a:	46bd      	mov	sp, r7
   1212c:	bd80      	pop	{r7, pc}
   1212e:	bf00      	nop
   12130:	000123dd 	.word	0x000123dd
   12134:	00012059 	.word	0x00012059
   12138:	0000477d 	.word	0x0000477d
   1213c:	000122ad 	.word	0x000122ad

00012140 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   12140:	b590      	push	{r4, r7, lr}
   12142:	b087      	sub	sp, #28
   12144:	af00      	add	r7, sp, #0
   12146:	60f8      	str	r0, [r7, #12]
   12148:	60b9      	str	r1, [r7, #8]
   1214a:	4611      	mov	r1, r2
   1214c:	461a      	mov	r2, r3
   1214e:	460b      	mov	r3, r1
   12150:	80fb      	strh	r3, [r7, #6]
   12152:	4613      	mov	r3, r2
   12154:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   12156:	88fb      	ldrh	r3, [r7, #6]
   12158:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   1215a:	797b      	ldrb	r3, [r7, #5]
   1215c:	7dfa      	ldrb	r2, [r7, #23]
   1215e:	68b9      	ldr	r1, [r7, #8]
   12160:	68f8      	ldr	r0, [r7, #12]
   12162:	4c03      	ldr	r4, [pc, #12]	; (12170 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   12164:	47a0      	blx	r4
   12166:	4603      	mov	r3, r0
}
   12168:	4618      	mov	r0, r3
   1216a:	371c      	adds	r7, #28
   1216c:	46bd      	mov	sp, r7
   1216e:	bd90      	pop	{r4, r7, pc}
   12170:	000120ad 	.word	0x000120ad

00012174 <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
   12174:	b580      	push	{r7, lr}
   12176:	b084      	sub	sp, #16
   12178:	af00      	add	r7, sp, #0
   1217a:	6078      	str	r0, [r7, #4]
   1217c:	460b      	mov	r3, r1
   1217e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   12180:	687b      	ldr	r3, [r7, #4]
   12182:	3308      	adds	r3, #8
   12184:	1cf9      	adds	r1, r7, #3
   12186:	2201      	movs	r2, #1
   12188:	4618      	mov	r0, r3
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
   1218c:	4798      	blx	r3
	while(!i2ca.txReady);
   1218e:	687b      	ldr	r3, [r7, #4]
   12190:	7a1b      	ldrb	r3, [r3, #8]
   12192:	b2db      	uxtb	r3, r3
   12194:	f083 0301 	eor.w	r3, r3, #1
   12198:	b2db      	uxtb	r3, r3
   1219a:	2b00      	cmp	r3, #0
   1219c:	d000      	beq.n	121a0 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
   1219e:	e7f6      	b.n	1218e <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
   121a0:	687b      	ldr	r3, [r7, #4]
   121a2:	3308      	adds	r3, #8
   121a4:	f107 010f 	add.w	r1, r7, #15
   121a8:	2201      	movs	r2, #1
   121aa:	4618      	mov	r0, r3
   121ac:	4b08      	ldr	r3, [pc, #32]	; (121d0 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
   121ae:	4798      	blx	r3
	while(!i2ca.rxReady);
   121b0:	687b      	ldr	r3, [r7, #4]
   121b2:	7a5b      	ldrb	r3, [r3, #9]
   121b4:	b2db      	uxtb	r3, r3
   121b6:	f083 0301 	eor.w	r3, r3, #1
   121ba:	b2db      	uxtb	r3, r3
   121bc:	2b00      	cmp	r3, #0
   121be:	d000      	beq.n	121c2 <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
   121c0:	e7f6      	b.n	121b0 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
   121c2:	7bfb      	ldrb	r3, [r7, #15]
}
   121c4:	4618      	mov	r0, r3
   121c6:	3710      	adds	r7, #16
   121c8:	46bd      	mov	sp, r7
   121ca:	bd80      	pop	{r7, pc}
   121cc:	000147d1 	.word	0x000147d1
   121d0:	00014815 	.word	0x00014815

000121d4 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   121d4:	b580      	push	{r7, lr}
   121d6:	b086      	sub	sp, #24
   121d8:	af00      	add	r7, sp, #0
   121da:	60f8      	str	r0, [r7, #12]
   121dc:	60b9      	str	r1, [r7, #8]
   121de:	4611      	mov	r1, r2
   121e0:	461a      	mov	r2, r3
   121e2:	460b      	mov	r3, r1
   121e4:	71fb      	strb	r3, [r7, #7]
   121e6:	4613      	mov	r3, r2
   121e8:	71bb      	strb	r3, [r7, #6]
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   121ea:	68fb      	ldr	r3, [r7, #12]
   121ec:	3308      	adds	r3, #8
   121ee:	1df9      	adds	r1, r7, #7
   121f0:	2201      	movs	r2, #1
   121f2:	4618      	mov	r0, r3
   121f4:	4b11      	ldr	r3, [pc, #68]	; (1223c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
   121f6:	4798      	blx	r3
	while(!i2ca.txReady);
   121f8:	68fb      	ldr	r3, [r7, #12]
   121fa:	7a1b      	ldrb	r3, [r3, #8]
   121fc:	b2db      	uxtb	r3, r3
   121fe:	f083 0301 	eor.w	r3, r3, #1
   12202:	b2db      	uxtb	r3, r3
   12204:	2b00      	cmp	r3, #0
   12206:	d000      	beq.n	1220a <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
   12208:	e7f6      	b.n	121f8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	uint32_t r= i2ca.Read(p,size);
   1220a:	68fb      	ldr	r3, [r7, #12]
   1220c:	3308      	adds	r3, #8
   1220e:	79ba      	ldrb	r2, [r7, #6]
   12210:	b292      	uxth	r2, r2
   12212:	68b9      	ldr	r1, [r7, #8]
   12214:	4618      	mov	r0, r3
   12216:	4b0a      	ldr	r3, [pc, #40]	; (12240 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
   12218:	4798      	blx	r3
   1221a:	4603      	mov	r3, r0
   1221c:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   1221e:	68fb      	ldr	r3, [r7, #12]
   12220:	7a5b      	ldrb	r3, [r3, #9]
   12222:	b2db      	uxtb	r3, r3
   12224:	f083 0301 	eor.w	r3, r3, #1
   12228:	b2db      	uxtb	r3, r3
   1222a:	2b00      	cmp	r3, #0
   1222c:	d000      	beq.n	12230 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
   1222e:	e7f6      	b.n	1221e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
	return r;
   12230:	697b      	ldr	r3, [r7, #20]
}
   12232:	4618      	mov	r0, r3
   12234:	3718      	adds	r7, #24
   12236:	46bd      	mov	sp, r7
   12238:	bd80      	pop	{r7, pc}
   1223a:	bf00      	nop
   1223c:	000147d1 	.word	0x000147d1
   12240:	00014815 	.word	0x00014815

00012244 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   12244:	b590      	push	{r4, r7, lr}
   12246:	b087      	sub	sp, #28
   12248:	af00      	add	r7, sp, #0
   1224a:	60f8      	str	r0, [r7, #12]
   1224c:	60b9      	str	r1, [r7, #8]
   1224e:	4611      	mov	r1, r2
   12250:	461a      	mov	r2, r3
   12252:	460b      	mov	r3, r1
   12254:	80fb      	strh	r3, [r7, #6]
   12256:	4613      	mov	r3, r2
   12258:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   1225a:	88fb      	ldrh	r3, [r7, #6]
   1225c:	75fb      	strb	r3, [r7, #23]
	
	return ReadAddress(p,add,size);
   1225e:	797b      	ldrb	r3, [r7, #5]
   12260:	7dfa      	ldrb	r2, [r7, #23]
   12262:	68b9      	ldr	r1, [r7, #8]
   12264:	68f8      	ldr	r0, [r7, #12]
   12266:	4c03      	ldr	r4, [pc, #12]	; (12274 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x30>)
   12268:	47a0      	blx	r4
   1226a:	4603      	mov	r3, r0
}
   1226c:	4618      	mov	r0, r3
   1226e:	371c      	adds	r7, #28
   12270:	46bd      	mov	sp, r7
   12272:	bd90      	pop	{r4, r7, pc}
   12274:	000121d5 	.word	0x000121d5

00012278 <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
bool	AT24MAC_Class::GetAcknowledge(void){
   12278:	b580      	push	{r7, lr}
   1227a:	b082      	sub	sp, #8
   1227c:	af00      	add	r7, sp, #0
   1227e:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
   12280:	2100      	movs	r1, #0
   12282:	6878      	ldr	r0, [r7, #4]
   12284:	4b08      	ldr	r3, [pc, #32]	; (122a8 <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x30>)
   12286:	4798      	blx	r3
   12288:	4603      	mov	r3, r0
   1228a:	461a      	mov	r2, r3
   1228c:	687b      	ldr	r3, [r7, #4]
   1228e:	765a      	strb	r2, [r3, #25]
	return	byte>0;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	7e5b      	ldrb	r3, [r3, #25]
   12294:	2b00      	cmp	r3, #0
   12296:	bfcc      	ite	gt
   12298:	2301      	movgt	r3, #1
   1229a:	2300      	movle	r3, #0
   1229c:	b2db      	uxtb	r3, r3
}
   1229e:	4618      	mov	r0, r3
   122a0:	3708      	adds	r7, #8
   122a2:	46bd      	mov	sp, r7
   122a4:	bd80      	pop	{r7, pc}
   122a6:	bf00      	nop
   122a8:	00012175 	.word	0x00012175

000122ac <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
   122ac:	b580      	push	{r7, lr}
   122ae:	b082      	sub	sp, #8
   122b0:	af00      	add	r7, sp, #0
   122b2:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
   122b4:	6878      	ldr	r0, [r7, #4]
   122b6:	4b09      	ldr	r3, [pc, #36]	; (122dc <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
   122b8:	4798      	blx	r3
	} while (!IsReady());
   122ba:	6878      	ldr	r0, [r7, #4]
   122bc:	4b08      	ldr	r3, [pc, #32]	; (122e0 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
   122be:	4798      	blx	r3
   122c0:	4603      	mov	r3, r0
	do 
   122c2:	f083 0301 	eor.w	r3, r3, #1
   122c6:	b2db      	uxtb	r3, r3
   122c8:	2b00      	cmp	r3, #0
   122ca:	d000      	beq.n	122ce <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
   122cc:	e7f2      	b.n	122b4 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
   122ce:	687b      	ldr	r3, [r7, #4]
   122d0:	781b      	ldrb	r3, [r3, #0]
   122d2:	b2db      	uxtb	r3, r3
}
   122d4:	4618      	mov	r0, r3
   122d6:	3708      	adds	r7, #8
   122d8:	46bd      	mov	sp, r7
   122da:	bd80      	pop	{r7, pc}
   122dc:	00012279 	.word	0x00012279
   122e0:	000123dd 	.word	0x000123dd

000122e4 <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
   122e4:	b590      	push	{r4, r7, lr}
   122e6:	b085      	sub	sp, #20
   122e8:	af00      	add	r7, sp, #0
   122ea:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE;
   122ec:	687b      	ldr	r3, [r7, #4]
   122ee:	22f0      	movs	r2, #240	; 0xf0
   122f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   122f4:	2300      	movs	r3, #0
   122f6:	60fb      	str	r3, [r7, #12]
   122f8:	68fb      	ldr	r3, [r7, #12]
   122fa:	2b0f      	cmp	r3, #15
   122fc:	dc18      	bgt.n	12330 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   122fe:	4b33      	ldr	r3, [pc, #204]	; (123cc <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   12300:	4798      	blx	r3
   12302:	4603      	mov	r3, r0
   12304:	b2d9      	uxtb	r1, r3
   12306:	687a      	ldr	r2, [r7, #4]
   12308:	68fb      	ldr	r3, [r7, #12]
   1230a:	4413      	add	r3, r2
   1230c:	331a      	adds	r3, #26
   1230e:	460a      	mov	r2, r1
   12310:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   12312:	68fb      	ldr	r3, [r7, #12]
   12314:	b2db      	uxtb	r3, r3
   12316:	f1c3 0310 	rsb	r3, r3, #16
   1231a:	b2d9      	uxtb	r1, r3
   1231c:	687a      	ldr	r2, [r7, #4]
   1231e:	68fb      	ldr	r3, [r7, #12]
   12320:	4413      	add	r3, r2
   12322:	332a      	adds	r3, #42	; 0x2a
   12324:	460a      	mov	r2, r1
   12326:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   12328:	68fb      	ldr	r3, [r7, #12]
   1232a:	3301      	adds	r3, #1
   1232c:	60fb      	str	r3, [r7, #12]
   1232e:	e7e3      	b.n	122f8 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   12330:	6878      	ldr	r0, [r7, #4]
   12332:	4b27      	ldr	r3, [pc, #156]	; (123d0 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   12334:	4798      	blx	r3
   12336:	4603      	mov	r3, r0
   12338:	f083 0301 	eor.w	r3, r3, #1
   1233c:	b2db      	uxtb	r3, r3
   1233e:	2b00      	cmp	r3, #0
   12340:	d000      	beq.n	12344 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   12342:	e7f5      	b.n	12330 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   12344:	687b      	ldr	r3, [r7, #4]
   12346:	f103 011a 	add.w	r1, r3, #26
   1234a:	687b      	ldr	r3, [r7, #4]
   1234c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   12350:	2310      	movs	r3, #16
   12352:	6878      	ldr	r0, [r7, #4]
   12354:	4c1f      	ldr	r4, [pc, #124]	; (123d4 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   12356:	47a0      	blx	r4
	while(!IsReady());
   12358:	6878      	ldr	r0, [r7, #4]
   1235a:	4b1d      	ldr	r3, [pc, #116]	; (123d0 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   1235c:	4798      	blx	r3
   1235e:	4603      	mov	r3, r0
   12360:	f083 0301 	eor.w	r3, r3, #1
   12364:	b2db      	uxtb	r3, r3
   12366:	2b00      	cmp	r3, #0
   12368:	d000      	beq.n	1236c <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   1236a:	e7f5      	b.n	12358 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   1236c:	687b      	ldr	r3, [r7, #4]
   1236e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
   12372:	687b      	ldr	r3, [r7, #4]
   12374:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   12378:	2310      	movs	r3, #16
   1237a:	6878      	ldr	r0, [r7, #4]
   1237c:	4c16      	ldr	r4, [pc, #88]	; (123d8 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   1237e:	47a0      	blx	r4
	isOK = true;
   12380:	687b      	ldr	r3, [r7, #4]
   12382:	2201      	movs	r2, #1
   12384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   12388:	2300      	movs	r3, #0
   1238a:	60bb      	str	r3, [r7, #8]
   1238c:	68bb      	ldr	r3, [r7, #8]
   1238e:	2b0f      	cmp	r3, #15
   12390:	dc14      	bgt.n	123bc <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   12392:	687a      	ldr	r2, [r7, #4]
   12394:	68bb      	ldr	r3, [r7, #8]
   12396:	4413      	add	r3, r2
   12398:	331a      	adds	r3, #26
   1239a:	781a      	ldrb	r2, [r3, #0]
   1239c:	6879      	ldr	r1, [r7, #4]
   1239e:	68bb      	ldr	r3, [r7, #8]
   123a0:	440b      	add	r3, r1
   123a2:	332a      	adds	r3, #42	; 0x2a
   123a4:	781b      	ldrb	r3, [r3, #0]
   123a6:	429a      	cmp	r2, r3
   123a8:	d004      	beq.n	123b4 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   123aa:	687b      	ldr	r3, [r7, #4]
   123ac:	2200      	movs	r2, #0
   123ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   123b2:	e003      	b.n	123bc <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   123b4:	68bb      	ldr	r3, [r7, #8]
   123b6:	3301      	adds	r3, #1
   123b8:	60bb      	str	r3, [r7, #8]
   123ba:	e7e7      	b.n	1238c <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   123bc:	687b      	ldr	r3, [r7, #4]
   123be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
   123c2:	4618      	mov	r0, r3
   123c4:	3714      	adds	r7, #20
   123c6:	46bd      	mov	sp, r7
   123c8:	bd90      	pop	{r4, r7, pc}
   123ca:	bf00      	nop
   123cc:	000166fd 	.word	0x000166fd
   123d0:	000123dd 	.word	0x000123dd
   123d4:	000120ad 	.word	0x000120ad
   123d8:	000121d5 	.word	0x000121d5

000123dc <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   123dc:	b480      	push	{r7}
   123de:	b083      	sub	sp, #12
   123e0:	af00      	add	r7, sp, #0
   123e2:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
   123e4:	687b      	ldr	r3, [r7, #4]
   123e6:	7a1b      	ldrb	r3, [r3, #8]
   123e8:	b2db      	uxtb	r3, r3
   123ea:	2b00      	cmp	r3, #0
   123ec:	d006      	beq.n	123fc <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   123ee:	687b      	ldr	r3, [r7, #4]
   123f0:	7a5b      	ldrb	r3, [r3, #9]
   123f2:	b2db      	uxtb	r3, r3
   123f4:	2b00      	cmp	r3, #0
   123f6:	d001      	beq.n	123fc <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   123f8:	2301      	movs	r3, #1
   123fa:	e000      	b.n	123fe <_ZN13AT24MAC_Class7IsReadyEv+0x22>
   123fc:	2300      	movs	r3, #0
   123fe:	2b00      	cmp	r3, #0
   12400:	d003      	beq.n	1240a <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
   12402:	687b      	ldr	r3, [r7, #4]
   12404:	2201      	movs	r2, #1
   12406:	701a      	strb	r2, [r3, #0]
   12408:	e002      	b.n	12410 <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
   1240a:	687b      	ldr	r3, [r7, #4]
   1240c:	2200      	movs	r2, #0
   1240e:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   12410:	687b      	ldr	r3, [r7, #4]
   12412:	781b      	ldrb	r3, [r3, #0]
   12414:	b2db      	uxtb	r3, r3
}
   12416:	4618      	mov	r0, r3
   12418:	370c      	adds	r7, #12
   1241a:	46bd      	mov	sp, r7
   1241c:	bc80      	pop	{r7}
   1241e:	4770      	bx	lr

00012420 <_Z41__static_initialization_and_destruction_0ii>:

   12420:	b580      	push	{r7, lr}
   12422:	b082      	sub	sp, #8
   12424:	af00      	add	r7, sp, #0
   12426:	6078      	str	r0, [r7, #4]
   12428:	6039      	str	r1, [r7, #0]
   1242a:	687b      	ldr	r3, [r7, #4]
   1242c:	2b01      	cmp	r3, #1
   1242e:	d10d      	bne.n	1244c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12430:	683b      	ldr	r3, [r7, #0]
   12432:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12436:	4293      	cmp	r3, r2
   12438:	d108      	bne.n	1244c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1243a:	4906      	ldr	r1, [pc, #24]	; (12454 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1243c:	4806      	ldr	r0, [pc, #24]	; (12458 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1243e:	4b07      	ldr	r3, [pc, #28]	; (1245c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12440:	4798      	blx	r3
   12442:	4a07      	ldr	r2, [pc, #28]	; (12460 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12444:	4907      	ldr	r1, [pc, #28]	; (12464 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12446:	4804      	ldr	r0, [pc, #16]	; (12458 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12448:	4b07      	ldr	r3, [pc, #28]	; (12468 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1244a:	4798      	blx	r3
   1244c:	bf00      	nop
   1244e:	3708      	adds	r7, #8
   12450:	46bd      	mov	sp, r7
   12452:	bd80      	pop	{r7, pc}
   12454:	20004fcc 	.word	0x20004fcc
   12458:	20004974 	.word	0x20004974
   1245c:	00011f89 	.word	0x00011f89
   12460:	20000000 	.word	0x20000000
   12464:	00011fbd 	.word	0x00011fbd
   12468:	00014919 	.word	0x00014919

0001246c <_GLOBAL__sub_I_ptrAT24MACClass>:
   1246c:	b580      	push	{r7, lr}
   1246e:	af00      	add	r7, sp, #0
   12470:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12474:	2001      	movs	r0, #1
   12476:	4b01      	ldr	r3, [pc, #4]	; (1247c <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   12478:	4798      	blx	r3
   1247a:	bd80      	pop	{r7, pc}
   1247c:	00012421 	.word	0x00012421

00012480 <hri_port_set_DIR_reg>:
{
   12480:	b480      	push	{r7}
   12482:	b085      	sub	sp, #20
   12484:	af00      	add	r7, sp, #0
   12486:	60f8      	str	r0, [r7, #12]
   12488:	460b      	mov	r3, r1
   1248a:	607a      	str	r2, [r7, #4]
   1248c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   1248e:	7afb      	ldrb	r3, [r7, #11]
   12490:	68fa      	ldr	r2, [r7, #12]
   12492:	01db      	lsls	r3, r3, #7
   12494:	4413      	add	r3, r2
   12496:	3308      	adds	r3, #8
   12498:	687a      	ldr	r2, [r7, #4]
   1249a:	601a      	str	r2, [r3, #0]
}
   1249c:	bf00      	nop
   1249e:	3714      	adds	r7, #20
   124a0:	46bd      	mov	sp, r7
   124a2:	bc80      	pop	{r7}
   124a4:	4770      	bx	lr

000124a6 <hri_port_clear_DIR_reg>:
{
   124a6:	b480      	push	{r7}
   124a8:	b085      	sub	sp, #20
   124aa:	af00      	add	r7, sp, #0
   124ac:	60f8      	str	r0, [r7, #12]
   124ae:	460b      	mov	r3, r1
   124b0:	607a      	str	r2, [r7, #4]
   124b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   124b4:	7afb      	ldrb	r3, [r7, #11]
   124b6:	68fa      	ldr	r2, [r7, #12]
   124b8:	01db      	lsls	r3, r3, #7
   124ba:	4413      	add	r3, r2
   124bc:	3304      	adds	r3, #4
   124be:	687a      	ldr	r2, [r7, #4]
   124c0:	601a      	str	r2, [r3, #0]
}
   124c2:	bf00      	nop
   124c4:	3714      	adds	r7, #20
   124c6:	46bd      	mov	sp, r7
   124c8:	bc80      	pop	{r7}
   124ca:	4770      	bx	lr

000124cc <hri_port_set_OUT_reg>:
{
   124cc:	b480      	push	{r7}
   124ce:	b085      	sub	sp, #20
   124d0:	af00      	add	r7, sp, #0
   124d2:	60f8      	str	r0, [r7, #12]
   124d4:	460b      	mov	r3, r1
   124d6:	607a      	str	r2, [r7, #4]
   124d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   124da:	7afb      	ldrb	r3, [r7, #11]
   124dc:	68fa      	ldr	r2, [r7, #12]
   124de:	01db      	lsls	r3, r3, #7
   124e0:	4413      	add	r3, r2
   124e2:	3318      	adds	r3, #24
   124e4:	687a      	ldr	r2, [r7, #4]
   124e6:	601a      	str	r2, [r3, #0]
}
   124e8:	bf00      	nop
   124ea:	3714      	adds	r7, #20
   124ec:	46bd      	mov	sp, r7
   124ee:	bc80      	pop	{r7}
   124f0:	4770      	bx	lr

000124f2 <hri_port_clear_OUT_reg>:
{
   124f2:	b480      	push	{r7}
   124f4:	b085      	sub	sp, #20
   124f6:	af00      	add	r7, sp, #0
   124f8:	60f8      	str	r0, [r7, #12]
   124fa:	460b      	mov	r3, r1
   124fc:	607a      	str	r2, [r7, #4]
   124fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12500:	7afb      	ldrb	r3, [r7, #11]
   12502:	68fa      	ldr	r2, [r7, #12]
   12504:	01db      	lsls	r3, r3, #7
   12506:	4413      	add	r3, r2
   12508:	3314      	adds	r3, #20
   1250a:	687a      	ldr	r2, [r7, #4]
   1250c:	601a      	str	r2, [r3, #0]
}
   1250e:	bf00      	nop
   12510:	3714      	adds	r7, #20
   12512:	46bd      	mov	sp, r7
   12514:	bc80      	pop	{r7}
   12516:	4770      	bx	lr

00012518 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12518:	b480      	push	{r7}
   1251a:	b085      	sub	sp, #20
   1251c:	af00      	add	r7, sp, #0
   1251e:	6078      	str	r0, [r7, #4]
   12520:	4608      	mov	r0, r1
   12522:	4611      	mov	r1, r2
   12524:	461a      	mov	r2, r3
   12526:	4603      	mov	r3, r0
   12528:	70fb      	strb	r3, [r7, #3]
   1252a:	460b      	mov	r3, r1
   1252c:	70bb      	strb	r3, [r7, #2]
   1252e:	4613      	mov	r3, r2
   12530:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12532:	78fa      	ldrb	r2, [r7, #3]
   12534:	78bb      	ldrb	r3, [r7, #2]
   12536:	6879      	ldr	r1, [r7, #4]
   12538:	01d2      	lsls	r2, r2, #7
   1253a:	440a      	add	r2, r1
   1253c:	4413      	add	r3, r2
   1253e:	3330      	adds	r3, #48	; 0x30
   12540:	781b      	ldrb	r3, [r3, #0]
   12542:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   12544:	7bfb      	ldrb	r3, [r7, #15]
   12546:	f023 030f 	bic.w	r3, r3, #15
   1254a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   1254c:	787b      	ldrb	r3, [r7, #1]
   1254e:	f003 030f 	and.w	r3, r3, #15
   12552:	b2da      	uxtb	r2, r3
   12554:	7bfb      	ldrb	r3, [r7, #15]
   12556:	4313      	orrs	r3, r2
   12558:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1255a:	78fa      	ldrb	r2, [r7, #3]
   1255c:	78bb      	ldrb	r3, [r7, #2]
   1255e:	6879      	ldr	r1, [r7, #4]
   12560:	01d2      	lsls	r2, r2, #7
   12562:	440a      	add	r2, r1
   12564:	4413      	add	r3, r2
   12566:	3330      	adds	r3, #48	; 0x30
   12568:	7bfa      	ldrb	r2, [r7, #15]
   1256a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1256c:	bf00      	nop
   1256e:	3714      	adds	r7, #20
   12570:	46bd      	mov	sp, r7
   12572:	bc80      	pop	{r7}
   12574:	4770      	bx	lr

00012576 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12576:	b480      	push	{r7}
   12578:	b085      	sub	sp, #20
   1257a:	af00      	add	r7, sp, #0
   1257c:	6078      	str	r0, [r7, #4]
   1257e:	4608      	mov	r0, r1
   12580:	4611      	mov	r1, r2
   12582:	461a      	mov	r2, r3
   12584:	4603      	mov	r3, r0
   12586:	70fb      	strb	r3, [r7, #3]
   12588:	460b      	mov	r3, r1
   1258a:	70bb      	strb	r3, [r7, #2]
   1258c:	4613      	mov	r3, r2
   1258e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12590:	78fa      	ldrb	r2, [r7, #3]
   12592:	78bb      	ldrb	r3, [r7, #2]
   12594:	6879      	ldr	r1, [r7, #4]
   12596:	01d2      	lsls	r2, r2, #7
   12598:	440a      	add	r2, r1
   1259a:	4413      	add	r3, r2
   1259c:	3330      	adds	r3, #48	; 0x30
   1259e:	781b      	ldrb	r3, [r3, #0]
   125a0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   125a2:	7bfb      	ldrb	r3, [r7, #15]
   125a4:	f003 030f 	and.w	r3, r3, #15
   125a8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   125aa:	787b      	ldrb	r3, [r7, #1]
   125ac:	011b      	lsls	r3, r3, #4
   125ae:	b2da      	uxtb	r2, r3
   125b0:	7bfb      	ldrb	r3, [r7, #15]
   125b2:	4313      	orrs	r3, r2
   125b4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   125b6:	78fa      	ldrb	r2, [r7, #3]
   125b8:	78bb      	ldrb	r3, [r7, #2]
   125ba:	6879      	ldr	r1, [r7, #4]
   125bc:	01d2      	lsls	r2, r2, #7
   125be:	440a      	add	r2, r1
   125c0:	4413      	add	r3, r2
   125c2:	3330      	adds	r3, #48	; 0x30
   125c4:	7bfa      	ldrb	r2, [r7, #15]
   125c6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   125c8:	bf00      	nop
   125ca:	3714      	adds	r7, #20
   125cc:	46bd      	mov	sp, r7
   125ce:	bc80      	pop	{r7}
   125d0:	4770      	bx	lr

000125d2 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   125d2:	b480      	push	{r7}
   125d4:	b085      	sub	sp, #20
   125d6:	af00      	add	r7, sp, #0
   125d8:	6078      	str	r0, [r7, #4]
   125da:	4608      	mov	r0, r1
   125dc:	4611      	mov	r1, r2
   125de:	461a      	mov	r2, r3
   125e0:	4603      	mov	r3, r0
   125e2:	70fb      	strb	r3, [r7, #3]
   125e4:	460b      	mov	r3, r1
   125e6:	70bb      	strb	r3, [r7, #2]
   125e8:	4613      	mov	r3, r2
   125ea:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   125ec:	78fa      	ldrb	r2, [r7, #3]
   125ee:	78bb      	ldrb	r3, [r7, #2]
   125f0:	6879      	ldr	r1, [r7, #4]
   125f2:	01d2      	lsls	r2, r2, #7
   125f4:	440a      	add	r2, r1
   125f6:	4413      	add	r3, r2
   125f8:	3340      	adds	r3, #64	; 0x40
   125fa:	781b      	ldrb	r3, [r3, #0]
   125fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   125fe:	7bfb      	ldrb	r3, [r7, #15]
   12600:	f023 0301 	bic.w	r3, r3, #1
   12604:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   12606:	787a      	ldrb	r2, [r7, #1]
   12608:	7bfb      	ldrb	r3, [r7, #15]
   1260a:	4313      	orrs	r3, r2
   1260c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1260e:	78fa      	ldrb	r2, [r7, #3]
   12610:	78bb      	ldrb	r3, [r7, #2]
   12612:	6879      	ldr	r1, [r7, #4]
   12614:	01d2      	lsls	r2, r2, #7
   12616:	440a      	add	r2, r1
   12618:	4413      	add	r3, r2
   1261a:	3340      	adds	r3, #64	; 0x40
   1261c:	7bfa      	ldrb	r2, [r7, #15]
   1261e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12620:	bf00      	nop
   12622:	3714      	adds	r7, #20
   12624:	46bd      	mov	sp, r7
   12626:	bc80      	pop	{r7}
   12628:	4770      	bx	lr

0001262a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1262a:	b480      	push	{r7}
   1262c:	b085      	sub	sp, #20
   1262e:	af00      	add	r7, sp, #0
   12630:	60f8      	str	r0, [r7, #12]
   12632:	460b      	mov	r3, r1
   12634:	607a      	str	r2, [r7, #4]
   12636:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   12638:	7afb      	ldrb	r3, [r7, #11]
   1263a:	68fa      	ldr	r2, [r7, #12]
   1263c:	01db      	lsls	r3, r3, #7
   1263e:	4413      	add	r3, r2
   12640:	3328      	adds	r3, #40	; 0x28
   12642:	687a      	ldr	r2, [r7, #4]
   12644:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12646:	bf00      	nop
   12648:	3714      	adds	r7, #20
   1264a:	46bd      	mov	sp, r7
   1264c:	bc80      	pop	{r7}
   1264e:	4770      	bx	lr

00012650 <_gpio_set_direction>:
{
   12650:	b580      	push	{r7, lr}
   12652:	b082      	sub	sp, #8
   12654:	af00      	add	r7, sp, #0
   12656:	4603      	mov	r3, r0
   12658:	6039      	str	r1, [r7, #0]
   1265a:	71fb      	strb	r3, [r7, #7]
   1265c:	4613      	mov	r3, r2
   1265e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   12660:	79bb      	ldrb	r3, [r7, #6]
   12662:	2b01      	cmp	r3, #1
   12664:	d01c      	beq.n	126a0 <_gpio_set_direction+0x50>
   12666:	2b02      	cmp	r3, #2
   12668:	d037      	beq.n	126da <_gpio_set_direction+0x8a>
   1266a:	2b00      	cmp	r3, #0
   1266c:	d14e      	bne.n	1270c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1266e:	79fb      	ldrb	r3, [r7, #7]
   12670:	683a      	ldr	r2, [r7, #0]
   12672:	4619      	mov	r1, r3
   12674:	482a      	ldr	r0, [pc, #168]	; (12720 <_gpio_set_direction+0xd0>)
   12676:	4b2b      	ldr	r3, [pc, #172]	; (12724 <_gpio_set_direction+0xd4>)
   12678:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1267a:	683b      	ldr	r3, [r7, #0]
   1267c:	b29b      	uxth	r3, r3
   1267e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12682:	79fb      	ldrb	r3, [r7, #7]
   12684:	4619      	mov	r1, r3
   12686:	4826      	ldr	r0, [pc, #152]	; (12720 <_gpio_set_direction+0xd0>)
   12688:	4b27      	ldr	r3, [pc, #156]	; (12728 <_gpio_set_direction+0xd8>)
   1268a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1268c:	683b      	ldr	r3, [r7, #0]
   1268e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12690:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12694:	79fb      	ldrb	r3, [r7, #7]
   12696:	4619      	mov	r1, r3
   12698:	4821      	ldr	r0, [pc, #132]	; (12720 <_gpio_set_direction+0xd0>)
   1269a:	4b23      	ldr	r3, [pc, #140]	; (12728 <_gpio_set_direction+0xd8>)
   1269c:	4798      	blx	r3
		break;
   1269e:	e03a      	b.n	12716 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   126a0:	79fb      	ldrb	r3, [r7, #7]
   126a2:	683a      	ldr	r2, [r7, #0]
   126a4:	4619      	mov	r1, r3
   126a6:	481e      	ldr	r0, [pc, #120]	; (12720 <_gpio_set_direction+0xd0>)
   126a8:	4b1e      	ldr	r3, [pc, #120]	; (12724 <_gpio_set_direction+0xd4>)
   126aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   126ac:	683b      	ldr	r3, [r7, #0]
   126ae:	b29b      	uxth	r3, r3
   126b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   126b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   126b8:	79f9      	ldrb	r1, [r7, #7]
   126ba:	461a      	mov	r2, r3
   126bc:	4818      	ldr	r0, [pc, #96]	; (12720 <_gpio_set_direction+0xd0>)
   126be:	4b1a      	ldr	r3, [pc, #104]	; (12728 <_gpio_set_direction+0xd8>)
   126c0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   126c2:	683b      	ldr	r3, [r7, #0]
   126c4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   126c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   126ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   126ce:	79f9      	ldrb	r1, [r7, #7]
   126d0:	461a      	mov	r2, r3
   126d2:	4813      	ldr	r0, [pc, #76]	; (12720 <_gpio_set_direction+0xd0>)
   126d4:	4b14      	ldr	r3, [pc, #80]	; (12728 <_gpio_set_direction+0xd8>)
   126d6:	4798      	blx	r3
		break;
   126d8:	e01d      	b.n	12716 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   126da:	79fb      	ldrb	r3, [r7, #7]
   126dc:	683a      	ldr	r2, [r7, #0]
   126de:	4619      	mov	r1, r3
   126e0:	480f      	ldr	r0, [pc, #60]	; (12720 <_gpio_set_direction+0xd0>)
   126e2:	4b12      	ldr	r3, [pc, #72]	; (1272c <_gpio_set_direction+0xdc>)
   126e4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   126e6:	683b      	ldr	r3, [r7, #0]
   126e8:	b29b      	uxth	r3, r3
   126ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   126ee:	79fb      	ldrb	r3, [r7, #7]
   126f0:	4619      	mov	r1, r3
   126f2:	480b      	ldr	r0, [pc, #44]	; (12720 <_gpio_set_direction+0xd0>)
   126f4:	4b0c      	ldr	r3, [pc, #48]	; (12728 <_gpio_set_direction+0xd8>)
   126f6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   126f8:	683b      	ldr	r3, [r7, #0]
   126fa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   126fc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12700:	79fb      	ldrb	r3, [r7, #7]
   12702:	4619      	mov	r1, r3
   12704:	4806      	ldr	r0, [pc, #24]	; (12720 <_gpio_set_direction+0xd0>)
   12706:	4b08      	ldr	r3, [pc, #32]	; (12728 <_gpio_set_direction+0xd8>)
   12708:	4798      	blx	r3
		break;
   1270a:	e004      	b.n	12716 <_gpio_set_direction+0xc6>
		ASSERT(false);
   1270c:	2246      	movs	r2, #70	; 0x46
   1270e:	4908      	ldr	r1, [pc, #32]	; (12730 <_gpio_set_direction+0xe0>)
   12710:	2000      	movs	r0, #0
   12712:	4b08      	ldr	r3, [pc, #32]	; (12734 <_gpio_set_direction+0xe4>)
   12714:	4798      	blx	r3
}
   12716:	bf00      	nop
   12718:	3708      	adds	r7, #8
   1271a:	46bd      	mov	sp, r7
   1271c:	bd80      	pop	{r7, pc}
   1271e:	bf00      	nop
   12720:	41008000 	.word	0x41008000
   12724:	000124a7 	.word	0x000124a7
   12728:	0001262b 	.word	0x0001262b
   1272c:	00012481 	.word	0x00012481
   12730:	000184fc 	.word	0x000184fc
   12734:	00006251 	.word	0x00006251

00012738 <_gpio_set_level>:
{
   12738:	b580      	push	{r7, lr}
   1273a:	b082      	sub	sp, #8
   1273c:	af00      	add	r7, sp, #0
   1273e:	4603      	mov	r3, r0
   12740:	6039      	str	r1, [r7, #0]
   12742:	71fb      	strb	r3, [r7, #7]
   12744:	4613      	mov	r3, r2
   12746:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12748:	79bb      	ldrb	r3, [r7, #6]
   1274a:	2b00      	cmp	r3, #0
   1274c:	d006      	beq.n	1275c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1274e:	79fb      	ldrb	r3, [r7, #7]
   12750:	683a      	ldr	r2, [r7, #0]
   12752:	4619      	mov	r1, r3
   12754:	4806      	ldr	r0, [pc, #24]	; (12770 <_gpio_set_level+0x38>)
   12756:	4b07      	ldr	r3, [pc, #28]	; (12774 <_gpio_set_level+0x3c>)
   12758:	4798      	blx	r3
}
   1275a:	e005      	b.n	12768 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1275c:	79fb      	ldrb	r3, [r7, #7]
   1275e:	683a      	ldr	r2, [r7, #0]
   12760:	4619      	mov	r1, r3
   12762:	4803      	ldr	r0, [pc, #12]	; (12770 <_gpio_set_level+0x38>)
   12764:	4b04      	ldr	r3, [pc, #16]	; (12778 <_gpio_set_level+0x40>)
   12766:	4798      	blx	r3
}
   12768:	bf00      	nop
   1276a:	3708      	adds	r7, #8
   1276c:	46bd      	mov	sp, r7
   1276e:	bd80      	pop	{r7, pc}
   12770:	41008000 	.word	0x41008000
   12774:	000124cd 	.word	0x000124cd
   12778:	000124f3 	.word	0x000124f3

0001277c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   1277c:	b590      	push	{r4, r7, lr}
   1277e:	b085      	sub	sp, #20
   12780:	af00      	add	r7, sp, #0
   12782:	6078      	str	r0, [r7, #4]
   12784:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	095b      	lsrs	r3, r3, #5
   1278a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   1278c:	687b      	ldr	r3, [r7, #4]
   1278e:	b2db      	uxtb	r3, r3
   12790:	f003 031f 	and.w	r3, r3, #31
   12794:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   12796:	683b      	ldr	r3, [r7, #0]
   12798:	f1b3 3fff 	cmp.w	r3, #4294967295
   1279c:	d106      	bne.n	127ac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1279e:	7bba      	ldrb	r2, [r7, #14]
   127a0:	7bf9      	ldrb	r1, [r7, #15]
   127a2:	2300      	movs	r3, #0
   127a4:	4812      	ldr	r0, [pc, #72]	; (127f0 <_gpio_set_pin_function+0x74>)
   127a6:	4c13      	ldr	r4, [pc, #76]	; (127f4 <_gpio_set_pin_function+0x78>)
   127a8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   127aa:	e01d      	b.n	127e8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   127ac:	7bba      	ldrb	r2, [r7, #14]
   127ae:	7bf9      	ldrb	r1, [r7, #15]
   127b0:	2301      	movs	r3, #1
   127b2:	480f      	ldr	r0, [pc, #60]	; (127f0 <_gpio_set_pin_function+0x74>)
   127b4:	4c0f      	ldr	r4, [pc, #60]	; (127f4 <_gpio_set_pin_function+0x78>)
   127b6:	47a0      	blx	r4
		if (pin & 1) {
   127b8:	7bbb      	ldrb	r3, [r7, #14]
   127ba:	f003 0301 	and.w	r3, r3, #1
   127be:	2b00      	cmp	r3, #0
   127c0:	d009      	beq.n	127d6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   127c2:	7bbb      	ldrb	r3, [r7, #14]
   127c4:	105b      	asrs	r3, r3, #1
   127c6:	b2da      	uxtb	r2, r3
   127c8:	683b      	ldr	r3, [r7, #0]
   127ca:	b2db      	uxtb	r3, r3
   127cc:	7bf9      	ldrb	r1, [r7, #15]
   127ce:	4808      	ldr	r0, [pc, #32]	; (127f0 <_gpio_set_pin_function+0x74>)
   127d0:	4c09      	ldr	r4, [pc, #36]	; (127f8 <_gpio_set_pin_function+0x7c>)
   127d2:	47a0      	blx	r4
}
   127d4:	e008      	b.n	127e8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   127d6:	7bbb      	ldrb	r3, [r7, #14]
   127d8:	105b      	asrs	r3, r3, #1
   127da:	b2da      	uxtb	r2, r3
   127dc:	683b      	ldr	r3, [r7, #0]
   127de:	b2db      	uxtb	r3, r3
   127e0:	7bf9      	ldrb	r1, [r7, #15]
   127e2:	4803      	ldr	r0, [pc, #12]	; (127f0 <_gpio_set_pin_function+0x74>)
   127e4:	4c05      	ldr	r4, [pc, #20]	; (127fc <_gpio_set_pin_function+0x80>)
   127e6:	47a0      	blx	r4
}
   127e8:	bf00      	nop
   127ea:	3714      	adds	r7, #20
   127ec:	46bd      	mov	sp, r7
   127ee:	bd90      	pop	{r4, r7, pc}
   127f0:	41008000 	.word	0x41008000
   127f4:	000125d3 	.word	0x000125d3
   127f8:	00012577 	.word	0x00012577
   127fc:	00012519 	.word	0x00012519

00012800 <gpio_set_pin_function>:
{
   12800:	b580      	push	{r7, lr}
   12802:	b082      	sub	sp, #8
   12804:	af00      	add	r7, sp, #0
   12806:	6078      	str	r0, [r7, #4]
   12808:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   1280a:	6839      	ldr	r1, [r7, #0]
   1280c:	6878      	ldr	r0, [r7, #4]
   1280e:	4b03      	ldr	r3, [pc, #12]	; (1281c <gpio_set_pin_function+0x1c>)
   12810:	4798      	blx	r3
}
   12812:	bf00      	nop
   12814:	3708      	adds	r7, #8
   12816:	46bd      	mov	sp, r7
   12818:	bd80      	pop	{r7, pc}
   1281a:	bf00      	nop
   1281c:	0001277d 	.word	0x0001277d

00012820 <gpio_set_pin_direction>:
{
   12820:	b580      	push	{r7, lr}
   12822:	b082      	sub	sp, #8
   12824:	af00      	add	r7, sp, #0
   12826:	4603      	mov	r3, r0
   12828:	460a      	mov	r2, r1
   1282a:	71fb      	strb	r3, [r7, #7]
   1282c:	4613      	mov	r3, r2
   1282e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   12830:	79fb      	ldrb	r3, [r7, #7]
   12832:	115b      	asrs	r3, r3, #5
   12834:	b2d8      	uxtb	r0, r3
   12836:	79fb      	ldrb	r3, [r7, #7]
   12838:	f003 031f 	and.w	r3, r3, #31
   1283c:	2201      	movs	r2, #1
   1283e:	fa02 f303 	lsl.w	r3, r2, r3
   12842:	79ba      	ldrb	r2, [r7, #6]
   12844:	4619      	mov	r1, r3
   12846:	4b03      	ldr	r3, [pc, #12]	; (12854 <gpio_set_pin_direction+0x34>)
   12848:	4798      	blx	r3
}
   1284a:	bf00      	nop
   1284c:	3708      	adds	r7, #8
   1284e:	46bd      	mov	sp, r7
   12850:	bd80      	pop	{r7, pc}
   12852:	bf00      	nop
   12854:	00012651 	.word	0x00012651

00012858 <gpio_set_pin_level>:
{
   12858:	b580      	push	{r7, lr}
   1285a:	b082      	sub	sp, #8
   1285c:	af00      	add	r7, sp, #0
   1285e:	4603      	mov	r3, r0
   12860:	460a      	mov	r2, r1
   12862:	71fb      	strb	r3, [r7, #7]
   12864:	4613      	mov	r3, r2
   12866:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12868:	79fb      	ldrb	r3, [r7, #7]
   1286a:	115b      	asrs	r3, r3, #5
   1286c:	b2d8      	uxtb	r0, r3
   1286e:	79fb      	ldrb	r3, [r7, #7]
   12870:	f003 031f 	and.w	r3, r3, #31
   12874:	2201      	movs	r2, #1
   12876:	fa02 f303 	lsl.w	r3, r2, r3
   1287a:	79ba      	ldrb	r2, [r7, #6]
   1287c:	4619      	mov	r1, r3
   1287e:	4b03      	ldr	r3, [pc, #12]	; (1288c <gpio_set_pin_level+0x34>)
   12880:	4798      	blx	r3
}
   12882:	bf00      	nop
   12884:	3708      	adds	r7, #8
   12886:	46bd      	mov	sp, r7
   12888:	bd80      	pop	{r7, pc}
   1288a:	bf00      	nop
   1288c:	00012739 	.word	0x00012739

00012890 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   12890:	b580      	push	{r7, lr}
   12892:	b082      	sub	sp, #8
   12894:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   12896:	2100      	movs	r1, #0
   12898:	2008      	movs	r0, #8
   1289a:	4b24      	ldr	r3, [pc, #144]	; (1292c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1289c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1289e:	2100      	movs	r1, #0
   128a0:	202b      	movs	r0, #43	; 0x2b
   128a2:	4b22      	ldr	r3, [pc, #136]	; (1292c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   128a4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   128a6:	2100      	movs	r1, #0
   128a8:	202a      	movs	r0, #42	; 0x2a
   128aa:	4b20      	ldr	r3, [pc, #128]	; (1292c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   128ac:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   128ae:	2102      	movs	r1, #2
   128b0:	2008      	movs	r0, #8
   128b2:	4b1f      	ldr	r3, [pc, #124]	; (12930 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   128b4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   128b6:	2102      	movs	r1, #2
   128b8:	202b      	movs	r0, #43	; 0x2b
   128ba:	4b1d      	ldr	r3, [pc, #116]	; (12930 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   128bc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   128be:	2102      	movs	r1, #2
   128c0:	202a      	movs	r0, #42	; 0x2a
   128c2:	4b1b      	ldr	r3, [pc, #108]	; (12930 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   128c4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   128c6:	2101      	movs	r1, #1
   128c8:	2008      	movs	r0, #8
   128ca:	4b1a      	ldr	r3, [pc, #104]	; (12934 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   128cc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   128ce:	2100      	movs	r1, #0
   128d0:	202b      	movs	r0, #43	; 0x2b
   128d2:	4b18      	ldr	r3, [pc, #96]	; (12934 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   128d4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   128d6:	2100      	movs	r1, #0
   128d8:	202a      	movs	r0, #42	; 0x2a
   128da:	4b16      	ldr	r3, [pc, #88]	; (12934 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   128dc:	4798      	blx	r3

	delay_us(1);
   128de:	2001      	movs	r0, #1
   128e0:	4b15      	ldr	r3, [pc, #84]	; (12938 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   128e2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   128e4:	2300      	movs	r3, #0
   128e6:	607b      	str	r3, [r7, #4]
   128e8:	687b      	ldr	r3, [r7, #4]
   128ea:	2b06      	cmp	r3, #6
   128ec:	dc11      	bgt.n	12912 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   128ee:	2101      	movs	r1, #1
   128f0:	202a      	movs	r0, #42	; 0x2a
   128f2:	4b10      	ldr	r3, [pc, #64]	; (12934 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   128f4:	4798      	blx	r3
		delay_us(1);
   128f6:	2001      	movs	r0, #1
   128f8:	4b0f      	ldr	r3, [pc, #60]	; (12938 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   128fa:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   128fc:	2100      	movs	r1, #0
   128fe:	202a      	movs	r0, #42	; 0x2a
   12900:	4b0c      	ldr	r3, [pc, #48]	; (12934 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12902:	4798      	blx	r3
		delay_us(1);
   12904:	2001      	movs	r0, #1
   12906:	4b0c      	ldr	r3, [pc, #48]	; (12938 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12908:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1290a:	687b      	ldr	r3, [r7, #4]
   1290c:	3301      	adds	r3, #1
   1290e:	607b      	str	r3, [r7, #4]
   12910:	e7ea      	b.n	128e8 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   12912:	2101      	movs	r1, #1
   12914:	202b      	movs	r0, #43	; 0x2b
   12916:	4b07      	ldr	r3, [pc, #28]	; (12934 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12918:	4798      	blx	r3
	delay_us(1);
   1291a:	2001      	movs	r0, #1
   1291c:	4b06      	ldr	r3, [pc, #24]	; (12938 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1291e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   12920:	4b06      	ldr	r3, [pc, #24]	; (1293c <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   12922:	4798      	blx	r3
}
   12924:	bf00      	nop
   12926:	3708      	adds	r7, #8
   12928:	46bd      	mov	sp, r7
   1292a:	bd80      	pop	{r7, pc}
   1292c:	00012801 	.word	0x00012801
   12930:	00012821 	.word	0x00012821
   12934:	00012859 	.word	0x00012859
   12938:	00004749 	.word	0x00004749
   1293c:	000035f9 	.word	0x000035f9

00012940 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   12940:	b480      	push	{r7}
   12942:	b083      	sub	sp, #12
   12944:	af00      	add	r7, sp, #0
   12946:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   12948:	687b      	ldr	r3, [r7, #4]
   1294a:	4618      	mov	r0, r3
   1294c:	370c      	adds	r7, #12
   1294e:	46bd      	mov	sp, r7
   12950:	bc80      	pop	{r7}
   12952:	4770      	bx	lr

00012954 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   12954:	b480      	push	{r7}
   12956:	b083      	sub	sp, #12
   12958:	af00      	add	r7, sp, #0
   1295a:	6078      	str	r0, [r7, #4]
   1295c:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1295e:	687b      	ldr	r3, [r7, #4]
   12960:	683a      	ldr	r2, [r7, #0]
   12962:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	4a04      	ldr	r2, [pc, #16]	; (12978 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   12968:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	4618      	mov	r0, r3
   12970:	370c      	adds	r7, #12
   12972:	46bd      	mov	sp, r7
   12974:	bc80      	pop	{r7}
   12976:	4770      	bx	lr
   12978:	001fff00 	.word	0x001fff00

0001297c <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   1297c:	b480      	push	{r7}
   1297e:	b083      	sub	sp, #12
   12980:	af00      	add	r7, sp, #0
   12982:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   12984:	687b      	ldr	r3, [r7, #4]
   12986:	4618      	mov	r0, r3
   12988:	370c      	adds	r7, #12
   1298a:	46bd      	mov	sp, r7
   1298c:	bc80      	pop	{r7}
   1298e:	4770      	bx	lr

00012990 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   12990:	b580      	push	{r7, lr}
   12992:	b082      	sub	sp, #8
   12994:	af00      	add	r7, sp, #0
   12996:	6078      	str	r0, [r7, #4]
	xferDone=false;
   12998:	687b      	ldr	r3, [r7, #4]
   1299a:	2200      	movs	r2, #0
   1299c:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1299e:	6878      	ldr	r0, [r7, #4]
   129a0:	4b04      	ldr	r3, [pc, #16]	; (129b4 <_ZN13N25Q256_Class4InitEv+0x24>)
   129a2:	4798      	blx	r3
	return SelfTest();
   129a4:	6878      	ldr	r0, [r7, #4]
   129a6:	4b04      	ldr	r3, [pc, #16]	; (129b8 <_ZN13N25Q256_Class4InitEv+0x28>)
   129a8:	4798      	blx	r3
   129aa:	4603      	mov	r3, r0
}
   129ac:	4618      	mov	r0, r3
   129ae:	3708      	adds	r7, #8
   129b0:	46bd      	mov	sp, r7
   129b2:	bd80      	pop	{r7, pc}
   129b4:	000129bd 	.word	0x000129bd
   129b8:	00012b71 	.word	0x00012b71

000129bc <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   129bc:	b590      	push	{r4, r7, lr}
   129be:	b083      	sub	sp, #12
   129c0:	af00      	add	r7, sp, #0
   129c2:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   129c4:	687b      	ldr	r3, [r7, #4]
   129c6:	685b      	ldr	r3, [r3, #4]
   129c8:	4618      	mov	r0, r3
   129ca:	4b08      	ldr	r3, [pc, #32]	; (129ec <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   129cc:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   129ce:	687b      	ldr	r3, [r7, #4]
   129d0:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   129d2:	2300      	movs	r3, #0
   129d4:	4a06      	ldr	r2, [pc, #24]	; (129f0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   129d6:	4807      	ldr	r0, [pc, #28]	; (129f4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   129d8:	4c07      	ldr	r4, [pc, #28]	; (129f8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   129da:	47a0      	blx	r4
   129dc:	4602      	mov	r2, r0
   129de:	687b      	ldr	r3, [r7, #4]
   129e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   129e4:	bf00      	nop
   129e6:	370c      	adds	r7, #12
   129e8:	46bd      	mov	sp, r7
   129ea:	bd90      	pop	{r4, r7, pc}
   129ec:	00004e19 	.word	0x00004e19
   129f0:	00012891 	.word	0x00012891
   129f4:	200049b8 	.word	0x200049b8
   129f8:	0000e92d 	.word	0x0000e92d

000129fc <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   129fc:	b580      	push	{r7, lr}
   129fe:	b084      	sub	sp, #16
   12a00:	af00      	add	r7, sp, #0
   12a02:	6078      	str	r0, [r7, #4]
   12a04:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   12a06:	687b      	ldr	r3, [r7, #4]
   12a08:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12a0c:	685b      	ldr	r3, [r3, #4]
   12a0e:	689b      	ldr	r3, [r3, #8]
   12a10:	687a      	ldr	r2, [r7, #4]
   12a12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   12a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12a1a:	6839      	ldr	r1, [r7, #0]
   12a1c:	4798      	blx	r3
   12a1e:	4603      	mov	r3, r0
   12a20:	60fb      	str	r3, [r7, #12]
	return	e;
   12a22:	68fb      	ldr	r3, [r7, #12]
}
   12a24:	4618      	mov	r0, r3
   12a26:	3710      	adds	r7, #16
   12a28:	46bd      	mov	sp, r7
   12a2a:	bd80      	pop	{r7, pc}

00012a2c <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12a2c:	b590      	push	{r4, r7, lr}
   12a2e:	b087      	sub	sp, #28
   12a30:	af00      	add	r7, sp, #0
   12a32:	60f8      	str	r0, [r7, #12]
   12a34:	60b9      	str	r1, [r7, #8]
   12a36:	607a      	str	r2, [r7, #4]
   12a38:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   12a3a:	68fb      	ldr	r3, [r7, #12]
   12a3c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12a40:	685b      	ldr	r3, [r3, #4]
   12a42:	685c      	ldr	r4, [r3, #4]
   12a44:	68fb      	ldr	r3, [r7, #12]
   12a46:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12a4a:	683b      	ldr	r3, [r7, #0]
   12a4c:	687a      	ldr	r2, [r7, #4]
   12a4e:	68b9      	ldr	r1, [r7, #8]
   12a50:	47a0      	blx	r4
   12a52:	4603      	mov	r3, r0
   12a54:	617b      	str	r3, [r7, #20]
	return	w;
   12a56:	697b      	ldr	r3, [r7, #20]
}
   12a58:	4618      	mov	r0, r3
   12a5a:	371c      	adds	r7, #28
   12a5c:	46bd      	mov	sp, r7
   12a5e:	bd90      	pop	{r4, r7, pc}

00012a60 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12a60:	b590      	push	{r4, r7, lr}
   12a62:	b087      	sub	sp, #28
   12a64:	af00      	add	r7, sp, #0
   12a66:	60f8      	str	r0, [r7, #12]
   12a68:	60b9      	str	r1, [r7, #8]
   12a6a:	607a      	str	r2, [r7, #4]
   12a6c:	603b      	str	r3, [r7, #0]
	xferDone=false;
   12a6e:	68fb      	ldr	r3, [r7, #12]
   12a70:	2200      	movs	r2, #0
   12a72:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   12a74:	68fb      	ldr	r3, [r7, #12]
   12a76:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12a7a:	685b      	ldr	r3, [r3, #4]
   12a7c:	681c      	ldr	r4, [r3, #0]
   12a7e:	68fb      	ldr	r3, [r7, #12]
   12a80:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12a84:	683b      	ldr	r3, [r7, #0]
   12a86:	687a      	ldr	r2, [r7, #4]
   12a88:	68b9      	ldr	r1, [r7, #8]
   12a8a:	47a0      	blx	r4
   12a8c:	4603      	mov	r3, r0
   12a8e:	617b      	str	r3, [r7, #20]
	return	r;
   12a90:	697b      	ldr	r3, [r7, #20]
}
   12a92:	4618      	mov	r0, r3
   12a94:	371c      	adds	r7, #28
   12a96:	46bd      	mov	sp, r7
   12a98:	bd90      	pop	{r4, r7, pc}
	...

00012a9c <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   12a9c:	b580      	push	{r7, lr}
   12a9e:	b082      	sub	sp, #8
   12aa0:	af00      	add	r7, sp, #0
   12aa2:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   12aa4:	687a      	ldr	r2, [r7, #4]
   12aa6:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   12aaa:	f043 0310 	orr.w	r3, r3, #16
   12aae:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   12ab2:	687a      	ldr	r2, [r7, #4]
   12ab4:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   12ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12abc:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   12ac0:	687a      	ldr	r2, [r7, #4]
   12ac2:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   12ac6:	f36f 1305 	bfc	r3, #4, #2
   12aca:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	2205      	movs	r2, #5
   12ad2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   12ad6:	687b      	ldr	r3, [r7, #4]
   12ad8:	2201      	movs	r2, #1
   12ada:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   12ade:	687b      	ldr	r3, [r7, #4]
   12ae0:	f203 2212 	addw	r2, r3, #530	; 0x212
   12ae4:	687b      	ldr	r3, [r7, #4]
   12ae6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   12aea:	687b      	ldr	r3, [r7, #4]
   12aec:	685a      	ldr	r2, [r3, #4]
   12aee:	687b      	ldr	r3, [r7, #4]
   12af0:	f503 7305 	add.w	r3, r3, #532	; 0x214
   12af4:	4619      	mov	r1, r3
   12af6:	4610      	mov	r0, r2
   12af8:	4b04      	ldr	r3, [pc, #16]	; (12b0c <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   12afa:	4798      	blx	r3
		return status;
   12afc:	687b      	ldr	r3, [r7, #4]
   12afe:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   12b02:	4618      	mov	r0, r3
   12b04:	3708      	adds	r7, #8
   12b06:	46bd      	mov	sp, r7
   12b08:	bd80      	pop	{r7, pc}
   12b0a:	bf00      	nop
   12b0c:	00004e91 	.word	0x00004e91

00012b10 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   12b10:	b480      	push	{r7}
   12b12:	b083      	sub	sp, #12
   12b14:	af00      	add	r7, sp, #0
   12b16:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   12b18:	687b      	ldr	r3, [r7, #4]
   12b1a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   12b1e:	4618      	mov	r0, r3
   12b20:	370c      	adds	r7, #12
   12b22:	46bd      	mov	sp, r7
   12b24:	bc80      	pop	{r7}
   12b26:	4770      	bx	lr

00012b28 <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   12b28:	b580      	push	{r7, lr}
   12b2a:	b082      	sub	sp, #8
   12b2c:	af00      	add	r7, sp, #0
   12b2e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   12b30:	6878      	ldr	r0, [r7, #4]
   12b32:	4b0e      	ldr	r3, [pc, #56]	; (12b6c <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   12b34:	4798      	blx	r3
   12b36:	4603      	mov	r3, r0
   12b38:	461a      	mov	r2, r3
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   12b40:	687b      	ldr	r3, [r7, #4]
   12b42:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12b46:	f003 0301 	and.w	r3, r3, #1
   12b4a:	2b00      	cmp	r3, #0
   12b4c:	d000      	beq.n	12b50 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   12b4e:	e7ef      	b.n	12b30 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   12b50:	687b      	ldr	r3, [r7, #4]
   12b52:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12b56:	f003 0301 	and.w	r3, r3, #1
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	bf0c      	ite	eq
   12b5e:	2301      	moveq	r3, #1
   12b60:	2300      	movne	r3, #0
   12b62:	b2db      	uxtb	r3, r3
}
   12b64:	4618      	mov	r0, r3
   12b66:	3708      	adds	r7, #8
   12b68:	46bd      	mov	sp, r7
   12b6a:	bd80      	pop	{r7, pc}
   12b6c:	00012a9d 	.word	0x00012a9d

00012b70 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   12b70:	b590      	push	{r4, r7, lr}
   12b72:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   12b76:	b085      	sub	sp, #20
   12b78:	af00      	add	r7, sp, #0
   12b7a:	f107 0310 	add.w	r3, r7, #16
   12b7e:	3b0c      	subs	r3, #12
   12b80:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   12b82:	f107 0310 	add.w	r3, r7, #16
   12b86:	3b0c      	subs	r3, #12
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12b8e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   12b92:	f107 0310 	add.w	r3, r7, #16
   12b96:	3b0c      	subs	r3, #12
   12b98:	681b      	ldr	r3, [r3, #0]
   12b9a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12b9e:	f107 0110 	add.w	r1, r7, #16
   12ba2:	3904      	subs	r1, #4
   12ba4:	f107 0010 	add.w	r0, r7, #16
   12ba8:	380c      	subs	r0, #12
   12baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12bae:	6800      	ldr	r0, [r0, #0]
   12bb0:	4c4b      	ldr	r4, [pc, #300]	; (12ce0 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12bb2:	47a0      	blx	r4
	WaitOnBusy();
   12bb4:	f107 0310 	add.w	r3, r7, #16
   12bb8:	3b0c      	subs	r3, #12
   12bba:	6818      	ldr	r0, [r3, #0]
   12bbc:	4b49      	ldr	r3, [pc, #292]	; (12ce4 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12bbe:	4798      	blx	r3
	Erase(currentAddress);
   12bc0:	f107 0310 	add.w	r3, r7, #16
   12bc4:	3b0c      	subs	r3, #12
   12bc6:	681b      	ldr	r3, [r3, #0]
   12bc8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12bcc:	f107 0310 	add.w	r3, r7, #16
   12bd0:	3b0c      	subs	r3, #12
   12bd2:	4611      	mov	r1, r2
   12bd4:	6818      	ldr	r0, [r3, #0]
   12bd6:	4b44      	ldr	r3, [pc, #272]	; (12ce8 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   12bd8:	4798      	blx	r3
	WaitOnBusy();
   12bda:	f107 0310 	add.w	r3, r7, #16
   12bde:	3b0c      	subs	r3, #12
   12be0:	6818      	ldr	r0, [r3, #0]
   12be2:	4b40      	ldr	r3, [pc, #256]	; (12ce4 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12be4:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   12be6:	f107 0310 	add.w	r3, r7, #16
   12bea:	3b0c      	subs	r3, #12
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12bf2:	f107 0110 	add.w	r1, r7, #16
   12bf6:	3904      	subs	r1, #4
   12bf8:	f107 0010 	add.w	r0, r7, #16
   12bfc:	380c      	subs	r0, #12
   12bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12c02:	6800      	ldr	r0, [r0, #0]
   12c04:	4c39      	ldr	r4, [pc, #228]	; (12cec <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   12c06:	47a0      	blx	r4
	WaitOnBusy();
   12c08:	f107 0310 	add.w	r3, r7, #16
   12c0c:	3b0c      	subs	r3, #12
   12c0e:	6818      	ldr	r0, [r3, #0]
   12c10:	4b34      	ldr	r3, [pc, #208]	; (12ce4 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12c12:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   12c14:	f107 0310 	add.w	r3, r7, #16
   12c18:	3b0c      	subs	r3, #12
   12c1a:	681b      	ldr	r3, [r3, #0]
   12c1c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12c20:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   12c24:	f101 0110 	add.w	r1, r1, #16
   12c28:	3904      	subs	r1, #4
   12c2a:	f107 0010 	add.w	r0, r7, #16
   12c2e:	380c      	subs	r0, #12
   12c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12c34:	6800      	ldr	r0, [r0, #0]
   12c36:	4c2a      	ldr	r4, [pc, #168]	; (12ce0 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12c38:	47a0      	blx	r4
	WaitOnBusy();
   12c3a:	f107 0310 	add.w	r3, r7, #16
   12c3e:	3b0c      	subs	r3, #12
   12c40:	6818      	ldr	r0, [r3, #0]
   12c42:	4b28      	ldr	r3, [pc, #160]	; (12ce4 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12c44:	4798      	blx	r3
	isOK	 = true;
   12c46:	f107 0310 	add.w	r3, r7, #16
   12c4a:	3b0c      	subs	r3, #12
   12c4c:	681b      	ldr	r3, [r3, #0]
   12c4e:	2201      	movs	r2, #1
   12c50:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12c54:	2300      	movs	r3, #0
   12c56:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12c5a:	f102 020c 	add.w	r2, r2, #12
   12c5e:	6013      	str	r3, [r2, #0]
   12c60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12c64:	f103 030c 	add.w	r3, r3, #12
   12c68:	681b      	ldr	r3, [r3, #0]
   12c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   12c6e:	da2b      	bge.n	12cc8 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   12c70:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   12c74:	f103 0310 	add.w	r3, r3, #16
   12c78:	3b04      	subs	r3, #4
   12c7a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12c7e:	f102 020c 	add.w	r2, r2, #12
   12c82:	6812      	ldr	r2, [r2, #0]
   12c84:	4413      	add	r3, r2
   12c86:	781a      	ldrb	r2, [r3, #0]
   12c88:	f107 0310 	add.w	r3, r7, #16
   12c8c:	3b04      	subs	r3, #4
   12c8e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   12c92:	f101 010c 	add.w	r1, r1, #12
   12c96:	6809      	ldr	r1, [r1, #0]
   12c98:	440b      	add	r3, r1
   12c9a:	781b      	ldrb	r3, [r3, #0]
   12c9c:	429a      	cmp	r2, r3
   12c9e:	d007      	beq.n	12cb0 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   12ca0:	f107 0310 	add.w	r3, r7, #16
   12ca4:	3b0c      	subs	r3, #12
   12ca6:	681b      	ldr	r3, [r3, #0]
   12ca8:	2200      	movs	r2, #0
   12caa:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   12cae:	e00b      	b.n	12cc8 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12cb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12cb4:	f103 030c 	add.w	r3, r3, #12
   12cb8:	681b      	ldr	r3, [r3, #0]
   12cba:	3301      	adds	r3, #1
   12cbc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12cc0:	f102 020c 	add.w	r2, r2, #12
   12cc4:	6013      	str	r3, [r2, #0]
   12cc6:	e7cb      	b.n	12c60 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   12cc8:	f107 0310 	add.w	r3, r7, #16
   12ccc:	3b0c      	subs	r3, #12
   12cce:	681b      	ldr	r3, [r3, #0]
   12cd0:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   12cd4:	4618      	mov	r0, r3
   12cd6:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   12cda:	3714      	adds	r7, #20
   12cdc:	46bd      	mov	sp, r7
   12cde:	bd90      	pop	{r4, r7, pc}
   12ce0:	00012a61 	.word	0x00012a61
   12ce4:	00012b29 	.word	0x00012b29
   12ce8:	000129fd 	.word	0x000129fd
   12cec:	00012a2d 	.word	0x00012a2d

00012cf0 <_Z41__static_initialization_and_destruction_0ii>:
   12cf0:	b580      	push	{r7, lr}
   12cf2:	b082      	sub	sp, #8
   12cf4:	af00      	add	r7, sp, #0
   12cf6:	6078      	str	r0, [r7, #4]
   12cf8:	6039      	str	r1, [r7, #0]
   12cfa:	687b      	ldr	r3, [r7, #4]
   12cfc:	2b01      	cmp	r3, #1
   12cfe:	d10d      	bne.n	12d1c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12d00:	683b      	ldr	r3, [r7, #0]
   12d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12d06:	4293      	cmp	r3, r2
   12d08:	d108      	bne.n	12d1c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12d0a:	4906      	ldr	r1, [pc, #24]	; (12d24 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12d0c:	4806      	ldr	r0, [pc, #24]	; (12d28 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12d0e:	4b07      	ldr	r3, [pc, #28]	; (12d2c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12d10:	4798      	blx	r3
   12d12:	4a07      	ldr	r2, [pc, #28]	; (12d30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12d14:	4907      	ldr	r1, [pc, #28]	; (12d34 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12d16:	4804      	ldr	r0, [pc, #16]	; (12d28 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12d18:	4b07      	ldr	r3, [pc, #28]	; (12d38 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   12d1a:	4798      	blx	r3
   12d1c:	bf00      	nop
   12d1e:	3708      	adds	r7, #8
   12d20:	46bd      	mov	sp, r7
   12d22:	bd80      	pop	{r7, pc}
   12d24:	20004f14 	.word	0x20004f14
   12d28:	200049c8 	.word	0x200049c8
   12d2c:	00012955 	.word	0x00012955
   12d30:	20000000 	.word	0x20000000
   12d34:	0001297d 	.word	0x0001297d
   12d38:	00014919 	.word	0x00014919

00012d3c <_GLOBAL__sub_I_ptrN25Q256Class>:
   12d3c:	b580      	push	{r7, lr}
   12d3e:	af00      	add	r7, sp, #0
   12d40:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12d44:	2001      	movs	r0, #1
   12d46:	4b01      	ldr	r3, [pc, #4]	; (12d4c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   12d48:	4798      	blx	r3
   12d4a:	bd80      	pop	{r7, pc}
   12d4c:	00012cf1 	.word	0x00012cf1

00012d50 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   12d50:	b580      	push	{r7, lr}
   12d52:	b082      	sub	sp, #8
   12d54:	af00      	add	r7, sp, #0
   12d56:	6078      	str	r0, [r7, #4]
   12d58:	687b      	ldr	r3, [r7, #4]
   12d5a:	4618      	mov	r0, r3
   12d5c:	4b06      	ldr	r3, [pc, #24]	; (12d78 <_ZN14Calendar_ClassC1Ev+0x28>)
   12d5e:	4798      	blx	r3
   12d60:	4a06      	ldr	r2, [pc, #24]	; (12d7c <_ZN14Calendar_ClassC1Ev+0x2c>)
   12d62:	687b      	ldr	r3, [r7, #4]
   12d64:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   12d66:	4a06      	ldr	r2, [pc, #24]	; (12d80 <_ZN14Calendar_ClassC1Ev+0x30>)
   12d68:	687b      	ldr	r3, [r7, #4]
   12d6a:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   12d6c:	687b      	ldr	r3, [r7, #4]
   12d6e:	4618      	mov	r0, r3
   12d70:	3708      	adds	r7, #8
   12d72:	46bd      	mov	sp, r7
   12d74:	bd80      	pop	{r7, pc}
   12d76:	bf00      	nop
   12d78:	000134ad 	.word	0x000134ad
   12d7c:	0001853c 	.word	0x0001853c
   12d80:	20004bf8 	.word	0x20004bf8

00012d84 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   12d84:	b580      	push	{r7, lr}
   12d86:	b082      	sub	sp, #8
   12d88:	af00      	add	r7, sp, #0
   12d8a:	6078      	str	r0, [r7, #4]
   12d8c:	6039      	str	r1, [r7, #0]
   12d8e:	687b      	ldr	r3, [r7, #4]
   12d90:	4618      	mov	r0, r3
   12d92:	4b08      	ldr	r3, [pc, #32]	; (12db4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   12d94:	4798      	blx	r3
   12d96:	4a08      	ldr	r2, [pc, #32]	; (12db8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   12d98:	687b      	ldr	r3, [r7, #4]
   12d9a:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   12d9c:	687b      	ldr	r3, [r7, #4]
   12d9e:	683a      	ldr	r2, [r7, #0]
   12da0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   12da4:	4a05      	ldr	r2, [pc, #20]	; (12dbc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   12da6:	687b      	ldr	r3, [r7, #4]
   12da8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   12daa:	687b      	ldr	r3, [r7, #4]
   12dac:	4618      	mov	r0, r3
   12dae:	3708      	adds	r7, #8
   12db0:	46bd      	mov	sp, r7
   12db2:	bd80      	pop	{r7, pc}
   12db4:	000134ad 	.word	0x000134ad
   12db8:	0001853c 	.word	0x0001853c
   12dbc:	20004bf8 	.word	0x20004bf8

00012dc0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   12dc0:	b580      	push	{r7, lr}
   12dc2:	b082      	sub	sp, #8
   12dc4:	af00      	add	r7, sp, #0
   12dc6:	6078      	str	r0, [r7, #4]
   12dc8:	4a05      	ldr	r2, [pc, #20]	; (12de0 <_ZN14Calendar_ClassD1Ev+0x20>)
   12dca:	687b      	ldr	r3, [r7, #4]
   12dcc:	601a      	str	r2, [r3, #0]
   12dce:	687b      	ldr	r3, [r7, #4]
   12dd0:	4618      	mov	r0, r3
   12dd2:	4b04      	ldr	r3, [pc, #16]	; (12de4 <_ZN14Calendar_ClassD1Ev+0x24>)
   12dd4:	4798      	blx	r3
{
} //~Calendar_Class
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	4618      	mov	r0, r3
   12dda:	3708      	adds	r7, #8
   12ddc:	46bd      	mov	sp, r7
   12dde:	bd80      	pop	{r7, pc}
   12de0:	0001853c 	.word	0x0001853c
   12de4:	000134cd 	.word	0x000134cd

00012de8 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   12de8:	b580      	push	{r7, lr}
   12dea:	b082      	sub	sp, #8
   12dec:	af00      	add	r7, sp, #0
   12dee:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   12df0:	687b      	ldr	r3, [r7, #4]
   12df2:	4a53      	ldr	r2, [pc, #332]	; (12f40 <_ZN14Calendar_Class4InitEv+0x158>)
   12df4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   12df8:	687b      	ldr	r3, [r7, #4]
   12dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   12dfe:	4618      	mov	r0, r3
   12e00:	4b50      	ldr	r3, [pc, #320]	; (12f44 <_ZN14Calendar_Class4InitEv+0x15c>)
   12e02:	4798      	blx	r3
	ptrMemory->Init();
   12e04:	687b      	ldr	r3, [r7, #4]
   12e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   12e0a:	4618      	mov	r0, r3
   12e0c:	4b4e      	ldr	r3, [pc, #312]	; (12f48 <_ZN14Calendar_Class4InitEv+0x160>)
   12e0e:	4798      	blx	r3
	InitMaxDate();
   12e10:	6878      	ldr	r0, [r7, #4]
   12e12:	4b4e      	ldr	r3, [pc, #312]	; (12f4c <_ZN14Calendar_Class4InitEv+0x164>)
   12e14:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	4618      	mov	r0, r3
   12e1a:	4b4d      	ldr	r3, [pc, #308]	; (12f50 <_ZN14Calendar_Class4InitEv+0x168>)
   12e1c:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	681b      	ldr	r3, [r3, #0]
   12e22:	3304      	adds	r3, #4
   12e24:	681b      	ldr	r3, [r3, #0]
   12e26:	687a      	ldr	r2, [r7, #4]
   12e28:	3260      	adds	r2, #96	; 0x60
   12e2a:	4611      	mov	r1, r2
   12e2c:	6878      	ldr	r0, [r7, #4]
   12e2e:	4798      	blx	r3
   12e30:	4602      	mov	r2, r0
   12e32:	687b      	ldr	r3, [r7, #4]
   12e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   12e38:	687b      	ldr	r3, [r7, #4]
   12e3a:	681b      	ldr	r3, [r3, #0]
   12e3c:	3304      	adds	r3, #4
   12e3e:	681b      	ldr	r3, [r3, #0]
   12e40:	687a      	ldr	r2, [r7, #4]
   12e42:	326c      	adds	r2, #108	; 0x6c
   12e44:	4611      	mov	r1, r2
   12e46:	6878      	ldr	r0, [r7, #4]
   12e48:	4798      	blx	r3
   12e4a:	4602      	mov	r2, r0
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   12e52:	687b      	ldr	r3, [r7, #4]
   12e54:	681b      	ldr	r3, [r3, #0]
   12e56:	3304      	adds	r3, #4
   12e58:	681b      	ldr	r3, [r3, #0]
   12e5a:	687a      	ldr	r2, [r7, #4]
   12e5c:	327c      	adds	r2, #124	; 0x7c
   12e5e:	4611      	mov	r1, r2
   12e60:	6878      	ldr	r0, [r7, #4]
   12e62:	4798      	blx	r3
   12e64:	4602      	mov	r2, r0
   12e66:	687b      	ldr	r3, [r7, #4]
   12e68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   12e6c:	687b      	ldr	r3, [r7, #4]
   12e6e:	681b      	ldr	r3, [r3, #0]
   12e70:	3304      	adds	r3, #4
   12e72:	681b      	ldr	r3, [r3, #0]
   12e74:	687a      	ldr	r2, [r7, #4]
   12e76:	3284      	adds	r2, #132	; 0x84
   12e78:	4611      	mov	r1, r2
   12e7a:	6878      	ldr	r0, [r7, #4]
   12e7c:	4798      	blx	r3
   12e7e:	4602      	mov	r2, r0
   12e80:	687b      	ldr	r3, [r7, #4]
   12e82:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   12e84:	6878      	ldr	r0, [r7, #4]
   12e86:	4b33      	ldr	r3, [pc, #204]	; (12f54 <_ZN14Calendar_Class4InitEv+0x16c>)
   12e88:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   12e8a:	687b      	ldr	r3, [r7, #4]
   12e8c:	681b      	ldr	r3, [r3, #0]
   12e8e:	3304      	adds	r3, #4
   12e90:	681b      	ldr	r3, [r3, #0]
   12e92:	687a      	ldr	r2, [r7, #4]
   12e94:	3274      	adds	r2, #116	; 0x74
   12e96:	4611      	mov	r1, r2
   12e98:	6878      	ldr	r0, [r7, #4]
   12e9a:	4798      	blx	r3
   12e9c:	4602      	mov	r2, r0
   12e9e:	687b      	ldr	r3, [r7, #4]
   12ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   12ea4:	687b      	ldr	r3, [r7, #4]
   12ea6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12eaa:	687b      	ldr	r3, [r7, #4]
   12eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   12eb0:	429a      	cmp	r2, r3
   12eb2:	d80e      	bhi.n	12ed2 <_ZN14Calendar_Class4InitEv+0xea>
   12eb4:	687b      	ldr	r3, [r7, #4]
   12eb6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12eba:	687b      	ldr	r3, [r7, #4]
   12ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   12ec0:	429a      	cmp	r2, r3
   12ec2:	d006      	beq.n	12ed2 <_ZN14Calendar_Class4InitEv+0xea>
   12ec4:	687b      	ldr	r3, [r7, #4]
   12ec6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12eca:	687b      	ldr	r3, [r7, #4]
   12ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   12ece:	429a      	cmp	r2, r3
   12ed0:	d106      	bne.n	12ee0 <_ZN14Calendar_Class4InitEv+0xf8>
	{
		SetDateTime(&compilationDateTime);
   12ed2:	687b      	ldr	r3, [r7, #4]
   12ed4:	3374      	adds	r3, #116	; 0x74
   12ed6:	4619      	mov	r1, r3
   12ed8:	6878      	ldr	r0, [r7, #4]
   12eda:	4b1f      	ldr	r3, [pc, #124]	; (12f58 <_ZN14Calendar_Class4InitEv+0x170>)
   12edc:	4798      	blx	r3
   12ede:	e022      	b.n	12f26 <_ZN14Calendar_Class4InitEv+0x13e>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   12ee0:	687b      	ldr	r3, [r7, #4]
   12ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12ee6:	687b      	ldr	r3, [r7, #4]
   12ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   12eec:	429a      	cmp	r2, r3
   12eee:	d206      	bcs.n	12efe <_ZN14Calendar_Class4InitEv+0x116>
		{
			SetDateTime(&compilationDateTime);
   12ef0:	687b      	ldr	r3, [r7, #4]
   12ef2:	3374      	adds	r3, #116	; 0x74
   12ef4:	4619      	mov	r1, r3
   12ef6:	6878      	ldr	r0, [r7, #4]
   12ef8:	4b17      	ldr	r3, [pc, #92]	; (12f58 <_ZN14Calendar_Class4InitEv+0x170>)
   12efa:	4798      	blx	r3
   12efc:	e013      	b.n	12f26 <_ZN14Calendar_Class4InitEv+0x13e>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   12efe:	687b      	ldr	r3, [r7, #4]
   12f00:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   12f08:	429a      	cmp	r2, r3
   12f0a:	d106      	bne.n	12f1a <_ZN14Calendar_Class4InitEv+0x132>
			{
				SetDateTime(&compilationDateTime);
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	3374      	adds	r3, #116	; 0x74
   12f10:	4619      	mov	r1, r3
   12f12:	6878      	ldr	r0, [r7, #4]
   12f14:	4b10      	ldr	r3, [pc, #64]	; (12f58 <_ZN14Calendar_Class4InitEv+0x170>)
   12f16:	4798      	blx	r3
   12f18:	e005      	b.n	12f26 <_ZN14Calendar_Class4InitEv+0x13e>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   12f1a:	687b      	ldr	r3, [r7, #4]
   12f1c:	3360      	adds	r3, #96	; 0x60
   12f1e:	4619      	mov	r1, r3
   12f20:	6878      	ldr	r0, [r7, #4]
   12f22:	4b0d      	ldr	r3, [pc, #52]	; (12f58 <_ZN14Calendar_Class4InitEv+0x170>)
   12f24:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   12f26:	687b      	ldr	r3, [r7, #4]
   12f28:	2200      	movs	r2, #0
   12f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   12f2e:	687b      	ldr	r3, [r7, #4]
   12f30:	4618      	mov	r0, r3
   12f32:	4b0a      	ldr	r3, [pc, #40]	; (12f5c <_ZN14Calendar_Class4InitEv+0x174>)
   12f34:	4798      	blx	r3
	
}
   12f36:	bf00      	nop
   12f38:	3708      	adds	r7, #8
   12f3a:	46bd      	mov	sp, r7
   12f3c:	bd80      	pop	{r7, pc}
   12f3e:	bf00      	nop
   12f40:	20004974 	.word	0x20004974
   12f44:	000043d5 	.word	0x000043d5
   12f48:	00011fdd 	.word	0x00011fdd
   12f4c:	00012f61 	.word	0x00012f61
   12f50:	00013781 	.word	0x00013781
   12f54:	00013007 	.word	0x00013007
   12f58:	000131fd 	.word	0x000131fd
   12f5c:	00013711 	.word	0x00013711

00012f60 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   12f60:	b480      	push	{r7}
   12f62:	b083      	sub	sp, #12
   12f64:	af00      	add	r7, sp, #0
   12f66:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   12f68:	687b      	ldr	r3, [r7, #4]
   12f6a:	f640 0202 	movw	r2, #2050	; 0x802
   12f6e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	220c      	movs	r2, #12
   12f76:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   12f7a:	687b      	ldr	r3, [r7, #4]
   12f7c:	221f      	movs	r2, #31
   12f7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	220c      	movs	r2, #12
   12f86:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   12f8a:	687b      	ldr	r3, [r7, #4]
   12f8c:	223b      	movs	r2, #59	; 0x3b
   12f8e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   12f92:	687b      	ldr	r3, [r7, #4]
   12f94:	223b      	movs	r2, #59	; 0x3b
   12f96:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   12f9a:	687b      	ldr	r3, [r7, #4]
   12f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12fa0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   12fa4:	687b      	ldr	r3, [r7, #4]
   12fa6:	22ff      	movs	r2, #255	; 0xff
   12fa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   12fac:	687b      	ldr	r3, [r7, #4]
   12fae:	22ff      	movs	r2, #255	; 0xff
   12fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   12fb4:	687b      	ldr	r3, [r7, #4]
   12fb6:	22ff      	movs	r2, #255	; 0xff
   12fb8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   12fbc:	687b      	ldr	r3, [r7, #4]
   12fbe:	22ff      	movs	r2, #255	; 0xff
   12fc0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	22ff      	movs	r2, #255	; 0xff
   12fc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   12fcc:	687b      	ldr	r3, [r7, #4]
   12fce:	2200      	movs	r2, #0
   12fd0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   12fd4:	687b      	ldr	r3, [r7, #4]
   12fd6:	2200      	movs	r2, #0
   12fd8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   12fdc:	687b      	ldr	r3, [r7, #4]
   12fde:	2200      	movs	r2, #0
   12fe0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   12fe4:	687b      	ldr	r3, [r7, #4]
   12fe6:	2200      	movs	r2, #0
   12fe8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   12fec:	687b      	ldr	r3, [r7, #4]
   12fee:	2200      	movs	r2, #0
   12ff0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	2200      	movs	r2, #0
   12ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   12ffc:	bf00      	nop
   12ffe:	370c      	adds	r7, #12
   13000:	46bd      	mov	sp, r7
   13002:	bc80      	pop	{r7}
   13004:	4770      	bx	lr

00013006 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   13006:	b480      	push	{r7}
   13008:	b083      	sub	sp, #12
   1300a:	af00      	add	r7, sp, #0
   1300c:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   1300e:	2332      	movs	r3, #50	; 0x32
   13010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13014:	4613      	mov	r3, r2
   13016:	009b      	lsls	r3, r3, #2
   13018:	4413      	add	r3, r2
   1301a:	005b      	lsls	r3, r3, #1
   1301c:	461a      	mov	r2, r3
   1301e:	2330      	movs	r3, #48	; 0x30
   13020:	3b30      	subs	r3, #48	; 0x30
   13022:	441a      	add	r2, r3
   13024:	4613      	mov	r3, r2
   13026:	009b      	lsls	r3, r3, #2
   13028:	4413      	add	r3, r2
   1302a:	005b      	lsls	r3, r3, #1
   1302c:	461a      	mov	r2, r3
   1302e:	2332      	movs	r3, #50	; 0x32
   13030:	3b30      	subs	r3, #48	; 0x30
   13032:	4413      	add	r3, r2
   13034:	b29b      	uxth	r3, r3
   13036:	461a      	mov	r2, r3
   13038:	0092      	lsls	r2, r2, #2
   1303a:	4413      	add	r3, r2
   1303c:	005b      	lsls	r3, r3, #1
   1303e:	b29a      	uxth	r2, r3
   13040:	2330      	movs	r3, #48	; 0x30
   13042:	b29b      	uxth	r3, r3
   13044:	4413      	add	r3, r2
   13046:	b29b      	uxth	r3, r3
   13048:	3b30      	subs	r3, #48	; 0x30
   1304a:	b29a      	uxth	r2, r3
   1304c:	687b      	ldr	r3, [r7, #4]
   1304e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   13052:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13054:	2b6e      	cmp	r3, #110	; 0x6e
   13056:	d106      	bne.n	13066 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   13058:	2365      	movs	r3, #101	; 0x65
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1305a:	2b61      	cmp	r3, #97	; 0x61
   1305c:	d101      	bne.n	13062 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   1305e:	2301      	movs	r3, #1
   13060:	e02f      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   13062:	2306      	movs	r3, #6
   13064:	e02d      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   13066:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13068:	2b62      	cmp	r3, #98	; 0x62
   1306a:	d029      	beq.n	130c0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   1306c:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1306e:	2b72      	cmp	r3, #114	; 0x72
   13070:	d106      	bne.n	13080 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   13072:	2353      	movs	r3, #83	; 0x53
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13074:	2b4d      	cmp	r3, #77	; 0x4d
   13076:	d101      	bne.n	1307c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   13078:	2303      	movs	r3, #3
   1307a:	e022      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1307c:	2304      	movs	r3, #4
   1307e:	e020      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   13080:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13082:	2b79      	cmp	r3, #121	; 0x79
   13084:	d01a      	beq.n	130bc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   13086:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13088:	2b6c      	cmp	r3, #108	; 0x6c
   1308a:	d015      	beq.n	130b8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   1308c:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1308e:	2b67      	cmp	r3, #103	; 0x67
   13090:	d010      	beq.n	130b4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   13092:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   13094:	2b70      	cmp	r3, #112	; 0x70
   13096:	d00b      	beq.n	130b0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   13098:	2370      	movs	r3, #112	; 0x70
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1309a:	2b74      	cmp	r3, #116	; 0x74
   1309c:	d006      	beq.n	130ac <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   1309e:	2370      	movs	r3, #112	; 0x70
   130a0:	2b76      	cmp	r3, #118	; 0x76
   130a2:	d101      	bne.n	130a8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   130a4:	230b      	movs	r3, #11
   130a6:	e00c      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130a8:	230c      	movs	r3, #12
   130aa:	e00a      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130ac:	230a      	movs	r3, #10
   130ae:	e008      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130b0:	2309      	movs	r3, #9
   130b2:	e006      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130b4:	2308      	movs	r3, #8
   130b6:	e004      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130b8:	2307      	movs	r3, #7
   130ba:	e002      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130bc:	2305      	movs	r3, #5
   130be:	e000      	b.n	130c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   130c0:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   130c2:	687a      	ldr	r2, [r7, #4]
   130c4:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   130c8:	2332      	movs	r3, #50	; 0x32
   130ca:	2b20      	cmp	r3, #32
   130cc:	d008      	beq.n	130e0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   130ce:	2332      	movs	r3, #50	; 0x32
   130d0:	3b30      	subs	r3, #48	; 0x30
   130d2:	b2db      	uxtb	r3, r3
   130d4:	461a      	mov	r2, r3
   130d6:	0092      	lsls	r2, r2, #2
   130d8:	4413      	add	r3, r2
   130da:	005b      	lsls	r3, r3, #1
   130dc:	b2db      	uxtb	r3, r3
   130de:	e000      	b.n	130e2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   130e0:	2300      	movs	r3, #0
   130e2:	2233      	movs	r2, #51	; 0x33
   130e4:	4413      	add	r3, r2
   130e6:	b2db      	uxtb	r3, r3
   130e8:	3b30      	subs	r3, #48	; 0x30
   130ea:	b2da      	uxtb	r2, r3
   130ec:	687b      	ldr	r3, [r7, #4]
   130ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   130f2:	2331      	movs	r3, #49	; 0x31
   130f4:	3b30      	subs	r3, #48	; 0x30
   130f6:	b2db      	uxtb	r3, r3
   130f8:	461a      	mov	r2, r3
   130fa:	0092      	lsls	r2, r2, #2
   130fc:	4413      	add	r3, r2
   130fe:	005b      	lsls	r3, r3, #1
   13100:	b2db      	uxtb	r3, r3
   13102:	2233      	movs	r2, #51	; 0x33
   13104:	4413      	add	r3, r2
   13106:	b2db      	uxtb	r3, r3
   13108:	3b30      	subs	r3, #48	; 0x30
   1310a:	b2da      	uxtb	r2, r3
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   13112:	2333      	movs	r3, #51	; 0x33
   13114:	3b30      	subs	r3, #48	; 0x30
   13116:	b2db      	uxtb	r3, r3
   13118:	461a      	mov	r2, r3
   1311a:	0092      	lsls	r2, r2, #2
   1311c:	4413      	add	r3, r2
   1311e:	005b      	lsls	r3, r3, #1
   13120:	b2db      	uxtb	r3, r3
   13122:	2238      	movs	r2, #56	; 0x38
   13124:	4413      	add	r3, r2
   13126:	b2db      	uxtb	r3, r3
   13128:	3b30      	subs	r3, #48	; 0x30
   1312a:	b2da      	uxtb	r2, r3
   1312c:	687b      	ldr	r3, [r7, #4]
   1312e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   13132:	2332      	movs	r3, #50	; 0x32
   13134:	3b30      	subs	r3, #48	; 0x30
   13136:	b2db      	uxtb	r3, r3
   13138:	461a      	mov	r2, r3
   1313a:	0092      	lsls	r2, r2, #2
   1313c:	4413      	add	r3, r2
   1313e:	005b      	lsls	r3, r3, #1
   13140:	b2db      	uxtb	r3, r3
   13142:	2237      	movs	r2, #55	; 0x37
   13144:	4413      	add	r3, r2
   13146:	b2db      	uxtb	r3, r3
   13148:	3b30      	subs	r3, #48	; 0x30
   1314a:	b2da      	uxtb	r2, r3
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   13152:	bf00      	nop
   13154:	370c      	adds	r7, #12
   13156:	46bd      	mov	sp, r7
   13158:	bc80      	pop	{r7}
   1315a:	4770      	bx	lr

0001315c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1315c:	b580      	push	{r7, lr}
   1315e:	b082      	sub	sp, #8
   13160:	af00      	add	r7, sp, #0
   13162:	6078      	str	r0, [r7, #4]
   13164:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   13166:	687b      	ldr	r3, [r7, #4]
   13168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1316c:	6839      	ldr	r1, [r7, #0]
   1316e:	4618      	mov	r0, r3
   13170:	4b03      	ldr	r3, [pc, #12]	; (13180 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   13172:	4798      	blx	r3
   13174:	4603      	mov	r3, r0
}
   13176:	4618      	mov	r0, r3
   13178:	3708      	adds	r7, #8
   1317a:	46bd      	mov	sp, r7
   1317c:	bd80      	pop	{r7, pc}
   1317e:	bf00      	nop
   13180:	00004525 	.word	0x00004525

00013184 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   13184:	b480      	push	{r7}
   13186:	b083      	sub	sp, #12
   13188:	af00      	add	r7, sp, #0
   1318a:	6078      	str	r0, [r7, #4]
   1318c:	460b      	mov	r3, r1
   1318e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   13190:	887b      	ldrh	r3, [r7, #2]
   13192:	f003 0303 	and.w	r3, r3, #3
   13196:	2b00      	cmp	r3, #0
   13198:	d001      	beq.n	1319e <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1319a:	2300      	movs	r3, #0
   1319c:	e000      	b.n	131a0 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   1319e:	2301      	movs	r3, #1
	}
}
   131a0:	4618      	mov	r0, r3
   131a2:	370c      	adds	r7, #12
   131a4:	46bd      	mov	sp, r7
   131a6:	bc80      	pop	{r7}
   131a8:	4770      	bx	lr
	...

000131ac <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   131ac:	b580      	push	{r7, lr}
   131ae:	b082      	sub	sp, #8
   131b0:	af00      	add	r7, sp, #0
   131b2:	6078      	str	r0, [r7, #4]
   131b4:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   131b6:	687b      	ldr	r3, [r7, #4]
   131b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   131bc:	6839      	ldr	r1, [r7, #0]
   131be:	4618      	mov	r0, r3
   131c0:	4b03      	ldr	r3, [pc, #12]	; (131d0 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   131c2:	4798      	blx	r3
   131c4:	4603      	mov	r3, r0
}
   131c6:	4618      	mov	r0, r3
   131c8:	3708      	adds	r7, #8
   131ca:	46bd      	mov	sp, r7
   131cc:	bd80      	pop	{r7, pc}
   131ce:	bf00      	nop
   131d0:	00004415 	.word	0x00004415

000131d4 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   131d4:	b580      	push	{r7, lr}
   131d6:	b082      	sub	sp, #8
   131d8:	af00      	add	r7, sp, #0
   131da:	6078      	str	r0, [r7, #4]
   131dc:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   131de:	687b      	ldr	r3, [r7, #4]
   131e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   131e4:	6839      	ldr	r1, [r7, #0]
   131e6:	4618      	mov	r0, r3
   131e8:	4b03      	ldr	r3, [pc, #12]	; (131f8 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   131ea:	4798      	blx	r3
   131ec:	4603      	mov	r3, r0
}
   131ee:	4618      	mov	r0, r3
   131f0:	3708      	adds	r7, #8
   131f2:	46bd      	mov	sp, r7
   131f4:	bd80      	pop	{r7, pc}
   131f6:	bf00      	nop
   131f8:	0000449d 	.word	0x0000449d

000131fc <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   131fc:	b580      	push	{r7, lr}
   131fe:	b084      	sub	sp, #16
   13200:	af00      	add	r7, sp, #0
   13202:	6078      	str	r0, [r7, #4]
   13204:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   13206:	683a      	ldr	r2, [r7, #0]
   13208:	f107 030c 	add.w	r3, r7, #12
   1320c:	3204      	adds	r2, #4
   1320e:	6810      	ldr	r0, [r2, #0]
   13210:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   13212:	f107 030c 	add.w	r3, r7, #12
   13216:	4619      	mov	r1, r3
   13218:	6878      	ldr	r0, [r7, #4]
   1321a:	4b0a      	ldr	r3, [pc, #40]	; (13244 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   1321c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   1321e:	683a      	ldr	r2, [r7, #0]
   13220:	f107 0308 	add.w	r3, r7, #8
   13224:	8811      	ldrh	r1, [r2, #0]
   13226:	7892      	ldrb	r2, [r2, #2]
   13228:	8019      	strh	r1, [r3, #0]
   1322a:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   1322c:	f107 0308 	add.w	r3, r7, #8
   13230:	4619      	mov	r1, r3
   13232:	6878      	ldr	r0, [r7, #4]
   13234:	4b04      	ldr	r3, [pc, #16]	; (13248 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   13236:	4798      	blx	r3
   13238:	4603      	mov	r3, r0
			
}
   1323a:	4618      	mov	r0, r3
   1323c:	3710      	adds	r7, #16
   1323e:	46bd      	mov	sp, r7
   13240:	bd80      	pop	{r7, pc}
   13242:	bf00      	nop
   13244:	000131d5 	.word	0x000131d5
   13248:	000131ad 	.word	0x000131ad

0001324c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1324c:	b580      	push	{r7, lr}
   1324e:	b086      	sub	sp, #24
   13250:	af00      	add	r7, sp, #0
   13252:	6078      	str	r0, [r7, #4]
   13254:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   13256:	2300      	movs	r3, #0
   13258:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1325a:	2300      	movs	r3, #0
   1325c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1325e:	683b      	ldr	r3, [r7, #0]
   13260:	88db      	ldrh	r3, [r3, #6]
   13262:	b2da      	uxtb	r2, r3
   13264:	687b      	ldr	r3, [r7, #4]
   13266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1326a:	699b      	ldr	r3, [r3, #24]
   1326c:	b2db      	uxtb	r3, r3
   1326e:	1ad3      	subs	r3, r2, r3
   13270:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   13272:	683b      	ldr	r3, [r7, #0]
   13274:	795b      	ldrb	r3, [r3, #5]
   13276:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   13278:	683b      	ldr	r3, [r7, #0]
   1327a:	791b      	ldrb	r3, [r3, #4]
   1327c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   1327e:	683b      	ldr	r3, [r7, #0]
   13280:	789b      	ldrb	r3, [r3, #2]
   13282:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   13284:	683b      	ldr	r3, [r7, #0]
   13286:	785b      	ldrb	r3, [r3, #1]
   13288:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	781b      	ldrb	r3, [r3, #0]
   1328e:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   13290:	2300      	movs	r3, #0
   13292:	613b      	str	r3, [r7, #16]
   13294:	7bfa      	ldrb	r2, [r7, #15]
   13296:	693b      	ldr	r3, [r7, #16]
   13298:	429a      	cmp	r2, r3
   1329a:	d91e      	bls.n	132da <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   1329c:	687b      	ldr	r3, [r7, #4]
   1329e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   132a2:	699b      	ldr	r3, [r3, #24]
   132a4:	b29a      	uxth	r2, r3
   132a6:	693b      	ldr	r3, [r7, #16]
   132a8:	b29b      	uxth	r3, r3
   132aa:	4413      	add	r3, r2
   132ac:	b29b      	uxth	r3, r3
   132ae:	4619      	mov	r1, r3
   132b0:	6878      	ldr	r0, [r7, #4]
   132b2:	4b27      	ldr	r3, [pc, #156]	; (13350 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   132b4:	4798      	blx	r3
   132b6:	4603      	mov	r3, r0
   132b8:	2b00      	cmp	r3, #0
   132ba:	d006      	beq.n	132ca <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   132bc:	697b      	ldr	r3, [r7, #20]
   132be:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   132c2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   132c6:	617b      	str	r3, [r7, #20]
   132c8:	e003      	b.n	132d2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   132ca:	697a      	ldr	r2, [r7, #20]
   132cc:	4b21      	ldr	r3, [pc, #132]	; (13354 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   132ce:	4413      	add	r3, r2
   132d0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   132d2:	693b      	ldr	r3, [r7, #16]
   132d4:	3301      	adds	r3, #1
   132d6:	613b      	str	r3, [r7, #16]
   132d8:	e7dc      	b.n	13294 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   132da:	2301      	movs	r3, #1
   132dc:	613b      	str	r3, [r7, #16]
   132de:	7bba      	ldrb	r2, [r7, #14]
   132e0:	693b      	ldr	r3, [r7, #16]
   132e2:	429a      	cmp	r2, r3
   132e4:	d910      	bls.n	13308 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   132e6:	683b      	ldr	r3, [r7, #0]
   132e8:	88db      	ldrh	r3, [r3, #6]
   132ea:	4619      	mov	r1, r3
   132ec:	693b      	ldr	r3, [r7, #16]
   132ee:	b2db      	uxtb	r3, r3
   132f0:	461a      	mov	r2, r3
   132f2:	6878      	ldr	r0, [r7, #4]
   132f4:	4b18      	ldr	r3, [pc, #96]	; (13358 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   132f6:	4798      	blx	r3
   132f8:	4602      	mov	r2, r0
   132fa:	697b      	ldr	r3, [r7, #20]
   132fc:	4413      	add	r3, r2
   132fe:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   13300:	693b      	ldr	r3, [r7, #16]
   13302:	3301      	adds	r3, #1
   13304:	613b      	str	r3, [r7, #16]
   13306:	e7ea      	b.n	132de <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   13308:	7b7b      	ldrb	r3, [r7, #13]
   1330a:	3b01      	subs	r3, #1
   1330c:	4a13      	ldr	r2, [pc, #76]	; (1335c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1330e:	fb02 f303 	mul.w	r3, r2, r3
   13312:	461a      	mov	r2, r3
   13314:	697b      	ldr	r3, [r7, #20]
   13316:	4413      	add	r3, r2
   13318:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1331a:	7b3b      	ldrb	r3, [r7, #12]
   1331c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   13320:	fb02 f303 	mul.w	r3, r2, r3
   13324:	461a      	mov	r2, r3
   13326:	697b      	ldr	r3, [r7, #20]
   13328:	4413      	add	r3, r2
   1332a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1332c:	7afa      	ldrb	r2, [r7, #11]
   1332e:	4613      	mov	r3, r2
   13330:	011b      	lsls	r3, r3, #4
   13332:	1a9b      	subs	r3, r3, r2
   13334:	009b      	lsls	r3, r3, #2
   13336:	461a      	mov	r2, r3
   13338:	697b      	ldr	r3, [r7, #20]
   1333a:	4413      	add	r3, r2
   1333c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1333e:	7abb      	ldrb	r3, [r7, #10]
   13340:	697a      	ldr	r2, [r7, #20]
   13342:	4413      	add	r3, r2
   13344:	617b      	str	r3, [r7, #20]

	return tmp;
   13346:	697b      	ldr	r3, [r7, #20]
}
   13348:	4618      	mov	r0, r3
   1334a:	3718      	adds	r7, #24
   1334c:	46bd      	mov	sp, r7
   1334e:	bd80      	pop	{r7, pc}
   13350:	00013185 	.word	0x00013185
   13354:	01e13380 	.word	0x01e13380
   13358:	00013361 	.word	0x00013361
   1335c:	00015180 	.word	0x00015180

00013360 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   13360:	b580      	push	{r7, lr}
   13362:	b086      	sub	sp, #24
   13364:	af00      	add	r7, sp, #0
   13366:	60f8      	str	r0, [r7, #12]
   13368:	60b9      	str	r1, [r7, #8]
   1336a:	4613      	mov	r3, r2
   1336c:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   1336e:	2300      	movs	r3, #0
   13370:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   13372:	68bb      	ldr	r3, [r7, #8]
   13374:	b29b      	uxth	r3, r3
   13376:	4619      	mov	r1, r3
   13378:	68f8      	ldr	r0, [r7, #12]
   1337a:	4b2f      	ldr	r3, [pc, #188]	; (13438 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   1337c:	4798      	blx	r3
   1337e:	4603      	mov	r3, r0
   13380:	2b00      	cmp	r3, #0
   13382:	d028      	beq.n	133d6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   13384:	79fb      	ldrb	r3, [r7, #7]
   13386:	3b01      	subs	r3, #1
   13388:	2b0b      	cmp	r3, #11
   1338a:	d84c      	bhi.n	13426 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   1338c:	a201      	add	r2, pc, #4	; (adr r2, 13394 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   1338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13392:	bf00      	nop
   13394:	000133c5 	.word	0x000133c5
   13398:	000133cb 	.word	0x000133cb
   1339c:	000133c5 	.word	0x000133c5
   133a0:	000133d1 	.word	0x000133d1
   133a4:	000133c5 	.word	0x000133c5
   133a8:	000133d1 	.word	0x000133d1
   133ac:	000133c5 	.word	0x000133c5
   133b0:	000133c5 	.word	0x000133c5
   133b4:	000133d1 	.word	0x000133d1
   133b8:	000133c5 	.word	0x000133c5
   133bc:	000133d1 	.word	0x000133d1
   133c0:	000133c5 	.word	0x000133c5
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   133c4:	4b1d      	ldr	r3, [pc, #116]	; (1343c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   133c6:	617b      	str	r3, [r7, #20]
			break;
   133c8:	e030      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   133ca:	4b1d      	ldr	r3, [pc, #116]	; (13440 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   133cc:	617b      	str	r3, [r7, #20]
			break;
   133ce:	e02d      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   133d0:	4b1c      	ldr	r3, [pc, #112]	; (13444 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   133d2:	617b      	str	r3, [r7, #20]
			break;
   133d4:	e02a      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   133d6:	79fb      	ldrb	r3, [r7, #7]
   133d8:	3b01      	subs	r3, #1
   133da:	2b0b      	cmp	r3, #11
   133dc:	d825      	bhi.n	1342a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   133de:	a201      	add	r2, pc, #4	; (adr r2, 133e4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   133e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   133e4:	00013415 	.word	0x00013415
   133e8:	0001341b 	.word	0x0001341b
   133ec:	00013415 	.word	0x00013415
   133f0:	00013421 	.word	0x00013421
   133f4:	00013415 	.word	0x00013415
   133f8:	00013421 	.word	0x00013421
   133fc:	00013415 	.word	0x00013415
   13400:	00013415 	.word	0x00013415
   13404:	00013421 	.word	0x00013421
   13408:	00013415 	.word	0x00013415
   1340c:	00013421 	.word	0x00013421
   13410:	00013415 	.word	0x00013415
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   13414:	4b09      	ldr	r3, [pc, #36]	; (1343c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   13416:	617b      	str	r3, [r7, #20]
			break;
   13418:	e008      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1341a:	4b0b      	ldr	r3, [pc, #44]	; (13448 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1341c:	617b      	str	r3, [r7, #20]
			break;
   1341e:	e005      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   13420:	4b08      	ldr	r3, [pc, #32]	; (13444 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   13422:	617b      	str	r3, [r7, #20]
			break;
   13424:	e002      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   13426:	bf00      	nop
   13428:	e000      	b.n	1342c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1342a:	bf00      	nop
		}
	}

	return sec_in_month;
   1342c:	697b      	ldr	r3, [r7, #20]
}
   1342e:	4618      	mov	r0, r3
   13430:	3718      	adds	r7, #24
   13432:	46bd      	mov	sp, r7
   13434:	bd80      	pop	{r7, pc}
   13436:	bf00      	nop
   13438:	00013185 	.word	0x00013185
   1343c:	0028de80 	.word	0x0028de80
   13440:	00263b80 	.word	0x00263b80
   13444:	00278d00 	.word	0x00278d00
   13448:	0024ea00 	.word	0x0024ea00

0001344c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
   1344c:	b580      	push	{r7, lr}
   1344e:	b082      	sub	sp, #8
   13450:	af00      	add	r7, sp, #0
   13452:	6078      	str	r0, [r7, #4]
   13454:	6039      	str	r1, [r7, #0]
   13456:	687b      	ldr	r3, [r7, #4]
   13458:	2b01      	cmp	r3, #1
   1345a:	d10d      	bne.n	13478 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1345c:	683b      	ldr	r3, [r7, #0]
   1345e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13462:	4293      	cmp	r3, r2
   13464:	d108      	bne.n	13478 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13466:	4906      	ldr	r1, [pc, #24]	; (13480 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13468:	4806      	ldr	r0, [pc, #24]	; (13484 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1346a:	4b07      	ldr	r3, [pc, #28]	; (13488 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1346c:	4798      	blx	r3
   1346e:	4a07      	ldr	r2, [pc, #28]	; (1348c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13470:	4907      	ldr	r1, [pc, #28]	; (13490 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13472:	4804      	ldr	r0, [pc, #16]	; (13484 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13474:	4b07      	ldr	r3, [pc, #28]	; (13494 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13476:	4798      	blx	r3
   13478:	bf00      	nop
   1347a:	3708      	adds	r7, #8
   1347c:	46bd      	mov	sp, r7
   1347e:	bd80      	pop	{r7, pc}
   13480:	20005068 	.word	0x20005068
   13484:	20004c00 	.word	0x20004c00
   13488:	00012d85 	.word	0x00012d85
   1348c:	20000000 	.word	0x20000000
   13490:	00012dc1 	.word	0x00012dc1
   13494:	00014919 	.word	0x00014919

00013498 <_GLOBAL__sub_I_ptrCalendarClass>:
   13498:	b580      	push	{r7, lr}
   1349a:	af00      	add	r7, sp, #0
   1349c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   134a0:	2001      	movs	r0, #1
   134a2:	4b01      	ldr	r3, [pc, #4]	; (134a8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   134a4:	4798      	blx	r3
   134a6:	bd80      	pop	{r7, pc}
   134a8:	0001344d 	.word	0x0001344d

000134ac <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   134ac:	b480      	push	{r7}
   134ae:	b083      	sub	sp, #12
   134b0:	af00      	add	r7, sp, #0
   134b2:	6078      	str	r0, [r7, #4]
   134b4:	4a04      	ldr	r2, [pc, #16]	; (134c8 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   134b6:	687b      	ldr	r3, [r7, #4]
   134b8:	601a      	str	r2, [r3, #0]
{
} //~D
   134ba:	687b      	ldr	r3, [r7, #4]
   134bc:	4618      	mov	r0, r3
   134be:	370c      	adds	r7, #12
   134c0:	46bd      	mov	sp, r7
   134c2:	bc80      	pop	{r7}
   134c4:	4770      	bx	lr
   134c6:	bf00      	nop
   134c8:	0001854c 	.word	0x0001854c

000134cc <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   134cc:	b480      	push	{r7}
   134ce:	b083      	sub	sp, #12
   134d0:	af00      	add	r7, sp, #0
   134d2:	6078      	str	r0, [r7, #4]
   134d4:	4a04      	ldr	r2, [pc, #16]	; (134e8 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   134d6:	687b      	ldr	r3, [r7, #4]
   134d8:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	4618      	mov	r0, r3
   134de:	370c      	adds	r7, #12
   134e0:	46bd      	mov	sp, r7
   134e2:	bc80      	pop	{r7}
   134e4:	4770      	bx	lr
   134e6:	bf00      	nop
   134e8:	0001854c 	.word	0x0001854c

000134ec <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   134ec:	b590      	push	{r4, r7, lr}
   134ee:	b085      	sub	sp, #20
   134f0:	af00      	add	r7, sp, #0
   134f2:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	681b      	ldr	r3, [r3, #0]
   134f8:	681b      	ldr	r3, [r3, #0]
   134fa:	687a      	ldr	r2, [r7, #4]
   134fc:	3226      	adds	r2, #38	; 0x26
   134fe:	4611      	mov	r1, r2
   13500:	6878      	ldr	r0, [r7, #4]
   13502:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   13504:	687b      	ldr	r3, [r7, #4]
   13506:	681b      	ldr	r3, [r3, #0]
   13508:	3304      	adds	r3, #4
   1350a:	681b      	ldr	r3, [r3, #0]
   1350c:	687a      	ldr	r2, [r7, #4]
   1350e:	3226      	adds	r2, #38	; 0x26
   13510:	4611      	mov	r1, r2
   13512:	6878      	ldr	r0, [r7, #4]
   13514:	4798      	blx	r3
   13516:	4602      	mov	r2, r0
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   1351c:	6878      	ldr	r0, [r7, #4]
   1351e:	4b1a      	ldr	r3, [pc, #104]	; (13588 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   13520:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   13522:	687b      	ldr	r3, [r7, #4]
   13524:	681b      	ldr	r3, [r3, #0]
   13526:	3304      	adds	r3, #4
   13528:	681b      	ldr	r3, [r3, #0]
   1352a:	687a      	ldr	r2, [r7, #4]
   1352c:	322e      	adds	r2, #46	; 0x2e
   1352e:	4611      	mov	r1, r2
   13530:	6878      	ldr	r0, [r7, #4]
   13532:	4798      	blx	r3
   13534:	4602      	mov	r2, r0
   13536:	687b      	ldr	r3, [r7, #4]
   13538:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   1353a:	687b      	ldr	r3, [r7, #4]
   1353c:	68da      	ldr	r2, [r3, #12]
   1353e:	4b13      	ldr	r3, [pc, #76]	; (1358c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   13540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   13542:	429a      	cmp	r2, r3
   13544:	d103      	bne.n	1354e <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   13546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1354a:	60fb      	str	r3, [r7, #12]
   1354c:	e016      	b.n	1357c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   1354e:	687b      	ldr	r3, [r7, #4]
   13550:	689b      	ldr	r3, [r3, #8]
   13552:	461a      	mov	r2, r3
   13554:	687b      	ldr	r3, [r7, #4]
   13556:	68db      	ldr	r3, [r3, #12]
   13558:	4619      	mov	r1, r3
   1355a:	4610      	mov	r0, r2
   1355c:	4b0c      	ldr	r3, [pc, #48]	; (13590 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   1355e:	4798      	blx	r3
   13560:	4603      	mov	r3, r0
   13562:	460c      	mov	r4, r1
   13564:	687a      	ldr	r2, [r7, #4]
   13566:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   1356a:	687b      	ldr	r3, [r7, #4]
   1356c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   13570:	4a08      	ldr	r2, [pc, #32]	; (13594 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   13572:	4618      	mov	r0, r3
   13574:	4621      	mov	r1, r4
   13576:	4790      	blx	r2
   13578:	4603      	mov	r3, r0
   1357a:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   1357c:	68fb      	ldr	r3, [r7, #12]
}
   1357e:	4618      	mov	r0, r3
   13580:	3714      	adds	r7, #20
   13582:	46bd      	mov	sp, r7
   13584:	bd90      	pop	{r4, r7, pc}
   13586:	bf00      	nop
   13588:	00013781 	.word	0x00013781
   1358c:	20004c00 	.word	0x20004c00
   13590:	000164a9 	.word	0x000164a9
   13594:	0001645d 	.word	0x0001645d

00013598 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   13598:	b5b0      	push	{r4, r5, r7, lr}
   1359a:	b082      	sub	sp, #8
   1359c:	af00      	add	r7, sp, #0
   1359e:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   135a0:	4b07      	ldr	r3, [pc, #28]	; (135c0 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   135a2:	6878      	ldr	r0, [r7, #4]
   135a4:	4798      	blx	r3
   135a6:	4602      	mov	r2, r0
   135a8:	460b      	mov	r3, r1
   135aa:	4614      	mov	r4, r2
   135ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   135b0:	4623      	mov	r3, r4
   135b2:	462c      	mov	r4, r5
   135b4:	4618      	mov	r0, r3
   135b6:	4621      	mov	r1, r4
   135b8:	3708      	adds	r7, #8
   135ba:	46bd      	mov	sp, r7
   135bc:	bdb0      	pop	{r4, r5, r7, pc}
   135be:	bf00      	nop
   135c0:	00015e31 	.word	0x00015e31

000135c4 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   135c4:	b5b0      	push	{r4, r5, r7, lr}
   135c6:	b082      	sub	sp, #8
   135c8:	af00      	add	r7, sp, #0
   135ca:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   135cc:	6878      	ldr	r0, [r7, #4]
   135ce:	4b12      	ldr	r3, [pc, #72]	; (13618 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   135d0:	4798      	blx	r3
   135d2:	4603      	mov	r3, r0
   135d4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   135d8:	4618      	mov	r0, r3
   135da:	4b10      	ldr	r3, [pc, #64]	; (1361c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   135dc:	4798      	blx	r3
   135de:	2301      	movs	r3, #1
   135e0:	461d      	mov	r5, r3
   135e2:	4c0f      	ldr	r4, [pc, #60]	; (13620 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   135e4:	f04f 0200 	mov.w	r2, #0
   135e8:	4b0e      	ldr	r3, [pc, #56]	; (13624 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   135ea:	47a0      	blx	r4
   135ec:	4603      	mov	r3, r0
   135ee:	2b00      	cmp	r3, #0
   135f0:	d101      	bne.n	135f6 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   135f2:	2300      	movs	r3, #0
   135f4:	461d      	mov	r5, r3
   135f6:	b2eb      	uxtb	r3, r5
   135f8:	2b00      	cmp	r3, #0
   135fa:	d003      	beq.n	13604 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   135fc:	687b      	ldr	r3, [r7, #4]
   135fe:	2201      	movs	r2, #1
   13600:	711a      	strb	r2, [r3, #4]
   13602:	e002      	b.n	1360a <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   13604:	687b      	ldr	r3, [r7, #4]
   13606:	2200      	movs	r2, #0
   13608:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   1360a:	687b      	ldr	r3, [r7, #4]
   1360c:	791b      	ldrb	r3, [r3, #4]
   1360e:	b2db      	uxtb	r3, r3
}
   13610:	4618      	mov	r0, r3
   13612:	3708      	adds	r7, #8
   13614:	46bd      	mov	sp, r7
   13616:	bdb0      	pop	{r4, r5, r7, pc}
   13618:	000134ed 	.word	0x000134ed
   1361c:	00013599 	.word	0x00013599
   13620:	0001641d 	.word	0x0001641d
   13624:	40490000 	.word	0x40490000

00013628 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   13628:	b590      	push	{r4, r7, lr}
   1362a:	b085      	sub	sp, #20
   1362c:	af00      	add	r7, sp, #0
   1362e:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   13630:	687b      	ldr	r3, [r7, #4]
   13632:	f103 0122 	add.w	r1, r3, #34	; 0x22
   13636:	687b      	ldr	r3, [r7, #4]
   13638:	8c1a      	ldrh	r2, [r3, #32]
   1363a:	2301      	movs	r3, #1
   1363c:	480c      	ldr	r0, [pc, #48]	; (13670 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1363e:	4c0d      	ldr	r4, [pc, #52]	; (13674 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   13640:	47a0      	blx	r4
   13642:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   13644:	6878      	ldr	r0, [r7, #4]
   13646:	4b0c      	ldr	r3, [pc, #48]	; (13678 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   13648:	4798      	blx	r3
   1364a:	4603      	mov	r3, r0
   1364c:	b29a      	uxth	r2, r3
   1364e:	687b      	ldr	r3, [r7, #4]
   13650:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   13652:	687b      	ldr	r3, [r7, #4]
   13654:	f103 0122 	add.w	r1, r3, #34	; 0x22
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	8c1a      	ldrh	r2, [r3, #32]
   1365c:	2301      	movs	r3, #1
   1365e:	4804      	ldr	r0, [pc, #16]	; (13670 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   13660:	4c06      	ldr	r4, [pc, #24]	; (1367c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   13662:	47a0      	blx	r4
   13664:	60f8      	str	r0, [r7, #12]
	return r;
   13666:	68fb      	ldr	r3, [r7, #12]
}
   13668:	4618      	mov	r0, r3
   1366a:	3714      	adds	r7, #20
   1366c:	46bd      	mov	sp, r7
   1366e:	bd90      	pop	{r4, r7, pc}
   13670:	20004974 	.word	0x20004974
   13674:	00012245 	.word	0x00012245
   13678:	00013681 	.word	0x00013681
   1367c:	00012141 	.word	0x00012141

00013680 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   13680:	b480      	push	{r7}
   13682:	b083      	sub	sp, #12
   13684:	af00      	add	r7, sp, #0
   13686:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   13688:	687b      	ldr	r3, [r7, #4]
   1368a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1368c:	b2db      	uxtb	r3, r3
   1368e:	3301      	adds	r3, #1
   13690:	b2db      	uxtb	r3, r3
   13692:	f003 030f 	and.w	r3, r3, #15
   13696:	b2db      	uxtb	r3, r3
 }
   13698:	4618      	mov	r0, r3
   1369a:	370c      	adds	r7, #12
   1369c:	46bd      	mov	sp, r7
   1369e:	bc80      	pop	{r7}
   136a0:	4770      	bx	lr
	...

000136a4 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   136a4:	b590      	push	{r4, r7, lr}
   136a6:	b085      	sub	sp, #20
   136a8:	af00      	add	r7, sp, #0
   136aa:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   136ac:	687b      	ldr	r3, [r7, #4]
   136ae:	8c1a      	ldrh	r2, [r3, #32]
   136b0:	f107 010f 	add.w	r1, r7, #15
   136b4:	2301      	movs	r3, #1
   136b6:	4804      	ldr	r0, [pc, #16]	; (136c8 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   136b8:	4c04      	ldr	r4, [pc, #16]	; (136cc <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   136ba:	47a0      	blx	r4
	 return	s;
   136bc:	7bfb      	ldrb	r3, [r7, #15]
 }
   136be:	4618      	mov	r0, r3
   136c0:	3714      	adds	r7, #20
   136c2:	46bd      	mov	sp, r7
   136c4:	bd90      	pop	{r4, r7, pc}
   136c6:	bf00      	nop
   136c8:	20004974 	.word	0x20004974
   136cc:	00012245 	.word	0x00012245

000136d0 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   136d0:	b480      	push	{r7}
   136d2:	b083      	sub	sp, #12
   136d4:	af00      	add	r7, sp, #0
   136d6:	6078      	str	r0, [r7, #4]
   136d8:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   136da:	683b      	ldr	r3, [r7, #0]
   136dc:	b29a      	uxth	r2, r3
   136de:	687b      	ldr	r3, [r7, #4]
   136e0:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   136e2:	687b      	ldr	r3, [r7, #4]
   136e4:	8c1b      	ldrh	r3, [r3, #32]
 }
   136e6:	4618      	mov	r0, r3
   136e8:	370c      	adds	r7, #12
   136ea:	46bd      	mov	sp, r7
   136ec:	bc80      	pop	{r7}
   136ee:	4770      	bx	lr

000136f0 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   136f0:	b480      	push	{r7}
   136f2:	b083      	sub	sp, #12
   136f4:	af00      	add	r7, sp, #0
   136f6:	6078      	str	r0, [r7, #4]
   136f8:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   136fa:	683b      	ldr	r3, [r7, #0]
   136fc:	b29a      	uxth	r2, r3
   136fe:	687b      	ldr	r3, [r7, #4]
   13700:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   13702:	687b      	ldr	r3, [r7, #4]
   13704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   13706:	4618      	mov	r0, r3
   13708:	370c      	adds	r7, #12
   1370a:	46bd      	mov	sp, r7
   1370c:	bc80      	pop	{r7}
   1370e:	4770      	bx	lr

00013710 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   13710:	b590      	push	{r4, r7, lr}
   13712:	b085      	sub	sp, #20
   13714:	af00      	add	r7, sp, #0
   13716:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   13718:	6878      	ldr	r0, [r7, #4]
   1371a:	4b15      	ldr	r3, [pc, #84]	; (13770 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   1371c:	4798      	blx	r3
   1371e:	4603      	mov	r3, r0
   13720:	b29a      	uxth	r2, r3
   13722:	687b      	ldr	r3, [r7, #4]
   13724:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	681b      	ldr	r3, [r3, #0]
   1372a:	681b      	ldr	r3, [r3, #0]
   1372c:	687a      	ldr	r2, [r7, #4]
   1372e:	3226      	adds	r2, #38	; 0x26
   13730:	4611      	mov	r1, r2
   13732:	6878      	ldr	r0, [r7, #4]
   13734:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   13736:	687b      	ldr	r3, [r7, #4]
   13738:	3326      	adds	r3, #38	; 0x26
   1373a:	461a      	mov	r2, r3
   1373c:	687b      	ldr	r3, [r7, #4]
   1373e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   13740:	687b      	ldr	r3, [r7, #4]
   13742:	6b99      	ldr	r1, [r3, #56]	; 0x38
   13744:	687b      	ldr	r3, [r7, #4]
   13746:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13748:	b2da      	uxtb	r2, r3
   1374a:	687b      	ldr	r3, [r7, #4]
   1374c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1374e:	b2db      	uxtb	r3, r3
   13750:	4413      	add	r3, r2
   13752:	b2da      	uxtb	r2, r3
   13754:	2308      	movs	r3, #8
   13756:	4807      	ldr	r0, [pc, #28]	; (13774 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   13758:	4c07      	ldr	r4, [pc, #28]	; (13778 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   1375a:	47a0      	blx	r4
   1375c:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   1375e:	6878      	ldr	r0, [r7, #4]
   13760:	4b06      	ldr	r3, [pc, #24]	; (1377c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   13762:	4798      	blx	r3
	return	w;
   13764:	68fb      	ldr	r3, [r7, #12]
}
   13766:	4618      	mov	r0, r3
   13768:	3714      	adds	r7, #20
   1376a:	46bd      	mov	sp, r7
   1376c:	bd90      	pop	{r4, r7, pc}
   1376e:	bf00      	nop
   13770:	000136a5 	.word	0x000136a5
   13774:	20004974 	.word	0x20004974
   13778:	000120ad 	.word	0x000120ad
   1377c:	00013629 	.word	0x00013629

00013780 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   13780:	b590      	push	{r4, r7, lr}
   13782:	b085      	sub	sp, #20
   13784:	af00      	add	r7, sp, #0
   13786:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   13788:	6878      	ldr	r0, [r7, #4]
   1378a:	4b0f      	ldr	r3, [pc, #60]	; (137c8 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   1378c:	4798      	blx	r3
   1378e:	4603      	mov	r3, r0
   13790:	b29a      	uxth	r2, r3
   13792:	687b      	ldr	r3, [r7, #4]
   13794:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   13796:	687b      	ldr	r3, [r7, #4]
   13798:	332e      	adds	r3, #46	; 0x2e
   1379a:	461a      	mov	r2, r3
   1379c:	687b      	ldr	r3, [r7, #4]
   1379e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   137a0:	687b      	ldr	r3, [r7, #4]
   137a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   137a4:	687b      	ldr	r3, [r7, #4]
   137a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   137a8:	b2da      	uxtb	r2, r3
   137aa:	687b      	ldr	r3, [r7, #4]
   137ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   137ae:	b2db      	uxtb	r3, r3
   137b0:	4413      	add	r3, r2
   137b2:	b2da      	uxtb	r2, r3
   137b4:	2308      	movs	r3, #8
   137b6:	4805      	ldr	r0, [pc, #20]	; (137cc <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   137b8:	4c05      	ldr	r4, [pc, #20]	; (137d0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   137ba:	47a0      	blx	r4
   137bc:	60f8      	str	r0, [r7, #12]
	return	r;
   137be:	68fb      	ldr	r3, [r7, #12]
}
   137c0:	4618      	mov	r0, r3
   137c2:	3714      	adds	r7, #20
   137c4:	46bd      	mov	sp, r7
   137c6:	bd90      	pop	{r4, r7, pc}
   137c8:	000136a5 	.word	0x000136a5
   137cc:	20004974 	.word	0x20004974
   137d0:	000121d5 	.word	0x000121d5

000137d4 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   137d4:	b580      	push	{r7, lr}
   137d6:	b082      	sub	sp, #8
   137d8:	af00      	add	r7, sp, #0
   137da:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
   137dc:	4b04      	ldr	r3, [pc, #16]	; (137f0 <_ZL7task_cbPK10timer_task+0x1c>)
   137de:	681b      	ldr	r3, [r3, #0]
   137e0:	4618      	mov	r0, r3
   137e2:	4b04      	ldr	r3, [pc, #16]	; (137f4 <_ZL7task_cbPK10timer_task+0x20>)
   137e4:	4798      	blx	r3
}
   137e6:	bf00      	nop
   137e8:	3708      	adds	r7, #8
   137ea:	46bd      	mov	sp, r7
   137ec:	bd80      	pop	{r7, pc}
   137ee:	bf00      	nop
   137f0:	20004ca8 	.word	0x20004ca8
   137f4:	000138f1 	.word	0x000138f1

000137f8 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
   137f8:	b480      	push	{r7}
   137fa:	b083      	sub	sp, #12
   137fc:	af00      	add	r7, sp, #0
   137fe:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
   13800:	687b      	ldr	r3, [r7, #4]
   13802:	687a      	ldr	r2, [r7, #4]
   13804:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   13806:	4a08      	ldr	r2, [pc, #32]	; (13828 <_ZN11Timer_ClassC1Ev+0x30>)
   13808:	687b      	ldr	r3, [r7, #4]
   1380a:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1380c:	687b      	ldr	r3, [r7, #4]
   1380e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13812:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	4a05      	ldr	r2, [pc, #20]	; (1382c <_ZN11Timer_ClassC1Ev+0x34>)
   13818:	621a      	str	r2, [r3, #32]
} //Timer_Class
   1381a:	687b      	ldr	r3, [r7, #4]
   1381c:	4618      	mov	r0, r3
   1381e:	370c      	adds	r7, #12
   13820:	46bd      	mov	sp, r7
   13822:	bc80      	pop	{r7}
   13824:	4770      	bx	lr
   13826:	bf00      	nop
   13828:	20004ca8 	.word	0x20004ca8
   1382c:	000137d5 	.word	0x000137d5

00013830 <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   13830:	b480      	push	{r7}
   13832:	b083      	sub	sp, #12
   13834:	af00      	add	r7, sp, #0
   13836:	6078      	str	r0, [r7, #4]
   13838:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	683a      	ldr	r2, [r7, #0]
   1383e:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
   13840:	4a07      	ldr	r2, [pc, #28]	; (13860 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
   13842:	687b      	ldr	r3, [r7, #4]
   13844:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   13846:	687b      	ldr	r3, [r7, #4]
   13848:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1384c:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
   1384e:	687b      	ldr	r3, [r7, #4]
   13850:	4a04      	ldr	r2, [pc, #16]	; (13864 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   13852:	621a      	str	r2, [r3, #32]
} //Timer_Class
   13854:	687b      	ldr	r3, [r7, #4]
   13856:	4618      	mov	r0, r3
   13858:	370c      	adds	r7, #12
   1385a:	46bd      	mov	sp, r7
   1385c:	bc80      	pop	{r7}
   1385e:	4770      	bx	lr
   13860:	20004ca8 	.word	0x20004ca8
   13864:	000137d5 	.word	0x000137d5

00013868 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor>:
void	Timer_Class::set_descriptor(timer_descriptor * descr){
   13868:	b480      	push	{r7}
   1386a:	b083      	sub	sp, #12
   1386c:	af00      	add	r7, sp, #0
   1386e:	6078      	str	r0, [r7, #4]
   13870:	6039      	str	r1, [r7, #0]
		timer_descr=descr;
   13872:	687b      	ldr	r3, [r7, #4]
   13874:	683a      	ldr	r2, [r7, #0]
   13876:	609a      	str	r2, [r3, #8]
		ptrTimerClass=this;
   13878:	4a03      	ldr	r2, [pc, #12]	; (13888 <_ZN11Timer_Class14set_descriptorEP16timer_descriptor+0x20>)
   1387a:	687b      	ldr	r3, [r7, #4]
   1387c:	6013      	str	r3, [r2, #0]
}
   1387e:	bf00      	nop
   13880:	370c      	adds	r7, #12
   13882:	46bd      	mov	sp, r7
   13884:	bc80      	pop	{r7}
   13886:	4770      	bx	lr
   13888:	20004ca8 	.word	0x20004ca8

0001388c <_ZN11Timer_ClassD1Ev>:

// default destructor
Timer_Class::~Timer_Class()
   1388c:	b480      	push	{r7}
   1388e:	b083      	sub	sp, #12
   13890:	af00      	add	r7, sp, #0
   13892:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   13894:	687b      	ldr	r3, [r7, #4]
   13896:	2200      	movs	r2, #0
   13898:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1389a:	687b      	ldr	r3, [r7, #4]
   1389c:	4618      	mov	r0, r3
   1389e:	370c      	adds	r7, #12
   138a0:	46bd      	mov	sp, r7
   138a2:	bc80      	pop	{r7}
   138a4:	4770      	bx	lr
	...

000138a8 <_ZN11Timer_Class4InitEP16timer_descriptor>:



void Timer_Class::Init(timer_descriptor * descr){
   138a8:	b580      	push	{r7, lr}
   138aa:	b082      	sub	sp, #8
   138ac:	af00      	add	r7, sp, #0
   138ae:	6078      	str	r0, [r7, #4]
   138b0:	6039      	str	r1, [r7, #0]
	set_descriptor(descr);
   138b2:	6839      	ldr	r1, [r7, #0]
   138b4:	6878      	ldr	r0, [r7, #4]
   138b6:	4b04      	ldr	r3, [pc, #16]	; (138c8 <_ZN11Timer_Class4InitEP16timer_descriptor+0x20>)
   138b8:	4798      	blx	r3
	ticks=0;
   138ba:	687b      	ldr	r3, [r7, #4]
   138bc:	2200      	movs	r2, #0
   138be:	629a      	str	r2, [r3, #40]	; 0x28
}
   138c0:	bf00      	nop
   138c2:	3708      	adds	r7, #8
   138c4:	46bd      	mov	sp, r7
   138c6:	bd80      	pop	{r7, pc}
   138c8:	00013869 	.word	0x00013869

000138cc <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   138cc:	b580      	push	{r7, lr}
   138ce:	b084      	sub	sp, #16
   138d0:	af00      	add	r7, sp, #0
   138d2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   138d4:	687b      	ldr	r3, [r7, #4]
   138d6:	689b      	ldr	r3, [r3, #8]
   138d8:	4618      	mov	r0, r3
   138da:	4b04      	ldr	r3, [pc, #16]	; (138ec <_ZN11Timer_Class5startEv+0x20>)
   138dc:	4798      	blx	r3
   138de:	60f8      	str	r0, [r7, #12]
	return status;
   138e0:	68fb      	ldr	r3, [r7, #12]
	
}
   138e2:	4618      	mov	r0, r3
   138e4:	3710      	adds	r7, #16
   138e6:	46bd      	mov	sp, r7
   138e8:	bd80      	pop	{r7, pc}
   138ea:	bf00      	nop
   138ec:	00005599 	.word	0x00005599

000138f0 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
   138f0:	b480      	push	{r7}
   138f2:	b083      	sub	sp, #12
   138f4:	af00      	add	r7, sp, #0
   138f6:	6078      	str	r0, [r7, #4]
	timeout=1;
   138f8:	687b      	ldr	r3, [r7, #4]
   138fa:	2201      	movs	r2, #1
   138fc:	705a      	strb	r2, [r3, #1]
}
   138fe:	bf00      	nop
   13900:	370c      	adds	r7, #12
   13902:	46bd      	mov	sp, r7
   13904:	bc80      	pop	{r7}
   13906:	4770      	bx	lr

00013908 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   13908:	b580      	push	{r7, lr}
   1390a:	b086      	sub	sp, #24
   1390c:	af00      	add	r7, sp, #0
   1390e:	60f8      	str	r0, [r7, #12]
   13910:	60b9      	str	r1, [r7, #8]
   13912:	607a      	str	r2, [r7, #4]
   13914:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
   13916:	68fb      	ldr	r3, [r7, #12]
   13918:	687a      	ldr	r2, [r7, #4]
   1391a:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
   1391c:	68fb      	ldr	r3, [r7, #12]
   1391e:	68ba      	ldr	r2, [r7, #8]
   13920:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
   13922:	68fb      	ldr	r3, [r7, #12]
   13924:	78fa      	ldrb	r2, [r7, #3]
   13926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
   1392a:	68fb      	ldr	r3, [r7, #12]
   1392c:	689a      	ldr	r2, [r3, #8]
   1392e:	68fb      	ldr	r3, [r7, #12]
   13930:	3314      	adds	r3, #20
   13932:	4619      	mov	r1, r3
   13934:	4610      	mov	r0, r2
   13936:	4b04      	ldr	r3, [pc, #16]	; (13948 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x40>)
   13938:	4798      	blx	r3
   1393a:	6178      	str	r0, [r7, #20]
	
	return status;
   1393c:	697b      	ldr	r3, [r7, #20]
}
   1393e:	4618      	mov	r0, r3
   13940:	3718      	adds	r7, #24
   13942:	46bd      	mov	sp, r7
   13944:	bd80      	pop	{r7, pc}
   13946:	bf00      	nop
   13948:	00005649 	.word	0x00005649

0001394c <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
   1394c:	b590      	push	{r4, r7, lr}
   1394e:	b087      	sub	sp, #28
   13950:	af00      	add	r7, sp, #0
   13952:	60f8      	str	r0, [r7, #12]
   13954:	60b9      	str	r1, [r7, #8]
   13956:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
   13958:	2301      	movs	r3, #1
   1395a:	687a      	ldr	r2, [r7, #4]
   1395c:	68b9      	ldr	r1, [r7, #8]
   1395e:	68f8      	ldr	r0, [r7, #12]
   13960:	4c03      	ldr	r4, [pc, #12]	; (13970 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x24>)
   13962:	47a0      	blx	r4
   13964:	6178      	str	r0, [r7, #20]
		return status;
   13966:	697b      	ldr	r3, [r7, #20]
}
   13968:	4618      	mov	r0, r3
   1396a:	371c      	adds	r7, #28
   1396c:	46bd      	mov	sp, r7
   1396e:	bd90      	pop	{r4, r7, pc}
   13970:	00013909 	.word	0x00013909

00013974 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
   13974:	b590      	push	{r4, r7, lr}
   13976:	b087      	sub	sp, #28
   13978:	af00      	add	r7, sp, #0
   1397a:	60f8      	str	r0, [r7, #12]
   1397c:	60b9      	str	r1, [r7, #8]
   1397e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
   13980:	2300      	movs	r3, #0
   13982:	687a      	ldr	r2, [r7, #4]
   13984:	68b9      	ldr	r1, [r7, #8]
   13986:	68f8      	ldr	r0, [r7, #12]
   13988:	4c06      	ldr	r4, [pc, #24]	; (139a4 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
   1398a:	47a0      	blx	r4
   1398c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   1398e:	68fb      	ldr	r3, [r7, #12]
   13990:	689b      	ldr	r3, [r3, #8]
   13992:	4618      	mov	r0, r3
   13994:	4b04      	ldr	r3, [pc, #16]	; (139a8 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
   13996:	4798      	blx	r3
   13998:	6178      	str	r0, [r7, #20]
	return status;
   1399a:	697b      	ldr	r3, [r7, #20]
}
   1399c:	4618      	mov	r0, r3
   1399e:	371c      	adds	r7, #28
   139a0:	46bd      	mov	sp, r7
   139a2:	bd90      	pop	{r4, r7, pc}
   139a4:	00013909 	.word	0x00013909
   139a8:	00005599 	.word	0x00005599

000139ac <_ZN11Timer_Class9get_ticksEv>:
	timer_remove_task(timer_descr, &task);
}



uint32_t	Timer_Class::get_ticks(void){
   139ac:	b580      	push	{r7, lr}
   139ae:	b082      	sub	sp, #8
   139b0:	af00      	add	r7, sp, #0
   139b2:	6078      	str	r0, [r7, #4]
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	689a      	ldr	r2, [r3, #8]
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	3328      	adds	r3, #40	; 0x28
   139bc:	4619      	mov	r1, r3
   139be:	4610      	mov	r0, r2
   139c0:	4b03      	ldr	r3, [pc, #12]	; (139d0 <_ZN11Timer_Class9get_ticksEv+0x24>)
   139c2:	4798      	blx	r3
	return ticks;
   139c4:	687b      	ldr	r3, [r7, #4]
   139c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
   139c8:	4618      	mov	r0, r3
   139ca:	3708      	adds	r7, #8
   139cc:	46bd      	mov	sp, r7
   139ce:	bd80      	pop	{r7, pc}
   139d0:	00005741 	.word	0x00005741

000139d4 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
   139d4:	b580      	push	{r7, lr}
   139d6:	b082      	sub	sp, #8
   139d8:	af00      	add	r7, sp, #0
   139da:	6078      	str	r0, [r7, #4]
   139dc:	6039      	str	r1, [r7, #0]
   139de:	687b      	ldr	r3, [r7, #4]
   139e0:	2b01      	cmp	r3, #1
   139e2:	d11f      	bne.n	13a24 <_Z41__static_initialization_and_destruction_0ii+0x50>
   139e4:	683b      	ldr	r3, [r7, #0]
   139e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   139ea:	4293      	cmp	r3, r2
   139ec:	d11a      	bne.n	13a24 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
   139ee:	490f      	ldr	r1, [pc, #60]	; (13a2c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   139f0:	480f      	ldr	r0, [pc, #60]	; (13a30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   139f2:	4b10      	ldr	r3, [pc, #64]	; (13a34 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   139f4:	4798      	blx	r3
   139f6:	4a10      	ldr	r2, [pc, #64]	; (13a38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   139f8:	4910      	ldr	r1, [pc, #64]	; (13a3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   139fa:	480d      	ldr	r0, [pc, #52]	; (13a30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   139fc:	4b10      	ldr	r3, [pc, #64]	; (13a40 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   139fe:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   13a00:	4910      	ldr	r1, [pc, #64]	; (13a44 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13a02:	4811      	ldr	r0, [pc, #68]	; (13a48 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   13a04:	4b0b      	ldr	r3, [pc, #44]	; (13a34 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13a06:	4798      	blx	r3
   13a08:	4a0b      	ldr	r2, [pc, #44]	; (13a38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   13a0a:	490c      	ldr	r1, [pc, #48]	; (13a3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   13a0c:	480e      	ldr	r0, [pc, #56]	; (13a48 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   13a0e:	4b0c      	ldr	r3, [pc, #48]	; (13a40 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13a10:	4798      	blx	r3
   13a12:	490e      	ldr	r1, [pc, #56]	; (13a4c <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13a14:	480e      	ldr	r0, [pc, #56]	; (13a50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13a16:	4b07      	ldr	r3, [pc, #28]	; (13a34 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   13a18:	4798      	blx	r3
   13a1a:	4a07      	ldr	r2, [pc, #28]	; (13a38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   13a1c:	4907      	ldr	r1, [pc, #28]	; (13a3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   13a1e:	480c      	ldr	r0, [pc, #48]	; (13a50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13a20:	4b07      	ldr	r3, [pc, #28]	; (13a40 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13a22:	4798      	blx	r3
   13a24:	bf00      	nop
   13a26:	3708      	adds	r7, #8
   13a28:	46bd      	mov	sp, r7
   13a2a:	bd80      	pop	{r7, pc}
   13a2c:	20004f18 	.word	0x20004f18
   13a30:	20004cac 	.word	0x20004cac
   13a34:	00013831 	.word	0x00013831
   13a38:	20000000 	.word	0x20000000
   13a3c:	0001388d 	.word	0x0001388d
   13a40:	00014919 	.word	0x00014919
   13a44:	2000500c 	.word	0x2000500c
   13a48:	20004cd8 	.word	0x20004cd8
   13a4c:	20004f34 	.word	0x20004f34
   13a50:	20004d04 	.word	0x20004d04

00013a54 <_GLOBAL__sub_I_ptrTimerClass>:
   13a54:	b580      	push	{r7, lr}
   13a56:	af00      	add	r7, sp, #0
   13a58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13a5c:	2001      	movs	r0, #1
   13a5e:	4b01      	ldr	r3, [pc, #4]	; (13a64 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   13a60:	4798      	blx	r3
   13a62:	bd80      	pop	{r7, pc}
   13a64:	000139d5 	.word	0x000139d5

00013a68 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   13a68:	b480      	push	{r7}
   13a6a:	b083      	sub	sp, #12
   13a6c:	af00      	add	r7, sp, #0
   13a6e:	6078      	str	r0, [r7, #4]
   13a70:	4a05      	ldr	r2, [pc, #20]	; (13a88 <_ZN5PrintC1Ev+0x20>)
   13a72:	687b      	ldr	r3, [r7, #4]
   13a74:	601a      	str	r2, [r3, #0]
   13a76:	687b      	ldr	r3, [r7, #4]
   13a78:	2200      	movs	r2, #0
   13a7a:	605a      	str	r2, [r3, #4]
   13a7c:	687b      	ldr	r3, [r7, #4]
   13a7e:	4618      	mov	r0, r3
   13a80:	370c      	adds	r7, #12
   13a82:	46bd      	mov	sp, r7
   13a84:	bc80      	pop	{r7}
   13a86:	4770      	bx	lr
   13a88:	000185c8 	.word	0x000185c8

00013a8c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   13a8c:	b480      	push	{r7}
   13a8e:	b083      	sub	sp, #12
   13a90:	af00      	add	r7, sp, #0
   13a92:	6078      	str	r0, [r7, #4]
   13a94:	2300      	movs	r3, #0
   13a96:	4618      	mov	r0, r3
   13a98:	370c      	adds	r7, #12
   13a9a:	46bd      	mov	sp, r7
   13a9c:	bc80      	pop	{r7}
   13a9e:	4770      	bx	lr

00013aa0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   13aa0:	b480      	push	{r7}
   13aa2:	b083      	sub	sp, #12
   13aa4:	af00      	add	r7, sp, #0
   13aa6:	6078      	str	r0, [r7, #4]
   13aa8:	bf00      	nop
   13aaa:	370c      	adds	r7, #12
   13aac:	46bd      	mov	sp, r7
   13aae:	bc80      	pop	{r7}
   13ab0:	4770      	bx	lr
	...

00013ab4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   13ab4:	b580      	push	{r7, lr}
   13ab6:	b082      	sub	sp, #8
   13ab8:	af00      	add	r7, sp, #0
   13aba:	6078      	str	r0, [r7, #4]
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	4618      	mov	r0, r3
   13ac0:	4b06      	ldr	r3, [pc, #24]	; (13adc <_ZN6StreamC1Ev+0x28>)
   13ac2:	4798      	blx	r3
   13ac4:	4a06      	ldr	r2, [pc, #24]	; (13ae0 <_ZN6StreamC1Ev+0x2c>)
   13ac6:	687b      	ldr	r3, [r7, #4]
   13ac8:	601a      	str	r2, [r3, #0]
   13aca:	687b      	ldr	r3, [r7, #4]
   13acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13ad0:	609a      	str	r2, [r3, #8]
   13ad2:	687b      	ldr	r3, [r7, #4]
   13ad4:	4618      	mov	r0, r3
   13ad6:	3708      	adds	r7, #8
   13ad8:	46bd      	mov	sp, r7
   13ada:	bd80      	pop	{r7, pc}
   13adc:	00013a69 	.word	0x00013a69
   13ae0:	0001858c 	.word	0x0001858c

00013ae4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   13ae4:	b480      	push	{r7}
   13ae6:	b083      	sub	sp, #12
   13ae8:	af00      	add	r7, sp, #0
   13aea:	4603      	mov	r3, r0
   13aec:	603a      	str	r2, [r7, #0]
   13aee:	71fb      	strb	r3, [r7, #7]
   13af0:	460b      	mov	r3, r1
   13af2:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   13af4:	4b08      	ldr	r3, [pc, #32]	; (13b18 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13af6:	681b      	ldr	r3, [r3, #0]
   13af8:	2201      	movs	r2, #1
   13afa:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
   13afc:	4b06      	ldr	r3, [pc, #24]	; (13b18 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13afe:	681b      	ldr	r3, [r3, #0]
   13b00:	2201      	movs	r2, #1
   13b02:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
   13b04:	4b04      	ldr	r3, [pc, #16]	; (13b18 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   13b06:	681b      	ldr	r3, [r3, #0]
   13b08:	2201      	movs	r2, #1
   13b0a:	741a      	strb	r2, [r3, #16]


	return false;
   13b0c:	2300      	movs	r3, #0
}
   13b0e:	4618      	mov	r0, r3
   13b10:	370c      	adds	r7, #12
   13b12:	46bd      	mov	sp, r7
   13b14:	bc80      	pop	{r7}
   13b16:	4770      	bx	lr
   13b18:	20004d30 	.word	0x20004d30

00013b1c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   13b1c:	b480      	push	{r7}
   13b1e:	b083      	sub	sp, #12
   13b20:	af00      	add	r7, sp, #0
   13b22:	4603      	mov	r3, r0
   13b24:	603a      	str	r2, [r7, #0]
   13b26:	71fb      	strb	r3, [r7, #7]
   13b28:	460b      	mov	r3, r1
   13b2a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   13b2c:	4b08      	ldr	r3, [pc, #32]	; (13b50 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   13b2e:	681b      	ldr	r3, [r3, #0]
   13b30:	2201      	movs	r2, #1
   13b32:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
   13b34:	4b06      	ldr	r3, [pc, #24]	; (13b50 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   13b36:	681b      	ldr	r3, [r3, #0]
   13b38:	2201      	movs	r2, #1
   13b3a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
   13b3c:	4b04      	ldr	r3, [pc, #16]	; (13b50 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	2201      	movs	r2, #1
   13b42:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   13b44:	2300      	movs	r3, #0
}
   13b46:	4618      	mov	r0, r3
   13b48:	370c      	adds	r7, #12
   13b4a:	46bd      	mov	sp, r7
   13b4c:	bc80      	pop	{r7}
   13b4e:	4770      	bx	lr
   13b50:	20004d30 	.word	0x20004d30

00013b54 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b082      	sub	sp, #8
   13b58:	af00      	add	r7, sp, #0
   13b5a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   13b5c:	793b      	ldrb	r3, [r7, #4]
   13b5e:	f003 0301 	and.w	r3, r3, #1
   13b62:	b2db      	uxtb	r3, r3
   13b64:	2b00      	cmp	r3, #0
   13b66:	d013      	beq.n	13b90 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   13b68:	490c      	ldr	r1, [pc, #48]	; (13b9c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   13b6a:	2000      	movs	r0, #0
   13b6c:	4b0c      	ldr	r3, [pc, #48]	; (13ba0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   13b6e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   13b70:	490c      	ldr	r1, [pc, #48]	; (13ba4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   13b72:	2001      	movs	r0, #1
   13b74:	4b0a      	ldr	r3, [pc, #40]	; (13ba0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   13b76:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   13b78:	4b0b      	ldr	r3, [pc, #44]	; (13ba8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   13b7a:	681b      	ldr	r3, [r3, #0]
   13b7c:	2201      	movs	r2, #1
   13b7e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   13b80:	4b09      	ldr	r3, [pc, #36]	; (13ba8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   13b82:	681b      	ldr	r3, [r3, #0]
   13b84:	2201      	movs	r2, #1
   13b86:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
   13b88:	4b07      	ldr	r3, [pc, #28]	; (13ba8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   13b8a:	681b      	ldr	r3, [r3, #0]
   13b8c:	2201      	movs	r2, #1
   13b8e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   13b90:	2300      	movs	r3, #0
}
   13b92:	4618      	mov	r0, r3
   13b94:	3708      	adds	r7, #8
   13b96:	46bd      	mov	sp, r7
   13b98:	bd80      	pop	{r7, pc}
   13b9a:	bf00      	nop
   13b9c:	00013ae5 	.word	0x00013ae5
   13ba0:	0000f3c9 	.word	0x0000f3c9
   13ba4:	00013b1d 	.word	0x00013b1d
   13ba8:	20004d30 	.word	0x20004d30

00013bac <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   13bac:	b580      	push	{r7, lr}
   13bae:	b082      	sub	sp, #8
   13bb0:	af00      	add	r7, sp, #0
   13bb2:	6078      	str	r0, [r7, #4]
   13bb4:	687b      	ldr	r3, [r7, #4]
   13bb6:	4618      	mov	r0, r3
   13bb8:	4b0a      	ldr	r3, [pc, #40]	; (13be4 <_ZN9CDC_ClassC1Ev+0x38>)
   13bba:	4798      	blx	r3
   13bbc:	687b      	ldr	r3, [r7, #4]
   13bbe:	3310      	adds	r3, #16
   13bc0:	4618      	mov	r0, r3
   13bc2:	4b09      	ldr	r3, [pc, #36]	; (13be8 <_ZN9CDC_ClassC1Ev+0x3c>)
   13bc4:	4798      	blx	r3
   13bc6:	4a09      	ldr	r2, [pc, #36]	; (13bec <_ZN9CDC_ClassC1Ev+0x40>)
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   13bcc:	687b      	ldr	r3, [r7, #4]
   13bce:	f04f 32ff 	mov.w	r2, #4294967295
   13bd2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   13bd4:	4a06      	ldr	r2, [pc, #24]	; (13bf0 <_ZN9CDC_ClassC1Ev+0x44>)
   13bd6:	687b      	ldr	r3, [r7, #4]
   13bd8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   13bda:	687b      	ldr	r3, [r7, #4]
   13bdc:	4618      	mov	r0, r3
   13bde:	3708      	adds	r7, #8
   13be0:	46bd      	mov	sp, r7
   13be2:	bd80      	pop	{r7, pc}
   13be4:	00013ab5 	.word	0x00013ab5
   13be8:	000142b1 	.word	0x000142b1
   13bec:	0001855c 	.word	0x0001855c
   13bf0:	20004d30 	.word	0x20004d30

00013bf4 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   13bf4:	b580      	push	{r7, lr}
   13bf6:	b082      	sub	sp, #8
   13bf8:	af00      	add	r7, sp, #0
   13bfa:	6078      	str	r0, [r7, #4]
   13bfc:	4a06      	ldr	r2, [pc, #24]	; (13c18 <_ZN9CDC_ClassD1Ev+0x24>)
   13bfe:	687b      	ldr	r3, [r7, #4]
   13c00:	601a      	str	r2, [r3, #0]
   13c02:	687b      	ldr	r3, [r7, #4]
   13c04:	3310      	adds	r3, #16
   13c06:	4618      	mov	r0, r3
   13c08:	4b04      	ldr	r3, [pc, #16]	; (13c1c <_ZN9CDC_ClassD1Ev+0x28>)
   13c0a:	4798      	blx	r3
{
} //~CDC_Class
   13c0c:	687b      	ldr	r3, [r7, #4]
   13c0e:	4618      	mov	r0, r3
   13c10:	3708      	adds	r7, #8
   13c12:	46bd      	mov	sp, r7
   13c14:	bd80      	pop	{r7, pc}
   13c16:	bf00      	nop
   13c18:	0001855c 	.word	0x0001855c
   13c1c:	000142d1 	.word	0x000142d1

00013c20 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   13c20:	b580      	push	{r7, lr}
   13c22:	b082      	sub	sp, #8
   13c24:	af00      	add	r7, sp, #0
   13c26:	6078      	str	r0, [r7, #4]
	
	OnInit();
   13c28:	687b      	ldr	r3, [r7, #4]
   13c2a:	3310      	adds	r3, #16
   13c2c:	4618      	mov	r0, r3
   13c2e:	4b07      	ldr	r3, [pc, #28]	; (13c4c <_ZN9CDC_Class4InitEv+0x2c>)
   13c30:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   13c32:	4907      	ldr	r1, [pc, #28]	; (13c50 <_ZN9CDC_Class4InitEv+0x30>)
   13c34:	2003      	movs	r0, #3
   13c36:	4b07      	ldr	r3, [pc, #28]	; (13c54 <_ZN9CDC_Class4InitEv+0x34>)
   13c38:	4798      	blx	r3
	
		
	if (plugged)
   13c3a:	687b      	ldr	r3, [r7, #4]
   13c3c:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
   13c3e:	20c8      	movs	r0, #200	; 0xc8
   13c40:	4b05      	ldr	r3, [pc, #20]	; (13c58 <_ZN9CDC_Class4InitEv+0x38>)
   13c42:	4798      	blx	r3

}
   13c44:	bf00      	nop
   13c46:	3708      	adds	r7, #8
   13c48:	46bd      	mov	sp, r7
   13c4a:	bd80      	pop	{r7, pc}
   13c4c:	000142e5 	.word	0x000142e5
   13c50:	00013b55 	.word	0x00013b55
   13c54:	0000f3c9 	.word	0x0000f3c9
   13c58:	0000477d 	.word	0x0000477d

00013c5c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   13c5c:	b580      	push	{r7, lr}
   13c5e:	b082      	sub	sp, #8
   13c60:	af00      	add	r7, sp, #0
   13c62:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   13c64:	4b03      	ldr	r3, [pc, #12]	; (13c74 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   13c66:	4798      	blx	r3
   13c68:	4603      	mov	r3, r0
	
}
   13c6a:	4618      	mov	r0, r3
   13c6c:	3708      	adds	r7, #8
   13c6e:	46bd      	mov	sp, r7
   13c70:	bd80      	pop	{r7, pc}
   13c72:	bf00      	nop
   13c74:	0000f441 	.word	0x0000f441

00013c78 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   13c78:	b580      	push	{r7, lr}
   13c7a:	b084      	sub	sp, #16
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   13c80:	687b      	ldr	r3, [r7, #4]
   13c82:	699b      	ldr	r3, [r3, #24]
   13c84:	f1b3 3fff 	cmp.w	r3, #4294967295
   13c88:	bf14      	ite	ne
   13c8a:	2301      	movne	r3, #1
   13c8c:	2300      	moveq	r3, #0
   13c8e:	b2db      	uxtb	r3, r3
   13c90:	2b00      	cmp	r3, #0
   13c92:	d002      	beq.n	13c9a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   13c94:	687b      	ldr	r3, [r7, #4]
   13c96:	699b      	ldr	r3, [r3, #24]
   13c98:	e011      	b.n	13cbe <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   13c9a:	687b      	ldr	r3, [r7, #4]
   13c9c:	681b      	ldr	r3, [r3, #0]
   13c9e:	331c      	adds	r3, #28
   13ca0:	681b      	ldr	r3, [r3, #0]
   13ca2:	f107 010f 	add.w	r1, r7, #15
   13ca6:	2201      	movs	r2, #1
   13ca8:	6878      	ldr	r0, [r7, #4]
   13caa:	4798      	blx	r3
   13cac:	4602      	mov	r2, r0
   13cae:	687b      	ldr	r3, [r7, #4]
   13cb0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   13cb2:	7bfb      	ldrb	r3, [r7, #15]
   13cb4:	461a      	mov	r2, r3
   13cb6:	687b      	ldr	r3, [r7, #4]
   13cb8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   13cba:	687b      	ldr	r3, [r7, #4]
   13cbc:	699b      	ldr	r3, [r3, #24]
}
   13cbe:	4618      	mov	r0, r3
   13cc0:	3710      	adds	r7, #16
   13cc2:	46bd      	mov	sp, r7
   13cc4:	bd80      	pop	{r7, pc}
	...

00013cc8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   13cc8:	b580      	push	{r7, lr}
   13cca:	b086      	sub	sp, #24
   13ccc:	af00      	add	r7, sp, #0
   13cce:	60f8      	str	r0, [r7, #12]
   13cd0:	60b9      	str	r1, [r7, #8]
   13cd2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
   13cd4:	68fb      	ldr	r3, [r7, #12]
   13cd6:	2200      	movs	r2, #0
   13cd8:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	4619      	mov	r1, r3
   13cde:	68b8      	ldr	r0, [r7, #8]
   13ce0:	4b08      	ldr	r3, [pc, #32]	; (13d04 <_ZN9CDC_Class8readDataEPvl+0x3c>)
   13ce2:	4798      	blx	r3
   13ce4:	4603      	mov	r3, r0
   13ce6:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
   13ce8:	68fb      	ldr	r3, [r7, #12]
   13cea:	7d5b      	ldrb	r3, [r3, #21]
   13cec:	b2db      	uxtb	r3, r3
   13cee:	f083 0301 	eor.w	r3, r3, #1
   13cf2:	b2db      	uxtb	r3, r3
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d000      	beq.n	13cfa <_ZN9CDC_Class8readDataEPvl+0x32>
   13cf8:	e7f6      	b.n	13ce8 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
   13cfa:	7dfb      	ldrb	r3, [r7, #23]
}
   13cfc:	4618      	mov	r0, r3
   13cfe:	3718      	adds	r7, #24
   13d00:	46bd      	mov	sp, r7
   13d02:	bd80      	pop	{r7, pc}
   13d04:	0000f31d 	.word	0x0000f31d

00013d08 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
   13d08:	b580      	push	{r7, lr}
   13d0a:	b084      	sub	sp, #16
   13d0c:	af00      	add	r7, sp, #0
   13d0e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	2200      	movs	r2, #0
   13d14:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   13d16:	f107 030f 	add.w	r3, r7, #15
   13d1a:	2101      	movs	r1, #1
   13d1c:	4618      	mov	r0, r3
   13d1e:	4b08      	ldr	r3, [pc, #32]	; (13d40 <_ZN9CDC_Class4readEv+0x38>)
   13d20:	4798      	blx	r3
	while(!rxReady);
   13d22:	687b      	ldr	r3, [r7, #4]
   13d24:	7d5b      	ldrb	r3, [r3, #21]
   13d26:	b2db      	uxtb	r3, r3
   13d28:	f083 0301 	eor.w	r3, r3, #1
   13d2c:	b2db      	uxtb	r3, r3
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d000      	beq.n	13d34 <_ZN9CDC_Class4readEv+0x2c>
   13d32:	e7f6      	b.n	13d22 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   13d34:	7bfb      	ldrb	r3, [r7, #15]
}
   13d36:	4618      	mov	r0, r3
   13d38:	3710      	adds	r7, #16
   13d3a:	46bd      	mov	sp, r7
   13d3c:	bd80      	pop	{r7, pc}
   13d3e:	bf00      	nop
   13d40:	0000f31d 	.word	0x0000f31d

00013d44 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
   13d44:	b580      	push	{r7, lr}
   13d46:	b082      	sub	sp, #8
   13d48:	af00      	add	r7, sp, #0
   13d4a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   13d4c:	687b      	ldr	r3, [r7, #4]
   13d4e:	331c      	adds	r3, #28
   13d50:	2140      	movs	r1, #64	; 0x40
   13d52:	4618      	mov	r0, r3
   13d54:	4b02      	ldr	r3, [pc, #8]	; (13d60 <_ZN9CDC_Class5flushEv+0x1c>)
   13d56:	4798      	blx	r3
}
   13d58:	bf00      	nop
   13d5a:	3708      	adds	r7, #8
   13d5c:	46bd      	mov	sp, r7
   13d5e:	bd80      	pop	{r7, pc}
   13d60:	0000f361 	.word	0x0000f361

00013d64 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   13d64:	b580      	push	{r7, lr}
   13d66:	b082      	sub	sp, #8
   13d68:	af00      	add	r7, sp, #0
   13d6a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   13d6c:	4b02      	ldr	r3, [pc, #8]	; (13d78 <_ZN9CDC_Class5clearEv+0x14>)
   13d6e:	4798      	blx	r3
}
   13d70:	bf00      	nop
   13d72:	3708      	adds	r7, #8
   13d74:	46bd      	mov	sp, r7
   13d76:	bd80      	pop	{r7, pc}
   13d78:	0000f3a5 	.word	0x0000f3a5

00013d7c <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   13d7c:	b580      	push	{r7, lr}
   13d7e:	b082      	sub	sp, #8
   13d80:	af00      	add	r7, sp, #0
   13d82:	6078      	str	r0, [r7, #4]
   13d84:	460b      	mov	r3, r1
   13d86:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
   13d88:	687b      	ldr	r3, [r7, #4]
   13d8a:	7d1b      	ldrb	r3, [r3, #20]
   13d8c:	b2db      	uxtb	r3, r3
   13d8e:	f083 0301 	eor.w	r3, r3, #1
   13d92:	b2db      	uxtb	r3, r3
   13d94:	2b00      	cmp	r3, #0
   13d96:	d000      	beq.n	13d9a <_ZN9CDC_Class5writeEh+0x1e>
   13d98:	e7f6      	b.n	13d88 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
   13d9a:	687b      	ldr	r3, [r7, #4]
   13d9c:	681b      	ldr	r3, [r3, #0]
   13d9e:	3324      	adds	r3, #36	; 0x24
   13da0:	681b      	ldr	r3, [r3, #0]
   13da2:	1cf9      	adds	r1, r7, #3
   13da4:	2201      	movs	r2, #1
   13da6:	6878      	ldr	r0, [r7, #4]
   13da8:	4798      	blx	r3
   13daa:	4603      	mov	r3, r0
}
   13dac:	4618      	mov	r0, r3
   13dae:	3708      	adds	r7, #8
   13db0:	46bd      	mov	sp, r7
   13db2:	bd80      	pop	{r7, pc}

00013db4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   13db4:	b580      	push	{r7, lr}
   13db6:	b086      	sub	sp, #24
   13db8:	af00      	add	r7, sp, #0
   13dba:	60f8      	str	r0, [r7, #12]
   13dbc:	60b9      	str	r1, [r7, #8]
   13dbe:	607a      	str	r2, [r7, #4]
	
	txReady=false;
   13dc0:	68fb      	ldr	r3, [r7, #12]
   13dc2:	2200      	movs	r2, #0
   13dc4:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
   13dc6:	68fb      	ldr	r3, [r7, #12]
   13dc8:	3310      	adds	r3, #16
   13dca:	4618      	mov	r0, r3
   13dcc:	4b14      	ldr	r3, [pc, #80]	; (13e20 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
   13dce:	4798      	blx	r3
   13dd0:	4603      	mov	r3, r0
   13dd2:	2b00      	cmp	r3, #0
   13dd4:	d01e      	beq.n	13e14 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   13dd6:	687b      	ldr	r3, [r7, #4]
   13dd8:	4619      	mov	r1, r3
   13dda:	68b8      	ldr	r0, [r7, #8]
   13ddc:	4b11      	ldr	r3, [pc, #68]	; (13e24 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
   13dde:	4798      	blx	r3
   13de0:	4603      	mov	r3, r0
   13de2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
   13de4:	68fb      	ldr	r3, [r7, #12]
   13de6:	7d1b      	ldrb	r3, [r3, #20]
   13de8:	b2db      	uxtb	r3, r3
   13dea:	f083 0301 	eor.w	r3, r3, #1
   13dee:	b2db      	uxtb	r3, r3
   13df0:	2b00      	cmp	r3, #0
   13df2:	d006      	beq.n	13e02 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
   13df4:	68fb      	ldr	r3, [r7, #12]
   13df6:	7c5b      	ldrb	r3, [r3, #17]
   13df8:	b2db      	uxtb	r3, r3
   13dfa:	2b00      	cmp	r3, #0
   13dfc:	d001      	beq.n	13e02 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
   13dfe:	2301      	movs	r3, #1
   13e00:	e000      	b.n	13e04 <_ZN9CDC_Class9writeDataEPKvl+0x50>
   13e02:	2300      	movs	r3, #0
   13e04:	2b00      	cmp	r3, #0
   13e06:	d000      	beq.n	13e0a <_ZN9CDC_Class9writeDataEPKvl+0x56>
   13e08:	e7ec      	b.n	13de4 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTerminalTimer.Stop();
   13e0a:	4807      	ldr	r0, [pc, #28]	; (13e28 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
   13e0c:	4b07      	ldr	r3, [pc, #28]	; (13e2c <_ZN9CDC_Class9writeDataEPKvl+0x78>)
   13e0e:	4798      	blx	r3
		return r;
   13e10:	697b      	ldr	r3, [r7, #20]
   13e12:	e000      	b.n	13e16 <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
   13e14:	2300      	movs	r3, #0
	}
	

}
   13e16:	4618      	mov	r0, r3
   13e18:	3718      	adds	r7, #24
   13e1a:	46bd      	mov	sp, r7
   13e1c:	bd80      	pop	{r7, pc}
   13e1e:	bf00      	nop
   13e20:	00014381 	.word	0x00014381
   13e24:	0000f361 	.word	0x0000f361
   13e28:	20004e3c 	.word	0x20004e3c
   13e2c:	00014499 	.word	0x00014499

00013e30 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   13e30:	b580      	push	{r7, lr}
   13e32:	b086      	sub	sp, #24
   13e34:	af00      	add	r7, sp, #0
   13e36:	60f8      	str	r0, [r7, #12]
   13e38:	60b9      	str	r1, [r7, #8]
   13e3a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   13e3c:	68fb      	ldr	r3, [r7, #12]
   13e3e:	2200      	movs	r2, #0
   13e40:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (plugged){
   13e42:	68fb      	ldr	r3, [r7, #12]
   13e44:	7c1b      	ldrb	r3, [r3, #16]
   13e46:	b2db      	uxtb	r3, r3
   13e48:	2b00      	cmp	r3, #0
   13e4a:	d01c      	beq.n	13e86 <_ZN9CDC_Class5writeEPKhj+0x56>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   13e4c:	6879      	ldr	r1, [r7, #4]
   13e4e:	68b8      	ldr	r0, [r7, #8]
   13e50:	4b10      	ldr	r3, [pc, #64]	; (13e94 <_ZN9CDC_Class5writeEPKhj+0x64>)
   13e52:	4798      	blx	r3
   13e54:	4603      	mov	r3, r0
   13e56:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
   13e58:	68fb      	ldr	r3, [r7, #12]
   13e5a:	7d1b      	ldrb	r3, [r3, #20]
   13e5c:	b2db      	uxtb	r3, r3
   13e5e:	f083 0301 	eor.w	r3, r3, #1
   13e62:	b2db      	uxtb	r3, r3
   13e64:	2b00      	cmp	r3, #0
   13e66:	d006      	beq.n	13e76 <_ZN9CDC_Class5writeEPKhj+0x46>
   13e68:	68fb      	ldr	r3, [r7, #12]
   13e6a:	7c5b      	ldrb	r3, [r3, #17]
   13e6c:	b2db      	uxtb	r3, r3
   13e6e:	2b00      	cmp	r3, #0
   13e70:	d001      	beq.n	13e76 <_ZN9CDC_Class5writeEPKhj+0x46>
   13e72:	2301      	movs	r3, #1
   13e74:	e000      	b.n	13e78 <_ZN9CDC_Class5writeEPKhj+0x48>
   13e76:	2300      	movs	r3, #0
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d000      	beq.n	13e7e <_ZN9CDC_Class5writeEPKhj+0x4e>
   13e7c:	e7ec      	b.n	13e58 <_ZN9CDC_Class5writeEPKhj+0x28>
		//while((!txReady));
		usbTerminalTimer.Stop();
   13e7e:	4806      	ldr	r0, [pc, #24]	; (13e98 <_ZN9CDC_Class5writeEPKhj+0x68>)
   13e80:	4b06      	ldr	r3, [pc, #24]	; (13e9c <_ZN9CDC_Class5writeEPKhj+0x6c>)
   13e82:	4798      	blx	r3
   13e84:	e001      	b.n	13e8a <_ZN9CDC_Class5writeEPKhj+0x5a>
	}else{
 		r=0;
   13e86:	2300      	movs	r3, #0
   13e88:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   13e8a:	697b      	ldr	r3, [r7, #20]
}
   13e8c:	4618      	mov	r0, r3
   13e8e:	3718      	adds	r7, #24
   13e90:	46bd      	mov	sp, r7
   13e92:	bd80      	pop	{r7, pc}
   13e94:	0000f361 	.word	0x0000f361
   13e98:	20004e3c 	.word	0x20004e3c
   13e9c:	00014499 	.word	0x00014499

00013ea0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   13ea0:	b480      	push	{r7}
   13ea2:	b083      	sub	sp, #12
   13ea4:	af00      	add	r7, sp, #0
   13ea6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   13ea8:	687b      	ldr	r3, [r7, #4]
   13eaa:	7d5b      	ldrb	r3, [r3, #21]
   13eac:	b2db      	uxtb	r3, r3
   13eae:	2b00      	cmp	r3, #0
   13eb0:	d006      	beq.n	13ec0 <_ZN9CDC_Class9availableEv+0x20>
   13eb2:	687b      	ldr	r3, [r7, #4]
   13eb4:	7d1b      	ldrb	r3, [r3, #20]
   13eb6:	b2db      	uxtb	r3, r3
   13eb8:	2b00      	cmp	r3, #0
   13eba:	d001      	beq.n	13ec0 <_ZN9CDC_Class9availableEv+0x20>
   13ebc:	2301      	movs	r3, #1
   13ebe:	e000      	b.n	13ec2 <_ZN9CDC_Class9availableEv+0x22>
   13ec0:	2300      	movs	r3, #0
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d001      	beq.n	13eca <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   13ec6:	2301      	movs	r3, #1
   13ec8:	e000      	b.n	13ecc <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   13eca:	2300      	movs	r3, #0
	}
	
}
   13ecc:	4618      	mov	r0, r3
   13ece:	370c      	adds	r7, #12
   13ed0:	46bd      	mov	sp, r7
   13ed2:	bc80      	pop	{r7}
   13ed4:	4770      	bx	lr
	...

00013ed8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   13ed8:	b580      	push	{r7, lr}
   13eda:	b082      	sub	sp, #8
   13edc:	af00      	add	r7, sp, #0
   13ede:	6078      	str	r0, [r7, #4]
   13ee0:	6039      	str	r1, [r7, #0]
   13ee2:	687b      	ldr	r3, [r7, #4]
   13ee4:	2b01      	cmp	r3, #1
   13ee6:	d10c      	bne.n	13f02 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ee8:	683b      	ldr	r3, [r7, #0]
   13eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13eee:	4293      	cmp	r3, r2
   13ef0:	d107      	bne.n	13f02 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ef2:	4806      	ldr	r0, [pc, #24]	; (13f0c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13ef4:	4b06      	ldr	r3, [pc, #24]	; (13f10 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13ef6:	4798      	blx	r3
   13ef8:	4a06      	ldr	r2, [pc, #24]	; (13f14 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13efa:	4907      	ldr	r1, [pc, #28]	; (13f18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13efc:	4803      	ldr	r0, [pc, #12]	; (13f0c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13efe:	4b07      	ldr	r3, [pc, #28]	; (13f1c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13f00:	4798      	blx	r3
   13f02:	bf00      	nop
   13f04:	3708      	adds	r7, #8
   13f06:	46bd      	mov	sp, r7
   13f08:	bd80      	pop	{r7, pc}
   13f0a:	bf00      	nop
   13f0c:	20004d34 	.word	0x20004d34
   13f10:	00013bad 	.word	0x00013bad
   13f14:	20000000 	.word	0x20000000
   13f18:	00013bf5 	.word	0x00013bf5
   13f1c:	00014919 	.word	0x00014919

00013f20 <_GLOBAL__sub_I_ptrCDCClass>:
   13f20:	b580      	push	{r7, lr}
   13f22:	af00      	add	r7, sp, #0
   13f24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f28:	2001      	movs	r0, #1
   13f2a:	4b01      	ldr	r3, [pc, #4]	; (13f30 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   13f2c:	4798      	blx	r3
   13f2e:	bd80      	pop	{r7, pc}
   13f30:	00013ed9 	.word	0x00013ed9

00013f34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   13f34:	b580      	push	{r7, lr}
   13f36:	b086      	sub	sp, #24
   13f38:	af00      	add	r7, sp, #0
   13f3a:	60f8      	str	r0, [r7, #12]
   13f3c:	60b9      	str	r1, [r7, #8]
   13f3e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   13f40:	2300      	movs	r3, #0
   13f42:	617b      	str	r3, [r7, #20]
  while (size--) {
   13f44:	687b      	ldr	r3, [r7, #4]
   13f46:	1e5a      	subs	r2, r3, #1
   13f48:	607a      	str	r2, [r7, #4]
   13f4a:	2b00      	cmp	r3, #0
   13f4c:	bf14      	ite	ne
   13f4e:	2301      	movne	r3, #1
   13f50:	2300      	moveq	r3, #0
   13f52:	b2db      	uxtb	r3, r3
   13f54:	2b00      	cmp	r3, #0
   13f56:	d016      	beq.n	13f86 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   13f58:	68fb      	ldr	r3, [r7, #12]
   13f5a:	681b      	ldr	r3, [r3, #0]
   13f5c:	681a      	ldr	r2, [r3, #0]
   13f5e:	68bb      	ldr	r3, [r7, #8]
   13f60:	1c59      	adds	r1, r3, #1
   13f62:	60b9      	str	r1, [r7, #8]
   13f64:	781b      	ldrb	r3, [r3, #0]
   13f66:	4619      	mov	r1, r3
   13f68:	68f8      	ldr	r0, [r7, #12]
   13f6a:	4790      	blx	r2
   13f6c:	4603      	mov	r3, r0
   13f6e:	2b00      	cmp	r3, #0
   13f70:	bf14      	ite	ne
   13f72:	2301      	movne	r3, #1
   13f74:	2300      	moveq	r3, #0
   13f76:	b2db      	uxtb	r3, r3
   13f78:	2b00      	cmp	r3, #0
   13f7a:	d003      	beq.n	13f84 <_ZN5Print5writeEPKhj+0x50>
   13f7c:	697b      	ldr	r3, [r7, #20]
   13f7e:	3301      	adds	r3, #1
   13f80:	617b      	str	r3, [r7, #20]
  while (size--) {
   13f82:	e7df      	b.n	13f44 <_ZN5Print5writeEPKhj+0x10>
    else break;
   13f84:	bf00      	nop
  }
  return n;
   13f86:	697b      	ldr	r3, [r7, #20]
}
   13f88:	4618      	mov	r0, r3
   13f8a:	3718      	adds	r7, #24
   13f8c:	46bd      	mov	sp, r7
   13f8e:	bd80      	pop	{r7, pc}

00013f90 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   13f90:	b580      	push	{r7, lr}
   13f92:	b082      	sub	sp, #8
   13f94:	af00      	add	r7, sp, #0
   13f96:	6078      	str	r0, [r7, #4]
   13f98:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   13f9a:	6839      	ldr	r1, [r7, #0]
   13f9c:	6878      	ldr	r0, [r7, #4]
   13f9e:	4b03      	ldr	r3, [pc, #12]	; (13fac <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   13fa0:	4798      	blx	r3
   13fa2:	4603      	mov	r3, r0
}
   13fa4:	4618      	mov	r0, r3
   13fa6:	3708      	adds	r7, #8
   13fa8:	46bd      	mov	sp, r7
   13faa:	bd80      	pop	{r7, pc}
   13fac:	00013fb1 	.word	0x00013fb1

00013fb0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   13fb0:	b580      	push	{r7, lr}
   13fb2:	b082      	sub	sp, #8
   13fb4:	af00      	add	r7, sp, #0
   13fb6:	6078      	str	r0, [r7, #4]
   13fb8:	6039      	str	r1, [r7, #0]
  return write(str);
   13fba:	6839      	ldr	r1, [r7, #0]
   13fbc:	6878      	ldr	r0, [r7, #4]
   13fbe:	4b03      	ldr	r3, [pc, #12]	; (13fcc <_ZN5Print5printEPKc+0x1c>)
   13fc0:	4798      	blx	r3
   13fc2:	4603      	mov	r3, r0
}
   13fc4:	4618      	mov	r0, r3
   13fc6:	3708      	adds	r7, #8
   13fc8:	46bd      	mov	sp, r7
   13fca:	bd80      	pop	{r7, pc}
   13fcc:	00001ed1 	.word	0x00001ed1

00013fd0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
   13fd0:	b580      	push	{r7, lr}
   13fd2:	b082      	sub	sp, #8
   13fd4:	af00      	add	r7, sp, #0
   13fd6:	6078      	str	r0, [r7, #4]
   13fd8:	460b      	mov	r3, r1
   13fda:	70fb      	strb	r3, [r7, #3]
  return write(c);
   13fdc:	687b      	ldr	r3, [r7, #4]
   13fde:	681b      	ldr	r3, [r3, #0]
   13fe0:	681b      	ldr	r3, [r3, #0]
   13fe2:	78fa      	ldrb	r2, [r7, #3]
   13fe4:	4611      	mov	r1, r2
   13fe6:	6878      	ldr	r0, [r7, #4]
   13fe8:	4798      	blx	r3
   13fea:	4603      	mov	r3, r0
}
   13fec:	4618      	mov	r0, r3
   13fee:	3708      	adds	r7, #8
   13ff0:	46bd      	mov	sp, r7
   13ff2:	bd80      	pop	{r7, pc}

00013ff4 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b084      	sub	sp, #16
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	60f8      	str	r0, [r7, #12]
   13ffc:	460b      	mov	r3, r1
   13ffe:	607a      	str	r2, [r7, #4]
   14000:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   14002:	7afb      	ldrb	r3, [r7, #11]
   14004:	687a      	ldr	r2, [r7, #4]
   14006:	4619      	mov	r1, r3
   14008:	68f8      	ldr	r0, [r7, #12]
   1400a:	4b03      	ldr	r3, [pc, #12]	; (14018 <_ZN5Print5printEhi+0x24>)
   1400c:	4798      	blx	r3
   1400e:	4603      	mov	r3, r0
}
   14010:	4618      	mov	r0, r3
   14012:	3710      	adds	r7, #16
   14014:	46bd      	mov	sp, r7
   14016:	bd80      	pop	{r7, pc}
   14018:	0001401d 	.word	0x0001401d

0001401c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   1401c:	b580      	push	{r7, lr}
   1401e:	b084      	sub	sp, #16
   14020:	af00      	add	r7, sp, #0
   14022:	60f8      	str	r0, [r7, #12]
   14024:	60b9      	str	r1, [r7, #8]
   14026:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   14028:	687b      	ldr	r3, [r7, #4]
   1402a:	2b00      	cmp	r3, #0
   1402c:	d109      	bne.n	14042 <_ZN5Print5printEmi+0x26>
   1402e:	68fb      	ldr	r3, [r7, #12]
   14030:	681b      	ldr	r3, [r3, #0]
   14032:	681b      	ldr	r3, [r3, #0]
   14034:	68ba      	ldr	r2, [r7, #8]
   14036:	b2d2      	uxtb	r2, r2
   14038:	4611      	mov	r1, r2
   1403a:	68f8      	ldr	r0, [r7, #12]
   1403c:	4798      	blx	r3
   1403e:	4603      	mov	r3, r0
   14040:	e007      	b.n	14052 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   14042:	687b      	ldr	r3, [r7, #4]
   14044:	b2db      	uxtb	r3, r3
   14046:	461a      	mov	r2, r3
   14048:	68b9      	ldr	r1, [r7, #8]
   1404a:	68f8      	ldr	r0, [r7, #12]
   1404c:	4b03      	ldr	r3, [pc, #12]	; (1405c <_ZN5Print5printEmi+0x40>)
   1404e:	4798      	blx	r3
   14050:	4603      	mov	r3, r0
}
   14052:	4618      	mov	r0, r3
   14054:	3710      	adds	r7, #16
   14056:	46bd      	mov	sp, r7
   14058:	bd80      	pop	{r7, pc}
   1405a:	bf00      	nop
   1405c:	000140ed 	.word	0x000140ed

00014060 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   14060:	b580      	push	{r7, lr}
   14062:	b084      	sub	sp, #16
   14064:	af00      	add	r7, sp, #0
   14066:	6078      	str	r0, [r7, #4]
   14068:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   1406a:	6839      	ldr	r1, [r7, #0]
   1406c:	6878      	ldr	r0, [r7, #4]
   1406e:	4b07      	ldr	r3, [pc, #28]	; (1408c <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   14070:	4798      	blx	r3
   14072:	60f8      	str	r0, [r7, #12]
  n += println();
   14074:	6878      	ldr	r0, [r7, #4]
   14076:	4b06      	ldr	r3, [pc, #24]	; (14090 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   14078:	4798      	blx	r3
   1407a:	4602      	mov	r2, r0
   1407c:	68fb      	ldr	r3, [r7, #12]
   1407e:	4413      	add	r3, r2
   14080:	60fb      	str	r3, [r7, #12]
  return n;
   14082:	68fb      	ldr	r3, [r7, #12]
}
   14084:	4618      	mov	r0, r3
   14086:	3710      	adds	r7, #16
   14088:	46bd      	mov	sp, r7
   1408a:	bd80      	pop	{r7, pc}
   1408c:	00013f91 	.word	0x00013f91
   14090:	00014095 	.word	0x00014095

00014094 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   14094:	b580      	push	{r7, lr}
   14096:	b082      	sub	sp, #8
   14098:	af00      	add	r7, sp, #0
   1409a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   1409c:	4904      	ldr	r1, [pc, #16]	; (140b0 <_ZN5Print7printlnEv+0x1c>)
   1409e:	6878      	ldr	r0, [r7, #4]
   140a0:	4b04      	ldr	r3, [pc, #16]	; (140b4 <_ZN5Print7printlnEv+0x20>)
   140a2:	4798      	blx	r3
   140a4:	4603      	mov	r3, r0
}
   140a6:	4618      	mov	r0, r3
   140a8:	3708      	adds	r7, #8
   140aa:	46bd      	mov	sp, r7
   140ac:	bd80      	pop	{r7, pc}
   140ae:	bf00      	nop
   140b0:	000185b0 	.word	0x000185b0
   140b4:	00001ed1 	.word	0x00001ed1

000140b8 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   140b8:	b580      	push	{r7, lr}
   140ba:	b084      	sub	sp, #16
   140bc:	af00      	add	r7, sp, #0
   140be:	6078      	str	r0, [r7, #4]
   140c0:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   140c2:	6839      	ldr	r1, [r7, #0]
   140c4:	6878      	ldr	r0, [r7, #4]
   140c6:	4b07      	ldr	r3, [pc, #28]	; (140e4 <_ZN5Print7printlnEPKc+0x2c>)
   140c8:	4798      	blx	r3
   140ca:	60f8      	str	r0, [r7, #12]
  n += println();
   140cc:	6878      	ldr	r0, [r7, #4]
   140ce:	4b06      	ldr	r3, [pc, #24]	; (140e8 <_ZN5Print7printlnEPKc+0x30>)
   140d0:	4798      	blx	r3
   140d2:	4602      	mov	r2, r0
   140d4:	68fb      	ldr	r3, [r7, #12]
   140d6:	4413      	add	r3, r2
   140d8:	60fb      	str	r3, [r7, #12]
  return n;
   140da:	68fb      	ldr	r3, [r7, #12]
}
   140dc:	4618      	mov	r0, r3
   140de:	3710      	adds	r7, #16
   140e0:	46bd      	mov	sp, r7
   140e2:	bd80      	pop	{r7, pc}
   140e4:	00013fb1 	.word	0x00013fb1
   140e8:	00014095 	.word	0x00014095

000140ec <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   140ec:	b580      	push	{r7, lr}
   140ee:	b08e      	sub	sp, #56	; 0x38
   140f0:	af00      	add	r7, sp, #0
   140f2:	60f8      	str	r0, [r7, #12]
   140f4:	60b9      	str	r1, [r7, #8]
   140f6:	4613      	mov	r3, r2
   140f8:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   140fa:	f107 0310 	add.w	r3, r7, #16
   140fe:	3320      	adds	r3, #32
   14100:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   14102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14104:	2200      	movs	r2, #0
   14106:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   14108:	79fb      	ldrb	r3, [r7, #7]
   1410a:	2b01      	cmp	r3, #1
   1410c:	dc01      	bgt.n	14112 <_ZN5Print11printNumberEmh+0x26>
   1410e:	230a      	movs	r3, #10
   14110:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   14112:	79fa      	ldrb	r2, [r7, #7]
   14114:	68bb      	ldr	r3, [r7, #8]
   14116:	fbb3 f1f2 	udiv	r1, r3, r2
   1411a:	fb02 f201 	mul.w	r2, r2, r1
   1411e:	1a9b      	subs	r3, r3, r2
   14120:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   14124:	79fb      	ldrb	r3, [r7, #7]
   14126:	68ba      	ldr	r2, [r7, #8]
   14128:	fbb2 f3f3 	udiv	r3, r2, r3
   1412c:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14130:	3b01      	subs	r3, #1
   14132:	637b      	str	r3, [r7, #52]	; 0x34
   14134:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14138:	2b09      	cmp	r3, #9
   1413a:	dc04      	bgt.n	14146 <_ZN5Print11printNumberEmh+0x5a>
   1413c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   14140:	3330      	adds	r3, #48	; 0x30
   14142:	b2db      	uxtb	r3, r3
   14144:	e003      	b.n	1414e <_ZN5Print11printNumberEmh+0x62>
   14146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1414a:	3337      	adds	r3, #55	; 0x37
   1414c:	b2db      	uxtb	r3, r3
   1414e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14150:	7013      	strb	r3, [r2, #0]
  } while(n);
   14152:	68bb      	ldr	r3, [r7, #8]
   14154:	2b00      	cmp	r3, #0
   14156:	d000      	beq.n	1415a <_ZN5Print11printNumberEmh+0x6e>
  do {
   14158:	e7db      	b.n	14112 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   1415a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1415c:	68f8      	ldr	r0, [r7, #12]
   1415e:	4b03      	ldr	r3, [pc, #12]	; (1416c <_ZN5Print11printNumberEmh+0x80>)
   14160:	4798      	blx	r3
   14162:	4603      	mov	r3, r0
}
   14164:	4618      	mov	r0, r3
   14166:	3738      	adds	r7, #56	; 0x38
   14168:	46bd      	mov	sp, r7
   1416a:	bd80      	pop	{r7, pc}
   1416c:	00001ed1 	.word	0x00001ed1

00014170 <hri_port_read_DIR_reg>:
{
   14170:	b480      	push	{r7}
   14172:	b083      	sub	sp, #12
   14174:	af00      	add	r7, sp, #0
   14176:	6078      	str	r0, [r7, #4]
   14178:	460b      	mov	r3, r1
   1417a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   1417c:	78fb      	ldrb	r3, [r7, #3]
   1417e:	687a      	ldr	r2, [r7, #4]
   14180:	01db      	lsls	r3, r3, #7
   14182:	4413      	add	r3, r2
   14184:	681b      	ldr	r3, [r3, #0]
}
   14186:	4618      	mov	r0, r3
   14188:	370c      	adds	r7, #12
   1418a:	46bd      	mov	sp, r7
   1418c:	bc80      	pop	{r7}
   1418e:	4770      	bx	lr

00014190 <hri_port_read_OUT_reg>:
{
   14190:	b480      	push	{r7}
   14192:	b083      	sub	sp, #12
   14194:	af00      	add	r7, sp, #0
   14196:	6078      	str	r0, [r7, #4]
   14198:	460b      	mov	r3, r1
   1419a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   1419c:	78fb      	ldrb	r3, [r7, #3]
   1419e:	687a      	ldr	r2, [r7, #4]
   141a0:	01db      	lsls	r3, r3, #7
   141a2:	4413      	add	r3, r2
   141a4:	3310      	adds	r3, #16
   141a6:	681b      	ldr	r3, [r3, #0]
}
   141a8:	4618      	mov	r0, r3
   141aa:	370c      	adds	r7, #12
   141ac:	46bd      	mov	sp, r7
   141ae:	bc80      	pop	{r7}
   141b0:	4770      	bx	lr

000141b2 <hri_port_read_IN_reg>:
{
   141b2:	b480      	push	{r7}
   141b4:	b083      	sub	sp, #12
   141b6:	af00      	add	r7, sp, #0
   141b8:	6078      	str	r0, [r7, #4]
   141ba:	460b      	mov	r3, r1
   141bc:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   141be:	78fb      	ldrb	r3, [r7, #3]
   141c0:	687a      	ldr	r2, [r7, #4]
   141c2:	01db      	lsls	r3, r3, #7
   141c4:	4413      	add	r3, r2
   141c6:	3320      	adds	r3, #32
   141c8:	681b      	ldr	r3, [r3, #0]
}
   141ca:	4618      	mov	r0, r3
   141cc:	370c      	adds	r7, #12
   141ce:	46bd      	mov	sp, r7
   141d0:	bc80      	pop	{r7}
   141d2:	4770      	bx	lr

000141d4 <_gpio_get_level>:
{
   141d4:	b580      	push	{r7, lr}
   141d6:	b086      	sub	sp, #24
   141d8:	af00      	add	r7, sp, #0
   141da:	4603      	mov	r3, r0
   141dc:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   141de:	f107 030c 	add.w	r3, r7, #12
   141e2:	4618      	mov	r0, r3
   141e4:	4b13      	ldr	r3, [pc, #76]	; (14234 <_gpio_get_level+0x60>)
   141e6:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   141e8:	79fb      	ldrb	r3, [r7, #7]
   141ea:	4619      	mov	r1, r3
   141ec:	4812      	ldr	r0, [pc, #72]	; (14238 <_gpio_get_level+0x64>)
   141ee:	4b13      	ldr	r3, [pc, #76]	; (1423c <_gpio_get_level+0x68>)
   141f0:	4798      	blx	r3
   141f2:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   141f4:	79fb      	ldrb	r3, [r7, #7]
   141f6:	4619      	mov	r1, r3
   141f8:	480f      	ldr	r0, [pc, #60]	; (14238 <_gpio_get_level+0x64>)
   141fa:	4b11      	ldr	r3, [pc, #68]	; (14240 <_gpio_get_level+0x6c>)
   141fc:	4798      	blx	r3
   141fe:	4602      	mov	r2, r0
   14200:	697b      	ldr	r3, [r7, #20]
   14202:	43db      	mvns	r3, r3
   14204:	4013      	ands	r3, r2
   14206:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   14208:	79fb      	ldrb	r3, [r7, #7]
   1420a:	4619      	mov	r1, r3
   1420c:	480a      	ldr	r0, [pc, #40]	; (14238 <_gpio_get_level+0x64>)
   1420e:	4b0d      	ldr	r3, [pc, #52]	; (14244 <_gpio_get_level+0x70>)
   14210:	4798      	blx	r3
   14212:	4602      	mov	r2, r0
   14214:	697b      	ldr	r3, [r7, #20]
   14216:	4013      	ands	r3, r2
   14218:	693a      	ldr	r2, [r7, #16]
   1421a:	4313      	orrs	r3, r2
   1421c:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   1421e:	f107 030c 	add.w	r3, r7, #12
   14222:	4618      	mov	r0, r3
   14224:	4b08      	ldr	r3, [pc, #32]	; (14248 <_gpio_get_level+0x74>)
   14226:	4798      	blx	r3
	return tmp;
   14228:	693b      	ldr	r3, [r7, #16]
}
   1422a:	4618      	mov	r0, r3
   1422c:	3718      	adds	r7, #24
   1422e:	46bd      	mov	sp, r7
   14230:	bd80      	pop	{r7, pc}
   14232:	bf00      	nop
   14234:	0000e53d 	.word	0x0000e53d
   14238:	41008000 	.word	0x41008000
   1423c:	00014171 	.word	0x00014171
   14240:	000141b3 	.word	0x000141b3
   14244:	00014191 	.word	0x00014191
   14248:	0000e563 	.word	0x0000e563

0001424c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   1424c:	b580      	push	{r7, lr}
   1424e:	b082      	sub	sp, #8
   14250:	af00      	add	r7, sp, #0
   14252:	4603      	mov	r3, r0
   14254:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   14256:	79fb      	ldrb	r3, [r7, #7]
   14258:	115b      	asrs	r3, r3, #5
   1425a:	b2db      	uxtb	r3, r3
   1425c:	4618      	mov	r0, r3
   1425e:	4b09      	ldr	r3, [pc, #36]	; (14284 <gpio_get_pin_level+0x38>)
   14260:	4798      	blx	r3
   14262:	4601      	mov	r1, r0
   14264:	79fb      	ldrb	r3, [r7, #7]
   14266:	f003 031f 	and.w	r3, r3, #31
   1426a:	2201      	movs	r2, #1
   1426c:	fa02 f303 	lsl.w	r3, r2, r3
   14270:	400b      	ands	r3, r1
   14272:	2b00      	cmp	r3, #0
   14274:	bf14      	ite	ne
   14276:	2301      	movne	r3, #1
   14278:	2300      	moveq	r3, #0
   1427a:	b2db      	uxtb	r3, r3
}
   1427c:	4618      	mov	r0, r3
   1427e:	3708      	adds	r7, #8
   14280:	46bd      	mov	sp, r7
   14282:	bd80      	pop	{r7, pc}
   14284:	000141d5 	.word	0x000141d5

00014288 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   14288:	b480      	push	{r7}
   1428a:	b083      	sub	sp, #12
   1428c:	af00      	add	r7, sp, #0
   1428e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   14290:	4b06      	ldr	r3, [pc, #24]	; (142ac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   14292:	681b      	ldr	r3, [r3, #0]
   14294:	2201      	movs	r2, #1
   14296:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
   14298:	4b04      	ldr	r3, [pc, #16]	; (142ac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   1429a:	681b      	ldr	r3, [r3, #0]
   1429c:	2200      	movs	r2, #0
   1429e:	705a      	strb	r2, [r3, #1]
}
   142a0:	bf00      	nop
   142a2:	370c      	adds	r7, #12
   142a4:	46bd      	mov	sp, r7
   142a6:	bc80      	pop	{r7}
   142a8:	4770      	bx	lr
   142aa:	bf00      	nop
   142ac:	20004d94 	.word	0x20004d94

000142b0 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   142b0:	b480      	push	{r7}
   142b2:	b083      	sub	sp, #12
   142b4:	af00      	add	r7, sp, #0
   142b6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   142b8:	4a04      	ldr	r2, [pc, #16]	; (142cc <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   142ba:	687b      	ldr	r3, [r7, #4]
   142bc:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
   142be:	687b      	ldr	r3, [r7, #4]
   142c0:	4618      	mov	r0, r3
   142c2:	370c      	adds	r7, #12
   142c4:	46bd      	mov	sp, r7
   142c6:	bc80      	pop	{r7}
   142c8:	4770      	bx	lr
   142ca:	bf00      	nop
   142cc:	20004d94 	.word	0x20004d94

000142d0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   142d0:	b480      	push	{r7}
   142d2:	b083      	sub	sp, #12
   142d4:	af00      	add	r7, sp, #0
   142d6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   142d8:	687b      	ldr	r3, [r7, #4]
   142da:	4618      	mov	r0, r3
   142dc:	370c      	adds	r7, #12
   142de:	46bd      	mov	sp, r7
   142e0:	bc80      	pop	{r7}
   142e2:	4770      	bx	lr

000142e4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   142e4:	b580      	push	{r7, lr}
   142e6:	b082      	sub	sp, #8
   142e8:	af00      	add	r7, sp, #0
   142ea:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   142ec:	2040      	movs	r0, #64	; 0x40
   142ee:	4b1c      	ldr	r3, [pc, #112]	; (14360 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
   142f0:	4798      	blx	r3
   142f2:	4603      	mov	r3, r0
   142f4:	461a      	mov	r2, r3
   142f6:	687b      	ldr	r3, [r7, #4]
   142f8:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   142fa:	687b      	ldr	r3, [r7, #4]
   142fc:	78db      	ldrb	r3, [r3, #3]
   142fe:	2b00      	cmp	r3, #0
   14300:	d024      	beq.n	1434c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
   14302:	687b      	ldr	r3, [r7, #4]
   14304:	2200      	movs	r2, #0
   14306:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
   14308:	687b      	ldr	r3, [r7, #4]
   1430a:	2201      	movs	r2, #1
   1430c:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   1430e:	f44f 7216 	mov.w	r2, #600	; 0x258
   14312:	4914      	ldr	r1, [pc, #80]	; (14364 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
   14314:	4814      	ldr	r0, [pc, #80]	; (14368 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   14316:	4b15      	ldr	r3, [pc, #84]	; (1436c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   14318:	4798      	blx	r3
			usbTerminalTimer.Start();
   1431a:	4813      	ldr	r0, [pc, #76]	; (14368 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   1431c:	4b14      	ldr	r3, [pc, #80]	; (14370 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   1431e:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   14320:	4814      	ldr	r0, [pc, #80]	; (14374 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   14322:	4b15      	ldr	r3, [pc, #84]	; (14378 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   14324:	4798      	blx	r3
   14326:	4603      	mov	r3, r0
   14328:	f083 0301 	eor.w	r3, r3, #1
   1432c:	b2db      	uxtb	r3, r3
   1432e:	2b00      	cmp	r3, #0
   14330:	d008      	beq.n	14344 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
   14332:	687b      	ldr	r3, [r7, #4]
   14334:	789b      	ldrb	r3, [r3, #2]
   14336:	b2db      	uxtb	r3, r3
   14338:	2b00      	cmp	r3, #0
   1433a:	d0f1      	beq.n	14320 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
   1433c:	687b      	ldr	r3, [r7, #4]
   1433e:	2200      	movs	r2, #0
   14340:	701a      	strb	r2, [r3, #0]
					return;
   14342:	e009      	b.n	14358 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   14344:	4808      	ldr	r0, [pc, #32]	; (14368 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   14346:	4b0d      	ldr	r3, [pc, #52]	; (1437c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   14348:	4798      	blx	r3
   1434a:	e005      	b.n	14358 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
   1434c:	687b      	ldr	r3, [r7, #4]
   1434e:	2200      	movs	r2, #0
   14350:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
   14352:	687b      	ldr	r3, [r7, #4]
   14354:	2200      	movs	r2, #0
   14356:	705a      	strb	r2, [r3, #1]
		}
		
}
   14358:	3708      	adds	r7, #8
   1435a:	46bd      	mov	sp, r7
   1435c:	bd80      	pop	{r7, pc}
   1435e:	bf00      	nop
   14360:	0001424d 	.word	0x0001424d
   14364:	00014289 	.word	0x00014289
   14368:	20004e3c 	.word	0x20004e3c
   1436c:	00014529 	.word	0x00014529
   14370:	00014475 	.word	0x00014475
   14374:	20004d34 	.word	0x20004d34
   14378:	00013c5d 	.word	0x00013c5d
   1437c:	00014499 	.word	0x00014499

00014380 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTerminalTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
   14380:	b580      	push	{r7, lr}
   14382:	b082      	sub	sp, #8
   14384:	af00      	add	r7, sp, #0
   14386:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
   14388:	687b      	ldr	r3, [r7, #4]
   1438a:	785b      	ldrb	r3, [r3, #1]
   1438c:	b2db      	uxtb	r3, r3
   1438e:	2b00      	cmp	r3, #0
   14390:	d01f      	beq.n	143d2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
   14392:	687b      	ldr	r3, [r7, #4]
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	b2db      	uxtb	r3, r3
   14398:	2b00      	cmp	r3, #0
   1439a:	d105      	bne.n	143a8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
   1439c:	4812      	ldr	r0, [pc, #72]	; (143e8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
   1439e:	4b13      	ldr	r3, [pc, #76]	; (143ec <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
   143a0:	4798      	blx	r3
   143a2:	4603      	mov	r3, r0
   143a4:	2b00      	cmp	r3, #0
   143a6:	d001      	beq.n	143ac <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
   143a8:	2301      	movs	r3, #1
   143aa:	e000      	b.n	143ae <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
   143ac:	2300      	movs	r3, #0
   143ae:	2b00      	cmp	r3, #0
   143b0:	d00b      	beq.n	143ca <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTerminalTimer.Start()==0;
   143b2:	480f      	ldr	r0, [pc, #60]	; (143f0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
   143b4:	4b0f      	ldr	r3, [pc, #60]	; (143f4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
   143b6:	4798      	blx	r3
   143b8:	4603      	mov	r3, r0
   143ba:	2b00      	cmp	r3, #0
   143bc:	bf0c      	ite	eq
   143be:	2301      	moveq	r3, #1
   143c0:	2300      	movne	r3, #0
   143c2:	b2da      	uxtb	r2, r3
   143c4:	687b      	ldr	r3, [r7, #4]
   143c6:	705a      	strb	r2, [r3, #1]
   143c8:	e007      	b.n	143da <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
   143ca:	687b      	ldr	r3, [r7, #4]
   143cc:	2200      	movs	r2, #0
   143ce:	705a      	strb	r2, [r3, #1]
   143d0:	e003      	b.n	143da <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	785b      	ldrb	r3, [r3, #1]
   143d6:	b2db      	uxtb	r3, r3
   143d8:	e002      	b.n	143e0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
   143da:	687b      	ldr	r3, [r7, #4]
   143dc:	785b      	ldrb	r3, [r3, #1]
   143de:	b2db      	uxtb	r3, r3
}
   143e0:	4618      	mov	r0, r3
   143e2:	3708      	adds	r7, #8
   143e4:	46bd      	mov	sp, r7
   143e6:	bd80      	pop	{r7, pc}
   143e8:	20004d34 	.word	0x20004d34
   143ec:	00013c5d 	.word	0x00013c5d
   143f0:	20004e3c 	.word	0x20004e3c
   143f4:	00014475 	.word	0x00014475

000143f8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   143f8:	b580      	push	{r7, lr}
   143fa:	b082      	sub	sp, #8
   143fc:	af00      	add	r7, sp, #0
   143fe:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   14400:	4b04      	ldr	r3, [pc, #16]	; (14414 <_ZL7task_cbPK10timer_task+0x1c>)
   14402:	681b      	ldr	r3, [r3, #0]
   14404:	4618      	mov	r0, r3
   14406:	4b04      	ldr	r3, [pc, #16]	; (14418 <_ZL7task_cbPK10timer_task+0x20>)
   14408:	4798      	blx	r3
}
   1440a:	bf00      	nop
   1440c:	3708      	adds	r7, #8
   1440e:	46bd      	mov	sp, r7
   14410:	bd80      	pop	{r7, pc}
   14412:	bf00      	nop
   14414:	20004d98 	.word	0x20004d98
   14418:	000144c1 	.word	0x000144c1

0001441c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   1441c:	b480      	push	{r7}
   1441e:	b083      	sub	sp, #12
   14420:	af00      	add	r7, sp, #0
   14422:	6078      	str	r0, [r7, #4]
   14424:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   14426:	687b      	ldr	r3, [r7, #4]
   14428:	683a      	ldr	r2, [r7, #0]
   1442a:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
   1442c:	4a08      	ldr	r2, [pc, #32]	; (14450 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   1442e:	687b      	ldr	r3, [r7, #4]
   14430:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   14432:	687b      	ldr	r3, [r7, #4]
   14434:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14438:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
   1443a:	687b      	ldr	r3, [r7, #4]
   1443c:	689b      	ldr	r3, [r3, #8]
   1443e:	4a05      	ldr	r2, [pc, #20]	; (14454 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   14440:	60da      	str	r2, [r3, #12]
} //Timer_Class
   14442:	687b      	ldr	r3, [r7, #4]
   14444:	4618      	mov	r0, r3
   14446:	370c      	adds	r7, #12
   14448:	46bd      	mov	sp, r7
   1444a:	bc80      	pop	{r7}
   1444c:	4770      	bx	lr
   1444e:	bf00      	nop
   14450:	20004d98 	.word	0x20004d98
   14454:	000143f9 	.word	0x000143f9

00014458 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   14458:	b480      	push	{r7}
   1445a:	b083      	sub	sp, #12
   1445c:	af00      	add	r7, sp, #0
   1445e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   14460:	687b      	ldr	r3, [r7, #4]
   14462:	2200      	movs	r2, #0
   14464:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	4618      	mov	r0, r3
   1446a:	370c      	adds	r7, #12
   1446c:	46bd      	mov	sp, r7
   1446e:	bc80      	pop	{r7}
   14470:	4770      	bx	lr
	...

00014474 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   14474:	b580      	push	{r7, lr}
   14476:	b084      	sub	sp, #16
   14478:	af00      	add	r7, sp, #0
   1447a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   1447c:	687b      	ldr	r3, [r7, #4]
   1447e:	68db      	ldr	r3, [r3, #12]
   14480:	4618      	mov	r0, r3
   14482:	4b04      	ldr	r3, [pc, #16]	; (14494 <_ZN17TimerSerial_Class5StartEv+0x20>)
   14484:	4798      	blx	r3
   14486:	60f8      	str	r0, [r7, #12]
	return status;
   14488:	68fb      	ldr	r3, [r7, #12]
	
}
   1448a:	4618      	mov	r0, r3
   1448c:	3710      	adds	r7, #16
   1448e:	46bd      	mov	sp, r7
   14490:	bd80      	pop	{r7, pc}
   14492:	bf00      	nop
   14494:	00005599 	.word	0x00005599

00014498 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   14498:	b580      	push	{r7, lr}
   1449a:	b084      	sub	sp, #16
   1449c:	af00      	add	r7, sp, #0
   1449e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   144a0:	687b      	ldr	r3, [r7, #4]
   144a2:	68db      	ldr	r3, [r3, #12]
   144a4:	4618      	mov	r0, r3
   144a6:	4b05      	ldr	r3, [pc, #20]	; (144bc <_ZN17TimerSerial_Class4StopEv+0x24>)
   144a8:	4798      	blx	r3
   144aa:	60f8      	str	r0, [r7, #12]
	timeout=0;
   144ac:	687b      	ldr	r3, [r7, #4]
   144ae:	2200      	movs	r2, #0
   144b0:	705a      	strb	r2, [r3, #1]
	return status;
   144b2:	68fb      	ldr	r3, [r7, #12]
}
   144b4:	4618      	mov	r0, r3
   144b6:	3710      	adds	r7, #16
   144b8:	46bd      	mov	sp, r7
   144ba:	bd80      	pop	{r7, pc}
   144bc:	000055ed 	.word	0x000055ed

000144c0 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   144c0:	b480      	push	{r7}
   144c2:	b083      	sub	sp, #12
   144c4:	af00      	add	r7, sp, #0
   144c6:	6078      	str	r0, [r7, #4]
	timeout=1;
   144c8:	687b      	ldr	r3, [r7, #4]
   144ca:	2201      	movs	r2, #1
   144cc:	705a      	strb	r2, [r3, #1]
}
   144ce:	bf00      	nop
   144d0:	370c      	adds	r7, #12
   144d2:	46bd      	mov	sp, r7
   144d4:	bc80      	pop	{r7}
   144d6:	4770      	bx	lr

000144d8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   144d8:	b580      	push	{r7, lr}
   144da:	b086      	sub	sp, #24
   144dc:	af00      	add	r7, sp, #0
   144de:	60f8      	str	r0, [r7, #12]
   144e0:	60b9      	str	r1, [r7, #8]
   144e2:	607a      	str	r2, [r7, #4]
   144e4:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   144e6:	68f8      	ldr	r0, [r7, #12]
   144e8:	4b0d      	ldr	r3, [pc, #52]	; (14520 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   144ea:	4798      	blx	r3
	task->interval = interval;
   144ec:	68fb      	ldr	r3, [r7, #12]
   144ee:	689b      	ldr	r3, [r3, #8]
   144f0:	687a      	ldr	r2, [r7, #4]
   144f2:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   144f4:	68fb      	ldr	r3, [r7, #12]
   144f6:	689b      	ldr	r3, [r3, #8]
   144f8:	68ba      	ldr	r2, [r7, #8]
   144fa:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   144fc:	68fb      	ldr	r3, [r7, #12]
   144fe:	689b      	ldr	r3, [r3, #8]
   14500:	78fa      	ldrb	r2, [r7, #3]
   14502:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   14504:	68fb      	ldr	r3, [r7, #12]
   14506:	68da      	ldr	r2, [r3, #12]
   14508:	68fb      	ldr	r3, [r7, #12]
   1450a:	689b      	ldr	r3, [r3, #8]
   1450c:	4619      	mov	r1, r3
   1450e:	4610      	mov	r0, r2
   14510:	4b04      	ldr	r3, [pc, #16]	; (14524 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   14512:	4798      	blx	r3
   14514:	6178      	str	r0, [r7, #20]
	
	return status;
   14516:	697b      	ldr	r3, [r7, #20]
}
   14518:	4618      	mov	r0, r3
   1451a:	3718      	adds	r7, #24
   1451c:	46bd      	mov	sp, r7
   1451e:	bd80      	pop	{r7, pc}
   14520:	00014551 	.word	0x00014551
   14524:	00005649 	.word	0x00005649

00014528 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   14528:	b590      	push	{r4, r7, lr}
   1452a:	b087      	sub	sp, #28
   1452c:	af00      	add	r7, sp, #0
   1452e:	60f8      	str	r0, [r7, #12]
   14530:	60b9      	str	r1, [r7, #8]
   14532:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   14534:	2300      	movs	r3, #0
   14536:	687a      	ldr	r2, [r7, #4]
   14538:	68b9      	ldr	r1, [r7, #8]
   1453a:	68f8      	ldr	r0, [r7, #12]
   1453c:	4c03      	ldr	r4, [pc, #12]	; (1454c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   1453e:	47a0      	blx	r4
   14540:	6178      	str	r0, [r7, #20]
	return status;
   14542:	697b      	ldr	r3, [r7, #20]
}
   14544:	4618      	mov	r0, r3
   14546:	371c      	adds	r7, #28
   14548:	46bd      	mov	sp, r7
   1454a:	bd90      	pop	{r4, r7, pc}
   1454c:	000144d9 	.word	0x000144d9

00014550 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   14550:	b480      	push	{r7}
   14552:	b083      	sub	sp, #12
   14554:	af00      	add	r7, sp, #0
   14556:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
   14558:	687b      	ldr	r3, [r7, #4]
   1455a:	2200      	movs	r2, #0
   1455c:	771a      	strb	r2, [r3, #28]
   1455e:	687b      	ldr	r3, [r7, #4]
   14560:	7f1b      	ldrb	r3, [r3, #28]
   14562:	2b07      	cmp	r3, #7
   14564:	dc1f      	bgt.n	145a6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	7f1b      	ldrb	r3, [r3, #28]
   1456a:	4619      	mov	r1, r3
   1456c:	4a11      	ldr	r2, [pc, #68]	; (145b4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   1456e:	460b      	mov	r3, r1
   14570:	009b      	lsls	r3, r3, #2
   14572:	440b      	add	r3, r1
   14574:	009b      	lsls	r3, r3, #2
   14576:	4413      	add	r3, r2
   14578:	330c      	adds	r3, #12
   1457a:	681b      	ldr	r3, [r3, #0]
   1457c:	2b00      	cmp	r3, #0
   1457e:	d10b      	bne.n	14598 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
   14580:	687b      	ldr	r3, [r7, #4]
   14582:	7f1b      	ldrb	r3, [r3, #28]
   14584:	461a      	mov	r2, r3
   14586:	4613      	mov	r3, r2
   14588:	009b      	lsls	r3, r3, #2
   1458a:	4413      	add	r3, r2
   1458c:	009b      	lsls	r3, r3, #2
   1458e:	4a09      	ldr	r2, [pc, #36]	; (145b4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   14590:	441a      	add	r2, r3
   14592:	687b      	ldr	r3, [r7, #4]
   14594:	609a      	str	r2, [r3, #8]
			return;
   14596:	e009      	b.n	145ac <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
   14598:	687b      	ldr	r3, [r7, #4]
   1459a:	7f1b      	ldrb	r3, [r3, #28]
   1459c:	3301      	adds	r3, #1
   1459e:	b2da      	uxtb	r2, r3
   145a0:	687b      	ldr	r3, [r7, #4]
   145a2:	771a      	strb	r2, [r3, #28]
   145a4:	e7db      	b.n	1455e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
   145a6:	687b      	ldr	r3, [r7, #4]
   145a8:	4a02      	ldr	r2, [pc, #8]	; (145b4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   145aa:	609a      	str	r2, [r3, #8]

}
   145ac:	370c      	adds	r7, #12
   145ae:	46bd      	mov	sp, r7
   145b0:	bc80      	pop	{r7}
   145b2:	4770      	bx	lr
   145b4:	20004d9c 	.word	0x20004d9c

000145b8 <_Z41__static_initialization_and_destruction_0ii>:

}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   145b8:	b580      	push	{r7, lr}
   145ba:	b082      	sub	sp, #8
   145bc:	af00      	add	r7, sp, #0
   145be:	6078      	str	r0, [r7, #4]
   145c0:	6039      	str	r1, [r7, #0]
   145c2:	687b      	ldr	r3, [r7, #4]
   145c4:	2b01      	cmp	r3, #1
   145c6:	d116      	bne.n	145f6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   145c8:	683b      	ldr	r3, [r7, #0]
   145ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   145ce:	4293      	cmp	r3, r2
   145d0:	d111      	bne.n	145f6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   145d2:	490b      	ldr	r1, [pc, #44]	; (14600 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   145d4:	480b      	ldr	r0, [pc, #44]	; (14604 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   145d6:	4b0c      	ldr	r3, [pc, #48]	; (14608 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   145d8:	4798      	blx	r3
   145da:	4a0c      	ldr	r2, [pc, #48]	; (1460c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   145dc:	490c      	ldr	r1, [pc, #48]	; (14610 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   145de:	4809      	ldr	r0, [pc, #36]	; (14604 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   145e0:	4b0c      	ldr	r3, [pc, #48]	; (14614 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   145e2:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   145e4:	490c      	ldr	r1, [pc, #48]	; (14618 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   145e6:	480d      	ldr	r0, [pc, #52]	; (1461c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   145e8:	4b07      	ldr	r3, [pc, #28]	; (14608 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   145ea:	4798      	blx	r3
   145ec:	4a07      	ldr	r2, [pc, #28]	; (1460c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   145ee:	4908      	ldr	r1, [pc, #32]	; (14610 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   145f0:	480a      	ldr	r0, [pc, #40]	; (1461c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   145f2:	4b08      	ldr	r3, [pc, #32]	; (14614 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   145f4:	4798      	blx	r3
   145f6:	bf00      	nop
   145f8:	3708      	adds	r7, #8
   145fa:	46bd      	mov	sp, r7
   145fc:	bd80      	pop	{r7, pc}
   145fe:	bf00      	nop
   14600:	20004fb0 	.word	0x20004fb0
   14604:	20004e3c 	.word	0x20004e3c
   14608:	0001441d 	.word	0x0001441d
   1460c:	20000000 	.word	0x20000000
   14610:	00014459 	.word	0x00014459
   14614:	00014919 	.word	0x00014919
   14618:	20004ef8 	.word	0x20004ef8
   1461c:	20004e5c 	.word	0x20004e5c

00014620 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   14620:	b580      	push	{r7, lr}
   14622:	af00      	add	r7, sp, #0
   14624:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14628:	2001      	movs	r0, #1
   1462a:	4b01      	ldr	r3, [pc, #4]	; (14630 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   1462c:	4798      	blx	r3
   1462e:	bd80      	pop	{r7, pc}
   14630:	000145b9 	.word	0x000145b9

00014634 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   14634:	b480      	push	{r7}
   14636:	b083      	sub	sp, #12
   14638:	af00      	add	r7, sp, #0
   1463a:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
   1463c:	4b04      	ldr	r3, [pc, #16]	; (14650 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
   1463e:	681b      	ldr	r3, [r3, #0]
   14640:	2201      	movs	r2, #1
   14642:	701a      	strb	r2, [r3, #0]

}
   14644:	bf00      	nop
   14646:	370c      	adds	r7, #12
   14648:	46bd      	mov	sp, r7
   1464a:	bc80      	pop	{r7}
   1464c:	4770      	bx	lr
   1464e:	bf00      	nop
   14650:	20004e7c 	.word	0x20004e7c

00014654 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   14654:	b480      	push	{r7}
   14656:	b083      	sub	sp, #12
   14658:	af00      	add	r7, sp, #0
   1465a:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
   1465c:	4b04      	ldr	r3, [pc, #16]	; (14670 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
   1465e:	681b      	ldr	r3, [r3, #0]
   14660:	2201      	movs	r2, #1
   14662:	705a      	strb	r2, [r3, #1]
}
   14664:	bf00      	nop
   14666:	370c      	adds	r7, #12
   14668:	46bd      	mov	sp, r7
   1466a:	bc80      	pop	{r7}
   1466c:	4770      	bx	lr
   1466e:	bf00      	nop
   14670:	20004e7c 	.word	0x20004e7c

00014674 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   14674:	b580      	push	{r7, lr}
   14676:	b082      	sub	sp, #8
   14678:	af00      	add	r7, sp, #0
   1467a:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
   1467c:	4b08      	ldr	r3, [pc, #32]	; (146a0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	4618      	mov	r0, r3
   14682:	4b08      	ldr	r3, [pc, #32]	; (146a4 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   14684:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   14686:	4b06      	ldr	r3, [pc, #24]	; (146a0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   14688:	681b      	ldr	r3, [r3, #0]
   1468a:	2201      	movs	r2, #1
   1468c:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
   1468e:	4b04      	ldr	r3, [pc, #16]	; (146a0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
   14690:	681b      	ldr	r3, [r3, #0]
   14692:	2201      	movs	r2, #1
   14694:	705a      	strb	r2, [r3, #1]
 }
   14696:	bf00      	nop
   14698:	3708      	adds	r7, #8
   1469a:	46bd      	mov	sp, r7
   1469c:	bd80      	pop	{r7, pc}
   1469e:	bf00      	nop
   146a0:	20004e7c 	.word	0x20004e7c
   146a4:	00014859 	.word	0x00014859

000146a8 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   146a8:	b480      	push	{r7}
   146aa:	b083      	sub	sp, #12
   146ac:	af00      	add	r7, sp, #0
   146ae:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
   146b0:	687b      	ldr	r3, [r7, #4]
   146b2:	4a05      	ldr	r2, [pc, #20]	; (146c8 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
   146b4:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
   146b6:	4a05      	ldr	r2, [pc, #20]	; (146cc <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
   146b8:	687b      	ldr	r3, [r7, #4]
   146ba:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   146bc:	687b      	ldr	r3, [r7, #4]
   146be:	4618      	mov	r0, r3
   146c0:	370c      	adds	r7, #12
   146c2:	46bd      	mov	sp, r7
   146c4:	bc80      	pop	{r7}
   146c6:	4770      	bx	lr
   146c8:	20004fcc 	.word	0x20004fcc
   146cc:	20004e7c 	.word	0x20004e7c

000146d0 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   146d0:	b480      	push	{r7}
   146d2:	b083      	sub	sp, #12
   146d4:	af00      	add	r7, sp, #0
   146d6:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
   146d8:	687b      	ldr	r3, [r7, #4]
   146da:	4618      	mov	r0, r3
   146dc:	370c      	adds	r7, #12
   146de:	46bd      	mov	sp, r7
   146e0:	bc80      	pop	{r7}
   146e2:	4770      	bx	lr

000146e4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   146e4:	b480      	push	{r7}
   146e6:	b083      	sub	sp, #12
   146e8:	af00      	add	r7, sp, #0
   146ea:	6078      	str	r0, [r7, #4]
   146ec:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   146ee:	687b      	ldr	r3, [r7, #4]
   146f0:	683a      	ldr	r2, [r7, #0]
   146f2:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
   146f4:	4a03      	ldr	r2, [pc, #12]	; (14704 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
   146f6:	687b      	ldr	r3, [r7, #4]
   146f8:	6013      	str	r3, [r2, #0]
}
   146fa:	bf00      	nop
   146fc:	370c      	adds	r7, #12
   146fe:	46bd      	mov	sp, r7
   14700:	bc80      	pop	{r7}
   14702:	4770      	bx	lr
   14704:	20004e7c 	.word	0x20004e7c

00014708 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
   14708:	b580      	push	{r7, lr}
   1470a:	b084      	sub	sp, #16
   1470c:	af00      	add	r7, sp, #0
   1470e:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   14710:	687b      	ldr	r3, [r7, #4]
   14712:	689a      	ldr	r2, [r3, #8]
   14714:	687b      	ldr	r3, [r7, #4]
   14716:	3304      	adds	r3, #4
   14718:	4619      	mov	r1, r3
   1471a:	4610      	mov	r0, r2
   1471c:	4b14      	ldr	r3, [pc, #80]	; (14770 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
   1471e:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   14720:	687b      	ldr	r3, [r7, #4]
   14722:	689b      	ldr	r3, [r3, #8]
   14724:	4618      	mov	r0, r3
   14726:	4b13      	ldr	r3, [pc, #76]	; (14774 <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
   14728:	4798      	blx	r3
   1472a:	4603      	mov	r3, r0
   1472c:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   1472e:	687b      	ldr	r3, [r7, #4]
   14730:	689b      	ldr	r3, [r3, #8]
   14732:	4a11      	ldr	r2, [pc, #68]	; (14778 <_ZN14I2C_Asyn_Class4InitEv+0x70>)
   14734:	2101      	movs	r1, #1
   14736:	4618      	mov	r0, r3
   14738:	4b10      	ldr	r3, [pc, #64]	; (1477c <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   1473a:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   1473c:	687b      	ldr	r3, [r7, #4]
   1473e:	689b      	ldr	r3, [r3, #8]
   14740:	4a0f      	ldr	r2, [pc, #60]	; (14780 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
   14742:	2102      	movs	r1, #2
   14744:	4618      	mov	r0, r3
   14746:	4b0d      	ldr	r3, [pc, #52]	; (1477c <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   14748:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   1474a:	687b      	ldr	r3, [r7, #4]
   1474c:	689b      	ldr	r3, [r3, #8]
   1474e:	4a0d      	ldr	r2, [pc, #52]	; (14784 <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
   14750:	2100      	movs	r1, #0
   14752:	4618      	mov	r0, r3
   14754:	4b09      	ldr	r3, [pc, #36]	; (1477c <_ZN14I2C_Asyn_Class4InitEv+0x74>)
   14756:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
   14758:	687b      	ldr	r3, [r7, #4]
   1475a:	2201      	movs	r2, #1
   1475c:	701a      	strb	r2, [r3, #0]
	rxReady=true;
   1475e:	687b      	ldr	r3, [r7, #4]
   14760:	2201      	movs	r2, #1
   14762:	705a      	strb	r2, [r3, #1]
	return ena;
   14764:	7bfb      	ldrb	r3, [r7, #15]
	
}
   14766:	4618      	mov	r0, r3
   14768:	3710      	adds	r7, #16
   1476a:	46bd      	mov	sp, r7
   1476c:	bd80      	pop	{r7, pc}
   1476e:	bf00      	nop
   14770:	00004cab 	.word	0x00004cab
   14774:	00004bbd 	.word	0x00004bbd
   14778:	00014635 	.word	0x00014635
   1477c:	00004c63 	.word	0x00004c63
   14780:	00014655 	.word	0x00014655
   14784:	00014675 	.word	0x00014675

00014788 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
   14788:	b580      	push	{r7, lr}
   1478a:	b084      	sub	sp, #16
   1478c:	af00      	add	r7, sp, #0
   1478e:	6078      	str	r0, [r7, #4]
   14790:	460b      	mov	r3, r1
   14792:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
   14794:	6878      	ldr	r0, [r7, #4]
   14796:	4b0c      	ldr	r3, [pc, #48]	; (147c8 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
   14798:	4798      	blx	r3
   1479a:	4603      	mov	r3, r0
   1479c:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   1479e:	687b      	ldr	r3, [r7, #4]
   147a0:	689b      	ldr	r3, [r3, #8]
   147a2:	78fa      	ldrb	r2, [r7, #3]
   147a4:	b211      	sxth	r1, r2
   147a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   147aa:	4618      	mov	r0, r3
   147ac:	4b07      	ldr	r3, [pc, #28]	; (147cc <_ZN14I2C_Asyn_Class4InitEh+0x44>)
   147ae:	4798      	blx	r3
	txReady=true;
   147b0:	687b      	ldr	r3, [r7, #4]
   147b2:	2201      	movs	r2, #1
   147b4:	701a      	strb	r2, [r3, #0]
	rxReady=true;
   147b6:	687b      	ldr	r3, [r7, #4]
   147b8:	2201      	movs	r2, #1
   147ba:	705a      	strb	r2, [r3, #1]
	return ena;
   147bc:	7bfb      	ldrb	r3, [r7, #15]
}
   147be:	4618      	mov	r0, r3
   147c0:	3710      	adds	r7, #16
   147c2:	46bd      	mov	sp, r7
   147c4:	bd80      	pop	{r7, pc}
   147c6:	bf00      	nop
   147c8:	00014709 	.word	0x00014709
   147cc:	00004c29 	.word	0x00004c29

000147d0 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   147d0:	b580      	push	{r7, lr}
   147d2:	b084      	sub	sp, #16
   147d4:	af00      	add	r7, sp, #0
   147d6:	60f8      	str	r0, [r7, #12]
   147d8:	60b9      	str	r1, [r7, #8]
   147da:	4613      	mov	r3, r2
   147dc:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   147de:	68fb      	ldr	r3, [r7, #12]
   147e0:	781b      	ldrb	r3, [r3, #0]
   147e2:	b2db      	uxtb	r3, r3
   147e4:	f083 0301 	eor.w	r3, r3, #1
   147e8:	b2db      	uxtb	r3, r3
   147ea:	2b00      	cmp	r3, #0
   147ec:	d000      	beq.n	147f0 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   147ee:	e7f6      	b.n	147de <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   147f0:	68fb      	ldr	r3, [r7, #12]
   147f2:	2200      	movs	r2, #0
   147f4:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
   147f6:	68fb      	ldr	r3, [r7, #12]
   147f8:	685b      	ldr	r3, [r3, #4]
   147fa:	88fa      	ldrh	r2, [r7, #6]
   147fc:	68b9      	ldr	r1, [r7, #8]
   147fe:	4618      	mov	r0, r3
   14800:	4b03      	ldr	r3, [pc, #12]	; (14810 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   14802:	4798      	blx	r3
   14804:	4603      	mov	r3, r0
}
   14806:	4618      	mov	r0, r3
   14808:	3710      	adds	r7, #16
   1480a:	46bd      	mov	sp, r7
   1480c:	bd80      	pop	{r7, pc}
   1480e:	bf00      	nop
   14810:	00014879 	.word	0x00014879

00014814 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   14814:	b580      	push	{r7, lr}
   14816:	b084      	sub	sp, #16
   14818:	af00      	add	r7, sp, #0
   1481a:	60f8      	str	r0, [r7, #12]
   1481c:	60b9      	str	r1, [r7, #8]
   1481e:	4613      	mov	r3, r2
   14820:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   14822:	68fb      	ldr	r3, [r7, #12]
   14824:	785b      	ldrb	r3, [r3, #1]
   14826:	b2db      	uxtb	r3, r3
   14828:	f083 0301 	eor.w	r3, r3, #1
   1482c:	b2db      	uxtb	r3, r3
   1482e:	2b00      	cmp	r3, #0
   14830:	d000      	beq.n	14834 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   14832:	e7f6      	b.n	14822 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   14834:	68fb      	ldr	r3, [r7, #12]
   14836:	2200      	movs	r2, #0
   14838:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
   1483a:	68fb      	ldr	r3, [r7, #12]
   1483c:	685b      	ldr	r3, [r3, #4]
   1483e:	88fa      	ldrh	r2, [r7, #6]
   14840:	68b9      	ldr	r1, [r7, #8]
   14842:	4618      	mov	r0, r3
   14844:	4b03      	ldr	r3, [pc, #12]	; (14854 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   14846:	4798      	blx	r3
   14848:	4603      	mov	r3, r0
}
   1484a:	4618      	mov	r0, r3
   1484c:	3710      	adds	r7, #16
   1484e:	46bd      	mov	sp, r7
   14850:	bd80      	pop	{r7, pc}
   14852:	bf00      	nop
   14854:	000148c9 	.word	0x000148c9

00014858 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   14858:	b480      	push	{r7}
   1485a:	b083      	sub	sp, #12
   1485c:	af00      	add	r7, sp, #0
   1485e:	6078      	str	r0, [r7, #4]
	 ack=false;
   14860:	687b      	ldr	r3, [r7, #4]
   14862:	2200      	movs	r2, #0
   14864:	709a      	strb	r2, [r3, #2]
	 return ack;
   14866:	687b      	ldr	r3, [r7, #4]
   14868:	789b      	ldrb	r3, [r3, #2]
   1486a:	b2db      	uxtb	r3, r3
   1486c:	4618      	mov	r0, r3
   1486e:	370c      	adds	r7, #12
   14870:	46bd      	mov	sp, r7
   14872:	bc80      	pop	{r7}
   14874:	4770      	bx	lr
	...

00014878 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   14878:	b580      	push	{r7, lr}
   1487a:	b084      	sub	sp, #16
   1487c:	af00      	add	r7, sp, #0
   1487e:	60f8      	str	r0, [r7, #12]
   14880:	60b9      	str	r1, [r7, #8]
   14882:	4613      	mov	r3, r2
   14884:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   14886:	68fb      	ldr	r3, [r7, #12]
   14888:	2b00      	cmp	r3, #0
   1488a:	d004      	beq.n	14896 <io_write+0x1e>
   1488c:	68bb      	ldr	r3, [r7, #8]
   1488e:	2b00      	cmp	r3, #0
   14890:	d001      	beq.n	14896 <io_write+0x1e>
   14892:	2301      	movs	r3, #1
   14894:	e000      	b.n	14898 <io_write+0x20>
   14896:	2300      	movs	r3, #0
   14898:	f003 0301 	and.w	r3, r3, #1
   1489c:	b2db      	uxtb	r3, r3
   1489e:	2234      	movs	r2, #52	; 0x34
   148a0:	4907      	ldr	r1, [pc, #28]	; (148c0 <io_write+0x48>)
   148a2:	4618      	mov	r0, r3
   148a4:	4b07      	ldr	r3, [pc, #28]	; (148c4 <io_write+0x4c>)
   148a6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   148a8:	68fb      	ldr	r3, [r7, #12]
   148aa:	681b      	ldr	r3, [r3, #0]
   148ac:	88fa      	ldrh	r2, [r7, #6]
   148ae:	68b9      	ldr	r1, [r7, #8]
   148b0:	68f8      	ldr	r0, [r7, #12]
   148b2:	4798      	blx	r3
   148b4:	4603      	mov	r3, r0
}
   148b6:	4618      	mov	r0, r3
   148b8:	3710      	adds	r7, #16
   148ba:	46bd      	mov	sp, r7
   148bc:	bd80      	pop	{r7, pc}
   148be:	bf00      	nop
   148c0:	000185d8 	.word	0x000185d8
   148c4:	00006251 	.word	0x00006251

000148c8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   148c8:	b580      	push	{r7, lr}
   148ca:	b084      	sub	sp, #16
   148cc:	af00      	add	r7, sp, #0
   148ce:	60f8      	str	r0, [r7, #12]
   148d0:	60b9      	str	r1, [r7, #8]
   148d2:	4613      	mov	r3, r2
   148d4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   148d6:	68fb      	ldr	r3, [r7, #12]
   148d8:	2b00      	cmp	r3, #0
   148da:	d004      	beq.n	148e6 <io_read+0x1e>
   148dc:	68bb      	ldr	r3, [r7, #8]
   148de:	2b00      	cmp	r3, #0
   148e0:	d001      	beq.n	148e6 <io_read+0x1e>
   148e2:	2301      	movs	r3, #1
   148e4:	e000      	b.n	148e8 <io_read+0x20>
   148e6:	2300      	movs	r3, #0
   148e8:	f003 0301 	and.w	r3, r3, #1
   148ec:	b2db      	uxtb	r3, r3
   148ee:	223d      	movs	r2, #61	; 0x3d
   148f0:	4907      	ldr	r1, [pc, #28]	; (14910 <io_read+0x48>)
   148f2:	4618      	mov	r0, r3
   148f4:	4b07      	ldr	r3, [pc, #28]	; (14914 <io_read+0x4c>)
   148f6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   148f8:	68fb      	ldr	r3, [r7, #12]
   148fa:	685b      	ldr	r3, [r3, #4]
   148fc:	88fa      	ldrh	r2, [r7, #6]
   148fe:	68b9      	ldr	r1, [r7, #8]
   14900:	68f8      	ldr	r0, [r7, #12]
   14902:	4798      	blx	r3
   14904:	4603      	mov	r3, r0
}
   14906:	4618      	mov	r0, r3
   14908:	3710      	adds	r7, #16
   1490a:	46bd      	mov	sp, r7
   1490c:	bd80      	pop	{r7, pc}
   1490e:	bf00      	nop
   14910:	000185d8 	.word	0x000185d8
   14914:	00006251 	.word	0x00006251

00014918 <__aeabi_atexit>:
   14918:	460b      	mov	r3, r1
   1491a:	4601      	mov	r1, r0
   1491c:	4618      	mov	r0, r3
   1491e:	f001 bdbd 	b.w	1649c <__cxa_atexit>
   14922:	bf00      	nop

00014924 <_ZdlPvj>:
   14924:	f7fc bcec 	b.w	11300 <_ZdlPv>

00014928 <floor>:
   14928:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1492c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14930:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   14934:	2e13      	cmp	r6, #19
   14936:	460b      	mov	r3, r1
   14938:	460d      	mov	r5, r1
   1493a:	4604      	mov	r4, r0
   1493c:	4688      	mov	r8, r1
   1493e:	4607      	mov	r7, r0
   14940:	dc1d      	bgt.n	1497e <floor+0x56>
   14942:	2e00      	cmp	r6, #0
   14944:	db40      	blt.n	149c8 <floor+0xa0>
   14946:	4a3c      	ldr	r2, [pc, #240]	; (14a38 <floor+0x110>)
   14948:	fa42 f906 	asr.w	r9, r2, r6
   1494c:	ea01 0209 	and.w	r2, r1, r9
   14950:	4302      	orrs	r2, r0
   14952:	4686      	mov	lr, r0
   14954:	d018      	beq.n	14988 <floor+0x60>
   14956:	a336      	add	r3, pc, #216	; (adr r3, 14a30 <floor+0x108>)
   14958:	e9d3 2300 	ldrd	r2, r3, [r3]
   1495c:	f001 f91c 	bl	15b98 <__adddf3>
   14960:	2200      	movs	r2, #0
   14962:	2300      	movs	r3, #0
   14964:	f001 fd5a 	bl	1641c <__aeabi_dcmpgt>
   14968:	b120      	cbz	r0, 14974 <floor+0x4c>
   1496a:	2d00      	cmp	r5, #0
   1496c:	db42      	blt.n	149f4 <floor+0xcc>
   1496e:	ea28 0509 	bic.w	r5, r8, r9
   14972:	2700      	movs	r7, #0
   14974:	463c      	mov	r4, r7
   14976:	4629      	mov	r1, r5
   14978:	4620      	mov	r0, r4
   1497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1497e:	2e33      	cmp	r6, #51	; 0x33
   14980:	dd06      	ble.n	14990 <floor+0x68>
   14982:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   14986:	d02f      	beq.n	149e8 <floor+0xc0>
   14988:	4619      	mov	r1, r3
   1498a:	4620      	mov	r0, r4
   1498c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14990:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   14994:	f04f 39ff 	mov.w	r9, #4294967295
   14998:	fa29 f902 	lsr.w	r9, r9, r2
   1499c:	ea10 0f09 	tst.w	r0, r9
   149a0:	d0f2      	beq.n	14988 <floor+0x60>
   149a2:	a323      	add	r3, pc, #140	; (adr r3, 14a30 <floor+0x108>)
   149a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   149a8:	f001 f8f6 	bl	15b98 <__adddf3>
   149ac:	2200      	movs	r2, #0
   149ae:	2300      	movs	r3, #0
   149b0:	f001 fd34 	bl	1641c <__aeabi_dcmpgt>
   149b4:	2800      	cmp	r0, #0
   149b6:	d0dd      	beq.n	14974 <floor+0x4c>
   149b8:	2d00      	cmp	r5, #0
   149ba:	db21      	blt.n	14a00 <floor+0xd8>
   149bc:	4645      	mov	r5, r8
   149be:	ea27 0709 	bic.w	r7, r7, r9
   149c2:	463c      	mov	r4, r7
   149c4:	4629      	mov	r1, r5
   149c6:	e7d7      	b.n	14978 <floor+0x50>
   149c8:	a319      	add	r3, pc, #100	; (adr r3, 14a30 <floor+0x108>)
   149ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   149ce:	f001 f8e3 	bl	15b98 <__adddf3>
   149d2:	2200      	movs	r2, #0
   149d4:	2300      	movs	r3, #0
   149d6:	f001 fd21 	bl	1641c <__aeabi_dcmpgt>
   149da:	2800      	cmp	r0, #0
   149dc:	d0ca      	beq.n	14974 <floor+0x4c>
   149de:	2d00      	cmp	r5, #0
   149e0:	db19      	blt.n	14a16 <floor+0xee>
   149e2:	2700      	movs	r7, #0
   149e4:	463d      	mov	r5, r7
   149e6:	e7c5      	b.n	14974 <floor+0x4c>
   149e8:	4602      	mov	r2, r0
   149ea:	460b      	mov	r3, r1
   149ec:	f001 f8d4 	bl	15b98 <__adddf3>
   149f0:	4604      	mov	r4, r0
   149f2:	e7ca      	b.n	1498a <floor+0x62>
   149f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   149f8:	fa43 f606 	asr.w	r6, r3, r6
   149fc:	44b0      	add	r8, r6
   149fe:	e7b6      	b.n	1496e <floor+0x46>
   14a00:	2e14      	cmp	r6, #20
   14a02:	d010      	beq.n	14a26 <floor+0xfe>
   14a04:	2301      	movs	r3, #1
   14a06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   14a0a:	fa03 f606 	lsl.w	r6, r3, r6
   14a0e:	1937      	adds	r7, r6, r4
   14a10:	bf28      	it	cs
   14a12:	4498      	addcs	r8, r3
   14a14:	e7d2      	b.n	149bc <floor+0x94>
   14a16:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   14a1a:	4b08      	ldr	r3, [pc, #32]	; (14a3c <floor+0x114>)
   14a1c:	4322      	orrs	r2, r4
   14a1e:	bf18      	it	ne
   14a20:	461d      	movne	r5, r3
   14a22:	2700      	movs	r7, #0
   14a24:	e7a6      	b.n	14974 <floor+0x4c>
   14a26:	f105 0801 	add.w	r8, r5, #1
   14a2a:	e7c7      	b.n	149bc <floor+0x94>
   14a2c:	f3af 8000 	nop.w
   14a30:	8800759c 	.word	0x8800759c
   14a34:	7e37e43c 	.word	0x7e37e43c
   14a38:	000fffff 	.word	0x000fffff
   14a3c:	bff00000 	.word	0xbff00000

00014a40 <pow>:
   14a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a44:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 14d38 <pow+0x2f8>
   14a48:	b08d      	sub	sp, #52	; 0x34
   14a4a:	4606      	mov	r6, r0
   14a4c:	460f      	mov	r7, r1
   14a4e:	4614      	mov	r4, r2
   14a50:	461d      	mov	r5, r3
   14a52:	f000 f975 	bl	14d40 <__ieee754_pow>
   14a56:	f999 8000 	ldrsb.w	r8, [r9]
   14a5a:	f1b8 3fff 	cmp.w	r8, #4294967295
   14a5e:	e9cd 0100 	strd	r0, r1, [sp]
   14a62:	d036      	beq.n	14ad2 <pow+0x92>
   14a64:	4622      	mov	r2, r4
   14a66:	462b      	mov	r3, r5
   14a68:	4620      	mov	r0, r4
   14a6a:	4629      	mov	r1, r5
   14a6c:	f001 fce0 	bl	16430 <__aeabi_dcmpun>
   14a70:	4683      	mov	fp, r0
   14a72:	bb70      	cbnz	r0, 14ad2 <pow+0x92>
   14a74:	4632      	mov	r2, r6
   14a76:	463b      	mov	r3, r7
   14a78:	4630      	mov	r0, r6
   14a7a:	4639      	mov	r1, r7
   14a7c:	f001 fcd8 	bl	16430 <__aeabi_dcmpun>
   14a80:	2200      	movs	r2, #0
   14a82:	4682      	mov	sl, r0
   14a84:	2300      	movs	r3, #0
   14a86:	2800      	cmp	r0, #0
   14a88:	f040 80a0 	bne.w	14bcc <pow+0x18c>
   14a8c:	4630      	mov	r0, r6
   14a8e:	4639      	mov	r1, r7
   14a90:	f001 fc9c 	bl	163cc <__aeabi_dcmpeq>
   14a94:	b310      	cbz	r0, 14adc <pow+0x9c>
   14a96:	2200      	movs	r2, #0
   14a98:	2300      	movs	r3, #0
   14a9a:	4620      	mov	r0, r4
   14a9c:	4629      	mov	r1, r5
   14a9e:	f001 fc95 	bl	163cc <__aeabi_dcmpeq>
   14aa2:	4683      	mov	fp, r0
   14aa4:	2800      	cmp	r0, #0
   14aa6:	d06a      	beq.n	14b7e <pow+0x13e>
   14aa8:	2201      	movs	r2, #1
   14aaa:	4b9c      	ldr	r3, [pc, #624]	; (14d1c <pow+0x2dc>)
   14aac:	9202      	str	r2, [sp, #8]
   14aae:	2100      	movs	r1, #0
   14ab0:	2200      	movs	r2, #0
   14ab2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   14ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14aba:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14abe:	e9cd 1208 	strd	r1, r2, [sp, #32]
   14ac2:	9303      	str	r3, [sp, #12]
   14ac4:	f1b8 0f00 	cmp.w	r8, #0
   14ac8:	d045      	beq.n	14b56 <pow+0x116>
   14aca:	4c95      	ldr	r4, [pc, #596]	; (14d20 <pow+0x2e0>)
   14acc:	2300      	movs	r3, #0
   14ace:	e9cd 3400 	strd	r3, r4, [sp]
   14ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
   14ad6:	b00d      	add	sp, #52	; 0x34
   14ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14adc:	e9dd 0100 	ldrd	r0, r1, [sp]
   14ae0:	f000 ff34 	bl	1594c <finite>
   14ae4:	4680      	mov	r8, r0
   14ae6:	2800      	cmp	r0, #0
   14ae8:	f000 808b 	beq.w	14c02 <pow+0x1c2>
   14aec:	f04f 0a00 	mov.w	sl, #0
   14af0:	f04f 0b00 	mov.w	fp, #0
   14af4:	4652      	mov	r2, sl
   14af6:	465b      	mov	r3, fp
   14af8:	e9dd 0100 	ldrd	r0, r1, [sp]
   14afc:	f001 fc66 	bl	163cc <__aeabi_dcmpeq>
   14b00:	2800      	cmp	r0, #0
   14b02:	d0e6      	beq.n	14ad2 <pow+0x92>
   14b04:	4630      	mov	r0, r6
   14b06:	4639      	mov	r1, r7
   14b08:	f000 ff20 	bl	1594c <finite>
   14b0c:	2800      	cmp	r0, #0
   14b0e:	d0e0      	beq.n	14ad2 <pow+0x92>
   14b10:	4620      	mov	r0, r4
   14b12:	4629      	mov	r1, r5
   14b14:	f000 ff1a 	bl	1594c <finite>
   14b18:	2800      	cmp	r0, #0
   14b1a:	d0da      	beq.n	14ad2 <pow+0x92>
   14b1c:	f999 3000 	ldrsb.w	r3, [r9]
   14b20:	4a7e      	ldr	r2, [pc, #504]	; (14d1c <pow+0x2dc>)
   14b22:	9203      	str	r2, [sp, #12]
   14b24:	2104      	movs	r1, #4
   14b26:	2200      	movs	r2, #0
   14b28:	2b02      	cmp	r3, #2
   14b2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14b2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14b32:	e9cd ab08 	strd	sl, fp, [sp, #32]
   14b36:	9102      	str	r1, [sp, #8]
   14b38:	920a      	str	r2, [sp, #40]	; 0x28
   14b3a:	d003      	beq.n	14b44 <pow+0x104>
   14b3c:	a802      	add	r0, sp, #8
   14b3e:	f000 ff0b 	bl	15958 <matherr>
   14b42:	b968      	cbnz	r0, 14b60 <pow+0x120>
   14b44:	f001 fcb6 	bl	164b4 <__errno>
   14b48:	2322      	movs	r3, #34	; 0x22
   14b4a:	6003      	str	r3, [r0, #0]
   14b4c:	e008      	b.n	14b60 <pow+0x120>
   14b4e:	2300      	movs	r3, #0
   14b50:	2400      	movs	r4, #0
   14b52:	e9cd 3408 	strd	r3, r4, [sp, #32]
   14b56:	a802      	add	r0, sp, #8
   14b58:	f000 fefe 	bl	15958 <matherr>
   14b5c:	2800      	cmp	r0, #0
   14b5e:	d030      	beq.n	14bc2 <pow+0x182>
   14b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b62:	b11b      	cbz	r3, 14b6c <pow+0x12c>
   14b64:	f001 fca6 	bl	164b4 <__errno>
   14b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b6a:	6003      	str	r3, [r0, #0]
   14b6c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   14b70:	e9cd 3400 	strd	r3, r4, [sp]
   14b74:	e9dd 0100 	ldrd	r0, r1, [sp]
   14b78:	b00d      	add	sp, #52	; 0x34
   14b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b7e:	4620      	mov	r0, r4
   14b80:	4629      	mov	r1, r5
   14b82:	f000 fee3 	bl	1594c <finite>
   14b86:	2800      	cmp	r0, #0
   14b88:	d0a3      	beq.n	14ad2 <pow+0x92>
   14b8a:	2200      	movs	r2, #0
   14b8c:	2300      	movs	r3, #0
   14b8e:	4620      	mov	r0, r4
   14b90:	4629      	mov	r1, r5
   14b92:	f001 fc25 	bl	163e0 <__aeabi_dcmplt>
   14b96:	2800      	cmp	r0, #0
   14b98:	d09b      	beq.n	14ad2 <pow+0x92>
   14b9a:	f999 3000 	ldrsb.w	r3, [r9]
   14b9e:	4a5f      	ldr	r2, [pc, #380]	; (14d1c <pow+0x2dc>)
   14ba0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   14ba4:	2101      	movs	r1, #1
   14ba6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14baa:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14bae:	9102      	str	r1, [sp, #8]
   14bb0:	9203      	str	r2, [sp, #12]
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	d0cb      	beq.n	14b4e <pow+0x10e>
   14bb6:	495b      	ldr	r1, [pc, #364]	; (14d24 <pow+0x2e4>)
   14bb8:	2000      	movs	r0, #0
   14bba:	2b02      	cmp	r3, #2
   14bbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   14bc0:	d1c9      	bne.n	14b56 <pow+0x116>
   14bc2:	f001 fc77 	bl	164b4 <__errno>
   14bc6:	2321      	movs	r3, #33	; 0x21
   14bc8:	6003      	str	r3, [r0, #0]
   14bca:	e7c9      	b.n	14b60 <pow+0x120>
   14bcc:	4620      	mov	r0, r4
   14bce:	4629      	mov	r1, r5
   14bd0:	f001 fbfc 	bl	163cc <__aeabi_dcmpeq>
   14bd4:	2800      	cmp	r0, #0
   14bd6:	f43f af7c 	beq.w	14ad2 <pow+0x92>
   14bda:	4b51      	ldr	r3, [pc, #324]	; (14d20 <pow+0x2e0>)
   14bdc:	494f      	ldr	r1, [pc, #316]	; (14d1c <pow+0x2dc>)
   14bde:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   14be2:	2001      	movs	r0, #1
   14be4:	2200      	movs	r2, #0
   14be6:	f1b8 0f02 	cmp.w	r8, #2
   14bea:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14bee:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14bf2:	9002      	str	r0, [sp, #8]
   14bf4:	9103      	str	r1, [sp, #12]
   14bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14bfa:	d1ac      	bne.n	14b56 <pow+0x116>
   14bfc:	e9cd 2300 	strd	r2, r3, [sp]
   14c00:	e767      	b.n	14ad2 <pow+0x92>
   14c02:	4630      	mov	r0, r6
   14c04:	4639      	mov	r1, r7
   14c06:	f000 fea1 	bl	1594c <finite>
   14c0a:	2800      	cmp	r0, #0
   14c0c:	f43f af6e 	beq.w	14aec <pow+0xac>
   14c10:	4620      	mov	r0, r4
   14c12:	4629      	mov	r1, r5
   14c14:	f000 fe9a 	bl	1594c <finite>
   14c18:	2800      	cmp	r0, #0
   14c1a:	f43f af67 	beq.w	14aec <pow+0xac>
   14c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
   14c22:	4610      	mov	r0, r2
   14c24:	4619      	mov	r1, r3
   14c26:	f001 fc03 	bl	16430 <__aeabi_dcmpun>
   14c2a:	2800      	cmp	r0, #0
   14c2c:	d158      	bne.n	14ce0 <pow+0x2a0>
   14c2e:	2303      	movs	r3, #3
   14c30:	f999 8000 	ldrsb.w	r8, [r9]
   14c34:	9302      	str	r3, [sp, #8]
   14c36:	4b39      	ldr	r3, [pc, #228]	; (14d1c <pow+0x2dc>)
   14c38:	900a      	str	r0, [sp, #40]	; 0x28
   14c3a:	9303      	str	r3, [sp, #12]
   14c3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14c40:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14c44:	2200      	movs	r2, #0
   14c46:	2300      	movs	r3, #0
   14c48:	4630      	mov	r0, r6
   14c4a:	4639      	mov	r1, r7
   14c4c:	f1b8 0f00 	cmp.w	r8, #0
   14c50:	d126      	bne.n	14ca0 <pow+0x260>
   14c52:	4f35      	ldr	r7, [pc, #212]	; (14d28 <pow+0x2e8>)
   14c54:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   14c58:	e9cd 6708 	strd	r6, r7, [sp, #32]
   14c5c:	f001 fbc0 	bl	163e0 <__aeabi_dcmplt>
   14c60:	2800      	cmp	r0, #0
   14c62:	f43f af6b 	beq.w	14b3c <pow+0xfc>
   14c66:	2200      	movs	r2, #0
   14c68:	4b30      	ldr	r3, [pc, #192]	; (14d2c <pow+0x2ec>)
   14c6a:	4620      	mov	r0, r4
   14c6c:	4629      	mov	r1, r5
   14c6e:	f001 f945 	bl	15efc <__aeabi_dmul>
   14c72:	4604      	mov	r4, r0
   14c74:	460d      	mov	r5, r1
   14c76:	f000 fe77 	bl	15968 <rint>
   14c7a:	4602      	mov	r2, r0
   14c7c:	460b      	mov	r3, r1
   14c7e:	4620      	mov	r0, r4
   14c80:	4629      	mov	r1, r5
   14c82:	f001 fba3 	bl	163cc <__aeabi_dcmpeq>
   14c86:	bb40      	cbnz	r0, 14cda <pow+0x29a>
   14c88:	4b29      	ldr	r3, [pc, #164]	; (14d30 <pow+0x2f0>)
   14c8a:	f999 8000 	ldrsb.w	r8, [r9]
   14c8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   14c92:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14c96:	f1b8 0f02 	cmp.w	r8, #2
   14c9a:	f47f af4f 	bne.w	14b3c <pow+0xfc>
   14c9e:	e751      	b.n	14b44 <pow+0x104>
   14ca0:	4f24      	ldr	r7, [pc, #144]	; (14d34 <pow+0x2f4>)
   14ca2:	2600      	movs	r6, #0
   14ca4:	e9cd 6708 	strd	r6, r7, [sp, #32]
   14ca8:	f001 fb9a 	bl	163e0 <__aeabi_dcmplt>
   14cac:	2800      	cmp	r0, #0
   14cae:	d0f2      	beq.n	14c96 <pow+0x256>
   14cb0:	2200      	movs	r2, #0
   14cb2:	4b1e      	ldr	r3, [pc, #120]	; (14d2c <pow+0x2ec>)
   14cb4:	4620      	mov	r0, r4
   14cb6:	4629      	mov	r1, r5
   14cb8:	f001 f920 	bl	15efc <__aeabi_dmul>
   14cbc:	4604      	mov	r4, r0
   14cbe:	460d      	mov	r5, r1
   14cc0:	f000 fe52 	bl	15968 <rint>
   14cc4:	4602      	mov	r2, r0
   14cc6:	460b      	mov	r3, r1
   14cc8:	4620      	mov	r0, r4
   14cca:	4629      	mov	r1, r5
   14ccc:	f001 fb7e 	bl	163cc <__aeabi_dcmpeq>
   14cd0:	b918      	cbnz	r0, 14cda <pow+0x29a>
   14cd2:	4b14      	ldr	r3, [pc, #80]	; (14d24 <pow+0x2e4>)
   14cd4:	2200      	movs	r2, #0
   14cd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   14cda:	f999 8000 	ldrsb.w	r8, [r9]
   14cde:	e7da      	b.n	14c96 <pow+0x256>
   14ce0:	f999 9000 	ldrsb.w	r9, [r9]
   14ce4:	4b0d      	ldr	r3, [pc, #52]	; (14d1c <pow+0x2dc>)
   14ce6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   14cea:	2201      	movs	r2, #1
   14cec:	e9cd 6704 	strd	r6, r7, [sp, #16]
   14cf0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14cf4:	9202      	str	r2, [sp, #8]
   14cf6:	9303      	str	r3, [sp, #12]
   14cf8:	f1b9 0f00 	cmp.w	r9, #0
   14cfc:	f43f af27 	beq.w	14b4e <pow+0x10e>
   14d00:	2200      	movs	r2, #0
   14d02:	2300      	movs	r3, #0
   14d04:	4610      	mov	r0, r2
   14d06:	4619      	mov	r1, r3
   14d08:	f001 fa22 	bl	16150 <__aeabi_ddiv>
   14d0c:	f1b9 0f02 	cmp.w	r9, #2
   14d10:	e9cd 0108 	strd	r0, r1, [sp, #32]
   14d14:	f43f af55 	beq.w	14bc2 <pow+0x182>
   14d18:	e71d      	b.n	14b56 <pow+0x116>
   14d1a:	bf00      	nop
   14d1c:	000185ec 	.word	0x000185ec
   14d20:	3ff00000 	.word	0x3ff00000
   14d24:	fff00000 	.word	0xfff00000
   14d28:	47efffff 	.word	0x47efffff
   14d2c:	3fe00000 	.word	0x3fe00000
   14d30:	c7efffff 	.word	0xc7efffff
   14d34:	7ff00000 	.word	0x7ff00000
   14d38:	200001c3 	.word	0x200001c3
   14d3c:	00000000 	.word	0x00000000

00014d40 <__ieee754_pow>:
   14d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d44:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   14d48:	ea57 0402 	orrs.w	r4, r7, r2
   14d4c:	b093      	sub	sp, #76	; 0x4c
   14d4e:	d037      	beq.n	14dc0 <__ieee754_pow+0x80>
   14d50:	4c67      	ldr	r4, [pc, #412]	; (14ef0 <__ieee754_pow+0x1b0>)
   14d52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   14d56:	42a6      	cmp	r6, r4
   14d58:	4683      	mov	fp, r0
   14d5a:	460d      	mov	r5, r1
   14d5c:	dc29      	bgt.n	14db2 <__ieee754_pow+0x72>
   14d5e:	469a      	mov	sl, r3
   14d60:	4696      	mov	lr, r2
   14d62:	d025      	beq.n	14db0 <__ieee754_pow+0x70>
   14d64:	42a7      	cmp	r7, r4
   14d66:	dc24      	bgt.n	14db2 <__ieee754_pow+0x72>
   14d68:	4c61      	ldr	r4, [pc, #388]	; (14ef0 <__ieee754_pow+0x1b0>)
   14d6a:	42a7      	cmp	r7, r4
   14d6c:	d079      	beq.n	14e62 <__ieee754_pow+0x122>
   14d6e:	2d00      	cmp	r5, #0
   14d70:	4689      	mov	r9, r1
   14d72:	4680      	mov	r8, r0
   14d74:	e9cd 2300 	strd	r2, r3, [sp]
   14d78:	db77      	blt.n	14e6a <__ieee754_pow+0x12a>
   14d7a:	2400      	movs	r4, #0
   14d7c:	f1be 0f00 	cmp.w	lr, #0
   14d80:	d12c      	bne.n	14ddc <__ieee754_pow+0x9c>
   14d82:	4b5b      	ldr	r3, [pc, #364]	; (14ef0 <__ieee754_pow+0x1b0>)
   14d84:	429f      	cmp	r7, r3
   14d86:	f000 808b 	beq.w	14ea0 <__ieee754_pow+0x160>
   14d8a:	4b5a      	ldr	r3, [pc, #360]	; (14ef4 <__ieee754_pow+0x1b4>)
   14d8c:	429f      	cmp	r7, r3
   14d8e:	d061      	beq.n	14e54 <__ieee754_pow+0x114>
   14d90:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   14d94:	f000 83ba 	beq.w	1550c <__ieee754_pow+0x7cc>
   14d98:	4b57      	ldr	r3, [pc, #348]	; (14ef8 <__ieee754_pow+0x1b8>)
   14d9a:	459a      	cmp	sl, r3
   14d9c:	d11e      	bne.n	14ddc <__ieee754_pow+0x9c>
   14d9e:	2d00      	cmp	r5, #0
   14da0:	db1c      	blt.n	14ddc <__ieee754_pow+0x9c>
   14da2:	4640      	mov	r0, r8
   14da4:	4649      	mov	r1, r9
   14da6:	b013      	add	sp, #76	; 0x4c
   14da8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dac:	f000 bd0e 	b.w	157cc <__ieee754_sqrt>
   14db0:	b158      	cbz	r0, 14dca <__ieee754_pow+0x8a>
   14db2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   14db6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   14dba:	ea56 030b 	orrs.w	r3, r6, fp
   14dbe:	d106      	bne.n	14dce <__ieee754_pow+0x8e>
   14dc0:	494c      	ldr	r1, [pc, #304]	; (14ef4 <__ieee754_pow+0x1b4>)
   14dc2:	2000      	movs	r0, #0
   14dc4:	b013      	add	sp, #76	; 0x4c
   14dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dca:	42b7      	cmp	r7, r6
   14dcc:	ddcc      	ble.n	14d68 <__ieee754_pow+0x28>
   14dce:	484b      	ldr	r0, [pc, #300]	; (14efc <__ieee754_pow+0x1bc>)
   14dd0:	b013      	add	sp, #76	; 0x4c
   14dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dd6:	f000 bdc1 	b.w	1595c <nan>
   14dda:	2400      	movs	r4, #0
   14ddc:	4640      	mov	r0, r8
   14dde:	4649      	mov	r1, r9
   14de0:	f000 fdb0 	bl	15944 <fabs>
   14de4:	f1bb 0f00 	cmp.w	fp, #0
   14de8:	d119      	bne.n	14e1e <__ieee754_pow+0xde>
   14dea:	b126      	cbz	r6, 14df6 <__ieee754_pow+0xb6>
   14dec:	4b41      	ldr	r3, [pc, #260]	; (14ef4 <__ieee754_pow+0x1b4>)
   14dee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   14df2:	429a      	cmp	r2, r3
   14df4:	d113      	bne.n	14e1e <__ieee754_pow+0xde>
   14df6:	f1ba 0f00 	cmp.w	sl, #0
   14dfa:	f2c0 83bc 	blt.w	15576 <__ieee754_pow+0x836>
   14dfe:	2d00      	cmp	r5, #0
   14e00:	dae0      	bge.n	14dc4 <__ieee754_pow+0x84>
   14e02:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   14e06:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   14e0a:	ea56 0304 	orrs.w	r3, r6, r4
   14e0e:	f000 848f 	beq.w	15730 <__ieee754_pow+0x9f0>
   14e12:	2c01      	cmp	r4, #1
   14e14:	d1d6      	bne.n	14dc4 <__ieee754_pow+0x84>
   14e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   14e1a:	4619      	mov	r1, r3
   14e1c:	e7d2      	b.n	14dc4 <__ieee754_pow+0x84>
   14e1e:	0fed      	lsrs	r5, r5, #31
   14e20:	3d01      	subs	r5, #1
   14e22:	ea54 0305 	orrs.w	r3, r4, r5
   14e26:	d04e      	beq.n	14ec6 <__ieee754_pow+0x186>
   14e28:	4b35      	ldr	r3, [pc, #212]	; (14f00 <__ieee754_pow+0x1c0>)
   14e2a:	429f      	cmp	r7, r3
   14e2c:	dd6e      	ble.n	14f0c <__ieee754_pow+0x1cc>
   14e2e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   14e32:	429f      	cmp	r7, r3
   14e34:	f340 83e8 	ble.w	15608 <__ieee754_pow+0x8c8>
   14e38:	4b32      	ldr	r3, [pc, #200]	; (14f04 <__ieee754_pow+0x1c4>)
   14e3a:	429e      	cmp	r6, r3
   14e3c:	dd4e      	ble.n	14edc <__ieee754_pow+0x19c>
   14e3e:	f1ba 0f00 	cmp.w	sl, #0
   14e42:	dd4e      	ble.n	14ee2 <__ieee754_pow+0x1a2>
   14e44:	a328      	add	r3, pc, #160	; (adr r3, 14ee8 <__ieee754_pow+0x1a8>)
   14e46:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e4a:	4610      	mov	r0, r2
   14e4c:	4619      	mov	r1, r3
   14e4e:	f001 f855 	bl	15efc <__aeabi_dmul>
   14e52:	e7b7      	b.n	14dc4 <__ieee754_pow+0x84>
   14e54:	f1ba 0f00 	cmp.w	sl, #0
   14e58:	f2c0 843c 	blt.w	156d4 <__ieee754_pow+0x994>
   14e5c:	4640      	mov	r0, r8
   14e5e:	4649      	mov	r1, r9
   14e60:	e7b0      	b.n	14dc4 <__ieee754_pow+0x84>
   14e62:	f1be 0f00 	cmp.w	lr, #0
   14e66:	d082      	beq.n	14d6e <__ieee754_pow+0x2e>
   14e68:	e7a3      	b.n	14db2 <__ieee754_pow+0x72>
   14e6a:	4b27      	ldr	r3, [pc, #156]	; (14f08 <__ieee754_pow+0x1c8>)
   14e6c:	429f      	cmp	r7, r3
   14e6e:	dc28      	bgt.n	14ec2 <__ieee754_pow+0x182>
   14e70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   14e74:	429f      	cmp	r7, r3
   14e76:	dd80      	ble.n	14d7a <__ieee754_pow+0x3a>
   14e78:	153b      	asrs	r3, r7, #20
   14e7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   14e7e:	2b14      	cmp	r3, #20
   14e80:	f340 843e 	ble.w	15700 <__ieee754_pow+0x9c0>
   14e84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   14e88:	fa2e f203 	lsr.w	r2, lr, r3
   14e8c:	fa02 f303 	lsl.w	r3, r2, r3
   14e90:	459e      	cmp	lr, r3
   14e92:	f47f af72 	bne.w	14d7a <__ieee754_pow+0x3a>
   14e96:	f002 0201 	and.w	r2, r2, #1
   14e9a:	f1c2 0402 	rsb	r4, r2, #2
   14e9e:	e76d      	b.n	14d7c <__ieee754_pow+0x3c>
   14ea0:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   14ea4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   14ea8:	ea53 030b 	orrs.w	r3, r3, fp
   14eac:	d088      	beq.n	14dc0 <__ieee754_pow+0x80>
   14eae:	4b15      	ldr	r3, [pc, #84]	; (14f04 <__ieee754_pow+0x1c4>)
   14eb0:	429e      	cmp	r6, r3
   14eb2:	f340 8332 	ble.w	1551a <__ieee754_pow+0x7da>
   14eb6:	f1ba 0f00 	cmp.w	sl, #0
   14eba:	db12      	blt.n	14ee2 <__ieee754_pow+0x1a2>
   14ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
   14ec0:	e780      	b.n	14dc4 <__ieee754_pow+0x84>
   14ec2:	2402      	movs	r4, #2
   14ec4:	e75a      	b.n	14d7c <__ieee754_pow+0x3c>
   14ec6:	4642      	mov	r2, r8
   14ec8:	464b      	mov	r3, r9
   14eca:	4640      	mov	r0, r8
   14ecc:	4649      	mov	r1, r9
   14ece:	f000 fe61 	bl	15b94 <__aeabi_dsub>
   14ed2:	4602      	mov	r2, r0
   14ed4:	460b      	mov	r3, r1
   14ed6:	f001 f93b 	bl	16150 <__aeabi_ddiv>
   14eda:	e773      	b.n	14dc4 <__ieee754_pow+0x84>
   14edc:	f1ba 0f00 	cmp.w	sl, #0
   14ee0:	dbb0      	blt.n	14e44 <__ieee754_pow+0x104>
   14ee2:	2000      	movs	r0, #0
   14ee4:	2100      	movs	r1, #0
   14ee6:	e76d      	b.n	14dc4 <__ieee754_pow+0x84>
   14ee8:	8800759c 	.word	0x8800759c
   14eec:	7e37e43c 	.word	0x7e37e43c
   14ef0:	7ff00000 	.word	0x7ff00000
   14ef4:	3ff00000 	.word	0x3ff00000
   14ef8:	3fe00000 	.word	0x3fe00000
   14efc:	000185f0 	.word	0x000185f0
   14f00:	41e00000 	.word	0x41e00000
   14f04:	3fefffff 	.word	0x3fefffff
   14f08:	433fffff 	.word	0x433fffff
   14f0c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   14f10:	f04f 0200 	mov.w	r2, #0
   14f14:	da05      	bge.n	14f22 <__ieee754_pow+0x1e2>
   14f16:	4bd4      	ldr	r3, [pc, #848]	; (15268 <__ieee754_pow+0x528>)
   14f18:	f000 fff0 	bl	15efc <__aeabi_dmul>
   14f1c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   14f20:	460e      	mov	r6, r1
   14f22:	1533      	asrs	r3, r6, #20
   14f24:	4fd1      	ldr	r7, [pc, #836]	; (1526c <__ieee754_pow+0x52c>)
   14f26:	f3c6 0613 	ubfx	r6, r6, #0, #20
   14f2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   14f2e:	4413      	add	r3, r2
   14f30:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   14f34:	42be      	cmp	r6, r7
   14f36:	461a      	mov	r2, r3
   14f38:	930d      	str	r3, [sp, #52]	; 0x34
   14f3a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   14f3e:	f340 8321 	ble.w	15584 <__ieee754_pow+0x844>
   14f42:	4bcb      	ldr	r3, [pc, #812]	; (15270 <__ieee754_pow+0x530>)
   14f44:	429e      	cmp	r6, r3
   14f46:	f340 83fd 	ble.w	15744 <__ieee754_pow+0xa04>
   14f4a:	4613      	mov	r3, r2
   14f4c:	3301      	adds	r3, #1
   14f4e:	930d      	str	r3, [sp, #52]	; 0x34
   14f50:	4bc8      	ldr	r3, [pc, #800]	; (15274 <__ieee754_pow+0x534>)
   14f52:	2200      	movs	r2, #0
   14f54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14f58:	2700      	movs	r7, #0
   14f5a:	2600      	movs	r6, #0
   14f5c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   14f60:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   14f64:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   14f68:	2700      	movs	r7, #0
   14f6a:	4602      	mov	r2, r0
   14f6c:	4653      	mov	r3, sl
   14f6e:	4651      	mov	r1, sl
   14f70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   14f74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14f78:	f000 fe0c 	bl	15b94 <__aeabi_dsub>
   14f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14f80:	4680      	mov	r8, r0
   14f82:	4689      	mov	r9, r1
   14f84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   14f88:	f000 fe06 	bl	15b98 <__adddf3>
   14f8c:	4602      	mov	r2, r0
   14f8e:	460b      	mov	r3, r1
   14f90:	2000      	movs	r0, #0
   14f92:	49b8      	ldr	r1, [pc, #736]	; (15274 <__ieee754_pow+0x534>)
   14f94:	f001 f8dc 	bl	16150 <__aeabi_ddiv>
   14f98:	460a      	mov	r2, r1
   14f9a:	4601      	mov	r1, r0
   14f9c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   14fa0:	4613      	mov	r3, r2
   14fa2:	4649      	mov	r1, r9
   14fa4:	4602      	mov	r2, r0
   14fa6:	4640      	mov	r0, r8
   14fa8:	f000 ffa8 	bl	15efc <__aeabi_dmul>
   14fac:	ea4f 036a 	mov.w	r3, sl, asr #1
   14fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   14fb4:	468c      	mov	ip, r1
   14fb6:	4683      	mov	fp, r0
   14fb8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   14fbc:	e9cd bc04 	strd	fp, ip, [sp, #16]
   14fc0:	46da      	mov	sl, fp
   14fc2:	468b      	mov	fp, r1
   14fc4:	19d9      	adds	r1, r3, r7
   14fc6:	2300      	movs	r3, #0
   14fc8:	e9cd ab02 	strd	sl, fp, [sp, #8]
   14fcc:	9302      	str	r3, [sp, #8]
   14fce:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   14fd2:	2000      	movs	r0, #0
   14fd4:	4606      	mov	r6, r0
   14fd6:	460f      	mov	r7, r1
   14fd8:	4602      	mov	r2, r0
   14fda:	460b      	mov	r3, r1
   14fdc:	4650      	mov	r0, sl
   14fde:	4659      	mov	r1, fp
   14fe0:	f000 ff8c 	bl	15efc <__aeabi_dmul>
   14fe4:	4602      	mov	r2, r0
   14fe6:	460b      	mov	r3, r1
   14fe8:	4640      	mov	r0, r8
   14fea:	4649      	mov	r1, r9
   14fec:	f000 fdd2 	bl	15b94 <__aeabi_dsub>
   14ff0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   14ff4:	4680      	mov	r8, r0
   14ff6:	4689      	mov	r9, r1
   14ff8:	4630      	mov	r0, r6
   14ffa:	4639      	mov	r1, r7
   14ffc:	f000 fdca 	bl	15b94 <__aeabi_dsub>
   15000:	4602      	mov	r2, r0
   15002:	460b      	mov	r3, r1
   15004:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   15008:	f000 fdc4 	bl	15b94 <__aeabi_dsub>
   1500c:	4652      	mov	r2, sl
   1500e:	465b      	mov	r3, fp
   15010:	f000 ff74 	bl	15efc <__aeabi_dmul>
   15014:	4602      	mov	r2, r0
   15016:	460b      	mov	r3, r1
   15018:	4640      	mov	r0, r8
   1501a:	4649      	mov	r1, r9
   1501c:	f000 fdba 	bl	15b94 <__aeabi_dsub>
   15020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   15024:	f000 ff6a 	bl	15efc <__aeabi_dmul>
   15028:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1502c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15030:	4632      	mov	r2, r6
   15032:	463b      	mov	r3, r7
   15034:	4630      	mov	r0, r6
   15036:	4639      	mov	r1, r7
   15038:	f000 ff60 	bl	15efc <__aeabi_dmul>
   1503c:	a378      	add	r3, pc, #480	; (adr r3, 15220 <__ieee754_pow+0x4e0>)
   1503e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15042:	4606      	mov	r6, r0
   15044:	460f      	mov	r7, r1
   15046:	f000 ff59 	bl	15efc <__aeabi_dmul>
   1504a:	a377      	add	r3, pc, #476	; (adr r3, 15228 <__ieee754_pow+0x4e8>)
   1504c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15050:	f000 fda2 	bl	15b98 <__adddf3>
   15054:	4632      	mov	r2, r6
   15056:	463b      	mov	r3, r7
   15058:	f000 ff50 	bl	15efc <__aeabi_dmul>
   1505c:	a374      	add	r3, pc, #464	; (adr r3, 15230 <__ieee754_pow+0x4f0>)
   1505e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15062:	f000 fd99 	bl	15b98 <__adddf3>
   15066:	4632      	mov	r2, r6
   15068:	463b      	mov	r3, r7
   1506a:	f000 ff47 	bl	15efc <__aeabi_dmul>
   1506e:	a372      	add	r3, pc, #456	; (adr r3, 15238 <__ieee754_pow+0x4f8>)
   15070:	e9d3 2300 	ldrd	r2, r3, [r3]
   15074:	f000 fd90 	bl	15b98 <__adddf3>
   15078:	4632      	mov	r2, r6
   1507a:	463b      	mov	r3, r7
   1507c:	f000 ff3e 	bl	15efc <__aeabi_dmul>
   15080:	a36f      	add	r3, pc, #444	; (adr r3, 15240 <__ieee754_pow+0x500>)
   15082:	e9d3 2300 	ldrd	r2, r3, [r3]
   15086:	f000 fd87 	bl	15b98 <__adddf3>
   1508a:	4632      	mov	r2, r6
   1508c:	463b      	mov	r3, r7
   1508e:	f000 ff35 	bl	15efc <__aeabi_dmul>
   15092:	a36d      	add	r3, pc, #436	; (adr r3, 15248 <__ieee754_pow+0x508>)
   15094:	e9d3 2300 	ldrd	r2, r3, [r3]
   15098:	f000 fd7e 	bl	15b98 <__adddf3>
   1509c:	4632      	mov	r2, r6
   1509e:	4680      	mov	r8, r0
   150a0:	4689      	mov	r9, r1
   150a2:	463b      	mov	r3, r7
   150a4:	4630      	mov	r0, r6
   150a6:	4639      	mov	r1, r7
   150a8:	f000 ff28 	bl	15efc <__aeabi_dmul>
   150ac:	4602      	mov	r2, r0
   150ae:	460b      	mov	r3, r1
   150b0:	4640      	mov	r0, r8
   150b2:	4649      	mov	r1, r9
   150b4:	f000 ff22 	bl	15efc <__aeabi_dmul>
   150b8:	4652      	mov	r2, sl
   150ba:	4606      	mov	r6, r0
   150bc:	460f      	mov	r7, r1
   150be:	465b      	mov	r3, fp
   150c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   150c4:	f000 fd68 	bl	15b98 <__adddf3>
   150c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   150cc:	f000 ff16 	bl	15efc <__aeabi_dmul>
   150d0:	4632      	mov	r2, r6
   150d2:	463b      	mov	r3, r7
   150d4:	f000 fd60 	bl	15b98 <__adddf3>
   150d8:	4652      	mov	r2, sl
   150da:	4680      	mov	r8, r0
   150dc:	4689      	mov	r9, r1
   150de:	465b      	mov	r3, fp
   150e0:	4650      	mov	r0, sl
   150e2:	4659      	mov	r1, fp
   150e4:	f000 ff0a 	bl	15efc <__aeabi_dmul>
   150e8:	2200      	movs	r2, #0
   150ea:	4b63      	ldr	r3, [pc, #396]	; (15278 <__ieee754_pow+0x538>)
   150ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   150f0:	f000 fd52 	bl	15b98 <__adddf3>
   150f4:	4642      	mov	r2, r8
   150f6:	464b      	mov	r3, r9
   150f8:	f000 fd4e 	bl	15b98 <__adddf3>
   150fc:	9802      	ldr	r0, [sp, #8]
   150fe:	460f      	mov	r7, r1
   15100:	4606      	mov	r6, r0
   15102:	4632      	mov	r2, r6
   15104:	463b      	mov	r3, r7
   15106:	4650      	mov	r0, sl
   15108:	4659      	mov	r1, fp
   1510a:	f000 fef7 	bl	15efc <__aeabi_dmul>
   1510e:	2200      	movs	r2, #0
   15110:	4682      	mov	sl, r0
   15112:	468b      	mov	fp, r1
   15114:	4b58      	ldr	r3, [pc, #352]	; (15278 <__ieee754_pow+0x538>)
   15116:	4630      	mov	r0, r6
   15118:	4639      	mov	r1, r7
   1511a:	f000 fd3b 	bl	15b94 <__aeabi_dsub>
   1511e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   15122:	f000 fd37 	bl	15b94 <__aeabi_dsub>
   15126:	4602      	mov	r2, r0
   15128:	460b      	mov	r3, r1
   1512a:	4640      	mov	r0, r8
   1512c:	4649      	mov	r1, r9
   1512e:	f000 fd31 	bl	15b94 <__aeabi_dsub>
   15132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15136:	f000 fee1 	bl	15efc <__aeabi_dmul>
   1513a:	4632      	mov	r2, r6
   1513c:	4680      	mov	r8, r0
   1513e:	4689      	mov	r9, r1
   15140:	463b      	mov	r3, r7
   15142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   15146:	f000 fed9 	bl	15efc <__aeabi_dmul>
   1514a:	4602      	mov	r2, r0
   1514c:	460b      	mov	r3, r1
   1514e:	4640      	mov	r0, r8
   15150:	4649      	mov	r1, r9
   15152:	f000 fd21 	bl	15b98 <__adddf3>
   15156:	4680      	mov	r8, r0
   15158:	4689      	mov	r9, r1
   1515a:	4602      	mov	r2, r0
   1515c:	460b      	mov	r3, r1
   1515e:	4650      	mov	r0, sl
   15160:	4659      	mov	r1, fp
   15162:	e9cd ab04 	strd	sl, fp, [sp, #16]
   15166:	f000 fd17 	bl	15b98 <__adddf3>
   1516a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1516e:	a338      	add	r3, pc, #224	; (adr r3, 15250 <__ieee754_pow+0x510>)
   15170:	e9d3 2300 	ldrd	r2, r3, [r3]
   15174:	4650      	mov	r0, sl
   15176:	460f      	mov	r7, r1
   15178:	f000 fec0 	bl	15efc <__aeabi_dmul>
   1517c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15180:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15184:	4639      	mov	r1, r7
   15186:	4650      	mov	r0, sl
   15188:	f000 fd04 	bl	15b94 <__aeabi_dsub>
   1518c:	4602      	mov	r2, r0
   1518e:	460b      	mov	r3, r1
   15190:	4640      	mov	r0, r8
   15192:	4649      	mov	r1, r9
   15194:	f000 fcfe 	bl	15b94 <__aeabi_dsub>
   15198:	a32f      	add	r3, pc, #188	; (adr r3, 15258 <__ieee754_pow+0x518>)
   1519a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1519e:	f000 fead 	bl	15efc <__aeabi_dmul>
   151a2:	a32f      	add	r3, pc, #188	; (adr r3, 15260 <__ieee754_pow+0x520>)
   151a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   151a8:	4680      	mov	r8, r0
   151aa:	4689      	mov	r9, r1
   151ac:	4650      	mov	r0, sl
   151ae:	4639      	mov	r1, r7
   151b0:	f000 fea4 	bl	15efc <__aeabi_dmul>
   151b4:	4602      	mov	r2, r0
   151b6:	460b      	mov	r3, r1
   151b8:	4640      	mov	r0, r8
   151ba:	4649      	mov	r1, r9
   151bc:	f000 fcec 	bl	15b98 <__adddf3>
   151c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   151c4:	f000 fce8 	bl	15b98 <__adddf3>
   151c8:	4680      	mov	r8, r0
   151ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   151cc:	4689      	mov	r9, r1
   151ce:	f000 fe2f 	bl	15e30 <__aeabi_i2d>
   151d2:	4642      	mov	r2, r8
   151d4:	4606      	mov	r6, r0
   151d6:	460f      	mov	r7, r1
   151d8:	464b      	mov	r3, r9
   151da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   151de:	f000 fcdb 	bl	15b98 <__adddf3>
   151e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   151e6:	f000 fcd7 	bl	15b98 <__adddf3>
   151ea:	4632      	mov	r2, r6
   151ec:	463b      	mov	r3, r7
   151ee:	f000 fcd3 	bl	15b98 <__adddf3>
   151f2:	4632      	mov	r2, r6
   151f4:	463b      	mov	r3, r7
   151f6:	4650      	mov	r0, sl
   151f8:	468b      	mov	fp, r1
   151fa:	f000 fccb 	bl	15b94 <__aeabi_dsub>
   151fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   15202:	f000 fcc7 	bl	15b94 <__aeabi_dsub>
   15206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1520a:	f000 fcc3 	bl	15b94 <__aeabi_dsub>
   1520e:	4602      	mov	r2, r0
   15210:	460b      	mov	r3, r1
   15212:	4640      	mov	r0, r8
   15214:	4649      	mov	r1, r9
   15216:	f000 fcbd 	bl	15b94 <__aeabi_dsub>
   1521a:	4680      	mov	r8, r0
   1521c:	e02e      	b.n	1527c <__ieee754_pow+0x53c>
   1521e:	bf00      	nop
   15220:	4a454eef 	.word	0x4a454eef
   15224:	3fca7e28 	.word	0x3fca7e28
   15228:	93c9db65 	.word	0x93c9db65
   1522c:	3fcd864a 	.word	0x3fcd864a
   15230:	a91d4101 	.word	0xa91d4101
   15234:	3fd17460 	.word	0x3fd17460
   15238:	518f264d 	.word	0x518f264d
   1523c:	3fd55555 	.word	0x3fd55555
   15240:	db6fabff 	.word	0xdb6fabff
   15244:	3fdb6db6 	.word	0x3fdb6db6
   15248:	33333303 	.word	0x33333303
   1524c:	3fe33333 	.word	0x3fe33333
   15250:	e0000000 	.word	0xe0000000
   15254:	3feec709 	.word	0x3feec709
   15258:	dc3a03fd 	.word	0xdc3a03fd
   1525c:	3feec709 	.word	0x3feec709
   15260:	145b01f5 	.word	0x145b01f5
   15264:	be3e2fe0 	.word	0xbe3e2fe0
   15268:	43400000 	.word	0x43400000
   1526c:	0003988e 	.word	0x0003988e
   15270:	000bb679 	.word	0x000bb679
   15274:	3ff00000 	.word	0x3ff00000
   15278:	40080000 	.word	0x40080000
   1527c:	4689      	mov	r9, r1
   1527e:	3c01      	subs	r4, #1
   15280:	ea54 0305 	orrs.w	r3, r4, r5
   15284:	e9dd 0100 	ldrd	r0, r1, [sp]
   15288:	bf14      	ite	ne
   1528a:	4cd9      	ldrne	r4, [pc, #868]	; (155f0 <__ieee754_pow+0x8b0>)
   1528c:	4cd9      	ldreq	r4, [pc, #868]	; (155f4 <__ieee754_pow+0x8b4>)
   1528e:	2300      	movs	r3, #0
   15290:	e9cd 3404 	strd	r3, r4, [sp, #16]
   15294:	4603      	mov	r3, r0
   15296:	460c      	mov	r4, r1
   15298:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1529c:	2300      	movs	r3, #0
   1529e:	9302      	str	r3, [sp, #8]
   152a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   152a4:	4622      	mov	r2, r4
   152a6:	462b      	mov	r3, r5
   152a8:	f000 fc74 	bl	15b94 <__aeabi_dsub>
   152ac:	4652      	mov	r2, sl
   152ae:	465b      	mov	r3, fp
   152b0:	f000 fe24 	bl	15efc <__aeabi_dmul>
   152b4:	e9dd 2300 	ldrd	r2, r3, [sp]
   152b8:	4606      	mov	r6, r0
   152ba:	460f      	mov	r7, r1
   152bc:	4640      	mov	r0, r8
   152be:	4649      	mov	r1, r9
   152c0:	f000 fe1c 	bl	15efc <__aeabi_dmul>
   152c4:	4602      	mov	r2, r0
   152c6:	460b      	mov	r3, r1
   152c8:	4630      	mov	r0, r6
   152ca:	4639      	mov	r1, r7
   152cc:	f000 fc64 	bl	15b98 <__adddf3>
   152d0:	4622      	mov	r2, r4
   152d2:	4680      	mov	r8, r0
   152d4:	4689      	mov	r9, r1
   152d6:	462b      	mov	r3, r5
   152d8:	4650      	mov	r0, sl
   152da:	4659      	mov	r1, fp
   152dc:	e9cd 8900 	strd	r8, r9, [sp]
   152e0:	f000 fe0c 	bl	15efc <__aeabi_dmul>
   152e4:	460b      	mov	r3, r1
   152e6:	4602      	mov	r2, r0
   152e8:	4606      	mov	r6, r0
   152ea:	460f      	mov	r7, r1
   152ec:	4640      	mov	r0, r8
   152ee:	4649      	mov	r1, r9
   152f0:	f000 fc52 	bl	15b98 <__adddf3>
   152f4:	4bc0      	ldr	r3, [pc, #768]	; (155f8 <__ieee754_pow+0x8b8>)
   152f6:	4299      	cmp	r1, r3
   152f8:	4604      	mov	r4, r0
   152fa:	460d      	mov	r5, r1
   152fc:	468a      	mov	sl, r1
   152fe:	f340 8116 	ble.w	1552e <__ieee754_pow+0x7ee>
   15302:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   15306:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1530a:	4303      	orrs	r3, r0
   1530c:	f040 81ea 	bne.w	156e4 <__ieee754_pow+0x9a4>
   15310:	a3a3      	add	r3, pc, #652	; (adr r3, 155a0 <__ieee754_pow+0x860>)
   15312:	e9d3 2300 	ldrd	r2, r3, [r3]
   15316:	e9dd 0100 	ldrd	r0, r1, [sp]
   1531a:	f000 fc3d 	bl	15b98 <__adddf3>
   1531e:	4632      	mov	r2, r6
   15320:	4680      	mov	r8, r0
   15322:	4689      	mov	r9, r1
   15324:	463b      	mov	r3, r7
   15326:	4620      	mov	r0, r4
   15328:	4629      	mov	r1, r5
   1532a:	f000 fc33 	bl	15b94 <__aeabi_dsub>
   1532e:	4602      	mov	r2, r0
   15330:	460b      	mov	r3, r1
   15332:	4640      	mov	r0, r8
   15334:	4649      	mov	r1, r9
   15336:	f001 f871 	bl	1641c <__aeabi_dcmpgt>
   1533a:	2800      	cmp	r0, #0
   1533c:	f040 81d2 	bne.w	156e4 <__ieee754_pow+0x9a4>
   15340:	46a8      	mov	r8, r5
   15342:	ea4f 5328 	mov.w	r3, r8, asr #20
   15346:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1534a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1534e:	fa42 f303 	asr.w	r3, r2, r3
   15352:	4453      	add	r3, sl
   15354:	f3c3 520a 	ubfx	r2, r3, #20, #11
   15358:	4da8      	ldr	r5, [pc, #672]	; (155fc <__ieee754_pow+0x8bc>)
   1535a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1535e:	4115      	asrs	r5, r2
   15360:	f3c3 0413 	ubfx	r4, r3, #0, #20
   15364:	ea23 0105 	bic.w	r1, r3, r5
   15368:	2000      	movs	r0, #0
   1536a:	f1c2 0b14 	rsb	fp, r2, #20
   1536e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   15372:	f1ba 0f00 	cmp.w	sl, #0
   15376:	4602      	mov	r2, r0
   15378:	460b      	mov	r3, r1
   1537a:	fa44 fb0b 	asr.w	fp, r4, fp
   1537e:	4630      	mov	r0, r6
   15380:	4639      	mov	r1, r7
   15382:	bfb8      	it	lt
   15384:	f1cb 0b00 	rsblt	fp, fp, #0
   15388:	f000 fc04 	bl	15b94 <__aeabi_dsub>
   1538c:	4602      	mov	r2, r0
   1538e:	460b      	mov	r3, r1
   15390:	4606      	mov	r6, r0
   15392:	460f      	mov	r7, r1
   15394:	e9dd 0100 	ldrd	r0, r1, [sp]
   15398:	f000 fbfe 	bl	15b98 <__adddf3>
   1539c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   153a0:	460d      	mov	r5, r1
   153a2:	2400      	movs	r4, #0
   153a4:	a380      	add	r3, pc, #512	; (adr r3, 155a8 <__ieee754_pow+0x868>)
   153a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   153aa:	4620      	mov	r0, r4
   153ac:	4629      	mov	r1, r5
   153ae:	f000 fda5 	bl	15efc <__aeabi_dmul>
   153b2:	4632      	mov	r2, r6
   153b4:	4680      	mov	r8, r0
   153b6:	4689      	mov	r9, r1
   153b8:	463b      	mov	r3, r7
   153ba:	4620      	mov	r0, r4
   153bc:	4629      	mov	r1, r5
   153be:	f000 fbe9 	bl	15b94 <__aeabi_dsub>
   153c2:	4602      	mov	r2, r0
   153c4:	460b      	mov	r3, r1
   153c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   153ca:	f000 fbe3 	bl	15b94 <__aeabi_dsub>
   153ce:	a378      	add	r3, pc, #480	; (adr r3, 155b0 <__ieee754_pow+0x870>)
   153d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d4:	f000 fd92 	bl	15efc <__aeabi_dmul>
   153d8:	a377      	add	r3, pc, #476	; (adr r3, 155b8 <__ieee754_pow+0x878>)
   153da:	e9d3 2300 	ldrd	r2, r3, [r3]
   153de:	4606      	mov	r6, r0
   153e0:	460f      	mov	r7, r1
   153e2:	4620      	mov	r0, r4
   153e4:	4629      	mov	r1, r5
   153e6:	f000 fd89 	bl	15efc <__aeabi_dmul>
   153ea:	4602      	mov	r2, r0
   153ec:	460b      	mov	r3, r1
   153ee:	4630      	mov	r0, r6
   153f0:	4639      	mov	r1, r7
   153f2:	f000 fbd1 	bl	15b98 <__adddf3>
   153f6:	4606      	mov	r6, r0
   153f8:	460f      	mov	r7, r1
   153fa:	4602      	mov	r2, r0
   153fc:	460b      	mov	r3, r1
   153fe:	4640      	mov	r0, r8
   15400:	4649      	mov	r1, r9
   15402:	f000 fbc9 	bl	15b98 <__adddf3>
   15406:	4642      	mov	r2, r8
   15408:	464b      	mov	r3, r9
   1540a:	4604      	mov	r4, r0
   1540c:	460d      	mov	r5, r1
   1540e:	f000 fbc1 	bl	15b94 <__aeabi_dsub>
   15412:	4602      	mov	r2, r0
   15414:	460b      	mov	r3, r1
   15416:	4630      	mov	r0, r6
   15418:	4639      	mov	r1, r7
   1541a:	f000 fbbb 	bl	15b94 <__aeabi_dsub>
   1541e:	4622      	mov	r2, r4
   15420:	4680      	mov	r8, r0
   15422:	4689      	mov	r9, r1
   15424:	462b      	mov	r3, r5
   15426:	4620      	mov	r0, r4
   15428:	4629      	mov	r1, r5
   1542a:	f000 fd67 	bl	15efc <__aeabi_dmul>
   1542e:	a364      	add	r3, pc, #400	; (adr r3, 155c0 <__ieee754_pow+0x880>)
   15430:	e9d3 2300 	ldrd	r2, r3, [r3]
   15434:	4606      	mov	r6, r0
   15436:	460f      	mov	r7, r1
   15438:	f000 fd60 	bl	15efc <__aeabi_dmul>
   1543c:	a362      	add	r3, pc, #392	; (adr r3, 155c8 <__ieee754_pow+0x888>)
   1543e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15442:	f000 fba7 	bl	15b94 <__aeabi_dsub>
   15446:	4632      	mov	r2, r6
   15448:	463b      	mov	r3, r7
   1544a:	f000 fd57 	bl	15efc <__aeabi_dmul>
   1544e:	a360      	add	r3, pc, #384	; (adr r3, 155d0 <__ieee754_pow+0x890>)
   15450:	e9d3 2300 	ldrd	r2, r3, [r3]
   15454:	f000 fba0 	bl	15b98 <__adddf3>
   15458:	4632      	mov	r2, r6
   1545a:	463b      	mov	r3, r7
   1545c:	f000 fd4e 	bl	15efc <__aeabi_dmul>
   15460:	a35d      	add	r3, pc, #372	; (adr r3, 155d8 <__ieee754_pow+0x898>)
   15462:	e9d3 2300 	ldrd	r2, r3, [r3]
   15466:	f000 fb95 	bl	15b94 <__aeabi_dsub>
   1546a:	4632      	mov	r2, r6
   1546c:	463b      	mov	r3, r7
   1546e:	f000 fd45 	bl	15efc <__aeabi_dmul>
   15472:	a35b      	add	r3, pc, #364	; (adr r3, 155e0 <__ieee754_pow+0x8a0>)
   15474:	e9d3 2300 	ldrd	r2, r3, [r3]
   15478:	f000 fb8e 	bl	15b98 <__adddf3>
   1547c:	4632      	mov	r2, r6
   1547e:	463b      	mov	r3, r7
   15480:	f000 fd3c 	bl	15efc <__aeabi_dmul>
   15484:	4602      	mov	r2, r0
   15486:	460b      	mov	r3, r1
   15488:	4620      	mov	r0, r4
   1548a:	4629      	mov	r1, r5
   1548c:	f000 fb82 	bl	15b94 <__aeabi_dsub>
   15490:	4606      	mov	r6, r0
   15492:	460f      	mov	r7, r1
   15494:	4602      	mov	r2, r0
   15496:	460b      	mov	r3, r1
   15498:	4620      	mov	r0, r4
   1549a:	4629      	mov	r1, r5
   1549c:	f000 fd2e 	bl	15efc <__aeabi_dmul>
   154a0:	2200      	movs	r2, #0
   154a2:	e9cd 0100 	strd	r0, r1, [sp]
   154a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   154aa:	4630      	mov	r0, r6
   154ac:	4639      	mov	r1, r7
   154ae:	f000 fb71 	bl	15b94 <__aeabi_dsub>
   154b2:	4602      	mov	r2, r0
   154b4:	460b      	mov	r3, r1
   154b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   154ba:	f000 fe49 	bl	16150 <__aeabi_ddiv>
   154be:	4642      	mov	r2, r8
   154c0:	4606      	mov	r6, r0
   154c2:	460f      	mov	r7, r1
   154c4:	464b      	mov	r3, r9
   154c6:	4620      	mov	r0, r4
   154c8:	4629      	mov	r1, r5
   154ca:	f000 fd17 	bl	15efc <__aeabi_dmul>
   154ce:	4642      	mov	r2, r8
   154d0:	464b      	mov	r3, r9
   154d2:	f000 fb61 	bl	15b98 <__adddf3>
   154d6:	4602      	mov	r2, r0
   154d8:	460b      	mov	r3, r1
   154da:	4630      	mov	r0, r6
   154dc:	4639      	mov	r1, r7
   154de:	f000 fb59 	bl	15b94 <__aeabi_dsub>
   154e2:	4622      	mov	r2, r4
   154e4:	462b      	mov	r3, r5
   154e6:	f000 fb55 	bl	15b94 <__aeabi_dsub>
   154ea:	4602      	mov	r2, r0
   154ec:	460b      	mov	r3, r1
   154ee:	2000      	movs	r0, #0
   154f0:	493f      	ldr	r1, [pc, #252]	; (155f0 <__ieee754_pow+0x8b0>)
   154f2:	f000 fb4f 	bl	15b94 <__aeabi_dsub>
   154f6:	448a      	add	sl, r1
   154f8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   154fc:	f2c0 8133 	blt.w	15766 <__ieee754_pow+0xa26>
   15500:	4651      	mov	r1, sl
   15502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15506:	f000 fcf9 	bl	15efc <__aeabi_dmul>
   1550a:	e45b      	b.n	14dc4 <__ieee754_pow+0x84>
   1550c:	4642      	mov	r2, r8
   1550e:	4640      	mov	r0, r8
   15510:	464b      	mov	r3, r9
   15512:	4649      	mov	r1, r9
   15514:	f000 fcf2 	bl	15efc <__aeabi_dmul>
   15518:	e454      	b.n	14dc4 <__ieee754_pow+0x84>
   1551a:	f1ba 0f00 	cmp.w	sl, #0
   1551e:	f6bf ace0 	bge.w	14ee2 <__ieee754_pow+0x1a2>
   15522:	e9dd 3400 	ldrd	r3, r4, [sp]
   15526:	4618      	mov	r0, r3
   15528:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1552c:	e44a      	b.n	14dc4 <__ieee754_pow+0x84>
   1552e:	4b34      	ldr	r3, [pc, #208]	; (15600 <__ieee754_pow+0x8c0>)
   15530:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   15534:	4598      	cmp	r8, r3
   15536:	f340 80f2 	ble.w	1571e <__ieee754_pow+0x9de>
   1553a:	4b32      	ldr	r3, [pc, #200]	; (15604 <__ieee754_pow+0x8c4>)
   1553c:	440b      	add	r3, r1
   1553e:	4303      	orrs	r3, r0
   15540:	d10c      	bne.n	1555c <__ieee754_pow+0x81c>
   15542:	4632      	mov	r2, r6
   15544:	463b      	mov	r3, r7
   15546:	f000 fb25 	bl	15b94 <__aeabi_dsub>
   1554a:	4602      	mov	r2, r0
   1554c:	460b      	mov	r3, r1
   1554e:	e9dd 0100 	ldrd	r0, r1, [sp]
   15552:	f000 ff4f 	bl	163f4 <__aeabi_dcmple>
   15556:	2800      	cmp	r0, #0
   15558:	f43f aef3 	beq.w	15342 <__ieee754_pow+0x602>
   1555c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   15560:	a321      	add	r3, pc, #132	; (adr r3, 155e8 <__ieee754_pow+0x8a8>)
   15562:	e9d3 2300 	ldrd	r2, r3, [r3]
   15566:	f000 fcc9 	bl	15efc <__aeabi_dmul>
   1556a:	a31f      	add	r3, pc, #124	; (adr r3, 155e8 <__ieee754_pow+0x8a8>)
   1556c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15570:	f000 fcc4 	bl	15efc <__aeabi_dmul>
   15574:	e426      	b.n	14dc4 <__ieee754_pow+0x84>
   15576:	4602      	mov	r2, r0
   15578:	460b      	mov	r3, r1
   1557a:	2000      	movs	r0, #0
   1557c:	491c      	ldr	r1, [pc, #112]	; (155f0 <__ieee754_pow+0x8b0>)
   1557e:	f000 fde7 	bl	16150 <__aeabi_ddiv>
   15582:	e43c      	b.n	14dfe <__ieee754_pow+0xbe>
   15584:	2200      	movs	r2, #0
   15586:	2300      	movs	r3, #0
   15588:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1558c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   15590:	4b17      	ldr	r3, [pc, #92]	; (155f0 <__ieee754_pow+0x8b0>)
   15592:	2200      	movs	r2, #0
   15594:	2700      	movs	r7, #0
   15596:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1559a:	e4e6      	b.n	14f6a <__ieee754_pow+0x22a>
   1559c:	f3af 8000 	nop.w
   155a0:	652b82fe 	.word	0x652b82fe
   155a4:	3c971547 	.word	0x3c971547
   155a8:	00000000 	.word	0x00000000
   155ac:	3fe62e43 	.word	0x3fe62e43
   155b0:	fefa39ef 	.word	0xfefa39ef
   155b4:	3fe62e42 	.word	0x3fe62e42
   155b8:	0ca86c39 	.word	0x0ca86c39
   155bc:	be205c61 	.word	0xbe205c61
   155c0:	72bea4d0 	.word	0x72bea4d0
   155c4:	3e663769 	.word	0x3e663769
   155c8:	c5d26bf1 	.word	0xc5d26bf1
   155cc:	3ebbbd41 	.word	0x3ebbbd41
   155d0:	af25de2c 	.word	0xaf25de2c
   155d4:	3f11566a 	.word	0x3f11566a
   155d8:	16bebd93 	.word	0x16bebd93
   155dc:	3f66c16c 	.word	0x3f66c16c
   155e0:	5555553e 	.word	0x5555553e
   155e4:	3fc55555 	.word	0x3fc55555
   155e8:	c2f8f359 	.word	0xc2f8f359
   155ec:	01a56e1f 	.word	0x01a56e1f
   155f0:	3ff00000 	.word	0x3ff00000
   155f4:	bff00000 	.word	0xbff00000
   155f8:	408fffff 	.word	0x408fffff
   155fc:	000fffff 	.word	0x000fffff
   15600:	4090cbff 	.word	0x4090cbff
   15604:	3f6f3400 	.word	0x3f6f3400
   15608:	4b6b      	ldr	r3, [pc, #428]	; (157b8 <__ieee754_pow+0xa78>)
   1560a:	429e      	cmp	r6, r3
   1560c:	f77f ac66 	ble.w	14edc <__ieee754_pow+0x19c>
   15610:	4b6a      	ldr	r3, [pc, #424]	; (157bc <__ieee754_pow+0xa7c>)
   15612:	429e      	cmp	r6, r3
   15614:	f73f ac13 	bgt.w	14e3e <__ieee754_pow+0xfe>
   15618:	2200      	movs	r2, #0
   1561a:	4b68      	ldr	r3, [pc, #416]	; (157bc <__ieee754_pow+0xa7c>)
   1561c:	f000 faba 	bl	15b94 <__aeabi_dsub>
   15620:	a357      	add	r3, pc, #348	; (adr r3, 15780 <__ieee754_pow+0xa40>)
   15622:	e9d3 2300 	ldrd	r2, r3, [r3]
   15626:	4606      	mov	r6, r0
   15628:	460f      	mov	r7, r1
   1562a:	f000 fc67 	bl	15efc <__aeabi_dmul>
   1562e:	a356      	add	r3, pc, #344	; (adr r3, 15788 <__ieee754_pow+0xa48>)
   15630:	e9d3 2300 	ldrd	r2, r3, [r3]
   15634:	4680      	mov	r8, r0
   15636:	4689      	mov	r9, r1
   15638:	4630      	mov	r0, r6
   1563a:	4639      	mov	r1, r7
   1563c:	f000 fc5e 	bl	15efc <__aeabi_dmul>
   15640:	2200      	movs	r2, #0
   15642:	4682      	mov	sl, r0
   15644:	468b      	mov	fp, r1
   15646:	4b5e      	ldr	r3, [pc, #376]	; (157c0 <__ieee754_pow+0xa80>)
   15648:	4630      	mov	r0, r6
   1564a:	4639      	mov	r1, r7
   1564c:	f000 fc56 	bl	15efc <__aeabi_dmul>
   15650:	4602      	mov	r2, r0
   15652:	460b      	mov	r3, r1
   15654:	a14e      	add	r1, pc, #312	; (adr r1, 15790 <__ieee754_pow+0xa50>)
   15656:	e9d1 0100 	ldrd	r0, r1, [r1]
   1565a:	f000 fa9b 	bl	15b94 <__aeabi_dsub>
   1565e:	4632      	mov	r2, r6
   15660:	463b      	mov	r3, r7
   15662:	f000 fc4b 	bl	15efc <__aeabi_dmul>
   15666:	4602      	mov	r2, r0
   15668:	460b      	mov	r3, r1
   1566a:	2000      	movs	r0, #0
   1566c:	4955      	ldr	r1, [pc, #340]	; (157c4 <__ieee754_pow+0xa84>)
   1566e:	f000 fa91 	bl	15b94 <__aeabi_dsub>
   15672:	4632      	mov	r2, r6
   15674:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15678:	463b      	mov	r3, r7
   1567a:	4630      	mov	r0, r6
   1567c:	4639      	mov	r1, r7
   1567e:	f000 fc3d 	bl	15efc <__aeabi_dmul>
   15682:	4602      	mov	r2, r0
   15684:	460b      	mov	r3, r1
   15686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1568a:	f000 fc37 	bl	15efc <__aeabi_dmul>
   1568e:	a342      	add	r3, pc, #264	; (adr r3, 15798 <__ieee754_pow+0xa58>)
   15690:	e9d3 2300 	ldrd	r2, r3, [r3]
   15694:	f000 fc32 	bl	15efc <__aeabi_dmul>
   15698:	4602      	mov	r2, r0
   1569a:	460b      	mov	r3, r1
   1569c:	4650      	mov	r0, sl
   1569e:	4659      	mov	r1, fp
   156a0:	f000 fa78 	bl	15b94 <__aeabi_dsub>
   156a4:	4602      	mov	r2, r0
   156a6:	460b      	mov	r3, r1
   156a8:	4606      	mov	r6, r0
   156aa:	460f      	mov	r7, r1
   156ac:	4640      	mov	r0, r8
   156ae:	4649      	mov	r1, r9
   156b0:	f000 fa72 	bl	15b98 <__adddf3>
   156b4:	4642      	mov	r2, r8
   156b6:	464b      	mov	r3, r9
   156b8:	2000      	movs	r0, #0
   156ba:	4682      	mov	sl, r0
   156bc:	468b      	mov	fp, r1
   156be:	f000 fa69 	bl	15b94 <__aeabi_dsub>
   156c2:	4602      	mov	r2, r0
   156c4:	460b      	mov	r3, r1
   156c6:	4630      	mov	r0, r6
   156c8:	4639      	mov	r1, r7
   156ca:	f000 fa63 	bl	15b94 <__aeabi_dsub>
   156ce:	4680      	mov	r8, r0
   156d0:	4689      	mov	r9, r1
   156d2:	e5d4      	b.n	1527e <__ieee754_pow+0x53e>
   156d4:	4642      	mov	r2, r8
   156d6:	464b      	mov	r3, r9
   156d8:	2000      	movs	r0, #0
   156da:	4938      	ldr	r1, [pc, #224]	; (157bc <__ieee754_pow+0xa7c>)
   156dc:	f000 fd38 	bl	16150 <__aeabi_ddiv>
   156e0:	f7ff bb70 	b.w	14dc4 <__ieee754_pow+0x84>
   156e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   156e8:	a32d      	add	r3, pc, #180	; (adr r3, 157a0 <__ieee754_pow+0xa60>)
   156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   156ee:	f000 fc05 	bl	15efc <__aeabi_dmul>
   156f2:	a32b      	add	r3, pc, #172	; (adr r3, 157a0 <__ieee754_pow+0xa60>)
   156f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   156f8:	f000 fc00 	bl	15efc <__aeabi_dmul>
   156fc:	f7ff bb62 	b.w	14dc4 <__ieee754_pow+0x84>
   15700:	f1be 0f00 	cmp.w	lr, #0
   15704:	f47f ab69 	bne.w	14dda <__ieee754_pow+0x9a>
   15708:	f1c3 0314 	rsb	r3, r3, #20
   1570c:	fa47 f203 	asr.w	r2, r7, r3
   15710:	fa02 f303 	lsl.w	r3, r2, r3
   15714:	429f      	cmp	r7, r3
   15716:	d02a      	beq.n	1576e <__ieee754_pow+0xa2e>
   15718:	4674      	mov	r4, lr
   1571a:	f7ff bb36 	b.w	14d8a <__ieee754_pow+0x4a>
   1571e:	4b29      	ldr	r3, [pc, #164]	; (157c4 <__ieee754_pow+0xa84>)
   15720:	4598      	cmp	r8, r3
   15722:	f73f ae0e 	bgt.w	15342 <__ieee754_pow+0x602>
   15726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1572a:	4692      	mov	sl, r2
   1572c:	4693      	mov	fp, r2
   1572e:	e638      	b.n	153a2 <__ieee754_pow+0x662>
   15730:	4602      	mov	r2, r0
   15732:	460b      	mov	r3, r1
   15734:	f000 fa2e 	bl	15b94 <__aeabi_dsub>
   15738:	4602      	mov	r2, r0
   1573a:	460b      	mov	r3, r1
   1573c:	f000 fd08 	bl	16150 <__aeabi_ddiv>
   15740:	f7ff bb40 	b.w	14dc4 <__ieee754_pow+0x84>
   15744:	a318      	add	r3, pc, #96	; (adr r3, 157a8 <__ieee754_pow+0xa68>)
   15746:	e9d3 2300 	ldrd	r2, r3, [r3]
   1574a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1574e:	a318      	add	r3, pc, #96	; (adr r3, 157b0 <__ieee754_pow+0xa70>)
   15750:	e9d3 2300 	ldrd	r2, r3, [r3]
   15754:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   15758:	4b1b      	ldr	r3, [pc, #108]	; (157c8 <__ieee754_pow+0xa88>)
   1575a:	2200      	movs	r2, #0
   1575c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   15760:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15764:	e401      	b.n	14f6a <__ieee754_pow+0x22a>
   15766:	465a      	mov	r2, fp
   15768:	f000 f98a 	bl	15a80 <scalbn>
   1576c:	e6c9      	b.n	15502 <__ieee754_pow+0x7c2>
   1576e:	f002 0201 	and.w	r2, r2, #1
   15772:	f1c2 0402 	rsb	r4, r2, #2
   15776:	f7ff bb08 	b.w	14d8a <__ieee754_pow+0x4a>
   1577a:	bf00      	nop
   1577c:	f3af 8000 	nop.w
   15780:	60000000 	.word	0x60000000
   15784:	3ff71547 	.word	0x3ff71547
   15788:	f85ddf44 	.word	0xf85ddf44
   1578c:	3e54ae0b 	.word	0x3e54ae0b
   15790:	55555555 	.word	0x55555555
   15794:	3fd55555 	.word	0x3fd55555
   15798:	652b82fe 	.word	0x652b82fe
   1579c:	3ff71547 	.word	0x3ff71547
   157a0:	8800759c 	.word	0x8800759c
   157a4:	7e37e43c 	.word	0x7e37e43c
   157a8:	40000000 	.word	0x40000000
   157ac:	3fe2b803 	.word	0x3fe2b803
   157b0:	43cfd006 	.word	0x43cfd006
   157b4:	3e4cfdeb 	.word	0x3e4cfdeb
   157b8:	3feffffe 	.word	0x3feffffe
   157bc:	3ff00000 	.word	0x3ff00000
   157c0:	3fd00000 	.word	0x3fd00000
   157c4:	3fe00000 	.word	0x3fe00000
   157c8:	3ff80000 	.word	0x3ff80000

000157cc <__ieee754_sqrt>:
   157cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   157d0:	4f5b      	ldr	r7, [pc, #364]	; (15940 <__ieee754_sqrt+0x174>)
   157d2:	438f      	bics	r7, r1
   157d4:	4605      	mov	r5, r0
   157d6:	460c      	mov	r4, r1
   157d8:	f000 8092 	beq.w	15900 <__ieee754_sqrt+0x134>
   157dc:	2900      	cmp	r1, #0
   157de:	460b      	mov	r3, r1
   157e0:	4602      	mov	r2, r0
   157e2:	dd6f      	ble.n	158c4 <__ieee754_sqrt+0xf8>
   157e4:	150f      	asrs	r7, r1, #20
   157e6:	d07b      	beq.n	158e0 <__ieee754_sqrt+0x114>
   157e8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   157ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
   157f0:	07f8      	lsls	r0, r7, #31
   157f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   157f6:	d45c      	bmi.n	158b2 <__ieee754_sqrt+0xe6>
   157f8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   157fc:	2600      	movs	r6, #0
   157fe:	440b      	add	r3, r1
   15800:	107f      	asrs	r7, r7, #1
   15802:	0052      	lsls	r2, r2, #1
   15804:	46b6      	mov	lr, r6
   15806:	2016      	movs	r0, #22
   15808:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1580c:	eb0e 0401 	add.w	r4, lr, r1
   15810:	429c      	cmp	r4, r3
   15812:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   15816:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1581a:	dc03      	bgt.n	15824 <__ieee754_sqrt+0x58>
   1581c:	1b1b      	subs	r3, r3, r4
   1581e:	eb04 0e01 	add.w	lr, r4, r1
   15822:	440e      	add	r6, r1
   15824:	3801      	subs	r0, #1
   15826:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1582a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1582e:	d1ed      	bne.n	1580c <__ieee754_sqrt+0x40>
   15830:	4684      	mov	ip, r0
   15832:	2420      	movs	r4, #32
   15834:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   15838:	e009      	b.n	1584e <__ieee754_sqrt+0x82>
   1583a:	d020      	beq.n	1587e <__ieee754_sqrt+0xb2>
   1583c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   15840:	3c01      	subs	r4, #1
   15842:	ea4f 0151 	mov.w	r1, r1, lsr #1
   15846:	442b      	add	r3, r5
   15848:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1584c:	d020      	beq.n	15890 <__ieee754_sqrt+0xc4>
   1584e:	4573      	cmp	r3, lr
   15850:	eb01 050c 	add.w	r5, r1, ip
   15854:	ddf1      	ble.n	1583a <__ieee754_sqrt+0x6e>
   15856:	2d00      	cmp	r5, #0
   15858:	eb05 0c01 	add.w	ip, r5, r1
   1585c:	db09      	blt.n	15872 <__ieee754_sqrt+0xa6>
   1585e:	46f0      	mov	r8, lr
   15860:	4295      	cmp	r5, r2
   15862:	eba3 030e 	sub.w	r3, r3, lr
   15866:	d900      	bls.n	1586a <__ieee754_sqrt+0x9e>
   15868:	3b01      	subs	r3, #1
   1586a:	1b52      	subs	r2, r2, r5
   1586c:	4408      	add	r0, r1
   1586e:	46c6      	mov	lr, r8
   15870:	e7e4      	b.n	1583c <__ieee754_sqrt+0x70>
   15872:	f1bc 0f00 	cmp.w	ip, #0
   15876:	dbf2      	blt.n	1585e <__ieee754_sqrt+0x92>
   15878:	f10e 0801 	add.w	r8, lr, #1
   1587c:	e7f0      	b.n	15860 <__ieee754_sqrt+0x94>
   1587e:	4295      	cmp	r5, r2
   15880:	d8dc      	bhi.n	1583c <__ieee754_sqrt+0x70>
   15882:	2d00      	cmp	r5, #0
   15884:	eb05 0c01 	add.w	ip, r5, r1
   15888:	db44      	blt.n	15914 <__ieee754_sqrt+0x148>
   1588a:	4698      	mov	r8, r3
   1588c:	2300      	movs	r3, #0
   1588e:	e7ec      	b.n	1586a <__ieee754_sqrt+0x9e>
   15890:	4313      	orrs	r3, r2
   15892:	d113      	bne.n	158bc <__ieee754_sqrt+0xf0>
   15894:	0840      	lsrs	r0, r0, #1
   15896:	1073      	asrs	r3, r6, #1
   15898:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1589c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   158a0:	07f2      	lsls	r2, r6, #31
   158a2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   158a6:	bf48      	it	mi
   158a8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   158ac:	4649      	mov	r1, r9
   158ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   158b2:	005b      	lsls	r3, r3, #1
   158b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   158b8:	0052      	lsls	r2, r2, #1
   158ba:	e79d      	b.n	157f8 <__ieee754_sqrt+0x2c>
   158bc:	1c41      	adds	r1, r0, #1
   158be:	d02d      	beq.n	1591c <__ieee754_sqrt+0x150>
   158c0:	3001      	adds	r0, #1
   158c2:	e7e7      	b.n	15894 <__ieee754_sqrt+0xc8>
   158c4:	4606      	mov	r6, r0
   158c6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   158ca:	433e      	orrs	r6, r7
   158cc:	d0ef      	beq.n	158ae <__ieee754_sqrt+0xe2>
   158ce:	bb69      	cbnz	r1, 1592c <__ieee754_sqrt+0x160>
   158d0:	460f      	mov	r7, r1
   158d2:	0ad3      	lsrs	r3, r2, #11
   158d4:	3f15      	subs	r7, #21
   158d6:	0552      	lsls	r2, r2, #21
   158d8:	2b00      	cmp	r3, #0
   158da:	d0fa      	beq.n	158d2 <__ieee754_sqrt+0x106>
   158dc:	02de      	lsls	r6, r3, #11
   158de:	d420      	bmi.n	15922 <__ieee754_sqrt+0x156>
   158e0:	2400      	movs	r4, #0
   158e2:	e000      	b.n	158e6 <__ieee754_sqrt+0x11a>
   158e4:	4604      	mov	r4, r0
   158e6:	005b      	lsls	r3, r3, #1
   158e8:	02dd      	lsls	r5, r3, #11
   158ea:	f104 0001 	add.w	r0, r4, #1
   158ee:	d5f9      	bpl.n	158e4 <__ieee754_sqrt+0x118>
   158f0:	f1c0 0120 	rsb	r1, r0, #32
   158f4:	fa22 f101 	lsr.w	r1, r2, r1
   158f8:	430b      	orrs	r3, r1
   158fa:	1b3f      	subs	r7, r7, r4
   158fc:	4082      	lsls	r2, r0
   158fe:	e773      	b.n	157e8 <__ieee754_sqrt+0x1c>
   15900:	4602      	mov	r2, r0
   15902:	460b      	mov	r3, r1
   15904:	f000 fafa 	bl	15efc <__aeabi_dmul>
   15908:	462a      	mov	r2, r5
   1590a:	4623      	mov	r3, r4
   1590c:	f000 f944 	bl	15b98 <__adddf3>
   15910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15914:	f1bc 0f00 	cmp.w	ip, #0
   15918:	daae      	bge.n	15878 <__ieee754_sqrt+0xac>
   1591a:	e7b6      	b.n	1588a <__ieee754_sqrt+0xbe>
   1591c:	3601      	adds	r6, #1
   1591e:	4620      	mov	r0, r4
   15920:	e7b9      	b.n	15896 <__ieee754_sqrt+0xca>
   15922:	2000      	movs	r0, #0
   15924:	2120      	movs	r1, #32
   15926:	f04f 34ff 	mov.w	r4, #4294967295
   1592a:	e7e3      	b.n	158f4 <__ieee754_sqrt+0x128>
   1592c:	4602      	mov	r2, r0
   1592e:	460b      	mov	r3, r1
   15930:	f000 f930 	bl	15b94 <__aeabi_dsub>
   15934:	4602      	mov	r2, r0
   15936:	460b      	mov	r3, r1
   15938:	f000 fc0a 	bl	16150 <__aeabi_ddiv>
   1593c:	e7b7      	b.n	158ae <__ieee754_sqrt+0xe2>
   1593e:	bf00      	nop
   15940:	7ff00000 	.word	0x7ff00000

00015944 <fabs>:
   15944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15948:	4770      	bx	lr
   1594a:	bf00      	nop

0001594c <finite>:
   1594c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   15950:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   15954:	0fc0      	lsrs	r0, r0, #31
   15956:	4770      	bx	lr

00015958 <matherr>:
   15958:	2000      	movs	r0, #0
   1595a:	4770      	bx	lr

0001595c <nan>:
   1595c:	2000      	movs	r0, #0
   1595e:	4901      	ldr	r1, [pc, #4]	; (15964 <nan+0x8>)
   15960:	4770      	bx	lr
   15962:	bf00      	nop
   15964:	7ff80000 	.word	0x7ff80000

00015968 <rint>:
   15968:	b5f0      	push	{r4, r5, r6, r7, lr}
   1596a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1596e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   15972:	2e13      	cmp	r6, #19
   15974:	b083      	sub	sp, #12
   15976:	4602      	mov	r2, r0
   15978:	460b      	mov	r3, r1
   1597a:	460c      	mov	r4, r1
   1597c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   15980:	4607      	mov	r7, r0
   15982:	dc2e      	bgt.n	159e2 <rint+0x7a>
   15984:	2e00      	cmp	r6, #0
   15986:	db49      	blt.n	15a1c <rint+0xb4>
   15988:	493a      	ldr	r1, [pc, #232]	; (15a74 <rint+0x10c>)
   1598a:	4131      	asrs	r1, r6
   1598c:	ea03 0001 	and.w	r0, r3, r1
   15990:	4310      	orrs	r0, r2
   15992:	d02b      	beq.n	159ec <rint+0x84>
   15994:	0849      	lsrs	r1, r1, #1
   15996:	400b      	ands	r3, r1
   15998:	ea53 0702 	orrs.w	r7, r3, r2
   1599c:	d00c      	beq.n	159b8 <rint+0x50>
   1599e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   159a2:	2e13      	cmp	r6, #19
   159a4:	ea24 0101 	bic.w	r1, r4, r1
   159a8:	fa43 f406 	asr.w	r4, r3, r6
   159ac:	ea44 0401 	orr.w	r4, r4, r1
   159b0:	bf0c      	ite	eq
   159b2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   159b6:	2700      	movne	r7, #0
   159b8:	4b2f      	ldr	r3, [pc, #188]	; (15a78 <rint+0x110>)
   159ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   159be:	4621      	mov	r1, r4
   159c0:	e9d5 4500 	ldrd	r4, r5, [r5]
   159c4:	4638      	mov	r0, r7
   159c6:	4622      	mov	r2, r4
   159c8:	462b      	mov	r3, r5
   159ca:	f000 f8e5 	bl	15b98 <__adddf3>
   159ce:	e9cd 0100 	strd	r0, r1, [sp]
   159d2:	4622      	mov	r2, r4
   159d4:	462b      	mov	r3, r5
   159d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   159da:	f000 f8db 	bl	15b94 <__aeabi_dsub>
   159de:	b003      	add	sp, #12
   159e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159e2:	2e33      	cmp	r6, #51	; 0x33
   159e4:	dd06      	ble.n	159f4 <rint+0x8c>
   159e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   159ea:	d040      	beq.n	15a6e <rint+0x106>
   159ec:	4610      	mov	r0, r2
   159ee:	4619      	mov	r1, r3
   159f0:	b003      	add	sp, #12
   159f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159f4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   159f8:	f04f 31ff 	mov.w	r1, #4294967295
   159fc:	fa21 f10e 	lsr.w	r1, r1, lr
   15a00:	4208      	tst	r0, r1
   15a02:	d0f3      	beq.n	159ec <rint+0x84>
   15a04:	0849      	lsrs	r1, r1, #1
   15a06:	4208      	tst	r0, r1
   15a08:	d0d6      	beq.n	159b8 <rint+0x50>
   15a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15a0e:	ea20 0101 	bic.w	r1, r0, r1
   15a12:	fa43 fe0e 	asr.w	lr, r3, lr
   15a16:	ea4e 0701 	orr.w	r7, lr, r1
   15a1a:	e7cd      	b.n	159b8 <rint+0x50>
   15a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15a20:	4301      	orrs	r1, r0
   15a22:	d0e3      	beq.n	159ec <rint+0x84>
   15a24:	f3c3 0113 	ubfx	r1, r3, #0, #20
   15a28:	4e13      	ldr	r6, [pc, #76]	; (15a78 <rint+0x110>)
   15a2a:	4301      	orrs	r1, r0
   15a2c:	f1c1 0c00 	rsb	ip, r1, #0
   15a30:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   15a34:	e9d6 6700 	ldrd	r6, r7, [r6]
   15a38:	ea4c 0c01 	orr.w	ip, ip, r1
   15a3c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   15a40:	0c5c      	lsrs	r4, r3, #17
   15a42:	0464      	lsls	r4, r4, #17
   15a44:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   15a48:	ea43 0104 	orr.w	r1, r3, r4
   15a4c:	4632      	mov	r2, r6
   15a4e:	463b      	mov	r3, r7
   15a50:	f000 f8a2 	bl	15b98 <__adddf3>
   15a54:	e9cd 0100 	strd	r0, r1, [sp]
   15a58:	4632      	mov	r2, r6
   15a5a:	463b      	mov	r3, r7
   15a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
   15a60:	f000 f898 	bl	15b94 <__aeabi_dsub>
   15a64:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   15a68:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   15a6c:	e7c0      	b.n	159f0 <rint+0x88>
   15a6e:	f000 f893 	bl	15b98 <__adddf3>
   15a72:	e7bd      	b.n	159f0 <rint+0x88>
   15a74:	000fffff 	.word	0x000fffff
   15a78:	000185f8 	.word	0x000185f8
   15a7c:	00000000 	.word	0x00000000

00015a80 <scalbn>:
   15a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a82:	f3c1 560a 	ubfx	r6, r1, #20, #11
   15a86:	4604      	mov	r4, r0
   15a88:	460d      	mov	r5, r1
   15a8a:	460b      	mov	r3, r1
   15a8c:	4617      	mov	r7, r2
   15a8e:	bb0e      	cbnz	r6, 15ad4 <scalbn+0x54>
   15a90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   15a94:	4303      	orrs	r3, r0
   15a96:	4686      	mov	lr, r0
   15a98:	d025      	beq.n	15ae6 <scalbn+0x66>
   15a9a:	2200      	movs	r2, #0
   15a9c:	4b34      	ldr	r3, [pc, #208]	; (15b70 <scalbn+0xf0>)
   15a9e:	f000 fa2d 	bl	15efc <__aeabi_dmul>
   15aa2:	4a34      	ldr	r2, [pc, #208]	; (15b74 <scalbn+0xf4>)
   15aa4:	4297      	cmp	r7, r2
   15aa6:	4604      	mov	r4, r0
   15aa8:	460d      	mov	r5, r1
   15aaa:	460b      	mov	r3, r1
   15aac:	db2a      	blt.n	15b04 <scalbn+0x84>
   15aae:	f3c1 560a 	ubfx	r6, r1, #20, #11
   15ab2:	3e36      	subs	r6, #54	; 0x36
   15ab4:	443e      	add	r6, r7
   15ab6:	f240 72fe 	movw	r2, #2046	; 0x7fe
   15aba:	4296      	cmp	r6, r2
   15abc:	dc28      	bgt.n	15b10 <scalbn+0x90>
   15abe:	2e00      	cmp	r6, #0
   15ac0:	dd12      	ble.n	15ae8 <scalbn+0x68>
   15ac2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   15ac6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   15aca:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   15ace:	4620      	mov	r0, r4
   15ad0:	4629      	mov	r1, r5
   15ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ad4:	f240 72ff 	movw	r2, #2047	; 0x7ff
   15ad8:	4296      	cmp	r6, r2
   15ada:	d1eb      	bne.n	15ab4 <scalbn+0x34>
   15adc:	4602      	mov	r2, r0
   15ade:	460b      	mov	r3, r1
   15ae0:	f000 f85a 	bl	15b98 <__adddf3>
   15ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ae8:	f116 0f35 	cmn.w	r6, #53	; 0x35
   15aec:	da1d      	bge.n	15b2a <scalbn+0xaa>
   15aee:	f24c 3350 	movw	r3, #50000	; 0xc350
   15af2:	429f      	cmp	r7, r3
   15af4:	4622      	mov	r2, r4
   15af6:	462b      	mov	r3, r5
   15af8:	dc25      	bgt.n	15b46 <scalbn+0xc6>
   15afa:	a119      	add	r1, pc, #100	; (adr r1, 15b60 <scalbn+0xe0>)
   15afc:	e9d1 0100 	ldrd	r0, r1, [r1]
   15b00:	f000 f83c 	bl	15b7c <copysign>
   15b04:	a316      	add	r3, pc, #88	; (adr r3, 15b60 <scalbn+0xe0>)
   15b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b0a:	f000 f9f7 	bl	15efc <__aeabi_dmul>
   15b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b10:	4622      	mov	r2, r4
   15b12:	462b      	mov	r3, r5
   15b14:	a114      	add	r1, pc, #80	; (adr r1, 15b68 <scalbn+0xe8>)
   15b16:	e9d1 0100 	ldrd	r0, r1, [r1]
   15b1a:	f000 f82f 	bl	15b7c <copysign>
   15b1e:	a312      	add	r3, pc, #72	; (adr r3, 15b68 <scalbn+0xe8>)
   15b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b24:	f000 f9ea 	bl	15efc <__aeabi_dmul>
   15b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   15b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   15b32:	3636      	adds	r6, #54	; 0x36
   15b34:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   15b38:	4620      	mov	r0, r4
   15b3a:	4629      	mov	r1, r5
   15b3c:	2200      	movs	r2, #0
   15b3e:	4b0e      	ldr	r3, [pc, #56]	; (15b78 <scalbn+0xf8>)
   15b40:	f000 f9dc 	bl	15efc <__aeabi_dmul>
   15b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b46:	a108      	add	r1, pc, #32	; (adr r1, 15b68 <scalbn+0xe8>)
   15b48:	e9d1 0100 	ldrd	r0, r1, [r1]
   15b4c:	f000 f816 	bl	15b7c <copysign>
   15b50:	a305      	add	r3, pc, #20	; (adr r3, 15b68 <scalbn+0xe8>)
   15b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b56:	f000 f9d1 	bl	15efc <__aeabi_dmul>
   15b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b5c:	f3af 8000 	nop.w
   15b60:	c2f8f359 	.word	0xc2f8f359
   15b64:	01a56e1f 	.word	0x01a56e1f
   15b68:	8800759c 	.word	0x8800759c
   15b6c:	7e37e43c 	.word	0x7e37e43c
   15b70:	43500000 	.word	0x43500000
   15b74:	ffff3cb0 	.word	0xffff3cb0
   15b78:	3c900000 	.word	0x3c900000

00015b7c <copysign>:
   15b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   15b80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   15b84:	ea42 0103 	orr.w	r1, r2, r3
   15b88:	4770      	bx	lr
   15b8a:	bf00      	nop

00015b8c <__aeabi_drsub>:
   15b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   15b90:	e002      	b.n	15b98 <__adddf3>
   15b92:	bf00      	nop

00015b94 <__aeabi_dsub>:
   15b94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00015b98 <__adddf3>:
   15b98:	b530      	push	{r4, r5, lr}
   15b9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   15b9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   15ba2:	ea94 0f05 	teq	r4, r5
   15ba6:	bf08      	it	eq
   15ba8:	ea90 0f02 	teqeq	r0, r2
   15bac:	bf1f      	itttt	ne
   15bae:	ea54 0c00 	orrsne.w	ip, r4, r0
   15bb2:	ea55 0c02 	orrsne.w	ip, r5, r2
   15bb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   15bba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15bbe:	f000 80e2 	beq.w	15d86 <__adddf3+0x1ee>
   15bc2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   15bc6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   15bca:	bfb8      	it	lt
   15bcc:	426d      	neglt	r5, r5
   15bce:	dd0c      	ble.n	15bea <__adddf3+0x52>
   15bd0:	442c      	add	r4, r5
   15bd2:	ea80 0202 	eor.w	r2, r0, r2
   15bd6:	ea81 0303 	eor.w	r3, r1, r3
   15bda:	ea82 0000 	eor.w	r0, r2, r0
   15bde:	ea83 0101 	eor.w	r1, r3, r1
   15be2:	ea80 0202 	eor.w	r2, r0, r2
   15be6:	ea81 0303 	eor.w	r3, r1, r3
   15bea:	2d36      	cmp	r5, #54	; 0x36
   15bec:	bf88      	it	hi
   15bee:	bd30      	pophi	{r4, r5, pc}
   15bf0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15bf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15bf8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   15bfc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   15c00:	d002      	beq.n	15c08 <__adddf3+0x70>
   15c02:	4240      	negs	r0, r0
   15c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15c08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   15c0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15c10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   15c14:	d002      	beq.n	15c1c <__adddf3+0x84>
   15c16:	4252      	negs	r2, r2
   15c18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   15c1c:	ea94 0f05 	teq	r4, r5
   15c20:	f000 80a7 	beq.w	15d72 <__adddf3+0x1da>
   15c24:	f1a4 0401 	sub.w	r4, r4, #1
   15c28:	f1d5 0e20 	rsbs	lr, r5, #32
   15c2c:	db0d      	blt.n	15c4a <__adddf3+0xb2>
   15c2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   15c32:	fa22 f205 	lsr.w	r2, r2, r5
   15c36:	1880      	adds	r0, r0, r2
   15c38:	f141 0100 	adc.w	r1, r1, #0
   15c3c:	fa03 f20e 	lsl.w	r2, r3, lr
   15c40:	1880      	adds	r0, r0, r2
   15c42:	fa43 f305 	asr.w	r3, r3, r5
   15c46:	4159      	adcs	r1, r3
   15c48:	e00e      	b.n	15c68 <__adddf3+0xd0>
   15c4a:	f1a5 0520 	sub.w	r5, r5, #32
   15c4e:	f10e 0e20 	add.w	lr, lr, #32
   15c52:	2a01      	cmp	r2, #1
   15c54:	fa03 fc0e 	lsl.w	ip, r3, lr
   15c58:	bf28      	it	cs
   15c5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   15c5e:	fa43 f305 	asr.w	r3, r3, r5
   15c62:	18c0      	adds	r0, r0, r3
   15c64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   15c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15c6c:	d507      	bpl.n	15c7e <__adddf3+0xe6>
   15c6e:	f04f 0e00 	mov.w	lr, #0
   15c72:	f1dc 0c00 	rsbs	ip, ip, #0
   15c76:	eb7e 0000 	sbcs.w	r0, lr, r0
   15c7a:	eb6e 0101 	sbc.w	r1, lr, r1
   15c7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   15c82:	d31b      	bcc.n	15cbc <__adddf3+0x124>
   15c84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   15c88:	d30c      	bcc.n	15ca4 <__adddf3+0x10c>
   15c8a:	0849      	lsrs	r1, r1, #1
   15c8c:	ea5f 0030 	movs.w	r0, r0, rrx
   15c90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   15c94:	f104 0401 	add.w	r4, r4, #1
   15c98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   15c9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   15ca0:	f080 809a 	bcs.w	15dd8 <__adddf3+0x240>
   15ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   15ca8:	bf08      	it	eq
   15caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15cae:	f150 0000 	adcs.w	r0, r0, #0
   15cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15cb6:	ea41 0105 	orr.w	r1, r1, r5
   15cba:	bd30      	pop	{r4, r5, pc}
   15cbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15cc0:	4140      	adcs	r0, r0
   15cc2:	eb41 0101 	adc.w	r1, r1, r1
   15cc6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15cca:	f1a4 0401 	sub.w	r4, r4, #1
   15cce:	d1e9      	bne.n	15ca4 <__adddf3+0x10c>
   15cd0:	f091 0f00 	teq	r1, #0
   15cd4:	bf04      	itt	eq
   15cd6:	4601      	moveq	r1, r0
   15cd8:	2000      	moveq	r0, #0
   15cda:	fab1 f381 	clz	r3, r1
   15cde:	bf08      	it	eq
   15ce0:	3320      	addeq	r3, #32
   15ce2:	f1a3 030b 	sub.w	r3, r3, #11
   15ce6:	f1b3 0220 	subs.w	r2, r3, #32
   15cea:	da0c      	bge.n	15d06 <__adddf3+0x16e>
   15cec:	320c      	adds	r2, #12
   15cee:	dd08      	ble.n	15d02 <__adddf3+0x16a>
   15cf0:	f102 0c14 	add.w	ip, r2, #20
   15cf4:	f1c2 020c 	rsb	r2, r2, #12
   15cf8:	fa01 f00c 	lsl.w	r0, r1, ip
   15cfc:	fa21 f102 	lsr.w	r1, r1, r2
   15d00:	e00c      	b.n	15d1c <__adddf3+0x184>
   15d02:	f102 0214 	add.w	r2, r2, #20
   15d06:	bfd8      	it	le
   15d08:	f1c2 0c20 	rsble	ip, r2, #32
   15d0c:	fa01 f102 	lsl.w	r1, r1, r2
   15d10:	fa20 fc0c 	lsr.w	ip, r0, ip
   15d14:	bfdc      	itt	le
   15d16:	ea41 010c 	orrle.w	r1, r1, ip
   15d1a:	4090      	lslle	r0, r2
   15d1c:	1ae4      	subs	r4, r4, r3
   15d1e:	bfa2      	ittt	ge
   15d20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   15d24:	4329      	orrge	r1, r5
   15d26:	bd30      	popge	{r4, r5, pc}
   15d28:	ea6f 0404 	mvn.w	r4, r4
   15d2c:	3c1f      	subs	r4, #31
   15d2e:	da1c      	bge.n	15d6a <__adddf3+0x1d2>
   15d30:	340c      	adds	r4, #12
   15d32:	dc0e      	bgt.n	15d52 <__adddf3+0x1ba>
   15d34:	f104 0414 	add.w	r4, r4, #20
   15d38:	f1c4 0220 	rsb	r2, r4, #32
   15d3c:	fa20 f004 	lsr.w	r0, r0, r4
   15d40:	fa01 f302 	lsl.w	r3, r1, r2
   15d44:	ea40 0003 	orr.w	r0, r0, r3
   15d48:	fa21 f304 	lsr.w	r3, r1, r4
   15d4c:	ea45 0103 	orr.w	r1, r5, r3
   15d50:	bd30      	pop	{r4, r5, pc}
   15d52:	f1c4 040c 	rsb	r4, r4, #12
   15d56:	f1c4 0220 	rsb	r2, r4, #32
   15d5a:	fa20 f002 	lsr.w	r0, r0, r2
   15d5e:	fa01 f304 	lsl.w	r3, r1, r4
   15d62:	ea40 0003 	orr.w	r0, r0, r3
   15d66:	4629      	mov	r1, r5
   15d68:	bd30      	pop	{r4, r5, pc}
   15d6a:	fa21 f004 	lsr.w	r0, r1, r4
   15d6e:	4629      	mov	r1, r5
   15d70:	bd30      	pop	{r4, r5, pc}
   15d72:	f094 0f00 	teq	r4, #0
   15d76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   15d7a:	bf06      	itte	eq
   15d7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15d80:	3401      	addeq	r4, #1
   15d82:	3d01      	subne	r5, #1
   15d84:	e74e      	b.n	15c24 <__adddf3+0x8c>
   15d86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15d8a:	bf18      	it	ne
   15d8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15d90:	d029      	beq.n	15de6 <__adddf3+0x24e>
   15d92:	ea94 0f05 	teq	r4, r5
   15d96:	bf08      	it	eq
   15d98:	ea90 0f02 	teqeq	r0, r2
   15d9c:	d005      	beq.n	15daa <__adddf3+0x212>
   15d9e:	ea54 0c00 	orrs.w	ip, r4, r0
   15da2:	bf04      	itt	eq
   15da4:	4619      	moveq	r1, r3
   15da6:	4610      	moveq	r0, r2
   15da8:	bd30      	pop	{r4, r5, pc}
   15daa:	ea91 0f03 	teq	r1, r3
   15dae:	bf1e      	ittt	ne
   15db0:	2100      	movne	r1, #0
   15db2:	2000      	movne	r0, #0
   15db4:	bd30      	popne	{r4, r5, pc}
   15db6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   15dba:	d105      	bne.n	15dc8 <__adddf3+0x230>
   15dbc:	0040      	lsls	r0, r0, #1
   15dbe:	4149      	adcs	r1, r1
   15dc0:	bf28      	it	cs
   15dc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15dc6:	bd30      	pop	{r4, r5, pc}
   15dc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   15dcc:	bf3c      	itt	cc
   15dce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15dd2:	bd30      	popcc	{r4, r5, pc}
   15dd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15dd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   15ddc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15de0:	f04f 0000 	mov.w	r0, #0
   15de4:	bd30      	pop	{r4, r5, pc}
   15de6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15dea:	bf1a      	itte	ne
   15dec:	4619      	movne	r1, r3
   15dee:	4610      	movne	r0, r2
   15df0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   15df4:	bf1c      	itt	ne
   15df6:	460b      	movne	r3, r1
   15df8:	4602      	movne	r2, r0
   15dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15dfe:	bf06      	itte	eq
   15e00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   15e04:	ea91 0f03 	teqeq	r1, r3
   15e08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   15e0c:	bd30      	pop	{r4, r5, pc}
   15e0e:	bf00      	nop

00015e10 <__aeabi_ui2d>:
   15e10:	f090 0f00 	teq	r0, #0
   15e14:	bf04      	itt	eq
   15e16:	2100      	moveq	r1, #0
   15e18:	4770      	bxeq	lr
   15e1a:	b530      	push	{r4, r5, lr}
   15e1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15e20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15e24:	f04f 0500 	mov.w	r5, #0
   15e28:	f04f 0100 	mov.w	r1, #0
   15e2c:	e750      	b.n	15cd0 <__adddf3+0x138>
   15e2e:	bf00      	nop

00015e30 <__aeabi_i2d>:
   15e30:	f090 0f00 	teq	r0, #0
   15e34:	bf04      	itt	eq
   15e36:	2100      	moveq	r1, #0
   15e38:	4770      	bxeq	lr
   15e3a:	b530      	push	{r4, r5, lr}
   15e3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15e40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15e44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15e48:	bf48      	it	mi
   15e4a:	4240      	negmi	r0, r0
   15e4c:	f04f 0100 	mov.w	r1, #0
   15e50:	e73e      	b.n	15cd0 <__adddf3+0x138>
   15e52:	bf00      	nop

00015e54 <__aeabi_f2d>:
   15e54:	0042      	lsls	r2, r0, #1
   15e56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   15e5a:	ea4f 0131 	mov.w	r1, r1, rrx
   15e5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15e62:	bf1f      	itttt	ne
   15e64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   15e68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15e6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15e70:	4770      	bxne	lr
   15e72:	f092 0f00 	teq	r2, #0
   15e76:	bf14      	ite	ne
   15e78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15e7c:	4770      	bxeq	lr
   15e7e:	b530      	push	{r4, r5, lr}
   15e80:	f44f 7460 	mov.w	r4, #896	; 0x380
   15e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15e88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15e8c:	e720      	b.n	15cd0 <__adddf3+0x138>
   15e8e:	bf00      	nop

00015e90 <__aeabi_ul2d>:
   15e90:	ea50 0201 	orrs.w	r2, r0, r1
   15e94:	bf08      	it	eq
   15e96:	4770      	bxeq	lr
   15e98:	b530      	push	{r4, r5, lr}
   15e9a:	f04f 0500 	mov.w	r5, #0
   15e9e:	e00a      	b.n	15eb6 <__aeabi_l2d+0x16>

00015ea0 <__aeabi_l2d>:
   15ea0:	ea50 0201 	orrs.w	r2, r0, r1
   15ea4:	bf08      	it	eq
   15ea6:	4770      	bxeq	lr
   15ea8:	b530      	push	{r4, r5, lr}
   15eaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15eae:	d502      	bpl.n	15eb6 <__aeabi_l2d+0x16>
   15eb0:	4240      	negs	r0, r0
   15eb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15eb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15eba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15ebe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   15ec2:	f43f aedc 	beq.w	15c7e <__adddf3+0xe6>
   15ec6:	f04f 0203 	mov.w	r2, #3
   15eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15ece:	bf18      	it	ne
   15ed0:	3203      	addne	r2, #3
   15ed2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15ed6:	bf18      	it	ne
   15ed8:	3203      	addne	r2, #3
   15eda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   15ede:	f1c2 0320 	rsb	r3, r2, #32
   15ee2:	fa00 fc03 	lsl.w	ip, r0, r3
   15ee6:	fa20 f002 	lsr.w	r0, r0, r2
   15eea:	fa01 fe03 	lsl.w	lr, r1, r3
   15eee:	ea40 000e 	orr.w	r0, r0, lr
   15ef2:	fa21 f102 	lsr.w	r1, r1, r2
   15ef6:	4414      	add	r4, r2
   15ef8:	e6c1      	b.n	15c7e <__adddf3+0xe6>
   15efa:	bf00      	nop

00015efc <__aeabi_dmul>:
   15efc:	b570      	push	{r4, r5, r6, lr}
   15efe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15f02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   15f06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   15f0a:	bf1d      	ittte	ne
   15f0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15f10:	ea94 0f0c 	teqne	r4, ip
   15f14:	ea95 0f0c 	teqne	r5, ip
   15f18:	f000 f8de 	bleq	160d8 <__aeabi_dmul+0x1dc>
   15f1c:	442c      	add	r4, r5
   15f1e:	ea81 0603 	eor.w	r6, r1, r3
   15f22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   15f26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   15f2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   15f2e:	bf18      	it	ne
   15f30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   15f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15f3c:	d038      	beq.n	15fb0 <__aeabi_dmul+0xb4>
   15f3e:	fba0 ce02 	umull	ip, lr, r0, r2
   15f42:	f04f 0500 	mov.w	r5, #0
   15f46:	fbe1 e502 	umlal	lr, r5, r1, r2
   15f4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   15f4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   15f52:	f04f 0600 	mov.w	r6, #0
   15f56:	fbe1 5603 	umlal	r5, r6, r1, r3
   15f5a:	f09c 0f00 	teq	ip, #0
   15f5e:	bf18      	it	ne
   15f60:	f04e 0e01 	orrne.w	lr, lr, #1
   15f64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   15f68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   15f6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   15f70:	d204      	bcs.n	15f7c <__aeabi_dmul+0x80>
   15f72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   15f76:	416d      	adcs	r5, r5
   15f78:	eb46 0606 	adc.w	r6, r6, r6
   15f7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   15f80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   15f84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   15f88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   15f8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   15f90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15f94:	bf88      	it	hi
   15f96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   15f9a:	d81e      	bhi.n	15fda <__aeabi_dmul+0xde>
   15f9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   15fa0:	bf08      	it	eq
   15fa2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   15fa6:	f150 0000 	adcs.w	r0, r0, #0
   15faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15fae:	bd70      	pop	{r4, r5, r6, pc}
   15fb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   15fb4:	ea46 0101 	orr.w	r1, r6, r1
   15fb8:	ea40 0002 	orr.w	r0, r0, r2
   15fbc:	ea81 0103 	eor.w	r1, r1, r3
   15fc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   15fc4:	bfc2      	ittt	gt
   15fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   15fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15fce:	bd70      	popgt	{r4, r5, r6, pc}
   15fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15fd4:	f04f 0e00 	mov.w	lr, #0
   15fd8:	3c01      	subs	r4, #1
   15fda:	f300 80ab 	bgt.w	16134 <__aeabi_dmul+0x238>
   15fde:	f114 0f36 	cmn.w	r4, #54	; 0x36
   15fe2:	bfde      	ittt	le
   15fe4:	2000      	movle	r0, #0
   15fe6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   15fea:	bd70      	pople	{r4, r5, r6, pc}
   15fec:	f1c4 0400 	rsb	r4, r4, #0
   15ff0:	3c20      	subs	r4, #32
   15ff2:	da35      	bge.n	16060 <__aeabi_dmul+0x164>
   15ff4:	340c      	adds	r4, #12
   15ff6:	dc1b      	bgt.n	16030 <__aeabi_dmul+0x134>
   15ff8:	f104 0414 	add.w	r4, r4, #20
   15ffc:	f1c4 0520 	rsb	r5, r4, #32
   16000:	fa00 f305 	lsl.w	r3, r0, r5
   16004:	fa20 f004 	lsr.w	r0, r0, r4
   16008:	fa01 f205 	lsl.w	r2, r1, r5
   1600c:	ea40 0002 	orr.w	r0, r0, r2
   16010:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   16014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   16018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1601c:	fa21 f604 	lsr.w	r6, r1, r4
   16020:	eb42 0106 	adc.w	r1, r2, r6
   16024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   16028:	bf08      	it	eq
   1602a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1602e:	bd70      	pop	{r4, r5, r6, pc}
   16030:	f1c4 040c 	rsb	r4, r4, #12
   16034:	f1c4 0520 	rsb	r5, r4, #32
   16038:	fa00 f304 	lsl.w	r3, r0, r4
   1603c:	fa20 f005 	lsr.w	r0, r0, r5
   16040:	fa01 f204 	lsl.w	r2, r1, r4
   16044:	ea40 0002 	orr.w	r0, r0, r2
   16048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1604c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   16050:	f141 0100 	adc.w	r1, r1, #0
   16054:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   16058:	bf08      	it	eq
   1605a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1605e:	bd70      	pop	{r4, r5, r6, pc}
   16060:	f1c4 0520 	rsb	r5, r4, #32
   16064:	fa00 f205 	lsl.w	r2, r0, r5
   16068:	ea4e 0e02 	orr.w	lr, lr, r2
   1606c:	fa20 f304 	lsr.w	r3, r0, r4
   16070:	fa01 f205 	lsl.w	r2, r1, r5
   16074:	ea43 0302 	orr.w	r3, r3, r2
   16078:	fa21 f004 	lsr.w	r0, r1, r4
   1607c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16080:	fa21 f204 	lsr.w	r2, r1, r4
   16084:	ea20 0002 	bic.w	r0, r0, r2
   16088:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1608c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   16090:	bf08      	it	eq
   16092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   16096:	bd70      	pop	{r4, r5, r6, pc}
   16098:	f094 0f00 	teq	r4, #0
   1609c:	d10f      	bne.n	160be <__aeabi_dmul+0x1c2>
   1609e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   160a2:	0040      	lsls	r0, r0, #1
   160a4:	eb41 0101 	adc.w	r1, r1, r1
   160a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   160ac:	bf08      	it	eq
   160ae:	3c01      	subeq	r4, #1
   160b0:	d0f7      	beq.n	160a2 <__aeabi_dmul+0x1a6>
   160b2:	ea41 0106 	orr.w	r1, r1, r6
   160b6:	f095 0f00 	teq	r5, #0
   160ba:	bf18      	it	ne
   160bc:	4770      	bxne	lr
   160be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   160c2:	0052      	lsls	r2, r2, #1
   160c4:	eb43 0303 	adc.w	r3, r3, r3
   160c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   160cc:	bf08      	it	eq
   160ce:	3d01      	subeq	r5, #1
   160d0:	d0f7      	beq.n	160c2 <__aeabi_dmul+0x1c6>
   160d2:	ea43 0306 	orr.w	r3, r3, r6
   160d6:	4770      	bx	lr
   160d8:	ea94 0f0c 	teq	r4, ip
   160dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   160e0:	bf18      	it	ne
   160e2:	ea95 0f0c 	teqne	r5, ip
   160e6:	d00c      	beq.n	16102 <__aeabi_dmul+0x206>
   160e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   160ec:	bf18      	it	ne
   160ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   160f2:	d1d1      	bne.n	16098 <__aeabi_dmul+0x19c>
   160f4:	ea81 0103 	eor.w	r1, r1, r3
   160f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   160fc:	f04f 0000 	mov.w	r0, #0
   16100:	bd70      	pop	{r4, r5, r6, pc}
   16102:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   16106:	bf06      	itte	eq
   16108:	4610      	moveq	r0, r2
   1610a:	4619      	moveq	r1, r3
   1610c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   16110:	d019      	beq.n	16146 <__aeabi_dmul+0x24a>
   16112:	ea94 0f0c 	teq	r4, ip
   16116:	d102      	bne.n	1611e <__aeabi_dmul+0x222>
   16118:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1611c:	d113      	bne.n	16146 <__aeabi_dmul+0x24a>
   1611e:	ea95 0f0c 	teq	r5, ip
   16122:	d105      	bne.n	16130 <__aeabi_dmul+0x234>
   16124:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   16128:	bf1c      	itt	ne
   1612a:	4610      	movne	r0, r2
   1612c:	4619      	movne	r1, r3
   1612e:	d10a      	bne.n	16146 <__aeabi_dmul+0x24a>
   16130:	ea81 0103 	eor.w	r1, r1, r3
   16134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16138:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1613c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   16140:	f04f 0000 	mov.w	r0, #0
   16144:	bd70      	pop	{r4, r5, r6, pc}
   16146:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1614a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1614e:	bd70      	pop	{r4, r5, r6, pc}

00016150 <__aeabi_ddiv>:
   16150:	b570      	push	{r4, r5, r6, lr}
   16152:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1615a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1615e:	bf1d      	ittte	ne
   16160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   16164:	ea94 0f0c 	teqne	r4, ip
   16168:	ea95 0f0c 	teqne	r5, ip
   1616c:	f000 f8a7 	bleq	162be <__aeabi_ddiv+0x16e>
   16170:	eba4 0405 	sub.w	r4, r4, r5
   16174:	ea81 0e03 	eor.w	lr, r1, r3
   16178:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1617c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   16180:	f000 8088 	beq.w	16294 <__aeabi_ddiv+0x144>
   16184:	ea4f 3303 	mov.w	r3, r3, lsl #12
   16188:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1618c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   16190:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   16194:	ea4f 2202 	mov.w	r2, r2, lsl #8
   16198:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1619c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   161a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   161a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   161a8:	429d      	cmp	r5, r3
   161aa:	bf08      	it	eq
   161ac:	4296      	cmpeq	r6, r2
   161ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   161b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   161b6:	d202      	bcs.n	161be <__aeabi_ddiv+0x6e>
   161b8:	085b      	lsrs	r3, r3, #1
   161ba:	ea4f 0232 	mov.w	r2, r2, rrx
   161be:	1ab6      	subs	r6, r6, r2
   161c0:	eb65 0503 	sbc.w	r5, r5, r3
   161c4:	085b      	lsrs	r3, r3, #1
   161c6:	ea4f 0232 	mov.w	r2, r2, rrx
   161ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   161ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   161d2:	ebb6 0e02 	subs.w	lr, r6, r2
   161d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   161da:	bf22      	ittt	cs
   161dc:	1ab6      	subcs	r6, r6, r2
   161de:	4675      	movcs	r5, lr
   161e0:	ea40 000c 	orrcs.w	r0, r0, ip
   161e4:	085b      	lsrs	r3, r3, #1
   161e6:	ea4f 0232 	mov.w	r2, r2, rrx
   161ea:	ebb6 0e02 	subs.w	lr, r6, r2
   161ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   161f2:	bf22      	ittt	cs
   161f4:	1ab6      	subcs	r6, r6, r2
   161f6:	4675      	movcs	r5, lr
   161f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   161fc:	085b      	lsrs	r3, r3, #1
   161fe:	ea4f 0232 	mov.w	r2, r2, rrx
   16202:	ebb6 0e02 	subs.w	lr, r6, r2
   16206:	eb75 0e03 	sbcs.w	lr, r5, r3
   1620a:	bf22      	ittt	cs
   1620c:	1ab6      	subcs	r6, r6, r2
   1620e:	4675      	movcs	r5, lr
   16210:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   16214:	085b      	lsrs	r3, r3, #1
   16216:	ea4f 0232 	mov.w	r2, r2, rrx
   1621a:	ebb6 0e02 	subs.w	lr, r6, r2
   1621e:	eb75 0e03 	sbcs.w	lr, r5, r3
   16222:	bf22      	ittt	cs
   16224:	1ab6      	subcs	r6, r6, r2
   16226:	4675      	movcs	r5, lr
   16228:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1622c:	ea55 0e06 	orrs.w	lr, r5, r6
   16230:	d018      	beq.n	16264 <__aeabi_ddiv+0x114>
   16232:	ea4f 1505 	mov.w	r5, r5, lsl #4
   16236:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1623a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1623e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   16242:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   16246:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1624a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1624e:	d1c0      	bne.n	161d2 <__aeabi_ddiv+0x82>
   16250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16254:	d10b      	bne.n	1626e <__aeabi_ddiv+0x11e>
   16256:	ea41 0100 	orr.w	r1, r1, r0
   1625a:	f04f 0000 	mov.w	r0, #0
   1625e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   16262:	e7b6      	b.n	161d2 <__aeabi_ddiv+0x82>
   16264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16268:	bf04      	itt	eq
   1626a:	4301      	orreq	r1, r0
   1626c:	2000      	moveq	r0, #0
   1626e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   16272:	bf88      	it	hi
   16274:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   16278:	f63f aeaf 	bhi.w	15fda <__aeabi_dmul+0xde>
   1627c:	ebb5 0c03 	subs.w	ip, r5, r3
   16280:	bf04      	itt	eq
   16282:	ebb6 0c02 	subseq.w	ip, r6, r2
   16286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1628a:	f150 0000 	adcs.w	r0, r0, #0
   1628e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   16292:	bd70      	pop	{r4, r5, r6, pc}
   16294:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   16298:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1629c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   162a0:	bfc2      	ittt	gt
   162a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   162a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   162aa:	bd70      	popgt	{r4, r5, r6, pc}
   162ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   162b0:	f04f 0e00 	mov.w	lr, #0
   162b4:	3c01      	subs	r4, #1
   162b6:	e690      	b.n	15fda <__aeabi_dmul+0xde>
   162b8:	ea45 0e06 	orr.w	lr, r5, r6
   162bc:	e68d      	b.n	15fda <__aeabi_dmul+0xde>
   162be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   162c2:	ea94 0f0c 	teq	r4, ip
   162c6:	bf08      	it	eq
   162c8:	ea95 0f0c 	teqeq	r5, ip
   162cc:	f43f af3b 	beq.w	16146 <__aeabi_dmul+0x24a>
   162d0:	ea94 0f0c 	teq	r4, ip
   162d4:	d10a      	bne.n	162ec <__aeabi_ddiv+0x19c>
   162d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   162da:	f47f af34 	bne.w	16146 <__aeabi_dmul+0x24a>
   162de:	ea95 0f0c 	teq	r5, ip
   162e2:	f47f af25 	bne.w	16130 <__aeabi_dmul+0x234>
   162e6:	4610      	mov	r0, r2
   162e8:	4619      	mov	r1, r3
   162ea:	e72c      	b.n	16146 <__aeabi_dmul+0x24a>
   162ec:	ea95 0f0c 	teq	r5, ip
   162f0:	d106      	bne.n	16300 <__aeabi_ddiv+0x1b0>
   162f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   162f6:	f43f aefd 	beq.w	160f4 <__aeabi_dmul+0x1f8>
   162fa:	4610      	mov	r0, r2
   162fc:	4619      	mov	r1, r3
   162fe:	e722      	b.n	16146 <__aeabi_dmul+0x24a>
   16300:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   16304:	bf18      	it	ne
   16306:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1630a:	f47f aec5 	bne.w	16098 <__aeabi_dmul+0x19c>
   1630e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   16312:	f47f af0d 	bne.w	16130 <__aeabi_dmul+0x234>
   16316:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1631a:	f47f aeeb 	bne.w	160f4 <__aeabi_dmul+0x1f8>
   1631e:	e712      	b.n	16146 <__aeabi_dmul+0x24a>

00016320 <__gedf2>:
   16320:	f04f 3cff 	mov.w	ip, #4294967295
   16324:	e006      	b.n	16334 <__cmpdf2+0x4>
   16326:	bf00      	nop

00016328 <__ledf2>:
   16328:	f04f 0c01 	mov.w	ip, #1
   1632c:	e002      	b.n	16334 <__cmpdf2+0x4>
   1632e:	bf00      	nop

00016330 <__cmpdf2>:
   16330:	f04f 0c01 	mov.w	ip, #1
   16334:	f84d cd04 	str.w	ip, [sp, #-4]!
   16338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1633c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16340:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16344:	bf18      	it	ne
   16346:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1634a:	d01b      	beq.n	16384 <__cmpdf2+0x54>
   1634c:	b001      	add	sp, #4
   1634e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   16352:	bf0c      	ite	eq
   16354:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   16358:	ea91 0f03 	teqne	r1, r3
   1635c:	bf02      	ittt	eq
   1635e:	ea90 0f02 	teqeq	r0, r2
   16362:	2000      	moveq	r0, #0
   16364:	4770      	bxeq	lr
   16366:	f110 0f00 	cmn.w	r0, #0
   1636a:	ea91 0f03 	teq	r1, r3
   1636e:	bf58      	it	pl
   16370:	4299      	cmppl	r1, r3
   16372:	bf08      	it	eq
   16374:	4290      	cmpeq	r0, r2
   16376:	bf2c      	ite	cs
   16378:	17d8      	asrcs	r0, r3, #31
   1637a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1637e:	f040 0001 	orr.w	r0, r0, #1
   16382:	4770      	bx	lr
   16384:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   16388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1638c:	d102      	bne.n	16394 <__cmpdf2+0x64>
   1638e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   16392:	d107      	bne.n	163a4 <__cmpdf2+0x74>
   16394:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1639c:	d1d6      	bne.n	1634c <__cmpdf2+0x1c>
   1639e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   163a2:	d0d3      	beq.n	1634c <__cmpdf2+0x1c>
   163a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   163a8:	4770      	bx	lr
   163aa:	bf00      	nop

000163ac <__aeabi_cdrcmple>:
   163ac:	4684      	mov	ip, r0
   163ae:	4610      	mov	r0, r2
   163b0:	4662      	mov	r2, ip
   163b2:	468c      	mov	ip, r1
   163b4:	4619      	mov	r1, r3
   163b6:	4663      	mov	r3, ip
   163b8:	e000      	b.n	163bc <__aeabi_cdcmpeq>
   163ba:	bf00      	nop

000163bc <__aeabi_cdcmpeq>:
   163bc:	b501      	push	{r0, lr}
   163be:	f7ff ffb7 	bl	16330 <__cmpdf2>
   163c2:	2800      	cmp	r0, #0
   163c4:	bf48      	it	mi
   163c6:	f110 0f00 	cmnmi.w	r0, #0
   163ca:	bd01      	pop	{r0, pc}

000163cc <__aeabi_dcmpeq>:
   163cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   163d0:	f7ff fff4 	bl	163bc <__aeabi_cdcmpeq>
   163d4:	bf0c      	ite	eq
   163d6:	2001      	moveq	r0, #1
   163d8:	2000      	movne	r0, #0
   163da:	f85d fb08 	ldr.w	pc, [sp], #8
   163de:	bf00      	nop

000163e0 <__aeabi_dcmplt>:
   163e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   163e4:	f7ff ffea 	bl	163bc <__aeabi_cdcmpeq>
   163e8:	bf34      	ite	cc
   163ea:	2001      	movcc	r0, #1
   163ec:	2000      	movcs	r0, #0
   163ee:	f85d fb08 	ldr.w	pc, [sp], #8
   163f2:	bf00      	nop

000163f4 <__aeabi_dcmple>:
   163f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   163f8:	f7ff ffe0 	bl	163bc <__aeabi_cdcmpeq>
   163fc:	bf94      	ite	ls
   163fe:	2001      	movls	r0, #1
   16400:	2000      	movhi	r0, #0
   16402:	f85d fb08 	ldr.w	pc, [sp], #8
   16406:	bf00      	nop

00016408 <__aeabi_dcmpge>:
   16408:	f84d ed08 	str.w	lr, [sp, #-8]!
   1640c:	f7ff ffce 	bl	163ac <__aeabi_cdrcmple>
   16410:	bf94      	ite	ls
   16412:	2001      	movls	r0, #1
   16414:	2000      	movhi	r0, #0
   16416:	f85d fb08 	ldr.w	pc, [sp], #8
   1641a:	bf00      	nop

0001641c <__aeabi_dcmpgt>:
   1641c:	f84d ed08 	str.w	lr, [sp, #-8]!
   16420:	f7ff ffc4 	bl	163ac <__aeabi_cdrcmple>
   16424:	bf34      	ite	cc
   16426:	2001      	movcc	r0, #1
   16428:	2000      	movcs	r0, #0
   1642a:	f85d fb08 	ldr.w	pc, [sp], #8
   1642e:	bf00      	nop

00016430 <__aeabi_dcmpun>:
   16430:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   16434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16438:	d102      	bne.n	16440 <__aeabi_dcmpun+0x10>
   1643a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1643e:	d10a      	bne.n	16456 <__aeabi_dcmpun+0x26>
   16440:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16448:	d102      	bne.n	16450 <__aeabi_dcmpun+0x20>
   1644a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1644e:	d102      	bne.n	16456 <__aeabi_dcmpun+0x26>
   16450:	f04f 0000 	mov.w	r0, #0
   16454:	4770      	bx	lr
   16456:	f04f 0001 	mov.w	r0, #1
   1645a:	4770      	bx	lr

0001645c <__aeabi_d2uiz>:
   1645c:	004a      	lsls	r2, r1, #1
   1645e:	d211      	bcs.n	16484 <__aeabi_d2uiz+0x28>
   16460:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   16464:	d211      	bcs.n	1648a <__aeabi_d2uiz+0x2e>
   16466:	d50d      	bpl.n	16484 <__aeabi_d2uiz+0x28>
   16468:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1646c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   16470:	d40e      	bmi.n	16490 <__aeabi_d2uiz+0x34>
   16472:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1647a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1647e:	fa23 f002 	lsr.w	r0, r3, r2
   16482:	4770      	bx	lr
   16484:	f04f 0000 	mov.w	r0, #0
   16488:	4770      	bx	lr
   1648a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1648e:	d102      	bne.n	16496 <__aeabi_d2uiz+0x3a>
   16490:	f04f 30ff 	mov.w	r0, #4294967295
   16494:	4770      	bx	lr
   16496:	f04f 0000 	mov.w	r0, #0
   1649a:	4770      	bx	lr

0001649c <__cxa_atexit>:
   1649c:	4613      	mov	r3, r2
   1649e:	460a      	mov	r2, r1
   164a0:	4601      	mov	r1, r0
   164a2:	2002      	movs	r0, #2
   164a4:	f000 b9ba 	b.w	1681c <__register_exitproc>

000164a8 <difftime>:
   164a8:	b508      	push	{r3, lr}
   164aa:	1a40      	subs	r0, r0, r1
   164ac:	f7ff fcc0 	bl	15e30 <__aeabi_i2d>
   164b0:	bd08      	pop	{r3, pc}
   164b2:	bf00      	nop

000164b4 <__errno>:
   164b4:	4b01      	ldr	r3, [pc, #4]	; (164bc <__errno+0x8>)
   164b6:	6818      	ldr	r0, [r3, #0]
   164b8:	4770      	bx	lr
   164ba:	bf00      	nop
   164bc:	200001c4 	.word	0x200001c4

000164c0 <ffs>:
   164c0:	b140      	cbz	r0, 164d4 <ffs+0x14>
   164c2:	2300      	movs	r3, #0
   164c4:	fa40 f103 	asr.w	r1, r0, r3
   164c8:	1c5a      	adds	r2, r3, #1
   164ca:	07c9      	lsls	r1, r1, #31
   164cc:	4613      	mov	r3, r2
   164ce:	d5f9      	bpl.n	164c4 <ffs+0x4>
   164d0:	4610      	mov	r0, r2
   164d2:	4770      	bx	lr
   164d4:	4602      	mov	r2, r0
   164d6:	4610      	mov	r0, r2
   164d8:	4770      	bx	lr
   164da:	bf00      	nop

000164dc <__libc_init_array>:
   164dc:	b570      	push	{r4, r5, r6, lr}
   164de:	4e0f      	ldr	r6, [pc, #60]	; (1651c <__libc_init_array+0x40>)
   164e0:	4d0f      	ldr	r5, [pc, #60]	; (16520 <__libc_init_array+0x44>)
   164e2:	1b76      	subs	r6, r6, r5
   164e4:	10b6      	asrs	r6, r6, #2
   164e6:	bf18      	it	ne
   164e8:	2400      	movne	r4, #0
   164ea:	d005      	beq.n	164f8 <__libc_init_array+0x1c>
   164ec:	3401      	adds	r4, #1
   164ee:	f855 3b04 	ldr.w	r3, [r5], #4
   164f2:	4798      	blx	r3
   164f4:	42a6      	cmp	r6, r4
   164f6:	d1f9      	bne.n	164ec <__libc_init_array+0x10>
   164f8:	4e0a      	ldr	r6, [pc, #40]	; (16524 <__libc_init_array+0x48>)
   164fa:	4d0b      	ldr	r5, [pc, #44]	; (16528 <__libc_init_array+0x4c>)
   164fc:	1b76      	subs	r6, r6, r5
   164fe:	f002 f885 	bl	1860c <_init>
   16502:	10b6      	asrs	r6, r6, #2
   16504:	bf18      	it	ne
   16506:	2400      	movne	r4, #0
   16508:	d006      	beq.n	16518 <__libc_init_array+0x3c>
   1650a:	3401      	adds	r4, #1
   1650c:	f855 3b04 	ldr.w	r3, [r5], #4
   16510:	4798      	blx	r3
   16512:	42a6      	cmp	r6, r4
   16514:	d1f9      	bne.n	1650a <__libc_init_array+0x2e>
   16516:	bd70      	pop	{r4, r5, r6, pc}
   16518:	bd70      	pop	{r4, r5, r6, pc}
   1651a:	bf00      	nop
   1651c:	00018618 	.word	0x00018618
   16520:	00018618 	.word	0x00018618
   16524:	00018674 	.word	0x00018674
   16528:	00018618 	.word	0x00018618

0001652c <memcpy>:
   1652c:	4684      	mov	ip, r0
   1652e:	ea41 0300 	orr.w	r3, r1, r0
   16532:	f013 0303 	ands.w	r3, r3, #3
   16536:	d16d      	bne.n	16614 <memcpy+0xe8>
   16538:	3a40      	subs	r2, #64	; 0x40
   1653a:	d341      	bcc.n	165c0 <memcpy+0x94>
   1653c:	f851 3b04 	ldr.w	r3, [r1], #4
   16540:	f840 3b04 	str.w	r3, [r0], #4
   16544:	f851 3b04 	ldr.w	r3, [r1], #4
   16548:	f840 3b04 	str.w	r3, [r0], #4
   1654c:	f851 3b04 	ldr.w	r3, [r1], #4
   16550:	f840 3b04 	str.w	r3, [r0], #4
   16554:	f851 3b04 	ldr.w	r3, [r1], #4
   16558:	f840 3b04 	str.w	r3, [r0], #4
   1655c:	f851 3b04 	ldr.w	r3, [r1], #4
   16560:	f840 3b04 	str.w	r3, [r0], #4
   16564:	f851 3b04 	ldr.w	r3, [r1], #4
   16568:	f840 3b04 	str.w	r3, [r0], #4
   1656c:	f851 3b04 	ldr.w	r3, [r1], #4
   16570:	f840 3b04 	str.w	r3, [r0], #4
   16574:	f851 3b04 	ldr.w	r3, [r1], #4
   16578:	f840 3b04 	str.w	r3, [r0], #4
   1657c:	f851 3b04 	ldr.w	r3, [r1], #4
   16580:	f840 3b04 	str.w	r3, [r0], #4
   16584:	f851 3b04 	ldr.w	r3, [r1], #4
   16588:	f840 3b04 	str.w	r3, [r0], #4
   1658c:	f851 3b04 	ldr.w	r3, [r1], #4
   16590:	f840 3b04 	str.w	r3, [r0], #4
   16594:	f851 3b04 	ldr.w	r3, [r1], #4
   16598:	f840 3b04 	str.w	r3, [r0], #4
   1659c:	f851 3b04 	ldr.w	r3, [r1], #4
   165a0:	f840 3b04 	str.w	r3, [r0], #4
   165a4:	f851 3b04 	ldr.w	r3, [r1], #4
   165a8:	f840 3b04 	str.w	r3, [r0], #4
   165ac:	f851 3b04 	ldr.w	r3, [r1], #4
   165b0:	f840 3b04 	str.w	r3, [r0], #4
   165b4:	f851 3b04 	ldr.w	r3, [r1], #4
   165b8:	f840 3b04 	str.w	r3, [r0], #4
   165bc:	3a40      	subs	r2, #64	; 0x40
   165be:	d2bd      	bcs.n	1653c <memcpy+0x10>
   165c0:	3230      	adds	r2, #48	; 0x30
   165c2:	d311      	bcc.n	165e8 <memcpy+0xbc>
   165c4:	f851 3b04 	ldr.w	r3, [r1], #4
   165c8:	f840 3b04 	str.w	r3, [r0], #4
   165cc:	f851 3b04 	ldr.w	r3, [r1], #4
   165d0:	f840 3b04 	str.w	r3, [r0], #4
   165d4:	f851 3b04 	ldr.w	r3, [r1], #4
   165d8:	f840 3b04 	str.w	r3, [r0], #4
   165dc:	f851 3b04 	ldr.w	r3, [r1], #4
   165e0:	f840 3b04 	str.w	r3, [r0], #4
   165e4:	3a10      	subs	r2, #16
   165e6:	d2ed      	bcs.n	165c4 <memcpy+0x98>
   165e8:	320c      	adds	r2, #12
   165ea:	d305      	bcc.n	165f8 <memcpy+0xcc>
   165ec:	f851 3b04 	ldr.w	r3, [r1], #4
   165f0:	f840 3b04 	str.w	r3, [r0], #4
   165f4:	3a04      	subs	r2, #4
   165f6:	d2f9      	bcs.n	165ec <memcpy+0xc0>
   165f8:	3204      	adds	r2, #4
   165fa:	d008      	beq.n	1660e <memcpy+0xe2>
   165fc:	07d2      	lsls	r2, r2, #31
   165fe:	bf1c      	itt	ne
   16600:	f811 3b01 	ldrbne.w	r3, [r1], #1
   16604:	f800 3b01 	strbne.w	r3, [r0], #1
   16608:	d301      	bcc.n	1660e <memcpy+0xe2>
   1660a:	880b      	ldrh	r3, [r1, #0]
   1660c:	8003      	strh	r3, [r0, #0]
   1660e:	4660      	mov	r0, ip
   16610:	4770      	bx	lr
   16612:	bf00      	nop
   16614:	2a08      	cmp	r2, #8
   16616:	d313      	bcc.n	16640 <memcpy+0x114>
   16618:	078b      	lsls	r3, r1, #30
   1661a:	d08d      	beq.n	16538 <memcpy+0xc>
   1661c:	f010 0303 	ands.w	r3, r0, #3
   16620:	d08a      	beq.n	16538 <memcpy+0xc>
   16622:	f1c3 0304 	rsb	r3, r3, #4
   16626:	1ad2      	subs	r2, r2, r3
   16628:	07db      	lsls	r3, r3, #31
   1662a:	bf1c      	itt	ne
   1662c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   16630:	f800 3b01 	strbne.w	r3, [r0], #1
   16634:	d380      	bcc.n	16538 <memcpy+0xc>
   16636:	f831 3b02 	ldrh.w	r3, [r1], #2
   1663a:	f820 3b02 	strh.w	r3, [r0], #2
   1663e:	e77b      	b.n	16538 <memcpy+0xc>
   16640:	3a04      	subs	r2, #4
   16642:	d3d9      	bcc.n	165f8 <memcpy+0xcc>
   16644:	3a01      	subs	r2, #1
   16646:	f811 3b01 	ldrb.w	r3, [r1], #1
   1664a:	f800 3b01 	strb.w	r3, [r0], #1
   1664e:	d2f9      	bcs.n	16644 <memcpy+0x118>
   16650:	780b      	ldrb	r3, [r1, #0]
   16652:	7003      	strb	r3, [r0, #0]
   16654:	784b      	ldrb	r3, [r1, #1]
   16656:	7043      	strb	r3, [r0, #1]
   16658:	788b      	ldrb	r3, [r1, #2]
   1665a:	7083      	strb	r3, [r0, #2]
   1665c:	4660      	mov	r0, ip
   1665e:	4770      	bx	lr

00016660 <memset>:
   16660:	b470      	push	{r4, r5, r6}
   16662:	0786      	lsls	r6, r0, #30
   16664:	d046      	beq.n	166f4 <memset+0x94>
   16666:	1e54      	subs	r4, r2, #1
   16668:	2a00      	cmp	r2, #0
   1666a:	d041      	beq.n	166f0 <memset+0x90>
   1666c:	b2ca      	uxtb	r2, r1
   1666e:	4603      	mov	r3, r0
   16670:	e002      	b.n	16678 <memset+0x18>
   16672:	f114 34ff 	adds.w	r4, r4, #4294967295
   16676:	d33b      	bcc.n	166f0 <memset+0x90>
   16678:	f803 2b01 	strb.w	r2, [r3], #1
   1667c:	079d      	lsls	r5, r3, #30
   1667e:	d1f8      	bne.n	16672 <memset+0x12>
   16680:	2c03      	cmp	r4, #3
   16682:	d92e      	bls.n	166e2 <memset+0x82>
   16684:	b2cd      	uxtb	r5, r1
   16686:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1668a:	2c0f      	cmp	r4, #15
   1668c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   16690:	d919      	bls.n	166c6 <memset+0x66>
   16692:	f103 0210 	add.w	r2, r3, #16
   16696:	4626      	mov	r6, r4
   16698:	3e10      	subs	r6, #16
   1669a:	2e0f      	cmp	r6, #15
   1669c:	f842 5c10 	str.w	r5, [r2, #-16]
   166a0:	f842 5c0c 	str.w	r5, [r2, #-12]
   166a4:	f842 5c08 	str.w	r5, [r2, #-8]
   166a8:	f842 5c04 	str.w	r5, [r2, #-4]
   166ac:	f102 0210 	add.w	r2, r2, #16
   166b0:	d8f2      	bhi.n	16698 <memset+0x38>
   166b2:	f1a4 0210 	sub.w	r2, r4, #16
   166b6:	f022 020f 	bic.w	r2, r2, #15
   166ba:	f004 040f 	and.w	r4, r4, #15
   166be:	3210      	adds	r2, #16
   166c0:	2c03      	cmp	r4, #3
   166c2:	4413      	add	r3, r2
   166c4:	d90d      	bls.n	166e2 <memset+0x82>
   166c6:	461e      	mov	r6, r3
   166c8:	4622      	mov	r2, r4
   166ca:	3a04      	subs	r2, #4
   166cc:	2a03      	cmp	r2, #3
   166ce:	f846 5b04 	str.w	r5, [r6], #4
   166d2:	d8fa      	bhi.n	166ca <memset+0x6a>
   166d4:	1f22      	subs	r2, r4, #4
   166d6:	f022 0203 	bic.w	r2, r2, #3
   166da:	3204      	adds	r2, #4
   166dc:	4413      	add	r3, r2
   166de:	f004 0403 	and.w	r4, r4, #3
   166e2:	b12c      	cbz	r4, 166f0 <memset+0x90>
   166e4:	b2c9      	uxtb	r1, r1
   166e6:	441c      	add	r4, r3
   166e8:	f803 1b01 	strb.w	r1, [r3], #1
   166ec:	429c      	cmp	r4, r3
   166ee:	d1fb      	bne.n	166e8 <memset+0x88>
   166f0:	bc70      	pop	{r4, r5, r6}
   166f2:	4770      	bx	lr
   166f4:	4614      	mov	r4, r2
   166f6:	4603      	mov	r3, r0
   166f8:	e7c2      	b.n	16680 <memset+0x20>
   166fa:	bf00      	nop

000166fc <rand>:
   166fc:	b410      	push	{r4}
   166fe:	4b0c      	ldr	r3, [pc, #48]	; (16730 <rand+0x34>)
   16700:	480c      	ldr	r0, [pc, #48]	; (16734 <rand+0x38>)
   16702:	6819      	ldr	r1, [r3, #0]
   16704:	4c0c      	ldr	r4, [pc, #48]	; (16738 <rand+0x3c>)
   16706:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1670a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1670e:	fb00 f002 	mul.w	r0, r0, r2
   16712:	fb04 0003 	mla	r0, r4, r3, r0
   16716:	fba2 2304 	umull	r2, r3, r2, r4
   1671a:	4403      	add	r3, r0
   1671c:	3201      	adds	r2, #1
   1671e:	f143 0300 	adc.w	r3, r3, #0
   16722:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   16726:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1672a:	bc10      	pop	{r4}
   1672c:	4770      	bx	lr
   1672e:	bf00      	nop
   16730:	200001c4 	.word	0x200001c4
   16734:	5851f42d 	.word	0x5851f42d
   16738:	4c957f2d 	.word	0x4c957f2d
   1673c:	00000000 	.word	0x00000000

00016740 <strlen>:
   16740:	f890 f000 	pld	[r0]
   16744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   16748:	f020 0107 	bic.w	r1, r0, #7
   1674c:	f06f 0c00 	mvn.w	ip, #0
   16750:	f010 0407 	ands.w	r4, r0, #7
   16754:	f891 f020 	pld	[r1, #32]
   16758:	f040 8049 	bne.w	167ee <strlen+0xae>
   1675c:	f04f 0400 	mov.w	r4, #0
   16760:	f06f 0007 	mvn.w	r0, #7
   16764:	e9d1 2300 	ldrd	r2, r3, [r1]
   16768:	f891 f040 	pld	[r1, #64]	; 0x40
   1676c:	f100 0008 	add.w	r0, r0, #8
   16770:	fa82 f24c 	uadd8	r2, r2, ip
   16774:	faa4 f28c 	sel	r2, r4, ip
   16778:	fa83 f34c 	uadd8	r3, r3, ip
   1677c:	faa2 f38c 	sel	r3, r2, ip
   16780:	bb4b      	cbnz	r3, 167d6 <strlen+0x96>
   16782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   16786:	fa82 f24c 	uadd8	r2, r2, ip
   1678a:	f100 0008 	add.w	r0, r0, #8
   1678e:	faa4 f28c 	sel	r2, r4, ip
   16792:	fa83 f34c 	uadd8	r3, r3, ip
   16796:	faa2 f38c 	sel	r3, r2, ip
   1679a:	b9e3      	cbnz	r3, 167d6 <strlen+0x96>
   1679c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   167a0:	fa82 f24c 	uadd8	r2, r2, ip
   167a4:	f100 0008 	add.w	r0, r0, #8
   167a8:	faa4 f28c 	sel	r2, r4, ip
   167ac:	fa83 f34c 	uadd8	r3, r3, ip
   167b0:	faa2 f38c 	sel	r3, r2, ip
   167b4:	b97b      	cbnz	r3, 167d6 <strlen+0x96>
   167b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   167ba:	f101 0120 	add.w	r1, r1, #32
   167be:	fa82 f24c 	uadd8	r2, r2, ip
   167c2:	f100 0008 	add.w	r0, r0, #8
   167c6:	faa4 f28c 	sel	r2, r4, ip
   167ca:	fa83 f34c 	uadd8	r3, r3, ip
   167ce:	faa2 f38c 	sel	r3, r2, ip
   167d2:	2b00      	cmp	r3, #0
   167d4:	d0c6      	beq.n	16764 <strlen+0x24>
   167d6:	2a00      	cmp	r2, #0
   167d8:	bf04      	itt	eq
   167da:	3004      	addeq	r0, #4
   167dc:	461a      	moveq	r2, r3
   167de:	ba12      	rev	r2, r2
   167e0:	fab2 f282 	clz	r2, r2
   167e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   167e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   167ec:	4770      	bx	lr
   167ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   167f2:	f004 0503 	and.w	r5, r4, #3
   167f6:	f1c4 0000 	rsb	r0, r4, #0
   167fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   167fe:	f014 0f04 	tst.w	r4, #4
   16802:	f891 f040 	pld	[r1, #64]	; 0x40
   16806:	fa0c f505 	lsl.w	r5, ip, r5
   1680a:	ea62 0205 	orn	r2, r2, r5
   1680e:	bf1c      	itt	ne
   16810:	ea63 0305 	ornne	r3, r3, r5
   16814:	4662      	movne	r2, ip
   16816:	f04f 0400 	mov.w	r4, #0
   1681a:	e7a9      	b.n	16770 <strlen+0x30>

0001681c <__register_exitproc>:
   1681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16820:	4d2c      	ldr	r5, [pc, #176]	; (168d4 <__register_exitproc+0xb8>)
   16822:	4606      	mov	r6, r0
   16824:	6828      	ldr	r0, [r5, #0]
   16826:	4698      	mov	r8, r3
   16828:	460f      	mov	r7, r1
   1682a:	4691      	mov	r9, r2
   1682c:	f000 f882 	bl	16934 <__retarget_lock_acquire_recursive>
   16830:	4b29      	ldr	r3, [pc, #164]	; (168d8 <__register_exitproc+0xbc>)
   16832:	681c      	ldr	r4, [r3, #0]
   16834:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   16838:	2b00      	cmp	r3, #0
   1683a:	d03e      	beq.n	168ba <__register_exitproc+0x9e>
   1683c:	685a      	ldr	r2, [r3, #4]
   1683e:	2a1f      	cmp	r2, #31
   16840:	dc1c      	bgt.n	1687c <__register_exitproc+0x60>
   16842:	f102 0e01 	add.w	lr, r2, #1
   16846:	b176      	cbz	r6, 16866 <__register_exitproc+0x4a>
   16848:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1684c:	2401      	movs	r4, #1
   1684e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   16852:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   16856:	4094      	lsls	r4, r2
   16858:	4320      	orrs	r0, r4
   1685a:	2e02      	cmp	r6, #2
   1685c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   16860:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   16864:	d023      	beq.n	168ae <__register_exitproc+0x92>
   16866:	3202      	adds	r2, #2
   16868:	f8c3 e004 	str.w	lr, [r3, #4]
   1686c:	6828      	ldr	r0, [r5, #0]
   1686e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   16872:	f000 f861 	bl	16938 <__retarget_lock_release_recursive>
   16876:	2000      	movs	r0, #0
   16878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1687c:	4b17      	ldr	r3, [pc, #92]	; (168dc <__register_exitproc+0xc0>)
   1687e:	b30b      	cbz	r3, 168c4 <__register_exitproc+0xa8>
   16880:	f44f 70c8 	mov.w	r0, #400	; 0x190
   16884:	f7fa fd22 	bl	112cc <malloc>
   16888:	4603      	mov	r3, r0
   1688a:	b1d8      	cbz	r0, 168c4 <__register_exitproc+0xa8>
   1688c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   16890:	6002      	str	r2, [r0, #0]
   16892:	2100      	movs	r1, #0
   16894:	6041      	str	r1, [r0, #4]
   16896:	460a      	mov	r2, r1
   16898:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1689c:	f04f 0e01 	mov.w	lr, #1
   168a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   168a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   168a8:	2e00      	cmp	r6, #0
   168aa:	d0dc      	beq.n	16866 <__register_exitproc+0x4a>
   168ac:	e7cc      	b.n	16848 <__register_exitproc+0x2c>
   168ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   168b2:	430c      	orrs	r4, r1
   168b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   168b8:	e7d5      	b.n	16866 <__register_exitproc+0x4a>
   168ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   168be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   168c2:	e7bb      	b.n	1683c <__register_exitproc+0x20>
   168c4:	6828      	ldr	r0, [r5, #0]
   168c6:	f000 f837 	bl	16938 <__retarget_lock_release_recursive>
   168ca:	f04f 30ff 	mov.w	r0, #4294967295
   168ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   168d2:	bf00      	nop
   168d4:	200005f0 	.word	0x200005f0
   168d8:	00018608 	.word	0x00018608
   168dc:	000112cd 	.word	0x000112cd

000168e0 <register_fini>:
   168e0:	4b02      	ldr	r3, [pc, #8]	; (168ec <register_fini+0xc>)
   168e2:	b113      	cbz	r3, 168ea <register_fini+0xa>
   168e4:	4802      	ldr	r0, [pc, #8]	; (168f0 <register_fini+0x10>)
   168e6:	f000 b805 	b.w	168f4 <atexit>
   168ea:	4770      	bx	lr
   168ec:	00000000 	.word	0x00000000
   168f0:	00016901 	.word	0x00016901

000168f4 <atexit>:
   168f4:	2300      	movs	r3, #0
   168f6:	4601      	mov	r1, r0
   168f8:	461a      	mov	r2, r3
   168fa:	4618      	mov	r0, r3
   168fc:	f7ff bf8e 	b.w	1681c <__register_exitproc>

00016900 <__libc_fini_array>:
   16900:	b538      	push	{r3, r4, r5, lr}
   16902:	4c0a      	ldr	r4, [pc, #40]	; (1692c <__libc_fini_array+0x2c>)
   16904:	4d0a      	ldr	r5, [pc, #40]	; (16930 <__libc_fini_array+0x30>)
   16906:	1b64      	subs	r4, r4, r5
   16908:	10a4      	asrs	r4, r4, #2
   1690a:	d00a      	beq.n	16922 <__libc_fini_array+0x22>
   1690c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   16910:	3b01      	subs	r3, #1
   16912:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   16916:	3c01      	subs	r4, #1
   16918:	f855 3904 	ldr.w	r3, [r5], #-4
   1691c:	4798      	blx	r3
   1691e:	2c00      	cmp	r4, #0
   16920:	d1f9      	bne.n	16916 <__libc_fini_array+0x16>
   16922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16926:	f001 bea5 	b.w	18674 <_fini>
   1692a:	bf00      	nop
   1692c:	00018684 	.word	0x00018684
   16930:	00018680 	.word	0x00018680

00016934 <__retarget_lock_acquire_recursive>:
   16934:	4770      	bx	lr
   16936:	bf00      	nop

00016938 <__retarget_lock_release_recursive>:
   16938:	4770      	bx	lr
   1693a:	bf00      	nop
   1693c:	2e2f2e2e 	.word	0x2e2f2e2e
   16940:	2e2e2f2e 	.word	0x2e2e2f2e
   16944:	554c412f 	.word	0x554c412f
   16948:	6972445f 	.word	0x6972445f
   1694c:	2f726576 	.word	0x2f726576
   16950:	5f554c41 	.word	0x5f554c41
   16954:	76697244 	.word	0x76697244
   16958:	682f7265 	.word	0x682f7265
   1695c:	692f6c61 	.word	0x692f6c61
   16960:	756c636e 	.word	0x756c636e
   16964:	682f6564 	.word	0x682f6564
   16968:	775f6c61 	.word	0x775f6c61
   1696c:	682e7464 	.word	0x682e7464
   16970:	00000000 	.word	0x00000000
   16974:	656c6553 	.word	0x656c6553
   16978:	64657463 	.word	0x64657463
   1697c:	6e696c20 	.word	0x6e696c20
   16980:	00003a65 	.word	0x00003a65
   16984:	00000a0d 	.word	0x00000a0d
   16988:	2a2a2a2a 	.word	0x2a2a2a2a
   1698c:	66694c20 	.word	0x66694c20
   16990:	75502065 	.word	0x75502065
   16994:	2065736c 	.word	0x2065736c
   16998:	69746341 	.word	0x69746341
   1699c:	65746176 	.word	0x65746176
   169a0:	2a2a2a64 	.word	0x2a2a2a64
   169a4:	0000002a 	.word	0x0000002a

000169a8 <_ZTV10AMMC_Class>:
	...
   169bc:	000105ad 0001047d 00000729 0000076d     ....}...)...m...
   169cc:	00010a5d                                ]...

000169d0 <_ZTT10AMMC_Class>:
   169d0:	000169bc 000169fc 00016a24 00016a24     .i...i..$j..$j..
   169e0:	000169fc 000169bc                       .i...i..

000169e8 <_ZTC10AMMC_Class0_15ARINC_Interface>:
	...
   169fc:	000105ad 0001047d 00000000 00000000     ....}...........
   16a0c:	00010a5d                                ]...

00016a10 <_ZTC10AMMC_Class0_14Protocol_Class>:
	...
   16a24:	000105ad 0001047d 00000000 00000000     ....}...........
   16a34:	000112f3                                ....

00016a38 <factoryDefaultsConfiguration>:
   16a38:	000000ac 00000004 0000070c 00000000     ................
   16a48:	00000000 00000001 000003e8 000003e8     ................
   16a58:	000003e8 00000000 00000000 00000000     ................
   16a68:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   16a78:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   16a88:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   16a98:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   16aa8:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   16ab8:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   16ac8:	41200000 41200000 00000014 00000078     .. A.. A....x...
   16ad8:	be23d70a 41d00000 00000078              ..#....Ax...

00016ae4 <factoryDefaultsCycles>:
   16ae4:	000001c0 00000005 0000000c 00000024     ............$...
   16af4:	756e614d 00006c61 00000000 00000000     Manual..........
   16b04:	00000000 00000001 00000258 0000000f     ........X.......
   16b14:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   16b2c:	00000001 00000258 0000001e 0000012c     ....X.......,...
   16b3c:	2030332b 73636573 00000000 00000000     +30 secs........
   16b4c:	00000000 00000001 000000f0 0000001e     ................
   16b5c:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   16b84:	73657250 32207465 00000000 00000000     Preset 2........
	...
   16ba8:	73657250 33207465 00000000 00000000     Preset 3........
	...
   16bcc:	73657250 34207465 00000000 00000000     Preset 4........
	...
   16bf0:	73657250 35207465 00000000 00000000     Preset 5........
	...
   16c14:	73657250 36207465 00000000 00000000     Preset 6........
	...
   16c38:	73657250 37207465 00000000 00000000     Preset 7........
	...
   16c5c:	73657250 38207465 00000000 00000000     Preset 8........
	...
   16c80:	73657250 39207465 00000000 00000000     Preset 9........
	...
   16ca4:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   16cb4:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   16cc4:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   16cd4:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   16ce4:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   16cf4:	79646165 00000000 616c6544 00646579     eady....Delayed.
   16d04:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   16d14:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   16d24:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   16d34:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   16d44:	746f7250 00746365 6f727245 00000072     Protect.Error...
   16d54:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   16d64:	74616470 00000065 6d726946 65726177     pdate...Firmware
   16d74:	61647055 00006574 72727543 20746e65     Update..Current 
   16d84:	74617453 00000065 6c637943 75442065     State...Cycle Du
   16d94:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   16da4:	69542067 0000656d 67726154 50207465     g Time..Target P
   16db4:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   16dc4:	00000063 00203a20 00007830 00000a0d     c... : .0x......

00016dd4 <_ZTV17ConfigState_Class>:
	...
   16ddc:	000112f3                                ....

00016de0 <_ZTV14DateTime_Class>:
	...
   16de8:	0001315d 0001324d 49505351 6f725020     ]1..M2..QSPI Pro
   16df8:	6d617267 61745320 64657472 00000d0a     gram Started....
   16e08:	73616c46 61642068 76206174 66697265     Flash data verif
   16e18:	74616369 206e6f69 6c696166 0a2e6465     ication failed..
   16e28:	0000000d 74696220 00003a20 00000a0d     .... bit :......
   16e38:	74697257 202d2065 64616552 20736920     Write - Read is 
   16e48:	63637573 66737365 69206c75 5351206e     successful in QS
   16e58:	46204950 6873616c 6d656d20 2079726f     PI Flash memory 
   16e68:	00000000 202a2a2a 72617453 20705574     ....*** StartUp 
   16e78:	6f676c41 68746972 206e656d 74736554     Algorithmen Test
   16e88:	2a2a2a20 00000000 202a2a2a 65746144      ***....*** Date
   16e98:	0020203a 20706553 32203332 00303230     :  .Sep 23 2020.
   16ea8:	6d695420 00203a65 333a3331 33323a39      Time: .13:39:23
   16eb8:	00000000 202a2a2a 20554c41 74696e69     ....*** ALU init
   16ec8:	65746169 2a2a2064 0000002a 69746341     iated ***...Acti
   16ed8:	6c206576 3a656e69 00000020 73616c46     ve line: ...Flas
   16ee8:	654d2068 79726f6d 6c655320 73655466     h Memory SelfTes
   16ef8:	41502074 44455353 00000000 00000a0d     t PASSED........
   16f08:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   16f18:	73655466 41462074 44454c49 00000000     fTest FAILED....
   16f28:	52504545 4d204d4f 726f6d65 65532079     EEPROM Memory Se
   16f38:	6554666c 50207473 45535341 00000044     lfTest PASSED...
   16f48:	52504545 4d204d4f 726f6d65 65532079     EEPROM Memory Se
   16f58:	6554666c 46207473 454c4941 00000044     lfTest FAILED...
   16f68:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   16f78:	65636572 64657669 7773203a 68637469     received: switch
   16f88:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   16f98:	00000000 6c662820 20736761 00203d3d     .... (flags == .
   16fa8:	00000a0d 646e6168 7453656c 49657461     ....handleStateI
   16fb8:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   16fc8:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   16fd8:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   16fe8:	646e6168 7453656c 53657461 646e6174     handleStateStand
   16ff8:	464f7962 00000046 646e6168 7453656c     byOFF...handleSt
   17008:	50657461 61706572 74536572 62646e61     atePrepareStandb
   17018:	004e4f79                                yON.

0001701c <_ZTV12States_Class>:
	...
   17024:	00002a7d 682f2e2e 702f6c70 2f74726f     }*..../hpl/port/
   17034:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   17044:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
   17054:	775f6c61 682e7464 00000000 682f2e2e     al_wdt.h....../h
   17064:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
   17074:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
   17084:	682f6372 635f6c61 615f6e61 636e7973     rc/hal_can_async
   17094:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   170a4:	635f6c61 735f6372 2e636e79 00000063     al_crc_sync.c...
   170b4:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   170c4:	6d5f6332 7973615f 632e636e 00000000     2c_m_async.c....
   170d4:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   170e4:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   170f4:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   17104:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   17114:	735f6c61 6d5f6970 7973615f 632e636e     al_spi_m_async.c
   17124:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   17134:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   17144:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   17154:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   17164:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   17174:	2e747369 00000063                       ist.c...

0001717c <_map>:
   1717c:	00000004 00000004 00000005 00000005     ................
   1718c:	00000006 00000056 00000007 00000057     ....V.......W...
   1719c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   171ac:	632e6369 00000000                       ic.c....

000171b4 <user_mux_confs>:
   171b4:	00000100 00000000 00000000 00000000     ................
	...

000171f8 <channel_confs>:
   171f8:	0000065e 00000000 00000000 00000000     ^...............
	...

00017238 <interrupt_cfg>:
	...
   172b8:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   172c8:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   172d8:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   172e8:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   172f8:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   17308:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   17318:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   17328:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   17338:	43000c00                                ...C

0001733c <sercomspi_regs>:
   1733c:	0020000c 00020000 00000000 01ff00fe     .. .............
   1734c:	20000c00 02000000 00000000 ff00fe00     ... ............
   1735c:	000c0101 00000020 00000002 00fe0000     .... ...........
   1736c:	000401ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1737c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1738c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1739c:	43001400 43001800                       ...C...C

000173a4 <_usb_ep_cfgs>:
   173a4:	200030f4 00000000 00000040 20003134     .0. ....@...41. 
   173b4:	20003174 00400040 200031b4 200031f4     t1. @.@..1. .1. 
   173c4:	00400040 20003234 20003274 00400040     @.@.42. t2. @.@.
   173d4:	200032b4 200032f4 00400040 00000804     .2. .2. @.@.....
   173e4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   173f4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   17404:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   17414:	7361625f 00682e65                       _base.h.

0001741c <n25q256a_interface>:
   1741c:	0000e97d 0000ea21 0000eb31 0000ece9     }...!...1.......
   1742c:	0000ed79 752f2e2e 642f6273 63697665     y...../usb/devic
   1743c:	73752f65 2e636462 00000063              e/usbdc.c...

00017448 <_ZTV17ARINC_Conversions>:
	...
   17450:	000105ad 0001047d                       ....}...

00017458 <_ZL5Mesg1>:
   17458:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

00017468 <_ZL5Mesg2>:
   17468:	61746144 0000203a                       Data: ..

00017470 <_ZL10HexToAscii>:
   17470:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00017480 <_ZL11HistoryMesg>:
   17480:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   17490:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   174a0:	206f7420 74696e69 7a696c69 000d0a65      to initilize...
   174b0:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   174c0:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   174d0:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   174e0:	67617373 2d2d2165 00002d2d 72540d0a     ssage!----....Tr
   174f0:	6d736e61 26207469 63655220 65766965     ansmit & Receive
   17500:	74695720 614c2068 736c6562 646f4d20      With Labels Mod
   17510:	000d0a65 45530d0a 542d464c 2c545345     e.....SELF-TEST,
   17520:	746e4920 616e7265 6944206c 61746967      Internal Digita
   17530:	6f4c206c 622d706f 2c6b6361 206f4e20     l Loop-back, No 
   17540:	61746164 20736920 6e617274 74696d73     data is transmit
   17550:	20646574 65747865 6c616e72 0d0a796c     ted externally..
   17560:	00000000 6f200d0a 6154206e 20656c62     ...... on Table 
   17570:	6562616c 6120736c 45206572 6c62616e     labels are Enabl
   17580:	00006465 500a0d0a 73736572 2d575320     ed.....Press SW-
   17590:	6f742031 61747320 69207472 6974696e     1 to start initi
   175a0:	796c6c61 000a0d0a 202d2d2d 74747542     ally....--- Butt
   175b0:	43206e6f 616d6d6f 2073646e 0a2d2d2d     on Commands ---.
   175c0:	0000000d 70532020 20656361 20726142     ....  Space Bar 
   175d0:	44206f74 6c707369 53207961 75746174     to Display Statu
   175e0:	6e612073 6f432064 6f72746e 6552206c     s and Control Re
   175f0:	74736967 0a737265 0000000d 20702020     gisters.....  p 
   17600:	50206f74 65737561 00000d0a 206d2020     to Pause....  m 
   17610:	44206f74 6c707369 4c207961 6c656261     to Display Label
   17620:	6d654d20 0079726f 003e0d0a 72540d0a      Memory...>...Tr
   17630:	6d736e61 69747469 0d0a676e 0000003e     ansmitting..>...
   17640:	49480d0a 3935332d 74532033 73757461     ..HI-3593 Status
   17650:	6f43202c 6f72746e 6552206c 74736967     , Control Regist
   17660:	0d737265 0000000a 20090d0a 2a2a2a20     ers........  ***
   17670:	50202a2a 73736572 70732020 62656361     ** Press  spaceb
   17680:	74207261 6f63206f 6e69746e 2a206575     ar to continue *
   17690:	2a2a2a2a 0000002a 540d0a0a 736e6172     *****......Trans
   176a0:	2074696d 73756150 0d0a6465 00000000     mit Paused......
   176b0:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   176c0:	2d4e4f54 6f742032 61727420 696d736e     TON-2 to transmi
   176d0:	6e6f2074 72662065 20656d61 20646e61     t one frame and 
   176e0:	73756170 000d0a65 72500d0a 20737365     pause.....Press 
   176f0:	44454c4f 5455425f 2d4e4f54 6f742033     OLED_BUTTON-3 to
   17700:	73655220 0a656d75 0000000d 72540d0a      Resume.......Tr
   17710:	6d736e61 65747469 65522072 656d7573     ansmitter Resume
   17720:	2e2e2e64 00000d0a 65520d0a 76696563     d.........Receiv
   17730:	31207265 62614c20 0a736c65 0000000d     er 1 Labels.....
   17740:	65520d0a 76696563 32207265 62614c20     ..Receiver 2 Lab
   17750:	0a736c65 0000000d 72540d0a 6d736e61     els.......Transm
   17760:	26207469 63655220 65766965 68634520     it & Receive Ech
   17770:	6f4d206f 0d0a6564 00000000 6c530d0a     o Mode........Sl
   17780:	5320776f 64656570 00000000 61460d0a     ow Speed......Fa
   17790:	53207473 64656570 00000000 72540d0a     st Speed......Tr
   177a0:	6d736e61 65747469 61502072 79746972     ansmitter Parity
   177b0:	616e4520 64656c62 00000000 61540d0a      Enabled......Ta
   177c0:	20656c62 6562616c 6120736c 45206572     ble labels are E
   177d0:	6c62616e 00006465 2d0a0d0a 43202d2d     nabled.....--- C
   177e0:	6f736e6f 4320656c 616d6d6f 2073646e     onsole Commands 
   177f0:	706c6548 2d2d2d20 00000000 20502020     Help ---....  P 
   17800:	6150203d 79746972 676f5420 20656c67     = Parity Toggle 
   17810:	6f2f6e6f 00006666 20542020 4654203d     on/off..  T = TF
   17820:	2050494c 676f5420 20656c67 6f2f6e6f     LIP  Toggle on/o
   17830:	00006666 20522020 4652203d 2050494c     ff..  R = RFLIP 
   17840:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   17850:	20532020 4453203d 202c4e4f 2c394453       S = SDON, SD9,
   17860:	31445320 6f542030 656c6767 2f6e6f20      SD10 Toggle on/
   17870:	0066666f 20482020 6854203d 48207369     off.  H = This H
   17880:	20706c65 65676150 00000000 70532020     elp Page....  Sp
   17890:	20656361 20726142 6944203d 616c7073     ace Bar = Displa
   178a0:	74532079 73757461 646e6120 6e6f4320     y Status and Con
   178b0:	6c6f7274 67657220 00000073 20492020     trol regs...  I 
   178c0:	6e49203d 6d657263 20746e65 7373654d     = Increment Mess
   178d0:	20656761 20646e61 6e617254 74696d73     age and Transmit
   178e0:	7845202e 726f6c70 4d207265 2065646f     . Explorer Mode 
   178f0:	4f202d20 21594c4e 00000000 204d2020      - ONLY!....  M 
   17900:	6e45203d 20726574 74737543 4d206d6f     = Enter Custom M
   17910:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   17920:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   17930:	4e452020 3d524554 61725420 696d736e       ENTER= Transmi
   17940:	656e2074 6d207478 61737365 202e6567     t next message. 
   17950:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   17960:	4c4e4f20 00002159 00207830 30307826      ONLY!..0x .&x00
   17970:	00002030 50205854 74697261 4e4f2079     0 ..TX Parity ON
   17980:	003e0d0a 50205854 74697261 464f2079     ..>.TX Parity OF
   17990:	3e0d0a46 00000000 494c4654 65532050     F..>....TFLIP Se
   179a0:	3e0d0a74 00000000 494c4654 6c432050     t..>....TFLIP Cl
   179b0:	65726165 3e0d0a64 00000000 2d434552     eared..>....REC-
   179c0:	46522031 2050494c 0a746553 00003e0d     1 RFLIP Set..>..
   179d0:	2d434552 46522031 2050494c 61656c43     REC-1 RFLIP Clea
   179e0:	0a646572 00003e0d 2d434552 46522032     red..>..REC-2 RF
   179f0:	2050494c 0a746553 00003e0d 2d434552     LIP Set..>..REC-
   17a00:	46522032 2050494c 61656c43 0a646572     2 RFLIP Cleared.
   17a10:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   17a20:	61203944 5320646e 20303144 0a746553     D9 and SD10 Set.
   17a30:	00003e0d 2d434552 44532031 532c4e4f     .>..REC-1 SDON,S
   17a40:	61203944 5320646e 20303144 61656c43     D9 and SD10 Clea
   17a50:	0a646572 00003e0d 2d434552 44532032     red..>..REC-2 SD
   17a60:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   17a70:	0a746553 00003e0d 2d434552 44532032     Set..>..REC-2 SD
   17a80:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   17a90:	61656c43 0a646572 00003e0d 500a0d0a     Cleared..>.....P
   17aa0:	73736572 61705320 42206563 6f207261     ress Space Bar o
   17ab0:	57532072 7420342d 6572206f 656d7573     r SW-4 to resume
   17ac0:	00000000 6562614c 2020736c 202d2030     ....Labels  0 - 
   17ad0:	203a3336 00000020 00000020 614c0d0a     63:  ... .....La
   17ae0:	736c6562 34362020 3732312d 0020203a     bels  64-127:  .
   17af0:	614c0d0a 736c6562 38323120 3139312d     ..Labels 128-191
   17b00:	0020203a 614c0d0a 736c6562 32393120     :  ...Labels 192
   17b10:	3535322d 0020203a 614c0d0a 736c6562     -255:  ...Labels
   17b20:	20302020 3336202d 0020203a 543e0d0a       0 - 63:  ...>T
   17b30:	20202058 74614420 00003a61 6562614c     X    Data:..Labe
   17b40:	00003a6c 0000003e 2d636552 61442031     l:..>...Rec-1 Da
   17b50:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   17b60:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   17b70:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   17b80:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   17b90:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   17ba0:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   17bb0:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   17bc0:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   17bd0:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   17be0:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   17bf0:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   17c00:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   17c10:	70736944 2079616c 74617453 61207375     Display Status a
   17c20:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   17c30:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   17c40:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   17c50:	6e6f2074 656d2065 67617373 72662065     t one message fr
   17c60:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   17c70:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   17c80:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   17c90:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   17ca0:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   17cb0:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   17cc0:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   17cd0:	74737563 6d206d6f 61737365 00006567     custom message..
   17ce0:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   17cf0:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   17d00:	00000065 73657250 70732073 62656361     e...Press spaceb
   17d10:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   17d20:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   17d30:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   17d40:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   17d50:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   17d60:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   17d70:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   17d80:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   17d90:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   17da0:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   17db0:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   17dc0:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   17dd0:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   17de0:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   17df0:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   17e00:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   17e10:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   17e20:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   17e30:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   17e40:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   17e50:	3e0d0a61 00000000                       a..>....

00017e58 <_ZTV15ARINC_Interface>:
	...
   17e6c:	000105ad 0001047d 00010815 00010879     ....}.......y...
   17e7c:	00010a5d                                ]...

00017e80 <_ZTT15ARINC_Interface>:
   17e80:	00017e6c 00017ea4 00017ea4 00017e6c     l~...~...~..l~..

00017e90 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   17ea4:	000105ad 0001047d 00000000 00000000     ....}...........
   17eb4:	000112f3 636e7546 6e6f6974 65786520     ....Function exe
   17ec4:	65747563 75732064 73656363 6c756673     cuted successful
   17ed4:	0000796c 63656843 6f79206b 77207275     ly..Check your w
   17ee4:	6e697269 46202e67 6873616c 69686320     iring. Flash chi
   17ef4:	73692070 6e6f6e20 7365722d 736e6f70     p is non-respons
   17f04:	2e657669 00000000 6e6f632a 75727473     ive.....*constru
   17f14:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
   17f24:	69676562 2029286e 20736177 20746f6e     begin() was not 
   17f34:	6c6c6163 69206465 6f76206e 73206469     called in void s
   17f44:	70757465 00002928 62616e55 7420656c     etup()..Unable t
   17f54:	6469206f 69746e65 63207966 2e706968     o identify chip.
   17f64:	65724120 756f7920 72757320 68742065      Are you sure th
   17f74:	63207369 20706968 73207369 6f707075     is chip is suppo
   17f84:	64657472 0000003f 62616e55 7420656c     rted?...Unable t
   17f94:	6469206f 69746e65 63207966 63617061     o identify capac
   17fa4:	2e797469 20734920 73696874 69686320     ity. Is this chi
   17fb4:	666f2070 69636966 796c6c61 70757320     p officially sup
   17fc4:	74726f70 203f6465 6e206649 202c746f     ported? If not, 
   17fd4:	61656c70 64206573 6e696665 20612065     please define a 
   17fe4:	50414360 54494341 63206059 74736e6f     `CAPACITY` const
   17ff4:	20746e61 20646e61 6c636e69 20656475     ant and include 
   18004:	69207469 6c66206e 2e687361 69676562     it in flash.begi
   18014:	4143286e 49434150 2e295954 00000000     n(CAPACITY).....
   18024:	70696843 20736920 79737562 0000002e     Chip is busy....
   18034:	656b614d 72757320 6c612065 6970206c     Make sure all pi
   18044:	6820736e 20657661 6e656562 6e6f6320     ns have been con
   18054:	7463656e 70206465 65706f72 00796c72     nected properly.
   18064:	65676150 65766f20 6f6c6672 61682077     Page overflow ha
   18074:	65622073 64206e65 62617369 2064656c     s been disabled 
   18084:	20646e61 20656874 72646461 20737365     and the address 
   18094:	6c6c6163 65206465 65656378 74207364     called exceeds t
   180a4:	6d206568 726f6d65 00000079 62616e55     he memory...Unab
   180b4:	7420656c 6e45206f 656c6261 69725720     le to Enable Wri
   180c4:	676e6974 206f7420 70696863 0000002e     ting to chip....
   180d4:	61656c50 6d206573 20656b61 65727573     Please make sure
   180e4:	65687420 4c4f4820 20262044 54495257      the HOLD & WRIT
   180f4:	4f525045 54434554 6e697020 72612073     EPROTECT pins ar
   18104:	75702065 64656c6c 20707520 56206f74     e pulled up to V
   18114:	00004343 73696854 63657320 20726f74     CC..This sector 
   18124:	65726c61 20796461 746e6f63 736e6961     already contains
   18134:	74616420 00002e61 61656c50 6d206573      data...Please m
   18144:	20656b61 65727573 65687420 63657320     ake sure the sec
   18154:	73726f74 69656220 7720676e 74746972     tors being writt
   18164:	74206e65 7261206f 72652065 64657361     en to are erased
   18174:	0000002e 20756f59 20657261 6e6e7572     ....You are runn
   18184:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
   18194:	656c5020 20657361 6974706f 6573696d      Please optimise
   181a4:	756f7920 72702072 6172676f 6f66206d      your program fo
   181b4:	65622072 72657474 4d415220 61737520     r better RAM usa
   181c4:	00006567 73696854 6e756620 6f697463     ge..This functio
   181d4:	7369206e 746f6e20 70757320 74726f70     n is not support
   181e4:	62206465 68742079 6c662065 20687361     ed by the flash 
   181f4:	6f6d656d 68207972 77647261 2e657261     memory hardware.
   18204:	00000000 62616e55 7420656c 7573206f     ....Unable to su
   18214:	6e657073 65722f64 656d7573 65706f20     spend/resume ope
   18224:	69746172 002e6e6f 74697257 75462065     ration..Write Fu
   18234:	6974636e 68206e6f 66207361 656c6961     nction has faile
   18244:	72652064 63726f72 6b636568 0000002e     d errorcheck....
   18254:	62616e55 7420656c 6e65206f 656c6261     Unable to enable
   18264:	622d3420 20657479 72646461 69737365      4-byte addressi
   18274:	002e676e 62616e55 7420656c 6964206f     ng..Unable to di
   18284:	6c626173 2d342065 65747962 64646120     sable 4-byte add
   18294:	73736572 2e676e69 00000000 20656854     ressing.....The 
   182a4:	70696863 20736920 72727563 6c746e65     chip is currentl
   182b4:	6f702079 65726577 6f642064 002e6e77     y powered down..
   182c4:	20656854 73616c46 68632068 64207069     The Flash chip d
   182d4:	2073656f 20746f6e 70707573 2074726f     oes not support 
   182e4:	50444653 0000002e 62616e55 7420656c     SFDP....Unable t
   182f4:	6572206f 45206461 65736172 72615020     o read Erase Par
   18304:	74656d61 20737265 6d6f7266 69686320     ameters from chi
   18314:	52202e70 72657665 676e6974 206f7420     p. Reverting to 
   18324:	7262696c 20797261 61666564 73746c75     library defaults
   18334:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   18344:	65206461 65736172 6d697420 66207365     ad erase times f
   18354:	206d6f72 73616c66 656d2068 79726f6d     rom flash memory
   18364:	6552202e 74726576 20676e69 6c206f74     . Reverting to l
   18374:	61726269 64207972 75616665 2e73746c     ibrary defaults.
   18384:	00000000 62616e55 7420656c 6572206f     ....Unable to re
   18394:	70206461 72676f72 74206d61 73656d69     ad program times
   183a4:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
   183b4:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
   183c4:	62696c20 79726172 66656420 746c7561      library default
   183d4:	00002e73 43206f4e 20706968 656c6553     s...No Chip Sele
   183e4:	70207463 64206e69 6e696665 69206465     ct pin defined i
   183f4:	6874206e 75632065 6d6f7473 49505320     n the custom SPI
   18404:	72724120 002e7961 6e6b6e55 206e776f      Array..Unknown 
   18414:	6f727265 00000072 6f727245 6f632072     error...Error co
   18424:	203a6564 00007830 00000030 74206649     de: 0x..0...If t
   18434:	20736968 73656f64 746f6e20 6c656820     his does not hel
   18444:	65722070 766c6f73 6c632f65 66697261     p resolve/clarif
   18454:	68742079 69207369 65757373 0000202c     y this issue, ..
   18464:	61656c70 72206573 65736961 206e6120     please raise an 
   18474:	75737369 74612065 74746820 2f2f3a70     issue at http://
   18484:	2e777777 2d327368 69676e65 7265656e     www.hs2-engineer
   18494:	2e676e69 692f6564 7865646e 7068702e     ing.de/index.php
   184a4:	6e6f632f 74636174 6d74682e 6977206c     /contact.html wi
   184b4:	74206874 64206568 69617465 6f20736c     th the details o
   184c4:	68772066 79207461 2072756f 65726577     f what your were
   184d4:	696f6420 7720676e 206e6568 73696874      doing when this
   184e4:	72726520 6f20726f 72756363 00646572      error occurred.

000184f4 <maxEventCount>:
   184f4:	01000010                                         ..

000184f6 <sizeOfEventQueue>:
   184f6:	ffff0100                                         ..

000184f8 <forever>:
   184f8:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   18508:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   18518:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   18528:	6f697067 7361625f 00682e65              gpio_base.h.

00018534 <_ZTV14Calendar_Class>:
	...
   1853c:	0001315d 0001324d                       ]1..M2..

00018544 <_ZTV17DateTimeLog_Class>:
	...
   1854c:	000112f3 000112f3                       ........

00018554 <_ZTV9CDC_Class>:
	...
   1855c:	00013d7d 00013e31 00013a8d 00013d45     }=..1>...:..E=..
   1856c:	00013ea1 00013d09 00013c79 00013cc9     .>...=..y<...<..
   1857c:	00013d65 00013db5                       e=...=..

00018584 <_ZTV6Stream>:
	...
   1858c:	000112f3 00013f35 00013a8d 00013aa1     ....5?...:...:..
   1859c:	000112f3 000112f3 000112f3 2e257830     ............0x%.
   185ac:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   185bc:	0066766f                                ovf.

000185c0 <_ZTV5Print>:
	...
   185c8:	000112f3 00013f35 00013a8d 00013aa1     ....5?...:...:..
   185d8:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   185e8:	00632e6f 00776f70 00000000 00000000     o.c.pow.........

000185f8 <TWO52>:
   185f8:	00000000 43300000 00000000 c3300000     ......0C......0.

00018608 <_global_impure_ptr>:
   18608:	200001c8                                ... 

0001860c <_init>:
   1860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1860e:	bf00      	nop
   18610:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18612:	bc08      	pop	{r3}
   18614:	469e      	mov	lr, r3
   18616:	4770      	bx	lr

00018618 <__init_array_start>:
   18618:	000168e1 	.word	0x000168e1

0001861c <__frame_dummy_init_array_entry>:
   1861c:	00000289 000006d1 000007f5 00000891     ................
   1862c:	00000d51 00001009 00001149 0000175d     Q.......I...]...
   1863c:	00001b81 00002bc1 00010b21 000115d1     .....+..!.......
   1864c:	0001199d 00011c51 00011d01 00011d91     ....Q...........
   1865c:	0001246d 00012d3d 00013499 00013a55     m$..=-...4..U:..
   1866c:	00013f21 00014621                       !?..!F..

00018674 <_fini>:
   18674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18676:	bf00      	nop
   18678:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1867a:	bc08      	pop	{r3}
   1867c:	469e      	mov	lr, r3
   1867e:	4770      	bx	lr

00018680 <__fini_array_start>:
   18680:	00000265 	.word	0x00000265
